//------------------------------------------------------------------
//-- Hello world example
//-- Turn on all the leds
//-- This example has been tested on the following boards:
//--   * Lattice icestick
//--   * Icezum alhambra (https://github.com/FPGAwars/icezum)
//------------------------------------------------------------------



module vga (
    output VSYNC,
    output HSYNC,
    // output OE,
    output reg [2:0] red,
    output reg [2:0] green,
    output reg [1:0] blue,
    //output reg [2:0] led,
    //output CLK_25M,
    input CLK_12M,
    //input RW,
    // input EN,
    // input [2:0] REG,
    // input [7:0] DATA
);
    // assign OE = 1;
    wire RW = 0;


    localparam H_RES_FULL = 799;
    localparam V_RES_FULL = 524;
    localparam H_RES = 640;
    localparam V_RES = 480;
    localparam V_CHAR_HIRES = 60;
    localparam H_CHAR_HIRES = 80;
    localparam V_CHAR_LORES = 30;
    localparam H_CHAR_LORES = 40;

    //assign DATA = ~EN ? (~RW ? 8'bzzzzzzzz : data_out) : 8'bzzzzzzzz;

    reg [7:0] data_out = 0;

    parameter MEM_INIT_FILE = "char_data.mem";

    reg [7:0] character_rom['h400-1:0];
    reg [7:0] character_ram['h400-1:0];
    reg [7:0] fb0['h1400-1:0];
    reg [7:0] fb1['h1400-1:0];

    reg [7:0] bgcolor;
    reg [7:0] fgcolor;

    // integer i;
    // initial begin
    //     address_reg <= 0;
    //     fb0[0] <= 8'h41;
    //     for (i = 1; i < 'h1400; i = i + 1) begin
    //         fb0[i] <= 8'h20;
    //         //fb1[i] <= 8'h20;
    //     end
    // end

    reg RESET;

    // initial begin
    //     if (MEM_INIT_FILE != "") begin
    //         $readmemh(MEM_INIT_FILE, character_rom);
    //         //$readmemh(MEM_INIT_FILE, character_ram);
    //     end
    // end

    initial begin
        // CLK_25M <= 1'b0;
        RESET = 1'b0;
        fgcolor = 8'hFF;
        bgcolor = 8'h00;
        // led <= 3'b111;
    end

    wire CLK;

    // wire enabled = ~EN;
    // wire write = ~RW;

    wire CLK_FAST;
    reg CLK_PIX;
    wire locked;


    pll mypll(.clock_in(CLK_12M), .clock_out(CLK_FAST), .locked(locked), .reset(1));
    ////////
    // make a simple blink circuit
    ////////

    // Divide by 4
    reg counter = 1'b0;
    //assign CLK_PIX = CLK_FAST;

    always @(posedge CLK_FAST) begin
        // counter <= ~counter;
        // if (counter == 1'b0) begin
            CLK_PIX <= ~CLK_PIX;
        // end
    end

    wire DE;
    wire [9:0] XPOS;
    wire [9:0] YPOS;

    display_timings timings (.vsync(VSYNC), .hsync(HSYNC), .clk_pix(CLK_PIX), .de(DE), .sx(XPOS), .sy(YPOS), .rst(0));

    reg oldVsync;
    reg [31:0] cnt;


    always @(posedge CLK_PIX) begin
        if (DE == 1'b1) begin
            red <= 3'h7;
            green <= 3'h7;
            blue <= 2'h3;
        end
        else  begin
            red <= 3'h0;
            green <= 3'h0;
            blue <= 2'h0;
        end
        // red   <= (DE == 1'b1) ? (XPOS & 3'h7) : 3'h0; //(cur_px ? fgcolor[7:5] : bgcolor[7:5]) : 3'h0;
        // green <= (DE == 1'b1) ? 3'h7 : 3'h0; //(cur_px ? fgcolor[4:2] : bgcolor[4:2]) : 3'h0;
        // blue  <= (DE == 1'b1) ? 2'h3 : 2'h0; //(cur_px ? fgcolor[1:0] : bgcolor[1:0]) : 2'h0;

        if (VSYNC && (VSYNC != oldVsync)) begin
            cnt <= cnt + 1;
        end
        // if (cnt == 60) begin
        //     cnt <= 0;
        //     led <= (led == 3'b111) ? 3'b000 : 3'b111;
        // end
        oldVsync <= VSYNC;
        // if ((YPOS == V_RES) && (XPOS == 1'b0)) begin
        //     current_fb <= ~current_fb;
        // end
    end
    
endmodule
