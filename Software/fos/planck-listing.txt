ca65 V2.18 - N/A
Main file   : platform/planck/main.s
Current file: platform/planck/main.s

000000r 1               
000000r 1               .include "../../macros.s"
000000r 2               .macro  printascii   addr
000000r 2               .local @loop
000000r 2               .local @done
000000r 2                   phx
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda addr,x
000000r 2                   beq @done
000000r 2                   jsr kernel_putc
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @done:
000000r 2                   plx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               
000000r 2               .macro  cp16   src, dest
000000r 2                   lda src
000000r 2                   sta dest
000000r 2                   lda src + 1
000000r 2                   sta dest + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro printstr addr, len
000000r 2               .repeat len, I
000000r 2               lda addr + I
000000r 2               jsr kernel_putc
000000r 2               .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl16 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl32 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2                   rol src + 2
000000r 2                   rol src + 3
000000r 2               .endmacro
000000r 2               
000000r 2               .macro lsr16 src
000000r 2                   lsr src + 1
000000r 2                   ror src
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc16 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment the MSB if LSB wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc32 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment next byte if LSB wrapped round
000000r 2                   bne @done
000000r 2                   inc src+2       ;Increment the next byte the previous wrapped round
000000r 2                   bne @done
000000r 2                   inc src+3       ;Increment the MSB if previous wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16 src
000000r 2               .local @skip
000000r 2               .local @end
000000r 2                   lda src             ; load low byte
000000r 2                   bne @skip           ; if it's not zero, just decrement it
000000r 2                   dec src + 1         ; if low byte is zero decrement high byte
000000r 2               @skip:
000000r 2                   dec src
000000r 2               @end:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16zero src
000000r 2               .local @skip
000000r 2               .local @end
000000r 2                   lda src             ; load low byte
000000r 2                   bne @skip           ; if it's not zero, decrement it
000000r 2                   dec src + 1         ; if low byte is zero decrement high byte
000000r 2                   beq @end            ; if high byte is also zero, we reached zero, exit now
000000r 2               @skip:
000000r 2                   dec src
000000r 2                   bne @end            ; if low byte is not zero exit now
000000r 2                   lda src + 1         ; if low byte was zero, load high byte to check if it's also zero
000000r 2               @end:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro add16 first, second, result
000000r 2                   CLC             ;Ensure carry is clear
000000r 2                   LDA first+0       ;Add the two least significant bytes
000000r 2                   ADC second+0
000000r 2                   STA result+0       ;... and store the result
000000r 2                   LDA first+1       ;Add the two most significant bytes
000000r 2                   ADC second+1       ;... and any propagated carry bit
000000r 2                   STA result+1       ;... and store the result
000000r 2               .endmacro
000000r 2               
000000r 2               ; compare data at two adresses for defined length
000000r 2               ; On exit, carry is set if there is a match
000000r 2               ; and unset if no match
000000r 2               ; length of data to check is in X
000000r 2               
000000r 2               .macro memcmp first, second
000000r 2               .local @exit
000000r 2               .local @loop
000000r 2               .local @exit_fail
000000r 2               @loop:
000000r 2                   lda first, x
000000r 2                   cmp second, x
000000r 2                   bne @exit_fail
000000r 2                   dex
000000r 2                   bne @loop
000000r 2                   lda first           ; check 0th element
000000r 2                   cmp second
000000r 2                   bne @exit_fail
000000r 2                   sec
000000r 2                   bra @exit
000000r 2               @exit_fail:
000000r 2                   clc
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               ; copy data from one address to another for defined length
000000r 2               ; length of data to copy is in X
000000r 2               .macro memcp first, second
000000r 2               .local @exit
000000r 2               .local @loop
000000r 2               @loop:
000000r 2                   lda first, x
000000r 2                   sta second, x
000000r 2                   dex
000000r 2                   bne @loop
000000r 2                   lda first           ; copy zeroth item
000000r 2                   sta second
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               ; calculates length of zero terminated string
000000r 2               ; result is in x
000000r 2               .macro strlen address
000000r 2               .local @loop
000000r 2               .local @exit
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda address, x
000000r 2                   beq @exit
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_axy
000000r 2               	pha		; push accumulator to stack
000000r 2               	phx
000000r 2                   phy
000000r 2               .endmacro
000000r 2               
000000r 2               .macro pull_axy
000000r 2               	ply		; pull y from stack
000000r 2               	plx		; pull x from stack
000000r 2               	pla		; pull a from stack
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro push_ax
000000r 2               	pha
000000r 2               	phx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ax
000000r 2               	pla
000000r 2               	plx
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_ay
000000r 2               	pha
000000r 2               	phy
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ay
000000r 2               	pla
000000r 2               	ply
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro mov32 SRC, DEST
000000r 2               	lda SRC
000000r 2               	sta DEST
000000r 2               	lda SRC+1
000000r 2               	sta DEST+1
000000r 2               	lda SRC+2
000000r 2               	sta DEST+2
000000r 2               	lda SRC+3
000000r 2               	sta DEST+3
000000r 2               .endmacro
000000r 2               
000000r 1               ; The clock speed after it is divided by two by the counter
000000r 1               CLOCK_SPEED = 12000000
000000r 1               
000000r 1               ; Comment this line to disable taliforth's assembler and disassembler
000000r 1               TALI_OPTIONAL_ASSEMBLER = 1
000000r 1               
000000r 1               ; Comment this line to diasble the RAM expansion card and related words
000000r 1               ENABLE_RAM_EXPANSION = 1
000000r 1               
000000r 1               ram_end = $8000
000000r 1               
000000r 1               ; select includes to enable card drivers
000000r 1               ; NOT ALL OF THEM WORK
000000r 1               
000000r 1               .include "drivers/cf.inc"
000000r 2               
000000r 2               CF_READ_SECTOR_COMMAND = $20
000000r 2               CF_WRITE_SECTOR_COMMAND = $30
000000r 2               CF_ADDRESS = $FFD0
000000r 2               
000000r 1               .include "drivers/acia.inc"
000000r 2               ACIA_BASE   = $FFE0
000000r 2               ACIA_DATA = ACIA_BASE
000000r 2               ACIA_STATUS = ACIA_BASE + 1
000000r 2               ACIA_CMD = ACIA_BASE + 2
000000r 2               ACIA_CTRL = ACIA_BASE + 3
000000r 2               
000000r 2               
000000r 1               .include "drivers/via.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               VIA1_BASE   = $FF80
000000r 2               PORTB = VIA1_BASE
000000r 2               PORTA  = VIA1_BASE+1
000000r 2               DDRB = VIA1_BASE+2
000000r 2               DDRA = VIA1_BASE+3
000000r 2               
000000r 2               
000000r 2               T1CL = VIA1_BASE + 4
000000r 2               T1CH = VIA1_BASE + 5
000000r 2               T1LL = VIA1_BASE + 6
000000r 2               T1LH = VIA1_BASE + 7
000000r 2               ACR = VIA1_BASE + 11
000000r 2               PCR = VIA1_BASE + 12
000000r 2               IFR = VIA1_BASE + 13
000000r 2               IER = VIA1_BASE + 14
000000r 2               
000000r 1               ; .include "drivers/sd.inc"
000000r 1               .include "drivers/ps2.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               DATA = $80   ; Data is in bit 7 of PORTA
000000r 2               ; clock is on CA2
000000r 2               SHIFT = $1
000000r 2               ALT = $2
000000r 2               
000000r 2               KB_STATE_START = $0
000000r 2               KB_STATE_DATA = $1
000000r 2               KB_STATE_PARITY = $2
000000r 2               KB_STATE_STOP = $3
000000r 2               
000000r 2               KB_INIT_STATE_RESET = $0
000000r 2               KB_INIT_STATE_RESET_ACK = $1
000000r 2               KB_INIT_STATE_LEDS = $2
000000r 2               KB_INIT_STATE_LEDS_ACK = $3
000000r 2               KB_INIT_STATE_LEDS_DATA = $4
000000r 2               KB_INIT_STATE_LEDS_DATA_ACK = $5
000000r 2               
000000r 2               LSHIFT_KEY = $12
000000r 2               RSHIFT_KEY = $59
000000r 2               
000000r 2               TIMER_DELAY = $C4
000000r 2               
000000r 2               
000000r 1               ; .include "drivers/4004.inc"
000000r 1               .include "drivers/lcd.inc"
000000r 2               
000000r 2               ; HD 44780 driver
000000r 2               ; all pins on VIA PORTA, 4 bit mode
000000r 2               
000000r 2               ; PORTA0 is free
000000r 2               LCD_BASE = $FFC0
000000r 2               LCD_ADDR_DISABLED = LCD_BASE
000000r 2               LCD_ADDR_ENABLED = LCD_BASE + 1
000000r 2               LCD_DATA_DISABLED = LCD_BASE + 2
000000r 2               LCD_DATA_ENABLED = LCD_BASE + 3
000000r 2               
000000r 2               
000000r 2               ; A0: RS
000000r 2               ; A1: E
000000r 2               
000000r 1               ; .include "drivers/vga.inc"
000000r 1               ; .include "drivers/keyboard.inc"
000000r 1               
000000r 1               .segment "ZEROPAGE": zeropage
000000r 1               .ifdef CF_ADDRESS
000000r 1  xx xx        io_buffer_ptr: .res 2
000002r 1               .endif
000002r 1               .ifdef ENABLE_RAM_EXPANSION
000002r 1               .if ENABLE_RAM_EXPANSION = 1
000002r 1  xx xx        ram_expansion_address: .res 2
000004r 1               .endif
000004r 1               .endif
000004r 1               
000004r 1  xx xx        load_addr: .res 2
000006r 1               
000006r 1               .include "drivers/zp.s"
000006r 2               ; Copyright 2020 Jonathan Foucher
000006r 2               
000006r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000006r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000006r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000006r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000006r 2               ; is furnished to do so, subject to the following conditions:
000006r 2               
000006r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000006r 2               ; substantial portions of the Software.
000006r 2               
000006r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000006r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000006r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000006r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000006r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000006r 2               ; DEALINGS IN THE SOFTWARE.
000006r 2               
000006r 2               ; next_addr: .res 1
000006r 2               
000006r 2               
000006r 2  xx xx        tmp_var: .res 2
000008r 2               
000008r 2               
000008r 2               
000008r 1               
000008r 1               .segment "BSS"
000000r 1               .ifdef load_addr
000000r 1  xx           char_count: .res 1
000001r 1  xx           record_type: .res 1
000002r 1  xx xx        start_address: .res 2
000004r 1  xx           start_bank: .res 1
000005r 1  xx           running_checksum: .res 1
000006r 1  xx           checksum: .res 1
000007r 1  xx           ihex_tmp: .res 1
000008r 1               .endif
000008r 1               
000008r 1               .ifdef CF_ADDRESS
000008r 1               IO_BUFFER = cp0+256 ; set IO_BUFFER to block buffer
000008r 1  xx xx xx xx  IO_SECTOR: .res 4
00000Cr 1               .endif
00000Cr 1               .ifdef VIDEO_BASE
00000Cr 1               vga_enable: .res 1
00000Cr 1               .endif
00000Cr 1               
00000Cr 1               .segment "STARTUP"
000000r 1               .import    copydata
000000r 1               .import zerobss
000000r 1               
000000r 1               v_reset:
000000r 1  20 rr rr         JSR     copydata
000003r 1  20 rr rr         jsr zerobss
000006r 1               
000006r 1  4C rr rr         jmp kernel_init
000009r 1               
000009r 1               
000009r 1               
000009r 1               .segment "DATA"
000000r 1               
000000r 1               .include "drivers/delayroutines.s"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               ; this routine delays by 2304 * y + 23 cycles
000000r 2               delay:
000000r 2  DA             phx       ; 3 cycles
000001r 2  5A             phy       ; 3 cycles
000002r 2               two:
000002r 2  A2 FF          ldx #$ff  ; 2 cycles
000004r 2               one:
000004r 2  EA             nop       ; 2 cycles
000005r 2  EA             nop       ; 2 cycles
000006r 2  CA             dex       ; 2 cycles
000007r 2  D0 FB          bne one   ; 3 for all cycles, 2 for last
000009r 2  88             dey       ; 2 cycles
00000Ar 2  D0 F6          bne two   ; 3 for all cycles, 2 for last
00000Cr 2  7A             ply       ; 4 cycles
00000Dr 2  FA             plx       ; 4 cycles
00000Er 2  60             rts       ; 6 cycles
00000Fr 2               
00000Fr 2               ; delay is in Y register
00000Fr 2               delay_long:
00000Fr 2  48             pha
000010r 2  5A             phy
000011r 2  DA             phx
000012r 2  98             tya
000013r 2  AA             tax
000014r 2               delay_long_loop:
000014r 2  A0 FF          ldy #$ff
000016r 2  20 rr rr       jsr delay
000019r 2  CA             dex
00001Ar 2  D0 F8          bne delay_long_loop
00001Cr 2  FA             plx
00001Dr 2  7A             ply
00001Er 2  68             pla
00001Fr 2  60             rts
000020r 2               
000020r 2               delay_short:        ; delay Y * 19 cycles
000020r 2  5A             phy
000021r 2               delay_short_loop:
000021r 2  EA             nop               ; 2 cycles
000022r 2  EA             nop               ; 2 cycles
000023r 2  EA             nop               ; 2 cycles
000024r 2  EA             nop               ; 2 cycles
000025r 2  EA             nop               ; 2 cycles
000026r 2  EA             nop               ; 2 cycles
000027r 2  EA             nop               ; 2 cycles
000028r 2               
000028r 2               
000028r 2  88             dey               ; 2 cycles
000029r 2  D0 F6          bne delay_short_loop   ; 2 or 3 cycles
00002Br 2  7A             ply
00002Cr 2  60             rts
00002Dr 2               
00002Dr 1               
00002Dr 1               .ifdef VIA1_BASE
00002Dr 1               .include "drivers/timer.s"
00002Dr 2               .segment "ZEROPAGE"
000008r 2  xx xx xx xx  time: .res 4
00000Cr 2               
00000Cr 2               .segment "DATA"
00002Dr 2               
00002Dr 2               COUNTER = CLOCK_SPEED/200        ; n/s
00002Dr 2               ; 200 ticks per second, or 5ms per tick
00002Dr 2               timer_init:
00002Dr 2  AD 8E FF         lda IER
000030r 2  09 C0            ora #$C0        ;enable interrupt on timer1 timeout
000032r 2  8D 8E FF         sta IER
000035r 2  A9 40            lda #$40        ; timer one free run mode
000037r 2  8D 8B FF         sta ACR
00003Ar 2  A9 60            lda #<COUNTER     ; set timer to low byte to calculated value from defined clock speed
00003Cr 2  8D 84 FF         sta T1CL
00003Fr 2  A9 EA            lda #>COUNTER       ; set timer to high byte to calculated value from defined clock speed
000041r 2  8D 85 FF         sta T1CH
000044r 2  64 rr            stz time
000046r 2  64 rr            stz time+1
000048r 2  64 rr            stz time+2
00004Ar 2  64 rr            stz time+3
00004Cr 2  58               cli
00004Dr 2  60               rts
00004Er 2               
00004Er 2               
00004Er 2               timer_irq:
00004Er 2  E6 rr            inc time
000050r 2  F0 01            beq @inc1
000052r 2               @exit1:
000052r 2                   ; this resets the PS/2 temp variables
000052r 2                   ;jsr reset_ps2
000052r 2  60               rts
000053r 2               @inc1:
000053r 2  E6 rr            inc time+1
000055r 2  F0 02            beq @inc2
000057r 2  80 F9            bra @exit1
000059r 2               @inc2:
000059r 2  E6 rr            inc time+2
00005Br 2  F0 02            beq @inc3
00005Dr 2  80 F3            bra @exit1
00005Fr 2               @inc3:
00005Fr 2  E6 rr            inc time+3
000061r 2  80 EF            bra @exit1
000063r 2  60               rts
000064r 2               
000064r 1               .include "drivers/spi.s"
000064r 2               ; SPI defines
000064r 2               .ifndef DATA
000064r 2               DATA = $80
000064r 2               .endif
000064r 2               SS = $07   ; Slave Select with lowest 3 bits
000064r 2               SCK = $08   ; Clock on bit 3
000064r 2               MISO = $10  ; MISO on bit 4
000064r 2               MOSI = $20  ; MOSI on bit 5
000064r 2               CONF = $40  ; CONF on bit 6
000064r 2               
000064r 2               .segment "BSS"
00000Cr 2  xx           spi_tmp: .res 1
00000Dr 2  xx           spi_tmp2: .res 1
00000Er 2  xx           spi_slave: .res 1
00000Fr 2               
00000Fr 2               .segment "DATA"
000064r 2               
000064r 2               spi_init:
000064r 2  AD 80 FF         lda PORTB               ; load current port B
000067r 2  29 90            and #(DATA | MISO)      ; set everything to zero except for PS2 DATA and MISO
000069r 2  09 40            ora #CONF               ; set CONF high
00006Br 2  8D 80 FF         sta PORTB               ; save to PORTB
00006Er 2  AD 82 FF         lda DDRB                ; get current direction register
000071r 2  09 6F            ora #(MOSI | CONF | SCK | SS) ; set MOSI, CONF, SCK and SS as outputs
000073r 2  29 EF            and #($FF^MISO)                 ; set MISO as input
000075r 2  8D 82 FF         sta DDRB
000078r 2  A9 FF            lda #$FF                ; flash leds to see what is going on
00007Ar 2  8D 83 FF         sta DDRA
00007Dr 2                   ;sta PORTA
00007Dr 2  60               rts
00007Er 2               
00007Er 2               spi_select:
00007Er 2                   ; selected slave in A
00007Er 2  29 07            and #SS                 ; mask slave select bits
000080r 2  8D 80 FF         sta PORTB               ; set everything low except for SS bits
000083r 2  8D rr rr         sta spi_slave
000086r 2  5A               phy
000087r 2  A0 01            ldy #$1
000089r 2  20 rr rr         jsr delay_short         ; slight delay
00008Cr 2  09 40            ora #CONF               ; set CONF high to latch address
00008Er 2  8D 80 FF         sta PORTB               ; save to PORTB
000091r 2  7A               ply                     ; CONF MUST stay high for the duration of the transfer
000092r 2  60               rts
000093r 2               
000093r 2               spi_clk_toggle:
000093r 2  60               rts
000094r 2               
000094r 2               spi_transceive:
000094r 2                   ; send data in A, received data will be in A
000094r 2  5A               phy
000095r 2                   ; save data in RAM
000095r 2  8D rr rr         sta spi_tmp
000098r 2                   ; reset X
000098r 2  DA               phx
000099r 2  A2 08            ldx #8
00009Br 2                   ; reset result
00009Br 2  9C rr rr         stz spi_tmp2
00009Er 2               spi_send_loop:
00009Er 2  0E rr rr         asl spi_tmp
0000A1r 2  90 08            bcc bit_unset
0000A3r 2               bit_set:
0000A3r 2  AD 80 FF         lda PORTB
0000A6r 2  09 60            ora #(MOSI | CONF)
0000A8r 2  4C rr rr         jmp clock_on
0000ABr 2               bit_unset:
0000ABr 2  AD 80 FF         lda PORTB
0000AEr 2  29 DF            and #(($FF^MOSI) | CONF)
0000B0r 2               clock_on:
0000B0r 2                   ; set data bit
0000B0r 2  0D rr rr         ora spi_slave
0000B3r 2  8D 80 FF         sta PORTB
0000B6r 2               
0000B6r 2                   ; set clock on
0000B6r 2  09 48            ora #(SCK | CONF)
0000B8r 2  0D rr rr         ora spi_slave
0000BBr 2  8D 80 FF         sta PORTB
0000BEr 2               
0000BEr 2                   ; read bit from slave, maybe add slight delay here ?
0000BEr 2  AD 80 FF         lda PORTB
0000C1r 2  29 10            and #MISO           ; mask miso bit
0000C3r 2  D0 07            bne spi_bit_set      ; bit is set
0000C5r 2                   ; bit is unset
0000C5r 2  18               clc
0000C6r 2  2E rr rr         rol spi_tmp2
0000C9r 2  4C rr rr         jmp clock_off
0000CCr 2               
0000CCr 2               spi_bit_set:
0000CCr 2  38               sec
0000CDr 2  2E rr rr         rol spi_tmp2
0000D0r 2               
0000D0r 2               
0000D0r 2               clock_off:
0000D0r 2  AD 80 FF         lda PORTB
0000D3r 2  29 F7            and #(($FF^SCK) | CONF)
0000D5r 2  0D rr rr         ora spi_slave
0000D8r 2  8D 80 FF         sta PORTB
0000DBr 2               end_loop:
0000DBr 2  CA               dex
0000DCr 2  D0 C0            bne spi_send_loop
0000DEr 2                   ; set data low
0000DEr 2  A0 01            ldy #$1
0000E0r 2  20 rr rr         jsr delay_short
0000E3r 2  AD 80 FF         lda PORTB
0000E6r 2  0D rr rr         ora spi_slave
0000E9r 2  29 DF            and #(($FF^MOSI) | CONF)
0000EBr 2  8D 80 FF         sta PORTB
0000EEr 2  FA               plx
0000EFr 2  7A               ply
0000F0r 2  AD rr rr         lda spi_tmp2
0000F3r 2  60               rts
0000F4r 2               
0000F4r 1               .endif
0000F4r 1               
0000F4r 1               .ifdef ACIA_BASE
0000F4r 1               .include "drivers/acia.s"
0000F4r 2               ACIA_DELAY = CLOCK_SPEED / 250000
0000F4r 2               
0000F4r 2               acia_init:
0000F4r 2  8D E1 FF         sta ACIA_STATUS        ; soft reset (value not important)
0000F7r 2                                           ; set specific modes and functions
0000F7r 2  A9 0B            lda #$0B                ; no parity, no echo, no Tx interrupt, NO Rx interrupt, enable Tx/Rx
0000F9r 2  8D E2 FF         sta ACIA_CMD        ; store to the command register
0000FCr 2  A9 10            lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 115.200k baud rate
0000FEr 2                   ;lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 1200 baud rate
0000FEr 2  8D E3 FF         sta ACIA_CTRL          ; program the ctl register
000101r 2               aa_end:
000101r 2  60               rts
000102r 2               
000102r 2               acia_out:
000102r 2  48               pha
000103r 2  5A               phy
000104r 2  8D E0 FF         sta ACIA_DATA
000107r 2               .ifndef LCD_BUF                ; if the LCD is in the build, we do not need to delay
000107r 2  A0 30            ldy #ACIA_DELAY            ;minimal delay is $02
000109r 2  20 rr rr         jsr delay_short
00010Cr 2               .endif
00010Cr 2  7A               ply
00010Dr 2  68               pla
00010Er 2  60               rts
00010Fr 2               
00010Fr 2               acia_getc:
00010Fr 2  AD E1 FF         lda ACIA_STATUS                 ; Read the ACIA status to
000112r 2  29 08            and #$08                        ; Check if there is character in the receiver
000114r 2  F0 05            beq @no_char      ; Exit now if we don't get one.
000116r 2  AD E0 FF         lda ACIA_DATA
000119r 2  38               sec
00011Ar 2  60               rts
00011Br 2               @no_char:
00011Br 2  18               clc
00011Cr 2  60               rts
00011Dr 2               
00011Dr 1               .endif
00011Dr 1               
00011Dr 1               .ifdef LCD_BASE
00011Dr 1               .include "drivers/lcd.s"
00011Dr 2               .segment "ZEROPAGE": zeropage
00000Cr 2  xx           LCD_BUF_W_PTR: .res 1
00000Dr 2  xx           LCD_BUF_R_PTR: .res 1
00000Er 2  xx           lcd_pos: .res 1
00000Fr 2               
00000Fr 2               .segment "BSS"
00000Fr 2  xx xx xx xx  LCD_BUF: .res 128
000013r 2  xx xx xx xx  
000017r 2  xx xx xx xx  
00008Fr 2  xx           has_lcd: .res 1
000090r 2               
000090r 2               .segment "CODE"
000000r 2               
000000r 2               ; initialize the LCD in 8 bit mode
000000r 2               lcd_init:
000000r 2  9C rr rr         stz has_lcd
000003r 2  20 rr rr         jsr buf_clr
000006r 2  AD C0 FF         lda LCD_ADDR_DISABLED
000009r 2  6A               ror
00000Ar 2  B0 36            bcs lcd_init_exit
00000Cr 2  8D rr rr         sta has_lcd
00000Fr 2               
00000Fr 2  64 rr            stz LCD_BUF_W_PTR
000011r 2  64 rr            stz LCD_BUF_R_PTR
000013r 2  64 rr            stz lcd_pos
000015r 2               
000015r 2  A0 FF            ldy #$FF
000017r 2  20 rr rr         jsr delay
00001Ar 2               
00001Ar 2  A9 38            LDA #$38            ;function set: 8 bit
00001Cr 2  20 rr rr         jsr lcd_inst
00001Fr 2               
00001Fr 2  A0 FF            ldy #$FF
000021r 2  20 rr rr         jsr delay
000024r 2               
000024r 2  A9 0F            LDA #$0F            ;display on, cursor on, blink on
000026r 2  20 rr rr         jsr lcd_inst
000029r 2               
000029r 2                   ;entry mode set
000029r 2  A9 06            LDA #$06
00002Br 2  20 rr rr         jsr lcd_inst
00002Er 2               
00002Er 2                   ;clear display
00002Er 2  A9 01            LDA #$01
000030r 2  20 rr rr         jsr lcd_inst
000033r 2               
000033r 2  A0 FF            ldy #$ff            ; wait a while
000035r 2  20 rr rr         jsr delay
000038r 2                   ;set dram address to start of screen
000038r 2  A9 80            LDA #$80
00003Ar 2  20 rr rr         jsr lcd_inst
00003Dr 2               
00003Dr 2  A0 FF            ldy #$ff            ; wait a while
00003Fr 2  20 rr rr         jsr delay
000042r 2               lcd_init_exit:
000042r 2  60               RTS
000043r 2               
000043r 2               ; Send an instruction in 8 bit mode
000043r 2               lcd_inst:
000043r 2  5A               phy
000044r 2  8D C1 FF         sta LCD_ADDR_ENABLED
000047r 2  A0 02            ldy #$2                    ; Delay 38 clock cycles - 3 us at 12.5 MHz
000049r 2  20 rr rr         jsr delay_short
00004Cr 2  8D C0 FF         sta LCD_ADDR_DISABLED
00004Fr 2  A0 10            ldy #$10                     ; Delay 608 clock cycles - 48 us at 12.5 MHz
000051r 2  20 rr rr         jsr delay_short
000054r 2  7A               ply
000055r 2  60               rts
000056r 2               
000056r 2               lcd_send:
000056r 2  8D C3 FF         sta LCD_DATA_ENABLED
000059r 2  A0 04            ldy #$4                    ; Delay 38 clock cycles - 3 us at 12.5 MHz
00005Br 2  20 rr rr         jsr delay_short
00005Er 2               
00005Er 2  8D C2 FF         sta LCD_DATA_DISABLED
000061r 2  A0 10            ldy #$10                     ; Delay 608 clock cycles - 48 us at 12.5 MHz
000063r 2  20 rr rr         jsr delay_short
000066r 2  60               rts
000067r 2               
000067r 2               ; Sends the character in A to the display
000067r 2               lcd_print:               ; 8 bit data in A
000067r 2  5A               phy
000068r 2  DA               phx
000069r 2  48               pha
00006Ar 2  AE rr rr         ldx has_lcd
00006Dr 2  F0 27            beq @continue
00006Fr 2  C9 0A            cmp #$0A
000071r 2  F0 67            beq @next_line
000073r 2  C9 0D            cmp #$0D
000075r 2  F0 63            beq @next_line
000077r 2  C9 08            cmp #$08            ;backspace
000079r 2  F0 1F            beq @backspace
00007Br 2               
00007Br 2  20 rr rr         jsr lcd_send
00007Er 2  A6 rr            ldx lcd_pos
000080r 2  9D rr rr         sta LCD_BUF, x
000083r 2               
000083r 2  E8               inx
000084r 2                   ; Check at which position we are and change line if necessary
000084r 2  86 rr            stx lcd_pos
000086r 2               
000086r 2  E0 14            cpx #20
000088r 2  F0 2A            beq @line_2
00008Ar 2  E0 28            cpx #40
00008Cr 2  F0 31            beq @line_3
00008Er 2  E0 3C            cpx #60
000090r 2  F0 38            beq @line_4
000092r 2  E0 50            cpx #80
000094r 2  F0 3F            beq @clr
000096r 2               
000096r 2               @continue:
000096r 2  68               pla
000097r 2  FA               plx
000098r 2  7A               ply
000099r 2  60               rts
00009Ar 2               
00009Ar 2               ; LCD adressing http://web.alfredstate.edu/faculty/weimandn/lcd/lcd_addressing/lcd_addressing_index.html
00009Ar 2               @backspace:
00009Ar 2  A9 10            lda #$10            ; shift cursor left
00009Cr 2  20 rr rr         jsr lcd_inst
00009Fr 2  A9 20            lda #$20            ; print a space to erase previous char
0000A1r 2  20 rr rr         jsr lcd_send
0000A4r 2               
0000A4r 2  A9 10            lda #$10            ; shift cursor left
0000A6r 2  20 rr rr         jsr lcd_inst
0000A9r 2  C6 rr            dec lcd_pos
0000ABr 2  A6 rr            ldx lcd_pos         ; save in buffer
0000ADr 2  A9 20            lda #$20
0000AFr 2  9D rr rr         sta LCD_BUF,x
0000B2r 2  80 E2            bra @continue
0000B4r 2               @line_2:
0000B4r 2  A9 14            lda #20
0000B6r 2  85 rr            sta lcd_pos
0000B8r 2  A9 C0            lda #$C0
0000BAr 2  20 rr rr         jsr lcd_inst
0000BDr 2  80 D7            bra @continue
0000BFr 2               
0000BFr 2               @line_3:
0000BFr 2  A9 28            lda #40
0000C1r 2  85 rr            sta lcd_pos
0000C3r 2  A9 94            lda #$94
0000C5r 2  20 rr rr         jsr lcd_inst
0000C8r 2  80 CC            bra @continue
0000CAr 2               
0000CAr 2               @line_4:
0000CAr 2  A9 3C            lda #60
0000CCr 2  85 rr            sta lcd_pos
0000CEr 2  A9 D4            lda #$D4
0000D0r 2  20 rr rr         jsr lcd_inst
0000D3r 2  80 C1            bra @continue
0000D5r 2               @clr:
0000D5r 2                   ; lda #0
0000D5r 2                   ; sta lcd_pos
0000D5r 2                   ; lda #$80
0000D5r 2                   ; jsr lcd_inst
0000D5r 2  20 rr rr         jsr lcd_scroll_up
0000D8r 2  80 BC            bra @continue
0000DAr 2               
0000DAr 2               @next_line:
0000DAr 2  A6 rr            ldx lcd_pos            ;get current position
0000DCr 2  E0 50            cpx #80
0000DEr 2  F0 F5            beq @clr
0000E0r 2  E0 3C            cpx #60
0000E2r 2  F0 E6            beq @line_4
0000E4r 2  E0 28            cpx #40
0000E6r 2  F0 D7            beq @line_3
0000E8r 2  E0 14            cpx #20
0000EAr 2  F0 C8            beq @line_2
0000ECr 2  E8               inx
0000EDr 2  86 rr            stx lcd_pos
0000EFr 2  A9 20            lda #$20
0000F1r 2  20 rr rr         jsr lcd_send
0000F4r 2  9D rr rr         sta LCD_BUF, x
0000F7r 2  80 E1            bra @next_line
0000F9r 2               
0000F9r 2               lcd_scroll_up:
0000F9r 2  48               pha                     ; save registers
0000FAr 2  5A               phy
0000FBr 2  DA               phx
0000FCr 2  A9 80            lda #$80                ; set LCD address to start
0000FEr 2  20 rr rr         jsr lcd_inst
000101r 2               
000101r 2  A2 14            ldx #20                 ; start getting characters at the start of the second line
000103r 2               @scroll_loop:
000103r 2  BD rr rr         lda LCD_BUF, X          ; load from buffer
000106r 2  20 rr rr         jsr lcd_send            ; send to display
000109r 2  A8               tay                     ; save current character in Y
00010Ar 2  E0 4F            cpx #79                 ; update LCD address if necessary
00010Cr 2  F0 4A            beq @scline_4
00010Er 2  E0 3B            cpx #59
000110r 2  F0 3F            beq @scline_3
000112r 2  E0 27            cpx #39
000114r 2  F0 34            beq @scline_2
000116r 2               @sccontinue:                ; return from updating LCD address
000116r 2  8A               txa                     ; copy X to A to be able to subtract from it
000117r 2  38               sec                     ; set carry before subtraction
000118r 2  E9 14            sbc #20                 ; subtract 20 to get where to put this character
00011Ar 2  AA               tax                     ; put the result in X
00011Br 2  98               tya                     ; restore character from Y
00011Cr 2  9D rr rr         sta LCD_BUF, X          ; store char in buffer
00011Fr 2  8A               txa                     ; copy X to A to be able to add to it
000120r 2  18               clc
000121r 2  69 14            adc #20                 ; add 20 to restore X
000123r 2  AA               tax                     ; put the result back in X
000124r 2  E8               inx                     ; increment X to prepare to get next char
000125r 2  E0 50            cpx #80                 ; if not at end of buffer
000127r 2  90 DA            bcc @scroll_loop        ; do next char
000129r 2                   ; fill the last line with spaces
000129r 2  A9 D4            lda #$D4                ; set address to last line
00012Br 2  20 rr rr         jsr lcd_inst
00012Er 2  A9 20            lda #$20
000130r 2  A2 3C            ldx #60
000132r 2               @last_line_loop:
000132r 2  9D rr rr         sta LCD_BUF, x
000135r 2  20 rr rr         jsr lcd_send
000138r 2  E8               inx
000139r 2  E0 50            cpx #80                 ; if not at end of buffer
00013Br 2  90 F5            bcc @last_line_loop     ; do next char
00013Dr 2               
00013Dr 2                   ;finally, place the cursor at the start of the last line
00013Dr 2  A9 3C            lda #60
00013Fr 2  85 rr            sta lcd_pos
000141r 2  A9 D4            lda #$D4
000143r 2  20 rr rr         jsr lcd_inst
000146r 2  FA               plx                     ; restore everything as it was
000147r 2  7A               ply
000148r 2  68               pla
000149r 2  60               rts
00014Ar 2               
00014Ar 2               @scline_2:
00014Ar 2  A9 C0            lda #$C0
00014Cr 2  20 rr rr         jsr lcd_inst
00014Fr 2  80 C5            bra @sccontinue
000151r 2               
000151r 2               @scline_3:
000151r 2  A9 94            lda #$94
000153r 2  20 rr rr         jsr lcd_inst
000156r 2  80 BE            bra @sccontinue
000158r 2               
000158r 2               @scline_4:
000158r 2  A9 D4            lda #$D4
00015Ar 2  20 rr rr         jsr lcd_inst
00015Dr 2  80 B7            bra @sccontinue
00015Fr 2               
00015Fr 2               lcd_clear:
00015Fr 2  48               PHA
000160r 2                   ;clear display
000160r 2  A9 01            LDA #$01
000162r 2  20 rr rr         jsr lcd_inst
000165r 2                   ;set dram address
000165r 2  A9 80            LDA #$80
000167r 2  20 rr rr         jsr lcd_inst
00016Ar 2  68               PLA
00016Br 2  60               RTS
00016Cr 2               
00016Cr 2               
00016Cr 2               buf_clr:
00016Cr 2  48               pha
00016Dr 2  DA               phx
00016Er 2  A2 80            ldx #$80
000170r 2  A9 20            lda #$20
000172r 2               buf_clr_loop:
000172r 2  9D rr rr         sta LCD_BUF,X
000175r 2  CA               dex
000176r 2  D0 FA            bne buf_clr_loop
000178r 2  FA               plx
000179r 2  68               pla
00017Ar 2  60               rts
00017Br 2               
00017Br 1               .endif
00017Br 1               .ifdef KB_VIA_BASE
00017Br 1               .include "drivers/keyboard.s"
00017Br 1               .endif
00017Br 1               .ifdef KB_INIT_STATE_RESET
00017Br 1               .include "drivers/ps2.s"
00017Br 2               ; Copyright 2020 Jonathan Foucher
00017Br 2               
00017Br 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
00017Br 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
00017Br 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
00017Br 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
00017Br 2               ; is furnished to do so, subject to the following conditions:
00017Br 2               
00017Br 2               ; The above copyright notice and this permission notice shall be included in all copies or
00017Br 2               ; substantial portions of the Software.
00017Br 2               
00017Br 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
00017Br 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
00017Br 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
00017Br 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
00017Br 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
00017Br 2               ; DEALINGS IN THE SOFTWARE.
00017Br 2               
00017Br 2               .segment "ZEROPAGE": zeropage
00000Fr 2               
00000Fr 2  xx xx xx xx  last_ps2_time: .res 4
000013r 2  xx           KB_BUF_W_PTR: .res 1
000014r 2  xx           KB_BUF_R_PTR: .res 1
000015r 2  xx           control_keys: .res 1
000016r 2  xx           character: .res 1
000017r 2               
000017r 2               .segment "BSS"
000090r 2               .align 16
000090r 2  xx xx xx xx  KB_BUF: .res 128
000094r 2  xx xx xx xx  
000098r 2  xx xx xx xx  
000110r 2  xx           KB_STATE: .res 1
000111r 2  xx           KB_TEMP: .res 1
000112r 2  xx           KB_PARITY: .res 1
000113r 2  xx           KB_BIT: .res 1
000114r 2  xx           KB_INIT_STATE: .res 1
000115r 2  xx           KB_INIT_WAIT: .res 1
000116r 2  xx           ready: .res 1
000117r 2  xx           to_send: .res 1
000118r 2  xx           ignore_next: .res 1
000119r 2               
000119r 2               .segment "RODATA"
000000r 2               
000000r 2               .include "drivers/keycodes.s"
000000r 3               
000000r 3               
000000r 3               ASCIITBL:
000000r 3  00               .byte $00               ; 00 no key pressed
000001r 3  89               .byte $89               ; 01 F9
000002r 3  87               .byte $87               ; 02 relocated F7
000003r 3  85               .byte $85               ; 03 F5
000004r 3  83               .byte $83               ; 04 F3
000005r 3  81               .byte $81               ; 05 F1
000006r 3  82               .byte $82               ; 06 F2
000007r 3  8C               .byte $8C               ; 07 F12
000008r 3  00               .byte $00               ; 08
000009r 3  8A               .byte $8A               ; 09 F10
00000Ar 3  88               .byte $88               ; 0A F8
00000Br 3  86               .byte $86               ; 0B F6
00000Cr 3  84               .byte $84               ; 0C F4
00000Dr 3  09               .byte $09               ; 0D tab
00000Er 3  60               .byte $60               ; 0E `~
00000Fr 3  8F               .byte $8F               ; 0F relocated Print Screen key
000010r 3  03               .byte $03               ; 10 relocated Pause/Break key
000011r 3  A0               .byte $A0               ; 11 left alt (right alt too)
000012r 3  00               .byte $00               ; 12 left shift
000013r 3  E0               .byte $E0               ; 13 relocated Alt release code
000014r 3  00               .byte $00               ; 14 left ctrl (right ctrl too)
000015r 3  71               .byte $71               ; 15 qQ
000016r 3  31               .byte $31               ; 16 1!
000017r 3  00               .byte $00               ; 17
000018r 3  00               .byte $00               ; 18
000019r 3  00               .byte $00               ; 19
00001Ar 3  7A               .byte $7A               ; 1A zZ
00001Br 3  73               .byte $73               ; 1B sS
00001Cr 3  61               .byte $61               ; 1C aA
00001Dr 3  77               .byte $77               ; 1D wW
00001Er 3  32               .byte $32               ; 1E 2@
00001Fr 3  A1               .byte $A1               ; 1F Windows 98 menu key (left side)
000020r 3  02               .byte $02               ; 20 relocated ctrl-break key
000021r 3  63               .byte $63               ; 21 cC
000022r 3  78               .byte $78               ; 22 xX
000023r 3  64               .byte $64               ; 23 dD
000024r 3  65               .byte $65               ; 24 eE
000025r 3  34               .byte $34               ; 25 4$
000026r 3  33               .byte $33               ; 26 3#
000027r 3  A2               .byte $A2               ; 27 Windows 98 menu key (right side)
000028r 3  00               .byte $00               ; 28
000029r 3  20               .byte $20               ; 29 space
00002Ar 3  76               .byte $76               ; 2A vV
00002Br 3  66               .byte $66               ; 2B fF
00002Cr 3  74               .byte $74               ; 2C tT
00002Dr 3  72               .byte $72               ; 2D rR
00002Er 3  35               .byte $35               ; 2E 5%
00002Fr 3  A3               .byte $A3               ; 2F Windows 98 option key (right click, right side)
000030r 3  00               .byte $00               ; 30
000031r 3  6E               .byte $6E               ; 31 nN
000032r 3  62               .byte $62               ; 32 bB
000033r 3  68               .byte $68               ; 33 hH
000034r 3  67               .byte $67               ; 34 gG
000035r 3  79               .byte $79               ; 35 yY
000036r 3  36               .byte $36               ; 36 6^
000037r 3  00               .byte $00               ; 37
000038r 3  00               .byte $00               ; 38
000039r 3  00               .byte $00               ; 39
00003Ar 3  6D               .byte $6D               ; 3A mM
00003Br 3  6A               .byte $6A               ; 3B jJ
00003Cr 3  75               .byte $75               ; 3C uU
00003Dr 3  37               .byte $37               ; 3D 7&
00003Er 3  38               .byte $38               ; 3E 8*
00003Fr 3  00               .byte $00               ; 3F
000040r 3  00               .byte $00               ; 40
000041r 3  2C               .byte $2C               ; 41 ,<
000042r 3  6B               .byte $6B               ; 42 kK
000043r 3  69               .byte $69               ; 43 iI
000044r 3  6F               .byte $6F               ; 44 oO
000045r 3  30               .byte $30               ; 45 0)
000046r 3  39               .byte $39               ; 46 9(
000047r 3  00               .byte $00               ; 47
000048r 3  00               .byte $00               ; 48
000049r 3  2E               .byte $2E               ; 49 .>
00004Ar 3  2F               .byte $2F               ; 4A /?
00004Br 3  6C               .byte $6C               ; 4B lL
00004Cr 3  3B               .byte $3B               ; 4C ;:
00004Dr 3  70               .byte $70               ; 4D pP
00004Er 3  2D               .byte $2D               ; 4E -_
00004Fr 3  00               .byte $00               ; 4F
000050r 3  00               .byte $00               ; 50
000051r 3  00               .byte $00               ; 51
000052r 3  27               .byte $27               ; 52 '"
000053r 3  00               .byte $00               ; 53
000054r 3  5B               .byte $5B               ; 54 [{
000055r 3  3D               .byte $3D               ; 55 =+
000056r 3  00               .byte $00               ; 56
000057r 3  00               .byte $00               ; 57
000058r 3  00               .byte $00               ; 58 caps
000059r 3  00               .byte $00               ; 59 r shift
00005Ar 3  0D               .byte $0D               ; 5A <Enter>
00005Br 3  5D               .byte $5D               ; 5B ]}
00005Cr 3  00               .byte $00               ; 5C
00005Dr 3  5C               .byte $5C               ; 5D \|
00005Er 3  00               .byte $00               ; 5E
00005Fr 3  00               .byte $00               ; 5F
000060r 3  00               .byte $00               ; 60
000061r 3  00               .byte $00               ; 61
000062r 3  00               .byte $00               ; 62
000063r 3  00               .byte $00               ; 63
000064r 3  00               .byte $00               ; 64
000065r 3  00               .byte $00               ; 65
000066r 3  08               .byte $08               ; 66 bkspace
000067r 3  00               .byte $00               ; 67
000068r 3  00               .byte $00               ; 68
000069r 3  31               .byte $31               ; 69 kp 1
00006Ar 3  2F               .byte $2f               ; 6A kp / converted from E04A in code
00006Br 3  34               .byte $34               ; 6B kp 4
00006Cr 3  37               .byte $37               ; 6C kp 7
00006Dr 3  00               .byte $00               ; 6D
00006Er 3  00               .byte $00               ; 6E
00006Fr 3  00               .byte $00               ; 6F
000070r 3  30               .byte $30               ; 70 kp 0
000071r 3  2E               .byte $2E               ; 71 kp .
000072r 3  32               .byte $32               ; 72 kp 2
000073r 3  35               .byte $35               ; 73 kp 5
000074r 3  36               .byte $36               ; 74 kp 6
000075r 3  38               .byte $38               ; 75 kp 8
000076r 3  1B               .byte $1B               ; 76 esc
000077r 3  00               .byte $00               ; 77 num lock
000078r 3  8B               .byte $8B               ; 78 F11
000079r 3  2B               .byte $2B               ; 79 kp +
00007Ar 3  33               .byte $33               ; 7A kp 3
00007Br 3  2D               .byte $2D               ; 7B kp -
00007Cr 3  2A               .byte $2A               ; 7C kp *
00007Dr 3  39               .byte $39               ; 7D kp 9
00007Er 3  8D               .byte $8D               ; 7E scroll lock
00007Fr 3  00               .byte $00               ; 7F
000080r 3                   ;
000080r 3                   ; Table for shifted scancodes
000080r 3                   ;
000080r 3  00               .byte $00               ; 80
000081r 3  C9               .byte $C9               ; 81 F9
000082r 3  C7               .byte $C7               ; 82 relocated F7
000083r 3  C5               .byte $C5               ; 83 F5 (F7 actual scancode=83)
000084r 3  C3               .byte $C3               ; 84 F3
000085r 3  C1               .byte $C1               ; 85 F1
000086r 3  C2               .byte $C2               ; 86 F2
000087r 3  CC               .byte $CC               ; 87 F12
000088r 3  00               .byte $00               ; 88
000089r 3  CA               .byte $CA               ; 89 F10
00008Ar 3  C8               .byte $C8               ; 8A F8
00008Br 3  C6               .byte $C6               ; 8B F6
00008Cr 3  C4               .byte $C4               ; 8C F4
00008Dr 3  09               .byte $09               ; 8D tab
00008Er 3  7E               .byte $7E               ; 8E `~
00008Fr 3  CF               .byte $CF               ; 8F relocated Print Screen key
000090r 3  03               .byte $03               ; 90 relocated Pause/Break key
000091r 3  A0               .byte $A0               ; 91 left alt (right alt)
000092r 3  00               .byte $00               ; 92 left shift
000093r 3  E0               .byte $E0               ; 93 relocated Alt release code
000094r 3  00               .byte $00               ; 94 left ctrl (and right ctrl)
000095r 3  51               .byte $51               ; 95 qQ
000096r 3  21               .byte $21               ; 96 1!
000097r 3  00               .byte $00               ; 97
000098r 3  00               .byte $00               ; 98
000099r 3  00               .byte $00               ; 99
00009Ar 3  5A               .byte $5A               ; 9A zZ
00009Br 3  53               .byte $53               ; 9B sS
00009Cr 3  41               .byte $41               ; 9C aA
00009Dr 3  57               .byte $57               ; 9D wW
00009Er 3  40               .byte $40               ; 9E 2@
00009Fr 3  E1               .byte $E1               ; 9F Windows 98 menu key (left side)
0000A0r 3  02               .byte $02               ; A0 relocated ctrl-break key
0000A1r 3  43               .byte $43               ; A1 cC
0000A2r 3  58               .byte $58               ; A2 xX
0000A3r 3  44               .byte $44               ; A3 dD
0000A4r 3  45               .byte $45               ; A4 eE
0000A5r 3  24               .byte $24               ; A5 4$
0000A6r 3  23               .byte $23               ; A6 3#
0000A7r 3  E2               .byte $E2               ; A7 Windows 98 menu key (right side)
0000A8r 3  00               .byte $00               ; A8
0000A9r 3  20               .byte $20               ; A9 space
0000AAr 3  56               .byte $56               ; AA vV
0000ABr 3  46               .byte $46               ; AB fF
0000ACr 3  54               .byte $54               ; AC tT
0000ADr 3  52               .byte $52               ; AD rR
0000AEr 3  25               .byte $25               ; AE 5%
0000AFr 3  E3               .byte $E3               ; AF Windows 98 option key (right click, right side)
0000B0r 3  00               .byte $00               ; B0
0000B1r 3  4E               .byte $4E               ; B1 nN
0000B2r 3  42               .byte $42               ; B2 bB
0000B3r 3  48               .byte $48               ; B3 hH
0000B4r 3  47               .byte $47               ; B4 gG
0000B5r 3  59               .byte $59               ; B5 yY
0000B6r 3  5E               .byte $5E               ; B6 6^
0000B7r 3  00               .byte $00               ; B7
0000B8r 3  00               .byte $00               ; B8
0000B9r 3  00               .byte $00               ; B9
0000BAr 3  4D               .byte $4D               ; BA mM
0000BBr 3  4A               .byte $4A               ; BB jJ
0000BCr 3  55               .byte $55               ; BC uU
0000BDr 3  26               .byte $26               ; BD 7&
0000BEr 3  2A               .byte $2A               ; BE 8*
0000BFr 3  00               .byte $00               ; BF
0000C0r 3  00               .byte $00               ; C0
0000C1r 3  3C               .byte $3C               ; C1 ,<
0000C2r 3  4B               .byte $4B               ; C2 kK
0000C3r 3  49               .byte $49               ; C3 iI
0000C4r 3  4F               .byte $4F               ; C4 oO
0000C5r 3  29               .byte $29               ; C5 0)
0000C6r 3  28               .byte $28               ; C6 9(
0000C7r 3  00               .byte $00               ; C7
0000C8r 3  00               .byte $00               ; C8
0000C9r 3  3E               .byte $3E               ; C9 .>
0000CAr 3  3F               .byte $3F               ; CA /?
0000CBr 3  4C               .byte $4C               ; CB lL
0000CCr 3  3A               .byte $3A               ; CC ;:
0000CDr 3  50               .byte $50               ; CD pP
0000CEr 3  5F               .byte $5F               ; CE -_
0000CFr 3  00               .byte $00               ; CF
0000D0r 3  00               .byte $00               ; D0
0000D1r 3  00               .byte $00               ; D1
0000D2r 3  22               .byte $22               ; D2 '"
0000D3r 3  00               .byte $00               ; D3
0000D4r 3  7B               .byte $7B               ; D4 [{
0000D5r 3  2B               .byte $2B               ; D5 =+
0000D6r 3  00               .byte $00               ; D6
0000D7r 3  00               .byte $00               ; D7
0000D8r 3  00               .byte $00               ; D8 caps
0000D9r 3  00               .byte $00               ; D9 r shift
0000DAr 3  0D               .byte $0D               ; DA <Enter>
0000DBr 3  7D               .byte $7D               ; DB ]}
0000DCr 3  00               .byte $00               ; DC
0000DDr 3  7C               .byte $7C               ; DD \|
0000DEr 3  00               .byte $00               ; DE
0000DFr 3  00               .byte $00               ; DF
0000E0r 3  00               .byte $00               ; E0
0000E1r 3  00               .byte $00               ; E1
0000E2r 3  00               .byte $00               ; E2
0000E3r 3  00               .byte $00               ; E3
0000E4r 3  00               .byte $00               ; E4
0000E5r 3  00               .byte $00               ; E5
0000E6r 3  08               .byte $08               ; E6 bkspace
0000E7r 3  00               .byte $00               ; E7
0000E8r 3  00               .byte $00               ; E8
0000E9r 3  91               .byte $91               ; E9 kp 1
0000EAr 3  2F               .byte $2f               ; EA kp / converted from E04A in code
0000EBr 3  94               .byte $94               ; EB kp 4
0000ECr 3  97               .byte $97               ; EC kp 7
0000EDr 3  00               .byte $00               ; ED
0000EEr 3  00               .byte $00               ; EE
0000EFr 3  00               .byte $00               ; EF
0000F0r 3  90               .byte $90               ; F0 kp 0
0000F1r 3  7F               .byte $7F               ; F1 kp .
0000F2r 3  92               .byte $92               ; F2 kp 2
0000F3r 3  95               .byte $95               ; F3 kp 5
0000F4r 3  96               .byte $96               ; F4 kp 6
0000F5r 3  98               .byte $98               ; F5 kp 8
0000F6r 3  1B               .byte $1B               ; F6 esc
0000F7r 3  00               .byte $00               ; F7 num lock
0000F8r 3  CB               .byte $CB               ; F8 F11
0000F9r 3  2B               .byte $2B               ; F9 kp +
0000FAr 3  93               .byte $93               ; FA kp 3
0000FBr 3  2D               .byte $2D               ; FB kp -
0000FCr 3  2A               .byte $2A               ; FC kp *
0000FDr 3  99               .byte $99               ; FD kp 9
0000FEr 3  CD               .byte $CD               ; FE scroll lock
0000FFr 3               
0000FFr 3               
0000FFr 3               
0000FFr 3               
0000FFr 2               
0000FFr 2               .segment "DATA"
00011Dr 2               
00011Dr 2               ps2_init:
00011Dr 2  78             sei ; prevent interrupts while initializing
00011Er 2               kb_conn_msg:
00011Er 2  A2 00          ldx #0
000120r 2               kb_conn_loop:
000120r 2  BD rr rr       lda kb_conn_msg_text,x
000123r 2  F0 1A          beq kb_conn_msg_end
000125r 2  20 rr rr       jsr kernel_putc
000128r 2  E8             inx
000129r 2  80 F5          bra kb_conn_loop
00012Br 2  44 65 74 65  kb_conn_msg_text: .byte "Detecting keyboard", $0D, $00
00012Fr 2  63 74 69 6E  
000133r 2  67 20 6B 65  
00013Fr 2               kb_conn_msg_end:
00013Fr 2               
00013Fr 2  AD 8E FF       lda IER
000142r 2  09 88          ora #$88      ;enable interrupt on neg transition on CB2
000144r 2  8D 8E FF       sta IER
000147r 2               
000147r 2  A9 00          lda #0
000149r 2  8D 8C FF       sta PCR
00014Cr 2  8D rr rr       sta KB_TEMP
00014Fr 2  8D rr rr       sta KB_BIT
000152r 2  8D rr rr       sta KB_STATE
000155r 2  8D rr rr       sta to_send
000158r 2  8D rr rr       sta KB_PARITY
00015Br 2  85 rr          sta KB_BUF_W_PTR
00015Dr 2  85 rr          sta KB_BUF_R_PTR
00015Fr 2  8D rr rr       sta KB_INIT_STATE
000162r 2  8D rr rr       sta KB_INIT_WAIT
000165r 2  8D rr rr       sta ready
000168r 2  8D rr rr       sta ignore_next
00016Br 2  85 rr          sta character
00016Dr 2  20 rr rr       jsr clear_buffer
000170r 2               
000170r 2                 ; jsr kb_reset
000170r 2                 ; jsr kb_leds
000170r 2                 ; jsr kb_leds_data
000170r 2                 ; maybe remove this to make PS2 work ?
000170r 2  4C rr rr       jmp done_init
000173r 2               
000173r 2  A9 00          lda #KB_INIT_STATE_RESET
000175r 2  8D rr rr       sta KB_INIT_STATE
000178r 2  58             cli           ;enable interrupts
000179r 2               
000179r 2               @wait1:
000179r 2  A0 0A          ldy #10
00017Br 2  20 rr rr       jsr delay
00017Er 2  EE rr rr       inc KB_INIT_WAIT
000181r 2  F0 1C          beq done_init     ; nothing to show yet
000183r 2  AD rr rr       lda to_send
000186r 2  D0 F1          bne @wait1       ; do nothing while sending
000188r 2               
000188r 2                 ;jsr lcd_print
000188r 2               
000188r 2  AE rr rr       ldx KB_INIT_STATE
00018Br 2  E0 00          cpx #KB_INIT_STATE_RESET
00018Dr 2  F0 06          beq @do_reset
00018Fr 2  E0 01          cpx #KB_INIT_STATE_RESET_ACK
000191r 2  F0 0C          beq done_init
000193r 2                 ; beq @self_test_ok  ; Wait for 256 loops with nothing. if still nothing, reset keyboard
000193r 2               
000193r 2  80 0A          bra done_init
000195r 2                 ;sta PORTA
000195r 2                 ; wait for keyboard self test (#$AA)
000195r 2               
000195r 2               @do_reset:
000195r 2  20 rr rr       jsr kb_reset
000198r 2  A9 01          lda #KB_INIT_STATE_RESET_ACK  ; next state should be an acknowledgment
00019Ar 2  8D rr rr       sta KB_INIT_STATE
00019Dr 2  80 DA          bra @wait1
00019Fr 2               
00019Fr 2               
00019Fr 2               done_init:
00019Fr 2  A9 00          lda #0
0001A1r 2  8D 82 FF       sta DDRB
0001A4r 2  8D 8C FF       sta PCR
0001A7r 2  8D rr rr       sta ignore_next
0001AAr 2  8D rr rr       sta ready
0001ADr 2  85 rr          sta control_keys
0001AFr 2  8D rr rr       sta to_send
0001B2r 2  8D rr rr       sta ready
0001B5r 2  85 rr          sta character
0001B7r 2  8D rr rr       sta KB_TEMP
0001BAr 2  8D rr rr       sta KB_INIT_STATE
0001BDr 2  8D rr rr       sta KB_BIT
0001C0r 2  8D rr rr       sta KB_STATE
0001C3r 2  85 rr          sta KB_BUF_W_PTR
0001C5r 2  85 rr          sta KB_BUF_R_PTR
0001C7r 2  20 rr rr       jsr clear_buffer
0001CAr 2  58             cli ; enable interrupts again
0001CBr 2  60             rts
0001CCr 2               
0001CCr 2               
0001CCr 2               kb_reset:
0001CCr 2  A9 00          lda #0
0001CEr 2  8D rr rr       sta KB_INIT_WAIT
0001D1r 2  A9 F0          lda #$F0
0001D3r 2                 ;sta PORTA
0001D3r 2  78             sei                   ;disable interrupts
0001D4r 2  20 rr rr       jsr prepare_send
0001D7r 2  A9 FF          lda #$FF
0001D9r 2  8D rr rr       sta to_send
0001DCr 2  58             cli                   ; enable interrupts
0001DDr 2  60             rts
0001DEr 2               
0001DEr 2               no_kb_msg:
0001DEr 2  A2 00          ldx #0
0001E0r 2               no_kb_loop:
0001E0r 2  BD rr rr       lda no_kb_msg_text,x
0001E3r 2  F0 BA          beq done_init
0001E5r 2  20 rr rr       jsr kernel_putc
0001E8r 2  E8             inx
0001E9r 2  80 F5          bra no_kb_loop
0001EBr 2  4E 6F 20 6B  no_kb_msg_text: .byte "No keyboard connected", $0D, $00
0001EFr 2  65 79 62 6F  
0001F3r 2  61 72 64 20  
000202r 2               
000202r 2               
000202r 2               prepare_send:
000202r 2  48             pha
000203r 2  5A             phy
000204r 2                 ; ready to send, pull clock low for a while
000204r 2  A9 C0          lda #$C0
000206r 2  8D 8C FF       sta PCR       ;set CB2 low
000209r 2                 ;delay
000209r 2  A0 80          ldy #$80
00020Br 2  20 rr rr       jsr delay
00020Er 2                 ; delay end
00020Er 2                 ; pull data low now
00020Er 2  AD 80 FF       lda PORTB
000211r 2  29 7F          and #($FF^DATA)
000213r 2  8D 80 FF       sta PORTB
000216r 2  AD 82 FF       lda DDRB
000219r 2  09 80          ora #DATA   ;data as output to set it low
00021Br 2  8D 82 FF       sta DDRB
00021Er 2  A0 40          ldy #$40
000220r 2  20 rr rr       jsr delay
000223r 2  A9 01          lda #KB_STATE_DATA    ; no start bit when sending
000225r 2  8D rr rr       sta KB_STATE
000228r 2                 ; release clock
000228r 2  A9 00          lda #0
00022Ar 2  8D rr rr       sta to_send
00022Dr 2  8D rr rr       sta KB_PARITY
000230r 2  8D 8C FF       sta PCR       ;set CB2 to negative edge input
000233r 2               
000233r 2  7A             ply
000234r 2  68             pla
000235r 2  60             rts
000236r 2               
000236r 2               
000236r 2               reset_ps2:          ; routine called during a timer interrupt to check
000236r 2  48             pha
000237r 2                                   ; if the elasped time since the last ps2 interrupt allows us to reset it
000237r 2  A5 rr          lda time+3
000239r 2  C5 rr          cmp last_ps2_time+3
00023Br 2  90 16          bcc @reset
00023Dr 2  A5 rr          lda time+2
00023Fr 2  C5 rr          cmp last_ps2_time+2
000241r 2  90 10          bcc @reset
000243r 2  A5 rr          lda time+1
000245r 2  C5 rr          cmp last_ps2_time+1
000247r 2  90 0A          bcc @reset
000249r 2  A5 rr          lda time
00024Br 2  69 01          adc #$1
00024Dr 2  C5 rr          cmp last_ps2_time
00024Fr 2  90 02          bcc @reset
000251r 2               @exit2:
000251r 2  68             pla
000252r 2  60             rts
000253r 2               @reset:
000253r 2  A9 00          lda #0
000255r 2  8D rr rr       sta KB_TEMP
000258r 2  8D rr rr       sta KB_BIT
00025Br 2  8D rr rr       sta KB_STATE
00025Er 2  85 rr          sta KB_BUF_W_PTR
000260r 2  85 rr          sta KB_BUF_R_PTR
000262r 2  F0 ED          beq @exit2
000264r 2               
000264r 2               clear_buffer:
000264r 2  DA             phx
000265r 2  A2 84          ldx #$84
000267r 2               @clear_loop:
000267r 2  9E rr rr       stz KB_BUF, x
00026Ar 2  CA             dex
00026Br 2  D0 FA          bne @clear_loop
00026Dr 2  9C rr rr       stz KB_BUF
000270r 2  FA             plx
000271r 2  60             rts
000272r 2               
000272r 2               
000272r 2               ps2_get_char:
000272r 2  DA               phx                             ; save X
000273r 2  A6 rr            ldx KB_BUF_R_PTR                ; check the keyboard buffer
000275r 2  BD rr rr         lda KB_BUF, x
000278r 2                   ; jsr kernel_putc
000278r 2                   ; pha
000278r 2                   ; txa
000278r 2                   ; jsr kernel_putc
000278r 2                   ; pla
000278r 2  F0 0C            beq no_ps2_char_available       ; exit if nothing found
00027Ar 2  9E rr rr         stz KB_BUF, x                   ; if there was a character, reset this buffer cell
00027Dr 2  E6 rr            inc KB_BUF_R_PTR                ; and increment the read pointer
00027Fr 2  10 02            bpl @nomore
000281r 2  64 rr            stz KB_BUF_R_PTR
000283r 2               @nomore:
000283r 2  FA               plx                             ; restore X
000284r 2  38               sec                             ; mark character present
000285r 2  60               rts                             ; return
000286r 2               no_ps2_char_available:                  ; no keyboard char
000286r 2  E6 rr            inc KB_BUF_R_PTR                ; increment read pointer for next time
000288r 2  10 02            bpl @nomore
00028Ar 2  64 rr            stz KB_BUF_R_PTR
00028Cr 2               @nomore:
00028Cr 2  FA               plx                             ; restore X
00028Dr 2  18               clc
00028Er 2  60               rts
00028Fr 2                 .include "ps2_irq.s"
00028Fr 3               ; Copyright 2020 Jonathan Foucher
00028Fr 3               
00028Fr 3               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
00028Fr 3               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
00028Fr 3               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
00028Fr 3               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
00028Fr 3               ; is furnished to do so, subject to the following conditions:
00028Fr 3               
00028Fr 3               ; The above copyright notice and this permission notice shall be included in all copies or
00028Fr 3               ; substantial portions of the Software.
00028Fr 3               
00028Fr 3               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
00028Fr 3               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
00028Fr 3               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
00028Fr 3               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
00028Fr 3               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
00028Fr 3               ; DEALINGS IN THE SOFTWARE.
00028Fr 3               
00028Fr 3               
00028Fr 3               
00028Fr 3               
00028Fr 3               ps2_irq:
00028Fr 3  48               pha
000290r 3  DA               phx
000291r 3  AD rr rr         lda to_send
000294r 3  D0 25            bne @willsend
000296r 3  AD rr rr         lda KB_STATE            ; which state ?
000299r 3  C9 00            cmp #KB_STATE_START
00029Br 3  F0 0F            beq @start        ; start bit
00029Dr 3               
00029Dr 3  C9 01            cmp #KB_STATE_DATA             ; get data bits
00029Fr 3  F0 1D            beq @data
0002A1r 3               
0002A1r 3  C9 02            cmp #KB_STATE_PARITY             ; this is the parity bit
0002A3r 3  F0 3A            beq @parity
0002A5r 3               
0002A5r 3  C9 03            cmp #KB_STATE_STOP      ; stop bit
0002A7r 3  F0 3D            beq @stop
0002A9r 3  4C rr rr         jmp @exit
0002ACr 3               
0002ACr 3               @start:
0002ACr 3  A9 01            lda #KB_STATE_DATA
0002AEr 3  8D rr rr         sta KB_STATE        ; next state will be to get data
0002B1r 3  A9 00            lda #0
0002B3r 3  8D rr rr         sta KB_TEMP
0002B6r 3  8D rr rr         sta KB_BIT
0002B9r 3  80 65            bra @exit
0002BBr 3               @willsend:
0002BBr 3  4C rr rr         jmp @sending
0002BEr 3               @data:
0002BEr 3  AD 80 FF         lda PORTB       ; get the bit of data from PORTB bit 7
0002C1r 3  29 80            and #$80
0002C3r 3  0D rr rr         ora KB_TEMP     ; OR it with existing temp data
0002C6r 3  8D rr rr         sta KB_TEMP     ; save it
0002C9r 3  EE rr rr         inc KB_BIT      ; prepare for next bit
0002CCr 3  AD rr rr         lda KB_BIT
0002CFr 3  C9 08            cmp #8          ; if this is the last bit, next state is parity
0002D1r 3  F0 05            beq @next_state_parity
0002D3r 3  4E rr rr         lsr KB_TEMP     ; if not last bit, shift KB_TEMP right to prepare for next bit
0002D6r 3               
0002D6r 3  80 48            bra @exit
0002D8r 3               
0002D8r 3               @next_state_parity:
0002D8r 3  A9 02            lda #KB_STATE_PARITY    ;next state is parity
0002DAr 3  8D rr rr         sta KB_STATE
0002DDr 3  80 41            bra @exit
0002DFr 3               
0002DFr 3               @parity:
0002DFr 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
0002E1r 3  8D rr rr         sta KB_STATE
0002E4r 3  80 3A            bra @exit
0002E6r 3               
0002E6r 3               @stop:
0002E6r 3  A9 00            lda #KB_STATE_START
0002E8r 3  8D rr rr         sta KB_STATE
0002EBr 3  AD rr rr         lda ignore_next
0002EEr 3  D0 45            bne @ignored
0002F0r 3                   ; Save key to character buffer
0002F0r 3  AE rr rr         ldx KB_TEMP
0002F3r 3  E0 AA            cpx #$AA
0002F5r 3  F0 32            beq @init
0002F7r 3  E0 FA            cpx #$FA
0002F9r 3  F0 2E            beq @init
0002FBr 3  E0 F0            cpx #$F0
0002FDr 3  F0 2F            beq @ignore_next
0002FFr 3  E0 12            cpx #LSHIFT_KEY
000301r 3  F0 4F            beq @shift_pressed
000303r 3  E0 59            cpx #RSHIFT_KEY
000305r 3  F0 4B            beq @shift_pressed
000307r 3  A5 rr            lda control_keys
000309r 3  29 01            and #SHIFT
00030Br 3  D0 09            bne @shifted
00030Dr 3               @unshifted:
00030Dr 3                   ;stx PORTA
00030Dr 3  BD rr rr         lda ASCIITBL, x
000310r 3               
000310r 3  C9 1B            cmp #$1B             ; reset if escape pressed
000312r 3  F0 12            beq @esc
000314r 3  80 03            bra @output
000316r 3               @shifted:
000316r 3  BD rr rr         lda ASCIITBL+128, x
000319r 3               @output:
000319r 3  A6 rr            ldx KB_BUF_W_PTR
00031Br 3  9D rr rr         sta KB_BUF, x
00031Er 3                   ;sta PORTA
00031Er 3  E6 rr            inc KB_BUF_W_PTR
000320r 3               
000320r 3               @exit:
000320r 3  2C 80 FF         bit PORTB
000323r 3  FA               plx
000324r 3  68               pla
000325r 3  60               rts
000326r 3               @esc:
000326r 3  4C rr rr         jmp v_reset
000329r 3               @init:
000329r 3  8E rr rr         stx ready
00032Cr 3  80 F2            bra @exit
00032Er 3               
00032Er 3               @ignore_next:
00032Er 3  A9 01            lda #1
000330r 3  8D rr rr         sta ignore_next
000333r 3  80 EB            bra @exit
000335r 3               
000335r 3               @ignored:
000335r 3  AE rr rr         ldx KB_TEMP
000338r 3  E0 12            cpx #LSHIFT_KEY
00033Ar 3  F0 0B            beq @shift_released
00033Cr 3  E0 59            cpx #RSHIFT_KEY
00033Er 3  F0 07            beq @shift_released
000340r 3  A9 00            lda #0
000342r 3  8D rr rr         sta ignore_next
000345r 3  80 D9            bra @exit
000347r 3               
000347r 3               @shift_released:
000347r 3  A9 00            lda #0
000349r 3  8D rr rr         sta ignore_next
00034Cr 3  A9 00            lda #0
00034Er 3  85 rr            sta control_keys
000350r 3  80 CE            bra @exit
000352r 3               
000352r 3               @shift_pressed:
000352r 3  A5 rr            lda control_keys
000354r 3  09 01            ora #SHIFT
000356r 3  85 rr            sta control_keys
000358r 3  80 C6            bra @exit
00035Ar 3               
00035Ar 3               @sending:
00035Ar 3                   ; lda #1
00035Ar 3                   ; sta PORTA
00035Ar 3                   ; data pin of DDRB should be set as output by prepare_send
00035Ar 3  AD rr rr         lda KB_STATE                ; which state ?
00035Dr 3  C9 01            cmp #KB_STATE_DATA          ; send data bits
00035Fr 3  F0 0A            beq @sending_data
000361r 3  C9 02            cmp #KB_STATE_PARITY        ; this is the parity bit
000363r 3  F0 33            beq @sending_parity
000365r 3  C9 03            cmp #KB_STATE_STOP          ; stop bit
000367r 3  F0 56            beq @sending_stop
000369r 3  80 B5            bra @exit
00036Br 3               
00036Br 3               
00036Br 3               @sending_data:
00036Br 3                   ; lda #4
00036Br 3                   ; sta PORTA
00036Br 3  AD rr rr         lda to_send       ; get the bit of data from memory
00036Er 3  29 01            and #$01          ; get only bottom bit
000370r 3  F0 0D            beq @send_zero
000372r 3               
000372r 3               @send_one:
000372r 3  AD 80 FF         lda PORTB
000375r 3  09 80            ora #$80
000377r 3  8D 80 FF         sta PORTB
00037Ar 3  EE rr rr         inc KB_PARITY
00037Dr 3  80 08            bra @sending_done
00037Fr 3               @send_zero:
00037Fr 3  AD 80 FF         lda PORTB
000382r 3  29 7F            and #$7F
000384r 3  8D 80 FF         sta PORTB
000387r 3               @sending_done:
000387r 3                   ; lda #2
000387r 3                   ; sta PORTA
000387r 3  EE rr rr         inc KB_BIT      ; prepare for next bit
00038Ar 3  AD rr rr         lda KB_BIT
00038Dr 3  C9 08            cmp #8          ; if this is the last bit, next state is parity
00038Fr 3  4C rr rr         jmp @next_state_parity
000392r 3  4E rr rr         lsr to_send
000395r 3  18               clc
000396r 3  80 88            bra @exit
000398r 3               
000398r 3               @sending_parity:
000398r 3                   ; lda #5
000398r 3                   ; sta PORTA
000398r 3  AD rr rr         lda KB_PARITY
00039Br 3  29 01            and #$01
00039Dr 3  F0 10            beq @odd_parity     ; send zero if odd parity
00039Fr 3  AD 80 FF         lda PORTB
0003A2r 3  09 80            ora #$80            ; send one if even
0003A4r 3  8D 80 FF         sta PORTB
0003A7r 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
0003A9r 3  8D rr rr         sta KB_STATE
0003ACr 3  4C rr rr         jmp @exit
0003AFr 3               @odd_parity:
0003AFr 3  AD 80 FF         lda PORTB
0003B2r 3  29 7F            and #$7F
0003B4r 3  8D 80 FF         sta PORTB
0003B7r 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
0003B9r 3  8D rr rr         sta KB_STATE
0003BCr 3  4C rr rr         jmp @exit
0003BFr 3               
0003BFr 3               @sending_stop:
0003BFr 3                   ; lda #6
0003BFr 3                   ; sta PORTA
0003BFr 3  A9 00            lda #KB_STATE_START     ; set it back to start in case we are receivin next
0003C1r 3  8D rr rr         sta KB_STATE
0003C4r 3  A9 00            lda #0
0003C6r 3  8D rr rr         sta to_send
0003C9r 3  8D rr rr         sta KB_BIT
0003CCr 3  8D rr rr         sta KB_PARITY
0003CFr 3  AD 82 FF         lda DDRB        ; set PORTB back to input
0003D2r 3  29 7F            and #$7F
0003D4r 3  8D 82 FF         sta DDRB
0003D7r 3  4C rr rr         jmp @exit
0003DAr 3               
0003DAr 2               
0003DAr 1               .endif
0003DAr 1               
0003DAr 1               .ifdef LCD2_ENABLED
0003DAr 1               .include "drivers/4004.s"
0003DAr 1               .endif
0003DAr 1               .ifdef CF_ADDRESS
0003DAr 1               .include "drivers/cf.s"
0003DAr 2               
0003DAr 2               .segment "BSS"
000119r 2  xx xx xx xx  LBA_SIZE: .res 4
00011Dr 2               
00011Dr 2               .segment "DATA"
0003DAr 2               cf_init:
0003DAr 2                   ; phy
0003DAr 2  A9 04            lda #$4
0003DCr 2                   ; ldy #7
0003DCr 2                   ; sta (CF_ADDRESS),y
0003DCr 2  8D D7 FF         sta CF_ADDRESS + 7
0003DFr 2  20 rr rr         jsr cf_wait
0003E2r 2  A9 E0            lda #$E0
0003E4r 2  8D D6 FF         sta CF_ADDRESS + 6
0003E7r 2  20 rr rr         jsr cf_wait
0003EAr 2  A9 01            lda #$1
0003ECr 2  8D D1 FF         sta CF_ADDRESS + 1
0003EFr 2  20 rr rr         jsr cf_wait
0003F2r 2  A9 EF            lda #$EF
0003F4r 2  8D D7 FF         sta CF_ADDRESS + 7
0003F7r 2  20 rr rr         jsr cf_wait
0003FAr 2  20 rr rr         jsr cf_err
0003FDr 2                   ; ply
0003FDr 2  60               rts
0003FEr 2               
0003FEr 2               
0003FEr 2               
0003FEr 2               
0003FEr 2               cf_read:
0003FEr 2  5A               phy
0003FFr 2  A0 00            ldy #0
000401r 2               @loop:
000401r 2  20 rr rr         jsr cf_wait
000404r 2  AD D0 FF         lda CF_ADDRESS
000407r 2  91 rr            sta (io_buffer_ptr), y
000409r 2  C8               iny
00040Ar 2  D0 F5            bne @loop
00040Cr 2  E6 rr            inc io_buffer_ptr + 1
00040Er 2                   ; jsr cf_wait
00040Er 2               @loop2:
00040Er 2  20 rr rr         jsr cf_wait
000411r 2  AD D0 FF         lda CF_ADDRESS
000414r 2  91 rr            sta (io_buffer_ptr), y
000416r 2  C8               iny
000417r 2  D0 F5            bne @loop2
000419r 2  C6 rr            dec io_buffer_ptr + 1
00041Br 2               @loop3:
00041Br 2  20 rr rr         jsr cf_wait
00041Er 2  AD D7 FF         lda CF_ADDRESS + 7
000421r 2  29 08            and #$08
000423r 2  F0 06            beq @exit
000425r 2  AD D0 FF         lda CF_ADDRESS
000428r 2  C8               iny
000429r 2  D0 F0            bne @loop3
00042Br 2               @exit:
00042Br 2  7A               ply
00042Cr 2  60               rts
00042Dr 2               
00042Dr 2               
00042Dr 2               ; number of sectors to read is in X
00042Dr 2               cf_read_sector:
00042Dr 2                   ; sei
00042Dr 2  20 rr rr         jsr cf_set_lba
000430r 2                   ; ldy #2
000430r 2                   ; sta (CF_ADDRESS), y
000430r 2  A9 01            lda #1
000432r 2  8D D2 FF         sta CF_ADDRESS + 2
000435r 2  20 rr rr         jsr cf_wait
000438r 2  A9 20            lda #CF_READ_SECTOR_COMMAND
00043Ar 2                   ; ldy #7
00043Ar 2                   ; sta (CF_ADDRESS), y
00043Ar 2  8D D7 FF         sta CF_ADDRESS + 7
00043Dr 2  20 rr rr         jsr cf_wait
000440r 2  20 rr rr         jsr cf_read
000443r 2  20 rr rr         jsr cf_err
000446r 2                   ; cli
000446r 2  60               rts
000447r 2               
000447r 2               ; number of sectors to write is in X
000447r 2               cf_write_sector:
000447r 2                   ; sei
000447r 2  20 rr rr         jsr cf_set_lba
00044Ar 2  A9 01            lda #1
00044Cr 2                   ; ldy #2
00044Cr 2                   ; sta (CF_ADDRESS), y
00044Cr 2  8D D2 FF         sta CF_ADDRESS + 2
00044Fr 2  20 rr rr         jsr cf_wait
000452r 2  A9 30            lda #CF_WRITE_SECTOR_COMMAND
000454r 2                   ; ldy #7
000454r 2                   ; sta (CF_ADDRESS), y
000454r 2  8D D7 FF         sta CF_ADDRESS + 7
000457r 2  20 rr rr         jsr cf_wait
00045Ar 2  20 rr rr         jsr cf_write
00045Dr 2  20 rr rr         jsr cf_err
000460r 2                   ; cli
000460r 2  60               rts
000461r 2               
000461r 2               
000461r 2               cf_write:
000461r 2  5A               phy
000462r 2  A0 00            ldy #0
000464r 2               @loop:
000464r 2  20 rr rr         jsr cf_wait
000467r 2               
000467r 2  B1 rr            lda (io_buffer_ptr), y
000469r 2  8D D0 FF         sta CF_ADDRESS
00046Cr 2  C8               iny
00046Dr 2  D0 F5            bne @loop
00046Fr 2  E6 rr            inc io_buffer_ptr + 1
000471r 2               @loop2:
000471r 2  20 rr rr         jsr cf_wait
000474r 2  B1 rr            lda (io_buffer_ptr), y
000476r 2  8D D0 FF         sta CF_ADDRESS
000479r 2  C8               iny
00047Ar 2  D0 F5            bne @loop2
00047Cr 2  C6 rr            dec io_buffer_ptr + 1
00047Er 2               @loop3:
00047Er 2  20 rr rr         jsr cf_wait
000481r 2  AD D7 FF         lda CF_ADDRESS + 7
000484r 2  29 08            and #$08
000486r 2  F0 06            beq @exit
000488r 2  8D D0 FF         sta CF_ADDRESS
00048Br 2  C8               iny
00048Cr 2  D0 F0            bne @loop3
00048Er 2               @exit:
00048Er 2  7A               ply
00048Fr 2  60               rts
000490r 2               
000490r 2               
000490r 2               
000490r 2               
000490r 2               
000490r 2               
000490r 2               cf_wait:
000490r 2                   ; phy
000490r 2                   ; ldy #7
000490r 2               @wait_loop:
000490r 2                   ; lda (CF_ADDRESS), y
000490r 2  AD D7 FF         lda CF_ADDRESS + 7
000493r 2  29 80            and #$80
000495r 2  D0 F9            bne @wait_loop
000497r 2                   ; ply
000497r 2  60               rts
000498r 2               
000498r 2               cf_set_lba:
000498r 2  AD rr rr         lda IO_SECTOR
00049Br 2  8D D3 FF         sta CF_ADDRESS + 3
00049Er 2  20 rr rr         jsr cf_wait
0004A1r 2  AD rr rr         lda IO_SECTOR + 1
0004A4r 2  8D D4 FF         sta CF_ADDRESS + 4
0004A7r 2  20 rr rr         jsr cf_wait
0004AAr 2  AD rr rr         lda IO_SECTOR + 2
0004ADr 2  8D D5 FF         sta CF_ADDRESS + 5
0004B0r 2  20 rr rr         jsr cf_wait
0004B3r 2  AD rr rr         lda IO_SECTOR + 3
0004B6r 2  29 0F            and #$0F
0004B8r 2  09 E0            ora #$E0
0004BAr 2  8D D6 FF         sta CF_ADDRESS + 6
0004BDr 2  20 rr rr         jsr cf_wait
0004C0r 2  60               rts
0004C1r 2               
0004C1r 2               cf_err:
0004C1r 2                   ; phy
0004C1r 2  20 rr rr         jsr cf_wait
0004C4r 2                   ; ldy #7
0004C4r 2                   ; lda (CF_ADDRESS), y
0004C4r 2  AD D7 FF         lda CF_ADDRESS + 7
0004C7r 2  29 01            and #$01
0004C9r 2  F0 05            beq @exit
0004CBr 2               @exit_fail:
0004CBr 2  A9 21            lda #'!'
0004CDr 2  20 rr rr         jsr kernel_putc
0004D0r 2               @exit:
0004D0r 2                   ; ply
0004D0r 2  60               rts
0004D1r 2               
0004D1r 2               
0004D1r 2  20 62 79 74  bytes_msg: .byte " bytes"
0004D5r 2  65 73        
0004D7r 2               cf_end:
0004D7r 2               
0004D7r 2               
0004D7r 1               io_read_sector_address = cf_read_sector
0004D7r 1               io_write_sector_address = cf_write_sector
0004D7r 1               .endif
0004D7r 1               .ifdef SD
0004D7r 1               
0004D7r 1               .include "drivers/sd.s"
0004D7r 1               io_read_sector_address = sd_read_sector
0004D7r 1               
0004D7r 1               .endif
0004D7r 1               
0004D7r 1               ; .if .def(SD)
0004D7r 1               ; .include "../../fat16.s"
0004D7r 1               ; .elseif .def(CF_ADDRESS)
0004D7r 1               ; .include "../../fat16.s"
0004D7r 1               ; .endif
0004D7r 1               
0004D7r 1               .include "../../utils.s"
0004D7r 2               ;  print a 16-bit integer
0004D7r 2               ; lsb in x, msb in a
0004D7r 2               
0004D7r 2               .segment "ZEROPAGE": zeropage
000017r 2  xx xx        util_tmp: .res 2
000019r 2               
000019r 2               .segment "BSS"
00011Dr 2  xx xx        util_tmp_var: .res 2
00011Fr 2  xx xx xx xx  pad: .res 4
000123r 2               
000123r 2               .segment "DATA"
0004D7r 2               
0004D7r 2               print16:
0004D7r 2  8D rr rr         sta acc+1
0004DAr 2  8E rr rr         stx acc
0004DDr 2               
0004DDr 2  A2 04            ldx #4
0004DFr 2               nextdig:
0004DFr 2  20 rr rr         jsr div
0004E2r 2  AD rr rr         lda ext
0004E5r 2  9D rr rr         sta num,x
0004E8r 2  CA               dex
0004E9r 2  10 F4            bpl nextdig
0004EBr 2               
0004EBr 2               firstdig:
0004EBr 2  E8               inx
0004ECr 2  E0 05            cpx #5
0004EEr 2  F0 17            beq print0
0004F0r 2  BD rr rr         lda num,x
0004F3r 2  F0 F6            beq firstdig
0004F5r 2               
0004F5r 2               ptnxtdig:
0004F5r 2  18               clc
0004F6r 2  69 30            adc #'0'
0004F8r 2  20 rr rr         jsr kernel_putc
0004FBr 2  E8               inx
0004FCr 2  E0 05            cpx #5
0004FEr 2  F0 06            beq pt16done
000500r 2  BD rr rr         lda num,x
000503r 2  4C rr rr         jmp ptnxtdig
000506r 2               
000506r 2               pt16done:
000506r 2  60               rts
000507r 2               
000507r 2               print0:
000507r 2  A9 30            lda #'0'
000509r 2  20 rr rr         jsr kernel_putc
00050Cr 2  60               rts
00050Dr 2               
00050Dr 2  00 00 00 00  num: .byte 0,0,0,0,0
000511r 2  00           
000512r 2               
000512r 2               ; 16/16-bit division, from the fridge
000512r 2               ; acc/aux -> acc, remainder in ext
000512r 2               div:
000512r 2  A9 00            lda #0
000514r 2  8D rr rr         sta ext+1
000517r 2  A0 10            ldy #$10
000519r 2               dloop:
000519r 2  0E rr rr         asl acc
00051Cr 2  2E rr rr         rol acc+1
00051Fr 2  2A               rol
000520r 2  2E rr rr         rol ext+1
000523r 2  48               pha
000524r 2  CD rr rr         cmp aux
000527r 2  AD rr rr         lda ext+1
00052Ar 2  ED rr rr         sbc aux+1
00052Dr 2  90 0B            bcc div2
00052Fr 2  8D rr rr         sta ext+1
000532r 2  68               pla
000533r 2  ED rr rr         sbc aux
000536r 2  48               pha
000537r 2  EE rr rr         inc acc
00053Ar 2               div2:
00053Ar 2  68               pla
00053Br 2  88               dey
00053Cr 2  D0 DB            bne dloop
00053Er 2  8D rr rr         sta ext
000541r 2  60               rts
000542r 2               
000542r 2  00 00        acc: .word 0
000544r 2  0A 00        aux: .word 10 ; constant
000546r 2  00 00        ext: .word 0
000548r 2               
000548r 2               
000548r 2               
000548r 2               calculate_free_mem:
000548r 2                   ; load dictionary address
000548r 2                   ; fill with $55 until ram_end
000548r 2                   ; read and check same
000548r 2                   ; fill again with zeroes
000548r 2               
000548r 2  9C rr rr         stz util_tmp_var
00054Br 2  9C rr rr         stz util_tmp_var + 1
00054Er 2               
00054Er 2  A0 00            ldy #0
000550r 2               @loop:
000550r 2  A9 55            lda #$55
000552r 2  91 rr            sta (util_tmp), y        ; store to mem address
000554r 2  D1 rr            cmp (util_tmp), y        ; compare to what is now there
000556r 2  D0 19            bne @exit               ; no equal, stop couting and exit
000558r 2  A9 00            lda #0                  ; zero the memory again
00055Ar 2  91 rr            sta (util_tmp), y
00055Cr 2  EE rr rr         inc util_tmp_var
00055Fr 2  D0 03            bne @incok
000561r 2  EE rr rr         inc util_tmp_var + 1
000564r 2               @incok:
000564r 2  C8               iny
000565r 2  D0 E9            bne @loop
000567r 2  A5 rr            lda util_tmp + 1
000569r 2  C9 80            cmp #>ram_end
00056Br 2  B0 04            bcs @exit
00056Dr 2  E6 rr            inc util_tmp + 1
00056Fr 2  80 DF            bra @loop
000571r 2               @exit:
000571r 2  60               rts
000572r 2               
000572r 2               
000572r 2               
000572r 2               print_message:
000572r 2  68           	pla					; get return address from stack
000573r 2  85 rr        	sta util_tmp
000575r 2  68           	pla
000576r 2  85 rr        	sta util_tmp + 1
000578r 2               
000578r 2  80 03        	bra @inc
00057Ar 2               @print:
00057Ar 2  20 rr rr     	jsr kernel_putc
00057Dr 2               
00057Dr 2               @inc:
00057Dr 2  E6 rr        	inc util_tmp
00057Fr 2  D0 02        	bne @inced
000581r 2  E6 rr        	inc util_tmp + 1
000583r 2               @inced:
000583r 2  B2 rr        	lda (util_tmp)
000585r 2  D0 F3        	bne @print
000587r 2  A5 rr        	lda util_tmp + 1
000589r 2  48           	pha
00058Ar 2  A5 rr        	lda util_tmp
00058Cr 2  48           	pha
00058Dr 2               print_message_end:
00058Dr 2  60           	rts
00058Er 2               
00058Er 2               
00058Er 2               print_zp_index_string:
00058Er 2               @loop:
00058Er 2  B1 rr            lda (util_tmp), y
000590r 2  F0 06            beq @exit
000592r 2  20 rr rr         jsr kernel_putc
000595r 2  C8               iny
000596r 2  D0 F6            bne @loop
000598r 2               @exit:
000598r 2  60               rts
000599r 2               
000599r 2               
000599r 2               output_ascii:
000599r 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
000599r 2  48               pha
00059Ar 2  4A               lsr             ; convert high nibble first
00059Br 2  4A               lsr
00059Cr 2  4A               lsr
00059Dr 2  4A               lsr
00059Er 2  20 rr rr         jsr output_ascii_nibble_to_ascii
0005A1r 2  68               pla
0005A2r 2               
0005A2r 2                   ; fall through to _nibble_to_ascii
0005A2r 2               
0005A2r 2               output_ascii_nibble_to_ascii:
0005A2r 2               ; """Private helper function for byte_to_ascii: Print lower nibble
0005A2r 2               ; of A and and EMIT it. This does the actual work.
0005A2r 2               ; """
0005A2r 2  29 0F            and #$0F
0005A4r 2  09 30            ora #'0'
0005A6r 2  C9 3A            cmp #$3A        ; '9+1
0005A8r 2  90 02            bcc @1
0005AAr 2  69 06            adc #$06
0005ACr 2               
0005ACr 2               @1:
0005ACr 2  20 rr rr         jsr kernel_putc
0005AFr 2  60               rts
0005B0r 2               
0005B0r 1               
0005B0r 1               ; .include "drivers/spi.s"
0005B0r 1               ; .include "drivers/sd.s"
0005B0r 1               ; .include "drivers/vga.s"
0005B0r 1               ; .include "drivers/fat32.s"
0005B0r 1               
0005B0r 1               ; .include "../../ed.s"
0005B0r 1               
0005B0r 1               .include "../../forth.s"
0005B0r 2               
0005B0r 2               
0005B0r 2               ; Definitions for Tali Forth 2
0005B0r 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0005B0r 2               ; First version: 01. Apr 2016 (Liara Forth)
0005B0r 2               ; This version: 29. Jan 2020
0005B0r 2               
0005B0r 2               ; This file is included by taliforth.asm. These are the general
0005B0r 2               ; definitions; platform-specific definitions such as the
0005B0r 2               ; memory map are kept in the platform folder.
0005B0r 2               
0005B0r 2               stack0 =    $0100   ; location of the stack
0005B0r 2               
0005B0r 2               ; User Variables:
0005B0r 2               ; Block variables
0005B0r 2               blk_offset =  0        ; BLK : UP + 0
0005B0r 2               scr_offset =  2        ; SCR : UP + 2
0005B0r 2               
0005B0r 2               ; Wordlists
0005B0r 2               current_offset =  4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
0005B0r 2               num_wordlists_offset =  5
0005B0r 2                                          ; #WORDLISTS (byte) : UP + 5
0005B0r 2               wordlists_offset =  6  ; WORDLISTS (cells) : UP + 6 to UP + 29
0005B0r 2                                          ;          (FORTH, EDITOR, ASSEMBLER, ROOT, +8 more)
0005B0r 2               num_order_offset =  30 ; #ORDER (byte) : UP + 30
0005B0r 2                                          ;          (Number of wordlists in search order)
0005B0r 2               search_order_offset =  31
0005B0r 2                                          ; SEARCH-ORDER (bytes) : UP + 31 to UP + 39
0005B0r 2                                          ; Allowing for 9 to keep offsets even.
0005B0r 2               max_wordlists =  12    ; Maximum number of wordlists supported
0005B0r 2                                          ; 4 Tali built-ins + 8 user wordlists
0005B0r 2               
0005B0r 2               ; Buffer variables
0005B0r 2               blkbuffer_offset =     40   ; Address of buffer
0005B0r 2               buffblocknum_offset =  42   ; Block number current in buffer
0005B0r 2               buffstatus_offset =    44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
0005B0r 2               
0005B0r 2               ; Block I/O vectors
0005B0r 2               blockread_offset =     46   ; Vector to block reading routine
0005B0r 2               blockwrite_offset =    48   ; Vector to block writing routine
0005B0r 2               
0005B0r 2               
0005B0r 2               ; ASCII CHARACTERS
0005B0r 2               AscCC =   $03  ; break (CTRL-c)
0005B0r 2               AscBELL = $07  ; bell sound
0005B0r 2               AscBS =   $08  ; backspace
0005B0r 2               AscLF =   $0a  ; line feed
0005B0r 2               AscCR =   $0d  ; carriage return
0005B0r 2               AscESC =  $1b  ; escape
0005B0r 2               AscSP =   $20  ; space
0005B0r 2               AscDEL =  $7f  ; delete (CTRL-h)
0005B0r 2               AscCP =   $10  ; CTRL-p (used to recall previous input history)
0005B0r 2               AscCN =   $0e  ; CTRL-n (used to recall next input history)
0005B0r 2               
0005B0r 2               ; DICTIONARY FLAGS
0005B0r 2               ; The first three bits are currently unused
0005B0r 2               CO = 1  ; Compile Only
0005B0r 2               AN = 2  ; Always Native Compile
0005B0r 2               IM = 4  ; Immediate Word
0005B0r 2               NN = 8  ; Never Native Compile
0005B0r 2               UF = 16 ; Includes Underflow Check (RESERVED)
0005B0r 2               HC = 32 ; Word has Code Field Area (CFA)
0005B0r 2               
0005B0r 2               
0005B0r 2               ; VARIOUS
0005B0r 2               MAX_LINE_LENGTH =   79      ; assumes 80 character lines
0005B0r 2               
0005B0r 2               ; END
0005B0r 2               
0005B0r 2               .segment "ZEROPAGE": zeropage
000019r 2               ; ZERO PAGE ADDRESSES/VARIABLES
000019r 2               
000019r 2               ; These are kept at the top of Zero Page, with the most important variables at
000019r 2               ; the top because the Data Stack grows towards this area from dsp0: If there is
000019r 2               ; an overflow, the lower, less important variables will be clobbered first,
000019r 2               ; giving the system a chance to recover. In other words, they are part of the
000019r 2               ; floodplain.
000019r 2               
000019r 2               ; The four variables insrc, cib, ciblen, and toin must stay together in this
000019r 2               ; sequence for the words INPUT>R and R>INPUT to work correctly.
000019r 2               
000019r 2  xx xx        cp: .res 2   ; Compiler Pointer
00001Br 2  xx xx        dp: .res 2   ; Dictionary Pointer
00001Dr 2  xx xx        workword: .res 2   ; nt (not xt!) of word being compiled, except in
00001Fr 2                                          ; a :NONAME declared word (see status)
00001Fr 2  xx xx        insrc: .res 2   ; input Source for SOURCE-ID
000021r 2  xx xx        cib: .res 2   ; address of current input buffer
000023r 2  xx xx        ciblen: .res 2  ; length of current input buffer
000025r 2  xx xx        toin: .res 2  ; pointer to CIB (>IN in Forth)
000027r 2  xx xx        ip: .res 2  ; Instruction Pointer (current xt)
000029r 2  xx xx        output: .res 2  ; vector for EMIT
00002Br 2  xx xx        input: .res 2  ; vector for KEY
00002Dr 2  xx xx        havekey: .res 2  ; vector for KEY?
00002Fr 2  xx xx        state: .res 2  ; STATE: -1 compile, 0 interpret
000031r 2  xx xx        base: .res 2  ; number radix, default decimal
000033r 2  xx xx        nc_limit: .res 2  ; limit for Native Compile size
000035r 2  xx xx        uf_strip: .res 2  ; flag to strip underflow detection code
000037r 2  xx xx        up: .res 2  ; User Pointer (Address of user variables)
000039r 2  xx xx        status: .res 2  ; internal status information
00003Br 2                                          ; (used by : :NONAME ; ACCEPT)
00003Br 2                                          ; Bit 7 = Redefined word message postpone
00003Br 2                                          ;         When set before calling CREATE, it will
00003Br 2                                          ;         not print the "redefined xxxx" message if
00003Br 2                                          ;         the word exists. Instead, this bit will
00003Br 2                                          ;         be reused and after CREATE has run, it will
00003Br 2                                          ;         be set if the word was redefined and 0 if
00003Br 2                                          ;         not. This bit should be 0 when not in use.
00003Br 2                                          ; Bit 6 = 1 for normal ":" definitions
00003Br 2                                          ;         WORKWORD contains nt of word being compiled
00003Br 2                                          ;       = 0 for :NONAME definitions
00003Br 2                                          ;         WORKWORD contains xt of word being compiled
00003Br 2                                          ; Bit 5 = 1 for NUMBER returning a double word
00003Br 2                                          ;       = 0 for NUMBER returning a single word
00003Br 2                                          ; Bit 3 = 1 makes CTRL-n recall current history
00003Br 2                                          ;       = 0 CTRL-n recalls previous history
00003Br 2                                          ; Bit 2 = Current history buffer msb
00003Br 2                                          ; Bit 1 = Current history buffer (0-7, wraps)
00003Br 2                                          ; Bit 0 = Current history buffer lsb
00003Br 2                                          ; status+1 is used by ACCEPT to hold history lengths.
00003Br 2  xx xx        tmpbranch: .res 2  ; temporary storage for 0BRANCH, BRANCH only
00003Dr 2  xx xx        tmp1: .res 2  ; temporary storage
00003Fr 2  xx xx        tmp2: .res 2  ; temporary storage
000041r 2  xx xx        tmp3: .res 2  ; temporary storage (especially for print)
000043r 2  xx xx        tmpdsp: .res 2  ; temporary DSP (X) storage (two bytes)
000045r 2  xx xx        tmptos: .res 2  ; temporary TOS storage
000047r 2  xx xx        editor1: .res 2  ; temporary for editors
000049r 2  xx xx        editor2: .res 2  ; temporary for editors
00004Br 2  xx xx        editor3: .res 2  ; temporary for editors
00004Dr 2  xx xx        tohold: .res 2  ; pointer for formatted output
00004Fr 2  xx xx xx xx  scratch: .res 8  ; 8 byte scratchpad (see UM/MOD)
000053r 2  xx xx xx xx  
000057r 2               
000057r 2               .segment "DATASTACK": zeropage
000000r 2  xx xx xx xx  dsp_start: .res 127 ; reserve 128 bytes for data stack (64 16 bit cells)
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
00007Fr 2               dsp0:          ; first data stack location. Data stack grows down
00007Fr 2               rsp0:     ; starting stack pointer
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               .segment "BSS"
000123r 2  xx xx xx xx  hist_buff: .res $400
000127r 2  xx xx xx xx  
00012Br 2  xx xx xx xx  
000523r 2  xx xx xx xx  buffer0: .res $100
000527r 2  xx xx xx xx  
00052Br 2  xx xx xx xx  
000623r 2               
000623r 2               .segment "DICTIONARY"   ; the dictionary gets its own segment so that it uses all the space left in RAM
000000r 2  xx xx xx xx  dictionary: .res $1000
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
001000r 2               
001000r 2               cp_end = $7FFF          ; the dictionary ends at RAM end (everything else is before)
001000r 2               
001000r 2               cp0 = dictionary
001000r 2               bsize =     $ff
001000r 2               padoffset = $ff
001000r 2               
001000r 2               
001000r 2               
001000r 2               .segment "DATA"
0005B0r 2               
0005B0r 2               
0005B0r 2               
0005B0r 2               forth:
0005B0r 2                   .include "native_words.s"     ; Native Forth words. Starts with COLD
0005B0r 3               ; Low-level Forth word routines
0005B0r 3               ; Tali Forth 2 for the 65c02
0005B0r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0005B0r 3               ; First version: 19. Jan 2014
0005B0r 3               ; This version: 03. Jan 2018
0005B0r 3               
0005B0r 3               ; This list is ordered alphabetically by the names of the words, not their
0005B0r 3               ; strings (so "!" is sorted as "STORE"). However, we start off with COLD,
0005B0r 3               ; ABORT, and QUIT as the natural start sequence. Each word has two special
0005B0r 3               ; status lines that begins with "; ## ", which allows auto-generation of the
0005B0r 3               ; WORDLIST.md file and other entries in the docs folder. Status entries are:
0005B0r 3               
0005B0r 3               ;       TBA --> fragment --> coded --> tested --> auto
0005B0r 3               
0005B0r 3               ; "Auto" means that the word is automatically tested by the test suite (good),
0005B0r 3               ; "tested" means that it was tested by hand in some way (okay), "coded" means
0005B0r 3               ; it hasn't been tested at all (bad). See the test suite for more details.
0005B0r 3               
0005B0r 3               ; ## COLD ( -- ) "Reset the Forth system"
0005B0r 3               ; ## "cold"  tested  Tali Forth
0005B0r 3               ;       """Reset the Forth system. Does not restart the kernel,
0005B0r 3               ;       use the 65c02 reset for that. Flows into ABORT.
0005B0r 3               ;       """
0005B0r 3               xt_cold:
0005B0r 3  D8                           cld
0005B1r 3               
0005B1r 3                               ; Set the OUTPUT vector to the default kernel_putc
0005B1r 3                               ; We do this really early so we can print error messages
0005B1r 3                               ; during debugging
0005B1r 3  A9 rr                        lda #<kernel_putc
0005B3r 3  85 rr                        sta output
0005B5r 3  A9 rr                        lda #>kernel_putc
0005B7r 3  85 rr                        sta output+1
0005B9r 3               
0005B9r 3                               ; Load all of the important zero page variables from ROM
0005B9r 3  A2 21                        ldx #cold_zp_table_end-cold_zp_table-1
0005BBr 3               
0005BBr 3               @load_zp_loop:
0005BBr 3                               ; This loop loads them back to front. We can use X here
0005BBr 3                               ; because Tali hasn't started using the stack yet.
0005BBr 3  BD rr rr                     lda cold_zp_table,x
0005BEr 3  95 rr                        sta cp,x
0005C0r 3  CA                           dex
0005C1r 3  D0 F8                        bne @load_zp_loop
0005C3r 3               
0005C3r 3                               ; Copy the 0th element.
0005C3r 3  AD rr rr                     lda cold_zp_table
0005C6r 3  85 rr                        sta cp
0005C8r 3                               ; Initialize 65c02 stack (Return Stack)
0005C8r 3  A2 rr                        ldx #rsp0
0005CAr 3  9A                           txs
0005CBr 3               
0005CBr 3                               ; Clear Data Stack. This is repeated in ABORT, but this way we
0005CBr 3                               ; can load high-level words with EVALUATE
0005CBr 3  A2 rr                        ldx #dsp0
0005CDr 3               
0005CDr 3               
0005CDr 3                               ; Initialize the user variables.
0005CDr 3  A0 31                        ldy #cold_user_table_end-cold_user_table-1
0005CFr 3  A9 00                        lda #0
0005D1r 3               
0005D1r 3               @load_user_vars_loop:
0005D1r 3                               ; Like the zero page variables, these are initialized
0005D1r 3                               ; back to front.
0005D1r 3  B9 rr rr                     lda cold_user_table,y
0005D4r 3  91 rr                        sta (up),y
0005D6r 3  88                           dey
0005D7r 3  D0 F8                        bne @load_user_vars_loop
0005D9r 3               
0005D9r 3                               ; Copy the 0th element.
0005D9r 3  AD rr rr                     lda cold_user_table
0005DCr 3  92 rr                        sta (up)
0005DEr 3  20 rr rr                     jsr xt_cr
0005E1r 3               
0005E1r 3                               ; Define high-level words in forth_words.asm via EVALUATE. If
0005E1r 3                               ; you do not have any high-level words, this part can be
0005E1r 3                               ; commented out.
0005E1r 3  CA                           dex
0005E2r 3  CA                           dex
0005E3r 3  CA                           dex
0005E4r 3  CA                           dex
0005E5r 3               
0005E5r 3               
0005E5r 3                               ; start address goes NOS
0005E5r 3  A9 rr                        lda #<forth_words_start
0005E7r 3  95 02                        sta 2,x
0005E9r 3  A9 rr                        lda #>forth_words_start
0005EBr 3  95 03                        sta 3,x
0005EDr 3               
0005EDr 3                               ; length goes TOS
0005EDr 3  A9 rr                        lda #<forth_words_end
0005EFr 3  38                           sec
0005F0r 3  E9 rr                        sbc #<forth_words_start
0005F2r 3  95 00                        sta 0,x
0005F4r 3               
0005F4r 3  A9 rr                        lda #>forth_words_end
0005F6r 3  E9 rr                        sbc #>forth_words_start
0005F8r 3  95 01                        sta 1,x
0005FAr 3               
0005FAr 3               
0005FAr 3  20 rr rr                     jsr xt_evaluate
0005FDr 3               
0005FDr 3                               ; Now define any user words via EVALUATE. If you do not have
0005FDr 3                               ; any user-defined words, this part can be commented out as
0005FDr 3                               ; well.
0005FDr 3  CA                           dex
0005FEr 3  CA                           dex
0005FFr 3  CA                           dex
000600r 3  CA                           dex
000601r 3               
000601r 3               
000601r 3                               ; start address goes NOS
000601r 3  A9 rr                        lda #<user_words_start
000603r 3  95 02                        sta 2,x
000605r 3  A9 rr                        lda #>user_words_start
000607r 3  95 03                        sta 3,x
000609r 3               
000609r 3                               ; length goes TOS
000609r 3  A9 rr                        lda #<user_words_end
00060Br 3  38                           sec
00060Cr 3  E9 rr                        sbc #<user_words_start
00060Er 3  95 00                        sta 0,x
000610r 3               
000610r 3  A9 rr                        lda #>user_words_end
000612r 3  E9 rr                        sbc #>user_words_start
000614r 3  95 01                        sta 1,x
000616r 3               
000616r 3  20 rr rr                     jsr xt_evaluate
000619r 3               
000619r 3                               ; Initialize all of the history buffers by putting a zero in
000619r 3                               ; each length byte.
000619r 3  9C rr rr                     stz hist_buff
00061Cr 3  9C rr rr                     stz hist_buff+$80
00061Fr 3  9C rr rr                     stz hist_buff+$100
000622r 3  9C rr rr                     stz hist_buff+$180
000625r 3  9C rr rr                     stz hist_buff+$200
000628r 3  9C rr rr                     stz hist_buff+$280
00062Br 3  9C rr rr                     stz hist_buff+$300
00062Er 3  9C rr rr                     stz hist_buff+$380
000631r 3               
000631r 3               
000631r 3                               ; fall through to ABORT
000631r 3               
000631r 3               
000631r 3               ; ## ABORT ( -- ) "Reset the Data Stack and restart the CLI"
000631r 3               ; ## "abort"  tested  ANS core
000631r 3                       ; """https://forth-standard.org/standard/core/ABORT
000631r 3                       ; Clear Data Stack and continue into QUIT. We can jump here via
000631r 3                       ; subroutine if we want to because we are going to reset the 65c02's
000631r 3                       ; stack pointer (the Return Stack) anyway during QUIT. Note we don't
000631r 3                       ; actually delete the stuff on the Data Stack.
000631r 3                       ; """
000631r 3               xt_abort:
000631r 3  A2 rr                        ldx #dsp0
000633r 3               
000633r 3                               ; fall through to QUIT
000633r 3               
000633r 3               
000633r 3               ; ## QUIT ( -- ) "Reset the input and get new input"
000633r 3               ; ## "quit"  tested  ANS core
000633r 3                       ; """https://forth-standard.org/standard/core/QUIT
000633r 3                       ; Rest the input and start command loop
000633r 3                       ; """
000633r 3               
000633r 3               xt_quit:
000633r 3                               ; Clear the Return Stack. This is a little screwed up
000633r 3                               ; because the 65c02 can only set the Return Stack via X,
000633r 3                               ; which is our Data Stack pointer. The ANS specification
000633r 3                               ; demands, however, that ABORT reset the Data Stack pointer
000633r 3  8A                           txa             ; Save the DSP that we just defined
000634r 3  A2 rr                        ldx #rsp0
000636r 3  9A                           txs
000637r 3  AA                           tax             ; Restore the DSP. Dude, seriously.
000638r 3               
000638r 3                               ; make sure instruction pointer is empty
000638r 3  64 rr                        stz ip
00063Ar 3  64 rr                        stz ip+1
00063Cr 3               
00063Cr 3                               ; SOURCE-ID is zero (keyboard input)
00063Cr 3  64 rr                        stz insrc
00063Er 3  64 rr                        stz insrc+1
000640r 3               
000640r 3                               ; STATE is zero (interpret, not compile)
000640r 3  64 rr                        stz state
000642r 3  64 rr                        stz state+1
000644r 3               @get_line:
000644r 3  A9 rr                        lda #<buffer0   ; input buffer, this is paranoid
000646r 3  85 rr                        sta cib
000648r 3  A9 rr                        lda #>buffer0
00064Ar 3  85 rr                        sta cib+1
00064Cr 3               
00064Cr 3                               ; Size of current input buffer (CIB) is zero
00064Cr 3  64 rr                        stz ciblen
00064Er 3  64 rr                        stz ciblen+1
000650r 3               
000650r 3                               ; Accept a line from the current import source. This is how
000650r 3                               ; modern Forths to it.
000650r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
000653r 3               
000653r 3                               ; Test flag: LSB of TOS
000653r 3  B5 00                        lda 0,x
000655r 3  D0 05                        bne @success
000657r 3               
000657r 3                               ; If REFILL returned a FALSE flag, something went wrong and we
000657r 3                               ; need to print an error message and reset the machine. We
000657r 3                               ; don't need to save TOS because we're going to clobber it
000657r 3                               ; anyway when we go back to ABORT.
000657r 3  A9 06                        lda #err_refill
000659r 3  4C rr rr                     jmp error
00065Cr 3               
00065Cr 3               @success:
00065Cr 3                               ; Assume we have successfully accepted a string of input from
00065Cr 3                               ; a source, with address cib and length of input in ciblen. We
00065Cr 3                               ; arrive here still with the TRUE flag from REFILL as TOS
00065Cr 3  E8                           inx                     ; drop
00065Dr 3  E8                           inx
00065Er 3               
00065Er 3                               ; Main compile/execute routine
00065Er 3  20 rr rr                     jsr interpret
000661r 3               
000661r 3                               ; Test for Data Stack underflow. Tali Forth does not check for
000661r 3                               ; overflow because it is so rare
000661r 3  E0 rr                        cpx #dsp0
000663r 3  F0 05                        beq @stack_ok
000665r 3  90 03                        bcc @stack_ok           ; DSP must always be smaller than DSP0
000667r 3               
000667r 3  4C rr rr                     jmp underflow_error
00066Ar 3               
00066Ar 3               @stack_ok:
00066Ar 3                               ; Display system prompt if all went well. If we're interpreting,
00066Ar 3                               ; this is " ok", if we're compiling, it's " compiled". Note
00066Ar 3                               ; space at beginning of the string.
00066Ar 3  A5 rr                        lda state
00066Cr 3  F0 02                        beq @print
00066Er 3               
00066Er 3  A9 01                        lda #1                  ; number for "compile" string
000670r 3               @print:
000670r 3  20 rr rr                     jsr print_string
000673r 3               
000673r 3                               ; Awesome line, everybody! Now get the next one.
000673r 3  80 CF                        bra @get_line
000675r 3               
000675r 3               z_cold:
000675r 3               z_abort:
000675r 3               z_quit:         ; no RTS required
000675r 3               
000675r 3               
000675r 3               
000675r 3               ; This table holds all of the initial values for the variables in zero page.
000675r 3               ; This table is used by COLD.
000675r 3               cold_zp_table:
000675r 3  rr rr                .word cp0+256+1024      ; cp moved to make room for user vars and
000677r 3                                               ; block buffer
000677r 3  rr rr                .word dictionary_start  ; dp
000679r 3  00 00                .word 0                 ; workword
00067Br 3  00 00                .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
00067Dr 3  rr rr                .word buffer0           ; cib
00067Fr 3  00 00                .word 0                 ; ciblen
000681r 3  00 00                .word 0                 ; toin
000683r 3  00 00                .word 0                 ; ip
000685r 3  rr rr                .word kernel_putc       ; output
000687r 3  rr rr                .word kernel_getc       ; input
000689r 3  00 00                .word 0                 ; havekey
00068Br 3  00 00                .word 0                 ; state (0 = interpret)
00068Dr 3  0A 00                .word 10                ; base
00068Fr 3  14 00                .word 20                ; nc-limit
000691r 3  00 00                .word 0                 ; uf_strip (off by default)
000693r 3  rr rr                .word cp0               ; up (user vars put right at beginning of
000695r 3                                               ; available RAM)
000695r 3  00 00                .word 0                 ; status
000697r 3               cold_zp_table_end:
000697r 3               
000697r 3               ; No further ZP variables are initialized. The variables past this point are
000697r 3               ; all temporaries.
000697r 3               
000697r 3               ; This table holds the inital values for the user variables. This table is
000697r 3               ; used by COLD.
000697r 3               cold_user_table:
000697r 3  00 00                .word 0                         ; BLK
000699r 3  00 00                .word 0                         ; SCR
00069Br 3  00                   .byte 0                         ; CURRENT = FORTH-WORDLIST
00069Cr 3  04                   .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
00069Dr 3  rr rr                .word dictionary_start          ; FORTH-WORDLIST
00069Fr 3  rr rr                .word editor_dictionary_start   ; EDITOR-WORDLIST
0006A1r 3               .ifdef TALI_OPTIONAL_ASSEMBLER
0006A1r 3  rr rr                .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
0006A3r 3               .else
0006A3r 3                       .word 0
0006A3r 3               .endif
0006A3r 3  rr rr                .word root_dictionary_start     ; ROOT-WORDLIST
0006A5r 3  00 00 00 00          .word 0,0,0,0,0,0,0,0           ; User wordlists
0006A9r 3  00 00 00 00  
0006ADr 3  00 00 00 00  
0006B5r 3  01                   .byte 1                         ; #ORDER
0006B6r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0         ; search-order
0006BAr 3  00 00 00 00  
0006BEr 3  00           
0006BFr 3  rr rr                .word cp0+256                   ; Address of buffer (right after USER vars)
0006C1r 3  00 00                .word 0                         ; block in buffer
0006C3r 3  00 00                .word 0                         ; buffer status (not in use)
0006C5r 3  rr rr                .word xt_block_word_error       ; block-read vector
0006C7r 3  rr rr                .word xt_block_word_error       ; block-write vector
0006C9r 3               cold_user_table_end:
0006C9r 3               
0006C9r 3               
0006C9r 3               ; ## ABORT_QUOTE ( "string" -- ) "If flag TOS is true, ABORT with message"
0006C9r 3               ; ## "abort""  tested  ANS core
0006C9r 3                       ; """https://forth-standard.org/standard/core/ABORTq
0006C9r 3                       ; Abort and print a string.
0006C9r 3                       ; """
0006C9r 3               
0006C9r 3               xt_abort_quote:
0006C9r 3                               ; save the string
0006C9r 3  20 rr rr                     jsr xt_s_quote          ; S"
0006CCr 3               
0006CCr 3                               ; compile run-time part
0006CCr 3  A0 rr                        ldy #>abort_quote_runtime
0006CEr 3  A9 rr                        lda #<abort_quote_runtime
0006D0r 3  20 rr rr                     jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
0006D3r 3               
0006D3r 3  60           z_abort_quote:  rts
0006D4r 3               
0006D4r 3               
0006D4r 3               abort_quote_runtime:
0006D4r 3                       ; """Runtime aspect of ABORT_QUOTE"""
0006D4r 3               
0006D4r 3                               ; We arrive here with ( f addr u )
0006D4r 3  B5 04                        lda 4,x
0006D6r 3  15 05                        ora 5,x
0006D8r 3  F0 09                        beq @done       ; if FALSE, we're done
0006DAr 3               
0006DAr 3                               ; We're true, so print string and ABORT. We follow Gforth
0006DAr 3                               ; in going to a new line after the string
0006DAr 3  20 rr rr                     jsr xt_type
0006DDr 3  20 rr rr                     jsr xt_cr
0006E0r 3  4C rr rr                     jmp xt_abort    ; not JSR, so never come back
0006E3r 3               @done:
0006E3r 3                               ; Drop three entries from the Data Stack
0006E3r 3  8A                           txa
0006E4r 3  18                           clc
0006E5r 3  69 06                        adc #6
0006E7r 3  AA                           tax
0006E8r 3               
0006E8r 3  60                           rts
0006E9r 3               
0006E9r 3               
0006E9r 3               
0006E9r 3               ; ## ABS ( n -- u ) "Return absolute value of a number"
0006E9r 3               ; ## "abs"  auto  ANS core
0006E9r 3                       ; """https://forth-standard.org/standard/core/ABS
0006E9r 3                       ; Return the absolute value of a number.
0006E9r 3                       ; """
0006E9r 3               
0006E9r 3               xt_abs:
0006E9r 3  20 rr rr                     jsr underflow_1
0006ECr 3               
0006ECr 3  B5 01                        lda 1,x
0006EEr 3  10 0D                        bpl @done       ; positive number, easy money!
0006F0r 3               
0006F0r 3                               ; negative: calculate 0 - n
0006F0r 3  38                           sec
0006F1r 3  A9 00                        lda #0
0006F3r 3  F5 00                        sbc 0,x         ; LSB
0006F5r 3  95 00                        sta 0,x
0006F7r 3               
0006F7r 3  A9 00                        lda #0          ; MSB
0006F9r 3  F5 01                        sbc 1,x
0006FBr 3  95 01                        sta 1,x
0006FDr 3               
0006FDr 3               @done:
0006FDr 3  60           z_abs:          rts
0006FEr 3               
0006FEr 3               
0006FEr 3               
0006FEr 3               ; ## ACCEPT ( addr n -- n ) "Receive a string of characters from the keyboard"
0006FEr 3               ; ## "accept"  auto  ANS core
0006FEr 3                       ; """https://forth-standard.org/standard/core/ACCEPT
0006FEr 3                       ; Receive a string of at most n1 characters, placing them at
0006FEr 3                       ; addr. Return the actual number of characters as n2. Characters
0006FEr 3                       ; are echoed as they are received. ACCEPT is called by REFILL in
0006FEr 3                       ; modern Forths.
0006FEr 3                       ; """
0006FEr 3               
0006FEr 3               xt_accept:
0006FEr 3  20 rr rr                     jsr underflow_2
000701r 3               
000701r 3                               ; Abort if we were asked to receive 0 chars
000701r 3  B5 00                        lda 0,x
000703r 3  15 01                        ora 1,x
000705r 3  D0 09                        bne @not_zero
000707r 3               
000707r 3  E8                           inx
000708r 3  E8                           inx
000709r 3  74 00                        stz 0,x
00070Br 3  74 01                        stz 1,x
00070Dr 3               
00070Dr 3  4C rr rr                     jmp accept_done
000710r 3               
000710r 3               @not_zero:
000710r 3  B5 00                        lda 0,x         ; number of chars to get in tmp2 ...
000712r 3  85 rr                        sta tmp2
000714r 3  64 rr                        stz tmp2+1      ; ... but we only accept max 255 chars
000716r 3               
000716r 3  B5 02                        lda 2,x         ; address of buffer is NOS, to tmp1
000718r 3  85 rr                        sta tmp1
00071Ar 3  B5 03                        lda 3,x
00071Cr 3  85 rr                        sta tmp1+1
00071Er 3               
00071Er 3  E8                           inx
00071Fr 3  E8                           inx
000720r 3               
000720r 3  A0 00                        ldy #0
000722r 3               
000722r 3                               ; Select the next history buffer. Clear bit 3 first (so overflow
000722r 3                               ; from bit 2 to 3 is OK)
000722r 3  A5 rr                        lda status
000724r 3  29 F7                        and #$f7
000726r 3               
000726r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
000726r 3  1A                           inc
000727r 3               
000727r 3                               ; Set bit 3 for detecting if CTRL-n has been pressed the first
000727r 3                               ; time. This bit will be cleared on the first CTRL-n or CTRL-p
000727r 3                               ; received and won't be used to calculate the history buffer
000727r 3                               ; offset.
000727r 3  09 08                        ora #$08
000729r 3  85 rr                        sta status
00072Br 3               
00072Br 3               accept_loop:
00072Br 3                               ; Out of the box, py65mon catches some CTRL sequences such as
00072Br 3                               ; CTRL-c. We also don't need to check for CTRL-l because a
00072Br 3                               ; vt100 terminal clears the screen automatically.
00072Br 3               
00072Br 3                               ; This is the internal version of KEY without all the mucking
00072Br 3                               ; about with the Data Stack while still using the input vector
00072Br 3  20 rr rr                     jsr key_a
00072Er 3               
00072Er 3                               ; We quit on both line feed and carriage return
00072Er 3  C9 0A                        cmp #AscLF
000730r 3  F0 20                        beq @eol
000732r 3  C9 0D                        cmp #AscCR
000734r 3  F0 1C                        beq @eol
000736r 3               
000736r 3                               ; BACKSPACE and DEL do the same thing for the moment
000736r 3  C9 08                        cmp #AscBS
000738r 3  F0 22                        beq @backspace
00073Ar 3  C9 7F                        cmp #AscDEL     ; (CTRL-h)
00073Cr 3  F0 1E                        beq @backspace
00073Er 3               
00073Er 3                               ; Check for CTRL-p and CTRL-n to recall input history
00073Er 3  C9 10                        cmp #AscCP
000740r 3  F0 36                        beq @ctrl_p
000742r 3  C9 0E                        cmp #AscCN
000744r 3  F0 44                        beq @ctrl_n
000746r 3               
000746r 3                               ; That's enough for now. Save and echo character.
000746r 3  91 rr                        sta (tmp1),y
000748r 3  C8                           iny
000749r 3               
000749r 3                               ; EMIT_A sidesteps all the fooling around with the Data Stack
000749r 3  20 rr rr                     jsr emit_a
00074Cr 3               
00074Cr 3  C4 rr                        cpy tmp2        ; reached character limit?
00074Er 3  D0 DB                        bne accept_loop       ; fall through if buffer limit reached
000750r 3  80 03                        bra @buffer_full
000752r 3               
000752r 3               @eol:
000752r 3  20 rr rr                     jsr xt_space    ; print final space
000755r 3               
000755r 3               @buffer_full:
000755r 3                               ; REFILL updates ciblen and toin, we don't need to do it here
000755r 3  94 00                        sty 0,x         ; Y contains number of chars accepted already
000757r 3  74 01                        stz 1,x         ; we only accept 256 chars
000759r 3               
000759r 3  4C rr rr                     jmp accept_done
00075Cr 3               
00075Cr 3               @backspace:
00075Cr 3                               ; Handle backspace and delete kex, which currently do the same
00075Cr 3                               ; thing
00075Cr 3  C0 00                        cpy #0          ; buffer empty?
00075Er 3  D0 06                        bne @1
000760r 3               
000760r 3  A9 07                        lda #AscBELL    ; complain and don't delete beyond the start of line
000762r 3  20 rr rr                     jsr emit_a
000765r 3  C8                           iny
000766r 3               @1:
000766r 3  88                           dey
000767r 3  A9 08                        lda #AscBS      ; move back one
000769r 3  20 rr rr                     jsr emit_a
00076Cr 3  A9 20                        lda #AscSP      ; print a space (rubout)
00076Er 3  20 rr rr                     jsr emit_a
000771r 3  A9 08                        lda #AscBS      ; move back over space
000773r 3  20 rr rr                     jsr emit_a
000776r 3               
000776r 3  80 B3                        bra accept_loop
000778r 3               
000778r 3               @ctrl_p:
000778r 3                               ; CTRL-p was pressed. Recall the previous input buffer.
000778r 3               
000778r 3                               ; Select the previous buffer
000778r 3  A5 rr                        lda status
00077Ar 3               
00077Ar 3                               ; Check for 0 (need to wrap back to 7)
00077Ar 3  29 07                        and #7
00077Cr 3  D0 08                        bne @ctrl_p_dec
00077Er 3               
00077Er 3                               ; We need to wrap back to 7.
00077Er 3  A5 rr                        lda status
000780r 3  09 07                        ora #7
000782r 3  85 rr                        sta status
000784r 3  80 11                        bra @recall_history
000786r 3               
000786r 3               @ctrl_p_dec:
000786r 3                               ; It's safe to decrement the buffer index directly.
000786r 3  C6 rr                        dec status
000788r 3  80 0D                        bra @recall_history
00078Ar 3               
00078Ar 3               @ctrl_n:
00078Ar 3                               ; CTRL-n was pressed. Recall the next input buffer. Select
00078Ar 3                               ; the next buffer Check bit 3. If it's set, this is the first
00078Ar 3                               ; time CTRL-n has been pressed and we should select the CURRENT
00078Ar 3                               ; history buffer.
00078Ar 3  A9 08                        lda #$8
00078Cr 3  24 rr                        bit status
00078Er 3  D0 07                        bne @recall_history
000790r 3               
000790r 3                               ; This isn't the first time CTRL-n has been pressed, select the
000790r 3                               ; next history buffer. Clear bit 3 first (so overflow is OK)
000790r 3  A5 rr                        lda status
000792r 3  29 F7                        and #$f7
000794r 3               
000794r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
000794r 3  1A                           inc
000795r 3               
000795r 3                               ; Bit 3 (if it got set by going from buffer 7 to 0) will
000795r 3                               ; be cleared below.
000795r 3  85 rr                        sta status
000797r 3               
000797r 3                               ; Falls through to @recall_history
000797r 3               
000797r 3               @recall_history:
000797r 3                               ; Clear bit 3 (first time ctrl-n recall) bit in status
000797r 3  A9 08                        lda #%00001000
000799r 3  14 rr                        trb status
00079Br 3               
00079Br 3  20 rr rr                     jsr total_recall
00079Er 3               
00079Er 3                               ; tmp3 now has the address of the previous history buffer.
00079Er 3                               ; First byte of buffer is length. Clear the line by sending
00079Er 3                               ; CR, Y spaces, then CR.
00079Er 3  A9 0D                        lda #AscCR
0007A0r 3  20 rr rr                     jsr emit_a
0007A3r 3               
0007A3r 3               input_clear:
0007A3r 3  C0 00                        cpy #0
0007A5r 3  F0 08                        beq input_cleared
0007A7r 3               
0007A7r 3  A9 20                        lda #AscSP
0007A9r 3  20 rr rr                     jsr emit_a
0007ACr 3  88                           dey
0007ADr 3  80 F4                        bra input_clear
0007AFr 3               
0007AFr 3               input_cleared:
0007AFr 3  A9 0D                        lda #AscCR
0007B1r 3  20 rr rr                     jsr emit_a
0007B4r 3               
0007B4r 3                               ; Save the history length byte into histinfo+1
0007B4r 3                               ; ldy #0        ; Y is already 0 by clearing the line.
0007B4r 3  B1 rr                        lda (tmp3),y
0007B6r 3  85 rr                        sta status+1
0007B8r 3               
0007B8r 3                               ; Increment the tmp3 pointer so we can use ,y addressing
0007B8r 3                               ; on both tmp1 (the input buffer) and tmp3 (the history
0007B8r 3                               ; buffer)
0007B8r 3  E6 rr                        inc tmp3
0007BAr 3  D0 02                        bne @2           ; Increment the upper byte on carry.
0007BCr 3  E6 rr                        inc tmp3+1
0007BEr 3               @2:
0007BEr 3                               ; Copy the history buffer into the input buffer,
0007BEr 3                               ; sending the characters to the output as we go.
0007BEr 3  A9 0D                        lda #AscCR
0007C0r 3  20 rr rr                     jsr emit_a
0007C3r 3               
0007C3r 3               @history_loop:
0007C3r 3                               ; See if we have reached the end of the history buffer.
0007C3r 3  C4 rr                        cpy status+1
0007C5r 3  D0 03                        bne @3
0007C7r 3  4C rr rr                     jmp accept_loop       ; Needs a long jump
0007CAr 3               @3:
0007CAr 3                               ; See if we have reached the end of the input buffer.
0007CAr 3                               ; (only comparing to lower byte as we currently limit
0007CAr 3                               ; to 255 characters max)
0007CAr 3  C4 rr                        cpy tmp2
0007CCr 3  F0 0A                        beq @hist_filled_buffer
0007CEr 3               
0007CEr 3                               ; Copy a character and echo.
0007CEr 3  B1 rr                        lda (tmp3),y
0007D0r 3  91 rr                        sta (tmp1),y
0007D2r 3  20 rr rr                     jsr emit_a
0007D5r 3               
0007D5r 3                               ; Move to the next character.
0007D5r 3  C8                           iny
0007D6r 3  80 EB                        bra @history_loop
0007D8r 3               
0007D8r 3               @hist_filled_buffer:
0007D8r 3                               ; We don't want a history recall to EOL our buffer,
0007D8r 3                               ; so back up one character and return to editing.
0007D8r 3  88                           dey
0007D9r 3  4C rr rr                     jmp accept_loop
0007DCr 3               accept_done:
0007DCr 3               @done:
0007DCr 3                               ; Copy the input buffer into the currently
0007DCr 3                               ; selected history buffer.
0007DCr 3  20 rr rr                     jsr total_recall
0007DFr 3  85 rr                        sta status+1
0007E1r 3               
0007E1r 3                               ; Also save it in the first buffer byte.
0007E1r 3  A0 00                        ldy #0
0007E3r 3  91 rr                        sta (tmp3),y
0007E5r 3               
0007E5r 3                               ; Move path the count to the data bytes
0007E5r 3  E6 rr                        inc tmp3
0007E7r 3  D0 02                        bne @4           ; Increment the upper byte on carry.
0007E9r 3  E6 rr                        inc tmp3+1
0007EBr 3               @4:
0007EBr 3                               ; Copy the characters from the input buffer to the
0007EBr 3                               ; history buffer.
0007EBr 3               
0007EBr 3               @save_history_loop:
0007EBr 3  C4 rr                        cpy status+1
0007EDr 3  F0 07                        beq @save_history_done
0007EFr 3               
0007EFr 3  B1 rr                        lda (tmp1),y
0007F1r 3  91 rr                        sta (tmp3),y
0007F3r 3  C8                           iny
0007F4r 3  80 F5                        bra @save_history_loop
0007F6r 3               
0007F6r 3               @save_history_done:
0007F6r 3               z_accept:
0007F6r 3  60                           rts
0007F7r 3               
0007F7r 3               total_recall:
0007F7r 3                       ; """Internal subroutine for ACCEPT that recalls history entry"""
0007F7r 3               
0007F7r 3                               ; Generate the address of the buffer in tmp3. Start with the
0007F7r 3                               ; base address.
0007F7r 3  A9 rr                        lda #<hist_buff
0007F9r 3  85 rr                        sta tmp3
0007FBr 3  A9 rr                        lda #>hist_buff
0007FDr 3  85 rr                        sta tmp3+1
0007FFr 3               
0007FFr 3                               ; This is a bit annoying as some bits go into each byte.
0007FFr 3                               ; .....xxx gets put into address like ......xx x.......
0007FFr 3  A5 rr                        lda status
000801r 3  6A                           ror
000802r 3  29 03                        and #3
000804r 3  18                           clc
000805r 3  65 rr                        adc tmp3+1
000807r 3  85 rr                        sta tmp3+1
000809r 3               
000809r 3  A5 rr                        lda status
00080Br 3  6A                           ror             ; Rotate through carry into msb.
00080Cr 3  6A                           ror
00080Dr 3  29 80                        and #$80
00080Fr 3  18                           clc
000810r 3  65 rr                        adc tmp3
000812r 3  85 rr                        sta tmp3
000814r 3  90 02                        bcc @1           ; Increment the upper byte on carry.
000816r 3  E6 rr                        inc tmp3+1
000818r 3               @1:
000818r 3                               ; Save the current length of the input buffer in
000818r 3                               ; histinfo+1 temporarily.  Reduce to 127 if larger.
000818r 3  98                           tya
000819r 3  C9 80                        cmp #$80
00081Br 3  90 02                        bcc @2
00081Dr 3  A9 7F                        lda #$7F
00081Fr 3               @2:
00081Fr 3  60                           rts
000820r 3               
000820r 3               
000820r 3               
000820r 3               
000820r 3               
000820r 3               ; ## ACTION_OF ( "name" -- xt ) "Get named deferred word's xt"
000820r 3               ; ## "action-of"  auto  ANS core ext
000820r 3                       ; """http://forth-standard.org/standard/core/ACTION-OF"""
000820r 3               
000820r 3               xt_action_of:
000820r 3                               ; This is a state aware word with differet behavior
000820r 3                               ; when used while compiling vs interpreting.
000820r 3                               ; Check STATE
000820r 3  A5 rr                        lda state
000822r 3  05 rr                        ora state+1
000824r 3  F0 0C                        beq @interpreting
000826r 3               
000826r 3               @compiling:
000826r 3                               ; Run ['] to compile the xt of the next word
000826r 3                               ; as a literal.
000826r 3  20 rr rr                     jsr xt_bracket_tick
000829r 3               
000829r 3                               ; Postpone DEFER@ by compiling a JSR to it.
000829r 3  A0 rr                        ldy #>xt_defer_fetch
00082Br 3  A9 rr                        lda #<xt_defer_fetch
00082Dr 3  20 rr rr                     jsr cmpl_subroutine
000830r 3  80 06                        bra @done
000832r 3               
000832r 3               @interpreting:
000832r 3  20 rr rr                     jsr xt_tick
000835r 3  20 rr rr                     jsr xt_defer_fetch
000838r 3               
000838r 3               @done:
000838r 3  60           z_action_of:           rts
000839r 3               
000839r 3               
000839r 3               
000839r 3               ; ## AGAIN ( addr -- ) "Code backwards branch to address left by BEGIN"
000839r 3               ; ## "again"  tested  ANS core ext
000839r 3                       ; """https://forth-standard.org/standard/core/AGAIN"""
000839r 3               
000839r 3               xt_again:
000839r 3  20 rr rr                     jsr underflow_1
00083Cr 3               
00083Cr 3                               ; Add the opcode for a JMP. We use JMP instead of BRA
00083Cr 3                               ; so we have the range and don't have to calculate the
00083Cr 3                               ; offset.
00083Cr 3  A0 00                        ldy #0
00083Er 3  A9 4C                        lda #$4C        ; JMP
000840r 3  91 rr                        sta (cp),y
000842r 3  C8                           iny
000843r 3               
000843r 3  B5 00                        lda 0,x         ; LSB of address
000845r 3  91 rr                        sta (cp),y
000847r 3  C8                           iny
000848r 3               
000848r 3  B5 01                        lda 1,x         ; MSB of address
00084Ar 3  91 rr                        sta (cp),y
00084Cr 3  C8                           iny
00084Dr 3               
00084Dr 3                               ; Allot the space we just used
00084Dr 3  98                           tya
00084Er 3  18                           clc
00084Fr 3  65 rr                        adc cp
000851r 3  85 rr                        sta cp
000853r 3  90 02                        bcc @done
000855r 3  E6 rr                        inc cp+1
000857r 3               @done:
000857r 3  E8                           inx
000858r 3  E8                           inx
000859r 3               
000859r 3  60           z_again:        rts
00085Ar 3               
00085Ar 3               
00085Ar 3               
00085Ar 3               ; ## ALIGN ( -- ) "Make sure CP is aligned on word size"
00085Ar 3               ; ## "align"  auto  ANS core
00085Ar 3                       ; """https://forth-standard.org/standard/core/ALIGN
00085Ar 3                       ; On a 8-bit machine, this does nothing. ALIGNED uses this
00085Ar 3                       ; routine as well, and also does nothing
00085Ar 3                       ; """
00085Ar 3               
00085Ar 3               ; ## ALIGNED ( addr -- addr ) "Return the first aligned address"
00085Ar 3               ; ## "aligned"  auto  ANS core
00085Ar 3                       ; """https://forth-standard.org/standard/core/ALIGNED"""
00085Ar 3               
00085Ar 3               xt_align:
00085Ar 3               xt_aligned:
00085Ar 3               z_align:
00085Ar 3  60           z_aligned:      rts             ; stripped out during native compile
00085Br 3               
00085Br 3               
00085Br 3               
00085Br 3               ; ## ALLOT ( n -- ) "Reserve or release memory"
00085Br 3               ; ## "allot"  auto  ANS core
00085Br 3                       ; """https://forth-standard.org/standard/core/ALLOT
00085Br 3                       ; Reserve a certain number of bytes (not cells) or release them.
00085Br 3                       ; If n = 0, do nothing. If n is negative, release n bytes, but only
00085Br 3                       ; to the beginning of the Dictionary. If n is positive (the most
00085Br 3                       ; common case), reserve n bytes, but not past the end of the
00085Br 3                       ; Dictionary. See http://forth-standard.org/standard/core/ALLOT
00085Br 3                       ; """
00085Br 3               
00085Br 3               xt_allot:
00085Br 3  20 rr rr                     jsr underflow_1
00085Er 3               
00085Er 3                               ; Releasing memory is going to be a very rare operation,
00085Er 3                               ; so we check for it at the beginning and try to make
00085Er 3                               ; the most common case as fast as possible
00085Er 3  B5 01                        lda 1,x
000860r 3  30 22                        bmi @release
000862r 3               
000862r 3                               ; Common case: We are reserving memory, not releasing it
000862r 3  18                           clc
000863r 3  A5 rr                        lda cp
000865r 3  75 00                        adc 0,x
000867r 3  85 rr                        sta cp
000869r 3               
000869r 3  A5 rr                        lda cp+1
00086Br 3  75 01                        adc 1,x
00086Dr 3  85 rr                        sta cp+1
00086Fr 3               
00086Fr 3                               ; Wait, did we just grant more space than we have? This is
00086Fr 3                               ; a check we only do here, not for other situations like cmpl_a
00086Fr 3                               ; where smaller amounts are reserved.
00086Fr 3  A0 FF                        ldy #<cp_end
000871r 3  C4 rr                        cpy cp
000873r 3  A9 7F                        lda #>cp_end
000875r 3  E5 rr                        sbc cp+1
000877r 3  B0 48                        bcs @done               ; we're fine.
000879r 3               
000879r 3                               ; Oops, that was too much, we're beyond the end of
000879r 3                               ; legal Dictionary RAM. Reduce to max memory and report
000879r 3                               ; an error
000879r 3  84 rr                        sty cp                  ; still #<cp_end
00087Br 3  A9 7F                        lda #>cp_end
00087Dr 3  85 rr                        sta cp+1
00087Fr 3               
00087Fr 3  A9 00                        lda #err_allot
000881r 3  4C rr rr                     jmp error
000884r 3               
000884r 3               @release:
000884r 3                  		; The ANS standard doesn't really say what to do if too much
000884r 3                               ; memory is freed ("negatively alloted"). In fact, there isn't
000884r 3                               ; even an official test. Gforth is little help either. The good
000884r 3                               ; news is, this is going to be a rare case. We want to use as
000884r 3                               ; few bytes as possible.
000884r 3               
000884r 3                               ; What we do is let the user free anything up to the beginning
000884r 3                               ; of the RAM area assigned to the Dicionary (CP0), but at
000884r 3                               ; their own risk. This means that the Dictionary pointer DP
000884r 3                               ; might end up pointing to garbage. However, an attempt to
000884r 3                               ; free more than RAM than CP0 will lead to CP being set to CP0,
000884r 3                               ; the DP pointing to the last word in RAM (should be DROP) and
000884r 3                               ; an error message.
000884r 3               
000884r 3                               ; We arrive here with ( n ) which is negative. First step,
000884r 3                               ; subtract the number TOS from the CP for a new CP
000884r 3  CA                           dex
000885r 3  CA                           dex
000886r 3  A5 rr                        lda cp
000888r 3  95 00                        sta 0,x
00088Ar 3  A5 rr                        lda cp+1
00088Cr 3  95 01                        sta 1,x
00088Er 3               
00088Er 3  20 rr rr                     jsr xt_plus                     ; new CP is now TOS
000891r 3               
000891r 3                               ; Second step, see if we've gone too far. We compare the new
000891r 3                               ; CP on TOS (which, if we've really screwed up, might be
000891r 3                               ; negative) with CP0. This is a signed comparison
000891r 3  CA                           dex
000892r 3  CA                           dex                             ; new CP now NOS
000893r 3  A9 rr                        lda #<cp0
000895r 3  95 00                        sta 0,x
000897r 3  A9 rr                        lda #>cp0
000899r 3  95 01                        sta 1,x                         ; CP0 is TOS
00089Br 3               
00089Br 3  20 rr rr                     jsr compare_16bit               ; still ( CP CP0 )
00089Er 3               
00089Er 3                               ; If CP (NOS) is smaller than CP0 (TOS), we're in trouble.
00089Er 3                               ; This means we want Z=1 or N=1
00089Er 3  F0 17                        beq @nega_done
0008A0r 3  30 15                        bmi @nega_done
0008A2r 3               
0008A2r 3                               ; Yep, we're in trouble. Set CP to CP0, set DP to the first
0008A2r 3                               ; word in ROM (should be DROP), and abort with an error
0008A2r 3  A9 rr                        lda #<cp0
0008A4r 3  85 rr                        sta cp
0008A6r 3  A9 rr                        lda #>cp0
0008A8r 3  85 rr                        sta cp+1
0008AAr 3               
0008AAr 3  A9 rr                        lda #<dictionary_start
0008ACr 3  85 rr                        sta dp
0008AEr 3  A9 rr                        lda #>dictionary_start
0008B0r 3  85 rr                        sta dp+1
0008B2r 3               
0008B2r 3  A9 0A                        lda #err_negallot
0008B4r 3  4C rr rr                     jmp error
0008B7r 3               
0008B7r 3               @nega_done:
0008B7r 3                               ; Save new CP, which is NOS
0008B7r 3  B5 02                        lda 2,x
0008B9r 3  85 rr                        sta cp
0008BBr 3  B5 03                        lda 3,x
0008BDr 3  85 rr                        sta cp+1
0008BFr 3               
0008BFr 3  E8                           inx
0008C0r 3  E8                           inx                     ; drop through to @done
0008C1r 3               @done:
0008C1r 3  E8                           inx
0008C2r 3  E8                           inx
0008C3r 3               z_allot:
0008C3r 3  60                           rts
0008C4r 3               
0008C4r 3               
0008C4r 3               
0008C4r 3               ; ## ALLOW_NATIVE ( -- ) "Flag last word to allow native compiling"
0008C4r 3               ; ## "allow-native"  auto  Tali Forth
0008C4r 3               xt_allow_native:
0008C4r 3  20 rr rr                     jsr current_to_dp
0008C7r 3  A0 01                        ldy #1          ; offset for status byte
0008C9r 3  B1 rr                        lda (dp),y
0008CBr 3  29 F5                        and #$ff-NN-AN  ; AN and NN flag is clear.
0008CDr 3  91 rr                        sta (dp),y
0008CFr 3               z_allow_native:
0008CFr 3  60                           rts
0008D0r 3               
0008D0r 3               
0008D0r 3               ; ## ALSO ( -- ) "Make room in the search order for another wordlist"
0008D0r 3               ; ## "also"  auto  ANS search ext
0008D0r 3                       ; """http://forth-standard.org/standard/search/ALSO"""
0008D0r 3               xt_also:
0008D0r 3  20 rr rr                     jsr xt_get_order
0008D3r 3  20 rr rr                     jsr xt_over
0008D6r 3  20 rr rr                     jsr xt_swap
0008D9r 3  20 rr rr                     jsr xt_one_plus
0008DCr 3  20 rr rr                     jsr xt_set_order
0008DFr 3               
0008DFr 3  60           z_also:         rts
0008E0r 3               
0008E0r 3               
0008E0r 3               ; ## ALWAYS_NATIVE ( -- ) "Flag last word as always natively compiled"
0008E0r 3               ; ## "always-native"  auto  Tali Forth
0008E0r 3               xt_always_native:
0008E0r 3  20 rr rr                     jsr current_to_dp
0008E3r 3  A0 01                        ldy #1          ; offset for status byte
0008E5r 3  B1 rr                        lda (dp),y
0008E7r 3  09 02                        ora #AN         ; Make sure AN flag is set
0008E9r 3  29 F7                        and #$ff-NN     ; and NN flag is clear.
0008EBr 3  91 rr                        sta (dp),y
0008EDr 3               z_always_native:
0008EDr 3  60                           rts
0008EEr 3               
0008EEr 3               
0008EEr 3               ; ## AND ( n n -- n ) "Logically AND TOS and NOS"
0008EEr 3               ; ## "and"  auto  ANS core
0008EEr 3                       ; """https://forth-standard.org/standard/core/AND"""
0008EEr 3               xt_and:
0008EEr 3  20 rr rr                     jsr underflow_2
0008F1r 3               
0008F1r 3  B5 00                        lda 0,x
0008F3r 3  35 02                        and 2,x
0008F5r 3  95 02                        sta 2,x
0008F7r 3               
0008F7r 3  B5 01                        lda 1,x
0008F9r 3  35 03                        and 3,x
0008FBr 3  95 03                        sta 3,x
0008FDr 3               
0008FDr 3  E8                           inx
0008FEr 3  E8                           inx
0008FFr 3               
0008FFr 3  60           z_and:          rts
000900r 3               
000900r 3               
000900r 3               ; ## ASSEMBLER_WORDLIST ( -- u ) "WID for the Assembler wordlist"
000900r 3               ; ## "assembler-wordlist"  tested  Tali Assembler
000900r 3                       ; """ Commonly used like `assembler-wordlist >order` to add the
000900r 3                       ; assembler words to the search order so they can be used.
000900r 3                       ; See the tutorial on Wordlists and the Search Order for
000900r 3                       ; more information.
000900r 3                       ;
000900r 3                       ; This is a dummy entry, the code is shared with TWO
000900r 3                       ; """
000900r 3               
000900r 3               
000900r 3               ; ## AT_XY ( n m -- ) "Move cursor to position given"
000900r 3               ; ## "at-xy"  tested  ANS facility
000900r 3                       ; """https://forth-standard.org/standard/facility/AT-XY
000900r 3                       ; On an ANSI compatible terminal, place cursor at row n colum m.
000900r 3                       ; ANSI code is ESC[<n>;<m>H
000900r 3                       ;
000900r 3                       ; Do not use U. to print the numbers because the
000900r 3                       ; trailing space will not work with xterm
000900r 3                       ; """
000900r 3               xt_at_xy:
000900r 3  20 rr rr                     jsr underflow_2
000903r 3               
000903r 3  A9 1B                        lda #AscESC
000905r 3  20 rr rr                     jsr emit_a
000908r 3  A9 5B                        lda #$5B        ; ASCII for "["
00090Ar 3  20 rr rr                     jsr emit_a
00090Dr 3  20 rr rr                     jsr print_u
000910r 3  A9 3B                        lda #$3B        ; ASCII for ";"
000912r 3  20 rr rr                     jsr emit_a
000915r 3  20 rr rr                     jsr print_u
000918r 3  A9 48                        lda #'H'
00091Ar 3  20 rr rr                     jsr emit_a
00091Dr 3               
00091Dr 3  60           z_at_xy:        rts
00091Er 3               
00091Er 3               
00091Er 3               ; ## BACKSLASH ( -- ) "Ignore rest of line"
00091Er 3               ; ## "\"  auto  ANS core ext
00091Er 3                       ; """https://forth-standard.org/standard/core/bs"""
00091Er 3               xt_backslash:
00091Er 3  A5 rr                        lda ciblen
000920r 3  85 rr                        sta toin
000922r 3  A5 rr                        lda ciblen+1
000924r 3  85 rr                        sta toin+1
000926r 3               
000926r 3  60           z_backslash:    rts
000927r 3               
000927r 3               
000927r 3               ; ## BASE ( -- addr ) "Push address of radix base to stack"
000927r 3               ; ## "base"  auto  ANS core
000927r 3                       ; """https://forth-standard.org/standard/core/BASE
000927r 3                       ; The ANS Forth standard sees the base up to 36, so we can cheat and
000927r 3                       ; ingore the MSB
000927r 3                       ; """
000927r 3               xt_base:
000927r 3  CA                           dex
000928r 3  CA                           dex
000929r 3  A9 rr                        lda #<base
00092Br 3  95 00                        sta 0,x         ; LSB
00092Dr 3  74 01                        stz 1,x         ; MSB is always 0
00092Fr 3               
00092Fr 3  60           z_base:         rts
000930r 3               
000930r 3               
000930r 3               ; ## BEGIN ( -- addr ) "Mark entry point for loop"
000930r 3               ; ## "begin"  auto  ANS core
000930r 3                       ; """https://forth-standard.org/standard/core/BEGIN
000930r 3                       ;
000930r 3                       ; This is just an immediate version of here which could just
000930r 3                       ; as well be coded in Forth as
000930r 3                       ;       : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
000930r 3                       ; Since this is a compiling word, we don't care that much about
000930r 3                       ; about speed
000930r 3                       ; """
000930r 3               
000930r 3               xt_begin:
000930r 3  20 rr rr                     jsr xt_here
000933r 3  60           z_begin:        rts
000934r 3               
000934r 3               
000934r 3               
000934r 3               ; ## BELL ( -- ) "Emit ASCII BELL"
000934r 3               ; ## "bell"  tested  Tali Forth
000934r 3               xt_bell:
000934r 3  A9 07                        lda #7          ; ASCII value for BELl
000936r 3  20 rr rr                     jsr emit_a
000939r 3               
000939r 3  60           z_bell:         rts
00093Ar 3               
00093Ar 3               
00093Ar 3               ; ## BL ( -- c ) "Push ASCII value of SPACE to stack"
00093Ar 3               ; ## "bl"  auto  ANS core
00093Ar 3                       ; """https://forth-standard.org/standard/core/BL"""
00093Ar 3               
00093Ar 3               xt_bl:
00093Ar 3  CA                           dex
00093Br 3  CA                           dex
00093Cr 3  A9 20                        lda #AscSP
00093Er 3  95 00                        sta 0,x
000940r 3  74 01                        stz 1,x
000942r 3               
000942r 3  60           z_bl:           rts
000943r 3               
000943r 3               
000943r 3               ; ## BLK ( -- addr ) "Push address of block being interpreted"
000943r 3               ; ## "block"  auto  ANS block
000943r 3                       ; """https://forth-standard.org/standard/block/BLK"""
000943r 3               xt_blk:
000943r 3                               ; BLK is at UP + blk_offset
000943r 3  CA                           dex
000944r 3  CA                           dex
000945r 3  18                           clc
000946r 3  A5 rr                        lda up
000948r 3  69 00                        adc #blk_offset ; Add offset
00094Ar 3  95 00                        sta 0,x
00094Cr 3  A5 rr                        lda up+1
00094Er 3  69 00                        adc #0          ; Adding carry
000950r 3  95 01                        sta 1,x
000952r 3               
000952r 3  60           z_blk:          rts
000953r 3               
000953r 3               
000953r 3               ; ## BLKBUFFER ( -- addr ) "Push address of block buffer"
000953r 3               ; ## "blkbuffer"  auto  Tali block
000953r 3               xt_blkbuffer:
000953r 3                               ; blkbuffer address is at UP + blkbuffer_offset.
000953r 3                               ; Unlike some of the other user variables, we actually
000953r 3                               ; want to push the address stored here, which will
000953r 3                               ; point to somewhere outside of the user variables.
000953r 3  CA                           dex
000954r 3  CA                           dex
000955r 3                               ; Put the address on the stack.
000955r 3  A0 28                        ldy #blkbuffer_offset
000957r 3  B1 rr                        lda (up),y
000959r 3  95 00                        sta 0,x
00095Br 3  C8                           iny             ; Move along to the next byte
00095Cr 3  B1 rr                        lda (up),y
00095Er 3  95 01                        sta 1,x
000960r 3               
000960r 3  60           z_blkbuffer:    rts
000961r 3               
000961r 3               
000961r 3               ; ## BLOCK ( u -- a-addr ) "Fetch a block into a buffer"
000961r 3               ; ## "block"  auto  ANS block
000961r 3                       ; """https://forth-standard.org/standard/block/BLOCK"""
000961r 3               
000961r 3               xt_block:
000961r 3               
000961r 3                               ; See if the block requested is the same as the one we
000961r 3                               ; currently have in the buffer. Check the LSB.
000961r 3  A0 2A                        ldy #buffblocknum_offset
000963r 3  B1 rr                        lda (up),y
000965r 3  D5 00                        cmp 0,x
000967r 3  D0 0F                        bne @not_in_buffer
000969r 3               
000969r 3                               ; Check the MSB.
000969r 3  C8                           iny
00096Ar 3  B1 rr                        lda (up),y
00096Cr 3  D5 01                        cmp 1,x
00096Er 3  D0 08                        bne @not_in_buffer
000970r 3               
000970r 3                               ; The block is in the buffer. See if the buffer is in use.
000970r 3  A0 2C                        ldy #buffstatus_offset
000972r 3  B1 rr                        lda (up),y
000974r 3  29 01                        and #1          ; Check the in-use flag (bit 0)
000976r 3  D0 30                        bne @done       ; It's already in the buffer and in use.
000978r 3                                               ; @done will replace the block# with the
000978r 3                                               ; buffer address.
000978r 3               @not_in_buffer:
000978r 3                               ; Check the buffer status
000978r 3  A0 2C                        ldy #buffstatus_offset
00097Ar 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
00097Cr 3  C9 03                        cmp #3          ; LSB is needed.
00097Er 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
000980r 3               
000980r 3                               ; We need to save the block.
000980r 3  20 rr rr                     jsr xt_blkbuffer
000983r 3  20 rr rr                     jsr xt_buffblocknum
000986r 3  20 rr rr                     jsr xt_fetch
000989r 3  20 rr rr                     jsr xt_block_write
00098Cr 3               
00098Cr 3               @buffer_available:
00098Cr 3                               ; Save the block number.
00098Cr 3  A0 2A                        ldy #buffblocknum_offset
00098Er 3  B5 00                        lda 0,x
000990r 3  91 rr                        sta (up),y
000992r 3  C8                           iny
000993r 3  B5 01                        lda 1,x
000995r 3  91 rr                        sta (up),y
000997r 3               
000997r 3                               ; Get the requested block.
000997r 3  20 rr rr                     jsr xt_blkbuffer
00099Ar 3  20 rr rr                     jsr xt_swap
00099Dr 3  20 rr rr                     jsr xt_block_read
0009A0r 3               
0009A0r 3                               ; Mark the buffer as clean and in-use.
0009A0r 3  A9 01                        lda #1
0009A2r 3  A0 2C                        ldy #buffstatus_offset
0009A4r 3  91 rr                        sta (up),y
0009A6r 3               
0009A6r 3                               ; Make room on the stack for the return address.
0009A6r 3  CA                           dex
0009A7r 3  CA                           dex
0009A8r 3               
0009A8r 3               @done:
0009A8r 3                               ; It's in the buffer. Return the buffer address.
0009A8r 3  A0 28                        ldy #blkbuffer_offset
0009AAr 3  B1 rr                        lda (up),y
0009ACr 3  95 00                        sta 0,x
0009AEr 3  C8                           iny
0009AFr 3  B1 rr                        lda (up),y
0009B1r 3  95 01                        sta 1,x
0009B3r 3               
0009B3r 3  60           z_block:        rts
0009B4r 3               
0009B4r 3               
0009B4r 3               
0009B4r 3               ; ## BLOCK_RAMDRIVE_INIT ( u -- ) "Create a ramdrive for blocks"
0009B4r 3               ; ## "block-ramdrive-init"  auto  Tali block
0009B4r 3                       ; """Create a RAM drive, with the given number of
0009B4r 3                       ; blocks, in the dictionary along with setting up the block words to
0009B4r 3                       ; use it.  The read/write routines do not provide bounds checking.
0009B4r 3                       ; Expected use: `4 block-ramdrive-init` ( to create blocks 0-3 )
0009B4r 3                       ; """
0009B4r 3               
0009B4r 3               xt_block_ramdrive_init:
0009B4r 3  20 rr rr                     jsr underflow_1
0009B7r 3               
0009B7r 3                               ; Store the string to run here as a string literal.
0009B7r 3                               ; See SLITERAL for the format information. This way, we
0009B7r 3                               ; don't have the words defined below in the Dictionary until
0009B7r 3                               ; we really use them.
0009B7r 3  4C rr rr                     jmp @after_ramdrive_code
0009BAr 3               
0009BAr 3               @ramdrive_code:
0009BAr 3  62 61 73 65          .byte "base @ swap decimal"
0009BEr 3  20 40 20 73  
0009C2r 3  77 61 70 20  
0009CDr 3  20 31 30 32          .byte " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
0009D1r 3  34 20 2A     
0009D4r 3  20 64 75 70          .byte " dup"    ; ( Save a copy for formatting it at the end )
0009D8r 3  20 62 75 66          .byte " buffer: ramdrive" ; ( Create ramdrive )
0009DCr 3  66 65 72 3A  
0009E0r 3  20 72 61 6D  
0009E9r 3                       ; ( These routines just copy between the buffer and the ramdrive blocks )
0009E9r 3  20 3A 20 62          .byte " : block-read-ramdrive"  ; ( addr u -- )
0009EDr 3  6C 6F 63 6B  
0009F1r 3  2D 72 65 61  
0009FFr 3  20 72 61 6D          .byte " ramdrive swap 1024 * + swap 1024 move ;"
000A03r 3  64 72 69 76  
000A07r 3  65 20 73 77  
000A27r 3  20 3A 20 62          .byte " : block-write-ramdrive" ; ( addr u -- )
000A2Br 3  6C 6F 63 6B  
000A2Fr 3  2D 77 72 69  
000A3Er 3  20 72 61 6D          .byte " ramdrive swap 1024 * + 1024 move ;"
000A42r 3  64 72 69 76  
000A46r 3  65 20 73 77  
000A61r 3  20 27 20 62          .byte " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
000A65r 3  6C 6F 63 6B  
000A69r 3  2D 72 65 61  
000A8Br 3  20 27 20 62          .byte " ' block-write-ramdrive block-write-vector !"
000A8Fr 3  6C 6F 63 6B  
000A93r 3  2D 77 72 69  
000AB7r 3  20 72 61 6D          .byte " ramdrive swap blank base !"
000ABBr 3  64 72 69 76  
000ABFr 3  65 20 73 77  
000AD2r 3               
000AD2r 3               @after_ramdrive_code:
000AD2r 3  20 rr rr                     jsr sliteral_runtime
000AD5r 3               
000AD5r 3  rr rr 18 01  .word @ramdrive_code, @after_ramdrive_code-@ramdrive_code
000AD9r 3               
000AD9r 3                               ; The address and length of the ramdrive code is now on the
000AD9r 3                               ; stack. Call EVALUATE to run it.
000AD9r 3  20 rr rr                     jsr xt_evaluate
000ADCr 3               
000ADCr 3               z_block_ramdrive_init:
000ADCr 3  60                           rts
000ADDr 3               
000ADDr 3               
000ADDr 3               
000ADDr 3               ; ## BLOCK_READ ( addr u -- ) "Read a block from storage (deferred word)"
000ADDr 3               ; ## "block-read"  auto  Tali block
000ADDr 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000ADDr 3                       ; with their own version to read a block from storage.
000ADDr 3                       ; The stack parameters are ( buffer_address block# -- ).
000ADDr 3                       ; """
000ADDr 3               xt_block_read:
000ADDr 3                               ; Execute the BLOCK-READ-VECTOR
000ADDr 3  A0 2E                        ldy #blockread_offset
000ADFr 3  B1 rr                        lda (up),y
000AE1r 3  85 rr                        sta tmp1
000AE3r 3  C8                           iny
000AE4r 3  B1 rr                        lda (up),y
000AE6r 3  85 rr                        sta tmp1+1
000AE8r 3               
000AE8r 3  6C rr rr                     jmp (tmp1)
000AEBr 3               
000AEBr 3               z_block_read:   ; No RTS needed
000AEBr 3               
000AEBr 3               
000AEBr 3               ; ## BLOCK_READ_VECTOR ( -- addr ) "Address of the block-read vector"
000AEBr 3               ; ## "block-read-vector"  auto  Tali block
000AEBr 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000AEBr 3                       ; with their own version to read a block from storage.
000AEBr 3                       ; This word gives the address of the vector so it can be replaced.
000AEBr 3                       ; """
000AEBr 3               xt_block_read_vector:
000AEBr 3                               ; Get the BLOCK-READ-VECTOR address
000AEBr 3  CA                           dex
000AECr 3  CA                           dex
000AEDr 3  18                           clc
000AEEr 3  A5 rr                        lda up
000AF0r 3  69 2E                        adc #blockread_offset
000AF2r 3  95 00                        sta 0,x
000AF4r 3  A5 rr                        lda up+1
000AF6r 3  69 00                        adc #0          ; Add carry
000AF8r 3  95 01                        sta 1,x
000AFAr 3               
000AFAr 3               z_block_read_vector:
000AFAr 3  60                           rts
000AFBr 3               
000AFBr 3               
000AFBr 3               ; This is the default error message the vectored words BLOCK-READ and
000AFBr 3               ; BLOCK-WRITE start with. This word is not included in the dictionary.
000AFBr 3               xt_block_word_error:
000AFBr 3  A9 0C                        lda #err_blockwords
000AFDr 3  4C rr rr                     jmp error       ; no RTS needed
000B00r 3               z_block_word_error:
000B00r 3               
000B00r 3               ; ## BLOCK_WRITE ( addr u -- ) "Write a block to storage (deferred word)"
000B00r 3               ; ## "block-write"  auto  Tali block
000B00r 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000B00r 3                       ; with their own version to write a block to storage.
000B00r 3                       ; The stack parameters are ( buffer_address block# -- ).
000B00r 3                       ; """
000B00r 3               xt_block_write:
000B00r 3                               ; Execute the BLOCK-READ-VECTOR
000B00r 3  A0 30                        ldy #blockwrite_offset
000B02r 3  B1 rr                        lda (up),y
000B04r 3  85 rr                        sta tmp1
000B06r 3  C8                           iny
000B07r 3  B1 rr                        lda (up),y
000B09r 3  85 rr                        sta tmp1+1
000B0Br 3  6C rr rr                     jmp (tmp1)
000B0Er 3               
000B0Er 3               z_block_write:  ; No RTS needed
000B0Er 3               
000B0Er 3               
000B0Er 3               ; ## BLOCK_WRITE_VECTOR ( -- addr ) "Address of the block-write vector"
000B0Er 3               ; ## "block-write-vector"  auto  Tali block
000B0Er 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000B0Er 3                       ; with their own version to write a block to storage.
000B0Er 3                       ; This word gives the address of the vector so it can be replaced.
000B0Er 3                       ; """
000B0Er 3               xt_block_write_vector:
000B0Er 3                               ; Get the BLOCK-WRITE-VECTOR address
000B0Er 3  CA                           dex
000B0Fr 3  CA                           dex
000B10r 3  18                           clc
000B11r 3  A5 rr                        lda up
000B13r 3  69 30                        adc #blockwrite_offset
000B15r 3  95 00                        sta 0,x
000B17r 3  A5 rr                        lda up+1
000B19r 3  69 00                        adc #0          ; Add carry
000B1Br 3  95 01                        sta 1,x
000B1Dr 3               
000B1Dr 3               z_block_write_vector:
000B1Dr 3  60                           rts
000B1Er 3               
000B1Er 3               
000B1Er 3               ; ## BOUNDS ( addr u -- addr+u addr ) "Prepare address for looping"
000B1Er 3               ; ## "bounds"  auto  Gforth
000B1Er 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Memory-Blocks.html
000B1Er 3                       ; Given a string, return the correct Data Stack parameters for
000B1Er 3                       ; a DO/LOOP loop over its characters. This is realized as
000B1Er 3                       ; OVER + SWAP in Forth, but we do it a lot faster in assembler
000B1Er 3                       ; """
000B1Er 3               xt_bounds:
000B1Er 3  20 rr rr                     jsr underflow_2
000B21r 3               
000B21r 3  18                           clc
000B22r 3  B5 00                        lda 0,x                 ; LSB u
000B24r 3  B4 02                        ldy 2,x                 ; LSB addr
000B26r 3  75 02                        adc 2,x
000B28r 3  95 02                        sta 2,x                 ; LSB addr+u
000B2Ar 3  94 00                        sty 0,x
000B2Cr 3               
000B2Cr 3  B5 01                        lda 1,x                 ; MSB u
000B2Er 3  B4 03                        ldy 3,x                 ; MSB addr
000B30r 3  75 03                        adc 3,x
000B32r 3  95 03                        sta 3,x                 ; MSB addr+u
000B34r 3  94 01                        sty 1,x
000B36r 3               
000B36r 3  60           z_bounds:       rts
000B37r 3               
000B37r 3               
000B37r 3               ; ## BRACKET_CHAR ( "c" -- ) "Compile character"
000B37r 3               ; ## "[char]"  auto  ANS core
000B37r 3                       ; """https://forth-standard.org/standard/core/BracketCHAR
000B37r 3                       ; Compile the ASCII value of a character as a literal. This is an
000B37r 3                       ; immediate, compile-only word.
000B37r 3                       ;
000B37r 3                       ; A definition given in
000B37r 3                       ; http://forth-standard.org/standard/implement is
000B37r 3                       ; : [CHAR]  CHAR POSTPONE LITERAL ; IMMEDIATE
000B37r 3                       ; """
000B37r 3               xt_bracket_char:
000B37r 3  20 rr rr                     jsr xt_char
000B3Ar 3  20 rr rr                     jsr xt_literal
000B3Dr 3  60           z_bracket_char: rts
000B3Er 3               
000B3Er 3               
000B3Er 3               ; ## BRACKET_TICK ( -- ) "Store xt of following word during compilation"
000B3Er 3               ; ## "[']"  auto  ANS core
000B3Er 3                       ; """https://forth-standard.org/standard/core/BracketTick"""
000B3Er 3               xt_bracket_tick:
000B3Er 3  20 rr rr                     jsr xt_tick
000B41r 3  20 rr rr                     jsr xt_literal
000B44r 3  60           z_bracket_tick: rts
000B45r 3               
000B45r 3               
000B45r 3               ; ## BUFFBLOCKNUM ( -- addr ) "Push address of variable holding block in buffer"
000B45r 3               ; ## "buffblocknum"  auto  Tali block
000B45r 3               xt_buffblocknum:
000B45r 3                               ; BUFFBLOCKNUM is at UP + buffblocknum_offset
000B45r 3  CA                           dex
000B46r 3  CA                           dex
000B47r 3  18                           clc
000B48r 3  A5 rr                        lda up
000B4Ar 3  69 2A                        adc #buffblocknum_offset        ; Add offset
000B4Cr 3  95 00                        sta 0,x
000B4Er 3  A5 rr                        lda up+1
000B50r 3  69 00                        adc #0                          ; Adding carry
000B52r 3  95 01                        sta 1,x
000B54r 3               
000B54r 3  60           z_buffblocknum: rts
000B55r 3               
000B55r 3               
000B55r 3               ; ## BUFFER ( u -- a-addr ) "Get a buffer for a block"
000B55r 3               ; ## "buffer"  auto  ANS block
000B55r 3                       ; """https://forth-standard.org/standard/block/BUFFER"""
000B55r 3               
000B55r 3               xt_buffer:
000B55r 3                               ; Check the buffer status
000B55r 3  A0 2C                        ldy #buffstatus_offset
000B57r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
000B59r 3  C9 03                        cmp #3          ; LSB is needed.
000B5Br 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
000B5Dr 3               
000B5Dr 3                               ; We need to save the block.
000B5Dr 3  20 rr rr                     jsr xt_blkbuffer
000B60r 3  20 rr rr                     jsr xt_buffblocknum
000B63r 3  20 rr rr                     jsr xt_fetch
000B66r 3  20 rr rr                     jsr xt_block_write
000B69r 3               
000B69r 3               @buffer_available:
000B69r 3                               ; Save the block number.
000B69r 3  A0 2A                        ldy #buffblocknum_offset
000B6Br 3  B5 00                        lda 0,x
000B6Dr 3  91 rr                        sta (up),y
000B6Fr 3  C8                           iny
000B70r 3  B5 01                        lda 1,x
000B72r 3  91 rr                        sta (up),y
000B74r 3               
000B74r 3                               ; Mark the buffer as clean and in-use.
000B74r 3  A9 01                        lda #1
000B76r 3  A0 2C                        ldy #buffstatus_offset
000B78r 3  91 rr                        sta (up),y
000B7Ar 3               
000B7Ar 3               @done:
000B7Ar 3                               ; Return the buffer address.
000B7Ar 3  A0 28                        ldy #blkbuffer_offset
000B7Cr 3  B1 rr                        lda (up),y
000B7Er 3  95 00                        sta 0,x
000B80r 3  C8                           iny
000B81r 3  B1 rr                        lda (up),y
000B83r 3  95 01                        sta 1,x
000B85r 3               
000B85r 3  60           z_buffer:       rts
000B86r 3               
000B86r 3               
000B86r 3               
000B86r 3               ; ## BUFFER_COLON ( u "<name>" -- ; -- addr ) "Create an uninitialized buffer"
000B86r 3               ; ## "buffer:"  auto  ANS core ext
000B86r 3                               ; """https://forth-standard.org/standard/core/BUFFERColon
000B86r 3                               ; Create a buffer of size u that puts its address on the stack
000B86r 3                               ; when its name is used.
000B86r 3                               ; """
000B86r 3               xt_buffer_colon:
000B86r 3  20 rr rr                     jsr xt_create
000B89r 3  20 rr rr                     jsr xt_allot
000B8Cr 3  60           z_buffer_colon: rts
000B8Dr 3               
000B8Dr 3               
000B8Dr 3               ; ## BUFFSTATUS ( -- addr ) "Push address of variable holding buffer status"
000B8Dr 3               ; ## "buffstatus"  auto  Tali block
000B8Dr 3               xt_buffstatus:
000B8Dr 3                               ; BUFFSTATUS is at UP + buffstatus_offset
000B8Dr 3  CA                           dex
000B8Er 3  CA                           dex
000B8Fr 3  18                           clc
000B90r 3  A5 rr                        lda up
000B92r 3  69 2C                        adc #buffstatus_offset  ; Add offset
000B94r 3  95 00                        sta 0,x
000B96r 3  A5 rr                        lda up+1
000B98r 3  69 00                        adc #0                  ; Adding carry
000B9Ar 3  95 01                        sta 1,x
000B9Cr 3               
000B9Cr 3  60           z_buffstatus:   rts
000B9Dr 3               
000B9Dr 3               
000B9Dr 3               ; ## BYE ( -- ) "Break"
000B9Dr 3               ; ## "bye"  tested  ANS tools ext
000B9Dr 3                       ; """https://forth-standard.org/standard/tools/BYE"""
000B9Dr 3               
000B9Dr 3               xt_bye:
000B9Dr 3                               ;brk
000B9Dr 3  4C rr rr                     jmp platform_bye
000BA0r 3               z_bye:          ;rts             ; never reached
000BA0r 3               
000BA0r 3               
000BA0r 3               
000BA0r 3               ; ## C_COMMA ( c -- ) "Store one byte/char in the Dictionary"
000BA0r 3               ; ## "c,"  auto  ANS core
000BA0r 3                       ; """https://forth-standard.org/standard/core/CComma"""
000BA0r 3               
000BA0r 3               xt_c_comma:
000BA0r 3  20 rr rr                     jsr underflow_1
000BA3r 3               
000BA3r 3  B5 00                        lda 0,x
000BA5r 3  20 rr rr                     jsr cmpl_a
000BA8r 3               
000BA8r 3  E8                           inx
000BA9r 3  E8                           inx
000BAAr 3               
000BAAr 3  60           z_c_comma:      rts
000BABr 3               
000BABr 3               
000BABr 3               
000BABr 3               ; ## C_FETCH ( addr -- c ) "Get a character/byte from given address"
000BABr 3               ; ## "c@"  auto  ANS core
000BABr 3                       ; """https://forth-standard.org/standard/core/CFetch"""
000BABr 3               xt_c_fetch:
000BABr 3  20 rr rr                     jsr underflow_1
000BAEr 3               
000BAEr 3  A1 00                        lda (0,x)
000BB0r 3  95 00                        sta 0,x
000BB2r 3  74 01                        stz 1,x         ; Ignore LSB
000BB4r 3               
000BB4r 3  60           z_c_fetch:      rts
000BB5r 3               
000BB5r 3               
000BB5r 3               ; ## C_STORE ( c addr -- ) "Store character at address given"
000BB5r 3               ; ## "c!"  auto  ANS core
000BB5r 3                       ; """https://forth-standard.org/standard/core/CStore"""
000BB5r 3               xt_c_store:
000BB5r 3  20 rr rr                     jsr underflow_2
000BB8r 3               
000BB8r 3  B5 02                        lda 2,x
000BBAr 3  81 00                        sta (0,x)
000BBCr 3               
000BBCr 3  E8                           inx
000BBDr 3  E8                           inx
000BBEr 3  E8                           inx
000BBFr 3  E8                           inx
000BC0r 3               
000BC0r 3  60           z_c_store:      rts
000BC1r 3               
000BC1r 3               
000BC1r 3               ; ## CASE (C: -- 0) ( -- ) "Conditional flow control"
000BC1r 3               ; ## "case"  auto  ANS core ext
000BC1r 3                       ; """http://forth-standard.org/standard/core/CASE
000BC1r 3                       ;
000BC1r 3                       ; This is a dummy header, CASE shares the actual code with ZERO.
000BC1r 3                       ; """
000BC1r 3               
000BC1r 3               
000BC1r 3               ; ## CELL_PLUS ( u -- u ) "Add cell size in bytes"
000BC1r 3               ; ## "cell+"  auto  ANS core
000BC1r 3                       ; """https://forth-standard.org/standard/core/CELLPlus
000BC1r 3                       ; Add the number of bytes ("address units") that one cell needs.
000BC1r 3                       ; Since this is an 8 bit machine with 16 bit cells, we add two bytes.
000BC1r 3                       ; """
000BC1r 3               
000BC1r 3               xt_cell_plus:
000BC1r 3  20 rr rr                     jsr underflow_1
000BC4r 3               
000BC4r 3  F6 00                        inc 0,x
000BC6r 3  D0 02                        bne @1
000BC8r 3  F6 01                        inc 1,x
000BCAr 3               @1:
000BCAr 3  F6 00                        inc 0,x
000BCCr 3  D0 02                        bne @done
000BCEr 3  F6 01                        inc 1,x
000BD0r 3               @done:
000BD0r 3  60           z_cell_plus:    rts
000BD1r 3               
000BD1r 3               
000BD1r 3               
000BD1r 3               ; ## CELLS ( u -- u ) "Convert cells to size in bytes"
000BD1r 3               ; ## "cells"  auto  ANS core
000BD1r 3                       ; """https://forth-standard.org/standard/core/CELLS
000BD1r 3                       ;
000BD1r 3                       ; Dummy entry for the CELLS word, the code is the same as for
000BD1r 3                       ; 2*, which is where the header directs us to
000BD1r 3                       ; """
000BD1r 3               
000BD1r 3               
000BD1r 3               ; ## CHAR ( "c" -- u ) "Convert character to ASCII value"
000BD1r 3               ; ## "char"  auto  ANS core
000BD1r 3                       ; """https://forth-standard.org/standard/core/CHAR"""
000BD1r 3               
000BD1r 3               xt_char:
000BD1r 3                               ; get character from string, returns ( addr u )
000BD1r 3  20 rr rr                     jsr xt_parse_name
000BD4r 3               
000BD4r 3                               ; if we got back a zero, we have a problem
000BD4r 3  B5 00                        lda 0,x
000BD6r 3  15 01                        ora 1,x
000BD8r 3  D0 05                        bne @not_empty
000BDAr 3               
000BDAr 3  A9 05                        lda #err_noname
000BDCr 3  4C rr rr                     jmp error
000BDFr 3               
000BDFr 3               @not_empty:
000BDFr 3  E8                           inx             ; drop number of characters, leave addr
000BE0r 3  E8                           inx
000BE1r 3  A1 00                        lda (0,x)       ; get character (equivalent to C@)
000BE3r 3  95 00                        sta 0,x
000BE5r 3  74 01                        stz 1,x         ; MSB is always zero
000BE7r 3               
000BE7r 3  60           z_char:         rts
000BE8r 3               
000BE8r 3               
000BE8r 3               
000BE8r 3               ; ## CHAR_PLUS ( addr -- addr+1 ) "Add the size of a character unit to address"
000BE8r 3               ; ## "char+"  auto  ANS core
000BE8r 3                       ; """https://forth-standard.org/standard/core/CHARPlus
000BE8r 3                       ;
000BE8r 3                       ; This is a dummy entry, the code is shared with ONE_PLUS
000BE8r 3                       ; """
000BE8r 3               
000BE8r 3               
000BE8r 3               ; ## CHARS ( n -- n ) "Number of bytes that n chars need"
000BE8r 3               ; ## "chars"  auto  ANS core
000BE8r 3                       ; """https://forth-standard.org/standard/core/CHARS
000BE8r 3                       ; Return how many address units n chars are. Since this is an 8 bit
000BE8r 3                       ; machine, this does absolutely nothing and is included for
000BE8r 3                       ; compatibility with other Forth versions
000BE8r 3                       ; """
000BE8r 3               
000BE8r 3               xt_chars:
000BE8r 3                               ; Checking for underflow seems a bit stupid because this
000BE8r 3                               ; routine does nothing on this machine. However, the user
000BE8r 3                               ; should be warned that there is something wrong with the
000BE8r 3                               ; code if this occurs.
000BE8r 3  20 rr rr                     jsr underflow_1
000BEBr 3               
000BEBr 3  60           z_chars:        rts
000BECr 3               
000BECr 3               
000BECr 3               ; ## CLEAVE ( addr u -- addr2 u2 addr1 u1 ) "Split off word from string"
000BECr 3               ; ## "cleave"  auto  Tali Forth
000BECr 3               
000BECr 3                       ; """Given a range of memory with words delimited by whitespace,return
000BECr 3                       ; the first word at the top of the stack and the rest of the word
000BECr 3                       ; following it.
000BECr 3                       ;
000BECr 3                       ; Example:
000BECr 3                       ; s" w1 w2 w3" cleave  -> "w2 w3" "w1"
000BECr 3                       ; s" w1" cleave        -> "" "w1"
000BECr 3                       ;
000BECr 3                       ; Since it will be used in loops a lot, we want it to work in pure
000BECr 3                       ; assembler and be as fast as we can make it. Calls PARSE-NAME so we
000BECr 3                       ; strip leading delimiters.
000BECr 3                       ; """
000BECr 3               
000BECr 3               xt_cleave:
000BECr 3  20 rr rr                     jsr underflow_2
000BEFr 3               
000BEFr 3                               ; We arrive here with ( addr u ). We need to strip any leading
000BEFr 3                               ; spaces by hand: PARSE-NAME does do that, but it doesn't
000BEFr 3                               ; remember how many spaces were stripped. This means we can't
000BEFr 3                               ; calculate the length of the remainder. Fortunately, Tali
000BEFr 3                               ; Forth has just the word we need for this:
000BEFr 3  20 rr rr                     jsr xt_minus_leading    ; -LEADING ( addr u )
000BF2r 3               
000BF2r 3                               ; The main part we can turn over to PARSE-NAME, except that we
000BF2r 3                               ; have a string ( addr u ) and not stuff in the input buffer.
000BF2r 3                               ; We get around this by cheating: We place ( addr u ) in the
000BF2r 3                               ; input buffer and then call PARSE-NAME.
000BF2r 3  20 rr rr                     jsr xt_input_to_r       ; save old imput state
000BF5r 3               
000BF5r 3  B5 00                        lda 0,x         ; u is new ciblen
000BF7r 3  85 rr                        sta ciblen
000BF9r 3  B5 01                        lda 1,x
000BFBr 3  85 rr                        sta ciblen+1
000BFDr 3               
000BFDr 3  B5 02                        lda 2,x         ; addr is new cib
000BFFr 3  85 rr                        sta cib
000C01r 3  B5 03                        lda 3,x
000C03r 3  85 rr                        sta cib+1
000C05r 3               
000C05r 3  64 rr                        stz toin        ; >IN pointer is zero
000C07r 3  64 rr                        stz toin+1
000C09r 3               
000C09r 3                               ; PARSE-NAME gives us back the substring of the first word
000C09r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u addr-s u-s )
000C0Cr 3               
000C0Cr 3                               ; If we were given an empty string, then we're done. It's the
000C0Cr 3                               ; resposibility of the user to catch this as a sign to end the
000C0Cr 3                               ; any loop
000C0Cr 3  B5 00                        lda 0,x
000C0Er 3  15 01                        ora 1,x
000C10r 3  F0 23                        beq @done
000C12r 3               
000C12r 3                               ; Now we have to adjust the original string
000C12r 3  B5 04                        lda 4,x         ; LSB of original u
000C14r 3  38                           sec
000C15r 3  F5 00                        sbc 0,x
000C17r 3  95 04                        sta 4,x
000C19r 3               
000C19r 3  B5 05                        lda 5,x         ; MSB of original u
000C1Br 3  F5 01                        sbc 1,x
000C1Dr 3  95 05                        sta 5,x
000C1Fr 3               
000C1Fr 3  B5 06                        lda 6,x         ; LSB of original addr
000C21r 3  18                           clc
000C22r 3  75 00                        adc 0,x
000C24r 3  95 06                        sta 6,x
000C26r 3               
000C26r 3  B5 07                        lda 7,x         ; MSB of original addr
000C28r 3  75 01                        adc 1,x
000C2Ar 3  95 07                        sta 7,x
000C2Cr 3               
000C2Cr 3                               ; There is one small problem: PARSE-NAME will probably have
000C2Cr 3                               ; left the string with the rest of the words with leading
000C2Cr 3                               ; delimiters. We use our magic -LEADING again
000C2Cr 3  20 rr rr                     jsr xt_two_swap         ; ( addr-s u-s addr u )
000C2Fr 3  20 rr rr                     jsr xt_minus_leading
000C32r 3  20 rr rr                     jsr xt_two_swap         ; ( addr u addr-s u-s )
000C35r 3               @done:
000C35r 3                               ; Restore input
000C35r 3  20 rr rr                     jsr xt_r_to_input
000C38r 3               
000C38r 3  60           z_cleave:       rts
000C39r 3               
000C39r 3               
000C39r 3               
000C39r 3               ; ## CMOVE ( addr1 addr2 u -- ) "Copy bytes going from low to high"
000C39r 3               ; ## "cmove"  auto  ANS string
000C39r 3                       ; """https://forth-standard.org/standard/string/CMOVE
000C39r 3                       ; Copy u bytes from addr1 to addr2, going low to high (addr2 is
000C39r 3                       ; larger than addr1). Based on code in Leventhal, Lance A.
000C39r 3                       ; "6502 Assembly Language Routines", p. 201, where it is called
000C39r 3                       ; "move left".
000C39r 3                       ;
000C39r 3                       ; There are no official tests for this word.
000C39r 3                       ; """
000C39r 3               
000C39r 3               xt_cmove:
000C39r 3  20 rr rr                     jsr underflow_3
000C3Cr 3               
000C3Cr 3                               ; move destination address to where we can work with it
000C3Cr 3  B5 02                        lda 2,x
000C3Er 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000C40r 3  B5 03                        lda 3,x
000C42r 3  85 rr                        sta tmp2+1
000C44r 3               
000C44r 3                               ; move source address to where we can work with it
000C44r 3  B5 04                        lda 4,x
000C46r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000C48r 3  B5 05                        lda 5,x
000C4Ar 3  85 rr                        sta tmp1+1
000C4Cr 3               
000C4Cr 3  A0 00                        ldy #0
000C4Er 3  B5 01                        lda 1,x         ; number of whole pages to move
000C50r 3  F0 0F                        beq @dopartial
000C52r 3               
000C52r 3               @page:
000C52r 3  B1 rr                        lda (tmp1),y
000C54r 3  91 rr                        sta (tmp2),y
000C56r 3  C8                           iny
000C57r 3  D0 F9                        bne @page
000C59r 3               
000C59r 3  E6 rr                        inc tmp1+1
000C5Br 3  E6 rr                        inc tmp2+1
000C5Dr 3  D6 01                        dec 1,x
000C5Fr 3  D0 F1                        bne @page
000C61r 3               
000C61r 3               @dopartial:
000C61r 3  B5 00                        lda 0,x         ; length of last page
000C63r 3  F0 09                        beq @done
000C65r 3               
000C65r 3               @partial:
000C65r 3  B1 rr                        lda (tmp1),y
000C67r 3  91 rr                        sta (tmp2),y
000C69r 3  C8                           iny
000C6Ar 3               
000C6Ar 3  D6 00                        dec 0,x
000C6Cr 3  D0 F7                        bne @partial
000C6Er 3               
000C6Er 3               @done:          ; clear the stack
000C6Er 3  8A                           txa
000C6Fr 3  18                           clc
000C70r 3  69 06                        adc #6
000C72r 3  AA                           tax
000C73r 3               
000C73r 3  60           z_cmove:        rts
000C74r 3               
000C74r 3               
000C74r 3               
000C74r 3               ; ## CMOVE_UP ( add1 add2 u -- ) "Copy bytes from high to low"
000C74r 3               ; ## "cmove>"  auto  ANS string
000C74r 3                       ; """https://forth-standard.org/standard/string/CMOVEtop
000C74r 3                       ; Based on code in Leventhal, Lance A. "6502 Assembly Language
000C74r 3                       ; Routines", p. 201, where it is called "move right".
000C74r 3                       ;
000C74r 3                       ; There are no official tests for this word.
000C74r 3                       ; """
000C74r 3               
000C74r 3               xt_cmove_up:
000C74r 3  20 rr rr                     jsr underflow_3
000C77r 3               
000C77r 3                               ; Move destination address to where we can work with it
000C77r 3  B5 02                        lda 2,x
000C79r 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000C7Br 3  B5 03                        lda 3,x
000C7Dr 3  18                           clc
000C7Er 3  75 01                        adc 1,x
000C80r 3  85 rr                        sta tmp2+1      ; point to last page of destination
000C82r 3               
000C82r 3                               ; Move source address to where we can work with it
000C82r 3  B5 04                        lda 4,x
000C84r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000C86r 3  B5 05                        lda 5,x
000C88r 3  18                           clc
000C89r 3  75 01                        adc 1,x
000C8Br 3  85 rr                        sta tmp1+1      ; point to last page of source
000C8Dr 3  F6 01                        inc 1,x         ; allows us to use bne with dec 1,x below
000C8Fr 3               
000C8Fr 3                               ; Move the last partial page first
000C8Fr 3  B4 00                        ldy 0,x         ; length of last page
000C91r 3  F0 0E                        beq @nopartial
000C93r 3               
000C93r 3               @outerloop:
000C93r 3  88                           dey
000C94r 3  F0 07                        beq @finishpage
000C96r 3               
000C96r 3               @innerloop:
000C96r 3  B1 rr                        lda (tmp1),y
000C98r 3  91 rr                        sta (tmp2),y
000C9Ar 3  88                           dey
000C9Br 3  D0 F9                        bne @innerloop
000C9Dr 3               
000C9Dr 3               @finishpage:
000C9Dr 3  B2 rr                        lda (tmp1)      ; handle y = 0 separately
000C9Fr 3  92 rr                        sta (tmp2)
000CA1r 3               
000CA1r 3               @nopartial:
000CA1r 3  C6 rr                        dec tmp1+1      ; back up to previous pages
000CA3r 3  C6 rr                        dec tmp2+1
000CA5r 3  D6 01                        dec 1,x
000CA7r 3  D0 EA                        bne @outerloop
000CA9r 3               @done:
000CA9r 3                               ; clear up the stack and leave
000CA9r 3  8A                           txa
000CAAr 3  18                           clc
000CABr 3  69 06                        adc #6
000CADr 3  AA                           tax
000CAEr 3               
000CAEr 3  60           z_cmove_up:     rts
000CAFr 3               
000CAFr 3               
000CAFr 3               
000CAFr 3               ; ## COLON ( "name" -- ) "Start compilation of a new word"
000CAFr 3               ; ## ":"  auto  ANS core
000CAFr 3                       ; """https://forth-standard.org/standard/core/Colon
000CAFr 3                       ;
000CAFr 3                       ; Use the CREATE routine and fill in the rest by hand.
000CAFr 3                       ; """
000CAFr 3               
000CAFr 3               xt_colon:
000CAFr 3                               ; If we're already in the compile state, complain
000CAFr 3                               ; and quit
000CAFr 3  A5 rr                        lda state
000CB1r 3  05 rr                        ora state+1
000CB3r 3  F0 05                        beq @1
000CB5r 3               
000CB5r 3  A9 07                        lda #err_state
000CB7r 3  4C rr rr                     jmp error
000CBAr 3               @1:
000CBAr 3                               ; switch to compile state
000CBAr 3  C6 rr                        dec state
000CBCr 3  C6 rr                        dec state+1
000CBEr 3               
000CBEr 3                               ; Set bit 6 in status to tell ";" and RECURSE this is a normal
000CBEr 3                               ; word
000CBEr 3  A9 40                        lda #%01000000
000CC0r 3  04 rr                        tsb status
000CC2r 3               
000CC2r 3                               ; CREATE is going to change the DP to point to the new word's
000CC2r 3                               ; header. While this is fine for (say) variables, it would mean
000CC2r 3                               ; that FIND-NAME etc would find a half-finished word when
000CC2r 3                               ; looking in the Dictionary. To prevent this, we save the old
000CC2r 3                               ; version of DP and restore it later. The new DP is placed in
000CC2r 3                               ; the variable WORKWORD until we're finished with a SEMICOLON.
000CC2r 3  20 rr rr                     jsr current_to_dp
000CC5r 3  A5 rr                        lda dp+1            ; CREATE uses a lot of variables
000CC7r 3  48                           pha
000CC8r 3  A5 rr                        lda dp
000CCAr 3  48                           pha
000CCBr 3               
000CCBr 3                               ; Tell create not to print warning for duplicate name.
000CCBr 3  A9 80                        lda #%10000000
000CCDr 3  04 rr                        tsb status
000CCFr 3               
000CCFr 3  20 rr rr                     jsr xt_create
000CD2r 3               
000CD2r 3                               ; Get the nt (not the xt!) of the new word as described above.
000CD2r 3                               ; Only COLON, SEMICOLON and RECURSE get to access WORKWORD
000CD2r 3  20 rr rr                     jsr current_to_dp   ; This might be able to be omitted
000CD5r 3  A5 rr                        lda dp
000CD7r 3  85 rr                        sta workword
000CD9r 3  A5 rr                        lda dp+1
000CDBr 3  85 rr                        sta workword+1
000CDDr 3               
000CDDr 3                               ; Restore original DP
000CDDr 3  68                           pla
000CDEr 3  85 rr                        sta dp
000CE0r 3  68                           pla
000CE1r 3  85 rr                        sta dp+1
000CE3r 3  20 rr rr                     jsr dp_to_current
000CE6r 3               
000CE6r 3                               ; CREATE includes a subroutine jump to DOVAR by default. We
000CE6r 3                               ; back up three bytes and overwrite that.
000CE6r 3  A5 rr                        lda cp
000CE8r 3  38                           sec
000CE9r 3  E9 03                        sbc #3
000CEBr 3  85 rr                        sta cp
000CEDr 3  B0 02                        bcs @done
000CEFr 3  C6 rr                        dec cp+1
000CF1r 3               @done:
000CF1r 3  60           z_colon:        rts
000CF2r 3               
000CF2r 3               
000CF2r 3               ; ## COLON_NONAME ( -- ) "Start compilation of a new word""
000CF2r 3               ; ## ":NONAME"  auto  ANS core
000CF2r 3                       ; """https://forth-standard.org/standard/core/ColonNONAME
000CF2r 3                       ; Compile a word with no nt.  ";" will put its xt on the stack.
000CF2r 3                       ; """
000CF2r 3               
000CF2r 3               xt_colon_noname:
000CF2r 3                               ; If we're already in the compile state, complain
000CF2r 3                               ; and quit
000CF2r 3  A5 rr                        lda state
000CF4r 3  05 rr                        ora state+1
000CF6r 3  F0 05                        beq @1
000CF8r 3               
000CF8r 3  A9 07                        lda #err_state
000CFAr 3  4C rr rr                     jmp error
000CFDr 3               @1:
000CFDr 3                               ; switch to compile state
000CFDr 3  C6 rr                        dec state
000CFFr 3  C6 rr                        dec state+1
000D01r 3               
000D01r 3                               ; Clear bit 6 in status to tell ";" and RECURSE this is
000D01r 3                               ; a :NONAME word.
000D01r 3  A9 40                        lda #%01000000
000D03r 3  14 rr                        trb status
000D05r 3               
000D05r 3                               ; Put cp (the xt for this word) in WORKWORD. The flag above
000D05r 3                               ; lets both ";" and RECURSE know that is is an xt instead of an
000D05r 3                               ; nt and they will modify their behavior.
000D05r 3  A5 rr                        lda cp
000D07r 3  85 rr                        sta workword
000D09r 3  A5 rr                        lda cp+1
000D0Br 3  85 rr                        sta workword+1
000D0Dr 3               @done:
000D0Dr 3  60           z_colon_noname:        rts
000D0Er 3               
000D0Er 3               
000D0Er 3               
000D0Er 3               ; ## COMMA ( n -- ) "Allot and store one cell in memory"
000D0Er 3               ; ## ","  auto  ANS core
000D0Er 3                       ; """https://forth-standard.org/standard/core/Comma
000D0Er 3                       ; Store TOS at current place in memory.
000D0Er 3                       ;
000D0Er 3                       ; Since this an eight-bit machine, we can ignore all alignment issues.
000D0Er 3                       ; """
000D0Er 3               
000D0Er 3               xt_comma:
000D0Er 3  20 rr rr                     jsr underflow_1
000D11r 3               
000D11r 3  B5 00                        lda 0,x
000D13r 3  92 rr                        sta (cp)
000D15r 3               
000D15r 3  E6 rr                        inc cp
000D17r 3  D0 02                        bne @1
000D19r 3  E6 rr                        inc cp+1
000D1Br 3               @1:
000D1Br 3  B5 01                        lda 1,x
000D1Dr 3  92 rr                        sta (cp)
000D1Fr 3               
000D1Fr 3  E6 rr                        inc cp
000D21r 3  D0 02                        bne @done
000D23r 3  E6 rr                        inc cp+1
000D25r 3               @done:
000D25r 3  E8                           inx
000D26r 3  E8                           inx
000D27r 3               
000D27r 3  60           z_comma:        rts
000D28r 3               
000D28r 3               
000D28r 3               
000D28r 3               ; ## COMPARE ( addr1 u1 addr2 u2 -- -1 | 0 | 1) "Compare two strings"
000D28r 3               ; ## "compare"   auto  ANS string
000D28r 3                       ; """https://forth-standard.org/standard/string/COMPARE
000D28r 3                       ; Compare string1 (denoted by addr1 u1) to string2 (denoted by
000D28r 3                       ; addr2 u2).  Return -1 if string1 < string2, 0 if string1 = string2
000D28r 3                       ; and 1 if string1 > string2 (ASCIIbetical comparison).  A string
000D28r 3                       ; that entirely matches the beginning of the other string, but is
000D28r 3                       ; shorter, is considered less than the longer string.
000D28r 3                       ; """
000D28r 3               
000D28r 3               xt_compare:
000D28r 3  20 rr rr                     jsr underflow_4
000D2Br 3               
000D2Br 3                               ; Load the two string addresses into tmp1 and tmp2.
000D2Br 3  B5 02                        lda 2,x
000D2Dr 3  85 rr                        sta tmp2
000D2Fr 3  B5 03                        lda 3,x
000D31r 3  85 rr                        sta tmp2+1
000D33r 3  B5 06                        lda 6,x
000D35r 3  85 rr                        sta tmp1
000D37r 3  B5 07                        lda 7,x
000D39r 3  85 rr                        sta tmp1+1
000D3Br 3                               ; The counts will be used in-place on the stack.
000D3Br 3               
000D3Br 3               @compare_loop:
000D3Br 3                               ; Check to see if we are out of letters.
000D3Br 3               
000D3Br 3                               ; Check string1
000D3Br 3  B5 04                        lda 4,x
000D3Dr 3  15 05                        ora 5,x
000D3Fr 3  F0 2C                        beq @str1_done
000D41r 3               
000D41r 3                               ; Check string2
000D41r 3  B5 00                        lda 0,x
000D43r 3  15 01                        ora 1,x
000D45r 3  F0 3A                        beq @greater    ; Str2 empty first
000D47r 3               
000D47r 3               @check_letter:
000D47r 3                               ; Both strings have at least one letter left.
000D47r 3                               ; Check the letters against each other.
000D47r 3  B2 rr                        lda (tmp1)
000D49r 3  D2 rr                        cmp (tmp2)
000D4Br 3  90 26                        bcc @less
000D4Dr 3  D0 32                        bne @greater
000D4Fr 3               @next_letter:
000D4Fr 3                               ; Move both tmp pointers and decrement the counts
000D4Fr 3                               ; on the stack.
000D4Fr 3                               ; Increment tmp1
000D4Fr 3  E6 rr                        inc tmp1
000D51r 3  D0 02                        bne @1
000D53r 3  E6 rr                        inc tmp1+1
000D55r 3               @1:
000D55r 3                               ; Increment tmp2
000D55r 3  E6 rr                        inc tmp2
000D57r 3  D0 02                        bne @2
000D59r 3  E6 rr                        inc tmp2+1
000D5Br 3               @2:
000D5Br 3                               ; Decrement count1 on the stack.
000D5Br 3  B5 04                        lda 4,x
000D5Dr 3  D0 02                        bne @3
000D5Fr 3  D6 05                        dec 5,x
000D61r 3               @3:
000D61r 3  D6 04                        dec 4,x
000D63r 3               
000D63r 3                               ; Decrement count2 on the stack.
000D63r 3  B5 00                        lda 0,x
000D65r 3  D0 02                        bne @4
000D67r 3  D6 01                        dec 1,x
000D69r 3               @4:
000D69r 3  D6 00                        dec 0,x
000D6Br 3               
000D6Br 3                               ; Loop around and check again.
000D6Br 3  80 CE                        bra @compare_loop
000D6Dr 3               
000D6Dr 3               @str1_done:
000D6Dr 3                               ; String 1 is out of letters. Check string 2.
000D6Dr 3  B5 00                        lda 0,x
000D6Fr 3  15 01                        ora 1,x
000D71r 3  F0 08                        beq @equal      ; Both out of letters
000D73r 3               
000D73r 3                               ; Falls into less (str1 is out but str2 has more)
000D73r 3               @less:
000D73r 3                               ; Return -1
000D73r 3  A9 FF                        lda #$FF
000D75r 3  95 06                        sta 6,x
000D77r 3  95 07                        sta 7,x
000D79r 3  80 0C                        bra @done
000D7Br 3               @equal:
000D7Br 3                               ; Return 0
000D7Br 3  74 06                        stz 6,x
000D7Dr 3  74 07                        stz 7,x
000D7Fr 3  80 06                        bra @done
000D81r 3               @greater:
000D81r 3                               ; Return 1
000D81r 3  A9 01                        lda #1
000D83r 3  95 06                        sta 6,x
000D85r 3  74 07                        stz 7,x
000D87r 3                               ; Falls into @done
000D87r 3               @done:
000D87r 3                               ; Remove all but the result from the stack.
000D87r 3  8A                           txa
000D88r 3  18                           clc
000D89r 3  69 06                        adc #6
000D8Br 3  AA                           tax
000D8Cr 3               
000D8Cr 3  60           z_compare:      rts
000D8Dr 3               
000D8Dr 3               
000D8Dr 3               
000D8Dr 3               ; ## COMPILE_COMMA ( xt -- ) "Compile xt"
000D8Dr 3               ; ## "compile,"  auto  ANS core ext
000D8Dr 3                       ; """https://forth-standard.org/standard/core/COMPILEComma
000D8Dr 3                       ; Compile the given xt in the current word definition. It is an
000D8Dr 3                       ; error if we are not in the compile state. Because we are using
000D8Dr 3                       ; subroutine threading, we can't use , (COMMA) to compile new words
000D8Dr 3                       ; the traditional way. By default, native compiled is allowed, unless
000D8Dr 3                       ; there is a NN (Never Native) flag associated. If not, we use the
000D8Dr 3                       ; value NC_LIMIT (from definitions.tasm) to decide if the code
000D8Dr 3                       ; is too large to be natively coded: If the size is larger than
000D8Dr 3                       ; NC_LIMIT, we silently use subroutine coding. If the AN (Always
000D8Dr 3                       ; Native) flag is set, the word is always natively compiled.
000D8Dr 3                       ; """
000D8Dr 3               
000D8Dr 3               xt_compile_comma:
000D8Dr 3  20 rr rr                     jsr underflow_1
000D90r 3               
000D90r 3                               ; See if this is an Always Native (AN) word by checking the
000D90r 3                               ; AN flag. We need nt for this. First, save a copy of xt to
000D90r 3                               ; the Return Stack
000D90r 3  B5 01                        lda 1,x                 ; MSB
000D92r 3  48                           pha
000D93r 3  B5 00                        lda 0,x
000D95r 3  48                           pha                     ; LSB
000D96r 3               
000D96r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt -- nt )
000D99r 3               
000D99r 3                               ; See if this xt even has an nt.
000D99r 3  B5 00                        lda 0,x
000D9Br 3  15 01                        ora 1,x
000D9Dr 3  D0 03                        bne @check_nt
000D9Fr 3               
000D9Fr 3                               ; No nt in dictionary. Just compile as a JSR.
000D9Fr 3  4C rr rr                     jmp @compile_as_jump
000DA2r 3               
000DA2r 3               @check_nt:
000DA2r 3                               ; put nt away for safe keeping
000DA2r 3  B5 00                        lda 0,x
000DA4r 3  85 rr                        sta tmptos
000DA6r 3  B5 01                        lda 1,x
000DA8r 3  85 rr                        sta tmptos+1
000DAAr 3               
000DAAr 3                               ; status byte is one further down
000DAAr 3  F6 00                        inc 0,x
000DACr 3  D0 02                        bne @1
000DAEr 3  F6 01                        inc 1,x                 ; ( nt -- nt+1 )
000DB0r 3               @1:
000DB0r 3  A1 00                        lda (0,x)
000DB2r 3  85 rr                        sta tmp3                ; keep copy of status byte for NN
000DB4r 3  29 02                        and #AN                 ; mask all but Always Native (AN) bit
000DB6r 3  F0 0D                        beq @compile_check
000DB8r 3               
000DB8r 3                               ; We're natively compiling no matter what. Get length and
000DB8r 3                               ; compile in code. Get the original nt back
000DB8r 3  A5 rr                        lda tmptos
000DBAr 3  95 00                        sta 0,x
000DBCr 3  A5 rr                        lda tmptos+1
000DBEr 3  95 01                        sta 1,x
000DC0r 3               
000DC0r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000DC3r 3               
000DC3r 3  80 27                        bra @compile_as_code
000DC5r 3               
000DC5r 3               @compile_check:
000DC5r 3                               ; See if Native Compile is even alowed by checking the NN
000DC5r 3                               ; flag
000DC5r 3  A5 rr                        lda tmp3
000DC7r 3  29 08                        and #NN
000DC9r 3  F0 03                        beq @check_size_limit
000DCBr 3               
000DCBr 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000DCEr 3               
000DCEr 3               @check_size_limit:
000DCEr 3                               ; Native compile is a legal option, but we need to see what
000DCEr 3                               ; limit the user set for size (in nc_limit)
000DCEr 3  A5 rr                        lda tmptos
000DD0r 3  95 00                        sta 0,x
000DD2r 3  A5 rr                        lda tmptos+1
000DD4r 3  95 01                        sta 1,x
000DD6r 3               
000DD6r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000DD9r 3               
000DD9r 3                               ; Check the wordsize MSB against the user-defined limit.
000DD9r 3  B5 01                        lda 1,x
000DDBr 3  C5 rr                        cmp nc_limit+1
000DDDr 3  90 0D                        bcc @compile_as_code    ; user-defined limit MSB
000DDFr 3  D0 08                        bne @jumpto_compile_as_jump
000DE1r 3               
000DE1r 3                               ; Check the wordsize LSB against the user-defined limit.
000DE1r 3  B5 00                        lda 0,x
000DE3r 3  C5 rr                        cmp nc_limit            ; user-defined limit LSB
000DE5r 3  90 05                        bcc @compile_as_code    ; Allow native compiling for less
000DE7r 3  F0 03                        beq @compile_as_code    ; than or equal to the limit.
000DE9r 3               
000DE9r 3               @jumpto_compile_as_jump:
000DE9r 3                               ; If the wordsize is greater than the user-defined
000DE9r 3                               ; limit, it will be compiled as a subroutine jump.
000DE9r 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000DECr 3               
000DECr 3               @compile_as_code:
000DECr 3                               ; We arrive here with the length of the word's code TOS and
000DECr 3                               ; xt on top of the Return Stack. MOVE will need ( xt cp u )
000DECr 3                               ; on the data stack
000DECr 3  CA                           dex
000DEDr 3  CA                           dex                     ; ( -- u ? )
000DEEr 3  CA                           dex
000DEFr 3  CA                           dex                     ; ( -- u ? ? )
000DF0r 3               
000DF0r 3  B5 04                        lda 4,x
000DF2r 3  95 00                        sta 0,x                 ; LSB of u
000DF4r 3  B5 05                        lda 5,x
000DF6r 3  95 01                        sta 1,x                 ; ( -- u ? u )
000DF8r 3               
000DF8r 3  68                           pla
000DF9r 3  95 04                        sta 4,x                 ; LSB of xt
000DFBr 3  68                           pla
000DFCr 3  95 05                        sta 5,x                 ; ( -- xt ? u )
000DFEr 3               
000DFEr 3  A5 rr                        lda cp                  ; LSB of cp
000E00r 3  95 02                        sta 2,x
000E02r 3  A5 rr                        lda cp+1
000E04r 3  95 03                        sta 3,x                 ; ( -- xt cp u )
000E06r 3               
000E06r 3                               ; --- SPECIAL CASE 1: PREVENT RETURN STACK THRASHINIG ---
000E06r 3               
000E06r 3                               ; Native compiling allows us to strip the stack antics off
000E06r 3                               ; a number of words that use the Return Stack such as >R, R>,
000E06r 3                               ; 2>R and 2R> (but not 2R@ in this version). We compare the
000E06r 3                               ; xt with the contents of the table
000E06r 3  A0 00                        ldy #0
000E08r 3               
000E08r 3               @strip_loop:
000E08r 3  B9 rr rr                     lda @strip_table,y      ; LSB of first word
000E0Br 3  D5 04                        cmp 4,x                 ; LSB of xt
000E0Dr 3  D0 07                        bne @next_entry
000E0Fr 3               
000E0Fr 3                               ; LSB is the same, test MSB
000E0Fr 3  B9 rr rr                     lda @strip_table+1,y
000E12r 3  D5 05                        cmp 5,x
000E14r 3  F0 0C                        beq @found_entry
000E16r 3               
000E16r 3                               ; MSB is not equal. Pretend though that we've come from LSB
000E16r 3                               ; so we can use the next step for both cases
000E16r 3               @next_entry:
000E16r 3                               ; Not a word that needs stripping, so check next entry in table
000E16r 3                               ; Let's see if we're done with the table (marked by zero entry)
000E16r 3  B9 rr rr                     lda @strip_table,y      ; pointing to LSB
000E19r 3  19 rr rr                     ora @strip_table+1,y    ; get MSB
000E1Cr 3  F0 22                        beq @underflow_strip    ; table done, let's get out of here
000E1Er 3               
000E1Er 3  C8                           iny
000E1Fr 3  C8                           iny
000E20r 3  80 E6                        bra @strip_loop
000E22r 3               @found_entry:
000E22r 3                               ; This word is one of the ones that needs to have its size
000E22r 3                               ; adjusted during native compile. We find the values in the
000E22r 3                               ; next table with the same index, which is Y. However, Y is
000E22r 3                               ; pointing to the MSB, so we need to go back to the LSB and
000E22r 3                               ; halve the index before we can use it.
000E22r 3  98                           tya
000E23r 3  4A                           lsr
000E24r 3  A8                           tay
000E25r 3               
000E25r 3                               ; Get the adjustment out of the size table. We were clever
000E25r 3                               ; enough to make sure the cut on both ends of the code is
000E25r 3                               ; is the same size.
000E25r 3  B9 rr rr                     lda @strip_size,y
000E28r 3  85 rr                        sta tmptos              ; save a copy
000E2Ar 3               
000E2Ar 3                               ; Adjust xt: Start later
000E2Ar 3  18                           clc
000E2Br 3  75 04                        adc 4,x
000E2Dr 3  95 04                        sta 4,x
000E2Fr 3  90 02                        bcc @2
000E31r 3  F6 05                        inc 5,x                 ; we just care about the carry
000E33r 3               @2:
000E33r 3               
000E33r 3                               ; Adjust u: Quit earlier. Since we cut off the top and the
000E33r 3                               ; bottom of the code, we have to double the value
000E33r 3  06 rr                        asl tmptos
000E35r 3               
000E35r 3  38                           sec
000E36r 3  B5 00                        lda 0,x
000E38r 3  E5 rr                        sbc tmptos
000E3Ar 3  95 00                        sta 0,x
000E3Cr 3  B0 02                        bcs @3
000E3Er 3  D6 01                        dec 1,x                 ; we just care about the borrow
000E40r 3               @3:
000E40r 3                               ; drop through to underflow check stripping
000E40r 3               
000E40r 3               @underflow_strip:
000E40r 3                               ; --- SPECIAL CASE 2: REMOVE UNDERFLOW CHECKING ---
000E40r 3               
000E40r 3                               ; The user can choose to remove the unterflow testing in those
000E40r 3                               ; words that have the UF flag. This shortens the word by
000E40r 3                               ; 3 bytes if there is no underflow.
000E40r 3               
000E40r 3                               ; See if the user wants underflow stripping turned on
000E40r 3  A5 rr                        lda uf_strip
000E42r 3  05 rr                        ora uf_strip+1
000E44r 3  F0 1C                        beq @specials_done
000E46r 3               
000E46r 3                               ; See if this word even contains underflow checking
000E46r 3  A5 rr                        lda tmp3
000E48r 3  29 10                        and #UF
000E4Ar 3  F0 16                        beq @specials_done
000E4Cr 3               
000E4Cr 3                               ; If we arrived here, underflow has to go. It's always 3 bytes
000E4Cr 3                               ; long. Note hat PICK is a special case.
000E4Cr 3               
000E4Cr 3                               ; Adjust xt: Start later
000E4Cr 3  18                           clc
000E4Dr 3  B5 04                        lda 4,x
000E4Fr 3  69 03                        adc #3
000E51r 3  95 04                        sta 4,x
000E53r 3  90 02                        bcc @4
000E55r 3  F6 05                        inc 5,x                  ; we just care about the carry
000E57r 3               @4:
000E57r 3                               ; Adjust u: End earlier
000E57r 3  38                           sec
000E58r 3  B5 00                        lda 0,x
000E5Ar 3  E9 03                        sbc #3
000E5Cr 3  95 00                        sta 0,x
000E5Er 3  B0 02                        bcs @5
000E60r 3  D6 01                        dec 1,x                  ; we just care about the borrow
000E62r 3               @5:
000E62r 3               
000E62r 3                               ; --- END OF SPECIAL CASES ---
000E62r 3               @specials_done:
000E62r 3                               ; Store size of area to be copied for calculation of
000E62r 3                               ; new CP. We have to do this after all of the special cases
000E62r 3                               ; because they might change the size
000E62r 3  B5 01                        lda 1,x                 ; MSB
000E64r 3  48                           pha
000E65r 3  B5 00                        lda 0,x                 ; LSB
000E67r 3  48                           pha
000E68r 3               
000E68r 3                               ; Enough of this, let's move those bytes already! We have
000E68r 3                               ; ( xt cp u ) on the stack at this point
000E68r 3  20 rr rr                     jsr xt_move
000E6Br 3               
000E6Br 3                               ; Update CP
000E6Br 3  18                           clc
000E6Cr 3  68                           pla                     ; LSB
000E6Dr 3  65 rr                        adc cp
000E6Fr 3  85 rr                        sta cp
000E71r 3               
000E71r 3  68                           pla                     ; MSB
000E72r 3  65 rr                        adc cp+1
000E74r 3  85 rr                        sta cp+1
000E76r 3               
000E76r 3  80 2C                        bra @done
000E78r 3               
000E78r 3               @strip_table:
000E78r 3                              ; List of words we strip the Return Stack antics from
000E78r 3                              ; during native compile, zero terminated. The index here
000E78r 3                              ; must be the same as for the sizes
000E78r 3  rr rr rr rr                  .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
000E7Cr 3  rr rr        
000E7Er 3  rr rr rr rr                  .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
000E82r 3  00 00        
000E84r 3               
000E84r 3               @strip_size:
000E84r 3                               ; List of bytes to be stripped from the words that get their
000E84r 3                               ; Return Stack antics removed during native compile. Index must
000E84r 3                               ; be the same as for the xts. Zero terminated.
000E84r 3  04 04 04 06                  .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
000E88r 3  06 00        
000E8Ar 3               
000E8Ar 3               @compile_as_jump:
000E8Ar 3                               ; Compile xt as a subroutine jump
000E8Ar 3  A9 20                        lda #$20
000E8Cr 3  92 rr                        sta (cp)
000E8Er 3               
000E8Er 3  A0 01                        ldy #1
000E90r 3  68                           pla             ; LSB
000E91r 3  91 rr                        sta (cp),y
000E93r 3  C8                           iny
000E94r 3  68                           pla             ; MSB
000E95r 3  91 rr                        sta (cp),y
000E97r 3               
000E97r 3                               ; allot space we just used
000E97r 3  A9 03                        lda #3
000E99r 3  18                           clc
000E9Ar 3  65 rr                        adc cp
000E9Cr 3  85 rr                        sta cp
000E9Er 3  90 02                        bcc @6
000EA0r 3  E6 rr                        inc cp+1
000EA2r 3               @6:
000EA2r 3  E8                           inx             ; drop xt
000EA3r 3  E8                           inx
000EA4r 3               @done:
000EA4r 3               z_compile_comma:
000EA4r 3  60                           rts
000EA5r 3               
000EA5r 3               
000EA5r 3               
000EA5r 3               ; ## COMPILE_ONLY ( -- ) "Mark most recent word as COMPILE-ONLY"
000EA5r 3               ; ## "compile-only"  tested  Tali Forth
000EA5r 3                       ; """Set the Compile Only flag (CO) of the most recently defined
000EA5r 3                       ; word.
000EA5r 3                       ;
000EA5r 3                       ; The alternative way to do this is to define a word
000EA5r 3                       ; ?COMPILE that makes sure  we're in compile mode
000EA5r 3                       ; """
000EA5r 3               
000EA5r 3               xt_compile_only:
000EA5r 3  20 rr rr                     jsr current_to_dp
000EA8r 3  A0 01                        ldy #1          ; offset for status byte
000EAAr 3  B1 rr                        lda (dp),y
000EACr 3  09 01                        ora #CO        ; make sure bit 7 is set
000EAEr 3  91 rr                        sta (dp),y
000EB0r 3               
000EB0r 3  60           z_compile_only: rts
000EB1r 3               
000EB1r 3               
000EB1r 3               
000EB1r 3               ; ## CONSTANT ( n "name" -- ) "Define a constant"
000EB1r 3               ; ## "constant"  auto  ANS core
000EB1r 3                       ; """https://forth-standard.org/standard/core/CONSTANT
000EB1r 3                       ;
000EB1r 3                       ; Forth equivalent is  CREATE , DOES> @  but we do
000EB1r 3                       ; more in assembler and let CREATE do the heavy lifting.
000EB1r 3                       ; See http://www.bradrodriguez.com/papers/moving3.htm for
000EB1r 3                       ; a primer on how this works in various Forths. This is the
000EB1r 3                       ; same code as VALUE in our case.
000EB1r 3                       ; """
000EB1r 3               xt_value:
000EB1r 3               xt_constant:
000EB1r 3  20 rr rr                     jsr underflow_1
000EB4r 3               
000EB4r 3  20 rr rr                     jsr xt_create
000EB7r 3               
000EB7r 3                           	; CREATE by default installs a subroutine jump to DOVAR,
000EB7r 3                               ; but we want DOCONST for constants. Go back two bytes and
000EB7r 3                               ; replace the subroutine jump target
000EB7r 3  38                           sec
000EB8r 3  A5 rr                        lda cp
000EBAr 3  E9 02                        sbc #2
000EBCr 3  85 rr                        sta tmp1
000EBEr 3  A5 rr                        lda cp+1
000EC0r 3  E9 00                        sbc #0
000EC2r 3  85 rr                        sta tmp1+1
000EC4r 3               
000EC4r 3  A9 rr                        lda #<doconst           ; LSB of DOCONST
000EC6r 3  92 rr                        sta (tmp1)
000EC8r 3  A0 01                        ldy #1
000ECAr 3  A9 rr                        lda #>doconst           ; MSB of DOCONST
000ECCr 3  91 rr                        sta (tmp1),y
000ECEr 3               
000ECEr 3                               ; Now we save the constant number itself in the next cell
000ECEr 3  20 rr rr                     jsr xt_comma            ; drop through to adjust_z
000ED1r 3               
000ED1r 3               adjust_z:
000ED1r 3                               ; Now the length of the complete word (z_word) has increased by
000ED1r 3                               ; two. We need to update that number or else words such as SEE
000ED1r 3                               ; will ignore the PFA. We use this same routine for VARIABLE,
000ED1r 3                               ; VALUE and DEFER
000ED1r 3  20 rr rr                     jsr xt_latestnt         ; gives us ( -- nt )
000ED4r 3               
000ED4r 3                               ; z_word is six bytes further down
000ED4r 3  B5 00                        lda 0,x
000ED6r 3  85 rr                        sta tmp1
000ED8r 3  B5 01                        lda 1,x
000EDAr 3  85 rr                        sta tmp1+1
000EDCr 3               
000EDCr 3  A0 06                        ldy #6
000EDEr 3  B1 rr                        lda (tmp1),y
000EE0r 3  18                           clc
000EE1r 3  69 02                        adc #2
000EE3r 3  91 rr                        sta (tmp1),y
000EE5r 3  C8                           iny
000EE6r 3  B1 rr                        lda (tmp1),y
000EE8r 3  69 00                        adc #0                  ; only need carry
000EEAr 3  91 rr                        sta (tmp1),y
000EECr 3               
000EECr 3  E8                           inx
000EEDr 3  E8                           inx
000EEEr 3               
000EEEr 3               z_value:
000EEEr 3  60           z_constant:     rts
000EEFr 3               
000EEFr 3               
000EEFr 3               ; ## COUNT ( c-addr -- addr u ) "Convert character string to normal format"
000EEFr 3               ; ## "count"  auto  ANS core
000EEFr 3                       ; """https://forth-standard.org/standard/core/COUNT
000EEFr 3                       ; Convert old-style character string to address-length pair. Note
000EEFr 3                       ; that the length of the string c-addr is stored in character length
000EEFr 3                       ; (8 bit), not cell length (16 bit). This is rarely used these days,
000EEFr 3                       ; though COUNT can also be used to step through a string character by
000EEFr 3                       ; character.
000EEFr 3                       ; """
000EEFr 3               xt_count:
000EEFr 3  20 rr rr                     jsr underflow_1
000EF2r 3               
000EF2r 3  A1 00                        lda (0,x)       ; Get number of characters (255 max)
000EF4r 3  A8                           tay
000EF5r 3               
000EF5r 3                               ; move start address up by one
000EF5r 3  F6 00                        inc 0,x         ; LSB
000EF7r 3  D0 02                        bne @1
000EF9r 3  F6 01                        inc 1,x         ; MSB
000EFBr 3               
000EFBr 3                               ; save number of characters to stack
000EFBr 3               @1:
000EFBr 3  98                           tya
000EFCr 3  CA                           dex
000EFDr 3  CA                           dex
000EFEr 3  95 00                        sta 0,x         ; LSB
000F00r 3  74 01                        stz 1,x         ; MSB, always zero
000F02r 3               
000F02r 3  60           z_count:        rts
000F03r 3               
000F03r 3               
000F03r 3               ; ## CR ( -- ) "Print a line feed"
000F03r 3               ; ## "cr"  auto  ANS core
000F03r 3                       ; """https://forth-standard.org/standard/core/CR"""
000F03r 3               xt_cr:
000F03r 3  A9 0A                        lda #AscLF
000F05r 3  20 rr rr                     jsr emit_a
000F08r 3  60           z_cr:           rts
000F09r 3               
000F09r 3               
000F09r 3               ; ## CREATE ( "name" -- ) "Create Dictionary entry for 'name'"
000F09r 3               ; ## "create"  auto  ANS core
000F09r 3                       ; """https://forth-standard.org/standard/core/CREATE
000F09r 3                       ;
000F09r 3                       ; See the drawing in headers.asm for details on the header
000F09r 3                       ; """
000F09r 3               
000F09r 3               xt_create:
000F09r 3                               ; get string
000F09r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
000F0Cr 3               
000F0Cr 3                               ; if we were given an empty string, we complain and quit
000F0Cr 3  B5 00                        lda 0,x
000F0Er 3  15 01                        ora 1,x
000F10r 3  D0 05                        bne @got_name
000F12r 3               
000F12r 3  A9 05                        lda #err_noname
000F14r 3  4C rr rr                     jmp error
000F17r 3               
000F17r 3               @got_name:
000F17r 3                               ; Enforce maximal length of string by overwriting the MSB of
000F17r 3                               ; the length. There is a possible error here: If the string
000F17r 3                               ; is exactly 255 chars long, then a lot of the following
000F17r 3                               ; additions will fail because of wrapping
000F17r 3  74 01                        stz 1,x
000F19r 3               
000F19r 3                               ; Check to see if this name already exists.
000F19r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u )
000F1Cr 3  20 rr rr                     jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
000F1Fr 3               
000F1Fr 3  B5 00                        lda 0,x
000F21r 3  15 01                        ora 1,x
000F23r 3  F0 1E                        beq @new_name           ; We haven't seen this one before.
000F25r 3               
000F25r 3                               ; This name already exists.  See if we are supposed to print
000F25r 3                               ; the message for it.
000F25r 3  E8                           inx                     ; Drop flag (nt) from find-name.
000F26r 3  E8                           inx
000F27r 3               
000F27r 3                               ; Check bit 7
000F27r 3  24 rr                        bit status
000F29r 3  10 08                        bpl @redefined_name     ; Bit 7 is zero, so print the message.
000F2Br 3               
000F2Br 3                               ; We aren't supposed to print the redefined message ourselves,
000F2Br 3                               ; but we should indicate that it is redefined (for ; to print
000F2Br 3                               ; later).
000F2Br 3  A9 80                        lda #$80                ; Set bit 7 to indicate dup
000F2Dr 3  05 rr                        ora status
000F2Fr 3  85 rr                        sta status
000F31r 3  80 18                        bra @process_name
000F33r 3               
000F33r 3               @redefined_name:
000F33r 3                               ; Print the message that the name is redefined.
000F33r 3  A9 02                        lda #str_redefined
000F35r 3  20 rr rr                     jsr print_string_no_lf
000F38r 3               
000F38r 3  20 rr rr                     jsr xt_two_dup           ; ( addr u addr u )
000F3Br 3  20 rr rr                     jsr xt_type
000F3Er 3  20 rr rr                     jsr xt_space
000F41r 3               
000F41r 3  80 08                        bra @process_name
000F43r 3               
000F43r 3               @new_name:
000F43r 3  E8                           inx                     ; Drop flag (0) from find-name.
000F44r 3  E8                           inx
000F45r 3  A9 7F                        lda #$7F                ; Clear bit 0 of status to indicate new word.
000F47r 3  25 rr                        and status
000F49r 3  85 rr                        sta status
000F4Br 3               
000F4Br 3               @process_name:
000F4Br 3  B5 00                        lda 0,x
000F4Dr 3  85 rr                        sta tmp2                ; store length of string in tmp2
000F4Fr 3               
000F4Fr 3                               ; remember the first free byte of memory as the start of
000F4Fr 3                               ; the new word
000F4Fr 3  A5 rr                        lda cp
000F51r 3  85 rr                        sta tmp1
000F53r 3  A5 rr                        lda cp+1
000F55r 3  85 rr                        sta tmp1+1
000F57r 3               
000F57r 3                               ; We need 8 bytes plus the length of the string for our new header.
000F57r 3                               ; This is also the offset for the start of the code field (the
000F57r 3                               ; xt_ label) so we need to remember it. Otherwise, we could
000F57r 3                               ; just allot the space afterwards
000F57r 3  B5 00                        lda 0,x
000F59r 3  18                           clc
000F5Ar 3  69 08                        adc #8
000F5Cr 3  85 rr                        sta tmp3                ; total header length
000F5Er 3               
000F5Er 3                               ; We need three more bytes for for the hardcoded code field
000F5Er 3                               ; area (CFA), the "payload" of the word which by default will
000F5Er 3                               ; be a subroutine jump to DOVAR
000F5Er 3  18                           clc
000F5Fr 3  69 03                        adc #3
000F61r 3               
000F61r 3                               ; We overwrite the length of the string returned by PARSE-NAME
000F61r 3                               ; and then call ALLOT
000F61r 3  95 00                        sta 0,x
000F63r 3  74 01                        stz 1,x         ; max header size is 255 chars
000F65r 3  20 rr rr                     jsr xt_allot    ; ( addr )
000F68r 3               
000F68r 3                               ; Get the CURRENT dictionary pointer.
000F68r 3  20 rr rr                     jsr current_to_dp
000F6Br 3               
000F6Br 3                               ; Now we walk through the header with Y as the index, adding
000F6Br 3                               ; information byte-by-byte
000F6Br 3  A0 00                        ldy #0
000F6Dr 3               
000F6Dr 3                               ; HEADER BYTE 0: Length of string
000F6Dr 3  A5 rr                        lda tmp2
000F6Fr 3  91 rr                        sta (tmp1),y
000F71r 3               
000F71r 3                               ; HEADER BYTE 1: Status byte. By default, we set all new words
000F71r 3                               ; to "never native", user will have to decide if they should
000F71r 3                               ; be inlined
000F71r 3  A9 08                        lda #NN
000F73r 3               
000F73r 3                               ; Also, words defined by CREATE are marked in the header has
000F73r 3                               ; having a Code Field Area (CFA), which is a bit tricky for
000F73r 3                               ; Subroutine Threaded Code (STC). We do this so >BODY works
000F73r 3                               ; correctly with DOES> and CREATE. See the discussion at
000F73r 3                               ; http://forum.6502.org/viewtopic.php?f=9&t=5182 for details
000F73r 3  09 20                        ora #HC
000F75r 3  C8                           iny
000F76r 3  91 rr                        sta (tmp1),y
000F78r 3  C8                           iny
000F79r 3               
000F79r 3                               ; HEADER BYTE 2,3: Next header. This is the current last word
000F79r 3                               ; in the Dictionary
000F79r 3  A5 rr                        lda dp
000F7Br 3  91 rr                        sta (tmp1),y
000F7Dr 3  C8                           iny
000F7Er 3  A5 rr                        lda dp+1
000F80r 3  91 rr                        sta (tmp1),y
000F82r 3  C8                           iny
000F83r 3               
000F83r 3                               ; Interlude: Make old CP new DP (new start of Dictionary)
000F83r 3  A5 rr                        lda tmp1+1
000F85r 3  85 rr                        sta dp+1
000F87r 3  A5 rr                        lda tmp1
000F89r 3  85 rr                        sta dp
000F8Br 3               
000F8Br 3                               ; HEADER BYTE 4,5: Start of the code field ("xt_" of this word).
000F8Br 3                               ; This begins after the header so we take the length of the
000F8Br 3                               ; header, which we cleverly saved in tmp3, and use it as an
000F8Br 3                               ; offset to the address of the start of the word. We come here
000F8Br 3                               ; with tmp1 in A
000F8Br 3  18                           clc
000F8Cr 3  65 rr                        adc tmp3        ; add total header length
000F8Er 3  91 rr                        sta (tmp1),y
000F90r 3  48                           pha             ; we need this in the next step
000F91r 3  C8                           iny
000F92r 3               
000F92r 3  A5 rr                        lda tmp1+1
000F94r 3  69 00                        adc #0          ; only need the carry
000F96r 3  91 rr                        sta (tmp1),y
000F98r 3  C8                           iny
000F99r 3               
000F99r 3                               ; HEADER BYTE 6,7: End of code ("z_" of this word). By default,
000F99r 3                               ; we execute a jump to the DOVAR routine, so we need to move three
000F99r 3                               ; bytes down, and then one more byte so that the z_ label points
000F99r 3                               ; to the (still fictional) RTS instruction for correct compilation
000F99r 3  68                           pla             ; LSB of "z_" address
000F9Ar 3  18                           clc
000F9Br 3  69 03                        adc #3
000F9Dr 3  91 rr                        sta (tmp1),y
000F9Fr 3               
000F9Fr 3  88                           dey             ; get the MSB of xt back
000FA0r 3  B1 rr                        lda (tmp1),y
000FA2r 3  69 00                        adc #0          ; only need the carry
000FA4r 3  C8                           iny
000FA5r 3  C8                           iny
000FA6r 3  91 rr                        sta (tmp1),y
000FA8r 3  C8                           iny
000FA9r 3               
000FA9r 3                               ; HEADER BYTE 8: Start of name string. The address is TOS, the
000FA9r 3                               ; length in tmp2. We subtract 8 from the address so we can
000FA9r 3                               ; use the same loop index, which is already 8 byte ahead at
000FA9r 3                               ; this point
000FA9r 3  B5 00                        lda 0,x
000FABr 3  38                           sec
000FACr 3  E9 08                        sbc #8
000FAEr 3  85 rr                        sta tmptos
000FB0r 3               
000FB0r 3  B5 01                        lda 1,x
000FB2r 3  E9 00                        sbc #0          ; only need carry
000FB4r 3  85 rr                        sta tmptos+1
000FB6r 3               
000FB6r 3               @name_loop:
000FB6r 3  B1 rr                        lda (tmptos),y
000FB8r 3               
000FB8r 3                               ; Make sure it goes into the dictionary in lower case.
000FB8r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
000FBAr 3  B0 07                        bcs @store_name
000FBCr 3  C9 41                        cmp #$41        ; ASCII 'A'
000FBEr 3  90 03                        bcc @store_name
000FC0r 3               
000FC0r 3                               ; An uppercase letter has been located. Make it
000FC0r 3                               ; lowercase.
000FC0r 3  18                           clc
000FC1r 3  69 20                        adc #$20
000FC3r 3               
000FC3r 3                               ; Fall into @store_name.
000FC3r 3               
000FC3r 3               @store_name:
000FC3r 3  91 rr                        sta (tmp1),y
000FC5r 3  C8                           iny
000FC6r 3  C6 rr                        dec tmp2
000FC8r 3  D0 EC                        bne @name_loop
000FCAr 3               
000FCAr 3                               ; After thename string comes the code field, starting at the
000FCAr 3                               ; current xt of this word, which is initially a jump to the
000FCAr 3                               ; subroutine to DOVAR. We code this jump by hand
000FCAr 3  A9 20                        lda #$20        ; opcode of JSR
000FCCr 3  91 rr                        sta (tmp1),y
000FCEr 3  C8                           iny
000FCFr 3  A9 rr                        lda #<dovar
000FD1r 3  91 rr                        sta (tmp1),y
000FD3r 3  C8                           iny
000FD4r 3  A9 rr                        lda #>dovar
000FD6r 3  91 rr                        sta (tmp1),y
000FD8r 3               
000FD8r 3                               ; Update the CURRENT wordlist with the new DP.
000FD8r 3                               ; We do this down here because this routine uses Y.
000FD8r 3  20 rr rr                     jsr dp_to_current
000FDBr 3               
000FDBr 3                               ; And we're done. Restore stack
000FDBr 3  E8                           inx
000FDCr 3  E8                           inx
000FDDr 3               
000FDDr 3  60           z_create:       rts
000FDEr 3               
000FDEr 3               
000FDEr 3               
000FDEr 3               ; ## D_MINUS ( d d -- d ) "Subtract two double-celled numbers"
000FDEr 3               ; ## "d-"  auto  ANS double
000FDEr 3                       ; """https://forth-standard.org/standard/double/DMinus"""
000FDEr 3               
000FDEr 3               xt_d_minus:
000FDEr 3  20 rr rr                     jsr underflow_4 ; two double numbers
000FE1r 3               
000FE1r 3  38                           sec
000FE2r 3               
000FE2r 3  B5 06                        lda 6,x         ; LSB of lower word
000FE4r 3  F5 02                        sbc 2,x
000FE6r 3  95 06                        sta 6,x
000FE8r 3               
000FE8r 3  B5 07                        lda 7,x         ; MSB of lower word
000FEAr 3  F5 03                        sbc 3,x
000FECr 3  95 07                        sta 7,x
000FEEr 3               
000FEEr 3  B5 04                        lda 4,x         ; LSB of upper word
000FF0r 3  F5 00                        sbc 0,x
000FF2r 3  95 04                        sta 4,x
000FF4r 3               
000FF4r 3  B5 05                        lda 5,x         ; MSB of upper word
000FF6r 3  F5 01                        sbc 1,x
000FF8r 3  95 05                        sta 5,x
000FFAr 3               
000FFAr 3  E8                           inx
000FFBr 3  E8                           inx
000FFCr 3  E8                           inx
000FFDr 3  E8                           inx
000FFEr 3               
000FFEr 3  60           z_d_minus:      rts
000FFFr 3               
000FFFr 3               
000FFFr 3               
000FFFr 3               ; ## D_PLUS ( d d -- d ) "Add two double-celled numbers"
000FFFr 3               ; ## "d+"  auto  ANS double
000FFFr 3                       ; """https://forth-standard.org/standard/double/DPlus"""
000FFFr 3               
000FFFr 3               xt_d_plus:
000FFFr 3  20 rr rr                     jsr underflow_4 ; two double numbers
001002r 3               
001002r 3  18                           clc
001003r 3  B5 02                        lda 2,x         ; LSB of lower word
001005r 3  75 06                        adc 6,x
001007r 3  95 06                        sta 6,x
001009r 3               
001009r 3  B5 03                        lda 3,x         ; MSB of lower word
00100Br 3  75 07                        adc 7,x
00100Dr 3  95 07                        sta 7,x
00100Fr 3               
00100Fr 3  B5 00                        lda 0,x         ; LSB of upper word
001011r 3  75 04                        adc 4,x
001013r 3  95 04                        sta 4,x
001015r 3               
001015r 3  B5 01                        lda 1,x         ; MSB of upper word
001017r 3  75 05                        adc 5,x
001019r 3  95 05                        sta 5,x
00101Br 3               
00101Br 3  E8                           inx
00101Cr 3  E8                           inx
00101Dr 3  E8                           inx
00101Er 3  E8                           inx
00101Fr 3               
00101Fr 3  60           z_d_plus:       rts
001020r 3               
001020r 3               
001020r 3               
001020r 3               ; ## D_TO_S ( d -- n ) "Convert a double number to single"
001020r 3               ; ## "d>s"  auto  ANS double
001020r 3                       ; """https://forth-standard.org/standard/double/DtoS
001020r 3                       ; Though this is basically just DROP, we keep it
001020r 3                       ; separate so we can test for underflow
001020r 3                       ; """
001020r 3               
001020r 3               xt_d_to_s:
001020r 3  20 rr rr                     jsr underflow_2
001023r 3               
001023r 3  E8                           inx
001024r 3  E8                           inx
001025r 3               
001025r 3  60           z_d_to_s:       rts
001026r 3               
001026r 3               
001026r 3               
001026r 3               ; ## DABS ( d -- d ) "Return the absolute value of a double"
001026r 3               ; ## "dabs"  auto  ANS double
001026r 3                       ; """https://forth-standard.org/standard/double/DABS"""
001026r 3               
001026r 3               xt_dabs:
001026r 3  20 rr rr                     jsr underflow_2 ; double number
001029r 3               
001029r 3  B5 01                        lda 1,x         ; MSB of high cell
00102Br 3  10 17                        bpl @done       ; positive, we get off light
00102Dr 3               
00102Dr 3                               ; negative, calculate 0 - d
00102Dr 3  A0 00                        ldy #0
00102Fr 3  38                           sec
001030r 3               
001030r 3  98                           tya
001031r 3  F5 02                        sbc 2,x         ; LSB of low cell
001033r 3  95 02                        sta 2,x
001035r 3               
001035r 3  98                           tya
001036r 3  F5 03                        sbc 3,x         ; MSB of low cell
001038r 3  95 03                        sta 3,x
00103Ar 3               
00103Ar 3  98                           tya
00103Br 3  F5 00                        sbc 0,x         ; LSB of high cell
00103Dr 3  95 00                        sta 0,x
00103Fr 3               
00103Fr 3  98                           tya
001040r 3  F5 01                        sbc 1,x         ; MSB of high cell
001042r 3  95 01                        sta 1,x
001044r 3               @done:
001044r 3  60           z_dabs:         rts
001045r 3               
001045r 3               
001045r 3               
001045r 3               ; ## DECIMAL ( -- ) "Change radix base to decimal"
001045r 3               ; ## "decimal"  auto  ANS core
001045r 3                       ; """https://forth-standard.org/standard/core/DECIMAL"""
001045r 3               xt_decimal:
001045r 3  A9 0A                        lda #10
001047r 3  85 rr                        sta base
001049r 3  64 rr                        stz base+1              ; paranoid
00104Br 3               
00104Br 3  60           z_decimal:      rts
00104Cr 3               
00104Cr 3               
00104Cr 3               ; ## DEFER ( "name" -- ) "Create a placeholder for words by name"
00104Cr 3               ; ## "defer"  auto  ANS core ext
00104Cr 3                       ; """https://forth-standard.org/standard/core/DEFER
00104Cr 3                       ; Reserve an name that can be linked to various xt by IS.
00104Cr 3                       ;
00104Cr 3                       ; The ANS reference implementation is
00104Cr 3                       ;       CREATE ['] ABORT , DOES> @ EXECUTE ;
00104Cr 3                       ; But we use this routine as a low-level word so things go faster
00104Cr 3               
00104Cr 3               xt_defer:
00104Cr 3  20 rr rr                     jsr xt_create
00104Fr 3               
00104Fr 3                               ; CREATE by default installs a subroutine jump to DOVAR,
00104Fr 3                               ; but we actually want DODEFER this time. Go back two
00104Fr 3                               ; bytes and repace the subroutine jump target
00104Fr 3  A5 rr                        lda cp          ; LSB
001051r 3  38                           sec
001052r 3  E9 02                        sbc #2
001054r 3  85 rr                        sta tmp1
001056r 3               
001056r 3  A5 rr                        lda cp+1        ; MSB
001058r 3  E9 00                        sbc #0          ; we only care about the borrow
00105Ar 3  85 rr                        sta tmp1+1
00105Cr 3               
00105Cr 3                               ; Save the target address
00105Cr 3  A0 00                        ldy #0
00105Er 3  A9 rr                        lda #<dodefer   ; LSB
001060r 3  91 rr                        sta (tmp1),y
001062r 3  C8                           iny
001063r 3  A9 rr                        lda #>dodefer   ; MSB
001065r 3  91 rr                        sta (tmp1),y
001067r 3               
001067r 3               
001067r 3                               ; DODEFER executes the next address it finds after
001067r 3                               ; its call. As default, we include the error
001067r 3                               ; "Defer not defined"
001067r 3  A9 rr                        lda #<defer_error
001069r 3  92 rr                        sta (cp)
00106Br 3  E6 rr                        inc cp
00106Dr 3  D0 02                        bne @1
00106Fr 3  E6 rr                        inc cp+1
001071r 3               @1:
001071r 3  A9 rr                        lda #>defer_error
001073r 3  92 rr                        sta (cp)
001075r 3  E6 rr                        inc cp
001077r 3  D0 02                        bne @2
001079r 3  E6 rr                        inc cp+1
00107Br 3               @2:
00107Br 3  20 rr rr                     jsr adjust_z    ; adjust header to correct length
00107Er 3               
00107Er 3  60           z_defer:        rts
00107Fr 3               
00107Fr 3               
00107Fr 3               
00107Fr 3               ; ## DEFER_FETCH ( xt1 -- xt2 ) "Get the current XT for a deferred word"
00107Fr 3               ; ## "defer@"  auto  ANS core ext
00107Fr 3                       ; """http://forth-standard.org/standard/core/DEFERFetch"""
00107Fr 3               
00107Fr 3               xt_defer_fetch:
00107Fr 3                               ; No underflow checking as >BODY does it.
00107Fr 3  20 rr rr                     jsr xt_to_body
001082r 3  20 rr rr                     jsr xt_fetch
001085r 3  60           z_defer_fetch:  rts
001086r 3               
001086r 3               
001086r 3               
001086r 3               ; ## DEFER_STORE ( xt2 x1 -- ) "Set xt1 to execute xt2"
001086r 3               ; ## "defer!"  auto  ANS core ext
001086r 3                       ; """http://forth-standard.org/standard/core/DEFERStore"""
001086r 3               
001086r 3               xt_defer_store:
001086r 3                               ; No underflow checking as >BODY and ! do it.
001086r 3  20 rr rr                     jsr xt_to_body
001089r 3  20 rr rr                     jsr xt_store
00108Cr 3  60           z_defer_store:  rts
00108Dr 3               
00108Dr 3               
00108Dr 3               
00108Dr 3               ; ## DEFINITIONS ( -- ) "Make first wordlist in search order the current wordlist"
00108Dr 3               ; ## "definitions" auto ANS search
00108Dr 3               xt_definitions:
00108Dr 3  A0 1F                        ldy #search_order_offset    ; Transfer byte variable
00108Fr 3  B1 rr                        lda (up),y                  ; SEARCH_ORDER[0] to
001091r 3  A0 04                        ldy #current_offset         ; byte variable CURRENT.
001093r 3  91 rr                        sta (up),y
001095r 3  60           z_definitions:  rts
001096r 3               
001096r 3               
001096r 3               ; ## DEPTH ( -- u ) "Get number of cells (not bytes) used by stack"
001096r 3               ; ## "depth"  auto  ANS core
001096r 3                       ; """https://forth-standard.org/standard/core/DEPTH"""
001096r 3               xt_depth:
001096r 3  A9 rr                        lda #dsp0
001098r 3  86 rr                        stx tmpdsp
00109Ar 3  38                           sec
00109Br 3  E5 rr                        sbc tmpdsp
00109Dr 3               
00109Dr 3                               ; divide by two because each cell is two bytes
00109Dr 3  4A                           lsr
00109Er 3               
00109Er 3  CA                           dex
00109Fr 3  CA                           dex
0010A0r 3  95 00                        sta 0,x
0010A2r 3  74 01                        stz 1,x
0010A4r 3               
0010A4r 3  60           z_depth:        rts
0010A5r 3               
0010A5r 3               
0010A5r 3               ; ## DIGIT_QUESTION ( char -- u f | char f ) "Convert ASCII char to number"
0010A5r 3               ; ## "digit?"  auto  Tali Forth
0010A5r 3                       ; """Inspired by the pForth instruction DIGIT, see
0010A5r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
0010A5r 3                       ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to
0010A5r 3                       ; pForth, we get the base (radix) ourselves instead of having the
0010A5r 3                       ; user provide it. There is no standard name for this routine, which
0010A5r 3                       ; itself is not ANS; we use DIGIT? following pForth and Gforth.
0010A5r 3                       ; """
0010A5r 3               
0010A5r 3               xt_digit_question:
0010A5r 3  20 rr rr                     jsr underflow_1
0010A8r 3               
0010A8r 3                               ; one way or another, we're going to need room for the
0010A8r 3                               ; flag on the stack
0010A8r 3  CA                           dex
0010A9r 3  CA                           dex
0010AAr 3  74 00                        stz 0,x                 ; default flag is failure
0010ACr 3  74 01                        stz 1,x
0010AEr 3  74 03                        stz 3,x                 ; paranoid
0010B0r 3               
0010B0r 3                               ; Check the character, now in the LSB of NOS. First, make
0010B0r 3                               ; sure we're not below the ASCII code for "0"
0010B0r 3  B5 02                        lda 2,x
0010B2r 3  C9 30                        cmp #'0'
0010B4r 3  90 23                        bcc @done               ; failure flag already set
0010B6r 3               
0010B6r 3                               ; Next, see if we are below "9", because that would make
0010B6r 3                               ; this a normal number
0010B6r 3  C9 3A                        cmp #'9'+1               ; this is actually ":"
0010B8r 3  90 12                        bcc @checkbase
0010BAr 3               
0010BAr 3                               ; Well, then let's see if this is the gap between "9" and "A"
0010BAr 3                               ; so we can treat the whole range as a number
0010BAr 3  C9 41                        cmp #'A'
0010BCr 3  90 1B                        bcc @done               ; failure flag is already set
0010BEr 3               
0010BEr 3                               ; probably a letter, so we make sure it is uppercase
0010BEr 3  C9 61                        cmp #'a'
0010C0r 3  90 07                        bcc @case_done          ; not lower case, too low
0010C2r 3  C9 7B                        cmp #'z'+1
0010C4r 3  B0 03                        bcs @case_done          ; not lower case, too high
0010C6r 3               
0010C6r 3  18                           clc                     ; just right
0010C7r 3  69 E0                        adc #$e0                ; offset to upper case (wraps)
0010C9r 3               
0010C9r 3               @case_done:
0010C9r 3                               ; get rid of the gap between "9" and "A" so we can treat
0010C9r 3                               ; the whole range as one number
0010C9r 3  38                           sec
0010CAr 3  E9 07                        sbc #7                  ; fall through to @checkbase
0010CCr 3               
0010CCr 3               @checkbase:
0010CCr 3                               ; we have a number, now see if it falls inside the range
0010CCr 3                               ; provided by BASE
0010CCr 3  38                           sec
0010CDr 3  E9 30                        sbc #'0'                 ; this is also the conversion step
0010CFr 3  C5 rr                        cmp base
0010D1r 3  B0 06                        bcs @done               ; already have false flag
0010D3r 3               
0010D3r 3                               ; Found a legal number
0010D3r 3  95 02                        sta 2,x                 ; put number in NOS
0010D5r 3  D6 00                        dec 0,x                 ; set success flag
0010D7r 3  D6 01                        dec 1,x
0010D9r 3               
0010D9r 3               @done:
0010D9r 3               z_digit_question:
0010D9r 3  60                           rts
0010DAr 3               
0010DAr 3               
0010DAr 3               ; ## DISASM ( addr u -- ) "Disassemble a block of memory"
0010DAr 3               ; ## "disasm"  tested  Tali Forth
0010DAr 3                       ; """Convert a segment of memory to assembler output. This
0010DAr 3                       ; word is vectored so people can add their own disassembler.
0010DAr 3                       ; Natively, this produces Simpler Assembly Notation (SAN)
0010DAr 3                       ; code, see the section on The Disassembler in the manual and
0010DAr 3                       ; the file disassembler.asm for more details.
0010DAr 3                       ; """
0010DAr 3               xt_disasm:
0010DAr 3  20 rr rr                     jsr underflow_2
0010DDr 3                           .ifdef TALI_OPTIONAL_ASSEMBLER
0010DDr 3  20 rr rr                     jsr disassembler
0010E0r 3                           .endif
0010E0r 3               
0010E0r 3  60           z_disasm:       rts
0010E1r 3               
0010E1r 3               
0010E1r 3               ; ## DNEGATE ( d -- d ) "Negate double cell number"
0010E1r 3               ; ## "dnegate"  auto  ANS double
0010E1r 3                       ; """https://forth-standard.org/standard/double/DNEGATE"""
0010E1r 3               xt_dnegate:
0010E1r 3  20 rr rr                     jsr underflow_2 ; double number
0010E4r 3               
0010E4r 3  A0 00             		ldy #0
0010E6r 3  38                           sec
0010E7r 3               
0010E7r 3  98                           tya
0010E8r 3  F5 02                        sbc 2,x         ; LSB of low cell
0010EAr 3  95 02                        sta 2,x
0010ECr 3               
0010ECr 3  98                           tya
0010EDr 3  F5 03                        sbc 3,x         ; MSB of low cell
0010EFr 3  95 03                        sta 3,x
0010F1r 3               
0010F1r 3  98                           tya
0010F2r 3  F5 00                        sbc 0,x         ; LSB of high cell
0010F4r 3  95 00                        sta 0,x
0010F6r 3               
0010F6r 3  98                           tya
0010F7r 3  F5 01                        sbc 1,x         ; MSB of high cell
0010F9r 3  95 01                        sta 1,x
0010FBr 3               
0010FBr 3  60           z_dnegate:      rts
0010FCr 3               
0010FCr 3               
0010FCr 3               ; ## QUESTION_DO ( limit start -- )(R: -- limit start) "Conditional loop start"
0010FCr 3               ; ## "?do"  auto  ANS core ext
0010FCr 3                       ; """https://forth-standard.org/standard/core/qDO"""
0010FCr 3               xt_question_do:
0010FCr 3                               ; ?DO shares most of its code with DO. We use the tmp1 flag
0010FCr 3                               ; to mark which is which
0010FCr 3  A9 FF                        lda #$ff                ; -1 is ?DO, jump to common code
0010FEr 3  85 rr                        sta tmp1
001100r 3  80 02                        bra do_common           ; skip flag for DO
001102r 3               
001102r 3               ; ## DO ( limit start -- )(R: -- limit start)  "Start a loop"
001102r 3               ; ## "do"  auto  ANS core
001102r 3                       ; """https://forth-standard.org/standard/core/DO
001102r 3                       ;
001102r 3                       ; Compile-time part of DO. Could be realized in Forth as
001102r 3                       ;       : DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY
001102r 3                       ; but we do it in assembler for speed. To work with LEAVE, we compile
001102r 3                       ; a routine that pushes the end address to the Return Stack at run
001102r 3                       ; time. This is based on a suggestion by Garth Wilson, see
001102r 3                       ; the Control Flow section of the manual for details.
001102r 3                       ;
001102r 3                       ; This may not be native compile. Don't check for a stack underflow
001102r 3                       ; """
001102r 3               
001102r 3               xt_do:
001102r 3                               ; DO and ?DO share most of their code, use tmp1 as a flag.
001102r 3  64 rr                        stz tmp1                ; 0 is DO, drop through to DO_COMMON
001104r 3               do_common:
001104r 3                               ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
001104r 3                               ; compile the address we need to LDA at runtime
001104r 3  CA                           dex
001105r 3  CA                           dex
001106r 3  A5 rr                        lda cp
001108r 3  95 00                        sta 0,x                 ; LSB
00110Ar 3  A5 rr                        lda cp+1
00110Cr 3  95 01                        sta 1,x                 ; MSB   ( limit start here )
00110Er 3               
00110Er 3                               ; now we compile six dummy bytes that LOOP/+LOOP will
00110Er 3                               ; replace by the actual LDA/PHA instructions
00110Er 3  A9 05                        lda #5                  ; we don't really care about the value,
001110r 3  A8                           tay                     ; so we use 5 to be tricky
001111r 3               @loop:
001111r 3  91 rr                        sta (cp),y
001113r 3  88                           dey
001114r 3  10 FB                        bpl @loop
001116r 3               
001116r 3                               ; update CP
001116r 3  1A                           inc             ; we used 5 as a dummy value, this is why
001117r 3  18                           clc
001118r 3  65 rr                        adc cp
00111Ar 3  85 rr                        sta cp
00111Cr 3  90 02                        bcc @1
00111Er 3  E6 rr                        inc cp+1
001120r 3               @1:
001120r 3                               ; compile the (?DO) portion of ?DO if appropriate
001120r 3  A5 rr                        lda tmp1
001122r 3  F0 17                        beq @compile_do
001124r 3               
001124r 3                               ; We came from ?DO, so compile its runtime first. We do
001124r 3                               ; this with a quick loop because we know it has to be
001124r 3                               ; Always Native anyway
001124r 3  A0 14                        ldy #question_do_runtime_end-question_do_runtime
001126r 3  5A                           phy             ; save counter to calculate new CP
001127r 3               @2:
001127r 3  B9 rr rr                     lda question_do_runtime,y
00112Ar 3  91 rr                        sta (cp),y
00112Cr 3  88                           dey
00112Dr 3  10 F8                        bpl @2
00112Fr 3               
00112Fr 3                               ; adjust CP
00112Fr 3  68                           pla             ; retrieve counter
001130r 3  18                           clc
001131r 3  65 rr                        adc cp
001133r 3  85 rr                        sta cp
001135r 3  A5 rr                        lda cp+1
001137r 3  69 00                        adc #0          ; only care about carry
001139r 3  85 rr                        sta cp+1        ; fall through to @compile_do
00113Br 3               
00113Br 3               @compile_do:
00113Br 3                               ; compile runtime part of DO.
00113Br 3  A0 24                        ldy #do_runtime_end-do_runtime  ; counter
00113Dr 3  5A                           phy             ; save counter to calculate new CP
00113Er 3               @3:
00113Er 3  B9 rr rr                     lda do_runtime,y
001141r 3  91 rr                        sta (cp),y
001143r 3  88                           dey
001144r 3  10 F8                        bpl @3
001146r 3               
001146r 3                               ; adjust CP
001146r 3  68                           pla             ; retrieve counter
001147r 3  18                           clc
001148r 3  65 rr                        adc cp
00114Ar 3  85 rr                        sta cp
00114Cr 3  A5 rr                        lda cp+1
00114Er 3  69 00                        adc #0          ; only care about carry
001150r 3  85 rr                        sta cp+1
001152r 3               
001152r 3                               ; HERE, hardcoded for speed. We put it on the Data Stack
001152r 3                               ; where LOOP/+LOOP takes it from. Note this has nothing to
001152r 3                               ; do with the HERE we're saving for LEAVE
001152r 3  CA                           dex
001153r 3  CA                           dex
001154r 3  A5 rr                        lda cp          ; LSB
001156r 3  95 00                        sta 0,x
001158r 3  A5 rr                        lda cp+1        ; MSB
00115Ar 3  95 01                        sta 1,x
00115Cr 3               z_question_do:
00115Cr 3  60           z_do:           rts
00115Dr 3               
00115Dr 3               
00115Dr 3               do_runtime:
00115Dr 3                       ; """Runtime routine for DO loop. Note that ANS loops quit when the
00115Dr 3                       ; boundry of limit-1 and limit is reached, a different mechanism than
00115Dr 3                       ; the FIG Forth loop (you can see which version you have by running
00115Dr 3                       ; a loop with start and limit as the same value, for instance
00115Dr 3                       ; 0 0 DO -- these will walk through the number space). We use a
00115Dr 3                       ; "fudge factor" for the limit that makes the Overflow Flag trip when
00115Dr 3                       ; it is reached; see http://forum.6502.org/viewtopic.php?f=9&t=2026
00115Dr 3                       ; for further discussion of this. The source given there for
00115Dr 3                       ; this idea is Laxen & Perry F83. -- This routine is called (DO)
00115Dr 3                       ; in some Forths. Usually, we would define this as a separate word
00115Dr 3                       ; and compile it with COMPILE, and the Always Native (AN) flag.
00115Dr 3                       ; However, we can do it faster if we just copy the bytes
00115Dr 3                       ; of this routine with a simple loop in DO.
00115Dr 3                       ; """
00115Dr 3                               ; First step: create fudge factor (FUFA) by subtracting the
00115Dr 3                               ; limit from $8000, the number that will trip the overflow
00115Dr 3                               ; flag
00115Dr 3  38                           sec
00115Er 3  A9 00                        lda #0
001160r 3  F5 02                        sbc 2,x         ; LSB of limit
001162r 3  95 02                        sta 2,x         ; save FUFA for later use
001164r 3               
001164r 3  A9 80                        lda #$80
001166r 3  F5 03                        sbc 3,x         ; MSB of limit
001168r 3  95 03                        sta 3,x         ; save FUFA for later use
00116Ar 3  48                           pha             ; FUFA replaces limit on R stack
00116Br 3  B5 02                        lda 2,x         ; LSB of limit
00116Dr 3  48                           pha
00116Er 3               
00116Er 3                               ; Second step: index is FUFA plus original index
00116Er 3  18                           clc
00116Fr 3  B5 00                        lda 0,x         ; LSB of original index
001171r 3  75 02                        adc 2,x         ; add LSB of FUFA
001173r 3  95 00                        sta 0,x
001175r 3  B5 01                        lda 1,x         ; MSB of orginal index
001177r 3  75 03                        adc 3,x         ; add MSB of FUFA
001179r 3  48                           pha
00117Ar 3  B5 00                        lda 0,x         ; LSB of index
00117Cr 3  48                           pha
00117Dr 3               
00117Dr 3                               ; we've saved the FUFA on the NOS of the R stack, so we can
00117Dr 3                               ; use it later. Clean the Data Stack
00117Dr 3  E8                           inx
00117Er 3  E8                           inx
00117Fr 3  E8                           inx
001180r 3  E8                           inx             ; no RTS because this is copied into code
001181r 3               do_runtime_end:
001181r 3               
001181r 3               question_do_runtime:
001181r 3               
001181r 3                       ; """This is called (?DO) in some Forths. See the explanation at
001181r 3                       ; do_runtime for the background on this design
001181r 3                       ; """
001181r 3                               ; see if TOS and NOS are equal. Change this to assembler
001181r 3                               ; for speed
001181r 3  20 rr rr                     jsr xt_two_dup          ; ( n1 n2 n1 n2 )
001184r 3  20 rr rr                     jsr xt_equal            ; ( -- n1 n2 f )
001187r 3               
001187r 3  B5 00                        lda 0,x
001189r 3  15 01                        ora 1,x
00118Br 3  F0 06                        beq @do_do
00118Dr 3               
00118Dr 3                               ; We're equal, so dump everything and jump beyond the loop.
00118Dr 3                               ; But first, dump six entries off of the Data Stack
00118Dr 3  8A                           txa
00118Er 3  18                           clc
00118Fr 3  69 06                        adc #6
001191r 3  AA                           tax
001192r 3               
001192r 3                               ; Then abort the whole loop
001192r 3  60                           rts
001193r 3               @do_do:
001193r 3  E8                           inx             ; clear flag from EQUAL off stack
001194r 3  E8                           inx             ; no RTS because this is copied into code
001195r 3               question_do_runtime_end:
001195r 3               
001195r 3               
001195r 3               
001195r 3               ; ## DOES ( -- ) "Add payload when defining new words"
001195r 3               ; ## "does>"  auto  ANS core
001195r 3                       ; """https://forth-standard.org/standard/core/DOES
001195r 3                       ; Create the payload for defining new defining words. See
001195r 3                       ; http://www.bradrodriguez.com/papers/moving3.htm and
001195r 3                       ; the Developer Guide in the manual for a discussion of
001195r 3                       ; DOES>'s internal workings. This uses tmp1 and tmp2.
001195r 3                       ; """
001195r 3               
001195r 3               xt_does:
001195r 3                               ; compile a subroutine jump to runtime of DOES>
001195r 3  A0 rr                        ldy #>does_runtime
001197r 3  A9 rr                        lda #<does_runtime
001199r 3  20 rr rr                     jsr cmpl_subroutine
00119Cr 3               
00119Cr 3                               ; compile a subroutine jump to DODOES. In traditional
00119Cr 3                               ; terms, this is the Code Field Area (CFA) of the new
00119Cr 3                               ; word
00119Cr 3  A0 rr                        ldy #>dodoes
00119Er 3  A9 rr                        lda #<dodoes
0011A0r 3  20 rr rr                     jsr cmpl_subroutine
0011A3r 3               
0011A3r 3  60           z_does:         rts
0011A4r 3               
0011A4r 3               
0011A4r 3               does_runtime:
0011A4r 3                       ; """Runtime portion of DOES>. This replaces the subroutine jump
0011A4r 3                       ; to DOVAR that CREATE automatically encodes by a jump to the
0011A4r 3                       ; address that contains a subroutine jump to DODOES. We don't
0011A4r 3                       ; jump to DODOES directly because we need to work our magic with
0011A4r 3                       ; the return addresses. This routine is also known as "(DOES)" in
0011A4r 3                       ; other Forths
0011A4r 3                       ; """
0011A4r 3               
0011A4r 3  7A                           ply             ; LSB
0011A5r 3  68                           pla             ; MSB
0011A6r 3               
0011A6r 3  C8                           iny
0011A7r 3  D0 01                        bne @1
0011A9r 3  1A                           inc
0011AAr 3               @1:
0011AAr 3  84 rr                        sty tmp1
0011ACr 3  85 rr                        sta tmp1+1
0011AEr 3               
0011AEr 3                               ; CREATE has also already modified the DP to point to the new
0011AEr 3                               ; word. We have no idea which instructions followed the CREATE
0011AEr 3                               ; command if there is a DOES> so the CP could point anywhere
0011AEr 3                               ; by now. The address of the word's xt is four bytes down.
0011AEr 3  20 rr rr                     jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
0011B1r 3  A5 rr                        lda dp
0011B3r 3  18                           clc
0011B4r 3  69 04                        adc #4
0011B6r 3  85 rr                        sta tmp2
0011B8r 3  A5 rr                        lda dp+1
0011BAr 3  69 00                        adc #0          ; we only care about the carry
0011BCr 3  85 rr                        sta tmp2+1
0011BEr 3               
0011BEr 3                               ; Now we get that address and add one byte to skip over the JSR
0011BEr 3                               ; opcode
0011BEr 3  B2 rr                        lda (tmp2)
0011C0r 3  18                           clc
0011C1r 3  69 01                        adc #1
0011C3r 3  85 rr                        sta tmp3
0011C5r 3  A0 01                        ldy #1
0011C7r 3  B1 rr                        lda (tmp2),y
0011C9r 3  69 00                        adc #0          ; we only care about the carry
0011CBr 3  85 rr                        sta tmp3+1
0011CDr 3               
0011CDr 3                               ; Replace the DOVAR address with our own
0011CDr 3  A5 rr                        lda tmp1        ; LSB
0011CFr 3  92 rr                        sta (tmp3)
0011D1r 3  A5 rr                        lda tmp1+1
0011D3r 3  91 rr                        sta (tmp3),y    ; Y is still 1
0011D5r 3               
0011D5r 3                               ; Since we removed the return address that brought us here, we
0011D5r 3                               ; go back to whatever the main routine was. Otherwise, we we
0011D5r 3                               ; smash into the subroutine jump to DODOES.
0011D5r 3  60                           rts
0011D6r 3               
0011D6r 3               
0011D6r 3               
0011D6r 3               ; ## DOT ( u -- ) "Print TOS"
0011D6r 3               ; ## "."  auto  ANS core
0011D6r 3                       ; """https://forth-standard.org/standard/core/d"""
0011D6r 3               
0011D6r 3               xt_dot:
0011D6r 3  20 rr rr                     jsr underflow_1
0011D9r 3               
0011D9r 3  20 rr rr                     jsr xt_dup                      ; ( n n )
0011DCr 3  20 rr rr                     jsr xt_abs                      ; ( n u )
0011DFr 3  20 rr rr                     jsr xt_zero                     ; ( n u 0 )
0011E2r 3  20 rr rr                     jsr xt_less_number_sign         ; ( n u 0 )
0011E5r 3  20 rr rr                     jsr xt_number_sign_s            ; ( n ud )
0011E8r 3  20 rr rr                     jsr xt_rot                      ; ( ud n )
0011EBr 3  20 rr rr                     jsr xt_sign                     ; ( ud )
0011EEr 3  20 rr rr                     jsr xt_number_sign_greater      ; ( addr u )
0011F1r 3  20 rr rr                     jsr xt_type
0011F4r 3  20 rr rr                     jsr xt_space
0011F7r 3               
0011F7r 3  60           z_dot:          rts
0011F8r 3               
0011F8r 3               
0011F8r 3               
0011F8r 3               ; ## DOT_PAREN ( -- ) "Print input up to close paren .( comment )"
0011F8r 3               ; ## ".("  auto  ANS core
0011F8r 3                       ; """http://forth-standard.org/standard/core/Dotp"""
0011F8r 3               
0011F8r 3               xt_dot_paren:
0011F8r 3                               ; Put a right paren on the stack.
0011F8r 3  CA                           dex
0011F9r 3  CA                           dex
0011FAr 3  A9 29                        lda #41     ; Right parenthesis
0011FCr 3  95 00                        sta 0,x
0011FEr 3  74 01                        stz 1,x
001200r 3               
001200r 3  20 rr rr                     jsr xt_parse
001203r 3  20 rr rr                     jsr xt_type
001206r 3               
001206r 3  60           z_dot_paren:    rts
001207r 3               
001207r 3               
001207r 3               
001207r 3               ; ## DOT_QUOTE ( "string" -- ) "Print string from compiled word"
001207r 3               ; ## ".""  auto  ANS core ext
001207r 3                       ; """https://forth-standard.org/standard/core/Dotq
001207r 3                       ; Compile string that is printed during run time. ANS Forth wants
001207r 3                       ; this to be compile-only, even though everybody and their friend
001207r 3                       ; uses it for everything. We follow the book here, and recommend
001207r 3                       ; `.(` for general printing.
001207r 3                       ; """
001207r 3               
001207r 3               xt_dot_quote:
001207r 3                               ; we let S" do the heavy lifting. Since we're in
001207r 3                               ; compile mode, it will save the string and reproduce it
001207r 3                               ; during runtime
001207r 3  20 rr rr                     jsr xt_s_quote
00120Ar 3               
00120Ar 3                               ; We then let TYPE do the actual printing
00120Ar 3  A0 rr                        ldy #>xt_type
00120Cr 3  A9 rr                        lda #<xt_type
00120Er 3  20 rr rr                     jsr cmpl_subroutine
001211r 3               
001211r 3  60           z_dot_quote:    rts
001212r 3               
001212r 3               
001212r 3               
001212r 3               ; ## DOT_R ( n u -- ) "Print NOS as unsigned number with TOS with"
001212r 3               ; ## ".r"  tested  ANS core ext
001212r 3                       ; """https://forth-standard.org/standard/core/DotR
001212r 3                       ;
001212r 3                       ; Based on the Forth code
001212r 3                       ;  : .R  >R DUP ABS 0 <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
001212r 3                       ; """
001212r 3               
001212r 3               xt_dot_r:
001212r 3  20 rr rr                     jsr underflow_2
001215r 3               
001215r 3  20 rr rr                     jsr xt_to_r
001218r 3  20 rr rr                     jsr xt_dup
00121Br 3  20 rr rr                     jsr xt_abs
00121Er 3  20 rr rr                     jsr xt_zero
001221r 3  20 rr rr                     jsr xt_less_number_sign
001224r 3  20 rr rr                     jsr xt_number_sign_s
001227r 3  20 rr rr                     jsr xt_rot
00122Ar 3  20 rr rr                     jsr xt_sign
00122Dr 3  20 rr rr                     jsr xt_number_sign_greater
001230r 3  20 rr rr                     jsr xt_r_from
001233r 3  20 rr rr                     jsr xt_over
001236r 3  20 rr rr                     jsr xt_minus
001239r 3  20 rr rr                     jsr xt_spaces
00123Cr 3  20 rr rr                     jsr xt_type
00123Fr 3               
00123Fr 3  60           z_dot_r:        rts
001240r 3               
001240r 3               
001240r 3               
001240r 3               ; ## DOT_S ( -- ) "Print content of Data Stack"
001240r 3               ; ## ".s"  tested  ANS tools
001240r 3                       ; """https://forth-standard.org/standard/tools/DotS
001240r 3                       ; Print content of Data Stack non-distructively. We follow the format
001240r 3                       ; of Gforth and print the number of elements first in brackets,
001240r 3                       ; followed by the Data Stack content (if any).
001240r 3                       ;
001240r 3                       ; Since this is for humans, we don't have to worry about speed.
001240r 3                       ; """
001240r 3               
001240r 3               xt_dot_s:
001240r 3  20 rr rr                     jsr xt_depth    ; ( -- u )
001243r 3               
001243r 3                               ; Print stack depth in brackets
001243r 3  A9 3C                        lda #$3c        ; ASCII for "<"
001245r 3  20 rr rr                     jsr emit_a
001248r 3               
001248r 3                               ; We keep a copy of the number of the things on the stack
001248r 3                               ; to use as a counter later down. This assumes that there
001248r 3                               ; are less than 255 elements on the stack
001248r 3  B5 00                        lda 0,x
00124Ar 3  48                           pha
00124Br 3               
00124Br 3                               ; print unsigned number without the trailing space
00124Br 3  CA                           dex             ; DUP
00124Cr 3  CA                           dex
00124Dr 3  95 00                        sta 0,x
00124Fr 3  74 01                        stz 1,x
001251r 3               
001251r 3  20 rr rr                     jsr print_u
001254r 3               
001254r 3  A9 3E                        lda #$3e        ; ASCII for ">"
001256r 3  20 rr rr                     jsr emit_a
001259r 3  A9 20                        lda #AscSP      ; ASCII for SPACE
00125Br 3  20 rr rr                     jsr emit_a
00125Er 3               
00125Er 3  E8                           inx
00125Fr 3  E8                           inx
001260r 3               
001260r 3                               ; There will be lots of cases where the stack is empty. If that
001260r 3                               ; is so, get out of here quickly
001260r 3  E0 rr                        cpx #dsp0
001262r 3  F0 1E                        beq @done
001264r 3               
001264r 3               @have_stack:
001264r 3                               ; We have at least one element on the stack. The depth of the
001264r 3                               ; stack is on the stack, we can use it as a counter. We go
001264r 3                               ; from bottom to top
001264r 3  7A                           ply
001265r 3               
001265r 3  A9 rr                        lda #dsp0-1     ; go up one to avoid garbage
001267r 3  85 rr                        sta tmp3
001269r 3  64 rr                        stz tmp3+1      ; must be zero page on the 65c02
00126Br 3               @loop:
00126Br 3  CA                           dex
00126Cr 3  CA                           dex
00126Dr 3               
00126Dr 3  B2 rr                        lda (tmp3)
00126Fr 3  95 01                        sta 1,x
001271r 3  C6 rr                        dec tmp3
001273r 3               
001273r 3  B2 rr                        lda (tmp3)
001275r 3  95 00                        sta 0,x
001277r 3  C6 rr                        dec tmp3
001279r 3  5A                           phy
00127Ar 3               
00127Ar 3  20 rr rr                     jsr xt_dot
00127Dr 3               
00127Dr 3  7A                           ply
00127Er 3  88                           dey
00127Fr 3  D0 EA                        bne @loop
001281r 3               
001281r 3  48                           pha             ; dummy to balance stack
001282r 3               @done:
001282r 3  68                           pla
001283r 3  60           z_dot_s:        rts
001284r 3               
001284r 3               
001284r 3               
001284r 3               ; ## D_DOT ( d -- ) "Print double"
001284r 3               ; ## "d."  tested  ANS double
001284r 3                       ; """http://forth-standard.org/standard/double/Dd"""
001284r 3                       ;
001284r 3                       ; From the Forth code:
001284r 3                       ; : D. TUCK DABS <# #S ROT SIGN #> TYPE SPACE ;
001284r 3                       ; """
001284r 3               
001284r 3               xt_d_dot:
001284r 3  20 rr rr                     jsr underflow_2
001287r 3               
001287r 3  20 rr rr                     jsr xt_tuck
00128Ar 3  20 rr rr                     jsr xt_dabs
00128Dr 3  20 rr rr                     jsr xt_less_number_sign
001290r 3  20 rr rr                     jsr xt_number_sign_s
001293r 3  20 rr rr                     jsr xt_rot
001296r 3  20 rr rr                     jsr xt_sign
001299r 3  20 rr rr                     jsr xt_number_sign_greater
00129Cr 3  20 rr rr                     jsr xt_type
00129Fr 3  20 rr rr                     jsr xt_space
0012A2r 3               
0012A2r 3  60           z_d_dot:        rts
0012A3r 3               
0012A3r 3               
0012A3r 3               
0012A3r 3               ; ## D_DOT_R ( d u -- ) "Print double right-justified u wide"
0012A3r 3               ; ## "d.r"  tested  ANS double
0012A3r 3                       ; """http://forth-standard.org/standard/double/DDotR"""
0012A3r 3                       ; Based on the Forth code
0012A3r 3                       ;  : D.R >R TUCK DABS <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
0012A3r 3                       ; """
0012A3r 3               
0012A3r 3               xt_d_dot_r:
0012A3r 3  20 rr rr                     jsr underflow_3
0012A6r 3                               ; From the forth code:
0012A6r 3  20 rr rr                     jsr xt_to_r
0012A9r 3  20 rr rr                     jsr xt_tuck
0012ACr 3  20 rr rr                     jsr xt_dabs
0012AFr 3  20 rr rr                     jsr xt_less_number_sign
0012B2r 3  20 rr rr                     jsr xt_number_sign_s
0012B5r 3  20 rr rr                     jsr xt_rot
0012B8r 3  20 rr rr                     jsr xt_sign
0012BBr 3  20 rr rr                     jsr xt_number_sign_greater
0012BEr 3  20 rr rr                     jsr xt_r_from
0012C1r 3  20 rr rr                     jsr xt_over
0012C4r 3  20 rr rr                     jsr xt_minus
0012C7r 3  20 rr rr                     jsr xt_spaces
0012CAr 3  20 rr rr                     jsr xt_type
0012CDr 3               
0012CDr 3  60           z_d_dot_r:      rts
0012CEr 3               
0012CEr 3               
0012CEr 3               
0012CEr 3               ; ## DROP ( u -- ) "Pop top entry on Data Stack"
0012CEr 3               ; ## "drop"  auto  ANS core
0012CEr 3                       ; """https://forth-standard.org/standard/core/DROP"""
0012CEr 3               xt_drop:
0012CEr 3  20 rr rr                     jsr underflow_1
0012D1r 3               
0012D1r 3  E8                           inx
0012D2r 3  E8                           inx
0012D3r 3               
0012D3r 3  60           z_drop:         rts
0012D4r 3               
0012D4r 3               
0012D4r 3               ; ## DUMP ( addr u -- ) "Display a memory region"
0012D4r 3               ; ## "dump"  tested  ANS tools
0012D4r 3                       ; """https://forth-standard.org/standard/tools/DUMP
0012D4r 3                       ;
0012D4r 3                       ; DUMP's exact output is defined as "implementation dependent".
0012D4r 3                       ; This is in assembler because it is
0012D4r 3                       ; useful for testing and development, so we want to have it work
0012D4r 3                       ; as soon as possible. Uses TMP2
0012D4r 3                       ; """
0012D4r 3               
0012D4r 3               xt_dump:
0012D4r 3  20 rr rr                     jsr underflow_2
0012D7r 3               @row:
0012D7r 3                               ; start counter for 16 numbers per row
0012D7r 3  A0 10                        ldy #16
0012D9r 3               
0012D9r 3                               ; We use TMP2 as the index for the ASCII characters
0012D9r 3                               ; that we print at the and of the hex block. We
0012D9r 3                               ; start saving them at HERE (CP)
0012D9r 3  64 rr                        stz tmp2
0012DBr 3               
0012DBr 3  20 rr rr                     jsr xt_cr
0012DEr 3               
0012DEr 3                               ; print address number
0012DEr 3  B5 03                        lda 3,x
0012E0r 3  20 rr rr                     jsr byte_to_ascii
0012E3r 3  B5 02                        lda 2,x
0012E5r 3  20 rr rr                     jsr byte_to_ascii
0012E8r 3               
0012E8r 3  20 rr rr                     jsr xt_space
0012EBr 3  20 rr rr                     jsr xt_space
0012EEr 3               @loop:
0012EEr 3                               ; if there are zero bytes left to display, we're done
0012EEr 3  B5 00                        lda 0,x
0012F0r 3  15 01                        ora 1,x
0012F2r 3  F0 39                        beq @all_printed
0012F4r 3               
0012F4r 3                               ; dump the contents
0012F4r 3  A1 02                        lda (2,x)
0012F6r 3  48                           pha                     ; byte_to_ascii destroys A
0012F7r 3  20 rr rr                     jsr byte_to_ascii
0012FAr 3  20 rr rr                     jsr xt_space
0012FDr 3  68                           pla
0012FEr 3               
0012FEr 3                               ; Handle ASCII printing
0012FEr 3  20 rr rr                     jsr is_printable
001301r 3  B0 02                        bcs @printable
001303r 3  A9 2E                        lda #'.'                 ; Print dot if not printable
001305r 3               @printable:
001305r 3  5A                           phy                     ; save counter
001306r 3  A4 rr                        ldy tmp2
001308r 3  91 rr                        sta (cp),y
00130Ar 3  E6 rr                        inc tmp2
00130Cr 3  7A                           ply
00130Dr 3               
00130Dr 3                               ; extra space after eight bytes
00130Dr 3  C0 09                        cpy #9
00130Fr 3  D0 03                        bne @next_char
001311r 3  20 rr rr                     jsr xt_space
001314r 3               
001314r 3               @next_char:
001314r 3  F6 02                        inc 2,x
001316r 3  D0 02                        bne @counter
001318r 3  F6 03                        inc 3,x
00131Ar 3               
00131Ar 3               @counter:
00131Ar 3                               ; loop counter
00131Ar 3  B5 00                        lda 0,x
00131Cr 3  D0 02                        bne @1
00131Er 3  D6 01                        dec 1,x
001320r 3               @1:
001320r 3  D6 00                        dec 0,x
001322r 3  88                           dey
001323r 3  D0 C9                        bne @loop               ; next byte
001325r 3               
001325r 3                               ; Done with one line, print the ASCII version of these
001325r 3                               ; characters
001325r 3  20 rr rr                     jsr xt_space
001328r 3  20 rr rr                     jsr print_ascii
00132Br 3               
00132Br 3  80 AA                        bra @row                ; new row
00132Dr 3               
00132Dr 3               @all_printed:
00132Dr 3                               ; See if there are any ASCII characters in the buffer
00132Dr 3                               ; left to print
00132Dr 3  A5 rr                        lda tmp2
00132Fr 3  F0 06                        beq @done
001331r 3               
001331r 3                               ; In theory, we could try to make the ASCII part line
001331r 3                               ; up with the line before it. But that is a hassle (we
001331r 3                               ; use three bytes for each missed hex entry, and
001331r 3                               ; then there is the gap after eight entries) and it
001331r 3                               ; makes it harder to read. We settle for one extra
001331r 3                               ; space instead for the moment
001331r 3  20 rr rr                     jsr xt_space
001334r 3  20 rr rr                     jsr print_ascii
001337r 3               @done:
001337r 3  20 rr rr                     jsr xt_two_drop         ; one byte less than 4x INX
00133Ar 3  60           z_dump:         rts
00133Br 3               
00133Br 3               
00133Br 3               print_ascii:
00133Br 3                               ; Print the ASCII characters that we have saved from
00133Br 3                               ; HERE (CP) to HERE plus whatever is in TMP2. This routine
00133Br 3                               ; is not compiled (DUMP is probably never compiled anyway)
00133Br 3                               ; but we keep it inside the scope of DUMP.
00133Br 3  A0 00                        ldy #0
00133Dr 3               @ascii_loop:
00133Dr 3  B1 rr                        lda (cp),y
00133Fr 3  20 rr rr                     jsr emit_a
001342r 3  C8                           iny
001343r 3               
001343r 3                               ; extra space after eight chars
001343r 3  C0 08                        cpy #8
001345r 3  D0 03                        bne @1
001347r 3  20 rr rr                     jsr xt_space
00134Ar 3               @1:
00134Ar 3  C6 rr                        dec tmp2
00134Cr 3  D0 EF                        bne @ascii_loop
00134Er 3               
00134Er 3  60                           rts
00134Fr 3               
00134Fr 3               
00134Fr 3               
00134Fr 3               ; ## DUP ( u -- u u ) "Duplicate TOS"
00134Fr 3               ; ## "dup"  auto  ANS core
00134Fr 3                       ; """https://forth-standard.org/standard/core/DUP"""
00134Fr 3               xt_dup:
00134Fr 3  20 rr rr                     jsr underflow_1
001352r 3               
001352r 3  CA                           dex
001353r 3  CA                           dex
001354r 3               
001354r 3  B5 02                        lda 2,x         ; LSB
001356r 3  95 00                        sta 0,x
001358r 3  B5 03                        lda 3,x         ; MSB
00135Ar 3  95 01                        sta 1,x
00135Cr 3               
00135Cr 3  60           z_dup:          rts
00135Dr 3               
00135Dr 3               
00135Dr 3               ; ## ED ( -- u ) "Line-based editor"
00135Dr 3               ; ## "ed"  fragment  Tali Forth
00135Dr 3                       ; """Start the line-based editor ed6502. See separate file
00135Dr 3                       ; ed.asm or the manual for details.
00135Dr 3                       ; """
00135Dr 3               xt_ed:
00135Dr 3                       .ifdef ed6502
00135Dr 3                               jsr ed6502      ; kept in separate file
00135Dr 3                       .endif
00135Dr 3               
00135Dr 3  60           z_ed:           rts
00135Er 3               
00135Er 3               
00135Er 3               ; ## EDITOR_WORDLIST ( -- u ) "WID for the Editor wordlist"
00135Er 3               ; ## "editor-wordlist"  tested  Tali Editor
00135Er 3                       ; """ Commonly used like `editor-wordlist >order` to add the editor
00135Er 3                       ; words to the search order so they can be used.  This will need
00135Er 3                       ; to be done before any of the words marked "Tali Editor" can be
00135Er 3                       ; used.  See the tutorial on Wordlists and the Search Order for
00135Er 3                       ; more information.
00135Er 3               
00135Er 3                       ;
00135Er 3                       ; This is a dummy entry, the code is shared with ONE
00135Er 3                       ; """
00135Er 3               
00135Er 3               
00135Er 3               ; ## ELSE (C: orig -- orig) ( -- ) "Conditional flow control"
00135Er 3               ; ## "else"  auto  ANS core
00135Er 3                       ; """http://forth-standard.org/standard/core/ELSE
00135Er 3                       ;
00135Er 3                       ; The code is shared with ENDOF
00135Er 3                       ; """
00135Er 3               
00135Er 3               xt_else:
00135Er 3               xt_endof:
00135Er 3                               ; Put an unconditional branch.
00135Er 3  A0 rr                        ldy #>branch_runtime
001360r 3  A9 rr                        lda #<branch_runtime
001362r 3  20 rr rr                     jsr cmpl_subroutine
001365r 3               
001365r 3                               ; Put the address of the branch address on the stack.
001365r 3  20 rr rr                     jsr xt_here
001368r 3               
001368r 3                               ; Use zero for the branch address for now.
001368r 3                               ; THEN will fill it in later.
001368r 3  20 rr rr                     jsr xt_zero
00136Br 3  20 rr rr                     jsr xt_comma
00136Er 3               
00136Er 3                               ; Get the address to jump to (just after the
00136Er 3                               ; unconditional branch) for the IF to jump to
00136Er 3                               ; when false.
00136Er 3  20 rr rr                     jsr xt_here
001371r 3  20 rr rr                     jsr xt_rot
001374r 3               
001374r 3                               ; Update the original if 0branch address.
001374r 3  20 rr rr                     jsr xt_store
001377r 3               z_else:
001377r 3               z_endof:
001377r 3  60                           rts
001378r 3               
001378r 3               
001378r 3               
001378r 3               branch_runtime:
001378r 3                       ; """Runtime component for a branch. Used by ELSE and ENDOF. This was
001378r 3                       ; formally part of a separate word BRANCH which was later removed.
001378r 3                       ; """
001378r 3               
001378r 3                               ; The address on the Return Stack points to the last byte
001378r 3                               ; of the JSR address, one byte below the branch literal
001378r 3  68                           pla
001379r 3  85 rr                        sta tmpbranch
00137Br 3  68                           pla
00137Cr 3  85 rr                        sta tmpbranch+1
00137Er 3               
00137Er 3                               ; Keep in mind: the address we just popped points one byte
00137Er 3                               ; lower than the branch literal we want to grab
00137Er 3  A0 01                        ldy #1
001380r 3  B1 rr                        lda (tmpbranch),y  ; LSB
001382r 3  85 rr                        sta tmp1
001384r 3  C8                           iny
001385r 3  B1 rr                        lda (tmpbranch),y  ; MSB
001387r 3  85 rr                        sta tmp1+1
001389r 3               
001389r 3  6C rr rr                     jmp (tmp1)
00138Cr 3               
00138Cr 3               
00138Cr 3               
00138Cr 3               ; ## EMIT ( char -- ) "Print character to current output"
00138Cr 3               ; ## "emit"  auto  ANS core
00138Cr 3                       ; """https://forth-standard.org/standard/core/EMIT
00138Cr 3                       ; Run-time default for EMIT. The user can revector this by changing
00138Cr 3                       ; the value of the OUTPUT variable. We ignore the MSB completely, and
00138Cr 3                       ; do not check to see if we have been given a valid ASCII character.
00138Cr 3                       ; Don't make this native compile.
00138Cr 3                       ; """
00138Cr 3               
00138Cr 3               xt_emit:
00138Cr 3  20 rr rr                     jsr underflow_1
00138Fr 3               
00138Fr 3  B5 00                        lda 0,x
001391r 3  E8                           inx
001392r 3  E8                           inx
001393r 3               
001393r 3               emit_a:
001393r 3                       ; We frequently want to print the character in A without fooling
001393r 3                       ; around with the Data Stack. This is emit_a's job, which still
001393r 3                       ; allows the output to be vectored. Call it with JSR as you
001393r 3                       ; would XT_EMIT
001393r 3  6C rr rr                     jmp (output)            ; JSR/RTS
001396r 3               
001396r 3               z_emit:         ; never reached
001396r 3               
001396r 3               
001396r 3               
001396r 3               ; ## EMPTY_BUFFERS ( -- ) "Empty all buffers without saving"
001396r 3               ; ## "empty-buffers"  tested  ANS block ext
001396r 3                       ; """https://forth-standard.org/standard/block/EMPTY-BUFFERS"""
001396r 3               xt_empty_buffers:
001396r 3                               ; Set the buffer status to empty.
001396r 3  A0 2C                        ldy #buffstatus_offset
001398r 3  A9 00                        lda #0
00139Ar 3  91 rr                        sta (up),y      ; Only LSB is used.
00139Cr 3               z_empty_buffers:
00139Cr 3  60                           rts
00139Dr 3               
00139Dr 3               
00139Dr 3               ; ## ENDCASE (C: case-sys -- ) ( x -- ) "Conditional flow control"
00139Dr 3               ; ## "endcase"  auto  ANS core ext
00139Dr 3                       ; """http://forth-standard.org/standard/core/ENDCASE"""
00139Dr 3               
00139Dr 3               xt_endcase:
00139Dr 3                               ; Postpone DROP to remove the item
00139Dr 3                               ; being checked.
00139Dr 3  A0 rr                        ldy #>xt_drop
00139Fr 3  A9 rr                        lda #<xt_drop
0013A1r 3  20 rr rr                     jsr cmpl_subroutine
0013A4r 3               
0013A4r 3                               ; There are a number of address (of branches that need their
0013A4r 3                               ; jump addressed filled in with the address of right here).
0013A4r 3                               ; Keep calling THEN to deal with them until we reach the
0013A4r 3                               ; 0 that CASE put on the stack at the beginning.
0013A4r 3               @endcase_loop:
0013A4r 3                               ; Check for 0 on the stack.
0013A4r 3  B5 00                        lda 0,x
0013A6r 3  15 01                        ora 1,x
0013A8r 3  F0 05                        beq @done
0013AAr 3               
0013AAr 3  20 rr rr                     jsr xt_then
0013ADr 3  80 F5                        bra @endcase_loop
0013AFr 3               @done:
0013AFr 3                               ; Remove the 0 from the stack.
0013AFr 3  E8                           inx
0013B0r 3  E8                           inx
0013B1r 3  60           z_endcase:      rts
0013B2r 3               
0013B2r 3               
0013B2r 3               
0013B2r 3               ; ## ENDOF (C: case-sys1 of-sys1-- case-sys2) ( -- ) "Conditional flow control"
0013B2r 3               ; ## "endof"  auto  ANS core ext
0013B2r 3                       ; """http://forth-standard.org/standard/core/ENDOF
0013B2r 3                       ; This is a dummy entry, the code is shared with ELSE
0013B2r 3                       ; """
0013B2r 3               
0013B2r 3               
0013B2r 3               ; ## ENVIRONMENT_Q  ( addr u -- 0 | i*x true )  "Return system information"
0013B2r 3               ; ## "environment?"  auto  ANS core
0013B2r 3                       ; """https://forth-standard.org/standard/core/ENVIRONMENTq
0013B2r 3                       ;
0013B2r 3                       ; By ANS definition, we use upper-case strings here, see the
0013B2r 3                       ; string file for details. This can be realized as a high-level
0013B2r 3                       ; Forth word as
0013B2r 3                       ;
0013B2r 3                       ; : STRING_OF POSTPONE 2OVER POSTPONE COMPARE POSTPONE 0=
0013B2r 3                       ;    POSTPONE IF POSTPONE 2DROP ; IMMEDIATE COMPILE-ONLY
0013B2r 3                       ; HEX
0013B2r 3                       ; : ENVIRONMENT? ( C-ADDR U -- FALSE | I*X TRUE )
0013B2r 3                       ; CASE
0013B2r 3                       ; S" /COUNTED-STRING"    STRING_OF  7FFF TRUE ENDOF
0013B2r 3                       ; S" /HOLD"              STRING_OF    FF TRUE ENDOF
0013B2r 3                       ; S" /PAD"               STRING_OF    54 TRUE ENDOF ( 84 DECIMAL )
0013B2r 3                       ; S" ADDRESS-UNIT-BITS"  STRING_OF     8 TRUE ENDOF
0013B2r 3                       ; S" FLOORED"            STRING_OF FALSE TRUE ENDOF ( WE HAVE SYMMETRIC )
0013B2r 3                       ; S" MAX-CHAR"           STRING_OF   255 TRUE ENDOF
0013B2r 3                       ; S" MAX-D"              STRING_OF
0013B2r 3                                                    ; 7FFFFFFF. TRUE ENDOF
0013B2r 3                       ; S" MAX-N"              STRING_OF  7FFF TRUE ENDOF
0013B2r 3                       ; S" MAX-U"              STRING_OF  FFFF TRUE ENDOF
0013B2r 3                       ; S" MAX-UD"             STRING_OF
0013B2r 3                                                    ; FFFFFFFF. TRUE ENDOF
0013B2r 3                       ; S" RETURN-STACK-CELLS" STRING_OF    80 TRUE ENDOF
0013B2r 3                       ; S" STACK-CELLS"        STRING_OF    20 TRUE ENDOF ( FROM DEFINITIONS.ASM )
0013B2r 3                       ; ( DEFAULT ) 2DROP FALSE FALSE ( ONE FALSE WILL DROPPED BY ENDCASE )
0013B2r 3                       ; ENDCASE ;
0013B2r 3                       ;
0013B2r 3                       ; but that uses lots of memory and increases the start up time. This
0013B2r 3                       ; word is rarely used so we can try to keep it short at the expense
0013B2r 3                       ; of speed.
0013B2r 3                       ; """
0013B2r 3               
0013B2r 3               xt_environment_q:
0013B2r 3  20 rr rr                     jsr underflow_1
0013B5r 3               
0013B5r 3                               ; This code is table-driven: We walk through the list of
0013B5r 3                               ; strings until we find one that matches, and then we take
0013B5r 3                               ; the equivalent data from the results table. This is made
0013B5r 3                               ; a bit harder by the fact that some of these return a
0013B5r 3                               ; double-cell number and some a single-cell one.
0013B5r 3               
0013B5r 3                               ; We will walk through the table with variables that return
0013B5r 3                               ; a single-cell result
0013B5r 3  A0 00                        ldy #00                 ; counter for table
0013B7r 3               
0013B7r 3                               ; We use a flag on the the stack to signal if we have a single-cell
0013B7r 3                               ; or double-cell number. We use 0 to signal single-cell and 1 for
0013B7r 3                               ; double-cell.
0013B7r 3  5A                           phy
0013B8r 3               @table_loop:
0013B8r 3                               ; We arrived here with the address of the string to be checked
0013B8r 3                               ; on the stack. We make a copy. Index is in Y
0013B8r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
0013BBr 3               
0013BBr 3                               ; We do our work on the TOS to speed things up
0013BBr 3  CA                           dex
0013BCr 3  CA                           dex                     ; ( addr u addr u ? )
0013BDr 3               
0013BDr 3                               ; Get address of string to check from table
0013BDr 3  B9 rr rr                     lda env_table_single,y
0013C0r 3  95 00                        sta 0,x
0013C2r 3  C8                           iny
0013C3r 3  B9 rr rr                     lda env_table_single,y
0013C6r 3  95 01                        sta 1,x                 ; ( addr u addr u addr-t )
0013C8r 3  C8                           iny
0013C9r 3               
0013C9r 3                               ; See if this is the last entry. The LSB is still in A
0013C9r 3  15 00                        ora 0,x
0013CBr 3  F0 4D                        beq @table_done
0013CDr 3               
0013CDr 3                               ; We have a string entry. The address there is stored in
0013CDr 3                               ; old-style address format, that is, the first byte is the
0013CDr 3                               ; length of the string
0013CDr 3  5A                           phy                     ; save Y, which is used by COUNT
0013CEr 3  20 rr rr                     jsr xt_count            ; ( addr u addr u addr-s u-s )
0013D1r 3  20 rr rr                     jsr xt_compare          ; ( addr u f )
0013D4r 3  7A                           ply
0013D5r 3               
0013D5r 3                               ; If we found a match (flag is zero -- COMPARE is weird
0013D5r 3                               ; that way), return the result
0013D5r 3  B5 00                        lda 0,x
0013D7r 3  15 01                        ora 1,x
0013D9r 3  F0 04                        beq @got_result
0013DBr 3               
0013DBr 3                               ; Flag is not zero, so not a perfect match, so try next
0013DBr 3                               ; word
0013DBr 3  E8                           inx                     ; DROP, now ( addr u )
0013DCr 3  E8                           inx
0013DDr 3               
0013DDr 3  80 D9                        bra @table_loop
0013DFr 3               
0013DFr 3               @got_result:
0013DFr 3                               ; We arrive here with ( addr u -1 ) and know that we've found
0013DFr 3                               ; a match. The index of the match+2 is in Y.
0013DFr 3  E8                           inx                     ; drop flag, now ( addr u )
0013E0r 3  E8                           inx
0013E1r 3  88                           dey                     ; go back to index we had
0013E2r 3  88                           dey
0013E3r 3               
0013E3r 3                               ; See if this is a single-cell word.
0013E3r 3  68                           pla
0013E4r 3  D0 0D                        bne @double_result
0013E6r 3               
0013E6r 3                               ; Single-cell result
0013E6r 3  B9 rr rr                     lda env_results_single,y
0013E9r 3  95 02                        sta 2,x
0013EBr 3  C8                           iny
0013ECr 3  B9 rr rr                     lda env_results_single,y
0013EFr 3  95 03                        sta 3,x                 ; ( res u )
0013F1r 3               
0013F1r 3  80 1F                        bra @set_flag
0013F3r 3               
0013F3r 3               @double_result:
0013F3r 3                               ; This is a double-celled result, which means we have to
0013F3r 3                               ; fool around with the index some more. We also need a
0013F3r 3                               ; further cell on the stack
0013F3r 3  CA                           dex                     ; ( addr u ? )
0013F4r 3  CA                           dex
0013F5r 3               
0013F5r 3                               ; We have 11 single-cell words we check, plus the 0000 as
0013F5r 3                               ; a marker for the end of the table, so we arrive here
0013F5r 3                               ; with Y as 22 or more. To get the index for the double-
0013F5r 3                               ; cell words, we move the result
0013F5r 3  98                           tya
0013F6r 3  38                           sec
0013F7r 3  E9 18                        sbc #24
0013F9r 3               
0013F9r 3                               ; We have four bytes per entry in the table, but the index
0013F9r 3                               ; keeps increasing by two, so we only have to multiply by
0013F9r 3                               ; two (shift left once) to get the right result
0013F9r 3  0A                           asl
0013FAr 3  A8                           tay
0013FBr 3               
0013FBr 3  B9 rr rr                     lda env_results_double,y
0013FEr 3  95 02                        sta 2,x
001400r 3  C8                           iny
001401r 3  B9 rr rr                     lda env_results_double,y
001404r 3  95 03                        sta 3,x                 ; ( res u ? )
001406r 3  C8                           iny
001407r 3               
001407r 3  B9 rr rr                     lda env_results_double,y
00140Ar 3  95 04                        sta 4,x
00140Cr 3  C8                           iny
00140Dr 3  B9 rr rr                     lda env_results_double,y
001410r 3  95 05                        sta 5,x                 ; ( res res ? )
001412r 3               
001412r 3                               ; fall through to @set_flag
001412r 3               @set_flag:
001412r 3  A9 FF                        lda #$ff
001414r 3  95 00                        sta 0,x
001416r 3  95 01                        sta 1,x                 ; ( res f )
001418r 3               
001418r 3  80 14                        bra @done
00141Ar 3               @table_done:
00141Ar 3                               ; We're done with a table, because the entry was a zero.
00141Ar 3                               ; We arrive here with ( addr u addr u 0 )
00141Ar 3               
00141Ar 3                               ; We take the flag from stack and increase it by one. If the
00141Ar 3                               ; flag is zero, we have just completed the single-cell number
00141Ar 3                               ; strings, so we in increase the flag and try again. Otherwise,
00141Ar 3                               ; we're done with the double-cell table without having found
00141Ar 3                               ; a match, and we're done
00141Ar 3  68                           pla
00141Br 3  D0 09                        bne @no_match
00141Dr 3               
00141Dr 3                               ; Flag is zero, increase it to one and start over to check
00141Dr 3                               ; double-cell values
00141Dr 3  1A                           inc
00141Er 3  48                           pha
00141Fr 3               
00141Fr 3  8A                           txa
001420r 3  18                           clc
001421r 3  69 06                        adc #6                  ; skip six bytes
001423r 3  AA                           tax                     ; ( addr u )
001424r 3               
001424r 3  80 92                        bra @table_loop
001426r 3               @no_match:
001426r 3                               ; Bummer, not found. We arrive here with
001426r 3                               ; ( addr u addr u 0 ) and need to return just a zero
001426r 3  8A                           txa
001427r 3  18                           clc
001428r 3  69 0A                        adc #10
00142Ar 3  AA                           tax                     ; ( addr ) - not ( 0 ) !
00142Br 3               
00142Br 3  20 rr rr                     jsr xt_false
00142Er 3               @done:
00142Er 3               z_environment_q:
00142Er 3  60                           rts
00142Fr 3               
00142Fr 3               
00142Fr 3               ; Tables for ENVIRONMENT?. We use two separate ones, one for the single-cell
00142Fr 3               ; results and one for the double-celled results. The zero cell at the
00142Fr 3               ; end of each table marks its, uh, end. The strings themselves are defined
00142Fr 3               ; in strings.asm. Note if we add more entries to the single-cell table, we
00142Fr 3               ; have to adapt the result code for double printout, where we subtract 22
00142Fr 3               ; (two bytes each single-cell string and two bytes for the end-of-table
00142Fr 3               ; marker 0000
00142Fr 3               env_table_single:
00142Fr 3  rr rr rr rr          .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
001433r 3  rr rr rr rr  
001437r 3  rr rr        
001439r 3  rr rr rr rr          .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
00143Dr 3  rr rr rr rr  
001441r 3  rr rr rr rr          .word envs_sc, envs_wl, 0000
001445r 3  00 00        
001447r 3               
001447r 3               env_table_double:
001447r 3  rr rr rr rr          .word envs_max_d, envs_max_ud, 0000
00144Br 3  00 00        
00144Dr 3               
00144Dr 3               env_results_single:
00144Dr 3  FF 7F                .word $7FFF     ; /COUNTED-STRING
00144Fr 3  FF 00                .word $00FF     ; /HOLD
001451r 3  54 00                .word $0054     ; /PAD (this is 84 decimal)
001453r 3  08 00                .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
001455r 3  00 00                .word 0000      ; FLOORED ("FALSE", we have symmetric)
001457r 3  FF 00                .word $00FF     ; MAX-CHAR
001459r 3  FF 7F                .word $7FFF     ; MAX-N
00145Br 3  FF FF                .word $FFFF     ; MAX-U
00145Dr 3  80 00                .word $0080     ; RETURN-STACK-CELLS
00145Fr 3  20 00                .word $0020     ; STACK-CELLS (from definitions.asm)
001461r 3  09 00                .word $0009     ; WORDLISTS
001463r 3               
001463r 3               env_results_double:
001463r 3  FF 7F FF FF          .word $7FFF, $FFFF      ; MAX-D
001467r 3  FF FF FF FF          .word $FFFF, $FFFF      ; MAX-UD
00146Br 3               
00146Br 3               
00146Br 3               ; ## EQUAL ( n n -- f ) "See if TOS and NOS are equal"
00146Br 3               ; ## "="  auto  ANS core
00146Br 3                       ; """https://forth-standard.org/standard/core/Equal"""
00146Br 3               
00146Br 3               xt_equal:
00146Br 3  20 rr rr                     jsr underflow_2
00146Er 3               
00146Er 3  B5 00                        lda 0,x                 ; LSB
001470r 3  D5 02                        cmp 2,x
001472r 3  D0 0A                        bne @false
001474r 3               
001474r 3  B5 01                        lda 1,x                 ; MSB
001476r 3  D5 03                        cmp 3,x
001478r 3  D0 04                        bne @false
00147Ar 3               
00147Ar 3  A9 FF                        lda #$ff
00147Cr 3  80 02                        bra @done
00147Er 3               
00147Er 3  A9 00        @false:         lda #0                  ; drop thru to done
001480r 3               
001480r 3  95 02        @done:          sta 2,x
001482r 3  95 03                        sta 3,x
001484r 3               
001484r 3  E8                           inx
001485r 3  E8                           inx
001486r 3               
001486r 3  60           z_equal:        rts
001487r 3               
001487r 3               
001487r 3               
001487r 3               ; ## BLANK ( addr u -- ) "Fill memory region with spaces"
001487r 3               ; ## "blank"  auto  ANS string
001487r 3                       ; """https://forth-standard.org/standard/string/BLANK"""
001487r 3               xt_blank:
001487r 3                               ; We don't check for underflow here because
001487r 3                               ; we deal with that in FILL
001487r 3  CA                           dex
001488r 3  CA                           dex
001489r 3  A9 20                        lda #AscSP
00148Br 3  95 00                        sta 0,x
00148Dr 3  74 01                        stz 1,x
00148Fr 3               
00148Fr 3  80 06                        bra xt_fill     ; skip over code for ERASE
001491r 3               
001491r 3               
001491r 3               ; ## ERASE ( addr u -- ) "Fill memory region with zeros"
001491r 3               ; ## "erase"  auto  ANS core ext
001491r 3                       ; """https://forth-standard.org/standard/core/ERASE
001491r 3                       ; Note that ERASE works with "address" units
001491r 3                       ; (bytes), not cells.
001491r 3                       ; """
001491r 3               
001491r 3               xt_erase:
001491r 3                               ; We don't check for underflow here because
001491r 3                               ; we deal with that in FILL
001491r 3  CA                           dex
001492r 3  CA                           dex
001493r 3  74 00                        stz 0,x
001495r 3  74 01                        stz 1,x
001497r 3               
001497r 3                               ; fall through to FILL
001497r 3               
001497r 3               ; ## FILL ( addr u char -- ) "Fill a memory region with a character"
001497r 3               ; ## "fill"  auto  ANS core
001497r 3                       ; """https://forth-standard.org/standard/core/FILL
001497r 3                       ; Fill u bytes of memory with char starting at addr. Note that
001497r 3                       ; this works on bytes, not on cells. On an 8-bit machine such as the
001497r 3                       ; 65c02, this is a serious pain in the rear. It is not defined what
001497r 3                       ; happens when we reach the end of the address space
001497r 3                       ; """
001497r 3               xt_fill:
001497r 3  20 rr rr                     jsr underflow_3
00149Ar 3               
00149Ar 3                               ; We use tmp1 to hold the address
00149Ar 3  B5 04                        lda 4,x         ; LSB
00149Cr 3  85 rr                        sta tmp1
00149Er 3  B5 05                        lda 5,x
0014A0r 3  85 rr                        sta tmp1+1
0014A2r 3               
0014A2r 3                               ; We use tmp2 to hold the counter
0014A2r 3  B5 02                        lda 2,x
0014A4r 3  85 rr                        sta tmp2
0014A6r 3  B5 03                        lda 3,x
0014A8r 3  85 rr                        sta tmp2+1
0014AAr 3               
0014AAr 3                               ; We use Y to hold the character
0014AAr 3  B5 00                        lda 0,x
0014ACr 3  A8                           tay
0014ADr 3               @loop:
0014ADr 3                               ; Unfortunately, we also need to make sure that we don't
0014ADr 3                               ; write further than the end of the RAM. So RAM_END must
0014ADr 3                               ; be larger or equal to the current address
0014ADr 3  A9 80                        lda #>ram_end           ; MSB
0014AFr 3  C5 rr                        cmp tmp1+1
0014B1r 3  90 21                        bcc @done               ; RAM_END < TMP1, so leave
0014B3r 3  D0 06                        bne @check_counter      ; RAM_END is not smaller and not equal
0014B5r 3               
0014B5r 3  A9 00                        lda #<ram_end           ; LSB, because MSBs were equal
0014B7r 3  C5 rr                        cmp tmp1
0014B9r 3  90 19                        bcc @done               ; RAM_END < TMP1, so leave
0014BBr 3               
0014BBr 3               @check_counter:
0014BBr 3                               ; See if our counter has reached zero
0014BBr 3  A5 rr                        lda tmp2
0014BDr 3  05 rr                        ora tmp2+1
0014BFr 3  F0 13                        beq @done
0014C1r 3               
0014C1r 3                               ; We're not in ROM and we still have stuff on the counter, so
0014C1r 3                               ; let's actually do what we came here to do
0014C1r 3  98                           tya
0014C2r 3  92 rr                        sta (tmp1)
0014C4r 3               
0014C4r 3                               ; Adjust the counter
0014C4r 3  A5 rr                        lda tmp2
0014C6r 3  D0 02                        bne @1
0014C8r 3  C6 rr                        dec tmp2+1
0014CAr 3  C6 rr        @1:               dec tmp2
0014CCr 3               
0014CCr 3                               ; Next address
0014CCr 3  E6 rr                        inc tmp1
0014CEr 3  D0 DD                        bne @loop
0014D0r 3  E6 rr                        inc tmp1+1
0014D2r 3               
0014D2r 3  80 D9                        bra @loop
0014D4r 3               
0014D4r 3               @done:
0014D4r 3                               ; Drop three cells off the Data Stack. This uses one byte
0014D4r 3                               ; less than six times INX
0014D4r 3  8A                           txa
0014D5r 3  18                           clc
0014D6r 3  69 06                        adc #6
0014D8r 3  AA                           tax
0014D9r 3               z_blank:
0014D9r 3               z_erase:
0014D9r 3  60           z_fill:         rts
0014DAr 3               
0014DAr 3               
0014DAr 3               
0014DAr 3               ; ## EXECUTE ( xt -- ) "Jump to word based on execution token"
0014DAr 3               ; ## "execute"  auto  ANS core
0014DAr 3                       ; """https://forth-standard.org/standard/core/EXECUTE"""
0014DAr 3               xt_execute:
0014DAr 3  20 rr rr                     jsr underflow_1
0014DDr 3               
0014DDr 3  20 rr rr                     jsr doexecute   ; do not combine to JMP (native coding)
0014E0r 3               
0014E0r 3  60           z_execute:      rts
0014E1r 3               
0014E1r 3               doexecute:
0014E1r 3  B5 00                        lda 0,x
0014E3r 3  85 rr                        sta ip
0014E5r 3  B5 01                        lda 1,x
0014E7r 3  85 rr                        sta ip+1
0014E9r 3               
0014E9r 3  E8                           inx
0014EAr 3  E8                           inx
0014EBr 3               
0014EBr 3                               ; we don't need a RTS here because we highjack the RTS of
0014EBr 3                               ; the word we're calling to get back to xt_execute
0014EBr 3  6C rr rr                     jmp (ip)
0014EEr 3               
0014EEr 3               ; end of doexecute
0014EEr 3               
0014EEr 3               
0014EEr 3               ; ## EXECUTE_PARSING ( addr u xt -- ) "Pass a string to a parsing word"
0014EEr 3               ; ## "execute-parsing"  auto  Gforth
0014EEr 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
0014EEr 3                       ; Execute the parsing word defined by the execution token (xt) on the
0014EEr 3                       ; string as if it were passed on the command line. See the file
0014EEr 3                       ; tests/tali.fs for examples.
0014EEr 3                       ;
0014EEr 3                       ; Note that this word is coded completely
0014EEr 3                       ; different in its Gforth version, see the file execute-parsing.fs
0014EEr 3                       ; (in /usr/share/gforth/0.7.3/compat/ on Ubuntu 18.04 LTS) for details.
0014EEr 3                       ; """
0014EEr 3               xt_execute_parsing:
0014EEr 3  20 rr rr                     jsr underflow_3
0014F1r 3               
0014F1r 3  20 rr rr                     jsr xt_input_to_r       ; save normal input for later
0014F4r 3  20 rr rr                     jsr xt_not_rote         ; -ROT ( xt addr u )
0014F7r 3               
0014F7r 3  B5 00                        lda 0,x                 ; TOS is new ciblen
0014F9r 3  85 rr                        sta ciblen
0014FBr 3  B5 01                        lda 1,x
0014FDr 3  85 rr                        sta ciblen+1
0014FFr 3               
0014FFr 3  B5 02                        lda 2,x                 ; NOS is new cib
001501r 3  85 rr                        sta cib
001503r 3  B5 03                        lda 3,x
001505r 3  85 rr                        sta cib+1
001507r 3               
001507r 3  64 rr                        stz toin                ; Set >IN to zero
001509r 3  64 rr                        stz toin+1
00150Br 3               
00150Br 3  20 rr rr                     jsr xt_two_drop         ; 2DROP ( xt )
00150Er 3  20 rr rr                     jsr xt_execute
001511r 3               
001511r 3  20 rr rr                     jsr xt_r_to_input
001514r 3               
001514r 3               z_execute_parsing:
001514r 3  60                           rts
001515r 3               
001515r 3               
001515r 3               ; ## EXIT ( -- ) "Return control to the calling word immediately"
001515r 3               ; ## "exit"  auto  ANS core
001515r 3                       ; """https://forth-standard.org/standard/core/EXIT
001515r 3                       ; If we're in a loop, we need to UNLOOP first and get everything
001515r 3                       ; we we might have put on the Return Stack off as well. This should
001515r 3                       ; be natively compiled.
001515r 3                       ; """
001515r 3               
001515r 3               xt_exit:
001515r 3  60                           rts             ; keep before z_exit
001516r 3               z_exit:                         ; never reached
001516r 3               
001516r 3               
001516r 3               
001516r 3               ; ## FALSE ( -- f ) "Push flag FALSE to Data Stack"
001516r 3               ; ## "false"  auto  ANS core ext
001516r 3                       ; """https://forth-standard.org/standard/core/FALSE"""
001516r 3               xt_false:
001516r 3  CA                           dex
001517r 3  CA                           dex
001518r 3  74 00                        stz 0,x
00151Ar 3  74 01                        stz 1,x
00151Cr 3               
00151Cr 3  60           z_false:        rts
00151Dr 3               
00151Dr 3               
00151Dr 3               ; ## FETCH ( addr -- n ) "Push cell content from memory to stack"
00151Dr 3               ; ## "@"  auto  ANS core
00151Dr 3                       ; """https://forth-standard.org/standard/core/Fetch"""
00151Dr 3               xt_fetch:
00151Dr 3  20 rr rr                     jsr underflow_1
001520r 3               
001520r 3  A1 00                        lda (0,x)               ; LSB
001522r 3  A8                           tay
001523r 3  F6 00                        inc 0,x
001525r 3  D0 02                        bne @1
001527r 3  F6 01                        inc 1,x
001529r 3               @1:
001529r 3  A1 00                        lda (0,x)               ; MSB
00152Br 3  95 01                        sta 1,x
00152Dr 3  94 00                        sty 0,x
00152Fr 3               
00152Fr 3  60           z_fetch:        rts
001530r 3               
001530r 3               
001530r 3               ; ## FIND ( caddr -- addr 0 | xt 1 | xt -1 ) "Find word in Dictionary"
001530r 3               ; ## "find"  auto  ANS core
001530r 3                       ; """https://forth-standard.org/standard/core/FIND
001530r 3                       ; Included for backwards compatibility only, because it still
001530r 3                       ; can be found in so may examples. It should, however, be replaced
001530r 3                       ; by FIND-NAME. Counted string either returns address with a FALSE
001530r 3                       ; flag if not found in the Dictionary, or the xt with a flag to
001530r 3                       ; indicate if this is immediate or not. FIND is a wrapper around
001530r 3                       ; FIND-NAME, we get this all over with as quickly as possible. See
001530r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
001530r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001530r 3                       ; """
001530r 3               
001530r 3               xt_find:
001530r 3  20 rr rr                     jsr underflow_1
001533r 3               
001533r 3                               ; Save address in case conversion fails. We use the
001533r 3                               ; Return Stack instead of temporary variables like TMP1
001533r 3                               ; because this is shorter and anybody still using FIND
001533r 3                               ; can't be worried about speed anyway
001533r 3  B5 01                        lda 1,x                 ; MSB
001535r 3  48                           pha
001536r 3  B5 00                        lda 0,x                 ; LSB
001538r 3  48                           pha
001539r 3               
001539r 3                               ; Convert ancient-type counted string address to
001539r 3                               ; modern format
001539r 3  20 rr rr                     jsr xt_count            ; ( caddr -- addr u )
00153Cr 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt | 0 )
00153Fr 3               
00153Fr 3  B5 00                        lda 0,x
001541r 3  15 01                        ora 1,x
001543r 3  D0 0B                        bne @found_word
001545r 3               
001545r 3                               ; No word found. Return address of the string and a false
001545r 3                               ; flag
001545r 3  20 rr rr                     jsr xt_false            ; ( 0 0 )
001548r 3               
001548r 3                               ; The address needs to be restored.
001548r 3  68                           pla                     ; LSB of address
001549r 3  95 02                        sta 2,x
00154Br 3  68                           pla
00154Cr 3  95 03                        sta 3,x                 ; MSB of address
00154Er 3               
00154Er 3  80 27                        bra @done               ; ( addr 0 )
001550r 3               
001550r 3               @found_word:
001550r 3                               ; We don't need the address after all, dump it
001550r 3  68                           pla
001551r 3  68                           pla
001552r 3               
001552r 3                               ; We arrive here with ( nt ) on the TOS. Now we have to
001552r 3                               ; convert the return values to FIND's format
001552r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001555r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001558r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
00155Br 3               
00155Br 3  A0 00                        ldy #0                  ; Prepare flag
00155Dr 3               
00155Dr 3                               ; The flags are in the second byte of the header
00155Dr 3  F6 00                        inc 0,x
00155Fr 3  D0 02                        bne @1
001561r 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
001563r 3               @1:
001563r 3  A1 00                        lda (0,x)               ; ( xt char )
001565r 3  29 04                        and #IM
001567r 3  D0 08                        bne @immediate          ; bit set, we're immediate
001569r 3               
001569r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
00156Br 3  95 00                        sta 0,x
00156Dr 3  95 01                        sta 1,x
00156Fr 3  80 06                        bra @done
001571r 3               
001571r 3               @immediate:
001571r 3  A9 01                        lda #1                  ; We're immediate, return 1
001573r 3  95 00                        sta 0,x
001575r 3  74 01                        stz 1,x
001577r 3               @done:
001577r 3  60           z_find:         rts
001578r 3               
001578r 3               
001578r 3               
001578r 3               ; ## FIND_NAME ( addr u -- nt|0 ) "Get the name token of input word"
001578r 3               ; ## "find-name"  auto  Gforth
001578r 3               
001578r 3               xt_find_name:
001578r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001578r 3                       ; Given a string, find the Name Token (nt) of a word or return
001578r 3                       ; zero if the word is not in the dictionary. We use this instead of
001578r 3                       ; ancient FIND to look up words in the Dictionary passed by
001578r 3                       ; PARSE-NAME. Note this returns the nt, not the xt of a word like
001578r 3                       ; FIND. To convert, use NAME>INT. This is a Gforth word. See
001578r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001578r 3                       ; FIND calls this word
001578r 3                       ; """
001578r 3  20 rr rr                     jsr underflow_2
00157Br 3               
00157Br 3                               ; check for special case of an empty string (length zero)
00157Br 3  B5 00                        lda 0,x
00157Dr 3  15 01                        ora 1,x
00157Fr 3  D0 03                        bne @nonempty
001581r 3               
001581r 3  4C rr rr                     jmp @fail_done
001584r 3               
001584r 3               @nonempty:
001584r 3                               ; Set up for traversing the wordlist search order.
001584r 3  64 rr                        stz tmp3                ; Start at the beginning
001586r 3               
001586r 3               @wordlist_loop:
001586r 3  A0 1E                        ldy #num_order_offset   ; Compare to byte variable #ORDER
001588r 3  A5 rr                        lda tmp3
00158Ar 3  D1 rr                        cmp (up),y              ; Check to see if we are done
00158Cr 3  D0 03                        bne @have_string
00158Er 3               
00158Er 3                               ; We ran out of wordlists to search.
00158Er 3  4C rr rr                     jmp @fail_done
001591r 3               
001591r 3               @have_string:
001591r 3                               ; set up first loop iteration
001591r 3               
001591r 3                               ; Get the current wordlist id
001591r 3  18                           clc             ; SEARCH-ORDER is array of bytes.
001592r 3  69 1F                        adc #search_order_offset
001594r 3  A8                           tay
001595r 3  B1 rr                        lda (up),y      ; Get the id byte, which is the offset
001597r 3                                               ; into the cell array WORDLISTS
001597r 3               
001597r 3                               ; Get the DP for that wordlist.
001597r 3  0A                           asl                     ; Turn offset into cells offset.
001598r 3  18                           clc
001599r 3  69 06                        adc #wordlists_offset
00159Br 3  A8                           tay
00159Cr 3  B1 rr                        lda (up),y
00159Er 3  85 rr                        sta tmp1
0015A0r 3  C8                           iny
0015A1r 3  B1 rr                        lda (up),y
0015A3r 3  85 rr                        sta tmp1+1
0015A5r 3               
0015A5r 3  B5 02                        lda 2,x                 ; Address of mystery string
0015A7r 3  85 rr                        sta tmp2
0015A9r 3  B5 03                        lda 3,x
0015ABr 3  85 rr                        sta tmp2+1
0015ADr 3               
0015ADr 3               @loop:
0015ADr 3                               ; first quick test: Are strings the same length?
0015ADr 3  B2 rr                        lda (tmp1)
0015AFr 3  D5 00                        cmp 0,x
0015B1r 3  D0 54                        bne @next_entry
0015B3r 3               
0015B3r 3               @compare_string:
0015B3r 3                               ; are the same length, so we now have to compare each
0015B3r 3                               ; character
0015B3r 3               
0015B3r 3                               ; second quick test: Is the first character the same?
0015B3r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
0015B5r 3               
0015B5r 3                               ; Lowercase the incoming charcter.
0015B5r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
0015B7r 3  B0 07                        bcs @compare_first
0015B9r 3  C9 41                        cmp #$41        ; ASCII 'A'
0015BBr 3  90 03                        bcc @compare_first
0015BDr 3               
0015BDr 3                               ; An uppercase letter has been located.  Make it
0015BDr 3                               ; lowercase.
0015BDr 3  18                           clc
0015BEr 3  69 20                        adc #$20
0015C0r 3               
0015C0r 3               @compare_first:
0015C0r 3  A0 08                        ldy #8          ; Offset in nt to name
0015C2r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
0015C4r 3  D0 41                        bne @next_entry
0015C6r 3               
0015C6r 3                               ; String length is the same and the first character is the
0015C6r 3                               ; same. If the length of the string is 1, we're already done
0015C6r 3  B5 00                        lda 0,x
0015C8r 3  3A                           dec
0015C9r 3  F0 2C                        beq @success
0015CBr 3               
0015CBr 3                               ; No such luck: The strings are the same length and the first
0015CBr 3                               ; char is the same, but the word is more than one char long.
0015CBr 3                               ; So we suck it up and compare every single character. We go
0015CBr 3                               ; from back to front, because words like CELLS and CELL+ would
0015CBr 3                               ; take longer otherwise. We can also shorten the loop by one
0015CBr 3                               ; because we've already compared the first char.
0015CBr 3               
0015CBr 3                               ; The string of the word we're testing against is 8 bytes down
0015CBr 3  A5 rr                        lda tmp1
0015CDr 3  48                           pha             ; Preserve tmp1 on the return stack.
0015CEr 3  18                           clc
0015CFr 3  69 08                        adc #8
0015D1r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
0015D3r 3  A5 rr                        lda tmp1+1
0015D5r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
0015D6r 3  69 00                        adc #0          ; we only need the carry
0015D8r 3  85 rr                        sta tmp1+1
0015DAr 3               
0015DAr 3  B4 00                        ldy 0,x         ; index is length of string minus 1
0015DCr 3  88                           dey
0015DDr 3               
0015DDr 3               @string_loop:
0015DDr 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
0015DFr 3               
0015DFr 3                               ; Lowercase the incoming charcter.
0015DFr 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
0015E1r 3  B0 07                        bcs @check_char
0015E3r 3  C9 41                        cmp #$41        ; ASCII 'A'
0015E5r 3  90 03                        bcc @check_char
0015E7r 3               
0015E7r 3                               ; An uppercase letter has been located.  Make it
0015E7r 3                               ; lowercase.
0015E7r 3  18                           clc
0015E8r 3  69 20                        adc #$20
0015EAr 3               
0015EAr 3               @check_char:
0015EAr 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
0015ECr 3  D0 13                        bne @next_entry_tmp1
0015EEr 3               
0015EEr 3  88                           dey
0015EFr 3  D0 EC                        bne @string_loop
0015F1r 3               
0015F1r 3               @success_tmp1:
0015F1r 3  68                           pla             ; Restore tmp1 from the return stack.
0015F2r 3  85 rr                        sta tmp1+1
0015F4r 3  68                           pla
0015F5r 3  85 rr                        sta tmp1
0015F7r 3               
0015F7r 3               @success:
0015F7r 3                               ; The strings match. Put correct nt NOS, because we'll drop
0015F7r 3                               ; TOS before we leave
0015F7r 3  A5 rr                        lda tmp1
0015F9r 3  95 02                        sta 2,x
0015FBr 3  A5 rr                        lda tmp1+1
0015FDr 3  95 03                        sta 3,x
0015FFr 3               
0015FFr 3  80 20                        bra @done
001601r 3               
001601r 3               @next_entry_tmp1:
001601r 3  68                           pla             ; Restore tmp1 from the return stack.
001602r 3  85 rr                        sta tmp1+1
001604r 3  68                           pla
001605r 3  85 rr                        sta tmp1
001607r 3               
001607r 3               @next_entry:
001607r 3                               ; Not the same, so we get the next word. Next header
001607r 3                               ; address is two bytes down
001607r 3  A0 02                        ldy #2
001609r 3  B1 rr                        lda (tmp1),y
00160Br 3  48                           pha
00160Cr 3  C8                           iny
00160Dr 3  B1 rr                        lda (tmp1),y
00160Fr 3  85 rr                        sta tmp1+1
001611r 3  68                           pla
001612r 3  85 rr                        sta tmp1
001614r 3               
001614r 3                               ; If we got a zero, we've walked the whole Dictionary and
001614r 3                               ; return as a failure, otherwise try again
001614r 3  05 rr                        ora tmp1+1
001616r 3  D0 95                        bne @loop
001618r 3               
001618r 3                               ; Move on to the next wordlist in the search order.
001618r 3  E6 rr                        inc tmp3
00161Ar 3  4C rr rr                     jmp @wordlist_loop
00161Dr 3               
00161Dr 3               @fail_done:
00161Dr 3  74 02                        stz 2,x         ; failure flag
00161Fr 3  74 03                        stz 3,x
001621r 3               @done:
001621r 3  E8                           inx
001622r 3  E8                           inx
001623r 3               
001623r 3  60           z_find_name:    rts
001624r 3               
001624r 3               
001624r 3               
001624r 3               ; ## FLUSH ( -- ) "Save dirty buffers and empty buffers"
001624r 3               ; ## "flush"  auto  ANS block
001624r 3                       ; """https://forth-standard.org/standard/block/FLUSH"""
001624r 3               xt_flush:
001624r 3  20 rr rr                     jsr xt_save_buffers
001627r 3               
001627r 3                               ; Set the buffer status to empty.
001627r 3  A0 2C                        ldy #buffstatus_offset
001629r 3  A9 00                        lda #0
00162Br 3  91 rr                        sta (up),y      ; Only LSB is used.
00162Dr 3               z_flush:
00162Dr 3  60                           rts
00162Er 3               
00162Er 3               
00162Er 3               ; ## FM_SLASH_MOD ( d n1  -- rem n2 ) "Floored signed division"
00162Er 3               ; ## "fm/mod"  auto  ANS core
00162Er 3                       ; """https://forth-standard.org/standard/core/FMDivMOD
00162Er 3                       ; Note that by default, Tali Forth uses SM/REM for most things.
00162Er 3                       ;
00162Er 3                       ; There are various ways to realize this. We follow EForth with
00162Er 3                       ;    DUP 0< DUP >R  IF NEGATE >R DNEGATE R> THEN >R DUP
00162Er 3                       ;    0<  IF R@ + THEN  R> UM/MOD R> IF SWAP NEGATE SWAP THEN
00162Er 3                       ; See (http://www.forth.org/eforth.html). However you can also
00162Er 3                       ; go FM/MOD via SM/REM (http://www.figuk.plus.com/build/arith.htm):
00162Er 3                       ;     DUP >R  SM/REM DUP 0< IF SWAP R> + SWAP 1+ ELSE  R> DROP THEN
00162Er 3                       ; """
00162Er 3               
00162Er 3               xt_fm_slash_mod:
00162Er 3  20 rr rr                     jsr underflow_3
001631r 3               
001631r 3                               ; if sign of n1 is negative, negate both n1 and d
001631r 3  64 rr                        stz tmp2        ; default: n is positive
001633r 3  B5 01                        lda 1,x         ; MSB of n1
001635r 3  10 0E                        bpl @check_d
001637r 3               
001637r 3  E6 rr                        inc tmp2        ; set flag to negative for n1
001639r 3  20 rr rr                     jsr xt_negate   ; NEGATE
00163Cr 3  20 rr rr                     jsr xt_to_r     ; >R
00163Fr 3  20 rr rr                     jsr xt_dnegate  ; DNEGATE
001642r 3  20 rr rr                     jsr xt_r_from   ; R>
001645r 3               
001645r 3               @check_d:
001645r 3                               ; If d is negative, add n1 to high cell of d
001645r 3  B5 03                        lda 3,x         ; MSB of high word of d
001647r 3  10 0D                        bpl @multiply
001649r 3               
001649r 3  18                           clc
00164Ar 3  B5 00                        lda 0,x         ; LSB of n1
00164Cr 3  75 02                        adc 2,x         ; LSB of dh
00164Er 3  95 02                        sta 2,x
001650r 3               
001650r 3  B5 01                        lda 1,x         ; MSB of n1
001652r 3  75 03                        adc 3,x         ; MSB of dh
001654r 3  95 03                        sta 3,x
001656r 3               
001656r 3               @multiply:
001656r 3  20 rr rr                     jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
001659r 3               
001659r 3                               ; if n was negative, negate the result
001659r 3  A5 rr                        lda tmp2
00165Br 3  F0 07                        beq @done
00165Dr 3               
00165Dr 3  E8                           inx             ; pretend that we SWAP
00165Er 3  E8                           inx
00165Fr 3  20 rr rr                     jsr xt_negate
001662r 3  CA                           dex
001663r 3  CA                           dex
001664r 3               @done:
001664r 3  60           z_fm_slash_mod: rts
001665r 3               
001665r 3               
001665r 3               
001665r 3               ; ## FORTH ( -- ) "Replace first WID in search order with Forth-Wordlist"
001665r 3               ; ## "forth"  auto  ANS search ext
001665r 3                       ; """https://forth-standard.org/standard/search/FORTH"""
001665r 3               xt_forth:
001665r 3  A0 1F                        ldy #search_order_offset
001667r 3  A9 00                        lda #0          ; The WID for Forth is 0.
001669r 3               
001669r 3  91 rr                        sta (up),y
00166Br 3               z_forth:
00166Br 3  60                           rts
00166Cr 3               
00166Cr 3               
00166Cr 3               ; This is a special jsr target to skip the zeroing of BLK at the beginning
00166Cr 3               ; of evaluate.  It's used by LOAD to allow setting BLK while the block is
00166Cr 3               ; being evaluated.  Evaluate's normal behavior is to zero BLK.
00166Cr 3               load_evaluate:
00166Cr 3                               ; Set a flag (using tmp1) to not zero BLK
00166Cr 3  A9 FF                        lda #$FF
00166Er 3  85 rr                        sta tmp1
001670r 3  80 11                        bra load_evaluate_start
001672r 3               
001672r 3               ; ## EVALUATE ( addr u -- ) "Execute a string"
001672r 3               ; ## "evaluate"  auto  ANS core
001672r 3                       ; """https://forth-standard.org/standard/core/EVALUATE
001672r 3                       ; Set SOURCE-ID to -1, make addr u the input source, set >IN to zero.
001672r 3                       ; After processing the line, revert to old input source. We use this
001672r 3                       ; to compile high-level Forth words and user-defined words during
001672r 3                       ; start up and cold boot. In contrast to ACCEPT, we need to, uh,
001672r 3                       ; accept more than 255 characters here, even though it's a pain in
001672r 3                       ; the 8-bit.
001672r 3                       ; """
001672r 3               
001672r 3               xt_evaluate:
001672r 3  20 rr rr                     jsr underflow_2
001675r 3               
001675r 3                               ; Clear the flag to zero BLK.  Only LOAD will set the flag,
001675r 3                               ; and will set the block number.
001675r 3  64 rr                        stz tmp1
001677r 3               
001677r 3                               ; If u is zero (which can happen a lot for the user-defined
001677r 3                               ; words), just leave again
001677r 3  B5 00                        lda 0,x
001679r 3  15 01                        ora 1,x
00167Br 3  D0 06                        bne _eval_got_work
00167Dr 3               
00167Dr 3  E8                           inx
00167Er 3  E8                           inx
00167Fr 3  E8                           inx
001680r 3  E8                           inx
001681r 3               
001681r 3  80 42                        bra _eval_done
001683r 3               
001683r 3               ; Special entry point for LOAD to bypass the zeroing of BLK.
001683r 3               load_evaluate_start:
001683r 3               _eval_got_work:
001683r 3                               ; Save the current value of BLK on the return stack.
001683r 3  A0 01                        ldy #blk_offset+1
001685r 3  B1 rr                        lda (up),y
001687r 3  48                           pha
001688r 3  88                           dey
001689r 3  B1 rr                        lda (up),y
00168Br 3  48                           pha
00168Cr 3               
00168Cr 3                               ; See if we should zero BLK.
00168Cr 3  A5 rr                        lda tmp1
00168Er 3  D0 05                        bne @nozero
001690r 3               
001690r 3                               ; Set BLK to zero.
001690r 3                               ; lda #0        ; A is already zero from loading tmp1
001690r 3  91 rr                        sta (up),y
001692r 3  C8                           iny
001693r 3  91 rr                        sta (up),y
001695r 3               
001695r 3               @nozero:
001695r 3                               ; Save the input state to the Return Stack
001695r 3  20 rr rr                     jsr xt_input_to_r
001698r 3               
001698r 3                               ; set SOURCE-ID to -1
001698r 3  A9 FF                        lda #$ff
00169Ar 3  85 rr                        sta insrc
00169Cr 3  85 rr                        sta insrc+1
00169Er 3               
00169Er 3                               ; set >IN to zero
00169Er 3  64 rr                        stz toin
0016A0r 3  64 rr                        stz toin+1
0016A2r 3               
0016A2r 3                               ; move TOS and NOS to input buffers
0016A2r 3  B5 00                        lda 0,x
0016A4r 3  85 rr                        sta ciblen
0016A6r 3  B5 01                        lda 1,x
0016A8r 3  85 rr                        sta ciblen+1
0016AAr 3               
0016AAr 3  B5 02                        lda 2,x
0016ACr 3  85 rr                        sta cib
0016AEr 3  B5 03                        lda 3,x
0016B0r 3  85 rr                        sta cib+1
0016B2r 3               
0016B2r 3  E8                           inx             ; A clean stack is a clean mind
0016B3r 3  E8                           inx
0016B4r 3  E8                           inx
0016B5r 3  E8                           inx
0016B6r 3               
0016B6r 3  20 rr rr                     jsr interpret   ; ( -- )
0016B9r 3               
0016B9r 3                               ; restore variables
0016B9r 3  20 rr rr                     jsr xt_r_to_input
0016BCr 3               
0016BCr 3                               ; Restore BLK from the return stack.
0016BCr 3  A0 00                        ldy #blk_offset
0016BEr 3  68                           pla
0016BFr 3  91 rr                        sta (up),y
0016C1r 3  C8                           iny
0016C2r 3  68                           pla
0016C3r 3  91 rr                        sta (up),y
0016C5r 3               
0016C5r 3               _eval_done:
0016C5r 3  60           z_evaluate:     rts
0016C6r 3               
0016C6r 3               
0016C6r 3               
0016C6r 3               ; ## FORTH_WORDLIST ( -- u ) "WID for the Forth Wordlist"
0016C6r 3               ; ## "forth-wordlist"  auto  ANS search
0016C6r 3                       ; """https://forth-standard.org/standard/search/FORTH-WORDLIST"""
0016C6r 3                       ; This is a dummy entry, the actual code is shared with ZERO.
0016C6r 3               
0016C6r 3               
0016C6r 3               ; ## GET_CURRENT ( -- wid ) "Get the id of the compilation wordlist"
0016C6r 3               ; ## "get-current" auto ANS search
0016C6r 3                       ; """https://forth-standard.org/standard/search/GET-CURRENT"""
0016C6r 3               
0016C6r 3               xt_get_current:
0016C6r 3                               ; This is a little different than some of the variables
0016C6r 3                               ; in the user area as we want the value rather than
0016C6r 3                               ; the address.
0016C6r 3  CA                           dex
0016C7r 3  CA                           dex
0016C8r 3  A0 04                        ldy #current_offset
0016CAr 3  B1 rr                        lda (up),y
0016CCr 3  95 00                        sta 0,x         ; CURRENT is a byte variable
0016CEr 3  74 01                        stz 1,x         ; so the MSB is zero.
0016D0r 3               
0016D0r 3  60           z_get_current:  rts
0016D1r 3               
0016D1r 3               
0016D1r 3               
0016D1r 3               ; ## GET_ORDER ( -- wid_n .. wid_1 n) "Get the current search order"
0016D1r 3               ; ## "get-order" auto ANS search
0016D1r 3                       ; """https://forth-standard.org/standard/search/GET-ORDER"""
0016D1r 3               
0016D1r 3               xt_get_order:
0016D1r 3                               ; Get #ORDER - the number of wordlists in the search order.
0016D1r 3  A0 1E                        ldy #num_order_offset
0016D3r 3  B1 rr                        lda (up),y
0016D5r 3  85 rr                        sta tmp1
0016D7r 3  F0 16                        beq @done       ; If zero, there are no wordlists.
0016D9r 3               
0016D9r 3               @loop:
0016D9r 3                               ; Count down towards the front of the list.
0016D9r 3                               ; By decrementing first, we also turn the length into an offset.
0016D9r 3  C6 rr                        dec tmp1        ; Count down by bytes.
0016DBr 3               
0016DBr 3                               ; Get a pointer to the current wordlist, working back to front.
0016DBr 3  A9 1F                        lda #search_order_offset
0016DDr 3  18                           clc
0016DEr 3  65 rr                        adc tmp1
0016E0r 3  A8                           tay
0016E1r 3               
0016E1r 3                               ; Put that wordlist id on the stack.
0016E1r 3  CA                           dex
0016E2r 3  CA                           dex
0016E3r 3  B1 rr                        lda (up),y
0016E5r 3  95 00                        sta 0,x         ; Search order array is bytes, so
0016E7r 3  74 01                        stz 1,x         ; put a zero in the high byte.
0016E9r 3               
0016E9r 3                               ; See if that was the last one to process (first in the list).
0016E9r 3  A9 00                        lda #0
0016EBr 3  C5 rr                        cmp tmp1
0016EDr 3  D0 EA                        bne @loop
0016EFr 3               
0016EFr 3               @done:
0016EFr 3                               ; Put the number of items on the stack.
0016EFr 3  CA                           dex
0016F0r 3  CA                           dex
0016F1r 3  A0 1E                        ldy #num_order_offset
0016F3r 3  B1 rr                        lda (up),y
0016F5r 3  95 00                        sta 0,x
0016F7r 3  74 01                        stz 1,x         ; We only support 8 wordlists.
0016F9r 3               
0016F9r 3  60           z_get_order:    rts
0016FAr 3               
0016FAr 3               
0016FAr 3               
0016FAr 3               ; ## GREATER_THAN ( n n -- f ) "See if NOS is greater than TOS"
0016FAr 3               ; ## ">"  auto  ANS core
0016FAr 3                       ; """https://forth-standard.org/standard/core/more"""
0016FAr 3               
0016FAr 3               xt_greater_than:
0016FAr 3  20 rr rr                     jsr underflow_2
0016FDr 3               
0016FDr 3  A0 00                        ldy #0          ; default false
0016FFr 3  20 rr rr                     jsr compare_16bit
001702r 3               
001702r 3                               ; for signed numbers, NOS>TOS gives us Z=0 and N=1
001702r 3  F0 03                        beq @false
001704r 3  10 01                        bpl @false
001706r 3               
001706r 3                               ; true
001706r 3  88                           dey
001707r 3               @false:
001707r 3  98                           tya
001708r 3               
001708r 3  E8                           inx
001709r 3  E8                           inx
00170Ar 3  95 00                        sta 0,x
00170Cr 3  95 01                        sta 1,x
00170Er 3               
00170Er 3  60           z_greater_than: rts
00170Fr 3               
00170Fr 3               
00170Fr 3               
00170Fr 3               ; ## HERE ( -- addr ) "Put Compiler Pointer on Data Stack"
00170Fr 3               ; ## "here"  auto  ANS core
00170Fr 3                       ; """https://forth-standard.org/standard/core/HERE
00170Fr 3                       ; This code is also used by the assembler directive ARROW
00170Fr 3                       ; ("->") though as immediate"""
00170Fr 3               xt_here:
00170Fr 3               xt_asm_arrow:
00170Fr 3  CA                           dex
001710r 3  CA                           dex
001711r 3  A5 rr                        lda cp
001713r 3  95 00                        sta 0,x
001715r 3  A5 rr                        lda cp+1
001717r 3  95 01                        sta 1,x
001719r 3               
001719r 3               z_asm_arrow:
001719r 3  60           z_here:         rts
00171Ar 3               
00171Ar 3               
00171Ar 3               ; ## HEX ( -- ) "Change base radix to hexadecimal"
00171Ar 3               ; ## "hex"  auto  ANS core ext
00171Ar 3                       ; """https://forth-standard.org/standard/core/HEX"""
00171Ar 3               xt_hex:
00171Ar 3  A9 10                        lda #16
00171Cr 3  85 rr                        sta base
00171Er 3  64 rr                        stz base+1              ; paranoid
001720r 3               
001720r 3  60           z_hex:          rts
001721r 3               
001721r 3               
001721r 3               ; ## HEXSTORE ( addr1 u1 addr2 -- u2 ) "Store a list of numbers"
001721r 3               ; ## "hexstore"  auto  Tali
001721r 3                       ; """Given a string addr1 u1 with numbers in the current base seperated
001721r 3                       ; by spaces, store the numbers at the address addr2, returning the
001721r 3                       ; number of elements. Non-number elements are skipped, an zero-length
001721r 3                       ; string produces a zero output.
001721r 3                       ; """
001721r 3               
001721r 3               xt_hexstore:
001721r 3  20 rr rr                     jsr underflow_3
001724r 3               
001724r 3  20 rr rr                     jsr xt_dup              ; Save copy of original address
001727r 3  20 rr rr                     jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
00172Ar 3               
00172Ar 3               @loop:
00172Ar 3                               ; Loop until string is totally consumed
00172Ar 3  B5 00                        lda 0,x
00172Cr 3  15 01                        ora 1,x
00172Er 3  F0 36                        beq @done
001730r 3               
001730r 3  20 rr rr                     jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
001733r 3               
001733r 3                               ; Prepare the conversion of the number.
001733r 3  20 rr rr                     jsr xt_two_to_r
001736r 3  20 rr rr                     jsr xt_zero
001739r 3  20 rr rr                     jsr xt_zero
00173Cr 3  20 rr rr                     jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
00173Fr 3  20 rr rr                     jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
001742r 3               
001742r 3                               ; If u4 is not zero, we have leftover chars and have to do
001742r 3                               ; things differently
001742r 3  B5 00                        lda 0,x
001744r 3  15 01                        ora 1,x
001746r 3  D0 17                        bne @have_chars_left
001748r 3               
001748r 3                               ; Normal case, this number is all done
001748r 3  20 rr rr                     jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
00174Br 3  20 rr rr                     jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
00174Er 3               
00174Er 3                               ; Store the new value
00174Er 3  20 rr rr                     jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
001751r 3  20 rr rr                     jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
001754r 3               
001754r 3                               ; Increase counter
001754r 3  20 rr rr                     jsr xt_r_from           ; R>
001757r 3  20 rr rr                     jsr xt_one_plus         ; 1+
00175Ar 3  20 rr rr                     jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
00175Dr 3  80 CB                        bra @loop
00175Fr 3               
00175Fr 3               @have_chars_left:
00175Fr 3                               ; Pathological case: Drop the rest of this number off the stack
00175Fr 3                               ; and continue with the next word. Doesn't print a warning. We
00175Fr 3                               ; need to drop four cells, that is, eight bytes
00175Fr 3  8A                           txa
001760r 3  18                           clc
001761r 3  69 08                        adc #8
001763r 3  AA                           tax
001764r 3  80 C4                        bra @loop
001766r 3               
001766r 3               @done:
001766r 3                               ; Clean up return stack and calculate number of chars stored
001766r 3  E8                           inx
001767r 3  E8                           inx
001768r 3  E8                           inx
001769r 3  E8                           inx                     ; 2DROP
00176Ar 3               
00176Ar 3  20 rr rr                     jsr xt_two_r_from       ; ( addr2+n addr2 )
00176Dr 3  20 rr rr                     jsr xt_swap
001770r 3  20 rr rr                     jsr xt_minus            ; ( n )
001773r 3               
001773r 3  60           z_hexstore:     rts
001774r 3               
001774r 3               
001774r 3               
001774r 3               ; ## HOLD ( char -- ) "Insert character at current output"
001774r 3               ; ## "hold"  auto  ANS core
001774r 3                       ; """https://forth-standard.org/standard/core/HOLD
001774r 3                       ; Insert a character at the current position of a pictured numeric
001774r 3                       ; output string on
001774r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001774r 3                       ;
001774r 3                       ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal
001774r 3                       ; variable tohold instead of HLD.
001774r 3                       ; """
001774r 3               xt_hold:
001774r 3  20 rr rr                     jsr underflow_1
001777r 3               
001777r 3  A5 rr                        lda tohold
001779r 3  D0 02                        bne @1
00177Br 3  C6 rr                        dec tohold+1
00177Dr 3               @1:
00177Dr 3  C6 rr                        dec tohold
00177Fr 3               
00177Fr 3  B5 00                        lda 0,x
001781r 3  92 rr                        sta (tohold)
001783r 3  E8                           inx
001784r 3  E8                           inx
001785r 3               
001785r 3  60           z_hold:         rts
001786r 3               
001786r 3               
001786r 3               ; ## I ( -- n )(R: n -- n)  "Copy loop counter to stack"
001786r 3               ; ## "i"  auto  ANS core
001786r 3                       ; """https://forth-standard.org/standard/core/I
001786r 3                       ; Note that this is not the same as R@ because we use a fudge
001786r 3                       ; factor for loop control; see the Control Flow section of the
001786r 3                       ; manual for details.
001786r 3                       ;
001786r 3                       ; We should make this native compile for speed.
001786r 3                       ; """
001786r 3               
001786r 3               xt_i:
001786r 3  CA                           dex
001787r 3  CA                           dex
001788r 3               
001788r 3                               ; Get the fudged index off of the top of the stack. It's
001788r 3                               ; easier to do math on the stack directly than to pop and
001788r 3                               ; push stuff around
001788r 3  86 rr                        stx tmpdsp
00178Ar 3  BA                           tsx
00178Br 3               
00178Br 3  38                           sec
00178Cr 3  BD 01 01                     lda $0101,x     ; LSB
00178Fr 3  FD 03 01                     sbc $0103,x
001792r 3  A8                           tay
001793r 3               
001793r 3  BD 02 01                     lda $0102,x     ; MSB
001796r 3  FD 04 01                     sbc $0104,x
001799r 3               
001799r 3  A6 rr                        ldx tmpdsp
00179Br 3               
00179Br 3  95 01                        sta 1,x         ; MSB of de-fudged index
00179Dr 3  94 00                        sty 0,x         ; LSB of de-fudged index
00179Fr 3               
00179Fr 3  60           z_i:            rts
0017A0r 3               
0017A0r 3               
0017A0r 3               
0017A0r 3               ; ## IF (C: -- orig) (flag -- ) "Conditional flow control"
0017A0r 3               ; ## "if"  auto  ANS core
0017A0r 3                       ; """http://forth-standard.org/standard/core/IF"""
0017A0r 3               
0017A0r 3               xt_if:
0017A0r 3                               ; Compile a 0BRANCH
0017A0r 3  A0 rr                        ldy #>zero_branch_runtime
0017A2r 3  A9 rr                        lda #<zero_branch_runtime
0017A4r 3  20 rr rr                     jsr cmpl_subroutine
0017A7r 3               
0017A7r 3                               ; Put the origination address on the stack for else/then
0017A7r 3  20 rr rr                     jsr xt_here
0017AAr 3               
0017AAr 3                               ; Stuff zero in for the branch address right now.
0017AAr 3                               ; THEN or ELSE will fix it later.
0017AAr 3  20 rr rr                     jsr xt_zero
0017ADr 3  20 rr rr                     jsr xt_comma
0017B0r 3  60           z_if:           rts
0017B1r 3               
0017B1r 3               
0017B1r 3               zero_branch_runtime:
0017B1r 3                       ; """In some Forths, this is called (0BRANCH). Tali Forth originally
0017B1r 3                       ; included 0BRANCH as a high-level word that inserted this code at
0017B1r 3                       ; runtime.
0017B1r 3                       ; """
0017B1r 3               
0017B1r 3                               ; We use the return value on the 65c02 stack to determine
0017B1r 3                               ; where we want to return to.
0017B1r 3  68                           pla
0017B2r 3  85 rr                        sta tmpbranch
0017B4r 3  68                           pla
0017B5r 3  85 rr                        sta tmpbranch+1
0017B7r 3               
0017B7r 3                               ; See if the flag is zero, which is the whole purpose of
0017B7r 3                               ; this all
0017B7r 3  B5 00                        lda 0,x
0017B9r 3  15 01                        ora 1,x
0017BBr 3  F0 0F                        beq @zero
0017BDr 3               
0017BDr 3                               ; Flag is TRUE, so we skip over the next two bytes. This is
0017BDr 3                               ; the part between IF and THEN
0017BDr 3  A5 rr                        lda tmpbranch   ; LSB
0017BFr 3  18                           clc
0017C0r 3  69 02                        adc #2
0017C2r 3  85 rr                        sta tmp1
0017C4r 3  A5 rr                        lda tmpbranch+1 ; MSB
0017C6r 3  69 00                        adc #0          ; For carry
0017C8r 3  85 rr                        sta tmp1+1
0017CAr 3               
0017CAr 3  80 13                        bra @done
0017CCr 3               
0017CCr 3               @zero:
0017CCr 3                               ; Flag is FALSE (0) so we take the jump to the address given in
0017CCr 3                               ; the next two bytes. However, the address points to the last
0017CCr 3                               ; byte of the JSR instruction, not to the next byte afterwards
0017CCr 3  A0 01                        ldy #1
0017CEr 3  B1 rr                        lda (tmpbranch),y
0017D0r 3  85 rr                        sta tmp1
0017D2r 3  C8                           iny
0017D3r 3  B1 rr                        lda (tmpbranch),y
0017D5r 3  85 rr                        sta tmp1+1
0017D7r 3               
0017D7r 3                               ; Now we have to subtract one byte from the address
0017D7r 3                               ; given because of the way the 6502 calculates RTS
0017D7r 3  A5 rr                        lda tmp1
0017D9r 3  D0 02                        bne @1
0017DBr 3  C6 rr                        dec tmp1+1
0017DDr 3               @1:
0017DDr 3  C6 rr                        dec tmp1
0017DFr 3               
0017DFr 3               @done:
0017DFr 3                               ; However we got here, tmp1 has the value we push to jump
0017DFr 3                               ; to
0017DFr 3  A5 rr                        lda tmp1+1
0017E1r 3  48                           pha             ; MSB first
0017E2r 3  A5 rr                        lda tmp1
0017E4r 3  48                           pha
0017E5r 3               
0017E5r 3                               ; clean up the stack and jump
0017E5r 3  E8                           inx
0017E6r 3  E8                           inx
0017E7r 3               
0017E7r 3  60                           rts
0017E8r 3               
0017E8r 3               
0017E8r 3               
0017E8r 3               ; ## IMMEDIATE ( -- ) "Mark most recent word as IMMEDIATE"
0017E8r 3               ; ## "immediate"  auto  ANS core
0017E8r 3                       ; """https://forth-standard.org/standard/core/IMMEDIATE
0017E8r 3                       ; Make sure the most recently defined word is immediate. Will only
0017E8r 3                       ; affect the last word in the dictionary. Note that if the word is
0017E8r 3                       ; defined in ROM, this will have no affect, but will not produce an
0017E8r 3                       ; error message.
0017E8r 3                       ; """
0017E8r 3               xt_immediate:
0017E8r 3  20 rr rr                     jsr current_to_dp
0017EBr 3  A0 01                        ldy #1          ; offset for status byte
0017EDr 3  B1 rr                        lda (dp),y
0017EFr 3  09 04                        ora #IM        ; make sure bit 7 is set
0017F1r 3  91 rr                        sta (dp),y
0017F3r 3               
0017F3r 3  60           z_immediate:    rts
0017F4r 3               
0017F4r 3               
0017F4r 3               ; ## INPUT ( -- addr ) "Return address of input vector"
0017F4r 3               ; ## "input" tested Tali Forth
0017F4r 3               
0017F4r 3               xt_input:
0017F4r 3  CA                           dex
0017F5r 3  CA                           dex
0017F6r 3  A9 rr                        lda #<input
0017F8r 3  95 00                        sta 0,x
0017FAr 3  A9 rr                        lda #>input
0017FCr 3  95 01                        sta 1,x
0017FEr 3               
0017FEr 3  60           z_input:        rts
0017FFr 3               
0017FFr 3               
0017FFr 3               
0017FFr 3               ; ## INPUT_TO_R ( -- ) ( R: -- n n n n ) "Save input state to the Return Stack"
0017FFr 3               ; ## "input>r"  tested  Tali Forth
0017FFr 3                  	; """Save the current input state as defined by insrc, cib, ciblen, and
0017FFr 3                       ; toin to the Return Stack. Used by EVALUTE.
0017FFr 3                       ;
0017FFr 3                       ; The naive way of doing
0017FFr 3                       ; this is to push each two-byte variable to the stack in the form of
0017FFr 3                       ;
0017FFr 3                       ;       lda insrc
0017FFr 3                       ;       pha
0017FFr 3                       ;       lda insrc+1
0017FFr 3                       ;       pha
0017FFr 3                       ;
0017FFr 3                       ; for a total of 24 byte of instruction in one direction and later
0017FFr 3                       ; a further 24 bytes to reverse the process. We shorten this at the
0017FFr 3                       ; cost of some speed by assuming the four variables are grouped
0017FFr 3                       ; together on the Zero Page and start with insrc (see definitions.asm
0017FFr 3                       ; for details). The reverse operation is r_to_input. These words must
0017FFr 3                       ; be flagged as Never Native. Uses tmp1
0017FFr 3                       ; """
0017FFr 3               
0017FFr 3               xt_input_to_r:
0017FFr 3                               ; We arrive here with the return address on the top of the
0017FFr 3                               ; 65c02's stack. We need to move it out of the way first
0017FFr 3  68                           pla
001800r 3  85 rr                        sta tmp1
001802r 3  68                           pla
001803r 3  85 rr                        sta tmp1+1
001805r 3               
001805r 3                               ; This assumes that insrc is the first of eight bytes and
001805r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001805r 3                               ; Page.
001805r 3  A0 07                        ldy #7
001807r 3               @loop:
001807r 3  B9 rr rr                     lda insrc,y     ; insrc+7 is toin+1
00180Ar 3  48                           pha
00180Br 3  88                           dey
00180Cr 3  10 F9                        bpl @loop
00180Er 3               
00180Er 3                               ; Restore address for return jump
00180Er 3  A5 rr                        lda tmp1+1
001810r 3  48                           pha
001811r 3  A5 rr                        lda tmp1
001813r 3  48                           pha
001814r 3               
001814r 3  60           z_input_to_r: 	rts
001815r 3               
001815r 3               
001815r 3               
001815r 3               ; ## INT_TO_NAME ( xt -- nt ) "Get name token from execution token"
001815r 3               ; ## "int>name"  auto  Tali Forth
001815r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001815r 3                       ; This is called >NAME in Gforth, but we change it to
001815r 3                       ; INT>NAME to match NAME>INT
001815r 3                       ; """
001815r 3               
001815r 3               xt_int_to_name:
001815r 3  20 rr rr                     jsr underflow_1
001818r 3               
001818r 3                               ; Unfortunately, to find the header, we have to walk through
001818r 3                               ; all of the wordlists. We are running out of tmp variables.
001818r 3                               ; (I'm assuming there is a reason this is avoiding tmp1) so
001818r 3                               ; hold the current wordlist on the data stack. This searches
001818r 3                               ; all of the wordlists in id order.
001818r 3  CA                           dex
001819r 3  CA                           dex
00181Ar 3  74 00                        stz 0,x
00181Cr 3  74 01                        stz 1,x
00181Er 3               
00181Er 3               @wordlist_loop:
00181Er 3                               ; A needs to have the current wordlist id in it at
00181Er 3                               ; the top of this loop.
00181Er 3  B5 00                        lda 0,x                 ; Get the current wordlist.
001820r 3               
001820r 3                               ; Get the DP for that wordlist.
001820r 3  0A                           asl                     ; Turn offset into cells offset.
001821r 3  18                           clc
001822r 3  69 06                        adc #wordlists_offset
001824r 3  A8                           tay
001825r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
001827r 3  85 rr                        sta tmp2                ; into tmp2
001829r 3  C8                           iny
00182Ar 3  B1 rr                        lda (up),y
00182Cr 3  85 rr                        sta tmp2+1
00182Er 3               
00182Er 3                               ; Check for an empty wordlist (DP will be 0)
00182Er 3  A5 rr                        lda tmp2
001830r 3  05 rr                        ora tmp2+1
001832r 3  F0 38                        beq @next_wordlist
001834r 3               
001834r 3  B5 02                        lda 2,x         ; Target xt is now behind wordlist id.
001836r 3  85 rr                        sta tmp3        ; Save target xt in tmp3
001838r 3  B5 03                        lda 3,x
00183Ar 3  85 rr                        sta tmp3+1
00183Cr 3               
00183Cr 3               @loop:
00183Cr 3  A0 04                        ldy #4          ; xt is four bytes down
00183Er 3  B1 rr                        lda (tmp2),y    ; LSB of xt of current nt
001840r 3  C5 rr                        cmp tmp3
001842r 3  D0 07                        bne @no_match
001844r 3               
001844r 3                               ; LSB is the same, now check MSB
001844r 3  C8                           iny
001845r 3  B1 rr                        lda (tmp2),y    ; MSB of xt of current nt
001847r 3  C5 rr                        cmp tmp3+1
001849r 3  F0 32                        beq @match
00184Br 3               
00184Br 3               @no_match:
00184Br 3                               ; no match, so we need to get the next word. Next nt is two
00184Br 3                               ; bytes down
00184Br 3  18                           clc
00184Cr 3  A5 rr                        lda tmp2
00184Er 3  69 02                        adc #2
001850r 3  85 rr                        sta tmp2
001852r 3  A5 rr                        lda tmp2+1
001854r 3  69 00                        adc #0          ; only care about carry
001856r 3  85 rr                        sta tmp2+1
001858r 3               
001858r 3  A0 00                        ldy #0
00185Ar 3  B1 rr                        lda (tmp2),y
00185Cr 3  48                           pha
00185Dr 3  C8                           iny
00185Er 3  11 rr                        ora (tmp2),y
001860r 3  F0 09                        beq @zero
001862r 3               
001862r 3                               ; Not zero continue
001862r 3  B1 rr                        lda (tmp2),y
001864r 3  85 rr                        sta tmp2+1
001866r 3  68                           pla
001867r 3  85 rr                        sta tmp2
001869r 3  80 D1                        bra @loop
00186Br 3               
00186Br 3               @zero:
00186Br 3                               ; if next word is zero, the xt has no nt in this wordlist
00186Br 3  68                           pla             ; Leftover from above loop
00186Cr 3               
00186Cr 3               @next_wordlist:
00186Cr 3                               ; Move on to the next wordlist.
00186Cr 3  B5 00                        lda 0,x
00186Er 3  1A                           inc
00186Fr 3  95 00                        sta 0,x
001871r 3  C9 0C                        cmp #max_wordlists
001873r 3  D0 A9                        bne @wordlist_loop
001875r 3               
001875r 3                               ; We didn't find it in any of the wordlists.
001875r 3                               ; Remove the wordlist id from the stack.
001875r 3  E8                           inx
001876r 3  E8                           inx
001877r 3               
001877r 3                               ; We return a zero to indicate that we didn't find it.
001877r 3  74 00                        stz 0,x
001879r 3  74 01                        stz 1,x
00187Br 3  80 0A                        bra z_int_to_name
00187Dr 3               
00187Dr 3               @match:
00187Dr 3                               ; We found it. Remove wordlist id from stack.
00187Dr 3  E8                           inx
00187Er 3  E8                           inx
00187Fr 3               
00187Fr 3                               ; It's a match! Replace TOS with nt
00187Fr 3  A5 rr                        lda tmp2
001881r 3  95 00                        sta 0,x
001883r 3  A5 rr                        lda tmp2+1
001885r 3  95 01                        sta 1,x
001887r 3               
001887r 3  60           z_int_to_name:  rts
001888r 3               
001888r 3               
001888r 3               
001888r 3               ; ## INVERT ( n -- n ) "Complement of TOS"
001888r 3               ; ## "invert"  auto  ANS core
001888r 3                       ; """https://forth-standard.org/standard/core/INVERT"""
001888r 3               xt_invert:
001888r 3  20 rr rr                     jsr underflow_1
00188Br 3               
00188Br 3  A9 FF                        lda #$FF
00188Dr 3  55 00                        eor 0,x         ; LSB
00188Fr 3  95 00                        sta 0,x
001891r 3               
001891r 3  A9 FF                        lda #$FF
001893r 3  55 01                        eor 1,x         ; MSB
001895r 3  95 01                        sta 1,x
001897r 3               
001897r 3  60           z_invert:       rts
001898r 3               
001898r 3               
001898r 3               ; ## IS ( xt "name" -- ) "Set named word to execute xt"
001898r 3               ; ## "is"  auto  ANS core ext
001898r 3                       ; """http://forth-standard.org/standard/core/IS"""
001898r 3               
001898r 3               xt_is:
001898r 3                               ; This is a state aware word with differet behavior
001898r 3                               ; when used while compiling vs interpreting.
001898r 3                               ; Check STATE
001898r 3  A5 rr                        lda state
00189Ar 3  05 rr                        ora state+1
00189Cr 3  F0 0C                        beq @interpreting
00189Er 3               
00189Er 3               @compiling:
00189Er 3                               ; Run ['] to compile the xt of the next word as a literal.
00189Er 3  20 rr rr                     jsr xt_bracket_tick
0018A1r 3               
0018A1r 3                               ; Postpone DEFER! by compiling a JSR to it.
0018A1r 3  A0 rr                        ldy #>xt_defer_store
0018A3r 3  A9 rr                        lda #<xt_defer_store
0018A5r 3  20 rr rr                     jsr cmpl_subroutine
0018A8r 3               
0018A8r 3  80 06                        bra @done
0018AAr 3               
0018AAr 3               @interpreting:
0018AAr 3  20 rr rr                     jsr xt_tick
0018ADr 3  20 rr rr                     jsr xt_defer_store
0018B0r 3               @done:
0018B0r 3  60           z_is:           rts
0018B1r 3               
0018B1r 3               
0018B1r 3               
0018B1r 3               ; ## J ( -- n ) (R: n -- n ) "Copy second loop counter to stack"
0018B1r 3               ; ## "j"  auto  ANS core
0018B1r 3                       ; """https://forth-standard.org/standard/core/J
0018B1r 3                       ; Copy second loop counter from Return Stack to stack. Note we use
0018B1r 3                       ; a fudge factor for loop control; see the Control Flow section of
0018B1r 3                       ; the manual for more details.
0018B1r 3                       ; At this point, we have the "I" counter/limit and the LEAVE address
0018B1r 3                       ; on the stack above this (three entries), whereas the ideal Forth
0018B1r 3                       ; implementation would just have two.
0018B1r 3                       ;
0018B1r 3                       ; Make this native compiled for speed
0018B1r 3                       ; """
0018B1r 3               
0018B1r 3               xt_j:
0018B1r 3  CA                           dex
0018B2r 3  CA                           dex
0018B3r 3               
0018B3r 3                               ; Get the fudged index off from the stack. It's easier to
0018B3r 3                               ; do math on the stack directly than to pop and push stuff
0018B3r 3                               ; around
0018B3r 3  86 rr                        stx tmpdsp
0018B5r 3  BA                           tsx
0018B6r 3               
0018B6r 3  38                           sec
0018B7r 3  BD 07 01                     lda $0107,x     ; LSB
0018BAr 3  FD 09 01                     sbc $0109,x
0018BDr 3  A8                           tay
0018BEr 3               
0018BEr 3  BD 08 01                     lda $0108,x     ; MSB
0018C1r 3  FD 0A 01                     sbc $010A,x
0018C4r 3               
0018C4r 3  A6 rr                        ldx tmpdsp
0018C6r 3               
0018C6r 3  95 01                        sta 1,x         ; MSB of de-fudged index
0018C8r 3  94 00                        sty 0,x         ; LSB of de-fudged index
0018CAr 3               
0018CAr 3  60           z_j:            rts
0018CBr 3               
0018CBr 3               
0018CBr 3               
0018CBr 3               ; ## KEY ( -- char ) "Get one character from the input"
0018CBr 3               ; ## "key"  tested  ANS core
0018CBr 3               xt_key:
0018CBr 3                       ; """https://forth-standard.org/standard/core/KEY
0018CBr 3                       ; Get a single character of input from the vectored
0018CBr 3                       ; input without echoing.
0018CBr 3                       ; """
0018CBr 3  20 rr rr                     jsr key_a               ; returns char in A
0018CEr 3               
0018CEr 3  CA                           dex
0018CFr 3  CA                           dex
0018D0r 3  95 00                        sta 0,x
0018D2r 3  74 01                        stz 1,x
0018D4r 3               
0018D4r 3  60           z_key:          rts
0018D5r 3               
0018D5r 3               key_a:
0018D5r 3                       ; The 65c02 doesn't have a JSR (ADDR,X) instruction like the
0018D5r 3                       ; 65816, so we have to fake the indirect jump to vector it.
0018D5r 3                       ; This is depressingly slow. We use this routine internally
0018D5r 3                       ; to avoid manipulating the Data Stack when we just want a
0018D5r 3                       ; character
0018D5r 3  6C rr rr                     jmp (input)             ; JSR/RTS
0018D8r 3               
0018D8r 3               
0018D8r 3               ; ## LATESTNT ( -- nt ) "Push most recent nt to the stack"
0018D8r 3               ; ## "latestnt"  auto  Tali Forth
0018D8r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0018D8r 3                       ; The Gforth version of this word is called LATEST
0018D8r 3                       ; """
0018D8r 3               xt_latestnt:
0018D8r 3  CA                           dex
0018D9r 3  CA                           dex
0018DAr 3               
0018DAr 3  20 rr rr                     jsr current_to_dp
0018DDr 3               
0018DDr 3  A5 rr                        lda dp
0018DFr 3  95 00                        sta 0,x
0018E1r 3  A5 rr                        lda dp+1
0018E3r 3  95 01                        sta 1,x
0018E5r 3               
0018E5r 3  60           z_latestnt:     rts
0018E6r 3               
0018E6r 3               
0018E6r 3               ; ## LATESTXT ( -- xt ) "Push most recent xt to the stack"
0018E6r 3               ; ## "latestxt"  auto  Gforth
0018E6r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Anonymous-Definitions.html"""
0018E6r 3               xt_latestxt:
0018E6r 3  20 rr rr                     jsr xt_latestnt         ; ( nt )
0018E9r 3  20 rr rr                     jsr xt_name_to_int      ; ( xt )
0018ECr 3               
0018ECr 3  60           z_latestxt:     rts
0018EDr 3               
0018EDr 3               
0018EDr 3               ; ## LEAVE ( -- ) "Leave DO/LOOP construct"
0018EDr 3               ; ## "leave"  auto  ANS core
0018EDr 3                       ; """https://forth-standard.org/standard/core/LEAVE
0018EDr 3                       ; Note that this does not work with anything but a DO/LOOP in
0018EDr 3                       ; contrast to other versions such as discussed at
0018EDr 3                       ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
0018EDr 3                       ;
0018EDr 3                       ;       : LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY
0018EDr 3                       ; See the Control Flow section in the manual for details of how this works.
0018EDr 3                       ; This must be native compile and not IMMEDIATE
0018EDr 3                       ; """
0018EDr 3               
0018EDr 3               xt_leave:
0018EDr 3                               ; We dump the limit/start entries off the Return Stack
0018EDr 3                               ; (four bytes)
0018EDr 3  68                           pla
0018EEr 3  68                           pla
0018EFr 3  68                           pla
0018F0r 3  68                           pla
0018F1r 3               
0018F1r 3  60                           rts             ; this must be compiled, so keep before z_leave
0018F2r 3               z_leave:                        ; not reached, not compiled
0018F2r 3               
0018F2r 3               
0018F2r 3               
0018F2r 3               ; ## LEFT_BRACKET ( -- ) "Enter interpretation state"
0018F2r 3               ; ## "["  auto  ANS core
0018F2r 3                       ; """https://forth-standard.org/standard/core/Bracket
0018F2r 3                       ; This is an immediate and compile-only word
0018F2r 3                       ; """
0018F2r 3               xt_left_bracket:
0018F2r 3  64 rr                        stz state
0018F4r 3  64 rr                        stz state+1
0018F6r 3               
0018F6r 3  60           z_left_bracket: rts
0018F7r 3               
0018F7r 3               
0018F7r 3               ; ## LESS_NUMBER_SIGN ( -- ) "Start number conversion"
0018F7r 3               ; ## "<#"  auto  ANS core
0018F7r 3                       ; """https://forth-standard.org/standard/core/num-start
0018F7r 3                       ; Start the process to create pictured numeric output.
0018F7r 3                       ;
0018F7r 3                       ; The new
0018F7r 3                       ; string is constructed from back to front, saving the new character
0018F7r 3                       ; at the beginning of the output string. Since we use PAD as a
0018F7r 3                       ; starting address and work backward (!), the string is constructed
0018F7r 3                       ; in the space between the end of the Dictionary (as defined by CP)
0018F7r 3                       ; and the PAD. This allows us to satisfy the ANS Forth condition that
0018F7r 3                       ; programs don't fool around with the PAD but still use its address.
0018F7r 3                       ; Based on pForth
0018F7r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
0018F7r 3                       ; pForth is in the pubic domain. Forth is : <# PAD HLD ! ; we use the
0018F7r 3                       ; internal variable tohold instead of HLD.
0018F7r 3                       ; """
0018F7r 3               xt_less_number_sign:
0018F7r 3  20 rr rr                     jsr xt_pad      ; ( addr )
0018FAr 3               
0018FAr 3  B5 00                        lda 0,x
0018FCr 3  85 rr                        sta tohold
0018FEr 3  B5 01                        lda 1,x
001900r 3  85 rr                        sta tohold+1
001902r 3               
001902r 3  E8                           inx
001903r 3  E8                           inx
001904r 3               
001904r 3               z_less_number_sign:
001904r 3  60                           rts
001905r 3               
001905r 3               ; ## LESS_THAN ( n m -- f ) "Return true if NOS < TOS"
001905r 3               ; ## "<"  auto  ANS core
001905r 3                       ; """https://forth-standard.org/standard/core/less"""
001905r 3               
001905r 3               xt_less_than:
001905r 3  20 rr rr                     jsr underflow_2
001908r 3               
001908r 3  A0 00                        ldy #0          ; default false
00190Ar 3  20 rr rr                     jsr compare_16bit
00190Dr 3               
00190Dr 3                               ; for signed numbers, NOS < TOS if Z=0 and N=0
00190Dr 3  F0 03                        beq @false
00190Fr 3  30 01                        bmi @false
001911r 3               
001911r 3                               ; true
001911r 3  88                           dey
001912r 3               @false:
001912r 3  98                           tya
001913r 3               
001913r 3  E8                           inx
001914r 3  E8                           inx
001915r 3  95 00                        sta 0,x
001917r 3  95 01                        sta 1,x
001919r 3               
001919r 3  60           z_less_than:    rts
00191Ar 3               
00191Ar 3               
00191Ar 3               
00191Ar 3               ; ## LIST ( scr# -- ) "List the given screen"
00191Ar 3               ; ## "list"  tested  ANS block ext
00191Ar 3                       ; """https://forth-standard.org/standard/block/LIST"""
00191Ar 3               
00191Ar 3               xt_list:
00191Ar 3  20 rr rr                     jsr underflow_1
00191Dr 3               
00191Dr 3                               ; Save the screen number in SCR
00191Dr 3  20 rr rr                     jsr xt_scr
001920r 3  20 rr rr                     jsr xt_store
001923r 3               
001923r 3                               ; Use L from the editor-wordlist to display the screen.
001923r 3  20 rr rr                     jsr xt_editor_l
001926r 3               
001926r 3  60           z_list:         rts
001927r 3               
001927r 3               
001927r 3               
001927r 3               ; ## LITERAL ( n -- ) "Store TOS to be push on stack during runtime"
001927r 3               ; ## "literal"  auto  ANS core
001927r 3                       ; """https://forth-standard.org/standard/core/LITERAL
001927r 3                       ; Compile-only word to store TOS so that it is pushed on stack
001927r 3                       ; during runtime. This is a immediate, compile-only word. At runtime,
001927r 3                       ; it works by calling literal_runtime by compling JSR LITERAL_RT.
001927r 3                       ;
001927r 3                       ; Note the cmpl_ routines use TMPTOS
001927r 3                       ; """
001927r 3               xt_literal:
001927r 3  20 rr rr                     jsr underflow_1
00192Ar 3               
00192Ar 3  A0 rr                        ldy #>literal_runtime
00192Cr 3  A9 rr                        lda #<literal_runtime
00192Er 3  20 rr rr                     jsr cmpl_subroutine
001931r 3               
001931r 3                               ; Compile the value that is to be pushed on the Stack during
001931r 3                               ; runtime
001931r 3  20 rr rr                     jsr xt_comma
001934r 3               
001934r 3  60           z_literal:      rts
001935r 3               
001935r 3               literal_runtime:
001935r 3               
001935r 3                               ; During runtime, we push the value following this word back
001935r 3                               ; on the Data Stack. The subroutine jump that brought us
001935r 3                               ; here put the address to return to on the Return Stack -
001935r 3                               ; this points to the data we need to get. This routine is
001935r 3                               ; also called (LITERAL) in some Forths
001935r 3  CA                           dex
001936r 3  CA                           dex
001937r 3               
001937r 3                           	; The 65c02 stores <RETURN-ADDRESS>-1 on the Return Stack,
001937r 3                               ; so we are actually popping the address-1 of the literal
001937r 3  68                           pla             ; LSB
001938r 3  85 rr                        sta tmp1
00193Ar 3  68                           pla             ; MSB
00193Br 3  85 rr                        sta tmp1+1
00193Dr 3               
00193Dr 3                               ; Fetch the actual literal value and push it on Data stack
00193Dr 3  A0 01                        ldy #1
00193Fr 3  B1 rr                        lda (tmp1),y    ; LSB
001941r 3  95 00                        sta 0,x
001943r 3  C8                           iny
001944r 3  B1 rr                        lda (tmp1),y    ; MSB
001946r 3  95 01                        sta 1,x
001948r 3               
001948r 3                               ; Adjust return address and push back on the Return Stack
001948r 3  98                           tya
001949r 3  18                           clc
00194Ar 3  65 rr                        adc tmp1
00194Cr 3  A8                           tay
00194Dr 3  A5 rr                        lda tmp1+1
00194Fr 3  69 00                        adc #0
001951r 3  48                           pha
001952r 3  5A                           phy
001953r 3               
001953r 3  60                           rts
001954r 3               
001954r 3               
001954r 3               
001954r 3               ; ## LOAD ( scr# -- ) "Load the Forth code in a screen/block"
001954r 3               ; ## "load"  auto  ANS block
001954r 3                       ; """https://forth-standard.org/standard/block/LOAD
001954r 3                       ;
001954r 3                       ; Note: LOAD current works because there is only one buffer.
001954r 3                       ; If/when multiple buffers are supported, we'll have to deal
001954r 3                       ; with the fact that it might re-load the old block into a
001954r 3                       ; different buffer.
001954r 3                       ; """
001954r 3               
001954r 3               xt_load:
001954r 3  20 rr rr                     jsr underflow_1
001957r 3               
001957r 3                               ; Save the current value of BLK on the return stack.
001957r 3  A0 01                        ldy #blk_offset+1
001959r 3  B1 rr                        lda (up),y
00195Br 3  48                           pha
00195Cr 3  88                           dey
00195Dr 3  B1 rr                        lda (up),y
00195Fr 3  48                           pha
001960r 3               
001960r 3                               ; Set BLK to the given block/screen number.
001960r 3  B5 00                        lda 0,x
001962r 3  91 rr                        sta (up),y
001964r 3  C8                           iny
001965r 3  B5 01                        lda 1,x
001967r 3  91 rr                        sta (up),y
001969r 3               
001969r 3                               ; Load that block into a buffer
001969r 3  20 rr rr                     jsr xt_block
00196Cr 3               
00196Cr 3                               ; Put 1024 on the stack for the screen length.
00196Cr 3  CA                           dex
00196Dr 3  CA                           dex
00196Er 3  A9 04                        lda #4
001970r 3  95 01                        sta 1,x
001972r 3  74 00                        stz 0,x
001974r 3               
001974r 3                               ; Jump to a special evluate target. This bypasses the underflow
001974r 3                               ; check and skips the zeroing of BLK.
001974r 3  20 rr rr                     jsr load_evaluate
001977r 3               
001977r 3                               ; Restore the value of BLK from before the LOAD command.
001977r 3  A0 00                        ldy #blk_offset
001979r 3  68                           pla
00197Ar 3  91 rr                        sta (up),y
00197Cr 3  C8                           iny
00197Dr 3  68                           pla
00197Er 3  91 rr                        sta (up),y
001980r 3               
001980r 3                               ; If BLK is not zero, read it back into the buffer.
001980r 3                               ; A still has MSB
001980r 3  88                           dey
001981r 3  11 rr                        ora (up),y
001983r 3  F0 12                        beq @done
001985r 3               
001985r 3                               ; The block needs to be read back into the buffer.
001985r 3  CA                           dex
001986r 3  CA                           dex
001987r 3  A0 00                        ldy #blk_offset
001989r 3  B1 rr                        lda (up),y
00198Br 3  95 00                        sta 0,x
00198Dr 3  C8                           iny
00198Er 3  B1 rr                        lda (up),y
001990r 3  95 01                        sta 1,x
001992r 3  20 rr rr                     jsr xt_block
001995r 3               
001995r 3                               ; Drop the buffer address.
001995r 3  E8                           inx
001996r 3  E8                           inx
001997r 3               
001997r 3               @done:
001997r 3  60           z_load:         rts
001998r 3               
001998r 3               
001998r 3               
001998r 3               ; ## LOOP ( -- ) "Finish loop construct"
001998r 3               ; ## "loop"  auto  ANS core
001998r 3                       ; """https://forth-standard.org/standard/core/LOOP
001998r 3                       ; Compile-time part of LOOP. This does nothing more but push 1 on
001998r 3                       ; the stack and then call +LOOP.
001998r 3                       ;
001998r 3                       ; In Forth, this is
001998r 3                       ;       : LOOP  POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ;
001998r 3                       ;       IMMEDIATE ; COMPILE-ONLY
001998r 3                       ; """
001998r 3               xt_loop:
001998r 3                               ; Have the finished word push 1 on the stack
001998r 3  A0 rr                        ldy #>xt_one
00199Ar 3  A9 rr                        lda #<xt_one
00199Cr 3  20 rr rr                     jsr cmpl_subroutine     ; drop through to +LOOP
00199Fr 3               
00199Fr 3               
00199Fr 3               ; ## PLUS_LOOP ( -- ) "Finish loop construct"
00199Fr 3               ; ## "+loop"  auto  ANS core
00199Fr 3                       ; """https://forth-standard.org/standard/core/PlusLOOP
00199Fr 3                       ;
00199Fr 3                       ; Compile-time part of +LOOP, also used for LOOP. Is usually
00199Fr 3                       ;       : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
00199Fr 3                       ;       COMPILE-ONLY
00199Fr 3                       ; in Forth. LOOP uses this routine as well. We jump here with the
00199Fr 3                       ; address for looping as TOS and the address for aborting the loop
00199Fr 3                       ; (LEAVE) as the second double-byte entry on the Return Stack (see
00199Fr 3                       ; DO and the Control Flow section of the manual for details).
00199Fr 3                       ; """
00199Fr 3               
00199Fr 3               xt_plus_loop:
00199Fr 3                               ; Compile the run-time part. We do this with a short loop
00199Fr 3                               ; and not a call to COMPILE, because it has to be natively
00199Fr 3                               ; coded anyway.
00199Fr 3  A0 11                        ldy #plus_loop_runtime_end-plus_loop_runtime
0019A1r 3  5A                           phy             ; save counter to adjust CP
0019A2r 3               @1:
0019A2r 3  B9 rr rr                     lda plus_loop_runtime,y
0019A5r 3  91 rr                        sta (cp),y
0019A7r 3  88                           dey
0019A8r 3  10 F8                        bpl @1
0019AAr 3               
0019AAr 3                               ; Adjust CP
0019AAr 3  68                           pla
0019ABr 3  18                           clc
0019ACr 3  65 rr                        adc cp
0019AEr 3  85 rr                        sta cp
0019B0r 3  A5 rr                        lda cp+1
0019B2r 3  69 00                        adc #0          ; only need carry
0019B4r 3  85 rr                        sta cp+1
0019B6r 3               
0019B6r 3                               ; The address we need to loop back to is TOS. Store it so
0019B6r 3                               ; the runtime part of +LOOP jumps back up there
0019B6r 3  20 rr rr                     jsr xt_comma
0019B9r 3               
0019B9r 3                               ; Compile an UNLOOP for when we're all done. This is a series
0019B9r 3                               ; of six PLA, so we just do it here instead jumping around
0019B9r 3                               ; all over the place
0019B9r 3  A9 68                        lda #$68                ; opcode for PLA
0019BBr 3  A0 06                        ldy #6
0019BDr 3               @2:
0019BDr 3  91 rr                        sta (cp),y
0019BFr 3  88                           dey
0019C0r 3  10 FB                        bpl @2
0019C2r 3               
0019C2r 3                               ; Adjust CP
0019C2r 3  A9 06                        lda #6
0019C4r 3  18                           clc
0019C5r 3  65 rr                        adc cp
0019C7r 3  85 rr                        sta cp
0019C9r 3  A5 rr                        lda cp+1
0019CBr 3  69 00                        adc #0                  ; only need carry
0019CDr 3  85 rr                        sta cp+1
0019CFr 3               
0019CFr 3                               ; Complete compile of DO/?DO by replacing the six
0019CFr 3                               ; dummy bytes by PHA instructions. The address where
0019CFr 3                               ; they are located is on the Data Stack
0019CFr 3  B5 00                        lda 0,x
0019D1r 3  85 rr                        sta tmp1
0019D3r 3  B5 01                        lda 1,x
0019D5r 3  85 rr                        sta tmp1+1
0019D7r 3  E8                           inx
0019D8r 3  E8                           inx
0019D9r 3               
0019D9r 3                               ; Because of the way that CP works, we don't have to save
0019D9r 3                               ; CP, but CP-1
0019D9r 3  A5 rr                        lda cp
0019DBr 3  38                           sec
0019DCr 3  E9 01                        sbc #1
0019DEr 3  85 rr                        sta tmp2
0019E0r 3  A5 rr                        lda cp+1
0019E2r 3  E9 00                        sbc #0
0019E4r 3  85 rr                        sta tmp2+1
0019E6r 3               
0019E6r 3                               ; now compile this in the DO/?DO routine
0019E6r 3  A0 00                        ldy #0
0019E8r 3               
0019E8r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
0019EAr 3  91 rr                        sta (tmp1),y
0019ECr 3  C8                           iny
0019EDr 3  A5 rr                        lda tmp2+1      ; MSB
0019EFr 3  91 rr                        sta (tmp1),y
0019F1r 3  C8                           iny
0019F2r 3  A9 48                        lda #$48        ; Opcode for PHA
0019F4r 3  91 rr                        sta (tmp1),y
0019F6r 3  C8                           iny
0019F7r 3               
0019F7r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
0019F9r 3  91 rr                        sta (tmp1),y
0019FBr 3  C8                           iny
0019FCr 3  A5 rr                        lda tmp2        ; LSB
0019FEr 3  91 rr                        sta (tmp1),y
001A00r 3  C8                           iny
001A01r 3  A9 48                        lda #$48        ; Opcode for PHA
001A03r 3  91 rr                        sta (tmp1),y
001A05r 3               z_loop:
001A05r 3  60           z_plus_loop:    rts
001A06r 3               
001A06r 3               
001A06r 3               plus_loop_runtime:
001A06r 3                       ; """Runtime compile for loop control. This is used for both +LOOP and
001A06r 3                       ; LOOP which are defined at high level. Note we use a fudge factor for
001A06r 3                       ; loop control so we can test with the Overflow Flag. See
001A06r 3                       ; the Control Flow section of the manual for details.
001A06r 3                       ; The step value is TOS in the loop. This
001A06r 3                       ; must always be native compiled. In some Forths, this is a separate
001A06r 3                       ; word called (+LOOP) or (LOOP)
001A06r 3                       ; """
001A06r 3               
001A06r 3  18                           clc
001A07r 3  68                           pla             ; LSB of index
001A08r 3  75 00                        adc 0,x         ; LSB of step
001A0Ar 3  A8                           tay             ; temporary storage of LSB
001A0Br 3               
001A0Br 3  B8                           clv
001A0Cr 3  68                           pla             ; MSB of index
001A0Dr 3  75 01                        adc 1,x         ; MSB of step
001A0Fr 3  48                           pha             ; put MSB of index back on stack
001A10r 3               
001A10r 3  98                           tya             ; put LSB of index back on stack
001A11r 3  48                           pha
001A12r 3               
001A12r 3  E8                           inx             ; dump step from TOS
001A13r 3  E8                           inx
001A14r 3               
001A14r 3                               ; If V flag is set, we're done looping and continue
001A14r 3                               ; after the +LOOP instruction
001A14r 3  70 03                        bvs @hack+3     ; skip over JMP instruction
001A16r 3               
001A16r 3               @hack:          ; This is why this routine must be natively compiled: We
001A16r 3                               ; compile the opcode for JMP here without an address to
001A16r 3                               ; go to, which is added by the next next instruction of
001A16r 3                               ; LOOP/+LOOP during compile time
001A16r 3  4C                           .byte $4C
001A17r 3               
001A17r 3               plus_loop_runtime_end:
001A17r 3               
001A17r 3               
001A17r 3               ; ## LSHIFT ( x u -- u ) "Shift TOS left"
001A17r 3               ; ## "lshift"  auto  ANS core
001A17r 3                       ; """https://forth-standard.org/standard/core/LSHIFT"""
001A17r 3               
001A17r 3               xt_lshift:
001A17r 3  20 rr rr                     jsr underflow_2
001A1Ar 3               
001A1Ar 3                               ; max shift 16 times
001A1Ar 3  B5 00                        lda 0,x
001A1Cr 3  29 0F                        and #%00001111
001A1Er 3  F0 08                        beq @done
001A20r 3               
001A20r 3  A8                           tay
001A21r 3               
001A21r 3               @loop:
001A21r 3  16 02                        asl 2,x
001A23r 3  36 03                        rol 3,x
001A25r 3  88                           dey
001A26r 3  D0 F9                        bne @loop
001A28r 3               
001A28r 3               @done:
001A28r 3  E8                           inx
001A29r 3  E8                           inx
001A2Ar 3               
001A2Ar 3  60           z_lshift:       rts
001A2Br 3               
001A2Br 3               
001A2Br 3               
001A2Br 3               ; ## M_STAR ( n n -- d ) "16 * 16 --> 32"
001A2Br 3               ; ## "m*"  auto  ANS core
001A2Br 3                       ; """https://forth-standard.org/standard/core/MTimes
001A2Br 3                       ; Multiply two 16 bit numbers, producing a 32 bit result. All
001A2Br 3                       ; values are signed. Adapted from FIG Forth for Tali Forth.
001A2Br 3                       ;
001A2Br 3                       ; The original Forth is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;
001A2Br 3                       ; with  : D+- O< IF DNEGATE THEN ;
001A2Br 3                       ; """
001A2Br 3               
001A2Br 3               xt_m_star:
001A2Br 3  20 rr rr                     jsr underflow_2
001A2Er 3               
001A2Er 3                               ; figure out the sign
001A2Er 3  B5 01                        lda 1,x         ; MSB of n1
001A30r 3  55 03                        eor 3,x         ; MSB of n2
001A32r 3               
001A32r 3                               ; UM* uses all kinds of temporary variables so we don't
001A32r 3                               ; risk a conflict but just take the cycle hit and push
001A32r 3                               ; this to the stack
001A32r 3  48                           pha
001A33r 3               
001A33r 3                               ; get the absolute value of both numbers so we can feed
001A33r 3                               ; them to UM*, which does the real work
001A33r 3  20 rr rr                     jsr xt_abs
001A36r 3  20 rr rr                     jsr xt_swap
001A39r 3  20 rr rr                     jsr xt_abs
001A3Cr 3               
001A3Cr 3  20 rr rr                     jsr xt_um_star          ; ( d )
001A3Fr 3               
001A3Fr 3                               ; handle the sign
001A3Fr 3  68                           pla
001A40r 3  10 03                        bpl @done
001A42r 3               
001A42r 3  20 rr rr                     jsr xt_dnegate
001A45r 3               @done:
001A45r 3  60           z_m_star:       rts
001A46r 3               
001A46r 3               
001A46r 3               
001A46r 3               ; ## MARKER ( "name" -- ) "Create a deletion boundry"
001A46r 3               ; ## "marker"  auto  ANS core ext
001A46r 3                       ; """https://forth-standard.org/standard/core/MARKER
001A46r 3                       ; This word replaces FORGET in earlier Forths. Old entries are not
001A46r 3                       ; actually deleted, but merely overwritten by restoring CP and DP.
001A46r 3                       ; Run the named word at a later time to restore all of the wordlists
001A46r 3                       ; to their state when the word was created with marker.  Any words
001A46r 3                       ; created after the marker (including the marker) will be forgotten.
001A46r 3                       ;
001A46r 3                       ; To do this, we want to end up with something that jumps to a
001A46r 3                       ; run-time component with a link to the original CP and DP values:
001A46r 3                       ;
001A46r 3                       ;       jsr marker_runtime
001A46r 3                       ;       <Original CP MSB>
001A46r 3                       ;       <Original CP LSB>
001A46r 3                       ;       <Original DP MSB> ( for CURRENT wordlist )
001A46r 3                       ;       <Original DP LSB>
001A46r 3                       ;       < USER variables from offset 4 to 39 >
001A46r 3                       ;
001A46r 3                       ;       The user variables include:
001A46r 3                       ;       CURRENT (byte variable)
001A46r 3                       ;       <All wordlists> (currently 12) (cell array)
001A46r 3                       ;       <#ORDER> (byte variable)
001A46r 3                       ;       <All search order> (currently 9) (byte array)
001A46r 3                       ;
001A46r 3                       ; This code uses tmp1 and tmp2
001A46r 3                       ; """
001A46r 3               
001A46r 3               xt_marker:
001A46r 3                               ; Before we do anything, we need to save CP, which
001A46r 3                               ; after all is the whole point of this operation. CREATE
001A46r 3                               ; uses tmp1 and tmp2, so we take the speed hit and push stuff
001A46r 3                               ; to the stack
001A46r 3  20 rr rr                     jsr current_to_dp
001A49r 3               
001A49r 3  A5 rr                        lda dp
001A4Br 3  48                           pha
001A4Cr 3  A5 rr                        lda dp+1
001A4Er 3  48                           pha
001A4Fr 3               
001A4Fr 3  A5 rr                        lda cp
001A51r 3  48                           pha
001A52r 3  A5 rr                        lda cp+1
001A54r 3  48                           pha
001A55r 3               
001A55r 3  20 rr rr                     jsr xt_create
001A58r 3               
001A58r 3                               ; By default, CREATE installs a subroutine jump to DOVAR, which
001A58r 3                               ; we have to replace by a jump to marker_runtime. We back up
001A58r 3                               ; two bytes and then overwrite the address
001A58r 3  A5 rr                        lda cp          ; LSB
001A5Ar 3  38                           sec
001A5Br 3  E9 02                        sbc #2
001A5Dr 3  85 rr                        sta cp
001A5Fr 3               
001A5Fr 3  A5 rr                        lda cp+1        ; MSB
001A61r 3  E9 00                        sbc #0          ; we only care about the borrow
001A63r 3  85 rr                        sta cp+1
001A65r 3               
001A65r 3                               ; Add the address of the runtime component
001A65r 3  A0 rr                        ldy #>marker_runtime
001A67r 3  A9 rr                        lda #<marker_runtime
001A69r 3  20 rr rr                     jsr cmpl_word
001A6Cr 3               
001A6Cr 3                               ; Add original CP as payload
001A6Cr 3  7A                           ply                     ; MSB
001A6Dr 3  68                           pla                     ; LSB
001A6Er 3  20 rr rr                     jsr cmpl_word
001A71r 3               
001A71r 3                               ; Add original DP as payload
001A71r 3  7A                           ply                     ; MSB
001A72r 3  68                           pla                     ; LSB
001A73r 3  20 rr rr                     jsr cmpl_word
001A76r 3               
001A76r 3                               ; Add the user variables for the wordlists and search order.
001A76r 3                               ; We're compiling them in byte order.
001A76r 3  A0 04                        ldy #4                  ; Start at CURRENT
001A78r 3               @marker_loop:
001A78r 3  B1 rr                        lda (up),y
001A7Ar 3  20 rr rr                     jsr cmpl_a
001A7Dr 3  C8                           iny
001A7Er 3  98                           tya
001A7Fr 3  C9 28                        cmp #40                 ; One past the end of the search order.
001A81r 3  D0 F5                        bne @marker_loop
001A83r 3               
001A83r 3  60           z_marker:       rts
001A84r 3               
001A84r 3               
001A84r 3               
001A84r 3               marker_runtime:
001A84r 3                       ; """Restore Dictionary and memory (DP and CP) to where the were
001A84r 3                       ; when this marker was defined. We arrive here with the return
001A84r 3                       ; address on the Return Stack in the usual 65c02 format
001A84r 3                       ; """
001A84r 3               
001A84r 3                               ; Get the address of the string address off the stack and
001A84r 3                               ; increase by one because of the RTS mechanics
001A84r 3  68                           pla
001A85r 3  85 rr                        sta tmp1        ; LSB of address
001A87r 3  68                           pla
001A88r 3  85 rr                        sta tmp1+1      ; MSB of address
001A8Ar 3               
001A8Ar 3  E6 rr                        inc tmp1
001A8Cr 3  D0 02                        bne @1
001A8Er 3  E6 rr                        inc tmp1+1
001A90r 3               @1:
001A90r 3  A0 00                        ldy #0
001A92r 3               
001A92r 3                               ; CP was stored first
001A92r 3  B1 rr                        lda (tmp1),y
001A94r 3  85 rr                        sta cp
001A96r 3  C8                           iny
001A97r 3  B1 rr                        lda (tmp1),y
001A99r 3  85 rr                        sta cp+1
001A9Br 3               
001A9Br 3                               ; Next was DP
001A9Br 3  C8                           iny
001A9Cr 3  B1 rr                        lda (tmp1),y
001A9Er 3  85 rr                        sta dp
001AA0r 3  C8                           iny
001AA1r 3  B1 rr                        lda (tmp1),y
001AA3r 3  85 rr                        sta dp+1
001AA5r 3               
001AA5r 3                               ; Conveniently, the offset into both tmp1 and UP is 4
001AA5r 3                               ; to start restoring the wordlists and search order.
001AA5r 3  A0 04                        ldy #4
001AA7r 3               
001AA7r 3               @marker_restore_loop:
001AA7r 3                               ; Copy from the dictionary back on top of the wordlists
001AA7r 3                               ; and search order.
001AA7r 3  B1 rr                        lda (tmp1), y
001AA9r 3  91 rr                        sta (up), y
001AABr 3  C8                           iny
001AACr 3  98                           tya
001AADr 3  C9 28                        cmp #40                 ; One past the end of the search order.
001AAFr 3  D0 F6                        bne @marker_restore_loop
001AB1r 3               
001AB1r 3  20 rr rr                     jsr dp_to_current       ; Move the CURRENT DP back.
001AB4r 3               
001AB4r 3                               ; The return instruction takes us back to the original caller
001AB4r 3  60                           rts
001AB5r 3               
001AB5r 3               
001AB5r 3               
001AB5r 3               ; ## MAX ( n n -- n ) "Keep larger of two numbers"
001AB5r 3               ; ## "max"  auto  ANS core
001AB5r 3                       ; """https://forth-standard.org/standard/core/MAX
001AB5r 3                       ; Compare TOS and NOS and keep which one is larger. Adapted from
001AB5r 3                       ; Lance A. Leventhal "6502 Assembly Language Subroutines". Negative
001AB5r 3                       ; Flag indicates which number is larger. See also
001AB5r 3                       ; http://6502.org/tutorials/compare_instructions.html and
001AB5r 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001AB5r 3                       ; """
001AB5r 3               
001AB5r 3               xt_max:
001AB5r 3  20 rr rr                     jsr underflow_2
001AB8r 3               
001AB8r 3                               ; Compare LSB. We do this first to set the carry flag
001AB8r 3  B5 00                        lda 0,x         ; LSB of TOS
001ABAr 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets the carry
001ABCr 3               
001ABCr 3  B5 01                        lda 1,x         ; MSB of TOS
001ABEr 3  F5 03                        sbc 3,x         ; MSB of NOS
001AC0r 3  50 02                        bvc @no_overflow
001AC2r 3               
001AC2r 3                               ; handle overflow, because we use signed numbers
001AC2r 3  49 80                        eor #$80        ; complement negative flag
001AC4r 3               
001AC4r 3               @no_overflow:
001AC4r 3                               ; if negative, NOS is larger and needs to be kept
001AC4r 3  30 08                        bmi @keep_nos
001AC6r 3               
001AC6r 3                               ; move TOS to NOS
001AC6r 3  B5 00                        lda 0,x
001AC8r 3  95 02                        sta 2,x
001ACAr 3  B5 01                        lda 1,x
001ACCr 3  95 03                        sta 3,x
001ACEr 3               
001ACEr 3               @keep_nos:
001ACEr 3  E8                           inx
001ACFr 3  E8                           inx
001AD0r 3               
001AD0r 3  60           z_max:          rts
001AD1r 3               
001AD1r 3               
001AD1r 3               
001AD1r 3               ; ## MIN ( n n -- n ) "Keep smaller of two numbers"
001AD1r 3               ; ## "min"  auto  ANS core
001AD1r 3                       ; """https://forth-standard.org/standard/core/MIN
001AD1r 3                       ; Adapted from Lance A. Leventhal "6502 Assembly Language
001AD1r 3                       ; Subroutines." Negative Flag indicateds which number is larger. See
001AD1r 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001AD1r 3                       ; """
001AD1r 3               
001AD1r 3               xt_min:
001AD1r 3  20 rr rr                     jsr underflow_2
001AD4r 3               
001AD4r 3                               ; compare LSB. We do this first to set the carry flag
001AD4r 3  B5 00                        lda 0,x         ; LSB of TOS
001AD6r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets carry
001AD8r 3               
001AD8r 3  B5 01                        lda 1,x         ; MSB of TOS
001ADAr 3  F5 03                        sbc 3,x         ; MSB of NOS
001ADCr 3  50 02                        bvc @no_overflow
001ADEr 3               
001ADEr 3                               ; handle overflow because we use signed numbers
001ADEr 3  49 80                        eor #$80
001AE0r 3               
001AE0r 3               @no_overflow:
001AE0r 3                               ; if negative, NOS is larger and needs to be dumped
001AE0r 3  10 08                        bpl @keep_nos
001AE2r 3               
001AE2r 3                               ; move TOS to NOS
001AE2r 3  B5 00                        lda 0,x
001AE4r 3  95 02                        sta 2,x
001AE6r 3  B5 01                        lda 1,x
001AE8r 3  95 03                        sta 3,x
001AEAr 3               
001AEAr 3               @keep_nos:
001AEAr 3  E8                           inx
001AEBr 3  E8                           inx
001AECr 3               
001AECr 3  60           z_min:          rts
001AEDr 3               
001AEDr 3               
001AEDr 3               
001AEDr 3               ; ## MINUS ( n n -- n ) "Subtract TOS from NOS"
001AEDr 3               ; ## "-"  auto  ANS core
001AEDr 3                       ; """https://forth-standard.org/standard/core/Minus"""
001AEDr 3               xt_minus:
001AEDr 3  20 rr rr                     jsr underflow_2
001AF0r 3               
001AF0r 3  38                           sec
001AF1r 3  B5 02                        lda 2,x         ; LSB
001AF3r 3  F5 00                        sbc 0,x
001AF5r 3  95 02                        sta 2,x
001AF7r 3               
001AF7r 3  B5 03                        lda 3,x         ; MSB
001AF9r 3  F5 01                        sbc 1,x
001AFBr 3  95 03                        sta 3,x
001AFDr 3               
001AFDr 3  E8                           inx
001AFEr 3  E8                           inx
001AFFr 3               
001AFFr 3  60           z_minus:        rts
001B00r 3               
001B00r 3               
001B00r 3               ; ## MINUS_LEADING ( addr1 u1 -- addr2 u2 ) "Remove leading spaces"
001B00r 3               ; ## "-leading"  auto  Tali String
001B00r 3                       ; """Remove leading whitespace. This is the reverse of -TRAILING
001B00r 3                       ; """
001B00r 3               
001B00r 3               xt_minus_leading:
001B00r 3  20 rr rr                     jsr underflow_2
001B03r 3               
001B03r 3               @loop:
001B03r 3                               ; Quit if we were given an empty string. This also terminates
001B03r 3                               ; the main loop
001B03r 3  B5 00                        lda 0,x
001B05r 3  15 01                        ora 1,x
001B07r 3  F0 0F                        beq @done
001B09r 3               
001B09r 3  A1 02                        lda (2,x)               ; get first character
001B0Br 3  20 rr rr                     jsr is_whitespace
001B0Er 3  90 08                        bcc @done
001B10r 3               
001B10r 3                               ; It's whitespace, move one down
001B10r 3  20 rr rr                     jsr xt_one              ; ( addr u 1 )
001B13r 3  20 rr rr                     jsr xt_slash_string     ; ( addr+ u-1 )
001B16r 3               
001B16r 3  80 EB                        bra @loop
001B18r 3               @done:
001B18r 3               z_minus_leading:
001B18r 3  60                           rts
001B19r 3               
001B19r 3               
001B19r 3               
001B19r 3               ; ## MINUS_TRAILING ( addr u1 -- addr u2 ) "Remove trailing spaces"
001B19r 3               ; ## "-trailing"  auto  ANS string
001B19r 3                       ; """https://forth-standard.org/standard/string/MinusTRAILING
001B19r 3                       ; Remove trailing spaces
001B19r 3                       ; """
001B19r 3               
001B19r 3               xt_minus_trailing:
001B19r 3  20 rr rr                     jsr underflow_2
001B1Cr 3               
001B1Cr 3                               ; if length entry is zero, return a zero and leave the
001B1Cr 3                               ; address part untouched
001B1Cr 3  B5 00                        lda 0,x         ; LSB of n
001B1Er 3  15 01                        ora 1,x         ; MSB of n
001B20r 3  F0 33                        beq @done
001B22r 3               
001B22r 3                               ; Compute address of last char in tmp1 as
001B22r 3                               ; addr + u1 - 1
001B22r 3               
001B22r 3                               ; addr + u1
001B22r 3  18                           clc
001B23r 3  B5 02                        lda 2,x         ; LSB of addr
001B25r 3  75 00                        adc 0,x
001B27r 3  85 rr                        sta tmp1
001B29r 3  B5 03                        lda 3,x         ; MSB of addr
001B2Br 3  75 01                        adc 1,x
001B2Dr 3  85 rr                        sta tmp1+1
001B2Fr 3               
001B2Fr 3                               ; - 1
001B2Fr 3  A5 rr                        lda tmp1
001B31r 3  D0 02                        bne @1
001B33r 3  C6 rr                        dec tmp1+1
001B35r 3               @1:
001B35r 3  C6 rr                        dec tmp1
001B37r 3               
001B37r 3               @loop:
001B37r 3                               ; While spaces are found, move tmp1 backwards and
001B37r 3                               ; decrease the count on the data stack.
001B37r 3  B2 rr                        lda (tmp1)
001B39r 3  C9 20                        cmp #AscSP
001B3Br 3  D0 18                        bne @done
001B3Dr 3               
001B3Dr 3                               ; Move back one address.
001B3Dr 3  A5 rr                        lda tmp1
001B3Fr 3  D0 02                        bne @2
001B41r 3  C6 rr                        dec tmp1+1
001B43r 3               @2:
001B43r 3  C6 rr                        dec tmp1
001B45r 3               
001B45r 3                               ; Decrement count by one.
001B45r 3  B5 00                        lda 0,x
001B47r 3  D0 02                        bne @3
001B49r 3  D6 01                        dec 1,x
001B4Br 3               @3:
001B4Br 3  D6 00                        dec 0,x
001B4Dr 3               
001B4Dr 3                               ; Check if there are any characters left.
001B4Dr 3  B5 00                        lda 0,x
001B4Fr 3  15 01                        ora 1,x
001B51r 3  F0 02                        beq @done       ; Count has reached zero - we're done!
001B53r 3               
001B53r 3  80 E2                        bra @loop
001B55r 3               
001B55r 3               @done:
001B55r 3               z_minus_trailing:
001B55r 3  60                           rts
001B56r 3               
001B56r 3               
001B56r 3               
001B56r 3               ; ## MOD ( n1 n2 -- n ) "Divide NOS by TOS and return the remainder"
001B56r 3               ; ## "mod"  auto  ANS core
001B56r 3                       ; """https://forth-standard.org/standard/core/MOD
001B56r 3                       ;
001B56r 3                       ; The Forth definition of this word is  : MOD /MOD DROP ;
001B56r 3                       ; so we just jump to xt_slash_mod and dump the actual result.
001B56r 3                       ; """
001B56r 3               xt_mod:
001B56r 3  20 rr rr                     jsr underflow_2
001B59r 3               
001B59r 3  20 rr rr                     jsr xt_slash_mod
001B5Cr 3               
001B5Cr 3  E8                           inx             ; DROP
001B5Dr 3  E8                           inx
001B5Er 3               z_mod:
001B5Er 3  60                           rts
001B5Fr 3               
001B5Fr 3               
001B5Fr 3               ; ## MOVE ( addr1 addr2 u -- ) "Copy bytes"
001B5Fr 3               ; ## "move"  auto  ANS core
001B5Fr 3                       ; """https://forth-standard.org/standard/core/MOVE
001B5Fr 3                       ; Copy u "address units" from addr1 to addr2. Since our address
001B5Fr 3                       ; units are bytes, this is just a front-end for CMOVE and CMOVE>. This
001B5Fr 3                       ; is actually the only one of these three words that is in the CORE
001B5Fr 3                       ; set.
001B5Fr 3                       ;
001B5Fr 3                       ; This word must not be natively compiled.
001B5Fr 3                       ; """
001B5Fr 3               
001B5Fr 3               xt_move:
001B5Fr 3                               ; We let CMOVE and CMOVE> check if there is underflow or
001B5Fr 3                               ; we've been told to copy zero bytes
001B5Fr 3               
001B5Fr 3                               ; compare MSB first
001B5Fr 3  B5 03                        lda 3,x                 ; MSB of addr2
001B61r 3  D5 05                        cmp 5,x                 ; MSB of addr1
001B63r 3  F0 05                        beq @lsb                ; wasn't helpful, move to LSB
001B65r 3  B0 0E                        bcs @to_move_up         ; we want CMOVE>
001B67r 3               
001B67r 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001B6Ar 3               
001B6Ar 3               @lsb:
001B6Ar 3                               ; MSB were equal, so do the whole thing over with LSB
001B6Ar 3  B5 02                        lda 2,x                 ; LSB of addr2
001B6Cr 3  D5 04                        cmp 4,x                 ; LSB of addr1
001B6Er 3  F0 08                        beq @equal              ; LSB is equal as well
001B70r 3  B0 03                        bcs @to_move_up         ; we want CMOVE>
001B72r 3               
001B72r 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001B75r 3               
001B75r 3               @to_move_up:
001B75r 3  4C rr rr                     jmp xt_cmove_up         ; JSR/RTS
001B78r 3               @equal:
001B78r 3                               ; drop three entries from Data Stack
001B78r 3  8A                           txa
001B79r 3  18                           clc
001B7Ar 3  69 06                        adc #6
001B7Cr 3  AA                           tax
001B7Dr 3               
001B7Dr 3  60           z_move:         rts
001B7Er 3               
001B7Er 3               
001B7Er 3               
001B7Er 3               ; ## NAME_TO_INT ( nt -- xt ) "Convert Name Token to Execute Token"
001B7Er 3               ; ## "name>int"  tested  Gforth
001B7Er 3                       ; """See
001B7Er 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001B7Er 3                       ; """
001B7Er 3               
001B7Er 3               xt_name_to_int:
001B7Er 3  20 rr rr                     jsr underflow_1
001B81r 3               
001B81r 3                               ; The xt starts four bytes down from the nt
001B81r 3  B5 00                        lda 0,x
001B83r 3  18                           clc
001B84r 3  69 04                        adc #4
001B86r 3  85 rr                        sta tmp3
001B88r 3               
001B88r 3  B5 01                        lda 1,x
001B8Ar 3  90 01                        bcc @done
001B8Cr 3  1A                           inc
001B8Dr 3               @done:
001B8Dr 3  85 rr                        sta tmp3+1
001B8Fr 3               
001B8Fr 3  A0 00                        ldy #0
001B91r 3  B1 rr                        lda (tmp3),y
001B93r 3  95 00                        sta 0,x
001B95r 3  C8                           iny
001B96r 3  B1 rr                        lda (tmp3),y
001B98r 3  95 01                        sta 1,x
001B9Ar 3               
001B9Ar 3  60           z_name_to_int:  rts
001B9Br 3               
001B9Br 3               
001B9Br 3               
001B9Br 3               ; ## NAME_TO_STRING ( nt -- addr u ) "Given a name token, return string of word"
001B9Br 3               ; ## "name>string"  tested  Gforth
001B9Br 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html"""
001B9Br 3               
001B9Br 3               xt_name_to_string:
001B9Br 3  20 rr rr                     jsr underflow_1
001B9Er 3               
001B9Er 3  CA                           dex
001B9Fr 3  CA                           dex
001BA0r 3               
001BA0r 3                               ; the length of the string is the first byte of the
001BA0r 3                               ; header pointed to by nt
001BA0r 3  A1 02                        lda (2,x)
001BA2r 3  95 00                        sta 0,x
001BA4r 3  74 01                        stz 1,x
001BA6r 3               
001BA6r 3                               ; the string itself always starts eight bytes down
001BA6r 3  B5 02                        lda 2,x         ; LSB
001BA8r 3  18                           clc
001BA9r 3  69 08                        adc #8
001BABr 3  A8                           tay
001BACr 3  B5 03                        lda 3,x         ; MSB
001BAEr 3  69 00                        adc #0          ; just need carry
001BB0r 3  95 03                        sta 3,x
001BB2r 3  94 02                        sty 2,x
001BB4r 3               
001BB4r 3               z_name_to_string:
001BB4r 3  60                           rts
001BB5r 3               
001BB5r 3               
001BB5r 3               ; ## NC_LIMIT ( -- addr ) "Return address where NC-LIMIT value is kept"
001BB5r 3               ; ## "nc-limit"  tested  Tali Forth
001BB5r 3               
001BB5r 3               xt_nc_limit:
001BB5r 3  CA                           dex
001BB6r 3  CA                           dex
001BB7r 3  A9 rr                        lda #<nc_limit
001BB9r 3  95 00                        sta 0,x
001BBBr 3  A9 rr                        lda #>nc_limit
001BBDr 3  95 01                        sta 1,x
001BBFr 3               
001BBFr 3  60           z_nc_limit:     rts
001BC0r 3               
001BC0r 3               
001BC0r 3               
001BC0r 3               ; ## NEGATE ( n -- n ) "Two's complement"
001BC0r 3               ; ## "negate"  auto  ANS core
001BC0r 3                       ; """https://forth-standard.org/standard/core/NEGATE"""
001BC0r 3               xt_negate:
001BC0r 3  20 rr rr                     jsr underflow_1
001BC3r 3               
001BC3r 3  A9 00                	lda #0
001BC5r 3  38                           sec
001BC6r 3  F5 00                        sbc 0,x         ; LSB
001BC8r 3  95 00                        sta 0,x
001BCAr 3               
001BCAr 3  A9 00                        lda #0
001BCCr 3  F5 01                        sbc 1,x         ; MSB
001BCEr 3  95 01                        sta 1,x
001BD0r 3               
001BD0r 3  60           z_negate:       rts
001BD1r 3               
001BD1r 3               
001BD1r 3               ; ## NEVER_NATIVE ( -- ) "Flag last word as never natively compiled"
001BD1r 3               ; ## "never-native"  auto  Tali Forth
001BD1r 3               xt_never_native:
001BD1r 3  20 rr rr                     jsr current_to_dp
001BD4r 3  A0 01                        ldy #1          ; offset for status byte
001BD6r 3  B1 rr                        lda (dp),y
001BD8r 3  09 08                        ora #NN         ; Make sure NN flag is set
001BDAr 3  29 FD                        and #$ff-AN     ; and AN flag is clear.
001BDCr 3  91 rr                        sta (dp),y
001BDEr 3               z_never_native:
001BDEr 3  60                           rts
001BDFr 3               
001BDFr 3               
001BDFr 3               ; ## NIP ( b a -- a ) "Delete NOS"
001BDFr 3               ; ## "nip"  auto  ANS core ext
001BDFr 3                       ; """https://forth-standard.org/standard/core/NIP"""
001BDFr 3               xt_nip:
001BDFr 3  20 rr rr                     jsr underflow_2
001BE2r 3               
001BE2r 3  B5 00                        lda 0,x         ; LSB
001BE4r 3  95 02                        sta 2,x
001BE6r 3  B5 01                        lda 1,x         ; MSB
001BE8r 3  95 03                        sta 3,x
001BEAr 3               
001BEAr 3  E8                           inx
001BEBr 3  E8                           inx
001BECr 3               
001BECr 3  60           z_nip:          rts
001BEDr 3               
001BEDr 3               
001BEDr 3               ; ## NOT_EQUALS ( n m -- f ) "Return a true flag if TOS != NOS"
001BEDr 3               ; ## "<>"  auto  ANS core ext
001BEDr 3                       ; """https://forth-standard.org/standard/core/ne
001BEDr 3                       ;
001BEDr 3                       ; This is just a variant of EQUAL, we code it separately
001BEDr 3                       ; for speed.
001BEDr 3                       ; """
001BEDr 3               
001BEDr 3               xt_not_equals:
001BEDr 3  20 rr rr                     jsr underflow_2
001BF0r 3               
001BF0r 3  A0 00                        ldy #0                  ; default is true
001BF2r 3               
001BF2r 3  B5 00                        lda 0,x                 ; LSB
001BF4r 3  D5 02                        cmp 2,x
001BF6r 3  D0 0A                        bne @not_equal
001BF8r 3               
001BF8r 3                               ; LSB is equal
001BF8r 3  B5 01                        lda 1,x                 ; MSB
001BFAr 3  D5 03                        cmp 3,x
001BFCr 3  D0 04                        bne @not_equal
001BFEr 3               
001BFEr 3  A9 FF                        lda #$FF
001C00r 3  80 01                        bra @done
001C02r 3               
001C02r 3               @not_equal:
001C02r 3  88                           dey                     ; drop thru to done
001C03r 3               
001C03r 3               @done:
001C03r 3  98                           tya
001C04r 3  E8                           inx
001C05r 3  E8                           inx
001C06r 3  95 00                        sta 0,x
001C08r 3  95 01                        sta 1,x
001C0Ar 3               
001C0Ar 3  60           z_not_equals:   rts
001C0Br 3               
001C0Br 3               
001C0Br 3               
001C0Br 3               ; ## NOT_ROTE ( a b c -- c a b ) "Rotate upwards"
001C0Br 3               ; ## "-rot"  auto  Gforth
001C0Br 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Data-stack.html"""
001C0Br 3               
001C0Br 3               xt_not_rote:
001C0Br 3  20 rr rr                     jsr underflow_3
001C0Er 3               
001C0Er 3  B4 01                        ldy 1,x         ; MSB first
001C10r 3  B5 03                        lda 3,x
001C12r 3  95 01                        sta 1,x
001C14r 3               
001C14r 3  B5 05                        lda 5,x
001C16r 3  95 03                        sta 3,x
001C18r 3  94 05                        sty 5,x
001C1Ar 3               
001C1Ar 3  B4 00                        ldy 0,x         ; LSB second
001C1Cr 3  B5 02                        lda 2,x
001C1Er 3  95 00                        sta 0,x
001C20r 3               
001C20r 3  B5 04                        lda 4,x
001C22r 3  95 02                        sta 2,x
001C24r 3  94 04                        sty 4,x
001C26r 3               
001C26r 3  60           z_not_rote:     rts
001C27r 3               
001C27r 3               
001C27r 3               
001C27r 3               ; ## NUMBER ( addr u -- u | d ) "Convert a number string"
001C27r 3               ; ## "number"  auto  Tali Forth
001C27r 3                       ; """Convert a number string to a double or single cell number. This
001C27r 3                       ; is a wrapper for >NUMBER and follows the convention set out in the
001C27r 3                       ; "Forth Programmer's Handbook" (Conklin & Rather) 3rd edition p. 87.
001C27r 3                       ; Based in part on the "Starting Forth" code
001C27r 3                       ; https://www.forth.com/starting-forth/10-input-output-operators/
001C27r 3                       ; Gforth uses S>NUMBER? and S>UNUMBER? which return numbers and a flag
001C27r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
001C27r 3                       ; Another difference to Gforth is that we follow ANS Forth that the
001C27r 3                       ; dot to signal a double cell number is required to be the last
001C27r 3                       ; character of the string.
001C27r 3                       ;
001C27r 3                       ; Number calls >NUMBER which in turn calls UM*,
001C27r 3                       ; which uses tmp1, tmp2, and tmp3, so we can't use them here, which is
001C27r 3                       ; a pain.
001C27r 3                       ;"""
001C27r 3               
001C27r 3               xt_number:
001C27r 3  20 rr rr                     jsr underflow_2
001C2Ar 3               
001C2Ar 3                               ; we keep the flags for sign and double in tmpdsp because
001C2Ar 3                               ; we've run out of temporary variables
001C2Ar 3  64 rr                        stz tmpdsp      ; flag for double
001C2Cr 3  64 rr                        stz tmpdsp+1    ; flag for minus
001C2Er 3               
001C2Er 3                               ; If the first character is a minus, strip it off and set
001C2Er 3                               ; the flag
001C2Er 3  A1 02                        lda (2,x)
001C30r 3  C9 2D                        cmp #$2D        ; ASCII for "-"
001C32r 3  D0 0A                        bne @check_dot
001C34r 3               
001C34r 3                               ; It's a minus
001C34r 3  C6 rr                        dec tmpdsp+1
001C36r 3  F6 02                        inc 2,x         ; start one character later
001C38r 3  D0 02                        bne @1
001C3Ar 3  F6 03                        inc 3,x
001C3Cr 3               @1:
001C3Cr 3  D6 00                        dec 0,x         ; decrease string length by one
001C3Er 3               
001C3Er 3               @check_dot:
001C3Er 3                               ; If the last character is a dot, strip it off and set a
001C3Er 3                               ; flag. We can use tmptos as a temporary variable
001C3Er 3  B5 02                        lda 2,x         ; LSB of address
001C40r 3  18                           clc
001C41r 3  75 00                        adc 0,x         ; length of string
001C43r 3  85 rr                        sta tmptos
001C45r 3  B5 03                        lda 3,x
001C47r 3  69 00                        adc #0          ; only need carry
001C49r 3  85 rr                        sta tmptos+1
001C4Br 3               
001C4Br 3                               ; tmptos now points to the first character after the string,
001C4Br 3                               ; but we need the last character
001C4Br 3  A5 rr                        lda tmptos
001C4Dr 3  D0 02                        bne @2
001C4Fr 3  C6 rr                        dec tmptos+1
001C51r 3               @2:
001C51r 3  C6 rr                        dec tmptos
001C53r 3               
001C53r 3  B2 rr                        lda (tmptos)
001C55r 3  C9 2E                        cmp #'.'
001C57r 3  D0 04                        bne @main
001C59r 3               
001C59r 3                               ; We have a dot, which means this is a double number. Flag
001C59r 3                               ; the fact and reduce string length by one
001C59r 3  C6 rr                        dec tmpdsp
001C5Br 3  D6 00                        dec 0,x
001C5Dr 3               
001C5Dr 3               @main:
001C5Dr 3                               ; Set up stack for subroutine jump to >NUMBER, which means
001C5Dr 3                               ; we have to go ( addr u --> ud addr u )
001C5Dr 3  CA                           dex
001C5Er 3  CA                           dex
001C5Fr 3  CA                           dex
001C60r 3  CA                           dex
001C61r 3               
001C61r 3  B5 04                        lda 4,x         ; LSB of length
001C63r 3  95 00                        sta 0,x
001C65r 3  74 01                        stz 1,x         ; MSB, max length 255 chars
001C67r 3               
001C67r 3  B5 06                        lda 6,x         ; LSB of address
001C69r 3  95 02                        sta 2,x
001C6Br 3  B5 07                        lda 7,x         ; MSB of address
001C6Dr 3  95 03                        sta 3,x
001C6Fr 3               
001C6Fr 3  74 04                        stz 4,x         ; clear space for ud
001C71r 3  74 05                        stz 5,x
001C73r 3  74 06                        stz 6,x
001C75r 3  74 07                        stz 7,x
001C77r 3               
001C77r 3  20 rr rr                     jsr xt_to_number        ; (ud addr u -- ud addr u )
001C7Ar 3               
001C7Ar 3                               ; test length of returned string, which should be zero
001C7Ar 3  B5 00                        lda 0,x
001C7Cr 3  F0 15                        beq @all_converted
001C7Er 3               
001C7Er 3                               ; Something went wrong, we still have characters left over,
001C7Er 3                               ; so we print an error and abort. If the NUMBER was called
001C7Er 3                               ; by INTERPRET, we've already checked for Forth words, so
001C7Er 3                               ; we're in deep trouble one way or another
001C7Er 3  A9 3E                        lda #$3E        ; ASCII for ">"
001C80r 3  20 rr rr                     jsr emit_a
001C83r 3  20 rr rr                     jsr xt_type
001C86r 3  A9 3C                        lda #$3C        ; ASCII for "<"
001C88r 3  20 rr rr                     jsr emit_a
001C8Br 3  20 rr rr                     jsr xt_space
001C8Er 3               
001C8Er 3  A9 08                        lda #err_syntax
001C90r 3  4C rr rr                     jmp error
001C93r 3               
001C93r 3               @all_converted:
001C93r 3                               ; We can drop the string info
001C93r 3  E8                           inx
001C94r 3  E8                           inx
001C95r 3  E8                           inx
001C96r 3  E8                           inx
001C97r 3               
001C97r 3                               ; We have a double-cell number on the Data Stack that might
001C97r 3                               ; actually have a minus and might actually be single-cell
001C97r 3  A5 rr                        lda tmpdsp      ; flag for double
001C99r 3  F0 0D                        beq @single
001C9Br 3               
001C9Br 3                               ; Set status bit 5 to indicate this is a double number
001C9Br 3  A9 20                        lda #%00100000
001C9Dr 3  04 rr                        tsb status
001C9Fr 3               
001C9Fr 3                               ; This is a double cell number. If it had a minus, we'll have
001C9Fr 3                               ; to negate it
001C9Fr 3  A5 rr                        lda tmpdsp+1
001CA1r 3  F0 12                        beq @done       ; no minus, all done
001CA3r 3               
001CA3r 3  20 rr rr                     jsr xt_dnegate
001CA6r 3               
001CA6r 3  80 0D                        bra @done
001CA8r 3               
001CA8r 3               @single:
001CA8r 3                               ; This is a single number, so we just drop the top cell
001CA8r 3  E8                           inx
001CA9r 3  E8                           inx
001CAAr 3               
001CAAr 3                               ; Clear status bit 5 to indicate this is a single number
001CAAr 3  A9 20                        lda #%00100000
001CACr 3  14 rr                        trb status
001CAEr 3               
001CAEr 3                               ; If we had a minus, we'll have to negate it
001CAEr 3  A5 rr                        lda tmpdsp+1
001CB0r 3  F0 03                        beq @done       ; no minus, all done
001CB2r 3               
001CB2r 3  20 rr rr                     jsr xt_negate
001CB5r 3               @done:
001CB5r 3  60           z_number:       rts
001CB6r 3               
001CB6r 3               
001CB6r 3               
001CB6r 3               ; ## NUMBER_SIGN ( ud -- ud ) "Add character to pictured output string"
001CB6r 3               ; ## "#"  auto  ANS core
001CB6r 3                       ; """https://forth-standard.org/standard/core/num
001CB6r 3                       ; Add one char to the beginning of the pictured output string.
001CB6r 3                       ;
001CB6r 3                       ; Based on
001CB6r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001CB6r 3                       ; Forth code  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
001CB6r 3                       ; """
001CB6r 3               xt_number_sign:
001CB6r 3  20 rr rr                     jsr underflow_2         ; double number
001CB9r 3               
001CB9r 3  20 rr rr                     jsr xt_base
001CBCr 3  20 rr rr                     jsr xt_fetch            ; ( ud1 base )
001CBFr 3               
001CBFr 3                               ; The following code is the ancient Forth word UD/MOD, which in
001CBFr 3                               ; various Forths (including Gforth) lives on under the hood,
001CBFr 3                               ; even though it's not an ANS standard word, it doesn't appear
001CBFr 3                               ; in the docs, it's only used here, and there are no tests for
001CBFr 3                               ; it. This is why we got rid of it. We'll be converting this
001CBFr 3                               ; mess to something more sane in the long run.
001CBFr 3  20 rr rr                     jsr xt_to_r             ; >r
001CC2r 3  20 rr rr                     jsr xt_zero             ; 0
001CC5r 3  20 rr rr                     jsr xt_r_fetch          ; r@
001CC8r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001CCBr 3  20 rr rr                     jsr xt_rot              ; rot
001CCEr 3  20 rr rr                     jsr xt_rot              ; rot
001CD1r 3  20 rr rr                     jsr xt_r_from           ; r>
001CD4r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001CD7r 3  20 rr rr                     jsr xt_rot              ; rot
001CDAr 3                               ; end of UD/MOD ( rem ud )
001CDAr 3               
001CDAr 3  20 rr rr                     jsr xt_rot              ; ( ud rem )
001CDDr 3               
001CDDr 3                               ; Convert the number that is left over to an ASCII character. We
001CDDr 3                               ; use a string lookup for speed. Use either abc_str_lower for
001CDDr 3                               ; lower case or abc_str_upper for upper case (prefered)
001CDDr 3  B5 00                        lda 0,x
001CDFr 3  A8                           tay
001CE0r 3  B9 rr rr                     lda s_abc_upper,y
001CE3r 3  95 00                        sta 0,x
001CE5r 3  74 01                        stz 1,x                 ; paranoid; now ( ud char )
001CE7r 3               
001CE7r 3  20 rr rr                     jsr xt_hold
001CEAr 3               
001CEAr 3               z_number_sign:
001CEAr 3  60                           rts
001CEBr 3               
001CEBr 3               
001CEBr 3               ; ## NUMBER_SIGN_GREATER ( d -- addr u ) "Finish pictured number conversion"
001CEBr 3               ; ## "#>"  auto  ANS core
001CEBr 3                       ; """https://forth-standard.org/standard/core/num-end
001CEBr 3                       ; Finish conversion of pictured number string, putting address and
001CEBr 3                       ; length on the Data Stack.
001CEBr 3                       ;
001CEBr 3                       ; Original Fort is  2DROP HLD @ PAD OVER -
001CEBr 3                       ; Based on
001CEBr 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001CEBr 3                       ; """
001CEBr 3               xt_number_sign_greater:
001CEBr 3               
001CEBr 3  20 rr rr                     jsr underflow_2         ; double number
001CEEr 3               
001CEEr 3                               ; The start address lives in tohold
001CEEr 3  A5 rr                        lda tohold
001CF0r 3  95 00                        sta 0,x         ; LSB of tohold
001CF2r 3  95 02                        sta 2,x
001CF4r 3  A5 rr                        lda tohold+1
001CF6r 3  95 01                        sta 1,x         ; MSB of addr
001CF8r 3  95 03                        sta 3,x         ; ( addr addr )
001CFAr 3               
001CFAr 3                               ; The length of the string is pad - addr
001CFAr 3  20 rr rr                     jsr xt_pad      ; ( addr addr pad )
001CFDr 3               
001CFDr 3  38                           sec
001CFEr 3  B5 00                        lda 0,x         ; LSB of pad address
001D00r 3  F5 02                        sbc 2,x
001D02r 3  95 02                        sta 2,x
001D04r 3               
001D04r 3  B5 01                        lda 1,x         ; MSB, which should always be zero
001D06r 3  F5 03                        sbc 3,x
001D08r 3  95 03                        sta 3,x         ; ( addr u pad )
001D0Ar 3               
001D0Ar 3  E8                           inx
001D0Br 3  E8                           inx
001D0Cr 3               
001D0Cr 3               z_number_sign_greater:
001D0Cr 3  60                           rts
001D0Dr 3               
001D0Dr 3               
001D0Dr 3               ; ## NUMBER_SIGN_S ( d -- addr u ) "Completely convert pictured output"
001D0Dr 3               ; ## "#s"  auto  ANS core
001D0Dr 3                       ; """https://forth-standard.org/standard/core/numS
001D0Dr 3                       ; Completely convert number for pictured numerical output.
001D0Dr 3                       ;
001D0Dr 3                       ; Based on
001D0Dr 3                       ; https://github.com/philburk/pforth/blob/master/fth/system.fth
001D0Dr 3                       ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
001D0Dr 3                       ; """
001D0Dr 3               
001D0Dr 3               xt_number_sign_s:
001D0Dr 3  20 rr rr                     jsr underflow_2
001D10r 3               @loop:
001D10r 3                               ; convert a single number ("#")
001D10r 3  20 rr rr                     jsr xt_number_sign
001D13r 3               
001D13r 3                               ; stop when double-celled number in TOS is zero:
001D13r 3  B5 00                        lda 0,x
001D15r 3  15 01                        ora 1,x
001D17r 3  15 02                        ora 2,x
001D19r 3  15 03                        ora 3,x
001D1Br 3  D0 F3                        bne @loop
001D1Dr 3               
001D1Dr 3               z_number_sign_s:
001D1Dr 3  60                           rts
001D1Er 3               
001D1Er 3               
001D1Er 3               
001D1Er 3               ; ## OF (C: -- of-sys) (x1 x2 -- |x1) "Conditional flow control"
001D1Er 3               ; ## "of"  auto  ANS core ext
001D1Er 3                       ; """http://forth-standard.org/standard/core/OF"""
001D1Er 3               
001D1Er 3               xt_of:
001D1Er 3                               ; Check if value is equal to this case.
001D1Er 3                               ; Postpone over (eg. compile a jsr to it)
001D1Er 3  A0 rr                        ldy #>xt_over
001D20r 3  A9 rr                        lda #<xt_over
001D22r 3  20 rr rr                     jsr cmpl_subroutine
001D25r 3               
001D25r 3                               ; Postpone = (EQUAL), that is, compile a jsr to it
001D25r 3  A0 rr                        ldy #>xt_equal
001D27r 3  A9 rr                        lda #<xt_equal
001D29r 3  20 rr rr                     jsr cmpl_subroutine
001D2Cr 3               
001D2Cr 3  20 rr rr                     jsr xt_if
001D2Fr 3               
001D2Fr 3                               ; If it's true, consume the original value.
001D2Fr 3                               ; Postpone DROP (eg. compile a jsr to it)
001D2Fr 3  A0 rr                        ldy #>xt_drop
001D31r 3  A9 rr                        lda #<xt_drop
001D33r 3  20 rr rr                     jsr cmpl_subroutine
001D36r 3               
001D36r 3  60           z_of:           rts
001D37r 3               
001D37r 3               
001D37r 3               
001D37r 3               ; ## ONE ( -- n ) "Push the number 1 to the Data Stack"
001D37r 3               ; ## "1"  auto  Tali Forth
001D37r 3                       ; """This is also the code for EDITOR-WORDLIST"""
001D37r 3               xt_editor_wordlist:
001D37r 3               xt_one:
001D37r 3  CA                           dex
001D38r 3  CA                           dex
001D39r 3  A9 01                        lda #1
001D3Br 3  95 00                        sta 0,x
001D3Dr 3  74 01                        stz 1,x
001D3Fr 3               
001D3Fr 3               z_editor_wordlist:
001D3Fr 3               z_one:
001D3Fr 3  60                           rts
001D40r 3               
001D40r 3               
001D40r 3               ; ## ONE_MINUS ( u -- u-1 ) "Decrease TOS by one"
001D40r 3               ; ## "1-"  auto  ANS core
001D40r 3                       ; """https://forth-standard.org/standard/core/OneMinus"""
001D40r 3               
001D40r 3               xt_one_minus:
001D40r 3  20 rr rr                     jsr underflow_1
001D43r 3               
001D43r 3  B5 00                        lda 0,x
001D45r 3  D0 02                        bne @1
001D47r 3  D6 01                        dec 1,x
001D49r 3               @1:
001D49r 3  D6 00                        dec 0,x
001D4Br 3               
001D4Br 3  60           z_one_minus:    rts
001D4Cr 3               
001D4Cr 3               
001D4Cr 3               
001D4Cr 3               ; ## ONE_PLUS ( u -- u+1 ) "Increase TOS by one"
001D4Cr 3               ; ## "1+"  auto  ANS core
001D4Cr 3                       ; """https://forth-standard.org/standard/core/OnePlus
001D4Cr 3                       ;
001D4Cr 3                       ; Code is shared with CHAR-PLUS
001D4Cr 3                       ; """
001D4Cr 3               
001D4Cr 3               xt_char_plus:
001D4Cr 3               xt_one_plus:
001D4Cr 3  20 rr rr                     jsr underflow_1
001D4Fr 3               
001D4Fr 3  F6 00                        inc 0,x
001D51r 3  D0 02                        bne @done
001D53r 3  F6 01                        inc 1,x
001D55r 3               
001D55r 3               @done:
001D55r 3               z_char_plus:
001D55r 3  60           z_one_plus:     rts
001D56r 3               
001D56r 3               
001D56r 3               
001D56r 3               ; ## ONLY ( -- ) "Set earch order to minimum wordlist"
001D56r 3               ; ## "only"  auto  ANS search ext
001D56r 3                       ; """https://forth-standard.org/standard/search/ONLY"""
001D56r 3               
001D56r 3               xt_only:
001D56r 3                               ; Put -1 on data stack.
001D56r 3  CA                           dex
001D57r 3  CA                           dex
001D58r 3  A9 FF                        lda #$FF
001D5Ar 3  95 00                        sta 0,x
001D5Cr 3  95 01                        sta 1,x
001D5Er 3               
001D5Er 3                               ; Invoke set-order to set the minimum search order.
001D5Er 3  20 rr rr                     jsr xt_set_order
001D61r 3               
001D61r 3  60           z_only:         rts
001D62r 3               
001D62r 3               
001D62r 3               
001D62r 3               ; ## OR ( m n -- n ) "Logically OR TOS and NOS"
001D62r 3               ; ## "or"  auto  ANS core
001D62r 3                       ; """https://forth-standard.org/standard/core/OR"
001D62r 3               xt_or:
001D62r 3  20 rr rr                     jsr underflow_2
001D65r 3               
001D65r 3  B5 00                        lda 0,x
001D67r 3  15 02                        ora 2,x
001D69r 3  95 02                        sta 2,x
001D6Br 3               
001D6Br 3  B5 01                        lda 1,x
001D6Dr 3  15 03                        ora 3,x
001D6Fr 3  95 03                        sta 3,x
001D71r 3               
001D71r 3  E8                           inx
001D72r 3  E8                           inx
001D73r 3               
001D73r 3  60           z_or:           rts
001D74r 3               
001D74r 3               
001D74r 3               ; ## ORDER ( -- ) "Print current word order list and current WID"
001D74r 3               ; ## "order"  auto  ANS core
001D74r 3                       ; """https://forth-standard.org/standard/search/ORDER
001D74r 3                       ; Note the search order is displayed from first search to last
001D74r 3                       ; searched and is therefore exactly the reverse of the order in which
001D74r 3                       ; Forth stacks are displayed.
001D74r 3                       ;
001D74r 3                       ; A Forth implementation of this word is:
001D74r 3                       ;
001D74r 3                       ; 	: .wid ( wid -- )
001D74r 3                       ; 	dup 0=  if ." Forth "  drop    else
001D74r 3                       ; 	dup 1 = if ." Editor " drop    else
001D74r 3                       ; 	dup 2 = if ." Assembler " drop else
001D74r 3                       ; 	dup 3 = if ." Root " drop      else
001D74r 3                       ; 	           . ( just print the number )
001D74r 3                       ; 	then then then then ;
001D74r 3                       ;
001D74r 3                       ; : ORDER ( -- )
001D74r 3                       ; 	cr get-order 0 ?do .wid loop
001D74r 3                       ; 	space space get-current .wid ;
001D74r 3                       ;
001D74r 3                       ; This is an interactive program, so speed
001D74r 3                       ; is not as important as size. We assume we do not have more than 255
001D74r 3                       ; wordlists.
001D74r 3                       ; """
001D74r 3               
001D74r 3               xt_order:
001D74r 3  20 rr rr                     jsr xt_cr
001D77r 3  20 rr rr                     jsr xt_get_order        ; ( wid_n ... wid_1 n )
001D7Ar 3               
001D7Ar 3                               ; Paranoid: Check if there are no wordlists, a rather
001D7Ar 3                               ; pathological case. this would mean ( 0 ) on the stack. In
001D7Ar 3                               ; that case, we just drop n and run
001D7Ar 3  B5 00                        lda 0,x                 ; assumes no more than 255 wordlists
001D7Cr 3  F0 1E                        beq @drop_done
001D7Er 3               
001D7Er 3               @have_wordlists:
001D7Er 3                               ; We arrive here with the LSB of TOS in A, the number of WIDs
001D7Er 3                               ; on the stack
001D7Er 3  A8                           tay
001D7Fr 3               @loop:
001D7Fr 3  E8                           inx
001D80r 3  E8                           inx                     ; DROP, now ( wid_n ... wid_1 )
001D81r 3  B5 00                        lda 0,x
001D83r 3               
001D83r 3  5A                           phy
001D84r 3  20 rr rr                     jsr _print_wid_string   ; internal helper function
001D87r 3  7A                           ply
001D88r 3               
001D88r 3  88                           dey
001D89r 3  D0 F4                        bne @loop
001D8Br 3               
001D8Br 3                               ; We've printed the wordlists, now we add the current wordlist.
001D8Br 3                               ; This follows the convention of Gforth
001D8Br 3  20 rr rr                     jsr xt_space
001D8Er 3  20 rr rr                     jsr xt_space
001D91r 3  20 rr rr                     jsr xt_get_current      ; ( wid )
001D94r 3               
001D94r 3  B5 00                        lda 0,x
001D96r 3  20 rr rr                     jsr _print_wid_string
001D99r 3  20 rr rr                     jsr xt_cr
001D9Cr 3               
001D9Cr 3               @drop_done:
001D9Cr 3  E8                           inx
001D9Dr 3  E8                           inx
001D9Er 3               z_order:
001D9Er 3  60                           rts
001D9Fr 3               
001D9Fr 3               _print_wid_string:
001D9Fr 3                       ; """Helper function for ORDER: Given a WID in A, print the
001D9Fr 3                       ; corresponding string. If there is no such word list defined, just
001D9Fr 3                       ; print the number. Assumes we will not have more than 256 WIDs; also
001D9Fr 3                       ; assumes we have just loaded A so Z reflects status of byte.  In
001D9Fr 3                       ; theory, we could speed this up by having the WID be the same as the
001D9Fr 3                       ; number of the strings. However, ORDER is used rather infrequently and
001D9Fr 3                       ; this would make changes to the strings.asm file very dangerous, so we
001D9Fr 3                       ; follow the slightly more complicated route with a translation table.
001D9Fr 3                       ; """
001D9Fr 3                               ; If the WID is larger than 3, we have no string avaliable and
001D9Fr 3                               ; just print the number.
001D9Fr 3                               ; See http://6502.org/tutorials/compare_instructions.html
001D9Fr 3                               ; for details
001D9Fr 3  C9 04                        cmp #4
001DA1r 3  90 09                        bcc @output_string      ; less than 4, print a real string
001DA3r 3               
001DA3r 3                               ; Our WID is not less than 4, that is, 4 or larger. We just
001DA3r 3                               ; print the number
001DA3r 3  CA                           dex
001DA4r 3  CA                           dex
001DA5r 3  95 00                        sta 0,x
001DA7r 3  74 01                        stz 1,x
001DA9r 3  4C rr rr                     jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
001DACr 3               
001DACr 3               @output_string:
001DACr 3                               ; Get the string number based on WID 0 to 3
001DACr 3  A8                           tay
001DADr 3  B9 rr rr                     lda @wid_data,y
001DB0r 3               
001DB0r 3                               ; Print without a line feed
001DB0r 3  4C rr rr                     jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
001DB3r 3               
001DB3r 3               @wid_data:
001DB3r 3                       ; Table of string numbers (see strings.asm) indexed by the WID if
001DB3r 3                       ; less than 4.
001DB3r 3  03                   .byte str_wid_forth            ; WID 0: "Forth"
001DB4r 3  06                   .byte str_wid_editor           ; WID 1: "Editor"
001DB5r 3  07                   .byte str_wid_assembler        ; WID 2: "Assembler"
001DB6r 3  08                   .byte str_wid_root             ; WID 3: "Root"
001DB7r 3               
001DB7r 3               
001DB7r 3               
001DB7r 3               ; ## OUTPUT ( -- addr ) "Return the address of the EMIT vector address"
001DB7r 3               ; ## "output"  tested  Tali Forth
001DB7r 3               xt_output:
001DB7r 3                       ; """Return the address where the jump target for EMIT is stored (but
001DB7r 3                       ; not the vector itself). By default, this will hold the value of
001DB7r 3                       ; kernel_putc routine, but this can be changed by the user, hence this
001DB7r 3                       ; routine.
001DB7r 3                       ; """
001DB7r 3  CA                           dex
001DB8r 3  CA                           dex
001DB9r 3  A9 rr                        lda #<output
001DBBr 3  95 00                        sta 0,x
001DBDr 3  A9 rr                        lda #>output
001DBFr 3  95 01                        sta 1,x
001DC1r 3               
001DC1r 3  60           z_output:       rts
001DC2r 3               
001DC2r 3               
001DC2r 3               ; ## OVER ( b a -- b a b ) "Copy NOS to TOS"
001DC2r 3               ; ## "over"  auto  ANS core
001DC2r 3                       ; """https://forth-standard.org/standard/core/OVER"""
001DC2r 3               xt_over:
001DC2r 3  20 rr rr                     jsr underflow_2
001DC5r 3               
001DC5r 3  CA                           dex
001DC6r 3  CA                           dex
001DC7r 3               
001DC7r 3  B5 04                        lda 4,x         ; LSB
001DC9r 3  95 00                        sta 0,x
001DCBr 3  B5 05                        lda 5,x         ; MSB
001DCDr 3  95 01                        sta 1,x
001DCFr 3               
001DCFr 3  60           z_over:         rts
001DD0r 3               
001DD0r 3               
001DD0r 3               ; ## PAD ( -- addr ) "Return address of user scratchpad"
001DD0r 3               ; ## "pad"  auto  ANS core ext
001DD0r 3                       ; """https://forth-standard.org/standard/core/PAD
001DD0r 3                       ; Return address to a temporary area in free memory for user. Must
001DD0r 3                       ; be at least 84 bytes in size (says ANS). It is located relative to
001DD0r 3                       ; the compile area pointer (CP) and therefore varies in position.
001DD0r 3                       ; This area is reserved for the user and not used by the system
001DD0r 3                       ; """
001DD0r 3               xt_pad:
001DD0r 3  CA                           dex
001DD1r 3  CA                           dex
001DD2r 3               
001DD2r 3  A5 rr                        lda cp
001DD4r 3  18                           clc
001DD5r 3  69 FF                        adc #padoffset  ; assumes padoffset one byte in size
001DD7r 3  95 00                        sta 0,x
001DD9r 3               
001DD9r 3  A5 rr                        lda cp+1
001DDBr 3  69 00                        adc #0          ; only need carry
001DDDr 3  95 01                        sta 1,x
001DDFr 3               
001DDFr 3  60           z_pad:          rts
001DE0r 3               
001DE0r 3               
001DE0r 3               ; ## PAGE ( -- ) "Clear the screen"
001DE0r 3               ; ## "page"  tested  ANS facility
001DE0r 3                       ; """https://forth-standard.org/standard/facility/PAGE
001DE0r 3                       ; Clears a page if supported by ANS terminal codes. This is
001DE0r 3                       ; Clear Screen ("ESC[2J") plus moving the cursor to the top
001DE0r 3                       ; left of the screen
001DE0r 3                       ; """
001DE0r 3               xt_page:
001DE0r 3  A9 1B                        lda #AscESC
001DE2r 3  20 rr rr                     jsr emit_a
001DE5r 3  A9 5B                        lda #$5B        ; ASCII for "["
001DE7r 3  20 rr rr                     jsr emit_a
001DEAr 3  A9 32                        lda #'2'
001DECr 3  20 rr rr                     jsr emit_a
001DEFr 3  A9 4A                        lda #'J'
001DF1r 3  20 rr rr                     jsr emit_a
001DF4r 3               
001DF4r 3                               ; move cursor to top left of screen
001DF4r 3  20 rr rr                     jsr xt_zero
001DF7r 3  20 rr rr                     jsr xt_zero
001DFAr 3  20 rr rr                     jsr xt_at_xy
001DFDr 3               
001DFDr 3  60           z_page:         rts
001DFEr 3               
001DFEr 3               
001DFEr 3               ; ## PAREN ( -- ) "Discard input up to close paren ( comment )"
001DFEr 3               ; ## "("  auto  ANS core
001DFEr 3                       ; """http://forth-standard.org/standard/core/p"""
001DFEr 3               
001DFEr 3               xt_paren:
001DFEr 3                               ; Put a right paren on the stack.
001DFEr 3  CA                           dex
001DFFr 3  CA                           dex
001E00r 3  A9 29                        lda #41     ; Right parenthesis
001E02r 3  95 00                        sta 0,x
001E04r 3  74 01                        stz 1,x
001E06r 3               
001E06r 3                               ; Call parse.
001E06r 3  20 rr rr                     jsr xt_parse
001E09r 3               
001E09r 3                               ; Throw away the result.
001E09r 3  E8                           inx
001E0Ar 3  E8                           inx
001E0Br 3  E8                           inx
001E0Cr 3  E8                           inx
001E0Dr 3               
001E0Dr 3  60           z_paren:        rts
001E0Er 3               
001E0Er 3               
001E0Er 3               
001E0Er 3               ; ## PARSE_NAME ( "name" -- addr u ) "Parse the input"
001E0Er 3               ; ## "parse-name"  auto  ANS core ext
001E0Er 3                       ; """https://forth-standard.org/standard/core/PARSE-NAME
001E0Er 3                       ; Find next word in input string, skipping leading whitespace. This is
001E0Er 3                       ; a special form of PARSE and drops through to that word. See PARSE
001E0Er 3                       ; for more detail. We use this word internally for the interpreter
001E0Er 3                       ; because it is a lot easier to use. Reference implementations at
001E0Er 3                       ; http://forth-standard.org/standard/core/PARSE-NAME and
001E0Er 3                       ; http://www.forth200x.org/reference-implementations/parse-name.fs
001E0Er 3                       ; Roughly, the word is comparable to BL WORD COUNT. -- Note that
001E0Er 3                       ; though the ANS standard talks about skipping "spaces", whitespace
001E0Er 3                       ; is actually perfectly legal (see for example
001E0Er 3                       ; http://forth-standard.org/standard/usage#subsubsection.3.4.1.1).
001E0Er 3                       ; Otherwise, PARSE-NAME chokes on tabs.
001E0Er 3                       ; """
001E0Er 3               
001E0Er 3               xt_parse_name:
001E0Er 3                               ; To enable the compilation of the high-level Forth words
001E0Er 3                               ; in forth-words.asm and user-words.asm at boot time,
001E0Er 3                               ; PARSE-NAME and PARSE must be able to deal with 16-bit string
001E0Er 3                               ; lengths. This is a pain on an 8-bit machine. The pointer
001E0Er 3                               ; to the current location is in toin (>IN). We need to check,
001E0Er 3                               ; worst case, the characters from cib+toin to cib+ciblen, and
001E0Er 3                               ; we can't just use Y as an index.
001E0Er 3               
001E0Er 3                               ; The counter is CIBLEN-TOIN and stored in tmp1
001E0Er 3  A5 rr                        lda ciblen              ; LSB of counter
001E10r 3  38                           sec
001E11r 3  E5 rr                        sbc toin
001E13r 3  85 rr                        sta tmp1
001E15r 3  A5 rr                        lda ciblen+1            ; MSB
001E17r 3  E5 rr                        sbc toin+1
001E19r 3  85 rr                        sta tmp1+1
001E1Br 3               
001E1Br 3                               ; Check the result for zero (TOIN is equal to CIBLEN)
001E1Br 3  A5 rr                        lda tmp1
001E1Dr 3  05 rr                        ora tmp1+1
001E1Fr 3  F0 28                        beq @empty_line
001E21r 3               
001E21r 3                               ; We walk through the characters starting at CIB+TOIN, so we
001E21r 3                               ; save a temp version of that in tmp2
001E21r 3  A5 rr                        lda cib
001E23r 3  18                           clc
001E24r 3  65 rr                        adc toin
001E26r 3  85 rr                        sta tmp2                ; LSB of first character
001E28r 3  A5 rr                        lda cib+1
001E2Ar 3  65 rr                        adc toin+1
001E2Cr 3  85 rr                        sta tmp2+1              ; MSB
001E2Er 3               
001E2Er 3               @skip_loop:
001E2Er 3  B2 rr                        lda (tmp2)              ; work copy of cib
001E30r 3  20 rr rr                     jsr is_whitespace
001E33r 3  90 1F                        bcc @char_found
001E35r 3               
001E35r 3                               ; Char is still whitespace, continue
001E35r 3  E6 rr                        inc tmp2
001E37r 3  D0 02                        bne @2
001E39r 3  E6 rr                        inc tmp2+1
001E3Br 3               @2:
001E3Br 3                               ; Adjust counter
001E3Br 3  A5 rr                        lda tmp1
001E3Dr 3  D0 02                        bne @3
001E3Fr 3  C6 rr                        dec tmp1+1
001E41r 3               @3:
001E41r 3  C6 rr                        dec tmp1
001E43r 3               
001E43r 3  A5 rr                        lda tmp1
001E45r 3  05 rr                        ora tmp1+1
001E47r 3  D0 E5                        bne @skip_loop          ; fall through if empty line
001E49r 3               
001E49r 3               @empty_line:
001E49r 3                               ; Neither the ANS Forth nor the Gforth documentation say
001E49r 3                               ; what to return as an address if a string with only
001E49r 3                               ; spaces is given. For speed reasons, we just return junk
001E49r 3                               ; NOS, with the TOS zero as per standard
001E49r 3  CA                           dex
001E4Ar 3  CA                           dex
001E4Br 3  CA                           dex
001E4Cr 3  CA                           dex
001E4Dr 3               
001E4Dr 3  74 00                        stz 0,x                 ; TOS is zero
001E4Fr 3  74 01                        stz 1,x
001E51r 3               
001E51r 3  4C rr rr                     jmp z_parse_name        ; skip over PARSE
001E54r 3               
001E54r 3               @char_found:
001E54r 3                               ; We arrive here with tmp2 pointing to the first non-space
001E54r 3                               ; character. This is where the word really starts, so
001E54r 3                               ; we use it to calculate the new >IN by subtracting
001E54r 3  A5 rr                        lda tmp2
001E56r 3  38                           sec
001E57r 3  E5 rr                        sbc cib
001E59r 3  85 rr                        sta toin
001E5Br 3  A5 rr                        lda tmp2+1
001E5Dr 3  E5 rr                        sbc cib+1
001E5Fr 3  85 rr                        sta toin+1
001E61r 3               
001E61r 3                               ; prepare Data Stack for PARSE by adding space
001E61r 3                               ; as the delimiter
001E61r 3  CA                           dex
001E62r 3  CA                           dex
001E63r 3               
001E63r 3  A9 20                        lda #AscSP
001E65r 3  95 00                        sta 0,x
001E67r 3  74 01                        stz 1,x                 ; paranoid, now ( "name" c )
001E69r 3               
001E69r 3               
001E69r 3               ; ## PARSE ( "name" c -- addr u ) "Parse input with delimiter character"
001E69r 3               ; ## "parse"  tested  ANS core ext
001E69r 3                       ; """https://forth-standard.org/standard/core/PARSE
001E69r 3                       ; Find word in input string delimited by character given. Do not
001E69r 3                       ; skip leading delimiters -- this is the main difference to PARSE-NAME.
001E69r 3                       ; PARSE and PARSE-NAME replace WORD in modern systems. ANS discussion
001E69r 3                       ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
001E69r 3                       ;
001E69r 3                       ;
001E69r 3                       ;     cib  cib+toin   cib+ciblen
001E69r 3                       ;      v      v            v
001E69r 3                       ;     |###################|
001E69r 3                       ;
001E69r 3                       ;     |------>|  toin (>IN)
001E69r 3                       ;     |------------------->|  ciblen
001E69r 3                       ;
001E69r 3                       ; The input string is stored starting at the address in the Current
001E69r 3                       ; Input Buffer (CIB), the length of which is in CIBLEN. While searching
001E69r 3                       ; for the delimiter, TOIN (>IN) points to the where we currently are.
001E69r 3                       ; Since PARSE does not skip leading delimiters, we assume we are on a
001E69r 3                       ; useful string if there are any characters at all. As with
001E69r 3                       ; PARSE-NAME, we must be able to handle strings with a length of
001E69r 3                       ; 16-bit for EVALUTE, which is a pain on an 8-bit machine.
001E69r 3                       ; """
001E69r 3               
001E69r 3               xt_parse:
001E69r 3  20 rr rr                     jsr underflow_1
001E6Cr 3               
001E6Cr 3                               ; If the input buffer is empty, we just return
001E6Cr 3  A5 rr                        lda ciblen
001E6Er 3  05 rr                        ora ciblen+1
001E70r 3  F0 0C                        beq @abort_parse
001E72r 3               
001E72r 3                               ; If the pointer >IN is larger or equal to the length of
001E72r 3                               ; the input buffer (CIBLEN), the line is done. Put
001E72r 3                               ; differently, we only continue if >IN is smaller than
001E72r 3                               ; CIBLEN
001E72r 3  A5 rr                        lda toin+1              ; MSB
001E74r 3  C5 rr                        cmp ciblen+1
001E76r 3  90 0E                        bcc @go_parse           ; unsigned comparison
001E78r 3               
001E78r 3  A5 rr                        lda toin                ; LSB
001E7Ar 3  C5 rr                        cmp ciblen
001E7Cr 3  90 08                        bcc @go_parse
001E7Er 3               
001E7Er 3               @abort_parse:
001E7Er 3                               ; Sorry, this line is over
001E7Er 3  CA                           dex
001E7Fr 3  CA                           dex
001E80r 3  74 00                        stz 0,x
001E82r 3  74 01                        stz 1,x
001E84r 3               
001E84r 3  80 7A                        bra @done
001E86r 3               @go_parse:
001E86r 3                               ; We actually have work to do. Save the delimiter in
001E86r 3                               ; tmptos.
001E86r 3  B5 00                        lda 0,x
001E88r 3  85 rr                        sta tmptos
001E8Ar 3               
001E8Ar 3                               ; We can now prepare the Data Stack for the return value
001E8Ar 3  CA                           dex
001E8Br 3  CA                           dex
001E8Cr 3               
001E8Cr 3                               ; tmp1 is CIB+TOIN, the beginning of the current string
001E8Cr 3                               ; tmp2 is initially the same as tmp1, then the work index
001E8Cr 3                               ; tmp3 is CIB+CIBLEN, one char past the end of the string
001E8Cr 3               
001E8Cr 3                               ; Calculate the beginning of the string, which is also the
001E8Cr 3                               ; address to return
001E8Cr 3  A5 rr                        lda cib
001E8Er 3  18                           clc
001E8Fr 3  65 rr                        adc toin        ; LSB
001E91r 3  85 rr                        sta tmp1
001E93r 3  85 rr                        sta tmp2
001E95r 3  95 02                        sta 2,x
001E97r 3               
001E97r 3  A5 rr                        lda cib+1
001E99r 3  65 rr                        adc toin+1      ; MSB
001E9Br 3  85 rr                        sta tmp1+1
001E9Dr 3  85 rr                        sta tmp2+1
001E9Fr 3  95 03                        sta 3,x
001EA1r 3               
001EA1r 3                               ; Calculate the address where the input buffer ends plus 1, so
001EA1r 3                               ; we can compare it with TOIN, which is an index
001EA1r 3  A5 rr                        lda cib
001EA3r 3  18                           clc
001EA4r 3  65 rr                        adc ciblen
001EA6r 3  85 rr                        sta tmp3
001EA8r 3  A5 rr                        lda cib+1
001EAAr 3  65 rr                        adc ciblen+1
001EACr 3  85 rr                        sta tmp3+1
001EAEr 3               
001EAEr 3                               ; Initialize the offset we use to adjust EOL or found delimiter
001EAEr 3  64 rr                        stz tmptos+1
001EB0r 3               @loop:
001EB0r 3                               ; If we are at the end of the string, quit
001EB0r 3  A5 rr                        lda tmp2
001EB2r 3  C5 rr                        cmp tmp3
001EB4r 3  D0 06                        bne @not_empty
001EB6r 3               
001EB6r 3  A5 rr                        lda tmp2+1
001EB8r 3  C5 rr                        cmp tmp3+1
001EBAr 3  F0 1D                        beq @eol
001EBCr 3               @not_empty:
001EBCr 3                               ; We have to do this the hard way. In fact, it's really
001EBCr 3                               ; hard since if we are dealing with a SPACE, the standard
001EBCr 3                               ; wants us to skip all whitespace, not just spaces. Otherwise,
001EBCr 3                               ; Tali would choke on tabs between words. For details, see
001EBCr 3                               ; http://forth-standard.org/standard/file#subsection.11.3.5
001EBCr 3                               ; In theory, we could make this faster by defining a delimiter
001EBCr 3                               ; that is 00 as the sign that we skip all whitespace, thereby
001EBCr 3                               ; avoiding having to test every time. However, somebody,
001EBCr 3                               ; somewhere might want to parse a zero-delimited list. Since
001EBCr 3                               ; any byte value could be chosen for that, we just test for
001EBCr 3                               ; a space every single time for the moment.
001EBCr 3  B2 rr                        lda (tmp2)
001EBEr 3               
001EBEr 3  A4 rr                        ldy tmptos
001EC0r 3  C0 20                        cpy #AscSP
001EC2r 3  D0 07                        bne @not_whitespace
001EC4r 3               
001EC4r 3                               ; The delimiter is a space, so we're looking for all
001EC4r 3                               ; whitespace
001EC4r 3  20 rr rr                     jsr is_whitespace
001EC7r 3  90 02                        bcc @not_whitespace
001EC9r 3  80 0C                        bra @found_delimiter
001ECBr 3               
001ECBr 3               @not_whitespace:
001ECBr 3                               ; The delimiter is not a space, so we're looking for
001ECBr 3                               ; whatever it is
001ECBr 3  C5 rr                        cmp tmptos
001ECDr 3  F0 08                        beq @found_delimiter
001ECFr 3               
001ECFr 3                               ; Not a delimiter, next character
001ECFr 3  E6 rr                        inc tmp2
001ED1r 3  D0 DD                        bne @loop
001ED3r 3  E6 rr                        inc tmp2+1
001ED5r 3  80 D9                        bra @loop
001ED7r 3               
001ED7r 3               @found_delimiter:
001ED7r 3                               ; Increase the offset: If we've found a delimiter, we want
001ED7r 3                               ; TOIN to point to the character after it, not the delimiter
001ED7r 3                               ; itself
001ED7r 3  E6 rr                        inc tmptos+1
001ED9r 3               @eol:
001ED9r 3                               ; The length of the new string is tmp2-tmp1
001ED9r 3  A5 rr                        lda tmp2
001EDBr 3  38                           sec
001EDCr 3  E5 rr                        sbc tmp1
001EDEr 3  95 00                        sta 0,x
001EE0r 3               
001EE0r 3  A5 rr                        lda tmp2+1
001EE2r 3  E5 rr                        sbc tmp1+1
001EE4r 3  95 01                        sta 1,x
001EE6r 3               
001EE6r 3                               ; The new offset is tmp2-cib
001EE6r 3  A5 rr                        lda tmp2
001EE8r 3  38                           sec
001EE9r 3  E5 rr                        sbc cib
001EEBr 3  85 rr                        sta toin
001EEDr 3  A5 rr                        lda tmp2+1
001EEFr 3  E5 rr                        sbc cib+1
001EF1r 3  85 rr                        sta toin+1
001EF3r 3               
001EF3r 3                               ; Add in the delimiter
001EF3r 3  A5 rr                        lda toin
001EF5r 3  18                           clc
001EF6r 3  65 rr                        adc tmptos+1
001EF8r 3  85 rr                        sta toin
001EFAr 3  A5 rr                        lda toin+1
001EFCr 3  69 00                        adc #0          ; we only need the carry
001EFEr 3  85 rr                        sta toin+1
001F00r 3               @done:
001F00r 3               z_parse_name:
001F00r 3  60           z_parse:        rts
001F01r 3               
001F01r 3               
001F01r 3               
001F01r 3               ; ## PICK ( n n u -- n n n ) "Move element u of the stack to TOS"
001F01r 3               ; ## "pick"  auto  ANS core ext
001F01r 3                       ; """https://forth-standard.org/standard/core/PICK
001F01r 3                       ; Take the u-th element out of the stack and put it on TOS,
001F01r 3                       ; overwriting the original TOS. 0 PICK is equivalent to DUP, 1 PICK to
001F01r 3                       ; OVER. Note that using PICK is considered poor coding form. Also note
001F01r 3                       ; that FIG Forth has a different behavior for PICK than ANS Forth.
001F01r 3                       ; """
001F01r 3               
001F01r 3               xt_pick:
001F01r 3                               ; Checking for underflow is difficult because it depends on
001F01r 3                               ; which element we want to grab. We could probably figure
001F01r 3                               ; something out, but it wouldn't work with underflow stripping
001F01r 3                               ; Since using PICK is considered poor form anyway, we just
001F01r 3                               ; leave it as it is
001F01r 3  16 00                        asl 0,x         ; we assume u < 128 (stack is small)
001F03r 3  8A                           txa
001F04r 3  75 00                        adc 0,x
001F06r 3  A8                           tay
001F07r 3               
001F07r 3  B9 02 00                     lda 0002,y
001F0Ar 3  95 00                        sta 0,x
001F0Cr 3  B9 03 00                     lda 0003,y
001F0Fr 3  95 01                        sta 1,x
001F11r 3               
001F11r 3  60           z_pick:         rts
001F12r 3               
001F12r 3               
001F12r 3               
001F12r 3               ; ## PLUS ( n n -- n ) "Add TOS and NOS"
001F12r 3               ; ## "+"  auto  ANS core
001F12r 3                       ; """https://forth-standard.org/standard/core/Plus"""
001F12r 3               xt_plus:
001F12r 3  20 rr rr                     jsr underflow_2
001F15r 3               
001F15r 3  18                           clc
001F16r 3  B5 00                        lda 0,x         ; LSB
001F18r 3  75 02                        adc 2,x
001F1Ar 3  95 02                        sta 2,x
001F1Cr 3               
001F1Cr 3  B5 01                        lda 1,x         ; MSB. No CLC, conserve carry bit
001F1Er 3  75 03                        adc 3,x
001F20r 3  95 03                        sta 3,x
001F22r 3               
001F22r 3  E8                           inx
001F23r 3  E8                           inx
001F24r 3               
001F24r 3  60           z_plus:         rts
001F25r 3               
001F25r 3               
001F25r 3               ; ## PLUS_STORE ( n addr -- ) "Add number to value at given address"
001F25r 3               ; ## "+!"  auto  ANS core
001F25r 3                       ; """https://forth-standard.org/standard/core/PlusStore"""
001F25r 3               xt_plus_store:
001F25r 3  20 rr rr                     jsr underflow_2
001F28r 3               
001F28r 3                               ; move address to tmp1 so we can work with it
001F28r 3  B5 00                        lda 0,x
001F2Ar 3  85 rr                        sta tmp1
001F2Cr 3  B5 01                        lda 1,x
001F2Er 3  85 rr                        sta tmp1+1
001F30r 3               
001F30r 3  A0 00                        ldy #0          ; LSB
001F32r 3  B1 rr                        lda (tmp1),y
001F34r 3  18                           clc
001F35r 3  75 02                        adc 2,x
001F37r 3  91 rr                        sta (tmp1),y
001F39r 3               
001F39r 3  C8                           iny             ; MSB
001F3Ar 3  B1 rr                        lda (tmp1),y
001F3Cr 3  75 03                        adc 3,x
001F3Er 3  91 rr                        sta (tmp1),y
001F40r 3               
001F40r 3  E8                           inx
001F41r 3  E8                           inx
001F42r 3  E8                           inx
001F43r 3  E8                           inx
001F44r 3               
001F44r 3  60           z_plus_store:   rts
001F45r 3               
001F45r 3               
001F45r 3               ; ## POSTPONE ( -- ) "Change IMMEDIATE status (it's complicated)"
001F45r 3               ; ## "postpone"  auto   ANS core
001F45r 3                       ; """https://forth-standard.org/standard/core/POSTPONE
001F45r 3                       ; Add the compilation behavior of a word to a new word at
001F45r 3                       ; compile time. If the word that follows it is immediate, include
001F45r 3                       ; it so that it will be compiled when the word being defined is
001F45r 3                       ; itself used for a new word. Tricky, but very useful.
001F45r 3                       ;
001F45r 3                       ; Because POSTPONE expects a word (not an xt) in the input stream (not
001F45r 3                       ; on the Data Stack). This means we cannot build words with
001F45r 3                       ; "jsr xt_postpone, jsr <word>" directly.
001F45r 3                       ; """
001F45r 3               
001F45r 3               xt_postpone:
001F45r 3  20 rr rr                     jsr xt_parse_name               ; ( -- addr n )
001F48r 3               
001F48r 3                               ; if there was no word provided, complain and quit
001F48r 3  B5 00                        lda 0,x
001F4Ar 3  15 01                        ora 1,x
001F4Cr 3  D0 05                        bne @1
001F4Er 3               
001F4Er 3  A9 05                        lda #err_noname
001F50r 3  4C rr rr                     jmp error
001F53r 3               @1:
001F53r 3  20 rr rr                     jsr xt_find_name                ; ( -- nt | 0 )
001F56r 3               
001F56r 3                               ; if word not in Dictionary, complain and quit
001F56r 3  D0 05                        bne @2
001F58r 3  A9 05                        lda #err_noname
001F5Ar 3  4C rr rr                     jmp error
001F5Dr 3               
001F5Dr 3               @2:
001F5Dr 3                               ; keep a copy of nt for later
001F5Dr 3  B5 00                        lda 0,x
001F5Fr 3  85 rr                        sta tmp1
001F61r 3  B5 01                        lda 1,x
001F63r 3  85 rr                        sta tmp1+1
001F65r 3               
001F65r 3                               ; We need the xt instead of the nt
001F65r 3  20 rr rr                     jsr xt_name_to_int              ; ( nt -- xt )
001F68r 3               
001F68r 3                               ; See if this is an immediate word. This is easier
001F68r 3                               ; with nt than with xt. The status byte of the word
001F68r 3                               ; is nt+1
001F68r 3  E6 rr                        inc tmp1
001F6Ar 3  D0 02                        bne @3
001F6Cr 3  E6 rr                        inc tmp1+1
001F6Er 3               @3:
001F6Er 3  B2 rr                        lda (tmp1)
001F70r 3  29 04                        and #IM         ; mask all but Intermediate flag
001F72r 3  F0 05                        beq @not_immediate
001F74r 3               
001F74r 3                               ; We're immediate, so instead of executing it right now, we
001F74r 3                               ; compile it. xt is TOS, so this is easy. The RTS at the end
001F74r 3                               ; takes us back to the original caller
001F74r 3  20 rr rr                     jsr xt_compile_comma
001F77r 3  80 0A                        bra @done
001F79r 3               
001F79r 3               @not_immediate:
001F79r 3                               ; This is not an immediate word, so we enact "deferred
001F79r 3                               ; compilation" by including ' <NAME> COMPILE, which we do by
001F79r 3                               ; compiling the run-time routine of LITERAL, the xt itself, and
001F79r 3                               ; a subroutine jump to COMPILE,
001F79r 3  20 rr rr                     jsr xt_literal
001F7Cr 3               
001F7Cr 3                               ; Last, compile COMPILE,
001F7Cr 3  A0 rr                        ldy #>xt_compile_comma
001F7Er 3  A9 rr                        lda #<xt_compile_comma
001F80r 3  20 rr rr                     jsr cmpl_subroutine
001F83r 3               @done:
001F83r 3  60           z_postpone:     rts
001F84r 3               
001F84r 3               
001F84r 3               
001F84r 3               ; ## PREVIOUS ( -- ) "Remove the first wordlist in the search order"
001F84r 3               ; ## "previous"  auto  ANS search ext
001F84r 3                       ; """http://forth-standard.org/standard/search/PREVIOUS"""
001F84r 3               
001F84r 3               xt_previous:
001F84r 3  20 rr rr                     jsr xt_get_order
001F87r 3  20 rr rr                     jsr xt_nip
001F8Ar 3  20 rr rr                     jsr xt_one_minus
001F8Dr 3  20 rr rr                     jsr xt_set_order
001F90r 3               
001F90r 3  60           z_previous:     rts
001F91r 3               
001F91r 3               
001F91r 3               
001F91r 3               ; ## QUESTION ( addr -- ) "Print content of a variable"
001F91r 3               ; ## "?"  tested  ANS tools
001F91r 3                       ; """https://forth-standard.org/standard/tools/q
001F91r 3                       ;
001F91r 3                       ; Only used interactively. Since humans are so slow, we
001F91r 3                       ; save size and just go for the subroutine jumps
001F91r 3                       ; """
001F91r 3               xt_question:
001F91r 3                               ; FETCH takes care of underflow check
001F91r 3  20 rr rr                     jsr xt_fetch
001F94r 3  20 rr rr                     jsr xt_dot
001F97r 3               
001F97r 3  60           z_question:     rts
001F98r 3               
001F98r 3               
001F98r 3               ; ## QUESTION_DUP ( n -- 0 | n n ) "Duplicate TOS non-zero"
001F98r 3               ; ## "?dup"  auto  ANS core
001F98r 3                       ; """https://forth-standard.org/standard/core/qDUP"""
001F98r 3               
001F98r 3               xt_question_dup:
001F98r 3  20 rr rr                     jsr underflow_1
001F9Br 3               
001F9Br 3                               ; Check if TOS is zero
001F9Br 3  B5 00                        lda 0,x
001F9Dr 3  15 01                        ora 1,x
001F9Fr 3  F0 0A                        beq @done
001FA1r 3               
001FA1r 3                               ; not zero, duplicate
001FA1r 3  CA                           dex
001FA2r 3  CA                           dex
001FA3r 3  B5 02                        lda 2,x
001FA5r 3  95 00                        sta 0,x
001FA7r 3  B5 03                        lda 3,x
001FA9r 3  95 01                        sta 1,x
001FABr 3               @done:
001FABr 3  60           z_question_dup: rts
001FACr 3               
001FACr 3               
001FACr 3               
001FACr 3               ; ## R_FETCH ( -- n ) "Get copy of top of Return Stack"
001FACr 3               ; ## "r@"  auto  ANS core
001FACr 3                       ; """https://forth-standard.org/standard/core/RFetch
001FACr 3                       ; This word is Compile Only in Tali Forth, though Gforth has it
001FACr 3                       ; work normally as well
001FACr 3                       ;
001FACr 3                       ; An alternative way to write this word
001FACr 3                       ; would be to access the elements on the stack directly like 2R@
001FACr 3                       ; does, these versions should be compared at some point.
001FACr 3                       ; """
001FACr 3               xt_r_fetch:
001FACr 3                               ; get the return address
001FACr 3  7A                           ply             ; LSB
001FADr 3  84 rr                        sty tmp1
001FAFr 3  7A                           ply             ; MSB
001FB0r 3               
001FB0r 3                               ; --- CUT FOR NATIVE COMPILE ---
001FB0r 3               
001FB0r 3                               ; get the actual top of Return Stack
001FB0r 3  CA                           dex
001FB1r 3  CA                           dex
001FB2r 3               
001FB2r 3  68                           pla             ; LSB
001FB3r 3  95 00                        sta 0,x
001FB5r 3  68                           pla             ; MSB
001FB6r 3  95 01                        sta 1,x
001FB8r 3               
001FB8r 3                               ; now we have to put that value back
001FB8r 3  48                           pha
001FB9r 3  B5 00                        lda 0,x
001FBBr 3  48                           pha
001FBCr 3               
001FBCr 3                               ; --- CUT FOR NATIVE COMPILE ---
001FBCr 3               
001FBCr 3                               ; restore return value
001FBCr 3  5A                           phy             ; MSB
001FBDr 3  A4 rr                        ldy tmp1
001FBFr 3  5A                           phy             ; LSB
001FC0r 3               
001FC0r 3  60           z_r_fetch:      rts
001FC1r 3               
001FC1r 3               
001FC1r 3               ; ## R_FROM ( -- n )(R: n --) "Move top of Return Stack to TOS"
001FC1r 3               ; ## "r>"  auto  ANS core
001FC1r 3                       ; """https://forth-standard.org/standard/core/Rfrom
001FC1r 3                       ; Move Top of Return Stack to Top of Data Stack.
001FC1r 3                       ;
001FC1r 3                       ; We have to move
001FC1r 3                       ; the RTS address out of the way first. This word is handled
001FC1r 3                       ; differently for native and and subroutine compilation, see COMPILE,
001FC1r 3                       ; This is a compile-only word
001FC1r 3                       ; """
001FC1r 3               
001FC1r 3               xt_r_from:
001FC1r 3                               ; Rescue the address of the return jump that is currently
001FC1r 3                               ; on top of the Return Stack. If this word is natively
001FC1r 3                               ; compiled, this is a total waste of time
001FC1r 3  68                           pla             ; LSB
001FC2r 3  85 rr                        sta tmptos
001FC4r 3  7A                           ply             ; MSB
001FC5r 3               
001FC5r 3                               ; --- CUT FOR NATIVE CODING ---
001FC5r 3               
001FC5r 3  CA                           dex
001FC6r 3  CA                           dex
001FC7r 3               
001FC7r 3                               ; now we can access the actual data
001FC7r 3               
001FC7r 3  68                           pla             ; LSB
001FC8r 3  95 00                        sta 0,x
001FCAr 3  68                           pla             ; MSB
001FCBr 3  95 01                        sta 1,x
001FCDr 3               
001FCDr 3                               ; --- CUT FOR NATIVE CODING ---
001FCDr 3               
001FCDr 3                               ; restore the return address
001FCDr 3  5A                           phy             ; MSB
001FCEr 3  A5 rr                        lda tmptos
001FD0r 3  48                           pha             ; LSB
001FD1r 3               
001FD1r 3  60           z_r_from:       rts
001FD2r 3               
001FD2r 3               
001FD2r 3               ; ## R_TO_INPUT ( -- ) ( R: n n n n -- ) "Restore input state from Return Stack"
001FD2r 3               ; ## "r>input"  tested  Tali Forth
001FD2r 3                       ; """Restore the current input state as defined by insrc, cib, ciblen,
001FD2r 3                       ; and toin from the Return Stack.
001FD2r 3                       ;
001FD2r 3                       ; See INPUT_TO_R for a discussion of this word. Uses tmp1
001FD2r 3                       ; """
001FD2r 3               
001FD2r 3               xt_r_to_input:
001FD2r 3               
001FD2r 3                               ; We arrive here with the return address on the top of the
001FD2r 3                               ; 65c02's stack. We need to move it out of the way first
001FD2r 3  68                           pla
001FD3r 3  85 rr                        sta tmp1
001FD5r 3  68                           pla
001FD6r 3  85 rr                        sta tmp1+1
001FD8r 3               
001FD8r 3                               ; This assumes that insrc is the first of eight bytes and
001FD8r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001FD8r 3                               ; Page. Since we went in reverse order, insrc is now on the top
001FD8r 3                               ; of the Return Stack.
001FD8r 3  A0 00                        ldy #0
001FDAr 3               @loop:
001FDAr 3  68                           pla
001FDBr 3  99 rr rr                     sta insrc,y
001FDEr 3  C8                           iny
001FDFr 3  C0 08                        cpy #8
001FE1r 3  D0 F7                        bne @loop
001FE3r 3               
001FE3r 3                               ; Restore address for return jump
001FE3r 3  A5 rr                        lda tmp1+1
001FE5r 3  48                           pha
001FE6r 3  A5 rr                        lda tmp1
001FE8r 3  48                           pha
001FE9r 3               
001FE9r 3  60           z_r_to_input: 	rts
001FEAr 3               
001FEAr 3               
001FEAr 3               
001FEAr 3               ; ## RECURSE ( -- ) "Copy recursive call to word being defined"
001FEAr 3               ; ## "recurse"  auto  ANS core
001FEAr 3                       ; """https://forth-standard.org/standard/core/RECURSE
001FEAr 3                       ;
001FEAr 3                       ; This word may not be natively compiled
001FEAr 3                       ; """
001FEAr 3               
001FEAr 3               xt_recurse:
001FEAr 3                               ; The whole routine amounts to compiling a reference to
001FEAr 3                               ; the word that is being compiled. First, we save the JSR
001FEAr 3                               ; instruction
001FEAr 3  A0 00                        ldy #0
001FECr 3               
001FECr 3  A9 20                        lda #$20        ; opcode for JSR
001FEEr 3  91 rr                        sta (cp),y
001FF0r 3  C8                           iny
001FF1r 3               
001FF1r 3                               ; Next, we save the LSB and MSB of the xt of the word
001FF1r 3                               ; we are currently working on. We first need to see if
001FF1r 3                               ; WORKWORD has the nt (: started the word) or the
001FF1r 3                               ; xt (:NONAME started the word). Bit 6 in status tells us.
001FF1r 3  24 rr                        bit status
001FF3r 3  70 0C                        bvs @nt_in_workword
001FF5r 3               
001FF5r 3                               ; This is a special :NONAME word. Just copy the xt
001FF5r 3                               ; from WORKWORD into the dictionary.
001FF5r 3  A5 rr                        lda workword
001FF7r 3  91 rr                        sta (cp),y
001FF9r 3  C8                           iny
001FFAr 3  A5 rr                        lda workword+1
001FFCr 3  91 rr                        sta (cp),y
001FFEr 3  C8                           iny
001FFFr 3  80 1B                        bra @update_cp
002001r 3               
002001r 3               @nt_in_workword:
002001r 3                               ; This is a regular : word, so the xt is four bytes down
002001r 3                               ; from the nt which we saved in WORKWORD. We could probably
002001r 3                               ; use NAME>INT here but this is going to be faster, and
002001r 3                               ; fast counts with recursion
002001r 3  A5 rr                        lda workword            ; LSB
002003r 3  18                           clc
002004r 3  69 04                        adc #4
002006r 3  85 rr                        sta tmp1
002008r 3  A5 rr                        lda workword+1          ; MSB
00200Ar 3  69 00                        adc #0
00200Cr 3  85 rr                        sta tmp1+1
00200Er 3               
00200Er 3  B2 rr                        lda (tmp1)
002010r 3  91 rr                        sta (cp),y
002012r 3  5A                           phy
002013r 3  A0 01                        ldy #1
002015r 3  B1 rr                        lda (tmp1),y
002017r 3  7A                           ply
002018r 3  C8                           iny
002019r 3  91 rr                        sta (cp),y
00201Br 3  C8                           iny
00201Cr 3               
00201Cr 3               @update_cp:
00201Cr 3  98                           tya
00201Dr 3  18                           clc
00201Er 3  65 rr                        adc cp
002020r 3  85 rr                        sta cp
002022r 3  90 02                        bcc @done
002024r 3  E6 rr                        inc cp+1
002026r 3               @done:
002026r 3  60           z_recurse:      rts
002027r 3               
002027r 3               
002027r 3               
002027r 3               ; ## REFILL ( -- f ) "Refill the input buffer"
002027r 3               ; ## "refill"  tested  ANS core ext
002027r 3                       ; """https://forth-standard.org/standard/core/REFILL
002027r 3                       ; Attempt to fill the input buffer from the input source, returning
002027r 3                       ; a true flag if successful. When the input source is the user input
002027r 3                       ; device, attempt to receive input into the terminal input buffer. If
002027r 3                       ; successful, make the result the input buffer, set >IN to zero, and
002027r 3                       ; return true. Receipt of a line containing no characters is considered
002027r 3                       ; successful. If there is no input available from the current input
002027r 3                       ; source, return false. When the input source is a string from EVALUATE,
002027r 3                       ; return false and perform no other action." See
002027r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
002027r 3                       ; and Conklin & Rather p. 156. Note we don't have to care about blocks
002027r 3                       ; because REFILL is never used on blocks - Tali is able to evaluate the
002027r 3                       ; entire block as a 1024 byte string.
002027r 3                       ; """"
002027r 3               
002027r 3               xt_refill:
002027r 3                               ; Get input source from SOURCE-ID. This is an
002027r 3                               ; optimized version of a subroutine jump to SOURCE-ID
002027r 3  A5 rr                        lda insrc               ; cheat: We only check LSB
002029r 3  D0 2D                        bne @src_not_kbd
00202Br 3               
00202Br 3                               ; SOURCE-ID of zero means we're getting stuff from the keyboard
00202Br 3                               ; with ACCEPT, which wants the address of the current input
00202Br 3                               ; buffer NOS and the max number of characters to accept TOS
00202Br 3  CA                           dex
00202Cr 3  CA                           dex
00202Dr 3  CA                           dex
00202Er 3  CA                           dex
00202Fr 3               
00202Fr 3  A5 rr                        lda cib                 ; address of CIB is NOS
002031r 3  95 02                        sta 2,x
002033r 3  A5 rr                        lda cib+1
002035r 3  95 03                        sta 3,x
002037r 3               
002037r 3  64 rr                        stz ciblen              ; go in with empty buffer
002039r 3  64 rr                        stz ciblen+1
00203Br 3               
00203Br 3  A9 FF                        lda #bsize              ; max number of chars is TOS
00203Dr 3  95 00                        sta 0,x
00203Fr 3  74 01                        stz 1,x                 ; cheat: We only accept max 255
002041r 3               
002041r 3  20 rr rr                     jsr xt_accept           ; ( addr n1 -- n2)
002044r 3               
002044r 3                               ; ACCEPT returns the number of characters accepted, which
002044r 3                               ; belong in CIBLEN
002044r 3  B5 00                        lda 0,x
002046r 3  85 rr                        sta ciblen
002048r 3  B5 01                        lda 1,x
00204Ar 3  85 rr                        sta ciblen+1            ; though we only accept 255 chars
00204Cr 3               
00204Cr 3                               ; make >IN point to beginning of buffer
00204Cr 3  64 rr                        stz toin
00204Er 3  64 rr                        stz toin+1
002050r 3               
002050r 3  A9 FF                        lda #$FF                ; overwrite with TRUE flag
002052r 3  95 00                        sta 0,x
002054r 3  95 01                        sta 1,x
002056r 3               
002056r 3  80 10                        bra @done
002058r 3               
002058r 3               @src_not_kbd:
002058r 3                               ; If SOURCE-ID doesn't return a zero, it must be a string in
002058r 3                               ; memory or a file (remember, no blocks in this version).
002058r 3                               ; If source is a string, we were given the flag -1 ($FFFF)
002058r 3  1A                           inc
002059r 3  D0 08                        bne @src_not_string
00205Br 3               
00205Br 3                               ; Simply return FALSE flag as per specification
00205Br 3  CA                           dex
00205Cr 3  CA                           dex
00205Dr 3  74 00                        stz 0,x
00205Fr 3  74 01                        stz 1,x
002061r 3               
002061r 3  80 05                        bra z_refill
002063r 3               
002063r 3               @src_not_string:
002063r 3                               ; Since we don't have blocks, this must mean that we are trying
002063r 3                               ; to read from a file. However, we don't have files yet, so we
002063r 3                               ; report an error and jump to ABORT.
002063r 3  A9 01                        lda #err_badsource
002065r 3  4C rr rr                     jmp error
002068r 3               @done:
002068r 3  60           z_refill:       rts
002069r 3               
002069r 3               
002069r 3               
002069r 3               ; ## REPEAT (C: orig dest -- ) ( -- ) "Loop flow control"
002069r 3               ; ## "repeat"  auto  ANS core
002069r 3                       ; """http://forth-standard.org/standard/core/REPEAT"""
002069r 3               
002069r 3               xt_repeat:
002069r 3                               ; Run again first
002069r 3  20 rr rr                     jsr xt_again
00206Cr 3               
00206Cr 3                               ; Stuff HERE in for the branch address
00206Cr 3                               ; to get out of the loop
00206Cr 3  20 rr rr                     jsr xt_here
00206Fr 3  20 rr rr                     jsr xt_swap
002072r 3  20 rr rr                     jsr xt_store
002075r 3               
002075r 3  60           z_repeat:       rts
002076r 3               
002076r 3               
002076r 3               
002076r 3               ; ## RIGHT_BRACKET ( -- ) "Enter the compile state"
002076r 3               ; ## "]"  auto  ANS core
002076r 3                       ; """https://forth-standard.org/standard/right-bracket
002076r 3                       ; This is an immediate word.
002076r 3                       ; """
002076r 3               xt_right_bracket:
002076r 3  A9 FF                        lda #$FF
002078r 3  85 rr                        sta state
00207Ar 3  85 rr                        sta state+1
00207Cr 3               z_right_bracket:
00207Cr 3  60                           rts
00207Dr 3               
00207Dr 3               
00207Dr 3               ; ## ROOT_WORDLIST ( -- u ) "WID for the Root (minimal) wordlist"
00207Dr 3               ; ## "root-wordlist"  tested  Tali Editor
00207Dr 3               xt_root_wordlist:
00207Dr 3  CA                           dex             ; The WID for the Root wordlist is 3.
00207Er 3  CA                           dex
00207Fr 3  A9 03                        lda #3
002081r 3  95 00                        sta 0,x
002083r 3  74 01                        stz 1,x
002085r 3               
002085r 3               z_root_wordlist:
002085r 3  60                           rts
002086r 3               
002086r 3               
002086r 3               ; ## ROT ( a b c -- b c a ) "Rotate first three stack entries downwards"
002086r 3               ; ## "rot"  auto  ANS core
002086r 3                       ; """https://forth-standard.org/standard/core/ROT
002086r 3                       ; Remember "R for 'Revolution'" - the bottom entry comes out
002086r 3                       ; on top!
002086r 3                       ; """
002086r 3               
002086r 3               xt_rot:
002086r 3  20 rr rr                     jsr underflow_3
002089r 3               
002089r 3  B4 05                        ldy 5,x         ; MSB first
00208Br 3  B5 03                        lda 3,x
00208Dr 3  95 05                        sta 5,x
00208Fr 3  B5 01                        lda 1,x
002091r 3  95 03                        sta 3,x
002093r 3  94 01                        sty 1,x
002095r 3               
002095r 3  B4 04                        ldy 4,x         ; LSB next
002097r 3  B5 02                        lda 2,x
002099r 3  95 04                        sta 4,x
00209Br 3  B5 00                        lda 0,x
00209Dr 3  95 02                        sta 2,x
00209Fr 3  94 00                        sty 0,x
0020A1r 3               
0020A1r 3  60           z_rot:          rts
0020A2r 3               
0020A2r 3               
0020A2r 3               
0020A2r 3               ; ## RSHIFT ( x u -- x ) "Shift TOS to the right"
0020A2r 3               ; ## "rshift"  auto  ANS core
0020A2r 3                       ; """https://forth-standard.org/standard/core/RSHIFT"""
0020A2r 3               xt_rshift:
0020A2r 3  20 rr rr                     jsr underflow_2
0020A5r 3               
0020A5r 3                               ; We shift maximal by 16 bits, mask everything else
0020A5r 3  B5 00                        lda 0,x
0020A7r 3  29 0F                        and #%00001111
0020A9r 3  F0 08                        beq @done               ; if 0 shifts, quit
0020ABr 3               
0020ABr 3  A8                           tay
0020ACr 3               @loop:
0020ACr 3  56 03                        lsr 3,x
0020AEr 3  76 02                        ror 2,x
0020B0r 3  88                           dey
0020B1r 3  D0 F9                        bne @loop
0020B3r 3               @done:
0020B3r 3  E8                           inx
0020B4r 3  E8                           inx
0020B5r 3               
0020B5r 3  60           z_rshift:       rts
0020B6r 3               
0020B6r 3               
0020B6r 3               ; ## S_BACKSLASH_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
0020B6r 3               ; ## "s\""  auto  ANS core
0020B6r 3                       ; """https://forth-standard.org/standard/core/Seq
0020B6r 3                       ; Store address and length of string given, returning ( addr u ).
0020B6r 3                       ; ANS core claims this is compile-only, but the file set expands it
0020B6r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
0020B6r 3                       ; are evil. We follow general usage. This is just like S" except
0020B6r 3                       ; that it allows for some special escaped characters.
0020B6r 3                       ; """
0020B6r 3               
0020B6r 3               xt_s_backslash_quote:
0020B6r 3                               ; tmp2 will be used to determine if we are handling
0020B6r 3                               ; escaped characters or not. In this case, we are,
0020B6r 3                               ; so set it to $FF (the upper byte will be used to
0020B6r 3                               ; determine if we just had a \ and the next character
0020B6r 3                               ; needs to be modifed as an escaped character).
0020B6r 3  A9 FF                        lda #$FF
0020B8r 3  85 rr                        sta tmp2
0020BAr 3  64 rr                        stz tmp2+1
0020BCr 3               
0020BCr 3                               ; Now that the flag is set, jump into s_quote to process
0020BCr 3                               ; the string.
0020BCr 3  20 rr rr                     jsr s_quote_start
0020BFr 3               @done:
0020BFr 3               z_s_backslash_quote:
0020BFr 3  60                           rts
0020C0r 3               
0020C0r 3               
0020C0r 3               ; This is a helper function for s_backslash_quote to convert a character
0020C0r 3               ; from ASCII to the corresponding hex value, eg 'F'->15
0020C0r 3               convert_hex_value:
0020C0r 3               
0020C0r 3  C9 41                cmp #'A'
0020C2r 3  90 07                bcc @digit
0020C4r 3               
0020C4r 3                       ; It's A-F
0020C4r 3  29 DF                and #$DF                ; Make it uppercase.
0020C6r 3  38                   sec
0020C7r 3  E9 37                sbc #'7'                 ; gives value 10 for 'A'
0020C9r 3  80 03                bra @done
0020CBr 3               
0020CBr 3               @digit:
0020CBr 3                       ; It's 0-9
0020CBr 3  38                   sec
0020CCr 3  E9 30                sbc #'0'
0020CEr 3               
0020CEr 3               @done:
0020CEr 3  60                   rts
0020CFr 3               
0020CFr 3               
0020CFr 3               
0020CFr 3               ; ## SEARCH_WORDLIST ( caddr u wid -- 0 | xt 1 | xt -1) "Search for a word in a wordlist"
0020CFr 3               ; ## "search-wordlist" auto ANS search
0020CFr 3                       ; """https://forth-standard.org/standard/search/SEARCH_WORDLIST"""
0020CFr 3               
0020CFr 3               xt_search_wordlist:
0020CFr 3  20 rr rr                     jsr underflow_3
0020D2r 3               
0020D2r 3                               ; Set up tmp1 with the wordlist indicated by wid
0020D2r 3                               ; on the stack. Start by putting the base address
0020D2r 3                               ; of the wordlists in tmp2.
0020D2r 3  A5 rr                        lda up
0020D4r 3  18                           clc
0020D5r 3  69 06                        adc #wordlists_offset
0020D7r 3  85 rr                        sta tmp2
0020D9r 3  A5 rr                        lda up+1
0020DBr 3  69 00                        adc #0          ; Adding carry
0020DDr 3  85 rr                        sta tmp2+1
0020DFr 3               
0020DFr 3                               ; Add the wid (in cells) to the base address.
0020DFr 3  B5 00                        lda 0,x
0020E1r 3  0A                           asl             ; Convert wid to offset in cells (x2)
0020E2r 3  65 rr                        adc tmp2
0020E4r 3  85 rr                        sta tmp2
0020E6r 3  90 02                        bcc @1
0020E8r 3  E6 rr                        inc tmp2+1      ; Propagate carry if needed.
0020EAr 3               
0020EAr 3                               ; tmp2 now holds the address of the dictionary pointer
0020EAr 3                               ; for the given wordlist.
0020EAr 3               @1:
0020EAr 3                               ; Remove the wid from the stack.
0020EAr 3  E8                           inx
0020EBr 3  E8                           inx
0020ECr 3               
0020ECr 3                               ; check for special case of an empty string (length zero)
0020ECr 3  B5 00                        lda 0,x
0020EEr 3  15 01                        ora 1,x
0020F0r 3  D0 03                        bne @check_wordlist
0020F2r 3  4C rr rr                     jmp @done
0020F5r 3               
0020F5r 3               @check_wordlist:
0020F5r 3                               ; Check for special case of empty wordlist
0020F5r 3                               ; (dictionary pointer, in tmp2, is 0)
0020F5r 3  A5 rr                        lda tmp2
0020F7r 3  05 rr                        ora tmp2+1
0020F9r 3  D0 03                        bne @have_string
0020FBr 3  4C rr rr                     jmp @done
0020FEr 3               
0020FEr 3               @have_string:
0020FEr 3                               ; set up first loop iteration
0020FEr 3  B2 rr                        lda (tmp2)              ; nt of first word in Dictionary
002100r 3  85 rr                        sta tmp1
002102r 3               
002102r 3  E6 rr                        inc tmp2                ; Move to the upper byte
002104r 3  D0 02                        bne @2
002106r 3  E6 rr                        inc tmp2+1
002108r 3               @2:
002108r 3  B2 rr                        lda (tmp2)
00210Ar 3  85 rr                        sta tmp1+1
00210Cr 3               
00210Cr 3                               ; Reuse tmp2 to hold the address of the mystery string.
00210Cr 3  B5 02                        lda 2,x                 ; Address of mystery string
00210Er 3  85 rr                        sta tmp2
002110r 3  B5 03                        lda 3,x
002112r 3  85 rr                        sta tmp2+1
002114r 3               
002114r 3               @loop:
002114r 3                               ; first quick test: Are strings the same length?
002114r 3  B2 rr                        lda (tmp1)
002116r 3  D5 00                        cmp 0,x
002118r 3  D0 7B                        bne @next_entry
00211Ar 3               
00211Ar 3               @compare_string:
00211Ar 3                               ; are the same length, so we now have to compare each
00211Ar 3                               ; character
00211Ar 3               
00211Ar 3                               ; second quick test: Is the first character the same?
00211Ar 3  B2 rr                        lda (tmp2)      ; first character of mystery string
00211Cr 3               
00211Cr 3                               ; Lowercase the incoming charcter.
00211Cr 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
00211Er 3  B0 07                        bcs @compare_first
002120r 3  C9 41                        cmp #$41        ; ASCII 'A'
002122r 3  90 03                        bcc @compare_first
002124r 3               
002124r 3                               ; An uppercase letter has been located.  Make it
002124r 3                               ; lowercase.
002124r 3  18                           clc
002125r 3  69 20                        adc #$20
002127r 3               
002127r 3               @compare_first:
002127r 3  A0 08                        ldy #8          ; Offset in nt to name
002129r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
00212Br 3  D0 68                        bne @next_entry
00212Dr 3               
00212Dr 3                               ; string length are the same and the first character is the
00212Dr 3                               ; same. If the length of the string is 1, we're already done
00212Dr 3  B5 00                        lda 0,x
00212Fr 3  3A                           dec
002130r 3  F0 2C                        beq @success
002132r 3               
002132r 3                               ; No such luck: The strings are the same length and the first
002132r 3                               ; char is the same, but the word is more than one char long.
002132r 3                               ; So we suck it up and compare every single character. We go
002132r 3                               ; from back to front, because words like CELLS and CELL+ would
002132r 3                               ; take longer otherwise. We can also shorten the loop by one
002132r 3                               ; because we've already compared the first char.
002132r 3               
002132r 3                               ; The string of the word we're testing against is 8 bytes down
002132r 3  A5 rr                        lda tmp1
002134r 3  48                           pha             ; Preserve tmp1 on the return stack.
002135r 3  18                           clc
002136r 3  69 08                        adc #8
002138r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
00213Ar 3  A5 rr                        lda tmp1+1
00213Cr 3  48                           pha             ; Preserve tmp1+1 on the return stack.
00213Dr 3  69 00                        adc #0          ; we only need the carry
00213Fr 3  85 rr                        sta tmp1+1
002141r 3               
002141r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
002143r 3  88                           dey
002144r 3               
002144r 3               @string_loop:
002144r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
002146r 3               
002146r 3                               ; Lowercase the incoming charcter.
002146r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
002148r 3  B0 07                        bcs @check_char
00214Ar 3  C9 41                        cmp #$41        ; ASCII 'A'
00214Cr 3  90 03                        bcc @check_char
00214Er 3               
00214Er 3                               ; An uppercase letter has been located.  Make it
00214Er 3                               ; lowercase.
00214Er 3  18                           clc
00214Fr 3  69 20                        adc #$20
002151r 3               @check_char:
002151r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
002153r 3  D0 3A                        bne @next_entry_tmp1
002155r 3               
002155r 3  88                           dey
002156r 3  D0 EC                        bne @string_loop
002158r 3               
002158r 3               @success_tmp1:
002158r 3  68                           pla             ; Restore tmp1 from the return stack.
002159r 3  85 rr                        sta tmp1+1
00215Br 3  68                           pla
00215Cr 3  85 rr                        sta tmp1
00215Er 3               
00215Er 3               @success:
00215Er 3                               ; The strings match. Drop the count and put correct nt TOS
00215Er 3  E8                           inx
00215Fr 3  E8                           inx
002160r 3  A5 rr                        lda tmp1
002162r 3  95 00                        sta 0,x
002164r 3  A5 rr                        lda tmp1+1
002166r 3  95 01                        sta 1,x
002168r 3               
002168r 3                               ; Change the nt into an xt, but save a copy of the nt
002168r 3                               ; to look up whether the word is immediate or not.
002168r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
00216Br 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
00216Er 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
002171r 3               
002171r 3  A0 00                        ldy #0                  ; Prepare flag
002173r 3               
002173r 3                               ; The flags are in the second byte of the header
002173r 3  F6 00                        inc 0,x
002175r 3  D0 02                        bne @3
002177r 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
002179r 3               @3:
002179r 3  A1 00                        lda (0,x)               ; ( xt char )
00217Br 3  29 04                        and #IM
00217Dr 3  D0 08                        bne @immediate          ; bit set, we're immediate
00217Fr 3               
00217Fr 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
002181r 3  95 00                        sta 0,x
002183r 3  95 01                        sta 1,x
002185r 3  80 28                        bra @done_nodrop
002187r 3               
002187r 3               @immediate:
002187r 3  A9 01                        lda #1                  ; We're immediate, return 1
002189r 3  95 00                        sta 0,x
00218Br 3  74 01                        stz 1,x
00218Dr 3               
00218Dr 3  80 20                        bra @done_nodrop
00218Fr 3               
00218Fr 3               @next_entry_tmp1:
00218Fr 3  68                           pla             ; Restore tmp1 from the return stack.
002190r 3  85 rr                        sta tmp1+1
002192r 3  68                           pla
002193r 3  85 rr                        sta tmp1
002195r 3               @next_entry:
002195r 3                               ; Not the same, so we get the next word. Next header
002195r 3                               ; address is two bytes down
002195r 3  A0 02                        ldy #2
002197r 3  B1 rr                        lda (tmp1),y
002199r 3  48                           pha
00219Ar 3  C8                           iny
00219Br 3  B1 rr                        lda (tmp1),y
00219Dr 3  85 rr                        sta tmp1+1
00219Fr 3  68                           pla
0021A0r 3  85 rr                        sta tmp1
0021A2r 3               
0021A2r 3                               ; If we got a zero, we've walked the whole Dictionary and
0021A2r 3                               ; return as a failure, otherwise try again
0021A2r 3  05 rr                        ora tmp1+1
0021A4r 3  F0 03                        beq @fail_done
0021A6r 3  4C rr rr                     jmp @loop
0021A9r 3               
0021A9r 3               @fail_done:
0021A9r 3  74 02                        stz 2,x         ; failure flag
0021ABr 3  74 03                        stz 3,x
0021ADr 3               @done:
0021ADr 3  E8                           inx
0021AEr 3  E8                           inx
0021AFr 3               @done_nodrop:
0021AFr 3               z_search_wordlist:
0021AFr 3  60                           rts
0021B0r 3               
0021B0r 3               
0021B0r 3               
0021B0r 3               ; ## SEE ( "name" -- ) "Print information about a Forth word"
0021B0r 3               ; ## "see" tested  ANS tools
0021B0r 3                       ; """https://forth-standard.org/standard/tools/SEE
0021B0r 3                       ; SEE takes the name of a word and prints its name token (nt),
0021B0r 3                       ; execution token (xt), size in bytes, flags used, and then dumps the
0021B0r 3                       ; code and disassembles it.
0021B0r 3                       ; """
0021B0r 3               
0021B0r 3               xt_see:
0021B0r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
0021B3r 3  20 rr rr                     jsr xt_find_name        ; ( nt | 0 )
0021B6r 3               
0021B6r 3                               ; If we got back a zero we don't know that word and so we quit
0021B6r 3                               ; with an error
0021B6r 3  B5 00                        lda 0,x
0021B8r 3  15 01                        ora 1,x
0021BAr 3  D0 05                        bne @1
0021BCr 3               
0021BCr 3  A9 05                        lda #err_noname
0021BEr 3  4C rr rr                     jmp error
0021C1r 3               @1:
0021C1r 3  20 rr rr                     jsr xt_cr
0021C4r 3               
0021C4r 3                               ; We have a legal word, so let's get serious. Save the current
0021C4r 3                               ; number base and use hexadecimal instead.
0021C4r 3  A5 rr                        lda base
0021C6r 3  48                           pha
0021C7r 3  20 rr rr                     jsr xt_hex
0021CAr 3               
0021CAr 3  A9 0A                        lda #str_see_nt
0021CCr 3  20 rr rr                     jsr print_string_no_lf
0021CFr 3               
0021CFr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0021D2r 3  20 rr rr                     jsr xt_u_dot
0021D5r 3  20 rr rr                     jsr xt_space            ; ( nt )
0021D8r 3               
0021D8r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0021DBr 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
0021DEr 3               
0021DEr 3  A9 0B                        lda #str_see_xt
0021E0r 3  20 rr rr                     jsr print_string_no_lf
0021E3r 3               
0021E3r 3  20 rr rr                     jsr xt_dup              ; ( nt xt xt )
0021E6r 3  20 rr rr                     jsr xt_u_dot
0021E9r 3  20 rr rr                     jsr xt_cr               ; ( nt xt )
0021ECr 3               
0021ECr 3                               ; We print letters for flags and then later follow it with 1 or
0021ECr 3                               ; 0 to mark if which flag is set
0021ECr 3  A9 09                        lda #str_see_flags
0021EEr 3  20 rr rr                     jsr print_string_no_lf
0021F1r 3               
0021F1r 3  20 rr rr                     jsr xt_over             ; ( nt xt nt )
0021F4r 3  20 rr rr                     jsr xt_one_plus         ; ( nt xt nt+1 )
0021F7r 3  20 rr rr                     jsr xt_fetch            ; ( nt xt flags )
0021FAr 3               
0021FAr 3  B5 00                        lda 0,x
0021FCr 3               
0021FCr 3                               ; This is crude, but for the moment it is good enough
0021FCr 3  A0 06                        ldy #6                  ; Not all bits are used
0021FEr 3               @flag_loop:
0021FEr 3  48                           pha
0021FFr 3  29 01                        and #%00000001
002201r 3  18                           clc
002202r 3  69 30                        adc #$30                ; ASCII "0"
002204r 3  20 rr rr                     jsr emit_a
002207r 3  20 rr rr                     jsr xt_space
00220Ar 3               
00220Ar 3  68                           pla
00220Br 3  6A                           ror                     ; Next flag
00220Cr 3               
00220Cr 3  88                           dey
00220Dr 3  D0 EF                        bne @flag_loop
00220Fr 3               
00220Fr 3  20 rr rr                     jsr xt_cr
002212r 3               
002212r 3  E8                           inx
002213r 3  E8                           inx                     ; ( nt xt )
002214r 3               
002214r 3                               ; Figure out the size
002214r 3  A9 0C                        lda #str_see_size
002216r 3  20 rr rr                     jsr print_string_no_lf
002219r 3               
002219r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
00221Cr 3  20 rr rr                     jsr xt_wordsize         ; ( xt u )
00221Fr 3  20 rr rr                     jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
002222r 3  20 rr rr                     jsr xt_decimal
002225r 3  20 rr rr                     jsr xt_u_dot            ; ( xt u )
002228r 3  20 rr rr                     jsr xt_hex
00222Br 3  20 rr rr                     jsr xt_cr
00222Er 3               
00222Er 3                               ; Dump hex and disassemble
00222Er 3  20 rr rr                     jsr xt_two_dup          ; ( xt u xt u )
002231r 3  20 rr rr                     jsr xt_dump
002234r 3  20 rr rr                     jsr xt_cr
002237r 3  20 rr rr                     jsr xt_disasm
00223Ar 3               
00223Ar 3  68                           pla
00223Br 3  85 rr                        sta base
00223Dr 3               
00223Dr 3  60           z_see:          rts
00223Er 3               
00223Er 3               
00223Er 3               
00223Er 3               ; ## SET_CURRENT ( wid -- ) "Set the compilation wordlist"
00223Er 3               ; ## "set-current" auto ANS search
00223Er 3                       ; """https://forth-standard.org/standard/search/SET-CURRENT"""
00223Er 3               
00223Er 3               xt_set_current:
00223Er 3  20 rr rr                     jsr underflow_1
002241r 3               
002241r 3                               ; Save the value from the data stack.
002241r 3  A0 04                        ldy #current_offset
002243r 3  B5 00                        lda 0,x         ; CURRENT is byte variable
002245r 3  91 rr                        sta (up),y      ; so only the LSB is used.
002247r 3               
002247r 3  E8                           inx
002248r 3  E8                           inx
002249r 3               
002249r 3  60           z_set_current:  rts
00224Ar 3               
00224Ar 3               
00224Ar 3               
00224Ar 3               ; ## SET_ORDER ( wid_n .. wid_1 n -- ) "Set the current search order"
00224Ar 3               ; ## "set-order" auto ANS search
00224Ar 3                       ; """https://forth-standard.org/standard/search/SET-ORDER"""
00224Ar 3               
00224Ar 3               xt_set_order:
00224Ar 3                               ; Test for -1 TOS
00224Ar 3  A9 FF                        lda #$FF
00224Cr 3  D5 01                        cmp 1,x
00224Er 3  D0 12                        bne @start
002250r 3  D5 00                        cmp 0,x
002252r 3  D0 0E                        bne @start
002254r 3               
002254r 3                               ; There is a -1 TOS.  Replace it with the default
002254r 3                               ; search order, which is just the FORTH-WORDLIST.
002254r 3  CA                           dex             ; Make room for the count.
002255r 3  CA                           dex
002256r 3  74 03                        stz 3,x         ; ROOT-WORDLIST is 3
002258r 3  A9 03                        lda #3
00225Ar 3  95 02                        sta 2,x
00225Cr 3  74 01                        stz 1,x         ; Count is 1.
00225Er 3  A9 01                        lda #1
002260r 3  95 00                        sta 0,x
002262r 3               
002262r 3                               ; Continue processing with ( forth-wordlist 1 -- )
002262r 3               @start:
002262r 3                               ; Set #ORDER - the number of wordlists in the search order.
002262r 3  A0 1E                        ldy #num_order_offset
002264r 3  B5 00                        lda 0,x
002266r 3  91 rr                        sta (up),y      ; #ORDER is a byte variable.
002268r 3  85 rr                        sta tmp1        ; Save a copy for zero check and looping.
00226Ar 3                                               ; Only the low byte is saved in tmp1 as
00226Ar 3                                               ; only 8 wordlists are allowed.
00226Ar 3               
00226Ar 3  E8                           inx             ; Drop the count off the data stack.
00226Br 3  E8                           inx
00226Cr 3               
00226Cr 3                               ; Check if there are zero wordlists.
00226Cr 3  A5 rr                        lda tmp1
00226Er 3  F0 0D                        beq @done       ; If zero, there are no wordlists.
002270r 3               
002270r 3                               ; Move the wordlist ids from the data stack to the search order.
002270r 3  A0 1F                        ldy #search_order_offset
002272r 3               @loop:
002272r 3                               ; Move one wordlist id over into the search order.
002272r 3  B5 00                        lda 0,x         ; The search order is a byte array
002274r 3  91 rr                        sta (up),y      ; so only save the LSB
002276r 3  C8                           iny
002277r 3               
002277r 3                               ; Remove it from the data stack.
002277r 3  E8                           inx
002278r 3  E8                           inx
002279r 3               
002279r 3                               ; See if that was the last one to process (first in the list).
002279r 3  C6 rr                        dec tmp1
00227Br 3  D0 F5                        bne @loop
00227Dr 3               
00227Dr 3               @done:
00227Dr 3  60           z_set_order:    rts
00227Er 3               
00227Er 3               
00227Er 3               
00227Er 3               
00227Er 3               ; ## S_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
00227Er 3               ; ## "s""  auto  ANS core
00227Er 3                       ; """https://forth-standard.org/standard/core/Sq
00227Er 3                       ; Store address and length of string given, returning ( addr u ).
00227Er 3                       ; ANS core claims this is compile-only, but the file set expands it
00227Er 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
00227Er 3                       ; are evil. We follow general usage.
00227Er 3                       ;
00227Er 3                       ; Can also be realized as
00227Er 3                       ;     : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE
00227Er 3                       ; but it is used so much we want it in code.
00227Er 3                       ; """
00227Er 3               
00227Er 3               xt_s_quote:
00227Er 3                               ; tmp2 will be used to determine if we are handling
00227Er 3                               ; escaped characters or not.  In this case, we are
00227Er 3                               ; not, so set it to zero.
00227Er 3  64 rr                        stz tmp2
002280r 3  64 rr                        stz tmp2+1
002282r 3               
002282r 3               s_quote_start:
002282r 3                               ; Make room on the data stack for the address.
002282r 3  CA                           dex
002283r 3  CA                           dex
002284r 3                               ; Make room on the data stack for the count.
002284r 3  CA                           dex
002285r 3  CA                           dex
002286r 3               
002286r 3                               ; Put a jmp over the string data with address to be filled
002286r 3                               ; in later.
002286r 3  A9 4C                        lda #$4C
002288r 3  20 rr rr                     jsr cmpl_a
00228Br 3               
00228Br 3                               ; Address to be filled in later, just use $4C for the moment
00228Br 3  20 rr rr                     jsr cmpl_a
00228Er 3  20 rr rr                     jsr cmpl_a
002291r 3               
002291r 3                               ; Save the current value of HERE on the data stack for the
002291r 3                               ; address of the string.
002291r 3  A5 rr                        lda cp
002293r 3  95 02                        sta 2,x
002295r 3  A5 rr                        lda cp+1
002297r 3  95 03                        sta 3,x
002299r 3               
002299r 3               @savechars_loop:
002299r 3                               ; Start saving the string into the dictionary up to the
002299r 3                               ; ending double quote. First, check to see if the input
002299r 3                               ; buffer is empty.
002299r 3  A5 rr                        lda toin+1              ; MSB
00229Br 3  C5 rr                        cmp ciblen+1
00229Dr 3  90 2A                        bcc @input_fine         ; unsigned comparison
00229Fr 3               
00229Fr 3  A5 rr                        lda toin                ; LSB
0022A1r 3  C5 rr                        cmp ciblen
0022A3r 3  90 24                        bcc @input_fine
0022A5r 3               
0022A5r 3                               ; Input buffer is empty. Refill it. Refill calls accept,
0022A5r 3                               ; which uses tmp2 and tmp3. Save and restore them.
0022A5r 3  A5 rr                        lda tmp2
0022A7r 3  48                           pha
0022A8r 3  A5 rr                        lda tmp2+1
0022AAr 3  48                           pha
0022ABr 3  A5 rr                        lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
0022ADr 3  48                           pha
0022AEr 3               
0022AEr 3  20 rr rr                     jsr xt_refill           ; ( -- f )
0022B1r 3               
0022B1r 3  68                           pla
0022B2r 3  85 rr                        sta tmp3
0022B4r 3  68                           pla
0022B5r 3  85 rr                        sta tmp2+1
0022B7r 3  68                           pla
0022B8r 3  85 rr                        sta tmp2
0022BAr 3               
0022BAr 3                               ; Check result of refill.
0022BAr 3  B5 00                        lda 0,x
0022BCr 3  15 01                        ora 1,x
0022BEr 3  D0 05                        bne @refill_ok
0022C0r 3               
0022C0r 3                               ; Something when wrong with refill.
0022C0r 3  A9 06                        lda #err_refill
0022C2r 3  4C rr rr                     jmp error
0022C5r 3               
0022C5r 3               @refill_ok:
0022C5r 3                               ; Remove the refill flag from the data stack.
0022C5r 3  E8                           inx
0022C6r 3  E8                           inx
0022C7r 3               
0022C7r 3                               ; For refill success, jump back up to the empty check, just in
0022C7r 3                               ; case refill gave us an empty buffer (eg. empty/blank line of
0022C7r 3                               ; input)
0022C7r 3  80 D0                        bra @savechars_loop
0022C9r 3               
0022C9r 3               @input_fine:
0022C9r 3                               ; There should be at least one valid char to use.
0022C9r 3                               ; Calculate it's address at CIB+TOIN into tmp1
0022C9r 3  A5 rr                        lda cib
0022CBr 3  18                           clc
0022CCr 3  65 rr                        adc toin        ; LSB
0022CEr 3  85 rr                        sta tmp1
0022D0r 3  A5 rr                        lda cib+1
0022D2r 3  65 rr                        adc toin+1      ; MSB
0022D4r 3  85 rr                        sta tmp1+1
0022D6r 3               
0022D6r 3                               ; Get the character
0022D6r 3  B2 rr                        lda (tmp1)
0022D8r 3               
0022D8r 3                               ; Check to see if we are handling escaped characters.
0022D8r 3  24 rr                        bit tmp2
0022DAr 3  30 03                        bmi @handle_escapes    ; Only checking bit 7
0022DCr 3  4C rr rr                     jmp @regular_char
0022DFr 3               
0022DFr 3               @handle_escapes:
0022DFr 3                               ; We are handling escaped characters.  See if we have
0022DFr 3                               ; already seen the backslash.
0022DFr 3  24 rr                        bit tmp2+1
0022E1r 3  30 03                        bmi @escaped
0022E3r 3  4C rr rr                     jmp @not_escaped
0022E6r 3               
0022E6r 3               @escaped:
0022E6r 3               
0022E6r 3                               ; We have seen a backslash (previous character). Check to see if
0022E6r 3                               ; we are in the middle of a \x sequence (bit 6 of tmp2+1 will
0022E6r 3                               ; be clear in that case )
0022E6r 3  70 22                        bvs @check_esc_chars
0022E8r 3               
0022E8r 3                               ; We are in the middle of a \x sequence. Check to see if we
0022E8r 3                               ; are on the first or second digit.
0022E8r 3  A9 01                        lda #1
0022EAr 3  24 rr                        bit tmp2+1
0022ECr 3  D0 10                        bne @esc_x_second_digit
0022EEr 3               
0022EEr 3                               ; First digit.
0022EEr 3  E6 rr                        inc tmp2+1  ; Adjust flag for second digit next time.
0022F0r 3  B2 rr                        lda (tmp1)  ; Get the char again.
0022F2r 3               
0022F2r 3                               ; Convert to hex
0022F2r 3  20 rr rr                     jsr convert_hex_value
0022F5r 3               
0022F5r 3                               ; This is the upper nybble, so move it up.
0022F5r 3  0A                           asl
0022F6r 3  0A                           asl
0022F7r 3  0A                           asl
0022F8r 3  0A                           asl
0022F9r 3  85 rr                        sta tmp3    ; Save it for later.
0022FBr 3  4C rr rr                     jmp @next_character
0022FEr 3               
0022FEr 3               @esc_x_second_digit:
0022FEr 3               
0022FEr 3                               ; We are on the second hex digit of a \x sequence. Clear the
0022FEr 3                               ; escaped character flag (because we are handling it right
0022FEr 3                               ; here)
0022FEr 3  64 rr                        stz tmp2+1
002300r 3  B2 rr                        lda (tmp1)
002302r 3               
002302r 3                               ; Convert to hex, combine with value in tmp3
002302r 3  20 rr rr                     jsr convert_hex_value
002305r 3  05 rr                        ora tmp3
002307r 3               
002307r 3  4C rr rr                     jmp @save_character
00230Ar 3               
00230Ar 3               @check_esc_chars:
00230Ar 3                               ; Clear the escaped character flag (because we are
00230Ar 3                               ; handling it right here)
00230Ar 3  64 rr                        stz tmp2+1
00230Cr 3               
00230Cr 3                               ; Process the escaped character
00230Cr 3               @check_esc_a:
00230Cr 3  C9 61                        cmp #'a'
00230Er 3  D0 05                        bne @check_esc_b
002310r 3               
002310r 3                               ; BEL (ASCII value 7)
002310r 3  A9 07                        lda #7
002312r 3  4C rr rr                     jmp @save_character
002315r 3               
002315r 3               @check_esc_b:
002315r 3  C9 62                        cmp #'b'
002317r 3  D0 05                        bne @check_esc_e
002319r 3               
002319r 3                               ; Backspace (ASCII value 8)
002319r 3  A9 08                        lda #8
00231Br 3  4C rr rr                     jmp @save_character
00231Er 3               
00231Er 3               @check_esc_e:
00231Er 3  C9 65                        cmp #'e'
002320r 3  D0 04                        bne @check_esc_f
002322r 3               
002322r 3                               ; ESC (ASCII value 27)
002322r 3  A9 1B                        lda #27
002324r 3  80 75                        bra @save_character
002326r 3               
002326r 3               @check_esc_f:
002326r 3  C9 66                        cmp #'f'
002328r 3  D0 04                        bne @check_esc_l
00232Ar 3               
00232Ar 3                               ; FF (ASCII value 12)
00232Ar 3  A9 0C                        lda #12
00232Cr 3  80 6D                        bra @save_character
00232Er 3               
00232Er 3               @check_esc_l:
00232Er 3  C9 6C                        cmp #'l'
002330r 3  D0 04                        bne @check_esc_m
002332r 3               
002332r 3                               ; LF (ASCII value 10)
002332r 3  A9 0A                        lda #10
002334r 3  80 65                        bra @save_character
002336r 3               
002336r 3               @check_esc_m:
002336r 3                               ; This one is not like the others because we save two
002336r 3                               ; characters
002336r 3  C9 6D                        cmp #'m'
002338r 3  D0 09                        bne @check_esc_n
00233Ar 3               
00233Ar 3                               ; CR/LF pair (ASCII values 13, 10)
00233Ar 3  A9 0D                        lda #13
00233Cr 3  20 rr rr                     jsr cmpl_a
00233Fr 3  A9 0A                        lda #10
002341r 3  80 58                        bra @save_character
002343r 3               
002343r 3               @check_esc_n:
002343r 3  C9 6E                        cmp #'n'
002345r 3  D0 04                        bne @check_esc_q
002347r 3               
002347r 3                               ; newline, impl. dependant, using LF (ASCII values 10)
002347r 3  A9 0A                        lda #10
002349r 3  80 50                        bra @save_character
00234Br 3               
00234Br 3               @check_esc_q:
00234Br 3  C9 71                        cmp #'q'
00234Dr 3  D0 04                        bne @check_esc_r
00234Fr 3               
00234Fr 3                               ; Double quote (ASCII value 34)
00234Fr 3  A9 22                        lda #34
002351r 3  80 48                        bra @save_character
002353r 3               
002353r 3               @check_esc_r:
002353r 3  C9 72                        cmp #'r'
002355r 3  D0 04                        bne @check_esc_t
002357r 3               
002357r 3                               ; CR (ASCII value 13)
002357r 3  A9 0D                        lda #13
002359r 3  80 40                        bra @save_character
00235Br 3               
00235Br 3               @check_esc_t:
00235Br 3  C9 74                        cmp #'t'
00235Dr 3  D0 04                        bne @check_esc_v
00235Fr 3               
00235Fr 3                               ; Horizontal TAB (ASCII value 9)
00235Fr 3  A9 09                        lda #9
002361r 3  80 38                        bra @save_character
002363r 3               
002363r 3               @check_esc_v:
002363r 3  C9 76                        cmp #'v'
002365r 3  D0 04                        bne @check_esc_z
002367r 3               
002367r 3                               ; Vertical TAB (ASCII value 11)
002367r 3  A9 0B                        lda #11
002369r 3  80 30                        bra @save_character
00236Br 3               
00236Br 3               @check_esc_z:
00236Br 3  C9 7A                        cmp #'z'
00236Dr 3  D0 04                        bne @check_esc_quote
00236Fr 3               
00236Fr 3                               ; NULL (ASCII value 0)
00236Fr 3  A9 00                        lda #0
002371r 3  80 28                        bra @save_character
002373r 3               
002373r 3               @check_esc_quote:
002373r 3  C9 22                        cmp #$22
002375r 3  D0 04                        bne @check_esc_x
002377r 3               
002377r 3                               ; Double quote (ASCII value 34)
002377r 3  A9 22                        lda #34
002379r 3  80 20                        bra @save_character
00237Br 3               
00237Br 3               @check_esc_x:
00237Br 3  C9 78                        cmp #'x'
00237Dr 3  D0 06                        bne @check_esc_backslash
00237Fr 3               
00237Fr 3                               ; This one is difficult. We need to get the next TWO
00237Fr 3                               ; characters (which might require a refill in the middle)
00237Fr 3                               ; and combine them as two hex digits. We do this by
00237Fr 3                               ; clearing bit 6 of tmp2+1 to indicate we are in a digit
00237Fr 3                               ; and using bit 0 to keep track of which digit we are on.
00237Fr 3  A9 BE                        lda #$BE        ; Clear bits 6 and 0
002381r 3  85 rr                        sta tmp2+1
002383r 3  80 19                        bra @next_character
002385r 3               
002385r 3               @check_esc_backslash:
002385r 3  C9 5C                        cmp #$5C
002387r 3  D0 04                        bne @not_escaped
002389r 3               
002389r 3                               ; Backslash (ASCII value 92)
002389r 3  A9 5C                        lda #92
00238Br 3  80 0E                        bra @save_character
00238Dr 3               
00238Dr 3               @not_escaped:
00238Dr 3                               ; Check for the backslash to see if we should escape
00238Dr 3                               ; the next char.
00238Dr 3  C9 5C                        cmp #$5C        ; The backslash char
00238Fr 3  D0 06                        bne @regular_char
002391r 3               
002391r 3                               ; We found a backslash.  Don't save anyhing, but set
002391r 3                               ; a flag (in tmp2+1) to handle the next char. We don't
002391r 3                               ; try to get the next char here as it may require a
002391r 3                               ; refill of the input buffer.
002391r 3  A9 FF                        lda #$FF
002393r 3  85 rr                        sta tmp2+1
002395r 3  80 07                        bra @next_character
002397r 3               
002397r 3               @regular_char:
002397r 3                               ; Check if the current character is the end of the string.
002397r 3  C9 22                        cmp #$22        ; ASCII for "
002399r 3  F0 0C                        beq @found_string_end
00239Br 3               
00239Br 3               @save_character:
00239Br 3                               ; If we didn't reach the end of the string, compile this
00239Br 3                               ; character into the dictionary
00239Br 3  20 rr rr                     jsr cmpl_a
00239Er 3               
00239Er 3               @next_character:
00239Er 3                               ; Move on to the next character.
00239Er 3  E6 rr                        inc toin
0023A0r 3  D0 02                        bne @savechars_loop_longjump
0023A2r 3  E6 rr                        inc toin+1
0023A4r 3               
0023A4r 3               @savechars_loop_longjump:
0023A4r 3  4C rr rr                     jmp @savechars_loop
0023A7r 3               
0023A7r 3               @found_string_end:
0023A7r 3                               ; Use up the delimiter.
0023A7r 3  E6 rr                        inc toin
0023A9r 3  D0 02                        bne @1
0023ABr 3  E6 rr                        inc toin+1
0023ADr 3               @1:
0023ADr 3                               ; Calculate the length of the string, which is the
0023ADr 3                               ; difference between cp and the address of the start
0023ADr 3                               ; of the string (currently saved on the stack).
0023ADr 3  A5 rr                        lda cp
0023AFr 3  38                           sec
0023B0r 3  F5 02                        sbc 2,x
0023B2r 3  95 00                        sta 0,x         ; LSB
0023B4r 3  A5 rr                        lda cp+1
0023B6r 3  F5 03                        sbc 3,x
0023B8r 3  95 01                        sta 1,x         ; MSB
0023BAr 3               
0023BAr 3                               ; Update the address of the jump-over jmp instruction.
0023BAr 3                               ; First determine location of jmp instructions address.
0023BAr 3                               ; It should be 2 bytes before the start of the string.
0023BAr 3                               ; Compute it into tmp1, which is no longer being used.
0023BAr 3  B5 02                        lda 2,x
0023BCr 3  38                           sec
0023BDr 3  E9 02                        sbc #2
0023BFr 3  85 rr                        sta tmp1
0023C1r 3  B5 03                        lda 3,x
0023C3r 3  E9 00                        sbc #0          ; Propagate borrow
0023C5r 3  85 rr                        sta tmp1+1
0023C7r 3               
0023C7r 3                               ; Update the address of the jump to HERE.
0023C7r 3  A5 rr                        lda cp
0023C9r 3  92 rr                        sta (tmp1)
0023CBr 3  A0 01                        ldy #1
0023CDr 3  A5 rr                        lda cp+1
0023CFr 3  91 rr                        sta (tmp1),y
0023D1r 3               
0023D1r 3                               ; What happens next depends on the state (which is bad, but
0023D1r 3                               ; that's the way it works at the moment). If we are
0023D1r 3                               ; interpretating, we save the string to a transient buffer
0023D1r 3                               ; and return that address (used for file calls, see
0023D1r 3                               ; https://forth-standard.org/standard/file/Sq . If we're
0023D1r 3                               ; compiling, we just need SLITERAL
0023D1r 3  A5 rr                        lda state
0023D3r 3  05 rr                        ora state+1             ; paranoid
0023D5r 3  F0 03                        beq @done
0023D7r 3               
0023D7r 3                               ; Jump into the middle of the sliteral word, after the
0023D7r 3                               ; string data has been compiled into the dictionary,
0023D7r 3                               ; because we've already done that step.
0023D7r 3  20 rr rr                     jsr sliteral_const_str         ; ( addr u -- )
0023DAr 3               
0023DAr 3               @done:
0023DAr 3  60           z_s_quote:      rts
0023DBr 3               
0023DBr 3               
0023DBr 3               
0023DBr 3               ; ## S_TO_D ( u -- d ) "Convert single cell number to double cell"
0023DBr 3               ; ## "s>d"  auto  ANS core
0023DBr 3                       ; """https://forth-standard.org/standard/core/StoD"""
0023DBr 3               
0023DBr 3               xt_s_to_d:
0023DBr 3  20 rr rr                     jsr underflow_1
0023DEr 3               
0023DEr 3  CA                           dex
0023DFr 3  CA                           dex
0023E0r 3  74 00                        stz 0,x
0023E2r 3  74 01                        stz 1,x
0023E4r 3               
0023E4r 3  B5 03                        lda 3,x
0023E6r 3  10 04                        bpl @done
0023E8r 3               
0023E8r 3                               ; negative, extend sign
0023E8r 3  D6 00                        dec 0,x
0023EAr 3  D6 01                        dec 1,x
0023ECr 3               @done:
0023ECr 3  60           z_s_to_d:       rts
0023EDr 3               
0023EDr 3               
0023EDr 3               
0023EDr 3               ; ## SAVE_BUFFERS ( -- ) "Save all dirty buffers to storage"
0023EDr 3               ; ## "save-buffers"  tested  ANS block
0023EDr 3                       ; """https://forth-standard.org/standard/block/SAVE-BUFFERS"""
0023EDr 3               
0023EDr 3               xt_save_buffers:
0023EDr 3                               ; Check the buffer status
0023EDr 3  A0 2C                        ldy #buffstatus_offset
0023EFr 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
0023F1r 3  C9 03                        cmp #3          ; LSB is needed.
0023F3r 3  D0 12                        bne @done       ; Either not used or not dirty = done!
0023F5r 3               
0023F5r 3                               ; We need to save the block.
0023F5r 3  20 rr rr                     jsr xt_blkbuffer
0023F8r 3  20 rr rr                     jsr xt_buffblocknum
0023FBr 3  20 rr rr                     jsr xt_fetch
0023FEr 3  20 rr rr                     jsr xt_block_write
002401r 3               
002401r 3                               ; Mark the buffer as clean now.
002401r 3  A9 01                        lda #1
002403r 3  A0 2C                        ldy #buffstatus_offset
002405r 3  91 rr                        sta (up),y
002407r 3               
002407r 3               @done:
002407r 3  60           z_save_buffers: rts
002408r 3               
002408r 3               
002408r 3               
002408r 3               ; ## SCR ( -- addr ) "Push address of variable holding last screen listed"
002408r 3               ; ## "scr"  auto  ANS block ext
002408r 3                       ; """https://forth-standard.org/standard/block/SCR"""
002408r 3               xt_scr:
002408r 3                               ; SCR is at UP + scr_offset
002408r 3  CA                           dex
002409r 3  CA                           dex
00240Ar 3  18                           clc
00240Br 3  A5 rr                        lda up
00240Dr 3  69 02                        adc #scr_offset ; Add offset
00240Fr 3  95 00                        sta 0,x
002411r 3  A5 rr                        lda up+1
002413r 3  69 00                        adc #0          ; Adding carry
002415r 3  95 01                        sta 1,x
002417r 3               
002417r 3  60           z_scr:          rts
002418r 3               
002418r 3               
002418r 3               ; ## SEARCH ( addr1 u1 addr2 u2 -- addr3 u3 flag) "Search for a substring"
002418r 3               ; ## "search"   auto  ANS string
002418r 3                       ; """https://forth-standard.org/standard/string/SEARCH
002418r 3                       ; Search for string2 (denoted by addr2 u2) in string1 (denoted by
002418r 3                       ; addr1 u1). If a match is found the flag will be true and
002418r 3                       ; addr3 will have the address of the start of the match and u3 will have
002418r 3                       ; the number of characters remaining from the match point to the end
002418r 3                       ; of the original string1. If a match is not found, the flag will be
002418r 3                       ; false and addr3 and u3 will be the original string1's addr1 and u1.
002418r 3                       ; """
002418r 3               
002418r 3               xt_search:
002418r 3  20 rr rr                     jsr underflow_4
00241Br 3               
00241Br 3                               ; ANS says if the second string is a zero-length string it
00241Br 3                               ; automatically matches.
00241Br 3  B5 00                        lda 0,x
00241Dr 3  15 01                        ora 1,x
00241Fr 3  D0 0B                        bne @start_search
002421r 3               
002421r 3                               ; The second string is a zero length string.  Just remove
002421r 3                               ; the second string and put a true flag.
002421r 3  E8                           inx             ; Remove u2
002422r 3  E8                           inx
002423r 3  A9 FF                        lda #$FF        ; Turn addr2 into a true flag
002425r 3  95 00                        sta 0,x
002427r 3  95 01                        sta 1,x
002429r 3  4C rr rr                     jmp z_search
00242Cr 3               
00242Cr 3               @start_search:
00242Cr 3                               ; Put an offset (starting at zero) on the stack.
00242Cr 3  20 rr rr                     jsr xt_zero
00242Fr 3               
00242Fr 3               @search_loop:
00242Fr 3                               ; We stop (not found) when u2 + offset > u1
00242Fr 3                               ; Calculate u2+offset into tmp1
00242Fr 3  18                           clc
002430r 3  B5 00                        lda 0,x
002432r 3  75 02                        adc 2,x
002434r 3  85 rr                        sta tmp1
002436r 3  B5 01                        lda 1,x
002438r 3  75 03                        adc 3,x
00243Ar 3               
00243Ar 3               
00243Ar 3                               ; Compare to u1. Start with the high byte
00243Ar 3  D5 07                        cmp 7,x
00243Cr 3  90 12                        bcc @init_comparison ; Obviously less
00243Er 3  D0 06                        bne @not_found
002440r 3               
002440r 3                               ; The upper address byte matched - check the lower byte
002440r 3                               ; Load u1 first so we can use just a carry to check.
002440r 3  B5 06                        lda 6,x
002442r 3  C5 rr                        cmp tmp1
002444r 3  B0 0A                        bcs @init_comparison
002446r 3               
002446r 3               @not_found:
002446r 3                               ; The substring isn't in the main string.
002446r 3                               ; Return just the main string and a false flag.
002446r 3  E8                           inx             ; Remove offset
002447r 3  E8                           inx
002448r 3  E8                           inx             ; Remove u2
002449r 3  E8                           inx
00244Ar 3  74 00                        stz 0,x         ; Turn addr2 into a false flag
00244Cr 3  74 01                        stz 1,x
00244Er 3  80 66                        bra z_search
002450r 3               
002450r 3               @init_comparison:
002450r 3                               ; Use tmp1 to hold address in string 1.
002450r 3                               ; Use tmp2 to hold address in string 2.
002450r 3                               ; Use tmp3 to hold the number of characters left to check.
002450r 3               
002450r 3                               ; Compute the starting address in string 1
002450r 3                               ; as addr1 + offset
002450r 3  18                           clc
002451r 3  B5 08                        lda 8,x
002453r 3  75 00                        adc 0,x
002455r 3  85 rr                        sta tmp1
002457r 3  B5 09                        lda 9,x
002459r 3  75 01                        adc 1,x
00245Br 3  85 rr                        sta tmp1+1
00245Dr 3               
00245Dr 3                               ; The starting address in string 2 is just addr2.
00245Dr 3  B5 04                        lda 4,x
00245Fr 3  85 rr                        sta tmp2
002461r 3  B5 05                        lda 5,x
002463r 3  85 rr                        sta tmp2+1
002465r 3               
002465r 3                               ; The number of characters to check is u2.
002465r 3  B5 02                        lda 2,x
002467r 3  85 rr                        sta tmp3
002469r 3  B5 03                        lda 3,x
00246Br 3  85 rr                        sta tmp3+1
00246Dr 3               
00246Dr 3               @comparison_loop:
00246Dr 3                               ; Check to see if the current characters match.
00246Dr 3  B2 rr                        lda (tmp1)
00246Fr 3  D2 rr                        cmp (tmp2)
002471r 3  F0 05                        beq @letters_match
002473r 3               
002473r 3                               ; One of the letters didn't match.
002473r 3                               ; Increment the offset and try again.
002473r 3  20 rr rr                     jsr xt_one_plus
002476r 3  80 B7                        bra @search_loop
002478r 3               
002478r 3               @letters_match:
002478r 3                               ; The letters match.  Advance the pointers until the
002478r 3                               ; count reaches zero.
002478r 3  E6 rr                        inc tmp1
00247Ar 3  D0 02                        bne @1
00247Cr 3  E6 rr                        inc tmp1+1
00247Er 3               @1:
00247Er 3  E6 rr                        inc tmp2
002480r 3  D0 02                        bne @2
002482r 3  E6 rr                        inc tmp2+1
002484r 3               @2:
002484r 3                               ; Decrement the count of remaining letters to check.
002484r 3  A5 rr                        lda tmp3
002486r 3  D0 02                        bne @3
002488r 3  C6 rr                        dec tmp3+1
00248Ar 3               @3:
00248Ar 3  C6 rr                        dec tmp3
00248Cr 3               
00248Cr 3                               ; Check if we've reached zero.
00248Cr 3  A5 rr                        lda tmp3
00248Er 3  05 rr                        ora tmp3+1
002490r 3  D0 DB                        bne @comparison_loop ; Check the next letter
002492r 3               
002492r 3                               ; We've run out of letters and they all match!
002492r 3                               ; Return (addr1+offset) (u1-offset) true
002492r 3                               ; Add offset to addr1.
002492r 3  18                           clc
002493r 3  B5 00                        lda 0,x
002495r 3  75 08                        adc 8,x
002497r 3  95 08                        sta 8,x
002499r 3  B5 01                        lda 1,x
00249Br 3  75 09                        adc 9,x
00249Dr 3  95 09                        sta 9,x
00249Fr 3               
00249Fr 3                               ; Subtract offset from u1.
00249Fr 3  38                           sec
0024A0r 3  B5 06                        lda 6,x
0024A2r 3  F5 00                        sbc 0,x
0024A4r 3  95 06                        sta 6,x
0024A6r 3  B5 07                        lda 7,x
0024A8r 3  F5 01                        sbc 1,x
0024AAr 3  95 07                        sta 7,x
0024ACr 3               
0024ACr 3                               ; Replace addr2, u2, and offset with a true flag.
0024ACr 3  E8                           inx             ; drop offset
0024ADr 3  E8                           inx
0024AEr 3  E8                           inx             ; drop u2
0024AFr 3  E8                           inx
0024B0r 3  A9 FF                        lda #$FF
0024B2r 3  95 00                        sta 0,x         ; Turn addr2 into a true flag.
0024B4r 3  95 01                        sta 1,x
0024B6r 3               
0024B6r 3  60           z_search:       rts
0024B7r 3               
0024B7r 3               
0024B7r 3               
0024B7r 3               ; ## SEMICOLON ( -- ) "End compilation of new word"
0024B7r 3               ; ## ";"  auto  ANS core
0024B7r 3                       ; """https://forth-standard.org/standard/core/Semi
0024B7r 3                       ; End the compilation of a new word into the Dictionary.
0024B7r 3                       ;
0024B7r 3                       ; When we
0024B7r 3                       ; enter this, WORKWORD is pointing to the nt_ of this word in the
0024B7r 3                       ; Dictionary, DP to the previous word, and CP to the next free byte.
0024B7r 3                       ; A Forth definition would be (see "Starting Forth"):
0024B7r 3                       ; : POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE  Following the
0024B7r 3                       ; practice of Gforth, we warn here if a word has been redefined.
0024B7r 3                       ; """
0024B7r 3               
0024B7r 3               xt_semicolon:
0024B7r 3                               ; Check if this is a : word or a :NONAME word.
0024B7r 3  24 rr                        bit status
0024B9r 3  70 11                        bvs @colonword
0024BBr 3               
0024BBr 3                               ; This is a :NONAME word - just put an RTS on the end and
0024BBr 3                               ; the address (held in workword) on the stack.
0024BBr 3  A9 60                        lda #$60                ; opcode for RTS
0024BDr 3  20 rr rr                     jsr cmpl_a
0024C0r 3               
0024C0r 3  CA                           dex
0024C1r 3  CA                           dex
0024C2r 3  A5 rr                        lda workword
0024C4r 3  95 00                        sta 0,x
0024C6r 3  A5 rr                        lda workword+1
0024C8r 3  95 01                        sta 1,x
0024CAr 3  80 45                        bra @semicolon_done
0024CCr 3               
0024CCr 3               @colonword:
0024CCr 3                               ; CP is the byte that will be the address we use in the
0024CCr 3                               ; header as the end-of-compile address (z_word). This is
0024CCr 3                               ; six bytes down from the header
0024CCr 3  A0 06                        ldy #6
0024CEr 3  A5 rr                        lda cp
0024D0r 3  91 rr                        sta (workword),y
0024D2r 3  C8                           iny
0024D3r 3  A5 rr                        lda cp+1
0024D5r 3  91 rr                        sta (workword),y
0024D7r 3               
0024D7r 3                               ; Allocate one further byte and save the RTS instruction
0024D7r 3                               ; there
0024D7r 3  A9 60                        lda #$60                ; opcode for RTS
0024D9r 3  20 rr rr                     jsr cmpl_a
0024DCr 3               
0024DCr 3                               ; Before we formally add the word to the Dictionary, we
0024DCr 3                               ; check to see if it is already present, and if yes, we
0024DCr 3                               ; warn the user.
0024DCr 3               
0024DCr 3                               ; See if word already in Dictionary.
0024DCr 3                               ; (STATUS bit 7 will be high as CREATE already
0024DCr 3                               ;  checked for us.)
0024DCr 3  24 rr                        bit status
0024DEr 3  10 26                        bpl @new_word   ; Bit 7 is clear = new word
0024E0r 3               
0024E0r 3                               ; We start by putting the string of the
0024E0r 3                               ; word we're defining on the stack
0024E0r 3  CA                           dex
0024E1r 3  CA                           dex
0024E2r 3  CA                           dex
0024E3r 3  CA                           dex
0024E4r 3               
0024E4r 3                               ; WORKWORD points to the beginning of the head of our new
0024E4r 3                               ; word, where the first byte is the length of the string
0024E4r 3                               ; We can't use LATESTNT because we haven't added the new
0024E4r 3                               ; word to the Dictionary yet
0024E4r 3  B2 rr                        lda (workword)
0024E6r 3  95 00                        sta 0,x
0024E8r 3  74 01                        stz 1,x
0024EAr 3               
0024EAr 3                               ; Eight bytes below WORKWORD is the actual beginning of
0024EAr 3                               ; the string
0024EAr 3  A5 rr                        lda workword
0024ECr 3  18                           clc
0024EDr 3  69 08                        adc #8
0024EFr 3  95 02                        sta 2,x
0024F1r 3  A5 rr                        lda workword+1
0024F3r 3  69 00                        adc #0                  ; only want carry
0024F5r 3  95 03                        sta 3,x
0024F7r 3               
0024F7r 3                               ; This word is already in the Dictionary, so we print a
0024F7r 3                               ; warning to the user.
0024F7r 3  A9 02                        lda #str_redefined       ; address of string "redefined"
0024F9r 3  20 rr rr                     jsr print_string_no_lf
0024FCr 3               
0024FCr 3                               ; Now we print the offending word.
0024FCr 3  20 rr rr                     jsr xt_type
0024FFr 3  20 rr rr                     jsr xt_space
002502r 3               
002502r 3                               ; Clear bit 7 of status (so future words will print message
002502r 3                               ; by defaut)
002502r 3  A9 80                        lda #%10000000
002504r 3  14 rr                        trb status
002506r 3               
002506r 3               @new_word:
002506r 3                               ; Let's get this over with. Save beginning of our word
002506r 3                               ; as new last word in the Dictionary
002506r 3  A5 rr                        lda workword
002508r 3  85 rr                        sta dp
00250Ar 3  A5 rr                        lda workword+1
00250Cr 3  85 rr                        sta dp+1
00250Er 3  20 rr rr                     jsr dp_to_current       ; Save the updated DP to the
002511r 3                                                       ; CURRENT wordlist.
002511r 3               @semicolon_done:
002511r 3                               ; Word definition complete. Return compile flag to zero
002511r 3                               ; to return to interpret mode
002511r 3  64 rr                        stz state
002513r 3  64 rr                        stz state+1
002515r 3               
002515r 3  60           z_semicolon:    rts
002516r 3               
002516r 3               
002516r 3               
002516r 3               ; ## SIGN ( n -- ) "Add minus to pictured output"
002516r 3               ; ## "sign"  auto  ANS core
002516r 3                       ; """https://forth-standard.org/standard/core/SIGN
002516r 3                       ;
002516r 3                       ; Code based on
002516r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
002516r 3                       ; Original Forth code is   0< IF ASCII - HOLD THEN
002516r 3                       ; """
002516r 3               
002516r 3               xt_sign:
002516r 3  20 rr rr                     jsr underflow_1
002519r 3               
002519r 3  B5 01                        lda 1,x         ; check MSB of TOS
00251Br 3  30 04                        bmi @minus
00251Dr 3               
00251Dr 3  E8                           inx
00251Er 3  E8                           inx
00251Fr 3  80 09                        bra @done
002521r 3               @minus:
002521r 3  A9 2D                        lda #$2D        ; ASCII for "-"
002523r 3  95 00                        sta 0,x         ; overwrite TOS
002525r 3  74 01                        stz 1,x         ; paranoid
002527r 3               
002527r 3  20 rr rr                     jsr xt_hold
00252Ar 3               @done:
00252Ar 3  60           z_sign:         rts
00252Br 3               
00252Br 3               
00252Br 3               
00252Br 3               ; ## SLASH ( n1 n2 -- n ) "Divide NOS by TOS"
00252Br 3               ; ## "/"  auto  ANS core
00252Br 3                       ; """https://forth-standard.org/standard/core/Div
00252Br 3                       ;
00252Br 3                       ; Forth code is either  >R S>D R> FM/MOD SWAP DROP
00252Br 3                       ; or >R S>D R> SM/REM SWAP DROP -- we use SM/REM in Tali Forth.
00252Br 3                       ; This code is currently unoptimized. This code without the SLASH
00252Br 3                       ; DROP at the end is /MOD, so we share the code as far as possible.
00252Br 3                       ; """
00252Br 3               
00252Br 3               xt_slash:
00252Br 3                               ; With all the multiplication going on, it would be hard to
00252Br 3                               ; make sure that one of our temporary variables is not
00252Br 3                               ; overwritten. We make sure that doesn't happen by taking the
00252Br 3                               ; hit of pushing the flag to the 65c02's stack
00252Br 3  A9 00                        lda #0
00252Dr 3  48                           pha
00252Er 3  80 03                        bra _common
002530r 3               
002530r 3               xt_slash_mod:
002530r 3                               ; Note that /MOD accesses this code
002530r 3  A9 FF                        lda #$FF
002532r 3  48                           pha             ; falls through to _common
002533r 3               
002533r 3               _common:
002533r 3  20 rr rr                     jsr xt_to_r             ; >R
002536r 3  20 rr rr                     jsr xt_s_to_d           ; S>D
002539r 3  20 rr rr                     jsr xt_r_from           ; R>
00253Cr 3  20 rr rr                     jsr xt_sm_slash_rem     ; SM/REM
00253Fr 3               
00253Fr 3                               ; Get the flag back from the 65c02's stack. Zero is SLASH,
00253Fr 3                               ; $FF is SLASH MOD
00253Fr 3  68                           pla
002540r 3  D0 05                        bne @done
002542r 3               
002542r 3                               ; The following code is for SLASH only
002542r 3  20 rr rr                     jsr xt_swap
002545r 3  E8                           inx             ; DROP
002546r 3  E8                           inx
002547r 3               @done:
002547r 3               z_slash_mod:
002547r 3  60           z_slash:        rts
002548r 3               
002548r 3               
002548r 3               
002548r 3               ; ## SLASH_MOD ( n1 n2 -- n3 n4 ) "Divide NOS by TOS with a remainder"
002548r 3               ; ## "/mod"  auto  ANS core
002548r 3                       ; """https://forth-standard.org/standard/core/DivMOD
002548r 3                       ;
002548r 3                       ; This is a dummy entry, the actual code is shared with SLASH
002548r 3                       ; """
002548r 3               
002548r 3               
002548r 3               ; ## SLASH_STRING ( addr u n -- addr u ) "Shorten string by n"
002548r 3               ; ## "/string"  auto  ANS string
002548r 3                       ; """https://forth-standard.org/standard/string/DivSTRING
002548r 3                       ;
002548r 3                       ; Forth code is
002548r 3                       ; : /STRING ( ADDR U N -- ADDR U ) ROT OVER + ROT ROT - ;
002548r 3                       ; Put differently, we need to add TOS and 3OS, and subtract
002548r 3                       ; TOS from NOS, and then drop TOS
002548r 3                       ; """
002548r 3               
002548r 3               xt_slash_string:
002548r 3  20 rr rr                     jsr underflow_3
00254Br 3               
00254Br 3  18                           clc             ; 3OS+TOS
00254Cr 3  B5 00                        lda 0,x
00254Er 3  75 04                        adc 4,x
002550r 3  95 04                        sta 4,x
002552r 3               
002552r 3  B5 01                        lda 1,x
002554r 3  75 05                        adc 5,x
002556r 3  95 05                        sta 5,x
002558r 3               
002558r 3  38                           sec             ; NOS-TOS
002559r 3  B5 02                        lda 2,x
00255Br 3  F5 00                        sbc 0,x
00255Dr 3  95 02                        sta 2,x
00255Fr 3               
00255Fr 3  B5 03                        lda 3,x
002561r 3  F5 01                        sbc 1,x
002563r 3  95 03                        sta 3,x
002565r 3               
002565r 3  E8                           inx
002566r 3  E8                           inx
002567r 3               
002567r 3  60           z_slash_string: rts
002568r 3               
002568r 3               
002568r 3               
002568r 3               ; ## SLITERAL ( addr u -- )( -- addr u ) "Compile a string for runtime"
002568r 3               ; ## "sliteral" auto  ANS string
002568r 3                       ; """https://forth-standard.org/standard/string/SLITERAL
002568r 3                       ; Add the runtime for an existing string.
002568r 3                       ; """
002568r 3               
002568r 3               xt_sliteral:
002568r 3  20 rr rr                     jsr underflow_2
00256Br 3               
00256Br 3                               ; We can't assume that ( addr u ) of the current string is in
00256Br 3                               ; a stable area (eg. already in the dictionary.) Copy the
00256Br 3                               ; string data into the dictionary using move.
00256Br 3               
00256Br 3                               ; Put a jmp over the string data with address to be filled
00256Br 3                               ; in later.
00256Br 3  A9 4C                        lda #$4C
00256Dr 3  20 rr rr                     jsr cmpl_a
002570r 3               
002570r 3                               ; Address to be filled in later.
002570r 3  20 rr rr                     jsr cmpl_a
002573r 3  20 rr rr                     jsr cmpl_a
002576r 3               
002576r 3                               ; Turn the data stack from ( addr u ) into
002576r 3                               ; ( here u addr here u ) so move can be called with
002576r 3                               ; the remaining items on the stack ready for processing.
002576r 3                               ; Reserve three extra words on the stack.
002576r 3  8A                           txa
002577r 3  38                           sec
002578r 3  E9 06                        sbc #6
00257Ar 3  AA                           tax
00257Br 3               
00257Br 3                               ; Move addr down from TOS-4 to TOS-2
00257Br 3  B5 08                        lda 8,x
00257Dr 3  95 04                        sta 4,x
00257Fr 3  B5 09                        lda 9,x
002581r 3  95 05                        sta 5,x
002583r 3               
002583r 3                               ; Copy u from TOS-3 to TOS
002583r 3  B5 06                        lda 6,x
002585r 3  95 00                        sta 0,x
002587r 3  B5 07                        lda 7,x
002589r 3  95 01                        sta 1,x
00258Br 3               
00258Br 3                               ; Put HERE into TOS-1 and TOS-4
00258Br 3  A5 rr                        lda cp
00258Dr 3  95 08                        sta 8,x
00258Fr 3  95 02                        sta 2,x
002591r 3  A5 rr                        lda cp+1
002593r 3  95 09                        sta 9,x
002595r 3  95 03                        sta 3,x
002597r 3               
002597r 3                               ; Copy the string into the dictionary.
002597r 3  20 rr rr                     jsr xt_move
00259Ar 3               
00259Ar 3                               ; Update cp.
00259Ar 3  18                           clc
00259Br 3  A5 rr                        lda cp
00259Dr 3  75 00                        adc 0,x
00259Fr 3  85 rr                        sta cp
0025A1r 3  A5 rr                        lda cp+1
0025A3r 3  75 01                        adc 1,x
0025A5r 3  85 rr                        sta cp+1
0025A7r 3               
0025A7r 3                               ; Update the address of the jump-over jmp instruction.
0025A7r 3                               ; First determine location of jmp instructions address.
0025A7r 3                               ; It should be 2 bytes before the start of the string.
0025A7r 3               
0025A7r 3                               ; Compute it into tmp1, which is no longer being used.
0025A7r 3  B5 02                        lda 2,x
0025A9r 3  38                           sec
0025AAr 3  E9 02                        sbc #2
0025ACr 3  85 rr                        sta tmp1
0025AEr 3  B5 03                        lda 3,x
0025B0r 3  E9 00                        sbc #0          ; Propagate borrow
0025B2r 3  85 rr                        sta tmp1+1
0025B4r 3               
0025B4r 3                               ; Update the address of the jump to HERE.
0025B4r 3  A5 rr                        lda cp
0025B6r 3  92 rr                        sta (tmp1)
0025B8r 3  A0 01                        ldy #1
0025BAr 3  A5 rr                        lda cp+1
0025BCr 3  91 rr                        sta (tmp1),y
0025BEr 3               
0025BEr 3                               ; Stack is now ( addr2 u ) where addr2 is the new
0025BEr 3                               ; location in the dictionary.
0025BEr 3               
0025BEr 3               sliteral_const_str:
0025BEr 3                               ; Compile a subroutine jump to the runtime of SLITERAL that
0025BEr 3                               ; pushes the new ( addr u ) pair to the Data Stack.
0025BEr 3                               ; When we're done, the code will look like this:
0025BEr 3               
0025BEr 3                               ; xt -->    jmp a
0025BEr 3                               ;           <string data bytes>
0025BEr 3                               ;  a -->    jsr sliteral_runtime
0025BEr 3                               ;           <string address>
0025BEr 3                               ;           <string length>
0025BEr 3                               ; rts -->
0025BEr 3               
0025BEr 3                               ; This means we'll have to adjust the return address for two
0025BEr 3                               ; cells, not just one
0025BEr 3  A0 rr                        ldy #>sliteral_runtime
0025C0r 3  A9 rr                        lda #<sliteral_runtime
0025C2r 3  20 rr rr                     jsr cmpl_subroutine
0025C5r 3               
0025C5r 3                               ; We want to have the address end up as NOS and the length
0025C5r 3                               ; as TOS, so we store the address first
0025C5r 3  B4 03                        ldy 3,x                ; address MSB
0025C7r 3  B5 02                        lda 2,x                ; address LSB
0025C9r 3  20 rr rr                     jsr cmpl_word
0025CCr 3               
0025CCr 3  B4 01                        ldy 1,x                ; length MSB
0025CEr 3  B5 00                        lda 0,x                ; length LSB
0025D0r 3  20 rr rr                     jsr cmpl_word
0025D3r 3               
0025D3r 3                               ; clean up and leave
0025D3r 3  E8                           inx
0025D4r 3  E8                           inx
0025D5r 3  E8                           inx
0025D6r 3  E8                           inx
0025D7r 3               
0025D7r 3  60           z_sliteral:     rts
0025D8r 3               
0025D8r 3               
0025D8r 3               sliteral_runtime:
0025D8r 3               
0025D8r 3                       ; """Run time behaviour of SLITERAL: Push ( addr u ) of string to
0025D8r 3                       ; the Data Stack. We arrive here with the return address as the
0025D8r 3                       ; top of Return Stack, which points to the address of the string
0025D8r 3                       ; """
0025D8r 3  CA                           dex
0025D9r 3  CA                           dex
0025DAr 3  CA                           dex
0025DBr 3  CA                           dex
0025DCr 3               
0025DCr 3                               ; Get the address of the string address off the stack and
0025DCr 3                               ; increase by one because of the RTS mechanics
0025DCr 3  68                           pla
0025DDr 3  85 rr                        sta tmp1        ; LSB of address
0025DFr 3  68                           pla
0025E0r 3  85 rr                        sta tmp1+1      ; MSB of address
0025E2r 3               
0025E2r 3                               ; Walk through both and save them
0025E2r 3  A0 01                        ldy #1          ; adjust for JSR/RTS mechanics on 65c02
0025E4r 3  B1 rr                        lda (tmp1),y
0025E6r 3  95 02                        sta 2,x         ; LSB of address
0025E8r 3  C8                           iny
0025E9r 3               
0025E9r 3  B1 rr                        lda (tmp1),y
0025EBr 3  95 03                        sta 3,x         ; MSB of address
0025EDr 3  C8                           iny
0025EEr 3               
0025EEr 3  B1 rr                        lda (tmp1),y
0025F0r 3  95 00                        sta 0,x         ; LSB of length
0025F2r 3  C8                           iny
0025F3r 3               
0025F3r 3  B1 rr                        lda (tmp1),y
0025F5r 3  95 01                        sta 1,x         ; MSB of length
0025F7r 3               
0025F7r 3                               ; restore return address
0025F7r 3  18                           clc
0025F8r 3  A5 rr                        lda tmp1
0025FAr 3  69 04                        adc #4
0025FCr 3  A8                           tay             ; LSB
0025FDr 3  A5 rr                        lda tmp1+1
0025FFr 3  69 00                        adc #0          ; we only need carry
002601r 3  48                           pha             ; MSB
002602r 3  5A                           phy
002603r 3               
002603r 3  60                           rts
002604r 3               
002604r 3               
002604r 3               
002604r 3               ; ## SM_SLASH_REM ( d n1 -- n2 n3 ) "Symmetic signed division"
002604r 3               ; ## "sm/rem"  auto  ANS core
002604r 3                       ; """https://forth-standard.org/standard/core/SMDivREM
002604r 3                       ; Symmetic signed division. Compare FM/MOD. Based on F-PC 3.6
002604r 3                       ; by Ulrich Hoffmann. See http://www.xlerb.de/uho/ansi.seq
002604r 3                       ;
002604r 3                       ; Forth:
002604r 3                       ; OVER >R 2DUP XOR 0< >R ABS >R DABS R> UM/MOD R> ?NEGATE SWAP
002604r 3                       ; R> ?NEGATE SWAP
002604r 3                       ; """
002604r 3               
002604r 3               xt_sm_slash_rem:
002604r 3  20 rr rr                     jsr underflow_3 ; contains double number
002607r 3               
002607r 3                               ; push MSB of high cell of d to Data Stack so we can check
002607r 3                               ; its sign later
002607r 3  B5 03                        lda 3,x
002609r 3  48                           pha
00260Ar 3               
00260Ar 3                               ; XOR the MSB of the high cell of d and n1 so we figure out
00260Ar 3                               ; its sign later as well
00260Ar 3  B5 01                        lda 1,x
00260Cr 3  55 03                        eor 3,x
00260Er 3  48                           pha
00260Fr 3               
00260Fr 3                               ; Prepare division by getting absolute of n1 and d
00260Fr 3  20 rr rr                     jsr xt_abs
002612r 3  E8                           inx             ; pretend we pushed n1 to R
002613r 3  E8                           inx
002614r 3               
002614r 3  20 rr rr                     jsr xt_dabs
002617r 3  CA                           dex
002618r 3  CA                           dex
002619r 3               
002619r 3  20 rr rr                     jsr xt_um_slash_mod     ; UM/MOD
00261Cr 3               
00261Cr 3                               ; if the XOR compiled above is negative, negate the
00261Cr 3                               ; quotient (n3)
00261Cr 3  68                           pla
00261Dr 3  10 03                        bpl @1
00261Fr 3  20 rr rr                     jsr xt_negate
002622r 3               @1:
002622r 3                               ; if d was negative, negate the remainder (n2)
002622r 3  68                           pla
002623r 3  10 07                        bpl @done
002625r 3               
002625r 3  E8                           inx             ; pretend we pushed quotient to R
002626r 3  E8                           inx
002627r 3  20 rr rr                     jsr xt_negate
00262Ar 3  CA                           dex
00262Br 3  CA                           dex
00262Cr 3               
00262Cr 3               @done:
00262Cr 3  60           z_sm_slash_rem: rts
00262Dr 3               
00262Dr 3               
00262Dr 3               
00262Dr 3               ; ## SOURCE ( -- addr u ) "Return location and size of input buffer""
00262Dr 3               ; ## "source"  auto  ANS core
00262Dr 3                       ; """https://forth-standard.org/standard/core/SOURCE"""
00262Dr 3               xt_source:
00262Dr 3                               ; add address
00262Dr 3  CA                           dex
00262Er 3  CA                           dex
00262Fr 3  A5 rr                        lda cib
002631r 3  95 00                        sta 0,x
002633r 3  A5 rr                        lda cib+1
002635r 3  95 01                        sta 1,x
002637r 3               
002637r 3                               ; add size
002637r 3  CA                           dex
002638r 3  CA                           dex
002639r 3  A5 rr                        lda ciblen
00263Br 3  95 00                        sta 0,x
00263Dr 3  A5 rr                        lda ciblen+1
00263Fr 3  95 01                        sta 1,x
002641r 3               
002641r 3  60           z_source:       rts
002642r 3               
002642r 3               
002642r 3               ; ## SOURCE_ID ( -- n ) "Return source identifier"
002642r 3               ; ## "source-id"  tested  ANS core ext
002642r 3                       ; """https://forth-standard.org/standard/core/SOURCE-ID Identify the
002642r 3                       ; input source unless it is a block (s. Conklin & Rather p. 156). This
002642r 3                       ; will give the input source: 0 is keyboard, -1 ($FFFF) is character
002642r 3                       ; string, and a text file gives the fileid.
002642r 3                       ; """
002642r 3               xt_source_id:
002642r 3  CA                           dex
002643r 3  CA                           dex
002644r 3               
002644r 3  A5 rr                        lda insrc
002646r 3  95 00                        sta 0,x
002648r 3  A5 rr                        lda insrc+1
00264Ar 3  95 01                        sta 1,x
00264Cr 3               
00264Cr 3  60           z_source_id:    rts
00264Dr 3               
00264Dr 3               
00264Dr 3               ; ## SPACE ( -- ) "Print a single space"
00264Dr 3               ; ## "space"  auto  ANS core
00264Dr 3                       ; """https://forth-standard.org/standard/core/SPACE"""
00264Dr 3               xt_space:
00264Dr 3  A9 20                        lda #AscSP
00264Fr 3  20 rr rr                     jsr emit_a
002652r 3               
002652r 3  60           z_space:        rts
002653r 3               
002653r 3               
002653r 3               ; ## SPACES ( u -- ) "Print a number of spaces"
002653r 3               ; ## "spaces"  auto  ANS core
002653r 3                       ; """https://forth-standard.org/standard/core/SPACES"""
002653r 3               
002653r 3               xt_spaces:
002653r 3  20 rr rr                     jsr underflow_1
002656r 3               
002656r 3                               ; catch any zero in TOS fast
002656r 3  B5 00                        lda 0,x
002658r 3  15 01                        ora 1,x
00265Ar 3  F0 2A                        beq @done
00265Cr 3               
00265Cr 3                               ; Usually we're only going to print far less than 256 spaces,
00265Cr 3                               ; so we create a quick loop for that. Short loop could be realized
00265Cr 3                               ; as a separate subroutine, but unless we're really pressed for
00265Cr 3                               ; memory at some point, this is faster
00265Cr 3  B4 01                        ldy 1,x
00265Er 3  D0 0C                        bne @lots_of_spaces
002660r 3               
002660r 3  B4 00                        ldy 0,x
002662r 3               @quick_loop:
002662r 3                               ; we reach here knowing that there must be a number that is not
002662r 3                               ; zero in the TOS
002662r 3  A9 20                        lda #AscSP
002664r 3  20 rr rr                     jsr emit_a
002667r 3  88                           dey
002668r 3  F0 1C                        beq @done
00266Ar 3  80 F6                        bra @quick_loop
00266Cr 3               
00266Cr 3               @lots_of_spaces:
00266Cr 3                               ; We go through the first loop once to get rid of the lower
00266Cr 3                               ; counter byte. This could be zero
00266Cr 3  B4 00                        ldy 0,x
00266Er 3               
00266Er 3               @first_slow_loop:
00266Er 3  F0 08                        beq @slow_outer_loop
002670r 3  A9 20                        lda #AscSP
002672r 3  20 rr rr                     jsr emit_a
002675r 3  88                           dey
002676r 3  80 F6                        bra @first_slow_loop
002678r 3               
002678r 3               @slow_outer_loop:
002678r 3                               ; we arrive here knowing that the MSB of TOS cannot be a zero
002678r 3  A0 00                        ldy #00
00267Ar 3               
00267Ar 3               @slow_inner_loop:
00267Ar 3  A9 20                        lda #AscSP
00267Cr 3  20 rr rr                     jsr emit_a
00267Fr 3  88                           dey
002680r 3  D0 F8                        bne @slow_inner_loop
002682r 3               
002682r 3  D6 01                        dec 1,x
002684r 3  D0 F2                        bne @slow_outer_loop
002686r 3               
002686r 3               @done:
002686r 3  E8                           inx             ; drop
002687r 3  E8                           inx
002688r 3               
002688r 3  60           z_spaces:       rts
002689r 3               
002689r 3               
002689r 3               
002689r 3               ; ## STAR ( n n -- n ) "16*16 --> 16 "
002689r 3               ; ## "*"  auto  ANS core
002689r 3                       ; """https://forth-standard.org/standard/core/Times
002689r 3                       ; Multiply two signed 16 bit numbers, returning a 16 bit result.
002689r 3                       ;
002689r 3                       ; This is nothing  more than UM* DROP
002689r 3                       ; """
002689r 3               
002689r 3               xt_star:
002689r 3  20 rr rr                     jsr underflow_2
00268Cr 3               
00268Cr 3  20 rr rr                     jsr xt_um_star
00268Fr 3  E8                           inx
002690r 3  E8                           inx
002691r 3               
002691r 3  60           z_star:         rts
002692r 3               
002692r 3               
002692r 3               
002692r 3               ; ## STAR_SLASH  ( n1 n2 n3 -- n4 ) "n1 * n2 / n3 -->  n"
002692r 3               ; ## "*/"  auto  ANS core
002692r 3                       ; """https://forth-standard.org/standard/core/TimesDiv
002692r 3                       ; Multiply n1 by n2 and divide by n3, returning the result
002692r 3                       ; without a remainder. This is */MOD without the mod.
002692r 3                       ;
002692r 3                       ; This word
002692r 3                       ; can be defined in Forth as : */  */MOD SWAP DROP ; which is
002692r 3                       ; pretty much what we do here
002692r 3                       ; """
002692r 3               xt_star_slash:
002692r 3                               ; We let */MOD check for underflow
002692r 3  20 rr rr                     jsr xt_star_slash_mod
002695r 3  20 rr rr                     jsr xt_swap
002698r 3  E8                           inx
002699r 3  E8                           inx
00269Ar 3               z_star_slash:
00269Ar 3  60                           rts
00269Br 3               
00269Br 3               
00269Br 3               ; ## STAR_SLASH_MOD  ( n1 n2 n3 -- n4 n5 ) "n1 * n2 / n3 --> n-mod n"
00269Br 3               ; ## "*/mod"  auto  ANS core
00269Br 3                       ; """https://forth-standard.org/standard/core/TimesDivMOD
00269Br 3                       ; Multiply n1 by n2 producing the intermediate double-cell result d.
00269Br 3                       ; Divide d by n3 producing the single-cell remainder n4 and the
00269Br 3                       ; single-cell quotient n5.
00269Br 3                       ;
00269Br 3                       ; In Forth, this is
00269Br 3                       ; : */MOD  >R M* >R SM/REM ;  Note that */ accesses this routine.
00269Br 3                       ; """
00269Br 3               xt_star_slash_mod:
00269Br 3  20 rr rr                     jsr underflow_3
00269Er 3               
00269Er 3  20 rr rr                     jsr xt_to_r
0026A1r 3  20 rr rr                     jsr xt_m_star
0026A4r 3  20 rr rr                     jsr xt_r_from
0026A7r 3  20 rr rr                     jsr xt_sm_slash_rem
0026AAr 3               
0026AAr 3               z_star_slash_mod:
0026AAr 3  60                           rts
0026ABr 3               
0026ABr 3               
0026ABr 3               ; ## STATE ( -- addr ) "Return the address of compilation state flag"
0026ABr 3               ; ## "state"  auto  ANS core
0026ABr 3                       ; """https://forth-standard.org/standard/core/STATE
0026ABr 3                       ; STATE is true when in compilation state, false otherwise. Note
0026ABr 3                       ; we do not return the state itself, but only the address where
0026ABr 3                       ; it lives. The state should not be changed directly by the user; see
0026ABr 3                       ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
0026ABr 3                       ; """
0026ABr 3               xt_state:
0026ABr 3  CA                           dex
0026ACr 3  CA                           dex
0026ADr 3  A9 rr                        lda #<state
0026AFr 3  95 00                        sta 0,x
0026B1r 3  A9 rr                        lda #>state
0026B3r 3  95 01                        sta 1,x
0026B5r 3               
0026B5r 3  60           z_state:        rts
0026B6r 3               
0026B6r 3               
0026B6r 3               ; ## STORE ( n addr -- ) "Store TOS in memory"
0026B6r 3               ; ## "!"  auto  ANS core
0026B6r 3                       ; """https://forth-standard.org/standard/core/Store"""
0026B6r 3               xt_store:
0026B6r 3  20 rr rr                     jsr underflow_2
0026B9r 3               
0026B9r 3  B5 02                        lda 2,x         ; LSB
0026BBr 3  81 00                        sta (0,x)
0026BDr 3               
0026BDr 3  F6 00                        inc 0,x
0026BFr 3  D0 02                        bne @1
0026C1r 3  F6 01                        inc 1,x
0026C3r 3               @1:
0026C3r 3  B5 03                        lda 3,x         ; MSB
0026C5r 3  81 00                        sta (0,x)
0026C7r 3               
0026C7r 3  E8                           inx             ; 2DROP
0026C8r 3  E8                           inx
0026C9r 3  E8                           inx
0026CAr 3  E8                           inx
0026CBr 3               
0026CBr 3  60           z_store:        rts
0026CCr 3               
0026CCr 3               
0026CCr 3               ; ## STRIP_UNDERFLOW ( -- addr ) "Return address where underflow status is kept"
0026CCr 3               ; ## "strip-underflow"  tested  Tali Forth
0026CCr 3                       ; """`STRIP-UNDERFLOW` is a flag variable that determines if underflow
0026CCr 3                       ; checking should be removed during the compilation of new words.
0026CCr 3                       ; Default is false.
0026CCr 3                       ; """
0026CCr 3               xt_strip_underflow:
0026CCr 3  CA                           dex
0026CDr 3  CA                           dex
0026CEr 3               
0026CEr 3  A9 rr                        lda #<uf_strip
0026D0r 3  95 00                        sta 0,x
0026D2r 3  A9 rr                        lda #>uf_strip
0026D4r 3  95 01                        sta 1,x
0026D6r 3               
0026D6r 3               z_strip_underflow:
0026D6r 3  60                           rts
0026D7r 3               
0026D7r 3               
0026D7r 3               ; ## SWAP ( b a -- a b ) "Exchange TOS and NOS"
0026D7r 3               ; ## "swap"  auto  ANS core
0026D7r 3                       ; """https://forth-standard.org/standard/core/SWAP"""
0026D7r 3               xt_swap:
0026D7r 3  20 rr rr                     jsr underflow_2
0026DAr 3               
0026DAr 3  B5 00                        lda 0,x         ; LSB
0026DCr 3  B4 02                        ldy 2,x
0026DEr 3  95 02                        sta 2,x
0026E0r 3  94 00                        sty 0,x
0026E2r 3               
0026E2r 3  B5 01                        lda 1,x         ; MSB
0026E4r 3  B4 03                        ldy 3,x
0026E6r 3  95 03                        sta 3,x
0026E8r 3  94 01                        sty 1,x
0026EAr 3               
0026EAr 3  60           z_swap:         rts
0026EBr 3               
0026EBr 3               
0026EBr 3               ; ## THEN (C: orig -- ) ( -- ) "Conditional flow control"
0026EBr 3               ; ## "then"  auto  ANS core
0026EBr 3                       ; """http://forth-standard.org/standard/core/THEN"""
0026EBr 3               xt_then:
0026EBr 3                               ; Get the address to jump to.
0026EBr 3  20 rr rr                     jsr xt_here
0026EEr 3               
0026EEr 3                               ; Stuff HERE in for the branch address back
0026EEr 3                               ; at the IF or ELSE (origination address is on stack).
0026EEr 3  20 rr rr                     jsr xt_swap
0026F1r 3  20 rr rr                     jsr xt_store
0026F4r 3               
0026F4r 3  60           z_then:         rts
0026F5r 3               
0026F5r 3               
0026F5r 3               ; ## THRU ( scr# scr# -- ) "Load screens in the given range"
0026F5r 3               ; ## "thru"  tested  ANS block ext
0026F5r 3                       ; """https://forth-standard.org/standard/block/THRU"""
0026F5r 3               
0026F5r 3               xt_thru:
0026F5r 3  20 rr rr                     jsr underflow_2
0026F8r 3               
0026F8r 3                               ; We need to loop here, and can't use the data stack
0026F8r 3                               ; because the LOADed screens might use it.  We'll
0026F8r 3                               ; need to use the same trick that DO loops use, holding
0026F8r 3                               ; the limit and current index on the return stack.
0026F8r 3               
0026F8r 3                               ; Put the ending screen number on the return stack
0026F8r 3  B5 01                        lda 1,x
0026FAr 3  48                           pha
0026FBr 3  B5 00                        lda 0,x
0026FDr 3  48                           pha
0026FEr 3  E8                           inx
0026FFr 3  E8                           inx
002700r 3               @thru_loop:
002700r 3                               ; Put the starting screen number on the stack,
002700r 3                               ; but keep a copy
002700r 3  B5 01                        lda 1,x
002702r 3  48                           pha
002703r 3  B5 00                        lda 0,x
002705r 3  48                           pha
002706r 3               
002706r 3                               ; Load this screen.
002706r 3  20 rr rr                     jsr xt_load
002709r 3               
002709r 3                               ; Get the number and limit back off the stack.  Rather than
002709r 3                               ; waste time making room on the stack, just use tmp1 and tmp2.
002709r 3               
002709r 3                               ; Get the screen we just loaded.
002709r 3  68                           pla
00270Ar 3  85 rr                        sta tmp1
00270Cr 3  68                           pla
00270Dr 3  85 rr                        sta tmp1+1
00270Fr 3               
00270Fr 3                               ; Get the ending screen.
00270Fr 3  68                           pla
002710r 3  85 rr                        sta tmp2
002712r 3  68                           pla
002713r 3  85 rr                        sta tmp2+1
002715r 3               
002715r 3                               ; See if we just loaded the last screen.
002715r 3                               ; A already has the MSB of the last screen in it.
002715r 3  C5 rr                        cmp tmp1+1
002717r 3  D0 08                        bne @next_screen
002719r 3  A5 rr                        lda tmp2        ; Compare the LSB
00271Br 3  C5 rr                        cmp tmp1
00271Dr 3  D0 02                        bne @next_screen
00271Fr 3  80 18                        bra @done       ; We just did the last screen.
002721r 3               
002721r 3               @next_screen:
002721r 3                               ; Put the ending screen back on the data stack.
002721r 3  A5 rr                        lda tmp2+1
002723r 3  48                           pha
002724r 3  A5 rr                        lda tmp2
002726r 3  48                           pha
002727r 3               
002727r 3                               ; Increment the current screen.
002727r 3  E6 rr                        inc tmp1
002729r 3  D0 02                        bne @1
00272Br 3  E6 rr                        inc tmp1+1
00272Dr 3               @1:
00272Dr 3                               ; Put the current screen on the stack to prepare for
00272Dr 3                               ; the next loop.
00272Dr 3  CA                           dex
00272Er 3  CA                           dex
00272Fr 3  A5 rr                        lda tmp1
002731r 3  95 00                        sta 0,x
002733r 3  A5 rr                        lda tmp1+1
002735r 3  95 01                        sta 1,x
002737r 3  80 C7                        bra @thru_loop
002739r 3               @done:
002739r 3  60           z_thru:         rts
00273Ar 3               
00273Ar 3               
00273Ar 3               
00273Ar 3               ; ## TICK ( "name" -- xt ) "Return a word's execution token (xt)"
00273Ar 3               ; ## "'"  auto  ANS core
00273Ar 3                       ; """https://forth-standard.org/standard/core/Tick"""
00273Ar 3               
00273Ar 3               xt_tick:
00273Ar 3  20 rr rr                     jsr xt_parse_name       ; ( -- addr u )
00273Dr 3               
00273Dr 3                               ; if we got a zero, there was a problem getting the
00273Dr 3                               ; name of the word
00273Dr 3  B5 00                        lda 0,x
00273Fr 3  15 01                        ora 1,x
002741r 3  D0 05                        bne @1
002743r 3               
002743r 3  A9 05                        lda #err_noname
002745r 3  4C rr rr                     jmp error
002748r 3               @1:
002748r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt )
00274Br 3               
00274Br 3                               ; If we didn't find the word in the Dictionary, abort
00274Br 3  B5 00                        lda 0,x
00274Dr 3  15 01                        ora 1,x
00274Fr 3  D0 05                        bne @2
002751r 3               
002751r 3  A9 08                        lda #err_syntax
002753r 3  4C rr rr                     jmp error
002756r 3               @2:
002756r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt -- xt )
002759r 3               
002759r 3  60           z_tick:         rts
00275Ar 3               
00275Ar 3               
00275Ar 3               
00275Ar 3               ; ## TO ( n "name" -- ) or ( "name") "Change a value"
00275Ar 3               ; ## "to"  auto  ANS core ext
00275Ar 3                       ; """https://forth-standard.org/standard/core/TO
00275Ar 3                       ; Gives a new value to a, uh, VALUE.
00275Ar 3                       ;
00275Ar 3                       ; One possible Forth
00275Ar 3                       ; implementation is  ' >BODY !  but given the problems we have
00275Ar 3                       ; with >BODY on STC Forths, we do this the hard way. Since
00275Ar 3                       ; Tali Forth uses the same code for CONSTANTs and VALUEs, you
00275Ar 3                       ; could use this to redefine a CONSTANT, but that is a no-no.
00275Ar 3                       ;
00275Ar 3                       ; Note that the standard has different behaviors for TO depending
00275Ar 3                       ; on the state (https://forth-standard.org/standard/core/TO).
00275Ar 3                       ; This makes TO state-dependent (which is bad) and also rather
00275Ar 3                       ; complex (see the Gforth implementation for comparison). This
00275Ar 3                       ; word may not be natively compiled and must be immediate. Frankly,
00275Ar 3                       ; it would have made more sense to have two words for this.
00275Ar 3                       ; """
00275Ar 3               
00275Ar 3               xt_to:
00275Ar 3                               ; One way or the other, we need the xt of the word after this
00275Ar 3                               ; one. At this point, we don't know if we are interpreted or
00275Ar 3                               ; compile, so we don't know if there is a value n on the stack,
00275Ar 3                               ; so we can't do an underflow check yet
00275Ar 3  20 rr rr                     jsr xt_tick             ; ( [n] xt )
00275Dr 3               
00275Dr 3                               ; The PFA (DFA in this case) is three bytes down,
00275Dr 3                               ; after the jump to DOCONST
00275Dr 3  B5 00                        lda 0,x                 ; LSB
00275Fr 3  18                           clc
002760r 3  69 03                        adc #3
002762r 3  85 rr                        sta tmp1
002764r 3  B5 01                        lda 1,x                 ; MSB
002766r 3  69 00                        adc #0                  ; we just want the carry
002768r 3  85 rr                        sta tmp1+1
00276Ar 3               
00276Ar 3  E8                           inx
00276Br 3  E8                           inx                     ; ( [n] )
00276Cr 3               
00276Cr 3                               ; Now it gets ugly. See which state we are in
00276Cr 3  A5 rr                        lda state
00276Er 3  05 rr                        ora state+1
002770r 3  F0 34                        beq @interpret
002772r 3               
002772r 3                               ; Well, we're compiling. We want to end up with simple
002772r 3                               ; code that just takes the number that is TOS and saves
002772r 3                               ; it in the address of the xt we were just given. So we
002772r 3                               ; want to compile this routine:
002772r 3                               ;
002772r 3                               ;       lda 0,x                 - B5 00
002772r 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
002772r 3                               ;       lda 1,x                 - B5 01
002772r 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
002772r 3                               ;       inx                     - E8
002772r 3                               ;       inx                     - E8
002772r 3                               ;
002772r 3                               ; which at least is nice and short. Other than that, we pretty
002772r 3                               ; much have to do this the hard and long way, because with the
002772r 3                               ; LSBs and MSBs, we can't really put the numbers in a data
002772r 3                               ; range and store them with a loop. Sigh.
002772r 3               
002772r 3  A0 00                        ldy #$00                ; Code for LDA 0,X
002774r 3  A9 B5                        lda #$B5
002776r 3  20 rr rr                     jsr cmpl_word
002779r 3               
002779r 3  A9 8D                        lda #$8D                ; Code for STA abs
00277Br 3  20 rr rr                     jsr cmpl_a
00277Er 3               
00277Er 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
002780r 3  A5 rr                        lda tmp1
002782r 3  20 rr rr                     jsr cmpl_word
002785r 3               
002785r 3  A0 01                        ldy #$01                ; Code for LDA 1,X
002787r 3  A9 B5                        lda #$B5
002789r 3  20 rr rr                     jsr cmpl_word
00278Cr 3               
00278Cr 3  A9 8D                        lda #$8D                ; Code for STA abs
00278Er 3  20 rr rr                     jsr cmpl_a
002791r 3               
002791r 3  E6 rr                        inc tmp1                ; Calculate MSB
002793r 3  D0 02                        bne @1
002795r 3  E6 rr                        inc tmp1+1
002797r 3               @1:
002797r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
002799r 3  A5 rr                        lda tmp1
00279Br 3  20 rr rr                     jsr cmpl_word
00279Er 3               
00279Er 3  A0 E8                        ldy #$E8                ; Code for INX
0027A0r 3  98                           tya
0027A1r 3  20 rr rr                     jsr cmpl_word
0027A4r 3               
0027A4r 3  80 0F                        bra @done
0027A6r 3               
0027A6r 3               @interpret:
0027A6r 3                               ; We're interpreting, so we arrive here with n
0027A6r 3                               ; on the stack. This is an annoying place to put
0027A6r 3                               ; the underflow check because we can't
0027A6r 3                               ; automatically strip it out
0027A6r 3  20 rr rr                     jsr underflow_1
0027A9r 3               
0027A9r 3                               ; We skip over the jump to DOCONST and store the number
0027A9r 3                               ; in the Program Field Area (PDF, in this case more a
0027A9r 3                               ; Data Field Area
0027A9r 3  B5 00                        lda 0,x
0027ABr 3  92 rr                        sta (tmp1)              ; LSB
0027ADr 3               
0027ADr 3  A0 01                        ldy #1
0027AFr 3  B5 01                        lda 1,x                 ; MSB
0027B1r 3  91 rr                        sta (tmp1),y            ; fall through to common
0027B3r 3               
0027B3r 3  E8                           inx                     ; DROP
0027B4r 3  E8                           inx
0027B5r 3               @done:
0027B5r 3  60           z_to:           rts
0027B6r 3               
0027B6r 3               
0027B6r 3               
0027B6r 3               ; ## TO_BODY ( xt -- addr ) "Return a word's Code Field Area (CFA)"
0027B6r 3               ; ## ">body"  auto  ANS core
0027B6r 3                       ; """https://forth-standard.org/standard/core/toBODY
0027B6r 3                       ; Given a word's execution token (xt), return the address of the
0027B6r 3                       ; start of that word's parameter field (PFA). This is defined as the
0027B6r 3                       ; address that HERE would return right after CREATE.
0027B6r 3                       ;
0027B6r 3                       ; This is a
0027B6r 3                       ; difficult word for STC Forths, because most words don't actually
0027B6r 3                       ; have a Code Field Area (CFA) to skip. We solve this by having CREATE
0027B6r 3                       ; add a flag, "has CFA" (HC), in the header so >BODY know to skip
0027B6r 3                       ; the subroutine jumps to DOVAR, DOCONST, or DODOES
0027B6r 3                       ; """
0027B6r 3               
0027B6r 3               xt_to_body:
0027B6r 3  20 rr rr                     jsr underflow_1
0027B9r 3               
0027B9r 3                               ; Ideally, xt already points to the CFA. We just need to check
0027B9r 3                               ; the HC flag for special cases
0027B9r 3  20 rr rr                     jsr xt_dup              ; ( xt xt )
0027BCr 3  20 rr rr                     jsr xt_int_to_name      ; ( xt nt )
0027BFr 3               
0027BFr 3                               ; The status byte is nt+1
0027BFr 3  F6 00                        inc 0,x
0027C1r 3  D0 02                        bne @1
0027C3r 3  F6 01                        inc 1,x
0027C5r 3               @1:
0027C5r 3  A1 00                        lda (0,x)               ; get status byte
0027C7r 3  29 20                        and #HC
0027C9r 3  F0 0D                        beq @no_cfa
0027CBr 3               
0027CBr 3                               ; We've got a DOVAR, DOCONST, DODEFER, DODOES or whatever,
0027CBr 3                               ; so we add three to xt, which is NOS
0027CBr 3  18                           clc
0027CCr 3  B5 02                        lda 2,x         ; LSB
0027CEr 3  69 03                        adc #3
0027D0r 3  95 02                        sta 2,x
0027D2r 3  B5 03                        lda 3,x         ; MSB
0027D4r 3  69 00                        adc #0          ; we conly care about the carry
0027D6r 3  95 03                        sta 3,x         ; Fall through to @no_cfa
0027D8r 3               @no_cfa:
0027D8r 3  E8                           inx             ; get rid of the nt
0027D9r 3  E8                           inx
0027DAr 3               @done:
0027DAr 3  60           z_to_body:      rts
0027DBr 3               
0027DBr 3               
0027DBr 3               
0027DBr 3               ; ## TO_IN ( -- addr ) "Return address of the input pointer"
0027DBr 3               ; ## ">in"  auto  ANS core
0027DBr 3               xt_to_in:
0027DBr 3  CA                           dex
0027DCr 3  CA                           dex
0027DDr 3               
0027DDr 3  A9 rr                        lda #<toin
0027DFr 3  95 00                        sta 0,x
0027E1r 3  A9 rr                        lda #>toin      ; paranoid, should be zero
0027E3r 3  95 01                        sta 1,x
0027E5r 3               
0027E5r 3  60           z_to_in:        rts
0027E6r 3               
0027E6r 3               
0027E6r 3               ; ## TO_NUMBER ( ud addr u -- ud addr u ) "Convert a number"
0027E6r 3               ; ## ">number"  auto  ANS core
0027E6r 3                       ; """https://forth-standard.org/standard/core/toNUMBER
0027E6r 3                       ; Convert a string to a double number. Logic here is based on the
0027E6r 3                       ; routine by Phil Burk of the same name in pForth, see
0027E6r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
0027E6r 3                       ; for the original Forth code. We arrive here from NUMBER which has
0027E6r 3                       ; made sure that we don't have to deal with a sign and we don't have
0027E6r 3                       ; to deal with a dot as a last character that signalizes double -
0027E6r 3                       ; this should be a pure number string.
0027E6r 3                       ;
0027E6r 3                       ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we
0027E6r 3                       ; cannot access any of those.
0027E6r 3                       ;
0027E6r 3                       ; For the math routine, we move the inputs to the scratchpad to
0027E6r 3                       ; avoid having to fool around with the Data Stack.
0027E6r 3                       ;
0027E6r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
0027E6r 3                       ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
0027E6r 3                       ;     |           |           |           |           |
0027E6r 3                       ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
0027E6r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
0027E6r 3                       ;
0027E6r 3                       ; The math routine works by converting one character to its
0027E6r 3                       ; numerical value (N) via DIGIT? and storing it in S+4 for
0027E6r 3                       ; the moment. We then multiply the UD-HI value with the radix
0027E6r 3                       ; (from BASE) using UM*, which returns a double-cell result. We
0027E6r 3                       ; discard the high cell of that result (UD-HI-HI) and store the
0027E6r 3                       ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
0027E6r 3                       ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
0027E6r 3                       ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
0027E6r 3                       ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
0027E6r 3                       ; storing the result back in S and S+2, before we start another
0027E6r 3                       ; round with it as the new UD-LO and UD-HI.
0027E6r 3                       ; """
0027E6r 3               
0027E6r 3               
0027E6r 3               xt_to_number:
0027E6r 3  20 rr rr                     jsr underflow_4
0027E9r 3               
0027E9r 3                               ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
0027E9r 3                               ; After this step, the original ud-lo and ud-hi will still be on
0027E9r 3                               ; the Data Stack, but will be ignored and later overwritten
0027E9r 3                               ; If >NUMBER is called by NUMBER, these should be all zeros
0027E9r 3  B5 06                        lda 6,x         ; ud-lo LSB
0027EBr 3  85 rr                        sta scratch
0027EDr 3  B5 07                        lda 7,x         ; ud-lo MSB
0027EFr 3  85 rr                        sta scratch+1
0027F1r 3               
0027F1r 3  B5 04                        lda 4,x         ; ud-hi LSB
0027F3r 3  85 rr                        sta scratch+2
0027F5r 3  B5 05                        lda 5,x         ; ud-hi MSB
0027F7r 3  85 rr                        sta scratch+3
0027F9r 3               
0027F9r 3                               ; Push down one on the Data Stack to use TOS for character
0027F9r 3                               ; conversion ( ud-lo ud-hi addr u x )
0027F9r 3  CA                           dex
0027FAr 3  CA                           dex
0027FBr 3               
0027FBr 3               @loop:
0027FBr 3                               ; Get one character based on address
0027FBr 3  A1 04                        lda (4,x)
0027FDr 3  95 00                        sta 0,x                 ; ( ud-lo ud-hi addr u char )
0027FFr 3  74 01                        stz 1,x                 ; paranoid
002801r 3               
002801r 3  20 rr rr                     jsr xt_digit_question   ; ( char -- n -1 | char 0 )
002804r 3               
002804r 3                               ; This gives us ( ud-lo ud-hi addr u char f | n f ), so we
002804r 3                               ; check the flag. If it is zero, we return what we have and
002804r 3                               ; let the caller (usually NUMBER) complain
002804r 3  B5 00                        lda 0,x
002806r 3  D0 04                        bne @digit_ok
002808r 3               
002808r 3  E8                           inx
002809r 3  E8                           inx
00280Ar 3  80 67                        bra @done       ; ( ud-lo ud-hi addr u char )
00280Cr 3               
00280Cr 3               @digit_ok:
00280Cr 3                               ; Conversion was successful. We arrive here with
00280Cr 3                               ; ( ud-lo ud-hi addr u n -1 ) and can start the
00280Cr 3                               ; math routine
00280Cr 3               
00280Cr 3                               ; Save n so we don't have to fool around with the
00280Cr 3                               ; Data Stack
00280Cr 3  B5 02                        lda 2,x
00280Er 3  85 rr                        sta scratch+4
002810r 3  B5 03                        lda 3,x
002812r 3  85 rr                        sta scratch+5
002814r 3               
002814r 3                               ; Now multiply ud-hi (the one in the scratchpad, not the
002814r 3                               ; original one on the Data Stack) with the radix from BASE.
002814r 3                               ; We can clobber TOS and NOS because we saved n
002814r 3  A5 rr                        lda scratch+2
002816r 3  95 02                        sta 2,x         ; NOS
002818r 3  A5 rr                        lda scratch+3
00281Ar 3  95 03                        sta 3,x
00281Cr 3               
00281Cr 3  A5 rr                        lda base
00281Er 3  95 00                        sta 0,x         ; TOS
002820r 3  74 01                        stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
002822r 3               
002822r 3                               ; UM* returns a double-celled number
002822r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
002825r 3               
002825r 3                               ; Move ud-hi-lo to safety
002825r 3  B5 02                        lda 2,x         ; ud-hi-lo
002827r 3  85 rr                        sta scratch+6
002829r 3  B5 03                        lda 3,x
00282Br 3  85 rr                        sta scratch+7
00282Dr 3               
00282Dr 3                               ; Now we multiply ud-lo, overwriting the stack entries
00282Dr 3  A5 rr                        lda scratch
00282Fr 3  95 02                        sta 2,x
002831r 3  A5 rr                        lda scratch+1
002833r 3  95 03                        sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
002835r 3               
002835r 3  A5 rr                        lda base
002837r 3  95 00                        sta 0,x
002839r 3  74 01                        stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
00283Br 3               
00283Br 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
00283Er 3               
00283Er 3  B5 00                        lda 0,x
002840r 3  85 rr                        sta scratch+2
002842r 3  B5 01                        lda 1,x
002844r 3  85 rr                        sta scratch+3
002846r 3               
002846r 3  B5 02                        lda 2,x
002848r 3  85 rr                        sta scratch
00284Ar 3  B5 03                        lda 3,x
00284Cr 3  85 rr                        sta scratch+1
00284Er 3               
00284Er 3                               ; We add ud-lo and n, as well as ud-hi and ud-hi-lo,
00284Er 3                               ; both in the scratch pad
00284Er 3  18                           clc
00284Fr 3  A5 rr                        lda scratch     ; ud-lo LSB
002851r 3  65 rr                        adc scratch+4   ; n LSB
002853r 3  85 rr                        sta scratch     ; this is the new ud-lo
002855r 3  A5 rr                        lda scratch+1   ; ud-lo MSB
002857r 3  65 rr                        adc scratch+5   ; n MSB
002859r 3  85 rr                        sta scratch+1
00285Br 3               
00285Br 3  A5 rr                        lda scratch+2   ; LSB
00285Dr 3  65 rr                        adc scratch+6
00285Fr 3  85 rr                        sta scratch+2   ; this is the new ud-hi
002861r 3  A5 rr                        lda scratch+3   ; MSB
002863r 3  65 rr                        adc scratch+7
002865r 3  85 rr                        sta scratch+3
002867r 3               
002867r 3                               ; Clean up: Get rid of one of the two top elements on
002867r 3                               ; the Data Stack. We don't really care which one
002867r 3  E8                           inx
002868r 3  E8                           inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
002869r 3               
002869r 3                               ; One character down. Move address up
002869r 3  F6 04                        inc 4,x
00286Br 3  D0 02                        bne @1
00286Dr 3  F6 05                        inc 5,x
00286Fr 3               @1:
00286Fr 3                               ; Decrease counter
00286Fr 3  D6 02                        dec 2,x
002871r 3  D0 88                        bne @loop
002873r 3               
002873r 3               @done:
002873r 3                               ; Counter has reached zero or we have an error. In both
002873r 3                               ; cases, we clean up the Data Stack and return. Error gives
002873r 3                               ; us ( ud-lo ud-hi addr u char ), regular end is
002873r 3                               ; ( ud-lo ud-hi addr u ud-lo )
002873r 3  E8                           inx
002874r 3  E8                           inx             ; ( ud-lo ud-hi addr u )
002875r 3               
002875r 3                               ; The new ud-lo and ud-hi are still on the scratch pad
002875r 3  A5 rr                        lda scratch     ; new ud-lo
002877r 3  95 06                        sta 6,x
002879r 3  A5 rr                        lda scratch+1
00287Br 3  95 07                        sta 7,x
00287Dr 3               
00287Dr 3  A5 rr                        lda scratch+2
00287Fr 3  95 04                        sta 4,x
002881r 3  A5 rr                        lda scratch+3
002883r 3  95 05                        sta 5,x
002885r 3               
002885r 3  60           z_to_number:    rts
002886r 3               
002886r 3               
002886r 3               
002886r 3               ; ## TO_ORDER ( wid -- ) "Add wordlist at beginning of search order"
002886r 3               ; ## ">order"  tested  Gforth search
002886r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html"""
002886r 3               
002886r 3               xt_to_order:
002886r 3                               ; Put the wid on the return stack for now.
002886r 3  20 rr rr                     jsr xt_to_r
002889r 3               
002889r 3                               ; Get the current search order.
002889r 3  20 rr rr                     jsr xt_get_order
00288Cr 3               
00288Cr 3                               ; Get back the wid and add it to the list.
00288Cr 3  20 rr rr                     jsr xt_r_from
00288Fr 3  20 rr rr                     jsr xt_swap
002892r 3  20 rr rr                     jsr xt_one_plus
002895r 3               
002895r 3                               ; Set the search order with the new list.
002895r 3  20 rr rr                     jsr xt_set_order
002898r 3               
002898r 3  60           z_to_order:     rts
002899r 3               
002899r 3               
002899r 3               
002899r 3               ; ## TO_R ( n -- )(R: -- n) "Push TOS to the Return Stack"
002899r 3               ; ## ">r"  auto  ANS core
002899r 3                       ; """https://forth-standard.org/standard/core/toR
002899r 3                       ; This word is handled differently for native and for
002899r 3                       ; subroutine coding, see `COMPILE,`. This is a complile-only
002899r 3                       ; word.
002899r 3                       ; """
002899r 3               xt_to_r:
002899r 3                               ; Save the return address. If this word is natively
002899r 3                               ; coded, this is a complete waste of cycles, but
002899r 3                               ; required for subroutine coding
002899r 3  68                           pla             ; LSB
00289Ar 3  85 rr                        sta tmptos
00289Cr 3  7A                           ply             ; MSB
00289Dr 3               
00289Dr 3                               ; --- CUT HERE FOR NATIVE CODING ---
00289Dr 3               
00289Dr 3                               ; We check for underflow in the second step, so we can
00289Dr 3                               ; strip off the stack thrashing for native compiling first
00289Dr 3  20 rr rr                     jsr underflow_1
0028A0r 3               
0028A0r 3                               ; now we can do the actual work
0028A0r 3  B5 01                        lda 1,x         ; MSB
0028A2r 3  48                           pha
0028A3r 3  B5 00                        lda 0,x         ; LSB
0028A5r 3  48                           pha
0028A6r 3               
0028A6r 3  E8                           inx
0028A7r 3  E8                           inx
0028A8r 3               
0028A8r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0028A8r 3               
0028A8r 3                               ; restore return address
0028A8r 3  5A                           phy             ; MSB
0028A9r 3  A5 rr                        lda tmptos
0028ABr 3  48                           pha             ; LSB
0028ACr 3               
0028ACr 3  60           z_to_r:         rts
0028ADr 3               
0028ADr 3               
0028ADr 3               ; ## TRUE ( -- f ) "Push TRUE flag to Data Stack"
0028ADr 3               ; ## "true"  auto  ANS core ext
0028ADr 3                       ; """https://forth-standard.org/standard/core/TRUE"""
0028ADr 3               xt_true:
0028ADr 3  CA                           dex
0028AEr 3  CA                           dex
0028AFr 3  A9 FF                        lda #$FF
0028B1r 3  95 00                        sta 0,x
0028B3r 3  95 01                        sta 1,x
0028B5r 3               
0028B5r 3  60           z_true:         rts
0028B6r 3               
0028B6r 3               
0028B6r 3               ; ## TUCK ( b a -- a b a ) "Copy TOS below NOS"
0028B6r 3               ; ## "tuck"  auto  ANS core ext
0028B6r 3                       ; """https://forth-standard.org/standard/core/TUCK"""
0028B6r 3               xt_tuck:
0028B6r 3  20 rr rr                     jsr underflow_2
0028B9r 3               
0028B9r 3  CA                           dex
0028BAr 3  CA                           dex
0028BBr 3               
0028BBr 3  B4 04                        ldy 4,x         ; LSB
0028BDr 3  B5 02                        lda 2,x
0028BFr 3  95 04                        sta 4,x
0028C1r 3  94 02                        sty 2,x
0028C3r 3  95 00                        sta 0,x
0028C5r 3               
0028C5r 3  B4 05                        ldy 5,x         ; MSB
0028C7r 3  B5 03                        lda 3,x
0028C9r 3  95 05                        sta 5,x
0028CBr 3  94 03                        sty 3,x         ; bba
0028CDr 3  95 01                        sta 1,x         ; baa
0028CFr 3               
0028CFr 3  60           z_tuck:         rts
0028D0r 3               
0028D0r 3               
0028D0r 3               ; ## TWO ( -- u ) "Push the number 2 to stack"
0028D0r 3               ; ## "2"  auto  Tali Forth
0028D0r 3                       ;
0028D0r 3                       ; This code is shared with ASSEMBLER-WORDLIST
0028D0r 3               xt_assembler_wordlist:
0028D0r 3               xt_two:
0028D0r 3  CA                           dex
0028D1r 3  CA                           dex
0028D2r 3  A9 02                        lda #2
0028D4r 3  95 00                        sta 0,x
0028D6r 3  74 01                        stz 1,x
0028D8r 3               
0028D8r 3               z_assembler_wordlist:
0028D8r 3  60           z_two:          rts
0028D9r 3               
0028D9r 3               
0028D9r 3               ; ## TWO_DROP ( n n -- ) "Drop TOS and NOS"
0028D9r 3               ; ## "2drop"  auto  ANS core
0028D9r 3                       ; """https://forth-standard.org/standard/core/TwoDROP"""
0028D9r 3               xt_two_drop:
0028D9r 3  20 rr rr                     jsr underflow_2
0028DCr 3               
0028DCr 3  E8                           inx
0028DDr 3  E8                           inx
0028DEr 3  E8                           inx
0028DFr 3  E8                           inx
0028E0r 3               
0028E0r 3  60           z_two_drop:     rts
0028E1r 3               
0028E1r 3               
0028E1r 3               ; ## TWO_DUP ( a b -- a b a b ) "Duplicate first two stack elements"
0028E1r 3               ; ## "2dup"  auto  ANS core
0028E1r 3                       ; """https://forth-standard.org/standard/core/TwoDUP"""
0028E1r 3               xt_two_dup:
0028E1r 3  20 rr rr                     jsr underflow_2
0028E4r 3               
0028E4r 3  CA                           dex
0028E5r 3  CA                           dex
0028E6r 3  CA                           dex
0028E7r 3  CA                           dex
0028E8r 3               
0028E8r 3  B5 04                        lda 4,x         ; TOS
0028EAr 3  95 00                        sta 0,x
0028ECr 3  B5 05                        lda 5,x
0028EEr 3  95 01                        sta 1,x
0028F0r 3               
0028F0r 3  B5 06                        lda 6,x         ; NOS
0028F2r 3  95 02                        sta 2,x
0028F4r 3  B5 07                        lda 7,x
0028F6r 3  95 03                        sta 3,x
0028F8r 3               
0028F8r 3  60           z_two_dup:      rts
0028F9r 3               
0028F9r 3               
0028F9r 3               ; ## TWO_FETCH ( addr -- n1 n2 ) "Fetch the cell pair n1 n2 stored at addr"
0028F9r 3               ; ## "2@"  auto  ANS core
0028F9r 3                       ; """https://forth-standard.org/standard/core/TwoFetch
0028F9r 3                       ; Note n2 stored at addr and n1 in the next cell -- in our case,
0028F9r 3                       ; the next two bytes. This is equvalent to  `DUP CELL+ @ SWAP @`
0028F9r 3                       ; """
0028F9r 3               xt_two_fetch:
0028F9r 3  20 rr rr                     jsr underflow_1
0028FCr 3               
0028FCr 3  B5 00                        lda 0,x
0028FEr 3  85 rr                        sta tmp1
002900r 3  B4 01                        ldy 1,x
002902r 3  84 rr                        sty tmp1+1
002904r 3               
002904r 3  CA                           dex             ; reuse one stack element
002905r 3  CA                           dex
002906r 3               
002906r 3  B2 rr                        lda (tmp1)      ; copy LSB
002908r 3  95 00                        sta 0,x
00290Ar 3  A0 01                        ldy #1          ; copy next
00290Cr 3  B1 rr                        lda (tmp1),y
00290Er 3  95 01                        sta 1,x
002910r 3  C8                           iny             ; copy next
002911r 3  B1 rr                        lda (tmp1),y
002913r 3  95 02                        sta 2,x
002915r 3  C8                           iny             ; copy next
002916r 3  B1 rr                        lda (tmp1),y
002918r 3  95 03                        sta 3,x
00291Ar 3               
00291Ar 3  60           z_two_fetch:    rts
00291Br 3               
00291Br 3               ; ## TWO_OVER ( d1 d2 -- d1 d2 d1 ) "Copy double word NOS to TOS"
00291Br 3               ; ## "2over"  auto  ANS core
00291Br 3                       ; """https://forth-standard.org/standard/core/TwoOVER"""
00291Br 3               xt_two_over:
00291Br 3  20 rr rr                     jsr underflow_4
00291Er 3               
00291Er 3  CA                           dex
00291Fr 3  CA                           dex
002920r 3  CA                           dex
002921r 3  CA                           dex
002922r 3               
002922r 3  B5 08                        lda 8,x
002924r 3  95 00                        sta 0,x
002926r 3               
002926r 3  B5 09                        lda 9,x
002928r 3  95 01                        sta 1,x
00292Ar 3               
00292Ar 3  B5 0A                        lda 10,x
00292Cr 3  95 02                        sta 2,x
00292Er 3               
00292Er 3  B5 0B                        lda 11,x
002930r 3  95 03                        sta 3,x
002932r 3               
002932r 3  60           z_two_over:     rts
002933r 3               
002933r 3               
002933r 3               ; ## TWO_R_FETCH ( -- n n ) "Copy top two entries from Return Stack"
002933r 3               ; ## "2r@"  auto  ANS core ext
002933r 3                       ; """https://forth-standard.org/standard/core/TwoRFetch
002933r 3                       ;
002933r 3                       ; This is R> R> 2DUP >R >R SWAP but we can do it a lot faster in
002933r 3                       ; assembler. We use trickery to access the elements on the Return
002933r 3                       ; Stack instead of pulling the return address first and storing
002933r 3                       ; it somewhere else like for 2R> and 2>R. In this version, we leave
002933r 3                       ; it as Never Native; at some point, we should compare versions to
002933r 3                       ; see if an Always Native version would be better
002933r 3                       ; """
002933r 3               xt_two_r_fetch:
002933r 3               		; make room on the Data Stack
002933r 3  CA                           dex
002934r 3  CA                           dex
002935r 3  CA                           dex
002936r 3  CA                           dex
002937r 3               
002937r 3                               ; Get four bytes off of Return Stack. This assumes that
002937r 3                               ; we took a subroutine jump here so the first two entries
002937r 3                               ; are the return address
002937r 3  8A                           txa
002938r 3  BA                           tsx
002939r 3  DA                           phx             ; 65c02 has no TXY, so do it the hard way
00293Ar 3  7A                           ply
00293Br 3  AA                           tax
00293Cr 3               
00293Cr 3                               ; The Return Stack addreses $0101 and $0102 are occupied by
00293Cr 3                               ; the return address for this word. This is a whole lot
00293Cr 3                               ; easier on the 65816
00293Cr 3  B9 03 01                     lda $0103,y     ; LSB of top entry
00293Fr 3  95 00                        sta 0,x
002941r 3  B9 04 01                     lda $0104,y     ; MSB of top entry
002944r 3  95 01                        sta 1,x
002946r 3  B9 05 01                     lda $0105,y     ; LSB of bottom entry
002949r 3  95 02                        sta 2,x
00294Br 3  B9 06 01                     lda $0106,y     ; MSB of top entry
00294Er 3  95 03                        sta 3,x
002950r 3               
002950r 3  60           z_two_r_fetch:  rts
002951r 3               
002951r 3               
002951r 3               ; ## TWO_R_FROM ( -- n1 n2 ) (R: n1 n2 -- ) "Pull two cells from Return Stack"
002951r 3               ; ## "2r>"  auto  ANS core ext
002951r 3               	    ; """https://forth-standard.org/standard/core/TwoRfrom
002951r 3                       ; Pull top two entries from Return Stack.
002951r 3                       ;
002951r 3                       ; Is the same as
002951r 3                       ; R> R> SWAP. As with R>, the problem with the is word is that
002951r 3                       ; the top value on the ReturnStack for a STC Forth is the
002951r 3                       ; return address, which we need to get out of the way first.
002951r 3                       ; Native compile needs to be handled as a special case.
002951r 3                       ; """
002951r 3               xt_two_r_from:
002951r 3                               ; save the return address
002951r 3  68                           pla                     ; LSB
002952r 3  85 rr                        sta tmp1
002954r 3  68                           pla                     ; MSB
002955r 3  85 rr                        sta tmp1+1
002957r 3               
002957r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002957r 3               
002957r 3               		; make room on stack
002957r 3  CA                           dex
002958r 3  CA                           dex
002959r 3  CA                           dex
00295Ar 3  CA                           dex
00295Br 3               
00295Br 3                               ; In theory, we should test for underflow on the Return
00295Br 3                               ; Stack. However, given the traffic there with an STC
00295Br 3                               ; Forth, that's probably not really useful
00295Br 3               
00295Br 3                               ; now we can access the data
00295Br 3  68                           pla                     ; LSB
00295Cr 3  95 00                        sta 0,x
00295Er 3  68                           pla                     ; MSB
00295Fr 3  95 01                        sta 1,x
002961r 3               
002961r 3  68                           pla                     ; LSB
002962r 3  95 02                        sta 2,x
002964r 3  68                           pla                     ; MSB
002965r 3  95 03                        sta 3,x
002967r 3               
002967r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002967r 3               
002967r 3                               ; restore return address
002967r 3  A5 rr                        lda tmp1+1              ; MSB
002969r 3  48                           pha
00296Ar 3  A5 rr                        lda tmp1                ; LSB
00296Cr 3  48                           pha
00296Dr 3               
00296Dr 3  60           z_two_r_from:   rts
00296Er 3               
00296Er 3               
00296Er 3               ; ## TWO_SLASH ( n -- n ) "Divide TOS by two"
00296Er 3               ; ## "2/"  auto  ANS core
00296Er 3                       ; """https://forth-standard.org/standard/core/TwoDiv"""
00296Er 3               xt_two_slash:
00296Er 3  20 rr rr                     jsr underflow_1
002971r 3               
002971r 3                               ; We can't just LSR the LSB and ROR the MSB because that
002971r 3                               ; would do bad things to the sign
002971r 3  B5 01                        lda 1,x
002973r 3  0A                           asl                     ; save the sign
002974r 3  76 01                        ror 1,x
002976r 3  76 00                        ror 0,x
002978r 3               
002978r 3  60           z_two_slash:    rts
002979r 3               
002979r 3               
002979r 3               ; ## TWO_STAR ( n -- n ) "Multiply TOS by two"
002979r 3               ; ## "2*"  auto  ANS core
002979r 3                       ; """https://forth-standard.org/standard/core/TwoTimes
002979r 3                       ;
002979r 3                       ; Also used for CELLS
002979r 3                       ; """
002979r 3               xt_two_star:
002979r 3               xt_cells:
002979r 3  20 rr rr                     jsr underflow_1
00297Cr 3               
00297Cr 3  16 00                        asl 0,x
00297Er 3  36 01                        rol 1,x
002980r 3               z_cells:
002980r 3  60           z_two_star:     rts
002981r 3               
002981r 3               
002981r 3               ; ## TWO_STORE ( n1 n2 addr -- ) "Store two numbers at given address"
002981r 3               ; ## "2!"  auto  ANS core
002981r 3                       ; """https://forth-standard.org/standard/core/TwoStore
002981r 3                       ; Stores so n2 goes to addr and n1 to the next consecutive cell.
002981r 3                       ; Is equivalent to  `SWAP OVER ! CELL+ !`
002981r 3                       ; """
002981r 3               xt_two_store:
002981r 3  20 rr rr                     jsr underflow_3
002984r 3               
002984r 3  B5 00                        lda 0,x
002986r 3  85 rr                        sta tmp1
002988r 3  B4 01                        ldy 1,x
00298Ar 3  84 rr                        sty tmp1+1
00298Cr 3               
00298Cr 3  E8                           inx
00298Dr 3  E8                           inx
00298Er 3               
00298Er 3  B5 00                        lda 0,x         ; copy MSB
002990r 3  92 rr                        sta (tmp1)
002992r 3  B5 01                        lda 1,x         ; copy next
002994r 3  A0 01                        ldy #1
002996r 3  91 rr                        sta (tmp1),y
002998r 3  B5 02                        lda 2,x         ; copy next
00299Ar 3  C8                           iny
00299Br 3  91 rr                        sta (tmp1),y
00299Dr 3  B5 03                        lda 3,x         ; copy MSB
00299Fr 3  C8                           iny
0029A0r 3  91 rr                        sta (tmp1),y
0029A2r 3               
0029A2r 3  E8                           inx             ; 2DROP
0029A3r 3  E8                           inx
0029A4r 3  E8                           inx
0029A5r 3  E8                           inx
0029A6r 3               
0029A6r 3  60           z_two_store:    rts
0029A7r 3               
0029A7r 3               
0029A7r 3               ; ## TWO_SWAP ( n1 n2 n3 n4 -- n3 n4 n1 n1 ) "Exchange two double words"
0029A7r 3               ; ## "2swap"  auto  ANS core
0029A7r 3                       ; """https://forth-standard.org/standard/core/TwoSWAP"""
0029A7r 3               xt_two_swap:
0029A7r 3  20 rr rr                     jsr underflow_4
0029AAr 3               
0029AAr 3                               ; 0 <-> 4
0029AAr 3  B5 00                        lda 0,x
0029ACr 3  B4 04                        ldy 4,x
0029AEr 3  95 04                        sta 4,x
0029B0r 3  94 00                        sty 0,x
0029B2r 3               
0029B2r 3                               ; 1 <-> 5
0029B2r 3  B5 01                        lda 1,x
0029B4r 3  B4 05                        ldy 5,x
0029B6r 3  95 05                        sta 5,x
0029B8r 3  94 01                        sty 1,x
0029BAr 3               
0029BAr 3                               ; 2 <-> 6
0029BAr 3  B5 02                        lda 2,x
0029BCr 3  B4 06                        ldy 6,x
0029BEr 3  95 06                        sta 6,x
0029C0r 3  94 02                        sty 2,x
0029C2r 3               
0029C2r 3                               ; 3 <-> 7
0029C2r 3  B5 03                        lda 3,x
0029C4r 3  B4 07                        ldy 7,x
0029C6r 3  95 07                        sta 7,x
0029C8r 3  94 03                        sty 3,x
0029CAr 3               
0029CAr 3  60           z_two_swap:     rts
0029CBr 3               
0029CBr 3               
0029CBr 3               ; ## TWO_TO_R ( n1 n2 -- )(R: -- n1 n2 "Push top two entries to Return Stack"
0029CBr 3               ; ## "2>r"  auto  ANS core ext
0029CBr 3                       ; """https://forth-standard.org/standard/core/TwotoR
0029CBr 3                       ; Push top two entries to Return Stack.
0029CBr 3                       ;
0029CBr 3                       ; The same as SWAP >R >R
0029CBr 3                       ; except that if we jumped here, the return address will be in the
0029CBr 3                       ; way. May not be natively compiled unless we're clever and use
0029CBr 3                       ; special routines.
0029CBr 3                       ; """
0029CBr 3               xt_two_to_r:
0029CBr 3                               ; save the return address
0029CBr 3  68                           pla             ; LSB
0029CCr 3  85 rr                        sta tmp1
0029CEr 3  68                           pla             ; MSB
0029CFr 3  85 rr                        sta tmp1+1
0029D1r 3               
0029D1r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0029D1r 3               
0029D1r 3  20 rr rr                     jsr underflow_2
0029D4r 3               
0029D4r 3                               ; now we can move the data
0029D4r 3  B5 03                        lda 3,x         ; MSB
0029D6r 3  48                           pha
0029D7r 3  B5 02                        lda 2,x         ; LSB
0029D9r 3  48                           pha
0029DAr 3               
0029DAr 3                               ; now we can move the data
0029DAr 3  B5 01                        lda 1,x         ; MSB
0029DCr 3  48                           pha
0029DDr 3  B5 00                        lda 0,x         ; LSB
0029DFr 3  48                           pha
0029E0r 3               
0029E0r 3  E8                           inx
0029E1r 3  E8                           inx
0029E2r 3  E8                           inx
0029E3r 3  E8                           inx
0029E4r 3               
0029E4r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0029E4r 3               
0029E4r 3                               ; restore return address
0029E4r 3  A5 rr                        lda tmp1+1      ; MSB
0029E6r 3  48                           pha
0029E7r 3  A5 rr                        lda tmp1        ; LSB
0029E9r 3  48                           pha
0029EAr 3               
0029EAr 3  60           z_two_to_r:     rts
0029EBr 3               
0029EBr 3               
0029EBr 3               ; ## TWO_CONSTANT (C: d "name" -- ) ( -- d) "Create a constant for a double word"
0029EBr 3               ; ## "2constant"  auto  ANS double
0029EBr 3                       ; """https://forth-standard.org/standard/double/TwoCONSTANT
0029EBr 3                       ;
0029EBr 3                       ; Based on the Forth code
0029EBr 3                       ; : 2CONSTANT ( D -- )  CREATE SWAP , , DOES> DUP @ SWAP CELL+ @ ;
0029EBr 3                       ; """
0029EBr 3               xt_two_constant:
0029EBr 3  20 rr rr                     jsr underflow_2
0029EEr 3               
0029EEr 3  20 rr rr                     jsr xt_create
0029F1r 3  20 rr rr                     jsr xt_swap
0029F4r 3  20 rr rr                     jsr xt_comma
0029F7r 3  20 rr rr                     jsr xt_comma
0029FAr 3               
0029FAr 3  20 rr rr                     jsr does_runtime    ; does> turns into these two routines.
0029FDr 3  20 rr rr                     jsr dodoes
002A00r 3               
002A00r 3  20 rr rr                     jsr xt_dup
002A03r 3  20 rr rr                     jsr xt_fetch
002A06r 3  20 rr rr                     jsr xt_swap
002A09r 3  20 rr rr                     jsr xt_cell_plus
002A0Cr 3  20 rr rr                     jsr xt_fetch
002A0Fr 3               
002A0Fr 3  60           z_two_constant: rts
002A10r 3               
002A10r 3               
002A10r 3               ; ## TWO_LITERAL (C: d -- ) ( -- d) "Compile a literal double word"
002A10r 3               ; ## "2literal"  auto  ANS double
002A10r 3                       ; """https://forth-standard.org/standard/double/TwoLITERAL"""
002A10r 3                       ; Based on the Forth code
002A10r 3                       ; : 2LITERAL ( D -- ) SWAP POSTPONE LITERAL POSTPONE LITERAL ; IMMEDIATE
002A10r 3                       ; """
002A10r 3               xt_two_literal:
002A10r 3  20 rr rr                     jsr underflow_2 ; double number
002A13r 3               
002A13r 3  20 rr rr                     jsr xt_swap
002A16r 3  20 rr rr                     jsr xt_literal
002A19r 3  20 rr rr                     jsr xt_literal
002A1Cr 3               
002A1Cr 3  60           z_two_literal:  rts
002A1Dr 3               
002A1Dr 3               
002A1Dr 3               ; ## TWO_VARIABLE ( "name" -- ) "Create a variable for a double word"
002A1Dr 3               ; ## "2variable"  auto  ANS double
002A1Dr 3                       ; """https://forth-standard.org/standard/double/TwoVARIABLE
002A1Dr 3                       ; The variable is not initialized to zero.
002A1Dr 3                       ;
002A1Dr 3                       ; This can be realized in Forth as either
002A1Dr 3                       ; CREATE 2 CELLS ALLOT  or just  CREATE 0 , 0 ,
002A1Dr 3                       ; """
002A1Dr 3               xt_two_variable:
002A1Dr 3                               ; We just let CRATE and ALLOT do the heavy lifting
002A1Dr 3  20 rr rr                     jsr xt_create
002A20r 3               
002A20r 3  CA                           dex
002A21r 3  CA                           dex
002A22r 3  A9 04                        lda #4
002A24r 3  95 00                        sta 0,x
002A26r 3  74 01                        stz 1,x
002A28r 3               
002A28r 3  20 rr rr                     jsr xt_allot
002A2Br 3               
002A2Br 3  60           z_two_variable: rts
002A2Cr 3               
002A2Cr 3               
002A2Cr 3               ; ## TYPE ( addr u -- ) "Print string"
002A2Cr 3               ; ## "type"  auto  ANS core
002A2Cr 3                       ; """https://forth-standard.org/standard/core/TYPE
002A2Cr 3                       ; Works through EMIT to allow OUTPUT revectoring.
002A2Cr 3                       ; """
002A2Cr 3               
002A2Cr 3               xt_type:
002A2Cr 3  20 rr rr                     jsr underflow_2
002A2Fr 3               
002A2Fr 3                               ; Save the starting address into tmp1
002A2Fr 3  B5 02                        lda 2,x
002A31r 3  85 rr                        sta tmp1
002A33r 3  B5 03                        lda 3,x
002A35r 3  85 rr                        sta tmp1+1
002A37r 3               @loop:
002A37r 3                               ; done if length is zero
002A37r 3  B5 00                        lda 0,x
002A39r 3  15 01                        ora 1,x
002A3Br 3  F0 15                        beq @done
002A3Dr 3               
002A3Dr 3                               ; Send the current character
002A3Dr 3  B2 rr                        lda (tmp1)
002A3Fr 3  20 rr rr                     jsr emit_a      ; avoids stack foolery
002A42r 3               
002A42r 3                               ; Move the address along (in tmp1)
002A42r 3  E6 rr                        inc tmp1
002A44r 3  D0 02                        bne @1
002A46r 3  E6 rr                        inc tmp1+1
002A48r 3               @1:
002A48r 3                               ; Reduce the count (on the data stack)
002A48r 3  B5 00                        lda 0,x
002A4Ar 3  D0 02                        bne @2
002A4Cr 3  D6 01                        dec 1,x
002A4Er 3               @2:
002A4Er 3  D6 00                        dec 0,x
002A50r 3               
002A50r 3  80 E5                        bra @loop
002A52r 3               @done:
002A52r 3  E8                           inx
002A53r 3  E8                           inx
002A54r 3  E8                           inx
002A55r 3  E8                           inx
002A56r 3               
002A56r 3  60           z_type:         rts
002A57r 3               
002A57r 3               
002A57r 3               
002A57r 3               ; ## U_DOT ( u -- ) "Print TOS as unsigned number"
002A57r 3               ; ## "u."  tested  ANS core
002A57r 3                       ; """https://forth-standard.org/standard/core/Ud
002A57r 3                       ;
002A57r 3                       ; This is : U. 0 <# #S #> TYPE SPACE ; in Forth
002A57r 3                       ; We use the internal assembler function print_u followed
002A57r 3                       ; by a single space
002A57r 3                       ; """
002A57r 3               xt_u_dot:
002A57r 3  20 rr rr                     jsr underflow_1
002A5Ar 3               
002A5Ar 3  20 rr rr                     jsr print_u
002A5Dr 3  A9 20                        lda #AscSP
002A5Fr 3  20 rr rr                     jsr emit_a
002A62r 3               
002A62r 3  60           z_u_dot:        rts
002A63r 3               
002A63r 3               
002A63r 3               ; ## U_DOT_R ( u u -- ) "Print NOS as unsigned number right-justified with TOS width"
002A63r 3               ; ## "u.r"  tested  ANS core ext
002A63r 3                       ; """https://forth-standard.org/standard/core/UDotR"""
002A63r 3               xt_u_dot_r:
002A63r 3  20 rr rr                     jsr underflow_2
002A66r 3               
002A66r 3  20 rr rr                     jsr xt_to_r
002A69r 3  20 rr rr                     jsr xt_zero
002A6Cr 3  20 rr rr                     jsr xt_less_number_sign
002A6Fr 3  20 rr rr                     jsr xt_number_sign_s
002A72r 3  20 rr rr                     jsr xt_number_sign_greater
002A75r 3  20 rr rr                     jsr xt_r_from
002A78r 3  20 rr rr                     jsr xt_over
002A7Br 3  20 rr rr                     jsr xt_minus
002A7Er 3  20 rr rr                     jsr xt_spaces
002A81r 3  20 rr rr                     jsr xt_type
002A84r 3               
002A84r 3  60           z_u_dot_r:      rts
002A85r 3               
002A85r 3               
002A85r 3               ; ## U_GREATER_THAN ( n m -- f ) "Return true if NOS > TOS (unsigned)"
002A85r 3               ; ## "u>"  auto  ANS core ext
002A85r 3                       ; """https://forth-standard.org/standard/core/Umore"""
002A85r 3               xt_u_greater_than:
002A85r 3  20 rr rr                     jsr underflow_2
002A88r 3               
002A88r 3  B5 00                        lda 0,x
002A8Ar 3  D5 02                        cmp 2,x
002A8Cr 3  B5 01                        lda 1,x
002A8Er 3  F5 03                        sbc 3,x
002A90r 3  E8                           inx
002A91r 3  E8                           inx
002A92r 3               
002A92r 3  A9 00                        lda #0
002A94r 3  69 FF                        adc #$ff
002A96r 3  95 00                        sta 0,x         ; store flag
002A98r 3  95 01                        sta 1,x
002A9Ar 3               
002A9Ar 3  60           z_u_greater_than:    rts
002A9Br 3               
002A9Br 3               ; ## U_LESS_THAN ( n m -- f ) "Return true if NOS < TOS (unsigned)"
002A9Br 3               ; ## "u<"  auto  ANS core
002A9Br 3                       ; """https://forth-standard.org/standard/core/Uless"""
002A9Br 3               xt_u_less_than:
002A9Br 3  20 rr rr                     jsr underflow_2
002A9Er 3               
002A9Er 3  B5 02                        lda 2,x
002AA0r 3  D5 00                        cmp 0,x
002AA2r 3  B5 03                        lda 3,x
002AA4r 3  F5 01                        sbc 1,x
002AA6r 3  E8                           inx
002AA7r 3  E8                           inx
002AA8r 3               
002AA8r 3  A9 00                        lda #0
002AAAr 3  69 FF                        adc #$ff
002AACr 3  95 00                        sta 0,x         ; store flag
002AAEr 3  95 01                        sta 1,x
002AB0r 3               
002AB0r 3  60           z_u_less_than:    rts
002AB1r 3               
002AB1r 3               
002AB1r 3               ; ## UD_DOT ( d -- ) "Print double as unsigned"
002AB1r 3               ; ## "ud."  auto  Tali double
002AB1r 3                       ;
002AB1r 3                       ; """Based on the Forth code  : UD. <# #S #> TYPE SPACE ;
002AB1r 3                       ; """
002AB1r 3               xt_ud_dot:
002AB1r 3  20 rr rr                     jsr underflow_2 ; double number
002AB4r 3               
002AB4r 3  20 rr rr                     jsr xt_less_number_sign
002AB7r 3  20 rr rr                     jsr xt_number_sign_s
002ABAr 3  20 rr rr                     jsr xt_number_sign_greater
002ABDr 3  20 rr rr                     jsr xt_type
002AC0r 3  20 rr rr                     jsr xt_space
002AC3r 3               
002AC3r 3  60           z_ud_dot:        rts
002AC4r 3               
002AC4r 3               
002AC4r 3               ; ## UD_DOT_R ( d u -- ) "Print unsigned double right-justified u wide"
002AC4r 3               ; ## "ud.r"  auto  Tali double
002AC4r 3                       ;
002AC4r 3                       ; """Based on the Forth code : UD.R  >R <# #S #> R> OVER - SPACES TYPE ;
002AC4r 3                       ; """
002AC4r 3               xt_ud_dot_r:
002AC4r 3  20 rr rr                     jsr underflow_3
002AC7r 3               
002AC7r 3  20 rr rr                     jsr xt_to_r
002ACAr 3  20 rr rr                     jsr xt_less_number_sign
002ACDr 3  20 rr rr                     jsr xt_number_sign_s
002AD0r 3  20 rr rr                     jsr xt_number_sign_greater
002AD3r 3  20 rr rr                     jsr xt_r_from
002AD6r 3  20 rr rr                     jsr xt_over
002AD9r 3  20 rr rr                     jsr xt_minus
002ADCr 3  20 rr rr                     jsr xt_spaces
002ADFr 3  20 rr rr                     jsr xt_type
002AE2r 3               
002AE2r 3  60           z_ud_dot_r:      rts
002AE3r 3               
002AE3r 3               
002AE3r 3               ; ## UM_SLASH_MOD ( ud u -- ur u ) "32/16 -> 16 division"
002AE3r 3               ; ## "um/mod"  auto  ANS core
002AE3r 3                       ; """https://forth-standard.org/standard/core/UMDivMOD
002AE3r 3                       ; Divide double cell number by single cell number, returning the
002AE3r 3                       ; quotient as TOS and any remainder as NOS. All numbers are unsigned.
002AE3r 3                       ; This is the basic division operation all others use. Based on FIG
002AE3r 3                       ; Forth code, modified by Garth Wilson, see
002AE3r 3                       ; http://6502.org/source/integers/ummodfix/ummodfix.htm
002AE3r 3                       ;
002AE3r 3                       ; This uses tmp1, tmp1+1, and tmptos
002AE3r 3                       ; """
002AE3r 3               
002AE3r 3               xt_um_slash_mod:
002AE3r 3  20 rr rr                     jsr underflow_3
002AE6r 3               
002AE6r 3                               ; catch division by zero
002AE6r 3  B5 00                        lda 0,x
002AE8r 3  15 01                        ora 1,x
002AEAr 3  D0 05                        bne @not_zero
002AECr 3               
002AECr 3  A9 04                        lda #err_divzero
002AEEr 3  4C rr rr                     jmp error
002AF1r 3               
002AF1r 3               @not_zero:
002AF1r 3                               ; We loop 17 times
002AF1r 3  A9 11                        lda #17
002AF3r 3  85 rr                        sta tmptos
002AF5r 3               
002AF5r 3               @loop:
002AF5r 3                               ; rotate low cell of dividend one bit left (LSB)
002AF5r 3  36 04                        rol 4,x
002AF7r 3  36 05                        rol 5,x
002AF9r 3               
002AF9r 3                               ; loop control
002AF9r 3  C6 rr                        dec tmptos
002AFBr 3  F0 22                        beq @done
002AFDr 3               
002AFDr 3                               ; rotate high cell of dividend one bit left (MSB)
002AFDr 3  36 02                        rol 2,x
002AFFr 3  36 03                        rol 3,x
002B01r 3               
002B01r 3  64 rr                        stz tmp1        ; store the bit we got from hi cell (MSB)
002B03r 3  26 rr                        rol tmp1
002B05r 3               
002B05r 3                               ; subtract dividend hi cell minus divisor
002B05r 3  38                           sec
002B06r 3  B5 02                        lda 2,x
002B08r 3  F5 00                        sbc 0,x
002B0Ar 3  85 rr                        sta tmp1+1
002B0Cr 3  B5 03                        lda 3,x
002B0Er 3  F5 01                        sbc 1,x
002B10r 3               
002B10r 3  A8                           tay
002B11r 3  A5 rr                        lda tmp1
002B13r 3  E9 00                        sbc #0
002B15r 3  90 DE                        bcc @loop
002B17r 3               
002B17r 3                               ; make result new dividend high cell
002B17r 3  A5 rr                        lda tmp1+1
002B19r 3  95 02                        sta 2,x
002B1Br 3  94 03                        sty 3,x         ; used as temp storage
002B1Dr 3               
002B1Dr 3  80 D6                        bra @loop
002B1Fr 3               @done:
002B1Fr 3  E8                           inx
002B20r 3  E8                           inx
002B21r 3               
002B21r 3  20 rr rr                     jsr xt_swap
002B24r 3               
002B24r 3  60           z_um_slash_mod: rts
002B25r 3               
002B25r 3               
002B25r 3               
002B25r 3               ; ## UM_STAR ( u u -- ud ) "Multiply 16 x 16 -> 32"
002B25r 3               ; ## "um*"  auto  ANS core
002B25r 3                       ; """https://forth-standard.org/standard/core/UMTimes
002B25r 3                       ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.
002B25r 3                       ; Old Forth versions such as FIG Forth call this U*
002B25r 3                       ;
002B25r 3                       ; This is based on modified FIG Forth code by Dr. Jefyll, see
002B25r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed
002B25r 3                       ; discussion.
002B25r 3                       ;
002B25r 3                       ; We don't use the system scratch pad (SYSPAD) for temp
002B25r 3                       ; storage because >NUMBER uses it as well, but instead tmp1 to
002B25r 3                       ; tmp3 (tmp1 is N in the original code, tmp1+1 is N+1, etc).
002B25r 3                       ;
002B25r 3                       ; Consider switching to a table-supported version based on
002B25r 3                       ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
002B25r 3                       ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d>
002B25r 3                       ; http://forum.6502.org/viewtopic.php?p=205#p205
002B25r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689
002B25r 3                       ; """
002B25r 3               
002B25r 3               xt_um_star:
002B25r 3  20 rr rr                     jsr underflow_2
002B28r 3               
002B28r 3                               ; to eliminate clc inside the loop, the value at
002B28r 3                               ; tmp1 is reduced by 1 in advance
002B28r 3  18                           clc
002B29r 3  B5 00                        lda 0,x         ; copy TOS to tmp2
002B2Br 3  E9 00                        sbc #0
002B2Dr 3  85 rr                        sta tmp2
002B2Fr 3               
002B2Fr 3  B5 01                        lda 1,x
002B31r 3  E9 00                        sbc #0
002B33r 3  90 31                        bcc @zero       ; is TOS zero?
002B35r 3  85 rr                        sta tmp2+1
002B37r 3               
002B37r 3  A9 00                        lda #0
002B39r 3  85 rr                        sta tmp1
002B3Br 3  86 rr                        stx tmp3        ; tested for exit from outer loop
002B3Dr 3  CA                           dex
002B3Er 3  CA                           dex
002B3Fr 3               
002B3Fr 3               @outer_loop:
002B3Fr 3  A0 08                        ldy #8          ; counter inner loop
002B41r 3  56 04                        lsr 4,x         ; think "2,x" then later "3,x"
002B43r 3               
002B43r 3               @inner_loop:
002B43r 3  90 0C                        bcc @no_add
002B45r 3  85 rr                        sta tmp1+1      ; save time, don't CLC
002B47r 3  A5 rr                        lda tmp1
002B49r 3  65 rr                        adc tmp2
002B4Br 3  85 rr                        sta tmp1
002B4Dr 3  A5 rr                        lda tmp1+1
002B4Fr 3  65 rr                        adc tmp2+1
002B51r 3               
002B51r 3               @no_add:
002B51r 3  6A                           ror
002B52r 3  66 rr                        ror tmp1
002B54r 3  76 04                        ror 4,x         ; think "2,x" then later "3,x"
002B56r 3               
002B56r 3  88                           dey
002B57r 3  D0 EA                        bne @inner_loop ; go back for one more shift?
002B59r 3               
002B59r 3  E8                           inx
002B5Ar 3  E4 rr                        cpx tmp3
002B5Cr 3  D0 E1                        bne @outer_loop ; go back for eight more shifts?
002B5Er 3               
002B5Er 3                               ; all done, store high word of result
002B5Er 3  95 01                        sta 1,x
002B60r 3  A5 rr                        lda tmp1
002B62r 3  95 00                        sta 0,x
002B64r 3  80 04                        bra @done
002B66r 3               
002B66r 3               @zero:
002B66r 3  74 02                        stz 2,x
002B68r 3  74 03                        stz 3,x
002B6Ar 3               @done:
002B6Ar 3  60           z_um_star:      rts
002B6Br 3               
002B6Br 3               
002B6Br 3               
002B6Br 3               ; ## UNLOOP ( -- )(R: n1 n2 n3 ---) "Drop loop control from Return stack"
002B6Br 3               ; ## "unloop"  auto  ANS core
002B6Br 3                       ; """https://forth-standard.org/standard/core/UNLOOP
002B6Br 3                       ;
002B6Br 3                       ; Note that 6xPLA uses just as many bytes as a loop would
002B6Br 3                       ; """
002B6Br 3               xt_unloop:
002B6Br 3                               ; Drop fudge number (limit/start from DO/?DO off the
002B6Br 3                               ; return stack
002B6Br 3  68                           pla
002B6Cr 3  68                           pla
002B6Dr 3  68                           pla
002B6Er 3  68                           pla
002B6Fr 3               
002B6Fr 3                               ; Now drop the LEAVE address that was below them off
002B6Fr 3                               ; the Return Stack as well
002B6Fr 3  68                           pla
002B70r 3  68                           pla
002B71r 3               
002B71r 3  60           z_unloop:       rts
002B72r 3               
002B72r 3               
002B72r 3               ; ## UNTIL (C: dest -- ) ( -- ) "Loop flow control"
002B72r 3               ; ## "until"  auto  ANS core
002B72r 3                       ; """http://forth-standard.org/standard/core/UNTIL"""
002B72r 3               xt_until:
002B72r 3                               ; Compile a 0BRANCH
002B72r 3  A0 rr                        ldy #>zero_branch_runtime
002B74r 3  A9 rr                        lda #<zero_branch_runtime
002B76r 3  20 rr rr                     jsr cmpl_subroutine
002B79r 3               
002B79r 3                               ; The address to loop back to is on the stack.
002B79r 3                               ; Just compile it as the destination for the
002B79r 3                               ; 0branch.
002B79r 3  20 rr rr                     jsr xt_comma
002B7Cr 3               
002B7Cr 3  60           z_until:        rts
002B7Dr 3               
002B7Dr 3               
002B7Dr 3               ; ## UNUSED ( -- u ) "Return size of space available to Dictionary"
002B7Dr 3               ; ## "unused"  auto  ANS core ext
002B7Dr 3                       ; """https://forth-standard.org/standard/core/UNUSED
002B7Dr 3                       ; UNUSED does not include the ACCEPT history buffers. Total RAM
002B7Dr 3                       ; should be HERE + UNUSED + <history buffer size>, the last of which
002B7Dr 3                       ; defaults to $400
002B7Dr 3                       ; """
002B7Dr 3               xt_unused:
002B7Dr 3  CA                           dex
002B7Er 3  CA                           dex
002B7Fr 3               
002B7Fr 3  A9 FF                        lda #<cp_end
002B81r 3  38                           sec
002B82r 3  E5 rr                        sbc cp
002B84r 3  95 00                        sta 0,x
002B86r 3               
002B86r 3  A9 7F                        lda #>cp_end
002B88r 3  E5 rr                        sbc cp+1
002B8Ar 3  95 01                        sta 1,x
002B8Cr 3               
002B8Cr 3  60           z_unused:       rts
002B8Dr 3               
002B8Dr 3               
002B8Dr 3               ; ## UPDATE ( -- ) "Mark current block as dirty"
002B8Dr 3               ; ## "update"  auto  ANS block
002B8Dr 3                       ; """https://forth-standard.org/standard/block/UPDATE"""
002B8Dr 3               xt_update:
002B8Dr 3                               ; Turn on the dirty bit. We can't use TSB here because it only
002B8Dr 3                               ; has Absolute and Direct Pages addressing modes
002B8Dr 3  A0 2C                        ldy #buffstatus_offset
002B8Fr 3  B1 rr                        lda (up),y
002B91r 3  09 02                        ora #2          ; Turn on dirty flag (bit 2)
002B93r 3  91 rr                        sta (up),y
002B95r 3               
002B95r 3  60           z_update:       rts
002B96r 3               
002B96r 3               
002B96r 3               ; ## USERADDR ( -- addr ) "Push address of base address of user variables"
002B96r 3               ; ## "useraddr"  tested  Tali Forth
002B96r 3               xt_useraddr:
002B96r 3  CA                           dex
002B97r 3  CA                           dex
002B98r 3  A9 rr                        lda #<up
002B9Ar 3  95 00                        sta 0,x
002B9Cr 3  A9 rr                        lda #>up
002B9Er 3  95 01                        sta 1,x
002BA0r 3               
002BA0r 3  60           z_useraddr:     rts
002BA1r 3               
002BA1r 3               
002BA1r 3               ; ## VALUE ( n "name" -- ) "Define a value"
002BA1r 3               ; ## "value"  auto  ANS core
002BA1r 3                       ; """https://forth-standard.org/standard/core/VALUE
002BA1r 3                       ;
002BA1r 3                       ; This is a dummy header for the WORDLIST. The actual code is
002BA1r 3                       ; identical to that of CONSTANT
002BA1r 3                       ; """
002BA1r 3               
002BA1r 3               
002BA1r 3               ; ## VARIABLE ( "name" -- ) "Define a variable"
002BA1r 3               ; ## "variable"  auto  ANS core
002BA1r 3                       ; """https://forth-standard.org/standard/core/VARIABLE
002BA1r 3                       ; There are various Forth definitions for this word, such as
002BA1r 3                       ; `CREATE 1 CELLS ALLOT`  or  `CREATE 0 ,`  We use a variant of the
002BA1r 3                       ; second one so the variable is initialized to zero
002BA1r 3                       ; """
002BA1r 3               xt_variable:
002BA1r 3                               ; we let CREATE do the heavy lifting
002BA1r 3  20 rr rr                     jsr xt_create
002BA4r 3               
002BA4r 3                               ; there is no "STZ (CP)" so we have to do this the hard
002BA4r 3                               ; way
002BA4r 3  A9 00                        lda #0
002BA6r 3               
002BA6r 3  92 rr                        sta (cp)
002BA8r 3  E6 rr                        inc cp
002BAAr 3  D0 02                        bne @1
002BACr 3  E6 rr                        inc cp+1
002BAEr 3               @1:
002BAEr 3  92 rr                        sta (cp)
002BB0r 3  E6 rr                        inc cp
002BB2r 3  D0 02                        bne @2
002BB4r 3  E6 rr                        inc cp+1
002BB6r 3               @2:
002BB6r 3                               ; Now we need to adjust the length of the complete word by two
002BB6r 3  20 rr rr                     jsr adjust_z
002BB9r 3               
002BB9r 3  60           z_variable:     rts
002BBAr 3               
002BBAr 3               
002BBAr 3               ; ## WHILE ( C: dest -- orig dest ) ( x -- ) "Loop flow control"
002BBAr 3               ; ## "while"  auto  ANS core
002BBAr 3                       ; """http://forth-standard.org/standard/core/WHILE"""
002BBAr 3               xt_while:
002BBAr 3                               ; Compile a 0branch
002BBAr 3  A0 rr                        ldy #>zero_branch_runtime
002BBCr 3  A9 rr                        lda #<zero_branch_runtime
002BBEr 3  20 rr rr                     jsr cmpl_subroutine
002BC1r 3               
002BC1r 3                               ; Put the address (here) where the destination
002BC1r 3                               ; address needs to go so it can be put there later.
002BC1r 3  20 rr rr                     jsr xt_here
002BC4r 3               
002BC4r 3                               ; Fill in the destination address with 0 for now.
002BC4r 3  20 rr rr                     jsr xt_zero
002BC7r 3  20 rr rr                     jsr xt_comma
002BCAr 3               
002BCAr 3                               ; Swap the two addresses on the stack.
002BCAr 3  20 rr rr                     jsr xt_swap
002BCDr 3               
002BCDr 3  60           z_while:        rts
002BCEr 3               
002BCEr 3               
002BCEr 3               ; ## WITHIN ( n1 n2 n3 -- ) "See if within a range"
002BCEr 3               ; ## "within"  auto  ANS core ext
002BCEr 3                       ; """https://forth-standard.org/standard/core/WITHIN
002BCEr 3                       ;
002BCEr 3                       ; This an assembler version of the ANS Forth implementation
002BCEr 3                       ; at https://forth-standard.org/standard/core/WITHIN which is
002BCEr 3                       ; OVER - >R - R> U<  note there is an alternative high-level version
002BCEr 3                       ; ROT TUCK > -ROT > INVERT AND
002BCEr 3                       ; """"
002BCEr 3               xt_within:
002BCEr 3  20 rr rr                     jsr underflow_3
002BD1r 3               
002BD1r 3  20 rr rr                     jsr xt_over
002BD4r 3  20 rr rr                     jsr xt_minus
002BD7r 3  20 rr rr                     jsr xt_to_r
002BDAr 3  20 rr rr                     jsr xt_minus
002BDDr 3  20 rr rr                     jsr xt_r_from
002BE0r 3  20 rr rr                     jsr xt_u_less_than
002BE3r 3               
002BE3r 3  60           z_within:       rts
002BE4r 3               
002BE4r 3               
002BE4r 3               ; ## WORD ( char "name " -- caddr ) "Parse input stream"
002BE4r 3               ; ## "word"  auto  ANS core
002BE4r 3                       ; """https://forth-standard.org/standard/core/WORD
002BE4r 3                       ; Obsolete parsing word included for backwards compatibility only.
002BE4r 3                       ; Do not use this, use `PARSE` or `PARSE-NAME`. Skips leading delimiters
002BE4r 3                       ; and copies word to storage area for a maximum size of 255 bytes.
002BE4r 3                       ; Returns the result as a counted string (requires COUNT to convert
002BE4r 3                       ; to modern format), and inserts a space after the string. See "Forth
002BE4r 3                       ; Programmer's Handbook" 3rd edition p. 159 and
002BE4r 3                       ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
002BE4r 3                       ; for discussions of why you shouldn't be using WORD anymore.
002BE4r 3                       ;
002BE4r 3                       ; Forth
002BE4r 3                       ; would be   PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
002BE4r 3                       ; We only allow input of 255 chars. Seriously, use PARSE-NAME.
002BE4r 3                       ; """
002BE4r 3               
002BE4r 3               xt_word:
002BE4r 3  20 rr rr                     jsr underflow_1
002BE7r 3               
002BE7r 3                               ; Skip over leading delimiters - this is like PARSE-NAME,
002BE7r 3                               ; but unlike PARSE
002BE7r 3  A4 rr                        ldy toin                ; >IN
002BE9r 3               @loop:
002BE9r 3  C4 rr                        cpy ciblen              ; quit if end of input
002BEBr 3  F0 09                        beq @found_char
002BEDr 3  B1 rr                        lda (cib),y
002BEFr 3  D5 00                        cmp 0,x                 ; ASCII of delimiter
002BF1r 3  D0 03                        bne @found_char
002BF3r 3               
002BF3r 3  C8                           iny
002BF4r 3  80 F3                        bra @loop
002BF6r 3               @found_char:
002BF6r 3                               ; Save index of where word starts
002BF6r 3  84 rr                        sty toin
002BF8r 3               
002BF8r 3                               ; The real work is done by parse
002BF8r 3  20 rr rr                     jsr xt_parse            ; Returns ( addr u )
002BFBr 3               
002BFBr 3                               ; Convert the modern ( addr u ) string format to obsolete
002BFBr 3                               ; ( caddr ) format. We just do this in the Dictionary
002BFBr 3  B5 00                        lda 0,x
002BFDr 3  92 rr                        sta (cp)                ; Save length of string
002BFFr 3  48                           pha                     ; Keep copy of length for later
002C00r 3               
002C00r 3  20 rr rr                     jsr xt_dup              ; ( addr u u )
002C03r 3  A5 rr                        lda cp
002C05r 3  18                           clc
002C06r 3  69 01                        adc #1
002C08r 3  95 02                        sta 2,x                 ; LSB of CP
002C0Ar 3  A5 rr                        lda cp+1
002C0Cr 3  69 00                        adc #0
002C0Er 3  95 03                        sta 3,x                 ; ( addr cp+1 u )
002C10r 3               
002C10r 3  20 rr rr                     jsr xt_move
002C13r 3               
002C13r 3                               ; Return caddr
002C13r 3  CA                           dex
002C14r 3  CA                           dex
002C15r 3  A5 rr                        lda cp
002C17r 3  95 00                        sta 0,x
002C19r 3  A5 rr                        lda cp+1
002C1Br 3  95 01                        sta 1,x
002C1Dr 3               
002C1Dr 3                               ; Adjust CP
002C1Dr 3  68                           pla                     ; length of string
002C1Er 3  18                           clc
002C1Fr 3  65 rr                        adc cp
002C21r 3  85 rr                        sta cp
002C23r 3  A5 rr                        lda cp+1
002C25r 3  69 00                        adc #0                  ; we only need the carry
002C27r 3  85 rr                        sta cp+1
002C29r 3  60           z_word:         rts
002C2Ar 3               
002C2Ar 3               
002C2Ar 3               ; ## WORDLIST ( -- wid ) "Create new wordlist (from pool of 8)"
002C2Ar 3               ; ## "wordlist" auto ANS search
002C2Ar 3                       ; """https://forth-standard.org/standard/search/WORDLIST
002C2Ar 3                       ; See the tutorial on Wordlists and the Search Order for
002C2Ar 3                       ; more information.
002C2Ar 3                       ; """
002C2Ar 3               
002C2Ar 3               xt_wordlist:
002C2Ar 3                               ; Get the current number of wordlists
002C2Ar 3  A0 05                        ldy #num_wordlists_offset
002C2Cr 3  B1 rr                        lda (up),y      ; This is a byte variable, so only
002C2Er 3                                               ; the LSB needs to be checked.
002C2Er 3               
002C2Er 3                               ; See if we are already at the max.
002C2Er 3  C9 0C                        cmp #max_wordlists
002C30r 3  D0 05                        bne @ok
002C32r 3               
002C32r 3                               ; Print an error message if all wordlists used.
002C32r 3  A9 0B                        lda #err_wordlist
002C34r 3  4C rr rr                     jmp error
002C37r 3               
002C37r 3               @ok:
002C37r 3  1A                           inc             ; Increment the wordlist#
002C38r 3  91 rr                        sta (up),y      ; Save it into byte variable #wordlists
002C3Ar 3  CA                           dex             ; and put it on the stack.
002C3Br 3  CA                           dex
002C3Cr 3  95 00                        sta 0,x
002C3Er 3  74 01                        stz 1,x         ; 12 is the max, so upper byte is always zero.
002C40r 3               
002C40r 3  60           z_wordlist:     rts
002C41r 3               
002C41r 3               
002C41r 3               
002C41r 3               ; ## WORDS ( -- ) "Print known words from Dictionary"
002C41r 3               ; ## "words"  tested  ANS tools
002C41r 3                       ; """https://forth-standard.org/standard/tools/WORDS
002C41r 3                       ; This is pretty much only used at the command line so we can
002C41r 3                       ; be slow and try to save space.
002C41r 3                       ; """
002C41r 3               
002C41r 3               xt_words:
002C41r 3                               ; we follow Gforth by starting on the next
002C41r 3                               ; line
002C41r 3  20 rr rr                     jsr xt_cr
002C44r 3               
002C44r 3                               ; We pretty-format the output by inserting a line break
002C44r 3                               ; before the end of the line. We can get away with pushing
002C44r 3                               ; the counter to the stack because this is usually an
002C44r 3                               ; interactive word and speed is not that important
002C44r 3  A9 00                        lda #0
002C46r 3  48                           pha
002C47r 3               
002C47r 3                               ; Set up for traversing the wordlist search order.
002C47r 3  CA                           dex                     ; Make room on the stack for
002C48r 3  CA                           dex                     ; a dictionary pointer.
002C49r 3  64 rr                        stz tmp3                ; Start at the beginning of
002C4Br 3                                                       ; the search order.
002C4Br 3               @wordlist_loop:
002C4Br 3  A0 1E                        ldy #num_order_offset   ; Check against byte variable #ORDER.
002C4Dr 3  A5 rr                        lda tmp3
002C4Fr 3  D1 rr                        cmp (up),y              ; See if we are done.
002C51r 3  D0 02                        bne @have_wordlist
002C53r 3               
002C53r 3                               ; We ran out of wordlists to search.
002C53r 3  80 45                        bra @words_done
002C55r 3               
002C55r 3               @have_wordlist:
002C55r 3                               ; start with last word in Dictionary
002C55r 3                               ; Get the current wordlist id
002C55r 3  18                           clc                     ; Index into byte array SEARCH-ORDER.
002C56r 3  69 1F                        adc #search_order_offset
002C58r 3  A8                           tay
002C59r 3  B1 rr                        lda (up),y              ; Get the index into array WORDLISTS
002C5Br 3               
002C5Br 3                               ; Get the DP for that wordlist.
002C5Br 3  0A                           asl                     ; Turn offset into cells offset.
002C5Cr 3  18                           clc
002C5Dr 3  69 06                        adc #wordlists_offset
002C5Fr 3  A8                           tay
002C60r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
002C62r 3  95 00                        sta 0,x                 ; on the stack. ( nt )
002C64r 3  C8                           iny
002C65r 3  B1 rr                        lda (up),y
002C67r 3  95 01                        sta 1,x
002C69r 3               
002C69r 3               @loop:
002C69r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002C6Cr 3  20 rr rr                     jsr xt_name_to_string   ; ( nt addr u )
002C6Fr 3               
002C6Fr 3                               ; Insert line break if we're about to go past the end of the
002C6Fr 3                               ; line
002C6Fr 3  68                           pla
002C70r 3  18                           clc
002C71r 3  75 00                        adc 0,x
002C73r 3  1A                           inc                     ; don't forget the space between words
002C74r 3  C9 4F                        cmp #MAX_LINE_LENGTH    ; usually 79
002C76r 3  90 06                        bcc @1
002C78r 3               
002C78r 3  20 rr rr                     jsr xt_cr
002C7Br 3  B5 00                        lda 0, x
002C7Dr 3  1A                           inc
002C7Er 3               @1:
002C7Er 3  48                           pha
002C7Fr 3  20 rr rr                     jsr xt_type             ; ( nt )
002C82r 3               
002C82r 3  A9 20                        lda #AscSP
002C84r 3  20 rr rr                     jsr emit_a
002C87r 3               
002C87r 3                               ; get next word, which begins two down
002C87r 3  20 rr rr                     jsr xt_one_plus         ; 1+
002C8Ar 3  20 rr rr                     jsr xt_one_plus         ; 1+
002C8Dr 3  20 rr rr                     jsr xt_fetch            ; @ ( nt+1 )
002C90r 3               
002C90r 3                               ; if next address is zero, we're done
002C90r 3  B5 00                        lda 0,x
002C92r 3  15 01                        ora 1,x
002C94r 3  D0 D3                        bne @loop
002C96r 3               
002C96r 3                               ; Move on to the next wordlist in the search order.
002C96r 3  E6 rr                        inc tmp3
002C98r 3  80 B1                        bra @wordlist_loop
002C9Ar 3               
002C9Ar 3               @words_done:
002C9Ar 3  68                           pla                     ; dump counter
002C9Br 3               
002C9Br 3  E8                           inx
002C9Cr 3  E8                           inx
002C9Dr 3               
002C9Dr 3  60           z_words:        rts
002C9Er 3               
002C9Er 3               
002C9Er 3               
002C9Er 3               ; ## WORDSIZE ( nt -- u ) "Get size of word in bytes"
002C9Er 3               ; ## "wordsize"  auto  Tali Forth
002C9Er 3                       ; """Given an word's name token (nt), return the size of the
002C9Er 3                       ; word's payload size in bytes (CFA plus PFA) in bytes. Does not
002C9Er 3                       ; count the final RTS.
002C9Er 3                       ; """
002C9Er 3               xt_wordsize:
002C9Er 3  20 rr rr                     jsr underflow_1
002CA1r 3               
002CA1r 3                               ; We get the start address of the word from its header entry
002CA1r 3                               ; for the start of the actual code (execution token, xt)
002CA1r 3                               ; which is four bytes down, and the pointer to the end of the
002CA1r 3                               ; code (z_word, six bytes down)
002CA1r 3  B5 00                        lda 0,x
002CA3r 3  85 rr                        sta tmp1
002CA5r 3  B5 01                        lda 1,x
002CA7r 3  85 rr                        sta tmp1+1
002CA9r 3               
002CA9r 3  A0 06                        ldy #6
002CABr 3  B1 rr                        lda (tmp1),y    ; LSB of z
002CADr 3  88                           dey
002CAEr 3  88                           dey
002CAFr 3               
002CAFr 3  38                           sec
002CB0r 3  F1 rr                        sbc (tmp1),y    ; LSB of xt
002CB2r 3  95 00                        sta 0,x
002CB4r 3               
002CB4r 3  A0 07                        ldy #7
002CB6r 3  B1 rr                        lda (tmp1),y    ; MSB of z
002CB8r 3  88                           dey
002CB9r 3  88                           dey
002CBAr 3               
002CBAr 3  F1 rr                        sbc (tmp1),y    ; MSB of xt
002CBCr 3  95 01                        sta 1,x
002CBEr 3               
002CBEr 3  60           z_wordsize:     rts
002CBFr 3               
002CBFr 3               
002CBFr 3               ; ## XOR ( n n -- n ) "Logically XOR TOS and NOS"
002CBFr 3               ; ## "xor"  auto  ANS core
002CBFr 3                       ; """https://forth-standard.org/standard/core/XOR"""
002CBFr 3               xt_xor:
002CBFr 3  20 rr rr                     jsr underflow_2
002CC2r 3               
002CC2r 3  B5 00                        lda 0,x
002CC4r 3  55 02                        eor 2,x
002CC6r 3  95 02                        sta 2,x
002CC8r 3               
002CC8r 3  B5 01                        lda 1,x
002CCAr 3  55 03                        eor 3,x
002CCCr 3  95 03                        sta 3,x
002CCEr 3               
002CCEr 3  E8                           inx
002CCFr 3  E8                           inx
002CD0r 3               
002CD0r 3  60           z_xor:          rts
002CD1r 3               
002CD1r 3               
002CD1r 3               ; ## ZERO ( -- 0 ) "Push 0 to Data Stack"
002CD1r 3               ; ## "0"  auto  Tali Forth
002CD1r 3                       ; """The disassembler assumes that this routine does not use Y. Note
002CD1r 3                       ; that CASE and FORTH-WORDLIST use the same routine, as the WD for Forth
002CD1r 3                       ; is 0."""
002CD1r 3               xt_case:
002CD1r 3               xt_forth_wordlist:
002CD1r 3               xt_zero:
002CD1r 3  CA                           dex             ; push
002CD2r 3  CA                           dex
002CD3r 3  74 00                        stz 0,x
002CD5r 3  74 01                        stz 1,x
002CD7r 3               z_case:
002CD7r 3               z_forth_wordlist:
002CD7r 3               z_zero:
002CD7r 3  60                           rts
002CD8r 3               
002CD8r 3               
002CD8r 3               ; ## ZERO_EQUAL ( n -- f ) "Check if TOS is zero"
002CD8r 3               ; ## "0="  auto  ANS core
002CD8r 3                       ; """https://forth-standard.org/standard/core/ZeroEqual"""
002CD8r 3               
002CD8r 3               xt_zero_equal:
002CD8r 3  20 rr rr                     jsr underflow_1
002CDBr 3               
002CDBr 3  B5 00                        lda 0,x
002CDDr 3  15 01                        ora 1,x
002CDFr 3  F0 04                        beq @zero
002CE1r 3               
002CE1r 3                               ; not a zero, so we need a FALSE flag (0)
002CE1r 3  A9 00                        lda #0
002CE3r 3  80 02                        bra @store
002CE5r 3               @zero:
002CE5r 3                               ; We have a zero, so we need a TRUE flag (-1)
002CE5r 3  A9 FF                        lda #$ff
002CE7r 3               @store:
002CE7r 3  95 00                        sta 0,x
002CE9r 3  95 01                        sta 1,x
002CEBr 3               
002CEBr 3  60           z_zero_equal:   rts
002CECr 3               
002CECr 3               
002CECr 3               
002CECr 3               ; ## ZERO_GREATER ( n -- f ) "Return a TRUE flag if TOS is positive"
002CECr 3               ; ## "0>"  auto  ANS core ext
002CECr 3                       ; """https://forth-standard.org/standard/core/Zeromore"""
002CECr 3               
002CECr 3               xt_zero_greater:
002CECr 3  20 rr rr                     jsr underflow_1
002CEFr 3               
002CEFr 3  A0 00                        ldy #0          ; Default is FALSE (TOS is negative)
002CF1r 3               
002CF1r 3  B5 01                        lda 1,x         ; MSB
002CF3r 3  30 05                        bmi @done       ; TOS is negative, keep FLASE
002CF5r 3  15 00                        ora 0,x
002CF7r 3  F0 01                        beq @done       ; TOS is zero, keep FALSE
002CF9r 3               
002CF9r 3  88                           dey             ; TOS is postive, make true
002CFAr 3               @done:
002CFAr 3  98                           tya
002CFBr 3  95 00                        sta 0,x
002CFDr 3  95 01                        sta 1,x
002CFFr 3               
002CFFr 3  60           z_zero_greater: rts
002D00r 3               
002D00r 3               
002D00r 3               
002D00r 3               ; ## ZERO_LESS ( n -- f ) "Return a TRUE flag if TOS negative"
002D00r 3               ; ## "0<"  auto  ANS core
002D00r 3                       ; """https://forth-standard.org/standard/core/Zeroless"""
002D00r 3               
002D00r 3               xt_zero_less:
002D00r 3  20 rr rr                     jsr underflow_1
002D03r 3               
002D03r 3  A0 00                        ldy #0          ; Default is FALSE (TOS positive)
002D05r 3               
002D05r 3  B5 01                        lda 1,x         ; MSB
002D07r 3  10 01                        bpl @done       ; TOS is positive, so keep FALSE
002D09r 3               
002D09r 3  88                           dey             ; TOS is negative, make TRUE
002D0Ar 3               @done:
002D0Ar 3  98                           tya
002D0Br 3  95 00                        sta 0,x
002D0Dr 3  95 01                        sta 1,x
002D0Fr 3               
002D0Fr 3  60           z_zero_less:    rts
002D10r 3               
002D10r 3               
002D10r 3               
002D10r 3               ; ## ZERO_UNEQUAL ( m -- f ) "Return TRUE flag if not zero"
002D10r 3               ; ## "0<>"  auto  ANS core ext
002D10r 3                       ; """https://forth-standard.org/standard/core/Zerone"""
002D10r 3               
002D10r 3               xt_zero_unequal:
002D10r 3  20 rr rr                     jsr underflow_1
002D13r 3               
002D13r 3  A0 00                        ldy #0          ; default false
002D15r 3               
002D15r 3  B5 00                        lda 0,x
002D17r 3  15 01                        ora 1,x
002D19r 3  F0 01                        beq @got_zero
002D1Br 3               
002D1Br 3  88                           dey
002D1Cr 3               @got_zero:
002D1Cr 3  98                           tya
002D1Dr 3  95 00                        sta 0,x
002D1Fr 3  95 01                        sta 1,x
002D21r 3               
002D21r 3  60           z_zero_unequal: rts
002D22r 3               
002D22r 3               
002D22r 3               
002D22r 3               ; ==========================================================
002D22r 3               ; EDITOR words
002D22r 3               
002D22r 3               ; This routine is used by both enter-screen and erase-screen
002D22r 3               ; to get a buffer for the given screen number and set SCR to
002D22r 3               ; the given screen number.  This word is not in the dictionary.
002D22r 3               xt_editor_screen_helper:
002D22r 3  20 rr rr                     jsr xt_dup
002D25r 3  20 rr rr                     jsr xt_scr
002D28r 3  20 rr rr                     jsr xt_store
002D2Br 3  20 rr rr                     jsr xt_buffer
002D2Er 3               z_editor_screen_helper:
002D2Er 3  60                           rts
002D2Fr 3               
002D2Fr 3               
002D2Fr 3               ; ## EDITOR_ENTER_SCREEN ( scr# -- ) "Enter all lines for given screen"
002D2Fr 3               ; ## "enter-screen"  auto  Tali Editor
002D2Fr 3               
002D2Fr 3               xt_editor_enter_screen:
002D2Fr 3                               ; Set the variable SCR and get a buffer for the
002D2Fr 3                               ; given screen number.
002D2Fr 3  20 rr rr                     jsr xt_editor_screen_helper
002D32r 3               
002D32r 3                               ; Drop the buffer address.
002D32r 3  20 rr rr                     jsr xt_drop
002D35r 3               
002D35r 3                               ; Overwrite the lines one at a time.
002D35r 3  64 rr                        stz editor1
002D37r 3               @prompt_loop:
002D37r 3                               ; Put the current line number on the stack.
002D37r 3  CA                           dex
002D38r 3  CA                           dex
002D39r 3  A5 rr                        lda editor1
002D3Br 3  95 00                        sta 0,x
002D3Dr 3  74 01                        stz 1,x
002D3Fr 3               
002D3Fr 3                               ; Use the O word to prompt for overwrite.
002D3Fr 3  20 rr rr                     jsr xt_editor_o
002D42r 3               
002D42r 3                               ; Move on to the next line.
002D42r 3  E6 rr                        inc editor1
002D44r 3  A9 10                        lda #16
002D46r 3  C5 rr                        cmp editor1
002D48r 3  D0 ED                        bne @prompt_loop
002D4Ar 3               
002D4Ar 3               z_editor_enter_screen:
002D4Ar 3  60                           rts
002D4Br 3               
002D4Br 3               
002D4Br 3               
002D4Br 3               ; ## EDITOR_ERASE_SCREEN ( scr# -- ) "Erase all lines for given screen"
002D4Br 3               ; ## "erase-screen"  tested  Tali Editor
002D4Br 3               xt_editor_erase_screen:
002D4Br 3                               ; Set the variable SCR and get a buffer for the
002D4Br 3                               ; given screen number.
002D4Br 3  20 rr rr                     jsr xt_editor_screen_helper
002D4Er 3               
002D4Er 3                               ; Put 1024 (chars/screen) on stack.
002D4Er 3  CA                           dex
002D4Fr 3  CA                           dex
002D50r 3  74 00                        stz 0,x
002D52r 3  A9 04                        lda #4          ; 4 in MSB makes 1024 ($400).
002D54r 3  95 01                        sta 1,x
002D56r 3               
002D56r 3                               ; Erase the entire block (fill with spaces).
002D56r 3  20 rr rr                     jsr xt_blank
002D59r 3               
002D59r 3                               ; Mark buffer as updated.
002D59r 3  20 rr rr                     jsr xt_update
002D5Cr 3               
002D5Cr 3               z_editor_erase_screen:
002D5Cr 3  60                           rts
002D5Dr 3               
002D5Dr 3               
002D5Dr 3               ; ## EDITOR_EL ( line# -- ) "Erase the given line number"
002D5Dr 3               ; ## "el"  tested  Tali Editor
002D5Dr 3               xt_editor_el:
002D5Dr 3                               ; Turn the line number into buffer offset.
002D5Dr 3                               ; This also loads the block into the buffer if it's
002D5Dr 3                               ; not there for some reason.
002D5Dr 3  20 rr rr                     jsr xt_editor_line
002D60r 3               
002D60r 3                               ; Put 64 (# of chars/line) on the stack.
002D60r 3  CA                           dex
002D61r 3  CA                           dex
002D62r 3  A9 40                        lda #64
002D64r 3  95 00                        sta 0,x
002D66r 3  74 01                        stz 1,x
002D68r 3               
002D68r 3                               ; Fill with spaces.
002D68r 3  20 rr rr                     jsr xt_blank
002D6Br 3               
002D6Br 3                               ; Mark buffer as updated.
002D6Br 3  20 rr rr                     jsr xt_update
002D6Er 3               
002D6Er 3  60           z_editor_el:    rts
002D6Fr 3               
002D6Fr 3               
002D6Fr 3               ; ## EDITOR_L ( -- ) "List the current screen"
002D6Fr 3               ; ## "l"  tested  Tali Editor
002D6Fr 3               
002D6Fr 3               xt_editor_l:
002D6Fr 3                               ; Load the current screen
002D6Fr 3  CA                           dex             ; Put SCR on the stack.
002D70r 3  CA                           dex
002D71r 3  A0 02                        ldy #scr_offset
002D73r 3  B1 rr                        lda (up),y
002D75r 3  95 00                        sta 0,x
002D77r 3  C8                           iny
002D78r 3  B1 rr                        lda (up),y
002D7Ar 3  95 01                        sta 1,x
002D7Cr 3  20 rr rr                     jsr xt_block    ; Get the current screen.
002D7Fr 3               
002D7Fr 3  20 rr rr                     jsr xt_cr
002D82r 3               
002D82r 3                               ; Print the screen number.
002D82r 3                               ; We're using sliteral, so we need to set up the
002D82r 3                               ; appropriate data structure (see sliteral)
002D82r 3  80 08                        bra @after_screen_msg
002D84r 3               
002D84r 3               @screen_msg:
002D84r 3  53 63 72 65                  .byte "Screen #"
002D88r 3  65 6E 20 23  
002D8Cr 3               
002D8Cr 3               @after_screen_msg:
002D8Cr 3  20 rr rr                     jsr sliteral_runtime
002D8Fr 3  rr rr 08 00                  .word @screen_msg, @after_screen_msg-@screen_msg
002D93r 3               
002D93r 3  20 rr rr                     jsr xt_type
002D96r 3               
002D96r 3                               ; Put the screen number and printed size for u.r on the stack.
002D96r 3  20 rr rr                     jsr xt_scr
002D99r 3  20 rr rr                     jsr xt_fetch
002D9Cr 3  CA                           dex
002D9Dr 3  CA                           dex
002D9Er 3  A9 04                        lda #4          ; four spaces
002DA0r 3  95 00                        sta 0,x
002DA2r 3  74 01                        stz 1,x
002DA4r 3  20 rr rr                     jsr xt_u_dot_r
002DA7r 3               
002DA7r 3                               ; The address of the buffer is currently on the stack.
002DA7r 3                               ; Print 64 chars at a time. TYPE uses tmp1, so we'll
002DA7r 3                               ; keep track of the line number in tmp3.
002DA7r 3  64 rr                        stz tmp3
002DA9r 3               
002DA9r 3               @line_loop:
002DA9r 3  20 rr rr                     jsr xt_cr
002DACr 3               
002DACr 3                               ; Print the line number (2-space fixed width)
002DACr 3  CA                           dex
002DADr 3  CA                           dex
002DAEr 3  CA                           dex
002DAFr 3  CA                           dex
002DB0r 3  74 03                        stz 3,x
002DB2r 3  A5 rr                        lda tmp3
002DB4r 3  95 02                        sta 2,x
002DB6r 3  74 01                        stz 1,x
002DB8r 3  A9 02                        lda #2
002DBAr 3  95 00                        sta 0,x
002DBCr 3  20 rr rr                     jsr xt_u_dot_r
002DBFr 3  20 rr rr                     jsr xt_space
002DC2r 3               
002DC2r 3                               ; Print one line using the address on the stack.
002DC2r 3  20 rr rr                     jsr xt_dup
002DC5r 3  CA                           dex
002DC6r 3  CA                           dex
002DC7r 3  A9 40                        lda #64
002DC9r 3  95 00                        sta 0,x
002DCBr 3  74 01                        stz 1,x
002DCDr 3  20 rr rr                     jsr xt_type
002DD0r 3               
002DD0r 3                               ; Add 64 to the address on the stack to move to the next line.
002DD0r 3  18                           clc
002DD1r 3  A9 40                        lda #64
002DD3r 3  75 00                        adc 0,x
002DD5r 3  95 00                        sta 0,x
002DD7r 3  B5 01                        lda 1,x
002DD9r 3  69 00                        adc #0      ; Add carry
002DDBr 3  95 01                        sta 1,x
002DDDr 3               
002DDDr 3                               ; Increment the line number (held in tmp3)
002DDDr 3  E6 rr                        inc tmp3
002DDFr 3               
002DDFr 3                               ; See if we are done.
002DDFr 3  A5 rr                        lda tmp3
002DE1r 3  C9 10                        cmp #16
002DE3r 3  D0 C4                        bne @line_loop
002DE5r 3               
002DE5r 3  20 rr rr                     jsr xt_cr
002DE8r 3                               ; Drop the address on the stack.
002DE8r 3  E8                           inx
002DE9r 3  E8                           inx
002DEAr 3               
002DEAr 3  60           z_editor_l:            rts
002DEBr 3               
002DEBr 3               
002DEBr 3               
002DEBr 3               ; ## EDITOR_LINE ( line# -- c-addr ) "Turn a line number into address in current screen"
002DEBr 3               ; ## "line"  tested  Tali Editor
002DEBr 3               
002DEBr 3               xt_editor_line:
002DEBr 3  20 rr rr                     jsr underflow_1
002DEEr 3               
002DEEr 3                               ; Multiply the TOS by 64 (chars/line) to compute offset.
002DEEr 3  A0 06                        ldy #6          ; *64 is same as left shift 6 times.
002DF0r 3               @shift_tos_left:
002DF0r 3  16 00                        asl 0,x         ; Shift TOS to the left
002DF2r 3  36 01                        rol 1,x         ; ROL brings MSb from lower byte.
002DF4r 3  88                           dey
002DF5r 3  D0 F9                        bne @shift_tos_left
002DF7r 3                               ; Load the current screen into a buffer
002DF7r 3                               ; and get the buffer address
002DF7r 3  20 rr rr                     jsr xt_scr
002DFAr 3  20 rr rr                     jsr xt_fetch
002DFDr 3  20 rr rr                     jsr xt_block
002E00r 3               
002E00r 3                               ; Add the offset to the buffer base address.
002E00r 3  20 rr rr                     jsr xt_plus
002E03r 3               
002E03r 3  60           z_editor_line:  rts
002E04r 3               
002E04r 3               
002E04r 3               
002E04r 3               ; ## EDITOR_O ( line# -- ) "Overwrite the given line"
002E04r 3               ; ## "o"  tested  Tali Editor
002E04r 3               xt_editor_o:
002E04r 3                               ; Print prompt
002E04r 3  20 rr rr                     jsr xt_cr
002E07r 3  20 rr rr                     jsr xt_dup
002E0Ar 3  20 rr rr                     jsr xt_two
002E0Dr 3  20 rr rr                     jsr xt_u_dot_r
002E10r 3  20 rr rr                     jsr xt_space
002E13r 3  A9 2A                        lda #42         ; ASCII for *
002E15r 3  20 rr rr                     jsr emit_a
002E18r 3  20 rr rr                     jsr xt_space
002E1Br 3               
002E1Br 3                               ; Accept new input (directly into the buffer)
002E1Br 3  20 rr rr                     jsr xt_editor_line
002E1Er 3  20 rr rr                     jsr xt_dup      ; Save a copy of the line address for later.
002E21r 3  CA                           dex
002E22r 3  CA                           dex
002E23r 3  A9 40                        lda #64         ; chars/line
002E25r 3  95 00                        sta 0,x
002E27r 3  74 01                        stz 1,x
002E29r 3  20 rr rr                     jsr xt_accept
002E2Cr 3               
002E2Cr 3                               ; Fill the rest with spaces.
002E2Cr 3                               ; Stack is currently ( line_address numchars_from_accept )
002E2Cr 3  20 rr rr                     jsr xt_dup
002E2Fr 3  20 rr rr                     jsr xt_not_rote ; -rot
002E32r 3  20 rr rr                     jsr xt_plus
002E35r 3  CA                           dex
002E36r 3  CA                           dex
002E37r 3  A9 40                        lda #64         ; chars/line
002E39r 3  95 00                        sta 0,x
002E3Br 3  74 01                        stz 1,x
002E3Dr 3  20 rr rr                     jsr xt_rot
002E40r 3  20 rr rr                     jsr xt_minus
002E43r 3  20 rr rr                     jsr xt_blank
002E46r 3               
002E46r 3                               ; Mark buffer as updated.
002E46r 3  20 rr rr                     jsr xt_update
002E49r 3               
002E49r 3  60           z_editor_o:     rts
002E4Ar 3               
002E4Ar 3               .ifdef LCD_BUF
002E4Ar 3               xt_haslcd:
002E4Ar 3  CA                   dex
002E4Br 3  CA                   dex
002E4Cr 3  A9 rr                lda #<has_lcd
002E4Er 3  95 00                sta 0, x
002E50r 3  A9 rr                lda #>has_lcd
002E52r 3  95 01                sta 1, x
002E54r 3               z_haslcd:
002E54r 3  60                   rts
002E55r 3               
002E55r 3               
002E55r 3               ; ## LCDPUT ( s -- ) "Print single character to LCD"
002E55r 3               ; ## "lcdput" coded Custom
002E55r 3               xt_lcdput:
002E55r 3  20 rr rr                     jsr underflow_1
002E58r 3               
002E58r 3  B5 00                        lda 0,x
002E5Ar 3                       .ifdef lcd_print
002E5Ar 3  20 rr rr                     jsr lcd_print
002E5Dr 3                       .endif
002E5Dr 3  E8                           inx
002E5Er 3  E8                           inx
002E5Fr 3  60           z_lcdput: rts
002E60r 3               
002E60r 3               
002E60r 3               ; ## LCDPRINT ( addr u -- ) "Print string to LCD"
002E60r 3               ; ## "lcdprint"  coded Custom
002E60r 3               
002E60r 3               xt_lcdprint:
002E60r 3  20 rr rr                     jsr underflow_2
002E63r 3               
002E63r 3                               ; Save the starting address into tmp1
002E63r 3  B5 02                        lda 2,x
002E65r 3  85 rr                        sta tmp1
002E67r 3  B5 03                        lda 3,x
002E69r 3  85 rr                        sta tmp1+1
002E6Br 3               @loop:
002E6Br 3                               ; done if length is zero
002E6Br 3  B5 00                        lda 0,x
002E6Dr 3  15 01                        ora 1,x
002E6Fr 3  F0 15                        beq @done
002E71r 3               
002E71r 3                               ; Send the current character
002E71r 3  B2 rr                        lda (tmp1)
002E73r 3                       .ifdef lcd_print
002E73r 3  20 rr rr                     jsr lcd_print      ; avoids stack foolery
002E76r 3                       .endif
002E76r 3                               ; Move the address along (in tmp1)
002E76r 3  E6 rr                        inc tmp1
002E78r 3  D0 02                        bne @1
002E7Ar 3  E6 rr                        inc tmp1+1
002E7Cr 3               @1:
002E7Cr 3                               ; Reduce the count (on the data stack)
002E7Cr 3  B5 00                        lda 0,x
002E7Er 3  D0 02                        bne @2
002E80r 3  D6 01                        dec 1,x
002E82r 3               @2:
002E82r 3  D6 00                        dec 0,x
002E84r 3               
002E84r 3  80 E5                        bra @loop
002E86r 3               @done:
002E86r 3  E8                           inx
002E87r 3  E8                           inx
002E88r 3  E8                           inx
002E89r 3  E8                           inx
002E8Ar 3               
002E8Ar 3  60           z_lcdprint:         rts
002E8Br 3               
002E8Br 3               .endif
002E8Br 3               
002E8Br 3               ; ## CLS ( -- ) "clea VGA screen"
002E8Br 3               ; ## "cls" coded Custom
002E8Br 3               xt_cls:
002E8Br 3                       .ifdef vga_clear
002E8Br 3                               jsr vga_clear
002E8Br 3                       .endif
002E8Br 3               
002E8Br 3  60           z_cls: rts
002E8Cr 3               
002E8Cr 3               
002E8Cr 3               ; ## SPI_INIT ( -- ) "Init SPI system"
002E8Cr 3               ; ## "spi_init" coded Custom
002E8Cr 3               xt_spi_init:
002E8Cr 3               .ifdef VIA1_BASE
002E8Cr 3  20 rr rr                     jsr spi_init
002E8Fr 3               .endif
002E8Fr 3  60           z_spi_init: rts
002E90r 3               
002E90r 3               
002E90r 3               ; ## SPI_CLK_TOGGLE ( -- ) "Toggle SPI clock"
002E90r 3               ; ## "spi_clk_toggle" coded Custom
002E90r 3               xt_spi_clk_toggle:
002E90r 3               .ifdef VIA1_BASE
002E90r 3  20 rr rr                     jsr spi_clk_toggle
002E93r 3               .endif
002E93r 3  60           z_spi_clk_toggle: rts
002E94r 3               
002E94r 3               ; ## SPI_SELECT ( s -- ) "Select SPI slave"
002E94r 3               ; ## "spi_select" coded Custom
002E94r 3               xt_spi_select:
002E94r 3               .ifdef VIA1_BASE
002E94r 3  20 rr rr                     jsr underflow_1
002E97r 3               
002E97r 3  B5 00                        lda 0,x
002E99r 3               
002E99r 3  20 rr rr                     jsr spi_select
002E9Cr 3               
002E9Cr 3  E8                           inx
002E9Dr 3  E8                           inx
002E9Er 3               .endif
002E9Er 3  60           z_spi_select: rts
002E9Fr 3               
002E9Fr 3               ; ## SPI_TRANSCEIVE ( s -- u ) "Send and receive spi data"
002E9Fr 3               ; ## "spi_transceive" coded Custom
002E9Fr 3               xt_spi_transceive:
002E9Fr 3               .ifdef VIA1_BASE
002E9Fr 3  20 rr rr                     jsr underflow_1
002EA2r 3               
002EA2r 3  B5 00                        lda 0,x
002EA4r 3               
002EA4r 3  20 rr rr                     jsr spi_transceive
002EA7r 3               
002EA7r 3  95 00                        sta 0,x         ; put return value in TOS
002EA9r 3  74 01                        stz 1,X         ;reset value there
002EABr 3               .endif
002EABr 3  60           z_spi_transceive: rts
002EACr 3               
002EACr 3               ; ## SD_INIT ( s -- u ) "Send and receive spi data"
002EACr 3               ; ## "sd_init" coded Custom
002EACr 3               xt_sd_init:
002EACr 3               .ifdef SD
002EACr 3                               jsr underflow_1
002EACr 3               
002EACr 3                               lda 0,x
002EACr 3                               jsr sd_init
002EACr 3                               beq @ok
002EACr 3                               pha
002EACr 3                               printascii sd_init_error_message
002EACr 3                               pla
002EACr 3               @ok:
002EACr 3                               sta 0,x         ; put return value in TOS
002EACr 3                               stz 1,X         ;reset value there
002EACr 3               .endif
002EACr 3  60           z_sd_init: rts
002EADr 3               
002EADr 3               ; ## SD_READSECTOR ( addr d -- u ) "Read SD sector"
002EADr 3               ; ## "sd_readsector" coded Custom
002EADr 3               xt_sd_readsector:
002EADr 3               
002EADr 3               .ifdef SD
002EADr 3                               jsr underflow_2
002EADr 3                               ; get and save sector number (32 bit number, double)
002EADr 3                               ; most significant part is TOS
002EADr 3                               lda 0, x
002EADr 3                               sta IO_SECTOR + 2
002EADr 3                               lda 1, x
002EADr 3                               sta IO_SECTOR + 3
002EADr 3                               ; least significant part is NOS
002EADr 3                               lda 2, x
002EADr 3                               sta IO_SECTOR + 0
002EADr 3                               lda 3, x
002EADr 3                               sta IO_SECTOR + 1
002EADr 3                               lda #1
002EADr 3                               sta SD_CRC
002EADr 3               
002EADr 3                               jsr sd_readsector
002EADr 3                               sta 0,x         ; put return value in TOS
002EADr 3                               stz 1,X         ;reset value there
002EADr 3               
002EADr 3                               inx
002EADr 3                               inx
002EADr 3               .endif
002EADr 3  60           z_sd_readsector: rts
002EAEr 3               
002EAEr 3               
002EAEr 3               ; ## time ( -- addr ) "get time storage address"
002EAEr 3               ; ## "time" coded Custom
002EAEr 3               xt_time:
002EAEr 3                       .ifdef time
002EAEr 3  A9 rr                lda #time
002EB0r 3                       .else
002EB0r 3                       lda #0
002EB0r 3                       .endif
002EB0r 3  CA                   dex
002EB1r 3  CA                   dex
002EB2r 3  95 00                sta 0,x
002EB4r 3  74 01                stz 1,x
002EB6r 3               
002EB6r 3               
002EB6r 3  60           z_time: rts
002EB7r 3               
002EB7r 3               
002EB7r 3               xt_cf_info:
002EB7r 3               .ifdef CF_ADDRESS
002EB7r 3  20 rr rr             jsr cf_info
002EBAr 3  20 rr rr             jsr xt_cr
002EBDr 3  20 rr rr             jsr cf_print_id
002EC0r 3  20 rr rr             jsr cf_print_capacity
002EC3r 3               .endif
002EC3r 3               z_cf_info:
002EC3r 3  60                   rts
002EC4r 3               .ifdef CF_ADDRESS
002EC4r 3               cf_print_capacity:
002EC4r 3  5A               phy
002EC5r 3               
002EC5r 3  20 rr rr         jsr xt_cr
002EC8r 3               
002EC8r 3  A0 78            ldy #120
002ECAr 3                   ; print lba size
002ECAr 3  B1 rr            lda (io_buffer_ptr), y
002ECCr 3  8D rr rr         sta LBA_SIZE
002ECFr 3  C8               iny
002ED0r 3  B1 rr            lda (io_buffer_ptr), y
002ED2r 3  8D rr rr         sta LBA_SIZE + 1
002ED5r 3               
002ED5r 3  C8               iny
002ED6r 3  B1 rr            lda (io_buffer_ptr), y
002ED8r 3  8D rr rr         sta LBA_SIZE + 2
002EDBr 3               
002EDBr 3  C8               iny
002EDCr 3  B1 rr            lda (io_buffer_ptr), y
002EDEr 3  8D rr rr         sta LBA_SIZE + 3
002EE1r 3               
002EE1r 3  A0 09            ldy #9
002EE3r 3               @loop:
002EE3r 3  0E rr rr 2E      asl32 LBA_SIZE
002EE7r 3  rr rr 2E rr  
002EEBr 3  rr 2E rr rr  
002EEFr 3  88               dey
002EF0r 3  D0 F1            bne @loop
002EF2r 3               
002EF2r 3  CA               dex
002EF3r 3  CA               dex
002EF4r 3  CA               dex
002EF5r 3  CA               dex
002EF6r 3               
002EF6r 3  AD rr rr         lda LBA_SIZE
002EF9r 3  95 02            sta 2, x
002EFBr 3  AD rr rr         lda LBA_SIZE + 1
002EFEr 3  95 03            sta 3, x
002F00r 3  AD rr rr         lda LBA_SIZE + 2
002F03r 3  95 00            sta 0, x
002F05r 3  AD rr rr         lda LBA_SIZE + 3
002F08r 3  95 01            sta 1, x
002F0Ar 3               
002F0Ar 3  20 rr rr         jsr xt_ud_dot
002F0Dr 3               
002F0Dr 3  CA               dex
002F0Er 3  CA               dex
002F0Fr 3  CA               dex
002F10r 3  CA               dex
002F11r 3  A9 06            lda #6
002F13r 3  95 00            sta 0, x
002F15r 3  74 01            stz 1, x
002F17r 3  A9 rr            lda #<bytes_msg
002F19r 3  95 02            sta 2, x
002F1Br 3  A9 rr            lda #>bytes_msg
002F1Dr 3  95 03            sta 3, x
002F1Fr 3  20 rr rr         jsr xt_type
002F22r 3  20 rr rr         jsr xt_cr
002F25r 3  7A               ply
002F26r 3  60               rts
002F27r 3               
002F27r 3               
002F27r 3               cf_info:
002F27r 3  20 rr rr         jsr cf_init
002F2Ar 3  20 rr rr         jsr cf_wait
002F2Dr 3  A9 EC            lda #$EC
002F2Fr 3  8D D7 FF         sta CF_ADDRESS + 7
002F32r 3  A9 rr            lda #<IO_BUFFER
002F34r 3  85 rr            sta io_buffer_ptr
002F36r 3  A9 rr            lda #>IO_BUFFER
002F38r 3  85 rr            sta io_buffer_ptr + 1
002F3Ar 3  20 rr rr         jsr cf_read
002F3Dr 3  60               rts
002F3Er 3               
002F3Er 3               cf_print_id:
002F3Er 3                   ; print model number
002F3Er 3  5A               phy
002F3Fr 3  A0 37            ldy #55
002F41r 3               @loop:
002F41r 3  B1 rr            lda (io_buffer_ptr), y
002F43r 3  20 rr rr         jsr kernel_putc
002F46r 3  88               dey
002F47r 3  B1 rr            lda (io_buffer_ptr), y
002F49r 3  20 rr rr         jsr kernel_putc
002F4Cr 3  C8               iny
002F4Dr 3  C8               iny
002F4Er 3  C8               iny
002F4Fr 3  C0 5F            cpy #(40+55)
002F51r 3  90 EE            bcc @loop
002F53r 3  7A               ply
002F54r 3  60               rts
002F55r 3               
002F55r 3               .endif
002F55r 3               xt_io_readblock:
002F55r 3               .ifdef io_read_sector_address
002F55r 3  20 rr rr             jsr underflow_2
002F58r 3                       ; block-read ( addr blk# -- )
002F58r 3  B5 02                lda 2, x
002F5Ar 3  85 rr                sta io_buffer_ptr
002F5Cr 3  B5 03                lda 3, x
002F5Er 3  85 rr                sta io_buffer_ptr + 1
002F60r 3  B5 00                lda 0, x
002F62r 3  8D rr rr             sta IO_SECTOR
002F65r 3  B5 01                lda 1, x
002F67r 3  8D rr rr             sta IO_SECTOR + 1
002F6Ar 3  9C rr rr             stz IO_SECTOR + 2
002F6Dr 3  9C rr rr             stz IO_SECTOR + 3
002F70r 3               
002F70r 3  0E rr rr             asl IO_SECTOR                   ; multiply by two to get first sector number
002F73r 3  2E rr rr             rol IO_SECTOR + 1
002F76r 3  2E rr rr             rol IO_SECTOR + 2
002F79r 3               
002F79r 3                       ; lda io_buffer_ptr
002F79r 3                       ; sta 0, x
002F79r 3                       ; lda io_buffer_ptr + 1
002F79r 3                       ; sta 1, x
002F79r 3                       ; jsr xt_dot
002F79r 3               
002F79r 3  20 rr rr             jsr io_read_sector
002F7Cr 3  EE rr rr D0          inc32 IO_SECTOR
002F80r 3  0D EE rr rr  
002F84r 3  D0 08 EE rr  
002F8Er 3  E6 rr                inc io_buffer_ptr + 1
002F90r 3  E6 rr                inc io_buffer_ptr + 1
002F92r 3  20 rr rr             jsr io_read_sector
002F95r 3                       ; lda io_buffer_ptr
002F95r 3                       ; sta 0, x
002F95r 3                       ; lda io_buffer_ptr + 1
002F95r 3                       ; sta 1, x
002F95r 3                       ; jsr xt_dot
002F95r 3               
002F95r 3  E8                   inx
002F96r 3  E8                   inx
002F97r 3               
002F97r 3               .endif
002F97r 3               z_io_readblock:
002F97r 3  60                   rts
002F98r 3               
002F98r 3               xt_io_writeblock:
002F98r 3               .ifdef io_read_sector_address
002F98r 3                       ; block-write ( addr blk# -- )
002F98r 3  20 rr rr             jsr underflow_2
002F9Br 3  B5 02                lda 2, x
002F9Dr 3  85 rr                sta io_buffer_ptr
002F9Fr 3  B5 03                lda 3, x
002FA1r 3  85 rr                sta io_buffer_ptr + 1
002FA3r 3  B5 00                lda 0, x
002FA5r 3  8D rr rr             sta IO_SECTOR
002FA8r 3  B5 01                lda 1, x
002FAAr 3  8D rr rr             sta IO_SECTOR + 1
002FADr 3  9C rr rr             stz IO_SECTOR + 2
002FB0r 3  9C rr rr             stz IO_SECTOR + 3
002FB3r 3               
002FB3r 3  0E rr rr             asl IO_SECTOR                   ; multiply by two to get first sector number
002FB6r 3  2E rr rr             rol IO_SECTOR + 1
002FB9r 3  2E rr rr             rol IO_SECTOR + 2
002FBCr 3               
002FBCr 3  20 rr rr             jsr io_write_sector
002FBFr 3  EE rr rr D0          inc32 IO_SECTOR
002FC3r 3  0D EE rr rr  
002FC7r 3  D0 08 EE rr  
002FD1r 3  E6 rr                inc io_buffer_ptr + 1
002FD3r 3  E6 rr                inc io_buffer_ptr + 1
002FD5r 3  20 rr rr             jsr io_write_sector
002FD8r 3               
002FD8r 3               
002FD8r 3                       ; inc io_buffer_ptr + 1           ; jump two pages forward
002FD8r 3                       ; inc io_buffer_ptr + 1
002FD8r 3                       ; jsr io_write_sector
002FD8r 3  E8                   inx
002FD9r 3  E8                   inx
002FDAr 3                       ; inx
002FDAr 3                       ; inx
002FDAr 3               .endif
002FDAr 3               z_io_writeblock:
002FDAr 3  60                   rts
002FDBr 3               xt_set_ram_expansion_address:
002FDBr 3               .ifdef ENABLE_RAM_EXPANSION
002FDBr 3               .if ENABLE_RAM_EXPANSION = 1
002FDBr 3               ; set slot where RAM extension is located
002FDBr 3  20 rr rr             jsr underflow_1
002FDEr 3  B5 00                lda 0, x
002FE0r 3  85 rr                sta ram_expansion_address
002FE2r 3  B5 01                lda 1, x
002FE4r 3  85 rr                sta ram_expansion_address + 1
002FE6r 3  E8                   inx
002FE7r 3  E8                   inx
002FE8r 3               .endif
002FE8r 3               .endif
002FE8r 3               z_set_ram_expansion_address:
002FE8r 3  60                   rts
002FE9r 3               
002FE9r 3               xt_bank:
002FE9r 3               .ifdef ENABLE_RAM_EXPANSION
002FE9r 3               .if ENABLE_RAM_EXPANSION = 1
002FE9r 3               ; change RAM bank and enable or disable expansion RAM
002FE9r 3               ; top bit of byte enables the RAM if set
002FE9r 3  20 rr rr             jsr underflow_1
002FECr 3  A5 rr                lda ram_expansion_address
002FEEr 3  F0 06                beq @err
002FF0r 3  B5 00                lda 0, x                        ; only low byte is used
002FF2r 3  92 rr                sta (ram_expansion_address)
002FF4r 3  80 05                bra @end
002FF6r 3               @err:
002FF6r 3  A9 0D                lda #err_ramexp
002FF8r 3  4C rr rr             jmp error
002FFBr 3               @end:
002FFBr 3  E8                   inx
002FFCr 3  E8                   inx
002FFDr 3               .endif
002FFDr 3               .endif
002FFDr 3               z_bank:
002FFDr 3  60                   rts
002FFEr 3               
002FFEr 3               
002FFEr 3               ; ## IHEX ( -- ) "Load intel hex from serial to RAM"
002FFEr 3               ; ## "ihex" coded Custom
002FFEr 3               xt_intelhex:
002FFEr 3               .ifdef load_addr
002FFEr 3               @line_start:
002FFEr 3  20 rr rr             jsr kernel_getc
003001r 3  C9 3A                cmp #':'                ; wait for start of line marker
003003r 3  D0 F9                bne @line_start
003005r 3  A9 2E                lda #'.'
003007r 3  20 rr rr             jsr kernel_putc
00300Ar 3  9C rr rr             stz running_checksum
00300Dr 3                       ;lda #'.'
00300Dr 3                       ;jsr kernel_putc         ; print a dot for each line
00300Dr 3                       ; line has started
00300Dr 3  20 rr rr             jsr get_byte_from_ascii
003010r 3  8D rr rr             sta char_count
003013r 3  20 rr rr             jsr get_byte_from_ascii
003016r 3  85 rr                sta load_addr + 1
003018r 3  20 rr rr             jsr byte_to_ascii
00301Br 3  20 rr rr             jsr get_byte_from_ascii
00301Er 3  85 rr                sta load_addr
003020r 3  20 rr rr             jsr byte_to_ascii
003023r 3               
003023r 3                       ; we now have the count and the target address
003023r 3                       ; check the record type
003023r 3  20 rr rr             jsr get_byte_from_ascii
003026r 3  F0 0F                beq @data  ; data record
003028r 3  C9 01                cmp #1
00302Ar 3  F0 4F                beq @end
00302Cr 3  C9 03                cmp #3
00302Er 3  F0 31                beq @start_segment
003030r 3  C9 05                cmp #5
003032r 3  F0 2D                beq @start_addr
003034r 3                       ; all other types are ignored
003034r 3  4C rr rr             jmp @line_start
003037r 3               @data:
003037r 3  5A                   phy
003038r 3  A0 00                ldy #0
00303Ar 3               @data_loop:
00303Ar 3  20 rr rr             jsr get_byte_from_ascii
00303Dr 3  91 rr                sta (load_addr), y
00303Fr 3  20 rr rr             jsr byte_to_ascii
003042r 3  C8                   iny
003043r 3  CC rr rr             cpy char_count
003046r 3  D0 F2                bne @data_loop
003048r 3  7A                   ply
003049r 3                       ; verify checksum
003049r 3  20 rr rr             jsr get_byte_from_ascii_no_checksum
00304Cr 3                       ;jsr kernel_putc
00304Cr 3  18                   clc
00304Dr 3  6D rr rr             adc running_checksum
003050r 3  D0 02                bne @error
003052r 3  80 AA                bra @line_start
003054r 3               @error:
003054r 3  A9 21                lda #'!'
003056r 3  20 rr rr             jsr kernel_putc
003059r 3  AD rr rr             lda running_checksum
00305Cr 3  20 rr rr             jsr kernel_putc
00305Fr 3  80 23                bra z_intelhex
003061r 3               @start_segment:
003061r 3               @start_addr:
003061r 3  5A                   phy
003062r 3  A0 02                ldy #2
003064r 3               @bank_loop:
003064r 3  20 rr rr             jsr get_byte_from_ascii
003067r 3  99 rr rr             sta start_bank, y
00306Ar 3  88                   dey
00306Br 3  D0 F7                bne @bank_loop
00306Dr 3  A0 02                ldy #2
00306Fr 3               @address_loop:
00306Fr 3  20 rr rr             jsr get_byte_from_ascii
003072r 3  99 rr rr             sta start_address, y
003075r 3  88                   dey
003076r 3  D0 F7                bne @address_loop
003078r 3  7A                   ply
003079r 3  80 83                bra @line_start
00307Br 3               
00307Br 3               @end:
00307Br 3                       ; jump right to start address ?
00307Br 3                       ; ignore last line checksum
00307Br 3  20 rr rr             jsr kernel_getc
00307Er 3  20 rr rr             jsr kernel_getc
003081r 3  20 rr rr             jsr xt_bell
003084r 3               .endif
003084r 3               z_intelhex:
003084r 3  60                   rts
003085r 3               
003085r 3               
003085r 3               ascii_to_nibble:
003085r 3  C9 3A                cmp #('9' + 1)            ;check if number
003087r 3  90 04                bcc @is_number
003089r 3                       ; not a number, make uppercase
003089r 3  29 5F                and #$5F         ;do case conversion
00308Br 3  E9 07                sbc #7          ; remove difference between A and 9
00308Dr 3                       ; there is no check to see if letter is > F
00308Dr 3               @is_number:
00308Dr 3  38                   sec
00308Er 3  E9 30                sbc #'0'
003090r 3  60                   rts
003091r 3               
003091r 3               get_byte_from_ascii_no_checksum:
003091r 3  20 rr rr             jsr kernel_getc         ; get first ascii character
003094r 3  20 rr rr             jsr ascii_to_nibble
003097r 3  0A                   asl
003098r 3  0A                   asl
003099r 3  0A                   asl
00309Ar 3  0A                   asl
00309Br 3  8D rr rr             sta ihex_tmp
00309Er 3  20 rr rr             jsr kernel_getc         ; get second ascii character
0030A1r 3  20 rr rr             jsr ascii_to_nibble
0030A4r 3  0D rr rr             ora ihex_tmp
0030A7r 3  60                   rts
0030A8r 3               
0030A8r 3               get_byte_from_ascii:
0030A8r 3  20 rr rr             jsr kernel_getc         ; get first ascii character
0030ABr 3  20 rr rr             jsr ascii_to_nibble
0030AEr 3  0A                   asl
0030AFr 3  0A                   asl
0030B0r 3  0A                   asl
0030B1r 3  0A                   asl
0030B2r 3  8D rr rr             sta ihex_tmp
0030B5r 3  20 rr rr             jsr kernel_getc         ; get second ascii character
0030B8r 3  20 rr rr             jsr ascii_to_nibble
0030BBr 3  0D rr rr             ora ihex_tmp
0030BEr 3  8D rr rr             sta ihex_tmp
0030C1r 3  18                   clc
0030C2r 3  6D rr rr             adc running_checksum    ; add result to checksum
0030C5r 3  8D rr rr             sta running_checksum
0030C8r 3  AD rr rr             lda ihex_tmp            ; return result
0030CBr 3  60                   rts
0030CCr 3               
0030CCr 3               
0030CCr 3               ; ## GO ( -- ) "jump to address"
0030CCr 3               ; ## "go" coded Custom
0030CCr 3               xt_go:
0030CCr 3  20 rr rr             jsr underflow_1
0030CFr 3  B5 00                lda 0, x
0030D1r 3  85 rr                sta tmp1
0030D3r 3  B5 01                lda 1, x
0030D5r 3  85 rr                sta tmp1 + 1
0030D7r 3  6C rr rr             jmp (tmp1)
0030DAr 3               z_go:
0030DAr 3               ; END
0030DAr 3               
0030DAr 3               
0030DAr 2                   .include "headers.s"          ; Headers of native words
0030DAr 3               ; Dictionary Headers for Tali Forth 2
0030DAr 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0030DAr 3               ; First version: 05. Dec 2016 (Liara Forth)
0030DAr 3               ; This version: 29. Dec 2018
0030DAr 3               
0030DAr 3               ; Dictionary headers are kept separately from the code, which allows various
0030DAr 3               ; tricks in the code. We roughly follow the Gforth terminology: The Execution
0030DAr 3               ; Token (xt) is the address of the first byte of a word's code that can be, uh,
0030DAr 3               ; executed; the Name Token (nt) is a pointer to the beginning of the word's
0030DAr 3               ; header in the Dictionary. There the link to the next word in the Dictionary
0030DAr 3               ; is always one cell down from the current word's own nt. In the code itself,
0030DAr 3               ; we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.
0030DAr 3               
0030DAr 3               ; This gives us the following header structure:
0030DAr 3               
0030DAr 3               ;              8 bit     8 bit
0030DAr 3               ;               LSB       MSB
0030DAr 3               ; nt_word ->  +--------+--------+
0030DAr 3               ;          +0 | Length | Status |
0030DAr 3               ;             +--------+--------+
0030DAr 3               ;          +2 | Next Header     | -> nt_next_word
0030DAr 3               ;             +-----------------+
0030DAr 3               ;          +4 | Start of Code   | -> xt_word
0030DAr 3               ;             +-----------------+
0030DAr 3               ;          +6 | End of Code     | -> z_word
0030DAr 3               ;             +--------+--------+
0030DAr 3               ;          +8 | Name   |        |
0030DAr 3               ;             +--------+--------+
0030DAr 3               ;             |        |        |
0030DAr 3               ;             +--------+--------+
0030DAr 3               ;             |        |  ...   | (name string does not end with a zero)
0030DAr 3               ;          +n +--------+--------+
0030DAr 3               
0030DAr 3               ; The Status Byte is created by adding the flags defined in definitions.asm,
0030DAr 3               ; which are:
0030DAr 3               
0030DAr 3               ;       CO - Compile Only
0030DAr 3               ;       IM - Immediate Word
0030DAr 3               ;       NN - Never Native Compile (must always be called by JSR)
0030DAr 3               ;       AN - Always Native Compile (may not be called by JSR)
0030DAr 3               ;       UF - Contains underflow check
0030DAr 3               ;       HC - Has CFA (words created by CREATE and DOES> only)
0030DAr 3               
0030DAr 3               ; Note there are currently two bits unused.
0030DAr 3               
0030DAr 3               ; By default, all existing words can be natively compiled (compiled inline) or
0030DAr 3               ; as a subroutine jump target; the system decides which variant to use based on
0030DAr 3               ; a threshold the user can set. By default, all user-created words are flagged
0030DAr 3               ; never-native. The user can override this by using the always-native word
0030DAr 3               ; just after defining their new word.  The NN flag forbids native compiling,
0030DAr 3               ; the AN flag forces it.
0030DAr 3               
0030DAr 3               ; The last word (top word in code) is always BYE. It is marked as the last word
0030DAr 3               ; by its value of 0000 in its Next Header field. The words are sorted with the
0030DAr 3               ; more common ones first (further down in code) so they are found earlier.
0030DAr 3               ; Anything to do with output comes later (further up) because things will
0030DAr 3               ; always be slow if there is a human involved.
0030DAr 3               
0030DAr 3               ; The initial skeleton of this list was automatically generated by a script
0030DAr 3               ; in the tools folder and then sorted by hand.
0030DAr 3               
0030DAr 3               nt_bye:
0030DAr 3  03                   .byte 3         ; length of word strings
0030DBr 3  00                   .byte 0         ; status byte
0030DCr 3  00 00                .word 0000      ; next word in Dictionary, 0000 signals end
0030DEr 3  rr rr                .word xt_bye    ; start of code block (xt of this word)
0030E0r 3  rr rr                .word z_bye     ; end of code (RTS)
0030E2r 3  62 79 65             .byte "bye"     ; word name, always lower case, not zero-terminated
0030E5r 3               
0030E5r 3               
0030E5r 3               nt_cold:
0030E5r 3  04 00                .byte 4, 0
0030E7r 3  rr rr rr rr          .word nt_bye, xt_cold, z_cold
0030EBr 3  rr rr        
0030EDr 3  63 6F 6C 64          .byte "cold"
0030F1r 3               .ifdef LCD_BUF
0030F1r 3               nt_lcdput:
0030F1r 3  06 10                .byte 6, UF
0030F3r 3  rr rr rr rr          .word nt_cold, xt_lcdput, z_lcdput
0030F7r 3  rr rr        
0030F9r 3  6C 63 64 70          .byte "lcdput"
0030FDr 3  75 74        
0030FFr 3               nt_haslcd:
0030FFr 3  06 00                .byte 6, 0
003101r 3  rr rr rr rr          .word nt_lcdput, xt_haslcd, z_haslcd
003105r 3  rr rr        
003107r 3  68 61 73 6C          .byte "haslcd"
00310Br 3  63 64        
00310Dr 3               nt_lcdprint:
00310Dr 3  08 10                .byte 8, UF
00310Fr 3  rr rr rr rr          .word nt_haslcd, xt_lcdprint, z_lcdprint
003113r 3  rr rr        
003115r 3  6C 63 64 70          .byte "lcdprint"
003119r 3  72 69 6E 74  
00311Dr 3               .endif
00311Dr 3               nt_cls:
00311Dr 3  03 00                .byte 3, 0
00311Fr 3               .ifdef LCD_BUF
00311Fr 3  rr rr rr rr          .word nt_lcdprint, xt_cls, z_cls
003123r 3  rr rr        
003125r 3               .else
003125r 3                       .word nt_cold, xt_cls, z_cls
003125r 3               .endif
003125r 3  63 6C 73             .byte "cls"
003128r 3               
003128r 3               .ifdef VIA1_BASE
003128r 3               nt_spi_init:
003128r 3  08 00                .byte 8, 0
00312Ar 3  rr rr rr rr          .word nt_cls, xt_spi_init, z_spi_init
00312Er 3  rr rr        
003130r 3  73 70 69 5F          .byte "spi_init"
003134r 3  69 6E 69 74  
003138r 3               
003138r 3               
003138r 3               nt_spi_clk_toggle:
003138r 3  0E 00                .byte 14, 0
00313Ar 3  rr rr rr rr          .word nt_spi_init, xt_spi_clk_toggle, z_spi_clk_toggle
00313Er 3  rr rr        
003140r 3  73 70 69 5F          .byte "spi_clk_toggle"
003144r 3  63 6C 6B 5F  
003148r 3  74 6F 67 67  
00314Er 3               
00314Er 3               nt_spi_select:
00314Er 3  0A 00                .byte 10, 0
003150r 3  rr rr rr rr          .word nt_spi_clk_toggle, xt_spi_select, z_spi_select
003154r 3  rr rr        
003156r 3  73 70 69 5F          .byte "spi_select"
00315Ar 3  73 65 6C 65  
00315Er 3  63 74        
003160r 3               
003160r 3               nt_spi_transceive:
003160r 3  0E 00                .byte 14, 0
003162r 3  rr rr rr rr          .word nt_spi_select, xt_spi_transceive, z_spi_transceive
003166r 3  rr rr        
003168r 3  73 70 69 5F          .byte "spi_transceive"
00316Cr 3  74 72 61 6E  
003170r 3  73 63 65 69  
003176r 3               .endif
003176r 3               
003176r 3               
003176r 3               .ifdef CF_ADDRESS
003176r 3               nt_cf_info:
003176r 3  04 00                .byte 4, 0
003178r 3                       .ifdef VIA1_BASE
003178r 3  rr rr rr rr          .word nt_spi_select, xt_cf_info, z_cf_info
00317Cr 3  rr rr        
00317Er 3                       .else
00317Er 3                       .word nt_cls, xt_cf_info, z_cf_info
00317Er 3                       .endif
00317Er 3  69 6E 66 6F          .byte "info"
003182r 3               .endif
003182r 3               .ifdef io_read_sector_address
003182r 3               nt_io_readblock:
003182r 3  02 10                .byte 2, UF
003184r 3                       .ifdef CF_ADDRESS
003184r 3  rr rr rr rr          .word nt_cf_info, xt_io_readblock, z_io_readblock
003188r 3  rr rr        
00318Ar 3                       .elseif .def(VIA1_BASE)
00318Ar 3                       .word nt_spi_transceive, xt_io_readblock, z_io_readblock
00318Ar 3                       .else
00318Ar 3                       .word nt_cls, xt_io_readblock, z_io_readblock
00318Ar 3                       .endif
00318Ar 3  72 62                .byte "rb"
00318Cr 3               nt_io_writeblock:
00318Cr 3  02 10                .byte 2, UF
00318Er 3  rr rr rr rr          .word nt_io_readblock, xt_io_writeblock, z_io_writeblock
003192r 3  rr rr        
003194r 3  77 62                .byte "wb"
003196r 3               .endif
003196r 3               nt_time:
003196r 3  04 00                .byte 4, 0
003198r 3               .ifdef io_read_sector_address
003198r 3  rr rr rr rr          .word nt_io_writeblock, xt_time, z_time
00319Cr 3  rr rr        
00319Er 3               .elseif .def(CF_ADDRESS)
00319Er 3                       .word nt_cf_info, xt_time, z_time
00319Er 3               .elseif .def(VIA1_BASE)
00319Er 3                       .word nt_spi_transceive, xt_time, z_time
00319Er 3               .else
00319Er 3                       .word nt_cls, xt_time, z_time
00319Er 3               .endif
00319Er 3  74 69 6D 65          .byte "time"
0031A2r 3               
0031A2r 3               nt_bank:                  ; RAM expansion
0031A2r 3  04 10                .byte 4, UF
0031A4r 3  rr rr rr rr          .word nt_time, xt_bank, z_bank
0031A8r 3  rr rr        
0031AAr 3  62 61 6E 6B          .byte "bank"
0031AEr 3               nt_expad:                  ; RAM expansion
0031AEr 3  05 10                .byte 5, UF
0031B0r 3  rr rr rr rr          .word nt_bank, xt_set_ram_expansion_address, z_set_ram_expansion_address
0031B4r 3  rr rr        
0031B6r 3  65 78 70 61          .byte "expad"
0031BAr 3  64           
0031BBr 3               
0031BBr 3               nt_intelhex:
0031BBr 3  04 08                .byte 4, NN
0031BDr 3  rr rr rr rr          .word nt_expad, xt_intelhex, z_intelhex
0031C1r 3  rr rr        
0031C3r 3  69 68 65 78          .byte "ihex"
0031C7r 3               
0031C7r 3               nt_go:
0031C7r 3  02 10                .byte 2, UF
0031C9r 3  rr rr rr rr          .word nt_intelhex, xt_go, z_go
0031CDr 3  rr rr        
0031CFr 3  67 6F                .byte "go"
0031D1r 3               
0031D1r 3               nt_ed:                  ; ed6502
0031D1r 3  02 08                .byte 2, NN
0031D3r 3  rr rr rr rr          .word nt_go, xt_ed, z_ed
0031D7r 3  rr rr        
0031D9r 3  65 64                .byte "ed"
0031DBr 3               
0031DBr 3  03 08        nt_see: .byte 3, NN
0031DDr 3  rr rr rr rr          .word nt_ed, xt_see, z_see
0031E1r 3  rr rr        
0031E3r 3  73 65 65             .byte "see"
0031E6r 3               
0031E6r 3               nt_forth:
0031E6r 3  05 00                .byte 5, 0
0031E8r 3  rr rr rr rr          .word nt_see, xt_forth, z_forth
0031ECr 3  rr rr        
0031EEr 3  66 6F 72 74          .byte "forth"
0031F2r 3  68           
0031F3r 3               
0031F3r 3               nt_order:
0031F3r 3  05 00                .byte 5, 0
0031F5r 3  rr rr rr rr          .word nt_forth, xt_order, z_order
0031F9r 3  rr rr        
0031FBr 3  6F 72 64 65          .byte "order"
0031FFr 3  72           
003200r 3               
003200r 3               nt_to_order:
003200r 3  06 00                .byte 6, 0
003202r 3  rr rr rr rr          .word nt_order, xt_to_order, z_to_order
003206r 3  rr rr        
003208r 3  3E 6F 72 64          .byte ">order"
00320Cr 3  65 72        
00320Er 3               
00320Er 3               nt_previous:
00320Er 3  08 00                .byte 8, 0
003210r 3  rr rr rr rr          .word nt_to_order, xt_previous, z_previous
003214r 3  rr rr        
003216r 3  70 72 65 76          .byte "previous"
00321Ar 3  69 6F 75 73  
00321Er 3               
00321Er 3               nt_also:
00321Er 3  04 00                .byte 4, 0
003220r 3  rr rr rr rr          .word nt_previous, xt_also, z_also
003224r 3  rr rr        
003226r 3  61 6C 73 6F          .byte "also"
00322Ar 3               
00322Ar 3               nt_only:
00322Ar 3  04 00                .byte 4, 0
00322Cr 3  rr rr rr rr          .word nt_also, xt_only, z_only
003230r 3  rr rr        
003232r 3  6F 6E 6C 79          .byte "only"
003236r 3               
003236r 3               nt_forth_wordlist:      ; shares code with ZERO
003236r 3  0E 00                .byte 14, 0
003238r 3  rr rr rr rr          .word nt_only, xt_forth_wordlist, z_forth_wordlist
00323Cr 3  rr rr        
00323Er 3  66 6F 72 74          .byte "forth-wordlist"
003242r 3  68 2D 77 6F  
003246r 3  72 64 6C 69  
00324Cr 3               
00324Cr 3               nt_editor_wordlist:     ; shares code with ONE
00324Cr 3  0F 00                .byte 15, 0
00324Er 3  rr rr rr rr          .word nt_forth_wordlist, xt_editor_wordlist, z_editor_wordlist
003252r 3  rr rr        
003254r 3  65 64 69 74          .byte "editor-wordlist"
003258r 3  6F 72 2D 77  
00325Cr 3  6F 72 64 6C  
003263r 3               
003263r 3               nt_assembler_wordlist:  ; shares code with TWO
003263r 3  12 00                .byte 18, 0
003265r 3  rr rr rr rr          .word nt_editor_wordlist, xt_assembler_wordlist, z_assembler_wordlist
003269r 3  rr rr        
00326Br 3  61 73 73 65          .byte "assembler-wordlist"
00326Fr 3  6D 62 6C 65  
003273r 3  72 2D 77 6F  
00327Dr 3               
00327Dr 3               nt_root_wordlist:
00327Dr 3  0D 00                .byte 13, 0
00327Fr 3  rr rr rr rr          .word nt_assembler_wordlist, xt_root_wordlist, z_root_wordlist
003283r 3  rr rr        
003285r 3  72 6F 6F 74          .byte "root-wordlist"
003289r 3  2D 77 6F 72  
00328Dr 3  64 6C 69 73  
003292r 3               
003292r 3               nt_get_order:
003292r 3  09 00                .byte 9, 0
003294r 3  rr rr rr rr          .word nt_root_wordlist, xt_get_order, z_get_order
003298r 3  rr rr        
00329Ar 3  67 65 74 2D          .byte "get-order"
00329Er 3  6F 72 64 65  
0032A2r 3  72           
0032A3r 3               
0032A3r 3               nt_set_order:
0032A3r 3  09 00                .byte 9, 0
0032A5r 3  rr rr rr rr          .word nt_get_order, xt_set_order, z_set_order
0032A9r 3  rr rr        
0032ABr 3  73 65 74 2D          .byte "set-order"
0032AFr 3  6F 72 64 65  
0032B3r 3  72           
0032B4r 3               
0032B4r 3               nt_get_current:
0032B4r 3  0B 00                .byte 11, 0
0032B6r 3  rr rr rr rr          .word nt_set_order, xt_get_current, z_get_current
0032BAr 3  rr rr        
0032BCr 3  67 65 74 2D          .byte "get-current"
0032C0r 3  63 75 72 72  
0032C4r 3  65 6E 74     
0032C7r 3               
0032C7r 3               nt_set_current:
0032C7r 3  0B 10                .byte 11, UF
0032C9r 3  rr rr rr rr          .word nt_get_current, xt_set_current, z_set_current
0032CDr 3  rr rr        
0032CFr 3  73 65 74 2D          .byte "set-current"
0032D3r 3  63 75 72 72  
0032D7r 3  65 6E 74     
0032DAr 3               
0032DAr 3               nt_search_wordlist:
0032DAr 3  0F 10                .byte 15, UF
0032DCr 3  rr rr rr rr          .word nt_set_current, xt_search_wordlist, z_search_wordlist
0032E0r 3  rr rr        
0032E2r 3  73 65 61 72          .byte "search-wordlist"
0032E6r 3  63 68 2D 77  
0032EAr 3  6F 72 64 6C  
0032F1r 3               
0032F1r 3               nt_wordlist:
0032F1r 3  08 00                .byte 8, 0
0032F3r 3  rr rr rr rr          .word nt_search_wordlist, xt_wordlist, z_wordlist
0032F7r 3  rr rr        
0032F9r 3  77 6F 72 64          .byte "wordlist"
0032FDr 3  6C 69 73 74  
003301r 3               
003301r 3               nt_definitions:
003301r 3  0B 00                .byte 11, 0
003303r 3  rr rr rr rr          .word nt_wordlist, xt_definitions, z_definitions
003307r 3  rr rr        
003309r 3  64 65 66 69          .byte "definitions"
00330Dr 3  6E 69 74 69  
003311r 3  6F 6E 73     
003314r 3               
003314r 3               nt_block_ramdrive_init:
003314r 3  13 10                .byte 19, UF
003316r 3  rr rr rr rr          .word nt_definitions, xt_block_ramdrive_init, z_block_ramdrive_init
00331Ar 3  rr rr        
00331Cr 3  62 6C 6F 63          .byte "block-ramdrive-init"
003320r 3  6B 2D 72 61  
003324r 3  6D 64 72 69  
00332Fr 3               
00332Fr 3               nt_list:
00332Fr 3  04 10                .byte 4, UF
003331r 3  rr rr rr rr          .word nt_block_ramdrive_init, xt_list, z_list
003335r 3  rr rr        
003337r 3  6C 69 73 74          .byte "list"
00333Br 3               
00333Br 3               nt_thru:
00333Br 3  04 10                .byte 4, UF
00333Dr 3  rr rr rr rr          .word nt_list, xt_thru, z_thru
003341r 3  rr rr        
003343r 3  74 68 72 75          .byte "thru"
003347r 3               
003347r 3               nt_load:
003347r 3  04 10                .byte 4, UF
003349r 3  rr rr rr rr          .word nt_thru, xt_load, z_load
00334Dr 3  rr rr        
00334Fr 3  6C 6F 61 64          .byte "load"
003353r 3               
003353r 3               nt_flush:
003353r 3  05 00                .byte 5, 0
003355r 3  rr rr rr rr          .word nt_load, xt_flush, z_flush
003359r 3  rr rr        
00335Br 3  66 6C 75 73          .byte "flush"
00335Fr 3  68           
003360r 3               
003360r 3               nt_empty_buffers:
003360r 3  0D 00                .byte 13, 0
003362r 3  rr rr rr rr          .word nt_flush, xt_empty_buffers, z_empty_buffers
003366r 3  rr rr        
003368r 3  65 6D 70 74          .byte "empty-buffers"
00336Cr 3  79 2D 62 75  
003370r 3  66 66 65 72  
003375r 3               
003375r 3               nt_buffer:
003375r 3  06 00                .byte 6, 0
003377r 3  rr rr rr rr          .word nt_empty_buffers, xt_buffer, z_buffer
00337Br 3  rr rr        
00337Dr 3  62 75 66 66          .byte "buffer"
003381r 3  65 72        
003383r 3               
003383r 3               nt_update:
003383r 3  06 00                .byte 6, 0
003385r 3  rr rr rr rr          .word nt_buffer, xt_update, z_update
003389r 3  rr rr        
00338Br 3  75 70 64 61          .byte "update"
00338Fr 3  74 65        
003391r 3               
003391r 3               nt_block:
003391r 3  05 00                .byte 5, 0
003393r 3  rr rr rr rr          .word nt_update, xt_block, z_block
003397r 3  rr rr        
003399r 3  62 6C 6F 63          .byte "block"
00339Dr 3  6B           
00339Er 3               
00339Er 3               nt_save_buffers:
00339Er 3  0C 00                .byte 12, 0
0033A0r 3  rr rr rr rr          .word nt_block, xt_save_buffers, z_save_buffers
0033A4r 3  rr rr        
0033A6r 3  73 61 76 65          .byte "save-buffers"
0033AAr 3  2D 62 75 66  
0033AEr 3  66 65 72 73  
0033B2r 3               
0033B2r 3               nt_block_read_vector:
0033B2r 3  11 28                .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
0033B4r 3  rr rr rr rr          .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
0033B8r 3  rr rr        
0033BAr 3  62 6C 6F 63          .byte "block-read-vector"
0033BEr 3  6B 2D 72 65  
0033C2r 3  61 64 2D 76  
0033CBr 3               
0033CBr 3               nt_block_read:
0033CBr 3  0A 28                .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
0033CDr 3  rr rr rr rr          .word nt_block_read_vector, xt_block_read, z_block_read
0033D1r 3  rr rr        
0033D3r 3  62 6C 6F 63          .byte "block-read"
0033D7r 3  6B 2D 72 65  
0033DBr 3  61 64        
0033DDr 3               
0033DDr 3               nt_block_write_vector:
0033DDr 3  12 08                .byte 18, NN ; Deferred words need the HC (Code Field) flag.
0033DFr 3  rr rr rr rr          .word nt_block_read, xt_block_write_vector, z_block_write_vector
0033E3r 3  rr rr        
0033E5r 3  62 6C 6F 63          .byte "block-write-vector"
0033E9r 3  6B 2D 77 72  
0033EDr 3  69 74 65 2D  
0033F7r 3               
0033F7r 3               nt_block_write:
0033F7r 3  0B 08                .byte 11, NN ; Deferred words need the HC (Code Field) flag.
0033F9r 3  rr rr rr rr          .word nt_block_write_vector, xt_block_write, z_block_write
0033FDr 3  rr rr        
0033FFr 3  62 6C 6F 63          .byte "block-write"
003403r 3  6B 2D 77 72  
003407r 3  69 74 65     
00340Ar 3               
00340Ar 3               nt_blk:
00340Ar 3  03 00                .byte 3, 0
00340Cr 3  rr rr rr rr          .word nt_block_write, xt_blk, z_blk
003410r 3  rr rr        
003412r 3  62 6C 6B             .byte "blk"
003415r 3               
003415r 3               nt_scr:
003415r 3  03 00                .byte 3, 0
003417r 3  rr rr rr rr          .word nt_blk, xt_scr, z_scr
00341Br 3  rr rr        
00341Dr 3  73 63 72             .byte "scr"
003420r 3               
003420r 3               nt_blkbuffer:
003420r 3  09 00                .byte 9, 0
003422r 3  rr rr rr rr          .word nt_scr, xt_blkbuffer, z_blkbuffer
003426r 3  rr rr        
003428r 3  62 6C 6B 62          .byte "blkbuffer"
00342Cr 3  75 66 66 65  
003430r 3  72           
003431r 3               
003431r 3               nt_buffblocknum:
003431r 3  0C 00                .byte 12, 0
003433r 3  rr rr rr rr          .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
003437r 3  rr rr        
003439r 3  62 75 66 66          .byte "buffblocknum"
00343Dr 3  62 6C 6F 63  
003441r 3  6B 6E 75 6D  
003445r 3               
003445r 3               nt_buffstatus:
003445r 3  0A 00                .byte 10, 0
003447r 3  rr rr rr rr          .word nt_buffblocknum, xt_buffstatus, z_buffstatus
00344Br 3  rr rr        
00344Dr 3  62 75 66 66          .byte "buffstatus"
003451r 3  73 74 61 74  
003455r 3  75 73        
003457r 3               
003457r 3               nt_buffer_colon:
003457r 3  07 00                .byte 7, 0
003459r 3  rr rr rr rr          .word nt_buffstatus, xt_buffer_colon, z_buffer_colon
00345Dr 3  rr rr        
00345Fr 3  62 75 66 66          .byte "buffer:"
003463r 3  65 72 3A     
003466r 3               
003466r 3               nt_useraddr:
003466r 3  08 00                .byte 8, 0
003468r 3  rr rr rr rr          .word nt_buffer_colon, xt_useraddr, z_useraddr
00346Cr 3  rr rr        
00346Er 3  75 73 65 72          .byte "useraddr"
003472r 3  61 64 64 72  
003476r 3               
003476r 3               nt_action_of:
003476r 3  09 04                .byte 9, IM
003478r 3  rr rr rr rr          .word nt_useraddr, xt_action_of, z_action_of
00347Cr 3  rr rr        
00347Er 3  61 63 74 69          .byte "action-of"
003482r 3  6F 6E 2D 6F  
003486r 3  66           
003487r 3               
003487r 3               nt_is:
003487r 3  02 04                .byte 2, IM
003489r 3  rr rr rr rr          .word nt_action_of, xt_is, z_is
00348Dr 3  rr rr        
00348Fr 3  69 73                .byte "is"
003491r 3               
003491r 3               nt_defer_store:
003491r 3  06 00                .byte 6, 0
003493r 3  rr rr rr rr          .word nt_is, xt_defer_store, z_defer_store
003497r 3  rr rr        
003499r 3  64 65 66 65          .byte "defer!"
00349Dr 3  72 21        
00349Fr 3               
00349Fr 3               nt_defer_fetch:
00349Fr 3  06 00                .byte 6, 0
0034A1r 3  rr rr rr rr          .word nt_defer_store, xt_defer_fetch, z_defer_fetch
0034A5r 3  rr rr        
0034A7r 3  64 65 66 65          .byte "defer@"
0034ABr 3  72 40        
0034ADr 3               
0034ADr 3               nt_endcase:
0034ADr 3  07 0D                .byte 7, IM+CO+NN
0034AFr 3  rr rr rr rr          .word nt_defer_fetch, xt_endcase, z_endcase
0034B3r 3  rr rr        
0034B5r 3  65 6E 64 63          .byte "endcase"
0034B9r 3  61 73 65     
0034BCr 3               
0034BCr 3               nt_endof:
0034BCr 3  05 0D                .byte 5, IM+CO+NN
0034BEr 3  rr rr rr rr          .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
0034C2r 3  rr rr        
0034C4r 3  65 6E 64 6F          .byte "endof"
0034C8r 3  66           
0034C9r 3               
0034C9r 3               nt_of:
0034C9r 3  02 0D                .byte 2, IM+CO+NN
0034CBr 3  rr rr rr rr          .word nt_endof, xt_of, z_of
0034CFr 3  rr rr        
0034D1r 3  6F 66                .byte "of"
0034D3r 3               
0034D3r 3               nt_case:
0034D3r 3  04 0D                .byte 4, IM+CO+NN
0034D5r 3  rr rr rr rr          .word nt_of, xt_case, z_case    ; shares code with ZERO
0034D9r 3  rr rr        
0034DBr 3  63 61 73 65          .byte "case"
0034DFr 3               
0034DFr 3               nt_while:
0034DFr 3  05 0D                .byte 5, IM+CO+NN
0034E1r 3  rr rr rr rr          .word nt_case, xt_while, z_while
0034E5r 3  rr rr        
0034E7r 3  77 68 69 6C          .byte "while"
0034EBr 3  65           
0034ECr 3               
0034ECr 3               nt_until:
0034ECr 3  05 0D                .byte 5, IM+CO+NN
0034EEr 3  rr rr rr rr          .word nt_while, xt_until, z_until
0034F2r 3  rr rr        
0034F4r 3  75 6E 74 69          .byte "until"
0034F8r 3  6C           
0034F9r 3               
0034F9r 3               nt_repeat:
0034F9r 3  06 0D                .byte 6, IM+CO+NN
0034FBr 3  rr rr rr rr          .word nt_until, xt_repeat, z_repeat
0034FFr 3  rr rr        
003501r 3  72 65 70 65          .byte "repeat"
003505r 3  61 74        
003507r 3               
003507r 3               nt_else:
003507r 3  04 0D                .byte 4, IM+CO+NN
003509r 3  rr rr rr rr          .word nt_repeat, xt_else, z_else
00350Dr 3  rr rr        
00350Fr 3  65 6C 73 65          .byte "else"
003513r 3               
003513r 3               nt_then:
003513r 3  04 0D                .byte 4, IM+CO+NN
003515r 3  rr rr rr rr          .word nt_else, xt_then, z_then
003519r 3  rr rr        
00351Br 3  74 68 65 6E          .byte "then"
00351Fr 3               
00351Fr 3               nt_if:
00351Fr 3  02 0D                .byte 2, IM+CO+NN
003521r 3  rr rr rr rr          .word nt_then, xt_if, z_if
003525r 3  rr rr        
003527r 3  69 66                .byte "if"
003529r 3               
003529r 3               nt_dot_paren:
003529r 3  02 04                .byte 2, IM
00352Br 3  rr rr rr rr          .word nt_if, xt_dot_paren, z_dot_paren
00352Fr 3  rr rr        
003531r 3  2E 28                .byte ".("
003533r 3               
003533r 3               nt_paren:
003533r 3  01 04                .byte 1, IM
003535r 3  rr rr rr rr          .word nt_dot_paren, xt_paren, z_paren
003539r 3  rr rr        
00353Br 3  28                   .byte "("
00353Cr 3               
00353Cr 3               nt_word:
00353Cr 3  04 10                .byte 4, UF
00353Er 3  rr rr rr rr          .word nt_paren, xt_word, z_word
003542r 3  rr rr        
003544r 3  77 6F 72 64          .byte "word"
003548r 3               
003548r 3               nt_find:
003548r 3  04 10                .byte 4, UF
00354Ar 3  rr rr rr rr          .word nt_word, xt_find, z_find
00354Er 3  rr rr        
003550r 3  66 69 6E 64          .byte "find"
003554r 3               
003554r 3               nt_environment_q:
003554r 3  0C 10                .byte 12, UF
003556r 3  rr rr rr rr          .word nt_find, xt_environment_q, z_environment_q
00355Ar 3  rr rr        
00355Cr 3  65 6E 76 69          .byte "environment?"
003560r 3  72 6F 6E 6D  
003564r 3  65 6E 74 3F  
003568r 3               
003568r 3               nt_search:
003568r 3  06 18                .byte 6, UF+NN
00356Ar 3  rr rr rr rr          .word nt_environment_q, xt_search, z_search
00356Er 3  rr rr        
003570r 3  73 65 61 72          .byte "search"
003574r 3  63 68        
003576r 3               
003576r 3               nt_compare:
003576r 3  07 10                .byte 7, UF
003578r 3  rr rr rr rr          .word nt_search, xt_compare, z_compare
00357Cr 3  rr rr        
00357Er 3  63 6F 6D 70          .byte "compare"
003582r 3  61 72 65     
003585r 3               
003585r 3               nt_disasm:
003585r 3  06 10                .byte 6, UF
003587r 3  rr rr rr rr          .word nt_compare, xt_disasm, z_disasm
00358Br 3  rr rr        
00358Dr 3  64 69 73 61          .byte "disasm"
003591r 3  73 6D        
003593r 3               
003593r 3               nt_dot_s:
003593r 3  02 00                .byte 2, 0
003595r 3  rr rr rr rr          .word nt_disasm, xt_dot_s, z_dot_s
003599r 3  rr rr        
00359Br 3  2E 73                .byte ".s"
00359Dr 3               
00359Dr 3               nt_dump:
00359Dr 3  04 10                .byte 4, UF
00359Fr 3  rr rr rr rr          .word nt_dot_s, xt_dump, z_dump
0035A3r 3  rr rr        
0035A5r 3  64 75 6D 70          .byte "dump"
0035A9r 3               
0035A9r 3               nt_bell:
0035A9r 3  04 00                .byte 4, 0
0035ABr 3  rr rr rr rr          .word nt_dump, xt_bell, z_bell
0035AFr 3  rr rr        
0035B1r 3  62 65 6C 6C          .byte "bell"
0035B5r 3               
0035B5r 3               nt_align:
0035B5r 3  05 00                .byte 5, 0
0035B7r 3  rr rr rr rr          .word nt_bell, xt_align, z_align
0035BBr 3  rr rr        
0035BDr 3  61 6C 69 67          .byte "align"
0035C1r 3  6E           
0035C2r 3               
0035C2r 3               nt_aligned:             ; same code as ALIGN
0035C2r 3  07 00                .byte 7, 0
0035C4r 3  rr rr rr rr          .word nt_align, xt_align, z_align
0035C8r 3  rr rr        
0035CAr 3  61 6C 69 67          .byte "aligned"
0035CEr 3  6E 65 64     
0035D1r 3               
0035D1r 3               nt_wordsize:
0035D1r 3  08 10                .byte 8, UF
0035D3r 3  rr rr rr rr          .word nt_aligned, xt_wordsize, z_wordsize
0035D7r 3  rr rr        
0035D9r 3  77 6F 72 64          .byte "wordsize"
0035DDr 3  73 69 7A 65  
0035E1r 3               
0035E1r 3               nt_words:
0035E1r 3  05 00                .byte 5, 0
0035E3r 3  rr rr rr rr          .word nt_wordsize, xt_words, z_words
0035E7r 3  rr rr        
0035E9r 3  77 6F 72 64          .byte "words"
0035EDr 3  73           
0035EEr 3               
0035EEr 3               nt_marker:
0035EEr 3  06 04                .byte 6, IM
0035F0r 3  rr rr rr rr          .word nt_words, xt_marker, z_marker
0035F4r 3  rr rr        
0035F6r 3  6D 61 72 6B          .byte "marker"
0035FAr 3  65 72        
0035FCr 3               
0035FCr 3               nt_at_xy:
0035FCr 3  05 10                .byte 5, UF
0035FEr 3  rr rr rr rr          .word nt_marker, xt_at_xy, z_at_xy
003602r 3  rr rr        
003604r 3  61 74 2D 78          .byte "at-xy"
003608r 3  79           
003609r 3               
003609r 3               nt_page:
003609r 3  04 00                .byte 4, 0
00360Br 3  rr rr rr rr          .word nt_at_xy, xt_page, z_page
00360Fr 3  rr rr        
003611r 3  70 61 67 65          .byte "page"
003615r 3               
003615r 3               nt_cr:
003615r 3  02 00                .byte 2, 0
003617r 3  rr rr rr rr          .word nt_page, xt_cr, z_cr
00361Br 3  rr rr        
00361Dr 3  63 72                .byte "cr"
00361Fr 3               
00361Fr 3               nt_input:
00361Fr 3  05 00                .byte 5, 0
003621r 3  rr rr rr rr          .word nt_cr, xt_input, z_input
003625r 3  rr rr        
003627r 3  69 6E 70 75          .byte "input"
00362Br 3  74           
00362Cr 3               
00362Cr 3               nt_output:
00362Cr 3  06 00                .byte 6, 0
00362Er 3  rr rr rr rr          .word nt_input, xt_output, z_output
003632r 3  rr rr        
003634r 3  6F 75 74 70          .byte "output"
003638r 3  75 74        
00363Ar 3               
00363Ar 3               nt_sign:
00363Ar 3  04 10                .byte 4, UF
00363Cr 3  rr rr rr rr          .word nt_output, xt_sign, z_sign
003640r 3  rr rr        
003642r 3  73 69 67 6E          .byte "sign"
003646r 3               
003646r 3               nt_hold:
003646r 3  04 10                .byte 4, UF
003648r 3  rr rr rr rr          .word nt_sign, xt_hold, z_hold
00364Cr 3  rr rr        
00364Er 3  68 6F 6C 64          .byte "hold"
003652r 3               
003652r 3               nt_number_sign_greater:
003652r 3  02 10                .byte 2, UF
003654r 3  rr rr rr rr          .word nt_hold, xt_number_sign_greater, z_number_sign_greater
003658r 3  rr rr        
00365Ar 3  23 3E                .byte "#>"
00365Cr 3               
00365Cr 3               nt_number_sign_s:
00365Cr 3  02 10                .byte 2, UF
00365Er 3  rr rr rr rr          .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
003662r 3  rr rr        
003664r 3  23 73                .byte "#s"
003666r 3               
003666r 3               nt_number_sign:
003666r 3  01 10                .byte 1, UF
003668r 3  rr rr rr rr          .word nt_number_sign_s, xt_number_sign, z_number_sign
00366Cr 3  rr rr        
00366Er 3  23                   .byte "#"
00366Fr 3               
00366Fr 3               nt_less_number_sign:
00366Fr 3  02 00                .byte 2, 0
003671r 3  rr rr rr rr          .word nt_number_sign, xt_less_number_sign, z_less_number_sign
003675r 3  rr rr        
003677r 3  3C 23                .byte "<#"
003679r 3               
003679r 3               nt_to_in:
003679r 3  03 00                .byte 3, 0
00367Br 3  rr rr rr rr          .word nt_less_number_sign, xt_to_in, z_to_in
00367Fr 3  rr rr        
003681r 3  3E 69 6E             .byte ">in"
003684r 3               
003684r 3               nt_within:
003684r 3  06 10                .byte 6, UF
003686r 3  rr rr rr rr          .word nt_to_in, xt_within, z_within
00368Ar 3  rr rr        
00368Cr 3  77 69 74 68          .byte "within"
003690r 3  69 6E        
003692r 3               
003692r 3               nt_hexstore:
003692r 3  08 10                .byte 8, UF
003694r 3  rr rr rr rr          .word nt_within, xt_hexstore, z_hexstore
003698r 3  rr rr        
00369Ar 3  68 65 78 73          .byte "hexstore"
00369Er 3  74 6F 72 65  
0036A2r 3               
0036A2r 3               nt_cleave:
0036A2r 3  06 10                .byte 6, UF
0036A4r 3  rr rr rr rr          .word nt_hexstore, xt_cleave, z_cleave
0036A8r 3  rr rr        
0036AAr 3  63 6C 65 61          .byte "cleave"
0036AEr 3  76 65        
0036B0r 3               
0036B0r 3               nt_pad:
0036B0r 3  03 00                .byte 3, 0
0036B2r 3  rr rr rr rr          .word nt_cleave, xt_pad, z_pad
0036B6r 3  rr rr        
0036B8r 3  70 61 64             .byte "pad"
0036BBr 3               
0036BBr 3               nt_cmove:
0036BBr 3  05 10                .byte 5, UF
0036BDr 3  rr rr rr rr          .word nt_pad, xt_cmove, z_cmove
0036C1r 3  rr rr        
0036C3r 3  63 6D 6F 76          .byte "cmove"
0036C7r 3  65           
0036C8r 3               
0036C8r 3               nt_cmove_up:
0036C8r 3  06 10                .byte 6, UF
0036CAr 3  rr rr rr rr          .word nt_cmove, xt_cmove_up, z_cmove_up
0036CEr 3  rr rr        
0036D0r 3  63 6D 6F 76          .byte "cmove>"
0036D4r 3  65 3E        
0036D6r 3               
0036D6r 3               nt_move:
0036D6r 3  04 18                .byte 4, NN+UF
0036D8r 3  rr rr rr rr          .word nt_cmove_up, xt_move, z_move
0036DCr 3  rr rr        
0036DEr 3  6D 6F 76 65          .byte "move"
0036E2r 3               
0036E2r 3               nt_backslash:
0036E2r 3  01 04                .byte 1, IM
0036E4r 3  rr rr rr rr          .word nt_move, xt_backslash, z_backslash
0036E8r 3  rr rr        
0036EAr 3  5C                   .byte $5c
0036EBr 3               
0036EBr 3               nt_star_slash:
0036EBr 3  02 10                .byte 2, UF
0036EDr 3  rr rr rr rr          .word nt_backslash, xt_star_slash, z_star_slash
0036F1r 3  rr rr        
0036F3r 3  2A 2F                .byte "*/"
0036F5r 3               
0036F5r 3               nt_star_slash_mod:
0036F5r 3  05 10                .byte 5, UF
0036F7r 3  rr rr rr rr          .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
0036FBr 3  rr rr        
0036FDr 3  2A 2F 6D 6F          .byte "*/mod"
003701r 3  64           
003702r 3               
003702r 3               nt_mod:
003702r 3  03 10                .byte 3, UF
003704r 3  rr rr rr rr          .word nt_star_slash_mod, xt_mod, z_mod
003708r 3  rr rr        
00370Ar 3  6D 6F 64             .byte "mod"
00370Dr 3               
00370Dr 3               nt_slash_mod:
00370Dr 3  04 10                .byte 4, UF
00370Fr 3  rr rr rr rr          .word nt_mod, xt_slash_mod, z_slash_mod
003713r 3  rr rr        
003715r 3  2F 6D 6F 64          .byte "/mod"
003719r 3               
003719r 3               nt_slash:
003719r 3  01 10                .byte 1, UF
00371Br 3  rr rr rr rr          .word nt_slash_mod, xt_slash, z_slash
00371Fr 3  rr rr        
003721r 3  2F                   .byte "/"
003722r 3               
003722r 3               nt_fm_slash_mod:
003722r 3  06 10                .byte 6, UF
003724r 3  rr rr rr rr          .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
003728r 3  rr rr        
00372Ar 3  66 6D 2F 6D          .byte "fm/mod"
00372Er 3  6F 64        
003730r 3               
003730r 3               nt_sm_slash_rem:
003730r 3  06 10                .byte 6, UF
003732r 3  rr rr rr rr          .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
003736r 3  rr rr        
003738r 3  73 6D 2F 72          .byte "sm/rem"
00373Cr 3  65 6D        
00373Er 3               
00373Er 3               nt_um_slash_mod:
00373Er 3  06 10                .byte 6, UF
003740r 3  rr rr rr rr          .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
003744r 3  rr rr        
003746r 3  75 6D 2F 6D          .byte "um/mod"
00374Ar 3  6F 64        
00374Cr 3               
00374Cr 3               nt_star:
00374Cr 3  01 10                .byte 1, UF
00374Er 3  rr rr rr rr          .word nt_um_slash_mod, xt_star, z_star
003752r 3  rr rr        
003754r 3  2A                   .byte "*"
003755r 3               
003755r 3               nt_um_star:
003755r 3  03 10                .byte 3, UF
003757r 3  rr rr rr rr          .word nt_star, xt_um_star, z_um_star
00375Br 3  rr rr        
00375Dr 3  75 6D 2A             .byte "um*"
003760r 3               
003760r 3               nt_m_star:
003760r 3  02 10                .byte 2, UF
003762r 3  rr rr rr rr          .word nt_um_star, xt_m_star, z_m_star
003766r 3  rr rr        
003768r 3  6D 2A                .byte "m*"
00376Ar 3               
00376Ar 3               nt_count:
00376Ar 3  05 10                .byte 5, UF
00376Cr 3  rr rr rr rr          .word nt_m_star, xt_count, z_count
003770r 3  rr rr        
003772r 3  63 6F 75 6E          .byte "count"
003776r 3  74           
003777r 3               
003777r 3               nt_decimal:
003777r 3  07 00                .byte 7, 0
003779r 3  rr rr rr rr          .word nt_count, xt_decimal, z_decimal
00377Dr 3  rr rr        
00377Fr 3  64 65 63 69          .byte "decimal"
003783r 3  6D 61 6C     
003786r 3               
003786r 3               nt_hex:
003786r 3  03 00                .byte 3, 0
003788r 3  rr rr rr rr          .word nt_decimal, xt_hex, z_hex
00378Cr 3  rr rr        
00378Er 3  68 65 78             .byte "hex"
003791r 3               
003791r 3               nt_to_number:
003791r 3  07 10                .byte 7, UF
003793r 3  rr rr rr rr          .word nt_hex, xt_to_number, z_to_number
003797r 3  rr rr        
003799r 3  3E 6E 75 6D          .byte ">number"
00379Dr 3  62 65 72     
0037A0r 3               
0037A0r 3               nt_number:
0037A0r 3  06 10                .byte 6, UF
0037A2r 3  rr rr rr rr          .word nt_to_number, xt_number, z_number
0037A6r 3  rr rr        
0037A8r 3  6E 75 6D 62          .byte "number"
0037ACr 3  65 72        
0037AEr 3               
0037AEr 3               nt_digit_question:
0037AEr 3  06 10                .byte 6, UF
0037B0r 3  rr rr rr rr          .word nt_number, xt_digit_question, z_digit_question
0037B4r 3  rr rr        
0037B6r 3  64 69 67 69          .byte "digit?"
0037BAr 3  74 3F        
0037BCr 3               
0037BCr 3               nt_base:
0037BCr 3  04 00                .byte 4, 0
0037BEr 3  rr rr rr rr          .word nt_digit_question, xt_base, z_base
0037C2r 3  rr rr        
0037C4r 3  62 61 73 65          .byte "base"
0037C8r 3               
0037C8r 3               nt_evaluate:
0037C8r 3  08 10                .byte 8, UF
0037CAr 3  rr rr rr rr          .word nt_base, xt_evaluate, z_evaluate
0037CEr 3  rr rr        
0037D0r 3  65 76 61 6C          .byte "evaluate"
0037D4r 3  75 61 74 65  
0037D8r 3               
0037D8r 3               nt_state:
0037D8r 3  05 00                .byte 5, 0
0037DAr 3  rr rr rr rr          .word nt_evaluate, xt_state, z_state
0037DEr 3  rr rr        
0037E0r 3  73 74 61 74          .byte "state"
0037E4r 3  65           
0037E5r 3               
0037E5r 3               nt_again:
0037E5r 3  05 17                .byte 5, AN+CO+IM+UF
0037E7r 3  rr rr rr rr          .word nt_state, xt_again, z_again
0037EBr 3  rr rr        
0037EDr 3  61 67 61 69          .byte "again"
0037F1r 3  6E           
0037F2r 3               
0037F2r 3               nt_begin:
0037F2r 3  05 07                .byte 5, AN+CO+IM
0037F4r 3  rr rr rr rr          .word nt_again, xt_begin, z_begin
0037F8r 3  rr rr        
0037FAr 3  62 65 67 69          .byte "begin"
0037FEr 3  6E           
0037FFr 3               
0037FFr 3               nt_quit:
0037FFr 3  04 00                .byte 4, 0
003801r 3  rr rr rr rr          .word nt_begin, xt_quit, z_quit
003805r 3  rr rr        
003807r 3  71 75 69 74          .byte "quit"
00380Br 3               
00380Br 3               nt_recurse:
00380Br 3  07 0D                .byte 7, CO+IM+NN
00380Dr 3  rr rr rr rr          .word nt_quit, xt_recurse, z_recurse
003811r 3  rr rr        
003813r 3  72 65 63 75          .byte "recurse"
003817r 3  72 73 65     
00381Ar 3               
00381Ar 3               nt_leave:
00381Ar 3  05 03                .byte 5, AN+CO
00381Cr 3  rr rr rr rr          .word nt_recurse, xt_leave, z_leave
003820r 3  rr rr        
003822r 3  6C 65 61 76          .byte "leave"
003826r 3  65           
003827r 3               
003827r 3               nt_unloop:
003827r 3  06 03                .byte 6, AN+CO
003829r 3  rr rr rr rr          .word nt_leave, xt_unloop, z_unloop
00382Dr 3  rr rr        
00382Fr 3  75 6E 6C 6F          .byte "unloop"
003833r 3  6F 70        
003835r 3               
003835r 3               nt_exit:
003835r 3  04 03                .byte 4, AN+CO
003837r 3  rr rr rr rr          .word nt_unloop, xt_exit, z_exit
00383Br 3  rr rr        
00383Dr 3  65 78 69 74          .byte "exit"
003841r 3               
003841r 3               nt_plus_loop:
003841r 3  05 05                .byte 5, CO+IM
003843r 3  rr rr rr rr          .word nt_exit, xt_plus_loop, z_plus_loop
003847r 3  rr rr        
003849r 3  2B 6C 6F 6F          .byte "+loop"
00384Dr 3  70           
00384Er 3               
00384Er 3               nt_loop:
00384Er 3  04 05                .byte 4, CO+IM
003850r 3  rr rr rr rr          .word nt_plus_loop, xt_loop, z_loop
003854r 3  rr rr        
003856r 3  6C 6F 6F 70          .byte "loop"
00385Ar 3               
00385Ar 3               nt_j:
00385Ar 3  01 03                .byte 1, AN+CO
00385Cr 3  rr rr rr rr          .word nt_loop, xt_j, z_j
003860r 3  rr rr        
003862r 3  6A                   .byte "j"
003863r 3               
003863r 3               nt_i:
003863r 3  01 03                .byte 1, AN+CO
003865r 3  rr rr rr rr          .word nt_j, xt_i, z_i
003869r 3  rr rr        
00386Br 3  69                   .byte "i"
00386Cr 3               
00386Cr 3               nt_question_do:
00386Cr 3  03 0D                .byte 3, CO+IM+NN
00386Er 3  rr rr rr rr          .word nt_i, xt_question_do, z_question_do
003872r 3  rr rr        
003874r 3  3F 64 6F             .byte "?do"
003877r 3               
003877r 3               nt_do:
003877r 3  02 0D                .byte 2, CO+IM+NN
003879r 3  rr rr rr rr          .word nt_question_do, xt_do, z_do
00387Dr 3  rr rr        
00387Fr 3  64 6F                .byte "do"
003881r 3               
003881r 3               nt_abort_quote:
003881r 3  06 0D                .byte 6, CO+IM+NN
003883r 3  rr rr rr rr          .word nt_do, xt_abort_quote, z_abort_quote
003887r 3  rr rr        
003889r 3  61 62 6F 72          .byte "abort", $22
00388Dr 3  74 22        
00388Fr 3               
00388Fr 3               nt_abort:
00388Fr 3  05 00                .byte 5, 0
003891r 3  rr rr rr rr          .word nt_abort_quote, xt_abort, z_abort
003895r 3  rr rr        
003897r 3  61 62 6F 72          .byte "abort"
00389Br 3  74           
00389Cr 3               
00389Cr 3               nt_strip_underflow:
00389Cr 3  0F 00                .byte 15, 0
00389Er 3  rr rr rr rr          .word nt_abort, xt_strip_underflow, z_strip_underflow
0038A2r 3  rr rr        
0038A4r 3  73 74 72 69          .byte "strip-underflow"
0038A8r 3  70 2D 75 6E  
0038ACr 3  64 65 72 66  
0038B3r 3               
0038B3r 3               nt_nc_limit:
0038B3r 3  08 00                .byte 8, 0
0038B5r 3  rr rr rr rr          .word nt_strip_underflow, xt_nc_limit, z_nc_limit
0038B9r 3  rr rr        
0038BBr 3  6E 63 2D 6C          .byte "nc-limit"
0038BFr 3  69 6D 69 74  
0038C3r 3               
0038C3r 3               nt_allow_native:
0038C3r 3  0C 00                .byte 12, 0
0038C5r 3  rr rr rr rr          .word nt_nc_limit, xt_allow_native, z_allow_native
0038C9r 3  rr rr        
0038CBr 3  61 6C 6C 6F          .byte "allow-native"
0038CFr 3  77 2D 6E 61  
0038D3r 3  74 69 76 65  
0038D7r 3               
0038D7r 3               nt_always_native:
0038D7r 3  0D 00                .byte 13, 0
0038D9r 3  rr rr rr rr          .word nt_allow_native, xt_always_native, z_always_native
0038DDr 3  rr rr        
0038DFr 3  61 6C 77 61          .byte "always-native"
0038E3r 3  79 73 2D 6E  
0038E7r 3  61 74 69 76  
0038ECr 3               
0038ECr 3               nt_never_native:
0038ECr 3  0C 00                .byte 12, 0
0038EEr 3  rr rr rr rr          .word nt_always_native, xt_never_native, z_never_native
0038F2r 3  rr rr        
0038F4r 3  6E 65 76 65          .byte "never-native"
0038F8r 3  72 2D 6E 61  
0038FCr 3  74 69 76 65  
003900r 3               
003900r 3               nt_compile_only:
003900r 3  0C 00                .byte 12, 0
003902r 3  rr rr rr rr          .word nt_never_native, xt_compile_only, z_compile_only
003906r 3  rr rr        
003908r 3  63 6F 6D 70          .byte "compile-only"
00390Cr 3  69 6C 65 2D  
003910r 3  6F 6E 6C 79  
003914r 3               
003914r 3               nt_immediate:
003914r 3  09 00                .byte 9, 0
003916r 3  rr rr rr rr          .word nt_compile_only, xt_immediate, z_immediate
00391Ar 3  rr rr        
00391Cr 3  69 6D 6D 65          .byte "immediate"
003920r 3  64 69 61 74  
003924r 3  65           
003925r 3               
003925r 3               nt_postpone:
003925r 3  08 05                .byte 8, IM+CO
003927r 3  rr rr rr rr          .word nt_immediate, xt_postpone, z_postpone
00392Br 3  rr rr        
00392Dr 3  70 6F 73 74          .byte "postpone"
003931r 3  70 6F 6E 65  
003935r 3               
003935r 3               nt_s_backslash_quote:
003935r 3  03 04                .byte 3, IM
003937r 3  rr rr rr rr          .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
00393Br 3  rr rr        
00393Dr 3  73 5C 22             .byte "s", $5C, $22
003940r 3               
003940r 3               nt_s_quote:
003940r 3  02 0C                .byte 2, IM+NN
003942r 3  rr rr rr rr          .word nt_s_backslash_quote, xt_s_quote, z_s_quote
003946r 3  rr rr        
003948r 3  73 22                .byte "s", $22
00394Ar 3               
00394Ar 3               nt_dot_quote:
00394Ar 3  02 05                .byte 2, CO+IM
00394Cr 3  rr rr rr rr          .word nt_s_quote, xt_dot_quote, z_dot_quote
003950r 3  rr rr        
003952r 3  2E 22                .byte ".", $22
003954r 3               
003954r 3               nt_sliteral:
003954r 3  08 15                .byte 8, CO+IM+UF
003956r 3  rr rr rr rr          .word nt_dot_quote, xt_sliteral, z_sliteral
00395Ar 3  rr rr        
00395Cr 3  73 6C 69 74          .byte "sliteral"
003960r 3  65 72 61 6C  
003964r 3               
003964r 3               nt_literal:
003964r 3  07 15                .byte 7, IM+CO+UF
003966r 3  rr rr rr rr          .word nt_sliteral, xt_literal, z_literal
00396Ar 3  rr rr        
00396Cr 3  6C 69 74 65          .byte "literal"
003970r 3  72 61 6C     
003973r 3               
003973r 3               nt_right_bracket:
003973r 3  01 04                .byte 1, IM
003975r 3  rr rr rr rr          .word nt_literal, xt_right_bracket, z_right_bracket
003979r 3  rr rr        
00397Br 3  5D                   .byte "]"
00397Cr 3               
00397Cr 3               nt_left_bracket:
00397Cr 3  01 05                .byte 1, IM+CO
00397Er 3  rr rr rr rr          .word nt_right_bracket, xt_left_bracket, z_left_bracket
003982r 3  rr rr        
003984r 3  5B                   .byte "["
003985r 3               
003985r 3               nt_compile_comma:
003985r 3  08 18                .byte 8, UF+NN
003987r 3  rr rr rr rr          .word nt_left_bracket, xt_compile_comma, z_compile_comma
00398Br 3  rr rr        
00398Dr 3  63 6F 6D 70          .byte "compile,"
003991r 3  69 6C 65 2C  
003995r 3               
003995r 3               nt_colon_noname:
003995r 3  07 00                .byte 7, 0
003997r 3  rr rr rr rr          .word nt_compile_comma, xt_colon_noname, z_colon_noname
00399Br 3  rr rr        
00399Dr 3  3A 6E 6F 6E          .byte ":noname"
0039A1r 3  61 6D 65     
0039A4r 3               
0039A4r 3               nt_semicolon:
0039A4r 3  01 05                .byte 1, CO+IM
0039A6r 3  rr rr rr rr          .word nt_colon_noname, xt_semicolon, z_semicolon
0039AAr 3  rr rr        
0039ACr 3  3B                   .byte ";"
0039ADr 3               
0039ADr 3               nt_colon:
0039ADr 3  01 00                .byte 1, 0
0039AFr 3  rr rr rr rr          .word nt_semicolon, xt_colon, z_colon
0039B3r 3  rr rr        
0039B5r 3  3A                   .byte ":"
0039B6r 3               
0039B6r 3               nt_source_id:
0039B6r 3  09 00                .byte 9, 0
0039B8r 3  rr rr rr rr          .word nt_colon, xt_source_id, z_source_id
0039BCr 3  rr rr        
0039BEr 3  73 6F 75 72          .byte "source-id"
0039C2r 3  63 65 2D 69  
0039C6r 3  64           
0039C7r 3               
0039C7r 3               nt_source:
0039C7r 3  06 00                .byte 6, 0
0039C9r 3  rr rr rr rr          .word nt_source_id, xt_source, z_source
0039CDr 3  rr rr        
0039CFr 3  73 6F 75 72          .byte "source"
0039D3r 3  63 65        
0039D5r 3               
0039D5r 3               nt_execute_parsing:
0039D5r 3  0F 10                .byte 15, UF
0039D7r 3  rr rr rr rr          .word nt_source, xt_execute_parsing, z_execute_parsing
0039DBr 3  rr rr        
0039DDr 3  65 78 65 63          .byte "execute-parsing"
0039E1r 3  75 74 65 2D  
0039E5r 3  70 61 72 73  
0039ECr 3               
0039ECr 3               nt_parse:
0039ECr 3  05 10                .byte 5, UF
0039EEr 3  rr rr rr rr          .word nt_execute_parsing, xt_parse, z_parse
0039F2r 3  rr rr        
0039F4r 3  70 61 72 73          .byte "parse"
0039F8r 3  65           
0039F9r 3               
0039F9r 3               nt_parse_name:
0039F9r 3  0A 08                .byte 10, NN
0039FBr 3  rr rr rr rr          .word nt_parse, xt_parse_name, z_parse_name
0039FFr 3  rr rr        
003A01r 3  70 61 72 73          .byte "parse-name"
003A05r 3  65 2D 6E 61  
003A09r 3  6D 65        
003A0Br 3               
003A0Br 3               nt_latestnt:
003A0Br 3  08 00                .byte 8, 0
003A0Dr 3  rr rr rr rr          .word nt_parse_name, xt_latestnt, z_latestnt
003A11r 3  rr rr        
003A13r 3  6C 61 74 65          .byte "latestnt"
003A17r 3  73 74 6E 74  
003A1Br 3               
003A1Br 3               nt_latestxt:
003A1Br 3  08 00                .byte 8, 0
003A1Dr 3  rr rr rr rr          .word nt_latestnt, xt_latestxt, z_latestxt
003A21r 3  rr rr        
003A23r 3  6C 61 74 65          .byte "latestxt"
003A27r 3  73 74 78 74  
003A2Br 3               
003A2Br 3               nt_defer:
003A2Br 3  05 00                .byte 5, 0
003A2Dr 3  rr rr rr rr          .word nt_latestxt, xt_defer, z_defer
003A31r 3  rr rr        
003A33r 3  64 65 66 65          .byte "defer"
003A37r 3  72           
003A38r 3               
003A38r 3               nt_to_body:
003A38r 3  05 10                .byte 5, UF
003A3Ar 3  rr rr rr rr          .word nt_defer, xt_to_body, z_to_body
003A3Er 3  rr rr        
003A40r 3  3E 62 6F 64          .byte ">body"
003A44r 3  79           
003A45r 3               
003A45r 3               nt_name_to_string:
003A45r 3  0B 10                .byte 11, UF
003A47r 3  rr rr rr rr          .word nt_to_body, xt_name_to_string, z_name_to_string
003A4Br 3  rr rr        
003A4Dr 3  6E 61 6D 65          .byte "name>string"
003A51r 3  3E 73 74 72  
003A55r 3  69 6E 67     
003A58r 3               
003A58r 3               nt_int_to_name:
003A58r 3  08 10                .byte 8, UF
003A5Ar 3  rr rr rr rr          .word nt_name_to_string, xt_int_to_name, z_int_to_name
003A5Er 3  rr rr        
003A60r 3  69 6E 74 3E          .byte "int>name"
003A64r 3  6E 61 6D 65  
003A68r 3               
003A68r 3               nt_name_to_int:
003A68r 3  08 10                .byte 8, UF
003A6Ar 3  rr rr rr rr          .word nt_int_to_name, xt_name_to_int, z_name_to_int
003A6Er 3  rr rr        
003A70r 3  6E 61 6D 65          .byte "name>int"
003A74r 3  3E 69 6E 74  
003A78r 3               
003A78r 3               nt_bracket_tick:
003A78r 3  03 05                .byte 3, CO+IM
003A7Ar 3  rr rr rr rr          .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
003A7Er 3  rr rr        
003A80r 3  5B 27 5D             .byte "[']"
003A83r 3               
003A83r 3               nt_tick:
003A83r 3  01 00                .byte 1, 0
003A85r 3  rr rr rr rr          .word nt_bracket_tick, xt_tick, z_tick
003A89r 3  rr rr        
003A8Br 3  27                   .byte "'"
003A8Cr 3               
003A8Cr 3               nt_find_name:
003A8Cr 3  09 10                .byte 9, UF
003A8Er 3  rr rr rr rr          .word nt_tick, xt_find_name, z_find_name
003A92r 3  rr rr        
003A94r 3  66 69 6E 64          .byte "find-name"
003A98r 3  2D 6E 61 6D  
003A9Cr 3  65           
003A9Dr 3               
003A9Dr 3               nt_fill:
003A9Dr 3  04 10                .byte 4, UF
003A9Fr 3  rr rr rr rr          .word nt_find_name, xt_fill, z_fill
003AA3r 3  rr rr        
003AA5r 3  66 69 6C 6C          .byte "fill"
003AA9r 3               
003AA9r 3               nt_blank:
003AA9r 3  05 00                .byte 5, 0     ; underflow checked by FILL
003AABr 3  rr rr rr rr          .word nt_fill, xt_blank, z_blank
003AAFr 3  rr rr        
003AB1r 3  62 6C 61 6E          .byte "blank"
003AB5r 3  6B           
003AB6r 3               
003AB6r 3               nt_erase:
003AB6r 3  05 00                .byte 5, 0      ; underflow checked by FILL
003AB8r 3  rr rr rr rr          .word nt_blank, xt_erase, z_erase
003ABCr 3  rr rr        
003ABEr 3  65 72 61 73          .byte "erase"
003AC2r 3  65           
003AC3r 3               
003AC3r 3               nt_d_plus:
003AC3r 3  02 10                .byte 2, UF
003AC5r 3  rr rr rr rr          .word nt_erase, xt_d_plus, z_d_plus
003AC9r 3  rr rr        
003ACBr 3  64 2B                .byte "d+"
003ACDr 3               
003ACDr 3               nt_d_minus:
003ACDr 3  02 10                .byte 2, UF
003ACFr 3  rr rr rr rr          .word nt_d_plus, xt_d_minus, z_d_minus
003AD3r 3  rr rr        
003AD5r 3  64 2D                .byte "d-"
003AD7r 3               
003AD7r 3               nt_d_to_s:
003AD7r 3  03 10                .byte 3, UF
003AD9r 3  rr rr rr rr          .word nt_d_minus, xt_d_to_s, z_d_to_s
003ADDr 3  rr rr        
003ADFr 3  64 3E 73             .byte "d>s"
003AE2r 3               
003AE2r 3               nt_s_to_d:
003AE2r 3  03 10                .byte 3, UF
003AE4r 3  rr rr rr rr          .word nt_d_to_s, xt_s_to_d, z_s_to_d
003AE8r 3  rr rr        
003AEAr 3  73 3E 64             .byte "s>d"
003AEDr 3               
003AEDr 3               nt_to:
003AEDr 3  02 0C                .byte 2, NN+IM
003AEFr 3  rr rr rr rr          .word nt_s_to_d, xt_to, z_to
003AF3r 3  rr rr        
003AF5r 3  74 6F                .byte "to"
003AF7r 3               
003AF7r 3               nt_value:               ; same code as CONSTANT
003AF7r 3  05 10                .byte 5, UF
003AF9r 3  rr rr rr rr          .word nt_to, xt_constant, z_constant
003AFDr 3  rr rr        
003AFFr 3  76 61 6C 75          .byte "value"
003B03r 3  65           
003B04r 3               
003B04r 3               nt_constant:
003B04r 3  08 10                .byte 8, UF
003B06r 3  rr rr rr rr          .word nt_value, xt_constant, z_constant
003B0Ar 3  rr rr        
003B0Cr 3  63 6F 6E 73          .byte "constant"
003B10r 3  74 61 6E 74  
003B14r 3               
003B14r 3               nt_variable:
003B14r 3  08 00                .byte 8, 0
003B16r 3  rr rr rr rr          .word nt_constant, xt_variable, z_variable
003B1Ar 3  rr rr        
003B1Cr 3  76 61 72 69          .byte "variable"
003B20r 3  61 62 6C 65  
003B24r 3               
003B24r 3               nt_does:
003B24r 3  05 05                .byte 5, CO+IM
003B26r 3  rr rr rr rr          .word nt_variable, xt_does, z_does
003B2Ar 3  rr rr        
003B2Cr 3  64 6F 65 73          .byte "does>"
003B30r 3  3E           
003B31r 3               
003B31r 3               nt_create:
003B31r 3  06 00                .byte 6, 0
003B33r 3  rr rr rr rr          .word nt_does, xt_create, z_create
003B37r 3  rr rr        
003B39r 3  63 72 65 61          .byte "create"
003B3Dr 3  74 65        
003B3Fr 3               
003B3Fr 3               nt_allot:
003B3Fr 3  05 10                .byte 5, UF
003B41r 3  rr rr rr rr          .word nt_create, xt_allot, z_allot
003B45r 3  rr rr        
003B47r 3  61 6C 6C 6F          .byte "allot"
003B4Br 3  74           
003B4Cr 3               
003B4Cr 3               nt_key:
003B4Cr 3  03 00                .byte 3, 0
003B4Er 3  rr rr rr rr          .word nt_allot, xt_key, z_key
003B52r 3  rr rr        
003B54r 3  6B 65 79             .byte "key"
003B57r 3               
003B57r 3               nt_depth:
003B57r 3  05 00                .byte 5, 0
003B59r 3  rr rr rr rr          .word nt_key, xt_depth, z_depth
003B5Dr 3  rr rr        
003B5Fr 3  64 65 70 74          .byte "depth"
003B63r 3  68           
003B64r 3               
003B64r 3               nt_unused:
003B64r 3  06 00                .byte 6, 0
003B66r 3  rr rr rr rr          .word nt_depth, xt_unused, z_unused
003B6Ar 3  rr rr        
003B6Cr 3  75 6E 75 73          .byte "unused"
003B70r 3  65 64        
003B72r 3               
003B72r 3               nt_r_to_input:
003B72r 3  07 08                .byte 7, NN
003B74r 3  rr rr rr rr          .word nt_unused, xt_r_to_input, z_r_to_input
003B78r 3  rr rr        
003B7Ar 3  72 3E 69 6E          .byte "r>input"
003B7Er 3  70 75 74     
003B81r 3               
003B81r 3               nt_input_to_r:
003B81r 3  07 08                .byte 7, NN
003B83r 3  rr rr rr rr          .word nt_r_to_input, xt_input_to_r, z_input_to_r
003B87r 3  rr rr        
003B89r 3  69 6E 70 75          .byte "input>r"
003B8Dr 3  74 3E 72     
003B90r 3               
003B90r 3               nt_accept:
003B90r 3  06 18                .byte 6, UF+NN
003B92r 3  rr rr rr rr          .word nt_input_to_r, xt_accept, z_accept
003B96r 3  rr rr        
003B98r 3  61 63 63 65          .byte "accept"
003B9Cr 3  70 74        
003B9Er 3               
003B9Er 3               nt_refill:
003B9Er 3  06 00                .byte 6, 0
003BA0r 3  rr rr rr rr          .word nt_accept, xt_refill, z_refill
003BA4r 3  rr rr        
003BA6r 3  72 65 66 69          .byte "refill"
003BAAr 3  6C 6C        
003BACr 3               
003BACr 3               nt_slash_string:
003BACr 3  07 10                .byte 7, UF
003BAEr 3  rr rr rr rr          .word nt_refill, xt_slash_string, z_slash_string
003BB2r 3  rr rr        
003BB4r 3  2F 73 74 72          .byte "/string"
003BB8r 3  69 6E 67     
003BBBr 3               
003BBBr 3               nt_minus_leading:
003BBBr 3  08 10                .byte 8, UF
003BBDr 3  rr rr rr rr          .word nt_slash_string, xt_minus_leading, z_minus_leading
003BC1r 3  rr rr        
003BC3r 3  2D 6C 65 61          .byte "-leading"
003BC7r 3  64 69 6E 67  
003BCBr 3               
003BCBr 3               nt_minus_trailing:
003BCBr 3  09 10                .byte 9, UF
003BCDr 3  rr rr rr rr          .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
003BD1r 3  rr rr        
003BD3r 3  2D 74 72 61          .byte "-trailing"
003BD7r 3  69 6C 69 6E  
003BDBr 3  67           
003BDCr 3               
003BDCr 3               nt_bl:
003BDCr 3  02 00                .byte 2, 0
003BDEr 3  rr rr rr rr          .word nt_minus_trailing, xt_bl, z_bl
003BE2r 3  rr rr        
003BE4r 3  62 6C                .byte "bl"
003BE6r 3               
003BE6r 3               nt_spaces:
003BE6r 3  06 10                .byte 6, UF
003BE8r 3  rr rr rr rr          .word nt_bl, xt_spaces, z_spaces
003BECr 3  rr rr        
003BEEr 3  73 70 61 63          .byte "spaces"
003BF2r 3  65 73        
003BF4r 3               
003BF4r 3               nt_bounds:
003BF4r 3  06 10                .byte 6, UF
003BF6r 3  rr rr rr rr          .word nt_spaces, xt_bounds, z_bounds
003BFAr 3  rr rr        
003BFCr 3  62 6F 75 6E          .byte "bounds"
003C00r 3  64 73        
003C02r 3               
003C02r 3               nt_c_comma:
003C02r 3  02 10                .byte 2, UF
003C04r 3  rr rr rr rr          .word nt_bounds, xt_c_comma, z_c_comma
003C08r 3  rr rr        
003C0Ar 3  63 2C                .byte "c,"
003C0Cr 3               
003C0Cr 3               nt_dnegate:
003C0Cr 3  07 10                .byte 7, UF
003C0Er 3  rr rr rr rr          .word nt_c_comma, xt_dnegate, z_dnegate
003C12r 3  rr rr        
003C14r 3  64 6E 65 67          .byte "dnegate"
003C18r 3  61 74 65     
003C1Br 3               
003C1Br 3               nt_negate:
003C1Br 3  06 10                .byte 6, UF
003C1Dr 3  rr rr rr rr          .word nt_dnegate, xt_negate, z_negate
003C21r 3  rr rr        
003C23r 3  6E 65 67 61          .byte "negate"
003C27r 3  74 65        
003C29r 3               
003C29r 3               nt_invert:
003C29r 3  06 10                .byte 6, UF
003C2Br 3  rr rr rr rr          .word nt_negate, xt_invert, z_invert
003C2Fr 3  rr rr        
003C31r 3  69 6E 76 65          .byte "invert"
003C35r 3  72 74        
003C37r 3               
003C37r 3               nt_two_to_r:
003C37r 3  03 11                .byte 3, CO+UF          ; native is special case
003C39r 3  rr rr rr rr          .word nt_invert, xt_two_to_r, z_two_to_r
003C3Dr 3  rr rr        
003C3Fr 3  32 3E 72             .byte "2>r"
003C42r 3               
003C42r 3               nt_two_r_from:
003C42r 3  03 01                .byte 3, CO             ; native is special case
003C44r 3  rr rr rr rr          .word nt_two_to_r, xt_two_r_from, z_two_r_from
003C48r 3  rr rr        
003C4Ar 3  32 72 3E             .byte "2r>"
003C4Dr 3               
003C4Dr 3               nt_two_r_fetch:
003C4Dr 3  03 09                .byte 3, CO+NN          ; native is special case, leave NN for now
003C4Fr 3  rr rr rr rr          .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
003C53r 3  rr rr        
003C55r 3  32 72 40             .byte "2r@"
003C58r 3               
003C58r 3               nt_two_literal:
003C58r 3  08 14                .byte 8, UF+IM
003C5Ar 3  rr rr rr rr          .word nt_two_r_fetch, xt_two_literal, z_two_literal
003C5Er 3  rr rr        
003C60r 3  32 6C 69 74          .byte "2literal"
003C64r 3  65 72 61 6C  
003C68r 3               
003C68r 3               nt_two_constant:
003C68r 3  09 10                .byte 9, UF
003C6Ar 3  rr rr rr rr          .word nt_two_literal, xt_two_constant, z_two_constant
003C6Er 3  rr rr        
003C70r 3  32 63 6F 6E          .byte "2constant"
003C74r 3  73 74 61 6E  
003C78r 3  74           
003C79r 3               
003C79r 3               nt_two_variable:
003C79r 3  09 00                .byte 9, 0
003C7Br 3  rr rr rr rr          .word nt_two_constant, xt_two_variable, z_two_variable
003C7Fr 3  rr rr        
003C81r 3  32 76 61 72          .byte "2variable"
003C85r 3  69 61 62 6C  
003C89r 3  65           
003C8Ar 3               
003C8Ar 3               nt_two_fetch:
003C8Ar 3  02 10                .byte 2, UF
003C8Cr 3  rr rr rr rr          .word nt_two_variable, xt_two_fetch, z_two_fetch
003C90r 3  rr rr        
003C92r 3  32 40                .byte "2@"
003C94r 3               
003C94r 3               nt_two_store:
003C94r 3  02 10                .byte 2, UF
003C96r 3  rr rr rr rr          .word nt_two_fetch, xt_two_store, z_two_store
003C9Ar 3  rr rr        
003C9Cr 3  32 21                .byte "2!"
003C9Er 3               
003C9Er 3               nt_two_over:
003C9Er 3  05 10                .byte 5, UF
003CA0r 3  rr rr rr rr          .word nt_two_store, xt_two_over, z_two_over
003CA4r 3  rr rr        
003CA6r 3  32 6F 76 65          .byte "2over"
003CAAr 3  72           
003CABr 3               
003CABr 3               nt_two_swap:
003CABr 3  05 10                .byte 5, UF
003CADr 3  rr rr rr rr          .word nt_two_over, xt_two_swap, z_two_swap
003CB1r 3  rr rr        
003CB3r 3  32 73 77 61          .byte "2swap"
003CB7r 3  70           
003CB8r 3               
003CB8r 3               nt_two_drop:
003CB8r 3  05 10                .byte 5, UF
003CBAr 3  rr rr rr rr          .word nt_two_swap, xt_two_drop, z_two_drop
003CBEr 3  rr rr        
003CC0r 3  32 64 72 6F          .byte "2drop"
003CC4r 3  70           
003CC5r 3               
003CC5r 3               nt_max:
003CC5r 3  03 10                .byte 3, UF
003CC7r 3  rr rr rr rr          .word nt_two_drop, xt_max, z_max
003CCBr 3  rr rr        
003CCDr 3  6D 61 78             .byte "max"
003CD0r 3               
003CD0r 3               nt_min:
003CD0r 3  03 10                .byte 3, UF
003CD2r 3  rr rr rr rr          .word nt_max, xt_min, z_min
003CD6r 3  rr rr        
003CD8r 3  6D 69 6E             .byte "min"
003CDBr 3               
003CDBr 3               nt_zero_less:
003CDBr 3  02 10                .byte 2, UF
003CDDr 3  rr rr rr rr          .word nt_min, xt_zero_less, z_zero_less
003CE1r 3  rr rr        
003CE3r 3  30 3C                .byte "0<"
003CE5r 3               
003CE5r 3               nt_zero_greater:
003CE5r 3  02 10                .byte 2, UF
003CE7r 3  rr rr rr rr          .word nt_zero_less, xt_zero_greater, z_zero_greater
003CEBr 3  rr rr        
003CEDr 3  30 3E                .byte "0>"
003CEFr 3               
003CEFr 3               nt_zero_unequal:
003CEFr 3  03 10                .byte 3, UF
003CF1r 3  rr rr rr rr          .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
003CF5r 3  rr rr        
003CF7r 3  30 3C 3E             .byte "0<>"
003CFAr 3               
003CFAr 3               nt_zero_equal:
003CFAr 3  02 10                .byte 2, UF
003CFCr 3  rr rr rr rr          .word nt_zero_unequal, xt_zero_equal, z_zero_equal
003D00r 3  rr rr        
003D02r 3  30 3D                .byte "0="
003D04r 3               
003D04r 3               nt_greater_than:
003D04r 3  01 10                .byte 1, UF
003D06r 3  rr rr rr rr          .word nt_zero_equal, xt_greater_than, z_greater_than
003D0Ar 3  rr rr        
003D0Cr 3  3E                   .byte ">"
003D0Dr 3               
003D0Dr 3               nt_u_greater_than:
003D0Dr 3  02 10                .byte 2, UF
003D0Fr 3  rr rr rr rr          .word nt_greater_than, xt_u_greater_than, z_u_greater_than
003D13r 3  rr rr        
003D15r 3  75 3E                .byte "u>"
003D17r 3               
003D17r 3               nt_u_less_than:
003D17r 3  02 10                .byte 2, UF
003D19r 3  rr rr rr rr          .word nt_u_greater_than, xt_u_less_than, z_u_less_than
003D1Dr 3  rr rr        
003D1Fr 3  75 3C                .byte "u<"
003D21r 3               
003D21r 3               nt_less_than:
003D21r 3  01 10                .byte 1, UF
003D23r 3  rr rr rr rr          .word nt_u_less_than, xt_less_than, z_less_than
003D27r 3  rr rr        
003D29r 3  3C                   .byte "<"
003D2Ar 3               
003D2Ar 3               nt_not_equals:
003D2Ar 3  02 10                .byte 2, UF
003D2Cr 3  rr rr rr rr          .word nt_less_than, xt_not_equals, z_not_equals
003D30r 3  rr rr        
003D32r 3  3C 3E                .byte "<>"
003D34r 3               
003D34r 3               nt_equal:
003D34r 3  01 10                .byte 1, UF
003D36r 3  rr rr rr rr          .word nt_not_equals, xt_equal, z_equal
003D3Ar 3  rr rr        
003D3Cr 3  3D                   .byte "="
003D3Dr 3               
003D3Dr 3               nt_two_slash:
003D3Dr 3  02 10                .byte 2, UF
003D3Fr 3  rr rr rr rr          .word nt_equal, xt_two_slash, z_two_slash
003D43r 3  rr rr        
003D45r 3  32 2F                .byte "2/"
003D47r 3               
003D47r 3               nt_two_star:
003D47r 3  02 10                .byte 2, UF
003D49r 3  rr rr rr rr          .word nt_two_slash, xt_two_star, z_two_star
003D4Dr 3  rr rr        
003D4Fr 3  32 2A                .byte "2*"
003D51r 3               
003D51r 3               nt_one_plus:
003D51r 3  02 10                .byte 2, UF
003D53r 3  rr rr rr rr          .word nt_two_star, xt_one_plus, z_one_plus
003D57r 3  rr rr        
003D59r 3  31 2B                .byte "1+"
003D5Br 3               
003D5Br 3               nt_one_minus:
003D5Br 3  02 10                .byte 2, UF
003D5Dr 3  rr rr rr rr          .word nt_one_plus, xt_one_minus, z_one_minus
003D61r 3  rr rr        
003D63r 3  31 2D                .byte "1-"
003D65r 3               
003D65r 3               nt_here:
003D65r 3  04 00                .byte 4, 0
003D67r 3  rr rr rr rr          .word nt_one_minus, xt_here, z_here
003D6Br 3  rr rr        
003D6Dr 3  68 65 72 65          .byte "here"
003D71r 3               
003D71r 3               nt_cell_plus:
003D71r 3  05 10                .byte 5, UF
003D73r 3  rr rr rr rr          .word nt_here, xt_cell_plus, z_cell_plus
003D77r 3  rr rr        
003D79r 3  63 65 6C 6C          .byte "cell+"
003D7Dr 3  2B           
003D7Er 3               
003D7Er 3               nt_cells:
003D7Er 3  05 00                .byte 5, 0
003D80r 3  rr rr rr rr          .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
003D84r 3  rr rr        
003D86r 3  63 65 6C 6C          .byte "cells"
003D8Ar 3  73           
003D8Br 3               
003D8Br 3               nt_chars:
003D8Br 3  05 12                .byte 5, AN+UF   ; deleted during compile
003D8Dr 3  rr rr rr rr          .word nt_cells, xt_chars, z_chars
003D91r 3  rr rr        
003D93r 3  63 68 61 72          .byte "chars"
003D97r 3  73           
003D98r 3               
003D98r 3               nt_char_plus:
003D98r 3  05 00                .byte 5, 0
003D9Ar 3  rr rr rr rr          .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
003D9Er 3  rr rr        
003DA0r 3  63 68 61 72          .byte "char+"
003DA4r 3  2B           
003DA5r 3               
003DA5r 3               nt_bracket_char:
003DA5r 3  06 05                .byte 6, CO+IM
003DA7r 3  rr rr rr rr          .word nt_char_plus, xt_bracket_char, z_bracket_char
003DABr 3  rr rr        
003DADr 3  5B 63 68 61          .byte "[char]"
003DB1r 3  72 5D        
003DB3r 3               
003DB3r 3               nt_char:
003DB3r 3  04 00                .byte 4, 0
003DB5r 3  rr rr rr rr          .word nt_bracket_char, xt_char, z_char
003DB9r 3  rr rr        
003DBBr 3  63 68 61 72          .byte "char"
003DBFr 3               
003DBFr 3               nt_pick:
003DBFr 3  04 00                .byte 4, 0    ; underflow check is complicated, leave off here
003DC1r 3  rr rr rr rr          .word nt_char, xt_pick, z_pick
003DC5r 3  rr rr        
003DC7r 3  70 69 63 6B          .byte "pick"
003DCBr 3               
003DCBr 3               nt_lshift:
003DCBr 3  06 10                .byte 6, UF
003DCDr 3  rr rr rr rr          .word nt_pick, xt_lshift, z_lshift
003DD1r 3  rr rr        
003DD3r 3  6C 73 68 69          .byte "lshift"
003DD7r 3  66 74        
003DD9r 3               
003DD9r 3               nt_rshift:
003DD9r 3  06 10                .byte 6, UF
003DDBr 3  rr rr rr rr          .word nt_lshift, xt_rshift, z_rshift
003DDFr 3  rr rr        
003DE1r 3  72 73 68 69          .byte "rshift"
003DE5r 3  66 74        
003DE7r 3               
003DE7r 3               nt_xor:
003DE7r 3  03 10                .byte 3, UF
003DE9r 3  rr rr rr rr          .word nt_rshift, xt_xor, z_xor
003DEDr 3  rr rr        
003DEFr 3  78 6F 72             .byte "xor"
003DF2r 3               
003DF2r 3               nt_or:
003DF2r 3  02 10                .byte 2, UF
003DF4r 3  rr rr rr rr          .word nt_xor, xt_or, z_or
003DF8r 3  rr rr        
003DFAr 3  6F 72                .byte "or"
003DFCr 3               
003DFCr 3               nt_and:
003DFCr 3  03 10                .byte 3, UF
003DFEr 3  rr rr rr rr          .word nt_or, xt_and, z_and
003E02r 3  rr rr        
003E04r 3  61 6E 64             .byte "and"
003E07r 3               
003E07r 3               nt_dabs:
003E07r 3  04 10                .byte 4, UF
003E09r 3  rr rr rr rr          .word nt_and, xt_dabs, z_dabs
003E0Dr 3  rr rr        
003E0Fr 3  64 61 62 73          .byte "dabs"
003E13r 3               
003E13r 3               nt_abs:
003E13r 3  03 10                .byte 3, UF
003E15r 3  rr rr rr rr          .word nt_dabs, xt_abs, z_abs
003E19r 3  rr rr        
003E1Br 3  61 62 73             .byte "abs"
003E1Er 3               
003E1Er 3               nt_minus:
003E1Er 3  01 10                .byte 1, UF
003E20r 3  rr rr rr rr          .word nt_abs, xt_minus, z_minus
003E24r 3  rr rr        
003E26r 3  2D                   .byte "-"
003E27r 3               
003E27r 3               nt_plus:
003E27r 3  01 10                .byte 1, UF
003E29r 3  rr rr rr rr          .word nt_minus, xt_plus, z_plus
003E2Dr 3  rr rr        
003E2Fr 3  2B                   .byte "+"
003E30r 3               
003E30r 3               nt_question_dup:
003E30r 3  04 10                .byte 4, UF
003E32r 3  rr rr rr rr          .word nt_plus, xt_question_dup, z_question_dup
003E36r 3  rr rr        
003E38r 3  3F 64 75 70          .byte "?dup"
003E3Cr 3               
003E3Cr 3               nt_two_dup:
003E3Cr 3  04 10                .byte 4, UF
003E3Er 3  rr rr rr rr          .word nt_question_dup, xt_two_dup, z_two_dup
003E42r 3  rr rr        
003E44r 3  32 64 75 70          .byte "2dup"
003E48r 3               
003E48r 3               nt_two:
003E48r 3  01 00                .byte 1, 0
003E4Ar 3  rr rr rr rr          .word nt_two_dup, xt_two, z_two
003E4Er 3  rr rr        
003E50r 3  32                   .byte "2"
003E51r 3               
003E51r 3               nt_one:
003E51r 3  01 00                .byte 1, 0
003E53r 3  rr rr rr rr          .word nt_two, xt_one, z_one
003E57r 3  rr rr        
003E59r 3  31                   .byte "1"
003E5Ar 3               
003E5Ar 3               nt_zero:
003E5Ar 3  01 00                .byte 1, 0
003E5Cr 3  rr rr rr rr          .word nt_one, xt_zero, z_zero
003E60r 3  rr rr        
003E62r 3  30                   .byte "0"
003E63r 3               
003E63r 3               nt_space:
003E63r 3  05 00                .byte 5, 0
003E65r 3  rr rr rr rr          .word nt_zero, xt_space, z_space
003E69r 3  rr rr        
003E6Br 3  73 70 61 63          .byte "space"
003E6Fr 3  65           
003E70r 3               
003E70r 3               nt_true:
003E70r 3  04 00                .byte 4, 0
003E72r 3  rr rr rr rr          .word nt_space, xt_true, z_true
003E76r 3  rr rr        
003E78r 3  74 72 75 65          .byte "true"
003E7Cr 3               
003E7Cr 3               nt_false:
003E7Cr 3  05 00                .byte 5, 0
003E7Er 3  rr rr rr rr          .word nt_true, xt_false, z_false
003E82r 3  rr rr        
003E84r 3  66 61 6C 73          .byte "false"
003E88r 3  65           
003E89r 3               
003E89r 3               nt_question:
003E89r 3  01 00                .byte 1, 0
003E8Br 3  rr rr rr rr          .word nt_false, xt_question, z_question
003E8Fr 3  rr rr        
003E91r 3  3F                   .byte "?"
003E92r 3               
003E92r 3               nt_ud_dot_r:
003E92r 3  04 10                .byte 4, UF
003E94r 3  rr rr rr rr          .word nt_question, xt_ud_dot_r, z_ud_dot_r
003E98r 3  rr rr        
003E9Ar 3  75 64 2E 72          .byte "ud.r"
003E9Er 3               
003E9Er 3               nt_ud_dot:
003E9Er 3  03 10                .byte 3, UF
003EA0r 3  rr rr rr rr          .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
003EA4r 3  rr rr        
003EA6r 3  75 64 2E             .byte "ud."
003EA9r 3               
003EA9r 3               nt_d_dot_r:
003EA9r 3  03 10                .byte 3, UF
003EABr 3  rr rr rr rr          .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
003EAFr 3  rr rr        
003EB1r 3  64 2E 72             .byte "d.r"
003EB4r 3               
003EB4r 3               nt_d_dot:
003EB4r 3  02 10                .byte 2, UF
003EB6r 3  rr rr rr rr          .word nt_d_dot_r, xt_d_dot, z_d_dot
003EBAr 3  rr rr        
003EBCr 3  64 2E                .byte "d."
003EBEr 3               
003EBEr 3               nt_dot_r:
003EBEr 3  02 10                .byte 2, UF
003EC0r 3  rr rr rr rr          .word nt_d_dot, xt_dot_r, z_dot_r
003EC4r 3  rr rr        
003EC6r 3  2E 72                .byte ".r"
003EC8r 3               
003EC8r 3               nt_u_dot_r:
003EC8r 3  03 10                .byte 3, UF
003ECAr 3  rr rr rr rr          .word nt_dot_r, xt_u_dot_r, z_u_dot_r
003ECEr 3  rr rr        
003ED0r 3  75 2E 72             .byte "u.r"
003ED3r 3               
003ED3r 3               nt_u_dot:
003ED3r 3  02 10                .byte 2, UF
003ED5r 3  rr rr rr rr          .word nt_u_dot_r, xt_u_dot, z_u_dot
003ED9r 3  rr rr        
003EDBr 3  75 2E                .byte "u."
003EDDr 3               
003EDDr 3               nt_dot:
003EDDr 3  01 10                .byte 1, UF
003EDFr 3  rr rr rr rr          .word nt_u_dot, xt_dot, z_dot
003EE3r 3  rr rr        
003EE5r 3  2E                   .byte "."
003EE6r 3               
003EE6r 3               nt_type:
003EE6r 3  04 10                .byte 4, UF
003EE8r 3  rr rr rr rr          .word nt_dot, xt_type, z_type
003EECr 3  rr rr        
003EEEr 3  74 79 70 65          .byte "type"
003EF2r 3               
003EF2r 3               nt_emit:
003EF2r 3  04 18                .byte 4, NN+UF
003EF4r 3  rr rr rr rr          .word nt_type, xt_emit, z_emit
003EF8r 3  rr rr        
003EFAr 3  65 6D 69 74          .byte "emit"
003EFEr 3               
003EFEr 3               nt_execute:
003EFEr 3  07 10                .byte 7, UF
003F00r 3  rr rr rr rr          .word nt_emit, xt_execute, z_execute
003F04r 3  rr rr        
003F06r 3  65 78 65 63          .byte "execute"
003F0Ar 3  75 74 65     
003F0Dr 3               
003F0Dr 3               nt_plus_store:
003F0Dr 3  02 10                .byte 2, UF
003F0Fr 3  rr rr rr rr          .word nt_execute, xt_plus_store, z_plus_store
003F13r 3  rr rr        
003F15r 3  2B 21                .byte "+!"
003F17r 3               
003F17r 3               nt_c_store:
003F17r 3  02 10                .byte 2, UF
003F19r 3  rr rr rr rr          .word nt_plus_store, xt_c_store, z_c_store
003F1Dr 3  rr rr        
003F1Fr 3  63 21                .byte "c!"
003F21r 3               
003F21r 3               nt_c_fetch:
003F21r 3  02 10                .byte 2, UF
003F23r 3  rr rr rr rr          .word nt_c_store, xt_c_fetch, z_c_fetch
003F27r 3  rr rr        
003F29r 3  63 40                .byte "c@"
003F2Br 3               
003F2Br 3               nt_comma:
003F2Br 3  01 10                .byte 1, UF
003F2Dr 3  rr rr rr rr          .word nt_c_fetch, xt_comma, z_comma
003F31r 3  rr rr        
003F33r 3  2C                   .byte ","
003F34r 3               
003F34r 3               nt_tuck:
003F34r 3  04 10                .byte 4, UF
003F36r 3  rr rr rr rr          .word nt_comma, xt_tuck, z_tuck
003F3Ar 3  rr rr        
003F3Cr 3  74 75 63 6B          .byte "tuck"
003F40r 3               
003F40r 3               nt_not_rote:
003F40r 3  04 10                .byte 4, UF
003F42r 3  rr rr rr rr          .word nt_tuck, xt_not_rote, z_not_rote
003F46r 3  rr rr        
003F48r 3  2D 72 6F 74          .byte "-rot"
003F4Cr 3               
003F4Cr 3               nt_rot:
003F4Cr 3  03 10                .byte 3, UF
003F4Er 3  rr rr rr rr          .word nt_not_rote, xt_rot, z_rot
003F52r 3  rr rr        
003F54r 3  72 6F 74             .byte "rot"
003F57r 3               
003F57r 3               nt_nip:
003F57r 3  03 10                .byte 3, UF
003F59r 3  rr rr rr rr          .word nt_rot, xt_nip, z_nip
003F5Dr 3  rr rr        
003F5Fr 3  6E 69 70             .byte "nip"
003F62r 3               
003F62r 3               nt_r_fetch:
003F62r 3  02 01                .byte 2, CO    ; native is special case
003F64r 3  rr rr rr rr          .word nt_nip, xt_r_fetch, z_r_fetch
003F68r 3  rr rr        
003F6Ar 3  72 40                .byte "r@"
003F6Cr 3               
003F6Cr 3               nt_r_from:
003F6Cr 3  02 01                .byte 2, CO    ; native is special case
003F6Er 3  rr rr rr rr          .word nt_r_fetch, xt_r_from, z_r_from
003F72r 3  rr rr        
003F74r 3  72 3E                .byte "r>"
003F76r 3               
003F76r 3               nt_to_r:
003F76r 3  02 11                .byte 2, CO+UF ; native is special case
003F78r 3  rr rr rr rr          .word nt_r_from, xt_to_r, z_to_r
003F7Cr 3  rr rr        
003F7Er 3  3E 72                .byte ">r"
003F80r 3               
003F80r 3               nt_over:
003F80r 3  04 10                .byte 4, UF
003F82r 3  rr rr rr rr          .word nt_to_r, xt_over, z_over
003F86r 3  rr rr        
003F88r 3  6F 76 65 72          .byte "over"
003F8Cr 3               
003F8Cr 3               nt_fetch:
003F8Cr 3  01 10                .byte 1, UF
003F8Er 3  rr rr rr rr          .word nt_over, xt_fetch, z_fetch
003F92r 3  rr rr        
003F94r 3  40                   .byte "@"
003F95r 3               
003F95r 3               nt_store:
003F95r 3  01 10                .byte 1, UF
003F97r 3  rr rr rr rr          .word nt_fetch, xt_store, z_store
003F9Br 3  rr rr        
003F9Dr 3  21                   .byte "!"
003F9Er 3               
003F9Er 3               nt_swap:
003F9Er 3  04 10                .byte 4, UF
003FA0r 3  rr rr rr rr          .word nt_store, xt_swap, z_swap
003FA4r 3  rr rr        
003FA6r 3  73 77 61 70          .byte "swap"
003FAAr 3               
003FAAr 3               nt_dup:
003FAAr 3  03 10                .byte 3, UF
003FACr 3  rr rr rr rr          .word nt_swap, xt_dup, z_dup
003FB0r 3  rr rr        
003FB2r 3  64 75 70             .byte "dup"
003FB5r 3               
003FB5r 3               ; DROP is always the first native word in the Dictionary
003FB5r 3               dictionary_start:
003FB5r 3               nt_drop:
003FB5r 3  04 10                .byte 4, UF
003FB7r 3  rr rr rr rr          .word nt_dup, xt_drop, z_drop
003FBBr 3  rr rr        
003FBDr 3  64 72 6F 70          .byte "drop"
003FC1r 3               
003FC1r 3               ; END of FORTH-WORDLIST
003FC1r 3               
003FC1r 3               
003FC1r 3               ; ROOT-WORDLIST
003FC1r 3                       ; This is a short wordlist that has just the words needed to
003FC1r 3                       ; set the wordlists. These words are also included in the
003FC1r 3                       ; FORTH-WORDLIST as well.
003FC1r 3               
003FC1r 3               nt_root_words:
003FC1r 3  05 00                .byte 5, 0
003FC3r 3  00 00 rr rr          .word 0000, xt_words, z_words
003FC7r 3  rr rr        
003FC9r 3  77 6F 72 64          .byte "words"
003FCDr 3  73           
003FCEr 3               
003FCEr 3               nt_root_forth_wordlist: ; shares code with ZERO
003FCEr 3  0E 00                .byte 14, 0
003FD0r 3  rr rr rr rr          .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
003FD4r 3  rr rr        
003FD6r 3  66 6F 72 74          .byte "forth-wordlist"
003FDAr 3  68 2D 77 6F  
003FDEr 3  72 64 6C 69  
003FE4r 3               
003FE4r 3               nt_root_forth:
003FE4r 3  05 00                .byte 5, 0
003FE6r 3  rr rr rr rr          .word nt_root_forth_wordlist, xt_forth, z_forth
003FEAr 3  rr rr        
003FECr 3  66 6F 72 74          .byte "forth"
003FF0r 3  68           
003FF1r 3               
003FF1r 3               root_dictionary_start:
003FF1r 3               nt_root_set_order:
003FF1r 3  09 00                .byte 9, 0
003FF3r 3  rr rr rr rr          .word nt_root_forth, xt_set_order, z_set_order
003FF7r 3  rr rr        
003FF9r 3  73 65 74 2D          .byte "set-order"
003FFDr 3  6F 72 64 65  
004001r 3  72           
004002r 3               
004002r 3               ; END of ROOT-WORDLIST
004002r 3               
004002r 3               
004002r 3               ; EDITOR-WORDLIST
004002r 3               
004002r 3               nt_editor_enter_screen:
004002r 3  0C 00                .byte 12, 0
004004r 3  00 00 rr rr          .word 0000, xt_editor_enter_screen, z_editor_enter_screen
004008r 3  rr rr        
00400Ar 3  65 6E 74 65          .byte "enter-screen"
00400Er 3  72 2D 73 63  
004012r 3  72 65 65 6E  
004016r 3               
004016r 3               nt_editor_erase_screen:
004016r 3  0C 00                .byte 12, 0
004018r 3  rr rr rr rr          .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
00401Cr 3  rr rr        
00401Er 3  65 72 61 73          .byte "erase-screen"
004022r 3  65 2D 73 63  
004026r 3  72 65 65 6E  
00402Ar 3               
00402Ar 3               nt_editor_el:
00402Ar 3  02 00                .byte 2, 0
00402Cr 3  rr rr rr rr          .word nt_editor_erase_screen, xt_editor_el, z_editor_el
004030r 3  rr rr        
004032r 3  65 6C                .byte "el"
004034r 3               
004034r 3               nt_editor_l:
004034r 3  01 00                .byte 1, 0
004036r 3  rr rr rr rr          .word nt_editor_el, xt_editor_l, z_editor_l
00403Ar 3  rr rr        
00403Cr 3  6C                   .byte "l"
00403Dr 3               
00403Dr 3               nt_editor_line:
00403Dr 3  04 10                .byte 4, UF
00403Fr 3  rr rr rr rr          .word nt_editor_l, xt_editor_line, z_editor_line
004043r 3  rr rr        
004045r 3  6C 69 6E 65          .byte "line"
004049r 3               
004049r 3               editor_dictionary_start:
004049r 3               nt_editor_o:
004049r 3  01 00                .byte 1, 0
00404Br 3  rr rr rr rr          .word nt_editor_line, xt_editor_o, z_editor_o
00404Fr 3  rr rr        
004051r 3  6F                   .byte "o"
004052r 3               
004052r 3               ; END of EDITOR-WORDLIST
004052r 3               
004052r 3               
004052r 3               ; ; ASSEMBLER-WORDLIST
004052r 3               
004052r 3               ; ; Labels for the opcodes have the format "nt_asm_<OPC>" where a futher
004052r 3               ; ; underscore replaces any dot present in the SAN mnemonic. The hash sign for
004052r 3               ; ; immediate addressing is replaced by an "h" (for example, the label code for
004052r 3               ; ; "lda.#" is "xt_adm_lda_h"). All opcodes are immediate.
004052r 3               .ifdef TALI_OPTIONAL_ASSEMBLER
004052r 3               assembler_dictionary_start:
004052r 3               nt_asm_adc_h:
004052r 3  05 04        		.byte 5, IM
004054r 3  rr rr                        .word nt_asm_adc_x
004056r 3  rr rr rr rr  		.word xt_asm_adc_h, z_asm_adc_h
00405Ar 3  61 64 63 2E  		.byte "adc.#"
00405Er 3  23           
00405Fr 3               
00405Fr 3               nt_asm_adc_x:
00405Fr 3  05 04        		.byte 5, IM
004061r 3  rr rr                        .word nt_asm_adc_y
004063r 3  rr rr rr rr  		.word xt_asm_adc_x, z_asm_adc_x
004067r 3  61 64 63 2E  		.byte "adc.x"
00406Br 3  78           
00406Cr 3               
00406Cr 3               nt_asm_adc_y:
00406Cr 3  05 04        		.byte 5, IM
00406Er 3  rr rr                        .word nt_asm_adc_z
004070r 3  rr rr rr rr  		.word xt_asm_adc_y, z_asm_adc_y
004074r 3  61 64 63 2E  		.byte "adc.y"
004078r 3  79           
004079r 3               
004079r 3               nt_asm_adc_z:
004079r 3  05 04        		.byte 5, IM
00407Br 3  rr rr                        .word nt_asm_adc_zi
00407Dr 3  rr rr rr rr  		.word xt_asm_adc_z, z_asm_adc_z
004081r 3  61 64 63 2E  		.byte "adc.z"
004085r 3  7A           
004086r 3               
004086r 3               nt_asm_adc_zi:
004086r 3  06 04        		.byte 6, IM
004088r 3  rr rr                        .word nt_asm_adc_ziy
00408Ar 3  rr rr rr rr  		.word xt_asm_adc_zi, z_asm_adc_zi
00408Er 3  61 64 63 2E  		.byte "adc.zi"
004092r 3  7A 69        
004094r 3               
004094r 3               nt_asm_adc_ziy:
004094r 3  07 04        		.byte 7, IM
004096r 3  rr rr                        .word nt_asm_adc_zx
004098r 3  rr rr rr rr  		.word xt_asm_adc_ziy, z_asm_adc_ziy
00409Cr 3  61 64 63 2E  		.byte "adc.ziy"
0040A0r 3  7A 69 79     
0040A3r 3               
0040A3r 3               nt_asm_adc_zx:
0040A3r 3  06 04        		.byte 6, IM
0040A5r 3  rr rr                        .word nt_asm_adc_zxi
0040A7r 3  rr rr rr rr  		.word xt_asm_adc_zx, z_asm_adc_zx
0040ABr 3  61 64 63 2E  		.byte "adc.zx"
0040AFr 3  7A 78        
0040B1r 3               
0040B1r 3               nt_asm_adc_zxi:
0040B1r 3  07 04        		.byte 7, IM
0040B3r 3  rr rr                        .word nt_asm_and
0040B5r 3  rr rr rr rr  		.word xt_asm_adc_zxi, z_asm_adc_zxi
0040B9r 3  61 64 63 2E  		.byte "adc.zxi"
0040BDr 3  7A 78 69     
0040C0r 3               
0040C0r 3               nt_asm_and:     ; not "and" because of conflicts with Forth word
0040C0r 3  04 04        		.byte 4, IM
0040C2r 3  rr rr                        .word nt_asm_and_h
0040C4r 3  rr rr rr rr  		.word xt_asm_and, z_asm_and
0040C8r 3  61 6E 64 2E  		.byte "and."
0040CCr 3               
0040CCr 3               nt_asm_and_h:
0040CCr 3  05 04        		.byte 5, IM
0040CEr 3  rr rr                        .word nt_asm_and_x
0040D0r 3  rr rr rr rr  		.word xt_asm_and_h, z_asm_and_h
0040D4r 3  61 6E 64 2E  		.byte "and.#"
0040D8r 3  23           
0040D9r 3               
0040D9r 3               nt_asm_and_x:
0040D9r 3  05 04        		.byte 5, IM
0040DBr 3  rr rr                        .word nt_asm_and_y
0040DDr 3  rr rr rr rr  		.word xt_asm_and_x, z_asm_and_x
0040E1r 3  61 6E 64 2E  		.byte "and.x"
0040E5r 3  78           
0040E6r 3               
0040E6r 3               nt_asm_and_y:
0040E6r 3  05 04        		.byte 5, IM
0040E8r 3  rr rr                        .word nt_asm_and_z
0040EAr 3  rr rr rr rr  		.word xt_asm_and_y, z_asm_and_y
0040EEr 3  61 6E 64 2E  		.byte "and.y"
0040F2r 3  79           
0040F3r 3               
0040F3r 3               nt_asm_and_z:
0040F3r 3  05 04        		.byte 5, IM
0040F5r 3  rr rr                        .word nt_asm_and_zi
0040F7r 3  rr rr rr rr  		.word xt_asm_and_z, z_asm_and_z
0040FBr 3  61 6E 64 2E  		.byte "and.z"
0040FFr 3  7A           
004100r 3               
004100r 3               nt_asm_and_zi:
004100r 3  06 04        		.byte 6, IM
004102r 3  rr rr                        .word nt_asm_and_ziy
004104r 3  rr rr rr rr  		.word xt_asm_and_zi, z_asm_and_zi
004108r 3  61 6E 64 2E  		.byte "and.zi"
00410Cr 3  7A 69        
00410Er 3               
00410Er 3               nt_asm_and_ziy:
00410Er 3  07 04        		.byte 7, IM
004110r 3  rr rr                        .word nt_asm_and_zx
004112r 3  rr rr rr rr  		.word xt_asm_and_ziy, z_asm_and_ziy
004116r 3  61 6E 64 2E  		.byte "and.ziy"
00411Ar 3  7A 69 79     
00411Dr 3               
00411Dr 3               nt_asm_and_zx:
00411Dr 3  06 04        		.byte 6, IM
00411Fr 3  rr rr                        .word nt_asm_and_zxi
004121r 3  rr rr rr rr  		.word xt_asm_and_zx, z_asm_and_zx
004125r 3  61 6E 64 2E  		.byte "and.zx"
004129r 3  7A 78        
00412Br 3               
00412Br 3               nt_asm_and_zxi:
00412Br 3  07 04        		.byte 7, IM
00412Dr 3  rr rr                        .word nt_asm_asl
00412Fr 3  rr rr rr rr  		.word xt_asm_and_zxi, z_asm_and_zxi
004133r 3  61 6E 64 2E  		.byte "and.zxi"
004137r 3  7A 78 69     
00413Ar 3               
00413Ar 3               nt_asm_asl:
00413Ar 3  03 04        		.byte 3, IM
00413Cr 3  rr rr                        .word nt_asm_asl_a
00413Er 3  rr rr rr rr  		.word xt_asm_asl, z_asm_asl
004142r 3  61 73 6C     		.byte "asl"
004145r 3               
004145r 3               nt_asm_asl_a:
004145r 3  05 04        		.byte 5, IM
004147r 3  rr rr                        .word nt_asm_asl_x
004149r 3  rr rr rr rr  		.word xt_asm_asl_a, z_asm_asl_a
00414Dr 3  61 73 6C 2E  		.byte "asl.a"
004151r 3  61           
004152r 3               
004152r 3               nt_asm_asl_x:
004152r 3  05 04        		.byte 5, IM
004154r 3  rr rr                        .word nt_asm_asl_z
004156r 3  rr rr rr rr  		.word xt_asm_asl_x, z_asm_asl_x
00415Ar 3  61 73 6C 2E  		.byte "asl.x"
00415Er 3  78           
00415Fr 3               
00415Fr 3               nt_asm_asl_z:
00415Fr 3  05 04        		.byte 5, IM
004161r 3  rr rr                        .word nt_asm_asl_zx
004163r 3  rr rr rr rr  		.word xt_asm_asl_z, z_asm_asl_z
004167r 3  61 73 6C 2E  		.byte "asl.z"
00416Br 3  7A           
00416Cr 3               
00416Cr 3               nt_asm_asl_zx:
00416Cr 3  06 04        		.byte 6, IM
00416Er 3  rr rr                        .word nt_asm_bcc
004170r 3  rr rr rr rr  		.word xt_asm_asl_zx, z_asm_asl_zx
004174r 3  61 73 6C 2E  		.byte "asl.zx"
004178r 3  7A 78        
00417Ar 3               
00417Ar 3               nt_asm_bcc:
00417Ar 3  03 04        		.byte 3, IM
00417Cr 3  rr rr                        .word nt_asm_bcs
00417Er 3  rr rr rr rr  		.word xt_asm_bcc, z_asm_bcc
004182r 3  62 63 63     		.byte "bcc"
004185r 3               
004185r 3               nt_asm_bcs:
004185r 3  03 04        		.byte 3, IM
004187r 3  rr rr                        .word nt_asm_beq
004189r 3  rr rr rr rr  		.word xt_asm_bcs, z_asm_bcs
00418Dr 3  62 63 73     		.byte "bcs"
004190r 3               
004190r 3               nt_asm_beq:
004190r 3  03 04        		.byte 3, IM
004192r 3  rr rr                        .word nt_asm_bit
004194r 3  rr rr rr rr  		.word xt_asm_beq, z_asm_beq
004198r 3  62 65 71     		.byte "beq"
00419Br 3               
00419Br 3               nt_asm_bit:
00419Br 3  03 04        		.byte 3, IM
00419Dr 3  rr rr                        .word nt_asm_bit_h
00419Fr 3  rr rr rr rr  		.word xt_asm_bit, z_asm_bit
0041A3r 3  62 69 74     		.byte "bit"
0041A6r 3               
0041A6r 3               nt_asm_bit_h:
0041A6r 3  05 04        		.byte 5, IM
0041A8r 3  rr rr                        .word nt_asm_bit_x
0041AAr 3  rr rr rr rr  		.word xt_asm_bit_h, z_asm_bit_h
0041AEr 3  62 69 74 2E  		.byte "bit.#"
0041B2r 3  23           
0041B3r 3               
0041B3r 3               nt_asm_bit_x:
0041B3r 3  05 04        		.byte 5, IM
0041B5r 3  rr rr                        .word nt_asm_bit_z
0041B7r 3  rr rr rr rr  		.word xt_asm_bit_x, z_asm_bit_x
0041BBr 3  62 69 74 2E  		.byte "bit.x"
0041BFr 3  78           
0041C0r 3               
0041C0r 3               nt_asm_bit_z:
0041C0r 3  05 04        		.byte 5, IM
0041C2r 3  rr rr                        .word nt_asm_bit_zx
0041C4r 3  rr rr rr rr  		.word xt_asm_bit_z, z_asm_bit_z
0041C8r 3  62 69 74 2E  		.byte "bit.z"
0041CCr 3  7A           
0041CDr 3               
0041CDr 3               nt_asm_bit_zx:
0041CDr 3  06 04        		.byte 6, IM
0041CFr 3  rr rr                        .word nt_asm_bmi
0041D1r 3  rr rr rr rr  		.word xt_asm_bit_zx, z_asm_bit_zx
0041D5r 3  62 69 74 2E  		.byte "bit.zx"
0041D9r 3  7A 78        
0041DBr 3               
0041DBr 3               nt_asm_bmi:
0041DBr 3  03 04        		.byte 3, IM
0041DDr 3  rr rr                        .word nt_asm_bne
0041DFr 3  rr rr rr rr  		.word xt_asm_bmi, z_asm_bmi
0041E3r 3  62 6D 69     		.byte "bmi"
0041E6r 3               
0041E6r 3               nt_asm_bne:
0041E6r 3  03 04        		.byte 3, IM
0041E8r 3  rr rr                        .word nt_asm_bpl
0041EAr 3  rr rr rr rr  		.word xt_asm_bne, z_asm_bne
0041EEr 3  62 6E 65     		.byte "bne"
0041F1r 3               
0041F1r 3               nt_asm_bpl:
0041F1r 3  03 04        		.byte 3, IM
0041F3r 3  rr rr                        .word nt_asm_bra
0041F5r 3  rr rr rr rr  		.word xt_asm_bpl, z_asm_bpl
0041F9r 3  62 70 6C     		.byte "bpl"
0041FCr 3               
0041FCr 3               nt_asm_bra:
0041FCr 3  03 04        		.byte 3, IM
0041FEr 3  rr rr                        .word nt_asm_brk
004200r 3  rr rr rr rr  		.word xt_asm_bra, z_asm_bra
004204r 3  62 72 61     		.byte "bra"
004207r 3               
004207r 3               nt_asm_brk:
004207r 3  03 04        		.byte 3, IM
004209r 3  rr rr                        .word nt_asm_bvc
00420Br 3  rr rr rr rr  		.word xt_asm_brk, z_asm_brk
00420Fr 3  62 72 6B     		.byte "brk"
004212r 3               
004212r 3               nt_asm_bvc:
004212r 3  03 04        		.byte 3, IM
004214r 3  rr rr                        .word nt_asm_bvs
004216r 3  rr rr rr rr  		.word xt_asm_bvc, z_asm_bvc
00421Ar 3  62 76 63     		.byte "bvc"
00421Dr 3               
00421Dr 3               nt_asm_bvs:
00421Dr 3  03 04        		.byte 3, IM
00421Fr 3  rr rr                        .word nt_asm_clc
004221r 3  rr rr rr rr  		.word xt_asm_bvs, z_asm_bvs
004225r 3  62 76 73     		.byte "bvs"
004228r 3               
004228r 3               nt_asm_clc:
004228r 3  03 04        		.byte 3, IM
00422Ar 3  rr rr                        .word nt_asm_cld
00422Cr 3  rr rr rr rr  		.word xt_asm_clc, z_asm_clc
004230r 3  63 6C 63     		.byte "clc"
004233r 3               
004233r 3               nt_asm_cld:
004233r 3  03 04        		.byte 3, IM
004235r 3  rr rr                        .word nt_asm_cli
004237r 3  rr rr rr rr  		.word xt_asm_cld, z_asm_cld
00423Br 3  63 6C 64     		.byte "cld"
00423Er 3               
00423Er 3               nt_asm_cli:
00423Er 3  03 04        		.byte 3, IM
004240r 3  rr rr                        .word nt_asm_clv
004242r 3  rr rr rr rr  		.word xt_asm_cli, z_asm_cli
004246r 3  63 6C 69     		.byte "cli"
004249r 3               
004249r 3               nt_asm_clv:
004249r 3  03 04        		.byte 3, IM
00424Br 3  rr rr                        .word nt_asm_cmp
00424Dr 3  rr rr rr rr  		.word xt_asm_clv, z_asm_clv
004251r 3  63 6C 76     		.byte "clv"
004254r 3               
004254r 3               nt_asm_cmp:
004254r 3  03 04        		.byte 3, IM
004256r 3  rr rr                        .word nt_asm_cmp_h
004258r 3  rr rr rr rr  		.word xt_asm_cmp, z_asm_cmp
00425Cr 3  63 6D 70     		.byte "cmp"
00425Fr 3               
00425Fr 3               nt_asm_cmp_h:
00425Fr 3  05 04        		.byte 5, IM
004261r 3  rr rr                        .word nt_asm_cmp_x
004263r 3  rr rr rr rr  		.word xt_asm_cmp_h, z_asm_cmp_h
004267r 3  63 6D 70 2E  		.byte "cmp.#"
00426Br 3  23           
00426Cr 3               
00426Cr 3               nt_asm_cmp_x:
00426Cr 3  05 04        		.byte 5, IM
00426Er 3  rr rr                        .word nt_asm_cmp_y
004270r 3  rr rr rr rr  		.word xt_asm_cmp_x, z_asm_cmp_x
004274r 3  63 6D 70 2E  		.byte "cmp.x"
004278r 3  78           
004279r 3               
004279r 3               nt_asm_cmp_y:
004279r 3  05 04        		.byte 5, IM
00427Br 3  rr rr                        .word nt_asm_cmp_z
00427Dr 3  rr rr rr rr  		.word xt_asm_cmp_y, z_asm_cmp_y
004281r 3  63 6D 70 2E  		.byte "cmp.y"
004285r 3  79           
004286r 3               
004286r 3               nt_asm_cmp_z:
004286r 3  05 04        		.byte 5, IM
004288r 3  rr rr                        .word nt_asm_cmp_zi
00428Ar 3  rr rr rr rr  		.word xt_asm_cmp_z, z_asm_cmp_z
00428Er 3  63 6D 70 2E  		.byte "cmp.z"
004292r 3  7A           
004293r 3               
004293r 3               nt_asm_cmp_zi:
004293r 3  06 04        		.byte 6, IM
004295r 3  rr rr                        .word nt_asm_cmp_ziy
004297r 3  rr rr rr rr  		.word xt_asm_cmp_zi, z_asm_cmp_zi
00429Br 3  63 6D 70 2E  		.byte "cmp.zi"
00429Fr 3  7A 69        
0042A1r 3               
0042A1r 3               nt_asm_cmp_ziy:
0042A1r 3  07 04        		.byte 7, IM
0042A3r 3  rr rr                        .word nt_asm_cmp_zx
0042A5r 3  rr rr rr rr  		.word xt_asm_cmp_ziy, z_asm_cmp_ziy
0042A9r 3  63 6D 70 2E  		.byte "cmp.ziy"
0042ADr 3  7A 69 79     
0042B0r 3               
0042B0r 3               nt_asm_cmp_zx:
0042B0r 3  06 04        		.byte 6, IM
0042B2r 3  rr rr                        .word nt_asm_cmp_zxi
0042B4r 3  rr rr rr rr  		.word xt_asm_cmp_zx, z_asm_cmp_zx
0042B8r 3  63 6D 70 2E  		.byte "cmp.zx"
0042BCr 3  7A 78        
0042BEr 3               
0042BEr 3               nt_asm_cmp_zxi:
0042BEr 3  07 04        		.byte 7, IM
0042C0r 3  rr rr                        .word nt_asm_cpx
0042C2r 3  rr rr rr rr  		.word xt_asm_cmp_zxi, z_asm_cmp_zxi
0042C6r 3  63 6D 70 2E  		.byte "cmp.zxi"
0042CAr 3  7A 78 69     
0042CDr 3               
0042CDr 3               nt_asm_cpx:
0042CDr 3  03 04        		.byte 3, IM
0042CFr 3  rr rr                        .word nt_asm_cpx_h
0042D1r 3  rr rr rr rr  		.word xt_asm_cpx, z_asm_cpx
0042D5r 3  63 70 78     		.byte "cpx"
0042D8r 3               
0042D8r 3               nt_asm_cpx_h:
0042D8r 3  05 04        		.byte 5, IM
0042DAr 3  rr rr                        .word nt_asm_cpx_z
0042DCr 3  rr rr rr rr  		.word xt_asm_cpx_h, z_asm_cpx_h
0042E0r 3  63 70 78 2E  		.byte "cpx.#"
0042E4r 3  23           
0042E5r 3               
0042E5r 3               nt_asm_cpx_z:
0042E5r 3  05 04        		.byte 5, IM
0042E7r 3  rr rr                        .word nt_asm_cpy
0042E9r 3  rr rr rr rr  		.word xt_asm_cpx_z, z_asm_cpx_z
0042EDr 3  63 70 78 2E  		.byte "cpx.z"
0042F1r 3  7A           
0042F2r 3               
0042F2r 3               nt_asm_cpy:
0042F2r 3  03 04        		.byte 3, IM
0042F4r 3  rr rr                        .word nt_asm_cpy_h
0042F6r 3  rr rr rr rr  		.word xt_asm_cpy, z_asm_cpy
0042FAr 3  63 70 79     		.byte "cpy"
0042FDr 3               
0042FDr 3               nt_asm_cpy_h:
0042FDr 3  05 04        		.byte 5, IM
0042FFr 3  rr rr                        .word nt_asm_cpy_z
004301r 3  rr rr rr rr  		.word xt_asm_cpy_h, z_asm_cpy_h
004305r 3  63 70 79 2E  		.byte "cpy.#"
004309r 3  23           
00430Ar 3               
00430Ar 3               nt_asm_cpy_z:
00430Ar 3  05 04        		.byte 5, IM
00430Cr 3  rr rr                        .word nt_asm_dec
00430Er 3  rr rr rr rr  		.word xt_asm_cpy_z, z_asm_cpy_z
004312r 3  63 70 79 2E  		.byte "cpy.z"
004316r 3  7A           
004317r 3               
004317r 3               nt_asm_dec:
004317r 3  03 04        		.byte 3, IM
004319r 3  rr rr                        .word nt_asm_dec_a
00431Br 3  rr rr rr rr  		.word xt_asm_dec, z_asm_dec
00431Fr 3  64 65 63     		.byte "dec"
004322r 3               
004322r 3               nt_asm_dec_a:
004322r 3  05 04        		.byte 5, IM
004324r 3  rr rr                        .word nt_asm_dec_x
004326r 3  rr rr rr rr  		.word xt_asm_dec_a, z_asm_dec_a
00432Ar 3  64 65 63 2E  		.byte "dec.a"
00432Er 3  61           
00432Fr 3               
00432Fr 3               nt_asm_dec_x:
00432Fr 3  05 04        		.byte 5, IM
004331r 3  rr rr                        .word nt_asm_dec_z
004333r 3  rr rr rr rr  		.word xt_asm_dec_x, z_asm_dec_x
004337r 3  64 65 63 2E  		.byte "dec.x"
00433Br 3  78           
00433Cr 3               
00433Cr 3               nt_asm_dec_z:
00433Cr 3  05 04        		.byte 5, IM
00433Er 3  rr rr                        .word nt_asm_dec_zx
004340r 3  rr rr rr rr  		.word xt_asm_dec_z, z_asm_dec_z
004344r 3  64 65 63 2E  		.byte "dec.z"
004348r 3  7A           
004349r 3               
004349r 3               nt_asm_dec_zx:
004349r 3  06 04        		.byte 6, IM
00434Br 3  rr rr                        .word nt_asm_dex
00434Dr 3  rr rr rr rr  		.word xt_asm_dec_zx, z_asm_dec_zx
004351r 3  64 65 63 2E  		.byte "dec.zx"
004355r 3  7A 78        
004357r 3               
004357r 3               nt_asm_dex:
004357r 3  03 04        		.byte 3, IM
004359r 3  rr rr                        .word nt_asm_dey
00435Br 3  rr rr rr rr  		.word xt_asm_dex, z_asm_dex
00435Fr 3  64 65 78     		.byte "dex"
004362r 3               
004362r 3               nt_asm_dey:
004362r 3  03 04        		.byte 3, IM
004364r 3  rr rr                        .word nt_asm_eor
004366r 3  rr rr rr rr  		.word xt_asm_dey, z_asm_dey
00436Ar 3  64 65 79     		.byte "dey"
00436Dr 3               
00436Dr 3               nt_asm_eor:
00436Dr 3  03 04        		.byte 3, IM
00436Fr 3  rr rr                        .word nt_asm_eor_h
004371r 3  rr rr rr rr  		.word xt_asm_eor, z_asm_eor
004375r 3  65 6F 72     		.byte "eor"
004378r 3               
004378r 3               nt_asm_eor_h:
004378r 3  05 04        		.byte 5, IM
00437Ar 3  rr rr                        .word nt_asm_eor_x
00437Cr 3  rr rr rr rr  		.word xt_asm_eor_h, z_asm_eor_h
004380r 3  65 6F 72 2E  		.byte "eor.#"
004384r 3  23           
004385r 3               
004385r 3               nt_asm_eor_x:
004385r 3  05 04        		.byte 5, IM
004387r 3  rr rr                        .word nt_asm_eor_y
004389r 3  rr rr rr rr  		.word xt_asm_eor_x, z_asm_eor_x
00438Dr 3  65 6F 72 2E  		.byte "eor.x"
004391r 3  78           
004392r 3               
004392r 3               nt_asm_eor_y:
004392r 3  05 04        		.byte 5, IM
004394r 3  rr rr                        .word nt_asm_eor_z
004396r 3  rr rr rr rr  		.word xt_asm_eor_y, z_asm_eor_y
00439Ar 3  65 6F 72 2E  		.byte "eor.y"
00439Er 3  79           
00439Fr 3               
00439Fr 3               nt_asm_eor_z:
00439Fr 3  05 04        		.byte 5, IM
0043A1r 3  rr rr                        .word nt_asm_eor_zi
0043A3r 3  rr rr rr rr  		.word xt_asm_eor_z, z_asm_eor_z
0043A7r 3  65 6F 72 2E  		.byte "eor.z"
0043ABr 3  7A           
0043ACr 3               
0043ACr 3               nt_asm_eor_zi:
0043ACr 3  06 04        		.byte 6, IM
0043AEr 3  rr rr                        .word nt_asm_eor_ziy
0043B0r 3  rr rr rr rr  		.word xt_asm_eor_zi, z_asm_eor_zi
0043B4r 3  65 6F 72 2E  		.byte "eor.zi"
0043B8r 3  7A 69        
0043BAr 3               
0043BAr 3               nt_asm_eor_ziy:
0043BAr 3  07 04        		.byte 7, IM
0043BCr 3  rr rr                        .word nt_asm_eor_zx
0043BEr 3  rr rr rr rr  		.word xt_asm_eor_ziy, z_asm_eor_ziy
0043C2r 3  65 6F 72 2E  		.byte "eor.ziy"
0043C6r 3  7A 69 79     
0043C9r 3               
0043C9r 3               nt_asm_eor_zx:
0043C9r 3  06 04        		.byte 6, IM
0043CBr 3  rr rr                        .word nt_asm_eor_zxi
0043CDr 3  rr rr rr rr  		.word xt_asm_eor_zx, z_asm_eor_zx
0043D1r 3  65 6F 72 2E  		.byte "eor.zx"
0043D5r 3  7A 78        
0043D7r 3               
0043D7r 3               nt_asm_eor_zxi:
0043D7r 3  07 04        		.byte 7, IM
0043D9r 3  rr rr                        .word nt_asm_inc
0043DBr 3  rr rr rr rr  		.word xt_asm_eor_zxi, z_asm_eor_zxi
0043DFr 3  65 6F 72 2E  		.byte "eor.zxi"
0043E3r 3  7A 78 69     
0043E6r 3               
0043E6r 3               nt_asm_inc:
0043E6r 3  03 04        		.byte 3, IM
0043E8r 3  rr rr                        .word nt_asm_inc_a
0043EAr 3  rr rr rr rr  		.word xt_asm_inc, z_asm_inc
0043EEr 3  69 6E 63     		.byte "inc"
0043F1r 3               
0043F1r 3               nt_asm_inc_a:
0043F1r 3  05 04        		.byte 5, IM
0043F3r 3  rr rr                        .word nt_asm_inc_x
0043F5r 3  rr rr rr rr  		.word xt_asm_inc_a, z_asm_inc_a
0043F9r 3  69 6E 63 2E  		.byte "inc.a"
0043FDr 3  61           
0043FEr 3               
0043FEr 3               nt_asm_inc_x:
0043FEr 3  05 04        		.byte 5, IM
004400r 3  rr rr                        .word nt_asm_inc_z
004402r 3  rr rr rr rr  		.word xt_asm_inc_x, z_asm_inc_x
004406r 3  69 6E 63 2E  		.byte "inc.x"
00440Ar 3  78           
00440Br 3               
00440Br 3               nt_asm_inc_z:
00440Br 3  05 04        		.byte 5, IM
00440Dr 3  rr rr                        .word nt_asm_inc_zx
00440Fr 3  rr rr rr rr  		.word xt_asm_inc_z, z_asm_inc_z
004413r 3  69 6E 63 2E  		.byte "inc.z"
004417r 3  7A           
004418r 3               
004418r 3               nt_asm_inc_zx:
004418r 3  06 04        		.byte 6, IM
00441Ar 3  rr rr                        .word nt_asm_inx
00441Cr 3  rr rr rr rr  		.word xt_asm_inc_zx, z_asm_inc_zx
004420r 3  69 6E 63 2E  		.byte "inc.zx"
004424r 3  7A 78        
004426r 3               
004426r 3               nt_asm_inx:
004426r 3  03 04        		.byte 3, IM
004428r 3  rr rr                        .word nt_asm_iny
00442Ar 3  rr rr rr rr  		.word xt_asm_inx, z_asm_inx
00442Er 3  69 6E 78     		.byte "inx"
004431r 3               
004431r 3               nt_asm_iny:
004431r 3  03 04        		.byte 3, IM
004433r 3  rr rr                        .word nt_asm_jmp
004435r 3  rr rr rr rr  		.word xt_asm_iny, z_asm_iny
004439r 3  69 6E 79     		.byte "iny"
00443Cr 3               
00443Cr 3               nt_asm_jmp:
00443Cr 3  03 04        		.byte 3, IM
00443Er 3  rr rr                        .word nt_asm_jmp_i
004440r 3  rr rr rr rr  		.word xt_asm_jmp, z_asm_jmp
004444r 3  6A 6D 70     		.byte "jmp"
004447r 3               
004447r 3               nt_asm_jmp_i:
004447r 3  05 04        		.byte 5, IM
004449r 3  rr rr                        .word nt_asm_jmp_xi
00444Br 3  rr rr rr rr  		.word xt_asm_jmp_i, z_asm_jmp_i
00444Fr 3  6A 6D 70 2E  		.byte "jmp.i"
004453r 3  69           
004454r 3               
004454r 3               nt_asm_jmp_xi:
004454r 3  06 04        		.byte 6, IM
004456r 3  rr rr                        .word nt_asm_jsr
004458r 3  rr rr rr rr  		.word xt_asm_jmp_xi, z_asm_jmp_xi
00445Cr 3  6A 6D 70 2E  		.byte "jmp.xi"
004460r 3  78 69        
004462r 3               
004462r 3               nt_asm_jsr:
004462r 3  03 04        		.byte 3, IM
004464r 3  rr rr                        .word nt_asm_lda
004466r 3  rr rr rr rr  		.word xt_asm_jsr, z_asm_jsr
00446Ar 3  6A 73 72     		.byte "jsr"
00446Dr 3               
00446Dr 3               nt_asm_lda:
00446Dr 3  03 04        		.byte 3, IM
00446Fr 3  rr rr                        .word nt_asm_lda_h
004471r 3  rr rr rr rr  		.word xt_asm_lda, z_asm_lda
004475r 3  6C 64 61     		.byte "lda"
004478r 3               
004478r 3               nt_asm_lda_h:
004478r 3  05 04        		.byte 5, IM
00447Ar 3  rr rr                        .word nt_asm_lda_x
00447Cr 3  rr rr rr rr  		.word xt_asm_lda_h, z_asm_lda_h
004480r 3  6C 64 61 2E  		.byte "lda.#"
004484r 3  23           
004485r 3               
004485r 3               nt_asm_lda_x:
004485r 3  05 04        		.byte 5, IM
004487r 3  rr rr                        .word nt_asm_lda_y
004489r 3  rr rr rr rr  		.word xt_asm_lda_x, z_asm_lda_x
00448Dr 3  6C 64 61 2E  		.byte "lda.x"
004491r 3  78           
004492r 3               
004492r 3               nt_asm_lda_y:
004492r 3  05 04        		.byte 5, IM
004494r 3  rr rr                        .word nt_asm_lda_z
004496r 3  rr rr rr rr  		.word xt_asm_lda_y, z_asm_lda_y
00449Ar 3  6C 64 61 2E  		.byte "lda.y"
00449Er 3  79           
00449Fr 3               
00449Fr 3               nt_asm_lda_z:
00449Fr 3  05 04        		.byte 5, IM
0044A1r 3  rr rr                        .word nt_asm_lda_zi
0044A3r 3  rr rr rr rr  		.word xt_asm_lda_z, z_asm_lda_z
0044A7r 3  6C 64 61 2E  		.byte "lda.z"
0044ABr 3  7A           
0044ACr 3               
0044ACr 3               nt_asm_lda_zi:
0044ACr 3  06 04        		.byte 6, IM
0044AEr 3  rr rr                        .word nt_asm_lda_ziy
0044B0r 3  rr rr rr rr  		.word xt_asm_lda_zi, z_asm_lda_zi
0044B4r 3  6C 64 61 2E  		.byte "lda.zi"
0044B8r 3  7A 69        
0044BAr 3               
0044BAr 3               nt_asm_lda_ziy:
0044BAr 3  07 04        		.byte 7, IM
0044BCr 3  rr rr                        .word nt_asm_lda_zx
0044BEr 3  rr rr rr rr  		.word xt_asm_lda_ziy, z_asm_lda_ziy
0044C2r 3  6C 64 61 2E  		.byte "lda.ziy"
0044C6r 3  7A 69 79     
0044C9r 3               
0044C9r 3               nt_asm_lda_zx:
0044C9r 3  06 04        		.byte 6, IM
0044CBr 3  rr rr                        .word nt_asm_lda_zxi
0044CDr 3  rr rr rr rr  		.word xt_asm_lda_zx, z_asm_lda_zx
0044D1r 3  6C 64 61 2E  		.byte "lda.zx"
0044D5r 3  7A 78        
0044D7r 3               
0044D7r 3               nt_asm_lda_zxi:
0044D7r 3  07 04        		.byte 7, IM
0044D9r 3  rr rr                        .word nt_asm_ldx
0044DBr 3  rr rr rr rr  		.word xt_asm_lda_zxi, z_asm_lda_zxi
0044DFr 3  6C 64 61 2E  		.byte "lda.zxi"
0044E3r 3  7A 78 69     
0044E6r 3               
0044E6r 3               nt_asm_ldx:
0044E6r 3  03 04        		.byte 3, IM
0044E8r 3  rr rr                        .word nt_asm_ldx_h
0044EAr 3  rr rr rr rr  		.word xt_asm_ldx, z_asm_ldx
0044EEr 3  6C 64 78     		.byte "ldx"
0044F1r 3               
0044F1r 3               nt_asm_ldx_h:
0044F1r 3  05 04        		.byte 5, IM
0044F3r 3  rr rr                        .word nt_asm_ldx_y
0044F5r 3  rr rr rr rr  		.word xt_asm_ldx_h, z_asm_ldx_h
0044F9r 3  6C 64 78 2E  		.byte "ldx.#"
0044FDr 3  23           
0044FEr 3               
0044FEr 3               nt_asm_ldx_y:
0044FEr 3  05 04        		.byte 5, IM
004500r 3  rr rr                        .word nt_asm_ldx_z
004502r 3  rr rr rr rr  		.word xt_asm_ldx_y, z_asm_ldx_y
004506r 3  6C 64 78 2E  		.byte "ldx.y"
00450Ar 3  79           
00450Br 3               
00450Br 3               nt_asm_ldx_z:
00450Br 3  05 04        		.byte 5, IM
00450Dr 3  rr rr                        .word nt_asm_ldx_zy
00450Fr 3  rr rr rr rr  		.word xt_asm_ldx_z, z_asm_ldx_z
004513r 3  6C 64 78 2E  		.byte "ldx.z"
004517r 3  7A           
004518r 3               
004518r 3               nt_asm_ldx_zy:
004518r 3  06 04        		.byte 6, IM
00451Ar 3  rr rr                        .word nt_asm_ldy
00451Cr 3  rr rr rr rr  		.word xt_asm_ldx_zy, z_asm_ldx_zy
004520r 3  6C 64 78 2E  		.byte "ldx.zy"
004524r 3  7A 79        
004526r 3               
004526r 3               nt_asm_ldy:
004526r 3  03 04        		.byte 3, IM
004528r 3  rr rr                        .word nt_asm_ldy_h
00452Ar 3  rr rr rr rr  		.word xt_asm_ldy, z_asm_ldy
00452Er 3  6C 64 79     		.byte "ldy"
004531r 3               
004531r 3               nt_asm_ldy_h:
004531r 3  05 04        		.byte 5, IM
004533r 3  rr rr                        .word nt_asm_ldy_x
004535r 3  rr rr rr rr  		.word xt_asm_ldy_h, z_asm_ldy_h
004539r 3  6C 64 79 2E  		.byte "ldy.#"
00453Dr 3  23           
00453Er 3               
00453Er 3               nt_asm_ldy_x:
00453Er 3  05 04        		.byte 5, IM
004540r 3  rr rr                        .word nt_asm_ldy_z
004542r 3  rr rr rr rr  		.word xt_asm_ldy_x, z_asm_ldy_x
004546r 3  6C 64 79 2E  		.byte "ldy.x"
00454Ar 3  78           
00454Br 3               
00454Br 3               nt_asm_ldy_z:
00454Br 3  05 04        		.byte 5, IM
00454Dr 3  rr rr                        .word nt_asm_ldy_zx
00454Fr 3  rr rr rr rr  		.word xt_asm_ldy_z, z_asm_ldy_z
004553r 3  6C 64 79 2E  		.byte "ldy.z"
004557r 3  7A           
004558r 3               
004558r 3               nt_asm_ldy_zx:
004558r 3  06 04        		.byte 6, IM
00455Ar 3  rr rr                        .word nt_asm_lsr
00455Cr 3  rr rr rr rr  		.word xt_asm_ldy_zx, z_asm_ldy_zx
004560r 3  6C 64 79 2E  		.byte "ldy.zx"
004564r 3  7A 78        
004566r 3               
004566r 3               nt_asm_lsr:
004566r 3  03 04        		.byte 3, IM
004568r 3  rr rr                        .word nt_asm_lsr_a
00456Ar 3  rr rr rr rr  		.word xt_asm_lsr, z_asm_lsr
00456Er 3  6C 73 72     		.byte "lsr"
004571r 3               
004571r 3               nt_asm_lsr_a:
004571r 3  05 04        		.byte 5, IM
004573r 3  rr rr                        .word nt_asm_lsr_x
004575r 3  rr rr rr rr  		.word xt_asm_lsr_a, z_asm_lsr_a
004579r 3  6C 73 72 2E  		.byte "lsr.a"
00457Dr 3  61           
00457Er 3               
00457Er 3               nt_asm_lsr_x:
00457Er 3  05 04        		.byte 5, IM
004580r 3  rr rr                        .word nt_asm_lsr_z
004582r 3  rr rr rr rr  		.word xt_asm_lsr_x, z_asm_lsr_x
004586r 3  6C 73 72 2E  		.byte "lsr.x"
00458Ar 3  78           
00458Br 3               
00458Br 3               nt_asm_lsr_z:
00458Br 3  05 04        		.byte 5, IM
00458Dr 3  rr rr                        .word nt_asm_lsr_zx
00458Fr 3  rr rr rr rr  		.word xt_asm_lsr_z, z_asm_lsr_z
004593r 3  6C 73 72 2E  		.byte "lsr.z"
004597r 3  7A           
004598r 3               
004598r 3               nt_asm_lsr_zx:
004598r 3  06 04        		.byte 6, IM
00459Ar 3  rr rr                        .word nt_asm_nop
00459Cr 3  rr rr rr rr  		.word xt_asm_lsr_zx, z_asm_lsr_zx
0045A0r 3  6C 73 72 2E  		.byte "lsr.zx"
0045A4r 3  7A 78        
0045A6r 3               
0045A6r 3               nt_asm_nop:
0045A6r 3  03 04        		.byte 3, IM
0045A8r 3  rr rr                        .word nt_asm_ora
0045AAr 3  rr rr rr rr  		.word xt_asm_nop, z_asm_nop
0045AEr 3  6E 6F 70     		.byte "nop"
0045B1r 3               
0045B1r 3               nt_asm_ora:
0045B1r 3  03 04        		.byte 3, IM
0045B3r 3  rr rr                        .word nt_asm_ora_h
0045B5r 3  rr rr rr rr  		.word xt_asm_ora, z_asm_ora
0045B9r 3  6F 72 61     		.byte "ora"
0045BCr 3               
0045BCr 3               nt_asm_ora_h:
0045BCr 3  05 04        		.byte 5, IM
0045BEr 3  rr rr                        .word nt_asm_ora_x
0045C0r 3  rr rr rr rr  		.word xt_asm_ora_h, z_asm_ora_h
0045C4r 3  6F 72 61 2E  		.byte "ora.#"
0045C8r 3  23           
0045C9r 3               
0045C9r 3               nt_asm_ora_x:
0045C9r 3  05 04        		.byte 5, IM
0045CBr 3  rr rr                        .word nt_asm_ora_y
0045CDr 3  rr rr rr rr  		.word xt_asm_ora_x, z_asm_ora_x
0045D1r 3  6F 72 61 2E  		.byte "ora.x"
0045D5r 3  78           
0045D6r 3               
0045D6r 3               nt_asm_ora_y:
0045D6r 3  05 04        		.byte 5, IM
0045D8r 3  rr rr                        .word nt_asm_ora_z
0045DAr 3  rr rr rr rr  		.word xt_asm_ora_y, z_asm_ora_y
0045DEr 3  6F 72 61 2E  		.byte "ora.y"
0045E2r 3  79           
0045E3r 3               
0045E3r 3               nt_asm_ora_z:
0045E3r 3  05 04        		.byte 5, IM
0045E5r 3  rr rr                        .word nt_asm_ora_zi
0045E7r 3  rr rr rr rr  		.word xt_asm_ora_z, z_asm_ora_z
0045EBr 3  6F 72 61 2E  		.byte "ora.z"
0045EFr 3  7A           
0045F0r 3               
0045F0r 3               nt_asm_ora_zi:
0045F0r 3  06 04        		.byte 6, IM
0045F2r 3  rr rr                        .word nt_asm_ora_ziy
0045F4r 3  rr rr rr rr  		.word xt_asm_ora_zi, z_asm_ora_zi
0045F8r 3  6F 72 61 2E  		.byte "ora.zi"
0045FCr 3  7A 69        
0045FEr 3               
0045FEr 3               nt_asm_ora_ziy:
0045FEr 3  07 04        		.byte 7, IM
004600r 3  rr rr                        .word nt_asm_ora_zx
004602r 3  rr rr rr rr  		.word xt_asm_ora_ziy, z_asm_ora_ziy
004606r 3  6F 72 61 2E  		.byte "ora.ziy"
00460Ar 3  7A 69 79     
00460Dr 3               
00460Dr 3               nt_asm_ora_zx:
00460Dr 3  06 04        		.byte 6, IM
00460Fr 3  rr rr                        .word nt_asm_ora_zxi
004611r 3  rr rr rr rr  		.word xt_asm_ora_zx, z_asm_ora_zx
004615r 3  6F 72 61 2E  		.byte "ora.zx"
004619r 3  7A 78        
00461Br 3               
00461Br 3               nt_asm_ora_zxi:
00461Br 3  07 04        		.byte 7, IM
00461Dr 3  rr rr                        .word nt_asm_pha
00461Fr 3  rr rr rr rr  		.word xt_asm_ora_zxi, z_asm_ora_zxi
004623r 3  6F 72 61 2E  		.byte "ora.zxi"
004627r 3  7A 78 69     
00462Ar 3               
00462Ar 3               nt_asm_pha:
00462Ar 3  03 04        		.byte 3, IM
00462Cr 3  rr rr                        .word nt_asm_php
00462Er 3  rr rr rr rr  		.word xt_asm_pha, z_asm_pha
004632r 3  70 68 61     		.byte "pha"
004635r 3               
004635r 3               nt_asm_php:
004635r 3  03 04        		.byte 3, IM
004637r 3  rr rr                        .word nt_asm_phx
004639r 3  rr rr rr rr  		.word xt_asm_php, z_asm_php
00463Dr 3  70 68 70     		.byte "php"
004640r 3               
004640r 3               nt_asm_phx:
004640r 3  03 04        		.byte 3, IM
004642r 3  rr rr                        .word nt_asm_phy
004644r 3  rr rr rr rr  		.word xt_asm_phx, z_asm_phx
004648r 3  70 68 78     		.byte "phx"
00464Br 3               
00464Br 3               nt_asm_phy:
00464Br 3  03 04        		.byte 3, IM
00464Dr 3  rr rr                        .word nt_asm_pla
00464Fr 3  rr rr rr rr  		.word xt_asm_phy, z_asm_phy
004653r 3  70 68 79     		.byte "phy"
004656r 3               
004656r 3               nt_asm_pla:
004656r 3  03 04        		.byte 3, IM
004658r 3  rr rr                        .word nt_asm_plp
00465Ar 3  rr rr rr rr  		.word xt_asm_pla, z_asm_pla
00465Er 3  70 6C 61     		.byte "pla"
004661r 3               
004661r 3               nt_asm_plp:
004661r 3  03 04        		.byte 3, IM
004663r 3  rr rr                        .word nt_asm_plx
004665r 3  rr rr rr rr  		.word xt_asm_plp, z_asm_plp
004669r 3  70 6C 70     		.byte "plp"
00466Cr 3               
00466Cr 3               nt_asm_plx:
00466Cr 3  03 04        		.byte 3, IM
00466Er 3  rr rr                        .word nt_asm_ply
004670r 3  rr rr rr rr  		.word xt_asm_plx, z_asm_plx
004674r 3  70 6C 78     		.byte "plx"
004677r 3               
004677r 3               nt_asm_ply:
004677r 3  03 04        		.byte 3, IM
004679r 3  rr rr                        .word nt_asm_rol
00467Br 3  rr rr rr rr  		.word xt_asm_ply, z_asm_ply
00467Fr 3  70 6C 79     		.byte "ply"
004682r 3               
004682r 3               nt_asm_rol:
004682r 3  03 04        		.byte 3, IM
004684r 3  rr rr                        .word nt_asm_rol_a
004686r 3  rr rr rr rr  		.word xt_asm_rol, z_asm_rol
00468Ar 3  72 6F 6C     		.byte "rol"
00468Dr 3               
00468Dr 3               nt_asm_rol_a:
00468Dr 3  05 04        		.byte 5, IM
00468Fr 3  rr rr                        .word nt_asm_rol_x
004691r 3  rr rr rr rr  		.word xt_asm_rol_a, z_asm_rol_a
004695r 3  72 6F 6C 2E  		.byte "rol.a"
004699r 3  61           
00469Ar 3               
00469Ar 3               nt_asm_rol_x:
00469Ar 3  05 04        		.byte 5, IM
00469Cr 3  rr rr                        .word nt_asm_rol_z
00469Er 3  rr rr rr rr  		.word xt_asm_rol_x, z_asm_rol_x
0046A2r 3  72 6F 6C 2E  		.byte "rol.x"
0046A6r 3  78           
0046A7r 3               
0046A7r 3               nt_asm_rol_z:
0046A7r 3  05 04        		.byte 5, IM
0046A9r 3  rr rr                        .word nt_asm_rol_zx
0046ABr 3  rr rr rr rr  		.word xt_asm_rol_z, z_asm_rol_z
0046AFr 3  72 6F 6C 2E  		.byte "rol.z"
0046B3r 3  7A           
0046B4r 3               
0046B4r 3               nt_asm_rol_zx:
0046B4r 3  06 04        		.byte 6, IM
0046B6r 3  rr rr                        .word nt_asm_ror
0046B8r 3  rr rr rr rr  		.word xt_asm_rol_zx, z_asm_rol_zx
0046BCr 3  72 6F 6C 2E  		.byte "rol.zx"
0046C0r 3  7A 78        
0046C2r 3               
0046C2r 3               nt_asm_ror:
0046C2r 3  03 04        		.byte 3, IM
0046C4r 3  rr rr                        .word nt_asm_ror_a
0046C6r 3  rr rr rr rr  		.word xt_asm_ror, z_asm_ror
0046CAr 3  72 6F 72     		.byte "ror"
0046CDr 3               
0046CDr 3               nt_asm_ror_a:
0046CDr 3  05 04        		.byte 5, IM
0046CFr 3  rr rr                        .word nt_asm_ror_x
0046D1r 3  rr rr rr rr  		.word xt_asm_ror_a, z_asm_ror_a
0046D5r 3  72 6F 72 2E  		.byte "ror.a"
0046D9r 3  61           
0046DAr 3               
0046DAr 3               nt_asm_ror_x:
0046DAr 3  05 04        		.byte 5, IM
0046DCr 3  rr rr                        .word nt_asm_ror_z
0046DEr 3  rr rr rr rr  		.word xt_asm_ror_x, z_asm_ror_x
0046E2r 3  72 6F 72 2E  		.byte "ror.x"
0046E6r 3  78           
0046E7r 3               
0046E7r 3               nt_asm_ror_z:
0046E7r 3  05 04        		.byte 5, IM
0046E9r 3  rr rr                        .word nt_asm_ror_zx
0046EBr 3  rr rr rr rr  		.word xt_asm_ror_z, z_asm_ror_z
0046EFr 3  72 6F 72 2E  		.byte "ror.z"
0046F3r 3  7A           
0046F4r 3               
0046F4r 3               nt_asm_ror_zx:
0046F4r 3  06 04        		.byte 6, IM
0046F6r 3  rr rr                        .word nt_asm_rti
0046F8r 3  rr rr rr rr  		.word xt_asm_ror_zx, z_asm_ror_zx
0046FCr 3  72 6F 72 2E  		.byte "ror.zx"
004700r 3  7A 78        
004702r 3               
004702r 3               nt_asm_rti:
004702r 3  03 04        		.byte 3, IM
004704r 3  rr rr                        .word nt_asm_rts
004706r 3  rr rr rr rr  		.word xt_asm_rti, z_asm_rti
00470Ar 3  72 74 69     		.byte "rti"
00470Dr 3               
00470Dr 3               nt_asm_rts:
00470Dr 3  03 04        		.byte 3, IM
00470Fr 3  rr rr                        .word nt_asm_sbc
004711r 3  rr rr rr rr  		.word xt_asm_rts, z_asm_rts
004715r 3  72 74 73     		.byte "rts"
004718r 3               
004718r 3               nt_asm_sbc:
004718r 3  03 04        		.byte 3, IM
00471Ar 3  rr rr                        .word nt_asm_sbc_h
00471Cr 3  rr rr rr rr  		.word xt_asm_sbc, z_asm_sbc
004720r 3  73 62 63     		.byte "sbc"
004723r 3               
004723r 3               nt_asm_sbc_h:
004723r 3  05 04        		.byte 5, IM
004725r 3  rr rr                        .word nt_asm_sbc_x
004727r 3  rr rr rr rr  		.word xt_asm_sbc_h, z_asm_sbc_h
00472Br 3  73 62 63 2E  		.byte "sbc.#"
00472Fr 3  23           
004730r 3               
004730r 3               nt_asm_sbc_x:
004730r 3  05 04        		.byte 5, IM
004732r 3  rr rr                        .word nt_asm_sbc_y
004734r 3  rr rr rr rr  		.word xt_asm_sbc_x, z_asm_sbc_x
004738r 3  73 62 63 2E  		.byte "sbc.x"
00473Cr 3  78           
00473Dr 3               
00473Dr 3               nt_asm_sbc_y:
00473Dr 3  05 04        		.byte 5, IM
00473Fr 3  rr rr                        .word nt_asm_sbc_z
004741r 3  rr rr rr rr  		.word xt_asm_sbc_y, z_asm_sbc_y
004745r 3  73 62 63 2E  		.byte "sbc.y"
004749r 3  79           
00474Ar 3               
00474Ar 3               nt_asm_sbc_z:
00474Ar 3  05 04        		.byte 5, IM
00474Cr 3  rr rr                        .word nt_asm_sbc_zi
00474Er 3  rr rr rr rr  		.word xt_asm_sbc_z, z_asm_sbc_z
004752r 3  73 62 63 2E  		.byte "sbc.z"
004756r 3  7A           
004757r 3               
004757r 3               nt_asm_sbc_zi:
004757r 3  06 04        		.byte 6, IM
004759r 3  rr rr                        .word nt_asm_sbc_ziy
00475Br 3  rr rr rr rr  		.word xt_asm_sbc_zi, z_asm_sbc_zi
00475Fr 3  73 62 63 2E  		.byte "sbc.zi"
004763r 3  7A 69        
004765r 3               
004765r 3               nt_asm_sbc_ziy:
004765r 3  07 04        		.byte 7, IM
004767r 3  rr rr                        .word nt_asm_sbc_zx
004769r 3  rr rr rr rr  		.word xt_asm_sbc_ziy, z_asm_sbc_ziy
00476Dr 3  73 62 63 2E  		.byte "sbc.ziy"
004771r 3  7A 69 79     
004774r 3               
004774r 3               nt_asm_sbc_zx:
004774r 3  06 04        		.byte 6, IM
004776r 3  rr rr                        .word nt_asm_sbc_zxi
004778r 3  rr rr rr rr  		.word xt_asm_sbc_zx, z_asm_sbc_zx
00477Cr 3  73 62 63 2E  		.byte "sbc.zx"
004780r 3  7A 78        
004782r 3               
004782r 3               nt_asm_sbc_zxi:
004782r 3  07 04        		.byte 7, IM
004784r 3  rr rr                        .word nt_asm_sec
004786r 3  rr rr rr rr  		.word xt_asm_sbc_zxi, z_asm_sbc_zxi
00478Ar 3  73 62 63 2E  		.byte "sbc.zxi"
00478Er 3  7A 78 69     
004791r 3               
004791r 3               nt_asm_sec:
004791r 3  03 04        		.byte 3, IM
004793r 3  rr rr                        .word nt_asm_sed
004795r 3  rr rr rr rr  		.word xt_asm_sec, z_asm_sec
004799r 3  73 65 63     		.byte "sec"
00479Cr 3               
00479Cr 3               nt_asm_sed:
00479Cr 3  03 04        		.byte 3, IM
00479Er 3  rr rr                        .word nt_asm_sei
0047A0r 3  rr rr rr rr  		.word xt_asm_sed, z_asm_sed
0047A4r 3  73 65 64     		.byte "sed"
0047A7r 3               
0047A7r 3               nt_asm_sei:
0047A7r 3  03 04        		.byte 3, IM
0047A9r 3  rr rr                        .word nt_asm_sta
0047ABr 3  rr rr rr rr  		.word xt_asm_sei, z_asm_sei
0047AFr 3  73 65 69     		.byte "sei"
0047B2r 3               
0047B2r 3               nt_asm_sta:
0047B2r 3  03 04        		.byte 3, IM
0047B4r 3  rr rr                        .word nt_asm_sta_x
0047B6r 3  rr rr rr rr  		.word xt_asm_sta, z_asm_sta
0047BAr 3  73 74 61     		.byte "sta"
0047BDr 3               
0047BDr 3               nt_asm_sta_x:
0047BDr 3  05 04        		.byte 5, IM
0047BFr 3  rr rr                        .word nt_asm_sta_y
0047C1r 3  rr rr rr rr  		.word xt_asm_sta_x, z_asm_sta_x
0047C5r 3  73 74 61 2E  		.byte "sta.x"
0047C9r 3  78           
0047CAr 3               
0047CAr 3               nt_asm_sta_y:
0047CAr 3  05 04        		.byte 5, IM
0047CCr 3  rr rr                        .word nt_asm_sta_z
0047CEr 3  rr rr rr rr  		.word xt_asm_sta_y, z_asm_sta_y
0047D2r 3  73 74 61 2E  		.byte "sta.y"
0047D6r 3  79           
0047D7r 3               
0047D7r 3               nt_asm_sta_z:
0047D7r 3  05 04        		.byte 5, IM
0047D9r 3  rr rr                        .word nt_asm_sta_zi
0047DBr 3  rr rr rr rr  		.word xt_asm_sta_z, z_asm_sta_z
0047DFr 3  73 74 61 2E  		.byte "sta.z"
0047E3r 3  7A           
0047E4r 3               
0047E4r 3               nt_asm_sta_zi:
0047E4r 3  06 04        		.byte 6, IM
0047E6r 3  rr rr                        .word nt_asm_sta_ziy
0047E8r 3  rr rr rr rr  		.word xt_asm_sta_zi, z_asm_sta_zi
0047ECr 3  73 74 61 2E  		.byte "sta.zi"
0047F0r 3  7A 69        
0047F2r 3               
0047F2r 3               nt_asm_sta_ziy:
0047F2r 3  07 04        		.byte 7, IM
0047F4r 3  rr rr                        .word nt_asm_sta_zx
0047F6r 3  rr rr rr rr  		.word xt_asm_sta_ziy, z_asm_sta_ziy
0047FAr 3  73 74 61 2E  		.byte "sta.ziy"
0047FEr 3  7A 69 79     
004801r 3               
004801r 3               nt_asm_sta_zx:
004801r 3  06 04        		.byte 6, IM
004803r 3  rr rr                        .word nt_asm_sta_zxi
004805r 3  rr rr rr rr  		.word xt_asm_sta_zx, z_asm_sta_zx
004809r 3  73 74 61 2E  		.byte "sta.zx"
00480Dr 3  7A 78        
00480Fr 3               
00480Fr 3               nt_asm_sta_zxi:
00480Fr 3  07 04        		.byte 7, IM
004811r 3  rr rr                        .word nt_asm_stx
004813r 3  rr rr rr rr  		.word xt_asm_sta_zxi, z_asm_sta_zxi
004817r 3  73 74 61 2E  		.byte "sta.zxi"
00481Br 3  7A 78 69     
00481Er 3               
00481Er 3               nt_asm_stx:
00481Er 3  03 04        		.byte 3, IM
004820r 3  rr rr                        .word nt_asm_stx_z
004822r 3  rr rr rr rr  		.word xt_asm_stx, z_asm_stx
004826r 3  73 74 78     		.byte "stx"
004829r 3               
004829r 3               nt_asm_stx_z:
004829r 3  05 04        		.byte 5, IM
00482Br 3  rr rr                        .word nt_asm_stx_zy
00482Dr 3  rr rr rr rr  		.word xt_asm_stx_z, z_asm_stx_z
004831r 3  73 74 78 2E  		.byte "stx.z"
004835r 3  7A           
004836r 3               
004836r 3               nt_asm_stx_zy:
004836r 3  06 04        		.byte 6, IM
004838r 3  rr rr                        .word nt_asm_sty
00483Ar 3  rr rr rr rr  		.word xt_asm_stx_zy, z_asm_stx_zy
00483Er 3  73 74 78 2E  		.byte "stx.zy"
004842r 3  7A 79        
004844r 3               
004844r 3               nt_asm_sty:
004844r 3  03 04        		.byte 3, IM
004846r 3  rr rr                        .word nt_asm_sty_z
004848r 3  rr rr rr rr  		.word xt_asm_sty, z_asm_sty
00484Cr 3  73 74 79     		.byte "sty"
00484Fr 3               
00484Fr 3               nt_asm_sty_z:
00484Fr 3  05 04        		.byte 5, IM
004851r 3  rr rr                        .word nt_asm_sty_zx
004853r 3  rr rr rr rr  		.word xt_asm_sty_z, z_asm_sty_z
004857r 3  73 74 79 2E  		.byte "sty.z"
00485Br 3  7A           
00485Cr 3               
00485Cr 3               nt_asm_sty_zx:
00485Cr 3  06 04        		.byte 6, IM
00485Er 3  rr rr                        .word nt_asm_stz
004860r 3  rr rr rr rr  		.word xt_asm_sty_zx, z_asm_sty_zx
004864r 3  73 74 79 2E  		.byte "sty.zx"
004868r 3  7A 78        
00486Ar 3               
00486Ar 3               nt_asm_stz:
00486Ar 3  03 04        		.byte 3, IM
00486Cr 3  rr rr                        .word nt_asm_stz_x
00486Er 3  rr rr rr rr  		.word xt_asm_stz, z_asm_stz
004872r 3  73 74 7A     		.byte "stz"
004875r 3               
004875r 3               nt_asm_stz_x:
004875r 3  05 04        		.byte 5, IM
004877r 3  rr rr                        .word nt_asm_stz_z
004879r 3  rr rr rr rr  		.word xt_asm_stz_x, z_asm_stz_x
00487Dr 3  73 74 7A 2E  		.byte "stz.x"
004881r 3  78           
004882r 3               
004882r 3               nt_asm_stz_z:
004882r 3  05 04        		.byte 5, IM
004884r 3  rr rr                        .word nt_asm_stz_zx
004886r 3  rr rr rr rr  		.word xt_asm_stz_z, z_asm_stz_z
00488Ar 3  73 74 7A 2E  		.byte "stz.z"
00488Er 3  7A           
00488Fr 3               
00488Fr 3               nt_asm_stz_zx:
00488Fr 3  06 04        		.byte 6, IM
004891r 3  rr rr                        .word nt_asm_tax
004893r 3  rr rr rr rr  		.word xt_asm_stz_zx, z_asm_stz_zx
004897r 3  73 74 7A 2E  		.byte "stz.zx"
00489Br 3  7A 78        
00489Dr 3               
00489Dr 3               nt_asm_tax:
00489Dr 3  03 04        		.byte 3, IM
00489Fr 3  rr rr                        .word nt_asm_tay
0048A1r 3  rr rr rr rr  		.word xt_asm_tax, z_asm_tax
0048A5r 3  74 61 78     		.byte "tax"
0048A8r 3               
0048A8r 3               nt_asm_tay:
0048A8r 3  03 04        		.byte 3, IM
0048AAr 3  rr rr                        .word nt_asm_trb
0048ACr 3  rr rr rr rr  		.word xt_asm_tay, z_asm_tay
0048B0r 3  74 61 79     		.byte "tay"
0048B3r 3               
0048B3r 3               nt_asm_trb:
0048B3r 3  03 04        		.byte 3, IM
0048B5r 3  rr rr                        .word nt_asm_trb_z
0048B7r 3  rr rr rr rr  		.word xt_asm_trb, z_asm_trb
0048BBr 3  74 72 62     		.byte "trb"
0048BEr 3               
0048BEr 3               nt_asm_trb_z:
0048BEr 3  05 04        		.byte 5, IM
0048C0r 3  rr rr                        .word nt_asm_tsb
0048C2r 3  rr rr rr rr  		.word xt_asm_trb_z, z_asm_trb_z
0048C6r 3  74 72 62 2E  		.byte "trb.z"
0048CAr 3  7A           
0048CBr 3               
0048CBr 3               nt_asm_tsb:
0048CBr 3  03 04        		.byte 3, IM
0048CDr 3  rr rr                        .word nt_asm_tsb_z
0048CFr 3  rr rr rr rr  		.word xt_asm_tsb, z_asm_tsb
0048D3r 3  74 73 62     		.byte "tsb"
0048D6r 3               
0048D6r 3               nt_asm_tsb_z:
0048D6r 3  05 04        		.byte 5, IM
0048D8r 3  rr rr                        .word nt_asm_tsx
0048DAr 3  rr rr rr rr  		.word xt_asm_tsb_z, z_asm_tsb_z
0048DEr 3  74 73 62 2E  		.byte "tsb.z"
0048E2r 3  7A           
0048E3r 3               
0048E3r 3               nt_asm_tsx:
0048E3r 3  03 04        		.byte 3, IM
0048E5r 3  rr rr                        .word nt_asm_txa
0048E7r 3  rr rr rr rr  		.word xt_asm_tsx, z_asm_tsx
0048EBr 3  74 73 78     		.byte "tsx"
0048EEr 3               
0048EEr 3               nt_asm_txa:
0048EEr 3  03 04        		.byte 3, IM
0048F0r 3  rr rr                        .word nt_asm_txs
0048F2r 3  rr rr rr rr  		.word xt_asm_txa, z_asm_txa
0048F6r 3  74 78 61     		.byte "txa"
0048F9r 3               
0048F9r 3               nt_asm_txs:
0048F9r 3  03 04        		.byte 3, IM
0048FBr 3  rr rr                        .word nt_asm_tya
0048FDr 3  rr rr rr rr  		.word xt_asm_txs, z_asm_txs
004901r 3  74 78 73     		.byte "txs"
004904r 3               
004904r 3               nt_asm_tya:
004904r 3  03 04        		.byte 3, IM
004906r 3  rr rr                        .word nt_asm_arrow
004908r 3  rr rr rr rr  		.word xt_asm_tya, z_asm_tya
00490Cr 3  74 79 61     		.byte "tya"
00490Fr 3               
00490Fr 3               ; Assembler pseudo-instructions, directives and macros
00490Fr 3               
00490Fr 3               nt_asm_arrow:   ; uses same code as HERE, but immediate
00490Fr 3  03 04                        .byte 3, IM
004911r 3  rr rr                        .word nt_asm_back_jump
004913r 3  rr rr rr rr                  .word xt_asm_arrow, z_asm_arrow
004917r 3  2D 2D 3E                     .byte "-->"
00491Ar 3               
00491Ar 3               
00491Ar 3               nt_asm_back_jump:  ; syntactic sugar, does nothing
00491Ar 3  02 04                        .byte 2, IM
00491Cr 3  rr rr                        .word nt_asm_back_branch
00491Er 3  rr rr rr rr                  .word xt_asm_back_jump, z_asm_back_jump
004922r 3  3C 6A                        .byte "<j"
004924r 3               
004924r 3               nt_asm_back_branch:
004924r 3  02 04                        .byte 2, IM
004926r 3  rr rr                        .word nt_asm_push_a
004928r 3  rr rr rr rr                  .word xt_asm_back_branch, z_asm_back_branch
00492Cr 3  3C 62                        .byte "<b"
00492Er 3               
00492Er 3               nt_asm_push_a:
00492Er 3  06 04                        .byte 6, IM
004930r 3  00 00                        .word 0000
004932r 3  rr rr rr rr                  .word xt_asm_push_a, z_asm_push_a
004936r 3  70 75 73 68                  .byte "push-a"
00493Ar 3  2D 61        
00493Cr 3               
00493Cr 3               .endif
00493Cr 3               
00493Cr 3               ; END of ASSEMBLER-WORDLIST
00493Cr 3               
00493Cr 3               ; END
00493Cr 3               
00493Cr 2                   .include "strings.s"          ; Headers of native words
00493Cr 3               ; List of Strings for Tali Forth 2
00493Cr 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00493Cr 3               ; First version: 01. Apr 2016 (for Liara Forth)
00493Cr 3               ; This version: 28. Dec 2018
00493Cr 3               
00493Cr 3               ; This file is included by taliforth.asm
00493Cr 3               
00493Cr 3               ; ## GENERAL STRINGS
00493Cr 3               
00493Cr 3               ; All general strings must be zero-terminated, names start with "s_",
00493Cr 3               ; aliases with "str_"
00493Cr 3               
00493Cr 3               str_ok =              0
00493Cr 3               str_compile =         1
00493Cr 3               str_redefined =       2
00493Cr 3               str_wid_forth =       3
00493Cr 3               str_abc_lower =       4
00493Cr 3               str_abc_upper =       5
00493Cr 3               str_wid_editor =      6
00493Cr 3               str_wid_assembler =   7
00493Cr 3               str_wid_root =        8
00493Cr 3               str_see_flags =       9
00493Cr 3               str_see_nt =         10
00493Cr 3               str_see_xt =         11
00493Cr 3               str_see_size =       12
00493Cr 3               str_disasm_lit     = 13
00493Cr 3               str_disasm_sdc     = 14
00493Cr 3               str_disasm_bra     = 15
00493Cr 3               
00493Cr 3               ; Since we can't fit a 16-bit address in a register, we use indexes as offsets
00493Cr 3               ; to tables as error and string numbers.
00493Cr 3               string_table:
00493Cr 3  rr rr rr rr          .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
004940r 3  rr rr rr rr  
004944r 3  rr rr        
004946r 3  rr rr rr rr          .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
00494Ar 3  rr rr rr rr  
00494Er 3  rr rr rr rr          .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
004952r 3  rr rr rr rr  
004956r 3               
004956r 3  20 6F 6B 00  s_ok:         .byte " ok", 0         ; note space at beginning
00495Ar 3  20 63 6F 6D  s_compiled:   .byte " compiled", 0   ; note space at beginning
00495Er 3  70 69 6C 65  
004962r 3  64 00        
004964r 3  72 65 64 65  s_redefined:  .byte "redefined ", 0  ; note space at end
004968r 3  66 69 6E 65  
00496Cr 3  64 20 00     
00496Fr 3               
00496Fr 3  30 31 32 33  s_abc_lower:  .byte "0123456789abcdefghijklmnopqrstuvwxyz"
004973r 3  34 35 36 37  
004977r 3  38 39 61 62  
004993r 3  30 31 32 33  s_abc_upper:  .byte "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
004997r 3  34 35 36 37  
00499Br 3  38 39 41 42  
0049B7r 3               
0049B7r 3  41 73 73 65  s_wid_asm:    .byte "Assembler ", 0  ; Wordlist ID 2, note space at end
0049BBr 3  6D 62 6C 65  
0049BFr 3  72 20 00     
0049C2r 3  45 64 69 74  s_wid_editor: .byte "Editor ", 0     ; Wordlist ID 1, note space at end
0049C6r 3  6F 72 20 00  
0049CAr 3  46 6F 72 74  s_wid_forth:  .byte "Forth ", 0      ; Wordlist ID 0, note space at end
0049CEr 3  68 20 00     
0049D1r 3  52 6F 6F 74  s_wid_root:   .byte "Root ", 0       ; Wordlist ID 3, note space at end
0049D5r 3  20 00        
0049D7r 3               
0049D7r 3  66 6C 61 67  s_see_flags:  .byte "flags (CO AN IM NN UF HC): ", 0
0049DBr 3  73 20 28 43  
0049DFr 3  4F 20 41 4E  
0049F3r 3  6E 74 3A 20  s_see_nt:     .byte "nt: ", 0
0049F7r 3  00           
0049F8r 3  78 74 3A 20  s_see_xt:     .byte "xt: ", 0
0049FCr 3  00           
0049FDr 3  73 69 7A 65  s_see_size:   .byte "size (decimal): ", 0
004A01r 3  20 28 64 65  
004A05r 3  63 69 6D 61  
004A0Er 3  4C 49 54 45  s_disasm_lit: .byte "LITERAL ", 0
004A12r 3  52 41 4C 20  
004A16r 3  00           
004A17r 3  53 54 41 43  s_disasm_sdc: .byte "STACK DEPTH CHECK", 0
004A1Br 3  4B 20 44 45  
004A1Fr 3  50 54 48 20  
004A29r 3  42 52 41 4E  s_disasm_bra: .byte "BRANCH ",0
004A2Dr 3  43 48 20 00  
004A31r 3               
004A31r 3               
004A31r 3               ; ## ERROR STRINGS
004A31r 3               
004A31r 3               ; All error strings must be zero-terminated, all names start with "es_",
004A31r 3               ; aliases with "err_". If the string texts are changed, the test suite must be
004A31r 3               ; as well
004A31r 3               
004A31r 3               err_allot =        0
004A31r 3               err_badsource =    1
004A31r 3               err_compileonly =  2
004A31r 3               err_defer =        3
004A31r 3               err_divzero =      4
004A31r 3               err_noname =       5
004A31r 3               err_refill =       6
004A31r 3               err_state =        7
004A31r 3               err_syntax =       8
004A31r 3               err_underflow =    9
004A31r 3               err_negallot =     10
004A31r 3               err_wordlist =     11
004A31r 3               err_blockwords =   12
004A31r 3               err_ramexp =      13
004A31r 3               
004A31r 3               error_table:
004A31r 3  rr rr rr rr          .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
004A35r 3  rr rr rr rr  
004A39r 3  rr rr rr rr          .word es_divzero, es_noname, es_refill, es_state        ;  4-7
004A3Dr 3  rr rr rr rr  
004A41r 3  rr rr rr rr          .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
004A45r 3  rr rr rr rr  
004A49r 3  rr rr rr rr          .word es_blockwords, es_ramexp                                    ; 12-13
004A4Dr 3               
004A4Dr 3  41 4C 4C 4F  es_allot:       .byte "ALLOT using all available memory", 0
004A51r 3  54 20 75 73  
004A55r 3  69 6E 67 20  
004A6Er 3  49 6C 6C 65  es_badsource:   .byte "Illegal SOURCE-ID during REFILL", 0
004A72r 3  67 61 6C 20  
004A76r 3  53 4F 55 52  
004A8Er 3  49 6E 74 65  es_compileonly: .byte "Interpreting a compile-only word", 0
004A92r 3  72 70 72 65  
004A96r 3  74 69 6E 67  
004AAFr 3  44 45 46 45  es_defer:       .byte "DEFERed word not defined yet", 0
004AB3r 3  52 65 64 20  
004AB7r 3  77 6F 72 64  
004ACCr 3  44 69 76 69  es_divzero:     .byte "Division by zero", 0
004AD0r 3  73 69 6F 6E  
004AD4r 3  20 62 79 20  
004ADDr 3  50 61 72 73  es_noname:      .byte "Parsing failure", 0
004AE1r 3  69 6E 67 20  
004AE5r 3  66 61 69 6C  
004AEDr 3  51 55 49 54  es_refill:      .byte "QUIT could not get input (REFILL returned -1)", 0
004AF1r 3  20 63 6F 75  
004AF5r 3  6C 64 20 6E  
004B1Br 3  41 6C 72 65  es_state:       .byte "Already in compile mode", 0
004B1Fr 3  61 64 79 20  
004B23r 3  69 6E 20 63  
004B33r 3  55 6E 64 65  es_syntax:      .byte "Undefined word", 0
004B37r 3  66 69 6E 65  
004B3Br 3  64 20 77 6F  
004B42r 3  53 74 61 63  es_underflow:   .byte "Stack underflow", 0
004B46r 3  6B 20 75 6E  
004B4Ar 3  64 65 72 66  
004B52r 3  4D 61 78 20  es_negallot:    .byte "Max memory freed with ALLOT", 0
004B56r 3  6D 65 6D 6F  
004B5Ar 3  72 79 20 66  
004B6Er 3  4E 6F 20 77  es_wordlist:    .byte "No wordlists available", 0
004B72r 3  6F 72 64 6C  
004B76r 3  69 73 74 73  
004B85r 3  50 6C 65 61  es_blockwords:  .byte "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
004B89r 3  73 65 20 61  
004B8Dr 3  73 73 69 67  
004BC4r 3  50 6C 65 61  es_ramexp:      .byte "Please assign the RAM expansion card address with expad",0
004BC8r 3  73 65 20 61  
004BCCr 3  73 73 69 67  
004BFCr 3               ; ## ENVIRONMENT STRINGS
004BFCr 3               
004BFCr 3               ; These are used by the ENVIRONMENT? word and stored in the old string format:
004BFCr 3               ; Length byte first, then the string itself that is not rpt. not
004BFCr 3               ; zero-terminated. Note these are uppercase by ANS defintion. All start with
004BFCr 3               ; "envs_".
004BFCr 3               
004BFCr 3               ; These return a single-cell number
004BFCr 3  0F 2F 43 4F  envs_cs:        .byte 15, "/COUNTED-STRING"
004C00r 3  55 4E 54 45  
004C04r 3  44 2D 53 54  
004C0Cr 3  05 2F 48 4F  envs_hold:      .byte 5, "/HOLD"
004C10r 3  4C 44        
004C12r 3  04 2F 50 41  envs_pad:       .byte 4, "/PAD"
004C16r 3  44           
004C17r 3  11 41 44 44  envs_aub:       .byte 17, "ADDRESS-UNIT-BITS"
004C1Br 3  52 45 53 53  
004C1Fr 3  2D 55 4E 49  
004C29r 3  07 46 4C 4F  envs_floored:   .byte 7, "FLOORED"
004C2Dr 3  4F 52 45 44  
004C31r 3  08 4D 41 58  envs_max_char:  .byte 8, "MAX-CHAR"
004C35r 3  2D 43 48 41  
004C39r 3  52           
004C3Ar 3  05 4D 41 58  envs_max_n:     .byte 5, "MAX-N"
004C3Er 3  2D 4E        
004C40r 3  05 4D 41 58  envs_max_u:     .byte 5, "MAX-U"
004C44r 3  2D 55        
004C46r 3  12 52 45 54  envs_rsc:       .byte 18, "RETURN-STACK-CELLS"
004C4Ar 3  55 52 4E 2D  
004C4Er 3  53 54 41 43  
004C59r 3  0B 53 54 41  envs_sc:        .byte 11, "STACK-CELLS"
004C5Dr 3  43 4B 2D 43  
004C61r 3  45 4C 4C 53  
004C65r 3  09 57 4F 52  envs_wl:        .byte 9, "WORDLISTS"
004C69r 3  44 4C 49 53  
004C6Dr 3  54 53        
004C6Fr 3               
004C6Fr 3               ; These return a double-cell number
004C6Fr 3  05 4D 41 58  envs_max_d:     .byte 5, "MAX-D"
004C73r 3  2D 44        
004C75r 3  06 4D 41 58  envs_max_ud:    .byte 6, "MAX-UD"
004C79r 3  2D 55 44     
004C7Cr 3               
004C7Cr 3               ; END
004C7Cr 3               
004C7Cr 2               
004C7Cr 2               ; High-level Forth words, see forth_code/README.md
004C7Cr 2               forth_words_start:
004C7Cr 2  20 63 72 20  .incbin "forth_code/forth_words.asc"
004C80r 2  2E 28 20 52  
004C84r 2  65 61 64 79  
004C8Er 2               forth_words_end:
004C8Er 2               
004C8Er 2               ; User-defined Forth words, see forth_code/README.md
004C8Er 2               user_words_start:
004C8Er 2  20 32 30 20  .incbin "forth_code/user_words.asc"
004C92r 2  63 6F 6E 73  
004C96r 2  74 61 6E 74  
00532Cr 2               user_words_end:
00532Cr 2               
00532Cr 2               
00532Cr 2               ; =====================================================================
00532Cr 2               ; COMPILE WORDS, JUMPS and SUBROUTINE JUMPS INTO CODE
00532Cr 2               
00532Cr 2               ; These three routines compile instructions such as "jsr xt_words" into a word
00532Cr 2               ; at compile time so they are available at run time. Words that use this
00532Cr 2               ; routine may not be natively compiled. We use "cmpl" as not to confuse these
00532Cr 2               ; routines with the COMPILE, word. Always call this with a subroutine jump.
00532Cr 2               ; This means combining JSR/RTS to JMP in those cases is not going to work. To
00532Cr 2               ; use, load the LSB of the address in A and the MSB in Y. You can remember
00532Cr 2               ; which comes first by thinking of the song "Young Americans" ("YA") by David
00532Cr 2               ; Bowie.
00532Cr 2               
00532Cr 2               ;               ldy #>addr      ; MSB   ; "Young"
00532Cr 2               ;               lda #<addr      ; LSB   ; "Americans"
00532Cr 2               ;               jsr cmpl_subroutine
00532Cr 2               
00532Cr 2               ; Also, we keep a routine here to compile a single byte passed through A.
00532Cr 2               
00532Cr 2               cmpl_subroutine:
00532Cr 2                   ; This is the entry point to compile JSR <ADDR>
00532Cr 2  48               pha             ; save LSB of address
00532Dr 2  A9 20            lda #$20        ; load opcode for JSR
00532Fr 2  80 03            bra cmpl_common
005331r 2               cmpl_jump:
005331r 2                   ; This is the entry point to compile JMP <ADDR>
005331r 2  48               pha             ; save LSB of address
005332r 2  A9 4C            lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
005334r 2               cmpl_common:
005334r 2                   ; At this point, A contains the opcode to be compiled,
005334r 2                   ; the LSB of the address is on the 65c02 stack, and the MSB of
005334r 2                   ; the address is in Y
005334r 2  20 rr rr         jsr cmpl_a      ; compile opcode
005337r 2  68               pla             ; retrieve address LSB; fall thru to cmpl_word
005338r 2               cmpl_word:
005338r 2                   ; This is the entry point to compile a word (little-endian)
005338r 2  20 rr rr         jsr cmpl_a      ; compile LSB of address
00533Br 2  98               tya             ; fall thru for MSB
00533Cr 2               cmpl_a:
00533Cr 2                   ; This is the entry point to compile a single byte which
00533Cr 2                   ; is passed in A. The built-in assembler assumes that this
00533Cr 2                   ; routine does not modify Y.
00533Cr 2  92 rr            sta (cp)
00533Er 2  E6 rr            inc cp
005340r 2  D0 02            bne _done
005342r 2  E6 rr            inc cp+1
005344r 2               _done:
005344r 2  60               rts
005345r 2               
005345r 2               
005345r 2               
005345r 2               ; =====================================================================
005345r 2               ; CODE FIELD ROUTINES
005345r 2               
005345r 2               doconst:
005345r 2               ; """Execute a CONSTANT: Push the data in the first two bytes of
005345r 2               ; the Data Field onto the Data Stack
005345r 2               ; """
005345r 2  CA               dex             ; make room for constant
005346r 2  CA               dex
005347r 2               
005347r 2                   ; The value we need is stored in the two bytes after the
005347r 2                   ; JSR return address, which in turn is what is on top of
005347r 2                   ; the Return Stack
005347r 2  68               pla             ; LSB of return address
005348r 2  85 rr            sta tmp1
00534Ar 2  68               pla             ; MSB of return address
00534Br 2  85 rr            sta tmp1+1
00534Dr 2               
00534Dr 2                   ; Start LDY with 1 instead of 0 because of how JSR stores
00534Dr 2                   ; the return address on the 65c02
00534Dr 2  A0 01            ldy #1
00534Fr 2  B1 rr            lda (tmp1),y
005351r 2  95 00            sta 0,x
005353r 2  C8               iny
005354r 2  B1 rr            lda (tmp1),y
005356r 2  95 01            sta 1,x
005358r 2               
005358r 2                   ; This takes us back to the original caller, not the
005358r 2                   ; DOCONST caller
005358r 2  60               rts
005359r 2               
005359r 2               
005359r 2               dodefer:
005359r 2               ; """Execute a DEFER statement at runtime: Execute the address we
005359r 2               ; find after the caller in the Data Field
005359r 2               ; """
005359r 2                   ; The xt we need is stored in the two bytes after the JSR
005359r 2                   ; return address, which is what is on top of the Return
005359r 2                   ; Stack. So all we have to do is replace our return jump
005359r 2                   ; with what we find there
005359r 2  68               pla             ; LSB
00535Ar 2  85 rr            sta tmp1
00535Cr 2  68               pla             ; MSB
00535Dr 2  85 rr            sta tmp1+1
00535Fr 2               
00535Fr 2  A0 01            ldy #1
005361r 2  B1 rr            lda (tmp1),y
005363r 2  85 rr            sta tmp2
005365r 2  C8               iny
005366r 2  B1 rr            lda (tmp1),y
005368r 2  85 rr            sta tmp2+1
00536Ar 2               
00536Ar 2  6C rr rr         jmp (tmp2)      ; This is actually a jump to the new target
00536Dr 2               
00536Dr 2               defer_error:
00536Dr 2                   ; """Error routine for undefined DEFER: Complain and abort"""
00536Dr 2  A9 03            lda #err_defer
00536Fr 2  4C rr rr         jmp error
005372r 2               
005372r 2               dodoes:
005372r 2               ; """Execute the runtime portion of DOES>. See DOES> and
005372r 2               ; docs/create-does.txt for details and
005372r 2               ; http://www.bradrodriguez.com/papers/moving3.htm
005372r 2               ; """
005372r 2                   ; Assumes the address of the CFA of the original defining word
005372r 2                   ; (say, CONSTANT) is on the top of the Return Stack. Save it
005372r 2                   ; for a later jump, adding one byte because of the way the
005372r 2                   ; 6502 works
005372r 2  7A               ply             ; LSB
005373r 2  68               pla             ; MSB
005374r 2  C8               iny
005375r 2  D0 01            bne @1
005377r 2  1A               inc
005378r 2               @1:
005378r 2  84 rr            sty tmp2
00537Ar 2  85 rr            sta tmp2+1
00537Cr 2               
00537Cr 2                   ; Next on the Return Stack should be the address of the PFA of
00537Cr 2                   ; the calling defined word (say, the name of whatever constant we
00537Cr 2                   ; just defined). Move this to the Data Stack, again adding one.
00537Cr 2  CA               dex
00537Dr 2  CA               dex
00537Er 2               
00537Er 2  7A               ply
00537Fr 2  68               pla
005380r 2  C8               iny
005381r 2  D0 01            bne @2
005383r 2  1A               inc
005384r 2               @2:
005384r 2  94 00            sty 0,x         ; LSB
005386r 2  95 01            sta 1,x         ; MSB
005388r 2               
005388r 2                   ; This leaves the return address from the original main routine
005388r 2                   ; on top of the Return Stack. We leave that untouched and jump
005388r 2                   ; to the special code of the defining word. It's RTS instruction
005388r 2                   ; will take us back to the main routine
005388r 2  6C rr rr         jmp (tmp2)
00538Br 2               
00538Br 2               
00538Br 2               dovar:
00538Br 2               ; """Execute a variable: Push the address of the first bytes of
00538Br 2               ; the Data Field onto the stack. This is called with JSR so we
00538Br 2               ; can pick up the address of the calling variable off the 65c02's
00538Br 2               ; stack. The final RTS takes us to the original caller of the
00538Br 2               ; routine that itself called DOVAR. This is the default
00538Br 2               ; routine installed with CREATE.
00538Br 2               ; """
00538Br 2                   ; Pull the return address off the machine's stack, adding
00538Br 2                   ; one because of the way the 65c02 handles subroutines
00538Br 2  7A               ply             ; LSB
00538Cr 2  68               pla             ; MSB
00538Dr 2  C8               iny
00538Er 2  D0 01            bne @1
005390r 2  1A               inc
005391r 2               @1:
005391r 2  CA               dex
005392r 2  CA               dex
005393r 2               
005393r 2  95 01            sta 1,x
005395r 2  98               tya
005396r 2  95 00            sta 0,x
005398r 2               
005398r 2  60               rts
005399r 2               
005399r 2               ; =====================================================================
005399r 2               ; LOW LEVEL HELPER FUNCTIONS
005399r 2               
005399r 2               byte_to_ascii:
005399r 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
005399r 2               .scope
005399r 2  48               pha
00539Ar 2  4A               lsr             ; convert high nibble first
00539Br 2  4A               lsr
00539Cr 2  4A               lsr
00539Dr 2  4A               lsr
00539Er 2  20 rr rr         jsr _nibble_to_ascii
0053A1r 2  68               pla
0053A2r 2               
0053A2r 2                   ; fall through to _nibble_to_ascii
0053A2r 2               
0053A2r 2               _nibble_to_ascii:
0053A2r 2               ; """Private helper function for byte_to_ascii: Print lower nibble
0053A2r 2               ; of A and and EMIT it. This does the actual work.
0053A2r 2               ; """
0053A2r 2  29 0F            and #$0F
0053A4r 2  09 30            ora #'0'
0053A6r 2  C9 3A            cmp #$3A        ; '9+1
0053A8r 2  90 02            bcc @1
0053AAr 2  69 06            adc #$06
0053ACr 2               
0053ACr 2  4C rr rr     @1:               jmp emit_a
0053AFr 2               
0053AFr 2  60               rts
0053B0r 2               .endscope
0053B0r 2               
0053B0r 2               compare_16bit:
0053B0r 2               ; """Compare TOS/NOS and return results in form of the 65c02 flags
0053B0r 2               ; Adapted from Leventhal "6502 Assembly Language Subroutines", see
0053B0r 2               ; also http://www.6502.org/tutorials/compare_beyond.html
0053B0r 2               ; For signed numbers, Z signals equality and N which number is larger:
0053B0r 2               ;       if TOS = NOS: Z=1 and N=0
0053B0r 2               ;       if TOS > NOS: Z=0 and N=0
0053B0r 2               ;       if TOS < NOS: Z=0 and N=1
0053B0r 2               ; For unsigned numbers, Z signals equality and C which number is larger:
0053B0r 2               ;       if TOS = NOS: Z=1 and N=0
0053B0r 2               ;       if TOS > NOS: Z=0 and C=1
0053B0r 2               ;       if TOS < NOS: Z=0 and C=0
0053B0r 2               ; Compared to the book routine, WORD1 (MINUED) is TOS
0053B0r 2               ;                               WORD2 (SUBTRAHEND) is NOS
0053B0r 2               ; """
0053B0r 2               .scope
0053B0r 2                   ; Compare LSB first to set the carry flag
0053B0r 2  B5 00            lda 0,x                 ; LSB of TOS
0053B2r 2  D5 02            cmp 2,x                 ; LSB of NOS
0053B4r 2  F0 0A            beq _equal
0053B6r 2               
0053B6r 2                   ; LSBs are not equal, compare MSB
0053B6r 2  B5 01            lda 1,x                 ; MSB of TOS
0053B8r 2  F5 03            sbc 3,x                 ; MSB of NOS
0053BAr 2  09 01            ora #1                  ; Make zero flag 0 because not equal
0053BCr 2  70 08            bvs _overflow
0053BEr 2  80 08            bra _not_equal
0053C0r 2               _equal:
0053C0r 2                   ; Low bytes are equal, so we compare high bytes
0053C0r 2  B5 01            lda 1,x                 ; MSB of TOS
0053C2r 2  F5 03            sbc 3,x                 ; MSB of NOS
0053C4r 2  50 04            bvc _done
0053C6r 2               _overflow:
0053C6r 2                   ; Handle overflow because we use signed numbers
0053C6r 2  49 80            eor #$80                ; complement negative flag
0053C8r 2               _not_equal:
0053C8r 2  09 01            ora #1                  ; if overflow, we can't be eqal
0053CAr 2               _done:
0053CAr 2  60               rts
0053CBr 2               .endscope
0053CBr 2               
0053CBr 2               current_to_dp:
0053CBr 2               ; """Look up the current (compilation) dictionary pointer
0053CBr 2               ; in the wordlist set and put it into the dp zero-page
0053CBr 2               ; variable. Uses A and Y.
0053CBr 2               ; """
0053CBr 2                   ; Determine which wordlist is current
0053CBr 2  A0 04            ldy #current_offset
0053CDr 2  B1 rr            lda (up),y      ; current is a byte variable
0053CFr 2  0A               asl             ; turn it into an offset (in cells)
0053D0r 2               
0053D0r 2                   ; Get the dictionary pointer for that wordlist.
0053D0r 2  18               clc
0053D1r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
0053D3r 2  A8               tay
0053D4r 2  B1 rr            lda (up),y              ; get the dp for that wordlist.
0053D6r 2  85 rr            sta dp
0053D8r 2  C8               iny
0053D9r 2  B1 rr            lda (up),y
0053DBr 2  85 rr            sta dp+1
0053DDr 2               
0053DDr 2  60               rts
0053DEr 2               
0053DEr 2               
0053DEr 2               dp_to_current:
0053DEr 2               ; """Look up which wordlist is current and update its pointer
0053DEr 2               ; with the value in dp. Uses A and Y.
0053DEr 2               ; """
0053DEr 2                   ; Determine which wordlist is current
0053DEr 2  A0 04            ldy #current_offset
0053E0r 2  B1 rr            lda (up),y      ; current is a byte variable
0053E2r 2  0A               asl             ; turn it into an offset (in cells)
0053E3r 2               
0053E3r 2                   ; Get the dictionary pointer for that wordlist.
0053E3r 2  18               clc
0053E4r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
0053E6r 2  A8               tay
0053E7r 2  A5 rr            lda dp
0053E9r 2  91 rr            sta (up),y              ; get the dp for that wordlist.
0053EBr 2  C8               iny
0053ECr 2  A5 rr            lda dp+1
0053EEr 2  91 rr            sta (up),y
0053F0r 2               
0053F0r 2  60               rts
0053F1r 2               
0053F1r 2               interpret:
0053F1r 2               .scope
0053F1r 2               ; """Core routine for the interpreter called by EVALUATE and QUIT.
0053F1r 2               ; Process one line only. Assumes that the address of name is in
0053F1r 2               ; cib and the length of the whole input line string is in ciblen
0053F1r 2               ; """
0053F1r 2                   ; Normally we would use PARSE here with the SPACE character as
0053F1r 2                   ; a parameter (PARSE replaces WORD in modern Forths). However,
0053F1r 2                   ; Gforth's PARSE-NAME makes more sense as it uses spaces as
0053F1r 2                   ; delimiters per default and skips any leading spaces, which
0053F1r 2                   ; PARSE doesn't
0053F1r 2               _loop:
0053F1r 2  20 rr rr         jsr xt_parse_name       ; ( "string" -- addr u )
0053F4r 2               
0053F4r 2                   ; If PARSE-NAME returns 0 (empty line), no characters were left
0053F4r 2                   ; in the line and we need to go get a new line
0053F4r 2  B5 00            lda 0,x
0053F6r 2  15 01            ora 1,x
0053F8r 2  F0 70            beq _line_done
0053FAr 2               
0053FAr 2                   ; Go to FIND-NAME to see if this is a word we know. We have to
0053FAr 2                   ; make a copy of the address in case it isn't a word we know and
0053FAr 2                   ; we have to go see if it is a number
0053FAr 2  20 rr rr         jsr xt_two_dup          ; ( addr u -- addr u addr u )
0053FDr 2  20 rr rr         jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
005400r 2               
005400r 2                   ; A zero signals that we didn't find a word in the Dictionary
005400r 2  B5 00            lda 0,x
005402r 2  15 01            ora 1,x
005404r 2  D0 28            bne _got_name_token
005406r 2               
005406r 2                   ; We didn't get any nt we know of, so let's see if this is
005406r 2                   ; a number.
005406r 2  E8               inx                     ; ( addr u 0 -- addr u )
005407r 2  E8               inx
005408r 2               
005408r 2                   ; If the number conversion doesn't work, NUMBER will do the
005408r 2                   ; complaining for us
005408r 2  20 rr rr         jsr xt_number           ; ( addr u -- u|d )
00540Br 2               
00540Br 2                   ; Otherweise, if we're interpreting, we're done
00540Br 2  A5 rr            lda state
00540Dr 2  F0 E2            beq _loop
00540Fr 2               
00540Fr 2                   ; We're compiling, so there is a bit more work.  Check
00540Fr 2                   ; status bit 5 to see if it's a single or double-cell
00540Fr 2                   ; number.
00540Fr 2  A9 20            lda #$20
005411r 2  24 rr            bit status
005413r 2  F0 0D            beq _single_number
005415r 2               
005415r 2                   ; It's a double cell number.  If we swap the
005415r 2                   ; upper and lower half, we can use the literal_runtime twice
005415r 2                   ; to compile it into the dictionary.
005415r 2  20 rr rr         jsr xt_swap
005418r 2  A0 rr            ldy #>literal_runtime
00541Ar 2  A9 rr            lda #<literal_runtime
00541Cr 2  20 rr rr         jsr cmpl_subroutine
00541Fr 2               
00541Fr 2                   ; compile our number
00541Fr 2  20 rr rr         jsr xt_comma
005422r 2               
005422r 2                   ; Fall into _single_number to process the other half.
005422r 2               _single_number:
005422r 2  A0 rr            ldy #>literal_runtime
005424r 2  A9 rr            lda #<literal_runtime
005426r 2  20 rr rr         jsr cmpl_subroutine
005429r 2               
005429r 2                   ; compile our number
005429r 2  20 rr rr         jsr xt_comma
00542Cr 2               
00542Cr 2                   ; That was so much fun, let's do it again!
00542Cr 2  80 C3            bra _loop
00542Er 2               
00542Er 2               _got_name_token:
00542Er 2                   ; We have a known word's nt TOS. We're going to need its xt
00542Er 2                   ; though, which is four bytes father down.
00542Er 2               
00542Er 2                   ; We arrive here with ( addr u nt ), so we NIP twice
00542Er 2  B5 00            lda 0,x
005430r 2  95 04            sta 4,x
005432r 2  B5 01            lda 1,x
005434r 2  95 05            sta 5,x
005436r 2               
005436r 2  E8               inx
005437r 2  E8               inx
005438r 2  E8               inx
005439r 2  E8               inx                     ; ( nt )
00543Ar 2               
00543Ar 2                   ; Save a version of nt for error handling and compilation stuff
00543Ar 2  B5 00            lda 0,x
00543Cr 2  85 rr            sta tmpbranch
00543Er 2  B5 01            lda 1,x
005440r 2  85 rr            sta tmpbranch+1
005442r 2               
005442r 2  20 rr rr         jsr xt_name_to_int      ; ( nt - xt )
005445r 2               
005445r 2                   ; See if we are in interpret or compile mode, 0 is interpret
005445r 2  A5 rr            lda state
005447r 2  D0 13            bne _compile
005449r 2               
005449r 2                   ; We are interpreting, so EXECUTE the xt that is TOS. First,
005449r 2                   ; though, see if this isn't a compile-only word, which would be
005449r 2                   ; illegal. The status byte is the second one of the header.
005449r 2  A0 01            ldy #1
00544Br 2  B1 rr            lda (tmpbranch),y
00544Dr 2  29 01            and #CO                 ; mask everything but Compile Only bit
00544Fr 2  F0 05            beq _interpret
005451r 2               
005451r 2  A9 02            lda #err_compileonly
005453r 2  4C rr rr         jmp error
005456r 2               
005456r 2               _interpret:
005456r 2                   ; We JSR to EXECUTE instead of calling the xt directly because
005456r 2                   ; the RTS of the word we're executing will bring us back here,
005456r 2                   ; skipping EXECUTE completely during RTS. If we were to execute
005456r 2                   ; xt directly, we have to fool around with the Return Stack
005456r 2                   ; instead, which is actually slightly slower
005456r 2  20 rr rr         jsr xt_execute
005459r 2               
005459r 2                   ; That's quite enough for this word, let's get the next one
005459r 2  4C rr rr         jmp _loop
00545Cr 2               
00545Cr 2               _compile:
00545Cr 2                   ; We're compiling! However, we need to see if this is an
00545Cr 2                   ; IMMEDIATE word, which would mean we execute it right now even
00545Cr 2                   ; during compilation mode. Fortunately, we saved the nt so life
00545Cr 2                   ; is easier. The flags are in the second byte of the header
00545Cr 2  A0 01            ldy #1
00545Er 2  B1 rr            lda (tmpbranch),y
005460r 2  29 04            and #IM                 ; Mask all but IM bit
005462r 2  D0 F2            bne _interpret          ; IMMEDIATE word, execute right now
005464r 2               
005464r 2                   ; Compile the xt into the Dictionary with COMPILE,
005464r 2  20 rr rr         jsr xt_compile_comma
005467r 2  4C rr rr         jmp _loop
00546Ar 2               
00546Ar 2               _line_done:
00546Ar 2                   ; drop stuff from PARSE_NAME
00546Ar 2  E8               inx
00546Br 2  E8               inx
00546Cr 2  E8               inx
00546Dr 2  E8               inx
00546Er 2               
00546Er 2  60               rts
00546Fr 2               .endscope
00546Fr 2               
00546Fr 2               
00546Fr 2               is_printable:
00546Fr 2               .scope
00546Fr 2               ; """Given a character in A, check if it is a printable ASCII
00546Fr 2               ; character in the range from $20 to $7E inclusive. Returns the
00546Fr 2               ; result in the Carry Flag: 0 (clear) is not printable, 1 (set)
00546Fr 2               ; is printable. Keeps A. See
00546Fr 2               ; http://www.obelisk.me.uk/6502/algorithms.html for a
00546Fr 2               ; discussion of various ways to do this
00546Fr 2  C9 20            cmp #AscSP              ; $20
005471r 2  90 08            bcc _done
005473r 2  C9 7F            cmp #'~' + 1             ; $7E
005475r 2  B0 03            bcs _failed
005477r 2               
005477r 2  38               sec
005478r 2  80 01            bra _done
00547Ar 2               _failed:
00547Ar 2  18               clc
00547Br 2               _done:
00547Br 2  60               rts
00547Cr 2               .endscope
00547Cr 2               
00547Cr 2               
00547Cr 2               is_whitespace:
00547Cr 2               .scope
00547Cr 2               ; """Given a character in A, check if it is a whitespace
00547Cr 2               ; character, that is, an ASCII value from 0 to 32 (where
00547Cr 2               ; 32 is SPACE). Returns the result in the Carry Flag:
00547Cr 2               ; 0 (clear) is no, it isn't whitespace, while 1 (set) means
00547Cr 2               ; that it is whitespace. See PARSE and PARSE-NAME for
00547Cr 2               ; a discussion of the uses. Does not change A or Y.
00547Cr 2  C9 00            cmp #00         ; explicit comparison to leave Y untouched
00547Er 2  90 08            bcc _done
005480r 2               
005480r 2  C9 21            cmp #AscSP+1
005482r 2  B0 03            bcs _failed
005484r 2               
005484r 2  38               sec
005485r 2  80 01            bra _done
005487r 2               _failed:
005487r 2  18               clc
005488r 2               _done:
005488r 2  60               rts
005489r 2               .endscope
005489r 2               
005489r 2               
005489r 2               ; Underflow tests. We jump to the label with the number of cells (not: bytes)
005489r 2               ; required for the word. This routine flows into the generic error handling
005489r 2               ; code
005489r 2               underflow_1:
005489r 2               ; """Make sure we have at least one cell on the Data Stack"""
005489r 2  E0 rr            cpx #dsp0-1
00548Br 2  10 10            bpl underflow_error
00548Dr 2  60               rts
00548Er 2               underflow_2:
00548Er 2               ; """Make sure we have at least two cells on the Data Stack"""
00548Er 2  E0 rr            cpx #dsp0-3
005490r 2  10 0B            bpl underflow_error
005492r 2  60               rts
005493r 2               underflow_3:
005493r 2               ; """Make sure we have at least three cells on the Data Stack"""
005493r 2  E0 rr            cpx #dsp0-5
005495r 2  10 06            bpl underflow_error
005497r 2  60               rts
005498r 2               underflow_4:
005498r 2               ; """Make sure we have at least four cells on the Data Stack"""
005498r 2  E0 rr            cpx #dsp0-7
00549Ar 2  10 01            bpl underflow_error
00549Cr 2  60               rts
00549Dr 2               
00549Dr 2               underflow_error:
00549Dr 2                   ; Entry for COLD/ABORT/QUIT
00549Dr 2  A9 09            lda #err_underflow      ; fall through to error
00549Fr 2               
00549Fr 2               error:
00549Fr 2               ; """Given the error number in a, print the associated error string and
00549Fr 2               ; call abort. Uses tmp3.
00549Fr 2               ; """
00549Fr 2  0A               asl
0054A0r 2  A8               tay
0054A1r 2  B9 rr rr         lda error_table,y
0054A4r 2  85 rr            sta tmp3                ; LSB
0054A6r 2  C8               iny
0054A7r 2  B9 rr rr         lda error_table,y
0054AAr 2  85 rr            sta tmp3+1              ; MSB
0054ACr 2               
0054ACr 2  20 rr rr         jsr print_common
0054AFr 2  20 rr rr         jsr xt_cr
0054B2r 2  4C rr rr         jmp xt_abort            ; no jsr, as we clobber return stack
0054B5r 2               
0054B5r 2               
0054B5r 2               ; =====================================================================
0054B5r 2               ; PRINTING ROUTINES
0054B5r 2               
0054B5r 2               ; We distinguish two types of print calls, both of which take the string number
0054B5r 2               ; (see strings.asm) in A:
0054B5r 2               
0054B5r 2               ;       print_string       - with a line feed
0054B5r 2               ;       print_string_no_lf - without a line feed
0054B5r 2               
0054B5r 2               ; In addition, print_common provides a lower-level alternative for error
0054B5r 2               ; handling and anything else that provides the address of the
0054B5r 2               ; zero-terminated string directly in tmp3. All of those routines assume that
0054B5r 2               ; printing should be more concerned with size than speed, because anything to
0054B5r 2               ; do with humans reading text is going to be slow.
0054B5r 2               
0054B5r 2               print_string_no_lf:
0054B5r 2               ; """Given the number of a zero-terminated string in A, print it to the
0054B5r 2               ; current output without adding a LF. Uses Y and tmp3 by falling
0054B5r 2               ; through to print_common
0054B5r 2               ; """
0054B5r 2                   ; Get the entry from the string table
0054B5r 2  0A               asl
0054B6r 2  A8               tay
0054B7r 2  B9 rr rr         lda string_table,y
0054BAr 2  85 rr            sta tmp3                ; LSB
0054BCr 2  C8               iny
0054BDr 2  B9 rr rr         lda string_table,y
0054C0r 2  85 rr            sta tmp3+1              ; MSB
0054C2r 2               
0054C2r 2                   ; fall through to print_common
0054C2r 2               print_common:
0054C2r 2               ; """Common print routine used by both the print functions and
0054C2r 2               ; the error printing routine. Assumes string address is in tmp3. Uses
0054C2r 2               ; Y.
0054C2r 2               ; """
0054C2r 2               .scope
0054C2r 2  A0 00            ldy #0
0054C4r 2               _loop:
0054C4r 2  B1 rr            lda (tmp3),y
0054C6r 2  F0 06            beq _done               ; strings are zero-terminated
0054C8r 2               
0054C8r 2  20 rr rr         jsr emit_a              ; allows vectoring via output
0054CBr 2  C8               iny
0054CCr 2  80 F6            bra _loop
0054CEr 2               _done:
0054CEr 2  60               rts
0054CFr 2               .endscope
0054CFr 2               
0054CFr 2               print_string:
0054CFr 2               ; """Print a zero-terminated string to the console/screen, adding a LF.
0054CFr 2               ; We do not check to see if the index is out of range. Uses tmp3.
0054CFr 2               ; """
0054CFr 2  20 rr rr         jsr print_string_no_lf
0054D2r 2  4C rr rr         jmp xt_cr               ; JSR/RTS because never compiled
0054D5r 2               
0054D5r 2               
0054D5r 2               print_u:
0054D5r 2               ; """basic printing routine used by higher-level constructs,
0054D5r 2               ; the equivalent of the forth word  0 <# #s #> type  which is
0054D5r 2               ; basically u. without the space at the end. used for various
0054D5r 2               ; outputs
0054D5r 2               ; """
0054D5r 2  20 rr rr         jsr xt_zero                     ; 0
0054D8r 2  20 rr rr         jsr xt_less_number_sign         ; <#
0054DBr 2  20 rr rr         jsr xt_number_sign_s            ; #S
0054DEr 2  20 rr rr         jsr xt_number_sign_greater      ; #>
0054E1r 2  4C rr rr         jmp xt_type                     ; JSR/RTS because never compiled
0054E4r 2               
0054E4r 2               ; END
0054E4r 2               
0054E4r 1               
0054E4r 1               .segment "DATA"
0054E4r 1               
0054E4r 1               .ifdef TALI_OPTIONAL_ASSEMBLER
0054E4r 1               .include "../../assembler.s"
0054E4r 2               ; Assembler for Tali Forth 2
0054E4r 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0054E4r 2               ; First version: 07. Nov 2014 (as tasm65c02)
0054E4r 2               ; This version: 03. Jan 2019
0054E4r 2               
0054E4r 2               ; This is the built-in assembler for Tali Forth 2. Once the assembler wordlist
0054E4r 2               ; is included with
0054E4r 2               
0054E4r 2               ;       assembler-wordlist >order
0054E4r 2               
0054E4r 2               ; the opcodes are available as normal Forth words. The format is Simpler
0054E4r 2               ; Assembler Notation (SAN) which separates the opcode completely from the
0054E4r 2               ; operand (see https://github.com/scotws/SAN). In this case, the operand is
0054E4r 2               ; entered before the opcode in the postfix Forth notation (for example, "2000
0054E4r 2               ; lda.#"). See the assembler documenation in the manual for more detail.
0054E4r 2               
0054E4r 2               ; The code here was originally used in A Typist's Assembler for the 65c02
0054E4r 2               ; (tasm65c02), see https://github.com/scotws/tasm65c02 for the standalone
0054E4r 2               ; version. Tasm65c02 is in the public domain.
0054E4r 2               
0054E4r 2               ; This code makes use of the opcode tables stored as part of the disassembler.
0054E4r 2               
0054E4r 2               ; ==========================================================
0054E4r 2               ; MNEMONICS
0054E4r 2               
0054E4r 2               ; The assembler instructions are realized as individual Forth words with
0054E4r 2               ; entries in the assembler wordlist (see header.asm). We pass the opcode in A.
0054E4r 2               
0054E4r 2               ; An alterantive method would have been along the lines of
0054E4r 2               
0054E4r 2               ;               jsr asm_common
0054E4r 2               ;               .byte $EA
0054E4r 2               
0054E4r 2               ; where the asm_common then uses the address on the Return Stack to pick up the
0054E4r 2               ; opcode and the length. Though this uses fewer resources, the current version
0054E4r 2               ; makes up for this by simplifying the code of asm_common.
0054E4r 2               
0054E4r 2               ; The routines are organized alphabetically by SAN mnemonic, not by opcode. The
0054E4r 2               ; SAN and traditional mnemonics are listed after the opcode load instruction.
0054E4r 2               ; This list was generated by a Python script in the tools folder, see there for
0054E4r 2               ; more detail.
0054E4r 2               
0054E4r 2               assembler:              ; used to calculate size of assembler code
0054E4r 2               .ifdef TALI_OPTIONAL_ASSEMBLER
0054E4r 2               xt_asm_adc_h:   ; adc.# \ ADC #nn
0054E4r 2  A9 69                        lda #$69
0054E6r 2  4C rr rr                     jmp asm_common
0054E9r 2               z_asm_adc_h:
0054E9r 2               
0054E9r 2               xt_asm_adc_x:   ; adc.x \ ADC nnnn,X
0054E9r 2  A9 7D                        lda #$7D
0054EBr 2  4C rr rr                     jmp asm_common
0054EEr 2               z_asm_adc_x:
0054EEr 2               
0054EEr 2               xt_asm_adc_y:   ; adc.y \ ADC nnnn,Y
0054EEr 2  A9 79                        lda #$79
0054F0r 2  4C rr rr                     jmp asm_common
0054F3r 2               z_asm_adc_y:
0054F3r 2               
0054F3r 2               xt_asm_adc_z:   ; adc.z \ ADC nn
0054F3r 2  A9 65                        lda #$65
0054F5r 2  4C rr rr                     jmp asm_common
0054F8r 2               z_asm_adc_z:
0054F8r 2               
0054F8r 2               xt_asm_adc_zi:  ; adc.zi \ ADC (nn)
0054F8r 2  A9 72                        lda #$72
0054FAr 2  4C rr rr                     jmp asm_common
0054FDr 2               z_asm_adc_zi:
0054FDr 2               
0054FDr 2               xt_asm_adc_ziy: ; adc.ziy \ ADC (nn),Y
0054FDr 2  A9 71                        lda #$71
0054FFr 2  4C rr rr                     jmp asm_common
005502r 2               z_asm_adc_ziy:
005502r 2               
005502r 2               xt_asm_adc_zx:  ; adc.zx \ ADC nn,X
005502r 2  A9 75                        lda #$75
005504r 2  4C rr rr                     jmp asm_common
005507r 2               z_asm_adc_zx:
005507r 2               
005507r 2               xt_asm_adc_zxi: ; adc.zxi \ ADC (nn,X)
005507r 2  A9 61                        lda #$61
005509r 2  4C rr rr                     jmp asm_common
00550Cr 2               z_asm_adc_zxi:
00550Cr 2               
00550Cr 2               xt_asm_and:     ; and. \ AND nnnn
00550Cr 2  A9 2D                        lda #$2D
00550Er 2  4C rr rr                     jmp asm_common
005511r 2               z_asm_and:
005511r 2               
005511r 2               xt_asm_and_h:   ; and.# \ AND #nn
005511r 2  A9 29                        lda #$29
005513r 2  4C rr rr                     jmp asm_common
005516r 2               z_asm_and_h:
005516r 2               
005516r 2               xt_asm_and_x:   ; and.x \ AND nnnn,X
005516r 2  A9 3D                        lda #$3D
005518r 2  4C rr rr                     jmp asm_common
00551Br 2               z_asm_and_x:
00551Br 2               
00551Br 2               xt_asm_and_y:   ; and.y \ AND nnnn,Y
00551Br 2  A9 39                        lda #$39
00551Dr 2  4C rr rr                     jmp asm_common
005520r 2               z_asm_and_y:
005520r 2               
005520r 2               xt_asm_and_z:   ; and.z \ AND nn
005520r 2  A9 25                        lda #$25
005522r 2  4C rr rr                     jmp asm_common
005525r 2               z_asm_and_z:
005525r 2               
005525r 2               xt_asm_and_zi:  ; and.zi \ AND (nn)
005525r 2  A9 32                        lda #$32
005527r 2  4C rr rr                     jmp asm_common
00552Ar 2               z_asm_and_zi:
00552Ar 2               
00552Ar 2               xt_asm_and_ziy: ; and.ziy \ AND (nn),Y
00552Ar 2  A9 31                        lda #$31
00552Cr 2  4C rr rr                     jmp asm_common
00552Fr 2               z_asm_and_ziy:
00552Fr 2               
00552Fr 2               xt_asm_and_zx:  ; and.zx \ AND nn,X
00552Fr 2  A9 35                        lda #$35
005531r 2  4C rr rr                     jmp asm_common
005534r 2               z_asm_and_zx:
005534r 2               
005534r 2               xt_asm_and_zxi: ; and.zxi \ AND (nn,X)
005534r 2  A9 21                        lda #$21
005536r 2  4C rr rr                     jmp asm_common
005539r 2               z_asm_and_zxi:
005539r 2               
005539r 2               xt_asm_asl:     ; asl \ ASL nnnn
005539r 2  A9 0E                        lda #$0E
00553Br 2  4C rr rr                     jmp asm_common
00553Er 2               z_asm_asl:
00553Er 2               
00553Er 2               xt_asm_asl_a:   ; asl.a \ ASL
00553Er 2  A9 0A                        lda #$0A
005540r 2  4C rr rr                     jmp asm_common
005543r 2               z_asm_asl_a:
005543r 2               
005543r 2               xt_asm_asl_x:   ; asl.x \ ASL nnnn,X
005543r 2  A9 1E                        lda #$1E
005545r 2  4C rr rr                     jmp asm_common
005548r 2               z_asm_asl_x:
005548r 2               
005548r 2               xt_asm_asl_z:   ; asl.z \ ASL nn
005548r 2  A9 06                        lda #$06
00554Ar 2  4C rr rr                     jmp asm_common
00554Dr 2               z_asm_asl_z:
00554Dr 2               
00554Dr 2               xt_asm_asl_zx:  ; asl.zx \ ASL nn,X
00554Dr 2  A9 16                        lda #$16
00554Fr 2  4C rr rr                     jmp asm_common
005552r 2               z_asm_asl_zx:
005552r 2               
005552r 2               xt_asm_bcc:     ; bcc \ BCC
005552r 2  A9 90                        lda #$90
005554r 2  4C rr rr                     jmp asm_common
005557r 2               z_asm_bcc:
005557r 2               
005557r 2               xt_asm_bcs:     ; bcs \ BCS
005557r 2  A9 B0                        lda #$B0
005559r 2  A0 02                        ldy #2
00555Br 2  4C rr rr                     jmp asm_common
00555Er 2               z_asm_bcs:
00555Er 2               
00555Er 2               xt_asm_beq:     ; beq \ BEQ
00555Er 2  A9 F0                        lda #$F0
005560r 2  4C rr rr                     jmp asm_common
005563r 2               z_asm_beq:
005563r 2               
005563r 2               xt_asm_bit:     ; bit \ BIT nnnn
005563r 2  A9 2C                        lda #$2C
005565r 2  4C rr rr                     jmp asm_common
005568r 2               z_asm_bit:
005568r 2               
005568r 2               xt_asm_bit_h:   ; bit.# \ BIT #nn
005568r 2  A9 89                        lda #$89
00556Ar 2  4C rr rr                     jmp asm_common
00556Dr 2               z_asm_bit_h:
00556Dr 2               
00556Dr 2               xt_asm_bit_x:   ; bit.x \ BIT nnnn,X
00556Dr 2  A9 3C                        lda #$3C
00556Fr 2  4C rr rr                     jmp asm_common
005572r 2               z_asm_bit_x:
005572r 2               
005572r 2               xt_asm_bit_z:   ; bit.z \ BIT nn
005572r 2  A9 24                        lda #$24
005574r 2  4C rr rr                     jmp asm_common
005577r 2               z_asm_bit_z:
005577r 2               
005577r 2               xt_asm_bit_zx:  ; bit.zx \ BIT nn,X
005577r 2  A9 34                        lda #$34
005579r 2  4C rr rr                     jmp asm_common
00557Cr 2               z_asm_bit_zx:
00557Cr 2               
00557Cr 2               xt_asm_bmi:     ; bmi \ BMI
00557Cr 2  A9 30                        lda #$30
00557Er 2  4C rr rr                     jmp asm_common
005581r 2               z_asm_bmi:
005581r 2               
005581r 2               xt_asm_bne:     ; bne \ BNE
005581r 2  A9 D0                        lda #$D0
005583r 2  4C rr rr                     jmp asm_common
005586r 2               z_asm_bne:
005586r 2               
005586r 2               xt_asm_bpl:     ; bpl \ BPL
005586r 2  A9 10                        lda #$10
005588r 2  4C rr rr                     jmp asm_common
00558Br 2               z_asm_bpl:
00558Br 2               
00558Br 2               xt_asm_bra:     ; bra \ BRA
00558Br 2  A9 80                        lda #$80
00558Dr 2  4C rr rr                     jmp asm_common
005590r 2               z_asm_bra:
005590r 2               
005590r 2               xt_asm_brk:     ; brk \ BRK
005590r 2  A9 00                        lda #$00
005592r 2  4C rr rr                     jmp asm_common
005595r 2               z_asm_brk:
005595r 2               
005595r 2               xt_asm_bvc:     ; bvc \ BVC
005595r 2  A9 50                        lda #$50
005597r 2  4C rr rr                     jmp asm_common
00559Ar 2               z_asm_bvc:
00559Ar 2               
00559Ar 2               xt_asm_bvs:     ; bvs \ BVS
00559Ar 2  A9 70                        lda #$70
00559Cr 2  4C rr rr                     jmp asm_common
00559Fr 2               z_asm_bvs:
00559Fr 2               
00559Fr 2               xt_asm_clc:     ; clc \ CLC
00559Fr 2  A9 18                        lda #$18
0055A1r 2  4C rr rr                     jmp asm_common
0055A4r 2               z_asm_clc:
0055A4r 2               
0055A4r 2               xt_asm_cld:     ; cld \ CLD
0055A4r 2  A9 D8                        lda #$D8
0055A6r 2  4C rr rr                     jmp asm_common
0055A9r 2               z_asm_cld:
0055A9r 2               
0055A9r 2               xt_asm_cli:     ; cli \ CLI
0055A9r 2  A9 58                        lda #$58
0055ABr 2  4C rr rr                     jmp asm_common
0055AEr 2               z_asm_cli:
0055AEr 2               
0055AEr 2               xt_asm_clv:     ; clv \ CLV
0055AEr 2  A9 B8                        lda #$B8
0055B0r 2  4C rr rr                     jmp asm_common
0055B3r 2               z_asm_clv:
0055B3r 2               
0055B3r 2               xt_asm_cmp:     ; cmp \ CMP nnnn
0055B3r 2  A9 CD                        lda #$CD
0055B5r 2  4C rr rr                     jmp asm_common
0055B8r 2               z_asm_cmp:
0055B8r 2               
0055B8r 2               xt_asm_cmp_h:   ; cmp.# \ CMP #nn
0055B8r 2  A9 C9                        lda #$C9
0055BAr 2  4C rr rr                     jmp asm_common
0055BDr 2               z_asm_cmp_h:
0055BDr 2               
0055BDr 2               xt_asm_cmp_x:   ; cmp.x \ CMP nnnn,X
0055BDr 2  A9 DD                        lda #$DD
0055BFr 2  4C rr rr                     jmp asm_common
0055C2r 2               z_asm_cmp_x:
0055C2r 2               
0055C2r 2               xt_asm_cmp_y:   ; cmp.y \ CMP nnnn,Y
0055C2r 2  A9 D9                        lda #$D9
0055C4r 2  4C rr rr                     jmp asm_common
0055C7r 2               z_asm_cmp_y:
0055C7r 2               
0055C7r 2               xt_asm_cmp_z:   ; cmp.z \ CMP nn
0055C7r 2  A9 C5                        lda #$C5
0055C9r 2  4C rr rr                     jmp asm_common
0055CCr 2               z_asm_cmp_z:
0055CCr 2               
0055CCr 2               xt_asm_cmp_zi:  ; cmp.zi \ CMP (nn)
0055CCr 2  A9 D2                        lda #$D2
0055CEr 2  4C rr rr                     jmp asm_common
0055D1r 2               z_asm_cmp_zi:
0055D1r 2               
0055D1r 2               xt_asm_cmp_ziy: ; cmp.ziy \ CMP (nn),Y
0055D1r 2  A9 D1                        lda #$D1
0055D3r 2  4C rr rr                     jmp asm_common
0055D6r 2               z_asm_cmp_ziy:
0055D6r 2               
0055D6r 2               xt_asm_cmp_zx:  ; cmp.zx \ CMP nn,X
0055D6r 2  A9 D5                        lda #$D5
0055D8r 2  4C rr rr                     jmp asm_common
0055DBr 2               z_asm_cmp_zx:
0055DBr 2               
0055DBr 2               xt_asm_cmp_zxi: ; cmp.zxi \ CMP (nn,X)
0055DBr 2  A9 C1                        lda #$C1
0055DDr 2  4C rr rr                     jmp asm_common
0055E0r 2               z_asm_cmp_zxi:
0055E0r 2               
0055E0r 2               xt_asm_cpx:     ; cpx \ CPX nnnn
0055E0r 2  A9 EC                        lda #$EC
0055E2r 2  4C rr rr                     jmp asm_common
0055E5r 2               z_asm_cpx:
0055E5r 2               
0055E5r 2               xt_asm_cpx_h:   ; cpx.# \ CPX #nn
0055E5r 2  A9 E0                        lda #$E0
0055E7r 2  4C rr rr                     jmp asm_common
0055EAr 2               z_asm_cpx_h:
0055EAr 2               
0055EAr 2               xt_asm_cpx_z:   ; cpx.z \ CPX nn
0055EAr 2  A9 E4                        lda #$E4
0055ECr 2  4C rr rr                     jmp asm_common
0055EFr 2               z_asm_cpx_z:
0055EFr 2               
0055EFr 2               xt_asm_cpy:     ; cpy \ CPY
0055EFr 2  A9 CC                        lda #$CC
0055F1r 2  A0 03                        ldy #3
0055F3r 2  4C rr rr                     jmp asm_common
0055F6r 2               z_asm_cpy:
0055F6r 2               
0055F6r 2               xt_asm_cpy_h:   ; cpy.# \ CPY #nn
0055F6r 2  A9 C0                        lda #$C0
0055F8r 2  4C rr rr                     jmp asm_common
0055FBr 2               z_asm_cpy_h:
0055FBr 2               
0055FBr 2               xt_asm_cpy_z:   ; cpy.z \ CPY nn
0055FBr 2  A9 C4                        lda #$C4
0055FDr 2  4C rr rr                     jmp asm_common
005600r 2               z_asm_cpy_z:
005600r 2               
005600r 2               xt_asm_dec:     ; dec \ DEC nnnn
005600r 2  A9 CE                        lda #$CE
005602r 2  4C rr rr                     jmp asm_common
005605r 2               z_asm_dec:
005605r 2               
005605r 2               xt_asm_dec_a:   ; dec.a \ DEC
005605r 2  A9 3A                        lda #$3A
005607r 2  4C rr rr                     jmp asm_common
00560Ar 2               z_asm_dec_a:
00560Ar 2               
00560Ar 2               xt_asm_dec_x:   ; dec.x \ DEC nnnn,X
00560Ar 2  A9 DE                        lda #$DE
00560Cr 2  4C rr rr                     jmp asm_common
00560Fr 2               z_asm_dec_x:
00560Fr 2               
00560Fr 2               xt_asm_dec_z:   ; dec.z \ DEC nn
00560Fr 2  A9 C6                        lda #$C6
005611r 2  4C rr rr                     jmp asm_common
005614r 2               z_asm_dec_z:
005614r 2               
005614r 2               xt_asm_dec_zx:  ; dec.zx \ DEC nn,X
005614r 2  A9 D6                        lda #$D6
005616r 2  4C rr rr                     jmp asm_common
005619r 2               z_asm_dec_zx:
005619r 2               
005619r 2               xt_asm_dex:     ; dex \ DEX
005619r 2  A9 CA                        lda #$CA
00561Br 2  4C rr rr                     jmp asm_common
00561Er 2               z_asm_dex:
00561Er 2               
00561Er 2               xt_asm_dey:     ; dey \ DEY
00561Er 2  A9 88                        lda #$88
005620r 2  4C rr rr                     jmp asm_common
005623r 2               z_asm_dey:
005623r 2               
005623r 2               xt_asm_eor:     ; eor \ EOR nnnn
005623r 2  A9 4D                        lda #$4D
005625r 2  4C rr rr                     jmp asm_common
005628r 2               z_asm_eor:
005628r 2               
005628r 2               xt_asm_eor_h:   ; eor.# \ EOR #nn
005628r 2  A9 49                        lda #$49
00562Ar 2  4C rr rr                     jmp asm_common
00562Dr 2               z_asm_eor_h:
00562Dr 2               
00562Dr 2               xt_asm_eor_x:   ; eor.x \ EOR nnnn,X
00562Dr 2  A9 5D                        lda #$5D
00562Fr 2  4C rr rr                     jmp asm_common
005632r 2               z_asm_eor_x:
005632r 2               
005632r 2               xt_asm_eor_y:   ; eor.y \ EOR nnnn,Y
005632r 2  A9 59                        lda #$59
005634r 2  4C rr rr                     jmp asm_common
005637r 2               z_asm_eor_y:
005637r 2               
005637r 2               xt_asm_eor_z:   ; eor.z \ EOR nn
005637r 2  A9 45                        lda #$45
005639r 2  4C rr rr                     jmp asm_common
00563Cr 2               z_asm_eor_z:
00563Cr 2               
00563Cr 2               xt_asm_eor_zi:  ; eor.zi \ EOR (nn)
00563Cr 2  A9 52                        lda #$52
00563Er 2  4C rr rr                     jmp asm_common
005641r 2               z_asm_eor_zi:
005641r 2               
005641r 2               xt_asm_eor_ziy: ; eor.ziy \ EOR (nn),Y
005641r 2  A9 51                        lda #$51
005643r 2  4C rr rr                     jmp asm_common
005646r 2               z_asm_eor_ziy:
005646r 2               
005646r 2               xt_asm_eor_zx:  ; eor.zx \ EOR nn,X
005646r 2  A9 55                        lda #$55
005648r 2  4C rr rr                     jmp asm_common
00564Br 2               z_asm_eor_zx:
00564Br 2               
00564Br 2               xt_asm_eor_zxi: ; eor.zxi \ EOR (nn,X)
00564Br 2  A9 41                        lda #$41
00564Dr 2  4C rr rr                     jmp asm_common
005650r 2               z_asm_eor_zxi:
005650r 2               
005650r 2               xt_asm_inc:     ; inc \ INC nnnn
005650r 2  A9 EE                        lda #$EE
005652r 2  4C rr rr                     jmp asm_common
005655r 2               z_asm_inc:
005655r 2               
005655r 2               xt_asm_inc_a:   ; inc.a \ INC
005655r 2  A9 1A                        lda #$1A
005657r 2  4C rr rr                     jmp asm_common
00565Ar 2               z_asm_inc_a:
00565Ar 2               
00565Ar 2               xt_asm_inc_x:   ; inc.x \ INC nnnn,X
00565Ar 2  A9 FE                        lda #$FE
00565Cr 2  4C rr rr                     jmp asm_common
00565Fr 2               z_asm_inc_x:
00565Fr 2               
00565Fr 2               xt_asm_inc_z:   ; inc.z \ INC nn
00565Fr 2  A9 E6                        lda #$E6
005661r 2  4C rr rr                     jmp asm_common
005664r 2               z_asm_inc_z:
005664r 2               
005664r 2               xt_asm_inc_zx:  ; inc.zx \ INC nn,X
005664r 2  A9 F6                        lda #$F6
005666r 2  4C rr rr                     jmp asm_common
005669r 2               z_asm_inc_zx:
005669r 2               
005669r 2               xt_asm_inx:     ; inx \ INX
005669r 2  A9 E8                        lda #$E8
00566Br 2  4C rr rr                     jmp asm_common
00566Er 2               z_asm_inx:
00566Er 2               
00566Er 2               xt_asm_iny:     ; iny \ INY
00566Er 2  A9 C8                        lda #$C8
005670r 2  4C rr rr                     jmp asm_common
005673r 2               z_asm_iny:
005673r 2               
005673r 2               xt_asm_jmp:     ; jmp \ JMP nnnn
005673r 2  A9 4C                        lda #$4C
005675r 2  4C rr rr                     jmp asm_common
005678r 2               z_asm_jmp:
005678r 2               
005678r 2               xt_asm_jmp_i:   ; jmp.i \ JMP (nnnn)
005678r 2  A9 6C                        lda #$6C
00567Ar 2  4C rr rr                     jmp asm_common
00567Dr 2               z_asm_jmp_i:
00567Dr 2               
00567Dr 2               xt_asm_jmp_xi:  ; jmp.xi \ JMP (nnnn,X)
00567Dr 2  A9 7C                        lda #$7C
00567Fr 2  4C rr rr                     jmp asm_common
005682r 2               z_asm_jmp_xi:
005682r 2               
005682r 2               xt_asm_jsr:     ; jsr \ JSR nnnn
005682r 2  A9 20                        lda #$20
005684r 2  4C rr rr                     jmp asm_common
005687r 2               z_asm_jsr:
005687r 2               
005687r 2               xt_asm_lda:     ; lda \ LDA nnnn
005687r 2  A9 AD                        lda #$AD
005689r 2  4C rr rr                     jmp asm_common
00568Cr 2               z_asm_lda:
00568Cr 2               
00568Cr 2               xt_asm_lda_h:   ; lda.# \ LDA #nn
00568Cr 2  A9 A9                        lda #$A9
00568Er 2  4C rr rr                     jmp asm_common
005691r 2               z_asm_lda_h:
005691r 2               
005691r 2               xt_asm_lda_x:   ; lda.x \ LDA nnnn,X
005691r 2  A9 BD                        lda #$BD
005693r 2  4C rr rr                     jmp asm_common
005696r 2               z_asm_lda_x:
005696r 2               
005696r 2               xt_asm_lda_y:   ; lda.y \ LDA nnnn,Y
005696r 2  A9 B9                        lda #$B9
005698r 2  4C rr rr                     jmp asm_common
00569Br 2               z_asm_lda_y:
00569Br 2               
00569Br 2               xt_asm_lda_z:   ; lda.z \ LDA nn
00569Br 2  A9 A5                        lda #$A5
00569Dr 2  4C rr rr                     jmp asm_common
0056A0r 2               z_asm_lda_z:
0056A0r 2               
0056A0r 2               xt_asm_lda_zi:  ; lda.zi \ LDA (nn)
0056A0r 2  A9 B2                        lda #$B2
0056A2r 2  4C rr rr                     jmp asm_common
0056A5r 2               z_asm_lda_zi:
0056A5r 2               
0056A5r 2               xt_asm_lda_ziy: ; lda.ziy \ LDA (nn),Y
0056A5r 2  A9 B1                        lda #$B1
0056A7r 2  4C rr rr                     jmp asm_common
0056AAr 2               z_asm_lda_ziy:
0056AAr 2               
0056AAr 2               xt_asm_lda_zx:  ; lda.zx \ LDA nn,X
0056AAr 2  A9 B5                        lda #$B5
0056ACr 2  4C rr rr                     jmp asm_common
0056AFr 2               z_asm_lda_zx:
0056AFr 2               
0056AFr 2               xt_asm_lda_zxi: ; lda.zxi \ LDA (nn,X)
0056AFr 2  A9 A1                        lda #$A1
0056B1r 2  4C rr rr                     jmp asm_common
0056B4r 2               z_asm_lda_zxi:
0056B4r 2               
0056B4r 2               xt_asm_ldx:     ; ldx \ LDX nnnn
0056B4r 2  A9 AE                        lda #$AE
0056B6r 2  4C rr rr                     jmp asm_common
0056B9r 2               z_asm_ldx:
0056B9r 2               
0056B9r 2               xt_asm_ldx_h:   ; ldx.# \ LDX #nn
0056B9r 2  A9 A2                        lda #$A2
0056BBr 2  4C rr rr                     jmp asm_common
0056BEr 2               z_asm_ldx_h:
0056BEr 2               
0056BEr 2               xt_asm_ldx_y:   ; ldx.y \ LDX nnnn,Y
0056BEr 2  A9 BE                        lda #$BE
0056C0r 2  4C rr rr                     jmp asm_common
0056C3r 2               z_asm_ldx_y:
0056C3r 2               
0056C3r 2               xt_asm_ldx_z:   ; ldx.z \ LDX nn
0056C3r 2  A9 A6                        lda #$A6
0056C5r 2  4C rr rr                     jmp asm_common
0056C8r 2               z_asm_ldx_z:
0056C8r 2               
0056C8r 2               xt_asm_ldx_zy:  ; ldx.zy \ LDX nn,Y
0056C8r 2  A9 B6                        lda #$B6
0056CAr 2  4C rr rr                     jmp asm_common
0056CDr 2               z_asm_ldx_zy:
0056CDr 2               
0056CDr 2               xt_asm_ldy:     ; ldy \ LDY nnnn
0056CDr 2  A9 AC                        lda #$AC
0056CFr 2  4C rr rr                     jmp asm_common
0056D2r 2               z_asm_ldy:
0056D2r 2               
0056D2r 2               xt_asm_ldy_h:   ; ldy.# \ LDY #nn
0056D2r 2  A9 A0                        lda #$A0
0056D4r 2  4C rr rr                     jmp asm_common
0056D7r 2               z_asm_ldy_h:
0056D7r 2               
0056D7r 2               xt_asm_ldy_x:   ; ldy.x \ LDY nnnn,X
0056D7r 2  A9 BC                        lda #$BC
0056D9r 2  4C rr rr                     jmp asm_common
0056DCr 2               z_asm_ldy_x:
0056DCr 2               
0056DCr 2               xt_asm_ldy_z:   ; ldy.z \ LDY nn
0056DCr 2  A9 A4                        lda #$A4
0056DEr 2  4C rr rr                     jmp asm_common
0056E1r 2               z_asm_ldy_z:
0056E1r 2               
0056E1r 2               xt_asm_ldy_zx:  ; ldy.zx \ LDY nn,X
0056E1r 2  A9 B4                        lda #$B4
0056E3r 2  4C rr rr                     jmp asm_common
0056E6r 2               z_asm_ldy_zx:
0056E6r 2               
0056E6r 2               xt_asm_lsr:     ; lsr \ LSR nnnn
0056E6r 2  A9 4E                        lda #$4E
0056E8r 2  4C rr rr                     jmp asm_common
0056EBr 2               z_asm_lsr:
0056EBr 2               
0056EBr 2               xt_asm_lsr_a:   ; lsr.a \ LSR
0056EBr 2  A9 4A                        lda #$4A
0056EDr 2  4C rr rr                     jmp asm_common
0056F0r 2               z_asm_lsr_a:
0056F0r 2               
0056F0r 2               xt_asm_lsr_x:   ; lsr.x \ LSR nnnn,X
0056F0r 2  A9 5E                        lda #$5E
0056F2r 2  4C rr rr                     jmp asm_common
0056F5r 2               z_asm_lsr_x:
0056F5r 2               
0056F5r 2               xt_asm_lsr_z:   ; lsr.z \ LSR nn
0056F5r 2  A9 46                        lda #$46
0056F7r 2  4C rr rr                     jmp asm_common
0056FAr 2               z_asm_lsr_z:
0056FAr 2               
0056FAr 2               xt_asm_lsr_zx:  ; lsr.zx \ LSR nn,X
0056FAr 2  A9 56                        lda #$56
0056FCr 2  4C rr rr                     jmp asm_common
0056FFr 2               z_asm_lsr_zx:
0056FFr 2               
0056FFr 2               xt_asm_nop:     ; nop \ NOP
0056FFr 2  A9 EA                        lda #$EA
005701r 2  4C rr rr                     jmp asm_common
005704r 2               z_asm_nop:
005704r 2               
005704r 2               xt_asm_ora:     ; ora \ ORA nnnn
005704r 2  A9 0D                        lda #$0D
005706r 2  4C rr rr                     jmp asm_common
005709r 2               z_asm_ora:
005709r 2               
005709r 2               xt_asm_ora_h:   ; ora.# \ ORA #nn
005709r 2  A9 09                        lda #$09
00570Br 2  4C rr rr                     jmp asm_common
00570Er 2               z_asm_ora_h:
00570Er 2               
00570Er 2               xt_asm_ora_x:   ; ora.x \ ORA nnnn,X
00570Er 2  A9 1D                        lda #$1D
005710r 2  4C rr rr                     jmp asm_common
005713r 2               z_asm_ora_x:
005713r 2               
005713r 2               xt_asm_ora_y:   ; ora.y \ ORA nnnn,Y
005713r 2  A9 19                        lda #$19
005715r 2  4C rr rr                     jmp asm_common
005718r 2               z_asm_ora_y:
005718r 2               
005718r 2               xt_asm_ora_z:   ; ora.z \ ORA nn
005718r 2  A9 05                        lda #$05
00571Ar 2  4C rr rr                     jmp asm_common
00571Dr 2               z_asm_ora_z:
00571Dr 2               
00571Dr 2               xt_asm_ora_zi:  ; ora.zi \ ORA.ZI
00571Dr 2  A9 12                        lda #$12
00571Fr 2  A0 02                        ldy #2
005721r 2  4C rr rr                     jmp asm_common
005724r 2               z_asm_ora_zi:
005724r 2               
005724r 2               xt_asm_ora_ziy: ; ora.ziy \ ORA (nn),Y
005724r 2  A9 11                        lda #$11
005726r 2  4C rr rr                     jmp asm_common
005729r 2               z_asm_ora_ziy:
005729r 2               
005729r 2               xt_asm_ora_zx:  ; ora.zx \ ORA nn,X
005729r 2  A9 15                        lda #$15
00572Br 2  4C rr rr                     jmp asm_common
00572Er 2               z_asm_ora_zx:
00572Er 2               
00572Er 2               xt_asm_ora_zxi: ; ora.zxi \ ORA (nn,X)
00572Er 2  A9 01                        lda #$01
005730r 2  4C rr rr                     jmp asm_common
005733r 2               z_asm_ora_zxi:
005733r 2               
005733r 2               xt_asm_pha:     ; pha \ PHA
005733r 2  A9 48                        lda #$48
005735r 2  4C rr rr                     jmp asm_common
005738r 2               z_asm_pha:
005738r 2               
005738r 2               xt_asm_php:     ; php \ PHP
005738r 2  A9 08                        lda #$08
00573Ar 2  4C rr rr                     jmp asm_common
00573Dr 2               z_asm_php:
00573Dr 2               
00573Dr 2               xt_asm_phx:     ; phx \ PHX
00573Dr 2  A9 DA                        lda #$DA
00573Fr 2  4C rr rr                     jmp asm_common
005742r 2               z_asm_phx:
005742r 2               
005742r 2               xt_asm_phy:     ; phy \ PHY
005742r 2  A9 5A                        lda #$5A
005744r 2  4C rr rr                     jmp asm_common
005747r 2               z_asm_phy:
005747r 2               
005747r 2               xt_asm_pla:     ; pla \ PLA
005747r 2  A9 68                        lda #$68
005749r 2  4C rr rr                     jmp asm_common
00574Cr 2               z_asm_pla:
00574Cr 2               
00574Cr 2               xt_asm_plp:     ; plp \ PLP
00574Cr 2  A9 28                        lda #$28
00574Er 2  4C rr rr                     jmp asm_common
005751r 2               z_asm_plp:
005751r 2               
005751r 2               xt_asm_plx:     ; plx \ PLX
005751r 2  A9 FA                        lda #$FA
005753r 2  4C rr rr                     jmp asm_common
005756r 2               z_asm_plx:
005756r 2               
005756r 2               xt_asm_ply:     ; ply \ PLY
005756r 2  A9 7A                        lda #$7A
005758r 2  4C rr rr                     jmp asm_common
00575Br 2               z_asm_ply:
00575Br 2               
00575Br 2               xt_asm_rol:     ; rol \ ROL nnnn
00575Br 2  A9 2E                        lda #$2E
00575Dr 2  4C rr rr                     jmp asm_common
005760r 2               z_asm_rol:
005760r 2               
005760r 2               xt_asm_rol_a:   ; rol.a \ ROL
005760r 2  A9 2A                        lda #$2A
005762r 2  4C rr rr                     jmp asm_common
005765r 2               z_asm_rol_a:
005765r 2               
005765r 2               xt_asm_rol_x:   ; rol.x \ ROL nnnn,X
005765r 2  A9 3E                        lda #$3E
005767r 2  4C rr rr                     jmp asm_common
00576Ar 2               z_asm_rol_x:
00576Ar 2               
00576Ar 2               xt_asm_rol_z:   ; rol.z \ ROL nn
00576Ar 2  A9 26                        lda #$26
00576Cr 2  4C rr rr                     jmp asm_common
00576Fr 2               z_asm_rol_z:
00576Fr 2               
00576Fr 2               xt_asm_rol_zx:  ; rol.zx \ ROL nn,X
00576Fr 2  A9 36                        lda #$36
005771r 2  4C rr rr                     jmp asm_common
005774r 2               z_asm_rol_zx:
005774r 2               
005774r 2               xt_asm_ror:     ; ror \ ROR nnnn
005774r 2  A9 6E                        lda #$6E
005776r 2  4C rr rr                     jmp asm_common
005779r 2               z_asm_ror:
005779r 2               
005779r 2               xt_asm_ror_a:   ; ror.a \ ROR
005779r 2  A9 6A                        lda #$6A
00577Br 2  4C rr rr                     jmp asm_common
00577Er 2               z_asm_ror_a:
00577Er 2               
00577Er 2               xt_asm_ror_x:   ; ror.x \ ROR nnnn,X
00577Er 2  A9 7E                        lda #$7E
005780r 2  4C rr rr                     jmp asm_common
005783r 2               z_asm_ror_x:
005783r 2               
005783r 2               xt_asm_ror_z:   ; ror.z \ ROR nn
005783r 2  A9 66                        lda #$66
005785r 2  4C rr rr                     jmp asm_common
005788r 2               z_asm_ror_z:
005788r 2               
005788r 2               xt_asm_ror_zx:  ; ror.zx \ ROR nn,X
005788r 2  A9 76                        lda #$76
00578Ar 2  4C rr rr                     jmp asm_common
00578Dr 2               z_asm_ror_zx:
00578Dr 2               
00578Dr 2               xt_asm_rti:     ; rti \ RTI
00578Dr 2  A9 40                        lda #$40
00578Fr 2  4C rr rr                     jmp asm_common
005792r 2               z_asm_rti:
005792r 2               
005792r 2               xt_asm_rts:     ; rts \ RTS
005792r 2  A9 60                        lda #$60
005794r 2  4C rr rr                     jmp asm_common
005797r 2               z_asm_rts:
005797r 2               
005797r 2               xt_asm_sbc:     ; sbc \ SBC nnnn
005797r 2  A9 ED                        lda #$ED
005799r 2  4C rr rr                     jmp asm_common
00579Cr 2               z_asm_sbc:
00579Cr 2               
00579Cr 2               xt_asm_sbc_h:   ; sbc.# \ SBC #nn
00579Cr 2  A9 E9                        lda #$E9
00579Er 2  4C rr rr                     jmp asm_common
0057A1r 2               z_asm_sbc_h:
0057A1r 2               
0057A1r 2               xt_asm_sbc_x:   ; sbc.x \ SBC nnnn,X
0057A1r 2  A9 FD                        lda #$FD
0057A3r 2  4C rr rr                     jmp asm_common
0057A6r 2               z_asm_sbc_x:
0057A6r 2               
0057A6r 2               xt_asm_sbc_y:   ; sbc.y \ SBC nnnn,Y
0057A6r 2  A9 F9                        lda #$F9
0057A8r 2  4C rr rr                     jmp asm_common
0057ABr 2               z_asm_sbc_y:
0057ABr 2               
0057ABr 2               xt_asm_sbc_z:   ; sbc.z \ SBC nn
0057ABr 2  A9 E5                        lda #$E5
0057ADr 2  4C rr rr                     jmp asm_common
0057B0r 2               z_asm_sbc_z:
0057B0r 2               
0057B0r 2               xt_asm_sbc_zi:  ; sbc.zi \ SBC (nn)
0057B0r 2  A9 F2                        lda #$F2
0057B2r 2  4C rr rr                     jmp asm_common
0057B5r 2               z_asm_sbc_zi:
0057B5r 2               
0057B5r 2               xt_asm_sbc_ziy: ; sbc.ziy \ SBC (nn),Y
0057B5r 2  A9 F1                        lda #$F1
0057B7r 2  4C rr rr                     jmp asm_common
0057BAr 2               z_asm_sbc_ziy:
0057BAr 2               
0057BAr 2               xt_asm_sbc_zx:  ; sbc.zx \ SBC nn,X
0057BAr 2  A9 F5                        lda #$F5
0057BCr 2  4C rr rr                     jmp asm_common
0057BFr 2               z_asm_sbc_zx:
0057BFr 2               
0057BFr 2               xt_asm_sbc_zxi: ; sbc.zxi \ SBC (nn,X)
0057BFr 2  A9 E1                        lda #$E1
0057C1r 2  80 7C                        bra asm_common  ; <-- limit for BRA instead of JMP
0057C3r 2               z_asm_sbc_zxi:
0057C3r 2               
0057C3r 2               xt_asm_sec:     ; sec \ SEC
0057C3r 2  A9 38                        lda #$38
0057C5r 2  80 78                        bra asm_common
0057C7r 2               z_asm_sec:
0057C7r 2               
0057C7r 2               xt_asm_sed:     ; sed \ SED
0057C7r 2  A9 F8                        lda #$F8
0057C9r 2  80 74                        bra asm_common
0057CBr 2               z_asm_sed:
0057CBr 2               
0057CBr 2               xt_asm_sei:     ; sei \ SEI
0057CBr 2  A9 78                        lda #$78
0057CDr 2  80 70                        bra asm_common
0057CFr 2               z_asm_sei:
0057CFr 2               
0057CFr 2               xt_asm_sta:     ; sta \ STA nnnn
0057CFr 2  A9 8D                        lda #$8D
0057D1r 2  80 6C                        bra asm_common
0057D3r 2               z_asm_sta:
0057D3r 2               
0057D3r 2               xt_asm_sta_x:   ; sta.x \ STA nnnn,X
0057D3r 2  A9 9D                        lda #$9D
0057D5r 2  80 68                        bra asm_common
0057D7r 2               z_asm_sta_x:
0057D7r 2               
0057D7r 2               xt_asm_sta_y:   ; sta.y \ STA nnnn,Y
0057D7r 2  A9 99                        lda #$99
0057D9r 2  80 64                        bra asm_common
0057DBr 2               z_asm_sta_y:
0057DBr 2               
0057DBr 2               xt_asm_sta_z:   ; sta.z \ STA nn
0057DBr 2  A9 85                        lda #$85
0057DDr 2  80 60                        bra asm_common
0057DFr 2               z_asm_sta_z:
0057DFr 2               
0057DFr 2               xt_asm_sta_zi:  ; sta.zi \ STA (nn)
0057DFr 2  A9 92                        lda #$92
0057E1r 2  80 5C                        bra asm_common
0057E3r 2               z_asm_sta_zi:
0057E3r 2               
0057E3r 2               xt_asm_sta_ziy: ; sta.ziy \ STA (nn),Y
0057E3r 2  A9 91                        lda #$91
0057E5r 2  80 58                        bra asm_common
0057E7r 2               z_asm_sta_ziy:
0057E7r 2               
0057E7r 2               xt_asm_sta_zx:  ; sta.zx \ STA nn,X
0057E7r 2  A9 95                        lda #$95
0057E9r 2  80 54                        bra asm_common
0057EBr 2               z_asm_sta_zx:
0057EBr 2               
0057EBr 2               xt_asm_sta_zxi: ; sta.zxi \ STA (nn,X)
0057EBr 2  A9 81                        lda #$81
0057EDr 2  80 50                        bra asm_common
0057EFr 2               z_asm_sta_zxi:
0057EFr 2               
0057EFr 2               xt_asm_stx:     ; stx \ STX nnnn
0057EFr 2  A9 8E                        lda #$8E
0057F1r 2  80 4C                        bra asm_common
0057F3r 2               z_asm_stx:
0057F3r 2               
0057F3r 2               xt_asm_stx_z:   ; stx.z \ STX nn
0057F3r 2  A9 86                        lda #$86
0057F5r 2  80 48                        bra asm_common
0057F7r 2               z_asm_stx_z:
0057F7r 2               
0057F7r 2               xt_asm_stx_zy:  ; stx.zy \ STX nn,Y
0057F7r 2  A9 96                        lda #$96
0057F9r 2  80 44                        bra asm_common
0057FBr 2               z_asm_stx_zy:
0057FBr 2               
0057FBr 2               xt_asm_sty:     ; sty \ STY nnnn
0057FBr 2  A9 8C                        lda #$8C
0057FDr 2  80 40                        bra asm_common
0057FFr 2               z_asm_sty:
0057FFr 2               
0057FFr 2               xt_asm_sty_z:   ; sty.z \ STY nn
0057FFr 2  A9 84                        lda #$84
005801r 2  80 3C                        bra asm_common
005803r 2               z_asm_sty_z:
005803r 2               
005803r 2               xt_asm_sty_zx:  ; sty.zx \ STY nn,X
005803r 2  A9 94                        lda #$94
005805r 2  80 38                        bra asm_common
005807r 2               z_asm_sty_zx:
005807r 2               
005807r 2               xt_asm_stz:     ; stz \ STZ nnnn
005807r 2  A9 9C                        lda #$9C
005809r 2  80 34                        bra asm_common
00580Br 2               z_asm_stz:
00580Br 2               
00580Br 2               xt_asm_stz_x:   ; stz.x \ STZ nnnn,X
00580Br 2  A9 9E                        lda #$9E
00580Dr 2  80 30                        bra asm_common
00580Fr 2               z_asm_stz_x:
00580Fr 2               
00580Fr 2               xt_asm_stz_z:   ; stz.z \ STZ nn
00580Fr 2  A9 64                        lda #$64
005811r 2  80 2C                        bra asm_common
005813r 2               z_asm_stz_z:
005813r 2               
005813r 2               xt_asm_stz_zx:  ; stz.zx \ STZ nn,X
005813r 2  A9 74                        lda #$74
005815r 2  80 28                        bra asm_common
005817r 2               z_asm_stz_zx:
005817r 2               
005817r 2               xt_asm_tax:     ; tax \ TAX
005817r 2  A9 AA                        lda #$AA
005819r 2  80 24                        bra asm_common
00581Br 2               z_asm_tax:
00581Br 2               
00581Br 2               xt_asm_tay:     ; tay \ TAY
00581Br 2  A9 A8                        lda #$A8
00581Dr 2  80 20                        bra asm_common
00581Fr 2               z_asm_tay:
00581Fr 2               
00581Fr 2               xt_asm_trb:     ; trb \ TRB nnnn
00581Fr 2  A9 1C                        lda #$1C
005821r 2  80 1C                        bra asm_common
005823r 2               z_asm_trb:
005823r 2               
005823r 2               xt_asm_trb_z:   ; trb.z \ TRB nn
005823r 2  A9 14                        lda #$14
005825r 2  80 18                        bra asm_common
005827r 2               z_asm_trb_z:
005827r 2               
005827r 2               xt_asm_tsb:     ; tsb \ TSB nnnn
005827r 2  A9 0C                        lda #$0C
005829r 2  80 14                        bra asm_common
00582Br 2               z_asm_tsb:
00582Br 2               
00582Br 2               xt_asm_tsb_z:   ; tsb.z \ TSB nn
00582Br 2  A9 04                        lda #$04
00582Dr 2  80 10                        bra asm_common
00582Fr 2               z_asm_tsb_z:
00582Fr 2               
00582Fr 2               xt_asm_tsx:     ; tsx \ TSX
00582Fr 2  A9 BA                        lda #$BA
005831r 2  80 0C                        bra asm_common
005833r 2               z_asm_tsx:
005833r 2               
005833r 2               xt_asm_txa:     ; txa \ TXA
005833r 2  A9 8A                        lda #$8A
005835r 2  80 08                        bra asm_common
005837r 2               z_asm_txa:
005837r 2               
005837r 2               xt_asm_txs:     ; txs \ TXS
005837r 2  A9 9A                        lda #$9A
005839r 2  80 04                        bra asm_common
00583Br 2               z_asm_txs:
00583Br 2               
00583Br 2               xt_asm_tya:     ; tya \ TYA
00583Br 2  A9 98                        lda #$98
00583Dr 2  80 00                        bra asm_common
00583Fr 2               z_asm_tya:
00583Fr 2               
00583Fr 2               
00583Fr 2               ; ==========================================================
00583Fr 2               ; ASSEMBLER HELPER FUNCTIONS
00583Fr 2               
00583Fr 2               asm_common:
00583Fr 2               
00583Fr 2                       ; """Common routine for all opcodes. We arrive here with the opcode in
00583Fr 2                       ; A. We do not need to check for the correct values because we are
00583Fr 2                       ; coming from the assembler Dictionary and trust our external test
00583Fr 2                       ; suite.
00583Fr 2                       ; """
00583Fr 2                               ; Compile opcode. Note cmpl_a does not use Y
00583Fr 2  A8                           tay
005840r 2  20 rr rr                     jsr cmpl_a
005843r 2               
005843r 2                               ; We get the length of the opcode from the table included in
005843r 2                               ; the disassembler. We use the opcode value as the offset in
005843r 2                               ; the oc_index_table. We have 256 entries, each two bytes
005843r 2                               ; long, so we can't just use an index with Y. We use tmp2 for
005843r 2                               ; this.
005843r 2  A9 rr                        lda #<oc_index_table
005845r 2  85 rr                        sta tmp2
005847r 2  A9 rr                        lda #>oc_index_table
005849r 2  85 rr                        sta tmp2+1
00584Br 2               
00584Br 2  98                           tya             ; retrieve opcode
00584Cr 2  0A                           asl             ; times two for offset
00584Dr 2  90 02                        bcc @m
00584Fr 2  E6 rr                        inc tmp2+1
005851r 2               @m:
005851r 2  A8                           tay             ; use Y as the index
005852r 2               
005852r 2                               ; Get address of the entry in the opcode table. We put it in
005852r 2                               ; tmp3 and push a copy of it to the stack to be able to print
005852r 2                               ; the opcode later
005852r 2  B1 rr                        lda (tmp2),y    ; LSB
005854r 2  85 rr                        sta tmp3
005856r 2  C8                           iny
005857r 2  B1 rr                        lda (tmp2),y    ; MSB
005859r 2  85 rr                        sta tmp3+1
00585Br 2               
00585Br 2  B2 rr                        lda (tmp3)      ; get "lengths byte"
00585Dr 2               
00585Dr 2                               ; The length of the instruction is stored in bits 7 and 6.
00585Dr 2                               ; Rotate them through the carry flag and mask the rest
00585Dr 2  2A                           rol
00585Er 2  2A                           rol
00585Fr 2  2A                           rol             ; Three times because we go through Carry
005860r 2  29 03                        and #%00000011
005862r 2  A8                           tay
005863r 2               
005863r 2                               ; One byte means no operand, we're done. Use DEY as CPY #1
005863r 2  88                           dey
005864r 2  F0 12                        beq @done
005866r 2               
005866r 2                               ; We have an operand which must be TOS
005866r 2  20 rr rr                     jsr underflow_1
005869r 2               
005869r 2                               ; We compile the LSB of TOS as the operand we definitely have
005869r 2                               ; before we even test if this is a two- or three-byte
005869r 2                               ; instruction. Little endian CPU means we store this byte first
005869r 2  B5 00                        lda 0,x
00586Br 2  20 rr rr                     jsr cmpl_a      ; does not use Y
00586Er 2               
00586Er 2                               ; If this is a two-byte instruction, we're done. If we landed
00586Er 2                               ; here, we've already decremented Y by one, so this is
00586Er 2                               ; the equivalent to CPY #2
00586Er 2  88                           dey
00586Fr 2  F0 05                        beq @done_drop
005871r 2               
005871r 2                               ; This must be a three-byte instruction, get the MSB.
005871r 2  B5 01                        lda 1,x
005873r 2  20 rr rr                     jsr cmpl_a      ; Fall through to _done_drop
005876r 2               
005876r 2               @done_drop:
005876r 2  E8                           inx
005877r 2  E8                           inx             ; Fall through to _done
005878r 2               @done:
005878r 2  60                           rts             ; Returns to original caller
005879r 2               
005879r 2               
005879r 2               ; ==========================================================
005879r 2               ; PSEUDO-INSTRUCTIONS AND MACROS
005879r 2               
005879r 2               xt_asm_push_a:
005879r 2                       ; """push-a puts the content of the 65c02 Accumulator on the Forth
005879r 2                       ; data stack as the TOS. This is a convience routine that encodes the
005879r 2                       ; instructions  DEX  DEX  STA 0,X  STZ 1,X
005879r 2                       ; """
005879r 2  A0 00                        ldy #0
00587Br 2               _loop:
00587Br 2  B9 rr rr                     lda asm_push_a_data,y
00587Er 2  C9 FF                        cmp #$FF
005880r 2  F0 06                        beq @done
005882r 2               
005882r 2  20 rr rr                     jsr cmpl_a      ; does not change Y
005885r 2  C8                           iny
005886r 2  80 F3                        bra _loop
005888r 2               @done:
005888r 2               z_asm_push_a:
005888r 2  60                           rts
005889r 2               asm_push_a_data:
005889r 2                       ; We can't use 00 as a terminator because STA 0,X assembles to 95 00
005889r 2  CA CA 95 00          .byte $CA, $CA, $95, 00, $74, $01
00588Dr 2  74 01        
00588Fr 2  FF                   .byte $FF               ; terminator
005890r 2               
005890r 2               
005890r 2               
005890r 2               ; ==========================================================
005890r 2               ; DIRECTIVES
005890r 2               
005890r 2               ; The "<J" directive (back jump) is a dummy instruction (syntactic sugar) to
005890r 2               ; make clear that the JMP or JSR instructions are using the address that had
005890r 2               ; been placed on the stack by "-->" (the "arrow" directive).
005890r 2               xt_asm_back_jump:
005890r 2               z_asm_back_jump:
005890r 2  60                           rts
005891r 2               
005891r 2               ; The "<B" directive (back branch) takes an address that was placed on the Data
005891r 2               ; Stack by the anonymous label directive "-->" (the "arrow") and the current
005891r 2               ; address (via HERE) to calculate a backward branch offset. This is then stored
005891r 2               ; by a following branch instruction.
005891r 2               xt_asm_back_branch:
005891r 2                               ; We arrive here with ( addr-l ) of the label on the stack and
005891r 2                               ; then subtract the current address
005891r 2  20 rr rr                     jsr xt_here             ; ( addr-l addr-h )
005894r 2  20 rr rr                     jsr xt_minus            ; ( offset )
005897r 2               
005897r 2                               ; We subtract two more because of the branch instruction itself
005897r 2  3A                           dea
005898r 2  3A                           dea
005899r 2               
005899r 2               z_asm_back_branch:
005899r 2  60                           rts
00589Ar 2               .endif
00589Ar 2               assembler_end:
00589Ar 2               
00589Ar 2               ; END
00589Ar 2               
00589Ar 1               .include "../../disassembler.s"
00589Ar 2               ; Disassembler for Tali Forth 2
00589Ar 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00589Ar 2               ; Updated by Sam Colwell
00589Ar 2               ; First version: 28. Apr 2018
00589Ar 2               ; This version: 31. Dec 2022
00589Ar 2               
00589Ar 2               ; This is the default disassembler for Tali Forth 2. Use by passing
00589Ar 2               ; the address and length of the block of memory to be disassembled:
00589Ar 2               ;
00589Ar 2               ;       disasm ( addr x -- )
00589Ar 2               
00589Ar 2               ; The underflow checking is handled by the word's stub in native_words.asm, see
00589Ar 2               ; there for more information.
00589Ar 2               
00589Ar 2               ; The code is disassembled in Simpler Assembler Notation (SAN), because that
00589Ar 2               ; is, uh, simpler. See the documentation and https://github.com/scotws/SAN for
00589Ar 2               ; more information. Because disassemblers are used interactively with slow
00589Ar 2               ; humans, we don't care that much about speed and put the emphasis at being
00589Ar 2               ; small.
00589Ar 2               
00589Ar 2               ; Uses: tmp3, tmp2, tmp1 (xt_u_dot_r uses xt_type which uses tmp1)
00589Ar 2               ;       scratch (used for handling literals and JSRs)
00589Ar 2               
00589Ar 2               disassembler:
00589Ar 2  20 rr rr                     jsr xt_cr       ; ( addr u )
00589Dr 2               _byte_loop:
00589Dr 2                               ; Print address at start of the line. Note we use whatever
00589Dr 2                               ; number base the user has
00589Dr 2  20 rr rr                     jsr xt_over     ; ( addr u addr )
0058A0r 2  20 rr rr                     jsr xt_u_dot    ; ( addr u )
0058A3r 2  20 rr rr                     jsr xt_space
0058A6r 2               
0058A6r 2                               ; We use the opcode value as the offset in the oc_index_table.
0058A6r 2                               ; We have 256 entries, each two bytes long, so we can't just
0058A6r 2                               ; use an index with Y. We use tmp2 for this.
0058A6r 2  A9 rr                        lda #<oc_index_table
0058A8r 2  85 rr                        sta tmp2
0058AAr 2  A9 rr                        lda #>oc_index_table
0058ACr 2  85 rr                        sta tmp2+1
0058AEr 2               
0058AEr 2  A1 02                        lda (2,x)       ; get opcode that addr points to
0058B0r 2  85 rr                        sta scratch     ; Save opcode
0058B2r 2               
0058B2r 2  0A                           asl             ; multiply by two for offset
0058B3r 2  90 02                        bcc @ok
0058B5r 2  E6 rr                        inc tmp2+1      ; we're on second page
0058B7r 2               @ok:
0058B7r 2  A8                           tay             ; use Y as the index
0058B8r 2               
0058B8r 2                               ; Get address of the entry in the opcode table. We put it
0058B8r 2                               ; in tmp3 and push a copy of it to the stack to be able to
0058B8r 2                               ; print the opcode later
0058B8r 2  B1 rr                        lda (tmp2),y    ; LSB
0058BAr 2  85 rr                        sta tmp3
0058BCr 2  48                           pha
0058BDr 2               
0058BDr 2  C8                           iny
0058BEr 2               
0058BEr 2  B1 rr                        lda (tmp2),y    ; MSB
0058C0r 2  85 rr                        sta tmp3+1
0058C2r 2  48                           pha
0058C3r 2               
0058C3r 2                               ; The first byte is the "lengths byte" which is coded so
0058C3r 2                               ; that bits 7 to 6 are the length of the instruction (1 to
0058C3r 2                               ; 3 bytes) and 2 to 0 are the length of the mnemonic.
0058C3r 2  B2 rr                        lda (tmp3)
0058C5r 2  A8                           tay                     ; save copy of lengths byte
0058C6r 2               
0058C6r 2                               ; Since this is Simpler Assembler Notation (SAN) in a Forth
0058C6r 2                               ; system, we want to print any operand before we print the
0058C6r 2                               ; mnemonic ('1000 sta' instead of 'sta 1000'). This allows us
0058C6r 2                               ; to copy and paste directly from the disassembler to the
0058C6r 2                               ; assembler.
0058C6r 2               
0058C6r 2                               ; What happens next depends on the length of the instruction in
0058C6r 2                               ; bytes:
0058C6r 2               
0058C6r 2                               ;   1 byte:  OPC          -->          OPC  bit sequence: %01
0058C6r 2                               ;   2 bytes: OPC LSB      -->    0 LSB OPC  bit sequence: %10
0058C6r 2                               ;   3 bytes: OPC LSB MSB  -->  MSB LSB OPC  bit sequence: %11
0058C6r 2               
0058C6r 2                               ; We can distinguish between the first case, where there is
0058C6r 2                               ; only the mnemonic, and the second and third cases, where we
0058C6r 2                               ; have an operand. We do this by use of the bit sequence in
0058C6r 2                               ; bits 7 and 6.
0058C6r 2  10 3C                        bpl _no_operand         ; bit 7 clear, single-byte instruction
0058C8r 2               
0058C8r 2                               ; We have an operand. Prepare the Data Stack
0058C8r 2  20 rr rr                     jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
0058CBr 2               
0058CBr 2                               ; Because of the glory of a little endian CPU, we can start
0058CBr 2                               ; with the next byte regardless if this is a one or two byte
0058CBr 2                               ; operand, because we'll need the LSB one way or the other.
0058CBr 2                               ; We have a copy of the opcode on the stack, so we can now move
0058CBr 2                               ; to the next byte
0058CBr 2  F6 04                        inc 4,x
0058CDr 2  D0 02                        bne @l1
0058CFr 2  F6 05                        inc 5,x                 ; ( addr+1 u 0 )
0058D1r 2               @l1:
0058D1r 2  B5 02                        lda 2,x
0058D3r 2  D0 02                        bne @l2
0058D5r 2  D6 03                        dec 3,x
0058D7r 2               @l2:
0058D7r 2  D6 02                        dec 2,x                 ; ( addr+1 u-1 0 )
0058D9r 2               
0058D9r 2  A1 04                        lda (4,x)
0058DBr 2  95 00                        sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
0058DDr 2  85 rr                        sta scratch+1           ; Save a copy in the scratch buffer
0058DFr 2               
0058DFr 2                               ; We still have a copy of the lengths byte in Y, which we use
0058DFr 2                               ; to see if we have a one-byte operand (and are done already)
0058DFr 2                               ; or a two-byte operand
0058DFr 2  98                           tya                     ; retrieve copy of lengths byte
0058E0r 2  2A                           rol                     ; shift bit 6 to bit 7
0058E1r 2  10 14                        bpl _print_operand
0058E3r 2               
0058E3r 2                               ; We have a three-byte instruction, so we need to get the MSB
0058E3r 2                               ; of the operand. Move to the next byte
0058E3r 2  F6 04                        inc 4,x
0058E5r 2  D0 02                        bne @l3
0058E7r 2  F6 05                        inc 5,x                 ; ( addr+2 u-1 LSB )
0058E9r 2               @l3:
0058E9r 2  B5 02                        lda 2,x
0058EBr 2  D0 02                        bne @l4
0058EDr 2  D6 03                        dec 3,x
0058EFr 2               @l4:
0058EFr 2  D6 02                        dec 2,x                 ; ( addr+2 u-2 LSB )
0058F1r 2               
0058F1r 2  A1 04                        lda (4,x)
0058F3r 2  95 01                        sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
0058F5r 2  85 rr                        sta scratch+2           ; Save a copy in the scratch buffer
0058F7r 2               
0058F7r 2                               ; fall through to _print_operand
0058F7r 2               
0058F7r 2               _print_operand:
0058F7r 2               
0058F7r 2                               ; We arrive here with the lengths byte in Y, the address of the
0058F7r 2                               ; opcode table entry for the instruction on the stack ( addr+n
0058F7r 2                               ; u-n opr). We want the output to be nicely formatted in
0058F7r 2                               ; columns, so we use U.R. The maximal width of the number in
0058F7r 2                               ; decimal on an 16-bit addressed machine is five characters
0058F7r 2  CA                           dex
0058F8r 2  CA                           dex
0058F9r 2  A9 05                        lda #5
0058FBr 2  95 00                        sta 0,x
0058FDr 2  74 01                        stz 1,x                 ; ( addr+n u-n opr 5 )
0058FFr 2               
0058FFr 2  20 rr rr                     jsr xt_u_dot_r          ; U.R ( addr+n u-n )
005902r 2               
005902r 2  80 0B                        bra _print_mnemonic
005904r 2               
005904r 2               _no_operand:
005904r 2                               ; We arrive here with the opcode table address on the stack,
005904r 2                               ; the lengths byte in Y and ( addr u ). Since we want to have
005904r 2                               ; a nicely formatted output, we need to indent the mnemonic by
005904r 2                               ; five spaces.
005904r 2  CA                           dex
005905r 2  CA                           dex
005906r 2  A9 05                        lda #5
005908r 2  95 00                        sta 0,x
00590Ar 2  74 01                        stz 1,x                 ; ( addr u 5 )
00590Cr 2               
00590Cr 2  20 rr rr                     jsr xt_spaces           ; ( addr u )
00590Fr 2               
00590Fr 2                               ; fall through to _print_mnemonic
00590Fr 2               
00590Fr 2               _print_mnemonic:
00590Fr 2                               ; We arrive here with the opcode table address on the stack and
00590Fr 2                               ; ( addr u | addr+n u-n ). Time to print the mnemonic.
00590Fr 2  20 rr rr                     jsr xt_space
005912r 2               
005912r 2  CA                           dex
005913r 2  CA                           dex                     ; ( addr u ? )
005914r 2  68                           pla                     ; MSB
005915r 2  95 01                        sta 1,x                 ; ( addr u MSB )
005917r 2  68                           pla                     ; LSB
005918r 2  95 00                        sta 0,x                 ; ( addr u addr-o )
00591Ar 2               
00591Ar 2  20 rr rr                     jsr xt_count            ; ( addr u addr-o u-o )
00591Dr 2               
00591Dr 2                               ; The length of the mnemnonic string is in bits 2 to 0
00591Dr 2  74 01                        stz 1,x                 ; paranoid
00591Fr 2  B5 00                        lda 0,x
005921r 2  29 07                        and #%00000111          ; ( addr u addr-o u-o )
005923r 2  95 00                        sta 0,x
005925r 2               
005925r 2  20 rr rr                     jsr xt_type             ; ( addr u )
005928r 2               
005928r 2                               ; Handle JSR by printing name of function, if available.
005928r 2                               ; scratch has opcode ($20 for JSR)
005928r 2                               ; scratch+1 and scratch+2 have address if it's a JSR.
005928r 2  A5 rr                        lda scratch
00592Ar 2  C9 20                        cmp #$20
00592Cr 2  D0 59                        bne _not_jsr
00592Er 2               
00592Er 2                               ; It's a JSR.  Print 5 spaces as an offset.
00592Er 2  CA                           dex
00592Fr 2  CA                           dex
005930r 2  A9 05                        lda #5
005932r 2  95 00                        sta 0,x
005934r 2  74 01                        stz 1,x
005936r 2  20 rr rr                     jsr xt_spaces
005939r 2               
005939r 2               ; Special handlers
005939r 2                               ; Handle literals specially.
005939r 2  A9 rr                        lda #<literal_runtime
00593Br 2  C5 rr                        cmp scratch+1
00593Dr 2  D0 0C                        bne _not_literal
00593Fr 2  A9 rr                        lda #>literal_runtime
005941r 2  C5 rr                        cmp scratch+2
005943r 2  D0 06                        bne _not_literal
005945r 2                               ; It's a literal.
005945r 2  20 rr rr                     jsr disasm_literal
005948r 2  4C rr rr                     jmp _printing_done
00594Br 2               
00594Br 2               _not_literal:
00594Br 2                               ; Handle string literals specially.
00594Br 2  A9 rr                        lda #<sliteral_runtime
00594Dr 2  C5 rr                        cmp scratch+1
00594Fr 2  D0 0C                        bne _not_sliteral
005951r 2  A9 rr                        lda #>sliteral_runtime
005953r 2  C5 rr                        cmp scratch+2
005955r 2  D0 06                        bne _not_sliteral
005957r 2                               ; It's a literal.
005957r 2  20 rr rr                     jsr disasm_sliteral
00595Ar 2  4C rr rr                     jmp _printing_done
00595Dr 2               _not_sliteral:
00595Dr 2                               ; Handle 0branch
00595Dr 2  A9 rr                        lda #<zero_branch_runtime
00595Fr 2  C5 rr                        cmp scratch+1
005961r 2  D0 0C                        bne _not_0branch
005963r 2  A9 rr                        lda #>zero_branch_runtime
005965r 2  C5 rr                        cmp scratch+2
005967r 2  D0 06                        bne _not_0branch
005969r 2                               ; It's a 0branch.
005969r 2  20 rr rr                     jsr disasm_0branch
00596Cr 2  4C rr rr                     jmp _printing_done
00596Fr 2               _not_0branch:
00596Fr 2                               ; Handle branch
00596Fr 2  A9 rr                        lda #<branch_runtime
005971r 2  C5 rr                        cmp scratch+1
005973r 2  D0 0C                        bne _not_branch
005975r 2  A9 rr                        lda #>branch_runtime
005977r 2  C5 rr                        cmp scratch+2
005979r 2  D0 06                        bne _not_branch
00597Br 2                               ; It's a branch.
00597Br 2  20 rr rr                     jsr disasm_branch
00597Er 2  4C rr rr                     jmp _printing_done
005981r 2               _not_branch:
005981r 2                               ; Try the generic JSR handler, which will use the target of the
005981r 2                               ; JSR as an XT and print the name if it exists.
005981r 2  20 rr rr                     jsr disasm_jsr
005984r 2  4C rr rr                     jmp _printing_done
005987r 2               
005987r 2               _not_jsr:
005987r 2                               ; See if the instruction is a jump (instruction still in A)
005987r 2                               ; (Strings start with a jump over the data.)
005987r 2  C9 4C                        cmp #$4C
005989r 2  D0 29                        bne _printing_done
00598Br 2               
00598Br 2                               ; We have a branch.  See if it's a string by looking for
00598Br 2                               ; a JSR sliteral_runtime at the jump target address.
00598Br 2                               ; The target address is in scratch+1 and scratch+2
00598Br 2                               ; Use scratch+3 and scratch+4 here as we need to move
00598Br 2                               ; the pointer.
00598Br 2  A5 rr                        lda scratch+1   ; Copy the pointer.
00598Dr 2  85 rr                        sta scratch+3
00598Fr 2  A5 rr                        lda scratch+2
005991r 2  85 rr                        sta scratch+4
005993r 2               
005993r 2                               ; Get the first byte at the jmp target address.
005993r 2  B2 rr                        lda (scratch+3)
005995r 2               
005995r 2  C9 20                        cmp #$20 ; check for JSR
005997r 2  D0 1B                        bne _printing_done
005999r 2                               ; Next byte
005999r 2  E6 rr                        inc scratch+3
00599Br 2  D0 02                        bne @l1
00599Dr 2  E6 rr                        inc scratch+4
00599Fr 2               @l1:
00599Fr 2                               ; Check for string literal runtime
00599Fr 2  B2 rr                        lda (scratch+3)
0059A1r 2               
0059A1r 2  C9 rr                        cmp #<sliteral_runtime
0059A3r 2  D0 0F                        bne _printing_done
0059A5r 2                               ; Next byte
0059A5r 2  E6 rr                        inc scratch+3
0059A7r 2  D0 02                        bne @l2
0059A9r 2  E6 rr                        inc scratch+4
0059ABr 2               @l2:
0059ABr 2  B2 rr                        lda (scratch+3)
0059ADr 2               
0059ADr 2  C9 rr                        cmp #>sliteral_runtime
0059AFr 2  D0 03                        bne _printing_done
0059B1r 2               
0059B1r 2                               ; It's a string literal jump.
0059B1r 2  20 rr rr                     jsr disasm_sliteral_jump
0059B4r 2               _printing_done:
0059B4r 2  20 rr rr                     jsr xt_cr
0059B7r 2               
0059B7r 2                               ; Housekeeping: Next byte
0059B7r 2  F6 02                        inc 2,x
0059B9r 2  D0 02                        bne @l3
0059BBr 2  F6 03                        inc 3,x                 ; ( addr+1 u )
0059BDr 2               @l3:
0059BDr 2  20 rr rr                     jsr xt_one_minus        ; ( addr+1 u-1 )
0059C0r 2               
0059C0r 2  B5 00                        lda 0,x                 ; All done?
0059C2r 2  15 01                        ora 1,x
0059C4r 2  F0 07                        beq @done
0059C6r 2               
0059C6r 2  B5 01                        lda 1,x                 ; Catch mid-instruction ranges
0059C8r 2  30 03                        bmi @done
0059CAr 2               
0059CAr 2  4C rr rr                     jmp _byte_loop          ; out of range for BRA
0059CDr 2               @done:
0059CDr 2                               ; Clean up and leave
0059CDr 2  4C rr rr                     jmp xt_two_drop         ; JSR/RTS
0059D0r 2               
0059D0r 2               ; Handlers for various special disassembled instructions:
0059D0r 2               ; String literal handler (both for inline strings and sliteral)
0059D0r 2               disasm_sliteral_jump:
0059D0r 2                               ; If we get here, we are at the jump for a constant string.
0059D0r 2                               ; Strings are compiled into the dictionary like so:
0059D0r 2                               ;           jmp a
0059D0r 2                               ;           <string data bytes>
0059D0r 2                               ;  a -->    jsr sliteral_runtime
0059D0r 2                               ;           <string address>
0059D0r 2                               ;           <string length>
0059D0r 2                               ;
0059D0r 2                               ; We have ( addr n ) on the stack where addr is the last
0059D0r 2                               ; byte of the address a in the above jmp instruction.
0059D0r 2                               ; Address a is in scratch+1 scratch+2.
0059D0r 2               
0059D0r 2                               ; Determine the distance of the jump so we end on the byte
0059D0r 2                               ; just before the JSR (sets us up for SLITERAL on next loop)
0059D0r 2  20 rr rr                     jsr xt_swap
0059D3r 2  CA                           dex
0059D4r 2  CA                           dex
0059D5r 2  A5 rr                        lda scratch+1
0059D7r 2  95 00                        sta 0,x
0059D9r 2  A5 rr                        lda scratch+2
0059DBr 2  95 01                        sta 1,x
0059DDr 2  20 rr rr                     jsr xt_swap
0059E0r 2  20 rr rr                     jsr xt_minus
0059E3r 2  20 rr rr                     jsr xt_one_minus
0059E6r 2                               ; (n jump_distance)
0059E6r 2                               ; Subtract the jump distance from the bytes left.
0059E6r 2  20 rr rr                     jsr xt_minus
0059E9r 2                               ; ( new_n )
0059E9r 2                               ; Move to one byte before the target address
0059E9r 2  CA                           dex
0059EAr 2  CA                           dex
0059EBr 2  A5 rr                        lda scratch+1
0059EDr 2  95 00                        sta 0,x
0059EFr 2  A5 rr                        lda scratch+2
0059F1r 2  95 01                        sta 1,x
0059F3r 2  20 rr rr                     jsr xt_one_minus
0059F6r 2  20 rr rr                     jsr xt_swap ; ( new_addr new_n )
0059F9r 2  60                           rts
0059FAr 2               
0059FAr 2               ; String literal handler
0059FAr 2               disasm_sliteral:
0059FAr 2  A9 53                        lda #'S'
0059FCr 2  20 rr rr                     jsr emit_a ; Print S before LITERAL so it becomes SLITERAL
0059FFr 2  A9 0D                        lda #str_disasm_lit     ; "LITERAL "
005A01r 2  20 rr rr                     jsr print_string_no_lf
005A04r 2               
005A04r 2                               ; ( addr u ) address of last byte of JSR address and bytes left on the stack.
005A04r 2                               ; We need to print the two values just after addr and move along two bytes
005A04r 2                               ; for each value.
005A04r 2  20 rr rr                     jsr xt_swap             ; switch to (u addr)
005A07r 2  20 rr rr                     jsr xt_one_plus
005A0Ar 2               
005A0Ar 2  20 rr rr                     jsr xt_dup
005A0Dr 2  20 rr rr                     jsr xt_fetch
005A10r 2  20 rr rr                     jsr xt_u_dot            ; Print the address of the string
005A13r 2                               ; Move along two bytes (already moved address one) to skip over the constant.
005A13r 2  20 rr rr                     jsr xt_two
005A16r 2  20 rr rr                     jsr xt_plus
005A19r 2               
005A19r 2  20 rr rr                     jsr xt_dup
005A1Cr 2  20 rr rr                     jsr xt_question         ; Print the length of the string
005A1Fr 2                               ; Move along to the very last byte of the data.
005A1Fr 2  20 rr rr                     jsr xt_one_plus
005A22r 2               
005A22r 2                               ; ( u addr+4 )
005A22r 2                               ; Fix up the number of bytes left.
005A22r 2  20 rr rr                     jsr xt_swap            ; ( addr+4 u )
005A25r 2  CA                           dex
005A26r 2  CA                           dex
005A27r 2  A9 04                        lda #4
005A29r 2  95 00                        sta 0,x
005A2Br 2  74 01                        stz 1,x
005A2Dr 2  20 rr rr                     jsr xt_minus            ; ( addr+4 u-4 )
005A30r 2  60                           rts
005A31r 2               
005A31r 2               
005A31r 2               ; 0BRANCH handler
005A31r 2               disasm_0branch:
005A31r 2  A9 30                        lda #'0'
005A33r 2  20 rr rr                     jsr emit_a ; Print 0 before BRANCH so it becomes 0BRANCH
005A36r 2                               ; All other processing is identical, so fall into BRANCH handler
005A36r 2               ; BRANCH handler
005A36r 2               disasm_branch:
005A36r 2  A9 0F                        lda #str_disasm_bra
005A38r 2  20 rr rr                     jsr print_string_no_lf ; "BRANCH "
005A3Br 2                               ; The address after the 0BRANCH is handled the same as a literal.
005A3Br 2  80 05                        bra disasm_print_literal
005A3Dr 2               
005A3Dr 2               ; Literal handler
005A3Dr 2               disasm_literal:
005A3Dr 2  A9 0D                        lda #str_disasm_lit
005A3Fr 2  20 rr rr                     jsr print_string_no_lf ; "LITERAL "
005A42r 2               disasm_print_literal:
005A42r 2                               ; ( addr u ) address of last byte of JSR and bytes left on the stack.
005A42r 2                               ; We need to print the value just after the address and move along two bytes.
005A42r 2  20 rr rr                     jsr xt_swap ; switch to (u addr)
005A45r 2  20 rr rr                     jsr xt_one_plus
005A48r 2               
005A48r 2  20 rr rr                     jsr xt_dup
005A4Br 2  20 rr rr                     jsr xt_question ; Print the value at the adress
005A4Er 2                               ; Move along two bytes (already moved address one) to skip over the constant.
005A4Er 2  20 rr rr                     jsr xt_one_plus
005A51r 2  20 rr rr                     jsr xt_swap ; (addr+2 u)
005A54r 2  20 rr rr                     jsr xt_one_minus
005A57r 2  20 rr rr                     jsr xt_one_minus ; (addr+2 u-2)
005A5Ar 2  60                           rts
005A5Br 2               
005A5Br 2               ; JSR handler
005A5Br 2               disasm_jsr:
005A5Br 2                               ; The address of the JSR is in scratch+1 and scratch+2.
005A5Br 2                               ; The current stack is already ( addr u ) where addr is the address of the last byte of
005A5Br 2                               ; the JSR target address, and we want to leave it like that so moving on to the next byte
005A5Br 2                               ; works properly.
005A5Br 2                               ; Put the target address on the stack and see if it's an XT.
005A5Br 2  CA                           dex
005A5Cr 2  CA                           dex
005A5Dr 2  A5 rr                        lda scratch+1
005A5Fr 2  95 00                        sta 0,x
005A61r 2  A5 rr                        lda scratch+2
005A63r 2  95 01                        sta 1,x
005A65r 2                               ; ( xt )
005A65r 2  20 rr rr                     jsr xt_int_to_name
005A68r 2                               ; int>name returns zero if we just don't know.
005A68r 2  B5 00                        lda 0,x
005A6Ar 2  15 01                        ora 1,x
005A6Cr 2  F0 07                        beq _disasm_no_nt
005A6Er 2                               ; We now have a name token ( nt ) on the stack.
005A6Er 2                               ; Change it into the name and print it.
005A6Er 2  20 rr rr                     jsr xt_name_to_string
005A71r 2  20 rr rr                     jsr xt_type
005A74r 2  60                           rts
005A75r 2               
005A75r 2               _disasm_no_nt:
005A75r 2  20 rr rr                     jsr xt_drop ; the 0 indicating no name token
005A78r 2                               ; See if the address is between underflow_1 and underflow_4,
005A78r 2                               ; inclusive.
005A78r 2  CA                           dex
005A79r 2  CA                           dex
005A7Ar 2  A5 rr                        lda scratch+1
005A7Cr 2  95 00                        sta 0,x
005A7Er 2  A5 rr                        lda scratch+2
005A80r 2  95 01                        sta 1,x
005A82r 2                               ; ( jsr_address )
005A82r 2                               ; Compare to lower underflow address
005A82r 2  CA                           dex
005A83r 2  CA                           dex
005A84r 2  A9 rr                        lda #<underflow_1
005A86r 2  95 00                        sta 0,x
005A88r 2  A9 rr                        lda #>underflow_1
005A8Ar 2  95 01                        sta 1,x
005A8Cr 2  20 rr rr                     jsr compare_16bit
005A8Fr 2  F0 02                        beq _disasm_jsr_uflow_check_upper
005A91r 2  B0 14                        bcs _disasm_jsr_unknown
005A93r 2               _disasm_jsr_uflow_check_upper:
005A93r 2                               ; Compare to upper underflow addresses
005A93r 2  A9 rr                        lda #<underflow_4
005A95r 2  95 00                        sta 0,x
005A97r 2  A9 rr                        lda #>underflow_4
005A99r 2  95 01                        sta 1,x
005A9Br 2  20 rr rr                     jsr compare_16bit
005A9Er 2  F0 02                        beq _disasm_jsr_soc
005AA0r 2  90 05                        bcc _disasm_jsr_unknown
005AA2r 2               _disasm_jsr_soc:
005AA2r 2                               ; It's an underflow check.
005AA2r 2  A9 0E                        lda #str_disasm_sdc
005AA4r 2  20 rr rr                     jsr print_string_no_lf  ; "STACK DEPTH CHECK"
005AA7r 2               _disasm_jsr_unknown:
005AA7r 2  20 rr rr                     jsr xt_two_drop
005AAAr 2  60                           rts
005AABr 2               
005AABr 2               
005AABr 2               ; =========================================================
005AABr 2               oc_index_table:
005AABr 2                       ; Lookup table for the instruction data (length of instruction in
005AABr 2                       ; bytes, length of mnemonic in bytes, mnemonic string). This is used by
005AABr 2                       ; the assembler as well.
005AABr 2               
005AABr 2                       ; Opcodes 00-0F
005AABr 2  rr rr rr rr          .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
005AAFr 2  rr rr rr rr  
005AB3r 2  rr rr rr rr  
005ABBr 2  rr rr rr rr          .word oc08, oc09, oc0a, oc__, oc0c, oc0d, oc0e, oc0f
005ABFr 2  rr rr rr rr  
005AC3r 2  rr rr rr rr  
005ACBr 2               
005ACBr 2                       ; Opcodes 10-1F
005ACBr 2  rr rr rr rr          .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
005ACFr 2  rr rr rr rr  
005AD3r 2  rr rr rr rr  
005ADBr 2  rr rr rr rr          .word oc18, oc19, oc1a, oc__, oc1c, oc1d, oc__, oc1f
005ADFr 2  rr rr rr rr  
005AE3r 2  rr rr rr rr  
005AEBr 2               
005AEBr 2                       ; Opcodes 20-2F
005AEBr 2  rr rr rr rr          .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
005AEFr 2  rr rr rr rr  
005AF3r 2  rr rr rr rr  
005AFBr 2  rr rr rr rr          .word oc28, oc29, oc2a, oc__, oc2c, oc2d, oc2e, oc2f
005AFFr 2  rr rr rr rr  
005B03r 2  rr rr rr rr  
005B0Br 2               
005B0Br 2                       ; Opcodes 30-3F
005B0Br 2  rr rr rr rr          .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
005B0Fr 2  rr rr rr rr  
005B13r 2  rr rr rr rr  
005B1Br 2  rr rr rr rr          .word oc38, oc39, oc3a, oc__, oc3c, oc3d, oc3e, oc0f
005B1Fr 2  rr rr rr rr  
005B23r 2  rr rr rr rr  
005B2Br 2               
005B2Br 2                       ; Opcodes 40-4F
005B2Br 2  rr rr rr rr          .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
005B2Fr 2  rr rr rr rr  
005B33r 2  rr rr rr rr  
005B3Br 2  rr rr rr rr          .word oc48, oc49, oc4a, oc__, oc4c, oc4d, oc4e, oc4f
005B3Fr 2  rr rr rr rr  
005B43r 2  rr rr rr rr  
005B4Br 2               
005B4Br 2                       ; Opcodes 50-5F
005B4Br 2  rr rr rr rr          .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
005B4Fr 2  rr rr rr rr  
005B53r 2  rr rr rr rr  
005B5Br 2  rr rr rr rr          .word oc58, oc59, oc5a, oc__, oc__, oc__, oc5e, oc5f
005B5Fr 2  rr rr rr rr  
005B63r 2  rr rr rr rr  
005B6Br 2               
005B6Br 2                       ; Opcodes 60-6F
005B6Br 2  rr rr rr rr          .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
005B6Fr 2  rr rr rr rr  
005B73r 2  rr rr rr rr  
005B7Br 2  rr rr rr rr          .word oc68, oc69, oc6a, oc__, oc6c, oc6d, oc6e, oc6f
005B7Fr 2  rr rr rr rr  
005B83r 2  rr rr rr rr  
005B8Br 2               
005B8Br 2                       ; Opcodes 70-7F
005B8Br 2  rr rr rr rr          .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
005B8Fr 2  rr rr rr rr  
005B93r 2  rr rr rr rr  
005B9Br 2  rr rr rr rr          .word oc78, oc79, oc7a, oc__, oc7c, oc7d, oc7e, oc7f
005B9Fr 2  rr rr rr rr  
005BA3r 2  rr rr rr rr  
005BABr 2               
005BABr 2                       ; Opcodes 80-8F
005BABr 2  rr rr rr rr          .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
005BAFr 2  rr rr rr rr  
005BB3r 2  rr rr rr rr  
005BBBr 2  rr rr rr rr          .word oc88, oc89, oc8a, oc__, oc8c, oc8d, oc8e, oc8f
005BBFr 2  rr rr rr rr  
005BC3r 2  rr rr rr rr  
005BCBr 2               
005BCBr 2                       ; Opcodes 90-9F
005BCBr 2  rr rr rr rr          .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
005BCFr 2  rr rr rr rr  
005BD3r 2  rr rr rr rr  
005BDBr 2  rr rr rr rr          .word oc98, oc99, oc9a, oc__, oc9c, oc9d, oc9e, oc9f
005BDFr 2  rr rr rr rr  
005BE3r 2  rr rr rr rr  
005BEBr 2               
005BEBr 2                       ; Opcodes A0-AF
005BEBr 2  rr rr rr rr          .word oca0, oca1, oca2, oc__, oca4, oca5, oca6, oca7
005BEFr 2  rr rr rr rr  
005BF3r 2  rr rr rr rr  
005BFBr 2  rr rr rr rr          .word oca8, oca9, ocaa, oc__, ocac, ocad, ocae, ocaf
005BFFr 2  rr rr rr rr  
005C03r 2  rr rr rr rr  
005C0Br 2               
005C0Br 2                       ; Opcodes B0-BF
005C0Br 2  rr rr rr rr          .word ocb0, ocb1, ocb2, oc__, ocb4, ocb5, ocb6, ocb7
005C0Fr 2  rr rr rr rr  
005C13r 2  rr rr rr rr  
005C1Br 2  rr rr rr rr          .word ocb8, ocb9, ocba, oc__, ocbc, ocbd, ocbe, ocbf
005C1Fr 2  rr rr rr rr  
005C23r 2  rr rr rr rr  
005C2Br 2               
005C2Br 2                       ; Opcodes C0-CF
005C2Br 2  rr rr rr rr          .word occ0, occ1, oc__, oc__, occ4, occ5, occ6, occ7
005C2Fr 2  rr rr rr rr  
005C33r 2  rr rr rr rr  
005C3Br 2  rr rr rr rr          .word occ8, occ9, occa, oc__, occc, occd, occe, occf
005C3Fr 2  rr rr rr rr  
005C43r 2  rr rr rr rr  
005C4Br 2               
005C4Br 2                       ; Opcodes D0-DF
005C4Br 2  rr rr rr rr          .word ocd0, ocd1, ocd2, oc__, oc__, ocd5, ocd6, ocd7
005C4Fr 2  rr rr rr rr  
005C53r 2  rr rr rr rr  
005C5Br 2  rr rr rr rr          .word ocd8, ocd9, ocda, oc__, oc__, ocdd, ocde, ocdf
005C5Fr 2  rr rr rr rr  
005C63r 2  rr rr rr rr  
005C6Br 2               
005C6Br 2                       ; Opcodes E0-EF
005C6Br 2  rr rr rr rr          .word oce0, oce1, oc__, oc__, oce4, oce5, oce6, oce7
005C6Fr 2  rr rr rr rr  
005C73r 2  rr rr rr rr  
005C7Br 2  rr rr rr rr          .word oce8, oce9, ocea, oc__, ocec, oced, ocee, ocef
005C7Fr 2  rr rr rr rr  
005C83r 2  rr rr rr rr  
005C8Br 2               
005C8Br 2                       ; Opcodes F0-FF
005C8Br 2  rr rr rr rr          .word ocf0, ocf1, ocf2, oc__, oc__, ocf5, ocf6, ocf7
005C8Fr 2  rr rr rr rr  
005C93r 2  rr rr rr rr  
005C9Br 2  rr rr rr rr          .word ocf8, ocf9, ocfa, oc__, oc__, ocfd, ocfe, ocff
005C9Fr 2  rr rr rr rr  
005CA3r 2  rr rr rr rr  
005CABr 2               
005CABr 2               
005CABr 2               ; =========================================================
005CABr 2               oc_table:
005CABr 2                       ; Opcode data table for the disassember, which is also used by the
005CABr 2                       ; assembler. Each entry starts with a "lengths byte":
005CABr 2               
005CABr 2                       ;       bit 7-6:  Length of instruction in bytes (1 to 3 for the 65c02)
005CABr 2                       ;       bit 5-3:  unused
005CABr 2                       ;       bit 2-0:  Length of mnemonic in chars (3 to 7)
005CABr 2               
005CABr 2                       ; To convert a line in this table to a Forth string of the mnemonic,
005CABr 2                       ; use the COUNT word on the address of the lengths byte to get
005CABr 2                       ; ( addr u ) and then mask all but the bits 2-0 of the TOS.
005CABr 2               
005CABr 2                       ; To make debugging easier, we keep the raw numbers for the lengths of
005CABr 2                       ; the instruction and mnemonicis and let the assembler do the math
005CABr 2                       ; required to shift and add. The actual mnemonic string follows after
005CABr 2                       ; and is not zero terminated because we have the length in bits 2 to 0.
005CABr 2               
005CABr 2  83 62 72 6B  	oc00:	.byte 2*64+3, "brk"              ; enforce the signature byte
005CAFr 2  87 6F 72 61  	oc01:	.byte 2*64+7, "ora.zxi"
005CB3r 2  2E 7A 78 69  
005CB7r 2               ;      (oc02)
005CB7r 2               ;      (oc03)
005CB7r 2  85 74 73 62          oc04:   .byte 2*64+5, "tsb.z"
005CBBr 2  2E 7A        
005CBDr 2  85 6F 72 61  	oc05:	.byte 2*64+5, "ora.z"
005CC1r 2  2E 7A        
005CC3r 2  85 61 73 6C  	oc06:	.byte 2*64+5, "asl.z"
005CC7r 2  2E 7A        
005CC9r 2               ;      (oc07)
005CC9r 2  43 70 68 70  	oc08:	.byte 1*64+3, "php"
005CCDr 2  85 6F 72 61  	oc09:	.byte 2*64+5, "ora.#"
005CD1r 2  2E 23        
005CD3r 2  45 61 73 6C  	oc0a:	.byte 1*64+5, "asl.a"
005CD7r 2  2E 61        
005CD9r 2               ;      (oc0b)
005CD9r 2  C3 74 73 62  	oc0c:	.byte 3*64+3, "tsb"
005CDDr 2  C3 6F 72 61  	oc0d:	.byte 3*64+3, "ora"
005CE1r 2  C3 61 73 6C  	oc0e:	.byte 3*64+3, "asl"
005CE5r 2  C4 62 62 72  	oc0f:	.byte 3*64+4, "bbr0"
005CE9r 2  30           
005CEAr 2               
005CEAr 2  83 62 70 6C  	oc10:	.byte 2*64+3, "bpl"
005CEEr 2  87 6F 72 61  	oc11:	.byte 2*64+7, "ora.ziy"
005CF2r 2  2E 7A 69 79  
005CF6r 2  86 6F 72 61  	oc12:	.byte 2*64+6, "ora.zi"
005CFAr 2  2E 7A 69     
005CFDr 2               ;      (oc13:)
005CFDr 2  85 74 72 62  	oc14:	.byte 2*64+5, "trb.z"
005D01r 2  2E 7A        
005D03r 2  86 6F 72 61  	oc15:	.byte 2*64+6, "ora.zx"
005D07r 2  2E 7A 78     
005D0Ar 2  86 61 73 6C  	oc16:	.byte 2*64+6, "asl.zx"
005D0Er 2  2E 7A 78     
005D11r 2  86 72 6D 62  	oc17:	.byte 2*64+6, "rmb1.z"
005D15r 2  31 2E 7A     
005D18r 2  43 63 6C 63  	oc18:	.byte 1*64+3, "clc"
005D1Cr 2  C5 6F 72 61  	oc19:	.byte 3*64+5, "ora.y"
005D20r 2  2E 79        
005D22r 2  45 69 6E 63  	oc1a:	.byte 1*64+5, "inc.a"
005D26r 2  2E 61        
005D28r 2               ;      (oc1b:)
005D28r 2  C3 74 72 62  	oc1c:	.byte 3*64+3, "trb"
005D2Cr 2  C5 6F 72 61  	oc1d:	.byte 3*64+5, "ora.x"
005D30r 2  2E 78        
005D32r 2               ;      (oc1e:)
005D32r 2  C5 61 73 6C  	oc1f:	.byte 3*64+5, "asl.x"
005D36r 2  2E 78        
005D38r 2               
005D38r 2  C3 6A 73 72  	oc20:	.byte 3*64+3, "jsr"
005D3Cr 2  87 61 6E 64  	oc21:	.byte 2*64+7, "and.zxi"
005D40r 2  2E 7A 78 69  
005D44r 2               ;      (oc22:)
005D44r 2               ;      (oc23:)
005D44r 2  85 62 69 74  	oc24:	.byte 2*64+5, "bit.z"
005D48r 2  2E 7A        
005D4Ar 2  85 61 6E 64  	oc25:	.byte 2*64+5, "and.z"
005D4Er 2  2E 7A        
005D50r 2  85 72 6F 6C  	oc26:	.byte 2*64+5, "rol.z"
005D54r 2  2E 7A        
005D56r 2  86 72 6D 62  	oc27:	.byte 2*64+6, "rmb2.z"
005D5Ar 2  32 2E 7A     
005D5Dr 2  43 70 6C 70  	oc28:	.byte 1*64+3, "plp"
005D61r 2  85 61 6E 64  	oc29:	.byte 2*64+5, "and.#"
005D65r 2  2E 23        
005D67r 2  45 72 6F 6C  	oc2a:	.byte 1*64+5, "rol.a"
005D6Br 2  2E 61        
005D6Dr 2               ;      (oc2b:)
005D6Dr 2  C3 62 69 74  	oc2c:	.byte 3*64+3, "bit"
005D71r 2  C4 61 6E 64  	oc2d:	.byte 3*64+4, "and."
005D75r 2  2E           
005D76r 2  C3 72 6F 6C  	oc2e:	.byte 3*64+3, "rol"
005D7Ar 2  C4 62 62 72  	oc2f:	.byte 3*64+4, "bbr2"
005D7Er 2  32           
005D7Fr 2               
005D7Fr 2  83 62 6D 69  	oc30:	.byte 2*64+3, "bmi"
005D83r 2  87 61 6E 64  	oc31:	.byte 2*64+7, "and.ziy"
005D87r 2  2E 7A 69 79  
005D8Br 2  86 61 6E 64  	oc32:	.byte 2*64+6, "and.zi"
005D8Fr 2  2E 7A 69     
005D92r 2               ;      (oc33:)
005D92r 2  87 62 69 74  	oc34:	.byte 2*64+7, "bit.zxi"
005D96r 2  2E 7A 78 69  
005D9Ar 2  86 61 6E 64  	oc35:	.byte 2*64+6, "and.zx"
005D9Er 2  2E 7A 78     
005DA1r 2  86 72 6F 6C  	oc36:	.byte 2*64+6, "rol.zx"
005DA5r 2  2E 7A 78     
005DA8r 2  86 72 6D 62  	oc37:	.byte 2*64+6, "rmb3.z"
005DACr 2  33 2E 7A     
005DAFr 2  43 73 65 63  	oc38:	.byte 1*64+3, "sec"
005DB3r 2  C5 61 6E 64  	oc39:	.byte 3*64+5, "and.y"
005DB7r 2  2E 79        
005DB9r 2  45 64 65 63  	oc3a:	.byte 1*64+5, "dec.a"
005DBDr 2  2E 61        
005DBFr 2               ;      (oc3b:)
005DBFr 2  C5 62 69 74  	oc3c:	.byte 3*64+5, "bit.x"
005DC3r 2  2E 78        
005DC5r 2  C5 61 6E 64  	oc3d:	.byte 3*64+5, "and.x"
005DC9r 2  2E 78        
005DCBr 2  C5 72 6F 6C  	oc3e:	.byte 3*64+5, "rol.x"
005DCFr 2  2E 78        
005DD1r 2  C4 62 62 72  	oc3f:	.byte 3*64+4, "bbr3"
005DD5r 2  33           
005DD6r 2               
005DD6r 2  43 72 74 69  	oc40:	.byte 1*64+3, "rti"
005DDAr 2  87 65 6F 72  	oc41:	.byte 2*64+7, "eor.zxi"
005DDEr 2  2E 7A 78 69  
005DE2r 2               ;      (oc42:)
005DE2r 2               ;      (oc43:)
005DE2r 2               ;      (oc44:)
005DE2r 2  85 65 6F 72  	oc45:	.byte 2*64+5, "eor.z"
005DE6r 2  2E 7A        
005DE8r 2  85 6C 73 72  	oc46:	.byte 2*64+5, "lsr.z"
005DECr 2  2E 7A        
005DEEr 2  86 72 62 6D  	oc47:	.byte 2*64+6, "rbm4.z"
005DF2r 2  34 2E 7A     
005DF5r 2  43 70 68 61  	oc48:	.byte 1*64+3, "pha"
005DF9r 2  85 65 6F 72  	oc49:	.byte 2*64+5, "eor.#"
005DFDr 2  2E 23        
005DFFr 2  45 6C 73 72  	oc4a:	.byte 1*64+5, "lsr.a"
005E03r 2  2E 61        
005E05r 2               ;      (oc4b:)
005E05r 2  C3 6A 6D 70  	oc4c:	.byte 3*64+3, "jmp"
005E09r 2  C3 65 6F 72  	oc4d:	.byte 3*64+3, "eor"
005E0Dr 2  C3 6C 73 72  	oc4e:	.byte 3*64+3, "lsr"
005E11r 2  C4 62 62 72  	oc4f:	.byte 3*64+4, "bbr4"
005E15r 2  34           
005E16r 2               
005E16r 2  83 62 76 63  	oc50:	.byte 2*64+3, "bvc"
005E1Ar 2  87 65 6F 72  	oc51:	.byte 2*64+7, "eor.ziy"
005E1Er 2  2E 7A 69 79  
005E22r 2  86 65 6F 72  	oc52:	.byte 2*64+6, "eor.zi"
005E26r 2  2E 7A 69     
005E29r 2               ;      (oc53:)
005E29r 2               ;      (oc54:)
005E29r 2  86 65 6F 72  	oc55:	.byte 2*64+6, "eor.zx"
005E2Dr 2  2E 7A 78     
005E30r 2  86 6C 73 72  	oc56:	.byte 2*64+6, "lsr.zx"
005E34r 2  2E 7A 78     
005E37r 2  86 72 62 6D  	oc57:	.byte 2*64+6, "rbm5.z"
005E3Br 2  35 2E 7A     
005E3Er 2  43 63 6C 69  	oc58:	.byte 1*64+3, "cli"
005E42r 2  C5 65 6F 72  	oc59:	.byte 3*64+5, "eor.y"
005E46r 2  2E 79        
005E48r 2  43 70 68 79  	oc5a:	.byte 1*64+3, "phy"
005E4Cr 2               ;      (oc5b:)
005E4Cr 2               ;      (oc5c:)
005E4Cr 2  C5 65 6F 72  	oc5d:	.byte 3*64+5, "eor.x"
005E50r 2  2E 78        
005E52r 2  C5 6C 73 72  	oc5e:	.byte 3*64+5, "lsr.x"
005E56r 2  2E 78        
005E58r 2  C4 62 62 72  	oc5f:	.byte 3*64+4, "bbr5"
005E5Cr 2  35           
005E5Dr 2               
005E5Dr 2  43 72 74 73  	oc60:	.byte 1*64+3, "rts"
005E61r 2  87 61 64 63  	oc61:	.byte 2*64+7, "adc.zxi"
005E65r 2  2E 7A 78 69  
005E69r 2               ;      (oc62:)
005E69r 2               ;      (oc63:)
005E69r 2  85 73 74 7A  	oc64:	.byte 2*64+5, "stz.z"
005E6Dr 2  2E 7A        
005E6Fr 2  85 61 64 63  	oc65:	.byte 2*64+5, "adc.z"
005E73r 2  2E 7A        
005E75r 2  85 72 6F 72  	oc66:	.byte 2*64+5, "ror.z"
005E79r 2  2E 7A        
005E7Br 2  86 72 6D 62  	oc67:	.byte 2*64+6, "rmb6.z"
005E7Fr 2  36 2E 7A     
005E82r 2  43 70 6C 61  	oc68:	.byte 1*64+3, "pla"
005E86r 2  85 61 64 63  	oc69:	.byte 2*64+5, "adc.#"
005E8Ar 2  2E 23        
005E8Cr 2  45 72 6F 72  	oc6a:	.byte 1*64+5, "ror.a"
005E90r 2  2E 61        
005E92r 2               ;      (oc6b:)
005E92r 2  C5 6A 6D 70  	oc6c:	.byte 3*64+5, "jmp.i"
005E96r 2  2E 69        
005E98r 2  C3 61 64 63  	oc6d:	.byte 3*64+3, "adc"
005E9Cr 2  C3 72 6F 72  	oc6e:	.byte 3*64+3, "ror"
005EA0r 2  C4 62 62 72  	oc6f:	.byte 3*64+4, "bbr6"
005EA4r 2  36           
005EA5r 2               
005EA5r 2  83 62 76 73  	oc70:	.byte 2*64+3, "bvs"
005EA9r 2  87 61 64 63  	oc71:	.byte 2*64+7, "adc.ziy"
005EADr 2  2E 7A 69 79  
005EB1r 2  86 61 64 63  	oc72:	.byte 2*64+6, "adc.zi"
005EB5r 2  2E 7A 69     
005EB8r 2               ;      (oc73:)
005EB8r 2  86 73 74 7A  	oc74:	.byte 2*64+6, "stz.zx"
005EBCr 2  2E 7A 78     
005EBFr 2  86 61 64 63  	oc75:	.byte 2*64+6, "adc.zx"
005EC3r 2  2E 7A 78     
005EC6r 2  86 72 6F 72  	oc76:	.byte 2*64+6, "ror.zx"
005ECAr 2  2E 7A 78     
005ECDr 2  86 72 6D 62  	oc77:	.byte 2*64+6, "rmb7.z"
005ED1r 2  37 2E 7A     
005ED4r 2  43 73 65 69  	oc78:	.byte 1*64+3, "sei"
005ED8r 2  C5 61 64 63  	oc79:	.byte 3*64+5, "adc.y"
005EDCr 2  2E 79        
005EDEr 2  43 70 6C 79  	oc7a:	.byte 1*64+3, "ply"
005EE2r 2               ;      (oc7b:)
005EE2r 2  C6 6A 6D 70  	oc7c:	.byte 3*64+6, "jmp.xi"
005EE6r 2  2E 78 69     
005EE9r 2  C5 61 64 63  	oc7d:	.byte 3*64+5, "adc.x"
005EEDr 2  2E 78        
005EEFr 2  C5 72 6F 72  	oc7e:	.byte 3*64+5, "ror.x"
005EF3r 2  2E 78        
005EF5r 2  C4 62 62 72  	oc7f:	.byte 3*64+4, "bbr7"
005EF9r 2  37           
005EFAr 2               
005EFAr 2  83 62 72 61  	oc80:	.byte 2*64+3, "bra"
005EFEr 2  87 73 74 61  	oc81:	.byte 2*64+7, "sta.zxi"
005F02r 2  2E 7A 78 69  
005F06r 2               ;      (oc82:)
005F06r 2               ;      (oc83:)
005F06r 2  85 73 74 79  	oc84:	.byte 2*64+5, "sty.z"
005F0Ar 2  2E 7A        
005F0Cr 2  85 73 74 61  	oc85:	.byte 2*64+5, "sta.z"
005F10r 2  2E 7A        
005F12r 2  85 73 74 78  	oc86:	.byte 2*64+5, "stx.z"
005F16r 2  2E 7A        
005F18r 2               ;      (oc87:)
005F18r 2  43 64 65 79  	oc88:	.byte 1*64+3, "dey"
005F1Cr 2  85 62 69 74  	oc89:	.byte 2*64+5, "bit.#"
005F20r 2  2E 23        
005F22r 2  43 74 78 61  	oc8a:	.byte 1*64+3, "txa"
005F26r 2               ;      (oc8b:)
005F26r 2  C3 73 74 79  	oc8c:	.byte 3*64+3, "sty"
005F2Ar 2  C3 73 74 61  	oc8d:	.byte 3*64+3, "sta"
005F2Er 2  C3 73 74 78  	oc8e:	.byte 3*64+3, "stx"
005F32r 2  C4 62 62 73  	oc8f:	.byte 3*64+4, "bbs0"
005F36r 2  30           
005F37r 2               
005F37r 2  83 62 63 63  	oc90:	.byte 2*64+3, "bcc"
005F3Br 2  87 73 74 61  	oc91:	.byte 2*64+7, "sta.ziy"
005F3Fr 2  2E 7A 69 79  
005F43r 2  86 73 74 61  	oc92:	.byte 2*64+6, "sta.zi"
005F47r 2  2E 7A 69     
005F4Ar 2               ;      (oc93:)
005F4Ar 2  86 73 74 79  	oc94:	.byte 2*64+6, "sty.zx"
005F4Er 2  2E 7A 78     
005F51r 2  86 73 74 61  	oc95:	.byte 2*64+6, "sta.zx"
005F55r 2  2E 7A 78     
005F58r 2  86 73 74 78  	oc96:	.byte 2*64+6, "stx.zy"
005F5Cr 2  2E 7A 79     
005F5Fr 2  86 73 6D 62  	oc97:	.byte 2*64+6, "smb1.z"
005F63r 2  31 2E 7A     
005F66r 2  43 74 79 61  	oc98:	.byte 1*64+3, "tya"
005F6Ar 2  C5 73 74 61  	oc99:	.byte 3*64+5, "sta.y"
005F6Er 2  2E 79        
005F70r 2  43 74 78 73  	oc9a:	.byte 1*64+3, "txs"
005F74r 2               ;      (oc9b:)
005F74r 2  C3 73 74 7A  	oc9c:	.byte 3*64+3, "stz"
005F78r 2  C5 73 74 61  	oc9d:	.byte 3*64+5, "sta.x"
005F7Cr 2  2E 78        
005F7Er 2  C5 73 74 7A  	oc9e:	.byte 3*64+5, "stz.x"
005F82r 2  2E 78        
005F84r 2  C4 62 62 73  	oc9f:	.byte 3*64+4, "bbs1"
005F88r 2  31           
005F89r 2               
005F89r 2  85 6C 64 79  	oca0:	.byte 2*64+5, "ldy.#"
005F8Dr 2  2E 23        
005F8Fr 2  87 6C 64 61  	oca1:	.byte 2*64+7, "lda.zxi"
005F93r 2  2E 7A 78 69  
005F97r 2  85 6C 64 78  	oca2:	.byte 2*64+5, "ldx.#"
005F9Br 2  2E 23        
005F9Dr 2               ;      (oca3:)
005F9Dr 2  85 6C 64 79  	oca4:	.byte 2*64+5, "ldy.z"
005FA1r 2  2E 7A        
005FA3r 2  85 6C 64 61  	oca5:	.byte 2*64+5, "lda.z"
005FA7r 2  2E 7A        
005FA9r 2  85 6C 64 78  	oca6:	.byte 2*64+5, "ldx.z"
005FADr 2  2E 7A        
005FAFr 2  86 73 6D 62  	oca7:	.byte 2*64+6, "smb2.z"
005FB3r 2  32 2E 7A     
005FB6r 2  43 74 61 79  	oca8:	.byte 1*64+3, "tay"
005FBAr 2  85 6C 64 61  	oca9:	.byte 2*64+5, "lda.#"
005FBEr 2  2E 23        
005FC0r 2  43 74 61 78  	ocaa:	.byte 1*64+3, "tax"
005FC4r 2               ;      (ocab:)
005FC4r 2  C3 6C 64 79  	ocac:	.byte 3*64+3, "ldy"
005FC8r 2  C3 6C 64 61  	ocad:	.byte 3*64+3, "lda"
005FCCr 2  C3 6C 64 78  	ocae:	.byte 3*64+3, "ldx"
005FD0r 2  C4 62 62 73  	ocaf:	.byte 3*64+4, "bbs2"
005FD4r 2  32           
005FD5r 2               
005FD5r 2  83 62 63 73  	ocb0:	.byte 2*64+3, "bcs"
005FD9r 2  87 6C 64 61  	ocb1:	.byte 2*64+7, "lda.ziy"
005FDDr 2  2E 7A 69 79  
005FE1r 2  86 6C 64 61  	ocb2:	.byte 2*64+6, "lda.zi"
005FE5r 2  2E 7A 69     
005FE8r 2               ;      (ocb3:)
005FE8r 2  86 6C 64 79  	ocb4:	.byte 2*64+6, "ldy.zx"
005FECr 2  2E 7A 78     
005FEFr 2  86 6C 64 61  	ocb5:	.byte 2*64+6, "lda.zx"
005FF3r 2  2E 7A 78     
005FF6r 2  86 6C 64 78  	ocb6:	.byte 2*64+6, "ldx.zy"
005FFAr 2  2E 7A 79     
005FFDr 2  86 73 6D 62  	ocb7:	.byte 2*64+6, "smb3.z"
006001r 2  33 2E 7A     
006004r 2  43 63 6C 76  	ocb8:	.byte 1*64+3, "clv"
006008r 2  C5 6C 64 61  	ocb9:	.byte 3*64+5, "lda.y"
00600Cr 2  2E 79        
00600Er 2  43 74 73 78  	ocba:	.byte 1*64+3, "tsx"
006012r 2               ;      (ocbb:)
006012r 2  C5 6C 64 79  	ocbc:	.byte 3*64+5, "ldy.x"
006016r 2  2E 78        
006018r 2  C5 6C 64 61  	ocbd:	.byte 3*64+5, "lda.x"
00601Cr 2  2E 78        
00601Er 2  C5 6C 64 78  	ocbe:	.byte 3*64+5, "ldx.y"
006022r 2  2E 79        
006024r 2  C4 62 62 73  	ocbf:	.byte 3*64+4, "bbs4"
006028r 2  34           
006029r 2               
006029r 2  85 63 70 79  	occ0:	.byte 2*64+5, "cpy.#"
00602Dr 2  2E 23        
00602Fr 2  87 63 6D 70  	occ1:	.byte 2*64+7, "cmp.zxi"
006033r 2  2E 7A 78 69  
006037r 2               ;      (occ2:)
006037r 2               ;      (occ3:)
006037r 2  85 63 70 79  	occ4:	.byte 2*64+5, "cpy.z"
00603Br 2  2E 7A        
00603Dr 2  85 63 6D 70  	occ5:	.byte 2*64+5, "cmp.z"
006041r 2  2E 7A        
006043r 2  85 64 65 63  	occ6:	.byte 2*64+5, "dec.z"
006047r 2  2E 7A        
006049r 2  86 73 6D 62  	occ7:	.byte 2*64+6, "smb4.z"
00604Dr 2  34 2E 7A     
006050r 2  43 69 6E 79  	occ8:	.byte 1*64+3, "iny"
006054r 2  85 63 6D 70  	occ9:	.byte 2*64+5, "cmp.#"
006058r 2  2E 23        
00605Ar 2  43 64 65 78  	occa:	.byte 1*64+3, "dex"
00605Er 2               ;      (occb:)
00605Er 2  C3 63 70 79  	occc:	.byte 3*64+3, "cpy"
006062r 2  C3 63 6D 70  	occd:	.byte 3*64+3, "cmp"
006066r 2  C3 64 65 63  	occe:	.byte 3*64+3, "dec"
00606Ar 2  C4 62 62 73  	occf:	.byte 3*64+4, "bbs4"
00606Er 2  34           
00606Fr 2               
00606Fr 2  83 62 6E 65  	ocd0:	.byte 2*64+3, "bne"
006073r 2  87 63 6D 70  	ocd1:	.byte 2*64+7, "cmp.ziy"
006077r 2  2E 7A 69 79  
00607Br 2  86 63 6D 70  	ocd2:	.byte 2*64+6, "cmp.zi"
00607Fr 2  2E 7A 69     
006082r 2               ;      (ocd3:)
006082r 2               ;      (ocd4:)
006082r 2  86 63 6D 70  	ocd5:	.byte 2*64+6, "cmp.zx"
006086r 2  2E 7A 78     
006089r 2  86 64 65 63  	ocd6:	.byte 2*64+6, "dec.zx"
00608Dr 2  2E 7A 78     
006090r 2  86 73 6D 62  	ocd7:	.byte 2*64+6, "smb5.z"
006094r 2  35 2E 7A     
006097r 2  43 63 6C 64  	ocd8:	.byte 1*64+3, "cld"
00609Br 2  C5 63 6D 70  	ocd9:	.byte 3*64+5, "cmp.y"
00609Fr 2  2E 79        
0060A1r 2  43 70 68 78  	ocda:	.byte 1*64+3, "phx"
0060A5r 2               ;      (ocdb:)
0060A5r 2               ;      (ocdc:)
0060A5r 2  C5 63 6D 70  	ocdd:	.byte 3*64+5, "cmp.x"
0060A9r 2  2E 78        
0060ABr 2  C5 64 65 63  	ocde:	.byte 3*64+5, "dec.x"
0060AFr 2  2E 78        
0060B1r 2  C4 62 62 73  	ocdf:	.byte 3*64+4, "bbs5"
0060B5r 2  35           
0060B6r 2               
0060B6r 2  85 63 70 78  	oce0:	.byte 2*64+5, "cpx.#"
0060BAr 2  2E 23        
0060BCr 2  87 73 62 63  	oce1:	.byte 2*64+7, "sbc.zxi"
0060C0r 2  2E 7A 78 69  
0060C4r 2               ;      (oce2:)
0060C4r 2               ;      (oce3:)
0060C4r 2  85 63 70 78  	oce4:	.byte 2*64+5, "cpx.z"
0060C8r 2  2E 7A        
0060CAr 2  85 73 62 63  	oce5:	.byte 2*64+5, "sbc.z"
0060CEr 2  2E 7A        
0060D0r 2  85 69 6E 63  	oce6:	.byte 2*64+5, "inc.z"
0060D4r 2  2E 7A        
0060D6r 2  86 73 6D 62  	oce7:	.byte 2*64+6, "smb6.z"
0060DAr 2  36 2E 7A     
0060DDr 2  43 69 6E 78  	oce8:	.byte 1*64+3, "inx"
0060E1r 2  85 73 62 63  	oce9:	.byte 2*64+5, "sbc.#"
0060E5r 2  2E 23        
0060E7r 2  43 6E 6F 70  	ocea:	.byte 1*64+3, "nop"
0060EBr 2               ;      (oceb:)
0060EBr 2  C3 63 70 78  	ocec:	.byte 3*64+3, "cpx"
0060EFr 2  C3 73 62 63  	oced:	.byte 3*64+3, "sbc"
0060F3r 2  C3 69 6E 63  	ocee:	.byte 3*64+3, "inc"
0060F7r 2  C4 62 62 73  	ocef:	.byte 3*64+4, "bbs6"
0060FBr 2  36           
0060FCr 2               
0060FCr 2  83 62 65 71  	ocf0:	.byte 2*64+3, "beq"
006100r 2  87 73 62 63  	ocf1:	.byte 2*64+7, "sbc.ziy"
006104r 2  2E 7A 69 79  
006108r 2  86 73 62 63  	ocf2:	.byte 2*64+6, "sbc.zi"
00610Cr 2  2E 7A 69     
00610Fr 2               ;      (ocf3:)
00610Fr 2               ;      (ocf4:)
00610Fr 2  86 73 62 63  	ocf5:	.byte 2*64+6, "sbc.zx"
006113r 2  2E 7A 78     
006116r 2  86 69 6E 63  	ocf6:	.byte 2*64+6, "inc.zx"
00611Ar 2  2E 7A 78     
00611Dr 2  86 73 6D 62  	ocf7:	.byte 2*64+6, "smb7.z"
006121r 2  37 2E 7A     
006124r 2  43 73 65 64  	ocf8:	.byte 1*64+3, "sed"
006128r 2  C5 73 62 63  	ocf9:	.byte 3*64+5, "sbc.y"
00612Cr 2  2E 79        
00612Er 2  43 70 6C 78  	ocfa:	.byte 1*64+3, "plx"
006132r 2               ;      (ocfb:)
006132r 2               ;      (ocfc:)
006132r 2  C5 73 62 63  	ocfd:	.byte 3*64+5, "sbc.x"
006136r 2  2E 78        
006138r 2  C5 69 6E 63  	ocfe:	.byte 3*64+5, "inc.x"
00613Cr 2  2E 78        
00613Er 2  C4 62 62 73  	ocff:	.byte 3*64+4, "bbs7"
006142r 2  37           
006143r 2               
006143r 2                       ; Common routine for opcodes that are not supported by the 65c02
006143r 2  01 3F        	oc__:	.byte 1, "?"
006145r 2               
006145r 2               ; used to calculate size of assembled disassembler code
006145r 2               disassembler_end:
006145r 2               
006145r 1               .endif
006145r 1               
006145r 1               platform_bye:
006145r 1               kernel_init:
006145r 1               .ifdef VIA1_BASE
006145r 1  A9 FF            lda #$FF
006147r 1  8D 82 FF         sta DDRB
00614Ar 1  8D 83 FF         sta DDRA
00614Dr 1  A9 01            lda #1
00614Fr 1  8D 80 FF         sta PORTB
006152r 1  9C 81 FF         stz PORTA
006155r 1               .endif
006155r 1               .ifdef ENABLE_RAM_EXPANSION
006155r 1               .if ENABLE_RAM_EXPANSION = 1
006155r 1  64 rr        stz ram_expansion_address
006157r 1  64 rr        stz ram_expansion_address + 1
006159r 1               .endif
006159r 1               .endif
006159r 1               
006159r 1               
006159r 1  20 rr rr     jsr acia_init
00615Cr 1               .ifdef timer_init
00615Cr 1  20 rr rr         jsr timer_init
00615Fr 1               .endif
00615Fr 1               .ifdef video_init
00615Fr 1                   jsr video_init
00615Fr 1               .endif
00615Fr 1               .ifdef ps2_init
00615Fr 1  20 rr rr         jsr ps2_init
006162r 1               .endif
006162r 1               .ifdef cf_init
006162r 1  20 rr rr         jsr cf_init
006165r 1               .endif
006165r 1               .ifdef lcd_init
006165r 1  20 rr rr         jsr lcd_init
006168r 1               .endif
006168r 1               .ifdef spi_init
006168r 1  20 rr rr         jsr spi_init
00616Br 1               .endif
00616Br 1               .ifdef kb_init
00616Br 1                   jsr kb_init
00616Br 1               .endif
00616Br 1               
00616Br 1  DA A2 00 BD      printascii welcome_message
00616Fr 1  rr rr F0 06  
006173r 1  20 rr rr E8  
00617Ar 1               
00617Ar 1                   ; lda #<dictionary
00617Ar 1                   ; sta util_tmp
00617Ar 1                   ; lda #>dictionary
00617Ar 1                   ; sta util_tmp + 1
00617Ar 1               
00617Ar 1                   ; jsr calculate_free_mem
00617Ar 1                   ; lda tmp_var + 1
00617Ar 1                   ; ldx tmp_var
00617Ar 1                   ; jsr print16
00617Ar 1               
00617Ar 1                   ; printascii free_message
00617Ar 1               
00617Ar 1               
00617Ar 1  4C rr rr         jmp forth
00617Dr 1               
00617Dr 1               v_nmi:
00617Dr 1               
00617Dr 1                   ; jsr calculate_free_mem
00617Dr 1                   ; lda tmp_var + 1
00617Dr 1                   ; ldx tmp_var
00617Dr 1                   ; jsr print16
00617Dr 1               
00617Dr 1                   ; printascii free_message
00617Dr 1  DA A2 00 BD      printascii ready_message
006181r 1  rr rr F0 06  
006185r 1  20 rr rr E8  
00618Cr 1               
00618Cr 1  4C rr rr         jmp xt_abort
00618Fr 1               
00618Fr 1               
00618Fr 1               
00618Fr 1               .ifdef io_read_sector_address
00618Fr 1               io_read_sector:
00618Fr 1  4C rr rr         jmp io_read_sector_address        ; jump to read sector routine
006192r 1               
006192r 1               io_write_sector:
006192r 1  4C rr rr         jmp io_write_sector_address        ; jump to read sector routine
006195r 1               .endif
006195r 1               
006195r 1               
006195r 1               kernel_putc:
006195r 1                   ; """Print a single character to the console. """
006195r 1                   ;; Send_Char - send character in A out serial port.
006195r 1                   ;; Uses: A (original value restored)
006195r 1               send_char:
006195r 1  48               pha
006196r 1                   .ifdef char_out
006196r 1                   jsr char_out
006196r 1                   .endif
006196r 1                   .ifdef acia_out
006196r 1  20 rr rr         jsr acia_out
006199r 1                   .endif
006199r 1               send_char_exit:
006199r 1               .ifdef lcd_print
006199r 1  20 rr rr         jsr lcd_print
00619Cr 1               .endif
00619Cr 1  68               pla
00619Dr 1  60               rts
00619Er 1               
00619Er 1               
00619Er 1                       ;; Get_Char - get a character from the serial port into A.
00619Er 1                       ;; Set the carry flag if char is valid.
00619Er 1                       ;; Return immediately with carry flag clear if no char available.
00619Er 1                       ;; Uses: A (return value)
00619Er 1               
00619Er 1               Get_Char:
00619Er 1  20 rr rr         jsr acia_getc
0061A1r 1  90 01            bcc get_ps2_char                ; check keyboard buffer if nothing from ACIA
0061A3r 1                                                   ; Carry is set to show we got a character
0061A3r 1  60               rts                             ; Return
0061A4r 1               
0061A4r 1               get_ps2_char:                       ; no ACIA char available, try to get from KB buffer
0061A4r 1               .ifdef ps2_get_char
0061A4r 1  20 rr rr         jsr ps2_get_char
0061A7r 1               .endif
0061A7r 1  90 01            bcc get_kb_char
0061A9r 1  60               rts
0061AAr 1               get_kb_char:
0061AAr 1               .ifdef kb_get_char
0061AAr 1                   jsr kb_get_char
0061AAr 1               .endif
0061AAr 1               exit:                         ; Indicate no char available.
0061AAr 1  60               rts                             ; return
0061ABr 1               
0061ABr 1               kernel_getc:
0061ABr 1                   ; """Get a single character from the keyboard (waits for key).
0061ABr 1                   ; """
0061ABr 1                   ;; Get_Char_Wait - same as Get_Char only blocking.
0061ABr 1                   ;; Uses: A (return value)
0061ABr 1               Get_Char_Wait:
0061ABr 1  20 rr rr         jsr Get_Char
0061AEr 1  90 FB            bcc Get_Char_Wait
0061B0r 1  60               rts
0061B1r 1               
0061B1r 1               
0061B1r 1               v_irq:                          ; IRQ handler
0061B1r 1  48                   pha
0061B2r 1  5A                   phy
0061B3r 1                       ; lda #'.'
0061B3r 1                       ; jsr kernel_putc
0061B3r 1                       ; check if bit 7 of IFR is set
0061B3r 1               .ifdef IFR
0061B3r 1  AD 8D FF             lda IFR
0061B6r 1  10 0B                bpl irq_not_from_via  ; Interrupt not from VIA, exit
0061B8r 1               
0061B8r 1  29 08                and #$08        ; ps2 has priority
0061BAr 1  D0 07                bne v_irq_ps2
0061BCr 1  AD 8D FF             lda IFR
0061BFr 1  29 40                and #$40
0061C1r 1  D0 15                bne v_irq_timer
0061C3r 1               irq_not_from_via:
0061C3r 1               .endif
0061C3r 1               .ifdef KB_IFR
0061C3r 1               v_kb_irq:
0061C3r 1                       lda KB_IFR
0061C3r 1                       bpl v_irq_exit
0061C3r 1                       and #$40
0061C3r 1                       bne v_kb_irq_timer
0061C3r 1                       bra v_irq_exit
0061C3r 1               .endif
0061C3r 1               
0061C3r 1               v_irq_ps2:
0061C3r 1                   .ifdef ps2_irq
0061C3r 1  A5 rr                lda time
0061C5r 1  85 rr                sta last_ps2_time
0061C7r 1  A5 rr                lda time+1
0061C9r 1  85 rr                sta last_ps2_time+1
0061CBr 1  A5 rr                lda time+2
0061CDr 1  85 rr                sta last_ps2_time+2
0061CFr 1  A5 rr                lda time+3
0061D1r 1  85 rr                sta last_ps2_time+3
0061D3r 1               
0061D3r 1  20 rr rr             jsr ps2_irq
0061D6r 1               
0061D6r 1                   .endif
0061D6r 1  80 27                bra v_irq_exit
0061D8r 1               
0061D8r 1               .ifdef T1CL
0061D8r 1               v_irq_timer:
0061D8r 1  AD 84 FF             lda T1CL
0061DBr 1                       ; clear timer interrupt
0061DBr 1                   .ifdef timer_irq
0061DBr 1  20 rr rr             jsr timer_irq
0061DEr 1                   .endif
0061DEr 1  20 rr rr             jsr Get_Char ; Check if a char is waiting to be able to break on CTRL-C
0061E1r 1                       ; check if there is a char waiting to be printed to the lcd
0061E1r 1                       ; lda lcd_char
0061E1r 1                       ; beq v_exit
0061E1r 1                       ; jsr lcd_print
0061E1r 1                       ; stz lcd_char
0061E1r 1               
0061E1r 1               
0061E1r 1  90 1C                bcc v_irq_exit      ; no character waiting, exit normally
0061E3r 1  C9 03                cmp #$03            ; check if CTRL-C
0061E5r 1  D0 18                bne v_irq_exit      ; not CTRL-C, exit normally
0061E7r 1  DA A2 00 BD          printascii abort_message    ; was a CTRL_C
0061EBr 1  rr rr F0 06  
0061EFr 1  20 rr rr E8  
0061F6r 1  7A                   ply                         ; pull what the ISR pushed
0061F7r 1  68                   pla
0061F8r 1  28                   plp                         ; pull status register
0061F9r 1  68                   pla                         ; pull return address
0061FAr 1  68                   pla
0061FBr 1               
0061FBr 1  58                   cli                         ; clear interrupt disabled bit
0061FCr 1  4C rr rr             jmp xt_abort
0061FFr 1               
0061FFr 1               .endif
0061FFr 1               v_kb_irq_timer:
0061FFr 1               .ifdef kb_time
0061FFr 1                   lda KB_T1CL ; clear timer interrupt
0061FFr 1                   inc kb_time
0061FFr 1                   bne v_irq_exit
0061FFr 1               
0061FFr 1               .endif
0061FFr 1                   ;jsr kb_scan
0061FFr 1               v_irq_exit:
0061FFr 1  7A               ply
006200r 1  68               pla
006201r 1  40               rti
006202r 1               
006202r 1  20 62 79 74  free_message: .byte " bytes free", $0D, 0
006206r 1  65 73 20 66  
00620Ar 1  72 65 65 0D  
00620Fr 1  52 65 61 64  ready_message: .byte "Ready", $0D, 0
006213r 1  79 0D 00     
006216r 1  57 65 6C 63  welcome_message: .byte "Welcome to Planck 6502", $0D, "Type 'words' for available words", $0D, 0
00621Ar 1  6F 6D 65 20  
00621Er 1  74 6F 20 50  
00624Fr 1  0D 0A 00     abort_message: .byte AscCR, AscLF, 0
006252r 1               
006252r 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        .word v_nmi
000002r 1  rr rr        .word v_reset
000004r 1  rr rr        .word v_irq
000004r 1               
