ca65 V2.18 - N/A
Main file   : platform/planck/main.s
Current file: platform/planck/main.s

000000r 1               
000000r 1               .include "../../macros.s"
000000r 2               .macro  printascii   addr
000000r 2               .local @loop
000000r 2               .local @done
000000r 2                   phx
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda addr,x
000000r 2                   beq @done
000000r 2                   jsr kernel_putc
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @done:
000000r 2                   plx
000000r 2               .endmacro
000000r 2               
000000r 2               .macro  cp16   src, dest
000000r 2                   lda src
000000r 2                   sta dest
000000r 2                   lda src + 1
000000r 2                   sta dest + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro printstr addr, len
000000r 2               .repeat len, I
000000r 2               lda addr + I
000000r 2               jsr kernel_putc
000000r 2               .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl16 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro lsr16 src
000000r 2                   lsr src + 1
000000r 2                   ror src
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc16 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment the MSB if LSB wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16 src
000000r 2                   lda src
000000r 2                   bne @skip
000000r 2                   dec src + 1
000000r 2               @skip:
000000r 2                   dec src
000000r 2               .endmacro
000000r 2               
000000r 2               .macro add16 first, second, result
000000r 2                   CLC             ;Ensure carry is clear
000000r 2                   LDA first+0       ;Add the two least significant bytes
000000r 2                   ADC second+0
000000r 2                   STA result+0       ;... and store the result
000000r 2                   LDA first+1       ;Add the two most significant bytes
000000r 2                   ADC second+1       ;... and any propagated carry bit
000000r 2                   STA result+1       ;... and store the result
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               
000000r 2               .macro push_axy
000000r 2               	pha		; push accumulator to stack
000000r 2               	phx
000000r 2                   phy
000000r 2               .endmacro
000000r 2               
000000r 2               .macro pull_axy
000000r 2               	ply		; pull y from stack
000000r 2               	plx		; pull x from stack
000000r 2               	pla		; pull a from stack
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro push_ax
000000r 2               	pha
000000r 2               	phx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ax
000000r 2               	pla
000000r 2               	plx
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_ay
000000r 2               	pha
000000r 2               	phy
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ay
000000r 2               	pla
000000r 2               	ply
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro mov16 SRC, DEST
000000r 2               	lda SRC
000000r 2               	sta DEST
000000r 2               	lda SRC+1
000000r 2               	sta DEST+1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro mov32 SRC, DEST
000000r 2               	lda SRC
000000r 2               	sta DEST
000000r 2               	lda SRC+1
000000r 2               	sta DEST+1
000000r 2               	lda SRC+2
000000r 2               	sta DEST+2
000000r 2               	lda SRC+3
000000r 2               	sta DEST+3
000000r 2               .endmacro
000000r 2               
000000r 1               CLOCK_SPEED = 24000000
000000r 1               
000000r 1               ram_end = $8000
000000r 1               
000000r 1               .include "drivers/cf.inc"
000000r 2               
000000r 2               CF_BASE = $FFD0
000000r 2               CF_REG_0 = CF_BASE
000000r 2               CF_REG_1 = CF_BASE + 1
000000r 2               CF_REG_2 = CF_BASE + 2
000000r 2               CF_REG_3 = CF_BASE + 3
000000r 2               CF_REG_4 = CF_BASE + 4
000000r 2               CF_REG_5 = CF_BASE + 5
000000r 2               CF_REG_6 = CF_BASE + 6
000000r 2               CF_REG_7 = CF_BASE + 7
000000r 2               
000000r 2               CF_READ_SECTOR_COMMAND = $20
000000r 2               
000000r 1               .include "drivers/acia.inc"
000000r 2               ACIA_BASE   = $FFE0
000000r 2               ACIA_DATA = ACIA_BASE
000000r 2               ACIA_STATUS = ACIA_BASE + 1
000000r 2               ACIA_CMD = ACIA_BASE + 2
000000r 2               ACIA_CTRL = ACIA_BASE + 3
000000r 2               
000000r 2               
000000r 1               .include "drivers/via.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               VIA1_BASE   = $FF80
000000r 2               PORTB = VIA1_BASE
000000r 2               PORTA  = VIA1_BASE+1
000000r 2               DDRB = VIA1_BASE+2
000000r 2               DDRA = VIA1_BASE+3
000000r 2               
000000r 2               
000000r 2               T1CL = VIA1_BASE + 4
000000r 2               T1CH = VIA1_BASE + 5
000000r 2               T1LL = VIA1_BASE + 6
000000r 2               T1LH = VIA1_BASE + 7
000000r 2               ACR = VIA1_BASE + 11
000000r 2               PCR = VIA1_BASE + 12
000000r 2               IFR = VIA1_BASE + 13
000000r 2               IER = VIA1_BASE + 14
000000r 2               
000000r 1               .include "drivers/ps2.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               DATA = $80   ; Data is in bit 7 of PORTA
000000r 2               ; clock is on CA2
000000r 2               SHIFT = $1
000000r 2               ALT = $2
000000r 2               
000000r 2               KB_STATE_START = $0
000000r 2               KB_STATE_DATA = $1
000000r 2               KB_STATE_PARITY = $2
000000r 2               KB_STATE_STOP = $3
000000r 2               
000000r 2               KB_INIT_STATE_RESET = $0
000000r 2               KB_INIT_STATE_RESET_ACK = $1
000000r 2               KB_INIT_STATE_LEDS = $2
000000r 2               KB_INIT_STATE_LEDS_ACK = $3
000000r 2               KB_INIT_STATE_LEDS_DATA = $4
000000r 2               KB_INIT_STATE_LEDS_DATA_ACK = $5
000000r 2               
000000r 2               LSHIFT_KEY = $12
000000r 2               RSHIFT_KEY = $59
000000r 2               
000000r 2               TIMER_DELAY = $C4
000000r 2               
000000r 2               
000000r 1               ; .include "drivers/4004.inc"
000000r 1               .include "drivers/lcd.inc"
000000r 2               
000000r 2               ; HD 44780 driver
000000r 2               ; all pins on VIA PORTA, 4 bit mode
000000r 2               
000000r 2               ; PORTA0 is free
000000r 2               LCD_BASE = $FFC0
000000r 2               LCD_ADDR_DISABLED = LCD_BASE
000000r 2               LCD_ADDR_ENABLED = LCD_BASE + 1
000000r 2               LCD_DATA_DISABLED = LCD_BASE + 2
000000r 2               LCD_DATA_ENABLED = LCD_BASE + 3
000000r 2               
000000r 2               
000000r 2               ; A0: RS
000000r 2               ; A1: E
000000r 2               
000000r 1               .include "drivers/vga.inc"
000000r 2               VIDEO_BASE = $FFB0
000000r 2               
000000r 2               VIDEO_CTRL = VIDEO_BASE       ;// Formatted as follows |INCR_5|INCR_4|INCR_3|INCR_2|INCR_1|INCR_0|MODE_1|MODE_0|  default to LORES
000000r 2               VIDEO_ADDR_LOW = VIDEO_BASE + 1   ;// also contains the increment ||||ADDR4|ADDR_3|ADDR_2|ADDR_1|ADDR_0|
000000r 2               VIDEO_ADDR_HIGH = VIDEO_BASE + 2
000000r 2               VIDEO_DATA = VIDEO_BASE + 3
000000r 2               VIDEO_IEN = VIDEO_BASE + 4    ;// formatted as follows |VSYNC| | | | | | |HSYNC|
000000r 2               VIDEO_INTR = VIDEO_BASE + 5   ;// formatted as follows |VSYNC| | | | | | |HSYNC|
000000r 2               VIDEO_HSCROLL = VIDEO_BASE + 6
000000r 2               VIDEO_VSCROLL = VIDEO_BASE + 7
000000r 2               
000000r 2               VIDEO_HIRES_HCHARS = 80
000000r 2               VIDEO_HIRES_VCHARS = 60
000000r 2               
000000r 1               .include "drivers/keyboard.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               KB_VIA_BASE   = $FF90
000000r 2               KB_PORTB = KB_VIA_BASE
000000r 2               KB_PORTA  = KB_VIA_BASE+1
000000r 2               KB_DDRB = KB_VIA_BASE+2
000000r 2               KB_DDRA = KB_VIA_BASE+3
000000r 2               
000000r 2               
000000r 2               KB_T1CL = KB_VIA_BASE + 4
000000r 2               KB_T1CH = KB_VIA_BASE + 5
000000r 2               KB_T1LL = KB_VIA_BASE + 6
000000r 2               KB_T1LH = KB_VIA_BASE + 7
000000r 2               KB_ACR = KB_VIA_BASE + 11
000000r 2               KB_PCR = KB_VIA_BASE + 12
000000r 2               KB_IFR = KB_VIA_BASE + 13
000000r 2               KB_IER = KB_VIA_BASE + 14
000000r 2               
000000r 1               
000000r 1               
000000r 1               
000000r 1               .include "drivers/zp.s"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               ; next_addr: .res 1
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 2               .segment "ZEROPAGE": zeropage
000000r 2               
000000r 2  xx xx        stack_p: .res 2
000002r 2               
000002r 2               
000002r 1               
000002r 1               
000002r 1               .segment "RODATA"
000000r 1               
000000r 1               .import    copydata
000000r 1               .import zerobss
000000r 1               
000000r 1               .segment "STARTUP"
000000r 1               
000000r 1               v_reset:
000000r 1               
000000r 1  20 rr rr         JSR     copydata
000003r 1  20 rr rr         jsr zerobss
000006r 1               
000006r 1  4C rr rr         jmp kernel_init
000009r 1               
000009r 1               
000009r 1               
000009r 1               
000009r 1               .include "drivers/acia.s"
000009r 2               .segment "DATA"
000000r 2               
000000r 2               acia_init:
000000r 2  8D E1 FF         sta ACIA_STATUS        ; soft reset (value not important)
000003r 2                                           ; set specific modes and functions
000003r 2  9C rr rr         stz has_acia
000006r 2  A9 0B            lda #$0B                ; no parity, no echo, no Tx interrupt, NO Rx interrupt, enable Tx/Rx
000008r 2                   ;lda #$09               ; no parity, no echo, no Tx interrupt, Rx interrupt, enable Tx/Rx
000008r 2  8D E2 FF         sta ACIA_CMD        ; store to the command register
00000Br 2  AD E2 FF         lda ACIA_CMD        ; load command register again
00000Er 2  C9 0B            cmp #$0B                ; if not the same
000010r 2  D0 11            bne acia_absent         ; then it means the ACIA is not connected
000012r 2  AD E1 FF         lda ACIA_STATUS         ; Read the ACAI status to
000015r 2  29 60            and #$60                ; check if present or absent
000017r 2  D0 0A            bne acia_absent
000019r 2  A9 01            lda #1
00001Br 2  8D rr rr         sta has_acia           ; remember that ACIA is here
00001Er 2  A9 10            lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 115.200k baud rate
000020r 2                   ;lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 1200 baud rate
000020r 2  8D E3 FF         sta ACIA_CTRL          ; program the ctl register
000023r 2               
000023r 2               acia_absent:
000023r 2  A0 14                ldy #20
000025r 2               aa_loop:
000025r 2  20 rr rr             jsr delay_short
000028r 2  AD E1 FF             lda ACIA_STATUS         ; Read ACIA data a few times
00002Br 2  AD E0 FF             lda ACIA_DATA           ; to try and prevent spurious characters
00002Er 2  88                   dey
00002Fr 2  D0 F4                bne aa_loop
000031r 2               aa_end:
000031r 2  60                   rts
000032r 2               
000032r 2               acia_out:
000032r 2  48               pha
000033r 2  5A               phy
000034r 2  8D E0 FF         sta ACIA_DATA
000037r 2  A0 20            ldy #$20            ;minimal delay is $02
000039r 2  20 rr rr         jsr delay_short
00003Cr 2  7A               ply
00003Dr 2  68               pla
00003Er 2  60               rts
00003Fr 2               
00003Fr 2               acia_getc:
00003Fr 2  AD E1 FF         lda ACIA_STATUS                 ; Read the ACIA status to
000042r 2  29 08            and #$08                        ; Check if there is character in the receiver
000044r 2  F0 05            beq @no_char      ; Exit now if we don't get one.
000046r 2  AD E0 FF         lda ACIA_DATA
000049r 2  38               sec
00004Ar 2  60               rts
00004Br 2               @no_char:
00004Br 2  18               clc
00004Cr 2  60               rts
00004Dr 2               
00004Dr 1               .include "drivers/timer.s"
00004Dr 2               
00004Dr 2               
00004Dr 2               COUNTER = CLOCK_SPEED/400        ; n/s
00004Dr 2               
00004Dr 2               .segment "ZEROPAGE": zeropage
000002r 2  xx xx xx xx  time: .res 4
000006r 2               
000006r 2               .segment "DATA"
00004Dr 2               
00004Dr 2               timer_init:
00004Dr 2  AD 8E FF         lda IER
000050r 2  09 C0            ora #$C0        ;enable interrupt on timer1 timeout
000052r 2  8D 8E FF         sta IER
000055r 2  A9 40            lda #$40        ; timer one free run mode
000057r 2  8D 8B FF         sta ACR
00005Ar 2  A9 60            lda #<COUNTER     ; set timer to low byte to calculated value from defined clock speed
00005Cr 2  8D 84 FF         sta T1CL
00005Fr 2  A9 EA            lda #>COUNTER       ; set timer to high byte to calculated value from defined clock speed
000061r 2               
000061r 2  8D 85 FF         sta T1CH
000064r 2  A9 00            lda #0              ; reset time variable
000066r 2  85 rr            sta time
000068r 2  85 rr            sta time+1
00006Ar 2  85 rr            sta time+2
00006Cr 2  85 rr            sta time+3
00006Er 2  58               cli
00006Fr 2  60               rts
000070r 2               
000070r 2               
000070r 2               timer_irq:
000070r 2  E6 rr            inc time
000072r 2  F0 01            beq @inc1
000074r 2               @exit1:
000074r 2                   ; this resets the PS/2 temp variables
000074r 2                   ;jsr reset_ps2
000074r 2  60               rts
000075r 2               @inc1:
000075r 2  E6 rr            inc time+1
000077r 2  F0 02            beq @inc2
000079r 2  80 F9            bra @exit1
00007Br 2               @inc2:
00007Br 2  E6 rr            inc time+2
00007Dr 2  F0 02            beq @inc3
00007Fr 2  80 F3            bra @exit1
000081r 2               @inc3:
000081r 2  E6 rr            inc time+3
000083r 2  80 EF            bra @exit1
000085r 2  60               rts
000086r 2               
000086r 1               ; .include "drivers/keyboard.s"
000086r 1               .include "drivers/ps2.s"
000086r 2               ; Copyright 2020 Jonathan Foucher
000086r 2               
000086r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000086r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000086r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000086r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000086r 2               ; is furnished to do so, subject to the following conditions:
000086r 2               
000086r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000086r 2               ; substantial portions of the Software.
000086r 2               
000086r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000086r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000086r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000086r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000086r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000086r 2               ; DEALINGS IN THE SOFTWARE.
000086r 2               
000086r 2               .segment "ZEROPAGE": zeropage
000006r 2               
000006r 2  xx xx xx xx  last_ps2_time: .res 4
00000Ar 2  xx           KB_BUF_W_PTR: .res 1
00000Br 2  xx           KB_BUF_R_PTR: .res 1
00000Cr 2  xx           control_keys: .res 1
00000Dr 2  xx           character: .res 1
00000Er 2               
00000Er 2               .segment "BSS"
000000r 2  xx xx xx xx  KB_BUF: .res 128
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
000080r 2  xx           KB_STATE: .res 1
000081r 2  xx           KB_TEMP: .res 1
000082r 2  xx           KB_PARITY: .res 1
000083r 2  xx           KB_BIT: .res 1
000084r 2  xx           KB_INIT_STATE: .res 1
000085r 2  xx           KB_INIT_WAIT: .res 1
000086r 2  xx           ready: .res 1
000087r 2  xx           to_send: .res 1
000088r 2  xx           ignore_next: .res 1
000089r 2               
000089r 2               .segment "RODATA"
000000r 2               
000000r 2               .include "drivers/keycodes.s"
000000r 3               
000000r 3               
000000r 3               ASCIITBL:
000000r 3  00               .byte $00               ; 00 no key pressed
000001r 3  89               .byte $89               ; 01 F9
000002r 3  87               .byte $87               ; 02 relocated F7
000003r 3  85               .byte $85               ; 03 F5
000004r 3  83               .byte $83               ; 04 F3
000005r 3  81               .byte $81               ; 05 F1
000006r 3  82               .byte $82               ; 06 F2
000007r 3  8C               .byte $8C               ; 07 F12
000008r 3  00               .byte $00               ; 08
000009r 3  8A               .byte $8A               ; 09 F10
00000Ar 3  88               .byte $88               ; 0A F8
00000Br 3  86               .byte $86               ; 0B F6
00000Cr 3  84               .byte $84               ; 0C F4
00000Dr 3  09               .byte $09               ; 0D tab
00000Er 3  60               .byte $60               ; 0E `~
00000Fr 3  8F               .byte $8F               ; 0F relocated Print Screen key
000010r 3  03               .byte $03               ; 10 relocated Pause/Break key
000011r 3  A0               .byte $A0               ; 11 left alt (right alt too)
000012r 3  00               .byte $00               ; 12 left shift
000013r 3  E0               .byte $E0               ; 13 relocated Alt release code
000014r 3  00               .byte $00               ; 14 left ctrl (right ctrl too)
000015r 3  71               .byte $71               ; 15 qQ
000016r 3  31               .byte $31               ; 16 1!
000017r 3  00               .byte $00               ; 17
000018r 3  00               .byte $00               ; 18
000019r 3  00               .byte $00               ; 19
00001Ar 3  7A               .byte $7A               ; 1A zZ
00001Br 3  73               .byte $73               ; 1B sS
00001Cr 3  61               .byte $61               ; 1C aA
00001Dr 3  77               .byte $77               ; 1D wW
00001Er 3  32               .byte $32               ; 1E 2@
00001Fr 3  A1               .byte $A1               ; 1F Windows 98 menu key (left side)
000020r 3  02               .byte $02               ; 20 relocated ctrl-break key
000021r 3  63               .byte $63               ; 21 cC
000022r 3  78               .byte $78               ; 22 xX
000023r 3  64               .byte $64               ; 23 dD
000024r 3  65               .byte $65               ; 24 eE
000025r 3  34               .byte $34               ; 25 4$
000026r 3  33               .byte $33               ; 26 3#
000027r 3  A2               .byte $A2               ; 27 Windows 98 menu key (right side)
000028r 3  00               .byte $00               ; 28
000029r 3  20               .byte $20               ; 29 space
00002Ar 3  76               .byte $76               ; 2A vV
00002Br 3  66               .byte $66               ; 2B fF
00002Cr 3  74               .byte $74               ; 2C tT
00002Dr 3  72               .byte $72               ; 2D rR
00002Er 3  35               .byte $35               ; 2E 5%
00002Fr 3  A3               .byte $A3               ; 2F Windows 98 option key (right click, right side)
000030r 3  00               .byte $00               ; 30
000031r 3  6E               .byte $6E               ; 31 nN
000032r 3  62               .byte $62               ; 32 bB
000033r 3  68               .byte $68               ; 33 hH
000034r 3  67               .byte $67               ; 34 gG
000035r 3  79               .byte $79               ; 35 yY
000036r 3  36               .byte $36               ; 36 6^
000037r 3  00               .byte $00               ; 37
000038r 3  00               .byte $00               ; 38
000039r 3  00               .byte $00               ; 39
00003Ar 3  6D               .byte $6D               ; 3A mM
00003Br 3  6A               .byte $6A               ; 3B jJ
00003Cr 3  75               .byte $75               ; 3C uU
00003Dr 3  37               .byte $37               ; 3D 7&
00003Er 3  38               .byte $38               ; 3E 8*
00003Fr 3  00               .byte $00               ; 3F
000040r 3  00               .byte $00               ; 40
000041r 3  2C               .byte $2C               ; 41 ,<
000042r 3  6B               .byte $6B               ; 42 kK
000043r 3  69               .byte $69               ; 43 iI
000044r 3  6F               .byte $6F               ; 44 oO
000045r 3  30               .byte $30               ; 45 0)
000046r 3  39               .byte $39               ; 46 9(
000047r 3  00               .byte $00               ; 47
000048r 3  00               .byte $00               ; 48
000049r 3  2E               .byte $2E               ; 49 .>
00004Ar 3  2F               .byte $2F               ; 4A /?
00004Br 3  6C               .byte $6C               ; 4B lL
00004Cr 3  3B               .byte $3B               ; 4C ;:
00004Dr 3  70               .byte $70               ; 4D pP
00004Er 3  2D               .byte $2D               ; 4E -_
00004Fr 3  00               .byte $00               ; 4F
000050r 3  00               .byte $00               ; 50
000051r 3  00               .byte $00               ; 51
000052r 3  27               .byte $27               ; 52 '"
000053r 3  00               .byte $00               ; 53
000054r 3  5B               .byte $5B               ; 54 [{
000055r 3  3D               .byte $3D               ; 55 =+
000056r 3  00               .byte $00               ; 56
000057r 3  00               .byte $00               ; 57
000058r 3  00               .byte $00               ; 58 caps
000059r 3  00               .byte $00               ; 59 r shift
00005Ar 3  0D               .byte $0D               ; 5A <Enter>
00005Br 3  5D               .byte $5D               ; 5B ]}
00005Cr 3  00               .byte $00               ; 5C
00005Dr 3  5C               .byte $5C               ; 5D \|
00005Er 3  00               .byte $00               ; 5E
00005Fr 3  00               .byte $00               ; 5F
000060r 3  00               .byte $00               ; 60
000061r 3  00               .byte $00               ; 61
000062r 3  00               .byte $00               ; 62
000063r 3  00               .byte $00               ; 63
000064r 3  00               .byte $00               ; 64
000065r 3  00               .byte $00               ; 65
000066r 3  08               .byte $08               ; 66 bkspace
000067r 3  00               .byte $00               ; 67
000068r 3  00               .byte $00               ; 68
000069r 3  31               .byte $31               ; 69 kp 1
00006Ar 3  2F               .byte $2f               ; 6A kp / converted from E04A in code
00006Br 3  34               .byte $34               ; 6B kp 4
00006Cr 3  37               .byte $37               ; 6C kp 7
00006Dr 3  00               .byte $00               ; 6D
00006Er 3  00               .byte $00               ; 6E
00006Fr 3  00               .byte $00               ; 6F
000070r 3  30               .byte $30               ; 70 kp 0
000071r 3  2E               .byte $2E               ; 71 kp .
000072r 3  32               .byte $32               ; 72 kp 2
000073r 3  35               .byte $35               ; 73 kp 5
000074r 3  36               .byte $36               ; 74 kp 6
000075r 3  38               .byte $38               ; 75 kp 8
000076r 3  1B               .byte $1B               ; 76 esc
000077r 3  00               .byte $00               ; 77 num lock
000078r 3  8B               .byte $8B               ; 78 F11
000079r 3  2B               .byte $2B               ; 79 kp +
00007Ar 3  33               .byte $33               ; 7A kp 3
00007Br 3  2D               .byte $2D               ; 7B kp -
00007Cr 3  2A               .byte $2A               ; 7C kp *
00007Dr 3  39               .byte $39               ; 7D kp 9
00007Er 3  8D               .byte $8D               ; 7E scroll lock
00007Fr 3  00               .byte $00               ; 7F
000080r 3                   ;
000080r 3                   ; Table for shifted scancodes
000080r 3                   ;
000080r 3  00               .byte $00               ; 80
000081r 3  C9               .byte $C9               ; 81 F9
000082r 3  C7               .byte $C7               ; 82 relocated F7
000083r 3  C5               .byte $C5               ; 83 F5 (F7 actual scancode=83)
000084r 3  C3               .byte $C3               ; 84 F3
000085r 3  C1               .byte $C1               ; 85 F1
000086r 3  C2               .byte $C2               ; 86 F2
000087r 3  CC               .byte $CC               ; 87 F12
000088r 3  00               .byte $00               ; 88
000089r 3  CA               .byte $CA               ; 89 F10
00008Ar 3  C8               .byte $C8               ; 8A F8
00008Br 3  C6               .byte $C6               ; 8B F6
00008Cr 3  C4               .byte $C4               ; 8C F4
00008Dr 3  09               .byte $09               ; 8D tab
00008Er 3  7E               .byte $7E               ; 8E `~
00008Fr 3  CF               .byte $CF               ; 8F relocated Print Screen key
000090r 3  03               .byte $03               ; 90 relocated Pause/Break key
000091r 3  A0               .byte $A0               ; 91 left alt (right alt)
000092r 3  00               .byte $00               ; 92 left shift
000093r 3  E0               .byte $E0               ; 93 relocated Alt release code
000094r 3  00               .byte $00               ; 94 left ctrl (and right ctrl)
000095r 3  51               .byte $51               ; 95 qQ
000096r 3  21               .byte $21               ; 96 1!
000097r 3  00               .byte $00               ; 97
000098r 3  00               .byte $00               ; 98
000099r 3  00               .byte $00               ; 99
00009Ar 3  5A               .byte $5A               ; 9A zZ
00009Br 3  53               .byte $53               ; 9B sS
00009Cr 3  41               .byte $41               ; 9C aA
00009Dr 3  57               .byte $57               ; 9D wW
00009Er 3  40               .byte $40               ; 9E 2@
00009Fr 3  E1               .byte $E1               ; 9F Windows 98 menu key (left side)
0000A0r 3  02               .byte $02               ; A0 relocated ctrl-break key
0000A1r 3  43               .byte $43               ; A1 cC
0000A2r 3  58               .byte $58               ; A2 xX
0000A3r 3  44               .byte $44               ; A3 dD
0000A4r 3  45               .byte $45               ; A4 eE
0000A5r 3  24               .byte $24               ; A5 4$
0000A6r 3  23               .byte $23               ; A6 3#
0000A7r 3  E2               .byte $E2               ; A7 Windows 98 menu key (right side)
0000A8r 3  00               .byte $00               ; A8
0000A9r 3  20               .byte $20               ; A9 space
0000AAr 3  56               .byte $56               ; AA vV
0000ABr 3  46               .byte $46               ; AB fF
0000ACr 3  54               .byte $54               ; AC tT
0000ADr 3  52               .byte $52               ; AD rR
0000AEr 3  25               .byte $25               ; AE 5%
0000AFr 3  E3               .byte $E3               ; AF Windows 98 option key (right click, right side)
0000B0r 3  00               .byte $00               ; B0
0000B1r 3  4E               .byte $4E               ; B1 nN
0000B2r 3  42               .byte $42               ; B2 bB
0000B3r 3  48               .byte $48               ; B3 hH
0000B4r 3  47               .byte $47               ; B4 gG
0000B5r 3  59               .byte $59               ; B5 yY
0000B6r 3  5E               .byte $5E               ; B6 6^
0000B7r 3  00               .byte $00               ; B7
0000B8r 3  00               .byte $00               ; B8
0000B9r 3  00               .byte $00               ; B9
0000BAr 3  4D               .byte $4D               ; BA mM
0000BBr 3  4A               .byte $4A               ; BB jJ
0000BCr 3  55               .byte $55               ; BC uU
0000BDr 3  26               .byte $26               ; BD 7&
0000BEr 3  2A               .byte $2A               ; BE 8*
0000BFr 3  00               .byte $00               ; BF
0000C0r 3  00               .byte $00               ; C0
0000C1r 3  3C               .byte $3C               ; C1 ,<
0000C2r 3  4B               .byte $4B               ; C2 kK
0000C3r 3  49               .byte $49               ; C3 iI
0000C4r 3  4F               .byte $4F               ; C4 oO
0000C5r 3  29               .byte $29               ; C5 0)
0000C6r 3  28               .byte $28               ; C6 9(
0000C7r 3  00               .byte $00               ; C7
0000C8r 3  00               .byte $00               ; C8
0000C9r 3  3E               .byte $3E               ; C9 .>
0000CAr 3  3F               .byte $3F               ; CA /?
0000CBr 3  4C               .byte $4C               ; CB lL
0000CCr 3  3A               .byte $3A               ; CC ;:
0000CDr 3  50               .byte $50               ; CD pP
0000CEr 3  5F               .byte $5F               ; CE -_
0000CFr 3  00               .byte $00               ; CF
0000D0r 3  00               .byte $00               ; D0
0000D1r 3  00               .byte $00               ; D1
0000D2r 3  22               .byte $22               ; D2 '"
0000D3r 3  00               .byte $00               ; D3
0000D4r 3  7B               .byte $7B               ; D4 [{
0000D5r 3  2B               .byte $2B               ; D5 =+
0000D6r 3  00               .byte $00               ; D6
0000D7r 3  00               .byte $00               ; D7
0000D8r 3  00               .byte $00               ; D8 caps
0000D9r 3  00               .byte $00               ; D9 r shift
0000DAr 3  0D               .byte $0D               ; DA <Enter>
0000DBr 3  7D               .byte $7D               ; DB ]}
0000DCr 3  00               .byte $00               ; DC
0000DDr 3  7C               .byte $7C               ; DD \|
0000DEr 3  00               .byte $00               ; DE
0000DFr 3  00               .byte $00               ; DF
0000E0r 3  00               .byte $00               ; E0
0000E1r 3  00               .byte $00               ; E1
0000E2r 3  00               .byte $00               ; E2
0000E3r 3  00               .byte $00               ; E3
0000E4r 3  00               .byte $00               ; E4
0000E5r 3  00               .byte $00               ; E5
0000E6r 3  08               .byte $08               ; E6 bkspace
0000E7r 3  00               .byte $00               ; E7
0000E8r 3  00               .byte $00               ; E8
0000E9r 3  91               .byte $91               ; E9 kp 1
0000EAr 3  2F               .byte $2f               ; EA kp / converted from E04A in code
0000EBr 3  94               .byte $94               ; EB kp 4
0000ECr 3  97               .byte $97               ; EC kp 7
0000EDr 3  00               .byte $00               ; ED
0000EEr 3  00               .byte $00               ; EE
0000EFr 3  00               .byte $00               ; EF
0000F0r 3  90               .byte $90               ; F0 kp 0
0000F1r 3  7F               .byte $7F               ; F1 kp .
0000F2r 3  92               .byte $92               ; F2 kp 2
0000F3r 3  95               .byte $95               ; F3 kp 5
0000F4r 3  96               .byte $96               ; F4 kp 6
0000F5r 3  98               .byte $98               ; F5 kp 8
0000F6r 3  1B               .byte $1B               ; F6 esc
0000F7r 3  00               .byte $00               ; F7 num lock
0000F8r 3  CB               .byte $CB               ; F8 F11
0000F9r 3  2B               .byte $2B               ; F9 kp +
0000FAr 3  93               .byte $93               ; FA kp 3
0000FBr 3  2D               .byte $2D               ; FB kp -
0000FCr 3  2A               .byte $2A               ; FC kp *
0000FDr 3  99               .byte $99               ; FD kp 9
0000FEr 3  CD               .byte $CD               ; FE scroll lock
0000FFr 3               
0000FFr 3               
0000FFr 3               
0000FFr 3               
0000FFr 2               
0000FFr 2               .segment "DATA"
000086r 2               
000086r 2               ps2_init:
000086r 2  78             sei ; prevent interrupts while initializing
000087r 2               kb_conn_msg:
000087r 2  A2 00          ldx #0
000089r 2               kb_conn_loop:
000089r 2  BD rr rr       lda kb_conn_msg_text,x
00008Cr 2  F0 1A          beq kb_conn_msg_end
00008Er 2  20 rr rr       jsr kernel_putc
000091r 2  E8             inx
000092r 2  80 F5          bra kb_conn_loop
000094r 2  44 65 74 65  kb_conn_msg_text: .byte "Detecting keyboard", $0D, $00
000098r 2  63 74 69 6E  
00009Cr 2  67 20 6B 65  
0000A8r 2               kb_conn_msg_end:
0000A8r 2               
0000A8r 2  AD 8E FF       lda IER
0000ABr 2  09 88          ora #$88      ;enable interrupt on neg transition on CB2
0000ADr 2  8D 8E FF       sta IER
0000B0r 2               
0000B0r 2  A9 00          lda #0
0000B2r 2  8D 8C FF       sta PCR
0000B5r 2  8D rr rr       sta KB_TEMP
0000B8r 2  8D rr rr       sta KB_BIT
0000BBr 2  8D rr rr       sta KB_STATE
0000BEr 2  8D rr rr       sta to_send
0000C1r 2  8D rr rr       sta KB_PARITY
0000C4r 2  85 rr          sta KB_BUF_W_PTR
0000C6r 2  85 rr          sta KB_BUF_R_PTR
0000C8r 2  8D rr rr       sta KB_INIT_STATE
0000CBr 2  8D rr rr       sta KB_INIT_WAIT
0000CEr 2  8D rr rr       sta ready
0000D1r 2  8D rr rr       sta ignore_next
0000D4r 2  85 rr          sta character
0000D6r 2  20 rr rr       jsr clear_buffer
0000D9r 2               
0000D9r 2                 ; jsr kb_reset
0000D9r 2                 ; jsr kb_leds
0000D9r 2                 ; jsr kb_leds_data
0000D9r 2               
0000D9r 2                 ; jmp done_init
0000D9r 2               
0000D9r 2  A9 00          lda #KB_INIT_STATE_RESET
0000DBr 2  8D rr rr       sta KB_INIT_STATE
0000DEr 2  58             cli           ;enable interrupts
0000DFr 2               
0000DFr 2               @wait1:
0000DFr 2  A0 0A          ldy #10
0000E1r 2  20 rr rr       jsr delay
0000E4r 2  EE rr rr       inc KB_INIT_WAIT
0000E7r 2  F0 1C          beq done_init     ; nothing to show yet
0000E9r 2  AD rr rr       lda to_send
0000ECr 2  D0 F1          bne @wait1       ; do nothing while sending
0000EEr 2               
0000EEr 2                 ;jsr lcd_print
0000EEr 2               
0000EEr 2  AE rr rr       ldx KB_INIT_STATE
0000F1r 2  E0 00          cpx #KB_INIT_STATE_RESET
0000F3r 2  F0 06          beq @do_reset
0000F5r 2  E0 01          cpx #KB_INIT_STATE_RESET_ACK
0000F7r 2  F0 0C          beq done_init
0000F9r 2                 ; beq @self_test_ok  ; Wait for 256 loops with nothing. if still nothing, reset keyboard
0000F9r 2               
0000F9r 2  80 0A          bra done_init
0000FBr 2                 ;sta PORTA
0000FBr 2                 ; wait for keyboard self test (#$AA)
0000FBr 2               
0000FBr 2               @do_reset:
0000FBr 2  20 rr rr       jsr kb_reset
0000FEr 2  A9 01          lda #KB_INIT_STATE_RESET_ACK  ; next state should be an acknowledgment
000100r 2  8D rr rr       sta KB_INIT_STATE
000103r 2  80 DA          bra @wait1
000105r 2               
000105r 2               
000105r 2               done_init:
000105r 2  A9 00          lda #0
000107r 2  8D 82 FF       sta DDRB
00010Ar 2  8D 8C FF       sta PCR
00010Dr 2  8D rr rr       sta ignore_next
000110r 2  8D rr rr       sta ready
000113r 2  85 rr          sta control_keys
000115r 2  8D rr rr       sta to_send
000118r 2  8D rr rr       sta ready
00011Br 2  85 rr          sta character
00011Dr 2  8D rr rr       sta KB_TEMP
000120r 2  8D rr rr       sta KB_INIT_STATE
000123r 2  8D rr rr       sta KB_BIT
000126r 2  8D rr rr       sta KB_STATE
000129r 2  85 rr          sta KB_BUF_W_PTR
00012Br 2  85 rr          sta KB_BUF_R_PTR
00012Dr 2  58             cli ; enable interrupts again
00012Er 2  60             rts
00012Fr 2               
00012Fr 2               
00012Fr 2               kb_reset:
00012Fr 2  A9 00          lda #0
000131r 2  8D rr rr       sta KB_INIT_WAIT
000134r 2  A9 F0          lda #$F0
000136r 2  8D 81 FF       sta PORTA
000139r 2  78             sei                   ;disable interrupts
00013Ar 2  20 rr rr       jsr prepare_send
00013Dr 2  A9 FF          lda #$FF
00013Fr 2  8D rr rr       sta to_send
000142r 2  58             cli                   ; enable interrupts
000143r 2  60             rts
000144r 2               
000144r 2               no_kb_msg:
000144r 2  A2 00          ldx #0
000146r 2               no_kb_loop:
000146r 2  BD rr rr       lda no_kb_msg_text,x
000149r 2  F0 BA          beq done_init
00014Br 2  20 rr rr       jsr kernel_putc
00014Er 2  E8             inx
00014Fr 2  80 F5          bra no_kb_loop
000151r 2  4E 6F 20 6B  no_kb_msg_text: .byte "No keyboard connected", $0D, $00
000155r 2  65 79 62 6F  
000159r 2  61 72 64 20  
000168r 2               
000168r 2               
000168r 2               prepare_send:
000168r 2  48             pha
000169r 2  5A             phy
00016Ar 2                 ; ready to send, pull clock low for a while
00016Ar 2  A9 C0          lda #$C0
00016Cr 2  8D 8C FF       sta PCR       ;set CB2 low
00016Fr 2                 ;delay
00016Fr 2  A0 80          ldy #$80
000171r 2  20 rr rr       jsr delay
000174r 2                 ; delay end
000174r 2                 ; pull data low now
000174r 2  AD 80 FF       lda PORTB
000177r 2  29 7F          and #($FF^DATA)
000179r 2  8D 80 FF       sta PORTB
00017Cr 2  AD 82 FF       lda DDRB
00017Fr 2  09 80          ora #DATA   ;data as output to set it low
000181r 2  8D 82 FF       sta DDRB
000184r 2  A0 40          ldy #$40
000186r 2  20 rr rr       jsr delay
000189r 2  A9 01          lda #KB_STATE_DATA    ; no start bit when sending
00018Br 2  8D rr rr       sta KB_STATE
00018Er 2                 ; release clock
00018Er 2  A9 00          lda #0
000190r 2  8D rr rr       sta to_send
000193r 2  8D rr rr       sta KB_PARITY
000196r 2  8D 8C FF       sta PCR       ;set CB2 to negative edge input
000199r 2               
000199r 2  7A             ply
00019Ar 2  68             pla
00019Br 2  60             rts
00019Cr 2               
00019Cr 2               
00019Cr 2               reset_ps2:          ; routine called during a timer interrupt to check
00019Cr 2  48             pha
00019Dr 2                                   ; if the elasped time since the last ps2 interrupt allows us to reset it
00019Dr 2  A5 rr          lda time+3
00019Fr 2  C5 rr          cmp last_ps2_time+3
0001A1r 2  90 16          bcc @reset
0001A3r 2  A5 rr          lda time+2
0001A5r 2  C5 rr          cmp last_ps2_time+2
0001A7r 2  90 10          bcc @reset
0001A9r 2  A5 rr          lda time+1
0001ABr 2  C5 rr          cmp last_ps2_time+1
0001ADr 2  90 0A          bcc @reset
0001AFr 2  A5 rr          lda time
0001B1r 2  69 01          adc #$1
0001B3r 2  C5 rr          cmp last_ps2_time
0001B5r 2  90 02          bcc @reset
0001B7r 2               @exit2:
0001B7r 2  68             pla
0001B8r 2  60             rts
0001B9r 2               @reset:
0001B9r 2  A9 00          lda #0
0001BBr 2  8D rr rr       sta KB_TEMP
0001BEr 2  8D rr rr       sta KB_BIT
0001C1r 2  8D rr rr       sta KB_STATE
0001C4r 2  85 rr          sta KB_BUF_W_PTR
0001C6r 2  85 rr          sta KB_BUF_R_PTR
0001C8r 2  F0 ED          beq @exit2
0001CAr 2               
0001CAr 2               clear_buffer:
0001CAr 2  DA             phx
0001CBr 2  A2 FF          ldx #$ff
0001CDr 2               @clear_loop:
0001CDr 2  9E rr rr       stz KB_BUF, x
0001D0r 2  CA             dex
0001D1r 2  D0 FA          bne @clear_loop
0001D3r 2  FA             plx
0001D4r 2  60             rts
0001D5r 2               
0001D5r 2               
0001D5r 2               ps2_get_char:
0001D5r 2               
0001D5r 2  DA               phx                             ; save X
0001D6r 2  A6 rr            ldx KB_BUF_R_PTR                ; check the keyboard buffer
0001D8r 2  BD rr rr         lda KB_BUF, x
0001DBr 2  F0 0B            beq no_ps2_char_available       ; exit if nothing found
0001DDr 2  9E rr rr         stz KB_BUF, x                   ; if there was a character, reset this buffer cell
0001E0r 2  E6 rr            inc KB_BUF_R_PTR                ; and increment the read pointer
0001E2r 2               
0001E2r 2  38               sec                             ; mark character present
0001E3r 2  FA               plx                             ; restore X
0001E4r 2  20 rr rr         jsr check_ctrl_c
0001E7r 2  60               rts                             ; return
0001E8r 2               no_ps2_char_available:                  ; no keyboard char
0001E8r 2  E6 rr            inc KB_BUF_R_PTR                ; increment read pointer for next time
0001EAr 2  FA               plx                             ; restore X
0001EBr 2  18               clc
0001ECr 2  60               rts
0001EDr 2                 .include "ps2_irq.s"
0001EDr 3               ; Copyright 2020 Jonathan Foucher
0001EDr 3               
0001EDr 3               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
0001EDr 3               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
0001EDr 3               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
0001EDr 3               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
0001EDr 3               ; is furnished to do so, subject to the following conditions:
0001EDr 3               
0001EDr 3               ; The above copyright notice and this permission notice shall be included in all copies or
0001EDr 3               ; substantial portions of the Software.
0001EDr 3               
0001EDr 3               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
0001EDr 3               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
0001EDr 3               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
0001EDr 3               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
0001EDr 3               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
0001EDr 3               ; DEALINGS IN THE SOFTWARE.
0001EDr 3               
0001EDr 3               
0001EDr 3               
0001EDr 3               
0001EDr 3               ps2_irq:
0001EDr 3  48               pha
0001EEr 3  DA               phx
0001EFr 3  AD rr rr         lda to_send
0001F2r 3  D0 25            bne @willsend
0001F4r 3  AD rr rr         lda KB_STATE            ; which state ?
0001F7r 3  C9 00            cmp #KB_STATE_START
0001F9r 3  F0 0F            beq @start        ; start bit
0001FBr 3               
0001FBr 3  C9 01            cmp #KB_STATE_DATA             ; get data bits
0001FDr 3  F0 1D            beq @data
0001FFr 3               
0001FFr 3  C9 02            cmp #KB_STATE_PARITY             ; this is the parity bit
000201r 3  F0 3A            beq @parity
000203r 3               
000203r 3  C9 03            cmp #KB_STATE_STOP      ; stop bit
000205r 3  F0 3D            beq @stop
000207r 3  4C rr rr         jmp @exit
00020Ar 3               
00020Ar 3               @start:
00020Ar 3  A9 01            lda #KB_STATE_DATA
00020Cr 3  8D rr rr         sta KB_STATE        ; next state will be to get data
00020Fr 3  A9 00            lda #0
000211r 3  8D rr rr         sta KB_TEMP
000214r 3  8D rr rr         sta KB_BIT
000217r 3  80 65            bra @exit
000219r 3               @willsend:
000219r 3  4C rr rr         jmp @sending
00021Cr 3               @data:
00021Cr 3  AD 80 FF         lda PORTB       ; get the bit of data from PORTB bit 7
00021Fr 3  29 80            and #$80
000221r 3  0D rr rr         ora KB_TEMP     ; OR it with existing temp data
000224r 3  8D rr rr         sta KB_TEMP     ; save it
000227r 3  EE rr rr         inc KB_BIT      ; prepare for next bit
00022Ar 3  AD rr rr         lda KB_BIT
00022Dr 3  C9 08            cmp #8          ; if this is the last bit, next state is parity
00022Fr 3  F0 05            beq @next_state_parity
000231r 3  4E rr rr         lsr KB_TEMP     ; if not last bit, shift KB_TEMP right to prepare for next bit
000234r 3               
000234r 3  80 48            bra @exit
000236r 3               
000236r 3               @next_state_parity:
000236r 3  A9 02            lda #KB_STATE_PARITY    ;next state is parity
000238r 3  8D rr rr         sta KB_STATE
00023Br 3  80 41            bra @exit
00023Dr 3               
00023Dr 3               @parity:
00023Dr 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
00023Fr 3  8D rr rr         sta KB_STATE
000242r 3  80 3A            bra @exit
000244r 3               
000244r 3               @stop:
000244r 3  A9 00            lda #KB_STATE_START
000246r 3  8D rr rr         sta KB_STATE
000249r 3  AD rr rr         lda ignore_next
00024Cr 3  D0 45            bne @ignored
00024Er 3                   ; Save key to character buffer
00024Er 3  AE rr rr         ldx KB_TEMP
000251r 3  E0 AA            cpx #$AA
000253r 3  F0 32            beq @init
000255r 3  E0 FA            cpx #$FA
000257r 3  F0 2E            beq @init
000259r 3  E0 F0            cpx #$F0
00025Br 3  F0 2F            beq @ignore_next
00025Dr 3  E0 12            cpx #LSHIFT_KEY
00025Fr 3  F0 4F            beq @shift_pressed
000261r 3  E0 59            cpx #RSHIFT_KEY
000263r 3  F0 4B            beq @shift_pressed
000265r 3  A5 rr            lda control_keys
000267r 3  29 01            and #SHIFT
000269r 3  D0 09            bne @shifted
00026Br 3               @unshifted:
00026Br 3                   ;stx PORTA
00026Br 3  BD rr rr         lda ASCIITBL, x
00026Er 3               
00026Er 3  C9 1B            cmp #$1B             ; reset if escape pressed
000270r 3  F0 12            beq @esc
000272r 3  80 03            bra @output
000274r 3               @shifted:
000274r 3  BD rr rr         lda ASCIITBL+128, x
000277r 3               @output:
000277r 3  A6 rr            ldx KB_BUF_W_PTR
000279r 3  9D rr rr         sta KB_BUF, x
00027Cr 3                   ;sta PORTA
00027Cr 3  E6 rr            inc KB_BUF_W_PTR
00027Er 3               
00027Er 3               @exit:
00027Er 3  2C 80 FF         bit PORTB
000281r 3  FA               plx
000282r 3  68               pla
000283r 3  60               rts
000284r 3               @esc:
000284r 3  4C rr rr         jmp v_reset
000287r 3               @init:
000287r 3  8E rr rr         stx ready
00028Ar 3  80 F2            bra @exit
00028Cr 3               
00028Cr 3               @ignore_next:
00028Cr 3  A9 01            lda #1
00028Er 3  8D rr rr         sta ignore_next
000291r 3  80 EB            bra @exit
000293r 3               
000293r 3               @ignored:
000293r 3  AE rr rr         ldx KB_TEMP
000296r 3  E0 12            cpx #LSHIFT_KEY
000298r 3  F0 0B            beq @shift_released
00029Ar 3  E0 59            cpx #RSHIFT_KEY
00029Cr 3  F0 07            beq @shift_released
00029Er 3  A9 00            lda #0
0002A0r 3  8D rr rr         sta ignore_next
0002A3r 3  80 D9            bra @exit
0002A5r 3               
0002A5r 3               @shift_released:
0002A5r 3  A9 00            lda #0
0002A7r 3  8D rr rr         sta ignore_next
0002AAr 3  A9 00            lda #0
0002ACr 3  85 rr            sta control_keys
0002AEr 3  80 CE            bra @exit
0002B0r 3               
0002B0r 3               @shift_pressed:
0002B0r 3  A5 rr            lda control_keys
0002B2r 3  09 01            ora #SHIFT
0002B4r 3  85 rr            sta control_keys
0002B6r 3  80 C6            bra @exit
0002B8r 3               
0002B8r 3               @sending:
0002B8r 3                   ; lda #1
0002B8r 3                   ; sta PORTA
0002B8r 3                   ; data pin of DDRB should be set as output by prepare_send
0002B8r 3  AD rr rr         lda KB_STATE                ; which state ?
0002BBr 3  C9 01            cmp #KB_STATE_DATA          ; send data bits
0002BDr 3  F0 0A            beq @sending_data
0002BFr 3  C9 02            cmp #KB_STATE_PARITY        ; this is the parity bit
0002C1r 3  F0 33            beq @sending_parity
0002C3r 3  C9 03            cmp #KB_STATE_STOP          ; stop bit
0002C5r 3  F0 56            beq @sending_stop
0002C7r 3  80 B5            bra @exit
0002C9r 3               
0002C9r 3               
0002C9r 3               @sending_data:
0002C9r 3                   ; lda #4
0002C9r 3                   ; sta PORTA
0002C9r 3  AD rr rr         lda to_send       ; get the bit of data from memory
0002CCr 3  29 01            and #$01          ; get only bottom bit
0002CEr 3  F0 0D            beq @send_zero
0002D0r 3               
0002D0r 3               @send_one:
0002D0r 3  AD 80 FF         lda PORTB
0002D3r 3  09 80            ora #$80
0002D5r 3  8D 80 FF         sta PORTB
0002D8r 3  EE rr rr         inc KB_PARITY
0002DBr 3  80 08            bra @sending_done
0002DDr 3               @send_zero:
0002DDr 3  AD 80 FF         lda PORTB
0002E0r 3  29 7F            and #$7F
0002E2r 3  8D 80 FF         sta PORTB
0002E5r 3               @sending_done:
0002E5r 3                   ; lda #2
0002E5r 3                   ; sta PORTA
0002E5r 3  EE rr rr         inc KB_BIT      ; prepare for next bit
0002E8r 3  AD rr rr         lda KB_BIT
0002EBr 3  C9 08            cmp #8          ; if this is the last bit, next state is parity
0002EDr 3  4C rr rr         jmp @next_state_parity
0002F0r 3  4E rr rr         lsr to_send
0002F3r 3  18               clc
0002F4r 3  80 88            bra @exit
0002F6r 3               
0002F6r 3               @sending_parity:
0002F6r 3                   ; lda #5
0002F6r 3                   ; sta PORTA
0002F6r 3  AD rr rr         lda KB_PARITY
0002F9r 3  29 01            and #$01
0002FBr 3  F0 10            beq @odd_parity     ; send zero if odd parity
0002FDr 3  AD 80 FF         lda PORTB
000300r 3  09 80            ora #$80            ; send one if even
000302r 3  8D 80 FF         sta PORTB
000305r 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
000307r 3  8D rr rr         sta KB_STATE
00030Ar 3  4C rr rr         jmp @exit
00030Dr 3               @odd_parity:
00030Dr 3  AD 80 FF         lda PORTB
000310r 3  29 7F            and #$7F
000312r 3  8D 80 FF         sta PORTB
000315r 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
000317r 3  8D rr rr         sta KB_STATE
00031Ar 3  4C rr rr         jmp @exit
00031Dr 3               
00031Dr 3               @sending_stop:
00031Dr 3                   ; lda #6
00031Dr 3                   ; sta PORTA
00031Dr 3  A9 00            lda #KB_STATE_START     ; set it back to start in case we are receivin next
00031Fr 3  8D rr rr         sta KB_STATE
000322r 3  A9 00            lda #0
000324r 3  8D rr rr         sta to_send
000327r 3  8D rr rr         sta KB_BIT
00032Ar 3  8D rr rr         sta KB_PARITY
00032Dr 3  AD 82 FF         lda DDRB        ; set PORTB back to input
000330r 3  29 7F            and #$7F
000332r 3  8D 82 FF         sta DDRB
000335r 3  4C rr rr         jmp @exit
000338r 3               
000338r 2               
000338r 1               .include "drivers/delayroutines.s"
000338r 2               ; Copyright 2020 Jonathan Foucher
000338r 2               
000338r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000338r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000338r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000338r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000338r 2               ; is furnished to do so, subject to the following conditions:
000338r 2               
000338r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000338r 2               ; substantial portions of the Software.
000338r 2               
000338r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000338r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000338r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000338r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000338r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000338r 2               ; DEALINGS IN THE SOFTWARE.
000338r 2               
000338r 2               .segment "CODE"
000000r 2               ; this routine delays by 2304 * y + 23 cycles
000000r 2               delay:
000000r 2  DA             phx       ; 3 cycles
000001r 2  5A             phy       ; 3 cycles
000002r 2               two:
000002r 2  A2 FF          ldx #$ff  ; 2 cycles
000004r 2               one:
000004r 2  EA             nop       ; 2 cycles
000005r 2  EA             nop       ; 2 cycles
000006r 2  CA             dex       ; 2 cycles
000007r 2  D0 FB          bne one   ; 3 for all cycles, 2 for last
000009r 2  88             dey       ; 2 cycles
00000Ar 2  D0 F6          bne two   ; 3 for all cycles, 2 for last
00000Cr 2  7A             ply       ; 4 cycles
00000Dr 2  FA             plx       ; 4 cycles
00000Er 2  60             rts       ; 6 cycles
00000Fr 2               
00000Fr 2               ; delay is in Y register
00000Fr 2               delay_long:
00000Fr 2  48             pha
000010r 2  5A             phy
000011r 2  DA             phx
000012r 2  98             tya
000013r 2  AA             tax
000014r 2               delay_long_loop:
000014r 2  A0 FF          ldy #$ff
000016r 2  20 rr rr       jsr delay
000019r 2  CA             dex
00001Ar 2  D0 F8          bne delay_long_loop
00001Cr 2  FA             plx
00001Dr 2  7A             ply
00001Er 2  68             pla
00001Fr 2  60             rts
000020r 2               
000020r 2               delay_short:        ; delay Y * 19 cycles
000020r 2  5A             phy
000021r 2               delay_short_loop:
000021r 2  EA             nop               ; 2 cycles
000022r 2  EA             nop               ; 2 cycles
000023r 2  EA             nop               ; 2 cycles
000024r 2  EA             nop               ; 2 cycles
000025r 2  EA             nop               ; 2 cycles
000026r 2  EA             nop               ; 2 cycles
000027r 2  EA             nop               ; 2 cycles
000028r 2               
000028r 2               
000028r 2  88             dey               ; 2 cycles
000029r 2  D0 F6          bne delay_short_loop   ; 2 or 3 cycles
00002Br 2  7A             ply
00002Cr 2  60             rts
00002Dr 2               
00002Dr 1               ; .include "drivers/4004.s"
00002Dr 1               
00002Dr 1               .include "drivers/cf.s"
00002Dr 2               
00002Dr 2               CF_BUF = FAT_BUFFER
00002Dr 2               CF_ADDRESS = $FFD0
00002Dr 2               
00002Dr 2               .segment "ZEROPAGE": zeropage
00000Er 2  xx xx        CF_BUF_PTR: .res 2
000010r 2               ; CF_ADDRESS: .res 2
000010r 2               
000010r 2               
000010r 2               .segment "BSS"
000089r 2               
000089r 2  xx xx xx xx  .align  $100
00008Dr 2  xx xx xx xx  
000091r 2  xx xx xx xx  
000100r 2  xx xx xx xx  FAT_BUFFER: .res $200
000104r 2  xx xx xx xx  
000108r 2  xx xx xx xx  
000300r 2               ; .align  256
000300r 2               ;FILE_BUFFER: .res $1000
000300r 2               FILE_BUFFER_END:
000300r 2  xx           lcd_absent: .res 1
000301r 2  xx           has_acia: .res 1
000302r 2  xx xx xx xx  CF_LBA: .res 4
000306r 2  xx xx xx xx  CF_PART_START: .res 4
00030Ar 2  xx           CF_SEC_PER_CLUS: .res 1     ; $8
00030Br 2  xx xx        CF_CURRENT_CLUSTER: .res 2
00030Dr 2  xx xx        CF_ROOT_ENT_CNT: .res 2     ; $200
00030Fr 2  xx xx        CF_ROOT_DIR_SECS: .res 2    ; $02
000311r 2  xx xx        CF_FAT_SEC_CNT: .res 2      ; $F5
000313r 2  xx xx        CF_FIRST_DATA_SEC: .res 2   ; $020B
000315r 2  xx xx        CF_FIRST_ROOT_SEC: .res 2   ; $01EB
000317r 2  xx xx        CF_CURRENT_DIR_SEC: .res 2
000319r 2  xx xx xx xx  CF_CURRENT_DIR: .res 12
00031Dr 2  xx xx xx xx  
000321r 2  xx xx xx xx  
000325r 2  xx xx xx xx  FAT_FILE_NAME_TMP: .res 12
000329r 2  xx xx xx xx  
00032Dr 2  xx xx xx xx  
000331r 2               
000331r 2               .segment "DATA"
000338r 2               
000338r 2               
000338r 2               cf_wait:
000338r 2                   ; phy
000338r 2                   ; ldy #7
000338r 2               @wait_loop:
000338r 2                   ; lda (CF_ADDRESS), y
000338r 2  AD D7 FF         lda CF_ADDRESS + 7
00033Br 2  29 80            and #$80
00033Dr 2  D0 F9            bne @wait_loop
00033Fr 2                   ; ply
00033Fr 2  60               rts
000340r 2               
000340r 2               
000340r 2               cf_init:
000340r 2                   ; phy
000340r 2  A9 04            lda #$4
000342r 2                   ; ldy #7
000342r 2                   ; sta (CF_ADDRESS),y
000342r 2  8D D7 FF         sta CF_ADDRESS + 7
000345r 2  20 rr rr         jsr cf_wait
000348r 2  A9 E0            lda #$E0
00034Ar 2                   ; ldy #6
00034Ar 2                   ; sta (CF_ADDRESS),y
00034Ar 2  8D D6 FF         sta CF_ADDRESS + 6
00034Dr 2  A9 01            lda #$1
00034Fr 2                   ; ldy #1
00034Fr 2                   ; sta (CF_ADDRESS),y
00034Fr 2  8D D1 FF         sta CF_ADDRESS + 1
000352r 2  A9 EF            lda #$EF
000354r 2                   ; ldy #7
000354r 2                   ; sta (CF_ADDRESS),y
000354r 2  8D D7 FF         sta CF_ADDRESS + 7
000357r 2  20 rr rr         jsr cf_wait
00035Ar 2  20 rr rr         jsr cf_err
00035Dr 2                   ; ply
00035Dr 2  60               rts
00035Er 2               
00035Er 2               
00035Er 2               ; cf_read:
00035Er 2               ;     phy
00035Er 2               ;     ldy #0
00035Er 2               ; @readloop:
00035Er 2               ;     ; phy
00035Er 2               ;     ; ldy #7
00035Er 2               ;     ; lda (CF_ADDRESS), y
00035Er 2               ;     lda CF_ADDRESS + 7
00035Er 2               ;     and #8
00035Er 2               ;     beq @exit
00035Er 2               ;     ; jsr cf_wait
00035Er 2               ;     ; ldy #0
00035Er 2               ;     ; lda (CF_ADDRESS), y
00035Er 2               ;     lda CF_ADDRESS
00035Er 2               ;     ; ply
00035Er 2               ;     sta (CF_BUF_PTR), y
00035Er 2               ;     ; jsr cf_wait
00035Er 2               ;     iny
00035Er 2               ;     bne @readloop
00035Er 2               ;     ; if y wraps around to zero, increment buffer page
00035Er 2               ;     inc CF_BUF_PTR+1
00035Er 2               ;     bra @readloop
00035Er 2               ; @exit:
00035Er 2               ;     ; we only come here because we read an & 8 from REG 7
00035Er 2               ;     ; ply
00035Er 2               ;     dec CF_BUF_PTR+1
00035Er 2               ;     ply
00035Er 2               ;     rts
00035Er 2               
00035Er 2               ; : cfread 0 buffptr ! begin cfwait cfreg7 c@ 8 and while cfreg0 c@ cfbuffer buffptr @ + c! buffptr @ 1 + buffptr ! repeat ;
00035Er 2               
00035Er 2               .macro readsector2
00035Er 2               .scope
00035Er 2               
00035Er 2               outerloop:
00035Er 2                   ldx #0
00035Er 2               wait:
00035Er 2                   ldy #0
00035Er 2                   lda CF_ADDRESS + 7
00035Er 2                   and #$80
00035Er 2                   bne wait
00035Er 2               load:
00035Er 2                   lda CF_ADDRESS
00035Er 2                   sta (CF_BUF_PTR), y
00035Er 2                   iny
00035Er 2                   bne load
00035Er 2               
00035Er 2                   inc CF_BUF_PTR + 1
00035Er 2                   inx
00035Er 2                   cpx #2
00035Er 2                   bcc wait
00035Er 2               
00035Er 2               .endscope
00035Er 2               .endmacro
00035Er 2  00 01        add_to_ptr: .byte $00, $01
000360r 2               cf_read:
000360r 2  78               sei
000361r 2  5A               phy
000362r 2  DA               phx
000363r 2  A9 rr            lda #<FAT_BUFFER
000365r 2  85 rr            sta CF_BUF_PTR
000367r 2  A9 rr            lda #>FAT_BUFFER
000369r 2  85 rr            sta CF_BUF_PTR + 1
00036Br 2               
00036Br 2  A2 00 A0 00      readsector2
00036Fr 2  AD D7 FF 29  
000373r 2  80 D0 F7 AD  
000385r 2               @loop3:
000385r 2  AD D7 FF         lda CF_ADDRESS + 7
000388r 2  29 08            and #8
00038Ar 2  F0 06            beq @exit
00038Cr 2  AD D0 FF         lda CF_ADDRESS
00038Fr 2  E8               inx
000390r 2  D0 F3            bne @loop3
000392r 2               @exit:
000392r 2  FA               plx
000393r 2  7A               ply
000394r 2  58               cli
000395r 2  60               rts
000396r 2               
000396r 2               
000396r 2               ; .macro  readsector
000396r 2               ;     .repeat 64, I
000396r 2               ;         .scope
000396r 2               ;     ; ldx #0
000396r 2               ; wait:
000396r 2               ;     lda CF_ADDRESS + 7
000396r 2               ;     and #$80
000396r 2               ;     bne wait
000396r 2               ; load:
000396r 2               ;     lda CF_ADDRESS
000396r 2               ;     sta FAT_BUFFER + I * 8
000396r 2               ;     lda CF_ADDRESS
000396r 2               ;     sta FAT_BUFFER + I * 8 + 1
000396r 2               ;     lda CF_ADDRESS
000396r 2               ;     sta FAT_BUFFER + I * 8 + 2
000396r 2               ;     lda CF_ADDRESS
000396r 2               ;     sta FAT_BUFFER + I * 8 + 3
000396r 2               ;     lda CF_ADDRESS
000396r 2               ;     sta FAT_BUFFER + I * 8 + 4
000396r 2               ;     lda CF_ADDRESS
000396r 2               ;     sta FAT_BUFFER + I * 8 + 5
000396r 2               ;     lda CF_ADDRESS
000396r 2               ;     sta FAT_BUFFER + I * 8 + 6
000396r 2               ;     lda CF_ADDRESS
000396r 2               ;     sta FAT_BUFFER + I * 8 + 7
000396r 2               ;     ; inx
000396r 2               ;     ; cpx #4
000396r 2               ;     ; bcc load
000396r 2               ;         .endscope
000396r 2               ;     .endrep
000396r 2               ; .endmacro
000396r 2               
000396r 2               ; cf_read:
000396r 2               ;     sei
000396r 2               ;     phx
000396r 2               ;     readsector
000396r 2               ; @loop3:
000396r 2               ;     lda CF_ADDRESS + 7
000396r 2               ;     and #8
000396r 2               ;     beq @exit
000396r 2               ;     lda CF_ADDRESS
000396r 2               ;     inx
000396r 2               ;     bne @loop3
000396r 2               ; @exit:
000396r 2               ;     plx
000396r 2               ;     cli
000396r 2               ;     rts
000396r 2               
000396r 2               ; cf_read:
000396r 2               ;     sei
000396r 2               ;     phx
000396r 2               ;     ldx #0
000396r 2               ; @loop1:
000396r 2               ; .repeat 16
000396r 2               ;     lda CF_ADDRESS + 7
000396r 2               ;     and #$80
000396r 2               ;     bne @loop1
000396r 2               ;     lda CF_ADDRESS
000396r 2               ;     sta FAT_BUFFER + 16 * I, x
000396r 2               ;     inx
000396r 2               ;     bne @loop1
000396r 2               ; .endrepeat
000396r 2               ;     ; lda CF_ADDRESS + 7
000396r 2               ;     ; and #$80
000396r 2               ;     ; bne @loop1
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               
000396r 2               ;     ; txa
000396r 2               ;     ; and #32
000396r 2               ;     ; bne @getbyte1
000396r 2               
000396r 2               ;     ; lda (CF_ADDRESS), y
000396r 2               ;     ; lda CF_ADDRESS + 7
000396r 2               ;     ; and #8
000396r 2               ;     ; beq @exit
000396r 2               ;     ; jsr cf_wait
000396r 2               ; @getbyte1:
000396r 2               ;     lda CF_ADDRESS
000396r 2               ;     sta FAT_BUFFER, x
000396r 2               ;     inx
000396r 2               ;     bne @loop1
000396r 2               ; @wait:
000396r 2               ;     lda CF_ADDRESS + 7
000396r 2               ;     and #$80
000396r 2               ;     bne @wait
000396r 2               ; @loop2:
000396r 2               ;     ; lda CF_ADDRESS + 7
000396r 2               ;     ; and #$80
000396r 2               ;     ; bne @loop2
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               ;     ; nop
000396r 2               
000396r 2               ;     ; txa
000396r 2               ;     ; and #32
000396r 2               ;     ; bne @getbyte2
000396r 2               ;     ; lda CF_ADDRESS + 7
000396r 2               ;     ; and #$80
000396r 2               ;     ; bne @loop2
000396r 2               ;     ; lda CF_ADDRESS + 7
000396r 2               ;     ; and #$80
000396r 2               ;     ; bne @loop2
000396r 2               ;     ; lda CF_ADDRESS + 7
000396r 2               ;     ; and #8
000396r 2               ;     ; beq @exit
000396r 2               ;     ; jsr cf_wait
000396r 2               ; @getbyte2:
000396r 2               ;     lda CF_ADDRESS
000396r 2               ;     sta FAT_BUFFER+256, x
000396r 2               ;     inx
000396r 2               ;     bne @loop2
000396r 2               ; @loop3:
000396r 2               ;     lda CF_ADDRESS + 7
000396r 2               ;     and #8
000396r 2               ;     beq @exit
000396r 2               ;     lda CF_ADDRESS
000396r 2               ;     inx
000396r 2               ;     bne @loop3
000396r 2               ; @exit:
000396r 2               ;     plx
000396r 2               ;     cli
000396r 2               ;     rts
000396r 2               
000396r 2               cf_set_lba:
000396r 2                   ; phy
000396r 2  AD rr rr         lda CF_LBA
000399r 2                   ; ldy #3
000399r 2                   ; sta (CF_ADDRESS),y
000399r 2  8D D3 FF         sta CF_ADDRESS + 3
00039Cr 2  AD rr rr         lda CF_LBA + 1
00039Fr 2                   ; ldy #4
00039Fr 2                   ; sta (CF_ADDRESS), y
00039Fr 2  8D D4 FF         sta CF_ADDRESS + 4
0003A2r 2  AD rr rr         lda CF_LBA + 2
0003A5r 2                   ; ldy #5
0003A5r 2                   ; sta (CF_ADDRESS), y
0003A5r 2  8D D5 FF         sta CF_ADDRESS + 5
0003A8r 2  AD rr rr         lda CF_LBA + 3
0003ABr 2  29 0F            and #$0F
0003ADr 2  09 E0            ora #$E0
0003AFr 2                   ; ldy #6
0003AFr 2                   ; sta (CF_ADDRESS), y
0003AFr 2  8D D6 FF         sta CF_ADDRESS + 6
0003B2r 2                   ; ply
0003B2r 2  60               rts
0003B3r 2               
0003B3r 2               cf_read_sector:
0003B3r 2                   ; sei
0003B3r 2                   ; phy
0003B3r 2                   ; buffer should be set in CF_BUF_PTR
0003B3r 2  20 rr rr         jsr cf_set_lba
0003B6r 2  A9 01            lda #1
0003B8r 2                   ; ldy #2
0003B8r 2                   ; sta (CF_ADDRESS), y
0003B8r 2  8D D2 FF         sta CF_ADDRESS + 2
0003BBr 2  20 rr rr         jsr cf_wait
0003BEr 2  A9 20            lda #CF_READ_SECTOR_COMMAND
0003C0r 2                   ; ldy #7
0003C0r 2                   ; sta (CF_ADDRESS), y
0003C0r 2  8D D7 FF         sta CF_ADDRESS + 7
0003C3r 2  20 rr rr         jsr cf_wait
0003C6r 2  20 rr rr         jsr cf_read
0003C9r 2  20 rr rr         jsr cf_err
0003CCr 2                   ; ply
0003CCr 2                   ; cli
0003CCr 2  60               rts
0003CDr 2               
0003CDr 2               cf_err:
0003CDr 2                   ; phy
0003CDr 2  20 rr rr         jsr cf_wait
0003D0r 2                   ; ldy #7
0003D0r 2                   ; lda (CF_ADDRESS), y
0003D0r 2  AD D7 FF         lda CF_ADDRESS + 7
0003D3r 2  29 01            and #$01
0003D5r 2  F0 05            beq @exit
0003D7r 2               @exit_fail:
0003D7r 2  A9 21            lda #'!'
0003D9r 2  20 rr rr         jsr kernel_putc
0003DCr 2               @exit:
0003DCr 2                   ; ply
0003DCr 2  60               rts
0003DDr 2               
0003DDr 2               cf_info:
0003DDr 2               
0003DDr 2               
0003DDr 2               cf_end:
0003DDr 2               
0003DDr 2               
0003DDr 1               
0003DDr 1               ; .include "drivers/spi.s"
0003DDr 1               ; .include "drivers/sd.s"
0003DDr 1               ; .include "drivers/vga.s"
0003DDr 1               ; .include "drivers/fat32.s"
0003DDr 1               ; .include "drivers/lcd.s"
0003DDr 1               .include "../../fat16.s"
0003DDr 2               ; .segment "BSS"
0003DDr 2               ; FAT_FILE_NAME_TMP: .res 12
0003DDr 2               
0003DDr 2               
0003DDr 2               .segment "DATA"
0003DDr 2               
0003DDr 2               fat_convert_filename:
0003DDr 2               	; file name address to transform is in editor3
0003DDr 2               	; file name length is in editor2
0003DDr 2  5A           	phy
0003DEr 2  DA           	phx
0003DFr 2  A0 00        	ldy #0                  ; Y will be used to index original string
0003E1r 2  A2 00        	ldx #0                  ; and X to index transformed string
0003E3r 2               @transform_name_loop:           ; transform file.txt filename format to FAT16 format
0003E3r 2  CC rr rr     	cpy editor2 				; if Y is bigger than the length of the file name
0003E6r 2  B0 04        	bcs @load20					; load $20 instead
0003E8r 2  B1 rr        	lda (editor3), y			; otherwise, load next character
0003EAr 2  80 02        	bra @compare				; and go to compare it
0003ECr 2               @load20:
0003ECr 2  A9 20        	lda #$20					; load $20 instead
0003EEr 2               @compare:
0003EEr 2  C9 2E        	cmp #'.'					; if it's a dot
0003F0r 2  F0 0B        	beq @is_dot					; handle the dot
0003F2r 2  9D rr rr     	sta FAT_FILE_NAME_TMP, x        ; no dot yet, copy character
0003F5r 2  C8           	iny
0003F6r 2  E8           	inx
0003F7r 2  E0 0B        	cpx #11
0003F9r 2  90 E8        	bcc @transform_name_loop        ; Do next character
0003FBr 2  80 0D        	bra @end_trans                  ; We have reached the 11th character for the new string
0003FDr 2               
0003FDr 2               @is_dot:                                ; we have a dot in the original string
0003FDr 2  A9 20        	lda #$20                        ; fill the new string until 8 characters have been done
0003FFr 2  9D rr rr     	sta FAT_FILE_NAME_TMP, x
000402r 2  E8           	inx
000403r 2  E0 08        	cpx #8
000405r 2  90 F6        	bcc @is_dot                     ; if we have not reached 8 chars yet, keep adding spaces
000407r 2  C8           	iny
000408r 2  80 D9        	bra @transform_name_loop        ; once we reached 8 characters, go back to do extension
00040Ar 2               
00040Ar 2               @end_trans:							; exit with transformed file name in FAT_FILE_NAME_TMP
00040Ar 2  FA           	plx
00040Br 2  7A           	ply
00040Cr 2  60           	rts
00040Dr 2               
00040Dr 2               
00040Dr 2               fat_find_file:
00040Dr 2               	; file name to search is in editor3
00040Dr 2               
00040Dr 2  AD rr rr 8D  	cp16 CF_CURRENT_DIR_SEC, CF_LBA
000411r 2  rr rr AD rr  
000415r 2  rr 8D rr rr  
000419r 2  9C rr rr     	stz CF_LBA + 2
00041Cr 2  9C rr rr     	stz CF_LBA + 3
00041Fr 2  20 rr rr     	jsr cf_read_sector
000422r 2               
000422r 2  A9 rr        	lda #<FAT_BUFFER
000424r 2  8D rr rr     	sta editor2
000427r 2  A9 rr        	lda #>FAT_BUFFER
000429r 2  8D rr rr     	sta editor2 + 1
00042Cr 2               
00042Cr 2               
00042Cr 2               @outerloop:
00042Cr 2  A0 00        	ldy #0
00042Er 2  B1 rr        	lda (editor2), y                ; load first caracter of file name
000430r 2  F0 2A        	beq @exit                       ; if zero, it means we reached the end of the list
000432r 2  C9 E5        	cmp #$E5
000434r 2  F0 0E        	beq @next_entry                 ; if $E5, it means the entry is deleted, so go to next entry
000436r 2               @loop:
000436r 2  B1 rr        	lda (editor2), y                ; load current filename character
000438r 2  D9 rr rr     	cmp FAT_FILE_NAME_TMP, y        ; compare it we the searched filename
00043Br 2  D0 07        	bne @next_entry                 ; as soon as they are not the same, go to the next entry
00043Dr 2  C8           	iny                             ; increase pointer to character
00043Er 2  C0 0B        	cpy #11                         ; compare with the total filename length
000440r 2  90 F4        	bcc @loop                       ; if y is less than the filename string length, keep going
000442r 2  80 15        	bra @exit_found                 ; otherwise, it means we compared all characters of the file name and they all match
000444r 2               @next_entry:
000444r 2  18 AD rr rr  	add16 editor2, fat_entry_size, editor2  ; add 32 to the current entry pointer
000448r 2  6D rr rr 8D  
00044Cr 2  rr rr AD rr  
000457r 2  80 D3        	bra @outerloop                          ; process next entry
000459r 2               @exit_found:
000459r 2  38           	sec
00045Ar 2  80 01        	bra @exit_end
00045Cr 2               @exit:
00045Cr 2  18           	clc
00045Dr 2               @exit_end:
00045Dr 2  FA           	plx
00045Er 2  7A           	ply
00045Fr 2  60           	rts
000460r 2  60           	rts
000461r 2               
000461r 1               
000461r 1               .include "../../forth.s"
000461r 2               
000461r 2               
000461r 2               ; Definitions for Tali Forth 2
000461r 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
000461r 2               ; First version: 01. Apr 2016 (Liara Forth)
000461r 2               ; This version: 29. Jan 2020
000461r 2               
000461r 2               ; This file is included by taliforth.asm. These are the general
000461r 2               ; definitions; platform-specific definitions such as the
000461r 2               ; memory map are kept in the platform folder.
000461r 2               
000461r 2               stack0 =    $0100   ; location of the stack
000461r 2               
000461r 2               ; User Variables:
000461r 2               ; Block variables
000461r 2               blk_offset =  0        ; BLK : UP + 0
000461r 2               scr_offset =  2        ; SCR : UP + 2
000461r 2               
000461r 2               
000461r 2               
000461r 2               ; Wordlists
000461r 2               current_offset =  4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
000461r 2               num_wordlists_offset =  5
000461r 2                                          ; #WORDLISTS (byte) : UP + 5
000461r 2               wordlists_offset =  6  ; WORDLISTS (cells) : UP + 6 to UP + 29
000461r 2                                          ;          (FORTH, EDITOR, ASSEMBLER, ROOT, +8 more)
000461r 2               num_order_offset =  30 ; #ORDER (byte) : UP + 30
000461r 2                                          ;          (Number of wordlists in search order)
000461r 2               search_order_offset =  31
000461r 2                                          ; SEARCH-ORDER (bytes) : UP + 31 to UP + 39
000461r 2                                          ; Allowing for 9 to keep offsets even.
000461r 2               max_wordlists =  12    ; Maximum number of wordlists supported
000461r 2                                          ; 4 Tali built-ins + 8 user wordlists
000461r 2               
000461r 2               ; Buffer variables
000461r 2               blkbuffer_offset =     40   ; Address of buffer
000461r 2               buffblocknum_offset =  42   ; Block number current in buffer
000461r 2               buffstatus_offset =    44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
000461r 2               
000461r 2               ; Block I/O vectors
000461r 2               blockread_offset =     46   ; Vector to block reading routine
000461r 2               blockwrite_offset =    48   ; Vector to block writing routine
000461r 2               
000461r 2               
000461r 2               ; ASCII CHARACTERS
000461r 2               AscCC =   $03  ; break (CTRL-c)
000461r 2               AscBELL = $07  ; bell sound
000461r 2               AscBS =   $08  ; backspace
000461r 2               AscLF =   $0a  ; line feed
000461r 2               AscCR =   $0d  ; carriage return
000461r 2               AscESC =  $1b  ; escape
000461r 2               AscSP =   $20  ; space
000461r 2               AscDEL =  $7f  ; delete (CTRL-h)
000461r 2               AscCP =   $10  ; CTRL-p (used to recall previous input history)
000461r 2               AscCN =   $0e  ; CTRL-n (used to recall next input history)
000461r 2               
000461r 2               ; DICTIONARY FLAGS
000461r 2               ; The first three bits are currently unused
000461r 2               CO = 1  ; Compile Only
000461r 2               AN = 2  ; Always Native Compile
000461r 2               IM = 4  ; Immediate Word
000461r 2               NN = 8  ; Never Native Compile
000461r 2               UF = 16 ; Includes Underflow Check (RESERVED)
000461r 2               HC = 32 ; Word has Code Field Area (CFA)
000461r 2               
000461r 2               
000461r 2               ; VARIOUS
000461r 2               MAX_LINE_LENGTH =   79      ; assumes 80 character lines
000461r 2               
000461r 2               ; END
000461r 2               
000461r 2               .segment "ZEROPAGE": zeropage
000010r 2               ; ZERO PAGE ADDRESSES/VARIABLES
000010r 2               
000010r 2               ; These are kept at the top of Zero Page, with the most important variables at
000010r 2               ; the top because the Data Stack grows towards this area from dsp0: If there is
000010r 2               ; an overflow, the lower, less important variables will be clobbered first,
000010r 2               ; giving the system a chance to recover. In other words, they are part of the
000010r 2               ; floodplain.
000010r 2               
000010r 2               ; The four variables insrc, cib, ciblen, and toin must stay together in this
000010r 2               ; sequence for the words INPUT>R and R>INPUT to work correctly.
000010r 2               
000010r 2  xx xx        cp: .res 2   ; Compiler Pointer
000012r 2  xx xx        dp: .res 2   ; Dictionary Pointer
000014r 2  xx xx        workword: .res 2   ; nt (not xt!) of word being compiled, except in
000016r 2                                          ; a :NONAME declared word (see status)
000016r 2  xx xx        insrc: .res 2   ; input Source for SOURCE-ID
000018r 2  xx xx        cib: .res 2   ; address of current input buffer
00001Ar 2  xx xx        ciblen: .res 2  ; length of current input buffer
00001Cr 2  xx xx        toin: .res 2  ; pointer to CIB (>IN in Forth)
00001Er 2  xx xx        ip: .res 2  ; Instruction Pointer (current xt)
000020r 2  xx xx        output: .res 2  ; vector for EMIT
000022r 2  xx xx        input: .res 2  ; vector for KEY
000024r 2  xx xx        havekey: .res 2  ; vector for KEY?
000026r 2  xx xx        state: .res 2  ; STATE: -1 compile, 0 interpret
000028r 2  xx xx        base: .res 2  ; number radix, default decimal
00002Ar 2  xx xx        nc_limit: .res 2  ; limit for Native Compile size
00002Cr 2  xx xx        uf_strip: .res 2  ; flag to strip underflow detection code
00002Er 2  xx xx        up: .res 2  ; User Pointer (Address of user variables)
000030r 2  xx xx        status: .res 2  ; internal status information
000032r 2                                          ; (used by : :NONAME ; ACCEPT)
000032r 2                                          ; Bit 7 = Redefined word message postpone
000032r 2                                          ;         When set before calling CREATE, it will
000032r 2                                          ;         not print the "redefined xxxx" message if
000032r 2                                          ;         the word exists. Instead, this bit will
000032r 2                                          ;         be reused and after CREATE has run, it will
000032r 2                                          ;         be set if the word was redefined and 0 if
000032r 2                                          ;         not. This bit should be 0 when not in use.
000032r 2                                          ; Bit 6 = 1 for normal ":" definitions
000032r 2                                          ;         WORKWORD contains nt of word being compiled
000032r 2                                          ;       = 0 for :NONAME definitions
000032r 2                                          ;         WORKWORD contains xt of word being compiled
000032r 2                                          ; Bit 5 = 1 for NUMBER returning a double word
000032r 2                                          ;       = 0 for NUMBER returning a single word
000032r 2                                          ; Bit 3 = 1 makes CTRL-n recall current history
000032r 2                                          ;       = 0 CTRL-n recalls previous history
000032r 2                                          ; Bit 2 = Current history buffer msb
000032r 2                                          ; Bit 1 = Current history buffer (0-7, wraps)
000032r 2                                          ; Bit 0 = Current history buffer lsb
000032r 2                                          ; status+1 is used by ACCEPT to hold history lengths.
000032r 2  xx xx        tmpbranch: .res 2  ; temporary storage for 0BRANCH, BRANCH only
000034r 2  xx xx        tmp1: .res 2  ; temporary storage
000036r 2  xx xx        tmp2: .res 2  ; temporary storage
000038r 2  xx xx        tmp3: .res 2  ; temporary storage (especially for print)
00003Ar 2  xx xx        tmpdsp: .res 2  ; temporary DSP (X) storage (two bytes)
00003Cr 2  xx xx        tmptos: .res 2  ; temporary TOS storage
00003Er 2  xx xx        editor1: .res 2  ; temporary for editors
000040r 2  xx xx        editor2: .res 2  ; temporary for editors
000042r 2  xx xx        editor3: .res 2  ; temporary for editors
000044r 2  xx xx        tohold: .res 2  ; pointer for formatted output
000046r 2  xx xx xx xx  scratch: .res 8  ; 8 byte scratchpad (see UM/MOD)
00004Ar 2  xx xx xx xx  
00004Er 2               
00004Er 2               .segment "DATASTACK": zeropage
000000r 2  xx xx xx xx  dsp_start: .res 127 ; reserve 128 bytes for data stack (64 16 bit cells)
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
00007Fr 2               dsp0:          ; first data stack location. Data stack grows down
00007Fr 2               rsp0:     ; starting stack pointer
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               .segment "BSS"
000331r 2  xx xx xx xx  hist_buff: .res $400
000335r 2  xx xx xx xx  
000339r 2  xx xx xx xx  
000731r 2  xx xx xx xx  buffer0: .res $100
000735r 2  xx xx xx xx  
000739r 2  xx xx xx xx  
000831r 2               
000831r 2               .segment "DICTIONARY"   ; the dictionary gets its own segment so that it uses all the space left in RAM
000000r 2  xx xx xx xx  dictionary: .res $1000
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
001000r 2               
001000r 2               cp_end = $7FFF          ; the dictionary ends at RAM end (everything else is before)
001000r 2               
001000r 2               cp0 = dictionary
001000r 2               bsize =     $ff
001000r 2               padoffset = $ff
001000r 2               
001000r 2               
001000r 2               
001000r 2               .segment "DATA"
000461r 2               
000461r 2               
000461r 2               
000461r 2               forth:
000461r 2                   .include "native_words.s"     ; Native Forth words. Starts with COLD
000461r 3               ; Low-level Forth word routines
000461r 3               ; Tali Forth 2 for the 65c02
000461r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
000461r 3               ; First version: 19. Jan 2014
000461r 3               ; This version: 03. Jan 2018
000461r 3               
000461r 3               ; This list is ordered alphabetically by the names of the words, not their
000461r 3               ; strings (so "!" is sorted as "STORE"). However, we start off with COLD,
000461r 3               ; ABORT, and QUIT as the natural start sequence. Each word has two special
000461r 3               ; status lines that begins with "; ## ", which allows auto-generation of the
000461r 3               ; WORDLIST.md file and other entries in the docs folder. Status entries are:
000461r 3               
000461r 3               ;       TBA --> fragment --> coded --> tested --> auto
000461r 3               
000461r 3               ; "Auto" means that the word is automatically tested by the test suite (good),
000461r 3               ; "tested" means that it was tested by hand in some way (okay), "coded" means
000461r 3               ; it hasn't been tested at all (bad). See the test suite for more details.
000461r 3               
000461r 3               ; ## COLD ( -- ) "Reset the Forth system"
000461r 3               ; ## "cold"  tested  Tali Forth
000461r 3               ;       """Reset the Forth system. Does not restart the kernel,
000461r 3               ;       use the 65c02 reset for that. Flows into ABORT.
000461r 3               ;       """
000461r 3               xt_cold:
000461r 3  D8                           cld
000462r 3               
000462r 3                               ; Set the OUTPUT vector to the default kernel_putc
000462r 3                               ; We do this really early so we can print error messages
000462r 3                               ; during debugging
000462r 3  A9 rr                        lda #<kernel_putc
000464r 3  85 rr                        sta output
000466r 3  A9 rr                        lda #>kernel_putc
000468r 3  85 rr                        sta output+1
00046Ar 3               
00046Ar 3                               ; Load all of the important zero page variables from ROM
00046Ar 3  A2 21                        ldx #cold_zp_table_end-cold_zp_table-1
00046Cr 3               
00046Cr 3               @load_zp_loop:
00046Cr 3                               ; This loop loads them back to front. We can use X here
00046Cr 3                               ; because Tali hasn't started using the stack yet.
00046Cr 3  BD rr rr                     lda cold_zp_table,x
00046Fr 3  95 rr                        sta cp,x
000471r 3  CA                           dex
000472r 3  D0 F8                        bne @load_zp_loop
000474r 3               
000474r 3                               ; Copy the 0th element.
000474r 3  AD rr rr                     lda cold_zp_table
000477r 3  85 rr                        sta cp
000479r 3                               ; Initialize 65c02 stack (Return Stack)
000479r 3  A2 rr                        ldx #rsp0
00047Br 3  9A                           txs
00047Cr 3               
00047Cr 3                               ; Clear Data Stack. This is repeated in ABORT, but this way we
00047Cr 3                               ; can load high-level words with EVALUATE
00047Cr 3  A2 rr                        ldx #dsp0
00047Er 3               
00047Er 3               
00047Er 3                               ; Initialize the user variables.
00047Er 3  A0 31                        ldy #cold_user_table_end-cold_user_table-1
000480r 3  A9 00                        lda #0
000482r 3               
000482r 3               @load_user_vars_loop:
000482r 3                               ; Like the zero page variables, these are initialized
000482r 3                               ; back to front.
000482r 3  B9 rr rr                     lda cold_user_table,y
000485r 3  91 rr                        sta (up),y
000487r 3  88                           dey
000488r 3  D0 F8                        bne @load_user_vars_loop
00048Ar 3               
00048Ar 3                               ; Copy the 0th element.
00048Ar 3  AD rr rr                     lda cold_user_table
00048Dr 3  92 rr                        sta (up)
00048Fr 3  20 rr rr                     jsr xt_cr
000492r 3               
000492r 3                               ; Define high-level words in forth_words.asm via EVALUATE. If
000492r 3                               ; you do not have any high-level words, this part can be
000492r 3                               ; commented out.
000492r 3  CA                           dex
000493r 3  CA                           dex
000494r 3  CA                           dex
000495r 3  CA                           dex
000496r 3               
000496r 3               
000496r 3                               ; start address goes NOS
000496r 3  A9 rr                        lda #<forth_words_start
000498r 3  95 02                        sta 2,x
00049Ar 3  A9 rr                        lda #>forth_words_start
00049Cr 3  95 03                        sta 3,x
00049Er 3               
00049Er 3                               ; length goes TOS
00049Er 3  A9 rr                        lda #<forth_words_end
0004A0r 3  38                           sec
0004A1r 3  E9 rr                        sbc #<forth_words_start
0004A3r 3  95 00                        sta 0,x
0004A5r 3               
0004A5r 3  A9 rr                        lda #>forth_words_end
0004A7r 3  E9 rr                        sbc #>forth_words_start
0004A9r 3  95 01                        sta 1,x
0004ABr 3               
0004ABr 3               
0004ABr 3  20 rr rr                     jsr xt_evaluate
0004AEr 3               
0004AEr 3                               ; Now define any user words via EVALUATE. If you do not have
0004AEr 3                               ; any user-defined words, this part can be commented out as
0004AEr 3                               ; well.
0004AEr 3  CA                           dex
0004AFr 3  CA                           dex
0004B0r 3  CA                           dex
0004B1r 3  CA                           dex
0004B2r 3               
0004B2r 3               
0004B2r 3                               ; start address goes NOS
0004B2r 3  A9 rr                        lda #<user_words_start
0004B4r 3  95 02                        sta 2,x
0004B6r 3  A9 rr                        lda #>user_words_start
0004B8r 3  95 03                        sta 3,x
0004BAr 3               
0004BAr 3                               ; length goes TOS
0004BAr 3  A9 rr                        lda #<user_words_end
0004BCr 3  38                           sec
0004BDr 3  E9 rr                        sbc #<user_words_start
0004BFr 3  95 00                        sta 0,x
0004C1r 3               
0004C1r 3  A9 rr                        lda #>user_words_end
0004C3r 3  E9 rr                        sbc #>user_words_start
0004C5r 3  95 01                        sta 1,x
0004C7r 3               
0004C7r 3  20 rr rr                     jsr xt_evaluate
0004CAr 3               
0004CAr 3                               ; Initialize all of the history buffers by putting a zero in
0004CAr 3                               ; each length byte.
0004CAr 3  9C rr rr                     stz hist_buff
0004CDr 3  9C rr rr                     stz hist_buff+$80
0004D0r 3  9C rr rr                     stz hist_buff+$100
0004D3r 3  9C rr rr                     stz hist_buff+$180
0004D6r 3  9C rr rr                     stz hist_buff+$200
0004D9r 3  9C rr rr                     stz hist_buff+$280
0004DCr 3  9C rr rr                     stz hist_buff+$300
0004DFr 3  9C rr rr                     stz hist_buff+$380
0004E2r 3               
0004E2r 3               
0004E2r 3                               ; fall through to ABORT
0004E2r 3               
0004E2r 3               
0004E2r 3               ; ## ABORT ( -- ) "Reset the Data Stack and restart the CLI"
0004E2r 3               ; ## "abort"  tested  ANS core
0004E2r 3                       ; """https://forth-standard.org/standard/core/ABORT
0004E2r 3                       ; Clear Data Stack and continue into QUIT. We can jump here via
0004E2r 3                       ; subroutine if we want to because we are going to reset the 65c02's
0004E2r 3                       ; stack pointer (the Return Stack) anyway during QUIT. Note we don't
0004E2r 3                       ; actually delete the stuff on the Data Stack.
0004E2r 3                       ; """
0004E2r 3               xt_abort:
0004E2r 3  A2 rr                        ldx #dsp0
0004E4r 3               
0004E4r 3                               ; fall through to QUIT
0004E4r 3               
0004E4r 3               
0004E4r 3               ; ## QUIT ( -- ) "Reset the input and get new input"
0004E4r 3               ; ## "quit"  tested  ANS core
0004E4r 3                       ; """https://forth-standard.org/standard/core/QUIT
0004E4r 3                       ; Rest the input and start command loop
0004E4r 3                       ; """
0004E4r 3               
0004E4r 3               xt_quit:
0004E4r 3                               ; Clear the Return Stack. This is a little screwed up
0004E4r 3                               ; because the 65c02 can only set the Return Stack via X,
0004E4r 3                               ; which is our Data Stack pointer. The ANS specification
0004E4r 3                               ; demands, however, that ABORT reset the Data Stack pointer
0004E4r 3  8A                           txa             ; Save the DSP that we just defined
0004E5r 3  A2 rr                        ldx #rsp0
0004E7r 3  9A                           txs
0004E8r 3  AA                           tax             ; Restore the DSP. Dude, seriously.
0004E9r 3               
0004E9r 3                               ; make sure instruction pointer is empty
0004E9r 3  64 rr                        stz ip
0004EBr 3  64 rr                        stz ip+1
0004EDr 3               
0004EDr 3                               ; SOURCE-ID is zero (keyboard input)
0004EDr 3  64 rr                        stz insrc
0004EFr 3  64 rr                        stz insrc+1
0004F1r 3               
0004F1r 3                               ; STATE is zero (interpret, not compile)
0004F1r 3  64 rr                        stz state
0004F3r 3  64 rr                        stz state+1
0004F5r 3               @get_line:
0004F5r 3  A9 rr                        lda #<buffer0   ; input buffer, this is paranoid
0004F7r 3  85 rr                        sta cib
0004F9r 3  A9 rr                        lda #>buffer0
0004FBr 3  85 rr                        sta cib+1
0004FDr 3               
0004FDr 3                               ; Size of current input buffer (CIB) is zero
0004FDr 3  64 rr                        stz ciblen
0004FFr 3  64 rr                        stz ciblen+1
000501r 3               
000501r 3                               ; Accept a line from the current import source. This is how
000501r 3                               ; modern Forths to it.
000501r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
000504r 3               
000504r 3                               ; Test flag: LSB of TOS
000504r 3  B5 00                        lda 0,x
000506r 3  D0 05                        bne @success
000508r 3               
000508r 3                               ; If REFILL returned a FALSE flag, something went wrong and we
000508r 3                               ; need to print an error message and reset the machine. We
000508r 3                               ; don't need to save TOS because we're going to clobber it
000508r 3                               ; anyway when we go back to ABORT.
000508r 3  A9 06                        lda #err_refill
00050Ar 3  4C rr rr                     jmp error
00050Dr 3               
00050Dr 3               @success:
00050Dr 3                               ; Assume we have successfully accepted a string of input from
00050Dr 3                               ; a source, with address cib and length of input in ciblen. We
00050Dr 3                               ; arrive here still with the TRUE flag from REFILL as TOS
00050Dr 3  E8                           inx                     ; drop
00050Er 3  E8                           inx
00050Fr 3               
00050Fr 3                               ; Main compile/execute routine
00050Fr 3  20 rr rr                     jsr interpret
000512r 3               
000512r 3                               ; Test for Data Stack underflow. Tali Forth does not check for
000512r 3                               ; overflow because it is so rare
000512r 3  E0 rr                        cpx #dsp0
000514r 3  F0 05                        beq @stack_ok
000516r 3  90 03                        bcc @stack_ok           ; DSP must always be smaller than DSP0
000518r 3               
000518r 3  4C rr rr                     jmp underflow_error
00051Br 3               
00051Br 3               @stack_ok:
00051Br 3                               ; Display system prompt if all went well. If we're interpreting,
00051Br 3                               ; this is " ok", if we're compiling, it's " compiled". Note
00051Br 3                               ; space at beginning of the string.
00051Br 3  A5 rr                        lda state
00051Dr 3  F0 02                        beq @print
00051Fr 3               
00051Fr 3  A9 01                        lda #1                  ; number for "compile" string
000521r 3               @print:
000521r 3  20 rr rr                     jsr print_string
000524r 3               
000524r 3                               ; Awesome line, everybody! Now get the next one.
000524r 3  80 CF                        bra @get_line
000526r 3               
000526r 3               z_cold:
000526r 3               z_abort:
000526r 3               z_quit:         ; no RTS required
000526r 3               
000526r 3               
000526r 3               
000526r 3               ; This table holds all of the initial values for the variables in zero page.
000526r 3               ; This table is used by COLD.
000526r 3               cold_zp_table:
000526r 3  rr rr                .word cp0+256+1024      ; cp moved to make room for user vars and
000528r 3                                               ; block buffer
000528r 3  rr rr                .word dictionary_start  ; dp
00052Ar 3  00 00                .word 0                 ; workword
00052Cr 3  00 00                .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
00052Er 3  rr rr                .word buffer0           ; cib
000530r 3  00 00                .word 0                 ; ciblen
000532r 3  00 00                .word 0                 ; toin
000534r 3  00 00                .word 0                 ; ip
000536r 3  rr rr                .word kernel_putc       ; output
000538r 3  rr rr                .word kernel_getc       ; input
00053Ar 3  00 00                .word 0                 ; havekey
00053Cr 3  00 00                .word 0                 ; state (0 = interpret)
00053Er 3  0A 00                .word 10                ; base
000540r 3  14 00                .word 20                ; nc-limit
000542r 3  00 00                .word 0                 ; uf_strip (off by default)
000544r 3  rr rr                .word cp0               ; up (user vars put right at beginning of
000546r 3                                               ; available RAM)
000546r 3  00 00                .word 0                 ; status
000548r 3               cold_zp_table_end:
000548r 3               
000548r 3               ; No further ZP variables are initialized. The variables past this point are
000548r 3               ; all temporaries.
000548r 3               
000548r 3               ; This table holds the inital values for the user variables. This table is
000548r 3               ; used by COLD.
000548r 3               cold_user_table:
000548r 3  00 00                .word 0                         ; BLK
00054Ar 3  00 00                .word 0                         ; SCR
00054Cr 3  00                   .byte 0                         ; CURRENT = FORTH-WORDLIST
00054Dr 3  04                   .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
00054Er 3  rr rr                .word dictionary_start          ; FORTH-WORDLIST
000550r 3  rr rr                .word editor_dictionary_start   ; EDITOR-WORDLIST
000552r 3  rr rr                .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
000554r 3  rr rr                .word root_dictionary_start     ; ROOT-WORDLIST
000556r 3  00 00 00 00          .word 0,0,0,0,0,0,0,0           ; User wordlists
00055Ar 3  00 00 00 00  
00055Er 3  00 00 00 00  
000566r 3  01                   .byte 1                         ; #ORDER
000567r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0         ; search-order
00056Br 3  00 00 00 00  
00056Fr 3  00           
000570r 3  rr rr                .word cp0+256                   ; Address of buffer (right after USER vars)
000572r 3  00 00                .word 0                         ; block in buffer
000574r 3  00 00                .word 0                         ; buffer status (not in use)
000576r 3  rr rr                .word xt_block_word_error       ; block-read vector
000578r 3  rr rr                .word xt_block_word_error       ; block-write vector
00057Ar 3               cold_user_table_end:
00057Ar 3               
00057Ar 3               
00057Ar 3               ; ## ABORT_QUOTE ( "string" -- ) "If flag TOS is true, ABORT with message"
00057Ar 3               ; ## "abort""  tested  ANS core
00057Ar 3                       ; """https://forth-standard.org/standard/core/ABORTq
00057Ar 3                       ; Abort and print a string.
00057Ar 3                       ; """
00057Ar 3               
00057Ar 3               xt_abort_quote:
00057Ar 3                               ; save the string
00057Ar 3  20 rr rr                     jsr xt_s_quote          ; S"
00057Dr 3               
00057Dr 3                               ; compile run-time part
00057Dr 3  A0 rr                        ldy #>abort_quote_runtime
00057Fr 3  A9 rr                        lda #<abort_quote_runtime
000581r 3  20 rr rr                     jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
000584r 3               
000584r 3  60           z_abort_quote:  rts
000585r 3               
000585r 3               
000585r 3               abort_quote_runtime:
000585r 3                       ; """Runtime aspect of ABORT_QUOTE"""
000585r 3               
000585r 3                               ; We arrive here with ( f addr u )
000585r 3  B5 04                        lda 4,x
000587r 3  15 05                        ora 5,x
000589r 3  F0 09                        beq @done       ; if FALSE, we're done
00058Br 3               
00058Br 3                               ; We're true, so print string and ABORT. We follow Gforth
00058Br 3                               ; in going to a new line after the string
00058Br 3  20 rr rr                     jsr xt_type
00058Er 3  20 rr rr                     jsr xt_cr
000591r 3  4C rr rr                     jmp xt_abort    ; not JSR, so never come back
000594r 3               @done:
000594r 3                               ; Drop three entries from the Data Stack
000594r 3  8A                           txa
000595r 3  18                           clc
000596r 3  69 06                        adc #6
000598r 3  AA                           tax
000599r 3               
000599r 3  60                           rts
00059Ar 3               
00059Ar 3               
00059Ar 3               
00059Ar 3               ; ## ABS ( n -- u ) "Return absolute value of a number"
00059Ar 3               ; ## "abs"  auto  ANS core
00059Ar 3                       ; """https://forth-standard.org/standard/core/ABS
00059Ar 3                       ; Return the absolute value of a number.
00059Ar 3                       ; """
00059Ar 3               
00059Ar 3               xt_abs:
00059Ar 3  20 rr rr                     jsr underflow_1
00059Dr 3               
00059Dr 3  B5 01                        lda 1,x
00059Fr 3  10 0D                        bpl @done       ; positive number, easy money!
0005A1r 3               
0005A1r 3                               ; negative: calculate 0 - n
0005A1r 3  38                           sec
0005A2r 3  A9 00                        lda #0
0005A4r 3  F5 00                        sbc 0,x         ; LSB
0005A6r 3  95 00                        sta 0,x
0005A8r 3               
0005A8r 3  A9 00                        lda #0          ; MSB
0005AAr 3  F5 01                        sbc 1,x
0005ACr 3  95 01                        sta 1,x
0005AEr 3               
0005AEr 3               @done:
0005AEr 3  60           z_abs:          rts
0005AFr 3               
0005AFr 3               
0005AFr 3               
0005AFr 3               ; ## ACCEPT ( addr n -- n ) "Receive a string of characters from the keyboard"
0005AFr 3               ; ## "accept"  auto  ANS core
0005AFr 3                       ; """https://forth-standard.org/standard/core/ACCEPT
0005AFr 3                       ; Receive a string of at most n1 characters, placing them at
0005AFr 3                       ; addr. Return the actual number of characters as n2. Characters
0005AFr 3                       ; are echoed as they are received. ACCEPT is called by REFILL in
0005AFr 3                       ; modern Forths.
0005AFr 3                       ; """
0005AFr 3               
0005AFr 3               xt_accept:
0005AFr 3  20 rr rr                     jsr underflow_2
0005B2r 3               
0005B2r 3                               ; Abort if we were asked to receive 0 chars
0005B2r 3  B5 00                        lda 0,x
0005B4r 3  15 01                        ora 1,x
0005B6r 3  D0 09                        bne @not_zero
0005B8r 3               
0005B8r 3  E8                           inx
0005B9r 3  E8                           inx
0005BAr 3  74 00                        stz 0,x
0005BCr 3  74 01                        stz 1,x
0005BEr 3               
0005BEr 3  4C rr rr                     jmp accept_done
0005C1r 3               
0005C1r 3               @not_zero:
0005C1r 3  B5 00                        lda 0,x         ; number of chars to get in tmp2 ...
0005C3r 3  85 rr                        sta tmp2
0005C5r 3  64 rr                        stz tmp2+1      ; ... but we only accept max 255 chars
0005C7r 3               
0005C7r 3  B5 02                        lda 2,x         ; address of buffer is NOS, to tmp1
0005C9r 3  85 rr                        sta tmp1
0005CBr 3  B5 03                        lda 3,x
0005CDr 3  85 rr                        sta tmp1+1
0005CFr 3               
0005CFr 3  E8                           inx
0005D0r 3  E8                           inx
0005D1r 3               
0005D1r 3  A0 00                        ldy #0
0005D3r 3               
0005D3r 3                               ; Select the next history buffer. Clear bit 3 first (so overflow
0005D3r 3                               ; from bit 2 to 3 is OK)
0005D3r 3  A5 rr                        lda status
0005D5r 3  29 F7                        and #$f7
0005D7r 3               
0005D7r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
0005D7r 3  1A                           inc
0005D8r 3               
0005D8r 3                               ; Set bit 3 for detecting if CTRL-n has been pressed the first
0005D8r 3                               ; time. This bit will be cleared on the first CTRL-n or CTRL-p
0005D8r 3                               ; received and won't be used to calculate the history buffer
0005D8r 3                               ; offset.
0005D8r 3  09 08                        ora #$08
0005DAr 3  85 rr                        sta status
0005DCr 3               
0005DCr 3               accept_loop:
0005DCr 3                               ; Out of the box, py65mon catches some CTRL sequences such as
0005DCr 3                               ; CTRL-c. We also don't need to check for CTRL-l because a
0005DCr 3                               ; vt100 terminal clears the screen automatically.
0005DCr 3               
0005DCr 3                               ; This is the internal version of KEY without all the mucking
0005DCr 3                               ; about with the Data Stack while still using the input vector
0005DCr 3  20 rr rr                     jsr key_a
0005DFr 3               
0005DFr 3                               ; We quit on both line feed and carriage return
0005DFr 3  C9 0A                        cmp #AscLF
0005E1r 3  F0 20                        beq @eol
0005E3r 3  C9 0D                        cmp #AscCR
0005E5r 3  F0 1C                        beq @eol
0005E7r 3               
0005E7r 3                               ; BACKSPACE and DEL do the same thing for the moment
0005E7r 3  C9 08                        cmp #AscBS
0005E9r 3  F0 22                        beq @backspace
0005EBr 3  C9 7F                        cmp #AscDEL     ; (CTRL-h)
0005EDr 3  F0 1E                        beq @backspace
0005EFr 3               
0005EFr 3                               ; Check for CTRL-p and CTRL-n to recall input history
0005EFr 3  C9 10                        cmp #AscCP
0005F1r 3  F0 36                        beq @ctrl_p
0005F3r 3  C9 0E                        cmp #AscCN
0005F5r 3  F0 44                        beq @ctrl_n
0005F7r 3               
0005F7r 3                               ; That's enough for now. Save and echo character.
0005F7r 3  91 rr                        sta (tmp1),y
0005F9r 3  C8                           iny
0005FAr 3               
0005FAr 3                               ; EMIT_A sidesteps all the fooling around with the Data Stack
0005FAr 3  20 rr rr                     jsr emit_a
0005FDr 3               
0005FDr 3  C4 rr                        cpy tmp2        ; reached character limit?
0005FFr 3  D0 DB                        bne accept_loop       ; fall through if buffer limit reached
000601r 3  80 03                        bra @buffer_full
000603r 3               
000603r 3               @eol:
000603r 3  20 rr rr                     jsr xt_space    ; print final space
000606r 3               
000606r 3               @buffer_full:
000606r 3                               ; REFILL updates ciblen and toin, we don't need to do it here
000606r 3  94 00                        sty 0,x         ; Y contains number of chars accepted already
000608r 3  74 01                        stz 1,x         ; we only accept 256 chars
00060Ar 3               
00060Ar 3  4C rr rr                     jmp accept_done
00060Dr 3               
00060Dr 3               @backspace:
00060Dr 3                               ; Handle backspace and delete kex, which currently do the same
00060Dr 3                               ; thing
00060Dr 3  C0 00                        cpy #0          ; buffer empty?
00060Fr 3  D0 06                        bne @1
000611r 3               
000611r 3  A9 07                        lda #AscBELL    ; complain and don't delete beyond the start of line
000613r 3  20 rr rr                     jsr emit_a
000616r 3  C8                           iny
000617r 3               @1:
000617r 3  88                           dey
000618r 3  A9 08                        lda #AscBS      ; move back one
00061Ar 3  20 rr rr                     jsr emit_a
00061Dr 3  A9 20                        lda #AscSP      ; print a space (rubout)
00061Fr 3  20 rr rr                     jsr emit_a
000622r 3  A9 08                        lda #AscBS      ; move back over space
000624r 3  20 rr rr                     jsr emit_a
000627r 3               
000627r 3  80 B3                        bra accept_loop
000629r 3               
000629r 3               @ctrl_p:
000629r 3                               ; CTRL-p was pressed. Recall the previous input buffer.
000629r 3               
000629r 3                               ; Select the previous buffer
000629r 3  A5 rr                        lda status
00062Br 3               
00062Br 3                               ; Check for 0 (need to wrap back to 7)
00062Br 3  29 07                        and #7
00062Dr 3  D0 08                        bne @ctrl_p_dec
00062Fr 3               
00062Fr 3                               ; We need to wrap back to 7.
00062Fr 3  A5 rr                        lda status
000631r 3  09 07                        ora #7
000633r 3  85 rr                        sta status
000635r 3  80 11                        bra @recall_history
000637r 3               
000637r 3               @ctrl_p_dec:
000637r 3                               ; It's safe to decrement the buffer index directly.
000637r 3  C6 rr                        dec status
000639r 3  80 0D                        bra @recall_history
00063Br 3               
00063Br 3               @ctrl_n:
00063Br 3                               ; CTRL-n was pressed. Recall the next input buffer. Select
00063Br 3                               ; the next buffer Check bit 3. If it's set, this is the first
00063Br 3                               ; time CTRL-n has been pressed and we should select the CURRENT
00063Br 3                               ; history buffer.
00063Br 3  A9 08                        lda #$8
00063Dr 3  24 rr                        bit status
00063Fr 3  D0 07                        bne @recall_history
000641r 3               
000641r 3                               ; This isn't the first time CTRL-n has been pressed, select the
000641r 3                               ; next history buffer. Clear bit 3 first (so overflow is OK)
000641r 3  A5 rr                        lda status
000643r 3  29 F7                        and #$f7
000645r 3               
000645r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
000645r 3  1A                           inc
000646r 3               
000646r 3                               ; Bit 3 (if it got set by going from buffer 7 to 0) will
000646r 3                               ; be cleared below.
000646r 3  85 rr                        sta status
000648r 3               
000648r 3                               ; Falls through to @recall_history
000648r 3               
000648r 3               @recall_history:
000648r 3                               ; Clear bit 3 (first time ctrl-n recall) bit in status
000648r 3  A9 08                        lda #%00001000
00064Ar 3  14 rr                        trb status
00064Cr 3               
00064Cr 3  20 rr rr                     jsr total_recall
00064Fr 3               
00064Fr 3                               ; tmp3 now has the address of the previous history buffer.
00064Fr 3                               ; First byte of buffer is length. Clear the line by sending
00064Fr 3                               ; CR, Y spaces, then CR.
00064Fr 3  A9 0D                        lda #AscCR
000651r 3  20 rr rr                     jsr emit_a
000654r 3               
000654r 3               input_clear:
000654r 3  C0 00                        cpy #0
000656r 3  F0 08                        beq input_cleared
000658r 3               
000658r 3  A9 20                        lda #AscSP
00065Ar 3  20 rr rr                     jsr emit_a
00065Dr 3  88                           dey
00065Er 3  80 F4                        bra input_clear
000660r 3               
000660r 3               input_cleared:
000660r 3  A9 0D                        lda #AscCR
000662r 3  20 rr rr                     jsr emit_a
000665r 3               
000665r 3                               ; Save the history length byte into histinfo+1
000665r 3                               ; ldy #0        ; Y is already 0 by clearing the line.
000665r 3  B1 rr                        lda (tmp3),y
000667r 3  85 rr                        sta status+1
000669r 3               
000669r 3                               ; Increment the tmp3 pointer so we can use ,y addressing
000669r 3                               ; on both tmp1 (the input buffer) and tmp3 (the history
000669r 3                               ; buffer)
000669r 3  E6 rr                        inc tmp3
00066Br 3  D0 02                        bne @2           ; Increment the upper byte on carry.
00066Dr 3  E6 rr                        inc tmp3+1
00066Fr 3               @2:
00066Fr 3                               ; Copy the history buffer into the input buffer,
00066Fr 3                               ; sending the characters to the output as we go.
00066Fr 3  A9 0D                        lda #AscCR
000671r 3  20 rr rr                     jsr emit_a
000674r 3               
000674r 3               @history_loop:
000674r 3                               ; See if we have reached the end of the history buffer.
000674r 3  C4 rr                        cpy status+1
000676r 3  D0 03                        bne @3
000678r 3  4C rr rr                     jmp accept_loop       ; Needs a long jump
00067Br 3               @3:
00067Br 3                               ; See if we have reached the end of the input buffer.
00067Br 3                               ; (only comparing to lower byte as we currently limit
00067Br 3                               ; to 255 characters max)
00067Br 3  C4 rr                        cpy tmp2
00067Dr 3  F0 0A                        beq @hist_filled_buffer
00067Fr 3               
00067Fr 3                               ; Copy a character and echo.
00067Fr 3  B1 rr                        lda (tmp3),y
000681r 3  91 rr                        sta (tmp1),y
000683r 3  20 rr rr                     jsr emit_a
000686r 3               
000686r 3                               ; Move to the next character.
000686r 3  C8                           iny
000687r 3  80 EB                        bra @history_loop
000689r 3               
000689r 3               @hist_filled_buffer:
000689r 3                               ; We don't want a history recall to EOL our buffer,
000689r 3                               ; so back up one character and return to editing.
000689r 3  88                           dey
00068Ar 3  4C rr rr                     jmp accept_loop
00068Dr 3               accept_done:
00068Dr 3               @done:
00068Dr 3                               ; Copy the input buffer into the currently
00068Dr 3                               ; selected history buffer.
00068Dr 3  20 rr rr                     jsr total_recall
000690r 3  85 rr                        sta status+1
000692r 3               
000692r 3                               ; Also save it in the first buffer byte.
000692r 3  A0 00                        ldy #0
000694r 3  91 rr                        sta (tmp3),y
000696r 3               
000696r 3                               ; Move path the count to the data bytes
000696r 3  E6 rr                        inc tmp3
000698r 3  D0 02                        bne @4           ; Increment the upper byte on carry.
00069Ar 3  E6 rr                        inc tmp3+1
00069Cr 3               @4:
00069Cr 3                               ; Copy the characters from the input buffer to the
00069Cr 3                               ; history buffer.
00069Cr 3               
00069Cr 3               @save_history_loop:
00069Cr 3  C4 rr                        cpy status+1
00069Er 3  F0 07                        beq @save_history_done
0006A0r 3               
0006A0r 3  B1 rr                        lda (tmp1),y
0006A2r 3  91 rr                        sta (tmp3),y
0006A4r 3  C8                           iny
0006A5r 3  80 F5                        bra @save_history_loop
0006A7r 3               
0006A7r 3               @save_history_done:
0006A7r 3               z_accept:
0006A7r 3  60                           rts
0006A8r 3               
0006A8r 3               total_recall:
0006A8r 3                       ; """Internal subroutine for ACCEPT that recalls history entry"""
0006A8r 3               
0006A8r 3                               ; Generate the address of the buffer in tmp3. Start with the
0006A8r 3                               ; base address.
0006A8r 3  A9 rr                        lda #<hist_buff
0006AAr 3  85 rr                        sta tmp3
0006ACr 3  A9 rr                        lda #>hist_buff
0006AEr 3  85 rr                        sta tmp3+1
0006B0r 3               
0006B0r 3                               ; This is a bit annoying as some bits go into each byte.
0006B0r 3                               ; .....xxx gets put into address like ......xx x.......
0006B0r 3  A5 rr                        lda status
0006B2r 3  6A                           ror
0006B3r 3  29 03                        and #3
0006B5r 3  18                           clc
0006B6r 3  65 rr                        adc tmp3+1
0006B8r 3  85 rr                        sta tmp3+1
0006BAr 3               
0006BAr 3  A5 rr                        lda status
0006BCr 3  6A                           ror             ; Rotate through carry into msb.
0006BDr 3  6A                           ror
0006BEr 3  29 80                        and #$80
0006C0r 3  18                           clc
0006C1r 3  65 rr                        adc tmp3
0006C3r 3  85 rr                        sta tmp3
0006C5r 3  90 02                        bcc @1           ; Increment the upper byte on carry.
0006C7r 3  E6 rr                        inc tmp3+1
0006C9r 3               @1:
0006C9r 3                               ; Save the current length of the input buffer in
0006C9r 3                               ; histinfo+1 temporarily.  Reduce to 127 if larger.
0006C9r 3  98                           tya
0006CAr 3  C9 80                        cmp #$80
0006CCr 3  90 02                        bcc @2
0006CEr 3  A9 7F                        lda #$7F
0006D0r 3               @2:
0006D0r 3  60                           rts
0006D1r 3               
0006D1r 3               
0006D1r 3               
0006D1r 3               
0006D1r 3               
0006D1r 3               ; ## ACTION_OF ( "name" -- xt ) "Get named deferred word's xt"
0006D1r 3               ; ## "action-of"  auto  ANS core ext
0006D1r 3                       ; """http://forth-standard.org/standard/core/ACTION-OF"""
0006D1r 3               
0006D1r 3               xt_action_of:
0006D1r 3                               ; This is a state aware word with differet behavior
0006D1r 3                               ; when used while compiling vs interpreting.
0006D1r 3                               ; Check STATE
0006D1r 3  A5 rr                        lda state
0006D3r 3  05 rr                        ora state+1
0006D5r 3  F0 0C                        beq @interpreting
0006D7r 3               
0006D7r 3               @compiling:
0006D7r 3                               ; Run ['] to compile the xt of the next word
0006D7r 3                               ; as a literal.
0006D7r 3  20 rr rr                     jsr xt_bracket_tick
0006DAr 3               
0006DAr 3                               ; Postpone DEFER@ by compiling a JSR to it.
0006DAr 3  A0 rr                        ldy #>xt_defer_fetch
0006DCr 3  A9 rr                        lda #<xt_defer_fetch
0006DEr 3  20 rr rr                     jsr cmpl_subroutine
0006E1r 3  80 06                        bra @done
0006E3r 3               
0006E3r 3               @interpreting:
0006E3r 3  20 rr rr                     jsr xt_tick
0006E6r 3  20 rr rr                     jsr xt_defer_fetch
0006E9r 3               
0006E9r 3               @done:
0006E9r 3  60           z_action_of:           rts
0006EAr 3               
0006EAr 3               
0006EAr 3               
0006EAr 3               ; ## AGAIN ( addr -- ) "Code backwards branch to address left by BEGIN"
0006EAr 3               ; ## "again"  tested  ANS core ext
0006EAr 3                       ; """https://forth-standard.org/standard/core/AGAIN"""
0006EAr 3               
0006EAr 3               xt_again:
0006EAr 3  20 rr rr                     jsr underflow_1
0006EDr 3               
0006EDr 3                               ; Add the opcode for a JMP. We use JMP instead of BRA
0006EDr 3                               ; so we have the range and don't have to calculate the
0006EDr 3                               ; offset.
0006EDr 3  A0 00                        ldy #0
0006EFr 3  A9 4C                        lda #$4C        ; JMP
0006F1r 3  91 rr                        sta (cp),y
0006F3r 3  C8                           iny
0006F4r 3               
0006F4r 3  B5 00                        lda 0,x         ; LSB of address
0006F6r 3  91 rr                        sta (cp),y
0006F8r 3  C8                           iny
0006F9r 3               
0006F9r 3  B5 01                        lda 1,x         ; MSB of address
0006FBr 3  91 rr                        sta (cp),y
0006FDr 3  C8                           iny
0006FEr 3               
0006FEr 3                               ; Allot the space we just used
0006FEr 3  98                           tya
0006FFr 3  18                           clc
000700r 3  65 rr                        adc cp
000702r 3  85 rr                        sta cp
000704r 3  90 02                        bcc @done
000706r 3  E6 rr                        inc cp+1
000708r 3               @done:
000708r 3  E8                           inx
000709r 3  E8                           inx
00070Ar 3               
00070Ar 3  60           z_again:        rts
00070Br 3               
00070Br 3               
00070Br 3               
00070Br 3               ; ## ALIGN ( -- ) "Make sure CP is aligned on word size"
00070Br 3               ; ## "align"  auto  ANS core
00070Br 3                       ; """https://forth-standard.org/standard/core/ALIGN
00070Br 3                       ; On a 8-bit machine, this does nothing. ALIGNED uses this
00070Br 3                       ; routine as well, and also does nothing
00070Br 3                       ; """
00070Br 3               
00070Br 3               ; ## ALIGNED ( addr -- addr ) "Return the first aligned address"
00070Br 3               ; ## "aligned"  auto  ANS core
00070Br 3                       ; """https://forth-standard.org/standard/core/ALIGNED"""
00070Br 3               
00070Br 3               xt_align:
00070Br 3               xt_aligned:
00070Br 3               z_align:
00070Br 3  60           z_aligned:      rts             ; stripped out during native compile
00070Cr 3               
00070Cr 3               
00070Cr 3               
00070Cr 3               ; ## ALLOT ( n -- ) "Reserve or release memory"
00070Cr 3               ; ## "allot"  auto  ANS core
00070Cr 3                       ; """https://forth-standard.org/standard/core/ALLOT
00070Cr 3                       ; Reserve a certain number of bytes (not cells) or release them.
00070Cr 3                       ; If n = 0, do nothing. If n is negative, release n bytes, but only
00070Cr 3                       ; to the beginning of the Dictionary. If n is positive (the most
00070Cr 3                       ; common case), reserve n bytes, but not past the end of the
00070Cr 3                       ; Dictionary. See http://forth-standard.org/standard/core/ALLOT
00070Cr 3                       ; """
00070Cr 3               
00070Cr 3               xt_allot:
00070Cr 3  20 rr rr                     jsr underflow_1
00070Fr 3               
00070Fr 3                               ; Releasing memory is going to be a very rare operation,
00070Fr 3                               ; so we check for it at the beginning and try to make
00070Fr 3                               ; the most common case as fast as possible
00070Fr 3  B5 01                        lda 1,x
000711r 3  30 22                        bmi @release
000713r 3               
000713r 3                               ; Common case: We are reserving memory, not releasing it
000713r 3  18                           clc
000714r 3  A5 rr                        lda cp
000716r 3  75 00                        adc 0,x
000718r 3  85 rr                        sta cp
00071Ar 3               
00071Ar 3  A5 rr                        lda cp+1
00071Cr 3  75 01                        adc 1,x
00071Er 3  85 rr                        sta cp+1
000720r 3               
000720r 3                               ; Wait, did we just grant more space than we have? This is
000720r 3                               ; a check we only do here, not for other situations like cmpl_a
000720r 3                               ; where smaller amounts are reserved.
000720r 3  A0 FF                        ldy #<cp_end
000722r 3  C4 rr                        cpy cp
000724r 3  A9 7F                        lda #>cp_end
000726r 3  E5 rr                        sbc cp+1
000728r 3  B0 48                        bcs @done               ; we're fine.
00072Ar 3               
00072Ar 3                               ; Oops, that was too much, we're beyond the end of
00072Ar 3                               ; legal Dictionary RAM. Reduce to max memory and report
00072Ar 3                               ; an error
00072Ar 3  84 rr                        sty cp                  ; still #<cp_end
00072Cr 3  A9 7F                        lda #>cp_end
00072Er 3  85 rr                        sta cp+1
000730r 3               
000730r 3  A9 00                        lda #err_allot
000732r 3  4C rr rr                     jmp error
000735r 3               
000735r 3               @release:
000735r 3                  		; The ANS standard doesn't really say what to do if too much
000735r 3                               ; memory is freed ("negatively alloted"). In fact, there isn't
000735r 3                               ; even an official test. Gforth is little help either. The good
000735r 3                               ; news is, this is going to be a rare case. We want to use as
000735r 3                               ; few bytes as possible.
000735r 3               
000735r 3                               ; What we do is let the user free anything up to the beginning
000735r 3                               ; of the RAM area assigned to the Dicionary (CP0), but at
000735r 3                               ; their own risk. This means that the Dictionary pointer DP
000735r 3                               ; might end up pointing to garbage. However, an attempt to
000735r 3                               ; free more than RAM than CP0 will lead to CP being set to CP0,
000735r 3                               ; the DP pointing to the last word in RAM (should be DROP) and
000735r 3                               ; an error message.
000735r 3               
000735r 3                               ; We arrive here with ( n ) which is negative. First step,
000735r 3                               ; subtract the number TOS from the CP for a new CP
000735r 3  CA                           dex
000736r 3  CA                           dex
000737r 3  A5 rr                        lda cp
000739r 3  95 00                        sta 0,x
00073Br 3  A5 rr                        lda cp+1
00073Dr 3  95 01                        sta 1,x
00073Fr 3               
00073Fr 3  20 rr rr                     jsr xt_plus                     ; new CP is now TOS
000742r 3               
000742r 3                               ; Second step, see if we've gone too far. We compare the new
000742r 3                               ; CP on TOS (which, if we've really screwed up, might be
000742r 3                               ; negative) with CP0. This is a signed comparison
000742r 3  CA                           dex
000743r 3  CA                           dex                             ; new CP now NOS
000744r 3  A9 rr                        lda #<cp0
000746r 3  95 00                        sta 0,x
000748r 3  A9 rr                        lda #>cp0
00074Ar 3  95 01                        sta 1,x                         ; CP0 is TOS
00074Cr 3               
00074Cr 3  20 rr rr                     jsr compare_16bit               ; still ( CP CP0 )
00074Fr 3               
00074Fr 3                               ; If CP (NOS) is smaller than CP0 (TOS), we're in trouble.
00074Fr 3                               ; This means we want Z=1 or N=1
00074Fr 3  F0 17                        beq @nega_done
000751r 3  30 15                        bmi @nega_done
000753r 3               
000753r 3                               ; Yep, we're in trouble. Set CP to CP0, set DP to the first
000753r 3                               ; word in ROM (should be DROP), and abort with an error
000753r 3  A9 rr                        lda #<cp0
000755r 3  85 rr                        sta cp
000757r 3  A9 rr                        lda #>cp0
000759r 3  85 rr                        sta cp+1
00075Br 3               
00075Br 3  A9 rr                        lda #<dictionary_start
00075Dr 3  85 rr                        sta dp
00075Fr 3  A9 rr                        lda #>dictionary_start
000761r 3  85 rr                        sta dp+1
000763r 3               
000763r 3  A9 0A                        lda #err_negallot
000765r 3  4C rr rr                     jmp error
000768r 3               
000768r 3               @nega_done:
000768r 3                               ; Save new CP, which is NOS
000768r 3  B5 02                        lda 2,x
00076Ar 3  85 rr                        sta cp
00076Cr 3  B5 03                        lda 3,x
00076Er 3  85 rr                        sta cp+1
000770r 3               
000770r 3  E8                           inx
000771r 3  E8                           inx                     ; drop through to @done
000772r 3               @done:
000772r 3  E8                           inx
000773r 3  E8                           inx
000774r 3               z_allot:
000774r 3  60                           rts
000775r 3               
000775r 3               
000775r 3               
000775r 3               ; ## ALLOW_NATIVE ( -- ) "Flag last word to allow native compiling"
000775r 3               ; ## "allow-native"  auto  Tali Forth
000775r 3               xt_allow_native:
000775r 3  20 rr rr                     jsr current_to_dp
000778r 3  A0 01                        ldy #1          ; offset for status byte
00077Ar 3  B1 rr                        lda (dp),y
00077Cr 3  29 F5                        and #$ff-NN-AN  ; AN and NN flag is clear.
00077Er 3  91 rr                        sta (dp),y
000780r 3               z_allow_native:
000780r 3  60                           rts
000781r 3               
000781r 3               
000781r 3               ; ## ALSO ( -- ) "Make room in the search order for another wordlist"
000781r 3               ; ## "also"  auto  ANS search ext
000781r 3                       ; """http://forth-standard.org/standard/search/ALSO"""
000781r 3               xt_also:
000781r 3  20 rr rr                     jsr xt_get_order
000784r 3  20 rr rr                     jsr xt_over
000787r 3  20 rr rr                     jsr xt_swap
00078Ar 3  20 rr rr                     jsr xt_one_plus
00078Dr 3  20 rr rr                     jsr xt_set_order
000790r 3               
000790r 3  60           z_also:         rts
000791r 3               
000791r 3               
000791r 3               ; ## ALWAYS_NATIVE ( -- ) "Flag last word as always natively compiled"
000791r 3               ; ## "always-native"  auto  Tali Forth
000791r 3               xt_always_native:
000791r 3  20 rr rr                     jsr current_to_dp
000794r 3  A0 01                        ldy #1          ; offset for status byte
000796r 3  B1 rr                        lda (dp),y
000798r 3  09 02                        ora #AN         ; Make sure AN flag is set
00079Ar 3  29 F7                        and #$ff-NN     ; and NN flag is clear.
00079Cr 3  91 rr                        sta (dp),y
00079Er 3               z_always_native:
00079Er 3  60                           rts
00079Fr 3               
00079Fr 3               
00079Fr 3               ; ## AND ( n n -- n ) "Logically AND TOS and NOS"
00079Fr 3               ; ## "and"  auto  ANS core
00079Fr 3                       ; """https://forth-standard.org/standard/core/AND"""
00079Fr 3               xt_and:
00079Fr 3  20 rr rr                     jsr underflow_2
0007A2r 3               
0007A2r 3  B5 00                        lda 0,x
0007A4r 3  35 02                        and 2,x
0007A6r 3  95 02                        sta 2,x
0007A8r 3               
0007A8r 3  B5 01                        lda 1,x
0007AAr 3  35 03                        and 3,x
0007ACr 3  95 03                        sta 3,x
0007AEr 3               
0007AEr 3  E8                           inx
0007AFr 3  E8                           inx
0007B0r 3               
0007B0r 3  60           z_and:          rts
0007B1r 3               
0007B1r 3               
0007B1r 3               ; ## ASSEMBLER_WORDLIST ( -- u ) "WID for the Assembler wordlist"
0007B1r 3               ; ## "assembler-wordlist"  tested  Tali Assembler
0007B1r 3                       ; """ Commonly used like `assembler-wordlist >order` to add the
0007B1r 3                       ; assembler words to the search order so they can be used.
0007B1r 3                       ; See the tutorial on Wordlists and the Search Order for
0007B1r 3                       ; more information.
0007B1r 3                       ;
0007B1r 3                       ; This is a dummy entry, the code is shared with TWO
0007B1r 3                       ; """
0007B1r 3               
0007B1r 3               
0007B1r 3               ; ## AT_XY ( n m -- ) "Move cursor to position given"
0007B1r 3               ; ## "at-xy"  tested  ANS facility
0007B1r 3                       ; """https://forth-standard.org/standard/facility/AT-XY
0007B1r 3                       ; On an ANSI compatible terminal, place cursor at row n colum m.
0007B1r 3                       ; ANSI code is ESC[<n>;<m>H
0007B1r 3                       ;
0007B1r 3                       ; Do not use U. to print the numbers because the
0007B1r 3                       ; trailing space will not work with xterm
0007B1r 3                       ; """
0007B1r 3               xt_at_xy:
0007B1r 3  20 rr rr                     jsr underflow_2
0007B4r 3               
0007B4r 3  A9 1B                        lda #AscESC
0007B6r 3  20 rr rr                     jsr emit_a
0007B9r 3  A9 5B                        lda #$5B        ; ASCII for "["
0007BBr 3  20 rr rr                     jsr emit_a
0007BEr 3  20 rr rr                     jsr print_u
0007C1r 3  A9 3B                        lda #$3B        ; ASCII for ";"
0007C3r 3  20 rr rr                     jsr emit_a
0007C6r 3  20 rr rr                     jsr print_u
0007C9r 3  A9 48                        lda #'H'
0007CBr 3  20 rr rr                     jsr emit_a
0007CEr 3               
0007CEr 3  60           z_at_xy:        rts
0007CFr 3               
0007CFr 3               
0007CFr 3               ; ## BACKSLASH ( -- ) "Ignore rest of line"
0007CFr 3               ; ## "\"  auto  ANS core ext
0007CFr 3                       ; """https://forth-standard.org/standard/core/bs"""
0007CFr 3               xt_backslash:
0007CFr 3  A5 rr                        lda ciblen
0007D1r 3  85 rr                        sta toin
0007D3r 3  A5 rr                        lda ciblen+1
0007D5r 3  85 rr                        sta toin+1
0007D7r 3               
0007D7r 3  60           z_backslash:    rts
0007D8r 3               
0007D8r 3               
0007D8r 3               ; ## BASE ( -- addr ) "Push address of radix base to stack"
0007D8r 3               ; ## "base"  auto  ANS core
0007D8r 3                       ; """https://forth-standard.org/standard/core/BASE
0007D8r 3                       ; The ANS Forth standard sees the base up to 36, so we can cheat and
0007D8r 3                       ; ingore the MSB
0007D8r 3                       ; """
0007D8r 3               xt_base:
0007D8r 3  CA                           dex
0007D9r 3  CA                           dex
0007DAr 3  A9 rr                        lda #<base
0007DCr 3  95 00                        sta 0,x         ; LSB
0007DEr 3  74 01                        stz 1,x         ; MSB is always 0
0007E0r 3               
0007E0r 3  60           z_base:         rts
0007E1r 3               
0007E1r 3               
0007E1r 3               ; ## BEGIN ( -- addr ) "Mark entry point for loop"
0007E1r 3               ; ## "begin"  auto  ANS core
0007E1r 3                       ; """https://forth-standard.org/standard/core/BEGIN
0007E1r 3                       ;
0007E1r 3                       ; This is just an immediate version of here which could just
0007E1r 3                       ; as well be coded in Forth as
0007E1r 3                       ;       : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
0007E1r 3                       ; Since this is a compiling word, we don't care that much about
0007E1r 3                       ; about speed
0007E1r 3                       ; """
0007E1r 3               
0007E1r 3               xt_begin:
0007E1r 3  20 rr rr                     jsr xt_here
0007E4r 3  60           z_begin:        rts
0007E5r 3               
0007E5r 3               
0007E5r 3               
0007E5r 3               ; ## BELL ( -- ) "Emit ASCII BELL"
0007E5r 3               ; ## "bell"  tested  Tali Forth
0007E5r 3               xt_bell:
0007E5r 3  A9 07                        lda #7          ; ASCII value for BELl
0007E7r 3  20 rr rr                     jsr emit_a
0007EAr 3               
0007EAr 3  60           z_bell:         rts
0007EBr 3               
0007EBr 3               
0007EBr 3               ; ## BL ( -- c ) "Push ASCII value of SPACE to stack"
0007EBr 3               ; ## "bl"  auto  ANS core
0007EBr 3                       ; """https://forth-standard.org/standard/core/BL"""
0007EBr 3               
0007EBr 3               xt_bl:
0007EBr 3  CA                           dex
0007ECr 3  CA                           dex
0007EDr 3  A9 20                        lda #AscSP
0007EFr 3  95 00                        sta 0,x
0007F1r 3  74 01                        stz 1,x
0007F3r 3               
0007F3r 3  60           z_bl:           rts
0007F4r 3               
0007F4r 3               
0007F4r 3               ; ## BLK ( -- addr ) "Push address of block being interpreted"
0007F4r 3               ; ## "block"  auto  ANS block
0007F4r 3                       ; """https://forth-standard.org/standard/block/BLK"""
0007F4r 3               xt_blk:
0007F4r 3                               ; BLK is at UP + blk_offset
0007F4r 3  CA                           dex
0007F5r 3  CA                           dex
0007F6r 3  18                           clc
0007F7r 3  A5 rr                        lda up
0007F9r 3  69 00                        adc #blk_offset ; Add offset
0007FBr 3  95 00                        sta 0,x
0007FDr 3  A5 rr                        lda up+1
0007FFr 3  69 00                        adc #0          ; Adding carry
000801r 3  95 01                        sta 1,x
000803r 3               
000803r 3  60           z_blk:          rts
000804r 3               
000804r 3               
000804r 3               ; ## BLKBUFFER ( -- addr ) "Push address of block buffer"
000804r 3               ; ## "blkbuffer"  auto  Tali block
000804r 3               xt_blkbuffer:
000804r 3                               ; blkbuffer address is at UP + blkbuffer_offset.
000804r 3                               ; Unlike some of the other user variables, we actually
000804r 3                               ; want to push the address stored here, which will
000804r 3                               ; point to somewhere outside of the user variables.
000804r 3  CA                           dex
000805r 3  CA                           dex
000806r 3                               ; Put the address on the stack.
000806r 3  A0 28                        ldy #blkbuffer_offset
000808r 3  B1 rr                        lda (up),y
00080Ar 3  95 00                        sta 0,x
00080Cr 3  C8                           iny             ; Move along to the next byte
00080Dr 3  B1 rr                        lda (up),y
00080Fr 3  95 01                        sta 1,x
000811r 3               
000811r 3  60           z_blkbuffer:    rts
000812r 3               
000812r 3               
000812r 3               ; ## BLOCK ( u -- a-addr ) "Fetch a block into a buffer"
000812r 3               ; ## "block"  auto  ANS block
000812r 3                       ; """https://forth-standard.org/standard/block/BLOCK"""
000812r 3               
000812r 3               xt_block:
000812r 3               
000812r 3                               ; See if the block requested is the same as the one we
000812r 3                               ; currently have in the buffer. Check the LSB.
000812r 3  A0 2A                        ldy #buffblocknum_offset
000814r 3  B1 rr                        lda (up),y
000816r 3  D5 00                        cmp 0,x
000818r 3  D0 0F                        bne @not_in_buffer
00081Ar 3               
00081Ar 3                               ; Check the MSB.
00081Ar 3  C8                           iny
00081Br 3  B1 rr                        lda (up),y
00081Dr 3  D5 01                        cmp 1,x
00081Fr 3  D0 08                        bne @not_in_buffer
000821r 3               
000821r 3                               ; The block is in the buffer. See if the buffer is in use.
000821r 3  A0 2C                        ldy #buffstatus_offset
000823r 3  B1 rr                        lda (up),y
000825r 3  29 01                        and #1          ; Check the in-use flag (bit 0)
000827r 3  D0 30                        bne @done       ; It's already in the buffer and in use.
000829r 3                                               ; @done will replace the block# with the
000829r 3                                               ; buffer address.
000829r 3               @not_in_buffer:
000829r 3                               ; Check the buffer status
000829r 3  A0 2C                        ldy #buffstatus_offset
00082Br 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
00082Dr 3  C9 03                        cmp #3          ; LSB is needed.
00082Fr 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
000831r 3               
000831r 3                               ; We need to save the block.
000831r 3  20 rr rr                     jsr xt_blkbuffer
000834r 3  20 rr rr                     jsr xt_buffblocknum
000837r 3  20 rr rr                     jsr xt_fetch
00083Ar 3  20 rr rr                     jsr xt_block_write
00083Dr 3               
00083Dr 3               @buffer_available:
00083Dr 3                               ; Save the block number.
00083Dr 3  A0 2A                        ldy #buffblocknum_offset
00083Fr 3  B5 00                        lda 0,x
000841r 3  91 rr                        sta (up),y
000843r 3  C8                           iny
000844r 3  B5 01                        lda 1,x
000846r 3  91 rr                        sta (up),y
000848r 3               
000848r 3                               ; Get the requested block.
000848r 3  20 rr rr                     jsr xt_blkbuffer
00084Br 3  20 rr rr                     jsr xt_swap
00084Er 3  20 rr rr                     jsr xt_block_read
000851r 3               
000851r 3                               ; Mark the buffer as clean and in-use.
000851r 3  A9 01                        lda #1
000853r 3  A0 2C                        ldy #buffstatus_offset
000855r 3  91 rr                        sta (up),y
000857r 3               
000857r 3                               ; Make room on the stack for the return address.
000857r 3  CA                           dex
000858r 3  CA                           dex
000859r 3               
000859r 3               @done:
000859r 3                               ; It's in the buffer. Return the buffer address.
000859r 3  A0 28                        ldy #blkbuffer_offset
00085Br 3  B1 rr                        lda (up),y
00085Dr 3  95 00                        sta 0,x
00085Fr 3  C8                           iny
000860r 3  B1 rr                        lda (up),y
000862r 3  95 01                        sta 1,x
000864r 3               
000864r 3  60           z_block:        rts
000865r 3               
000865r 3               
000865r 3               
000865r 3               ; ## BLOCK_RAMDRIVE_INIT ( u -- ) "Create a ramdrive for blocks"
000865r 3               ; ## "block-ramdrive-init"  auto  Tali block
000865r 3                       ; """Create a RAM drive, with the given number of
000865r 3                       ; blocks, in the dictionary along with setting up the block words to
000865r 3                       ; use it.  The read/write routines do not provide bounds checking.
000865r 3                       ; Expected use: `4 block-ramdrive-init` ( to create blocks 0-3 )
000865r 3                       ; """
000865r 3               
000865r 3               xt_block_ramdrive_init:
000865r 3  20 rr rr                     jsr underflow_1
000868r 3               
000868r 3                               ; Store the string to run here as a string literal.
000868r 3                               ; See SLITERAL for the format information. This way, we
000868r 3                               ; don't have the words defined below in the Dictionary until
000868r 3                               ; we really use them.
000868r 3  4C rr rr                     jmp @after_ramdrive_code
00086Br 3               
00086Br 3               @ramdrive_code:
00086Br 3  62 61 73 65          .byte "base @ swap decimal"
00086Fr 3  20 40 20 73  
000873r 3  77 61 70 20  
00087Er 3  20 31 30 32          .byte " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
000882r 3  34 20 2A     
000885r 3  20 64 75 70          .byte " dup"    ; ( Save a copy for formatting it at the end )
000889r 3  20 62 75 66          .byte " buffer: ramdrive" ; ( Create ramdrive )
00088Dr 3  66 65 72 3A  
000891r 3  20 72 61 6D  
00089Ar 3                       ; ( These routines just copy between the buffer and the ramdrive blocks )
00089Ar 3  20 3A 20 62          .byte " : block-read-ramdrive"  ; ( addr u -- )
00089Er 3  6C 6F 63 6B  
0008A2r 3  2D 72 65 61  
0008B0r 3  20 72 61 6D          .byte " ramdrive swap 1024 * + swap 1024 move ;"
0008B4r 3  64 72 69 76  
0008B8r 3  65 20 73 77  
0008D8r 3  20 3A 20 62          .byte " : block-write-ramdrive" ; ( addr u -- )
0008DCr 3  6C 6F 63 6B  
0008E0r 3  2D 77 72 69  
0008EFr 3  20 72 61 6D          .byte " ramdrive swap 1024 * + 1024 move ;"
0008F3r 3  64 72 69 76  
0008F7r 3  65 20 73 77  
000912r 3  20 27 20 62          .byte " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
000916r 3  6C 6F 63 6B  
00091Ar 3  2D 72 65 61  
00093Cr 3  20 27 20 62          .byte " ' block-write-ramdrive block-write-vector !"
000940r 3  6C 6F 63 6B  
000944r 3  2D 77 72 69  
000968r 3  20 72 61 6D          .byte " ramdrive swap blank base !"
00096Cr 3  64 72 69 76  
000970r 3  65 20 73 77  
000983r 3               
000983r 3               @after_ramdrive_code:
000983r 3  20 rr rr                     jsr sliteral_runtime
000986r 3               
000986r 3  rr rr 18 01  .word @ramdrive_code, @after_ramdrive_code-@ramdrive_code
00098Ar 3               
00098Ar 3                               ; The address and length of the ramdrive code is now on the
00098Ar 3                               ; stack. Call EVALUATE to run it.
00098Ar 3  20 rr rr                     jsr xt_evaluate
00098Dr 3               
00098Dr 3               z_block_ramdrive_init:
00098Dr 3  60                           rts
00098Er 3               
00098Er 3               
00098Er 3               
00098Er 3               ; ## BLOCK_READ ( addr u -- ) "Read a block from storage (deferred word)"
00098Er 3               ; ## "block-read"  auto  Tali block
00098Er 3                       ; """BLOCK-READ is a vectored word that the user needs to override
00098Er 3                       ; with their own version to read a block from storage.
00098Er 3                       ; The stack parameters are ( buffer_address block# -- ).
00098Er 3                       ; """
00098Er 3               xt_block_read:
00098Er 3                               ; Execute the BLOCK-READ-VECTOR
00098Er 3  A0 2E                        ldy #blockread_offset
000990r 3  B1 rr                        lda (up),y
000992r 3  85 rr                        sta tmp1
000994r 3  C8                           iny
000995r 3  B1 rr                        lda (up),y
000997r 3  85 rr                        sta tmp1+1
000999r 3               
000999r 3  6C rr rr                     jmp (tmp1)
00099Cr 3               
00099Cr 3               z_block_read:   ; No RTS needed
00099Cr 3               
00099Cr 3               
00099Cr 3               ; ## BLOCK_READ_VECTOR ( -- addr ) "Address of the block-read vector"
00099Cr 3               ; ## "block-read-vector"  auto  Tali block
00099Cr 3                       ; """BLOCK-READ is a vectored word that the user needs to override
00099Cr 3                       ; with their own version to read a block from storage.
00099Cr 3                       ; This word gives the address of the vector so it can be replaced.
00099Cr 3                       ; """
00099Cr 3               xt_block_read_vector:
00099Cr 3                               ; Get the BLOCK-READ-VECTOR address
00099Cr 3  CA                           dex
00099Dr 3  CA                           dex
00099Er 3  18                           clc
00099Fr 3  A5 rr                        lda up
0009A1r 3  69 2E                        adc #blockread_offset
0009A3r 3  95 00                        sta 0,x
0009A5r 3  A5 rr                        lda up+1
0009A7r 3  69 00                        adc #0          ; Add carry
0009A9r 3  95 01                        sta 1,x
0009ABr 3               
0009ABr 3               z_block_read_vector:
0009ABr 3  60                           rts
0009ACr 3               
0009ACr 3               
0009ACr 3               ; This is the default error message the vectored words BLOCK-READ and
0009ACr 3               ; BLOCK-WRITE start with. This word is not included in the dictionary.
0009ACr 3               xt_block_word_error:
0009ACr 3  A9 0C                        lda #err_blockwords
0009AEr 3  4C rr rr                     jmp error       ; no RTS needed
0009B1r 3               z_block_word_error:
0009B1r 3               
0009B1r 3               ; ## BLOCK_WRITE ( addr u -- ) "Write a block to storage (deferred word)"
0009B1r 3               ; ## "block-write"  auto  Tali block
0009B1r 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
0009B1r 3                       ; with their own version to write a block to storage.
0009B1r 3                       ; The stack parameters are ( buffer_address block# -- ).
0009B1r 3                       ; """
0009B1r 3               xt_block_write:
0009B1r 3                               ; Execute the BLOCK-READ-VECTOR
0009B1r 3  A0 30                        ldy #blockwrite_offset
0009B3r 3  B1 rr                        lda (up),y
0009B5r 3  85 rr                        sta tmp1
0009B7r 3  C8                           iny
0009B8r 3  B1 rr                        lda (up),y
0009BAr 3  85 rr                        sta tmp1+1
0009BCr 3  6C rr rr                     jmp (tmp1)
0009BFr 3               
0009BFr 3               z_block_write:  ; No RTS needed
0009BFr 3               
0009BFr 3               
0009BFr 3               ; ## BLOCK_WRITE_VECTOR ( -- addr ) "Address of the block-write vector"
0009BFr 3               ; ## "block-write-vector"  auto  Tali block
0009BFr 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
0009BFr 3                       ; with their own version to write a block to storage.
0009BFr 3                       ; This word gives the address of the vector so it can be replaced.
0009BFr 3                       ; """
0009BFr 3               xt_block_write_vector:
0009BFr 3                               ; Get the BLOCK-WRITE-VECTOR address
0009BFr 3  CA                           dex
0009C0r 3  CA                           dex
0009C1r 3  18                           clc
0009C2r 3  A5 rr                        lda up
0009C4r 3  69 30                        adc #blockwrite_offset
0009C6r 3  95 00                        sta 0,x
0009C8r 3  A5 rr                        lda up+1
0009CAr 3  69 00                        adc #0          ; Add carry
0009CCr 3  95 01                        sta 1,x
0009CEr 3               
0009CEr 3               z_block_write_vector:
0009CEr 3  60                           rts
0009CFr 3               
0009CFr 3               
0009CFr 3               ; ## BOUNDS ( addr u -- addr+u addr ) "Prepare address for looping"
0009CFr 3               ; ## "bounds"  auto  Gforth
0009CFr 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Memory-Blocks.html
0009CFr 3                       ; Given a string, return the correct Data Stack parameters for
0009CFr 3                       ; a DO/LOOP loop over its characters. This is realized as
0009CFr 3                       ; OVER + SWAP in Forth, but we do it a lot faster in assembler
0009CFr 3                       ; """
0009CFr 3               xt_bounds:
0009CFr 3  20 rr rr                     jsr underflow_2
0009D2r 3               
0009D2r 3  18                           clc
0009D3r 3  B5 00                        lda 0,x                 ; LSB u
0009D5r 3  B4 02                        ldy 2,x                 ; LSB addr
0009D7r 3  75 02                        adc 2,x
0009D9r 3  95 02                        sta 2,x                 ; LSB addr+u
0009DBr 3  94 00                        sty 0,x
0009DDr 3               
0009DDr 3  B5 01                        lda 1,x                 ; MSB u
0009DFr 3  B4 03                        ldy 3,x                 ; MSB addr
0009E1r 3  75 03                        adc 3,x
0009E3r 3  95 03                        sta 3,x                 ; MSB addr+u
0009E5r 3  94 01                        sty 1,x
0009E7r 3               
0009E7r 3  60           z_bounds:       rts
0009E8r 3               
0009E8r 3               
0009E8r 3               ; ## BRACKET_CHAR ( "c" -- ) "Compile character"
0009E8r 3               ; ## "[char]"  auto  ANS core
0009E8r 3                       ; """https://forth-standard.org/standard/core/BracketCHAR
0009E8r 3                       ; Compile the ASCII value of a character as a literal. This is an
0009E8r 3                       ; immediate, compile-only word.
0009E8r 3                       ;
0009E8r 3                       ; A definition given in
0009E8r 3                       ; http://forth-standard.org/standard/implement is
0009E8r 3                       ; : [CHAR]  CHAR POSTPONE LITERAL ; IMMEDIATE
0009E8r 3                       ; """
0009E8r 3               xt_bracket_char:
0009E8r 3  20 rr rr                     jsr xt_char
0009EBr 3  20 rr rr                     jsr xt_literal
0009EEr 3  60           z_bracket_char: rts
0009EFr 3               
0009EFr 3               
0009EFr 3               ; ## BRACKET_TICK ( -- ) "Store xt of following word during compilation"
0009EFr 3               ; ## "[']"  auto  ANS core
0009EFr 3                       ; """https://forth-standard.org/standard/core/BracketTick"""
0009EFr 3               xt_bracket_tick:
0009EFr 3  20 rr rr                     jsr xt_tick
0009F2r 3  20 rr rr                     jsr xt_literal
0009F5r 3  60           z_bracket_tick: rts
0009F6r 3               
0009F6r 3               
0009F6r 3               ; ## BUFFBLOCKNUM ( -- addr ) "Push address of variable holding block in buffer"
0009F6r 3               ; ## "buffblocknum"  auto  Tali block
0009F6r 3               xt_buffblocknum:
0009F6r 3                               ; BUFFBLOCKNUM is at UP + buffblocknum_offset
0009F6r 3  CA                           dex
0009F7r 3  CA                           dex
0009F8r 3  18                           clc
0009F9r 3  A5 rr                        lda up
0009FBr 3  69 2A                        adc #buffblocknum_offset        ; Add offset
0009FDr 3  95 00                        sta 0,x
0009FFr 3  A5 rr                        lda up+1
000A01r 3  69 00                        adc #0                          ; Adding carry
000A03r 3  95 01                        sta 1,x
000A05r 3               
000A05r 3  60           z_buffblocknum: rts
000A06r 3               
000A06r 3               
000A06r 3               ; ## BUFFER ( u -- a-addr ) "Get a buffer for a block"
000A06r 3               ; ## "buffer"  auto  ANS block
000A06r 3                       ; """https://forth-standard.org/standard/block/BUFFER"""
000A06r 3               
000A06r 3               xt_buffer:
000A06r 3                               ; Check the buffer status
000A06r 3  A0 2C                        ldy #buffstatus_offset
000A08r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
000A0Ar 3  C9 03                        cmp #3          ; LSB is needed.
000A0Cr 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
000A0Er 3               
000A0Er 3                               ; We need to save the block.
000A0Er 3  20 rr rr                     jsr xt_blkbuffer
000A11r 3  20 rr rr                     jsr xt_buffblocknum
000A14r 3  20 rr rr                     jsr xt_fetch
000A17r 3  20 rr rr                     jsr xt_block_write
000A1Ar 3               
000A1Ar 3               @buffer_available:
000A1Ar 3                               ; Save the block number.
000A1Ar 3  A0 2A                        ldy #buffblocknum_offset
000A1Cr 3  B5 00                        lda 0,x
000A1Er 3  91 rr                        sta (up),y
000A20r 3  C8                           iny
000A21r 3  B5 01                        lda 1,x
000A23r 3  91 rr                        sta (up),y
000A25r 3               
000A25r 3                               ; Mark the buffer as clean and in-use.
000A25r 3  A9 01                        lda #1
000A27r 3  A0 2C                        ldy #buffstatus_offset
000A29r 3  91 rr                        sta (up),y
000A2Br 3               
000A2Br 3               @done:
000A2Br 3                               ; Return the buffer address.
000A2Br 3  A0 28                        ldy #blkbuffer_offset
000A2Dr 3  B1 rr                        lda (up),y
000A2Fr 3  95 00                        sta 0,x
000A31r 3  C8                           iny
000A32r 3  B1 rr                        lda (up),y
000A34r 3  95 01                        sta 1,x
000A36r 3               
000A36r 3  60           z_buffer:       rts
000A37r 3               
000A37r 3               
000A37r 3               
000A37r 3               ; ## BUFFER_COLON ( u "<name>" -- ; -- addr ) "Create an uninitialized buffer"
000A37r 3               ; ## "buffer:"  auto  ANS core ext
000A37r 3                               ; """https://forth-standard.org/standard/core/BUFFERColon
000A37r 3                               ; Create a buffer of size u that puts its address on the stack
000A37r 3                               ; when its name is used.
000A37r 3                               ; """
000A37r 3               xt_buffer_colon:
000A37r 3  20 rr rr                     jsr xt_create
000A3Ar 3  20 rr rr                     jsr xt_allot
000A3Dr 3  60           z_buffer_colon: rts
000A3Er 3               
000A3Er 3               
000A3Er 3               ; ## BUFFSTATUS ( -- addr ) "Push address of variable holding buffer status"
000A3Er 3               ; ## "buffstatus"  auto  Tali block
000A3Er 3               xt_buffstatus:
000A3Er 3                               ; BUFFSTATUS is at UP + buffstatus_offset
000A3Er 3  CA                           dex
000A3Fr 3  CA                           dex
000A40r 3  18                           clc
000A41r 3  A5 rr                        lda up
000A43r 3  69 2C                        adc #buffstatus_offset  ; Add offset
000A45r 3  95 00                        sta 0,x
000A47r 3  A5 rr                        lda up+1
000A49r 3  69 00                        adc #0                  ; Adding carry
000A4Br 3  95 01                        sta 1,x
000A4Dr 3               
000A4Dr 3  60           z_buffstatus:   rts
000A4Er 3               
000A4Er 3               
000A4Er 3               ; ## BYE ( -- ) "Break"
000A4Er 3               ; ## "bye"  tested  ANS tools ext
000A4Er 3                       ; """https://forth-standard.org/standard/tools/BYE"""
000A4Er 3               
000A4Er 3               xt_bye:
000A4Er 3                               ;brk
000A4Er 3  4C rr rr                     jmp platform_bye
000A51r 3               z_bye:          ;rts             ; never reached
000A51r 3               
000A51r 3               
000A51r 3               
000A51r 3               ; ## C_COMMA ( c -- ) "Store one byte/char in the Dictionary"
000A51r 3               ; ## "c,"  auto  ANS core
000A51r 3                       ; """https://forth-standard.org/standard/core/CComma"""
000A51r 3               
000A51r 3               xt_c_comma:
000A51r 3  20 rr rr                     jsr underflow_1
000A54r 3               
000A54r 3  B5 00                        lda 0,x
000A56r 3  20 rr rr                     jsr cmpl_a
000A59r 3               
000A59r 3  E8                           inx
000A5Ar 3  E8                           inx
000A5Br 3               
000A5Br 3  60           z_c_comma:      rts
000A5Cr 3               
000A5Cr 3               
000A5Cr 3               
000A5Cr 3               ; ## C_FETCH ( addr -- c ) "Get a character/byte from given address"
000A5Cr 3               ; ## "c@"  auto  ANS core
000A5Cr 3                       ; """https://forth-standard.org/standard/core/CFetch"""
000A5Cr 3               xt_c_fetch:
000A5Cr 3  20 rr rr                     jsr underflow_1
000A5Fr 3               
000A5Fr 3  A1 00                        lda (0,x)
000A61r 3  95 00                        sta 0,x
000A63r 3  74 01                        stz 1,x         ; Ignore LSB
000A65r 3               
000A65r 3  60           z_c_fetch:      rts
000A66r 3               
000A66r 3               
000A66r 3               ; ## C_STORE ( c addr -- ) "Store character at address given"
000A66r 3               ; ## "c!"  auto  ANS core
000A66r 3                       ; """https://forth-standard.org/standard/core/CStore"""
000A66r 3               xt_c_store:
000A66r 3  20 rr rr                     jsr underflow_2
000A69r 3               
000A69r 3  B5 02                        lda 2,x
000A6Br 3  81 00                        sta (0,x)
000A6Dr 3               
000A6Dr 3  E8                           inx
000A6Er 3  E8                           inx
000A6Fr 3  E8                           inx
000A70r 3  E8                           inx
000A71r 3               
000A71r 3  60           z_c_store:      rts
000A72r 3               
000A72r 3               
000A72r 3               ; ## CASE (C: -- 0) ( -- ) "Conditional flow control"
000A72r 3               ; ## "case"  auto  ANS core ext
000A72r 3                       ; """http://forth-standard.org/standard/core/CASE
000A72r 3                       ;
000A72r 3                       ; This is a dummy header, CASE shares the actual code with ZERO.
000A72r 3                       ; """
000A72r 3               
000A72r 3               
000A72r 3               ; ## CELL_PLUS ( u -- u ) "Add cell size in bytes"
000A72r 3               ; ## "cell+"  auto  ANS core
000A72r 3                       ; """https://forth-standard.org/standard/core/CELLPlus
000A72r 3                       ; Add the number of bytes ("address units") that one cell needs.
000A72r 3                       ; Since this is an 8 bit machine with 16 bit cells, we add two bytes.
000A72r 3                       ; """
000A72r 3               
000A72r 3               xt_cell_plus:
000A72r 3  20 rr rr                     jsr underflow_1
000A75r 3               
000A75r 3  F6 00                        inc 0,x
000A77r 3  D0 02                        bne @1
000A79r 3  F6 01                        inc 1,x
000A7Br 3               @1:
000A7Br 3  F6 00                        inc 0,x
000A7Dr 3  D0 02                        bne @done
000A7Fr 3  F6 01                        inc 1,x
000A81r 3               @done:
000A81r 3  60           z_cell_plus:    rts
000A82r 3               
000A82r 3               
000A82r 3               
000A82r 3               ; ## CELLS ( u -- u ) "Convert cells to size in bytes"
000A82r 3               ; ## "cells"  auto  ANS core
000A82r 3                       ; """https://forth-standard.org/standard/core/CELLS
000A82r 3                       ;
000A82r 3                       ; Dummy entry for the CELLS word, the code is the same as for
000A82r 3                       ; 2*, which is where the header directs us to
000A82r 3                       ; """
000A82r 3               
000A82r 3               
000A82r 3               ; ## CHAR ( "c" -- u ) "Convert character to ASCII value"
000A82r 3               ; ## "char"  auto  ANS core
000A82r 3                       ; """https://forth-standard.org/standard/core/CHAR"""
000A82r 3               
000A82r 3               xt_char:
000A82r 3                               ; get character from string, returns ( addr u )
000A82r 3  20 rr rr                     jsr xt_parse_name
000A85r 3               
000A85r 3                               ; if we got back a zero, we have a problem
000A85r 3  B5 00                        lda 0,x
000A87r 3  15 01                        ora 1,x
000A89r 3  D0 05                        bne @not_empty
000A8Br 3               
000A8Br 3  A9 05                        lda #err_noname
000A8Dr 3  4C rr rr                     jmp error
000A90r 3               
000A90r 3               @not_empty:
000A90r 3  E8                           inx             ; drop number of characters, leave addr
000A91r 3  E8                           inx
000A92r 3  A1 00                        lda (0,x)       ; get character (equivalent to C@)
000A94r 3  95 00                        sta 0,x
000A96r 3  74 01                        stz 1,x         ; MSB is always zero
000A98r 3               
000A98r 3  60           z_char:         rts
000A99r 3               
000A99r 3               
000A99r 3               
000A99r 3               ; ## CHAR_PLUS ( addr -- addr+1 ) "Add the size of a character unit to address"
000A99r 3               ; ## "char+"  auto  ANS core
000A99r 3                       ; """https://forth-standard.org/standard/core/CHARPlus
000A99r 3                       ;
000A99r 3                       ; This is a dummy entry, the code is shared with ONE_PLUS
000A99r 3                       ; """
000A99r 3               
000A99r 3               
000A99r 3               ; ## CHARS ( n -- n ) "Number of bytes that n chars need"
000A99r 3               ; ## "chars"  auto  ANS core
000A99r 3                       ; """https://forth-standard.org/standard/core/CHARS
000A99r 3                       ; Return how many address units n chars are. Since this is an 8 bit
000A99r 3                       ; machine, this does absolutely nothing and is included for
000A99r 3                       ; compatibility with other Forth versions
000A99r 3                       ; """
000A99r 3               
000A99r 3               xt_chars:
000A99r 3                               ; Checking for underflow seems a bit stupid because this
000A99r 3                               ; routine does nothing on this machine. However, the user
000A99r 3                               ; should be warned that there is something wrong with the
000A99r 3                               ; code if this occurs.
000A99r 3  20 rr rr                     jsr underflow_1
000A9Cr 3               
000A9Cr 3  60           z_chars:        rts
000A9Dr 3               
000A9Dr 3               
000A9Dr 3               ; ## CLEAVE ( addr u -- addr2 u2 addr1 u1 ) "Split off word from string"
000A9Dr 3               ; ## "cleave"  auto  Tali Forth
000A9Dr 3               
000A9Dr 3                       ; """Given a range of memory with words delimited by whitespace,return
000A9Dr 3                       ; the first word at the top of the stack and the rest of the word
000A9Dr 3                       ; following it.
000A9Dr 3                       ;
000A9Dr 3                       ; Example:
000A9Dr 3                       ; s" w1 w2 w3" cleave  -> "w2 w3" "w1"
000A9Dr 3                       ; s" w1" cleave        -> "" "w1"
000A9Dr 3                       ;
000A9Dr 3                       ; Since it will be used in loops a lot, we want it to work in pure
000A9Dr 3                       ; assembler and be as fast as we can make it. Calls PARSE-NAME so we
000A9Dr 3                       ; strip leading delimiters.
000A9Dr 3                       ; """
000A9Dr 3               
000A9Dr 3               xt_cleave:
000A9Dr 3  20 rr rr                     jsr underflow_2
000AA0r 3               
000AA0r 3                               ; We arrive here with ( addr u ). We need to strip any leading
000AA0r 3                               ; spaces by hand: PARSE-NAME does do that, but it doesn't
000AA0r 3                               ; remember how many spaces were stripped. This means we can't
000AA0r 3                               ; calculate the length of the remainder. Fortunately, Tali
000AA0r 3                               ; Forth has just the word we need for this:
000AA0r 3  20 rr rr                     jsr xt_minus_leading    ; -LEADING ( addr u )
000AA3r 3               
000AA3r 3                               ; The main part we can turn over to PARSE-NAME, except that we
000AA3r 3                               ; have a string ( addr u ) and not stuff in the input buffer.
000AA3r 3                               ; We get around this by cheating: We place ( addr u ) in the
000AA3r 3                               ; input buffer and then call PARSE-NAME.
000AA3r 3  20 rr rr                     jsr xt_input_to_r       ; save old imput state
000AA6r 3               
000AA6r 3  B5 00                        lda 0,x         ; u is new ciblen
000AA8r 3  85 rr                        sta ciblen
000AAAr 3  B5 01                        lda 1,x
000AACr 3  85 rr                        sta ciblen+1
000AAEr 3               
000AAEr 3  B5 02                        lda 2,x         ; addr is new cib
000AB0r 3  85 rr                        sta cib
000AB2r 3  B5 03                        lda 3,x
000AB4r 3  85 rr                        sta cib+1
000AB6r 3               
000AB6r 3  64 rr                        stz toin        ; >IN pointer is zero
000AB8r 3  64 rr                        stz toin+1
000ABAr 3               
000ABAr 3                               ; PARSE-NAME gives us back the substring of the first word
000ABAr 3  20 rr rr                     jsr xt_parse_name       ; ( addr u addr-s u-s )
000ABDr 3               
000ABDr 3                               ; If we were given an empty string, then we're done. It's the
000ABDr 3                               ; resposibility of the user to catch this as a sign to end the
000ABDr 3                               ; any loop
000ABDr 3  B5 00                        lda 0,x
000ABFr 3  15 01                        ora 1,x
000AC1r 3  F0 23                        beq @done
000AC3r 3               
000AC3r 3                               ; Now we have to adjust the original string
000AC3r 3  B5 04                        lda 4,x         ; LSB of original u
000AC5r 3  38                           sec
000AC6r 3  F5 00                        sbc 0,x
000AC8r 3  95 04                        sta 4,x
000ACAr 3               
000ACAr 3  B5 05                        lda 5,x         ; MSB of original u
000ACCr 3  F5 01                        sbc 1,x
000ACEr 3  95 05                        sta 5,x
000AD0r 3               
000AD0r 3  B5 06                        lda 6,x         ; LSB of original addr
000AD2r 3  18                           clc
000AD3r 3  75 00                        adc 0,x
000AD5r 3  95 06                        sta 6,x
000AD7r 3               
000AD7r 3  B5 07                        lda 7,x         ; MSB of original addr
000AD9r 3  75 01                        adc 1,x
000ADBr 3  95 07                        sta 7,x
000ADDr 3               
000ADDr 3                               ; There is one small problem: PARSE-NAME will probably have
000ADDr 3                               ; left the string with the rest of the words with leading
000ADDr 3                               ; delimiters. We use our magic -LEADING again
000ADDr 3  20 rr rr                     jsr xt_two_swap         ; ( addr-s u-s addr u )
000AE0r 3  20 rr rr                     jsr xt_minus_leading
000AE3r 3  20 rr rr                     jsr xt_two_swap         ; ( addr u addr-s u-s )
000AE6r 3               @done:
000AE6r 3                               ; Restore input
000AE6r 3  20 rr rr                     jsr xt_r_to_input
000AE9r 3               
000AE9r 3  60           z_cleave:       rts
000AEAr 3               
000AEAr 3               
000AEAr 3               
000AEAr 3               ; ## CMOVE ( addr1 addr2 u -- ) "Copy bytes going from low to high"
000AEAr 3               ; ## "cmove"  auto  ANS string
000AEAr 3                       ; """https://forth-standard.org/standard/string/CMOVE
000AEAr 3                       ; Copy u bytes from addr1 to addr2, going low to high (addr2 is
000AEAr 3                       ; larger than addr1). Based on code in Leventhal, Lance A.
000AEAr 3                       ; "6502 Assembly Language Routines", p. 201, where it is called
000AEAr 3                       ; "move left".
000AEAr 3                       ;
000AEAr 3                       ; There are no official tests for this word.
000AEAr 3                       ; """
000AEAr 3               
000AEAr 3               xt_cmove:
000AEAr 3  20 rr rr                     jsr underflow_3
000AEDr 3               
000AEDr 3                               ; move destination address to where we can work with it
000AEDr 3  B5 02                        lda 2,x
000AEFr 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000AF1r 3  B5 03                        lda 3,x
000AF3r 3  85 rr                        sta tmp2+1
000AF5r 3               
000AF5r 3                               ; move source address to where we can work with it
000AF5r 3  B5 04                        lda 4,x
000AF7r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000AF9r 3  B5 05                        lda 5,x
000AFBr 3  85 rr                        sta tmp1+1
000AFDr 3               
000AFDr 3  A0 00                        ldy #0
000AFFr 3  B5 01                        lda 1,x         ; number of whole pages to move
000B01r 3  F0 0F                        beq @dopartial
000B03r 3               
000B03r 3               @page:
000B03r 3  B1 rr                        lda (tmp1),y
000B05r 3  91 rr                        sta (tmp2),y
000B07r 3  C8                           iny
000B08r 3  D0 F9                        bne @page
000B0Ar 3               
000B0Ar 3  E6 rr                        inc tmp1+1
000B0Cr 3  E6 rr                        inc tmp2+1
000B0Er 3  D6 01                        dec 1,x
000B10r 3  D0 F1                        bne @page
000B12r 3               
000B12r 3               @dopartial:
000B12r 3  B5 00                        lda 0,x         ; length of last page
000B14r 3  F0 09                        beq @done
000B16r 3               
000B16r 3               @partial:
000B16r 3  B1 rr                        lda (tmp1),y
000B18r 3  91 rr                        sta (tmp2),y
000B1Ar 3  C8                           iny
000B1Br 3               
000B1Br 3  D6 00                        dec 0,x
000B1Dr 3  D0 F7                        bne @partial
000B1Fr 3               
000B1Fr 3               @done:          ; clear the stack
000B1Fr 3  8A                           txa
000B20r 3  18                           clc
000B21r 3  69 06                        adc #6
000B23r 3  AA                           tax
000B24r 3               
000B24r 3  60           z_cmove:        rts
000B25r 3               
000B25r 3               
000B25r 3               
000B25r 3               ; ## CMOVE_UP ( add1 add2 u -- ) "Copy bytes from high to low"
000B25r 3               ; ## "cmove>"  auto  ANS string
000B25r 3                       ; """https://forth-standard.org/standard/string/CMOVEtop
000B25r 3                       ; Based on code in Leventhal, Lance A. "6502 Assembly Language
000B25r 3                       ; Routines", p. 201, where it is called "move right".
000B25r 3                       ;
000B25r 3                       ; There are no official tests for this word.
000B25r 3                       ; """
000B25r 3               
000B25r 3               xt_cmove_up:
000B25r 3  20 rr rr                     jsr underflow_3
000B28r 3               
000B28r 3                               ; Move destination address to where we can work with it
000B28r 3  B5 02                        lda 2,x
000B2Ar 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000B2Cr 3  B5 03                        lda 3,x
000B2Er 3  18                           clc
000B2Fr 3  75 01                        adc 1,x
000B31r 3  85 rr                        sta tmp2+1      ; point to last page of destination
000B33r 3               
000B33r 3                               ; Move source address to where we can work with it
000B33r 3  B5 04                        lda 4,x
000B35r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000B37r 3  B5 05                        lda 5,x
000B39r 3  18                           clc
000B3Ar 3  75 01                        adc 1,x
000B3Cr 3  85 rr                        sta tmp1+1      ; point to last page of source
000B3Er 3  F6 01                        inc 1,x         ; allows us to use bne with dec 1,x below
000B40r 3               
000B40r 3                               ; Move the last partial page first
000B40r 3  B4 00                        ldy 0,x         ; length of last page
000B42r 3  F0 0E                        beq @nopartial
000B44r 3               
000B44r 3               @outerloop:
000B44r 3  88                           dey
000B45r 3  F0 07                        beq @finishpage
000B47r 3               
000B47r 3               @innerloop:
000B47r 3  B1 rr                        lda (tmp1),y
000B49r 3  91 rr                        sta (tmp2),y
000B4Br 3  88                           dey
000B4Cr 3  D0 F9                        bne @innerloop
000B4Er 3               
000B4Er 3               @finishpage:
000B4Er 3  B2 rr                        lda (tmp1)      ; handle y = 0 separately
000B50r 3  92 rr                        sta (tmp2)
000B52r 3               
000B52r 3               @nopartial:
000B52r 3  C6 rr                        dec tmp1+1      ; back up to previous pages
000B54r 3  C6 rr                        dec tmp2+1
000B56r 3  D6 01                        dec 1,x
000B58r 3  D0 EA                        bne @outerloop
000B5Ar 3               @done:
000B5Ar 3                               ; clear up the stack and leave
000B5Ar 3  8A                           txa
000B5Br 3  18                           clc
000B5Cr 3  69 06                        adc #6
000B5Er 3  AA                           tax
000B5Fr 3               
000B5Fr 3  60           z_cmove_up:     rts
000B60r 3               
000B60r 3               
000B60r 3               
000B60r 3               ; ## COLON ( "name" -- ) "Start compilation of a new word"
000B60r 3               ; ## ":"  auto  ANS core
000B60r 3                       ; """https://forth-standard.org/standard/core/Colon
000B60r 3                       ;
000B60r 3                       ; Use the CREATE routine and fill in the rest by hand.
000B60r 3                       ; """
000B60r 3               
000B60r 3               xt_colon:
000B60r 3                               ; If we're already in the compile state, complain
000B60r 3                               ; and quit
000B60r 3  A5 rr                        lda state
000B62r 3  05 rr                        ora state+1
000B64r 3  F0 05                        beq @1
000B66r 3               
000B66r 3  A9 07                        lda #err_state
000B68r 3  4C rr rr                     jmp error
000B6Br 3               @1:
000B6Br 3                               ; switch to compile state
000B6Br 3  C6 rr                        dec state
000B6Dr 3  C6 rr                        dec state+1
000B6Fr 3               
000B6Fr 3                               ; Set bit 6 in status to tell ";" and RECURSE this is a normal
000B6Fr 3                               ; word
000B6Fr 3  A9 40                        lda #%01000000
000B71r 3  04 rr                        tsb status
000B73r 3               
000B73r 3                               ; CREATE is going to change the DP to point to the new word's
000B73r 3                               ; header. While this is fine for (say) variables, it would mean
000B73r 3                               ; that FIND-NAME etc would find a half-finished word when
000B73r 3                               ; looking in the Dictionary. To prevent this, we save the old
000B73r 3                               ; version of DP and restore it later. The new DP is placed in
000B73r 3                               ; the variable WORKWORD until we're finished with a SEMICOLON.
000B73r 3  20 rr rr                     jsr current_to_dp
000B76r 3  A5 rr                        lda dp+1            ; CREATE uses a lot of variables
000B78r 3  48                           pha
000B79r 3  A5 rr                        lda dp
000B7Br 3  48                           pha
000B7Cr 3               
000B7Cr 3                               ; Tell create not to print warning for duplicate name.
000B7Cr 3  A9 80                        lda #%10000000
000B7Er 3  04 rr                        tsb status
000B80r 3               
000B80r 3  20 rr rr                     jsr xt_create
000B83r 3               
000B83r 3                               ; Get the nt (not the xt!) of the new word as described above.
000B83r 3                               ; Only COLON, SEMICOLON and RECURSE get to access WORKWORD
000B83r 3  20 rr rr                     jsr current_to_dp   ; This might be able to be omitted
000B86r 3  A5 rr                        lda dp
000B88r 3  85 rr                        sta workword
000B8Ar 3  A5 rr                        lda dp+1
000B8Cr 3  85 rr                        sta workword+1
000B8Er 3               
000B8Er 3                               ; Restore original DP
000B8Er 3  68                           pla
000B8Fr 3  85 rr                        sta dp
000B91r 3  68                           pla
000B92r 3  85 rr                        sta dp+1
000B94r 3  20 rr rr                     jsr dp_to_current
000B97r 3               
000B97r 3                               ; CREATE includes a subroutine jump to DOVAR by default. We
000B97r 3                               ; back up three bytes and overwrite that.
000B97r 3  A5 rr                        lda cp
000B99r 3  38                           sec
000B9Ar 3  E9 03                        sbc #3
000B9Cr 3  85 rr                        sta cp
000B9Er 3  B0 02                        bcs @done
000BA0r 3  C6 rr                        dec cp+1
000BA2r 3               @done:
000BA2r 3  60           z_colon:        rts
000BA3r 3               
000BA3r 3               
000BA3r 3               ; ## COLON_NONAME ( -- ) "Start compilation of a new word""
000BA3r 3               ; ## ":NONAME"  auto  ANS core
000BA3r 3                       ; """https://forth-standard.org/standard/core/ColonNONAME
000BA3r 3                       ; Compile a word with no nt.  ";" will put its xt on the stack.
000BA3r 3                       ; """
000BA3r 3               
000BA3r 3               xt_colon_noname:
000BA3r 3                               ; If we're already in the compile state, complain
000BA3r 3                               ; and quit
000BA3r 3  A5 rr                        lda state
000BA5r 3  05 rr                        ora state+1
000BA7r 3  F0 05                        beq @1
000BA9r 3               
000BA9r 3  A9 07                        lda #err_state
000BABr 3  4C rr rr                     jmp error
000BAEr 3               @1:
000BAEr 3                               ; switch to compile state
000BAEr 3  C6 rr                        dec state
000BB0r 3  C6 rr                        dec state+1
000BB2r 3               
000BB2r 3                               ; Clear bit 6 in status to tell ";" and RECURSE this is
000BB2r 3                               ; a :NONAME word.
000BB2r 3  A9 40                        lda #%01000000
000BB4r 3  14 rr                        trb status
000BB6r 3               
000BB6r 3                               ; Put cp (the xt for this word) in WORKWORD. The flag above
000BB6r 3                               ; lets both ";" and RECURSE know that is is an xt instead of an
000BB6r 3                               ; nt and they will modify their behavior.
000BB6r 3  A5 rr                        lda cp
000BB8r 3  85 rr                        sta workword
000BBAr 3  A5 rr                        lda cp+1
000BBCr 3  85 rr                        sta workword+1
000BBEr 3               @done:
000BBEr 3  60           z_colon_noname:        rts
000BBFr 3               
000BBFr 3               
000BBFr 3               
000BBFr 3               ; ## COMMA ( n -- ) "Allot and store one cell in memory"
000BBFr 3               ; ## ","  auto  ANS core
000BBFr 3                       ; """https://forth-standard.org/standard/core/Comma
000BBFr 3                       ; Store TOS at current place in memory.
000BBFr 3                       ;
000BBFr 3                       ; Since this an eight-bit machine, we can ignore all alignment issues.
000BBFr 3                       ; """
000BBFr 3               
000BBFr 3               xt_comma:
000BBFr 3  20 rr rr                     jsr underflow_1
000BC2r 3               
000BC2r 3  B5 00                        lda 0,x
000BC4r 3  92 rr                        sta (cp)
000BC6r 3               
000BC6r 3  E6 rr                        inc cp
000BC8r 3  D0 02                        bne @1
000BCAr 3  E6 rr                        inc cp+1
000BCCr 3               @1:
000BCCr 3  B5 01                        lda 1,x
000BCEr 3  92 rr                        sta (cp)
000BD0r 3               
000BD0r 3  E6 rr                        inc cp
000BD2r 3  D0 02                        bne @done
000BD4r 3  E6 rr                        inc cp+1
000BD6r 3               @done:
000BD6r 3  E8                           inx
000BD7r 3  E8                           inx
000BD8r 3               
000BD8r 3  60           z_comma:        rts
000BD9r 3               
000BD9r 3               
000BD9r 3               
000BD9r 3               ; ## COMPARE ( addr1 u1 addr2 u2 -- -1 | 0 | 1) "Compare two strings"
000BD9r 3               ; ## "compare"   auto  ANS string
000BD9r 3                       ; """https://forth-standard.org/standard/string/COMPARE
000BD9r 3                       ; Compare string1 (denoted by addr1 u1) to string2 (denoted by
000BD9r 3                       ; addr2 u2).  Return -1 if string1 < string2, 0 if string1 = string2
000BD9r 3                       ; and 1 if string1 > string2 (ASCIIbetical comparison).  A string
000BD9r 3                       ; that entirely matches the beginning of the other string, but is
000BD9r 3                       ; shorter, is considered less than the longer string.
000BD9r 3                       ; """
000BD9r 3               
000BD9r 3               xt_compare:
000BD9r 3  20 rr rr                     jsr underflow_4
000BDCr 3               
000BDCr 3                               ; Load the two string addresses into tmp1 and tmp2.
000BDCr 3  B5 02                        lda 2,x
000BDEr 3  85 rr                        sta tmp2
000BE0r 3  B5 03                        lda 3,x
000BE2r 3  85 rr                        sta tmp2+1
000BE4r 3  B5 06                        lda 6,x
000BE6r 3  85 rr                        sta tmp1
000BE8r 3  B5 07                        lda 7,x
000BEAr 3  85 rr                        sta tmp1+1
000BECr 3                               ; The counts will be used in-place on the stack.
000BECr 3               
000BECr 3               @compare_loop:
000BECr 3                               ; Check to see if we are out of letters.
000BECr 3               
000BECr 3                               ; Check string1
000BECr 3  B5 04                        lda 4,x
000BEEr 3  15 05                        ora 5,x
000BF0r 3  F0 2C                        beq @str1_done
000BF2r 3               
000BF2r 3                               ; Check string2
000BF2r 3  B5 00                        lda 0,x
000BF4r 3  15 01                        ora 1,x
000BF6r 3  F0 3A                        beq @greater    ; Str2 empty first
000BF8r 3               
000BF8r 3               @check_letter:
000BF8r 3                               ; Both strings have at least one letter left.
000BF8r 3                               ; Check the letters against each other.
000BF8r 3  B2 rr                        lda (tmp1)
000BFAr 3  D2 rr                        cmp (tmp2)
000BFCr 3  90 26                        bcc @less
000BFEr 3  D0 32                        bne @greater
000C00r 3               @next_letter:
000C00r 3                               ; Move both tmp pointers and decrement the counts
000C00r 3                               ; on the stack.
000C00r 3                               ; Increment tmp1
000C00r 3  E6 rr                        inc tmp1
000C02r 3  D0 02                        bne @1
000C04r 3  E6 rr                        inc tmp1+1
000C06r 3               @1:
000C06r 3                               ; Increment tmp2
000C06r 3  E6 rr                        inc tmp2
000C08r 3  D0 02                        bne @2
000C0Ar 3  E6 rr                        inc tmp2+1
000C0Cr 3               @2:
000C0Cr 3                               ; Decrement count1 on the stack.
000C0Cr 3  B5 04                        lda 4,x
000C0Er 3  D0 02                        bne @3
000C10r 3  D6 05                        dec 5,x
000C12r 3               @3:
000C12r 3  D6 04                        dec 4,x
000C14r 3               
000C14r 3                               ; Decrement count2 on the stack.
000C14r 3  B5 00                        lda 0,x
000C16r 3  D0 02                        bne @4
000C18r 3  D6 01                        dec 1,x
000C1Ar 3               @4:
000C1Ar 3  D6 00                        dec 0,x
000C1Cr 3               
000C1Cr 3                               ; Loop around and check again.
000C1Cr 3  80 CE                        bra @compare_loop
000C1Er 3               
000C1Er 3               @str1_done:
000C1Er 3                               ; String 1 is out of letters. Check string 2.
000C1Er 3  B5 00                        lda 0,x
000C20r 3  15 01                        ora 1,x
000C22r 3  F0 08                        beq @equal      ; Both out of letters
000C24r 3               
000C24r 3                               ; Falls into less (str1 is out but str2 has more)
000C24r 3               @less:
000C24r 3                               ; Return -1
000C24r 3  A9 FF                        lda #$FF
000C26r 3  95 06                        sta 6,x
000C28r 3  95 07                        sta 7,x
000C2Ar 3  80 0C                        bra @done
000C2Cr 3               @equal:
000C2Cr 3                               ; Return 0
000C2Cr 3  74 06                        stz 6,x
000C2Er 3  74 07                        stz 7,x
000C30r 3  80 06                        bra @done
000C32r 3               @greater:
000C32r 3                               ; Return 1
000C32r 3  A9 01                        lda #1
000C34r 3  95 06                        sta 6,x
000C36r 3  74 07                        stz 7,x
000C38r 3                               ; Falls into @done
000C38r 3               @done:
000C38r 3                               ; Remove all but the result from the stack.
000C38r 3  8A                           txa
000C39r 3  18                           clc
000C3Ar 3  69 06                        adc #6
000C3Cr 3  AA                           tax
000C3Dr 3               
000C3Dr 3  60           z_compare:      rts
000C3Er 3               
000C3Er 3               
000C3Er 3               
000C3Er 3               ; ## COMPILE_COMMA ( xt -- ) "Compile xt"
000C3Er 3               ; ## "compile,"  auto  ANS core ext
000C3Er 3                       ; """https://forth-standard.org/standard/core/COMPILEComma
000C3Er 3                       ; Compile the given xt in the current word definition. It is an
000C3Er 3                       ; error if we are not in the compile state. Because we are using
000C3Er 3                       ; subroutine threading, we can't use , (COMMA) to compile new words
000C3Er 3                       ; the traditional way. By default, native compiled is allowed, unless
000C3Er 3                       ; there is a NN (Never Native) flag associated. If not, we use the
000C3Er 3                       ; value NC_LIMIT (from definitions.tasm) to decide if the code
000C3Er 3                       ; is too large to be natively coded: If the size is larger than
000C3Er 3                       ; NC_LIMIT, we silently use subroutine coding. If the AN (Always
000C3Er 3                       ; Native) flag is set, the word is always natively compiled.
000C3Er 3                       ; """
000C3Er 3               
000C3Er 3               xt_compile_comma:
000C3Er 3  20 rr rr                     jsr underflow_1
000C41r 3               
000C41r 3                               ; See if this is an Always Native (AN) word by checking the
000C41r 3                               ; AN flag. We need nt for this. First, save a copy of xt to
000C41r 3                               ; the Return Stack
000C41r 3  B5 01                        lda 1,x                 ; MSB
000C43r 3  48                           pha
000C44r 3  B5 00                        lda 0,x
000C46r 3  48                           pha                     ; LSB
000C47r 3               
000C47r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt -- nt )
000C4Ar 3               
000C4Ar 3                               ; See if this xt even has an nt.
000C4Ar 3  B5 00                        lda 0,x
000C4Cr 3  15 01                        ora 1,x
000C4Er 3  D0 03                        bne @check_nt
000C50r 3               
000C50r 3                               ; No nt in dictionary. Just compile as a JSR.
000C50r 3  4C rr rr                     jmp @compile_as_jump
000C53r 3               
000C53r 3               @check_nt:
000C53r 3                               ; put nt away for safe keeping
000C53r 3  B5 00                        lda 0,x
000C55r 3  85 rr                        sta tmptos
000C57r 3  B5 01                        lda 1,x
000C59r 3  85 rr                        sta tmptos+1
000C5Br 3               
000C5Br 3                               ; status byte is one further down
000C5Br 3  F6 00                        inc 0,x
000C5Dr 3  D0 02                        bne @1
000C5Fr 3  F6 01                        inc 1,x                 ; ( nt -- nt+1 )
000C61r 3               @1:
000C61r 3  A1 00                        lda (0,x)
000C63r 3  85 rr                        sta tmp3                ; keep copy of status byte for NN
000C65r 3  29 02                        and #AN                 ; mask all but Always Native (AN) bit
000C67r 3  F0 0D                        beq @compile_check
000C69r 3               
000C69r 3                               ; We're natively compiling no matter what. Get length and
000C69r 3                               ; compile in code. Get the original nt back
000C69r 3  A5 rr                        lda tmptos
000C6Br 3  95 00                        sta 0,x
000C6Dr 3  A5 rr                        lda tmptos+1
000C6Fr 3  95 01                        sta 1,x
000C71r 3               
000C71r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000C74r 3               
000C74r 3  80 27                        bra @compile_as_code
000C76r 3               
000C76r 3               @compile_check:
000C76r 3                               ; See if Native Compile is even alowed by checking the NN
000C76r 3                               ; flag
000C76r 3  A5 rr                        lda tmp3
000C78r 3  29 08                        and #NN
000C7Ar 3  F0 03                        beq @check_size_limit
000C7Cr 3               
000C7Cr 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000C7Fr 3               
000C7Fr 3               @check_size_limit:
000C7Fr 3                               ; Native compile is a legal option, but we need to see what
000C7Fr 3                               ; limit the user set for size (in nc_limit)
000C7Fr 3  A5 rr                        lda tmptos
000C81r 3  95 00                        sta 0,x
000C83r 3  A5 rr                        lda tmptos+1
000C85r 3  95 01                        sta 1,x
000C87r 3               
000C87r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000C8Ar 3               
000C8Ar 3                               ; Check the wordsize MSB against the user-defined limit.
000C8Ar 3  B5 01                        lda 1,x
000C8Cr 3  C5 rr                        cmp nc_limit+1
000C8Er 3  90 0D                        bcc @compile_as_code    ; user-defined limit MSB
000C90r 3  D0 08                        bne @jumpto_compile_as_jump
000C92r 3               
000C92r 3                               ; Check the wordsize LSB against the user-defined limit.
000C92r 3  B5 00                        lda 0,x
000C94r 3  C5 rr                        cmp nc_limit            ; user-defined limit LSB
000C96r 3  90 05                        bcc @compile_as_code    ; Allow native compiling for less
000C98r 3  F0 03                        beq @compile_as_code    ; than or equal to the limit.
000C9Ar 3               
000C9Ar 3               @jumpto_compile_as_jump:
000C9Ar 3                               ; If the wordsize is greater than the user-defined
000C9Ar 3                               ; limit, it will be compiled as a subroutine jump.
000C9Ar 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000C9Dr 3               
000C9Dr 3               @compile_as_code:
000C9Dr 3                               ; We arrive here with the length of the word's code TOS and
000C9Dr 3                               ; xt on top of the Return Stack. MOVE will need ( xt cp u )
000C9Dr 3                               ; on the data stack
000C9Dr 3  CA                           dex
000C9Er 3  CA                           dex                     ; ( -- u ? )
000C9Fr 3  CA                           dex
000CA0r 3  CA                           dex                     ; ( -- u ? ? )
000CA1r 3               
000CA1r 3  B5 04                        lda 4,x
000CA3r 3  95 00                        sta 0,x                 ; LSB of u
000CA5r 3  B5 05                        lda 5,x
000CA7r 3  95 01                        sta 1,x                 ; ( -- u ? u )
000CA9r 3               
000CA9r 3  68                           pla
000CAAr 3  95 04                        sta 4,x                 ; LSB of xt
000CACr 3  68                           pla
000CADr 3  95 05                        sta 5,x                 ; ( -- xt ? u )
000CAFr 3               
000CAFr 3  A5 rr                        lda cp                  ; LSB of cp
000CB1r 3  95 02                        sta 2,x
000CB3r 3  A5 rr                        lda cp+1
000CB5r 3  95 03                        sta 3,x                 ; ( -- xt cp u )
000CB7r 3               
000CB7r 3                               ; --- SPECIAL CASE 1: PREVENT RETURN STACK THRASHINIG ---
000CB7r 3               
000CB7r 3                               ; Native compiling allows us to strip the stack antics off
000CB7r 3                               ; a number of words that use the Return Stack such as >R, R>,
000CB7r 3                               ; 2>R and 2R> (but not 2R@ in this version). We compare the
000CB7r 3                               ; xt with the contents of the table
000CB7r 3  A0 00                        ldy #0
000CB9r 3               
000CB9r 3               @strip_loop:
000CB9r 3  B9 rr rr                     lda @strip_table,y      ; LSB of first word
000CBCr 3  D5 04                        cmp 4,x                 ; LSB of xt
000CBEr 3  D0 07                        bne @next_entry
000CC0r 3               
000CC0r 3                               ; LSB is the same, test MSB
000CC0r 3  B9 rr rr                     lda @strip_table+1,y
000CC3r 3  D5 05                        cmp 5,x
000CC5r 3  F0 0C                        beq @found_entry
000CC7r 3               
000CC7r 3                               ; MSB is not equal. Pretend though that we've come from LSB
000CC7r 3                               ; so we can use the next step for both cases
000CC7r 3               @next_entry:
000CC7r 3                               ; Not a word that needs stripping, so check next entry in table
000CC7r 3                               ; Let's see if we're done with the table (marked by zero entry)
000CC7r 3  B9 rr rr                     lda @strip_table,y      ; pointing to LSB
000CCAr 3  19 rr rr                     ora @strip_table+1,y    ; get MSB
000CCDr 3  F0 22                        beq @underflow_strip    ; table done, let's get out of here
000CCFr 3               
000CCFr 3  C8                           iny
000CD0r 3  C8                           iny
000CD1r 3  80 E6                        bra @strip_loop
000CD3r 3               @found_entry:
000CD3r 3                               ; This word is one of the ones that needs to have its size
000CD3r 3                               ; adjusted during native compile. We find the values in the
000CD3r 3                               ; next table with the same index, which is Y. However, Y is
000CD3r 3                               ; pointing to the MSB, so we need to go back to the LSB and
000CD3r 3                               ; halve the index before we can use it.
000CD3r 3  98                           tya
000CD4r 3  4A                           lsr
000CD5r 3  A8                           tay
000CD6r 3               
000CD6r 3                               ; Get the adjustment out of the size table. We were clever
000CD6r 3                               ; enough to make sure the cut on both ends of the code is
000CD6r 3                               ; is the same size.
000CD6r 3  B9 rr rr                     lda @strip_size,y
000CD9r 3  85 rr                        sta tmptos              ; save a copy
000CDBr 3               
000CDBr 3                               ; Adjust xt: Start later
000CDBr 3  18                           clc
000CDCr 3  75 04                        adc 4,x
000CDEr 3  95 04                        sta 4,x
000CE0r 3  90 02                        bcc @2
000CE2r 3  F6 05                        inc 5,x                 ; we just care about the carry
000CE4r 3               @2:
000CE4r 3               
000CE4r 3                               ; Adjust u: Quit earlier. Since we cut off the top and the
000CE4r 3                               ; bottom of the code, we have to double the value
000CE4r 3  06 rr                        asl tmptos
000CE6r 3               
000CE6r 3  38                           sec
000CE7r 3  B5 00                        lda 0,x
000CE9r 3  E5 rr                        sbc tmptos
000CEBr 3  95 00                        sta 0,x
000CEDr 3  B0 02                        bcs @3
000CEFr 3  D6 01                        dec 1,x                 ; we just care about the borrow
000CF1r 3               @3:
000CF1r 3                               ; drop through to underflow check stripping
000CF1r 3               
000CF1r 3               @underflow_strip:
000CF1r 3                               ; --- SPECIAL CASE 2: REMOVE UNDERFLOW CHECKING ---
000CF1r 3               
000CF1r 3                               ; The user can choose to remove the unterflow testing in those
000CF1r 3                               ; words that have the UF flag. This shortens the word by
000CF1r 3                               ; 3 bytes if there is no underflow.
000CF1r 3               
000CF1r 3                               ; See if the user wants underflow stripping turned on
000CF1r 3  A5 rr                        lda uf_strip
000CF3r 3  05 rr                        ora uf_strip+1
000CF5r 3  F0 1C                        beq @specials_done
000CF7r 3               
000CF7r 3                               ; See if this word even contains underflow checking
000CF7r 3  A5 rr                        lda tmp3
000CF9r 3  29 10                        and #UF
000CFBr 3  F0 16                        beq @specials_done
000CFDr 3               
000CFDr 3                               ; If we arrived here, underflow has to go. It's always 3 bytes
000CFDr 3                               ; long. Note hat PICK is a special case.
000CFDr 3               
000CFDr 3                               ; Adjust xt: Start later
000CFDr 3  18                           clc
000CFEr 3  B5 04                        lda 4,x
000D00r 3  69 03                        adc #3
000D02r 3  95 04                        sta 4,x
000D04r 3  90 02                        bcc @4
000D06r 3  F6 05                        inc 5,x                  ; we just care about the carry
000D08r 3               @4:
000D08r 3                               ; Adjust u: End earlier
000D08r 3  38                           sec
000D09r 3  B5 00                        lda 0,x
000D0Br 3  E9 03                        sbc #3
000D0Dr 3  95 00                        sta 0,x
000D0Fr 3  B0 02                        bcs @5
000D11r 3  D6 01                        dec 1,x                  ; we just care about the borrow
000D13r 3               @5:
000D13r 3               
000D13r 3                               ; --- END OF SPECIAL CASES ---
000D13r 3               @specials_done:
000D13r 3                               ; Store size of area to be copied for calculation of
000D13r 3                               ; new CP. We have to do this after all of the special cases
000D13r 3                               ; because they might change the size
000D13r 3  B5 01                        lda 1,x                 ; MSB
000D15r 3  48                           pha
000D16r 3  B5 00                        lda 0,x                 ; LSB
000D18r 3  48                           pha
000D19r 3               
000D19r 3                               ; Enough of this, let's move those bytes already! We have
000D19r 3                               ; ( xt cp u ) on the stack at this point
000D19r 3  20 rr rr                     jsr xt_move
000D1Cr 3               
000D1Cr 3                               ; Update CP
000D1Cr 3  18                           clc
000D1Dr 3  68                           pla                     ; LSB
000D1Er 3  65 rr                        adc cp
000D20r 3  85 rr                        sta cp
000D22r 3               
000D22r 3  68                           pla                     ; MSB
000D23r 3  65 rr                        adc cp+1
000D25r 3  85 rr                        sta cp+1
000D27r 3               
000D27r 3  80 2C                        bra @done
000D29r 3               
000D29r 3               @strip_table:
000D29r 3                              ; List of words we strip the Return Stack antics from
000D29r 3                              ; during native compile, zero terminated. The index here
000D29r 3                              ; must be the same as for the sizes
000D29r 3  rr rr rr rr                  .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
000D2Dr 3  rr rr        
000D2Fr 3  rr rr rr rr                  .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
000D33r 3  00 00        
000D35r 3               
000D35r 3               @strip_size:
000D35r 3                               ; List of bytes to be stripped from the words that get their
000D35r 3                               ; Return Stack antics removed during native compile. Index must
000D35r 3                               ; be the same as for the xts. Zero terminated.
000D35r 3  04 04 04 06                  .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
000D39r 3  06 00        
000D3Br 3               
000D3Br 3               @compile_as_jump:
000D3Br 3                               ; Compile xt as a subroutine jump
000D3Br 3  A9 20                        lda #$20
000D3Dr 3  92 rr                        sta (cp)
000D3Fr 3               
000D3Fr 3  A0 01                        ldy #1
000D41r 3  68                           pla             ; LSB
000D42r 3  91 rr                        sta (cp),y
000D44r 3  C8                           iny
000D45r 3  68                           pla             ; MSB
000D46r 3  91 rr                        sta (cp),y
000D48r 3               
000D48r 3                               ; allot space we just used
000D48r 3  A9 03                        lda #3
000D4Ar 3  18                           clc
000D4Br 3  65 rr                        adc cp
000D4Dr 3  85 rr                        sta cp
000D4Fr 3  90 02                        bcc @6
000D51r 3  E6 rr                        inc cp+1
000D53r 3               @6:
000D53r 3  E8                           inx             ; drop xt
000D54r 3  E8                           inx
000D55r 3               @done:
000D55r 3               z_compile_comma:
000D55r 3  60                           rts
000D56r 3               
000D56r 3               
000D56r 3               
000D56r 3               ; ## COMPILE_ONLY ( -- ) "Mark most recent word as COMPILE-ONLY"
000D56r 3               ; ## "compile-only"  tested  Tali Forth
000D56r 3                       ; """Set the Compile Only flag (CO) of the most recently defined
000D56r 3                       ; word.
000D56r 3                       ;
000D56r 3                       ; The alternative way to do this is to define a word
000D56r 3                       ; ?COMPILE that makes sure  we're in compile mode
000D56r 3                       ; """
000D56r 3               
000D56r 3               xt_compile_only:
000D56r 3  20 rr rr                     jsr current_to_dp
000D59r 3  A0 01                        ldy #1          ; offset for status byte
000D5Br 3  B1 rr                        lda (dp),y
000D5Dr 3  09 01                        ora #CO        ; make sure bit 7 is set
000D5Fr 3  91 rr                        sta (dp),y
000D61r 3               
000D61r 3  60           z_compile_only: rts
000D62r 3               
000D62r 3               
000D62r 3               
000D62r 3               ; ## CONSTANT ( n "name" -- ) "Define a constant"
000D62r 3               ; ## "constant"  auto  ANS core
000D62r 3                       ; """https://forth-standard.org/standard/core/CONSTANT
000D62r 3                       ;
000D62r 3                       ; Forth equivalent is  CREATE , DOES> @  but we do
000D62r 3                       ; more in assembler and let CREATE do the heavy lifting.
000D62r 3                       ; See http://www.bradrodriguez.com/papers/moving3.htm for
000D62r 3                       ; a primer on how this works in various Forths. This is the
000D62r 3                       ; same code as VALUE in our case.
000D62r 3                       ; """
000D62r 3               xt_value:
000D62r 3               xt_constant:
000D62r 3  20 rr rr                     jsr underflow_1
000D65r 3               
000D65r 3  20 rr rr                     jsr xt_create
000D68r 3               
000D68r 3                           	; CREATE by default installs a subroutine jump to DOVAR,
000D68r 3                               ; but we want DOCONST for constants. Go back two bytes and
000D68r 3                               ; replace the subroutine jump target
000D68r 3  38                           sec
000D69r 3  A5 rr                        lda cp
000D6Br 3  E9 02                        sbc #2
000D6Dr 3  85 rr                        sta tmp1
000D6Fr 3  A5 rr                        lda cp+1
000D71r 3  E9 00                        sbc #0
000D73r 3  85 rr                        sta tmp1+1
000D75r 3               
000D75r 3  A9 rr                        lda #<doconst           ; LSB of DOCONST
000D77r 3  92 rr                        sta (tmp1)
000D79r 3  A0 01                        ldy #1
000D7Br 3  A9 rr                        lda #>doconst           ; MSB of DOCONST
000D7Dr 3  91 rr                        sta (tmp1),y
000D7Fr 3               
000D7Fr 3                               ; Now we save the constant number itself in the next cell
000D7Fr 3  20 rr rr                     jsr xt_comma            ; drop through to adjust_z
000D82r 3               
000D82r 3               adjust_z:
000D82r 3                               ; Now the length of the complete word (z_word) has increased by
000D82r 3                               ; two. We need to update that number or else words such as SEE
000D82r 3                               ; will ignore the PFA. We use this same routine for VARIABLE,
000D82r 3                               ; VALUE and DEFER
000D82r 3  20 rr rr                     jsr xt_latestnt         ; gives us ( -- nt )
000D85r 3               
000D85r 3                               ; z_word is six bytes further down
000D85r 3  B5 00                        lda 0,x
000D87r 3  85 rr                        sta tmp1
000D89r 3  B5 01                        lda 1,x
000D8Br 3  85 rr                        sta tmp1+1
000D8Dr 3               
000D8Dr 3  A0 06                        ldy #6
000D8Fr 3  B1 rr                        lda (tmp1),y
000D91r 3  18                           clc
000D92r 3  69 02                        adc #2
000D94r 3  91 rr                        sta (tmp1),y
000D96r 3  C8                           iny
000D97r 3  B1 rr                        lda (tmp1),y
000D99r 3  69 00                        adc #0                  ; only need carry
000D9Br 3  91 rr                        sta (tmp1),y
000D9Dr 3               
000D9Dr 3  E8                           inx
000D9Er 3  E8                           inx
000D9Fr 3               
000D9Fr 3               z_value:
000D9Fr 3  60           z_constant:     rts
000DA0r 3               
000DA0r 3               
000DA0r 3               ; ## COUNT ( c-addr -- addr u ) "Convert character string to normal format"
000DA0r 3               ; ## "count"  auto  ANS core
000DA0r 3                       ; """https://forth-standard.org/standard/core/COUNT
000DA0r 3                       ; Convert old-style character string to address-length pair. Note
000DA0r 3                       ; that the length of the string c-addr is stored in character length
000DA0r 3                       ; (8 bit), not cell length (16 bit). This is rarely used these days,
000DA0r 3                       ; though COUNT can also be used to step through a string character by
000DA0r 3                       ; character.
000DA0r 3                       ; """
000DA0r 3               xt_count:
000DA0r 3  20 rr rr                     jsr underflow_1
000DA3r 3               
000DA3r 3  A1 00                        lda (0,x)       ; Get number of characters (255 max)
000DA5r 3  A8                           tay
000DA6r 3               
000DA6r 3                               ; move start address up by one
000DA6r 3  F6 00                        inc 0,x         ; LSB
000DA8r 3  D0 02                        bne @1
000DAAr 3  F6 01                        inc 1,x         ; MSB
000DACr 3               
000DACr 3                               ; save number of characters to stack
000DACr 3               @1:
000DACr 3  98                           tya
000DADr 3  CA                           dex
000DAEr 3  CA                           dex
000DAFr 3  95 00                        sta 0,x         ; LSB
000DB1r 3  74 01                        stz 1,x         ; MSB, always zero
000DB3r 3               
000DB3r 3  60           z_count:        rts
000DB4r 3               
000DB4r 3               
000DB4r 3               ; ## CR ( -- ) "Print a line feed"
000DB4r 3               ; ## "cr"  auto  ANS core
000DB4r 3                       ; """https://forth-standard.org/standard/core/CR"""
000DB4r 3               xt_cr:
000DB4r 3  A9 0A                        lda #AscLF
000DB6r 3  20 rr rr                     jsr emit_a
000DB9r 3  60           z_cr:           rts
000DBAr 3               
000DBAr 3               
000DBAr 3               ; ## CREATE ( "name" -- ) "Create Dictionary entry for 'name'"
000DBAr 3               ; ## "create"  auto  ANS core
000DBAr 3                       ; """https://forth-standard.org/standard/core/CREATE
000DBAr 3                       ;
000DBAr 3                       ; See the drawing in headers.asm for details on the header
000DBAr 3                       ; """
000DBAr 3               
000DBAr 3               xt_create:
000DBAr 3                               ; get string
000DBAr 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
000DBDr 3               
000DBDr 3                               ; if we were given an empty string, we complain and quit
000DBDr 3  B5 00                        lda 0,x
000DBFr 3  15 01                        ora 1,x
000DC1r 3  D0 05                        bne @got_name
000DC3r 3               
000DC3r 3  A9 05                        lda #err_noname
000DC5r 3  4C rr rr                     jmp error
000DC8r 3               
000DC8r 3               @got_name:
000DC8r 3                               ; Enforce maximal length of string by overwriting the MSB of
000DC8r 3                               ; the length. There is a possible error here: If the string
000DC8r 3                               ; is exactly 255 chars long, then a lot of the following
000DC8r 3                               ; additions will fail because of wrapping
000DC8r 3  74 01                        stz 1,x
000DCAr 3               
000DCAr 3                               ; Check to see if this name already exists.
000DCAr 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u )
000DCDr 3  20 rr rr                     jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
000DD0r 3               
000DD0r 3  B5 00                        lda 0,x
000DD2r 3  15 01                        ora 1,x
000DD4r 3  F0 1E                        beq @new_name           ; We haven't seen this one before.
000DD6r 3               
000DD6r 3                               ; This name already exists.  See if we are supposed to print
000DD6r 3                               ; the message for it.
000DD6r 3  E8                           inx                     ; Drop flag (nt) from find-name.
000DD7r 3  E8                           inx
000DD8r 3               
000DD8r 3                               ; Check bit 7
000DD8r 3  24 rr                        bit status
000DDAr 3  10 08                        bpl @redefined_name     ; Bit 7 is zero, so print the message.
000DDCr 3               
000DDCr 3                               ; We aren't supposed to print the redefined message ourselves,
000DDCr 3                               ; but we should indicate that it is redefined (for ; to print
000DDCr 3                               ; later).
000DDCr 3  A9 80                        lda #$80                ; Set bit 7 to indicate dup
000DDEr 3  05 rr                        ora status
000DE0r 3  85 rr                        sta status
000DE2r 3  80 18                        bra @process_name
000DE4r 3               
000DE4r 3               @redefined_name:
000DE4r 3                               ; Print the message that the name is redefined.
000DE4r 3  A9 02                        lda #str_redefined
000DE6r 3  20 rr rr                     jsr print_string_no_lf
000DE9r 3               
000DE9r 3  20 rr rr                     jsr xt_two_dup           ; ( addr u addr u )
000DECr 3  20 rr rr                     jsr xt_type
000DEFr 3  20 rr rr                     jsr xt_space
000DF2r 3               
000DF2r 3  80 08                        bra @process_name
000DF4r 3               
000DF4r 3               @new_name:
000DF4r 3  E8                           inx                     ; Drop flag (0) from find-name.
000DF5r 3  E8                           inx
000DF6r 3  A9 7F                        lda #$7F                ; Clear bit 0 of status to indicate new word.
000DF8r 3  25 rr                        and status
000DFAr 3  85 rr                        sta status
000DFCr 3               
000DFCr 3               @process_name:
000DFCr 3  B5 00                        lda 0,x
000DFEr 3  85 rr                        sta tmp2                ; store length of string in tmp2
000E00r 3               
000E00r 3                               ; remember the first free byte of memory as the start of
000E00r 3                               ; the new word
000E00r 3  A5 rr                        lda cp
000E02r 3  85 rr                        sta tmp1
000E04r 3  A5 rr                        lda cp+1
000E06r 3  85 rr                        sta tmp1+1
000E08r 3               
000E08r 3                               ; We need 8 bytes plus the length of the string for our new header.
000E08r 3                               ; This is also the offset for the start of the code field (the
000E08r 3                               ; xt_ label) so we need to remember it. Otherwise, we could
000E08r 3                               ; just allot the space afterwards
000E08r 3  B5 00                        lda 0,x
000E0Ar 3  18                           clc
000E0Br 3  69 08                        adc #8
000E0Dr 3  85 rr                        sta tmp3                ; total header length
000E0Fr 3               
000E0Fr 3                               ; We need three more bytes for for the hardcoded code field
000E0Fr 3                               ; area (CFA), the "payload" of the word which by default will
000E0Fr 3                               ; be a subroutine jump to DOVAR
000E0Fr 3  18                           clc
000E10r 3  69 03                        adc #3
000E12r 3               
000E12r 3                               ; We overwrite the length of the string returned by PARSE-NAME
000E12r 3                               ; and then call ALLOT
000E12r 3  95 00                        sta 0,x
000E14r 3  74 01                        stz 1,x         ; max header size is 255 chars
000E16r 3  20 rr rr                     jsr xt_allot    ; ( addr )
000E19r 3               
000E19r 3                               ; Get the CURRENT dictionary pointer.
000E19r 3  20 rr rr                     jsr current_to_dp
000E1Cr 3               
000E1Cr 3                               ; Now we walk through the header with Y as the index, adding
000E1Cr 3                               ; information byte-by-byte
000E1Cr 3  A0 00                        ldy #0
000E1Er 3               
000E1Er 3                               ; HEADER BYTE 0: Length of string
000E1Er 3  A5 rr                        lda tmp2
000E20r 3  91 rr                        sta (tmp1),y
000E22r 3               
000E22r 3                               ; HEADER BYTE 1: Status byte. By default, we set all new words
000E22r 3                               ; to "never native", user will have to decide if they should
000E22r 3                               ; be inlined
000E22r 3  A9 08                        lda #NN
000E24r 3               
000E24r 3                               ; Also, words defined by CREATE are marked in the header has
000E24r 3                               ; having a Code Field Area (CFA), which is a bit tricky for
000E24r 3                               ; Subroutine Threaded Code (STC). We do this so >BODY works
000E24r 3                               ; correctly with DOES> and CREATE. See the discussion at
000E24r 3                               ; http://forum.6502.org/viewtopic.php?f=9&t=5182 for details
000E24r 3  09 20                        ora #HC
000E26r 3  C8                           iny
000E27r 3  91 rr                        sta (tmp1),y
000E29r 3  C8                           iny
000E2Ar 3               
000E2Ar 3                               ; HEADER BYTE 2,3: Next header. This is the current last word
000E2Ar 3                               ; in the Dictionary
000E2Ar 3  A5 rr                        lda dp
000E2Cr 3  91 rr                        sta (tmp1),y
000E2Er 3  C8                           iny
000E2Fr 3  A5 rr                        lda dp+1
000E31r 3  91 rr                        sta (tmp1),y
000E33r 3  C8                           iny
000E34r 3               
000E34r 3                               ; Interlude: Make old CP new DP (new start of Dictionary)
000E34r 3  A5 rr                        lda tmp1+1
000E36r 3  85 rr                        sta dp+1
000E38r 3  A5 rr                        lda tmp1
000E3Ar 3  85 rr                        sta dp
000E3Cr 3               
000E3Cr 3                               ; HEADER BYTE 4,5: Start of the code field ("xt_" of this word).
000E3Cr 3                               ; This begins after the header so we take the length of the
000E3Cr 3                               ; header, which we cleverly saved in tmp3, and use it as an
000E3Cr 3                               ; offset to the address of the start of the word. We come here
000E3Cr 3                               ; with tmp1 in A
000E3Cr 3  18                           clc
000E3Dr 3  65 rr                        adc tmp3        ; add total header length
000E3Fr 3  91 rr                        sta (tmp1),y
000E41r 3  48                           pha             ; we need this in the next step
000E42r 3  C8                           iny
000E43r 3               
000E43r 3  A5 rr                        lda tmp1+1
000E45r 3  69 00                        adc #0          ; only need the carry
000E47r 3  91 rr                        sta (tmp1),y
000E49r 3  C8                           iny
000E4Ar 3               
000E4Ar 3                               ; HEADER BYTE 6,7: End of code ("z_" of this word). By default,
000E4Ar 3                               ; we execute a jump to the DOVAR routine, so we need to move three
000E4Ar 3                               ; bytes down, and then one more byte so that the z_ label points
000E4Ar 3                               ; to the (still fictional) RTS instruction for correct compilation
000E4Ar 3  68                           pla             ; LSB of "z_" address
000E4Br 3  18                           clc
000E4Cr 3  69 03                        adc #3
000E4Er 3  91 rr                        sta (tmp1),y
000E50r 3               
000E50r 3  88                           dey             ; get the MSB of xt back
000E51r 3  B1 rr                        lda (tmp1),y
000E53r 3  69 00                        adc #0          ; only need the carry
000E55r 3  C8                           iny
000E56r 3  C8                           iny
000E57r 3  91 rr                        sta (tmp1),y
000E59r 3  C8                           iny
000E5Ar 3               
000E5Ar 3                               ; HEADER BYTE 8: Start of name string. The address is TOS, the
000E5Ar 3                               ; length in tmp2. We subtract 8 from the address so we can
000E5Ar 3                               ; use the same loop index, which is already 8 byte ahead at
000E5Ar 3                               ; this point
000E5Ar 3  B5 00                        lda 0,x
000E5Cr 3  38                           sec
000E5Dr 3  E9 08                        sbc #8
000E5Fr 3  85 rr                        sta tmptos
000E61r 3               
000E61r 3  B5 01                        lda 1,x
000E63r 3  E9 00                        sbc #0          ; only need carry
000E65r 3  85 rr                        sta tmptos+1
000E67r 3               
000E67r 3               @name_loop:
000E67r 3  B1 rr                        lda (tmptos),y
000E69r 3               
000E69r 3                               ; Make sure it goes into the dictionary in lower case.
000E69r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
000E6Br 3  B0 07                        bcs @store_name
000E6Dr 3  C9 41                        cmp #$41        ; ASCII 'A'
000E6Fr 3  90 03                        bcc @store_name
000E71r 3               
000E71r 3                               ; An uppercase letter has been located. Make it
000E71r 3                               ; lowercase.
000E71r 3  18                           clc
000E72r 3  69 20                        adc #$20
000E74r 3               
000E74r 3                               ; Fall into @store_name.
000E74r 3               
000E74r 3               @store_name:
000E74r 3  91 rr                        sta (tmp1),y
000E76r 3  C8                           iny
000E77r 3  C6 rr                        dec tmp2
000E79r 3  D0 EC                        bne @name_loop
000E7Br 3               
000E7Br 3                               ; After thename string comes the code field, starting at the
000E7Br 3                               ; current xt of this word, which is initially a jump to the
000E7Br 3                               ; subroutine to DOVAR. We code this jump by hand
000E7Br 3  A9 20                        lda #$20        ; opcode of JSR
000E7Dr 3  91 rr                        sta (tmp1),y
000E7Fr 3  C8                           iny
000E80r 3  A9 rr                        lda #<dovar
000E82r 3  91 rr                        sta (tmp1),y
000E84r 3  C8                           iny
000E85r 3  A9 rr                        lda #>dovar
000E87r 3  91 rr                        sta (tmp1),y
000E89r 3               
000E89r 3                               ; Update the CURRENT wordlist with the new DP.
000E89r 3                               ; We do this down here because this routine uses Y.
000E89r 3  20 rr rr                     jsr dp_to_current
000E8Cr 3               
000E8Cr 3                               ; And we're done. Restore stack
000E8Cr 3  E8                           inx
000E8Dr 3  E8                           inx
000E8Er 3               
000E8Er 3  60           z_create:       rts
000E8Fr 3               
000E8Fr 3               
000E8Fr 3               
000E8Fr 3               ; ## D_MINUS ( d d -- d ) "Subtract two double-celled numbers"
000E8Fr 3               ; ## "d-"  auto  ANS double
000E8Fr 3                       ; """https://forth-standard.org/standard/double/DMinus"""
000E8Fr 3               
000E8Fr 3               xt_d_minus:
000E8Fr 3  20 rr rr                     jsr underflow_4 ; two double numbers
000E92r 3               
000E92r 3  38                           sec
000E93r 3               
000E93r 3  B5 06                        lda 6,x         ; LSB of lower word
000E95r 3  F5 02                        sbc 2,x
000E97r 3  95 06                        sta 6,x
000E99r 3               
000E99r 3  B5 07                        lda 7,x         ; MSB of lower word
000E9Br 3  F5 03                        sbc 3,x
000E9Dr 3  95 07                        sta 7,x
000E9Fr 3               
000E9Fr 3  B5 04                        lda 4,x         ; LSB of upper word
000EA1r 3  F5 00                        sbc 0,x
000EA3r 3  95 04                        sta 4,x
000EA5r 3               
000EA5r 3  B5 05                        lda 5,x         ; MSB of upper word
000EA7r 3  F5 01                        sbc 1,x
000EA9r 3  95 05                        sta 5,x
000EABr 3               
000EABr 3  E8                           inx
000EACr 3  E8                           inx
000EADr 3  E8                           inx
000EAEr 3  E8                           inx
000EAFr 3               
000EAFr 3  60           z_d_minus:      rts
000EB0r 3               
000EB0r 3               
000EB0r 3               
000EB0r 3               ; ## D_PLUS ( d d -- d ) "Add two double-celled numbers"
000EB0r 3               ; ## "d+"  auto  ANS double
000EB0r 3                       ; """https://forth-standard.org/standard/double/DPlus"""
000EB0r 3               
000EB0r 3               xt_d_plus:
000EB0r 3  20 rr rr                     jsr underflow_4 ; two double numbers
000EB3r 3               
000EB3r 3  18                           clc
000EB4r 3  B5 02                        lda 2,x         ; LSB of lower word
000EB6r 3  75 06                        adc 6,x
000EB8r 3  95 06                        sta 6,x
000EBAr 3               
000EBAr 3  B5 03                        lda 3,x         ; MSB of lower word
000EBCr 3  75 07                        adc 7,x
000EBEr 3  95 07                        sta 7,x
000EC0r 3               
000EC0r 3  B5 00                        lda 0,x         ; LSB of upper word
000EC2r 3  75 04                        adc 4,x
000EC4r 3  95 04                        sta 4,x
000EC6r 3               
000EC6r 3  B5 01                        lda 1,x         ; MSB of upper word
000EC8r 3  75 05                        adc 5,x
000ECAr 3  95 05                        sta 5,x
000ECCr 3               
000ECCr 3  E8                           inx
000ECDr 3  E8                           inx
000ECEr 3  E8                           inx
000ECFr 3  E8                           inx
000ED0r 3               
000ED0r 3  60           z_d_plus:       rts
000ED1r 3               
000ED1r 3               
000ED1r 3               
000ED1r 3               ; ## D_TO_S ( d -- n ) "Convert a double number to single"
000ED1r 3               ; ## "d>s"  auto  ANS double
000ED1r 3                       ; """https://forth-standard.org/standard/double/DtoS
000ED1r 3                       ; Though this is basically just DROP, we keep it
000ED1r 3                       ; separate so we can test for underflow
000ED1r 3                       ; """
000ED1r 3               
000ED1r 3               xt_d_to_s:
000ED1r 3  20 rr rr                     jsr underflow_2
000ED4r 3               
000ED4r 3  E8                           inx
000ED5r 3  E8                           inx
000ED6r 3               
000ED6r 3  60           z_d_to_s:       rts
000ED7r 3               
000ED7r 3               
000ED7r 3               
000ED7r 3               ; ## DABS ( d -- d ) "Return the absolute value of a double"
000ED7r 3               ; ## "dabs"  auto  ANS double
000ED7r 3                       ; """https://forth-standard.org/standard/double/DABS"""
000ED7r 3               
000ED7r 3               xt_dabs:
000ED7r 3  20 rr rr                     jsr underflow_2 ; double number
000EDAr 3               
000EDAr 3  B5 01                        lda 1,x         ; MSB of high cell
000EDCr 3  10 17                        bpl @done       ; positive, we get off light
000EDEr 3               
000EDEr 3                               ; negative, calculate 0 - d
000EDEr 3  A0 00                        ldy #0
000EE0r 3  38                           sec
000EE1r 3               
000EE1r 3  98                           tya
000EE2r 3  F5 02                        sbc 2,x         ; LSB of low cell
000EE4r 3  95 02                        sta 2,x
000EE6r 3               
000EE6r 3  98                           tya
000EE7r 3  F5 03                        sbc 3,x         ; MSB of low cell
000EE9r 3  95 03                        sta 3,x
000EEBr 3               
000EEBr 3  98                           tya
000EECr 3  F5 00                        sbc 0,x         ; LSB of high cell
000EEEr 3  95 00                        sta 0,x
000EF0r 3               
000EF0r 3  98                           tya
000EF1r 3  F5 01                        sbc 1,x         ; MSB of high cell
000EF3r 3  95 01                        sta 1,x
000EF5r 3               @done:
000EF5r 3  60           z_dabs:         rts
000EF6r 3               
000EF6r 3               
000EF6r 3               
000EF6r 3               ; ## DECIMAL ( -- ) "Change radix base to decimal"
000EF6r 3               ; ## "decimal"  auto  ANS core
000EF6r 3                       ; """https://forth-standard.org/standard/core/DECIMAL"""
000EF6r 3               xt_decimal:
000EF6r 3  A9 0A                        lda #10
000EF8r 3  85 rr                        sta base
000EFAr 3  64 rr                        stz base+1              ; paranoid
000EFCr 3               
000EFCr 3  60           z_decimal:      rts
000EFDr 3               
000EFDr 3               
000EFDr 3               ; ## DEFER ( "name" -- ) "Create a placeholder for words by name"
000EFDr 3               ; ## "defer"  auto  ANS core ext
000EFDr 3                       ; """https://forth-standard.org/standard/core/DEFER
000EFDr 3                       ; Reserve an name that can be linked to various xt by IS.
000EFDr 3                       ;
000EFDr 3                       ; The ANS reference implementation is
000EFDr 3                       ;       CREATE ['] ABORT , DOES> @ EXECUTE ;
000EFDr 3                       ; But we use this routine as a low-level word so things go faster
000EFDr 3               
000EFDr 3               xt_defer:
000EFDr 3  20 rr rr                     jsr xt_create
000F00r 3               
000F00r 3                               ; CREATE by default installs a subroutine jump to DOVAR,
000F00r 3                               ; but we actually want DODEFER this time. Go back two
000F00r 3                               ; bytes and repace the subroutine jump target
000F00r 3  A5 rr                        lda cp          ; LSB
000F02r 3  38                           sec
000F03r 3  E9 02                        sbc #2
000F05r 3  85 rr                        sta tmp1
000F07r 3               
000F07r 3  A5 rr                        lda cp+1        ; MSB
000F09r 3  E9 00                        sbc #0          ; we only care about the borrow
000F0Br 3  85 rr                        sta tmp1+1
000F0Dr 3               
000F0Dr 3                               ; Save the target address
000F0Dr 3  A0 00                        ldy #0
000F0Fr 3  A9 rr                        lda #<dodefer   ; LSB
000F11r 3  91 rr                        sta (tmp1),y
000F13r 3  C8                           iny
000F14r 3  A9 rr                        lda #>dodefer   ; MSB
000F16r 3  91 rr                        sta (tmp1),y
000F18r 3               
000F18r 3               
000F18r 3                               ; DODEFER executes the next address it finds after
000F18r 3                               ; its call. As default, we include the error
000F18r 3                               ; "Defer not defined"
000F18r 3  A9 rr                        lda #<defer_error
000F1Ar 3  92 rr                        sta (cp)
000F1Cr 3  E6 rr                        inc cp
000F1Er 3  D0 02                        bne @1
000F20r 3  E6 rr                        inc cp+1
000F22r 3               @1:
000F22r 3  A9 rr                        lda #>defer_error
000F24r 3  92 rr                        sta (cp)
000F26r 3  E6 rr                        inc cp
000F28r 3  D0 02                        bne @2
000F2Ar 3  E6 rr                        inc cp+1
000F2Cr 3               @2:
000F2Cr 3  20 rr rr                     jsr adjust_z    ; adjust header to correct length
000F2Fr 3               
000F2Fr 3  60           z_defer:        rts
000F30r 3               
000F30r 3               
000F30r 3               
000F30r 3               ; ## DEFER_FETCH ( xt1 -- xt2 ) "Get the current XT for a deferred word"
000F30r 3               ; ## "defer@"  auto  ANS core ext
000F30r 3                       ; """http://forth-standard.org/standard/core/DEFERFetch"""
000F30r 3               
000F30r 3               xt_defer_fetch:
000F30r 3                               ; No underflow checking as >BODY does it.
000F30r 3  20 rr rr                     jsr xt_to_body
000F33r 3  20 rr rr                     jsr xt_fetch
000F36r 3  60           z_defer_fetch:  rts
000F37r 3               
000F37r 3               
000F37r 3               
000F37r 3               ; ## DEFER_STORE ( xt2 x1 -- ) "Set xt1 to execute xt2"
000F37r 3               ; ## "defer!"  auto  ANS core ext
000F37r 3                       ; """http://forth-standard.org/standard/core/DEFERStore"""
000F37r 3               
000F37r 3               xt_defer_store:
000F37r 3                               ; No underflow checking as >BODY and ! do it.
000F37r 3  20 rr rr                     jsr xt_to_body
000F3Ar 3  20 rr rr                     jsr xt_store
000F3Dr 3  60           z_defer_store:  rts
000F3Er 3               
000F3Er 3               
000F3Er 3               
000F3Er 3               ; ## DEFINITIONS ( -- ) "Make first wordlist in search order the current wordlist"
000F3Er 3               ; ## "definitions" auto ANS search
000F3Er 3               xt_definitions:
000F3Er 3  A0 1F                        ldy #search_order_offset    ; Transfer byte variable
000F40r 3  B1 rr                        lda (up),y                  ; SEARCH_ORDER[0] to
000F42r 3  A0 04                        ldy #current_offset         ; byte variable CURRENT.
000F44r 3  91 rr                        sta (up),y
000F46r 3  60           z_definitions:  rts
000F47r 3               
000F47r 3               
000F47r 3               ; ## DEPTH ( -- u ) "Get number of cells (not bytes) used by stack"
000F47r 3               ; ## "depth"  auto  ANS core
000F47r 3                       ; """https://forth-standard.org/standard/core/DEPTH"""
000F47r 3               xt_depth:
000F47r 3  A9 rr                        lda #dsp0
000F49r 3  86 rr                        stx tmpdsp
000F4Br 3  38                           sec
000F4Cr 3  E5 rr                        sbc tmpdsp
000F4Er 3               
000F4Er 3                               ; divide by two because each cell is two bytes
000F4Er 3  4A                           lsr
000F4Fr 3               
000F4Fr 3  CA                           dex
000F50r 3  CA                           dex
000F51r 3  95 00                        sta 0,x
000F53r 3  74 01                        stz 1,x
000F55r 3               
000F55r 3  60           z_depth:        rts
000F56r 3               
000F56r 3               
000F56r 3               ; ## DIGIT_QUESTION ( char -- u f | char f ) "Convert ASCII char to number"
000F56r 3               ; ## "digit?"  auto  Tali Forth
000F56r 3                       ; """Inspired by the pForth instruction DIGIT, see
000F56r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
000F56r 3                       ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to
000F56r 3                       ; pForth, we get the base (radix) ourselves instead of having the
000F56r 3                       ; user provide it. There is no standard name for this routine, which
000F56r 3                       ; itself is not ANS; we use DIGIT? following pForth and Gforth.
000F56r 3                       ; """
000F56r 3               
000F56r 3               xt_digit_question:
000F56r 3  20 rr rr                     jsr underflow_1
000F59r 3               
000F59r 3                               ; one way or another, we're going to need room for the
000F59r 3                               ; flag on the stack
000F59r 3  CA                           dex
000F5Ar 3  CA                           dex
000F5Br 3  74 00                        stz 0,x                 ; default flag is failure
000F5Dr 3  74 01                        stz 1,x
000F5Fr 3  74 03                        stz 3,x                 ; paranoid
000F61r 3               
000F61r 3                               ; Check the character, now in the LSB of NOS. First, make
000F61r 3                               ; sure we're not below the ASCII code for "0"
000F61r 3  B5 02                        lda 2,x
000F63r 3  C9 30                        cmp #'0'
000F65r 3  90 23                        bcc @done               ; failure flag already set
000F67r 3               
000F67r 3                               ; Next, see if we are below "9", because that would make
000F67r 3                               ; this a normal number
000F67r 3  C9 3A                        cmp #'9'+1               ; this is actually ":"
000F69r 3  90 12                        bcc @checkbase
000F6Br 3               
000F6Br 3                               ; Well, then let's see if this is the gap between "9" and "A"
000F6Br 3                               ; so we can treat the whole range as a number
000F6Br 3  C9 41                        cmp #'A'
000F6Dr 3  90 1B                        bcc @done               ; failure flag is already set
000F6Fr 3               
000F6Fr 3                               ; probably a letter, so we make sure it is uppercase
000F6Fr 3  C9 61                        cmp #'a'
000F71r 3  90 07                        bcc @case_done          ; not lower case, too low
000F73r 3  C9 7B                        cmp #'z'+1
000F75r 3  B0 03                        bcs @case_done          ; not lower case, too high
000F77r 3               
000F77r 3  18                           clc                     ; just right
000F78r 3  69 E0                        adc #$e0                ; offset to upper case (wraps)
000F7Ar 3               
000F7Ar 3               @case_done:
000F7Ar 3                               ; get rid of the gap between "9" and "A" so we can treat
000F7Ar 3                               ; the whole range as one number
000F7Ar 3  38                           sec
000F7Br 3  E9 07                        sbc #7                  ; fall through to @checkbase
000F7Dr 3               
000F7Dr 3               @checkbase:
000F7Dr 3                               ; we have a number, now see if it falls inside the range
000F7Dr 3                               ; provided by BASE
000F7Dr 3  38                           sec
000F7Er 3  E9 30                        sbc #'0'                 ; this is also the conversion step
000F80r 3  C5 rr                        cmp base
000F82r 3  B0 06                        bcs @done               ; already have false flag
000F84r 3               
000F84r 3                               ; Found a legal number
000F84r 3  95 02                        sta 2,x                 ; put number in NOS
000F86r 3  D6 00                        dec 0,x                 ; set success flag
000F88r 3  D6 01                        dec 1,x
000F8Ar 3               
000F8Ar 3               @done:
000F8Ar 3               z_digit_question:
000F8Ar 3  60                           rts
000F8Br 3               
000F8Br 3               
000F8Br 3               ; ## DISASM ( addr u -- ) "Disassemble a block of memory"
000F8Br 3               ; ## "disasm"  tested  Tali Forth
000F8Br 3                       ; """Convert a segment of memory to assembler output. This
000F8Br 3                       ; word is vectored so people can add their own disassembler.
000F8Br 3                       ; Natively, this produces Simpler Assembly Notation (SAN)
000F8Br 3                       ; code, see the section on The Disassembler in the manual and
000F8Br 3                       ; the file disassembler.asm for more details.
000F8Br 3                       ; """
000F8Br 3               xt_disasm:
000F8Br 3  20 rr rr                     jsr underflow_2
000F8Er 3                           .ifdef disassembler
000F8Er 3                               jsr disassembler
000F8Er 3                           .endif
000F8Er 3               
000F8Er 3  60           z_disasm:       rts
000F8Fr 3               
000F8Fr 3               
000F8Fr 3               ; ## DNEGATE ( d -- d ) "Negate double cell number"
000F8Fr 3               ; ## "dnegate"  auto  ANS double
000F8Fr 3                       ; """https://forth-standard.org/standard/double/DNEGATE"""
000F8Fr 3               xt_dnegate:
000F8Fr 3  20 rr rr                     jsr underflow_2 ; double number
000F92r 3               
000F92r 3  A0 00             		ldy #0
000F94r 3  38                           sec
000F95r 3               
000F95r 3  98                           tya
000F96r 3  F5 02                        sbc 2,x         ; LSB of low cell
000F98r 3  95 02                        sta 2,x
000F9Ar 3               
000F9Ar 3  98                           tya
000F9Br 3  F5 03                        sbc 3,x         ; MSB of low cell
000F9Dr 3  95 03                        sta 3,x
000F9Fr 3               
000F9Fr 3  98                           tya
000FA0r 3  F5 00                        sbc 0,x         ; LSB of high cell
000FA2r 3  95 00                        sta 0,x
000FA4r 3               
000FA4r 3  98                           tya
000FA5r 3  F5 01                        sbc 1,x         ; MSB of high cell
000FA7r 3  95 01                        sta 1,x
000FA9r 3               
000FA9r 3  60           z_dnegate:      rts
000FAAr 3               
000FAAr 3               
000FAAr 3               ; ## QUESTION_DO ( limit start -- )(R: -- limit start) "Conditional loop start"
000FAAr 3               ; ## "?do"  auto  ANS core ext
000FAAr 3                       ; """https://forth-standard.org/standard/core/qDO"""
000FAAr 3               xt_question_do:
000FAAr 3                               ; ?DO shares most of its code with DO. We use the tmp1 flag
000FAAr 3                               ; to mark which is which
000FAAr 3  A9 FF                        lda #$ff                ; -1 is ?DO, jump to common code
000FACr 3  85 rr                        sta tmp1
000FAEr 3  80 02                        bra do_common           ; skip flag for DO
000FB0r 3               
000FB0r 3               ; ## DO ( limit start -- )(R: -- limit start)  "Start a loop"
000FB0r 3               ; ## "do"  auto  ANS core
000FB0r 3                       ; """https://forth-standard.org/standard/core/DO
000FB0r 3                       ;
000FB0r 3                       ; Compile-time part of DO. Could be realized in Forth as
000FB0r 3                       ;       : DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY
000FB0r 3                       ; but we do it in assembler for speed. To work with LEAVE, we compile
000FB0r 3                       ; a routine that pushes the end address to the Return Stack at run
000FB0r 3                       ; time. This is based on a suggestion by Garth Wilson, see
000FB0r 3                       ; the Control Flow section of the manual for details.
000FB0r 3                       ;
000FB0r 3                       ; This may not be native compile. Don't check for a stack underflow
000FB0r 3                       ; """
000FB0r 3               
000FB0r 3               xt_do:
000FB0r 3                               ; DO and ?DO share most of their code, use tmp1 as a flag.
000FB0r 3  64 rr                        stz tmp1                ; 0 is DO, drop through to DO_COMMON
000FB2r 3               do_common:
000FB2r 3                               ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
000FB2r 3                               ; compile the address we need to LDA at runtime
000FB2r 3  CA                           dex
000FB3r 3  CA                           dex
000FB4r 3  A5 rr                        lda cp
000FB6r 3  95 00                        sta 0,x                 ; LSB
000FB8r 3  A5 rr                        lda cp+1
000FBAr 3  95 01                        sta 1,x                 ; MSB   ( limit start here )
000FBCr 3               
000FBCr 3                               ; now we compile six dummy bytes that LOOP/+LOOP will
000FBCr 3                               ; replace by the actual LDA/PHA instructions
000FBCr 3  A9 05                        lda #5                  ; we don't really care about the value,
000FBEr 3  A8                           tay                     ; so we use 5 to be tricky
000FBFr 3               @loop:
000FBFr 3  91 rr                        sta (cp),y
000FC1r 3  88                           dey
000FC2r 3  10 FB                        bpl @loop
000FC4r 3               
000FC4r 3                               ; update CP
000FC4r 3  1A                           inc             ; we used 5 as a dummy value, this is why
000FC5r 3  18                           clc
000FC6r 3  65 rr                        adc cp
000FC8r 3  85 rr                        sta cp
000FCAr 3  90 02                        bcc @1
000FCCr 3  E6 rr                        inc cp+1
000FCEr 3               @1:
000FCEr 3                               ; compile the (?DO) portion of ?DO if appropriate
000FCEr 3  A5 rr                        lda tmp1
000FD0r 3  F0 17                        beq @compile_do
000FD2r 3               
000FD2r 3                               ; We came from ?DO, so compile its runtime first. We do
000FD2r 3                               ; this with a quick loop because we know it has to be
000FD2r 3                               ; Always Native anyway
000FD2r 3  A0 14                        ldy #question_do_runtime_end-question_do_runtime
000FD4r 3  5A                           phy             ; save counter to calculate new CP
000FD5r 3               @2:
000FD5r 3  B9 rr rr                     lda question_do_runtime,y
000FD8r 3  91 rr                        sta (cp),y
000FDAr 3  88                           dey
000FDBr 3  10 F8                        bpl @2
000FDDr 3               
000FDDr 3                               ; adjust CP
000FDDr 3  68                           pla             ; retrieve counter
000FDEr 3  18                           clc
000FDFr 3  65 rr                        adc cp
000FE1r 3  85 rr                        sta cp
000FE3r 3  A5 rr                        lda cp+1
000FE5r 3  69 00                        adc #0          ; only care about carry
000FE7r 3  85 rr                        sta cp+1        ; fall through to @compile_do
000FE9r 3               
000FE9r 3               @compile_do:
000FE9r 3                               ; compile runtime part of DO.
000FE9r 3  A0 24                        ldy #do_runtime_end-do_runtime  ; counter
000FEBr 3  5A                           phy             ; save counter to calculate new CP
000FECr 3               @3:
000FECr 3  B9 rr rr                     lda do_runtime,y
000FEFr 3  91 rr                        sta (cp),y
000FF1r 3  88                           dey
000FF2r 3  10 F8                        bpl @3
000FF4r 3               
000FF4r 3                               ; adjust CP
000FF4r 3  68                           pla             ; retrieve counter
000FF5r 3  18                           clc
000FF6r 3  65 rr                        adc cp
000FF8r 3  85 rr                        sta cp
000FFAr 3  A5 rr                        lda cp+1
000FFCr 3  69 00                        adc #0          ; only care about carry
000FFEr 3  85 rr                        sta cp+1
001000r 3               
001000r 3                               ; HERE, hardcoded for speed. We put it on the Data Stack
001000r 3                               ; where LOOP/+LOOP takes it from. Note this has nothing to
001000r 3                               ; do with the HERE we're saving for LEAVE
001000r 3  CA                           dex
001001r 3  CA                           dex
001002r 3  A5 rr                        lda cp          ; LSB
001004r 3  95 00                        sta 0,x
001006r 3  A5 rr                        lda cp+1        ; MSB
001008r 3  95 01                        sta 1,x
00100Ar 3               z_question_do:
00100Ar 3  60           z_do:           rts
00100Br 3               
00100Br 3               
00100Br 3               do_runtime:
00100Br 3                       ; """Runtime routine for DO loop. Note that ANS loops quit when the
00100Br 3                       ; boundry of limit-1 and limit is reached, a different mechanism than
00100Br 3                       ; the FIG Forth loop (you can see which version you have by running
00100Br 3                       ; a loop with start and limit as the same value, for instance
00100Br 3                       ; 0 0 DO -- these will walk through the number space). We use a
00100Br 3                       ; "fudge factor" for the limit that makes the Overflow Flag trip when
00100Br 3                       ; it is reached; see http://forum.6502.org/viewtopic.php?f=9&t=2026
00100Br 3                       ; for further discussion of this. The source given there for
00100Br 3                       ; this idea is Laxen & Perry F83. -- This routine is called (DO)
00100Br 3                       ; in some Forths. Usually, we would define this as a separate word
00100Br 3                       ; and compile it with COMPILE, and the Always Native (AN) flag.
00100Br 3                       ; However, we can do it faster if we just copy the bytes
00100Br 3                       ; of this routine with a simple loop in DO.
00100Br 3                       ; """
00100Br 3                               ; First step: create fudge factor (FUFA) by subtracting the
00100Br 3                               ; limit from $8000, the number that will trip the overflow
00100Br 3                               ; flag
00100Br 3  38                           sec
00100Cr 3  A9 00                        lda #0
00100Er 3  F5 02                        sbc 2,x         ; LSB of limit
001010r 3  95 02                        sta 2,x         ; save FUFA for later use
001012r 3               
001012r 3  A9 80                        lda #$80
001014r 3  F5 03                        sbc 3,x         ; MSB of limit
001016r 3  95 03                        sta 3,x         ; save FUFA for later use
001018r 3  48                           pha             ; FUFA replaces limit on R stack
001019r 3  B5 02                        lda 2,x         ; LSB of limit
00101Br 3  48                           pha
00101Cr 3               
00101Cr 3                               ; Second step: index is FUFA plus original index
00101Cr 3  18                           clc
00101Dr 3  B5 00                        lda 0,x         ; LSB of original index
00101Fr 3  75 02                        adc 2,x         ; add LSB of FUFA
001021r 3  95 00                        sta 0,x
001023r 3  B5 01                        lda 1,x         ; MSB of orginal index
001025r 3  75 03                        adc 3,x         ; add MSB of FUFA
001027r 3  48                           pha
001028r 3  B5 00                        lda 0,x         ; LSB of index
00102Ar 3  48                           pha
00102Br 3               
00102Br 3                               ; we've saved the FUFA on the NOS of the R stack, so we can
00102Br 3                               ; use it later. Clean the Data Stack
00102Br 3  E8                           inx
00102Cr 3  E8                           inx
00102Dr 3  E8                           inx
00102Er 3  E8                           inx             ; no RTS because this is copied into code
00102Fr 3               do_runtime_end:
00102Fr 3               
00102Fr 3               question_do_runtime:
00102Fr 3               
00102Fr 3                       ; """This is called (?DO) in some Forths. See the explanation at
00102Fr 3                       ; do_runtime for the background on this design
00102Fr 3                       ; """
00102Fr 3                               ; see if TOS and NOS are equal. Change this to assembler
00102Fr 3                               ; for speed
00102Fr 3  20 rr rr                     jsr xt_two_dup          ; ( n1 n2 n1 n2 )
001032r 3  20 rr rr                     jsr xt_equal            ; ( -- n1 n2 f )
001035r 3               
001035r 3  B5 00                        lda 0,x
001037r 3  15 01                        ora 1,x
001039r 3  F0 06                        beq @do_do
00103Br 3               
00103Br 3                               ; We're equal, so dump everything and jump beyond the loop.
00103Br 3                               ; But first, dump six entries off of the Data Stack
00103Br 3  8A                           txa
00103Cr 3  18                           clc
00103Dr 3  69 06                        adc #6
00103Fr 3  AA                           tax
001040r 3               
001040r 3                               ; Then abort the whole loop
001040r 3  60                           rts
001041r 3               @do_do:
001041r 3  E8                           inx             ; clear flag from EQUAL off stack
001042r 3  E8                           inx             ; no RTS because this is copied into code
001043r 3               question_do_runtime_end:
001043r 3               
001043r 3               
001043r 3               
001043r 3               ; ## DOES ( -- ) "Add payload when defining new words"
001043r 3               ; ## "does>"  auto  ANS core
001043r 3                       ; """https://forth-standard.org/standard/core/DOES
001043r 3                       ; Create the payload for defining new defining words. See
001043r 3                       ; http://www.bradrodriguez.com/papers/moving3.htm and
001043r 3                       ; the Developer Guide in the manual for a discussion of
001043r 3                       ; DOES>'s internal workings. This uses tmp1 and tmp2.
001043r 3                       ; """
001043r 3               
001043r 3               xt_does:
001043r 3                               ; compile a subroutine jump to runtime of DOES>
001043r 3  A0 rr                        ldy #>does_runtime
001045r 3  A9 rr                        lda #<does_runtime
001047r 3  20 rr rr                     jsr cmpl_subroutine
00104Ar 3               
00104Ar 3                               ; compile a subroutine jump to DODOES. In traditional
00104Ar 3                               ; terms, this is the Code Field Area (CFA) of the new
00104Ar 3                               ; word
00104Ar 3  A0 rr                        ldy #>dodoes
00104Cr 3  A9 rr                        lda #<dodoes
00104Er 3  20 rr rr                     jsr cmpl_subroutine
001051r 3               
001051r 3  60           z_does:         rts
001052r 3               
001052r 3               
001052r 3               does_runtime:
001052r 3                       ; """Runtime portion of DOES>. This replaces the subroutine jump
001052r 3                       ; to DOVAR that CREATE automatically encodes by a jump to the
001052r 3                       ; address that contains a subroutine jump to DODOES. We don't
001052r 3                       ; jump to DODOES directly because we need to work our magic with
001052r 3                       ; the return addresses. This routine is also known as "(DOES)" in
001052r 3                       ; other Forths
001052r 3                       ; """
001052r 3               
001052r 3  7A                           ply             ; LSB
001053r 3  68                           pla             ; MSB
001054r 3               
001054r 3  C8                           iny
001055r 3  D0 01                        bne @1
001057r 3  1A                           inc
001058r 3               @1:
001058r 3  84 rr                        sty tmp1
00105Ar 3  85 rr                        sta tmp1+1
00105Cr 3               
00105Cr 3                               ; CREATE has also already modified the DP to point to the new
00105Cr 3                               ; word. We have no idea which instructions followed the CREATE
00105Cr 3                               ; command if there is a DOES> so the CP could point anywhere
00105Cr 3                               ; by now. The address of the word's xt is four bytes down.
00105Cr 3  20 rr rr                     jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
00105Fr 3  A5 rr                        lda dp
001061r 3  18                           clc
001062r 3  69 04                        adc #4
001064r 3  85 rr                        sta tmp2
001066r 3  A5 rr                        lda dp+1
001068r 3  69 00                        adc #0          ; we only care about the carry
00106Ar 3  85 rr                        sta tmp2+1
00106Cr 3               
00106Cr 3                               ; Now we get that address and add one byte to skip over the JSR
00106Cr 3                               ; opcode
00106Cr 3  B2 rr                        lda (tmp2)
00106Er 3  18                           clc
00106Fr 3  69 01                        adc #1
001071r 3  85 rr                        sta tmp3
001073r 3  A0 01                        ldy #1
001075r 3  B1 rr                        lda (tmp2),y
001077r 3  69 00                        adc #0          ; we only care about the carry
001079r 3  85 rr                        sta tmp3+1
00107Br 3               
00107Br 3                               ; Replace the DOVAR address with our own
00107Br 3  A5 rr                        lda tmp1        ; LSB
00107Dr 3  92 rr                        sta (tmp3)
00107Fr 3  A5 rr                        lda tmp1+1
001081r 3  91 rr                        sta (tmp3),y    ; Y is still 1
001083r 3               
001083r 3                               ; Since we removed the return address that brought us here, we
001083r 3                               ; go back to whatever the main routine was. Otherwise, we we
001083r 3                               ; smash into the subroutine jump to DODOES.
001083r 3  60                           rts
001084r 3               
001084r 3               
001084r 3               
001084r 3               ; ## DOT ( u -- ) "Print TOS"
001084r 3               ; ## "."  auto  ANS core
001084r 3                       ; """https://forth-standard.org/standard/core/d"""
001084r 3               
001084r 3               xt_dot:
001084r 3  20 rr rr                     jsr underflow_1
001087r 3               
001087r 3  20 rr rr                     jsr xt_dup                      ; ( n n )
00108Ar 3  20 rr rr                     jsr xt_abs                      ; ( n u )
00108Dr 3  20 rr rr                     jsr xt_zero                     ; ( n u 0 )
001090r 3  20 rr rr                     jsr xt_less_number_sign         ; ( n u 0 )
001093r 3  20 rr rr                     jsr xt_number_sign_s            ; ( n ud )
001096r 3  20 rr rr                     jsr xt_rot                      ; ( ud n )
001099r 3  20 rr rr                     jsr xt_sign                     ; ( ud )
00109Cr 3  20 rr rr                     jsr xt_number_sign_greater      ; ( addr u )
00109Fr 3  20 rr rr                     jsr xt_type
0010A2r 3  20 rr rr                     jsr xt_space
0010A5r 3               
0010A5r 3  60           z_dot:          rts
0010A6r 3               
0010A6r 3               
0010A6r 3               
0010A6r 3               ; ## DOT_PAREN ( -- ) "Print input up to close paren .( comment )"
0010A6r 3               ; ## ".("  auto  ANS core
0010A6r 3                       ; """http://forth-standard.org/standard/core/Dotp"""
0010A6r 3               
0010A6r 3               xt_dot_paren:
0010A6r 3                               ; Put a right paren on the stack.
0010A6r 3  CA                           dex
0010A7r 3  CA                           dex
0010A8r 3  A9 29                        lda #41     ; Right parenthesis
0010AAr 3  95 00                        sta 0,x
0010ACr 3  74 01                        stz 1,x
0010AEr 3               
0010AEr 3  20 rr rr                     jsr xt_parse
0010B1r 3  20 rr rr                     jsr xt_type
0010B4r 3               
0010B4r 3  60           z_dot_paren:    rts
0010B5r 3               
0010B5r 3               
0010B5r 3               
0010B5r 3               ; ## DOT_QUOTE ( "string" -- ) "Print string from compiled word"
0010B5r 3               ; ## ".""  auto  ANS core ext
0010B5r 3                       ; """https://forth-standard.org/standard/core/Dotq
0010B5r 3                       ; Compile string that is printed during run time. ANS Forth wants
0010B5r 3                       ; this to be compile-only, even though everybody and their friend
0010B5r 3                       ; uses it for everything. We follow the book here, and recommend
0010B5r 3                       ; `.(` for general printing.
0010B5r 3                       ; """
0010B5r 3               
0010B5r 3               xt_dot_quote:
0010B5r 3                               ; we let S" do the heavy lifting. Since we're in
0010B5r 3                               ; compile mode, it will save the string and reproduce it
0010B5r 3                               ; during runtime
0010B5r 3  20 rr rr                     jsr xt_s_quote
0010B8r 3               
0010B8r 3                               ; We then let TYPE do the actual printing
0010B8r 3  A0 rr                        ldy #>xt_type
0010BAr 3  A9 rr                        lda #<xt_type
0010BCr 3  20 rr rr                     jsr cmpl_subroutine
0010BFr 3               
0010BFr 3  60           z_dot_quote:    rts
0010C0r 3               
0010C0r 3               
0010C0r 3               
0010C0r 3               ; ## DOT_R ( n u -- ) "Print NOS as unsigned number with TOS with"
0010C0r 3               ; ## ".r"  tested  ANS core ext
0010C0r 3                       ; """https://forth-standard.org/standard/core/DotR
0010C0r 3                       ;
0010C0r 3                       ; Based on the Forth code
0010C0r 3                       ;  : .R  >R DUP ABS 0 <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
0010C0r 3                       ; """
0010C0r 3               
0010C0r 3               xt_dot_r:
0010C0r 3  20 rr rr                     jsr underflow_2
0010C3r 3               
0010C3r 3  20 rr rr                     jsr xt_to_r
0010C6r 3  20 rr rr                     jsr xt_dup
0010C9r 3  20 rr rr                     jsr xt_abs
0010CCr 3  20 rr rr                     jsr xt_zero
0010CFr 3  20 rr rr                     jsr xt_less_number_sign
0010D2r 3  20 rr rr                     jsr xt_number_sign_s
0010D5r 3  20 rr rr                     jsr xt_rot
0010D8r 3  20 rr rr                     jsr xt_sign
0010DBr 3  20 rr rr                     jsr xt_number_sign_greater
0010DEr 3  20 rr rr                     jsr xt_r_from
0010E1r 3  20 rr rr                     jsr xt_over
0010E4r 3  20 rr rr                     jsr xt_minus
0010E7r 3  20 rr rr                     jsr xt_spaces
0010EAr 3  20 rr rr                     jsr xt_type
0010EDr 3               
0010EDr 3  60           z_dot_r:        rts
0010EEr 3               
0010EEr 3               
0010EEr 3               
0010EEr 3               ; ## DOT_S ( -- ) "Print content of Data Stack"
0010EEr 3               ; ## ".s"  tested  ANS tools
0010EEr 3                       ; """https://forth-standard.org/standard/tools/DotS
0010EEr 3                       ; Print content of Data Stack non-distructively. We follow the format
0010EEr 3                       ; of Gforth and print the number of elements first in brackets,
0010EEr 3                       ; followed by the Data Stack content (if any).
0010EEr 3                       ;
0010EEr 3                       ; Since this is for humans, we don't have to worry about speed.
0010EEr 3                       ; """
0010EEr 3               
0010EEr 3               xt_dot_s:
0010EEr 3  20 rr rr                     jsr xt_depth    ; ( -- u )
0010F1r 3               
0010F1r 3                               ; Print stack depth in brackets
0010F1r 3  A9 3C                        lda #$3c        ; ASCII for "<"
0010F3r 3  20 rr rr                     jsr emit_a
0010F6r 3               
0010F6r 3                               ; We keep a copy of the number of the things on the stack
0010F6r 3                               ; to use as a counter later down. This assumes that there
0010F6r 3                               ; are less than 255 elements on the stack
0010F6r 3  B5 00                        lda 0,x
0010F8r 3  48                           pha
0010F9r 3               
0010F9r 3                               ; print unsigned number without the trailing space
0010F9r 3  CA                           dex             ; DUP
0010FAr 3  CA                           dex
0010FBr 3  95 00                        sta 0,x
0010FDr 3  74 01                        stz 1,x
0010FFr 3               
0010FFr 3  20 rr rr                     jsr print_u
001102r 3               
001102r 3  A9 3E                        lda #$3e        ; ASCII for ">"
001104r 3  20 rr rr                     jsr emit_a
001107r 3  A9 20                        lda #AscSP      ; ASCII for SPACE
001109r 3  20 rr rr                     jsr emit_a
00110Cr 3               
00110Cr 3  E8                           inx
00110Dr 3  E8                           inx
00110Er 3               
00110Er 3                               ; There will be lots of cases where the stack is empty. If that
00110Er 3                               ; is so, get out of here quickly
00110Er 3  E0 rr                        cpx #dsp0
001110r 3  F0 1E                        beq @done
001112r 3               
001112r 3               @have_stack:
001112r 3                               ; We have at least one element on the stack. The depth of the
001112r 3                               ; stack is on the stack, we can use it as a counter. We go
001112r 3                               ; from bottom to top
001112r 3  7A                           ply
001113r 3               
001113r 3  A9 rr                        lda #dsp0-1     ; go up one to avoid garbage
001115r 3  85 rr                        sta tmp3
001117r 3  64 rr                        stz tmp3+1      ; must be zero page on the 65c02
001119r 3               @loop:
001119r 3  CA                           dex
00111Ar 3  CA                           dex
00111Br 3               
00111Br 3  B2 rr                        lda (tmp3)
00111Dr 3  95 01                        sta 1,x
00111Fr 3  C6 rr                        dec tmp3
001121r 3               
001121r 3  B2 rr                        lda (tmp3)
001123r 3  95 00                        sta 0,x
001125r 3  C6 rr                        dec tmp3
001127r 3  5A                           phy
001128r 3               
001128r 3  20 rr rr                     jsr xt_dot
00112Br 3               
00112Br 3  7A                           ply
00112Cr 3  88                           dey
00112Dr 3  D0 EA                        bne @loop
00112Fr 3               
00112Fr 3  48                           pha             ; dummy to balance stack
001130r 3               @done:
001130r 3  68                           pla
001131r 3  60           z_dot_s:        rts
001132r 3               
001132r 3               
001132r 3               
001132r 3               ; ## D_DOT ( d -- ) "Print double"
001132r 3               ; ## "d."  tested  ANS double
001132r 3                       ; """http://forth-standard.org/standard/double/Dd"""
001132r 3                       ;
001132r 3                       ; From the Forth code:
001132r 3                       ; : D. TUCK DABS <# #S ROT SIGN #> TYPE SPACE ;
001132r 3                       ; """
001132r 3               
001132r 3               xt_d_dot:
001132r 3  20 rr rr                     jsr underflow_2
001135r 3               
001135r 3  20 rr rr                     jsr xt_tuck
001138r 3  20 rr rr                     jsr xt_dabs
00113Br 3  20 rr rr                     jsr xt_less_number_sign
00113Er 3  20 rr rr                     jsr xt_number_sign_s
001141r 3  20 rr rr                     jsr xt_rot
001144r 3  20 rr rr                     jsr xt_sign
001147r 3  20 rr rr                     jsr xt_number_sign_greater
00114Ar 3  20 rr rr                     jsr xt_type
00114Dr 3  20 rr rr                     jsr xt_space
001150r 3               
001150r 3  60           z_d_dot:        rts
001151r 3               
001151r 3               
001151r 3               
001151r 3               ; ## D_DOT_R ( d u -- ) "Print double right-justified u wide"
001151r 3               ; ## "d.r"  tested  ANS double
001151r 3                       ; """http://forth-standard.org/standard/double/DDotR"""
001151r 3                       ; Based on the Forth code
001151r 3                       ;  : D.R >R TUCK DABS <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
001151r 3                       ; """
001151r 3               
001151r 3               xt_d_dot_r:
001151r 3  20 rr rr                     jsr underflow_3
001154r 3                               ; From the forth code:
001154r 3  20 rr rr                     jsr xt_to_r
001157r 3  20 rr rr                     jsr xt_tuck
00115Ar 3  20 rr rr                     jsr xt_dabs
00115Dr 3  20 rr rr                     jsr xt_less_number_sign
001160r 3  20 rr rr                     jsr xt_number_sign_s
001163r 3  20 rr rr                     jsr xt_rot
001166r 3  20 rr rr                     jsr xt_sign
001169r 3  20 rr rr                     jsr xt_number_sign_greater
00116Cr 3  20 rr rr                     jsr xt_r_from
00116Fr 3  20 rr rr                     jsr xt_over
001172r 3  20 rr rr                     jsr xt_minus
001175r 3  20 rr rr                     jsr xt_spaces
001178r 3  20 rr rr                     jsr xt_type
00117Br 3               
00117Br 3  60           z_d_dot_r:      rts
00117Cr 3               
00117Cr 3               
00117Cr 3               
00117Cr 3               ; ## DROP ( u -- ) "Pop top entry on Data Stack"
00117Cr 3               ; ## "drop"  auto  ANS core
00117Cr 3                       ; """https://forth-standard.org/standard/core/DROP"""
00117Cr 3               xt_drop:
00117Cr 3  20 rr rr                     jsr underflow_1
00117Fr 3               
00117Fr 3  E8                           inx
001180r 3  E8                           inx
001181r 3               
001181r 3  60           z_drop:         rts
001182r 3               
001182r 3               
001182r 3               ; ## DUMP ( addr u -- ) "Display a memory region"
001182r 3               ; ## "dump"  tested  ANS tools
001182r 3                       ; """https://forth-standard.org/standard/tools/DUMP
001182r 3                       ;
001182r 3                       ; DUMP's exact output is defined as "implementation dependent".
001182r 3                       ; This is in assembler because it is
001182r 3                       ; useful for testing and development, so we want to have it work
001182r 3                       ; as soon as possible. Uses TMP2
001182r 3                       ; """
001182r 3               
001182r 3               xt_dump:
001182r 3  20 rr rr                     jsr underflow_2
001185r 3               @row:
001185r 3                               ; start counter for 16 numbers per row
001185r 3  A0 10                        ldy #16
001187r 3               
001187r 3                               ; We use TMP2 as the index for the ASCII characters
001187r 3                               ; that we print at the and of the hex block. We
001187r 3                               ; start saving them at HERE (CP)
001187r 3  64 rr                        stz tmp2
001189r 3               
001189r 3  20 rr rr                     jsr xt_cr
00118Cr 3               
00118Cr 3                               ; print address number
00118Cr 3  B5 03                        lda 3,x
00118Er 3  20 rr rr                     jsr byte_to_ascii
001191r 3  B5 02                        lda 2,x
001193r 3  20 rr rr                     jsr byte_to_ascii
001196r 3               
001196r 3  20 rr rr                     jsr xt_space
001199r 3  20 rr rr                     jsr xt_space
00119Cr 3               @loop:
00119Cr 3                               ; if there are zero bytes left to display, we're done
00119Cr 3  B5 00                        lda 0,x
00119Er 3  15 01                        ora 1,x
0011A0r 3  F0 39                        beq @all_printed
0011A2r 3               
0011A2r 3                               ; dump the contents
0011A2r 3  A1 02                        lda (2,x)
0011A4r 3  48                           pha                     ; byte_to_ascii destroys A
0011A5r 3  20 rr rr                     jsr byte_to_ascii
0011A8r 3  20 rr rr                     jsr xt_space
0011ABr 3  68                           pla
0011ACr 3               
0011ACr 3                               ; Handle ASCII printing
0011ACr 3  20 rr rr                     jsr is_printable
0011AFr 3  B0 02                        bcs @printable
0011B1r 3  A9 2E                        lda #'.'                 ; Print dot if not printable
0011B3r 3               @printable:
0011B3r 3  5A                           phy                     ; save counter
0011B4r 3  A4 rr                        ldy tmp2
0011B6r 3  91 rr                        sta (cp),y
0011B8r 3  E6 rr                        inc tmp2
0011BAr 3  7A                           ply
0011BBr 3               
0011BBr 3                               ; extra space after eight bytes
0011BBr 3  C0 09                        cpy #9
0011BDr 3  D0 03                        bne @next_char
0011BFr 3  20 rr rr                     jsr xt_space
0011C2r 3               
0011C2r 3               @next_char:
0011C2r 3  F6 02                        inc 2,x
0011C4r 3  D0 02                        bne @counter
0011C6r 3  F6 03                        inc 3,x
0011C8r 3               
0011C8r 3               @counter:
0011C8r 3                               ; loop counter
0011C8r 3  B5 00                        lda 0,x
0011CAr 3  D0 02                        bne @1
0011CCr 3  D6 01                        dec 1,x
0011CEr 3               @1:
0011CEr 3  D6 00                        dec 0,x
0011D0r 3  88                           dey
0011D1r 3  D0 C9                        bne @loop               ; next byte
0011D3r 3               
0011D3r 3                               ; Done with one line, print the ASCII version of these
0011D3r 3                               ; characters
0011D3r 3  20 rr rr                     jsr xt_space
0011D6r 3  20 rr rr                     jsr print_ascii
0011D9r 3               
0011D9r 3  80 AA                        bra @row                ; new row
0011DBr 3               
0011DBr 3               @all_printed:
0011DBr 3                               ; See if there are any ASCII characters in the buffer
0011DBr 3                               ; left to print
0011DBr 3  A5 rr                        lda tmp2
0011DDr 3  F0 06                        beq @done
0011DFr 3               
0011DFr 3                               ; In theory, we could try to make the ASCII part line
0011DFr 3                               ; up with the line before it. But that is a hassle (we
0011DFr 3                               ; use three bytes for each missed hex entry, and
0011DFr 3                               ; then there is the gap after eight entries) and it
0011DFr 3                               ; makes it harder to read. We settle for one extra
0011DFr 3                               ; space instead for the moment
0011DFr 3  20 rr rr                     jsr xt_space
0011E2r 3  20 rr rr                     jsr print_ascii
0011E5r 3               @done:
0011E5r 3  20 rr rr                     jsr xt_two_drop         ; one byte less than 4x INX
0011E8r 3  60           z_dump:         rts
0011E9r 3               
0011E9r 3               
0011E9r 3               print_ascii:
0011E9r 3                               ; Print the ASCII characters that we have saved from
0011E9r 3                               ; HERE (CP) to HERE plus whatever is in TMP2. This routine
0011E9r 3                               ; is not compiled (DUMP is probably never compiled anyway)
0011E9r 3                               ; but we keep it inside the scope of DUMP.
0011E9r 3  A0 00                        ldy #0
0011EBr 3               @ascii_loop:
0011EBr 3  B1 rr                        lda (cp),y
0011EDr 3  20 rr rr                     jsr emit_a
0011F0r 3  C8                           iny
0011F1r 3               
0011F1r 3                               ; extra space after eight chars
0011F1r 3  C0 08                        cpy #8
0011F3r 3  D0 03                        bne @1
0011F5r 3  20 rr rr                     jsr xt_space
0011F8r 3               @1:
0011F8r 3  C6 rr                        dec tmp2
0011FAr 3  D0 EF                        bne @ascii_loop
0011FCr 3               
0011FCr 3  60                           rts
0011FDr 3               
0011FDr 3               
0011FDr 3               
0011FDr 3               ; ## DUP ( u -- u u ) "Duplicate TOS"
0011FDr 3               ; ## "dup"  auto  ANS core
0011FDr 3                       ; """https://forth-standard.org/standard/core/DUP"""
0011FDr 3               xt_dup:
0011FDr 3  20 rr rr                     jsr underflow_1
001200r 3               
001200r 3  CA                           dex
001201r 3  CA                           dex
001202r 3               
001202r 3  B5 02                        lda 2,x         ; LSB
001204r 3  95 00                        sta 0,x
001206r 3  B5 03                        lda 3,x         ; MSB
001208r 3  95 01                        sta 1,x
00120Ar 3               
00120Ar 3  60           z_dup:          rts
00120Br 3               
00120Br 3               
00120Br 3               ; ## ED ( -- u ) "Line-based editor"
00120Br 3               ; ## "ed"  fragment  Tali Forth
00120Br 3                       ; """Start the line-based editor ed6502. See separate file
00120Br 3                       ; ed.asm or the manual for details.
00120Br 3                       ; """
00120Br 3               xt_ed:
00120Br 3                           .ifdef ed6502
00120Br 3                               jsr ed6502      ; kept in separate file
00120Br 3                           .endif
00120Br 3               
00120Br 3  60           z_ed:           rts
00120Cr 3               
00120Cr 3               
00120Cr 3               ; ## EDITOR_WORDLIST ( -- u ) "WID for the Editor wordlist"
00120Cr 3               ; ## "editor-wordlist"  tested  Tali Editor
00120Cr 3                       ; """ Commonly used like `editor-wordlist >order` to add the editor
00120Cr 3                       ; words to the search order so they can be used.  This will need
00120Cr 3                       ; to be done before any of the words marked "Tali Editor" can be
00120Cr 3                       ; used.  See the tutorial on Wordlists and the Search Order for
00120Cr 3                       ; more information.
00120Cr 3               
00120Cr 3                       ;
00120Cr 3                       ; This is a dummy entry, the code is shared with ONE
00120Cr 3                       ; """
00120Cr 3               
00120Cr 3               
00120Cr 3               ; ## ELSE (C: orig -- orig) ( -- ) "Conditional flow control"
00120Cr 3               ; ## "else"  auto  ANS core
00120Cr 3                       ; """http://forth-standard.org/standard/core/ELSE
00120Cr 3                       ;
00120Cr 3                       ; The code is shared with ENDOF
00120Cr 3                       ; """
00120Cr 3               
00120Cr 3               xt_else:
00120Cr 3               xt_endof:
00120Cr 3                               ; Put an unconditional branch.
00120Cr 3  A0 rr                        ldy #>branch_runtime
00120Er 3  A9 rr                        lda #<branch_runtime
001210r 3  20 rr rr                     jsr cmpl_subroutine
001213r 3               
001213r 3                               ; Put the address of the branch address on the stack.
001213r 3  20 rr rr                     jsr xt_here
001216r 3               
001216r 3                               ; Use zero for the branch address for now.
001216r 3                               ; THEN will fill it in later.
001216r 3  20 rr rr                     jsr xt_zero
001219r 3  20 rr rr                     jsr xt_comma
00121Cr 3               
00121Cr 3                               ; Get the address to jump to (just after the
00121Cr 3                               ; unconditional branch) for the IF to jump to
00121Cr 3                               ; when false.
00121Cr 3  20 rr rr                     jsr xt_here
00121Fr 3  20 rr rr                     jsr xt_rot
001222r 3               
001222r 3                               ; Update the original if 0branch address.
001222r 3  20 rr rr                     jsr xt_store
001225r 3               z_else:
001225r 3               z_endof:
001225r 3  60                           rts
001226r 3               
001226r 3               
001226r 3               
001226r 3               branch_runtime:
001226r 3                       ; """Runtime component for a branch. Used by ELSE and ENDOF. This was
001226r 3                       ; formally part of a separate word BRANCH which was later removed.
001226r 3                       ; """
001226r 3               
001226r 3                               ; The address on the Return Stack points to the last byte
001226r 3                               ; of the JSR address, one byte below the branch literal
001226r 3  68                           pla
001227r 3  85 rr                        sta tmpbranch
001229r 3  68                           pla
00122Ar 3  85 rr                        sta tmpbranch+1
00122Cr 3               
00122Cr 3                               ; Keep in mind: the address we just popped points one byte
00122Cr 3                               ; lower than the branch literal we want to grab
00122Cr 3  A0 01                        ldy #1
00122Er 3  B1 rr                        lda (tmpbranch),y  ; LSB
001230r 3  85 rr                        sta tmp1
001232r 3  C8                           iny
001233r 3  B1 rr                        lda (tmpbranch),y  ; MSB
001235r 3  85 rr                        sta tmp1+1
001237r 3               
001237r 3  6C rr rr                     jmp (tmp1)
00123Ar 3               
00123Ar 3               
00123Ar 3               
00123Ar 3               ; ## EMIT ( char -- ) "Print character to current output"
00123Ar 3               ; ## "emit"  auto  ANS core
00123Ar 3                       ; """https://forth-standard.org/standard/core/EMIT
00123Ar 3                       ; Run-time default for EMIT. The user can revector this by changing
00123Ar 3                       ; the value of the OUTPUT variable. We ignore the MSB completely, and
00123Ar 3                       ; do not check to see if we have been given a valid ASCII character.
00123Ar 3                       ; Don't make this native compile.
00123Ar 3                       ; """
00123Ar 3               
00123Ar 3               xt_emit:
00123Ar 3  20 rr rr                     jsr underflow_1
00123Dr 3               
00123Dr 3  B5 00                        lda 0,x
00123Fr 3  E8                           inx
001240r 3  E8                           inx
001241r 3               
001241r 3               emit_a:
001241r 3                       ; We frequently want to print the character in A without fooling
001241r 3                       ; around with the Data Stack. This is emit_a's job, which still
001241r 3                       ; allows the output to be vectored. Call it with JSR as you
001241r 3                       ; would XT_EMIT
001241r 3  6C rr rr                     jmp (output)            ; JSR/RTS
001244r 3               
001244r 3               z_emit:         ; never reached
001244r 3               
001244r 3               
001244r 3               
001244r 3               ; ## EMPTY_BUFFERS ( -- ) "Empty all buffers without saving"
001244r 3               ; ## "empty-buffers"  tested  ANS block ext
001244r 3                       ; """https://forth-standard.org/standard/block/EMPTY-BUFFERS"""
001244r 3               xt_empty_buffers:
001244r 3                               ; Set the buffer status to empty.
001244r 3  A0 2C                        ldy #buffstatus_offset
001246r 3  A9 00                        lda #0
001248r 3  91 rr                        sta (up),y      ; Only LSB is used.
00124Ar 3               z_empty_buffers:
00124Ar 3  60                           rts
00124Br 3               
00124Br 3               
00124Br 3               ; ## ENDCASE (C: case-sys -- ) ( x -- ) "Conditional flow control"
00124Br 3               ; ## "endcase"  auto  ANS core ext
00124Br 3                       ; """http://forth-standard.org/standard/core/ENDCASE"""
00124Br 3               
00124Br 3               xt_endcase:
00124Br 3                               ; Postpone DROP to remove the item
00124Br 3                               ; being checked.
00124Br 3  A0 rr                        ldy #>xt_drop
00124Dr 3  A9 rr                        lda #<xt_drop
00124Fr 3  20 rr rr                     jsr cmpl_subroutine
001252r 3               
001252r 3                               ; There are a number of address (of branches that need their
001252r 3                               ; jump addressed filled in with the address of right here).
001252r 3                               ; Keep calling THEN to deal with them until we reach the
001252r 3                               ; 0 that CASE put on the stack at the beginning.
001252r 3               @endcase_loop:
001252r 3                               ; Check for 0 on the stack.
001252r 3  B5 00                        lda 0,x
001254r 3  15 01                        ora 1,x
001256r 3  F0 05                        beq @done
001258r 3               
001258r 3  20 rr rr                     jsr xt_then
00125Br 3  80 F5                        bra @endcase_loop
00125Dr 3               @done:
00125Dr 3                               ; Remove the 0 from the stack.
00125Dr 3  E8                           inx
00125Er 3  E8                           inx
00125Fr 3  60           z_endcase:      rts
001260r 3               
001260r 3               
001260r 3               
001260r 3               ; ## ENDOF (C: case-sys1 of-sys1-- case-sys2) ( -- ) "Conditional flow control"
001260r 3               ; ## "endof"  auto  ANS core ext
001260r 3                       ; """http://forth-standard.org/standard/core/ENDOF
001260r 3                       ; This is a dummy entry, the code is shared with ELSE
001260r 3                       ; """
001260r 3               
001260r 3               
001260r 3               ; ## ENVIRONMENT_Q  ( addr u -- 0 | i*x true )  "Return system information"
001260r 3               ; ## "environment?"  auto  ANS core
001260r 3                       ; """https://forth-standard.org/standard/core/ENVIRONMENTq
001260r 3                       ;
001260r 3                       ; By ANS definition, we use upper-case strings here, see the
001260r 3                       ; string file for details. This can be realized as a high-level
001260r 3                       ; Forth word as
001260r 3                       ;
001260r 3                       ; : STRING_OF POSTPONE 2OVER POSTPONE COMPARE POSTPONE 0=
001260r 3                       ;    POSTPONE IF POSTPONE 2DROP ; IMMEDIATE COMPILE-ONLY
001260r 3                       ; HEX
001260r 3                       ; : ENVIRONMENT? ( C-ADDR U -- FALSE | I*X TRUE )
001260r 3                       ; CASE
001260r 3                       ; S" /COUNTED-STRING"    STRING_OF  7FFF TRUE ENDOF
001260r 3                       ; S" /HOLD"              STRING_OF    FF TRUE ENDOF
001260r 3                       ; S" /PAD"               STRING_OF    54 TRUE ENDOF ( 84 DECIMAL )
001260r 3                       ; S" ADDRESS-UNIT-BITS"  STRING_OF     8 TRUE ENDOF
001260r 3                       ; S" FLOORED"            STRING_OF FALSE TRUE ENDOF ( WE HAVE SYMMETRIC )
001260r 3                       ; S" MAX-CHAR"           STRING_OF   255 TRUE ENDOF
001260r 3                       ; S" MAX-D"              STRING_OF
001260r 3                                                    ; 7FFFFFFF. TRUE ENDOF
001260r 3                       ; S" MAX-N"              STRING_OF  7FFF TRUE ENDOF
001260r 3                       ; S" MAX-U"              STRING_OF  FFFF TRUE ENDOF
001260r 3                       ; S" MAX-UD"             STRING_OF
001260r 3                                                    ; FFFFFFFF. TRUE ENDOF
001260r 3                       ; S" RETURN-STACK-CELLS" STRING_OF    80 TRUE ENDOF
001260r 3                       ; S" STACK-CELLS"        STRING_OF    20 TRUE ENDOF ( FROM DEFINITIONS.ASM )
001260r 3                       ; ( DEFAULT ) 2DROP FALSE FALSE ( ONE FALSE WILL DROPPED BY ENDCASE )
001260r 3                       ; ENDCASE ;
001260r 3                       ;
001260r 3                       ; but that uses lots of memory and increases the start up time. This
001260r 3                       ; word is rarely used so we can try to keep it short at the expense
001260r 3                       ; of speed.
001260r 3                       ; """
001260r 3               
001260r 3               xt_environment_q:
001260r 3  20 rr rr                     jsr underflow_1
001263r 3               
001263r 3                               ; This code is table-driven: We walk through the list of
001263r 3                               ; strings until we find one that matches, and then we take
001263r 3                               ; the equivalent data from the results table. This is made
001263r 3                               ; a bit harder by the fact that some of these return a
001263r 3                               ; double-cell number and some a single-cell one.
001263r 3               
001263r 3                               ; We will walk through the table with variables that return
001263r 3                               ; a single-cell result
001263r 3  A0 00                        ldy #00                 ; counter for table
001265r 3               
001265r 3                               ; We use a flag on the the stack to signal if we have a single-cell
001265r 3                               ; or double-cell number. We use 0 to signal single-cell and 1 for
001265r 3                               ; double-cell.
001265r 3  5A                           phy
001266r 3               @table_loop:
001266r 3                               ; We arrived here with the address of the string to be checked
001266r 3                               ; on the stack. We make a copy. Index is in Y
001266r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
001269r 3               
001269r 3                               ; We do our work on the TOS to speed things up
001269r 3  CA                           dex
00126Ar 3  CA                           dex                     ; ( addr u addr u ? )
00126Br 3               
00126Br 3                               ; Get address of string to check from table
00126Br 3  B9 rr rr                     lda env_table_single,y
00126Er 3  95 00                        sta 0,x
001270r 3  C8                           iny
001271r 3  B9 rr rr                     lda env_table_single,y
001274r 3  95 01                        sta 1,x                 ; ( addr u addr u addr-t )
001276r 3  C8                           iny
001277r 3               
001277r 3                               ; See if this is the last entry. The LSB is still in A
001277r 3  15 00                        ora 0,x
001279r 3  F0 4D                        beq @table_done
00127Br 3               
00127Br 3                               ; We have a string entry. The address there is stored in
00127Br 3                               ; old-style address format, that is, the first byte is the
00127Br 3                               ; length of the string
00127Br 3  5A                           phy                     ; save Y, which is used by COUNT
00127Cr 3  20 rr rr                     jsr xt_count            ; ( addr u addr u addr-s u-s )
00127Fr 3  20 rr rr                     jsr xt_compare          ; ( addr u f )
001282r 3  7A                           ply
001283r 3               
001283r 3                               ; If we found a match (flag is zero -- COMPARE is weird
001283r 3                               ; that way), return the result
001283r 3  B5 00                        lda 0,x
001285r 3  15 01                        ora 1,x
001287r 3  F0 04                        beq @got_result
001289r 3               
001289r 3                               ; Flag is not zero, so not a perfect match, so try next
001289r 3                               ; word
001289r 3  E8                           inx                     ; DROP, now ( addr u )
00128Ar 3  E8                           inx
00128Br 3               
00128Br 3  80 D9                        bra @table_loop
00128Dr 3               
00128Dr 3               @got_result:
00128Dr 3                               ; We arrive here with ( addr u -1 ) and know that we've found
00128Dr 3                               ; a match. The index of the match+2 is in Y.
00128Dr 3  E8                           inx                     ; drop flag, now ( addr u )
00128Er 3  E8                           inx
00128Fr 3  88                           dey                     ; go back to index we had
001290r 3  88                           dey
001291r 3               
001291r 3                               ; See if this is a single-cell word.
001291r 3  68                           pla
001292r 3  D0 0D                        bne @double_result
001294r 3               
001294r 3                               ; Single-cell result
001294r 3  B9 rr rr                     lda env_results_single,y
001297r 3  95 02                        sta 2,x
001299r 3  C8                           iny
00129Ar 3  B9 rr rr                     lda env_results_single,y
00129Dr 3  95 03                        sta 3,x                 ; ( res u )
00129Fr 3               
00129Fr 3  80 1F                        bra @set_flag
0012A1r 3               
0012A1r 3               @double_result:
0012A1r 3                               ; This is a double-celled result, which means we have to
0012A1r 3                               ; fool around with the index some more. We also need a
0012A1r 3                               ; further cell on the stack
0012A1r 3  CA                           dex                     ; ( addr u ? )
0012A2r 3  CA                           dex
0012A3r 3               
0012A3r 3                               ; We have 11 single-cell words we check, plus the 0000 as
0012A3r 3                               ; a marker for the end of the table, so we arrive here
0012A3r 3                               ; with Y as 22 or more. To get the index for the double-
0012A3r 3                               ; cell words, we move the result
0012A3r 3  98                           tya
0012A4r 3  38                           sec
0012A5r 3  E9 18                        sbc #24
0012A7r 3               
0012A7r 3                               ; We have four bytes per entry in the table, but the index
0012A7r 3                               ; keeps increasing by two, so we only have to multiply by
0012A7r 3                               ; two (shift left once) to get the right result
0012A7r 3  0A                           asl
0012A8r 3  A8                           tay
0012A9r 3               
0012A9r 3  B9 rr rr                     lda env_results_double,y
0012ACr 3  95 02                        sta 2,x
0012AEr 3  C8                           iny
0012AFr 3  B9 rr rr                     lda env_results_double,y
0012B2r 3  95 03                        sta 3,x                 ; ( res u ? )
0012B4r 3  C8                           iny
0012B5r 3               
0012B5r 3  B9 rr rr                     lda env_results_double,y
0012B8r 3  95 04                        sta 4,x
0012BAr 3  C8                           iny
0012BBr 3  B9 rr rr                     lda env_results_double,y
0012BEr 3  95 05                        sta 5,x                 ; ( res res ? )
0012C0r 3               
0012C0r 3                               ; fall through to @set_flag
0012C0r 3               @set_flag:
0012C0r 3  A9 FF                        lda #$ff
0012C2r 3  95 00                        sta 0,x
0012C4r 3  95 01                        sta 1,x                 ; ( res f )
0012C6r 3               
0012C6r 3  80 14                        bra @done
0012C8r 3               @table_done:
0012C8r 3                               ; We're done with a table, because the entry was a zero.
0012C8r 3                               ; We arrive here with ( addr u addr u 0 )
0012C8r 3               
0012C8r 3                               ; We take the flag from stack and increase it by one. If the
0012C8r 3                               ; flag is zero, we have just completed the single-cell number
0012C8r 3                               ; strings, so we in increase the flag and try again. Otherwise,
0012C8r 3                               ; we're done with the double-cell table without having found
0012C8r 3                               ; a match, and we're done
0012C8r 3  68                           pla
0012C9r 3  D0 09                        bne @no_match
0012CBr 3               
0012CBr 3                               ; Flag is zero, increase it to one and start over to check
0012CBr 3                               ; double-cell values
0012CBr 3  1A                           inc
0012CCr 3  48                           pha
0012CDr 3               
0012CDr 3  8A                           txa
0012CEr 3  18                           clc
0012CFr 3  69 06                        adc #6                  ; skip six bytes
0012D1r 3  AA                           tax                     ; ( addr u )
0012D2r 3               
0012D2r 3  80 92                        bra @table_loop
0012D4r 3               @no_match:
0012D4r 3                               ; Bummer, not found. We arrive here with
0012D4r 3                               ; ( addr u addr u 0 ) and need to return just a zero
0012D4r 3  8A                           txa
0012D5r 3  18                           clc
0012D6r 3  69 0A                        adc #10
0012D8r 3  AA                           tax                     ; ( addr ) - not ( 0 ) !
0012D9r 3               
0012D9r 3  20 rr rr                     jsr xt_false
0012DCr 3               @done:
0012DCr 3               z_environment_q:
0012DCr 3  60                           rts
0012DDr 3               
0012DDr 3               
0012DDr 3               ; Tables for ENVIRONMENT?. We use two separate ones, one for the single-cell
0012DDr 3               ; results and one for the double-celled results. The zero cell at the
0012DDr 3               ; end of each table marks its, uh, end. The strings themselves are defined
0012DDr 3               ; in strings.asm. Note if we add more entries to the single-cell table, we
0012DDr 3               ; have to adapt the result code for double printout, where we subtract 22
0012DDr 3               ; (two bytes each single-cell string and two bytes for the end-of-table
0012DDr 3               ; marker 0000
0012DDr 3               env_table_single:
0012DDr 3  rr rr rr rr          .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
0012E1r 3  rr rr rr rr  
0012E5r 3  rr rr        
0012E7r 3  rr rr rr rr          .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
0012EBr 3  rr rr rr rr  
0012EFr 3  rr rr rr rr          .word envs_sc, envs_wl, 0000
0012F3r 3  00 00        
0012F5r 3               
0012F5r 3               env_table_double:
0012F5r 3  rr rr rr rr          .word envs_max_d, envs_max_ud, 0000
0012F9r 3  00 00        
0012FBr 3               
0012FBr 3               env_results_single:
0012FBr 3  FF 7F                .word $7FFF     ; /COUNTED-STRING
0012FDr 3  FF 00                .word $00FF     ; /HOLD
0012FFr 3  54 00                .word $0054     ; /PAD (this is 84 decimal)
001301r 3  08 00                .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
001303r 3  00 00                .word 0000      ; FLOORED ("FALSE", we have symmetric)
001305r 3  FF 00                .word $00FF     ; MAX-CHAR
001307r 3  FF 7F                .word $7FFF     ; MAX-N
001309r 3  FF FF                .word $FFFF     ; MAX-U
00130Br 3  80 00                .word $0080     ; RETURN-STACK-CELLS
00130Dr 3  20 00                .word $0020     ; STACK-CELLS (from definitions.asm)
00130Fr 3  09 00                .word $0009     ; WORDLISTS
001311r 3               
001311r 3               env_results_double:
001311r 3  FF 7F FF FF          .word $7FFF, $FFFF      ; MAX-D
001315r 3  FF FF FF FF          .word $FFFF, $FFFF      ; MAX-UD
001319r 3               
001319r 3               
001319r 3               ; ## EQUAL ( n n -- f ) "See if TOS and NOS are equal"
001319r 3               ; ## "="  auto  ANS core
001319r 3                       ; """https://forth-standard.org/standard/core/Equal"""
001319r 3               
001319r 3               xt_equal:
001319r 3  20 rr rr                     jsr underflow_2
00131Cr 3               
00131Cr 3  B5 00                        lda 0,x                 ; LSB
00131Er 3  D5 02                        cmp 2,x
001320r 3  D0 0A                        bne @false
001322r 3               
001322r 3  B5 01                        lda 1,x                 ; MSB
001324r 3  D5 03                        cmp 3,x
001326r 3  D0 04                        bne @false
001328r 3               
001328r 3  A9 FF                        lda #$ff
00132Ar 3  80 02                        bra @done
00132Cr 3               
00132Cr 3  A9 00        @false:         lda #0                  ; drop thru to done
00132Er 3               
00132Er 3  95 02        @done:          sta 2,x
001330r 3  95 03                        sta 3,x
001332r 3               
001332r 3  E8                           inx
001333r 3  E8                           inx
001334r 3               
001334r 3  60           z_equal:        rts
001335r 3               
001335r 3               
001335r 3               
001335r 3               ; ## BLANK ( addr u -- ) "Fill memory region with spaces"
001335r 3               ; ## "blank"  auto  ANS string
001335r 3                       ; """https://forth-standard.org/standard/string/BLANK"""
001335r 3               xt_blank:
001335r 3                               ; We don't check for underflow here because
001335r 3                               ; we deal with that in FILL
001335r 3  CA                           dex
001336r 3  CA                           dex
001337r 3  A9 20                        lda #AscSP
001339r 3  95 00                        sta 0,x
00133Br 3  74 01                        stz 1,x
00133Dr 3               
00133Dr 3  80 06                        bra xt_fill     ; skip over code for ERASE
00133Fr 3               
00133Fr 3               
00133Fr 3               ; ## ERASE ( addr u -- ) "Fill memory region with zeros"
00133Fr 3               ; ## "erase"  auto  ANS core ext
00133Fr 3                       ; """https://forth-standard.org/standard/core/ERASE
00133Fr 3                       ; Note that ERASE works with "address" units
00133Fr 3                       ; (bytes), not cells.
00133Fr 3                       ; """
00133Fr 3               
00133Fr 3               xt_erase:
00133Fr 3                               ; We don't check for underflow here because
00133Fr 3                               ; we deal with that in FILL
00133Fr 3  CA                           dex
001340r 3  CA                           dex
001341r 3  74 00                        stz 0,x
001343r 3  74 01                        stz 1,x
001345r 3               
001345r 3                               ; fall through to FILL
001345r 3               
001345r 3               ; ## FILL ( addr u char -- ) "Fill a memory region with a character"
001345r 3               ; ## "fill"  auto  ANS core
001345r 3                       ; """https://forth-standard.org/standard/core/FILL
001345r 3                       ; Fill u bytes of memory with char starting at addr. Note that
001345r 3                       ; this works on bytes, not on cells. On an 8-bit machine such as the
001345r 3                       ; 65c02, this is a serious pain in the rear. It is not defined what
001345r 3                       ; happens when we reach the end of the address space
001345r 3                       ; """
001345r 3               xt_fill:
001345r 3  20 rr rr                     jsr underflow_3
001348r 3               
001348r 3                               ; We use tmp1 to hold the address
001348r 3  B5 04                        lda 4,x         ; LSB
00134Ar 3  85 rr                        sta tmp1
00134Cr 3  B5 05                        lda 5,x
00134Er 3  85 rr                        sta tmp1+1
001350r 3               
001350r 3                               ; We use tmp2 to hold the counter
001350r 3  B5 02                        lda 2,x
001352r 3  85 rr                        sta tmp2
001354r 3  B5 03                        lda 3,x
001356r 3  85 rr                        sta tmp2+1
001358r 3               
001358r 3                               ; We use Y to hold the character
001358r 3  B5 00                        lda 0,x
00135Ar 3  A8                           tay
00135Br 3               @loop:
00135Br 3                               ; Unfortunately, we also need to make sure that we don't
00135Br 3                               ; write further than the end of the RAM. So RAM_END must
00135Br 3                               ; be larger or equal to the current address
00135Br 3  A9 80                        lda #>ram_end           ; MSB
00135Dr 3  C5 rr                        cmp tmp1+1
00135Fr 3  90 21                        bcc @done               ; RAM_END < TMP1, so leave
001361r 3  D0 06                        bne @check_counter      ; RAM_END is not smaller and not equal
001363r 3               
001363r 3  A9 00                        lda #<ram_end           ; LSB, because MSBs were equal
001365r 3  C5 rr                        cmp tmp1
001367r 3  90 19                        bcc @done               ; RAM_END < TMP1, so leave
001369r 3               
001369r 3               @check_counter:
001369r 3                               ; See if our counter has reached zero
001369r 3  A5 rr                        lda tmp2
00136Br 3  05 rr                        ora tmp2+1
00136Dr 3  F0 13                        beq @done
00136Fr 3               
00136Fr 3                               ; We're not in ROM and we still have stuff on the counter, so
00136Fr 3                               ; let's actually do what we came here to do
00136Fr 3  98                           tya
001370r 3  92 rr                        sta (tmp1)
001372r 3               
001372r 3                               ; Adjust the counter
001372r 3  A5 rr                        lda tmp2
001374r 3  D0 02                        bne @1
001376r 3  C6 rr                        dec tmp2+1
001378r 3  C6 rr        @1:               dec tmp2
00137Ar 3               
00137Ar 3                               ; Next address
00137Ar 3  E6 rr                        inc tmp1
00137Cr 3  D0 DD                        bne @loop
00137Er 3  E6 rr                        inc tmp1+1
001380r 3               
001380r 3  80 D9                        bra @loop
001382r 3               
001382r 3               @done:
001382r 3                               ; Drop three cells off the Data Stack. This uses one byte
001382r 3                               ; less than six times INX
001382r 3  8A                           txa
001383r 3  18                           clc
001384r 3  69 06                        adc #6
001386r 3  AA                           tax
001387r 3               z_blank:
001387r 3               z_erase:
001387r 3  60           z_fill:         rts
001388r 3               
001388r 3               
001388r 3               
001388r 3               ; ## EXECUTE ( xt -- ) "Jump to word based on execution token"
001388r 3               ; ## "execute"  auto  ANS core
001388r 3                       ; """https://forth-standard.org/standard/core/EXECUTE"""
001388r 3               xt_execute:
001388r 3  20 rr rr                     jsr underflow_1
00138Br 3               
00138Br 3  20 rr rr                     jsr doexecute   ; do not combine to JMP (native coding)
00138Er 3               
00138Er 3  60           z_execute:      rts
00138Fr 3               
00138Fr 3               doexecute:
00138Fr 3  B5 00                        lda 0,x
001391r 3  85 rr                        sta ip
001393r 3  B5 01                        lda 1,x
001395r 3  85 rr                        sta ip+1
001397r 3               
001397r 3  E8                           inx
001398r 3  E8                           inx
001399r 3               
001399r 3                               ; we don't need a RTS here because we highjack the RTS of
001399r 3                               ; the word we're calling to get back to xt_execute
001399r 3  6C rr rr                     jmp (ip)
00139Cr 3               
00139Cr 3               ; end of doexecute
00139Cr 3               
00139Cr 3               
00139Cr 3               ; ## EXECUTE_PARSING ( addr u xt -- ) "Pass a string to a parsing word"
00139Cr 3               ; ## "execute-parsing"  auto  Gforth
00139Cr 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
00139Cr 3                       ; Execute the parsing word defined by the execution token (xt) on the
00139Cr 3                       ; string as if it were passed on the command line. See the file
00139Cr 3                       ; tests/tali.fs for examples.
00139Cr 3                       ;
00139Cr 3                       ; Note that this word is coded completely
00139Cr 3                       ; different in its Gforth version, see the file execute-parsing.fs
00139Cr 3                       ; (in /usr/share/gforth/0.7.3/compat/ on Ubuntu 18.04 LTS) for details.
00139Cr 3                       ; """
00139Cr 3               xt_execute_parsing:
00139Cr 3  20 rr rr                     jsr underflow_3
00139Fr 3               
00139Fr 3  20 rr rr                     jsr xt_input_to_r       ; save normal input for later
0013A2r 3  20 rr rr                     jsr xt_not_rote         ; -ROT ( xt addr u )
0013A5r 3               
0013A5r 3  B5 00                        lda 0,x                 ; TOS is new ciblen
0013A7r 3  85 rr                        sta ciblen
0013A9r 3  B5 01                        lda 1,x
0013ABr 3  85 rr                        sta ciblen+1
0013ADr 3               
0013ADr 3  B5 02                        lda 2,x                 ; NOS is new cib
0013AFr 3  85 rr                        sta cib
0013B1r 3  B5 03                        lda 3,x
0013B3r 3  85 rr                        sta cib+1
0013B5r 3               
0013B5r 3  64 rr                        stz toin                ; Set >IN to zero
0013B7r 3  64 rr                        stz toin+1
0013B9r 3               
0013B9r 3  20 rr rr                     jsr xt_two_drop         ; 2DROP ( xt )
0013BCr 3  20 rr rr                     jsr xt_execute
0013BFr 3               
0013BFr 3  20 rr rr                     jsr xt_r_to_input
0013C2r 3               
0013C2r 3               z_execute_parsing:
0013C2r 3  60                           rts
0013C3r 3               
0013C3r 3               
0013C3r 3               ; ## EXIT ( -- ) "Return control to the calling word immediately"
0013C3r 3               ; ## "exit"  auto  ANS core
0013C3r 3                       ; """https://forth-standard.org/standard/core/EXIT
0013C3r 3                       ; If we're in a loop, we need to UNLOOP first and get everything
0013C3r 3                       ; we we might have put on the Return Stack off as well. This should
0013C3r 3                       ; be natively compiled.
0013C3r 3                       ; """
0013C3r 3               
0013C3r 3               xt_exit:
0013C3r 3  60                           rts             ; keep before z_exit
0013C4r 3               z_exit:                         ; never reached
0013C4r 3               
0013C4r 3               
0013C4r 3               
0013C4r 3               ; ## FALSE ( -- f ) "Push flag FALSE to Data Stack"
0013C4r 3               ; ## "false"  auto  ANS core ext
0013C4r 3                       ; """https://forth-standard.org/standard/core/FALSE"""
0013C4r 3               xt_false:
0013C4r 3  CA                           dex
0013C5r 3  CA                           dex
0013C6r 3  74 00                        stz 0,x
0013C8r 3  74 01                        stz 1,x
0013CAr 3               
0013CAr 3  60           z_false:        rts
0013CBr 3               
0013CBr 3               
0013CBr 3               ; ## FETCH ( addr -- n ) "Push cell content from memory to stack"
0013CBr 3               ; ## "@"  auto  ANS core
0013CBr 3                       ; """https://forth-standard.org/standard/core/Fetch"""
0013CBr 3               xt_fetch:
0013CBr 3  20 rr rr                     jsr underflow_1
0013CEr 3               
0013CEr 3  A1 00                        lda (0,x)               ; LSB
0013D0r 3  A8                           tay
0013D1r 3  F6 00                        inc 0,x
0013D3r 3  D0 02                        bne @1
0013D5r 3  F6 01                        inc 1,x
0013D7r 3               @1:
0013D7r 3  A1 00                        lda (0,x)               ; MSB
0013D9r 3  95 01                        sta 1,x
0013DBr 3  94 00                        sty 0,x
0013DDr 3               
0013DDr 3  60           z_fetch:        rts
0013DEr 3               
0013DEr 3               
0013DEr 3               ; ## FIND ( caddr -- addr 0 | xt 1 | xt -1 ) "Find word in Dictionary"
0013DEr 3               ; ## "find"  auto  ANS core
0013DEr 3                       ; """https://forth-standard.org/standard/core/FIND
0013DEr 3                       ; Included for backwards compatibility only, because it still
0013DEr 3                       ; can be found in so may examples. It should, however, be replaced
0013DEr 3                       ; by FIND-NAME. Counted string either returns address with a FALSE
0013DEr 3                       ; flag if not found in the Dictionary, or the xt with a flag to
0013DEr 3                       ; indicate if this is immediate or not. FIND is a wrapper around
0013DEr 3                       ; FIND-NAME, we get this all over with as quickly as possible. See
0013DEr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
0013DEr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0013DEr 3                       ; """
0013DEr 3               
0013DEr 3               xt_find:
0013DEr 3  20 rr rr                     jsr underflow_1
0013E1r 3               
0013E1r 3                               ; Save address in case conversion fails. We use the
0013E1r 3                               ; Return Stack instead of temporary variables like TMP1
0013E1r 3                               ; because this is shorter and anybody still using FIND
0013E1r 3                               ; can't be worried about speed anyway
0013E1r 3  B5 01                        lda 1,x                 ; MSB
0013E3r 3  48                           pha
0013E4r 3  B5 00                        lda 0,x                 ; LSB
0013E6r 3  48                           pha
0013E7r 3               
0013E7r 3                               ; Convert ancient-type counted string address to
0013E7r 3                               ; modern format
0013E7r 3  20 rr rr                     jsr xt_count            ; ( caddr -- addr u )
0013EAr 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt | 0 )
0013EDr 3               
0013EDr 3  B5 00                        lda 0,x
0013EFr 3  15 01                        ora 1,x
0013F1r 3  D0 0B                        bne @found_word
0013F3r 3               
0013F3r 3                               ; No word found. Return address of the string and a false
0013F3r 3                               ; flag
0013F3r 3  20 rr rr                     jsr xt_false            ; ( 0 0 )
0013F6r 3               
0013F6r 3                               ; The address needs to be restored.
0013F6r 3  68                           pla                     ; LSB of address
0013F7r 3  95 02                        sta 2,x
0013F9r 3  68                           pla
0013FAr 3  95 03                        sta 3,x                 ; MSB of address
0013FCr 3               
0013FCr 3  80 27                        bra @done               ; ( addr 0 )
0013FEr 3               
0013FEr 3               @found_word:
0013FEr 3                               ; We don't need the address after all, dump it
0013FEr 3  68                           pla
0013FFr 3  68                           pla
001400r 3               
001400r 3                               ; We arrive here with ( nt ) on the TOS. Now we have to
001400r 3                               ; convert the return values to FIND's format
001400r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001403r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001406r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001409r 3               
001409r 3  A0 00                        ldy #0                  ; Prepare flag
00140Br 3               
00140Br 3                               ; The flags are in the second byte of the header
00140Br 3  F6 00                        inc 0,x
00140Dr 3  D0 02                        bne @1
00140Fr 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
001411r 3               @1:
001411r 3  A1 00                        lda (0,x)               ; ( xt char )
001413r 3  29 04                        and #IM
001415r 3  D0 08                        bne @immediate          ; bit set, we're immediate
001417r 3               
001417r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
001419r 3  95 00                        sta 0,x
00141Br 3  95 01                        sta 1,x
00141Dr 3  80 06                        bra @done
00141Fr 3               
00141Fr 3               @immediate:
00141Fr 3  A9 01                        lda #1                  ; We're immediate, return 1
001421r 3  95 00                        sta 0,x
001423r 3  74 01                        stz 1,x
001425r 3               @done:
001425r 3  60           z_find:         rts
001426r 3               
001426r 3               
001426r 3               
001426r 3               ; ## FIND_NAME ( addr u -- nt|0 ) "Get the name token of input word"
001426r 3               ; ## "find-name"  auto  Gforth
001426r 3               
001426r 3               xt_find_name:
001426r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001426r 3                       ; Given a string, find the Name Token (nt) of a word or return
001426r 3                       ; zero if the word is not in the dictionary. We use this instead of
001426r 3                       ; ancient FIND to look up words in the Dictionary passed by
001426r 3                       ; PARSE-NAME. Note this returns the nt, not the xt of a word like
001426r 3                       ; FIND. To convert, use NAME>INT. This is a Gforth word. See
001426r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001426r 3                       ; FIND calls this word
001426r 3                       ; """
001426r 3  20 rr rr                     jsr underflow_2
001429r 3               
001429r 3                               ; check for special case of an empty string (length zero)
001429r 3  B5 00                        lda 0,x
00142Br 3  15 01                        ora 1,x
00142Dr 3  D0 03                        bne @nonempty
00142Fr 3               
00142Fr 3  4C rr rr                     jmp @fail_done
001432r 3               
001432r 3               @nonempty:
001432r 3                               ; Set up for traversing the wordlist search order.
001432r 3  64 rr                        stz tmp3                ; Start at the beginning
001434r 3               
001434r 3               @wordlist_loop:
001434r 3  A0 1E                        ldy #num_order_offset   ; Compare to byte variable #ORDER
001436r 3  A5 rr                        lda tmp3
001438r 3  D1 rr                        cmp (up),y              ; Check to see if we are done
00143Ar 3  D0 03                        bne @have_string
00143Cr 3               
00143Cr 3                               ; We ran out of wordlists to search.
00143Cr 3  4C rr rr                     jmp @fail_done
00143Fr 3               
00143Fr 3               @have_string:
00143Fr 3                               ; set up first loop iteration
00143Fr 3               
00143Fr 3                               ; Get the current wordlist id
00143Fr 3  18                           clc             ; SEARCH-ORDER is array of bytes.
001440r 3  69 1F                        adc #search_order_offset
001442r 3  A8                           tay
001443r 3  B1 rr                        lda (up),y      ; Get the id byte, which is the offset
001445r 3                                               ; into the cell array WORDLISTS
001445r 3               
001445r 3                               ; Get the DP for that wordlist.
001445r 3  0A                           asl                     ; Turn offset into cells offset.
001446r 3  18                           clc
001447r 3  69 06                        adc #wordlists_offset
001449r 3  A8                           tay
00144Ar 3  B1 rr                        lda (up),y
00144Cr 3  85 rr                        sta tmp1
00144Er 3  C8                           iny
00144Fr 3  B1 rr                        lda (up),y
001451r 3  85 rr                        sta tmp1+1
001453r 3               
001453r 3  B5 02                        lda 2,x                 ; Address of mystery string
001455r 3  85 rr                        sta tmp2
001457r 3  B5 03                        lda 3,x
001459r 3  85 rr                        sta tmp2+1
00145Br 3               
00145Br 3               @loop:
00145Br 3                               ; first quick test: Are strings the same length?
00145Br 3  B2 rr                        lda (tmp1)
00145Dr 3  D5 00                        cmp 0,x
00145Fr 3  D0 54                        bne @next_entry
001461r 3               
001461r 3               @compare_string:
001461r 3                               ; are the same length, so we now have to compare each
001461r 3                               ; character
001461r 3               
001461r 3                               ; second quick test: Is the first character the same?
001461r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
001463r 3               
001463r 3                               ; Lowercase the incoming charcter.
001463r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
001465r 3  B0 07                        bcs @compare_first
001467r 3  C9 41                        cmp #$41        ; ASCII 'A'
001469r 3  90 03                        bcc @compare_first
00146Br 3               
00146Br 3                               ; An uppercase letter has been located.  Make it
00146Br 3                               ; lowercase.
00146Br 3  18                           clc
00146Cr 3  69 20                        adc #$20
00146Er 3               
00146Er 3               @compare_first:
00146Er 3  A0 08                        ldy #8          ; Offset in nt to name
001470r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
001472r 3  D0 41                        bne @next_entry
001474r 3               
001474r 3                               ; String length is the same and the first character is the
001474r 3                               ; same. If the length of the string is 1, we're already done
001474r 3  B5 00                        lda 0,x
001476r 3  3A                           dec
001477r 3  F0 2C                        beq @success
001479r 3               
001479r 3                               ; No such luck: The strings are the same length and the first
001479r 3                               ; char is the same, but the word is more than one char long.
001479r 3                               ; So we suck it up and compare every single character. We go
001479r 3                               ; from back to front, because words like CELLS and CELL+ would
001479r 3                               ; take longer otherwise. We can also shorten the loop by one
001479r 3                               ; because we've already compared the first char.
001479r 3               
001479r 3                               ; The string of the word we're testing against is 8 bytes down
001479r 3  A5 rr                        lda tmp1
00147Br 3  48                           pha             ; Preserve tmp1 on the return stack.
00147Cr 3  18                           clc
00147Dr 3  69 08                        adc #8
00147Fr 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
001481r 3  A5 rr                        lda tmp1+1
001483r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
001484r 3  69 00                        adc #0          ; we only need the carry
001486r 3  85 rr                        sta tmp1+1
001488r 3               
001488r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
00148Ar 3  88                           dey
00148Br 3               
00148Br 3               @string_loop:
00148Br 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
00148Dr 3               
00148Dr 3                               ; Lowercase the incoming charcter.
00148Dr 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
00148Fr 3  B0 07                        bcs @check_char
001491r 3  C9 41                        cmp #$41        ; ASCII 'A'
001493r 3  90 03                        bcc @check_char
001495r 3               
001495r 3                               ; An uppercase letter has been located.  Make it
001495r 3                               ; lowercase.
001495r 3  18                           clc
001496r 3  69 20                        adc #$20
001498r 3               
001498r 3               @check_char:
001498r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
00149Ar 3  D0 13                        bne @next_entry_tmp1
00149Cr 3               
00149Cr 3  88                           dey
00149Dr 3  D0 EC                        bne @string_loop
00149Fr 3               
00149Fr 3               @success_tmp1:
00149Fr 3  68                           pla             ; Restore tmp1 from the return stack.
0014A0r 3  85 rr                        sta tmp1+1
0014A2r 3  68                           pla
0014A3r 3  85 rr                        sta tmp1
0014A5r 3               
0014A5r 3               @success:
0014A5r 3                               ; The strings match. Put correct nt NOS, because we'll drop
0014A5r 3                               ; TOS before we leave
0014A5r 3  A5 rr                        lda tmp1
0014A7r 3  95 02                        sta 2,x
0014A9r 3  A5 rr                        lda tmp1+1
0014ABr 3  95 03                        sta 3,x
0014ADr 3               
0014ADr 3  80 20                        bra @done
0014AFr 3               
0014AFr 3               @next_entry_tmp1:
0014AFr 3  68                           pla             ; Restore tmp1 from the return stack.
0014B0r 3  85 rr                        sta tmp1+1
0014B2r 3  68                           pla
0014B3r 3  85 rr                        sta tmp1
0014B5r 3               
0014B5r 3               @next_entry:
0014B5r 3                               ; Not the same, so we get the next word. Next header
0014B5r 3                               ; address is two bytes down
0014B5r 3  A0 02                        ldy #2
0014B7r 3  B1 rr                        lda (tmp1),y
0014B9r 3  48                           pha
0014BAr 3  C8                           iny
0014BBr 3  B1 rr                        lda (tmp1),y
0014BDr 3  85 rr                        sta tmp1+1
0014BFr 3  68                           pla
0014C0r 3  85 rr                        sta tmp1
0014C2r 3               
0014C2r 3                               ; If we got a zero, we've walked the whole Dictionary and
0014C2r 3                               ; return as a failure, otherwise try again
0014C2r 3  05 rr                        ora tmp1+1
0014C4r 3  D0 95                        bne @loop
0014C6r 3               
0014C6r 3                               ; Move on to the next wordlist in the search order.
0014C6r 3  E6 rr                        inc tmp3
0014C8r 3  4C rr rr                     jmp @wordlist_loop
0014CBr 3               
0014CBr 3               @fail_done:
0014CBr 3  74 02                        stz 2,x         ; failure flag
0014CDr 3  74 03                        stz 3,x
0014CFr 3               @done:
0014CFr 3  E8                           inx
0014D0r 3  E8                           inx
0014D1r 3               
0014D1r 3  60           z_find_name:    rts
0014D2r 3               
0014D2r 3               
0014D2r 3               
0014D2r 3               ; ## FLUSH ( -- ) "Save dirty buffers and empty buffers"
0014D2r 3               ; ## "flush"  auto  ANS block
0014D2r 3                       ; """https://forth-standard.org/standard/block/FLUSH"""
0014D2r 3               xt_flush:
0014D2r 3  20 rr rr                     jsr xt_save_buffers
0014D5r 3               
0014D5r 3                               ; Set the buffer status to empty.
0014D5r 3  A0 2C                        ldy #buffstatus_offset
0014D7r 3  A9 00                        lda #0
0014D9r 3  91 rr                        sta (up),y      ; Only LSB is used.
0014DBr 3               z_flush:
0014DBr 3  60                           rts
0014DCr 3               
0014DCr 3               
0014DCr 3               ; ## FM_SLASH_MOD ( d n1  -- rem n2 ) "Floored signed division"
0014DCr 3               ; ## "fm/mod"  auto  ANS core
0014DCr 3                       ; """https://forth-standard.org/standard/core/FMDivMOD
0014DCr 3                       ; Note that by default, Tali Forth uses SM/REM for most things.
0014DCr 3                       ;
0014DCr 3                       ; There are various ways to realize this. We follow EForth with
0014DCr 3                       ;    DUP 0< DUP >R  IF NEGATE >R DNEGATE R> THEN >R DUP
0014DCr 3                       ;    0<  IF R@ + THEN  R> UM/MOD R> IF SWAP NEGATE SWAP THEN
0014DCr 3                       ; See (http://www.forth.org/eforth.html). However you can also
0014DCr 3                       ; go FM/MOD via SM/REM (http://www.figuk.plus.com/build/arith.htm):
0014DCr 3                       ;     DUP >R  SM/REM DUP 0< IF SWAP R> + SWAP 1+ ELSE  R> DROP THEN
0014DCr 3                       ; """
0014DCr 3               
0014DCr 3               xt_fm_slash_mod:
0014DCr 3  20 rr rr                     jsr underflow_3
0014DFr 3               
0014DFr 3                               ; if sign of n1 is negative, negate both n1 and d
0014DFr 3  64 rr                        stz tmp2        ; default: n is positive
0014E1r 3  B5 01                        lda 1,x         ; MSB of n1
0014E3r 3  10 0E                        bpl @check_d
0014E5r 3               
0014E5r 3  E6 rr                        inc tmp2        ; set flag to negative for n1
0014E7r 3  20 rr rr                     jsr xt_negate   ; NEGATE
0014EAr 3  20 rr rr                     jsr xt_to_r     ; >R
0014EDr 3  20 rr rr                     jsr xt_dnegate  ; DNEGATE
0014F0r 3  20 rr rr                     jsr xt_r_from   ; R>
0014F3r 3               
0014F3r 3               @check_d:
0014F3r 3                               ; If d is negative, add n1 to high cell of d
0014F3r 3  B5 03                        lda 3,x         ; MSB of high word of d
0014F5r 3  10 0D                        bpl @multiply
0014F7r 3               
0014F7r 3  18                           clc
0014F8r 3  B5 00                        lda 0,x         ; LSB of n1
0014FAr 3  75 02                        adc 2,x         ; LSB of dh
0014FCr 3  95 02                        sta 2,x
0014FEr 3               
0014FEr 3  B5 01                        lda 1,x         ; MSB of n1
001500r 3  75 03                        adc 3,x         ; MSB of dh
001502r 3  95 03                        sta 3,x
001504r 3               
001504r 3               @multiply:
001504r 3  20 rr rr                     jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
001507r 3               
001507r 3                               ; if n was negative, negate the result
001507r 3  A5 rr                        lda tmp2
001509r 3  F0 07                        beq @done
00150Br 3               
00150Br 3  E8                           inx             ; pretend that we SWAP
00150Cr 3  E8                           inx
00150Dr 3  20 rr rr                     jsr xt_negate
001510r 3  CA                           dex
001511r 3  CA                           dex
001512r 3               @done:
001512r 3  60           z_fm_slash_mod: rts
001513r 3               
001513r 3               
001513r 3               
001513r 3               ; ## FORTH ( -- ) "Replace first WID in search order with Forth-Wordlist"
001513r 3               ; ## "forth"  auto  ANS search ext
001513r 3                       ; """https://forth-standard.org/standard/search/FORTH"""
001513r 3               xt_forth:
001513r 3  A0 1F                        ldy #search_order_offset
001515r 3  A9 00                        lda #0          ; The WID for Forth is 0.
001517r 3               
001517r 3  91 rr                        sta (up),y
001519r 3               z_forth:
001519r 3  60                           rts
00151Ar 3               
00151Ar 3               
00151Ar 3               ; This is a special jsr target to skip the zeroing of BLK at the beginning
00151Ar 3               ; of evaluate.  It's used by LOAD to allow setting BLK while the block is
00151Ar 3               ; being evaluated.  Evaluate's normal behavior is to zero BLK.
00151Ar 3               load_evaluate:
00151Ar 3                               ; Set a flag (using tmp1) to not zero BLK
00151Ar 3  A9 FF                        lda #$FF
00151Cr 3  85 rr                        sta tmp1
00151Er 3  80 11                        bra load_evaluate_start
001520r 3               
001520r 3               ; ## EVALUATE ( addr u -- ) "Execute a string"
001520r 3               ; ## "evaluate"  auto  ANS core
001520r 3                       ; """https://forth-standard.org/standard/core/EVALUATE
001520r 3                       ; Set SOURCE-ID to -1, make addr u the input source, set >IN to zero.
001520r 3                       ; After processing the line, revert to old input source. We use this
001520r 3                       ; to compile high-level Forth words and user-defined words during
001520r 3                       ; start up and cold boot. In contrast to ACCEPT, we need to, uh,
001520r 3                       ; accept more than 255 characters here, even though it's a pain in
001520r 3                       ; the 8-bit.
001520r 3                       ; """
001520r 3               
001520r 3               xt_evaluate:
001520r 3  20 rr rr                     jsr underflow_2
001523r 3               
001523r 3                               ; Clear the flag to zero BLK.  Only LOAD will set the flag,
001523r 3                               ; and will set the block number.
001523r 3  64 rr                        stz tmp1
001525r 3               
001525r 3                               ; If u is zero (which can happen a lot for the user-defined
001525r 3                               ; words), just leave again
001525r 3  B5 00                        lda 0,x
001527r 3  15 01                        ora 1,x
001529r 3  D0 06                        bne _eval_got_work
00152Br 3               
00152Br 3  E8                           inx
00152Cr 3  E8                           inx
00152Dr 3  E8                           inx
00152Er 3  E8                           inx
00152Fr 3               
00152Fr 3  80 42                        bra _eval_done
001531r 3               
001531r 3               ; Special entry point for LOAD to bypass the zeroing of BLK.
001531r 3               load_evaluate_start:
001531r 3               _eval_got_work:
001531r 3                               ; Save the current value of BLK on the return stack.
001531r 3  A0 01                        ldy #blk_offset+1
001533r 3  B1 rr                        lda (up),y
001535r 3  48                           pha
001536r 3  88                           dey
001537r 3  B1 rr                        lda (up),y
001539r 3  48                           pha
00153Ar 3               
00153Ar 3                               ; See if we should zero BLK.
00153Ar 3  A5 rr                        lda tmp1
00153Cr 3  D0 05                        bne @nozero
00153Er 3               
00153Er 3                               ; Set BLK to zero.
00153Er 3                               ; lda #0        ; A is already zero from loading tmp1
00153Er 3  91 rr                        sta (up),y
001540r 3  C8                           iny
001541r 3  91 rr                        sta (up),y
001543r 3               
001543r 3               @nozero:
001543r 3                               ; Save the input state to the Return Stack
001543r 3  20 rr rr                     jsr xt_input_to_r
001546r 3               
001546r 3                               ; set SOURCE-ID to -1
001546r 3  A9 FF                        lda #$ff
001548r 3  85 rr                        sta insrc
00154Ar 3  85 rr                        sta insrc+1
00154Cr 3               
00154Cr 3                               ; set >IN to zero
00154Cr 3  64 rr                        stz toin
00154Er 3  64 rr                        stz toin+1
001550r 3               
001550r 3                               ; move TOS and NOS to input buffers
001550r 3  B5 00                        lda 0,x
001552r 3  85 rr                        sta ciblen
001554r 3  B5 01                        lda 1,x
001556r 3  85 rr                        sta ciblen+1
001558r 3               
001558r 3  B5 02                        lda 2,x
00155Ar 3  85 rr                        sta cib
00155Cr 3  B5 03                        lda 3,x
00155Er 3  85 rr                        sta cib+1
001560r 3               
001560r 3  E8                           inx             ; A clean stack is a clean mind
001561r 3  E8                           inx
001562r 3  E8                           inx
001563r 3  E8                           inx
001564r 3               
001564r 3  20 rr rr                     jsr interpret   ; ( -- )
001567r 3               
001567r 3                               ; restore variables
001567r 3  20 rr rr                     jsr xt_r_to_input
00156Ar 3               
00156Ar 3                               ; Restore BLK from the return stack.
00156Ar 3  A0 00                        ldy #blk_offset
00156Cr 3  68                           pla
00156Dr 3  91 rr                        sta (up),y
00156Fr 3  C8                           iny
001570r 3  68                           pla
001571r 3  91 rr                        sta (up),y
001573r 3               
001573r 3               _eval_done:
001573r 3  60           z_evaluate:     rts
001574r 3               
001574r 3               
001574r 3               
001574r 3               ; ## FORTH_WORDLIST ( -- u ) "WID for the Forth Wordlist"
001574r 3               ; ## "forth-wordlist"  auto  ANS search
001574r 3                       ; """https://forth-standard.org/standard/search/FORTH-WORDLIST"""
001574r 3                       ; This is a dummy entry, the actual code is shared with ZERO.
001574r 3               
001574r 3               
001574r 3               ; ## GET_CURRENT ( -- wid ) "Get the id of the compilation wordlist"
001574r 3               ; ## "get-current" auto ANS search
001574r 3                       ; """https://forth-standard.org/standard/search/GET-CURRENT"""
001574r 3               
001574r 3               xt_get_current:
001574r 3                               ; This is a little different than some of the variables
001574r 3                               ; in the user area as we want the value rather than
001574r 3                               ; the address.
001574r 3  CA                           dex
001575r 3  CA                           dex
001576r 3  A0 04                        ldy #current_offset
001578r 3  B1 rr                        lda (up),y
00157Ar 3  95 00                        sta 0,x         ; CURRENT is a byte variable
00157Cr 3  74 01                        stz 1,x         ; so the MSB is zero.
00157Er 3               
00157Er 3  60           z_get_current:  rts
00157Fr 3               
00157Fr 3               
00157Fr 3               
00157Fr 3               ; ## GET_ORDER ( -- wid_n .. wid_1 n) "Get the current search order"
00157Fr 3               ; ## "get-order" auto ANS search
00157Fr 3                       ; """https://forth-standard.org/standard/search/GET-ORDER"""
00157Fr 3               
00157Fr 3               xt_get_order:
00157Fr 3                               ; Get #ORDER - the number of wordlists in the search order.
00157Fr 3  A0 1E                        ldy #num_order_offset
001581r 3  B1 rr                        lda (up),y
001583r 3  85 rr                        sta tmp1
001585r 3  F0 16                        beq @done       ; If zero, there are no wordlists.
001587r 3               
001587r 3               @loop:
001587r 3                               ; Count down towards the front of the list.
001587r 3                               ; By decrementing first, we also turn the length into an offset.
001587r 3  C6 rr                        dec tmp1        ; Count down by bytes.
001589r 3               
001589r 3                               ; Get a pointer to the current wordlist, working back to front.
001589r 3  A9 1F                        lda #search_order_offset
00158Br 3  18                           clc
00158Cr 3  65 rr                        adc tmp1
00158Er 3  A8                           tay
00158Fr 3               
00158Fr 3                               ; Put that wordlist id on the stack.
00158Fr 3  CA                           dex
001590r 3  CA                           dex
001591r 3  B1 rr                        lda (up),y
001593r 3  95 00                        sta 0,x         ; Search order array is bytes, so
001595r 3  74 01                        stz 1,x         ; put a zero in the high byte.
001597r 3               
001597r 3                               ; See if that was the last one to process (first in the list).
001597r 3  A9 00                        lda #0
001599r 3  C5 rr                        cmp tmp1
00159Br 3  D0 EA                        bne @loop
00159Dr 3               
00159Dr 3               @done:
00159Dr 3                               ; Put the number of items on the stack.
00159Dr 3  CA                           dex
00159Er 3  CA                           dex
00159Fr 3  A0 1E                        ldy #num_order_offset
0015A1r 3  B1 rr                        lda (up),y
0015A3r 3  95 00                        sta 0,x
0015A5r 3  74 01                        stz 1,x         ; We only support 8 wordlists.
0015A7r 3               
0015A7r 3  60           z_get_order:    rts
0015A8r 3               
0015A8r 3               
0015A8r 3               
0015A8r 3               ; ## GREATER_THAN ( n n -- f ) "See if NOS is greater than TOS"
0015A8r 3               ; ## ">"  auto  ANS core
0015A8r 3                       ; """https://forth-standard.org/standard/core/more"""
0015A8r 3               
0015A8r 3               xt_greater_than:
0015A8r 3  20 rr rr                     jsr underflow_2
0015ABr 3               
0015ABr 3  A0 00                        ldy #0          ; default false
0015ADr 3  20 rr rr                     jsr compare_16bit
0015B0r 3               
0015B0r 3                               ; for signed numbers, NOS>TOS gives us Z=0 and N=1
0015B0r 3  F0 03                        beq @false
0015B2r 3  10 01                        bpl @false
0015B4r 3               
0015B4r 3                               ; true
0015B4r 3  88                           dey
0015B5r 3               @false:
0015B5r 3  98                           tya
0015B6r 3               
0015B6r 3  E8                           inx
0015B7r 3  E8                           inx
0015B8r 3  95 00                        sta 0,x
0015BAr 3  95 01                        sta 1,x
0015BCr 3               
0015BCr 3  60           z_greater_than: rts
0015BDr 3               
0015BDr 3               
0015BDr 3               
0015BDr 3               ; ## HERE ( -- addr ) "Put Compiler Pointer on Data Stack"
0015BDr 3               ; ## "here"  auto  ANS core
0015BDr 3                       ; """https://forth-standard.org/standard/core/HERE
0015BDr 3                       ; This code is also used by the assembler directive ARROW
0015BDr 3                       ; ("->") though as immediate"""
0015BDr 3               xt_here:
0015BDr 3               xt_asm_arrow:
0015BDr 3  CA                           dex
0015BEr 3  CA                           dex
0015BFr 3  A5 rr                        lda cp
0015C1r 3  95 00                        sta 0,x
0015C3r 3  A5 rr                        lda cp+1
0015C5r 3  95 01                        sta 1,x
0015C7r 3               
0015C7r 3               z_asm_arrow:
0015C7r 3  60           z_here:         rts
0015C8r 3               
0015C8r 3               
0015C8r 3               ; ## HEX ( -- ) "Change base radix to hexadecimal"
0015C8r 3               ; ## "hex"  auto  ANS core ext
0015C8r 3                       ; """https://forth-standard.org/standard/core/HEX"""
0015C8r 3               xt_hex:
0015C8r 3  A9 10                        lda #16
0015CAr 3  85 rr                        sta base
0015CCr 3  64 rr                        stz base+1              ; paranoid
0015CEr 3               
0015CEr 3  60           z_hex:          rts
0015CFr 3               
0015CFr 3               
0015CFr 3               ; ## HEXSTORE ( addr1 u1 addr2 -- u2 ) "Store a list of numbers"
0015CFr 3               ; ## "hexstore"  auto  Tali
0015CFr 3                       ; """Given a string addr1 u1 with numbers in the current base seperated
0015CFr 3                       ; by spaces, store the numbers at the address addr2, returning the
0015CFr 3                       ; number of elements. Non-number elements are skipped, an zero-length
0015CFr 3                       ; string produces a zero output.
0015CFr 3                       ; """
0015CFr 3               
0015CFr 3               xt_hexstore:
0015CFr 3  20 rr rr                     jsr underflow_3
0015D2r 3               
0015D2r 3  20 rr rr                     jsr xt_dup              ; Save copy of original address
0015D5r 3  20 rr rr                     jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
0015D8r 3               
0015D8r 3               @loop:
0015D8r 3                               ; Loop until string is totally consumed
0015D8r 3  B5 00                        lda 0,x
0015DAr 3  15 01                        ora 1,x
0015DCr 3  F0 36                        beq @done
0015DEr 3               
0015DEr 3  20 rr rr                     jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
0015E1r 3               
0015E1r 3                               ; Prepare the conversion of the number.
0015E1r 3  20 rr rr                     jsr xt_two_to_r
0015E4r 3  20 rr rr                     jsr xt_zero
0015E7r 3  20 rr rr                     jsr xt_zero
0015EAr 3  20 rr rr                     jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
0015EDr 3  20 rr rr                     jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
0015F0r 3               
0015F0r 3                               ; If u4 is not zero, we have leftover chars and have to do
0015F0r 3                               ; things differently
0015F0r 3  B5 00                        lda 0,x
0015F2r 3  15 01                        ora 1,x
0015F4r 3  D0 17                        bne @have_chars_left
0015F6r 3               
0015F6r 3                               ; Normal case, this number is all done
0015F6r 3  20 rr rr                     jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
0015F9r 3  20 rr rr                     jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
0015FCr 3               
0015FCr 3                               ; Store the new value
0015FCr 3  20 rr rr                     jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
0015FFr 3  20 rr rr                     jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
001602r 3               
001602r 3                               ; Increase counter
001602r 3  20 rr rr                     jsr xt_r_from           ; R>
001605r 3  20 rr rr                     jsr xt_one_plus         ; 1+
001608r 3  20 rr rr                     jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
00160Br 3  80 CB                        bra @loop
00160Dr 3               
00160Dr 3               @have_chars_left:
00160Dr 3                               ; Pathological case: Drop the rest of this number off the stack
00160Dr 3                               ; and continue with the next word. Doesn't print a warning. We
00160Dr 3                               ; need to drop four cells, that is, eight bytes
00160Dr 3  8A                           txa
00160Er 3  18                           clc
00160Fr 3  69 08                        adc #8
001611r 3  AA                           tax
001612r 3  80 C4                        bra @loop
001614r 3               
001614r 3               @done:
001614r 3                               ; Clean up return stack and calculate number of chars stored
001614r 3  E8                           inx
001615r 3  E8                           inx
001616r 3  E8                           inx
001617r 3  E8                           inx                     ; 2DROP
001618r 3               
001618r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr2+n addr2 )
00161Br 3  20 rr rr                     jsr xt_swap
00161Er 3  20 rr rr                     jsr xt_minus            ; ( n )
001621r 3               
001621r 3  60           z_hexstore:     rts
001622r 3               
001622r 3               
001622r 3               
001622r 3               ; ## HOLD ( char -- ) "Insert character at current output"
001622r 3               ; ## "hold"  auto  ANS core
001622r 3                       ; """https://forth-standard.org/standard/core/HOLD
001622r 3                       ; Insert a character at the current position of a pictured numeric
001622r 3                       ; output string on
001622r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001622r 3                       ;
001622r 3                       ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal
001622r 3                       ; variable tohold instead of HLD.
001622r 3                       ; """
001622r 3               xt_hold:
001622r 3  20 rr rr                     jsr underflow_1
001625r 3               
001625r 3  A5 rr                        lda tohold
001627r 3  D0 02                        bne @1
001629r 3  C6 rr                        dec tohold+1
00162Br 3               @1:
00162Br 3  C6 rr                        dec tohold
00162Dr 3               
00162Dr 3  B5 00                        lda 0,x
00162Fr 3  92 rr                        sta (tohold)
001631r 3  E8                           inx
001632r 3  E8                           inx
001633r 3               
001633r 3  60           z_hold:         rts
001634r 3               
001634r 3               
001634r 3               ; ## I ( -- n )(R: n -- n)  "Copy loop counter to stack"
001634r 3               ; ## "i"  auto  ANS core
001634r 3                       ; """https://forth-standard.org/standard/core/I
001634r 3                       ; Note that this is not the same as R@ because we use a fudge
001634r 3                       ; factor for loop control; see the Control Flow section of the
001634r 3                       ; manual for details.
001634r 3                       ;
001634r 3                       ; We should make this native compile for speed.
001634r 3                       ; """
001634r 3               
001634r 3               xt_i:
001634r 3  CA                           dex
001635r 3  CA                           dex
001636r 3               
001636r 3                               ; Get the fudged index off of the top of the stack. It's
001636r 3                               ; easier to do math on the stack directly than to pop and
001636r 3                               ; push stuff around
001636r 3  86 rr                        stx tmpdsp
001638r 3  BA                           tsx
001639r 3               
001639r 3  38                           sec
00163Ar 3  BD 01 01                     lda $0101,x     ; LSB
00163Dr 3  FD 03 01                     sbc $0103,x
001640r 3  A8                           tay
001641r 3               
001641r 3  BD 02 01                     lda $0102,x     ; MSB
001644r 3  FD 04 01                     sbc $0104,x
001647r 3               
001647r 3  A6 rr                        ldx tmpdsp
001649r 3               
001649r 3  95 01                        sta 1,x         ; MSB of de-fudged index
00164Br 3  94 00                        sty 0,x         ; LSB of de-fudged index
00164Dr 3               
00164Dr 3  60           z_i:            rts
00164Er 3               
00164Er 3               
00164Er 3               
00164Er 3               ; ## IF (C: -- orig) (flag -- ) "Conditional flow control"
00164Er 3               ; ## "if"  auto  ANS core
00164Er 3                       ; """http://forth-standard.org/standard/core/IF"""
00164Er 3               
00164Er 3               xt_if:
00164Er 3                               ; Compile a 0BRANCH
00164Er 3  A0 rr                        ldy #>zero_branch_runtime
001650r 3  A9 rr                        lda #<zero_branch_runtime
001652r 3  20 rr rr                     jsr cmpl_subroutine
001655r 3               
001655r 3                               ; Put the origination address on the stack for else/then
001655r 3  20 rr rr                     jsr xt_here
001658r 3               
001658r 3                               ; Stuff zero in for the branch address right now.
001658r 3                               ; THEN or ELSE will fix it later.
001658r 3  20 rr rr                     jsr xt_zero
00165Br 3  20 rr rr                     jsr xt_comma
00165Er 3  60           z_if:           rts
00165Fr 3               
00165Fr 3               
00165Fr 3               zero_branch_runtime:
00165Fr 3                       ; """In some Forths, this is called (0BRANCH). Tali Forth originally
00165Fr 3                       ; included 0BRANCH as a high-level word that inserted this code at
00165Fr 3                       ; runtime.
00165Fr 3                       ; """
00165Fr 3               
00165Fr 3                               ; We use the return value on the 65c02 stack to determine
00165Fr 3                               ; where we want to return to.
00165Fr 3  68                           pla
001660r 3  85 rr                        sta tmpbranch
001662r 3  68                           pla
001663r 3  85 rr                        sta tmpbranch+1
001665r 3               
001665r 3                               ; See if the flag is zero, which is the whole purpose of
001665r 3                               ; this all
001665r 3  B5 00                        lda 0,x
001667r 3  15 01                        ora 1,x
001669r 3  F0 0F                        beq @zero
00166Br 3               
00166Br 3                               ; Flag is TRUE, so we skip over the next two bytes. This is
00166Br 3                               ; the part between IF and THEN
00166Br 3  A5 rr                        lda tmpbranch   ; LSB
00166Dr 3  18                           clc
00166Er 3  69 02                        adc #2
001670r 3  85 rr                        sta tmp1
001672r 3  A5 rr                        lda tmpbranch+1 ; MSB
001674r 3  69 00                        adc #0          ; For carry
001676r 3  85 rr                        sta tmp1+1
001678r 3               
001678r 3  80 13                        bra @done
00167Ar 3               
00167Ar 3               @zero:
00167Ar 3                               ; Flag is FALSE (0) so we take the jump to the address given in
00167Ar 3                               ; the next two bytes. However, the address points to the last
00167Ar 3                               ; byte of the JSR instruction, not to the next byte afterwards
00167Ar 3  A0 01                        ldy #1
00167Cr 3  B1 rr                        lda (tmpbranch),y
00167Er 3  85 rr                        sta tmp1
001680r 3  C8                           iny
001681r 3  B1 rr                        lda (tmpbranch),y
001683r 3  85 rr                        sta tmp1+1
001685r 3               
001685r 3                               ; Now we have to subtract one byte from the address
001685r 3                               ; given because of the way the 6502 calculates RTS
001685r 3  A5 rr                        lda tmp1
001687r 3  D0 02                        bne @1
001689r 3  C6 rr                        dec tmp1+1
00168Br 3               @1:
00168Br 3  C6 rr                        dec tmp1
00168Dr 3               
00168Dr 3               @done:
00168Dr 3                               ; However we got here, tmp1 has the value we push to jump
00168Dr 3                               ; to
00168Dr 3  A5 rr                        lda tmp1+1
00168Fr 3  48                           pha             ; MSB first
001690r 3  A5 rr                        lda tmp1
001692r 3  48                           pha
001693r 3               
001693r 3                               ; clean up the stack and jump
001693r 3  E8                           inx
001694r 3  E8                           inx
001695r 3               
001695r 3  60                           rts
001696r 3               
001696r 3               
001696r 3               
001696r 3               ; ## IMMEDIATE ( -- ) "Mark most recent word as IMMEDIATE"
001696r 3               ; ## "immediate"  auto  ANS core
001696r 3                       ; """https://forth-standard.org/standard/core/IMMEDIATE
001696r 3                       ; Make sure the most recently defined word is immediate. Will only
001696r 3                       ; affect the last word in the dictionary. Note that if the word is
001696r 3                       ; defined in ROM, this will have no affect, but will not produce an
001696r 3                       ; error message.
001696r 3                       ; """
001696r 3               xt_immediate:
001696r 3  20 rr rr                     jsr current_to_dp
001699r 3  A0 01                        ldy #1          ; offset for status byte
00169Br 3  B1 rr                        lda (dp),y
00169Dr 3  09 04                        ora #IM        ; make sure bit 7 is set
00169Fr 3  91 rr                        sta (dp),y
0016A1r 3               
0016A1r 3  60           z_immediate:    rts
0016A2r 3               
0016A2r 3               
0016A2r 3               ; ## INPUT ( -- addr ) "Return address of input vector"
0016A2r 3               ; ## "input" tested Tali Forth
0016A2r 3               
0016A2r 3               xt_input:
0016A2r 3  CA                           dex
0016A3r 3  CA                           dex
0016A4r 3  A9 rr                        lda #<input
0016A6r 3  95 00                        sta 0,x
0016A8r 3  A9 rr                        lda #>input
0016AAr 3  95 01                        sta 1,x
0016ACr 3               
0016ACr 3  60           z_input:        rts
0016ADr 3               
0016ADr 3               
0016ADr 3               
0016ADr 3               ; ## INPUT_TO_R ( -- ) ( R: -- n n n n ) "Save input state to the Return Stack"
0016ADr 3               ; ## "input>r"  tested  Tali Forth
0016ADr 3                  	; """Save the current input state as defined by insrc, cib, ciblen, and
0016ADr 3                       ; toin to the Return Stack. Used by EVALUTE.
0016ADr 3                       ;
0016ADr 3                       ; The naive way of doing
0016ADr 3                       ; this is to push each two-byte variable to the stack in the form of
0016ADr 3                       ;
0016ADr 3                       ;       lda insrc
0016ADr 3                       ;       pha
0016ADr 3                       ;       lda insrc+1
0016ADr 3                       ;       pha
0016ADr 3                       ;
0016ADr 3                       ; for a total of 24 byte of instruction in one direction and later
0016ADr 3                       ; a further 24 bytes to reverse the process. We shorten this at the
0016ADr 3                       ; cost of some speed by assuming the four variables are grouped
0016ADr 3                       ; together on the Zero Page and start with insrc (see definitions.asm
0016ADr 3                       ; for details). The reverse operation is r_to_input. These words must
0016ADr 3                       ; be flagged as Never Native. Uses tmp1
0016ADr 3                       ; """
0016ADr 3               
0016ADr 3               xt_input_to_r:
0016ADr 3                               ; We arrive here with the return address on the top of the
0016ADr 3                               ; 65c02's stack. We need to move it out of the way first
0016ADr 3  68                           pla
0016AEr 3  85 rr                        sta tmp1
0016B0r 3  68                           pla
0016B1r 3  85 rr                        sta tmp1+1
0016B3r 3               
0016B3r 3                               ; This assumes that insrc is the first of eight bytes and
0016B3r 3                               ; toin+1 the last in the sequence we want to save from the Zero
0016B3r 3                               ; Page.
0016B3r 3  A0 07                        ldy #7
0016B5r 3               @loop:
0016B5r 3  B9 rr rr                     lda insrc,y     ; insrc+7 is toin+1
0016B8r 3  48                           pha
0016B9r 3  88                           dey
0016BAr 3  10 F9                        bpl @loop
0016BCr 3               
0016BCr 3                               ; Restore address for return jump
0016BCr 3  A5 rr                        lda tmp1+1
0016BEr 3  48                           pha
0016BFr 3  A5 rr                        lda tmp1
0016C1r 3  48                           pha
0016C2r 3               
0016C2r 3  60           z_input_to_r: 	rts
0016C3r 3               
0016C3r 3               
0016C3r 3               
0016C3r 3               ; ## INT_TO_NAME ( xt -- nt ) "Get name token from execution token"
0016C3r 3               ; ## "int>name"  auto  Tali Forth
0016C3r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0016C3r 3                       ; This is called >NAME in Gforth, but we change it to
0016C3r 3                       ; INT>NAME to match NAME>INT
0016C3r 3                       ; """
0016C3r 3               
0016C3r 3               xt_int_to_name:
0016C3r 3  20 rr rr                     jsr underflow_1
0016C6r 3               
0016C6r 3                               ; Unfortunately, to find the header, we have to walk through
0016C6r 3                               ; all of the wordlists. We are running out of tmp variables.
0016C6r 3                               ; (I'm assuming there is a reason this is avoiding tmp1) so
0016C6r 3                               ; hold the current wordlist on the data stack. This searches
0016C6r 3                               ; all of the wordlists in id order.
0016C6r 3  CA                           dex
0016C7r 3  CA                           dex
0016C8r 3  74 00                        stz 0,x
0016CAr 3  74 01                        stz 1,x
0016CCr 3               
0016CCr 3               @wordlist_loop:
0016CCr 3                               ; A needs to have the current wordlist id in it at
0016CCr 3                               ; the top of this loop.
0016CCr 3  B5 00                        lda 0,x                 ; Get the current wordlist.
0016CEr 3               
0016CEr 3                               ; Get the DP for that wordlist.
0016CEr 3  0A                           asl                     ; Turn offset into cells offset.
0016CFr 3  18                           clc
0016D0r 3  69 06                        adc #wordlists_offset
0016D2r 3  A8                           tay
0016D3r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
0016D5r 3  85 rr                        sta tmp2                ; into tmp2
0016D7r 3  C8                           iny
0016D8r 3  B1 rr                        lda (up),y
0016DAr 3  85 rr                        sta tmp2+1
0016DCr 3               
0016DCr 3                               ; Check for an empty wordlist (DP will be 0)
0016DCr 3  A5 rr                        lda tmp2
0016DEr 3  05 rr                        ora tmp2+1
0016E0r 3  F0 38                        beq @next_wordlist
0016E2r 3               
0016E2r 3  B5 02                        lda 2,x         ; Target xt is now behind wordlist id.
0016E4r 3  85 rr                        sta tmp3        ; Save target xt in tmp3
0016E6r 3  B5 03                        lda 3,x
0016E8r 3  85 rr                        sta tmp3+1
0016EAr 3               
0016EAr 3               @loop:
0016EAr 3  A0 04                        ldy #4          ; xt is four bytes down
0016ECr 3  B1 rr                        lda (tmp2),y    ; LSB of xt of current nt
0016EEr 3  C5 rr                        cmp tmp3
0016F0r 3  D0 07                        bne @no_match
0016F2r 3               
0016F2r 3                               ; LSB is the same, now check MSB
0016F2r 3  C8                           iny
0016F3r 3  B1 rr                        lda (tmp2),y    ; MSB of xt of current nt
0016F5r 3  C5 rr                        cmp tmp3+1
0016F7r 3  F0 32                        beq @match
0016F9r 3               
0016F9r 3               @no_match:
0016F9r 3                               ; no match, so we need to get the next word. Next nt is two
0016F9r 3                               ; bytes down
0016F9r 3  18                           clc
0016FAr 3  A5 rr                        lda tmp2
0016FCr 3  69 02                        adc #2
0016FEr 3  85 rr                        sta tmp2
001700r 3  A5 rr                        lda tmp2+1
001702r 3  69 00                        adc #0          ; only care about carry
001704r 3  85 rr                        sta tmp2+1
001706r 3               
001706r 3  A0 00                        ldy #0
001708r 3  B1 rr                        lda (tmp2),y
00170Ar 3  48                           pha
00170Br 3  C8                           iny
00170Cr 3  11 rr                        ora (tmp2),y
00170Er 3  F0 09                        beq @zero
001710r 3               
001710r 3                               ; Not zero continue
001710r 3  B1 rr                        lda (tmp2),y
001712r 3  85 rr                        sta tmp2+1
001714r 3  68                           pla
001715r 3  85 rr                        sta tmp2
001717r 3  80 D1                        bra @loop
001719r 3               
001719r 3               @zero:
001719r 3                               ; if next word is zero, the xt has no nt in this wordlist
001719r 3  68                           pla             ; Leftover from above loop
00171Ar 3               
00171Ar 3               @next_wordlist:
00171Ar 3                               ; Move on to the next wordlist.
00171Ar 3  B5 00                        lda 0,x
00171Cr 3  1A                           inc
00171Dr 3  95 00                        sta 0,x
00171Fr 3  C9 0C                        cmp #max_wordlists
001721r 3  D0 A9                        bne @wordlist_loop
001723r 3               
001723r 3                               ; We didn't find it in any of the wordlists.
001723r 3                               ; Remove the wordlist id from the stack.
001723r 3  E8                           inx
001724r 3  E8                           inx
001725r 3               
001725r 3                               ; We return a zero to indicate that we didn't find it.
001725r 3  74 00                        stz 0,x
001727r 3  74 01                        stz 1,x
001729r 3  80 0A                        bra z_int_to_name
00172Br 3               
00172Br 3               @match:
00172Br 3                               ; We found it. Remove wordlist id from stack.
00172Br 3  E8                           inx
00172Cr 3  E8                           inx
00172Dr 3               
00172Dr 3                               ; It's a match! Replace TOS with nt
00172Dr 3  A5 rr                        lda tmp2
00172Fr 3  95 00                        sta 0,x
001731r 3  A5 rr                        lda tmp2+1
001733r 3  95 01                        sta 1,x
001735r 3               
001735r 3  60           z_int_to_name:  rts
001736r 3               
001736r 3               
001736r 3               
001736r 3               ; ## INVERT ( n -- n ) "Complement of TOS"
001736r 3               ; ## "invert"  auto  ANS core
001736r 3                       ; """https://forth-standard.org/standard/core/INVERT"""
001736r 3               xt_invert:
001736r 3  20 rr rr                     jsr underflow_1
001739r 3               
001739r 3  A9 FF                        lda #$FF
00173Br 3  55 00                        eor 0,x         ; LSB
00173Dr 3  95 00                        sta 0,x
00173Fr 3               
00173Fr 3  A9 FF                        lda #$FF
001741r 3  55 01                        eor 1,x         ; MSB
001743r 3  95 01                        sta 1,x
001745r 3               
001745r 3  60           z_invert:       rts
001746r 3               
001746r 3               
001746r 3               ; ## IS ( xt "name" -- ) "Set named word to execute xt"
001746r 3               ; ## "is"  auto  ANS core ext
001746r 3                       ; """http://forth-standard.org/standard/core/IS"""
001746r 3               
001746r 3               xt_is:
001746r 3                               ; This is a state aware word with differet behavior
001746r 3                               ; when used while compiling vs interpreting.
001746r 3                               ; Check STATE
001746r 3  A5 rr                        lda state
001748r 3  05 rr                        ora state+1
00174Ar 3  F0 0C                        beq @interpreting
00174Cr 3               
00174Cr 3               @compiling:
00174Cr 3                               ; Run ['] to compile the xt of the next word as a literal.
00174Cr 3  20 rr rr                     jsr xt_bracket_tick
00174Fr 3               
00174Fr 3                               ; Postpone DEFER! by compiling a JSR to it.
00174Fr 3  A0 rr                        ldy #>xt_defer_store
001751r 3  A9 rr                        lda #<xt_defer_store
001753r 3  20 rr rr                     jsr cmpl_subroutine
001756r 3               
001756r 3  80 06                        bra @done
001758r 3               
001758r 3               @interpreting:
001758r 3  20 rr rr                     jsr xt_tick
00175Br 3  20 rr rr                     jsr xt_defer_store
00175Er 3               @done:
00175Er 3  60           z_is:           rts
00175Fr 3               
00175Fr 3               
00175Fr 3               
00175Fr 3               ; ## J ( -- n ) (R: n -- n ) "Copy second loop counter to stack"
00175Fr 3               ; ## "j"  auto  ANS core
00175Fr 3                       ; """https://forth-standard.org/standard/core/J
00175Fr 3                       ; Copy second loop counter from Return Stack to stack. Note we use
00175Fr 3                       ; a fudge factor for loop control; see the Control Flow section of
00175Fr 3                       ; the manual for more details.
00175Fr 3                       ; At this point, we have the "I" counter/limit and the LEAVE address
00175Fr 3                       ; on the stack above this (three entries), whereas the ideal Forth
00175Fr 3                       ; implementation would just have two.
00175Fr 3                       ;
00175Fr 3                       ; Make this native compiled for speed
00175Fr 3                       ; """
00175Fr 3               
00175Fr 3               xt_j:
00175Fr 3  CA                           dex
001760r 3  CA                           dex
001761r 3               
001761r 3                               ; Get the fudged index off from the stack. It's easier to
001761r 3                               ; do math on the stack directly than to pop and push stuff
001761r 3                               ; around
001761r 3  86 rr                        stx tmpdsp
001763r 3  BA                           tsx
001764r 3               
001764r 3  38                           sec
001765r 3  BD 07 01                     lda $0107,x     ; LSB
001768r 3  FD 09 01                     sbc $0109,x
00176Br 3  A8                           tay
00176Cr 3               
00176Cr 3  BD 08 01                     lda $0108,x     ; MSB
00176Fr 3  FD 0A 01                     sbc $010A,x
001772r 3               
001772r 3  A6 rr                        ldx tmpdsp
001774r 3               
001774r 3  95 01                        sta 1,x         ; MSB of de-fudged index
001776r 3  94 00                        sty 0,x         ; LSB of de-fudged index
001778r 3               
001778r 3  60           z_j:            rts
001779r 3               
001779r 3               
001779r 3               
001779r 3               ; ## KEY ( -- char ) "Get one character from the input"
001779r 3               ; ## "key"  tested  ANS core
001779r 3               xt_key:
001779r 3                       ; """https://forth-standard.org/standard/core/KEY
001779r 3                       ; Get a single character of input from the vectored
001779r 3                       ; input without echoing.
001779r 3                       ; """
001779r 3  20 rr rr                     jsr key_a               ; returns char in A
00177Cr 3               
00177Cr 3  CA                           dex
00177Dr 3  CA                           dex
00177Er 3  95 00                        sta 0,x
001780r 3  74 01                        stz 1,x
001782r 3               
001782r 3  60           z_key:          rts
001783r 3               
001783r 3               key_a:
001783r 3                       ; The 65c02 doesn't have a JSR (ADDR,X) instruction like the
001783r 3                       ; 65816, so we have to fake the indirect jump to vector it.
001783r 3                       ; This is depressingly slow. We use this routine internally
001783r 3                       ; to avoid manipulating the Data Stack when we just want a
001783r 3                       ; character
001783r 3  6C rr rr                     jmp (input)             ; JSR/RTS
001786r 3               
001786r 3               
001786r 3               ; ## LATESTNT ( -- nt ) "Push most recent nt to the stack"
001786r 3               ; ## "latestnt"  auto  Tali Forth
001786r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001786r 3                       ; The Gforth version of this word is called LATEST
001786r 3                       ; """
001786r 3               xt_latestnt:
001786r 3  CA                           dex
001787r 3  CA                           dex
001788r 3               
001788r 3  20 rr rr                     jsr current_to_dp
00178Br 3               
00178Br 3  A5 rr                        lda dp
00178Dr 3  95 00                        sta 0,x
00178Fr 3  A5 rr                        lda dp+1
001791r 3  95 01                        sta 1,x
001793r 3               
001793r 3  60           z_latestnt:     rts
001794r 3               
001794r 3               
001794r 3               ; ## LATESTXT ( -- xt ) "Push most recent xt to the stack"
001794r 3               ; ## "latestxt"  auto  Gforth
001794r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Anonymous-Definitions.html"""
001794r 3               xt_latestxt:
001794r 3  20 rr rr                     jsr xt_latestnt         ; ( nt )
001797r 3  20 rr rr                     jsr xt_name_to_int      ; ( xt )
00179Ar 3               
00179Ar 3  60           z_latestxt:     rts
00179Br 3               
00179Br 3               
00179Br 3               ; ## LEAVE ( -- ) "Leave DO/LOOP construct"
00179Br 3               ; ## "leave"  auto  ANS core
00179Br 3                       ; """https://forth-standard.org/standard/core/LEAVE
00179Br 3                       ; Note that this does not work with anything but a DO/LOOP in
00179Br 3                       ; contrast to other versions such as discussed at
00179Br 3                       ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
00179Br 3                       ;
00179Br 3                       ;       : LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY
00179Br 3                       ; See the Control Flow section in the manual for details of how this works.
00179Br 3                       ; This must be native compile and not IMMEDIATE
00179Br 3                       ; """
00179Br 3               
00179Br 3               xt_leave:
00179Br 3                               ; We dump the limit/start entries off the Return Stack
00179Br 3                               ; (four bytes)
00179Br 3  68                           pla
00179Cr 3  68                           pla
00179Dr 3  68                           pla
00179Er 3  68                           pla
00179Fr 3               
00179Fr 3  60                           rts             ; this must be compiled, so keep before z_leave
0017A0r 3               z_leave:                        ; not reached, not compiled
0017A0r 3               
0017A0r 3               
0017A0r 3               
0017A0r 3               ; ## LEFT_BRACKET ( -- ) "Enter interpretation state"
0017A0r 3               ; ## "["  auto  ANS core
0017A0r 3                       ; """https://forth-standard.org/standard/core/Bracket
0017A0r 3                       ; This is an immediate and compile-only word
0017A0r 3                       ; """
0017A0r 3               xt_left_bracket:
0017A0r 3  64 rr                        stz state
0017A2r 3  64 rr                        stz state+1
0017A4r 3               
0017A4r 3  60           z_left_bracket: rts
0017A5r 3               
0017A5r 3               
0017A5r 3               ; ## LESS_NUMBER_SIGN ( -- ) "Start number conversion"
0017A5r 3               ; ## "<#"  auto  ANS core
0017A5r 3                       ; """https://forth-standard.org/standard/core/num-start
0017A5r 3                       ; Start the process to create pictured numeric output.
0017A5r 3                       ;
0017A5r 3                       ; The new
0017A5r 3                       ; string is constructed from back to front, saving the new character
0017A5r 3                       ; at the beginning of the output string. Since we use PAD as a
0017A5r 3                       ; starting address and work backward (!), the string is constructed
0017A5r 3                       ; in the space between the end of the Dictionary (as defined by CP)
0017A5r 3                       ; and the PAD. This allows us to satisfy the ANS Forth condition that
0017A5r 3                       ; programs don't fool around with the PAD but still use its address.
0017A5r 3                       ; Based on pForth
0017A5r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
0017A5r 3                       ; pForth is in the pubic domain. Forth is : <# PAD HLD ! ; we use the
0017A5r 3                       ; internal variable tohold instead of HLD.
0017A5r 3                       ; """
0017A5r 3               xt_less_number_sign:
0017A5r 3  20 rr rr                     jsr xt_pad      ; ( addr )
0017A8r 3               
0017A8r 3  B5 00                        lda 0,x
0017AAr 3  85 rr                        sta tohold
0017ACr 3  B5 01                        lda 1,x
0017AEr 3  85 rr                        sta tohold+1
0017B0r 3               
0017B0r 3  E8                           inx
0017B1r 3  E8                           inx
0017B2r 3               
0017B2r 3               z_less_number_sign:
0017B2r 3  60                           rts
0017B3r 3               
0017B3r 3               ; ## LESS_THAN ( n m -- f ) "Return true if NOS < TOS"
0017B3r 3               ; ## "<"  auto  ANS core
0017B3r 3                       ; """https://forth-standard.org/standard/core/less"""
0017B3r 3               
0017B3r 3               xt_less_than:
0017B3r 3  20 rr rr                     jsr underflow_2
0017B6r 3               
0017B6r 3  A0 00                        ldy #0          ; default false
0017B8r 3  20 rr rr                     jsr compare_16bit
0017BBr 3               
0017BBr 3                               ; for signed numbers, NOS < TOS if Z=0 and N=0
0017BBr 3  F0 03                        beq @false
0017BDr 3  30 01                        bmi @false
0017BFr 3               
0017BFr 3                               ; true
0017BFr 3  88                           dey
0017C0r 3               @false:
0017C0r 3  98                           tya
0017C1r 3               
0017C1r 3  E8                           inx
0017C2r 3  E8                           inx
0017C3r 3  95 00                        sta 0,x
0017C5r 3  95 01                        sta 1,x
0017C7r 3               
0017C7r 3  60           z_less_than:    rts
0017C8r 3               
0017C8r 3               
0017C8r 3               
0017C8r 3               ; ## LIST ( scr# -- ) "List the given screen"
0017C8r 3               ; ## "list"  tested  ANS block ext
0017C8r 3                       ; """https://forth-standard.org/standard/block/LIST"""
0017C8r 3               
0017C8r 3               xt_list:
0017C8r 3  20 rr rr                     jsr underflow_1
0017CBr 3               
0017CBr 3                               ; Save the screen number in SCR
0017CBr 3  20 rr rr                     jsr xt_scr
0017CEr 3  20 rr rr                     jsr xt_store
0017D1r 3               
0017D1r 3                               ; Use L from the editor-wordlist to display the screen.
0017D1r 3  20 rr rr                     jsr xt_editor_l
0017D4r 3               
0017D4r 3  60           z_list:         rts
0017D5r 3               
0017D5r 3               
0017D5r 3               
0017D5r 3               ; ## LITERAL ( n -- ) "Store TOS to be push on stack during runtime"
0017D5r 3               ; ## "literal"  auto  ANS core
0017D5r 3                       ; """https://forth-standard.org/standard/core/LITERAL
0017D5r 3                       ; Compile-only word to store TOS so that it is pushed on stack
0017D5r 3                       ; during runtime. This is a immediate, compile-only word. At runtime,
0017D5r 3                       ; it works by calling literal_runtime by compling JSR LITERAL_RT.
0017D5r 3                       ;
0017D5r 3                       ; Note the cmpl_ routines use TMPTOS
0017D5r 3                       ; """
0017D5r 3               xt_literal:
0017D5r 3  20 rr rr                     jsr underflow_1
0017D8r 3               
0017D8r 3  A0 rr                        ldy #>literal_runtime
0017DAr 3  A9 rr                        lda #<literal_runtime
0017DCr 3  20 rr rr                     jsr cmpl_subroutine
0017DFr 3               
0017DFr 3                               ; Compile the value that is to be pushed on the Stack during
0017DFr 3                               ; runtime
0017DFr 3  20 rr rr                     jsr xt_comma
0017E2r 3               
0017E2r 3  60           z_literal:      rts
0017E3r 3               
0017E3r 3               literal_runtime:
0017E3r 3               
0017E3r 3                               ; During runtime, we push the value following this word back
0017E3r 3                               ; on the Data Stack. The subroutine jump that brought us
0017E3r 3                               ; here put the address to return to on the Return Stack -
0017E3r 3                               ; this points to the data we need to get. This routine is
0017E3r 3                               ; also called (LITERAL) in some Forths
0017E3r 3  CA                           dex
0017E4r 3  CA                           dex
0017E5r 3               
0017E5r 3                           	; The 65c02 stores <RETURN-ADDRESS>-1 on the Return Stack,
0017E5r 3                               ; so we are actually popping the address-1 of the literal
0017E5r 3  68                           pla             ; LSB
0017E6r 3  85 rr                        sta tmp1
0017E8r 3  68                           pla             ; MSB
0017E9r 3  85 rr                        sta tmp1+1
0017EBr 3               
0017EBr 3                               ; Fetch the actual literal value and push it on Data stack
0017EBr 3  A0 01                        ldy #1
0017EDr 3  B1 rr                        lda (tmp1),y    ; LSB
0017EFr 3  95 00                        sta 0,x
0017F1r 3  C8                           iny
0017F2r 3  B1 rr                        lda (tmp1),y    ; MSB
0017F4r 3  95 01                        sta 1,x
0017F6r 3               
0017F6r 3                               ; Adjust return address and push back on the Return Stack
0017F6r 3  98                           tya
0017F7r 3  18                           clc
0017F8r 3  65 rr                        adc tmp1
0017FAr 3  A8                           tay
0017FBr 3  A5 rr                        lda tmp1+1
0017FDr 3  69 00                        adc #0
0017FFr 3  48                           pha
001800r 3  5A                           phy
001801r 3               
001801r 3  60                           rts
001802r 3               
001802r 3               
001802r 3               
001802r 3               ; ## LOAD ( scr# -- ) "Load the Forth code in a screen/block"
001802r 3               ; ## "load"  auto  ANS block
001802r 3                       ; """https://forth-standard.org/standard/block/LOAD
001802r 3                       ;
001802r 3                       ; Note: LOAD current works because there is only one buffer.
001802r 3                       ; If/when multiple buffers are supported, we'll have to deal
001802r 3                       ; with the fact that it might re-load the old block into a
001802r 3                       ; different buffer.
001802r 3                       ; """
001802r 3               
001802r 3               xt_load:
001802r 3  20 rr rr                     jsr underflow_1
001805r 3               
001805r 3                               ; Save the current value of BLK on the return stack.
001805r 3  A0 01                        ldy #blk_offset+1
001807r 3  B1 rr                        lda (up),y
001809r 3  48                           pha
00180Ar 3  88                           dey
00180Br 3  B1 rr                        lda (up),y
00180Dr 3  48                           pha
00180Er 3               
00180Er 3                               ; Set BLK to the given block/screen number.
00180Er 3  B5 00                        lda 0,x
001810r 3  91 rr                        sta (up),y
001812r 3  C8                           iny
001813r 3  B5 01                        lda 1,x
001815r 3  91 rr                        sta (up),y
001817r 3               
001817r 3                               ; Load that block into a buffer
001817r 3  20 rr rr                     jsr xt_block
00181Ar 3               
00181Ar 3                               ; Put 1024 on the stack for the screen length.
00181Ar 3  CA                           dex
00181Br 3  CA                           dex
00181Cr 3  A9 04                        lda #4
00181Er 3  95 01                        sta 1,x
001820r 3  74 00                        stz 0,x
001822r 3               
001822r 3                               ; Jump to a special evluate target. This bypasses the underflow
001822r 3                               ; check and skips the zeroing of BLK.
001822r 3  20 rr rr                     jsr load_evaluate
001825r 3               
001825r 3                               ; Restore the value of BLK from before the LOAD command.
001825r 3  A0 00                        ldy #blk_offset
001827r 3  68                           pla
001828r 3  91 rr                        sta (up),y
00182Ar 3  C8                           iny
00182Br 3  68                           pla
00182Cr 3  91 rr                        sta (up),y
00182Er 3               
00182Er 3                               ; If BLK is not zero, read it back into the buffer.
00182Er 3                               ; A still has MSB
00182Er 3  88                           dey
00182Fr 3  11 rr                        ora (up),y
001831r 3  F0 12                        beq @done
001833r 3               
001833r 3                               ; The block needs to be read back into the buffer.
001833r 3  CA                           dex
001834r 3  CA                           dex
001835r 3  A0 00                        ldy #blk_offset
001837r 3  B1 rr                        lda (up),y
001839r 3  95 00                        sta 0,x
00183Br 3  C8                           iny
00183Cr 3  B1 rr                        lda (up),y
00183Er 3  95 01                        sta 1,x
001840r 3  20 rr rr                     jsr xt_block
001843r 3               
001843r 3                               ; Drop the buffer address.
001843r 3  E8                           inx
001844r 3  E8                           inx
001845r 3               
001845r 3               @done:
001845r 3  60           z_load:         rts
001846r 3               
001846r 3               
001846r 3               
001846r 3               ; ## LOOP ( -- ) "Finish loop construct"
001846r 3               ; ## "loop"  auto  ANS core
001846r 3                       ; """https://forth-standard.org/standard/core/LOOP
001846r 3                       ; Compile-time part of LOOP. This does nothing more but push 1 on
001846r 3                       ; the stack and then call +LOOP.
001846r 3                       ;
001846r 3                       ; In Forth, this is
001846r 3                       ;       : LOOP  POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ;
001846r 3                       ;       IMMEDIATE ; COMPILE-ONLY
001846r 3                       ; """
001846r 3               xt_loop:
001846r 3                               ; Have the finished word push 1 on the stack
001846r 3  A0 rr                        ldy #>xt_one
001848r 3  A9 rr                        lda #<xt_one
00184Ar 3  20 rr rr                     jsr cmpl_subroutine     ; drop through to +LOOP
00184Dr 3               
00184Dr 3               
00184Dr 3               ; ## PLUS_LOOP ( -- ) "Finish loop construct"
00184Dr 3               ; ## "+loop"  auto  ANS core
00184Dr 3                       ; """https://forth-standard.org/standard/core/PlusLOOP
00184Dr 3                       ;
00184Dr 3                       ; Compile-time part of +LOOP, also used for LOOP. Is usually
00184Dr 3                       ;       : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
00184Dr 3                       ;       COMPILE-ONLY
00184Dr 3                       ; in Forth. LOOP uses this routine as well. We jump here with the
00184Dr 3                       ; address for looping as TOS and the address for aborting the loop
00184Dr 3                       ; (LEAVE) as the second double-byte entry on the Return Stack (see
00184Dr 3                       ; DO and the Control Flow section of the manual for details).
00184Dr 3                       ; """
00184Dr 3               
00184Dr 3               xt_plus_loop:
00184Dr 3                               ; Compile the run-time part. We do this with a short loop
00184Dr 3                               ; and not a call to COMPILE, because it has to be natively
00184Dr 3                               ; coded anyway.
00184Dr 3  A0 11                        ldy #plus_loop_runtime_end-plus_loop_runtime
00184Fr 3  5A                           phy             ; save counter to adjust CP
001850r 3               @1:
001850r 3  B9 rr rr                     lda plus_loop_runtime,y
001853r 3  91 rr                        sta (cp),y
001855r 3  88                           dey
001856r 3  10 F8                        bpl @1
001858r 3               
001858r 3                               ; Adjust CP
001858r 3  68                           pla
001859r 3  18                           clc
00185Ar 3  65 rr                        adc cp
00185Cr 3  85 rr                        sta cp
00185Er 3  A5 rr                        lda cp+1
001860r 3  69 00                        adc #0          ; only need carry
001862r 3  85 rr                        sta cp+1
001864r 3               
001864r 3                               ; The address we need to loop back to is TOS. Store it so
001864r 3                               ; the runtime part of +LOOP jumps back up there
001864r 3  20 rr rr                     jsr xt_comma
001867r 3               
001867r 3                               ; Compile an UNLOOP for when we're all done. This is a series
001867r 3                               ; of six PLA, so we just do it here instead jumping around
001867r 3                               ; all over the place
001867r 3  A9 68                        lda #$68                ; opcode for PLA
001869r 3  A0 06                        ldy #6
00186Br 3               @2:
00186Br 3  91 rr                        sta (cp),y
00186Dr 3  88                           dey
00186Er 3  10 FB                        bpl @2
001870r 3               
001870r 3                               ; Adjust CP
001870r 3  A9 06                        lda #6
001872r 3  18                           clc
001873r 3  65 rr                        adc cp
001875r 3  85 rr                        sta cp
001877r 3  A5 rr                        lda cp+1
001879r 3  69 00                        adc #0                  ; only need carry
00187Br 3  85 rr                        sta cp+1
00187Dr 3               
00187Dr 3                               ; Complete compile of DO/?DO by replacing the six
00187Dr 3                               ; dummy bytes by PHA instructions. The address where
00187Dr 3                               ; they are located is on the Data Stack
00187Dr 3  B5 00                        lda 0,x
00187Fr 3  85 rr                        sta tmp1
001881r 3  B5 01                        lda 1,x
001883r 3  85 rr                        sta tmp1+1
001885r 3  E8                           inx
001886r 3  E8                           inx
001887r 3               
001887r 3                               ; Because of the way that CP works, we don't have to save
001887r 3                               ; CP, but CP-1
001887r 3  A5 rr                        lda cp
001889r 3  38                           sec
00188Ar 3  E9 01                        sbc #1
00188Cr 3  85 rr                        sta tmp2
00188Er 3  A5 rr                        lda cp+1
001890r 3  E9 00                        sbc #0
001892r 3  85 rr                        sta tmp2+1
001894r 3               
001894r 3                               ; now compile this in the DO/?DO routine
001894r 3  A0 00                        ldy #0
001896r 3               
001896r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001898r 3  91 rr                        sta (tmp1),y
00189Ar 3  C8                           iny
00189Br 3  A5 rr                        lda tmp2+1      ; MSB
00189Dr 3  91 rr                        sta (tmp1),y
00189Fr 3  C8                           iny
0018A0r 3  A9 48                        lda #$48        ; Opcode for PHA
0018A2r 3  91 rr                        sta (tmp1),y
0018A4r 3  C8                           iny
0018A5r 3               
0018A5r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
0018A7r 3  91 rr                        sta (tmp1),y
0018A9r 3  C8                           iny
0018AAr 3  A5 rr                        lda tmp2        ; LSB
0018ACr 3  91 rr                        sta (tmp1),y
0018AEr 3  C8                           iny
0018AFr 3  A9 48                        lda #$48        ; Opcode for PHA
0018B1r 3  91 rr                        sta (tmp1),y
0018B3r 3               z_loop:
0018B3r 3  60           z_plus_loop:    rts
0018B4r 3               
0018B4r 3               
0018B4r 3               plus_loop_runtime:
0018B4r 3                       ; """Runtime compile for loop control. This is used for both +LOOP and
0018B4r 3                       ; LOOP which are defined at high level. Note we use a fudge factor for
0018B4r 3                       ; loop control so we can test with the Overflow Flag. See
0018B4r 3                       ; the Control Flow section of the manual for details.
0018B4r 3                       ; The step value is TOS in the loop. This
0018B4r 3                       ; must always be native compiled. In some Forths, this is a separate
0018B4r 3                       ; word called (+LOOP) or (LOOP)
0018B4r 3                       ; """
0018B4r 3               
0018B4r 3  18                           clc
0018B5r 3  68                           pla             ; LSB of index
0018B6r 3  75 00                        adc 0,x         ; LSB of step
0018B8r 3  A8                           tay             ; temporary storage of LSB
0018B9r 3               
0018B9r 3  B8                           clv
0018BAr 3  68                           pla             ; MSB of index
0018BBr 3  75 01                        adc 1,x         ; MSB of step
0018BDr 3  48                           pha             ; put MSB of index back on stack
0018BEr 3               
0018BEr 3  98                           tya             ; put LSB of index back on stack
0018BFr 3  48                           pha
0018C0r 3               
0018C0r 3  E8                           inx             ; dump step from TOS
0018C1r 3  E8                           inx
0018C2r 3               
0018C2r 3                               ; If V flag is set, we're done looping and continue
0018C2r 3                               ; after the +LOOP instruction
0018C2r 3  70 03                        bvs @hack+3     ; skip over JMP instruction
0018C4r 3               
0018C4r 3               @hack:          ; This is why this routine must be natively compiled: We
0018C4r 3                               ; compile the opcode for JMP here without an address to
0018C4r 3                               ; go to, which is added by the next next instruction of
0018C4r 3                               ; LOOP/+LOOP during compile time
0018C4r 3  4C                           .byte $4C
0018C5r 3               
0018C5r 3               plus_loop_runtime_end:
0018C5r 3               
0018C5r 3               
0018C5r 3               ; ## LSHIFT ( x u -- u ) "Shift TOS left"
0018C5r 3               ; ## "lshift"  auto  ANS core
0018C5r 3                       ; """https://forth-standard.org/standard/core/LSHIFT"""
0018C5r 3               
0018C5r 3               xt_lshift:
0018C5r 3  20 rr rr                     jsr underflow_2
0018C8r 3               
0018C8r 3                               ; max shift 16 times
0018C8r 3  B5 00                        lda 0,x
0018CAr 3  29 0F                        and #%00001111
0018CCr 3  F0 08                        beq @done
0018CEr 3               
0018CEr 3  A8                           tay
0018CFr 3               
0018CFr 3               @loop:
0018CFr 3  16 02                        asl 2,x
0018D1r 3  36 03                        rol 3,x
0018D3r 3  88                           dey
0018D4r 3  D0 F9                        bne @loop
0018D6r 3               
0018D6r 3               @done:
0018D6r 3  E8                           inx
0018D7r 3  E8                           inx
0018D8r 3               
0018D8r 3  60           z_lshift:       rts
0018D9r 3               
0018D9r 3               
0018D9r 3               
0018D9r 3               ; ## M_STAR ( n n -- d ) "16 * 16 --> 32"
0018D9r 3               ; ## "m*"  auto  ANS core
0018D9r 3                       ; """https://forth-standard.org/standard/core/MTimes
0018D9r 3                       ; Multiply two 16 bit numbers, producing a 32 bit result. All
0018D9r 3                       ; values are signed. Adapted from FIG Forth for Tali Forth.
0018D9r 3                       ;
0018D9r 3                       ; The original Forth is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;
0018D9r 3                       ; with  : D+- O< IF DNEGATE THEN ;
0018D9r 3                       ; """
0018D9r 3               
0018D9r 3               xt_m_star:
0018D9r 3  20 rr rr                     jsr underflow_2
0018DCr 3               
0018DCr 3                               ; figure out the sign
0018DCr 3  B5 01                        lda 1,x         ; MSB of n1
0018DEr 3  55 03                        eor 3,x         ; MSB of n2
0018E0r 3               
0018E0r 3                               ; UM* uses all kinds of temporary variables so we don't
0018E0r 3                               ; risk a conflict but just take the cycle hit and push
0018E0r 3                               ; this to the stack
0018E0r 3  48                           pha
0018E1r 3               
0018E1r 3                               ; get the absolute value of both numbers so we can feed
0018E1r 3                               ; them to UM*, which does the real work
0018E1r 3  20 rr rr                     jsr xt_abs
0018E4r 3  20 rr rr                     jsr xt_swap
0018E7r 3  20 rr rr                     jsr xt_abs
0018EAr 3               
0018EAr 3  20 rr rr                     jsr xt_um_star          ; ( d )
0018EDr 3               
0018EDr 3                               ; handle the sign
0018EDr 3  68                           pla
0018EEr 3  10 03                        bpl @done
0018F0r 3               
0018F0r 3  20 rr rr                     jsr xt_dnegate
0018F3r 3               @done:
0018F3r 3  60           z_m_star:       rts
0018F4r 3               
0018F4r 3               
0018F4r 3               
0018F4r 3               ; ## MARKER ( "name" -- ) "Create a deletion boundry"
0018F4r 3               ; ## "marker"  auto  ANS core ext
0018F4r 3                       ; """https://forth-standard.org/standard/core/MARKER
0018F4r 3                       ; This word replaces FORGET in earlier Forths. Old entries are not
0018F4r 3                       ; actually deleted, but merely overwritten by restoring CP and DP.
0018F4r 3                       ; Run the named word at a later time to restore all of the wordlists
0018F4r 3                       ; to their state when the word was created with marker.  Any words
0018F4r 3                       ; created after the marker (including the marker) will be forgotten.
0018F4r 3                       ;
0018F4r 3                       ; To do this, we want to end up with something that jumps to a
0018F4r 3                       ; run-time component with a link to the original CP and DP values:
0018F4r 3                       ;
0018F4r 3                       ;       jsr marker_runtime
0018F4r 3                       ;       <Original CP MSB>
0018F4r 3                       ;       <Original CP LSB>
0018F4r 3                       ;       <Original DP MSB> ( for CURRENT wordlist )
0018F4r 3                       ;       <Original DP LSB>
0018F4r 3                       ;       < USER variables from offset 4 to 39 >
0018F4r 3                       ;
0018F4r 3                       ;       The user variables include:
0018F4r 3                       ;       CURRENT (byte variable)
0018F4r 3                       ;       <All wordlists> (currently 12) (cell array)
0018F4r 3                       ;       <#ORDER> (byte variable)
0018F4r 3                       ;       <All search order> (currently 9) (byte array)
0018F4r 3                       ;
0018F4r 3                       ; This code uses tmp1 and tmp2
0018F4r 3                       ; """
0018F4r 3               
0018F4r 3               xt_marker:
0018F4r 3                               ; Before we do anything, we need to save CP, which
0018F4r 3                               ; after all is the whole point of this operation. CREATE
0018F4r 3                               ; uses tmp1 and tmp2, so we take the speed hit and push stuff
0018F4r 3                               ; to the stack
0018F4r 3  20 rr rr                     jsr current_to_dp
0018F7r 3               
0018F7r 3  A5 rr                        lda dp
0018F9r 3  48                           pha
0018FAr 3  A5 rr                        lda dp+1
0018FCr 3  48                           pha
0018FDr 3               
0018FDr 3  A5 rr                        lda cp
0018FFr 3  48                           pha
001900r 3  A5 rr                        lda cp+1
001902r 3  48                           pha
001903r 3               
001903r 3  20 rr rr                     jsr xt_create
001906r 3               
001906r 3                               ; By default, CREATE installs a subroutine jump to DOVAR, which
001906r 3                               ; we have to replace by a jump to marker_runtime. We back up
001906r 3                               ; two bytes and then overwrite the address
001906r 3  A5 rr                        lda cp          ; LSB
001908r 3  38                           sec
001909r 3  E9 02                        sbc #2
00190Br 3  85 rr                        sta cp
00190Dr 3               
00190Dr 3  A5 rr                        lda cp+1        ; MSB
00190Fr 3  E9 00                        sbc #0          ; we only care about the borrow
001911r 3  85 rr                        sta cp+1
001913r 3               
001913r 3                               ; Add the address of the runtime component
001913r 3  A0 rr                        ldy #>marker_runtime
001915r 3  A9 rr                        lda #<marker_runtime
001917r 3  20 rr rr                     jsr cmpl_word
00191Ar 3               
00191Ar 3                               ; Add original CP as payload
00191Ar 3  7A                           ply                     ; MSB
00191Br 3  68                           pla                     ; LSB
00191Cr 3  20 rr rr                     jsr cmpl_word
00191Fr 3               
00191Fr 3                               ; Add original DP as payload
00191Fr 3  7A                           ply                     ; MSB
001920r 3  68                           pla                     ; LSB
001921r 3  20 rr rr                     jsr cmpl_word
001924r 3               
001924r 3                               ; Add the user variables for the wordlists and search order.
001924r 3                               ; We're compiling them in byte order.
001924r 3  A0 04                        ldy #4                  ; Start at CURRENT
001926r 3               @marker_loop:
001926r 3  B1 rr                        lda (up),y
001928r 3  20 rr rr                     jsr cmpl_a
00192Br 3  C8                           iny
00192Cr 3  98                           tya
00192Dr 3  C9 28                        cmp #40                 ; One past the end of the search order.
00192Fr 3  D0 F5                        bne @marker_loop
001931r 3               
001931r 3  60           z_marker:       rts
001932r 3               
001932r 3               
001932r 3               
001932r 3               marker_runtime:
001932r 3                       ; """Restore Dictionary and memory (DP and CP) to where the were
001932r 3                       ; when this marker was defined. We arrive here with the return
001932r 3                       ; address on the Return Stack in the usual 65c02 format
001932r 3                       ; """
001932r 3               
001932r 3                               ; Get the address of the string address off the stack and
001932r 3                               ; increase by one because of the RTS mechanics
001932r 3  68                           pla
001933r 3  85 rr                        sta tmp1        ; LSB of address
001935r 3  68                           pla
001936r 3  85 rr                        sta tmp1+1      ; MSB of address
001938r 3               
001938r 3  E6 rr                        inc tmp1
00193Ar 3  D0 02                        bne @1
00193Cr 3  E6 rr                        inc tmp1+1
00193Er 3               @1:
00193Er 3  A0 00                        ldy #0
001940r 3               
001940r 3                               ; CP was stored first
001940r 3  B1 rr                        lda (tmp1),y
001942r 3  85 rr                        sta cp
001944r 3  C8                           iny
001945r 3  B1 rr                        lda (tmp1),y
001947r 3  85 rr                        sta cp+1
001949r 3               
001949r 3                               ; Next was DP
001949r 3  C8                           iny
00194Ar 3  B1 rr                        lda (tmp1),y
00194Cr 3  85 rr                        sta dp
00194Er 3  C8                           iny
00194Fr 3  B1 rr                        lda (tmp1),y
001951r 3  85 rr                        sta dp+1
001953r 3               
001953r 3                               ; Conveniently, the offset into both tmp1 and UP is 4
001953r 3                               ; to start restoring the wordlists and search order.
001953r 3  A0 04                        ldy #4
001955r 3               
001955r 3               @marker_restore_loop:
001955r 3                               ; Copy from the dictionary back on top of the wordlists
001955r 3                               ; and search order.
001955r 3  B1 rr                        lda (tmp1), y
001957r 3  91 rr                        sta (up), y
001959r 3  C8                           iny
00195Ar 3  98                           tya
00195Br 3  C9 28                        cmp #40                 ; One past the end of the search order.
00195Dr 3  D0 F6                        bne @marker_restore_loop
00195Fr 3               
00195Fr 3  20 rr rr                     jsr dp_to_current       ; Move the CURRENT DP back.
001962r 3               
001962r 3                               ; The return instruction takes us back to the original caller
001962r 3  60                           rts
001963r 3               
001963r 3               
001963r 3               
001963r 3               ; ## MAX ( n n -- n ) "Keep larger of two numbers"
001963r 3               ; ## "max"  auto  ANS core
001963r 3                       ; """https://forth-standard.org/standard/core/MAX
001963r 3                       ; Compare TOS and NOS and keep which one is larger. Adapted from
001963r 3                       ; Lance A. Leventhal "6502 Assembly Language Subroutines". Negative
001963r 3                       ; Flag indicates which number is larger. See also
001963r 3                       ; http://6502.org/tutorials/compare_instructions.html and
001963r 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001963r 3                       ; """
001963r 3               
001963r 3               xt_max:
001963r 3  20 rr rr                     jsr underflow_2
001966r 3               
001966r 3                               ; Compare LSB. We do this first to set the carry flag
001966r 3  B5 00                        lda 0,x         ; LSB of TOS
001968r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets the carry
00196Ar 3               
00196Ar 3  B5 01                        lda 1,x         ; MSB of TOS
00196Cr 3  F5 03                        sbc 3,x         ; MSB of NOS
00196Er 3  50 02                        bvc @no_overflow
001970r 3               
001970r 3                               ; handle overflow, because we use signed numbers
001970r 3  49 80                        eor #$80        ; complement negative flag
001972r 3               
001972r 3               @no_overflow:
001972r 3                               ; if negative, NOS is larger and needs to be kept
001972r 3  30 08                        bmi @keep_nos
001974r 3               
001974r 3                               ; move TOS to NOS
001974r 3  B5 00                        lda 0,x
001976r 3  95 02                        sta 2,x
001978r 3  B5 01                        lda 1,x
00197Ar 3  95 03                        sta 3,x
00197Cr 3               
00197Cr 3               @keep_nos:
00197Cr 3  E8                           inx
00197Dr 3  E8                           inx
00197Er 3               
00197Er 3  60           z_max:          rts
00197Fr 3               
00197Fr 3               
00197Fr 3               
00197Fr 3               ; ## MIN ( n n -- n ) "Keep smaller of two numbers"
00197Fr 3               ; ## "min"  auto  ANS core
00197Fr 3                       ; """https://forth-standard.org/standard/core/MIN
00197Fr 3                       ; Adapted from Lance A. Leventhal "6502 Assembly Language
00197Fr 3                       ; Subroutines." Negative Flag indicateds which number is larger. See
00197Fr 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
00197Fr 3                       ; """
00197Fr 3               
00197Fr 3               xt_min:
00197Fr 3  20 rr rr                     jsr underflow_2
001982r 3               
001982r 3                               ; compare LSB. We do this first to set the carry flag
001982r 3  B5 00                        lda 0,x         ; LSB of TOS
001984r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets carry
001986r 3               
001986r 3  B5 01                        lda 1,x         ; MSB of TOS
001988r 3  F5 03                        sbc 3,x         ; MSB of NOS
00198Ar 3  50 02                        bvc @no_overflow
00198Cr 3               
00198Cr 3                               ; handle overflow because we use signed numbers
00198Cr 3  49 80                        eor #$80
00198Er 3               
00198Er 3               @no_overflow:
00198Er 3                               ; if negative, NOS is larger and needs to be dumped
00198Er 3  10 08                        bpl @keep_nos
001990r 3               
001990r 3                               ; move TOS to NOS
001990r 3  B5 00                        lda 0,x
001992r 3  95 02                        sta 2,x
001994r 3  B5 01                        lda 1,x
001996r 3  95 03                        sta 3,x
001998r 3               
001998r 3               @keep_nos:
001998r 3  E8                           inx
001999r 3  E8                           inx
00199Ar 3               
00199Ar 3  60           z_min:          rts
00199Br 3               
00199Br 3               
00199Br 3               
00199Br 3               ; ## MINUS ( n n -- n ) "Subtract TOS from NOS"
00199Br 3               ; ## "-"  auto  ANS core
00199Br 3                       ; """https://forth-standard.org/standard/core/Minus"""
00199Br 3               xt_minus:
00199Br 3  20 rr rr                     jsr underflow_2
00199Er 3               
00199Er 3  38                           sec
00199Fr 3  B5 02                        lda 2,x         ; LSB
0019A1r 3  F5 00                        sbc 0,x
0019A3r 3  95 02                        sta 2,x
0019A5r 3               
0019A5r 3  B5 03                        lda 3,x         ; MSB
0019A7r 3  F5 01                        sbc 1,x
0019A9r 3  95 03                        sta 3,x
0019ABr 3               
0019ABr 3  E8                           inx
0019ACr 3  E8                           inx
0019ADr 3               
0019ADr 3  60           z_minus:        rts
0019AEr 3               
0019AEr 3               
0019AEr 3               ; ## MINUS_LEADING ( addr1 u1 -- addr2 u2 ) "Remove leading spaces"
0019AEr 3               ; ## "-leading"  auto  Tali String
0019AEr 3                       ; """Remove leading whitespace. This is the reverse of -TRAILING
0019AEr 3                       ; """
0019AEr 3               
0019AEr 3               xt_minus_leading:
0019AEr 3  20 rr rr                     jsr underflow_2
0019B1r 3               
0019B1r 3               @loop:
0019B1r 3                               ; Quit if we were given an empty string. This also terminates
0019B1r 3                               ; the main loop
0019B1r 3  B5 00                        lda 0,x
0019B3r 3  15 01                        ora 1,x
0019B5r 3  F0 0F                        beq @done
0019B7r 3               
0019B7r 3  A1 02                        lda (2,x)               ; get first character
0019B9r 3  20 rr rr                     jsr is_whitespace
0019BCr 3  90 08                        bcc @done
0019BEr 3               
0019BEr 3                               ; It's whitespace, move one down
0019BEr 3  20 rr rr                     jsr xt_one              ; ( addr u 1 )
0019C1r 3  20 rr rr                     jsr xt_slash_string     ; ( addr+ u-1 )
0019C4r 3               
0019C4r 3  80 EB                        bra @loop
0019C6r 3               @done:
0019C6r 3               z_minus_leading:
0019C6r 3  60                           rts
0019C7r 3               
0019C7r 3               
0019C7r 3               
0019C7r 3               ; ## MINUS_TRAILING ( addr u1 -- addr u2 ) "Remove trailing spaces"
0019C7r 3               ; ## "-trailing"  auto  ANS string
0019C7r 3                       ; """https://forth-standard.org/standard/string/MinusTRAILING
0019C7r 3                       ; Remove trailing spaces
0019C7r 3                       ; """
0019C7r 3               
0019C7r 3               xt_minus_trailing:
0019C7r 3  20 rr rr                     jsr underflow_2
0019CAr 3               
0019CAr 3                               ; if length entry is zero, return a zero and leave the
0019CAr 3                               ; address part untouched
0019CAr 3  B5 00                        lda 0,x         ; LSB of n
0019CCr 3  15 01                        ora 1,x         ; MSB of n
0019CEr 3  F0 33                        beq @done
0019D0r 3               
0019D0r 3                               ; Compute address of last char in tmp1 as
0019D0r 3                               ; addr + u1 - 1
0019D0r 3               
0019D0r 3                               ; addr + u1
0019D0r 3  18                           clc
0019D1r 3  B5 02                        lda 2,x         ; LSB of addr
0019D3r 3  75 00                        adc 0,x
0019D5r 3  85 rr                        sta tmp1
0019D7r 3  B5 03                        lda 3,x         ; MSB of addr
0019D9r 3  75 01                        adc 1,x
0019DBr 3  85 rr                        sta tmp1+1
0019DDr 3               
0019DDr 3                               ; - 1
0019DDr 3  A5 rr                        lda tmp1
0019DFr 3  D0 02                        bne @1
0019E1r 3  C6 rr                        dec tmp1+1
0019E3r 3               @1:
0019E3r 3  C6 rr                        dec tmp1
0019E5r 3               
0019E5r 3               @loop:
0019E5r 3                               ; While spaces are found, move tmp1 backwards and
0019E5r 3                               ; decrease the count on the data stack.
0019E5r 3  B2 rr                        lda (tmp1)
0019E7r 3  C9 20                        cmp #AscSP
0019E9r 3  D0 18                        bne @done
0019EBr 3               
0019EBr 3                               ; Move back one address.
0019EBr 3  A5 rr                        lda tmp1
0019EDr 3  D0 02                        bne @2
0019EFr 3  C6 rr                        dec tmp1+1
0019F1r 3               @2:
0019F1r 3  C6 rr                        dec tmp1
0019F3r 3               
0019F3r 3                               ; Decrement count by one.
0019F3r 3  B5 00                        lda 0,x
0019F5r 3  D0 02                        bne @3
0019F7r 3  D6 01                        dec 1,x
0019F9r 3               @3:
0019F9r 3  D6 00                        dec 0,x
0019FBr 3               
0019FBr 3                               ; Check if there are any characters left.
0019FBr 3  B5 00                        lda 0,x
0019FDr 3  15 01                        ora 1,x
0019FFr 3  F0 02                        beq @done       ; Count has reached zero - we're done!
001A01r 3               
001A01r 3  80 E2                        bra @loop
001A03r 3               
001A03r 3               @done:
001A03r 3               z_minus_trailing:
001A03r 3  60                           rts
001A04r 3               
001A04r 3               
001A04r 3               
001A04r 3               ; ## MOD ( n1 n2 -- n ) "Divide NOS by TOS and return the remainder"
001A04r 3               ; ## "mod"  auto  ANS core
001A04r 3                       ; """https://forth-standard.org/standard/core/MOD
001A04r 3                       ;
001A04r 3                       ; The Forth definition of this word is  : MOD /MOD DROP ;
001A04r 3                       ; so we just jump to xt_slash_mod and dump the actual result.
001A04r 3                       ; """
001A04r 3               xt_mod:
001A04r 3  20 rr rr                     jsr underflow_2
001A07r 3               
001A07r 3  20 rr rr                     jsr xt_slash_mod
001A0Ar 3               
001A0Ar 3  E8                           inx             ; DROP
001A0Br 3  E8                           inx
001A0Cr 3               z_mod:
001A0Cr 3  60                           rts
001A0Dr 3               
001A0Dr 3               
001A0Dr 3               ; ## MOVE ( addr1 addr2 u -- ) "Copy bytes"
001A0Dr 3               ; ## "move"  auto  ANS core
001A0Dr 3                       ; """https://forth-standard.org/standard/core/MOVE
001A0Dr 3                       ; Copy u "address units" from addr1 to addr2. Since our address
001A0Dr 3                       ; units are bytes, this is just a front-end for CMOVE and CMOVE>. This
001A0Dr 3                       ; is actually the only one of these three words that is in the CORE
001A0Dr 3                       ; set.
001A0Dr 3                       ;
001A0Dr 3                       ; This word must not be natively compiled.
001A0Dr 3                       ; """
001A0Dr 3               
001A0Dr 3               xt_move:
001A0Dr 3                               ; We let CMOVE and CMOVE> check if there is underflow or
001A0Dr 3                               ; we've been told to copy zero bytes
001A0Dr 3               
001A0Dr 3                               ; compare MSB first
001A0Dr 3  B5 03                        lda 3,x                 ; MSB of addr2
001A0Fr 3  D5 05                        cmp 5,x                 ; MSB of addr1
001A11r 3  F0 05                        beq @lsb                ; wasn't helpful, move to LSB
001A13r 3  B0 0E                        bcs @to_move_up         ; we want CMOVE>
001A15r 3               
001A15r 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001A18r 3               
001A18r 3               @lsb:
001A18r 3                               ; MSB were equal, so do the whole thing over with LSB
001A18r 3  B5 02                        lda 2,x                 ; LSB of addr2
001A1Ar 3  D5 04                        cmp 4,x                 ; LSB of addr1
001A1Cr 3  F0 08                        beq @equal              ; LSB is equal as well
001A1Er 3  B0 03                        bcs @to_move_up         ; we want CMOVE>
001A20r 3               
001A20r 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001A23r 3               
001A23r 3               @to_move_up:
001A23r 3  4C rr rr                     jmp xt_cmove_up         ; JSR/RTS
001A26r 3               @equal:
001A26r 3                               ; drop three entries from Data Stack
001A26r 3  8A                           txa
001A27r 3  18                           clc
001A28r 3  69 06                        adc #6
001A2Ar 3  AA                           tax
001A2Br 3               
001A2Br 3  60           z_move:         rts
001A2Cr 3               
001A2Cr 3               
001A2Cr 3               
001A2Cr 3               ; ## NAME_TO_INT ( nt -- xt ) "Convert Name Token to Execute Token"
001A2Cr 3               ; ## "name>int"  tested  Gforth
001A2Cr 3                       ; """See
001A2Cr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001A2Cr 3                       ; """
001A2Cr 3               
001A2Cr 3               xt_name_to_int:
001A2Cr 3  20 rr rr                     jsr underflow_1
001A2Fr 3               
001A2Fr 3                               ; The xt starts four bytes down from the nt
001A2Fr 3  B5 00                        lda 0,x
001A31r 3  18                           clc
001A32r 3  69 04                        adc #4
001A34r 3  85 rr                        sta tmp3
001A36r 3               
001A36r 3  B5 01                        lda 1,x
001A38r 3  90 01                        bcc @done
001A3Ar 3  1A                           inc
001A3Br 3               @done:
001A3Br 3  85 rr                        sta tmp3+1
001A3Dr 3               
001A3Dr 3  A0 00                        ldy #0
001A3Fr 3  B1 rr                        lda (tmp3),y
001A41r 3  95 00                        sta 0,x
001A43r 3  C8                           iny
001A44r 3  B1 rr                        lda (tmp3),y
001A46r 3  95 01                        sta 1,x
001A48r 3               
001A48r 3  60           z_name_to_int:  rts
001A49r 3               
001A49r 3               
001A49r 3               
001A49r 3               ; ## NAME_TO_STRING ( nt -- addr u ) "Given a name token, return string of word"
001A49r 3               ; ## "name>string"  tested  Gforth
001A49r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html"""
001A49r 3               
001A49r 3               xt_name_to_string:
001A49r 3  20 rr rr                     jsr underflow_1
001A4Cr 3               
001A4Cr 3  CA                           dex
001A4Dr 3  CA                           dex
001A4Er 3               
001A4Er 3                               ; the length of the string is the first byte of the
001A4Er 3                               ; header pointed to by nt
001A4Er 3  A1 02                        lda (2,x)
001A50r 3  95 00                        sta 0,x
001A52r 3  74 01                        stz 1,x
001A54r 3               
001A54r 3                               ; the string itself always starts eight bytes down
001A54r 3  B5 02                        lda 2,x         ; LSB
001A56r 3  18                           clc
001A57r 3  69 08                        adc #8
001A59r 3  A8                           tay
001A5Ar 3  B5 03                        lda 3,x         ; MSB
001A5Cr 3  69 00                        adc #0          ; just need carry
001A5Er 3  95 03                        sta 3,x
001A60r 3  94 02                        sty 2,x
001A62r 3               
001A62r 3               z_name_to_string:
001A62r 3  60                           rts
001A63r 3               
001A63r 3               
001A63r 3               ; ## NC_LIMIT ( -- addr ) "Return address where NC-LIMIT value is kept"
001A63r 3               ; ## "nc-limit"  tested  Tali Forth
001A63r 3               
001A63r 3               xt_nc_limit:
001A63r 3  CA                           dex
001A64r 3  CA                           dex
001A65r 3  A9 rr                        lda #<nc_limit
001A67r 3  95 00                        sta 0,x
001A69r 3  A9 rr                        lda #>nc_limit
001A6Br 3  95 01                        sta 1,x
001A6Dr 3               
001A6Dr 3  60           z_nc_limit:     rts
001A6Er 3               
001A6Er 3               
001A6Er 3               
001A6Er 3               ; ## NEGATE ( n -- n ) "Two's complement"
001A6Er 3               ; ## "negate"  auto  ANS core
001A6Er 3                       ; """https://forth-standard.org/standard/core/NEGATE"""
001A6Er 3               xt_negate:
001A6Er 3  20 rr rr                     jsr underflow_1
001A71r 3               
001A71r 3  A9 00                	lda #0
001A73r 3  38                           sec
001A74r 3  F5 00                        sbc 0,x         ; LSB
001A76r 3  95 00                        sta 0,x
001A78r 3               
001A78r 3  A9 00                        lda #0
001A7Ar 3  F5 01                        sbc 1,x         ; MSB
001A7Cr 3  95 01                        sta 1,x
001A7Er 3               
001A7Er 3  60           z_negate:       rts
001A7Fr 3               
001A7Fr 3               
001A7Fr 3               ; ## NEVER_NATIVE ( -- ) "Flag last word as never natively compiled"
001A7Fr 3               ; ## "never-native"  auto  Tali Forth
001A7Fr 3               xt_never_native:
001A7Fr 3  20 rr rr                     jsr current_to_dp
001A82r 3  A0 01                        ldy #1          ; offset for status byte
001A84r 3  B1 rr                        lda (dp),y
001A86r 3  09 08                        ora #NN         ; Make sure NN flag is set
001A88r 3  29 FD                        and #$ff-AN     ; and AN flag is clear.
001A8Ar 3  91 rr                        sta (dp),y
001A8Cr 3               z_never_native:
001A8Cr 3  60                           rts
001A8Dr 3               
001A8Dr 3               
001A8Dr 3               ; ## NIP ( b a -- a ) "Delete NOS"
001A8Dr 3               ; ## "nip"  auto  ANS core ext
001A8Dr 3                       ; """https://forth-standard.org/standard/core/NIP"""
001A8Dr 3               xt_nip:
001A8Dr 3  20 rr rr                     jsr underflow_2
001A90r 3               
001A90r 3  B5 00                        lda 0,x         ; LSB
001A92r 3  95 02                        sta 2,x
001A94r 3  B5 01                        lda 1,x         ; MSB
001A96r 3  95 03                        sta 3,x
001A98r 3               
001A98r 3  E8                           inx
001A99r 3  E8                           inx
001A9Ar 3               
001A9Ar 3  60           z_nip:          rts
001A9Br 3               
001A9Br 3               
001A9Br 3               ; ## NOT_EQUALS ( n m -- f ) "Return a true flag if TOS != NOS"
001A9Br 3               ; ## "<>"  auto  ANS core ext
001A9Br 3                       ; """https://forth-standard.org/standard/core/ne
001A9Br 3                       ;
001A9Br 3                       ; This is just a variant of EQUAL, we code it separately
001A9Br 3                       ; for speed.
001A9Br 3                       ; """
001A9Br 3               
001A9Br 3               xt_not_equals:
001A9Br 3  20 rr rr                     jsr underflow_2
001A9Er 3               
001A9Er 3  A0 00                        ldy #0                  ; default is true
001AA0r 3               
001AA0r 3  B5 00                        lda 0,x                 ; LSB
001AA2r 3  D5 02                        cmp 2,x
001AA4r 3  D0 0A                        bne @not_equal
001AA6r 3               
001AA6r 3                               ; LSB is equal
001AA6r 3  B5 01                        lda 1,x                 ; MSB
001AA8r 3  D5 03                        cmp 3,x
001AAAr 3  D0 04                        bne @not_equal
001AACr 3               
001AACr 3  A9 FF                        lda #$FF
001AAEr 3  80 01                        bra @done
001AB0r 3               
001AB0r 3               @not_equal:
001AB0r 3  88                           dey                     ; drop thru to done
001AB1r 3               
001AB1r 3               @done:
001AB1r 3  98                           tya
001AB2r 3  E8                           inx
001AB3r 3  E8                           inx
001AB4r 3  95 00                        sta 0,x
001AB6r 3  95 01                        sta 1,x
001AB8r 3               
001AB8r 3  60           z_not_equals:   rts
001AB9r 3               
001AB9r 3               
001AB9r 3               
001AB9r 3               ; ## NOT_ROTE ( a b c -- c a b ) "Rotate upwards"
001AB9r 3               ; ## "-rot"  auto  Gforth
001AB9r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Data-stack.html"""
001AB9r 3               
001AB9r 3               xt_not_rote:
001AB9r 3  20 rr rr                     jsr underflow_3
001ABCr 3               
001ABCr 3  B4 01                        ldy 1,x         ; MSB first
001ABEr 3  B5 03                        lda 3,x
001AC0r 3  95 01                        sta 1,x
001AC2r 3               
001AC2r 3  B5 05                        lda 5,x
001AC4r 3  95 03                        sta 3,x
001AC6r 3  94 05                        sty 5,x
001AC8r 3               
001AC8r 3  B4 00                        ldy 0,x         ; LSB second
001ACAr 3  B5 02                        lda 2,x
001ACCr 3  95 00                        sta 0,x
001ACEr 3               
001ACEr 3  B5 04                        lda 4,x
001AD0r 3  95 02                        sta 2,x
001AD2r 3  94 04                        sty 4,x
001AD4r 3               
001AD4r 3  60           z_not_rote:     rts
001AD5r 3               
001AD5r 3               
001AD5r 3               
001AD5r 3               ; ## NUMBER ( addr u -- u | d ) "Convert a number string"
001AD5r 3               ; ## "number"  auto  Tali Forth
001AD5r 3                       ; """Convert a number string to a double or single cell number. This
001AD5r 3                       ; is a wrapper for >NUMBER and follows the convention set out in the
001AD5r 3                       ; "Forth Programmer's Handbook" (Conklin & Rather) 3rd edition p. 87.
001AD5r 3                       ; Based in part on the "Starting Forth" code
001AD5r 3                       ; https://www.forth.com/starting-forth/10-input-output-operators/
001AD5r 3                       ; Gforth uses S>NUMBER? and S>UNUMBER? which return numbers and a flag
001AD5r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
001AD5r 3                       ; Another difference to Gforth is that we follow ANS Forth that the
001AD5r 3                       ; dot to signal a double cell number is required to be the last
001AD5r 3                       ; character of the string.
001AD5r 3                       ;
001AD5r 3                       ; Number calls >NUMBER which in turn calls UM*,
001AD5r 3                       ; which uses tmp1, tmp2, and tmp3, so we can't use them here, which is
001AD5r 3                       ; a pain.
001AD5r 3                       ;"""
001AD5r 3               
001AD5r 3               xt_number:
001AD5r 3  20 rr rr                     jsr underflow_2
001AD8r 3               
001AD8r 3                               ; we keep the flags for sign and double in tmpdsp because
001AD8r 3                               ; we've run out of temporary variables
001AD8r 3  64 rr                        stz tmpdsp      ; flag for double
001ADAr 3  64 rr                        stz tmpdsp+1    ; flag for minus
001ADCr 3               
001ADCr 3                               ; If the first character is a minus, strip it off and set
001ADCr 3                               ; the flag
001ADCr 3  A1 02                        lda (2,x)
001ADEr 3  C9 2D                        cmp #$2D        ; ASCII for "-"
001AE0r 3  D0 0A                        bne @check_dot
001AE2r 3               
001AE2r 3                               ; It's a minus
001AE2r 3  C6 rr                        dec tmpdsp+1
001AE4r 3  F6 02                        inc 2,x         ; start one character later
001AE6r 3  D0 02                        bne @1
001AE8r 3  F6 03                        inc 3,x
001AEAr 3               @1:
001AEAr 3  D6 00                        dec 0,x         ; decrease string length by one
001AECr 3               
001AECr 3               @check_dot:
001AECr 3                               ; If the last character is a dot, strip it off and set a
001AECr 3                               ; flag. We can use tmptos as a temporary variable
001AECr 3  B5 02                        lda 2,x         ; LSB of address
001AEEr 3  18                           clc
001AEFr 3  75 00                        adc 0,x         ; length of string
001AF1r 3  85 rr                        sta tmptos
001AF3r 3  B5 03                        lda 3,x
001AF5r 3  69 00                        adc #0          ; only need carry
001AF7r 3  85 rr                        sta tmptos+1
001AF9r 3               
001AF9r 3                               ; tmptos now points to the first character after the string,
001AF9r 3                               ; but we need the last character
001AF9r 3  A5 rr                        lda tmptos
001AFBr 3  D0 02                        bne @2
001AFDr 3  C6 rr                        dec tmptos+1
001AFFr 3               @2:
001AFFr 3  C6 rr                        dec tmptos
001B01r 3               
001B01r 3  B2 rr                        lda (tmptos)
001B03r 3  C9 2E                        cmp #'.'
001B05r 3  D0 04                        bne @main
001B07r 3               
001B07r 3                               ; We have a dot, which means this is a double number. Flag
001B07r 3                               ; the fact and reduce string length by one
001B07r 3  C6 rr                        dec tmpdsp
001B09r 3  D6 00                        dec 0,x
001B0Br 3               
001B0Br 3               @main:
001B0Br 3                               ; Set up stack for subroutine jump to >NUMBER, which means
001B0Br 3                               ; we have to go ( addr u --> ud addr u )
001B0Br 3  CA                           dex
001B0Cr 3  CA                           dex
001B0Dr 3  CA                           dex
001B0Er 3  CA                           dex
001B0Fr 3               
001B0Fr 3  B5 04                        lda 4,x         ; LSB of length
001B11r 3  95 00                        sta 0,x
001B13r 3  74 01                        stz 1,x         ; MSB, max length 255 chars
001B15r 3               
001B15r 3  B5 06                        lda 6,x         ; LSB of address
001B17r 3  95 02                        sta 2,x
001B19r 3  B5 07                        lda 7,x         ; MSB of address
001B1Br 3  95 03                        sta 3,x
001B1Dr 3               
001B1Dr 3  74 04                        stz 4,x         ; clear space for ud
001B1Fr 3  74 05                        stz 5,x
001B21r 3  74 06                        stz 6,x
001B23r 3  74 07                        stz 7,x
001B25r 3               
001B25r 3  20 rr rr                     jsr xt_to_number        ; (ud addr u -- ud addr u )
001B28r 3               
001B28r 3                               ; test length of returned string, which should be zero
001B28r 3  B5 00                        lda 0,x
001B2Ar 3  F0 15                        beq @all_converted
001B2Cr 3               
001B2Cr 3                               ; Something went wrong, we still have characters left over,
001B2Cr 3                               ; so we print an error and abort. If the NUMBER was called
001B2Cr 3                               ; by INTERPRET, we've already checked for Forth words, so
001B2Cr 3                               ; we're in deep trouble one way or another
001B2Cr 3  A9 3E                        lda #$3E        ; ASCII for ">"
001B2Er 3  20 rr rr                     jsr emit_a
001B31r 3  20 rr rr                     jsr xt_type
001B34r 3  A9 3C                        lda #$3C        ; ASCII for "<"
001B36r 3  20 rr rr                     jsr emit_a
001B39r 3  20 rr rr                     jsr xt_space
001B3Cr 3               
001B3Cr 3  A9 08                        lda #err_syntax
001B3Er 3  4C rr rr                     jmp error
001B41r 3               
001B41r 3               @all_converted:
001B41r 3                               ; We can drop the string info
001B41r 3  E8                           inx
001B42r 3  E8                           inx
001B43r 3  E8                           inx
001B44r 3  E8                           inx
001B45r 3               
001B45r 3                               ; We have a double-cell number on the Data Stack that might
001B45r 3                               ; actually have a minus and might actually be single-cell
001B45r 3  A5 rr                        lda tmpdsp      ; flag for double
001B47r 3  F0 0D                        beq @single
001B49r 3               
001B49r 3                               ; Set status bit 5 to indicate this is a double number
001B49r 3  A9 20                        lda #%00100000
001B4Br 3  04 rr                        tsb status
001B4Dr 3               
001B4Dr 3                               ; This is a double cell number. If it had a minus, we'll have
001B4Dr 3                               ; to negate it
001B4Dr 3  A5 rr                        lda tmpdsp+1
001B4Fr 3  F0 12                        beq @done       ; no minus, all done
001B51r 3               
001B51r 3  20 rr rr                     jsr xt_dnegate
001B54r 3               
001B54r 3  80 0D                        bra @done
001B56r 3               
001B56r 3               @single:
001B56r 3                               ; This is a single number, so we just drop the top cell
001B56r 3  E8                           inx
001B57r 3  E8                           inx
001B58r 3               
001B58r 3                               ; Clear status bit 5 to indicate this is a single number
001B58r 3  A9 20                        lda #%00100000
001B5Ar 3  14 rr                        trb status
001B5Cr 3               
001B5Cr 3                               ; If we had a minus, we'll have to negate it
001B5Cr 3  A5 rr                        lda tmpdsp+1
001B5Er 3  F0 03                        beq @done       ; no minus, all done
001B60r 3               
001B60r 3  20 rr rr                     jsr xt_negate
001B63r 3               @done:
001B63r 3  60           z_number:       rts
001B64r 3               
001B64r 3               
001B64r 3               
001B64r 3               ; ## NUMBER_SIGN ( ud -- ud ) "Add character to pictured output string"
001B64r 3               ; ## "#"  auto  ANS core
001B64r 3                       ; """https://forth-standard.org/standard/core/num
001B64r 3                       ; Add one char to the beginning of the pictured output string.
001B64r 3                       ;
001B64r 3                       ; Based on
001B64r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001B64r 3                       ; Forth code  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
001B64r 3                       ; """
001B64r 3               xt_number_sign:
001B64r 3  20 rr rr                     jsr underflow_2         ; double number
001B67r 3               
001B67r 3  20 rr rr                     jsr xt_base
001B6Ar 3  20 rr rr                     jsr xt_fetch            ; ( ud1 base )
001B6Dr 3               
001B6Dr 3                               ; The following code is the ancient Forth word UD/MOD, which in
001B6Dr 3                               ; various Forths (including Gforth) lives on under the hood,
001B6Dr 3                               ; even though it's not an ANS standard word, it doesn't appear
001B6Dr 3                               ; in the docs, it's only used here, and there are no tests for
001B6Dr 3                               ; it. This is why we got rid of it. We'll be converting this
001B6Dr 3                               ; mess to something more sane in the long run.
001B6Dr 3  20 rr rr                     jsr xt_to_r             ; >r
001B70r 3  20 rr rr                     jsr xt_zero             ; 0
001B73r 3  20 rr rr                     jsr xt_r_fetch          ; r@
001B76r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001B79r 3  20 rr rr                     jsr xt_rot              ; rot
001B7Cr 3  20 rr rr                     jsr xt_rot              ; rot
001B7Fr 3  20 rr rr                     jsr xt_r_from           ; r>
001B82r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001B85r 3  20 rr rr                     jsr xt_rot              ; rot
001B88r 3                               ; end of UD/MOD ( rem ud )
001B88r 3               
001B88r 3  20 rr rr                     jsr xt_rot              ; ( ud rem )
001B8Br 3               
001B8Br 3                               ; Convert the number that is left over to an ASCII character. We
001B8Br 3                               ; use a string lookup for speed. Use either abc_str_lower for
001B8Br 3                               ; lower case or abc_str_upper for upper case (prefered)
001B8Br 3  B5 00                        lda 0,x
001B8Dr 3  A8                           tay
001B8Er 3  B9 rr rr                     lda s_abc_upper,y
001B91r 3  95 00                        sta 0,x
001B93r 3  74 01                        stz 1,x                 ; paranoid; now ( ud char )
001B95r 3               
001B95r 3  20 rr rr                     jsr xt_hold
001B98r 3               
001B98r 3               z_number_sign:
001B98r 3  60                           rts
001B99r 3               
001B99r 3               
001B99r 3               ; ## NUMBER_SIGN_GREATER ( d -- addr u ) "Finish pictured number conversion"
001B99r 3               ; ## "#>"  auto  ANS core
001B99r 3                       ; """https://forth-standard.org/standard/core/num-end
001B99r 3                       ; Finish conversion of pictured number string, putting address and
001B99r 3                       ; length on the Data Stack.
001B99r 3                       ;
001B99r 3                       ; Original Fort is  2DROP HLD @ PAD OVER -
001B99r 3                       ; Based on
001B99r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001B99r 3                       ; """
001B99r 3               xt_number_sign_greater:
001B99r 3               
001B99r 3  20 rr rr                     jsr underflow_2         ; double number
001B9Cr 3               
001B9Cr 3                               ; The start address lives in tohold
001B9Cr 3  A5 rr                        lda tohold
001B9Er 3  95 00                        sta 0,x         ; LSB of tohold
001BA0r 3  95 02                        sta 2,x
001BA2r 3  A5 rr                        lda tohold+1
001BA4r 3  95 01                        sta 1,x         ; MSB of addr
001BA6r 3  95 03                        sta 3,x         ; ( addr addr )
001BA8r 3               
001BA8r 3                               ; The length of the string is pad - addr
001BA8r 3  20 rr rr                     jsr xt_pad      ; ( addr addr pad )
001BABr 3               
001BABr 3  38                           sec
001BACr 3  B5 00                        lda 0,x         ; LSB of pad address
001BAEr 3  F5 02                        sbc 2,x
001BB0r 3  95 02                        sta 2,x
001BB2r 3               
001BB2r 3  B5 01                        lda 1,x         ; MSB, which should always be zero
001BB4r 3  F5 03                        sbc 3,x
001BB6r 3  95 03                        sta 3,x         ; ( addr u pad )
001BB8r 3               
001BB8r 3  E8                           inx
001BB9r 3  E8                           inx
001BBAr 3               
001BBAr 3               z_number_sign_greater:
001BBAr 3  60                           rts
001BBBr 3               
001BBBr 3               
001BBBr 3               ; ## NUMBER_SIGN_S ( d -- addr u ) "Completely convert pictured output"
001BBBr 3               ; ## "#s"  auto  ANS core
001BBBr 3                       ; """https://forth-standard.org/standard/core/numS
001BBBr 3                       ; Completely convert number for pictured numerical output.
001BBBr 3                       ;
001BBBr 3                       ; Based on
001BBBr 3                       ; https://github.com/philburk/pforth/blob/master/fth/system.fth
001BBBr 3                       ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
001BBBr 3                       ; """
001BBBr 3               
001BBBr 3               xt_number_sign_s:
001BBBr 3  20 rr rr                     jsr underflow_2
001BBEr 3               @loop:
001BBEr 3                               ; convert a single number ("#")
001BBEr 3  20 rr rr                     jsr xt_number_sign
001BC1r 3               
001BC1r 3                               ; stop when double-celled number in TOS is zero:
001BC1r 3  B5 00                        lda 0,x
001BC3r 3  15 01                        ora 1,x
001BC5r 3  15 02                        ora 2,x
001BC7r 3  15 03                        ora 3,x
001BC9r 3  D0 F3                        bne @loop
001BCBr 3               
001BCBr 3               z_number_sign_s:
001BCBr 3  60                           rts
001BCCr 3               
001BCCr 3               
001BCCr 3               
001BCCr 3               ; ## OF (C: -- of-sys) (x1 x2 -- |x1) "Conditional flow control"
001BCCr 3               ; ## "of"  auto  ANS core ext
001BCCr 3                       ; """http://forth-standard.org/standard/core/OF"""
001BCCr 3               
001BCCr 3               xt_of:
001BCCr 3                               ; Check if value is equal to this case.
001BCCr 3                               ; Postpone over (eg. compile a jsr to it)
001BCCr 3  A0 rr                        ldy #>xt_over
001BCEr 3  A9 rr                        lda #<xt_over
001BD0r 3  20 rr rr                     jsr cmpl_subroutine
001BD3r 3               
001BD3r 3                               ; Postpone = (EQUAL), that is, compile a jsr to it
001BD3r 3  A0 rr                        ldy #>xt_equal
001BD5r 3  A9 rr                        lda #<xt_equal
001BD7r 3  20 rr rr                     jsr cmpl_subroutine
001BDAr 3               
001BDAr 3  20 rr rr                     jsr xt_if
001BDDr 3               
001BDDr 3                               ; If it's true, consume the original value.
001BDDr 3                               ; Postpone DROP (eg. compile a jsr to it)
001BDDr 3  A0 rr                        ldy #>xt_drop
001BDFr 3  A9 rr                        lda #<xt_drop
001BE1r 3  20 rr rr                     jsr cmpl_subroutine
001BE4r 3               
001BE4r 3  60           z_of:           rts
001BE5r 3               
001BE5r 3               
001BE5r 3               
001BE5r 3               ; ## ONE ( -- n ) "Push the number 1 to the Data Stack"
001BE5r 3               ; ## "1"  auto  Tali Forth
001BE5r 3                       ; """This is also the code for EDITOR-WORDLIST"""
001BE5r 3               xt_editor_wordlist:
001BE5r 3               xt_one:
001BE5r 3  CA                           dex
001BE6r 3  CA                           dex
001BE7r 3  A9 01                        lda #1
001BE9r 3  95 00                        sta 0,x
001BEBr 3  74 01                        stz 1,x
001BEDr 3               
001BEDr 3               z_editor_wordlist:
001BEDr 3               z_one:
001BEDr 3  60                           rts
001BEEr 3               
001BEEr 3               
001BEEr 3               ; ## ONE_MINUS ( u -- u-1 ) "Decrease TOS by one"
001BEEr 3               ; ## "1-"  auto  ANS core
001BEEr 3                       ; """https://forth-standard.org/standard/core/OneMinus"""
001BEEr 3               
001BEEr 3               xt_one_minus:
001BEEr 3  20 rr rr                     jsr underflow_1
001BF1r 3               
001BF1r 3  B5 00                        lda 0,x
001BF3r 3  D0 02                        bne @1
001BF5r 3  D6 01                        dec 1,x
001BF7r 3               @1:
001BF7r 3  D6 00                        dec 0,x
001BF9r 3               
001BF9r 3  60           z_one_minus:    rts
001BFAr 3               
001BFAr 3               
001BFAr 3               
001BFAr 3               ; ## ONE_PLUS ( u -- u+1 ) "Increase TOS by one"
001BFAr 3               ; ## "1+"  auto  ANS core
001BFAr 3                       ; """https://forth-standard.org/standard/core/OnePlus
001BFAr 3                       ;
001BFAr 3                       ; Code is shared with CHAR-PLUS
001BFAr 3                       ; """
001BFAr 3               
001BFAr 3               xt_char_plus:
001BFAr 3               xt_one_plus:
001BFAr 3  20 rr rr                     jsr underflow_1
001BFDr 3               
001BFDr 3  F6 00                        inc 0,x
001BFFr 3  D0 02                        bne @done
001C01r 3  F6 01                        inc 1,x
001C03r 3               
001C03r 3               @done:
001C03r 3               z_char_plus:
001C03r 3  60           z_one_plus:     rts
001C04r 3               
001C04r 3               
001C04r 3               
001C04r 3               ; ## ONLY ( -- ) "Set earch order to minimum wordlist"
001C04r 3               ; ## "only"  auto  ANS search ext
001C04r 3                       ; """https://forth-standard.org/standard/search/ONLY"""
001C04r 3               
001C04r 3               xt_only:
001C04r 3                               ; Put -1 on data stack.
001C04r 3  CA                           dex
001C05r 3  CA                           dex
001C06r 3  A9 FF                        lda #$FF
001C08r 3  95 00                        sta 0,x
001C0Ar 3  95 01                        sta 1,x
001C0Cr 3               
001C0Cr 3                               ; Invoke set-order to set the minimum search order.
001C0Cr 3  20 rr rr                     jsr xt_set_order
001C0Fr 3               
001C0Fr 3  60           z_only:         rts
001C10r 3               
001C10r 3               
001C10r 3               
001C10r 3               ; ## OR ( m n -- n ) "Logically OR TOS and NOS"
001C10r 3               ; ## "or"  auto  ANS core
001C10r 3                       ; """https://forth-standard.org/standard/core/OR"
001C10r 3               xt_or:
001C10r 3  20 rr rr                     jsr underflow_2
001C13r 3               
001C13r 3  B5 00                        lda 0,x
001C15r 3  15 02                        ora 2,x
001C17r 3  95 02                        sta 2,x
001C19r 3               
001C19r 3  B5 01                        lda 1,x
001C1Br 3  15 03                        ora 3,x
001C1Dr 3  95 03                        sta 3,x
001C1Fr 3               
001C1Fr 3  E8                           inx
001C20r 3  E8                           inx
001C21r 3               
001C21r 3  60           z_or:           rts
001C22r 3               
001C22r 3               
001C22r 3               ; ## ORDER ( -- ) "Print current word order list and current WID"
001C22r 3               ; ## "order"  auto  ANS core
001C22r 3                       ; """https://forth-standard.org/standard/search/ORDER
001C22r 3                       ; Note the search order is displayed from first search to last
001C22r 3                       ; searched and is therefore exactly the reverse of the order in which
001C22r 3                       ; Forth stacks are displayed.
001C22r 3                       ;
001C22r 3                       ; A Forth implementation of this word is:
001C22r 3                       ;
001C22r 3                       ; 	: .wid ( wid -- )
001C22r 3                       ; 	dup 0=  if ." Forth "  drop    else
001C22r 3                       ; 	dup 1 = if ." Editor " drop    else
001C22r 3                       ; 	dup 2 = if ." Assembler " drop else
001C22r 3                       ; 	dup 3 = if ." Root " drop      else
001C22r 3                       ; 	           . ( just print the number )
001C22r 3                       ; 	then then then then ;
001C22r 3                       ;
001C22r 3                       ; : ORDER ( -- )
001C22r 3                       ; 	cr get-order 0 ?do .wid loop
001C22r 3                       ; 	space space get-current .wid ;
001C22r 3                       ;
001C22r 3                       ; This is an interactive program, so speed
001C22r 3                       ; is not as important as size. We assume we do not have more than 255
001C22r 3                       ; wordlists.
001C22r 3                       ; """
001C22r 3               
001C22r 3               xt_order:
001C22r 3  20 rr rr                     jsr xt_cr
001C25r 3  20 rr rr                     jsr xt_get_order        ; ( wid_n ... wid_1 n )
001C28r 3               
001C28r 3                               ; Paranoid: Check if there are no wordlists, a rather
001C28r 3                               ; pathological case. this would mean ( 0 ) on the stack. In
001C28r 3                               ; that case, we just drop n and run
001C28r 3  B5 00                        lda 0,x                 ; assumes no more than 255 wordlists
001C2Ar 3  F0 1E                        beq @drop_done
001C2Cr 3               
001C2Cr 3               @have_wordlists:
001C2Cr 3                               ; We arrive here with the LSB of TOS in A, the number of WIDs
001C2Cr 3                               ; on the stack
001C2Cr 3  A8                           tay
001C2Dr 3               @loop:
001C2Dr 3  E8                           inx
001C2Er 3  E8                           inx                     ; DROP, now ( wid_n ... wid_1 )
001C2Fr 3  B5 00                        lda 0,x
001C31r 3               
001C31r 3  5A                           phy
001C32r 3  20 rr rr                     jsr _print_wid_string   ; internal helper function
001C35r 3  7A                           ply
001C36r 3               
001C36r 3  88                           dey
001C37r 3  D0 F4                        bne @loop
001C39r 3               
001C39r 3                               ; We've printed the wordlists, now we add the current wordlist.
001C39r 3                               ; This follows the convention of Gforth
001C39r 3  20 rr rr                     jsr xt_space
001C3Cr 3  20 rr rr                     jsr xt_space
001C3Fr 3  20 rr rr                     jsr xt_get_current      ; ( wid )
001C42r 3               
001C42r 3  B5 00                        lda 0,x
001C44r 3  20 rr rr                     jsr _print_wid_string
001C47r 3  20 rr rr                     jsr xt_cr
001C4Ar 3               
001C4Ar 3               @drop_done:
001C4Ar 3  E8                           inx
001C4Br 3  E8                           inx
001C4Cr 3               z_order:
001C4Cr 3  60                           rts
001C4Dr 3               
001C4Dr 3               _print_wid_string:
001C4Dr 3                       ; """Helper function for ORDER: Given a WID in A, print the
001C4Dr 3                       ; corresponding string. If there is no such word list defined, just
001C4Dr 3                       ; print the number. Assumes we will not have more than 256 WIDs; also
001C4Dr 3                       ; assumes we have just loaded A so Z reflects status of byte.  In
001C4Dr 3                       ; theory, we could speed this up by having the WID be the same as the
001C4Dr 3                       ; number of the strings. However, ORDER is used rather infrequently and
001C4Dr 3                       ; this would make changes to the strings.asm file very dangerous, so we
001C4Dr 3                       ; follow the slightly more complicated route with a translation table.
001C4Dr 3                       ; """
001C4Dr 3                               ; If the WID is larger than 3, we have no string avaliable and
001C4Dr 3                               ; just print the number.
001C4Dr 3                               ; See http://6502.org/tutorials/compare_instructions.html
001C4Dr 3                               ; for details
001C4Dr 3  C9 04                        cmp #4
001C4Fr 3  90 09                        bcc @output_string      ; less than 4, print a real string
001C51r 3               
001C51r 3                               ; Our WID is not less than 4, that is, 4 or larger. We just
001C51r 3                               ; print the number
001C51r 3  CA                           dex
001C52r 3  CA                           dex
001C53r 3  95 00                        sta 0,x
001C55r 3  74 01                        stz 1,x
001C57r 3  4C rr rr                     jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
001C5Ar 3               
001C5Ar 3               @output_string:
001C5Ar 3                               ; Get the string number based on WID 0 to 3
001C5Ar 3  A8                           tay
001C5Br 3  B9 rr rr                     lda @wid_data,y
001C5Er 3               
001C5Er 3                               ; Print without a line feed
001C5Er 3  4C rr rr                     jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
001C61r 3               
001C61r 3               @wid_data:
001C61r 3                       ; Table of string numbers (see strings.asm) indexed by the WID if
001C61r 3                       ; less than 4.
001C61r 3  03                   .byte str_wid_forth            ; WID 0: "Forth"
001C62r 3  06                   .byte str_wid_editor           ; WID 1: "Editor"
001C63r 3  07                   .byte str_wid_assembler        ; WID 2: "Assembler"
001C64r 3  08                   .byte str_wid_root             ; WID 3: "Root"
001C65r 3               
001C65r 3               
001C65r 3               
001C65r 3               ; ## OUTPUT ( -- addr ) "Return the address of the EMIT vector address"
001C65r 3               ; ## "output"  tested  Tali Forth
001C65r 3               xt_output:
001C65r 3                       ; """Return the address where the jump target for EMIT is stored (but
001C65r 3                       ; not the vector itself). By default, this will hold the value of
001C65r 3                       ; kernel_putc routine, but this can be changed by the user, hence this
001C65r 3                       ; routine.
001C65r 3                       ; """
001C65r 3  CA                           dex
001C66r 3  CA                           dex
001C67r 3  A9 rr                        lda #<output
001C69r 3  95 00                        sta 0,x
001C6Br 3  A9 rr                        lda #>output
001C6Dr 3  95 01                        sta 1,x
001C6Fr 3               
001C6Fr 3  60           z_output:       rts
001C70r 3               
001C70r 3               
001C70r 3               ; ## OVER ( b a -- b a b ) "Copy NOS to TOS"
001C70r 3               ; ## "over"  auto  ANS core
001C70r 3                       ; """https://forth-standard.org/standard/core/OVER"""
001C70r 3               xt_over:
001C70r 3  20 rr rr                     jsr underflow_2
001C73r 3               
001C73r 3  CA                           dex
001C74r 3  CA                           dex
001C75r 3               
001C75r 3  B5 04                        lda 4,x         ; LSB
001C77r 3  95 00                        sta 0,x
001C79r 3  B5 05                        lda 5,x         ; MSB
001C7Br 3  95 01                        sta 1,x
001C7Dr 3               
001C7Dr 3  60           z_over:         rts
001C7Er 3               
001C7Er 3               
001C7Er 3               ; ## PAD ( -- addr ) "Return address of user scratchpad"
001C7Er 3               ; ## "pad"  auto  ANS core ext
001C7Er 3                       ; """https://forth-standard.org/standard/core/PAD
001C7Er 3                       ; Return address to a temporary area in free memory for user. Must
001C7Er 3                       ; be at least 84 bytes in size (says ANS). It is located relative to
001C7Er 3                       ; the compile area pointer (CP) and therefore varies in position.
001C7Er 3                       ; This area is reserved for the user and not used by the system
001C7Er 3                       ; """
001C7Er 3               xt_pad:
001C7Er 3  CA                           dex
001C7Fr 3  CA                           dex
001C80r 3               
001C80r 3  A5 rr                        lda cp
001C82r 3  18                           clc
001C83r 3  69 FF                        adc #padoffset  ; assumes padoffset one byte in size
001C85r 3  95 00                        sta 0,x
001C87r 3               
001C87r 3  A5 rr                        lda cp+1
001C89r 3  69 00                        adc #0          ; only need carry
001C8Br 3  95 01                        sta 1,x
001C8Dr 3               
001C8Dr 3  60           z_pad:          rts
001C8Er 3               
001C8Er 3               
001C8Er 3               ; ## PAGE ( -- ) "Clear the screen"
001C8Er 3               ; ## "page"  tested  ANS facility
001C8Er 3                       ; """https://forth-standard.org/standard/facility/PAGE
001C8Er 3                       ; Clears a page if supported by ANS terminal codes. This is
001C8Er 3                       ; Clear Screen ("ESC[2J") plus moving the cursor to the top
001C8Er 3                       ; left of the screen
001C8Er 3                       ; """
001C8Er 3               xt_page:
001C8Er 3  A9 1B                        lda #AscESC
001C90r 3  20 rr rr                     jsr emit_a
001C93r 3  A9 5B                        lda #$5B        ; ASCII for "["
001C95r 3  20 rr rr                     jsr emit_a
001C98r 3  A9 32                        lda #'2'
001C9Ar 3  20 rr rr                     jsr emit_a
001C9Dr 3  A9 4A                        lda #'J'
001C9Fr 3  20 rr rr                     jsr emit_a
001CA2r 3               
001CA2r 3                               ; move cursor to top left of screen
001CA2r 3  20 rr rr                     jsr xt_zero
001CA5r 3  20 rr rr                     jsr xt_zero
001CA8r 3  20 rr rr                     jsr xt_at_xy
001CABr 3               
001CABr 3  60           z_page:         rts
001CACr 3               
001CACr 3               
001CACr 3               ; ## PAREN ( -- ) "Discard input up to close paren ( comment )"
001CACr 3               ; ## "("  auto  ANS core
001CACr 3                       ; """http://forth-standard.org/standard/core/p"""
001CACr 3               
001CACr 3               xt_paren:
001CACr 3                               ; Put a right paren on the stack.
001CACr 3  CA                           dex
001CADr 3  CA                           dex
001CAEr 3  A9 29                        lda #41     ; Right parenthesis
001CB0r 3  95 00                        sta 0,x
001CB2r 3  74 01                        stz 1,x
001CB4r 3               
001CB4r 3                               ; Call parse.
001CB4r 3  20 rr rr                     jsr xt_parse
001CB7r 3               
001CB7r 3                               ; Throw away the result.
001CB7r 3  E8                           inx
001CB8r 3  E8                           inx
001CB9r 3  E8                           inx
001CBAr 3  E8                           inx
001CBBr 3               
001CBBr 3  60           z_paren:        rts
001CBCr 3               
001CBCr 3               
001CBCr 3               
001CBCr 3               ; ## PARSE_NAME ( "name" -- addr u ) "Parse the input"
001CBCr 3               ; ## "parse-name"  auto  ANS core ext
001CBCr 3                       ; """https://forth-standard.org/standard/core/PARSE-NAME
001CBCr 3                       ; Find next word in input string, skipping leading whitespace. This is
001CBCr 3                       ; a special form of PARSE and drops through to that word. See PARSE
001CBCr 3                       ; for more detail. We use this word internally for the interpreter
001CBCr 3                       ; because it is a lot easier to use. Reference implementations at
001CBCr 3                       ; http://forth-standard.org/standard/core/PARSE-NAME and
001CBCr 3                       ; http://www.forth200x.org/reference-implementations/parse-name.fs
001CBCr 3                       ; Roughly, the word is comparable to BL WORD COUNT. -- Note that
001CBCr 3                       ; though the ANS standard talks about skipping "spaces", whitespace
001CBCr 3                       ; is actually perfectly legal (see for example
001CBCr 3                       ; http://forth-standard.org/standard/usage#subsubsection.3.4.1.1).
001CBCr 3                       ; Otherwise, PARSE-NAME chokes on tabs.
001CBCr 3                       ; """
001CBCr 3               
001CBCr 3               xt_parse_name:
001CBCr 3                               ; To enable the compilation of the high-level Forth words
001CBCr 3                               ; in forth-words.asm and user-words.asm at boot time,
001CBCr 3                               ; PARSE-NAME and PARSE must be able to deal with 16-bit string
001CBCr 3                               ; lengths. This is a pain on an 8-bit machine. The pointer
001CBCr 3                               ; to the current location is in toin (>IN). We need to check,
001CBCr 3                               ; worst case, the characters from cib+toin to cib+ciblen, and
001CBCr 3                               ; we can't just use Y as an index.
001CBCr 3               
001CBCr 3                               ; The counter is CIBLEN-TOIN and stored in tmp1
001CBCr 3  A5 rr                        lda ciblen              ; LSB of counter
001CBEr 3  38                           sec
001CBFr 3  E5 rr                        sbc toin
001CC1r 3  85 rr                        sta tmp1
001CC3r 3  A5 rr                        lda ciblen+1            ; MSB
001CC5r 3  E5 rr                        sbc toin+1
001CC7r 3  85 rr                        sta tmp1+1
001CC9r 3               
001CC9r 3                               ; Check the result for zero (TOIN is equal to CIBLEN)
001CC9r 3  A5 rr                        lda tmp1
001CCBr 3  05 rr                        ora tmp1+1
001CCDr 3  F0 28                        beq @empty_line
001CCFr 3               
001CCFr 3                               ; We walk through the characters starting at CIB+TOIN, so we
001CCFr 3                               ; save a temp version of that in tmp2
001CCFr 3  A5 rr                        lda cib
001CD1r 3  18                           clc
001CD2r 3  65 rr                        adc toin
001CD4r 3  85 rr                        sta tmp2                ; LSB of first character
001CD6r 3  A5 rr                        lda cib+1
001CD8r 3  65 rr                        adc toin+1
001CDAr 3  85 rr                        sta tmp2+1              ; MSB
001CDCr 3               
001CDCr 3               @skip_loop:
001CDCr 3  B2 rr                        lda (tmp2)              ; work copy of cib
001CDEr 3  20 rr rr                     jsr is_whitespace
001CE1r 3  90 1F                        bcc @char_found
001CE3r 3               
001CE3r 3                               ; Char is still whitespace, continue
001CE3r 3  E6 rr                        inc tmp2
001CE5r 3  D0 02                        bne @2
001CE7r 3  E6 rr                        inc tmp2+1
001CE9r 3               @2:
001CE9r 3                               ; Adjust counter
001CE9r 3  A5 rr                        lda tmp1
001CEBr 3  D0 02                        bne @3
001CEDr 3  C6 rr                        dec tmp1+1
001CEFr 3               @3:
001CEFr 3  C6 rr                        dec tmp1
001CF1r 3               
001CF1r 3  A5 rr                        lda tmp1
001CF3r 3  05 rr                        ora tmp1+1
001CF5r 3  D0 E5                        bne @skip_loop          ; fall through if empty line
001CF7r 3               
001CF7r 3               @empty_line:
001CF7r 3                               ; Neither the ANS Forth nor the Gforth documentation say
001CF7r 3                               ; what to return as an address if a string with only
001CF7r 3                               ; spaces is given. For speed reasons, we just return junk
001CF7r 3                               ; NOS, with the TOS zero as per standard
001CF7r 3  CA                           dex
001CF8r 3  CA                           dex
001CF9r 3  CA                           dex
001CFAr 3  CA                           dex
001CFBr 3               
001CFBr 3  74 00                        stz 0,x                 ; TOS is zero
001CFDr 3  74 01                        stz 1,x
001CFFr 3               
001CFFr 3  4C rr rr                     jmp z_parse_name        ; skip over PARSE
001D02r 3               
001D02r 3               @char_found:
001D02r 3                               ; We arrive here with tmp2 pointing to the first non-space
001D02r 3                               ; character. This is where the word really starts, so
001D02r 3                               ; we use it to calculate the new >IN by subtracting
001D02r 3  A5 rr                        lda tmp2
001D04r 3  38                           sec
001D05r 3  E5 rr                        sbc cib
001D07r 3  85 rr                        sta toin
001D09r 3  A5 rr                        lda tmp2+1
001D0Br 3  E5 rr                        sbc cib+1
001D0Dr 3  85 rr                        sta toin+1
001D0Fr 3               
001D0Fr 3                               ; prepare Data Stack for PARSE by adding space
001D0Fr 3                               ; as the delimiter
001D0Fr 3  CA                           dex
001D10r 3  CA                           dex
001D11r 3               
001D11r 3  A9 20                        lda #AscSP
001D13r 3  95 00                        sta 0,x
001D15r 3  74 01                        stz 1,x                 ; paranoid, now ( "name" c )
001D17r 3               
001D17r 3               
001D17r 3               ; ## PARSE ( "name" c -- addr u ) "Parse input with delimiter character"
001D17r 3               ; ## "parse"  tested  ANS core ext
001D17r 3                       ; """https://forth-standard.org/standard/core/PARSE
001D17r 3                       ; Find word in input string delimited by character given. Do not
001D17r 3                       ; skip leading delimiters -- this is the main difference to PARSE-NAME.
001D17r 3                       ; PARSE and PARSE-NAME replace WORD in modern systems. ANS discussion
001D17r 3                       ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
001D17r 3                       ;
001D17r 3                       ;
001D17r 3                       ;     cib  cib+toin   cib+ciblen
001D17r 3                       ;      v      v            v
001D17r 3                       ;     |###################|
001D17r 3                       ;
001D17r 3                       ;     |------>|  toin (>IN)
001D17r 3                       ;     |------------------->|  ciblen
001D17r 3                       ;
001D17r 3                       ; The input string is stored starting at the address in the Current
001D17r 3                       ; Input Buffer (CIB), the length of which is in CIBLEN. While searching
001D17r 3                       ; for the delimiter, TOIN (>IN) points to the where we currently are.
001D17r 3                       ; Since PARSE does not skip leading delimiters, we assume we are on a
001D17r 3                       ; useful string if there are any characters at all. As with
001D17r 3                       ; PARSE-NAME, we must be able to handle strings with a length of
001D17r 3                       ; 16-bit for EVALUTE, which is a pain on an 8-bit machine.
001D17r 3                       ; """
001D17r 3               
001D17r 3               xt_parse:
001D17r 3  20 rr rr                     jsr underflow_1
001D1Ar 3               
001D1Ar 3                               ; If the input buffer is empty, we just return
001D1Ar 3  A5 rr                        lda ciblen
001D1Cr 3  05 rr                        ora ciblen+1
001D1Er 3  F0 0C                        beq @abort_parse
001D20r 3               
001D20r 3                               ; If the pointer >IN is larger or equal to the length of
001D20r 3                               ; the input buffer (CIBLEN), the line is done. Put
001D20r 3                               ; differently, we only continue if >IN is smaller than
001D20r 3                               ; CIBLEN
001D20r 3  A5 rr                        lda toin+1              ; MSB
001D22r 3  C5 rr                        cmp ciblen+1
001D24r 3  90 0E                        bcc @go_parse           ; unsigned comparison
001D26r 3               
001D26r 3  A5 rr                        lda toin                ; LSB
001D28r 3  C5 rr                        cmp ciblen
001D2Ar 3  90 08                        bcc @go_parse
001D2Cr 3               
001D2Cr 3               @abort_parse:
001D2Cr 3                               ; Sorry, this line is over
001D2Cr 3  CA                           dex
001D2Dr 3  CA                           dex
001D2Er 3  74 00                        stz 0,x
001D30r 3  74 01                        stz 1,x
001D32r 3               
001D32r 3  80 7A                        bra @done
001D34r 3               @go_parse:
001D34r 3                               ; We actually have work to do. Save the delimiter in
001D34r 3                               ; tmptos.
001D34r 3  B5 00                        lda 0,x
001D36r 3  85 rr                        sta tmptos
001D38r 3               
001D38r 3                               ; We can now prepare the Data Stack for the return value
001D38r 3  CA                           dex
001D39r 3  CA                           dex
001D3Ar 3               
001D3Ar 3                               ; tmp1 is CIB+TOIN, the beginning of the current string
001D3Ar 3                               ; tmp2 is initially the same as tmp1, then the work index
001D3Ar 3                               ; tmp3 is CIB+CIBLEN, one char past the end of the string
001D3Ar 3               
001D3Ar 3                               ; Calculate the beginning of the string, which is also the
001D3Ar 3                               ; address to return
001D3Ar 3  A5 rr                        lda cib
001D3Cr 3  18                           clc
001D3Dr 3  65 rr                        adc toin        ; LSB
001D3Fr 3  85 rr                        sta tmp1
001D41r 3  85 rr                        sta tmp2
001D43r 3  95 02                        sta 2,x
001D45r 3               
001D45r 3  A5 rr                        lda cib+1
001D47r 3  65 rr                        adc toin+1      ; MSB
001D49r 3  85 rr                        sta tmp1+1
001D4Br 3  85 rr                        sta tmp2+1
001D4Dr 3  95 03                        sta 3,x
001D4Fr 3               
001D4Fr 3                               ; Calculate the address where the input buffer ends plus 1, so
001D4Fr 3                               ; we can compare it with TOIN, which is an index
001D4Fr 3  A5 rr                        lda cib
001D51r 3  18                           clc
001D52r 3  65 rr                        adc ciblen
001D54r 3  85 rr                        sta tmp3
001D56r 3  A5 rr                        lda cib+1
001D58r 3  65 rr                        adc ciblen+1
001D5Ar 3  85 rr                        sta tmp3+1
001D5Cr 3               
001D5Cr 3                               ; Initialize the offset we use to adjust EOL or found delimiter
001D5Cr 3  64 rr                        stz tmptos+1
001D5Er 3               @loop:
001D5Er 3                               ; If we are at the end of the string, quit
001D5Er 3  A5 rr                        lda tmp2
001D60r 3  C5 rr                        cmp tmp3
001D62r 3  D0 06                        bne @not_empty
001D64r 3               
001D64r 3  A5 rr                        lda tmp2+1
001D66r 3  C5 rr                        cmp tmp3+1
001D68r 3  F0 1D                        beq @eol
001D6Ar 3               @not_empty:
001D6Ar 3                               ; We have to do this the hard way. In fact, it's really
001D6Ar 3                               ; hard since if we are dealing with a SPACE, the standard
001D6Ar 3                               ; wants us to skip all whitespace, not just spaces. Otherwise,
001D6Ar 3                               ; Tali would choke on tabs between words. For details, see
001D6Ar 3                               ; http://forth-standard.org/standard/file#subsection.11.3.5
001D6Ar 3                               ; In theory, we could make this faster by defining a delimiter
001D6Ar 3                               ; that is 00 as the sign that we skip all whitespace, thereby
001D6Ar 3                               ; avoiding having to test every time. However, somebody,
001D6Ar 3                               ; somewhere might want to parse a zero-delimited list. Since
001D6Ar 3                               ; any byte value could be chosen for that, we just test for
001D6Ar 3                               ; a space every single time for the moment.
001D6Ar 3  B2 rr                        lda (tmp2)
001D6Cr 3               
001D6Cr 3  A4 rr                        ldy tmptos
001D6Er 3  C0 20                        cpy #AscSP
001D70r 3  D0 07                        bne @not_whitespace
001D72r 3               
001D72r 3                               ; The delimiter is a space, so we're looking for all
001D72r 3                               ; whitespace
001D72r 3  20 rr rr                     jsr is_whitespace
001D75r 3  90 02                        bcc @not_whitespace
001D77r 3  80 0C                        bra @found_delimiter
001D79r 3               
001D79r 3               @not_whitespace:
001D79r 3                               ; The delimiter is not a space, so we're looking for
001D79r 3                               ; whatever it is
001D79r 3  C5 rr                        cmp tmptos
001D7Br 3  F0 08                        beq @found_delimiter
001D7Dr 3               
001D7Dr 3                               ; Not a delimiter, next character
001D7Dr 3  E6 rr                        inc tmp2
001D7Fr 3  D0 DD                        bne @loop
001D81r 3  E6 rr                        inc tmp2+1
001D83r 3  80 D9                        bra @loop
001D85r 3               
001D85r 3               @found_delimiter:
001D85r 3                               ; Increase the offset: If we've found a delimiter, we want
001D85r 3                               ; TOIN to point to the character after it, not the delimiter
001D85r 3                               ; itself
001D85r 3  E6 rr                        inc tmptos+1
001D87r 3               @eol:
001D87r 3                               ; The length of the new string is tmp2-tmp1
001D87r 3  A5 rr                        lda tmp2
001D89r 3  38                           sec
001D8Ar 3  E5 rr                        sbc tmp1
001D8Cr 3  95 00                        sta 0,x
001D8Er 3               
001D8Er 3  A5 rr                        lda tmp2+1
001D90r 3  E5 rr                        sbc tmp1+1
001D92r 3  95 01                        sta 1,x
001D94r 3               
001D94r 3                               ; The new offset is tmp2-cib
001D94r 3  A5 rr                        lda tmp2
001D96r 3  38                           sec
001D97r 3  E5 rr                        sbc cib
001D99r 3  85 rr                        sta toin
001D9Br 3  A5 rr                        lda tmp2+1
001D9Dr 3  E5 rr                        sbc cib+1
001D9Fr 3  85 rr                        sta toin+1
001DA1r 3               
001DA1r 3                               ; Add in the delimiter
001DA1r 3  A5 rr                        lda toin
001DA3r 3  18                           clc
001DA4r 3  65 rr                        adc tmptos+1
001DA6r 3  85 rr                        sta toin
001DA8r 3  A5 rr                        lda toin+1
001DAAr 3  69 00                        adc #0          ; we only need the carry
001DACr 3  85 rr                        sta toin+1
001DAEr 3               @done:
001DAEr 3               z_parse_name:
001DAEr 3  60           z_parse:        rts
001DAFr 3               
001DAFr 3               
001DAFr 3               
001DAFr 3               ; ## PICK ( n n u -- n n n ) "Move element u of the stack to TOS"
001DAFr 3               ; ## "pick"  auto  ANS core ext
001DAFr 3                       ; """https://forth-standard.org/standard/core/PICK
001DAFr 3                       ; Take the u-th element out of the stack and put it on TOS,
001DAFr 3                       ; overwriting the original TOS. 0 PICK is equivalent to DUP, 1 PICK to
001DAFr 3                       ; OVER. Note that using PICK is considered poor coding form. Also note
001DAFr 3                       ; that FIG Forth has a different behavior for PICK than ANS Forth.
001DAFr 3                       ; """
001DAFr 3               
001DAFr 3               xt_pick:
001DAFr 3                               ; Checking for underflow is difficult because it depends on
001DAFr 3                               ; which element we want to grab. We could probably figure
001DAFr 3                               ; something out, but it wouldn't work with underflow stripping
001DAFr 3                               ; Since using PICK is considered poor form anyway, we just
001DAFr 3                               ; leave it as it is
001DAFr 3  16 00                        asl 0,x         ; we assume u < 128 (stack is small)
001DB1r 3  8A                           txa
001DB2r 3  75 00                        adc 0,x
001DB4r 3  A8                           tay
001DB5r 3               
001DB5r 3  B9 02 00                     lda 0002,y
001DB8r 3  95 00                        sta 0,x
001DBAr 3  B9 03 00                     lda 0003,y
001DBDr 3  95 01                        sta 1,x
001DBFr 3               
001DBFr 3  60           z_pick:         rts
001DC0r 3               
001DC0r 3               
001DC0r 3               
001DC0r 3               ; ## PLUS ( n n -- n ) "Add TOS and NOS"
001DC0r 3               ; ## "+"  auto  ANS core
001DC0r 3                       ; """https://forth-standard.org/standard/core/Plus"""
001DC0r 3               xt_plus:
001DC0r 3  20 rr rr                     jsr underflow_2
001DC3r 3               
001DC3r 3  18                           clc
001DC4r 3  B5 00                        lda 0,x         ; LSB
001DC6r 3  75 02                        adc 2,x
001DC8r 3  95 02                        sta 2,x
001DCAr 3               
001DCAr 3  B5 01                        lda 1,x         ; MSB. No CLC, conserve carry bit
001DCCr 3  75 03                        adc 3,x
001DCEr 3  95 03                        sta 3,x
001DD0r 3               
001DD0r 3  E8                           inx
001DD1r 3  E8                           inx
001DD2r 3               
001DD2r 3  60           z_plus:         rts
001DD3r 3               
001DD3r 3               
001DD3r 3               ; ## PLUS_STORE ( n addr -- ) "Add number to value at given address"
001DD3r 3               ; ## "+!"  auto  ANS core
001DD3r 3                       ; """https://forth-standard.org/standard/core/PlusStore"""
001DD3r 3               xt_plus_store:
001DD3r 3  20 rr rr                     jsr underflow_2
001DD6r 3               
001DD6r 3                               ; move address to tmp1 so we can work with it
001DD6r 3  B5 00                        lda 0,x
001DD8r 3  85 rr                        sta tmp1
001DDAr 3  B5 01                        lda 1,x
001DDCr 3  85 rr                        sta tmp1+1
001DDEr 3               
001DDEr 3  A0 00                        ldy #0          ; LSB
001DE0r 3  B1 rr                        lda (tmp1),y
001DE2r 3  18                           clc
001DE3r 3  75 02                        adc 2,x
001DE5r 3  91 rr                        sta (tmp1),y
001DE7r 3               
001DE7r 3  C8                           iny             ; MSB
001DE8r 3  B1 rr                        lda (tmp1),y
001DEAr 3  75 03                        adc 3,x
001DECr 3  91 rr                        sta (tmp1),y
001DEEr 3               
001DEEr 3  E8                           inx
001DEFr 3  E8                           inx
001DF0r 3  E8                           inx
001DF1r 3  E8                           inx
001DF2r 3               
001DF2r 3  60           z_plus_store:   rts
001DF3r 3               
001DF3r 3               
001DF3r 3               ; ## POSTPONE ( -- ) "Change IMMEDIATE status (it's complicated)"
001DF3r 3               ; ## "postpone"  auto   ANS core
001DF3r 3                       ; """https://forth-standard.org/standard/core/POSTPONE
001DF3r 3                       ; Add the compilation behavior of a word to a new word at
001DF3r 3                       ; compile time. If the word that follows it is immediate, include
001DF3r 3                       ; it so that it will be compiled when the word being defined is
001DF3r 3                       ; itself used for a new word. Tricky, but very useful.
001DF3r 3                       ;
001DF3r 3                       ; Because POSTPONE expects a word (not an xt) in the input stream (not
001DF3r 3                       ; on the Data Stack). This means we cannot build words with
001DF3r 3                       ; "jsr xt_postpone, jsr <word>" directly.
001DF3r 3                       ; """
001DF3r 3               
001DF3r 3               xt_postpone:
001DF3r 3  20 rr rr                     jsr xt_parse_name               ; ( -- addr n )
001DF6r 3               
001DF6r 3                               ; if there was no word provided, complain and quit
001DF6r 3  B5 00                        lda 0,x
001DF8r 3  15 01                        ora 1,x
001DFAr 3  D0 05                        bne @1
001DFCr 3               
001DFCr 3  A9 05                        lda #err_noname
001DFEr 3  4C rr rr                     jmp error
001E01r 3               @1:
001E01r 3  20 rr rr                     jsr xt_find_name                ; ( -- nt | 0 )
001E04r 3               
001E04r 3                               ; if word not in Dictionary, complain and quit
001E04r 3  D0 05                        bne @2
001E06r 3  A9 05                        lda #err_noname
001E08r 3  4C rr rr                     jmp error
001E0Br 3               
001E0Br 3               @2:
001E0Br 3                               ; keep a copy of nt for later
001E0Br 3  B5 00                        lda 0,x
001E0Dr 3  85 rr                        sta tmp1
001E0Fr 3  B5 01                        lda 1,x
001E11r 3  85 rr                        sta tmp1+1
001E13r 3               
001E13r 3                               ; We need the xt instead of the nt
001E13r 3  20 rr rr                     jsr xt_name_to_int              ; ( nt -- xt )
001E16r 3               
001E16r 3                               ; See if this is an immediate word. This is easier
001E16r 3                               ; with nt than with xt. The status byte of the word
001E16r 3                               ; is nt+1
001E16r 3  E6 rr                        inc tmp1
001E18r 3  D0 02                        bne @3
001E1Ar 3  E6 rr                        inc tmp1+1
001E1Cr 3               @3:
001E1Cr 3  B2 rr                        lda (tmp1)
001E1Er 3  29 04                        and #IM         ; mask all but Intermediate flag
001E20r 3  F0 05                        beq @not_immediate
001E22r 3               
001E22r 3                               ; We're immediate, so instead of executing it right now, we
001E22r 3                               ; compile it. xt is TOS, so this is easy. The RTS at the end
001E22r 3                               ; takes us back to the original caller
001E22r 3  20 rr rr                     jsr xt_compile_comma
001E25r 3  80 0A                        bra @done
001E27r 3               
001E27r 3               @not_immediate:
001E27r 3                               ; This is not an immediate word, so we enact "deferred
001E27r 3                               ; compilation" by including ' <NAME> COMPILE, which we do by
001E27r 3                               ; compiling the run-time routine of LITERAL, the xt itself, and
001E27r 3                               ; a subroutine jump to COMPILE,
001E27r 3  20 rr rr                     jsr xt_literal
001E2Ar 3               
001E2Ar 3                               ; Last, compile COMPILE,
001E2Ar 3  A0 rr                        ldy #>xt_compile_comma
001E2Cr 3  A9 rr                        lda #<xt_compile_comma
001E2Er 3  20 rr rr                     jsr cmpl_subroutine
001E31r 3               @done:
001E31r 3  60           z_postpone:     rts
001E32r 3               
001E32r 3               
001E32r 3               
001E32r 3               ; ## PREVIOUS ( -- ) "Remove the first wordlist in the search order"
001E32r 3               ; ## "previous"  auto  ANS search ext
001E32r 3                       ; """http://forth-standard.org/standard/search/PREVIOUS"""
001E32r 3               
001E32r 3               xt_previous:
001E32r 3  20 rr rr                     jsr xt_get_order
001E35r 3  20 rr rr                     jsr xt_nip
001E38r 3  20 rr rr                     jsr xt_one_minus
001E3Br 3  20 rr rr                     jsr xt_set_order
001E3Er 3               
001E3Er 3  60           z_previous:     rts
001E3Fr 3               
001E3Fr 3               
001E3Fr 3               
001E3Fr 3               ; ## QUESTION ( addr -- ) "Print content of a variable"
001E3Fr 3               ; ## "?"  tested  ANS tools
001E3Fr 3                       ; """https://forth-standard.org/standard/tools/q
001E3Fr 3                       ;
001E3Fr 3                       ; Only used interactively. Since humans are so slow, we
001E3Fr 3                       ; save size and just go for the subroutine jumps
001E3Fr 3                       ; """
001E3Fr 3               xt_question:
001E3Fr 3                               ; FETCH takes care of underflow check
001E3Fr 3  20 rr rr                     jsr xt_fetch
001E42r 3  20 rr rr                     jsr xt_dot
001E45r 3               
001E45r 3  60           z_question:     rts
001E46r 3               
001E46r 3               
001E46r 3               ; ## QUESTION_DUP ( n -- 0 | n n ) "Duplicate TOS non-zero"
001E46r 3               ; ## "?dup"  auto  ANS core
001E46r 3                       ; """https://forth-standard.org/standard/core/qDUP"""
001E46r 3               
001E46r 3               xt_question_dup:
001E46r 3  20 rr rr                     jsr underflow_1
001E49r 3               
001E49r 3                               ; Check if TOS is zero
001E49r 3  B5 00                        lda 0,x
001E4Br 3  15 01                        ora 1,x
001E4Dr 3  F0 0A                        beq @done
001E4Fr 3               
001E4Fr 3                               ; not zero, duplicate
001E4Fr 3  CA                           dex
001E50r 3  CA                           dex
001E51r 3  B5 02                        lda 2,x
001E53r 3  95 00                        sta 0,x
001E55r 3  B5 03                        lda 3,x
001E57r 3  95 01                        sta 1,x
001E59r 3               @done:
001E59r 3  60           z_question_dup: rts
001E5Ar 3               
001E5Ar 3               
001E5Ar 3               
001E5Ar 3               ; ## R_FETCH ( -- n ) "Get copy of top of Return Stack"
001E5Ar 3               ; ## "r@"  auto  ANS core
001E5Ar 3                       ; """https://forth-standard.org/standard/core/RFetch
001E5Ar 3                       ; This word is Compile Only in Tali Forth, though Gforth has it
001E5Ar 3                       ; work normally as well
001E5Ar 3                       ;
001E5Ar 3                       ; An alternative way to write this word
001E5Ar 3                       ; would be to access the elements on the stack directly like 2R@
001E5Ar 3                       ; does, these versions should be compared at some point.
001E5Ar 3                       ; """
001E5Ar 3               xt_r_fetch:
001E5Ar 3                               ; get the return address
001E5Ar 3  7A                           ply             ; LSB
001E5Br 3  84 rr                        sty tmp1
001E5Dr 3  7A                           ply             ; MSB
001E5Er 3               
001E5Er 3                               ; --- CUT FOR NATIVE COMPILE ---
001E5Er 3               
001E5Er 3                               ; get the actual top of Return Stack
001E5Er 3  CA                           dex
001E5Fr 3  CA                           dex
001E60r 3               
001E60r 3  68                           pla             ; LSB
001E61r 3  95 00                        sta 0,x
001E63r 3  68                           pla             ; MSB
001E64r 3  95 01                        sta 1,x
001E66r 3               
001E66r 3                               ; now we have to put that value back
001E66r 3  48                           pha
001E67r 3  B5 00                        lda 0,x
001E69r 3  48                           pha
001E6Ar 3               
001E6Ar 3                               ; --- CUT FOR NATIVE COMPILE ---
001E6Ar 3               
001E6Ar 3                               ; restore return value
001E6Ar 3  5A                           phy             ; MSB
001E6Br 3  A4 rr                        ldy tmp1
001E6Dr 3  5A                           phy             ; LSB
001E6Er 3               
001E6Er 3  60           z_r_fetch:      rts
001E6Fr 3               
001E6Fr 3               
001E6Fr 3               ; ## R_FROM ( -- n )(R: n --) "Move top of Return Stack to TOS"
001E6Fr 3               ; ## "r>"  auto  ANS core
001E6Fr 3                       ; """https://forth-standard.org/standard/core/Rfrom
001E6Fr 3                       ; Move Top of Return Stack to Top of Data Stack.
001E6Fr 3                       ;
001E6Fr 3                       ; We have to move
001E6Fr 3                       ; the RTS address out of the way first. This word is handled
001E6Fr 3                       ; differently for native and and subroutine compilation, see COMPILE,
001E6Fr 3                       ; This is a compile-only word
001E6Fr 3                       ; """
001E6Fr 3               
001E6Fr 3               xt_r_from:
001E6Fr 3                               ; Rescue the address of the return jump that is currently
001E6Fr 3                               ; on top of the Return Stack. If this word is natively
001E6Fr 3                               ; compiled, this is a total waste of time
001E6Fr 3  68                           pla             ; LSB
001E70r 3  85 rr                        sta tmptos
001E72r 3  7A                           ply             ; MSB
001E73r 3               
001E73r 3                               ; --- CUT FOR NATIVE CODING ---
001E73r 3               
001E73r 3  CA                           dex
001E74r 3  CA                           dex
001E75r 3               
001E75r 3                               ; now we can access the actual data
001E75r 3               
001E75r 3  68                           pla             ; LSB
001E76r 3  95 00                        sta 0,x
001E78r 3  68                           pla             ; MSB
001E79r 3  95 01                        sta 1,x
001E7Br 3               
001E7Br 3                               ; --- CUT FOR NATIVE CODING ---
001E7Br 3               
001E7Br 3                               ; restore the return address
001E7Br 3  5A                           phy             ; MSB
001E7Cr 3  A5 rr                        lda tmptos
001E7Er 3  48                           pha             ; LSB
001E7Fr 3               
001E7Fr 3  60           z_r_from:       rts
001E80r 3               
001E80r 3               
001E80r 3               ; ## R_TO_INPUT ( -- ) ( R: n n n n -- ) "Restore input state from Return Stack"
001E80r 3               ; ## "r>input"  tested  Tali Forth
001E80r 3                       ; """Restore the current input state as defined by insrc, cib, ciblen,
001E80r 3                       ; and toin from the Return Stack.
001E80r 3                       ;
001E80r 3                       ; See INPUT_TO_R for a discussion of this word. Uses tmp1
001E80r 3                       ; """
001E80r 3               
001E80r 3               xt_r_to_input:
001E80r 3               
001E80r 3                               ; We arrive here with the return address on the top of the
001E80r 3                               ; 65c02's stack. We need to move it out of the way first
001E80r 3  68                           pla
001E81r 3  85 rr                        sta tmp1
001E83r 3  68                           pla
001E84r 3  85 rr                        sta tmp1+1
001E86r 3               
001E86r 3                               ; This assumes that insrc is the first of eight bytes and
001E86r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001E86r 3                               ; Page. Since we went in reverse order, insrc is now on the top
001E86r 3                               ; of the Return Stack.
001E86r 3  A0 00                        ldy #0
001E88r 3               @loop:
001E88r 3  68                           pla
001E89r 3  99 rr rr                     sta insrc,y
001E8Cr 3  C8                           iny
001E8Dr 3  C0 08                        cpy #8
001E8Fr 3  D0 F7                        bne @loop
001E91r 3               
001E91r 3                               ; Restore address for return jump
001E91r 3  A5 rr                        lda tmp1+1
001E93r 3  48                           pha
001E94r 3  A5 rr                        lda tmp1
001E96r 3  48                           pha
001E97r 3               
001E97r 3  60           z_r_to_input: 	rts
001E98r 3               
001E98r 3               
001E98r 3               
001E98r 3               ; ## RECURSE ( -- ) "Copy recursive call to word being defined"
001E98r 3               ; ## "recurse"  auto  ANS core
001E98r 3                       ; """https://forth-standard.org/standard/core/RECURSE
001E98r 3                       ;
001E98r 3                       ; This word may not be natively compiled
001E98r 3                       ; """
001E98r 3               
001E98r 3               xt_recurse:
001E98r 3                               ; The whole routine amounts to compiling a reference to
001E98r 3                               ; the word that is being compiled. First, we save the JSR
001E98r 3                               ; instruction
001E98r 3  A0 00                        ldy #0
001E9Ar 3               
001E9Ar 3  A9 20                        lda #$20        ; opcode for JSR
001E9Cr 3  91 rr                        sta (cp),y
001E9Er 3  C8                           iny
001E9Fr 3               
001E9Fr 3                               ; Next, we save the LSB and MSB of the xt of the word
001E9Fr 3                               ; we are currently working on. We first need to see if
001E9Fr 3                               ; WORKWORD has the nt (: started the word) or the
001E9Fr 3                               ; xt (:NONAME started the word). Bit 6 in status tells us.
001E9Fr 3  24 rr                        bit status
001EA1r 3  70 0C                        bvs @nt_in_workword
001EA3r 3               
001EA3r 3                               ; This is a special :NONAME word. Just copy the xt
001EA3r 3                               ; from WORKWORD into the dictionary.
001EA3r 3  A5 rr                        lda workword
001EA5r 3  91 rr                        sta (cp),y
001EA7r 3  C8                           iny
001EA8r 3  A5 rr                        lda workword+1
001EAAr 3  91 rr                        sta (cp),y
001EACr 3  C8                           iny
001EADr 3  80 1B                        bra @update_cp
001EAFr 3               
001EAFr 3               @nt_in_workword:
001EAFr 3                               ; This is a regular : word, so the xt is four bytes down
001EAFr 3                               ; from the nt which we saved in WORKWORD. We could probably
001EAFr 3                               ; use NAME>INT here but this is going to be faster, and
001EAFr 3                               ; fast counts with recursion
001EAFr 3  A5 rr                        lda workword            ; LSB
001EB1r 3  18                           clc
001EB2r 3  69 04                        adc #4
001EB4r 3  85 rr                        sta tmp1
001EB6r 3  A5 rr                        lda workword+1          ; MSB
001EB8r 3  69 00                        adc #0
001EBAr 3  85 rr                        sta tmp1+1
001EBCr 3               
001EBCr 3  B2 rr                        lda (tmp1)
001EBEr 3  91 rr                        sta (cp),y
001EC0r 3  5A                           phy
001EC1r 3  A0 01                        ldy #1
001EC3r 3  B1 rr                        lda (tmp1),y
001EC5r 3  7A                           ply
001EC6r 3  C8                           iny
001EC7r 3  91 rr                        sta (cp),y
001EC9r 3  C8                           iny
001ECAr 3               
001ECAr 3               @update_cp:
001ECAr 3  98                           tya
001ECBr 3  18                           clc
001ECCr 3  65 rr                        adc cp
001ECEr 3  85 rr                        sta cp
001ED0r 3  90 02                        bcc @done
001ED2r 3  E6 rr                        inc cp+1
001ED4r 3               @done:
001ED4r 3  60           z_recurse:      rts
001ED5r 3               
001ED5r 3               
001ED5r 3               
001ED5r 3               ; ## REFILL ( -- f ) "Refill the input buffer"
001ED5r 3               ; ## "refill"  tested  ANS core ext
001ED5r 3                       ; """https://forth-standard.org/standard/core/REFILL
001ED5r 3                       ; Attempt to fill the input buffer from the input source, returning
001ED5r 3                       ; a true flag if successful. When the input source is the user input
001ED5r 3                       ; device, attempt to receive input into the terminal input buffer. If
001ED5r 3                       ; successful, make the result the input buffer, set >IN to zero, and
001ED5r 3                       ; return true. Receipt of a line containing no characters is considered
001ED5r 3                       ; successful. If there is no input available from the current input
001ED5r 3                       ; source, return false. When the input source is a string from EVALUATE,
001ED5r 3                       ; return false and perform no other action." See
001ED5r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001ED5r 3                       ; and Conklin & Rather p. 156. Note we don't have to care about blocks
001ED5r 3                       ; because REFILL is never used on blocks - Tali is able to evaluate the
001ED5r 3                       ; entire block as a 1024 byte string.
001ED5r 3                       ; """"
001ED5r 3               
001ED5r 3               xt_refill:
001ED5r 3                               ; Get input source from SOURCE-ID. This is an
001ED5r 3                               ; optimized version of a subroutine jump to SOURCE-ID
001ED5r 3  A5 rr                        lda insrc               ; cheat: We only check LSB
001ED7r 3  D0 2D                        bne @src_not_kbd
001ED9r 3               
001ED9r 3                               ; SOURCE-ID of zero means we're getting stuff from the keyboard
001ED9r 3                               ; with ACCEPT, which wants the address of the current input
001ED9r 3                               ; buffer NOS and the max number of characters to accept TOS
001ED9r 3  CA                           dex
001EDAr 3  CA                           dex
001EDBr 3  CA                           dex
001EDCr 3  CA                           dex
001EDDr 3               
001EDDr 3  A5 rr                        lda cib                 ; address of CIB is NOS
001EDFr 3  95 02                        sta 2,x
001EE1r 3  A5 rr                        lda cib+1
001EE3r 3  95 03                        sta 3,x
001EE5r 3               
001EE5r 3  64 rr                        stz ciblen              ; go in with empty buffer
001EE7r 3  64 rr                        stz ciblen+1
001EE9r 3               
001EE9r 3  A9 FF                        lda #bsize              ; max number of chars is TOS
001EEBr 3  95 00                        sta 0,x
001EEDr 3  74 01                        stz 1,x                 ; cheat: We only accept max 255
001EEFr 3               
001EEFr 3  20 rr rr                     jsr xt_accept           ; ( addr n1 -- n2)
001EF2r 3               
001EF2r 3                               ; ACCEPT returns the number of characters accepted, which
001EF2r 3                               ; belong in CIBLEN
001EF2r 3  B5 00                        lda 0,x
001EF4r 3  85 rr                        sta ciblen
001EF6r 3  B5 01                        lda 1,x
001EF8r 3  85 rr                        sta ciblen+1            ; though we only accept 255 chars
001EFAr 3               
001EFAr 3                               ; make >IN point to beginning of buffer
001EFAr 3  64 rr                        stz toin
001EFCr 3  64 rr                        stz toin+1
001EFEr 3               
001EFEr 3  A9 FF                        lda #$FF                ; overwrite with TRUE flag
001F00r 3  95 00                        sta 0,x
001F02r 3  95 01                        sta 1,x
001F04r 3               
001F04r 3  80 10                        bra @done
001F06r 3               
001F06r 3               @src_not_kbd:
001F06r 3                               ; If SOURCE-ID doesn't return a zero, it must be a string in
001F06r 3                               ; memory or a file (remember, no blocks in this version).
001F06r 3                               ; If source is a string, we were given the flag -1 ($FFFF)
001F06r 3  1A                           inc
001F07r 3  D0 08                        bne @src_not_string
001F09r 3               
001F09r 3                               ; Simply return FALSE flag as per specification
001F09r 3  CA                           dex
001F0Ar 3  CA                           dex
001F0Br 3  74 00                        stz 0,x
001F0Dr 3  74 01                        stz 1,x
001F0Fr 3               
001F0Fr 3  80 05                        bra z_refill
001F11r 3               
001F11r 3               @src_not_string:
001F11r 3                               ; Since we don't have blocks, this must mean that we are trying
001F11r 3                               ; to read from a file. However, we don't have files yet, so we
001F11r 3                               ; report an error and jump to ABORT.
001F11r 3  A9 01                        lda #err_badsource
001F13r 3  4C rr rr                     jmp error
001F16r 3               @done:
001F16r 3  60           z_refill:       rts
001F17r 3               
001F17r 3               
001F17r 3               
001F17r 3               ; ## REPEAT (C: orig dest -- ) ( -- ) "Loop flow control"
001F17r 3               ; ## "repeat"  auto  ANS core
001F17r 3                       ; """http://forth-standard.org/standard/core/REPEAT"""
001F17r 3               
001F17r 3               xt_repeat:
001F17r 3                               ; Run again first
001F17r 3  20 rr rr                     jsr xt_again
001F1Ar 3               
001F1Ar 3                               ; Stuff HERE in for the branch address
001F1Ar 3                               ; to get out of the loop
001F1Ar 3  20 rr rr                     jsr xt_here
001F1Dr 3  20 rr rr                     jsr xt_swap
001F20r 3  20 rr rr                     jsr xt_store
001F23r 3               
001F23r 3  60           z_repeat:       rts
001F24r 3               
001F24r 3               
001F24r 3               
001F24r 3               ; ## RIGHT_BRACKET ( -- ) "Enter the compile state"
001F24r 3               ; ## "]"  auto  ANS core
001F24r 3                       ; """https://forth-standard.org/standard/right-bracket
001F24r 3                       ; This is an immediate word.
001F24r 3                       ; """
001F24r 3               xt_right_bracket:
001F24r 3  A9 FF                        lda #$FF
001F26r 3  85 rr                        sta state
001F28r 3  85 rr                        sta state+1
001F2Ar 3               z_right_bracket:
001F2Ar 3  60                           rts
001F2Br 3               
001F2Br 3               
001F2Br 3               ; ## ROOT_WORDLIST ( -- u ) "WID for the Root (minimal) wordlist"
001F2Br 3               ; ## "root-wordlist"  tested  Tali Editor
001F2Br 3               xt_root_wordlist:
001F2Br 3  CA                           dex             ; The WID for the Root wordlist is 3.
001F2Cr 3  CA                           dex
001F2Dr 3  A9 03                        lda #3
001F2Fr 3  95 00                        sta 0,x
001F31r 3  74 01                        stz 1,x
001F33r 3               
001F33r 3               z_root_wordlist:
001F33r 3  60                           rts
001F34r 3               
001F34r 3               
001F34r 3               ; ## ROT ( a b c -- b c a ) "Rotate first three stack entries downwards"
001F34r 3               ; ## "rot"  auto  ANS core
001F34r 3                       ; """https://forth-standard.org/standard/core/ROT
001F34r 3                       ; Remember "R for 'Revolution'" - the bottom entry comes out
001F34r 3                       ; on top!
001F34r 3                       ; """
001F34r 3               
001F34r 3               xt_rot:
001F34r 3  20 rr rr                     jsr underflow_3
001F37r 3               
001F37r 3  B4 05                        ldy 5,x         ; MSB first
001F39r 3  B5 03                        lda 3,x
001F3Br 3  95 05                        sta 5,x
001F3Dr 3  B5 01                        lda 1,x
001F3Fr 3  95 03                        sta 3,x
001F41r 3  94 01                        sty 1,x
001F43r 3               
001F43r 3  B4 04                        ldy 4,x         ; LSB next
001F45r 3  B5 02                        lda 2,x
001F47r 3  95 04                        sta 4,x
001F49r 3  B5 00                        lda 0,x
001F4Br 3  95 02                        sta 2,x
001F4Dr 3  94 00                        sty 0,x
001F4Fr 3               
001F4Fr 3  60           z_rot:          rts
001F50r 3               
001F50r 3               
001F50r 3               
001F50r 3               ; ## RSHIFT ( x u -- x ) "Shift TOS to the right"
001F50r 3               ; ## "rshift"  auto  ANS core
001F50r 3                       ; """https://forth-standard.org/standard/core/RSHIFT"""
001F50r 3               xt_rshift:
001F50r 3  20 rr rr                     jsr underflow_2
001F53r 3               
001F53r 3                               ; We shift maximal by 16 bits, mask everything else
001F53r 3  B5 00                        lda 0,x
001F55r 3  29 0F                        and #%00001111
001F57r 3  F0 08                        beq @done               ; if 0 shifts, quit
001F59r 3               
001F59r 3  A8                           tay
001F5Ar 3               @loop:
001F5Ar 3  56 03                        lsr 3,x
001F5Cr 3  76 02                        ror 2,x
001F5Er 3  88                           dey
001F5Fr 3  D0 F9                        bne @loop
001F61r 3               @done:
001F61r 3  E8                           inx
001F62r 3  E8                           inx
001F63r 3               
001F63r 3  60           z_rshift:       rts
001F64r 3               
001F64r 3               
001F64r 3               ; ## S_BACKSLASH_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
001F64r 3               ; ## "s\""  auto  ANS core
001F64r 3                       ; """https://forth-standard.org/standard/core/Seq
001F64r 3                       ; Store address and length of string given, returning ( addr u ).
001F64r 3                       ; ANS core claims this is compile-only, but the file set expands it
001F64r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
001F64r 3                       ; are evil. We follow general usage. This is just like S" except
001F64r 3                       ; that it allows for some special escaped characters.
001F64r 3                       ; """
001F64r 3               
001F64r 3               xt_s_backslash_quote:
001F64r 3                               ; tmp2 will be used to determine if we are handling
001F64r 3                               ; escaped characters or not. In this case, we are,
001F64r 3                               ; so set it to $FF (the upper byte will be used to
001F64r 3                               ; determine if we just had a \ and the next character
001F64r 3                               ; needs to be modifed as an escaped character).
001F64r 3  A9 FF                        lda #$FF
001F66r 3  85 rr                        sta tmp2
001F68r 3  64 rr                        stz tmp2+1
001F6Ar 3               
001F6Ar 3                               ; Now that the flag is set, jump into s_quote to process
001F6Ar 3                               ; the string.
001F6Ar 3  20 rr rr                     jsr s_quote_start
001F6Dr 3               @done:
001F6Dr 3               z_s_backslash_quote:
001F6Dr 3  60                           rts
001F6Er 3               
001F6Er 3               
001F6Er 3               ; This is a helper function for s_backslash_quote to convert a character
001F6Er 3               ; from ASCII to the corresponding hex value, eg 'F'->15
001F6Er 3               convert_hex_value:
001F6Er 3               
001F6Er 3  C9 41                cmp #'A'
001F70r 3  90 07                bcc @digit
001F72r 3               
001F72r 3                       ; It's A-F
001F72r 3  29 DF                and #$DF                ; Make it uppercase.
001F74r 3  38                   sec
001F75r 3  E9 37                sbc #'7'                 ; gives value 10 for 'A'
001F77r 3  80 03                bra @done
001F79r 3               
001F79r 3               @digit:
001F79r 3                       ; It's 0-9
001F79r 3  38                   sec
001F7Ar 3  E9 30                sbc #'0'
001F7Cr 3               
001F7Cr 3               @done:
001F7Cr 3  60                   rts
001F7Dr 3               
001F7Dr 3               
001F7Dr 3               
001F7Dr 3               ; ## SEARCH_WORDLIST ( caddr u wid -- 0 | xt 1 | xt -1) "Search for a word in a wordlist"
001F7Dr 3               ; ## "search-wordlist" auto ANS search
001F7Dr 3                       ; """https://forth-standard.org/standard/search/SEARCH_WORDLIST"""
001F7Dr 3               
001F7Dr 3               xt_search_wordlist:
001F7Dr 3  20 rr rr                     jsr underflow_3
001F80r 3               
001F80r 3                               ; Set up tmp1 with the wordlist indicated by wid
001F80r 3                               ; on the stack. Start by putting the base address
001F80r 3                               ; of the wordlists in tmp2.
001F80r 3  A5 rr                        lda up
001F82r 3  18                           clc
001F83r 3  69 06                        adc #wordlists_offset
001F85r 3  85 rr                        sta tmp2
001F87r 3  A5 rr                        lda up+1
001F89r 3  69 00                        adc #0          ; Adding carry
001F8Br 3  85 rr                        sta tmp2+1
001F8Dr 3               
001F8Dr 3                               ; Add the wid (in cells) to the base address.
001F8Dr 3  B5 00                        lda 0,x
001F8Fr 3  0A                           asl             ; Convert wid to offset in cells (x2)
001F90r 3  65 rr                        adc tmp2
001F92r 3  85 rr                        sta tmp2
001F94r 3  90 02                        bcc @1
001F96r 3  E6 rr                        inc tmp2+1      ; Propagate carry if needed.
001F98r 3               
001F98r 3                               ; tmp2 now holds the address of the dictionary pointer
001F98r 3                               ; for the given wordlist.
001F98r 3               @1:
001F98r 3                               ; Remove the wid from the stack.
001F98r 3  E8                           inx
001F99r 3  E8                           inx
001F9Ar 3               
001F9Ar 3                               ; check for special case of an empty string (length zero)
001F9Ar 3  B5 00                        lda 0,x
001F9Cr 3  15 01                        ora 1,x
001F9Er 3  D0 03                        bne @check_wordlist
001FA0r 3  4C rr rr                     jmp @done
001FA3r 3               
001FA3r 3               @check_wordlist:
001FA3r 3                               ; Check for special case of empty wordlist
001FA3r 3                               ; (dictionary pointer, in tmp2, is 0)
001FA3r 3  A5 rr                        lda tmp2
001FA5r 3  05 rr                        ora tmp2+1
001FA7r 3  D0 03                        bne @have_string
001FA9r 3  4C rr rr                     jmp @done
001FACr 3               
001FACr 3               @have_string:
001FACr 3                               ; set up first loop iteration
001FACr 3  B2 rr                        lda (tmp2)              ; nt of first word in Dictionary
001FAEr 3  85 rr                        sta tmp1
001FB0r 3               
001FB0r 3  E6 rr                        inc tmp2                ; Move to the upper byte
001FB2r 3  D0 02                        bne @2
001FB4r 3  E6 rr                        inc tmp2+1
001FB6r 3               @2:
001FB6r 3  B2 rr                        lda (tmp2)
001FB8r 3  85 rr                        sta tmp1+1
001FBAr 3               
001FBAr 3                               ; Reuse tmp2 to hold the address of the mystery string.
001FBAr 3  B5 02                        lda 2,x                 ; Address of mystery string
001FBCr 3  85 rr                        sta tmp2
001FBEr 3  B5 03                        lda 3,x
001FC0r 3  85 rr                        sta tmp2+1
001FC2r 3               
001FC2r 3               @loop:
001FC2r 3                               ; first quick test: Are strings the same length?
001FC2r 3  B2 rr                        lda (tmp1)
001FC4r 3  D5 00                        cmp 0,x
001FC6r 3  D0 7B                        bne @next_entry
001FC8r 3               
001FC8r 3               @compare_string:
001FC8r 3                               ; are the same length, so we now have to compare each
001FC8r 3                               ; character
001FC8r 3               
001FC8r 3                               ; second quick test: Is the first character the same?
001FC8r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
001FCAr 3               
001FCAr 3                               ; Lowercase the incoming charcter.
001FCAr 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
001FCCr 3  B0 07                        bcs @compare_first
001FCEr 3  C9 41                        cmp #$41        ; ASCII 'A'
001FD0r 3  90 03                        bcc @compare_first
001FD2r 3               
001FD2r 3                               ; An uppercase letter has been located.  Make it
001FD2r 3                               ; lowercase.
001FD2r 3  18                           clc
001FD3r 3  69 20                        adc #$20
001FD5r 3               
001FD5r 3               @compare_first:
001FD5r 3  A0 08                        ldy #8          ; Offset in nt to name
001FD7r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
001FD9r 3  D0 68                        bne @next_entry
001FDBr 3               
001FDBr 3                               ; string length are the same and the first character is the
001FDBr 3                               ; same. If the length of the string is 1, we're already done
001FDBr 3  B5 00                        lda 0,x
001FDDr 3  3A                           dec
001FDEr 3  F0 2C                        beq @success
001FE0r 3               
001FE0r 3                               ; No such luck: The strings are the same length and the first
001FE0r 3                               ; char is the same, but the word is more than one char long.
001FE0r 3                               ; So we suck it up and compare every single character. We go
001FE0r 3                               ; from back to front, because words like CELLS and CELL+ would
001FE0r 3                               ; take longer otherwise. We can also shorten the loop by one
001FE0r 3                               ; because we've already compared the first char.
001FE0r 3               
001FE0r 3                               ; The string of the word we're testing against is 8 bytes down
001FE0r 3  A5 rr                        lda tmp1
001FE2r 3  48                           pha             ; Preserve tmp1 on the return stack.
001FE3r 3  18                           clc
001FE4r 3  69 08                        adc #8
001FE6r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
001FE8r 3  A5 rr                        lda tmp1+1
001FEAr 3  48                           pha             ; Preserve tmp1+1 on the return stack.
001FEBr 3  69 00                        adc #0          ; we only need the carry
001FEDr 3  85 rr                        sta tmp1+1
001FEFr 3               
001FEFr 3  B4 00                        ldy 0,x         ; index is length of string minus 1
001FF1r 3  88                           dey
001FF2r 3               
001FF2r 3               @string_loop:
001FF2r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
001FF4r 3               
001FF4r 3                               ; Lowercase the incoming charcter.
001FF4r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
001FF6r 3  B0 07                        bcs @check_char
001FF8r 3  C9 41                        cmp #$41        ; ASCII 'A'
001FFAr 3  90 03                        bcc @check_char
001FFCr 3               
001FFCr 3                               ; An uppercase letter has been located.  Make it
001FFCr 3                               ; lowercase.
001FFCr 3  18                           clc
001FFDr 3  69 20                        adc #$20
001FFFr 3               @check_char:
001FFFr 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
002001r 3  D0 3A                        bne @next_entry_tmp1
002003r 3               
002003r 3  88                           dey
002004r 3  D0 EC                        bne @string_loop
002006r 3               
002006r 3               @success_tmp1:
002006r 3  68                           pla             ; Restore tmp1 from the return stack.
002007r 3  85 rr                        sta tmp1+1
002009r 3  68                           pla
00200Ar 3  85 rr                        sta tmp1
00200Cr 3               
00200Cr 3               @success:
00200Cr 3                               ; The strings match. Drop the count and put correct nt TOS
00200Cr 3  E8                           inx
00200Dr 3  E8                           inx
00200Er 3  A5 rr                        lda tmp1
002010r 3  95 00                        sta 0,x
002012r 3  A5 rr                        lda tmp1+1
002014r 3  95 01                        sta 1,x
002016r 3               
002016r 3                               ; Change the nt into an xt, but save a copy of the nt
002016r 3                               ; to look up whether the word is immediate or not.
002016r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002019r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
00201Cr 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
00201Fr 3               
00201Fr 3  A0 00                        ldy #0                  ; Prepare flag
002021r 3               
002021r 3                               ; The flags are in the second byte of the header
002021r 3  F6 00                        inc 0,x
002023r 3  D0 02                        bne @3
002025r 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
002027r 3               @3:
002027r 3  A1 00                        lda (0,x)               ; ( xt char )
002029r 3  29 04                        and #IM
00202Br 3  D0 08                        bne @immediate          ; bit set, we're immediate
00202Dr 3               
00202Dr 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
00202Fr 3  95 00                        sta 0,x
002031r 3  95 01                        sta 1,x
002033r 3  80 28                        bra @done_nodrop
002035r 3               
002035r 3               @immediate:
002035r 3  A9 01                        lda #1                  ; We're immediate, return 1
002037r 3  95 00                        sta 0,x
002039r 3  74 01                        stz 1,x
00203Br 3               
00203Br 3  80 20                        bra @done_nodrop
00203Dr 3               
00203Dr 3               @next_entry_tmp1:
00203Dr 3  68                           pla             ; Restore tmp1 from the return stack.
00203Er 3  85 rr                        sta tmp1+1
002040r 3  68                           pla
002041r 3  85 rr                        sta tmp1
002043r 3               @next_entry:
002043r 3                               ; Not the same, so we get the next word. Next header
002043r 3                               ; address is two bytes down
002043r 3  A0 02                        ldy #2
002045r 3  B1 rr                        lda (tmp1),y
002047r 3  48                           pha
002048r 3  C8                           iny
002049r 3  B1 rr                        lda (tmp1),y
00204Br 3  85 rr                        sta tmp1+1
00204Dr 3  68                           pla
00204Er 3  85 rr                        sta tmp1
002050r 3               
002050r 3                               ; If we got a zero, we've walked the whole Dictionary and
002050r 3                               ; return as a failure, otherwise try again
002050r 3  05 rr                        ora tmp1+1
002052r 3  F0 03                        beq @fail_done
002054r 3  4C rr rr                     jmp @loop
002057r 3               
002057r 3               @fail_done:
002057r 3  74 02                        stz 2,x         ; failure flag
002059r 3  74 03                        stz 3,x
00205Br 3               @done:
00205Br 3  E8                           inx
00205Cr 3  E8                           inx
00205Dr 3               @done_nodrop:
00205Dr 3               z_search_wordlist:
00205Dr 3  60                           rts
00205Er 3               
00205Er 3               
00205Er 3               
00205Er 3               ; ## SEE ( "name" -- ) "Print information about a Forth word"
00205Er 3               ; ## "see" tested  ANS tools
00205Er 3                       ; """https://forth-standard.org/standard/tools/SEE
00205Er 3                       ; SEE takes the name of a word and prints its name token (nt),
00205Er 3                       ; execution token (xt), size in bytes, flags used, and then dumps the
00205Er 3                       ; code and disassembles it.
00205Er 3                       ; """
00205Er 3               
00205Er 3               xt_see:
00205Er 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
002061r 3  20 rr rr                     jsr xt_find_name        ; ( nt | 0 )
002064r 3               
002064r 3                               ; If we got back a zero we don't know that word and so we quit
002064r 3                               ; with an error
002064r 3  B5 00                        lda 0,x
002066r 3  15 01                        ora 1,x
002068r 3  D0 05                        bne @1
00206Ar 3               
00206Ar 3  A9 05                        lda #err_noname
00206Cr 3  4C rr rr                     jmp error
00206Fr 3               @1:
00206Fr 3  20 rr rr                     jsr xt_cr
002072r 3               
002072r 3                               ; We have a legal word, so let's get serious. Save the current
002072r 3                               ; number base and use hexadecimal instead.
002072r 3  A5 rr                        lda base
002074r 3  48                           pha
002075r 3  20 rr rr                     jsr xt_hex
002078r 3               
002078r 3  A9 0A                        lda #str_see_nt
00207Ar 3  20 rr rr                     jsr print_string_no_lf
00207Dr 3               
00207Dr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002080r 3  20 rr rr                     jsr xt_u_dot
002083r 3  20 rr rr                     jsr xt_space            ; ( nt )
002086r 3               
002086r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002089r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
00208Cr 3               
00208Cr 3  A9 0B                        lda #str_see_xt
00208Er 3  20 rr rr                     jsr print_string_no_lf
002091r 3               
002091r 3  20 rr rr                     jsr xt_dup              ; ( nt xt xt )
002094r 3  20 rr rr                     jsr xt_u_dot
002097r 3  20 rr rr                     jsr xt_cr               ; ( nt xt )
00209Ar 3               
00209Ar 3                               ; We print letters for flags and then later follow it with 1 or
00209Ar 3                               ; 0 to mark if which flag is set
00209Ar 3  A9 09                        lda #str_see_flags
00209Cr 3  20 rr rr                     jsr print_string_no_lf
00209Fr 3               
00209Fr 3  20 rr rr                     jsr xt_over             ; ( nt xt nt )
0020A2r 3  20 rr rr                     jsr xt_one_plus         ; ( nt xt nt+1 )
0020A5r 3  20 rr rr                     jsr xt_fetch            ; ( nt xt flags )
0020A8r 3               
0020A8r 3  B5 00                        lda 0,x
0020AAr 3               
0020AAr 3                               ; This is crude, but for the moment it is good enough
0020AAr 3  A0 06                        ldy #6                  ; Not all bits are used
0020ACr 3               @flag_loop:
0020ACr 3  48                           pha
0020ADr 3  29 01                        and #%00000001
0020AFr 3  18                           clc
0020B0r 3  69 30                        adc #$30                ; ASCII "0"
0020B2r 3  20 rr rr                     jsr emit_a
0020B5r 3  20 rr rr                     jsr xt_space
0020B8r 3               
0020B8r 3  68                           pla
0020B9r 3  6A                           ror                     ; Next flag
0020BAr 3               
0020BAr 3  88                           dey
0020BBr 3  D0 EF                        bne @flag_loop
0020BDr 3               
0020BDr 3  20 rr rr                     jsr xt_cr
0020C0r 3               
0020C0r 3  E8                           inx
0020C1r 3  E8                           inx                     ; ( nt xt )
0020C2r 3               
0020C2r 3                               ; Figure out the size
0020C2r 3  A9 0C                        lda #str_see_size
0020C4r 3  20 rr rr                     jsr print_string_no_lf
0020C7r 3               
0020C7r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
0020CAr 3  20 rr rr                     jsr xt_wordsize         ; ( xt u )
0020CDr 3  20 rr rr                     jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
0020D0r 3  20 rr rr                     jsr xt_decimal
0020D3r 3  20 rr rr                     jsr xt_u_dot            ; ( xt u )
0020D6r 3  20 rr rr                     jsr xt_hex
0020D9r 3  20 rr rr                     jsr xt_cr
0020DCr 3               
0020DCr 3                               ; Dump hex and disassemble
0020DCr 3  20 rr rr                     jsr xt_two_dup          ; ( xt u xt u )
0020DFr 3  20 rr rr                     jsr xt_dump
0020E2r 3  20 rr rr                     jsr xt_cr
0020E5r 3  20 rr rr                     jsr xt_disasm
0020E8r 3               
0020E8r 3  68                           pla
0020E9r 3  85 rr                        sta base
0020EBr 3               
0020EBr 3  60           z_see:          rts
0020ECr 3               
0020ECr 3               
0020ECr 3               
0020ECr 3               ; ## SET_CURRENT ( wid -- ) "Set the compilation wordlist"
0020ECr 3               ; ## "set-current" auto ANS search
0020ECr 3                       ; """https://forth-standard.org/standard/search/SET-CURRENT"""
0020ECr 3               
0020ECr 3               xt_set_current:
0020ECr 3  20 rr rr                     jsr underflow_1
0020EFr 3               
0020EFr 3                               ; Save the value from the data stack.
0020EFr 3  A0 04                        ldy #current_offset
0020F1r 3  B5 00                        lda 0,x         ; CURRENT is byte variable
0020F3r 3  91 rr                        sta (up),y      ; so only the LSB is used.
0020F5r 3               
0020F5r 3  E8                           inx
0020F6r 3  E8                           inx
0020F7r 3               
0020F7r 3  60           z_set_current:  rts
0020F8r 3               
0020F8r 3               
0020F8r 3               
0020F8r 3               ; ## SET_ORDER ( wid_n .. wid_1 n -- ) "Set the current search order"
0020F8r 3               ; ## "set-order" auto ANS search
0020F8r 3                       ; """https://forth-standard.org/standard/search/SET-ORDER"""
0020F8r 3               
0020F8r 3               xt_set_order:
0020F8r 3                               ; Test for -1 TOS
0020F8r 3  A9 FF                        lda #$FF
0020FAr 3  D5 01                        cmp 1,x
0020FCr 3  D0 12                        bne @start
0020FEr 3  D5 00                        cmp 0,x
002100r 3  D0 0E                        bne @start
002102r 3               
002102r 3                               ; There is a -1 TOS.  Replace it with the default
002102r 3                               ; search order, which is just the FORTH-WORDLIST.
002102r 3  CA                           dex             ; Make room for the count.
002103r 3  CA                           dex
002104r 3  74 03                        stz 3,x         ; ROOT-WORDLIST is 3
002106r 3  A9 03                        lda #3
002108r 3  95 02                        sta 2,x
00210Ar 3  74 01                        stz 1,x         ; Count is 1.
00210Cr 3  A9 01                        lda #1
00210Er 3  95 00                        sta 0,x
002110r 3               
002110r 3                               ; Continue processing with ( forth-wordlist 1 -- )
002110r 3               @start:
002110r 3                               ; Set #ORDER - the number of wordlists in the search order.
002110r 3  A0 1E                        ldy #num_order_offset
002112r 3  B5 00                        lda 0,x
002114r 3  91 rr                        sta (up),y      ; #ORDER is a byte variable.
002116r 3  85 rr                        sta tmp1        ; Save a copy for zero check and looping.
002118r 3                                               ; Only the low byte is saved in tmp1 as
002118r 3                                               ; only 8 wordlists are allowed.
002118r 3               
002118r 3  E8                           inx             ; Drop the count off the data stack.
002119r 3  E8                           inx
00211Ar 3               
00211Ar 3                               ; Check if there are zero wordlists.
00211Ar 3  A5 rr                        lda tmp1
00211Cr 3  F0 0D                        beq @done       ; If zero, there are no wordlists.
00211Er 3               
00211Er 3                               ; Move the wordlist ids from the data stack to the search order.
00211Er 3  A0 1F                        ldy #search_order_offset
002120r 3               @loop:
002120r 3                               ; Move one wordlist id over into the search order.
002120r 3  B5 00                        lda 0,x         ; The search order is a byte array
002122r 3  91 rr                        sta (up),y      ; so only save the LSB
002124r 3  C8                           iny
002125r 3               
002125r 3                               ; Remove it from the data stack.
002125r 3  E8                           inx
002126r 3  E8                           inx
002127r 3               
002127r 3                               ; See if that was the last one to process (first in the list).
002127r 3  C6 rr                        dec tmp1
002129r 3  D0 F5                        bne @loop
00212Br 3               
00212Br 3               @done:
00212Br 3  60           z_set_order:    rts
00212Cr 3               
00212Cr 3               
00212Cr 3               
00212Cr 3               
00212Cr 3               ; ## S_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
00212Cr 3               ; ## "s""  auto  ANS core
00212Cr 3                       ; """https://forth-standard.org/standard/core/Sq
00212Cr 3                       ; Store address and length of string given, returning ( addr u ).
00212Cr 3                       ; ANS core claims this is compile-only, but the file set expands it
00212Cr 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
00212Cr 3                       ; are evil. We follow general usage.
00212Cr 3                       ;
00212Cr 3                       ; Can also be realized as
00212Cr 3                       ;     : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE
00212Cr 3                       ; but it is used so much we want it in code.
00212Cr 3                       ; """
00212Cr 3               
00212Cr 3               xt_s_quote:
00212Cr 3                               ; tmp2 will be used to determine if we are handling
00212Cr 3                               ; escaped characters or not.  In this case, we are
00212Cr 3                               ; not, so set it to zero.
00212Cr 3  64 rr                        stz tmp2
00212Er 3  64 rr                        stz tmp2+1
002130r 3               
002130r 3               s_quote_start:
002130r 3                               ; Make room on the data stack for the address.
002130r 3  CA                           dex
002131r 3  CA                           dex
002132r 3                               ; Make room on the data stack for the count.
002132r 3  CA                           dex
002133r 3  CA                           dex
002134r 3               
002134r 3                               ; Put a jmp over the string data with address to be filled
002134r 3                               ; in later.
002134r 3  A9 4C                        lda #$4C
002136r 3  20 rr rr                     jsr cmpl_a
002139r 3               
002139r 3                               ; Address to be filled in later, just use $4C for the moment
002139r 3  20 rr rr                     jsr cmpl_a
00213Cr 3  20 rr rr                     jsr cmpl_a
00213Fr 3               
00213Fr 3                               ; Save the current value of HERE on the data stack for the
00213Fr 3                               ; address of the string.
00213Fr 3  A5 rr                        lda cp
002141r 3  95 02                        sta 2,x
002143r 3  A5 rr                        lda cp+1
002145r 3  95 03                        sta 3,x
002147r 3               
002147r 3               @savechars_loop:
002147r 3                               ; Start saving the string into the dictionary up to the
002147r 3                               ; ending double quote. First, check to see if the input
002147r 3                               ; buffer is empty.
002147r 3  A5 rr                        lda toin+1              ; MSB
002149r 3  C5 rr                        cmp ciblen+1
00214Br 3  90 2A                        bcc @input_fine         ; unsigned comparison
00214Dr 3               
00214Dr 3  A5 rr                        lda toin                ; LSB
00214Fr 3  C5 rr                        cmp ciblen
002151r 3  90 24                        bcc @input_fine
002153r 3               
002153r 3                               ; Input buffer is empty. Refill it. Refill calls accept,
002153r 3                               ; which uses tmp2 and tmp3. Save and restore them.
002153r 3  A5 rr                        lda tmp2
002155r 3  48                           pha
002156r 3  A5 rr                        lda tmp2+1
002158r 3  48                           pha
002159r 3  A5 rr                        lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
00215Br 3  48                           pha
00215Cr 3               
00215Cr 3  20 rr rr                     jsr xt_refill           ; ( -- f )
00215Fr 3               
00215Fr 3  68                           pla
002160r 3  85 rr                        sta tmp3
002162r 3  68                           pla
002163r 3  85 rr                        sta tmp2+1
002165r 3  68                           pla
002166r 3  85 rr                        sta tmp2
002168r 3               
002168r 3                               ; Check result of refill.
002168r 3  B5 00                        lda 0,x
00216Ar 3  15 01                        ora 1,x
00216Cr 3  D0 05                        bne @refill_ok
00216Er 3               
00216Er 3                               ; Something when wrong with refill.
00216Er 3  A9 06                        lda #err_refill
002170r 3  4C rr rr                     jmp error
002173r 3               
002173r 3               @refill_ok:
002173r 3                               ; Remove the refill flag from the data stack.
002173r 3  E8                           inx
002174r 3  E8                           inx
002175r 3               
002175r 3                               ; For refill success, jump back up to the empty check, just in
002175r 3                               ; case refill gave us an empty buffer (eg. empty/blank line of
002175r 3                               ; input)
002175r 3  80 D0                        bra @savechars_loop
002177r 3               
002177r 3               @input_fine:
002177r 3                               ; There should be at least one valid char to use.
002177r 3                               ; Calculate it's address at CIB+TOIN into tmp1
002177r 3  A5 rr                        lda cib
002179r 3  18                           clc
00217Ar 3  65 rr                        adc toin        ; LSB
00217Cr 3  85 rr                        sta tmp1
00217Er 3  A5 rr                        lda cib+1
002180r 3  65 rr                        adc toin+1      ; MSB
002182r 3  85 rr                        sta tmp1+1
002184r 3               
002184r 3                               ; Get the character
002184r 3  B2 rr                        lda (tmp1)
002186r 3               
002186r 3                               ; Check to see if we are handling escaped characters.
002186r 3  24 rr                        bit tmp2
002188r 3  30 03                        bmi @handle_escapes    ; Only checking bit 7
00218Ar 3  4C rr rr                     jmp @regular_char
00218Dr 3               
00218Dr 3               @handle_escapes:
00218Dr 3                               ; We are handling escaped characters.  See if we have
00218Dr 3                               ; already seen the backslash.
00218Dr 3  24 rr                        bit tmp2+1
00218Fr 3  30 03                        bmi @escaped
002191r 3  4C rr rr                     jmp @not_escaped
002194r 3               
002194r 3               @escaped:
002194r 3               
002194r 3                               ; We have seen a backslash (previous character). Check to see if
002194r 3                               ; we are in the middle of a \x sequence (bit 6 of tmp2+1 will
002194r 3                               ; be clear in that case )
002194r 3  70 22                        bvs @check_esc_chars
002196r 3               
002196r 3                               ; We are in the middle of a \x sequence. Check to see if we
002196r 3                               ; are on the first or second digit.
002196r 3  A9 01                        lda #1
002198r 3  24 rr                        bit tmp2+1
00219Ar 3  D0 10                        bne @esc_x_second_digit
00219Cr 3               
00219Cr 3                               ; First digit.
00219Cr 3  E6 rr                        inc tmp2+1  ; Adjust flag for second digit next time.
00219Er 3  B2 rr                        lda (tmp1)  ; Get the char again.
0021A0r 3               
0021A0r 3                               ; Convert to hex
0021A0r 3  20 rr rr                     jsr convert_hex_value
0021A3r 3               
0021A3r 3                               ; This is the upper nybble, so move it up.
0021A3r 3  0A                           asl
0021A4r 3  0A                           asl
0021A5r 3  0A                           asl
0021A6r 3  0A                           asl
0021A7r 3  85 rr                        sta tmp3    ; Save it for later.
0021A9r 3  4C rr rr                     jmp @next_character
0021ACr 3               
0021ACr 3               @esc_x_second_digit:
0021ACr 3               
0021ACr 3                               ; We are on the second hex digit of a \x sequence. Clear the
0021ACr 3                               ; escaped character flag (because we are handling it right
0021ACr 3                               ; here)
0021ACr 3  64 rr                        stz tmp2+1
0021AEr 3  B2 rr                        lda (tmp1)
0021B0r 3               
0021B0r 3                               ; Convert to hex, combine with value in tmp3
0021B0r 3  20 rr rr                     jsr convert_hex_value
0021B3r 3  05 rr                        ora tmp3
0021B5r 3               
0021B5r 3  4C rr rr                     jmp @save_character
0021B8r 3               
0021B8r 3               @check_esc_chars:
0021B8r 3                               ; Clear the escaped character flag (because we are
0021B8r 3                               ; handling it right here)
0021B8r 3  64 rr                        stz tmp2+1
0021BAr 3               
0021BAr 3                               ; Process the escaped character
0021BAr 3               @check_esc_a:
0021BAr 3  C9 61                        cmp #'a'
0021BCr 3  D0 05                        bne @check_esc_b
0021BEr 3               
0021BEr 3                               ; BEL (ASCII value 7)
0021BEr 3  A9 07                        lda #7
0021C0r 3  4C rr rr                     jmp @save_character
0021C3r 3               
0021C3r 3               @check_esc_b:
0021C3r 3  C9 62                        cmp #'b'
0021C5r 3  D0 05                        bne @check_esc_e
0021C7r 3               
0021C7r 3                               ; Backspace (ASCII value 8)
0021C7r 3  A9 08                        lda #8
0021C9r 3  4C rr rr                     jmp @save_character
0021CCr 3               
0021CCr 3               @check_esc_e:
0021CCr 3  C9 65                        cmp #'e'
0021CEr 3  D0 04                        bne @check_esc_f
0021D0r 3               
0021D0r 3                               ; ESC (ASCII value 27)
0021D0r 3  A9 1B                        lda #27
0021D2r 3  80 75                        bra @save_character
0021D4r 3               
0021D4r 3               @check_esc_f:
0021D4r 3  C9 66                        cmp #'f'
0021D6r 3  D0 04                        bne @check_esc_l
0021D8r 3               
0021D8r 3                               ; FF (ASCII value 12)
0021D8r 3  A9 0C                        lda #12
0021DAr 3  80 6D                        bra @save_character
0021DCr 3               
0021DCr 3               @check_esc_l:
0021DCr 3  C9 6C                        cmp #'l'
0021DEr 3  D0 04                        bne @check_esc_m
0021E0r 3               
0021E0r 3                               ; LF (ASCII value 10)
0021E0r 3  A9 0A                        lda #10
0021E2r 3  80 65                        bra @save_character
0021E4r 3               
0021E4r 3               @check_esc_m:
0021E4r 3                               ; This one is not like the others because we save two
0021E4r 3                               ; characters
0021E4r 3  C9 6D                        cmp #'m'
0021E6r 3  D0 09                        bne @check_esc_n
0021E8r 3               
0021E8r 3                               ; CR/LF pair (ASCII values 13, 10)
0021E8r 3  A9 0D                        lda #13
0021EAr 3  20 rr rr                     jsr cmpl_a
0021EDr 3  A9 0A                        lda #10
0021EFr 3  80 58                        bra @save_character
0021F1r 3               
0021F1r 3               @check_esc_n:
0021F1r 3  C9 6E                        cmp #'n'
0021F3r 3  D0 04                        bne @check_esc_q
0021F5r 3               
0021F5r 3                               ; newline, impl. dependant, using LF (ASCII values 10)
0021F5r 3  A9 0A                        lda #10
0021F7r 3  80 50                        bra @save_character
0021F9r 3               
0021F9r 3               @check_esc_q:
0021F9r 3  C9 71                        cmp #'q'
0021FBr 3  D0 04                        bne @check_esc_r
0021FDr 3               
0021FDr 3                               ; Double quote (ASCII value 34)
0021FDr 3  A9 22                        lda #34
0021FFr 3  80 48                        bra @save_character
002201r 3               
002201r 3               @check_esc_r:
002201r 3  C9 72                        cmp #'r'
002203r 3  D0 04                        bne @check_esc_t
002205r 3               
002205r 3                               ; CR (ASCII value 13)
002205r 3  A9 0D                        lda #13
002207r 3  80 40                        bra @save_character
002209r 3               
002209r 3               @check_esc_t:
002209r 3  C9 74                        cmp #'t'
00220Br 3  D0 04                        bne @check_esc_v
00220Dr 3               
00220Dr 3                               ; Horizontal TAB (ASCII value 9)
00220Dr 3  A9 09                        lda #9
00220Fr 3  80 38                        bra @save_character
002211r 3               
002211r 3               @check_esc_v:
002211r 3  C9 76                        cmp #'v'
002213r 3  D0 04                        bne @check_esc_z
002215r 3               
002215r 3                               ; Vertical TAB (ASCII value 11)
002215r 3  A9 0B                        lda #11
002217r 3  80 30                        bra @save_character
002219r 3               
002219r 3               @check_esc_z:
002219r 3  C9 7A                        cmp #'z'
00221Br 3  D0 04                        bne @check_esc_quote
00221Dr 3               
00221Dr 3                               ; NULL (ASCII value 0)
00221Dr 3  A9 00                        lda #0
00221Fr 3  80 28                        bra @save_character
002221r 3               
002221r 3               @check_esc_quote:
002221r 3  C9 22                        cmp #$22
002223r 3  D0 04                        bne @check_esc_x
002225r 3               
002225r 3                               ; Double quote (ASCII value 34)
002225r 3  A9 22                        lda #34
002227r 3  80 20                        bra @save_character
002229r 3               
002229r 3               @check_esc_x:
002229r 3  C9 78                        cmp #'x'
00222Br 3  D0 06                        bne @check_esc_backslash
00222Dr 3               
00222Dr 3                               ; This one is difficult. We need to get the next TWO
00222Dr 3                               ; characters (which might require a refill in the middle)
00222Dr 3                               ; and combine them as two hex digits. We do this by
00222Dr 3                               ; clearing bit 6 of tmp2+1 to indicate we are in a digit
00222Dr 3                               ; and using bit 0 to keep track of which digit we are on.
00222Dr 3  A9 BE                        lda #$BE        ; Clear bits 6 and 0
00222Fr 3  85 rr                        sta tmp2+1
002231r 3  80 19                        bra @next_character
002233r 3               
002233r 3               @check_esc_backslash:
002233r 3  C9 5C                        cmp #$5C
002235r 3  D0 04                        bne @not_escaped
002237r 3               
002237r 3                               ; Backslash (ASCII value 92)
002237r 3  A9 5C                        lda #92
002239r 3  80 0E                        bra @save_character
00223Br 3               
00223Br 3               @not_escaped:
00223Br 3                               ; Check for the backslash to see if we should escape
00223Br 3                               ; the next char.
00223Br 3  C9 5C                        cmp #$5C        ; The backslash char
00223Dr 3  D0 06                        bne @regular_char
00223Fr 3               
00223Fr 3                               ; We found a backslash.  Don't save anyhing, but set
00223Fr 3                               ; a flag (in tmp2+1) to handle the next char. We don't
00223Fr 3                               ; try to get the next char here as it may require a
00223Fr 3                               ; refill of the input buffer.
00223Fr 3  A9 FF                        lda #$FF
002241r 3  85 rr                        sta tmp2+1
002243r 3  80 07                        bra @next_character
002245r 3               
002245r 3               @regular_char:
002245r 3                               ; Check if the current character is the end of the string.
002245r 3  C9 22                        cmp #$22        ; ASCII for "
002247r 3  F0 0C                        beq @found_string_end
002249r 3               
002249r 3               @save_character:
002249r 3                               ; If we didn't reach the end of the string, compile this
002249r 3                               ; character into the dictionary
002249r 3  20 rr rr                     jsr cmpl_a
00224Cr 3               
00224Cr 3               @next_character:
00224Cr 3                               ; Move on to the next character.
00224Cr 3  E6 rr                        inc toin
00224Er 3  D0 02                        bne @savechars_loop_longjump
002250r 3  E6 rr                        inc toin+1
002252r 3               
002252r 3               @savechars_loop_longjump:
002252r 3  4C rr rr                     jmp @savechars_loop
002255r 3               
002255r 3               @found_string_end:
002255r 3                               ; Use up the delimiter.
002255r 3  E6 rr                        inc toin
002257r 3  D0 02                        bne @1
002259r 3  E6 rr                        inc toin+1
00225Br 3               @1:
00225Br 3                               ; Calculate the length of the string, which is the
00225Br 3                               ; difference between cp and the address of the start
00225Br 3                               ; of the string (currently saved on the stack).
00225Br 3  A5 rr                        lda cp
00225Dr 3  38                           sec
00225Er 3  F5 02                        sbc 2,x
002260r 3  95 00                        sta 0,x         ; LSB
002262r 3  A5 rr                        lda cp+1
002264r 3  F5 03                        sbc 3,x
002266r 3  95 01                        sta 1,x         ; MSB
002268r 3               
002268r 3                               ; Update the address of the jump-over jmp instruction.
002268r 3                               ; First determine location of jmp instructions address.
002268r 3                               ; It should be 2 bytes before the start of the string.
002268r 3                               ; Compute it into tmp1, which is no longer being used.
002268r 3  B5 02                        lda 2,x
00226Ar 3  38                           sec
00226Br 3  E9 02                        sbc #2
00226Dr 3  85 rr                        sta tmp1
00226Fr 3  B5 03                        lda 3,x
002271r 3  E9 00                        sbc #0          ; Propagate borrow
002273r 3  85 rr                        sta tmp1+1
002275r 3               
002275r 3                               ; Update the address of the jump to HERE.
002275r 3  A5 rr                        lda cp
002277r 3  92 rr                        sta (tmp1)
002279r 3  A0 01                        ldy #1
00227Br 3  A5 rr                        lda cp+1
00227Dr 3  91 rr                        sta (tmp1),y
00227Fr 3               
00227Fr 3                               ; What happens next depends on the state (which is bad, but
00227Fr 3                               ; that's the way it works at the moment). If we are
00227Fr 3                               ; interpretating, we save the string to a transient buffer
00227Fr 3                               ; and return that address (used for file calls, see
00227Fr 3                               ; https://forth-standard.org/standard/file/Sq . If we're
00227Fr 3                               ; compiling, we just need SLITERAL
00227Fr 3  A5 rr                        lda state
002281r 3  05 rr                        ora state+1             ; paranoid
002283r 3  F0 03                        beq @done
002285r 3               
002285r 3                               ; Jump into the middle of the sliteral word, after the
002285r 3                               ; string data has been compiled into the dictionary,
002285r 3                               ; because we've already done that step.
002285r 3  20 rr rr                     jsr sliteral_const_str         ; ( addr u -- )
002288r 3               
002288r 3               @done:
002288r 3  60           z_s_quote:      rts
002289r 3               
002289r 3               
002289r 3               
002289r 3               ; ## S_TO_D ( u -- d ) "Convert single cell number to double cell"
002289r 3               ; ## "s>d"  auto  ANS core
002289r 3                       ; """https://forth-standard.org/standard/core/StoD"""
002289r 3               
002289r 3               xt_s_to_d:
002289r 3  20 rr rr                     jsr underflow_1
00228Cr 3               
00228Cr 3  CA                           dex
00228Dr 3  CA                           dex
00228Er 3  74 00                        stz 0,x
002290r 3  74 01                        stz 1,x
002292r 3               
002292r 3  B5 03                        lda 3,x
002294r 3  10 04                        bpl @done
002296r 3               
002296r 3                               ; negative, extend sign
002296r 3  D6 00                        dec 0,x
002298r 3  D6 01                        dec 1,x
00229Ar 3               @done:
00229Ar 3  60           z_s_to_d:       rts
00229Br 3               
00229Br 3               
00229Br 3               
00229Br 3               ; ## SAVE_BUFFERS ( -- ) "Save all dirty buffers to storage"
00229Br 3               ; ## "save-buffers"  tested  ANS block
00229Br 3                       ; """https://forth-standard.org/standard/block/SAVE-BUFFERS"""
00229Br 3               
00229Br 3               xt_save_buffers:
00229Br 3                               ; Check the buffer status
00229Br 3  A0 2C                        ldy #buffstatus_offset
00229Dr 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
00229Fr 3  C9 03                        cmp #3          ; LSB is needed.
0022A1r 3  D0 12                        bne @done       ; Either not used or not dirty = done!
0022A3r 3               
0022A3r 3                               ; We need to save the block.
0022A3r 3  20 rr rr                     jsr xt_blkbuffer
0022A6r 3  20 rr rr                     jsr xt_buffblocknum
0022A9r 3  20 rr rr                     jsr xt_fetch
0022ACr 3  20 rr rr                     jsr xt_block_write
0022AFr 3               
0022AFr 3                               ; Mark the buffer as clean now.
0022AFr 3  A9 01                        lda #1
0022B1r 3  A0 2C                        ldy #buffstatus_offset
0022B3r 3  91 rr                        sta (up),y
0022B5r 3               
0022B5r 3               @done:
0022B5r 3  60           z_save_buffers: rts
0022B6r 3               
0022B6r 3               
0022B6r 3               
0022B6r 3               ; ## SCR ( -- addr ) "Push address of variable holding last screen listed"
0022B6r 3               ; ## "scr"  auto  ANS block ext
0022B6r 3                       ; """https://forth-standard.org/standard/block/SCR"""
0022B6r 3               xt_scr:
0022B6r 3                               ; SCR is at UP + scr_offset
0022B6r 3  CA                           dex
0022B7r 3  CA                           dex
0022B8r 3  18                           clc
0022B9r 3  A5 rr                        lda up
0022BBr 3  69 02                        adc #scr_offset ; Add offset
0022BDr 3  95 00                        sta 0,x
0022BFr 3  A5 rr                        lda up+1
0022C1r 3  69 00                        adc #0          ; Adding carry
0022C3r 3  95 01                        sta 1,x
0022C5r 3               
0022C5r 3  60           z_scr:          rts
0022C6r 3               
0022C6r 3               
0022C6r 3               ; ## SEARCH ( addr1 u1 addr2 u2 -- addr3 u3 flag) "Search for a substring"
0022C6r 3               ; ## "search"   auto  ANS string
0022C6r 3                       ; """https://forth-standard.org/standard/string/SEARCH
0022C6r 3                       ; Search for string2 (denoted by addr2 u2) in string1 (denoted by
0022C6r 3                       ; addr1 u1). If a match is found the flag will be true and
0022C6r 3                       ; addr3 will have the address of the start of the match and u3 will have
0022C6r 3                       ; the number of characters remaining from the match point to the end
0022C6r 3                       ; of the original string1. If a match is not found, the flag will be
0022C6r 3                       ; false and addr3 and u3 will be the original string1's addr1 and u1.
0022C6r 3                       ; """
0022C6r 3               
0022C6r 3               xt_search:
0022C6r 3  20 rr rr                     jsr underflow_4
0022C9r 3               
0022C9r 3                               ; ANS says if the second string is a zero-length string it
0022C9r 3                               ; automatically matches.
0022C9r 3  B5 00                        lda 0,x
0022CBr 3  15 01                        ora 1,x
0022CDr 3  D0 0B                        bne @start_search
0022CFr 3               
0022CFr 3                               ; The second string is a zero length string.  Just remove
0022CFr 3                               ; the second string and put a true flag.
0022CFr 3  E8                           inx             ; Remove u2
0022D0r 3  E8                           inx
0022D1r 3  A9 FF                        lda #$FF        ; Turn addr2 into a true flag
0022D3r 3  95 00                        sta 0,x
0022D5r 3  95 01                        sta 1,x
0022D7r 3  4C rr rr                     jmp z_search
0022DAr 3               
0022DAr 3               @start_search:
0022DAr 3                               ; Put an offset (starting at zero) on the stack.
0022DAr 3  20 rr rr                     jsr xt_zero
0022DDr 3               
0022DDr 3               @search_loop:
0022DDr 3                               ; We stop (not found) when u2 + offset > u1
0022DDr 3                               ; Calculate u2+offset into tmp1
0022DDr 3  18                           clc
0022DEr 3  B5 00                        lda 0,x
0022E0r 3  75 02                        adc 2,x
0022E2r 3  85 rr                        sta tmp1
0022E4r 3  B5 01                        lda 1,x
0022E6r 3  75 03                        adc 3,x
0022E8r 3               
0022E8r 3               
0022E8r 3                               ; Compare to u1. Start with the high byte
0022E8r 3  D5 07                        cmp 7,x
0022EAr 3  90 12                        bcc @init_comparison ; Obviously less
0022ECr 3  D0 06                        bne @not_found
0022EEr 3               
0022EEr 3                               ; The upper address byte matched - check the lower byte
0022EEr 3                               ; Load u1 first so we can use just a carry to check.
0022EEr 3  B5 06                        lda 6,x
0022F0r 3  C5 rr                        cmp tmp1
0022F2r 3  B0 0A                        bcs @init_comparison
0022F4r 3               
0022F4r 3               @not_found:
0022F4r 3                               ; The substring isn't in the main string.
0022F4r 3                               ; Return just the main string and a false flag.
0022F4r 3  E8                           inx             ; Remove offset
0022F5r 3  E8                           inx
0022F6r 3  E8                           inx             ; Remove u2
0022F7r 3  E8                           inx
0022F8r 3  74 00                        stz 0,x         ; Turn addr2 into a false flag
0022FAr 3  74 01                        stz 1,x
0022FCr 3  80 66                        bra z_search
0022FEr 3               
0022FEr 3               @init_comparison:
0022FEr 3                               ; Use tmp1 to hold address in string 1.
0022FEr 3                               ; Use tmp2 to hold address in string 2.
0022FEr 3                               ; Use tmp3 to hold the number of characters left to check.
0022FEr 3               
0022FEr 3                               ; Compute the starting address in string 1
0022FEr 3                               ; as addr1 + offset
0022FEr 3  18                           clc
0022FFr 3  B5 08                        lda 8,x
002301r 3  75 00                        adc 0,x
002303r 3  85 rr                        sta tmp1
002305r 3  B5 09                        lda 9,x
002307r 3  75 01                        adc 1,x
002309r 3  85 rr                        sta tmp1+1
00230Br 3               
00230Br 3                               ; The starting address in string 2 is just addr2.
00230Br 3  B5 04                        lda 4,x
00230Dr 3  85 rr                        sta tmp2
00230Fr 3  B5 05                        lda 5,x
002311r 3  85 rr                        sta tmp2+1
002313r 3               
002313r 3                               ; The number of characters to check is u2.
002313r 3  B5 02                        lda 2,x
002315r 3  85 rr                        sta tmp3
002317r 3  B5 03                        lda 3,x
002319r 3  85 rr                        sta tmp3+1
00231Br 3               
00231Br 3               @comparison_loop:
00231Br 3                               ; Check to see if the current characters match.
00231Br 3  B2 rr                        lda (tmp1)
00231Dr 3  D2 rr                        cmp (tmp2)
00231Fr 3  F0 05                        beq @letters_match
002321r 3               
002321r 3                               ; One of the letters didn't match.
002321r 3                               ; Increment the offset and try again.
002321r 3  20 rr rr                     jsr xt_one_plus
002324r 3  80 B7                        bra @search_loop
002326r 3               
002326r 3               @letters_match:
002326r 3                               ; The letters match.  Advance the pointers until the
002326r 3                               ; count reaches zero.
002326r 3  E6 rr                        inc tmp1
002328r 3  D0 02                        bne @1
00232Ar 3  E6 rr                        inc tmp1+1
00232Cr 3               @1:
00232Cr 3  E6 rr                        inc tmp2
00232Er 3  D0 02                        bne @2
002330r 3  E6 rr                        inc tmp2+1
002332r 3               @2:
002332r 3                               ; Decrement the count of remaining letters to check.
002332r 3  A5 rr                        lda tmp3
002334r 3  D0 02                        bne @3
002336r 3  C6 rr                        dec tmp3+1
002338r 3               @3:
002338r 3  C6 rr                        dec tmp3
00233Ar 3               
00233Ar 3                               ; Check if we've reached zero.
00233Ar 3  A5 rr                        lda tmp3
00233Cr 3  05 rr                        ora tmp3+1
00233Er 3  D0 DB                        bne @comparison_loop ; Check the next letter
002340r 3               
002340r 3                               ; We've run out of letters and they all match!
002340r 3                               ; Return (addr1+offset) (u1-offset) true
002340r 3                               ; Add offset to addr1.
002340r 3  18                           clc
002341r 3  B5 00                        lda 0,x
002343r 3  75 08                        adc 8,x
002345r 3  95 08                        sta 8,x
002347r 3  B5 01                        lda 1,x
002349r 3  75 09                        adc 9,x
00234Br 3  95 09                        sta 9,x
00234Dr 3               
00234Dr 3                               ; Subtract offset from u1.
00234Dr 3  38                           sec
00234Er 3  B5 06                        lda 6,x
002350r 3  F5 00                        sbc 0,x
002352r 3  95 06                        sta 6,x
002354r 3  B5 07                        lda 7,x
002356r 3  F5 01                        sbc 1,x
002358r 3  95 07                        sta 7,x
00235Ar 3               
00235Ar 3                               ; Replace addr2, u2, and offset with a true flag.
00235Ar 3  E8                           inx             ; drop offset
00235Br 3  E8                           inx
00235Cr 3  E8                           inx             ; drop u2
00235Dr 3  E8                           inx
00235Er 3  A9 FF                        lda #$FF
002360r 3  95 00                        sta 0,x         ; Turn addr2 into a true flag.
002362r 3  95 01                        sta 1,x
002364r 3               
002364r 3  60           z_search:       rts
002365r 3               
002365r 3               
002365r 3               
002365r 3               ; ## SEMICOLON ( -- ) "End compilation of new word"
002365r 3               ; ## ";"  auto  ANS core
002365r 3                       ; """https://forth-standard.org/standard/core/Semi
002365r 3                       ; End the compilation of a new word into the Dictionary.
002365r 3                       ;
002365r 3                       ; When we
002365r 3                       ; enter this, WORKWORD is pointing to the nt_ of this word in the
002365r 3                       ; Dictionary, DP to the previous word, and CP to the next free byte.
002365r 3                       ; A Forth definition would be (see "Starting Forth"):
002365r 3                       ; : POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE  Following the
002365r 3                       ; practice of Gforth, we warn here if a word has been redefined.
002365r 3                       ; """
002365r 3               
002365r 3               xt_semicolon:
002365r 3                               ; Check if this is a : word or a :NONAME word.
002365r 3  24 rr                        bit status
002367r 3  70 11                        bvs @colonword
002369r 3               
002369r 3                               ; This is a :NONAME word - just put an RTS on the end and
002369r 3                               ; the address (held in workword) on the stack.
002369r 3  A9 60                        lda #$60                ; opcode for RTS
00236Br 3  20 rr rr                     jsr cmpl_a
00236Er 3               
00236Er 3  CA                           dex
00236Fr 3  CA                           dex
002370r 3  A5 rr                        lda workword
002372r 3  95 00                        sta 0,x
002374r 3  A5 rr                        lda workword+1
002376r 3  95 01                        sta 1,x
002378r 3  80 45                        bra @semicolon_done
00237Ar 3               
00237Ar 3               @colonword:
00237Ar 3                               ; CP is the byte that will be the address we use in the
00237Ar 3                               ; header as the end-of-compile address (z_word). This is
00237Ar 3                               ; six bytes down from the header
00237Ar 3  A0 06                        ldy #6
00237Cr 3  A5 rr                        lda cp
00237Er 3  91 rr                        sta (workword),y
002380r 3  C8                           iny
002381r 3  A5 rr                        lda cp+1
002383r 3  91 rr                        sta (workword),y
002385r 3               
002385r 3                               ; Allocate one further byte and save the RTS instruction
002385r 3                               ; there
002385r 3  A9 60                        lda #$60                ; opcode for RTS
002387r 3  20 rr rr                     jsr cmpl_a
00238Ar 3               
00238Ar 3                               ; Before we formally add the word to the Dictionary, we
00238Ar 3                               ; check to see if it is already present, and if yes, we
00238Ar 3                               ; warn the user.
00238Ar 3               
00238Ar 3                               ; See if word already in Dictionary.
00238Ar 3                               ; (STATUS bit 7 will be high as CREATE already
00238Ar 3                               ;  checked for us.)
00238Ar 3  24 rr                        bit status
00238Cr 3  10 26                        bpl @new_word   ; Bit 7 is clear = new word
00238Er 3               
00238Er 3                               ; We start by putting the string of the
00238Er 3                               ; word we're defining on the stack
00238Er 3  CA                           dex
00238Fr 3  CA                           dex
002390r 3  CA                           dex
002391r 3  CA                           dex
002392r 3               
002392r 3                               ; WORKWORD points to the beginning of the head of our new
002392r 3                               ; word, where the first byte is the length of the string
002392r 3                               ; We can't use LATESTNT because we haven't added the new
002392r 3                               ; word to the Dictionary yet
002392r 3  B2 rr                        lda (workword)
002394r 3  95 00                        sta 0,x
002396r 3  74 01                        stz 1,x
002398r 3               
002398r 3                               ; Eight bytes below WORKWORD is the actual beginning of
002398r 3                               ; the string
002398r 3  A5 rr                        lda workword
00239Ar 3  18                           clc
00239Br 3  69 08                        adc #8
00239Dr 3  95 02                        sta 2,x
00239Fr 3  A5 rr                        lda workword+1
0023A1r 3  69 00                        adc #0                  ; only want carry
0023A3r 3  95 03                        sta 3,x
0023A5r 3               
0023A5r 3                               ; This word is already in the Dictionary, so we print a
0023A5r 3                               ; warning to the user.
0023A5r 3  A9 02                        lda #str_redefined       ; address of string "redefined"
0023A7r 3  20 rr rr                     jsr print_string_no_lf
0023AAr 3               
0023AAr 3                               ; Now we print the offending word.
0023AAr 3  20 rr rr                     jsr xt_type
0023ADr 3  20 rr rr                     jsr xt_space
0023B0r 3               
0023B0r 3                               ; Clear bit 7 of status (so future words will print message
0023B0r 3                               ; by defaut)
0023B0r 3  A9 80                        lda #%10000000
0023B2r 3  14 rr                        trb status
0023B4r 3               
0023B4r 3               @new_word:
0023B4r 3                               ; Let's get this over with. Save beginning of our word
0023B4r 3                               ; as new last word in the Dictionary
0023B4r 3  A5 rr                        lda workword
0023B6r 3  85 rr                        sta dp
0023B8r 3  A5 rr                        lda workword+1
0023BAr 3  85 rr                        sta dp+1
0023BCr 3  20 rr rr                     jsr dp_to_current       ; Save the updated DP to the
0023BFr 3                                                       ; CURRENT wordlist.
0023BFr 3               @semicolon_done:
0023BFr 3                               ; Word definition complete. Return compile flag to zero
0023BFr 3                               ; to return to interpret mode
0023BFr 3  64 rr                        stz state
0023C1r 3  64 rr                        stz state+1
0023C3r 3               
0023C3r 3  60           z_semicolon:    rts
0023C4r 3               
0023C4r 3               
0023C4r 3               
0023C4r 3               ; ## SIGN ( n -- ) "Add minus to pictured output"
0023C4r 3               ; ## "sign"  auto  ANS core
0023C4r 3                       ; """https://forth-standard.org/standard/core/SIGN
0023C4r 3                       ;
0023C4r 3                       ; Code based on
0023C4r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
0023C4r 3                       ; Original Forth code is   0< IF ASCII - HOLD THEN
0023C4r 3                       ; """
0023C4r 3               
0023C4r 3               xt_sign:
0023C4r 3  20 rr rr                     jsr underflow_1
0023C7r 3               
0023C7r 3  B5 01                        lda 1,x         ; check MSB of TOS
0023C9r 3  30 04                        bmi @minus
0023CBr 3               
0023CBr 3  E8                           inx
0023CCr 3  E8                           inx
0023CDr 3  80 09                        bra @done
0023CFr 3               @minus:
0023CFr 3  A9 2D                        lda #$2D        ; ASCII for "-"
0023D1r 3  95 00                        sta 0,x         ; overwrite TOS
0023D3r 3  74 01                        stz 1,x         ; paranoid
0023D5r 3               
0023D5r 3  20 rr rr                     jsr xt_hold
0023D8r 3               @done:
0023D8r 3  60           z_sign:         rts
0023D9r 3               
0023D9r 3               
0023D9r 3               
0023D9r 3               ; ## SLASH ( n1 n2 -- n ) "Divide NOS by TOS"
0023D9r 3               ; ## "/"  auto  ANS core
0023D9r 3                       ; """https://forth-standard.org/standard/core/Div
0023D9r 3                       ;
0023D9r 3                       ; Forth code is either  >R S>D R> FM/MOD SWAP DROP
0023D9r 3                       ; or >R S>D R> SM/REM SWAP DROP -- we use SM/REM in Tali Forth.
0023D9r 3                       ; This code is currently unoptimized. This code without the SLASH
0023D9r 3                       ; DROP at the end is /MOD, so we share the code as far as possible.
0023D9r 3                       ; """
0023D9r 3               
0023D9r 3               xt_slash:
0023D9r 3                               ; With all the multiplication going on, it would be hard to
0023D9r 3                               ; make sure that one of our temporary variables is not
0023D9r 3                               ; overwritten. We make sure that doesn't happen by taking the
0023D9r 3                               ; hit of pushing the flag to the 65c02's stack
0023D9r 3  A9 00                        lda #0
0023DBr 3  48                           pha
0023DCr 3  80 03                        bra _common
0023DEr 3               
0023DEr 3               xt_slash_mod:
0023DEr 3                               ; Note that /MOD accesses this code
0023DEr 3  A9 FF                        lda #$FF
0023E0r 3  48                           pha             ; falls through to _common
0023E1r 3               
0023E1r 3               _common:
0023E1r 3  20 rr rr                     jsr xt_to_r             ; >R
0023E4r 3  20 rr rr                     jsr xt_s_to_d           ; S>D
0023E7r 3  20 rr rr                     jsr xt_r_from           ; R>
0023EAr 3  20 rr rr                     jsr xt_sm_slash_rem     ; SM/REM
0023EDr 3               
0023EDr 3                               ; Get the flag back from the 65c02's stack. Zero is SLASH,
0023EDr 3                               ; $FF is SLASH MOD
0023EDr 3  68                           pla
0023EEr 3  D0 05                        bne @done
0023F0r 3               
0023F0r 3                               ; The following code is for SLASH only
0023F0r 3  20 rr rr                     jsr xt_swap
0023F3r 3  E8                           inx             ; DROP
0023F4r 3  E8                           inx
0023F5r 3               @done:
0023F5r 3               z_slash_mod:
0023F5r 3  60           z_slash:        rts
0023F6r 3               
0023F6r 3               
0023F6r 3               
0023F6r 3               ; ## SLASH_MOD ( n1 n2 -- n3 n4 ) "Divide NOS by TOS with a remainder"
0023F6r 3               ; ## "/mod"  auto  ANS core
0023F6r 3                       ; """https://forth-standard.org/standard/core/DivMOD
0023F6r 3                       ;
0023F6r 3                       ; This is a dummy entry, the actual code is shared with SLASH
0023F6r 3                       ; """
0023F6r 3               
0023F6r 3               
0023F6r 3               ; ## SLASH_STRING ( addr u n -- addr u ) "Shorten string by n"
0023F6r 3               ; ## "/string"  auto  ANS string
0023F6r 3                       ; """https://forth-standard.org/standard/string/DivSTRING
0023F6r 3                       ;
0023F6r 3                       ; Forth code is
0023F6r 3                       ; : /STRING ( ADDR U N -- ADDR U ) ROT OVER + ROT ROT - ;
0023F6r 3                       ; Put differently, we need to add TOS and 3OS, and subtract
0023F6r 3                       ; TOS from NOS, and then drop TOS
0023F6r 3                       ; """
0023F6r 3               
0023F6r 3               xt_slash_string:
0023F6r 3  20 rr rr                     jsr underflow_3
0023F9r 3               
0023F9r 3  18                           clc             ; 3OS+TOS
0023FAr 3  B5 00                        lda 0,x
0023FCr 3  75 04                        adc 4,x
0023FEr 3  95 04                        sta 4,x
002400r 3               
002400r 3  B5 01                        lda 1,x
002402r 3  75 05                        adc 5,x
002404r 3  95 05                        sta 5,x
002406r 3               
002406r 3  38                           sec             ; NOS-TOS
002407r 3  B5 02                        lda 2,x
002409r 3  F5 00                        sbc 0,x
00240Br 3  95 02                        sta 2,x
00240Dr 3               
00240Dr 3  B5 03                        lda 3,x
00240Fr 3  F5 01                        sbc 1,x
002411r 3  95 03                        sta 3,x
002413r 3               
002413r 3  E8                           inx
002414r 3  E8                           inx
002415r 3               
002415r 3  60           z_slash_string: rts
002416r 3               
002416r 3               
002416r 3               
002416r 3               ; ## SLITERAL ( addr u -- )( -- addr u ) "Compile a string for runtime"
002416r 3               ; ## "sliteral" auto  ANS string
002416r 3                       ; """https://forth-standard.org/standard/string/SLITERAL
002416r 3                       ; Add the runtime for an existing string.
002416r 3                       ; """
002416r 3               
002416r 3               xt_sliteral:
002416r 3  20 rr rr                     jsr underflow_2
002419r 3               
002419r 3                               ; We can't assume that ( addr u ) of the current string is in
002419r 3                               ; a stable area (eg. already in the dictionary.) Copy the
002419r 3                               ; string data into the dictionary using move.
002419r 3               
002419r 3                               ; Put a jmp over the string data with address to be filled
002419r 3                               ; in later.
002419r 3  A9 4C                        lda #$4C
00241Br 3  20 rr rr                     jsr cmpl_a
00241Er 3               
00241Er 3                               ; Address to be filled in later.
00241Er 3  20 rr rr                     jsr cmpl_a
002421r 3  20 rr rr                     jsr cmpl_a
002424r 3               
002424r 3                               ; Turn the data stack from ( addr u ) into
002424r 3                               ; ( here u addr here u ) so move can be called with
002424r 3                               ; the remaining items on the stack ready for processing.
002424r 3                               ; Reserve three extra words on the stack.
002424r 3  8A                           txa
002425r 3  38                           sec
002426r 3  E9 06                        sbc #6
002428r 3  AA                           tax
002429r 3               
002429r 3                               ; Move addr down from TOS-4 to TOS-2
002429r 3  B5 08                        lda 8,x
00242Br 3  95 04                        sta 4,x
00242Dr 3  B5 09                        lda 9,x
00242Fr 3  95 05                        sta 5,x
002431r 3               
002431r 3                               ; Copy u from TOS-3 to TOS
002431r 3  B5 06                        lda 6,x
002433r 3  95 00                        sta 0,x
002435r 3  B5 07                        lda 7,x
002437r 3  95 01                        sta 1,x
002439r 3               
002439r 3                               ; Put HERE into TOS-1 and TOS-4
002439r 3  A5 rr                        lda cp
00243Br 3  95 08                        sta 8,x
00243Dr 3  95 02                        sta 2,x
00243Fr 3  A5 rr                        lda cp+1
002441r 3  95 09                        sta 9,x
002443r 3  95 03                        sta 3,x
002445r 3               
002445r 3                               ; Copy the string into the dictionary.
002445r 3  20 rr rr                     jsr xt_move
002448r 3               
002448r 3                               ; Update cp.
002448r 3  18                           clc
002449r 3  A5 rr                        lda cp
00244Br 3  75 00                        adc 0,x
00244Dr 3  85 rr                        sta cp
00244Fr 3  A5 rr                        lda cp+1
002451r 3  75 01                        adc 1,x
002453r 3  85 rr                        sta cp+1
002455r 3               
002455r 3                               ; Update the address of the jump-over jmp instruction.
002455r 3                               ; First determine location of jmp instructions address.
002455r 3                               ; It should be 2 bytes before the start of the string.
002455r 3               
002455r 3                               ; Compute it into tmp1, which is no longer being used.
002455r 3  B5 02                        lda 2,x
002457r 3  38                           sec
002458r 3  E9 02                        sbc #2
00245Ar 3  85 rr                        sta tmp1
00245Cr 3  B5 03                        lda 3,x
00245Er 3  E9 00                        sbc #0          ; Propagate borrow
002460r 3  85 rr                        sta tmp1+1
002462r 3               
002462r 3                               ; Update the address of the jump to HERE.
002462r 3  A5 rr                        lda cp
002464r 3  92 rr                        sta (tmp1)
002466r 3  A0 01                        ldy #1
002468r 3  A5 rr                        lda cp+1
00246Ar 3  91 rr                        sta (tmp1),y
00246Cr 3               
00246Cr 3                               ; Stack is now ( addr2 u ) where addr2 is the new
00246Cr 3                               ; location in the dictionary.
00246Cr 3               
00246Cr 3               sliteral_const_str:
00246Cr 3                               ; Compile a subroutine jump to the runtime of SLITERAL that
00246Cr 3                               ; pushes the new ( addr u ) pair to the Data Stack.
00246Cr 3                               ; When we're done, the code will look like this:
00246Cr 3               
00246Cr 3                               ; xt -->    jmp a
00246Cr 3                               ;           <string data bytes>
00246Cr 3                               ;  a -->    jsr sliteral_runtime
00246Cr 3                               ;           <string address>
00246Cr 3                               ;           <string length>
00246Cr 3                               ; rts -->
00246Cr 3               
00246Cr 3                               ; This means we'll have to adjust the return address for two
00246Cr 3                               ; cells, not just one
00246Cr 3  A0 rr                        ldy #>sliteral_runtime
00246Er 3  A9 rr                        lda #<sliteral_runtime
002470r 3  20 rr rr                     jsr cmpl_subroutine
002473r 3               
002473r 3                               ; We want to have the address end up as NOS and the length
002473r 3                               ; as TOS, so we store the address first
002473r 3  B4 03                        ldy 3,x                ; address MSB
002475r 3  B5 02                        lda 2,x                ; address LSB
002477r 3  20 rr rr                     jsr cmpl_word
00247Ar 3               
00247Ar 3  B4 01                        ldy 1,x                ; length MSB
00247Cr 3  B5 00                        lda 0,x                ; length LSB
00247Er 3  20 rr rr                     jsr cmpl_word
002481r 3               
002481r 3                               ; clean up and leave
002481r 3  E8                           inx
002482r 3  E8                           inx
002483r 3  E8                           inx
002484r 3  E8                           inx
002485r 3               
002485r 3  60           z_sliteral:     rts
002486r 3               
002486r 3               
002486r 3               sliteral_runtime:
002486r 3               
002486r 3                       ; """Run time behaviour of SLITERAL: Push ( addr u ) of string to
002486r 3                       ; the Data Stack. We arrive here with the return address as the
002486r 3                       ; top of Return Stack, which points to the address of the string
002486r 3                       ; """
002486r 3  CA                           dex
002487r 3  CA                           dex
002488r 3  CA                           dex
002489r 3  CA                           dex
00248Ar 3               
00248Ar 3                               ; Get the address of the string address off the stack and
00248Ar 3                               ; increase by one because of the RTS mechanics
00248Ar 3  68                           pla
00248Br 3  85 rr                        sta tmp1        ; LSB of address
00248Dr 3  68                           pla
00248Er 3  85 rr                        sta tmp1+1      ; MSB of address
002490r 3               
002490r 3                               ; Walk through both and save them
002490r 3  A0 01                        ldy #1          ; adjust for JSR/RTS mechanics on 65c02
002492r 3  B1 rr                        lda (tmp1),y
002494r 3  95 02                        sta 2,x         ; LSB of address
002496r 3  C8                           iny
002497r 3               
002497r 3  B1 rr                        lda (tmp1),y
002499r 3  95 03                        sta 3,x         ; MSB of address
00249Br 3  C8                           iny
00249Cr 3               
00249Cr 3  B1 rr                        lda (tmp1),y
00249Er 3  95 00                        sta 0,x         ; LSB of length
0024A0r 3  C8                           iny
0024A1r 3               
0024A1r 3  B1 rr                        lda (tmp1),y
0024A3r 3  95 01                        sta 1,x         ; MSB of length
0024A5r 3               
0024A5r 3                               ; restore return address
0024A5r 3  18                           clc
0024A6r 3  A5 rr                        lda tmp1
0024A8r 3  69 04                        adc #4
0024AAr 3  A8                           tay             ; LSB
0024ABr 3  A5 rr                        lda tmp1+1
0024ADr 3  69 00                        adc #0          ; we only need carry
0024AFr 3  48                           pha             ; MSB
0024B0r 3  5A                           phy
0024B1r 3               
0024B1r 3  60                           rts
0024B2r 3               
0024B2r 3               
0024B2r 3               
0024B2r 3               ; ## SM_SLASH_REM ( d n1 -- n2 n3 ) "Symmetic signed division"
0024B2r 3               ; ## "sm/rem"  auto  ANS core
0024B2r 3                       ; """https://forth-standard.org/standard/core/SMDivREM
0024B2r 3                       ; Symmetic signed division. Compare FM/MOD. Based on F-PC 3.6
0024B2r 3                       ; by Ulrich Hoffmann. See http://www.xlerb.de/uho/ansi.seq
0024B2r 3                       ;
0024B2r 3                       ; Forth:
0024B2r 3                       ; OVER >R 2DUP XOR 0< >R ABS >R DABS R> UM/MOD R> ?NEGATE SWAP
0024B2r 3                       ; R> ?NEGATE SWAP
0024B2r 3                       ; """
0024B2r 3               
0024B2r 3               xt_sm_slash_rem:
0024B2r 3  20 rr rr                     jsr underflow_3 ; contains double number
0024B5r 3               
0024B5r 3                               ; push MSB of high cell of d to Data Stack so we can check
0024B5r 3                               ; its sign later
0024B5r 3  B5 03                        lda 3,x
0024B7r 3  48                           pha
0024B8r 3               
0024B8r 3                               ; XOR the MSB of the high cell of d and n1 so we figure out
0024B8r 3                               ; its sign later as well
0024B8r 3  B5 01                        lda 1,x
0024BAr 3  55 03                        eor 3,x
0024BCr 3  48                           pha
0024BDr 3               
0024BDr 3                               ; Prepare division by getting absolute of n1 and d
0024BDr 3  20 rr rr                     jsr xt_abs
0024C0r 3  E8                           inx             ; pretend we pushed n1 to R
0024C1r 3  E8                           inx
0024C2r 3               
0024C2r 3  20 rr rr                     jsr xt_dabs
0024C5r 3  CA                           dex
0024C6r 3  CA                           dex
0024C7r 3               
0024C7r 3  20 rr rr                     jsr xt_um_slash_mod     ; UM/MOD
0024CAr 3               
0024CAr 3                               ; if the XOR compiled above is negative, negate the
0024CAr 3                               ; quotient (n3)
0024CAr 3  68                           pla
0024CBr 3  10 03                        bpl @1
0024CDr 3  20 rr rr                     jsr xt_negate
0024D0r 3               @1:
0024D0r 3                               ; if d was negative, negate the remainder (n2)
0024D0r 3  68                           pla
0024D1r 3  10 07                        bpl @done
0024D3r 3               
0024D3r 3  E8                           inx             ; pretend we pushed quotient to R
0024D4r 3  E8                           inx
0024D5r 3  20 rr rr                     jsr xt_negate
0024D8r 3  CA                           dex
0024D9r 3  CA                           dex
0024DAr 3               
0024DAr 3               @done:
0024DAr 3  60           z_sm_slash_rem: rts
0024DBr 3               
0024DBr 3               
0024DBr 3               
0024DBr 3               ; ## SOURCE ( -- addr u ) "Return location and size of input buffer""
0024DBr 3               ; ## "source"  auto  ANS core
0024DBr 3                       ; """https://forth-standard.org/standard/core/SOURCE"""
0024DBr 3               xt_source:
0024DBr 3                               ; add address
0024DBr 3  CA                           dex
0024DCr 3  CA                           dex
0024DDr 3  A5 rr                        lda cib
0024DFr 3  95 00                        sta 0,x
0024E1r 3  A5 rr                        lda cib+1
0024E3r 3  95 01                        sta 1,x
0024E5r 3               
0024E5r 3                               ; add size
0024E5r 3  CA                           dex
0024E6r 3  CA                           dex
0024E7r 3  A5 rr                        lda ciblen
0024E9r 3  95 00                        sta 0,x
0024EBr 3  A5 rr                        lda ciblen+1
0024EDr 3  95 01                        sta 1,x
0024EFr 3               
0024EFr 3  60           z_source:       rts
0024F0r 3               
0024F0r 3               
0024F0r 3               ; ## SOURCE_ID ( -- n ) "Return source identifier"
0024F0r 3               ; ## "source-id"  tested  ANS core ext
0024F0r 3                       ; """https://forth-standard.org/standard/core/SOURCE-ID Identify the
0024F0r 3                       ; input source unless it is a block (s. Conklin & Rather p. 156). This
0024F0r 3                       ; will give the input source: 0 is keyboard, -1 ($FFFF) is character
0024F0r 3                       ; string, and a text file gives the fileid.
0024F0r 3                       ; """
0024F0r 3               xt_source_id:
0024F0r 3  CA                           dex
0024F1r 3  CA                           dex
0024F2r 3               
0024F2r 3  A5 rr                        lda insrc
0024F4r 3  95 00                        sta 0,x
0024F6r 3  A5 rr                        lda insrc+1
0024F8r 3  95 01                        sta 1,x
0024FAr 3               
0024FAr 3  60           z_source_id:    rts
0024FBr 3               
0024FBr 3               
0024FBr 3               ; ## SPACE ( -- ) "Print a single space"
0024FBr 3               ; ## "space"  auto  ANS core
0024FBr 3                       ; """https://forth-standard.org/standard/core/SPACE"""
0024FBr 3               xt_space:
0024FBr 3  A9 20                        lda #AscSP
0024FDr 3  20 rr rr                     jsr emit_a
002500r 3               
002500r 3  60           z_space:        rts
002501r 3               
002501r 3               
002501r 3               ; ## SPACES ( u -- ) "Print a number of spaces"
002501r 3               ; ## "spaces"  auto  ANS core
002501r 3                       ; """https://forth-standard.org/standard/core/SPACES"""
002501r 3               
002501r 3               xt_spaces:
002501r 3  20 rr rr                     jsr underflow_1
002504r 3               
002504r 3                               ; catch any zero in TOS fast
002504r 3  B5 00                        lda 0,x
002506r 3  15 01                        ora 1,x
002508r 3  F0 2A                        beq @done
00250Ar 3               
00250Ar 3                               ; Usually we're only going to print far less than 256 spaces,
00250Ar 3                               ; so we create a quick loop for that. Short loop could be realized
00250Ar 3                               ; as a separate subroutine, but unless we're really pressed for
00250Ar 3                               ; memory at some point, this is faster
00250Ar 3  B4 01                        ldy 1,x
00250Cr 3  D0 0C                        bne @lots_of_spaces
00250Er 3               
00250Er 3  B4 00                        ldy 0,x
002510r 3               @quick_loop:
002510r 3                               ; we reach here knowing that there must be a number that is not
002510r 3                               ; zero in the TOS
002510r 3  A9 20                        lda #AscSP
002512r 3  20 rr rr                     jsr emit_a
002515r 3  88                           dey
002516r 3  F0 1C                        beq @done
002518r 3  80 F6                        bra @quick_loop
00251Ar 3               
00251Ar 3               @lots_of_spaces:
00251Ar 3                               ; We go through the first loop once to get rid of the lower
00251Ar 3                               ; counter byte. This could be zero
00251Ar 3  B4 00                        ldy 0,x
00251Cr 3               
00251Cr 3               @first_slow_loop:
00251Cr 3  F0 08                        beq @slow_outer_loop
00251Er 3  A9 20                        lda #AscSP
002520r 3  20 rr rr                     jsr emit_a
002523r 3  88                           dey
002524r 3  80 F6                        bra @first_slow_loop
002526r 3               
002526r 3               @slow_outer_loop:
002526r 3                               ; we arrive here knowing that the MSB of TOS cannot be a zero
002526r 3  A0 00                        ldy #00
002528r 3               
002528r 3               @slow_inner_loop:
002528r 3  A9 20                        lda #AscSP
00252Ar 3  20 rr rr                     jsr emit_a
00252Dr 3  88                           dey
00252Er 3  D0 F8                        bne @slow_inner_loop
002530r 3               
002530r 3  D6 01                        dec 1,x
002532r 3  D0 F2                        bne @slow_outer_loop
002534r 3               
002534r 3               @done:
002534r 3  E8                           inx             ; drop
002535r 3  E8                           inx
002536r 3               
002536r 3  60           z_spaces:       rts
002537r 3               
002537r 3               
002537r 3               
002537r 3               ; ## STAR ( n n -- n ) "16*16 --> 16 "
002537r 3               ; ## "*"  auto  ANS core
002537r 3                       ; """https://forth-standard.org/standard/core/Times
002537r 3                       ; Multiply two signed 16 bit numbers, returning a 16 bit result.
002537r 3                       ;
002537r 3                       ; This is nothing  more than UM* DROP
002537r 3                       ; """
002537r 3               
002537r 3               xt_star:
002537r 3  20 rr rr                     jsr underflow_2
00253Ar 3               
00253Ar 3  20 rr rr                     jsr xt_um_star
00253Dr 3  E8                           inx
00253Er 3  E8                           inx
00253Fr 3               
00253Fr 3  60           z_star:         rts
002540r 3               
002540r 3               
002540r 3               
002540r 3               ; ## STAR_SLASH  ( n1 n2 n3 -- n4 ) "n1 * n2 / n3 -->  n"
002540r 3               ; ## "*/"  auto  ANS core
002540r 3                       ; """https://forth-standard.org/standard/core/TimesDiv
002540r 3                       ; Multiply n1 by n2 and divide by n3, returning the result
002540r 3                       ; without a remainder. This is */MOD without the mod.
002540r 3                       ;
002540r 3                       ; This word
002540r 3                       ; can be defined in Forth as : */  */MOD SWAP DROP ; which is
002540r 3                       ; pretty much what we do here
002540r 3                       ; """
002540r 3               xt_star_slash:
002540r 3                               ; We let */MOD check for underflow
002540r 3  20 rr rr                     jsr xt_star_slash_mod
002543r 3  20 rr rr                     jsr xt_swap
002546r 3  E8                           inx
002547r 3  E8                           inx
002548r 3               z_star_slash:
002548r 3  60                           rts
002549r 3               
002549r 3               
002549r 3               ; ## STAR_SLASH_MOD  ( n1 n2 n3 -- n4 n5 ) "n1 * n2 / n3 --> n-mod n"
002549r 3               ; ## "*/mod"  auto  ANS core
002549r 3                       ; """https://forth-standard.org/standard/core/TimesDivMOD
002549r 3                       ; Multiply n1 by n2 producing the intermediate double-cell result d.
002549r 3                       ; Divide d by n3 producing the single-cell remainder n4 and the
002549r 3                       ; single-cell quotient n5.
002549r 3                       ;
002549r 3                       ; In Forth, this is
002549r 3                       ; : */MOD  >R M* >R SM/REM ;  Note that */ accesses this routine.
002549r 3                       ; """
002549r 3               xt_star_slash_mod:
002549r 3  20 rr rr                     jsr underflow_3
00254Cr 3               
00254Cr 3  20 rr rr                     jsr xt_to_r
00254Fr 3  20 rr rr                     jsr xt_m_star
002552r 3  20 rr rr                     jsr xt_r_from
002555r 3  20 rr rr                     jsr xt_sm_slash_rem
002558r 3               
002558r 3               z_star_slash_mod:
002558r 3  60                           rts
002559r 3               
002559r 3               
002559r 3               ; ## STATE ( -- addr ) "Return the address of compilation state flag"
002559r 3               ; ## "state"  auto  ANS core
002559r 3                       ; """https://forth-standard.org/standard/core/STATE
002559r 3                       ; STATE is true when in compilation state, false otherwise. Note
002559r 3                       ; we do not return the state itself, but only the address where
002559r 3                       ; it lives. The state should not be changed directly by the user; see
002559r 3                       ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
002559r 3                       ; """
002559r 3               xt_state:
002559r 3  CA                           dex
00255Ar 3  CA                           dex
00255Br 3  A9 rr                        lda #<state
00255Dr 3  95 00                        sta 0,x
00255Fr 3  A9 rr                        lda #>state
002561r 3  95 01                        sta 1,x
002563r 3               
002563r 3  60           z_state:        rts
002564r 3               
002564r 3               
002564r 3               ; ## STORE ( n addr -- ) "Store TOS in memory"
002564r 3               ; ## "!"  auto  ANS core
002564r 3                       ; """https://forth-standard.org/standard/core/Store"""
002564r 3               xt_store:
002564r 3  20 rr rr                     jsr underflow_2
002567r 3               
002567r 3  B5 02                        lda 2,x         ; LSB
002569r 3  81 00                        sta (0,x)
00256Br 3               
00256Br 3  F6 00                        inc 0,x
00256Dr 3  D0 02                        bne @1
00256Fr 3  F6 01                        inc 1,x
002571r 3               @1:
002571r 3  B5 03                        lda 3,x         ; MSB
002573r 3  81 00                        sta (0,x)
002575r 3               
002575r 3  E8                           inx             ; 2DROP
002576r 3  E8                           inx
002577r 3  E8                           inx
002578r 3  E8                           inx
002579r 3               
002579r 3  60           z_store:        rts
00257Ar 3               
00257Ar 3               
00257Ar 3               ; ## STRIP_UNDERFLOW ( -- addr ) "Return address where underflow status is kept"
00257Ar 3               ; ## "strip-underflow"  tested  Tali Forth
00257Ar 3                       ; """`STRIP-UNDERFLOW` is a flag variable that determines if underflow
00257Ar 3                       ; checking should be removed during the compilation of new words.
00257Ar 3                       ; Default is false.
00257Ar 3                       ; """
00257Ar 3               xt_strip_underflow:
00257Ar 3  CA                           dex
00257Br 3  CA                           dex
00257Cr 3               
00257Cr 3  A9 rr                        lda #<uf_strip
00257Er 3  95 00                        sta 0,x
002580r 3  A9 rr                        lda #>uf_strip
002582r 3  95 01                        sta 1,x
002584r 3               
002584r 3               z_strip_underflow:
002584r 3  60                           rts
002585r 3               
002585r 3               
002585r 3               ; ## SWAP ( b a -- a b ) "Exchange TOS and NOS"
002585r 3               ; ## "swap"  auto  ANS core
002585r 3                       ; """https://forth-standard.org/standard/core/SWAP"""
002585r 3               xt_swap:
002585r 3  20 rr rr                     jsr underflow_2
002588r 3               
002588r 3  B5 00                        lda 0,x         ; LSB
00258Ar 3  B4 02                        ldy 2,x
00258Cr 3  95 02                        sta 2,x
00258Er 3  94 00                        sty 0,x
002590r 3               
002590r 3  B5 01                        lda 1,x         ; MSB
002592r 3  B4 03                        ldy 3,x
002594r 3  95 03                        sta 3,x
002596r 3  94 01                        sty 1,x
002598r 3               
002598r 3  60           z_swap:         rts
002599r 3               
002599r 3               
002599r 3               ; ## THEN (C: orig -- ) ( -- ) "Conditional flow control"
002599r 3               ; ## "then"  auto  ANS core
002599r 3                       ; """http://forth-standard.org/standard/core/THEN"""
002599r 3               xt_then:
002599r 3                               ; Get the address to jump to.
002599r 3  20 rr rr                     jsr xt_here
00259Cr 3               
00259Cr 3                               ; Stuff HERE in for the branch address back
00259Cr 3                               ; at the IF or ELSE (origination address is on stack).
00259Cr 3  20 rr rr                     jsr xt_swap
00259Fr 3  20 rr rr                     jsr xt_store
0025A2r 3               
0025A2r 3  60           z_then:         rts
0025A3r 3               
0025A3r 3               
0025A3r 3               ; ## THRU ( scr# scr# -- ) "Load screens in the given range"
0025A3r 3               ; ## "thru"  tested  ANS block ext
0025A3r 3                       ; """https://forth-standard.org/standard/block/THRU"""
0025A3r 3               
0025A3r 3               xt_thru:
0025A3r 3  20 rr rr                     jsr underflow_2
0025A6r 3               
0025A6r 3                               ; We need to loop here, and can't use the data stack
0025A6r 3                               ; because the LOADed screens might use it.  We'll
0025A6r 3                               ; need to use the same trick that DO loops use, holding
0025A6r 3                               ; the limit and current index on the return stack.
0025A6r 3               
0025A6r 3                               ; Put the ending screen number on the return stack
0025A6r 3  B5 01                        lda 1,x
0025A8r 3  48                           pha
0025A9r 3  B5 00                        lda 0,x
0025ABr 3  48                           pha
0025ACr 3  E8                           inx
0025ADr 3  E8                           inx
0025AEr 3               @thru_loop:
0025AEr 3                               ; Put the starting screen number on the stack,
0025AEr 3                               ; but keep a copy
0025AEr 3  B5 01                        lda 1,x
0025B0r 3  48                           pha
0025B1r 3  B5 00                        lda 0,x
0025B3r 3  48                           pha
0025B4r 3               
0025B4r 3                               ; Load this screen.
0025B4r 3  20 rr rr                     jsr xt_load
0025B7r 3               
0025B7r 3                               ; Get the number and limit back off the stack.  Rather than
0025B7r 3                               ; waste time making room on the stack, just use tmp1 and tmp2.
0025B7r 3               
0025B7r 3                               ; Get the screen we just loaded.
0025B7r 3  68                           pla
0025B8r 3  85 rr                        sta tmp1
0025BAr 3  68                           pla
0025BBr 3  85 rr                        sta tmp1+1
0025BDr 3               
0025BDr 3                               ; Get the ending screen.
0025BDr 3  68                           pla
0025BEr 3  85 rr                        sta tmp2
0025C0r 3  68                           pla
0025C1r 3  85 rr                        sta tmp2+1
0025C3r 3               
0025C3r 3                               ; See if we just loaded the last screen.
0025C3r 3                               ; A already has the MSB of the last screen in it.
0025C3r 3  C5 rr                        cmp tmp1+1
0025C5r 3  D0 08                        bne @next_screen
0025C7r 3  A5 rr                        lda tmp2        ; Compare the LSB
0025C9r 3  C5 rr                        cmp tmp1
0025CBr 3  D0 02                        bne @next_screen
0025CDr 3  80 18                        bra @done       ; We just did the last screen.
0025CFr 3               
0025CFr 3               @next_screen:
0025CFr 3                               ; Put the ending screen back on the data stack.
0025CFr 3  A5 rr                        lda tmp2+1
0025D1r 3  48                           pha
0025D2r 3  A5 rr                        lda tmp2
0025D4r 3  48                           pha
0025D5r 3               
0025D5r 3                               ; Increment the current screen.
0025D5r 3  E6 rr                        inc tmp1
0025D7r 3  D0 02                        bne @1
0025D9r 3  E6 rr                        inc tmp1+1
0025DBr 3               @1:
0025DBr 3                               ; Put the current screen on the stack to prepare for
0025DBr 3                               ; the next loop.
0025DBr 3  CA                           dex
0025DCr 3  CA                           dex
0025DDr 3  A5 rr                        lda tmp1
0025DFr 3  95 00                        sta 0,x
0025E1r 3  A5 rr                        lda tmp1+1
0025E3r 3  95 01                        sta 1,x
0025E5r 3  80 C7                        bra @thru_loop
0025E7r 3               @done:
0025E7r 3  60           z_thru:         rts
0025E8r 3               
0025E8r 3               
0025E8r 3               
0025E8r 3               ; ## TICK ( "name" -- xt ) "Return a word's execution token (xt)"
0025E8r 3               ; ## "'"  auto  ANS core
0025E8r 3                       ; """https://forth-standard.org/standard/core/Tick"""
0025E8r 3               
0025E8r 3               xt_tick:
0025E8r 3  20 rr rr                     jsr xt_parse_name       ; ( -- addr u )
0025EBr 3               
0025EBr 3                               ; if we got a zero, there was a problem getting the
0025EBr 3                               ; name of the word
0025EBr 3  B5 00                        lda 0,x
0025EDr 3  15 01                        ora 1,x
0025EFr 3  D0 05                        bne @1
0025F1r 3               
0025F1r 3  A9 05                        lda #err_noname
0025F3r 3  4C rr rr                     jmp error
0025F6r 3               @1:
0025F6r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt )
0025F9r 3               
0025F9r 3                               ; If we didn't find the word in the Dictionary, abort
0025F9r 3  B5 00                        lda 0,x
0025FBr 3  15 01                        ora 1,x
0025FDr 3  D0 05                        bne @2
0025FFr 3               
0025FFr 3  A9 08                        lda #err_syntax
002601r 3  4C rr rr                     jmp error
002604r 3               @2:
002604r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt -- xt )
002607r 3               
002607r 3  60           z_tick:         rts
002608r 3               
002608r 3               
002608r 3               
002608r 3               ; ## TO ( n "name" -- ) or ( "name") "Change a value"
002608r 3               ; ## "to"  auto  ANS core ext
002608r 3                       ; """https://forth-standard.org/standard/core/TO
002608r 3                       ; Gives a new value to a, uh, VALUE.
002608r 3                       ;
002608r 3                       ; One possible Forth
002608r 3                       ; implementation is  ' >BODY !  but given the problems we have
002608r 3                       ; with >BODY on STC Forths, we do this the hard way. Since
002608r 3                       ; Tali Forth uses the same code for CONSTANTs and VALUEs, you
002608r 3                       ; could use this to redefine a CONSTANT, but that is a no-no.
002608r 3                       ;
002608r 3                       ; Note that the standard has different behaviors for TO depending
002608r 3                       ; on the state (https://forth-standard.org/standard/core/TO).
002608r 3                       ; This makes TO state-dependent (which is bad) and also rather
002608r 3                       ; complex (see the Gforth implementation for comparison). This
002608r 3                       ; word may not be natively compiled and must be immediate. Frankly,
002608r 3                       ; it would have made more sense to have two words for this.
002608r 3                       ; """
002608r 3               
002608r 3               xt_to:
002608r 3                               ; One way or the other, we need the xt of the word after this
002608r 3                               ; one. At this point, we don't know if we are interpreted or
002608r 3                               ; compile, so we don't know if there is a value n on the stack,
002608r 3                               ; so we can't do an underflow check yet
002608r 3  20 rr rr                     jsr xt_tick             ; ( [n] xt )
00260Br 3               
00260Br 3                               ; The PFA (DFA in this case) is three bytes down,
00260Br 3                               ; after the jump to DOCONST
00260Br 3  B5 00                        lda 0,x                 ; LSB
00260Dr 3  18                           clc
00260Er 3  69 03                        adc #3
002610r 3  85 rr                        sta tmp1
002612r 3  B5 01                        lda 1,x                 ; MSB
002614r 3  69 00                        adc #0                  ; we just want the carry
002616r 3  85 rr                        sta tmp1+1
002618r 3               
002618r 3  E8                           inx
002619r 3  E8                           inx                     ; ( [n] )
00261Ar 3               
00261Ar 3                               ; Now it gets ugly. See which state we are in
00261Ar 3  A5 rr                        lda state
00261Cr 3  05 rr                        ora state+1
00261Er 3  F0 34                        beq @interpret
002620r 3               
002620r 3                               ; Well, we're compiling. We want to end up with simple
002620r 3                               ; code that just takes the number that is TOS and saves
002620r 3                               ; it in the address of the xt we were just given. So we
002620r 3                               ; want to compile this routine:
002620r 3                               ;
002620r 3                               ;       lda 0,x                 - B5 00
002620r 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
002620r 3                               ;       lda 1,x                 - B5 01
002620r 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
002620r 3                               ;       inx                     - E8
002620r 3                               ;       inx                     - E8
002620r 3                               ;
002620r 3                               ; which at least is nice and short. Other than that, we pretty
002620r 3                               ; much have to do this the hard and long way, because with the
002620r 3                               ; LSBs and MSBs, we can't really put the numbers in a data
002620r 3                               ; range and store them with a loop. Sigh.
002620r 3               
002620r 3  A0 00                        ldy #$00                ; Code for LDA 0,X
002622r 3  A9 B5                        lda #$B5
002624r 3  20 rr rr                     jsr cmpl_word
002627r 3               
002627r 3  A9 8D                        lda #$8D                ; Code for STA abs
002629r 3  20 rr rr                     jsr cmpl_a
00262Cr 3               
00262Cr 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
00262Er 3  A5 rr                        lda tmp1
002630r 3  20 rr rr                     jsr cmpl_word
002633r 3               
002633r 3  A0 01                        ldy #$01                ; Code for LDA 1,X
002635r 3  A9 B5                        lda #$B5
002637r 3  20 rr rr                     jsr cmpl_word
00263Ar 3               
00263Ar 3  A9 8D                        lda #$8D                ; Code for STA abs
00263Cr 3  20 rr rr                     jsr cmpl_a
00263Fr 3               
00263Fr 3  E6 rr                        inc tmp1                ; Calculate MSB
002641r 3  D0 02                        bne @1
002643r 3  E6 rr                        inc tmp1+1
002645r 3               @1:
002645r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
002647r 3  A5 rr                        lda tmp1
002649r 3  20 rr rr                     jsr cmpl_word
00264Cr 3               
00264Cr 3  A0 E8                        ldy #$E8                ; Code for INX
00264Er 3  98                           tya
00264Fr 3  20 rr rr                     jsr cmpl_word
002652r 3               
002652r 3  80 0F                        bra @done
002654r 3               
002654r 3               @interpret:
002654r 3                               ; We're interpreting, so we arrive here with n
002654r 3                               ; on the stack. This is an annoying place to put
002654r 3                               ; the underflow check because we can't
002654r 3                               ; automatically strip it out
002654r 3  20 rr rr                     jsr underflow_1
002657r 3               
002657r 3                               ; We skip over the jump to DOCONST and store the number
002657r 3                               ; in the Program Field Area (PDF, in this case more a
002657r 3                               ; Data Field Area
002657r 3  B5 00                        lda 0,x
002659r 3  92 rr                        sta (tmp1)              ; LSB
00265Br 3               
00265Br 3  A0 01                        ldy #1
00265Dr 3  B5 01                        lda 1,x                 ; MSB
00265Fr 3  91 rr                        sta (tmp1),y            ; fall through to common
002661r 3               
002661r 3  E8                           inx                     ; DROP
002662r 3  E8                           inx
002663r 3               @done:
002663r 3  60           z_to:           rts
002664r 3               
002664r 3               
002664r 3               
002664r 3               ; ## TO_BODY ( xt -- addr ) "Return a word's Code Field Area (CFA)"
002664r 3               ; ## ">body"  auto  ANS core
002664r 3                       ; """https://forth-standard.org/standard/core/toBODY
002664r 3                       ; Given a word's execution token (xt), return the address of the
002664r 3                       ; start of that word's parameter field (PFA). This is defined as the
002664r 3                       ; address that HERE would return right after CREATE.
002664r 3                       ;
002664r 3                       ; This is a
002664r 3                       ; difficult word for STC Forths, because most words don't actually
002664r 3                       ; have a Code Field Area (CFA) to skip. We solve this by having CREATE
002664r 3                       ; add a flag, "has CFA" (HC), in the header so >BODY know to skip
002664r 3                       ; the subroutine jumps to DOVAR, DOCONST, or DODOES
002664r 3                       ; """
002664r 3               
002664r 3               xt_to_body:
002664r 3  20 rr rr                     jsr underflow_1
002667r 3               
002667r 3                               ; Ideally, xt already points to the CFA. We just need to check
002667r 3                               ; the HC flag for special cases
002667r 3  20 rr rr                     jsr xt_dup              ; ( xt xt )
00266Ar 3  20 rr rr                     jsr xt_int_to_name      ; ( xt nt )
00266Dr 3               
00266Dr 3                               ; The status byte is nt+1
00266Dr 3  F6 00                        inc 0,x
00266Fr 3  D0 02                        bne @1
002671r 3  F6 01                        inc 1,x
002673r 3               @1:
002673r 3  A1 00                        lda (0,x)               ; get status byte
002675r 3  29 20                        and #HC
002677r 3  F0 0D                        beq @no_cfa
002679r 3               
002679r 3                               ; We've got a DOVAR, DOCONST, DODEFER, DODOES or whatever,
002679r 3                               ; so we add three to xt, which is NOS
002679r 3  18                           clc
00267Ar 3  B5 02                        lda 2,x         ; LSB
00267Cr 3  69 03                        adc #3
00267Er 3  95 02                        sta 2,x
002680r 3  B5 03                        lda 3,x         ; MSB
002682r 3  69 00                        adc #0          ; we conly care about the carry
002684r 3  95 03                        sta 3,x         ; Fall through to @no_cfa
002686r 3               @no_cfa:
002686r 3  E8                           inx             ; get rid of the nt
002687r 3  E8                           inx
002688r 3               @done:
002688r 3  60           z_to_body:      rts
002689r 3               
002689r 3               
002689r 3               
002689r 3               ; ## TO_IN ( -- addr ) "Return address of the input pointer"
002689r 3               ; ## ">in"  auto  ANS core
002689r 3               xt_to_in:
002689r 3  CA                           dex
00268Ar 3  CA                           dex
00268Br 3               
00268Br 3  A9 rr                        lda #<toin
00268Dr 3  95 00                        sta 0,x
00268Fr 3  A9 rr                        lda #>toin      ; paranoid, should be zero
002691r 3  95 01                        sta 1,x
002693r 3               
002693r 3  60           z_to_in:        rts
002694r 3               
002694r 3               
002694r 3               ; ## TO_NUMBER ( ud addr u -- ud addr u ) "Convert a number"
002694r 3               ; ## ">number"  auto  ANS core
002694r 3                       ; """https://forth-standard.org/standard/core/toNUMBER
002694r 3                       ; Convert a string to a double number. Logic here is based on the
002694r 3                       ; routine by Phil Burk of the same name in pForth, see
002694r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
002694r 3                       ; for the original Forth code. We arrive here from NUMBER which has
002694r 3                       ; made sure that we don't have to deal with a sign and we don't have
002694r 3                       ; to deal with a dot as a last character that signalizes double -
002694r 3                       ; this should be a pure number string.
002694r 3                       ;
002694r 3                       ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we
002694r 3                       ; cannot access any of those.
002694r 3                       ;
002694r 3                       ; For the math routine, we move the inputs to the scratchpad to
002694r 3                       ; avoid having to fool around with the Data Stack.
002694r 3                       ;
002694r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
002694r 3                       ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
002694r 3                       ;     |           |           |           |           |
002694r 3                       ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
002694r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
002694r 3                       ;
002694r 3                       ; The math routine works by converting one character to its
002694r 3                       ; numerical value (N) via DIGIT? and storing it in S+4 for
002694r 3                       ; the moment. We then multiply the UD-HI value with the radix
002694r 3                       ; (from BASE) using UM*, which returns a double-cell result. We
002694r 3                       ; discard the high cell of that result (UD-HI-HI) and store the
002694r 3                       ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
002694r 3                       ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
002694r 3                       ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
002694r 3                       ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
002694r 3                       ; storing the result back in S and S+2, before we start another
002694r 3                       ; round with it as the new UD-LO and UD-HI.
002694r 3                       ; """
002694r 3               
002694r 3               
002694r 3               xt_to_number:
002694r 3  20 rr rr                     jsr underflow_4
002697r 3               
002697r 3                               ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
002697r 3                               ; After this step, the original ud-lo and ud-hi will still be on
002697r 3                               ; the Data Stack, but will be ignored and later overwritten
002697r 3                               ; If >NUMBER is called by NUMBER, these should be all zeros
002697r 3  B5 06                        lda 6,x         ; ud-lo LSB
002699r 3  85 rr                        sta scratch
00269Br 3  B5 07                        lda 7,x         ; ud-lo MSB
00269Dr 3  85 rr                        sta scratch+1
00269Fr 3               
00269Fr 3  B5 04                        lda 4,x         ; ud-hi LSB
0026A1r 3  85 rr                        sta scratch+2
0026A3r 3  B5 05                        lda 5,x         ; ud-hi MSB
0026A5r 3  85 rr                        sta scratch+3
0026A7r 3               
0026A7r 3                               ; Push down one on the Data Stack to use TOS for character
0026A7r 3                               ; conversion ( ud-lo ud-hi addr u x )
0026A7r 3  CA                           dex
0026A8r 3  CA                           dex
0026A9r 3               
0026A9r 3               @loop:
0026A9r 3                               ; Get one character based on address
0026A9r 3  A1 04                        lda (4,x)
0026ABr 3  95 00                        sta 0,x                 ; ( ud-lo ud-hi addr u char )
0026ADr 3  74 01                        stz 1,x                 ; paranoid
0026AFr 3               
0026AFr 3  20 rr rr                     jsr xt_digit_question   ; ( char -- n -1 | char 0 )
0026B2r 3               
0026B2r 3                               ; This gives us ( ud-lo ud-hi addr u char f | n f ), so we
0026B2r 3                               ; check the flag. If it is zero, we return what we have and
0026B2r 3                               ; let the caller (usually NUMBER) complain
0026B2r 3  B5 00                        lda 0,x
0026B4r 3  D0 04                        bne @digit_ok
0026B6r 3               
0026B6r 3  E8                           inx
0026B7r 3  E8                           inx
0026B8r 3  80 67                        bra @done       ; ( ud-lo ud-hi addr u char )
0026BAr 3               
0026BAr 3               @digit_ok:
0026BAr 3                               ; Conversion was successful. We arrive here with
0026BAr 3                               ; ( ud-lo ud-hi addr u n -1 ) and can start the
0026BAr 3                               ; math routine
0026BAr 3               
0026BAr 3                               ; Save n so we don't have to fool around with the
0026BAr 3                               ; Data Stack
0026BAr 3  B5 02                        lda 2,x
0026BCr 3  85 rr                        sta scratch+4
0026BEr 3  B5 03                        lda 3,x
0026C0r 3  85 rr                        sta scratch+5
0026C2r 3               
0026C2r 3                               ; Now multiply ud-hi (the one in the scratchpad, not the
0026C2r 3                               ; original one on the Data Stack) with the radix from BASE.
0026C2r 3                               ; We can clobber TOS and NOS because we saved n
0026C2r 3  A5 rr                        lda scratch+2
0026C4r 3  95 02                        sta 2,x         ; NOS
0026C6r 3  A5 rr                        lda scratch+3
0026C8r 3  95 03                        sta 3,x
0026CAr 3               
0026CAr 3  A5 rr                        lda base
0026CCr 3  95 00                        sta 0,x         ; TOS
0026CEr 3  74 01                        stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
0026D0r 3               
0026D0r 3                               ; UM* returns a double-celled number
0026D0r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
0026D3r 3               
0026D3r 3                               ; Move ud-hi-lo to safety
0026D3r 3  B5 02                        lda 2,x         ; ud-hi-lo
0026D5r 3  85 rr                        sta scratch+6
0026D7r 3  B5 03                        lda 3,x
0026D9r 3  85 rr                        sta scratch+7
0026DBr 3               
0026DBr 3                               ; Now we multiply ud-lo, overwriting the stack entries
0026DBr 3  A5 rr                        lda scratch
0026DDr 3  95 02                        sta 2,x
0026DFr 3  A5 rr                        lda scratch+1
0026E1r 3  95 03                        sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
0026E3r 3               
0026E3r 3  A5 rr                        lda base
0026E5r 3  95 00                        sta 0,x
0026E7r 3  74 01                        stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
0026E9r 3               
0026E9r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
0026ECr 3               
0026ECr 3  B5 00                        lda 0,x
0026EEr 3  85 rr                        sta scratch+2
0026F0r 3  B5 01                        lda 1,x
0026F2r 3  85 rr                        sta scratch+3
0026F4r 3               
0026F4r 3  B5 02                        lda 2,x
0026F6r 3  85 rr                        sta scratch
0026F8r 3  B5 03                        lda 3,x
0026FAr 3  85 rr                        sta scratch+1
0026FCr 3               
0026FCr 3                               ; We add ud-lo and n, as well as ud-hi and ud-hi-lo,
0026FCr 3                               ; both in the scratch pad
0026FCr 3  18                           clc
0026FDr 3  A5 rr                        lda scratch     ; ud-lo LSB
0026FFr 3  65 rr                        adc scratch+4   ; n LSB
002701r 3  85 rr                        sta scratch     ; this is the new ud-lo
002703r 3  A5 rr                        lda scratch+1   ; ud-lo MSB
002705r 3  65 rr                        adc scratch+5   ; n MSB
002707r 3  85 rr                        sta scratch+1
002709r 3               
002709r 3  A5 rr                        lda scratch+2   ; LSB
00270Br 3  65 rr                        adc scratch+6
00270Dr 3  85 rr                        sta scratch+2   ; this is the new ud-hi
00270Fr 3  A5 rr                        lda scratch+3   ; MSB
002711r 3  65 rr                        adc scratch+7
002713r 3  85 rr                        sta scratch+3
002715r 3               
002715r 3                               ; Clean up: Get rid of one of the two top elements on
002715r 3                               ; the Data Stack. We don't really care which one
002715r 3  E8                           inx
002716r 3  E8                           inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
002717r 3               
002717r 3                               ; One character down. Move address up
002717r 3  F6 04                        inc 4,x
002719r 3  D0 02                        bne @1
00271Br 3  F6 05                        inc 5,x
00271Dr 3               @1:
00271Dr 3                               ; Decrease counter
00271Dr 3  D6 02                        dec 2,x
00271Fr 3  D0 88                        bne @loop
002721r 3               
002721r 3               @done:
002721r 3                               ; Counter has reached zero or we have an error. In both
002721r 3                               ; cases, we clean up the Data Stack and return. Error gives
002721r 3                               ; us ( ud-lo ud-hi addr u char ), regular end is
002721r 3                               ; ( ud-lo ud-hi addr u ud-lo )
002721r 3  E8                           inx
002722r 3  E8                           inx             ; ( ud-lo ud-hi addr u )
002723r 3               
002723r 3                               ; The new ud-lo and ud-hi are still on the scratch pad
002723r 3  A5 rr                        lda scratch     ; new ud-lo
002725r 3  95 06                        sta 6,x
002727r 3  A5 rr                        lda scratch+1
002729r 3  95 07                        sta 7,x
00272Br 3               
00272Br 3  A5 rr                        lda scratch+2
00272Dr 3  95 04                        sta 4,x
00272Fr 3  A5 rr                        lda scratch+3
002731r 3  95 05                        sta 5,x
002733r 3               
002733r 3  60           z_to_number:    rts
002734r 3               
002734r 3               
002734r 3               
002734r 3               ; ## TO_ORDER ( wid -- ) "Add wordlist at beginning of search order"
002734r 3               ; ## ">order"  tested  Gforth search
002734r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html"""
002734r 3               
002734r 3               xt_to_order:
002734r 3                               ; Put the wid on the return stack for now.
002734r 3  20 rr rr                     jsr xt_to_r
002737r 3               
002737r 3                               ; Get the current search order.
002737r 3  20 rr rr                     jsr xt_get_order
00273Ar 3               
00273Ar 3                               ; Get back the wid and add it to the list.
00273Ar 3  20 rr rr                     jsr xt_r_from
00273Dr 3  20 rr rr                     jsr xt_swap
002740r 3  20 rr rr                     jsr xt_one_plus
002743r 3               
002743r 3                               ; Set the search order with the new list.
002743r 3  20 rr rr                     jsr xt_set_order
002746r 3               
002746r 3  60           z_to_order:     rts
002747r 3               
002747r 3               
002747r 3               
002747r 3               ; ## TO_R ( n -- )(R: -- n) "Push TOS to the Return Stack"
002747r 3               ; ## ">r"  auto  ANS core
002747r 3                       ; """https://forth-standard.org/standard/core/toR
002747r 3                       ; This word is handled differently for native and for
002747r 3                       ; subroutine coding, see `COMPILE,`. This is a complile-only
002747r 3                       ; word.
002747r 3                       ; """
002747r 3               xt_to_r:
002747r 3                               ; Save the return address. If this word is natively
002747r 3                               ; coded, this is a complete waste of cycles, but
002747r 3                               ; required for subroutine coding
002747r 3  68                           pla             ; LSB
002748r 3  85 rr                        sta tmptos
00274Ar 3  7A                           ply             ; MSB
00274Br 3               
00274Br 3                               ; --- CUT HERE FOR NATIVE CODING ---
00274Br 3               
00274Br 3                               ; We check for underflow in the second step, so we can
00274Br 3                               ; strip off the stack thrashing for native compiling first
00274Br 3  20 rr rr                     jsr underflow_1
00274Er 3               
00274Er 3                               ; now we can do the actual work
00274Er 3  B5 01                        lda 1,x         ; MSB
002750r 3  48                           pha
002751r 3  B5 00                        lda 0,x         ; LSB
002753r 3  48                           pha
002754r 3               
002754r 3  E8                           inx
002755r 3  E8                           inx
002756r 3               
002756r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002756r 3               
002756r 3                               ; restore return address
002756r 3  5A                           phy             ; MSB
002757r 3  A5 rr                        lda tmptos
002759r 3  48                           pha             ; LSB
00275Ar 3               
00275Ar 3  60           z_to_r:         rts
00275Br 3               
00275Br 3               
00275Br 3               ; ## TRUE ( -- f ) "Push TRUE flag to Data Stack"
00275Br 3               ; ## "true"  auto  ANS core ext
00275Br 3                       ; """https://forth-standard.org/standard/core/TRUE"""
00275Br 3               xt_true:
00275Br 3  CA                           dex
00275Cr 3  CA                           dex
00275Dr 3  A9 FF                        lda #$FF
00275Fr 3  95 00                        sta 0,x
002761r 3  95 01                        sta 1,x
002763r 3               
002763r 3  60           z_true:         rts
002764r 3               
002764r 3               
002764r 3               ; ## TUCK ( b a -- a b a ) "Copy TOS below NOS"
002764r 3               ; ## "tuck"  auto  ANS core ext
002764r 3                       ; """https://forth-standard.org/standard/core/TUCK"""
002764r 3               xt_tuck:
002764r 3  20 rr rr                     jsr underflow_2
002767r 3               
002767r 3  CA                           dex
002768r 3  CA                           dex
002769r 3               
002769r 3  B4 04                        ldy 4,x         ; LSB
00276Br 3  B5 02                        lda 2,x
00276Dr 3  95 04                        sta 4,x
00276Fr 3  94 02                        sty 2,x
002771r 3  95 00                        sta 0,x
002773r 3               
002773r 3  B4 05                        ldy 5,x         ; MSB
002775r 3  B5 03                        lda 3,x
002777r 3  95 05                        sta 5,x
002779r 3  94 03                        sty 3,x         ; bba
00277Br 3  95 01                        sta 1,x         ; baa
00277Dr 3               
00277Dr 3  60           z_tuck:         rts
00277Er 3               
00277Er 3               
00277Er 3               ; ## TWO ( -- u ) "Push the number 2 to stack"
00277Er 3               ; ## "2"  auto  Tali Forth
00277Er 3                       ;
00277Er 3                       ; This code is shared with ASSEMBLER-WORDLIST
00277Er 3               xt_assembler_wordlist:
00277Er 3               xt_two:
00277Er 3  CA                           dex
00277Fr 3  CA                           dex
002780r 3  A9 02                        lda #2
002782r 3  95 00                        sta 0,x
002784r 3  74 01                        stz 1,x
002786r 3               
002786r 3               z_assembler_wordlist:
002786r 3  60           z_two:          rts
002787r 3               
002787r 3               
002787r 3               ; ## TWO_DROP ( n n -- ) "Drop TOS and NOS"
002787r 3               ; ## "2drop"  auto  ANS core
002787r 3                       ; """https://forth-standard.org/standard/core/TwoDROP"""
002787r 3               xt_two_drop:
002787r 3  20 rr rr                     jsr underflow_2
00278Ar 3               
00278Ar 3  E8                           inx
00278Br 3  E8                           inx
00278Cr 3  E8                           inx
00278Dr 3  E8                           inx
00278Er 3               
00278Er 3  60           z_two_drop:     rts
00278Fr 3               
00278Fr 3               
00278Fr 3               ; ## TWO_DUP ( a b -- a b a b ) "Duplicate first two stack elements"
00278Fr 3               ; ## "2dup"  auto  ANS core
00278Fr 3                       ; """https://forth-standard.org/standard/core/TwoDUP"""
00278Fr 3               xt_two_dup:
00278Fr 3  20 rr rr                     jsr underflow_2
002792r 3               
002792r 3  CA                           dex
002793r 3  CA                           dex
002794r 3  CA                           dex
002795r 3  CA                           dex
002796r 3               
002796r 3  B5 04                        lda 4,x         ; TOS
002798r 3  95 00                        sta 0,x
00279Ar 3  B5 05                        lda 5,x
00279Cr 3  95 01                        sta 1,x
00279Er 3               
00279Er 3  B5 06                        lda 6,x         ; NOS
0027A0r 3  95 02                        sta 2,x
0027A2r 3  B5 07                        lda 7,x
0027A4r 3  95 03                        sta 3,x
0027A6r 3               
0027A6r 3  60           z_two_dup:      rts
0027A7r 3               
0027A7r 3               
0027A7r 3               ; ## TWO_FETCH ( addr -- n1 n2 ) "Fetch the cell pair n1 n2 stored at addr"
0027A7r 3               ; ## "2@"  auto  ANS core
0027A7r 3                       ; """https://forth-standard.org/standard/core/TwoFetch
0027A7r 3                       ; Note n2 stored at addr and n1 in the next cell -- in our case,
0027A7r 3                       ; the next two bytes. This is equvalent to  `DUP CELL+ @ SWAP @`
0027A7r 3                       ; """
0027A7r 3               xt_two_fetch:
0027A7r 3  20 rr rr                     jsr underflow_1
0027AAr 3               
0027AAr 3  B5 00                        lda 0,x
0027ACr 3  85 rr                        sta tmp1
0027AEr 3  B4 01                        ldy 1,x
0027B0r 3  84 rr                        sty tmp1+1
0027B2r 3               
0027B2r 3  CA                           dex             ; reuse one stack element
0027B3r 3  CA                           dex
0027B4r 3               
0027B4r 3  B2 rr                        lda (tmp1)      ; copy LSB
0027B6r 3  95 00                        sta 0,x
0027B8r 3  A0 01                        ldy #1          ; copy next
0027BAr 3  B1 rr                        lda (tmp1),y
0027BCr 3  95 01                        sta 1,x
0027BEr 3  C8                           iny             ; copy next
0027BFr 3  B1 rr                        lda (tmp1),y
0027C1r 3  95 02                        sta 2,x
0027C3r 3  C8                           iny             ; copy next
0027C4r 3  B1 rr                        lda (tmp1),y
0027C6r 3  95 03                        sta 3,x
0027C8r 3               
0027C8r 3  60           z_two_fetch:    rts
0027C9r 3               
0027C9r 3               ; ## TWO_OVER ( d1 d2 -- d1 d2 d1 ) "Copy double word NOS to TOS"
0027C9r 3               ; ## "2over"  auto  ANS core
0027C9r 3                       ; """https://forth-standard.org/standard/core/TwoOVER"""
0027C9r 3               xt_two_over:
0027C9r 3  20 rr rr                     jsr underflow_4
0027CCr 3               
0027CCr 3  CA                           dex
0027CDr 3  CA                           dex
0027CEr 3  CA                           dex
0027CFr 3  CA                           dex
0027D0r 3               
0027D0r 3  B5 08                        lda 8,x
0027D2r 3  95 00                        sta 0,x
0027D4r 3               
0027D4r 3  B5 09                        lda 9,x
0027D6r 3  95 01                        sta 1,x
0027D8r 3               
0027D8r 3  B5 0A                        lda 10,x
0027DAr 3  95 02                        sta 2,x
0027DCr 3               
0027DCr 3  B5 0B                        lda 11,x
0027DEr 3  95 03                        sta 3,x
0027E0r 3               
0027E0r 3  60           z_two_over:     rts
0027E1r 3               
0027E1r 3               
0027E1r 3               ; ## TWO_R_FETCH ( -- n n ) "Copy top two entries from Return Stack"
0027E1r 3               ; ## "2r@"  auto  ANS core ext
0027E1r 3                       ; """https://forth-standard.org/standard/core/TwoRFetch
0027E1r 3                       ;
0027E1r 3                       ; This is R> R> 2DUP >R >R SWAP but we can do it a lot faster in
0027E1r 3                       ; assembler. We use trickery to access the elements on the Return
0027E1r 3                       ; Stack instead of pulling the return address first and storing
0027E1r 3                       ; it somewhere else like for 2R> and 2>R. In this version, we leave
0027E1r 3                       ; it as Never Native; at some point, we should compare versions to
0027E1r 3                       ; see if an Always Native version would be better
0027E1r 3                       ; """
0027E1r 3               xt_two_r_fetch:
0027E1r 3               		; make room on the Data Stack
0027E1r 3  CA                           dex
0027E2r 3  CA                           dex
0027E3r 3  CA                           dex
0027E4r 3  CA                           dex
0027E5r 3               
0027E5r 3                               ; Get four bytes off of Return Stack. This assumes that
0027E5r 3                               ; we took a subroutine jump here so the first two entries
0027E5r 3                               ; are the return address
0027E5r 3  8A                           txa
0027E6r 3  BA                           tsx
0027E7r 3  DA                           phx             ; 65c02 has no TXY, so do it the hard way
0027E8r 3  7A                           ply
0027E9r 3  AA                           tax
0027EAr 3               
0027EAr 3                               ; The Return Stack addreses $0101 and $0102 are occupied by
0027EAr 3                               ; the return address for this word. This is a whole lot
0027EAr 3                               ; easier on the 65816
0027EAr 3  B9 03 01                     lda $0103,y     ; LSB of top entry
0027EDr 3  95 00                        sta 0,x
0027EFr 3  B9 04 01                     lda $0104,y     ; MSB of top entry
0027F2r 3  95 01                        sta 1,x
0027F4r 3  B9 05 01                     lda $0105,y     ; LSB of bottom entry
0027F7r 3  95 02                        sta 2,x
0027F9r 3  B9 06 01                     lda $0106,y     ; MSB of top entry
0027FCr 3  95 03                        sta 3,x
0027FEr 3               
0027FEr 3  60           z_two_r_fetch:  rts
0027FFr 3               
0027FFr 3               
0027FFr 3               ; ## TWO_R_FROM ( -- n1 n2 ) (R: n1 n2 -- ) "Pull two cells from Return Stack"
0027FFr 3               ; ## "2r>"  auto  ANS core ext
0027FFr 3               	    ; """https://forth-standard.org/standard/core/TwoRfrom
0027FFr 3                       ; Pull top two entries from Return Stack.
0027FFr 3                       ;
0027FFr 3                       ; Is the same as
0027FFr 3                       ; R> R> SWAP. As with R>, the problem with the is word is that
0027FFr 3                       ; the top value on the ReturnStack for a STC Forth is the
0027FFr 3                       ; return address, which we need to get out of the way first.
0027FFr 3                       ; Native compile needs to be handled as a special case.
0027FFr 3                       ; """
0027FFr 3               xt_two_r_from:
0027FFr 3                               ; save the return address
0027FFr 3  68                           pla                     ; LSB
002800r 3  85 rr                        sta tmp1
002802r 3  68                           pla                     ; MSB
002803r 3  85 rr                        sta tmp1+1
002805r 3               
002805r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002805r 3               
002805r 3               		; make room on stack
002805r 3  CA                           dex
002806r 3  CA                           dex
002807r 3  CA                           dex
002808r 3  CA                           dex
002809r 3               
002809r 3                               ; In theory, we should test for underflow on the Return
002809r 3                               ; Stack. However, given the traffic there with an STC
002809r 3                               ; Forth, that's probably not really useful
002809r 3               
002809r 3                               ; now we can access the data
002809r 3  68                           pla                     ; LSB
00280Ar 3  95 00                        sta 0,x
00280Cr 3  68                           pla                     ; MSB
00280Dr 3  95 01                        sta 1,x
00280Fr 3               
00280Fr 3  68                           pla                     ; LSB
002810r 3  95 02                        sta 2,x
002812r 3  68                           pla                     ; MSB
002813r 3  95 03                        sta 3,x
002815r 3               
002815r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002815r 3               
002815r 3                               ; restore return address
002815r 3  A5 rr                        lda tmp1+1              ; MSB
002817r 3  48                           pha
002818r 3  A5 rr                        lda tmp1                ; LSB
00281Ar 3  48                           pha
00281Br 3               
00281Br 3  60           z_two_r_from:   rts
00281Cr 3               
00281Cr 3               
00281Cr 3               ; ## TWO_SLASH ( n -- n ) "Divide TOS by two"
00281Cr 3               ; ## "2/"  auto  ANS core
00281Cr 3                       ; """https://forth-standard.org/standard/core/TwoDiv"""
00281Cr 3               xt_two_slash:
00281Cr 3  20 rr rr                     jsr underflow_1
00281Fr 3               
00281Fr 3                               ; We can't just LSR the LSB and ROR the MSB because that
00281Fr 3                               ; would do bad things to the sign
00281Fr 3  B5 01                        lda 1,x
002821r 3  0A                           asl                     ; save the sign
002822r 3  76 01                        ror 1,x
002824r 3  76 00                        ror 0,x
002826r 3               
002826r 3  60           z_two_slash:    rts
002827r 3               
002827r 3               
002827r 3               ; ## TWO_STAR ( n -- n ) "Multiply TOS by two"
002827r 3               ; ## "2*"  auto  ANS core
002827r 3                       ; """https://forth-standard.org/standard/core/TwoTimes
002827r 3                       ;
002827r 3                       ; Also used for CELLS
002827r 3                       ; """
002827r 3               xt_two_star:
002827r 3               xt_cells:
002827r 3  20 rr rr                     jsr underflow_1
00282Ar 3               
00282Ar 3  16 00                        asl 0,x
00282Cr 3  36 01                        rol 1,x
00282Er 3               z_cells:
00282Er 3  60           z_two_star:     rts
00282Fr 3               
00282Fr 3               
00282Fr 3               ; ## TWO_STORE ( n1 n2 addr -- ) "Store two numbers at given address"
00282Fr 3               ; ## "2!"  auto  ANS core
00282Fr 3                       ; """https://forth-standard.org/standard/core/TwoStore
00282Fr 3                       ; Stores so n2 goes to addr and n1 to the next consecutive cell.
00282Fr 3                       ; Is equivalent to  `SWAP OVER ! CELL+ !`
00282Fr 3                       ; """
00282Fr 3               xt_two_store:
00282Fr 3  20 rr rr                     jsr underflow_3
002832r 3               
002832r 3  B5 00                        lda 0,x
002834r 3  85 rr                        sta tmp1
002836r 3  B4 01                        ldy 1,x
002838r 3  84 rr                        sty tmp1+1
00283Ar 3               
00283Ar 3  E8                           inx
00283Br 3  E8                           inx
00283Cr 3               
00283Cr 3  B5 00                        lda 0,x         ; copy MSB
00283Er 3  92 rr                        sta (tmp1)
002840r 3  B5 01                        lda 1,x         ; copy next
002842r 3  A0 01                        ldy #1
002844r 3  91 rr                        sta (tmp1),y
002846r 3  B5 02                        lda 2,x         ; copy next
002848r 3  C8                           iny
002849r 3  91 rr                        sta (tmp1),y
00284Br 3  B5 03                        lda 3,x         ; copy MSB
00284Dr 3  C8                           iny
00284Er 3  91 rr                        sta (tmp1),y
002850r 3               
002850r 3  E8                           inx             ; 2DROP
002851r 3  E8                           inx
002852r 3  E8                           inx
002853r 3  E8                           inx
002854r 3               
002854r 3  60           z_two_store:    rts
002855r 3               
002855r 3               
002855r 3               ; ## TWO_SWAP ( n1 n2 n3 n4 -- n3 n4 n1 n1 ) "Exchange two double words"
002855r 3               ; ## "2swap"  auto  ANS core
002855r 3                       ; """https://forth-standard.org/standard/core/TwoSWAP"""
002855r 3               xt_two_swap:
002855r 3  20 rr rr                     jsr underflow_4
002858r 3               
002858r 3                               ; 0 <-> 4
002858r 3  B5 00                        lda 0,x
00285Ar 3  B4 04                        ldy 4,x
00285Cr 3  95 04                        sta 4,x
00285Er 3  94 00                        sty 0,x
002860r 3               
002860r 3                               ; 1 <-> 5
002860r 3  B5 01                        lda 1,x
002862r 3  B4 05                        ldy 5,x
002864r 3  95 05                        sta 5,x
002866r 3  94 01                        sty 1,x
002868r 3               
002868r 3                               ; 2 <-> 6
002868r 3  B5 02                        lda 2,x
00286Ar 3  B4 06                        ldy 6,x
00286Cr 3  95 06                        sta 6,x
00286Er 3  94 02                        sty 2,x
002870r 3               
002870r 3                               ; 3 <-> 7
002870r 3  B5 03                        lda 3,x
002872r 3  B4 07                        ldy 7,x
002874r 3  95 07                        sta 7,x
002876r 3  94 03                        sty 3,x
002878r 3               
002878r 3  60           z_two_swap:     rts
002879r 3               
002879r 3               
002879r 3               ; ## TWO_TO_R ( n1 n2 -- )(R: -- n1 n2 "Push top two entries to Return Stack"
002879r 3               ; ## "2>r"  auto  ANS core ext
002879r 3                       ; """https://forth-standard.org/standard/core/TwotoR
002879r 3                       ; Push top two entries to Return Stack.
002879r 3                       ;
002879r 3                       ; The same as SWAP >R >R
002879r 3                       ; except that if we jumped here, the return address will be in the
002879r 3                       ; way. May not be natively compiled unless we're clever and use
002879r 3                       ; special routines.
002879r 3                       ; """
002879r 3               xt_two_to_r:
002879r 3                               ; save the return address
002879r 3  68                           pla             ; LSB
00287Ar 3  85 rr                        sta tmp1
00287Cr 3  68                           pla             ; MSB
00287Dr 3  85 rr                        sta tmp1+1
00287Fr 3               
00287Fr 3                               ; --- CUT HERE FOR NATIVE CODING ---
00287Fr 3               
00287Fr 3  20 rr rr                     jsr underflow_2
002882r 3               
002882r 3                               ; now we can move the data
002882r 3  B5 03                        lda 3,x         ; MSB
002884r 3  48                           pha
002885r 3  B5 02                        lda 2,x         ; LSB
002887r 3  48                           pha
002888r 3               
002888r 3                               ; now we can move the data
002888r 3  B5 01                        lda 1,x         ; MSB
00288Ar 3  48                           pha
00288Br 3  B5 00                        lda 0,x         ; LSB
00288Dr 3  48                           pha
00288Er 3               
00288Er 3  E8                           inx
00288Fr 3  E8                           inx
002890r 3  E8                           inx
002891r 3  E8                           inx
002892r 3               
002892r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002892r 3               
002892r 3                               ; restore return address
002892r 3  A5 rr                        lda tmp1+1      ; MSB
002894r 3  48                           pha
002895r 3  A5 rr                        lda tmp1        ; LSB
002897r 3  48                           pha
002898r 3               
002898r 3  60           z_two_to_r:     rts
002899r 3               
002899r 3               
002899r 3               ; ## TWO_CONSTANT (C: d "name" -- ) ( -- d) "Create a constant for a double word"
002899r 3               ; ## "2constant"  auto  ANS double
002899r 3                       ; """https://forth-standard.org/standard/double/TwoCONSTANT
002899r 3                       ;
002899r 3                       ; Based on the Forth code
002899r 3                       ; : 2CONSTANT ( D -- )  CREATE SWAP , , DOES> DUP @ SWAP CELL+ @ ;
002899r 3                       ; """
002899r 3               xt_two_constant:
002899r 3  20 rr rr                     jsr underflow_2
00289Cr 3               
00289Cr 3  20 rr rr                     jsr xt_create
00289Fr 3  20 rr rr                     jsr xt_swap
0028A2r 3  20 rr rr                     jsr xt_comma
0028A5r 3  20 rr rr                     jsr xt_comma
0028A8r 3               
0028A8r 3  20 rr rr                     jsr does_runtime    ; does> turns into these two routines.
0028ABr 3  20 rr rr                     jsr dodoes
0028AEr 3               
0028AEr 3  20 rr rr                     jsr xt_dup
0028B1r 3  20 rr rr                     jsr xt_fetch
0028B4r 3  20 rr rr                     jsr xt_swap
0028B7r 3  20 rr rr                     jsr xt_cell_plus
0028BAr 3  20 rr rr                     jsr xt_fetch
0028BDr 3               
0028BDr 3  60           z_two_constant: rts
0028BEr 3               
0028BEr 3               
0028BEr 3               ; ## TWO_LITERAL (C: d -- ) ( -- d) "Compile a literal double word"
0028BEr 3               ; ## "2literal"  auto  ANS double
0028BEr 3                       ; """https://forth-standard.org/standard/double/TwoLITERAL"""
0028BEr 3                       ; Based on the Forth code
0028BEr 3                       ; : 2LITERAL ( D -- ) SWAP POSTPONE LITERAL POSTPONE LITERAL ; IMMEDIATE
0028BEr 3                       ; """
0028BEr 3               xt_two_literal:
0028BEr 3  20 rr rr                     jsr underflow_2 ; double number
0028C1r 3               
0028C1r 3  20 rr rr                     jsr xt_swap
0028C4r 3  20 rr rr                     jsr xt_literal
0028C7r 3  20 rr rr                     jsr xt_literal
0028CAr 3               
0028CAr 3  60           z_two_literal:  rts
0028CBr 3               
0028CBr 3               
0028CBr 3               ; ## TWO_VARIABLE ( "name" -- ) "Create a variable for a double word"
0028CBr 3               ; ## "2variable"  auto  ANS double
0028CBr 3                       ; """https://forth-standard.org/standard/double/TwoVARIABLE
0028CBr 3                       ; The variable is not initialized to zero.
0028CBr 3                       ;
0028CBr 3                       ; This can be realized in Forth as either
0028CBr 3                       ; CREATE 2 CELLS ALLOT  or just  CREATE 0 , 0 ,
0028CBr 3                       ; """
0028CBr 3               xt_two_variable:
0028CBr 3                               ; We just let CRATE and ALLOT do the heavy lifting
0028CBr 3  20 rr rr                     jsr xt_create
0028CEr 3               
0028CEr 3  CA                           dex
0028CFr 3  CA                           dex
0028D0r 3  A9 04                        lda #4
0028D2r 3  95 00                        sta 0,x
0028D4r 3  74 01                        stz 1,x
0028D6r 3               
0028D6r 3  20 rr rr                     jsr xt_allot
0028D9r 3               
0028D9r 3  60           z_two_variable: rts
0028DAr 3               
0028DAr 3               
0028DAr 3               ; ## TYPE ( addr u -- ) "Print string"
0028DAr 3               ; ## "type"  auto  ANS core
0028DAr 3                       ; """https://forth-standard.org/standard/core/TYPE
0028DAr 3                       ; Works through EMIT to allow OUTPUT revectoring.
0028DAr 3                       ; """
0028DAr 3               
0028DAr 3               xt_type:
0028DAr 3  20 rr rr                     jsr underflow_2
0028DDr 3               
0028DDr 3                               ; Save the starting address into tmp1
0028DDr 3  B5 02                        lda 2,x
0028DFr 3  85 rr                        sta tmp1
0028E1r 3  B5 03                        lda 3,x
0028E3r 3  85 rr                        sta tmp1+1
0028E5r 3               @loop:
0028E5r 3                               ; done if length is zero
0028E5r 3  B5 00                        lda 0,x
0028E7r 3  15 01                        ora 1,x
0028E9r 3  F0 15                        beq @done
0028EBr 3               
0028EBr 3                               ; Send the current character
0028EBr 3  B2 rr                        lda (tmp1)
0028EDr 3  20 rr rr                     jsr emit_a      ; avoids stack foolery
0028F0r 3               
0028F0r 3                               ; Move the address along (in tmp1)
0028F0r 3  E6 rr                        inc tmp1
0028F2r 3  D0 02                        bne @1
0028F4r 3  E6 rr                        inc tmp1+1
0028F6r 3               @1:
0028F6r 3                               ; Reduce the count (on the data stack)
0028F6r 3  B5 00                        lda 0,x
0028F8r 3  D0 02                        bne @2
0028FAr 3  D6 01                        dec 1,x
0028FCr 3               @2:
0028FCr 3  D6 00                        dec 0,x
0028FEr 3               
0028FEr 3  80 E5                        bra @loop
002900r 3               @done:
002900r 3  E8                           inx
002901r 3  E8                           inx
002902r 3  E8                           inx
002903r 3  E8                           inx
002904r 3               
002904r 3  60           z_type:         rts
002905r 3               
002905r 3               
002905r 3               
002905r 3               ; ## U_DOT ( u -- ) "Print TOS as unsigned number"
002905r 3               ; ## "u."  tested  ANS core
002905r 3                       ; """https://forth-standard.org/standard/core/Ud
002905r 3                       ;
002905r 3                       ; This is : U. 0 <# #S #> TYPE SPACE ; in Forth
002905r 3                       ; We use the internal assembler function print_u followed
002905r 3                       ; by a single space
002905r 3                       ; """
002905r 3               xt_u_dot:
002905r 3  20 rr rr                     jsr underflow_1
002908r 3               
002908r 3  20 rr rr                     jsr print_u
00290Br 3  A9 20                        lda #AscSP
00290Dr 3  20 rr rr                     jsr emit_a
002910r 3               
002910r 3  60           z_u_dot:        rts
002911r 3               
002911r 3               
002911r 3               ; ## U_DOT_R ( u u -- ) "Print NOS as unsigned number right-justified with TOS width"
002911r 3               ; ## "u.r"  tested  ANS core ext
002911r 3                       ; """https://forth-standard.org/standard/core/UDotR"""
002911r 3               xt_u_dot_r:
002911r 3  20 rr rr                     jsr underflow_2
002914r 3               
002914r 3  20 rr rr                     jsr xt_to_r
002917r 3  20 rr rr                     jsr xt_zero
00291Ar 3  20 rr rr                     jsr xt_less_number_sign
00291Dr 3  20 rr rr                     jsr xt_number_sign_s
002920r 3  20 rr rr                     jsr xt_number_sign_greater
002923r 3  20 rr rr                     jsr xt_r_from
002926r 3  20 rr rr                     jsr xt_over
002929r 3  20 rr rr                     jsr xt_minus
00292Cr 3  20 rr rr                     jsr xt_spaces
00292Fr 3  20 rr rr                     jsr xt_type
002932r 3               
002932r 3  60           z_u_dot_r:      rts
002933r 3               
002933r 3               
002933r 3               ; ## U_GREATER_THAN ( n m -- f ) "Return true if NOS > TOS (unsigned)"
002933r 3               ; ## "u>"  auto  ANS core ext
002933r 3                       ; """https://forth-standard.org/standard/core/Umore"""
002933r 3               xt_u_greater_than:
002933r 3  20 rr rr                     jsr underflow_2
002936r 3               
002936r 3  B5 00                        lda 0,x
002938r 3  D5 02                        cmp 2,x
00293Ar 3  B5 01                        lda 1,x
00293Cr 3  F5 03                        sbc 3,x
00293Er 3  E8                           inx
00293Fr 3  E8                           inx
002940r 3               
002940r 3  A9 00                        lda #0
002942r 3  69 FF                        adc #$ff
002944r 3  95 00                        sta 0,x         ; store flag
002946r 3  95 01                        sta 1,x
002948r 3               
002948r 3  60           z_u_greater_than:    rts
002949r 3               
002949r 3               ; ## U_LESS_THAN ( n m -- f ) "Return true if NOS < TOS (unsigned)"
002949r 3               ; ## "u<"  auto  ANS core
002949r 3                       ; """https://forth-standard.org/standard/core/Uless"""
002949r 3               xt_u_less_than:
002949r 3  20 rr rr                     jsr underflow_2
00294Cr 3               
00294Cr 3  B5 02                        lda 2,x
00294Er 3  D5 00                        cmp 0,x
002950r 3  B5 03                        lda 3,x
002952r 3  F5 01                        sbc 1,x
002954r 3  E8                           inx
002955r 3  E8                           inx
002956r 3               
002956r 3  A9 00                        lda #0
002958r 3  69 FF                        adc #$ff
00295Ar 3  95 00                        sta 0,x         ; store flag
00295Cr 3  95 01                        sta 1,x
00295Er 3               
00295Er 3  60           z_u_less_than:    rts
00295Fr 3               
00295Fr 3               
00295Fr 3               ; ## UD_DOT ( d -- ) "Print double as unsigned"
00295Fr 3               ; ## "ud."  auto  Tali double
00295Fr 3                       ;
00295Fr 3                       ; """Based on the Forth code  : UD. <# #S #> TYPE SPACE ;
00295Fr 3                       ; """
00295Fr 3               xt_ud_dot:
00295Fr 3  20 rr rr                     jsr underflow_2 ; double number
002962r 3               
002962r 3  20 rr rr                     jsr xt_less_number_sign
002965r 3  20 rr rr                     jsr xt_number_sign_s
002968r 3  20 rr rr                     jsr xt_number_sign_greater
00296Br 3  20 rr rr                     jsr xt_type
00296Er 3  20 rr rr                     jsr xt_space
002971r 3               
002971r 3  60           z_ud_dot:        rts
002972r 3               
002972r 3               
002972r 3               ; ## UD_DOT_R ( d u -- ) "Print unsigned double right-justified u wide"
002972r 3               ; ## "ud.r"  auto  Tali double
002972r 3                       ;
002972r 3                       ; """Based on the Forth code : UD.R  >R <# #S #> R> OVER - SPACES TYPE ;
002972r 3                       ; """
002972r 3               xt_ud_dot_r:
002972r 3  20 rr rr                     jsr underflow_3
002975r 3               
002975r 3  20 rr rr                     jsr xt_to_r
002978r 3  20 rr rr                     jsr xt_less_number_sign
00297Br 3  20 rr rr                     jsr xt_number_sign_s
00297Er 3  20 rr rr                     jsr xt_number_sign_greater
002981r 3  20 rr rr                     jsr xt_r_from
002984r 3  20 rr rr                     jsr xt_over
002987r 3  20 rr rr                     jsr xt_minus
00298Ar 3  20 rr rr                     jsr xt_spaces
00298Dr 3  20 rr rr                     jsr xt_type
002990r 3               
002990r 3  60           z_ud_dot_r:      rts
002991r 3               
002991r 3               
002991r 3               ; ## UM_SLASH_MOD ( ud u -- ur u ) "32/16 -> 16 division"
002991r 3               ; ## "um/mod"  auto  ANS core
002991r 3                       ; """https://forth-standard.org/standard/core/UMDivMOD
002991r 3                       ; Divide double cell number by single cell number, returning the
002991r 3                       ; quotient as TOS and any remainder as NOS. All numbers are unsigned.
002991r 3                       ; This is the basic division operation all others use. Based on FIG
002991r 3                       ; Forth code, modified by Garth Wilson, see
002991r 3                       ; http://6502.org/source/integers/ummodfix/ummodfix.htm
002991r 3                       ;
002991r 3                       ; This uses tmp1, tmp1+1, and tmptos
002991r 3                       ; """
002991r 3               
002991r 3               xt_um_slash_mod:
002991r 3  20 rr rr                     jsr underflow_3
002994r 3               
002994r 3                               ; catch division by zero
002994r 3  B5 00                        lda 0,x
002996r 3  15 01                        ora 1,x
002998r 3  D0 05                        bne @not_zero
00299Ar 3               
00299Ar 3  A9 04                        lda #err_divzero
00299Cr 3  4C rr rr                     jmp error
00299Fr 3               
00299Fr 3               @not_zero:
00299Fr 3                               ; We loop 17 times
00299Fr 3  A9 11                        lda #17
0029A1r 3  85 rr                        sta tmptos
0029A3r 3               
0029A3r 3               @loop:
0029A3r 3                               ; rotate low cell of dividend one bit left (LSB)
0029A3r 3  36 04                        rol 4,x
0029A5r 3  36 05                        rol 5,x
0029A7r 3               
0029A7r 3                               ; loop control
0029A7r 3  C6 rr                        dec tmptos
0029A9r 3  F0 22                        beq @done
0029ABr 3               
0029ABr 3                               ; rotate high cell of dividend one bit left (MSB)
0029ABr 3  36 02                        rol 2,x
0029ADr 3  36 03                        rol 3,x
0029AFr 3               
0029AFr 3  64 rr                        stz tmp1        ; store the bit we got from hi cell (MSB)
0029B1r 3  26 rr                        rol tmp1
0029B3r 3               
0029B3r 3                               ; subtract dividend hi cell minus divisor
0029B3r 3  38                           sec
0029B4r 3  B5 02                        lda 2,x
0029B6r 3  F5 00                        sbc 0,x
0029B8r 3  85 rr                        sta tmp1+1
0029BAr 3  B5 03                        lda 3,x
0029BCr 3  F5 01                        sbc 1,x
0029BEr 3               
0029BEr 3  A8                           tay
0029BFr 3  A5 rr                        lda tmp1
0029C1r 3  E9 00                        sbc #0
0029C3r 3  90 DE                        bcc @loop
0029C5r 3               
0029C5r 3                               ; make result new dividend high cell
0029C5r 3  A5 rr                        lda tmp1+1
0029C7r 3  95 02                        sta 2,x
0029C9r 3  94 03                        sty 3,x         ; used as temp storage
0029CBr 3               
0029CBr 3  80 D6                        bra @loop
0029CDr 3               @done:
0029CDr 3  E8                           inx
0029CEr 3  E8                           inx
0029CFr 3               
0029CFr 3  20 rr rr                     jsr xt_swap
0029D2r 3               
0029D2r 3  60           z_um_slash_mod: rts
0029D3r 3               
0029D3r 3               
0029D3r 3               
0029D3r 3               ; ## UM_STAR ( u u -- ud ) "Multiply 16 x 16 -> 32"
0029D3r 3               ; ## "um*"  auto  ANS core
0029D3r 3                       ; """https://forth-standard.org/standard/core/UMTimes
0029D3r 3                       ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.
0029D3r 3                       ; Old Forth versions such as FIG Forth call this U*
0029D3r 3                       ;
0029D3r 3                       ; This is based on modified FIG Forth code by Dr. Jefyll, see
0029D3r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed
0029D3r 3                       ; discussion.
0029D3r 3                       ;
0029D3r 3                       ; We don't use the system scratch pad (SYSPAD) for temp
0029D3r 3                       ; storage because >NUMBER uses it as well, but instead tmp1 to
0029D3r 3                       ; tmp3 (tmp1 is N in the original code, tmp1+1 is N+1, etc).
0029D3r 3                       ;
0029D3r 3                       ; Consider switching to a table-supported version based on
0029D3r 3                       ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
0029D3r 3                       ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d>
0029D3r 3                       ; http://forum.6502.org/viewtopic.php?p=205#p205
0029D3r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689
0029D3r 3                       ; """
0029D3r 3               
0029D3r 3               xt_um_star:
0029D3r 3  20 rr rr                     jsr underflow_2
0029D6r 3               
0029D6r 3                               ; to eliminate clc inside the loop, the value at
0029D6r 3                               ; tmp1 is reduced by 1 in advance
0029D6r 3  18                           clc
0029D7r 3  B5 00                        lda 0,x         ; copy TOS to tmp2
0029D9r 3  E9 00                        sbc #0
0029DBr 3  85 rr                        sta tmp2
0029DDr 3               
0029DDr 3  B5 01                        lda 1,x
0029DFr 3  E9 00                        sbc #0
0029E1r 3  90 31                        bcc @zero       ; is TOS zero?
0029E3r 3  85 rr                        sta tmp2+1
0029E5r 3               
0029E5r 3  A9 00                        lda #0
0029E7r 3  85 rr                        sta tmp1
0029E9r 3  86 rr                        stx tmp3        ; tested for exit from outer loop
0029EBr 3  CA                           dex
0029ECr 3  CA                           dex
0029EDr 3               
0029EDr 3               @outer_loop:
0029EDr 3  A0 08                        ldy #8          ; counter inner loop
0029EFr 3  56 04                        lsr 4,x         ; think "2,x" then later "3,x"
0029F1r 3               
0029F1r 3               @inner_loop:
0029F1r 3  90 0C                        bcc @no_add
0029F3r 3  85 rr                        sta tmp1+1      ; save time, don't CLC
0029F5r 3  A5 rr                        lda tmp1
0029F7r 3  65 rr                        adc tmp2
0029F9r 3  85 rr                        sta tmp1
0029FBr 3  A5 rr                        lda tmp1+1
0029FDr 3  65 rr                        adc tmp2+1
0029FFr 3               
0029FFr 3               @no_add:
0029FFr 3  6A                           ror
002A00r 3  66 rr                        ror tmp1
002A02r 3  76 04                        ror 4,x         ; think "2,x" then later "3,x"
002A04r 3               
002A04r 3  88                           dey
002A05r 3  D0 EA                        bne @inner_loop ; go back for one more shift?
002A07r 3               
002A07r 3  E8                           inx
002A08r 3  E4 rr                        cpx tmp3
002A0Ar 3  D0 E1                        bne @outer_loop ; go back for eight more shifts?
002A0Cr 3               
002A0Cr 3                               ; all done, store high word of result
002A0Cr 3  95 01                        sta 1,x
002A0Er 3  A5 rr                        lda tmp1
002A10r 3  95 00                        sta 0,x
002A12r 3  80 04                        bra @done
002A14r 3               
002A14r 3               @zero:
002A14r 3  74 02                        stz 2,x
002A16r 3  74 03                        stz 3,x
002A18r 3               @done:
002A18r 3  60           z_um_star:      rts
002A19r 3               
002A19r 3               
002A19r 3               
002A19r 3               ; ## UNLOOP ( -- )(R: n1 n2 n3 ---) "Drop loop control from Return stack"
002A19r 3               ; ## "unloop"  auto  ANS core
002A19r 3                       ; """https://forth-standard.org/standard/core/UNLOOP
002A19r 3                       ;
002A19r 3                       ; Note that 6xPLA uses just as many bytes as a loop would
002A19r 3                       ; """
002A19r 3               xt_unloop:
002A19r 3                               ; Drop fudge number (limit/start from DO/?DO off the
002A19r 3                               ; return stack
002A19r 3  68                           pla
002A1Ar 3  68                           pla
002A1Br 3  68                           pla
002A1Cr 3  68                           pla
002A1Dr 3               
002A1Dr 3                               ; Now drop the LEAVE address that was below them off
002A1Dr 3                               ; the Return Stack as well
002A1Dr 3  68                           pla
002A1Er 3  68                           pla
002A1Fr 3               
002A1Fr 3  60           z_unloop:       rts
002A20r 3               
002A20r 3               
002A20r 3               ; ## UNTIL (C: dest -- ) ( -- ) "Loop flow control"
002A20r 3               ; ## "until"  auto  ANS core
002A20r 3                       ; """http://forth-standard.org/standard/core/UNTIL"""
002A20r 3               xt_until:
002A20r 3                               ; Compile a 0BRANCH
002A20r 3  A0 rr                        ldy #>zero_branch_runtime
002A22r 3  A9 rr                        lda #<zero_branch_runtime
002A24r 3  20 rr rr                     jsr cmpl_subroutine
002A27r 3               
002A27r 3                               ; The address to loop back to is on the stack.
002A27r 3                               ; Just compile it as the destination for the
002A27r 3                               ; 0branch.
002A27r 3  20 rr rr                     jsr xt_comma
002A2Ar 3               
002A2Ar 3  60           z_until:        rts
002A2Br 3               
002A2Br 3               
002A2Br 3               ; ## UNUSED ( -- u ) "Return size of space available to Dictionary"
002A2Br 3               ; ## "unused"  auto  ANS core ext
002A2Br 3                       ; """https://forth-standard.org/standard/core/UNUSED
002A2Br 3                       ; UNUSED does not include the ACCEPT history buffers. Total RAM
002A2Br 3                       ; should be HERE + UNUSED + <history buffer size>, the last of which
002A2Br 3                       ; defaults to $400
002A2Br 3                       ; """
002A2Br 3               xt_unused:
002A2Br 3  CA                           dex
002A2Cr 3  CA                           dex
002A2Dr 3               
002A2Dr 3  A9 FF                        lda #<cp_end
002A2Fr 3  38                           sec
002A30r 3  E5 rr                        sbc cp
002A32r 3  95 00                        sta 0,x
002A34r 3               
002A34r 3  A9 7F                        lda #>cp_end
002A36r 3  E5 rr                        sbc cp+1
002A38r 3  95 01                        sta 1,x
002A3Ar 3               
002A3Ar 3  60           z_unused:       rts
002A3Br 3               
002A3Br 3               
002A3Br 3               ; ## UPDATE ( -- ) "Mark current block as dirty"
002A3Br 3               ; ## "update"  auto  ANS block
002A3Br 3                       ; """https://forth-standard.org/standard/block/UPDATE"""
002A3Br 3               xt_update:
002A3Br 3                               ; Turn on the dirty bit. We can't use TSB here because it only
002A3Br 3                               ; has Absolute and Direct Pages addressing modes
002A3Br 3  A0 2C                        ldy #buffstatus_offset
002A3Dr 3  B1 rr                        lda (up),y
002A3Fr 3  09 02                        ora #2          ; Turn on dirty flag (bit 2)
002A41r 3  91 rr                        sta (up),y
002A43r 3               
002A43r 3  60           z_update:       rts
002A44r 3               
002A44r 3               
002A44r 3               ; ## USERADDR ( -- addr ) "Push address of base address of user variables"
002A44r 3               ; ## "useraddr"  tested  Tali Forth
002A44r 3               xt_useraddr:
002A44r 3  CA                           dex
002A45r 3  CA                           dex
002A46r 3  A9 rr                        lda #<up
002A48r 3  95 00                        sta 0,x
002A4Ar 3  A9 rr                        lda #>up
002A4Cr 3  95 01                        sta 1,x
002A4Er 3               
002A4Er 3  60           z_useraddr:     rts
002A4Fr 3               
002A4Fr 3               
002A4Fr 3               ; ## VALUE ( n "name" -- ) "Define a value"
002A4Fr 3               ; ## "value"  auto  ANS core
002A4Fr 3                       ; """https://forth-standard.org/standard/core/VALUE
002A4Fr 3                       ;
002A4Fr 3                       ; This is a dummy header for the WORDLIST. The actual code is
002A4Fr 3                       ; identical to that of CONSTANT
002A4Fr 3                       ; """
002A4Fr 3               
002A4Fr 3               
002A4Fr 3               ; ## VARIABLE ( "name" -- ) "Define a variable"
002A4Fr 3               ; ## "variable"  auto  ANS core
002A4Fr 3                       ; """https://forth-standard.org/standard/core/VARIABLE
002A4Fr 3                       ; There are various Forth definitions for this word, such as
002A4Fr 3                       ; `CREATE 1 CELLS ALLOT`  or  `CREATE 0 ,`  We use a variant of the
002A4Fr 3                       ; second one so the variable is initialized to zero
002A4Fr 3                       ; """
002A4Fr 3               xt_variable:
002A4Fr 3                               ; we let CREATE do the heavy lifting
002A4Fr 3  20 rr rr                     jsr xt_create
002A52r 3               
002A52r 3                               ; there is no "STZ (CP)" so we have to do this the hard
002A52r 3                               ; way
002A52r 3  A9 00                        lda #0
002A54r 3               
002A54r 3  92 rr                        sta (cp)
002A56r 3  E6 rr                        inc cp
002A58r 3  D0 02                        bne @1
002A5Ar 3  E6 rr                        inc cp+1
002A5Cr 3               @1:
002A5Cr 3  92 rr                        sta (cp)
002A5Er 3  E6 rr                        inc cp
002A60r 3  D0 02                        bne @2
002A62r 3  E6 rr                        inc cp+1
002A64r 3               @2:
002A64r 3                               ; Now we need to adjust the length of the complete word by two
002A64r 3  20 rr rr                     jsr adjust_z
002A67r 3               
002A67r 3  60           z_variable:     rts
002A68r 3               
002A68r 3               
002A68r 3               ; ## WHILE ( C: dest -- orig dest ) ( x -- ) "Loop flow control"
002A68r 3               ; ## "while"  auto  ANS core
002A68r 3                       ; """http://forth-standard.org/standard/core/WHILE"""
002A68r 3               xt_while:
002A68r 3                               ; Compile a 0branch
002A68r 3  A0 rr                        ldy #>zero_branch_runtime
002A6Ar 3  A9 rr                        lda #<zero_branch_runtime
002A6Cr 3  20 rr rr                     jsr cmpl_subroutine
002A6Fr 3               
002A6Fr 3                               ; Put the address (here) where the destination
002A6Fr 3                               ; address needs to go so it can be put there later.
002A6Fr 3  20 rr rr                     jsr xt_here
002A72r 3               
002A72r 3                               ; Fill in the destination address with 0 for now.
002A72r 3  20 rr rr                     jsr xt_zero
002A75r 3  20 rr rr                     jsr xt_comma
002A78r 3               
002A78r 3                               ; Swap the two addresses on the stack.
002A78r 3  20 rr rr                     jsr xt_swap
002A7Br 3               
002A7Br 3  60           z_while:        rts
002A7Cr 3               
002A7Cr 3               
002A7Cr 3               ; ## WITHIN ( n1 n2 n3 -- ) "See if within a range"
002A7Cr 3               ; ## "within"  auto  ANS core ext
002A7Cr 3                       ; """https://forth-standard.org/standard/core/WITHIN
002A7Cr 3                       ;
002A7Cr 3                       ; This an assembler version of the ANS Forth implementation
002A7Cr 3                       ; at https://forth-standard.org/standard/core/WITHIN which is
002A7Cr 3                       ; OVER - >R - R> U<  note there is an alternative high-level version
002A7Cr 3                       ; ROT TUCK > -ROT > INVERT AND
002A7Cr 3                       ; """"
002A7Cr 3               xt_within:
002A7Cr 3  20 rr rr                     jsr underflow_3
002A7Fr 3               
002A7Fr 3  20 rr rr                     jsr xt_over
002A82r 3  20 rr rr                     jsr xt_minus
002A85r 3  20 rr rr                     jsr xt_to_r
002A88r 3  20 rr rr                     jsr xt_minus
002A8Br 3  20 rr rr                     jsr xt_r_from
002A8Er 3  20 rr rr                     jsr xt_u_less_than
002A91r 3               
002A91r 3  60           z_within:       rts
002A92r 3               
002A92r 3               
002A92r 3               ; ## WORD ( char "name " -- caddr ) "Parse input stream"
002A92r 3               ; ## "word"  auto  ANS core
002A92r 3                       ; """https://forth-standard.org/standard/core/WORD
002A92r 3                       ; Obsolete parsing word included for backwards compatibility only.
002A92r 3                       ; Do not use this, use `PARSE` or `PARSE-NAME`. Skips leading delimiters
002A92r 3                       ; and copies word to storage area for a maximum size of 255 bytes.
002A92r 3                       ; Returns the result as a counted string (requires COUNT to convert
002A92r 3                       ; to modern format), and inserts a space after the string. See "Forth
002A92r 3                       ; Programmer's Handbook" 3rd edition p. 159 and
002A92r 3                       ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
002A92r 3                       ; for discussions of why you shouldn't be using WORD anymore.
002A92r 3                       ;
002A92r 3                       ; Forth
002A92r 3                       ; would be   PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
002A92r 3                       ; We only allow input of 255 chars. Seriously, use PARSE-NAME.
002A92r 3                       ; """
002A92r 3               
002A92r 3               xt_word:
002A92r 3  20 rr rr                     jsr underflow_1
002A95r 3               
002A95r 3                               ; Skip over leading delimiters - this is like PARSE-NAME,
002A95r 3                               ; but unlike PARSE
002A95r 3  A4 rr                        ldy toin                ; >IN
002A97r 3               @loop:
002A97r 3  C4 rr                        cpy ciblen              ; quit if end of input
002A99r 3  F0 09                        beq @found_char
002A9Br 3  B1 rr                        lda (cib),y
002A9Dr 3  D5 00                        cmp 0,x                 ; ASCII of delimiter
002A9Fr 3  D0 03                        bne @found_char
002AA1r 3               
002AA1r 3  C8                           iny
002AA2r 3  80 F3                        bra @loop
002AA4r 3               @found_char:
002AA4r 3                               ; Save index of where word starts
002AA4r 3  84 rr                        sty toin
002AA6r 3               
002AA6r 3                               ; The real work is done by parse
002AA6r 3  20 rr rr                     jsr xt_parse            ; Returns ( addr u )
002AA9r 3               
002AA9r 3                               ; Convert the modern ( addr u ) string format to obsolete
002AA9r 3                               ; ( caddr ) format. We just do this in the Dictionary
002AA9r 3  B5 00                        lda 0,x
002AABr 3  92 rr                        sta (cp)                ; Save length of string
002AADr 3  48                           pha                     ; Keep copy of length for later
002AAEr 3               
002AAEr 3  20 rr rr                     jsr xt_dup              ; ( addr u u )
002AB1r 3  A5 rr                        lda cp
002AB3r 3  18                           clc
002AB4r 3  69 01                        adc #1
002AB6r 3  95 02                        sta 2,x                 ; LSB of CP
002AB8r 3  A5 rr                        lda cp+1
002ABAr 3  69 00                        adc #0
002ABCr 3  95 03                        sta 3,x                 ; ( addr cp+1 u )
002ABEr 3               
002ABEr 3  20 rr rr                     jsr xt_move
002AC1r 3               
002AC1r 3                               ; Return caddr
002AC1r 3  CA                           dex
002AC2r 3  CA                           dex
002AC3r 3  A5 rr                        lda cp
002AC5r 3  95 00                        sta 0,x
002AC7r 3  A5 rr                        lda cp+1
002AC9r 3  95 01                        sta 1,x
002ACBr 3               
002ACBr 3                               ; Adjust CP
002ACBr 3  68                           pla                     ; length of string
002ACCr 3  18                           clc
002ACDr 3  65 rr                        adc cp
002ACFr 3  85 rr                        sta cp
002AD1r 3  A5 rr                        lda cp+1
002AD3r 3  69 00                        adc #0                  ; we only need the carry
002AD5r 3  85 rr                        sta cp+1
002AD7r 3  60           z_word:         rts
002AD8r 3               
002AD8r 3               
002AD8r 3               ; ## WORDLIST ( -- wid ) "Create new wordlist (from pool of 8)"
002AD8r 3               ; ## "wordlist" auto ANS search
002AD8r 3                       ; """https://forth-standard.org/standard/search/WORDLIST
002AD8r 3                       ; See the tutorial on Wordlists and the Search Order for
002AD8r 3                       ; more information.
002AD8r 3                       ; """
002AD8r 3               
002AD8r 3               xt_wordlist:
002AD8r 3                               ; Get the current number of wordlists
002AD8r 3  A0 05                        ldy #num_wordlists_offset
002ADAr 3  B1 rr                        lda (up),y      ; This is a byte variable, so only
002ADCr 3                                               ; the LSB needs to be checked.
002ADCr 3               
002ADCr 3                               ; See if we are already at the max.
002ADCr 3  C9 0C                        cmp #max_wordlists
002ADEr 3  D0 05                        bne @ok
002AE0r 3               
002AE0r 3                               ; Print an error message if all wordlists used.
002AE0r 3  A9 0B                        lda #err_wordlist
002AE2r 3  4C rr rr                     jmp error
002AE5r 3               
002AE5r 3               @ok:
002AE5r 3  1A                           inc             ; Increment the wordlist#
002AE6r 3  91 rr                        sta (up),y      ; Save it into byte variable #wordlists
002AE8r 3  CA                           dex             ; and put it on the stack.
002AE9r 3  CA                           dex
002AEAr 3  95 00                        sta 0,x
002AECr 3  74 01                        stz 1,x         ; 12 is the max, so upper byte is always zero.
002AEEr 3               
002AEEr 3  60           z_wordlist:     rts
002AEFr 3               
002AEFr 3               
002AEFr 3               
002AEFr 3               ; ## WORDS ( -- ) "Print known words from Dictionary"
002AEFr 3               ; ## "words"  tested  ANS tools
002AEFr 3                       ; """https://forth-standard.org/standard/tools/WORDS
002AEFr 3                       ; This is pretty much only used at the command line so we can
002AEFr 3                       ; be slow and try to save space.
002AEFr 3                       ; """
002AEFr 3               
002AEFr 3               xt_words:
002AEFr 3                               ; we follow Gforth by starting on the next
002AEFr 3                               ; line
002AEFr 3  20 rr rr                     jsr xt_cr
002AF2r 3               
002AF2r 3                               ; We pretty-format the output by inserting a line break
002AF2r 3                               ; before the end of the line. We can get away with pushing
002AF2r 3                               ; the counter to the stack because this is usually an
002AF2r 3                               ; interactive word and speed is not that important
002AF2r 3  A9 00                        lda #0
002AF4r 3  48                           pha
002AF5r 3               
002AF5r 3                               ; Set up for traversing the wordlist search order.
002AF5r 3  CA                           dex                     ; Make room on the stack for
002AF6r 3  CA                           dex                     ; a dictionary pointer.
002AF7r 3  64 rr                        stz tmp3                ; Start at the beginning of
002AF9r 3                                                       ; the search order.
002AF9r 3               @wordlist_loop:
002AF9r 3  A0 1E                        ldy #num_order_offset   ; Check against byte variable #ORDER.
002AFBr 3  A5 rr                        lda tmp3
002AFDr 3  D1 rr                        cmp (up),y              ; See if we are done.
002AFFr 3  D0 02                        bne @have_wordlist
002B01r 3               
002B01r 3                               ; We ran out of wordlists to search.
002B01r 3  80 44                        bra @words_done
002B03r 3               
002B03r 3               @have_wordlist:
002B03r 3                               ; start with last word in Dictionary
002B03r 3                               ; Get the current wordlist id
002B03r 3  18                           clc                     ; Index into byte array SEARCH-ORDER.
002B04r 3  69 1F                        adc #search_order_offset
002B06r 3  A8                           tay
002B07r 3  B1 rr                        lda (up),y              ; Get the index into array WORDLISTS
002B09r 3               
002B09r 3                               ; Get the DP for that wordlist.
002B09r 3  0A                           asl                     ; Turn offset into cells offset.
002B0Ar 3  18                           clc
002B0Br 3  69 06                        adc #wordlists_offset
002B0Dr 3  A8                           tay
002B0Er 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
002B10r 3  95 00                        sta 0,x                 ; on the stack. ( nt )
002B12r 3  C8                           iny
002B13r 3  B1 rr                        lda (up),y
002B15r 3  95 01                        sta 1,x
002B17r 3               
002B17r 3               @loop:
002B17r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002B1Ar 3  20 rr rr                     jsr xt_name_to_string   ; ( nt addr u )
002B1Dr 3               
002B1Dr 3                               ; Insert line break if we're about to go past the end of the
002B1Dr 3                               ; line
002B1Dr 3  68                           pla
002B1Er 3  18                           clc
002B1Fr 3  75 00                        adc 0,x
002B21r 3  1A                           inc                     ; don't forget the space between words
002B22r 3  C9 4F                        cmp #MAX_LINE_LENGTH    ; usually 79
002B24r 3  90 05                        bcc @1
002B26r 3               
002B26r 3  20 rr rr                     jsr xt_cr
002B29r 3  A9 00                        lda #0
002B2Br 3               @1:
002B2Br 3  48                           pha
002B2Cr 3  20 rr rr                     jsr xt_type             ; ( nt )
002B2Fr 3               
002B2Fr 3  A9 20                        lda #AscSP
002B31r 3  20 rr rr                     jsr emit_a
002B34r 3               
002B34r 3                               ; get next word, which begins two down
002B34r 3  20 rr rr                     jsr xt_one_plus         ; 1+
002B37r 3  20 rr rr                     jsr xt_one_plus         ; 1+
002B3Ar 3  20 rr rr                     jsr xt_fetch            ; @ ( nt+1 )
002B3Dr 3               
002B3Dr 3                               ; if next address is zero, we're done
002B3Dr 3  B5 00                        lda 0,x
002B3Fr 3  15 01                        ora 1,x
002B41r 3  D0 D4                        bne @loop
002B43r 3               
002B43r 3                               ; Move on to the next wordlist in the search order.
002B43r 3  E6 rr                        inc tmp3
002B45r 3  80 B2                        bra @wordlist_loop
002B47r 3               
002B47r 3               @words_done:
002B47r 3  68                           pla                     ; dump counter
002B48r 3               
002B48r 3  E8                           inx
002B49r 3  E8                           inx
002B4Ar 3               
002B4Ar 3  60           z_words:        rts
002B4Br 3               
002B4Br 3               
002B4Br 3               
002B4Br 3               ; ## WORDSIZE ( nt -- u ) "Get size of word in bytes"
002B4Br 3               ; ## "wordsize"  auto  Tali Forth
002B4Br 3                       ; """Given an word's name token (nt), return the size of the
002B4Br 3                       ; word's payload size in bytes (CFA plus PFA) in bytes. Does not
002B4Br 3                       ; count the final RTS.
002B4Br 3                       ; """
002B4Br 3               xt_wordsize:
002B4Br 3  20 rr rr                     jsr underflow_1
002B4Er 3               
002B4Er 3                               ; We get the start address of the word from its header entry
002B4Er 3                               ; for the start of the actual code (execution token, xt)
002B4Er 3                               ; which is four bytes down, and the pointer to the end of the
002B4Er 3                               ; code (z_word, six bytes down)
002B4Er 3  B5 00                        lda 0,x
002B50r 3  85 rr                        sta tmp1
002B52r 3  B5 01                        lda 1,x
002B54r 3  85 rr                        sta tmp1+1
002B56r 3               
002B56r 3  A0 06                        ldy #6
002B58r 3  B1 rr                        lda (tmp1),y    ; LSB of z
002B5Ar 3  88                           dey
002B5Br 3  88                           dey
002B5Cr 3               
002B5Cr 3  38                           sec
002B5Dr 3  F1 rr                        sbc (tmp1),y    ; LSB of xt
002B5Fr 3  95 00                        sta 0,x
002B61r 3               
002B61r 3  A0 07                        ldy #7
002B63r 3  B1 rr                        lda (tmp1),y    ; MSB of z
002B65r 3  88                           dey
002B66r 3  88                           dey
002B67r 3               
002B67r 3  F1 rr                        sbc (tmp1),y    ; MSB of xt
002B69r 3  95 01                        sta 1,x
002B6Br 3               
002B6Br 3  60           z_wordsize:     rts
002B6Cr 3               
002B6Cr 3               
002B6Cr 3               ; ## XOR ( n n -- n ) "Logically XOR TOS and NOS"
002B6Cr 3               ; ## "xor"  auto  ANS core
002B6Cr 3                       ; """https://forth-standard.org/standard/core/XOR"""
002B6Cr 3               xt_xor:
002B6Cr 3  20 rr rr                     jsr underflow_2
002B6Fr 3               
002B6Fr 3  B5 00                        lda 0,x
002B71r 3  55 02                        eor 2,x
002B73r 3  95 02                        sta 2,x
002B75r 3               
002B75r 3  B5 01                        lda 1,x
002B77r 3  55 03                        eor 3,x
002B79r 3  95 03                        sta 3,x
002B7Br 3               
002B7Br 3  E8                           inx
002B7Cr 3  E8                           inx
002B7Dr 3               
002B7Dr 3  60           z_xor:          rts
002B7Er 3               
002B7Er 3               
002B7Er 3               ; ## ZERO ( -- 0 ) "Push 0 to Data Stack"
002B7Er 3               ; ## "0"  auto  Tali Forth
002B7Er 3                       ; """The disassembler assumes that this routine does not use Y. Note
002B7Er 3                       ; that CASE and FORTH-WORDLIST use the same routine, as the WD for Forth
002B7Er 3                       ; is 0."""
002B7Er 3               xt_case:
002B7Er 3               xt_forth_wordlist:
002B7Er 3               xt_zero:
002B7Er 3  CA                           dex             ; push
002B7Fr 3  CA                           dex
002B80r 3  74 00                        stz 0,x
002B82r 3  74 01                        stz 1,x
002B84r 3               z_case:
002B84r 3               z_forth_wordlist:
002B84r 3               z_zero:
002B84r 3  60                           rts
002B85r 3               
002B85r 3               
002B85r 3               ; ## ZERO_EQUAL ( n -- f ) "Check if TOS is zero"
002B85r 3               ; ## "0="  auto  ANS core
002B85r 3                       ; """https://forth-standard.org/standard/core/ZeroEqual"""
002B85r 3               
002B85r 3               xt_zero_equal:
002B85r 3  20 rr rr                     jsr underflow_1
002B88r 3               
002B88r 3  B5 00                        lda 0,x
002B8Ar 3  15 01                        ora 1,x
002B8Cr 3  F0 04                        beq @zero
002B8Er 3               
002B8Er 3                               ; not a zero, so we need a FALSE flag (0)
002B8Er 3  A9 00                        lda #0
002B90r 3  80 02                        bra @store
002B92r 3               @zero:
002B92r 3                               ; We have a zero, so we need a TRUE flag (-1)
002B92r 3  A9 FF                        lda #$ff
002B94r 3               @store:
002B94r 3  95 00                        sta 0,x
002B96r 3  95 01                        sta 1,x
002B98r 3               
002B98r 3  60           z_zero_equal:   rts
002B99r 3               
002B99r 3               
002B99r 3               
002B99r 3               ; ## ZERO_GREATER ( n -- f ) "Return a TRUE flag if TOS is positive"
002B99r 3               ; ## "0>"  auto  ANS core ext
002B99r 3                       ; """https://forth-standard.org/standard/core/Zeromore"""
002B99r 3               
002B99r 3               xt_zero_greater:
002B99r 3  20 rr rr                     jsr underflow_1
002B9Cr 3               
002B9Cr 3  A0 00                        ldy #0          ; Default is FALSE (TOS is negative)
002B9Er 3               
002B9Er 3  B5 01                        lda 1,x         ; MSB
002BA0r 3  30 05                        bmi @done       ; TOS is negative, keep FLASE
002BA2r 3  15 00                        ora 0,x
002BA4r 3  F0 01                        beq @done       ; TOS is zero, keep FALSE
002BA6r 3               
002BA6r 3  88                           dey             ; TOS is postive, make true
002BA7r 3               @done:
002BA7r 3  98                           tya
002BA8r 3  95 00                        sta 0,x
002BAAr 3  95 01                        sta 1,x
002BACr 3               
002BACr 3  60           z_zero_greater: rts
002BADr 3               
002BADr 3               
002BADr 3               
002BADr 3               ; ## ZERO_LESS ( n -- f ) "Return a TRUE flag if TOS negative"
002BADr 3               ; ## "0<"  auto  ANS core
002BADr 3                       ; """https://forth-standard.org/standard/core/Zeroless"""
002BADr 3               
002BADr 3               xt_zero_less:
002BADr 3  20 rr rr                     jsr underflow_1
002BB0r 3               
002BB0r 3  A0 00                        ldy #0          ; Default is FALSE (TOS positive)
002BB2r 3               
002BB2r 3  B5 01                        lda 1,x         ; MSB
002BB4r 3  10 01                        bpl @done       ; TOS is positive, so keep FALSE
002BB6r 3               
002BB6r 3  88                           dey             ; TOS is negative, make TRUE
002BB7r 3               @done:
002BB7r 3  98                           tya
002BB8r 3  95 00                        sta 0,x
002BBAr 3  95 01                        sta 1,x
002BBCr 3               
002BBCr 3  60           z_zero_less:    rts
002BBDr 3               
002BBDr 3               
002BBDr 3               
002BBDr 3               ; ## ZERO_UNEQUAL ( m -- f ) "Return TRUE flag if not zero"
002BBDr 3               ; ## "0<>"  auto  ANS core ext
002BBDr 3                       ; """https://forth-standard.org/standard/core/Zerone"""
002BBDr 3               
002BBDr 3               xt_zero_unequal:
002BBDr 3  20 rr rr                     jsr underflow_1
002BC0r 3               
002BC0r 3  A0 00                        ldy #0          ; default false
002BC2r 3               
002BC2r 3  B5 00                        lda 0,x
002BC4r 3  15 01                        ora 1,x
002BC6r 3  F0 01                        beq @got_zero
002BC8r 3               
002BC8r 3  88                           dey
002BC9r 3               @got_zero:
002BC9r 3  98                           tya
002BCAr 3  95 00                        sta 0,x
002BCCr 3  95 01                        sta 1,x
002BCEr 3               
002BCEr 3  60           z_zero_unequal: rts
002BCFr 3               
002BCFr 3               
002BCFr 3               
002BCFr 3               ; ==========================================================
002BCFr 3               ; EDITOR words
002BCFr 3               
002BCFr 3               ; This routine is used by both enter-screen and erase-screen
002BCFr 3               ; to get a buffer for the given screen number and set SCR to
002BCFr 3               ; the given screen number.  This word is not in the dictionary.
002BCFr 3               xt_editor_screen_helper:
002BCFr 3  20 rr rr                     jsr xt_dup
002BD2r 3  20 rr rr                     jsr xt_scr
002BD5r 3  20 rr rr                     jsr xt_store
002BD8r 3  20 rr rr                     jsr xt_buffer
002BDBr 3               z_editor_screen_helper:
002BDBr 3  60                           rts
002BDCr 3               
002BDCr 3               
002BDCr 3               ; ## EDITOR_ENTER_SCREEN ( scr# -- ) "Enter all lines for given screen"
002BDCr 3               ; ## "enter-screen"  auto  Tali Editor
002BDCr 3               
002BDCr 3               xt_editor_enter_screen:
002BDCr 3                               ; Set the variable SCR and get a buffer for the
002BDCr 3                               ; given screen number.
002BDCr 3  20 rr rr                     jsr xt_editor_screen_helper
002BDFr 3               
002BDFr 3                               ; Drop the buffer address.
002BDFr 3  20 rr rr                     jsr xt_drop
002BE2r 3               
002BE2r 3                               ; Overwrite the lines one at a time.
002BE2r 3  64 rr                        stz editor1
002BE4r 3               @prompt_loop:
002BE4r 3                               ; Put the current line number on the stack.
002BE4r 3  CA                           dex
002BE5r 3  CA                           dex
002BE6r 3  A5 rr                        lda editor1
002BE8r 3  95 00                        sta 0,x
002BEAr 3  74 01                        stz 1,x
002BECr 3               
002BECr 3                               ; Use the O word to prompt for overwrite.
002BECr 3  20 rr rr                     jsr xt_editor_o
002BEFr 3               
002BEFr 3                               ; Move on to the next line.
002BEFr 3  E6 rr                        inc editor1
002BF1r 3  A9 10                        lda #16
002BF3r 3  C5 rr                        cmp editor1
002BF5r 3  D0 ED                        bne @prompt_loop
002BF7r 3               
002BF7r 3               z_editor_enter_screen:
002BF7r 3  60                           rts
002BF8r 3               
002BF8r 3               
002BF8r 3               
002BF8r 3               ; ## EDITOR_ERASE_SCREEN ( scr# -- ) "Erase all lines for given screen"
002BF8r 3               ; ## "erase-screen"  tested  Tali Editor
002BF8r 3               xt_editor_erase_screen:
002BF8r 3                               ; Set the variable SCR and get a buffer for the
002BF8r 3                               ; given screen number.
002BF8r 3  20 rr rr                     jsr xt_editor_screen_helper
002BFBr 3               
002BFBr 3                               ; Put 1024 (chars/screen) on stack.
002BFBr 3  CA                           dex
002BFCr 3  CA                           dex
002BFDr 3  74 00                        stz 0,x
002BFFr 3  A9 04                        lda #4          ; 4 in MSB makes 1024 ($400).
002C01r 3  95 01                        sta 1,x
002C03r 3               
002C03r 3                               ; Erase the entire block (fill with spaces).
002C03r 3  20 rr rr                     jsr xt_blank
002C06r 3               
002C06r 3                               ; Mark buffer as updated.
002C06r 3  20 rr rr                     jsr xt_update
002C09r 3               
002C09r 3               z_editor_erase_screen:
002C09r 3  60                           rts
002C0Ar 3               
002C0Ar 3               
002C0Ar 3               ; ## EDITOR_EL ( line# -- ) "Erase the given line number"
002C0Ar 3               ; ## "el"  tested  Tali Editor
002C0Ar 3               xt_editor_el:
002C0Ar 3                               ; Turn the line number into buffer offset.
002C0Ar 3                               ; This also loads the block into the buffer if it's
002C0Ar 3                               ; not there for some reason.
002C0Ar 3  20 rr rr                     jsr xt_editor_line
002C0Dr 3               
002C0Dr 3                               ; Put 64 (# of chars/line) on the stack.
002C0Dr 3  CA                           dex
002C0Er 3  CA                           dex
002C0Fr 3  A9 40                        lda #64
002C11r 3  95 00                        sta 0,x
002C13r 3  74 01                        stz 1,x
002C15r 3               
002C15r 3                               ; Fill with spaces.
002C15r 3  20 rr rr                     jsr xt_blank
002C18r 3               
002C18r 3                               ; Mark buffer as updated.
002C18r 3  20 rr rr                     jsr xt_update
002C1Br 3               
002C1Br 3  60           z_editor_el:    rts
002C1Cr 3               
002C1Cr 3               
002C1Cr 3               ; ## EDITOR_L ( -- ) "List the current screen"
002C1Cr 3               ; ## "l"  tested  Tali Editor
002C1Cr 3               
002C1Cr 3               xt_editor_l:
002C1Cr 3                               ; Load the current screen
002C1Cr 3  CA                           dex             ; Put SCR on the stack.
002C1Dr 3  CA                           dex
002C1Er 3  A0 02                        ldy #scr_offset
002C20r 3  B1 rr                        lda (up),y
002C22r 3  95 00                        sta 0,x
002C24r 3  C8                           iny
002C25r 3  B1 rr                        lda (up),y
002C27r 3  95 01                        sta 1,x
002C29r 3  20 rr rr                     jsr xt_block    ; Get the current screen.
002C2Cr 3               
002C2Cr 3  20 rr rr                     jsr xt_cr
002C2Fr 3               
002C2Fr 3                               ; Print the screen number.
002C2Fr 3                               ; We're using sliteral, so we need to set up the
002C2Fr 3                               ; appropriate data structure (see sliteral)
002C2Fr 3  80 08                        bra @after_screen_msg
002C31r 3               
002C31r 3               @screen_msg:
002C31r 3  53 63 72 65                  .byte "Screen #"
002C35r 3  65 6E 20 23  
002C39r 3               
002C39r 3               @after_screen_msg:
002C39r 3  20 rr rr                     jsr sliteral_runtime
002C3Cr 3  rr rr 08 00                  .word @screen_msg, @after_screen_msg-@screen_msg
002C40r 3               
002C40r 3  20 rr rr                     jsr xt_type
002C43r 3               
002C43r 3                               ; Put the screen number and printed size for u.r on the stack.
002C43r 3  20 rr rr                     jsr xt_scr
002C46r 3  20 rr rr                     jsr xt_fetch
002C49r 3  CA                           dex
002C4Ar 3  CA                           dex
002C4Br 3  A9 04                        lda #4          ; four spaces
002C4Dr 3  95 00                        sta 0,x
002C4Fr 3  74 01                        stz 1,x
002C51r 3  20 rr rr                     jsr xt_u_dot_r
002C54r 3               
002C54r 3                               ; The address of the buffer is currently on the stack.
002C54r 3                               ; Print 64 chars at a time. TYPE uses tmp1, so we'll
002C54r 3                               ; keep track of the line number in tmp3.
002C54r 3  64 rr                        stz tmp3
002C56r 3               
002C56r 3               @line_loop:
002C56r 3  20 rr rr                     jsr xt_cr
002C59r 3               
002C59r 3                               ; Print the line number (2-space fixed width)
002C59r 3  CA                           dex
002C5Ar 3  CA                           dex
002C5Br 3  CA                           dex
002C5Cr 3  CA                           dex
002C5Dr 3  74 03                        stz 3,x
002C5Fr 3  A5 rr                        lda tmp3
002C61r 3  95 02                        sta 2,x
002C63r 3  74 01                        stz 1,x
002C65r 3  A9 02                        lda #2
002C67r 3  95 00                        sta 0,x
002C69r 3  20 rr rr                     jsr xt_u_dot_r
002C6Cr 3  20 rr rr                     jsr xt_space
002C6Fr 3               
002C6Fr 3                               ; Print one line using the address on the stack.
002C6Fr 3  20 rr rr                     jsr xt_dup
002C72r 3  CA                           dex
002C73r 3  CA                           dex
002C74r 3  A9 40                        lda #64
002C76r 3  95 00                        sta 0,x
002C78r 3  74 01                        stz 1,x
002C7Ar 3  20 rr rr                     jsr xt_type
002C7Dr 3               
002C7Dr 3                               ; Add 64 to the address on the stack to move to the next line.
002C7Dr 3  18                           clc
002C7Er 3  A9 40                        lda #64
002C80r 3  75 00                        adc 0,x
002C82r 3  95 00                        sta 0,x
002C84r 3  B5 01                        lda 1,x
002C86r 3  69 00                        adc #0      ; Add carry
002C88r 3  95 01                        sta 1,x
002C8Ar 3               
002C8Ar 3                               ; Increment the line number (held in tmp3)
002C8Ar 3  E6 rr                        inc tmp3
002C8Cr 3               
002C8Cr 3                               ; See if we are done.
002C8Cr 3  A5 rr                        lda tmp3
002C8Er 3  C9 10                        cmp #16
002C90r 3  D0 C4                        bne @line_loop
002C92r 3               
002C92r 3  20 rr rr                     jsr xt_cr
002C95r 3                               ; Drop the address on the stack.
002C95r 3  E8                           inx
002C96r 3  E8                           inx
002C97r 3               
002C97r 3  60           z_editor_l:            rts
002C98r 3               
002C98r 3               
002C98r 3               
002C98r 3               ; ## EDITOR_LINE ( line# -- c-addr ) "Turn a line number into address in current screen"
002C98r 3               ; ## "line"  tested  Tali Editor
002C98r 3               
002C98r 3               xt_editor_line:
002C98r 3  20 rr rr                     jsr underflow_1
002C9Br 3               
002C9Br 3                               ; Multiply the TOS by 64 (chars/line) to compute offset.
002C9Br 3  A0 06                        ldy #6          ; *64 is same as left shift 6 times.
002C9Dr 3               @shift_tos_left:
002C9Dr 3  16 00                        asl 0,x         ; Shift TOS to the left
002C9Fr 3  36 01                        rol 1,x         ; ROL brings MSb from lower byte.
002CA1r 3  88                           dey
002CA2r 3  D0 F9                        bne @shift_tos_left
002CA4r 3                               ; Load the current screen into a buffer
002CA4r 3                               ; and get the buffer address
002CA4r 3  20 rr rr                     jsr xt_scr
002CA7r 3  20 rr rr                     jsr xt_fetch
002CAAr 3  20 rr rr                     jsr xt_block
002CADr 3               
002CADr 3                               ; Add the offset to the buffer base address.
002CADr 3  20 rr rr                     jsr xt_plus
002CB0r 3               
002CB0r 3  60           z_editor_line:  rts
002CB1r 3               
002CB1r 3               
002CB1r 3               
002CB1r 3               ; ## EDITOR_O ( line# -- ) "Overwrite the given line"
002CB1r 3               ; ## "o"  tested  Tali Editor
002CB1r 3               xt_editor_o:
002CB1r 3                               ; Print prompt
002CB1r 3  20 rr rr                     jsr xt_cr
002CB4r 3  20 rr rr                     jsr xt_dup
002CB7r 3  20 rr rr                     jsr xt_two
002CBAr 3  20 rr rr                     jsr xt_u_dot_r
002CBDr 3  20 rr rr                     jsr xt_space
002CC0r 3  A9 2A                        lda #42         ; ASCII for *
002CC2r 3  20 rr rr                     jsr emit_a
002CC5r 3  20 rr rr                     jsr xt_space
002CC8r 3               
002CC8r 3                               ; Accept new input (directly into the buffer)
002CC8r 3  20 rr rr                     jsr xt_editor_line
002CCBr 3  20 rr rr                     jsr xt_dup      ; Save a copy of the line address for later.
002CCEr 3  CA                           dex
002CCFr 3  CA                           dex
002CD0r 3  A9 40                        lda #64         ; chars/line
002CD2r 3  95 00                        sta 0,x
002CD4r 3  74 01                        stz 1,x
002CD6r 3  20 rr rr                     jsr xt_accept
002CD9r 3               
002CD9r 3                               ; Fill the rest with spaces.
002CD9r 3                               ; Stack is currently ( line_address numchars_from_accept )
002CD9r 3  20 rr rr                     jsr xt_dup
002CDCr 3  20 rr rr                     jsr xt_not_rote ; -rot
002CDFr 3  20 rr rr                     jsr xt_plus
002CE2r 3  CA                           dex
002CE3r 3  CA                           dex
002CE4r 3  A9 40                        lda #64         ; chars/line
002CE6r 3  95 00                        sta 0,x
002CE8r 3  74 01                        stz 1,x
002CEAr 3  20 rr rr                     jsr xt_rot
002CEDr 3  20 rr rr                     jsr xt_minus
002CF0r 3  20 rr rr                     jsr xt_blank
002CF3r 3               
002CF3r 3                               ; Mark buffer as updated.
002CF3r 3  20 rr rr                     jsr xt_update
002CF6r 3               
002CF6r 3  60           z_editor_o:     rts
002CF7r 3               
002CF7r 3               ; ## LCDPUT ( s -- ) "Print single character to LCD"
002CF7r 3               ; ## "lcdput" coded Custom
002CF7r 3               xt_lcdput:
002CF7r 3  20 rr rr                     jsr underflow_1
002CFAr 3               
002CFAr 3  B5 00                        lda 0,x
002CFCr 3                       .ifdef lcd_print
002CFCr 3                               jsr lcd_print
002CFCr 3                       .endif
002CFCr 3  E8                           inx
002CFDr 3  E8                           inx
002CFEr 3  60           z_lcdput: rts
002CFFr 3               
002CFFr 3               
002CFFr 3               ; ## LCDPRINT ( addr u -- ) "Print string to LCD"
002CFFr 3               ; ## "lcdprint"  coded Custom
002CFFr 3               
002CFFr 3               xt_lcdprint:
002CFFr 3  20 rr rr                     jsr underflow_2
002D02r 3               
002D02r 3                               ; Save the starting address into tmp1
002D02r 3  B5 02                        lda 2,x
002D04r 3  85 rr                        sta tmp1
002D06r 3  B5 03                        lda 3,x
002D08r 3  85 rr                        sta tmp1+1
002D0Ar 3               @loop:
002D0Ar 3                               ; done if length is zero
002D0Ar 3  B5 00                        lda 0,x
002D0Cr 3  15 01                        ora 1,x
002D0Er 3  F0 12                        beq @done
002D10r 3               
002D10r 3                               ; Send the current character
002D10r 3  B2 rr                        lda (tmp1)
002D12r 3                       .ifdef lcd_print
002D12r 3                               jsr lcd_print      ; avoids stack foolery
002D12r 3                       .endif
002D12r 3                               ; Move the address along (in tmp1)
002D12r 3  E6 rr                        inc tmp1
002D14r 3  D0 02                        bne @1
002D16r 3  E6 rr                        inc tmp1+1
002D18r 3               @1:
002D18r 3                               ; Reduce the count (on the data stack)
002D18r 3  B5 00                        lda 0,x
002D1Ar 3  D0 02                        bne @2
002D1Cr 3  D6 01                        dec 1,x
002D1Er 3               @2:
002D1Er 3  D6 00                        dec 0,x
002D20r 3               
002D20r 3  80 E8                        bra @loop
002D22r 3               @done:
002D22r 3  E8                           inx
002D23r 3  E8                           inx
002D24r 3  E8                           inx
002D25r 3  E8                           inx
002D26r 3               
002D26r 3  60           z_lcdprint:         rts
002D27r 3               
002D27r 3               
002D27r 3               
002D27r 3               ; ## CLS ( -- ) "clea VGA screen"
002D27r 3               ; ## "cls" coded Custom
002D27r 3               xt_cls:
002D27r 3                       .ifdef vga_clear
002D27r 3                               jsr vga_clear
002D27r 3                       .endif
002D27r 3               
002D27r 3  60           z_cls: rts
002D28r 3               
002D28r 3               
002D28r 3               ; ## SPI_INIT ( -- ) "Init SPI system"
002D28r 3               ; ## "spi_init" coded Custom
002D28r 3               xt_spi_init:
002D28r 3                       .ifdef spi_init
002D28r 3                               jsr spi_init
002D28r 3                       .endif
002D28r 3  60           z_spi_init: rts
002D29r 3               
002D29r 3               
002D29r 3               ; ## SPI_CLK_TOGGLE ( -- ) "Toggle SPI clock"
002D29r 3               ; ## "spi_clk_toggle" coded Custom
002D29r 3               xt_spi_clk_toggle:
002D29r 3                       .ifdef spi_clk_toggle
002D29r 3                               jsr spi_clk_toggle
002D29r 3                       .endif
002D29r 3  60           z_spi_clk_toggle: rts
002D2Ar 3               
002D2Ar 3               ; ## SPI_SELECT ( s -- ) "Select SPI slave"
002D2Ar 3               ; ## "spi_select" coded Custom
002D2Ar 3               xt_spi_select:
002D2Ar 3  20 rr rr                     jsr underflow_1
002D2Dr 3               
002D2Dr 3  B5 00                        lda 0,x
002D2Fr 3                       .ifdef spi_select
002D2Fr 3                               jsr spi_select
002D2Fr 3                       .endif
002D2Fr 3  E8                           inx
002D30r 3  E8                           inx
002D31r 3  60           z_spi_select: rts
002D32r 3               
002D32r 3               ; ## SPI_TRANSCEIVE ( s -- u ) "Send and receive spi data"
002D32r 3               ; ## "spi_transceive" coded Custom
002D32r 3               xt_spi_transceive:
002D32r 3  20 rr rr                     jsr underflow_1
002D35r 3               
002D35r 3  B5 00                        lda 0,x
002D37r 3                       .ifdef spi_transceive
002D37r 3                               jsr spi_transceive
002D37r 3                       .endif
002D37r 3  95 00                        sta 0,x         ; put return value in TOS
002D39r 3  74 01                        stz 1,X         ;reset value there
002D3Br 3  60           z_spi_transceive: rts
002D3Cr 3               
002D3Cr 3               ; ## SD_INIT ( s -- u ) "Send and receive spi data"
002D3Cr 3               ; ## "spi_transceive" coded Custom
002D3Cr 3               xt_sd_init:
002D3Cr 3  20 rr rr                     jsr underflow_1
002D3Fr 3               
002D3Fr 3  B5 00                        lda 0,x
002D41r 3                       .ifdef sd_init
002D41r 3                               jsr sd_init
002D41r 3                       .endif
002D41r 3  95 00                        sta 0,x         ; put return value in TOS
002D43r 3  74 01                        stz 1,X         ;reset value there
002D45r 3  60           z_sd_init: rts
002D46r 3               
002D46r 3               ; ## SD_READSECTOR ( addr d -- u ) "Read SD sector"
002D46r 3               ; ## "sd_readsector" coded Custom
002D46r 3               xt_sd_readsector:
002D46r 3  20 rr rr                     jsr underflow_3
002D49r 3                       .ifdef sd_readsector
002D49r 3                               ; get and save storage address
002D49r 3                               lda 0,x
002D49r 3                               sta sd_buffer_address
002D49r 3                               lda 1, x
002D49r 3                               sta sd_buffer_address + 1
002D49r 3                               ; get and save sector number (32 bit number, double)
002D49r 3                               lda 2, X
002D49r 3                               sta SD_ARG + 3
002D49r 3                               lda 3, X
002D49r 3                               sta SD_ARG + 2
002D49r 3                               lda 4, X
002D49r 3                               sta SD_ARG + 1
002D49r 3                               lda 5, X
002D49r 3                               sta SD_ARG
002D49r 3                               lda #1
002D49r 3                               sta SD_CRC
002D49r 3               
002D49r 3                               jsr sd_readsector
002D49r 3                       .endif
002D49r 3  95 00                        sta 0,x         ; put return value in TOS
002D4Br 3  74 01                        stz 1,X         ;reset value there
002D4Dr 3               
002D4Dr 3  E8                           inx
002D4Er 3  E8                           inx
002D4Fr 3  E8                           inx
002D50r 3  E8                           inx
002D51r 3               
002D51r 3  60           z_sd_readsector: rts
002D52r 3               
002D52r 3               
002D52r 3               ; ## FAT32_INIT ( u -- u ) "initialize FAT32 file system on passed spi drive address"
002D52r 3               ; ## "fat32_init" coded Custom
002D52r 3               xt_fat32_init:
002D52r 3  20 rr rr                     jsr underflow_1
002D55r 3               
002D55r 3  B5 00                        lda 0,x
002D57r 3                       .ifdef sd_init
002D57r 3                               jsr sd_init
002D57r 3                               bne @error
002D57r 3                       .endif
002D57r 3                       .ifdef fat32_init
002D57r 3                               jsr fat32_init
002D57r 3                               beq @end
002D57r 3                       .endif
002D57r 3                       .ifdef fat32_openroot
002D57r 3                               ; jsr fat32_openroot
002D57r 3                               ; beq @end
002D57r 3                       .endif
002D57r 3               @error:
002D57r 3  A9 01                        lda #1
002D59r 3               @end:
002D59r 3  95 00                        sta 0,x         ; put return value in TOS
002D5Br 3  74 01                        stz 1,X         ;reset value there
002D5Dr 3  60           z_fat32_init: rts
002D5Er 3               
002D5Er 3               
002D5Er 3               ; ## FAT32_ROOT ( -- u ) "initialize FAT32 file system on passed spi drive address"
002D5Er 3               ; ## "fat32_root" coded Custom
002D5Er 3               xt_fat32_root:
002D5Er 3               
002D5Er 3  CA                   dex
002D5Fr 3  CA                   dex
002D60r 3                       .ifdef fat32_openroot
002D60r 3                               jsr fat32_openroot
002D60r 3                               beq @end
002D60r 3                       .endif
002D60r 3                       ; .ifdef fat32_readdirent
002D60r 3                       ;         jsr fat32_readdirent
002D60r 3                       ;         bcc @end
002D60r 3                       ; .endif
002D60r 3               
002D60r 3               @error:
002D60r 3  A9 01                lda #1
002D62r 3               @end:
002D62r 3               
002D62r 3  95 00                sta 0,x         ; put return value in TOS
002D64r 3  74 01                stz 1,X         ;reset value there
002D66r 3  60           z_fat32_root: rts
002D67r 3               
002D67r 3               ; ## FAT32_FIND ( addr u -- u ) "Open file from initialized fat32 FS"
002D67r 3               ; ## "fat32_find" coded Custom
002D67r 3               xt_fat32_find:
002D67r 3               .ifdef fat32_finddirent
002D67r 3               textfile:  .byte "FILE.TXT   ", 0
002D67r 3                               lda #<textfile
002D67r 3                               sta fat32_filenamepointer
002D67r 3                               lda #>textfile
002D67r 3                               sta fat32_filenamepointer+1
002D67r 3               
002D67r 3                               jsr fat32_finddirent    ; find the file from its name
002D67r 3                               bne @error
002D67r 3               
002D67r 3                               jsr fat32_file_read
002D67r 3                               bne @error
002D67r 3                               dex
002D67r 3                               dex
002D67r 3                               lda sd_buffer_address
002D67r 3                               sta 0,x
002D67r 3                               lda sd_buffer_address+1
002D67r 3                               sta 1, x
002D67r 3               ;                 phy
002D67r 3               ;         ldy #0
002D67r 3               ; @printloop:
002D67r 3               ;         lda (sd_buffer_address),y
002D67r 3               ;         beq @ex
002D67r 3               ;         jsr kernel_putc
002D67r 3               ; @ex:
002D67r 3               ;         ply
002D67r 3                       jmp @end
002D67r 3               
002D67r 3                               jmp @end
002D67r 3               
002D67r 3                               jsr underflow_2
002D67r 3                               phy
002D67r 3                               ldy 0,x ; length of string
002D67r 3                               lda #0
002D67r 3               @reset_loop:
002D67r 3                           .ifdef fat32_finddirent
002D67r 3                               sta (fat32_filenamepointer),y
002D67r 3                               iny
002D67r 3                               cpy #11
002D67r 3                               bcc @reset_loop
002D67r 3                           .endif
002D67r 3                               inx     ; get address
002D67r 3                               inx
002D67r 3                           .ifdef fat32_finddirent
002D67r 3                               lda 0,x
002D67r 3                               sta fat32_filenamepointer
002D67r 3                               lda 1,x
002D67r 3                               sta fat32_filenamepointer+1
002D67r 3                           .endif
002D67r 3               
002D67r 3                               ply
002D67r 3                           .ifdef fat32_finddirent
002D67r 3                               jsr fat32_finddirent    ; find the file from its name
002D67r 3                               beq @end
002D67r 3                           .endif
002D67r 3               .endif
002D67r 3               @error:
002D67r 3  A9 01                        lda #1
002D69r 3               @end:
002D69r 3  95 00                        sta 0,x         ; put return value in TOS
002D6Br 3  74 01                        stz 1,X         ;reset value there
002D6Dr 3  60           z_fat32_find: rts
002D6Er 3               
002D6Er 3               ; ## time ( -- addr ) "get time storage address"
002D6Er 3               ; ## "time" coded Custom
002D6Er 3               xt_time:
002D6Er 3                       .ifdef time
002D6Er 3  A9 rr                lda #time
002D70r 3                       .else
002D70r 3                       lda #0
002D70r 3                       .endif
002D70r 3  CA                   dex
002D71r 3  CA                   dex
002D72r 3  95 00                sta 0,x
002D74r 3  74 01                stz 1,x
002D76r 3               
002D76r 3               
002D76r 3  60           z_time: rts
002D77r 3               
002D77r 3               xt_cf_init:
002D77r 3               .ifdef cf_init
002D77r 3                       ; jsr underflow_1
002D77r 3                       ; save CF card address
002D77r 3                       ; lda 0, x
002D77r 3                       ; sta CF_ADDRESS
002D77r 3                       ; lda 1, x
002D77r 3                       ; sta CF_ADDRESS + 1
002D77r 3  20 rr rr             jsr cf_init
002D7Ar 3                       ; inx
002D7Ar 3                       ; inx
002D7Ar 3               .endif
002D7Ar 3               z_cf_init:
002D7Ar 3  60                   rts
002D7Br 3               
002D7Br 3               ; ## cf_fat_init ( addr -- ) "Initialize FAT16 on CF card at specified address"
002D7Br 3               ; ## "cf_fat_init" coded Custom
002D7Br 3               xt_cf_fat_init:
002D7Br 3               check_fat_sector_signature:
002D7Br 3               
002D7Br 3               .ifdef cf_init
002D7Br 3                       ; jsr underflow_1
002D7Br 3                       ; save CF card address
002D7Br 3                       ; lda 0, x
002D7Br 3                       ; sta CF_ADDRESS
002D7Br 3                       ; lda 1, x
002D7Br 3                       ; sta CF_ADDRESS + 1
002D7Br 3               
002D7Br 3                       ; initialize CF card
002D7Br 3  20 rr rr             jsr cf_init
002D7Er 3                       ; prepare to read first sector
002D7Er 3  9C rr rr             stz CF_LBA
002D81r 3  9C rr rr             stz CF_LBA + 1
002D84r 3  9C rr rr             stz CF_LBA + 2
002D87r 3  9C rr rr             stz CF_LBA + 3
002D8Ar 3               
002D8Ar 3               
002D8Ar 3                       ; LBA is set, now read sector
002D8Ar 3  20 rr rr             jsr cf_read_sector
002D8Dr 3                       ; we now have the first sector in FAT_BUFFER
002D8Dr 3               .ifdef check_fat_sector_signature
002D8Dr 3                       ; check signature
002D8Dr 3  AD rr rr             lda FAT_BUFFER + $1FE
002D90r 3  C9 55                cmp #$55
002D92r 3  D0 07                bne @sigerr
002D94r 3  AD rr rr             lda FAT_BUFFER + $1FF
002D97r 3  C9 AA                cmp #$AA
002D99r 3  F0 03                beq @sigok
002D9Br 3               @sigerr:
002D9Br 3  4C rr rr             jmp cf_fat_init_error
002D9Er 3               @sigok:
002D9Er 3               .endif
002D9Er 3                       ; check if this is MBR or FAT start sector
002D9Er 3  AD rr rr             lda FAT_BUFFER + 54
002DA1r 3  C9 46                cmp #'F'
002DA3r 3  D0 10                bne @read_fat_sector
002DA5r 3  AD rr rr             lda FAT_BUFFER + 55
002DA8r 3  C9 41                cmp #'A'
002DAAr 3  D0 09                bne @read_fat_sector
002DACr 3  AD rr rr             lda FAT_BUFFER + 56
002DAFr 3  C9 54                cmp #'T'
002DB1r 3  D0 02                bne @read_fat_sector
002DB3r 3               
002DB3r 3  80 38                bra @is_fat_sector
002DB5r 3               
002DB5r 3               @read_fat_sector:
002DB5r 3               
002DB5r 3                       ; read FAT start sector
002DB5r 3                       ; and save to sector address to read
002DB5r 3  AD rr rr             lda FAT_BUFFER + 454
002DB8r 3  8D rr rr             sta CF_LBA
002DBBr 3  8D rr rr             sta CF_PART_START
002DBEr 3  AD rr rr             lda FAT_BUFFER + 455
002DC1r 3  8D rr rr             sta CF_LBA + 1
002DC4r 3  8D rr rr             sta CF_PART_START + 1
002DC7r 3  AD rr rr             lda FAT_BUFFER + 456
002DCAr 3  8D rr rr             sta CF_LBA + 2
002DCDr 3  8D rr rr             sta CF_PART_START + 2
002DD0r 3  AD rr rr             lda FAT_BUFFER + 457
002DD3r 3  8D rr rr             sta CF_LBA + 3
002DD6r 3  8D rr rr             sta CF_PART_START + 3
002DD9r 3               
002DD9r 3                       ; LBA is set, now read sector
002DD9r 3  20 rr rr             jsr cf_read_sector
002DDCr 3                       ; We now have the FAT start sector in the buffer
002DDCr 3               .ifdef check_fat_sector_signature
002DDCr 3                       ; check signature
002DDCr 3  AD rr rr             lda FAT_BUFFER + $1FE
002DDFr 3  C9 55                cmp #$55
002DE1r 3  D0 07                bne @sigerr2
002DE3r 3  AD rr rr             lda FAT_BUFFER + $1FF
002DE6r 3  C9 AA                cmp #$AA
002DE8r 3  F0 03                beq @is_fat_sector
002DEAr 3               @sigerr2:
002DEAr 3  4C rr rr             jmp cf_fat_init_error2
002DEDr 3               @is_fat_sector:
002DEDr 3               .endif
002DEDr 3                       ; Check if its partition first sector
002DEDr 3  AD rr rr             lda FAT_BUFFER + 54
002DF0r 3  C9 46                cmp #'F'
002DF2r 3  D0 F6                bne @sigerr2
002DF4r 3  AD rr rr             lda FAT_BUFFER + 55
002DF7r 3  C9 41                cmp #'A'
002DF9r 3  D0 EF                bne @sigerr2
002DFBr 3  AD rr rr             lda FAT_BUFFER + 56
002DFEr 3  C9 54                cmp #'T'
002E00r 3  D0 E8                bne @sigerr2
002E02r 3                       ; Save FAT sectors count
002E02r 3  AD rr rr 8D          cp16 FAT_BUFFER + 22, CF_FAT_SEC_CNT
002E06r 3  rr rr AD rr  
002E0Ar 3  rr 8D rr rr  
002E0Er 3                       ; Get the sectors per cluster
002E0Er 3  AD rr rr             lda FAT_BUFFER + 13
002E11r 3  8D rr rr             sta CF_SEC_PER_CLUS
002E14r 3                       ; get the number of directory entries in the root directory
002E14r 3  AD rr rr 8D          cp16 FAT_BUFFER + 17, CF_ROOT_ENT_CNT
002E18r 3  rr rr AD rr  
002E1Cr 3  rr 8D rr rr  
002E20r 3               
002E20r 3                       ;($600 * 32 + 511) / 512
002E20r 3                       ; RootDirSectors = ((BPB_RootEntCnt * 32) + (BPB_BytsPerSec – 1)) / BPB_BytsPerSec;
002E20r 3  AD rr rr 8D          cp16 CF_ROOT_ENT_CNT, CF_ROOT_DIR_SECS
002E24r 3  rr rr AD rr  
002E28r 3  rr 8D rr rr  
002E2Cr 3                       ; multiply by 32
002E2Cr 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002E30r 3  rr rr        
002E32r 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002E36r 3  rr rr        
002E38r 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002E3Cr 3  rr rr        
002E3Er 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002E42r 3  rr rr        
002E44r 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002E48r 3  rr rr        
002E4Ar 3                       ; add 512
002E4Ar 3  EE rr rr             inc CF_ROOT_DIR_SECS+1
002E4Dr 3  EE rr rr             inc CF_ROOT_DIR_SECS+1
002E50r 3                       ; subtract 1
002E50r 3  AD rr rr D0          dec16 CF_ROOT_DIR_SECS
002E54r 3  03 CE rr rr  
002E58r 3  CE rr rr     
002E5Br 3                       ; divide by 512
002E5Br 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002E5Fr 3  rr rr        
002E61r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002E65r 3  rr rr        
002E67r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002E6Br 3  rr rr        
002E6Dr 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002E71r 3  rr rr        
002E73r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002E77r 3  rr rr        
002E79r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002E7Dr 3  rr rr        
002E7Fr 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002E83r 3  rr rr        
002E85r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002E89r 3  rr rr        
002E8Br 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002E8Fr 3  rr rr        
002E91r 3               
002E91r 3                       ; FirstRootDirSecNum = BPB_ResvdSecCnt + (BPB_NumFATs * BPB_FATSz16) + FAT_PART_START;
002E91r 3                       ; CF_FIRST_ROOT_SEC = 1 + 2*CF_FAT_SEC_CNT + FAT_PART_START
002E91r 3               
002E91r 3               
002E91r 3  AD rr rr 8D          cp16 CF_FAT_SEC_CNT, CF_FIRST_ROOT_SEC
002E95r 3  rr rr AD rr  
002E99r 3  rr 8D rr rr  
002E9Dr 3  0E rr rr 2E          asl16 CF_FIRST_ROOT_SEC
002EA1r 3  rr rr        
002EA3r 3  EE rr rr D0          inc16 CF_FIRST_ROOT_SEC
002EA7r 3  03 EE rr rr  
002EABr 3  18 AD rr rr          add16 CF_FIRST_ROOT_SEC, CF_PART_START, CF_FIRST_ROOT_SEC
002EAFr 3  6D rr rr 8D  
002EB3r 3  rr rr AD rr  
002EBEr 3               
002EBEr 3  AD rr rr 8D          cp16 CF_FIRST_ROOT_SEC, CF_CURRENT_DIR_SEC
002EC2r 3  rr rr AD rr  
002EC6r 3  rr 8D rr rr  
002ECAr 3               
002ECAr 3                       ; FirstDataSector = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors;
002ECAr 3                       ; CF_FIRST_DATA_SEC = 1 + 2*CF_FAT_SEC_CNT + CF_ROOT_DIR_SECS
002ECAr 3  18 AD rr rr          add16 CF_FIRST_ROOT_SEC, CF_ROOT_DIR_SECS, CF_FIRST_DATA_SEC
002ECEr 3  6D rr rr 8D  
002ED2r 3  rr rr AD rr  
002EDDr 3               
002EDDr 3                       ; print volume label
002EDDr 3  AD rr rr 20          printstr FAT_BUFFER + 43, 11
002EE1r 3  rr rr AD rr  
002EE5r 3  rr 20 rr rr  
002F1Fr 3                       ; printascii cf_fat_mounted_message
002F1Fr 3                       ; jsr xt_cr
002F1Fr 3               
002F1Fr 3               cf_fat_init_exit:
002F1Fr 3  CA                   dex
002F20r 3  CA                   dex
002F21r 3  A9 rr                lda #<CF_LBA
002F23r 3  95 00                sta 0, x
002F25r 3  A9 rr                lda #>CF_LBA
002F27r 3  95 01                sta 1, x
002F29r 3               
002F29r 3               .endif
002F29r 3               z_cf_fat_init:
002F29r 3  60                   rts
002F2Ar 3               
002F2Ar 3               cf_fat_init_error:
002F2Ar 3  DA A2 00 BD          printascii cf_fat_mounted_error1
002F2Er 3  rr rr F0 06  
002F32r 3  20 rr rr E8  
002F39r 3  20 rr rr             jsr xt_cr
002F3Cr 3  4C rr rr             jmp xt_abort
002F3Fr 3               cf_fat_init_error2:
002F3Fr 3  DA A2 00 BD          printascii cf_fat_mounted_error2
002F43r 3  rr rr F0 06  
002F47r 3  20 rr rr E8  
002F4Er 3  20 rr rr             jsr xt_cr
002F51r 3  4C rr rr             jmp xt_abort
002F54r 3               
002F54r 3               cf_fat_mounted_error1:
002F54r 3  45 72 72 6F          .asciiz "Error reading boot sector"
002F58r 3  72 20 72 65  
002F5Cr 3  61 64 69 6E  
002F6Er 3               cf_fat_mounted_error2:
002F6Er 3  45 72 72 6F          .asciiz "Error reading FAT sector"
002F72r 3  72 20 72 65  
002F76r 3  61 64 69 6E  
002F87r 3  20 00        fat_entry_size: .byte $20, 0
002F89r 3               
002F89r 3               ls_header:
002F89r 3  4E 41 4D 45          .asciiz "NAME     EXT  TYPE  SIZE"
002F8Dr 3  20 20 20 20  
002F91r 3  20 45 58 54  
002FA2r 3               xt_cf_ls:
002FA2r 3               .ifdef cf_init
002FA2r 3                       ; read the current directory entry
002FA2r 3                       ; and save the contents to be displayed later
002FA2r 3               
002FA2r 3                       ; check if fat is inited
002FA2r 3  AD rr rr             lda CF_SEC_PER_CLUS
002FA5r 3  D0 08                bne @fatok
002FA7r 3  20 rr rr             jsr xt_cf_fat_init
002FAAr 3  E8                   inx     ; drop fat_init return value
002FABr 3  E8                   inx
002FACr 3  20 rr rr             jsr xt_cr
002FAFr 3               
002FAFr 3               @fatok:
002FAFr 3  AD rr rr 8D          cp16 CF_CURRENT_DIR_SEC, CF_LBA
002FB3r 3  rr rr AD rr  
002FB7r 3  rr 8D rr rr  
002FBBr 3  9C rr rr             stz CF_LBA + 2
002FBEr 3  9C rr rr             stz CF_LBA + 3
002FC1r 3  20 rr rr             jsr cf_read_sector
002FC4r 3               
002FC4r 3                       ; current directory first sector is now in buffer
002FC4r 3                       ; display file names
002FC4r 3  20 rr rr             jsr xt_cr
002FC7r 3  DA A2 00 BD          printascii ls_header
002FCBr 3  rr rr F0 06  
002FCFr 3  20 rr rr E8  
002FD6r 3  20 rr rr             jsr xt_cr
002FD9r 3               
002FD9r 3  A9 rr                lda #<FAT_BUFFER
002FDBr 3  85 rr                sta editor3
002FDDr 3  A9 rr                lda #>FAT_BUFFER
002FDFr 3  85 rr                sta editor3 + 1
002FE1r 3               
002FE1r 3  5A                   phy
002FE2r 3               @outerloop:
002FE2r 3  A0 0B                ldy #11
002FE4r 3  B1 rr                lda (editor3), y
002FE6r 3  C9 0F                cmp #$0F                ; ignore long filenames
002FE8r 3  F0 2A                beq @next_entry
002FEAr 3  A0 00                ldy #0
002FECr 3  B1 rr                lda (editor3), Y
002FEEr 3  F0 35                beq @exit               ; if zero, it means we reached the end of the list
002FF0r 3  C9 E5                cmp #$E5                ; if $E5, it means the entry is deleted, so go to next entry
002FF2r 3  F0 20                beq @next_entry
002FF4r 3               @loop:
002FF4r 3  B1 rr                lda (editor3), y
002FF6r 3  20 rr rr             jsr emit_a
002FF9r 3  C8                   iny
002FFAr 3  C0 08                cpy #8
002FFCr 3  D0 05                bne @check_end          ; print space after name and before extension
002FFEr 3  A9 20                lda #' '
003000r 3  20 rr rr             jsr emit_a
003003r 3               @check_end:
003003r 3  C0 0B                cpy #11
003005r 3  90 ED                bcc @loop
003007r 3                       ; read entry type
003007r 3  B1 rr                lda (editor3), y
003009r 3  20 rr rr             jsr print_entry_type
00300Cr 3               
00300Cr 3  20 rr rr             jsr print_entry_size
00300Fr 3  A9 0D                lda #$0D
003011r 3  20 rr rr             jsr emit_a
003014r 3               @next_entry:
003014r 3  18 A5 rr 6D          add16 editor3, fat_entry_size, editor3
003018r 3  rr rr 85 rr  
00301Cr 3  A5 rr 6D rr  
003023r 3  80 BD                bra @outerloop
003025r 3               @exit:
003025r 3  7A                   ply
003026r 3               .endif
003026r 3               
003026r 3                       ; dex
003026r 3                       ; dex
003026r 3                       ; lda #<FAT_BUFFER
003026r 3                       ; sta 0, x
003026r 3                       ; lda #>FAT_BUFFER
003026r 3                       ; sta 1, x
003026r 3               
003026r 3               z_cf_ls:
003026r 3  60                   rts
003027r 3               
003027r 3               print_entry_size:
003027r 3  5A                   phy
003028r 3               
003028r 3  CA                   dex
003029r 3  CA                   dex
00302Ar 3  CA                   dex
00302Br 3  CA                   dex
00302Cr 3               
00302Cr 3  A0 1C                ldy #28
00302Er 3  B1 rr                lda (editor3), y
003030r 3  95 02                sta 2,x
003032r 3  A0 1D                ldy #29
003034r 3  B1 rr                lda (editor3), y
003036r 3  95 03                sta 3,x
003038r 3               
003038r 3  A0 1E                ldy #30
00303Ar 3  B1 rr                lda (editor3), y
00303Cr 3  95 00                sta 0,x
00303Er 3               
00303Er 3  A0 1F                ldy #31
003040r 3  B1 rr                lda (editor3), y
003042r 3  95 01                sta 1,x
003044r 3  20 rr rr             jsr xt_ud_dot
003047r 3  7A                   ply
003048r 3  60                   rts
003049r 3               
003049r 3               print_entry_type:
003049r 3  29 10                and #$10
00304Br 3  D0 02                bne @is_dir
00304Dr 3  80 11                bra @is_file
00304Fr 3               @is_dir:
00304Fr 3  DA A2 00 BD          printascii entry_type_dir
003053r 3  rr rr F0 06  
003057r 3  20 rr rr E8  
00305Er 3  80 0F                bra @exit
003060r 3               @is_file:
003060r 3  DA A2 00 BD          printascii entry_type_file
003064r 3  rr rr F0 06  
003068r 3  20 rr rr E8  
00306Fr 3               @exit:
00306Fr 3  60                   rts
003070r 3               
003070r 3  20 20 20 44  entry_type_dir: .asciiz "   D    "
003074r 3  20 20 20 20  
003078r 3  00           
003079r 3  20 20 20 46  entry_type_file: .asciiz "   F    "
00307Dr 3  20 20 20 20  
003081r 3  00           
003082r 3               
003082r 3               xt_cf_info:
003082r 3               .ifdef cf_init
003082r 3  20 rr rr             jsr cf_init
003085r 3  20 rr rr             jsr cf_wait
003088r 3  A9 EC                lda #$EC
00308Ar 3  8D D7 FF             sta CF_ADDRESS + 7
00308Dr 3  CA                   dex
00308Er 3  CA                   dex
00308Fr 3  A9 rr                lda #<FAT_BUFFER
003091r 3  95 00                sta 0, x
003093r 3  A9 rr                lda #>FAT_BUFFER
003095r 3  95 01                sta 1, x
003097r 3  20 rr rr             jsr cf_read
00309Ar 3               
00309Ar 3               .endif
00309Ar 3               z_cf_info:
00309Ar 3  60                   rts
00309Br 3               
00309Br 3               xt_cf_cd:
00309Br 3  B5 00                lda 0, x
00309Dr 3  85 rr                sta editor2
00309Fr 3  B5 01                lda 1, x
0030A1r 3  85 rr                sta editor2 + 1
0030A3r 3  B5 02                lda 2, x
0030A5r 3  85 rr                sta editor3
0030A7r 3  B5 03                lda 3, x
0030A9r 3  85 rr                sta editor3+1
0030ABr 3               
0030ABr 3  20 rr rr             jsr fat_convert_filename
0030AEr 3               z_cf_cd:
0030AEr 3  E8                   inx
0030AFr 3  E8                   inx
0030B0r 3  A9 rr                lda #<FAT_FILE_NAME_TMP
0030B2r 3  95 00                sta 0, x
0030B4r 3  A9 rr                lda #>FAT_FILE_NAME_TMP
0030B6r 3  95 01                sta 1, x
0030B8r 3  60                   rts
0030B9r 3               
0030B9r 3               ; ## cf_readsector ( double -- addr ) "Set LBA block and read to buffer"
0030B9r 3               ; ## "cf_readsector" coded Custom
0030B9r 3               xt_cf_readsector:
0030B9r 3               .ifdef cf_init
0030B9r 3  20 rr rr             jsr underflow_2
0030BCr 3                       ; most significant part is TOS
0030BCr 3  B5 00                lda 0, x
0030BEr 3  8D rr rr             sta CF_LBA + 2
0030C1r 3  B5 01                lda 1, x
0030C3r 3  8D rr rr             sta CF_LBA + 3
0030C6r 3                       ; least significant part is NOS
0030C6r 3  B5 02                lda 2, x
0030C8r 3  8D rr rr             sta CF_LBA + 0
0030CBr 3  B5 03                lda 3, x
0030CDr 3  8D rr rr             sta CF_LBA + 1
0030D0r 3                       ; LBA is set, now read sector
0030D0r 3  20 rr rr             jsr cf_init
0030D3r 3               
0030D3r 3  A9 rr                lda #<FAT_BUFFER
0030D5r 3  95 02                sta 2, x
0030D7r 3               
0030D7r 3  A9 rr                lda #>FAT_BUFFER
0030D9r 3               
0030D9r 3  95 03                sta 3, x
0030DBr 3               
0030DBr 3  20 rr rr             jsr cf_read_sector
0030DEr 3               
0030DEr 3                       ; return buffer address
0030DEr 3  E8                   inx
0030DFr 3  E8                   inx
0030E0r 3               .endif
0030E0r 3               z_cf_readsector:
0030E0r 3  60                   rts
0030E1r 3               
0030E1r 3               
0030E1r 3               
0030E1r 3               ; END
0030E1r 3               
0030E1r 3               
0030E1r 2                   .include "headers.s"          ; Headers of native words
0030E1r 3               ; Dictionary Headers for Tali Forth 2
0030E1r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0030E1r 3               ; First version: 05. Dec 2016 (Liara Forth)
0030E1r 3               ; This version: 29. Dec 2018
0030E1r 3               
0030E1r 3               ; Dictionary headers are kept separately from the code, which allows various
0030E1r 3               ; tricks in the code. We roughly follow the Gforth terminology: The Execution
0030E1r 3               ; Token (xt) is the address of the first byte of a word's code that can be, uh,
0030E1r 3               ; executed; the Name Token (nt) is a pointer to the beginning of the word's
0030E1r 3               ; header in the Dictionary. There the link to the next word in the Dictionary
0030E1r 3               ; is always one cell down from the current word's own nt. In the code itself,
0030E1r 3               ; we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.
0030E1r 3               
0030E1r 3               ; This gives us the following header structure:
0030E1r 3               
0030E1r 3               ;              8 bit     8 bit
0030E1r 3               ;               LSB       MSB
0030E1r 3               ; nt_word ->  +--------+--------+
0030E1r 3               ;          +0 | Length | Status |
0030E1r 3               ;             +--------+--------+
0030E1r 3               ;          +2 | Next Header     | -> nt_next_word
0030E1r 3               ;             +-----------------+
0030E1r 3               ;          +4 | Start of Code   | -> xt_word
0030E1r 3               ;             +-----------------+
0030E1r 3               ;          +6 | End of Code     | -> z_word
0030E1r 3               ;             +--------+--------+
0030E1r 3               ;          +8 | Name   |        |
0030E1r 3               ;             +--------+--------+
0030E1r 3               ;             |        |        |
0030E1r 3               ;             +--------+--------+
0030E1r 3               ;             |        |  ...   | (name string does not end with a zero)
0030E1r 3               ;          +n +--------+--------+
0030E1r 3               
0030E1r 3               ; The Status Byte is created by adding the flags defined in definitions.asm,
0030E1r 3               ; which are:
0030E1r 3               
0030E1r 3               ;       CO - Compile Only
0030E1r 3               ;       IM - Immediate Word
0030E1r 3               ;       NN - Never Native Compile (must always be called by JSR)
0030E1r 3               ;       AN - Always Native Compile (may not be called by JSR)
0030E1r 3               ;       UF - Contains underflow check
0030E1r 3               ;       HC - Has CFA (words created by CREATE and DOES> only)
0030E1r 3               
0030E1r 3               ; Note there are currently two bits unused.
0030E1r 3               
0030E1r 3               ; By default, all existing words can be natively compiled (compiled inline) or
0030E1r 3               ; as a subroutine jump target; the system decides which variant to use based on
0030E1r 3               ; a threshold the user can set. By default, all user-created words are flagged
0030E1r 3               ; never-native. The user can override this by using the always-native word
0030E1r 3               ; just after defining their new word.  The NN flag forbids native compiling,
0030E1r 3               ; the AN flag forces it.
0030E1r 3               
0030E1r 3               ; The last word (top word in code) is always BYE. It is marked as the last word
0030E1r 3               ; by its value of 0000 in its Next Header field. The words are sorted with the
0030E1r 3               ; more common ones first (further down in code) so they are found earlier.
0030E1r 3               ; Anything to do with output comes later (further up) because things will
0030E1r 3               ; always be slow if there is a human involved.
0030E1r 3               
0030E1r 3               ; The initial skeleton of this list was automatically generated by a script
0030E1r 3               ; in the tools folder and then sorted by hand.
0030E1r 3               
0030E1r 3               nt_bye:
0030E1r 3  03                   .byte 3         ; length of word strings
0030E2r 3  00                   .byte 0         ; status byte
0030E3r 3  00 00                .word 0000      ; next word in Dictionary, 0000 signals end
0030E5r 3  rr rr                .word xt_bye    ; start of code block (xt of this word)
0030E7r 3  rr rr                .word z_bye     ; end of code (RTS)
0030E9r 3  62 79 65             .byte "bye"     ; word name, always lower case, not zero-terminated
0030ECr 3               
0030ECr 3               
0030ECr 3               nt_cold:
0030ECr 3  04 00                .byte 4, 0
0030EEr 3  rr rr rr rr          .word nt_bye, xt_cold, z_cold
0030F2r 3  rr rr        
0030F4r 3  63 6F 6C 64          .byte "cold"
0030F8r 3               
0030F8r 3               nt_lcdput:
0030F8r 3  06 10                .byte 6, UF
0030FAr 3  rr rr rr rr          .word nt_cold, xt_lcdput, z_lcdput
0030FEr 3  rr rr        
003100r 3  6C 63 64 70          .byte "lcdput"
003104r 3  75 74        
003106r 3               
003106r 3               nt_lcdprint:
003106r 3  08 10                .byte 8, UF
003108r 3  rr rr rr rr          .word nt_lcdput, xt_lcdprint, z_lcdprint
00310Cr 3  rr rr        
00310Er 3  6C 63 64 70          .byte "lcdprint"
003112r 3  72 69 6E 74  
003116r 3               
003116r 3               nt_cls:
003116r 3  03 00                .byte 3, 0
003118r 3  rr rr rr rr          .word nt_lcdprint, xt_cls, z_cls
00311Cr 3  rr rr        
00311Er 3  63 6C 73             .byte "cls"
003121r 3               
003121r 3               .ifdef spi_init
003121r 3               nt_spi_init:
003121r 3                       .byte 8, 0
003121r 3                       .word nt_cls, xt_spi_init, z_spi_init
003121r 3                       .byte "spi_init"
003121r 3               
003121r 3               
003121r 3               nt_spi_clk_toggle:
003121r 3                       .byte 14, 0
003121r 3                       .word nt_spi_init, xt_spi_clk_toggle, z_spi_clk_toggle
003121r 3                       .byte "spi_clk_toggle"
003121r 3               
003121r 3               nt_spi_select:
003121r 3                       .byte 10, 0
003121r 3                       .word nt_spi_clk_toggle, xt_spi_select, z_spi_select
003121r 3                       .byte "spi_select"
003121r 3               
003121r 3               nt_spi_transceive:
003121r 3                       .byte 14, 0
003121r 3                       .word nt_spi_select, xt_spi_transceive, z_spi_transceive
003121r 3                       .byte "spi_transceive"
003121r 3               
003121r 3               nt_sd_init:
003121r 3                       .byte 7, 0
003121r 3                       .word nt_spi_transceive, xt_sd_init, z_sd_init
003121r 3                       .byte "sd_init"
003121r 3               
003121r 3               .else
003121r 3               nt_sd_init:
003121r 3  07 00                .byte 7, 0
003123r 3  rr rr rr rr          .word nt_cls, xt_sd_init, z_sd_init
003127r 3  rr rr        
003129r 3  73 64 5F 69          .byte "sd_init"
00312Dr 3  6E 69 74     
003130r 3               .endif
003130r 3               
003130r 3               nt_cf_rs:
003130r 3  02 00                .byte 2, 0
003132r 3  rr rr rr rr          .word nt_sd_init, xt_cf_readsector, z_cf_readsector
003136r 3  rr rr        
003138r 3  72 73                .byte "rs"
00313Ar 3               
00313Ar 3               nt_cf_fat_init:
00313Ar 3  03 00                .byte 3, 0
00313Cr 3  rr rr rr rr          .word nt_cf_rs, xt_cf_fat_init, z_cf_fat_init
003140r 3  rr rr        
003142r 3  66 61 74             .byte "fat"
003145r 3               nt_cf_info:
003145r 3  04 00                .byte 4, 0
003147r 3  rr rr rr rr          .word nt_cf_fat_init, xt_cf_info, z_cf_info
00314Br 3  rr rr        
00314Dr 3  69 6E 66 6F          .byte "info"
003151r 3               nt_cf_ls:
003151r 3  02 00                .byte 2, 0
003153r 3  rr rr rr rr          .word nt_cf_info, xt_cf_ls, z_cf_ls
003157r 3  rr rr        
003159r 3  6C 73                .byte "ls"
00315Br 3               
00315Br 3               nt_cf_cd:
00315Br 3  02 00                .byte 2, 0
00315Dr 3  rr rr rr rr          .word nt_cf_ls, xt_cf_cd, z_cf_cd
003161r 3  rr rr        
003163r 3  63 64                .byte "cd"
003165r 3               
003165r 3               nt_sd_readsector:
003165r 3  0D 00                .byte 13, 0
003167r 3  rr rr rr rr          .word nt_cf_cd, xt_sd_readsector, z_sd_readsector
00316Br 3  rr rr        
00316Dr 3  73 64 5F 72          .byte "sd_readsector"
003171r 3  65 61 64 73  
003175r 3  65 63 74 6F  
00317Ar 3               
00317Ar 3               
00317Ar 3               nt_fat32_init:
00317Ar 3  0A 00                .byte 10, 0
00317Cr 3  rr rr rr rr          .word nt_sd_readsector, xt_fat32_init, z_fat32_init
003180r 3  rr rr        
003182r 3  66 61 74 33          .byte "fat32_init"
003186r 3  32 5F 69 6E  
00318Ar 3  69 74        
00318Cr 3               
00318Cr 3               nt_fat32_root:
00318Cr 3  0A 00                .byte 10, 0
00318Er 3  rr rr rr rr          .word nt_fat32_init, xt_fat32_root, z_fat32_root
003192r 3  rr rr        
003194r 3  66 61 74 33          .byte "fat32_root"
003198r 3  32 5F 72 6F  
00319Cr 3  6F 74        
00319Er 3               
00319Er 3               nt_fat32_find:
00319Er 3  0A 00                .byte 10, 0
0031A0r 3  rr rr rr rr          .word nt_fat32_root, xt_fat32_find, z_fat32_find
0031A4r 3  rr rr        
0031A6r 3  66 61 74 33          .byte "fat32_find"
0031AAr 3  32 5F 66 69  
0031AEr 3  6E 64        
0031B0r 3               
0031B0r 3               nt_time:
0031B0r 3  04 00                .byte 4, 0
0031B2r 3  rr rr rr rr          .word nt_fat32_find, xt_time, z_time
0031B6r 3  rr rr        
0031B8r 3  74 69 6D 65          .byte "time"
0031BCr 3               
0031BCr 3               nt_ed:                  ; ed6502
0031BCr 3  02 08                .byte 2, NN
0031BEr 3  rr rr rr rr          .word nt_time, xt_ed, z_ed
0031C2r 3  rr rr        
0031C4r 3  65 64                .byte "ed"
0031C6r 3               
0031C6r 3  03 08        nt_see: .byte 3, NN
0031C8r 3  rr rr rr rr          .word nt_ed, xt_see, z_see
0031CCr 3  rr rr        
0031CEr 3  73 65 65             .byte "see"
0031D1r 3               
0031D1r 3               nt_forth:
0031D1r 3  05 00                .byte 5, 0
0031D3r 3  rr rr rr rr          .word nt_see, xt_forth, z_forth
0031D7r 3  rr rr        
0031D9r 3  66 6F 72 74          .byte "forth"
0031DDr 3  68           
0031DEr 3               
0031DEr 3               nt_order:
0031DEr 3  05 00                .byte 5, 0
0031E0r 3  rr rr rr rr          .word nt_forth, xt_order, z_order
0031E4r 3  rr rr        
0031E6r 3  6F 72 64 65          .byte "order"
0031EAr 3  72           
0031EBr 3               
0031EBr 3               nt_to_order:
0031EBr 3  06 00                .byte 6, 0
0031EDr 3  rr rr rr rr          .word nt_order, xt_to_order, z_to_order
0031F1r 3  rr rr        
0031F3r 3  3E 6F 72 64          .byte ">order"
0031F7r 3  65 72        
0031F9r 3               
0031F9r 3               nt_previous:
0031F9r 3  08 00                .byte 8, 0
0031FBr 3  rr rr rr rr          .word nt_to_order, xt_previous, z_previous
0031FFr 3  rr rr        
003201r 3  70 72 65 76          .byte "previous"
003205r 3  69 6F 75 73  
003209r 3               
003209r 3               nt_also:
003209r 3  04 00                .byte 4, 0
00320Br 3  rr rr rr rr          .word nt_previous, xt_also, z_also
00320Fr 3  rr rr        
003211r 3  61 6C 73 6F          .byte "also"
003215r 3               
003215r 3               nt_only:
003215r 3  04 00                .byte 4, 0
003217r 3  rr rr rr rr          .word nt_also, xt_only, z_only
00321Br 3  rr rr        
00321Dr 3  6F 6E 6C 79          .byte "only"
003221r 3               
003221r 3               nt_forth_wordlist:      ; shares code with ZERO
003221r 3  0E 00                .byte 14, 0
003223r 3  rr rr rr rr          .word nt_only, xt_forth_wordlist, z_forth_wordlist
003227r 3  rr rr        
003229r 3  66 6F 72 74          .byte "forth-wordlist"
00322Dr 3  68 2D 77 6F  
003231r 3  72 64 6C 69  
003237r 3               
003237r 3               nt_editor_wordlist:     ; shares code with ONE
003237r 3  0F 00                .byte 15, 0
003239r 3  rr rr rr rr          .word nt_forth_wordlist, xt_editor_wordlist, z_editor_wordlist
00323Dr 3  rr rr        
00323Fr 3  65 64 69 74          .byte "editor-wordlist"
003243r 3  6F 72 2D 77  
003247r 3  6F 72 64 6C  
00324Er 3               
00324Er 3               nt_assembler_wordlist:  ; shares code with TWO
00324Er 3  12 00                .byte 18, 0
003250r 3  rr rr rr rr          .word nt_editor_wordlist, xt_assembler_wordlist, z_assembler_wordlist
003254r 3  rr rr        
003256r 3  61 73 73 65          .byte "assembler-wordlist"
00325Ar 3  6D 62 6C 65  
00325Er 3  72 2D 77 6F  
003268r 3               
003268r 3               nt_root_wordlist:
003268r 3  0D 00                .byte 13, 0
00326Ar 3  rr rr rr rr          .word nt_assembler_wordlist, xt_root_wordlist, z_root_wordlist
00326Er 3  rr rr        
003270r 3  72 6F 6F 74          .byte "root-wordlist"
003274r 3  2D 77 6F 72  
003278r 3  64 6C 69 73  
00327Dr 3               
00327Dr 3               nt_get_order:
00327Dr 3  09 00                .byte 9, 0
00327Fr 3  rr rr rr rr          .word nt_root_wordlist, xt_get_order, z_get_order
003283r 3  rr rr        
003285r 3  67 65 74 2D          .byte "get-order"
003289r 3  6F 72 64 65  
00328Dr 3  72           
00328Er 3               
00328Er 3               nt_set_order:
00328Er 3  09 00                .byte 9, 0
003290r 3  rr rr rr rr          .word nt_get_order, xt_set_order, z_set_order
003294r 3  rr rr        
003296r 3  73 65 74 2D          .byte "set-order"
00329Ar 3  6F 72 64 65  
00329Er 3  72           
00329Fr 3               
00329Fr 3               nt_get_current:
00329Fr 3  0B 00                .byte 11, 0
0032A1r 3  rr rr rr rr          .word nt_set_order, xt_get_current, z_get_current
0032A5r 3  rr rr        
0032A7r 3  67 65 74 2D          .byte "get-current"
0032ABr 3  63 75 72 72  
0032AFr 3  65 6E 74     
0032B2r 3               
0032B2r 3               nt_set_current:
0032B2r 3  0B 10                .byte 11, UF
0032B4r 3  rr rr rr rr          .word nt_get_current, xt_set_current, z_set_current
0032B8r 3  rr rr        
0032BAr 3  73 65 74 2D          .byte "set-current"
0032BEr 3  63 75 72 72  
0032C2r 3  65 6E 74     
0032C5r 3               
0032C5r 3               nt_search_wordlist:
0032C5r 3  0F 10                .byte 15, UF
0032C7r 3  rr rr rr rr          .word nt_set_current, xt_search_wordlist, z_search_wordlist
0032CBr 3  rr rr        
0032CDr 3  73 65 61 72          .byte "search-wordlist"
0032D1r 3  63 68 2D 77  
0032D5r 3  6F 72 64 6C  
0032DCr 3               
0032DCr 3               nt_wordlist:
0032DCr 3  08 00                .byte 8, 0
0032DEr 3  rr rr rr rr          .word nt_search_wordlist, xt_wordlist, z_wordlist
0032E2r 3  rr rr        
0032E4r 3  77 6F 72 64          .byte "wordlist"
0032E8r 3  6C 69 73 74  
0032ECr 3               
0032ECr 3               nt_definitions:
0032ECr 3  0B 00                .byte 11, 0
0032EEr 3  rr rr rr rr          .word nt_wordlist, xt_definitions, z_definitions
0032F2r 3  rr rr        
0032F4r 3  64 65 66 69          .byte "definitions"
0032F8r 3  6E 69 74 69  
0032FCr 3  6F 6E 73     
0032FFr 3               
0032FFr 3               nt_block_ramdrive_init:
0032FFr 3  13 10                .byte 19, UF
003301r 3  rr rr rr rr          .word nt_definitions, xt_block_ramdrive_init, z_block_ramdrive_init
003305r 3  rr rr        
003307r 3  62 6C 6F 63          .byte "block-ramdrive-init"
00330Br 3  6B 2D 72 61  
00330Fr 3  6D 64 72 69  
00331Ar 3               
00331Ar 3               nt_list:
00331Ar 3  04 10                .byte 4, UF
00331Cr 3  rr rr rr rr          .word nt_block_ramdrive_init, xt_list, z_list
003320r 3  rr rr        
003322r 3  6C 69 73 74          .byte "list"
003326r 3               
003326r 3               nt_thru:
003326r 3  04 10                .byte 4, UF
003328r 3  rr rr rr rr          .word nt_list, xt_thru, z_thru
00332Cr 3  rr rr        
00332Er 3  74 68 72 75          .byte "thru"
003332r 3               
003332r 3               nt_load:
003332r 3  04 10                .byte 4, UF
003334r 3  rr rr rr rr          .word nt_thru, xt_load, z_load
003338r 3  rr rr        
00333Ar 3  6C 6F 61 64          .byte "load"
00333Er 3               
00333Er 3               nt_flush:
00333Er 3  05 00                .byte 5, 0
003340r 3  rr rr rr rr          .word nt_load, xt_flush, z_flush
003344r 3  rr rr        
003346r 3  66 6C 75 73          .byte "flush"
00334Ar 3  68           
00334Br 3               
00334Br 3               nt_empty_buffers:
00334Br 3  0D 00                .byte 13, 0
00334Dr 3  rr rr rr rr          .word nt_flush, xt_empty_buffers, z_empty_buffers
003351r 3  rr rr        
003353r 3  65 6D 70 74          .byte "empty-buffers"
003357r 3  79 2D 62 75  
00335Br 3  66 66 65 72  
003360r 3               
003360r 3               nt_buffer:
003360r 3  06 00                .byte 6, 0
003362r 3  rr rr rr rr          .word nt_empty_buffers, xt_buffer, z_buffer
003366r 3  rr rr        
003368r 3  62 75 66 66          .byte "buffer"
00336Cr 3  65 72        
00336Er 3               
00336Er 3               nt_update:
00336Er 3  06 00                .byte 6, 0
003370r 3  rr rr rr rr          .word nt_buffer, xt_update, z_update
003374r 3  rr rr        
003376r 3  75 70 64 61          .byte "update"
00337Ar 3  74 65        
00337Cr 3               
00337Cr 3               nt_block:
00337Cr 3  05 00                .byte 5, 0
00337Er 3  rr rr rr rr          .word nt_update, xt_block, z_block
003382r 3  rr rr        
003384r 3  62 6C 6F 63          .byte "block"
003388r 3  6B           
003389r 3               
003389r 3               nt_save_buffers:
003389r 3  0C 00                .byte 12, 0
00338Br 3  rr rr rr rr          .word nt_block, xt_save_buffers, z_save_buffers
00338Fr 3  rr rr        
003391r 3  73 61 76 65          .byte "save-buffers"
003395r 3  2D 62 75 66  
003399r 3  66 65 72 73  
00339Dr 3               
00339Dr 3               nt_block_read_vector:
00339Dr 3  11 28                .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
00339Fr 3  rr rr rr rr          .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
0033A3r 3  rr rr        
0033A5r 3  62 6C 6F 63          .byte "block-read-vector"
0033A9r 3  6B 2D 72 65  
0033ADr 3  61 64 2D 76  
0033B6r 3               
0033B6r 3               nt_block_read:
0033B6r 3  0A 28                .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
0033B8r 3  rr rr rr rr          .word nt_block_read_vector, xt_block_read, z_block_read
0033BCr 3  rr rr        
0033BEr 3  62 6C 6F 63          .byte "block-read"
0033C2r 3  6B 2D 72 65  
0033C6r 3  61 64        
0033C8r 3               
0033C8r 3               nt_block_write_vector:
0033C8r 3  12 08                .byte 18, NN ; Deferred words need the HC (Code Field) flag.
0033CAr 3  rr rr rr rr          .word nt_block_read, xt_block_write_vector, z_block_write_vector
0033CEr 3  rr rr        
0033D0r 3  62 6C 6F 63          .byte "block-write-vector"
0033D4r 3  6B 2D 77 72  
0033D8r 3  69 74 65 2D  
0033E2r 3               
0033E2r 3               nt_block_write:
0033E2r 3  0B 08                .byte 11, NN ; Deferred words need the HC (Code Field) flag.
0033E4r 3  rr rr rr rr          .word nt_block_write_vector, xt_block_write, z_block_write
0033E8r 3  rr rr        
0033EAr 3  62 6C 6F 63          .byte "block-write"
0033EEr 3  6B 2D 77 72  
0033F2r 3  69 74 65     
0033F5r 3               
0033F5r 3               nt_blk:
0033F5r 3  03 00                .byte 3, 0
0033F7r 3  rr rr rr rr          .word nt_block_write, xt_blk, z_blk
0033FBr 3  rr rr        
0033FDr 3  62 6C 6B             .byte "blk"
003400r 3               
003400r 3               nt_scr:
003400r 3  03 00                .byte 3, 0
003402r 3  rr rr rr rr          .word nt_blk, xt_scr, z_scr
003406r 3  rr rr        
003408r 3  73 63 72             .byte "scr"
00340Br 3               
00340Br 3               nt_blkbuffer:
00340Br 3  09 00                .byte 9, 0
00340Dr 3  rr rr rr rr          .word nt_scr, xt_blkbuffer, z_blkbuffer
003411r 3  rr rr        
003413r 3  62 6C 6B 62          .byte "blkbuffer"
003417r 3  75 66 66 65  
00341Br 3  72           
00341Cr 3               
00341Cr 3               nt_buffblocknum:
00341Cr 3  0C 00                .byte 12, 0
00341Er 3  rr rr rr rr          .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
003422r 3  rr rr        
003424r 3  62 75 66 66          .byte "buffblocknum"
003428r 3  62 6C 6F 63  
00342Cr 3  6B 6E 75 6D  
003430r 3               
003430r 3               nt_buffstatus:
003430r 3  0A 00                .byte 10, 0
003432r 3  rr rr rr rr          .word nt_buffblocknum, xt_buffstatus, z_buffstatus
003436r 3  rr rr        
003438r 3  62 75 66 66          .byte "buffstatus"
00343Cr 3  73 74 61 74  
003440r 3  75 73        
003442r 3               
003442r 3               nt_buffer_colon:
003442r 3  07 00                .byte 7, 0
003444r 3  rr rr rr rr          .word nt_buffstatus, xt_buffer_colon, z_buffer_colon
003448r 3  rr rr        
00344Ar 3  62 75 66 66          .byte "buffer:"
00344Er 3  65 72 3A     
003451r 3               
003451r 3               nt_useraddr:
003451r 3  08 00                .byte 8, 0
003453r 3  rr rr rr rr          .word nt_buffer_colon, xt_useraddr, z_useraddr
003457r 3  rr rr        
003459r 3  75 73 65 72          .byte "useraddr"
00345Dr 3  61 64 64 72  
003461r 3               
003461r 3               nt_action_of:
003461r 3  09 04                .byte 9, IM
003463r 3  rr rr rr rr          .word nt_useraddr, xt_action_of, z_action_of
003467r 3  rr rr        
003469r 3  61 63 74 69          .byte "action-of"
00346Dr 3  6F 6E 2D 6F  
003471r 3  66           
003472r 3               
003472r 3               nt_is:
003472r 3  02 04                .byte 2, IM
003474r 3  rr rr rr rr          .word nt_action_of, xt_is, z_is
003478r 3  rr rr        
00347Ar 3  69 73                .byte "is"
00347Cr 3               
00347Cr 3               nt_defer_store:
00347Cr 3  06 00                .byte 6, 0
00347Er 3  rr rr rr rr          .word nt_is, xt_defer_store, z_defer_store
003482r 3  rr rr        
003484r 3  64 65 66 65          .byte "defer!"
003488r 3  72 21        
00348Ar 3               
00348Ar 3               nt_defer_fetch:
00348Ar 3  06 00                .byte 6, 0
00348Cr 3  rr rr rr rr          .word nt_defer_store, xt_defer_fetch, z_defer_fetch
003490r 3  rr rr        
003492r 3  64 65 66 65          .byte "defer@"
003496r 3  72 40        
003498r 3               
003498r 3               nt_endcase:
003498r 3  07 0D                .byte 7, IM+CO+NN
00349Ar 3  rr rr rr rr          .word nt_defer_fetch, xt_endcase, z_endcase
00349Er 3  rr rr        
0034A0r 3  65 6E 64 63          .byte "endcase"
0034A4r 3  61 73 65     
0034A7r 3               
0034A7r 3               nt_endof:
0034A7r 3  05 0D                .byte 5, IM+CO+NN
0034A9r 3  rr rr rr rr          .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
0034ADr 3  rr rr        
0034AFr 3  65 6E 64 6F          .byte "endof"
0034B3r 3  66           
0034B4r 3               
0034B4r 3               nt_of:
0034B4r 3  02 0D                .byte 2, IM+CO+NN
0034B6r 3  rr rr rr rr          .word nt_endof, xt_of, z_of
0034BAr 3  rr rr        
0034BCr 3  6F 66                .byte "of"
0034BEr 3               
0034BEr 3               nt_case:
0034BEr 3  04 0D                .byte 4, IM+CO+NN
0034C0r 3  rr rr rr rr          .word nt_of, xt_case, z_case    ; shares code with ZERO
0034C4r 3  rr rr        
0034C6r 3  63 61 73 65          .byte "case"
0034CAr 3               
0034CAr 3               nt_while:
0034CAr 3  05 0D                .byte 5, IM+CO+NN
0034CCr 3  rr rr rr rr          .word nt_case, xt_while, z_while
0034D0r 3  rr rr        
0034D2r 3  77 68 69 6C          .byte "while"
0034D6r 3  65           
0034D7r 3               
0034D7r 3               nt_until:
0034D7r 3  05 0D                .byte 5, IM+CO+NN
0034D9r 3  rr rr rr rr          .word nt_while, xt_until, z_until
0034DDr 3  rr rr        
0034DFr 3  75 6E 74 69          .byte "until"
0034E3r 3  6C           
0034E4r 3               
0034E4r 3               nt_repeat:
0034E4r 3  06 0D                .byte 6, IM+CO+NN
0034E6r 3  rr rr rr rr          .word nt_until, xt_repeat, z_repeat
0034EAr 3  rr rr        
0034ECr 3  72 65 70 65          .byte "repeat"
0034F0r 3  61 74        
0034F2r 3               
0034F2r 3               nt_else:
0034F2r 3  04 0D                .byte 4, IM+CO+NN
0034F4r 3  rr rr rr rr          .word nt_repeat, xt_else, z_else
0034F8r 3  rr rr        
0034FAr 3  65 6C 73 65          .byte "else"
0034FEr 3               
0034FEr 3               nt_then:
0034FEr 3  04 0D                .byte 4, IM+CO+NN
003500r 3  rr rr rr rr          .word nt_else, xt_then, z_then
003504r 3  rr rr        
003506r 3  74 68 65 6E          .byte "then"
00350Ar 3               
00350Ar 3               nt_if:
00350Ar 3  02 0D                .byte 2, IM+CO+NN
00350Cr 3  rr rr rr rr          .word nt_then, xt_if, z_if
003510r 3  rr rr        
003512r 3  69 66                .byte "if"
003514r 3               
003514r 3               nt_dot_paren:
003514r 3  02 04                .byte 2, IM
003516r 3  rr rr rr rr          .word nt_if, xt_dot_paren, z_dot_paren
00351Ar 3  rr rr        
00351Cr 3  2E 28                .byte ".("
00351Er 3               
00351Er 3               nt_paren:
00351Er 3  01 04                .byte 1, IM
003520r 3  rr rr rr rr          .word nt_dot_paren, xt_paren, z_paren
003524r 3  rr rr        
003526r 3  28                   .byte "("
003527r 3               
003527r 3               nt_word:
003527r 3  04 10                .byte 4, UF
003529r 3  rr rr rr rr          .word nt_paren, xt_word, z_word
00352Dr 3  rr rr        
00352Fr 3  77 6F 72 64          .byte "word"
003533r 3               
003533r 3               nt_find:
003533r 3  04 10                .byte 4, UF
003535r 3  rr rr rr rr          .word nt_word, xt_find, z_find
003539r 3  rr rr        
00353Br 3  66 69 6E 64          .byte "find"
00353Fr 3               
00353Fr 3               nt_environment_q:
00353Fr 3  0C 10                .byte 12, UF
003541r 3  rr rr rr rr          .word nt_find, xt_environment_q, z_environment_q
003545r 3  rr rr        
003547r 3  65 6E 76 69          .byte "environment?"
00354Br 3  72 6F 6E 6D  
00354Fr 3  65 6E 74 3F  
003553r 3               
003553r 3               nt_search:
003553r 3  06 18                .byte 6, UF+NN
003555r 3  rr rr rr rr          .word nt_environment_q, xt_search, z_search
003559r 3  rr rr        
00355Br 3  73 65 61 72          .byte "search"
00355Fr 3  63 68        
003561r 3               
003561r 3               nt_compare:
003561r 3  07 10                .byte 7, UF
003563r 3  rr rr rr rr          .word nt_search, xt_compare, z_compare
003567r 3  rr rr        
003569r 3  63 6F 6D 70          .byte "compare"
00356Dr 3  61 72 65     
003570r 3               
003570r 3               nt_disasm:
003570r 3  06 10                .byte 6, UF
003572r 3  rr rr rr rr          .word nt_compare, xt_disasm, z_disasm
003576r 3  rr rr        
003578r 3  64 69 73 61          .byte "disasm"
00357Cr 3  73 6D        
00357Er 3               
00357Er 3               nt_dot_s:
00357Er 3  02 00                .byte 2, 0
003580r 3  rr rr rr rr          .word nt_disasm, xt_dot_s, z_dot_s
003584r 3  rr rr        
003586r 3  2E 73                .byte ".s"
003588r 3               
003588r 3               nt_dump:
003588r 3  04 10                .byte 4, UF
00358Ar 3  rr rr rr rr          .word nt_dot_s, xt_dump, z_dump
00358Er 3  rr rr        
003590r 3  64 75 6D 70          .byte "dump"
003594r 3               
003594r 3               nt_bell:
003594r 3  04 00                .byte 4, 0
003596r 3  rr rr rr rr          .word nt_dump, xt_bell, z_bell
00359Ar 3  rr rr        
00359Cr 3  62 65 6C 6C          .byte "bell"
0035A0r 3               
0035A0r 3               nt_align:
0035A0r 3  05 00                .byte 5, 0
0035A2r 3  rr rr rr rr          .word nt_bell, xt_align, z_align
0035A6r 3  rr rr        
0035A8r 3  61 6C 69 67          .byte "align"
0035ACr 3  6E           
0035ADr 3               
0035ADr 3               nt_aligned:             ; same code as ALIGN
0035ADr 3  07 00                .byte 7, 0
0035AFr 3  rr rr rr rr          .word nt_align, xt_align, z_align
0035B3r 3  rr rr        
0035B5r 3  61 6C 69 67          .byte "aligned"
0035B9r 3  6E 65 64     
0035BCr 3               
0035BCr 3               nt_wordsize:
0035BCr 3  08 10                .byte 8, UF
0035BEr 3  rr rr rr rr          .word nt_aligned, xt_wordsize, z_wordsize
0035C2r 3  rr rr        
0035C4r 3  77 6F 72 64          .byte "wordsize"
0035C8r 3  73 69 7A 65  
0035CCr 3               
0035CCr 3               nt_words:
0035CCr 3  05 00                .byte 5, 0
0035CEr 3  rr rr rr rr          .word nt_wordsize, xt_words, z_words
0035D2r 3  rr rr        
0035D4r 3  77 6F 72 64          .byte "words"
0035D8r 3  73           
0035D9r 3               
0035D9r 3               nt_marker:
0035D9r 3  06 04                .byte 6, IM
0035DBr 3  rr rr rr rr          .word nt_words, xt_marker, z_marker
0035DFr 3  rr rr        
0035E1r 3  6D 61 72 6B          .byte "marker"
0035E5r 3  65 72        
0035E7r 3               
0035E7r 3               nt_at_xy:
0035E7r 3  05 10                .byte 5, UF
0035E9r 3  rr rr rr rr          .word nt_marker, xt_at_xy, z_at_xy
0035EDr 3  rr rr        
0035EFr 3  61 74 2D 78          .byte "at-xy"
0035F3r 3  79           
0035F4r 3               
0035F4r 3               nt_page:
0035F4r 3  04 00                .byte 4, 0
0035F6r 3  rr rr rr rr          .word nt_at_xy, xt_page, z_page
0035FAr 3  rr rr        
0035FCr 3  70 61 67 65          .byte "page"
003600r 3               
003600r 3               nt_cr:
003600r 3  02 00                .byte 2, 0
003602r 3  rr rr rr rr          .word nt_page, xt_cr, z_cr
003606r 3  rr rr        
003608r 3  63 72                .byte "cr"
00360Ar 3               
00360Ar 3               nt_input:
00360Ar 3  05 00                .byte 5, 0
00360Cr 3  rr rr rr rr          .word nt_cr, xt_input, z_input
003610r 3  rr rr        
003612r 3  69 6E 70 75          .byte "input"
003616r 3  74           
003617r 3               
003617r 3               nt_output:
003617r 3  06 00                .byte 6, 0
003619r 3  rr rr rr rr          .word nt_input, xt_output, z_output
00361Dr 3  rr rr        
00361Fr 3  6F 75 74 70          .byte "output"
003623r 3  75 74        
003625r 3               
003625r 3               nt_sign:
003625r 3  04 10                .byte 4, UF
003627r 3  rr rr rr rr          .word nt_output, xt_sign, z_sign
00362Br 3  rr rr        
00362Dr 3  73 69 67 6E          .byte "sign"
003631r 3               
003631r 3               nt_hold:
003631r 3  04 10                .byte 4, UF
003633r 3  rr rr rr rr          .word nt_sign, xt_hold, z_hold
003637r 3  rr rr        
003639r 3  68 6F 6C 64          .byte "hold"
00363Dr 3               
00363Dr 3               nt_number_sign_greater:
00363Dr 3  02 10                .byte 2, UF
00363Fr 3  rr rr rr rr          .word nt_hold, xt_number_sign_greater, z_number_sign_greater
003643r 3  rr rr        
003645r 3  23 3E                .byte "#>"
003647r 3               
003647r 3               nt_number_sign_s:
003647r 3  02 10                .byte 2, UF
003649r 3  rr rr rr rr          .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
00364Dr 3  rr rr        
00364Fr 3  23 73                .byte "#s"
003651r 3               
003651r 3               nt_number_sign:
003651r 3  01 10                .byte 1, UF
003653r 3  rr rr rr rr          .word nt_number_sign_s, xt_number_sign, z_number_sign
003657r 3  rr rr        
003659r 3  23                   .byte "#"
00365Ar 3               
00365Ar 3               nt_less_number_sign:
00365Ar 3  02 00                .byte 2, 0
00365Cr 3  rr rr rr rr          .word nt_number_sign, xt_less_number_sign, z_less_number_sign
003660r 3  rr rr        
003662r 3  3C 23                .byte "<#"
003664r 3               
003664r 3               nt_to_in:
003664r 3  03 00                .byte 3, 0
003666r 3  rr rr rr rr          .word nt_less_number_sign, xt_to_in, z_to_in
00366Ar 3  rr rr        
00366Cr 3  3E 69 6E             .byte ">in"
00366Fr 3               
00366Fr 3               nt_within:
00366Fr 3  06 10                .byte 6, UF
003671r 3  rr rr rr rr          .word nt_to_in, xt_within, z_within
003675r 3  rr rr        
003677r 3  77 69 74 68          .byte "within"
00367Br 3  69 6E        
00367Dr 3               
00367Dr 3               nt_hexstore:
00367Dr 3  08 10                .byte 8, UF
00367Fr 3  rr rr rr rr          .word nt_within, xt_hexstore, z_hexstore
003683r 3  rr rr        
003685r 3  68 65 78 73          .byte "hexstore"
003689r 3  74 6F 72 65  
00368Dr 3               
00368Dr 3               nt_cleave:
00368Dr 3  06 10                .byte 6, UF
00368Fr 3  rr rr rr rr          .word nt_hexstore, xt_cleave, z_cleave
003693r 3  rr rr        
003695r 3  63 6C 65 61          .byte "cleave"
003699r 3  76 65        
00369Br 3               
00369Br 3               nt_pad:
00369Br 3  03 00                .byte 3, 0
00369Dr 3  rr rr rr rr          .word nt_cleave, xt_pad, z_pad
0036A1r 3  rr rr        
0036A3r 3  70 61 64             .byte "pad"
0036A6r 3               
0036A6r 3               nt_cmove:
0036A6r 3  05 10                .byte 5, UF
0036A8r 3  rr rr rr rr          .word nt_pad, xt_cmove, z_cmove
0036ACr 3  rr rr        
0036AEr 3  63 6D 6F 76          .byte "cmove"
0036B2r 3  65           
0036B3r 3               
0036B3r 3               nt_cmove_up:
0036B3r 3  06 10                .byte 6, UF
0036B5r 3  rr rr rr rr          .word nt_cmove, xt_cmove_up, z_cmove_up
0036B9r 3  rr rr        
0036BBr 3  63 6D 6F 76          .byte "cmove>"
0036BFr 3  65 3E        
0036C1r 3               
0036C1r 3               nt_move:
0036C1r 3  04 18                .byte 4, NN+UF
0036C3r 3  rr rr rr rr          .word nt_cmove_up, xt_move, z_move
0036C7r 3  rr rr        
0036C9r 3  6D 6F 76 65          .byte "move"
0036CDr 3               
0036CDr 3               nt_backslash:
0036CDr 3  01 04                .byte 1, IM
0036CFr 3  rr rr rr rr          .word nt_move, xt_backslash, z_backslash
0036D3r 3  rr rr        
0036D5r 3  5C                   .byte $5c
0036D6r 3               
0036D6r 3               nt_star_slash:
0036D6r 3  02 10                .byte 2, UF
0036D8r 3  rr rr rr rr          .word nt_backslash, xt_star_slash, z_star_slash
0036DCr 3  rr rr        
0036DEr 3  2A 2F                .byte "*/"
0036E0r 3               
0036E0r 3               nt_star_slash_mod:
0036E0r 3  05 10                .byte 5, UF
0036E2r 3  rr rr rr rr          .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
0036E6r 3  rr rr        
0036E8r 3  2A 2F 6D 6F          .byte "*/mod"
0036ECr 3  64           
0036EDr 3               
0036EDr 3               nt_mod:
0036EDr 3  03 10                .byte 3, UF
0036EFr 3  rr rr rr rr          .word nt_star_slash_mod, xt_mod, z_mod
0036F3r 3  rr rr        
0036F5r 3  6D 6F 64             .byte "mod"
0036F8r 3               
0036F8r 3               nt_slash_mod:
0036F8r 3  04 10                .byte 4, UF
0036FAr 3  rr rr rr rr          .word nt_mod, xt_slash_mod, z_slash_mod
0036FEr 3  rr rr        
003700r 3  2F 6D 6F 64          .byte "/mod"
003704r 3               
003704r 3               nt_slash:
003704r 3  01 10                .byte 1, UF
003706r 3  rr rr rr rr          .word nt_slash_mod, xt_slash, z_slash
00370Ar 3  rr rr        
00370Cr 3  2F                   .byte "/"
00370Dr 3               
00370Dr 3               nt_fm_slash_mod:
00370Dr 3  06 10                .byte 6, UF
00370Fr 3  rr rr rr rr          .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
003713r 3  rr rr        
003715r 3  66 6D 2F 6D          .byte "fm/mod"
003719r 3  6F 64        
00371Br 3               
00371Br 3               nt_sm_slash_rem:
00371Br 3  06 10                .byte 6, UF
00371Dr 3  rr rr rr rr          .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
003721r 3  rr rr        
003723r 3  73 6D 2F 72          .byte "sm/rem"
003727r 3  65 6D        
003729r 3               
003729r 3               nt_um_slash_mod:
003729r 3  06 10                .byte 6, UF
00372Br 3  rr rr rr rr          .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
00372Fr 3  rr rr        
003731r 3  75 6D 2F 6D          .byte "um/mod"
003735r 3  6F 64        
003737r 3               
003737r 3               nt_star:
003737r 3  01 10                .byte 1, UF
003739r 3  rr rr rr rr          .word nt_um_slash_mod, xt_star, z_star
00373Dr 3  rr rr        
00373Fr 3  2A                   .byte "*"
003740r 3               
003740r 3               nt_um_star:
003740r 3  03 10                .byte 3, UF
003742r 3  rr rr rr rr          .word nt_star, xt_um_star, z_um_star
003746r 3  rr rr        
003748r 3  75 6D 2A             .byte "um*"
00374Br 3               
00374Br 3               nt_m_star:
00374Br 3  02 10                .byte 2, UF
00374Dr 3  rr rr rr rr          .word nt_um_star, xt_m_star, z_m_star
003751r 3  rr rr        
003753r 3  6D 2A                .byte "m*"
003755r 3               
003755r 3               nt_count:
003755r 3  05 10                .byte 5, UF
003757r 3  rr rr rr rr          .word nt_m_star, xt_count, z_count
00375Br 3  rr rr        
00375Dr 3  63 6F 75 6E          .byte "count"
003761r 3  74           
003762r 3               
003762r 3               nt_decimal:
003762r 3  07 00                .byte 7, 0
003764r 3  rr rr rr rr          .word nt_count, xt_decimal, z_decimal
003768r 3  rr rr        
00376Ar 3  64 65 63 69          .byte "decimal"
00376Er 3  6D 61 6C     
003771r 3               
003771r 3               nt_hex:
003771r 3  03 00                .byte 3, 0
003773r 3  rr rr rr rr          .word nt_decimal, xt_hex, z_hex
003777r 3  rr rr        
003779r 3  68 65 78             .byte "hex"
00377Cr 3               
00377Cr 3               nt_to_number:
00377Cr 3  07 10                .byte 7, UF
00377Er 3  rr rr rr rr          .word nt_hex, xt_to_number, z_to_number
003782r 3  rr rr        
003784r 3  3E 6E 75 6D          .byte ">number"
003788r 3  62 65 72     
00378Br 3               
00378Br 3               nt_number:
00378Br 3  06 10                .byte 6, UF
00378Dr 3  rr rr rr rr          .word nt_to_number, xt_number, z_number
003791r 3  rr rr        
003793r 3  6E 75 6D 62          .byte "number"
003797r 3  65 72        
003799r 3               
003799r 3               nt_digit_question:
003799r 3  06 10                .byte 6, UF
00379Br 3  rr rr rr rr          .word nt_number, xt_digit_question, z_digit_question
00379Fr 3  rr rr        
0037A1r 3  64 69 67 69          .byte "digit?"
0037A5r 3  74 3F        
0037A7r 3               
0037A7r 3               nt_base:
0037A7r 3  04 00                .byte 4, 0
0037A9r 3  rr rr rr rr          .word nt_digit_question, xt_base, z_base
0037ADr 3  rr rr        
0037AFr 3  62 61 73 65          .byte "base"
0037B3r 3               
0037B3r 3               nt_evaluate:
0037B3r 3  08 10                .byte 8, UF
0037B5r 3  rr rr rr rr          .word nt_base, xt_evaluate, z_evaluate
0037B9r 3  rr rr        
0037BBr 3  65 76 61 6C          .byte "evaluate"
0037BFr 3  75 61 74 65  
0037C3r 3               
0037C3r 3               nt_state:
0037C3r 3  05 00                .byte 5, 0
0037C5r 3  rr rr rr rr          .word nt_evaluate, xt_state, z_state
0037C9r 3  rr rr        
0037CBr 3  73 74 61 74          .byte "state"
0037CFr 3  65           
0037D0r 3               
0037D0r 3               nt_again:
0037D0r 3  05 17                .byte 5, AN+CO+IM+UF
0037D2r 3  rr rr rr rr          .word nt_state, xt_again, z_again
0037D6r 3  rr rr        
0037D8r 3  61 67 61 69          .byte "again"
0037DCr 3  6E           
0037DDr 3               
0037DDr 3               nt_begin:
0037DDr 3  05 07                .byte 5, AN+CO+IM
0037DFr 3  rr rr rr rr          .word nt_again, xt_begin, z_begin
0037E3r 3  rr rr        
0037E5r 3  62 65 67 69          .byte "begin"
0037E9r 3  6E           
0037EAr 3               
0037EAr 3               nt_quit:
0037EAr 3  04 00                .byte 4, 0
0037ECr 3  rr rr rr rr          .word nt_begin, xt_quit, z_quit
0037F0r 3  rr rr        
0037F2r 3  71 75 69 74          .byte "quit"
0037F6r 3               
0037F6r 3               nt_recurse:
0037F6r 3  07 0D                .byte 7, CO+IM+NN
0037F8r 3  rr rr rr rr          .word nt_quit, xt_recurse, z_recurse
0037FCr 3  rr rr        
0037FEr 3  72 65 63 75          .byte "recurse"
003802r 3  72 73 65     
003805r 3               
003805r 3               nt_leave:
003805r 3  05 03                .byte 5, AN+CO
003807r 3  rr rr rr rr          .word nt_recurse, xt_leave, z_leave
00380Br 3  rr rr        
00380Dr 3  6C 65 61 76          .byte "leave"
003811r 3  65           
003812r 3               
003812r 3               nt_unloop:
003812r 3  06 03                .byte 6, AN+CO
003814r 3  rr rr rr rr          .word nt_leave, xt_unloop, z_unloop
003818r 3  rr rr        
00381Ar 3  75 6E 6C 6F          .byte "unloop"
00381Er 3  6F 70        
003820r 3               
003820r 3               nt_exit:
003820r 3  04 03                .byte 4, AN+CO
003822r 3  rr rr rr rr          .word nt_unloop, xt_exit, z_exit
003826r 3  rr rr        
003828r 3  65 78 69 74          .byte "exit"
00382Cr 3               
00382Cr 3               nt_plus_loop:
00382Cr 3  05 05                .byte 5, CO+IM
00382Er 3  rr rr rr rr          .word nt_exit, xt_plus_loop, z_plus_loop
003832r 3  rr rr        
003834r 3  2B 6C 6F 6F          .byte "+loop"
003838r 3  70           
003839r 3               
003839r 3               nt_loop:
003839r 3  04 05                .byte 4, CO+IM
00383Br 3  rr rr rr rr          .word nt_plus_loop, xt_loop, z_loop
00383Fr 3  rr rr        
003841r 3  6C 6F 6F 70          .byte "loop"
003845r 3               
003845r 3               nt_j:
003845r 3  01 03                .byte 1, AN+CO
003847r 3  rr rr rr rr          .word nt_loop, xt_j, z_j
00384Br 3  rr rr        
00384Dr 3  6A                   .byte "j"
00384Er 3               
00384Er 3               nt_i:
00384Er 3  01 03                .byte 1, AN+CO
003850r 3  rr rr rr rr          .word nt_j, xt_i, z_i
003854r 3  rr rr        
003856r 3  69                   .byte "i"
003857r 3               
003857r 3               nt_question_do:
003857r 3  03 0D                .byte 3, CO+IM+NN
003859r 3  rr rr rr rr          .word nt_i, xt_question_do, z_question_do
00385Dr 3  rr rr        
00385Fr 3  3F 64 6F             .byte "?do"
003862r 3               
003862r 3               nt_do:
003862r 3  02 0D                .byte 2, CO+IM+NN
003864r 3  rr rr rr rr          .word nt_question_do, xt_do, z_do
003868r 3  rr rr        
00386Ar 3  64 6F                .byte "do"
00386Cr 3               
00386Cr 3               nt_abort_quote:
00386Cr 3  06 0D                .byte 6, CO+IM+NN
00386Er 3  rr rr rr rr          .word nt_do, xt_abort_quote, z_abort_quote
003872r 3  rr rr        
003874r 3  61 62 6F 72          .byte "abort", $22
003878r 3  74 22        
00387Ar 3               
00387Ar 3               nt_abort:
00387Ar 3  05 00                .byte 5, 0
00387Cr 3  rr rr rr rr          .word nt_abort_quote, xt_abort, z_abort
003880r 3  rr rr        
003882r 3  61 62 6F 72          .byte "abort"
003886r 3  74           
003887r 3               
003887r 3               nt_strip_underflow:
003887r 3  0F 00                .byte 15, 0
003889r 3  rr rr rr rr          .word nt_abort, xt_strip_underflow, z_strip_underflow
00388Dr 3  rr rr        
00388Fr 3  73 74 72 69          .byte "strip-underflow"
003893r 3  70 2D 75 6E  
003897r 3  64 65 72 66  
00389Er 3               
00389Er 3               nt_nc_limit:
00389Er 3  08 00                .byte 8, 0
0038A0r 3  rr rr rr rr          .word nt_strip_underflow, xt_nc_limit, z_nc_limit
0038A4r 3  rr rr        
0038A6r 3  6E 63 2D 6C          .byte "nc-limit"
0038AAr 3  69 6D 69 74  
0038AEr 3               
0038AEr 3               nt_allow_native:
0038AEr 3  0C 00                .byte 12, 0
0038B0r 3  rr rr rr rr          .word nt_nc_limit, xt_allow_native, z_allow_native
0038B4r 3  rr rr        
0038B6r 3  61 6C 6C 6F          .byte "allow-native"
0038BAr 3  77 2D 6E 61  
0038BEr 3  74 69 76 65  
0038C2r 3               
0038C2r 3               nt_always_native:
0038C2r 3  0D 00                .byte 13, 0
0038C4r 3  rr rr rr rr          .word nt_allow_native, xt_always_native, z_always_native
0038C8r 3  rr rr        
0038CAr 3  61 6C 77 61          .byte "always-native"
0038CEr 3  79 73 2D 6E  
0038D2r 3  61 74 69 76  
0038D7r 3               
0038D7r 3               nt_never_native:
0038D7r 3  0C 00                .byte 12, 0
0038D9r 3  rr rr rr rr          .word nt_always_native, xt_never_native, z_never_native
0038DDr 3  rr rr        
0038DFr 3  6E 65 76 65          .byte "never-native"
0038E3r 3  72 2D 6E 61  
0038E7r 3  74 69 76 65  
0038EBr 3               
0038EBr 3               nt_compile_only:
0038EBr 3  0C 00                .byte 12, 0
0038EDr 3  rr rr rr rr          .word nt_never_native, xt_compile_only, z_compile_only
0038F1r 3  rr rr        
0038F3r 3  63 6F 6D 70          .byte "compile-only"
0038F7r 3  69 6C 65 2D  
0038FBr 3  6F 6E 6C 79  
0038FFr 3               
0038FFr 3               nt_immediate:
0038FFr 3  09 00                .byte 9, 0
003901r 3  rr rr rr rr          .word nt_compile_only, xt_immediate, z_immediate
003905r 3  rr rr        
003907r 3  69 6D 6D 65          .byte "immediate"
00390Br 3  64 69 61 74  
00390Fr 3  65           
003910r 3               
003910r 3               nt_postpone:
003910r 3  08 05                .byte 8, IM+CO
003912r 3  rr rr rr rr          .word nt_immediate, xt_postpone, z_postpone
003916r 3  rr rr        
003918r 3  70 6F 73 74          .byte "postpone"
00391Cr 3  70 6F 6E 65  
003920r 3               
003920r 3               nt_s_backslash_quote:
003920r 3  03 04                .byte 3, IM
003922r 3  rr rr rr rr          .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
003926r 3  rr rr        
003928r 3  73 5C 22             .byte "s", $5C, $22
00392Br 3               
00392Br 3               nt_s_quote:
00392Br 3  02 0C                .byte 2, IM+NN
00392Dr 3  rr rr rr rr          .word nt_s_backslash_quote, xt_s_quote, z_s_quote
003931r 3  rr rr        
003933r 3  73 22                .byte "s", $22
003935r 3               
003935r 3               nt_dot_quote:
003935r 3  02 05                .byte 2, CO+IM
003937r 3  rr rr rr rr          .word nt_s_quote, xt_dot_quote, z_dot_quote
00393Br 3  rr rr        
00393Dr 3  2E 22                .byte ".", $22
00393Fr 3               
00393Fr 3               nt_sliteral:
00393Fr 3  08 15                .byte 8, CO+IM+UF
003941r 3  rr rr rr rr          .word nt_dot_quote, xt_sliteral, z_sliteral
003945r 3  rr rr        
003947r 3  73 6C 69 74          .byte "sliteral"
00394Br 3  65 72 61 6C  
00394Fr 3               
00394Fr 3               nt_literal:
00394Fr 3  07 15                .byte 7, IM+CO+UF
003951r 3  rr rr rr rr          .word nt_sliteral, xt_literal, z_literal
003955r 3  rr rr        
003957r 3  6C 69 74 65          .byte "literal"
00395Br 3  72 61 6C     
00395Er 3               
00395Er 3               nt_right_bracket:
00395Er 3  01 04                .byte 1, IM
003960r 3  rr rr rr rr          .word nt_literal, xt_right_bracket, z_right_bracket
003964r 3  rr rr        
003966r 3  5D                   .byte "]"
003967r 3               
003967r 3               nt_left_bracket:
003967r 3  01 05                .byte 1, IM+CO
003969r 3  rr rr rr rr          .word nt_right_bracket, xt_left_bracket, z_left_bracket
00396Dr 3  rr rr        
00396Fr 3  5B                   .byte "["
003970r 3               
003970r 3               nt_compile_comma:
003970r 3  08 18                .byte 8, UF+NN
003972r 3  rr rr rr rr          .word nt_left_bracket, xt_compile_comma, z_compile_comma
003976r 3  rr rr        
003978r 3  63 6F 6D 70          .byte "compile,"
00397Cr 3  69 6C 65 2C  
003980r 3               
003980r 3               nt_colon_noname:
003980r 3  07 00                .byte 7, 0
003982r 3  rr rr rr rr          .word nt_compile_comma, xt_colon_noname, z_colon_noname
003986r 3  rr rr        
003988r 3  3A 6E 6F 6E          .byte ":noname"
00398Cr 3  61 6D 65     
00398Fr 3               
00398Fr 3               nt_semicolon:
00398Fr 3  01 05                .byte 1, CO+IM
003991r 3  rr rr rr rr          .word nt_colon_noname, xt_semicolon, z_semicolon
003995r 3  rr rr        
003997r 3  3B                   .byte ";"
003998r 3               
003998r 3               nt_colon:
003998r 3  01 00                .byte 1, 0
00399Ar 3  rr rr rr rr          .word nt_semicolon, xt_colon, z_colon
00399Er 3  rr rr        
0039A0r 3  3A                   .byte ":"
0039A1r 3               
0039A1r 3               nt_source_id:
0039A1r 3  09 00                .byte 9, 0
0039A3r 3  rr rr rr rr          .word nt_colon, xt_source_id, z_source_id
0039A7r 3  rr rr        
0039A9r 3  73 6F 75 72          .byte "source-id"
0039ADr 3  63 65 2D 69  
0039B1r 3  64           
0039B2r 3               
0039B2r 3               nt_source:
0039B2r 3  06 00                .byte 6, 0
0039B4r 3  rr rr rr rr          .word nt_source_id, xt_source, z_source
0039B8r 3  rr rr        
0039BAr 3  73 6F 75 72          .byte "source"
0039BEr 3  63 65        
0039C0r 3               
0039C0r 3               nt_execute_parsing:
0039C0r 3  0F 10                .byte 15, UF
0039C2r 3  rr rr rr rr          .word nt_source, xt_execute_parsing, z_execute_parsing
0039C6r 3  rr rr        
0039C8r 3  65 78 65 63          .byte "execute-parsing"
0039CCr 3  75 74 65 2D  
0039D0r 3  70 61 72 73  
0039D7r 3               
0039D7r 3               nt_parse:
0039D7r 3  05 10                .byte 5, UF
0039D9r 3  rr rr rr rr          .word nt_execute_parsing, xt_parse, z_parse
0039DDr 3  rr rr        
0039DFr 3  70 61 72 73          .byte "parse"
0039E3r 3  65           
0039E4r 3               
0039E4r 3               nt_parse_name:
0039E4r 3  0A 08                .byte 10, NN
0039E6r 3  rr rr rr rr          .word nt_parse, xt_parse_name, z_parse_name
0039EAr 3  rr rr        
0039ECr 3  70 61 72 73          .byte "parse-name"
0039F0r 3  65 2D 6E 61  
0039F4r 3  6D 65        
0039F6r 3               
0039F6r 3               nt_latestnt:
0039F6r 3  08 00                .byte 8, 0
0039F8r 3  rr rr rr rr          .word nt_parse_name, xt_latestnt, z_latestnt
0039FCr 3  rr rr        
0039FEr 3  6C 61 74 65          .byte "latestnt"
003A02r 3  73 74 6E 74  
003A06r 3               
003A06r 3               nt_latestxt:
003A06r 3  08 00                .byte 8, 0
003A08r 3  rr rr rr rr          .word nt_latestnt, xt_latestxt, z_latestxt
003A0Cr 3  rr rr        
003A0Er 3  6C 61 74 65          .byte "latestxt"
003A12r 3  73 74 78 74  
003A16r 3               
003A16r 3               nt_defer:
003A16r 3  05 00                .byte 5, 0
003A18r 3  rr rr rr rr          .word nt_latestxt, xt_defer, z_defer
003A1Cr 3  rr rr        
003A1Er 3  64 65 66 65          .byte "defer"
003A22r 3  72           
003A23r 3               
003A23r 3               nt_to_body:
003A23r 3  05 10                .byte 5, UF
003A25r 3  rr rr rr rr          .word nt_defer, xt_to_body, z_to_body
003A29r 3  rr rr        
003A2Br 3  3E 62 6F 64          .byte ">body"
003A2Fr 3  79           
003A30r 3               
003A30r 3               nt_name_to_string:
003A30r 3  0B 10                .byte 11, UF
003A32r 3  rr rr rr rr          .word nt_to_body, xt_name_to_string, z_name_to_string
003A36r 3  rr rr        
003A38r 3  6E 61 6D 65          .byte "name>string"
003A3Cr 3  3E 73 74 72  
003A40r 3  69 6E 67     
003A43r 3               
003A43r 3               nt_int_to_name:
003A43r 3  08 10                .byte 8, UF
003A45r 3  rr rr rr rr          .word nt_name_to_string, xt_int_to_name, z_int_to_name
003A49r 3  rr rr        
003A4Br 3  69 6E 74 3E          .byte "int>name"
003A4Fr 3  6E 61 6D 65  
003A53r 3               
003A53r 3               nt_name_to_int:
003A53r 3  08 10                .byte 8, UF
003A55r 3  rr rr rr rr          .word nt_int_to_name, xt_name_to_int, z_name_to_int
003A59r 3  rr rr        
003A5Br 3  6E 61 6D 65          .byte "name>int"
003A5Fr 3  3E 69 6E 74  
003A63r 3               
003A63r 3               nt_bracket_tick:
003A63r 3  03 05                .byte 3, CO+IM
003A65r 3  rr rr rr rr          .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
003A69r 3  rr rr        
003A6Br 3  5B 27 5D             .byte "[']"
003A6Er 3               
003A6Er 3               nt_tick:
003A6Er 3  01 00                .byte 1, 0
003A70r 3  rr rr rr rr          .word nt_bracket_tick, xt_tick, z_tick
003A74r 3  rr rr        
003A76r 3  27                   .byte "'"
003A77r 3               
003A77r 3               nt_find_name:
003A77r 3  09 10                .byte 9, UF
003A79r 3  rr rr rr rr          .word nt_tick, xt_find_name, z_find_name
003A7Dr 3  rr rr        
003A7Fr 3  66 69 6E 64          .byte "find-name"
003A83r 3  2D 6E 61 6D  
003A87r 3  65           
003A88r 3               
003A88r 3               nt_fill:
003A88r 3  04 10                .byte 4, UF
003A8Ar 3  rr rr rr rr          .word nt_find_name, xt_fill, z_fill
003A8Er 3  rr rr        
003A90r 3  66 69 6C 6C          .byte "fill"
003A94r 3               
003A94r 3               nt_blank:
003A94r 3  05 00                .byte 5, 0     ; underflow checked by FILL
003A96r 3  rr rr rr rr          .word nt_fill, xt_blank, z_blank
003A9Ar 3  rr rr        
003A9Cr 3  62 6C 61 6E          .byte "blank"
003AA0r 3  6B           
003AA1r 3               
003AA1r 3               nt_erase:
003AA1r 3  05 00                .byte 5, 0      ; underflow checked by FILL
003AA3r 3  rr rr rr rr          .word nt_blank, xt_erase, z_erase
003AA7r 3  rr rr        
003AA9r 3  65 72 61 73          .byte "erase"
003AADr 3  65           
003AAEr 3               
003AAEr 3               nt_d_plus:
003AAEr 3  02 10                .byte 2, UF
003AB0r 3  rr rr rr rr          .word nt_erase, xt_d_plus, z_d_plus
003AB4r 3  rr rr        
003AB6r 3  64 2B                .byte "d+"
003AB8r 3               
003AB8r 3               nt_d_minus:
003AB8r 3  02 10                .byte 2, UF
003ABAr 3  rr rr rr rr          .word nt_d_plus, xt_d_minus, z_d_minus
003ABEr 3  rr rr        
003AC0r 3  64 2D                .byte "d-"
003AC2r 3               
003AC2r 3               nt_d_to_s:
003AC2r 3  03 10                .byte 3, UF
003AC4r 3  rr rr rr rr          .word nt_d_minus, xt_d_to_s, z_d_to_s
003AC8r 3  rr rr        
003ACAr 3  64 3E 73             .byte "d>s"
003ACDr 3               
003ACDr 3               nt_s_to_d:
003ACDr 3  03 10                .byte 3, UF
003ACFr 3  rr rr rr rr          .word nt_d_to_s, xt_s_to_d, z_s_to_d
003AD3r 3  rr rr        
003AD5r 3  73 3E 64             .byte "s>d"
003AD8r 3               
003AD8r 3               nt_to:
003AD8r 3  02 0C                .byte 2, NN+IM
003ADAr 3  rr rr rr rr          .word nt_s_to_d, xt_to, z_to
003ADEr 3  rr rr        
003AE0r 3  74 6F                .byte "to"
003AE2r 3               
003AE2r 3               nt_value:               ; same code as CONSTANT
003AE2r 3  05 10                .byte 5, UF
003AE4r 3  rr rr rr rr          .word nt_to, xt_constant, z_constant
003AE8r 3  rr rr        
003AEAr 3  76 61 6C 75          .byte "value"
003AEEr 3  65           
003AEFr 3               
003AEFr 3               nt_constant:
003AEFr 3  08 10                .byte 8, UF
003AF1r 3  rr rr rr rr          .word nt_value, xt_constant, z_constant
003AF5r 3  rr rr        
003AF7r 3  63 6F 6E 73          .byte "constant"
003AFBr 3  74 61 6E 74  
003AFFr 3               
003AFFr 3               nt_variable:
003AFFr 3  08 00                .byte 8, 0
003B01r 3  rr rr rr rr          .word nt_constant, xt_variable, z_variable
003B05r 3  rr rr        
003B07r 3  76 61 72 69          .byte "variable"
003B0Br 3  61 62 6C 65  
003B0Fr 3               
003B0Fr 3               nt_does:
003B0Fr 3  05 05                .byte 5, CO+IM
003B11r 3  rr rr rr rr          .word nt_variable, xt_does, z_does
003B15r 3  rr rr        
003B17r 3  64 6F 65 73          .byte "does>"
003B1Br 3  3E           
003B1Cr 3               
003B1Cr 3               nt_create:
003B1Cr 3  06 00                .byte 6, 0
003B1Er 3  rr rr rr rr          .word nt_does, xt_create, z_create
003B22r 3  rr rr        
003B24r 3  63 72 65 61          .byte "create"
003B28r 3  74 65        
003B2Ar 3               
003B2Ar 3               nt_allot:
003B2Ar 3  05 10                .byte 5, UF
003B2Cr 3  rr rr rr rr          .word nt_create, xt_allot, z_allot
003B30r 3  rr rr        
003B32r 3  61 6C 6C 6F          .byte "allot"
003B36r 3  74           
003B37r 3               
003B37r 3               nt_key:
003B37r 3  03 00                .byte 3, 0
003B39r 3  rr rr rr rr          .word nt_allot, xt_key, z_key
003B3Dr 3  rr rr        
003B3Fr 3  6B 65 79             .byte "key"
003B42r 3               
003B42r 3               nt_depth:
003B42r 3  05 00                .byte 5, 0
003B44r 3  rr rr rr rr          .word nt_key, xt_depth, z_depth
003B48r 3  rr rr        
003B4Ar 3  64 65 70 74          .byte "depth"
003B4Er 3  68           
003B4Fr 3               
003B4Fr 3               nt_unused:
003B4Fr 3  06 00                .byte 6, 0
003B51r 3  rr rr rr rr          .word nt_depth, xt_unused, z_unused
003B55r 3  rr rr        
003B57r 3  75 6E 75 73          .byte "unused"
003B5Br 3  65 64        
003B5Dr 3               
003B5Dr 3               nt_r_to_input:
003B5Dr 3  07 08                .byte 7, NN
003B5Fr 3  rr rr rr rr          .word nt_unused, xt_r_to_input, z_r_to_input
003B63r 3  rr rr        
003B65r 3  72 3E 69 6E          .byte "r>input"
003B69r 3  70 75 74     
003B6Cr 3               
003B6Cr 3               nt_input_to_r:
003B6Cr 3  07 08                .byte 7, NN
003B6Er 3  rr rr rr rr          .word nt_r_to_input, xt_input_to_r, z_input_to_r
003B72r 3  rr rr        
003B74r 3  69 6E 70 75          .byte "input>r"
003B78r 3  74 3E 72     
003B7Br 3               
003B7Br 3               nt_accept:
003B7Br 3  06 18                .byte 6, UF+NN
003B7Dr 3  rr rr rr rr          .word nt_input_to_r, xt_accept, z_accept
003B81r 3  rr rr        
003B83r 3  61 63 63 65          .byte "accept"
003B87r 3  70 74        
003B89r 3               
003B89r 3               nt_refill:
003B89r 3  06 00                .byte 6, 0
003B8Br 3  rr rr rr rr          .word nt_accept, xt_refill, z_refill
003B8Fr 3  rr rr        
003B91r 3  72 65 66 69          .byte "refill"
003B95r 3  6C 6C        
003B97r 3               
003B97r 3               nt_slash_string:
003B97r 3  07 10                .byte 7, UF
003B99r 3  rr rr rr rr          .word nt_refill, xt_slash_string, z_slash_string
003B9Dr 3  rr rr        
003B9Fr 3  2F 73 74 72          .byte "/string"
003BA3r 3  69 6E 67     
003BA6r 3               
003BA6r 3               nt_minus_leading:
003BA6r 3  08 10                .byte 8, UF
003BA8r 3  rr rr rr rr          .word nt_slash_string, xt_minus_leading, z_minus_leading
003BACr 3  rr rr        
003BAEr 3  2D 6C 65 61          .byte "-leading"
003BB2r 3  64 69 6E 67  
003BB6r 3               
003BB6r 3               nt_minus_trailing:
003BB6r 3  09 10                .byte 9, UF
003BB8r 3  rr rr rr rr          .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
003BBCr 3  rr rr        
003BBEr 3  2D 74 72 61          .byte "-trailing"
003BC2r 3  69 6C 69 6E  
003BC6r 3  67           
003BC7r 3               
003BC7r 3               nt_bl:
003BC7r 3  02 00                .byte 2, 0
003BC9r 3  rr rr rr rr          .word nt_minus_trailing, xt_bl, z_bl
003BCDr 3  rr rr        
003BCFr 3  62 6C                .byte "bl"
003BD1r 3               
003BD1r 3               nt_spaces:
003BD1r 3  06 10                .byte 6, UF
003BD3r 3  rr rr rr rr          .word nt_bl, xt_spaces, z_spaces
003BD7r 3  rr rr        
003BD9r 3  73 70 61 63          .byte "spaces"
003BDDr 3  65 73        
003BDFr 3               
003BDFr 3               nt_bounds:
003BDFr 3  06 10                .byte 6, UF
003BE1r 3  rr rr rr rr          .word nt_spaces, xt_bounds, z_bounds
003BE5r 3  rr rr        
003BE7r 3  62 6F 75 6E          .byte "bounds"
003BEBr 3  64 73        
003BEDr 3               
003BEDr 3               nt_c_comma:
003BEDr 3  02 10                .byte 2, UF
003BEFr 3  rr rr rr rr          .word nt_bounds, xt_c_comma, z_c_comma
003BF3r 3  rr rr        
003BF5r 3  63 2C                .byte "c,"
003BF7r 3               
003BF7r 3               nt_dnegate:
003BF7r 3  07 10                .byte 7, UF
003BF9r 3  rr rr rr rr          .word nt_c_comma, xt_dnegate, z_dnegate
003BFDr 3  rr rr        
003BFFr 3  64 6E 65 67          .byte "dnegate"
003C03r 3  61 74 65     
003C06r 3               
003C06r 3               nt_negate:
003C06r 3  06 10                .byte 6, UF
003C08r 3  rr rr rr rr          .word nt_dnegate, xt_negate, z_negate
003C0Cr 3  rr rr        
003C0Er 3  6E 65 67 61          .byte "negate"
003C12r 3  74 65        
003C14r 3               
003C14r 3               nt_invert:
003C14r 3  06 10                .byte 6, UF
003C16r 3  rr rr rr rr          .word nt_negate, xt_invert, z_invert
003C1Ar 3  rr rr        
003C1Cr 3  69 6E 76 65          .byte "invert"
003C20r 3  72 74        
003C22r 3               
003C22r 3               nt_two_to_r:
003C22r 3  03 11                .byte 3, CO+UF          ; native is special case
003C24r 3  rr rr rr rr          .word nt_invert, xt_two_to_r, z_two_to_r
003C28r 3  rr rr        
003C2Ar 3  32 3E 72             .byte "2>r"
003C2Dr 3               
003C2Dr 3               nt_two_r_from:
003C2Dr 3  03 01                .byte 3, CO             ; native is special case
003C2Fr 3  rr rr rr rr          .word nt_two_to_r, xt_two_r_from, z_two_r_from
003C33r 3  rr rr        
003C35r 3  32 72 3E             .byte "2r>"
003C38r 3               
003C38r 3               nt_two_r_fetch:
003C38r 3  03 09                .byte 3, CO+NN          ; native is special case, leave NN for now
003C3Ar 3  rr rr rr rr          .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
003C3Er 3  rr rr        
003C40r 3  32 72 40             .byte "2r@"
003C43r 3               
003C43r 3               nt_two_literal:
003C43r 3  08 14                .byte 8, UF+IM
003C45r 3  rr rr rr rr          .word nt_two_r_fetch, xt_two_literal, z_two_literal
003C49r 3  rr rr        
003C4Br 3  32 6C 69 74          .byte "2literal"
003C4Fr 3  65 72 61 6C  
003C53r 3               
003C53r 3               nt_two_constant:
003C53r 3  09 10                .byte 9, UF
003C55r 3  rr rr rr rr          .word nt_two_literal, xt_two_constant, z_two_constant
003C59r 3  rr rr        
003C5Br 3  32 63 6F 6E          .byte "2constant"
003C5Fr 3  73 74 61 6E  
003C63r 3  74           
003C64r 3               
003C64r 3               nt_two_variable:
003C64r 3  09 00                .byte 9, 0
003C66r 3  rr rr rr rr          .word nt_two_constant, xt_two_variable, z_two_variable
003C6Ar 3  rr rr        
003C6Cr 3  32 76 61 72          .byte "2variable"
003C70r 3  69 61 62 6C  
003C74r 3  65           
003C75r 3               
003C75r 3               nt_two_fetch:
003C75r 3  02 10                .byte 2, UF
003C77r 3  rr rr rr rr          .word nt_two_variable, xt_two_fetch, z_two_fetch
003C7Br 3  rr rr        
003C7Dr 3  32 40                .byte "2@"
003C7Fr 3               
003C7Fr 3               nt_two_store:
003C7Fr 3  02 10                .byte 2, UF
003C81r 3  rr rr rr rr          .word nt_two_fetch, xt_two_store, z_two_store
003C85r 3  rr rr        
003C87r 3  32 21                .byte "2!"
003C89r 3               
003C89r 3               nt_two_over:
003C89r 3  05 10                .byte 5, UF
003C8Br 3  rr rr rr rr          .word nt_two_store, xt_two_over, z_two_over
003C8Fr 3  rr rr        
003C91r 3  32 6F 76 65          .byte "2over"
003C95r 3  72           
003C96r 3               
003C96r 3               nt_two_swap:
003C96r 3  05 10                .byte 5, UF
003C98r 3  rr rr rr rr          .word nt_two_over, xt_two_swap, z_two_swap
003C9Cr 3  rr rr        
003C9Er 3  32 73 77 61          .byte "2swap"
003CA2r 3  70           
003CA3r 3               
003CA3r 3               nt_two_drop:
003CA3r 3  05 10                .byte 5, UF
003CA5r 3  rr rr rr rr          .word nt_two_swap, xt_two_drop, z_two_drop
003CA9r 3  rr rr        
003CABr 3  32 64 72 6F          .byte "2drop"
003CAFr 3  70           
003CB0r 3               
003CB0r 3               nt_max:
003CB0r 3  03 10                .byte 3, UF
003CB2r 3  rr rr rr rr          .word nt_two_drop, xt_max, z_max
003CB6r 3  rr rr        
003CB8r 3  6D 61 78             .byte "max"
003CBBr 3               
003CBBr 3               nt_min:
003CBBr 3  03 10                .byte 3, UF
003CBDr 3  rr rr rr rr          .word nt_max, xt_min, z_min
003CC1r 3  rr rr        
003CC3r 3  6D 69 6E             .byte "min"
003CC6r 3               
003CC6r 3               nt_zero_less:
003CC6r 3  02 10                .byte 2, UF
003CC8r 3  rr rr rr rr          .word nt_min, xt_zero_less, z_zero_less
003CCCr 3  rr rr        
003CCEr 3  30 3C                .byte "0<"
003CD0r 3               
003CD0r 3               nt_zero_greater:
003CD0r 3  02 10                .byte 2, UF
003CD2r 3  rr rr rr rr          .word nt_zero_less, xt_zero_greater, z_zero_greater
003CD6r 3  rr rr        
003CD8r 3  30 3E                .byte "0>"
003CDAr 3               
003CDAr 3               nt_zero_unequal:
003CDAr 3  03 10                .byte 3, UF
003CDCr 3  rr rr rr rr          .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
003CE0r 3  rr rr        
003CE2r 3  30 3C 3E             .byte "0<>"
003CE5r 3               
003CE5r 3               nt_zero_equal:
003CE5r 3  02 10                .byte 2, UF
003CE7r 3  rr rr rr rr          .word nt_zero_unequal, xt_zero_equal, z_zero_equal
003CEBr 3  rr rr        
003CEDr 3  30 3D                .byte "0="
003CEFr 3               
003CEFr 3               nt_greater_than:
003CEFr 3  01 10                .byte 1, UF
003CF1r 3  rr rr rr rr          .word nt_zero_equal, xt_greater_than, z_greater_than
003CF5r 3  rr rr        
003CF7r 3  3E                   .byte ">"
003CF8r 3               
003CF8r 3               nt_u_greater_than:
003CF8r 3  02 10                .byte 2, UF
003CFAr 3  rr rr rr rr          .word nt_greater_than, xt_u_greater_than, z_u_greater_than
003CFEr 3  rr rr        
003D00r 3  75 3E                .byte "u>"
003D02r 3               
003D02r 3               nt_u_less_than:
003D02r 3  02 10                .byte 2, UF
003D04r 3  rr rr rr rr          .word nt_u_greater_than, xt_u_less_than, z_u_less_than
003D08r 3  rr rr        
003D0Ar 3  75 3C                .byte "u<"
003D0Cr 3               
003D0Cr 3               nt_less_than:
003D0Cr 3  01 10                .byte 1, UF
003D0Er 3  rr rr rr rr          .word nt_u_less_than, xt_less_than, z_less_than
003D12r 3  rr rr        
003D14r 3  3C                   .byte "<"
003D15r 3               
003D15r 3               nt_not_equals:
003D15r 3  02 10                .byte 2, UF
003D17r 3  rr rr rr rr          .word nt_less_than, xt_not_equals, z_not_equals
003D1Br 3  rr rr        
003D1Dr 3  3C 3E                .byte "<>"
003D1Fr 3               
003D1Fr 3               nt_equal:
003D1Fr 3  01 10                .byte 1, UF
003D21r 3  rr rr rr rr          .word nt_not_equals, xt_equal, z_equal
003D25r 3  rr rr        
003D27r 3  3D                   .byte "="
003D28r 3               
003D28r 3               nt_two_slash:
003D28r 3  02 10                .byte 2, UF
003D2Ar 3  rr rr rr rr          .word nt_equal, xt_two_slash, z_two_slash
003D2Er 3  rr rr        
003D30r 3  32 2F                .byte "2/"
003D32r 3               
003D32r 3               nt_two_star:
003D32r 3  02 10                .byte 2, UF
003D34r 3  rr rr rr rr          .word nt_two_slash, xt_two_star, z_two_star
003D38r 3  rr rr        
003D3Ar 3  32 2A                .byte "2*"
003D3Cr 3               
003D3Cr 3               nt_one_plus:
003D3Cr 3  02 10                .byte 2, UF
003D3Er 3  rr rr rr rr          .word nt_two_star, xt_one_plus, z_one_plus
003D42r 3  rr rr        
003D44r 3  31 2B                .byte "1+"
003D46r 3               
003D46r 3               nt_one_minus:
003D46r 3  02 10                .byte 2, UF
003D48r 3  rr rr rr rr          .word nt_one_plus, xt_one_minus, z_one_minus
003D4Cr 3  rr rr        
003D4Er 3  31 2D                .byte "1-"
003D50r 3               
003D50r 3               nt_here:
003D50r 3  04 00                .byte 4, 0
003D52r 3  rr rr rr rr          .word nt_one_minus, xt_here, z_here
003D56r 3  rr rr        
003D58r 3  68 65 72 65          .byte "here"
003D5Cr 3               
003D5Cr 3               nt_cell_plus:
003D5Cr 3  05 10                .byte 5, UF
003D5Er 3  rr rr rr rr          .word nt_here, xt_cell_plus, z_cell_plus
003D62r 3  rr rr        
003D64r 3  63 65 6C 6C          .byte "cell+"
003D68r 3  2B           
003D69r 3               
003D69r 3               nt_cells:
003D69r 3  05 00                .byte 5, 0
003D6Br 3  rr rr rr rr          .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
003D6Fr 3  rr rr        
003D71r 3  63 65 6C 6C          .byte "cells"
003D75r 3  73           
003D76r 3               
003D76r 3               nt_chars:
003D76r 3  05 12                .byte 5, AN+UF   ; deleted during compile
003D78r 3  rr rr rr rr          .word nt_cells, xt_chars, z_chars
003D7Cr 3  rr rr        
003D7Er 3  63 68 61 72          .byte "chars"
003D82r 3  73           
003D83r 3               
003D83r 3               nt_char_plus:
003D83r 3  05 00                .byte 5, 0
003D85r 3  rr rr rr rr          .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
003D89r 3  rr rr        
003D8Br 3  63 68 61 72          .byte "char+"
003D8Fr 3  2B           
003D90r 3               
003D90r 3               nt_bracket_char:
003D90r 3  06 05                .byte 6, CO+IM
003D92r 3  rr rr rr rr          .word nt_char_plus, xt_bracket_char, z_bracket_char
003D96r 3  rr rr        
003D98r 3  5B 63 68 61          .byte "[char]"
003D9Cr 3  72 5D        
003D9Er 3               
003D9Er 3               nt_char:
003D9Er 3  04 00                .byte 4, 0
003DA0r 3  rr rr rr rr          .word nt_bracket_char, xt_char, z_char
003DA4r 3  rr rr        
003DA6r 3  63 68 61 72          .byte "char"
003DAAr 3               
003DAAr 3               nt_pick:
003DAAr 3  04 00                .byte 4, 0    ; underflow check is complicated, leave off here
003DACr 3  rr rr rr rr          .word nt_char, xt_pick, z_pick
003DB0r 3  rr rr        
003DB2r 3  70 69 63 6B          .byte "pick"
003DB6r 3               
003DB6r 3               nt_lshift:
003DB6r 3  06 10                .byte 6, UF
003DB8r 3  rr rr rr rr          .word nt_pick, xt_lshift, z_lshift
003DBCr 3  rr rr        
003DBEr 3  6C 73 68 69          .byte "lshift"
003DC2r 3  66 74        
003DC4r 3               
003DC4r 3               nt_rshift:
003DC4r 3  06 10                .byte 6, UF
003DC6r 3  rr rr rr rr          .word nt_lshift, xt_rshift, z_rshift
003DCAr 3  rr rr        
003DCCr 3  72 73 68 69          .byte "rshift"
003DD0r 3  66 74        
003DD2r 3               
003DD2r 3               nt_xor:
003DD2r 3  03 10                .byte 3, UF
003DD4r 3  rr rr rr rr          .word nt_rshift, xt_xor, z_xor
003DD8r 3  rr rr        
003DDAr 3  78 6F 72             .byte "xor"
003DDDr 3               
003DDDr 3               nt_or:
003DDDr 3  02 10                .byte 2, UF
003DDFr 3  rr rr rr rr          .word nt_xor, xt_or, z_or
003DE3r 3  rr rr        
003DE5r 3  6F 72                .byte "or"
003DE7r 3               
003DE7r 3               nt_and:
003DE7r 3  03 10                .byte 3, UF
003DE9r 3  rr rr rr rr          .word nt_or, xt_and, z_and
003DEDr 3  rr rr        
003DEFr 3  61 6E 64             .byte "and"
003DF2r 3               
003DF2r 3               nt_dabs:
003DF2r 3  04 10                .byte 4, UF
003DF4r 3  rr rr rr rr          .word nt_and, xt_dabs, z_dabs
003DF8r 3  rr rr        
003DFAr 3  64 61 62 73          .byte "dabs"
003DFEr 3               
003DFEr 3               nt_abs:
003DFEr 3  03 10                .byte 3, UF
003E00r 3  rr rr rr rr          .word nt_dabs, xt_abs, z_abs
003E04r 3  rr rr        
003E06r 3  61 62 73             .byte "abs"
003E09r 3               
003E09r 3               nt_minus:
003E09r 3  01 10                .byte 1, UF
003E0Br 3  rr rr rr rr          .word nt_abs, xt_minus, z_minus
003E0Fr 3  rr rr        
003E11r 3  2D                   .byte "-"
003E12r 3               
003E12r 3               nt_plus:
003E12r 3  01 10                .byte 1, UF
003E14r 3  rr rr rr rr          .word nt_minus, xt_plus, z_plus
003E18r 3  rr rr        
003E1Ar 3  2B                   .byte "+"
003E1Br 3               
003E1Br 3               nt_question_dup:
003E1Br 3  04 10                .byte 4, UF
003E1Dr 3  rr rr rr rr          .word nt_plus, xt_question_dup, z_question_dup
003E21r 3  rr rr        
003E23r 3  3F 64 75 70          .byte "?dup"
003E27r 3               
003E27r 3               nt_two_dup:
003E27r 3  04 10                .byte 4, UF
003E29r 3  rr rr rr rr          .word nt_question_dup, xt_two_dup, z_two_dup
003E2Dr 3  rr rr        
003E2Fr 3  32 64 75 70          .byte "2dup"
003E33r 3               
003E33r 3               nt_two:
003E33r 3  01 00                .byte 1, 0
003E35r 3  rr rr rr rr          .word nt_two_dup, xt_two, z_two
003E39r 3  rr rr        
003E3Br 3  32                   .byte "2"
003E3Cr 3               
003E3Cr 3               nt_one:
003E3Cr 3  01 00                .byte 1, 0
003E3Er 3  rr rr rr rr          .word nt_two, xt_one, z_one
003E42r 3  rr rr        
003E44r 3  31                   .byte "1"
003E45r 3               
003E45r 3               nt_zero:
003E45r 3  01 00                .byte 1, 0
003E47r 3  rr rr rr rr          .word nt_one, xt_zero, z_zero
003E4Br 3  rr rr        
003E4Dr 3  30                   .byte "0"
003E4Er 3               
003E4Er 3               nt_space:
003E4Er 3  05 00                .byte 5, 0
003E50r 3  rr rr rr rr          .word nt_zero, xt_space, z_space
003E54r 3  rr rr        
003E56r 3  73 70 61 63          .byte "space"
003E5Ar 3  65           
003E5Br 3               
003E5Br 3               nt_true:
003E5Br 3  04 00                .byte 4, 0
003E5Dr 3  rr rr rr rr          .word nt_space, xt_true, z_true
003E61r 3  rr rr        
003E63r 3  74 72 75 65          .byte "true"
003E67r 3               
003E67r 3               nt_false:
003E67r 3  05 00                .byte 5, 0
003E69r 3  rr rr rr rr          .word nt_true, xt_false, z_false
003E6Dr 3  rr rr        
003E6Fr 3  66 61 6C 73          .byte "false"
003E73r 3  65           
003E74r 3               
003E74r 3               nt_question:
003E74r 3  01 00                .byte 1, 0
003E76r 3  rr rr rr rr          .word nt_false, xt_question, z_question
003E7Ar 3  rr rr        
003E7Cr 3  3F                   .byte "?"
003E7Dr 3               
003E7Dr 3               nt_ud_dot_r:
003E7Dr 3  04 10                .byte 4, UF
003E7Fr 3  rr rr rr rr          .word nt_question, xt_ud_dot_r, z_ud_dot_r
003E83r 3  rr rr        
003E85r 3  75 64 2E 72          .byte "ud.r"
003E89r 3               
003E89r 3               nt_ud_dot:
003E89r 3  03 10                .byte 3, UF
003E8Br 3  rr rr rr rr          .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
003E8Fr 3  rr rr        
003E91r 3  75 64 2E             .byte "ud."
003E94r 3               
003E94r 3               nt_d_dot_r:
003E94r 3  03 10                .byte 3, UF
003E96r 3  rr rr rr rr          .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
003E9Ar 3  rr rr        
003E9Cr 3  64 2E 72             .byte "d.r"
003E9Fr 3               
003E9Fr 3               nt_d_dot:
003E9Fr 3  02 10                .byte 2, UF
003EA1r 3  rr rr rr rr          .word nt_d_dot_r, xt_d_dot, z_d_dot
003EA5r 3  rr rr        
003EA7r 3  64 2E                .byte "d."
003EA9r 3               
003EA9r 3               nt_dot_r:
003EA9r 3  02 10                .byte 2, UF
003EABr 3  rr rr rr rr          .word nt_d_dot, xt_dot_r, z_dot_r
003EAFr 3  rr rr        
003EB1r 3  2E 72                .byte ".r"
003EB3r 3               
003EB3r 3               nt_u_dot_r:
003EB3r 3  03 10                .byte 3, UF
003EB5r 3  rr rr rr rr          .word nt_dot_r, xt_u_dot_r, z_u_dot_r
003EB9r 3  rr rr        
003EBBr 3  75 2E 72             .byte "u.r"
003EBEr 3               
003EBEr 3               nt_u_dot:
003EBEr 3  02 10                .byte 2, UF
003EC0r 3  rr rr rr rr          .word nt_u_dot_r, xt_u_dot, z_u_dot
003EC4r 3  rr rr        
003EC6r 3  75 2E                .byte "u."
003EC8r 3               
003EC8r 3               nt_dot:
003EC8r 3  01 10                .byte 1, UF
003ECAr 3  rr rr rr rr          .word nt_u_dot, xt_dot, z_dot
003ECEr 3  rr rr        
003ED0r 3  2E                   .byte "."
003ED1r 3               
003ED1r 3               nt_type:
003ED1r 3  04 10                .byte 4, UF
003ED3r 3  rr rr rr rr          .word nt_dot, xt_type, z_type
003ED7r 3  rr rr        
003ED9r 3  74 79 70 65          .byte "type"
003EDDr 3               
003EDDr 3               nt_emit:
003EDDr 3  04 18                .byte 4, NN+UF
003EDFr 3  rr rr rr rr          .word nt_type, xt_emit, z_emit
003EE3r 3  rr rr        
003EE5r 3  65 6D 69 74          .byte "emit"
003EE9r 3               
003EE9r 3               nt_execute:
003EE9r 3  07 10                .byte 7, UF
003EEBr 3  rr rr rr rr          .word nt_emit, xt_execute, z_execute
003EEFr 3  rr rr        
003EF1r 3  65 78 65 63          .byte "execute"
003EF5r 3  75 74 65     
003EF8r 3               
003EF8r 3               nt_plus_store:
003EF8r 3  02 10                .byte 2, UF
003EFAr 3  rr rr rr rr          .word nt_execute, xt_plus_store, z_plus_store
003EFEr 3  rr rr        
003F00r 3  2B 21                .byte "+!"
003F02r 3               
003F02r 3               nt_c_store:
003F02r 3  02 10                .byte 2, UF
003F04r 3  rr rr rr rr          .word nt_plus_store, xt_c_store, z_c_store
003F08r 3  rr rr        
003F0Ar 3  63 21                .byte "c!"
003F0Cr 3               
003F0Cr 3               nt_c_fetch:
003F0Cr 3  02 10                .byte 2, UF
003F0Er 3  rr rr rr rr          .word nt_c_store, xt_c_fetch, z_c_fetch
003F12r 3  rr rr        
003F14r 3  63 40                .byte "c@"
003F16r 3               
003F16r 3               nt_comma:
003F16r 3  01 10                .byte 1, UF
003F18r 3  rr rr rr rr          .word nt_c_fetch, xt_comma, z_comma
003F1Cr 3  rr rr        
003F1Er 3  2C                   .byte ","
003F1Fr 3               
003F1Fr 3               nt_tuck:
003F1Fr 3  04 10                .byte 4, UF
003F21r 3  rr rr rr rr          .word nt_comma, xt_tuck, z_tuck
003F25r 3  rr rr        
003F27r 3  74 75 63 6B          .byte "tuck"
003F2Br 3               
003F2Br 3               nt_not_rote:
003F2Br 3  04 10                .byte 4, UF
003F2Dr 3  rr rr rr rr          .word nt_tuck, xt_not_rote, z_not_rote
003F31r 3  rr rr        
003F33r 3  2D 72 6F 74          .byte "-rot"
003F37r 3               
003F37r 3               nt_rot:
003F37r 3  03 10                .byte 3, UF
003F39r 3  rr rr rr rr          .word nt_not_rote, xt_rot, z_rot
003F3Dr 3  rr rr        
003F3Fr 3  72 6F 74             .byte "rot"
003F42r 3               
003F42r 3               nt_nip:
003F42r 3  03 10                .byte 3, UF
003F44r 3  rr rr rr rr          .word nt_rot, xt_nip, z_nip
003F48r 3  rr rr        
003F4Ar 3  6E 69 70             .byte "nip"
003F4Dr 3               
003F4Dr 3               nt_r_fetch:
003F4Dr 3  02 01                .byte 2, CO    ; native is special case
003F4Fr 3  rr rr rr rr          .word nt_nip, xt_r_fetch, z_r_fetch
003F53r 3  rr rr        
003F55r 3  72 40                .byte "r@"
003F57r 3               
003F57r 3               nt_r_from:
003F57r 3  02 01                .byte 2, CO    ; native is special case
003F59r 3  rr rr rr rr          .word nt_r_fetch, xt_r_from, z_r_from
003F5Dr 3  rr rr        
003F5Fr 3  72 3E                .byte "r>"
003F61r 3               
003F61r 3               nt_to_r:
003F61r 3  02 11                .byte 2, CO+UF ; native is special case
003F63r 3  rr rr rr rr          .word nt_r_from, xt_to_r, z_to_r
003F67r 3  rr rr        
003F69r 3  3E 72                .byte ">r"
003F6Br 3               
003F6Br 3               nt_over:
003F6Br 3  04 10                .byte 4, UF
003F6Dr 3  rr rr rr rr          .word nt_to_r, xt_over, z_over
003F71r 3  rr rr        
003F73r 3  6F 76 65 72          .byte "over"
003F77r 3               
003F77r 3               nt_fetch:
003F77r 3  01 10                .byte 1, UF
003F79r 3  rr rr rr rr          .word nt_over, xt_fetch, z_fetch
003F7Dr 3  rr rr        
003F7Fr 3  40                   .byte "@"
003F80r 3               
003F80r 3               nt_store:
003F80r 3  01 10                .byte 1, UF
003F82r 3  rr rr rr rr          .word nt_fetch, xt_store, z_store
003F86r 3  rr rr        
003F88r 3  21                   .byte "!"
003F89r 3               
003F89r 3               nt_swap:
003F89r 3  04 10                .byte 4, UF
003F8Br 3  rr rr rr rr          .word nt_store, xt_swap, z_swap
003F8Fr 3  rr rr        
003F91r 3  73 77 61 70          .byte "swap"
003F95r 3               
003F95r 3               nt_dup:
003F95r 3  03 10                .byte 3, UF
003F97r 3  rr rr rr rr          .word nt_swap, xt_dup, z_dup
003F9Br 3  rr rr        
003F9Dr 3  64 75 70             .byte "dup"
003FA0r 3               
003FA0r 3               ; DROP is always the first native word in the Dictionary
003FA0r 3               dictionary_start:
003FA0r 3               nt_drop:
003FA0r 3  04 10                .byte 4, UF
003FA2r 3  rr rr rr rr          .word nt_dup, xt_drop, z_drop
003FA6r 3  rr rr        
003FA8r 3  64 72 6F 70          .byte "drop"
003FACr 3               
003FACr 3               ; END of FORTH-WORDLIST
003FACr 3               
003FACr 3               
003FACr 3               ; ROOT-WORDLIST
003FACr 3                       ; This is a short wordlist that has just the words needed to
003FACr 3                       ; set the wordlists. These words are also included in the
003FACr 3                       ; FORTH-WORDLIST as well.
003FACr 3               
003FACr 3               nt_root_words:
003FACr 3  05 00                .byte 5, 0
003FAEr 3  00 00 rr rr          .word 0000, xt_words, z_words
003FB2r 3  rr rr        
003FB4r 3  77 6F 72 64          .byte "words"
003FB8r 3  73           
003FB9r 3               
003FB9r 3               nt_root_forth_wordlist: ; shares code with ZERO
003FB9r 3  0E 00                .byte 14, 0
003FBBr 3  rr rr rr rr          .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
003FBFr 3  rr rr        
003FC1r 3  66 6F 72 74          .byte "forth-wordlist"
003FC5r 3  68 2D 77 6F  
003FC9r 3  72 64 6C 69  
003FCFr 3               
003FCFr 3               nt_root_forth:
003FCFr 3  05 00                .byte 5, 0
003FD1r 3  rr rr rr rr          .word nt_root_forth_wordlist, xt_forth, z_forth
003FD5r 3  rr rr        
003FD7r 3  66 6F 72 74          .byte "forth"
003FDBr 3  68           
003FDCr 3               
003FDCr 3               root_dictionary_start:
003FDCr 3               nt_root_set_order:
003FDCr 3  09 00                .byte 9, 0
003FDEr 3  rr rr rr rr          .word nt_root_forth, xt_set_order, z_set_order
003FE2r 3  rr rr        
003FE4r 3  73 65 74 2D          .byte "set-order"
003FE8r 3  6F 72 64 65  
003FECr 3  72           
003FEDr 3               
003FEDr 3               ; END of ROOT-WORDLIST
003FEDr 3               
003FEDr 3               
003FEDr 3               ; ; EDITOR-WORDLIST
003FEDr 3               
003FEDr 3               ; nt_editor_enter_screen:
003FEDr 3               ;         .byte 12, 0
003FEDr 3               ;         .word 0000, xt_editor_enter_screen, z_editor_enter_screen
003FEDr 3               ;         .byte "enter-screen"
003FEDr 3               
003FEDr 3               ; nt_editor_erase_screen:
003FEDr 3               ;         .byte 12, 0
003FEDr 3               ;         .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
003FEDr 3               ;         .byte "erase-screen"
003FEDr 3               
003FEDr 3               ; nt_editor_el:
003FEDr 3               ;         .byte 2, 0
003FEDr 3               ;         .word nt_editor_erase_screen, xt_editor_el, z_editor_el
003FEDr 3               ;         .byte "el"
003FEDr 3               
003FEDr 3               ; nt_editor_l:
003FEDr 3               ;         .byte 1, 0
003FEDr 3               ;         .word nt_editor_el, xt_editor_l, z_editor_l
003FEDr 3               ;         .byte "l"
003FEDr 3               
003FEDr 3               ; nt_editor_line:
003FEDr 3               ;         .byte 4, UF
003FEDr 3               ;         .word nt_editor_l, xt_editor_line, z_editor_line
003FEDr 3               ;         .byte "line"
003FEDr 3               
003FEDr 3               editor_dictionary_start:
003FEDr 3               ; nt_editor_o:
003FEDr 3               ;         .byte 1, 0
003FEDr 3               ;         .word nt_editor_line, xt_editor_o, z_editor_o
003FEDr 3               ;         .byte "o"
003FEDr 3               
003FEDr 3               ; ; END of EDITOR-WORDLIST
003FEDr 3               
003FEDr 3               
003FEDr 3               ; ; ASSEMBLER-WORDLIST
003FEDr 3               
003FEDr 3               ; ; Labels for the opcodes have the format "nt_asm_<OPC>" where a futher
003FEDr 3               ; ; underscore replaces any dot present in the SAN mnemonic. The hash sign for
003FEDr 3               ; ; immediate addressing is replaced by an "h" (for example, the label code for
003FEDr 3               ; ; "lda.#" is "xt_adm_lda_h"). All opcodes are immediate.
003FEDr 3               assembler_dictionary_start:
003FEDr 3               ; nt_asm_adc_h:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_adc_x
003FEDr 3               ; 		.word xt_asm_adc_h, z_asm_adc_h
003FEDr 3               ; 		.byte "adc.#"
003FEDr 3               
003FEDr 3               ; nt_asm_adc_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_adc_y
003FEDr 3               ; 		.word xt_asm_adc_x, z_asm_adc_x
003FEDr 3               ; 		.byte "adc.x"
003FEDr 3               
003FEDr 3               ; nt_asm_adc_y:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_adc_z
003FEDr 3               ; 		.word xt_asm_adc_y, z_asm_adc_y
003FEDr 3               ; 		.byte "adc.y"
003FEDr 3               
003FEDr 3               ; nt_asm_adc_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_adc_zi
003FEDr 3               ; 		.word xt_asm_adc_z, z_asm_adc_z
003FEDr 3               ; 		.byte "adc.z"
003FEDr 3               
003FEDr 3               ; nt_asm_adc_zi:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_adc_ziy
003FEDr 3               ; 		.word xt_asm_adc_zi, z_asm_adc_zi
003FEDr 3               ; 		.byte "adc.zi"
003FEDr 3               
003FEDr 3               ; nt_asm_adc_ziy:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_adc_zx
003FEDr 3               ; 		.word xt_asm_adc_ziy, z_asm_adc_ziy
003FEDr 3               ; 		.byte "adc.ziy"
003FEDr 3               
003FEDr 3               ; nt_asm_adc_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_adc_zxi
003FEDr 3               ; 		.word xt_asm_adc_zx, z_asm_adc_zx
003FEDr 3               ; 		.byte "adc.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_adc_zxi:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_and
003FEDr 3               ; 		.word xt_asm_adc_zxi, z_asm_adc_zxi
003FEDr 3               ; 		.byte "adc.zxi"
003FEDr 3               
003FEDr 3               ; nt_asm_and:     ; not "and" because of conflicts with Forth word
003FEDr 3               ; 		.byte 4, IM
003FEDr 3               ;                 .word nt_asm_and_h
003FEDr 3               ; 		.word xt_asm_and, z_asm_and
003FEDr 3               ; 		.byte "and."
003FEDr 3               
003FEDr 3               ; nt_asm_and_h:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_and_x
003FEDr 3               ; 		.word xt_asm_and_h, z_asm_and_h
003FEDr 3               ; 		.byte "and.#"
003FEDr 3               
003FEDr 3               ; nt_asm_and_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_and_y
003FEDr 3               ; 		.word xt_asm_and_x, z_asm_and_x
003FEDr 3               ; 		.byte "and.x"
003FEDr 3               
003FEDr 3               ; nt_asm_and_y:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_and_z
003FEDr 3               ; 		.word xt_asm_and_y, z_asm_and_y
003FEDr 3               ; 		.byte "and.y"
003FEDr 3               
003FEDr 3               ; nt_asm_and_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_and_zi
003FEDr 3               ; 		.word xt_asm_and_z, z_asm_and_z
003FEDr 3               ; 		.byte "and.z"
003FEDr 3               
003FEDr 3               ; nt_asm_and_zi:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_and_ziy
003FEDr 3               ; 		.word xt_asm_and_zi, z_asm_and_zi
003FEDr 3               ; 		.byte "and.zi"
003FEDr 3               
003FEDr 3               ; nt_asm_and_ziy:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_and_zx
003FEDr 3               ; 		.word xt_asm_and_ziy, z_asm_and_ziy
003FEDr 3               ; 		.byte "and.ziy"
003FEDr 3               
003FEDr 3               ; nt_asm_and_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_and_zxi
003FEDr 3               ; 		.word xt_asm_and_zx, z_asm_and_zx
003FEDr 3               ; 		.byte "and.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_and_zxi:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_asl
003FEDr 3               ; 		.word xt_asm_and_zxi, z_asm_and_zxi
003FEDr 3               ; 		.byte "and.zxi"
003FEDr 3               
003FEDr 3               ; nt_asm_asl:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_asl_a
003FEDr 3               ; 		.word xt_asm_asl, z_asm_asl
003FEDr 3               ; 		.byte "asl"
003FEDr 3               
003FEDr 3               ; nt_asm_asl_a:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_asl_x
003FEDr 3               ; 		.word xt_asm_asl_a, z_asm_asl_a
003FEDr 3               ; 		.byte "asl.a"
003FEDr 3               
003FEDr 3               ; nt_asm_asl_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_asl_z
003FEDr 3               ; 		.word xt_asm_asl_x, z_asm_asl_x
003FEDr 3               ; 		.byte "asl.x"
003FEDr 3               
003FEDr 3               ; nt_asm_asl_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_asl_zx
003FEDr 3               ; 		.word xt_asm_asl_z, z_asm_asl_z
003FEDr 3               ; 		.byte "asl.z"
003FEDr 3               
003FEDr 3               ; nt_asm_asl_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_bcc
003FEDr 3               ; 		.word xt_asm_asl_zx, z_asm_asl_zx
003FEDr 3               ; 		.byte "asl.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_bcc:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_bcs
003FEDr 3               ; 		.word xt_asm_bcc, z_asm_bcc
003FEDr 3               ; 		.byte "bcc"
003FEDr 3               
003FEDr 3               ; nt_asm_bcs:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_beq
003FEDr 3               ; 		.word xt_asm_bcs, z_asm_bcs
003FEDr 3               ; 		.byte "bcs"
003FEDr 3               
003FEDr 3               ; nt_asm_beq:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_bit
003FEDr 3               ; 		.word xt_asm_beq, z_asm_beq
003FEDr 3               ; 		.byte "beq"
003FEDr 3               
003FEDr 3               ; nt_asm_bit:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_bit_h
003FEDr 3               ; 		.word xt_asm_bit, z_asm_bit
003FEDr 3               ; 		.byte "bit"
003FEDr 3               
003FEDr 3               ; nt_asm_bit_h:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_bit_x
003FEDr 3               ; 		.word xt_asm_bit_h, z_asm_bit_h
003FEDr 3               ; 		.byte "bit.#"
003FEDr 3               
003FEDr 3               ; nt_asm_bit_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_bit_z
003FEDr 3               ; 		.word xt_asm_bit_x, z_asm_bit_x
003FEDr 3               ; 		.byte "bit.x"
003FEDr 3               
003FEDr 3               ; nt_asm_bit_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_bit_zx
003FEDr 3               ; 		.word xt_asm_bit_z, z_asm_bit_z
003FEDr 3               ; 		.byte "bit.z"
003FEDr 3               
003FEDr 3               ; nt_asm_bit_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_bmi
003FEDr 3               ; 		.word xt_asm_bit_zx, z_asm_bit_zx
003FEDr 3               ; 		.byte "bit.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_bmi:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_bne
003FEDr 3               ; 		.word xt_asm_bmi, z_asm_bmi
003FEDr 3               ; 		.byte "bmi"
003FEDr 3               
003FEDr 3               ; nt_asm_bne:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_bpl
003FEDr 3               ; 		.word xt_asm_bne, z_asm_bne
003FEDr 3               ; 		.byte "bne"
003FEDr 3               
003FEDr 3               ; nt_asm_bpl:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_bra
003FEDr 3               ; 		.word xt_asm_bpl, z_asm_bpl
003FEDr 3               ; 		.byte "bpl"
003FEDr 3               
003FEDr 3               ; nt_asm_bra:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_brk
003FEDr 3               ; 		.word xt_asm_bra, z_asm_bra
003FEDr 3               ; 		.byte "bra"
003FEDr 3               
003FEDr 3               ; nt_asm_brk:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_bvc
003FEDr 3               ; 		.word xt_asm_brk, z_asm_brk
003FEDr 3               ; 		.byte "brk"
003FEDr 3               
003FEDr 3               ; nt_asm_bvc:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_bvs
003FEDr 3               ; 		.word xt_asm_bvc, z_asm_bvc
003FEDr 3               ; 		.byte "bvc"
003FEDr 3               
003FEDr 3               ; nt_asm_bvs:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_clc
003FEDr 3               ; 		.word xt_asm_bvs, z_asm_bvs
003FEDr 3               ; 		.byte "bvs"
003FEDr 3               
003FEDr 3               ; nt_asm_clc:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_cld
003FEDr 3               ; 		.word xt_asm_clc, z_asm_clc
003FEDr 3               ; 		.byte "clc"
003FEDr 3               
003FEDr 3               ; nt_asm_cld:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_cli
003FEDr 3               ; 		.word xt_asm_cld, z_asm_cld
003FEDr 3               ; 		.byte "cld"
003FEDr 3               
003FEDr 3               ; nt_asm_cli:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_clv
003FEDr 3               ; 		.word xt_asm_cli, z_asm_cli
003FEDr 3               ; 		.byte "cli"
003FEDr 3               
003FEDr 3               ; nt_asm_clv:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_cmp
003FEDr 3               ; 		.word xt_asm_clv, z_asm_clv
003FEDr 3               ; 		.byte "clv"
003FEDr 3               
003FEDr 3               ; nt_asm_cmp:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_cmp_h
003FEDr 3               ; 		.word xt_asm_cmp, z_asm_cmp
003FEDr 3               ; 		.byte "cmp"
003FEDr 3               
003FEDr 3               ; nt_asm_cmp_h:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_cmp_x
003FEDr 3               ; 		.word xt_asm_cmp_h, z_asm_cmp_h
003FEDr 3               ; 		.byte "cmp.#"
003FEDr 3               
003FEDr 3               ; nt_asm_cmp_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_cmp_y
003FEDr 3               ; 		.word xt_asm_cmp_x, z_asm_cmp_x
003FEDr 3               ; 		.byte "cmp.x"
003FEDr 3               
003FEDr 3               ; nt_asm_cmp_y:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_cmp_z
003FEDr 3               ; 		.word xt_asm_cmp_y, z_asm_cmp_y
003FEDr 3               ; 		.byte "cmp.y"
003FEDr 3               
003FEDr 3               ; nt_asm_cmp_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_cmp_zi
003FEDr 3               ; 		.word xt_asm_cmp_z, z_asm_cmp_z
003FEDr 3               ; 		.byte "cmp.z"
003FEDr 3               
003FEDr 3               ; nt_asm_cmp_zi:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_cmp_ziy
003FEDr 3               ; 		.word xt_asm_cmp_zi, z_asm_cmp_zi
003FEDr 3               ; 		.byte "cmp.zi"
003FEDr 3               
003FEDr 3               ; nt_asm_cmp_ziy:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_cmp_zx
003FEDr 3               ; 		.word xt_asm_cmp_ziy, z_asm_cmp_ziy
003FEDr 3               ; 		.byte "cmp.ziy"
003FEDr 3               
003FEDr 3               ; nt_asm_cmp_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_cmp_zxi
003FEDr 3               ; 		.word xt_asm_cmp_zx, z_asm_cmp_zx
003FEDr 3               ; 		.byte "cmp.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_cmp_zxi:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_cpx
003FEDr 3               ; 		.word xt_asm_cmp_zxi, z_asm_cmp_zxi
003FEDr 3               ; 		.byte "cmp.zxi"
003FEDr 3               
003FEDr 3               ; nt_asm_cpx:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_cpx_h
003FEDr 3               ; 		.word xt_asm_cpx, z_asm_cpx
003FEDr 3               ; 		.byte "cpx"
003FEDr 3               
003FEDr 3               ; nt_asm_cpx_h:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_cpx_z
003FEDr 3               ; 		.word xt_asm_cpx_h, z_asm_cpx_h
003FEDr 3               ; 		.byte "cpx.#"
003FEDr 3               
003FEDr 3               ; nt_asm_cpx_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_cpy
003FEDr 3               ; 		.word xt_asm_cpx_z, z_asm_cpx_z
003FEDr 3               ; 		.byte "cpx.z"
003FEDr 3               
003FEDr 3               ; nt_asm_cpy:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_cpy_h
003FEDr 3               ; 		.word xt_asm_cpy, z_asm_cpy
003FEDr 3               ; 		.byte "cpy"
003FEDr 3               
003FEDr 3               ; nt_asm_cpy_h:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_cpy_z
003FEDr 3               ; 		.word xt_asm_cpy_h, z_asm_cpy_h
003FEDr 3               ; 		.byte "cpy.#"
003FEDr 3               
003FEDr 3               ; nt_asm_cpy_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_dec
003FEDr 3               ; 		.word xt_asm_cpy_z, z_asm_cpy_z
003FEDr 3               ; 		.byte "cpy.z"
003FEDr 3               
003FEDr 3               ; nt_asm_dec:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_dec_a
003FEDr 3               ; 		.word xt_asm_dec, z_asm_dec
003FEDr 3               ; 		.byte "dec"
003FEDr 3               
003FEDr 3               ; nt_asm_dec_a:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_dec_x
003FEDr 3               ; 		.word xt_asm_dec_a, z_asm_dec_a
003FEDr 3               ; 		.byte "dec.a"
003FEDr 3               
003FEDr 3               ; nt_asm_dec_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_dec_z
003FEDr 3               ; 		.word xt_asm_dec_x, z_asm_dec_x
003FEDr 3               ; 		.byte "dec.x"
003FEDr 3               
003FEDr 3               ; nt_asm_dec_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_dec_zx
003FEDr 3               ; 		.word xt_asm_dec_z, z_asm_dec_z
003FEDr 3               ; 		.byte "dec.z"
003FEDr 3               
003FEDr 3               ; nt_asm_dec_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_dex
003FEDr 3               ; 		.word xt_asm_dec_zx, z_asm_dec_zx
003FEDr 3               ; 		.byte "dec.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_dex:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_dey
003FEDr 3               ; 		.word xt_asm_dex, z_asm_dex
003FEDr 3               ; 		.byte "dex"
003FEDr 3               
003FEDr 3               ; nt_asm_dey:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_eor
003FEDr 3               ; 		.word xt_asm_dey, z_asm_dey
003FEDr 3               ; 		.byte "dey"
003FEDr 3               
003FEDr 3               ; nt_asm_eor:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_eor_h
003FEDr 3               ; 		.word xt_asm_eor, z_asm_eor
003FEDr 3               ; 		.byte "eor"
003FEDr 3               
003FEDr 3               ; nt_asm_eor_h:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_eor_x
003FEDr 3               ; 		.word xt_asm_eor_h, z_asm_eor_h
003FEDr 3               ; 		.byte "eor.#"
003FEDr 3               
003FEDr 3               ; nt_asm_eor_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_eor_y
003FEDr 3               ; 		.word xt_asm_eor_x, z_asm_eor_x
003FEDr 3               ; 		.byte "eor.x"
003FEDr 3               
003FEDr 3               ; nt_asm_eor_y:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_eor_z
003FEDr 3               ; 		.word xt_asm_eor_y, z_asm_eor_y
003FEDr 3               ; 		.byte "eor.y"
003FEDr 3               
003FEDr 3               ; nt_asm_eor_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_eor_zi
003FEDr 3               ; 		.word xt_asm_eor_z, z_asm_eor_z
003FEDr 3               ; 		.byte "eor.z"
003FEDr 3               
003FEDr 3               ; nt_asm_eor_zi:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_eor_ziy
003FEDr 3               ; 		.word xt_asm_eor_zi, z_asm_eor_zi
003FEDr 3               ; 		.byte "eor.zi"
003FEDr 3               
003FEDr 3               ; nt_asm_eor_ziy:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_eor_zx
003FEDr 3               ; 		.word xt_asm_eor_ziy, z_asm_eor_ziy
003FEDr 3               ; 		.byte "eor.ziy"
003FEDr 3               
003FEDr 3               ; nt_asm_eor_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_eor_zxi
003FEDr 3               ; 		.word xt_asm_eor_zx, z_asm_eor_zx
003FEDr 3               ; 		.byte "eor.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_eor_zxi:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_inc
003FEDr 3               ; 		.word xt_asm_eor_zxi, z_asm_eor_zxi
003FEDr 3               ; 		.byte "eor.zxi"
003FEDr 3               
003FEDr 3               ; nt_asm_inc:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_inc_a
003FEDr 3               ; 		.word xt_asm_inc, z_asm_inc
003FEDr 3               ; 		.byte "inc"
003FEDr 3               
003FEDr 3               ; nt_asm_inc_a:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_inc_x
003FEDr 3               ; 		.word xt_asm_inc_a, z_asm_inc_a
003FEDr 3               ; 		.byte "inc.a"
003FEDr 3               
003FEDr 3               ; nt_asm_inc_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_inc_z
003FEDr 3               ; 		.word xt_asm_inc_x, z_asm_inc_x
003FEDr 3               ; 		.byte "inc.x"
003FEDr 3               
003FEDr 3               ; nt_asm_inc_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_inc_zx
003FEDr 3               ; 		.word xt_asm_inc_z, z_asm_inc_z
003FEDr 3               ; 		.byte "inc.z"
003FEDr 3               
003FEDr 3               ; nt_asm_inc_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_inx
003FEDr 3               ; 		.word xt_asm_inc_zx, z_asm_inc_zx
003FEDr 3               ; 		.byte "inc.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_inx:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_iny
003FEDr 3               ; 		.word xt_asm_inx, z_asm_inx
003FEDr 3               ; 		.byte "inx"
003FEDr 3               
003FEDr 3               ; nt_asm_iny:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_jmp
003FEDr 3               ; 		.word xt_asm_iny, z_asm_iny
003FEDr 3               ; 		.byte "iny"
003FEDr 3               
003FEDr 3               ; nt_asm_jmp:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_jmp_i
003FEDr 3               ; 		.word xt_asm_jmp, z_asm_jmp
003FEDr 3               ; 		.byte "jmp"
003FEDr 3               
003FEDr 3               ; nt_asm_jmp_i:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_jmp_xi
003FEDr 3               ; 		.word xt_asm_jmp_i, z_asm_jmp_i
003FEDr 3               ; 		.byte "jmp.i"
003FEDr 3               
003FEDr 3               ; nt_asm_jmp_xi:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_jsr
003FEDr 3               ; 		.word xt_asm_jmp_xi, z_asm_jmp_xi
003FEDr 3               ; 		.byte "jmp.xi"
003FEDr 3               
003FEDr 3               ; nt_asm_jsr:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_lda
003FEDr 3               ; 		.word xt_asm_jsr, z_asm_jsr
003FEDr 3               ; 		.byte "jsr"
003FEDr 3               
003FEDr 3               ; nt_asm_lda:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_lda_h
003FEDr 3               ; 		.word xt_asm_lda, z_asm_lda
003FEDr 3               ; 		.byte "lda"
003FEDr 3               
003FEDr 3               ; nt_asm_lda_h:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_lda_x
003FEDr 3               ; 		.word xt_asm_lda_h, z_asm_lda_h
003FEDr 3               ; 		.byte "lda.#"
003FEDr 3               
003FEDr 3               ; nt_asm_lda_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_lda_y
003FEDr 3               ; 		.word xt_asm_lda_x, z_asm_lda_x
003FEDr 3               ; 		.byte "lda.x"
003FEDr 3               
003FEDr 3               ; nt_asm_lda_y:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_lda_z
003FEDr 3               ; 		.word xt_asm_lda_y, z_asm_lda_y
003FEDr 3               ; 		.byte "lda.y"
003FEDr 3               
003FEDr 3               ; nt_asm_lda_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_lda_zi
003FEDr 3               ; 		.word xt_asm_lda_z, z_asm_lda_z
003FEDr 3               ; 		.byte "lda.z"
003FEDr 3               
003FEDr 3               ; nt_asm_lda_zi:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_lda_ziy
003FEDr 3               ; 		.word xt_asm_lda_zi, z_asm_lda_zi
003FEDr 3               ; 		.byte "lda.zi"
003FEDr 3               
003FEDr 3               ; nt_asm_lda_ziy:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_lda_zx
003FEDr 3               ; 		.word xt_asm_lda_ziy, z_asm_lda_ziy
003FEDr 3               ; 		.byte "lda.ziy"
003FEDr 3               
003FEDr 3               ; nt_asm_lda_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_lda_zxi
003FEDr 3               ; 		.word xt_asm_lda_zx, z_asm_lda_zx
003FEDr 3               ; 		.byte "lda.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_lda_zxi:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_ldx
003FEDr 3               ; 		.word xt_asm_lda_zxi, z_asm_lda_zxi
003FEDr 3               ; 		.byte "lda.zxi"
003FEDr 3               
003FEDr 3               ; nt_asm_ldx:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_ldx_h
003FEDr 3               ; 		.word xt_asm_ldx, z_asm_ldx
003FEDr 3               ; 		.byte "ldx"
003FEDr 3               
003FEDr 3               ; nt_asm_ldx_h:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_ldx_y
003FEDr 3               ; 		.word xt_asm_ldx_h, z_asm_ldx_h
003FEDr 3               ; 		.byte "ldx.#"
003FEDr 3               
003FEDr 3               ; nt_asm_ldx_y:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_ldx_z
003FEDr 3               ; 		.word xt_asm_ldx_y, z_asm_ldx_y
003FEDr 3               ; 		.byte "ldx.y"
003FEDr 3               
003FEDr 3               ; nt_asm_ldx_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_ldx_zy
003FEDr 3               ; 		.word xt_asm_ldx_z, z_asm_ldx_z
003FEDr 3               ; 		.byte "ldx.z"
003FEDr 3               
003FEDr 3               ; nt_asm_ldx_zy:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_ldy
003FEDr 3               ; 		.word xt_asm_ldx_zy, z_asm_ldx_zy
003FEDr 3               ; 		.byte "ldx.zy"
003FEDr 3               
003FEDr 3               ; nt_asm_ldy:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_ldy_h
003FEDr 3               ; 		.word xt_asm_ldy, z_asm_ldy
003FEDr 3               ; 		.byte "ldy"
003FEDr 3               
003FEDr 3               ; nt_asm_ldy_h:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_ldy_x
003FEDr 3               ; 		.word xt_asm_ldy_h, z_asm_ldy_h
003FEDr 3               ; 		.byte "ldy.#"
003FEDr 3               
003FEDr 3               ; nt_asm_ldy_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_ldy_z
003FEDr 3               ; 		.word xt_asm_ldy_x, z_asm_ldy_x
003FEDr 3               ; 		.byte "ldy.x"
003FEDr 3               
003FEDr 3               ; nt_asm_ldy_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_ldy_zx
003FEDr 3               ; 		.word xt_asm_ldy_z, z_asm_ldy_z
003FEDr 3               ; 		.byte "ldy.z"
003FEDr 3               
003FEDr 3               ; nt_asm_ldy_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_lsr
003FEDr 3               ; 		.word xt_asm_ldy_zx, z_asm_ldy_zx
003FEDr 3               ; 		.byte "ldy.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_lsr:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_lsr_a
003FEDr 3               ; 		.word xt_asm_lsr, z_asm_lsr
003FEDr 3               ; 		.byte "lsr"
003FEDr 3               
003FEDr 3               ; nt_asm_lsr_a:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_lsr_x
003FEDr 3               ; 		.word xt_asm_lsr_a, z_asm_lsr_a
003FEDr 3               ; 		.byte "lsr.a"
003FEDr 3               
003FEDr 3               ; nt_asm_lsr_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_lsr_z
003FEDr 3               ; 		.word xt_asm_lsr_x, z_asm_lsr_x
003FEDr 3               ; 		.byte "lsr.x"
003FEDr 3               
003FEDr 3               ; nt_asm_lsr_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_lsr_zx
003FEDr 3               ; 		.word xt_asm_lsr_z, z_asm_lsr_z
003FEDr 3               ; 		.byte "lsr.z"
003FEDr 3               
003FEDr 3               ; nt_asm_lsr_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_nop
003FEDr 3               ; 		.word xt_asm_lsr_zx, z_asm_lsr_zx
003FEDr 3               ; 		.byte "lsr.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_nop:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_ora
003FEDr 3               ; 		.word xt_asm_nop, z_asm_nop
003FEDr 3               ; 		.byte "nop"
003FEDr 3               
003FEDr 3               ; nt_asm_ora:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_ora_h
003FEDr 3               ; 		.word xt_asm_ora, z_asm_ora
003FEDr 3               ; 		.byte "ora"
003FEDr 3               
003FEDr 3               ; nt_asm_ora_h:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_ora_x
003FEDr 3               ; 		.word xt_asm_ora_h, z_asm_ora_h
003FEDr 3               ; 		.byte "ora.#"
003FEDr 3               
003FEDr 3               ; nt_asm_ora_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_ora_y
003FEDr 3               ; 		.word xt_asm_ora_x, z_asm_ora_x
003FEDr 3               ; 		.byte "ora.x"
003FEDr 3               
003FEDr 3               ; nt_asm_ora_y:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_ora_z
003FEDr 3               ; 		.word xt_asm_ora_y, z_asm_ora_y
003FEDr 3               ; 		.byte "ora.y"
003FEDr 3               
003FEDr 3               ; nt_asm_ora_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_ora_zi
003FEDr 3               ; 		.word xt_asm_ora_z, z_asm_ora_z
003FEDr 3               ; 		.byte "ora.z"
003FEDr 3               
003FEDr 3               ; nt_asm_ora_zi:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_ora_ziy
003FEDr 3               ; 		.word xt_asm_ora_zi, z_asm_ora_zi
003FEDr 3               ; 		.byte "ora.zi"
003FEDr 3               
003FEDr 3               ; nt_asm_ora_ziy:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_ora_zx
003FEDr 3               ; 		.word xt_asm_ora_ziy, z_asm_ora_ziy
003FEDr 3               ; 		.byte "ora.ziy"
003FEDr 3               
003FEDr 3               ; nt_asm_ora_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_ora_zxi
003FEDr 3               ; 		.word xt_asm_ora_zx, z_asm_ora_zx
003FEDr 3               ; 		.byte "ora.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_ora_zxi:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_pha
003FEDr 3               ; 		.word xt_asm_ora_zxi, z_asm_ora_zxi
003FEDr 3               ; 		.byte "ora.zxi"
003FEDr 3               
003FEDr 3               ; nt_asm_pha:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_php
003FEDr 3               ; 		.word xt_asm_pha, z_asm_pha
003FEDr 3               ; 		.byte "pha"
003FEDr 3               
003FEDr 3               ; nt_asm_php:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_phx
003FEDr 3               ; 		.word xt_asm_php, z_asm_php
003FEDr 3               ; 		.byte "php"
003FEDr 3               
003FEDr 3               ; nt_asm_phx:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_phy
003FEDr 3               ; 		.word xt_asm_phx, z_asm_phx
003FEDr 3               ; 		.byte "phx"
003FEDr 3               
003FEDr 3               ; nt_asm_phy:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_pla
003FEDr 3               ; 		.word xt_asm_phy, z_asm_phy
003FEDr 3               ; 		.byte "phy"
003FEDr 3               
003FEDr 3               ; nt_asm_pla:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_plp
003FEDr 3               ; 		.word xt_asm_pla, z_asm_pla
003FEDr 3               ; 		.byte "pla"
003FEDr 3               
003FEDr 3               ; nt_asm_plp:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_plx
003FEDr 3               ; 		.word xt_asm_plp, z_asm_plp
003FEDr 3               ; 		.byte "plp"
003FEDr 3               
003FEDr 3               ; nt_asm_plx:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_ply
003FEDr 3               ; 		.word xt_asm_plx, z_asm_plx
003FEDr 3               ; 		.byte "plx"
003FEDr 3               
003FEDr 3               ; nt_asm_ply:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_rol
003FEDr 3               ; 		.word xt_asm_ply, z_asm_ply
003FEDr 3               ; 		.byte "ply"
003FEDr 3               
003FEDr 3               ; nt_asm_rol:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_rol_a
003FEDr 3               ; 		.word xt_asm_rol, z_asm_rol
003FEDr 3               ; 		.byte "rol"
003FEDr 3               
003FEDr 3               ; nt_asm_rol_a:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_rol_x
003FEDr 3               ; 		.word xt_asm_rol_a, z_asm_rol_a
003FEDr 3               ; 		.byte "rol.a"
003FEDr 3               
003FEDr 3               ; nt_asm_rol_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_rol_z
003FEDr 3               ; 		.word xt_asm_rol_x, z_asm_rol_x
003FEDr 3               ; 		.byte "rol.x"
003FEDr 3               
003FEDr 3               ; nt_asm_rol_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_rol_zx
003FEDr 3               ; 		.word xt_asm_rol_z, z_asm_rol_z
003FEDr 3               ; 		.byte "rol.z"
003FEDr 3               
003FEDr 3               ; nt_asm_rol_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_ror
003FEDr 3               ; 		.word xt_asm_rol_zx, z_asm_rol_zx
003FEDr 3               ; 		.byte "rol.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_ror:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_ror_a
003FEDr 3               ; 		.word xt_asm_ror, z_asm_ror
003FEDr 3               ; 		.byte "ror"
003FEDr 3               
003FEDr 3               ; nt_asm_ror_a:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_ror_x
003FEDr 3               ; 		.word xt_asm_ror_a, z_asm_ror_a
003FEDr 3               ; 		.byte "ror.a"
003FEDr 3               
003FEDr 3               ; nt_asm_ror_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_ror_z
003FEDr 3               ; 		.word xt_asm_ror_x, z_asm_ror_x
003FEDr 3               ; 		.byte "ror.x"
003FEDr 3               
003FEDr 3               ; nt_asm_ror_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_ror_zx
003FEDr 3               ; 		.word xt_asm_ror_z, z_asm_ror_z
003FEDr 3               ; 		.byte "ror.z"
003FEDr 3               
003FEDr 3               ; nt_asm_ror_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_rti
003FEDr 3               ; 		.word xt_asm_ror_zx, z_asm_ror_zx
003FEDr 3               ; 		.byte "ror.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_rti:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_rts
003FEDr 3               ; 		.word xt_asm_rti, z_asm_rti
003FEDr 3               ; 		.byte "rti"
003FEDr 3               
003FEDr 3               ; nt_asm_rts:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_sbc
003FEDr 3               ; 		.word xt_asm_rts, z_asm_rts
003FEDr 3               ; 		.byte "rts"
003FEDr 3               
003FEDr 3               ; nt_asm_sbc:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_sbc_h
003FEDr 3               ; 		.word xt_asm_sbc, z_asm_sbc
003FEDr 3               ; 		.byte "sbc"
003FEDr 3               
003FEDr 3               ; nt_asm_sbc_h:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_sbc_x
003FEDr 3               ; 		.word xt_asm_sbc_h, z_asm_sbc_h
003FEDr 3               ; 		.byte "sbc.#"
003FEDr 3               
003FEDr 3               ; nt_asm_sbc_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_sbc_y
003FEDr 3               ; 		.word xt_asm_sbc_x, z_asm_sbc_x
003FEDr 3               ; 		.byte "sbc.x"
003FEDr 3               
003FEDr 3               ; nt_asm_sbc_y:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_sbc_z
003FEDr 3               ; 		.word xt_asm_sbc_y, z_asm_sbc_y
003FEDr 3               ; 		.byte "sbc.y"
003FEDr 3               
003FEDr 3               ; nt_asm_sbc_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_sbc_zi
003FEDr 3               ; 		.word xt_asm_sbc_z, z_asm_sbc_z
003FEDr 3               ; 		.byte "sbc.z"
003FEDr 3               
003FEDr 3               ; nt_asm_sbc_zi:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_sbc_ziy
003FEDr 3               ; 		.word xt_asm_sbc_zi, z_asm_sbc_zi
003FEDr 3               ; 		.byte "sbc.zi"
003FEDr 3               
003FEDr 3               ; nt_asm_sbc_ziy:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_sbc_zx
003FEDr 3               ; 		.word xt_asm_sbc_ziy, z_asm_sbc_ziy
003FEDr 3               ; 		.byte "sbc.ziy"
003FEDr 3               
003FEDr 3               ; nt_asm_sbc_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_sbc_zxi
003FEDr 3               ; 		.word xt_asm_sbc_zx, z_asm_sbc_zx
003FEDr 3               ; 		.byte "sbc.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_sbc_zxi:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_sec
003FEDr 3               ; 		.word xt_asm_sbc_zxi, z_asm_sbc_zxi
003FEDr 3               ; 		.byte "sbc.zxi"
003FEDr 3               
003FEDr 3               ; nt_asm_sec:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_sed
003FEDr 3               ; 		.word xt_asm_sec, z_asm_sec
003FEDr 3               ; 		.byte "sec"
003FEDr 3               
003FEDr 3               ; nt_asm_sed:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_sei
003FEDr 3               ; 		.word xt_asm_sed, z_asm_sed
003FEDr 3               ; 		.byte "sed"
003FEDr 3               
003FEDr 3               ; nt_asm_sei:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_sta
003FEDr 3               ; 		.word xt_asm_sei, z_asm_sei
003FEDr 3               ; 		.byte "sei"
003FEDr 3               
003FEDr 3               ; nt_asm_sta:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_sta_x
003FEDr 3               ; 		.word xt_asm_sta, z_asm_sta
003FEDr 3               ; 		.byte "sta"
003FEDr 3               
003FEDr 3               ; nt_asm_sta_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_sta_y
003FEDr 3               ; 		.word xt_asm_sta_x, z_asm_sta_x
003FEDr 3               ; 		.byte "sta.x"
003FEDr 3               
003FEDr 3               ; nt_asm_sta_y:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_sta_z
003FEDr 3               ; 		.word xt_asm_sta_y, z_asm_sta_y
003FEDr 3               ; 		.byte "sta.y"
003FEDr 3               
003FEDr 3               ; nt_asm_sta_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_sta_zi
003FEDr 3               ; 		.word xt_asm_sta_z, z_asm_sta_z
003FEDr 3               ; 		.byte "sta.z"
003FEDr 3               
003FEDr 3               ; nt_asm_sta_zi:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_sta_ziy
003FEDr 3               ; 		.word xt_asm_sta_zi, z_asm_sta_zi
003FEDr 3               ; 		.byte "sta.zi"
003FEDr 3               
003FEDr 3               ; nt_asm_sta_ziy:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_sta_zx
003FEDr 3               ; 		.word xt_asm_sta_ziy, z_asm_sta_ziy
003FEDr 3               ; 		.byte "sta.ziy"
003FEDr 3               
003FEDr 3               ; nt_asm_sta_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_sta_zxi
003FEDr 3               ; 		.word xt_asm_sta_zx, z_asm_sta_zx
003FEDr 3               ; 		.byte "sta.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_sta_zxi:
003FEDr 3               ; 		.byte 7, IM
003FEDr 3               ;                 .word nt_asm_stx
003FEDr 3               ; 		.word xt_asm_sta_zxi, z_asm_sta_zxi
003FEDr 3               ; 		.byte "sta.zxi"
003FEDr 3               
003FEDr 3               ; nt_asm_stx:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_stx_z
003FEDr 3               ; 		.word xt_asm_stx, z_asm_stx
003FEDr 3               ; 		.byte "stx"
003FEDr 3               
003FEDr 3               ; nt_asm_stx_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_stx_zy
003FEDr 3               ; 		.word xt_asm_stx_z, z_asm_stx_z
003FEDr 3               ; 		.byte "stx.z"
003FEDr 3               
003FEDr 3               ; nt_asm_stx_zy:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_sty
003FEDr 3               ; 		.word xt_asm_stx_zy, z_asm_stx_zy
003FEDr 3               ; 		.byte "stx.zy"
003FEDr 3               
003FEDr 3               ; nt_asm_sty:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_sty_z
003FEDr 3               ; 		.word xt_asm_sty, z_asm_sty
003FEDr 3               ; 		.byte "sty"
003FEDr 3               
003FEDr 3               ; nt_asm_sty_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_sty_zx
003FEDr 3               ; 		.word xt_asm_sty_z, z_asm_sty_z
003FEDr 3               ; 		.byte "sty.z"
003FEDr 3               
003FEDr 3               ; nt_asm_sty_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_stz
003FEDr 3               ; 		.word xt_asm_sty_zx, z_asm_sty_zx
003FEDr 3               ; 		.byte "sty.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_stz:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_stz_x
003FEDr 3               ; 		.word xt_asm_stz, z_asm_stz
003FEDr 3               ; 		.byte "stz"
003FEDr 3               
003FEDr 3               ; nt_asm_stz_x:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_stz_z
003FEDr 3               ; 		.word xt_asm_stz_x, z_asm_stz_x
003FEDr 3               ; 		.byte "stz.x"
003FEDr 3               
003FEDr 3               ; nt_asm_stz_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_stz_zx
003FEDr 3               ; 		.word xt_asm_stz_z, z_asm_stz_z
003FEDr 3               ; 		.byte "stz.z"
003FEDr 3               
003FEDr 3               ; nt_asm_stz_zx:
003FEDr 3               ; 		.byte 6, IM
003FEDr 3               ;                 .word nt_asm_tax
003FEDr 3               ; 		.word xt_asm_stz_zx, z_asm_stz_zx
003FEDr 3               ; 		.byte "stz.zx"
003FEDr 3               
003FEDr 3               ; nt_asm_tax:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_tay
003FEDr 3               ; 		.word xt_asm_tax, z_asm_tax
003FEDr 3               ; 		.byte "tax"
003FEDr 3               
003FEDr 3               ; nt_asm_tay:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_trb
003FEDr 3               ; 		.word xt_asm_tay, z_asm_tay
003FEDr 3               ; 		.byte "tay"
003FEDr 3               
003FEDr 3               ; nt_asm_trb:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_trb_z
003FEDr 3               ; 		.word xt_asm_trb, z_asm_trb
003FEDr 3               ; 		.byte "trb"
003FEDr 3               
003FEDr 3               ; nt_asm_trb_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_tsb
003FEDr 3               ; 		.word xt_asm_trb_z, z_asm_trb_z
003FEDr 3               ; 		.byte "trb.z"
003FEDr 3               
003FEDr 3               ; nt_asm_tsb:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_tsb_z
003FEDr 3               ; 		.word xt_asm_tsb, z_asm_tsb
003FEDr 3               ; 		.byte "tsb"
003FEDr 3               
003FEDr 3               ; nt_asm_tsb_z:
003FEDr 3               ; 		.byte 5, IM
003FEDr 3               ;                 .word nt_asm_tsx
003FEDr 3               ; 		.word xt_asm_tsb_z, z_asm_tsb_z
003FEDr 3               ; 		.byte "tsb.z"
003FEDr 3               
003FEDr 3               ; nt_asm_tsx:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_txa
003FEDr 3               ; 		.word xt_asm_tsx, z_asm_tsx
003FEDr 3               ; 		.byte "tsx"
003FEDr 3               
003FEDr 3               ; nt_asm_txa:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_txs
003FEDr 3               ; 		.word xt_asm_txa, z_asm_txa
003FEDr 3               ; 		.byte "txa"
003FEDr 3               
003FEDr 3               ; nt_asm_txs:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_tya
003FEDr 3               ; 		.word xt_asm_txs, z_asm_txs
003FEDr 3               ; 		.byte "txs"
003FEDr 3               
003FEDr 3               ; nt_asm_tya:
003FEDr 3               ; 		.byte 3, IM
003FEDr 3               ;                 .word nt_asm_arrow
003FEDr 3               ; 		.word xt_asm_tya, z_asm_tya
003FEDr 3               ; 		.byte "tya"
003FEDr 3               
003FEDr 3               ; ; Assembler pseudo-instructions, directives and macros
003FEDr 3               
003FEDr 3               ; nt_asm_arrow:   ; uses same code as HERE, but immediate
003FEDr 3               ;                 .byte 3, IM
003FEDr 3               ;                 .word nt_asm_back_jump
003FEDr 3               ;                 .word xt_asm_arrow, z_asm_arrow
003FEDr 3               ;                 .byte "-->"
003FEDr 3               
003FEDr 3               
003FEDr 3               ; nt_asm_back_jump:  ; syntactic sugar, does nothing
003FEDr 3               ;                 .byte 2, IM
003FEDr 3               ;                 .word nt_asm_back_branch
003FEDr 3               ;                 .word xt_asm_back_jump, z_asm_back_jump
003FEDr 3               ;                 .byte "<j"
003FEDr 3               
003FEDr 3               ; nt_asm_back_branch:
003FEDr 3               ;                 .byte 2, IM
003FEDr 3               ;                 .word nt_asm_push_a
003FEDr 3               ;                 .word xt_asm_back_branch, z_asm_back_branch
003FEDr 3               ;                 .byte "<b"
003FEDr 3               
003FEDr 3               ; nt_asm_push_a:
003FEDr 3               ;                 .byte 6, IM
003FEDr 3               ;                 .word 0000
003FEDr 3               ;                 .word xt_asm_push_a, z_asm_push_a
003FEDr 3               ;                 .byte "push-a"
003FEDr 3               
003FEDr 3               
003FEDr 3               
003FEDr 3               ; END of ASSEMBLER-WORDLIST
003FEDr 3               
003FEDr 3               ; END
003FEDr 3               
003FEDr 2                   .include "strings.s"          ; Headers of native words
003FEDr 3               ; List of Strings for Tali Forth 2
003FEDr 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
003FEDr 3               ; First version: 01. Apr 2016 (for Liara Forth)
003FEDr 3               ; This version: 28. Dec 2018
003FEDr 3               
003FEDr 3               ; This file is included by taliforth.asm
003FEDr 3               
003FEDr 3               ; ## GENERAL STRINGS
003FEDr 3               
003FEDr 3               ; All general strings must be zero-terminated, names start with "s_",
003FEDr 3               ; aliases with "str_"
003FEDr 3               
003FEDr 3               str_ok =              0
003FEDr 3               str_compile =         1
003FEDr 3               str_redefined =       2
003FEDr 3               str_wid_forth =       3
003FEDr 3               str_abc_lower =       4
003FEDr 3               str_abc_upper =       5
003FEDr 3               str_wid_editor =      6
003FEDr 3               str_wid_assembler =   7
003FEDr 3               str_wid_root =        8
003FEDr 3               str_see_flags =       9
003FEDr 3               str_see_nt =         10
003FEDr 3               str_see_xt =         11
003FEDr 3               str_see_size =       12
003FEDr 3               
003FEDr 3               ; Since we can't fit a 16-bit address in a register, we use indexes as offsets
003FEDr 3               ; to tables as error and string numbers.
003FEDr 3               string_table:
003FEDr 3  rr rr rr rr          .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
003FF1r 3  rr rr rr rr  
003FF5r 3  rr rr        
003FF7r 3  rr rr rr rr          .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
003FFBr 3  rr rr rr rr  
003FFFr 3  rr rr rr rr          .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
004003r 3  rr rr rr rr  
004007r 3               
004007r 3  20 6F 6B 00  s_ok:         .byte " ok", 0         ; note space at beginning
00400Br 3  20 63 6F 6D  s_compiled:   .byte " compiled", 0   ; note space at beginning
00400Fr 3  70 69 6C 65  
004013r 3  64 00        
004015r 3  72 65 64 65  s_redefined:  .byte "redefined ", 0  ; note space at end
004019r 3  66 69 6E 65  
00401Dr 3  64 20 00     
004020r 3               
004020r 3  30 31 32 33  s_abc_lower:  .byte "0123456789abcdefghijklmnopqrstuvwxyz"
004024r 3  34 35 36 37  
004028r 3  38 39 61 62  
004044r 3  30 31 32 33  s_abc_upper:  .byte "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
004048r 3  34 35 36 37  
00404Cr 3  38 39 41 42  
004068r 3               
004068r 3  41 73 73 65  s_wid_asm:    .byte "Assembler ", 0  ; Wordlist ID 2, note space at end
00406Cr 3  6D 62 6C 65  
004070r 3  72 20 00     
004073r 3  45 64 69 74  s_wid_editor: .byte "Editor ", 0     ; Wordlist ID 1, note space at end
004077r 3  6F 72 20 00  
00407Br 3  46 6F 72 74  s_wid_forth:  .byte "Forth ", 0      ; Wordlist ID 0, note space at end
00407Fr 3  68 20 00     
004082r 3  52 6F 6F 74  s_wid_root:   .byte "Root ", 0       ; Wordlist ID 3, note space at end
004086r 3  20 00        
004088r 3               
004088r 3  66 6C 61 67  s_see_flags:  .byte "flags (CO AN IM NN UF HC): ", 0
00408Cr 3  73 20 28 43  
004090r 3  4F 20 41 4E  
0040A4r 3  6E 74 3A 20  s_see_nt:     .byte "nt: ", 0
0040A8r 3  00           
0040A9r 3  78 74 3A 20  s_see_xt:     .byte "xt: ", 0
0040ADr 3  00           
0040AEr 3  73 69 7A 65  s_see_size:   .byte "size (decimal): ", 0
0040B2r 3  20 28 64 65  
0040B6r 3  63 69 6D 61  
0040BFr 3               
0040BFr 3               
0040BFr 3               ; ## ERROR STRINGS
0040BFr 3               
0040BFr 3               ; All error strings must be zero-terminated, all names start with "es_",
0040BFr 3               ; aliases with "err_". If the string texts are changed, the test suite must be
0040BFr 3               ; as well
0040BFr 3               
0040BFr 3               err_allot =        0
0040BFr 3               err_badsource =    1
0040BFr 3               err_compileonly =  2
0040BFr 3               err_defer =        3
0040BFr 3               err_divzero =      4
0040BFr 3               err_noname =       5
0040BFr 3               err_refill =       6
0040BFr 3               err_state =        7
0040BFr 3               err_syntax =       8
0040BFr 3               err_underflow =    9
0040BFr 3               err_negallot =     10
0040BFr 3               err_wordlist =     11
0040BFr 3               err_blockwords =   12
0040BFr 3               
0040BFr 3               error_table:
0040BFr 3  rr rr rr rr          .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
0040C3r 3  rr rr rr rr  
0040C7r 3  rr rr rr rr          .word es_divzero, es_noname, es_refill, es_state        ;  4-7
0040CBr 3  rr rr rr rr  
0040CFr 3  rr rr rr rr          .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
0040D3r 3  rr rr rr rr  
0040D7r 3  rr rr                .word es_blockwords                                    ; 12
0040D9r 3               
0040D9r 3  41 4C 4C 4F  es_allot:       .byte "ALLOT using all available memory", 0
0040DDr 3  54 20 75 73  
0040E1r 3  69 6E 67 20  
0040FAr 3  49 6C 6C 65  es_badsource:   .byte "Illegal SOURCE-ID during REFILL", 0
0040FEr 3  67 61 6C 20  
004102r 3  53 4F 55 52  
00411Ar 3  49 6E 74 65  es_compileonly: .byte "Interpreting a compile-only word", 0
00411Er 3  72 70 72 65  
004122r 3  74 69 6E 67  
00413Br 3  44 45 46 45  es_defer:       .byte "DEFERed word not defined yet", 0
00413Fr 3  52 65 64 20  
004143r 3  77 6F 72 64  
004158r 3  44 69 76 69  es_divzero:     .byte "Division by zero", 0
00415Cr 3  73 69 6F 6E  
004160r 3  20 62 79 20  
004169r 3  50 61 72 73  es_noname:      .byte "Parsing failure", 0
00416Dr 3  69 6E 67 20  
004171r 3  66 61 69 6C  
004179r 3  51 55 49 54  es_refill:      .byte "QUIT could not get input (REFILL returned -1)", 0
00417Dr 3  20 63 6F 75  
004181r 3  6C 64 20 6E  
0041A7r 3  41 6C 72 65  es_state:       .byte "Already in compile mode", 0
0041ABr 3  61 64 79 20  
0041AFr 3  69 6E 20 63  
0041BFr 3  55 6E 64 65  es_syntax:      .byte "Undefined word", 0
0041C3r 3  66 69 6E 65  
0041C7r 3  64 20 77 6F  
0041CEr 3  53 74 61 63  es_underflow:   .byte "Stack underflow", 0
0041D2r 3  6B 20 75 6E  
0041D6r 3  64 65 72 66  
0041DEr 3  4D 61 78 20  es_negallot:    .byte "Max memory freed with ALLOT", 0
0041E2r 3  6D 65 6D 6F  
0041E6r 3  72 79 20 66  
0041FAr 3  4E 6F 20 77  es_wordlist:    .byte "No wordlists available", 0
0041FEr 3  6F 72 64 6C  
004202r 3  69 73 74 73  
004211r 3  50 6C 65 61  es_blockwords:  .byte "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
004215r 3  73 65 20 61  
004219r 3  73 73 69 67  
004250r 3               
004250r 3               ; ## ENVIRONMENT STRINGS
004250r 3               
004250r 3               ; These are used by the ENVIRONMENT? word and stored in the old string format:
004250r 3               ; Length byte first, then the string itself that is not rpt. not
004250r 3               ; zero-terminated. Note these are uppercase by ANS defintion. All start with
004250r 3               ; "envs_".
004250r 3               
004250r 3               ; These return a single-cell number
004250r 3  0F 2F 43 4F  envs_cs:        .byte 15, "/COUNTED-STRING"
004254r 3  55 4E 54 45  
004258r 3  44 2D 53 54  
004260r 3  05 2F 48 4F  envs_hold:      .byte 5, "/HOLD"
004264r 3  4C 44        
004266r 3  04 2F 50 41  envs_pad:       .byte 4, "/PAD"
00426Ar 3  44           
00426Br 3  11 41 44 44  envs_aub:       .byte 17, "ADDRESS-UNIT-BITS"
00426Fr 3  52 45 53 53  
004273r 3  2D 55 4E 49  
00427Dr 3  07 46 4C 4F  envs_floored:   .byte 7, "FLOORED"
004281r 3  4F 52 45 44  
004285r 3  08 4D 41 58  envs_max_char:  .byte 8, "MAX-CHAR"
004289r 3  2D 43 48 41  
00428Dr 3  52           
00428Er 3  05 4D 41 58  envs_max_n:     .byte 5, "MAX-N"
004292r 3  2D 4E        
004294r 3  05 4D 41 58  envs_max_u:     .byte 5, "MAX-U"
004298r 3  2D 55        
00429Ar 3  12 52 45 54  envs_rsc:       .byte 18, "RETURN-STACK-CELLS"
00429Er 3  55 52 4E 2D  
0042A2r 3  53 54 41 43  
0042ADr 3  0B 53 54 41  envs_sc:        .byte 11, "STACK-CELLS"
0042B1r 3  43 4B 2D 43  
0042B5r 3  45 4C 4C 53  
0042B9r 3  09 57 4F 52  envs_wl:        .byte 9, "WORDLISTS"
0042BDr 3  44 4C 49 53  
0042C1r 3  54 53        
0042C3r 3               
0042C3r 3               ; These return a double-cell number
0042C3r 3  05 4D 41 58  envs_max_d:     .byte 5, "MAX-D"
0042C7r 3  2D 44        
0042C9r 3  06 4D 41 58  envs_max_ud:    .byte 6, "MAX-UD"
0042CDr 3  2D 55 44     
0042D0r 3               
0042D0r 3               ; END
0042D0r 3               
0042D0r 2               
0042D0r 2               ; High-level Forth words, see forth_code/README.md
0042D0r 2               forth_words_start:
0042D0r 2  20 63 72 20  .incbin "forth_code/forth_words.asc"
0042D4r 2  2E 28 20 52  
0042D8r 2  65 61 64 79  
0042E2r 2               forth_words_end:
0042E2r 2               
0042E2r 2               ; User-defined Forth words, see forth_code/README.md
0042E2r 2               user_words_start:
0042E2r 2  20 32 30 20  .incbin "forth_code/user_words.asc"
0042E6r 2  63 6F 6E 73  
0042EAr 2  74 61 6E 74  
0049A4r 2               user_words_end:
0049A4r 2               
0049A4r 2               
0049A4r 2               ; =====================================================================
0049A4r 2               ; COMPILE WORDS, JUMPS and SUBROUTINE JUMPS INTO CODE
0049A4r 2               
0049A4r 2               ; These three routines compile instructions such as "jsr xt_words" into a word
0049A4r 2               ; at compile time so they are available at run time. Words that use this
0049A4r 2               ; routine may not be natively compiled. We use "cmpl" as not to confuse these
0049A4r 2               ; routines with the COMPILE, word. Always call this with a subroutine jump.
0049A4r 2               ; This means combining JSR/RTS to JMP in those cases is not going to work. To
0049A4r 2               ; use, load the LSB of the address in A and the MSB in Y. You can remember
0049A4r 2               ; which comes first by thinking of the song "Young Americans" ("YA") by David
0049A4r 2               ; Bowie.
0049A4r 2               
0049A4r 2               ;               ldy #>addr      ; MSB   ; "Young"
0049A4r 2               ;               lda #<addr      ; LSB   ; "Americans"
0049A4r 2               ;               jsr cmpl_subroutine
0049A4r 2               
0049A4r 2               ; Also, we keep a routine here to compile a single byte passed through A.
0049A4r 2               
0049A4r 2               cmpl_subroutine:
0049A4r 2                   ; This is the entry point to compile JSR <ADDR>
0049A4r 2  48               pha             ; save LSB of address
0049A5r 2  A9 20            lda #$20        ; load opcode for JSR
0049A7r 2  80 03            bra cmpl_common
0049A9r 2               cmpl_jump:
0049A9r 2                   ; This is the entry point to compile JMP <ADDR>
0049A9r 2  48               pha             ; save LSB of address
0049AAr 2  A9 4C            lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
0049ACr 2               cmpl_common:
0049ACr 2                   ; At this point, A contains the opcode to be compiled,
0049ACr 2                   ; the LSB of the address is on the 65c02 stack, and the MSB of
0049ACr 2                   ; the address is in Y
0049ACr 2  20 rr rr         jsr cmpl_a      ; compile opcode
0049AFr 2  68               pla             ; retrieve address LSB; fall thru to cmpl_word
0049B0r 2               cmpl_word:
0049B0r 2                   ; This is the entry point to compile a word (little-endian)
0049B0r 2  20 rr rr         jsr cmpl_a      ; compile LSB of address
0049B3r 2  98               tya             ; fall thru for MSB
0049B4r 2               cmpl_a:
0049B4r 2                   ; This is the entry point to compile a single byte which
0049B4r 2                   ; is passed in A. The built-in assembler assumes that this
0049B4r 2                   ; routine does not modify Y.
0049B4r 2  92 rr            sta (cp)
0049B6r 2  E6 rr            inc cp
0049B8r 2  D0 02            bne _done
0049BAr 2  E6 rr            inc cp+1
0049BCr 2               _done:
0049BCr 2  60               rts
0049BDr 2               
0049BDr 2               
0049BDr 2               
0049BDr 2               ; =====================================================================
0049BDr 2               ; CODE FIELD ROUTINES
0049BDr 2               
0049BDr 2               doconst:
0049BDr 2               ; """Execute a CONSTANT: Push the data in the first two bytes of
0049BDr 2               ; the Data Field onto the Data Stack
0049BDr 2               ; """
0049BDr 2  CA               dex             ; make room for constant
0049BEr 2  CA               dex
0049BFr 2               
0049BFr 2                   ; The value we need is stored in the two bytes after the
0049BFr 2                   ; JSR return address, which in turn is what is on top of
0049BFr 2                   ; the Return Stack
0049BFr 2  68               pla             ; LSB of return address
0049C0r 2  85 rr            sta tmp1
0049C2r 2  68               pla             ; MSB of return address
0049C3r 2  85 rr            sta tmp1+1
0049C5r 2               
0049C5r 2                   ; Start LDY with 1 instead of 0 because of how JSR stores
0049C5r 2                   ; the return address on the 65c02
0049C5r 2  A0 01            ldy #1
0049C7r 2  B1 rr            lda (tmp1),y
0049C9r 2  95 00            sta 0,x
0049CBr 2  C8               iny
0049CCr 2  B1 rr            lda (tmp1),y
0049CEr 2  95 01            sta 1,x
0049D0r 2               
0049D0r 2                   ; This takes us back to the original caller, not the
0049D0r 2                   ; DOCONST caller
0049D0r 2  60               rts
0049D1r 2               
0049D1r 2               
0049D1r 2               dodefer:
0049D1r 2               ; """Execute a DEFER statement at runtime: Execute the address we
0049D1r 2               ; find after the caller in the Data Field
0049D1r 2               ; """
0049D1r 2                   ; The xt we need is stored in the two bytes after the JSR
0049D1r 2                   ; return address, which is what is on top of the Return
0049D1r 2                   ; Stack. So all we have to do is replace our return jump
0049D1r 2                   ; with what we find there
0049D1r 2  68               pla             ; LSB
0049D2r 2  85 rr            sta tmp1
0049D4r 2  68               pla             ; MSB
0049D5r 2  85 rr            sta tmp1+1
0049D7r 2               
0049D7r 2  A0 01            ldy #1
0049D9r 2  B1 rr            lda (tmp1),y
0049DBr 2  85 rr            sta tmp2
0049DDr 2  C8               iny
0049DEr 2  B1 rr            lda (tmp1),y
0049E0r 2  85 rr            sta tmp2+1
0049E2r 2               
0049E2r 2  6C rr rr         jmp (tmp2)      ; This is actually a jump to the new target
0049E5r 2               
0049E5r 2               defer_error:
0049E5r 2                   ; """Error routine for undefined DEFER: Complain and abort"""
0049E5r 2  A9 03            lda #err_defer
0049E7r 2  4C rr rr         jmp error
0049EAr 2               
0049EAr 2               dodoes:
0049EAr 2               ; """Execute the runtime portion of DOES>. See DOES> and
0049EAr 2               ; docs/create-does.txt for details and
0049EAr 2               ; http://www.bradrodriguez.com/papers/moving3.htm
0049EAr 2               ; """
0049EAr 2                   ; Assumes the address of the CFA of the original defining word
0049EAr 2                   ; (say, CONSTANT) is on the top of the Return Stack. Save it
0049EAr 2                   ; for a later jump, adding one byte because of the way the
0049EAr 2                   ; 6502 works
0049EAr 2  7A               ply             ; LSB
0049EBr 2  68               pla             ; MSB
0049ECr 2  C8               iny
0049EDr 2  D0 01            bne @1
0049EFr 2  1A               inc
0049F0r 2               @1:
0049F0r 2  84 rr            sty tmp2
0049F2r 2  85 rr            sta tmp2+1
0049F4r 2               
0049F4r 2                   ; Next on the Return Stack should be the address of the PFA of
0049F4r 2                   ; the calling defined word (say, the name of whatever constant we
0049F4r 2                   ; just defined). Move this to the Data Stack, again adding one.
0049F4r 2  CA               dex
0049F5r 2  CA               dex
0049F6r 2               
0049F6r 2  7A               ply
0049F7r 2  68               pla
0049F8r 2  C8               iny
0049F9r 2  D0 01            bne @2
0049FBr 2  1A               inc
0049FCr 2               @2:
0049FCr 2  94 00            sty 0,x         ; LSB
0049FEr 2  95 01            sta 1,x         ; MSB
004A00r 2               
004A00r 2                   ; This leaves the return address from the original main routine
004A00r 2                   ; on top of the Return Stack. We leave that untouched and jump
004A00r 2                   ; to the special code of the defining word. It's RTS instruction
004A00r 2                   ; will take us back to the main routine
004A00r 2  6C rr rr         jmp (tmp2)
004A03r 2               
004A03r 2               
004A03r 2               dovar:
004A03r 2               ; """Execute a variable: Push the address of the first bytes of
004A03r 2               ; the Data Field onto the stack. This is called with JSR so we
004A03r 2               ; can pick up the address of the calling variable off the 65c02's
004A03r 2               ; stack. The final RTS takes us to the original caller of the
004A03r 2               ; routine that itself called DOVAR. This is the default
004A03r 2               ; routine installed with CREATE.
004A03r 2               ; """
004A03r 2                   ; Pull the return address off the machine's stack, adding
004A03r 2                   ; one because of the way the 65c02 handles subroutines
004A03r 2  7A               ply             ; LSB
004A04r 2  68               pla             ; MSB
004A05r 2  C8               iny
004A06r 2  D0 01            bne @1
004A08r 2  1A               inc
004A09r 2               @1:
004A09r 2  CA               dex
004A0Ar 2  CA               dex
004A0Br 2               
004A0Br 2  95 01            sta 1,x
004A0Dr 2  98               tya
004A0Er 2  95 00            sta 0,x
004A10r 2               
004A10r 2  60               rts
004A11r 2               
004A11r 2               ; =====================================================================
004A11r 2               ; LOW LEVEL HELPER FUNCTIONS
004A11r 2               
004A11r 2               byte_to_ascii:
004A11r 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
004A11r 2               .scope
004A11r 2  48               pha
004A12r 2  4A               lsr             ; convert high nibble first
004A13r 2  4A               lsr
004A14r 2  4A               lsr
004A15r 2  4A               lsr
004A16r 2  20 rr rr         jsr _nibble_to_ascii
004A19r 2  68               pla
004A1Ar 2               
004A1Ar 2                   ; fall through to _nibble_to_ascii
004A1Ar 2               
004A1Ar 2               _nibble_to_ascii:
004A1Ar 2               ; """Private helper function for byte_to_ascii: Print lower nibble
004A1Ar 2               ; of A and and EMIT it. This does the actual work.
004A1Ar 2               ; """
004A1Ar 2  29 0F            and #$0F
004A1Cr 2  09 30            ora #'0'
004A1Er 2  C9 3A            cmp #$3A        ; '9+1
004A20r 2  90 02            bcc @1
004A22r 2  69 06            adc #$06
004A24r 2               
004A24r 2  4C rr rr     @1:               jmp emit_a
004A27r 2               
004A27r 2  60               rts
004A28r 2               .endscope
004A28r 2               
004A28r 2               compare_16bit:
004A28r 2               ; """Compare TOS/NOS and return results in form of the 65c02 flags
004A28r 2               ; Adapted from Leventhal "6502 Assembly Language Subroutines", see
004A28r 2               ; also http://www.6502.org/tutorials/compare_beyond.html
004A28r 2               ; For signed numbers, Z signals equality and N which number is larger:
004A28r 2               ;       if TOS = NOS: Z=1 and N=0
004A28r 2               ;       if TOS > NOS: Z=0 and N=0
004A28r 2               ;       if TOS < NOS: Z=0 and N=1
004A28r 2               ; For unsigned numbers, Z signals equality and C which number is larger:
004A28r 2               ;       if TOS = NOS: Z=1 and N=0
004A28r 2               ;       if TOS > NOS: Z=0 and C=1
004A28r 2               ;       if TOS < NOS: Z=0 and C=0
004A28r 2               ; Compared to the book routine, WORD1 (MINUED) is TOS
004A28r 2               ;                               WORD2 (SUBTRAHEND) is NOS
004A28r 2               ; """
004A28r 2               .scope
004A28r 2                   ; Compare LSB first to set the carry flag
004A28r 2  B5 00            lda 0,x                 ; LSB of TOS
004A2Ar 2  D5 02            cmp 2,x                 ; LSB of NOS
004A2Cr 2  F0 0A            beq _equal
004A2Er 2               
004A2Er 2                   ; LSBs are not equal, compare MSB
004A2Er 2  B5 01            lda 1,x                 ; MSB of TOS
004A30r 2  F5 03            sbc 3,x                 ; MSB of NOS
004A32r 2  09 01            ora #1                  ; Make zero flag 0 because not equal
004A34r 2  70 08            bvs _overflow
004A36r 2  80 08            bra _not_equal
004A38r 2               _equal:
004A38r 2                   ; Low bytes are equal, so we compare high bytes
004A38r 2  B5 01            lda 1,x                 ; MSB of TOS
004A3Ar 2  F5 03            sbc 3,x                 ; MSB of NOS
004A3Cr 2  50 04            bvc _done
004A3Er 2               _overflow:
004A3Er 2                   ; Handle overflow because we use signed numbers
004A3Er 2  49 80            eor #$80                ; complement negative flag
004A40r 2               _not_equal:
004A40r 2  09 01            ora #1                  ; if overflow, we can't be eqal
004A42r 2               _done:
004A42r 2  60               rts
004A43r 2               .endscope
004A43r 2               
004A43r 2               current_to_dp:
004A43r 2               ; """Look up the current (compilation) dictionary pointer
004A43r 2               ; in the wordlist set and put it into the dp zero-page
004A43r 2               ; variable. Uses A and Y.
004A43r 2               ; """
004A43r 2                   ; Determine which wordlist is current
004A43r 2  A0 04            ldy #current_offset
004A45r 2  B1 rr            lda (up),y      ; current is a byte variable
004A47r 2  0A               asl             ; turn it into an offset (in cells)
004A48r 2               
004A48r 2                   ; Get the dictionary pointer for that wordlist.
004A48r 2  18               clc
004A49r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
004A4Br 2  A8               tay
004A4Cr 2  B1 rr            lda (up),y              ; get the dp for that wordlist.
004A4Er 2  85 rr            sta dp
004A50r 2  C8               iny
004A51r 2  B1 rr            lda (up),y
004A53r 2  85 rr            sta dp+1
004A55r 2               
004A55r 2  60               rts
004A56r 2               
004A56r 2               
004A56r 2               dp_to_current:
004A56r 2               ; """Look up which wordlist is current and update its pointer
004A56r 2               ; with the value in dp. Uses A and Y.
004A56r 2               ; """
004A56r 2                   ; Determine which wordlist is current
004A56r 2  A0 04            ldy #current_offset
004A58r 2  B1 rr            lda (up),y      ; current is a byte variable
004A5Ar 2  0A               asl             ; turn it into an offset (in cells)
004A5Br 2               
004A5Br 2                   ; Get the dictionary pointer for that wordlist.
004A5Br 2  18               clc
004A5Cr 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
004A5Er 2  A8               tay
004A5Fr 2  A5 rr            lda dp
004A61r 2  91 rr            sta (up),y              ; get the dp for that wordlist.
004A63r 2  C8               iny
004A64r 2  A5 rr            lda dp+1
004A66r 2  91 rr            sta (up),y
004A68r 2               
004A68r 2  60               rts
004A69r 2               
004A69r 2               interpret:
004A69r 2               .scope
004A69r 2               ; """Core routine for the interpreter called by EVALUATE and QUIT.
004A69r 2               ; Process one line only. Assumes that the address of name is in
004A69r 2               ; cib and the length of the whole input line string is in ciblen
004A69r 2               ; """
004A69r 2                   ; Normally we would use PARSE here with the SPACE character as
004A69r 2                   ; a parameter (PARSE replaces WORD in modern Forths). However,
004A69r 2                   ; Gforth's PARSE-NAME makes more sense as it uses spaces as
004A69r 2                   ; delimiters per default and skips any leading spaces, which
004A69r 2                   ; PARSE doesn't
004A69r 2               _loop:
004A69r 2  20 rr rr         jsr xt_parse_name       ; ( "string" -- addr u )
004A6Cr 2               
004A6Cr 2                   ; If PARSE-NAME returns 0 (empty line), no characters were left
004A6Cr 2                   ; in the line and we need to go get a new line
004A6Cr 2  B5 00            lda 0,x
004A6Er 2  15 01            ora 1,x
004A70r 2  F0 70            beq _line_done
004A72r 2               
004A72r 2                   ; Go to FIND-NAME to see if this is a word we know. We have to
004A72r 2                   ; make a copy of the address in case it isn't a word we know and
004A72r 2                   ; we have to go see if it is a number
004A72r 2  20 rr rr         jsr xt_two_dup          ; ( addr u -- addr u addr u )
004A75r 2  20 rr rr         jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
004A78r 2               
004A78r 2                   ; A zero signals that we didn't find a word in the Dictionary
004A78r 2  B5 00            lda 0,x
004A7Ar 2  15 01            ora 1,x
004A7Cr 2  D0 28            bne _got_name_token
004A7Er 2               
004A7Er 2                   ; We didn't get any nt we know of, so let's see if this is
004A7Er 2                   ; a number.
004A7Er 2  E8               inx                     ; ( addr u 0 -- addr u )
004A7Fr 2  E8               inx
004A80r 2               
004A80r 2                   ; If the number conversion doesn't work, NUMBER will do the
004A80r 2                   ; complaining for us
004A80r 2  20 rr rr         jsr xt_number           ; ( addr u -- u|d )
004A83r 2               
004A83r 2                   ; Otherweise, if we're interpreting, we're done
004A83r 2  A5 rr            lda state
004A85r 2  F0 E2            beq _loop
004A87r 2               
004A87r 2                   ; We're compiling, so there is a bit more work.  Check
004A87r 2                   ; status bit 5 to see if it's a single or double-cell
004A87r 2                   ; number.
004A87r 2  A9 20            lda #$20
004A89r 2  24 rr            bit status
004A8Br 2  F0 0D            beq _single_number
004A8Dr 2               
004A8Dr 2                   ; It's a double cell number.  If we swap the
004A8Dr 2                   ; upper and lower half, we can use the literal_runtime twice
004A8Dr 2                   ; to compile it into the dictionary.
004A8Dr 2  20 rr rr         jsr xt_swap
004A90r 2  A0 rr            ldy #>literal_runtime
004A92r 2  A9 rr            lda #<literal_runtime
004A94r 2  20 rr rr         jsr cmpl_subroutine
004A97r 2               
004A97r 2                   ; compile our number
004A97r 2  20 rr rr         jsr xt_comma
004A9Ar 2               
004A9Ar 2                   ; Fall into _single_number to process the other half.
004A9Ar 2               _single_number:
004A9Ar 2  A0 rr            ldy #>literal_runtime
004A9Cr 2  A9 rr            lda #<literal_runtime
004A9Er 2  20 rr rr         jsr cmpl_subroutine
004AA1r 2               
004AA1r 2                   ; compile our number
004AA1r 2  20 rr rr         jsr xt_comma
004AA4r 2               
004AA4r 2                   ; That was so much fun, let's do it again!
004AA4r 2  80 C3            bra _loop
004AA6r 2               
004AA6r 2               _got_name_token:
004AA6r 2                   ; We have a known word's nt TOS. We're going to need its xt
004AA6r 2                   ; though, which is four bytes father down.
004AA6r 2               
004AA6r 2                   ; We arrive here with ( addr u nt ), so we NIP twice
004AA6r 2  B5 00            lda 0,x
004AA8r 2  95 04            sta 4,x
004AAAr 2  B5 01            lda 1,x
004AACr 2  95 05            sta 5,x
004AAEr 2               
004AAEr 2  E8               inx
004AAFr 2  E8               inx
004AB0r 2  E8               inx
004AB1r 2  E8               inx                     ; ( nt )
004AB2r 2               
004AB2r 2                   ; Save a version of nt for error handling and compilation stuff
004AB2r 2  B5 00            lda 0,x
004AB4r 2  85 rr            sta tmpbranch
004AB6r 2  B5 01            lda 1,x
004AB8r 2  85 rr            sta tmpbranch+1
004ABAr 2               
004ABAr 2  20 rr rr         jsr xt_name_to_int      ; ( nt - xt )
004ABDr 2               
004ABDr 2                   ; See if we are in interpret or compile mode, 0 is interpret
004ABDr 2  A5 rr            lda state
004ABFr 2  D0 13            bne _compile
004AC1r 2               
004AC1r 2                   ; We are interpreting, so EXECUTE the xt that is TOS. First,
004AC1r 2                   ; though, see if this isn't a compile-only word, which would be
004AC1r 2                   ; illegal. The status byte is the second one of the header.
004AC1r 2  A0 01            ldy #1
004AC3r 2  B1 rr            lda (tmpbranch),y
004AC5r 2  29 01            and #CO                 ; mask everything but Compile Only bit
004AC7r 2  F0 05            beq _interpret
004AC9r 2               
004AC9r 2  A9 02            lda #err_compileonly
004ACBr 2  4C rr rr         jmp error
004ACEr 2               
004ACEr 2               _interpret:
004ACEr 2                   ; We JSR to EXECUTE instead of calling the xt directly because
004ACEr 2                   ; the RTS of the word we're executing will bring us back here,
004ACEr 2                   ; skipping EXECUTE completely during RTS. If we were to execute
004ACEr 2                   ; xt directly, we have to fool around with the Return Stack
004ACEr 2                   ; instead, which is actually slightly slower
004ACEr 2  20 rr rr         jsr xt_execute
004AD1r 2               
004AD1r 2                   ; That's quite enough for this word, let's get the next one
004AD1r 2  4C rr rr         jmp _loop
004AD4r 2               
004AD4r 2               _compile:
004AD4r 2                   ; We're compiling! However, we need to see if this is an
004AD4r 2                   ; IMMEDIATE word, which would mean we execute it right now even
004AD4r 2                   ; during compilation mode. Fortunately, we saved the nt so life
004AD4r 2                   ; is easier. The flags are in the second byte of the header
004AD4r 2  A0 01            ldy #1
004AD6r 2  B1 rr            lda (tmpbranch),y
004AD8r 2  29 04            and #IM                 ; Mask all but IM bit
004ADAr 2  D0 F2            bne _interpret          ; IMMEDIATE word, execute right now
004ADCr 2               
004ADCr 2                   ; Compile the xt into the Dictionary with COMPILE,
004ADCr 2  20 rr rr         jsr xt_compile_comma
004ADFr 2  4C rr rr         jmp _loop
004AE2r 2               
004AE2r 2               _line_done:
004AE2r 2                   ; drop stuff from PARSE_NAME
004AE2r 2  E8               inx
004AE3r 2  E8               inx
004AE4r 2  E8               inx
004AE5r 2  E8               inx
004AE6r 2               
004AE6r 2  60               rts
004AE7r 2               .endscope
004AE7r 2               
004AE7r 2               
004AE7r 2               is_printable:
004AE7r 2               .scope
004AE7r 2               ; """Given a character in A, check if it is a printable ASCII
004AE7r 2               ; character in the range from $20 to $7E inclusive. Returns the
004AE7r 2               ; result in the Carry Flag: 0 (clear) is not printable, 1 (set)
004AE7r 2               ; is printable. Keeps A. See
004AE7r 2               ; http://www.obelisk.me.uk/6502/algorithms.html for a
004AE7r 2               ; discussion of various ways to do this
004AE7r 2  C9 20            cmp #AscSP              ; $20
004AE9r 2  90 08            bcc _done
004AEBr 2  C9 7F            cmp #'~' + 1             ; $7E
004AEDr 2  B0 03            bcs _failed
004AEFr 2               
004AEFr 2  38               sec
004AF0r 2  80 01            bra _done
004AF2r 2               _failed:
004AF2r 2  18               clc
004AF3r 2               _done:
004AF3r 2  60               rts
004AF4r 2               .endscope
004AF4r 2               
004AF4r 2               
004AF4r 2               is_whitespace:
004AF4r 2               .scope
004AF4r 2               ; """Given a character in A, check if it is a whitespace
004AF4r 2               ; character, that is, an ASCII value from 0 to 32 (where
004AF4r 2               ; 32 is SPACE). Returns the result in the Carry Flag:
004AF4r 2               ; 0 (clear) is no, it isn't whitespace, while 1 (set) means
004AF4r 2               ; that it is whitespace. See PARSE and PARSE-NAME for
004AF4r 2               ; a discussion of the uses. Does not change A or Y.
004AF4r 2  C9 00            cmp #00         ; explicit comparison to leave Y untouched
004AF6r 2  90 08            bcc _done
004AF8r 2               
004AF8r 2  C9 21            cmp #AscSP+1
004AFAr 2  B0 03            bcs _failed
004AFCr 2               
004AFCr 2  38               sec
004AFDr 2  80 01            bra _done
004AFFr 2               _failed:
004AFFr 2  18               clc
004B00r 2               _done:
004B00r 2  60               rts
004B01r 2               .endscope
004B01r 2               
004B01r 2               
004B01r 2               ; Underflow tests. We jump to the label with the number of cells (not: bytes)
004B01r 2               ; required for the word. This routine flows into the generic error handling
004B01r 2               ; code
004B01r 2               underflow_1:
004B01r 2               ; """Make sure we have at least one cell on the Data Stack"""
004B01r 2  E0 rr            cpx #dsp0-1
004B03r 2  10 10            bpl underflow_error
004B05r 2  60               rts
004B06r 2               underflow_2:
004B06r 2               ; """Make sure we have at least two cells on the Data Stack"""
004B06r 2  E0 rr            cpx #dsp0-3
004B08r 2  10 0B            bpl underflow_error
004B0Ar 2  60               rts
004B0Br 2               underflow_3:
004B0Br 2               ; """Make sure we have at least three cells on the Data Stack"""
004B0Br 2  E0 rr            cpx #dsp0-5
004B0Dr 2  10 06            bpl underflow_error
004B0Fr 2  60               rts
004B10r 2               underflow_4:
004B10r 2               ; """Make sure we have at least four cells on the Data Stack"""
004B10r 2  E0 rr            cpx #dsp0-7
004B12r 2  10 01            bpl underflow_error
004B14r 2  60               rts
004B15r 2               
004B15r 2               underflow_error:
004B15r 2                   ; Entry for COLD/ABORT/QUIT
004B15r 2  A9 09            lda #err_underflow      ; fall through to error
004B17r 2               
004B17r 2               error:
004B17r 2               ; """Given the error number in a, print the associated error string and
004B17r 2               ; call abort. Uses tmp3.
004B17r 2               ; """
004B17r 2  0A               asl
004B18r 2  A8               tay
004B19r 2  B9 rr rr         lda error_table,y
004B1Cr 2  85 rr            sta tmp3                ; LSB
004B1Er 2  C8               iny
004B1Fr 2  B9 rr rr         lda error_table,y
004B22r 2  85 rr            sta tmp3+1              ; MSB
004B24r 2               
004B24r 2  20 rr rr         jsr print_common
004B27r 2  20 rr rr         jsr xt_cr
004B2Ar 2  4C rr rr         jmp xt_abort            ; no jsr, as we clobber return stack
004B2Dr 2               
004B2Dr 2               
004B2Dr 2               ; =====================================================================
004B2Dr 2               ; PRINTING ROUTINES
004B2Dr 2               
004B2Dr 2               ; We distinguish two types of print calls, both of which take the string number
004B2Dr 2               ; (see strings.asm) in A:
004B2Dr 2               
004B2Dr 2               ;       print_string       - with a line feed
004B2Dr 2               ;       print_string_no_lf - without a line feed
004B2Dr 2               
004B2Dr 2               ; In addition, print_common provides a lower-level alternative for error
004B2Dr 2               ; handling and anything else that provides the address of the
004B2Dr 2               ; zero-terminated string directly in tmp3. All of those routines assume that
004B2Dr 2               ; printing should be more concerned with size than speed, because anything to
004B2Dr 2               ; do with humans reading text is going to be slow.
004B2Dr 2               
004B2Dr 2               print_string_no_lf:
004B2Dr 2               ; """Given the number of a zero-terminated string in A, print it to the
004B2Dr 2               ; current output without adding a LF. Uses Y and tmp3 by falling
004B2Dr 2               ; through to print_common
004B2Dr 2               ; """
004B2Dr 2                   ; Get the entry from the string table
004B2Dr 2  0A               asl
004B2Er 2  A8               tay
004B2Fr 2  B9 rr rr         lda string_table,y
004B32r 2  85 rr            sta tmp3                ; LSB
004B34r 2  C8               iny
004B35r 2  B9 rr rr         lda string_table,y
004B38r 2  85 rr            sta tmp3+1              ; MSB
004B3Ar 2               
004B3Ar 2                   ; fall through to print_common
004B3Ar 2               print_common:
004B3Ar 2               ; """Common print routine used by both the print functions and
004B3Ar 2               ; the error printing routine. Assumes string address is in tmp3. Uses
004B3Ar 2               ; Y.
004B3Ar 2               ; """
004B3Ar 2               .scope
004B3Ar 2  A0 00            ldy #0
004B3Cr 2               _loop:
004B3Cr 2  B1 rr            lda (tmp3),y
004B3Er 2  F0 06            beq _done               ; strings are zero-terminated
004B40r 2               
004B40r 2  20 rr rr         jsr emit_a              ; allows vectoring via output
004B43r 2  C8               iny
004B44r 2  80 F6            bra _loop
004B46r 2               _done:
004B46r 2  60               rts
004B47r 2               .endscope
004B47r 2               
004B47r 2               print_string:
004B47r 2               ; """Print a zero-terminated string to the console/screen, adding a LF.
004B47r 2               ; We do not check to see if the index is out of range. Uses tmp3.
004B47r 2               ; """
004B47r 2  20 rr rr         jsr print_string_no_lf
004B4Ar 2  4C rr rr         jmp xt_cr               ; JSR/RTS because never compiled
004B4Dr 2               
004B4Dr 2               
004B4Dr 2               print_u:
004B4Dr 2               ; """basic printing routine used by higher-level constructs,
004B4Dr 2               ; the equivalent of the forth word  0 <# #s #> type  which is
004B4Dr 2               ; basically u. without the space at the end. used for various
004B4Dr 2               ; outputs
004B4Dr 2               ; """
004B4Dr 2  20 rr rr         jsr xt_zero                     ; 0
004B50r 2  20 rr rr         jsr xt_less_number_sign         ; <#
004B53r 2  20 rr rr         jsr xt_number_sign_s            ; #S
004B56r 2  20 rr rr         jsr xt_number_sign_greater      ; #>
004B59r 2  4C rr rr         jmp xt_type                     ; JSR/RTS because never compiled
004B5Cr 2               
004B5Cr 2               ; END
004B5Cr 2               
004B5Cr 1               ; .include "../../ed.s"
004B5Cr 1               
004B5Cr 1               
004B5Cr 1               .segment "DATA"
004B5Cr 1               
004B5Cr 1               platform_bye:
004B5Cr 1               kernel_init:
004B5Cr 1               v_nmi:
004B5Cr 1  A9 FF            lda #$FF
004B5Er 1  8D 82 FF         sta DDRB
004B61r 1  8D 83 FF         sta DDRA
004B64r 1  9C 81 FF         stz PORTA
004B67r 1  9C 80 FF         stz PORTB
004B6Ar 1               .ifdef video_init
004B6Ar 1                   jsr video_init
004B6Ar 1               .endif
004B6Ar 1               .ifdef ps2_init
004B6Ar 1  20 rr rr         jsr ps2_init
004B6Dr 1               .endif
004B6Dr 1               
004B6Dr 1               .ifdef timer_init
004B6Dr 1  20 rr rr         jsr timer_init
004B70r 1               .endif
004B70r 1  20 rr rr         jsr acia_init
004B73r 1               .ifdef lcd_init
004B73r 1                   jsr lcd_init
004B73r 1               .endif
004B73r 1               .ifdef spi_init
004B73r 1                   jsr spi_init
004B73r 1               .endif
004B73r 1               .ifdef kb_init
004B73r 1                   jsr kb_init
004B73r 1               .endif
004B73r 1               
004B73r 1               
004B73r 1  DA A2 00 BD      printascii welcome_message
004B77r 1  rr rr F0 06  
004B7Br 1  20 rr rr E8  
004B82r 1               
004B82r 1               
004B82r 1  4C rr rr         jmp forth
004B85r 1               
004B85r 1               
004B85r 1               kernel_putc:
004B85r 1                   ; """Print a single character to the console. """
004B85r 1                   ;; Send_Char - send character in A out serial port.
004B85r 1                   ;; Uses: A (original value restored)
004B85r 1               send_char:
004B85r 1  48               pha
004B86r 1                   .ifdef char_out
004B86r 1                   jsr char_out
004B86r 1                   .endif
004B86r 1                   .ifdef acia_out
004B86r 1  20 rr rr         jsr acia_out
004B89r 1                   .endif
004B89r 1               send_char_exit:
004B89r 1               .ifdef lcd_print
004B89r 1                   jsr lcd_print
004B89r 1               .endif
004B89r 1  68               pla
004B8Ar 1  60               rts
004B8Br 1               
004B8Br 1               
004B8Br 1                       ;; Get_Char - get a character from the serial port into A.
004B8Br 1                       ;; Set the carry flag if char is valid.
004B8Br 1                       ;; Return immediately with carry flag clear if no char available.
004B8Br 1                       ;; Uses: A (return value)
004B8Br 1               
004B8Br 1               Get_Char:
004B8Br 1  20 rr rr         jsr acia_getc
004B8Er 1  90 05            bcc get_ps2_char                ; check keyboard buffer if nothing from ACIA
004B90r 1  20 rr rr         jsr check_ctrl_c
004B93r 1  38               sec                             ; Set Carry to show we got a character
004B94r 1  60               rts                             ; Return
004B95r 1               
004B95r 1               get_ps2_char:                       ; no ACIA char available, try to get from KB buffer
004B95r 1               .ifdef ps2_get_char
004B95r 1  20 rr rr         jsr ps2_get_char
004B98r 1               .endif
004B98r 1  90 02            bcc get_kb_char
004B9Ar 1  38               sec
004B9Br 1               
004B9Br 1  60               rts
004B9Cr 1               get_kb_char:
004B9Cr 1                   .ifdef kb_get_char
004B9Cr 1               
004B9Cr 1                   ; ldy #5
004B9Cr 1                   ; jsr delay_short
004B9Cr 1                   ; ply
004B9Cr 1                       jsr kb_get_char
004B9Cr 1               
004B9Cr 1                   .endif
004B9Cr 1               exit:                         ; Indicate no char available.
004B9Cr 1  60               rts                             ; return
004B9Dr 1               
004B9Dr 1               kernel_getc:
004B9Dr 1                   ; """Get a single character from the keyboard (waits for key).
004B9Dr 1                   ; """
004B9Dr 1                   ;; Get_Char_Wait - same as Get_Char only blocking.
004B9Dr 1                   ;; Uses: A (return value)
004B9Dr 1               Get_Char_Wait:
004B9Dr 1  20 rr rr         jsr Get_Char
004BA0r 1  90 FB            bcc Get_Char_Wait
004BA2r 1  60               rts
004BA3r 1               
004BA3r 1               check_ctrl_c:
004BA3r 1                   ;; Check if we have ctrl-C character, if so jump to nmi
004BA3r 1  C9 03            cmp #$03
004BA5r 1  D0 12            bne exit_ctrl_c
004BA7r 1  DA A2 00 BD      printascii abort_message
004BABr 1  rr rr F0 06  
004BAFr 1  20 rr rr E8  
004BB6r 1  4C rr rr         jmp xt_abort
004BB9r 1               
004BB9r 1               exit_ctrl_c:
004BB9r 1  60               rts
004BBAr 1               
004BBAr 1               
004BBAr 1               v_irq:                          ; IRQ handler
004BBAr 1  48                   pha
004BBBr 1  5A                   phy
004BBCr 1                       ; lda #'.'
004BBCr 1                       ; jsr kernel_putc
004BBCr 1                       ; check if bit 7 of IFR is set
004BBCr 1  AD 8D FF             lda IFR
004BBFr 1  10 0B                bpl v_kb_irq  ; Interrupt not from VIA, exit
004BC1r 1               
004BC1r 1  29 08                and #$08        ; ps2 has priority
004BC3r 1  D0 12                bne v_irq_ps2
004BC5r 1  AD 8D FF             lda IFR
004BC8r 1  29 40                and #$40
004BCAr 1  D0 20                bne v_irq_timer
004BCCr 1               v_kb_irq:
004BCCr 1  AD 9D FF             lda KB_IFR
004BCFr 1  10 26                bpl v_irq_exit
004BD1r 1  29 40                and #$40
004BD3r 1  D0 22                bne v_kb_irq_timer
004BD5r 1  80 20                bra v_irq_exit
004BD7r 1               
004BD7r 1               
004BD7r 1               v_irq_ps2:
004BD7r 1                   .ifdef ps2_irq
004BD7r 1  A5 rr                lda time
004BD9r 1  85 rr                sta last_ps2_time
004BDBr 1  A5 rr                lda time+1
004BDDr 1  85 rr                sta last_ps2_time+1
004BDFr 1  A5 rr                lda time+2
004BE1r 1  85 rr                sta last_ps2_time+2
004BE3r 1  A5 rr                lda time+3
004BE5r 1  85 rr                sta last_ps2_time+3
004BE7r 1                       ; this delay is here to ensure we prevent desynchronization
004BE7r 1                       ;ldy #$04         ; correct delay seems to be #$20 at 10Mhz
004BE7r 1                       ; jsr delay_short
004BE7r 1               
004BE7r 1               
004BE7r 1  20 rr rr             jsr ps2_irq
004BEAr 1               
004BEAr 1                       ; ldy #$04         ; correct delay seems to be #$20 at 10Mhz
004BEAr 1                       ; jsr delay_short
004BEAr 1                   .endif
004BEAr 1  80 0B                bra v_irq_exit
004BECr 1               
004BECr 1               v_irq_timer:
004BECr 1  AD 84 FF             lda T1CL
004BEFr 1                       ; clear timer interrupt
004BEFr 1                   .ifdef timer_irq
004BEFr 1  20 rr rr             jsr timer_irq
004BF2r 1                   .endif
004BF2r 1  20 rr rr             jsr Get_Char ; Check if a char is waiting to be able to break on CTRL-C
004BF5r 1                       ; check if there is a char waiting to be printed to the lcd
004BF5r 1                       ; lda lcd_char
004BF5r 1                       ; beq v_exit
004BF5r 1                       ; jsr lcd_print
004BF5r 1                       ; stz lcd_char
004BF5r 1               
004BF5r 1               
004BF5r 1  80 00                bra v_irq_exit
004BF7r 1               v_kb_irq_timer:
004BF7r 1               .ifdef kb_time
004BF7r 1                   lda KB_T1CL ; clear timer interrupt
004BF7r 1                   inc kb_time
004BF7r 1                   bne v_irq_exit
004BF7r 1               .endif
004BF7r 1                   ;jsr kb_scan
004BF7r 1               v_irq_exit:
004BF7r 1  7A               ply
004BF8r 1  68               pla
004BF9r 1  40               rti
004BFAr 1               
004BFAr 1               
004BFAr 1               
004BFAr 1               .segment "RODATA"
0000FFr 1               
0000FFr 1  57 65 6C 63  welcome_message: .byte "Welcome to Planck 6502", $0D, "Type 'words' for available words", 0
000103r 1  6F 6D 65 20  
000107r 1  74 6F 20 50  
000137r 1  0D 0A 00     abort_message: .byte AscCR, AscLF, 0
00013Ar 1               
00013Ar 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        .word v_nmi
000002r 1  rr rr        .word v_reset
000004r 1  rr rr        .word v_irq
000004r 1               
