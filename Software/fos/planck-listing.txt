ca65 V2.18 - N/A
Main file   : platform/planck/main.s
Current file: platform/planck/main.s

000000r 1               CLOCK_SPEED = 24000000
000000r 1               
000000r 1               ram_end = $8000
000000r 1               
000000r 1               .include "drivers/acia.inc"
000000r 2               ACIA_BASE   = $FFE0
000000r 2               ACIA_DATA = ACIA_BASE
000000r 2               ACIA_STATUS = ACIA_BASE + 1
000000r 2               ACIA_CMD = ACIA_BASE + 2
000000r 2               ACIA_CTRL = ACIA_BASE + 3
000000r 2               
000000r 2               
000000r 1               .include "drivers/via.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               VIA1_BASE   = $FF80
000000r 2               PORTB = VIA1_BASE
000000r 2               PORTA  = VIA1_BASE+1
000000r 2               DDRB = VIA1_BASE+2
000000r 2               DDRA = VIA1_BASE+3
000000r 2               
000000r 2               
000000r 2               T1CL = VIA1_BASE + 4
000000r 2               T1CH = VIA1_BASE + 5
000000r 2               T1LL = VIA1_BASE + 6
000000r 2               T1LH = VIA1_BASE + 7
000000r 2               ACR = VIA1_BASE + 11
000000r 2               PCR = VIA1_BASE + 12
000000r 2               IFR = VIA1_BASE + 13
000000r 2               IER = VIA1_BASE + 14
000000r 2               
000000r 1               .include "drivers/ps2.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               DATA = $80   ; Data is in bit 7 of PORTA
000000r 2               ; clock is on CA2
000000r 2               SHIFT = $1
000000r 2               ALT = $2
000000r 2               
000000r 2               KB_STATE_START = $0
000000r 2               KB_STATE_DATA = $1
000000r 2               KB_STATE_PARITY = $2
000000r 2               KB_STATE_STOP = $3
000000r 2               
000000r 2               KB_INIT_STATE_RESET = $0
000000r 2               KB_INIT_STATE_RESET_ACK = $1
000000r 2               KB_INIT_STATE_LEDS = $2
000000r 2               KB_INIT_STATE_LEDS_ACK = $3
000000r 2               KB_INIT_STATE_LEDS_DATA = $4
000000r 2               KB_INIT_STATE_LEDS_DATA_ACK = $5
000000r 2               
000000r 2               LSHIFT_KEY = $12
000000r 2               RSHIFT_KEY = $59
000000r 2               
000000r 2               TIMER_DELAY = $C4
000000r 2               
000000r 2               
000000r 1               .include "drivers/4004.inc"
000000r 2               
000000r 2               ; HD 44780 driver
000000r 2               ; all pins on VIA PORTA, 4 bit mode
000000r 2               
000000r 2               ; PORTA0 is free
000000r 2               LCD_BASE = $FFC0
000000r 2               LCD_RS = 1
000000r 2               LCD_E1 = 2
000000r 2               LCD_E2 = 4
000000r 2               
000000r 2               LCD_DATA = LCD_BASE | LCD_RS
000000r 2               LCD_ADDR = LCD_BASE & ($FF ^ LCD_RS)
000000r 2               LCD1_ENABLED = (LCD_BASE | LCD_E1)
000000r 2               LCD2_ENABLED = (LCD_BASE | LCD_E2)
000000r 2               LCD_DISABLED = LCD_BASE
000000r 2               ; A0: RS
000000r 2               ; A1: E1
000000r 2               ; A2: E2
000000r 2               
000000r 1               ; .include "drivers/lcd.inc"
000000r 1               .include "drivers/vga.inc"
000000r 2               VIDEO_BASE = $FFB0
000000r 2               
000000r 2               VIDEO_CTRL = VIDEO_BASE       ;// Formatted as follows |INCR_5|INCR_4|INCR_3|INCR_2|INCR_1|INCR_0|MODE_1|MODE_0|  default to LORES
000000r 2               VIDEO_ADDR_LOW = VIDEO_BASE + 1   ;// also contains the increment ||||ADDR4|ADDR_3|ADDR_2|ADDR_1|ADDR_0|
000000r 2               VIDEO_ADDR_HIGH = VIDEO_BASE + 2
000000r 2               VIDEO_DATA = VIDEO_BASE + 3
000000r 2               VIDEO_IEN = VIDEO_BASE + 4    ;// formatted as follows |VSYNC| | | | | | |HSYNC|
000000r 2               VIDEO_INTR = VIDEO_BASE + 5   ;// formatted as follows |VSYNC| | | | | | |HSYNC|
000000r 2               VIDEO_HSCROLL = VIDEO_BASE + 6
000000r 2               VIDEO_VSCROLL = VIDEO_BASE + 7
000000r 2               
000000r 2               VIDEO_HIRES_HCHARS = 80
000000r 2               VIDEO_HIRES_VCHARS = 60
000000r 2               
000000r 1               .include "drivers/keyboard.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               KB_VIA_BASE   = $FF90
000000r 2               KB_PORTB = KB_VIA_BASE
000000r 2               KB_PORTA  = KB_VIA_BASE+1
000000r 2               KB_DDRB = KB_VIA_BASE+2
000000r 2               KB_DDRA = KB_VIA_BASE+3
000000r 2               
000000r 2               
000000r 2               KB_T1CL = KB_VIA_BASE + 4
000000r 2               KB_T1CH = KB_VIA_BASE + 5
000000r 2               KB_T1LL = KB_VIA_BASE + 6
000000r 2               KB_T1LH = KB_VIA_BASE + 7
000000r 2               KB_ACR = KB_VIA_BASE + 11
000000r 2               KB_PCR = KB_VIA_BASE + 12
000000r 2               KB_IFR = KB_VIA_BASE + 13
000000r 2               KB_IER = KB_VIA_BASE + 14
000000r 2               
000000r 1               
000000r 1               .include "drivers/cf.inc"
000000r 2               
000000r 2               CF_BASE = $FFD0
000000r 2               CF_REG_0 = CF_BASE
000000r 2               CF_REG_1 = CF_BASE + 1
000000r 2               CF_REG_2 = CF_BASE + 2
000000r 2               CF_REG_3 = CF_BASE + 3
000000r 2               CF_REG_4 = CF_BASE + 4
000000r 2               CF_REG_5 = CF_BASE + 5
000000r 2               CF_REG_6 = CF_BASE + 6
000000r 2               CF_REG_7 = CF_BASE + 7
000000r 2               
000000r 2               CF_READ_SECTOR_COMMAND = $20
000000r 2               
000000r 1               
000000r 1               .include "drivers/zp.s"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               ; next_addr: .res 1
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 2               .segment "ZEROPAGE": zeropage
000000r 2               
000000r 2  xx xx        stack_p: .res 2
000002r 2               
000002r 2               
000002r 1               
000002r 1               .segment "BSS"
000000r 1               
000000r 1  xx           lcd_absent: .res 1
000001r 1               
000001r 1  xx           has_acia: .res 1
000002r 1               
000002r 1               
000002r 1               .segment "RODATA"
000000r 1               
000000r 1               .import    copydata
000000r 1               .import zerobss
000000r 1               
000000r 1               .segment "STARTUP"
000000r 1               
000000r 1               v_reset:
000000r 1  20 rr rr         JSR     copydata
000003r 1  20 rr rr         jsr zerobss
000006r 1  4C rr rr         jmp kernel_init
000009r 1               
000009r 1               
000009r 1               .include "drivers/acia.s"
000009r 2               .segment "DATA"
000000r 2               
000000r 2               acia_init:
000000r 2  8D E1 FF         sta ACIA_STATUS        ; soft reset (value not important)
000003r 2                                           ; set specific modes and functions
000003r 2  9C rr rr         stz has_acia
000006r 2  A9 0B            lda #$0B                ; no parity, no echo, no Tx interrupt, NO Rx interrupt, enable Tx/Rx
000008r 2                   ;lda #$09               ; no parity, no echo, no Tx interrupt, Rx interrupt, enable Tx/Rx
000008r 2  8D E2 FF         sta ACIA_CMD        ; store to the command register
00000Br 2  AD E2 FF         lda ACIA_CMD        ; load command register again
00000Er 2  C9 0B            cmp #$0B                ; if not the same
000010r 2  D0 11            bne acia_absent         ; then it means the ACIA is not connected
000012r 2  AD E1 FF         lda ACIA_STATUS         ; Read the ACAI status to
000015r 2  29 60            and #$60                ; check if present or absent
000017r 2  D0 0A            bne acia_absent
000019r 2  A9 01            lda #1
00001Br 2  8D rr rr         sta has_acia           ; remember that ACIA is here
00001Er 2  A9 10            lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 115.200k baud rate
000020r 2                   ;lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 1200 baud rate
000020r 2  8D E3 FF         sta ACIA_CTRL          ; program the ctl register
000023r 2               
000023r 2               acia_absent:
000023r 2  A0 14                ldy #20
000025r 2               aa_loop:
000025r 2  20 rr rr             jsr delay_short
000028r 2  AD E1 FF             lda ACIA_STATUS         ; Read ACIA data a few times
00002Br 2  AD E0 FF             lda ACIA_DATA           ; to try and prevent spurious characters
00002Er 2  88                   dey
00002Fr 2  D0 F4                bne aa_loop
000031r 2               aa_end:
000031r 2  60                   rts
000032r 2               
000032r 2               acia_out:
000032r 2  48               pha
000033r 2  5A               phy
000034r 2  8D E0 FF         sta ACIA_DATA
000037r 2  A0 40            ldy #$40            ;minimal delay is $02
000039r 2  20 rr rr         jsr delay_short
00003Cr 2  7A               ply
00003Dr 2  68               pla
00003Er 2  60               rts
00003Fr 2               
00003Fr 2               acia_getc:
00003Fr 2  AD E1 FF         lda ACIA_STATUS                 ; Read the ACIA status to
000042r 2  29 08            and #$08                        ; Check if there is character in the receiver
000044r 2  F0 05            beq @no_char      ; Exit now if we don't get one.
000046r 2  AD E0 FF         lda ACIA_DATA
000049r 2  38               sec
00004Ar 2  60               rts
00004Br 2               @no_char:
00004Br 2  18               clc
00004Cr 2  60               rts
00004Dr 2               
00004Dr 1               .include "drivers/timer.s"
00004Dr 2               
00004Dr 2               
00004Dr 2               COUNTER = CLOCK_SPEED/400        ; n/s
00004Dr 2               
00004Dr 2               .segment "ZEROPAGE": zeropage
000002r 2  xx xx xx xx  time: .res 4
000006r 2               
000006r 2               .segment "DATA"
00004Dr 2               
00004Dr 2               timer_init:
00004Dr 2  AD 8E FF         lda IER
000050r 2  09 C0            ora #$C0        ;enable interrupt on timer1 timeout
000052r 2  8D 8E FF         sta IER
000055r 2  A9 40            lda #$40        ; timer one free run mode
000057r 2  8D 8B FF         sta ACR
00005Ar 2  A9 60            lda #<COUNTER     ; set timer to low byte to calculated value from defined clock speed
00005Cr 2  8D 84 FF         sta T1CL
00005Fr 2  A9 EA            lda #>COUNTER       ; set timer to high byte to calculated value from defined clock speed
000061r 2               
000061r 2  8D 85 FF         sta T1CH
000064r 2  A9 00            lda #0              ; reset time variable
000066r 2  85 rr            sta time
000068r 2  85 rr            sta time+1
00006Ar 2  85 rr            sta time+2
00006Cr 2  85 rr            sta time+3
00006Er 2  58               cli
00006Fr 2  60               rts
000070r 2               
000070r 2               
000070r 2               timer_irq:
000070r 2  E6 rr            inc time
000072r 2  F0 01            beq @inc1
000074r 2               @exit1:
000074r 2                   ; this resets the PS/2 temp variables
000074r 2                   ;jsr reset_ps2
000074r 2  60               rts
000075r 2               @inc1:
000075r 2  E6 rr            inc time+1
000077r 2  F0 02            beq @inc2
000079r 2  80 F9            bra @exit1
00007Br 2               @inc2:
00007Br 2  E6 rr            inc time+2
00007Dr 2  F0 02            beq @inc3
00007Fr 2  80 F3            bra @exit1
000081r 2               @inc3:
000081r 2  E6 rr            inc time+3
000083r 2  80 EF            bra @exit1
000085r 2  60               rts
000086r 2               
000086r 1               ; .include "drivers/keyboard.s"
000086r 1               .include "drivers/ps2.s"
000086r 2               ; Copyright 2020 Jonathan Foucher
000086r 2               
000086r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000086r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000086r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000086r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000086r 2               ; is furnished to do so, subject to the following conditions:
000086r 2               
000086r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000086r 2               ; substantial portions of the Software.
000086r 2               
000086r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000086r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000086r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000086r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000086r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000086r 2               ; DEALINGS IN THE SOFTWARE.
000086r 2               
000086r 2               .segment "ZEROPAGE": zeropage
000006r 2               
000006r 2  xx xx xx xx  last_ps2_time: .res 4
00000Ar 2  xx           KB_BUF_W_PTR: .res 1
00000Br 2  xx           KB_BUF_R_PTR: .res 1
00000Cr 2  xx           control_keys: .res 1
00000Dr 2  xx           character: .res 1
00000Er 2               
00000Er 2               .segment "BSS"
000002r 2  xx xx xx xx  KB_BUF: .res 128
000006r 2  xx xx xx xx  
00000Ar 2  xx xx xx xx  
000082r 2  xx           KB_STATE: .res 1
000083r 2  xx           KB_TEMP: .res 1
000084r 2  xx           KB_PARITY: .res 1
000085r 2  xx           KB_BIT: .res 1
000086r 2  xx           KB_INIT_STATE: .res 1
000087r 2  xx           KB_INIT_WAIT: .res 1
000088r 2  xx           ready: .res 1
000089r 2  xx           to_send: .res 1
00008Ar 2  xx           ignore_next: .res 1
00008Br 2               
00008Br 2               .segment "RODATA"
000000r 2               
000000r 2               .include "drivers/keycodes.s"
000000r 3               
000000r 3               
000000r 3               ASCIITBL:
000000r 3  00               .byte $00               ; 00 no key pressed
000001r 3  89               .byte $89               ; 01 F9
000002r 3  87               .byte $87               ; 02 relocated F7
000003r 3  85               .byte $85               ; 03 F5
000004r 3  83               .byte $83               ; 04 F3
000005r 3  81               .byte $81               ; 05 F1
000006r 3  82               .byte $82               ; 06 F2
000007r 3  8C               .byte $8C               ; 07 F12
000008r 3  00               .byte $00               ; 08
000009r 3  8A               .byte $8A               ; 09 F10
00000Ar 3  88               .byte $88               ; 0A F8
00000Br 3  86               .byte $86               ; 0B F6
00000Cr 3  84               .byte $84               ; 0C F4
00000Dr 3  09               .byte $09               ; 0D tab
00000Er 3  60               .byte $60               ; 0E `~
00000Fr 3  8F               .byte $8F               ; 0F relocated Print Screen key
000010r 3  03               .byte $03               ; 10 relocated Pause/Break key
000011r 3  A0               .byte $A0               ; 11 left alt (right alt too)
000012r 3  00               .byte $00               ; 12 left shift
000013r 3  E0               .byte $E0               ; 13 relocated Alt release code
000014r 3  00               .byte $00               ; 14 left ctrl (right ctrl too)
000015r 3  71               .byte $71               ; 15 qQ
000016r 3  31               .byte $31               ; 16 1!
000017r 3  00               .byte $00               ; 17
000018r 3  00               .byte $00               ; 18
000019r 3  00               .byte $00               ; 19
00001Ar 3  7A               .byte $7A               ; 1A zZ
00001Br 3  73               .byte $73               ; 1B sS
00001Cr 3  61               .byte $61               ; 1C aA
00001Dr 3  77               .byte $77               ; 1D wW
00001Er 3  32               .byte $32               ; 1E 2@
00001Fr 3  A1               .byte $A1               ; 1F Windows 98 menu key (left side)
000020r 3  02               .byte $02               ; 20 relocated ctrl-break key
000021r 3  63               .byte $63               ; 21 cC
000022r 3  78               .byte $78               ; 22 xX
000023r 3  64               .byte $64               ; 23 dD
000024r 3  65               .byte $65               ; 24 eE
000025r 3  34               .byte $34               ; 25 4$
000026r 3  33               .byte $33               ; 26 3#
000027r 3  A2               .byte $A2               ; 27 Windows 98 menu key (right side)
000028r 3  00               .byte $00               ; 28
000029r 3  20               .byte $20               ; 29 space
00002Ar 3  76               .byte $76               ; 2A vV
00002Br 3  66               .byte $66               ; 2B fF
00002Cr 3  74               .byte $74               ; 2C tT
00002Dr 3  72               .byte $72               ; 2D rR
00002Er 3  35               .byte $35               ; 2E 5%
00002Fr 3  A3               .byte $A3               ; 2F Windows 98 option key (right click, right side)
000030r 3  00               .byte $00               ; 30
000031r 3  6E               .byte $6E               ; 31 nN
000032r 3  62               .byte $62               ; 32 bB
000033r 3  68               .byte $68               ; 33 hH
000034r 3  67               .byte $67               ; 34 gG
000035r 3  79               .byte $79               ; 35 yY
000036r 3  36               .byte $36               ; 36 6^
000037r 3  00               .byte $00               ; 37
000038r 3  00               .byte $00               ; 38
000039r 3  00               .byte $00               ; 39
00003Ar 3  6D               .byte $6D               ; 3A mM
00003Br 3  6A               .byte $6A               ; 3B jJ
00003Cr 3  75               .byte $75               ; 3C uU
00003Dr 3  37               .byte $37               ; 3D 7&
00003Er 3  38               .byte $38               ; 3E 8*
00003Fr 3  00               .byte $00               ; 3F
000040r 3  00               .byte $00               ; 40
000041r 3  2C               .byte $2C               ; 41 ,<
000042r 3  6B               .byte $6B               ; 42 kK
000043r 3  69               .byte $69               ; 43 iI
000044r 3  6F               .byte $6F               ; 44 oO
000045r 3  30               .byte $30               ; 45 0)
000046r 3  39               .byte $39               ; 46 9(
000047r 3  00               .byte $00               ; 47
000048r 3  00               .byte $00               ; 48
000049r 3  2E               .byte $2E               ; 49 .>
00004Ar 3  2F               .byte $2F               ; 4A /?
00004Br 3  6C               .byte $6C               ; 4B lL
00004Cr 3  3B               .byte $3B               ; 4C ;:
00004Dr 3  70               .byte $70               ; 4D pP
00004Er 3  2D               .byte $2D               ; 4E -_
00004Fr 3  00               .byte $00               ; 4F
000050r 3  00               .byte $00               ; 50
000051r 3  00               .byte $00               ; 51
000052r 3  27               .byte $27               ; 52 '"
000053r 3  00               .byte $00               ; 53
000054r 3  5B               .byte $5B               ; 54 [{
000055r 3  3D               .byte $3D               ; 55 =+
000056r 3  00               .byte $00               ; 56
000057r 3  00               .byte $00               ; 57
000058r 3  00               .byte $00               ; 58 caps
000059r 3  00               .byte $00               ; 59 r shift
00005Ar 3  0D               .byte $0D               ; 5A <Enter>
00005Br 3  5D               .byte $5D               ; 5B ]}
00005Cr 3  00               .byte $00               ; 5C
00005Dr 3  5C               .byte $5C               ; 5D \|
00005Er 3  00               .byte $00               ; 5E
00005Fr 3  00               .byte $00               ; 5F
000060r 3  00               .byte $00               ; 60
000061r 3  00               .byte $00               ; 61
000062r 3  00               .byte $00               ; 62
000063r 3  00               .byte $00               ; 63
000064r 3  00               .byte $00               ; 64
000065r 3  00               .byte $00               ; 65
000066r 3  08               .byte $08               ; 66 bkspace
000067r 3  00               .byte $00               ; 67
000068r 3  00               .byte $00               ; 68
000069r 3  31               .byte $31               ; 69 kp 1
00006Ar 3  2F               .byte $2f               ; 6A kp / converted from E04A in code
00006Br 3  34               .byte $34               ; 6B kp 4
00006Cr 3  37               .byte $37               ; 6C kp 7
00006Dr 3  00               .byte $00               ; 6D
00006Er 3  00               .byte $00               ; 6E
00006Fr 3  00               .byte $00               ; 6F
000070r 3  30               .byte $30               ; 70 kp 0
000071r 3  2E               .byte $2E               ; 71 kp .
000072r 3  32               .byte $32               ; 72 kp 2
000073r 3  35               .byte $35               ; 73 kp 5
000074r 3  36               .byte $36               ; 74 kp 6
000075r 3  38               .byte $38               ; 75 kp 8
000076r 3  1B               .byte $1B               ; 76 esc
000077r 3  00               .byte $00               ; 77 num lock
000078r 3  8B               .byte $8B               ; 78 F11
000079r 3  2B               .byte $2B               ; 79 kp +
00007Ar 3  33               .byte $33               ; 7A kp 3
00007Br 3  2D               .byte $2D               ; 7B kp -
00007Cr 3  2A               .byte $2A               ; 7C kp *
00007Dr 3  39               .byte $39               ; 7D kp 9
00007Er 3  8D               .byte $8D               ; 7E scroll lock
00007Fr 3  00               .byte $00               ; 7F
000080r 3                   ;
000080r 3                   ; Table for shifted scancodes
000080r 3                   ;
000080r 3  00               .byte $00               ; 80
000081r 3  C9               .byte $C9               ; 81 F9
000082r 3  C7               .byte $C7               ; 82 relocated F7
000083r 3  C5               .byte $C5               ; 83 F5 (F7 actual scancode=83)
000084r 3  C3               .byte $C3               ; 84 F3
000085r 3  C1               .byte $C1               ; 85 F1
000086r 3  C2               .byte $C2               ; 86 F2
000087r 3  CC               .byte $CC               ; 87 F12
000088r 3  00               .byte $00               ; 88
000089r 3  CA               .byte $CA               ; 89 F10
00008Ar 3  C8               .byte $C8               ; 8A F8
00008Br 3  C6               .byte $C6               ; 8B F6
00008Cr 3  C4               .byte $C4               ; 8C F4
00008Dr 3  09               .byte $09               ; 8D tab
00008Er 3  7E               .byte $7E               ; 8E `~
00008Fr 3  CF               .byte $CF               ; 8F relocated Print Screen key
000090r 3  03               .byte $03               ; 90 relocated Pause/Break key
000091r 3  A0               .byte $A0               ; 91 left alt (right alt)
000092r 3  00               .byte $00               ; 92 left shift
000093r 3  E0               .byte $E0               ; 93 relocated Alt release code
000094r 3  00               .byte $00               ; 94 left ctrl (and right ctrl)
000095r 3  51               .byte $51               ; 95 qQ
000096r 3  21               .byte $21               ; 96 1!
000097r 3  00               .byte $00               ; 97
000098r 3  00               .byte $00               ; 98
000099r 3  00               .byte $00               ; 99
00009Ar 3  5A               .byte $5A               ; 9A zZ
00009Br 3  53               .byte $53               ; 9B sS
00009Cr 3  41               .byte $41               ; 9C aA
00009Dr 3  57               .byte $57               ; 9D wW
00009Er 3  40               .byte $40               ; 9E 2@
00009Fr 3  E1               .byte $E1               ; 9F Windows 98 menu key (left side)
0000A0r 3  02               .byte $02               ; A0 relocated ctrl-break key
0000A1r 3  43               .byte $43               ; A1 cC
0000A2r 3  58               .byte $58               ; A2 xX
0000A3r 3  44               .byte $44               ; A3 dD
0000A4r 3  45               .byte $45               ; A4 eE
0000A5r 3  24               .byte $24               ; A5 4$
0000A6r 3  23               .byte $23               ; A6 3#
0000A7r 3  E2               .byte $E2               ; A7 Windows 98 menu key (right side)
0000A8r 3  00               .byte $00               ; A8
0000A9r 3  20               .byte $20               ; A9 space
0000AAr 3  56               .byte $56               ; AA vV
0000ABr 3  46               .byte $46               ; AB fF
0000ACr 3  54               .byte $54               ; AC tT
0000ADr 3  52               .byte $52               ; AD rR
0000AEr 3  25               .byte $25               ; AE 5%
0000AFr 3  E3               .byte $E3               ; AF Windows 98 option key (right click, right side)
0000B0r 3  00               .byte $00               ; B0
0000B1r 3  4E               .byte $4E               ; B1 nN
0000B2r 3  42               .byte $42               ; B2 bB
0000B3r 3  48               .byte $48               ; B3 hH
0000B4r 3  47               .byte $47               ; B4 gG
0000B5r 3  59               .byte $59               ; B5 yY
0000B6r 3  5E               .byte $5E               ; B6 6^
0000B7r 3  00               .byte $00               ; B7
0000B8r 3  00               .byte $00               ; B8
0000B9r 3  00               .byte $00               ; B9
0000BAr 3  4D               .byte $4D               ; BA mM
0000BBr 3  4A               .byte $4A               ; BB jJ
0000BCr 3  55               .byte $55               ; BC uU
0000BDr 3  26               .byte $26               ; BD 7&
0000BEr 3  2A               .byte $2A               ; BE 8*
0000BFr 3  00               .byte $00               ; BF
0000C0r 3  00               .byte $00               ; C0
0000C1r 3  3C               .byte $3C               ; C1 ,<
0000C2r 3  4B               .byte $4B               ; C2 kK
0000C3r 3  49               .byte $49               ; C3 iI
0000C4r 3  4F               .byte $4F               ; C4 oO
0000C5r 3  29               .byte $29               ; C5 0)
0000C6r 3  28               .byte $28               ; C6 9(
0000C7r 3  00               .byte $00               ; C7
0000C8r 3  00               .byte $00               ; C8
0000C9r 3  3E               .byte $3E               ; C9 .>
0000CAr 3  3F               .byte $3F               ; CA /?
0000CBr 3  4C               .byte $4C               ; CB lL
0000CCr 3  3A               .byte $3A               ; CC ;:
0000CDr 3  50               .byte $50               ; CD pP
0000CEr 3  5F               .byte $5F               ; CE -_
0000CFr 3  00               .byte $00               ; CF
0000D0r 3  00               .byte $00               ; D0
0000D1r 3  00               .byte $00               ; D1
0000D2r 3  22               .byte $22               ; D2 '"
0000D3r 3  00               .byte $00               ; D3
0000D4r 3  7B               .byte $7B               ; D4 [{
0000D5r 3  2B               .byte $2B               ; D5 =+
0000D6r 3  00               .byte $00               ; D6
0000D7r 3  00               .byte $00               ; D7
0000D8r 3  00               .byte $00               ; D8 caps
0000D9r 3  00               .byte $00               ; D9 r shift
0000DAr 3  0D               .byte $0D               ; DA <Enter>
0000DBr 3  7D               .byte $7D               ; DB ]}
0000DCr 3  00               .byte $00               ; DC
0000DDr 3  7C               .byte $7C               ; DD \|
0000DEr 3  00               .byte $00               ; DE
0000DFr 3  00               .byte $00               ; DF
0000E0r 3  00               .byte $00               ; E0
0000E1r 3  00               .byte $00               ; E1
0000E2r 3  00               .byte $00               ; E2
0000E3r 3  00               .byte $00               ; E3
0000E4r 3  00               .byte $00               ; E4
0000E5r 3  00               .byte $00               ; E5
0000E6r 3  08               .byte $08               ; E6 bkspace
0000E7r 3  00               .byte $00               ; E7
0000E8r 3  00               .byte $00               ; E8
0000E9r 3  91               .byte $91               ; E9 kp 1
0000EAr 3  2F               .byte $2f               ; EA kp / converted from E04A in code
0000EBr 3  94               .byte $94               ; EB kp 4
0000ECr 3  97               .byte $97               ; EC kp 7
0000EDr 3  00               .byte $00               ; ED
0000EEr 3  00               .byte $00               ; EE
0000EFr 3  00               .byte $00               ; EF
0000F0r 3  90               .byte $90               ; F0 kp 0
0000F1r 3  7F               .byte $7F               ; F1 kp .
0000F2r 3  92               .byte $92               ; F2 kp 2
0000F3r 3  95               .byte $95               ; F3 kp 5
0000F4r 3  96               .byte $96               ; F4 kp 6
0000F5r 3  98               .byte $98               ; F5 kp 8
0000F6r 3  1B               .byte $1B               ; F6 esc
0000F7r 3  00               .byte $00               ; F7 num lock
0000F8r 3  CB               .byte $CB               ; F8 F11
0000F9r 3  2B               .byte $2B               ; F9 kp +
0000FAr 3  93               .byte $93               ; FA kp 3
0000FBr 3  2D               .byte $2D               ; FB kp -
0000FCr 3  2A               .byte $2A               ; FC kp *
0000FDr 3  99               .byte $99               ; FD kp 9
0000FEr 3  CD               .byte $CD               ; FE scroll lock
0000FFr 3               
0000FFr 3               
0000FFr 3               
0000FFr 3               
0000FFr 2               
0000FFr 2               .segment "DATA"
000086r 2               
000086r 2               ps2_init:
000086r 2  78             sei ; prevent interrupts while initializing
000087r 2               kb_conn_msg:
000087r 2  A2 00          ldx #0
000089r 2               kb_conn_loop:
000089r 2  BD rr rr       lda kb_conn_msg_text,x
00008Cr 2  F0 1A          beq kb_conn_msg_end
00008Er 2  20 rr rr       jsr kernel_putc
000091r 2  E8             inx
000092r 2  80 F5          bra kb_conn_loop
000094r 2  44 65 74 65  kb_conn_msg_text: .byte "Detecting keyboard", $0D, $00
000098r 2  63 74 69 6E  
00009Cr 2  67 20 6B 65  
0000A8r 2               kb_conn_msg_end:
0000A8r 2               
0000A8r 2  AD 8E FF       lda IER
0000ABr 2  09 88          ora #$88      ;enable interrupt on neg transition on CB2
0000ADr 2  8D 8E FF       sta IER
0000B0r 2               
0000B0r 2  A9 00          lda #0
0000B2r 2  8D 8C FF       sta PCR
0000B5r 2  8D rr rr       sta KB_TEMP
0000B8r 2  8D rr rr       sta KB_BIT
0000BBr 2  8D rr rr       sta KB_STATE
0000BEr 2  8D rr rr       sta to_send
0000C1r 2  8D rr rr       sta KB_PARITY
0000C4r 2  85 rr          sta KB_BUF_W_PTR
0000C6r 2  85 rr          sta KB_BUF_R_PTR
0000C8r 2  8D rr rr       sta KB_INIT_STATE
0000CBr 2  8D rr rr       sta KB_INIT_WAIT
0000CEr 2  8D rr rr       sta ready
0000D1r 2  8D rr rr       sta ignore_next
0000D4r 2  85 rr          sta character
0000D6r 2  20 rr rr       jsr clear_buffer
0000D9r 2               
0000D9r 2                 ; jsr kb_reset
0000D9r 2                 ; jsr kb_leds
0000D9r 2                 ; jsr kb_leds_data
0000D9r 2               
0000D9r 2                 ; jmp done_init
0000D9r 2               
0000D9r 2  A9 00          lda #KB_INIT_STATE_RESET
0000DBr 2  8D rr rr       sta KB_INIT_STATE
0000DEr 2  58             cli           ;enable interrupts
0000DFr 2               
0000DFr 2               @wait1:
0000DFr 2  A0 0A          ldy #10
0000E1r 2  20 rr rr       jsr delay
0000E4r 2  EE rr rr       inc KB_INIT_WAIT
0000E7r 2  F0 1C          beq done_init     ; nothing to show yet
0000E9r 2  AD rr rr       lda to_send
0000ECr 2  D0 F1          bne @wait1       ; do nothing while sending
0000EEr 2               
0000EEr 2                 ;jsr lcd_print
0000EEr 2               
0000EEr 2  AE rr rr       ldx KB_INIT_STATE
0000F1r 2  E0 00          cpx #KB_INIT_STATE_RESET
0000F3r 2  F0 06          beq @do_reset
0000F5r 2  E0 01          cpx #KB_INIT_STATE_RESET_ACK
0000F7r 2  F0 0C          beq done_init
0000F9r 2                 ; beq @self_test_ok  ; Wait for 256 loops with nothing. if still nothing, reset keyboard
0000F9r 2               
0000F9r 2  80 0A          bra done_init
0000FBr 2                 ;sta PORTA
0000FBr 2                 ; wait for keyboard self test (#$AA)
0000FBr 2               
0000FBr 2               @do_reset:
0000FBr 2  20 rr rr       jsr kb_reset
0000FEr 2  A9 01          lda #KB_INIT_STATE_RESET_ACK  ; next state should be an acknowledgment
000100r 2  8D rr rr       sta KB_INIT_STATE
000103r 2  80 DA          bra @wait1
000105r 2               
000105r 2               
000105r 2               done_init:
000105r 2  A9 00          lda #0
000107r 2  8D 82 FF       sta DDRB
00010Ar 2  8D 8C FF       sta PCR
00010Dr 2  8D rr rr       sta ignore_next
000110r 2  8D rr rr       sta ready
000113r 2  85 rr          sta control_keys
000115r 2  8D rr rr       sta to_send
000118r 2  8D rr rr       sta ready
00011Br 2  85 rr          sta character
00011Dr 2  8D rr rr       sta KB_TEMP
000120r 2  8D rr rr       sta KB_INIT_STATE
000123r 2  8D rr rr       sta KB_BIT
000126r 2  8D rr rr       sta KB_STATE
000129r 2  85 rr          sta KB_BUF_W_PTR
00012Br 2  85 rr          sta KB_BUF_R_PTR
00012Dr 2  58             cli ; enable interrupts again
00012Er 2  60             rts
00012Fr 2               
00012Fr 2               
00012Fr 2               kb_reset:
00012Fr 2  A9 00          lda #0
000131r 2  8D rr rr       sta KB_INIT_WAIT
000134r 2  A9 F0          lda #$F0
000136r 2  8D 81 FF       sta PORTA
000139r 2  78             sei                   ;disable interrupts
00013Ar 2  20 rr rr       jsr prepare_send
00013Dr 2  A9 FF          lda #$FF
00013Fr 2  8D rr rr       sta to_send
000142r 2  58             cli                   ; enable interrupts
000143r 2  60             rts
000144r 2               
000144r 2               no_kb_msg:
000144r 2  A2 00          ldx #0
000146r 2               no_kb_loop:
000146r 2  BD rr rr       lda no_kb_msg_text,x
000149r 2  F0 BA          beq done_init
00014Br 2  20 rr rr       jsr kernel_putc
00014Er 2  E8             inx
00014Fr 2  80 F5          bra no_kb_loop
000151r 2  4E 6F 20 6B  no_kb_msg_text: .byte "No keyboard connected", $0D, $00
000155r 2  65 79 62 6F  
000159r 2  61 72 64 20  
000168r 2               
000168r 2               
000168r 2               prepare_send:
000168r 2  48             pha
000169r 2  5A             phy
00016Ar 2                 ; ready to send, pull clock low for a while
00016Ar 2  A9 C0          lda #$C0
00016Cr 2  8D 8C FF       sta PCR       ;set CB2 low
00016Fr 2                 ;delay
00016Fr 2  A0 80          ldy #$80
000171r 2  20 rr rr       jsr delay
000174r 2                 ; delay end
000174r 2                 ; pull data low now
000174r 2  AD 80 FF       lda PORTB
000177r 2  29 7F          and #($FF^DATA)
000179r 2  8D 80 FF       sta PORTB
00017Cr 2  AD 82 FF       lda DDRB
00017Fr 2  09 80          ora #DATA   ;data as output to set it low
000181r 2  8D 82 FF       sta DDRB
000184r 2  A0 40          ldy #$40
000186r 2  20 rr rr       jsr delay
000189r 2  A9 01          lda #KB_STATE_DATA    ; no start bit when sending
00018Br 2  8D rr rr       sta KB_STATE
00018Er 2                 ; release clock
00018Er 2  A9 00          lda #0
000190r 2  8D rr rr       sta to_send
000193r 2  8D rr rr       sta KB_PARITY
000196r 2  8D 8C FF       sta PCR       ;set CB2 to negative edge input
000199r 2               
000199r 2  7A             ply
00019Ar 2  68             pla
00019Br 2  60             rts
00019Cr 2               
00019Cr 2               
00019Cr 2               reset_ps2:          ; routine called during a timer interrupt to check
00019Cr 2  48             pha
00019Dr 2                                   ; if the elasped time since the last ps2 interrupt allows us to reset it
00019Dr 2  A5 rr          lda time+3
00019Fr 2  C5 rr          cmp last_ps2_time+3
0001A1r 2  90 16          bcc @reset
0001A3r 2  A5 rr          lda time+2
0001A5r 2  C5 rr          cmp last_ps2_time+2
0001A7r 2  90 10          bcc @reset
0001A9r 2  A5 rr          lda time+1
0001ABr 2  C5 rr          cmp last_ps2_time+1
0001ADr 2  90 0A          bcc @reset
0001AFr 2  A5 rr          lda time
0001B1r 2  69 01          adc #$1
0001B3r 2  C5 rr          cmp last_ps2_time
0001B5r 2  90 02          bcc @reset
0001B7r 2               @exit2:
0001B7r 2  68             pla
0001B8r 2  60             rts
0001B9r 2               @reset:
0001B9r 2  A9 00          lda #0
0001BBr 2  8D rr rr       sta KB_TEMP
0001BEr 2  8D rr rr       sta KB_BIT
0001C1r 2  8D rr rr       sta KB_STATE
0001C4r 2  85 rr          sta KB_BUF_W_PTR
0001C6r 2  85 rr          sta KB_BUF_R_PTR
0001C8r 2  F0 ED          beq @exit2
0001CAr 2               
0001CAr 2               clear_buffer:
0001CAr 2  DA             phx
0001CBr 2  A2 FF          ldx #$ff
0001CDr 2               @clear_loop:
0001CDr 2  9E rr rr       stz KB_BUF, x
0001D0r 2  CA             dex
0001D1r 2  D0 FA          bne @clear_loop
0001D3r 2  FA             plx
0001D4r 2  60             rts
0001D5r 2               
0001D5r 2               
0001D5r 2               ps2_get_char:
0001D5r 2               
0001D5r 2  DA               phx                             ; save X
0001D6r 2  A6 rr            ldx KB_BUF_R_PTR                ; check the keyboard buffer
0001D8r 2  BD rr rr         lda KB_BUF, x
0001DBr 2  F0 0B            beq no_ps2_char_available       ; exit if nothing found
0001DDr 2  9E rr rr         stz KB_BUF, x                   ; if there was a character, reset this buffer cell
0001E0r 2  E6 rr            inc KB_BUF_R_PTR                ; and increment the read pointer
0001E2r 2               
0001E2r 2  38               sec                             ; mark character present
0001E3r 2  FA               plx                             ; restore X
0001E4r 2  20 rr rr         jsr check_ctrl_c
0001E7r 2  60               rts                             ; return
0001E8r 2               no_ps2_char_available:                  ; no keyboard char
0001E8r 2  E6 rr            inc KB_BUF_R_PTR                ; increment read pointer for next time
0001EAr 2  FA               plx                             ; restore X
0001EBr 2  18               clc
0001ECr 2  60               rts
0001EDr 2                 .include "ps2_irq.s"
0001EDr 3               ; Copyright 2020 Jonathan Foucher
0001EDr 3               
0001EDr 3               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
0001EDr 3               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
0001EDr 3               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
0001EDr 3               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
0001EDr 3               ; is furnished to do so, subject to the following conditions:
0001EDr 3               
0001EDr 3               ; The above copyright notice and this permission notice shall be included in all copies or
0001EDr 3               ; substantial portions of the Software.
0001EDr 3               
0001EDr 3               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
0001EDr 3               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
0001EDr 3               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
0001EDr 3               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
0001EDr 3               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
0001EDr 3               ; DEALINGS IN THE SOFTWARE.
0001EDr 3               
0001EDr 3               
0001EDr 3               
0001EDr 3               
0001EDr 3               ps2_irq:
0001EDr 3  48               pha
0001EEr 3  DA               phx
0001EFr 3  AD rr rr         lda to_send
0001F2r 3  D0 25            bne @willsend
0001F4r 3  AD rr rr         lda KB_STATE            ; which state ?
0001F7r 3  C9 00            cmp #KB_STATE_START
0001F9r 3  F0 0F            beq @start        ; start bit
0001FBr 3               
0001FBr 3  C9 01            cmp #KB_STATE_DATA             ; get data bits
0001FDr 3  F0 1D            beq @data
0001FFr 3               
0001FFr 3  C9 02            cmp #KB_STATE_PARITY             ; this is the parity bit
000201r 3  F0 3A            beq @parity
000203r 3               
000203r 3  C9 03            cmp #KB_STATE_STOP      ; stop bit
000205r 3  F0 3D            beq @stop
000207r 3  4C rr rr         jmp @exit
00020Ar 3               
00020Ar 3               @start:
00020Ar 3  A9 01            lda #KB_STATE_DATA
00020Cr 3  8D rr rr         sta KB_STATE        ; next state will be to get data
00020Fr 3  A9 00            lda #0
000211r 3  8D rr rr         sta KB_TEMP
000214r 3  8D rr rr         sta KB_BIT
000217r 3  80 65            bra @exit
000219r 3               @willsend:
000219r 3  4C rr rr         jmp @sending
00021Cr 3               @data:
00021Cr 3  AD 80 FF         lda PORTB       ; get the bit of data from PORTB bit 7
00021Fr 3  29 80            and #$80
000221r 3  0D rr rr         ora KB_TEMP     ; OR it with existing temp data
000224r 3  8D rr rr         sta KB_TEMP     ; save it
000227r 3  EE rr rr         inc KB_BIT      ; prepare for next bit
00022Ar 3  AD rr rr         lda KB_BIT
00022Dr 3  C9 08            cmp #8          ; if this is the last bit, next state is parity
00022Fr 3  F0 05            beq @next_state_parity
000231r 3  4E rr rr         lsr KB_TEMP     ; if not last bit, shift KB_TEMP right to prepare for next bit
000234r 3               
000234r 3  80 48            bra @exit
000236r 3               
000236r 3               @next_state_parity:
000236r 3  A9 02            lda #KB_STATE_PARITY    ;next state is parity
000238r 3  8D rr rr         sta KB_STATE
00023Br 3  80 41            bra @exit
00023Dr 3               
00023Dr 3               @parity:
00023Dr 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
00023Fr 3  8D rr rr         sta KB_STATE
000242r 3  80 3A            bra @exit
000244r 3               
000244r 3               @stop:
000244r 3  A9 00            lda #KB_STATE_START
000246r 3  8D rr rr         sta KB_STATE
000249r 3  AD rr rr         lda ignore_next
00024Cr 3  D0 45            bne @ignored
00024Er 3                   ; Save key to character buffer
00024Er 3  AE rr rr         ldx KB_TEMP
000251r 3  E0 AA            cpx #$AA
000253r 3  F0 32            beq @init
000255r 3  E0 FA            cpx #$FA
000257r 3  F0 2E            beq @init
000259r 3  E0 F0            cpx #$F0
00025Br 3  F0 2F            beq @ignore_next
00025Dr 3  E0 12            cpx #LSHIFT_KEY
00025Fr 3  F0 4F            beq @shift_pressed
000261r 3  E0 59            cpx #RSHIFT_KEY
000263r 3  F0 4B            beq @shift_pressed
000265r 3  A5 rr            lda control_keys
000267r 3  29 01            and #SHIFT
000269r 3  D0 09            bne @shifted
00026Br 3               @unshifted:
00026Br 3                   ;stx PORTA
00026Br 3  BD rr rr         lda ASCIITBL, x
00026Er 3               
00026Er 3  C9 1B            cmp #$1B             ; reset if escape pressed
000270r 3  F0 12            beq @esc
000272r 3  80 03            bra @output
000274r 3               @shifted:
000274r 3  BD rr rr         lda ASCIITBL+128, x
000277r 3               @output:
000277r 3  A6 rr            ldx KB_BUF_W_PTR
000279r 3  9D rr rr         sta KB_BUF, x
00027Cr 3                   ;sta PORTA
00027Cr 3  E6 rr            inc KB_BUF_W_PTR
00027Er 3               
00027Er 3               @exit:
00027Er 3  2C 80 FF         bit PORTB
000281r 3  FA               plx
000282r 3  68               pla
000283r 3  60               rts
000284r 3               @esc:
000284r 3  4C rr rr         jmp v_reset
000287r 3               @init:
000287r 3  8E rr rr         stx ready
00028Ar 3  80 F2            bra @exit
00028Cr 3               
00028Cr 3               @ignore_next:
00028Cr 3  A9 01            lda #1
00028Er 3  8D rr rr         sta ignore_next
000291r 3  80 EB            bra @exit
000293r 3               
000293r 3               @ignored:
000293r 3  AE rr rr         ldx KB_TEMP
000296r 3  E0 12            cpx #LSHIFT_KEY
000298r 3  F0 0B            beq @shift_released
00029Ar 3  E0 59            cpx #RSHIFT_KEY
00029Cr 3  F0 07            beq @shift_released
00029Er 3  A9 00            lda #0
0002A0r 3  8D rr rr         sta ignore_next
0002A3r 3  80 D9            bra @exit
0002A5r 3               
0002A5r 3               @shift_released:
0002A5r 3  A9 00            lda #0
0002A7r 3  8D rr rr         sta ignore_next
0002AAr 3  A9 00            lda #0
0002ACr 3  85 rr            sta control_keys
0002AEr 3  80 CE            bra @exit
0002B0r 3               
0002B0r 3               @shift_pressed:
0002B0r 3  A5 rr            lda control_keys
0002B2r 3  09 01            ora #SHIFT
0002B4r 3  85 rr            sta control_keys
0002B6r 3  80 C6            bra @exit
0002B8r 3               
0002B8r 3               @sending:
0002B8r 3                   ; lda #1
0002B8r 3                   ; sta PORTA
0002B8r 3                   ; data pin of DDRB should be set as output by prepare_send
0002B8r 3  AD rr rr         lda KB_STATE                ; which state ?
0002BBr 3  C9 01            cmp #KB_STATE_DATA          ; send data bits
0002BDr 3  F0 0A            beq @sending_data
0002BFr 3  C9 02            cmp #KB_STATE_PARITY        ; this is the parity bit
0002C1r 3  F0 33            beq @sending_parity
0002C3r 3  C9 03            cmp #KB_STATE_STOP          ; stop bit
0002C5r 3  F0 56            beq @sending_stop
0002C7r 3  80 B5            bra @exit
0002C9r 3               
0002C9r 3               
0002C9r 3               @sending_data:
0002C9r 3                   ; lda #4
0002C9r 3                   ; sta PORTA
0002C9r 3  AD rr rr         lda to_send       ; get the bit of data from memory
0002CCr 3  29 01            and #$01          ; get only bottom bit
0002CEr 3  F0 0D            beq @send_zero
0002D0r 3               
0002D0r 3               @send_one:
0002D0r 3  AD 80 FF         lda PORTB
0002D3r 3  09 80            ora #$80
0002D5r 3  8D 80 FF         sta PORTB
0002D8r 3  EE rr rr         inc KB_PARITY
0002DBr 3  80 08            bra @sending_done
0002DDr 3               @send_zero:
0002DDr 3  AD 80 FF         lda PORTB
0002E0r 3  29 7F            and #$7F
0002E2r 3  8D 80 FF         sta PORTB
0002E5r 3               @sending_done:
0002E5r 3                   ; lda #2
0002E5r 3                   ; sta PORTA
0002E5r 3  EE rr rr         inc KB_BIT      ; prepare for next bit
0002E8r 3  AD rr rr         lda KB_BIT
0002EBr 3  C9 08            cmp #8          ; if this is the last bit, next state is parity
0002EDr 3  4C rr rr         jmp @next_state_parity
0002F0r 3  4E rr rr         lsr to_send
0002F3r 3  18               clc
0002F4r 3  80 88            bra @exit
0002F6r 3               
0002F6r 3               @sending_parity:
0002F6r 3                   ; lda #5
0002F6r 3                   ; sta PORTA
0002F6r 3  AD rr rr         lda KB_PARITY
0002F9r 3  29 01            and #$01
0002FBr 3  F0 10            beq @odd_parity     ; send zero if odd parity
0002FDr 3  AD 80 FF         lda PORTB
000300r 3  09 80            ora #$80            ; send one if even
000302r 3  8D 80 FF         sta PORTB
000305r 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
000307r 3  8D rr rr         sta KB_STATE
00030Ar 3  4C rr rr         jmp @exit
00030Dr 3               @odd_parity:
00030Dr 3  AD 80 FF         lda PORTB
000310r 3  29 7F            and #$7F
000312r 3  8D 80 FF         sta PORTB
000315r 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
000317r 3  8D rr rr         sta KB_STATE
00031Ar 3  4C rr rr         jmp @exit
00031Dr 3               
00031Dr 3               @sending_stop:
00031Dr 3                   ; lda #6
00031Dr 3                   ; sta PORTA
00031Dr 3  A9 00            lda #KB_STATE_START     ; set it back to start in case we are receivin next
00031Fr 3  8D rr rr         sta KB_STATE
000322r 3  A9 00            lda #0
000324r 3  8D rr rr         sta to_send
000327r 3  8D rr rr         sta KB_BIT
00032Ar 3  8D rr rr         sta KB_PARITY
00032Dr 3  AD 82 FF         lda DDRB        ; set PORTB back to input
000330r 3  29 7F            and #$7F
000332r 3  8D 82 FF         sta DDRB
000335r 3  4C rr rr         jmp @exit
000338r 3               
000338r 2               
000338r 1               .include "drivers/delayroutines.s"
000338r 2               ; Copyright 2020 Jonathan Foucher
000338r 2               
000338r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000338r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000338r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000338r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000338r 2               ; is furnished to do so, subject to the following conditions:
000338r 2               
000338r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000338r 2               ; substantial portions of the Software.
000338r 2               
000338r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000338r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000338r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000338r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000338r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000338r 2               ; DEALINGS IN THE SOFTWARE.
000338r 2               
000338r 2               .segment "CODE"
000000r 2               ; this routine delays by 2304 * y + 23 cycles
000000r 2               delay:
000000r 2  DA             phx       ; 3 cycles
000001r 2  5A             phy       ; 3 cycles
000002r 2               two:
000002r 2  A2 FF          ldx #$ff  ; 2 cycles
000004r 2               one:
000004r 2  EA             nop       ; 2 cycles
000005r 2  EA             nop       ; 2 cycles
000006r 2  CA             dex       ; 2 cycles
000007r 2  D0 FB          bne one   ; 3 for all cycles, 2 for last
000009r 2  88             dey       ; 2 cycles
00000Ar 2  D0 F6          bne two   ; 3 for all cycles, 2 for last
00000Cr 2  7A             ply       ; 4 cycles
00000Dr 2  FA             plx       ; 4 cycles
00000Er 2  60             rts       ; 6 cycles
00000Fr 2               
00000Fr 2               ; delay is in Y register
00000Fr 2               delay_long:
00000Fr 2  48             pha
000010r 2  5A             phy
000011r 2  DA             phx
000012r 2  98             tya
000013r 2  AA             tax
000014r 2               delay_long_loop:
000014r 2  A0 FF          ldy #$ff
000016r 2  20 rr rr       jsr delay
000019r 2  CA             dex
00001Ar 2  D0 F8          bne delay_long_loop
00001Cr 2  FA             plx
00001Dr 2  7A             ply
00001Er 2  68             pla
00001Fr 2  60             rts
000020r 2               
000020r 2               delay_short:        ; delay Y * 19 cycles
000020r 2  5A             phy
000021r 2               delay_short_loop:
000021r 2  EA             nop               ; 2 cycles
000022r 2  EA             nop               ; 2 cycles
000023r 2  EA             nop               ; 2 cycles
000024r 2  EA             nop               ; 2 cycles
000025r 2  EA             nop               ; 2 cycles
000026r 2  EA             nop               ; 2 cycles
000027r 2  EA             nop               ; 2 cycles
000028r 2               
000028r 2               
000028r 2  88             dey               ; 2 cycles
000029r 2  D0 F6          bne delay_short_loop   ; 2 or 3 cycles
00002Br 2  7A             ply
00002Cr 2  60             rts
00002Dr 2               
00002Dr 1               ; .include "drivers/4004.s"
00002Dr 1               .include "drivers/cf.s"
00002Dr 2               
00002Dr 2               
00002Dr 2               
00002Dr 2               .segment "ZEROPAGE"
00000Er 2  xx xx        CF_BUF_PTR: .res 2
000010r 2               
000010r 2               .segment "DATA"
000338r 2  xx xx xx xx  CF_BUF: .res $200
00033Cr 2  xx xx xx xx  
000340r 2  xx xx xx xx  
000538r 2               
000538r 2  xx xx xx xx  CF_LBA: .res 4
00053Cr 2  xx xx xx xx  CF_PART_START: .res 4
000540r 2               
000540r 2               cf_wait:
000540r 2                   ; phy
000540r 2               @wait_loop:
000540r 2                   ; ldy #$10
000540r 2                   ; jsr delay_short
000540r 2                   ; lda #'.'
000540r 2                   ; jsr kernel_putc
000540r 2  AD D7 FF         lda CF_REG_7
000543r 2  29 80            and #$80
000545r 2  D0 F9            bne @wait_loop
000547r 2                   ; ply
000547r 2  60               rts
000548r 2               
000548r 2               cf_init:
000548r 2  A9 04            lda #$4
00054Ar 2  8D D7 FF         sta CF_REG_7
00054Dr 2  20 rr rr         jsr cf_wait
000550r 2  A9 E0            lda #$E0
000552r 2  8D D6 FF         sta CF_REG_6
000555r 2  A9 01            lda #$1
000557r 2  8D D1 FF         sta CF_REG_1
00055Ar 2  A9 EF            lda #$EF
00055Cr 2  8D D7 FF         sta CF_REG_7
00055Fr 2  20 rr rr         jsr cf_wait
000562r 2  20 rr rr         jsr cf_err
000565r 2  60               rts
000566r 2               
000566r 2               cf_read:
000566r 2  5A               phy
000567r 2  A0 00            ldy #0
000569r 2               @readloop1:
000569r 2  20 rr rr         jsr cf_wait
00056Cr 2  AD D7 FF         lda CF_REG_7
00056Fr 2  29 08            and #$08
000571r 2  F0 0B            beq @exit
000573r 2               
000573r 2  AD D0 FF         lda CF_REG_0
000576r 2  91 rr            sta (CF_BUF_PTR), y
000578r 2  E6 rr            inc CF_BUF_PTR
00057Ar 2  F0 04            beq @incptr
00057Cr 2  80 EB            bra @readloop1
00057Er 2               @exit:
00057Er 2  7A               ply
00057Fr 2  60               rts
000580r 2               @incptr:
000580r 2  E6 rr            inc CF_BUF_PTR+1
000582r 2  80 E5            bra @readloop1
000584r 2               
000584r 2               cf_set_lba:
000584r 2  AD rr rr         lda CF_LBA
000587r 2  8D D3 FF         sta CF_REG_3
00058Ar 2  AD rr rr         lda CF_LBA + 1
00058Dr 2  8D D4 FF         sta CF_REG_4
000590r 2  AD rr rr         lda CF_LBA + 2
000593r 2  8D D5 FF         sta CF_REG_5
000596r 2  AD rr rr         lda CF_LBA + 3
000599r 2  29 0F            and #$0F
00059Br 2  09 E0            ora #$E0
00059Dr 2  8D D6 FF         sta CF_REG_6
0005A0r 2  60               rts
0005A1r 2               
0005A1r 2               cf_read_sector:
0005A1r 2  A9 rr            lda #<CF_BUF
0005A3r 2  85 rr            sta CF_BUF_PTR
0005A5r 2  A9 rr            lda #>CF_BUF
0005A7r 2  85 rr            sta CF_BUF_PTR+1
0005A9r 2  20 rr rr         jsr cf_set_lba
0005ACr 2  A9 01            lda #1
0005AEr 2  8D D2 FF         sta CF_REG_2
0005B1r 2  20 rr rr         jsr cf_wait
0005B4r 2  A9 20            lda #CF_READ_SECTOR_COMMAND
0005B6r 2  8D D7 FF         sta CF_REG_7
0005B9r 2  20 rr rr         jsr cf_read
0005BCr 2  20 rr rr         jsr cf_err
0005BFr 2  60               rts
0005C0r 2               
0005C0r 2               cf_err:
0005C0r 2  20 rr rr         jsr cf_wait
0005C3r 2  AD D7 FF         lda CF_REG_7
0005C6r 2  29 01            and #$01
0005C8r 2  F0 05            beq @exit
0005CAr 2               @exit_fail:
0005CAr 2  A9 21            lda #'!'
0005CCr 2  20 rr rr         jsr kernel_putc
0005CFr 2               @exit:
0005CFr 2  60               rts
0005D0r 2               
0005D0r 2               cf_end:
0005D0r 2               
0005D0r 2               
0005D0r 1               ; .include "drivers/lcd.s"
0005D0r 1               ; .include "drivers/spi.s"
0005D0r 1               ; .include "drivers/sd.s"
0005D0r 1               ; .include "drivers/vga.s"
0005D0r 1               ; .include "drivers/fat32.s"
0005D0r 1               
0005D0r 1               .include "../../forth.s"
0005D0r 2               .include "../../macros.s"
0005D0r 3               .macro  printascii   addr
0005D0r 3                   ldx #0
0005D0r 3               @loop:
0005D0r 3                   lda addr,x
0005D0r 3                   beq @done
0005D0r 3                   jsr kernel_putc
0005D0r 3                   inx
0005D0r 3                   bra @loop
0005D0r 3               @done:
0005D0r 3               .endmacro
0005D0r 3               
0005D0r 3               
0005D0r 2               
0005D0r 2               
0005D0r 2               ; Definitions for Tali Forth 2
0005D0r 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0005D0r 2               ; First version: 01. Apr 2016 (Liara Forth)
0005D0r 2               ; This version: 29. Jan 2020
0005D0r 2               
0005D0r 2               ; This file is included by taliforth.asm. These are the general
0005D0r 2               ; definitions; platform-specific definitions such as the
0005D0r 2               ; memory map are kept in the platform folder.
0005D0r 2               
0005D0r 2               
0005D0r 2               ; User Variables:
0005D0r 2               ; Block variables
0005D0r 2               blk_offset =  0        ; BLK : UP + 0
0005D0r 2               scr_offset =  2        ; SCR : UP + 2
0005D0r 2               
0005D0r 2               ; Wordlists
0005D0r 2               current_offset =  4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
0005D0r 2               num_wordlists_offset =  5
0005D0r 2                                          ; #WORDLISTS (byte) : UP + 5
0005D0r 2               wordlists_offset =  6  ; WORDLISTS (cells) : UP + 6 to UP + 29
0005D0r 2                                          ;          (FORTH, EDITOR, ASSEMBLER, ROOT, +8 more)
0005D0r 2               num_order_offset =  30 ; #ORDER (byte) : UP + 30
0005D0r 2                                          ;          (Number of wordlists in search order)
0005D0r 2               search_order_offset =  31
0005D0r 2                                          ; SEARCH-ORDER (bytes) : UP + 31 to UP + 39
0005D0r 2                                          ; Allowing for 9 to keep offsets even.
0005D0r 2               max_wordlists =  12    ; Maximum number of wordlists supported
0005D0r 2                                          ; 4 Tali built-ins + 8 user wordlists
0005D0r 2               
0005D0r 2               ; Buffer variables
0005D0r 2               blkbuffer_offset =     40   ; Address of buffer
0005D0r 2               buffblocknum_offset =  42   ; Block number current in buffer
0005D0r 2               buffstatus_offset =    44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
0005D0r 2               
0005D0r 2               ; Block I/O vectors
0005D0r 2               blockread_offset =     46   ; Vector to block reading routine
0005D0r 2               blockwrite_offset =    48   ; Vector to block writing routine
0005D0r 2               
0005D0r 2               
0005D0r 2               ; ASCII CHARACTERS
0005D0r 2               AscCC =   $03  ; break (CTRL-c)
0005D0r 2               AscBELL = $07  ; bell sound
0005D0r 2               AscBS =   $08  ; backspace
0005D0r 2               AscLF =   $0a  ; line feed
0005D0r 2               AscCR =   $0d  ; carriage return
0005D0r 2               AscESC =  $1b  ; escape
0005D0r 2               AscSP =   $20  ; space
0005D0r 2               AscDEL =  $7f  ; delete (CTRL-h)
0005D0r 2               AscCP =   $10  ; CTRL-p (used to recall previous input history)
0005D0r 2               AscCN =   $0e  ; CTRL-n (used to recall next input history)
0005D0r 2               
0005D0r 2               ; DICTIONARY FLAGS
0005D0r 2               ; The first three bits are currently unused
0005D0r 2               CO = 1  ; Compile Only
0005D0r 2               AN = 2  ; Always Native Compile
0005D0r 2               IM = 4  ; Immediate Word
0005D0r 2               NN = 8  ; Never Native Compile
0005D0r 2               UF = 16 ; Includes Underflow Check (RESERVED)
0005D0r 2               HC = 32 ; Word has Code Field Area (CFA)
0005D0r 2               
0005D0r 2               
0005D0r 2               ; VARIOUS
0005D0r 2               MAX_LINE_LENGTH =   79      ; assumes 80 character lines
0005D0r 2               
0005D0r 2               ; END
0005D0r 2               
0005D0r 2               .segment "ZEROPAGE": zeropage
000010r 2               ; ZERO PAGE ADDRESSES/VARIABLES
000010r 2               
000010r 2               ; These are kept at the top of Zero Page, with the most important variables at
000010r 2               ; the top because the Data Stack grows towards this area from dsp0: If there is
000010r 2               ; an overflow, the lower, less important variables will be clobbered first,
000010r 2               ; giving the system a chance to recover. In other words, they are part of the
000010r 2               ; floodplain.
000010r 2               
000010r 2               ; The four variables insrc, cib, ciblen, and toin must stay together in this
000010r 2               ; sequence for the words INPUT>R and R>INPUT to work correctly.
000010r 2               
000010r 2  xx xx        cp: .res 2   ; Compiler Pointer
000012r 2  xx xx        dp: .res 2   ; Dictionary Pointer
000014r 2  xx xx        workword: .res 2   ; nt (not xt!) of word being compiled, except in
000016r 2                                          ; a :NONAME declared word (see status)
000016r 2  xx xx        insrc: .res 2   ; input Source for SOURCE-ID
000018r 2  xx xx        cib: .res 2   ; address of current input buffer
00001Ar 2  xx xx        ciblen: .res 2  ; length of current input buffer
00001Cr 2  xx xx        toin: .res 2  ; pointer to CIB (>IN in Forth)
00001Er 2  xx xx        ip: .res 2  ; Instruction Pointer (current xt)
000020r 2  xx xx        output: .res 2  ; vector for EMIT
000022r 2  xx xx        input: .res 2  ; vector for KEY
000024r 2  xx xx        havekey: .res 2  ; vector for KEY?
000026r 2  xx xx        state: .res 2  ; STATE: -1 compile, 0 interpret
000028r 2  xx xx        base: .res 2  ; number radix, default decimal
00002Ar 2  xx xx        nc_limit: .res 2  ; limit for Native Compile size
00002Cr 2  xx xx        uf_strip: .res 2  ; flag to strip underflow detection code
00002Er 2  xx xx        up: .res 2  ; User Pointer (Address of user variables)
000030r 2  xx xx        status: .res 2  ; internal status information
000032r 2                                          ; (used by : :NONAME ; ACCEPT)
000032r 2                                          ; Bit 7 = Redefined word message postpone
000032r 2                                          ;         When set before calling CREATE, it will
000032r 2                                          ;         not print the "redefined xxxx" message if
000032r 2                                          ;         the word exists. Instead, this bit will
000032r 2                                          ;         be reused and after CREATE has run, it will
000032r 2                                          ;         be set if the word was redefined and 0 if
000032r 2                                          ;         not. This bit should be 0 when not in use.
000032r 2                                          ; Bit 6 = 1 for normal ":" definitions
000032r 2                                          ;         WORKWORD contains nt of word being compiled
000032r 2                                          ;       = 0 for :NONAME definitions
000032r 2                                          ;         WORKWORD contains xt of word being compiled
000032r 2                                          ; Bit 5 = 1 for NUMBER returning a double word
000032r 2                                          ;       = 0 for NUMBER returning a single word
000032r 2                                          ; Bit 3 = 1 makes CTRL-n recall current history
000032r 2                                          ;       = 0 CTRL-n recalls previous history
000032r 2                                          ; Bit 2 = Current history buffer msb
000032r 2                                          ; Bit 1 = Current history buffer (0-7, wraps)
000032r 2                                          ; Bit 0 = Current history buffer lsb
000032r 2                                          ; status+1 is used by ACCEPT to hold history lengths.
000032r 2  xx xx        tmpbranch: .res 2  ; temporary storage for 0BRANCH, BRANCH only
000034r 2  xx xx        tmp1: .res 2  ; temporary storage
000036r 2  xx xx        tmp2: .res 2  ; temporary storage
000038r 2  xx xx        tmp3: .res 2  ; temporary storage (especially for print)
00003Ar 2  xx xx        tmpdsp: .res 2  ; temporary DSP (X) storage (two bytes)
00003Cr 2  xx xx        tmptos: .res 2  ; temporary TOS storage
00003Er 2  xx xx        editor1: .res 2  ; temporary for editors
000040r 2  xx xx        editor2: .res 2  ; temporary for editors
000042r 2  xx xx        editor3: .res 2  ; temporary for editors
000044r 2  xx xx        tohold: .res 2  ; pointer for formatted output
000046r 2  xx xx xx xx  scratch: .res 8  ; 8 byte scratchpad (see UM/MOD)
00004Ar 2  xx xx xx xx  
00004Er 2  xx xx xx xx  dsp_start: .res 128 ; reserve 128 bytes for data stack (64 16 bit cells)
000052r 2  xx xx xx xx  
000056r 2  xx xx xx xx  
0000CEr 2               dsp0 = $FF          ; first data stack location. Data stack grows down
0000CEr 2               rsp0 =      $FF     ; starting stack pointer
0000CEr 2               stack0 =    $0100   ; location of the stack
0000CEr 2               
0000CEr 2               
0000CEr 2               .segment "BSS"
00008Br 2  xx xx xx xx  hist_buff: .res $400
00008Fr 2  xx xx xx xx  
000093r 2  xx xx xx xx  
00048Br 2  xx xx xx xx  buffer0: .res $100
00048Fr 2  xx xx xx xx  
000493r 2  xx xx xx xx  
00058Br 2               
00058Br 2               .segment "DICTIONARY"   ; the dictionary gets its own segment so that it uses all the space left in RAM
000000r 2  xx xx xx xx  dictionary: .res $1000
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
001000r 2               
001000r 2               cp_end = $7FFF          ; the dictionary ends at RAM end (everything else is before)
001000r 2               
001000r 2               cp0 = dictionary
001000r 2               bsize =     $ff
001000r 2               padoffset = $ff
001000r 2               
001000r 2               
001000r 2               .segment "DATA"
0005D0r 2               
0005D0r 2               forth:
0005D0r 2                   .include "native_words.s"     ; Native Forth words. Starts with COLD
0005D0r 3               ; Low-level Forth word routines
0005D0r 3               ; Tali Forth 2 for the 65c02
0005D0r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0005D0r 3               ; First version: 19. Jan 2014
0005D0r 3               ; This version: 03. Jan 2018
0005D0r 3               
0005D0r 3               ; This list is ordered alphabetically by the names of the words, not their
0005D0r 3               ; strings (so "!" is sorted as "STORE"). However, we start off with COLD,
0005D0r 3               ; ABORT, and QUIT as the natural start sequence. Each word has two special
0005D0r 3               ; status lines that begins with "; ## ", which allows auto-generation of the
0005D0r 3               ; WORDLIST.md file and other entries in the docs folder. Status entries are:
0005D0r 3               
0005D0r 3               ;       TBA --> fragment --> coded --> tested --> auto
0005D0r 3               
0005D0r 3               ; "Auto" means that the word is automatically tested by the test suite (good),
0005D0r 3               ; "tested" means that it was tested by hand in some way (okay), "coded" means
0005D0r 3               ; it hasn't been tested at all (bad). See the test suite for more details.
0005D0r 3               
0005D0r 3               ; ## COLD ( -- ) "Reset the Forth system"
0005D0r 3               ; ## "cold"  tested  Tali Forth
0005D0r 3               ;       """Reset the Forth system. Does not restart the kernel,
0005D0r 3               ;       use the 65c02 reset for that. Flows into ABORT.
0005D0r 3               ;       """
0005D0r 3               xt_cold:
0005D0r 3  D8                           cld
0005D1r 3               
0005D1r 3                               ; Set the OUTPUT vector to the default kernel_putc
0005D1r 3                               ; We do this really early so we can print error messages
0005D1r 3                               ; during debugging
0005D1r 3  A9 rr                        lda #<kernel_putc
0005D3r 3  85 rr                        sta output
0005D5r 3  A9 rr                        lda #>kernel_putc
0005D7r 3  85 rr                        sta output+1
0005D9r 3               
0005D9r 3                               ; Load all of the important zero page variables from ROM
0005D9r 3  A2 21                        ldx #cold_zp_table_end-cold_zp_table-1
0005DBr 3               
0005DBr 3               @load_zp_loop:
0005DBr 3                               ; This loop loads them back to front. We can use X here
0005DBr 3                               ; because Tali hasn't started using the stack yet.
0005DBr 3  BD rr rr                     lda cold_zp_table,x
0005DEr 3  95 rr                        sta cp,x
0005E0r 3  CA                           dex
0005E1r 3  D0 F8                        bne @load_zp_loop
0005E3r 3               
0005E3r 3                               ; Copy the 0th element.
0005E3r 3  AD rr rr                     lda cold_zp_table
0005E6r 3  85 rr                        sta cp
0005E8r 3                               ; Initialize 65c02 stack (Return Stack)
0005E8r 3  A2 FF                        ldx #rsp0
0005EAr 3  9A                           txs
0005EBr 3               
0005EBr 3                               ; Clear Data Stack. This is repeated in ABORT, but this way we
0005EBr 3                               ; can load high-level words with EVALUATE
0005EBr 3  A2 FF                        ldx #dsp0
0005EDr 3               
0005EDr 3               
0005EDr 3                               ; Initialize the user variables.
0005EDr 3  A0 31                        ldy #cold_user_table_end-cold_user_table-1
0005EFr 3  A9 00                        lda #0
0005F1r 3               
0005F1r 3               @load_user_vars_loop:
0005F1r 3                               ; Like the zero page variables, these are initialized
0005F1r 3                               ; back to front.
0005F1r 3  B9 rr rr                     lda cold_user_table,y
0005F4r 3  91 rr                        sta (up),y
0005F6r 3  88                           dey
0005F7r 3  D0 F8                        bne @load_user_vars_loop
0005F9r 3               
0005F9r 3                               ; Copy the 0th element.
0005F9r 3  AD rr rr                     lda cold_user_table
0005FCr 3  92 rr                        sta (up)
0005FEr 3  20 rr rr                     jsr xt_cr
000601r 3               
000601r 3                               ; Define high-level words in forth_words.asm via EVALUATE. If
000601r 3                               ; you do not have any high-level words, this part can be
000601r 3                               ; commented out.
000601r 3  CA                           dex
000602r 3  CA                           dex
000603r 3  CA                           dex
000604r 3  CA                           dex
000605r 3               
000605r 3               
000605r 3                               ; start address goes NOS
000605r 3  A9 rr                        lda #<forth_words_start
000607r 3  95 02                        sta 2,x
000609r 3  A9 rr                        lda #>forth_words_start
00060Br 3  95 03                        sta 3,x
00060Dr 3               
00060Dr 3                               ; length goes TOS
00060Dr 3  A9 rr                        lda #<forth_words_end
00060Fr 3  38                           sec
000610r 3  E9 rr                        sbc #<forth_words_start
000612r 3  95 00                        sta 0,x
000614r 3               
000614r 3  A9 rr                        lda #>forth_words_end
000616r 3  E9 rr                        sbc #>forth_words_start
000618r 3  95 01                        sta 1,x
00061Ar 3               
00061Ar 3               
00061Ar 3  20 rr rr                     jsr xt_evaluate
00061Dr 3               
00061Dr 3                               ; Now define any user words via EVALUATE. If you do not have
00061Dr 3                               ; any user-defined words, this part can be commented out as
00061Dr 3                               ; well.
00061Dr 3  CA                           dex
00061Er 3  CA                           dex
00061Fr 3  CA                           dex
000620r 3  CA                           dex
000621r 3               
000621r 3               
000621r 3                               ; start address goes NOS
000621r 3  A9 rr                        lda #<user_words_start
000623r 3  95 02                        sta 2,x
000625r 3  A9 rr                        lda #>user_words_start
000627r 3  95 03                        sta 3,x
000629r 3               
000629r 3                               ; length goes TOS
000629r 3  A9 rr                        lda #<user_words_end
00062Br 3  38                           sec
00062Cr 3  E9 rr                        sbc #<user_words_start
00062Er 3  95 00                        sta 0,x
000630r 3               
000630r 3  A9 rr                        lda #>user_words_end
000632r 3  E9 rr                        sbc #>user_words_start
000634r 3  95 01                        sta 1,x
000636r 3               
000636r 3  20 rr rr                     jsr xt_evaluate
000639r 3               
000639r 3                               ; Initialize all of the history buffers by putting a zero in
000639r 3                               ; each length byte.
000639r 3  9C rr rr                     stz hist_buff
00063Cr 3  9C rr rr                     stz hist_buff+$80
00063Fr 3  9C rr rr                     stz hist_buff+$100
000642r 3  9C rr rr                     stz hist_buff+$180
000645r 3  9C rr rr                     stz hist_buff+$200
000648r 3  9C rr rr                     stz hist_buff+$280
00064Br 3  9C rr rr                     stz hist_buff+$300
00064Er 3  9C rr rr                     stz hist_buff+$380
000651r 3               
000651r 3               
000651r 3                               ; fall through to ABORT
000651r 3               
000651r 3               
000651r 3               ; ## ABORT ( -- ) "Reset the Data Stack and restart the CLI"
000651r 3               ; ## "abort"  tested  ANS core
000651r 3                       ; """https://forth-standard.org/standard/core/ABORT
000651r 3                       ; Clear Data Stack and continue into QUIT. We can jump here via
000651r 3                       ; subroutine if we want to because we are going to reset the 65c02's
000651r 3                       ; stack pointer (the Return Stack) anyway during QUIT. Note we don't
000651r 3                       ; actually delete the stuff on the Data Stack.
000651r 3                       ; """
000651r 3               xt_abort:
000651r 3  A2 FF                        ldx #dsp0
000653r 3               
000653r 3                               ; fall through to QUIT
000653r 3               
000653r 3               
000653r 3               ; ## QUIT ( -- ) "Reset the input and get new input"
000653r 3               ; ## "quit"  tested  ANS core
000653r 3                       ; """https://forth-standard.org/standard/core/QUIT
000653r 3                       ; Rest the input and start command loop
000653r 3                       ; """
000653r 3               
000653r 3               xt_quit:
000653r 3                               ; Clear the Return Stack. This is a little screwed up
000653r 3                               ; because the 65c02 can only set the Return Stack via X,
000653r 3                               ; which is our Data Stack pointer. The ANS specification
000653r 3                               ; demands, however, that ABORT reset the Data Stack pointer
000653r 3  8A                           txa             ; Save the DSP that we just defined
000654r 3  A2 FF                        ldx #rsp0
000656r 3  9A                           txs
000657r 3  AA                           tax             ; Restore the DSP. Dude, seriously.
000658r 3               
000658r 3                               ; make sure instruction pointer is empty
000658r 3  64 rr                        stz ip
00065Ar 3  64 rr                        stz ip+1
00065Cr 3               
00065Cr 3                               ; SOURCE-ID is zero (keyboard input)
00065Cr 3  64 rr                        stz insrc
00065Er 3  64 rr                        stz insrc+1
000660r 3               
000660r 3                               ; STATE is zero (interpret, not compile)
000660r 3  64 rr                        stz state
000662r 3  64 rr                        stz state+1
000664r 3               @get_line:
000664r 3  A9 rr                        lda #<buffer0   ; input buffer, this is paranoid
000666r 3  85 rr                        sta cib
000668r 3  A9 rr                        lda #>buffer0
00066Ar 3  85 rr                        sta cib+1
00066Cr 3               
00066Cr 3                               ; Size of current input buffer (CIB) is zero
00066Cr 3  64 rr                        stz ciblen
00066Er 3  64 rr                        stz ciblen+1
000670r 3               
000670r 3                               ; Accept a line from the current import source. This is how
000670r 3                               ; modern Forths to it.
000670r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
000673r 3               
000673r 3                               ; Test flag: LSB of TOS
000673r 3  B5 00                        lda 0,x
000675r 3  D0 05                        bne @success
000677r 3               
000677r 3                               ; If REFILL returned a FALSE flag, something went wrong and we
000677r 3                               ; need to print an error message and reset the machine. We
000677r 3                               ; don't need to save TOS because we're going to clobber it
000677r 3                               ; anyway when we go back to ABORT.
000677r 3  A9 06                        lda #err_refill
000679r 3  4C rr rr                     jmp error
00067Cr 3               
00067Cr 3               @success:
00067Cr 3                               ; Assume we have successfully accepted a string of input from
00067Cr 3                               ; a source, with address cib and length of input in ciblen. We
00067Cr 3                               ; arrive here still with the TRUE flag from REFILL as TOS
00067Cr 3  E8                           inx                     ; drop
00067Dr 3  E8                           inx
00067Er 3               
00067Er 3                               ; Main compile/execute routine
00067Er 3  20 rr rr                     jsr interpret
000681r 3               
000681r 3                               ; Test for Data Stack underflow. Tali Forth does not check for
000681r 3                               ; overflow because it is so rare
000681r 3  E0 FF                        cpx #dsp0
000683r 3  F0 05                        beq @stack_ok
000685r 3  90 03                        bcc @stack_ok           ; DSP must always be smaller than DSP0
000687r 3               
000687r 3  4C rr rr                     jmp underflow_error
00068Ar 3               
00068Ar 3               @stack_ok:
00068Ar 3                               ; Display system prompt if all went well. If we're interpreting,
00068Ar 3                               ; this is " ok", if we're compiling, it's " compiled". Note
00068Ar 3                               ; space at beginning of the string.
00068Ar 3  A5 rr                        lda state
00068Cr 3  F0 02                        beq @print
00068Er 3               
00068Er 3  A9 01                        lda #1                  ; number for "compile" string
000690r 3               @print:
000690r 3  20 rr rr                     jsr print_string
000693r 3               
000693r 3                               ; Awesome line, everybody! Now get the next one.
000693r 3  80 CF                        bra @get_line
000695r 3               
000695r 3               z_cold:
000695r 3               z_abort:
000695r 3               z_quit:         ; no RTS required
000695r 3               
000695r 3               
000695r 3               
000695r 3               ; This table holds all of the initial values for the variables in zero page.
000695r 3               ; This table is used by COLD.
000695r 3               cold_zp_table:
000695r 3  rr rr                .word cp0+256+1024      ; cp moved to make room for user vars and
000697r 3                                               ; block buffer
000697r 3  rr rr                .word dictionary_start  ; dp
000699r 3  00 00                .word 0                 ; workword
00069Br 3  00 00                .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
00069Dr 3  rr rr                .word buffer0           ; cib
00069Fr 3  00 00                .word 0                 ; ciblen
0006A1r 3  00 00                .word 0                 ; toin
0006A3r 3  00 00                .word 0                 ; ip
0006A5r 3  rr rr                .word kernel_putc       ; output
0006A7r 3  rr rr                .word kernel_getc       ; input
0006A9r 3  00 00                .word 0                 ; havekey
0006ABr 3  00 00                .word 0                 ; state (0 = interpret)
0006ADr 3  0A 00                .word 10                ; base
0006AFr 3  14 00                .word 20                ; nc-limit
0006B1r 3  00 00                .word 0                 ; uf_strip (off by default)
0006B3r 3  rr rr                .word cp0               ; up (user vars put right at beginning of
0006B5r 3                                               ; available RAM)
0006B5r 3  00 00                .word 0                 ; status
0006B7r 3               cold_zp_table_end:
0006B7r 3               
0006B7r 3               ; No further ZP variables are initialized. The variables past this point are
0006B7r 3               ; all temporaries.
0006B7r 3               
0006B7r 3               ; This table holds the inital values for the user variables. This table is
0006B7r 3               ; used by COLD.
0006B7r 3               cold_user_table:
0006B7r 3  00 00                .word 0                         ; BLK
0006B9r 3  00 00                .word 0                         ; SCR
0006BBr 3  00                   .byte 0                         ; CURRENT = FORTH-WORDLIST
0006BCr 3  04                   .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
0006BDr 3  rr rr                .word dictionary_start          ; FORTH-WORDLIST
0006BFr 3  rr rr                .word editor_dictionary_start   ; EDITOR-WORDLIST
0006C1r 3  rr rr                .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
0006C3r 3  rr rr                .word root_dictionary_start     ; ROOT-WORDLIST
0006C5r 3  00 00 00 00          .word 0,0,0,0,0,0,0,0           ; User wordlists
0006C9r 3  00 00 00 00  
0006CDr 3  00 00 00 00  
0006D5r 3  01                   .byte 1                         ; #ORDER
0006D6r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0         ; search-order
0006DAr 3  00 00 00 00  
0006DEr 3  00           
0006DFr 3  rr rr                .word cp0+256                   ; Address of buffer (right after USER vars)
0006E1r 3  00 00                .word 0                         ; block in buffer
0006E3r 3  00 00                .word 0                         ; buffer status (not in use)
0006E5r 3  rr rr                .word xt_block_word_error       ; block-read vector
0006E7r 3  rr rr                .word xt_block_word_error       ; block-write vector
0006E9r 3               cold_user_table_end:
0006E9r 3               
0006E9r 3               
0006E9r 3               ; ## ABORT_QUOTE ( "string" -- ) "If flag TOS is true, ABORT with message"
0006E9r 3               ; ## "abort""  tested  ANS core
0006E9r 3                       ; """https://forth-standard.org/standard/core/ABORTq
0006E9r 3                       ; Abort and print a string.
0006E9r 3                       ; """
0006E9r 3               
0006E9r 3               xt_abort_quote:
0006E9r 3                               ; save the string
0006E9r 3  20 rr rr                     jsr xt_s_quote          ; S"
0006ECr 3               
0006ECr 3                               ; compile run-time part
0006ECr 3  A0 rr                        ldy #>abort_quote_runtime
0006EEr 3  A9 rr                        lda #<abort_quote_runtime
0006F0r 3  20 rr rr                     jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
0006F3r 3               
0006F3r 3  60           z_abort_quote:  rts
0006F4r 3               
0006F4r 3               
0006F4r 3               abort_quote_runtime:
0006F4r 3                       ; """Runtime aspect of ABORT_QUOTE"""
0006F4r 3               
0006F4r 3                               ; We arrive here with ( f addr u )
0006F4r 3  B5 04                        lda 4,x
0006F6r 3  15 05                        ora 5,x
0006F8r 3  F0 09                        beq @done       ; if FALSE, we're done
0006FAr 3               
0006FAr 3                               ; We're true, so print string and ABORT. We follow Gforth
0006FAr 3                               ; in going to a new line after the string
0006FAr 3  20 rr rr                     jsr xt_type
0006FDr 3  20 rr rr                     jsr xt_cr
000700r 3  4C rr rr                     jmp xt_abort    ; not JSR, so never come back
000703r 3               @done:
000703r 3                               ; Drop three entries from the Data Stack
000703r 3  8A                           txa
000704r 3  18                           clc
000705r 3  69 06                        adc #6
000707r 3  AA                           tax
000708r 3               
000708r 3  60                           rts
000709r 3               
000709r 3               
000709r 3               
000709r 3               ; ## ABS ( n -- u ) "Return absolute value of a number"
000709r 3               ; ## "abs"  auto  ANS core
000709r 3                       ; """https://forth-standard.org/standard/core/ABS
000709r 3                       ; Return the absolute value of a number.
000709r 3                       ; """
000709r 3               
000709r 3               xt_abs:
000709r 3  20 rr rr                     jsr underflow_1
00070Cr 3               
00070Cr 3  B5 01                        lda 1,x
00070Er 3  10 0D                        bpl @done       ; positive number, easy money!
000710r 3               
000710r 3                               ; negative: calculate 0 - n
000710r 3  38                           sec
000711r 3  A9 00                        lda #0
000713r 3  F5 00                        sbc 0,x         ; LSB
000715r 3  95 00                        sta 0,x
000717r 3               
000717r 3  A9 00                        lda #0          ; MSB
000719r 3  F5 01                        sbc 1,x
00071Br 3  95 01                        sta 1,x
00071Dr 3               
00071Dr 3               @done:
00071Dr 3  60           z_abs:          rts
00071Er 3               
00071Er 3               
00071Er 3               
00071Er 3               ; ## ACCEPT ( addr n -- n ) "Receive a string of characters from the keyboard"
00071Er 3               ; ## "accept"  auto  ANS core
00071Er 3                       ; """https://forth-standard.org/standard/core/ACCEPT
00071Er 3                       ; Receive a string of at most n1 characters, placing them at
00071Er 3                       ; addr. Return the actual number of characters as n2. Characters
00071Er 3                       ; are echoed as they are received. ACCEPT is called by REFILL in
00071Er 3                       ; modern Forths.
00071Er 3                       ; """
00071Er 3               
00071Er 3               xt_accept:
00071Er 3  20 rr rr                     jsr underflow_2
000721r 3               
000721r 3                               ; Abort if we were asked to receive 0 chars
000721r 3  B5 00                        lda 0,x
000723r 3  15 01                        ora 1,x
000725r 3  D0 09                        bne @not_zero
000727r 3               
000727r 3  E8                           inx
000728r 3  E8                           inx
000729r 3  74 00                        stz 0,x
00072Br 3  74 01                        stz 1,x
00072Dr 3               
00072Dr 3  4C rr rr                     jmp accept_done
000730r 3               
000730r 3               @not_zero:
000730r 3  B5 00                        lda 0,x         ; number of chars to get in tmp2 ...
000732r 3  85 rr                        sta tmp2
000734r 3  64 rr                        stz tmp2+1      ; ... but we only accept max 255 chars
000736r 3               
000736r 3  B5 02                        lda 2,x         ; address of buffer is NOS, to tmp1
000738r 3  85 rr                        sta tmp1
00073Ar 3  B5 03                        lda 3,x
00073Cr 3  85 rr                        sta tmp1+1
00073Er 3               
00073Er 3  E8                           inx
00073Fr 3  E8                           inx
000740r 3               
000740r 3  A0 00                        ldy #0
000742r 3               
000742r 3                               ; Select the next history buffer. Clear bit 3 first (so overflow
000742r 3                               ; from bit 2 to 3 is OK)
000742r 3  A5 rr                        lda status
000744r 3  29 F7                        and #$f7
000746r 3               
000746r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
000746r 3  1A                           inc
000747r 3               
000747r 3                               ; Set bit 3 for detecting if CTRL-n has been pressed the first
000747r 3                               ; time. This bit will be cleared on the first CTRL-n or CTRL-p
000747r 3                               ; received and won't be used to calculate the history buffer
000747r 3                               ; offset.
000747r 3  09 08                        ora #$08
000749r 3  85 rr                        sta status
00074Br 3               
00074Br 3               accept_loop:
00074Br 3                               ; Out of the box, py65mon catches some CTRL sequences such as
00074Br 3                               ; CTRL-c. We also don't need to check for CTRL-l because a
00074Br 3                               ; vt100 terminal clears the screen automatically.
00074Br 3               
00074Br 3                               ; This is the internal version of KEY without all the mucking
00074Br 3                               ; about with the Data Stack while still using the input vector
00074Br 3  20 rr rr                     jsr key_a
00074Er 3               
00074Er 3                               ; We quit on both line feed and carriage return
00074Er 3  C9 0A                        cmp #AscLF
000750r 3  F0 20                        beq @eol
000752r 3  C9 0D                        cmp #AscCR
000754r 3  F0 1C                        beq @eol
000756r 3               
000756r 3                               ; BACKSPACE and DEL do the same thing for the moment
000756r 3  C9 08                        cmp #AscBS
000758r 3  F0 22                        beq @backspace
00075Ar 3  C9 7F                        cmp #AscDEL     ; (CTRL-h)
00075Cr 3  F0 1E                        beq @backspace
00075Er 3               
00075Er 3                               ; Check for CTRL-p and CTRL-n to recall input history
00075Er 3  C9 10                        cmp #AscCP
000760r 3  F0 36                        beq @ctrl_p
000762r 3  C9 0E                        cmp #AscCN
000764r 3  F0 44                        beq @ctrl_n
000766r 3               
000766r 3                               ; That's enough for now. Save and echo character.
000766r 3  91 rr                        sta (tmp1),y
000768r 3  C8                           iny
000769r 3               
000769r 3                               ; EMIT_A sidesteps all the fooling around with the Data Stack
000769r 3  20 rr rr                     jsr emit_a
00076Cr 3               
00076Cr 3  C4 rr                        cpy tmp2        ; reached character limit?
00076Er 3  D0 DB                        bne accept_loop       ; fall through if buffer limit reached
000770r 3  80 03                        bra @buffer_full
000772r 3               
000772r 3               @eol:
000772r 3  20 rr rr                     jsr xt_space    ; print final space
000775r 3               
000775r 3               @buffer_full:
000775r 3                               ; REFILL updates ciblen and toin, we don't need to do it here
000775r 3  94 00                        sty 0,x         ; Y contains number of chars accepted already
000777r 3  74 01                        stz 1,x         ; we only accept 256 chars
000779r 3               
000779r 3  4C rr rr                     jmp accept_done
00077Cr 3               
00077Cr 3               @backspace:
00077Cr 3                               ; Handle backspace and delete kex, which currently do the same
00077Cr 3                               ; thing
00077Cr 3  C0 00                        cpy #0          ; buffer empty?
00077Er 3  D0 06                        bne @1
000780r 3               
000780r 3  A9 07                        lda #AscBELL    ; complain and don't delete beyond the start of line
000782r 3  20 rr rr                     jsr emit_a
000785r 3  C8                           iny
000786r 3               @1:
000786r 3  88                           dey
000787r 3  A9 08                        lda #AscBS      ; move back one
000789r 3  20 rr rr                     jsr emit_a
00078Cr 3  A9 20                        lda #AscSP      ; print a space (rubout)
00078Er 3  20 rr rr                     jsr emit_a
000791r 3  A9 08                        lda #AscBS      ; move back over space
000793r 3  20 rr rr                     jsr emit_a
000796r 3               
000796r 3  80 B3                        bra accept_loop
000798r 3               
000798r 3               @ctrl_p:
000798r 3                               ; CTRL-p was pressed. Recall the previous input buffer.
000798r 3               
000798r 3                               ; Select the previous buffer
000798r 3  A5 rr                        lda status
00079Ar 3               
00079Ar 3                               ; Check for 0 (need to wrap back to 7)
00079Ar 3  29 07                        and #7
00079Cr 3  D0 08                        bne @ctrl_p_dec
00079Er 3               
00079Er 3                               ; We need to wrap back to 7.
00079Er 3  A5 rr                        lda status
0007A0r 3  09 07                        ora #7
0007A2r 3  85 rr                        sta status
0007A4r 3  80 11                        bra @recall_history
0007A6r 3               
0007A6r 3               @ctrl_p_dec:
0007A6r 3                               ; It's safe to decrement the buffer index directly.
0007A6r 3  C6 rr                        dec status
0007A8r 3  80 0D                        bra @recall_history
0007AAr 3               
0007AAr 3               @ctrl_n:
0007AAr 3                               ; CTRL-n was pressed. Recall the next input buffer. Select
0007AAr 3                               ; the next buffer Check bit 3. If it's set, this is the first
0007AAr 3                               ; time CTRL-n has been pressed and we should select the CURRENT
0007AAr 3                               ; history buffer.
0007AAr 3  A9 08                        lda #$8
0007ACr 3  24 rr                        bit status
0007AEr 3  D0 07                        bne @recall_history
0007B0r 3               
0007B0r 3                               ; This isn't the first time CTRL-n has been pressed, select the
0007B0r 3                               ; next history buffer. Clear bit 3 first (so overflow is OK)
0007B0r 3  A5 rr                        lda status
0007B2r 3  29 F7                        and #$f7
0007B4r 3               
0007B4r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
0007B4r 3  1A                           inc
0007B5r 3               
0007B5r 3                               ; Bit 3 (if it got set by going from buffer 7 to 0) will
0007B5r 3                               ; be cleared below.
0007B5r 3  85 rr                        sta status
0007B7r 3               
0007B7r 3                               ; Falls through to @recall_history
0007B7r 3               
0007B7r 3               @recall_history:
0007B7r 3                               ; Clear bit 3 (first time ctrl-n recall) bit in status
0007B7r 3  A9 08                        lda #%00001000
0007B9r 3  14 rr                        trb status
0007BBr 3               
0007BBr 3  20 rr rr                     jsr total_recall
0007BEr 3               
0007BEr 3                               ; tmp3 now has the address of the previous history buffer.
0007BEr 3                               ; First byte of buffer is length. Clear the line by sending
0007BEr 3                               ; CR, Y spaces, then CR.
0007BEr 3  A9 0D                        lda #AscCR
0007C0r 3  20 rr rr                     jsr emit_a
0007C3r 3               
0007C3r 3               input_clear:
0007C3r 3  C0 00                        cpy #0
0007C5r 3  F0 08                        beq input_cleared
0007C7r 3               
0007C7r 3  A9 20                        lda #AscSP
0007C9r 3  20 rr rr                     jsr emit_a
0007CCr 3  88                           dey
0007CDr 3  80 F4                        bra input_clear
0007CFr 3               
0007CFr 3               input_cleared:
0007CFr 3  A9 0D                        lda #AscCR
0007D1r 3  20 rr rr                     jsr emit_a
0007D4r 3               
0007D4r 3                               ; Save the history length byte into histinfo+1
0007D4r 3                               ; ldy #0        ; Y is already 0 by clearing the line.
0007D4r 3  B1 rr                        lda (tmp3),y
0007D6r 3  85 rr                        sta status+1
0007D8r 3               
0007D8r 3                               ; Increment the tmp3 pointer so we can use ,y addressing
0007D8r 3                               ; on both tmp1 (the input buffer) and tmp3 (the history
0007D8r 3                               ; buffer)
0007D8r 3  E6 rr                        inc tmp3
0007DAr 3  D0 02                        bne @2           ; Increment the upper byte on carry.
0007DCr 3  E6 rr                        inc tmp3+1
0007DEr 3               @2:
0007DEr 3                               ; Copy the history buffer into the input buffer,
0007DEr 3                               ; sending the characters to the output as we go.
0007DEr 3  A9 0D                        lda #AscCR
0007E0r 3  20 rr rr                     jsr emit_a
0007E3r 3               
0007E3r 3               @history_loop:
0007E3r 3                               ; See if we have reached the end of the history buffer.
0007E3r 3  C4 rr                        cpy status+1
0007E5r 3  D0 03                        bne @3
0007E7r 3  4C rr rr                     jmp accept_loop       ; Needs a long jump
0007EAr 3               @3:
0007EAr 3                               ; See if we have reached the end of the input buffer.
0007EAr 3                               ; (only comparing to lower byte as we currently limit
0007EAr 3                               ; to 255 characters max)
0007EAr 3  C4 rr                        cpy tmp2
0007ECr 3  F0 0A                        beq @hist_filled_buffer
0007EEr 3               
0007EEr 3                               ; Copy a character and echo.
0007EEr 3  B1 rr                        lda (tmp3),y
0007F0r 3  91 rr                        sta (tmp1),y
0007F2r 3  20 rr rr                     jsr emit_a
0007F5r 3               
0007F5r 3                               ; Move to the next character.
0007F5r 3  C8                           iny
0007F6r 3  80 EB                        bra @history_loop
0007F8r 3               
0007F8r 3               @hist_filled_buffer:
0007F8r 3                               ; We don't want a history recall to EOL our buffer,
0007F8r 3                               ; so back up one character and return to editing.
0007F8r 3  88                           dey
0007F9r 3  4C rr rr                     jmp accept_loop
0007FCr 3               accept_done:
0007FCr 3               @done:
0007FCr 3                               ; Copy the input buffer into the currently
0007FCr 3                               ; selected history buffer.
0007FCr 3  20 rr rr                     jsr total_recall
0007FFr 3  85 rr                        sta status+1
000801r 3               
000801r 3                               ; Also save it in the first buffer byte.
000801r 3  A0 00                        ldy #0
000803r 3  91 rr                        sta (tmp3),y
000805r 3               
000805r 3                               ; Move path the count to the data bytes
000805r 3  E6 rr                        inc tmp3
000807r 3  D0 02                        bne @4           ; Increment the upper byte on carry.
000809r 3  E6 rr                        inc tmp3+1
00080Br 3               @4:
00080Br 3                               ; Copy the characters from the input buffer to the
00080Br 3                               ; history buffer.
00080Br 3               
00080Br 3               @save_history_loop:
00080Br 3  C4 rr                        cpy status+1
00080Dr 3  F0 07                        beq @save_history_done
00080Fr 3               
00080Fr 3  B1 rr                        lda (tmp1),y
000811r 3  91 rr                        sta (tmp3),y
000813r 3  C8                           iny
000814r 3  80 F5                        bra @save_history_loop
000816r 3               
000816r 3               @save_history_done:
000816r 3               z_accept:
000816r 3  60                           rts
000817r 3               
000817r 3               total_recall:
000817r 3                       ; """Internal subroutine for ACCEPT that recalls history entry"""
000817r 3               
000817r 3                               ; Generate the address of the buffer in tmp3. Start with the
000817r 3                               ; base address.
000817r 3  A9 rr                        lda #<hist_buff
000819r 3  85 rr                        sta tmp3
00081Br 3  A9 rr                        lda #>hist_buff
00081Dr 3  85 rr                        sta tmp3+1
00081Fr 3               
00081Fr 3                               ; This is a bit annoying as some bits go into each byte.
00081Fr 3                               ; .....xxx gets put into address like ......xx x.......
00081Fr 3  A5 rr                        lda status
000821r 3  6A                           ror
000822r 3  29 03                        and #3
000824r 3  18                           clc
000825r 3  65 rr                        adc tmp3+1
000827r 3  85 rr                        sta tmp3+1
000829r 3               
000829r 3  A5 rr                        lda status
00082Br 3  6A                           ror             ; Rotate through carry into msb.
00082Cr 3  6A                           ror
00082Dr 3  29 80                        and #$80
00082Fr 3  18                           clc
000830r 3  65 rr                        adc tmp3
000832r 3  85 rr                        sta tmp3
000834r 3  90 02                        bcc @1           ; Increment the upper byte on carry.
000836r 3  E6 rr                        inc tmp3+1
000838r 3               @1:
000838r 3                               ; Save the current length of the input buffer in
000838r 3                               ; histinfo+1 temporarily.  Reduce to 127 if larger.
000838r 3  98                           tya
000839r 3  C9 80                        cmp #$80
00083Br 3  90 02                        bcc @2
00083Dr 3  A9 7F                        lda #$7F
00083Fr 3               @2:
00083Fr 3  60                           rts
000840r 3               
000840r 3               
000840r 3               
000840r 3               
000840r 3               
000840r 3               ; ## ACTION_OF ( "name" -- xt ) "Get named deferred word's xt"
000840r 3               ; ## "action-of"  auto  ANS core ext
000840r 3                       ; """http://forth-standard.org/standard/core/ACTION-OF"""
000840r 3               
000840r 3               xt_action_of:
000840r 3                               ; This is a state aware word with differet behavior
000840r 3                               ; when used while compiling vs interpreting.
000840r 3                               ; Check STATE
000840r 3  A5 rr                        lda state
000842r 3  05 rr                        ora state+1
000844r 3  F0 0C                        beq @interpreting
000846r 3               
000846r 3               @compiling:
000846r 3                               ; Run ['] to compile the xt of the next word
000846r 3                               ; as a literal.
000846r 3  20 rr rr                     jsr xt_bracket_tick
000849r 3               
000849r 3                               ; Postpone DEFER@ by compiling a JSR to it.
000849r 3  A0 rr                        ldy #>xt_defer_fetch
00084Br 3  A9 rr                        lda #<xt_defer_fetch
00084Dr 3  20 rr rr                     jsr cmpl_subroutine
000850r 3  80 06                        bra @done
000852r 3               
000852r 3               @interpreting:
000852r 3  20 rr rr                     jsr xt_tick
000855r 3  20 rr rr                     jsr xt_defer_fetch
000858r 3               
000858r 3               @done:
000858r 3  60           z_action_of:           rts
000859r 3               
000859r 3               
000859r 3               
000859r 3               ; ## AGAIN ( addr -- ) "Code backwards branch to address left by BEGIN"
000859r 3               ; ## "again"  tested  ANS core ext
000859r 3                       ; """https://forth-standard.org/standard/core/AGAIN"""
000859r 3               
000859r 3               xt_again:
000859r 3  20 rr rr                     jsr underflow_1
00085Cr 3               
00085Cr 3                               ; Add the opcode for a JMP. We use JMP instead of BRA
00085Cr 3                               ; so we have the range and don't have to calculate the
00085Cr 3                               ; offset.
00085Cr 3  A0 00                        ldy #0
00085Er 3  A9 4C                        lda #$4C        ; JMP
000860r 3  91 rr                        sta (cp),y
000862r 3  C8                           iny
000863r 3               
000863r 3  B5 00                        lda 0,x         ; LSB of address
000865r 3  91 rr                        sta (cp),y
000867r 3  C8                           iny
000868r 3               
000868r 3  B5 01                        lda 1,x         ; MSB of address
00086Ar 3  91 rr                        sta (cp),y
00086Cr 3  C8                           iny
00086Dr 3               
00086Dr 3                               ; Allot the space we just used
00086Dr 3  98                           tya
00086Er 3  18                           clc
00086Fr 3  65 rr                        adc cp
000871r 3  85 rr                        sta cp
000873r 3  90 02                        bcc @done
000875r 3  E6 rr                        inc cp+1
000877r 3               @done:
000877r 3  E8                           inx
000878r 3  E8                           inx
000879r 3               
000879r 3  60           z_again:        rts
00087Ar 3               
00087Ar 3               
00087Ar 3               
00087Ar 3               ; ## ALIGN ( -- ) "Make sure CP is aligned on word size"
00087Ar 3               ; ## "align"  auto  ANS core
00087Ar 3                       ; """https://forth-standard.org/standard/core/ALIGN
00087Ar 3                       ; On a 8-bit machine, this does nothing. ALIGNED uses this
00087Ar 3                       ; routine as well, and also does nothing
00087Ar 3                       ; """
00087Ar 3               
00087Ar 3               ; ## ALIGNED ( addr -- addr ) "Return the first aligned address"
00087Ar 3               ; ## "aligned"  auto  ANS core
00087Ar 3                       ; """https://forth-standard.org/standard/core/ALIGNED"""
00087Ar 3               
00087Ar 3               xt_align:
00087Ar 3               xt_aligned:
00087Ar 3               z_align:
00087Ar 3  60           z_aligned:      rts             ; stripped out during native compile
00087Br 3               
00087Br 3               
00087Br 3               
00087Br 3               ; ## ALLOT ( n -- ) "Reserve or release memory"
00087Br 3               ; ## "allot"  auto  ANS core
00087Br 3                       ; """https://forth-standard.org/standard/core/ALLOT
00087Br 3                       ; Reserve a certain number of bytes (not cells) or release them.
00087Br 3                       ; If n = 0, do nothing. If n is negative, release n bytes, but only
00087Br 3                       ; to the beginning of the Dictionary. If n is positive (the most
00087Br 3                       ; common case), reserve n bytes, but not past the end of the
00087Br 3                       ; Dictionary. See http://forth-standard.org/standard/core/ALLOT
00087Br 3                       ; """
00087Br 3               
00087Br 3               xt_allot:
00087Br 3  20 rr rr                     jsr underflow_1
00087Er 3               
00087Er 3                               ; Releasing memory is going to be a very rare operation,
00087Er 3                               ; so we check for it at the beginning and try to make
00087Er 3                               ; the most common case as fast as possible
00087Er 3  B5 01                        lda 1,x
000880r 3  30 22                        bmi @release
000882r 3               
000882r 3                               ; Common case: We are reserving memory, not releasing it
000882r 3  18                           clc
000883r 3  A5 rr                        lda cp
000885r 3  75 00                        adc 0,x
000887r 3  85 rr                        sta cp
000889r 3               
000889r 3  A5 rr                        lda cp+1
00088Br 3  75 01                        adc 1,x
00088Dr 3  85 rr                        sta cp+1
00088Fr 3               
00088Fr 3                               ; Wait, did we just grant more space than we have? This is
00088Fr 3                               ; a check we only do here, not for other situations like cmpl_a
00088Fr 3                               ; where smaller amounts are reserved.
00088Fr 3  A0 FF                        ldy #<cp_end
000891r 3  C4 rr                        cpy cp
000893r 3  A9 7F                        lda #>cp_end
000895r 3  E5 rr                        sbc cp+1
000897r 3  B0 48                        bcs @done               ; we're fine.
000899r 3               
000899r 3                               ; Oops, that was too much, we're beyond the end of
000899r 3                               ; legal Dictionary RAM. Reduce to max memory and report
000899r 3                               ; an error
000899r 3  84 rr                        sty cp                  ; still #<cp_end
00089Br 3  A9 7F                        lda #>cp_end
00089Dr 3  85 rr                        sta cp+1
00089Fr 3               
00089Fr 3  A9 00                        lda #err_allot
0008A1r 3  4C rr rr                     jmp error
0008A4r 3               
0008A4r 3               @release:
0008A4r 3                  		; The ANS standard doesn't really say what to do if too much
0008A4r 3                               ; memory is freed ("negatively alloted"). In fact, there isn't
0008A4r 3                               ; even an official test. Gforth is little help either. The good
0008A4r 3                               ; news is, this is going to be a rare case. We want to use as
0008A4r 3                               ; few bytes as possible.
0008A4r 3               
0008A4r 3                               ; What we do is let the user free anything up to the beginning
0008A4r 3                               ; of the RAM area assigned to the Dicionary (CP0), but at
0008A4r 3                               ; their own risk. This means that the Dictionary pointer DP
0008A4r 3                               ; might end up pointing to garbage. However, an attempt to
0008A4r 3                               ; free more than RAM than CP0 will lead to CP being set to CP0,
0008A4r 3                               ; the DP pointing to the last word in RAM (should be DROP) and
0008A4r 3                               ; an error message.
0008A4r 3               
0008A4r 3                               ; We arrive here with ( n ) which is negative. First step,
0008A4r 3                               ; subtract the number TOS from the CP for a new CP
0008A4r 3  CA                           dex
0008A5r 3  CA                           dex
0008A6r 3  A5 rr                        lda cp
0008A8r 3  95 00                        sta 0,x
0008AAr 3  A5 rr                        lda cp+1
0008ACr 3  95 01                        sta 1,x
0008AEr 3               
0008AEr 3  20 rr rr                     jsr xt_plus                     ; new CP is now TOS
0008B1r 3               
0008B1r 3                               ; Second step, see if we've gone too far. We compare the new
0008B1r 3                               ; CP on TOS (which, if we've really screwed up, might be
0008B1r 3                               ; negative) with CP0. This is a signed comparison
0008B1r 3  CA                           dex
0008B2r 3  CA                           dex                             ; new CP now NOS
0008B3r 3  A9 rr                        lda #<cp0
0008B5r 3  95 00                        sta 0,x
0008B7r 3  A9 rr                        lda #>cp0
0008B9r 3  95 01                        sta 1,x                         ; CP0 is TOS
0008BBr 3               
0008BBr 3  20 rr rr                     jsr compare_16bit               ; still ( CP CP0 )
0008BEr 3               
0008BEr 3                               ; If CP (NOS) is smaller than CP0 (TOS), we're in trouble.
0008BEr 3                               ; This means we want Z=1 or N=1
0008BEr 3  F0 17                        beq @nega_done
0008C0r 3  30 15                        bmi @nega_done
0008C2r 3               
0008C2r 3                               ; Yep, we're in trouble. Set CP to CP0, set DP to the first
0008C2r 3                               ; word in ROM (should be DROP), and abort with an error
0008C2r 3  A9 rr                        lda #<cp0
0008C4r 3  85 rr                        sta cp
0008C6r 3  A9 rr                        lda #>cp0
0008C8r 3  85 rr                        sta cp+1
0008CAr 3               
0008CAr 3  A9 rr                        lda #<dictionary_start
0008CCr 3  85 rr                        sta dp
0008CEr 3  A9 rr                        lda #>dictionary_start
0008D0r 3  85 rr                        sta dp+1
0008D2r 3               
0008D2r 3  A9 0A                        lda #err_negallot
0008D4r 3  4C rr rr                     jmp error
0008D7r 3               
0008D7r 3               @nega_done:
0008D7r 3                               ; Save new CP, which is NOS
0008D7r 3  B5 02                        lda 2,x
0008D9r 3  85 rr                        sta cp
0008DBr 3  B5 03                        lda 3,x
0008DDr 3  85 rr                        sta cp+1
0008DFr 3               
0008DFr 3  E8                           inx
0008E0r 3  E8                           inx                     ; drop through to @done
0008E1r 3               @done:
0008E1r 3  E8                           inx
0008E2r 3  E8                           inx
0008E3r 3               z_allot:
0008E3r 3  60                           rts
0008E4r 3               
0008E4r 3               
0008E4r 3               
0008E4r 3               ; ## ALLOW_NATIVE ( -- ) "Flag last word to allow native compiling"
0008E4r 3               ; ## "allow-native"  auto  Tali Forth
0008E4r 3               xt_allow_native:
0008E4r 3  20 rr rr                     jsr current_to_dp
0008E7r 3  A0 01                        ldy #1          ; offset for status byte
0008E9r 3  B1 rr                        lda (dp),y
0008EBr 3  29 F5                        and #$ff-NN-AN  ; AN and NN flag is clear.
0008EDr 3  91 rr                        sta (dp),y
0008EFr 3               z_allow_native:
0008EFr 3  60                           rts
0008F0r 3               
0008F0r 3               
0008F0r 3               ; ## ALSO ( -- ) "Make room in the search order for another wordlist"
0008F0r 3               ; ## "also"  auto  ANS search ext
0008F0r 3                       ; """http://forth-standard.org/standard/search/ALSO"""
0008F0r 3               xt_also:
0008F0r 3  20 rr rr                     jsr xt_get_order
0008F3r 3  20 rr rr                     jsr xt_over
0008F6r 3  20 rr rr                     jsr xt_swap
0008F9r 3  20 rr rr                     jsr xt_one_plus
0008FCr 3  20 rr rr                     jsr xt_set_order
0008FFr 3               
0008FFr 3  60           z_also:         rts
000900r 3               
000900r 3               
000900r 3               ; ## ALWAYS_NATIVE ( -- ) "Flag last word as always natively compiled"
000900r 3               ; ## "always-native"  auto  Tali Forth
000900r 3               xt_always_native:
000900r 3  20 rr rr                     jsr current_to_dp
000903r 3  A0 01                        ldy #1          ; offset for status byte
000905r 3  B1 rr                        lda (dp),y
000907r 3  09 02                        ora #AN         ; Make sure AN flag is set
000909r 3  29 F7                        and #$ff-NN     ; and NN flag is clear.
00090Br 3  91 rr                        sta (dp),y
00090Dr 3               z_always_native:
00090Dr 3  60                           rts
00090Er 3               
00090Er 3               
00090Er 3               ; ## AND ( n n -- n ) "Logically AND TOS and NOS"
00090Er 3               ; ## "and"  auto  ANS core
00090Er 3                       ; """https://forth-standard.org/standard/core/AND"""
00090Er 3               xt_and:
00090Er 3  20 rr rr                     jsr underflow_2
000911r 3               
000911r 3  B5 00                        lda 0,x
000913r 3  35 02                        and 2,x
000915r 3  95 02                        sta 2,x
000917r 3               
000917r 3  B5 01                        lda 1,x
000919r 3  35 03                        and 3,x
00091Br 3  95 03                        sta 3,x
00091Dr 3               
00091Dr 3  E8                           inx
00091Er 3  E8                           inx
00091Fr 3               
00091Fr 3  60           z_and:          rts
000920r 3               
000920r 3               
000920r 3               ; ## ASSEMBLER_WORDLIST ( -- u ) "WID for the Assembler wordlist"
000920r 3               ; ## "assembler-wordlist"  tested  Tali Assembler
000920r 3                       ; """ Commonly used like `assembler-wordlist >order` to add the
000920r 3                       ; assembler words to the search order so they can be used.
000920r 3                       ; See the tutorial on Wordlists and the Search Order for
000920r 3                       ; more information.
000920r 3                       ;
000920r 3                       ; This is a dummy entry, the code is shared with TWO
000920r 3                       ; """
000920r 3               
000920r 3               
000920r 3               ; ## AT_XY ( n m -- ) "Move cursor to position given"
000920r 3               ; ## "at-xy"  tested  ANS facility
000920r 3                       ; """https://forth-standard.org/standard/facility/AT-XY
000920r 3                       ; On an ANSI compatible terminal, place cursor at row n colum m.
000920r 3                       ; ANSI code is ESC[<n>;<m>H
000920r 3                       ;
000920r 3                       ; Do not use U. to print the numbers because the
000920r 3                       ; trailing space will not work with xterm
000920r 3                       ; """
000920r 3               xt_at_xy:
000920r 3  20 rr rr                     jsr underflow_2
000923r 3               
000923r 3  A9 1B                        lda #AscESC
000925r 3  20 rr rr                     jsr emit_a
000928r 3  A9 5B                        lda #$5B        ; ASCII for "["
00092Ar 3  20 rr rr                     jsr emit_a
00092Dr 3  20 rr rr                     jsr print_u
000930r 3  A9 3B                        lda #$3B        ; ASCII for ";"
000932r 3  20 rr rr                     jsr emit_a
000935r 3  20 rr rr                     jsr print_u
000938r 3  A9 48                        lda #'H'
00093Ar 3  20 rr rr                     jsr emit_a
00093Dr 3               
00093Dr 3  60           z_at_xy:        rts
00093Er 3               
00093Er 3               
00093Er 3               ; ## BACKSLASH ( -- ) "Ignore rest of line"
00093Er 3               ; ## "\"  auto  ANS core ext
00093Er 3                       ; """https://forth-standard.org/standard/core/bs"""
00093Er 3               xt_backslash:
00093Er 3  A5 rr                        lda ciblen
000940r 3  85 rr                        sta toin
000942r 3  A5 rr                        lda ciblen+1
000944r 3  85 rr                        sta toin+1
000946r 3               
000946r 3  60           z_backslash:    rts
000947r 3               
000947r 3               
000947r 3               ; ## BASE ( -- addr ) "Push address of radix base to stack"
000947r 3               ; ## "base"  auto  ANS core
000947r 3                       ; """https://forth-standard.org/standard/core/BASE
000947r 3                       ; The ANS Forth standard sees the base up to 36, so we can cheat and
000947r 3                       ; ingore the MSB
000947r 3                       ; """
000947r 3               xt_base:
000947r 3  CA                           dex
000948r 3  CA                           dex
000949r 3  A9 rr                        lda #<base
00094Br 3  95 00                        sta 0,x         ; LSB
00094Dr 3  74 01                        stz 1,x         ; MSB is always 0
00094Fr 3               
00094Fr 3  60           z_base:         rts
000950r 3               
000950r 3               
000950r 3               ; ## BEGIN ( -- addr ) "Mark entry point for loop"
000950r 3               ; ## "begin"  auto  ANS core
000950r 3                       ; """https://forth-standard.org/standard/core/BEGIN
000950r 3                       ;
000950r 3                       ; This is just an immediate version of here which could just
000950r 3                       ; as well be coded in Forth as
000950r 3                       ;       : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
000950r 3                       ; Since this is a compiling word, we don't care that much about
000950r 3                       ; about speed
000950r 3                       ; """
000950r 3               
000950r 3               xt_begin:
000950r 3  20 rr rr                     jsr xt_here
000953r 3  60           z_begin:        rts
000954r 3               
000954r 3               
000954r 3               
000954r 3               ; ## BELL ( -- ) "Emit ASCII BELL"
000954r 3               ; ## "bell"  tested  Tali Forth
000954r 3               xt_bell:
000954r 3  A9 07                        lda #7          ; ASCII value for BELl
000956r 3  20 rr rr                     jsr emit_a
000959r 3               
000959r 3  60           z_bell:         rts
00095Ar 3               
00095Ar 3               
00095Ar 3               ; ## BL ( -- c ) "Push ASCII value of SPACE to stack"
00095Ar 3               ; ## "bl"  auto  ANS core
00095Ar 3                       ; """https://forth-standard.org/standard/core/BL"""
00095Ar 3               
00095Ar 3               xt_bl:
00095Ar 3  CA                           dex
00095Br 3  CA                           dex
00095Cr 3  A9 20                        lda #AscSP
00095Er 3  95 00                        sta 0,x
000960r 3  74 01                        stz 1,x
000962r 3               
000962r 3  60           z_bl:           rts
000963r 3               
000963r 3               
000963r 3               ; ## BLK ( -- addr ) "Push address of block being interpreted"
000963r 3               ; ## "block"  auto  ANS block
000963r 3                       ; """https://forth-standard.org/standard/block/BLK"""
000963r 3               xt_blk:
000963r 3                               ; BLK is at UP + blk_offset
000963r 3  CA                           dex
000964r 3  CA                           dex
000965r 3  18                           clc
000966r 3  A5 rr                        lda up
000968r 3  69 00                        adc #blk_offset ; Add offset
00096Ar 3  95 00                        sta 0,x
00096Cr 3  A5 rr                        lda up+1
00096Er 3  69 00                        adc #0          ; Adding carry
000970r 3  95 01                        sta 1,x
000972r 3               
000972r 3  60           z_blk:          rts
000973r 3               
000973r 3               
000973r 3               ; ## BLKBUFFER ( -- addr ) "Push address of block buffer"
000973r 3               ; ## "blkbuffer"  auto  Tali block
000973r 3               xt_blkbuffer:
000973r 3                               ; blkbuffer address is at UP + blkbuffer_offset.
000973r 3                               ; Unlike some of the other user variables, we actually
000973r 3                               ; want to push the address stored here, which will
000973r 3                               ; point to somewhere outside of the user variables.
000973r 3  CA                           dex
000974r 3  CA                           dex
000975r 3                               ; Put the address on the stack.
000975r 3  A0 28                        ldy #blkbuffer_offset
000977r 3  B1 rr                        lda (up),y
000979r 3  95 00                        sta 0,x
00097Br 3  C8                           iny             ; Move along to the next byte
00097Cr 3  B1 rr                        lda (up),y
00097Er 3  95 01                        sta 1,x
000980r 3               
000980r 3  60           z_blkbuffer:    rts
000981r 3               
000981r 3               
000981r 3               ; ## BLOCK ( u -- a-addr ) "Fetch a block into a buffer"
000981r 3               ; ## "block"  auto  ANS block
000981r 3                       ; """https://forth-standard.org/standard/block/BLOCK"""
000981r 3               
000981r 3               xt_block:
000981r 3               
000981r 3                               ; See if the block requested is the same as the one we
000981r 3                               ; currently have in the buffer. Check the LSB.
000981r 3  A0 2A                        ldy #buffblocknum_offset
000983r 3  B1 rr                        lda (up),y
000985r 3  D5 00                        cmp 0,x
000987r 3  D0 0F                        bne @not_in_buffer
000989r 3               
000989r 3                               ; Check the MSB.
000989r 3  C8                           iny
00098Ar 3  B1 rr                        lda (up),y
00098Cr 3  D5 01                        cmp 1,x
00098Er 3  D0 08                        bne @not_in_buffer
000990r 3               
000990r 3                               ; The block is in the buffer. See if the buffer is in use.
000990r 3  A0 2C                        ldy #buffstatus_offset
000992r 3  B1 rr                        lda (up),y
000994r 3  29 01                        and #1          ; Check the in-use flag (bit 0)
000996r 3  D0 30                        bne @done       ; It's already in the buffer and in use.
000998r 3                                               ; @done will replace the block# with the
000998r 3                                               ; buffer address.
000998r 3               @not_in_buffer:
000998r 3                               ; Check the buffer status
000998r 3  A0 2C                        ldy #buffstatus_offset
00099Ar 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
00099Cr 3  C9 03                        cmp #3          ; LSB is needed.
00099Er 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
0009A0r 3               
0009A0r 3                               ; We need to save the block.
0009A0r 3  20 rr rr                     jsr xt_blkbuffer
0009A3r 3  20 rr rr                     jsr xt_buffblocknum
0009A6r 3  20 rr rr                     jsr xt_fetch
0009A9r 3  20 rr rr                     jsr xt_block_write
0009ACr 3               
0009ACr 3               @buffer_available:
0009ACr 3                               ; Save the block number.
0009ACr 3  A0 2A                        ldy #buffblocknum_offset
0009AEr 3  B5 00                        lda 0,x
0009B0r 3  91 rr                        sta (up),y
0009B2r 3  C8                           iny
0009B3r 3  B5 01                        lda 1,x
0009B5r 3  91 rr                        sta (up),y
0009B7r 3               
0009B7r 3                               ; Get the requested block.
0009B7r 3  20 rr rr                     jsr xt_blkbuffer
0009BAr 3  20 rr rr                     jsr xt_swap
0009BDr 3  20 rr rr                     jsr xt_block_read
0009C0r 3               
0009C0r 3                               ; Mark the buffer as clean and in-use.
0009C0r 3  A9 01                        lda #1
0009C2r 3  A0 2C                        ldy #buffstatus_offset
0009C4r 3  91 rr                        sta (up),y
0009C6r 3               
0009C6r 3                               ; Make room on the stack for the return address.
0009C6r 3  CA                           dex
0009C7r 3  CA                           dex
0009C8r 3               
0009C8r 3               @done:
0009C8r 3                               ; It's in the buffer. Return the buffer address.
0009C8r 3  A0 28                        ldy #blkbuffer_offset
0009CAr 3  B1 rr                        lda (up),y
0009CCr 3  95 00                        sta 0,x
0009CEr 3  C8                           iny
0009CFr 3  B1 rr                        lda (up),y
0009D1r 3  95 01                        sta 1,x
0009D3r 3               
0009D3r 3  60           z_block:        rts
0009D4r 3               
0009D4r 3               
0009D4r 3               
0009D4r 3               ; ## BLOCK_RAMDRIVE_INIT ( u -- ) "Create a ramdrive for blocks"
0009D4r 3               ; ## "block-ramdrive-init"  auto  Tali block
0009D4r 3                       ; """Create a RAM drive, with the given number of
0009D4r 3                       ; blocks, in the dictionary along with setting up the block words to
0009D4r 3                       ; use it.  The read/write routines do not provide bounds checking.
0009D4r 3                       ; Expected use: `4 block-ramdrive-init` ( to create blocks 0-3 )
0009D4r 3                       ; """
0009D4r 3               
0009D4r 3               xt_block_ramdrive_init:
0009D4r 3  20 rr rr                     jsr underflow_1
0009D7r 3               
0009D7r 3                               ; Store the string to run here as a string literal.
0009D7r 3                               ; See SLITERAL for the format information. This way, we
0009D7r 3                               ; don't have the words defined below in the Dictionary until
0009D7r 3                               ; we really use them.
0009D7r 3  4C rr rr                     jmp @after_ramdrive_code
0009DAr 3               
0009DAr 3               @ramdrive_code:
0009DAr 3  62 61 73 65          .byte "base @ swap decimal"
0009DEr 3  20 40 20 73  
0009E2r 3  77 61 70 20  
0009EDr 3  20 31 30 32          .byte " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
0009F1r 3  34 20 2A     
0009F4r 3  20 64 75 70          .byte " dup"    ; ( Save a copy for formatting it at the end )
0009F8r 3  20 62 75 66          .byte " buffer: ramdrive" ; ( Create ramdrive )
0009FCr 3  66 65 72 3A  
000A00r 3  20 72 61 6D  
000A09r 3                       ; ( These routines just copy between the buffer and the ramdrive blocks )
000A09r 3  20 3A 20 62          .byte " : block-read-ramdrive"  ; ( addr u -- )
000A0Dr 3  6C 6F 63 6B  
000A11r 3  2D 72 65 61  
000A1Fr 3  20 72 61 6D          .byte " ramdrive swap 1024 * + swap 1024 move ;"
000A23r 3  64 72 69 76  
000A27r 3  65 20 73 77  
000A47r 3  20 3A 20 62          .byte " : block-write-ramdrive" ; ( addr u -- )
000A4Br 3  6C 6F 63 6B  
000A4Fr 3  2D 77 72 69  
000A5Er 3  20 72 61 6D          .byte " ramdrive swap 1024 * + 1024 move ;"
000A62r 3  64 72 69 76  
000A66r 3  65 20 73 77  
000A81r 3  20 27 20 62          .byte " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
000A85r 3  6C 6F 63 6B  
000A89r 3  2D 72 65 61  
000AABr 3  20 27 20 62          .byte " ' block-write-ramdrive block-write-vector !"
000AAFr 3  6C 6F 63 6B  
000AB3r 3  2D 77 72 69  
000AD7r 3  20 72 61 6D          .byte " ramdrive swap blank base !"
000ADBr 3  64 72 69 76  
000ADFr 3  65 20 73 77  
000AF2r 3               
000AF2r 3               @after_ramdrive_code:
000AF2r 3  20 rr rr                     jsr sliteral_runtime
000AF5r 3               
000AF5r 3  rr rr 18 01  .word @ramdrive_code, @after_ramdrive_code-@ramdrive_code
000AF9r 3               
000AF9r 3                               ; The address and length of the ramdrive code is now on the
000AF9r 3                               ; stack. Call EVALUATE to run it.
000AF9r 3  20 rr rr                     jsr xt_evaluate
000AFCr 3               
000AFCr 3               z_block_ramdrive_init:
000AFCr 3  60                           rts
000AFDr 3               
000AFDr 3               
000AFDr 3               
000AFDr 3               ; ## BLOCK_READ ( addr u -- ) "Read a block from storage (deferred word)"
000AFDr 3               ; ## "block-read"  auto  Tali block
000AFDr 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000AFDr 3                       ; with their own version to read a block from storage.
000AFDr 3                       ; The stack parameters are ( buffer_address block# -- ).
000AFDr 3                       ; """
000AFDr 3               xt_block_read:
000AFDr 3                               ; Execute the BLOCK-READ-VECTOR
000AFDr 3  A0 2E                        ldy #blockread_offset
000AFFr 3  B1 rr                        lda (up),y
000B01r 3  85 rr                        sta tmp1
000B03r 3  C8                           iny
000B04r 3  B1 rr                        lda (up),y
000B06r 3  85 rr                        sta tmp1+1
000B08r 3               
000B08r 3  6C rr rr                     jmp (tmp1)
000B0Br 3               
000B0Br 3               z_block_read:   ; No RTS needed
000B0Br 3               
000B0Br 3               
000B0Br 3               ; ## BLOCK_READ_VECTOR ( -- addr ) "Address of the block-read vector"
000B0Br 3               ; ## "block-read-vector"  auto  Tali block
000B0Br 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000B0Br 3                       ; with their own version to read a block from storage.
000B0Br 3                       ; This word gives the address of the vector so it can be replaced.
000B0Br 3                       ; """
000B0Br 3               xt_block_read_vector:
000B0Br 3                               ; Get the BLOCK-READ-VECTOR address
000B0Br 3  CA                           dex
000B0Cr 3  CA                           dex
000B0Dr 3  18                           clc
000B0Er 3  A5 rr                        lda up
000B10r 3  69 2E                        adc #blockread_offset
000B12r 3  95 00                        sta 0,x
000B14r 3  A5 rr                        lda up+1
000B16r 3  69 00                        adc #0          ; Add carry
000B18r 3  95 01                        sta 1,x
000B1Ar 3               
000B1Ar 3               z_block_read_vector:
000B1Ar 3  60                           rts
000B1Br 3               
000B1Br 3               
000B1Br 3               ; This is the default error message the vectored words BLOCK-READ and
000B1Br 3               ; BLOCK-WRITE start with. This word is not included in the dictionary.
000B1Br 3               xt_block_word_error:
000B1Br 3  A9 0C                        lda #err_blockwords
000B1Dr 3  4C rr rr                     jmp error       ; no RTS needed
000B20r 3               z_block_word_error:
000B20r 3               
000B20r 3               ; ## BLOCK_WRITE ( addr u -- ) "Write a block to storage (deferred word)"
000B20r 3               ; ## "block-write"  auto  Tali block
000B20r 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000B20r 3                       ; with their own version to write a block to storage.
000B20r 3                       ; The stack parameters are ( buffer_address block# -- ).
000B20r 3                       ; """
000B20r 3               xt_block_write:
000B20r 3                               ; Execute the BLOCK-READ-VECTOR
000B20r 3  A0 30                        ldy #blockwrite_offset
000B22r 3  B1 rr                        lda (up),y
000B24r 3  85 rr                        sta tmp1
000B26r 3  C8                           iny
000B27r 3  B1 rr                        lda (up),y
000B29r 3  85 rr                        sta tmp1+1
000B2Br 3  6C rr rr                     jmp (tmp1)
000B2Er 3               
000B2Er 3               z_block_write:  ; No RTS needed
000B2Er 3               
000B2Er 3               
000B2Er 3               ; ## BLOCK_WRITE_VECTOR ( -- addr ) "Address of the block-write vector"
000B2Er 3               ; ## "block-write-vector"  auto  Tali block
000B2Er 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000B2Er 3                       ; with their own version to write a block to storage.
000B2Er 3                       ; This word gives the address of the vector so it can be replaced.
000B2Er 3                       ; """
000B2Er 3               xt_block_write_vector:
000B2Er 3                               ; Get the BLOCK-WRITE-VECTOR address
000B2Er 3  CA                           dex
000B2Fr 3  CA                           dex
000B30r 3  18                           clc
000B31r 3  A5 rr                        lda up
000B33r 3  69 30                        adc #blockwrite_offset
000B35r 3  95 00                        sta 0,x
000B37r 3  A5 rr                        lda up+1
000B39r 3  69 00                        adc #0          ; Add carry
000B3Br 3  95 01                        sta 1,x
000B3Dr 3               
000B3Dr 3               z_block_write_vector:
000B3Dr 3  60                           rts
000B3Er 3               
000B3Er 3               
000B3Er 3               ; ## BOUNDS ( addr u -- addr+u addr ) "Prepare address for looping"
000B3Er 3               ; ## "bounds"  auto  Gforth
000B3Er 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Memory-Blocks.html
000B3Er 3                       ; Given a string, return the correct Data Stack parameters for
000B3Er 3                       ; a DO/LOOP loop over its characters. This is realized as
000B3Er 3                       ; OVER + SWAP in Forth, but we do it a lot faster in assembler
000B3Er 3                       ; """
000B3Er 3               xt_bounds:
000B3Er 3  20 rr rr                     jsr underflow_2
000B41r 3               
000B41r 3  18                           clc
000B42r 3  B5 00                        lda 0,x                 ; LSB u
000B44r 3  B4 02                        ldy 2,x                 ; LSB addr
000B46r 3  75 02                        adc 2,x
000B48r 3  95 02                        sta 2,x                 ; LSB addr+u
000B4Ar 3  94 00                        sty 0,x
000B4Cr 3               
000B4Cr 3  B5 01                        lda 1,x                 ; MSB u
000B4Er 3  B4 03                        ldy 3,x                 ; MSB addr
000B50r 3  75 03                        adc 3,x
000B52r 3  95 03                        sta 3,x                 ; MSB addr+u
000B54r 3  94 01                        sty 1,x
000B56r 3               
000B56r 3  60           z_bounds:       rts
000B57r 3               
000B57r 3               
000B57r 3               ; ## BRACKET_CHAR ( "c" -- ) "Compile character"
000B57r 3               ; ## "[char]"  auto  ANS core
000B57r 3                       ; """https://forth-standard.org/standard/core/BracketCHAR
000B57r 3                       ; Compile the ASCII value of a character as a literal. This is an
000B57r 3                       ; immediate, compile-only word.
000B57r 3                       ;
000B57r 3                       ; A definition given in
000B57r 3                       ; http://forth-standard.org/standard/implement is
000B57r 3                       ; : [CHAR]  CHAR POSTPONE LITERAL ; IMMEDIATE
000B57r 3                       ; """
000B57r 3               xt_bracket_char:
000B57r 3  20 rr rr                     jsr xt_char
000B5Ar 3  20 rr rr                     jsr xt_literal
000B5Dr 3  60           z_bracket_char: rts
000B5Er 3               
000B5Er 3               
000B5Er 3               ; ## BRACKET_TICK ( -- ) "Store xt of following word during compilation"
000B5Er 3               ; ## "[']"  auto  ANS core
000B5Er 3                       ; """https://forth-standard.org/standard/core/BracketTick"""
000B5Er 3               xt_bracket_tick:
000B5Er 3  20 rr rr                     jsr xt_tick
000B61r 3  20 rr rr                     jsr xt_literal
000B64r 3  60           z_bracket_tick: rts
000B65r 3               
000B65r 3               
000B65r 3               ; ## BUFFBLOCKNUM ( -- addr ) "Push address of variable holding block in buffer"
000B65r 3               ; ## "buffblocknum"  auto  Tali block
000B65r 3               xt_buffblocknum:
000B65r 3                               ; BUFFBLOCKNUM is at UP + buffblocknum_offset
000B65r 3  CA                           dex
000B66r 3  CA                           dex
000B67r 3  18                           clc
000B68r 3  A5 rr                        lda up
000B6Ar 3  69 2A                        adc #buffblocknum_offset        ; Add offset
000B6Cr 3  95 00                        sta 0,x
000B6Er 3  A5 rr                        lda up+1
000B70r 3  69 00                        adc #0                          ; Adding carry
000B72r 3  95 01                        sta 1,x
000B74r 3               
000B74r 3  60           z_buffblocknum: rts
000B75r 3               
000B75r 3               
000B75r 3               ; ## BUFFER ( u -- a-addr ) "Get a buffer for a block"
000B75r 3               ; ## "buffer"  auto  ANS block
000B75r 3                       ; """https://forth-standard.org/standard/block/BUFFER"""
000B75r 3               
000B75r 3               xt_buffer:
000B75r 3                               ; Check the buffer status
000B75r 3  A0 2C                        ldy #buffstatus_offset
000B77r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
000B79r 3  C9 03                        cmp #3          ; LSB is needed.
000B7Br 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
000B7Dr 3               
000B7Dr 3                               ; We need to save the block.
000B7Dr 3  20 rr rr                     jsr xt_blkbuffer
000B80r 3  20 rr rr                     jsr xt_buffblocknum
000B83r 3  20 rr rr                     jsr xt_fetch
000B86r 3  20 rr rr                     jsr xt_block_write
000B89r 3               
000B89r 3               @buffer_available:
000B89r 3                               ; Save the block number.
000B89r 3  A0 2A                        ldy #buffblocknum_offset
000B8Br 3  B5 00                        lda 0,x
000B8Dr 3  91 rr                        sta (up),y
000B8Fr 3  C8                           iny
000B90r 3  B5 01                        lda 1,x
000B92r 3  91 rr                        sta (up),y
000B94r 3               
000B94r 3                               ; Mark the buffer as clean and in-use.
000B94r 3  A9 01                        lda #1
000B96r 3  A0 2C                        ldy #buffstatus_offset
000B98r 3  91 rr                        sta (up),y
000B9Ar 3               
000B9Ar 3               @done:
000B9Ar 3                               ; Return the buffer address.
000B9Ar 3  A0 28                        ldy #blkbuffer_offset
000B9Cr 3  B1 rr                        lda (up),y
000B9Er 3  95 00                        sta 0,x
000BA0r 3  C8                           iny
000BA1r 3  B1 rr                        lda (up),y
000BA3r 3  95 01                        sta 1,x
000BA5r 3               
000BA5r 3  60           z_buffer:       rts
000BA6r 3               
000BA6r 3               
000BA6r 3               
000BA6r 3               ; ## BUFFER_COLON ( u "<name>" -- ; -- addr ) "Create an uninitialized buffer"
000BA6r 3               ; ## "buffer:"  auto  ANS core ext
000BA6r 3                               ; """https://forth-standard.org/standard/core/BUFFERColon
000BA6r 3                               ; Create a buffer of size u that puts its address on the stack
000BA6r 3                               ; when its name is used.
000BA6r 3                               ; """
000BA6r 3               xt_buffer_colon:
000BA6r 3  20 rr rr                     jsr xt_create
000BA9r 3  20 rr rr                     jsr xt_allot
000BACr 3  60           z_buffer_colon: rts
000BADr 3               
000BADr 3               
000BADr 3               ; ## BUFFSTATUS ( -- addr ) "Push address of variable holding buffer status"
000BADr 3               ; ## "buffstatus"  auto  Tali block
000BADr 3               xt_buffstatus:
000BADr 3                               ; BUFFSTATUS is at UP + buffstatus_offset
000BADr 3  CA                           dex
000BAEr 3  CA                           dex
000BAFr 3  18                           clc
000BB0r 3  A5 rr                        lda up
000BB2r 3  69 2C                        adc #buffstatus_offset  ; Add offset
000BB4r 3  95 00                        sta 0,x
000BB6r 3  A5 rr                        lda up+1
000BB8r 3  69 00                        adc #0                  ; Adding carry
000BBAr 3  95 01                        sta 1,x
000BBCr 3               
000BBCr 3  60           z_buffstatus:   rts
000BBDr 3               
000BBDr 3               
000BBDr 3               ; ## BYE ( -- ) "Break"
000BBDr 3               ; ## "bye"  tested  ANS tools ext
000BBDr 3                       ; """https://forth-standard.org/standard/tools/BYE"""
000BBDr 3               
000BBDr 3               xt_bye:
000BBDr 3                               ;brk
000BBDr 3  4C rr rr                     jmp platform_bye
000BC0r 3               z_bye:          ;rts             ; never reached
000BC0r 3               
000BC0r 3               
000BC0r 3               
000BC0r 3               ; ## C_COMMA ( c -- ) "Store one byte/char in the Dictionary"
000BC0r 3               ; ## "c,"  auto  ANS core
000BC0r 3                       ; """https://forth-standard.org/standard/core/CComma"""
000BC0r 3               
000BC0r 3               xt_c_comma:
000BC0r 3  20 rr rr                     jsr underflow_1
000BC3r 3               
000BC3r 3  B5 00                        lda 0,x
000BC5r 3  20 rr rr                     jsr cmpl_a
000BC8r 3               
000BC8r 3  E8                           inx
000BC9r 3  E8                           inx
000BCAr 3               
000BCAr 3  60           z_c_comma:      rts
000BCBr 3               
000BCBr 3               
000BCBr 3               
000BCBr 3               ; ## C_FETCH ( addr -- c ) "Get a character/byte from given address"
000BCBr 3               ; ## "c@"  auto  ANS core
000BCBr 3                       ; """https://forth-standard.org/standard/core/CFetch"""
000BCBr 3               xt_c_fetch:
000BCBr 3  20 rr rr                     jsr underflow_1
000BCEr 3               
000BCEr 3  A1 00                        lda (0,x)
000BD0r 3  95 00                        sta 0,x
000BD2r 3  74 01                        stz 1,x         ; Ignore LSB
000BD4r 3               
000BD4r 3  60           z_c_fetch:      rts
000BD5r 3               
000BD5r 3               
000BD5r 3               ; ## C_STORE ( c addr -- ) "Store character at address given"
000BD5r 3               ; ## "c!"  auto  ANS core
000BD5r 3                       ; """https://forth-standard.org/standard/core/CStore"""
000BD5r 3               xt_c_store:
000BD5r 3  20 rr rr                     jsr underflow_2
000BD8r 3               
000BD8r 3  B5 02                        lda 2,x
000BDAr 3  81 00                        sta (0,x)
000BDCr 3               
000BDCr 3  E8                           inx
000BDDr 3  E8                           inx
000BDEr 3  E8                           inx
000BDFr 3  E8                           inx
000BE0r 3               
000BE0r 3  60           z_c_store:      rts
000BE1r 3               
000BE1r 3               
000BE1r 3               ; ## CASE (C: -- 0) ( -- ) "Conditional flow control"
000BE1r 3               ; ## "case"  auto  ANS core ext
000BE1r 3                       ; """http://forth-standard.org/standard/core/CASE
000BE1r 3                       ;
000BE1r 3                       ; This is a dummy header, CASE shares the actual code with ZERO.
000BE1r 3                       ; """
000BE1r 3               
000BE1r 3               
000BE1r 3               ; ## CELL_PLUS ( u -- u ) "Add cell size in bytes"
000BE1r 3               ; ## "cell+"  auto  ANS core
000BE1r 3                       ; """https://forth-standard.org/standard/core/CELLPlus
000BE1r 3                       ; Add the number of bytes ("address units") that one cell needs.
000BE1r 3                       ; Since this is an 8 bit machine with 16 bit cells, we add two bytes.
000BE1r 3                       ; """
000BE1r 3               
000BE1r 3               xt_cell_plus:
000BE1r 3  20 rr rr                     jsr underflow_1
000BE4r 3               
000BE4r 3  F6 00                        inc 0,x
000BE6r 3  D0 02                        bne @1
000BE8r 3  F6 01                        inc 1,x
000BEAr 3               @1:
000BEAr 3  F6 00                        inc 0,x
000BECr 3  D0 02                        bne @done
000BEEr 3  F6 01                        inc 1,x
000BF0r 3               @done:
000BF0r 3  60           z_cell_plus:    rts
000BF1r 3               
000BF1r 3               
000BF1r 3               
000BF1r 3               ; ## CELLS ( u -- u ) "Convert cells to size in bytes"
000BF1r 3               ; ## "cells"  auto  ANS core
000BF1r 3                       ; """https://forth-standard.org/standard/core/CELLS
000BF1r 3                       ;
000BF1r 3                       ; Dummy entry for the CELLS word, the code is the same as for
000BF1r 3                       ; 2*, which is where the header directs us to
000BF1r 3                       ; """
000BF1r 3               
000BF1r 3               
000BF1r 3               ; ## CHAR ( "c" -- u ) "Convert character to ASCII value"
000BF1r 3               ; ## "char"  auto  ANS core
000BF1r 3                       ; """https://forth-standard.org/standard/core/CHAR"""
000BF1r 3               
000BF1r 3               xt_char:
000BF1r 3                               ; get character from string, returns ( addr u )
000BF1r 3  20 rr rr                     jsr xt_parse_name
000BF4r 3               
000BF4r 3                               ; if we got back a zero, we have a problem
000BF4r 3  B5 00                        lda 0,x
000BF6r 3  15 01                        ora 1,x
000BF8r 3  D0 05                        bne @not_empty
000BFAr 3               
000BFAr 3  A9 05                        lda #err_noname
000BFCr 3  4C rr rr                     jmp error
000BFFr 3               
000BFFr 3               @not_empty:
000BFFr 3  E8                           inx             ; drop number of characters, leave addr
000C00r 3  E8                           inx
000C01r 3  A1 00                        lda (0,x)       ; get character (equivalent to C@)
000C03r 3  95 00                        sta 0,x
000C05r 3  74 01                        stz 1,x         ; MSB is always zero
000C07r 3               
000C07r 3  60           z_char:         rts
000C08r 3               
000C08r 3               
000C08r 3               
000C08r 3               ; ## CHAR_PLUS ( addr -- addr+1 ) "Add the size of a character unit to address"
000C08r 3               ; ## "char+"  auto  ANS core
000C08r 3                       ; """https://forth-standard.org/standard/core/CHARPlus
000C08r 3                       ;
000C08r 3                       ; This is a dummy entry, the code is shared with ONE_PLUS
000C08r 3                       ; """
000C08r 3               
000C08r 3               
000C08r 3               ; ## CHARS ( n -- n ) "Number of bytes that n chars need"
000C08r 3               ; ## "chars"  auto  ANS core
000C08r 3                       ; """https://forth-standard.org/standard/core/CHARS
000C08r 3                       ; Return how many address units n chars are. Since this is an 8 bit
000C08r 3                       ; machine, this does absolutely nothing and is included for
000C08r 3                       ; compatibility with other Forth versions
000C08r 3                       ; """
000C08r 3               
000C08r 3               xt_chars:
000C08r 3                               ; Checking for underflow seems a bit stupid because this
000C08r 3                               ; routine does nothing on this machine. However, the user
000C08r 3                               ; should be warned that there is something wrong with the
000C08r 3                               ; code if this occurs.
000C08r 3  20 rr rr                     jsr underflow_1
000C0Br 3               
000C0Br 3  60           z_chars:        rts
000C0Cr 3               
000C0Cr 3               
000C0Cr 3               ; ## CLEAVE ( addr u -- addr2 u2 addr1 u1 ) "Split off word from string"
000C0Cr 3               ; ## "cleave"  auto  Tali Forth
000C0Cr 3               
000C0Cr 3                       ; """Given a range of memory with words delimited by whitespace,return
000C0Cr 3                       ; the first word at the top of the stack and the rest of the word
000C0Cr 3                       ; following it.
000C0Cr 3                       ;
000C0Cr 3                       ; Example:
000C0Cr 3                       ; s" w1 w2 w3" cleave  -> "w2 w3" "w1"
000C0Cr 3                       ; s" w1" cleave        -> "" "w1"
000C0Cr 3                       ;
000C0Cr 3                       ; Since it will be used in loops a lot, we want it to work in pure
000C0Cr 3                       ; assembler and be as fast as we can make it. Calls PARSE-NAME so we
000C0Cr 3                       ; strip leading delimiters.
000C0Cr 3                       ; """
000C0Cr 3               
000C0Cr 3               xt_cleave:
000C0Cr 3  20 rr rr                     jsr underflow_2
000C0Fr 3               
000C0Fr 3                               ; We arrive here with ( addr u ). We need to strip any leading
000C0Fr 3                               ; spaces by hand: PARSE-NAME does do that, but it doesn't
000C0Fr 3                               ; remember how many spaces were stripped. This means we can't
000C0Fr 3                               ; calculate the length of the remainder. Fortunately, Tali
000C0Fr 3                               ; Forth has just the word we need for this:
000C0Fr 3  20 rr rr                     jsr xt_minus_leading    ; -LEADING ( addr u )
000C12r 3               
000C12r 3                               ; The main part we can turn over to PARSE-NAME, except that we
000C12r 3                               ; have a string ( addr u ) and not stuff in the input buffer.
000C12r 3                               ; We get around this by cheating: We place ( addr u ) in the
000C12r 3                               ; input buffer and then call PARSE-NAME.
000C12r 3  20 rr rr                     jsr xt_input_to_r       ; save old imput state
000C15r 3               
000C15r 3  B5 00                        lda 0,x         ; u is new ciblen
000C17r 3  85 rr                        sta ciblen
000C19r 3  B5 01                        lda 1,x
000C1Br 3  85 rr                        sta ciblen+1
000C1Dr 3               
000C1Dr 3  B5 02                        lda 2,x         ; addr is new cib
000C1Fr 3  85 rr                        sta cib
000C21r 3  B5 03                        lda 3,x
000C23r 3  85 rr                        sta cib+1
000C25r 3               
000C25r 3  64 rr                        stz toin        ; >IN pointer is zero
000C27r 3  64 rr                        stz toin+1
000C29r 3               
000C29r 3                               ; PARSE-NAME gives us back the substring of the first word
000C29r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u addr-s u-s )
000C2Cr 3               
000C2Cr 3                               ; If we were given an empty string, then we're done. It's the
000C2Cr 3                               ; resposibility of the user to catch this as a sign to end the
000C2Cr 3                               ; any loop
000C2Cr 3  B5 00                        lda 0,x
000C2Er 3  15 01                        ora 1,x
000C30r 3  F0 23                        beq @done
000C32r 3               
000C32r 3                               ; Now we have to adjust the original string
000C32r 3  B5 04                        lda 4,x         ; LSB of original u
000C34r 3  38                           sec
000C35r 3  F5 00                        sbc 0,x
000C37r 3  95 04                        sta 4,x
000C39r 3               
000C39r 3  B5 05                        lda 5,x         ; MSB of original u
000C3Br 3  F5 01                        sbc 1,x
000C3Dr 3  95 05                        sta 5,x
000C3Fr 3               
000C3Fr 3  B5 06                        lda 6,x         ; LSB of original addr
000C41r 3  18                           clc
000C42r 3  75 00                        adc 0,x
000C44r 3  95 06                        sta 6,x
000C46r 3               
000C46r 3  B5 07                        lda 7,x         ; MSB of original addr
000C48r 3  75 01                        adc 1,x
000C4Ar 3  95 07                        sta 7,x
000C4Cr 3               
000C4Cr 3                               ; There is one small problem: PARSE-NAME will probably have
000C4Cr 3                               ; left the string with the rest of the words with leading
000C4Cr 3                               ; delimiters. We use our magic -LEADING again
000C4Cr 3  20 rr rr                     jsr xt_two_swap         ; ( addr-s u-s addr u )
000C4Fr 3  20 rr rr                     jsr xt_minus_leading
000C52r 3  20 rr rr                     jsr xt_two_swap         ; ( addr u addr-s u-s )
000C55r 3               @done:
000C55r 3                               ; Restore input
000C55r 3  20 rr rr                     jsr xt_r_to_input
000C58r 3               
000C58r 3  60           z_cleave:       rts
000C59r 3               
000C59r 3               
000C59r 3               
000C59r 3               ; ## CMOVE ( addr1 addr2 u -- ) "Copy bytes going from low to high"
000C59r 3               ; ## "cmove"  auto  ANS string
000C59r 3                       ; """https://forth-standard.org/standard/string/CMOVE
000C59r 3                       ; Copy u bytes from addr1 to addr2, going low to high (addr2 is
000C59r 3                       ; larger than addr1). Based on code in Leventhal, Lance A.
000C59r 3                       ; "6502 Assembly Language Routines", p. 201, where it is called
000C59r 3                       ; "move left".
000C59r 3                       ;
000C59r 3                       ; There are no official tests for this word.
000C59r 3                       ; """
000C59r 3               
000C59r 3               xt_cmove:
000C59r 3  20 rr rr                     jsr underflow_3
000C5Cr 3               
000C5Cr 3                               ; move destination address to where we can work with it
000C5Cr 3  B5 02                        lda 2,x
000C5Er 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000C60r 3  B5 03                        lda 3,x
000C62r 3  85 rr                        sta tmp2+1
000C64r 3               
000C64r 3                               ; move source address to where we can work with it
000C64r 3  B5 04                        lda 4,x
000C66r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000C68r 3  B5 05                        lda 5,x
000C6Ar 3  85 rr                        sta tmp1+1
000C6Cr 3               
000C6Cr 3  A0 00                        ldy #0
000C6Er 3  B5 01                        lda 1,x         ; number of whole pages to move
000C70r 3  F0 0F                        beq @dopartial
000C72r 3               
000C72r 3               @page:
000C72r 3  B1 rr                        lda (tmp1),y
000C74r 3  91 rr                        sta (tmp2),y
000C76r 3  C8                           iny
000C77r 3  D0 F9                        bne @page
000C79r 3               
000C79r 3  E6 rr                        inc tmp1+1
000C7Br 3  E6 rr                        inc tmp2+1
000C7Dr 3  D6 01                        dec 1,x
000C7Fr 3  D0 F1                        bne @page
000C81r 3               
000C81r 3               @dopartial:
000C81r 3  B5 00                        lda 0,x         ; length of last page
000C83r 3  F0 09                        beq @done
000C85r 3               
000C85r 3               @partial:
000C85r 3  B1 rr                        lda (tmp1),y
000C87r 3  91 rr                        sta (tmp2),y
000C89r 3  C8                           iny
000C8Ar 3               
000C8Ar 3  D6 00                        dec 0,x
000C8Cr 3  D0 F7                        bne @partial
000C8Er 3               
000C8Er 3               @done:          ; clear the stack
000C8Er 3  8A                           txa
000C8Fr 3  18                           clc
000C90r 3  69 06                        adc #6
000C92r 3  AA                           tax
000C93r 3               
000C93r 3  60           z_cmove:        rts
000C94r 3               
000C94r 3               
000C94r 3               
000C94r 3               ; ## CMOVE_UP ( add1 add2 u -- ) "Copy bytes from high to low"
000C94r 3               ; ## "cmove>"  auto  ANS string
000C94r 3                       ; """https://forth-standard.org/standard/string/CMOVEtop
000C94r 3                       ; Based on code in Leventhal, Lance A. "6502 Assembly Language
000C94r 3                       ; Routines", p. 201, where it is called "move right".
000C94r 3                       ;
000C94r 3                       ; There are no official tests for this word.
000C94r 3                       ; """
000C94r 3               
000C94r 3               xt_cmove_up:
000C94r 3  20 rr rr                     jsr underflow_3
000C97r 3               
000C97r 3                               ; Move destination address to where we can work with it
000C97r 3  B5 02                        lda 2,x
000C99r 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000C9Br 3  B5 03                        lda 3,x
000C9Dr 3  18                           clc
000C9Er 3  75 01                        adc 1,x
000CA0r 3  85 rr                        sta tmp2+1      ; point to last page of destination
000CA2r 3               
000CA2r 3                               ; Move source address to where we can work with it
000CA2r 3  B5 04                        lda 4,x
000CA4r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000CA6r 3  B5 05                        lda 5,x
000CA8r 3  18                           clc
000CA9r 3  75 01                        adc 1,x
000CABr 3  85 rr                        sta tmp1+1      ; point to last page of source
000CADr 3  F6 01                        inc 1,x         ; allows us to use bne with dec 1,x below
000CAFr 3               
000CAFr 3                               ; Move the last partial page first
000CAFr 3  B4 00                        ldy 0,x         ; length of last page
000CB1r 3  F0 0E                        beq @nopartial
000CB3r 3               
000CB3r 3               @outerloop:
000CB3r 3  88                           dey
000CB4r 3  F0 07                        beq @finishpage
000CB6r 3               
000CB6r 3               @innerloop:
000CB6r 3  B1 rr                        lda (tmp1),y
000CB8r 3  91 rr                        sta (tmp2),y
000CBAr 3  88                           dey
000CBBr 3  D0 F9                        bne @innerloop
000CBDr 3               
000CBDr 3               @finishpage:
000CBDr 3  B2 rr                        lda (tmp1)      ; handle y = 0 separately
000CBFr 3  92 rr                        sta (tmp2)
000CC1r 3               
000CC1r 3               @nopartial:
000CC1r 3  C6 rr                        dec tmp1+1      ; back up to previous pages
000CC3r 3  C6 rr                        dec tmp2+1
000CC5r 3  D6 01                        dec 1,x
000CC7r 3  D0 EA                        bne @outerloop
000CC9r 3               @done:
000CC9r 3                               ; clear up the stack and leave
000CC9r 3  8A                           txa
000CCAr 3  18                           clc
000CCBr 3  69 06                        adc #6
000CCDr 3  AA                           tax
000CCEr 3               
000CCEr 3  60           z_cmove_up:     rts
000CCFr 3               
000CCFr 3               
000CCFr 3               
000CCFr 3               ; ## COLON ( "name" -- ) "Start compilation of a new word"
000CCFr 3               ; ## ":"  auto  ANS core
000CCFr 3                       ; """https://forth-standard.org/standard/core/Colon
000CCFr 3                       ;
000CCFr 3                       ; Use the CREATE routine and fill in the rest by hand.
000CCFr 3                       ; """
000CCFr 3               
000CCFr 3               xt_colon:
000CCFr 3                               ; If we're already in the compile state, complain
000CCFr 3                               ; and quit
000CCFr 3  A5 rr                        lda state
000CD1r 3  05 rr                        ora state+1
000CD3r 3  F0 05                        beq @1
000CD5r 3               
000CD5r 3  A9 07                        lda #err_state
000CD7r 3  4C rr rr                     jmp error
000CDAr 3               @1:
000CDAr 3                               ; switch to compile state
000CDAr 3  C6 rr                        dec state
000CDCr 3  C6 rr                        dec state+1
000CDEr 3               
000CDEr 3                               ; Set bit 6 in status to tell ";" and RECURSE this is a normal
000CDEr 3                               ; word
000CDEr 3  A9 40                        lda #%01000000
000CE0r 3  04 rr                        tsb status
000CE2r 3               
000CE2r 3                               ; CREATE is going to change the DP to point to the new word's
000CE2r 3                               ; header. While this is fine for (say) variables, it would mean
000CE2r 3                               ; that FIND-NAME etc would find a half-finished word when
000CE2r 3                               ; looking in the Dictionary. To prevent this, we save the old
000CE2r 3                               ; version of DP and restore it later. The new DP is placed in
000CE2r 3                               ; the variable WORKWORD until we're finished with a SEMICOLON.
000CE2r 3  20 rr rr                     jsr current_to_dp
000CE5r 3  A5 rr                        lda dp+1            ; CREATE uses a lot of variables
000CE7r 3  48                           pha
000CE8r 3  A5 rr                        lda dp
000CEAr 3  48                           pha
000CEBr 3               
000CEBr 3                               ; Tell create not to print warning for duplicate name.
000CEBr 3  A9 80                        lda #%10000000
000CEDr 3  04 rr                        tsb status
000CEFr 3               
000CEFr 3  20 rr rr                     jsr xt_create
000CF2r 3               
000CF2r 3                               ; Get the nt (not the xt!) of the new word as described above.
000CF2r 3                               ; Only COLON, SEMICOLON and RECURSE get to access WORKWORD
000CF2r 3  20 rr rr                     jsr current_to_dp   ; This might be able to be omitted
000CF5r 3  A5 rr                        lda dp
000CF7r 3  85 rr                        sta workword
000CF9r 3  A5 rr                        lda dp+1
000CFBr 3  85 rr                        sta workword+1
000CFDr 3               
000CFDr 3                               ; Restore original DP
000CFDr 3  68                           pla
000CFEr 3  85 rr                        sta dp
000D00r 3  68                           pla
000D01r 3  85 rr                        sta dp+1
000D03r 3  20 rr rr                     jsr dp_to_current
000D06r 3               
000D06r 3                               ; CREATE includes a subroutine jump to DOVAR by default. We
000D06r 3                               ; back up three bytes and overwrite that.
000D06r 3  A5 rr                        lda cp
000D08r 3  38                           sec
000D09r 3  E9 03                        sbc #3
000D0Br 3  85 rr                        sta cp
000D0Dr 3  B0 02                        bcs @done
000D0Fr 3  C6 rr                        dec cp+1
000D11r 3               @done:
000D11r 3  60           z_colon:        rts
000D12r 3               
000D12r 3               
000D12r 3               ; ## COLON_NONAME ( -- ) "Start compilation of a new word""
000D12r 3               ; ## ":NONAME"  auto  ANS core
000D12r 3                       ; """https://forth-standard.org/standard/core/ColonNONAME
000D12r 3                       ; Compile a word with no nt.  ";" will put its xt on the stack.
000D12r 3                       ; """
000D12r 3               
000D12r 3               xt_colon_noname:
000D12r 3                               ; If we're already in the compile state, complain
000D12r 3                               ; and quit
000D12r 3  A5 rr                        lda state
000D14r 3  05 rr                        ora state+1
000D16r 3  F0 05                        beq @1
000D18r 3               
000D18r 3  A9 07                        lda #err_state
000D1Ar 3  4C rr rr                     jmp error
000D1Dr 3               @1:
000D1Dr 3                               ; switch to compile state
000D1Dr 3  C6 rr                        dec state
000D1Fr 3  C6 rr                        dec state+1
000D21r 3               
000D21r 3                               ; Clear bit 6 in status to tell ";" and RECURSE this is
000D21r 3                               ; a :NONAME word.
000D21r 3  A9 40                        lda #%01000000
000D23r 3  14 rr                        trb status
000D25r 3               
000D25r 3                               ; Put cp (the xt for this word) in WORKWORD. The flag above
000D25r 3                               ; lets both ";" and RECURSE know that is is an xt instead of an
000D25r 3                               ; nt and they will modify their behavior.
000D25r 3  A5 rr                        lda cp
000D27r 3  85 rr                        sta workword
000D29r 3  A5 rr                        lda cp+1
000D2Br 3  85 rr                        sta workword+1
000D2Dr 3               @done:
000D2Dr 3  60           z_colon_noname:        rts
000D2Er 3               
000D2Er 3               
000D2Er 3               
000D2Er 3               ; ## COMMA ( n -- ) "Allot and store one cell in memory"
000D2Er 3               ; ## ","  auto  ANS core
000D2Er 3                       ; """https://forth-standard.org/standard/core/Comma
000D2Er 3                       ; Store TOS at current place in memory.
000D2Er 3                       ;
000D2Er 3                       ; Since this an eight-bit machine, we can ignore all alignment issues.
000D2Er 3                       ; """
000D2Er 3               
000D2Er 3               xt_comma:
000D2Er 3  20 rr rr                     jsr underflow_1
000D31r 3               
000D31r 3  B5 00                        lda 0,x
000D33r 3  92 rr                        sta (cp)
000D35r 3               
000D35r 3  E6 rr                        inc cp
000D37r 3  D0 02                        bne @1
000D39r 3  E6 rr                        inc cp+1
000D3Br 3               @1:
000D3Br 3  B5 01                        lda 1,x
000D3Dr 3  92 rr                        sta (cp)
000D3Fr 3               
000D3Fr 3  E6 rr                        inc cp
000D41r 3  D0 02                        bne @done
000D43r 3  E6 rr                        inc cp+1
000D45r 3               @done:
000D45r 3  E8                           inx
000D46r 3  E8                           inx
000D47r 3               
000D47r 3  60           z_comma:        rts
000D48r 3               
000D48r 3               
000D48r 3               
000D48r 3               ; ## COMPARE ( addr1 u1 addr2 u2 -- -1 | 0 | 1) "Compare two strings"
000D48r 3               ; ## "compare"   auto  ANS string
000D48r 3                       ; """https://forth-standard.org/standard/string/COMPARE
000D48r 3                       ; Compare string1 (denoted by addr1 u1) to string2 (denoted by
000D48r 3                       ; addr2 u2).  Return -1 if string1 < string2, 0 if string1 = string2
000D48r 3                       ; and 1 if string1 > string2 (ASCIIbetical comparison).  A string
000D48r 3                       ; that entirely matches the beginning of the other string, but is
000D48r 3                       ; shorter, is considered less than the longer string.
000D48r 3                       ; """
000D48r 3               
000D48r 3               xt_compare:
000D48r 3  20 rr rr                     jsr underflow_4
000D4Br 3               
000D4Br 3                               ; Load the two string addresses into tmp1 and tmp2.
000D4Br 3  B5 02                        lda 2,x
000D4Dr 3  85 rr                        sta tmp2
000D4Fr 3  B5 03                        lda 3,x
000D51r 3  85 rr                        sta tmp2+1
000D53r 3  B5 06                        lda 6,x
000D55r 3  85 rr                        sta tmp1
000D57r 3  B5 07                        lda 7,x
000D59r 3  85 rr                        sta tmp1+1
000D5Br 3                               ; The counts will be used in-place on the stack.
000D5Br 3               
000D5Br 3               @compare_loop:
000D5Br 3                               ; Check to see if we are out of letters.
000D5Br 3               
000D5Br 3                               ; Check string1
000D5Br 3  B5 04                        lda 4,x
000D5Dr 3  15 05                        ora 5,x
000D5Fr 3  F0 2C                        beq @str1_done
000D61r 3               
000D61r 3                               ; Check string2
000D61r 3  B5 00                        lda 0,x
000D63r 3  15 01                        ora 1,x
000D65r 3  F0 3A                        beq @greater    ; Str2 empty first
000D67r 3               
000D67r 3               @check_letter:
000D67r 3                               ; Both strings have at least one letter left.
000D67r 3                               ; Check the letters against each other.
000D67r 3  B2 rr                        lda (tmp1)
000D69r 3  D2 rr                        cmp (tmp2)
000D6Br 3  90 26                        bcc @less
000D6Dr 3  D0 32                        bne @greater
000D6Fr 3               @next_letter:
000D6Fr 3                               ; Move both tmp pointers and decrement the counts
000D6Fr 3                               ; on the stack.
000D6Fr 3                               ; Increment tmp1
000D6Fr 3  E6 rr                        inc tmp1
000D71r 3  D0 02                        bne @1
000D73r 3  E6 rr                        inc tmp1+1
000D75r 3               @1:
000D75r 3                               ; Increment tmp2
000D75r 3  E6 rr                        inc tmp2
000D77r 3  D0 02                        bne @2
000D79r 3  E6 rr                        inc tmp2+1
000D7Br 3               @2:
000D7Br 3                               ; Decrement count1 on the stack.
000D7Br 3  B5 04                        lda 4,x
000D7Dr 3  D0 02                        bne @3
000D7Fr 3  D6 05                        dec 5,x
000D81r 3               @3:
000D81r 3  D6 04                        dec 4,x
000D83r 3               
000D83r 3                               ; Decrement count2 on the stack.
000D83r 3  B5 00                        lda 0,x
000D85r 3  D0 02                        bne @4
000D87r 3  D6 01                        dec 1,x
000D89r 3               @4:
000D89r 3  D6 00                        dec 0,x
000D8Br 3               
000D8Br 3                               ; Loop around and check again.
000D8Br 3  80 CE                        bra @compare_loop
000D8Dr 3               
000D8Dr 3               @str1_done:
000D8Dr 3                               ; String 1 is out of letters. Check string 2.
000D8Dr 3  B5 00                        lda 0,x
000D8Fr 3  15 01                        ora 1,x
000D91r 3  F0 08                        beq @equal      ; Both out of letters
000D93r 3               
000D93r 3                               ; Falls into less (str1 is out but str2 has more)
000D93r 3               @less:
000D93r 3                               ; Return -1
000D93r 3  A9 FF                        lda #$FF
000D95r 3  95 06                        sta 6,x
000D97r 3  95 07                        sta 7,x
000D99r 3  80 0C                        bra @done
000D9Br 3               @equal:
000D9Br 3                               ; Return 0
000D9Br 3  74 06                        stz 6,x
000D9Dr 3  74 07                        stz 7,x
000D9Fr 3  80 06                        bra @done
000DA1r 3               @greater:
000DA1r 3                               ; Return 1
000DA1r 3  A9 01                        lda #1
000DA3r 3  95 06                        sta 6,x
000DA5r 3  74 07                        stz 7,x
000DA7r 3                               ; Falls into @done
000DA7r 3               @done:
000DA7r 3                               ; Remove all but the result from the stack.
000DA7r 3  8A                           txa
000DA8r 3  18                           clc
000DA9r 3  69 06                        adc #6
000DABr 3  AA                           tax
000DACr 3               
000DACr 3  60           z_compare:      rts
000DADr 3               
000DADr 3               
000DADr 3               
000DADr 3               ; ## COMPILE_COMMA ( xt -- ) "Compile xt"
000DADr 3               ; ## "compile,"  auto  ANS core ext
000DADr 3                       ; """https://forth-standard.org/standard/core/COMPILEComma
000DADr 3                       ; Compile the given xt in the current word definition. It is an
000DADr 3                       ; error if we are not in the compile state. Because we are using
000DADr 3                       ; subroutine threading, we can't use , (COMMA) to compile new words
000DADr 3                       ; the traditional way. By default, native compiled is allowed, unless
000DADr 3                       ; there is a NN (Never Native) flag associated. If not, we use the
000DADr 3                       ; value NC_LIMIT (from definitions.tasm) to decide if the code
000DADr 3                       ; is too large to be natively coded: If the size is larger than
000DADr 3                       ; NC_LIMIT, we silently use subroutine coding. If the AN (Always
000DADr 3                       ; Native) flag is set, the word is always natively compiled.
000DADr 3                       ; """
000DADr 3               
000DADr 3               xt_compile_comma:
000DADr 3  20 rr rr                     jsr underflow_1
000DB0r 3               
000DB0r 3                               ; See if this is an Always Native (AN) word by checking the
000DB0r 3                               ; AN flag. We need nt for this. First, save a copy of xt to
000DB0r 3                               ; the Return Stack
000DB0r 3  B5 01                        lda 1,x                 ; MSB
000DB2r 3  48                           pha
000DB3r 3  B5 00                        lda 0,x
000DB5r 3  48                           pha                     ; LSB
000DB6r 3               
000DB6r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt -- nt )
000DB9r 3               
000DB9r 3                               ; See if this xt even has an nt.
000DB9r 3  B5 00                        lda 0,x
000DBBr 3  15 01                        ora 1,x
000DBDr 3  D0 03                        bne @check_nt
000DBFr 3               
000DBFr 3                               ; No nt in dictionary. Just compile as a JSR.
000DBFr 3  4C rr rr                     jmp @compile_as_jump
000DC2r 3               
000DC2r 3               @check_nt:
000DC2r 3                               ; put nt away for safe keeping
000DC2r 3  B5 00                        lda 0,x
000DC4r 3  85 rr                        sta tmptos
000DC6r 3  B5 01                        lda 1,x
000DC8r 3  85 rr                        sta tmptos+1
000DCAr 3               
000DCAr 3                               ; status byte is one further down
000DCAr 3  F6 00                        inc 0,x
000DCCr 3  D0 02                        bne @1
000DCEr 3  F6 01                        inc 1,x                 ; ( nt -- nt+1 )
000DD0r 3               @1:
000DD0r 3  A1 00                        lda (0,x)
000DD2r 3  85 rr                        sta tmp3                ; keep copy of status byte for NN
000DD4r 3  29 02                        and #AN                 ; mask all but Always Native (AN) bit
000DD6r 3  F0 0D                        beq @compile_check
000DD8r 3               
000DD8r 3                               ; We're natively compiling no matter what. Get length and
000DD8r 3                               ; compile in code. Get the original nt back
000DD8r 3  A5 rr                        lda tmptos
000DDAr 3  95 00                        sta 0,x
000DDCr 3  A5 rr                        lda tmptos+1
000DDEr 3  95 01                        sta 1,x
000DE0r 3               
000DE0r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000DE3r 3               
000DE3r 3  80 27                        bra @compile_as_code
000DE5r 3               
000DE5r 3               @compile_check:
000DE5r 3                               ; See if Native Compile is even alowed by checking the NN
000DE5r 3                               ; flag
000DE5r 3  A5 rr                        lda tmp3
000DE7r 3  29 08                        and #NN
000DE9r 3  F0 03                        beq @check_size_limit
000DEBr 3               
000DEBr 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000DEEr 3               
000DEEr 3               @check_size_limit:
000DEEr 3                               ; Native compile is a legal option, but we need to see what
000DEEr 3                               ; limit the user set for size (in nc_limit)
000DEEr 3  A5 rr                        lda tmptos
000DF0r 3  95 00                        sta 0,x
000DF2r 3  A5 rr                        lda tmptos+1
000DF4r 3  95 01                        sta 1,x
000DF6r 3               
000DF6r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000DF9r 3               
000DF9r 3                               ; Check the wordsize MSB against the user-defined limit.
000DF9r 3  B5 01                        lda 1,x
000DFBr 3  C5 rr                        cmp nc_limit+1
000DFDr 3  90 0D                        bcc @compile_as_code    ; user-defined limit MSB
000DFFr 3  D0 08                        bne @jumpto_compile_as_jump
000E01r 3               
000E01r 3                               ; Check the wordsize LSB against the user-defined limit.
000E01r 3  B5 00                        lda 0,x
000E03r 3  C5 rr                        cmp nc_limit            ; user-defined limit LSB
000E05r 3  90 05                        bcc @compile_as_code    ; Allow native compiling for less
000E07r 3  F0 03                        beq @compile_as_code    ; than or equal to the limit.
000E09r 3               
000E09r 3               @jumpto_compile_as_jump:
000E09r 3                               ; If the wordsize is greater than the user-defined
000E09r 3                               ; limit, it will be compiled as a subroutine jump.
000E09r 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000E0Cr 3               
000E0Cr 3               @compile_as_code:
000E0Cr 3                               ; We arrive here with the length of the word's code TOS and
000E0Cr 3                               ; xt on top of the Return Stack. MOVE will need ( xt cp u )
000E0Cr 3                               ; on the data stack
000E0Cr 3  CA                           dex
000E0Dr 3  CA                           dex                     ; ( -- u ? )
000E0Er 3  CA                           dex
000E0Fr 3  CA                           dex                     ; ( -- u ? ? )
000E10r 3               
000E10r 3  B5 04                        lda 4,x
000E12r 3  95 00                        sta 0,x                 ; LSB of u
000E14r 3  B5 05                        lda 5,x
000E16r 3  95 01                        sta 1,x                 ; ( -- u ? u )
000E18r 3               
000E18r 3  68                           pla
000E19r 3  95 04                        sta 4,x                 ; LSB of xt
000E1Br 3  68                           pla
000E1Cr 3  95 05                        sta 5,x                 ; ( -- xt ? u )
000E1Er 3               
000E1Er 3  A5 rr                        lda cp                  ; LSB of cp
000E20r 3  95 02                        sta 2,x
000E22r 3  A5 rr                        lda cp+1
000E24r 3  95 03                        sta 3,x                 ; ( -- xt cp u )
000E26r 3               
000E26r 3                               ; --- SPECIAL CASE 1: PREVENT RETURN STACK THRASHINIG ---
000E26r 3               
000E26r 3                               ; Native compiling allows us to strip the stack antics off
000E26r 3                               ; a number of words that use the Return Stack such as >R, R>,
000E26r 3                               ; 2>R and 2R> (but not 2R@ in this version). We compare the
000E26r 3                               ; xt with the contents of the table
000E26r 3  A0 00                        ldy #0
000E28r 3               
000E28r 3               @strip_loop:
000E28r 3  B9 rr rr                     lda @strip_table,y      ; LSB of first word
000E2Br 3  D5 04                        cmp 4,x                 ; LSB of xt
000E2Dr 3  D0 07                        bne @next_entry
000E2Fr 3               
000E2Fr 3                               ; LSB is the same, test MSB
000E2Fr 3  B9 rr rr                     lda @strip_table+1,y
000E32r 3  D5 05                        cmp 5,x
000E34r 3  F0 0C                        beq @found_entry
000E36r 3               
000E36r 3                               ; MSB is not equal. Pretend though that we've come from LSB
000E36r 3                               ; so we can use the next step for both cases
000E36r 3               @next_entry:
000E36r 3                               ; Not a word that needs stripping, so check next entry in table
000E36r 3                               ; Let's see if we're done with the table (marked by zero entry)
000E36r 3  B9 rr rr                     lda @strip_table,y      ; pointing to LSB
000E39r 3  19 rr rr                     ora @strip_table+1,y    ; get MSB
000E3Cr 3  F0 22                        beq @underflow_strip    ; table done, let's get out of here
000E3Er 3               
000E3Er 3  C8                           iny
000E3Fr 3  C8                           iny
000E40r 3  80 E6                        bra @strip_loop
000E42r 3               @found_entry:
000E42r 3                               ; This word is one of the ones that needs to have its size
000E42r 3                               ; adjusted during native compile. We find the values in the
000E42r 3                               ; next table with the same index, which is Y. However, Y is
000E42r 3                               ; pointing to the MSB, so we need to go back to the LSB and
000E42r 3                               ; halve the index before we can use it.
000E42r 3  98                           tya
000E43r 3  4A                           lsr
000E44r 3  A8                           tay
000E45r 3               
000E45r 3                               ; Get the adjustment out of the size table. We were clever
000E45r 3                               ; enough to make sure the cut on both ends of the code is
000E45r 3                               ; is the same size.
000E45r 3  B9 rr rr                     lda @strip_size,y
000E48r 3  85 rr                        sta tmptos              ; save a copy
000E4Ar 3               
000E4Ar 3                               ; Adjust xt: Start later
000E4Ar 3  18                           clc
000E4Br 3  75 04                        adc 4,x
000E4Dr 3  95 04                        sta 4,x
000E4Fr 3  90 02                        bcc @2
000E51r 3  F6 05                        inc 5,x                 ; we just care about the carry
000E53r 3               @2:
000E53r 3               
000E53r 3                               ; Adjust u: Quit earlier. Since we cut off the top and the
000E53r 3                               ; bottom of the code, we have to double the value
000E53r 3  06 rr                        asl tmptos
000E55r 3               
000E55r 3  38                           sec
000E56r 3  B5 00                        lda 0,x
000E58r 3  E5 rr                        sbc tmptos
000E5Ar 3  95 00                        sta 0,x
000E5Cr 3  B0 02                        bcs @3
000E5Er 3  D6 01                        dec 1,x                 ; we just care about the borrow
000E60r 3               @3:
000E60r 3                               ; drop through to underflow check stripping
000E60r 3               
000E60r 3               @underflow_strip:
000E60r 3                               ; --- SPECIAL CASE 2: REMOVE UNDERFLOW CHECKING ---
000E60r 3               
000E60r 3                               ; The user can choose to remove the unterflow testing in those
000E60r 3                               ; words that have the UF flag. This shortens the word by
000E60r 3                               ; 3 bytes if there is no underflow.
000E60r 3               
000E60r 3                               ; See if the user wants underflow stripping turned on
000E60r 3  A5 rr                        lda uf_strip
000E62r 3  05 rr                        ora uf_strip+1
000E64r 3  F0 1C                        beq @specials_done
000E66r 3               
000E66r 3                               ; See if this word even contains underflow checking
000E66r 3  A5 rr                        lda tmp3
000E68r 3  29 10                        and #UF
000E6Ar 3  F0 16                        beq @specials_done
000E6Cr 3               
000E6Cr 3                               ; If we arrived here, underflow has to go. It's always 3 bytes
000E6Cr 3                               ; long. Note hat PICK is a special case.
000E6Cr 3               
000E6Cr 3                               ; Adjust xt: Start later
000E6Cr 3  18                           clc
000E6Dr 3  B5 04                        lda 4,x
000E6Fr 3  69 03                        adc #3
000E71r 3  95 04                        sta 4,x
000E73r 3  90 02                        bcc @4
000E75r 3  F6 05                        inc 5,x                  ; we just care about the carry
000E77r 3               @4:
000E77r 3                               ; Adjust u: End earlier
000E77r 3  38                           sec
000E78r 3  B5 00                        lda 0,x
000E7Ar 3  E9 03                        sbc #3
000E7Cr 3  95 00                        sta 0,x
000E7Er 3  B0 02                        bcs @5
000E80r 3  D6 01                        dec 1,x                  ; we just care about the borrow
000E82r 3               @5:
000E82r 3               
000E82r 3                               ; --- END OF SPECIAL CASES ---
000E82r 3               @specials_done:
000E82r 3                               ; Store size of area to be copied for calculation of
000E82r 3                               ; new CP. We have to do this after all of the special cases
000E82r 3                               ; because they might change the size
000E82r 3  B5 01                        lda 1,x                 ; MSB
000E84r 3  48                           pha
000E85r 3  B5 00                        lda 0,x                 ; LSB
000E87r 3  48                           pha
000E88r 3               
000E88r 3                               ; Enough of this, let's move those bytes already! We have
000E88r 3                               ; ( xt cp u ) on the stack at this point
000E88r 3  20 rr rr                     jsr xt_move
000E8Br 3               
000E8Br 3                               ; Update CP
000E8Br 3  18                           clc
000E8Cr 3  68                           pla                     ; LSB
000E8Dr 3  65 rr                        adc cp
000E8Fr 3  85 rr                        sta cp
000E91r 3               
000E91r 3  68                           pla                     ; MSB
000E92r 3  65 rr                        adc cp+1
000E94r 3  85 rr                        sta cp+1
000E96r 3               
000E96r 3  80 2C                        bra @done
000E98r 3               
000E98r 3               @strip_table:
000E98r 3                              ; List of words we strip the Return Stack antics from
000E98r 3                              ; during native compile, zero terminated. The index here
000E98r 3                              ; must be the same as for the sizes
000E98r 3  rr rr rr rr                  .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
000E9Cr 3  rr rr        
000E9Er 3  rr rr rr rr                  .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
000EA2r 3  00 00        
000EA4r 3               
000EA4r 3               @strip_size:
000EA4r 3                               ; List of bytes to be stripped from the words that get their
000EA4r 3                               ; Return Stack antics removed during native compile. Index must
000EA4r 3                               ; be the same as for the xts. Zero terminated.
000EA4r 3  04 04 04 06                  .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
000EA8r 3  06 00        
000EAAr 3               
000EAAr 3               @compile_as_jump:
000EAAr 3                               ; Compile xt as a subroutine jump
000EAAr 3  A9 20                        lda #$20
000EACr 3  92 rr                        sta (cp)
000EAEr 3               
000EAEr 3  A0 01                        ldy #1
000EB0r 3  68                           pla             ; LSB
000EB1r 3  91 rr                        sta (cp),y
000EB3r 3  C8                           iny
000EB4r 3  68                           pla             ; MSB
000EB5r 3  91 rr                        sta (cp),y
000EB7r 3               
000EB7r 3                               ; allot space we just used
000EB7r 3  A9 03                        lda #3
000EB9r 3  18                           clc
000EBAr 3  65 rr                        adc cp
000EBCr 3  85 rr                        sta cp
000EBEr 3  90 02                        bcc @6
000EC0r 3  E6 rr                        inc cp+1
000EC2r 3               @6:
000EC2r 3  E8                           inx             ; drop xt
000EC3r 3  E8                           inx
000EC4r 3               @done:
000EC4r 3               z_compile_comma:
000EC4r 3  60                           rts
000EC5r 3               
000EC5r 3               
000EC5r 3               
000EC5r 3               ; ## COMPILE_ONLY ( -- ) "Mark most recent word as COMPILE-ONLY"
000EC5r 3               ; ## "compile-only"  tested  Tali Forth
000EC5r 3                       ; """Set the Compile Only flag (CO) of the most recently defined
000EC5r 3                       ; word.
000EC5r 3                       ;
000EC5r 3                       ; The alternative way to do this is to define a word
000EC5r 3                       ; ?COMPILE that makes sure  we're in compile mode
000EC5r 3                       ; """
000EC5r 3               
000EC5r 3               xt_compile_only:
000EC5r 3  20 rr rr                     jsr current_to_dp
000EC8r 3  A0 01                        ldy #1          ; offset for status byte
000ECAr 3  B1 rr                        lda (dp),y
000ECCr 3  09 01                        ora #CO        ; make sure bit 7 is set
000ECEr 3  91 rr                        sta (dp),y
000ED0r 3               
000ED0r 3  60           z_compile_only: rts
000ED1r 3               
000ED1r 3               
000ED1r 3               
000ED1r 3               ; ## CONSTANT ( n "name" -- ) "Define a constant"
000ED1r 3               ; ## "constant"  auto  ANS core
000ED1r 3                       ; """https://forth-standard.org/standard/core/CONSTANT
000ED1r 3                       ;
000ED1r 3                       ; Forth equivalent is  CREATE , DOES> @  but we do
000ED1r 3                       ; more in assembler and let CREATE do the heavy lifting.
000ED1r 3                       ; See http://www.bradrodriguez.com/papers/moving3.htm for
000ED1r 3                       ; a primer on how this works in various Forths. This is the
000ED1r 3                       ; same code as VALUE in our case.
000ED1r 3                       ; """
000ED1r 3               xt_value:
000ED1r 3               xt_constant:
000ED1r 3  20 rr rr                     jsr underflow_1
000ED4r 3               
000ED4r 3  20 rr rr                     jsr xt_create
000ED7r 3               
000ED7r 3                           	; CREATE by default installs a subroutine jump to DOVAR,
000ED7r 3                               ; but we want DOCONST for constants. Go back two bytes and
000ED7r 3                               ; replace the subroutine jump target
000ED7r 3  38                           sec
000ED8r 3  A5 rr                        lda cp
000EDAr 3  E9 02                        sbc #2
000EDCr 3  85 rr                        sta tmp1
000EDEr 3  A5 rr                        lda cp+1
000EE0r 3  E9 00                        sbc #0
000EE2r 3  85 rr                        sta tmp1+1
000EE4r 3               
000EE4r 3  A9 rr                        lda #<doconst           ; LSB of DOCONST
000EE6r 3  92 rr                        sta (tmp1)
000EE8r 3  A0 01                        ldy #1
000EEAr 3  A9 rr                        lda #>doconst           ; MSB of DOCONST
000EECr 3  91 rr                        sta (tmp1),y
000EEEr 3               
000EEEr 3                               ; Now we save the constant number itself in the next cell
000EEEr 3  20 rr rr                     jsr xt_comma            ; drop through to adjust_z
000EF1r 3               
000EF1r 3               adjust_z:
000EF1r 3                               ; Now the length of the complete word (z_word) has increased by
000EF1r 3                               ; two. We need to update that number or else words such as SEE
000EF1r 3                               ; will ignore the PFA. We use this same routine for VARIABLE,
000EF1r 3                               ; VALUE and DEFER
000EF1r 3  20 rr rr                     jsr xt_latestnt         ; gives us ( -- nt )
000EF4r 3               
000EF4r 3                               ; z_word is six bytes further down
000EF4r 3  B5 00                        lda 0,x
000EF6r 3  85 rr                        sta tmp1
000EF8r 3  B5 01                        lda 1,x
000EFAr 3  85 rr                        sta tmp1+1
000EFCr 3               
000EFCr 3  A0 06                        ldy #6
000EFEr 3  B1 rr                        lda (tmp1),y
000F00r 3  18                           clc
000F01r 3  69 02                        adc #2
000F03r 3  91 rr                        sta (tmp1),y
000F05r 3  C8                           iny
000F06r 3  B1 rr                        lda (tmp1),y
000F08r 3  69 00                        adc #0                  ; only need carry
000F0Ar 3  91 rr                        sta (tmp1),y
000F0Cr 3               
000F0Cr 3  E8                           inx
000F0Dr 3  E8                           inx
000F0Er 3               
000F0Er 3               z_value:
000F0Er 3  60           z_constant:     rts
000F0Fr 3               
000F0Fr 3               
000F0Fr 3               ; ## COUNT ( c-addr -- addr u ) "Convert character string to normal format"
000F0Fr 3               ; ## "count"  auto  ANS core
000F0Fr 3                       ; """https://forth-standard.org/standard/core/COUNT
000F0Fr 3                       ; Convert old-style character string to address-length pair. Note
000F0Fr 3                       ; that the length of the string c-addr is stored in character length
000F0Fr 3                       ; (8 bit), not cell length (16 bit). This is rarely used these days,
000F0Fr 3                       ; though COUNT can also be used to step through a string character by
000F0Fr 3                       ; character.
000F0Fr 3                       ; """
000F0Fr 3               xt_count:
000F0Fr 3  20 rr rr                     jsr underflow_1
000F12r 3               
000F12r 3  A1 00                        lda (0,x)       ; Get number of characters (255 max)
000F14r 3  A8                           tay
000F15r 3               
000F15r 3                               ; move start address up by one
000F15r 3  F6 00                        inc 0,x         ; LSB
000F17r 3  D0 02                        bne @1
000F19r 3  F6 01                        inc 1,x         ; MSB
000F1Br 3               
000F1Br 3                               ; save number of characters to stack
000F1Br 3               @1:
000F1Br 3  98                           tya
000F1Cr 3  CA                           dex
000F1Dr 3  CA                           dex
000F1Er 3  95 00                        sta 0,x         ; LSB
000F20r 3  74 01                        stz 1,x         ; MSB, always zero
000F22r 3               
000F22r 3  60           z_count:        rts
000F23r 3               
000F23r 3               
000F23r 3               ; ## CR ( -- ) "Print a line feed"
000F23r 3               ; ## "cr"  auto  ANS core
000F23r 3                       ; """https://forth-standard.org/standard/core/CR"""
000F23r 3               xt_cr:
000F23r 3  A9 0A                        lda #AscLF
000F25r 3  20 rr rr                     jsr emit_a
000F28r 3  60           z_cr:           rts
000F29r 3               
000F29r 3               
000F29r 3               ; ## CREATE ( "name" -- ) "Create Dictionary entry for 'name'"
000F29r 3               ; ## "create"  auto  ANS core
000F29r 3                       ; """https://forth-standard.org/standard/core/CREATE
000F29r 3                       ;
000F29r 3                       ; See the drawing in headers.asm for details on the header
000F29r 3                       ; """
000F29r 3               
000F29r 3               xt_create:
000F29r 3                               ; get string
000F29r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
000F2Cr 3               
000F2Cr 3                               ; if we were given an empty string, we complain and quit
000F2Cr 3  B5 00                        lda 0,x
000F2Er 3  15 01                        ora 1,x
000F30r 3  D0 05                        bne @got_name
000F32r 3               
000F32r 3  A9 05                        lda #err_noname
000F34r 3  4C rr rr                     jmp error
000F37r 3               
000F37r 3               @got_name:
000F37r 3                               ; Enforce maximal length of string by overwriting the MSB of
000F37r 3                               ; the length. There is a possible error here: If the string
000F37r 3                               ; is exactly 255 chars long, then a lot of the following
000F37r 3                               ; additions will fail because of wrapping
000F37r 3  74 01                        stz 1,x
000F39r 3               
000F39r 3                               ; Check to see if this name already exists.
000F39r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u )
000F3Cr 3  20 rr rr                     jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
000F3Fr 3               
000F3Fr 3  B5 00                        lda 0,x
000F41r 3  15 01                        ora 1,x
000F43r 3  F0 1E                        beq @new_name           ; We haven't seen this one before.
000F45r 3               
000F45r 3                               ; This name already exists.  See if we are supposed to print
000F45r 3                               ; the message for it.
000F45r 3  E8                           inx                     ; Drop flag (nt) from find-name.
000F46r 3  E8                           inx
000F47r 3               
000F47r 3                               ; Check bit 7
000F47r 3  24 rr                        bit status
000F49r 3  10 08                        bpl @redefined_name     ; Bit 7 is zero, so print the message.
000F4Br 3               
000F4Br 3                               ; We aren't supposed to print the redefined message ourselves,
000F4Br 3                               ; but we should indicate that it is redefined (for ; to print
000F4Br 3                               ; later).
000F4Br 3  A9 80                        lda #$80                ; Set bit 7 to indicate dup
000F4Dr 3  05 rr                        ora status
000F4Fr 3  85 rr                        sta status
000F51r 3  80 18                        bra @process_name
000F53r 3               
000F53r 3               @redefined_name:
000F53r 3                               ; Print the message that the name is redefined.
000F53r 3  A9 02                        lda #str_redefined
000F55r 3  20 rr rr                     jsr print_string_no_lf
000F58r 3               
000F58r 3  20 rr rr                     jsr xt_two_dup           ; ( addr u addr u )
000F5Br 3  20 rr rr                     jsr xt_type
000F5Er 3  20 rr rr                     jsr xt_space
000F61r 3               
000F61r 3  80 08                        bra @process_name
000F63r 3               
000F63r 3               @new_name:
000F63r 3  E8                           inx                     ; Drop flag (0) from find-name.
000F64r 3  E8                           inx
000F65r 3  A9 7F                        lda #$7F                ; Clear bit 0 of status to indicate new word.
000F67r 3  25 rr                        and status
000F69r 3  85 rr                        sta status
000F6Br 3               
000F6Br 3               @process_name:
000F6Br 3  B5 00                        lda 0,x
000F6Dr 3  85 rr                        sta tmp2                ; store length of string in tmp2
000F6Fr 3               
000F6Fr 3                               ; remember the first free byte of memory as the start of
000F6Fr 3                               ; the new word
000F6Fr 3  A5 rr                        lda cp
000F71r 3  85 rr                        sta tmp1
000F73r 3  A5 rr                        lda cp+1
000F75r 3  85 rr                        sta tmp1+1
000F77r 3               
000F77r 3                               ; We need 8 bytes plus the length of the string for our new header.
000F77r 3                               ; This is also the offset for the start of the code field (the
000F77r 3                               ; xt_ label) so we need to remember it. Otherwise, we could
000F77r 3                               ; just allot the space afterwards
000F77r 3  B5 00                        lda 0,x
000F79r 3  18                           clc
000F7Ar 3  69 08                        adc #8
000F7Cr 3  85 rr                        sta tmp3                ; total header length
000F7Er 3               
000F7Er 3                               ; We need three more bytes for for the hardcoded code field
000F7Er 3                               ; area (CFA), the "payload" of the word which by default will
000F7Er 3                               ; be a subroutine jump to DOVAR
000F7Er 3  18                           clc
000F7Fr 3  69 03                        adc #3
000F81r 3               
000F81r 3                               ; We overwrite the length of the string returned by PARSE-NAME
000F81r 3                               ; and then call ALLOT
000F81r 3  95 00                        sta 0,x
000F83r 3  74 01                        stz 1,x         ; max header size is 255 chars
000F85r 3  20 rr rr                     jsr xt_allot    ; ( addr )
000F88r 3               
000F88r 3                               ; Get the CURRENT dictionary pointer.
000F88r 3  20 rr rr                     jsr current_to_dp
000F8Br 3               
000F8Br 3                               ; Now we walk through the header with Y as the index, adding
000F8Br 3                               ; information byte-by-byte
000F8Br 3  A0 00                        ldy #0
000F8Dr 3               
000F8Dr 3                               ; HEADER BYTE 0: Length of string
000F8Dr 3  A5 rr                        lda tmp2
000F8Fr 3  91 rr                        sta (tmp1),y
000F91r 3               
000F91r 3                               ; HEADER BYTE 1: Status byte. By default, we set all new words
000F91r 3                               ; to "never native", user will have to decide if they should
000F91r 3                               ; be inlined
000F91r 3  A9 08                        lda #NN
000F93r 3               
000F93r 3                               ; Also, words defined by CREATE are marked in the header has
000F93r 3                               ; having a Code Field Area (CFA), which is a bit tricky for
000F93r 3                               ; Subroutine Threaded Code (STC). We do this so >BODY works
000F93r 3                               ; correctly with DOES> and CREATE. See the discussion at
000F93r 3                               ; http://forum.6502.org/viewtopic.php?f=9&t=5182 for details
000F93r 3  09 20                        ora #HC
000F95r 3  C8                           iny
000F96r 3  91 rr                        sta (tmp1),y
000F98r 3  C8                           iny
000F99r 3               
000F99r 3                               ; HEADER BYTE 2,3: Next header. This is the current last word
000F99r 3                               ; in the Dictionary
000F99r 3  A5 rr                        lda dp
000F9Br 3  91 rr                        sta (tmp1),y
000F9Dr 3  C8                           iny
000F9Er 3  A5 rr                        lda dp+1
000FA0r 3  91 rr                        sta (tmp1),y
000FA2r 3  C8                           iny
000FA3r 3               
000FA3r 3                               ; Interlude: Make old CP new DP (new start of Dictionary)
000FA3r 3  A5 rr                        lda tmp1+1
000FA5r 3  85 rr                        sta dp+1
000FA7r 3  A5 rr                        lda tmp1
000FA9r 3  85 rr                        sta dp
000FABr 3               
000FABr 3                               ; HEADER BYTE 4,5: Start of the code field ("xt_" of this word).
000FABr 3                               ; This begins after the header so we take the length of the
000FABr 3                               ; header, which we cleverly saved in tmp3, and use it as an
000FABr 3                               ; offset to the address of the start of the word. We come here
000FABr 3                               ; with tmp1 in A
000FABr 3  18                           clc
000FACr 3  65 rr                        adc tmp3        ; add total header length
000FAEr 3  91 rr                        sta (tmp1),y
000FB0r 3  48                           pha             ; we need this in the next step
000FB1r 3  C8                           iny
000FB2r 3               
000FB2r 3  A5 rr                        lda tmp1+1
000FB4r 3  69 00                        adc #0          ; only need the carry
000FB6r 3  91 rr                        sta (tmp1),y
000FB8r 3  C8                           iny
000FB9r 3               
000FB9r 3                               ; HEADER BYTE 6,7: End of code ("z_" of this word). By default,
000FB9r 3                               ; we execute a jump to the DOVAR routine, so we need to move three
000FB9r 3                               ; bytes down, and then one more byte so that the z_ label points
000FB9r 3                               ; to the (still fictional) RTS instruction for correct compilation
000FB9r 3  68                           pla             ; LSB of "z_" address
000FBAr 3  18                           clc
000FBBr 3  69 03                        adc #3
000FBDr 3  91 rr                        sta (tmp1),y
000FBFr 3               
000FBFr 3  88                           dey             ; get the MSB of xt back
000FC0r 3  B1 rr                        lda (tmp1),y
000FC2r 3  69 00                        adc #0          ; only need the carry
000FC4r 3  C8                           iny
000FC5r 3  C8                           iny
000FC6r 3  91 rr                        sta (tmp1),y
000FC8r 3  C8                           iny
000FC9r 3               
000FC9r 3                               ; HEADER BYTE 8: Start of name string. The address is TOS, the
000FC9r 3                               ; length in tmp2. We subtract 8 from the address so we can
000FC9r 3                               ; use the same loop index, which is already 8 byte ahead at
000FC9r 3                               ; this point
000FC9r 3  B5 00                        lda 0,x
000FCBr 3  38                           sec
000FCCr 3  E9 08                        sbc #8
000FCEr 3  85 rr                        sta tmptos
000FD0r 3               
000FD0r 3  B5 01                        lda 1,x
000FD2r 3  E9 00                        sbc #0          ; only need carry
000FD4r 3  85 rr                        sta tmptos+1
000FD6r 3               
000FD6r 3               @name_loop:
000FD6r 3  B1 rr                        lda (tmptos),y
000FD8r 3               
000FD8r 3                               ; Make sure it goes into the dictionary in lower case.
000FD8r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
000FDAr 3  B0 07                        bcs @store_name
000FDCr 3  C9 41                        cmp #$41        ; ASCII 'A'
000FDEr 3  90 03                        bcc @store_name
000FE0r 3               
000FE0r 3                               ; An uppercase letter has been located. Make it
000FE0r 3                               ; lowercase.
000FE0r 3  18                           clc
000FE1r 3  69 20                        adc #$20
000FE3r 3               
000FE3r 3                               ; Fall into @store_name.
000FE3r 3               
000FE3r 3               @store_name:
000FE3r 3  91 rr                        sta (tmp1),y
000FE5r 3  C8                           iny
000FE6r 3  C6 rr                        dec tmp2
000FE8r 3  D0 EC                        bne @name_loop
000FEAr 3               
000FEAr 3                               ; After thename string comes the code field, starting at the
000FEAr 3                               ; current xt of this word, which is initially a jump to the
000FEAr 3                               ; subroutine to DOVAR. We code this jump by hand
000FEAr 3  A9 20                        lda #$20        ; opcode of JSR
000FECr 3  91 rr                        sta (tmp1),y
000FEEr 3  C8                           iny
000FEFr 3  A9 rr                        lda #<dovar
000FF1r 3  91 rr                        sta (tmp1),y
000FF3r 3  C8                           iny
000FF4r 3  A9 rr                        lda #>dovar
000FF6r 3  91 rr                        sta (tmp1),y
000FF8r 3               
000FF8r 3                               ; Update the CURRENT wordlist with the new DP.
000FF8r 3                               ; We do this down here because this routine uses Y.
000FF8r 3  20 rr rr                     jsr dp_to_current
000FFBr 3               
000FFBr 3                               ; And we're done. Restore stack
000FFBr 3  E8                           inx
000FFCr 3  E8                           inx
000FFDr 3               
000FFDr 3  60           z_create:       rts
000FFEr 3               
000FFEr 3               
000FFEr 3               
000FFEr 3               ; ## D_MINUS ( d d -- d ) "Subtract two double-celled numbers"
000FFEr 3               ; ## "d-"  auto  ANS double
000FFEr 3                       ; """https://forth-standard.org/standard/double/DMinus"""
000FFEr 3               
000FFEr 3               xt_d_minus:
000FFEr 3  20 rr rr                     jsr underflow_4 ; two double numbers
001001r 3               
001001r 3  38                           sec
001002r 3               
001002r 3  B5 06                        lda 6,x         ; LSB of lower word
001004r 3  F5 02                        sbc 2,x
001006r 3  95 06                        sta 6,x
001008r 3               
001008r 3  B5 07                        lda 7,x         ; MSB of lower word
00100Ar 3  F5 03                        sbc 3,x
00100Cr 3  95 07                        sta 7,x
00100Er 3               
00100Er 3  B5 04                        lda 4,x         ; LSB of upper word
001010r 3  F5 00                        sbc 0,x
001012r 3  95 04                        sta 4,x
001014r 3               
001014r 3  B5 05                        lda 5,x         ; MSB of upper word
001016r 3  F5 01                        sbc 1,x
001018r 3  95 05                        sta 5,x
00101Ar 3               
00101Ar 3  E8                           inx
00101Br 3  E8                           inx
00101Cr 3  E8                           inx
00101Dr 3  E8                           inx
00101Er 3               
00101Er 3  60           z_d_minus:      rts
00101Fr 3               
00101Fr 3               
00101Fr 3               
00101Fr 3               ; ## D_PLUS ( d d -- d ) "Add two double-celled numbers"
00101Fr 3               ; ## "d+"  auto  ANS double
00101Fr 3                       ; """https://forth-standard.org/standard/double/DPlus"""
00101Fr 3               
00101Fr 3               xt_d_plus:
00101Fr 3  20 rr rr                     jsr underflow_4 ; two double numbers
001022r 3               
001022r 3  18                           clc
001023r 3  B5 02                        lda 2,x         ; LSB of lower word
001025r 3  75 06                        adc 6,x
001027r 3  95 06                        sta 6,x
001029r 3               
001029r 3  B5 03                        lda 3,x         ; MSB of lower word
00102Br 3  75 07                        adc 7,x
00102Dr 3  95 07                        sta 7,x
00102Fr 3               
00102Fr 3  B5 00                        lda 0,x         ; LSB of upper word
001031r 3  75 04                        adc 4,x
001033r 3  95 04                        sta 4,x
001035r 3               
001035r 3  B5 01                        lda 1,x         ; MSB of upper word
001037r 3  75 05                        adc 5,x
001039r 3  95 05                        sta 5,x
00103Br 3               
00103Br 3  E8                           inx
00103Cr 3  E8                           inx
00103Dr 3  E8                           inx
00103Er 3  E8                           inx
00103Fr 3               
00103Fr 3  60           z_d_plus:       rts
001040r 3               
001040r 3               
001040r 3               
001040r 3               ; ## D_TO_S ( d -- n ) "Convert a double number to single"
001040r 3               ; ## "d>s"  auto  ANS double
001040r 3                       ; """https://forth-standard.org/standard/double/DtoS
001040r 3                       ; Though this is basically just DROP, we keep it
001040r 3                       ; separate so we can test for underflow
001040r 3                       ; """
001040r 3               
001040r 3               xt_d_to_s:
001040r 3  20 rr rr                     jsr underflow_2
001043r 3               
001043r 3  E8                           inx
001044r 3  E8                           inx
001045r 3               
001045r 3  60           z_d_to_s:       rts
001046r 3               
001046r 3               
001046r 3               
001046r 3               ; ## DABS ( d -- d ) "Return the absolute value of a double"
001046r 3               ; ## "dabs"  auto  ANS double
001046r 3                       ; """https://forth-standard.org/standard/double/DABS"""
001046r 3               
001046r 3               xt_dabs:
001046r 3  20 rr rr                     jsr underflow_2 ; double number
001049r 3               
001049r 3  B5 01                        lda 1,x         ; MSB of high cell
00104Br 3  10 17                        bpl @done       ; positive, we get off light
00104Dr 3               
00104Dr 3                               ; negative, calculate 0 - d
00104Dr 3  A0 00                        ldy #0
00104Fr 3  38                           sec
001050r 3               
001050r 3  98                           tya
001051r 3  F5 02                        sbc 2,x         ; LSB of low cell
001053r 3  95 02                        sta 2,x
001055r 3               
001055r 3  98                           tya
001056r 3  F5 03                        sbc 3,x         ; MSB of low cell
001058r 3  95 03                        sta 3,x
00105Ar 3               
00105Ar 3  98                           tya
00105Br 3  F5 00                        sbc 0,x         ; LSB of high cell
00105Dr 3  95 00                        sta 0,x
00105Fr 3               
00105Fr 3  98                           tya
001060r 3  F5 01                        sbc 1,x         ; MSB of high cell
001062r 3  95 01                        sta 1,x
001064r 3               @done:
001064r 3  60           z_dabs:         rts
001065r 3               
001065r 3               
001065r 3               
001065r 3               ; ## DECIMAL ( -- ) "Change radix base to decimal"
001065r 3               ; ## "decimal"  auto  ANS core
001065r 3                       ; """https://forth-standard.org/standard/core/DECIMAL"""
001065r 3               xt_decimal:
001065r 3  A9 0A                        lda #10
001067r 3  85 rr                        sta base
001069r 3  64 rr                        stz base+1              ; paranoid
00106Br 3               
00106Br 3  60           z_decimal:      rts
00106Cr 3               
00106Cr 3               
00106Cr 3               ; ## DEFER ( "name" -- ) "Create a placeholder for words by name"
00106Cr 3               ; ## "defer"  auto  ANS core ext
00106Cr 3                       ; """https://forth-standard.org/standard/core/DEFER
00106Cr 3                       ; Reserve an name that can be linked to various xt by IS.
00106Cr 3                       ;
00106Cr 3                       ; The ANS reference implementation is
00106Cr 3                       ;       CREATE ['] ABORT , DOES> @ EXECUTE ;
00106Cr 3                       ; But we use this routine as a low-level word so things go faster
00106Cr 3               
00106Cr 3               xt_defer:
00106Cr 3  20 rr rr                     jsr xt_create
00106Fr 3               
00106Fr 3                               ; CREATE by default installs a subroutine jump to DOVAR,
00106Fr 3                               ; but we actually want DODEFER this time. Go back two
00106Fr 3                               ; bytes and repace the subroutine jump target
00106Fr 3  A5 rr                        lda cp          ; LSB
001071r 3  38                           sec
001072r 3  E9 02                        sbc #2
001074r 3  85 rr                        sta tmp1
001076r 3               
001076r 3  A5 rr                        lda cp+1        ; MSB
001078r 3  E9 00                        sbc #0          ; we only care about the borrow
00107Ar 3  85 rr                        sta tmp1+1
00107Cr 3               
00107Cr 3                               ; Save the target address
00107Cr 3  A0 00                        ldy #0
00107Er 3  A9 rr                        lda #<dodefer   ; LSB
001080r 3  91 rr                        sta (tmp1),y
001082r 3  C8                           iny
001083r 3  A9 rr                        lda #>dodefer   ; MSB
001085r 3  91 rr                        sta (tmp1),y
001087r 3               
001087r 3               
001087r 3                               ; DODEFER executes the next address it finds after
001087r 3                               ; its call. As default, we include the error
001087r 3                               ; "Defer not defined"
001087r 3  A9 rr                        lda #<defer_error
001089r 3  92 rr                        sta (cp)
00108Br 3  E6 rr                        inc cp
00108Dr 3  D0 02                        bne @1
00108Fr 3  E6 rr                        inc cp+1
001091r 3               @1:
001091r 3  A9 rr                        lda #>defer_error
001093r 3  92 rr                        sta (cp)
001095r 3  E6 rr                        inc cp
001097r 3  D0 02                        bne @2
001099r 3  E6 rr                        inc cp+1
00109Br 3               @2:
00109Br 3  20 rr rr                     jsr adjust_z    ; adjust header to correct length
00109Er 3               
00109Er 3  60           z_defer:        rts
00109Fr 3               
00109Fr 3               
00109Fr 3               
00109Fr 3               ; ## DEFER_FETCH ( xt1 -- xt2 ) "Get the current XT for a deferred word"
00109Fr 3               ; ## "defer@"  auto  ANS core ext
00109Fr 3                       ; """http://forth-standard.org/standard/core/DEFERFetch"""
00109Fr 3               
00109Fr 3               xt_defer_fetch:
00109Fr 3                               ; No underflow checking as >BODY does it.
00109Fr 3  20 rr rr                     jsr xt_to_body
0010A2r 3  20 rr rr                     jsr xt_fetch
0010A5r 3  60           z_defer_fetch:  rts
0010A6r 3               
0010A6r 3               
0010A6r 3               
0010A6r 3               ; ## DEFER_STORE ( xt2 x1 -- ) "Set xt1 to execute xt2"
0010A6r 3               ; ## "defer!"  auto  ANS core ext
0010A6r 3                       ; """http://forth-standard.org/standard/core/DEFERStore"""
0010A6r 3               
0010A6r 3               xt_defer_store:
0010A6r 3                               ; No underflow checking as >BODY and ! do it.
0010A6r 3  20 rr rr                     jsr xt_to_body
0010A9r 3  20 rr rr                     jsr xt_store
0010ACr 3  60           z_defer_store:  rts
0010ADr 3               
0010ADr 3               
0010ADr 3               
0010ADr 3               ; ## DEFINITIONS ( -- ) "Make first wordlist in search order the current wordlist"
0010ADr 3               ; ## "definitions" auto ANS search
0010ADr 3               xt_definitions:
0010ADr 3  A0 1F                        ldy #search_order_offset    ; Transfer byte variable
0010AFr 3  B1 rr                        lda (up),y                  ; SEARCH_ORDER[0] to
0010B1r 3  A0 04                        ldy #current_offset         ; byte variable CURRENT.
0010B3r 3  91 rr                        sta (up),y
0010B5r 3  60           z_definitions:  rts
0010B6r 3               
0010B6r 3               
0010B6r 3               ; ## DEPTH ( -- u ) "Get number of cells (not bytes) used by stack"
0010B6r 3               ; ## "depth"  auto  ANS core
0010B6r 3                       ; """https://forth-standard.org/standard/core/DEPTH"""
0010B6r 3               xt_depth:
0010B6r 3  A9 FF                        lda #dsp0
0010B8r 3  86 rr                        stx tmpdsp
0010BAr 3  38                           sec
0010BBr 3  E5 rr                        sbc tmpdsp
0010BDr 3               
0010BDr 3                               ; divide by two because each cell is two bytes
0010BDr 3  4A                           lsr
0010BEr 3               
0010BEr 3  CA                           dex
0010BFr 3  CA                           dex
0010C0r 3  95 00                        sta 0,x
0010C2r 3  74 01                        stz 1,x
0010C4r 3               
0010C4r 3  60           z_depth:        rts
0010C5r 3               
0010C5r 3               
0010C5r 3               ; ## DIGIT_QUESTION ( char -- u f | char f ) "Convert ASCII char to number"
0010C5r 3               ; ## "digit?"  auto  Tali Forth
0010C5r 3                       ; """Inspired by the pForth instruction DIGIT, see
0010C5r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
0010C5r 3                       ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to
0010C5r 3                       ; pForth, we get the base (radix) ourselves instead of having the
0010C5r 3                       ; user provide it. There is no standard name for this routine, which
0010C5r 3                       ; itself is not ANS; we use DIGIT? following pForth and Gforth.
0010C5r 3                       ; """
0010C5r 3               
0010C5r 3               xt_digit_question:
0010C5r 3  20 rr rr                     jsr underflow_1
0010C8r 3               
0010C8r 3                               ; one way or another, we're going to need room for the
0010C8r 3                               ; flag on the stack
0010C8r 3  CA                           dex
0010C9r 3  CA                           dex
0010CAr 3  74 00                        stz 0,x                 ; default flag is failure
0010CCr 3  74 01                        stz 1,x
0010CEr 3  74 03                        stz 3,x                 ; paranoid
0010D0r 3               
0010D0r 3                               ; Check the character, now in the LSB of NOS. First, make
0010D0r 3                               ; sure we're not below the ASCII code for "0"
0010D0r 3  B5 02                        lda 2,x
0010D2r 3  C9 30                        cmp #'0'
0010D4r 3  90 23                        bcc @done               ; failure flag already set
0010D6r 3               
0010D6r 3                               ; Next, see if we are below "9", because that would make
0010D6r 3                               ; this a normal number
0010D6r 3  C9 3A                        cmp #'9'+1               ; this is actually ":"
0010D8r 3  90 12                        bcc @checkbase
0010DAr 3               
0010DAr 3                               ; Well, then let's see if this is the gap between "9" and "A"
0010DAr 3                               ; so we can treat the whole range as a number
0010DAr 3  C9 41                        cmp #'A'
0010DCr 3  90 1B                        bcc @done               ; failure flag is already set
0010DEr 3               
0010DEr 3                               ; probably a letter, so we make sure it is uppercase
0010DEr 3  C9 61                        cmp #'a'
0010E0r 3  90 07                        bcc @case_done          ; not lower case, too low
0010E2r 3  C9 7B                        cmp #'z'+1
0010E4r 3  B0 03                        bcs @case_done          ; not lower case, too high
0010E6r 3               
0010E6r 3  18                           clc                     ; just right
0010E7r 3  69 E0                        adc #$e0                ; offset to upper case (wraps)
0010E9r 3               
0010E9r 3               @case_done:
0010E9r 3                               ; get rid of the gap between "9" and "A" so we can treat
0010E9r 3                               ; the whole range as one number
0010E9r 3  38                           sec
0010EAr 3  E9 07                        sbc #7                  ; fall through to @checkbase
0010ECr 3               
0010ECr 3               @checkbase:
0010ECr 3                               ; we have a number, now see if it falls inside the range
0010ECr 3                               ; provided by BASE
0010ECr 3  38                           sec
0010EDr 3  E9 30                        sbc #'0'                 ; this is also the conversion step
0010EFr 3  C5 rr                        cmp base
0010F1r 3  B0 06                        bcs @done               ; already have false flag
0010F3r 3               
0010F3r 3                               ; Found a legal number
0010F3r 3  95 02                        sta 2,x                 ; put number in NOS
0010F5r 3  D6 00                        dec 0,x                 ; set success flag
0010F7r 3  D6 01                        dec 1,x
0010F9r 3               
0010F9r 3               @done:
0010F9r 3               z_digit_question:
0010F9r 3  60                           rts
0010FAr 3               
0010FAr 3               
0010FAr 3               ; ## DISASM ( addr u -- ) "Disassemble a block of memory"
0010FAr 3               ; ## "disasm"  tested  Tali Forth
0010FAr 3                       ; """Convert a segment of memory to assembler output. This
0010FAr 3                       ; word is vectored so people can add their own disassembler.
0010FAr 3                       ; Natively, this produces Simpler Assembly Notation (SAN)
0010FAr 3                       ; code, see the section on The Disassembler in the manual and
0010FAr 3                       ; the file disassembler.asm for more details.
0010FAr 3                       ; """
0010FAr 3               xt_disasm:
0010FAr 3  20 rr rr                     jsr underflow_2
0010FDr 3                           .ifdef disassembler
0010FDr 3                               jsr disassembler
0010FDr 3                           .endif
0010FDr 3               
0010FDr 3  60           z_disasm:       rts
0010FEr 3               
0010FEr 3               
0010FEr 3               ; ## DNEGATE ( d -- d ) "Negate double cell number"
0010FEr 3               ; ## "dnegate"  auto  ANS double
0010FEr 3                       ; """https://forth-standard.org/standard/double/DNEGATE"""
0010FEr 3               xt_dnegate:
0010FEr 3  20 rr rr                     jsr underflow_2 ; double number
001101r 3               
001101r 3  A0 00             		ldy #0
001103r 3  38                           sec
001104r 3               
001104r 3  98                           tya
001105r 3  F5 02                        sbc 2,x         ; LSB of low cell
001107r 3  95 02                        sta 2,x
001109r 3               
001109r 3  98                           tya
00110Ar 3  F5 03                        sbc 3,x         ; MSB of low cell
00110Cr 3  95 03                        sta 3,x
00110Er 3               
00110Er 3  98                           tya
00110Fr 3  F5 00                        sbc 0,x         ; LSB of high cell
001111r 3  95 00                        sta 0,x
001113r 3               
001113r 3  98                           tya
001114r 3  F5 01                        sbc 1,x         ; MSB of high cell
001116r 3  95 01                        sta 1,x
001118r 3               
001118r 3  60           z_dnegate:      rts
001119r 3               
001119r 3               
001119r 3               ; ## QUESTION_DO ( limit start -- )(R: -- limit start) "Conditional loop start"
001119r 3               ; ## "?do"  auto  ANS core ext
001119r 3                       ; """https://forth-standard.org/standard/core/qDO"""
001119r 3               xt_question_do:
001119r 3                               ; ?DO shares most of its code with DO. We use the tmp1 flag
001119r 3                               ; to mark which is which
001119r 3  A9 FF                        lda #$ff                ; -1 is ?DO, jump to common code
00111Br 3  85 rr                        sta tmp1
00111Dr 3  80 02                        bra do_common           ; skip flag for DO
00111Fr 3               
00111Fr 3               ; ## DO ( limit start -- )(R: -- limit start)  "Start a loop"
00111Fr 3               ; ## "do"  auto  ANS core
00111Fr 3                       ; """https://forth-standard.org/standard/core/DO
00111Fr 3                       ;
00111Fr 3                       ; Compile-time part of DO. Could be realized in Forth as
00111Fr 3                       ;       : DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY
00111Fr 3                       ; but we do it in assembler for speed. To work with LEAVE, we compile
00111Fr 3                       ; a routine that pushes the end address to the Return Stack at run
00111Fr 3                       ; time. This is based on a suggestion by Garth Wilson, see
00111Fr 3                       ; the Control Flow section of the manual for details.
00111Fr 3                       ;
00111Fr 3                       ; This may not be native compile. Don't check for a stack underflow
00111Fr 3                       ; """
00111Fr 3               
00111Fr 3               xt_do:
00111Fr 3                               ; DO and ?DO share most of their code, use tmp1 as a flag.
00111Fr 3  64 rr                        stz tmp1                ; 0 is DO, drop through to DO_COMMON
001121r 3               do_common:
001121r 3                               ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
001121r 3                               ; compile the address we need to LDA at runtime
001121r 3  CA                           dex
001122r 3  CA                           dex
001123r 3  A5 rr                        lda cp
001125r 3  95 00                        sta 0,x                 ; LSB
001127r 3  A5 rr                        lda cp+1
001129r 3  95 01                        sta 1,x                 ; MSB   ( limit start here )
00112Br 3               
00112Br 3                               ; now we compile six dummy bytes that LOOP/+LOOP will
00112Br 3                               ; replace by the actual LDA/PHA instructions
00112Br 3  A9 05                        lda #5                  ; we don't really care about the value,
00112Dr 3  A8                           tay                     ; so we use 5 to be tricky
00112Er 3               @loop:
00112Er 3  91 rr                        sta (cp),y
001130r 3  88                           dey
001131r 3  10 FB                        bpl @loop
001133r 3               
001133r 3                               ; update CP
001133r 3  1A                           inc             ; we used 5 as a dummy value, this is why
001134r 3  18                           clc
001135r 3  65 rr                        adc cp
001137r 3  85 rr                        sta cp
001139r 3  90 02                        bcc @1
00113Br 3  E6 rr                        inc cp+1
00113Dr 3               @1:
00113Dr 3                               ; compile the (?DO) portion of ?DO if appropriate
00113Dr 3  A5 rr                        lda tmp1
00113Fr 3  F0 17                        beq @compile_do
001141r 3               
001141r 3                               ; We came from ?DO, so compile its runtime first. We do
001141r 3                               ; this with a quick loop because we know it has to be
001141r 3                               ; Always Native anyway
001141r 3  A0 14                        ldy #question_do_runtime_end-question_do_runtime
001143r 3  5A                           phy             ; save counter to calculate new CP
001144r 3               @2:
001144r 3  B9 rr rr                     lda question_do_runtime,y
001147r 3  91 rr                        sta (cp),y
001149r 3  88                           dey
00114Ar 3  10 F8                        bpl @2
00114Cr 3               
00114Cr 3                               ; adjust CP
00114Cr 3  68                           pla             ; retrieve counter
00114Dr 3  18                           clc
00114Er 3  65 rr                        adc cp
001150r 3  85 rr                        sta cp
001152r 3  A5 rr                        lda cp+1
001154r 3  69 00                        adc #0          ; only care about carry
001156r 3  85 rr                        sta cp+1        ; fall through to @compile_do
001158r 3               
001158r 3               @compile_do:
001158r 3                               ; compile runtime part of DO.
001158r 3  A0 24                        ldy #do_runtime_end-do_runtime  ; counter
00115Ar 3  5A                           phy             ; save counter to calculate new CP
00115Br 3               @3:
00115Br 3  B9 rr rr                     lda do_runtime,y
00115Er 3  91 rr                        sta (cp),y
001160r 3  88                           dey
001161r 3  10 F8                        bpl @3
001163r 3               
001163r 3                               ; adjust CP
001163r 3  68                           pla             ; retrieve counter
001164r 3  18                           clc
001165r 3  65 rr                        adc cp
001167r 3  85 rr                        sta cp
001169r 3  A5 rr                        lda cp+1
00116Br 3  69 00                        adc #0          ; only care about carry
00116Dr 3  85 rr                        sta cp+1
00116Fr 3               
00116Fr 3                               ; HERE, hardcoded for speed. We put it on the Data Stack
00116Fr 3                               ; where LOOP/+LOOP takes it from. Note this has nothing to
00116Fr 3                               ; do with the HERE we're saving for LEAVE
00116Fr 3  CA                           dex
001170r 3  CA                           dex
001171r 3  A5 rr                        lda cp          ; LSB
001173r 3  95 00                        sta 0,x
001175r 3  A5 rr                        lda cp+1        ; MSB
001177r 3  95 01                        sta 1,x
001179r 3               z_question_do:
001179r 3  60           z_do:           rts
00117Ar 3               
00117Ar 3               
00117Ar 3               do_runtime:
00117Ar 3                       ; """Runtime routine for DO loop. Note that ANS loops quit when the
00117Ar 3                       ; boundry of limit-1 and limit is reached, a different mechanism than
00117Ar 3                       ; the FIG Forth loop (you can see which version you have by running
00117Ar 3                       ; a loop with start and limit as the same value, for instance
00117Ar 3                       ; 0 0 DO -- these will walk through the number space). We use a
00117Ar 3                       ; "fudge factor" for the limit that makes the Overflow Flag trip when
00117Ar 3                       ; it is reached; see http://forum.6502.org/viewtopic.php?f=9&t=2026
00117Ar 3                       ; for further discussion of this. The source given there for
00117Ar 3                       ; this idea is Laxen & Perry F83. -- This routine is called (DO)
00117Ar 3                       ; in some Forths. Usually, we would define this as a separate word
00117Ar 3                       ; and compile it with COMPILE, and the Always Native (AN) flag.
00117Ar 3                       ; However, we can do it faster if we just copy the bytes
00117Ar 3                       ; of this routine with a simple loop in DO.
00117Ar 3                       ; """
00117Ar 3                               ; First step: create fudge factor (FUFA) by subtracting the
00117Ar 3                               ; limit from $8000, the number that will trip the overflow
00117Ar 3                               ; flag
00117Ar 3  38                           sec
00117Br 3  A9 00                        lda #0
00117Dr 3  F5 02                        sbc 2,x         ; LSB of limit
00117Fr 3  95 02                        sta 2,x         ; save FUFA for later use
001181r 3               
001181r 3  A9 80                        lda #$80
001183r 3  F5 03                        sbc 3,x         ; MSB of limit
001185r 3  95 03                        sta 3,x         ; save FUFA for later use
001187r 3  48                           pha             ; FUFA replaces limit on R stack
001188r 3  B5 02                        lda 2,x         ; LSB of limit
00118Ar 3  48                           pha
00118Br 3               
00118Br 3                               ; Second step: index is FUFA plus original index
00118Br 3  18                           clc
00118Cr 3  B5 00                        lda 0,x         ; LSB of original index
00118Er 3  75 02                        adc 2,x         ; add LSB of FUFA
001190r 3  95 00                        sta 0,x
001192r 3  B5 01                        lda 1,x         ; MSB of orginal index
001194r 3  75 03                        adc 3,x         ; add MSB of FUFA
001196r 3  48                           pha
001197r 3  B5 00                        lda 0,x         ; LSB of index
001199r 3  48                           pha
00119Ar 3               
00119Ar 3                               ; we've saved the FUFA on the NOS of the R stack, so we can
00119Ar 3                               ; use it later. Clean the Data Stack
00119Ar 3  E8                           inx
00119Br 3  E8                           inx
00119Cr 3  E8                           inx
00119Dr 3  E8                           inx             ; no RTS because this is copied into code
00119Er 3               do_runtime_end:
00119Er 3               
00119Er 3               question_do_runtime:
00119Er 3               
00119Er 3                       ; """This is called (?DO) in some Forths. See the explanation at
00119Er 3                       ; do_runtime for the background on this design
00119Er 3                       ; """
00119Er 3                               ; see if TOS and NOS are equal. Change this to assembler
00119Er 3                               ; for speed
00119Er 3  20 rr rr                     jsr xt_two_dup          ; ( n1 n2 n1 n2 )
0011A1r 3  20 rr rr                     jsr xt_equal            ; ( -- n1 n2 f )
0011A4r 3               
0011A4r 3  B5 00                        lda 0,x
0011A6r 3  15 01                        ora 1,x
0011A8r 3  F0 06                        beq @do_do
0011AAr 3               
0011AAr 3                               ; We're equal, so dump everything and jump beyond the loop.
0011AAr 3                               ; But first, dump six entries off of the Data Stack
0011AAr 3  8A                           txa
0011ABr 3  18                           clc
0011ACr 3  69 06                        adc #6
0011AEr 3  AA                           tax
0011AFr 3               
0011AFr 3                               ; Then abort the whole loop
0011AFr 3  60                           rts
0011B0r 3               @do_do:
0011B0r 3  E8                           inx             ; clear flag from EQUAL off stack
0011B1r 3  E8                           inx             ; no RTS because this is copied into code
0011B2r 3               question_do_runtime_end:
0011B2r 3               
0011B2r 3               
0011B2r 3               
0011B2r 3               ; ## DOES ( -- ) "Add payload when defining new words"
0011B2r 3               ; ## "does>"  auto  ANS core
0011B2r 3                       ; """https://forth-standard.org/standard/core/DOES
0011B2r 3                       ; Create the payload for defining new defining words. See
0011B2r 3                       ; http://www.bradrodriguez.com/papers/moving3.htm and
0011B2r 3                       ; the Developer Guide in the manual for a discussion of
0011B2r 3                       ; DOES>'s internal workings. This uses tmp1 and tmp2.
0011B2r 3                       ; """
0011B2r 3               
0011B2r 3               xt_does:
0011B2r 3                               ; compile a subroutine jump to runtime of DOES>
0011B2r 3  A0 rr                        ldy #>does_runtime
0011B4r 3  A9 rr                        lda #<does_runtime
0011B6r 3  20 rr rr                     jsr cmpl_subroutine
0011B9r 3               
0011B9r 3                               ; compile a subroutine jump to DODOES. In traditional
0011B9r 3                               ; terms, this is the Code Field Area (CFA) of the new
0011B9r 3                               ; word
0011B9r 3  A0 rr                        ldy #>dodoes
0011BBr 3  A9 rr                        lda #<dodoes
0011BDr 3  20 rr rr                     jsr cmpl_subroutine
0011C0r 3               
0011C0r 3  60           z_does:         rts
0011C1r 3               
0011C1r 3               
0011C1r 3               does_runtime:
0011C1r 3                       ; """Runtime portion of DOES>. This replaces the subroutine jump
0011C1r 3                       ; to DOVAR that CREATE automatically encodes by a jump to the
0011C1r 3                       ; address that contains a subroutine jump to DODOES. We don't
0011C1r 3                       ; jump to DODOES directly because we need to work our magic with
0011C1r 3                       ; the return addresses. This routine is also known as "(DOES)" in
0011C1r 3                       ; other Forths
0011C1r 3                       ; """
0011C1r 3               
0011C1r 3  7A                           ply             ; LSB
0011C2r 3  68                           pla             ; MSB
0011C3r 3               
0011C3r 3  C8                           iny
0011C4r 3  D0 01                        bne @1
0011C6r 3  1A                           inc
0011C7r 3               @1:
0011C7r 3  84 rr                        sty tmp1
0011C9r 3  85 rr                        sta tmp1+1
0011CBr 3               
0011CBr 3                               ; CREATE has also already modified the DP to point to the new
0011CBr 3                               ; word. We have no idea which instructions followed the CREATE
0011CBr 3                               ; command if there is a DOES> so the CP could point anywhere
0011CBr 3                               ; by now. The address of the word's xt is four bytes down.
0011CBr 3  20 rr rr                     jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
0011CEr 3  A5 rr                        lda dp
0011D0r 3  18                           clc
0011D1r 3  69 04                        adc #4
0011D3r 3  85 rr                        sta tmp2
0011D5r 3  A5 rr                        lda dp+1
0011D7r 3  69 00                        adc #0          ; we only care about the carry
0011D9r 3  85 rr                        sta tmp2+1
0011DBr 3               
0011DBr 3                               ; Now we get that address and add one byte to skip over the JSR
0011DBr 3                               ; opcode
0011DBr 3  B2 rr                        lda (tmp2)
0011DDr 3  18                           clc
0011DEr 3  69 01                        adc #1
0011E0r 3  85 rr                        sta tmp3
0011E2r 3  A0 01                        ldy #1
0011E4r 3  B1 rr                        lda (tmp2),y
0011E6r 3  69 00                        adc #0          ; we only care about the carry
0011E8r 3  85 rr                        sta tmp3+1
0011EAr 3               
0011EAr 3                               ; Replace the DOVAR address with our own
0011EAr 3  A5 rr                        lda tmp1        ; LSB
0011ECr 3  92 rr                        sta (tmp3)
0011EEr 3  A5 rr                        lda tmp1+1
0011F0r 3  91 rr                        sta (tmp3),y    ; Y is still 1
0011F2r 3               
0011F2r 3                               ; Since we removed the return address that brought us here, we
0011F2r 3                               ; go back to whatever the main routine was. Otherwise, we we
0011F2r 3                               ; smash into the subroutine jump to DODOES.
0011F2r 3  60                           rts
0011F3r 3               
0011F3r 3               
0011F3r 3               
0011F3r 3               ; ## DOT ( u -- ) "Print TOS"
0011F3r 3               ; ## "."  auto  ANS core
0011F3r 3                       ; """https://forth-standard.org/standard/core/d"""
0011F3r 3               
0011F3r 3               xt_dot:
0011F3r 3  20 rr rr                     jsr underflow_1
0011F6r 3               
0011F6r 3  20 rr rr                     jsr xt_dup                      ; ( n n )
0011F9r 3  20 rr rr                     jsr xt_abs                      ; ( n u )
0011FCr 3  20 rr rr                     jsr xt_zero                     ; ( n u 0 )
0011FFr 3  20 rr rr                     jsr xt_less_number_sign         ; ( n u 0 )
001202r 3  20 rr rr                     jsr xt_number_sign_s            ; ( n ud )
001205r 3  20 rr rr                     jsr xt_rot                      ; ( ud n )
001208r 3  20 rr rr                     jsr xt_sign                     ; ( ud )
00120Br 3  20 rr rr                     jsr xt_number_sign_greater      ; ( addr u )
00120Er 3  20 rr rr                     jsr xt_type
001211r 3  20 rr rr                     jsr xt_space
001214r 3               
001214r 3  60           z_dot:          rts
001215r 3               
001215r 3               
001215r 3               
001215r 3               ; ## DOT_PAREN ( -- ) "Print input up to close paren .( comment )"
001215r 3               ; ## ".("  auto  ANS core
001215r 3                       ; """http://forth-standard.org/standard/core/Dotp"""
001215r 3               
001215r 3               xt_dot_paren:
001215r 3                               ; Put a right paren on the stack.
001215r 3  CA                           dex
001216r 3  CA                           dex
001217r 3  A9 29                        lda #41     ; Right parenthesis
001219r 3  95 00                        sta 0,x
00121Br 3  74 01                        stz 1,x
00121Dr 3               
00121Dr 3  20 rr rr                     jsr xt_parse
001220r 3  20 rr rr                     jsr xt_type
001223r 3               
001223r 3  60           z_dot_paren:    rts
001224r 3               
001224r 3               
001224r 3               
001224r 3               ; ## DOT_QUOTE ( "string" -- ) "Print string from compiled word"
001224r 3               ; ## ".""  auto  ANS core ext
001224r 3                       ; """https://forth-standard.org/standard/core/Dotq
001224r 3                       ; Compile string that is printed during run time. ANS Forth wants
001224r 3                       ; this to be compile-only, even though everybody and their friend
001224r 3                       ; uses it for everything. We follow the book here, and recommend
001224r 3                       ; `.(` for general printing.
001224r 3                       ; """
001224r 3               
001224r 3               xt_dot_quote:
001224r 3                               ; we let S" do the heavy lifting. Since we're in
001224r 3                               ; compile mode, it will save the string and reproduce it
001224r 3                               ; during runtime
001224r 3  20 rr rr                     jsr xt_s_quote
001227r 3               
001227r 3                               ; We then let TYPE do the actual printing
001227r 3  A0 rr                        ldy #>xt_type
001229r 3  A9 rr                        lda #<xt_type
00122Br 3  20 rr rr                     jsr cmpl_subroutine
00122Er 3               
00122Er 3  60           z_dot_quote:    rts
00122Fr 3               
00122Fr 3               
00122Fr 3               
00122Fr 3               ; ## DOT_R ( n u -- ) "Print NOS as unsigned number with TOS with"
00122Fr 3               ; ## ".r"  tested  ANS core ext
00122Fr 3                       ; """https://forth-standard.org/standard/core/DotR
00122Fr 3                       ;
00122Fr 3                       ; Based on the Forth code
00122Fr 3                       ;  : .R  >R DUP ABS 0 <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
00122Fr 3                       ; """
00122Fr 3               
00122Fr 3               xt_dot_r:
00122Fr 3  20 rr rr                     jsr underflow_2
001232r 3               
001232r 3  20 rr rr                     jsr xt_to_r
001235r 3  20 rr rr                     jsr xt_dup
001238r 3  20 rr rr                     jsr xt_abs
00123Br 3  20 rr rr                     jsr xt_zero
00123Er 3  20 rr rr                     jsr xt_less_number_sign
001241r 3  20 rr rr                     jsr xt_number_sign_s
001244r 3  20 rr rr                     jsr xt_rot
001247r 3  20 rr rr                     jsr xt_sign
00124Ar 3  20 rr rr                     jsr xt_number_sign_greater
00124Dr 3  20 rr rr                     jsr xt_r_from
001250r 3  20 rr rr                     jsr xt_over
001253r 3  20 rr rr                     jsr xt_minus
001256r 3  20 rr rr                     jsr xt_spaces
001259r 3  20 rr rr                     jsr xt_type
00125Cr 3               
00125Cr 3  60           z_dot_r:        rts
00125Dr 3               
00125Dr 3               
00125Dr 3               
00125Dr 3               ; ## DOT_S ( -- ) "Print content of Data Stack"
00125Dr 3               ; ## ".s"  tested  ANS tools
00125Dr 3                       ; """https://forth-standard.org/standard/tools/DotS
00125Dr 3                       ; Print content of Data Stack non-distructively. We follow the format
00125Dr 3                       ; of Gforth and print the number of elements first in brackets,
00125Dr 3                       ; followed by the Data Stack content (if any).
00125Dr 3                       ;
00125Dr 3                       ; Since this is for humans, we don't have to worry about speed.
00125Dr 3                       ; """
00125Dr 3               
00125Dr 3               xt_dot_s:
00125Dr 3  20 rr rr                     jsr xt_depth    ; ( -- u )
001260r 3               
001260r 3                               ; Print stack depth in brackets
001260r 3  A9 3C                        lda #$3c        ; ASCII for "<"
001262r 3  20 rr rr                     jsr emit_a
001265r 3               
001265r 3                               ; We keep a copy of the number of the things on the stack
001265r 3                               ; to use as a counter later down. This assumes that there
001265r 3                               ; are less than 255 elements on the stack
001265r 3  B5 00                        lda 0,x
001267r 3  48                           pha
001268r 3               
001268r 3                               ; print unsigned number without the trailing space
001268r 3  CA                           dex             ; DUP
001269r 3  CA                           dex
00126Ar 3  95 00                        sta 0,x
00126Cr 3  74 01                        stz 1,x
00126Er 3               
00126Er 3  20 rr rr                     jsr print_u
001271r 3               
001271r 3  A9 3E                        lda #$3e        ; ASCII for ">"
001273r 3  20 rr rr                     jsr emit_a
001276r 3  A9 20                        lda #AscSP      ; ASCII for SPACE
001278r 3  20 rr rr                     jsr emit_a
00127Br 3               
00127Br 3  E8                           inx
00127Cr 3  E8                           inx
00127Dr 3               
00127Dr 3                               ; There will be lots of cases where the stack is empty. If that
00127Dr 3                               ; is so, get out of here quickly
00127Dr 3  E0 FF                        cpx #dsp0
00127Fr 3  F0 1E                        beq @done
001281r 3               
001281r 3               @have_stack:
001281r 3                               ; We have at least one element on the stack. The depth of the
001281r 3                               ; stack is on the stack, we can use it as a counter. We go
001281r 3                               ; from bottom to top
001281r 3  7A                           ply
001282r 3               
001282r 3  A9 FE                        lda #dsp0-1     ; go up one to avoid garbage
001284r 3  85 rr                        sta tmp3
001286r 3  64 rr                        stz tmp3+1      ; must be zero page on the 65c02
001288r 3               @loop:
001288r 3  CA                           dex
001289r 3  CA                           dex
00128Ar 3               
00128Ar 3  B2 rr                        lda (tmp3)
00128Cr 3  95 01                        sta 1,x
00128Er 3  C6 rr                        dec tmp3
001290r 3               
001290r 3  B2 rr                        lda (tmp3)
001292r 3  95 00                        sta 0,x
001294r 3  C6 rr                        dec tmp3
001296r 3  5A                           phy
001297r 3               
001297r 3  20 rr rr                     jsr xt_dot
00129Ar 3               
00129Ar 3  7A                           ply
00129Br 3  88                           dey
00129Cr 3  D0 EA                        bne @loop
00129Er 3               
00129Er 3  48                           pha             ; dummy to balance stack
00129Fr 3               @done:
00129Fr 3  68                           pla
0012A0r 3  60           z_dot_s:        rts
0012A1r 3               
0012A1r 3               
0012A1r 3               
0012A1r 3               ; ## D_DOT ( d -- ) "Print double"
0012A1r 3               ; ## "d."  tested  ANS double
0012A1r 3                       ; """http://forth-standard.org/standard/double/Dd"""
0012A1r 3                       ;
0012A1r 3                       ; From the Forth code:
0012A1r 3                       ; : D. TUCK DABS <# #S ROT SIGN #> TYPE SPACE ;
0012A1r 3                       ; """
0012A1r 3               
0012A1r 3               xt_d_dot:
0012A1r 3  20 rr rr                     jsr underflow_2
0012A4r 3               
0012A4r 3  20 rr rr                     jsr xt_tuck
0012A7r 3  20 rr rr                     jsr xt_dabs
0012AAr 3  20 rr rr                     jsr xt_less_number_sign
0012ADr 3  20 rr rr                     jsr xt_number_sign_s
0012B0r 3  20 rr rr                     jsr xt_rot
0012B3r 3  20 rr rr                     jsr xt_sign
0012B6r 3  20 rr rr                     jsr xt_number_sign_greater
0012B9r 3  20 rr rr                     jsr xt_type
0012BCr 3  20 rr rr                     jsr xt_space
0012BFr 3               
0012BFr 3  60           z_d_dot:        rts
0012C0r 3               
0012C0r 3               
0012C0r 3               
0012C0r 3               ; ## D_DOT_R ( d u -- ) "Print double right-justified u wide"
0012C0r 3               ; ## "d.r"  tested  ANS double
0012C0r 3                       ; """http://forth-standard.org/standard/double/DDotR"""
0012C0r 3                       ; Based on the Forth code
0012C0r 3                       ;  : D.R >R TUCK DABS <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
0012C0r 3                       ; """
0012C0r 3               
0012C0r 3               xt_d_dot_r:
0012C0r 3  20 rr rr                     jsr underflow_3
0012C3r 3                               ; From the forth code:
0012C3r 3  20 rr rr                     jsr xt_to_r
0012C6r 3  20 rr rr                     jsr xt_tuck
0012C9r 3  20 rr rr                     jsr xt_dabs
0012CCr 3  20 rr rr                     jsr xt_less_number_sign
0012CFr 3  20 rr rr                     jsr xt_number_sign_s
0012D2r 3  20 rr rr                     jsr xt_rot
0012D5r 3  20 rr rr                     jsr xt_sign
0012D8r 3  20 rr rr                     jsr xt_number_sign_greater
0012DBr 3  20 rr rr                     jsr xt_r_from
0012DEr 3  20 rr rr                     jsr xt_over
0012E1r 3  20 rr rr                     jsr xt_minus
0012E4r 3  20 rr rr                     jsr xt_spaces
0012E7r 3  20 rr rr                     jsr xt_type
0012EAr 3               
0012EAr 3  60           z_d_dot_r:      rts
0012EBr 3               
0012EBr 3               
0012EBr 3               
0012EBr 3               ; ## DROP ( u -- ) "Pop top entry on Data Stack"
0012EBr 3               ; ## "drop"  auto  ANS core
0012EBr 3                       ; """https://forth-standard.org/standard/core/DROP"""
0012EBr 3               xt_drop:
0012EBr 3  20 rr rr                     jsr underflow_1
0012EEr 3               
0012EEr 3  E8                           inx
0012EFr 3  E8                           inx
0012F0r 3               
0012F0r 3  60           z_drop:         rts
0012F1r 3               
0012F1r 3               
0012F1r 3               ; ## DUMP ( addr u -- ) "Display a memory region"
0012F1r 3               ; ## "dump"  tested  ANS tools
0012F1r 3                       ; """https://forth-standard.org/standard/tools/DUMP
0012F1r 3                       ;
0012F1r 3                       ; DUMP's exact output is defined as "implementation dependent".
0012F1r 3                       ; This is in assembler because it is
0012F1r 3                       ; useful for testing and development, so we want to have it work
0012F1r 3                       ; as soon as possible. Uses TMP2
0012F1r 3                       ; """
0012F1r 3               
0012F1r 3               xt_dump:
0012F1r 3  20 rr rr                     jsr underflow_2
0012F4r 3               @row:
0012F4r 3                               ; start counter for 16 numbers per row
0012F4r 3  A0 10                        ldy #16
0012F6r 3               
0012F6r 3                               ; We use TMP2 as the index for the ASCII characters
0012F6r 3                               ; that we print at the and of the hex block. We
0012F6r 3                               ; start saving them at HERE (CP)
0012F6r 3  64 rr                        stz tmp2
0012F8r 3               
0012F8r 3  20 rr rr                     jsr xt_cr
0012FBr 3               
0012FBr 3                               ; print address number
0012FBr 3  B5 03                        lda 3,x
0012FDr 3  20 rr rr                     jsr byte_to_ascii
001300r 3  B5 02                        lda 2,x
001302r 3  20 rr rr                     jsr byte_to_ascii
001305r 3               
001305r 3  20 rr rr                     jsr xt_space
001308r 3  20 rr rr                     jsr xt_space
00130Br 3               @loop:
00130Br 3                               ; if there are zero bytes left to display, we're done
00130Br 3  B5 00                        lda 0,x
00130Dr 3  15 01                        ora 1,x
00130Fr 3  F0 39                        beq @all_printed
001311r 3               
001311r 3                               ; dump the contents
001311r 3  A1 02                        lda (2,x)
001313r 3  48                           pha                     ; byte_to_ascii destroys A
001314r 3  20 rr rr                     jsr byte_to_ascii
001317r 3  20 rr rr                     jsr xt_space
00131Ar 3  68                           pla
00131Br 3               
00131Br 3                               ; Handle ASCII printing
00131Br 3  20 rr rr                     jsr is_printable
00131Er 3  B0 02                        bcs @printable
001320r 3  A9 2E                        lda #'.'                 ; Print dot if not printable
001322r 3               @printable:
001322r 3  5A                           phy                     ; save counter
001323r 3  A4 rr                        ldy tmp2
001325r 3  91 rr                        sta (cp),y
001327r 3  E6 rr                        inc tmp2
001329r 3  7A                           ply
00132Ar 3               
00132Ar 3                               ; extra space after eight bytes
00132Ar 3  C0 09                        cpy #9
00132Cr 3  D0 03                        bne @next_char
00132Er 3  20 rr rr                     jsr xt_space
001331r 3               
001331r 3               @next_char:
001331r 3  F6 02                        inc 2,x
001333r 3  D0 02                        bne @counter
001335r 3  F6 03                        inc 3,x
001337r 3               
001337r 3               @counter:
001337r 3                               ; loop counter
001337r 3  B5 00                        lda 0,x
001339r 3  D0 02                        bne @1
00133Br 3  D6 01                        dec 1,x
00133Dr 3               @1:
00133Dr 3  D6 00                        dec 0,x
00133Fr 3  88                           dey
001340r 3  D0 C9                        bne @loop               ; next byte
001342r 3               
001342r 3                               ; Done with one line, print the ASCII version of these
001342r 3                               ; characters
001342r 3  20 rr rr                     jsr xt_space
001345r 3  20 rr rr                     jsr print_ascii
001348r 3               
001348r 3  80 AA                        bra @row                ; new row
00134Ar 3               
00134Ar 3               @all_printed:
00134Ar 3                               ; See if there are any ASCII characters in the buffer
00134Ar 3                               ; left to print
00134Ar 3  A5 rr                        lda tmp2
00134Cr 3  F0 06                        beq @done
00134Er 3               
00134Er 3                               ; In theory, we could try to make the ASCII part line
00134Er 3                               ; up with the line before it. But that is a hassle (we
00134Er 3                               ; use three bytes for each missed hex entry, and
00134Er 3                               ; then there is the gap after eight entries) and it
00134Er 3                               ; makes it harder to read. We settle for one extra
00134Er 3                               ; space instead for the moment
00134Er 3  20 rr rr                     jsr xt_space
001351r 3  20 rr rr                     jsr print_ascii
001354r 3               @done:
001354r 3  20 rr rr                     jsr xt_two_drop         ; one byte less than 4x INX
001357r 3  60           z_dump:         rts
001358r 3               
001358r 3               
001358r 3               print_ascii:
001358r 3                               ; Print the ASCII characters that we have saved from
001358r 3                               ; HERE (CP) to HERE plus whatever is in TMP2. This routine
001358r 3                               ; is not compiled (DUMP is probably never compiled anyway)
001358r 3                               ; but we keep it inside the scope of DUMP.
001358r 3  A0 00                        ldy #0
00135Ar 3               @ascii_loop:
00135Ar 3  B1 rr                        lda (cp),y
00135Cr 3  20 rr rr                     jsr emit_a
00135Fr 3  C8                           iny
001360r 3               
001360r 3                               ; extra space after eight chars
001360r 3  C0 08                        cpy #8
001362r 3  D0 03                        bne @1
001364r 3  20 rr rr                     jsr xt_space
001367r 3               @1:
001367r 3  C6 rr                        dec tmp2
001369r 3  D0 EF                        bne @ascii_loop
00136Br 3               
00136Br 3  60                           rts
00136Cr 3               
00136Cr 3               
00136Cr 3               
00136Cr 3               ; ## DUP ( u -- u u ) "Duplicate TOS"
00136Cr 3               ; ## "dup"  auto  ANS core
00136Cr 3                       ; """https://forth-standard.org/standard/core/DUP"""
00136Cr 3               xt_dup:
00136Cr 3  20 rr rr                     jsr underflow_1
00136Fr 3               
00136Fr 3  CA                           dex
001370r 3  CA                           dex
001371r 3               
001371r 3  B5 02                        lda 2,x         ; LSB
001373r 3  95 00                        sta 0,x
001375r 3  B5 03                        lda 3,x         ; MSB
001377r 3  95 01                        sta 1,x
001379r 3               
001379r 3  60           z_dup:          rts
00137Ar 3               
00137Ar 3               
00137Ar 3               ; ## ED ( -- u ) "Line-based editor"
00137Ar 3               ; ## "ed"  fragment  Tali Forth
00137Ar 3                       ; """Start the line-based editor ed6502. See separate file
00137Ar 3                       ; ed.asm or the manual for details.
00137Ar 3                       ; """
00137Ar 3               xt_ed:
00137Ar 3                           .ifdef ed6502
00137Ar 3                               jsr ed6502      ; kept in separate file
00137Ar 3                           .endif
00137Ar 3               
00137Ar 3  60           z_ed:           rts
00137Br 3               
00137Br 3               
00137Br 3               ; ## EDITOR_WORDLIST ( -- u ) "WID for the Editor wordlist"
00137Br 3               ; ## "editor-wordlist"  tested  Tali Editor
00137Br 3                       ; """ Commonly used like `editor-wordlist >order` to add the editor
00137Br 3                       ; words to the search order so they can be used.  This will need
00137Br 3                       ; to be done before any of the words marked "Tali Editor" can be
00137Br 3                       ; used.  See the tutorial on Wordlists and the Search Order for
00137Br 3                       ; more information.
00137Br 3               
00137Br 3                       ;
00137Br 3                       ; This is a dummy entry, the code is shared with ONE
00137Br 3                       ; """
00137Br 3               
00137Br 3               
00137Br 3               ; ## ELSE (C: orig -- orig) ( -- ) "Conditional flow control"
00137Br 3               ; ## "else"  auto  ANS core
00137Br 3                       ; """http://forth-standard.org/standard/core/ELSE
00137Br 3                       ;
00137Br 3                       ; The code is shared with ENDOF
00137Br 3                       ; """
00137Br 3               
00137Br 3               xt_else:
00137Br 3               xt_endof:
00137Br 3                               ; Put an unconditional branch.
00137Br 3  A0 rr                        ldy #>branch_runtime
00137Dr 3  A9 rr                        lda #<branch_runtime
00137Fr 3  20 rr rr                     jsr cmpl_subroutine
001382r 3               
001382r 3                               ; Put the address of the branch address on the stack.
001382r 3  20 rr rr                     jsr xt_here
001385r 3               
001385r 3                               ; Use zero for the branch address for now.
001385r 3                               ; THEN will fill it in later.
001385r 3  20 rr rr                     jsr xt_zero
001388r 3  20 rr rr                     jsr xt_comma
00138Br 3               
00138Br 3                               ; Get the address to jump to (just after the
00138Br 3                               ; unconditional branch) for the IF to jump to
00138Br 3                               ; when false.
00138Br 3  20 rr rr                     jsr xt_here
00138Er 3  20 rr rr                     jsr xt_rot
001391r 3               
001391r 3                               ; Update the original if 0branch address.
001391r 3  20 rr rr                     jsr xt_store
001394r 3               z_else:
001394r 3               z_endof:
001394r 3  60                           rts
001395r 3               
001395r 3               
001395r 3               
001395r 3               branch_runtime:
001395r 3                       ; """Runtime component for a branch. Used by ELSE and ENDOF. This was
001395r 3                       ; formally part of a separate word BRANCH which was later removed.
001395r 3                       ; """
001395r 3               
001395r 3                               ; The address on the Return Stack points to the last byte
001395r 3                               ; of the JSR address, one byte below the branch literal
001395r 3  68                           pla
001396r 3  85 rr                        sta tmpbranch
001398r 3  68                           pla
001399r 3  85 rr                        sta tmpbranch+1
00139Br 3               
00139Br 3                               ; Keep in mind: the address we just popped points one byte
00139Br 3                               ; lower than the branch literal we want to grab
00139Br 3  A0 01                        ldy #1
00139Dr 3  B1 rr                        lda (tmpbranch),y  ; LSB
00139Fr 3  85 rr                        sta tmp1
0013A1r 3  C8                           iny
0013A2r 3  B1 rr                        lda (tmpbranch),y  ; MSB
0013A4r 3  85 rr                        sta tmp1+1
0013A6r 3               
0013A6r 3  6C rr rr                     jmp (tmp1)
0013A9r 3               
0013A9r 3               
0013A9r 3               
0013A9r 3               ; ## EMIT ( char -- ) "Print character to current output"
0013A9r 3               ; ## "emit"  auto  ANS core
0013A9r 3                       ; """https://forth-standard.org/standard/core/EMIT
0013A9r 3                       ; Run-time default for EMIT. The user can revector this by changing
0013A9r 3                       ; the value of the OUTPUT variable. We ignore the MSB completely, and
0013A9r 3                       ; do not check to see if we have been given a valid ASCII character.
0013A9r 3                       ; Don't make this native compile.
0013A9r 3                       ; """
0013A9r 3               
0013A9r 3               xt_emit:
0013A9r 3  20 rr rr                     jsr underflow_1
0013ACr 3               
0013ACr 3  B5 00                        lda 0,x
0013AEr 3  E8                           inx
0013AFr 3  E8                           inx
0013B0r 3               
0013B0r 3               emit_a:
0013B0r 3                       ; We frequently want to print the character in A without fooling
0013B0r 3                       ; around with the Data Stack. This is emit_a's job, which still
0013B0r 3                       ; allows the output to be vectored. Call it with JSR as you
0013B0r 3                       ; would XT_EMIT
0013B0r 3  6C rr rr                     jmp (output)            ; JSR/RTS
0013B3r 3               
0013B3r 3               z_emit:         ; never reached
0013B3r 3               
0013B3r 3               
0013B3r 3               
0013B3r 3               ; ## EMPTY_BUFFERS ( -- ) "Empty all buffers without saving"
0013B3r 3               ; ## "empty-buffers"  tested  ANS block ext
0013B3r 3                       ; """https://forth-standard.org/standard/block/EMPTY-BUFFERS"""
0013B3r 3               xt_empty_buffers:
0013B3r 3                               ; Set the buffer status to empty.
0013B3r 3  A0 2C                        ldy #buffstatus_offset
0013B5r 3  A9 00                        lda #0
0013B7r 3  91 rr                        sta (up),y      ; Only LSB is used.
0013B9r 3               z_empty_buffers:
0013B9r 3  60                           rts
0013BAr 3               
0013BAr 3               
0013BAr 3               ; ## ENDCASE (C: case-sys -- ) ( x -- ) "Conditional flow control"
0013BAr 3               ; ## "endcase"  auto  ANS core ext
0013BAr 3                       ; """http://forth-standard.org/standard/core/ENDCASE"""
0013BAr 3               
0013BAr 3               xt_endcase:
0013BAr 3                               ; Postpone DROP to remove the item
0013BAr 3                               ; being checked.
0013BAr 3  A0 rr                        ldy #>xt_drop
0013BCr 3  A9 rr                        lda #<xt_drop
0013BEr 3  20 rr rr                     jsr cmpl_subroutine
0013C1r 3               
0013C1r 3                               ; There are a number of address (of branches that need their
0013C1r 3                               ; jump addressed filled in with the address of right here).
0013C1r 3                               ; Keep calling THEN to deal with them until we reach the
0013C1r 3                               ; 0 that CASE put on the stack at the beginning.
0013C1r 3               @endcase_loop:
0013C1r 3                               ; Check for 0 on the stack.
0013C1r 3  B5 00                        lda 0,x
0013C3r 3  15 01                        ora 1,x
0013C5r 3  F0 05                        beq @done
0013C7r 3               
0013C7r 3  20 rr rr                     jsr xt_then
0013CAr 3  80 F5                        bra @endcase_loop
0013CCr 3               @done:
0013CCr 3                               ; Remove the 0 from the stack.
0013CCr 3  E8                           inx
0013CDr 3  E8                           inx
0013CEr 3  60           z_endcase:      rts
0013CFr 3               
0013CFr 3               
0013CFr 3               
0013CFr 3               ; ## ENDOF (C: case-sys1 of-sys1-- case-sys2) ( -- ) "Conditional flow control"
0013CFr 3               ; ## "endof"  auto  ANS core ext
0013CFr 3                       ; """http://forth-standard.org/standard/core/ENDOF
0013CFr 3                       ; This is a dummy entry, the code is shared with ELSE
0013CFr 3                       ; """
0013CFr 3               
0013CFr 3               
0013CFr 3               ; ## ENVIRONMENT_Q  ( addr u -- 0 | i*x true )  "Return system information"
0013CFr 3               ; ## "environment?"  auto  ANS core
0013CFr 3                       ; """https://forth-standard.org/standard/core/ENVIRONMENTq
0013CFr 3                       ;
0013CFr 3                       ; By ANS definition, we use upper-case strings here, see the
0013CFr 3                       ; string file for details. This can be realized as a high-level
0013CFr 3                       ; Forth word as
0013CFr 3                       ;
0013CFr 3                       ; : STRING_OF POSTPONE 2OVER POSTPONE COMPARE POSTPONE 0=
0013CFr 3                       ;    POSTPONE IF POSTPONE 2DROP ; IMMEDIATE COMPILE-ONLY
0013CFr 3                       ; HEX
0013CFr 3                       ; : ENVIRONMENT? ( C-ADDR U -- FALSE | I*X TRUE )
0013CFr 3                       ; CASE
0013CFr 3                       ; S" /COUNTED-STRING"    STRING_OF  7FFF TRUE ENDOF
0013CFr 3                       ; S" /HOLD"              STRING_OF    FF TRUE ENDOF
0013CFr 3                       ; S" /PAD"               STRING_OF    54 TRUE ENDOF ( 84 DECIMAL )
0013CFr 3                       ; S" ADDRESS-UNIT-BITS"  STRING_OF     8 TRUE ENDOF
0013CFr 3                       ; S" FLOORED"            STRING_OF FALSE TRUE ENDOF ( WE HAVE SYMMETRIC )
0013CFr 3                       ; S" MAX-CHAR"           STRING_OF   255 TRUE ENDOF
0013CFr 3                       ; S" MAX-D"              STRING_OF
0013CFr 3                                                    ; 7FFFFFFF. TRUE ENDOF
0013CFr 3                       ; S" MAX-N"              STRING_OF  7FFF TRUE ENDOF
0013CFr 3                       ; S" MAX-U"              STRING_OF  FFFF TRUE ENDOF
0013CFr 3                       ; S" MAX-UD"             STRING_OF
0013CFr 3                                                    ; FFFFFFFF. TRUE ENDOF
0013CFr 3                       ; S" RETURN-STACK-CELLS" STRING_OF    80 TRUE ENDOF
0013CFr 3                       ; S" STACK-CELLS"        STRING_OF    20 TRUE ENDOF ( FROM DEFINITIONS.ASM )
0013CFr 3                       ; ( DEFAULT ) 2DROP FALSE FALSE ( ONE FALSE WILL DROPPED BY ENDCASE )
0013CFr 3                       ; ENDCASE ;
0013CFr 3                       ;
0013CFr 3                       ; but that uses lots of memory and increases the start up time. This
0013CFr 3                       ; word is rarely used so we can try to keep it short at the expense
0013CFr 3                       ; of speed.
0013CFr 3                       ; """
0013CFr 3               
0013CFr 3               xt_environment_q:
0013CFr 3  20 rr rr                     jsr underflow_1
0013D2r 3               
0013D2r 3                               ; This code is table-driven: We walk through the list of
0013D2r 3                               ; strings until we find one that matches, and then we take
0013D2r 3                               ; the equivalent data from the results table. This is made
0013D2r 3                               ; a bit harder by the fact that some of these return a
0013D2r 3                               ; double-cell number and some a single-cell one.
0013D2r 3               
0013D2r 3                               ; We will walk through the table with variables that return
0013D2r 3                               ; a single-cell result
0013D2r 3  A0 00                        ldy #00                 ; counter for table
0013D4r 3               
0013D4r 3                               ; We use a flag on the the stack to signal if we have a single-cell
0013D4r 3                               ; or double-cell number. We use 0 to signal single-cell and 1 for
0013D4r 3                               ; double-cell.
0013D4r 3  5A                           phy
0013D5r 3               @table_loop:
0013D5r 3                               ; We arrived here with the address of the string to be checked
0013D5r 3                               ; on the stack. We make a copy. Index is in Y
0013D5r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
0013D8r 3               
0013D8r 3                               ; We do our work on the TOS to speed things up
0013D8r 3  CA                           dex
0013D9r 3  CA                           dex                     ; ( addr u addr u ? )
0013DAr 3               
0013DAr 3                               ; Get address of string to check from table
0013DAr 3  B9 rr rr                     lda env_table_single,y
0013DDr 3  95 00                        sta 0,x
0013DFr 3  C8                           iny
0013E0r 3  B9 rr rr                     lda env_table_single,y
0013E3r 3  95 01                        sta 1,x                 ; ( addr u addr u addr-t )
0013E5r 3  C8                           iny
0013E6r 3               
0013E6r 3                               ; See if this is the last entry. The LSB is still in A
0013E6r 3  15 00                        ora 0,x
0013E8r 3  F0 4D                        beq @table_done
0013EAr 3               
0013EAr 3                               ; We have a string entry. The address there is stored in
0013EAr 3                               ; old-style address format, that is, the first byte is the
0013EAr 3                               ; length of the string
0013EAr 3  5A                           phy                     ; save Y, which is used by COUNT
0013EBr 3  20 rr rr                     jsr xt_count            ; ( addr u addr u addr-s u-s )
0013EEr 3  20 rr rr                     jsr xt_compare          ; ( addr u f )
0013F1r 3  7A                           ply
0013F2r 3               
0013F2r 3                               ; If we found a match (flag is zero -- COMPARE is weird
0013F2r 3                               ; that way), return the result
0013F2r 3  B5 00                        lda 0,x
0013F4r 3  15 01                        ora 1,x
0013F6r 3  F0 04                        beq @got_result
0013F8r 3               
0013F8r 3                               ; Flag is not zero, so not a perfect match, so try next
0013F8r 3                               ; word
0013F8r 3  E8                           inx                     ; DROP, now ( addr u )
0013F9r 3  E8                           inx
0013FAr 3               
0013FAr 3  80 D9                        bra @table_loop
0013FCr 3               
0013FCr 3               @got_result:
0013FCr 3                               ; We arrive here with ( addr u -1 ) and know that we've found
0013FCr 3                               ; a match. The index of the match+2 is in Y.
0013FCr 3  E8                           inx                     ; drop flag, now ( addr u )
0013FDr 3  E8                           inx
0013FEr 3  88                           dey                     ; go back to index we had
0013FFr 3  88                           dey
001400r 3               
001400r 3                               ; See if this is a single-cell word.
001400r 3  68                           pla
001401r 3  D0 0D                        bne @double_result
001403r 3               
001403r 3                               ; Single-cell result
001403r 3  B9 rr rr                     lda env_results_single,y
001406r 3  95 02                        sta 2,x
001408r 3  C8                           iny
001409r 3  B9 rr rr                     lda env_results_single,y
00140Cr 3  95 03                        sta 3,x                 ; ( res u )
00140Er 3               
00140Er 3  80 1F                        bra @set_flag
001410r 3               
001410r 3               @double_result:
001410r 3                               ; This is a double-celled result, which means we have to
001410r 3                               ; fool around with the index some more. We also need a
001410r 3                               ; further cell on the stack
001410r 3  CA                           dex                     ; ( addr u ? )
001411r 3  CA                           dex
001412r 3               
001412r 3                               ; We have 11 single-cell words we check, plus the 0000 as
001412r 3                               ; a marker for the end of the table, so we arrive here
001412r 3                               ; with Y as 22 or more. To get the index for the double-
001412r 3                               ; cell words, we move the result
001412r 3  98                           tya
001413r 3  38                           sec
001414r 3  E9 18                        sbc #24
001416r 3               
001416r 3                               ; We have four bytes per entry in the table, but the index
001416r 3                               ; keeps increasing by two, so we only have to multiply by
001416r 3                               ; two (shift left once) to get the right result
001416r 3  0A                           asl
001417r 3  A8                           tay
001418r 3               
001418r 3  B9 rr rr                     lda env_results_double,y
00141Br 3  95 02                        sta 2,x
00141Dr 3  C8                           iny
00141Er 3  B9 rr rr                     lda env_results_double,y
001421r 3  95 03                        sta 3,x                 ; ( res u ? )
001423r 3  C8                           iny
001424r 3               
001424r 3  B9 rr rr                     lda env_results_double,y
001427r 3  95 04                        sta 4,x
001429r 3  C8                           iny
00142Ar 3  B9 rr rr                     lda env_results_double,y
00142Dr 3  95 05                        sta 5,x                 ; ( res res ? )
00142Fr 3               
00142Fr 3                               ; fall through to @set_flag
00142Fr 3               @set_flag:
00142Fr 3  A9 FF                        lda #$ff
001431r 3  95 00                        sta 0,x
001433r 3  95 01                        sta 1,x                 ; ( res f )
001435r 3               
001435r 3  80 14                        bra @done
001437r 3               @table_done:
001437r 3                               ; We're done with a table, because the entry was a zero.
001437r 3                               ; We arrive here with ( addr u addr u 0 )
001437r 3               
001437r 3                               ; We take the flag from stack and increase it by one. If the
001437r 3                               ; flag is zero, we have just completed the single-cell number
001437r 3                               ; strings, so we in increase the flag and try again. Otherwise,
001437r 3                               ; we're done with the double-cell table without having found
001437r 3                               ; a match, and we're done
001437r 3  68                           pla
001438r 3  D0 09                        bne @no_match
00143Ar 3               
00143Ar 3                               ; Flag is zero, increase it to one and start over to check
00143Ar 3                               ; double-cell values
00143Ar 3  1A                           inc
00143Br 3  48                           pha
00143Cr 3               
00143Cr 3  8A                           txa
00143Dr 3  18                           clc
00143Er 3  69 06                        adc #6                  ; skip six bytes
001440r 3  AA                           tax                     ; ( addr u )
001441r 3               
001441r 3  80 92                        bra @table_loop
001443r 3               @no_match:
001443r 3                               ; Bummer, not found. We arrive here with
001443r 3                               ; ( addr u addr u 0 ) and need to return just a zero
001443r 3  8A                           txa
001444r 3  18                           clc
001445r 3  69 0A                        adc #10
001447r 3  AA                           tax                     ; ( addr ) - not ( 0 ) !
001448r 3               
001448r 3  20 rr rr                     jsr xt_false
00144Br 3               @done:
00144Br 3               z_environment_q:
00144Br 3  60                           rts
00144Cr 3               
00144Cr 3               
00144Cr 3               ; Tables for ENVIRONMENT?. We use two separate ones, one for the single-cell
00144Cr 3               ; results and one for the double-celled results. The zero cell at the
00144Cr 3               ; end of each table marks its, uh, end. The strings themselves are defined
00144Cr 3               ; in strings.asm. Note if we add more entries to the single-cell table, we
00144Cr 3               ; have to adapt the result code for double printout, where we subtract 22
00144Cr 3               ; (two bytes each single-cell string and two bytes for the end-of-table
00144Cr 3               ; marker 0000
00144Cr 3               env_table_single:
00144Cr 3  rr rr rr rr          .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
001450r 3  rr rr rr rr  
001454r 3  rr rr        
001456r 3  rr rr rr rr          .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
00145Ar 3  rr rr rr rr  
00145Er 3  rr rr rr rr          .word envs_sc, envs_wl, 0000
001462r 3  00 00        
001464r 3               
001464r 3               env_table_double:
001464r 3  rr rr rr rr          .word envs_max_d, envs_max_ud, 0000
001468r 3  00 00        
00146Ar 3               
00146Ar 3               env_results_single:
00146Ar 3  FF 7F                .word $7FFF     ; /COUNTED-STRING
00146Cr 3  FF 00                .word $00FF     ; /HOLD
00146Er 3  54 00                .word $0054     ; /PAD (this is 84 decimal)
001470r 3  08 00                .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
001472r 3  00 00                .word 0000      ; FLOORED ("FALSE", we have symmetric)
001474r 3  FF 00                .word $00FF     ; MAX-CHAR
001476r 3  FF 7F                .word $7FFF     ; MAX-N
001478r 3  FF FF                .word $FFFF     ; MAX-U
00147Ar 3  80 00                .word $0080     ; RETURN-STACK-CELLS
00147Cr 3  20 00                .word $0020     ; STACK-CELLS (from definitions.asm)
00147Er 3  09 00                .word $0009     ; WORDLISTS
001480r 3               
001480r 3               env_results_double:
001480r 3  FF 7F FF FF          .word $7FFF, $FFFF      ; MAX-D
001484r 3  FF FF FF FF          .word $FFFF, $FFFF      ; MAX-UD
001488r 3               
001488r 3               
001488r 3               ; ## EQUAL ( n n -- f ) "See if TOS and NOS are equal"
001488r 3               ; ## "="  auto  ANS core
001488r 3                       ; """https://forth-standard.org/standard/core/Equal"""
001488r 3               
001488r 3               xt_equal:
001488r 3  20 rr rr                     jsr underflow_2
00148Br 3               
00148Br 3  B5 00                        lda 0,x                 ; LSB
00148Dr 3  D5 02                        cmp 2,x
00148Fr 3  D0 0A                        bne @false
001491r 3               
001491r 3  B5 01                        lda 1,x                 ; MSB
001493r 3  D5 03                        cmp 3,x
001495r 3  D0 04                        bne @false
001497r 3               
001497r 3  A9 FF                        lda #$ff
001499r 3  80 02                        bra @done
00149Br 3               
00149Br 3  A9 00        @false:         lda #0                  ; drop thru to done
00149Dr 3               
00149Dr 3  95 02        @done:          sta 2,x
00149Fr 3  95 03                        sta 3,x
0014A1r 3               
0014A1r 3  E8                           inx
0014A2r 3  E8                           inx
0014A3r 3               
0014A3r 3  60           z_equal:        rts
0014A4r 3               
0014A4r 3               
0014A4r 3               
0014A4r 3               ; ## BLANK ( addr u -- ) "Fill memory region with spaces"
0014A4r 3               ; ## "blank"  auto  ANS string
0014A4r 3                       ; """https://forth-standard.org/standard/string/BLANK"""
0014A4r 3               xt_blank:
0014A4r 3                               ; We don't check for underflow here because
0014A4r 3                               ; we deal with that in FILL
0014A4r 3  CA                           dex
0014A5r 3  CA                           dex
0014A6r 3  A9 20                        lda #AscSP
0014A8r 3  95 00                        sta 0,x
0014AAr 3  74 01                        stz 1,x
0014ACr 3               
0014ACr 3  80 06                        bra xt_fill     ; skip over code for ERASE
0014AEr 3               
0014AEr 3               
0014AEr 3               ; ## ERASE ( addr u -- ) "Fill memory region with zeros"
0014AEr 3               ; ## "erase"  auto  ANS core ext
0014AEr 3                       ; """https://forth-standard.org/standard/core/ERASE
0014AEr 3                       ; Note that ERASE works with "address" units
0014AEr 3                       ; (bytes), not cells.
0014AEr 3                       ; """
0014AEr 3               
0014AEr 3               xt_erase:
0014AEr 3                               ; We don't check for underflow here because
0014AEr 3                               ; we deal with that in FILL
0014AEr 3  CA                           dex
0014AFr 3  CA                           dex
0014B0r 3  74 00                        stz 0,x
0014B2r 3  74 01                        stz 1,x
0014B4r 3               
0014B4r 3                               ; fall through to FILL
0014B4r 3               
0014B4r 3               ; ## FILL ( addr u char -- ) "Fill a memory region with a character"
0014B4r 3               ; ## "fill"  auto  ANS core
0014B4r 3                       ; """https://forth-standard.org/standard/core/FILL
0014B4r 3                       ; Fill u bytes of memory with char starting at addr. Note that
0014B4r 3                       ; this works on bytes, not on cells. On an 8-bit machine such as the
0014B4r 3                       ; 65c02, this is a serious pain in the rear. It is not defined what
0014B4r 3                       ; happens when we reach the end of the address space
0014B4r 3                       ; """
0014B4r 3               xt_fill:
0014B4r 3  20 rr rr                     jsr underflow_3
0014B7r 3               
0014B7r 3                               ; We use tmp1 to hold the address
0014B7r 3  B5 04                        lda 4,x         ; LSB
0014B9r 3  85 rr                        sta tmp1
0014BBr 3  B5 05                        lda 5,x
0014BDr 3  85 rr                        sta tmp1+1
0014BFr 3               
0014BFr 3                               ; We use tmp2 to hold the counter
0014BFr 3  B5 02                        lda 2,x
0014C1r 3  85 rr                        sta tmp2
0014C3r 3  B5 03                        lda 3,x
0014C5r 3  85 rr                        sta tmp2+1
0014C7r 3               
0014C7r 3                               ; We use Y to hold the character
0014C7r 3  B5 00                        lda 0,x
0014C9r 3  A8                           tay
0014CAr 3               @loop:
0014CAr 3                               ; Unfortunately, we also need to make sure that we don't
0014CAr 3                               ; write further than the end of the RAM. So RAM_END must
0014CAr 3                               ; be larger or equal to the current address
0014CAr 3  A9 80                        lda #>ram_end           ; MSB
0014CCr 3  C5 rr                        cmp tmp1+1
0014CEr 3  90 21                        bcc @done               ; RAM_END < TMP1, so leave
0014D0r 3  D0 06                        bne @check_counter      ; RAM_END is not smaller and not equal
0014D2r 3               
0014D2r 3  A9 00                        lda #<ram_end           ; LSB, because MSBs were equal
0014D4r 3  C5 rr                        cmp tmp1
0014D6r 3  90 19                        bcc @done               ; RAM_END < TMP1, so leave
0014D8r 3               
0014D8r 3               @check_counter:
0014D8r 3                               ; See if our counter has reached zero
0014D8r 3  A5 rr                        lda tmp2
0014DAr 3  05 rr                        ora tmp2+1
0014DCr 3  F0 13                        beq @done
0014DEr 3               
0014DEr 3                               ; We're not in ROM and we still have stuff on the counter, so
0014DEr 3                               ; let's actually do what we came here to do
0014DEr 3  98                           tya
0014DFr 3  92 rr                        sta (tmp1)
0014E1r 3               
0014E1r 3                               ; Adjust the counter
0014E1r 3  A5 rr                        lda tmp2
0014E3r 3  D0 02                        bne @1
0014E5r 3  C6 rr                        dec tmp2+1
0014E7r 3  C6 rr        @1:               dec tmp2
0014E9r 3               
0014E9r 3                               ; Next address
0014E9r 3  E6 rr                        inc tmp1
0014EBr 3  D0 DD                        bne @loop
0014EDr 3  E6 rr                        inc tmp1+1
0014EFr 3               
0014EFr 3  80 D9                        bra @loop
0014F1r 3               
0014F1r 3               @done:
0014F1r 3                               ; Drop three cells off the Data Stack. This uses one byte
0014F1r 3                               ; less than six times INX
0014F1r 3  8A                           txa
0014F2r 3  18                           clc
0014F3r 3  69 06                        adc #6
0014F5r 3  AA                           tax
0014F6r 3               z_blank:
0014F6r 3               z_erase:
0014F6r 3  60           z_fill:         rts
0014F7r 3               
0014F7r 3               
0014F7r 3               
0014F7r 3               ; ## EXECUTE ( xt -- ) "Jump to word based on execution token"
0014F7r 3               ; ## "execute"  auto  ANS core
0014F7r 3                       ; """https://forth-standard.org/standard/core/EXECUTE"""
0014F7r 3               xt_execute:
0014F7r 3  20 rr rr                     jsr underflow_1
0014FAr 3               
0014FAr 3  20 rr rr                     jsr doexecute   ; do not combine to JMP (native coding)
0014FDr 3               
0014FDr 3  60           z_execute:      rts
0014FEr 3               
0014FEr 3               doexecute:
0014FEr 3  B5 00                        lda 0,x
001500r 3  85 rr                        sta ip
001502r 3  B5 01                        lda 1,x
001504r 3  85 rr                        sta ip+1
001506r 3               
001506r 3  E8                           inx
001507r 3  E8                           inx
001508r 3               
001508r 3                               ; we don't need a RTS here because we highjack the RTS of
001508r 3                               ; the word we're calling to get back to xt_execute
001508r 3  6C rr rr                     jmp (ip)
00150Br 3               
00150Br 3               ; end of doexecute
00150Br 3               
00150Br 3               
00150Br 3               ; ## EXECUTE_PARSING ( addr u xt -- ) "Pass a string to a parsing word"
00150Br 3               ; ## "execute-parsing"  auto  Gforth
00150Br 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
00150Br 3                       ; Execute the parsing word defined by the execution token (xt) on the
00150Br 3                       ; string as if it were passed on the command line. See the file
00150Br 3                       ; tests/tali.fs for examples.
00150Br 3                       ;
00150Br 3                       ; Note that this word is coded completely
00150Br 3                       ; different in its Gforth version, see the file execute-parsing.fs
00150Br 3                       ; (in /usr/share/gforth/0.7.3/compat/ on Ubuntu 18.04 LTS) for details.
00150Br 3                       ; """
00150Br 3               xt_execute_parsing:
00150Br 3  20 rr rr                     jsr underflow_3
00150Er 3               
00150Er 3  20 rr rr                     jsr xt_input_to_r       ; save normal input for later
001511r 3  20 rr rr                     jsr xt_not_rote         ; -ROT ( xt addr u )
001514r 3               
001514r 3  B5 00                        lda 0,x                 ; TOS is new ciblen
001516r 3  85 rr                        sta ciblen
001518r 3  B5 01                        lda 1,x
00151Ar 3  85 rr                        sta ciblen+1
00151Cr 3               
00151Cr 3  B5 02                        lda 2,x                 ; NOS is new cib
00151Er 3  85 rr                        sta cib
001520r 3  B5 03                        lda 3,x
001522r 3  85 rr                        sta cib+1
001524r 3               
001524r 3  64 rr                        stz toin                ; Set >IN to zero
001526r 3  64 rr                        stz toin+1
001528r 3               
001528r 3  20 rr rr                     jsr xt_two_drop         ; 2DROP ( xt )
00152Br 3  20 rr rr                     jsr xt_execute
00152Er 3               
00152Er 3  20 rr rr                     jsr xt_r_to_input
001531r 3               
001531r 3               z_execute_parsing:
001531r 3  60                           rts
001532r 3               
001532r 3               
001532r 3               ; ## EXIT ( -- ) "Return control to the calling word immediately"
001532r 3               ; ## "exit"  auto  ANS core
001532r 3                       ; """https://forth-standard.org/standard/core/EXIT
001532r 3                       ; If we're in a loop, we need to UNLOOP first and get everything
001532r 3                       ; we we might have put on the Return Stack off as well. This should
001532r 3                       ; be natively compiled.
001532r 3                       ; """
001532r 3               
001532r 3               xt_exit:
001532r 3  60                           rts             ; keep before z_exit
001533r 3               z_exit:                         ; never reached
001533r 3               
001533r 3               
001533r 3               
001533r 3               ; ## FALSE ( -- f ) "Push flag FALSE to Data Stack"
001533r 3               ; ## "false"  auto  ANS core ext
001533r 3                       ; """https://forth-standard.org/standard/core/FALSE"""
001533r 3               xt_false:
001533r 3  CA                           dex
001534r 3  CA                           dex
001535r 3  74 00                        stz 0,x
001537r 3  74 01                        stz 1,x
001539r 3               
001539r 3  60           z_false:        rts
00153Ar 3               
00153Ar 3               
00153Ar 3               ; ## FETCH ( addr -- n ) "Push cell content from memory to stack"
00153Ar 3               ; ## "@"  auto  ANS core
00153Ar 3                       ; """https://forth-standard.org/standard/core/Fetch"""
00153Ar 3               xt_fetch:
00153Ar 3  20 rr rr                     jsr underflow_1
00153Dr 3               
00153Dr 3  A1 00                        lda (0,x)               ; LSB
00153Fr 3  A8                           tay
001540r 3  F6 00                        inc 0,x
001542r 3  D0 02                        bne @1
001544r 3  F6 01                        inc 1,x
001546r 3               @1:
001546r 3  A1 00                        lda (0,x)               ; MSB
001548r 3  95 01                        sta 1,x
00154Ar 3  94 00                        sty 0,x
00154Cr 3               
00154Cr 3  60           z_fetch:        rts
00154Dr 3               
00154Dr 3               
00154Dr 3               ; ## FIND ( caddr -- addr 0 | xt 1 | xt -1 ) "Find word in Dictionary"
00154Dr 3               ; ## "find"  auto  ANS core
00154Dr 3                       ; """https://forth-standard.org/standard/core/FIND
00154Dr 3                       ; Included for backwards compatibility only, because it still
00154Dr 3                       ; can be found in so may examples. It should, however, be replaced
00154Dr 3                       ; by FIND-NAME. Counted string either returns address with a FALSE
00154Dr 3                       ; flag if not found in the Dictionary, or the xt with a flag to
00154Dr 3                       ; indicate if this is immediate or not. FIND is a wrapper around
00154Dr 3                       ; FIND-NAME, we get this all over with as quickly as possible. See
00154Dr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
00154Dr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
00154Dr 3                       ; """
00154Dr 3               
00154Dr 3               xt_find:
00154Dr 3  20 rr rr                     jsr underflow_1
001550r 3               
001550r 3                               ; Save address in case conversion fails. We use the
001550r 3                               ; Return Stack instead of temporary variables like TMP1
001550r 3                               ; because this is shorter and anybody still using FIND
001550r 3                               ; can't be worried about speed anyway
001550r 3  B5 01                        lda 1,x                 ; MSB
001552r 3  48                           pha
001553r 3  B5 00                        lda 0,x                 ; LSB
001555r 3  48                           pha
001556r 3               
001556r 3                               ; Convert ancient-type counted string address to
001556r 3                               ; modern format
001556r 3  20 rr rr                     jsr xt_count            ; ( caddr -- addr u )
001559r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt | 0 )
00155Cr 3               
00155Cr 3  B5 00                        lda 0,x
00155Er 3  15 01                        ora 1,x
001560r 3  D0 0B                        bne @found_word
001562r 3               
001562r 3                               ; No word found. Return address of the string and a false
001562r 3                               ; flag
001562r 3  20 rr rr                     jsr xt_false            ; ( 0 0 )
001565r 3               
001565r 3                               ; The address needs to be restored.
001565r 3  68                           pla                     ; LSB of address
001566r 3  95 02                        sta 2,x
001568r 3  68                           pla
001569r 3  95 03                        sta 3,x                 ; MSB of address
00156Br 3               
00156Br 3  80 27                        bra @done               ; ( addr 0 )
00156Dr 3               
00156Dr 3               @found_word:
00156Dr 3                               ; We don't need the address after all, dump it
00156Dr 3  68                           pla
00156Er 3  68                           pla
00156Fr 3               
00156Fr 3                               ; We arrive here with ( nt ) on the TOS. Now we have to
00156Fr 3                               ; convert the return values to FIND's format
00156Fr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001572r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001575r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001578r 3               
001578r 3  A0 00                        ldy #0                  ; Prepare flag
00157Ar 3               
00157Ar 3                               ; The flags are in the second byte of the header
00157Ar 3  F6 00                        inc 0,x
00157Cr 3  D0 02                        bne @1
00157Er 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
001580r 3               @1:
001580r 3  A1 00                        lda (0,x)               ; ( xt char )
001582r 3  29 04                        and #IM
001584r 3  D0 08                        bne @immediate          ; bit set, we're immediate
001586r 3               
001586r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
001588r 3  95 00                        sta 0,x
00158Ar 3  95 01                        sta 1,x
00158Cr 3  80 06                        bra @done
00158Er 3               
00158Er 3               @immediate:
00158Er 3  A9 01                        lda #1                  ; We're immediate, return 1
001590r 3  95 00                        sta 0,x
001592r 3  74 01                        stz 1,x
001594r 3               @done:
001594r 3  60           z_find:         rts
001595r 3               
001595r 3               
001595r 3               
001595r 3               ; ## FIND_NAME ( addr u -- nt|0 ) "Get the name token of input word"
001595r 3               ; ## "find-name"  auto  Gforth
001595r 3               
001595r 3               xt_find_name:
001595r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001595r 3                       ; Given a string, find the Name Token (nt) of a word or return
001595r 3                       ; zero if the word is not in the dictionary. We use this instead of
001595r 3                       ; ancient FIND to look up words in the Dictionary passed by
001595r 3                       ; PARSE-NAME. Note this returns the nt, not the xt of a word like
001595r 3                       ; FIND. To convert, use NAME>INT. This is a Gforth word. See
001595r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001595r 3                       ; FIND calls this word
001595r 3                       ; """
001595r 3  20 rr rr                     jsr underflow_2
001598r 3               
001598r 3                               ; check for special case of an empty string (length zero)
001598r 3  B5 00                        lda 0,x
00159Ar 3  15 01                        ora 1,x
00159Cr 3  D0 03                        bne @nonempty
00159Er 3               
00159Er 3  4C rr rr                     jmp @fail_done
0015A1r 3               
0015A1r 3               @nonempty:
0015A1r 3                               ; Set up for traversing the wordlist search order.
0015A1r 3  64 rr                        stz tmp3                ; Start at the beginning
0015A3r 3               
0015A3r 3               @wordlist_loop:
0015A3r 3  A0 1E                        ldy #num_order_offset   ; Compare to byte variable #ORDER
0015A5r 3  A5 rr                        lda tmp3
0015A7r 3  D1 rr                        cmp (up),y              ; Check to see if we are done
0015A9r 3  D0 03                        bne @have_string
0015ABr 3               
0015ABr 3                               ; We ran out of wordlists to search.
0015ABr 3  4C rr rr                     jmp @fail_done
0015AEr 3               
0015AEr 3               @have_string:
0015AEr 3                               ; set up first loop iteration
0015AEr 3               
0015AEr 3                               ; Get the current wordlist id
0015AEr 3  18                           clc             ; SEARCH-ORDER is array of bytes.
0015AFr 3  69 1F                        adc #search_order_offset
0015B1r 3  A8                           tay
0015B2r 3  B1 rr                        lda (up),y      ; Get the id byte, which is the offset
0015B4r 3                                               ; into the cell array WORDLISTS
0015B4r 3               
0015B4r 3                               ; Get the DP for that wordlist.
0015B4r 3  0A                           asl                     ; Turn offset into cells offset.
0015B5r 3  18                           clc
0015B6r 3  69 06                        adc #wordlists_offset
0015B8r 3  A8                           tay
0015B9r 3  B1 rr                        lda (up),y
0015BBr 3  85 rr                        sta tmp1
0015BDr 3  C8                           iny
0015BEr 3  B1 rr                        lda (up),y
0015C0r 3  85 rr                        sta tmp1+1
0015C2r 3               
0015C2r 3  B5 02                        lda 2,x                 ; Address of mystery string
0015C4r 3  85 rr                        sta tmp2
0015C6r 3  B5 03                        lda 3,x
0015C8r 3  85 rr                        sta tmp2+1
0015CAr 3               
0015CAr 3               @loop:
0015CAr 3                               ; first quick test: Are strings the same length?
0015CAr 3  B2 rr                        lda (tmp1)
0015CCr 3  D5 00                        cmp 0,x
0015CEr 3  D0 54                        bne @next_entry
0015D0r 3               
0015D0r 3               @compare_string:
0015D0r 3                               ; are the same length, so we now have to compare each
0015D0r 3                               ; character
0015D0r 3               
0015D0r 3                               ; second quick test: Is the first character the same?
0015D0r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
0015D2r 3               
0015D2r 3                               ; Lowercase the incoming charcter.
0015D2r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
0015D4r 3  B0 07                        bcs @compare_first
0015D6r 3  C9 41                        cmp #$41        ; ASCII 'A'
0015D8r 3  90 03                        bcc @compare_first
0015DAr 3               
0015DAr 3                               ; An uppercase letter has been located.  Make it
0015DAr 3                               ; lowercase.
0015DAr 3  18                           clc
0015DBr 3  69 20                        adc #$20
0015DDr 3               
0015DDr 3               @compare_first:
0015DDr 3  A0 08                        ldy #8          ; Offset in nt to name
0015DFr 3  D1 rr                        cmp (tmp1),y    ; first character of current word
0015E1r 3  D0 41                        bne @next_entry
0015E3r 3               
0015E3r 3                               ; String length is the same and the first character is the
0015E3r 3                               ; same. If the length of the string is 1, we're already done
0015E3r 3  B5 00                        lda 0,x
0015E5r 3  3A                           dec
0015E6r 3  F0 2C                        beq @success
0015E8r 3               
0015E8r 3                               ; No such luck: The strings are the same length and the first
0015E8r 3                               ; char is the same, but the word is more than one char long.
0015E8r 3                               ; So we suck it up and compare every single character. We go
0015E8r 3                               ; from back to front, because words like CELLS and CELL+ would
0015E8r 3                               ; take longer otherwise. We can also shorten the loop by one
0015E8r 3                               ; because we've already compared the first char.
0015E8r 3               
0015E8r 3                               ; The string of the word we're testing against is 8 bytes down
0015E8r 3  A5 rr                        lda tmp1
0015EAr 3  48                           pha             ; Preserve tmp1 on the return stack.
0015EBr 3  18                           clc
0015ECr 3  69 08                        adc #8
0015EEr 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
0015F0r 3  A5 rr                        lda tmp1+1
0015F2r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
0015F3r 3  69 00                        adc #0          ; we only need the carry
0015F5r 3  85 rr                        sta tmp1+1
0015F7r 3               
0015F7r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
0015F9r 3  88                           dey
0015FAr 3               
0015FAr 3               @string_loop:
0015FAr 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
0015FCr 3               
0015FCr 3                               ; Lowercase the incoming charcter.
0015FCr 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
0015FEr 3  B0 07                        bcs @check_char
001600r 3  C9 41                        cmp #$41        ; ASCII 'A'
001602r 3  90 03                        bcc @check_char
001604r 3               
001604r 3                               ; An uppercase letter has been located.  Make it
001604r 3                               ; lowercase.
001604r 3  18                           clc
001605r 3  69 20                        adc #$20
001607r 3               
001607r 3               @check_char:
001607r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
001609r 3  D0 13                        bne @next_entry_tmp1
00160Br 3               
00160Br 3  88                           dey
00160Cr 3  D0 EC                        bne @string_loop
00160Er 3               
00160Er 3               @success_tmp1:
00160Er 3  68                           pla             ; Restore tmp1 from the return stack.
00160Fr 3  85 rr                        sta tmp1+1
001611r 3  68                           pla
001612r 3  85 rr                        sta tmp1
001614r 3               
001614r 3               @success:
001614r 3                               ; The strings match. Put correct nt NOS, because we'll drop
001614r 3                               ; TOS before we leave
001614r 3  A5 rr                        lda tmp1
001616r 3  95 02                        sta 2,x
001618r 3  A5 rr                        lda tmp1+1
00161Ar 3  95 03                        sta 3,x
00161Cr 3               
00161Cr 3  80 20                        bra @done
00161Er 3               
00161Er 3               @next_entry_tmp1:
00161Er 3  68                           pla             ; Restore tmp1 from the return stack.
00161Fr 3  85 rr                        sta tmp1+1
001621r 3  68                           pla
001622r 3  85 rr                        sta tmp1
001624r 3               
001624r 3               @next_entry:
001624r 3                               ; Not the same, so we get the next word. Next header
001624r 3                               ; address is two bytes down
001624r 3  A0 02                        ldy #2
001626r 3  B1 rr                        lda (tmp1),y
001628r 3  48                           pha
001629r 3  C8                           iny
00162Ar 3  B1 rr                        lda (tmp1),y
00162Cr 3  85 rr                        sta tmp1+1
00162Er 3  68                           pla
00162Fr 3  85 rr                        sta tmp1
001631r 3               
001631r 3                               ; If we got a zero, we've walked the whole Dictionary and
001631r 3                               ; return as a failure, otherwise try again
001631r 3  05 rr                        ora tmp1+1
001633r 3  D0 95                        bne @loop
001635r 3               
001635r 3                               ; Move on to the next wordlist in the search order.
001635r 3  E6 rr                        inc tmp3
001637r 3  4C rr rr                     jmp @wordlist_loop
00163Ar 3               
00163Ar 3               @fail_done:
00163Ar 3  74 02                        stz 2,x         ; failure flag
00163Cr 3  74 03                        stz 3,x
00163Er 3               @done:
00163Er 3  E8                           inx
00163Fr 3  E8                           inx
001640r 3               
001640r 3  60           z_find_name:    rts
001641r 3               
001641r 3               
001641r 3               
001641r 3               ; ## FLUSH ( -- ) "Save dirty buffers and empty buffers"
001641r 3               ; ## "flush"  auto  ANS block
001641r 3                       ; """https://forth-standard.org/standard/block/FLUSH"""
001641r 3               xt_flush:
001641r 3  20 rr rr                     jsr xt_save_buffers
001644r 3               
001644r 3                               ; Set the buffer status to empty.
001644r 3  A0 2C                        ldy #buffstatus_offset
001646r 3  A9 00                        lda #0
001648r 3  91 rr                        sta (up),y      ; Only LSB is used.
00164Ar 3               z_flush:
00164Ar 3  60                           rts
00164Br 3               
00164Br 3               
00164Br 3               ; ## FM_SLASH_MOD ( d n1  -- rem n2 ) "Floored signed division"
00164Br 3               ; ## "fm/mod"  auto  ANS core
00164Br 3                       ; """https://forth-standard.org/standard/core/FMDivMOD
00164Br 3                       ; Note that by default, Tali Forth uses SM/REM for most things.
00164Br 3                       ;
00164Br 3                       ; There are various ways to realize this. We follow EForth with
00164Br 3                       ;    DUP 0< DUP >R  IF NEGATE >R DNEGATE R> THEN >R DUP
00164Br 3                       ;    0<  IF R@ + THEN  R> UM/MOD R> IF SWAP NEGATE SWAP THEN
00164Br 3                       ; See (http://www.forth.org/eforth.html). However you can also
00164Br 3                       ; go FM/MOD via SM/REM (http://www.figuk.plus.com/build/arith.htm):
00164Br 3                       ;     DUP >R  SM/REM DUP 0< IF SWAP R> + SWAP 1+ ELSE  R> DROP THEN
00164Br 3                       ; """
00164Br 3               
00164Br 3               xt_fm_slash_mod:
00164Br 3  20 rr rr                     jsr underflow_3
00164Er 3               
00164Er 3                               ; if sign of n1 is negative, negate both n1 and d
00164Er 3  64 rr                        stz tmp2        ; default: n is positive
001650r 3  B5 01                        lda 1,x         ; MSB of n1
001652r 3  10 0E                        bpl @check_d
001654r 3               
001654r 3  E6 rr                        inc tmp2        ; set flag to negative for n1
001656r 3  20 rr rr                     jsr xt_negate   ; NEGATE
001659r 3  20 rr rr                     jsr xt_to_r     ; >R
00165Cr 3  20 rr rr                     jsr xt_dnegate  ; DNEGATE
00165Fr 3  20 rr rr                     jsr xt_r_from   ; R>
001662r 3               
001662r 3               @check_d:
001662r 3                               ; If d is negative, add n1 to high cell of d
001662r 3  B5 03                        lda 3,x         ; MSB of high word of d
001664r 3  10 0D                        bpl @multiply
001666r 3               
001666r 3  18                           clc
001667r 3  B5 00                        lda 0,x         ; LSB of n1
001669r 3  75 02                        adc 2,x         ; LSB of dh
00166Br 3  95 02                        sta 2,x
00166Dr 3               
00166Dr 3  B5 01                        lda 1,x         ; MSB of n1
00166Fr 3  75 03                        adc 3,x         ; MSB of dh
001671r 3  95 03                        sta 3,x
001673r 3               
001673r 3               @multiply:
001673r 3  20 rr rr                     jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
001676r 3               
001676r 3                               ; if n was negative, negate the result
001676r 3  A5 rr                        lda tmp2
001678r 3  F0 07                        beq @done
00167Ar 3               
00167Ar 3  E8                           inx             ; pretend that we SWAP
00167Br 3  E8                           inx
00167Cr 3  20 rr rr                     jsr xt_negate
00167Fr 3  CA                           dex
001680r 3  CA                           dex
001681r 3               @done:
001681r 3  60           z_fm_slash_mod: rts
001682r 3               
001682r 3               
001682r 3               
001682r 3               ; ## FORTH ( -- ) "Replace first WID in search order with Forth-Wordlist"
001682r 3               ; ## "forth"  auto  ANS search ext
001682r 3                       ; """https://forth-standard.org/standard/search/FORTH"""
001682r 3               xt_forth:
001682r 3  A0 1F                        ldy #search_order_offset
001684r 3  A9 00                        lda #0          ; The WID for Forth is 0.
001686r 3               
001686r 3  91 rr                        sta (up),y
001688r 3               z_forth:
001688r 3  60                           rts
001689r 3               
001689r 3               
001689r 3               ; This is a special jsr target to skip the zeroing of BLK at the beginning
001689r 3               ; of evaluate.  It's used by LOAD to allow setting BLK while the block is
001689r 3               ; being evaluated.  Evaluate's normal behavior is to zero BLK.
001689r 3               load_evaluate:
001689r 3                               ; Set a flag (using tmp1) to not zero BLK
001689r 3  A9 FF                        lda #$FF
00168Br 3  85 rr                        sta tmp1
00168Dr 3  80 11                        bra load_evaluate_start
00168Fr 3               
00168Fr 3               ; ## EVALUATE ( addr u -- ) "Execute a string"
00168Fr 3               ; ## "evaluate"  auto  ANS core
00168Fr 3                       ; """https://forth-standard.org/standard/core/EVALUATE
00168Fr 3                       ; Set SOURCE-ID to -1, make addr u the input source, set >IN to zero.
00168Fr 3                       ; After processing the line, revert to old input source. We use this
00168Fr 3                       ; to compile high-level Forth words and user-defined words during
00168Fr 3                       ; start up and cold boot. In contrast to ACCEPT, we need to, uh,
00168Fr 3                       ; accept more than 255 characters here, even though it's a pain in
00168Fr 3                       ; the 8-bit.
00168Fr 3                       ; """
00168Fr 3               
00168Fr 3               xt_evaluate:
00168Fr 3  20 rr rr                     jsr underflow_2
001692r 3               
001692r 3                               ; Clear the flag to zero BLK.  Only LOAD will set the flag,
001692r 3                               ; and will set the block number.
001692r 3  64 rr                        stz tmp1
001694r 3               
001694r 3                               ; If u is zero (which can happen a lot for the user-defined
001694r 3                               ; words), just leave again
001694r 3  B5 00                        lda 0,x
001696r 3  15 01                        ora 1,x
001698r 3  D0 06                        bne _eval_got_work
00169Ar 3               
00169Ar 3  E8                           inx
00169Br 3  E8                           inx
00169Cr 3  E8                           inx
00169Dr 3  E8                           inx
00169Er 3               
00169Er 3  80 42                        bra _eval_done
0016A0r 3               
0016A0r 3               ; Special entry point for LOAD to bypass the zeroing of BLK.
0016A0r 3               load_evaluate_start:
0016A0r 3               _eval_got_work:
0016A0r 3                               ; Save the current value of BLK on the return stack.
0016A0r 3  A0 01                        ldy #blk_offset+1
0016A2r 3  B1 rr                        lda (up),y
0016A4r 3  48                           pha
0016A5r 3  88                           dey
0016A6r 3  B1 rr                        lda (up),y
0016A8r 3  48                           pha
0016A9r 3               
0016A9r 3                               ; See if we should zero BLK.
0016A9r 3  A5 rr                        lda tmp1
0016ABr 3  D0 05                        bne @nozero
0016ADr 3               
0016ADr 3                               ; Set BLK to zero.
0016ADr 3                               ; lda #0        ; A is already zero from loading tmp1
0016ADr 3  91 rr                        sta (up),y
0016AFr 3  C8                           iny
0016B0r 3  91 rr                        sta (up),y
0016B2r 3               
0016B2r 3               @nozero:
0016B2r 3                               ; Save the input state to the Return Stack
0016B2r 3  20 rr rr                     jsr xt_input_to_r
0016B5r 3               
0016B5r 3                               ; set SOURCE-ID to -1
0016B5r 3  A9 FF                        lda #$ff
0016B7r 3  85 rr                        sta insrc
0016B9r 3  85 rr                        sta insrc+1
0016BBr 3               
0016BBr 3                               ; set >IN to zero
0016BBr 3  64 rr                        stz toin
0016BDr 3  64 rr                        stz toin+1
0016BFr 3               
0016BFr 3                               ; move TOS and NOS to input buffers
0016BFr 3  B5 00                        lda 0,x
0016C1r 3  85 rr                        sta ciblen
0016C3r 3  B5 01                        lda 1,x
0016C5r 3  85 rr                        sta ciblen+1
0016C7r 3               
0016C7r 3  B5 02                        lda 2,x
0016C9r 3  85 rr                        sta cib
0016CBr 3  B5 03                        lda 3,x
0016CDr 3  85 rr                        sta cib+1
0016CFr 3               
0016CFr 3  E8                           inx             ; A clean stack is a clean mind
0016D0r 3  E8                           inx
0016D1r 3  E8                           inx
0016D2r 3  E8                           inx
0016D3r 3               
0016D3r 3  20 rr rr                     jsr interpret   ; ( -- )
0016D6r 3               
0016D6r 3                               ; restore variables
0016D6r 3  20 rr rr                     jsr xt_r_to_input
0016D9r 3               
0016D9r 3                               ; Restore BLK from the return stack.
0016D9r 3  A0 00                        ldy #blk_offset
0016DBr 3  68                           pla
0016DCr 3  91 rr                        sta (up),y
0016DEr 3  C8                           iny
0016DFr 3  68                           pla
0016E0r 3  91 rr                        sta (up),y
0016E2r 3               
0016E2r 3               _eval_done:
0016E2r 3  60           z_evaluate:     rts
0016E3r 3               
0016E3r 3               
0016E3r 3               
0016E3r 3               ; ## FORTH_WORDLIST ( -- u ) "WID for the Forth Wordlist"
0016E3r 3               ; ## "forth-wordlist"  auto  ANS search
0016E3r 3                       ; """https://forth-standard.org/standard/search/FORTH-WORDLIST"""
0016E3r 3                       ; This is a dummy entry, the actual code is shared with ZERO.
0016E3r 3               
0016E3r 3               
0016E3r 3               ; ## GET_CURRENT ( -- wid ) "Get the id of the compilation wordlist"
0016E3r 3               ; ## "get-current" auto ANS search
0016E3r 3                       ; """https://forth-standard.org/standard/search/GET-CURRENT"""
0016E3r 3               
0016E3r 3               xt_get_current:
0016E3r 3                               ; This is a little different than some of the variables
0016E3r 3                               ; in the user area as we want the value rather than
0016E3r 3                               ; the address.
0016E3r 3  CA                           dex
0016E4r 3  CA                           dex
0016E5r 3  A0 04                        ldy #current_offset
0016E7r 3  B1 rr                        lda (up),y
0016E9r 3  95 00                        sta 0,x         ; CURRENT is a byte variable
0016EBr 3  74 01                        stz 1,x         ; so the MSB is zero.
0016EDr 3               
0016EDr 3  60           z_get_current:  rts
0016EEr 3               
0016EEr 3               
0016EEr 3               
0016EEr 3               ; ## GET_ORDER ( -- wid_n .. wid_1 n) "Get the current search order"
0016EEr 3               ; ## "get-order" auto ANS search
0016EEr 3                       ; """https://forth-standard.org/standard/search/GET-ORDER"""
0016EEr 3               
0016EEr 3               xt_get_order:
0016EEr 3                               ; Get #ORDER - the number of wordlists in the search order.
0016EEr 3  A0 1E                        ldy #num_order_offset
0016F0r 3  B1 rr                        lda (up),y
0016F2r 3  85 rr                        sta tmp1
0016F4r 3  F0 16                        beq @done       ; If zero, there are no wordlists.
0016F6r 3               
0016F6r 3               @loop:
0016F6r 3                               ; Count down towards the front of the list.
0016F6r 3                               ; By decrementing first, we also turn the length into an offset.
0016F6r 3  C6 rr                        dec tmp1        ; Count down by bytes.
0016F8r 3               
0016F8r 3                               ; Get a pointer to the current wordlist, working back to front.
0016F8r 3  A9 1F                        lda #search_order_offset
0016FAr 3  18                           clc
0016FBr 3  65 rr                        adc tmp1
0016FDr 3  A8                           tay
0016FEr 3               
0016FEr 3                               ; Put that wordlist id on the stack.
0016FEr 3  CA                           dex
0016FFr 3  CA                           dex
001700r 3  B1 rr                        lda (up),y
001702r 3  95 00                        sta 0,x         ; Search order array is bytes, so
001704r 3  74 01                        stz 1,x         ; put a zero in the high byte.
001706r 3               
001706r 3                               ; See if that was the last one to process (first in the list).
001706r 3  A9 00                        lda #0
001708r 3  C5 rr                        cmp tmp1
00170Ar 3  D0 EA                        bne @loop
00170Cr 3               
00170Cr 3               @done:
00170Cr 3                               ; Put the number of items on the stack.
00170Cr 3  CA                           dex
00170Dr 3  CA                           dex
00170Er 3  A0 1E                        ldy #num_order_offset
001710r 3  B1 rr                        lda (up),y
001712r 3  95 00                        sta 0,x
001714r 3  74 01                        stz 1,x         ; We only support 8 wordlists.
001716r 3               
001716r 3  60           z_get_order:    rts
001717r 3               
001717r 3               
001717r 3               
001717r 3               ; ## GREATER_THAN ( n n -- f ) "See if NOS is greater than TOS"
001717r 3               ; ## ">"  auto  ANS core
001717r 3                       ; """https://forth-standard.org/standard/core/more"""
001717r 3               
001717r 3               xt_greater_than:
001717r 3  20 rr rr                     jsr underflow_2
00171Ar 3               
00171Ar 3  A0 00                        ldy #0          ; default false
00171Cr 3  20 rr rr                     jsr compare_16bit
00171Fr 3               
00171Fr 3                               ; for signed numbers, NOS>TOS gives us Z=0 and N=1
00171Fr 3  F0 03                        beq @false
001721r 3  10 01                        bpl @false
001723r 3               
001723r 3                               ; true
001723r 3  88                           dey
001724r 3               @false:
001724r 3  98                           tya
001725r 3               
001725r 3  E8                           inx
001726r 3  E8                           inx
001727r 3  95 00                        sta 0,x
001729r 3  95 01                        sta 1,x
00172Br 3               
00172Br 3  60           z_greater_than: rts
00172Cr 3               
00172Cr 3               
00172Cr 3               
00172Cr 3               ; ## HERE ( -- addr ) "Put Compiler Pointer on Data Stack"
00172Cr 3               ; ## "here"  auto  ANS core
00172Cr 3                       ; """https://forth-standard.org/standard/core/HERE
00172Cr 3                       ; This code is also used by the assembler directive ARROW
00172Cr 3                       ; ("->") though as immediate"""
00172Cr 3               xt_here:
00172Cr 3               xt_asm_arrow:
00172Cr 3  CA                           dex
00172Dr 3  CA                           dex
00172Er 3  A5 rr                        lda cp
001730r 3  95 00                        sta 0,x
001732r 3  A5 rr                        lda cp+1
001734r 3  95 01                        sta 1,x
001736r 3               
001736r 3               z_asm_arrow:
001736r 3  60           z_here:         rts
001737r 3               
001737r 3               
001737r 3               ; ## HEX ( -- ) "Change base radix to hexadecimal"
001737r 3               ; ## "hex"  auto  ANS core ext
001737r 3                       ; """https://forth-standard.org/standard/core/HEX"""
001737r 3               xt_hex:
001737r 3  A9 10                        lda #16
001739r 3  85 rr                        sta base
00173Br 3  64 rr                        stz base+1              ; paranoid
00173Dr 3               
00173Dr 3  60           z_hex:          rts
00173Er 3               
00173Er 3               
00173Er 3               ; ## HEXSTORE ( addr1 u1 addr2 -- u2 ) "Store a list of numbers"
00173Er 3               ; ## "hexstore"  auto  Tali
00173Er 3                       ; """Given a string addr1 u1 with numbers in the current base seperated
00173Er 3                       ; by spaces, store the numbers at the address addr2, returning the
00173Er 3                       ; number of elements. Non-number elements are skipped, an zero-length
00173Er 3                       ; string produces a zero output.
00173Er 3                       ; """
00173Er 3               
00173Er 3               xt_hexstore:
00173Er 3  20 rr rr                     jsr underflow_3
001741r 3               
001741r 3  20 rr rr                     jsr xt_dup              ; Save copy of original address
001744r 3  20 rr rr                     jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
001747r 3               
001747r 3               @loop:
001747r 3                               ; Loop until string is totally consumed
001747r 3  B5 00                        lda 0,x
001749r 3  15 01                        ora 1,x
00174Br 3  F0 36                        beq @done
00174Dr 3               
00174Dr 3  20 rr rr                     jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
001750r 3               
001750r 3                               ; Prepare the conversion of the number.
001750r 3  20 rr rr                     jsr xt_two_to_r
001753r 3  20 rr rr                     jsr xt_zero
001756r 3  20 rr rr                     jsr xt_zero
001759r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
00175Cr 3  20 rr rr                     jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
00175Fr 3               
00175Fr 3                               ; If u4 is not zero, we have leftover chars and have to do
00175Fr 3                               ; things differently
00175Fr 3  B5 00                        lda 0,x
001761r 3  15 01                        ora 1,x
001763r 3  D0 17                        bne @have_chars_left
001765r 3               
001765r 3                               ; Normal case, this number is all done
001765r 3  20 rr rr                     jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
001768r 3  20 rr rr                     jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
00176Br 3               
00176Br 3                               ; Store the new value
00176Br 3  20 rr rr                     jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
00176Er 3  20 rr rr                     jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
001771r 3               
001771r 3                               ; Increase counter
001771r 3  20 rr rr                     jsr xt_r_from           ; R>
001774r 3  20 rr rr                     jsr xt_one_plus         ; 1+
001777r 3  20 rr rr                     jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
00177Ar 3  80 CB                        bra @loop
00177Cr 3               
00177Cr 3               @have_chars_left:
00177Cr 3                               ; Pathological case: Drop the rest of this number off the stack
00177Cr 3                               ; and continue with the next word. Doesn't print a warning. We
00177Cr 3                               ; need to drop four cells, that is, eight bytes
00177Cr 3  8A                           txa
00177Dr 3  18                           clc
00177Er 3  69 08                        adc #8
001780r 3  AA                           tax
001781r 3  80 C4                        bra @loop
001783r 3               
001783r 3               @done:
001783r 3                               ; Clean up return stack and calculate number of chars stored
001783r 3  E8                           inx
001784r 3  E8                           inx
001785r 3  E8                           inx
001786r 3  E8                           inx                     ; 2DROP
001787r 3               
001787r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr2+n addr2 )
00178Ar 3  20 rr rr                     jsr xt_swap
00178Dr 3  20 rr rr                     jsr xt_minus            ; ( n )
001790r 3               
001790r 3  60           z_hexstore:     rts
001791r 3               
001791r 3               
001791r 3               
001791r 3               ; ## HOLD ( char -- ) "Insert character at current output"
001791r 3               ; ## "hold"  auto  ANS core
001791r 3                       ; """https://forth-standard.org/standard/core/HOLD
001791r 3                       ; Insert a character at the current position of a pictured numeric
001791r 3                       ; output string on
001791r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001791r 3                       ;
001791r 3                       ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal
001791r 3                       ; variable tohold instead of HLD.
001791r 3                       ; """
001791r 3               xt_hold:
001791r 3  20 rr rr                     jsr underflow_1
001794r 3               
001794r 3  A5 rr                        lda tohold
001796r 3  D0 02                        bne @1
001798r 3  C6 rr                        dec tohold+1
00179Ar 3               @1:
00179Ar 3  C6 rr                        dec tohold
00179Cr 3               
00179Cr 3  B5 00                        lda 0,x
00179Er 3  92 rr                        sta (tohold)
0017A0r 3  E8                           inx
0017A1r 3  E8                           inx
0017A2r 3               
0017A2r 3  60           z_hold:         rts
0017A3r 3               
0017A3r 3               
0017A3r 3               ; ## I ( -- n )(R: n -- n)  "Copy loop counter to stack"
0017A3r 3               ; ## "i"  auto  ANS core
0017A3r 3                       ; """https://forth-standard.org/standard/core/I
0017A3r 3                       ; Note that this is not the same as R@ because we use a fudge
0017A3r 3                       ; factor for loop control; see the Control Flow section of the
0017A3r 3                       ; manual for details.
0017A3r 3                       ;
0017A3r 3                       ; We should make this native compile for speed.
0017A3r 3                       ; """
0017A3r 3               
0017A3r 3               xt_i:
0017A3r 3  CA                           dex
0017A4r 3  CA                           dex
0017A5r 3               
0017A5r 3                               ; Get the fudged index off of the top of the stack. It's
0017A5r 3                               ; easier to do math on the stack directly than to pop and
0017A5r 3                               ; push stuff around
0017A5r 3  86 rr                        stx tmpdsp
0017A7r 3  BA                           tsx
0017A8r 3               
0017A8r 3  38                           sec
0017A9r 3  BD 01 01                     lda $0101,x     ; LSB
0017ACr 3  FD 03 01                     sbc $0103,x
0017AFr 3  A8                           tay
0017B0r 3               
0017B0r 3  BD 02 01                     lda $0102,x     ; MSB
0017B3r 3  FD 04 01                     sbc $0104,x
0017B6r 3               
0017B6r 3  A6 rr                        ldx tmpdsp
0017B8r 3               
0017B8r 3  95 01                        sta 1,x         ; MSB of de-fudged index
0017BAr 3  94 00                        sty 0,x         ; LSB of de-fudged index
0017BCr 3               
0017BCr 3  60           z_i:            rts
0017BDr 3               
0017BDr 3               
0017BDr 3               
0017BDr 3               ; ## IF (C: -- orig) (flag -- ) "Conditional flow control"
0017BDr 3               ; ## "if"  auto  ANS core
0017BDr 3                       ; """http://forth-standard.org/standard/core/IF"""
0017BDr 3               
0017BDr 3               xt_if:
0017BDr 3                               ; Compile a 0BRANCH
0017BDr 3  A0 rr                        ldy #>zero_branch_runtime
0017BFr 3  A9 rr                        lda #<zero_branch_runtime
0017C1r 3  20 rr rr                     jsr cmpl_subroutine
0017C4r 3               
0017C4r 3                               ; Put the origination address on the stack for else/then
0017C4r 3  20 rr rr                     jsr xt_here
0017C7r 3               
0017C7r 3                               ; Stuff zero in for the branch address right now.
0017C7r 3                               ; THEN or ELSE will fix it later.
0017C7r 3  20 rr rr                     jsr xt_zero
0017CAr 3  20 rr rr                     jsr xt_comma
0017CDr 3  60           z_if:           rts
0017CEr 3               
0017CEr 3               
0017CEr 3               zero_branch_runtime:
0017CEr 3                       ; """In some Forths, this is called (0BRANCH). Tali Forth originally
0017CEr 3                       ; included 0BRANCH as a high-level word that inserted this code at
0017CEr 3                       ; runtime.
0017CEr 3                       ; """
0017CEr 3               
0017CEr 3                               ; We use the return value on the 65c02 stack to determine
0017CEr 3                               ; where we want to return to.
0017CEr 3  68                           pla
0017CFr 3  85 rr                        sta tmpbranch
0017D1r 3  68                           pla
0017D2r 3  85 rr                        sta tmpbranch+1
0017D4r 3               
0017D4r 3                               ; See if the flag is zero, which is the whole purpose of
0017D4r 3                               ; this all
0017D4r 3  B5 00                        lda 0,x
0017D6r 3  15 01                        ora 1,x
0017D8r 3  F0 0F                        beq @zero
0017DAr 3               
0017DAr 3                               ; Flag is TRUE, so we skip over the next two bytes. This is
0017DAr 3                               ; the part between IF and THEN
0017DAr 3  A5 rr                        lda tmpbranch   ; LSB
0017DCr 3  18                           clc
0017DDr 3  69 02                        adc #2
0017DFr 3  85 rr                        sta tmp1
0017E1r 3  A5 rr                        lda tmpbranch+1 ; MSB
0017E3r 3  69 00                        adc #0          ; For carry
0017E5r 3  85 rr                        sta tmp1+1
0017E7r 3               
0017E7r 3  80 13                        bra @done
0017E9r 3               
0017E9r 3               @zero:
0017E9r 3                               ; Flag is FALSE (0) so we take the jump to the address given in
0017E9r 3                               ; the next two bytes. However, the address points to the last
0017E9r 3                               ; byte of the JSR instruction, not to the next byte afterwards
0017E9r 3  A0 01                        ldy #1
0017EBr 3  B1 rr                        lda (tmpbranch),y
0017EDr 3  85 rr                        sta tmp1
0017EFr 3  C8                           iny
0017F0r 3  B1 rr                        lda (tmpbranch),y
0017F2r 3  85 rr                        sta tmp1+1
0017F4r 3               
0017F4r 3                               ; Now we have to subtract one byte from the address
0017F4r 3                               ; given because of the way the 6502 calculates RTS
0017F4r 3  A5 rr                        lda tmp1
0017F6r 3  D0 02                        bne @1
0017F8r 3  C6 rr                        dec tmp1+1
0017FAr 3               @1:
0017FAr 3  C6 rr                        dec tmp1
0017FCr 3               
0017FCr 3               @done:
0017FCr 3                               ; However we got here, tmp1 has the value we push to jump
0017FCr 3                               ; to
0017FCr 3  A5 rr                        lda tmp1+1
0017FEr 3  48                           pha             ; MSB first
0017FFr 3  A5 rr                        lda tmp1
001801r 3  48                           pha
001802r 3               
001802r 3                               ; clean up the stack and jump
001802r 3  E8                           inx
001803r 3  E8                           inx
001804r 3               
001804r 3  60                           rts
001805r 3               
001805r 3               
001805r 3               
001805r 3               ; ## IMMEDIATE ( -- ) "Mark most recent word as IMMEDIATE"
001805r 3               ; ## "immediate"  auto  ANS core
001805r 3                       ; """https://forth-standard.org/standard/core/IMMEDIATE
001805r 3                       ; Make sure the most recently defined word is immediate. Will only
001805r 3                       ; affect the last word in the dictionary. Note that if the word is
001805r 3                       ; defined in ROM, this will have no affect, but will not produce an
001805r 3                       ; error message.
001805r 3                       ; """
001805r 3               xt_immediate:
001805r 3  20 rr rr                     jsr current_to_dp
001808r 3  A0 01                        ldy #1          ; offset for status byte
00180Ar 3  B1 rr                        lda (dp),y
00180Cr 3  09 04                        ora #IM        ; make sure bit 7 is set
00180Er 3  91 rr                        sta (dp),y
001810r 3               
001810r 3  60           z_immediate:    rts
001811r 3               
001811r 3               
001811r 3               ; ## INPUT ( -- addr ) "Return address of input vector"
001811r 3               ; ## "input" tested Tali Forth
001811r 3               
001811r 3               xt_input:
001811r 3  CA                           dex
001812r 3  CA                           dex
001813r 3  A9 rr                        lda #<input
001815r 3  95 00                        sta 0,x
001817r 3  A9 rr                        lda #>input
001819r 3  95 01                        sta 1,x
00181Br 3               
00181Br 3  60           z_input:        rts
00181Cr 3               
00181Cr 3               
00181Cr 3               
00181Cr 3               ; ## INPUT_TO_R ( -- ) ( R: -- n n n n ) "Save input state to the Return Stack"
00181Cr 3               ; ## "input>r"  tested  Tali Forth
00181Cr 3                  	; """Save the current input state as defined by insrc, cib, ciblen, and
00181Cr 3                       ; toin to the Return Stack. Used by EVALUTE.
00181Cr 3                       ;
00181Cr 3                       ; The naive way of doing
00181Cr 3                       ; this is to push each two-byte variable to the stack in the form of
00181Cr 3                       ;
00181Cr 3                       ;       lda insrc
00181Cr 3                       ;       pha
00181Cr 3                       ;       lda insrc+1
00181Cr 3                       ;       pha
00181Cr 3                       ;
00181Cr 3                       ; for a total of 24 byte of instruction in one direction and later
00181Cr 3                       ; a further 24 bytes to reverse the process. We shorten this at the
00181Cr 3                       ; cost of some speed by assuming the four variables are grouped
00181Cr 3                       ; together on the Zero Page and start with insrc (see definitions.asm
00181Cr 3                       ; for details). The reverse operation is r_to_input. These words must
00181Cr 3                       ; be flagged as Never Native. Uses tmp1
00181Cr 3                       ; """
00181Cr 3               
00181Cr 3               xt_input_to_r:
00181Cr 3                               ; We arrive here with the return address on the top of the
00181Cr 3                               ; 65c02's stack. We need to move it out of the way first
00181Cr 3  68                           pla
00181Dr 3  85 rr                        sta tmp1
00181Fr 3  68                           pla
001820r 3  85 rr                        sta tmp1+1
001822r 3               
001822r 3                               ; This assumes that insrc is the first of eight bytes and
001822r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001822r 3                               ; Page.
001822r 3  A0 07                        ldy #7
001824r 3               @loop:
001824r 3  B9 rr rr                     lda insrc,y     ; insrc+7 is toin+1
001827r 3  48                           pha
001828r 3  88                           dey
001829r 3  10 F9                        bpl @loop
00182Br 3               
00182Br 3                               ; Restore address for return jump
00182Br 3  A5 rr                        lda tmp1+1
00182Dr 3  48                           pha
00182Er 3  A5 rr                        lda tmp1
001830r 3  48                           pha
001831r 3               
001831r 3  60           z_input_to_r: 	rts
001832r 3               
001832r 3               
001832r 3               
001832r 3               ; ## INT_TO_NAME ( xt -- nt ) "Get name token from execution token"
001832r 3               ; ## "int>name"  auto  Tali Forth
001832r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001832r 3                       ; This is called >NAME in Gforth, but we change it to
001832r 3                       ; INT>NAME to match NAME>INT
001832r 3                       ; """
001832r 3               
001832r 3               xt_int_to_name:
001832r 3  20 rr rr                     jsr underflow_1
001835r 3               
001835r 3                               ; Unfortunately, to find the header, we have to walk through
001835r 3                               ; all of the wordlists. We are running out of tmp variables.
001835r 3                               ; (I'm assuming there is a reason this is avoiding tmp1) so
001835r 3                               ; hold the current wordlist on the data stack. This searches
001835r 3                               ; all of the wordlists in id order.
001835r 3  CA                           dex
001836r 3  CA                           dex
001837r 3  74 00                        stz 0,x
001839r 3  74 01                        stz 1,x
00183Br 3               
00183Br 3               @wordlist_loop:
00183Br 3                               ; A needs to have the current wordlist id in it at
00183Br 3                               ; the top of this loop.
00183Br 3  B5 00                        lda 0,x                 ; Get the current wordlist.
00183Dr 3               
00183Dr 3                               ; Get the DP for that wordlist.
00183Dr 3  0A                           asl                     ; Turn offset into cells offset.
00183Er 3  18                           clc
00183Fr 3  69 06                        adc #wordlists_offset
001841r 3  A8                           tay
001842r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
001844r 3  85 rr                        sta tmp2                ; into tmp2
001846r 3  C8                           iny
001847r 3  B1 rr                        lda (up),y
001849r 3  85 rr                        sta tmp2+1
00184Br 3               
00184Br 3                               ; Check for an empty wordlist (DP will be 0)
00184Br 3  A5 rr                        lda tmp2
00184Dr 3  05 rr                        ora tmp2+1
00184Fr 3  F0 38                        beq @next_wordlist
001851r 3               
001851r 3  B5 02                        lda 2,x         ; Target xt is now behind wordlist id.
001853r 3  85 rr                        sta tmp3        ; Save target xt in tmp3
001855r 3  B5 03                        lda 3,x
001857r 3  85 rr                        sta tmp3+1
001859r 3               
001859r 3               @loop:
001859r 3  A0 04                        ldy #4          ; xt is four bytes down
00185Br 3  B1 rr                        lda (tmp2),y    ; LSB of xt of current nt
00185Dr 3  C5 rr                        cmp tmp3
00185Fr 3  D0 07                        bne @no_match
001861r 3               
001861r 3                               ; LSB is the same, now check MSB
001861r 3  C8                           iny
001862r 3  B1 rr                        lda (tmp2),y    ; MSB of xt of current nt
001864r 3  C5 rr                        cmp tmp3+1
001866r 3  F0 32                        beq @match
001868r 3               
001868r 3               @no_match:
001868r 3                               ; no match, so we need to get the next word. Next nt is two
001868r 3                               ; bytes down
001868r 3  18                           clc
001869r 3  A5 rr                        lda tmp2
00186Br 3  69 02                        adc #2
00186Dr 3  85 rr                        sta tmp2
00186Fr 3  A5 rr                        lda tmp2+1
001871r 3  69 00                        adc #0          ; only care about carry
001873r 3  85 rr                        sta tmp2+1
001875r 3               
001875r 3  A0 00                        ldy #0
001877r 3  B1 rr                        lda (tmp2),y
001879r 3  48                           pha
00187Ar 3  C8                           iny
00187Br 3  11 rr                        ora (tmp2),y
00187Dr 3  F0 09                        beq @zero
00187Fr 3               
00187Fr 3                               ; Not zero continue
00187Fr 3  B1 rr                        lda (tmp2),y
001881r 3  85 rr                        sta tmp2+1
001883r 3  68                           pla
001884r 3  85 rr                        sta tmp2
001886r 3  80 D1                        bra @loop
001888r 3               
001888r 3               @zero:
001888r 3                               ; if next word is zero, the xt has no nt in this wordlist
001888r 3  68                           pla             ; Leftover from above loop
001889r 3               
001889r 3               @next_wordlist:
001889r 3                               ; Move on to the next wordlist.
001889r 3  B5 00                        lda 0,x
00188Br 3  1A                           inc
00188Cr 3  95 00                        sta 0,x
00188Er 3  C9 0C                        cmp #max_wordlists
001890r 3  D0 A9                        bne @wordlist_loop
001892r 3               
001892r 3                               ; We didn't find it in any of the wordlists.
001892r 3                               ; Remove the wordlist id from the stack.
001892r 3  E8                           inx
001893r 3  E8                           inx
001894r 3               
001894r 3                               ; We return a zero to indicate that we didn't find it.
001894r 3  74 00                        stz 0,x
001896r 3  74 01                        stz 1,x
001898r 3  80 0A                        bra z_int_to_name
00189Ar 3               
00189Ar 3               @match:
00189Ar 3                               ; We found it. Remove wordlist id from stack.
00189Ar 3  E8                           inx
00189Br 3  E8                           inx
00189Cr 3               
00189Cr 3                               ; It's a match! Replace TOS with nt
00189Cr 3  A5 rr                        lda tmp2
00189Er 3  95 00                        sta 0,x
0018A0r 3  A5 rr                        lda tmp2+1
0018A2r 3  95 01                        sta 1,x
0018A4r 3               
0018A4r 3  60           z_int_to_name:  rts
0018A5r 3               
0018A5r 3               
0018A5r 3               
0018A5r 3               ; ## INVERT ( n -- n ) "Complement of TOS"
0018A5r 3               ; ## "invert"  auto  ANS core
0018A5r 3                       ; """https://forth-standard.org/standard/core/INVERT"""
0018A5r 3               xt_invert:
0018A5r 3  20 rr rr                     jsr underflow_1
0018A8r 3               
0018A8r 3  A9 FF                        lda #$FF
0018AAr 3  55 00                        eor 0,x         ; LSB
0018ACr 3  95 00                        sta 0,x
0018AEr 3               
0018AEr 3  A9 FF                        lda #$FF
0018B0r 3  55 01                        eor 1,x         ; MSB
0018B2r 3  95 01                        sta 1,x
0018B4r 3               
0018B4r 3  60           z_invert:       rts
0018B5r 3               
0018B5r 3               
0018B5r 3               ; ## IS ( xt "name" -- ) "Set named word to execute xt"
0018B5r 3               ; ## "is"  auto  ANS core ext
0018B5r 3                       ; """http://forth-standard.org/standard/core/IS"""
0018B5r 3               
0018B5r 3               xt_is:
0018B5r 3                               ; This is a state aware word with differet behavior
0018B5r 3                               ; when used while compiling vs interpreting.
0018B5r 3                               ; Check STATE
0018B5r 3  A5 rr                        lda state
0018B7r 3  05 rr                        ora state+1
0018B9r 3  F0 0C                        beq @interpreting
0018BBr 3               
0018BBr 3               @compiling:
0018BBr 3                               ; Run ['] to compile the xt of the next word as a literal.
0018BBr 3  20 rr rr                     jsr xt_bracket_tick
0018BEr 3               
0018BEr 3                               ; Postpone DEFER! by compiling a JSR to it.
0018BEr 3  A0 rr                        ldy #>xt_defer_store
0018C0r 3  A9 rr                        lda #<xt_defer_store
0018C2r 3  20 rr rr                     jsr cmpl_subroutine
0018C5r 3               
0018C5r 3  80 06                        bra @done
0018C7r 3               
0018C7r 3               @interpreting:
0018C7r 3  20 rr rr                     jsr xt_tick
0018CAr 3  20 rr rr                     jsr xt_defer_store
0018CDr 3               @done:
0018CDr 3  60           z_is:           rts
0018CEr 3               
0018CEr 3               
0018CEr 3               
0018CEr 3               ; ## J ( -- n ) (R: n -- n ) "Copy second loop counter to stack"
0018CEr 3               ; ## "j"  auto  ANS core
0018CEr 3                       ; """https://forth-standard.org/standard/core/J
0018CEr 3                       ; Copy second loop counter from Return Stack to stack. Note we use
0018CEr 3                       ; a fudge factor for loop control; see the Control Flow section of
0018CEr 3                       ; the manual for more details.
0018CEr 3                       ; At this point, we have the "I" counter/limit and the LEAVE address
0018CEr 3                       ; on the stack above this (three entries), whereas the ideal Forth
0018CEr 3                       ; implementation would just have two.
0018CEr 3                       ;
0018CEr 3                       ; Make this native compiled for speed
0018CEr 3                       ; """
0018CEr 3               
0018CEr 3               xt_j:
0018CEr 3  CA                           dex
0018CFr 3  CA                           dex
0018D0r 3               
0018D0r 3                               ; Get the fudged index off from the stack. It's easier to
0018D0r 3                               ; do math on the stack directly than to pop and push stuff
0018D0r 3                               ; around
0018D0r 3  86 rr                        stx tmpdsp
0018D2r 3  BA                           tsx
0018D3r 3               
0018D3r 3  38                           sec
0018D4r 3  BD 07 01                     lda $0107,x     ; LSB
0018D7r 3  FD 09 01                     sbc $0109,x
0018DAr 3  A8                           tay
0018DBr 3               
0018DBr 3  BD 08 01                     lda $0108,x     ; MSB
0018DEr 3  FD 0A 01                     sbc $010A,x
0018E1r 3               
0018E1r 3  A6 rr                        ldx tmpdsp
0018E3r 3               
0018E3r 3  95 01                        sta 1,x         ; MSB of de-fudged index
0018E5r 3  94 00                        sty 0,x         ; LSB of de-fudged index
0018E7r 3               
0018E7r 3  60           z_j:            rts
0018E8r 3               
0018E8r 3               
0018E8r 3               
0018E8r 3               ; ## KEY ( -- char ) "Get one character from the input"
0018E8r 3               ; ## "key"  tested  ANS core
0018E8r 3               xt_key:
0018E8r 3                       ; """https://forth-standard.org/standard/core/KEY
0018E8r 3                       ; Get a single character of input from the vectored
0018E8r 3                       ; input without echoing.
0018E8r 3                       ; """
0018E8r 3  20 rr rr                     jsr key_a               ; returns char in A
0018EBr 3               
0018EBr 3  CA                           dex
0018ECr 3  CA                           dex
0018EDr 3  95 00                        sta 0,x
0018EFr 3  74 01                        stz 1,x
0018F1r 3               
0018F1r 3  60           z_key:          rts
0018F2r 3               
0018F2r 3               key_a:
0018F2r 3                       ; The 65c02 doesn't have a JSR (ADDR,X) instruction like the
0018F2r 3                       ; 65816, so we have to fake the indirect jump to vector it.
0018F2r 3                       ; This is depressingly slow. We use this routine internally
0018F2r 3                       ; to avoid manipulating the Data Stack when we just want a
0018F2r 3                       ; character
0018F2r 3  6C rr rr                     jmp (input)             ; JSR/RTS
0018F5r 3               
0018F5r 3               
0018F5r 3               ; ## LATESTNT ( -- nt ) "Push most recent nt to the stack"
0018F5r 3               ; ## "latestnt"  auto  Tali Forth
0018F5r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0018F5r 3                       ; The Gforth version of this word is called LATEST
0018F5r 3                       ; """
0018F5r 3               xt_latestnt:
0018F5r 3  CA                           dex
0018F6r 3  CA                           dex
0018F7r 3               
0018F7r 3  20 rr rr                     jsr current_to_dp
0018FAr 3               
0018FAr 3  A5 rr                        lda dp
0018FCr 3  95 00                        sta 0,x
0018FEr 3  A5 rr                        lda dp+1
001900r 3  95 01                        sta 1,x
001902r 3               
001902r 3  60           z_latestnt:     rts
001903r 3               
001903r 3               
001903r 3               ; ## LATESTXT ( -- xt ) "Push most recent xt to the stack"
001903r 3               ; ## "latestxt"  auto  Gforth
001903r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Anonymous-Definitions.html"""
001903r 3               xt_latestxt:
001903r 3  20 rr rr                     jsr xt_latestnt         ; ( nt )
001906r 3  20 rr rr                     jsr xt_name_to_int      ; ( xt )
001909r 3               
001909r 3  60           z_latestxt:     rts
00190Ar 3               
00190Ar 3               
00190Ar 3               ; ## LEAVE ( -- ) "Leave DO/LOOP construct"
00190Ar 3               ; ## "leave"  auto  ANS core
00190Ar 3                       ; """https://forth-standard.org/standard/core/LEAVE
00190Ar 3                       ; Note that this does not work with anything but a DO/LOOP in
00190Ar 3                       ; contrast to other versions such as discussed at
00190Ar 3                       ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
00190Ar 3                       ;
00190Ar 3                       ;       : LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY
00190Ar 3                       ; See the Control Flow section in the manual for details of how this works.
00190Ar 3                       ; This must be native compile and not IMMEDIATE
00190Ar 3                       ; """
00190Ar 3               
00190Ar 3               xt_leave:
00190Ar 3                               ; We dump the limit/start entries off the Return Stack
00190Ar 3                               ; (four bytes)
00190Ar 3  68                           pla
00190Br 3  68                           pla
00190Cr 3  68                           pla
00190Dr 3  68                           pla
00190Er 3               
00190Er 3  60                           rts             ; this must be compiled, so keep before z_leave
00190Fr 3               z_leave:                        ; not reached, not compiled
00190Fr 3               
00190Fr 3               
00190Fr 3               
00190Fr 3               ; ## LEFT_BRACKET ( -- ) "Enter interpretation state"
00190Fr 3               ; ## "["  auto  ANS core
00190Fr 3                       ; """https://forth-standard.org/standard/core/Bracket
00190Fr 3                       ; This is an immediate and compile-only word
00190Fr 3                       ; """
00190Fr 3               xt_left_bracket:
00190Fr 3  64 rr                        stz state
001911r 3  64 rr                        stz state+1
001913r 3               
001913r 3  60           z_left_bracket: rts
001914r 3               
001914r 3               
001914r 3               ; ## LESS_NUMBER_SIGN ( -- ) "Start number conversion"
001914r 3               ; ## "<#"  auto  ANS core
001914r 3                       ; """https://forth-standard.org/standard/core/num-start
001914r 3                       ; Start the process to create pictured numeric output.
001914r 3                       ;
001914r 3                       ; The new
001914r 3                       ; string is constructed from back to front, saving the new character
001914r 3                       ; at the beginning of the output string. Since we use PAD as a
001914r 3                       ; starting address and work backward (!), the string is constructed
001914r 3                       ; in the space between the end of the Dictionary (as defined by CP)
001914r 3                       ; and the PAD. This allows us to satisfy the ANS Forth condition that
001914r 3                       ; programs don't fool around with the PAD but still use its address.
001914r 3                       ; Based on pForth
001914r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
001914r 3                       ; pForth is in the pubic domain. Forth is : <# PAD HLD ! ; we use the
001914r 3                       ; internal variable tohold instead of HLD.
001914r 3                       ; """
001914r 3               xt_less_number_sign:
001914r 3  20 rr rr                     jsr xt_pad      ; ( addr )
001917r 3               
001917r 3  B5 00                        lda 0,x
001919r 3  85 rr                        sta tohold
00191Br 3  B5 01                        lda 1,x
00191Dr 3  85 rr                        sta tohold+1
00191Fr 3               
00191Fr 3  E8                           inx
001920r 3  E8                           inx
001921r 3               
001921r 3               z_less_number_sign:
001921r 3  60                           rts
001922r 3               
001922r 3               ; ## LESS_THAN ( n m -- f ) "Return true if NOS < TOS"
001922r 3               ; ## "<"  auto  ANS core
001922r 3                       ; """https://forth-standard.org/standard/core/less"""
001922r 3               
001922r 3               xt_less_than:
001922r 3  20 rr rr                     jsr underflow_2
001925r 3               
001925r 3  A0 00                        ldy #0          ; default false
001927r 3  20 rr rr                     jsr compare_16bit
00192Ar 3               
00192Ar 3                               ; for signed numbers, NOS < TOS if Z=0 and N=0
00192Ar 3  F0 03                        beq @false
00192Cr 3  30 01                        bmi @false
00192Er 3               
00192Er 3                               ; true
00192Er 3  88                           dey
00192Fr 3               @false:
00192Fr 3  98                           tya
001930r 3               
001930r 3  E8                           inx
001931r 3  E8                           inx
001932r 3  95 00                        sta 0,x
001934r 3  95 01                        sta 1,x
001936r 3               
001936r 3  60           z_less_than:    rts
001937r 3               
001937r 3               
001937r 3               
001937r 3               ; ## LIST ( scr# -- ) "List the given screen"
001937r 3               ; ## "list"  tested  ANS block ext
001937r 3                       ; """https://forth-standard.org/standard/block/LIST"""
001937r 3               
001937r 3               xt_list:
001937r 3  20 rr rr                     jsr underflow_1
00193Ar 3               
00193Ar 3                               ; Save the screen number in SCR
00193Ar 3  20 rr rr                     jsr xt_scr
00193Dr 3  20 rr rr                     jsr xt_store
001940r 3               
001940r 3                               ; Use L from the editor-wordlist to display the screen.
001940r 3  20 rr rr                     jsr xt_editor_l
001943r 3               
001943r 3  60           z_list:         rts
001944r 3               
001944r 3               
001944r 3               
001944r 3               ; ## LITERAL ( n -- ) "Store TOS to be push on stack during runtime"
001944r 3               ; ## "literal"  auto  ANS core
001944r 3                       ; """https://forth-standard.org/standard/core/LITERAL
001944r 3                       ; Compile-only word to store TOS so that it is pushed on stack
001944r 3                       ; during runtime. This is a immediate, compile-only word. At runtime,
001944r 3                       ; it works by calling literal_runtime by compling JSR LITERAL_RT.
001944r 3                       ;
001944r 3                       ; Note the cmpl_ routines use TMPTOS
001944r 3                       ; """
001944r 3               xt_literal:
001944r 3  20 rr rr                     jsr underflow_1
001947r 3               
001947r 3  A0 rr                        ldy #>literal_runtime
001949r 3  A9 rr                        lda #<literal_runtime
00194Br 3  20 rr rr                     jsr cmpl_subroutine
00194Er 3               
00194Er 3                               ; Compile the value that is to be pushed on the Stack during
00194Er 3                               ; runtime
00194Er 3  20 rr rr                     jsr xt_comma
001951r 3               
001951r 3  60           z_literal:      rts
001952r 3               
001952r 3               literal_runtime:
001952r 3               
001952r 3                               ; During runtime, we push the value following this word back
001952r 3                               ; on the Data Stack. The subroutine jump that brought us
001952r 3                               ; here put the address to return to on the Return Stack -
001952r 3                               ; this points to the data we need to get. This routine is
001952r 3                               ; also called (LITERAL) in some Forths
001952r 3  CA                           dex
001953r 3  CA                           dex
001954r 3               
001954r 3                           	; The 65c02 stores <RETURN-ADDRESS>-1 on the Return Stack,
001954r 3                               ; so we are actually popping the address-1 of the literal
001954r 3  68                           pla             ; LSB
001955r 3  85 rr                        sta tmp1
001957r 3  68                           pla             ; MSB
001958r 3  85 rr                        sta tmp1+1
00195Ar 3               
00195Ar 3                               ; Fetch the actual literal value and push it on Data stack
00195Ar 3  A0 01                        ldy #1
00195Cr 3  B1 rr                        lda (tmp1),y    ; LSB
00195Er 3  95 00                        sta 0,x
001960r 3  C8                           iny
001961r 3  B1 rr                        lda (tmp1),y    ; MSB
001963r 3  95 01                        sta 1,x
001965r 3               
001965r 3                               ; Adjust return address and push back on the Return Stack
001965r 3  98                           tya
001966r 3  18                           clc
001967r 3  65 rr                        adc tmp1
001969r 3  A8                           tay
00196Ar 3  A5 rr                        lda tmp1+1
00196Cr 3  69 00                        adc #0
00196Er 3  48                           pha
00196Fr 3  5A                           phy
001970r 3               
001970r 3  60                           rts
001971r 3               
001971r 3               
001971r 3               
001971r 3               ; ## LOAD ( scr# -- ) "Load the Forth code in a screen/block"
001971r 3               ; ## "load"  auto  ANS block
001971r 3                       ; """https://forth-standard.org/standard/block/LOAD
001971r 3                       ;
001971r 3                       ; Note: LOAD current works because there is only one buffer.
001971r 3                       ; If/when multiple buffers are supported, we'll have to deal
001971r 3                       ; with the fact that it might re-load the old block into a
001971r 3                       ; different buffer.
001971r 3                       ; """
001971r 3               
001971r 3               xt_load:
001971r 3  20 rr rr                     jsr underflow_1
001974r 3               
001974r 3                               ; Save the current value of BLK on the return stack.
001974r 3  A0 01                        ldy #blk_offset+1
001976r 3  B1 rr                        lda (up),y
001978r 3  48                           pha
001979r 3  88                           dey
00197Ar 3  B1 rr                        lda (up),y
00197Cr 3  48                           pha
00197Dr 3               
00197Dr 3                               ; Set BLK to the given block/screen number.
00197Dr 3  B5 00                        lda 0,x
00197Fr 3  91 rr                        sta (up),y
001981r 3  C8                           iny
001982r 3  B5 01                        lda 1,x
001984r 3  91 rr                        sta (up),y
001986r 3               
001986r 3                               ; Load that block into a buffer
001986r 3  20 rr rr                     jsr xt_block
001989r 3               
001989r 3                               ; Put 1024 on the stack for the screen length.
001989r 3  CA                           dex
00198Ar 3  CA                           dex
00198Br 3  A9 04                        lda #4
00198Dr 3  95 01                        sta 1,x
00198Fr 3  74 00                        stz 0,x
001991r 3               
001991r 3                               ; Jump to a special evluate target. This bypasses the underflow
001991r 3                               ; check and skips the zeroing of BLK.
001991r 3  20 rr rr                     jsr load_evaluate
001994r 3               
001994r 3                               ; Restore the value of BLK from before the LOAD command.
001994r 3  A0 00                        ldy #blk_offset
001996r 3  68                           pla
001997r 3  91 rr                        sta (up),y
001999r 3  C8                           iny
00199Ar 3  68                           pla
00199Br 3  91 rr                        sta (up),y
00199Dr 3               
00199Dr 3                               ; If BLK is not zero, read it back into the buffer.
00199Dr 3                               ; A still has MSB
00199Dr 3  88                           dey
00199Er 3  11 rr                        ora (up),y
0019A0r 3  F0 12                        beq @done
0019A2r 3               
0019A2r 3                               ; The block needs to be read back into the buffer.
0019A2r 3  CA                           dex
0019A3r 3  CA                           dex
0019A4r 3  A0 00                        ldy #blk_offset
0019A6r 3  B1 rr                        lda (up),y
0019A8r 3  95 00                        sta 0,x
0019AAr 3  C8                           iny
0019ABr 3  B1 rr                        lda (up),y
0019ADr 3  95 01                        sta 1,x
0019AFr 3  20 rr rr                     jsr xt_block
0019B2r 3               
0019B2r 3                               ; Drop the buffer address.
0019B2r 3  E8                           inx
0019B3r 3  E8                           inx
0019B4r 3               
0019B4r 3               @done:
0019B4r 3  60           z_load:         rts
0019B5r 3               
0019B5r 3               
0019B5r 3               
0019B5r 3               ; ## LOOP ( -- ) "Finish loop construct"
0019B5r 3               ; ## "loop"  auto  ANS core
0019B5r 3                       ; """https://forth-standard.org/standard/core/LOOP
0019B5r 3                       ; Compile-time part of LOOP. This does nothing more but push 1 on
0019B5r 3                       ; the stack and then call +LOOP.
0019B5r 3                       ;
0019B5r 3                       ; In Forth, this is
0019B5r 3                       ;       : LOOP  POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ;
0019B5r 3                       ;       IMMEDIATE ; COMPILE-ONLY
0019B5r 3                       ; """
0019B5r 3               xt_loop:
0019B5r 3                               ; Have the finished word push 1 on the stack
0019B5r 3  A0 rr                        ldy #>xt_one
0019B7r 3  A9 rr                        lda #<xt_one
0019B9r 3  20 rr rr                     jsr cmpl_subroutine     ; drop through to +LOOP
0019BCr 3               
0019BCr 3               
0019BCr 3               ; ## PLUS_LOOP ( -- ) "Finish loop construct"
0019BCr 3               ; ## "+loop"  auto  ANS core
0019BCr 3                       ; """https://forth-standard.org/standard/core/PlusLOOP
0019BCr 3                       ;
0019BCr 3                       ; Compile-time part of +LOOP, also used for LOOP. Is usually
0019BCr 3                       ;       : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
0019BCr 3                       ;       COMPILE-ONLY
0019BCr 3                       ; in Forth. LOOP uses this routine as well. We jump here with the
0019BCr 3                       ; address for looping as TOS and the address for aborting the loop
0019BCr 3                       ; (LEAVE) as the second double-byte entry on the Return Stack (see
0019BCr 3                       ; DO and the Control Flow section of the manual for details).
0019BCr 3                       ; """
0019BCr 3               
0019BCr 3               xt_plus_loop:
0019BCr 3                               ; Compile the run-time part. We do this with a short loop
0019BCr 3                               ; and not a call to COMPILE, because it has to be natively
0019BCr 3                               ; coded anyway.
0019BCr 3  A0 11                        ldy #plus_loop_runtime_end-plus_loop_runtime
0019BEr 3  5A                           phy             ; save counter to adjust CP
0019BFr 3               @1:
0019BFr 3  B9 rr rr                     lda plus_loop_runtime,y
0019C2r 3  91 rr                        sta (cp),y
0019C4r 3  88                           dey
0019C5r 3  10 F8                        bpl @1
0019C7r 3               
0019C7r 3                               ; Adjust CP
0019C7r 3  68                           pla
0019C8r 3  18                           clc
0019C9r 3  65 rr                        adc cp
0019CBr 3  85 rr                        sta cp
0019CDr 3  A5 rr                        lda cp+1
0019CFr 3  69 00                        adc #0          ; only need carry
0019D1r 3  85 rr                        sta cp+1
0019D3r 3               
0019D3r 3                               ; The address we need to loop back to is TOS. Store it so
0019D3r 3                               ; the runtime part of +LOOP jumps back up there
0019D3r 3  20 rr rr                     jsr xt_comma
0019D6r 3               
0019D6r 3                               ; Compile an UNLOOP for when we're all done. This is a series
0019D6r 3                               ; of six PLA, so we just do it here instead jumping around
0019D6r 3                               ; all over the place
0019D6r 3  A9 68                        lda #$68                ; opcode for PLA
0019D8r 3  A0 06                        ldy #6
0019DAr 3               @2:
0019DAr 3  91 rr                        sta (cp),y
0019DCr 3  88                           dey
0019DDr 3  10 FB                        bpl @2
0019DFr 3               
0019DFr 3                               ; Adjust CP
0019DFr 3  A9 06                        lda #6
0019E1r 3  18                           clc
0019E2r 3  65 rr                        adc cp
0019E4r 3  85 rr                        sta cp
0019E6r 3  A5 rr                        lda cp+1
0019E8r 3  69 00                        adc #0                  ; only need carry
0019EAr 3  85 rr                        sta cp+1
0019ECr 3               
0019ECr 3                               ; Complete compile of DO/?DO by replacing the six
0019ECr 3                               ; dummy bytes by PHA instructions. The address where
0019ECr 3                               ; they are located is on the Data Stack
0019ECr 3  B5 00                        lda 0,x
0019EEr 3  85 rr                        sta tmp1
0019F0r 3  B5 01                        lda 1,x
0019F2r 3  85 rr                        sta tmp1+1
0019F4r 3  E8                           inx
0019F5r 3  E8                           inx
0019F6r 3               
0019F6r 3                               ; Because of the way that CP works, we don't have to save
0019F6r 3                               ; CP, but CP-1
0019F6r 3  A5 rr                        lda cp
0019F8r 3  38                           sec
0019F9r 3  E9 01                        sbc #1
0019FBr 3  85 rr                        sta tmp2
0019FDr 3  A5 rr                        lda cp+1
0019FFr 3  E9 00                        sbc #0
001A01r 3  85 rr                        sta tmp2+1
001A03r 3               
001A03r 3                               ; now compile this in the DO/?DO routine
001A03r 3  A0 00                        ldy #0
001A05r 3               
001A05r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001A07r 3  91 rr                        sta (tmp1),y
001A09r 3  C8                           iny
001A0Ar 3  A5 rr                        lda tmp2+1      ; MSB
001A0Cr 3  91 rr                        sta (tmp1),y
001A0Er 3  C8                           iny
001A0Fr 3  A9 48                        lda #$48        ; Opcode for PHA
001A11r 3  91 rr                        sta (tmp1),y
001A13r 3  C8                           iny
001A14r 3               
001A14r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001A16r 3  91 rr                        sta (tmp1),y
001A18r 3  C8                           iny
001A19r 3  A5 rr                        lda tmp2        ; LSB
001A1Br 3  91 rr                        sta (tmp1),y
001A1Dr 3  C8                           iny
001A1Er 3  A9 48                        lda #$48        ; Opcode for PHA
001A20r 3  91 rr                        sta (tmp1),y
001A22r 3               z_loop:
001A22r 3  60           z_plus_loop:    rts
001A23r 3               
001A23r 3               
001A23r 3               plus_loop_runtime:
001A23r 3                       ; """Runtime compile for loop control. This is used for both +LOOP and
001A23r 3                       ; LOOP which are defined at high level. Note we use a fudge factor for
001A23r 3                       ; loop control so we can test with the Overflow Flag. See
001A23r 3                       ; the Control Flow section of the manual for details.
001A23r 3                       ; The step value is TOS in the loop. This
001A23r 3                       ; must always be native compiled. In some Forths, this is a separate
001A23r 3                       ; word called (+LOOP) or (LOOP)
001A23r 3                       ; """
001A23r 3               
001A23r 3  18                           clc
001A24r 3  68                           pla             ; LSB of index
001A25r 3  75 00                        adc 0,x         ; LSB of step
001A27r 3  A8                           tay             ; temporary storage of LSB
001A28r 3               
001A28r 3  B8                           clv
001A29r 3  68                           pla             ; MSB of index
001A2Ar 3  75 01                        adc 1,x         ; MSB of step
001A2Cr 3  48                           pha             ; put MSB of index back on stack
001A2Dr 3               
001A2Dr 3  98                           tya             ; put LSB of index back on stack
001A2Er 3  48                           pha
001A2Fr 3               
001A2Fr 3  E8                           inx             ; dump step from TOS
001A30r 3  E8                           inx
001A31r 3               
001A31r 3                               ; If V flag is set, we're done looping and continue
001A31r 3                               ; after the +LOOP instruction
001A31r 3  70 03                        bvs @hack+3     ; skip over JMP instruction
001A33r 3               
001A33r 3               @hack:          ; This is why this routine must be natively compiled: We
001A33r 3                               ; compile the opcode for JMP here without an address to
001A33r 3                               ; go to, which is added by the next next instruction of
001A33r 3                               ; LOOP/+LOOP during compile time
001A33r 3  4C                           .byte $4C
001A34r 3               
001A34r 3               plus_loop_runtime_end:
001A34r 3               
001A34r 3               
001A34r 3               ; ## LSHIFT ( x u -- u ) "Shift TOS left"
001A34r 3               ; ## "lshift"  auto  ANS core
001A34r 3                       ; """https://forth-standard.org/standard/core/LSHIFT"""
001A34r 3               
001A34r 3               xt_lshift:
001A34r 3  20 rr rr                     jsr underflow_2
001A37r 3               
001A37r 3                               ; max shift 16 times
001A37r 3  B5 00                        lda 0,x
001A39r 3  29 0F                        and #%00001111
001A3Br 3  F0 08                        beq @done
001A3Dr 3               
001A3Dr 3  A8                           tay
001A3Er 3               
001A3Er 3               @loop:
001A3Er 3  16 02                        asl 2,x
001A40r 3  36 03                        rol 3,x
001A42r 3  88                           dey
001A43r 3  D0 F9                        bne @loop
001A45r 3               
001A45r 3               @done:
001A45r 3  E8                           inx
001A46r 3  E8                           inx
001A47r 3               
001A47r 3  60           z_lshift:       rts
001A48r 3               
001A48r 3               
001A48r 3               
001A48r 3               ; ## M_STAR ( n n -- d ) "16 * 16 --> 32"
001A48r 3               ; ## "m*"  auto  ANS core
001A48r 3                       ; """https://forth-standard.org/standard/core/MTimes
001A48r 3                       ; Multiply two 16 bit numbers, producing a 32 bit result. All
001A48r 3                       ; values are signed. Adapted from FIG Forth for Tali Forth.
001A48r 3                       ;
001A48r 3                       ; The original Forth is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;
001A48r 3                       ; with  : D+- O< IF DNEGATE THEN ;
001A48r 3                       ; """
001A48r 3               
001A48r 3               xt_m_star:
001A48r 3  20 rr rr                     jsr underflow_2
001A4Br 3               
001A4Br 3                               ; figure out the sign
001A4Br 3  B5 01                        lda 1,x         ; MSB of n1
001A4Dr 3  55 03                        eor 3,x         ; MSB of n2
001A4Fr 3               
001A4Fr 3                               ; UM* uses all kinds of temporary variables so we don't
001A4Fr 3                               ; risk a conflict but just take the cycle hit and push
001A4Fr 3                               ; this to the stack
001A4Fr 3  48                           pha
001A50r 3               
001A50r 3                               ; get the absolute value of both numbers so we can feed
001A50r 3                               ; them to UM*, which does the real work
001A50r 3  20 rr rr                     jsr xt_abs
001A53r 3  20 rr rr                     jsr xt_swap
001A56r 3  20 rr rr                     jsr xt_abs
001A59r 3               
001A59r 3  20 rr rr                     jsr xt_um_star          ; ( d )
001A5Cr 3               
001A5Cr 3                               ; handle the sign
001A5Cr 3  68                           pla
001A5Dr 3  10 03                        bpl @done
001A5Fr 3               
001A5Fr 3  20 rr rr                     jsr xt_dnegate
001A62r 3               @done:
001A62r 3  60           z_m_star:       rts
001A63r 3               
001A63r 3               
001A63r 3               
001A63r 3               ; ## MARKER ( "name" -- ) "Create a deletion boundry"
001A63r 3               ; ## "marker"  auto  ANS core ext
001A63r 3                       ; """https://forth-standard.org/standard/core/MARKER
001A63r 3                       ; This word replaces FORGET in earlier Forths. Old entries are not
001A63r 3                       ; actually deleted, but merely overwritten by restoring CP and DP.
001A63r 3                       ; Run the named word at a later time to restore all of the wordlists
001A63r 3                       ; to their state when the word was created with marker.  Any words
001A63r 3                       ; created after the marker (including the marker) will be forgotten.
001A63r 3                       ;
001A63r 3                       ; To do this, we want to end up with something that jumps to a
001A63r 3                       ; run-time component with a link to the original CP and DP values:
001A63r 3                       ;
001A63r 3                       ;       jsr marker_runtime
001A63r 3                       ;       <Original CP MSB>
001A63r 3                       ;       <Original CP LSB>
001A63r 3                       ;       <Original DP MSB> ( for CURRENT wordlist )
001A63r 3                       ;       <Original DP LSB>
001A63r 3                       ;       < USER variables from offset 4 to 39 >
001A63r 3                       ;
001A63r 3                       ;       The user variables include:
001A63r 3                       ;       CURRENT (byte variable)
001A63r 3                       ;       <All wordlists> (currently 12) (cell array)
001A63r 3                       ;       <#ORDER> (byte variable)
001A63r 3                       ;       <All search order> (currently 9) (byte array)
001A63r 3                       ;
001A63r 3                       ; This code uses tmp1 and tmp2
001A63r 3                       ; """
001A63r 3               
001A63r 3               xt_marker:
001A63r 3                               ; Before we do anything, we need to save CP, which
001A63r 3                               ; after all is the whole point of this operation. CREATE
001A63r 3                               ; uses tmp1 and tmp2, so we take the speed hit and push stuff
001A63r 3                               ; to the stack
001A63r 3  20 rr rr                     jsr current_to_dp
001A66r 3               
001A66r 3  A5 rr                        lda dp
001A68r 3  48                           pha
001A69r 3  A5 rr                        lda dp+1
001A6Br 3  48                           pha
001A6Cr 3               
001A6Cr 3  A5 rr                        lda cp
001A6Er 3  48                           pha
001A6Fr 3  A5 rr                        lda cp+1
001A71r 3  48                           pha
001A72r 3               
001A72r 3  20 rr rr                     jsr xt_create
001A75r 3               
001A75r 3                               ; By default, CREATE installs a subroutine jump to DOVAR, which
001A75r 3                               ; we have to replace by a jump to marker_runtime. We back up
001A75r 3                               ; two bytes and then overwrite the address
001A75r 3  A5 rr                        lda cp          ; LSB
001A77r 3  38                           sec
001A78r 3  E9 02                        sbc #2
001A7Ar 3  85 rr                        sta cp
001A7Cr 3               
001A7Cr 3  A5 rr                        lda cp+1        ; MSB
001A7Er 3  E9 00                        sbc #0          ; we only care about the borrow
001A80r 3  85 rr                        sta cp+1
001A82r 3               
001A82r 3                               ; Add the address of the runtime component
001A82r 3  A0 rr                        ldy #>marker_runtime
001A84r 3  A9 rr                        lda #<marker_runtime
001A86r 3  20 rr rr                     jsr cmpl_word
001A89r 3               
001A89r 3                               ; Add original CP as payload
001A89r 3  7A                           ply                     ; MSB
001A8Ar 3  68                           pla                     ; LSB
001A8Br 3  20 rr rr                     jsr cmpl_word
001A8Er 3               
001A8Er 3                               ; Add original DP as payload
001A8Er 3  7A                           ply                     ; MSB
001A8Fr 3  68                           pla                     ; LSB
001A90r 3  20 rr rr                     jsr cmpl_word
001A93r 3               
001A93r 3                               ; Add the user variables for the wordlists and search order.
001A93r 3                               ; We're compiling them in byte order.
001A93r 3  A0 04                        ldy #4                  ; Start at CURRENT
001A95r 3               @marker_loop:
001A95r 3  B1 rr                        lda (up),y
001A97r 3  20 rr rr                     jsr cmpl_a
001A9Ar 3  C8                           iny
001A9Br 3  98                           tya
001A9Cr 3  C9 28                        cmp #40                 ; One past the end of the search order.
001A9Er 3  D0 F5                        bne @marker_loop
001AA0r 3               
001AA0r 3  60           z_marker:       rts
001AA1r 3               
001AA1r 3               
001AA1r 3               
001AA1r 3               marker_runtime:
001AA1r 3                       ; """Restore Dictionary and memory (DP and CP) to where the were
001AA1r 3                       ; when this marker was defined. We arrive here with the return
001AA1r 3                       ; address on the Return Stack in the usual 65c02 format
001AA1r 3                       ; """
001AA1r 3               
001AA1r 3                               ; Get the address of the string address off the stack and
001AA1r 3                               ; increase by one because of the RTS mechanics
001AA1r 3  68                           pla
001AA2r 3  85 rr                        sta tmp1        ; LSB of address
001AA4r 3  68                           pla
001AA5r 3  85 rr                        sta tmp1+1      ; MSB of address
001AA7r 3               
001AA7r 3  E6 rr                        inc tmp1
001AA9r 3  D0 02                        bne @1
001AABr 3  E6 rr                        inc tmp1+1
001AADr 3               @1:
001AADr 3  A0 00                        ldy #0
001AAFr 3               
001AAFr 3                               ; CP was stored first
001AAFr 3  B1 rr                        lda (tmp1),y
001AB1r 3  85 rr                        sta cp
001AB3r 3  C8                           iny
001AB4r 3  B1 rr                        lda (tmp1),y
001AB6r 3  85 rr                        sta cp+1
001AB8r 3               
001AB8r 3                               ; Next was DP
001AB8r 3  C8                           iny
001AB9r 3  B1 rr                        lda (tmp1),y
001ABBr 3  85 rr                        sta dp
001ABDr 3  C8                           iny
001ABEr 3  B1 rr                        lda (tmp1),y
001AC0r 3  85 rr                        sta dp+1
001AC2r 3               
001AC2r 3                               ; Conveniently, the offset into both tmp1 and UP is 4
001AC2r 3                               ; to start restoring the wordlists and search order.
001AC2r 3  A0 04                        ldy #4
001AC4r 3               
001AC4r 3               @marker_restore_loop:
001AC4r 3                               ; Copy from the dictionary back on top of the wordlists
001AC4r 3                               ; and search order.
001AC4r 3  B1 rr                        lda (tmp1), y
001AC6r 3  91 rr                        sta (up), y
001AC8r 3  C8                           iny
001AC9r 3  98                           tya
001ACAr 3  C9 28                        cmp #40                 ; One past the end of the search order.
001ACCr 3  D0 F6                        bne @marker_restore_loop
001ACEr 3               
001ACEr 3  20 rr rr                     jsr dp_to_current       ; Move the CURRENT DP back.
001AD1r 3               
001AD1r 3                               ; The return instruction takes us back to the original caller
001AD1r 3  60                           rts
001AD2r 3               
001AD2r 3               
001AD2r 3               
001AD2r 3               ; ## MAX ( n n -- n ) "Keep larger of two numbers"
001AD2r 3               ; ## "max"  auto  ANS core
001AD2r 3                       ; """https://forth-standard.org/standard/core/MAX
001AD2r 3                       ; Compare TOS and NOS and keep which one is larger. Adapted from
001AD2r 3                       ; Lance A. Leventhal "6502 Assembly Language Subroutines". Negative
001AD2r 3                       ; Flag indicates which number is larger. See also
001AD2r 3                       ; http://6502.org/tutorials/compare_instructions.html and
001AD2r 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001AD2r 3                       ; """
001AD2r 3               
001AD2r 3               xt_max:
001AD2r 3  20 rr rr                     jsr underflow_2
001AD5r 3               
001AD5r 3                               ; Compare LSB. We do this first to set the carry flag
001AD5r 3  B5 00                        lda 0,x         ; LSB of TOS
001AD7r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets the carry
001AD9r 3               
001AD9r 3  B5 01                        lda 1,x         ; MSB of TOS
001ADBr 3  F5 03                        sbc 3,x         ; MSB of NOS
001ADDr 3  50 02                        bvc @no_overflow
001ADFr 3               
001ADFr 3                               ; handle overflow, because we use signed numbers
001ADFr 3  49 80                        eor #$80        ; complement negative flag
001AE1r 3               
001AE1r 3               @no_overflow:
001AE1r 3                               ; if negative, NOS is larger and needs to be kept
001AE1r 3  30 08                        bmi @keep_nos
001AE3r 3               
001AE3r 3                               ; move TOS to NOS
001AE3r 3  B5 00                        lda 0,x
001AE5r 3  95 02                        sta 2,x
001AE7r 3  B5 01                        lda 1,x
001AE9r 3  95 03                        sta 3,x
001AEBr 3               
001AEBr 3               @keep_nos:
001AEBr 3  E8                           inx
001AECr 3  E8                           inx
001AEDr 3               
001AEDr 3  60           z_max:          rts
001AEEr 3               
001AEEr 3               
001AEEr 3               
001AEEr 3               ; ## MIN ( n n -- n ) "Keep smaller of two numbers"
001AEEr 3               ; ## "min"  auto  ANS core
001AEEr 3                       ; """https://forth-standard.org/standard/core/MIN
001AEEr 3                       ; Adapted from Lance A. Leventhal "6502 Assembly Language
001AEEr 3                       ; Subroutines." Negative Flag indicateds which number is larger. See
001AEEr 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001AEEr 3                       ; """
001AEEr 3               
001AEEr 3               xt_min:
001AEEr 3  20 rr rr                     jsr underflow_2
001AF1r 3               
001AF1r 3                               ; compare LSB. We do this first to set the carry flag
001AF1r 3  B5 00                        lda 0,x         ; LSB of TOS
001AF3r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets carry
001AF5r 3               
001AF5r 3  B5 01                        lda 1,x         ; MSB of TOS
001AF7r 3  F5 03                        sbc 3,x         ; MSB of NOS
001AF9r 3  50 02                        bvc @no_overflow
001AFBr 3               
001AFBr 3                               ; handle overflow because we use signed numbers
001AFBr 3  49 80                        eor #$80
001AFDr 3               
001AFDr 3               @no_overflow:
001AFDr 3                               ; if negative, NOS is larger and needs to be dumped
001AFDr 3  10 08                        bpl @keep_nos
001AFFr 3               
001AFFr 3                               ; move TOS to NOS
001AFFr 3  B5 00                        lda 0,x
001B01r 3  95 02                        sta 2,x
001B03r 3  B5 01                        lda 1,x
001B05r 3  95 03                        sta 3,x
001B07r 3               
001B07r 3               @keep_nos:
001B07r 3  E8                           inx
001B08r 3  E8                           inx
001B09r 3               
001B09r 3  60           z_min:          rts
001B0Ar 3               
001B0Ar 3               
001B0Ar 3               
001B0Ar 3               ; ## MINUS ( n n -- n ) "Subtract TOS from NOS"
001B0Ar 3               ; ## "-"  auto  ANS core
001B0Ar 3                       ; """https://forth-standard.org/standard/core/Minus"""
001B0Ar 3               xt_minus:
001B0Ar 3  20 rr rr                     jsr underflow_2
001B0Dr 3               
001B0Dr 3  38                           sec
001B0Er 3  B5 02                        lda 2,x         ; LSB
001B10r 3  F5 00                        sbc 0,x
001B12r 3  95 02                        sta 2,x
001B14r 3               
001B14r 3  B5 03                        lda 3,x         ; MSB
001B16r 3  F5 01                        sbc 1,x
001B18r 3  95 03                        sta 3,x
001B1Ar 3               
001B1Ar 3  E8                           inx
001B1Br 3  E8                           inx
001B1Cr 3               
001B1Cr 3  60           z_minus:        rts
001B1Dr 3               
001B1Dr 3               
001B1Dr 3               ; ## MINUS_LEADING ( addr1 u1 -- addr2 u2 ) "Remove leading spaces"
001B1Dr 3               ; ## "-leading"  auto  Tali String
001B1Dr 3                       ; """Remove leading whitespace. This is the reverse of -TRAILING
001B1Dr 3                       ; """
001B1Dr 3               
001B1Dr 3               xt_minus_leading:
001B1Dr 3  20 rr rr                     jsr underflow_2
001B20r 3               
001B20r 3               @loop:
001B20r 3                               ; Quit if we were given an empty string. This also terminates
001B20r 3                               ; the main loop
001B20r 3  B5 00                        lda 0,x
001B22r 3  15 01                        ora 1,x
001B24r 3  F0 0F                        beq @done
001B26r 3               
001B26r 3  A1 02                        lda (2,x)               ; get first character
001B28r 3  20 rr rr                     jsr is_whitespace
001B2Br 3  90 08                        bcc @done
001B2Dr 3               
001B2Dr 3                               ; It's whitespace, move one down
001B2Dr 3  20 rr rr                     jsr xt_one              ; ( addr u 1 )
001B30r 3  20 rr rr                     jsr xt_slash_string     ; ( addr+ u-1 )
001B33r 3               
001B33r 3  80 EB                        bra @loop
001B35r 3               @done:
001B35r 3               z_minus_leading:
001B35r 3  60                           rts
001B36r 3               
001B36r 3               
001B36r 3               
001B36r 3               ; ## MINUS_TRAILING ( addr u1 -- addr u2 ) "Remove trailing spaces"
001B36r 3               ; ## "-trailing"  auto  ANS string
001B36r 3                       ; """https://forth-standard.org/standard/string/MinusTRAILING
001B36r 3                       ; Remove trailing spaces
001B36r 3                       ; """
001B36r 3               
001B36r 3               xt_minus_trailing:
001B36r 3  20 rr rr                     jsr underflow_2
001B39r 3               
001B39r 3                               ; if length entry is zero, return a zero and leave the
001B39r 3                               ; address part untouched
001B39r 3  B5 00                        lda 0,x         ; LSB of n
001B3Br 3  15 01                        ora 1,x         ; MSB of n
001B3Dr 3  F0 33                        beq @done
001B3Fr 3               
001B3Fr 3                               ; Compute address of last char in tmp1 as
001B3Fr 3                               ; addr + u1 - 1
001B3Fr 3               
001B3Fr 3                               ; addr + u1
001B3Fr 3  18                           clc
001B40r 3  B5 02                        lda 2,x         ; LSB of addr
001B42r 3  75 00                        adc 0,x
001B44r 3  85 rr                        sta tmp1
001B46r 3  B5 03                        lda 3,x         ; MSB of addr
001B48r 3  75 01                        adc 1,x
001B4Ar 3  85 rr                        sta tmp1+1
001B4Cr 3               
001B4Cr 3                               ; - 1
001B4Cr 3  A5 rr                        lda tmp1
001B4Er 3  D0 02                        bne @1
001B50r 3  C6 rr                        dec tmp1+1
001B52r 3               @1:
001B52r 3  C6 rr                        dec tmp1
001B54r 3               
001B54r 3               @loop:
001B54r 3                               ; While spaces are found, move tmp1 backwards and
001B54r 3                               ; decrease the count on the data stack.
001B54r 3  B2 rr                        lda (tmp1)
001B56r 3  C9 20                        cmp #AscSP
001B58r 3  D0 18                        bne @done
001B5Ar 3               
001B5Ar 3                               ; Move back one address.
001B5Ar 3  A5 rr                        lda tmp1
001B5Cr 3  D0 02                        bne @2
001B5Er 3  C6 rr                        dec tmp1+1
001B60r 3               @2:
001B60r 3  C6 rr                        dec tmp1
001B62r 3               
001B62r 3                               ; Decrement count by one.
001B62r 3  B5 00                        lda 0,x
001B64r 3  D0 02                        bne @3
001B66r 3  D6 01                        dec 1,x
001B68r 3               @3:
001B68r 3  D6 00                        dec 0,x
001B6Ar 3               
001B6Ar 3                               ; Check if there are any characters left.
001B6Ar 3  B5 00                        lda 0,x
001B6Cr 3  15 01                        ora 1,x
001B6Er 3  F0 02                        beq @done       ; Count has reached zero - we're done!
001B70r 3               
001B70r 3  80 E2                        bra @loop
001B72r 3               
001B72r 3               @done:
001B72r 3               z_minus_trailing:
001B72r 3  60                           rts
001B73r 3               
001B73r 3               
001B73r 3               
001B73r 3               ; ## MOD ( n1 n2 -- n ) "Divide NOS by TOS and return the remainder"
001B73r 3               ; ## "mod"  auto  ANS core
001B73r 3                       ; """https://forth-standard.org/standard/core/MOD
001B73r 3                       ;
001B73r 3                       ; The Forth definition of this word is  : MOD /MOD DROP ;
001B73r 3                       ; so we just jump to xt_slash_mod and dump the actual result.
001B73r 3                       ; """
001B73r 3               xt_mod:
001B73r 3  20 rr rr                     jsr underflow_2
001B76r 3               
001B76r 3  20 rr rr                     jsr xt_slash_mod
001B79r 3               
001B79r 3  E8                           inx             ; DROP
001B7Ar 3  E8                           inx
001B7Br 3               z_mod:
001B7Br 3  60                           rts
001B7Cr 3               
001B7Cr 3               
001B7Cr 3               ; ## MOVE ( addr1 addr2 u -- ) "Copy bytes"
001B7Cr 3               ; ## "move"  auto  ANS core
001B7Cr 3                       ; """https://forth-standard.org/standard/core/MOVE
001B7Cr 3                       ; Copy u "address units" from addr1 to addr2. Since our address
001B7Cr 3                       ; units are bytes, this is just a front-end for CMOVE and CMOVE>. This
001B7Cr 3                       ; is actually the only one of these three words that is in the CORE
001B7Cr 3                       ; set.
001B7Cr 3                       ;
001B7Cr 3                       ; This word must not be natively compiled.
001B7Cr 3                       ; """
001B7Cr 3               
001B7Cr 3               xt_move:
001B7Cr 3                               ; We let CMOVE and CMOVE> check if there is underflow or
001B7Cr 3                               ; we've been told to copy zero bytes
001B7Cr 3               
001B7Cr 3                               ; compare MSB first
001B7Cr 3  B5 03                        lda 3,x                 ; MSB of addr2
001B7Er 3  D5 05                        cmp 5,x                 ; MSB of addr1
001B80r 3  F0 05                        beq @lsb                ; wasn't helpful, move to LSB
001B82r 3  B0 0E                        bcs @to_move_up         ; we want CMOVE>
001B84r 3               
001B84r 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001B87r 3               
001B87r 3               @lsb:
001B87r 3                               ; MSB were equal, so do the whole thing over with LSB
001B87r 3  B5 02                        lda 2,x                 ; LSB of addr2
001B89r 3  D5 04                        cmp 4,x                 ; LSB of addr1
001B8Br 3  F0 08                        beq @equal              ; LSB is equal as well
001B8Dr 3  B0 03                        bcs @to_move_up         ; we want CMOVE>
001B8Fr 3               
001B8Fr 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001B92r 3               
001B92r 3               @to_move_up:
001B92r 3  4C rr rr                     jmp xt_cmove_up         ; JSR/RTS
001B95r 3               @equal:
001B95r 3                               ; drop three entries from Data Stack
001B95r 3  8A                           txa
001B96r 3  18                           clc
001B97r 3  69 06                        adc #6
001B99r 3  AA                           tax
001B9Ar 3               
001B9Ar 3  60           z_move:         rts
001B9Br 3               
001B9Br 3               
001B9Br 3               
001B9Br 3               ; ## NAME_TO_INT ( nt -- xt ) "Convert Name Token to Execute Token"
001B9Br 3               ; ## "name>int"  tested  Gforth
001B9Br 3                       ; """See
001B9Br 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001B9Br 3                       ; """
001B9Br 3               
001B9Br 3               xt_name_to_int:
001B9Br 3  20 rr rr                     jsr underflow_1
001B9Er 3               
001B9Er 3                               ; The xt starts four bytes down from the nt
001B9Er 3  B5 00                        lda 0,x
001BA0r 3  18                           clc
001BA1r 3  69 04                        adc #4
001BA3r 3  85 rr                        sta tmp3
001BA5r 3               
001BA5r 3  B5 01                        lda 1,x
001BA7r 3  90 01                        bcc @done
001BA9r 3  1A                           inc
001BAAr 3               @done:
001BAAr 3  85 rr                        sta tmp3+1
001BACr 3               
001BACr 3  A0 00                        ldy #0
001BAEr 3  B1 rr                        lda (tmp3),y
001BB0r 3  95 00                        sta 0,x
001BB2r 3  C8                           iny
001BB3r 3  B1 rr                        lda (tmp3),y
001BB5r 3  95 01                        sta 1,x
001BB7r 3               
001BB7r 3  60           z_name_to_int:  rts
001BB8r 3               
001BB8r 3               
001BB8r 3               
001BB8r 3               ; ## NAME_TO_STRING ( nt -- addr u ) "Given a name token, return string of word"
001BB8r 3               ; ## "name>string"  tested  Gforth
001BB8r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html"""
001BB8r 3               
001BB8r 3               xt_name_to_string:
001BB8r 3  20 rr rr                     jsr underflow_1
001BBBr 3               
001BBBr 3  CA                           dex
001BBCr 3  CA                           dex
001BBDr 3               
001BBDr 3                               ; the length of the string is the first byte of the
001BBDr 3                               ; header pointed to by nt
001BBDr 3  A1 02                        lda (2,x)
001BBFr 3  95 00                        sta 0,x
001BC1r 3  74 01                        stz 1,x
001BC3r 3               
001BC3r 3                               ; the string itself always starts eight bytes down
001BC3r 3  B5 02                        lda 2,x         ; LSB
001BC5r 3  18                           clc
001BC6r 3  69 08                        adc #8
001BC8r 3  A8                           tay
001BC9r 3  B5 03                        lda 3,x         ; MSB
001BCBr 3  69 00                        adc #0          ; just need carry
001BCDr 3  95 03                        sta 3,x
001BCFr 3  94 02                        sty 2,x
001BD1r 3               
001BD1r 3               z_name_to_string:
001BD1r 3  60                           rts
001BD2r 3               
001BD2r 3               
001BD2r 3               ; ## NC_LIMIT ( -- addr ) "Return address where NC-LIMIT value is kept"
001BD2r 3               ; ## "nc-limit"  tested  Tali Forth
001BD2r 3               
001BD2r 3               xt_nc_limit:
001BD2r 3  CA                           dex
001BD3r 3  CA                           dex
001BD4r 3  A9 rr                        lda #<nc_limit
001BD6r 3  95 00                        sta 0,x
001BD8r 3  A9 rr                        lda #>nc_limit
001BDAr 3  95 01                        sta 1,x
001BDCr 3               
001BDCr 3  60           z_nc_limit:     rts
001BDDr 3               
001BDDr 3               
001BDDr 3               
001BDDr 3               ; ## NEGATE ( n -- n ) "Two's complement"
001BDDr 3               ; ## "negate"  auto  ANS core
001BDDr 3                       ; """https://forth-standard.org/standard/core/NEGATE"""
001BDDr 3               xt_negate:
001BDDr 3  20 rr rr                     jsr underflow_1
001BE0r 3               
001BE0r 3  A9 00                	lda #0
001BE2r 3  38                           sec
001BE3r 3  F5 00                        sbc 0,x         ; LSB
001BE5r 3  95 00                        sta 0,x
001BE7r 3               
001BE7r 3  A9 00                        lda #0
001BE9r 3  F5 01                        sbc 1,x         ; MSB
001BEBr 3  95 01                        sta 1,x
001BEDr 3               
001BEDr 3  60           z_negate:       rts
001BEEr 3               
001BEEr 3               
001BEEr 3               ; ## NEVER_NATIVE ( -- ) "Flag last word as never natively compiled"
001BEEr 3               ; ## "never-native"  auto  Tali Forth
001BEEr 3               xt_never_native:
001BEEr 3  20 rr rr                     jsr current_to_dp
001BF1r 3  A0 01                        ldy #1          ; offset for status byte
001BF3r 3  B1 rr                        lda (dp),y
001BF5r 3  09 08                        ora #NN         ; Make sure NN flag is set
001BF7r 3  29 FD                        and #$ff-AN     ; and AN flag is clear.
001BF9r 3  91 rr                        sta (dp),y
001BFBr 3               z_never_native:
001BFBr 3  60                           rts
001BFCr 3               
001BFCr 3               
001BFCr 3               ; ## NIP ( b a -- a ) "Delete NOS"
001BFCr 3               ; ## "nip"  auto  ANS core ext
001BFCr 3                       ; """https://forth-standard.org/standard/core/NIP"""
001BFCr 3               xt_nip:
001BFCr 3  20 rr rr                     jsr underflow_2
001BFFr 3               
001BFFr 3  B5 00                        lda 0,x         ; LSB
001C01r 3  95 02                        sta 2,x
001C03r 3  B5 01                        lda 1,x         ; MSB
001C05r 3  95 03                        sta 3,x
001C07r 3               
001C07r 3  E8                           inx
001C08r 3  E8                           inx
001C09r 3               
001C09r 3  60           z_nip:          rts
001C0Ar 3               
001C0Ar 3               
001C0Ar 3               ; ## NOT_EQUALS ( n m -- f ) "Return a true flag if TOS != NOS"
001C0Ar 3               ; ## "<>"  auto  ANS core ext
001C0Ar 3                       ; """https://forth-standard.org/standard/core/ne
001C0Ar 3                       ;
001C0Ar 3                       ; This is just a variant of EQUAL, we code it separately
001C0Ar 3                       ; for speed.
001C0Ar 3                       ; """
001C0Ar 3               
001C0Ar 3               xt_not_equals:
001C0Ar 3  20 rr rr                     jsr underflow_2
001C0Dr 3               
001C0Dr 3  A0 00                        ldy #0                  ; default is true
001C0Fr 3               
001C0Fr 3  B5 00                        lda 0,x                 ; LSB
001C11r 3  D5 02                        cmp 2,x
001C13r 3  D0 0A                        bne @not_equal
001C15r 3               
001C15r 3                               ; LSB is equal
001C15r 3  B5 01                        lda 1,x                 ; MSB
001C17r 3  D5 03                        cmp 3,x
001C19r 3  D0 04                        bne @not_equal
001C1Br 3               
001C1Br 3  A9 FF                        lda #$FF
001C1Dr 3  80 01                        bra @done
001C1Fr 3               
001C1Fr 3               @not_equal:
001C1Fr 3  88                           dey                     ; drop thru to done
001C20r 3               
001C20r 3               @done:
001C20r 3  98                           tya
001C21r 3  E8                           inx
001C22r 3  E8                           inx
001C23r 3  95 00                        sta 0,x
001C25r 3  95 01                        sta 1,x
001C27r 3               
001C27r 3  60           z_not_equals:   rts
001C28r 3               
001C28r 3               
001C28r 3               
001C28r 3               ; ## NOT_ROTE ( a b c -- c a b ) "Rotate upwards"
001C28r 3               ; ## "-rot"  auto  Gforth
001C28r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Data-stack.html"""
001C28r 3               
001C28r 3               xt_not_rote:
001C28r 3  20 rr rr                     jsr underflow_3
001C2Br 3               
001C2Br 3  B4 01                        ldy 1,x         ; MSB first
001C2Dr 3  B5 03                        lda 3,x
001C2Fr 3  95 01                        sta 1,x
001C31r 3               
001C31r 3  B5 05                        lda 5,x
001C33r 3  95 03                        sta 3,x
001C35r 3  94 05                        sty 5,x
001C37r 3               
001C37r 3  B4 00                        ldy 0,x         ; LSB second
001C39r 3  B5 02                        lda 2,x
001C3Br 3  95 00                        sta 0,x
001C3Dr 3               
001C3Dr 3  B5 04                        lda 4,x
001C3Fr 3  95 02                        sta 2,x
001C41r 3  94 04                        sty 4,x
001C43r 3               
001C43r 3  60           z_not_rote:     rts
001C44r 3               
001C44r 3               
001C44r 3               
001C44r 3               ; ## NUMBER ( addr u -- u | d ) "Convert a number string"
001C44r 3               ; ## "number"  auto  Tali Forth
001C44r 3                       ; """Convert a number string to a double or single cell number. This
001C44r 3                       ; is a wrapper for >NUMBER and follows the convention set out in the
001C44r 3                       ; "Forth Programmer's Handbook" (Conklin & Rather) 3rd edition p. 87.
001C44r 3                       ; Based in part on the "Starting Forth" code
001C44r 3                       ; https://www.forth.com/starting-forth/10-input-output-operators/
001C44r 3                       ; Gforth uses S>NUMBER? and S>UNUMBER? which return numbers and a flag
001C44r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
001C44r 3                       ; Another difference to Gforth is that we follow ANS Forth that the
001C44r 3                       ; dot to signal a double cell number is required to be the last
001C44r 3                       ; character of the string.
001C44r 3                       ;
001C44r 3                       ; Number calls >NUMBER which in turn calls UM*,
001C44r 3                       ; which uses tmp1, tmp2, and tmp3, so we can't use them here, which is
001C44r 3                       ; a pain.
001C44r 3                       ;"""
001C44r 3               
001C44r 3               xt_number:
001C44r 3  20 rr rr                     jsr underflow_2
001C47r 3               
001C47r 3                               ; we keep the flags for sign and double in tmpdsp because
001C47r 3                               ; we've run out of temporary variables
001C47r 3  64 rr                        stz tmpdsp      ; flag for double
001C49r 3  64 rr                        stz tmpdsp+1    ; flag for minus
001C4Br 3               
001C4Br 3                               ; If the first character is a minus, strip it off and set
001C4Br 3                               ; the flag
001C4Br 3  A1 02                        lda (2,x)
001C4Dr 3  C9 2D                        cmp #$2D        ; ASCII for "-"
001C4Fr 3  D0 0A                        bne @check_dot
001C51r 3               
001C51r 3                               ; It's a minus
001C51r 3  C6 rr                        dec tmpdsp+1
001C53r 3  F6 02                        inc 2,x         ; start one character later
001C55r 3  D0 02                        bne @1
001C57r 3  F6 03                        inc 3,x
001C59r 3               @1:
001C59r 3  D6 00                        dec 0,x         ; decrease string length by one
001C5Br 3               
001C5Br 3               @check_dot:
001C5Br 3                               ; If the last character is a dot, strip it off and set a
001C5Br 3                               ; flag. We can use tmptos as a temporary variable
001C5Br 3  B5 02                        lda 2,x         ; LSB of address
001C5Dr 3  18                           clc
001C5Er 3  75 00                        adc 0,x         ; length of string
001C60r 3  85 rr                        sta tmptos
001C62r 3  B5 03                        lda 3,x
001C64r 3  69 00                        adc #0          ; only need carry
001C66r 3  85 rr                        sta tmptos+1
001C68r 3               
001C68r 3                               ; tmptos now points to the first character after the string,
001C68r 3                               ; but we need the last character
001C68r 3  A5 rr                        lda tmptos
001C6Ar 3  D0 02                        bne @2
001C6Cr 3  C6 rr                        dec tmptos+1
001C6Er 3               @2:
001C6Er 3  C6 rr                        dec tmptos
001C70r 3               
001C70r 3  B2 rr                        lda (tmptos)
001C72r 3  C9 2E                        cmp #'.'
001C74r 3  D0 04                        bne @main
001C76r 3               
001C76r 3                               ; We have a dot, which means this is a double number. Flag
001C76r 3                               ; the fact and reduce string length by one
001C76r 3  C6 rr                        dec tmpdsp
001C78r 3  D6 00                        dec 0,x
001C7Ar 3               
001C7Ar 3               @main:
001C7Ar 3                               ; Set up stack for subroutine jump to >NUMBER, which means
001C7Ar 3                               ; we have to go ( addr u --> ud addr u )
001C7Ar 3  CA                           dex
001C7Br 3  CA                           dex
001C7Cr 3  CA                           dex
001C7Dr 3  CA                           dex
001C7Er 3               
001C7Er 3  B5 04                        lda 4,x         ; LSB of length
001C80r 3  95 00                        sta 0,x
001C82r 3  74 01                        stz 1,x         ; MSB, max length 255 chars
001C84r 3               
001C84r 3  B5 06                        lda 6,x         ; LSB of address
001C86r 3  95 02                        sta 2,x
001C88r 3  B5 07                        lda 7,x         ; MSB of address
001C8Ar 3  95 03                        sta 3,x
001C8Cr 3               
001C8Cr 3  74 04                        stz 4,x         ; clear space for ud
001C8Er 3  74 05                        stz 5,x
001C90r 3  74 06                        stz 6,x
001C92r 3  74 07                        stz 7,x
001C94r 3               
001C94r 3  20 rr rr                     jsr xt_to_number        ; (ud addr u -- ud addr u )
001C97r 3               
001C97r 3                               ; test length of returned string, which should be zero
001C97r 3  B5 00                        lda 0,x
001C99r 3  F0 15                        beq @all_converted
001C9Br 3               
001C9Br 3                               ; Something went wrong, we still have characters left over,
001C9Br 3                               ; so we print an error and abort. If the NUMBER was called
001C9Br 3                               ; by INTERPRET, we've already checked for Forth words, so
001C9Br 3                               ; we're in deep trouble one way or another
001C9Br 3  A9 3E                        lda #$3E        ; ASCII for ">"
001C9Dr 3  20 rr rr                     jsr emit_a
001CA0r 3  20 rr rr                     jsr xt_type
001CA3r 3  A9 3C                        lda #$3C        ; ASCII for "<"
001CA5r 3  20 rr rr                     jsr emit_a
001CA8r 3  20 rr rr                     jsr xt_space
001CABr 3               
001CABr 3  A9 08                        lda #err_syntax
001CADr 3  4C rr rr                     jmp error
001CB0r 3               
001CB0r 3               @all_converted:
001CB0r 3                               ; We can drop the string info
001CB0r 3  E8                           inx
001CB1r 3  E8                           inx
001CB2r 3  E8                           inx
001CB3r 3  E8                           inx
001CB4r 3               
001CB4r 3                               ; We have a double-cell number on the Data Stack that might
001CB4r 3                               ; actually have a minus and might actually be single-cell
001CB4r 3  A5 rr                        lda tmpdsp      ; flag for double
001CB6r 3  F0 0D                        beq @single
001CB8r 3               
001CB8r 3                               ; Set status bit 5 to indicate this is a double number
001CB8r 3  A9 20                        lda #%00100000
001CBAr 3  04 rr                        tsb status
001CBCr 3               
001CBCr 3                               ; This is a double cell number. If it had a minus, we'll have
001CBCr 3                               ; to negate it
001CBCr 3  A5 rr                        lda tmpdsp+1
001CBEr 3  F0 12                        beq @done       ; no minus, all done
001CC0r 3               
001CC0r 3  20 rr rr                     jsr xt_dnegate
001CC3r 3               
001CC3r 3  80 0D                        bra @done
001CC5r 3               
001CC5r 3               @single:
001CC5r 3                               ; This is a single number, so we just drop the top cell
001CC5r 3  E8                           inx
001CC6r 3  E8                           inx
001CC7r 3               
001CC7r 3                               ; Clear status bit 5 to indicate this is a single number
001CC7r 3  A9 20                        lda #%00100000
001CC9r 3  14 rr                        trb status
001CCBr 3               
001CCBr 3                               ; If we had a minus, we'll have to negate it
001CCBr 3  A5 rr                        lda tmpdsp+1
001CCDr 3  F0 03                        beq @done       ; no minus, all done
001CCFr 3               
001CCFr 3  20 rr rr                     jsr xt_negate
001CD2r 3               @done:
001CD2r 3  60           z_number:       rts
001CD3r 3               
001CD3r 3               
001CD3r 3               
001CD3r 3               ; ## NUMBER_SIGN ( ud -- ud ) "Add character to pictured output string"
001CD3r 3               ; ## "#"  auto  ANS core
001CD3r 3                       ; """https://forth-standard.org/standard/core/num
001CD3r 3                       ; Add one char to the beginning of the pictured output string.
001CD3r 3                       ;
001CD3r 3                       ; Based on
001CD3r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001CD3r 3                       ; Forth code  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
001CD3r 3                       ; """
001CD3r 3               xt_number_sign:
001CD3r 3  20 rr rr                     jsr underflow_2         ; double number
001CD6r 3               
001CD6r 3  20 rr rr                     jsr xt_base
001CD9r 3  20 rr rr                     jsr xt_fetch            ; ( ud1 base )
001CDCr 3               
001CDCr 3                               ; The following code is the ancient Forth word UD/MOD, which in
001CDCr 3                               ; various Forths (including Gforth) lives on under the hood,
001CDCr 3                               ; even though it's not an ANS standard word, it doesn't appear
001CDCr 3                               ; in the docs, it's only used here, and there are no tests for
001CDCr 3                               ; it. This is why we got rid of it. We'll be converting this
001CDCr 3                               ; mess to something more sane in the long run.
001CDCr 3  20 rr rr                     jsr xt_to_r             ; >r
001CDFr 3  20 rr rr                     jsr xt_zero             ; 0
001CE2r 3  20 rr rr                     jsr xt_r_fetch          ; r@
001CE5r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001CE8r 3  20 rr rr                     jsr xt_rot              ; rot
001CEBr 3  20 rr rr                     jsr xt_rot              ; rot
001CEEr 3  20 rr rr                     jsr xt_r_from           ; r>
001CF1r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001CF4r 3  20 rr rr                     jsr xt_rot              ; rot
001CF7r 3                               ; end of UD/MOD ( rem ud )
001CF7r 3               
001CF7r 3  20 rr rr                     jsr xt_rot              ; ( ud rem )
001CFAr 3               
001CFAr 3                               ; Convert the number that is left over to an ASCII character. We
001CFAr 3                               ; use a string lookup for speed. Use either abc_str_lower for
001CFAr 3                               ; lower case or abc_str_upper for upper case (prefered)
001CFAr 3  B5 00                        lda 0,x
001CFCr 3  A8                           tay
001CFDr 3  B9 rr rr                     lda s_abc_upper,y
001D00r 3  95 00                        sta 0,x
001D02r 3  74 01                        stz 1,x                 ; paranoid; now ( ud char )
001D04r 3               
001D04r 3  20 rr rr                     jsr xt_hold
001D07r 3               
001D07r 3               z_number_sign:
001D07r 3  60                           rts
001D08r 3               
001D08r 3               
001D08r 3               ; ## NUMBER_SIGN_GREATER ( d -- addr u ) "Finish pictured number conversion"
001D08r 3               ; ## "#>"  auto  ANS core
001D08r 3                       ; """https://forth-standard.org/standard/core/num-end
001D08r 3                       ; Finish conversion of pictured number string, putting address and
001D08r 3                       ; length on the Data Stack.
001D08r 3                       ;
001D08r 3                       ; Original Fort is  2DROP HLD @ PAD OVER -
001D08r 3                       ; Based on
001D08r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001D08r 3                       ; """
001D08r 3               xt_number_sign_greater:
001D08r 3               
001D08r 3  20 rr rr                     jsr underflow_2         ; double number
001D0Br 3               
001D0Br 3                               ; The start address lives in tohold
001D0Br 3  A5 rr                        lda tohold
001D0Dr 3  95 00                        sta 0,x         ; LSB of tohold
001D0Fr 3  95 02                        sta 2,x
001D11r 3  A5 rr                        lda tohold+1
001D13r 3  95 01                        sta 1,x         ; MSB of addr
001D15r 3  95 03                        sta 3,x         ; ( addr addr )
001D17r 3               
001D17r 3                               ; The length of the string is pad - addr
001D17r 3  20 rr rr                     jsr xt_pad      ; ( addr addr pad )
001D1Ar 3               
001D1Ar 3  38                           sec
001D1Br 3  B5 00                        lda 0,x         ; LSB of pad address
001D1Dr 3  F5 02                        sbc 2,x
001D1Fr 3  95 02                        sta 2,x
001D21r 3               
001D21r 3  B5 01                        lda 1,x         ; MSB, which should always be zero
001D23r 3  F5 03                        sbc 3,x
001D25r 3  95 03                        sta 3,x         ; ( addr u pad )
001D27r 3               
001D27r 3  E8                           inx
001D28r 3  E8                           inx
001D29r 3               
001D29r 3               z_number_sign_greater:
001D29r 3  60                           rts
001D2Ar 3               
001D2Ar 3               
001D2Ar 3               ; ## NUMBER_SIGN_S ( d -- addr u ) "Completely convert pictured output"
001D2Ar 3               ; ## "#s"  auto  ANS core
001D2Ar 3                       ; """https://forth-standard.org/standard/core/numS
001D2Ar 3                       ; Completely convert number for pictured numerical output.
001D2Ar 3                       ;
001D2Ar 3                       ; Based on
001D2Ar 3                       ; https://github.com/philburk/pforth/blob/master/fth/system.fth
001D2Ar 3                       ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
001D2Ar 3                       ; """
001D2Ar 3               
001D2Ar 3               xt_number_sign_s:
001D2Ar 3  20 rr rr                     jsr underflow_2
001D2Dr 3               @loop:
001D2Dr 3                               ; convert a single number ("#")
001D2Dr 3  20 rr rr                     jsr xt_number_sign
001D30r 3               
001D30r 3                               ; stop when double-celled number in TOS is zero:
001D30r 3  B5 00                        lda 0,x
001D32r 3  15 01                        ora 1,x
001D34r 3  15 02                        ora 2,x
001D36r 3  15 03                        ora 3,x
001D38r 3  D0 F3                        bne @loop
001D3Ar 3               
001D3Ar 3               z_number_sign_s:
001D3Ar 3  60                           rts
001D3Br 3               
001D3Br 3               
001D3Br 3               
001D3Br 3               ; ## OF (C: -- of-sys) (x1 x2 -- |x1) "Conditional flow control"
001D3Br 3               ; ## "of"  auto  ANS core ext
001D3Br 3                       ; """http://forth-standard.org/standard/core/OF"""
001D3Br 3               
001D3Br 3               xt_of:
001D3Br 3                               ; Check if value is equal to this case.
001D3Br 3                               ; Postpone over (eg. compile a jsr to it)
001D3Br 3  A0 rr                        ldy #>xt_over
001D3Dr 3  A9 rr                        lda #<xt_over
001D3Fr 3  20 rr rr                     jsr cmpl_subroutine
001D42r 3               
001D42r 3                               ; Postpone = (EQUAL), that is, compile a jsr to it
001D42r 3  A0 rr                        ldy #>xt_equal
001D44r 3  A9 rr                        lda #<xt_equal
001D46r 3  20 rr rr                     jsr cmpl_subroutine
001D49r 3               
001D49r 3  20 rr rr                     jsr xt_if
001D4Cr 3               
001D4Cr 3                               ; If it's true, consume the original value.
001D4Cr 3                               ; Postpone DROP (eg. compile a jsr to it)
001D4Cr 3  A0 rr                        ldy #>xt_drop
001D4Er 3  A9 rr                        lda #<xt_drop
001D50r 3  20 rr rr                     jsr cmpl_subroutine
001D53r 3               
001D53r 3  60           z_of:           rts
001D54r 3               
001D54r 3               
001D54r 3               
001D54r 3               ; ## ONE ( -- n ) "Push the number 1 to the Data Stack"
001D54r 3               ; ## "1"  auto  Tali Forth
001D54r 3                       ; """This is also the code for EDITOR-WORDLIST"""
001D54r 3               xt_editor_wordlist:
001D54r 3               xt_one:
001D54r 3  CA                           dex
001D55r 3  CA                           dex
001D56r 3  A9 01                        lda #1
001D58r 3  95 00                        sta 0,x
001D5Ar 3  74 01                        stz 1,x
001D5Cr 3               
001D5Cr 3               z_editor_wordlist:
001D5Cr 3               z_one:
001D5Cr 3  60                           rts
001D5Dr 3               
001D5Dr 3               
001D5Dr 3               ; ## ONE_MINUS ( u -- u-1 ) "Decrease TOS by one"
001D5Dr 3               ; ## "1-"  auto  ANS core
001D5Dr 3                       ; """https://forth-standard.org/standard/core/OneMinus"""
001D5Dr 3               
001D5Dr 3               xt_one_minus:
001D5Dr 3  20 rr rr                     jsr underflow_1
001D60r 3               
001D60r 3  B5 00                        lda 0,x
001D62r 3  D0 02                        bne @1
001D64r 3  D6 01                        dec 1,x
001D66r 3               @1:
001D66r 3  D6 00                        dec 0,x
001D68r 3               
001D68r 3  60           z_one_minus:    rts
001D69r 3               
001D69r 3               
001D69r 3               
001D69r 3               ; ## ONE_PLUS ( u -- u+1 ) "Increase TOS by one"
001D69r 3               ; ## "1+"  auto  ANS core
001D69r 3                       ; """https://forth-standard.org/standard/core/OnePlus
001D69r 3                       ;
001D69r 3                       ; Code is shared with CHAR-PLUS
001D69r 3                       ; """
001D69r 3               
001D69r 3               xt_char_plus:
001D69r 3               xt_one_plus:
001D69r 3  20 rr rr                     jsr underflow_1
001D6Cr 3               
001D6Cr 3  F6 00                        inc 0,x
001D6Er 3  D0 02                        bne @done
001D70r 3  F6 01                        inc 1,x
001D72r 3               
001D72r 3               @done:
001D72r 3               z_char_plus:
001D72r 3  60           z_one_plus:     rts
001D73r 3               
001D73r 3               
001D73r 3               
001D73r 3               ; ## ONLY ( -- ) "Set earch order to minimum wordlist"
001D73r 3               ; ## "only"  auto  ANS search ext
001D73r 3                       ; """https://forth-standard.org/standard/search/ONLY"""
001D73r 3               
001D73r 3               xt_only:
001D73r 3                               ; Put -1 on data stack.
001D73r 3  CA                           dex
001D74r 3  CA                           dex
001D75r 3  A9 FF                        lda #$FF
001D77r 3  95 00                        sta 0,x
001D79r 3  95 01                        sta 1,x
001D7Br 3               
001D7Br 3                               ; Invoke set-order to set the minimum search order.
001D7Br 3  20 rr rr                     jsr xt_set_order
001D7Er 3               
001D7Er 3  60           z_only:         rts
001D7Fr 3               
001D7Fr 3               
001D7Fr 3               
001D7Fr 3               ; ## OR ( m n -- n ) "Logically OR TOS and NOS"
001D7Fr 3               ; ## "or"  auto  ANS core
001D7Fr 3                       ; """https://forth-standard.org/standard/core/OR"
001D7Fr 3               xt_or:
001D7Fr 3  20 rr rr                     jsr underflow_2
001D82r 3               
001D82r 3  B5 00                        lda 0,x
001D84r 3  15 02                        ora 2,x
001D86r 3  95 02                        sta 2,x
001D88r 3               
001D88r 3  B5 01                        lda 1,x
001D8Ar 3  15 03                        ora 3,x
001D8Cr 3  95 03                        sta 3,x
001D8Er 3               
001D8Er 3  E8                           inx
001D8Fr 3  E8                           inx
001D90r 3               
001D90r 3  60           z_or:           rts
001D91r 3               
001D91r 3               
001D91r 3               ; ## ORDER ( -- ) "Print current word order list and current WID"
001D91r 3               ; ## "order"  auto  ANS core
001D91r 3                       ; """https://forth-standard.org/standard/search/ORDER
001D91r 3                       ; Note the search order is displayed from first search to last
001D91r 3                       ; searched and is therefore exactly the reverse of the order in which
001D91r 3                       ; Forth stacks are displayed.
001D91r 3                       ;
001D91r 3                       ; A Forth implementation of this word is:
001D91r 3                       ;
001D91r 3                       ; 	: .wid ( wid -- )
001D91r 3                       ; 	dup 0=  if ." Forth "  drop    else
001D91r 3                       ; 	dup 1 = if ." Editor " drop    else
001D91r 3                       ; 	dup 2 = if ." Assembler " drop else
001D91r 3                       ; 	dup 3 = if ." Root " drop      else
001D91r 3                       ; 	           . ( just print the number )
001D91r 3                       ; 	then then then then ;
001D91r 3                       ;
001D91r 3                       ; : ORDER ( -- )
001D91r 3                       ; 	cr get-order 0 ?do .wid loop
001D91r 3                       ; 	space space get-current .wid ;
001D91r 3                       ;
001D91r 3                       ; This is an interactive program, so speed
001D91r 3                       ; is not as important as size. We assume we do not have more than 255
001D91r 3                       ; wordlists.
001D91r 3                       ; """
001D91r 3               
001D91r 3               xt_order:
001D91r 3  20 rr rr                     jsr xt_cr
001D94r 3  20 rr rr                     jsr xt_get_order        ; ( wid_n ... wid_1 n )
001D97r 3               
001D97r 3                               ; Paranoid: Check if there are no wordlists, a rather
001D97r 3                               ; pathological case. this would mean ( 0 ) on the stack. In
001D97r 3                               ; that case, we just drop n and run
001D97r 3  B5 00                        lda 0,x                 ; assumes no more than 255 wordlists
001D99r 3  F0 1E                        beq @drop_done
001D9Br 3               
001D9Br 3               @have_wordlists:
001D9Br 3                               ; We arrive here with the LSB of TOS in A, the number of WIDs
001D9Br 3                               ; on the stack
001D9Br 3  A8                           tay
001D9Cr 3               @loop:
001D9Cr 3  E8                           inx
001D9Dr 3  E8                           inx                     ; DROP, now ( wid_n ... wid_1 )
001D9Er 3  B5 00                        lda 0,x
001DA0r 3               
001DA0r 3  5A                           phy
001DA1r 3  20 rr rr                     jsr _print_wid_string   ; internal helper function
001DA4r 3  7A                           ply
001DA5r 3               
001DA5r 3  88                           dey
001DA6r 3  D0 F4                        bne @loop
001DA8r 3               
001DA8r 3                               ; We've printed the wordlists, now we add the current wordlist.
001DA8r 3                               ; This follows the convention of Gforth
001DA8r 3  20 rr rr                     jsr xt_space
001DABr 3  20 rr rr                     jsr xt_space
001DAEr 3  20 rr rr                     jsr xt_get_current      ; ( wid )
001DB1r 3               
001DB1r 3  B5 00                        lda 0,x
001DB3r 3  20 rr rr                     jsr _print_wid_string
001DB6r 3  20 rr rr                     jsr xt_cr
001DB9r 3               
001DB9r 3               @drop_done:
001DB9r 3  E8                           inx
001DBAr 3  E8                           inx
001DBBr 3               z_order:
001DBBr 3  60                           rts
001DBCr 3               
001DBCr 3               _print_wid_string:
001DBCr 3                       ; """Helper function for ORDER: Given a WID in A, print the
001DBCr 3                       ; corresponding string. If there is no such word list defined, just
001DBCr 3                       ; print the number. Assumes we will not have more than 256 WIDs; also
001DBCr 3                       ; assumes we have just loaded A so Z reflects status of byte.  In
001DBCr 3                       ; theory, we could speed this up by having the WID be the same as the
001DBCr 3                       ; number of the strings. However, ORDER is used rather infrequently and
001DBCr 3                       ; this would make changes to the strings.asm file very dangerous, so we
001DBCr 3                       ; follow the slightly more complicated route with a translation table.
001DBCr 3                       ; """
001DBCr 3                               ; If the WID is larger than 3, we have no string avaliable and
001DBCr 3                               ; just print the number.
001DBCr 3                               ; See http://6502.org/tutorials/compare_instructions.html
001DBCr 3                               ; for details
001DBCr 3  C9 04                        cmp #4
001DBEr 3  90 09                        bcc @output_string      ; less than 4, print a real string
001DC0r 3               
001DC0r 3                               ; Our WID is not less than 4, that is, 4 or larger. We just
001DC0r 3                               ; print the number
001DC0r 3  CA                           dex
001DC1r 3  CA                           dex
001DC2r 3  95 00                        sta 0,x
001DC4r 3  74 01                        stz 1,x
001DC6r 3  4C rr rr                     jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
001DC9r 3               
001DC9r 3               @output_string:
001DC9r 3                               ; Get the string number based on WID 0 to 3
001DC9r 3  A8                           tay
001DCAr 3  B9 rr rr                     lda @wid_data,y
001DCDr 3               
001DCDr 3                               ; Print without a line feed
001DCDr 3  4C rr rr                     jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
001DD0r 3               
001DD0r 3               @wid_data:
001DD0r 3                       ; Table of string numbers (see strings.asm) indexed by the WID if
001DD0r 3                       ; less than 4.
001DD0r 3  03                   .byte str_wid_forth            ; WID 0: "Forth"
001DD1r 3  06                   .byte str_wid_editor           ; WID 1: "Editor"
001DD2r 3  07                   .byte str_wid_assembler        ; WID 2: "Assembler"
001DD3r 3  08                   .byte str_wid_root             ; WID 3: "Root"
001DD4r 3               
001DD4r 3               
001DD4r 3               
001DD4r 3               ; ## OUTPUT ( -- addr ) "Return the address of the EMIT vector address"
001DD4r 3               ; ## "output"  tested  Tali Forth
001DD4r 3               xt_output:
001DD4r 3                       ; """Return the address where the jump target for EMIT is stored (but
001DD4r 3                       ; not the vector itself). By default, this will hold the value of
001DD4r 3                       ; kernel_putc routine, but this can be changed by the user, hence this
001DD4r 3                       ; routine.
001DD4r 3                       ; """
001DD4r 3  CA                           dex
001DD5r 3  CA                           dex
001DD6r 3  A9 rr                        lda #<output
001DD8r 3  95 00                        sta 0,x
001DDAr 3  A9 rr                        lda #>output
001DDCr 3  95 01                        sta 1,x
001DDEr 3               
001DDEr 3  60           z_output:       rts
001DDFr 3               
001DDFr 3               
001DDFr 3               ; ## OVER ( b a -- b a b ) "Copy NOS to TOS"
001DDFr 3               ; ## "over"  auto  ANS core
001DDFr 3                       ; """https://forth-standard.org/standard/core/OVER"""
001DDFr 3               xt_over:
001DDFr 3  20 rr rr                     jsr underflow_2
001DE2r 3               
001DE2r 3  CA                           dex
001DE3r 3  CA                           dex
001DE4r 3               
001DE4r 3  B5 04                        lda 4,x         ; LSB
001DE6r 3  95 00                        sta 0,x
001DE8r 3  B5 05                        lda 5,x         ; MSB
001DEAr 3  95 01                        sta 1,x
001DECr 3               
001DECr 3  60           z_over:         rts
001DEDr 3               
001DEDr 3               
001DEDr 3               ; ## PAD ( -- addr ) "Return address of user scratchpad"
001DEDr 3               ; ## "pad"  auto  ANS core ext
001DEDr 3                       ; """https://forth-standard.org/standard/core/PAD
001DEDr 3                       ; Return address to a temporary area in free memory for user. Must
001DEDr 3                       ; be at least 84 bytes in size (says ANS). It is located relative to
001DEDr 3                       ; the compile area pointer (CP) and therefore varies in position.
001DEDr 3                       ; This area is reserved for the user and not used by the system
001DEDr 3                       ; """
001DEDr 3               xt_pad:
001DEDr 3  CA                           dex
001DEEr 3  CA                           dex
001DEFr 3               
001DEFr 3  A5 rr                        lda cp
001DF1r 3  18                           clc
001DF2r 3  69 FF                        adc #padoffset  ; assumes padoffset one byte in size
001DF4r 3  95 00                        sta 0,x
001DF6r 3               
001DF6r 3  A5 rr                        lda cp+1
001DF8r 3  69 00                        adc #0          ; only need carry
001DFAr 3  95 01                        sta 1,x
001DFCr 3               
001DFCr 3  60           z_pad:          rts
001DFDr 3               
001DFDr 3               
001DFDr 3               ; ## PAGE ( -- ) "Clear the screen"
001DFDr 3               ; ## "page"  tested  ANS facility
001DFDr 3                       ; """https://forth-standard.org/standard/facility/PAGE
001DFDr 3                       ; Clears a page if supported by ANS terminal codes. This is
001DFDr 3                       ; Clear Screen ("ESC[2J") plus moving the cursor to the top
001DFDr 3                       ; left of the screen
001DFDr 3                       ; """
001DFDr 3               xt_page:
001DFDr 3  A9 1B                        lda #AscESC
001DFFr 3  20 rr rr                     jsr emit_a
001E02r 3  A9 5B                        lda #$5B        ; ASCII for "["
001E04r 3  20 rr rr                     jsr emit_a
001E07r 3  A9 32                        lda #'2'
001E09r 3  20 rr rr                     jsr emit_a
001E0Cr 3  A9 4A                        lda #'J'
001E0Er 3  20 rr rr                     jsr emit_a
001E11r 3               
001E11r 3                               ; move cursor to top left of screen
001E11r 3  20 rr rr                     jsr xt_zero
001E14r 3  20 rr rr                     jsr xt_zero
001E17r 3  20 rr rr                     jsr xt_at_xy
001E1Ar 3               
001E1Ar 3  60           z_page:         rts
001E1Br 3               
001E1Br 3               
001E1Br 3               ; ## PAREN ( -- ) "Discard input up to close paren ( comment )"
001E1Br 3               ; ## "("  auto  ANS core
001E1Br 3                       ; """http://forth-standard.org/standard/core/p"""
001E1Br 3               
001E1Br 3               xt_paren:
001E1Br 3                               ; Put a right paren on the stack.
001E1Br 3  CA                           dex
001E1Cr 3  CA                           dex
001E1Dr 3  A9 29                        lda #41     ; Right parenthesis
001E1Fr 3  95 00                        sta 0,x
001E21r 3  74 01                        stz 1,x
001E23r 3               
001E23r 3                               ; Call parse.
001E23r 3  20 rr rr                     jsr xt_parse
001E26r 3               
001E26r 3                               ; Throw away the result.
001E26r 3  E8                           inx
001E27r 3  E8                           inx
001E28r 3  E8                           inx
001E29r 3  E8                           inx
001E2Ar 3               
001E2Ar 3  60           z_paren:        rts
001E2Br 3               
001E2Br 3               
001E2Br 3               
001E2Br 3               ; ## PARSE_NAME ( "name" -- addr u ) "Parse the input"
001E2Br 3               ; ## "parse-name"  auto  ANS core ext
001E2Br 3                       ; """https://forth-standard.org/standard/core/PARSE-NAME
001E2Br 3                       ; Find next word in input string, skipping leading whitespace. This is
001E2Br 3                       ; a special form of PARSE and drops through to that word. See PARSE
001E2Br 3                       ; for more detail. We use this word internally for the interpreter
001E2Br 3                       ; because it is a lot easier to use. Reference implementations at
001E2Br 3                       ; http://forth-standard.org/standard/core/PARSE-NAME and
001E2Br 3                       ; http://www.forth200x.org/reference-implementations/parse-name.fs
001E2Br 3                       ; Roughly, the word is comparable to BL WORD COUNT. -- Note that
001E2Br 3                       ; though the ANS standard talks about skipping "spaces", whitespace
001E2Br 3                       ; is actually perfectly legal (see for example
001E2Br 3                       ; http://forth-standard.org/standard/usage#subsubsection.3.4.1.1).
001E2Br 3                       ; Otherwise, PARSE-NAME chokes on tabs.
001E2Br 3                       ; """
001E2Br 3               
001E2Br 3               xt_parse_name:
001E2Br 3                               ; To enable the compilation of the high-level Forth words
001E2Br 3                               ; in forth-words.asm and user-words.asm at boot time,
001E2Br 3                               ; PARSE-NAME and PARSE must be able to deal with 16-bit string
001E2Br 3                               ; lengths. This is a pain on an 8-bit machine. The pointer
001E2Br 3                               ; to the current location is in toin (>IN). We need to check,
001E2Br 3                               ; worst case, the characters from cib+toin to cib+ciblen, and
001E2Br 3                               ; we can't just use Y as an index.
001E2Br 3               
001E2Br 3                               ; The counter is CIBLEN-TOIN and stored in tmp1
001E2Br 3  A5 rr                        lda ciblen              ; LSB of counter
001E2Dr 3  38                           sec
001E2Er 3  E5 rr                        sbc toin
001E30r 3  85 rr                        sta tmp1
001E32r 3  A5 rr                        lda ciblen+1            ; MSB
001E34r 3  E5 rr                        sbc toin+1
001E36r 3  85 rr                        sta tmp1+1
001E38r 3               
001E38r 3                               ; Check the result for zero (TOIN is equal to CIBLEN)
001E38r 3  A5 rr                        lda tmp1
001E3Ar 3  05 rr                        ora tmp1+1
001E3Cr 3  F0 28                        beq @empty_line
001E3Er 3               
001E3Er 3                               ; We walk through the characters starting at CIB+TOIN, so we
001E3Er 3                               ; save a temp version of that in tmp2
001E3Er 3  A5 rr                        lda cib
001E40r 3  18                           clc
001E41r 3  65 rr                        adc toin
001E43r 3  85 rr                        sta tmp2                ; LSB of first character
001E45r 3  A5 rr                        lda cib+1
001E47r 3  65 rr                        adc toin+1
001E49r 3  85 rr                        sta tmp2+1              ; MSB
001E4Br 3               
001E4Br 3               @skip_loop:
001E4Br 3  B2 rr                        lda (tmp2)              ; work copy of cib
001E4Dr 3  20 rr rr                     jsr is_whitespace
001E50r 3  90 1F                        bcc @char_found
001E52r 3               
001E52r 3                               ; Char is still whitespace, continue
001E52r 3  E6 rr                        inc tmp2
001E54r 3  D0 02                        bne @2
001E56r 3  E6 rr                        inc tmp2+1
001E58r 3               @2:
001E58r 3                               ; Adjust counter
001E58r 3  A5 rr                        lda tmp1
001E5Ar 3  D0 02                        bne @3
001E5Cr 3  C6 rr                        dec tmp1+1
001E5Er 3               @3:
001E5Er 3  C6 rr                        dec tmp1
001E60r 3               
001E60r 3  A5 rr                        lda tmp1
001E62r 3  05 rr                        ora tmp1+1
001E64r 3  D0 E5                        bne @skip_loop          ; fall through if empty line
001E66r 3               
001E66r 3               @empty_line:
001E66r 3                               ; Neither the ANS Forth nor the Gforth documentation say
001E66r 3                               ; what to return as an address if a string with only
001E66r 3                               ; spaces is given. For speed reasons, we just return junk
001E66r 3                               ; NOS, with the TOS zero as per standard
001E66r 3  CA                           dex
001E67r 3  CA                           dex
001E68r 3  CA                           dex
001E69r 3  CA                           dex
001E6Ar 3               
001E6Ar 3  74 00                        stz 0,x                 ; TOS is zero
001E6Cr 3  74 01                        stz 1,x
001E6Er 3               
001E6Er 3  4C rr rr                     jmp z_parse_name        ; skip over PARSE
001E71r 3               
001E71r 3               @char_found:
001E71r 3                               ; We arrive here with tmp2 pointing to the first non-space
001E71r 3                               ; character. This is where the word really starts, so
001E71r 3                               ; we use it to calculate the new >IN by subtracting
001E71r 3  A5 rr                        lda tmp2
001E73r 3  38                           sec
001E74r 3  E5 rr                        sbc cib
001E76r 3  85 rr                        sta toin
001E78r 3  A5 rr                        lda tmp2+1
001E7Ar 3  E5 rr                        sbc cib+1
001E7Cr 3  85 rr                        sta toin+1
001E7Er 3               
001E7Er 3                               ; prepare Data Stack for PARSE by adding space
001E7Er 3                               ; as the delimiter
001E7Er 3  CA                           dex
001E7Fr 3  CA                           dex
001E80r 3               
001E80r 3  A9 20                        lda #AscSP
001E82r 3  95 00                        sta 0,x
001E84r 3  74 01                        stz 1,x                 ; paranoid, now ( "name" c )
001E86r 3               
001E86r 3               
001E86r 3               ; ## PARSE ( "name" c -- addr u ) "Parse input with delimiter character"
001E86r 3               ; ## "parse"  tested  ANS core ext
001E86r 3                       ; """https://forth-standard.org/standard/core/PARSE
001E86r 3                       ; Find word in input string delimited by character given. Do not
001E86r 3                       ; skip leading delimiters -- this is the main difference to PARSE-NAME.
001E86r 3                       ; PARSE and PARSE-NAME replace WORD in modern systems. ANS discussion
001E86r 3                       ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
001E86r 3                       ;
001E86r 3                       ;
001E86r 3                       ;     cib  cib+toin   cib+ciblen
001E86r 3                       ;      v      v            v
001E86r 3                       ;     |###################|
001E86r 3                       ;
001E86r 3                       ;     |------>|  toin (>IN)
001E86r 3                       ;     |------------------->|  ciblen
001E86r 3                       ;
001E86r 3                       ; The input string is stored starting at the address in the Current
001E86r 3                       ; Input Buffer (CIB), the length of which is in CIBLEN. While searching
001E86r 3                       ; for the delimiter, TOIN (>IN) points to the where we currently are.
001E86r 3                       ; Since PARSE does not skip leading delimiters, we assume we are on a
001E86r 3                       ; useful string if there are any characters at all. As with
001E86r 3                       ; PARSE-NAME, we must be able to handle strings with a length of
001E86r 3                       ; 16-bit for EVALUTE, which is a pain on an 8-bit machine.
001E86r 3                       ; """
001E86r 3               
001E86r 3               xt_parse:
001E86r 3  20 rr rr                     jsr underflow_1
001E89r 3               
001E89r 3                               ; If the input buffer is empty, we just return
001E89r 3  A5 rr                        lda ciblen
001E8Br 3  05 rr                        ora ciblen+1
001E8Dr 3  F0 0C                        beq @abort_parse
001E8Fr 3               
001E8Fr 3                               ; If the pointer >IN is larger or equal to the length of
001E8Fr 3                               ; the input buffer (CIBLEN), the line is done. Put
001E8Fr 3                               ; differently, we only continue if >IN is smaller than
001E8Fr 3                               ; CIBLEN
001E8Fr 3  A5 rr                        lda toin+1              ; MSB
001E91r 3  C5 rr                        cmp ciblen+1
001E93r 3  90 0E                        bcc @go_parse           ; unsigned comparison
001E95r 3               
001E95r 3  A5 rr                        lda toin                ; LSB
001E97r 3  C5 rr                        cmp ciblen
001E99r 3  90 08                        bcc @go_parse
001E9Br 3               
001E9Br 3               @abort_parse:
001E9Br 3                               ; Sorry, this line is over
001E9Br 3  CA                           dex
001E9Cr 3  CA                           dex
001E9Dr 3  74 00                        stz 0,x
001E9Fr 3  74 01                        stz 1,x
001EA1r 3               
001EA1r 3  80 7A                        bra @done
001EA3r 3               @go_parse:
001EA3r 3                               ; We actually have work to do. Save the delimiter in
001EA3r 3                               ; tmptos.
001EA3r 3  B5 00                        lda 0,x
001EA5r 3  85 rr                        sta tmptos
001EA7r 3               
001EA7r 3                               ; We can now prepare the Data Stack for the return value
001EA7r 3  CA                           dex
001EA8r 3  CA                           dex
001EA9r 3               
001EA9r 3                               ; tmp1 is CIB+TOIN, the beginning of the current string
001EA9r 3                               ; tmp2 is initially the same as tmp1, then the work index
001EA9r 3                               ; tmp3 is CIB+CIBLEN, one char past the end of the string
001EA9r 3               
001EA9r 3                               ; Calculate the beginning of the string, which is also the
001EA9r 3                               ; address to return
001EA9r 3  A5 rr                        lda cib
001EABr 3  18                           clc
001EACr 3  65 rr                        adc toin        ; LSB
001EAEr 3  85 rr                        sta tmp1
001EB0r 3  85 rr                        sta tmp2
001EB2r 3  95 02                        sta 2,x
001EB4r 3               
001EB4r 3  A5 rr                        lda cib+1
001EB6r 3  65 rr                        adc toin+1      ; MSB
001EB8r 3  85 rr                        sta tmp1+1
001EBAr 3  85 rr                        sta tmp2+1
001EBCr 3  95 03                        sta 3,x
001EBEr 3               
001EBEr 3                               ; Calculate the address where the input buffer ends plus 1, so
001EBEr 3                               ; we can compare it with TOIN, which is an index
001EBEr 3  A5 rr                        lda cib
001EC0r 3  18                           clc
001EC1r 3  65 rr                        adc ciblen
001EC3r 3  85 rr                        sta tmp3
001EC5r 3  A5 rr                        lda cib+1
001EC7r 3  65 rr                        adc ciblen+1
001EC9r 3  85 rr                        sta tmp3+1
001ECBr 3               
001ECBr 3                               ; Initialize the offset we use to adjust EOL or found delimiter
001ECBr 3  64 rr                        stz tmptos+1
001ECDr 3               @loop:
001ECDr 3                               ; If we are at the end of the string, quit
001ECDr 3  A5 rr                        lda tmp2
001ECFr 3  C5 rr                        cmp tmp3
001ED1r 3  D0 06                        bne @not_empty
001ED3r 3               
001ED3r 3  A5 rr                        lda tmp2+1
001ED5r 3  C5 rr                        cmp tmp3+1
001ED7r 3  F0 1D                        beq @eol
001ED9r 3               @not_empty:
001ED9r 3                               ; We have to do this the hard way. In fact, it's really
001ED9r 3                               ; hard since if we are dealing with a SPACE, the standard
001ED9r 3                               ; wants us to skip all whitespace, not just spaces. Otherwise,
001ED9r 3                               ; Tali would choke on tabs between words. For details, see
001ED9r 3                               ; http://forth-standard.org/standard/file#subsection.11.3.5
001ED9r 3                               ; In theory, we could make this faster by defining a delimiter
001ED9r 3                               ; that is 00 as the sign that we skip all whitespace, thereby
001ED9r 3                               ; avoiding having to test every time. However, somebody,
001ED9r 3                               ; somewhere might want to parse a zero-delimited list. Since
001ED9r 3                               ; any byte value could be chosen for that, we just test for
001ED9r 3                               ; a space every single time for the moment.
001ED9r 3  B2 rr                        lda (tmp2)
001EDBr 3               
001EDBr 3  A4 rr                        ldy tmptos
001EDDr 3  C0 20                        cpy #AscSP
001EDFr 3  D0 07                        bne @not_whitespace
001EE1r 3               
001EE1r 3                               ; The delimiter is a space, so we're looking for all
001EE1r 3                               ; whitespace
001EE1r 3  20 rr rr                     jsr is_whitespace
001EE4r 3  90 02                        bcc @not_whitespace
001EE6r 3  80 0C                        bra @found_delimiter
001EE8r 3               
001EE8r 3               @not_whitespace:
001EE8r 3                               ; The delimiter is not a space, so we're looking for
001EE8r 3                               ; whatever it is
001EE8r 3  C5 rr                        cmp tmptos
001EEAr 3  F0 08                        beq @found_delimiter
001EECr 3               
001EECr 3                               ; Not a delimiter, next character
001EECr 3  E6 rr                        inc tmp2
001EEEr 3  D0 DD                        bne @loop
001EF0r 3  E6 rr                        inc tmp2+1
001EF2r 3  80 D9                        bra @loop
001EF4r 3               
001EF4r 3               @found_delimiter:
001EF4r 3                               ; Increase the offset: If we've found a delimiter, we want
001EF4r 3                               ; TOIN to point to the character after it, not the delimiter
001EF4r 3                               ; itself
001EF4r 3  E6 rr                        inc tmptos+1
001EF6r 3               @eol:
001EF6r 3                               ; The length of the new string is tmp2-tmp1
001EF6r 3  A5 rr                        lda tmp2
001EF8r 3  38                           sec
001EF9r 3  E5 rr                        sbc tmp1
001EFBr 3  95 00                        sta 0,x
001EFDr 3               
001EFDr 3  A5 rr                        lda tmp2+1
001EFFr 3  E5 rr                        sbc tmp1+1
001F01r 3  95 01                        sta 1,x
001F03r 3               
001F03r 3                               ; The new offset is tmp2-cib
001F03r 3  A5 rr                        lda tmp2
001F05r 3  38                           sec
001F06r 3  E5 rr                        sbc cib
001F08r 3  85 rr                        sta toin
001F0Ar 3  A5 rr                        lda tmp2+1
001F0Cr 3  E5 rr                        sbc cib+1
001F0Er 3  85 rr                        sta toin+1
001F10r 3               
001F10r 3                               ; Add in the delimiter
001F10r 3  A5 rr                        lda toin
001F12r 3  18                           clc
001F13r 3  65 rr                        adc tmptos+1
001F15r 3  85 rr                        sta toin
001F17r 3  A5 rr                        lda toin+1
001F19r 3  69 00                        adc #0          ; we only need the carry
001F1Br 3  85 rr                        sta toin+1
001F1Dr 3               @done:
001F1Dr 3               z_parse_name:
001F1Dr 3  60           z_parse:        rts
001F1Er 3               
001F1Er 3               
001F1Er 3               
001F1Er 3               ; ## PICK ( n n u -- n n n ) "Move element u of the stack to TOS"
001F1Er 3               ; ## "pick"  auto  ANS core ext
001F1Er 3                       ; """https://forth-standard.org/standard/core/PICK
001F1Er 3                       ; Take the u-th element out of the stack and put it on TOS,
001F1Er 3                       ; overwriting the original TOS. 0 PICK is equivalent to DUP, 1 PICK to
001F1Er 3                       ; OVER. Note that using PICK is considered poor coding form. Also note
001F1Er 3                       ; that FIG Forth has a different behavior for PICK than ANS Forth.
001F1Er 3                       ; """
001F1Er 3               
001F1Er 3               xt_pick:
001F1Er 3                               ; Checking for underflow is difficult because it depends on
001F1Er 3                               ; which element we want to grab. We could probably figure
001F1Er 3                               ; something out, but it wouldn't work with underflow stripping
001F1Er 3                               ; Since using PICK is considered poor form anyway, we just
001F1Er 3                               ; leave it as it is
001F1Er 3  16 00                        asl 0,x         ; we assume u < 128 (stack is small)
001F20r 3  8A                           txa
001F21r 3  75 00                        adc 0,x
001F23r 3  A8                           tay
001F24r 3               
001F24r 3  B9 02 00                     lda 0002,y
001F27r 3  95 00                        sta 0,x
001F29r 3  B9 03 00                     lda 0003,y
001F2Cr 3  95 01                        sta 1,x
001F2Er 3               
001F2Er 3  60           z_pick:         rts
001F2Fr 3               
001F2Fr 3               
001F2Fr 3               
001F2Fr 3               ; ## PLUS ( n n -- n ) "Add TOS and NOS"
001F2Fr 3               ; ## "+"  auto  ANS core
001F2Fr 3                       ; """https://forth-standard.org/standard/core/Plus"""
001F2Fr 3               xt_plus:
001F2Fr 3  20 rr rr                     jsr underflow_2
001F32r 3               
001F32r 3  18                           clc
001F33r 3  B5 00                        lda 0,x         ; LSB
001F35r 3  75 02                        adc 2,x
001F37r 3  95 02                        sta 2,x
001F39r 3               
001F39r 3  B5 01                        lda 1,x         ; MSB. No CLC, conserve carry bit
001F3Br 3  75 03                        adc 3,x
001F3Dr 3  95 03                        sta 3,x
001F3Fr 3               
001F3Fr 3  E8                           inx
001F40r 3  E8                           inx
001F41r 3               
001F41r 3  60           z_plus:         rts
001F42r 3               
001F42r 3               
001F42r 3               ; ## PLUS_STORE ( n addr -- ) "Add number to value at given address"
001F42r 3               ; ## "+!"  auto  ANS core
001F42r 3                       ; """https://forth-standard.org/standard/core/PlusStore"""
001F42r 3               xt_plus_store:
001F42r 3  20 rr rr                     jsr underflow_2
001F45r 3               
001F45r 3                               ; move address to tmp1 so we can work with it
001F45r 3  B5 00                        lda 0,x
001F47r 3  85 rr                        sta tmp1
001F49r 3  B5 01                        lda 1,x
001F4Br 3  85 rr                        sta tmp1+1
001F4Dr 3               
001F4Dr 3  A0 00                        ldy #0          ; LSB
001F4Fr 3  B1 rr                        lda (tmp1),y
001F51r 3  18                           clc
001F52r 3  75 02                        adc 2,x
001F54r 3  91 rr                        sta (tmp1),y
001F56r 3               
001F56r 3  C8                           iny             ; MSB
001F57r 3  B1 rr                        lda (tmp1),y
001F59r 3  75 03                        adc 3,x
001F5Br 3  91 rr                        sta (tmp1),y
001F5Dr 3               
001F5Dr 3  E8                           inx
001F5Er 3  E8                           inx
001F5Fr 3  E8                           inx
001F60r 3  E8                           inx
001F61r 3               
001F61r 3  60           z_plus_store:   rts
001F62r 3               
001F62r 3               
001F62r 3               ; ## POSTPONE ( -- ) "Change IMMEDIATE status (it's complicated)"
001F62r 3               ; ## "postpone"  auto   ANS core
001F62r 3                       ; """https://forth-standard.org/standard/core/POSTPONE
001F62r 3                       ; Add the compilation behavior of a word to a new word at
001F62r 3                       ; compile time. If the word that follows it is immediate, include
001F62r 3                       ; it so that it will be compiled when the word being defined is
001F62r 3                       ; itself used for a new word. Tricky, but very useful.
001F62r 3                       ;
001F62r 3                       ; Because POSTPONE expects a word (not an xt) in the input stream (not
001F62r 3                       ; on the Data Stack). This means we cannot build words with
001F62r 3                       ; "jsr xt_postpone, jsr <word>" directly.
001F62r 3                       ; """
001F62r 3               
001F62r 3               xt_postpone:
001F62r 3  20 rr rr                     jsr xt_parse_name               ; ( -- addr n )
001F65r 3               
001F65r 3                               ; if there was no word provided, complain and quit
001F65r 3  B5 00                        lda 0,x
001F67r 3  15 01                        ora 1,x
001F69r 3  D0 05                        bne @1
001F6Br 3               
001F6Br 3  A9 05                        lda #err_noname
001F6Dr 3  4C rr rr                     jmp error
001F70r 3               @1:
001F70r 3  20 rr rr                     jsr xt_find_name                ; ( -- nt | 0 )
001F73r 3               
001F73r 3                               ; if word not in Dictionary, complain and quit
001F73r 3  D0 05                        bne @2
001F75r 3  A9 05                        lda #err_noname
001F77r 3  4C rr rr                     jmp error
001F7Ar 3               
001F7Ar 3               @2:
001F7Ar 3                               ; keep a copy of nt for later
001F7Ar 3  B5 00                        lda 0,x
001F7Cr 3  85 rr                        sta tmp1
001F7Er 3  B5 01                        lda 1,x
001F80r 3  85 rr                        sta tmp1+1
001F82r 3               
001F82r 3                               ; We need the xt instead of the nt
001F82r 3  20 rr rr                     jsr xt_name_to_int              ; ( nt -- xt )
001F85r 3               
001F85r 3                               ; See if this is an immediate word. This is easier
001F85r 3                               ; with nt than with xt. The status byte of the word
001F85r 3                               ; is nt+1
001F85r 3  E6 rr                        inc tmp1
001F87r 3  D0 02                        bne @3
001F89r 3  E6 rr                        inc tmp1+1
001F8Br 3               @3:
001F8Br 3  B2 rr                        lda (tmp1)
001F8Dr 3  29 04                        and #IM         ; mask all but Intermediate flag
001F8Fr 3  F0 05                        beq @not_immediate
001F91r 3               
001F91r 3                               ; We're immediate, so instead of executing it right now, we
001F91r 3                               ; compile it. xt is TOS, so this is easy. The RTS at the end
001F91r 3                               ; takes us back to the original caller
001F91r 3  20 rr rr                     jsr xt_compile_comma
001F94r 3  80 0A                        bra @done
001F96r 3               
001F96r 3               @not_immediate:
001F96r 3                               ; This is not an immediate word, so we enact "deferred
001F96r 3                               ; compilation" by including ' <NAME> COMPILE, which we do by
001F96r 3                               ; compiling the run-time routine of LITERAL, the xt itself, and
001F96r 3                               ; a subroutine jump to COMPILE,
001F96r 3  20 rr rr                     jsr xt_literal
001F99r 3               
001F99r 3                               ; Last, compile COMPILE,
001F99r 3  A0 rr                        ldy #>xt_compile_comma
001F9Br 3  A9 rr                        lda #<xt_compile_comma
001F9Dr 3  20 rr rr                     jsr cmpl_subroutine
001FA0r 3               @done:
001FA0r 3  60           z_postpone:     rts
001FA1r 3               
001FA1r 3               
001FA1r 3               
001FA1r 3               ; ## PREVIOUS ( -- ) "Remove the first wordlist in the search order"
001FA1r 3               ; ## "previous"  auto  ANS search ext
001FA1r 3                       ; """http://forth-standard.org/standard/search/PREVIOUS"""
001FA1r 3               
001FA1r 3               xt_previous:
001FA1r 3  20 rr rr                     jsr xt_get_order
001FA4r 3  20 rr rr                     jsr xt_nip
001FA7r 3  20 rr rr                     jsr xt_one_minus
001FAAr 3  20 rr rr                     jsr xt_set_order
001FADr 3               
001FADr 3  60           z_previous:     rts
001FAEr 3               
001FAEr 3               
001FAEr 3               
001FAEr 3               ; ## QUESTION ( addr -- ) "Print content of a variable"
001FAEr 3               ; ## "?"  tested  ANS tools
001FAEr 3                       ; """https://forth-standard.org/standard/tools/q
001FAEr 3                       ;
001FAEr 3                       ; Only used interactively. Since humans are so slow, we
001FAEr 3                       ; save size and just go for the subroutine jumps
001FAEr 3                       ; """
001FAEr 3               xt_question:
001FAEr 3                               ; FETCH takes care of underflow check
001FAEr 3  20 rr rr                     jsr xt_fetch
001FB1r 3  20 rr rr                     jsr xt_dot
001FB4r 3               
001FB4r 3  60           z_question:     rts
001FB5r 3               
001FB5r 3               
001FB5r 3               ; ## QUESTION_DUP ( n -- 0 | n n ) "Duplicate TOS non-zero"
001FB5r 3               ; ## "?dup"  auto  ANS core
001FB5r 3                       ; """https://forth-standard.org/standard/core/qDUP"""
001FB5r 3               
001FB5r 3               xt_question_dup:
001FB5r 3  20 rr rr                     jsr underflow_1
001FB8r 3               
001FB8r 3                               ; Check if TOS is zero
001FB8r 3  B5 00                        lda 0,x
001FBAr 3  15 01                        ora 1,x
001FBCr 3  F0 0A                        beq @done
001FBEr 3               
001FBEr 3                               ; not zero, duplicate
001FBEr 3  CA                           dex
001FBFr 3  CA                           dex
001FC0r 3  B5 02                        lda 2,x
001FC2r 3  95 00                        sta 0,x
001FC4r 3  B5 03                        lda 3,x
001FC6r 3  95 01                        sta 1,x
001FC8r 3               @done:
001FC8r 3  60           z_question_dup: rts
001FC9r 3               
001FC9r 3               
001FC9r 3               
001FC9r 3               ; ## R_FETCH ( -- n ) "Get copy of top of Return Stack"
001FC9r 3               ; ## "r@"  auto  ANS core
001FC9r 3                       ; """https://forth-standard.org/standard/core/RFetch
001FC9r 3                       ; This word is Compile Only in Tali Forth, though Gforth has it
001FC9r 3                       ; work normally as well
001FC9r 3                       ;
001FC9r 3                       ; An alternative way to write this word
001FC9r 3                       ; would be to access the elements on the stack directly like 2R@
001FC9r 3                       ; does, these versions should be compared at some point.
001FC9r 3                       ; """
001FC9r 3               xt_r_fetch:
001FC9r 3                               ; get the return address
001FC9r 3  7A                           ply             ; LSB
001FCAr 3  84 rr                        sty tmp1
001FCCr 3  7A                           ply             ; MSB
001FCDr 3               
001FCDr 3                               ; --- CUT FOR NATIVE COMPILE ---
001FCDr 3               
001FCDr 3                               ; get the actual top of Return Stack
001FCDr 3  CA                           dex
001FCEr 3  CA                           dex
001FCFr 3               
001FCFr 3  68                           pla             ; LSB
001FD0r 3  95 00                        sta 0,x
001FD2r 3  68                           pla             ; MSB
001FD3r 3  95 01                        sta 1,x
001FD5r 3               
001FD5r 3                               ; now we have to put that value back
001FD5r 3  48                           pha
001FD6r 3  B5 00                        lda 0,x
001FD8r 3  48                           pha
001FD9r 3               
001FD9r 3                               ; --- CUT FOR NATIVE COMPILE ---
001FD9r 3               
001FD9r 3                               ; restore return value
001FD9r 3  5A                           phy             ; MSB
001FDAr 3  A4 rr                        ldy tmp1
001FDCr 3  5A                           phy             ; LSB
001FDDr 3               
001FDDr 3  60           z_r_fetch:      rts
001FDEr 3               
001FDEr 3               
001FDEr 3               ; ## R_FROM ( -- n )(R: n --) "Move top of Return Stack to TOS"
001FDEr 3               ; ## "r>"  auto  ANS core
001FDEr 3                       ; """https://forth-standard.org/standard/core/Rfrom
001FDEr 3                       ; Move Top of Return Stack to Top of Data Stack.
001FDEr 3                       ;
001FDEr 3                       ; We have to move
001FDEr 3                       ; the RTS address out of the way first. This word is handled
001FDEr 3                       ; differently for native and and subroutine compilation, see COMPILE,
001FDEr 3                       ; This is a compile-only word
001FDEr 3                       ; """
001FDEr 3               
001FDEr 3               xt_r_from:
001FDEr 3                               ; Rescue the address of the return jump that is currently
001FDEr 3                               ; on top of the Return Stack. If this word is natively
001FDEr 3                               ; compiled, this is a total waste of time
001FDEr 3  68                           pla             ; LSB
001FDFr 3  85 rr                        sta tmptos
001FE1r 3  7A                           ply             ; MSB
001FE2r 3               
001FE2r 3                               ; --- CUT FOR NATIVE CODING ---
001FE2r 3               
001FE2r 3  CA                           dex
001FE3r 3  CA                           dex
001FE4r 3               
001FE4r 3                               ; now we can access the actual data
001FE4r 3               
001FE4r 3  68                           pla             ; LSB
001FE5r 3  95 00                        sta 0,x
001FE7r 3  68                           pla             ; MSB
001FE8r 3  95 01                        sta 1,x
001FEAr 3               
001FEAr 3                               ; --- CUT FOR NATIVE CODING ---
001FEAr 3               
001FEAr 3                               ; restore the return address
001FEAr 3  5A                           phy             ; MSB
001FEBr 3  A5 rr                        lda tmptos
001FEDr 3  48                           pha             ; LSB
001FEEr 3               
001FEEr 3  60           z_r_from:       rts
001FEFr 3               
001FEFr 3               
001FEFr 3               ; ## R_TO_INPUT ( -- ) ( R: n n n n -- ) "Restore input state from Return Stack"
001FEFr 3               ; ## "r>input"  tested  Tali Forth
001FEFr 3                       ; """Restore the current input state as defined by insrc, cib, ciblen,
001FEFr 3                       ; and toin from the Return Stack.
001FEFr 3                       ;
001FEFr 3                       ; See INPUT_TO_R for a discussion of this word. Uses tmp1
001FEFr 3                       ; """
001FEFr 3               
001FEFr 3               xt_r_to_input:
001FEFr 3               
001FEFr 3                               ; We arrive here with the return address on the top of the
001FEFr 3                               ; 65c02's stack. We need to move it out of the way first
001FEFr 3  68                           pla
001FF0r 3  85 rr                        sta tmp1
001FF2r 3  68                           pla
001FF3r 3  85 rr                        sta tmp1+1
001FF5r 3               
001FF5r 3                               ; This assumes that insrc is the first of eight bytes and
001FF5r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001FF5r 3                               ; Page. Since we went in reverse order, insrc is now on the top
001FF5r 3                               ; of the Return Stack.
001FF5r 3  A0 00                        ldy #0
001FF7r 3               @loop:
001FF7r 3  68                           pla
001FF8r 3  99 rr rr                     sta insrc,y
001FFBr 3  C8                           iny
001FFCr 3  C0 08                        cpy #8
001FFEr 3  D0 F7                        bne @loop
002000r 3               
002000r 3                               ; Restore address for return jump
002000r 3  A5 rr                        lda tmp1+1
002002r 3  48                           pha
002003r 3  A5 rr                        lda tmp1
002005r 3  48                           pha
002006r 3               
002006r 3  60           z_r_to_input: 	rts
002007r 3               
002007r 3               
002007r 3               
002007r 3               ; ## RECURSE ( -- ) "Copy recursive call to word being defined"
002007r 3               ; ## "recurse"  auto  ANS core
002007r 3                       ; """https://forth-standard.org/standard/core/RECURSE
002007r 3                       ;
002007r 3                       ; This word may not be natively compiled
002007r 3                       ; """
002007r 3               
002007r 3               xt_recurse:
002007r 3                               ; The whole routine amounts to compiling a reference to
002007r 3                               ; the word that is being compiled. First, we save the JSR
002007r 3                               ; instruction
002007r 3  A0 00                        ldy #0
002009r 3               
002009r 3  A9 20                        lda #$20        ; opcode for JSR
00200Br 3  91 rr                        sta (cp),y
00200Dr 3  C8                           iny
00200Er 3               
00200Er 3                               ; Next, we save the LSB and MSB of the xt of the word
00200Er 3                               ; we are currently working on. We first need to see if
00200Er 3                               ; WORKWORD has the nt (: started the word) or the
00200Er 3                               ; xt (:NONAME started the word). Bit 6 in status tells us.
00200Er 3  24 rr                        bit status
002010r 3  70 0C                        bvs @nt_in_workword
002012r 3               
002012r 3                               ; This is a special :NONAME word. Just copy the xt
002012r 3                               ; from WORKWORD into the dictionary.
002012r 3  A5 rr                        lda workword
002014r 3  91 rr                        sta (cp),y
002016r 3  C8                           iny
002017r 3  A5 rr                        lda workword+1
002019r 3  91 rr                        sta (cp),y
00201Br 3  C8                           iny
00201Cr 3  80 1B                        bra @update_cp
00201Er 3               
00201Er 3               @nt_in_workword:
00201Er 3                               ; This is a regular : word, so the xt is four bytes down
00201Er 3                               ; from the nt which we saved in WORKWORD. We could probably
00201Er 3                               ; use NAME>INT here but this is going to be faster, and
00201Er 3                               ; fast counts with recursion
00201Er 3  A5 rr                        lda workword            ; LSB
002020r 3  18                           clc
002021r 3  69 04                        adc #4
002023r 3  85 rr                        sta tmp1
002025r 3  A5 rr                        lda workword+1          ; MSB
002027r 3  69 00                        adc #0
002029r 3  85 rr                        sta tmp1+1
00202Br 3               
00202Br 3  B2 rr                        lda (tmp1)
00202Dr 3  91 rr                        sta (cp),y
00202Fr 3  5A                           phy
002030r 3  A0 01                        ldy #1
002032r 3  B1 rr                        lda (tmp1),y
002034r 3  7A                           ply
002035r 3  C8                           iny
002036r 3  91 rr                        sta (cp),y
002038r 3  C8                           iny
002039r 3               
002039r 3               @update_cp:
002039r 3  98                           tya
00203Ar 3  18                           clc
00203Br 3  65 rr                        adc cp
00203Dr 3  85 rr                        sta cp
00203Fr 3  90 02                        bcc @done
002041r 3  E6 rr                        inc cp+1
002043r 3               @done:
002043r 3  60           z_recurse:      rts
002044r 3               
002044r 3               
002044r 3               
002044r 3               ; ## REFILL ( -- f ) "Refill the input buffer"
002044r 3               ; ## "refill"  tested  ANS core ext
002044r 3                       ; """https://forth-standard.org/standard/core/REFILL
002044r 3                       ; Attempt to fill the input buffer from the input source, returning
002044r 3                       ; a true flag if successful. When the input source is the user input
002044r 3                       ; device, attempt to receive input into the terminal input buffer. If
002044r 3                       ; successful, make the result the input buffer, set >IN to zero, and
002044r 3                       ; return true. Receipt of a line containing no characters is considered
002044r 3                       ; successful. If there is no input available from the current input
002044r 3                       ; source, return false. When the input source is a string from EVALUATE,
002044r 3                       ; return false and perform no other action." See
002044r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
002044r 3                       ; and Conklin & Rather p. 156. Note we don't have to care about blocks
002044r 3                       ; because REFILL is never used on blocks - Tali is able to evaluate the
002044r 3                       ; entire block as a 1024 byte string.
002044r 3                       ; """"
002044r 3               
002044r 3               xt_refill:
002044r 3                               ; Get input source from SOURCE-ID. This is an
002044r 3                               ; optimized version of a subroutine jump to SOURCE-ID
002044r 3  A5 rr                        lda insrc               ; cheat: We only check LSB
002046r 3  D0 2D                        bne @src_not_kbd
002048r 3               
002048r 3                               ; SOURCE-ID of zero means we're getting stuff from the keyboard
002048r 3                               ; with ACCEPT, which wants the address of the current input
002048r 3                               ; buffer NOS and the max number of characters to accept TOS
002048r 3  CA                           dex
002049r 3  CA                           dex
00204Ar 3  CA                           dex
00204Br 3  CA                           dex
00204Cr 3               
00204Cr 3  A5 rr                        lda cib                 ; address of CIB is NOS
00204Er 3  95 02                        sta 2,x
002050r 3  A5 rr                        lda cib+1
002052r 3  95 03                        sta 3,x
002054r 3               
002054r 3  64 rr                        stz ciblen              ; go in with empty buffer
002056r 3  64 rr                        stz ciblen+1
002058r 3               
002058r 3  A9 FF                        lda #bsize              ; max number of chars is TOS
00205Ar 3  95 00                        sta 0,x
00205Cr 3  74 01                        stz 1,x                 ; cheat: We only accept max 255
00205Er 3               
00205Er 3  20 rr rr                     jsr xt_accept           ; ( addr n1 -- n2)
002061r 3               
002061r 3                               ; ACCEPT returns the number of characters accepted, which
002061r 3                               ; belong in CIBLEN
002061r 3  B5 00                        lda 0,x
002063r 3  85 rr                        sta ciblen
002065r 3  B5 01                        lda 1,x
002067r 3  85 rr                        sta ciblen+1            ; though we only accept 255 chars
002069r 3               
002069r 3                               ; make >IN point to beginning of buffer
002069r 3  64 rr                        stz toin
00206Br 3  64 rr                        stz toin+1
00206Dr 3               
00206Dr 3  A9 FF                        lda #$FF                ; overwrite with TRUE flag
00206Fr 3  95 00                        sta 0,x
002071r 3  95 01                        sta 1,x
002073r 3               
002073r 3  80 10                        bra @done
002075r 3               
002075r 3               @src_not_kbd:
002075r 3                               ; If SOURCE-ID doesn't return a zero, it must be a string in
002075r 3                               ; memory or a file (remember, no blocks in this version).
002075r 3                               ; If source is a string, we were given the flag -1 ($FFFF)
002075r 3  1A                           inc
002076r 3  D0 08                        bne @src_not_string
002078r 3               
002078r 3                               ; Simply return FALSE flag as per specification
002078r 3  CA                           dex
002079r 3  CA                           dex
00207Ar 3  74 00                        stz 0,x
00207Cr 3  74 01                        stz 1,x
00207Er 3               
00207Er 3  80 05                        bra z_refill
002080r 3               
002080r 3               @src_not_string:
002080r 3                               ; Since we don't have blocks, this must mean that we are trying
002080r 3                               ; to read from a file. However, we don't have files yet, so we
002080r 3                               ; report an error and jump to ABORT.
002080r 3  A9 01                        lda #err_badsource
002082r 3  4C rr rr                     jmp error
002085r 3               @done:
002085r 3  60           z_refill:       rts
002086r 3               
002086r 3               
002086r 3               
002086r 3               ; ## REPEAT (C: orig dest -- ) ( -- ) "Loop flow control"
002086r 3               ; ## "repeat"  auto  ANS core
002086r 3                       ; """http://forth-standard.org/standard/core/REPEAT"""
002086r 3               
002086r 3               xt_repeat:
002086r 3                               ; Run again first
002086r 3  20 rr rr                     jsr xt_again
002089r 3               
002089r 3                               ; Stuff HERE in for the branch address
002089r 3                               ; to get out of the loop
002089r 3  20 rr rr                     jsr xt_here
00208Cr 3  20 rr rr                     jsr xt_swap
00208Fr 3  20 rr rr                     jsr xt_store
002092r 3               
002092r 3  60           z_repeat:       rts
002093r 3               
002093r 3               
002093r 3               
002093r 3               ; ## RIGHT_BRACKET ( -- ) "Enter the compile state"
002093r 3               ; ## "]"  auto  ANS core
002093r 3                       ; """https://forth-standard.org/standard/right-bracket
002093r 3                       ; This is an immediate word.
002093r 3                       ; """
002093r 3               xt_right_bracket:
002093r 3  A9 FF                        lda #$FF
002095r 3  85 rr                        sta state
002097r 3  85 rr                        sta state+1
002099r 3               z_right_bracket:
002099r 3  60                           rts
00209Ar 3               
00209Ar 3               
00209Ar 3               ; ## ROOT_WORDLIST ( -- u ) "WID for the Root (minimal) wordlist"
00209Ar 3               ; ## "root-wordlist"  tested  Tali Editor
00209Ar 3               xt_root_wordlist:
00209Ar 3  CA                           dex             ; The WID for the Root wordlist is 3.
00209Br 3  CA                           dex
00209Cr 3  A9 03                        lda #3
00209Er 3  95 00                        sta 0,x
0020A0r 3  74 01                        stz 1,x
0020A2r 3               
0020A2r 3               z_root_wordlist:
0020A2r 3  60                           rts
0020A3r 3               
0020A3r 3               
0020A3r 3               ; ## ROT ( a b c -- b c a ) "Rotate first three stack entries downwards"
0020A3r 3               ; ## "rot"  auto  ANS core
0020A3r 3                       ; """https://forth-standard.org/standard/core/ROT
0020A3r 3                       ; Remember "R for 'Revolution'" - the bottom entry comes out
0020A3r 3                       ; on top!
0020A3r 3                       ; """
0020A3r 3               
0020A3r 3               xt_rot:
0020A3r 3  20 rr rr                     jsr underflow_3
0020A6r 3               
0020A6r 3  B4 05                        ldy 5,x         ; MSB first
0020A8r 3  B5 03                        lda 3,x
0020AAr 3  95 05                        sta 5,x
0020ACr 3  B5 01                        lda 1,x
0020AEr 3  95 03                        sta 3,x
0020B0r 3  94 01                        sty 1,x
0020B2r 3               
0020B2r 3  B4 04                        ldy 4,x         ; LSB next
0020B4r 3  B5 02                        lda 2,x
0020B6r 3  95 04                        sta 4,x
0020B8r 3  B5 00                        lda 0,x
0020BAr 3  95 02                        sta 2,x
0020BCr 3  94 00                        sty 0,x
0020BEr 3               
0020BEr 3  60           z_rot:          rts
0020BFr 3               
0020BFr 3               
0020BFr 3               
0020BFr 3               ; ## RSHIFT ( x u -- x ) "Shift TOS to the right"
0020BFr 3               ; ## "rshift"  auto  ANS core
0020BFr 3                       ; """https://forth-standard.org/standard/core/RSHIFT"""
0020BFr 3               xt_rshift:
0020BFr 3  20 rr rr                     jsr underflow_2
0020C2r 3               
0020C2r 3                               ; We shift maximal by 16 bits, mask everything else
0020C2r 3  B5 00                        lda 0,x
0020C4r 3  29 0F                        and #%00001111
0020C6r 3  F0 08                        beq @done               ; if 0 shifts, quit
0020C8r 3               
0020C8r 3  A8                           tay
0020C9r 3               @loop:
0020C9r 3  56 03                        lsr 3,x
0020CBr 3  76 02                        ror 2,x
0020CDr 3  88                           dey
0020CEr 3  D0 F9                        bne @loop
0020D0r 3               @done:
0020D0r 3  E8                           inx
0020D1r 3  E8                           inx
0020D2r 3               
0020D2r 3  60           z_rshift:       rts
0020D3r 3               
0020D3r 3               
0020D3r 3               ; ## S_BACKSLASH_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
0020D3r 3               ; ## "s\""  auto  ANS core
0020D3r 3                       ; """https://forth-standard.org/standard/core/Seq
0020D3r 3                       ; Store address and length of string given, returning ( addr u ).
0020D3r 3                       ; ANS core claims this is compile-only, but the file set expands it
0020D3r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
0020D3r 3                       ; are evil. We follow general usage. This is just like S" except
0020D3r 3                       ; that it allows for some special escaped characters.
0020D3r 3                       ; """
0020D3r 3               
0020D3r 3               xt_s_backslash_quote:
0020D3r 3                               ; tmp2 will be used to determine if we are handling
0020D3r 3                               ; escaped characters or not. In this case, we are,
0020D3r 3                               ; so set it to $FF (the upper byte will be used to
0020D3r 3                               ; determine if we just had a \ and the next character
0020D3r 3                               ; needs to be modifed as an escaped character).
0020D3r 3  A9 FF                        lda #$FF
0020D5r 3  85 rr                        sta tmp2
0020D7r 3  64 rr                        stz tmp2+1
0020D9r 3               
0020D9r 3                               ; Now that the flag is set, jump into s_quote to process
0020D9r 3                               ; the string.
0020D9r 3  20 rr rr                     jsr s_quote_start
0020DCr 3               @done:
0020DCr 3               z_s_backslash_quote:
0020DCr 3  60                           rts
0020DDr 3               
0020DDr 3               
0020DDr 3               ; This is a helper function for s_backslash_quote to convert a character
0020DDr 3               ; from ASCII to the corresponding hex value, eg 'F'->15
0020DDr 3               convert_hex_value:
0020DDr 3               
0020DDr 3  C9 41                cmp #'A'
0020DFr 3  90 07                bcc @digit
0020E1r 3               
0020E1r 3                       ; It's A-F
0020E1r 3  29 DF                and #$DF                ; Make it uppercase.
0020E3r 3  38                   sec
0020E4r 3  E9 37                sbc #'7'                 ; gives value 10 for 'A'
0020E6r 3  80 03                bra @done
0020E8r 3               
0020E8r 3               @digit:
0020E8r 3                       ; It's 0-9
0020E8r 3  38                   sec
0020E9r 3  E9 30                sbc #'0'
0020EBr 3               
0020EBr 3               @done:
0020EBr 3  60                   rts
0020ECr 3               
0020ECr 3               
0020ECr 3               
0020ECr 3               ; ## SEARCH_WORDLIST ( caddr u wid -- 0 | xt 1 | xt -1) "Search for a word in a wordlist"
0020ECr 3               ; ## "search-wordlist" auto ANS search
0020ECr 3                       ; """https://forth-standard.org/standard/search/SEARCH_WORDLIST"""
0020ECr 3               
0020ECr 3               xt_search_wordlist:
0020ECr 3  20 rr rr                     jsr underflow_3
0020EFr 3               
0020EFr 3                               ; Set up tmp1 with the wordlist indicated by wid
0020EFr 3                               ; on the stack. Start by putting the base address
0020EFr 3                               ; of the wordlists in tmp2.
0020EFr 3  A5 rr                        lda up
0020F1r 3  18                           clc
0020F2r 3  69 06                        adc #wordlists_offset
0020F4r 3  85 rr                        sta tmp2
0020F6r 3  A5 rr                        lda up+1
0020F8r 3  69 00                        adc #0          ; Adding carry
0020FAr 3  85 rr                        sta tmp2+1
0020FCr 3               
0020FCr 3                               ; Add the wid (in cells) to the base address.
0020FCr 3  B5 00                        lda 0,x
0020FEr 3  0A                           asl             ; Convert wid to offset in cells (x2)
0020FFr 3  65 rr                        adc tmp2
002101r 3  85 rr                        sta tmp2
002103r 3  90 02                        bcc @1
002105r 3  E6 rr                        inc tmp2+1      ; Propagate carry if needed.
002107r 3               
002107r 3                               ; tmp2 now holds the address of the dictionary pointer
002107r 3                               ; for the given wordlist.
002107r 3               @1:
002107r 3                               ; Remove the wid from the stack.
002107r 3  E8                           inx
002108r 3  E8                           inx
002109r 3               
002109r 3                               ; check for special case of an empty string (length zero)
002109r 3  B5 00                        lda 0,x
00210Br 3  15 01                        ora 1,x
00210Dr 3  D0 03                        bne @check_wordlist
00210Fr 3  4C rr rr                     jmp @done
002112r 3               
002112r 3               @check_wordlist:
002112r 3                               ; Check for special case of empty wordlist
002112r 3                               ; (dictionary pointer, in tmp2, is 0)
002112r 3  A5 rr                        lda tmp2
002114r 3  05 rr                        ora tmp2+1
002116r 3  D0 03                        bne @have_string
002118r 3  4C rr rr                     jmp @done
00211Br 3               
00211Br 3               @have_string:
00211Br 3                               ; set up first loop iteration
00211Br 3  B2 rr                        lda (tmp2)              ; nt of first word in Dictionary
00211Dr 3  85 rr                        sta tmp1
00211Fr 3               
00211Fr 3  E6 rr                        inc tmp2                ; Move to the upper byte
002121r 3  D0 02                        bne @2
002123r 3  E6 rr                        inc tmp2+1
002125r 3               @2:
002125r 3  B2 rr                        lda (tmp2)
002127r 3  85 rr                        sta tmp1+1
002129r 3               
002129r 3                               ; Reuse tmp2 to hold the address of the mystery string.
002129r 3  B5 02                        lda 2,x                 ; Address of mystery string
00212Br 3  85 rr                        sta tmp2
00212Dr 3  B5 03                        lda 3,x
00212Fr 3  85 rr                        sta tmp2+1
002131r 3               
002131r 3               @loop:
002131r 3                               ; first quick test: Are strings the same length?
002131r 3  B2 rr                        lda (tmp1)
002133r 3  D5 00                        cmp 0,x
002135r 3  D0 7B                        bne @next_entry
002137r 3               
002137r 3               @compare_string:
002137r 3                               ; are the same length, so we now have to compare each
002137r 3                               ; character
002137r 3               
002137r 3                               ; second quick test: Is the first character the same?
002137r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
002139r 3               
002139r 3                               ; Lowercase the incoming charcter.
002139r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
00213Br 3  B0 07                        bcs @compare_first
00213Dr 3  C9 41                        cmp #$41        ; ASCII 'A'
00213Fr 3  90 03                        bcc @compare_first
002141r 3               
002141r 3                               ; An uppercase letter has been located.  Make it
002141r 3                               ; lowercase.
002141r 3  18                           clc
002142r 3  69 20                        adc #$20
002144r 3               
002144r 3               @compare_first:
002144r 3  A0 08                        ldy #8          ; Offset in nt to name
002146r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
002148r 3  D0 68                        bne @next_entry
00214Ar 3               
00214Ar 3                               ; string length are the same and the first character is the
00214Ar 3                               ; same. If the length of the string is 1, we're already done
00214Ar 3  B5 00                        lda 0,x
00214Cr 3  3A                           dec
00214Dr 3  F0 2C                        beq @success
00214Fr 3               
00214Fr 3                               ; No such luck: The strings are the same length and the first
00214Fr 3                               ; char is the same, but the word is more than one char long.
00214Fr 3                               ; So we suck it up and compare every single character. We go
00214Fr 3                               ; from back to front, because words like CELLS and CELL+ would
00214Fr 3                               ; take longer otherwise. We can also shorten the loop by one
00214Fr 3                               ; because we've already compared the first char.
00214Fr 3               
00214Fr 3                               ; The string of the word we're testing against is 8 bytes down
00214Fr 3  A5 rr                        lda tmp1
002151r 3  48                           pha             ; Preserve tmp1 on the return stack.
002152r 3  18                           clc
002153r 3  69 08                        adc #8
002155r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
002157r 3  A5 rr                        lda tmp1+1
002159r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
00215Ar 3  69 00                        adc #0          ; we only need the carry
00215Cr 3  85 rr                        sta tmp1+1
00215Er 3               
00215Er 3  B4 00                        ldy 0,x         ; index is length of string minus 1
002160r 3  88                           dey
002161r 3               
002161r 3               @string_loop:
002161r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
002163r 3               
002163r 3                               ; Lowercase the incoming charcter.
002163r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
002165r 3  B0 07                        bcs @check_char
002167r 3  C9 41                        cmp #$41        ; ASCII 'A'
002169r 3  90 03                        bcc @check_char
00216Br 3               
00216Br 3                               ; An uppercase letter has been located.  Make it
00216Br 3                               ; lowercase.
00216Br 3  18                           clc
00216Cr 3  69 20                        adc #$20
00216Er 3               @check_char:
00216Er 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
002170r 3  D0 3A                        bne @next_entry_tmp1
002172r 3               
002172r 3  88                           dey
002173r 3  D0 EC                        bne @string_loop
002175r 3               
002175r 3               @success_tmp1:
002175r 3  68                           pla             ; Restore tmp1 from the return stack.
002176r 3  85 rr                        sta tmp1+1
002178r 3  68                           pla
002179r 3  85 rr                        sta tmp1
00217Br 3               
00217Br 3               @success:
00217Br 3                               ; The strings match. Drop the count and put correct nt TOS
00217Br 3  E8                           inx
00217Cr 3  E8                           inx
00217Dr 3  A5 rr                        lda tmp1
00217Fr 3  95 00                        sta 0,x
002181r 3  A5 rr                        lda tmp1+1
002183r 3  95 01                        sta 1,x
002185r 3               
002185r 3                               ; Change the nt into an xt, but save a copy of the nt
002185r 3                               ; to look up whether the word is immediate or not.
002185r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002188r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
00218Br 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
00218Er 3               
00218Er 3  A0 00                        ldy #0                  ; Prepare flag
002190r 3               
002190r 3                               ; The flags are in the second byte of the header
002190r 3  F6 00                        inc 0,x
002192r 3  D0 02                        bne @3
002194r 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
002196r 3               @3:
002196r 3  A1 00                        lda (0,x)               ; ( xt char )
002198r 3  29 04                        and #IM
00219Ar 3  D0 08                        bne @immediate          ; bit set, we're immediate
00219Cr 3               
00219Cr 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
00219Er 3  95 00                        sta 0,x
0021A0r 3  95 01                        sta 1,x
0021A2r 3  80 28                        bra @done_nodrop
0021A4r 3               
0021A4r 3               @immediate:
0021A4r 3  A9 01                        lda #1                  ; We're immediate, return 1
0021A6r 3  95 00                        sta 0,x
0021A8r 3  74 01                        stz 1,x
0021AAr 3               
0021AAr 3  80 20                        bra @done_nodrop
0021ACr 3               
0021ACr 3               @next_entry_tmp1:
0021ACr 3  68                           pla             ; Restore tmp1 from the return stack.
0021ADr 3  85 rr                        sta tmp1+1
0021AFr 3  68                           pla
0021B0r 3  85 rr                        sta tmp1
0021B2r 3               @next_entry:
0021B2r 3                               ; Not the same, so we get the next word. Next header
0021B2r 3                               ; address is two bytes down
0021B2r 3  A0 02                        ldy #2
0021B4r 3  B1 rr                        lda (tmp1),y
0021B6r 3  48                           pha
0021B7r 3  C8                           iny
0021B8r 3  B1 rr                        lda (tmp1),y
0021BAr 3  85 rr                        sta tmp1+1
0021BCr 3  68                           pla
0021BDr 3  85 rr                        sta tmp1
0021BFr 3               
0021BFr 3                               ; If we got a zero, we've walked the whole Dictionary and
0021BFr 3                               ; return as a failure, otherwise try again
0021BFr 3  05 rr                        ora tmp1+1
0021C1r 3  F0 03                        beq @fail_done
0021C3r 3  4C rr rr                     jmp @loop
0021C6r 3               
0021C6r 3               @fail_done:
0021C6r 3  74 02                        stz 2,x         ; failure flag
0021C8r 3  74 03                        stz 3,x
0021CAr 3               @done:
0021CAr 3  E8                           inx
0021CBr 3  E8                           inx
0021CCr 3               @done_nodrop:
0021CCr 3               z_search_wordlist:
0021CCr 3  60                           rts
0021CDr 3               
0021CDr 3               
0021CDr 3               
0021CDr 3               ; ## SEE ( "name" -- ) "Print information about a Forth word"
0021CDr 3               ; ## "see" tested  ANS tools
0021CDr 3                       ; """https://forth-standard.org/standard/tools/SEE
0021CDr 3                       ; SEE takes the name of a word and prints its name token (nt),
0021CDr 3                       ; execution token (xt), size in bytes, flags used, and then dumps the
0021CDr 3                       ; code and disassembles it.
0021CDr 3                       ; """
0021CDr 3               
0021CDr 3               xt_see:
0021CDr 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
0021D0r 3  20 rr rr                     jsr xt_find_name        ; ( nt | 0 )
0021D3r 3               
0021D3r 3                               ; If we got back a zero we don't know that word and so we quit
0021D3r 3                               ; with an error
0021D3r 3  B5 00                        lda 0,x
0021D5r 3  15 01                        ora 1,x
0021D7r 3  D0 05                        bne @1
0021D9r 3               
0021D9r 3  A9 05                        lda #err_noname
0021DBr 3  4C rr rr                     jmp error
0021DEr 3               @1:
0021DEr 3  20 rr rr                     jsr xt_cr
0021E1r 3               
0021E1r 3                               ; We have a legal word, so let's get serious. Save the current
0021E1r 3                               ; number base and use hexadecimal instead.
0021E1r 3  A5 rr                        lda base
0021E3r 3  48                           pha
0021E4r 3  20 rr rr                     jsr xt_hex
0021E7r 3               
0021E7r 3  A9 0A                        lda #str_see_nt
0021E9r 3  20 rr rr                     jsr print_string_no_lf
0021ECr 3               
0021ECr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0021EFr 3  20 rr rr                     jsr xt_u_dot
0021F2r 3  20 rr rr                     jsr xt_space            ; ( nt )
0021F5r 3               
0021F5r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0021F8r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
0021FBr 3               
0021FBr 3  A9 0B                        lda #str_see_xt
0021FDr 3  20 rr rr                     jsr print_string_no_lf
002200r 3               
002200r 3  20 rr rr                     jsr xt_dup              ; ( nt xt xt )
002203r 3  20 rr rr                     jsr xt_u_dot
002206r 3  20 rr rr                     jsr xt_cr               ; ( nt xt )
002209r 3               
002209r 3                               ; We print letters for flags and then later follow it with 1 or
002209r 3                               ; 0 to mark if which flag is set
002209r 3  A9 09                        lda #str_see_flags
00220Br 3  20 rr rr                     jsr print_string_no_lf
00220Er 3               
00220Er 3  20 rr rr                     jsr xt_over             ; ( nt xt nt )
002211r 3  20 rr rr                     jsr xt_one_plus         ; ( nt xt nt+1 )
002214r 3  20 rr rr                     jsr xt_fetch            ; ( nt xt flags )
002217r 3               
002217r 3  B5 00                        lda 0,x
002219r 3               
002219r 3                               ; This is crude, but for the moment it is good enough
002219r 3  A0 06                        ldy #6                  ; Not all bits are used
00221Br 3               @flag_loop:
00221Br 3  48                           pha
00221Cr 3  29 01                        and #%00000001
00221Er 3  18                           clc
00221Fr 3  69 30                        adc #$30                ; ASCII "0"
002221r 3  20 rr rr                     jsr emit_a
002224r 3  20 rr rr                     jsr xt_space
002227r 3               
002227r 3  68                           pla
002228r 3  6A                           ror                     ; Next flag
002229r 3               
002229r 3  88                           dey
00222Ar 3  D0 EF                        bne @flag_loop
00222Cr 3               
00222Cr 3  20 rr rr                     jsr xt_cr
00222Fr 3               
00222Fr 3  E8                           inx
002230r 3  E8                           inx                     ; ( nt xt )
002231r 3               
002231r 3                               ; Figure out the size
002231r 3  A9 0C                        lda #str_see_size
002233r 3  20 rr rr                     jsr print_string_no_lf
002236r 3               
002236r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
002239r 3  20 rr rr                     jsr xt_wordsize         ; ( xt u )
00223Cr 3  20 rr rr                     jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
00223Fr 3  20 rr rr                     jsr xt_decimal
002242r 3  20 rr rr                     jsr xt_u_dot            ; ( xt u )
002245r 3  20 rr rr                     jsr xt_hex
002248r 3  20 rr rr                     jsr xt_cr
00224Br 3               
00224Br 3                               ; Dump hex and disassemble
00224Br 3  20 rr rr                     jsr xt_two_dup          ; ( xt u xt u )
00224Er 3  20 rr rr                     jsr xt_dump
002251r 3  20 rr rr                     jsr xt_cr
002254r 3  20 rr rr                     jsr xt_disasm
002257r 3               
002257r 3  68                           pla
002258r 3  85 rr                        sta base
00225Ar 3               
00225Ar 3  60           z_see:          rts
00225Br 3               
00225Br 3               
00225Br 3               
00225Br 3               ; ## SET_CURRENT ( wid -- ) "Set the compilation wordlist"
00225Br 3               ; ## "set-current" auto ANS search
00225Br 3                       ; """https://forth-standard.org/standard/search/SET-CURRENT"""
00225Br 3               
00225Br 3               xt_set_current:
00225Br 3  20 rr rr                     jsr underflow_1
00225Er 3               
00225Er 3                               ; Save the value from the data stack.
00225Er 3  A0 04                        ldy #current_offset
002260r 3  B5 00                        lda 0,x         ; CURRENT is byte variable
002262r 3  91 rr                        sta (up),y      ; so only the LSB is used.
002264r 3               
002264r 3  E8                           inx
002265r 3  E8                           inx
002266r 3               
002266r 3  60           z_set_current:  rts
002267r 3               
002267r 3               
002267r 3               
002267r 3               ; ## SET_ORDER ( wid_n .. wid_1 n -- ) "Set the current search order"
002267r 3               ; ## "set-order" auto ANS search
002267r 3                       ; """https://forth-standard.org/standard/search/SET-ORDER"""
002267r 3               
002267r 3               xt_set_order:
002267r 3                               ; Test for -1 TOS
002267r 3  A9 FF                        lda #$FF
002269r 3  D5 01                        cmp 1,x
00226Br 3  D0 12                        bne @start
00226Dr 3  D5 00                        cmp 0,x
00226Fr 3  D0 0E                        bne @start
002271r 3               
002271r 3                               ; There is a -1 TOS.  Replace it with the default
002271r 3                               ; search order, which is just the FORTH-WORDLIST.
002271r 3  CA                           dex             ; Make room for the count.
002272r 3  CA                           dex
002273r 3  74 03                        stz 3,x         ; ROOT-WORDLIST is 3
002275r 3  A9 03                        lda #3
002277r 3  95 02                        sta 2,x
002279r 3  74 01                        stz 1,x         ; Count is 1.
00227Br 3  A9 01                        lda #1
00227Dr 3  95 00                        sta 0,x
00227Fr 3               
00227Fr 3                               ; Continue processing with ( forth-wordlist 1 -- )
00227Fr 3               @start:
00227Fr 3                               ; Set #ORDER - the number of wordlists in the search order.
00227Fr 3  A0 1E                        ldy #num_order_offset
002281r 3  B5 00                        lda 0,x
002283r 3  91 rr                        sta (up),y      ; #ORDER is a byte variable.
002285r 3  85 rr                        sta tmp1        ; Save a copy for zero check and looping.
002287r 3                                               ; Only the low byte is saved in tmp1 as
002287r 3                                               ; only 8 wordlists are allowed.
002287r 3               
002287r 3  E8                           inx             ; Drop the count off the data stack.
002288r 3  E8                           inx
002289r 3               
002289r 3                               ; Check if there are zero wordlists.
002289r 3  A5 rr                        lda tmp1
00228Br 3  F0 0D                        beq @done       ; If zero, there are no wordlists.
00228Dr 3               
00228Dr 3                               ; Move the wordlist ids from the data stack to the search order.
00228Dr 3  A0 1F                        ldy #search_order_offset
00228Fr 3               @loop:
00228Fr 3                               ; Move one wordlist id over into the search order.
00228Fr 3  B5 00                        lda 0,x         ; The search order is a byte array
002291r 3  91 rr                        sta (up),y      ; so only save the LSB
002293r 3  C8                           iny
002294r 3               
002294r 3                               ; Remove it from the data stack.
002294r 3  E8                           inx
002295r 3  E8                           inx
002296r 3               
002296r 3                               ; See if that was the last one to process (first in the list).
002296r 3  C6 rr                        dec tmp1
002298r 3  D0 F5                        bne @loop
00229Ar 3               
00229Ar 3               @done:
00229Ar 3  60           z_set_order:    rts
00229Br 3               
00229Br 3               
00229Br 3               
00229Br 3               
00229Br 3               ; ## S_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
00229Br 3               ; ## "s""  auto  ANS core
00229Br 3                       ; """https://forth-standard.org/standard/core/Sq
00229Br 3                       ; Store address and length of string given, returning ( addr u ).
00229Br 3                       ; ANS core claims this is compile-only, but the file set expands it
00229Br 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
00229Br 3                       ; are evil. We follow general usage.
00229Br 3                       ;
00229Br 3                       ; Can also be realized as
00229Br 3                       ;     : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE
00229Br 3                       ; but it is used so much we want it in code.
00229Br 3                       ; """
00229Br 3               
00229Br 3               xt_s_quote:
00229Br 3                               ; tmp2 will be used to determine if we are handling
00229Br 3                               ; escaped characters or not.  In this case, we are
00229Br 3                               ; not, so set it to zero.
00229Br 3  64 rr                        stz tmp2
00229Dr 3  64 rr                        stz tmp2+1
00229Fr 3               
00229Fr 3               s_quote_start:
00229Fr 3                               ; Make room on the data stack for the address.
00229Fr 3  CA                           dex
0022A0r 3  CA                           dex
0022A1r 3                               ; Make room on the data stack for the count.
0022A1r 3  CA                           dex
0022A2r 3  CA                           dex
0022A3r 3               
0022A3r 3                               ; Put a jmp over the string data with address to be filled
0022A3r 3                               ; in later.
0022A3r 3  A9 4C                        lda #$4C
0022A5r 3  20 rr rr                     jsr cmpl_a
0022A8r 3               
0022A8r 3                               ; Address to be filled in later, just use $4C for the moment
0022A8r 3  20 rr rr                     jsr cmpl_a
0022ABr 3  20 rr rr                     jsr cmpl_a
0022AEr 3               
0022AEr 3                               ; Save the current value of HERE on the data stack for the
0022AEr 3                               ; address of the string.
0022AEr 3  A5 rr                        lda cp
0022B0r 3  95 02                        sta 2,x
0022B2r 3  A5 rr                        lda cp+1
0022B4r 3  95 03                        sta 3,x
0022B6r 3               
0022B6r 3               @savechars_loop:
0022B6r 3                               ; Start saving the string into the dictionary up to the
0022B6r 3                               ; ending double quote. First, check to see if the input
0022B6r 3                               ; buffer is empty.
0022B6r 3  A5 rr                        lda toin+1              ; MSB
0022B8r 3  C5 rr                        cmp ciblen+1
0022BAr 3  90 2A                        bcc @input_fine         ; unsigned comparison
0022BCr 3               
0022BCr 3  A5 rr                        lda toin                ; LSB
0022BEr 3  C5 rr                        cmp ciblen
0022C0r 3  90 24                        bcc @input_fine
0022C2r 3               
0022C2r 3                               ; Input buffer is empty. Refill it. Refill calls accept,
0022C2r 3                               ; which uses tmp2 and tmp3. Save and restore them.
0022C2r 3  A5 rr                        lda tmp2
0022C4r 3  48                           pha
0022C5r 3  A5 rr                        lda tmp2+1
0022C7r 3  48                           pha
0022C8r 3  A5 rr                        lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
0022CAr 3  48                           pha
0022CBr 3               
0022CBr 3  20 rr rr                     jsr xt_refill           ; ( -- f )
0022CEr 3               
0022CEr 3  68                           pla
0022CFr 3  85 rr                        sta tmp3
0022D1r 3  68                           pla
0022D2r 3  85 rr                        sta tmp2+1
0022D4r 3  68                           pla
0022D5r 3  85 rr                        sta tmp2
0022D7r 3               
0022D7r 3                               ; Check result of refill.
0022D7r 3  B5 00                        lda 0,x
0022D9r 3  15 01                        ora 1,x
0022DBr 3  D0 05                        bne @refill_ok
0022DDr 3               
0022DDr 3                               ; Something when wrong with refill.
0022DDr 3  A9 06                        lda #err_refill
0022DFr 3  4C rr rr                     jmp error
0022E2r 3               
0022E2r 3               @refill_ok:
0022E2r 3                               ; Remove the refill flag from the data stack.
0022E2r 3  E8                           inx
0022E3r 3  E8                           inx
0022E4r 3               
0022E4r 3                               ; For refill success, jump back up to the empty check, just in
0022E4r 3                               ; case refill gave us an empty buffer (eg. empty/blank line of
0022E4r 3                               ; input)
0022E4r 3  80 D0                        bra @savechars_loop
0022E6r 3               
0022E6r 3               @input_fine:
0022E6r 3                               ; There should be at least one valid char to use.
0022E6r 3                               ; Calculate it's address at CIB+TOIN into tmp1
0022E6r 3  A5 rr                        lda cib
0022E8r 3  18                           clc
0022E9r 3  65 rr                        adc toin        ; LSB
0022EBr 3  85 rr                        sta tmp1
0022EDr 3  A5 rr                        lda cib+1
0022EFr 3  65 rr                        adc toin+1      ; MSB
0022F1r 3  85 rr                        sta tmp1+1
0022F3r 3               
0022F3r 3                               ; Get the character
0022F3r 3  B2 rr                        lda (tmp1)
0022F5r 3               
0022F5r 3                               ; Check to see if we are handling escaped characters.
0022F5r 3  24 rr                        bit tmp2
0022F7r 3  30 03                        bmi @handle_escapes    ; Only checking bit 7
0022F9r 3  4C rr rr                     jmp @regular_char
0022FCr 3               
0022FCr 3               @handle_escapes:
0022FCr 3                               ; We are handling escaped characters.  See if we have
0022FCr 3                               ; already seen the backslash.
0022FCr 3  24 rr                        bit tmp2+1
0022FEr 3  30 03                        bmi @escaped
002300r 3  4C rr rr                     jmp @not_escaped
002303r 3               
002303r 3               @escaped:
002303r 3               
002303r 3                               ; We have seen a backslash (previous character). Check to see if
002303r 3                               ; we are in the middle of a \x sequence (bit 6 of tmp2+1 will
002303r 3                               ; be clear in that case )
002303r 3  70 22                        bvs @check_esc_chars
002305r 3               
002305r 3                               ; We are in the middle of a \x sequence. Check to see if we
002305r 3                               ; are on the first or second digit.
002305r 3  A9 01                        lda #1
002307r 3  24 rr                        bit tmp2+1
002309r 3  D0 10                        bne @esc_x_second_digit
00230Br 3               
00230Br 3                               ; First digit.
00230Br 3  E6 rr                        inc tmp2+1  ; Adjust flag for second digit next time.
00230Dr 3  B2 rr                        lda (tmp1)  ; Get the char again.
00230Fr 3               
00230Fr 3                               ; Convert to hex
00230Fr 3  20 rr rr                     jsr convert_hex_value
002312r 3               
002312r 3                               ; This is the upper nybble, so move it up.
002312r 3  0A                           asl
002313r 3  0A                           asl
002314r 3  0A                           asl
002315r 3  0A                           asl
002316r 3  85 rr                        sta tmp3    ; Save it for later.
002318r 3  4C rr rr                     jmp @next_character
00231Br 3               
00231Br 3               @esc_x_second_digit:
00231Br 3               
00231Br 3                               ; We are on the second hex digit of a \x sequence. Clear the
00231Br 3                               ; escaped character flag (because we are handling it right
00231Br 3                               ; here)
00231Br 3  64 rr                        stz tmp2+1
00231Dr 3  B2 rr                        lda (tmp1)
00231Fr 3               
00231Fr 3                               ; Convert to hex, combine with value in tmp3
00231Fr 3  20 rr rr                     jsr convert_hex_value
002322r 3  05 rr                        ora tmp3
002324r 3               
002324r 3  4C rr rr                     jmp @save_character
002327r 3               
002327r 3               @check_esc_chars:
002327r 3                               ; Clear the escaped character flag (because we are
002327r 3                               ; handling it right here)
002327r 3  64 rr                        stz tmp2+1
002329r 3               
002329r 3                               ; Process the escaped character
002329r 3               @check_esc_a:
002329r 3  C9 61                        cmp #'a'
00232Br 3  D0 05                        bne @check_esc_b
00232Dr 3               
00232Dr 3                               ; BEL (ASCII value 7)
00232Dr 3  A9 07                        lda #7
00232Fr 3  4C rr rr                     jmp @save_character
002332r 3               
002332r 3               @check_esc_b:
002332r 3  C9 62                        cmp #'b'
002334r 3  D0 05                        bne @check_esc_e
002336r 3               
002336r 3                               ; Backspace (ASCII value 8)
002336r 3  A9 08                        lda #8
002338r 3  4C rr rr                     jmp @save_character
00233Br 3               
00233Br 3               @check_esc_e:
00233Br 3  C9 65                        cmp #'e'
00233Dr 3  D0 04                        bne @check_esc_f
00233Fr 3               
00233Fr 3                               ; ESC (ASCII value 27)
00233Fr 3  A9 1B                        lda #27
002341r 3  80 75                        bra @save_character
002343r 3               
002343r 3               @check_esc_f:
002343r 3  C9 66                        cmp #'f'
002345r 3  D0 04                        bne @check_esc_l
002347r 3               
002347r 3                               ; FF (ASCII value 12)
002347r 3  A9 0C                        lda #12
002349r 3  80 6D                        bra @save_character
00234Br 3               
00234Br 3               @check_esc_l:
00234Br 3  C9 6C                        cmp #'l'
00234Dr 3  D0 04                        bne @check_esc_m
00234Fr 3               
00234Fr 3                               ; LF (ASCII value 10)
00234Fr 3  A9 0A                        lda #10
002351r 3  80 65                        bra @save_character
002353r 3               
002353r 3               @check_esc_m:
002353r 3                               ; This one is not like the others because we save two
002353r 3                               ; characters
002353r 3  C9 6D                        cmp #'m'
002355r 3  D0 09                        bne @check_esc_n
002357r 3               
002357r 3                               ; CR/LF pair (ASCII values 13, 10)
002357r 3  A9 0D                        lda #13
002359r 3  20 rr rr                     jsr cmpl_a
00235Cr 3  A9 0A                        lda #10
00235Er 3  80 58                        bra @save_character
002360r 3               
002360r 3               @check_esc_n:
002360r 3  C9 6E                        cmp #'n'
002362r 3  D0 04                        bne @check_esc_q
002364r 3               
002364r 3                               ; newline, impl. dependant, using LF (ASCII values 10)
002364r 3  A9 0A                        lda #10
002366r 3  80 50                        bra @save_character
002368r 3               
002368r 3               @check_esc_q:
002368r 3  C9 71                        cmp #'q'
00236Ar 3  D0 04                        bne @check_esc_r
00236Cr 3               
00236Cr 3                               ; Double quote (ASCII value 34)
00236Cr 3  A9 22                        lda #34
00236Er 3  80 48                        bra @save_character
002370r 3               
002370r 3               @check_esc_r:
002370r 3  C9 72                        cmp #'r'
002372r 3  D0 04                        bne @check_esc_t
002374r 3               
002374r 3                               ; CR (ASCII value 13)
002374r 3  A9 0D                        lda #13
002376r 3  80 40                        bra @save_character
002378r 3               
002378r 3               @check_esc_t:
002378r 3  C9 74                        cmp #'t'
00237Ar 3  D0 04                        bne @check_esc_v
00237Cr 3               
00237Cr 3                               ; Horizontal TAB (ASCII value 9)
00237Cr 3  A9 09                        lda #9
00237Er 3  80 38                        bra @save_character
002380r 3               
002380r 3               @check_esc_v:
002380r 3  C9 76                        cmp #'v'
002382r 3  D0 04                        bne @check_esc_z
002384r 3               
002384r 3                               ; Vertical TAB (ASCII value 11)
002384r 3  A9 0B                        lda #11
002386r 3  80 30                        bra @save_character
002388r 3               
002388r 3               @check_esc_z:
002388r 3  C9 7A                        cmp #'z'
00238Ar 3  D0 04                        bne @check_esc_quote
00238Cr 3               
00238Cr 3                               ; NULL (ASCII value 0)
00238Cr 3  A9 00                        lda #0
00238Er 3  80 28                        bra @save_character
002390r 3               
002390r 3               @check_esc_quote:
002390r 3  C9 22                        cmp #$22
002392r 3  D0 04                        bne @check_esc_x
002394r 3               
002394r 3                               ; Double quote (ASCII value 34)
002394r 3  A9 22                        lda #34
002396r 3  80 20                        bra @save_character
002398r 3               
002398r 3               @check_esc_x:
002398r 3  C9 78                        cmp #'x'
00239Ar 3  D0 06                        bne @check_esc_backslash
00239Cr 3               
00239Cr 3                               ; This one is difficult. We need to get the next TWO
00239Cr 3                               ; characters (which might require a refill in the middle)
00239Cr 3                               ; and combine them as two hex digits. We do this by
00239Cr 3                               ; clearing bit 6 of tmp2+1 to indicate we are in a digit
00239Cr 3                               ; and using bit 0 to keep track of which digit we are on.
00239Cr 3  A9 BE                        lda #$BE        ; Clear bits 6 and 0
00239Er 3  85 rr                        sta tmp2+1
0023A0r 3  80 19                        bra @next_character
0023A2r 3               
0023A2r 3               @check_esc_backslash:
0023A2r 3  C9 5C                        cmp #$5C
0023A4r 3  D0 04                        bne @not_escaped
0023A6r 3               
0023A6r 3                               ; Backslash (ASCII value 92)
0023A6r 3  A9 5C                        lda #92
0023A8r 3  80 0E                        bra @save_character
0023AAr 3               
0023AAr 3               @not_escaped:
0023AAr 3                               ; Check for the backslash to see if we should escape
0023AAr 3                               ; the next char.
0023AAr 3  C9 5C                        cmp #$5C        ; The backslash char
0023ACr 3  D0 06                        bne @regular_char
0023AEr 3               
0023AEr 3                               ; We found a backslash.  Don't save anyhing, but set
0023AEr 3                               ; a flag (in tmp2+1) to handle the next char. We don't
0023AEr 3                               ; try to get the next char here as it may require a
0023AEr 3                               ; refill of the input buffer.
0023AEr 3  A9 FF                        lda #$FF
0023B0r 3  85 rr                        sta tmp2+1
0023B2r 3  80 07                        bra @next_character
0023B4r 3               
0023B4r 3               @regular_char:
0023B4r 3                               ; Check if the current character is the end of the string.
0023B4r 3  C9 22                        cmp #$22        ; ASCII for "
0023B6r 3  F0 0C                        beq @found_string_end
0023B8r 3               
0023B8r 3               @save_character:
0023B8r 3                               ; If we didn't reach the end of the string, compile this
0023B8r 3                               ; character into the dictionary
0023B8r 3  20 rr rr                     jsr cmpl_a
0023BBr 3               
0023BBr 3               @next_character:
0023BBr 3                               ; Move on to the next character.
0023BBr 3  E6 rr                        inc toin
0023BDr 3  D0 02                        bne @savechars_loop_longjump
0023BFr 3  E6 rr                        inc toin+1
0023C1r 3               
0023C1r 3               @savechars_loop_longjump:
0023C1r 3  4C rr rr                     jmp @savechars_loop
0023C4r 3               
0023C4r 3               @found_string_end:
0023C4r 3                               ; Use up the delimiter.
0023C4r 3  E6 rr                        inc toin
0023C6r 3  D0 02                        bne @1
0023C8r 3  E6 rr                        inc toin+1
0023CAr 3               @1:
0023CAr 3                               ; Calculate the length of the string, which is the
0023CAr 3                               ; difference between cp and the address of the start
0023CAr 3                               ; of the string (currently saved on the stack).
0023CAr 3  A5 rr                        lda cp
0023CCr 3  38                           sec
0023CDr 3  F5 02                        sbc 2,x
0023CFr 3  95 00                        sta 0,x         ; LSB
0023D1r 3  A5 rr                        lda cp+1
0023D3r 3  F5 03                        sbc 3,x
0023D5r 3  95 01                        sta 1,x         ; MSB
0023D7r 3               
0023D7r 3                               ; Update the address of the jump-over jmp instruction.
0023D7r 3                               ; First determine location of jmp instructions address.
0023D7r 3                               ; It should be 2 bytes before the start of the string.
0023D7r 3                               ; Compute it into tmp1, which is no longer being used.
0023D7r 3  B5 02                        lda 2,x
0023D9r 3  38                           sec
0023DAr 3  E9 02                        sbc #2
0023DCr 3  85 rr                        sta tmp1
0023DEr 3  B5 03                        lda 3,x
0023E0r 3  E9 00                        sbc #0          ; Propagate borrow
0023E2r 3  85 rr                        sta tmp1+1
0023E4r 3               
0023E4r 3                               ; Update the address of the jump to HERE.
0023E4r 3  A5 rr                        lda cp
0023E6r 3  92 rr                        sta (tmp1)
0023E8r 3  A0 01                        ldy #1
0023EAr 3  A5 rr                        lda cp+1
0023ECr 3  91 rr                        sta (tmp1),y
0023EEr 3               
0023EEr 3                               ; What happens next depends on the state (which is bad, but
0023EEr 3                               ; that's the way it works at the moment). If we are
0023EEr 3                               ; interpretating, we save the string to a transient buffer
0023EEr 3                               ; and return that address (used for file calls, see
0023EEr 3                               ; https://forth-standard.org/standard/file/Sq . If we're
0023EEr 3                               ; compiling, we just need SLITERAL
0023EEr 3  A5 rr                        lda state
0023F0r 3  05 rr                        ora state+1             ; paranoid
0023F2r 3  F0 03                        beq @done
0023F4r 3               
0023F4r 3                               ; Jump into the middle of the sliteral word, after the
0023F4r 3                               ; string data has been compiled into the dictionary,
0023F4r 3                               ; because we've already done that step.
0023F4r 3  20 rr rr                     jsr sliteral_const_str         ; ( addr u -- )
0023F7r 3               
0023F7r 3               @done:
0023F7r 3  60           z_s_quote:      rts
0023F8r 3               
0023F8r 3               
0023F8r 3               
0023F8r 3               ; ## S_TO_D ( u -- d ) "Convert single cell number to double cell"
0023F8r 3               ; ## "s>d"  auto  ANS core
0023F8r 3                       ; """https://forth-standard.org/standard/core/StoD"""
0023F8r 3               
0023F8r 3               xt_s_to_d:
0023F8r 3  20 rr rr                     jsr underflow_1
0023FBr 3               
0023FBr 3  CA                           dex
0023FCr 3  CA                           dex
0023FDr 3  74 00                        stz 0,x
0023FFr 3  74 01                        stz 1,x
002401r 3               
002401r 3  B5 03                        lda 3,x
002403r 3  10 04                        bpl @done
002405r 3               
002405r 3                               ; negative, extend sign
002405r 3  D6 00                        dec 0,x
002407r 3  D6 01                        dec 1,x
002409r 3               @done:
002409r 3  60           z_s_to_d:       rts
00240Ar 3               
00240Ar 3               
00240Ar 3               
00240Ar 3               ; ## SAVE_BUFFERS ( -- ) "Save all dirty buffers to storage"
00240Ar 3               ; ## "save-buffers"  tested  ANS block
00240Ar 3                       ; """https://forth-standard.org/standard/block/SAVE-BUFFERS"""
00240Ar 3               
00240Ar 3               xt_save_buffers:
00240Ar 3                               ; Check the buffer status
00240Ar 3  A0 2C                        ldy #buffstatus_offset
00240Cr 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
00240Er 3  C9 03                        cmp #3          ; LSB is needed.
002410r 3  D0 12                        bne @done       ; Either not used or not dirty = done!
002412r 3               
002412r 3                               ; We need to save the block.
002412r 3  20 rr rr                     jsr xt_blkbuffer
002415r 3  20 rr rr                     jsr xt_buffblocknum
002418r 3  20 rr rr                     jsr xt_fetch
00241Br 3  20 rr rr                     jsr xt_block_write
00241Er 3               
00241Er 3                               ; Mark the buffer as clean now.
00241Er 3  A9 01                        lda #1
002420r 3  A0 2C                        ldy #buffstatus_offset
002422r 3  91 rr                        sta (up),y
002424r 3               
002424r 3               @done:
002424r 3  60           z_save_buffers: rts
002425r 3               
002425r 3               
002425r 3               
002425r 3               ; ## SCR ( -- addr ) "Push address of variable holding last screen listed"
002425r 3               ; ## "scr"  auto  ANS block ext
002425r 3                       ; """https://forth-standard.org/standard/block/SCR"""
002425r 3               xt_scr:
002425r 3                               ; SCR is at UP + scr_offset
002425r 3  CA                           dex
002426r 3  CA                           dex
002427r 3  18                           clc
002428r 3  A5 rr                        lda up
00242Ar 3  69 02                        adc #scr_offset ; Add offset
00242Cr 3  95 00                        sta 0,x
00242Er 3  A5 rr                        lda up+1
002430r 3  69 00                        adc #0          ; Adding carry
002432r 3  95 01                        sta 1,x
002434r 3               
002434r 3  60           z_scr:          rts
002435r 3               
002435r 3               
002435r 3               ; ## SEARCH ( addr1 u1 addr2 u2 -- addr3 u3 flag) "Search for a substring"
002435r 3               ; ## "search"   auto  ANS string
002435r 3                       ; """https://forth-standard.org/standard/string/SEARCH
002435r 3                       ; Search for string2 (denoted by addr2 u2) in string1 (denoted by
002435r 3                       ; addr1 u1). If a match is found the flag will be true and
002435r 3                       ; addr3 will have the address of the start of the match and u3 will have
002435r 3                       ; the number of characters remaining from the match point to the end
002435r 3                       ; of the original string1. If a match is not found, the flag will be
002435r 3                       ; false and addr3 and u3 will be the original string1's addr1 and u1.
002435r 3                       ; """
002435r 3               
002435r 3               xt_search:
002435r 3  20 rr rr                     jsr underflow_4
002438r 3               
002438r 3                               ; ANS says if the second string is a zero-length string it
002438r 3                               ; automatically matches.
002438r 3  B5 00                        lda 0,x
00243Ar 3  15 01                        ora 1,x
00243Cr 3  D0 0B                        bne @start_search
00243Er 3               
00243Er 3                               ; The second string is a zero length string.  Just remove
00243Er 3                               ; the second string and put a true flag.
00243Er 3  E8                           inx             ; Remove u2
00243Fr 3  E8                           inx
002440r 3  A9 FF                        lda #$FF        ; Turn addr2 into a true flag
002442r 3  95 00                        sta 0,x
002444r 3  95 01                        sta 1,x
002446r 3  4C rr rr                     jmp z_search
002449r 3               
002449r 3               @start_search:
002449r 3                               ; Put an offset (starting at zero) on the stack.
002449r 3  20 rr rr                     jsr xt_zero
00244Cr 3               
00244Cr 3               @search_loop:
00244Cr 3                               ; We stop (not found) when u2 + offset > u1
00244Cr 3                               ; Calculate u2+offset into tmp1
00244Cr 3  18                           clc
00244Dr 3  B5 00                        lda 0,x
00244Fr 3  75 02                        adc 2,x
002451r 3  85 rr                        sta tmp1
002453r 3  B5 01                        lda 1,x
002455r 3  75 03                        adc 3,x
002457r 3               
002457r 3               
002457r 3                               ; Compare to u1. Start with the high byte
002457r 3  D5 07                        cmp 7,x
002459r 3  90 12                        bcc @init_comparison ; Obviously less
00245Br 3  D0 06                        bne @not_found
00245Dr 3               
00245Dr 3                               ; The upper address byte matched - check the lower byte
00245Dr 3                               ; Load u1 first so we can use just a carry to check.
00245Dr 3  B5 06                        lda 6,x
00245Fr 3  C5 rr                        cmp tmp1
002461r 3  B0 0A                        bcs @init_comparison
002463r 3               
002463r 3               @not_found:
002463r 3                               ; The substring isn't in the main string.
002463r 3                               ; Return just the main string and a false flag.
002463r 3  E8                           inx             ; Remove offset
002464r 3  E8                           inx
002465r 3  E8                           inx             ; Remove u2
002466r 3  E8                           inx
002467r 3  74 00                        stz 0,x         ; Turn addr2 into a false flag
002469r 3  74 01                        stz 1,x
00246Br 3  80 66                        bra z_search
00246Dr 3               
00246Dr 3               @init_comparison:
00246Dr 3                               ; Use tmp1 to hold address in string 1.
00246Dr 3                               ; Use tmp2 to hold address in string 2.
00246Dr 3                               ; Use tmp3 to hold the number of characters left to check.
00246Dr 3               
00246Dr 3                               ; Compute the starting address in string 1
00246Dr 3                               ; as addr1 + offset
00246Dr 3  18                           clc
00246Er 3  B5 08                        lda 8,x
002470r 3  75 00                        adc 0,x
002472r 3  85 rr                        sta tmp1
002474r 3  B5 09                        lda 9,x
002476r 3  75 01                        adc 1,x
002478r 3  85 rr                        sta tmp1+1
00247Ar 3               
00247Ar 3                               ; The starting address in string 2 is just addr2.
00247Ar 3  B5 04                        lda 4,x
00247Cr 3  85 rr                        sta tmp2
00247Er 3  B5 05                        lda 5,x
002480r 3  85 rr                        sta tmp2+1
002482r 3               
002482r 3                               ; The number of characters to check is u2.
002482r 3  B5 02                        lda 2,x
002484r 3  85 rr                        sta tmp3
002486r 3  B5 03                        lda 3,x
002488r 3  85 rr                        sta tmp3+1
00248Ar 3               
00248Ar 3               @comparison_loop:
00248Ar 3                               ; Check to see if the current characters match.
00248Ar 3  B2 rr                        lda (tmp1)
00248Cr 3  D2 rr                        cmp (tmp2)
00248Er 3  F0 05                        beq @letters_match
002490r 3               
002490r 3                               ; One of the letters didn't match.
002490r 3                               ; Increment the offset and try again.
002490r 3  20 rr rr                     jsr xt_one_plus
002493r 3  80 B7                        bra @search_loop
002495r 3               
002495r 3               @letters_match:
002495r 3                               ; The letters match.  Advance the pointers until the
002495r 3                               ; count reaches zero.
002495r 3  E6 rr                        inc tmp1
002497r 3  D0 02                        bne @1
002499r 3  E6 rr                        inc tmp1+1
00249Br 3               @1:
00249Br 3  E6 rr                        inc tmp2
00249Dr 3  D0 02                        bne @2
00249Fr 3  E6 rr                        inc tmp2+1
0024A1r 3               @2:
0024A1r 3                               ; Decrement the count of remaining letters to check.
0024A1r 3  A5 rr                        lda tmp3
0024A3r 3  D0 02                        bne @3
0024A5r 3  C6 rr                        dec tmp3+1
0024A7r 3               @3:
0024A7r 3  C6 rr                        dec tmp3
0024A9r 3               
0024A9r 3                               ; Check if we've reached zero.
0024A9r 3  A5 rr                        lda tmp3
0024ABr 3  05 rr                        ora tmp3+1
0024ADr 3  D0 DB                        bne @comparison_loop ; Check the next letter
0024AFr 3               
0024AFr 3                               ; We've run out of letters and they all match!
0024AFr 3                               ; Return (addr1+offset) (u1-offset) true
0024AFr 3                               ; Add offset to addr1.
0024AFr 3  18                           clc
0024B0r 3  B5 00                        lda 0,x
0024B2r 3  75 08                        adc 8,x
0024B4r 3  95 08                        sta 8,x
0024B6r 3  B5 01                        lda 1,x
0024B8r 3  75 09                        adc 9,x
0024BAr 3  95 09                        sta 9,x
0024BCr 3               
0024BCr 3                               ; Subtract offset from u1.
0024BCr 3  38                           sec
0024BDr 3  B5 06                        lda 6,x
0024BFr 3  F5 00                        sbc 0,x
0024C1r 3  95 06                        sta 6,x
0024C3r 3  B5 07                        lda 7,x
0024C5r 3  F5 01                        sbc 1,x
0024C7r 3  95 07                        sta 7,x
0024C9r 3               
0024C9r 3                               ; Replace addr2, u2, and offset with a true flag.
0024C9r 3  E8                           inx             ; drop offset
0024CAr 3  E8                           inx
0024CBr 3  E8                           inx             ; drop u2
0024CCr 3  E8                           inx
0024CDr 3  A9 FF                        lda #$FF
0024CFr 3  95 00                        sta 0,x         ; Turn addr2 into a true flag.
0024D1r 3  95 01                        sta 1,x
0024D3r 3               
0024D3r 3  60           z_search:       rts
0024D4r 3               
0024D4r 3               
0024D4r 3               
0024D4r 3               ; ## SEMICOLON ( -- ) "End compilation of new word"
0024D4r 3               ; ## ";"  auto  ANS core
0024D4r 3                       ; """https://forth-standard.org/standard/core/Semi
0024D4r 3                       ; End the compilation of a new word into the Dictionary.
0024D4r 3                       ;
0024D4r 3                       ; When we
0024D4r 3                       ; enter this, WORKWORD is pointing to the nt_ of this word in the
0024D4r 3                       ; Dictionary, DP to the previous word, and CP to the next free byte.
0024D4r 3                       ; A Forth definition would be (see "Starting Forth"):
0024D4r 3                       ; : POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE  Following the
0024D4r 3                       ; practice of Gforth, we warn here if a word has been redefined.
0024D4r 3                       ; """
0024D4r 3               
0024D4r 3               xt_semicolon:
0024D4r 3                               ; Check if this is a : word or a :NONAME word.
0024D4r 3  24 rr                        bit status
0024D6r 3  70 11                        bvs @colonword
0024D8r 3               
0024D8r 3                               ; This is a :NONAME word - just put an RTS on the end and
0024D8r 3                               ; the address (held in workword) on the stack.
0024D8r 3  A9 60                        lda #$60                ; opcode for RTS
0024DAr 3  20 rr rr                     jsr cmpl_a
0024DDr 3               
0024DDr 3  CA                           dex
0024DEr 3  CA                           dex
0024DFr 3  A5 rr                        lda workword
0024E1r 3  95 00                        sta 0,x
0024E3r 3  A5 rr                        lda workword+1
0024E5r 3  95 01                        sta 1,x
0024E7r 3  80 45                        bra @semicolon_done
0024E9r 3               
0024E9r 3               @colonword:
0024E9r 3                               ; CP is the byte that will be the address we use in the
0024E9r 3                               ; header as the end-of-compile address (z_word). This is
0024E9r 3                               ; six bytes down from the header
0024E9r 3  A0 06                        ldy #6
0024EBr 3  A5 rr                        lda cp
0024EDr 3  91 rr                        sta (workword),y
0024EFr 3  C8                           iny
0024F0r 3  A5 rr                        lda cp+1
0024F2r 3  91 rr                        sta (workword),y
0024F4r 3               
0024F4r 3                               ; Allocate one further byte and save the RTS instruction
0024F4r 3                               ; there
0024F4r 3  A9 60                        lda #$60                ; opcode for RTS
0024F6r 3  20 rr rr                     jsr cmpl_a
0024F9r 3               
0024F9r 3                               ; Before we formally add the word to the Dictionary, we
0024F9r 3                               ; check to see if it is already present, and if yes, we
0024F9r 3                               ; warn the user.
0024F9r 3               
0024F9r 3                               ; See if word already in Dictionary.
0024F9r 3                               ; (STATUS bit 7 will be high as CREATE already
0024F9r 3                               ;  checked for us.)
0024F9r 3  24 rr                        bit status
0024FBr 3  10 26                        bpl @new_word   ; Bit 7 is clear = new word
0024FDr 3               
0024FDr 3                               ; We start by putting the string of the
0024FDr 3                               ; word we're defining on the stack
0024FDr 3  CA                           dex
0024FEr 3  CA                           dex
0024FFr 3  CA                           dex
002500r 3  CA                           dex
002501r 3               
002501r 3                               ; WORKWORD points to the beginning of the head of our new
002501r 3                               ; word, where the first byte is the length of the string
002501r 3                               ; We can't use LATESTNT because we haven't added the new
002501r 3                               ; word to the Dictionary yet
002501r 3  B2 rr                        lda (workword)
002503r 3  95 00                        sta 0,x
002505r 3  74 01                        stz 1,x
002507r 3               
002507r 3                               ; Eight bytes below WORKWORD is the actual beginning of
002507r 3                               ; the string
002507r 3  A5 rr                        lda workword
002509r 3  18                           clc
00250Ar 3  69 08                        adc #8
00250Cr 3  95 02                        sta 2,x
00250Er 3  A5 rr                        lda workword+1
002510r 3  69 00                        adc #0                  ; only want carry
002512r 3  95 03                        sta 3,x
002514r 3               
002514r 3                               ; This word is already in the Dictionary, so we print a
002514r 3                               ; warning to the user.
002514r 3  A9 02                        lda #str_redefined       ; address of string "redefined"
002516r 3  20 rr rr                     jsr print_string_no_lf
002519r 3               
002519r 3                               ; Now we print the offending word.
002519r 3  20 rr rr                     jsr xt_type
00251Cr 3  20 rr rr                     jsr xt_space
00251Fr 3               
00251Fr 3                               ; Clear bit 7 of status (so future words will print message
00251Fr 3                               ; by defaut)
00251Fr 3  A9 80                        lda #%10000000
002521r 3  14 rr                        trb status
002523r 3               
002523r 3               @new_word:
002523r 3                               ; Let's get this over with. Save beginning of our word
002523r 3                               ; as new last word in the Dictionary
002523r 3  A5 rr                        lda workword
002525r 3  85 rr                        sta dp
002527r 3  A5 rr                        lda workword+1
002529r 3  85 rr                        sta dp+1
00252Br 3  20 rr rr                     jsr dp_to_current       ; Save the updated DP to the
00252Er 3                                                       ; CURRENT wordlist.
00252Er 3               @semicolon_done:
00252Er 3                               ; Word definition complete. Return compile flag to zero
00252Er 3                               ; to return to interpret mode
00252Er 3  64 rr                        stz state
002530r 3  64 rr                        stz state+1
002532r 3               
002532r 3  60           z_semicolon:    rts
002533r 3               
002533r 3               
002533r 3               
002533r 3               ; ## SIGN ( n -- ) "Add minus to pictured output"
002533r 3               ; ## "sign"  auto  ANS core
002533r 3                       ; """https://forth-standard.org/standard/core/SIGN
002533r 3                       ;
002533r 3                       ; Code based on
002533r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
002533r 3                       ; Original Forth code is   0< IF ASCII - HOLD THEN
002533r 3                       ; """
002533r 3               
002533r 3               xt_sign:
002533r 3  20 rr rr                     jsr underflow_1
002536r 3               
002536r 3  B5 01                        lda 1,x         ; check MSB of TOS
002538r 3  30 04                        bmi @minus
00253Ar 3               
00253Ar 3  E8                           inx
00253Br 3  E8                           inx
00253Cr 3  80 09                        bra @done
00253Er 3               @minus:
00253Er 3  A9 2D                        lda #$2D        ; ASCII for "-"
002540r 3  95 00                        sta 0,x         ; overwrite TOS
002542r 3  74 01                        stz 1,x         ; paranoid
002544r 3               
002544r 3  20 rr rr                     jsr xt_hold
002547r 3               @done:
002547r 3  60           z_sign:         rts
002548r 3               
002548r 3               
002548r 3               
002548r 3               ; ## SLASH ( n1 n2 -- n ) "Divide NOS by TOS"
002548r 3               ; ## "/"  auto  ANS core
002548r 3                       ; """https://forth-standard.org/standard/core/Div
002548r 3                       ;
002548r 3                       ; Forth code is either  >R S>D R> FM/MOD SWAP DROP
002548r 3                       ; or >R S>D R> SM/REM SWAP DROP -- we use SM/REM in Tali Forth.
002548r 3                       ; This code is currently unoptimized. This code without the SLASH
002548r 3                       ; DROP at the end is /MOD, so we share the code as far as possible.
002548r 3                       ; """
002548r 3               
002548r 3               xt_slash:
002548r 3                               ; With all the multiplication going on, it would be hard to
002548r 3                               ; make sure that one of our temporary variables is not
002548r 3                               ; overwritten. We make sure that doesn't happen by taking the
002548r 3                               ; hit of pushing the flag to the 65c02's stack
002548r 3  A9 00                        lda #0
00254Ar 3  48                           pha
00254Br 3  80 03                        bra _common
00254Dr 3               
00254Dr 3               xt_slash_mod:
00254Dr 3                               ; Note that /MOD accesses this code
00254Dr 3  A9 FF                        lda #$FF
00254Fr 3  48                           pha             ; falls through to _common
002550r 3               
002550r 3               _common:
002550r 3  20 rr rr                     jsr xt_to_r             ; >R
002553r 3  20 rr rr                     jsr xt_s_to_d           ; S>D
002556r 3  20 rr rr                     jsr xt_r_from           ; R>
002559r 3  20 rr rr                     jsr xt_sm_slash_rem     ; SM/REM
00255Cr 3               
00255Cr 3                               ; Get the flag back from the 65c02's stack. Zero is SLASH,
00255Cr 3                               ; $FF is SLASH MOD
00255Cr 3  68                           pla
00255Dr 3  D0 05                        bne @done
00255Fr 3               
00255Fr 3                               ; The following code is for SLASH only
00255Fr 3  20 rr rr                     jsr xt_swap
002562r 3  E8                           inx             ; DROP
002563r 3  E8                           inx
002564r 3               @done:
002564r 3               z_slash_mod:
002564r 3  60           z_slash:        rts
002565r 3               
002565r 3               
002565r 3               
002565r 3               ; ## SLASH_MOD ( n1 n2 -- n3 n4 ) "Divide NOS by TOS with a remainder"
002565r 3               ; ## "/mod"  auto  ANS core
002565r 3                       ; """https://forth-standard.org/standard/core/DivMOD
002565r 3                       ;
002565r 3                       ; This is a dummy entry, the actual code is shared with SLASH
002565r 3                       ; """
002565r 3               
002565r 3               
002565r 3               ; ## SLASH_STRING ( addr u n -- addr u ) "Shorten string by n"
002565r 3               ; ## "/string"  auto  ANS string
002565r 3                       ; """https://forth-standard.org/standard/string/DivSTRING
002565r 3                       ;
002565r 3                       ; Forth code is
002565r 3                       ; : /STRING ( ADDR U N -- ADDR U ) ROT OVER + ROT ROT - ;
002565r 3                       ; Put differently, we need to add TOS and 3OS, and subtract
002565r 3                       ; TOS from NOS, and then drop TOS
002565r 3                       ; """
002565r 3               
002565r 3               xt_slash_string:
002565r 3  20 rr rr                     jsr underflow_3
002568r 3               
002568r 3  18                           clc             ; 3OS+TOS
002569r 3  B5 00                        lda 0,x
00256Br 3  75 04                        adc 4,x
00256Dr 3  95 04                        sta 4,x
00256Fr 3               
00256Fr 3  B5 01                        lda 1,x
002571r 3  75 05                        adc 5,x
002573r 3  95 05                        sta 5,x
002575r 3               
002575r 3  38                           sec             ; NOS-TOS
002576r 3  B5 02                        lda 2,x
002578r 3  F5 00                        sbc 0,x
00257Ar 3  95 02                        sta 2,x
00257Cr 3               
00257Cr 3  B5 03                        lda 3,x
00257Er 3  F5 01                        sbc 1,x
002580r 3  95 03                        sta 3,x
002582r 3               
002582r 3  E8                           inx
002583r 3  E8                           inx
002584r 3               
002584r 3  60           z_slash_string: rts
002585r 3               
002585r 3               
002585r 3               
002585r 3               ; ## SLITERAL ( addr u -- )( -- addr u ) "Compile a string for runtime"
002585r 3               ; ## "sliteral" auto  ANS string
002585r 3                       ; """https://forth-standard.org/standard/string/SLITERAL
002585r 3                       ; Add the runtime for an existing string.
002585r 3                       ; """
002585r 3               
002585r 3               xt_sliteral:
002585r 3  20 rr rr                     jsr underflow_2
002588r 3               
002588r 3                               ; We can't assume that ( addr u ) of the current string is in
002588r 3                               ; a stable area (eg. already in the dictionary.) Copy the
002588r 3                               ; string data into the dictionary using move.
002588r 3               
002588r 3                               ; Put a jmp over the string data with address to be filled
002588r 3                               ; in later.
002588r 3  A9 4C                        lda #$4C
00258Ar 3  20 rr rr                     jsr cmpl_a
00258Dr 3               
00258Dr 3                               ; Address to be filled in later.
00258Dr 3  20 rr rr                     jsr cmpl_a
002590r 3  20 rr rr                     jsr cmpl_a
002593r 3               
002593r 3                               ; Turn the data stack from ( addr u ) into
002593r 3                               ; ( here u addr here u ) so move can be called with
002593r 3                               ; the remaining items on the stack ready for processing.
002593r 3                               ; Reserve three extra words on the stack.
002593r 3  8A                           txa
002594r 3  38                           sec
002595r 3  E9 06                        sbc #6
002597r 3  AA                           tax
002598r 3               
002598r 3                               ; Move addr down from TOS-4 to TOS-2
002598r 3  B5 08                        lda 8,x
00259Ar 3  95 04                        sta 4,x
00259Cr 3  B5 09                        lda 9,x
00259Er 3  95 05                        sta 5,x
0025A0r 3               
0025A0r 3                               ; Copy u from TOS-3 to TOS
0025A0r 3  B5 06                        lda 6,x
0025A2r 3  95 00                        sta 0,x
0025A4r 3  B5 07                        lda 7,x
0025A6r 3  95 01                        sta 1,x
0025A8r 3               
0025A8r 3                               ; Put HERE into TOS-1 and TOS-4
0025A8r 3  A5 rr                        lda cp
0025AAr 3  95 08                        sta 8,x
0025ACr 3  95 02                        sta 2,x
0025AEr 3  A5 rr                        lda cp+1
0025B0r 3  95 09                        sta 9,x
0025B2r 3  95 03                        sta 3,x
0025B4r 3               
0025B4r 3                               ; Copy the string into the dictionary.
0025B4r 3  20 rr rr                     jsr xt_move
0025B7r 3               
0025B7r 3                               ; Update cp.
0025B7r 3  18                           clc
0025B8r 3  A5 rr                        lda cp
0025BAr 3  75 00                        adc 0,x
0025BCr 3  85 rr                        sta cp
0025BEr 3  A5 rr                        lda cp+1
0025C0r 3  75 01                        adc 1,x
0025C2r 3  85 rr                        sta cp+1
0025C4r 3               
0025C4r 3                               ; Update the address of the jump-over jmp instruction.
0025C4r 3                               ; First determine location of jmp instructions address.
0025C4r 3                               ; It should be 2 bytes before the start of the string.
0025C4r 3               
0025C4r 3                               ; Compute it into tmp1, which is no longer being used.
0025C4r 3  B5 02                        lda 2,x
0025C6r 3  38                           sec
0025C7r 3  E9 02                        sbc #2
0025C9r 3  85 rr                        sta tmp1
0025CBr 3  B5 03                        lda 3,x
0025CDr 3  E9 00                        sbc #0          ; Propagate borrow
0025CFr 3  85 rr                        sta tmp1+1
0025D1r 3               
0025D1r 3                               ; Update the address of the jump to HERE.
0025D1r 3  A5 rr                        lda cp
0025D3r 3  92 rr                        sta (tmp1)
0025D5r 3  A0 01                        ldy #1
0025D7r 3  A5 rr                        lda cp+1
0025D9r 3  91 rr                        sta (tmp1),y
0025DBr 3               
0025DBr 3                               ; Stack is now ( addr2 u ) where addr2 is the new
0025DBr 3                               ; location in the dictionary.
0025DBr 3               
0025DBr 3               sliteral_const_str:
0025DBr 3                               ; Compile a subroutine jump to the runtime of SLITERAL that
0025DBr 3                               ; pushes the new ( addr u ) pair to the Data Stack.
0025DBr 3                               ; When we're done, the code will look like this:
0025DBr 3               
0025DBr 3                               ; xt -->    jmp a
0025DBr 3                               ;           <string data bytes>
0025DBr 3                               ;  a -->    jsr sliteral_runtime
0025DBr 3                               ;           <string address>
0025DBr 3                               ;           <string length>
0025DBr 3                               ; rts -->
0025DBr 3               
0025DBr 3                               ; This means we'll have to adjust the return address for two
0025DBr 3                               ; cells, not just one
0025DBr 3  A0 rr                        ldy #>sliteral_runtime
0025DDr 3  A9 rr                        lda #<sliteral_runtime
0025DFr 3  20 rr rr                     jsr cmpl_subroutine
0025E2r 3               
0025E2r 3                               ; We want to have the address end up as NOS and the length
0025E2r 3                               ; as TOS, so we store the address first
0025E2r 3  B4 03                        ldy 3,x                ; address MSB
0025E4r 3  B5 02                        lda 2,x                ; address LSB
0025E6r 3  20 rr rr                     jsr cmpl_word
0025E9r 3               
0025E9r 3  B4 01                        ldy 1,x                ; length MSB
0025EBr 3  B5 00                        lda 0,x                ; length LSB
0025EDr 3  20 rr rr                     jsr cmpl_word
0025F0r 3               
0025F0r 3                               ; clean up and leave
0025F0r 3  E8                           inx
0025F1r 3  E8                           inx
0025F2r 3  E8                           inx
0025F3r 3  E8                           inx
0025F4r 3               
0025F4r 3  60           z_sliteral:     rts
0025F5r 3               
0025F5r 3               
0025F5r 3               sliteral_runtime:
0025F5r 3               
0025F5r 3                       ; """Run time behaviour of SLITERAL: Push ( addr u ) of string to
0025F5r 3                       ; the Data Stack. We arrive here with the return address as the
0025F5r 3                       ; top of Return Stack, which points to the address of the string
0025F5r 3                       ; """
0025F5r 3  CA                           dex
0025F6r 3  CA                           dex
0025F7r 3  CA                           dex
0025F8r 3  CA                           dex
0025F9r 3               
0025F9r 3                               ; Get the address of the string address off the stack and
0025F9r 3                               ; increase by one because of the RTS mechanics
0025F9r 3  68                           pla
0025FAr 3  85 rr                        sta tmp1        ; LSB of address
0025FCr 3  68                           pla
0025FDr 3  85 rr                        sta tmp1+1      ; MSB of address
0025FFr 3               
0025FFr 3                               ; Walk through both and save them
0025FFr 3  A0 01                        ldy #1          ; adjust for JSR/RTS mechanics on 65c02
002601r 3  B1 rr                        lda (tmp1),y
002603r 3  95 02                        sta 2,x         ; LSB of address
002605r 3  C8                           iny
002606r 3               
002606r 3  B1 rr                        lda (tmp1),y
002608r 3  95 03                        sta 3,x         ; MSB of address
00260Ar 3  C8                           iny
00260Br 3               
00260Br 3  B1 rr                        lda (tmp1),y
00260Dr 3  95 00                        sta 0,x         ; LSB of length
00260Fr 3  C8                           iny
002610r 3               
002610r 3  B1 rr                        lda (tmp1),y
002612r 3  95 01                        sta 1,x         ; MSB of length
002614r 3               
002614r 3                               ; restore return address
002614r 3  18                           clc
002615r 3  A5 rr                        lda tmp1
002617r 3  69 04                        adc #4
002619r 3  A8                           tay             ; LSB
00261Ar 3  A5 rr                        lda tmp1+1
00261Cr 3  69 00                        adc #0          ; we only need carry
00261Er 3  48                           pha             ; MSB
00261Fr 3  5A                           phy
002620r 3               
002620r 3  60                           rts
002621r 3               
002621r 3               
002621r 3               
002621r 3               ; ## SM_SLASH_REM ( d n1 -- n2 n3 ) "Symmetic signed division"
002621r 3               ; ## "sm/rem"  auto  ANS core
002621r 3                       ; """https://forth-standard.org/standard/core/SMDivREM
002621r 3                       ; Symmetic signed division. Compare FM/MOD. Based on F-PC 3.6
002621r 3                       ; by Ulrich Hoffmann. See http://www.xlerb.de/uho/ansi.seq
002621r 3                       ;
002621r 3                       ; Forth:
002621r 3                       ; OVER >R 2DUP XOR 0< >R ABS >R DABS R> UM/MOD R> ?NEGATE SWAP
002621r 3                       ; R> ?NEGATE SWAP
002621r 3                       ; """
002621r 3               
002621r 3               xt_sm_slash_rem:
002621r 3  20 rr rr                     jsr underflow_3 ; contains double number
002624r 3               
002624r 3                               ; push MSB of high cell of d to Data Stack so we can check
002624r 3                               ; its sign later
002624r 3  B5 03                        lda 3,x
002626r 3  48                           pha
002627r 3               
002627r 3                               ; XOR the MSB of the high cell of d and n1 so we figure out
002627r 3                               ; its sign later as well
002627r 3  B5 01                        lda 1,x
002629r 3  55 03                        eor 3,x
00262Br 3  48                           pha
00262Cr 3               
00262Cr 3                               ; Prepare division by getting absolute of n1 and d
00262Cr 3  20 rr rr                     jsr xt_abs
00262Fr 3  E8                           inx             ; pretend we pushed n1 to R
002630r 3  E8                           inx
002631r 3               
002631r 3  20 rr rr                     jsr xt_dabs
002634r 3  CA                           dex
002635r 3  CA                           dex
002636r 3               
002636r 3  20 rr rr                     jsr xt_um_slash_mod     ; UM/MOD
002639r 3               
002639r 3                               ; if the XOR compiled above is negative, negate the
002639r 3                               ; quotient (n3)
002639r 3  68                           pla
00263Ar 3  10 03                        bpl @1
00263Cr 3  20 rr rr                     jsr xt_negate
00263Fr 3               @1:
00263Fr 3                               ; if d was negative, negate the remainder (n2)
00263Fr 3  68                           pla
002640r 3  10 07                        bpl @done
002642r 3               
002642r 3  E8                           inx             ; pretend we pushed quotient to R
002643r 3  E8                           inx
002644r 3  20 rr rr                     jsr xt_negate
002647r 3  CA                           dex
002648r 3  CA                           dex
002649r 3               
002649r 3               @done:
002649r 3  60           z_sm_slash_rem: rts
00264Ar 3               
00264Ar 3               
00264Ar 3               
00264Ar 3               ; ## SOURCE ( -- addr u ) "Return location and size of input buffer""
00264Ar 3               ; ## "source"  auto  ANS core
00264Ar 3                       ; """https://forth-standard.org/standard/core/SOURCE"""
00264Ar 3               xt_source:
00264Ar 3                               ; add address
00264Ar 3  CA                           dex
00264Br 3  CA                           dex
00264Cr 3  A5 rr                        lda cib
00264Er 3  95 00                        sta 0,x
002650r 3  A5 rr                        lda cib+1
002652r 3  95 01                        sta 1,x
002654r 3               
002654r 3                               ; add size
002654r 3  CA                           dex
002655r 3  CA                           dex
002656r 3  A5 rr                        lda ciblen
002658r 3  95 00                        sta 0,x
00265Ar 3  A5 rr                        lda ciblen+1
00265Cr 3  95 01                        sta 1,x
00265Er 3               
00265Er 3  60           z_source:       rts
00265Fr 3               
00265Fr 3               
00265Fr 3               ; ## SOURCE_ID ( -- n ) "Return source identifier"
00265Fr 3               ; ## "source-id"  tested  ANS core ext
00265Fr 3                       ; """https://forth-standard.org/standard/core/SOURCE-ID Identify the
00265Fr 3                       ; input source unless it is a block (s. Conklin & Rather p. 156). This
00265Fr 3                       ; will give the input source: 0 is keyboard, -1 ($FFFF) is character
00265Fr 3                       ; string, and a text file gives the fileid.
00265Fr 3                       ; """
00265Fr 3               xt_source_id:
00265Fr 3  CA                           dex
002660r 3  CA                           dex
002661r 3               
002661r 3  A5 rr                        lda insrc
002663r 3  95 00                        sta 0,x
002665r 3  A5 rr                        lda insrc+1
002667r 3  95 01                        sta 1,x
002669r 3               
002669r 3  60           z_source_id:    rts
00266Ar 3               
00266Ar 3               
00266Ar 3               ; ## SPACE ( -- ) "Print a single space"
00266Ar 3               ; ## "space"  auto  ANS core
00266Ar 3                       ; """https://forth-standard.org/standard/core/SPACE"""
00266Ar 3               xt_space:
00266Ar 3  A9 20                        lda #AscSP
00266Cr 3  20 rr rr                     jsr emit_a
00266Fr 3               
00266Fr 3  60           z_space:        rts
002670r 3               
002670r 3               
002670r 3               ; ## SPACES ( u -- ) "Print a number of spaces"
002670r 3               ; ## "spaces"  auto  ANS core
002670r 3                       ; """https://forth-standard.org/standard/core/SPACES"""
002670r 3               
002670r 3               xt_spaces:
002670r 3  20 rr rr                     jsr underflow_1
002673r 3               
002673r 3                               ; catch any zero in TOS fast
002673r 3  B5 00                        lda 0,x
002675r 3  15 01                        ora 1,x
002677r 3  F0 2A                        beq @done
002679r 3               
002679r 3                               ; Usually we're only going to print far less than 256 spaces,
002679r 3                               ; so we create a quick loop for that. Short loop could be realized
002679r 3                               ; as a separate subroutine, but unless we're really pressed for
002679r 3                               ; memory at some point, this is faster
002679r 3  B4 01                        ldy 1,x
00267Br 3  D0 0C                        bne @lots_of_spaces
00267Dr 3               
00267Dr 3  B4 00                        ldy 0,x
00267Fr 3               @quick_loop:
00267Fr 3                               ; we reach here knowing that there must be a number that is not
00267Fr 3                               ; zero in the TOS
00267Fr 3  A9 20                        lda #AscSP
002681r 3  20 rr rr                     jsr emit_a
002684r 3  88                           dey
002685r 3  F0 1C                        beq @done
002687r 3  80 F6                        bra @quick_loop
002689r 3               
002689r 3               @lots_of_spaces:
002689r 3                               ; We go through the first loop once to get rid of the lower
002689r 3                               ; counter byte. This could be zero
002689r 3  B4 00                        ldy 0,x
00268Br 3               
00268Br 3               @first_slow_loop:
00268Br 3  F0 08                        beq @slow_outer_loop
00268Dr 3  A9 20                        lda #AscSP
00268Fr 3  20 rr rr                     jsr emit_a
002692r 3  88                           dey
002693r 3  80 F6                        bra @first_slow_loop
002695r 3               
002695r 3               @slow_outer_loop:
002695r 3                               ; we arrive here knowing that the MSB of TOS cannot be a zero
002695r 3  A0 00                        ldy #00
002697r 3               
002697r 3               @slow_inner_loop:
002697r 3  A9 20                        lda #AscSP
002699r 3  20 rr rr                     jsr emit_a
00269Cr 3  88                           dey
00269Dr 3  D0 F8                        bne @slow_inner_loop
00269Fr 3               
00269Fr 3  D6 01                        dec 1,x
0026A1r 3  D0 F2                        bne @slow_outer_loop
0026A3r 3               
0026A3r 3               @done:
0026A3r 3  E8                           inx             ; drop
0026A4r 3  E8                           inx
0026A5r 3               
0026A5r 3  60           z_spaces:       rts
0026A6r 3               
0026A6r 3               
0026A6r 3               
0026A6r 3               ; ## STAR ( n n -- n ) "16*16 --> 16 "
0026A6r 3               ; ## "*"  auto  ANS core
0026A6r 3                       ; """https://forth-standard.org/standard/core/Times
0026A6r 3                       ; Multiply two signed 16 bit numbers, returning a 16 bit result.
0026A6r 3                       ;
0026A6r 3                       ; This is nothing  more than UM* DROP
0026A6r 3                       ; """
0026A6r 3               
0026A6r 3               xt_star:
0026A6r 3  20 rr rr                     jsr underflow_2
0026A9r 3               
0026A9r 3  20 rr rr                     jsr xt_um_star
0026ACr 3  E8                           inx
0026ADr 3  E8                           inx
0026AEr 3               
0026AEr 3  60           z_star:         rts
0026AFr 3               
0026AFr 3               
0026AFr 3               
0026AFr 3               ; ## STAR_SLASH  ( n1 n2 n3 -- n4 ) "n1 * n2 / n3 -->  n"
0026AFr 3               ; ## "*/"  auto  ANS core
0026AFr 3                       ; """https://forth-standard.org/standard/core/TimesDiv
0026AFr 3                       ; Multiply n1 by n2 and divide by n3, returning the result
0026AFr 3                       ; without a remainder. This is */MOD without the mod.
0026AFr 3                       ;
0026AFr 3                       ; This word
0026AFr 3                       ; can be defined in Forth as : */  */MOD SWAP DROP ; which is
0026AFr 3                       ; pretty much what we do here
0026AFr 3                       ; """
0026AFr 3               xt_star_slash:
0026AFr 3                               ; We let */MOD check for underflow
0026AFr 3  20 rr rr                     jsr xt_star_slash_mod
0026B2r 3  20 rr rr                     jsr xt_swap
0026B5r 3  E8                           inx
0026B6r 3  E8                           inx
0026B7r 3               z_star_slash:
0026B7r 3  60                           rts
0026B8r 3               
0026B8r 3               
0026B8r 3               ; ## STAR_SLASH_MOD  ( n1 n2 n3 -- n4 n5 ) "n1 * n2 / n3 --> n-mod n"
0026B8r 3               ; ## "*/mod"  auto  ANS core
0026B8r 3                       ; """https://forth-standard.org/standard/core/TimesDivMOD
0026B8r 3                       ; Multiply n1 by n2 producing the intermediate double-cell result d.
0026B8r 3                       ; Divide d by n3 producing the single-cell remainder n4 and the
0026B8r 3                       ; single-cell quotient n5.
0026B8r 3                       ;
0026B8r 3                       ; In Forth, this is
0026B8r 3                       ; : */MOD  >R M* >R SM/REM ;  Note that */ accesses this routine.
0026B8r 3                       ; """
0026B8r 3               xt_star_slash_mod:
0026B8r 3  20 rr rr                     jsr underflow_3
0026BBr 3               
0026BBr 3  20 rr rr                     jsr xt_to_r
0026BEr 3  20 rr rr                     jsr xt_m_star
0026C1r 3  20 rr rr                     jsr xt_r_from
0026C4r 3  20 rr rr                     jsr xt_sm_slash_rem
0026C7r 3               
0026C7r 3               z_star_slash_mod:
0026C7r 3  60                           rts
0026C8r 3               
0026C8r 3               
0026C8r 3               ; ## STATE ( -- addr ) "Return the address of compilation state flag"
0026C8r 3               ; ## "state"  auto  ANS core
0026C8r 3                       ; """https://forth-standard.org/standard/core/STATE
0026C8r 3                       ; STATE is true when in compilation state, false otherwise. Note
0026C8r 3                       ; we do not return the state itself, but only the address where
0026C8r 3                       ; it lives. The state should not be changed directly by the user; see
0026C8r 3                       ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
0026C8r 3                       ; """
0026C8r 3               xt_state:
0026C8r 3  CA                           dex
0026C9r 3  CA                           dex
0026CAr 3  A9 rr                        lda #<state
0026CCr 3  95 00                        sta 0,x
0026CEr 3  A9 rr                        lda #>state
0026D0r 3  95 01                        sta 1,x
0026D2r 3               
0026D2r 3  60           z_state:        rts
0026D3r 3               
0026D3r 3               
0026D3r 3               ; ## STORE ( n addr -- ) "Store TOS in memory"
0026D3r 3               ; ## "!"  auto  ANS core
0026D3r 3                       ; """https://forth-standard.org/standard/core/Store"""
0026D3r 3               xt_store:
0026D3r 3  20 rr rr                     jsr underflow_2
0026D6r 3               
0026D6r 3  B5 02                        lda 2,x         ; LSB
0026D8r 3  81 00                        sta (0,x)
0026DAr 3               
0026DAr 3  F6 00                        inc 0,x
0026DCr 3  D0 02                        bne @1
0026DEr 3  F6 01                        inc 1,x
0026E0r 3               @1:
0026E0r 3  B5 03                        lda 3,x         ; MSB
0026E2r 3  81 00                        sta (0,x)
0026E4r 3               
0026E4r 3  E8                           inx             ; 2DROP
0026E5r 3  E8                           inx
0026E6r 3  E8                           inx
0026E7r 3  E8                           inx
0026E8r 3               
0026E8r 3  60           z_store:        rts
0026E9r 3               
0026E9r 3               
0026E9r 3               ; ## STRIP_UNDERFLOW ( -- addr ) "Return address where underflow status is kept"
0026E9r 3               ; ## "strip-underflow"  tested  Tali Forth
0026E9r 3                       ; """`STRIP-UNDERFLOW` is a flag variable that determines if underflow
0026E9r 3                       ; checking should be removed during the compilation of new words.
0026E9r 3                       ; Default is false.
0026E9r 3                       ; """
0026E9r 3               xt_strip_underflow:
0026E9r 3  CA                           dex
0026EAr 3  CA                           dex
0026EBr 3               
0026EBr 3  A9 rr                        lda #<uf_strip
0026EDr 3  95 00                        sta 0,x
0026EFr 3  A9 rr                        lda #>uf_strip
0026F1r 3  95 01                        sta 1,x
0026F3r 3               
0026F3r 3               z_strip_underflow:
0026F3r 3  60                           rts
0026F4r 3               
0026F4r 3               
0026F4r 3               ; ## SWAP ( b a -- a b ) "Exchange TOS and NOS"
0026F4r 3               ; ## "swap"  auto  ANS core
0026F4r 3                       ; """https://forth-standard.org/standard/core/SWAP"""
0026F4r 3               xt_swap:
0026F4r 3  20 rr rr                     jsr underflow_2
0026F7r 3               
0026F7r 3  B5 00                        lda 0,x         ; LSB
0026F9r 3  B4 02                        ldy 2,x
0026FBr 3  95 02                        sta 2,x
0026FDr 3  94 00                        sty 0,x
0026FFr 3               
0026FFr 3  B5 01                        lda 1,x         ; MSB
002701r 3  B4 03                        ldy 3,x
002703r 3  95 03                        sta 3,x
002705r 3  94 01                        sty 1,x
002707r 3               
002707r 3  60           z_swap:         rts
002708r 3               
002708r 3               
002708r 3               ; ## THEN (C: orig -- ) ( -- ) "Conditional flow control"
002708r 3               ; ## "then"  auto  ANS core
002708r 3                       ; """http://forth-standard.org/standard/core/THEN"""
002708r 3               xt_then:
002708r 3                               ; Get the address to jump to.
002708r 3  20 rr rr                     jsr xt_here
00270Br 3               
00270Br 3                               ; Stuff HERE in for the branch address back
00270Br 3                               ; at the IF or ELSE (origination address is on stack).
00270Br 3  20 rr rr                     jsr xt_swap
00270Er 3  20 rr rr                     jsr xt_store
002711r 3               
002711r 3  60           z_then:         rts
002712r 3               
002712r 3               
002712r 3               ; ## THRU ( scr# scr# -- ) "Load screens in the given range"
002712r 3               ; ## "thru"  tested  ANS block ext
002712r 3                       ; """https://forth-standard.org/standard/block/THRU"""
002712r 3               
002712r 3               xt_thru:
002712r 3  20 rr rr                     jsr underflow_2
002715r 3               
002715r 3                               ; We need to loop here, and can't use the data stack
002715r 3                               ; because the LOADed screens might use it.  We'll
002715r 3                               ; need to use the same trick that DO loops use, holding
002715r 3                               ; the limit and current index on the return stack.
002715r 3               
002715r 3                               ; Put the ending screen number on the return stack
002715r 3  B5 01                        lda 1,x
002717r 3  48                           pha
002718r 3  B5 00                        lda 0,x
00271Ar 3  48                           pha
00271Br 3  E8                           inx
00271Cr 3  E8                           inx
00271Dr 3               @thru_loop:
00271Dr 3                               ; Put the starting screen number on the stack,
00271Dr 3                               ; but keep a copy
00271Dr 3  B5 01                        lda 1,x
00271Fr 3  48                           pha
002720r 3  B5 00                        lda 0,x
002722r 3  48                           pha
002723r 3               
002723r 3                               ; Load this screen.
002723r 3  20 rr rr                     jsr xt_load
002726r 3               
002726r 3                               ; Get the number and limit back off the stack.  Rather than
002726r 3                               ; waste time making room on the stack, just use tmp1 and tmp2.
002726r 3               
002726r 3                               ; Get the screen we just loaded.
002726r 3  68                           pla
002727r 3  85 rr                        sta tmp1
002729r 3  68                           pla
00272Ar 3  85 rr                        sta tmp1+1
00272Cr 3               
00272Cr 3                               ; Get the ending screen.
00272Cr 3  68                           pla
00272Dr 3  85 rr                        sta tmp2
00272Fr 3  68                           pla
002730r 3  85 rr                        sta tmp2+1
002732r 3               
002732r 3                               ; See if we just loaded the last screen.
002732r 3                               ; A already has the MSB of the last screen in it.
002732r 3  C5 rr                        cmp tmp1+1
002734r 3  D0 08                        bne @next_screen
002736r 3  A5 rr                        lda tmp2        ; Compare the LSB
002738r 3  C5 rr                        cmp tmp1
00273Ar 3  D0 02                        bne @next_screen
00273Cr 3  80 18                        bra @done       ; We just did the last screen.
00273Er 3               
00273Er 3               @next_screen:
00273Er 3                               ; Put the ending screen back on the data stack.
00273Er 3  A5 rr                        lda tmp2+1
002740r 3  48                           pha
002741r 3  A5 rr                        lda tmp2
002743r 3  48                           pha
002744r 3               
002744r 3                               ; Increment the current screen.
002744r 3  E6 rr                        inc tmp1
002746r 3  D0 02                        bne @1
002748r 3  E6 rr                        inc tmp1+1
00274Ar 3               @1:
00274Ar 3                               ; Put the current screen on the stack to prepare for
00274Ar 3                               ; the next loop.
00274Ar 3  CA                           dex
00274Br 3  CA                           dex
00274Cr 3  A5 rr                        lda tmp1
00274Er 3  95 00                        sta 0,x
002750r 3  A5 rr                        lda tmp1+1
002752r 3  95 01                        sta 1,x
002754r 3  80 C7                        bra @thru_loop
002756r 3               @done:
002756r 3  60           z_thru:         rts
002757r 3               
002757r 3               
002757r 3               
002757r 3               ; ## TICK ( "name" -- xt ) "Return a word's execution token (xt)"
002757r 3               ; ## "'"  auto  ANS core
002757r 3                       ; """https://forth-standard.org/standard/core/Tick"""
002757r 3               
002757r 3               xt_tick:
002757r 3  20 rr rr                     jsr xt_parse_name       ; ( -- addr u )
00275Ar 3               
00275Ar 3                               ; if we got a zero, there was a problem getting the
00275Ar 3                               ; name of the word
00275Ar 3  B5 00                        lda 0,x
00275Cr 3  15 01                        ora 1,x
00275Er 3  D0 05                        bne @1
002760r 3               
002760r 3  A9 05                        lda #err_noname
002762r 3  4C rr rr                     jmp error
002765r 3               @1:
002765r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt )
002768r 3               
002768r 3                               ; If we didn't find the word in the Dictionary, abort
002768r 3  B5 00                        lda 0,x
00276Ar 3  15 01                        ora 1,x
00276Cr 3  D0 05                        bne @2
00276Er 3               
00276Er 3  A9 08                        lda #err_syntax
002770r 3  4C rr rr                     jmp error
002773r 3               @2:
002773r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt -- xt )
002776r 3               
002776r 3  60           z_tick:         rts
002777r 3               
002777r 3               
002777r 3               
002777r 3               ; ## TO ( n "name" -- ) or ( "name") "Change a value"
002777r 3               ; ## "to"  auto  ANS core ext
002777r 3                       ; """https://forth-standard.org/standard/core/TO
002777r 3                       ; Gives a new value to a, uh, VALUE.
002777r 3                       ;
002777r 3                       ; One possible Forth
002777r 3                       ; implementation is  ' >BODY !  but given the problems we have
002777r 3                       ; with >BODY on STC Forths, we do this the hard way. Since
002777r 3                       ; Tali Forth uses the same code for CONSTANTs and VALUEs, you
002777r 3                       ; could use this to redefine a CONSTANT, but that is a no-no.
002777r 3                       ;
002777r 3                       ; Note that the standard has different behaviors for TO depending
002777r 3                       ; on the state (https://forth-standard.org/standard/core/TO).
002777r 3                       ; This makes TO state-dependent (which is bad) and also rather
002777r 3                       ; complex (see the Gforth implementation for comparison). This
002777r 3                       ; word may not be natively compiled and must be immediate. Frankly,
002777r 3                       ; it would have made more sense to have two words for this.
002777r 3                       ; """
002777r 3               
002777r 3               xt_to:
002777r 3                               ; One way or the other, we need the xt of the word after this
002777r 3                               ; one. At this point, we don't know if we are interpreted or
002777r 3                               ; compile, so we don't know if there is a value n on the stack,
002777r 3                               ; so we can't do an underflow check yet
002777r 3  20 rr rr                     jsr xt_tick             ; ( [n] xt )
00277Ar 3               
00277Ar 3                               ; The PFA (DFA in this case) is three bytes down,
00277Ar 3                               ; after the jump to DOCONST
00277Ar 3  B5 00                        lda 0,x                 ; LSB
00277Cr 3  18                           clc
00277Dr 3  69 03                        adc #3
00277Fr 3  85 rr                        sta tmp1
002781r 3  B5 01                        lda 1,x                 ; MSB
002783r 3  69 00                        adc #0                  ; we just want the carry
002785r 3  85 rr                        sta tmp1+1
002787r 3               
002787r 3  E8                           inx
002788r 3  E8                           inx                     ; ( [n] )
002789r 3               
002789r 3                               ; Now it gets ugly. See which state we are in
002789r 3  A5 rr                        lda state
00278Br 3  05 rr                        ora state+1
00278Dr 3  F0 34                        beq @interpret
00278Fr 3               
00278Fr 3                               ; Well, we're compiling. We want to end up with simple
00278Fr 3                               ; code that just takes the number that is TOS and saves
00278Fr 3                               ; it in the address of the xt we were just given. So we
00278Fr 3                               ; want to compile this routine:
00278Fr 3                               ;
00278Fr 3                               ;       lda 0,x                 - B5 00
00278Fr 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
00278Fr 3                               ;       lda 1,x                 - B5 01
00278Fr 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
00278Fr 3                               ;       inx                     - E8
00278Fr 3                               ;       inx                     - E8
00278Fr 3                               ;
00278Fr 3                               ; which at least is nice and short. Other than that, we pretty
00278Fr 3                               ; much have to do this the hard and long way, because with the
00278Fr 3                               ; LSBs and MSBs, we can't really put the numbers in a data
00278Fr 3                               ; range and store them with a loop. Sigh.
00278Fr 3               
00278Fr 3  A0 00                        ldy #$00                ; Code for LDA 0,X
002791r 3  A9 B5                        lda #$B5
002793r 3  20 rr rr                     jsr cmpl_word
002796r 3               
002796r 3  A9 8D                        lda #$8D                ; Code for STA abs
002798r 3  20 rr rr                     jsr cmpl_a
00279Br 3               
00279Br 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
00279Dr 3  A5 rr                        lda tmp1
00279Fr 3  20 rr rr                     jsr cmpl_word
0027A2r 3               
0027A2r 3  A0 01                        ldy #$01                ; Code for LDA 1,X
0027A4r 3  A9 B5                        lda #$B5
0027A6r 3  20 rr rr                     jsr cmpl_word
0027A9r 3               
0027A9r 3  A9 8D                        lda #$8D                ; Code for STA abs
0027ABr 3  20 rr rr                     jsr cmpl_a
0027AEr 3               
0027AEr 3  E6 rr                        inc tmp1                ; Calculate MSB
0027B0r 3  D0 02                        bne @1
0027B2r 3  E6 rr                        inc tmp1+1
0027B4r 3               @1:
0027B4r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
0027B6r 3  A5 rr                        lda tmp1
0027B8r 3  20 rr rr                     jsr cmpl_word
0027BBr 3               
0027BBr 3  A0 E8                        ldy #$E8                ; Code for INX
0027BDr 3  98                           tya
0027BEr 3  20 rr rr                     jsr cmpl_word
0027C1r 3               
0027C1r 3  80 0F                        bra @done
0027C3r 3               
0027C3r 3               @interpret:
0027C3r 3                               ; We're interpreting, so we arrive here with n
0027C3r 3                               ; on the stack. This is an annoying place to put
0027C3r 3                               ; the underflow check because we can't
0027C3r 3                               ; automatically strip it out
0027C3r 3  20 rr rr                     jsr underflow_1
0027C6r 3               
0027C6r 3                               ; We skip over the jump to DOCONST and store the number
0027C6r 3                               ; in the Program Field Area (PDF, in this case more a
0027C6r 3                               ; Data Field Area
0027C6r 3  B5 00                        lda 0,x
0027C8r 3  92 rr                        sta (tmp1)              ; LSB
0027CAr 3               
0027CAr 3  A0 01                        ldy #1
0027CCr 3  B5 01                        lda 1,x                 ; MSB
0027CEr 3  91 rr                        sta (tmp1),y            ; fall through to common
0027D0r 3               
0027D0r 3  E8                           inx                     ; DROP
0027D1r 3  E8                           inx
0027D2r 3               @done:
0027D2r 3  60           z_to:           rts
0027D3r 3               
0027D3r 3               
0027D3r 3               
0027D3r 3               ; ## TO_BODY ( xt -- addr ) "Return a word's Code Field Area (CFA)"
0027D3r 3               ; ## ">body"  auto  ANS core
0027D3r 3                       ; """https://forth-standard.org/standard/core/toBODY
0027D3r 3                       ; Given a word's execution token (xt), return the address of the
0027D3r 3                       ; start of that word's parameter field (PFA). This is defined as the
0027D3r 3                       ; address that HERE would return right after CREATE.
0027D3r 3                       ;
0027D3r 3                       ; This is a
0027D3r 3                       ; difficult word for STC Forths, because most words don't actually
0027D3r 3                       ; have a Code Field Area (CFA) to skip. We solve this by having CREATE
0027D3r 3                       ; add a flag, "has CFA" (HC), in the header so >BODY know to skip
0027D3r 3                       ; the subroutine jumps to DOVAR, DOCONST, or DODOES
0027D3r 3                       ; """
0027D3r 3               
0027D3r 3               xt_to_body:
0027D3r 3  20 rr rr                     jsr underflow_1
0027D6r 3               
0027D6r 3                               ; Ideally, xt already points to the CFA. We just need to check
0027D6r 3                               ; the HC flag for special cases
0027D6r 3  20 rr rr                     jsr xt_dup              ; ( xt xt )
0027D9r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt nt )
0027DCr 3               
0027DCr 3                               ; The status byte is nt+1
0027DCr 3  F6 00                        inc 0,x
0027DEr 3  D0 02                        bne @1
0027E0r 3  F6 01                        inc 1,x
0027E2r 3               @1:
0027E2r 3  A1 00                        lda (0,x)               ; get status byte
0027E4r 3  29 20                        and #HC
0027E6r 3  F0 0D                        beq @no_cfa
0027E8r 3               
0027E8r 3                               ; We've got a DOVAR, DOCONST, DODEFER, DODOES or whatever,
0027E8r 3                               ; so we add three to xt, which is NOS
0027E8r 3  18                           clc
0027E9r 3  B5 02                        lda 2,x         ; LSB
0027EBr 3  69 03                        adc #3
0027EDr 3  95 02                        sta 2,x
0027EFr 3  B5 03                        lda 3,x         ; MSB
0027F1r 3  69 00                        adc #0          ; we conly care about the carry
0027F3r 3  95 03                        sta 3,x         ; Fall through to @no_cfa
0027F5r 3               @no_cfa:
0027F5r 3  E8                           inx             ; get rid of the nt
0027F6r 3  E8                           inx
0027F7r 3               @done:
0027F7r 3  60           z_to_body:      rts
0027F8r 3               
0027F8r 3               
0027F8r 3               
0027F8r 3               ; ## TO_IN ( -- addr ) "Return address of the input pointer"
0027F8r 3               ; ## ">in"  auto  ANS core
0027F8r 3               xt_to_in:
0027F8r 3  CA                           dex
0027F9r 3  CA                           dex
0027FAr 3               
0027FAr 3  A9 rr                        lda #<toin
0027FCr 3  95 00                        sta 0,x
0027FEr 3  A9 rr                        lda #>toin      ; paranoid, should be zero
002800r 3  95 01                        sta 1,x
002802r 3               
002802r 3  60           z_to_in:        rts
002803r 3               
002803r 3               
002803r 3               ; ## TO_NUMBER ( ud addr u -- ud addr u ) "Convert a number"
002803r 3               ; ## ">number"  auto  ANS core
002803r 3                       ; """https://forth-standard.org/standard/core/toNUMBER
002803r 3                       ; Convert a string to a double number. Logic here is based on the
002803r 3                       ; routine by Phil Burk of the same name in pForth, see
002803r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
002803r 3                       ; for the original Forth code. We arrive here from NUMBER which has
002803r 3                       ; made sure that we don't have to deal with a sign and we don't have
002803r 3                       ; to deal with a dot as a last character that signalizes double -
002803r 3                       ; this should be a pure number string.
002803r 3                       ;
002803r 3                       ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we
002803r 3                       ; cannot access any of those.
002803r 3                       ;
002803r 3                       ; For the math routine, we move the inputs to the scratchpad to
002803r 3                       ; avoid having to fool around with the Data Stack.
002803r 3                       ;
002803r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
002803r 3                       ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
002803r 3                       ;     |           |           |           |           |
002803r 3                       ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
002803r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
002803r 3                       ;
002803r 3                       ; The math routine works by converting one character to its
002803r 3                       ; numerical value (N) via DIGIT? and storing it in S+4 for
002803r 3                       ; the moment. We then multiply the UD-HI value with the radix
002803r 3                       ; (from BASE) using UM*, which returns a double-cell result. We
002803r 3                       ; discard the high cell of that result (UD-HI-HI) and store the
002803r 3                       ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
002803r 3                       ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
002803r 3                       ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
002803r 3                       ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
002803r 3                       ; storing the result back in S and S+2, before we start another
002803r 3                       ; round with it as the new UD-LO and UD-HI.
002803r 3                       ; """
002803r 3               
002803r 3               
002803r 3               xt_to_number:
002803r 3  20 rr rr                     jsr underflow_4
002806r 3               
002806r 3                               ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
002806r 3                               ; After this step, the original ud-lo and ud-hi will still be on
002806r 3                               ; the Data Stack, but will be ignored and later overwritten
002806r 3                               ; If >NUMBER is called by NUMBER, these should be all zeros
002806r 3  B5 06                        lda 6,x         ; ud-lo LSB
002808r 3  85 rr                        sta scratch
00280Ar 3  B5 07                        lda 7,x         ; ud-lo MSB
00280Cr 3  85 rr                        sta scratch+1
00280Er 3               
00280Er 3  B5 04                        lda 4,x         ; ud-hi LSB
002810r 3  85 rr                        sta scratch+2
002812r 3  B5 05                        lda 5,x         ; ud-hi MSB
002814r 3  85 rr                        sta scratch+3
002816r 3               
002816r 3                               ; Push down one on the Data Stack to use TOS for character
002816r 3                               ; conversion ( ud-lo ud-hi addr u x )
002816r 3  CA                           dex
002817r 3  CA                           dex
002818r 3               
002818r 3               @loop:
002818r 3                               ; Get one character based on address
002818r 3  A1 04                        lda (4,x)
00281Ar 3  95 00                        sta 0,x                 ; ( ud-lo ud-hi addr u char )
00281Cr 3  74 01                        stz 1,x                 ; paranoid
00281Er 3               
00281Er 3  20 rr rr                     jsr xt_digit_question   ; ( char -- n -1 | char 0 )
002821r 3               
002821r 3                               ; This gives us ( ud-lo ud-hi addr u char f | n f ), so we
002821r 3                               ; check the flag. If it is zero, we return what we have and
002821r 3                               ; let the caller (usually NUMBER) complain
002821r 3  B5 00                        lda 0,x
002823r 3  D0 04                        bne @digit_ok
002825r 3               
002825r 3  E8                           inx
002826r 3  E8                           inx
002827r 3  80 67                        bra @done       ; ( ud-lo ud-hi addr u char )
002829r 3               
002829r 3               @digit_ok:
002829r 3                               ; Conversion was successful. We arrive here with
002829r 3                               ; ( ud-lo ud-hi addr u n -1 ) and can start the
002829r 3                               ; math routine
002829r 3               
002829r 3                               ; Save n so we don't have to fool around with the
002829r 3                               ; Data Stack
002829r 3  B5 02                        lda 2,x
00282Br 3  85 rr                        sta scratch+4
00282Dr 3  B5 03                        lda 3,x
00282Fr 3  85 rr                        sta scratch+5
002831r 3               
002831r 3                               ; Now multiply ud-hi (the one in the scratchpad, not the
002831r 3                               ; original one on the Data Stack) with the radix from BASE.
002831r 3                               ; We can clobber TOS and NOS because we saved n
002831r 3  A5 rr                        lda scratch+2
002833r 3  95 02                        sta 2,x         ; NOS
002835r 3  A5 rr                        lda scratch+3
002837r 3  95 03                        sta 3,x
002839r 3               
002839r 3  A5 rr                        lda base
00283Br 3  95 00                        sta 0,x         ; TOS
00283Dr 3  74 01                        stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
00283Fr 3               
00283Fr 3                               ; UM* returns a double-celled number
00283Fr 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
002842r 3               
002842r 3                               ; Move ud-hi-lo to safety
002842r 3  B5 02                        lda 2,x         ; ud-hi-lo
002844r 3  85 rr                        sta scratch+6
002846r 3  B5 03                        lda 3,x
002848r 3  85 rr                        sta scratch+7
00284Ar 3               
00284Ar 3                               ; Now we multiply ud-lo, overwriting the stack entries
00284Ar 3  A5 rr                        lda scratch
00284Cr 3  95 02                        sta 2,x
00284Er 3  A5 rr                        lda scratch+1
002850r 3  95 03                        sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
002852r 3               
002852r 3  A5 rr                        lda base
002854r 3  95 00                        sta 0,x
002856r 3  74 01                        stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
002858r 3               
002858r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
00285Br 3               
00285Br 3  B5 00                        lda 0,x
00285Dr 3  85 rr                        sta scratch+2
00285Fr 3  B5 01                        lda 1,x
002861r 3  85 rr                        sta scratch+3
002863r 3               
002863r 3  B5 02                        lda 2,x
002865r 3  85 rr                        sta scratch
002867r 3  B5 03                        lda 3,x
002869r 3  85 rr                        sta scratch+1
00286Br 3               
00286Br 3                               ; We add ud-lo and n, as well as ud-hi and ud-hi-lo,
00286Br 3                               ; both in the scratch pad
00286Br 3  18                           clc
00286Cr 3  A5 rr                        lda scratch     ; ud-lo LSB
00286Er 3  65 rr                        adc scratch+4   ; n LSB
002870r 3  85 rr                        sta scratch     ; this is the new ud-lo
002872r 3  A5 rr                        lda scratch+1   ; ud-lo MSB
002874r 3  65 rr                        adc scratch+5   ; n MSB
002876r 3  85 rr                        sta scratch+1
002878r 3               
002878r 3  A5 rr                        lda scratch+2   ; LSB
00287Ar 3  65 rr                        adc scratch+6
00287Cr 3  85 rr                        sta scratch+2   ; this is the new ud-hi
00287Er 3  A5 rr                        lda scratch+3   ; MSB
002880r 3  65 rr                        adc scratch+7
002882r 3  85 rr                        sta scratch+3
002884r 3               
002884r 3                               ; Clean up: Get rid of one of the two top elements on
002884r 3                               ; the Data Stack. We don't really care which one
002884r 3  E8                           inx
002885r 3  E8                           inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
002886r 3               
002886r 3                               ; One character down. Move address up
002886r 3  F6 04                        inc 4,x
002888r 3  D0 02                        bne @1
00288Ar 3  F6 05                        inc 5,x
00288Cr 3               @1:
00288Cr 3                               ; Decrease counter
00288Cr 3  D6 02                        dec 2,x
00288Er 3  D0 88                        bne @loop
002890r 3               
002890r 3               @done:
002890r 3                               ; Counter has reached zero or we have an error. In both
002890r 3                               ; cases, we clean up the Data Stack and return. Error gives
002890r 3                               ; us ( ud-lo ud-hi addr u char ), regular end is
002890r 3                               ; ( ud-lo ud-hi addr u ud-lo )
002890r 3  E8                           inx
002891r 3  E8                           inx             ; ( ud-lo ud-hi addr u )
002892r 3               
002892r 3                               ; The new ud-lo and ud-hi are still on the scratch pad
002892r 3  A5 rr                        lda scratch     ; new ud-lo
002894r 3  95 06                        sta 6,x
002896r 3  A5 rr                        lda scratch+1
002898r 3  95 07                        sta 7,x
00289Ar 3               
00289Ar 3  A5 rr                        lda scratch+2
00289Cr 3  95 04                        sta 4,x
00289Er 3  A5 rr                        lda scratch+3
0028A0r 3  95 05                        sta 5,x
0028A2r 3               
0028A2r 3  60           z_to_number:    rts
0028A3r 3               
0028A3r 3               
0028A3r 3               
0028A3r 3               ; ## TO_ORDER ( wid -- ) "Add wordlist at beginning of search order"
0028A3r 3               ; ## ">order"  tested  Gforth search
0028A3r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html"""
0028A3r 3               
0028A3r 3               xt_to_order:
0028A3r 3                               ; Put the wid on the return stack for now.
0028A3r 3  20 rr rr                     jsr xt_to_r
0028A6r 3               
0028A6r 3                               ; Get the current search order.
0028A6r 3  20 rr rr                     jsr xt_get_order
0028A9r 3               
0028A9r 3                               ; Get back the wid and add it to the list.
0028A9r 3  20 rr rr                     jsr xt_r_from
0028ACr 3  20 rr rr                     jsr xt_swap
0028AFr 3  20 rr rr                     jsr xt_one_plus
0028B2r 3               
0028B2r 3                               ; Set the search order with the new list.
0028B2r 3  20 rr rr                     jsr xt_set_order
0028B5r 3               
0028B5r 3  60           z_to_order:     rts
0028B6r 3               
0028B6r 3               
0028B6r 3               
0028B6r 3               ; ## TO_R ( n -- )(R: -- n) "Push TOS to the Return Stack"
0028B6r 3               ; ## ">r"  auto  ANS core
0028B6r 3                       ; """https://forth-standard.org/standard/core/toR
0028B6r 3                       ; This word is handled differently for native and for
0028B6r 3                       ; subroutine coding, see `COMPILE,`. This is a complile-only
0028B6r 3                       ; word.
0028B6r 3                       ; """
0028B6r 3               xt_to_r:
0028B6r 3                               ; Save the return address. If this word is natively
0028B6r 3                               ; coded, this is a complete waste of cycles, but
0028B6r 3                               ; required for subroutine coding
0028B6r 3  68                           pla             ; LSB
0028B7r 3  85 rr                        sta tmptos
0028B9r 3  7A                           ply             ; MSB
0028BAr 3               
0028BAr 3                               ; --- CUT HERE FOR NATIVE CODING ---
0028BAr 3               
0028BAr 3                               ; We check for underflow in the second step, so we can
0028BAr 3                               ; strip off the stack thrashing for native compiling first
0028BAr 3  20 rr rr                     jsr underflow_1
0028BDr 3               
0028BDr 3                               ; now we can do the actual work
0028BDr 3  B5 01                        lda 1,x         ; MSB
0028BFr 3  48                           pha
0028C0r 3  B5 00                        lda 0,x         ; LSB
0028C2r 3  48                           pha
0028C3r 3               
0028C3r 3  E8                           inx
0028C4r 3  E8                           inx
0028C5r 3               
0028C5r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0028C5r 3               
0028C5r 3                               ; restore return address
0028C5r 3  5A                           phy             ; MSB
0028C6r 3  A5 rr                        lda tmptos
0028C8r 3  48                           pha             ; LSB
0028C9r 3               
0028C9r 3  60           z_to_r:         rts
0028CAr 3               
0028CAr 3               
0028CAr 3               ; ## TRUE ( -- f ) "Push TRUE flag to Data Stack"
0028CAr 3               ; ## "true"  auto  ANS core ext
0028CAr 3                       ; """https://forth-standard.org/standard/core/TRUE"""
0028CAr 3               xt_true:
0028CAr 3  CA                           dex
0028CBr 3  CA                           dex
0028CCr 3  A9 FF                        lda #$FF
0028CEr 3  95 00                        sta 0,x
0028D0r 3  95 01                        sta 1,x
0028D2r 3               
0028D2r 3  60           z_true:         rts
0028D3r 3               
0028D3r 3               
0028D3r 3               ; ## TUCK ( b a -- a b a ) "Copy TOS below NOS"
0028D3r 3               ; ## "tuck"  auto  ANS core ext
0028D3r 3                       ; """https://forth-standard.org/standard/core/TUCK"""
0028D3r 3               xt_tuck:
0028D3r 3  20 rr rr                     jsr underflow_2
0028D6r 3               
0028D6r 3  CA                           dex
0028D7r 3  CA                           dex
0028D8r 3               
0028D8r 3  B4 04                        ldy 4,x         ; LSB
0028DAr 3  B5 02                        lda 2,x
0028DCr 3  95 04                        sta 4,x
0028DEr 3  94 02                        sty 2,x
0028E0r 3  95 00                        sta 0,x
0028E2r 3               
0028E2r 3  B4 05                        ldy 5,x         ; MSB
0028E4r 3  B5 03                        lda 3,x
0028E6r 3  95 05                        sta 5,x
0028E8r 3  94 03                        sty 3,x         ; bba
0028EAr 3  95 01                        sta 1,x         ; baa
0028ECr 3               
0028ECr 3  60           z_tuck:         rts
0028EDr 3               
0028EDr 3               
0028EDr 3               ; ## TWO ( -- u ) "Push the number 2 to stack"
0028EDr 3               ; ## "2"  auto  Tali Forth
0028EDr 3                       ;
0028EDr 3                       ; This code is shared with ASSEMBLER-WORDLIST
0028EDr 3               xt_assembler_wordlist:
0028EDr 3               xt_two:
0028EDr 3  CA                           dex
0028EEr 3  CA                           dex
0028EFr 3  A9 02                        lda #2
0028F1r 3  95 00                        sta 0,x
0028F3r 3  74 01                        stz 1,x
0028F5r 3               
0028F5r 3               z_assembler_wordlist:
0028F5r 3  60           z_two:          rts
0028F6r 3               
0028F6r 3               
0028F6r 3               ; ## TWO_DROP ( n n -- ) "Drop TOS and NOS"
0028F6r 3               ; ## "2drop"  auto  ANS core
0028F6r 3                       ; """https://forth-standard.org/standard/core/TwoDROP"""
0028F6r 3               xt_two_drop:
0028F6r 3  20 rr rr                     jsr underflow_2
0028F9r 3               
0028F9r 3  E8                           inx
0028FAr 3  E8                           inx
0028FBr 3  E8                           inx
0028FCr 3  E8                           inx
0028FDr 3               
0028FDr 3  60           z_two_drop:     rts
0028FEr 3               
0028FEr 3               
0028FEr 3               ; ## TWO_DUP ( a b -- a b a b ) "Duplicate first two stack elements"
0028FEr 3               ; ## "2dup"  auto  ANS core
0028FEr 3                       ; """https://forth-standard.org/standard/core/TwoDUP"""
0028FEr 3               xt_two_dup:
0028FEr 3  20 rr rr                     jsr underflow_2
002901r 3               
002901r 3  CA                           dex
002902r 3  CA                           dex
002903r 3  CA                           dex
002904r 3  CA                           dex
002905r 3               
002905r 3  B5 04                        lda 4,x         ; TOS
002907r 3  95 00                        sta 0,x
002909r 3  B5 05                        lda 5,x
00290Br 3  95 01                        sta 1,x
00290Dr 3               
00290Dr 3  B5 06                        lda 6,x         ; NOS
00290Fr 3  95 02                        sta 2,x
002911r 3  B5 07                        lda 7,x
002913r 3  95 03                        sta 3,x
002915r 3               
002915r 3  60           z_two_dup:      rts
002916r 3               
002916r 3               
002916r 3               ; ## TWO_FETCH ( addr -- n1 n2 ) "Fetch the cell pair n1 n2 stored at addr"
002916r 3               ; ## "2@"  auto  ANS core
002916r 3                       ; """https://forth-standard.org/standard/core/TwoFetch
002916r 3                       ; Note n2 stored at addr and n1 in the next cell -- in our case,
002916r 3                       ; the next two bytes. This is equvalent to  `DUP CELL+ @ SWAP @`
002916r 3                       ; """
002916r 3               xt_two_fetch:
002916r 3  20 rr rr                     jsr underflow_1
002919r 3               
002919r 3  B5 00                        lda 0,x
00291Br 3  85 rr                        sta tmp1
00291Dr 3  B4 01                        ldy 1,x
00291Fr 3  84 rr                        sty tmp1+1
002921r 3               
002921r 3  CA                           dex             ; reuse one stack element
002922r 3  CA                           dex
002923r 3               
002923r 3  B2 rr                        lda (tmp1)      ; copy LSB
002925r 3  95 00                        sta 0,x
002927r 3  A0 01                        ldy #1          ; copy next
002929r 3  B1 rr                        lda (tmp1),y
00292Br 3  95 01                        sta 1,x
00292Dr 3  C8                           iny             ; copy next
00292Er 3  B1 rr                        lda (tmp1),y
002930r 3  95 02                        sta 2,x
002932r 3  C8                           iny             ; copy next
002933r 3  B1 rr                        lda (tmp1),y
002935r 3  95 03                        sta 3,x
002937r 3               
002937r 3  60           z_two_fetch:    rts
002938r 3               
002938r 3               ; ## TWO_OVER ( d1 d2 -- d1 d2 d1 ) "Copy double word NOS to TOS"
002938r 3               ; ## "2over"  auto  ANS core
002938r 3                       ; """https://forth-standard.org/standard/core/TwoOVER"""
002938r 3               xt_two_over:
002938r 3  20 rr rr                     jsr underflow_4
00293Br 3               
00293Br 3  CA                           dex
00293Cr 3  CA                           dex
00293Dr 3  CA                           dex
00293Er 3  CA                           dex
00293Fr 3               
00293Fr 3  B5 08                        lda 8,x
002941r 3  95 00                        sta 0,x
002943r 3               
002943r 3  B5 09                        lda 9,x
002945r 3  95 01                        sta 1,x
002947r 3               
002947r 3  B5 0A                        lda 10,x
002949r 3  95 02                        sta 2,x
00294Br 3               
00294Br 3  B5 0B                        lda 11,x
00294Dr 3  95 03                        sta 3,x
00294Fr 3               
00294Fr 3  60           z_two_over:     rts
002950r 3               
002950r 3               
002950r 3               ; ## TWO_R_FETCH ( -- n n ) "Copy top two entries from Return Stack"
002950r 3               ; ## "2r@"  auto  ANS core ext
002950r 3                       ; """https://forth-standard.org/standard/core/TwoRFetch
002950r 3                       ;
002950r 3                       ; This is R> R> 2DUP >R >R SWAP but we can do it a lot faster in
002950r 3                       ; assembler. We use trickery to access the elements on the Return
002950r 3                       ; Stack instead of pulling the return address first and storing
002950r 3                       ; it somewhere else like for 2R> and 2>R. In this version, we leave
002950r 3                       ; it as Never Native; at some point, we should compare versions to
002950r 3                       ; see if an Always Native version would be better
002950r 3                       ; """
002950r 3               xt_two_r_fetch:
002950r 3               		; make room on the Data Stack
002950r 3  CA                           dex
002951r 3  CA                           dex
002952r 3  CA                           dex
002953r 3  CA                           dex
002954r 3               
002954r 3                               ; Get four bytes off of Return Stack. This assumes that
002954r 3                               ; we took a subroutine jump here so the first two entries
002954r 3                               ; are the return address
002954r 3  8A                           txa
002955r 3  BA                           tsx
002956r 3  DA                           phx             ; 65c02 has no TXY, so do it the hard way
002957r 3  7A                           ply
002958r 3  AA                           tax
002959r 3               
002959r 3                               ; The Return Stack addreses $0101 and $0102 are occupied by
002959r 3                               ; the return address for this word. This is a whole lot
002959r 3                               ; easier on the 65816
002959r 3  B9 03 01                     lda $0103,y     ; LSB of top entry
00295Cr 3  95 00                        sta 0,x
00295Er 3  B9 04 01                     lda $0104,y     ; MSB of top entry
002961r 3  95 01                        sta 1,x
002963r 3  B9 05 01                     lda $0105,y     ; LSB of bottom entry
002966r 3  95 02                        sta 2,x
002968r 3  B9 06 01                     lda $0106,y     ; MSB of top entry
00296Br 3  95 03                        sta 3,x
00296Dr 3               
00296Dr 3  60           z_two_r_fetch:  rts
00296Er 3               
00296Er 3               
00296Er 3               ; ## TWO_R_FROM ( -- n1 n2 ) (R: n1 n2 -- ) "Pull two cells from Return Stack"
00296Er 3               ; ## "2r>"  auto  ANS core ext
00296Er 3               	    ; """https://forth-standard.org/standard/core/TwoRfrom
00296Er 3                       ; Pull top two entries from Return Stack.
00296Er 3                       ;
00296Er 3                       ; Is the same as
00296Er 3                       ; R> R> SWAP. As with R>, the problem with the is word is that
00296Er 3                       ; the top value on the ReturnStack for a STC Forth is the
00296Er 3                       ; return address, which we need to get out of the way first.
00296Er 3                       ; Native compile needs to be handled as a special case.
00296Er 3                       ; """
00296Er 3               xt_two_r_from:
00296Er 3                               ; save the return address
00296Er 3  68                           pla                     ; LSB
00296Fr 3  85 rr                        sta tmp1
002971r 3  68                           pla                     ; MSB
002972r 3  85 rr                        sta tmp1+1
002974r 3               
002974r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002974r 3               
002974r 3               		; make room on stack
002974r 3  CA                           dex
002975r 3  CA                           dex
002976r 3  CA                           dex
002977r 3  CA                           dex
002978r 3               
002978r 3                               ; In theory, we should test for underflow on the Return
002978r 3                               ; Stack. However, given the traffic there with an STC
002978r 3                               ; Forth, that's probably not really useful
002978r 3               
002978r 3                               ; now we can access the data
002978r 3  68                           pla                     ; LSB
002979r 3  95 00                        sta 0,x
00297Br 3  68                           pla                     ; MSB
00297Cr 3  95 01                        sta 1,x
00297Er 3               
00297Er 3  68                           pla                     ; LSB
00297Fr 3  95 02                        sta 2,x
002981r 3  68                           pla                     ; MSB
002982r 3  95 03                        sta 3,x
002984r 3               
002984r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002984r 3               
002984r 3                               ; restore return address
002984r 3  A5 rr                        lda tmp1+1              ; MSB
002986r 3  48                           pha
002987r 3  A5 rr                        lda tmp1                ; LSB
002989r 3  48                           pha
00298Ar 3               
00298Ar 3  60           z_two_r_from:   rts
00298Br 3               
00298Br 3               
00298Br 3               ; ## TWO_SLASH ( n -- n ) "Divide TOS by two"
00298Br 3               ; ## "2/"  auto  ANS core
00298Br 3                       ; """https://forth-standard.org/standard/core/TwoDiv"""
00298Br 3               xt_two_slash:
00298Br 3  20 rr rr                     jsr underflow_1
00298Er 3               
00298Er 3                               ; We can't just LSR the LSB and ROR the MSB because that
00298Er 3                               ; would do bad things to the sign
00298Er 3  B5 01                        lda 1,x
002990r 3  0A                           asl                     ; save the sign
002991r 3  76 01                        ror 1,x
002993r 3  76 00                        ror 0,x
002995r 3               
002995r 3  60           z_two_slash:    rts
002996r 3               
002996r 3               
002996r 3               ; ## TWO_STAR ( n -- n ) "Multiply TOS by two"
002996r 3               ; ## "2*"  auto  ANS core
002996r 3                       ; """https://forth-standard.org/standard/core/TwoTimes
002996r 3                       ;
002996r 3                       ; Also used for CELLS
002996r 3                       ; """
002996r 3               xt_two_star:
002996r 3               xt_cells:
002996r 3  20 rr rr                     jsr underflow_1
002999r 3               
002999r 3  16 00                        asl 0,x
00299Br 3  36 01                        rol 1,x
00299Dr 3               z_cells:
00299Dr 3  60           z_two_star:     rts
00299Er 3               
00299Er 3               
00299Er 3               ; ## TWO_STORE ( n1 n2 addr -- ) "Store two numbers at given address"
00299Er 3               ; ## "2!"  auto  ANS core
00299Er 3                       ; """https://forth-standard.org/standard/core/TwoStore
00299Er 3                       ; Stores so n2 goes to addr and n1 to the next consecutive cell.
00299Er 3                       ; Is equivalent to  `SWAP OVER ! CELL+ !`
00299Er 3                       ; """
00299Er 3               xt_two_store:
00299Er 3  20 rr rr                     jsr underflow_3
0029A1r 3               
0029A1r 3  B5 00                        lda 0,x
0029A3r 3  85 rr                        sta tmp1
0029A5r 3  B4 01                        ldy 1,x
0029A7r 3  84 rr                        sty tmp1+1
0029A9r 3               
0029A9r 3  E8                           inx
0029AAr 3  E8                           inx
0029ABr 3               
0029ABr 3  B5 00                        lda 0,x         ; copy MSB
0029ADr 3  92 rr                        sta (tmp1)
0029AFr 3  B5 01                        lda 1,x         ; copy next
0029B1r 3  A0 01                        ldy #1
0029B3r 3  91 rr                        sta (tmp1),y
0029B5r 3  B5 02                        lda 2,x         ; copy next
0029B7r 3  C8                           iny
0029B8r 3  91 rr                        sta (tmp1),y
0029BAr 3  B5 03                        lda 3,x         ; copy MSB
0029BCr 3  C8                           iny
0029BDr 3  91 rr                        sta (tmp1),y
0029BFr 3               
0029BFr 3  E8                           inx             ; 2DROP
0029C0r 3  E8                           inx
0029C1r 3  E8                           inx
0029C2r 3  E8                           inx
0029C3r 3               
0029C3r 3  60           z_two_store:    rts
0029C4r 3               
0029C4r 3               
0029C4r 3               ; ## TWO_SWAP ( n1 n2 n3 n4 -- n3 n4 n1 n1 ) "Exchange two double words"
0029C4r 3               ; ## "2swap"  auto  ANS core
0029C4r 3                       ; """https://forth-standard.org/standard/core/TwoSWAP"""
0029C4r 3               xt_two_swap:
0029C4r 3  20 rr rr                     jsr underflow_4
0029C7r 3               
0029C7r 3                               ; 0 <-> 4
0029C7r 3  B5 00                        lda 0,x
0029C9r 3  B4 04                        ldy 4,x
0029CBr 3  95 04                        sta 4,x
0029CDr 3  94 00                        sty 0,x
0029CFr 3               
0029CFr 3                               ; 1 <-> 5
0029CFr 3  B5 01                        lda 1,x
0029D1r 3  B4 05                        ldy 5,x
0029D3r 3  95 05                        sta 5,x
0029D5r 3  94 01                        sty 1,x
0029D7r 3               
0029D7r 3                               ; 2 <-> 6
0029D7r 3  B5 02                        lda 2,x
0029D9r 3  B4 06                        ldy 6,x
0029DBr 3  95 06                        sta 6,x
0029DDr 3  94 02                        sty 2,x
0029DFr 3               
0029DFr 3                               ; 3 <-> 7
0029DFr 3  B5 03                        lda 3,x
0029E1r 3  B4 07                        ldy 7,x
0029E3r 3  95 07                        sta 7,x
0029E5r 3  94 03                        sty 3,x
0029E7r 3               
0029E7r 3  60           z_two_swap:     rts
0029E8r 3               
0029E8r 3               
0029E8r 3               ; ## TWO_TO_R ( n1 n2 -- )(R: -- n1 n2 "Push top two entries to Return Stack"
0029E8r 3               ; ## "2>r"  auto  ANS core ext
0029E8r 3                       ; """https://forth-standard.org/standard/core/TwotoR
0029E8r 3                       ; Push top two entries to Return Stack.
0029E8r 3                       ;
0029E8r 3                       ; The same as SWAP >R >R
0029E8r 3                       ; except that if we jumped here, the return address will be in the
0029E8r 3                       ; way. May not be natively compiled unless we're clever and use
0029E8r 3                       ; special routines.
0029E8r 3                       ; """
0029E8r 3               xt_two_to_r:
0029E8r 3                               ; save the return address
0029E8r 3  68                           pla             ; LSB
0029E9r 3  85 rr                        sta tmp1
0029EBr 3  68                           pla             ; MSB
0029ECr 3  85 rr                        sta tmp1+1
0029EEr 3               
0029EEr 3                               ; --- CUT HERE FOR NATIVE CODING ---
0029EEr 3               
0029EEr 3  20 rr rr                     jsr underflow_2
0029F1r 3               
0029F1r 3                               ; now we can move the data
0029F1r 3  B5 03                        lda 3,x         ; MSB
0029F3r 3  48                           pha
0029F4r 3  B5 02                        lda 2,x         ; LSB
0029F6r 3  48                           pha
0029F7r 3               
0029F7r 3                               ; now we can move the data
0029F7r 3  B5 01                        lda 1,x         ; MSB
0029F9r 3  48                           pha
0029FAr 3  B5 00                        lda 0,x         ; LSB
0029FCr 3  48                           pha
0029FDr 3               
0029FDr 3  E8                           inx
0029FEr 3  E8                           inx
0029FFr 3  E8                           inx
002A00r 3  E8                           inx
002A01r 3               
002A01r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002A01r 3               
002A01r 3                               ; restore return address
002A01r 3  A5 rr                        lda tmp1+1      ; MSB
002A03r 3  48                           pha
002A04r 3  A5 rr                        lda tmp1        ; LSB
002A06r 3  48                           pha
002A07r 3               
002A07r 3  60           z_two_to_r:     rts
002A08r 3               
002A08r 3               
002A08r 3               ; ## TWO_CONSTANT (C: d "name" -- ) ( -- d) "Create a constant for a double word"
002A08r 3               ; ## "2constant"  auto  ANS double
002A08r 3                       ; """https://forth-standard.org/standard/double/TwoCONSTANT
002A08r 3                       ;
002A08r 3                       ; Based on the Forth code
002A08r 3                       ; : 2CONSTANT ( D -- )  CREATE SWAP , , DOES> DUP @ SWAP CELL+ @ ;
002A08r 3                       ; """
002A08r 3               xt_two_constant:
002A08r 3  20 rr rr                     jsr underflow_2
002A0Br 3               
002A0Br 3  20 rr rr                     jsr xt_create
002A0Er 3  20 rr rr                     jsr xt_swap
002A11r 3  20 rr rr                     jsr xt_comma
002A14r 3  20 rr rr                     jsr xt_comma
002A17r 3               
002A17r 3  20 rr rr                     jsr does_runtime    ; does> turns into these two routines.
002A1Ar 3  20 rr rr                     jsr dodoes
002A1Dr 3               
002A1Dr 3  20 rr rr                     jsr xt_dup
002A20r 3  20 rr rr                     jsr xt_fetch
002A23r 3  20 rr rr                     jsr xt_swap
002A26r 3  20 rr rr                     jsr xt_cell_plus
002A29r 3  20 rr rr                     jsr xt_fetch
002A2Cr 3               
002A2Cr 3  60           z_two_constant: rts
002A2Dr 3               
002A2Dr 3               
002A2Dr 3               ; ## TWO_LITERAL (C: d -- ) ( -- d) "Compile a literal double word"
002A2Dr 3               ; ## "2literal"  auto  ANS double
002A2Dr 3                       ; """https://forth-standard.org/standard/double/TwoLITERAL"""
002A2Dr 3                       ; Based on the Forth code
002A2Dr 3                       ; : 2LITERAL ( D -- ) SWAP POSTPONE LITERAL POSTPONE LITERAL ; IMMEDIATE
002A2Dr 3                       ; """
002A2Dr 3               xt_two_literal:
002A2Dr 3  20 rr rr                     jsr underflow_2 ; double number
002A30r 3               
002A30r 3  20 rr rr                     jsr xt_swap
002A33r 3  20 rr rr                     jsr xt_literal
002A36r 3  20 rr rr                     jsr xt_literal
002A39r 3               
002A39r 3  60           z_two_literal:  rts
002A3Ar 3               
002A3Ar 3               
002A3Ar 3               ; ## TWO_VARIABLE ( "name" -- ) "Create a variable for a double word"
002A3Ar 3               ; ## "2variable"  auto  ANS double
002A3Ar 3                       ; """https://forth-standard.org/standard/double/TwoVARIABLE
002A3Ar 3                       ; The variable is not initialized to zero.
002A3Ar 3                       ;
002A3Ar 3                       ; This can be realized in Forth as either
002A3Ar 3                       ; CREATE 2 CELLS ALLOT  or just  CREATE 0 , 0 ,
002A3Ar 3                       ; """
002A3Ar 3               xt_two_variable:
002A3Ar 3                               ; We just let CRATE and ALLOT do the heavy lifting
002A3Ar 3  20 rr rr                     jsr xt_create
002A3Dr 3               
002A3Dr 3  CA                           dex
002A3Er 3  CA                           dex
002A3Fr 3  A9 04                        lda #4
002A41r 3  95 00                        sta 0,x
002A43r 3  74 01                        stz 1,x
002A45r 3               
002A45r 3  20 rr rr                     jsr xt_allot
002A48r 3               
002A48r 3  60           z_two_variable: rts
002A49r 3               
002A49r 3               
002A49r 3               ; ## TYPE ( addr u -- ) "Print string"
002A49r 3               ; ## "type"  auto  ANS core
002A49r 3                       ; """https://forth-standard.org/standard/core/TYPE
002A49r 3                       ; Works through EMIT to allow OUTPUT revectoring.
002A49r 3                       ; """
002A49r 3               
002A49r 3               xt_type:
002A49r 3  20 rr rr                     jsr underflow_2
002A4Cr 3               
002A4Cr 3                               ; Save the starting address into tmp1
002A4Cr 3  B5 02                        lda 2,x
002A4Er 3  85 rr                        sta tmp1
002A50r 3  B5 03                        lda 3,x
002A52r 3  85 rr                        sta tmp1+1
002A54r 3               @loop:
002A54r 3                               ; done if length is zero
002A54r 3  B5 00                        lda 0,x
002A56r 3  15 01                        ora 1,x
002A58r 3  F0 15                        beq @done
002A5Ar 3               
002A5Ar 3                               ; Send the current character
002A5Ar 3  B2 rr                        lda (tmp1)
002A5Cr 3  20 rr rr                     jsr emit_a      ; avoids stack foolery
002A5Fr 3               
002A5Fr 3                               ; Move the address along (in tmp1)
002A5Fr 3  E6 rr                        inc tmp1
002A61r 3  D0 02                        bne @1
002A63r 3  E6 rr                        inc tmp1+1
002A65r 3               @1:
002A65r 3                               ; Reduce the count (on the data stack)
002A65r 3  B5 00                        lda 0,x
002A67r 3  D0 02                        bne @2
002A69r 3  D6 01                        dec 1,x
002A6Br 3               @2:
002A6Br 3  D6 00                        dec 0,x
002A6Dr 3               
002A6Dr 3  80 E5                        bra @loop
002A6Fr 3               @done:
002A6Fr 3  E8                           inx
002A70r 3  E8                           inx
002A71r 3  E8                           inx
002A72r 3  E8                           inx
002A73r 3               
002A73r 3  60           z_type:         rts
002A74r 3               
002A74r 3               
002A74r 3               
002A74r 3               ; ## U_DOT ( u -- ) "Print TOS as unsigned number"
002A74r 3               ; ## "u."  tested  ANS core
002A74r 3                       ; """https://forth-standard.org/standard/core/Ud
002A74r 3                       ;
002A74r 3                       ; This is : U. 0 <# #S #> TYPE SPACE ; in Forth
002A74r 3                       ; We use the internal assembler function print_u followed
002A74r 3                       ; by a single space
002A74r 3                       ; """
002A74r 3               xt_u_dot:
002A74r 3  20 rr rr                     jsr underflow_1
002A77r 3               
002A77r 3  20 rr rr                     jsr print_u
002A7Ar 3  A9 20                        lda #AscSP
002A7Cr 3  20 rr rr                     jsr emit_a
002A7Fr 3               
002A7Fr 3  60           z_u_dot:        rts
002A80r 3               
002A80r 3               
002A80r 3               ; ## U_DOT_R ( u u -- ) "Print NOS as unsigned number right-justified with TOS width"
002A80r 3               ; ## "u.r"  tested  ANS core ext
002A80r 3                       ; """https://forth-standard.org/standard/core/UDotR"""
002A80r 3               xt_u_dot_r:
002A80r 3  20 rr rr                     jsr underflow_2
002A83r 3               
002A83r 3  20 rr rr                     jsr xt_to_r
002A86r 3  20 rr rr                     jsr xt_zero
002A89r 3  20 rr rr                     jsr xt_less_number_sign
002A8Cr 3  20 rr rr                     jsr xt_number_sign_s
002A8Fr 3  20 rr rr                     jsr xt_number_sign_greater
002A92r 3  20 rr rr                     jsr xt_r_from
002A95r 3  20 rr rr                     jsr xt_over
002A98r 3  20 rr rr                     jsr xt_minus
002A9Br 3  20 rr rr                     jsr xt_spaces
002A9Er 3  20 rr rr                     jsr xt_type
002AA1r 3               
002AA1r 3  60           z_u_dot_r:      rts
002AA2r 3               
002AA2r 3               
002AA2r 3               ; ## U_GREATER_THAN ( n m -- f ) "Return true if NOS > TOS (unsigned)"
002AA2r 3               ; ## "u>"  auto  ANS core ext
002AA2r 3                       ; """https://forth-standard.org/standard/core/Umore"""
002AA2r 3               xt_u_greater_than:
002AA2r 3  20 rr rr                     jsr underflow_2
002AA5r 3               
002AA5r 3  B5 00                        lda 0,x
002AA7r 3  D5 02                        cmp 2,x
002AA9r 3  B5 01                        lda 1,x
002AABr 3  F5 03                        sbc 3,x
002AADr 3  E8                           inx
002AAEr 3  E8                           inx
002AAFr 3               
002AAFr 3  A9 00                        lda #0
002AB1r 3  69 FF                        adc #$ff
002AB3r 3  95 00                        sta 0,x         ; store flag
002AB5r 3  95 01                        sta 1,x
002AB7r 3               
002AB7r 3  60           z_u_greater_than:    rts
002AB8r 3               
002AB8r 3               ; ## U_LESS_THAN ( n m -- f ) "Return true if NOS < TOS (unsigned)"
002AB8r 3               ; ## "u<"  auto  ANS core
002AB8r 3                       ; """https://forth-standard.org/standard/core/Uless"""
002AB8r 3               xt_u_less_than:
002AB8r 3  20 rr rr                     jsr underflow_2
002ABBr 3               
002ABBr 3  B5 02                        lda 2,x
002ABDr 3  D5 00                        cmp 0,x
002ABFr 3  B5 03                        lda 3,x
002AC1r 3  F5 01                        sbc 1,x
002AC3r 3  E8                           inx
002AC4r 3  E8                           inx
002AC5r 3               
002AC5r 3  A9 00                        lda #0
002AC7r 3  69 FF                        adc #$ff
002AC9r 3  95 00                        sta 0,x         ; store flag
002ACBr 3  95 01                        sta 1,x
002ACDr 3               
002ACDr 3  60           z_u_less_than:    rts
002ACEr 3               
002ACEr 3               
002ACEr 3               ; ## UD_DOT ( d -- ) "Print double as unsigned"
002ACEr 3               ; ## "ud."  auto  Tali double
002ACEr 3                       ;
002ACEr 3                       ; """Based on the Forth code  : UD. <# #S #> TYPE SPACE ;
002ACEr 3                       ; """
002ACEr 3               xt_ud_dot:
002ACEr 3  20 rr rr                     jsr underflow_2 ; double number
002AD1r 3               
002AD1r 3  20 rr rr                     jsr xt_less_number_sign
002AD4r 3  20 rr rr                     jsr xt_number_sign_s
002AD7r 3  20 rr rr                     jsr xt_number_sign_greater
002ADAr 3  20 rr rr                     jsr xt_type
002ADDr 3  20 rr rr                     jsr xt_space
002AE0r 3               
002AE0r 3  60           z_ud_dot:        rts
002AE1r 3               
002AE1r 3               
002AE1r 3               ; ## UD_DOT_R ( d u -- ) "Print unsigned double right-justified u wide"
002AE1r 3               ; ## "ud.r"  auto  Tali double
002AE1r 3                       ;
002AE1r 3                       ; """Based on the Forth code : UD.R  >R <# #S #> R> OVER - SPACES TYPE ;
002AE1r 3                       ; """
002AE1r 3               xt_ud_dot_r:
002AE1r 3  20 rr rr                     jsr underflow_3
002AE4r 3               
002AE4r 3  20 rr rr                     jsr xt_to_r
002AE7r 3  20 rr rr                     jsr xt_less_number_sign
002AEAr 3  20 rr rr                     jsr xt_number_sign_s
002AEDr 3  20 rr rr                     jsr xt_number_sign_greater
002AF0r 3  20 rr rr                     jsr xt_r_from
002AF3r 3  20 rr rr                     jsr xt_over
002AF6r 3  20 rr rr                     jsr xt_minus
002AF9r 3  20 rr rr                     jsr xt_spaces
002AFCr 3  20 rr rr                     jsr xt_type
002AFFr 3               
002AFFr 3  60           z_ud_dot_r:      rts
002B00r 3               
002B00r 3               
002B00r 3               ; ## UM_SLASH_MOD ( ud u -- ur u ) "32/16 -> 16 division"
002B00r 3               ; ## "um/mod"  auto  ANS core
002B00r 3                       ; """https://forth-standard.org/standard/core/UMDivMOD
002B00r 3                       ; Divide double cell number by single cell number, returning the
002B00r 3                       ; quotient as TOS and any remainder as NOS. All numbers are unsigned.
002B00r 3                       ; This is the basic division operation all others use. Based on FIG
002B00r 3                       ; Forth code, modified by Garth Wilson, see
002B00r 3                       ; http://6502.org/source/integers/ummodfix/ummodfix.htm
002B00r 3                       ;
002B00r 3                       ; This uses tmp1, tmp1+1, and tmptos
002B00r 3                       ; """
002B00r 3               
002B00r 3               xt_um_slash_mod:
002B00r 3  20 rr rr                     jsr underflow_3
002B03r 3               
002B03r 3                               ; catch division by zero
002B03r 3  B5 00                        lda 0,x
002B05r 3  15 01                        ora 1,x
002B07r 3  D0 05                        bne @not_zero
002B09r 3               
002B09r 3  A9 04                        lda #err_divzero
002B0Br 3  4C rr rr                     jmp error
002B0Er 3               
002B0Er 3               @not_zero:
002B0Er 3                               ; We loop 17 times
002B0Er 3  A9 11                        lda #17
002B10r 3  85 rr                        sta tmptos
002B12r 3               
002B12r 3               @loop:
002B12r 3                               ; rotate low cell of dividend one bit left (LSB)
002B12r 3  36 04                        rol 4,x
002B14r 3  36 05                        rol 5,x
002B16r 3               
002B16r 3                               ; loop control
002B16r 3  C6 rr                        dec tmptos
002B18r 3  F0 22                        beq @done
002B1Ar 3               
002B1Ar 3                               ; rotate high cell of dividend one bit left (MSB)
002B1Ar 3  36 02                        rol 2,x
002B1Cr 3  36 03                        rol 3,x
002B1Er 3               
002B1Er 3  64 rr                        stz tmp1        ; store the bit we got from hi cell (MSB)
002B20r 3  26 rr                        rol tmp1
002B22r 3               
002B22r 3                               ; subtract dividend hi cell minus divisor
002B22r 3  38                           sec
002B23r 3  B5 02                        lda 2,x
002B25r 3  F5 00                        sbc 0,x
002B27r 3  85 rr                        sta tmp1+1
002B29r 3  B5 03                        lda 3,x
002B2Br 3  F5 01                        sbc 1,x
002B2Dr 3               
002B2Dr 3  A8                           tay
002B2Er 3  A5 rr                        lda tmp1
002B30r 3  E9 00                        sbc #0
002B32r 3  90 DE                        bcc @loop
002B34r 3               
002B34r 3                               ; make result new dividend high cell
002B34r 3  A5 rr                        lda tmp1+1
002B36r 3  95 02                        sta 2,x
002B38r 3  94 03                        sty 3,x         ; used as temp storage
002B3Ar 3               
002B3Ar 3  80 D6                        bra @loop
002B3Cr 3               @done:
002B3Cr 3  E8                           inx
002B3Dr 3  E8                           inx
002B3Er 3               
002B3Er 3  20 rr rr                     jsr xt_swap
002B41r 3               
002B41r 3  60           z_um_slash_mod: rts
002B42r 3               
002B42r 3               
002B42r 3               
002B42r 3               ; ## UM_STAR ( u u -- ud ) "Multiply 16 x 16 -> 32"
002B42r 3               ; ## "um*"  auto  ANS core
002B42r 3                       ; """https://forth-standard.org/standard/core/UMTimes
002B42r 3                       ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.
002B42r 3                       ; Old Forth versions such as FIG Forth call this U*
002B42r 3                       ;
002B42r 3                       ; This is based on modified FIG Forth code by Dr. Jefyll, see
002B42r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed
002B42r 3                       ; discussion.
002B42r 3                       ;
002B42r 3                       ; We don't use the system scratch pad (SYSPAD) for temp
002B42r 3                       ; storage because >NUMBER uses it as well, but instead tmp1 to
002B42r 3                       ; tmp3 (tmp1 is N in the original code, tmp1+1 is N+1, etc).
002B42r 3                       ;
002B42r 3                       ; Consider switching to a table-supported version based on
002B42r 3                       ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
002B42r 3                       ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d>
002B42r 3                       ; http://forum.6502.org/viewtopic.php?p=205#p205
002B42r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689
002B42r 3                       ; """
002B42r 3               
002B42r 3               xt_um_star:
002B42r 3  20 rr rr                     jsr underflow_2
002B45r 3               
002B45r 3                               ; to eliminate clc inside the loop, the value at
002B45r 3                               ; tmp1 is reduced by 1 in advance
002B45r 3  18                           clc
002B46r 3  B5 00                        lda 0,x         ; copy TOS to tmp2
002B48r 3  E9 00                        sbc #0
002B4Ar 3  85 rr                        sta tmp2
002B4Cr 3               
002B4Cr 3  B5 01                        lda 1,x
002B4Er 3  E9 00                        sbc #0
002B50r 3  90 31                        bcc @zero       ; is TOS zero?
002B52r 3  85 rr                        sta tmp2+1
002B54r 3               
002B54r 3  A9 00                        lda #0
002B56r 3  85 rr                        sta tmp1
002B58r 3  86 rr                        stx tmp3        ; tested for exit from outer loop
002B5Ar 3  CA                           dex
002B5Br 3  CA                           dex
002B5Cr 3               
002B5Cr 3               @outer_loop:
002B5Cr 3  A0 08                        ldy #8          ; counter inner loop
002B5Er 3  56 04                        lsr 4,x         ; think "2,x" then later "3,x"
002B60r 3               
002B60r 3               @inner_loop:
002B60r 3  90 0C                        bcc @no_add
002B62r 3  85 rr                        sta tmp1+1      ; save time, don't CLC
002B64r 3  A5 rr                        lda tmp1
002B66r 3  65 rr                        adc tmp2
002B68r 3  85 rr                        sta tmp1
002B6Ar 3  A5 rr                        lda tmp1+1
002B6Cr 3  65 rr                        adc tmp2+1
002B6Er 3               
002B6Er 3               @no_add:
002B6Er 3  6A                           ror
002B6Fr 3  66 rr                        ror tmp1
002B71r 3  76 04                        ror 4,x         ; think "2,x" then later "3,x"
002B73r 3               
002B73r 3  88                           dey
002B74r 3  D0 EA                        bne @inner_loop ; go back for one more shift?
002B76r 3               
002B76r 3  E8                           inx
002B77r 3  E4 rr                        cpx tmp3
002B79r 3  D0 E1                        bne @outer_loop ; go back for eight more shifts?
002B7Br 3               
002B7Br 3                               ; all done, store high word of result
002B7Br 3  95 01                        sta 1,x
002B7Dr 3  A5 rr                        lda tmp1
002B7Fr 3  95 00                        sta 0,x
002B81r 3  80 04                        bra @done
002B83r 3               
002B83r 3               @zero:
002B83r 3  74 02                        stz 2,x
002B85r 3  74 03                        stz 3,x
002B87r 3               @done:
002B87r 3  60           z_um_star:      rts
002B88r 3               
002B88r 3               
002B88r 3               
002B88r 3               ; ## UNLOOP ( -- )(R: n1 n2 n3 ---) "Drop loop control from Return stack"
002B88r 3               ; ## "unloop"  auto  ANS core
002B88r 3                       ; """https://forth-standard.org/standard/core/UNLOOP
002B88r 3                       ;
002B88r 3                       ; Note that 6xPLA uses just as many bytes as a loop would
002B88r 3                       ; """
002B88r 3               xt_unloop:
002B88r 3                               ; Drop fudge number (limit/start from DO/?DO off the
002B88r 3                               ; return stack
002B88r 3  68                           pla
002B89r 3  68                           pla
002B8Ar 3  68                           pla
002B8Br 3  68                           pla
002B8Cr 3               
002B8Cr 3                               ; Now drop the LEAVE address that was below them off
002B8Cr 3                               ; the Return Stack as well
002B8Cr 3  68                           pla
002B8Dr 3  68                           pla
002B8Er 3               
002B8Er 3  60           z_unloop:       rts
002B8Fr 3               
002B8Fr 3               
002B8Fr 3               ; ## UNTIL (C: dest -- ) ( -- ) "Loop flow control"
002B8Fr 3               ; ## "until"  auto  ANS core
002B8Fr 3                       ; """http://forth-standard.org/standard/core/UNTIL"""
002B8Fr 3               xt_until:
002B8Fr 3                               ; Compile a 0BRANCH
002B8Fr 3  A0 rr                        ldy #>zero_branch_runtime
002B91r 3  A9 rr                        lda #<zero_branch_runtime
002B93r 3  20 rr rr                     jsr cmpl_subroutine
002B96r 3               
002B96r 3                               ; The address to loop back to is on the stack.
002B96r 3                               ; Just compile it as the destination for the
002B96r 3                               ; 0branch.
002B96r 3  20 rr rr                     jsr xt_comma
002B99r 3               
002B99r 3  60           z_until:        rts
002B9Ar 3               
002B9Ar 3               
002B9Ar 3               ; ## UNUSED ( -- u ) "Return size of space available to Dictionary"
002B9Ar 3               ; ## "unused"  auto  ANS core ext
002B9Ar 3                       ; """https://forth-standard.org/standard/core/UNUSED
002B9Ar 3                       ; UNUSED does not include the ACCEPT history buffers. Total RAM
002B9Ar 3                       ; should be HERE + UNUSED + <history buffer size>, the last of which
002B9Ar 3                       ; defaults to $400
002B9Ar 3                       ; """
002B9Ar 3               xt_unused:
002B9Ar 3  CA                           dex
002B9Br 3  CA                           dex
002B9Cr 3               
002B9Cr 3  A9 FF                        lda #<cp_end
002B9Er 3  38                           sec
002B9Fr 3  E5 rr                        sbc cp
002BA1r 3  95 00                        sta 0,x
002BA3r 3               
002BA3r 3  A9 7F                        lda #>cp_end
002BA5r 3  E5 rr                        sbc cp+1
002BA7r 3  95 01                        sta 1,x
002BA9r 3               
002BA9r 3  60           z_unused:       rts
002BAAr 3               
002BAAr 3               
002BAAr 3               ; ## UPDATE ( -- ) "Mark current block as dirty"
002BAAr 3               ; ## "update"  auto  ANS block
002BAAr 3                       ; """https://forth-standard.org/standard/block/UPDATE"""
002BAAr 3               xt_update:
002BAAr 3                               ; Turn on the dirty bit. We can't use TSB here because it only
002BAAr 3                               ; has Absolute and Direct Pages addressing modes
002BAAr 3  A0 2C                        ldy #buffstatus_offset
002BACr 3  B1 rr                        lda (up),y
002BAEr 3  09 02                        ora #2          ; Turn on dirty flag (bit 2)
002BB0r 3  91 rr                        sta (up),y
002BB2r 3               
002BB2r 3  60           z_update:       rts
002BB3r 3               
002BB3r 3               
002BB3r 3               ; ## USERADDR ( -- addr ) "Push address of base address of user variables"
002BB3r 3               ; ## "useraddr"  tested  Tali Forth
002BB3r 3               xt_useraddr:
002BB3r 3  CA                           dex
002BB4r 3  CA                           dex
002BB5r 3  A9 rr                        lda #<up
002BB7r 3  95 00                        sta 0,x
002BB9r 3  A9 rr                        lda #>up
002BBBr 3  95 01                        sta 1,x
002BBDr 3               
002BBDr 3  60           z_useraddr:     rts
002BBEr 3               
002BBEr 3               
002BBEr 3               ; ## VALUE ( n "name" -- ) "Define a value"
002BBEr 3               ; ## "value"  auto  ANS core
002BBEr 3                       ; """https://forth-standard.org/standard/core/VALUE
002BBEr 3                       ;
002BBEr 3                       ; This is a dummy header for the WORDLIST. The actual code is
002BBEr 3                       ; identical to that of CONSTANT
002BBEr 3                       ; """
002BBEr 3               
002BBEr 3               
002BBEr 3               ; ## VARIABLE ( "name" -- ) "Define a variable"
002BBEr 3               ; ## "variable"  auto  ANS core
002BBEr 3                       ; """https://forth-standard.org/standard/core/VARIABLE
002BBEr 3                       ; There are various Forth definitions for this word, such as
002BBEr 3                       ; `CREATE 1 CELLS ALLOT`  or  `CREATE 0 ,`  We use a variant of the
002BBEr 3                       ; second one so the variable is initialized to zero
002BBEr 3                       ; """
002BBEr 3               xt_variable:
002BBEr 3                               ; we let CREATE do the heavy lifting
002BBEr 3  20 rr rr                     jsr xt_create
002BC1r 3               
002BC1r 3                               ; there is no "STZ (CP)" so we have to do this the hard
002BC1r 3                               ; way
002BC1r 3  A9 00                        lda #0
002BC3r 3               
002BC3r 3  92 rr                        sta (cp)
002BC5r 3  E6 rr                        inc cp
002BC7r 3  D0 02                        bne @1
002BC9r 3  E6 rr                        inc cp+1
002BCBr 3               @1:
002BCBr 3  92 rr                        sta (cp)
002BCDr 3  E6 rr                        inc cp
002BCFr 3  D0 02                        bne @2
002BD1r 3  E6 rr                        inc cp+1
002BD3r 3               @2:
002BD3r 3                               ; Now we need to adjust the length of the complete word by two
002BD3r 3  20 rr rr                     jsr adjust_z
002BD6r 3               
002BD6r 3  60           z_variable:     rts
002BD7r 3               
002BD7r 3               
002BD7r 3               ; ## WHILE ( C: dest -- orig dest ) ( x -- ) "Loop flow control"
002BD7r 3               ; ## "while"  auto  ANS core
002BD7r 3                       ; """http://forth-standard.org/standard/core/WHILE"""
002BD7r 3               xt_while:
002BD7r 3                               ; Compile a 0branch
002BD7r 3  A0 rr                        ldy #>zero_branch_runtime
002BD9r 3  A9 rr                        lda #<zero_branch_runtime
002BDBr 3  20 rr rr                     jsr cmpl_subroutine
002BDEr 3               
002BDEr 3                               ; Put the address (here) where the destination
002BDEr 3                               ; address needs to go so it can be put there later.
002BDEr 3  20 rr rr                     jsr xt_here
002BE1r 3               
002BE1r 3                               ; Fill in the destination address with 0 for now.
002BE1r 3  20 rr rr                     jsr xt_zero
002BE4r 3  20 rr rr                     jsr xt_comma
002BE7r 3               
002BE7r 3                               ; Swap the two addresses on the stack.
002BE7r 3  20 rr rr                     jsr xt_swap
002BEAr 3               
002BEAr 3  60           z_while:        rts
002BEBr 3               
002BEBr 3               
002BEBr 3               ; ## WITHIN ( n1 n2 n3 -- ) "See if within a range"
002BEBr 3               ; ## "within"  auto  ANS core ext
002BEBr 3                       ; """https://forth-standard.org/standard/core/WITHIN
002BEBr 3                       ;
002BEBr 3                       ; This an assembler version of the ANS Forth implementation
002BEBr 3                       ; at https://forth-standard.org/standard/core/WITHIN which is
002BEBr 3                       ; OVER - >R - R> U<  note there is an alternative high-level version
002BEBr 3                       ; ROT TUCK > -ROT > INVERT AND
002BEBr 3                       ; """"
002BEBr 3               xt_within:
002BEBr 3  20 rr rr                     jsr underflow_3
002BEEr 3               
002BEEr 3  20 rr rr                     jsr xt_over
002BF1r 3  20 rr rr                     jsr xt_minus
002BF4r 3  20 rr rr                     jsr xt_to_r
002BF7r 3  20 rr rr                     jsr xt_minus
002BFAr 3  20 rr rr                     jsr xt_r_from
002BFDr 3  20 rr rr                     jsr xt_u_less_than
002C00r 3               
002C00r 3  60           z_within:       rts
002C01r 3               
002C01r 3               
002C01r 3               ; ## WORD ( char "name " -- caddr ) "Parse input stream"
002C01r 3               ; ## "word"  auto  ANS core
002C01r 3                       ; """https://forth-standard.org/standard/core/WORD
002C01r 3                       ; Obsolete parsing word included for backwards compatibility only.
002C01r 3                       ; Do not use this, use `PARSE` or `PARSE-NAME`. Skips leading delimiters
002C01r 3                       ; and copies word to storage area for a maximum size of 255 bytes.
002C01r 3                       ; Returns the result as a counted string (requires COUNT to convert
002C01r 3                       ; to modern format), and inserts a space after the string. See "Forth
002C01r 3                       ; Programmer's Handbook" 3rd edition p. 159 and
002C01r 3                       ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
002C01r 3                       ; for discussions of why you shouldn't be using WORD anymore.
002C01r 3                       ;
002C01r 3                       ; Forth
002C01r 3                       ; would be   PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
002C01r 3                       ; We only allow input of 255 chars. Seriously, use PARSE-NAME.
002C01r 3                       ; """
002C01r 3               
002C01r 3               xt_word:
002C01r 3  20 rr rr                     jsr underflow_1
002C04r 3               
002C04r 3                               ; Skip over leading delimiters - this is like PARSE-NAME,
002C04r 3                               ; but unlike PARSE
002C04r 3  A4 rr                        ldy toin                ; >IN
002C06r 3               @loop:
002C06r 3  C4 rr                        cpy ciblen              ; quit if end of input
002C08r 3  F0 09                        beq @found_char
002C0Ar 3  B1 rr                        lda (cib),y
002C0Cr 3  D5 00                        cmp 0,x                 ; ASCII of delimiter
002C0Er 3  D0 03                        bne @found_char
002C10r 3               
002C10r 3  C8                           iny
002C11r 3  80 F3                        bra @loop
002C13r 3               @found_char:
002C13r 3                               ; Save index of where word starts
002C13r 3  84 rr                        sty toin
002C15r 3               
002C15r 3                               ; The real work is done by parse
002C15r 3  20 rr rr                     jsr xt_parse            ; Returns ( addr u )
002C18r 3               
002C18r 3                               ; Convert the modern ( addr u ) string format to obsolete
002C18r 3                               ; ( caddr ) format. We just do this in the Dictionary
002C18r 3  B5 00                        lda 0,x
002C1Ar 3  92 rr                        sta (cp)                ; Save length of string
002C1Cr 3  48                           pha                     ; Keep copy of length for later
002C1Dr 3               
002C1Dr 3  20 rr rr                     jsr xt_dup              ; ( addr u u )
002C20r 3  A5 rr                        lda cp
002C22r 3  18                           clc
002C23r 3  69 01                        adc #1
002C25r 3  95 02                        sta 2,x                 ; LSB of CP
002C27r 3  A5 rr                        lda cp+1
002C29r 3  69 00                        adc #0
002C2Br 3  95 03                        sta 3,x                 ; ( addr cp+1 u )
002C2Dr 3               
002C2Dr 3  20 rr rr                     jsr xt_move
002C30r 3               
002C30r 3                               ; Return caddr
002C30r 3  CA                           dex
002C31r 3  CA                           dex
002C32r 3  A5 rr                        lda cp
002C34r 3  95 00                        sta 0,x
002C36r 3  A5 rr                        lda cp+1
002C38r 3  95 01                        sta 1,x
002C3Ar 3               
002C3Ar 3                               ; Adjust CP
002C3Ar 3  68                           pla                     ; length of string
002C3Br 3  18                           clc
002C3Cr 3  65 rr                        adc cp
002C3Er 3  85 rr                        sta cp
002C40r 3  A5 rr                        lda cp+1
002C42r 3  69 00                        adc #0                  ; we only need the carry
002C44r 3  85 rr                        sta cp+1
002C46r 3  60           z_word:         rts
002C47r 3               
002C47r 3               
002C47r 3               ; ## WORDLIST ( -- wid ) "Create new wordlist (from pool of 8)"
002C47r 3               ; ## "wordlist" auto ANS search
002C47r 3                       ; """https://forth-standard.org/standard/search/WORDLIST
002C47r 3                       ; See the tutorial on Wordlists and the Search Order for
002C47r 3                       ; more information.
002C47r 3                       ; """
002C47r 3               
002C47r 3               xt_wordlist:
002C47r 3                               ; Get the current number of wordlists
002C47r 3  A0 05                        ldy #num_wordlists_offset
002C49r 3  B1 rr                        lda (up),y      ; This is a byte variable, so only
002C4Br 3                                               ; the LSB needs to be checked.
002C4Br 3               
002C4Br 3                               ; See if we are already at the max.
002C4Br 3  C9 0C                        cmp #max_wordlists
002C4Dr 3  D0 05                        bne @ok
002C4Fr 3               
002C4Fr 3                               ; Print an error message if all wordlists used.
002C4Fr 3  A9 0B                        lda #err_wordlist
002C51r 3  4C rr rr                     jmp error
002C54r 3               
002C54r 3               @ok:
002C54r 3  1A                           inc             ; Increment the wordlist#
002C55r 3  91 rr                        sta (up),y      ; Save it into byte variable #wordlists
002C57r 3  CA                           dex             ; and put it on the stack.
002C58r 3  CA                           dex
002C59r 3  95 00                        sta 0,x
002C5Br 3  74 01                        stz 1,x         ; 12 is the max, so upper byte is always zero.
002C5Dr 3               
002C5Dr 3  60           z_wordlist:     rts
002C5Er 3               
002C5Er 3               
002C5Er 3               
002C5Er 3               ; ## WORDS ( -- ) "Print known words from Dictionary"
002C5Er 3               ; ## "words"  tested  ANS tools
002C5Er 3                       ; """https://forth-standard.org/standard/tools/WORDS
002C5Er 3                       ; This is pretty much only used at the command line so we can
002C5Er 3                       ; be slow and try to save space.
002C5Er 3                       ; """
002C5Er 3               
002C5Er 3               xt_words:
002C5Er 3                               ; we follow Gforth by starting on the next
002C5Er 3                               ; line
002C5Er 3  20 rr rr                     jsr xt_cr
002C61r 3               
002C61r 3                               ; We pretty-format the output by inserting a line break
002C61r 3                               ; before the end of the line. We can get away with pushing
002C61r 3                               ; the counter to the stack because this is usually an
002C61r 3                               ; interactive word and speed is not that important
002C61r 3  A9 00                        lda #0
002C63r 3  48                           pha
002C64r 3               
002C64r 3                               ; Set up for traversing the wordlist search order.
002C64r 3  CA                           dex                     ; Make room on the stack for
002C65r 3  CA                           dex                     ; a dictionary pointer.
002C66r 3  64 rr                        stz tmp3                ; Start at the beginning of
002C68r 3                                                       ; the search order.
002C68r 3               @wordlist_loop:
002C68r 3  A0 1E                        ldy #num_order_offset   ; Check against byte variable #ORDER.
002C6Ar 3  A5 rr                        lda tmp3
002C6Cr 3  D1 rr                        cmp (up),y              ; See if we are done.
002C6Er 3  D0 02                        bne @have_wordlist
002C70r 3               
002C70r 3                               ; We ran out of wordlists to search.
002C70r 3  80 44                        bra @words_done
002C72r 3               
002C72r 3               @have_wordlist:
002C72r 3                               ; start with last word in Dictionary
002C72r 3                               ; Get the current wordlist id
002C72r 3  18                           clc                     ; Index into byte array SEARCH-ORDER.
002C73r 3  69 1F                        adc #search_order_offset
002C75r 3  A8                           tay
002C76r 3  B1 rr                        lda (up),y              ; Get the index into array WORDLISTS
002C78r 3               
002C78r 3                               ; Get the DP for that wordlist.
002C78r 3  0A                           asl                     ; Turn offset into cells offset.
002C79r 3  18                           clc
002C7Ar 3  69 06                        adc #wordlists_offset
002C7Cr 3  A8                           tay
002C7Dr 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
002C7Fr 3  95 00                        sta 0,x                 ; on the stack. ( nt )
002C81r 3  C8                           iny
002C82r 3  B1 rr                        lda (up),y
002C84r 3  95 01                        sta 1,x
002C86r 3               
002C86r 3               @loop:
002C86r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002C89r 3  20 rr rr                     jsr xt_name_to_string   ; ( nt addr u )
002C8Cr 3               
002C8Cr 3                               ; Insert line break if we're about to go past the end of the
002C8Cr 3                               ; line
002C8Cr 3  68                           pla
002C8Dr 3  18                           clc
002C8Er 3  75 00                        adc 0,x
002C90r 3  1A                           inc                     ; don't forget the space between words
002C91r 3  C9 4F                        cmp #MAX_LINE_LENGTH    ; usually 79
002C93r 3  90 05                        bcc @1
002C95r 3               
002C95r 3  20 rr rr                     jsr xt_cr
002C98r 3  A9 00                        lda #0
002C9Ar 3               @1:
002C9Ar 3  48                           pha
002C9Br 3  20 rr rr                     jsr xt_type             ; ( nt )
002C9Er 3               
002C9Er 3  A9 20                        lda #AscSP
002CA0r 3  20 rr rr                     jsr emit_a
002CA3r 3               
002CA3r 3                               ; get next word, which begins two down
002CA3r 3  20 rr rr                     jsr xt_one_plus         ; 1+
002CA6r 3  20 rr rr                     jsr xt_one_plus         ; 1+
002CA9r 3  20 rr rr                     jsr xt_fetch            ; @ ( nt+1 )
002CACr 3               
002CACr 3                               ; if next address is zero, we're done
002CACr 3  B5 00                        lda 0,x
002CAEr 3  15 01                        ora 1,x
002CB0r 3  D0 D4                        bne @loop
002CB2r 3               
002CB2r 3                               ; Move on to the next wordlist in the search order.
002CB2r 3  E6 rr                        inc tmp3
002CB4r 3  80 B2                        bra @wordlist_loop
002CB6r 3               
002CB6r 3               @words_done:
002CB6r 3  68                           pla                     ; dump counter
002CB7r 3               
002CB7r 3  E8                           inx
002CB8r 3  E8                           inx
002CB9r 3               
002CB9r 3  60           z_words:        rts
002CBAr 3               
002CBAr 3               
002CBAr 3               
002CBAr 3               ; ## WORDSIZE ( nt -- u ) "Get size of word in bytes"
002CBAr 3               ; ## "wordsize"  auto  Tali Forth
002CBAr 3                       ; """Given an word's name token (nt), return the size of the
002CBAr 3                       ; word's payload size in bytes (CFA plus PFA) in bytes. Does not
002CBAr 3                       ; count the final RTS.
002CBAr 3                       ; """
002CBAr 3               xt_wordsize:
002CBAr 3  20 rr rr                     jsr underflow_1
002CBDr 3               
002CBDr 3                               ; We get the start address of the word from its header entry
002CBDr 3                               ; for the start of the actual code (execution token, xt)
002CBDr 3                               ; which is four bytes down, and the pointer to the end of the
002CBDr 3                               ; code (z_word, six bytes down)
002CBDr 3  B5 00                        lda 0,x
002CBFr 3  85 rr                        sta tmp1
002CC1r 3  B5 01                        lda 1,x
002CC3r 3  85 rr                        sta tmp1+1
002CC5r 3               
002CC5r 3  A0 06                        ldy #6
002CC7r 3  B1 rr                        lda (tmp1),y    ; LSB of z
002CC9r 3  88                           dey
002CCAr 3  88                           dey
002CCBr 3               
002CCBr 3  38                           sec
002CCCr 3  F1 rr                        sbc (tmp1),y    ; LSB of xt
002CCEr 3  95 00                        sta 0,x
002CD0r 3               
002CD0r 3  A0 07                        ldy #7
002CD2r 3  B1 rr                        lda (tmp1),y    ; MSB of z
002CD4r 3  88                           dey
002CD5r 3  88                           dey
002CD6r 3               
002CD6r 3  F1 rr                        sbc (tmp1),y    ; MSB of xt
002CD8r 3  95 01                        sta 1,x
002CDAr 3               
002CDAr 3  60           z_wordsize:     rts
002CDBr 3               
002CDBr 3               
002CDBr 3               ; ## XOR ( n n -- n ) "Logically XOR TOS and NOS"
002CDBr 3               ; ## "xor"  auto  ANS core
002CDBr 3                       ; """https://forth-standard.org/standard/core/XOR"""
002CDBr 3               xt_xor:
002CDBr 3  20 rr rr                     jsr underflow_2
002CDEr 3               
002CDEr 3  B5 00                        lda 0,x
002CE0r 3  55 02                        eor 2,x
002CE2r 3  95 02                        sta 2,x
002CE4r 3               
002CE4r 3  B5 01                        lda 1,x
002CE6r 3  55 03                        eor 3,x
002CE8r 3  95 03                        sta 3,x
002CEAr 3               
002CEAr 3  E8                           inx
002CEBr 3  E8                           inx
002CECr 3               
002CECr 3  60           z_xor:          rts
002CEDr 3               
002CEDr 3               
002CEDr 3               ; ## ZERO ( -- 0 ) "Push 0 to Data Stack"
002CEDr 3               ; ## "0"  auto  Tali Forth
002CEDr 3                       ; """The disassembler assumes that this routine does not use Y. Note
002CEDr 3                       ; that CASE and FORTH-WORDLIST use the same routine, as the WD for Forth
002CEDr 3                       ; is 0."""
002CEDr 3               xt_case:
002CEDr 3               xt_forth_wordlist:
002CEDr 3               xt_zero:
002CEDr 3  CA                           dex             ; push
002CEEr 3  CA                           dex
002CEFr 3  74 00                        stz 0,x
002CF1r 3  74 01                        stz 1,x
002CF3r 3               z_case:
002CF3r 3               z_forth_wordlist:
002CF3r 3               z_zero:
002CF3r 3  60                           rts
002CF4r 3               
002CF4r 3               
002CF4r 3               ; ## ZERO_EQUAL ( n -- f ) "Check if TOS is zero"
002CF4r 3               ; ## "0="  auto  ANS core
002CF4r 3                       ; """https://forth-standard.org/standard/core/ZeroEqual"""
002CF4r 3               
002CF4r 3               xt_zero_equal:
002CF4r 3  20 rr rr                     jsr underflow_1
002CF7r 3               
002CF7r 3  B5 00                        lda 0,x
002CF9r 3  15 01                        ora 1,x
002CFBr 3  F0 04                        beq @zero
002CFDr 3               
002CFDr 3                               ; not a zero, so we need a FALSE flag (0)
002CFDr 3  A9 00                        lda #0
002CFFr 3  80 02                        bra @store
002D01r 3               @zero:
002D01r 3                               ; We have a zero, so we need a TRUE flag (-1)
002D01r 3  A9 FF                        lda #$ff
002D03r 3               @store:
002D03r 3  95 00                        sta 0,x
002D05r 3  95 01                        sta 1,x
002D07r 3               
002D07r 3  60           z_zero_equal:   rts
002D08r 3               
002D08r 3               
002D08r 3               
002D08r 3               ; ## ZERO_GREATER ( n -- f ) "Return a TRUE flag if TOS is positive"
002D08r 3               ; ## "0>"  auto  ANS core ext
002D08r 3                       ; """https://forth-standard.org/standard/core/Zeromore"""
002D08r 3               
002D08r 3               xt_zero_greater:
002D08r 3  20 rr rr                     jsr underflow_1
002D0Br 3               
002D0Br 3  A0 00                        ldy #0          ; Default is FALSE (TOS is negative)
002D0Dr 3               
002D0Dr 3  B5 01                        lda 1,x         ; MSB
002D0Fr 3  30 05                        bmi @done       ; TOS is negative, keep FLASE
002D11r 3  15 00                        ora 0,x
002D13r 3  F0 01                        beq @done       ; TOS is zero, keep FALSE
002D15r 3               
002D15r 3  88                           dey             ; TOS is postive, make true
002D16r 3               @done:
002D16r 3  98                           tya
002D17r 3  95 00                        sta 0,x
002D19r 3  95 01                        sta 1,x
002D1Br 3               
002D1Br 3  60           z_zero_greater: rts
002D1Cr 3               
002D1Cr 3               
002D1Cr 3               
002D1Cr 3               ; ## ZERO_LESS ( n -- f ) "Return a TRUE flag if TOS negative"
002D1Cr 3               ; ## "0<"  auto  ANS core
002D1Cr 3                       ; """https://forth-standard.org/standard/core/Zeroless"""
002D1Cr 3               
002D1Cr 3               xt_zero_less:
002D1Cr 3  20 rr rr                     jsr underflow_1
002D1Fr 3               
002D1Fr 3  A0 00                        ldy #0          ; Default is FALSE (TOS positive)
002D21r 3               
002D21r 3  B5 01                        lda 1,x         ; MSB
002D23r 3  10 01                        bpl @done       ; TOS is positive, so keep FALSE
002D25r 3               
002D25r 3  88                           dey             ; TOS is negative, make TRUE
002D26r 3               @done:
002D26r 3  98                           tya
002D27r 3  95 00                        sta 0,x
002D29r 3  95 01                        sta 1,x
002D2Br 3               
002D2Br 3  60           z_zero_less:    rts
002D2Cr 3               
002D2Cr 3               
002D2Cr 3               
002D2Cr 3               ; ## ZERO_UNEQUAL ( m -- f ) "Return TRUE flag if not zero"
002D2Cr 3               ; ## "0<>"  auto  ANS core ext
002D2Cr 3                       ; """https://forth-standard.org/standard/core/Zerone"""
002D2Cr 3               
002D2Cr 3               xt_zero_unequal:
002D2Cr 3  20 rr rr                     jsr underflow_1
002D2Fr 3               
002D2Fr 3  A0 00                        ldy #0          ; default false
002D31r 3               
002D31r 3  B5 00                        lda 0,x
002D33r 3  15 01                        ora 1,x
002D35r 3  F0 01                        beq @got_zero
002D37r 3               
002D37r 3  88                           dey
002D38r 3               @got_zero:
002D38r 3  98                           tya
002D39r 3  95 00                        sta 0,x
002D3Br 3  95 01                        sta 1,x
002D3Dr 3               
002D3Dr 3  60           z_zero_unequal: rts
002D3Er 3               
002D3Er 3               
002D3Er 3               
002D3Er 3               ; ==========================================================
002D3Er 3               ; EDITOR words
002D3Er 3               
002D3Er 3               ; This routine is used by both enter-screen and erase-screen
002D3Er 3               ; to get a buffer for the given screen number and set SCR to
002D3Er 3               ; the given screen number.  This word is not in the dictionary.
002D3Er 3               xt_editor_screen_helper:
002D3Er 3  20 rr rr                     jsr xt_dup
002D41r 3  20 rr rr                     jsr xt_scr
002D44r 3  20 rr rr                     jsr xt_store
002D47r 3  20 rr rr                     jsr xt_buffer
002D4Ar 3               z_editor_screen_helper:
002D4Ar 3  60                           rts
002D4Br 3               
002D4Br 3               
002D4Br 3               ; ## EDITOR_ENTER_SCREEN ( scr# -- ) "Enter all lines for given screen"
002D4Br 3               ; ## "enter-screen"  auto  Tali Editor
002D4Br 3               
002D4Br 3               xt_editor_enter_screen:
002D4Br 3                               ; Set the variable SCR and get a buffer for the
002D4Br 3                               ; given screen number.
002D4Br 3  20 rr rr                     jsr xt_editor_screen_helper
002D4Er 3               
002D4Er 3                               ; Drop the buffer address.
002D4Er 3  20 rr rr                     jsr xt_drop
002D51r 3               
002D51r 3                               ; Overwrite the lines one at a time.
002D51r 3  64 rr                        stz editor1
002D53r 3               @prompt_loop:
002D53r 3                               ; Put the current line number on the stack.
002D53r 3  CA                           dex
002D54r 3  CA                           dex
002D55r 3  A5 rr                        lda editor1
002D57r 3  95 00                        sta 0,x
002D59r 3  74 01                        stz 1,x
002D5Br 3               
002D5Br 3                               ; Use the O word to prompt for overwrite.
002D5Br 3  20 rr rr                     jsr xt_editor_o
002D5Er 3               
002D5Er 3                               ; Move on to the next line.
002D5Er 3  E6 rr                        inc editor1
002D60r 3  A9 10                        lda #16
002D62r 3  C5 rr                        cmp editor1
002D64r 3  D0 ED                        bne @prompt_loop
002D66r 3               
002D66r 3               z_editor_enter_screen:
002D66r 3  60                           rts
002D67r 3               
002D67r 3               
002D67r 3               
002D67r 3               ; ## EDITOR_ERASE_SCREEN ( scr# -- ) "Erase all lines for given screen"
002D67r 3               ; ## "erase-screen"  tested  Tali Editor
002D67r 3               xt_editor_erase_screen:
002D67r 3                               ; Set the variable SCR and get a buffer for the
002D67r 3                               ; given screen number.
002D67r 3  20 rr rr                     jsr xt_editor_screen_helper
002D6Ar 3               
002D6Ar 3                               ; Put 1024 (chars/screen) on stack.
002D6Ar 3  CA                           dex
002D6Br 3  CA                           dex
002D6Cr 3  74 00                        stz 0,x
002D6Er 3  A9 04                        lda #4          ; 4 in MSB makes 1024 ($400).
002D70r 3  95 01                        sta 1,x
002D72r 3               
002D72r 3                               ; Erase the entire block (fill with spaces).
002D72r 3  20 rr rr                     jsr xt_blank
002D75r 3               
002D75r 3                               ; Mark buffer as updated.
002D75r 3  20 rr rr                     jsr xt_update
002D78r 3               
002D78r 3               z_editor_erase_screen:
002D78r 3  60                           rts
002D79r 3               
002D79r 3               
002D79r 3               ; ## EDITOR_EL ( line# -- ) "Erase the given line number"
002D79r 3               ; ## "el"  tested  Tali Editor
002D79r 3               xt_editor_el:
002D79r 3                               ; Turn the line number into buffer offset.
002D79r 3                               ; This also loads the block into the buffer if it's
002D79r 3                               ; not there for some reason.
002D79r 3  20 rr rr                     jsr xt_editor_line
002D7Cr 3               
002D7Cr 3                               ; Put 64 (# of chars/line) on the stack.
002D7Cr 3  CA                           dex
002D7Dr 3  CA                           dex
002D7Er 3  A9 40                        lda #64
002D80r 3  95 00                        sta 0,x
002D82r 3  74 01                        stz 1,x
002D84r 3               
002D84r 3                               ; Fill with spaces.
002D84r 3  20 rr rr                     jsr xt_blank
002D87r 3               
002D87r 3                               ; Mark buffer as updated.
002D87r 3  20 rr rr                     jsr xt_update
002D8Ar 3               
002D8Ar 3  60           z_editor_el:    rts
002D8Br 3               
002D8Br 3               
002D8Br 3               ; ## EDITOR_L ( -- ) "List the current screen"
002D8Br 3               ; ## "l"  tested  Tali Editor
002D8Br 3               
002D8Br 3               xt_editor_l:
002D8Br 3                               ; Load the current screen
002D8Br 3  CA                           dex             ; Put SCR on the stack.
002D8Cr 3  CA                           dex
002D8Dr 3  A0 02                        ldy #scr_offset
002D8Fr 3  B1 rr                        lda (up),y
002D91r 3  95 00                        sta 0,x
002D93r 3  C8                           iny
002D94r 3  B1 rr                        lda (up),y
002D96r 3  95 01                        sta 1,x
002D98r 3  20 rr rr                     jsr xt_block    ; Get the current screen.
002D9Br 3               
002D9Br 3  20 rr rr                     jsr xt_cr
002D9Er 3               
002D9Er 3                               ; Print the screen number.
002D9Er 3                               ; We're using sliteral, so we need to set up the
002D9Er 3                               ; appropriate data structure (see sliteral)
002D9Er 3  80 08                        bra @after_screen_msg
002DA0r 3               
002DA0r 3               @screen_msg:
002DA0r 3  53 63 72 65                  .byte "Screen #"
002DA4r 3  65 6E 20 23  
002DA8r 3               
002DA8r 3               @after_screen_msg:
002DA8r 3  20 rr rr                     jsr sliteral_runtime
002DABr 3  rr rr 08 00                  .word @screen_msg, @after_screen_msg-@screen_msg
002DAFr 3               
002DAFr 3  20 rr rr                     jsr xt_type
002DB2r 3               
002DB2r 3                               ; Put the screen number and printed size for u.r on the stack.
002DB2r 3  20 rr rr                     jsr xt_scr
002DB5r 3  20 rr rr                     jsr xt_fetch
002DB8r 3  CA                           dex
002DB9r 3  CA                           dex
002DBAr 3  A9 04                        lda #4          ; four spaces
002DBCr 3  95 00                        sta 0,x
002DBEr 3  74 01                        stz 1,x
002DC0r 3  20 rr rr                     jsr xt_u_dot_r
002DC3r 3               
002DC3r 3                               ; The address of the buffer is currently on the stack.
002DC3r 3                               ; Print 64 chars at a time. TYPE uses tmp1, so we'll
002DC3r 3                               ; keep track of the line number in tmp3.
002DC3r 3  64 rr                        stz tmp3
002DC5r 3               
002DC5r 3               @line_loop:
002DC5r 3  20 rr rr                     jsr xt_cr
002DC8r 3               
002DC8r 3                               ; Print the line number (2-space fixed width)
002DC8r 3  CA                           dex
002DC9r 3  CA                           dex
002DCAr 3  CA                           dex
002DCBr 3  CA                           dex
002DCCr 3  74 03                        stz 3,x
002DCEr 3  A5 rr                        lda tmp3
002DD0r 3  95 02                        sta 2,x
002DD2r 3  74 01                        stz 1,x
002DD4r 3  A9 02                        lda #2
002DD6r 3  95 00                        sta 0,x
002DD8r 3  20 rr rr                     jsr xt_u_dot_r
002DDBr 3  20 rr rr                     jsr xt_space
002DDEr 3               
002DDEr 3                               ; Print one line using the address on the stack.
002DDEr 3  20 rr rr                     jsr xt_dup
002DE1r 3  CA                           dex
002DE2r 3  CA                           dex
002DE3r 3  A9 40                        lda #64
002DE5r 3  95 00                        sta 0,x
002DE7r 3  74 01                        stz 1,x
002DE9r 3  20 rr rr                     jsr xt_type
002DECr 3               
002DECr 3                               ; Add 64 to the address on the stack to move to the next line.
002DECr 3  18                           clc
002DEDr 3  A9 40                        lda #64
002DEFr 3  75 00                        adc 0,x
002DF1r 3  95 00                        sta 0,x
002DF3r 3  B5 01                        lda 1,x
002DF5r 3  69 00                        adc #0      ; Add carry
002DF7r 3  95 01                        sta 1,x
002DF9r 3               
002DF9r 3                               ; Increment the line number (held in tmp3)
002DF9r 3  E6 rr                        inc tmp3
002DFBr 3               
002DFBr 3                               ; See if we are done.
002DFBr 3  A5 rr                        lda tmp3
002DFDr 3  C9 10                        cmp #16
002DFFr 3  D0 C4                        bne @line_loop
002E01r 3               
002E01r 3  20 rr rr                     jsr xt_cr
002E04r 3                               ; Drop the address on the stack.
002E04r 3  E8                           inx
002E05r 3  E8                           inx
002E06r 3               
002E06r 3  60           z_editor_l:            rts
002E07r 3               
002E07r 3               
002E07r 3               
002E07r 3               ; ## EDITOR_LINE ( line# -- c-addr ) "Turn a line number into address in current screen"
002E07r 3               ; ## "line"  tested  Tali Editor
002E07r 3               
002E07r 3               xt_editor_line:
002E07r 3  20 rr rr                     jsr underflow_1
002E0Ar 3               
002E0Ar 3                               ; Multiply the TOS by 64 (chars/line) to compute offset.
002E0Ar 3  A0 06                        ldy #6          ; *64 is same as left shift 6 times.
002E0Cr 3               @shift_tos_left:
002E0Cr 3  16 00                        asl 0,x         ; Shift TOS to the left
002E0Er 3  36 01                        rol 1,x         ; ROL brings MSb from lower byte.
002E10r 3  88                           dey
002E11r 3  D0 F9                        bne @shift_tos_left
002E13r 3                               ; Load the current screen into a buffer
002E13r 3                               ; and get the buffer address
002E13r 3  20 rr rr                     jsr xt_scr
002E16r 3  20 rr rr                     jsr xt_fetch
002E19r 3  20 rr rr                     jsr xt_block
002E1Cr 3               
002E1Cr 3                               ; Add the offset to the buffer base address.
002E1Cr 3  20 rr rr                     jsr xt_plus
002E1Fr 3               
002E1Fr 3  60           z_editor_line:  rts
002E20r 3               
002E20r 3               
002E20r 3               
002E20r 3               ; ## EDITOR_O ( line# -- ) "Overwrite the given line"
002E20r 3               ; ## "o"  tested  Tali Editor
002E20r 3               xt_editor_o:
002E20r 3                               ; Print prompt
002E20r 3  20 rr rr                     jsr xt_cr
002E23r 3  20 rr rr                     jsr xt_dup
002E26r 3  20 rr rr                     jsr xt_two
002E29r 3  20 rr rr                     jsr xt_u_dot_r
002E2Cr 3  20 rr rr                     jsr xt_space
002E2Fr 3  A9 2A                        lda #42         ; ASCII for *
002E31r 3  20 rr rr                     jsr emit_a
002E34r 3  20 rr rr                     jsr xt_space
002E37r 3               
002E37r 3                               ; Accept new input (directly into the buffer)
002E37r 3  20 rr rr                     jsr xt_editor_line
002E3Ar 3  20 rr rr                     jsr xt_dup      ; Save a copy of the line address for later.
002E3Dr 3  CA                           dex
002E3Er 3  CA                           dex
002E3Fr 3  A9 40                        lda #64         ; chars/line
002E41r 3  95 00                        sta 0,x
002E43r 3  74 01                        stz 1,x
002E45r 3  20 rr rr                     jsr xt_accept
002E48r 3               
002E48r 3                               ; Fill the rest with spaces.
002E48r 3                               ; Stack is currently ( line_address numchars_from_accept )
002E48r 3  20 rr rr                     jsr xt_dup
002E4Br 3  20 rr rr                     jsr xt_not_rote ; -rot
002E4Er 3  20 rr rr                     jsr xt_plus
002E51r 3  CA                           dex
002E52r 3  CA                           dex
002E53r 3  A9 40                        lda #64         ; chars/line
002E55r 3  95 00                        sta 0,x
002E57r 3  74 01                        stz 1,x
002E59r 3  20 rr rr                     jsr xt_rot
002E5Cr 3  20 rr rr                     jsr xt_minus
002E5Fr 3  20 rr rr                     jsr xt_blank
002E62r 3               
002E62r 3                               ; Mark buffer as updated.
002E62r 3  20 rr rr                     jsr xt_update
002E65r 3               
002E65r 3  60           z_editor_o:     rts
002E66r 3               
002E66r 3               ; ## LCDPUT ( s -- ) "Print single character to LCD"
002E66r 3               ; ## "lcdput" coded Custom
002E66r 3               xt_lcdput:
002E66r 3  20 rr rr                     jsr underflow_1
002E69r 3               
002E69r 3  B5 00                        lda 0,x
002E6Br 3                       .ifdef lcd_print
002E6Br 3                               jsr lcd_print
002E6Br 3                       .endif
002E6Br 3  E8                           inx
002E6Cr 3  E8                           inx
002E6Dr 3  60           z_lcdput: rts
002E6Er 3               
002E6Er 3               
002E6Er 3               ; ## LCDPRINT ( addr u -- ) "Print string to LCD"
002E6Er 3               ; ## "lcdprint"  coded Custom
002E6Er 3               
002E6Er 3               xt_lcdprint:
002E6Er 3  20 rr rr                     jsr underflow_2
002E71r 3               
002E71r 3                               ; Save the starting address into tmp1
002E71r 3  B5 02                        lda 2,x
002E73r 3  85 rr                        sta tmp1
002E75r 3  B5 03                        lda 3,x
002E77r 3  85 rr                        sta tmp1+1
002E79r 3               @loop:
002E79r 3                               ; done if length is zero
002E79r 3  B5 00                        lda 0,x
002E7Br 3  15 01                        ora 1,x
002E7Dr 3  F0 12                        beq @done
002E7Fr 3               
002E7Fr 3                               ; Send the current character
002E7Fr 3  B2 rr                        lda (tmp1)
002E81r 3                       .ifdef lcd_print
002E81r 3                               jsr lcd_print      ; avoids stack foolery
002E81r 3                       .endif
002E81r 3                               ; Move the address along (in tmp1)
002E81r 3  E6 rr                        inc tmp1
002E83r 3  D0 02                        bne @1
002E85r 3  E6 rr                        inc tmp1+1
002E87r 3               @1:
002E87r 3                               ; Reduce the count (on the data stack)
002E87r 3  B5 00                        lda 0,x
002E89r 3  D0 02                        bne @2
002E8Br 3  D6 01                        dec 1,x
002E8Dr 3               @2:
002E8Dr 3  D6 00                        dec 0,x
002E8Fr 3               
002E8Fr 3  80 E8                        bra @loop
002E91r 3               @done:
002E91r 3  E8                           inx
002E92r 3  E8                           inx
002E93r 3  E8                           inx
002E94r 3  E8                           inx
002E95r 3               
002E95r 3  60           z_lcdprint:         rts
002E96r 3               
002E96r 3               
002E96r 3               
002E96r 3               ; ## CLS ( -- ) "clea VGA screen"
002E96r 3               ; ## "cls" coded Custom
002E96r 3               xt_cls:
002E96r 3                       .ifdef vga_clear
002E96r 3                               jsr vga_clear
002E96r 3                       .endif
002E96r 3               
002E96r 3  60           z_cls: rts
002E97r 3               
002E97r 3               
002E97r 3               ; ## SPI_INIT ( -- ) "Init SPI system"
002E97r 3               ; ## "spi_init" coded Custom
002E97r 3               xt_spi_init:
002E97r 3                       .ifdef spi_init
002E97r 3                               jsr spi_init
002E97r 3                       .endif
002E97r 3  60           z_spi_init: rts
002E98r 3               
002E98r 3               
002E98r 3               ; ## SPI_CLK_TOGGLE ( -- ) "Toggle SPI clock"
002E98r 3               ; ## "spi_clk_toggle" coded Custom
002E98r 3               xt_spi_clk_toggle:
002E98r 3                       .ifdef spi_clk_toggle
002E98r 3                               jsr spi_clk_toggle
002E98r 3                       .endif
002E98r 3  60           z_spi_clk_toggle: rts
002E99r 3               
002E99r 3               ; ## SPI_SELECT ( s -- ) "Select SPI slave"
002E99r 3               ; ## "spi_select" coded Custom
002E99r 3               xt_spi_select:
002E99r 3  20 rr rr                     jsr underflow_1
002E9Cr 3               
002E9Cr 3  B5 00                        lda 0,x
002E9Er 3                       .ifdef spi_select
002E9Er 3                               jsr spi_select
002E9Er 3                       .endif
002E9Er 3  E8                           inx
002E9Fr 3  E8                           inx
002EA0r 3  60           z_spi_select: rts
002EA1r 3               
002EA1r 3               ; ## SPI_TRANSCEIVE ( s -- u ) "Send and receive spi data"
002EA1r 3               ; ## "spi_transceive" coded Custom
002EA1r 3               xt_spi_transceive:
002EA1r 3  20 rr rr                     jsr underflow_1
002EA4r 3               
002EA4r 3  B5 00                        lda 0,x
002EA6r 3                       .ifdef spi_transceive
002EA6r 3                               jsr spi_transceive
002EA6r 3                       .endif
002EA6r 3  95 00                        sta 0,x         ; put return value in TOS
002EA8r 3  74 01                        stz 1,X         ;reset value there
002EAAr 3  60           z_spi_transceive: rts
002EABr 3               
002EABr 3               ; ## SD_INIT ( s -- u ) "Send and receive spi data"
002EABr 3               ; ## "spi_transceive" coded Custom
002EABr 3               xt_sd_init:
002EABr 3  20 rr rr                     jsr underflow_1
002EAEr 3               
002EAEr 3  B5 00                        lda 0,x
002EB0r 3                       .ifdef sd_init
002EB0r 3                               jsr sd_init
002EB0r 3                       .endif
002EB0r 3  95 00                        sta 0,x         ; put return value in TOS
002EB2r 3  74 01                        stz 1,X         ;reset value there
002EB4r 3  60           z_sd_init: rts
002EB5r 3               
002EB5r 3               ; ## SD_READSECTOR ( addr d -- u ) "Read SD sector"
002EB5r 3               ; ## "sd_readsector" coded Custom
002EB5r 3               xt_sd_readsector:
002EB5r 3  20 rr rr                     jsr underflow_3
002EB8r 3                       .ifdef sd_readsector
002EB8r 3                               ; get and save storage address
002EB8r 3                               lda 0,x
002EB8r 3                               sta sd_buffer_address
002EB8r 3                               lda 1, x
002EB8r 3                               sta sd_buffer_address + 1
002EB8r 3                               ; get and save sector number (32 bit number, double)
002EB8r 3                               lda 2, X
002EB8r 3                               sta SD_ARG + 3
002EB8r 3                               lda 3, X
002EB8r 3                               sta SD_ARG + 2
002EB8r 3                               lda 4, X
002EB8r 3                               sta SD_ARG + 1
002EB8r 3                               lda 5, X
002EB8r 3                               sta SD_ARG
002EB8r 3                               lda #1
002EB8r 3                               sta SD_CRC
002EB8r 3               
002EB8r 3                               jsr sd_readsector
002EB8r 3                       .endif
002EB8r 3  95 00                        sta 0,x         ; put return value in TOS
002EBAr 3  74 01                        stz 1,X         ;reset value there
002EBCr 3               
002EBCr 3  E8                           inx
002EBDr 3  E8                           inx
002EBEr 3  E8                           inx
002EBFr 3  E8                           inx
002EC0r 3               
002EC0r 3  60           z_sd_readsector: rts
002EC1r 3               
002EC1r 3               
002EC1r 3               ; ## FAT32_INIT ( u -- u ) "initialize FAT32 file system on passed spi drive address"
002EC1r 3               ; ## "fat32_init" coded Custom
002EC1r 3               xt_fat32_init:
002EC1r 3  20 rr rr                     jsr underflow_1
002EC4r 3               
002EC4r 3  B5 00                        lda 0,x
002EC6r 3                       .ifdef sd_init
002EC6r 3                               jsr sd_init
002EC6r 3                               bne @error
002EC6r 3                       .endif
002EC6r 3                       .ifdef fat32_init
002EC6r 3                               jsr fat32_init
002EC6r 3                               beq @end
002EC6r 3                       .endif
002EC6r 3                       .ifdef fat32_openroot
002EC6r 3                               ; jsr fat32_openroot
002EC6r 3                               ; beq @end
002EC6r 3                       .endif
002EC6r 3               @error:
002EC6r 3  A9 01                        lda #1
002EC8r 3               @end:
002EC8r 3  95 00                        sta 0,x         ; put return value in TOS
002ECAr 3  74 01                        stz 1,X         ;reset value there
002ECCr 3  60           z_fat32_init: rts
002ECDr 3               
002ECDr 3               
002ECDr 3               ; ## FAT32_ROOT ( -- u ) "initialize FAT32 file system on passed spi drive address"
002ECDr 3               ; ## "fat32_root" coded Custom
002ECDr 3               xt_fat32_root:
002ECDr 3               
002ECDr 3  CA                   dex
002ECEr 3  CA                   dex
002ECFr 3                       .ifdef fat32_openroot
002ECFr 3                               jsr fat32_openroot
002ECFr 3                               beq @end
002ECFr 3                       .endif
002ECFr 3                       ; .ifdef fat32_readdirent
002ECFr 3                       ;         jsr fat32_readdirent
002ECFr 3                       ;         bcc @end
002ECFr 3                       ; .endif
002ECFr 3               
002ECFr 3               @error:
002ECFr 3  A9 01                lda #1
002ED1r 3               @end:
002ED1r 3               
002ED1r 3  95 00                sta 0,x         ; put return value in TOS
002ED3r 3  74 01                stz 1,X         ;reset value there
002ED5r 3  60           z_fat32_root: rts
002ED6r 3               
002ED6r 3               ; ## FAT32_FIND ( addr u -- u ) "Open file from initialized fat32 FS"
002ED6r 3               ; ## "fat32_find" coded Custom
002ED6r 3               xt_fat32_find:
002ED6r 3               .ifdef fat32_finddirent
002ED6r 3               textfile:  .byte "FILE.TXT   ", 0
002ED6r 3                               lda #<textfile
002ED6r 3                               sta fat32_filenamepointer
002ED6r 3                               lda #>textfile
002ED6r 3                               sta fat32_filenamepointer+1
002ED6r 3               
002ED6r 3                               jsr fat32_finddirent    ; find the file from its name
002ED6r 3                               bne @error
002ED6r 3               
002ED6r 3                               jsr fat32_file_read
002ED6r 3                               bne @error
002ED6r 3                               dex
002ED6r 3                               dex
002ED6r 3                               lda sd_buffer_address
002ED6r 3                               sta 0,x
002ED6r 3                               lda sd_buffer_address+1
002ED6r 3                               sta 1, x
002ED6r 3               ;                 phy
002ED6r 3               ;         ldy #0
002ED6r 3               ; @printloop:
002ED6r 3               ;         lda (sd_buffer_address),y
002ED6r 3               ;         beq @ex
002ED6r 3               ;         jsr kernel_putc
002ED6r 3               ; @ex:
002ED6r 3               ;         ply
002ED6r 3                       jmp @end
002ED6r 3               
002ED6r 3                               jmp @end
002ED6r 3               
002ED6r 3                               jsr underflow_2
002ED6r 3                               phy
002ED6r 3                               ldy 0,x ; length of string
002ED6r 3                               lda #0
002ED6r 3               @reset_loop:
002ED6r 3                           .ifdef fat32_finddirent
002ED6r 3                               sta (fat32_filenamepointer),y
002ED6r 3                               iny
002ED6r 3                               cpy #11
002ED6r 3                               bcc @reset_loop
002ED6r 3                           .endif
002ED6r 3                               inx     ; get address
002ED6r 3                               inx
002ED6r 3                           .ifdef fat32_finddirent
002ED6r 3                               lda 0,x
002ED6r 3                               sta fat32_filenamepointer
002ED6r 3                               lda 1,x
002ED6r 3                               sta fat32_filenamepointer+1
002ED6r 3                           .endif
002ED6r 3               
002ED6r 3                               ply
002ED6r 3                           .ifdef fat32_finddirent
002ED6r 3                               jsr fat32_finddirent    ; find the file from its name
002ED6r 3                               beq @end
002ED6r 3                           .endif
002ED6r 3               .endif
002ED6r 3               @error:
002ED6r 3  A9 01                        lda #1
002ED8r 3               @end:
002ED8r 3  95 00                        sta 0,x         ; put return value in TOS
002EDAr 3  74 01                        stz 1,X         ;reset value there
002EDCr 3  60           z_fat32_find: rts
002EDDr 3               
002EDDr 3               ; ## time ( -- addr ) "get time storage address"
002EDDr 3               ; ## "time" coded Custom
002EDDr 3               xt_time:
002EDDr 3                       .ifdef time
002EDDr 3  A9 rr                lda #time
002EDFr 3                       .else
002EDFr 3                       lda #0
002EDFr 3                       .endif
002EDFr 3  CA                   dex
002EE0r 3  CA                   dex
002EE1r 3  95 00                sta 0,x
002EE3r 3  74 01                stz 1,x
002EE5r 3               
002EE5r 3               
002EE5r 3  60           z_time: rts
002EE6r 3               
002EE6r 3               ; ## cf_readsector ( u u -- addr ) "Set LBA block and read to buffer"
002EE6r 3               ; ## "cf_readsector" coded Custom
002EE6r 3               
002EE6r 3               xt_cf_readsector:
002EE6r 3  20 rr rr             jsr underflow_2
002EE9r 3  B5 00                lda 0, x
002EEBr 3  8D rr rr             sta CF_LBA
002EEEr 3  B5 01                lda 1, x
002EF0r 3  8D rr rr             sta CF_LBA + 1
002EF3r 3  B5 02                lda 2, x
002EF5r 3  8D rr rr             sta CF_LBA + 2
002EF8r 3  B5 03                lda 3, x
002EFAr 3  8D rr rr             sta CF_LBA + 3
002EFDr 3                       ; LBA is set, now read sector
002EFDr 3  20 rr rr             jsr cf_init
002F00r 3               
002F00r 3  20 rr rr             jsr cf_read_sector
002F03r 3                       ; jsr cf_read
002F03r 3               
002F03r 3                       ; return buffer address
002F03r 3  A9 rr                lda #<CF_BUF
002F05r 3  95 02                sta 2, x
002F07r 3  A9 rr                lda #>CF_BUF
002F09r 3  95 03                sta 3, x
002F0Br 3  E8                   inx
002F0Cr 3  E8                   inx
002F0Dr 3               
002F0Dr 3               z_cf_readsector:
002F0Dr 3  60                   rts
002F0Er 3               
002F0Er 3               ; TODO add routine to send a block of data in memory via SPI
002F0Er 3               ; similar to lcdprint
002F0Er 3               
002F0Er 3               ; END
002F0Er 3               
002F0Er 3               
002F0Er 2                   .include "headers.s"          ; Headers of native words
002F0Er 3               ; Dictionary Headers for Tali Forth 2
002F0Er 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
002F0Er 3               ; First version: 05. Dec 2016 (Liara Forth)
002F0Er 3               ; This version: 29. Dec 2018
002F0Er 3               
002F0Er 3               ; Dictionary headers are kept separately from the code, which allows various
002F0Er 3               ; tricks in the code. We roughly follow the Gforth terminology: The Execution
002F0Er 3               ; Token (xt) is the address of the first byte of a word's code that can be, uh,
002F0Er 3               ; executed; the Name Token (nt) is a pointer to the beginning of the word's
002F0Er 3               ; header in the Dictionary. There the link to the next word in the Dictionary
002F0Er 3               ; is always one cell down from the current word's own nt. In the code itself,
002F0Er 3               ; we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.
002F0Er 3               
002F0Er 3               ; This gives us the following header structure:
002F0Er 3               
002F0Er 3               ;              8 bit     8 bit
002F0Er 3               ;               LSB       MSB
002F0Er 3               ; nt_word ->  +--------+--------+
002F0Er 3               ;          +0 | Length | Status |
002F0Er 3               ;             +--------+--------+
002F0Er 3               ;          +2 | Next Header     | -> nt_next_word
002F0Er 3               ;             +-----------------+
002F0Er 3               ;          +4 | Start of Code   | -> xt_word
002F0Er 3               ;             +-----------------+
002F0Er 3               ;          +6 | End of Code     | -> z_word
002F0Er 3               ;             +--------+--------+
002F0Er 3               ;          +8 | Name   |        |
002F0Er 3               ;             +--------+--------+
002F0Er 3               ;             |        |        |
002F0Er 3               ;             +--------+--------+
002F0Er 3               ;             |        |  ...   | (name string does not end with a zero)
002F0Er 3               ;          +n +--------+--------+
002F0Er 3               
002F0Er 3               ; The Status Byte is created by adding the flags defined in definitions.asm,
002F0Er 3               ; which are:
002F0Er 3               
002F0Er 3               ;       CO - Compile Only
002F0Er 3               ;       IM - Immediate Word
002F0Er 3               ;       NN - Never Native Compile (must always be called by JSR)
002F0Er 3               ;       AN - Always Native Compile (may not be called by JSR)
002F0Er 3               ;       UF - Contains underflow check
002F0Er 3               ;       HC - Has CFA (words created by CREATE and DOES> only)
002F0Er 3               
002F0Er 3               ; Note there are currently two bits unused.
002F0Er 3               
002F0Er 3               ; By default, all existing words can be natively compiled (compiled inline) or
002F0Er 3               ; as a subroutine jump target; the system decides which variant to use based on
002F0Er 3               ; a threshold the user can set. By default, all user-created words are flagged
002F0Er 3               ; never-native. The user can override this by using the always-native word
002F0Er 3               ; just after defining their new word.  The NN flag forbids native compiling,
002F0Er 3               ; the AN flag forces it.
002F0Er 3               
002F0Er 3               ; The last word (top word in code) is always BYE. It is marked as the last word
002F0Er 3               ; by its value of 0000 in its Next Header field. The words are sorted with the
002F0Er 3               ; more common ones first (further down in code) so they are found earlier.
002F0Er 3               ; Anything to do with output comes later (further up) because things will
002F0Er 3               ; always be slow if there is a human involved.
002F0Er 3               
002F0Er 3               ; The initial skeleton of this list was automatically generated by a script
002F0Er 3               ; in the tools folder and then sorted by hand.
002F0Er 3               
002F0Er 3               nt_bye:
002F0Er 3  03                   .byte 3         ; length of word strings
002F0Fr 3  00                   .byte 0         ; status byte
002F10r 3  00 00                .word 0000      ; next word in Dictionary, 0000 signals end
002F12r 3  rr rr                .word xt_bye    ; start of code block (xt of this word)
002F14r 3  rr rr                .word z_bye     ; end of code (RTS)
002F16r 3  62 79 65             .byte "bye"     ; word name, always lower case, not zero-terminated
002F19r 3               
002F19r 3               
002F19r 3               nt_cold:
002F19r 3  04 00                .byte 4, 0
002F1Br 3  rr rr rr rr          .word nt_bye, xt_cold, z_cold
002F1Fr 3  rr rr        
002F21r 3  63 6F 6C 64          .byte "cold"
002F25r 3               
002F25r 3               nt_lcdput:
002F25r 3  06 10                .byte 6, UF
002F27r 3  rr rr rr rr          .word nt_cold, xt_lcdput, z_lcdput
002F2Br 3  rr rr        
002F2Dr 3  6C 63 64 70          .byte "lcdput"
002F31r 3  75 74        
002F33r 3               
002F33r 3               nt_lcdprint:
002F33r 3  08 10                .byte 8, UF
002F35r 3  rr rr rr rr          .word nt_lcdput, xt_lcdprint, z_lcdprint
002F39r 3  rr rr        
002F3Br 3  6C 63 64 70          .byte "lcdprint"
002F3Fr 3  72 69 6E 74  
002F43r 3               
002F43r 3               nt_cls:
002F43r 3  03 00                .byte 3, 0
002F45r 3  rr rr rr rr          .word nt_lcdprint, xt_cls, z_cls
002F49r 3  rr rr        
002F4Br 3  63 6C 73             .byte "cls"
002F4Er 3               
002F4Er 3               .ifdef spi_init
002F4Er 3               nt_spi_init:
002F4Er 3                       .byte 8, 0
002F4Er 3                       .word nt_cls, xt_spi_init, z_spi_init
002F4Er 3                       .byte "spi_init"
002F4Er 3               
002F4Er 3               
002F4Er 3               nt_spi_clk_toggle:
002F4Er 3                       .byte 14, 0
002F4Er 3                       .word nt_spi_init, xt_spi_clk_toggle, z_spi_clk_toggle
002F4Er 3                       .byte "spi_clk_toggle"
002F4Er 3               
002F4Er 3               nt_spi_select:
002F4Er 3                       .byte 10, 0
002F4Er 3                       .word nt_spi_clk_toggle, xt_spi_select, z_spi_select
002F4Er 3                       .byte "spi_select"
002F4Er 3               
002F4Er 3               nt_spi_transceive:
002F4Er 3                       .byte 14, 0
002F4Er 3                       .word nt_spi_select, xt_spi_transceive, z_spi_transceive
002F4Er 3                       .byte "spi_transceive"
002F4Er 3               
002F4Er 3               nt_sd_init:
002F4Er 3                       .byte 7, 0
002F4Er 3                       .word nt_spi_transceive, xt_sd_init, z_sd_init
002F4Er 3                       .byte "sd_init"
002F4Er 3               
002F4Er 3               .else
002F4Er 3               nt_sd_init:
002F4Er 3  07 00                .byte 7, 0
002F50r 3  rr rr rr rr          .word nt_cls, xt_sd_init, z_sd_init
002F54r 3  rr rr        
002F56r 3  73 64 5F 69          .byte "sd_init"
002F5Ar 3  6E 69 74     
002F5Dr 3               .endif
002F5Dr 3               
002F5Dr 3               
002F5Dr 3               
002F5Dr 3               nt_cf_readsector:
002F5Dr 3  0D 00                .byte 13, 0
002F5Fr 3  rr rr rr rr          .word nt_sd_init, xt_cf_readsector, z_cf_readsector
002F63r 3  rr rr        
002F65r 3  63 66 5F 72          .byte "cf_readsector"
002F69r 3  65 61 64 73  
002F6Dr 3  65 63 74 6F  
002F72r 3               
002F72r 3               nt_sd_readsector:
002F72r 3  0D 00                .byte 13, 0
002F74r 3  rr rr rr rr          .word nt_cf_readsector, xt_sd_readsector, z_sd_readsector
002F78r 3  rr rr        
002F7Ar 3  73 64 5F 72          .byte "sd_readsector"
002F7Er 3  65 61 64 73  
002F82r 3  65 63 74 6F  
002F87r 3               
002F87r 3               
002F87r 3               nt_fat32_init:
002F87r 3  0A 00                .byte 10, 0
002F89r 3  rr rr rr rr          .word nt_sd_readsector, xt_fat32_init, z_fat32_init
002F8Dr 3  rr rr        
002F8Fr 3  66 61 74 33          .byte "fat32_init"
002F93r 3  32 5F 69 6E  
002F97r 3  69 74        
002F99r 3               
002F99r 3               nt_fat32_root:
002F99r 3  0A 00                .byte 10, 0
002F9Br 3  rr rr rr rr          .word nt_fat32_init, xt_fat32_root, z_fat32_root
002F9Fr 3  rr rr        
002FA1r 3  66 61 74 33          .byte "fat32_root"
002FA5r 3  32 5F 72 6F  
002FA9r 3  6F 74        
002FABr 3               
002FABr 3               nt_fat32_find:
002FABr 3  0A 00                .byte 10, 0
002FADr 3  rr rr rr rr          .word nt_fat32_root, xt_fat32_find, z_fat32_find
002FB1r 3  rr rr        
002FB3r 3  66 61 74 33          .byte "fat32_find"
002FB7r 3  32 5F 66 69  
002FBBr 3  6E 64        
002FBDr 3               
002FBDr 3               nt_time:
002FBDr 3  04 00                .byte 4, 0
002FBFr 3  rr rr rr rr          .word nt_fat32_find, xt_time, z_time
002FC3r 3  rr rr        
002FC5r 3  74 69 6D 65          .byte "time"
002FC9r 3               
002FC9r 3               nt_ed:                  ; ed6502
002FC9r 3  02 08                .byte 2, NN
002FCBr 3  rr rr rr rr          .word nt_time, xt_ed, z_ed
002FCFr 3  rr rr        
002FD1r 3  65 64                .byte "ed"
002FD3r 3               
002FD3r 3  03 08        nt_see: .byte 3, NN
002FD5r 3  rr rr rr rr          .word nt_ed, xt_see, z_see
002FD9r 3  rr rr        
002FDBr 3  73 65 65             .byte "see"
002FDEr 3               
002FDEr 3               nt_forth:
002FDEr 3  05 00                .byte 5, 0
002FE0r 3  rr rr rr rr          .word nt_see, xt_forth, z_forth
002FE4r 3  rr rr        
002FE6r 3  66 6F 72 74          .byte "forth"
002FEAr 3  68           
002FEBr 3               
002FEBr 3               nt_order:
002FEBr 3  05 00                .byte 5, 0
002FEDr 3  rr rr rr rr          .word nt_forth, xt_order, z_order
002FF1r 3  rr rr        
002FF3r 3  6F 72 64 65          .byte "order"
002FF7r 3  72           
002FF8r 3               
002FF8r 3               nt_to_order:
002FF8r 3  06 00                .byte 6, 0
002FFAr 3  rr rr rr rr          .word nt_order, xt_to_order, z_to_order
002FFEr 3  rr rr        
003000r 3  3E 6F 72 64          .byte ">order"
003004r 3  65 72        
003006r 3               
003006r 3               nt_previous:
003006r 3  08 00                .byte 8, 0
003008r 3  rr rr rr rr          .word nt_to_order, xt_previous, z_previous
00300Cr 3  rr rr        
00300Er 3  70 72 65 76          .byte "previous"
003012r 3  69 6F 75 73  
003016r 3               
003016r 3               nt_also:
003016r 3  04 00                .byte 4, 0
003018r 3  rr rr rr rr          .word nt_previous, xt_also, z_also
00301Cr 3  rr rr        
00301Er 3  61 6C 73 6F          .byte "also"
003022r 3               
003022r 3               nt_only:
003022r 3  04 00                .byte 4, 0
003024r 3  rr rr rr rr          .word nt_also, xt_only, z_only
003028r 3  rr rr        
00302Ar 3  6F 6E 6C 79          .byte "only"
00302Er 3               
00302Er 3               nt_forth_wordlist:      ; shares code with ZERO
00302Er 3  0E 00                .byte 14, 0
003030r 3  rr rr rr rr          .word nt_only, xt_forth_wordlist, z_forth_wordlist
003034r 3  rr rr        
003036r 3  66 6F 72 74          .byte "forth-wordlist"
00303Ar 3  68 2D 77 6F  
00303Er 3  72 64 6C 69  
003044r 3               
003044r 3               nt_editor_wordlist:     ; shares code with ONE
003044r 3  0F 00                .byte 15, 0
003046r 3  rr rr rr rr          .word nt_forth_wordlist, xt_editor_wordlist, z_editor_wordlist
00304Ar 3  rr rr        
00304Cr 3  65 64 69 74          .byte "editor-wordlist"
003050r 3  6F 72 2D 77  
003054r 3  6F 72 64 6C  
00305Br 3               
00305Br 3               nt_assembler_wordlist:  ; shares code with TWO
00305Br 3  12 00                .byte 18, 0
00305Dr 3  rr rr rr rr          .word nt_editor_wordlist, xt_assembler_wordlist, z_assembler_wordlist
003061r 3  rr rr        
003063r 3  61 73 73 65          .byte "assembler-wordlist"
003067r 3  6D 62 6C 65  
00306Br 3  72 2D 77 6F  
003075r 3               
003075r 3               nt_root_wordlist:
003075r 3  0D 00                .byte 13, 0
003077r 3  rr rr rr rr          .word nt_assembler_wordlist, xt_root_wordlist, z_root_wordlist
00307Br 3  rr rr        
00307Dr 3  72 6F 6F 74          .byte "root-wordlist"
003081r 3  2D 77 6F 72  
003085r 3  64 6C 69 73  
00308Ar 3               
00308Ar 3               nt_get_order:
00308Ar 3  09 00                .byte 9, 0
00308Cr 3  rr rr rr rr          .word nt_root_wordlist, xt_get_order, z_get_order
003090r 3  rr rr        
003092r 3  67 65 74 2D          .byte "get-order"
003096r 3  6F 72 64 65  
00309Ar 3  72           
00309Br 3               
00309Br 3               nt_set_order:
00309Br 3  09 00                .byte 9, 0
00309Dr 3  rr rr rr rr          .word nt_get_order, xt_set_order, z_set_order
0030A1r 3  rr rr        
0030A3r 3  73 65 74 2D          .byte "set-order"
0030A7r 3  6F 72 64 65  
0030ABr 3  72           
0030ACr 3               
0030ACr 3               nt_get_current:
0030ACr 3  0B 00                .byte 11, 0
0030AEr 3  rr rr rr rr          .word nt_set_order, xt_get_current, z_get_current
0030B2r 3  rr rr        
0030B4r 3  67 65 74 2D          .byte "get-current"
0030B8r 3  63 75 72 72  
0030BCr 3  65 6E 74     
0030BFr 3               
0030BFr 3               nt_set_current:
0030BFr 3  0B 10                .byte 11, UF
0030C1r 3  rr rr rr rr          .word nt_get_current, xt_set_current, z_set_current
0030C5r 3  rr rr        
0030C7r 3  73 65 74 2D          .byte "set-current"
0030CBr 3  63 75 72 72  
0030CFr 3  65 6E 74     
0030D2r 3               
0030D2r 3               nt_search_wordlist:
0030D2r 3  0F 10                .byte 15, UF
0030D4r 3  rr rr rr rr          .word nt_set_current, xt_search_wordlist, z_search_wordlist
0030D8r 3  rr rr        
0030DAr 3  73 65 61 72          .byte "search-wordlist"
0030DEr 3  63 68 2D 77  
0030E2r 3  6F 72 64 6C  
0030E9r 3               
0030E9r 3               nt_wordlist:
0030E9r 3  08 00                .byte 8, 0
0030EBr 3  rr rr rr rr          .word nt_search_wordlist, xt_wordlist, z_wordlist
0030EFr 3  rr rr        
0030F1r 3  77 6F 72 64          .byte "wordlist"
0030F5r 3  6C 69 73 74  
0030F9r 3               
0030F9r 3               nt_definitions:
0030F9r 3  0B 00                .byte 11, 0
0030FBr 3  rr rr rr rr          .word nt_wordlist, xt_definitions, z_definitions
0030FFr 3  rr rr        
003101r 3  64 65 66 69          .byte "definitions"
003105r 3  6E 69 74 69  
003109r 3  6F 6E 73     
00310Cr 3               
00310Cr 3               nt_block_ramdrive_init:
00310Cr 3  13 10                .byte 19, UF
00310Er 3  rr rr rr rr          .word nt_definitions, xt_block_ramdrive_init, z_block_ramdrive_init
003112r 3  rr rr        
003114r 3  62 6C 6F 63          .byte "block-ramdrive-init"
003118r 3  6B 2D 72 61  
00311Cr 3  6D 64 72 69  
003127r 3               
003127r 3               nt_list:
003127r 3  04 10                .byte 4, UF
003129r 3  rr rr rr rr          .word nt_block_ramdrive_init, xt_list, z_list
00312Dr 3  rr rr        
00312Fr 3  6C 69 73 74          .byte "list"
003133r 3               
003133r 3               nt_thru:
003133r 3  04 10                .byte 4, UF
003135r 3  rr rr rr rr          .word nt_list, xt_thru, z_thru
003139r 3  rr rr        
00313Br 3  74 68 72 75          .byte "thru"
00313Fr 3               
00313Fr 3               nt_load:
00313Fr 3  04 10                .byte 4, UF
003141r 3  rr rr rr rr          .word nt_thru, xt_load, z_load
003145r 3  rr rr        
003147r 3  6C 6F 61 64          .byte "load"
00314Br 3               
00314Br 3               nt_flush:
00314Br 3  05 00                .byte 5, 0
00314Dr 3  rr rr rr rr          .word nt_load, xt_flush, z_flush
003151r 3  rr rr        
003153r 3  66 6C 75 73          .byte "flush"
003157r 3  68           
003158r 3               
003158r 3               nt_empty_buffers:
003158r 3  0D 00                .byte 13, 0
00315Ar 3  rr rr rr rr          .word nt_flush, xt_empty_buffers, z_empty_buffers
00315Er 3  rr rr        
003160r 3  65 6D 70 74          .byte "empty-buffers"
003164r 3  79 2D 62 75  
003168r 3  66 66 65 72  
00316Dr 3               
00316Dr 3               nt_buffer:
00316Dr 3  06 00                .byte 6, 0
00316Fr 3  rr rr rr rr          .word nt_empty_buffers, xt_buffer, z_buffer
003173r 3  rr rr        
003175r 3  62 75 66 66          .byte "buffer"
003179r 3  65 72        
00317Br 3               
00317Br 3               nt_update:
00317Br 3  06 00                .byte 6, 0
00317Dr 3  rr rr rr rr          .word nt_buffer, xt_update, z_update
003181r 3  rr rr        
003183r 3  75 70 64 61          .byte "update"
003187r 3  74 65        
003189r 3               
003189r 3               nt_block:
003189r 3  05 00                .byte 5, 0
00318Br 3  rr rr rr rr          .word nt_update, xt_block, z_block
00318Fr 3  rr rr        
003191r 3  62 6C 6F 63          .byte "block"
003195r 3  6B           
003196r 3               
003196r 3               nt_save_buffers:
003196r 3  0C 00                .byte 12, 0
003198r 3  rr rr rr rr          .word nt_block, xt_save_buffers, z_save_buffers
00319Cr 3  rr rr        
00319Er 3  73 61 76 65          .byte "save-buffers"
0031A2r 3  2D 62 75 66  
0031A6r 3  66 65 72 73  
0031AAr 3               
0031AAr 3               nt_block_read_vector:
0031AAr 3  11 28                .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
0031ACr 3  rr rr rr rr          .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
0031B0r 3  rr rr        
0031B2r 3  62 6C 6F 63          .byte "block-read-vector"
0031B6r 3  6B 2D 72 65  
0031BAr 3  61 64 2D 76  
0031C3r 3               
0031C3r 3               nt_block_read:
0031C3r 3  0A 28                .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
0031C5r 3  rr rr rr rr          .word nt_block_read_vector, xt_block_read, z_block_read
0031C9r 3  rr rr        
0031CBr 3  62 6C 6F 63          .byte "block-read"
0031CFr 3  6B 2D 72 65  
0031D3r 3  61 64        
0031D5r 3               
0031D5r 3               nt_block_write_vector:
0031D5r 3  12 08                .byte 18, NN ; Deferred words need the HC (Code Field) flag.
0031D7r 3  rr rr rr rr          .word nt_block_read, xt_block_write_vector, z_block_write_vector
0031DBr 3  rr rr        
0031DDr 3  62 6C 6F 63          .byte "block-write-vector"
0031E1r 3  6B 2D 77 72  
0031E5r 3  69 74 65 2D  
0031EFr 3               
0031EFr 3               nt_block_write:
0031EFr 3  0B 08                .byte 11, NN ; Deferred words need the HC (Code Field) flag.
0031F1r 3  rr rr rr rr          .word nt_block_write_vector, xt_block_write, z_block_write
0031F5r 3  rr rr        
0031F7r 3  62 6C 6F 63          .byte "block-write"
0031FBr 3  6B 2D 77 72  
0031FFr 3  69 74 65     
003202r 3               
003202r 3               nt_blk:
003202r 3  03 00                .byte 3, 0
003204r 3  rr rr rr rr          .word nt_block_write, xt_blk, z_blk
003208r 3  rr rr        
00320Ar 3  62 6C 6B             .byte "blk"
00320Dr 3               
00320Dr 3               nt_scr:
00320Dr 3  03 00                .byte 3, 0
00320Fr 3  rr rr rr rr          .word nt_blk, xt_scr, z_scr
003213r 3  rr rr        
003215r 3  73 63 72             .byte "scr"
003218r 3               
003218r 3               nt_blkbuffer:
003218r 3  09 00                .byte 9, 0
00321Ar 3  rr rr rr rr          .word nt_scr, xt_blkbuffer, z_blkbuffer
00321Er 3  rr rr        
003220r 3  62 6C 6B 62          .byte "blkbuffer"
003224r 3  75 66 66 65  
003228r 3  72           
003229r 3               
003229r 3               nt_buffblocknum:
003229r 3  0C 00                .byte 12, 0
00322Br 3  rr rr rr rr          .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
00322Fr 3  rr rr        
003231r 3  62 75 66 66          .byte "buffblocknum"
003235r 3  62 6C 6F 63  
003239r 3  6B 6E 75 6D  
00323Dr 3               
00323Dr 3               nt_buffstatus:
00323Dr 3  0A 00                .byte 10, 0
00323Fr 3  rr rr rr rr          .word nt_buffblocknum, xt_buffstatus, z_buffstatus
003243r 3  rr rr        
003245r 3  62 75 66 66          .byte "buffstatus"
003249r 3  73 74 61 74  
00324Dr 3  75 73        
00324Fr 3               
00324Fr 3               nt_buffer_colon:
00324Fr 3  07 00                .byte 7, 0
003251r 3  rr rr rr rr          .word nt_buffstatus, xt_buffer_colon, z_buffer_colon
003255r 3  rr rr        
003257r 3  62 75 66 66          .byte "buffer:"
00325Br 3  65 72 3A     
00325Er 3               
00325Er 3               nt_useraddr:
00325Er 3  08 00                .byte 8, 0
003260r 3  rr rr rr rr          .word nt_buffer_colon, xt_useraddr, z_useraddr
003264r 3  rr rr        
003266r 3  75 73 65 72          .byte "useraddr"
00326Ar 3  61 64 64 72  
00326Er 3               
00326Er 3               nt_action_of:
00326Er 3  09 04                .byte 9, IM
003270r 3  rr rr rr rr          .word nt_useraddr, xt_action_of, z_action_of
003274r 3  rr rr        
003276r 3  61 63 74 69          .byte "action-of"
00327Ar 3  6F 6E 2D 6F  
00327Er 3  66           
00327Fr 3               
00327Fr 3               nt_is:
00327Fr 3  02 04                .byte 2, IM
003281r 3  rr rr rr rr          .word nt_action_of, xt_is, z_is
003285r 3  rr rr        
003287r 3  69 73                .byte "is"
003289r 3               
003289r 3               nt_defer_store:
003289r 3  06 00                .byte 6, 0
00328Br 3  rr rr rr rr          .word nt_is, xt_defer_store, z_defer_store
00328Fr 3  rr rr        
003291r 3  64 65 66 65          .byte "defer!"
003295r 3  72 21        
003297r 3               
003297r 3               nt_defer_fetch:
003297r 3  06 00                .byte 6, 0
003299r 3  rr rr rr rr          .word nt_defer_store, xt_defer_fetch, z_defer_fetch
00329Dr 3  rr rr        
00329Fr 3  64 65 66 65          .byte "defer@"
0032A3r 3  72 40        
0032A5r 3               
0032A5r 3               nt_endcase:
0032A5r 3  07 0D                .byte 7, IM+CO+NN
0032A7r 3  rr rr rr rr          .word nt_defer_fetch, xt_endcase, z_endcase
0032ABr 3  rr rr        
0032ADr 3  65 6E 64 63          .byte "endcase"
0032B1r 3  61 73 65     
0032B4r 3               
0032B4r 3               nt_endof:
0032B4r 3  05 0D                .byte 5, IM+CO+NN
0032B6r 3  rr rr rr rr          .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
0032BAr 3  rr rr        
0032BCr 3  65 6E 64 6F          .byte "endof"
0032C0r 3  66           
0032C1r 3               
0032C1r 3               nt_of:
0032C1r 3  02 0D                .byte 2, IM+CO+NN
0032C3r 3  rr rr rr rr          .word nt_endof, xt_of, z_of
0032C7r 3  rr rr        
0032C9r 3  6F 66                .byte "of"
0032CBr 3               
0032CBr 3               nt_case:
0032CBr 3  04 0D                .byte 4, IM+CO+NN
0032CDr 3  rr rr rr rr          .word nt_of, xt_case, z_case    ; shares code with ZERO
0032D1r 3  rr rr        
0032D3r 3  63 61 73 65          .byte "case"
0032D7r 3               
0032D7r 3               nt_while:
0032D7r 3  05 0D                .byte 5, IM+CO+NN
0032D9r 3  rr rr rr rr          .word nt_case, xt_while, z_while
0032DDr 3  rr rr        
0032DFr 3  77 68 69 6C          .byte "while"
0032E3r 3  65           
0032E4r 3               
0032E4r 3               nt_until:
0032E4r 3  05 0D                .byte 5, IM+CO+NN
0032E6r 3  rr rr rr rr          .word nt_while, xt_until, z_until
0032EAr 3  rr rr        
0032ECr 3  75 6E 74 69          .byte "until"
0032F0r 3  6C           
0032F1r 3               
0032F1r 3               nt_repeat:
0032F1r 3  06 0D                .byte 6, IM+CO+NN
0032F3r 3  rr rr rr rr          .word nt_until, xt_repeat, z_repeat
0032F7r 3  rr rr        
0032F9r 3  72 65 70 65          .byte "repeat"
0032FDr 3  61 74        
0032FFr 3               
0032FFr 3               nt_else:
0032FFr 3  04 0D                .byte 4, IM+CO+NN
003301r 3  rr rr rr rr          .word nt_repeat, xt_else, z_else
003305r 3  rr rr        
003307r 3  65 6C 73 65          .byte "else"
00330Br 3               
00330Br 3               nt_then:
00330Br 3  04 0D                .byte 4, IM+CO+NN
00330Dr 3  rr rr rr rr          .word nt_else, xt_then, z_then
003311r 3  rr rr        
003313r 3  74 68 65 6E          .byte "then"
003317r 3               
003317r 3               nt_if:
003317r 3  02 0D                .byte 2, IM+CO+NN
003319r 3  rr rr rr rr          .word nt_then, xt_if, z_if
00331Dr 3  rr rr        
00331Fr 3  69 66                .byte "if"
003321r 3               
003321r 3               nt_dot_paren:
003321r 3  02 04                .byte 2, IM
003323r 3  rr rr rr rr          .word nt_if, xt_dot_paren, z_dot_paren
003327r 3  rr rr        
003329r 3  2E 28                .byte ".("
00332Br 3               
00332Br 3               nt_paren:
00332Br 3  01 04                .byte 1, IM
00332Dr 3  rr rr rr rr          .word nt_dot_paren, xt_paren, z_paren
003331r 3  rr rr        
003333r 3  28                   .byte "("
003334r 3               
003334r 3               nt_word:
003334r 3  04 10                .byte 4, UF
003336r 3  rr rr rr rr          .word nt_paren, xt_word, z_word
00333Ar 3  rr rr        
00333Cr 3  77 6F 72 64          .byte "word"
003340r 3               
003340r 3               nt_find:
003340r 3  04 10                .byte 4, UF
003342r 3  rr rr rr rr          .word nt_word, xt_find, z_find
003346r 3  rr rr        
003348r 3  66 69 6E 64          .byte "find"
00334Cr 3               
00334Cr 3               nt_environment_q:
00334Cr 3  0C 10                .byte 12, UF
00334Er 3  rr rr rr rr          .word nt_find, xt_environment_q, z_environment_q
003352r 3  rr rr        
003354r 3  65 6E 76 69          .byte "environment?"
003358r 3  72 6F 6E 6D  
00335Cr 3  65 6E 74 3F  
003360r 3               
003360r 3               nt_search:
003360r 3  06 18                .byte 6, UF+NN
003362r 3  rr rr rr rr          .word nt_environment_q, xt_search, z_search
003366r 3  rr rr        
003368r 3  73 65 61 72          .byte "search"
00336Cr 3  63 68        
00336Er 3               
00336Er 3               nt_compare:
00336Er 3  07 10                .byte 7, UF
003370r 3  rr rr rr rr          .word nt_search, xt_compare, z_compare
003374r 3  rr rr        
003376r 3  63 6F 6D 70          .byte "compare"
00337Ar 3  61 72 65     
00337Dr 3               
00337Dr 3               nt_disasm:
00337Dr 3  06 10                .byte 6, UF
00337Fr 3  rr rr rr rr          .word nt_compare, xt_disasm, z_disasm
003383r 3  rr rr        
003385r 3  64 69 73 61          .byte "disasm"
003389r 3  73 6D        
00338Br 3               
00338Br 3               nt_dot_s:
00338Br 3  02 00                .byte 2, 0
00338Dr 3  rr rr rr rr          .word nt_disasm, xt_dot_s, z_dot_s
003391r 3  rr rr        
003393r 3  2E 73                .byte ".s"
003395r 3               
003395r 3               nt_dump:
003395r 3  04 10                .byte 4, UF
003397r 3  rr rr rr rr          .word nt_dot_s, xt_dump, z_dump
00339Br 3  rr rr        
00339Dr 3  64 75 6D 70          .byte "dump"
0033A1r 3               
0033A1r 3               nt_bell:
0033A1r 3  04 00                .byte 4, 0
0033A3r 3  rr rr rr rr          .word nt_dump, xt_bell, z_bell
0033A7r 3  rr rr        
0033A9r 3  62 65 6C 6C          .byte "bell"
0033ADr 3               
0033ADr 3               nt_align:
0033ADr 3  05 00                .byte 5, 0
0033AFr 3  rr rr rr rr          .word nt_bell, xt_align, z_align
0033B3r 3  rr rr        
0033B5r 3  61 6C 69 67          .byte "align"
0033B9r 3  6E           
0033BAr 3               
0033BAr 3               nt_aligned:             ; same code as ALIGN
0033BAr 3  07 00                .byte 7, 0
0033BCr 3  rr rr rr rr          .word nt_align, xt_align, z_align
0033C0r 3  rr rr        
0033C2r 3  61 6C 69 67          .byte "aligned"
0033C6r 3  6E 65 64     
0033C9r 3               
0033C9r 3               nt_wordsize:
0033C9r 3  08 10                .byte 8, UF
0033CBr 3  rr rr rr rr          .word nt_aligned, xt_wordsize, z_wordsize
0033CFr 3  rr rr        
0033D1r 3  77 6F 72 64          .byte "wordsize"
0033D5r 3  73 69 7A 65  
0033D9r 3               
0033D9r 3               nt_words:
0033D9r 3  05 00                .byte 5, 0
0033DBr 3  rr rr rr rr          .word nt_wordsize, xt_words, z_words
0033DFr 3  rr rr        
0033E1r 3  77 6F 72 64          .byte "words"
0033E5r 3  73           
0033E6r 3               
0033E6r 3               nt_marker:
0033E6r 3  06 04                .byte 6, IM
0033E8r 3  rr rr rr rr          .word nt_words, xt_marker, z_marker
0033ECr 3  rr rr        
0033EEr 3  6D 61 72 6B          .byte "marker"
0033F2r 3  65 72        
0033F4r 3               
0033F4r 3               nt_at_xy:
0033F4r 3  05 10                .byte 5, UF
0033F6r 3  rr rr rr rr          .word nt_marker, xt_at_xy, z_at_xy
0033FAr 3  rr rr        
0033FCr 3  61 74 2D 78          .byte "at-xy"
003400r 3  79           
003401r 3               
003401r 3               nt_page:
003401r 3  04 00                .byte 4, 0
003403r 3  rr rr rr rr          .word nt_at_xy, xt_page, z_page
003407r 3  rr rr        
003409r 3  70 61 67 65          .byte "page"
00340Dr 3               
00340Dr 3               nt_cr:
00340Dr 3  02 00                .byte 2, 0
00340Fr 3  rr rr rr rr          .word nt_page, xt_cr, z_cr
003413r 3  rr rr        
003415r 3  63 72                .byte "cr"
003417r 3               
003417r 3               nt_input:
003417r 3  05 00                .byte 5, 0
003419r 3  rr rr rr rr          .word nt_cr, xt_input, z_input
00341Dr 3  rr rr        
00341Fr 3  69 6E 70 75          .byte "input"
003423r 3  74           
003424r 3               
003424r 3               nt_output:
003424r 3  06 00                .byte 6, 0
003426r 3  rr rr rr rr          .word nt_input, xt_output, z_output
00342Ar 3  rr rr        
00342Cr 3  6F 75 74 70          .byte "output"
003430r 3  75 74        
003432r 3               
003432r 3               nt_sign:
003432r 3  04 10                .byte 4, UF
003434r 3  rr rr rr rr          .word nt_output, xt_sign, z_sign
003438r 3  rr rr        
00343Ar 3  73 69 67 6E          .byte "sign"
00343Er 3               
00343Er 3               nt_hold:
00343Er 3  04 10                .byte 4, UF
003440r 3  rr rr rr rr          .word nt_sign, xt_hold, z_hold
003444r 3  rr rr        
003446r 3  68 6F 6C 64          .byte "hold"
00344Ar 3               
00344Ar 3               nt_number_sign_greater:
00344Ar 3  02 10                .byte 2, UF
00344Cr 3  rr rr rr rr          .word nt_hold, xt_number_sign_greater, z_number_sign_greater
003450r 3  rr rr        
003452r 3  23 3E                .byte "#>"
003454r 3               
003454r 3               nt_number_sign_s:
003454r 3  02 10                .byte 2, UF
003456r 3  rr rr rr rr          .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
00345Ar 3  rr rr        
00345Cr 3  23 73                .byte "#s"
00345Er 3               
00345Er 3               nt_number_sign:
00345Er 3  01 10                .byte 1, UF
003460r 3  rr rr rr rr          .word nt_number_sign_s, xt_number_sign, z_number_sign
003464r 3  rr rr        
003466r 3  23                   .byte "#"
003467r 3               
003467r 3               nt_less_number_sign:
003467r 3  02 00                .byte 2, 0
003469r 3  rr rr rr rr          .word nt_number_sign, xt_less_number_sign, z_less_number_sign
00346Dr 3  rr rr        
00346Fr 3  3C 23                .byte "<#"
003471r 3               
003471r 3               nt_to_in:
003471r 3  03 00                .byte 3, 0
003473r 3  rr rr rr rr          .word nt_less_number_sign, xt_to_in, z_to_in
003477r 3  rr rr        
003479r 3  3E 69 6E             .byte ">in"
00347Cr 3               
00347Cr 3               nt_within:
00347Cr 3  06 10                .byte 6, UF
00347Er 3  rr rr rr rr          .word nt_to_in, xt_within, z_within
003482r 3  rr rr        
003484r 3  77 69 74 68          .byte "within"
003488r 3  69 6E        
00348Ar 3               
00348Ar 3               nt_hexstore:
00348Ar 3  08 10                .byte 8, UF
00348Cr 3  rr rr rr rr          .word nt_within, xt_hexstore, z_hexstore
003490r 3  rr rr        
003492r 3  68 65 78 73          .byte "hexstore"
003496r 3  74 6F 72 65  
00349Ar 3               
00349Ar 3               nt_cleave:
00349Ar 3  06 10                .byte 6, UF
00349Cr 3  rr rr rr rr          .word nt_hexstore, xt_cleave, z_cleave
0034A0r 3  rr rr        
0034A2r 3  63 6C 65 61          .byte "cleave"
0034A6r 3  76 65        
0034A8r 3               
0034A8r 3               nt_pad:
0034A8r 3  03 00                .byte 3, 0
0034AAr 3  rr rr rr rr          .word nt_cleave, xt_pad, z_pad
0034AEr 3  rr rr        
0034B0r 3  70 61 64             .byte "pad"
0034B3r 3               
0034B3r 3               nt_cmove:
0034B3r 3  05 10                .byte 5, UF
0034B5r 3  rr rr rr rr          .word nt_pad, xt_cmove, z_cmove
0034B9r 3  rr rr        
0034BBr 3  63 6D 6F 76          .byte "cmove"
0034BFr 3  65           
0034C0r 3               
0034C0r 3               nt_cmove_up:
0034C0r 3  06 10                .byte 6, UF
0034C2r 3  rr rr rr rr          .word nt_cmove, xt_cmove_up, z_cmove_up
0034C6r 3  rr rr        
0034C8r 3  63 6D 6F 76          .byte "cmove>"
0034CCr 3  65 3E        
0034CEr 3               
0034CEr 3               nt_move:
0034CEr 3  04 18                .byte 4, NN+UF
0034D0r 3  rr rr rr rr          .word nt_cmove_up, xt_move, z_move
0034D4r 3  rr rr        
0034D6r 3  6D 6F 76 65          .byte "move"
0034DAr 3               
0034DAr 3               nt_backslash:
0034DAr 3  01 04                .byte 1, IM
0034DCr 3  rr rr rr rr          .word nt_move, xt_backslash, z_backslash
0034E0r 3  rr rr        
0034E2r 3  5C                   .byte $5c
0034E3r 3               
0034E3r 3               nt_star_slash:
0034E3r 3  02 10                .byte 2, UF
0034E5r 3  rr rr rr rr          .word nt_backslash, xt_star_slash, z_star_slash
0034E9r 3  rr rr        
0034EBr 3  2A 2F                .byte "*/"
0034EDr 3               
0034EDr 3               nt_star_slash_mod:
0034EDr 3  05 10                .byte 5, UF
0034EFr 3  rr rr rr rr          .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
0034F3r 3  rr rr        
0034F5r 3  2A 2F 6D 6F          .byte "*/mod"
0034F9r 3  64           
0034FAr 3               
0034FAr 3               nt_mod:
0034FAr 3  03 10                .byte 3, UF
0034FCr 3  rr rr rr rr          .word nt_star_slash_mod, xt_mod, z_mod
003500r 3  rr rr        
003502r 3  6D 6F 64             .byte "mod"
003505r 3               
003505r 3               nt_slash_mod:
003505r 3  04 10                .byte 4, UF
003507r 3  rr rr rr rr          .word nt_mod, xt_slash_mod, z_slash_mod
00350Br 3  rr rr        
00350Dr 3  2F 6D 6F 64          .byte "/mod"
003511r 3               
003511r 3               nt_slash:
003511r 3  01 10                .byte 1, UF
003513r 3  rr rr rr rr          .word nt_slash_mod, xt_slash, z_slash
003517r 3  rr rr        
003519r 3  2F                   .byte "/"
00351Ar 3               
00351Ar 3               nt_fm_slash_mod:
00351Ar 3  06 10                .byte 6, UF
00351Cr 3  rr rr rr rr          .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
003520r 3  rr rr        
003522r 3  66 6D 2F 6D          .byte "fm/mod"
003526r 3  6F 64        
003528r 3               
003528r 3               nt_sm_slash_rem:
003528r 3  06 10                .byte 6, UF
00352Ar 3  rr rr rr rr          .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
00352Er 3  rr rr        
003530r 3  73 6D 2F 72          .byte "sm/rem"
003534r 3  65 6D        
003536r 3               
003536r 3               nt_um_slash_mod:
003536r 3  06 10                .byte 6, UF
003538r 3  rr rr rr rr          .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
00353Cr 3  rr rr        
00353Er 3  75 6D 2F 6D          .byte "um/mod"
003542r 3  6F 64        
003544r 3               
003544r 3               nt_star:
003544r 3  01 10                .byte 1, UF
003546r 3  rr rr rr rr          .word nt_um_slash_mod, xt_star, z_star
00354Ar 3  rr rr        
00354Cr 3  2A                   .byte "*"
00354Dr 3               
00354Dr 3               nt_um_star:
00354Dr 3  03 10                .byte 3, UF
00354Fr 3  rr rr rr rr          .word nt_star, xt_um_star, z_um_star
003553r 3  rr rr        
003555r 3  75 6D 2A             .byte "um*"
003558r 3               
003558r 3               nt_m_star:
003558r 3  02 10                .byte 2, UF
00355Ar 3  rr rr rr rr          .word nt_um_star, xt_m_star, z_m_star
00355Er 3  rr rr        
003560r 3  6D 2A                .byte "m*"
003562r 3               
003562r 3               nt_count:
003562r 3  05 10                .byte 5, UF
003564r 3  rr rr rr rr          .word nt_m_star, xt_count, z_count
003568r 3  rr rr        
00356Ar 3  63 6F 75 6E          .byte "count"
00356Er 3  74           
00356Fr 3               
00356Fr 3               nt_decimal:
00356Fr 3  07 00                .byte 7, 0
003571r 3  rr rr rr rr          .word nt_count, xt_decimal, z_decimal
003575r 3  rr rr        
003577r 3  64 65 63 69          .byte "decimal"
00357Br 3  6D 61 6C     
00357Er 3               
00357Er 3               nt_hex:
00357Er 3  03 00                .byte 3, 0
003580r 3  rr rr rr rr          .word nt_decimal, xt_hex, z_hex
003584r 3  rr rr        
003586r 3  68 65 78             .byte "hex"
003589r 3               
003589r 3               nt_to_number:
003589r 3  07 10                .byte 7, UF
00358Br 3  rr rr rr rr          .word nt_hex, xt_to_number, z_to_number
00358Fr 3  rr rr        
003591r 3  3E 6E 75 6D          .byte ">number"
003595r 3  62 65 72     
003598r 3               
003598r 3               nt_number:
003598r 3  06 10                .byte 6, UF
00359Ar 3  rr rr rr rr          .word nt_to_number, xt_number, z_number
00359Er 3  rr rr        
0035A0r 3  6E 75 6D 62          .byte "number"
0035A4r 3  65 72        
0035A6r 3               
0035A6r 3               nt_digit_question:
0035A6r 3  06 10                .byte 6, UF
0035A8r 3  rr rr rr rr          .word nt_number, xt_digit_question, z_digit_question
0035ACr 3  rr rr        
0035AEr 3  64 69 67 69          .byte "digit?"
0035B2r 3  74 3F        
0035B4r 3               
0035B4r 3               nt_base:
0035B4r 3  04 00                .byte 4, 0
0035B6r 3  rr rr rr rr          .word nt_digit_question, xt_base, z_base
0035BAr 3  rr rr        
0035BCr 3  62 61 73 65          .byte "base"
0035C0r 3               
0035C0r 3               nt_evaluate:
0035C0r 3  08 10                .byte 8, UF
0035C2r 3  rr rr rr rr          .word nt_base, xt_evaluate, z_evaluate
0035C6r 3  rr rr        
0035C8r 3  65 76 61 6C          .byte "evaluate"
0035CCr 3  75 61 74 65  
0035D0r 3               
0035D0r 3               nt_state:
0035D0r 3  05 00                .byte 5, 0
0035D2r 3  rr rr rr rr          .word nt_evaluate, xt_state, z_state
0035D6r 3  rr rr        
0035D8r 3  73 74 61 74          .byte "state"
0035DCr 3  65           
0035DDr 3               
0035DDr 3               nt_again:
0035DDr 3  05 17                .byte 5, AN+CO+IM+UF
0035DFr 3  rr rr rr rr          .word nt_state, xt_again, z_again
0035E3r 3  rr rr        
0035E5r 3  61 67 61 69          .byte "again"
0035E9r 3  6E           
0035EAr 3               
0035EAr 3               nt_begin:
0035EAr 3  05 07                .byte 5, AN+CO+IM
0035ECr 3  rr rr rr rr          .word nt_again, xt_begin, z_begin
0035F0r 3  rr rr        
0035F2r 3  62 65 67 69          .byte "begin"
0035F6r 3  6E           
0035F7r 3               
0035F7r 3               nt_quit:
0035F7r 3  04 00                .byte 4, 0
0035F9r 3  rr rr rr rr          .word nt_begin, xt_quit, z_quit
0035FDr 3  rr rr        
0035FFr 3  71 75 69 74          .byte "quit"
003603r 3               
003603r 3               nt_recurse:
003603r 3  07 0D                .byte 7, CO+IM+NN
003605r 3  rr rr rr rr          .word nt_quit, xt_recurse, z_recurse
003609r 3  rr rr        
00360Br 3  72 65 63 75          .byte "recurse"
00360Fr 3  72 73 65     
003612r 3               
003612r 3               nt_leave:
003612r 3  05 03                .byte 5, AN+CO
003614r 3  rr rr rr rr          .word nt_recurse, xt_leave, z_leave
003618r 3  rr rr        
00361Ar 3  6C 65 61 76          .byte "leave"
00361Er 3  65           
00361Fr 3               
00361Fr 3               nt_unloop:
00361Fr 3  06 03                .byte 6, AN+CO
003621r 3  rr rr rr rr          .word nt_leave, xt_unloop, z_unloop
003625r 3  rr rr        
003627r 3  75 6E 6C 6F          .byte "unloop"
00362Br 3  6F 70        
00362Dr 3               
00362Dr 3               nt_exit:
00362Dr 3  04 03                .byte 4, AN+CO
00362Fr 3  rr rr rr rr          .word nt_unloop, xt_exit, z_exit
003633r 3  rr rr        
003635r 3  65 78 69 74          .byte "exit"
003639r 3               
003639r 3               nt_plus_loop:
003639r 3  05 05                .byte 5, CO+IM
00363Br 3  rr rr rr rr          .word nt_exit, xt_plus_loop, z_plus_loop
00363Fr 3  rr rr        
003641r 3  2B 6C 6F 6F          .byte "+loop"
003645r 3  70           
003646r 3               
003646r 3               nt_loop:
003646r 3  04 05                .byte 4, CO+IM
003648r 3  rr rr rr rr          .word nt_plus_loop, xt_loop, z_loop
00364Cr 3  rr rr        
00364Er 3  6C 6F 6F 70          .byte "loop"
003652r 3               
003652r 3               nt_j:
003652r 3  01 03                .byte 1, AN+CO
003654r 3  rr rr rr rr          .word nt_loop, xt_j, z_j
003658r 3  rr rr        
00365Ar 3  6A                   .byte "j"
00365Br 3               
00365Br 3               nt_i:
00365Br 3  01 03                .byte 1, AN+CO
00365Dr 3  rr rr rr rr          .word nt_j, xt_i, z_i
003661r 3  rr rr        
003663r 3  69                   .byte "i"
003664r 3               
003664r 3               nt_question_do:
003664r 3  03 0D                .byte 3, CO+IM+NN
003666r 3  rr rr rr rr          .word nt_i, xt_question_do, z_question_do
00366Ar 3  rr rr        
00366Cr 3  3F 64 6F             .byte "?do"
00366Fr 3               
00366Fr 3               nt_do:
00366Fr 3  02 0D                .byte 2, CO+IM+NN
003671r 3  rr rr rr rr          .word nt_question_do, xt_do, z_do
003675r 3  rr rr        
003677r 3  64 6F                .byte "do"
003679r 3               
003679r 3               nt_abort_quote:
003679r 3  06 0D                .byte 6, CO+IM+NN
00367Br 3  rr rr rr rr          .word nt_do, xt_abort_quote, z_abort_quote
00367Fr 3  rr rr        
003681r 3  61 62 6F 72          .byte "abort", $22
003685r 3  74 22        
003687r 3               
003687r 3               nt_abort:
003687r 3  05 00                .byte 5, 0
003689r 3  rr rr rr rr          .word nt_abort_quote, xt_abort, z_abort
00368Dr 3  rr rr        
00368Fr 3  61 62 6F 72          .byte "abort"
003693r 3  74           
003694r 3               
003694r 3               nt_strip_underflow:
003694r 3  0F 00                .byte 15, 0
003696r 3  rr rr rr rr          .word nt_abort, xt_strip_underflow, z_strip_underflow
00369Ar 3  rr rr        
00369Cr 3  73 74 72 69          .byte "strip-underflow"
0036A0r 3  70 2D 75 6E  
0036A4r 3  64 65 72 66  
0036ABr 3               
0036ABr 3               nt_nc_limit:
0036ABr 3  08 00                .byte 8, 0
0036ADr 3  rr rr rr rr          .word nt_strip_underflow, xt_nc_limit, z_nc_limit
0036B1r 3  rr rr        
0036B3r 3  6E 63 2D 6C          .byte "nc-limit"
0036B7r 3  69 6D 69 74  
0036BBr 3               
0036BBr 3               nt_allow_native:
0036BBr 3  0C 00                .byte 12, 0
0036BDr 3  rr rr rr rr          .word nt_nc_limit, xt_allow_native, z_allow_native
0036C1r 3  rr rr        
0036C3r 3  61 6C 6C 6F          .byte "allow-native"
0036C7r 3  77 2D 6E 61  
0036CBr 3  74 69 76 65  
0036CFr 3               
0036CFr 3               nt_always_native:
0036CFr 3  0D 00                .byte 13, 0
0036D1r 3  rr rr rr rr          .word nt_allow_native, xt_always_native, z_always_native
0036D5r 3  rr rr        
0036D7r 3  61 6C 77 61          .byte "always-native"
0036DBr 3  79 73 2D 6E  
0036DFr 3  61 74 69 76  
0036E4r 3               
0036E4r 3               nt_never_native:
0036E4r 3  0C 00                .byte 12, 0
0036E6r 3  rr rr rr rr          .word nt_always_native, xt_never_native, z_never_native
0036EAr 3  rr rr        
0036ECr 3  6E 65 76 65          .byte "never-native"
0036F0r 3  72 2D 6E 61  
0036F4r 3  74 69 76 65  
0036F8r 3               
0036F8r 3               nt_compile_only:
0036F8r 3  0C 00                .byte 12, 0
0036FAr 3  rr rr rr rr          .word nt_never_native, xt_compile_only, z_compile_only
0036FEr 3  rr rr        
003700r 3  63 6F 6D 70          .byte "compile-only"
003704r 3  69 6C 65 2D  
003708r 3  6F 6E 6C 79  
00370Cr 3               
00370Cr 3               nt_immediate:
00370Cr 3  09 00                .byte 9, 0
00370Er 3  rr rr rr rr          .word nt_compile_only, xt_immediate, z_immediate
003712r 3  rr rr        
003714r 3  69 6D 6D 65          .byte "immediate"
003718r 3  64 69 61 74  
00371Cr 3  65           
00371Dr 3               
00371Dr 3               nt_postpone:
00371Dr 3  08 05                .byte 8, IM+CO
00371Fr 3  rr rr rr rr          .word nt_immediate, xt_postpone, z_postpone
003723r 3  rr rr        
003725r 3  70 6F 73 74          .byte "postpone"
003729r 3  70 6F 6E 65  
00372Dr 3               
00372Dr 3               nt_s_backslash_quote:
00372Dr 3  03 04                .byte 3, IM
00372Fr 3  rr rr rr rr          .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
003733r 3  rr rr        
003735r 3  73 5C 22             .byte "s", $5C, $22
003738r 3               
003738r 3               nt_s_quote:
003738r 3  02 0C                .byte 2, IM+NN
00373Ar 3  rr rr rr rr          .word nt_s_backslash_quote, xt_s_quote, z_s_quote
00373Er 3  rr rr        
003740r 3  73 22                .byte "s", $22
003742r 3               
003742r 3               nt_dot_quote:
003742r 3  02 05                .byte 2, CO+IM
003744r 3  rr rr rr rr          .word nt_s_quote, xt_dot_quote, z_dot_quote
003748r 3  rr rr        
00374Ar 3  2E 22                .byte ".", $22
00374Cr 3               
00374Cr 3               nt_sliteral:
00374Cr 3  08 15                .byte 8, CO+IM+UF
00374Er 3  rr rr rr rr          .word nt_dot_quote, xt_sliteral, z_sliteral
003752r 3  rr rr        
003754r 3  73 6C 69 74          .byte "sliteral"
003758r 3  65 72 61 6C  
00375Cr 3               
00375Cr 3               nt_literal:
00375Cr 3  07 15                .byte 7, IM+CO+UF
00375Er 3  rr rr rr rr          .word nt_sliteral, xt_literal, z_literal
003762r 3  rr rr        
003764r 3  6C 69 74 65          .byte "literal"
003768r 3  72 61 6C     
00376Br 3               
00376Br 3               nt_right_bracket:
00376Br 3  01 04                .byte 1, IM
00376Dr 3  rr rr rr rr          .word nt_literal, xt_right_bracket, z_right_bracket
003771r 3  rr rr        
003773r 3  5D                   .byte "]"
003774r 3               
003774r 3               nt_left_bracket:
003774r 3  01 05                .byte 1, IM+CO
003776r 3  rr rr rr rr          .word nt_right_bracket, xt_left_bracket, z_left_bracket
00377Ar 3  rr rr        
00377Cr 3  5B                   .byte "["
00377Dr 3               
00377Dr 3               nt_compile_comma:
00377Dr 3  08 18                .byte 8, UF+NN
00377Fr 3  rr rr rr rr          .word nt_left_bracket, xt_compile_comma, z_compile_comma
003783r 3  rr rr        
003785r 3  63 6F 6D 70          .byte "compile,"
003789r 3  69 6C 65 2C  
00378Dr 3               
00378Dr 3               nt_colon_noname:
00378Dr 3  07 00                .byte 7, 0
00378Fr 3  rr rr rr rr          .word nt_compile_comma, xt_colon_noname, z_colon_noname
003793r 3  rr rr        
003795r 3  3A 6E 6F 6E          .byte ":noname"
003799r 3  61 6D 65     
00379Cr 3               
00379Cr 3               nt_semicolon:
00379Cr 3  01 05                .byte 1, CO+IM
00379Er 3  rr rr rr rr          .word nt_colon_noname, xt_semicolon, z_semicolon
0037A2r 3  rr rr        
0037A4r 3  3B                   .byte ";"
0037A5r 3               
0037A5r 3               nt_colon:
0037A5r 3  01 00                .byte 1, 0
0037A7r 3  rr rr rr rr          .word nt_semicolon, xt_colon, z_colon
0037ABr 3  rr rr        
0037ADr 3  3A                   .byte ":"
0037AEr 3               
0037AEr 3               nt_source_id:
0037AEr 3  09 00                .byte 9, 0
0037B0r 3  rr rr rr rr          .word nt_colon, xt_source_id, z_source_id
0037B4r 3  rr rr        
0037B6r 3  73 6F 75 72          .byte "source-id"
0037BAr 3  63 65 2D 69  
0037BEr 3  64           
0037BFr 3               
0037BFr 3               nt_source:
0037BFr 3  06 00                .byte 6, 0
0037C1r 3  rr rr rr rr          .word nt_source_id, xt_source, z_source
0037C5r 3  rr rr        
0037C7r 3  73 6F 75 72          .byte "source"
0037CBr 3  63 65        
0037CDr 3               
0037CDr 3               nt_execute_parsing:
0037CDr 3  0F 10                .byte 15, UF
0037CFr 3  rr rr rr rr          .word nt_source, xt_execute_parsing, z_execute_parsing
0037D3r 3  rr rr        
0037D5r 3  65 78 65 63          .byte "execute-parsing"
0037D9r 3  75 74 65 2D  
0037DDr 3  70 61 72 73  
0037E4r 3               
0037E4r 3               nt_parse:
0037E4r 3  05 10                .byte 5, UF
0037E6r 3  rr rr rr rr          .word nt_execute_parsing, xt_parse, z_parse
0037EAr 3  rr rr        
0037ECr 3  70 61 72 73          .byte "parse"
0037F0r 3  65           
0037F1r 3               
0037F1r 3               nt_parse_name:
0037F1r 3  0A 08                .byte 10, NN
0037F3r 3  rr rr rr rr          .word nt_parse, xt_parse_name, z_parse_name
0037F7r 3  rr rr        
0037F9r 3  70 61 72 73          .byte "parse-name"
0037FDr 3  65 2D 6E 61  
003801r 3  6D 65        
003803r 3               
003803r 3               nt_latestnt:
003803r 3  08 00                .byte 8, 0
003805r 3  rr rr rr rr          .word nt_parse_name, xt_latestnt, z_latestnt
003809r 3  rr rr        
00380Br 3  6C 61 74 65          .byte "latestnt"
00380Fr 3  73 74 6E 74  
003813r 3               
003813r 3               nt_latestxt:
003813r 3  08 00                .byte 8, 0
003815r 3  rr rr rr rr          .word nt_latestnt, xt_latestxt, z_latestxt
003819r 3  rr rr        
00381Br 3  6C 61 74 65          .byte "latestxt"
00381Fr 3  73 74 78 74  
003823r 3               
003823r 3               nt_defer:
003823r 3  05 00                .byte 5, 0
003825r 3  rr rr rr rr          .word nt_latestxt, xt_defer, z_defer
003829r 3  rr rr        
00382Br 3  64 65 66 65          .byte "defer"
00382Fr 3  72           
003830r 3               
003830r 3               nt_to_body:
003830r 3  05 10                .byte 5, UF
003832r 3  rr rr rr rr          .word nt_defer, xt_to_body, z_to_body
003836r 3  rr rr        
003838r 3  3E 62 6F 64          .byte ">body"
00383Cr 3  79           
00383Dr 3               
00383Dr 3               nt_name_to_string:
00383Dr 3  0B 10                .byte 11, UF
00383Fr 3  rr rr rr rr          .word nt_to_body, xt_name_to_string, z_name_to_string
003843r 3  rr rr        
003845r 3  6E 61 6D 65          .byte "name>string"
003849r 3  3E 73 74 72  
00384Dr 3  69 6E 67     
003850r 3               
003850r 3               nt_int_to_name:
003850r 3  08 10                .byte 8, UF
003852r 3  rr rr rr rr          .word nt_name_to_string, xt_int_to_name, z_int_to_name
003856r 3  rr rr        
003858r 3  69 6E 74 3E          .byte "int>name"
00385Cr 3  6E 61 6D 65  
003860r 3               
003860r 3               nt_name_to_int:
003860r 3  08 10                .byte 8, UF
003862r 3  rr rr rr rr          .word nt_int_to_name, xt_name_to_int, z_name_to_int
003866r 3  rr rr        
003868r 3  6E 61 6D 65          .byte "name>int"
00386Cr 3  3E 69 6E 74  
003870r 3               
003870r 3               nt_bracket_tick:
003870r 3  03 05                .byte 3, CO+IM
003872r 3  rr rr rr rr          .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
003876r 3  rr rr        
003878r 3  5B 27 5D             .byte "[']"
00387Br 3               
00387Br 3               nt_tick:
00387Br 3  01 00                .byte 1, 0
00387Dr 3  rr rr rr rr          .word nt_bracket_tick, xt_tick, z_tick
003881r 3  rr rr        
003883r 3  27                   .byte "'"
003884r 3               
003884r 3               nt_find_name:
003884r 3  09 10                .byte 9, UF
003886r 3  rr rr rr rr          .word nt_tick, xt_find_name, z_find_name
00388Ar 3  rr rr        
00388Cr 3  66 69 6E 64          .byte "find-name"
003890r 3  2D 6E 61 6D  
003894r 3  65           
003895r 3               
003895r 3               nt_fill:
003895r 3  04 10                .byte 4, UF
003897r 3  rr rr rr rr          .word nt_find_name, xt_fill, z_fill
00389Br 3  rr rr        
00389Dr 3  66 69 6C 6C          .byte "fill"
0038A1r 3               
0038A1r 3               nt_blank:
0038A1r 3  05 00                .byte 5, 0     ; underflow checked by FILL
0038A3r 3  rr rr rr rr          .word nt_fill, xt_blank, z_blank
0038A7r 3  rr rr        
0038A9r 3  62 6C 61 6E          .byte "blank"
0038ADr 3  6B           
0038AEr 3               
0038AEr 3               nt_erase:
0038AEr 3  05 00                .byte 5, 0      ; underflow checked by FILL
0038B0r 3  rr rr rr rr          .word nt_blank, xt_erase, z_erase
0038B4r 3  rr rr        
0038B6r 3  65 72 61 73          .byte "erase"
0038BAr 3  65           
0038BBr 3               
0038BBr 3               nt_d_plus:
0038BBr 3  02 10                .byte 2, UF
0038BDr 3  rr rr rr rr          .word nt_erase, xt_d_plus, z_d_plus
0038C1r 3  rr rr        
0038C3r 3  64 2B                .byte "d+"
0038C5r 3               
0038C5r 3               nt_d_minus:
0038C5r 3  02 10                .byte 2, UF
0038C7r 3  rr rr rr rr          .word nt_d_plus, xt_d_minus, z_d_minus
0038CBr 3  rr rr        
0038CDr 3  64 2D                .byte "d-"
0038CFr 3               
0038CFr 3               nt_d_to_s:
0038CFr 3  03 10                .byte 3, UF
0038D1r 3  rr rr rr rr          .word nt_d_minus, xt_d_to_s, z_d_to_s
0038D5r 3  rr rr        
0038D7r 3  64 3E 73             .byte "d>s"
0038DAr 3               
0038DAr 3               nt_s_to_d:
0038DAr 3  03 10                .byte 3, UF
0038DCr 3  rr rr rr rr          .word nt_d_to_s, xt_s_to_d, z_s_to_d
0038E0r 3  rr rr        
0038E2r 3  73 3E 64             .byte "s>d"
0038E5r 3               
0038E5r 3               nt_to:
0038E5r 3  02 0C                .byte 2, NN+IM
0038E7r 3  rr rr rr rr          .word nt_s_to_d, xt_to, z_to
0038EBr 3  rr rr        
0038EDr 3  74 6F                .byte "to"
0038EFr 3               
0038EFr 3               nt_value:               ; same code as CONSTANT
0038EFr 3  05 10                .byte 5, UF
0038F1r 3  rr rr rr rr          .word nt_to, xt_constant, z_constant
0038F5r 3  rr rr        
0038F7r 3  76 61 6C 75          .byte "value"
0038FBr 3  65           
0038FCr 3               
0038FCr 3               nt_constant:
0038FCr 3  08 10                .byte 8, UF
0038FEr 3  rr rr rr rr          .word nt_value, xt_constant, z_constant
003902r 3  rr rr        
003904r 3  63 6F 6E 73          .byte "constant"
003908r 3  74 61 6E 74  
00390Cr 3               
00390Cr 3               nt_variable:
00390Cr 3  08 00                .byte 8, 0
00390Er 3  rr rr rr rr          .word nt_constant, xt_variable, z_variable
003912r 3  rr rr        
003914r 3  76 61 72 69          .byte "variable"
003918r 3  61 62 6C 65  
00391Cr 3               
00391Cr 3               nt_does:
00391Cr 3  05 05                .byte 5, CO+IM
00391Er 3  rr rr rr rr          .word nt_variable, xt_does, z_does
003922r 3  rr rr        
003924r 3  64 6F 65 73          .byte "does>"
003928r 3  3E           
003929r 3               
003929r 3               nt_create:
003929r 3  06 00                .byte 6, 0
00392Br 3  rr rr rr rr          .word nt_does, xt_create, z_create
00392Fr 3  rr rr        
003931r 3  63 72 65 61          .byte "create"
003935r 3  74 65        
003937r 3               
003937r 3               nt_allot:
003937r 3  05 10                .byte 5, UF
003939r 3  rr rr rr rr          .word nt_create, xt_allot, z_allot
00393Dr 3  rr rr        
00393Fr 3  61 6C 6C 6F          .byte "allot"
003943r 3  74           
003944r 3               
003944r 3               nt_key:
003944r 3  03 00                .byte 3, 0
003946r 3  rr rr rr rr          .word nt_allot, xt_key, z_key
00394Ar 3  rr rr        
00394Cr 3  6B 65 79             .byte "key"
00394Fr 3               
00394Fr 3               nt_depth:
00394Fr 3  05 00                .byte 5, 0
003951r 3  rr rr rr rr          .word nt_key, xt_depth, z_depth
003955r 3  rr rr        
003957r 3  64 65 70 74          .byte "depth"
00395Br 3  68           
00395Cr 3               
00395Cr 3               nt_unused:
00395Cr 3  06 00                .byte 6, 0
00395Er 3  rr rr rr rr          .word nt_depth, xt_unused, z_unused
003962r 3  rr rr        
003964r 3  75 6E 75 73          .byte "unused"
003968r 3  65 64        
00396Ar 3               
00396Ar 3               nt_r_to_input:
00396Ar 3  07 08                .byte 7, NN
00396Cr 3  rr rr rr rr          .word nt_unused, xt_r_to_input, z_r_to_input
003970r 3  rr rr        
003972r 3  72 3E 69 6E          .byte "r>input"
003976r 3  70 75 74     
003979r 3               
003979r 3               nt_input_to_r:
003979r 3  07 08                .byte 7, NN
00397Br 3  rr rr rr rr          .word nt_r_to_input, xt_input_to_r, z_input_to_r
00397Fr 3  rr rr        
003981r 3  69 6E 70 75          .byte "input>r"
003985r 3  74 3E 72     
003988r 3               
003988r 3               nt_accept:
003988r 3  06 18                .byte 6, UF+NN
00398Ar 3  rr rr rr rr          .word nt_input_to_r, xt_accept, z_accept
00398Er 3  rr rr        
003990r 3  61 63 63 65          .byte "accept"
003994r 3  70 74        
003996r 3               
003996r 3               nt_refill:
003996r 3  06 00                .byte 6, 0
003998r 3  rr rr rr rr          .word nt_accept, xt_refill, z_refill
00399Cr 3  rr rr        
00399Er 3  72 65 66 69          .byte "refill"
0039A2r 3  6C 6C        
0039A4r 3               
0039A4r 3               nt_slash_string:
0039A4r 3  07 10                .byte 7, UF
0039A6r 3  rr rr rr rr          .word nt_refill, xt_slash_string, z_slash_string
0039AAr 3  rr rr        
0039ACr 3  2F 73 74 72          .byte "/string"
0039B0r 3  69 6E 67     
0039B3r 3               
0039B3r 3               nt_minus_leading:
0039B3r 3  08 10                .byte 8, UF
0039B5r 3  rr rr rr rr          .word nt_slash_string, xt_minus_leading, z_minus_leading
0039B9r 3  rr rr        
0039BBr 3  2D 6C 65 61          .byte "-leading"
0039BFr 3  64 69 6E 67  
0039C3r 3               
0039C3r 3               nt_minus_trailing:
0039C3r 3  09 10                .byte 9, UF
0039C5r 3  rr rr rr rr          .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
0039C9r 3  rr rr        
0039CBr 3  2D 74 72 61          .byte "-trailing"
0039CFr 3  69 6C 69 6E  
0039D3r 3  67           
0039D4r 3               
0039D4r 3               nt_bl:
0039D4r 3  02 00                .byte 2, 0
0039D6r 3  rr rr rr rr          .word nt_minus_trailing, xt_bl, z_bl
0039DAr 3  rr rr        
0039DCr 3  62 6C                .byte "bl"
0039DEr 3               
0039DEr 3               nt_spaces:
0039DEr 3  06 10                .byte 6, UF
0039E0r 3  rr rr rr rr          .word nt_bl, xt_spaces, z_spaces
0039E4r 3  rr rr        
0039E6r 3  73 70 61 63          .byte "spaces"
0039EAr 3  65 73        
0039ECr 3               
0039ECr 3               nt_bounds:
0039ECr 3  06 10                .byte 6, UF
0039EEr 3  rr rr rr rr          .word nt_spaces, xt_bounds, z_bounds
0039F2r 3  rr rr        
0039F4r 3  62 6F 75 6E          .byte "bounds"
0039F8r 3  64 73        
0039FAr 3               
0039FAr 3               nt_c_comma:
0039FAr 3  02 10                .byte 2, UF
0039FCr 3  rr rr rr rr          .word nt_bounds, xt_c_comma, z_c_comma
003A00r 3  rr rr        
003A02r 3  63 2C                .byte "c,"
003A04r 3               
003A04r 3               nt_dnegate:
003A04r 3  07 10                .byte 7, UF
003A06r 3  rr rr rr rr          .word nt_c_comma, xt_dnegate, z_dnegate
003A0Ar 3  rr rr        
003A0Cr 3  64 6E 65 67          .byte "dnegate"
003A10r 3  61 74 65     
003A13r 3               
003A13r 3               nt_negate:
003A13r 3  06 10                .byte 6, UF
003A15r 3  rr rr rr rr          .word nt_dnegate, xt_negate, z_negate
003A19r 3  rr rr        
003A1Br 3  6E 65 67 61          .byte "negate"
003A1Fr 3  74 65        
003A21r 3               
003A21r 3               nt_invert:
003A21r 3  06 10                .byte 6, UF
003A23r 3  rr rr rr rr          .word nt_negate, xt_invert, z_invert
003A27r 3  rr rr        
003A29r 3  69 6E 76 65          .byte "invert"
003A2Dr 3  72 74        
003A2Fr 3               
003A2Fr 3               nt_two_to_r:
003A2Fr 3  03 11                .byte 3, CO+UF          ; native is special case
003A31r 3  rr rr rr rr          .word nt_invert, xt_two_to_r, z_two_to_r
003A35r 3  rr rr        
003A37r 3  32 3E 72             .byte "2>r"
003A3Ar 3               
003A3Ar 3               nt_two_r_from:
003A3Ar 3  03 01                .byte 3, CO             ; native is special case
003A3Cr 3  rr rr rr rr          .word nt_two_to_r, xt_two_r_from, z_two_r_from
003A40r 3  rr rr        
003A42r 3  32 72 3E             .byte "2r>"
003A45r 3               
003A45r 3               nt_two_r_fetch:
003A45r 3  03 09                .byte 3, CO+NN          ; native is special case, leave NN for now
003A47r 3  rr rr rr rr          .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
003A4Br 3  rr rr        
003A4Dr 3  32 72 40             .byte "2r@"
003A50r 3               
003A50r 3               nt_two_literal:
003A50r 3  08 14                .byte 8, UF+IM
003A52r 3  rr rr rr rr          .word nt_two_r_fetch, xt_two_literal, z_two_literal
003A56r 3  rr rr        
003A58r 3  32 6C 69 74          .byte "2literal"
003A5Cr 3  65 72 61 6C  
003A60r 3               
003A60r 3               nt_two_constant:
003A60r 3  09 10                .byte 9, UF
003A62r 3  rr rr rr rr          .word nt_two_literal, xt_two_constant, z_two_constant
003A66r 3  rr rr        
003A68r 3  32 63 6F 6E          .byte "2constant"
003A6Cr 3  73 74 61 6E  
003A70r 3  74           
003A71r 3               
003A71r 3               nt_two_variable:
003A71r 3  09 00                .byte 9, 0
003A73r 3  rr rr rr rr          .word nt_two_constant, xt_two_variable, z_two_variable
003A77r 3  rr rr        
003A79r 3  32 76 61 72          .byte "2variable"
003A7Dr 3  69 61 62 6C  
003A81r 3  65           
003A82r 3               
003A82r 3               nt_two_fetch:
003A82r 3  02 10                .byte 2, UF
003A84r 3  rr rr rr rr          .word nt_two_variable, xt_two_fetch, z_two_fetch
003A88r 3  rr rr        
003A8Ar 3  32 40                .byte "2@"
003A8Cr 3               
003A8Cr 3               nt_two_store:
003A8Cr 3  02 10                .byte 2, UF
003A8Er 3  rr rr rr rr          .word nt_two_fetch, xt_two_store, z_two_store
003A92r 3  rr rr        
003A94r 3  32 21                .byte "2!"
003A96r 3               
003A96r 3               nt_two_over:
003A96r 3  05 10                .byte 5, UF
003A98r 3  rr rr rr rr          .word nt_two_store, xt_two_over, z_two_over
003A9Cr 3  rr rr        
003A9Er 3  32 6F 76 65          .byte "2over"
003AA2r 3  72           
003AA3r 3               
003AA3r 3               nt_two_swap:
003AA3r 3  05 10                .byte 5, UF
003AA5r 3  rr rr rr rr          .word nt_two_over, xt_two_swap, z_two_swap
003AA9r 3  rr rr        
003AABr 3  32 73 77 61          .byte "2swap"
003AAFr 3  70           
003AB0r 3               
003AB0r 3               nt_two_drop:
003AB0r 3  05 10                .byte 5, UF
003AB2r 3  rr rr rr rr          .word nt_two_swap, xt_two_drop, z_two_drop
003AB6r 3  rr rr        
003AB8r 3  32 64 72 6F          .byte "2drop"
003ABCr 3  70           
003ABDr 3               
003ABDr 3               nt_max:
003ABDr 3  03 10                .byte 3, UF
003ABFr 3  rr rr rr rr          .word nt_two_drop, xt_max, z_max
003AC3r 3  rr rr        
003AC5r 3  6D 61 78             .byte "max"
003AC8r 3               
003AC8r 3               nt_min:
003AC8r 3  03 10                .byte 3, UF
003ACAr 3  rr rr rr rr          .word nt_max, xt_min, z_min
003ACEr 3  rr rr        
003AD0r 3  6D 69 6E             .byte "min"
003AD3r 3               
003AD3r 3               nt_zero_less:
003AD3r 3  02 10                .byte 2, UF
003AD5r 3  rr rr rr rr          .word nt_min, xt_zero_less, z_zero_less
003AD9r 3  rr rr        
003ADBr 3  30 3C                .byte "0<"
003ADDr 3               
003ADDr 3               nt_zero_greater:
003ADDr 3  02 10                .byte 2, UF
003ADFr 3  rr rr rr rr          .word nt_zero_less, xt_zero_greater, z_zero_greater
003AE3r 3  rr rr        
003AE5r 3  30 3E                .byte "0>"
003AE7r 3               
003AE7r 3               nt_zero_unequal:
003AE7r 3  03 10                .byte 3, UF
003AE9r 3  rr rr rr rr          .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
003AEDr 3  rr rr        
003AEFr 3  30 3C 3E             .byte "0<>"
003AF2r 3               
003AF2r 3               nt_zero_equal:
003AF2r 3  02 10                .byte 2, UF
003AF4r 3  rr rr rr rr          .word nt_zero_unequal, xt_zero_equal, z_zero_equal
003AF8r 3  rr rr        
003AFAr 3  30 3D                .byte "0="
003AFCr 3               
003AFCr 3               nt_greater_than:
003AFCr 3  01 10                .byte 1, UF
003AFEr 3  rr rr rr rr          .word nt_zero_equal, xt_greater_than, z_greater_than
003B02r 3  rr rr        
003B04r 3  3E                   .byte ">"
003B05r 3               
003B05r 3               nt_u_greater_than:
003B05r 3  02 10                .byte 2, UF
003B07r 3  rr rr rr rr          .word nt_greater_than, xt_u_greater_than, z_u_greater_than
003B0Br 3  rr rr        
003B0Dr 3  75 3E                .byte "u>"
003B0Fr 3               
003B0Fr 3               nt_u_less_than:
003B0Fr 3  02 10                .byte 2, UF
003B11r 3  rr rr rr rr          .word nt_u_greater_than, xt_u_less_than, z_u_less_than
003B15r 3  rr rr        
003B17r 3  75 3C                .byte "u<"
003B19r 3               
003B19r 3               nt_less_than:
003B19r 3  01 10                .byte 1, UF
003B1Br 3  rr rr rr rr          .word nt_u_less_than, xt_less_than, z_less_than
003B1Fr 3  rr rr        
003B21r 3  3C                   .byte "<"
003B22r 3               
003B22r 3               nt_not_equals:
003B22r 3  02 10                .byte 2, UF
003B24r 3  rr rr rr rr          .word nt_less_than, xt_not_equals, z_not_equals
003B28r 3  rr rr        
003B2Ar 3  3C 3E                .byte "<>"
003B2Cr 3               
003B2Cr 3               nt_equal:
003B2Cr 3  01 10                .byte 1, UF
003B2Er 3  rr rr rr rr          .word nt_not_equals, xt_equal, z_equal
003B32r 3  rr rr        
003B34r 3  3D                   .byte "="
003B35r 3               
003B35r 3               nt_two_slash:
003B35r 3  02 10                .byte 2, UF
003B37r 3  rr rr rr rr          .word nt_equal, xt_two_slash, z_two_slash
003B3Br 3  rr rr        
003B3Dr 3  32 2F                .byte "2/"
003B3Fr 3               
003B3Fr 3               nt_two_star:
003B3Fr 3  02 10                .byte 2, UF
003B41r 3  rr rr rr rr          .word nt_two_slash, xt_two_star, z_two_star
003B45r 3  rr rr        
003B47r 3  32 2A                .byte "2*"
003B49r 3               
003B49r 3               nt_one_plus:
003B49r 3  02 10                .byte 2, UF
003B4Br 3  rr rr rr rr          .word nt_two_star, xt_one_plus, z_one_plus
003B4Fr 3  rr rr        
003B51r 3  31 2B                .byte "1+"
003B53r 3               
003B53r 3               nt_one_minus:
003B53r 3  02 10                .byte 2, UF
003B55r 3  rr rr rr rr          .word nt_one_plus, xt_one_minus, z_one_minus
003B59r 3  rr rr        
003B5Br 3  31 2D                .byte "1-"
003B5Dr 3               
003B5Dr 3               nt_here:
003B5Dr 3  04 00                .byte 4, 0
003B5Fr 3  rr rr rr rr          .word nt_one_minus, xt_here, z_here
003B63r 3  rr rr        
003B65r 3  68 65 72 65          .byte "here"
003B69r 3               
003B69r 3               nt_cell_plus:
003B69r 3  05 10                .byte 5, UF
003B6Br 3  rr rr rr rr          .word nt_here, xt_cell_plus, z_cell_plus
003B6Fr 3  rr rr        
003B71r 3  63 65 6C 6C          .byte "cell+"
003B75r 3  2B           
003B76r 3               
003B76r 3               nt_cells:
003B76r 3  05 00                .byte 5, 0
003B78r 3  rr rr rr rr          .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
003B7Cr 3  rr rr        
003B7Er 3  63 65 6C 6C          .byte "cells"
003B82r 3  73           
003B83r 3               
003B83r 3               nt_chars:
003B83r 3  05 12                .byte 5, AN+UF   ; deleted during compile
003B85r 3  rr rr rr rr          .word nt_cells, xt_chars, z_chars
003B89r 3  rr rr        
003B8Br 3  63 68 61 72          .byte "chars"
003B8Fr 3  73           
003B90r 3               
003B90r 3               nt_char_plus:
003B90r 3  05 00                .byte 5, 0
003B92r 3  rr rr rr rr          .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
003B96r 3  rr rr        
003B98r 3  63 68 61 72          .byte "char+"
003B9Cr 3  2B           
003B9Dr 3               
003B9Dr 3               nt_bracket_char:
003B9Dr 3  06 05                .byte 6, CO+IM
003B9Fr 3  rr rr rr rr          .word nt_char_plus, xt_bracket_char, z_bracket_char
003BA3r 3  rr rr        
003BA5r 3  5B 63 68 61          .byte "[char]"
003BA9r 3  72 5D        
003BABr 3               
003BABr 3               nt_char:
003BABr 3  04 00                .byte 4, 0
003BADr 3  rr rr rr rr          .word nt_bracket_char, xt_char, z_char
003BB1r 3  rr rr        
003BB3r 3  63 68 61 72          .byte "char"
003BB7r 3               
003BB7r 3               nt_pick:
003BB7r 3  04 00                .byte 4, 0    ; underflow check is complicated, leave off here
003BB9r 3  rr rr rr rr          .word nt_char, xt_pick, z_pick
003BBDr 3  rr rr        
003BBFr 3  70 69 63 6B          .byte "pick"
003BC3r 3               
003BC3r 3               nt_lshift:
003BC3r 3  06 10                .byte 6, UF
003BC5r 3  rr rr rr rr          .word nt_pick, xt_lshift, z_lshift
003BC9r 3  rr rr        
003BCBr 3  6C 73 68 69          .byte "lshift"
003BCFr 3  66 74        
003BD1r 3               
003BD1r 3               nt_rshift:
003BD1r 3  06 10                .byte 6, UF
003BD3r 3  rr rr rr rr          .word nt_lshift, xt_rshift, z_rshift
003BD7r 3  rr rr        
003BD9r 3  72 73 68 69          .byte "rshift"
003BDDr 3  66 74        
003BDFr 3               
003BDFr 3               nt_xor:
003BDFr 3  03 10                .byte 3, UF
003BE1r 3  rr rr rr rr          .word nt_rshift, xt_xor, z_xor
003BE5r 3  rr rr        
003BE7r 3  78 6F 72             .byte "xor"
003BEAr 3               
003BEAr 3               nt_or:
003BEAr 3  02 10                .byte 2, UF
003BECr 3  rr rr rr rr          .word nt_xor, xt_or, z_or
003BF0r 3  rr rr        
003BF2r 3  6F 72                .byte "or"
003BF4r 3               
003BF4r 3               nt_and:
003BF4r 3  03 10                .byte 3, UF
003BF6r 3  rr rr rr rr          .word nt_or, xt_and, z_and
003BFAr 3  rr rr        
003BFCr 3  61 6E 64             .byte "and"
003BFFr 3               
003BFFr 3               nt_dabs:
003BFFr 3  04 10                .byte 4, UF
003C01r 3  rr rr rr rr          .word nt_and, xt_dabs, z_dabs
003C05r 3  rr rr        
003C07r 3  64 61 62 73          .byte "dabs"
003C0Br 3               
003C0Br 3               nt_abs:
003C0Br 3  03 10                .byte 3, UF
003C0Dr 3  rr rr rr rr          .word nt_dabs, xt_abs, z_abs
003C11r 3  rr rr        
003C13r 3  61 62 73             .byte "abs"
003C16r 3               
003C16r 3               nt_minus:
003C16r 3  01 10                .byte 1, UF
003C18r 3  rr rr rr rr          .word nt_abs, xt_minus, z_minus
003C1Cr 3  rr rr        
003C1Er 3  2D                   .byte "-"
003C1Fr 3               
003C1Fr 3               nt_plus:
003C1Fr 3  01 10                .byte 1, UF
003C21r 3  rr rr rr rr          .word nt_minus, xt_plus, z_plus
003C25r 3  rr rr        
003C27r 3  2B                   .byte "+"
003C28r 3               
003C28r 3               nt_question_dup:
003C28r 3  04 10                .byte 4, UF
003C2Ar 3  rr rr rr rr          .word nt_plus, xt_question_dup, z_question_dup
003C2Er 3  rr rr        
003C30r 3  3F 64 75 70          .byte "?dup"
003C34r 3               
003C34r 3               nt_two_dup:
003C34r 3  04 10                .byte 4, UF
003C36r 3  rr rr rr rr          .word nt_question_dup, xt_two_dup, z_two_dup
003C3Ar 3  rr rr        
003C3Cr 3  32 64 75 70          .byte "2dup"
003C40r 3               
003C40r 3               nt_two:
003C40r 3  01 00                .byte 1, 0
003C42r 3  rr rr rr rr          .word nt_two_dup, xt_two, z_two
003C46r 3  rr rr        
003C48r 3  32                   .byte "2"
003C49r 3               
003C49r 3               nt_one:
003C49r 3  01 00                .byte 1, 0
003C4Br 3  rr rr rr rr          .word nt_two, xt_one, z_one
003C4Fr 3  rr rr        
003C51r 3  31                   .byte "1"
003C52r 3               
003C52r 3               nt_zero:
003C52r 3  01 00                .byte 1, 0
003C54r 3  rr rr rr rr          .word nt_one, xt_zero, z_zero
003C58r 3  rr rr        
003C5Ar 3  30                   .byte "0"
003C5Br 3               
003C5Br 3               nt_space:
003C5Br 3  05 00                .byte 5, 0
003C5Dr 3  rr rr rr rr          .word nt_zero, xt_space, z_space
003C61r 3  rr rr        
003C63r 3  73 70 61 63          .byte "space"
003C67r 3  65           
003C68r 3               
003C68r 3               nt_true:
003C68r 3  04 00                .byte 4, 0
003C6Ar 3  rr rr rr rr          .word nt_space, xt_true, z_true
003C6Er 3  rr rr        
003C70r 3  74 72 75 65          .byte "true"
003C74r 3               
003C74r 3               nt_false:
003C74r 3  05 00                .byte 5, 0
003C76r 3  rr rr rr rr          .word nt_true, xt_false, z_false
003C7Ar 3  rr rr        
003C7Cr 3  66 61 6C 73          .byte "false"
003C80r 3  65           
003C81r 3               
003C81r 3               nt_question:
003C81r 3  01 00                .byte 1, 0
003C83r 3  rr rr rr rr          .word nt_false, xt_question, z_question
003C87r 3  rr rr        
003C89r 3  3F                   .byte "?"
003C8Ar 3               
003C8Ar 3               nt_ud_dot_r:
003C8Ar 3  04 10                .byte 4, UF
003C8Cr 3  rr rr rr rr          .word nt_question, xt_ud_dot_r, z_ud_dot_r
003C90r 3  rr rr        
003C92r 3  75 64 2E 72          .byte "ud.r"
003C96r 3               
003C96r 3               nt_ud_dot:
003C96r 3  03 10                .byte 3, UF
003C98r 3  rr rr rr rr          .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
003C9Cr 3  rr rr        
003C9Er 3  75 64 2E             .byte "ud."
003CA1r 3               
003CA1r 3               nt_d_dot_r:
003CA1r 3  03 10                .byte 3, UF
003CA3r 3  rr rr rr rr          .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
003CA7r 3  rr rr        
003CA9r 3  64 2E 72             .byte "d.r"
003CACr 3               
003CACr 3               nt_d_dot:
003CACr 3  02 10                .byte 2, UF
003CAEr 3  rr rr rr rr          .word nt_d_dot_r, xt_d_dot, z_d_dot
003CB2r 3  rr rr        
003CB4r 3  64 2E                .byte "d."
003CB6r 3               
003CB6r 3               nt_dot_r:
003CB6r 3  02 10                .byte 2, UF
003CB8r 3  rr rr rr rr          .word nt_d_dot, xt_dot_r, z_dot_r
003CBCr 3  rr rr        
003CBEr 3  2E 72                .byte ".r"
003CC0r 3               
003CC0r 3               nt_u_dot_r:
003CC0r 3  03 10                .byte 3, UF
003CC2r 3  rr rr rr rr          .word nt_dot_r, xt_u_dot_r, z_u_dot_r
003CC6r 3  rr rr        
003CC8r 3  75 2E 72             .byte "u.r"
003CCBr 3               
003CCBr 3               nt_u_dot:
003CCBr 3  02 10                .byte 2, UF
003CCDr 3  rr rr rr rr          .word nt_u_dot_r, xt_u_dot, z_u_dot
003CD1r 3  rr rr        
003CD3r 3  75 2E                .byte "u."
003CD5r 3               
003CD5r 3               nt_dot:
003CD5r 3  01 10                .byte 1, UF
003CD7r 3  rr rr rr rr          .word nt_u_dot, xt_dot, z_dot
003CDBr 3  rr rr        
003CDDr 3  2E                   .byte "."
003CDEr 3               
003CDEr 3               nt_type:
003CDEr 3  04 10                .byte 4, UF
003CE0r 3  rr rr rr rr          .word nt_dot, xt_type, z_type
003CE4r 3  rr rr        
003CE6r 3  74 79 70 65          .byte "type"
003CEAr 3               
003CEAr 3               nt_emit:
003CEAr 3  04 18                .byte 4, NN+UF
003CECr 3  rr rr rr rr          .word nt_type, xt_emit, z_emit
003CF0r 3  rr rr        
003CF2r 3  65 6D 69 74          .byte "emit"
003CF6r 3               
003CF6r 3               nt_execute:
003CF6r 3  07 10                .byte 7, UF
003CF8r 3  rr rr rr rr          .word nt_emit, xt_execute, z_execute
003CFCr 3  rr rr        
003CFEr 3  65 78 65 63          .byte "execute"
003D02r 3  75 74 65     
003D05r 3               
003D05r 3               nt_plus_store:
003D05r 3  02 10                .byte 2, UF
003D07r 3  rr rr rr rr          .word nt_execute, xt_plus_store, z_plus_store
003D0Br 3  rr rr        
003D0Dr 3  2B 21                .byte "+!"
003D0Fr 3               
003D0Fr 3               nt_c_store:
003D0Fr 3  02 10                .byte 2, UF
003D11r 3  rr rr rr rr          .word nt_plus_store, xt_c_store, z_c_store
003D15r 3  rr rr        
003D17r 3  63 21                .byte "c!"
003D19r 3               
003D19r 3               nt_c_fetch:
003D19r 3  02 10                .byte 2, UF
003D1Br 3  rr rr rr rr          .word nt_c_store, xt_c_fetch, z_c_fetch
003D1Fr 3  rr rr        
003D21r 3  63 40                .byte "c@"
003D23r 3               
003D23r 3               nt_comma:
003D23r 3  01 10                .byte 1, UF
003D25r 3  rr rr rr rr          .word nt_c_fetch, xt_comma, z_comma
003D29r 3  rr rr        
003D2Br 3  2C                   .byte ","
003D2Cr 3               
003D2Cr 3               nt_tuck:
003D2Cr 3  04 10                .byte 4, UF
003D2Er 3  rr rr rr rr          .word nt_comma, xt_tuck, z_tuck
003D32r 3  rr rr        
003D34r 3  74 75 63 6B          .byte "tuck"
003D38r 3               
003D38r 3               nt_not_rote:
003D38r 3  04 10                .byte 4, UF
003D3Ar 3  rr rr rr rr          .word nt_tuck, xt_not_rote, z_not_rote
003D3Er 3  rr rr        
003D40r 3  2D 72 6F 74          .byte "-rot"
003D44r 3               
003D44r 3               nt_rot:
003D44r 3  03 10                .byte 3, UF
003D46r 3  rr rr rr rr          .word nt_not_rote, xt_rot, z_rot
003D4Ar 3  rr rr        
003D4Cr 3  72 6F 74             .byte "rot"
003D4Fr 3               
003D4Fr 3               nt_nip:
003D4Fr 3  03 10                .byte 3, UF
003D51r 3  rr rr rr rr          .word nt_rot, xt_nip, z_nip
003D55r 3  rr rr        
003D57r 3  6E 69 70             .byte "nip"
003D5Ar 3               
003D5Ar 3               nt_r_fetch:
003D5Ar 3  02 01                .byte 2, CO    ; native is special case
003D5Cr 3  rr rr rr rr          .word nt_nip, xt_r_fetch, z_r_fetch
003D60r 3  rr rr        
003D62r 3  72 40                .byte "r@"
003D64r 3               
003D64r 3               nt_r_from:
003D64r 3  02 01                .byte 2, CO    ; native is special case
003D66r 3  rr rr rr rr          .word nt_r_fetch, xt_r_from, z_r_from
003D6Ar 3  rr rr        
003D6Cr 3  72 3E                .byte "r>"
003D6Er 3               
003D6Er 3               nt_to_r:
003D6Er 3  02 11                .byte 2, CO+UF ; native is special case
003D70r 3  rr rr rr rr          .word nt_r_from, xt_to_r, z_to_r
003D74r 3  rr rr        
003D76r 3  3E 72                .byte ">r"
003D78r 3               
003D78r 3               nt_over:
003D78r 3  04 10                .byte 4, UF
003D7Ar 3  rr rr rr rr          .word nt_to_r, xt_over, z_over
003D7Er 3  rr rr        
003D80r 3  6F 76 65 72          .byte "over"
003D84r 3               
003D84r 3               nt_fetch:
003D84r 3  01 10                .byte 1, UF
003D86r 3  rr rr rr rr          .word nt_over, xt_fetch, z_fetch
003D8Ar 3  rr rr        
003D8Cr 3  40                   .byte "@"
003D8Dr 3               
003D8Dr 3               nt_store:
003D8Dr 3  01 10                .byte 1, UF
003D8Fr 3  rr rr rr rr          .word nt_fetch, xt_store, z_store
003D93r 3  rr rr        
003D95r 3  21                   .byte "!"
003D96r 3               
003D96r 3               nt_swap:
003D96r 3  04 10                .byte 4, UF
003D98r 3  rr rr rr rr          .word nt_store, xt_swap, z_swap
003D9Cr 3  rr rr        
003D9Er 3  73 77 61 70          .byte "swap"
003DA2r 3               
003DA2r 3               nt_dup:
003DA2r 3  03 10                .byte 3, UF
003DA4r 3  rr rr rr rr          .word nt_swap, xt_dup, z_dup
003DA8r 3  rr rr        
003DAAr 3  64 75 70             .byte "dup"
003DADr 3               
003DADr 3               ; DROP is always the first native word in the Dictionary
003DADr 3               dictionary_start:
003DADr 3               nt_drop:
003DADr 3  04 10                .byte 4, UF
003DAFr 3  rr rr rr rr          .word nt_dup, xt_drop, z_drop
003DB3r 3  rr rr        
003DB5r 3  64 72 6F 70          .byte "drop"
003DB9r 3               
003DB9r 3               ; END of FORTH-WORDLIST
003DB9r 3               
003DB9r 3               
003DB9r 3               ; ROOT-WORDLIST
003DB9r 3                       ; This is a short wordlist that has just the words needed to
003DB9r 3                       ; set the wordlists. These words are also included in the
003DB9r 3                       ; FORTH-WORDLIST as well.
003DB9r 3               
003DB9r 3               nt_root_words:
003DB9r 3  05 00                .byte 5, 0
003DBBr 3  00 00 rr rr          .word 0000, xt_words, z_words
003DBFr 3  rr rr        
003DC1r 3  77 6F 72 64          .byte "words"
003DC5r 3  73           
003DC6r 3               
003DC6r 3               nt_root_forth_wordlist: ; shares code with ZERO
003DC6r 3  0E 00                .byte 14, 0
003DC8r 3  rr rr rr rr          .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
003DCCr 3  rr rr        
003DCEr 3  66 6F 72 74          .byte "forth-wordlist"
003DD2r 3  68 2D 77 6F  
003DD6r 3  72 64 6C 69  
003DDCr 3               
003DDCr 3               nt_root_forth:
003DDCr 3  05 00                .byte 5, 0
003DDEr 3  rr rr rr rr          .word nt_root_forth_wordlist, xt_forth, z_forth
003DE2r 3  rr rr        
003DE4r 3  66 6F 72 74          .byte "forth"
003DE8r 3  68           
003DE9r 3               
003DE9r 3               root_dictionary_start:
003DE9r 3               nt_root_set_order:
003DE9r 3  09 00                .byte 9, 0
003DEBr 3  rr rr rr rr          .word nt_root_forth, xt_set_order, z_set_order
003DEFr 3  rr rr        
003DF1r 3  73 65 74 2D          .byte "set-order"
003DF5r 3  6F 72 64 65  
003DF9r 3  72           
003DFAr 3               
003DFAr 3               ; END of ROOT-WORDLIST
003DFAr 3               
003DFAr 3               
003DFAr 3               ; ; EDITOR-WORDLIST
003DFAr 3               
003DFAr 3               ; nt_editor_enter_screen:
003DFAr 3               ;         .byte 12, 0
003DFAr 3               ;         .word 0000, xt_editor_enter_screen, z_editor_enter_screen
003DFAr 3               ;         .byte "enter-screen"
003DFAr 3               
003DFAr 3               ; nt_editor_erase_screen:
003DFAr 3               ;         .byte 12, 0
003DFAr 3               ;         .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
003DFAr 3               ;         .byte "erase-screen"
003DFAr 3               
003DFAr 3               ; nt_editor_el:
003DFAr 3               ;         .byte 2, 0
003DFAr 3               ;         .word nt_editor_erase_screen, xt_editor_el, z_editor_el
003DFAr 3               ;         .byte "el"
003DFAr 3               
003DFAr 3               ; nt_editor_l:
003DFAr 3               ;         .byte 1, 0
003DFAr 3               ;         .word nt_editor_el, xt_editor_l, z_editor_l
003DFAr 3               ;         .byte "l"
003DFAr 3               
003DFAr 3               ; nt_editor_line:
003DFAr 3               ;         .byte 4, UF
003DFAr 3               ;         .word nt_editor_l, xt_editor_line, z_editor_line
003DFAr 3               ;         .byte "line"
003DFAr 3               
003DFAr 3               editor_dictionary_start:
003DFAr 3               ; nt_editor_o:
003DFAr 3               ;         .byte 1, 0
003DFAr 3               ;         .word nt_editor_line, xt_editor_o, z_editor_o
003DFAr 3               ;         .byte "o"
003DFAr 3               
003DFAr 3               ; ; END of EDITOR-WORDLIST
003DFAr 3               
003DFAr 3               
003DFAr 3               ; ; ASSEMBLER-WORDLIST
003DFAr 3               
003DFAr 3               ; ; Labels for the opcodes have the format "nt_asm_<OPC>" where a futher
003DFAr 3               ; ; underscore replaces any dot present in the SAN mnemonic. The hash sign for
003DFAr 3               ; ; immediate addressing is replaced by an "h" (for example, the label code for
003DFAr 3               ; ; "lda.#" is "xt_adm_lda_h"). All opcodes are immediate.
003DFAr 3               assembler_dictionary_start:
003DFAr 3               ; nt_asm_adc_h:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_adc_x
003DFAr 3               ; 		.word xt_asm_adc_h, z_asm_adc_h
003DFAr 3               ; 		.byte "adc.#"
003DFAr 3               
003DFAr 3               ; nt_asm_adc_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_adc_y
003DFAr 3               ; 		.word xt_asm_adc_x, z_asm_adc_x
003DFAr 3               ; 		.byte "adc.x"
003DFAr 3               
003DFAr 3               ; nt_asm_adc_y:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_adc_z
003DFAr 3               ; 		.word xt_asm_adc_y, z_asm_adc_y
003DFAr 3               ; 		.byte "adc.y"
003DFAr 3               
003DFAr 3               ; nt_asm_adc_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_adc_zi
003DFAr 3               ; 		.word xt_asm_adc_z, z_asm_adc_z
003DFAr 3               ; 		.byte "adc.z"
003DFAr 3               
003DFAr 3               ; nt_asm_adc_zi:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_adc_ziy
003DFAr 3               ; 		.word xt_asm_adc_zi, z_asm_adc_zi
003DFAr 3               ; 		.byte "adc.zi"
003DFAr 3               
003DFAr 3               ; nt_asm_adc_ziy:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_adc_zx
003DFAr 3               ; 		.word xt_asm_adc_ziy, z_asm_adc_ziy
003DFAr 3               ; 		.byte "adc.ziy"
003DFAr 3               
003DFAr 3               ; nt_asm_adc_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_adc_zxi
003DFAr 3               ; 		.word xt_asm_adc_zx, z_asm_adc_zx
003DFAr 3               ; 		.byte "adc.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_adc_zxi:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_and
003DFAr 3               ; 		.word xt_asm_adc_zxi, z_asm_adc_zxi
003DFAr 3               ; 		.byte "adc.zxi"
003DFAr 3               
003DFAr 3               ; nt_asm_and:     ; not "and" because of conflicts with Forth word
003DFAr 3               ; 		.byte 4, IM
003DFAr 3               ;                 .word nt_asm_and_h
003DFAr 3               ; 		.word xt_asm_and, z_asm_and
003DFAr 3               ; 		.byte "and."
003DFAr 3               
003DFAr 3               ; nt_asm_and_h:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_and_x
003DFAr 3               ; 		.word xt_asm_and_h, z_asm_and_h
003DFAr 3               ; 		.byte "and.#"
003DFAr 3               
003DFAr 3               ; nt_asm_and_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_and_y
003DFAr 3               ; 		.word xt_asm_and_x, z_asm_and_x
003DFAr 3               ; 		.byte "and.x"
003DFAr 3               
003DFAr 3               ; nt_asm_and_y:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_and_z
003DFAr 3               ; 		.word xt_asm_and_y, z_asm_and_y
003DFAr 3               ; 		.byte "and.y"
003DFAr 3               
003DFAr 3               ; nt_asm_and_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_and_zi
003DFAr 3               ; 		.word xt_asm_and_z, z_asm_and_z
003DFAr 3               ; 		.byte "and.z"
003DFAr 3               
003DFAr 3               ; nt_asm_and_zi:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_and_ziy
003DFAr 3               ; 		.word xt_asm_and_zi, z_asm_and_zi
003DFAr 3               ; 		.byte "and.zi"
003DFAr 3               
003DFAr 3               ; nt_asm_and_ziy:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_and_zx
003DFAr 3               ; 		.word xt_asm_and_ziy, z_asm_and_ziy
003DFAr 3               ; 		.byte "and.ziy"
003DFAr 3               
003DFAr 3               ; nt_asm_and_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_and_zxi
003DFAr 3               ; 		.word xt_asm_and_zx, z_asm_and_zx
003DFAr 3               ; 		.byte "and.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_and_zxi:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_asl
003DFAr 3               ; 		.word xt_asm_and_zxi, z_asm_and_zxi
003DFAr 3               ; 		.byte "and.zxi"
003DFAr 3               
003DFAr 3               ; nt_asm_asl:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_asl_a
003DFAr 3               ; 		.word xt_asm_asl, z_asm_asl
003DFAr 3               ; 		.byte "asl"
003DFAr 3               
003DFAr 3               ; nt_asm_asl_a:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_asl_x
003DFAr 3               ; 		.word xt_asm_asl_a, z_asm_asl_a
003DFAr 3               ; 		.byte "asl.a"
003DFAr 3               
003DFAr 3               ; nt_asm_asl_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_asl_z
003DFAr 3               ; 		.word xt_asm_asl_x, z_asm_asl_x
003DFAr 3               ; 		.byte "asl.x"
003DFAr 3               
003DFAr 3               ; nt_asm_asl_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_asl_zx
003DFAr 3               ; 		.word xt_asm_asl_z, z_asm_asl_z
003DFAr 3               ; 		.byte "asl.z"
003DFAr 3               
003DFAr 3               ; nt_asm_asl_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_bcc
003DFAr 3               ; 		.word xt_asm_asl_zx, z_asm_asl_zx
003DFAr 3               ; 		.byte "asl.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_bcc:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_bcs
003DFAr 3               ; 		.word xt_asm_bcc, z_asm_bcc
003DFAr 3               ; 		.byte "bcc"
003DFAr 3               
003DFAr 3               ; nt_asm_bcs:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_beq
003DFAr 3               ; 		.word xt_asm_bcs, z_asm_bcs
003DFAr 3               ; 		.byte "bcs"
003DFAr 3               
003DFAr 3               ; nt_asm_beq:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_bit
003DFAr 3               ; 		.word xt_asm_beq, z_asm_beq
003DFAr 3               ; 		.byte "beq"
003DFAr 3               
003DFAr 3               ; nt_asm_bit:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_bit_h
003DFAr 3               ; 		.word xt_asm_bit, z_asm_bit
003DFAr 3               ; 		.byte "bit"
003DFAr 3               
003DFAr 3               ; nt_asm_bit_h:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_bit_x
003DFAr 3               ; 		.word xt_asm_bit_h, z_asm_bit_h
003DFAr 3               ; 		.byte "bit.#"
003DFAr 3               
003DFAr 3               ; nt_asm_bit_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_bit_z
003DFAr 3               ; 		.word xt_asm_bit_x, z_asm_bit_x
003DFAr 3               ; 		.byte "bit.x"
003DFAr 3               
003DFAr 3               ; nt_asm_bit_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_bit_zx
003DFAr 3               ; 		.word xt_asm_bit_z, z_asm_bit_z
003DFAr 3               ; 		.byte "bit.z"
003DFAr 3               
003DFAr 3               ; nt_asm_bit_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_bmi
003DFAr 3               ; 		.word xt_asm_bit_zx, z_asm_bit_zx
003DFAr 3               ; 		.byte "bit.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_bmi:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_bne
003DFAr 3               ; 		.word xt_asm_bmi, z_asm_bmi
003DFAr 3               ; 		.byte "bmi"
003DFAr 3               
003DFAr 3               ; nt_asm_bne:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_bpl
003DFAr 3               ; 		.word xt_asm_bne, z_asm_bne
003DFAr 3               ; 		.byte "bne"
003DFAr 3               
003DFAr 3               ; nt_asm_bpl:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_bra
003DFAr 3               ; 		.word xt_asm_bpl, z_asm_bpl
003DFAr 3               ; 		.byte "bpl"
003DFAr 3               
003DFAr 3               ; nt_asm_bra:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_brk
003DFAr 3               ; 		.word xt_asm_bra, z_asm_bra
003DFAr 3               ; 		.byte "bra"
003DFAr 3               
003DFAr 3               ; nt_asm_brk:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_bvc
003DFAr 3               ; 		.word xt_asm_brk, z_asm_brk
003DFAr 3               ; 		.byte "brk"
003DFAr 3               
003DFAr 3               ; nt_asm_bvc:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_bvs
003DFAr 3               ; 		.word xt_asm_bvc, z_asm_bvc
003DFAr 3               ; 		.byte "bvc"
003DFAr 3               
003DFAr 3               ; nt_asm_bvs:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_clc
003DFAr 3               ; 		.word xt_asm_bvs, z_asm_bvs
003DFAr 3               ; 		.byte "bvs"
003DFAr 3               
003DFAr 3               ; nt_asm_clc:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_cld
003DFAr 3               ; 		.word xt_asm_clc, z_asm_clc
003DFAr 3               ; 		.byte "clc"
003DFAr 3               
003DFAr 3               ; nt_asm_cld:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_cli
003DFAr 3               ; 		.word xt_asm_cld, z_asm_cld
003DFAr 3               ; 		.byte "cld"
003DFAr 3               
003DFAr 3               ; nt_asm_cli:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_clv
003DFAr 3               ; 		.word xt_asm_cli, z_asm_cli
003DFAr 3               ; 		.byte "cli"
003DFAr 3               
003DFAr 3               ; nt_asm_clv:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_cmp
003DFAr 3               ; 		.word xt_asm_clv, z_asm_clv
003DFAr 3               ; 		.byte "clv"
003DFAr 3               
003DFAr 3               ; nt_asm_cmp:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_cmp_h
003DFAr 3               ; 		.word xt_asm_cmp, z_asm_cmp
003DFAr 3               ; 		.byte "cmp"
003DFAr 3               
003DFAr 3               ; nt_asm_cmp_h:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_cmp_x
003DFAr 3               ; 		.word xt_asm_cmp_h, z_asm_cmp_h
003DFAr 3               ; 		.byte "cmp.#"
003DFAr 3               
003DFAr 3               ; nt_asm_cmp_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_cmp_y
003DFAr 3               ; 		.word xt_asm_cmp_x, z_asm_cmp_x
003DFAr 3               ; 		.byte "cmp.x"
003DFAr 3               
003DFAr 3               ; nt_asm_cmp_y:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_cmp_z
003DFAr 3               ; 		.word xt_asm_cmp_y, z_asm_cmp_y
003DFAr 3               ; 		.byte "cmp.y"
003DFAr 3               
003DFAr 3               ; nt_asm_cmp_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_cmp_zi
003DFAr 3               ; 		.word xt_asm_cmp_z, z_asm_cmp_z
003DFAr 3               ; 		.byte "cmp.z"
003DFAr 3               
003DFAr 3               ; nt_asm_cmp_zi:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_cmp_ziy
003DFAr 3               ; 		.word xt_asm_cmp_zi, z_asm_cmp_zi
003DFAr 3               ; 		.byte "cmp.zi"
003DFAr 3               
003DFAr 3               ; nt_asm_cmp_ziy:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_cmp_zx
003DFAr 3               ; 		.word xt_asm_cmp_ziy, z_asm_cmp_ziy
003DFAr 3               ; 		.byte "cmp.ziy"
003DFAr 3               
003DFAr 3               ; nt_asm_cmp_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_cmp_zxi
003DFAr 3               ; 		.word xt_asm_cmp_zx, z_asm_cmp_zx
003DFAr 3               ; 		.byte "cmp.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_cmp_zxi:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_cpx
003DFAr 3               ; 		.word xt_asm_cmp_zxi, z_asm_cmp_zxi
003DFAr 3               ; 		.byte "cmp.zxi"
003DFAr 3               
003DFAr 3               ; nt_asm_cpx:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_cpx_h
003DFAr 3               ; 		.word xt_asm_cpx, z_asm_cpx
003DFAr 3               ; 		.byte "cpx"
003DFAr 3               
003DFAr 3               ; nt_asm_cpx_h:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_cpx_z
003DFAr 3               ; 		.word xt_asm_cpx_h, z_asm_cpx_h
003DFAr 3               ; 		.byte "cpx.#"
003DFAr 3               
003DFAr 3               ; nt_asm_cpx_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_cpy
003DFAr 3               ; 		.word xt_asm_cpx_z, z_asm_cpx_z
003DFAr 3               ; 		.byte "cpx.z"
003DFAr 3               
003DFAr 3               ; nt_asm_cpy:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_cpy_h
003DFAr 3               ; 		.word xt_asm_cpy, z_asm_cpy
003DFAr 3               ; 		.byte "cpy"
003DFAr 3               
003DFAr 3               ; nt_asm_cpy_h:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_cpy_z
003DFAr 3               ; 		.word xt_asm_cpy_h, z_asm_cpy_h
003DFAr 3               ; 		.byte "cpy.#"
003DFAr 3               
003DFAr 3               ; nt_asm_cpy_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_dec
003DFAr 3               ; 		.word xt_asm_cpy_z, z_asm_cpy_z
003DFAr 3               ; 		.byte "cpy.z"
003DFAr 3               
003DFAr 3               ; nt_asm_dec:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_dec_a
003DFAr 3               ; 		.word xt_asm_dec, z_asm_dec
003DFAr 3               ; 		.byte "dec"
003DFAr 3               
003DFAr 3               ; nt_asm_dec_a:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_dec_x
003DFAr 3               ; 		.word xt_asm_dec_a, z_asm_dec_a
003DFAr 3               ; 		.byte "dec.a"
003DFAr 3               
003DFAr 3               ; nt_asm_dec_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_dec_z
003DFAr 3               ; 		.word xt_asm_dec_x, z_asm_dec_x
003DFAr 3               ; 		.byte "dec.x"
003DFAr 3               
003DFAr 3               ; nt_asm_dec_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_dec_zx
003DFAr 3               ; 		.word xt_asm_dec_z, z_asm_dec_z
003DFAr 3               ; 		.byte "dec.z"
003DFAr 3               
003DFAr 3               ; nt_asm_dec_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_dex
003DFAr 3               ; 		.word xt_asm_dec_zx, z_asm_dec_zx
003DFAr 3               ; 		.byte "dec.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_dex:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_dey
003DFAr 3               ; 		.word xt_asm_dex, z_asm_dex
003DFAr 3               ; 		.byte "dex"
003DFAr 3               
003DFAr 3               ; nt_asm_dey:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_eor
003DFAr 3               ; 		.word xt_asm_dey, z_asm_dey
003DFAr 3               ; 		.byte "dey"
003DFAr 3               
003DFAr 3               ; nt_asm_eor:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_eor_h
003DFAr 3               ; 		.word xt_asm_eor, z_asm_eor
003DFAr 3               ; 		.byte "eor"
003DFAr 3               
003DFAr 3               ; nt_asm_eor_h:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_eor_x
003DFAr 3               ; 		.word xt_asm_eor_h, z_asm_eor_h
003DFAr 3               ; 		.byte "eor.#"
003DFAr 3               
003DFAr 3               ; nt_asm_eor_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_eor_y
003DFAr 3               ; 		.word xt_asm_eor_x, z_asm_eor_x
003DFAr 3               ; 		.byte "eor.x"
003DFAr 3               
003DFAr 3               ; nt_asm_eor_y:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_eor_z
003DFAr 3               ; 		.word xt_asm_eor_y, z_asm_eor_y
003DFAr 3               ; 		.byte "eor.y"
003DFAr 3               
003DFAr 3               ; nt_asm_eor_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_eor_zi
003DFAr 3               ; 		.word xt_asm_eor_z, z_asm_eor_z
003DFAr 3               ; 		.byte "eor.z"
003DFAr 3               
003DFAr 3               ; nt_asm_eor_zi:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_eor_ziy
003DFAr 3               ; 		.word xt_asm_eor_zi, z_asm_eor_zi
003DFAr 3               ; 		.byte "eor.zi"
003DFAr 3               
003DFAr 3               ; nt_asm_eor_ziy:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_eor_zx
003DFAr 3               ; 		.word xt_asm_eor_ziy, z_asm_eor_ziy
003DFAr 3               ; 		.byte "eor.ziy"
003DFAr 3               
003DFAr 3               ; nt_asm_eor_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_eor_zxi
003DFAr 3               ; 		.word xt_asm_eor_zx, z_asm_eor_zx
003DFAr 3               ; 		.byte "eor.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_eor_zxi:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_inc
003DFAr 3               ; 		.word xt_asm_eor_zxi, z_asm_eor_zxi
003DFAr 3               ; 		.byte "eor.zxi"
003DFAr 3               
003DFAr 3               ; nt_asm_inc:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_inc_a
003DFAr 3               ; 		.word xt_asm_inc, z_asm_inc
003DFAr 3               ; 		.byte "inc"
003DFAr 3               
003DFAr 3               ; nt_asm_inc_a:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_inc_x
003DFAr 3               ; 		.word xt_asm_inc_a, z_asm_inc_a
003DFAr 3               ; 		.byte "inc.a"
003DFAr 3               
003DFAr 3               ; nt_asm_inc_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_inc_z
003DFAr 3               ; 		.word xt_asm_inc_x, z_asm_inc_x
003DFAr 3               ; 		.byte "inc.x"
003DFAr 3               
003DFAr 3               ; nt_asm_inc_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_inc_zx
003DFAr 3               ; 		.word xt_asm_inc_z, z_asm_inc_z
003DFAr 3               ; 		.byte "inc.z"
003DFAr 3               
003DFAr 3               ; nt_asm_inc_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_inx
003DFAr 3               ; 		.word xt_asm_inc_zx, z_asm_inc_zx
003DFAr 3               ; 		.byte "inc.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_inx:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_iny
003DFAr 3               ; 		.word xt_asm_inx, z_asm_inx
003DFAr 3               ; 		.byte "inx"
003DFAr 3               
003DFAr 3               ; nt_asm_iny:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_jmp
003DFAr 3               ; 		.word xt_asm_iny, z_asm_iny
003DFAr 3               ; 		.byte "iny"
003DFAr 3               
003DFAr 3               ; nt_asm_jmp:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_jmp_i
003DFAr 3               ; 		.word xt_asm_jmp, z_asm_jmp
003DFAr 3               ; 		.byte "jmp"
003DFAr 3               
003DFAr 3               ; nt_asm_jmp_i:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_jmp_xi
003DFAr 3               ; 		.word xt_asm_jmp_i, z_asm_jmp_i
003DFAr 3               ; 		.byte "jmp.i"
003DFAr 3               
003DFAr 3               ; nt_asm_jmp_xi:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_jsr
003DFAr 3               ; 		.word xt_asm_jmp_xi, z_asm_jmp_xi
003DFAr 3               ; 		.byte "jmp.xi"
003DFAr 3               
003DFAr 3               ; nt_asm_jsr:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_lda
003DFAr 3               ; 		.word xt_asm_jsr, z_asm_jsr
003DFAr 3               ; 		.byte "jsr"
003DFAr 3               
003DFAr 3               ; nt_asm_lda:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_lda_h
003DFAr 3               ; 		.word xt_asm_lda, z_asm_lda
003DFAr 3               ; 		.byte "lda"
003DFAr 3               
003DFAr 3               ; nt_asm_lda_h:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_lda_x
003DFAr 3               ; 		.word xt_asm_lda_h, z_asm_lda_h
003DFAr 3               ; 		.byte "lda.#"
003DFAr 3               
003DFAr 3               ; nt_asm_lda_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_lda_y
003DFAr 3               ; 		.word xt_asm_lda_x, z_asm_lda_x
003DFAr 3               ; 		.byte "lda.x"
003DFAr 3               
003DFAr 3               ; nt_asm_lda_y:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_lda_z
003DFAr 3               ; 		.word xt_asm_lda_y, z_asm_lda_y
003DFAr 3               ; 		.byte "lda.y"
003DFAr 3               
003DFAr 3               ; nt_asm_lda_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_lda_zi
003DFAr 3               ; 		.word xt_asm_lda_z, z_asm_lda_z
003DFAr 3               ; 		.byte "lda.z"
003DFAr 3               
003DFAr 3               ; nt_asm_lda_zi:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_lda_ziy
003DFAr 3               ; 		.word xt_asm_lda_zi, z_asm_lda_zi
003DFAr 3               ; 		.byte "lda.zi"
003DFAr 3               
003DFAr 3               ; nt_asm_lda_ziy:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_lda_zx
003DFAr 3               ; 		.word xt_asm_lda_ziy, z_asm_lda_ziy
003DFAr 3               ; 		.byte "lda.ziy"
003DFAr 3               
003DFAr 3               ; nt_asm_lda_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_lda_zxi
003DFAr 3               ; 		.word xt_asm_lda_zx, z_asm_lda_zx
003DFAr 3               ; 		.byte "lda.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_lda_zxi:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_ldx
003DFAr 3               ; 		.word xt_asm_lda_zxi, z_asm_lda_zxi
003DFAr 3               ; 		.byte "lda.zxi"
003DFAr 3               
003DFAr 3               ; nt_asm_ldx:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_ldx_h
003DFAr 3               ; 		.word xt_asm_ldx, z_asm_ldx
003DFAr 3               ; 		.byte "ldx"
003DFAr 3               
003DFAr 3               ; nt_asm_ldx_h:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_ldx_y
003DFAr 3               ; 		.word xt_asm_ldx_h, z_asm_ldx_h
003DFAr 3               ; 		.byte "ldx.#"
003DFAr 3               
003DFAr 3               ; nt_asm_ldx_y:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_ldx_z
003DFAr 3               ; 		.word xt_asm_ldx_y, z_asm_ldx_y
003DFAr 3               ; 		.byte "ldx.y"
003DFAr 3               
003DFAr 3               ; nt_asm_ldx_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_ldx_zy
003DFAr 3               ; 		.word xt_asm_ldx_z, z_asm_ldx_z
003DFAr 3               ; 		.byte "ldx.z"
003DFAr 3               
003DFAr 3               ; nt_asm_ldx_zy:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_ldy
003DFAr 3               ; 		.word xt_asm_ldx_zy, z_asm_ldx_zy
003DFAr 3               ; 		.byte "ldx.zy"
003DFAr 3               
003DFAr 3               ; nt_asm_ldy:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_ldy_h
003DFAr 3               ; 		.word xt_asm_ldy, z_asm_ldy
003DFAr 3               ; 		.byte "ldy"
003DFAr 3               
003DFAr 3               ; nt_asm_ldy_h:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_ldy_x
003DFAr 3               ; 		.word xt_asm_ldy_h, z_asm_ldy_h
003DFAr 3               ; 		.byte "ldy.#"
003DFAr 3               
003DFAr 3               ; nt_asm_ldy_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_ldy_z
003DFAr 3               ; 		.word xt_asm_ldy_x, z_asm_ldy_x
003DFAr 3               ; 		.byte "ldy.x"
003DFAr 3               
003DFAr 3               ; nt_asm_ldy_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_ldy_zx
003DFAr 3               ; 		.word xt_asm_ldy_z, z_asm_ldy_z
003DFAr 3               ; 		.byte "ldy.z"
003DFAr 3               
003DFAr 3               ; nt_asm_ldy_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_lsr
003DFAr 3               ; 		.word xt_asm_ldy_zx, z_asm_ldy_zx
003DFAr 3               ; 		.byte "ldy.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_lsr:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_lsr_a
003DFAr 3               ; 		.word xt_asm_lsr, z_asm_lsr
003DFAr 3               ; 		.byte "lsr"
003DFAr 3               
003DFAr 3               ; nt_asm_lsr_a:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_lsr_x
003DFAr 3               ; 		.word xt_asm_lsr_a, z_asm_lsr_a
003DFAr 3               ; 		.byte "lsr.a"
003DFAr 3               
003DFAr 3               ; nt_asm_lsr_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_lsr_z
003DFAr 3               ; 		.word xt_asm_lsr_x, z_asm_lsr_x
003DFAr 3               ; 		.byte "lsr.x"
003DFAr 3               
003DFAr 3               ; nt_asm_lsr_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_lsr_zx
003DFAr 3               ; 		.word xt_asm_lsr_z, z_asm_lsr_z
003DFAr 3               ; 		.byte "lsr.z"
003DFAr 3               
003DFAr 3               ; nt_asm_lsr_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_nop
003DFAr 3               ; 		.word xt_asm_lsr_zx, z_asm_lsr_zx
003DFAr 3               ; 		.byte "lsr.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_nop:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_ora
003DFAr 3               ; 		.word xt_asm_nop, z_asm_nop
003DFAr 3               ; 		.byte "nop"
003DFAr 3               
003DFAr 3               ; nt_asm_ora:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_ora_h
003DFAr 3               ; 		.word xt_asm_ora, z_asm_ora
003DFAr 3               ; 		.byte "ora"
003DFAr 3               
003DFAr 3               ; nt_asm_ora_h:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_ora_x
003DFAr 3               ; 		.word xt_asm_ora_h, z_asm_ora_h
003DFAr 3               ; 		.byte "ora.#"
003DFAr 3               
003DFAr 3               ; nt_asm_ora_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_ora_y
003DFAr 3               ; 		.word xt_asm_ora_x, z_asm_ora_x
003DFAr 3               ; 		.byte "ora.x"
003DFAr 3               
003DFAr 3               ; nt_asm_ora_y:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_ora_z
003DFAr 3               ; 		.word xt_asm_ora_y, z_asm_ora_y
003DFAr 3               ; 		.byte "ora.y"
003DFAr 3               
003DFAr 3               ; nt_asm_ora_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_ora_zi
003DFAr 3               ; 		.word xt_asm_ora_z, z_asm_ora_z
003DFAr 3               ; 		.byte "ora.z"
003DFAr 3               
003DFAr 3               ; nt_asm_ora_zi:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_ora_ziy
003DFAr 3               ; 		.word xt_asm_ora_zi, z_asm_ora_zi
003DFAr 3               ; 		.byte "ora.zi"
003DFAr 3               
003DFAr 3               ; nt_asm_ora_ziy:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_ora_zx
003DFAr 3               ; 		.word xt_asm_ora_ziy, z_asm_ora_ziy
003DFAr 3               ; 		.byte "ora.ziy"
003DFAr 3               
003DFAr 3               ; nt_asm_ora_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_ora_zxi
003DFAr 3               ; 		.word xt_asm_ora_zx, z_asm_ora_zx
003DFAr 3               ; 		.byte "ora.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_ora_zxi:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_pha
003DFAr 3               ; 		.word xt_asm_ora_zxi, z_asm_ora_zxi
003DFAr 3               ; 		.byte "ora.zxi"
003DFAr 3               
003DFAr 3               ; nt_asm_pha:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_php
003DFAr 3               ; 		.word xt_asm_pha, z_asm_pha
003DFAr 3               ; 		.byte "pha"
003DFAr 3               
003DFAr 3               ; nt_asm_php:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_phx
003DFAr 3               ; 		.word xt_asm_php, z_asm_php
003DFAr 3               ; 		.byte "php"
003DFAr 3               
003DFAr 3               ; nt_asm_phx:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_phy
003DFAr 3               ; 		.word xt_asm_phx, z_asm_phx
003DFAr 3               ; 		.byte "phx"
003DFAr 3               
003DFAr 3               ; nt_asm_phy:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_pla
003DFAr 3               ; 		.word xt_asm_phy, z_asm_phy
003DFAr 3               ; 		.byte "phy"
003DFAr 3               
003DFAr 3               ; nt_asm_pla:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_plp
003DFAr 3               ; 		.word xt_asm_pla, z_asm_pla
003DFAr 3               ; 		.byte "pla"
003DFAr 3               
003DFAr 3               ; nt_asm_plp:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_plx
003DFAr 3               ; 		.word xt_asm_plp, z_asm_plp
003DFAr 3               ; 		.byte "plp"
003DFAr 3               
003DFAr 3               ; nt_asm_plx:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_ply
003DFAr 3               ; 		.word xt_asm_plx, z_asm_plx
003DFAr 3               ; 		.byte "plx"
003DFAr 3               
003DFAr 3               ; nt_asm_ply:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_rol
003DFAr 3               ; 		.word xt_asm_ply, z_asm_ply
003DFAr 3               ; 		.byte "ply"
003DFAr 3               
003DFAr 3               ; nt_asm_rol:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_rol_a
003DFAr 3               ; 		.word xt_asm_rol, z_asm_rol
003DFAr 3               ; 		.byte "rol"
003DFAr 3               
003DFAr 3               ; nt_asm_rol_a:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_rol_x
003DFAr 3               ; 		.word xt_asm_rol_a, z_asm_rol_a
003DFAr 3               ; 		.byte "rol.a"
003DFAr 3               
003DFAr 3               ; nt_asm_rol_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_rol_z
003DFAr 3               ; 		.word xt_asm_rol_x, z_asm_rol_x
003DFAr 3               ; 		.byte "rol.x"
003DFAr 3               
003DFAr 3               ; nt_asm_rol_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_rol_zx
003DFAr 3               ; 		.word xt_asm_rol_z, z_asm_rol_z
003DFAr 3               ; 		.byte "rol.z"
003DFAr 3               
003DFAr 3               ; nt_asm_rol_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_ror
003DFAr 3               ; 		.word xt_asm_rol_zx, z_asm_rol_zx
003DFAr 3               ; 		.byte "rol.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_ror:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_ror_a
003DFAr 3               ; 		.word xt_asm_ror, z_asm_ror
003DFAr 3               ; 		.byte "ror"
003DFAr 3               
003DFAr 3               ; nt_asm_ror_a:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_ror_x
003DFAr 3               ; 		.word xt_asm_ror_a, z_asm_ror_a
003DFAr 3               ; 		.byte "ror.a"
003DFAr 3               
003DFAr 3               ; nt_asm_ror_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_ror_z
003DFAr 3               ; 		.word xt_asm_ror_x, z_asm_ror_x
003DFAr 3               ; 		.byte "ror.x"
003DFAr 3               
003DFAr 3               ; nt_asm_ror_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_ror_zx
003DFAr 3               ; 		.word xt_asm_ror_z, z_asm_ror_z
003DFAr 3               ; 		.byte "ror.z"
003DFAr 3               
003DFAr 3               ; nt_asm_ror_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_rti
003DFAr 3               ; 		.word xt_asm_ror_zx, z_asm_ror_zx
003DFAr 3               ; 		.byte "ror.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_rti:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_rts
003DFAr 3               ; 		.word xt_asm_rti, z_asm_rti
003DFAr 3               ; 		.byte "rti"
003DFAr 3               
003DFAr 3               ; nt_asm_rts:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_sbc
003DFAr 3               ; 		.word xt_asm_rts, z_asm_rts
003DFAr 3               ; 		.byte "rts"
003DFAr 3               
003DFAr 3               ; nt_asm_sbc:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_sbc_h
003DFAr 3               ; 		.word xt_asm_sbc, z_asm_sbc
003DFAr 3               ; 		.byte "sbc"
003DFAr 3               
003DFAr 3               ; nt_asm_sbc_h:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_sbc_x
003DFAr 3               ; 		.word xt_asm_sbc_h, z_asm_sbc_h
003DFAr 3               ; 		.byte "sbc.#"
003DFAr 3               
003DFAr 3               ; nt_asm_sbc_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_sbc_y
003DFAr 3               ; 		.word xt_asm_sbc_x, z_asm_sbc_x
003DFAr 3               ; 		.byte "sbc.x"
003DFAr 3               
003DFAr 3               ; nt_asm_sbc_y:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_sbc_z
003DFAr 3               ; 		.word xt_asm_sbc_y, z_asm_sbc_y
003DFAr 3               ; 		.byte "sbc.y"
003DFAr 3               
003DFAr 3               ; nt_asm_sbc_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_sbc_zi
003DFAr 3               ; 		.word xt_asm_sbc_z, z_asm_sbc_z
003DFAr 3               ; 		.byte "sbc.z"
003DFAr 3               
003DFAr 3               ; nt_asm_sbc_zi:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_sbc_ziy
003DFAr 3               ; 		.word xt_asm_sbc_zi, z_asm_sbc_zi
003DFAr 3               ; 		.byte "sbc.zi"
003DFAr 3               
003DFAr 3               ; nt_asm_sbc_ziy:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_sbc_zx
003DFAr 3               ; 		.word xt_asm_sbc_ziy, z_asm_sbc_ziy
003DFAr 3               ; 		.byte "sbc.ziy"
003DFAr 3               
003DFAr 3               ; nt_asm_sbc_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_sbc_zxi
003DFAr 3               ; 		.word xt_asm_sbc_zx, z_asm_sbc_zx
003DFAr 3               ; 		.byte "sbc.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_sbc_zxi:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_sec
003DFAr 3               ; 		.word xt_asm_sbc_zxi, z_asm_sbc_zxi
003DFAr 3               ; 		.byte "sbc.zxi"
003DFAr 3               
003DFAr 3               ; nt_asm_sec:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_sed
003DFAr 3               ; 		.word xt_asm_sec, z_asm_sec
003DFAr 3               ; 		.byte "sec"
003DFAr 3               
003DFAr 3               ; nt_asm_sed:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_sei
003DFAr 3               ; 		.word xt_asm_sed, z_asm_sed
003DFAr 3               ; 		.byte "sed"
003DFAr 3               
003DFAr 3               ; nt_asm_sei:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_sta
003DFAr 3               ; 		.word xt_asm_sei, z_asm_sei
003DFAr 3               ; 		.byte "sei"
003DFAr 3               
003DFAr 3               ; nt_asm_sta:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_sta_x
003DFAr 3               ; 		.word xt_asm_sta, z_asm_sta
003DFAr 3               ; 		.byte "sta"
003DFAr 3               
003DFAr 3               ; nt_asm_sta_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_sta_y
003DFAr 3               ; 		.word xt_asm_sta_x, z_asm_sta_x
003DFAr 3               ; 		.byte "sta.x"
003DFAr 3               
003DFAr 3               ; nt_asm_sta_y:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_sta_z
003DFAr 3               ; 		.word xt_asm_sta_y, z_asm_sta_y
003DFAr 3               ; 		.byte "sta.y"
003DFAr 3               
003DFAr 3               ; nt_asm_sta_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_sta_zi
003DFAr 3               ; 		.word xt_asm_sta_z, z_asm_sta_z
003DFAr 3               ; 		.byte "sta.z"
003DFAr 3               
003DFAr 3               ; nt_asm_sta_zi:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_sta_ziy
003DFAr 3               ; 		.word xt_asm_sta_zi, z_asm_sta_zi
003DFAr 3               ; 		.byte "sta.zi"
003DFAr 3               
003DFAr 3               ; nt_asm_sta_ziy:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_sta_zx
003DFAr 3               ; 		.word xt_asm_sta_ziy, z_asm_sta_ziy
003DFAr 3               ; 		.byte "sta.ziy"
003DFAr 3               
003DFAr 3               ; nt_asm_sta_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_sta_zxi
003DFAr 3               ; 		.word xt_asm_sta_zx, z_asm_sta_zx
003DFAr 3               ; 		.byte "sta.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_sta_zxi:
003DFAr 3               ; 		.byte 7, IM
003DFAr 3               ;                 .word nt_asm_stx
003DFAr 3               ; 		.word xt_asm_sta_zxi, z_asm_sta_zxi
003DFAr 3               ; 		.byte "sta.zxi"
003DFAr 3               
003DFAr 3               ; nt_asm_stx:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_stx_z
003DFAr 3               ; 		.word xt_asm_stx, z_asm_stx
003DFAr 3               ; 		.byte "stx"
003DFAr 3               
003DFAr 3               ; nt_asm_stx_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_stx_zy
003DFAr 3               ; 		.word xt_asm_stx_z, z_asm_stx_z
003DFAr 3               ; 		.byte "stx.z"
003DFAr 3               
003DFAr 3               ; nt_asm_stx_zy:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_sty
003DFAr 3               ; 		.word xt_asm_stx_zy, z_asm_stx_zy
003DFAr 3               ; 		.byte "stx.zy"
003DFAr 3               
003DFAr 3               ; nt_asm_sty:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_sty_z
003DFAr 3               ; 		.word xt_asm_sty, z_asm_sty
003DFAr 3               ; 		.byte "sty"
003DFAr 3               
003DFAr 3               ; nt_asm_sty_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_sty_zx
003DFAr 3               ; 		.word xt_asm_sty_z, z_asm_sty_z
003DFAr 3               ; 		.byte "sty.z"
003DFAr 3               
003DFAr 3               ; nt_asm_sty_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_stz
003DFAr 3               ; 		.word xt_asm_sty_zx, z_asm_sty_zx
003DFAr 3               ; 		.byte "sty.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_stz:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_stz_x
003DFAr 3               ; 		.word xt_asm_stz, z_asm_stz
003DFAr 3               ; 		.byte "stz"
003DFAr 3               
003DFAr 3               ; nt_asm_stz_x:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_stz_z
003DFAr 3               ; 		.word xt_asm_stz_x, z_asm_stz_x
003DFAr 3               ; 		.byte "stz.x"
003DFAr 3               
003DFAr 3               ; nt_asm_stz_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_stz_zx
003DFAr 3               ; 		.word xt_asm_stz_z, z_asm_stz_z
003DFAr 3               ; 		.byte "stz.z"
003DFAr 3               
003DFAr 3               ; nt_asm_stz_zx:
003DFAr 3               ; 		.byte 6, IM
003DFAr 3               ;                 .word nt_asm_tax
003DFAr 3               ; 		.word xt_asm_stz_zx, z_asm_stz_zx
003DFAr 3               ; 		.byte "stz.zx"
003DFAr 3               
003DFAr 3               ; nt_asm_tax:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_tay
003DFAr 3               ; 		.word xt_asm_tax, z_asm_tax
003DFAr 3               ; 		.byte "tax"
003DFAr 3               
003DFAr 3               ; nt_asm_tay:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_trb
003DFAr 3               ; 		.word xt_asm_tay, z_asm_tay
003DFAr 3               ; 		.byte "tay"
003DFAr 3               
003DFAr 3               ; nt_asm_trb:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_trb_z
003DFAr 3               ; 		.word xt_asm_trb, z_asm_trb
003DFAr 3               ; 		.byte "trb"
003DFAr 3               
003DFAr 3               ; nt_asm_trb_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_tsb
003DFAr 3               ; 		.word xt_asm_trb_z, z_asm_trb_z
003DFAr 3               ; 		.byte "trb.z"
003DFAr 3               
003DFAr 3               ; nt_asm_tsb:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_tsb_z
003DFAr 3               ; 		.word xt_asm_tsb, z_asm_tsb
003DFAr 3               ; 		.byte "tsb"
003DFAr 3               
003DFAr 3               ; nt_asm_tsb_z:
003DFAr 3               ; 		.byte 5, IM
003DFAr 3               ;                 .word nt_asm_tsx
003DFAr 3               ; 		.word xt_asm_tsb_z, z_asm_tsb_z
003DFAr 3               ; 		.byte "tsb.z"
003DFAr 3               
003DFAr 3               ; nt_asm_tsx:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_txa
003DFAr 3               ; 		.word xt_asm_tsx, z_asm_tsx
003DFAr 3               ; 		.byte "tsx"
003DFAr 3               
003DFAr 3               ; nt_asm_txa:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_txs
003DFAr 3               ; 		.word xt_asm_txa, z_asm_txa
003DFAr 3               ; 		.byte "txa"
003DFAr 3               
003DFAr 3               ; nt_asm_txs:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_tya
003DFAr 3               ; 		.word xt_asm_txs, z_asm_txs
003DFAr 3               ; 		.byte "txs"
003DFAr 3               
003DFAr 3               ; nt_asm_tya:
003DFAr 3               ; 		.byte 3, IM
003DFAr 3               ;                 .word nt_asm_arrow
003DFAr 3               ; 		.word xt_asm_tya, z_asm_tya
003DFAr 3               ; 		.byte "tya"
003DFAr 3               
003DFAr 3               ; ; Assembler pseudo-instructions, directives and macros
003DFAr 3               
003DFAr 3               ; nt_asm_arrow:   ; uses same code as HERE, but immediate
003DFAr 3               ;                 .byte 3, IM
003DFAr 3               ;                 .word nt_asm_back_jump
003DFAr 3               ;                 .word xt_asm_arrow, z_asm_arrow
003DFAr 3               ;                 .byte "-->"
003DFAr 3               
003DFAr 3               
003DFAr 3               ; nt_asm_back_jump:  ; syntactic sugar, does nothing
003DFAr 3               ;                 .byte 2, IM
003DFAr 3               ;                 .word nt_asm_back_branch
003DFAr 3               ;                 .word xt_asm_back_jump, z_asm_back_jump
003DFAr 3               ;                 .byte "<j"
003DFAr 3               
003DFAr 3               ; nt_asm_back_branch:
003DFAr 3               ;                 .byte 2, IM
003DFAr 3               ;                 .word nt_asm_push_a
003DFAr 3               ;                 .word xt_asm_back_branch, z_asm_back_branch
003DFAr 3               ;                 .byte "<b"
003DFAr 3               
003DFAr 3               ; nt_asm_push_a:
003DFAr 3               ;                 .byte 6, IM
003DFAr 3               ;                 .word 0000
003DFAr 3               ;                 .word xt_asm_push_a, z_asm_push_a
003DFAr 3               ;                 .byte "push-a"
003DFAr 3               
003DFAr 3               
003DFAr 3               
003DFAr 3               ; END of ASSEMBLER-WORDLIST
003DFAr 3               
003DFAr 3               ; END
003DFAr 3               
003DFAr 2                   .include "strings.s"          ; Headers of native words
003DFAr 3               ; List of Strings for Tali Forth 2
003DFAr 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
003DFAr 3               ; First version: 01. Apr 2016 (for Liara Forth)
003DFAr 3               ; This version: 28. Dec 2018
003DFAr 3               
003DFAr 3               ; This file is included by taliforth.asm
003DFAr 3               
003DFAr 3               ; ## GENERAL STRINGS
003DFAr 3               
003DFAr 3               ; All general strings must be zero-terminated, names start with "s_",
003DFAr 3               ; aliases with "str_"
003DFAr 3               
003DFAr 3               str_ok =              0
003DFAr 3               str_compile =         1
003DFAr 3               str_redefined =       2
003DFAr 3               str_wid_forth =       3
003DFAr 3               str_abc_lower =       4
003DFAr 3               str_abc_upper =       5
003DFAr 3               str_wid_editor =      6
003DFAr 3               str_wid_assembler =   7
003DFAr 3               str_wid_root =        8
003DFAr 3               str_see_flags =       9
003DFAr 3               str_see_nt =         10
003DFAr 3               str_see_xt =         11
003DFAr 3               str_see_size =       12
003DFAr 3               
003DFAr 3               ; Since we can't fit a 16-bit address in a register, we use indexes as offsets
003DFAr 3               ; to tables as error and string numbers.
003DFAr 3               string_table:
003DFAr 3  rr rr rr rr          .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
003DFEr 3  rr rr rr rr  
003E02r 3  rr rr        
003E04r 3  rr rr rr rr          .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
003E08r 3  rr rr rr rr  
003E0Cr 3  rr rr rr rr          .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
003E10r 3  rr rr rr rr  
003E14r 3               
003E14r 3  20 6F 6B 00  s_ok:         .byte " ok", 0         ; note space at beginning
003E18r 3  20 63 6F 6D  s_compiled:   .byte " compiled", 0   ; note space at beginning
003E1Cr 3  70 69 6C 65  
003E20r 3  64 00        
003E22r 3  72 65 64 65  s_redefined:  .byte "redefined ", 0  ; note space at end
003E26r 3  66 69 6E 65  
003E2Ar 3  64 20 00     
003E2Dr 3               
003E2Dr 3  30 31 32 33  s_abc_lower:  .byte "0123456789abcdefghijklmnopqrstuvwxyz"
003E31r 3  34 35 36 37  
003E35r 3  38 39 61 62  
003E51r 3  30 31 32 33  s_abc_upper:  .byte "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
003E55r 3  34 35 36 37  
003E59r 3  38 39 41 42  
003E75r 3               
003E75r 3  41 73 73 65  s_wid_asm:    .byte "Assembler ", 0  ; Wordlist ID 2, note space at end
003E79r 3  6D 62 6C 65  
003E7Dr 3  72 20 00     
003E80r 3  45 64 69 74  s_wid_editor: .byte "Editor ", 0     ; Wordlist ID 1, note space at end
003E84r 3  6F 72 20 00  
003E88r 3  46 6F 72 74  s_wid_forth:  .byte "Forth ", 0      ; Wordlist ID 0, note space at end
003E8Cr 3  68 20 00     
003E8Fr 3  52 6F 6F 74  s_wid_root:   .byte "Root ", 0       ; Wordlist ID 3, note space at end
003E93r 3  20 00        
003E95r 3               
003E95r 3  66 6C 61 67  s_see_flags:  .byte "flags (CO AN IM NN UF HC): ", 0
003E99r 3  73 20 28 43  
003E9Dr 3  4F 20 41 4E  
003EB1r 3  6E 74 3A 20  s_see_nt:     .byte "nt: ", 0
003EB5r 3  00           
003EB6r 3  78 74 3A 20  s_see_xt:     .byte "xt: ", 0
003EBAr 3  00           
003EBBr 3  73 69 7A 65  s_see_size:   .byte "size (decimal): ", 0
003EBFr 3  20 28 64 65  
003EC3r 3  63 69 6D 61  
003ECCr 3               
003ECCr 3               
003ECCr 3               ; ## ERROR STRINGS
003ECCr 3               
003ECCr 3               ; All error strings must be zero-terminated, all names start with "es_",
003ECCr 3               ; aliases with "err_". If the string texts are changed, the test suite must be
003ECCr 3               ; as well
003ECCr 3               
003ECCr 3               err_allot =        0
003ECCr 3               err_badsource =    1
003ECCr 3               err_compileonly =  2
003ECCr 3               err_defer =        3
003ECCr 3               err_divzero =      4
003ECCr 3               err_noname =       5
003ECCr 3               err_refill =       6
003ECCr 3               err_state =        7
003ECCr 3               err_syntax =       8
003ECCr 3               err_underflow =    9
003ECCr 3               err_negallot =     10
003ECCr 3               err_wordlist =     11
003ECCr 3               err_blockwords =   12
003ECCr 3               
003ECCr 3               error_table:
003ECCr 3  rr rr rr rr          .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
003ED0r 3  rr rr rr rr  
003ED4r 3  rr rr rr rr          .word es_divzero, es_noname, es_refill, es_state        ;  4-7
003ED8r 3  rr rr rr rr  
003EDCr 3  rr rr rr rr          .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
003EE0r 3  rr rr rr rr  
003EE4r 3  rr rr                .word es_blockwords                                    ; 12
003EE6r 3               
003EE6r 3  41 4C 4C 4F  es_allot:       .byte "ALLOT using all available memory", 0
003EEAr 3  54 20 75 73  
003EEEr 3  69 6E 67 20  
003F07r 3  49 6C 6C 65  es_badsource:   .byte "Illegal SOURCE-ID during REFILL", 0
003F0Br 3  67 61 6C 20  
003F0Fr 3  53 4F 55 52  
003F27r 3  49 6E 74 65  es_compileonly: .byte "Interpreting a compile-only word", 0
003F2Br 3  72 70 72 65  
003F2Fr 3  74 69 6E 67  
003F48r 3  44 45 46 45  es_defer:       .byte "DEFERed word not defined yet", 0
003F4Cr 3  52 65 64 20  
003F50r 3  77 6F 72 64  
003F65r 3  44 69 76 69  es_divzero:     .byte "Division by zero", 0
003F69r 3  73 69 6F 6E  
003F6Dr 3  20 62 79 20  
003F76r 3  50 61 72 73  es_noname:      .byte "Parsing failure", 0
003F7Ar 3  69 6E 67 20  
003F7Er 3  66 61 69 6C  
003F86r 3  51 55 49 54  es_refill:      .byte "QUIT could not get input (REFILL returned -1)", 0
003F8Ar 3  20 63 6F 75  
003F8Er 3  6C 64 20 6E  
003FB4r 3  41 6C 72 65  es_state:       .byte "Already in compile mode", 0
003FB8r 3  61 64 79 20  
003FBCr 3  69 6E 20 63  
003FCCr 3  55 6E 64 65  es_syntax:      .byte "Undefined word", 0
003FD0r 3  66 69 6E 65  
003FD4r 3  64 20 77 6F  
003FDBr 3  53 74 61 63  es_underflow:   .byte "Stack underflow", 0
003FDFr 3  6B 20 75 6E  
003FE3r 3  64 65 72 66  
003FEBr 3  4D 61 78 20  es_negallot:    .byte "Max memory freed with ALLOT", 0
003FEFr 3  6D 65 6D 6F  
003FF3r 3  72 79 20 66  
004007r 3  4E 6F 20 77  es_wordlist:    .byte "No wordlists available", 0
00400Br 3  6F 72 64 6C  
00400Fr 3  69 73 74 73  
00401Er 3  50 6C 65 61  es_blockwords:  .byte "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
004022r 3  73 65 20 61  
004026r 3  73 73 69 67  
00405Dr 3               
00405Dr 3               ; ## ENVIRONMENT STRINGS
00405Dr 3               
00405Dr 3               ; These are used by the ENVIRONMENT? word and stored in the old string format:
00405Dr 3               ; Length byte first, then the string itself that is not rpt. not
00405Dr 3               ; zero-terminated. Note these are uppercase by ANS defintion. All start with
00405Dr 3               ; "envs_".
00405Dr 3               
00405Dr 3               ; These return a single-cell number
00405Dr 3  0F 2F 43 4F  envs_cs:        .byte 15, "/COUNTED-STRING"
004061r 3  55 4E 54 45  
004065r 3  44 2D 53 54  
00406Dr 3  05 2F 48 4F  envs_hold:      .byte 5, "/HOLD"
004071r 3  4C 44        
004073r 3  04 2F 50 41  envs_pad:       .byte 4, "/PAD"
004077r 3  44           
004078r 3  11 41 44 44  envs_aub:       .byte 17, "ADDRESS-UNIT-BITS"
00407Cr 3  52 45 53 53  
004080r 3  2D 55 4E 49  
00408Ar 3  07 46 4C 4F  envs_floored:   .byte 7, "FLOORED"
00408Er 3  4F 52 45 44  
004092r 3  08 4D 41 58  envs_max_char:  .byte 8, "MAX-CHAR"
004096r 3  2D 43 48 41  
00409Ar 3  52           
00409Br 3  05 4D 41 58  envs_max_n:     .byte 5, "MAX-N"
00409Fr 3  2D 4E        
0040A1r 3  05 4D 41 58  envs_max_u:     .byte 5, "MAX-U"
0040A5r 3  2D 55        
0040A7r 3  12 52 45 54  envs_rsc:       .byte 18, "RETURN-STACK-CELLS"
0040ABr 3  55 52 4E 2D  
0040AFr 3  53 54 41 43  
0040BAr 3  0B 53 54 41  envs_sc:        .byte 11, "STACK-CELLS"
0040BEr 3  43 4B 2D 43  
0040C2r 3  45 4C 4C 53  
0040C6r 3  09 57 4F 52  envs_wl:        .byte 9, "WORDLISTS"
0040CAr 3  44 4C 49 53  
0040CEr 3  54 53        
0040D0r 3               
0040D0r 3               ; These return a double-cell number
0040D0r 3  05 4D 41 58  envs_max_d:     .byte 5, "MAX-D"
0040D4r 3  2D 44        
0040D6r 3  06 4D 41 58  envs_max_ud:    .byte 6, "MAX-UD"
0040DAr 3  2D 55 44     
0040DDr 3               
0040DDr 3               ; END
0040DDr 3               
0040DDr 2               
0040DDr 2               ; High-level Forth words, see forth_code/README.md
0040DDr 2               forth_words_start:
0040DDr 2  20 63 72 20  .incbin "forth_code/forth_words.asc"
0040E1r 2  2E 28 20 52  
0040E5r 2  65 61 64 79  
0040EFr 2               forth_words_end:
0040EFr 2               
0040EFr 2               ; User-defined Forth words, see forth_code/README.md
0040EFr 2               user_words_start:
0040EFr 2  20 32 30 20  .incbin "forth_code/user_words.asc"
0040F3r 2  63 6F 6E 73  
0040F7r 2  74 61 6E 74  
0047B1r 2               user_words_end:
0047B1r 2               
0047B1r 2               
0047B1r 2               ; =====================================================================
0047B1r 2               ; COMPILE WORDS, JUMPS and SUBROUTINE JUMPS INTO CODE
0047B1r 2               
0047B1r 2               ; These three routines compile instructions such as "jsr xt_words" into a word
0047B1r 2               ; at compile time so they are available at run time. Words that use this
0047B1r 2               ; routine may not be natively compiled. We use "cmpl" as not to confuse these
0047B1r 2               ; routines with the COMPILE, word. Always call this with a subroutine jump.
0047B1r 2               ; This means combining JSR/RTS to JMP in those cases is not going to work. To
0047B1r 2               ; use, load the LSB of the address in A and the MSB in Y. You can remember
0047B1r 2               ; which comes first by thinking of the song "Young Americans" ("YA") by David
0047B1r 2               ; Bowie.
0047B1r 2               
0047B1r 2               ;               ldy #>addr      ; MSB   ; "Young"
0047B1r 2               ;               lda #<addr      ; LSB   ; "Americans"
0047B1r 2               ;               jsr cmpl_subroutine
0047B1r 2               
0047B1r 2               ; Also, we keep a routine here to compile a single byte passed through A.
0047B1r 2               
0047B1r 2               cmpl_subroutine:
0047B1r 2                   ; This is the entry point to compile JSR <ADDR>
0047B1r 2  48               pha             ; save LSB of address
0047B2r 2  A9 20            lda #$20        ; load opcode for JSR
0047B4r 2  80 03            bra cmpl_common
0047B6r 2               cmpl_jump:
0047B6r 2                   ; This is the entry point to compile JMP <ADDR>
0047B6r 2  48               pha             ; save LSB of address
0047B7r 2  A9 4C            lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
0047B9r 2               cmpl_common:
0047B9r 2                   ; At this point, A contains the opcode to be compiled,
0047B9r 2                   ; the LSB of the address is on the 65c02 stack, and the MSB of
0047B9r 2                   ; the address is in Y
0047B9r 2  20 rr rr         jsr cmpl_a      ; compile opcode
0047BCr 2  68               pla             ; retrieve address LSB; fall thru to cmpl_word
0047BDr 2               cmpl_word:
0047BDr 2                   ; This is the entry point to compile a word (little-endian)
0047BDr 2  20 rr rr         jsr cmpl_a      ; compile LSB of address
0047C0r 2  98               tya             ; fall thru for MSB
0047C1r 2               cmpl_a:
0047C1r 2                   ; This is the entry point to compile a single byte which
0047C1r 2                   ; is passed in A. The built-in assembler assumes that this
0047C1r 2                   ; routine does not modify Y.
0047C1r 2  92 rr            sta (cp)
0047C3r 2  E6 rr            inc cp
0047C5r 2  D0 02            bne _done
0047C7r 2  E6 rr            inc cp+1
0047C9r 2               _done:
0047C9r 2  60               rts
0047CAr 2               
0047CAr 2               
0047CAr 2               
0047CAr 2               ; =====================================================================
0047CAr 2               ; CODE FIELD ROUTINES
0047CAr 2               
0047CAr 2               doconst:
0047CAr 2               ; """Execute a CONSTANT: Push the data in the first two bytes of
0047CAr 2               ; the Data Field onto the Data Stack
0047CAr 2               ; """
0047CAr 2  CA               dex             ; make room for constant
0047CBr 2  CA               dex
0047CCr 2               
0047CCr 2                   ; The value we need is stored in the two bytes after the
0047CCr 2                   ; JSR return address, which in turn is what is on top of
0047CCr 2                   ; the Return Stack
0047CCr 2  68               pla             ; LSB of return address
0047CDr 2  85 rr            sta tmp1
0047CFr 2  68               pla             ; MSB of return address
0047D0r 2  85 rr            sta tmp1+1
0047D2r 2               
0047D2r 2                   ; Start LDY with 1 instead of 0 because of how JSR stores
0047D2r 2                   ; the return address on the 65c02
0047D2r 2  A0 01            ldy #1
0047D4r 2  B1 rr            lda (tmp1),y
0047D6r 2  95 00            sta 0,x
0047D8r 2  C8               iny
0047D9r 2  B1 rr            lda (tmp1),y
0047DBr 2  95 01            sta 1,x
0047DDr 2               
0047DDr 2                   ; This takes us back to the original caller, not the
0047DDr 2                   ; DOCONST caller
0047DDr 2  60               rts
0047DEr 2               
0047DEr 2               
0047DEr 2               dodefer:
0047DEr 2               ; """Execute a DEFER statement at runtime: Execute the address we
0047DEr 2               ; find after the caller in the Data Field
0047DEr 2               ; """
0047DEr 2                   ; The xt we need is stored in the two bytes after the JSR
0047DEr 2                   ; return address, which is what is on top of the Return
0047DEr 2                   ; Stack. So all we have to do is replace our return jump
0047DEr 2                   ; with what we find there
0047DEr 2  68               pla             ; LSB
0047DFr 2  85 rr            sta tmp1
0047E1r 2  68               pla             ; MSB
0047E2r 2  85 rr            sta tmp1+1
0047E4r 2               
0047E4r 2  A0 01            ldy #1
0047E6r 2  B1 rr            lda (tmp1),y
0047E8r 2  85 rr            sta tmp2
0047EAr 2  C8               iny
0047EBr 2  B1 rr            lda (tmp1),y
0047EDr 2  85 rr            sta tmp2+1
0047EFr 2               
0047EFr 2  6C rr rr         jmp (tmp2)      ; This is actually a jump to the new target
0047F2r 2               
0047F2r 2               defer_error:
0047F2r 2                   ; """Error routine for undefined DEFER: Complain and abort"""
0047F2r 2  A9 03            lda #err_defer
0047F4r 2  4C rr rr         jmp error
0047F7r 2               
0047F7r 2               dodoes:
0047F7r 2               ; """Execute the runtime portion of DOES>. See DOES> and
0047F7r 2               ; docs/create-does.txt for details and
0047F7r 2               ; http://www.bradrodriguez.com/papers/moving3.htm
0047F7r 2               ; """
0047F7r 2                   ; Assumes the address of the CFA of the original defining word
0047F7r 2                   ; (say, CONSTANT) is on the top of the Return Stack. Save it
0047F7r 2                   ; for a later jump, adding one byte because of the way the
0047F7r 2                   ; 6502 works
0047F7r 2  7A               ply             ; LSB
0047F8r 2  68               pla             ; MSB
0047F9r 2  C8               iny
0047FAr 2  D0 01            bne @1
0047FCr 2  1A               inc
0047FDr 2               @1:
0047FDr 2  84 rr            sty tmp2
0047FFr 2  85 rr            sta tmp2+1
004801r 2               
004801r 2                   ; Next on the Return Stack should be the address of the PFA of
004801r 2                   ; the calling defined word (say, the name of whatever constant we
004801r 2                   ; just defined). Move this to the Data Stack, again adding one.
004801r 2  CA               dex
004802r 2  CA               dex
004803r 2               
004803r 2  7A               ply
004804r 2  68               pla
004805r 2  C8               iny
004806r 2  D0 01            bne @2
004808r 2  1A               inc
004809r 2               @2:
004809r 2  94 00            sty 0,x         ; LSB
00480Br 2  95 01            sta 1,x         ; MSB
00480Dr 2               
00480Dr 2                   ; This leaves the return address from the original main routine
00480Dr 2                   ; on top of the Return Stack. We leave that untouched and jump
00480Dr 2                   ; to the special code of the defining word. It's RTS instruction
00480Dr 2                   ; will take us back to the main routine
00480Dr 2  6C rr rr         jmp (tmp2)
004810r 2               
004810r 2               
004810r 2               dovar:
004810r 2               ; """Execute a variable: Push the address of the first bytes of
004810r 2               ; the Data Field onto the stack. This is called with JSR so we
004810r 2               ; can pick up the address of the calling variable off the 65c02's
004810r 2               ; stack. The final RTS takes us to the original caller of the
004810r 2               ; routine that itself called DOVAR. This is the default
004810r 2               ; routine installed with CREATE.
004810r 2               ; """
004810r 2                   ; Pull the return address off the machine's stack, adding
004810r 2                   ; one because of the way the 65c02 handles subroutines
004810r 2  7A               ply             ; LSB
004811r 2  68               pla             ; MSB
004812r 2  C8               iny
004813r 2  D0 01            bne @1
004815r 2  1A               inc
004816r 2               @1:
004816r 2  CA               dex
004817r 2  CA               dex
004818r 2               
004818r 2  95 01            sta 1,x
00481Ar 2  98               tya
00481Br 2  95 00            sta 0,x
00481Dr 2               
00481Dr 2  60               rts
00481Er 2               
00481Er 2               ; =====================================================================
00481Er 2               ; LOW LEVEL HELPER FUNCTIONS
00481Er 2               
00481Er 2               byte_to_ascii:
00481Er 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
00481Er 2               .scope
00481Er 2  48               pha
00481Fr 2  4A               lsr             ; convert high nibble first
004820r 2  4A               lsr
004821r 2  4A               lsr
004822r 2  4A               lsr
004823r 2  20 rr rr         jsr _nibble_to_ascii
004826r 2  68               pla
004827r 2               
004827r 2                   ; fall through to _nibble_to_ascii
004827r 2               
004827r 2               _nibble_to_ascii:
004827r 2               ; """Private helper function for byte_to_ascii: Print lower nibble
004827r 2               ; of A and and EMIT it. This does the actual work.
004827r 2               ; """
004827r 2  29 0F            and #$0F
004829r 2  09 30            ora #'0'
00482Br 2  C9 3A            cmp #$3A        ; '9+1
00482Dr 2  90 02            bcc @1
00482Fr 2  69 06            adc #$06
004831r 2               
004831r 2  4C rr rr     @1:               jmp emit_a
004834r 2               
004834r 2  60               rts
004835r 2               .endscope
004835r 2               
004835r 2               compare_16bit:
004835r 2               ; """Compare TOS/NOS and return results in form of the 65c02 flags
004835r 2               ; Adapted from Leventhal "6502 Assembly Language Subroutines", see
004835r 2               ; also http://www.6502.org/tutorials/compare_beyond.html
004835r 2               ; For signed numbers, Z signals equality and N which number is larger:
004835r 2               ;       if TOS = NOS: Z=1 and N=0
004835r 2               ;       if TOS > NOS: Z=0 and N=0
004835r 2               ;       if TOS < NOS: Z=0 and N=1
004835r 2               ; For unsigned numbers, Z signals equality and C which number is larger:
004835r 2               ;       if TOS = NOS: Z=1 and N=0
004835r 2               ;       if TOS > NOS: Z=0 and C=1
004835r 2               ;       if TOS < NOS: Z=0 and C=0
004835r 2               ; Compared to the book routine, WORD1 (MINUED) is TOS
004835r 2               ;                               WORD2 (SUBTRAHEND) is NOS
004835r 2               ; """
004835r 2               .scope
004835r 2                   ; Compare LSB first to set the carry flag
004835r 2  B5 00            lda 0,x                 ; LSB of TOS
004837r 2  D5 02            cmp 2,x                 ; LSB of NOS
004839r 2  F0 0A            beq _equal
00483Br 2               
00483Br 2                   ; LSBs are not equal, compare MSB
00483Br 2  B5 01            lda 1,x                 ; MSB of TOS
00483Dr 2  F5 03            sbc 3,x                 ; MSB of NOS
00483Fr 2  09 01            ora #1                  ; Make zero flag 0 because not equal
004841r 2  70 08            bvs _overflow
004843r 2  80 08            bra _not_equal
004845r 2               _equal:
004845r 2                   ; Low bytes are equal, so we compare high bytes
004845r 2  B5 01            lda 1,x                 ; MSB of TOS
004847r 2  F5 03            sbc 3,x                 ; MSB of NOS
004849r 2  50 04            bvc _done
00484Br 2               _overflow:
00484Br 2                   ; Handle overflow because we use signed numbers
00484Br 2  49 80            eor #$80                ; complement negative flag
00484Dr 2               _not_equal:
00484Dr 2  09 01            ora #1                  ; if overflow, we can't be eqal
00484Fr 2               _done:
00484Fr 2  60               rts
004850r 2               .endscope
004850r 2               
004850r 2               current_to_dp:
004850r 2               ; """Look up the current (compilation) dictionary pointer
004850r 2               ; in the wordlist set and put it into the dp zero-page
004850r 2               ; variable. Uses A and Y.
004850r 2               ; """
004850r 2                   ; Determine which wordlist is current
004850r 2  A0 04            ldy #current_offset
004852r 2  B1 rr            lda (up),y      ; current is a byte variable
004854r 2  0A               asl             ; turn it into an offset (in cells)
004855r 2               
004855r 2                   ; Get the dictionary pointer for that wordlist.
004855r 2  18               clc
004856r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
004858r 2  A8               tay
004859r 2  B1 rr            lda (up),y              ; get the dp for that wordlist.
00485Br 2  85 rr            sta dp
00485Dr 2  C8               iny
00485Er 2  B1 rr            lda (up),y
004860r 2  85 rr            sta dp+1
004862r 2               
004862r 2  60               rts
004863r 2               
004863r 2               
004863r 2               dp_to_current:
004863r 2               ; """Look up which wordlist is current and update its pointer
004863r 2               ; with the value in dp. Uses A and Y.
004863r 2               ; """
004863r 2                   ; Determine which wordlist is current
004863r 2  A0 04            ldy #current_offset
004865r 2  B1 rr            lda (up),y      ; current is a byte variable
004867r 2  0A               asl             ; turn it into an offset (in cells)
004868r 2               
004868r 2                   ; Get the dictionary pointer for that wordlist.
004868r 2  18               clc
004869r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
00486Br 2  A8               tay
00486Cr 2  A5 rr            lda dp
00486Er 2  91 rr            sta (up),y              ; get the dp for that wordlist.
004870r 2  C8               iny
004871r 2  A5 rr            lda dp+1
004873r 2  91 rr            sta (up),y
004875r 2               
004875r 2  60               rts
004876r 2               
004876r 2               interpret:
004876r 2               .scope
004876r 2               ; """Core routine for the interpreter called by EVALUATE and QUIT.
004876r 2               ; Process one line only. Assumes that the address of name is in
004876r 2               ; cib and the length of the whole input line string is in ciblen
004876r 2               ; """
004876r 2                   ; Normally we would use PARSE here with the SPACE character as
004876r 2                   ; a parameter (PARSE replaces WORD in modern Forths). However,
004876r 2                   ; Gforth's PARSE-NAME makes more sense as it uses spaces as
004876r 2                   ; delimiters per default and skips any leading spaces, which
004876r 2                   ; PARSE doesn't
004876r 2               _loop:
004876r 2  20 rr rr         jsr xt_parse_name       ; ( "string" -- addr u )
004879r 2               
004879r 2                   ; If PARSE-NAME returns 0 (empty line), no characters were left
004879r 2                   ; in the line and we need to go get a new line
004879r 2  B5 00            lda 0,x
00487Br 2  15 01            ora 1,x
00487Dr 2  F0 70            beq _line_done
00487Fr 2               
00487Fr 2                   ; Go to FIND-NAME to see if this is a word we know. We have to
00487Fr 2                   ; make a copy of the address in case it isn't a word we know and
00487Fr 2                   ; we have to go see if it is a number
00487Fr 2  20 rr rr         jsr xt_two_dup          ; ( addr u -- addr u addr u )
004882r 2  20 rr rr         jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
004885r 2               
004885r 2                   ; A zero signals that we didn't find a word in the Dictionary
004885r 2  B5 00            lda 0,x
004887r 2  15 01            ora 1,x
004889r 2  D0 28            bne _got_name_token
00488Br 2               
00488Br 2                   ; We didn't get any nt we know of, so let's see if this is
00488Br 2                   ; a number.
00488Br 2  E8               inx                     ; ( addr u 0 -- addr u )
00488Cr 2  E8               inx
00488Dr 2               
00488Dr 2                   ; If the number conversion doesn't work, NUMBER will do the
00488Dr 2                   ; complaining for us
00488Dr 2  20 rr rr         jsr xt_number           ; ( addr u -- u|d )
004890r 2               
004890r 2                   ; Otherweise, if we're interpreting, we're done
004890r 2  A5 rr            lda state
004892r 2  F0 E2            beq _loop
004894r 2               
004894r 2                   ; We're compiling, so there is a bit more work.  Check
004894r 2                   ; status bit 5 to see if it's a single or double-cell
004894r 2                   ; number.
004894r 2  A9 20            lda #$20
004896r 2  24 rr            bit status
004898r 2  F0 0D            beq _single_number
00489Ar 2               
00489Ar 2                   ; It's a double cell number.  If we swap the
00489Ar 2                   ; upper and lower half, we can use the literal_runtime twice
00489Ar 2                   ; to compile it into the dictionary.
00489Ar 2  20 rr rr         jsr xt_swap
00489Dr 2  A0 rr            ldy #>literal_runtime
00489Fr 2  A9 rr            lda #<literal_runtime
0048A1r 2  20 rr rr         jsr cmpl_subroutine
0048A4r 2               
0048A4r 2                   ; compile our number
0048A4r 2  20 rr rr         jsr xt_comma
0048A7r 2               
0048A7r 2                   ; Fall into _single_number to process the other half.
0048A7r 2               _single_number:
0048A7r 2  A0 rr            ldy #>literal_runtime
0048A9r 2  A9 rr            lda #<literal_runtime
0048ABr 2  20 rr rr         jsr cmpl_subroutine
0048AEr 2               
0048AEr 2                   ; compile our number
0048AEr 2  20 rr rr         jsr xt_comma
0048B1r 2               
0048B1r 2                   ; That was so much fun, let's do it again!
0048B1r 2  80 C3            bra _loop
0048B3r 2               
0048B3r 2               _got_name_token:
0048B3r 2                   ; We have a known word's nt TOS. We're going to need its xt
0048B3r 2                   ; though, which is four bytes father down.
0048B3r 2               
0048B3r 2                   ; We arrive here with ( addr u nt ), so we NIP twice
0048B3r 2  B5 00            lda 0,x
0048B5r 2  95 04            sta 4,x
0048B7r 2  B5 01            lda 1,x
0048B9r 2  95 05            sta 5,x
0048BBr 2               
0048BBr 2  E8               inx
0048BCr 2  E8               inx
0048BDr 2  E8               inx
0048BEr 2  E8               inx                     ; ( nt )
0048BFr 2               
0048BFr 2                   ; Save a version of nt for error handling and compilation stuff
0048BFr 2  B5 00            lda 0,x
0048C1r 2  85 rr            sta tmpbranch
0048C3r 2  B5 01            lda 1,x
0048C5r 2  85 rr            sta tmpbranch+1
0048C7r 2               
0048C7r 2  20 rr rr         jsr xt_name_to_int      ; ( nt - xt )
0048CAr 2               
0048CAr 2                   ; See if we are in interpret or compile mode, 0 is interpret
0048CAr 2  A5 rr            lda state
0048CCr 2  D0 13            bne _compile
0048CEr 2               
0048CEr 2                   ; We are interpreting, so EXECUTE the xt that is TOS. First,
0048CEr 2                   ; though, see if this isn't a compile-only word, which would be
0048CEr 2                   ; illegal. The status byte is the second one of the header.
0048CEr 2  A0 01            ldy #1
0048D0r 2  B1 rr            lda (tmpbranch),y
0048D2r 2  29 01            and #CO                 ; mask everything but Compile Only bit
0048D4r 2  F0 05            beq _interpret
0048D6r 2               
0048D6r 2  A9 02            lda #err_compileonly
0048D8r 2  4C rr rr         jmp error
0048DBr 2               
0048DBr 2               _interpret:
0048DBr 2                   ; We JSR to EXECUTE instead of calling the xt directly because
0048DBr 2                   ; the RTS of the word we're executing will bring us back here,
0048DBr 2                   ; skipping EXECUTE completely during RTS. If we were to execute
0048DBr 2                   ; xt directly, we have to fool around with the Return Stack
0048DBr 2                   ; instead, which is actually slightly slower
0048DBr 2  20 rr rr         jsr xt_execute
0048DEr 2               
0048DEr 2                   ; That's quite enough for this word, let's get the next one
0048DEr 2  4C rr rr         jmp _loop
0048E1r 2               
0048E1r 2               _compile:
0048E1r 2                   ; We're compiling! However, we need to see if this is an
0048E1r 2                   ; IMMEDIATE word, which would mean we execute it right now even
0048E1r 2                   ; during compilation mode. Fortunately, we saved the nt so life
0048E1r 2                   ; is easier. The flags are in the second byte of the header
0048E1r 2  A0 01            ldy #1
0048E3r 2  B1 rr            lda (tmpbranch),y
0048E5r 2  29 04            and #IM                 ; Mask all but IM bit
0048E7r 2  D0 F2            bne _interpret          ; IMMEDIATE word, execute right now
0048E9r 2               
0048E9r 2                   ; Compile the xt into the Dictionary with COMPILE,
0048E9r 2  20 rr rr         jsr xt_compile_comma
0048ECr 2  4C rr rr         jmp _loop
0048EFr 2               
0048EFr 2               _line_done:
0048EFr 2                   ; drop stuff from PARSE_NAME
0048EFr 2  E8               inx
0048F0r 2  E8               inx
0048F1r 2  E8               inx
0048F2r 2  E8               inx
0048F3r 2               
0048F3r 2  60               rts
0048F4r 2               .endscope
0048F4r 2               
0048F4r 2               
0048F4r 2               is_printable:
0048F4r 2               .scope
0048F4r 2               ; """Given a character in A, check if it is a printable ASCII
0048F4r 2               ; character in the range from $20 to $7E inclusive. Returns the
0048F4r 2               ; result in the Carry Flag: 0 (clear) is not printable, 1 (set)
0048F4r 2               ; is printable. Keeps A. See
0048F4r 2               ; http://www.obelisk.me.uk/6502/algorithms.html for a
0048F4r 2               ; discussion of various ways to do this
0048F4r 2  C9 20            cmp #AscSP              ; $20
0048F6r 2  90 08            bcc _done
0048F8r 2  C9 7F            cmp #'~' + 1             ; $7E
0048FAr 2  B0 03            bcs _failed
0048FCr 2               
0048FCr 2  38               sec
0048FDr 2  80 01            bra _done
0048FFr 2               _failed:
0048FFr 2  18               clc
004900r 2               _done:
004900r 2  60               rts
004901r 2               .endscope
004901r 2               
004901r 2               
004901r 2               is_whitespace:
004901r 2               .scope
004901r 2               ; """Given a character in A, check if it is a whitespace
004901r 2               ; character, that is, an ASCII value from 0 to 32 (where
004901r 2               ; 32 is SPACE). Returns the result in the Carry Flag:
004901r 2               ; 0 (clear) is no, it isn't whitespace, while 1 (set) means
004901r 2               ; that it is whitespace. See PARSE and PARSE-NAME for
004901r 2               ; a discussion of the uses. Does not change A or Y.
004901r 2  C9 00            cmp #00         ; explicit comparison to leave Y untouched
004903r 2  90 08            bcc _done
004905r 2               
004905r 2  C9 21            cmp #AscSP+1
004907r 2  B0 03            bcs _failed
004909r 2               
004909r 2  38               sec
00490Ar 2  80 01            bra _done
00490Cr 2               _failed:
00490Cr 2  18               clc
00490Dr 2               _done:
00490Dr 2  60               rts
00490Er 2               .endscope
00490Er 2               
00490Er 2               
00490Er 2               ; Underflow tests. We jump to the label with the number of cells (not: bytes)
00490Er 2               ; required for the word. This routine flows into the generic error handling
00490Er 2               ; code
00490Er 2               underflow_1:
00490Er 2               ; """Make sure we have at least one cell on the Data Stack"""
00490Er 2  E0 FE            cpx #dsp0-1
004910r 2  10 10            bpl underflow_error
004912r 2  60               rts
004913r 2               underflow_2:
004913r 2               ; """Make sure we have at least two cells on the Data Stack"""
004913r 2  E0 FC            cpx #dsp0-3
004915r 2  10 0B            bpl underflow_error
004917r 2  60               rts
004918r 2               underflow_3:
004918r 2               ; """Make sure we have at least three cells on the Data Stack"""
004918r 2  E0 FA            cpx #dsp0-5
00491Ar 2  10 06            bpl underflow_error
00491Cr 2  60               rts
00491Dr 2               underflow_4:
00491Dr 2               ; """Make sure we have at least four cells on the Data Stack"""
00491Dr 2  E0 F8            cpx #dsp0-7
00491Fr 2  10 01            bpl underflow_error
004921r 2  60               rts
004922r 2               
004922r 2               underflow_error:
004922r 2                   ; Entry for COLD/ABORT/QUIT
004922r 2  A9 09            lda #err_underflow      ; fall through to error
004924r 2               
004924r 2               error:
004924r 2               ; """Given the error number in a, print the associated error string and
004924r 2               ; call abort. Uses tmp3.
004924r 2               ; """
004924r 2  0A               asl
004925r 2  A8               tay
004926r 2  B9 rr rr         lda error_table,y
004929r 2  85 rr            sta tmp3                ; LSB
00492Br 2  C8               iny
00492Cr 2  B9 rr rr         lda error_table,y
00492Fr 2  85 rr            sta tmp3+1              ; MSB
004931r 2               
004931r 2  20 rr rr         jsr print_common
004934r 2  20 rr rr         jsr xt_cr
004937r 2  4C rr rr         jmp xt_abort            ; no jsr, as we clobber return stack
00493Ar 2               
00493Ar 2               
00493Ar 2               ; =====================================================================
00493Ar 2               ; PRINTING ROUTINES
00493Ar 2               
00493Ar 2               ; We distinguish two types of print calls, both of which take the string number
00493Ar 2               ; (see strings.asm) in A:
00493Ar 2               
00493Ar 2               ;       print_string       - with a line feed
00493Ar 2               ;       print_string_no_lf - without a line feed
00493Ar 2               
00493Ar 2               ; In addition, print_common provides a lower-level alternative for error
00493Ar 2               ; handling and anything else that provides the address of the
00493Ar 2               ; zero-terminated string directly in tmp3. All of those routines assume that
00493Ar 2               ; printing should be more concerned with size than speed, because anything to
00493Ar 2               ; do with humans reading text is going to be slow.
00493Ar 2               
00493Ar 2               print_string_no_lf:
00493Ar 2               ; """Given the number of a zero-terminated string in A, print it to the
00493Ar 2               ; current output without adding a LF. Uses Y and tmp3 by falling
00493Ar 2               ; through to print_common
00493Ar 2               ; """
00493Ar 2                   ; Get the entry from the string table
00493Ar 2  0A               asl
00493Br 2  A8               tay
00493Cr 2  B9 rr rr         lda string_table,y
00493Fr 2  85 rr            sta tmp3                ; LSB
004941r 2  C8               iny
004942r 2  B9 rr rr         lda string_table,y
004945r 2  85 rr            sta tmp3+1              ; MSB
004947r 2               
004947r 2                   ; fall through to print_common
004947r 2               print_common:
004947r 2               ; """Common print routine used by both the print functions and
004947r 2               ; the error printing routine. Assumes string address is in tmp3. Uses
004947r 2               ; Y.
004947r 2               ; """
004947r 2               .scope
004947r 2  A0 00            ldy #0
004949r 2               _loop:
004949r 2  B1 rr            lda (tmp3),y
00494Br 2  F0 06            beq _done               ; strings are zero-terminated
00494Dr 2               
00494Dr 2  20 rr rr         jsr emit_a              ; allows vectoring via output
004950r 2  C8               iny
004951r 2  80 F6            bra _loop
004953r 2               _done:
004953r 2  60               rts
004954r 2               .endscope
004954r 2               
004954r 2               print_string:
004954r 2               ; """Print a zero-terminated string to the console/screen, adding a LF.
004954r 2               ; We do not check to see if the index is out of range. Uses tmp3.
004954r 2               ; """
004954r 2  20 rr rr         jsr print_string_no_lf
004957r 2  4C rr rr         jmp xt_cr               ; JSR/RTS because never compiled
00495Ar 2               
00495Ar 2               
00495Ar 2               print_u:
00495Ar 2               ; """basic printing routine used by higher-level constructs,
00495Ar 2               ; the equivalent of the forth word  0 <# #s #> type  which is
00495Ar 2               ; basically u. without the space at the end. used for various
00495Ar 2               ; outputs
00495Ar 2               ; """
00495Ar 2  20 rr rr         jsr xt_zero                     ; 0
00495Dr 2  20 rr rr         jsr xt_less_number_sign         ; <#
004960r 2  20 rr rr         jsr xt_number_sign_s            ; #S
004963r 2  20 rr rr         jsr xt_number_sign_greater      ; #>
004966r 2  4C rr rr         jmp xt_type                     ; JSR/RTS because never compiled
004969r 2               
004969r 2               ; END
004969r 2               
004969r 1               ; .include "../../ed.s"
004969r 1               
004969r 1               
004969r 1               .segment "DATA"
004969r 1               
004969r 1               platform_bye:
004969r 1               kernel_init:
004969r 1               v_nmi:
004969r 1  A9 FF            lda #$FF
00496Br 1  8D 82 FF         sta DDRB
00496Er 1  8D 83 FF         sta DDRA
004971r 1  9C 81 FF         stz PORTA
004974r 1  9C 80 FF         stz PORTB
004977r 1               .ifdef video_init
004977r 1                   jsr video_init
004977r 1               .endif
004977r 1               .ifdef ps2_init
004977r 1  20 rr rr         jsr ps2_init
00497Ar 1               .endif
00497Ar 1               .ifdef timer_init
00497Ar 1  20 rr rr         jsr timer_init
00497Dr 1               .endif
00497Dr 1  20 rr rr         jsr acia_init
004980r 1               .ifdef lcd_init
004980r 1                   jsr lcd_init
004980r 1               .endif
004980r 1               .ifdef spi_init
004980r 1                   jsr spi_init
004980r 1               .endif
004980r 1               .ifdef kb_init
004980r 1                   jsr kb_init
004980r 1               .endif
004980r 1               
004980r 1               
004980r 1               
004980r 1  A2 00 BD rr      printascii welcome_message
004984r 1  rr F0 06 20  
004988r 1  rr rr E8 80  
00498Dr 1               
00498Dr 1  4C rr rr         jmp forth
004990r 1               
004990r 1               
004990r 1               kernel_putc:
004990r 1                   ; """Print a single character to the console. """
004990r 1                   ;; Send_Char - send character in A out serial port.
004990r 1                   ;; Uses: A (original value restored)
004990r 1               send_char:
004990r 1  48               pha
004991r 1                   .ifdef char_out
004991r 1                   jsr char_out
004991r 1                   .endif
004991r 1                   .ifdef acia_out
004991r 1  20 rr rr         jsr acia_out
004994r 1                   .endif
004994r 1               send_char_exit:
004994r 1               .ifdef lcd_print
004994r 1                   ; jsr lcd_print
004994r 1               .endif
004994r 1  68               pla
004995r 1  60               rts
004996r 1               
004996r 1               
004996r 1                       ;; Get_Char - get a character from the serial port into A.
004996r 1                       ;; Set the carry flag if char is valid.
004996r 1                       ;; Return immediately with carry flag clear if no char available.
004996r 1                       ;; Uses: A (return value)
004996r 1               
004996r 1               Get_Char:
004996r 1  20 rr rr         jsr acia_getc
004999r 1  90 05            bcc get_ps2_char                ; check keyboard buffer if nothing from ACIA
00499Br 1  20 rr rr         jsr check_ctrl_c
00499Er 1  38               sec                             ; Set Carry to show we got a character
00499Fr 1  60               rts                             ; Return
0049A0r 1               
0049A0r 1               get_ps2_char:                       ; no ACIA char available, try to get from KB buffer
0049A0r 1               .ifdef ps2_get_char
0049A0r 1  20 rr rr         jsr ps2_get_char
0049A3r 1               .endif
0049A3r 1  90 02            bcc get_kb_char
0049A5r 1  38               sec
0049A6r 1               
0049A6r 1  60               rts
0049A7r 1               get_kb_char:
0049A7r 1                   .ifdef kb_get_char
0049A7r 1               
0049A7r 1                   ; ldy #5
0049A7r 1                   ; jsr delay_short
0049A7r 1                   ; ply
0049A7r 1                       jsr kb_get_char
0049A7r 1               
0049A7r 1                   .endif
0049A7r 1               exit:                         ; Indicate no char available.
0049A7r 1  60               rts                             ; return
0049A8r 1               
0049A8r 1               kernel_getc:
0049A8r 1                   ; """Get a single character from the keyboard (waits for key).
0049A8r 1                   ; """
0049A8r 1                   ;; Get_Char_Wait - same as Get_Char only blocking.
0049A8r 1                   ;; Uses: A (return value)
0049A8r 1               Get_Char_Wait:
0049A8r 1  20 rr rr         jsr Get_Char
0049ABr 1  90 FB            bcc Get_Char_Wait
0049ADr 1  60               rts
0049AEr 1               
0049AEr 1               check_ctrl_c:
0049AEr 1                   ;; Check if we have ctrl-C character, if so jump to nmi
0049AEr 1  C9 03            cmp #$03
0049B0r 1  D0 10            bne exit_ctrl_c
0049B2r 1  A2 00 BD rr      printascii abort_message
0049B6r 1  rr F0 06 20  
0049BAr 1  rr rr E8 80  
0049BFr 1  4C rr rr         jmp xt_abort
0049C2r 1               
0049C2r 1               exit_ctrl_c:
0049C2r 1  60               rts
0049C3r 1               
0049C3r 1               
0049C3r 1               
0049C3r 1               v_irq:                          ; IRQ handler
0049C3r 1  48                   pha
0049C4r 1  5A                   phy
0049C5r 1                       ; check if bit 7 of IFR is set
0049C5r 1  AD 8D FF             lda IFR
0049C8r 1  10 0B                bpl v_kb_irq  ; Interrupt not from VIA, exit
0049CAr 1               
0049CAr 1  29 08                and #$08        ; ps2 has priority
0049CCr 1  D0 12                bne v_irq_ps2
0049CEr 1  AD 8D FF             lda IFR
0049D1r 1  29 40                and #$40
0049D3r 1  D0 20                bne v_irq_timer
0049D5r 1               v_kb_irq:
0049D5r 1  AD 9D FF             lda KB_IFR
0049D8r 1  10 26                bpl v_irq_exit
0049DAr 1  29 40                and #$40
0049DCr 1  D0 22                bne v_kb_irq_timer
0049DEr 1  80 20                bra v_irq_exit
0049E0r 1               
0049E0r 1               
0049E0r 1               v_irq_ps2:
0049E0r 1                   .ifdef ps2_irq
0049E0r 1  A5 rr                lda time
0049E2r 1  85 rr                sta last_ps2_time
0049E4r 1  A5 rr                lda time+1
0049E6r 1  85 rr                sta last_ps2_time+1
0049E8r 1  A5 rr                lda time+2
0049EAr 1  85 rr                sta last_ps2_time+2
0049ECr 1  A5 rr                lda time+3
0049EEr 1  85 rr                sta last_ps2_time+3
0049F0r 1                       ; this delay is here to ensure we prevent desynchronization
0049F0r 1                       ;ldy #$04         ; correct delay seems to be #$20 at 10Mhz
0049F0r 1                       ; jsr delay_short
0049F0r 1               
0049F0r 1               
0049F0r 1  20 rr rr             jsr ps2_irq
0049F3r 1               
0049F3r 1                       ; ldy #$04         ; correct delay seems to be #$20 at 10Mhz
0049F3r 1                       ; jsr delay_short
0049F3r 1                   .endif
0049F3r 1  80 0B                bra v_irq_exit
0049F5r 1               
0049F5r 1               v_irq_timer:
0049F5r 1  AD 84 FF             lda T1CL
0049F8r 1                       ; clear timer interrupt
0049F8r 1                   .ifdef timer_irq
0049F8r 1  20 rr rr             jsr timer_irq
0049FBr 1                   .endif
0049FBr 1  20 rr rr             jsr Get_Char ; Check if a char is waiting to be able to break on CTRL-C
0049FEr 1                       ; check if there is a char waiting to be printed to the lcd
0049FEr 1                       ; lda lcd_char
0049FEr 1                       ; beq v_exit
0049FEr 1                       ; jsr lcd_print
0049FEr 1                       ; stz lcd_char
0049FEr 1               
0049FEr 1               
0049FEr 1  80 00                bra v_irq_exit
004A00r 1               v_kb_irq_timer:
004A00r 1               .ifdef kb_time
004A00r 1                   lda KB_T1CL ; clear timer interrupt
004A00r 1                   inc kb_time
004A00r 1                   bne v_irq_exit
004A00r 1               .endif
004A00r 1                   ;jsr kb_scan
004A00r 1               v_irq_exit:
004A00r 1  7A               ply
004A01r 1  68               pla
004A02r 1  40               rti
004A03r 1               
004A03r 1               .segment "RODATA"
0000FFr 1               
0000FFr 1  57 65 6C 63  welcome_message: .byte "Welcome to Planck 6502", $0D, "Type 'words' for available words", 0
000103r 1  6F 6D 65 20  
000107r 1  74 6F 20 50  
000137r 1  0D 0A 00     abort_message: .byte AscCR, AscLF, 0
00013Ar 1               
00013Ar 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        .word v_nmi
000002r 1  rr rr        .word v_reset
000004r 1  rr rr        .word v_irq
000004r 1               
