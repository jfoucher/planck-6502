ca65 V2.18 - N/A
Main file   : platform/planck/main.s
Current file: platform/planck/main.s

000000r 1               
000000r 1               .include "../../macros.s"
000000r 2               .macro  printascii   addr
000000r 2               .local @loop
000000r 2               .local @done
000000r 2                   phx
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda addr,x
000000r 2                   beq @done
000000r 2                   jsr kernel_putc
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @done:
000000r 2                   plx
000000r 2               .endmacro
000000r 2               
000000r 2               .macro  cp16   src, dest
000000r 2                   lda src
000000r 2                   sta dest
000000r 2                   lda src + 1
000000r 2                   sta dest + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro printstr addr, len
000000r 2               .repeat len, I
000000r 2               lda addr + I
000000r 2               jsr kernel_putc
000000r 2               .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl16 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro lsr16 src
000000r 2                   lsr src + 1
000000r 2                   ror src
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc16 src
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment the MSB if LSB wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16 src
000000r 2                   lda src
000000r 2                   bne @skip
000000r 2                   dec src + 1
000000r 2               @skip:
000000r 2                   dec src
000000r 2               .endmacro
000000r 2               
000000r 2               .macro add16 first, second, result
000000r 2                   CLC             ;Ensure carry is clear
000000r 2                   LDA first+0       ;Add the two least significant bytes
000000r 2                   ADC second+0
000000r 2                   STA result+0       ;... and store the result
000000r 2                   LDA first+1       ;Add the two most significant bytes
000000r 2                   ADC second+1       ;... and any propagated carry bit
000000r 2                   STA result+1       ;... and store the result
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               
000000r 2               .macro push_axy
000000r 2               	pha		; push accumulator to stack
000000r 2               	phx
000000r 2                   phy
000000r 2               .endmacro
000000r 2               
000000r 2               .macro pull_axy
000000r 2               	ply		; pull y from stack
000000r 2               	plx		; pull x from stack
000000r 2               	pla		; pull a from stack
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro push_ax
000000r 2               	pha
000000r 2               	phx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ax
000000r 2               	pla
000000r 2               	plx
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_ay
000000r 2               	pha
000000r 2               	phy
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ay
000000r 2               	pla
000000r 2               	ply
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro mov16 SRC, DEST
000000r 2               	lda SRC
000000r 2               	sta DEST
000000r 2               	lda SRC+1
000000r 2               	sta DEST+1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro mov32 SRC, DEST
000000r 2               	lda SRC
000000r 2               	sta DEST
000000r 2               	lda SRC+1
000000r 2               	sta DEST+1
000000r 2               	lda SRC+2
000000r 2               	sta DEST+2
000000r 2               	lda SRC+3
000000r 2               	sta DEST+3
000000r 2               .endmacro
000000r 2               
000000r 1               CLOCK_SPEED = 24000000
000000r 1               
000000r 1               ram_end = $8000
000000r 1               
000000r 1               .include "drivers/acia.inc"
000000r 2               ACIA_BASE   = $FFE0
000000r 2               ACIA_DATA = ACIA_BASE
000000r 2               ACIA_STATUS = ACIA_BASE + 1
000000r 2               ACIA_CMD = ACIA_BASE + 2
000000r 2               ACIA_CTRL = ACIA_BASE + 3
000000r 2               
000000r 2               
000000r 1               .include "drivers/via.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               VIA1_BASE   = $FF80
000000r 2               PORTB = VIA1_BASE
000000r 2               PORTA  = VIA1_BASE+1
000000r 2               DDRB = VIA1_BASE+2
000000r 2               DDRA = VIA1_BASE+3
000000r 2               
000000r 2               
000000r 2               T1CL = VIA1_BASE + 4
000000r 2               T1CH = VIA1_BASE + 5
000000r 2               T1LL = VIA1_BASE + 6
000000r 2               T1LH = VIA1_BASE + 7
000000r 2               ACR = VIA1_BASE + 11
000000r 2               PCR = VIA1_BASE + 12
000000r 2               IFR = VIA1_BASE + 13
000000r 2               IER = VIA1_BASE + 14
000000r 2               
000000r 1               .include "drivers/ps2.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               DATA = $80   ; Data is in bit 7 of PORTA
000000r 2               ; clock is on CA2
000000r 2               SHIFT = $1
000000r 2               ALT = $2
000000r 2               
000000r 2               KB_STATE_START = $0
000000r 2               KB_STATE_DATA = $1
000000r 2               KB_STATE_PARITY = $2
000000r 2               KB_STATE_STOP = $3
000000r 2               
000000r 2               KB_INIT_STATE_RESET = $0
000000r 2               KB_INIT_STATE_RESET_ACK = $1
000000r 2               KB_INIT_STATE_LEDS = $2
000000r 2               KB_INIT_STATE_LEDS_ACK = $3
000000r 2               KB_INIT_STATE_LEDS_DATA = $4
000000r 2               KB_INIT_STATE_LEDS_DATA_ACK = $5
000000r 2               
000000r 2               LSHIFT_KEY = $12
000000r 2               RSHIFT_KEY = $59
000000r 2               
000000r 2               TIMER_DELAY = $C4
000000r 2               
000000r 2               
000000r 1               ; .include "drivers/4004.inc"
000000r 1               .include "drivers/lcd.inc"
000000r 2               
000000r 2               ; HD 44780 driver
000000r 2               ; all pins on VIA PORTA, 4 bit mode
000000r 2               
000000r 2               ; PORTA0 is free
000000r 2               LCD_BASE = $FFC0
000000r 2               LCD_ADDR_DISABLED = LCD_BASE
000000r 2               LCD_ADDR_ENABLED = LCD_BASE + 1
000000r 2               LCD_DATA_DISABLED = LCD_BASE + 2
000000r 2               LCD_DATA_ENABLED = LCD_BASE + 3
000000r 2               
000000r 2               
000000r 2               ; A0: RS
000000r 2               ; A1: E
000000r 2               
000000r 1               .include "drivers/vga.inc"
000000r 2               VIDEO_BASE = $FFB0
000000r 2               
000000r 2               VIDEO_CTRL = VIDEO_BASE       ;// Formatted as follows |INCR_5|INCR_4|INCR_3|INCR_2|INCR_1|INCR_0|MODE_1|MODE_0|  default to LORES
000000r 2               VIDEO_ADDR_LOW = VIDEO_BASE + 1   ;// also contains the increment ||||ADDR4|ADDR_3|ADDR_2|ADDR_1|ADDR_0|
000000r 2               VIDEO_ADDR_HIGH = VIDEO_BASE + 2
000000r 2               VIDEO_DATA = VIDEO_BASE + 3
000000r 2               VIDEO_IEN = VIDEO_BASE + 4    ;// formatted as follows |VSYNC| | | | | | |HSYNC|
000000r 2               VIDEO_INTR = VIDEO_BASE + 5   ;// formatted as follows |VSYNC| | | | | | |HSYNC|
000000r 2               VIDEO_HSCROLL = VIDEO_BASE + 6
000000r 2               VIDEO_VSCROLL = VIDEO_BASE + 7
000000r 2               
000000r 2               VIDEO_HIRES_HCHARS = 80
000000r 2               VIDEO_HIRES_VCHARS = 60
000000r 2               
000000r 1               .include "drivers/keyboard.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               KB_VIA_BASE   = $FF90
000000r 2               KB_PORTB = KB_VIA_BASE
000000r 2               KB_PORTA  = KB_VIA_BASE+1
000000r 2               KB_DDRB = KB_VIA_BASE+2
000000r 2               KB_DDRA = KB_VIA_BASE+3
000000r 2               
000000r 2               
000000r 2               KB_T1CL = KB_VIA_BASE + 4
000000r 2               KB_T1CH = KB_VIA_BASE + 5
000000r 2               KB_T1LL = KB_VIA_BASE + 6
000000r 2               KB_T1LH = KB_VIA_BASE + 7
000000r 2               KB_ACR = KB_VIA_BASE + 11
000000r 2               KB_PCR = KB_VIA_BASE + 12
000000r 2               KB_IFR = KB_VIA_BASE + 13
000000r 2               KB_IER = KB_VIA_BASE + 14
000000r 2               
000000r 1               
000000r 1               .include "drivers/cf.inc"
000000r 2               
000000r 2               CF_BASE = $FFD0
000000r 2               CF_REG_0 = CF_BASE
000000r 2               CF_REG_1 = CF_BASE + 1
000000r 2               CF_REG_2 = CF_BASE + 2
000000r 2               CF_REG_3 = CF_BASE + 3
000000r 2               CF_REG_4 = CF_BASE + 4
000000r 2               CF_REG_5 = CF_BASE + 5
000000r 2               CF_REG_6 = CF_BASE + 6
000000r 2               CF_REG_7 = CF_BASE + 7
000000r 2               
000000r 2               CF_READ_SECTOR_COMMAND = $20
000000r 2               
000000r 1               
000000r 1               .include "drivers/zp.s"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               ; next_addr: .res 1
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 2               .segment "ZEROPAGE": zeropage
000000r 2               
000000r 2  xx xx        stack_p: .res 2
000002r 2               
000002r 2               
000002r 1               
000002r 1               
000002r 1               .segment "RODATA"
000000r 1               
000000r 1               .import    copydata
000000r 1               .import zerobss
000000r 1               
000000r 1               .segment "STARTUP"
000000r 1               
000000r 1               v_reset:
000000r 1               
000000r 1  20 rr rr         JSR     copydata
000003r 1  20 rr rr         jsr zerobss
000006r 1               
000006r 1  4C rr rr         jmp kernel_init
000009r 1               
000009r 1               
000009r 1               
000009r 1               
000009r 1               .include "drivers/acia.s"
000009r 2               .segment "DATA"
000000r 2               
000000r 2               acia_init:
000000r 2  8D E1 FF         sta ACIA_STATUS        ; soft reset (value not important)
000003r 2                                           ; set specific modes and functions
000003r 2  9C rr rr         stz has_acia
000006r 2  A9 0B            lda #$0B                ; no parity, no echo, no Tx interrupt, NO Rx interrupt, enable Tx/Rx
000008r 2                   ;lda #$09               ; no parity, no echo, no Tx interrupt, Rx interrupt, enable Tx/Rx
000008r 2  8D E2 FF         sta ACIA_CMD        ; store to the command register
00000Br 2  AD E2 FF         lda ACIA_CMD        ; load command register again
00000Er 2  C9 0B            cmp #$0B                ; if not the same
000010r 2  D0 11            bne acia_absent         ; then it means the ACIA is not connected
000012r 2  AD E1 FF         lda ACIA_STATUS         ; Read the ACAI status to
000015r 2  29 60            and #$60                ; check if present or absent
000017r 2  D0 0A            bne acia_absent
000019r 2  A9 01            lda #1
00001Br 2  8D rr rr         sta has_acia           ; remember that ACIA is here
00001Er 2  A9 10            lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 115.200k baud rate
000020r 2                   ;lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 1200 baud rate
000020r 2  8D E3 FF         sta ACIA_CTRL          ; program the ctl register
000023r 2               
000023r 2               acia_absent:
000023r 2  A0 14                ldy #20
000025r 2               aa_loop:
000025r 2  20 rr rr             jsr delay_short
000028r 2  AD E1 FF             lda ACIA_STATUS         ; Read ACIA data a few times
00002Br 2  AD E0 FF             lda ACIA_DATA           ; to try and prevent spurious characters
00002Er 2  88                   dey
00002Fr 2  D0 F4                bne aa_loop
000031r 2               aa_end:
000031r 2  60                   rts
000032r 2               
000032r 2               acia_out:
000032r 2  48               pha
000033r 2  5A               phy
000034r 2  8D E0 FF         sta ACIA_DATA
000037r 2  A0 20            ldy #$20            ;minimal delay is $02
000039r 2  20 rr rr         jsr delay_short
00003Cr 2  7A               ply
00003Dr 2  68               pla
00003Er 2  60               rts
00003Fr 2               
00003Fr 2               acia_getc:
00003Fr 2  AD E1 FF         lda ACIA_STATUS                 ; Read the ACIA status to
000042r 2  29 08            and #$08                        ; Check if there is character in the receiver
000044r 2  F0 05            beq @no_char      ; Exit now if we don't get one.
000046r 2  AD E0 FF         lda ACIA_DATA
000049r 2  38               sec
00004Ar 2  60               rts
00004Br 2               @no_char:
00004Br 2  18               clc
00004Cr 2  60               rts
00004Dr 2               
00004Dr 1               .include "drivers/timer.s"
00004Dr 2               
00004Dr 2               
00004Dr 2               COUNTER = CLOCK_SPEED/400        ; n/s
00004Dr 2               
00004Dr 2               .segment "ZEROPAGE": zeropage
000002r 2  xx xx xx xx  time: .res 4
000006r 2               
000006r 2               .segment "DATA"
00004Dr 2               
00004Dr 2               timer_init:
00004Dr 2  AD 8E FF         lda IER
000050r 2  09 C0            ora #$C0        ;enable interrupt on timer1 timeout
000052r 2  8D 8E FF         sta IER
000055r 2  A9 40            lda #$40        ; timer one free run mode
000057r 2  8D 8B FF         sta ACR
00005Ar 2  A9 60            lda #<COUNTER     ; set timer to low byte to calculated value from defined clock speed
00005Cr 2  8D 84 FF         sta T1CL
00005Fr 2  A9 EA            lda #>COUNTER       ; set timer to high byte to calculated value from defined clock speed
000061r 2               
000061r 2  8D 85 FF         sta T1CH
000064r 2  A9 00            lda #0              ; reset time variable
000066r 2  85 rr            sta time
000068r 2  85 rr            sta time+1
00006Ar 2  85 rr            sta time+2
00006Cr 2  85 rr            sta time+3
00006Er 2  58               cli
00006Fr 2  60               rts
000070r 2               
000070r 2               
000070r 2               timer_irq:
000070r 2  E6 rr            inc time
000072r 2  F0 01            beq @inc1
000074r 2               @exit1:
000074r 2                   ; this resets the PS/2 temp variables
000074r 2                   ;jsr reset_ps2
000074r 2  60               rts
000075r 2               @inc1:
000075r 2  E6 rr            inc time+1
000077r 2  F0 02            beq @inc2
000079r 2  80 F9            bra @exit1
00007Br 2               @inc2:
00007Br 2  E6 rr            inc time+2
00007Dr 2  F0 02            beq @inc3
00007Fr 2  80 F3            bra @exit1
000081r 2               @inc3:
000081r 2  E6 rr            inc time+3
000083r 2  80 EF            bra @exit1
000085r 2  60               rts
000086r 2               
000086r 1               ; .include "drivers/keyboard.s"
000086r 1               .include "drivers/ps2.s"
000086r 2               ; Copyright 2020 Jonathan Foucher
000086r 2               
000086r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000086r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000086r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000086r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000086r 2               ; is furnished to do so, subject to the following conditions:
000086r 2               
000086r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000086r 2               ; substantial portions of the Software.
000086r 2               
000086r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000086r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000086r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000086r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000086r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000086r 2               ; DEALINGS IN THE SOFTWARE.
000086r 2               
000086r 2               .segment "ZEROPAGE": zeropage
000006r 2               
000006r 2  xx xx xx xx  last_ps2_time: .res 4
00000Ar 2  xx           KB_BUF_W_PTR: .res 1
00000Br 2  xx           KB_BUF_R_PTR: .res 1
00000Cr 2  xx           control_keys: .res 1
00000Dr 2  xx           character: .res 1
00000Er 2               
00000Er 2               .segment "BSS"
000000r 2  xx xx xx xx  KB_BUF: .res 128
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
000080r 2  xx           KB_STATE: .res 1
000081r 2  xx           KB_TEMP: .res 1
000082r 2  xx           KB_PARITY: .res 1
000083r 2  xx           KB_BIT: .res 1
000084r 2  xx           KB_INIT_STATE: .res 1
000085r 2  xx           KB_INIT_WAIT: .res 1
000086r 2  xx           ready: .res 1
000087r 2  xx           to_send: .res 1
000088r 2  xx           ignore_next: .res 1
000089r 2               
000089r 2               .segment "RODATA"
000000r 2               
000000r 2               .include "drivers/keycodes.s"
000000r 3               
000000r 3               
000000r 3               ASCIITBL:
000000r 3  00               .byte $00               ; 00 no key pressed
000001r 3  89               .byte $89               ; 01 F9
000002r 3  87               .byte $87               ; 02 relocated F7
000003r 3  85               .byte $85               ; 03 F5
000004r 3  83               .byte $83               ; 04 F3
000005r 3  81               .byte $81               ; 05 F1
000006r 3  82               .byte $82               ; 06 F2
000007r 3  8C               .byte $8C               ; 07 F12
000008r 3  00               .byte $00               ; 08
000009r 3  8A               .byte $8A               ; 09 F10
00000Ar 3  88               .byte $88               ; 0A F8
00000Br 3  86               .byte $86               ; 0B F6
00000Cr 3  84               .byte $84               ; 0C F4
00000Dr 3  09               .byte $09               ; 0D tab
00000Er 3  60               .byte $60               ; 0E `~
00000Fr 3  8F               .byte $8F               ; 0F relocated Print Screen key
000010r 3  03               .byte $03               ; 10 relocated Pause/Break key
000011r 3  A0               .byte $A0               ; 11 left alt (right alt too)
000012r 3  00               .byte $00               ; 12 left shift
000013r 3  E0               .byte $E0               ; 13 relocated Alt release code
000014r 3  00               .byte $00               ; 14 left ctrl (right ctrl too)
000015r 3  71               .byte $71               ; 15 qQ
000016r 3  31               .byte $31               ; 16 1!
000017r 3  00               .byte $00               ; 17
000018r 3  00               .byte $00               ; 18
000019r 3  00               .byte $00               ; 19
00001Ar 3  7A               .byte $7A               ; 1A zZ
00001Br 3  73               .byte $73               ; 1B sS
00001Cr 3  61               .byte $61               ; 1C aA
00001Dr 3  77               .byte $77               ; 1D wW
00001Er 3  32               .byte $32               ; 1E 2@
00001Fr 3  A1               .byte $A1               ; 1F Windows 98 menu key (left side)
000020r 3  02               .byte $02               ; 20 relocated ctrl-break key
000021r 3  63               .byte $63               ; 21 cC
000022r 3  78               .byte $78               ; 22 xX
000023r 3  64               .byte $64               ; 23 dD
000024r 3  65               .byte $65               ; 24 eE
000025r 3  34               .byte $34               ; 25 4$
000026r 3  33               .byte $33               ; 26 3#
000027r 3  A2               .byte $A2               ; 27 Windows 98 menu key (right side)
000028r 3  00               .byte $00               ; 28
000029r 3  20               .byte $20               ; 29 space
00002Ar 3  76               .byte $76               ; 2A vV
00002Br 3  66               .byte $66               ; 2B fF
00002Cr 3  74               .byte $74               ; 2C tT
00002Dr 3  72               .byte $72               ; 2D rR
00002Er 3  35               .byte $35               ; 2E 5%
00002Fr 3  A3               .byte $A3               ; 2F Windows 98 option key (right click, right side)
000030r 3  00               .byte $00               ; 30
000031r 3  6E               .byte $6E               ; 31 nN
000032r 3  62               .byte $62               ; 32 bB
000033r 3  68               .byte $68               ; 33 hH
000034r 3  67               .byte $67               ; 34 gG
000035r 3  79               .byte $79               ; 35 yY
000036r 3  36               .byte $36               ; 36 6^
000037r 3  00               .byte $00               ; 37
000038r 3  00               .byte $00               ; 38
000039r 3  00               .byte $00               ; 39
00003Ar 3  6D               .byte $6D               ; 3A mM
00003Br 3  6A               .byte $6A               ; 3B jJ
00003Cr 3  75               .byte $75               ; 3C uU
00003Dr 3  37               .byte $37               ; 3D 7&
00003Er 3  38               .byte $38               ; 3E 8*
00003Fr 3  00               .byte $00               ; 3F
000040r 3  00               .byte $00               ; 40
000041r 3  2C               .byte $2C               ; 41 ,<
000042r 3  6B               .byte $6B               ; 42 kK
000043r 3  69               .byte $69               ; 43 iI
000044r 3  6F               .byte $6F               ; 44 oO
000045r 3  30               .byte $30               ; 45 0)
000046r 3  39               .byte $39               ; 46 9(
000047r 3  00               .byte $00               ; 47
000048r 3  00               .byte $00               ; 48
000049r 3  2E               .byte $2E               ; 49 .>
00004Ar 3  2F               .byte $2F               ; 4A /?
00004Br 3  6C               .byte $6C               ; 4B lL
00004Cr 3  3B               .byte $3B               ; 4C ;:
00004Dr 3  70               .byte $70               ; 4D pP
00004Er 3  2D               .byte $2D               ; 4E -_
00004Fr 3  00               .byte $00               ; 4F
000050r 3  00               .byte $00               ; 50
000051r 3  00               .byte $00               ; 51
000052r 3  27               .byte $27               ; 52 '"
000053r 3  00               .byte $00               ; 53
000054r 3  5B               .byte $5B               ; 54 [{
000055r 3  3D               .byte $3D               ; 55 =+
000056r 3  00               .byte $00               ; 56
000057r 3  00               .byte $00               ; 57
000058r 3  00               .byte $00               ; 58 caps
000059r 3  00               .byte $00               ; 59 r shift
00005Ar 3  0D               .byte $0D               ; 5A <Enter>
00005Br 3  5D               .byte $5D               ; 5B ]}
00005Cr 3  00               .byte $00               ; 5C
00005Dr 3  5C               .byte $5C               ; 5D \|
00005Er 3  00               .byte $00               ; 5E
00005Fr 3  00               .byte $00               ; 5F
000060r 3  00               .byte $00               ; 60
000061r 3  00               .byte $00               ; 61
000062r 3  00               .byte $00               ; 62
000063r 3  00               .byte $00               ; 63
000064r 3  00               .byte $00               ; 64
000065r 3  00               .byte $00               ; 65
000066r 3  08               .byte $08               ; 66 bkspace
000067r 3  00               .byte $00               ; 67
000068r 3  00               .byte $00               ; 68
000069r 3  31               .byte $31               ; 69 kp 1
00006Ar 3  2F               .byte $2f               ; 6A kp / converted from E04A in code
00006Br 3  34               .byte $34               ; 6B kp 4
00006Cr 3  37               .byte $37               ; 6C kp 7
00006Dr 3  00               .byte $00               ; 6D
00006Er 3  00               .byte $00               ; 6E
00006Fr 3  00               .byte $00               ; 6F
000070r 3  30               .byte $30               ; 70 kp 0
000071r 3  2E               .byte $2E               ; 71 kp .
000072r 3  32               .byte $32               ; 72 kp 2
000073r 3  35               .byte $35               ; 73 kp 5
000074r 3  36               .byte $36               ; 74 kp 6
000075r 3  38               .byte $38               ; 75 kp 8
000076r 3  1B               .byte $1B               ; 76 esc
000077r 3  00               .byte $00               ; 77 num lock
000078r 3  8B               .byte $8B               ; 78 F11
000079r 3  2B               .byte $2B               ; 79 kp +
00007Ar 3  33               .byte $33               ; 7A kp 3
00007Br 3  2D               .byte $2D               ; 7B kp -
00007Cr 3  2A               .byte $2A               ; 7C kp *
00007Dr 3  39               .byte $39               ; 7D kp 9
00007Er 3  8D               .byte $8D               ; 7E scroll lock
00007Fr 3  00               .byte $00               ; 7F
000080r 3                   ;
000080r 3                   ; Table for shifted scancodes
000080r 3                   ;
000080r 3  00               .byte $00               ; 80
000081r 3  C9               .byte $C9               ; 81 F9
000082r 3  C7               .byte $C7               ; 82 relocated F7
000083r 3  C5               .byte $C5               ; 83 F5 (F7 actual scancode=83)
000084r 3  C3               .byte $C3               ; 84 F3
000085r 3  C1               .byte $C1               ; 85 F1
000086r 3  C2               .byte $C2               ; 86 F2
000087r 3  CC               .byte $CC               ; 87 F12
000088r 3  00               .byte $00               ; 88
000089r 3  CA               .byte $CA               ; 89 F10
00008Ar 3  C8               .byte $C8               ; 8A F8
00008Br 3  C6               .byte $C6               ; 8B F6
00008Cr 3  C4               .byte $C4               ; 8C F4
00008Dr 3  09               .byte $09               ; 8D tab
00008Er 3  7E               .byte $7E               ; 8E `~
00008Fr 3  CF               .byte $CF               ; 8F relocated Print Screen key
000090r 3  03               .byte $03               ; 90 relocated Pause/Break key
000091r 3  A0               .byte $A0               ; 91 left alt (right alt)
000092r 3  00               .byte $00               ; 92 left shift
000093r 3  E0               .byte $E0               ; 93 relocated Alt release code
000094r 3  00               .byte $00               ; 94 left ctrl (and right ctrl)
000095r 3  51               .byte $51               ; 95 qQ
000096r 3  21               .byte $21               ; 96 1!
000097r 3  00               .byte $00               ; 97
000098r 3  00               .byte $00               ; 98
000099r 3  00               .byte $00               ; 99
00009Ar 3  5A               .byte $5A               ; 9A zZ
00009Br 3  53               .byte $53               ; 9B sS
00009Cr 3  41               .byte $41               ; 9C aA
00009Dr 3  57               .byte $57               ; 9D wW
00009Er 3  40               .byte $40               ; 9E 2@
00009Fr 3  E1               .byte $E1               ; 9F Windows 98 menu key (left side)
0000A0r 3  02               .byte $02               ; A0 relocated ctrl-break key
0000A1r 3  43               .byte $43               ; A1 cC
0000A2r 3  58               .byte $58               ; A2 xX
0000A3r 3  44               .byte $44               ; A3 dD
0000A4r 3  45               .byte $45               ; A4 eE
0000A5r 3  24               .byte $24               ; A5 4$
0000A6r 3  23               .byte $23               ; A6 3#
0000A7r 3  E2               .byte $E2               ; A7 Windows 98 menu key (right side)
0000A8r 3  00               .byte $00               ; A8
0000A9r 3  20               .byte $20               ; A9 space
0000AAr 3  56               .byte $56               ; AA vV
0000ABr 3  46               .byte $46               ; AB fF
0000ACr 3  54               .byte $54               ; AC tT
0000ADr 3  52               .byte $52               ; AD rR
0000AEr 3  25               .byte $25               ; AE 5%
0000AFr 3  E3               .byte $E3               ; AF Windows 98 option key (right click, right side)
0000B0r 3  00               .byte $00               ; B0
0000B1r 3  4E               .byte $4E               ; B1 nN
0000B2r 3  42               .byte $42               ; B2 bB
0000B3r 3  48               .byte $48               ; B3 hH
0000B4r 3  47               .byte $47               ; B4 gG
0000B5r 3  59               .byte $59               ; B5 yY
0000B6r 3  5E               .byte $5E               ; B6 6^
0000B7r 3  00               .byte $00               ; B7
0000B8r 3  00               .byte $00               ; B8
0000B9r 3  00               .byte $00               ; B9
0000BAr 3  4D               .byte $4D               ; BA mM
0000BBr 3  4A               .byte $4A               ; BB jJ
0000BCr 3  55               .byte $55               ; BC uU
0000BDr 3  26               .byte $26               ; BD 7&
0000BEr 3  2A               .byte $2A               ; BE 8*
0000BFr 3  00               .byte $00               ; BF
0000C0r 3  00               .byte $00               ; C0
0000C1r 3  3C               .byte $3C               ; C1 ,<
0000C2r 3  4B               .byte $4B               ; C2 kK
0000C3r 3  49               .byte $49               ; C3 iI
0000C4r 3  4F               .byte $4F               ; C4 oO
0000C5r 3  29               .byte $29               ; C5 0)
0000C6r 3  28               .byte $28               ; C6 9(
0000C7r 3  00               .byte $00               ; C7
0000C8r 3  00               .byte $00               ; C8
0000C9r 3  3E               .byte $3E               ; C9 .>
0000CAr 3  3F               .byte $3F               ; CA /?
0000CBr 3  4C               .byte $4C               ; CB lL
0000CCr 3  3A               .byte $3A               ; CC ;:
0000CDr 3  50               .byte $50               ; CD pP
0000CEr 3  5F               .byte $5F               ; CE -_
0000CFr 3  00               .byte $00               ; CF
0000D0r 3  00               .byte $00               ; D0
0000D1r 3  00               .byte $00               ; D1
0000D2r 3  22               .byte $22               ; D2 '"
0000D3r 3  00               .byte $00               ; D3
0000D4r 3  7B               .byte $7B               ; D4 [{
0000D5r 3  2B               .byte $2B               ; D5 =+
0000D6r 3  00               .byte $00               ; D6
0000D7r 3  00               .byte $00               ; D7
0000D8r 3  00               .byte $00               ; D8 caps
0000D9r 3  00               .byte $00               ; D9 r shift
0000DAr 3  0D               .byte $0D               ; DA <Enter>
0000DBr 3  7D               .byte $7D               ; DB ]}
0000DCr 3  00               .byte $00               ; DC
0000DDr 3  7C               .byte $7C               ; DD \|
0000DEr 3  00               .byte $00               ; DE
0000DFr 3  00               .byte $00               ; DF
0000E0r 3  00               .byte $00               ; E0
0000E1r 3  00               .byte $00               ; E1
0000E2r 3  00               .byte $00               ; E2
0000E3r 3  00               .byte $00               ; E3
0000E4r 3  00               .byte $00               ; E4
0000E5r 3  00               .byte $00               ; E5
0000E6r 3  08               .byte $08               ; E6 bkspace
0000E7r 3  00               .byte $00               ; E7
0000E8r 3  00               .byte $00               ; E8
0000E9r 3  91               .byte $91               ; E9 kp 1
0000EAr 3  2F               .byte $2f               ; EA kp / converted from E04A in code
0000EBr 3  94               .byte $94               ; EB kp 4
0000ECr 3  97               .byte $97               ; EC kp 7
0000EDr 3  00               .byte $00               ; ED
0000EEr 3  00               .byte $00               ; EE
0000EFr 3  00               .byte $00               ; EF
0000F0r 3  90               .byte $90               ; F0 kp 0
0000F1r 3  7F               .byte $7F               ; F1 kp .
0000F2r 3  92               .byte $92               ; F2 kp 2
0000F3r 3  95               .byte $95               ; F3 kp 5
0000F4r 3  96               .byte $96               ; F4 kp 6
0000F5r 3  98               .byte $98               ; F5 kp 8
0000F6r 3  1B               .byte $1B               ; F6 esc
0000F7r 3  00               .byte $00               ; F7 num lock
0000F8r 3  CB               .byte $CB               ; F8 F11
0000F9r 3  2B               .byte $2B               ; F9 kp +
0000FAr 3  93               .byte $93               ; FA kp 3
0000FBr 3  2D               .byte $2D               ; FB kp -
0000FCr 3  2A               .byte $2A               ; FC kp *
0000FDr 3  99               .byte $99               ; FD kp 9
0000FEr 3  CD               .byte $CD               ; FE scroll lock
0000FFr 3               
0000FFr 3               
0000FFr 3               
0000FFr 3               
0000FFr 2               
0000FFr 2               .segment "DATA"
000086r 2               
000086r 2               ps2_init:
000086r 2  78             sei ; prevent interrupts while initializing
000087r 2               kb_conn_msg:
000087r 2  A2 00          ldx #0
000089r 2               kb_conn_loop:
000089r 2  BD rr rr       lda kb_conn_msg_text,x
00008Cr 2  F0 1A          beq kb_conn_msg_end
00008Er 2  20 rr rr       jsr kernel_putc
000091r 2  E8             inx
000092r 2  80 F5          bra kb_conn_loop
000094r 2  44 65 74 65  kb_conn_msg_text: .byte "Detecting keyboard", $0D, $00
000098r 2  63 74 69 6E  
00009Cr 2  67 20 6B 65  
0000A8r 2               kb_conn_msg_end:
0000A8r 2               
0000A8r 2  AD 8E FF       lda IER
0000ABr 2  09 88          ora #$88      ;enable interrupt on neg transition on CB2
0000ADr 2  8D 8E FF       sta IER
0000B0r 2               
0000B0r 2  A9 00          lda #0
0000B2r 2  8D 8C FF       sta PCR
0000B5r 2  8D rr rr       sta KB_TEMP
0000B8r 2  8D rr rr       sta KB_BIT
0000BBr 2  8D rr rr       sta KB_STATE
0000BEr 2  8D rr rr       sta to_send
0000C1r 2  8D rr rr       sta KB_PARITY
0000C4r 2  85 rr          sta KB_BUF_W_PTR
0000C6r 2  85 rr          sta KB_BUF_R_PTR
0000C8r 2  8D rr rr       sta KB_INIT_STATE
0000CBr 2  8D rr rr       sta KB_INIT_WAIT
0000CEr 2  8D rr rr       sta ready
0000D1r 2  8D rr rr       sta ignore_next
0000D4r 2  85 rr          sta character
0000D6r 2  20 rr rr       jsr clear_buffer
0000D9r 2               
0000D9r 2                 ; jsr kb_reset
0000D9r 2                 ; jsr kb_leds
0000D9r 2                 ; jsr kb_leds_data
0000D9r 2               
0000D9r 2                 ; jmp done_init
0000D9r 2               
0000D9r 2  A9 00          lda #KB_INIT_STATE_RESET
0000DBr 2  8D rr rr       sta KB_INIT_STATE
0000DEr 2  58             cli           ;enable interrupts
0000DFr 2               
0000DFr 2               @wait1:
0000DFr 2  A0 0A          ldy #10
0000E1r 2  20 rr rr       jsr delay
0000E4r 2  EE rr rr       inc KB_INIT_WAIT
0000E7r 2  F0 1C          beq done_init     ; nothing to show yet
0000E9r 2  AD rr rr       lda to_send
0000ECr 2  D0 F1          bne @wait1       ; do nothing while sending
0000EEr 2               
0000EEr 2                 ;jsr lcd_print
0000EEr 2               
0000EEr 2  AE rr rr       ldx KB_INIT_STATE
0000F1r 2  E0 00          cpx #KB_INIT_STATE_RESET
0000F3r 2  F0 06          beq @do_reset
0000F5r 2  E0 01          cpx #KB_INIT_STATE_RESET_ACK
0000F7r 2  F0 0C          beq done_init
0000F9r 2                 ; beq @self_test_ok  ; Wait for 256 loops with nothing. if still nothing, reset keyboard
0000F9r 2               
0000F9r 2  80 0A          bra done_init
0000FBr 2                 ;sta PORTA
0000FBr 2                 ; wait for keyboard self test (#$AA)
0000FBr 2               
0000FBr 2               @do_reset:
0000FBr 2  20 rr rr       jsr kb_reset
0000FEr 2  A9 01          lda #KB_INIT_STATE_RESET_ACK  ; next state should be an acknowledgment
000100r 2  8D rr rr       sta KB_INIT_STATE
000103r 2  80 DA          bra @wait1
000105r 2               
000105r 2               
000105r 2               done_init:
000105r 2  A9 00          lda #0
000107r 2  8D 82 FF       sta DDRB
00010Ar 2  8D 8C FF       sta PCR
00010Dr 2  8D rr rr       sta ignore_next
000110r 2  8D rr rr       sta ready
000113r 2  85 rr          sta control_keys
000115r 2  8D rr rr       sta to_send
000118r 2  8D rr rr       sta ready
00011Br 2  85 rr          sta character
00011Dr 2  8D rr rr       sta KB_TEMP
000120r 2  8D rr rr       sta KB_INIT_STATE
000123r 2  8D rr rr       sta KB_BIT
000126r 2  8D rr rr       sta KB_STATE
000129r 2  85 rr          sta KB_BUF_W_PTR
00012Br 2  85 rr          sta KB_BUF_R_PTR
00012Dr 2  58             cli ; enable interrupts again
00012Er 2  60             rts
00012Fr 2               
00012Fr 2               
00012Fr 2               kb_reset:
00012Fr 2  A9 00          lda #0
000131r 2  8D rr rr       sta KB_INIT_WAIT
000134r 2  A9 F0          lda #$F0
000136r 2  8D 81 FF       sta PORTA
000139r 2  78             sei                   ;disable interrupts
00013Ar 2  20 rr rr       jsr prepare_send
00013Dr 2  A9 FF          lda #$FF
00013Fr 2  8D rr rr       sta to_send
000142r 2  58             cli                   ; enable interrupts
000143r 2  60             rts
000144r 2               
000144r 2               no_kb_msg:
000144r 2  A2 00          ldx #0
000146r 2               no_kb_loop:
000146r 2  BD rr rr       lda no_kb_msg_text,x
000149r 2  F0 BA          beq done_init
00014Br 2  20 rr rr       jsr kernel_putc
00014Er 2  E8             inx
00014Fr 2  80 F5          bra no_kb_loop
000151r 2  4E 6F 20 6B  no_kb_msg_text: .byte "No keyboard connected", $0D, $00
000155r 2  65 79 62 6F  
000159r 2  61 72 64 20  
000168r 2               
000168r 2               
000168r 2               prepare_send:
000168r 2  48             pha
000169r 2  5A             phy
00016Ar 2                 ; ready to send, pull clock low for a while
00016Ar 2  A9 C0          lda #$C0
00016Cr 2  8D 8C FF       sta PCR       ;set CB2 low
00016Fr 2                 ;delay
00016Fr 2  A0 80          ldy #$80
000171r 2  20 rr rr       jsr delay
000174r 2                 ; delay end
000174r 2                 ; pull data low now
000174r 2  AD 80 FF       lda PORTB
000177r 2  29 7F          and #($FF^DATA)
000179r 2  8D 80 FF       sta PORTB
00017Cr 2  AD 82 FF       lda DDRB
00017Fr 2  09 80          ora #DATA   ;data as output to set it low
000181r 2  8D 82 FF       sta DDRB
000184r 2  A0 40          ldy #$40
000186r 2  20 rr rr       jsr delay
000189r 2  A9 01          lda #KB_STATE_DATA    ; no start bit when sending
00018Br 2  8D rr rr       sta KB_STATE
00018Er 2                 ; release clock
00018Er 2  A9 00          lda #0
000190r 2  8D rr rr       sta to_send
000193r 2  8D rr rr       sta KB_PARITY
000196r 2  8D 8C FF       sta PCR       ;set CB2 to negative edge input
000199r 2               
000199r 2  7A             ply
00019Ar 2  68             pla
00019Br 2  60             rts
00019Cr 2               
00019Cr 2               
00019Cr 2               reset_ps2:          ; routine called during a timer interrupt to check
00019Cr 2  48             pha
00019Dr 2                                   ; if the elasped time since the last ps2 interrupt allows us to reset it
00019Dr 2  A5 rr          lda time+3
00019Fr 2  C5 rr          cmp last_ps2_time+3
0001A1r 2  90 16          bcc @reset
0001A3r 2  A5 rr          lda time+2
0001A5r 2  C5 rr          cmp last_ps2_time+2
0001A7r 2  90 10          bcc @reset
0001A9r 2  A5 rr          lda time+1
0001ABr 2  C5 rr          cmp last_ps2_time+1
0001ADr 2  90 0A          bcc @reset
0001AFr 2  A5 rr          lda time
0001B1r 2  69 01          adc #$1
0001B3r 2  C5 rr          cmp last_ps2_time
0001B5r 2  90 02          bcc @reset
0001B7r 2               @exit2:
0001B7r 2  68             pla
0001B8r 2  60             rts
0001B9r 2               @reset:
0001B9r 2  A9 00          lda #0
0001BBr 2  8D rr rr       sta KB_TEMP
0001BEr 2  8D rr rr       sta KB_BIT
0001C1r 2  8D rr rr       sta KB_STATE
0001C4r 2  85 rr          sta KB_BUF_W_PTR
0001C6r 2  85 rr          sta KB_BUF_R_PTR
0001C8r 2  F0 ED          beq @exit2
0001CAr 2               
0001CAr 2               clear_buffer:
0001CAr 2  DA             phx
0001CBr 2  A2 FF          ldx #$ff
0001CDr 2               @clear_loop:
0001CDr 2  9E rr rr       stz KB_BUF, x
0001D0r 2  CA             dex
0001D1r 2  D0 FA          bne @clear_loop
0001D3r 2  FA             plx
0001D4r 2  60             rts
0001D5r 2               
0001D5r 2               
0001D5r 2               ps2_get_char:
0001D5r 2               
0001D5r 2  DA               phx                             ; save X
0001D6r 2  A6 rr            ldx KB_BUF_R_PTR                ; check the keyboard buffer
0001D8r 2  BD rr rr         lda KB_BUF, x
0001DBr 2  F0 0B            beq no_ps2_char_available       ; exit if nothing found
0001DDr 2  9E rr rr         stz KB_BUF, x                   ; if there was a character, reset this buffer cell
0001E0r 2  E6 rr            inc KB_BUF_R_PTR                ; and increment the read pointer
0001E2r 2               
0001E2r 2  38               sec                             ; mark character present
0001E3r 2  FA               plx                             ; restore X
0001E4r 2  20 rr rr         jsr check_ctrl_c
0001E7r 2  60               rts                             ; return
0001E8r 2               no_ps2_char_available:                  ; no keyboard char
0001E8r 2  E6 rr            inc KB_BUF_R_PTR                ; increment read pointer for next time
0001EAr 2  FA               plx                             ; restore X
0001EBr 2  18               clc
0001ECr 2  60               rts
0001EDr 2                 .include "ps2_irq.s"
0001EDr 3               ; Copyright 2020 Jonathan Foucher
0001EDr 3               
0001EDr 3               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
0001EDr 3               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
0001EDr 3               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
0001EDr 3               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
0001EDr 3               ; is furnished to do so, subject to the following conditions:
0001EDr 3               
0001EDr 3               ; The above copyright notice and this permission notice shall be included in all copies or
0001EDr 3               ; substantial portions of the Software.
0001EDr 3               
0001EDr 3               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
0001EDr 3               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
0001EDr 3               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
0001EDr 3               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
0001EDr 3               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
0001EDr 3               ; DEALINGS IN THE SOFTWARE.
0001EDr 3               
0001EDr 3               
0001EDr 3               
0001EDr 3               
0001EDr 3               ps2_irq:
0001EDr 3  48               pha
0001EEr 3  DA               phx
0001EFr 3  AD rr rr         lda to_send
0001F2r 3  D0 25            bne @willsend
0001F4r 3  AD rr rr         lda KB_STATE            ; which state ?
0001F7r 3  C9 00            cmp #KB_STATE_START
0001F9r 3  F0 0F            beq @start        ; start bit
0001FBr 3               
0001FBr 3  C9 01            cmp #KB_STATE_DATA             ; get data bits
0001FDr 3  F0 1D            beq @data
0001FFr 3               
0001FFr 3  C9 02            cmp #KB_STATE_PARITY             ; this is the parity bit
000201r 3  F0 3A            beq @parity
000203r 3               
000203r 3  C9 03            cmp #KB_STATE_STOP      ; stop bit
000205r 3  F0 3D            beq @stop
000207r 3  4C rr rr         jmp @exit
00020Ar 3               
00020Ar 3               @start:
00020Ar 3  A9 01            lda #KB_STATE_DATA
00020Cr 3  8D rr rr         sta KB_STATE        ; next state will be to get data
00020Fr 3  A9 00            lda #0
000211r 3  8D rr rr         sta KB_TEMP
000214r 3  8D rr rr         sta KB_BIT
000217r 3  80 65            bra @exit
000219r 3               @willsend:
000219r 3  4C rr rr         jmp @sending
00021Cr 3               @data:
00021Cr 3  AD 80 FF         lda PORTB       ; get the bit of data from PORTB bit 7
00021Fr 3  29 80            and #$80
000221r 3  0D rr rr         ora KB_TEMP     ; OR it with existing temp data
000224r 3  8D rr rr         sta KB_TEMP     ; save it
000227r 3  EE rr rr         inc KB_BIT      ; prepare for next bit
00022Ar 3  AD rr rr         lda KB_BIT
00022Dr 3  C9 08            cmp #8          ; if this is the last bit, next state is parity
00022Fr 3  F0 05            beq @next_state_parity
000231r 3  4E rr rr         lsr KB_TEMP     ; if not last bit, shift KB_TEMP right to prepare for next bit
000234r 3               
000234r 3  80 48            bra @exit
000236r 3               
000236r 3               @next_state_parity:
000236r 3  A9 02            lda #KB_STATE_PARITY    ;next state is parity
000238r 3  8D rr rr         sta KB_STATE
00023Br 3  80 41            bra @exit
00023Dr 3               
00023Dr 3               @parity:
00023Dr 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
00023Fr 3  8D rr rr         sta KB_STATE
000242r 3  80 3A            bra @exit
000244r 3               
000244r 3               @stop:
000244r 3  A9 00            lda #KB_STATE_START
000246r 3  8D rr rr         sta KB_STATE
000249r 3  AD rr rr         lda ignore_next
00024Cr 3  D0 45            bne @ignored
00024Er 3                   ; Save key to character buffer
00024Er 3  AE rr rr         ldx KB_TEMP
000251r 3  E0 AA            cpx #$AA
000253r 3  F0 32            beq @init
000255r 3  E0 FA            cpx #$FA
000257r 3  F0 2E            beq @init
000259r 3  E0 F0            cpx #$F0
00025Br 3  F0 2F            beq @ignore_next
00025Dr 3  E0 12            cpx #LSHIFT_KEY
00025Fr 3  F0 4F            beq @shift_pressed
000261r 3  E0 59            cpx #RSHIFT_KEY
000263r 3  F0 4B            beq @shift_pressed
000265r 3  A5 rr            lda control_keys
000267r 3  29 01            and #SHIFT
000269r 3  D0 09            bne @shifted
00026Br 3               @unshifted:
00026Br 3                   ;stx PORTA
00026Br 3  BD rr rr         lda ASCIITBL, x
00026Er 3               
00026Er 3  C9 1B            cmp #$1B             ; reset if escape pressed
000270r 3  F0 12            beq @esc
000272r 3  80 03            bra @output
000274r 3               @shifted:
000274r 3  BD rr rr         lda ASCIITBL+128, x
000277r 3               @output:
000277r 3  A6 rr            ldx KB_BUF_W_PTR
000279r 3  9D rr rr         sta KB_BUF, x
00027Cr 3                   ;sta PORTA
00027Cr 3  E6 rr            inc KB_BUF_W_PTR
00027Er 3               
00027Er 3               @exit:
00027Er 3  2C 80 FF         bit PORTB
000281r 3  FA               plx
000282r 3  68               pla
000283r 3  60               rts
000284r 3               @esc:
000284r 3  4C rr rr         jmp v_reset
000287r 3               @init:
000287r 3  8E rr rr         stx ready
00028Ar 3  80 F2            bra @exit
00028Cr 3               
00028Cr 3               @ignore_next:
00028Cr 3  A9 01            lda #1
00028Er 3  8D rr rr         sta ignore_next
000291r 3  80 EB            bra @exit
000293r 3               
000293r 3               @ignored:
000293r 3  AE rr rr         ldx KB_TEMP
000296r 3  E0 12            cpx #LSHIFT_KEY
000298r 3  F0 0B            beq @shift_released
00029Ar 3  E0 59            cpx #RSHIFT_KEY
00029Cr 3  F0 07            beq @shift_released
00029Er 3  A9 00            lda #0
0002A0r 3  8D rr rr         sta ignore_next
0002A3r 3  80 D9            bra @exit
0002A5r 3               
0002A5r 3               @shift_released:
0002A5r 3  A9 00            lda #0
0002A7r 3  8D rr rr         sta ignore_next
0002AAr 3  A9 00            lda #0
0002ACr 3  85 rr            sta control_keys
0002AEr 3  80 CE            bra @exit
0002B0r 3               
0002B0r 3               @shift_pressed:
0002B0r 3  A5 rr            lda control_keys
0002B2r 3  09 01            ora #SHIFT
0002B4r 3  85 rr            sta control_keys
0002B6r 3  80 C6            bra @exit
0002B8r 3               
0002B8r 3               @sending:
0002B8r 3                   ; lda #1
0002B8r 3                   ; sta PORTA
0002B8r 3                   ; data pin of DDRB should be set as output by prepare_send
0002B8r 3  AD rr rr         lda KB_STATE                ; which state ?
0002BBr 3  C9 01            cmp #KB_STATE_DATA          ; send data bits
0002BDr 3  F0 0A            beq @sending_data
0002BFr 3  C9 02            cmp #KB_STATE_PARITY        ; this is the parity bit
0002C1r 3  F0 33            beq @sending_parity
0002C3r 3  C9 03            cmp #KB_STATE_STOP          ; stop bit
0002C5r 3  F0 56            beq @sending_stop
0002C7r 3  80 B5            bra @exit
0002C9r 3               
0002C9r 3               
0002C9r 3               @sending_data:
0002C9r 3                   ; lda #4
0002C9r 3                   ; sta PORTA
0002C9r 3  AD rr rr         lda to_send       ; get the bit of data from memory
0002CCr 3  29 01            and #$01          ; get only bottom bit
0002CEr 3  F0 0D            beq @send_zero
0002D0r 3               
0002D0r 3               @send_one:
0002D0r 3  AD 80 FF         lda PORTB
0002D3r 3  09 80            ora #$80
0002D5r 3  8D 80 FF         sta PORTB
0002D8r 3  EE rr rr         inc KB_PARITY
0002DBr 3  80 08            bra @sending_done
0002DDr 3               @send_zero:
0002DDr 3  AD 80 FF         lda PORTB
0002E0r 3  29 7F            and #$7F
0002E2r 3  8D 80 FF         sta PORTB
0002E5r 3               @sending_done:
0002E5r 3                   ; lda #2
0002E5r 3                   ; sta PORTA
0002E5r 3  EE rr rr         inc KB_BIT      ; prepare for next bit
0002E8r 3  AD rr rr         lda KB_BIT
0002EBr 3  C9 08            cmp #8          ; if this is the last bit, next state is parity
0002EDr 3  4C rr rr         jmp @next_state_parity
0002F0r 3  4E rr rr         lsr to_send
0002F3r 3  18               clc
0002F4r 3  80 88            bra @exit
0002F6r 3               
0002F6r 3               @sending_parity:
0002F6r 3                   ; lda #5
0002F6r 3                   ; sta PORTA
0002F6r 3  AD rr rr         lda KB_PARITY
0002F9r 3  29 01            and #$01
0002FBr 3  F0 10            beq @odd_parity     ; send zero if odd parity
0002FDr 3  AD 80 FF         lda PORTB
000300r 3  09 80            ora #$80            ; send one if even
000302r 3  8D 80 FF         sta PORTB
000305r 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
000307r 3  8D rr rr         sta KB_STATE
00030Ar 3  4C rr rr         jmp @exit
00030Dr 3               @odd_parity:
00030Dr 3  AD 80 FF         lda PORTB
000310r 3  29 7F            and #$7F
000312r 3  8D 80 FF         sta PORTB
000315r 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
000317r 3  8D rr rr         sta KB_STATE
00031Ar 3  4C rr rr         jmp @exit
00031Dr 3               
00031Dr 3               @sending_stop:
00031Dr 3                   ; lda #6
00031Dr 3                   ; sta PORTA
00031Dr 3  A9 00            lda #KB_STATE_START     ; set it back to start in case we are receivin next
00031Fr 3  8D rr rr         sta KB_STATE
000322r 3  A9 00            lda #0
000324r 3  8D rr rr         sta to_send
000327r 3  8D rr rr         sta KB_BIT
00032Ar 3  8D rr rr         sta KB_PARITY
00032Dr 3  AD 82 FF         lda DDRB        ; set PORTB back to input
000330r 3  29 7F            and #$7F
000332r 3  8D 82 FF         sta DDRB
000335r 3  4C rr rr         jmp @exit
000338r 3               
000338r 2               
000338r 1               .include "drivers/delayroutines.s"
000338r 2               ; Copyright 2020 Jonathan Foucher
000338r 2               
000338r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000338r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000338r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000338r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000338r 2               ; is furnished to do so, subject to the following conditions:
000338r 2               
000338r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000338r 2               ; substantial portions of the Software.
000338r 2               
000338r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000338r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000338r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000338r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000338r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000338r 2               ; DEALINGS IN THE SOFTWARE.
000338r 2               
000338r 2               .segment "CODE"
000000r 2               ; this routine delays by 2304 * y + 23 cycles
000000r 2               delay:
000000r 2  DA             phx       ; 3 cycles
000001r 2  5A             phy       ; 3 cycles
000002r 2               two:
000002r 2  A2 FF          ldx #$ff  ; 2 cycles
000004r 2               one:
000004r 2  EA             nop       ; 2 cycles
000005r 2  EA             nop       ; 2 cycles
000006r 2  CA             dex       ; 2 cycles
000007r 2  D0 FB          bne one   ; 3 for all cycles, 2 for last
000009r 2  88             dey       ; 2 cycles
00000Ar 2  D0 F6          bne two   ; 3 for all cycles, 2 for last
00000Cr 2  7A             ply       ; 4 cycles
00000Dr 2  FA             plx       ; 4 cycles
00000Er 2  60             rts       ; 6 cycles
00000Fr 2               
00000Fr 2               ; delay is in Y register
00000Fr 2               delay_long:
00000Fr 2  48             pha
000010r 2  5A             phy
000011r 2  DA             phx
000012r 2  98             tya
000013r 2  AA             tax
000014r 2               delay_long_loop:
000014r 2  A0 FF          ldy #$ff
000016r 2  20 rr rr       jsr delay
000019r 2  CA             dex
00001Ar 2  D0 F8          bne delay_long_loop
00001Cr 2  FA             plx
00001Dr 2  7A             ply
00001Er 2  68             pla
00001Fr 2  60             rts
000020r 2               
000020r 2               delay_short:        ; delay Y * 19 cycles
000020r 2  5A             phy
000021r 2               delay_short_loop:
000021r 2  EA             nop               ; 2 cycles
000022r 2  EA             nop               ; 2 cycles
000023r 2  EA             nop               ; 2 cycles
000024r 2  EA             nop               ; 2 cycles
000025r 2  EA             nop               ; 2 cycles
000026r 2  EA             nop               ; 2 cycles
000027r 2  EA             nop               ; 2 cycles
000028r 2               
000028r 2               
000028r 2  88             dey               ; 2 cycles
000029r 2  D0 F6          bne delay_short_loop   ; 2 or 3 cycles
00002Br 2  7A             ply
00002Cr 2  60             rts
00002Dr 2               
00002Dr 1               ; .include "drivers/4004.s"
00002Dr 1               .include "drivers/cf.s"
00002Dr 2               
00002Dr 2               CF_BUF = FAT_BUFFER
00002Dr 2               CF_ADDRESS = $FFD0
00002Dr 2               
00002Dr 2               ; .segment "ZEROPAGE": zeropage
00002Dr 2               ; CF_BUF_PTR: .res 2
00002Dr 2               ; CF_ADDRESS: .res 2
00002Dr 2               
00002Dr 2               
00002Dr 2               .segment "BSS"
000089r 2               
000089r 2  xx xx xx xx  .align  $100
00008Dr 2  xx xx xx xx  
000091r 2  xx xx xx xx  
000100r 2  xx xx xx xx  FAT_BUFFER: .res $200
000104r 2  xx xx xx xx  
000108r 2  xx xx xx xx  
000300r 2               ; .align  256
000300r 2               ;FILE_BUFFER: .res $1000
000300r 2               FILE_BUFFER_END:
000300r 2  xx           lcd_absent: .res 1
000301r 2  xx           has_acia: .res 1
000302r 2  xx xx xx xx  CF_LBA: .res 4
000306r 2  xx xx xx xx  CF_PART_START: .res 4
00030Ar 2  xx           CF_SEC_PER_CLUS: .res 1     ; $8
00030Br 2  xx xx        CF_CURRENT_CLUSTER: .res 2
00030Dr 2  xx xx        CF_ROOT_ENT_CNT: .res 2     ; $200
00030Fr 2  xx xx        CF_ROOT_DIR_SECS: .res 2    ; $02
000311r 2  xx xx        CF_FAT_SEC_CNT: .res 2      ; $F5
000313r 2  xx xx        CF_FIRST_DATA_SEC: .res 2   ; $020B
000315r 2  xx xx        CF_FIRST_ROOT_SEC: .res 2   ; $01EB
000317r 2  xx xx        CF_CURRENT_DIR_SEC: .res 2
000319r 2  xx xx xx xx  CF_CURRENT_DIR: .res 12
00031Dr 2  xx xx xx xx  
000321r 2  xx xx xx xx  
000325r 2  xx xx xx xx  FAT_FILE_NAME_TMP: .res 12
000329r 2  xx xx xx xx  
00032Dr 2  xx xx xx xx  
000331r 2               
000331r 2               .segment "DATA"
000338r 2               
000338r 2               
000338r 2               cf_wait:
000338r 2                   ; phy
000338r 2                   ; ldy #7
000338r 2               @wait_loop:
000338r 2                   ; lda (CF_ADDRESS), y
000338r 2  AD D7 FF         lda CF_ADDRESS + 7
00033Br 2  29 80            and #$80
00033Dr 2  D0 F9            bne @wait_loop
00033Fr 2                   ; ply
00033Fr 2  60               rts
000340r 2               
000340r 2               
000340r 2               cf_init:
000340r 2                   ; phy
000340r 2  A9 04            lda #$4
000342r 2                   ; ldy #7
000342r 2                   ; sta (CF_ADDRESS),y
000342r 2  8D D7 FF         sta CF_ADDRESS + 7
000345r 2  20 rr rr         jsr cf_wait
000348r 2  A9 E0            lda #$E0
00034Ar 2                   ; ldy #6
00034Ar 2                   ; sta (CF_ADDRESS),y
00034Ar 2  8D D6 FF         sta CF_ADDRESS + 6
00034Dr 2  A9 01            lda #$1
00034Fr 2                   ; ldy #1
00034Fr 2                   ; sta (CF_ADDRESS),y
00034Fr 2  8D D1 FF         sta CF_ADDRESS + 1
000352r 2  A9 EF            lda #$EF
000354r 2                   ; ldy #7
000354r 2                   ; sta (CF_ADDRESS),y
000354r 2  8D D7 FF         sta CF_ADDRESS + 7
000357r 2  20 rr rr         jsr cf_wait
00035Ar 2  20 rr rr         jsr cf_err
00035Dr 2                   ; ply
00035Dr 2  60               rts
00035Er 2               
00035Er 2               
00035Er 2               ; cf_read:
00035Er 2               ;     phy
00035Er 2               ;     ldy #0
00035Er 2               ; @readloop:
00035Er 2               ;     ; phy
00035Er 2               ;     ; ldy #7
00035Er 2               ;     ; lda (CF_ADDRESS), y
00035Er 2               ;     lda CF_ADDRESS + 7
00035Er 2               ;     and #8
00035Er 2               ;     beq @exit
00035Er 2               ;     ; jsr cf_wait
00035Er 2               ;     ; ldy #0
00035Er 2               ;     ; lda (CF_ADDRESS), y
00035Er 2               ;     lda CF_ADDRESS
00035Er 2               ;     ; ply
00035Er 2               ;     sta (CF_BUF_PTR), y
00035Er 2               ;     ; jsr cf_wait
00035Er 2               ;     iny
00035Er 2               ;     bne @readloop
00035Er 2               ;     ; if y wraps around to zero, increment buffer page
00035Er 2               ;     inc CF_BUF_PTR+1
00035Er 2               ;     bra @readloop
00035Er 2               ; @exit:
00035Er 2               ;     ; we only come here because we read an & 8 from REG 7
00035Er 2               ;     ; ply
00035Er 2               ;     dec CF_BUF_PTR+1
00035Er 2               ;     ply
00035Er 2               ;     rts
00035Er 2               
00035Er 2               ; : cfread 0 buffptr ! begin cfwait cfreg7 c@ 8 and while cfreg0 c@ cfbuffer buffptr @ + c! buffptr @ 1 + buffptr ! repeat ;
00035Er 2               
00035Er 2               cf_read:
00035Er 2  78               sei
00035Fr 2  DA               phx
000360r 2  A2 00            ldx #0
000362r 2               @loop1:
000362r 2  EA               nop
000363r 2  EA               nop
000364r 2  EA               nop
000365r 2  EA               nop
000366r 2  EA               nop
000367r 2  EA               nop
000368r 2                   ; txa
000368r 2                   ; and #32
000368r 2                   ; bne @getbyte1
000368r 2               
000368r 2                   ; lda (CF_ADDRESS), y
000368r 2                   ; lda CF_ADDRESS + 7
000368r 2                   ; and #8
000368r 2                   ; beq @exit
000368r 2                   ; jsr cf_wait
000368r 2               @getbyte1:
000368r 2  AD D0 FF         lda CF_ADDRESS
00036Br 2  9D rr rr         sta FAT_BUFFER, x
00036Er 2  E8               inx
00036Fr 2  D0 F1            bne @loop1
000371r 2               @wait:
000371r 2  AD D7 FF         lda CF_ADDRESS + 7
000374r 2  29 80            and #$80
000376r 2  D0 F9            bne @wait
000378r 2               @loop2:
000378r 2  EA               nop
000379r 2  EA               nop
00037Ar 2  EA               nop
00037Br 2  EA               nop
00037Cr 2  EA               nop
00037Dr 2  EA               nop
00037Er 2                   ; txa
00037Er 2                   ; and #32
00037Er 2                   ; bne @getbyte2
00037Er 2                   ; lda CF_ADDRESS + 7
00037Er 2                   ; and #$80
00037Er 2                   ; bne @loop2
00037Er 2                   ; lda CF_ADDRESS + 7
00037Er 2                   ; and #$80
00037Er 2                   ; bne @loop2
00037Er 2                   ; lda CF_ADDRESS + 7
00037Er 2                   ; and #8
00037Er 2                   ; beq @exit
00037Er 2                   ; jsr cf_wait
00037Er 2               @getbyte2:
00037Er 2  AD D0 FF         lda CF_ADDRESS
000381r 2  9D rr rr         sta FAT_BUFFER+256, x
000384r 2  E8               inx
000385r 2  D0 F1            bne @loop2
000387r 2               @loop3:
000387r 2  AD D7 FF         lda CF_ADDRESS + 7
00038Ar 2  29 08            and #8
00038Cr 2  F0 06            beq @exit
00038Er 2  AD D0 FF         lda CF_ADDRESS
000391r 2  E8               inx
000392r 2  D0 F3            bne @loop3
000394r 2               @exit:
000394r 2  FA               plx
000395r 2  58               cli
000396r 2  60               rts
000397r 2               
000397r 2               cf_set_lba:
000397r 2                   ; phy
000397r 2  AD rr rr         lda CF_LBA
00039Ar 2                   ; ldy #3
00039Ar 2                   ; sta (CF_ADDRESS),y
00039Ar 2  8D D3 FF         sta CF_ADDRESS + 3
00039Dr 2  AD rr rr         lda CF_LBA + 1
0003A0r 2                   ; ldy #4
0003A0r 2                   ; sta (CF_ADDRESS), y
0003A0r 2  8D D4 FF         sta CF_ADDRESS + 4
0003A3r 2  AD rr rr         lda CF_LBA + 2
0003A6r 2                   ; ldy #5
0003A6r 2                   ; sta (CF_ADDRESS), y
0003A6r 2  8D D5 FF         sta CF_ADDRESS + 5
0003A9r 2  AD rr rr         lda CF_LBA + 3
0003ACr 2  29 0F            and #$0F
0003AEr 2  09 E0            ora #$E0
0003B0r 2                   ; ldy #6
0003B0r 2                   ; sta (CF_ADDRESS), y
0003B0r 2  8D D6 FF         sta CF_ADDRESS + 6
0003B3r 2                   ; ply
0003B3r 2  60               rts
0003B4r 2               
0003B4r 2               cf_read_sector:
0003B4r 2                   ; sei
0003B4r 2                   ; phy
0003B4r 2                   ; buffer should be set in CF_BUF_PTR
0003B4r 2  20 rr rr         jsr cf_set_lba
0003B7r 2  A9 01            lda #1
0003B9r 2                   ; ldy #2
0003B9r 2                   ; sta (CF_ADDRESS), y
0003B9r 2  8D D2 FF         sta CF_ADDRESS + 2
0003BCr 2  20 rr rr         jsr cf_wait
0003BFr 2  A9 20            lda #CF_READ_SECTOR_COMMAND
0003C1r 2                   ; ldy #7
0003C1r 2                   ; sta (CF_ADDRESS), y
0003C1r 2  8D D7 FF         sta CF_ADDRESS + 7
0003C4r 2  20 rr rr         jsr cf_wait
0003C7r 2  20 rr rr         jsr cf_read
0003CAr 2  20 rr rr         jsr cf_err
0003CDr 2                   ; ply
0003CDr 2                   ; cli
0003CDr 2  60               rts
0003CEr 2               
0003CEr 2               cf_err:
0003CEr 2                   ; phy
0003CEr 2  20 rr rr         jsr cf_wait
0003D1r 2                   ; ldy #7
0003D1r 2                   ; lda (CF_ADDRESS), y
0003D1r 2  AD D7 FF         lda CF_ADDRESS + 7
0003D4r 2  29 01            and #$01
0003D6r 2  F0 05            beq @exit
0003D8r 2               @exit_fail:
0003D8r 2  A9 21            lda #'!'
0003DAr 2  20 rr rr         jsr kernel_putc
0003DDr 2               @exit:
0003DDr 2                   ; ply
0003DDr 2  60               rts
0003DEr 2               
0003DEr 2               cf_info:
0003DEr 2               
0003DEr 2               
0003DEr 2               cf_end:
0003DEr 2               
0003DEr 2               
0003DEr 1               ; .include "drivers/lcd.s"
0003DEr 1               ; .include "drivers/spi.s"
0003DEr 1               ; .include "drivers/sd.s"
0003DEr 1               ; .include "drivers/vga.s"
0003DEr 1               ; .include "drivers/fat32.s"
0003DEr 1               .include "../../fat16.s"
0003DEr 2               ; .segment "BSS"
0003DEr 2               ; FAT_FILE_NAME_TMP: .res 12
0003DEr 2               
0003DEr 2               
0003DEr 2               .segment "CODE"
00002Dr 2               
00002Dr 2               ; fat_convert_filename:
00002Dr 2               ; 	; file name address to transform is in editor3
00002Dr 2               ; 	; file name length is in editor2
00002Dr 2               ; 	phy
00002Dr 2               ; 	phx
00002Dr 2               ; 	ldy #0                  ; Y will be used to index original string
00002Dr 2               ; 	ldx #0                  ; and X to index transformed string
00002Dr 2               ; @transform_name_loop:           ; transform file.txt filename format to FAT16 format
00002Dr 2               ; 	cpy editor2 				; if Y is bigger than the length of the file name
00002Dr 2               ; 	bcs @load20					; load $20 instead
00002Dr 2               ; 	lda (editor3), y			; otherwise, load next character
00002Dr 2               ; 	bra @compare				; and go to compare it
00002Dr 2               ; @load20:
00002Dr 2               ; 	lda #$20					; load $20 instead
00002Dr 2               ; @compare:
00002Dr 2               ; 	cmp #'.'					; if it's a dot
00002Dr 2               ; 	beq @is_dot					; handle the dot
00002Dr 2               ; 	sta FAT_FILE_NAME_TMP, x        ; no dot yet, copy character
00002Dr 2               ; 	iny
00002Dr 2               ; 	inx
00002Dr 2               ; 	cpx #11
00002Dr 2               ; 	bcc @transform_name_loop        ; Do next character
00002Dr 2               ; 	bra @end_trans                  ; We have reached the 11th character for the new string
00002Dr 2               
00002Dr 2               ; @is_dot:                                ; we have a dot in the original string
00002Dr 2               ; 	lda #$20                        ; fill the new string until 8 characters have been done
00002Dr 2               ; 	sta FAT_FILE_NAME_TMP, x
00002Dr 2               ; 	inx
00002Dr 2               ; 	cpx #8
00002Dr 2               ; 	bcc @is_dot                     ; if we have not reached 8 chars yet, keep adding spaces
00002Dr 2               ; 	bra @transform_name_loop        ; once we reached 8 characters, go back to do extension
00002Dr 2               
00002Dr 2               ; @end_trans:							; exit with transformed file name in FAT_FILE_NAME_TMP
00002Dr 2               ; 	plx
00002Dr 2               ; 	ply
00002Dr 2               ; 	rts
00002Dr 2               
00002Dr 2               
00002Dr 2               ; fat_find_file:
00002Dr 2               ; 	; file name to search is in editor3
00002Dr 2               
00002Dr 2               ; 	cp16 CF_CURRENT_DIR_SEC, CF_LBA
00002Dr 2               ; 	stz CF_LBA + 2
00002Dr 2               ; 	stz CF_LBA + 3
00002Dr 2               ; 	jsr cf_read_sector
00002Dr 2               
00002Dr 2               ; 	lda #<FAT_BUFFER
00002Dr 2               ; 	sta editor2
00002Dr 2               ; 	lda #>FAT_BUFFER
00002Dr 2               ; 	sta editor2 + 1
00002Dr 2               
00002Dr 2               
00002Dr 2               ; @outerloop:
00002Dr 2               ; 	ldy #0
00002Dr 2               ; 	lda (editor2), y                ; load first caracter of file name
00002Dr 2               ; 	beq @exit                       ; if zero, it means we reached the end of the list
00002Dr 2               ; 	cmp #$E5
00002Dr 2               ; 	beq @next_entry                 ; if $E5, it means the entry is deleted, so go to next entry
00002Dr 2               ; @loop:
00002Dr 2               ; 	lda (editor2), y                ; load current filename character
00002Dr 2               ; 	cmp FAT_FILE_NAME_TMP, y        ; compare it we the searched filename
00002Dr 2               ; 	bne @next_entry                 ; as soon as they are not the same, go to the next entry
00002Dr 2               ; 	iny                             ; increase pointer to character
00002Dr 2               ; 	cpy #11                         ; compare with the total filename length
00002Dr 2               ; 	bcc @loop                       ; if y is less than the filename string length, keep going
00002Dr 2               ; 	bra @exit_found                 ; otherwise, it means we compared all characters of the file name and they all match
00002Dr 2               ; @next_entry:
00002Dr 2               ; 	add16 editor2, fat_entry_size, editor2  ; add 32 to the current entry pointer
00002Dr 2               ; 	bra @outerloop                          ; process next entry
00002Dr 2               ; @exit_found:
00002Dr 2               ; 	sec
00002Dr 2               ; 	bra @exit_end
00002Dr 2               ; @exit:
00002Dr 2               ; 	clc
00002Dr 2               ; @exit_end:
00002Dr 2               ; 	plx
00002Dr 2               ; 	ply
00002Dr 2               ; 	rts
00002Dr 2               ; 	rts
00002Dr 2               
00002Dr 1               
00002Dr 1               .include "../../forth.s"
00002Dr 2               
00002Dr 2               
00002Dr 2               ; Definitions for Tali Forth 2
00002Dr 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00002Dr 2               ; First version: 01. Apr 2016 (Liara Forth)
00002Dr 2               ; This version: 29. Jan 2020
00002Dr 2               
00002Dr 2               ; This file is included by taliforth.asm. These are the general
00002Dr 2               ; definitions; platform-specific definitions such as the
00002Dr 2               ; memory map are kept in the platform folder.
00002Dr 2               
00002Dr 2               stack0 =    $0100   ; location of the stack
00002Dr 2               
00002Dr 2               ; User Variables:
00002Dr 2               ; Block variables
00002Dr 2               blk_offset =  0        ; BLK : UP + 0
00002Dr 2               scr_offset =  2        ; SCR : UP + 2
00002Dr 2               
00002Dr 2               
00002Dr 2               
00002Dr 2               ; Wordlists
00002Dr 2               current_offset =  4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
00002Dr 2               num_wordlists_offset =  5
00002Dr 2                                          ; #WORDLISTS (byte) : UP + 5
00002Dr 2               wordlists_offset =  6  ; WORDLISTS (cells) : UP + 6 to UP + 29
00002Dr 2                                          ;          (FORTH, EDITOR, ASSEMBLER, ROOT, +8 more)
00002Dr 2               num_order_offset =  30 ; #ORDER (byte) : UP + 30
00002Dr 2                                          ;          (Number of wordlists in search order)
00002Dr 2               search_order_offset =  31
00002Dr 2                                          ; SEARCH-ORDER (bytes) : UP + 31 to UP + 39
00002Dr 2                                          ; Allowing for 9 to keep offsets even.
00002Dr 2               max_wordlists =  12    ; Maximum number of wordlists supported
00002Dr 2                                          ; 4 Tali built-ins + 8 user wordlists
00002Dr 2               
00002Dr 2               ; Buffer variables
00002Dr 2               blkbuffer_offset =     40   ; Address of buffer
00002Dr 2               buffblocknum_offset =  42   ; Block number current in buffer
00002Dr 2               buffstatus_offset =    44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
00002Dr 2               
00002Dr 2               ; Block I/O vectors
00002Dr 2               blockread_offset =     46   ; Vector to block reading routine
00002Dr 2               blockwrite_offset =    48   ; Vector to block writing routine
00002Dr 2               
00002Dr 2               
00002Dr 2               ; ASCII CHARACTERS
00002Dr 2               AscCC =   $03  ; break (CTRL-c)
00002Dr 2               AscBELL = $07  ; bell sound
00002Dr 2               AscBS =   $08  ; backspace
00002Dr 2               AscLF =   $0a  ; line feed
00002Dr 2               AscCR =   $0d  ; carriage return
00002Dr 2               AscESC =  $1b  ; escape
00002Dr 2               AscSP =   $20  ; space
00002Dr 2               AscDEL =  $7f  ; delete (CTRL-h)
00002Dr 2               AscCP =   $10  ; CTRL-p (used to recall previous input history)
00002Dr 2               AscCN =   $0e  ; CTRL-n (used to recall next input history)
00002Dr 2               
00002Dr 2               ; DICTIONARY FLAGS
00002Dr 2               ; The first three bits are currently unused
00002Dr 2               CO = 1  ; Compile Only
00002Dr 2               AN = 2  ; Always Native Compile
00002Dr 2               IM = 4  ; Immediate Word
00002Dr 2               NN = 8  ; Never Native Compile
00002Dr 2               UF = 16 ; Includes Underflow Check (RESERVED)
00002Dr 2               HC = 32 ; Word has Code Field Area (CFA)
00002Dr 2               
00002Dr 2               
00002Dr 2               ; VARIOUS
00002Dr 2               MAX_LINE_LENGTH =   79      ; assumes 80 character lines
00002Dr 2               
00002Dr 2               ; END
00002Dr 2               
00002Dr 2               .segment "ZEROPAGE": zeropage
00000Er 2               ; ZERO PAGE ADDRESSES/VARIABLES
00000Er 2               
00000Er 2               ; These are kept at the top of Zero Page, with the most important variables at
00000Er 2               ; the top because the Data Stack grows towards this area from dsp0: If there is
00000Er 2               ; an overflow, the lower, less important variables will be clobbered first,
00000Er 2               ; giving the system a chance to recover. In other words, they are part of the
00000Er 2               ; floodplain.
00000Er 2               
00000Er 2               ; The four variables insrc, cib, ciblen, and toin must stay together in this
00000Er 2               ; sequence for the words INPUT>R and R>INPUT to work correctly.
00000Er 2               
00000Er 2  xx xx        cp: .res 2   ; Compiler Pointer
000010r 2  xx xx        dp: .res 2   ; Dictionary Pointer
000012r 2  xx xx        workword: .res 2   ; nt (not xt!) of word being compiled, except in
000014r 2                                          ; a :NONAME declared word (see status)
000014r 2  xx xx        insrc: .res 2   ; input Source for SOURCE-ID
000016r 2  xx xx        cib: .res 2   ; address of current input buffer
000018r 2  xx xx        ciblen: .res 2  ; length of current input buffer
00001Ar 2  xx xx        toin: .res 2  ; pointer to CIB (>IN in Forth)
00001Cr 2  xx xx        ip: .res 2  ; Instruction Pointer (current xt)
00001Er 2  xx xx        output: .res 2  ; vector for EMIT
000020r 2  xx xx        input: .res 2  ; vector for KEY
000022r 2  xx xx        havekey: .res 2  ; vector for KEY?
000024r 2  xx xx        state: .res 2  ; STATE: -1 compile, 0 interpret
000026r 2  xx xx        base: .res 2  ; number radix, default decimal
000028r 2  xx xx        nc_limit: .res 2  ; limit for Native Compile size
00002Ar 2  xx xx        uf_strip: .res 2  ; flag to strip underflow detection code
00002Cr 2  xx xx        up: .res 2  ; User Pointer (Address of user variables)
00002Er 2  xx xx        status: .res 2  ; internal status information
000030r 2                                          ; (used by : :NONAME ; ACCEPT)
000030r 2                                          ; Bit 7 = Redefined word message postpone
000030r 2                                          ;         When set before calling CREATE, it will
000030r 2                                          ;         not print the "redefined xxxx" message if
000030r 2                                          ;         the word exists. Instead, this bit will
000030r 2                                          ;         be reused and after CREATE has run, it will
000030r 2                                          ;         be set if the word was redefined and 0 if
000030r 2                                          ;         not. This bit should be 0 when not in use.
000030r 2                                          ; Bit 6 = 1 for normal ":" definitions
000030r 2                                          ;         WORKWORD contains nt of word being compiled
000030r 2                                          ;       = 0 for :NONAME definitions
000030r 2                                          ;         WORKWORD contains xt of word being compiled
000030r 2                                          ; Bit 5 = 1 for NUMBER returning a double word
000030r 2                                          ;       = 0 for NUMBER returning a single word
000030r 2                                          ; Bit 3 = 1 makes CTRL-n recall current history
000030r 2                                          ;       = 0 CTRL-n recalls previous history
000030r 2                                          ; Bit 2 = Current history buffer msb
000030r 2                                          ; Bit 1 = Current history buffer (0-7, wraps)
000030r 2                                          ; Bit 0 = Current history buffer lsb
000030r 2                                          ; status+1 is used by ACCEPT to hold history lengths.
000030r 2  xx xx        tmpbranch: .res 2  ; temporary storage for 0BRANCH, BRANCH only
000032r 2  xx xx        tmp1: .res 2  ; temporary storage
000034r 2  xx xx        tmp2: .res 2  ; temporary storage
000036r 2  xx xx        tmp3: .res 2  ; temporary storage (especially for print)
000038r 2  xx xx        tmpdsp: .res 2  ; temporary DSP (X) storage (two bytes)
00003Ar 2  xx xx        tmptos: .res 2  ; temporary TOS storage
00003Cr 2  xx xx        editor1: .res 2  ; temporary for editors
00003Er 2  xx xx        editor2: .res 2  ; temporary for editors
000040r 2  xx xx        editor3: .res 2  ; temporary for editors
000042r 2  xx xx        tohold: .res 2  ; pointer for formatted output
000044r 2  xx xx xx xx  scratch: .res 8  ; 8 byte scratchpad (see UM/MOD)
000048r 2  xx xx xx xx  
00004Cr 2               
00004Cr 2               .segment "DATASTACK": zeropage
000000r 2  xx xx xx xx  dsp_start: .res 127 ; reserve 128 bytes for data stack (64 16 bit cells)
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
00007Fr 2               dsp0:          ; first data stack location. Data stack grows down
00007Fr 2               rsp0:     ; starting stack pointer
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               .segment "BSS"
000331r 2  xx xx xx xx  hist_buff: .res $400
000335r 2  xx xx xx xx  
000339r 2  xx xx xx xx  
000731r 2  xx xx xx xx  buffer0: .res $100
000735r 2  xx xx xx xx  
000739r 2  xx xx xx xx  
000831r 2               
000831r 2               .segment "DICTIONARY"   ; the dictionary gets its own segment so that it uses all the space left in RAM
000000r 2  xx xx xx xx  dictionary: .res $1000
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
001000r 2               
001000r 2               cp_end = $7FFF          ; the dictionary ends at RAM end (everything else is before)
001000r 2               
001000r 2               cp0 = dictionary
001000r 2               bsize =     $ff
001000r 2               padoffset = $ff
001000r 2               
001000r 2               
001000r 2               
001000r 2               .segment "DATA"
0003DEr 2               
0003DEr 2               
0003DEr 2               
0003DEr 2               forth:
0003DEr 2                   .include "native_words.s"     ; Native Forth words. Starts with COLD
0003DEr 3               ; Low-level Forth word routines
0003DEr 3               ; Tali Forth 2 for the 65c02
0003DEr 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0003DEr 3               ; First version: 19. Jan 2014
0003DEr 3               ; This version: 03. Jan 2018
0003DEr 3               
0003DEr 3               ; This list is ordered alphabetically by the names of the words, not their
0003DEr 3               ; strings (so "!" is sorted as "STORE"). However, we start off with COLD,
0003DEr 3               ; ABORT, and QUIT as the natural start sequence. Each word has two special
0003DEr 3               ; status lines that begins with "; ## ", which allows auto-generation of the
0003DEr 3               ; WORDLIST.md file and other entries in the docs folder. Status entries are:
0003DEr 3               
0003DEr 3               ;       TBA --> fragment --> coded --> tested --> auto
0003DEr 3               
0003DEr 3               ; "Auto" means that the word is automatically tested by the test suite (good),
0003DEr 3               ; "tested" means that it was tested by hand in some way (okay), "coded" means
0003DEr 3               ; it hasn't been tested at all (bad). See the test suite for more details.
0003DEr 3               
0003DEr 3               ; ## COLD ( -- ) "Reset the Forth system"
0003DEr 3               ; ## "cold"  tested  Tali Forth
0003DEr 3               ;       """Reset the Forth system. Does not restart the kernel,
0003DEr 3               ;       use the 65c02 reset for that. Flows into ABORT.
0003DEr 3               ;       """
0003DEr 3               xt_cold:
0003DEr 3  D8                           cld
0003DFr 3               
0003DFr 3                               ; Set the OUTPUT vector to the default kernel_putc
0003DFr 3                               ; We do this really early so we can print error messages
0003DFr 3                               ; during debugging
0003DFr 3  A9 rr                        lda #<kernel_putc
0003E1r 3  85 rr                        sta output
0003E3r 3  A9 rr                        lda #>kernel_putc
0003E5r 3  85 rr                        sta output+1
0003E7r 3               
0003E7r 3                               ; Load all of the important zero page variables from ROM
0003E7r 3  A2 21                        ldx #cold_zp_table_end-cold_zp_table-1
0003E9r 3               
0003E9r 3               @load_zp_loop:
0003E9r 3                               ; This loop loads them back to front. We can use X here
0003E9r 3                               ; because Tali hasn't started using the stack yet.
0003E9r 3  BD rr rr                     lda cold_zp_table,x
0003ECr 3  95 rr                        sta cp,x
0003EEr 3  CA                           dex
0003EFr 3  D0 F8                        bne @load_zp_loop
0003F1r 3               
0003F1r 3                               ; Copy the 0th element.
0003F1r 3  AD rr rr                     lda cold_zp_table
0003F4r 3  85 rr                        sta cp
0003F6r 3                               ; Initialize 65c02 stack (Return Stack)
0003F6r 3  A2 rr                        ldx #rsp0
0003F8r 3  9A                           txs
0003F9r 3               
0003F9r 3                               ; Clear Data Stack. This is repeated in ABORT, but this way we
0003F9r 3                               ; can load high-level words with EVALUATE
0003F9r 3  A2 rr                        ldx #dsp0
0003FBr 3               
0003FBr 3               
0003FBr 3                               ; Initialize the user variables.
0003FBr 3  A0 31                        ldy #cold_user_table_end-cold_user_table-1
0003FDr 3  A9 00                        lda #0
0003FFr 3               
0003FFr 3               @load_user_vars_loop:
0003FFr 3                               ; Like the zero page variables, these are initialized
0003FFr 3                               ; back to front.
0003FFr 3  B9 rr rr                     lda cold_user_table,y
000402r 3  91 rr                        sta (up),y
000404r 3  88                           dey
000405r 3  D0 F8                        bne @load_user_vars_loop
000407r 3               
000407r 3                               ; Copy the 0th element.
000407r 3  AD rr rr                     lda cold_user_table
00040Ar 3  92 rr                        sta (up)
00040Cr 3  20 rr rr                     jsr xt_cr
00040Fr 3               
00040Fr 3                               ; Define high-level words in forth_words.asm via EVALUATE. If
00040Fr 3                               ; you do not have any high-level words, this part can be
00040Fr 3                               ; commented out.
00040Fr 3  CA                           dex
000410r 3  CA                           dex
000411r 3  CA                           dex
000412r 3  CA                           dex
000413r 3               
000413r 3               
000413r 3                               ; start address goes NOS
000413r 3  A9 rr                        lda #<forth_words_start
000415r 3  95 02                        sta 2,x
000417r 3  A9 rr                        lda #>forth_words_start
000419r 3  95 03                        sta 3,x
00041Br 3               
00041Br 3                               ; length goes TOS
00041Br 3  A9 rr                        lda #<forth_words_end
00041Dr 3  38                           sec
00041Er 3  E9 rr                        sbc #<forth_words_start
000420r 3  95 00                        sta 0,x
000422r 3               
000422r 3  A9 rr                        lda #>forth_words_end
000424r 3  E9 rr                        sbc #>forth_words_start
000426r 3  95 01                        sta 1,x
000428r 3               
000428r 3               
000428r 3  20 rr rr                     jsr xt_evaluate
00042Br 3               
00042Br 3                               ; Now define any user words via EVALUATE. If you do not have
00042Br 3                               ; any user-defined words, this part can be commented out as
00042Br 3                               ; well.
00042Br 3  CA                           dex
00042Cr 3  CA                           dex
00042Dr 3  CA                           dex
00042Er 3  CA                           dex
00042Fr 3               
00042Fr 3               
00042Fr 3                               ; start address goes NOS
00042Fr 3  A9 rr                        lda #<user_words_start
000431r 3  95 02                        sta 2,x
000433r 3  A9 rr                        lda #>user_words_start
000435r 3  95 03                        sta 3,x
000437r 3               
000437r 3                               ; length goes TOS
000437r 3  A9 rr                        lda #<user_words_end
000439r 3  38                           sec
00043Ar 3  E9 rr                        sbc #<user_words_start
00043Cr 3  95 00                        sta 0,x
00043Er 3               
00043Er 3  A9 rr                        lda #>user_words_end
000440r 3  E9 rr                        sbc #>user_words_start
000442r 3  95 01                        sta 1,x
000444r 3               
000444r 3  20 rr rr                     jsr xt_evaluate
000447r 3               
000447r 3                               ; Initialize all of the history buffers by putting a zero in
000447r 3                               ; each length byte.
000447r 3  9C rr rr                     stz hist_buff
00044Ar 3  9C rr rr                     stz hist_buff+$80
00044Dr 3  9C rr rr                     stz hist_buff+$100
000450r 3  9C rr rr                     stz hist_buff+$180
000453r 3  9C rr rr                     stz hist_buff+$200
000456r 3  9C rr rr                     stz hist_buff+$280
000459r 3  9C rr rr                     stz hist_buff+$300
00045Cr 3  9C rr rr                     stz hist_buff+$380
00045Fr 3               
00045Fr 3               
00045Fr 3                               ; fall through to ABORT
00045Fr 3               
00045Fr 3               
00045Fr 3               ; ## ABORT ( -- ) "Reset the Data Stack and restart the CLI"
00045Fr 3               ; ## "abort"  tested  ANS core
00045Fr 3                       ; """https://forth-standard.org/standard/core/ABORT
00045Fr 3                       ; Clear Data Stack and continue into QUIT. We can jump here via
00045Fr 3                       ; subroutine if we want to because we are going to reset the 65c02's
00045Fr 3                       ; stack pointer (the Return Stack) anyway during QUIT. Note we don't
00045Fr 3                       ; actually delete the stuff on the Data Stack.
00045Fr 3                       ; """
00045Fr 3               xt_abort:
00045Fr 3  A2 rr                        ldx #dsp0
000461r 3               
000461r 3                               ; fall through to QUIT
000461r 3               
000461r 3               
000461r 3               ; ## QUIT ( -- ) "Reset the input and get new input"
000461r 3               ; ## "quit"  tested  ANS core
000461r 3                       ; """https://forth-standard.org/standard/core/QUIT
000461r 3                       ; Rest the input and start command loop
000461r 3                       ; """
000461r 3               
000461r 3               xt_quit:
000461r 3                               ; Clear the Return Stack. This is a little screwed up
000461r 3                               ; because the 65c02 can only set the Return Stack via X,
000461r 3                               ; which is our Data Stack pointer. The ANS specification
000461r 3                               ; demands, however, that ABORT reset the Data Stack pointer
000461r 3  8A                           txa             ; Save the DSP that we just defined
000462r 3  A2 rr                        ldx #rsp0
000464r 3  9A                           txs
000465r 3  AA                           tax             ; Restore the DSP. Dude, seriously.
000466r 3               
000466r 3                               ; make sure instruction pointer is empty
000466r 3  64 rr                        stz ip
000468r 3  64 rr                        stz ip+1
00046Ar 3               
00046Ar 3                               ; SOURCE-ID is zero (keyboard input)
00046Ar 3  64 rr                        stz insrc
00046Cr 3  64 rr                        stz insrc+1
00046Er 3               
00046Er 3                               ; STATE is zero (interpret, not compile)
00046Er 3  64 rr                        stz state
000470r 3  64 rr                        stz state+1
000472r 3               @get_line:
000472r 3  A9 rr                        lda #<buffer0   ; input buffer, this is paranoid
000474r 3  85 rr                        sta cib
000476r 3  A9 rr                        lda #>buffer0
000478r 3  85 rr                        sta cib+1
00047Ar 3               
00047Ar 3                               ; Size of current input buffer (CIB) is zero
00047Ar 3  64 rr                        stz ciblen
00047Cr 3  64 rr                        stz ciblen+1
00047Er 3               
00047Er 3                               ; Accept a line from the current import source. This is how
00047Er 3                               ; modern Forths to it.
00047Er 3  20 rr rr                     jsr xt_refill           ; ( -- f )
000481r 3               
000481r 3                               ; Test flag: LSB of TOS
000481r 3  B5 00                        lda 0,x
000483r 3  D0 05                        bne @success
000485r 3               
000485r 3                               ; If REFILL returned a FALSE flag, something went wrong and we
000485r 3                               ; need to print an error message and reset the machine. We
000485r 3                               ; don't need to save TOS because we're going to clobber it
000485r 3                               ; anyway when we go back to ABORT.
000485r 3  A9 06                        lda #err_refill
000487r 3  4C rr rr                     jmp error
00048Ar 3               
00048Ar 3               @success:
00048Ar 3                               ; Assume we have successfully accepted a string of input from
00048Ar 3                               ; a source, with address cib and length of input in ciblen. We
00048Ar 3                               ; arrive here still with the TRUE flag from REFILL as TOS
00048Ar 3  E8                           inx                     ; drop
00048Br 3  E8                           inx
00048Cr 3               
00048Cr 3                               ; Main compile/execute routine
00048Cr 3  20 rr rr                     jsr interpret
00048Fr 3               
00048Fr 3                               ; Test for Data Stack underflow. Tali Forth does not check for
00048Fr 3                               ; overflow because it is so rare
00048Fr 3  E0 rr                        cpx #dsp0
000491r 3  F0 05                        beq @stack_ok
000493r 3  90 03                        bcc @stack_ok           ; DSP must always be smaller than DSP0
000495r 3               
000495r 3  4C rr rr                     jmp underflow_error
000498r 3               
000498r 3               @stack_ok:
000498r 3                               ; Display system prompt if all went well. If we're interpreting,
000498r 3                               ; this is " ok", if we're compiling, it's " compiled". Note
000498r 3                               ; space at beginning of the string.
000498r 3  A5 rr                        lda state
00049Ar 3  F0 02                        beq @print
00049Cr 3               
00049Cr 3  A9 01                        lda #1                  ; number for "compile" string
00049Er 3               @print:
00049Er 3  20 rr rr                     jsr print_string
0004A1r 3               
0004A1r 3                               ; Awesome line, everybody! Now get the next one.
0004A1r 3  80 CF                        bra @get_line
0004A3r 3               
0004A3r 3               z_cold:
0004A3r 3               z_abort:
0004A3r 3               z_quit:         ; no RTS required
0004A3r 3               
0004A3r 3               
0004A3r 3               
0004A3r 3               ; This table holds all of the initial values for the variables in zero page.
0004A3r 3               ; This table is used by COLD.
0004A3r 3               cold_zp_table:
0004A3r 3  rr rr                .word cp0+256+1024      ; cp moved to make room for user vars and
0004A5r 3                                               ; block buffer
0004A5r 3  rr rr                .word dictionary_start  ; dp
0004A7r 3  00 00                .word 0                 ; workword
0004A9r 3  00 00                .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
0004ABr 3  rr rr                .word buffer0           ; cib
0004ADr 3  00 00                .word 0                 ; ciblen
0004AFr 3  00 00                .word 0                 ; toin
0004B1r 3  00 00                .word 0                 ; ip
0004B3r 3  rr rr                .word kernel_putc       ; output
0004B5r 3  rr rr                .word kernel_getc       ; input
0004B7r 3  00 00                .word 0                 ; havekey
0004B9r 3  00 00                .word 0                 ; state (0 = interpret)
0004BBr 3  0A 00                .word 10                ; base
0004BDr 3  14 00                .word 20                ; nc-limit
0004BFr 3  00 00                .word 0                 ; uf_strip (off by default)
0004C1r 3  rr rr                .word cp0               ; up (user vars put right at beginning of
0004C3r 3                                               ; available RAM)
0004C3r 3  00 00                .word 0                 ; status
0004C5r 3               cold_zp_table_end:
0004C5r 3               
0004C5r 3               ; No further ZP variables are initialized. The variables past this point are
0004C5r 3               ; all temporaries.
0004C5r 3               
0004C5r 3               ; This table holds the inital values for the user variables. This table is
0004C5r 3               ; used by COLD.
0004C5r 3               cold_user_table:
0004C5r 3  00 00                .word 0                         ; BLK
0004C7r 3  00 00                .word 0                         ; SCR
0004C9r 3  00                   .byte 0                         ; CURRENT = FORTH-WORDLIST
0004CAr 3  04                   .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
0004CBr 3  rr rr                .word dictionary_start          ; FORTH-WORDLIST
0004CDr 3  rr rr                .word editor_dictionary_start   ; EDITOR-WORDLIST
0004CFr 3  rr rr                .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
0004D1r 3  rr rr                .word root_dictionary_start     ; ROOT-WORDLIST
0004D3r 3  00 00 00 00          .word 0,0,0,0,0,0,0,0           ; User wordlists
0004D7r 3  00 00 00 00  
0004DBr 3  00 00 00 00  
0004E3r 3  01                   .byte 1                         ; #ORDER
0004E4r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0         ; search-order
0004E8r 3  00 00 00 00  
0004ECr 3  00           
0004EDr 3  rr rr                .word cp0+256                   ; Address of buffer (right after USER vars)
0004EFr 3  00 00                .word 0                         ; block in buffer
0004F1r 3  00 00                .word 0                         ; buffer status (not in use)
0004F3r 3  rr rr                .word xt_block_word_error       ; block-read vector
0004F5r 3  rr rr                .word xt_block_word_error       ; block-write vector
0004F7r 3               cold_user_table_end:
0004F7r 3               
0004F7r 3               
0004F7r 3               ; ## ABORT_QUOTE ( "string" -- ) "If flag TOS is true, ABORT with message"
0004F7r 3               ; ## "abort""  tested  ANS core
0004F7r 3                       ; """https://forth-standard.org/standard/core/ABORTq
0004F7r 3                       ; Abort and print a string.
0004F7r 3                       ; """
0004F7r 3               
0004F7r 3               xt_abort_quote:
0004F7r 3                               ; save the string
0004F7r 3  20 rr rr                     jsr xt_s_quote          ; S"
0004FAr 3               
0004FAr 3                               ; compile run-time part
0004FAr 3  A0 rr                        ldy #>abort_quote_runtime
0004FCr 3  A9 rr                        lda #<abort_quote_runtime
0004FEr 3  20 rr rr                     jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
000501r 3               
000501r 3  60           z_abort_quote:  rts
000502r 3               
000502r 3               
000502r 3               abort_quote_runtime:
000502r 3                       ; """Runtime aspect of ABORT_QUOTE"""
000502r 3               
000502r 3                               ; We arrive here with ( f addr u )
000502r 3  B5 04                        lda 4,x
000504r 3  15 05                        ora 5,x
000506r 3  F0 09                        beq @done       ; if FALSE, we're done
000508r 3               
000508r 3                               ; We're true, so print string and ABORT. We follow Gforth
000508r 3                               ; in going to a new line after the string
000508r 3  20 rr rr                     jsr xt_type
00050Br 3  20 rr rr                     jsr xt_cr
00050Er 3  4C rr rr                     jmp xt_abort    ; not JSR, so never come back
000511r 3               @done:
000511r 3                               ; Drop three entries from the Data Stack
000511r 3  8A                           txa
000512r 3  18                           clc
000513r 3  69 06                        adc #6
000515r 3  AA                           tax
000516r 3               
000516r 3  60                           rts
000517r 3               
000517r 3               
000517r 3               
000517r 3               ; ## ABS ( n -- u ) "Return absolute value of a number"
000517r 3               ; ## "abs"  auto  ANS core
000517r 3                       ; """https://forth-standard.org/standard/core/ABS
000517r 3                       ; Return the absolute value of a number.
000517r 3                       ; """
000517r 3               
000517r 3               xt_abs:
000517r 3  20 rr rr                     jsr underflow_1
00051Ar 3               
00051Ar 3  B5 01                        lda 1,x
00051Cr 3  10 0D                        bpl @done       ; positive number, easy money!
00051Er 3               
00051Er 3                               ; negative: calculate 0 - n
00051Er 3  38                           sec
00051Fr 3  A9 00                        lda #0
000521r 3  F5 00                        sbc 0,x         ; LSB
000523r 3  95 00                        sta 0,x
000525r 3               
000525r 3  A9 00                        lda #0          ; MSB
000527r 3  F5 01                        sbc 1,x
000529r 3  95 01                        sta 1,x
00052Br 3               
00052Br 3               @done:
00052Br 3  60           z_abs:          rts
00052Cr 3               
00052Cr 3               
00052Cr 3               
00052Cr 3               ; ## ACCEPT ( addr n -- n ) "Receive a string of characters from the keyboard"
00052Cr 3               ; ## "accept"  auto  ANS core
00052Cr 3                       ; """https://forth-standard.org/standard/core/ACCEPT
00052Cr 3                       ; Receive a string of at most n1 characters, placing them at
00052Cr 3                       ; addr. Return the actual number of characters as n2. Characters
00052Cr 3                       ; are echoed as they are received. ACCEPT is called by REFILL in
00052Cr 3                       ; modern Forths.
00052Cr 3                       ; """
00052Cr 3               
00052Cr 3               xt_accept:
00052Cr 3  20 rr rr                     jsr underflow_2
00052Fr 3               
00052Fr 3                               ; Abort if we were asked to receive 0 chars
00052Fr 3  B5 00                        lda 0,x
000531r 3  15 01                        ora 1,x
000533r 3  D0 09                        bne @not_zero
000535r 3               
000535r 3  E8                           inx
000536r 3  E8                           inx
000537r 3  74 00                        stz 0,x
000539r 3  74 01                        stz 1,x
00053Br 3               
00053Br 3  4C rr rr                     jmp accept_done
00053Er 3               
00053Er 3               @not_zero:
00053Er 3  B5 00                        lda 0,x         ; number of chars to get in tmp2 ...
000540r 3  85 rr                        sta tmp2
000542r 3  64 rr                        stz tmp2+1      ; ... but we only accept max 255 chars
000544r 3               
000544r 3  B5 02                        lda 2,x         ; address of buffer is NOS, to tmp1
000546r 3  85 rr                        sta tmp1
000548r 3  B5 03                        lda 3,x
00054Ar 3  85 rr                        sta tmp1+1
00054Cr 3               
00054Cr 3  E8                           inx
00054Dr 3  E8                           inx
00054Er 3               
00054Er 3  A0 00                        ldy #0
000550r 3               
000550r 3                               ; Select the next history buffer. Clear bit 3 first (so overflow
000550r 3                               ; from bit 2 to 3 is OK)
000550r 3  A5 rr                        lda status
000552r 3  29 F7                        and #$f7
000554r 3               
000554r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
000554r 3  1A                           inc
000555r 3               
000555r 3                               ; Set bit 3 for detecting if CTRL-n has been pressed the first
000555r 3                               ; time. This bit will be cleared on the first CTRL-n or CTRL-p
000555r 3                               ; received and won't be used to calculate the history buffer
000555r 3                               ; offset.
000555r 3  09 08                        ora #$08
000557r 3  85 rr                        sta status
000559r 3               
000559r 3               accept_loop:
000559r 3                               ; Out of the box, py65mon catches some CTRL sequences such as
000559r 3                               ; CTRL-c. We also don't need to check for CTRL-l because a
000559r 3                               ; vt100 terminal clears the screen automatically.
000559r 3               
000559r 3                               ; This is the internal version of KEY without all the mucking
000559r 3                               ; about with the Data Stack while still using the input vector
000559r 3  20 rr rr                     jsr key_a
00055Cr 3               
00055Cr 3                               ; We quit on both line feed and carriage return
00055Cr 3  C9 0A                        cmp #AscLF
00055Er 3  F0 20                        beq @eol
000560r 3  C9 0D                        cmp #AscCR
000562r 3  F0 1C                        beq @eol
000564r 3               
000564r 3                               ; BACKSPACE and DEL do the same thing for the moment
000564r 3  C9 08                        cmp #AscBS
000566r 3  F0 22                        beq @backspace
000568r 3  C9 7F                        cmp #AscDEL     ; (CTRL-h)
00056Ar 3  F0 1E                        beq @backspace
00056Cr 3               
00056Cr 3                               ; Check for CTRL-p and CTRL-n to recall input history
00056Cr 3  C9 10                        cmp #AscCP
00056Er 3  F0 36                        beq @ctrl_p
000570r 3  C9 0E                        cmp #AscCN
000572r 3  F0 44                        beq @ctrl_n
000574r 3               
000574r 3                               ; That's enough for now. Save and echo character.
000574r 3  91 rr                        sta (tmp1),y
000576r 3  C8                           iny
000577r 3               
000577r 3                               ; EMIT_A sidesteps all the fooling around with the Data Stack
000577r 3  20 rr rr                     jsr emit_a
00057Ar 3               
00057Ar 3  C4 rr                        cpy tmp2        ; reached character limit?
00057Cr 3  D0 DB                        bne accept_loop       ; fall through if buffer limit reached
00057Er 3  80 03                        bra @buffer_full
000580r 3               
000580r 3               @eol:
000580r 3  20 rr rr                     jsr xt_space    ; print final space
000583r 3               
000583r 3               @buffer_full:
000583r 3                               ; REFILL updates ciblen and toin, we don't need to do it here
000583r 3  94 00                        sty 0,x         ; Y contains number of chars accepted already
000585r 3  74 01                        stz 1,x         ; we only accept 256 chars
000587r 3               
000587r 3  4C rr rr                     jmp accept_done
00058Ar 3               
00058Ar 3               @backspace:
00058Ar 3                               ; Handle backspace and delete kex, which currently do the same
00058Ar 3                               ; thing
00058Ar 3  C0 00                        cpy #0          ; buffer empty?
00058Cr 3  D0 06                        bne @1
00058Er 3               
00058Er 3  A9 07                        lda #AscBELL    ; complain and don't delete beyond the start of line
000590r 3  20 rr rr                     jsr emit_a
000593r 3  C8                           iny
000594r 3               @1:
000594r 3  88                           dey
000595r 3  A9 08                        lda #AscBS      ; move back one
000597r 3  20 rr rr                     jsr emit_a
00059Ar 3  A9 20                        lda #AscSP      ; print a space (rubout)
00059Cr 3  20 rr rr                     jsr emit_a
00059Fr 3  A9 08                        lda #AscBS      ; move back over space
0005A1r 3  20 rr rr                     jsr emit_a
0005A4r 3               
0005A4r 3  80 B3                        bra accept_loop
0005A6r 3               
0005A6r 3               @ctrl_p:
0005A6r 3                               ; CTRL-p was pressed. Recall the previous input buffer.
0005A6r 3               
0005A6r 3                               ; Select the previous buffer
0005A6r 3  A5 rr                        lda status
0005A8r 3               
0005A8r 3                               ; Check for 0 (need to wrap back to 7)
0005A8r 3  29 07                        and #7
0005AAr 3  D0 08                        bne @ctrl_p_dec
0005ACr 3               
0005ACr 3                               ; We need to wrap back to 7.
0005ACr 3  A5 rr                        lda status
0005AEr 3  09 07                        ora #7
0005B0r 3  85 rr                        sta status
0005B2r 3  80 11                        bra @recall_history
0005B4r 3               
0005B4r 3               @ctrl_p_dec:
0005B4r 3                               ; It's safe to decrement the buffer index directly.
0005B4r 3  C6 rr                        dec status
0005B6r 3  80 0D                        bra @recall_history
0005B8r 3               
0005B8r 3               @ctrl_n:
0005B8r 3                               ; CTRL-n was pressed. Recall the next input buffer. Select
0005B8r 3                               ; the next buffer Check bit 3. If it's set, this is the first
0005B8r 3                               ; time CTRL-n has been pressed and we should select the CURRENT
0005B8r 3                               ; history buffer.
0005B8r 3  A9 08                        lda #$8
0005BAr 3  24 rr                        bit status
0005BCr 3  D0 07                        bne @recall_history
0005BEr 3               
0005BEr 3                               ; This isn't the first time CTRL-n has been pressed, select the
0005BEr 3                               ; next history buffer. Clear bit 3 first (so overflow is OK)
0005BEr 3  A5 rr                        lda status
0005C0r 3  29 F7                        and #$f7
0005C2r 3               
0005C2r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
0005C2r 3  1A                           inc
0005C3r 3               
0005C3r 3                               ; Bit 3 (if it got set by going from buffer 7 to 0) will
0005C3r 3                               ; be cleared below.
0005C3r 3  85 rr                        sta status
0005C5r 3               
0005C5r 3                               ; Falls through to @recall_history
0005C5r 3               
0005C5r 3               @recall_history:
0005C5r 3                               ; Clear bit 3 (first time ctrl-n recall) bit in status
0005C5r 3  A9 08                        lda #%00001000
0005C7r 3  14 rr                        trb status
0005C9r 3               
0005C9r 3  20 rr rr                     jsr total_recall
0005CCr 3               
0005CCr 3                               ; tmp3 now has the address of the previous history buffer.
0005CCr 3                               ; First byte of buffer is length. Clear the line by sending
0005CCr 3                               ; CR, Y spaces, then CR.
0005CCr 3  A9 0D                        lda #AscCR
0005CEr 3  20 rr rr                     jsr emit_a
0005D1r 3               
0005D1r 3               input_clear:
0005D1r 3  C0 00                        cpy #0
0005D3r 3  F0 08                        beq input_cleared
0005D5r 3               
0005D5r 3  A9 20                        lda #AscSP
0005D7r 3  20 rr rr                     jsr emit_a
0005DAr 3  88                           dey
0005DBr 3  80 F4                        bra input_clear
0005DDr 3               
0005DDr 3               input_cleared:
0005DDr 3  A9 0D                        lda #AscCR
0005DFr 3  20 rr rr                     jsr emit_a
0005E2r 3               
0005E2r 3                               ; Save the history length byte into histinfo+1
0005E2r 3                               ; ldy #0        ; Y is already 0 by clearing the line.
0005E2r 3  B1 rr                        lda (tmp3),y
0005E4r 3  85 rr                        sta status+1
0005E6r 3               
0005E6r 3                               ; Increment the tmp3 pointer so we can use ,y addressing
0005E6r 3                               ; on both tmp1 (the input buffer) and tmp3 (the history
0005E6r 3                               ; buffer)
0005E6r 3  E6 rr                        inc tmp3
0005E8r 3  D0 02                        bne @2           ; Increment the upper byte on carry.
0005EAr 3  E6 rr                        inc tmp3+1
0005ECr 3               @2:
0005ECr 3                               ; Copy the history buffer into the input buffer,
0005ECr 3                               ; sending the characters to the output as we go.
0005ECr 3  A9 0D                        lda #AscCR
0005EEr 3  20 rr rr                     jsr emit_a
0005F1r 3               
0005F1r 3               @history_loop:
0005F1r 3                               ; See if we have reached the end of the history buffer.
0005F1r 3  C4 rr                        cpy status+1
0005F3r 3  D0 03                        bne @3
0005F5r 3  4C rr rr                     jmp accept_loop       ; Needs a long jump
0005F8r 3               @3:
0005F8r 3                               ; See if we have reached the end of the input buffer.
0005F8r 3                               ; (only comparing to lower byte as we currently limit
0005F8r 3                               ; to 255 characters max)
0005F8r 3  C4 rr                        cpy tmp2
0005FAr 3  F0 0A                        beq @hist_filled_buffer
0005FCr 3               
0005FCr 3                               ; Copy a character and echo.
0005FCr 3  B1 rr                        lda (tmp3),y
0005FEr 3  91 rr                        sta (tmp1),y
000600r 3  20 rr rr                     jsr emit_a
000603r 3               
000603r 3                               ; Move to the next character.
000603r 3  C8                           iny
000604r 3  80 EB                        bra @history_loop
000606r 3               
000606r 3               @hist_filled_buffer:
000606r 3                               ; We don't want a history recall to EOL our buffer,
000606r 3                               ; so back up one character and return to editing.
000606r 3  88                           dey
000607r 3  4C rr rr                     jmp accept_loop
00060Ar 3               accept_done:
00060Ar 3               @done:
00060Ar 3                               ; Copy the input buffer into the currently
00060Ar 3                               ; selected history buffer.
00060Ar 3  20 rr rr                     jsr total_recall
00060Dr 3  85 rr                        sta status+1
00060Fr 3               
00060Fr 3                               ; Also save it in the first buffer byte.
00060Fr 3  A0 00                        ldy #0
000611r 3  91 rr                        sta (tmp3),y
000613r 3               
000613r 3                               ; Move path the count to the data bytes
000613r 3  E6 rr                        inc tmp3
000615r 3  D0 02                        bne @4           ; Increment the upper byte on carry.
000617r 3  E6 rr                        inc tmp3+1
000619r 3               @4:
000619r 3                               ; Copy the characters from the input buffer to the
000619r 3                               ; history buffer.
000619r 3               
000619r 3               @save_history_loop:
000619r 3  C4 rr                        cpy status+1
00061Br 3  F0 07                        beq @save_history_done
00061Dr 3               
00061Dr 3  B1 rr                        lda (tmp1),y
00061Fr 3  91 rr                        sta (tmp3),y
000621r 3  C8                           iny
000622r 3  80 F5                        bra @save_history_loop
000624r 3               
000624r 3               @save_history_done:
000624r 3               z_accept:
000624r 3  60                           rts
000625r 3               
000625r 3               total_recall:
000625r 3                       ; """Internal subroutine for ACCEPT that recalls history entry"""
000625r 3               
000625r 3                               ; Generate the address of the buffer in tmp3. Start with the
000625r 3                               ; base address.
000625r 3  A9 rr                        lda #<hist_buff
000627r 3  85 rr                        sta tmp3
000629r 3  A9 rr                        lda #>hist_buff
00062Br 3  85 rr                        sta tmp3+1
00062Dr 3               
00062Dr 3                               ; This is a bit annoying as some bits go into each byte.
00062Dr 3                               ; .....xxx gets put into address like ......xx x.......
00062Dr 3  A5 rr                        lda status
00062Fr 3  6A                           ror
000630r 3  29 03                        and #3
000632r 3  18                           clc
000633r 3  65 rr                        adc tmp3+1
000635r 3  85 rr                        sta tmp3+1
000637r 3               
000637r 3  A5 rr                        lda status
000639r 3  6A                           ror             ; Rotate through carry into msb.
00063Ar 3  6A                           ror
00063Br 3  29 80                        and #$80
00063Dr 3  18                           clc
00063Er 3  65 rr                        adc tmp3
000640r 3  85 rr                        sta tmp3
000642r 3  90 02                        bcc @1           ; Increment the upper byte on carry.
000644r 3  E6 rr                        inc tmp3+1
000646r 3               @1:
000646r 3                               ; Save the current length of the input buffer in
000646r 3                               ; histinfo+1 temporarily.  Reduce to 127 if larger.
000646r 3  98                           tya
000647r 3  C9 80                        cmp #$80
000649r 3  90 02                        bcc @2
00064Br 3  A9 7F                        lda #$7F
00064Dr 3               @2:
00064Dr 3  60                           rts
00064Er 3               
00064Er 3               
00064Er 3               
00064Er 3               
00064Er 3               
00064Er 3               ; ## ACTION_OF ( "name" -- xt ) "Get named deferred word's xt"
00064Er 3               ; ## "action-of"  auto  ANS core ext
00064Er 3                       ; """http://forth-standard.org/standard/core/ACTION-OF"""
00064Er 3               
00064Er 3               xt_action_of:
00064Er 3                               ; This is a state aware word with differet behavior
00064Er 3                               ; when used while compiling vs interpreting.
00064Er 3                               ; Check STATE
00064Er 3  A5 rr                        lda state
000650r 3  05 rr                        ora state+1
000652r 3  F0 0C                        beq @interpreting
000654r 3               
000654r 3               @compiling:
000654r 3                               ; Run ['] to compile the xt of the next word
000654r 3                               ; as a literal.
000654r 3  20 rr rr                     jsr xt_bracket_tick
000657r 3               
000657r 3                               ; Postpone DEFER@ by compiling a JSR to it.
000657r 3  A0 rr                        ldy #>xt_defer_fetch
000659r 3  A9 rr                        lda #<xt_defer_fetch
00065Br 3  20 rr rr                     jsr cmpl_subroutine
00065Er 3  80 06                        bra @done
000660r 3               
000660r 3               @interpreting:
000660r 3  20 rr rr                     jsr xt_tick
000663r 3  20 rr rr                     jsr xt_defer_fetch
000666r 3               
000666r 3               @done:
000666r 3  60           z_action_of:           rts
000667r 3               
000667r 3               
000667r 3               
000667r 3               ; ## AGAIN ( addr -- ) "Code backwards branch to address left by BEGIN"
000667r 3               ; ## "again"  tested  ANS core ext
000667r 3                       ; """https://forth-standard.org/standard/core/AGAIN"""
000667r 3               
000667r 3               xt_again:
000667r 3  20 rr rr                     jsr underflow_1
00066Ar 3               
00066Ar 3                               ; Add the opcode for a JMP. We use JMP instead of BRA
00066Ar 3                               ; so we have the range and don't have to calculate the
00066Ar 3                               ; offset.
00066Ar 3  A0 00                        ldy #0
00066Cr 3  A9 4C                        lda #$4C        ; JMP
00066Er 3  91 rr                        sta (cp),y
000670r 3  C8                           iny
000671r 3               
000671r 3  B5 00                        lda 0,x         ; LSB of address
000673r 3  91 rr                        sta (cp),y
000675r 3  C8                           iny
000676r 3               
000676r 3  B5 01                        lda 1,x         ; MSB of address
000678r 3  91 rr                        sta (cp),y
00067Ar 3  C8                           iny
00067Br 3               
00067Br 3                               ; Allot the space we just used
00067Br 3  98                           tya
00067Cr 3  18                           clc
00067Dr 3  65 rr                        adc cp
00067Fr 3  85 rr                        sta cp
000681r 3  90 02                        bcc @done
000683r 3  E6 rr                        inc cp+1
000685r 3               @done:
000685r 3  E8                           inx
000686r 3  E8                           inx
000687r 3               
000687r 3  60           z_again:        rts
000688r 3               
000688r 3               
000688r 3               
000688r 3               ; ## ALIGN ( -- ) "Make sure CP is aligned on word size"
000688r 3               ; ## "align"  auto  ANS core
000688r 3                       ; """https://forth-standard.org/standard/core/ALIGN
000688r 3                       ; On a 8-bit machine, this does nothing. ALIGNED uses this
000688r 3                       ; routine as well, and also does nothing
000688r 3                       ; """
000688r 3               
000688r 3               ; ## ALIGNED ( addr -- addr ) "Return the first aligned address"
000688r 3               ; ## "aligned"  auto  ANS core
000688r 3                       ; """https://forth-standard.org/standard/core/ALIGNED"""
000688r 3               
000688r 3               xt_align:
000688r 3               xt_aligned:
000688r 3               z_align:
000688r 3  60           z_aligned:      rts             ; stripped out during native compile
000689r 3               
000689r 3               
000689r 3               
000689r 3               ; ## ALLOT ( n -- ) "Reserve or release memory"
000689r 3               ; ## "allot"  auto  ANS core
000689r 3                       ; """https://forth-standard.org/standard/core/ALLOT
000689r 3                       ; Reserve a certain number of bytes (not cells) or release them.
000689r 3                       ; If n = 0, do nothing. If n is negative, release n bytes, but only
000689r 3                       ; to the beginning of the Dictionary. If n is positive (the most
000689r 3                       ; common case), reserve n bytes, but not past the end of the
000689r 3                       ; Dictionary. See http://forth-standard.org/standard/core/ALLOT
000689r 3                       ; """
000689r 3               
000689r 3               xt_allot:
000689r 3  20 rr rr                     jsr underflow_1
00068Cr 3               
00068Cr 3                               ; Releasing memory is going to be a very rare operation,
00068Cr 3                               ; so we check for it at the beginning and try to make
00068Cr 3                               ; the most common case as fast as possible
00068Cr 3  B5 01                        lda 1,x
00068Er 3  30 22                        bmi @release
000690r 3               
000690r 3                               ; Common case: We are reserving memory, not releasing it
000690r 3  18                           clc
000691r 3  A5 rr                        lda cp
000693r 3  75 00                        adc 0,x
000695r 3  85 rr                        sta cp
000697r 3               
000697r 3  A5 rr                        lda cp+1
000699r 3  75 01                        adc 1,x
00069Br 3  85 rr                        sta cp+1
00069Dr 3               
00069Dr 3                               ; Wait, did we just grant more space than we have? This is
00069Dr 3                               ; a check we only do here, not for other situations like cmpl_a
00069Dr 3                               ; where smaller amounts are reserved.
00069Dr 3  A0 FF                        ldy #<cp_end
00069Fr 3  C4 rr                        cpy cp
0006A1r 3  A9 7F                        lda #>cp_end
0006A3r 3  E5 rr                        sbc cp+1
0006A5r 3  B0 48                        bcs @done               ; we're fine.
0006A7r 3               
0006A7r 3                               ; Oops, that was too much, we're beyond the end of
0006A7r 3                               ; legal Dictionary RAM. Reduce to max memory and report
0006A7r 3                               ; an error
0006A7r 3  84 rr                        sty cp                  ; still #<cp_end
0006A9r 3  A9 7F                        lda #>cp_end
0006ABr 3  85 rr                        sta cp+1
0006ADr 3               
0006ADr 3  A9 00                        lda #err_allot
0006AFr 3  4C rr rr                     jmp error
0006B2r 3               
0006B2r 3               @release:
0006B2r 3                  		; The ANS standard doesn't really say what to do if too much
0006B2r 3                               ; memory is freed ("negatively alloted"). In fact, there isn't
0006B2r 3                               ; even an official test. Gforth is little help either. The good
0006B2r 3                               ; news is, this is going to be a rare case. We want to use as
0006B2r 3                               ; few bytes as possible.
0006B2r 3               
0006B2r 3                               ; What we do is let the user free anything up to the beginning
0006B2r 3                               ; of the RAM area assigned to the Dicionary (CP0), but at
0006B2r 3                               ; their own risk. This means that the Dictionary pointer DP
0006B2r 3                               ; might end up pointing to garbage. However, an attempt to
0006B2r 3                               ; free more than RAM than CP0 will lead to CP being set to CP0,
0006B2r 3                               ; the DP pointing to the last word in RAM (should be DROP) and
0006B2r 3                               ; an error message.
0006B2r 3               
0006B2r 3                               ; We arrive here with ( n ) which is negative. First step,
0006B2r 3                               ; subtract the number TOS from the CP for a new CP
0006B2r 3  CA                           dex
0006B3r 3  CA                           dex
0006B4r 3  A5 rr                        lda cp
0006B6r 3  95 00                        sta 0,x
0006B8r 3  A5 rr                        lda cp+1
0006BAr 3  95 01                        sta 1,x
0006BCr 3               
0006BCr 3  20 rr rr                     jsr xt_plus                     ; new CP is now TOS
0006BFr 3               
0006BFr 3                               ; Second step, see if we've gone too far. We compare the new
0006BFr 3                               ; CP on TOS (which, if we've really screwed up, might be
0006BFr 3                               ; negative) with CP0. This is a signed comparison
0006BFr 3  CA                           dex
0006C0r 3  CA                           dex                             ; new CP now NOS
0006C1r 3  A9 rr                        lda #<cp0
0006C3r 3  95 00                        sta 0,x
0006C5r 3  A9 rr                        lda #>cp0
0006C7r 3  95 01                        sta 1,x                         ; CP0 is TOS
0006C9r 3               
0006C9r 3  20 rr rr                     jsr compare_16bit               ; still ( CP CP0 )
0006CCr 3               
0006CCr 3                               ; If CP (NOS) is smaller than CP0 (TOS), we're in trouble.
0006CCr 3                               ; This means we want Z=1 or N=1
0006CCr 3  F0 17                        beq @nega_done
0006CEr 3  30 15                        bmi @nega_done
0006D0r 3               
0006D0r 3                               ; Yep, we're in trouble. Set CP to CP0, set DP to the first
0006D0r 3                               ; word in ROM (should be DROP), and abort with an error
0006D0r 3  A9 rr                        lda #<cp0
0006D2r 3  85 rr                        sta cp
0006D4r 3  A9 rr                        lda #>cp0
0006D6r 3  85 rr                        sta cp+1
0006D8r 3               
0006D8r 3  A9 rr                        lda #<dictionary_start
0006DAr 3  85 rr                        sta dp
0006DCr 3  A9 rr                        lda #>dictionary_start
0006DEr 3  85 rr                        sta dp+1
0006E0r 3               
0006E0r 3  A9 0A                        lda #err_negallot
0006E2r 3  4C rr rr                     jmp error
0006E5r 3               
0006E5r 3               @nega_done:
0006E5r 3                               ; Save new CP, which is NOS
0006E5r 3  B5 02                        lda 2,x
0006E7r 3  85 rr                        sta cp
0006E9r 3  B5 03                        lda 3,x
0006EBr 3  85 rr                        sta cp+1
0006EDr 3               
0006EDr 3  E8                           inx
0006EEr 3  E8                           inx                     ; drop through to @done
0006EFr 3               @done:
0006EFr 3  E8                           inx
0006F0r 3  E8                           inx
0006F1r 3               z_allot:
0006F1r 3  60                           rts
0006F2r 3               
0006F2r 3               
0006F2r 3               
0006F2r 3               ; ## ALLOW_NATIVE ( -- ) "Flag last word to allow native compiling"
0006F2r 3               ; ## "allow-native"  auto  Tali Forth
0006F2r 3               xt_allow_native:
0006F2r 3  20 rr rr                     jsr current_to_dp
0006F5r 3  A0 01                        ldy #1          ; offset for status byte
0006F7r 3  B1 rr                        lda (dp),y
0006F9r 3  29 F5                        and #$ff-NN-AN  ; AN and NN flag is clear.
0006FBr 3  91 rr                        sta (dp),y
0006FDr 3               z_allow_native:
0006FDr 3  60                           rts
0006FEr 3               
0006FEr 3               
0006FEr 3               ; ## ALSO ( -- ) "Make room in the search order for another wordlist"
0006FEr 3               ; ## "also"  auto  ANS search ext
0006FEr 3                       ; """http://forth-standard.org/standard/search/ALSO"""
0006FEr 3               xt_also:
0006FEr 3  20 rr rr                     jsr xt_get_order
000701r 3  20 rr rr                     jsr xt_over
000704r 3  20 rr rr                     jsr xt_swap
000707r 3  20 rr rr                     jsr xt_one_plus
00070Ar 3  20 rr rr                     jsr xt_set_order
00070Dr 3               
00070Dr 3  60           z_also:         rts
00070Er 3               
00070Er 3               
00070Er 3               ; ## ALWAYS_NATIVE ( -- ) "Flag last word as always natively compiled"
00070Er 3               ; ## "always-native"  auto  Tali Forth
00070Er 3               xt_always_native:
00070Er 3  20 rr rr                     jsr current_to_dp
000711r 3  A0 01                        ldy #1          ; offset for status byte
000713r 3  B1 rr                        lda (dp),y
000715r 3  09 02                        ora #AN         ; Make sure AN flag is set
000717r 3  29 F7                        and #$ff-NN     ; and NN flag is clear.
000719r 3  91 rr                        sta (dp),y
00071Br 3               z_always_native:
00071Br 3  60                           rts
00071Cr 3               
00071Cr 3               
00071Cr 3               ; ## AND ( n n -- n ) "Logically AND TOS and NOS"
00071Cr 3               ; ## "and"  auto  ANS core
00071Cr 3                       ; """https://forth-standard.org/standard/core/AND"""
00071Cr 3               xt_and:
00071Cr 3  20 rr rr                     jsr underflow_2
00071Fr 3               
00071Fr 3  B5 00                        lda 0,x
000721r 3  35 02                        and 2,x
000723r 3  95 02                        sta 2,x
000725r 3               
000725r 3  B5 01                        lda 1,x
000727r 3  35 03                        and 3,x
000729r 3  95 03                        sta 3,x
00072Br 3               
00072Br 3  E8                           inx
00072Cr 3  E8                           inx
00072Dr 3               
00072Dr 3  60           z_and:          rts
00072Er 3               
00072Er 3               
00072Er 3               ; ## ASSEMBLER_WORDLIST ( -- u ) "WID for the Assembler wordlist"
00072Er 3               ; ## "assembler-wordlist"  tested  Tali Assembler
00072Er 3                       ; """ Commonly used like `assembler-wordlist >order` to add the
00072Er 3                       ; assembler words to the search order so they can be used.
00072Er 3                       ; See the tutorial on Wordlists and the Search Order for
00072Er 3                       ; more information.
00072Er 3                       ;
00072Er 3                       ; This is a dummy entry, the code is shared with TWO
00072Er 3                       ; """
00072Er 3               
00072Er 3               
00072Er 3               ; ## AT_XY ( n m -- ) "Move cursor to position given"
00072Er 3               ; ## "at-xy"  tested  ANS facility
00072Er 3                       ; """https://forth-standard.org/standard/facility/AT-XY
00072Er 3                       ; On an ANSI compatible terminal, place cursor at row n colum m.
00072Er 3                       ; ANSI code is ESC[<n>;<m>H
00072Er 3                       ;
00072Er 3                       ; Do not use U. to print the numbers because the
00072Er 3                       ; trailing space will not work with xterm
00072Er 3                       ; """
00072Er 3               xt_at_xy:
00072Er 3  20 rr rr                     jsr underflow_2
000731r 3               
000731r 3  A9 1B                        lda #AscESC
000733r 3  20 rr rr                     jsr emit_a
000736r 3  A9 5B                        lda #$5B        ; ASCII for "["
000738r 3  20 rr rr                     jsr emit_a
00073Br 3  20 rr rr                     jsr print_u
00073Er 3  A9 3B                        lda #$3B        ; ASCII for ";"
000740r 3  20 rr rr                     jsr emit_a
000743r 3  20 rr rr                     jsr print_u
000746r 3  A9 48                        lda #'H'
000748r 3  20 rr rr                     jsr emit_a
00074Br 3               
00074Br 3  60           z_at_xy:        rts
00074Cr 3               
00074Cr 3               
00074Cr 3               ; ## BACKSLASH ( -- ) "Ignore rest of line"
00074Cr 3               ; ## "\"  auto  ANS core ext
00074Cr 3                       ; """https://forth-standard.org/standard/core/bs"""
00074Cr 3               xt_backslash:
00074Cr 3  A5 rr                        lda ciblen
00074Er 3  85 rr                        sta toin
000750r 3  A5 rr                        lda ciblen+1
000752r 3  85 rr                        sta toin+1
000754r 3               
000754r 3  60           z_backslash:    rts
000755r 3               
000755r 3               
000755r 3               ; ## BASE ( -- addr ) "Push address of radix base to stack"
000755r 3               ; ## "base"  auto  ANS core
000755r 3                       ; """https://forth-standard.org/standard/core/BASE
000755r 3                       ; The ANS Forth standard sees the base up to 36, so we can cheat and
000755r 3                       ; ingore the MSB
000755r 3                       ; """
000755r 3               xt_base:
000755r 3  CA                           dex
000756r 3  CA                           dex
000757r 3  A9 rr                        lda #<base
000759r 3  95 00                        sta 0,x         ; LSB
00075Br 3  74 01                        stz 1,x         ; MSB is always 0
00075Dr 3               
00075Dr 3  60           z_base:         rts
00075Er 3               
00075Er 3               
00075Er 3               ; ## BEGIN ( -- addr ) "Mark entry point for loop"
00075Er 3               ; ## "begin"  auto  ANS core
00075Er 3                       ; """https://forth-standard.org/standard/core/BEGIN
00075Er 3                       ;
00075Er 3                       ; This is just an immediate version of here which could just
00075Er 3                       ; as well be coded in Forth as
00075Er 3                       ;       : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
00075Er 3                       ; Since this is a compiling word, we don't care that much about
00075Er 3                       ; about speed
00075Er 3                       ; """
00075Er 3               
00075Er 3               xt_begin:
00075Er 3  20 rr rr                     jsr xt_here
000761r 3  60           z_begin:        rts
000762r 3               
000762r 3               
000762r 3               
000762r 3               ; ## BELL ( -- ) "Emit ASCII BELL"
000762r 3               ; ## "bell"  tested  Tali Forth
000762r 3               xt_bell:
000762r 3  A9 07                        lda #7          ; ASCII value for BELl
000764r 3  20 rr rr                     jsr emit_a
000767r 3               
000767r 3  60           z_bell:         rts
000768r 3               
000768r 3               
000768r 3               ; ## BL ( -- c ) "Push ASCII value of SPACE to stack"
000768r 3               ; ## "bl"  auto  ANS core
000768r 3                       ; """https://forth-standard.org/standard/core/BL"""
000768r 3               
000768r 3               xt_bl:
000768r 3  CA                           dex
000769r 3  CA                           dex
00076Ar 3  A9 20                        lda #AscSP
00076Cr 3  95 00                        sta 0,x
00076Er 3  74 01                        stz 1,x
000770r 3               
000770r 3  60           z_bl:           rts
000771r 3               
000771r 3               
000771r 3               ; ## BLK ( -- addr ) "Push address of block being interpreted"
000771r 3               ; ## "block"  auto  ANS block
000771r 3                       ; """https://forth-standard.org/standard/block/BLK"""
000771r 3               xt_blk:
000771r 3                               ; BLK is at UP + blk_offset
000771r 3  CA                           dex
000772r 3  CA                           dex
000773r 3  18                           clc
000774r 3  A5 rr                        lda up
000776r 3  69 00                        adc #blk_offset ; Add offset
000778r 3  95 00                        sta 0,x
00077Ar 3  A5 rr                        lda up+1
00077Cr 3  69 00                        adc #0          ; Adding carry
00077Er 3  95 01                        sta 1,x
000780r 3               
000780r 3  60           z_blk:          rts
000781r 3               
000781r 3               
000781r 3               ; ## BLKBUFFER ( -- addr ) "Push address of block buffer"
000781r 3               ; ## "blkbuffer"  auto  Tali block
000781r 3               xt_blkbuffer:
000781r 3                               ; blkbuffer address is at UP + blkbuffer_offset.
000781r 3                               ; Unlike some of the other user variables, we actually
000781r 3                               ; want to push the address stored here, which will
000781r 3                               ; point to somewhere outside of the user variables.
000781r 3  CA                           dex
000782r 3  CA                           dex
000783r 3                               ; Put the address on the stack.
000783r 3  A0 28                        ldy #blkbuffer_offset
000785r 3  B1 rr                        lda (up),y
000787r 3  95 00                        sta 0,x
000789r 3  C8                           iny             ; Move along to the next byte
00078Ar 3  B1 rr                        lda (up),y
00078Cr 3  95 01                        sta 1,x
00078Er 3               
00078Er 3  60           z_blkbuffer:    rts
00078Fr 3               
00078Fr 3               
00078Fr 3               ; ## BLOCK ( u -- a-addr ) "Fetch a block into a buffer"
00078Fr 3               ; ## "block"  auto  ANS block
00078Fr 3                       ; """https://forth-standard.org/standard/block/BLOCK"""
00078Fr 3               
00078Fr 3               xt_block:
00078Fr 3               
00078Fr 3                               ; See if the block requested is the same as the one we
00078Fr 3                               ; currently have in the buffer. Check the LSB.
00078Fr 3  A0 2A                        ldy #buffblocknum_offset
000791r 3  B1 rr                        lda (up),y
000793r 3  D5 00                        cmp 0,x
000795r 3  D0 0F                        bne @not_in_buffer
000797r 3               
000797r 3                               ; Check the MSB.
000797r 3  C8                           iny
000798r 3  B1 rr                        lda (up),y
00079Ar 3  D5 01                        cmp 1,x
00079Cr 3  D0 08                        bne @not_in_buffer
00079Er 3               
00079Er 3                               ; The block is in the buffer. See if the buffer is in use.
00079Er 3  A0 2C                        ldy #buffstatus_offset
0007A0r 3  B1 rr                        lda (up),y
0007A2r 3  29 01                        and #1          ; Check the in-use flag (bit 0)
0007A4r 3  D0 30                        bne @done       ; It's already in the buffer and in use.
0007A6r 3                                               ; @done will replace the block# with the
0007A6r 3                                               ; buffer address.
0007A6r 3               @not_in_buffer:
0007A6r 3                               ; Check the buffer status
0007A6r 3  A0 2C                        ldy #buffstatus_offset
0007A8r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
0007AAr 3  C9 03                        cmp #3          ; LSB is needed.
0007ACr 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
0007AEr 3               
0007AEr 3                               ; We need to save the block.
0007AEr 3  20 rr rr                     jsr xt_blkbuffer
0007B1r 3  20 rr rr                     jsr xt_buffblocknum
0007B4r 3  20 rr rr                     jsr xt_fetch
0007B7r 3  20 rr rr                     jsr xt_block_write
0007BAr 3               
0007BAr 3               @buffer_available:
0007BAr 3                               ; Save the block number.
0007BAr 3  A0 2A                        ldy #buffblocknum_offset
0007BCr 3  B5 00                        lda 0,x
0007BEr 3  91 rr                        sta (up),y
0007C0r 3  C8                           iny
0007C1r 3  B5 01                        lda 1,x
0007C3r 3  91 rr                        sta (up),y
0007C5r 3               
0007C5r 3                               ; Get the requested block.
0007C5r 3  20 rr rr                     jsr xt_blkbuffer
0007C8r 3  20 rr rr                     jsr xt_swap
0007CBr 3  20 rr rr                     jsr xt_block_read
0007CEr 3               
0007CEr 3                               ; Mark the buffer as clean and in-use.
0007CEr 3  A9 01                        lda #1
0007D0r 3  A0 2C                        ldy #buffstatus_offset
0007D2r 3  91 rr                        sta (up),y
0007D4r 3               
0007D4r 3                               ; Make room on the stack for the return address.
0007D4r 3  CA                           dex
0007D5r 3  CA                           dex
0007D6r 3               
0007D6r 3               @done:
0007D6r 3                               ; It's in the buffer. Return the buffer address.
0007D6r 3  A0 28                        ldy #blkbuffer_offset
0007D8r 3  B1 rr                        lda (up),y
0007DAr 3  95 00                        sta 0,x
0007DCr 3  C8                           iny
0007DDr 3  B1 rr                        lda (up),y
0007DFr 3  95 01                        sta 1,x
0007E1r 3               
0007E1r 3  60           z_block:        rts
0007E2r 3               
0007E2r 3               
0007E2r 3               
0007E2r 3               ; ## BLOCK_RAMDRIVE_INIT ( u -- ) "Create a ramdrive for blocks"
0007E2r 3               ; ## "block-ramdrive-init"  auto  Tali block
0007E2r 3                       ; """Create a RAM drive, with the given number of
0007E2r 3                       ; blocks, in the dictionary along with setting up the block words to
0007E2r 3                       ; use it.  The read/write routines do not provide bounds checking.
0007E2r 3                       ; Expected use: `4 block-ramdrive-init` ( to create blocks 0-3 )
0007E2r 3                       ; """
0007E2r 3               
0007E2r 3               xt_block_ramdrive_init:
0007E2r 3  20 rr rr                     jsr underflow_1
0007E5r 3               
0007E5r 3                               ; Store the string to run here as a string literal.
0007E5r 3                               ; See SLITERAL for the format information. This way, we
0007E5r 3                               ; don't have the words defined below in the Dictionary until
0007E5r 3                               ; we really use them.
0007E5r 3  4C rr rr                     jmp @after_ramdrive_code
0007E8r 3               
0007E8r 3               @ramdrive_code:
0007E8r 3  62 61 73 65          .byte "base @ swap decimal"
0007ECr 3  20 40 20 73  
0007F0r 3  77 61 70 20  
0007FBr 3  20 31 30 32          .byte " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
0007FFr 3  34 20 2A     
000802r 3  20 64 75 70          .byte " dup"    ; ( Save a copy for formatting it at the end )
000806r 3  20 62 75 66          .byte " buffer: ramdrive" ; ( Create ramdrive )
00080Ar 3  66 65 72 3A  
00080Er 3  20 72 61 6D  
000817r 3                       ; ( These routines just copy between the buffer and the ramdrive blocks )
000817r 3  20 3A 20 62          .byte " : block-read-ramdrive"  ; ( addr u -- )
00081Br 3  6C 6F 63 6B  
00081Fr 3  2D 72 65 61  
00082Dr 3  20 72 61 6D          .byte " ramdrive swap 1024 * + swap 1024 move ;"
000831r 3  64 72 69 76  
000835r 3  65 20 73 77  
000855r 3  20 3A 20 62          .byte " : block-write-ramdrive" ; ( addr u -- )
000859r 3  6C 6F 63 6B  
00085Dr 3  2D 77 72 69  
00086Cr 3  20 72 61 6D          .byte " ramdrive swap 1024 * + 1024 move ;"
000870r 3  64 72 69 76  
000874r 3  65 20 73 77  
00088Fr 3  20 27 20 62          .byte " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
000893r 3  6C 6F 63 6B  
000897r 3  2D 72 65 61  
0008B9r 3  20 27 20 62          .byte " ' block-write-ramdrive block-write-vector !"
0008BDr 3  6C 6F 63 6B  
0008C1r 3  2D 77 72 69  
0008E5r 3  20 72 61 6D          .byte " ramdrive swap blank base !"
0008E9r 3  64 72 69 76  
0008EDr 3  65 20 73 77  
000900r 3               
000900r 3               @after_ramdrive_code:
000900r 3  20 rr rr                     jsr sliteral_runtime
000903r 3               
000903r 3  rr rr 18 01  .word @ramdrive_code, @after_ramdrive_code-@ramdrive_code
000907r 3               
000907r 3                               ; The address and length of the ramdrive code is now on the
000907r 3                               ; stack. Call EVALUATE to run it.
000907r 3  20 rr rr                     jsr xt_evaluate
00090Ar 3               
00090Ar 3               z_block_ramdrive_init:
00090Ar 3  60                           rts
00090Br 3               
00090Br 3               
00090Br 3               
00090Br 3               ; ## BLOCK_READ ( addr u -- ) "Read a block from storage (deferred word)"
00090Br 3               ; ## "block-read"  auto  Tali block
00090Br 3                       ; """BLOCK-READ is a vectored word that the user needs to override
00090Br 3                       ; with their own version to read a block from storage.
00090Br 3                       ; The stack parameters are ( buffer_address block# -- ).
00090Br 3                       ; """
00090Br 3               xt_block_read:
00090Br 3                               ; Execute the BLOCK-READ-VECTOR
00090Br 3  A0 2E                        ldy #blockread_offset
00090Dr 3  B1 rr                        lda (up),y
00090Fr 3  85 rr                        sta tmp1
000911r 3  C8                           iny
000912r 3  B1 rr                        lda (up),y
000914r 3  85 rr                        sta tmp1+1
000916r 3               
000916r 3  6C rr rr                     jmp (tmp1)
000919r 3               
000919r 3               z_block_read:   ; No RTS needed
000919r 3               
000919r 3               
000919r 3               ; ## BLOCK_READ_VECTOR ( -- addr ) "Address of the block-read vector"
000919r 3               ; ## "block-read-vector"  auto  Tali block
000919r 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000919r 3                       ; with their own version to read a block from storage.
000919r 3                       ; This word gives the address of the vector so it can be replaced.
000919r 3                       ; """
000919r 3               xt_block_read_vector:
000919r 3                               ; Get the BLOCK-READ-VECTOR address
000919r 3  CA                           dex
00091Ar 3  CA                           dex
00091Br 3  18                           clc
00091Cr 3  A5 rr                        lda up
00091Er 3  69 2E                        adc #blockread_offset
000920r 3  95 00                        sta 0,x
000922r 3  A5 rr                        lda up+1
000924r 3  69 00                        adc #0          ; Add carry
000926r 3  95 01                        sta 1,x
000928r 3               
000928r 3               z_block_read_vector:
000928r 3  60                           rts
000929r 3               
000929r 3               
000929r 3               ; This is the default error message the vectored words BLOCK-READ and
000929r 3               ; BLOCK-WRITE start with. This word is not included in the dictionary.
000929r 3               xt_block_word_error:
000929r 3  A9 0C                        lda #err_blockwords
00092Br 3  4C rr rr                     jmp error       ; no RTS needed
00092Er 3               z_block_word_error:
00092Er 3               
00092Er 3               ; ## BLOCK_WRITE ( addr u -- ) "Write a block to storage (deferred word)"
00092Er 3               ; ## "block-write"  auto  Tali block
00092Er 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
00092Er 3                       ; with their own version to write a block to storage.
00092Er 3                       ; The stack parameters are ( buffer_address block# -- ).
00092Er 3                       ; """
00092Er 3               xt_block_write:
00092Er 3                               ; Execute the BLOCK-READ-VECTOR
00092Er 3  A0 30                        ldy #blockwrite_offset
000930r 3  B1 rr                        lda (up),y
000932r 3  85 rr                        sta tmp1
000934r 3  C8                           iny
000935r 3  B1 rr                        lda (up),y
000937r 3  85 rr                        sta tmp1+1
000939r 3  6C rr rr                     jmp (tmp1)
00093Cr 3               
00093Cr 3               z_block_write:  ; No RTS needed
00093Cr 3               
00093Cr 3               
00093Cr 3               ; ## BLOCK_WRITE_VECTOR ( -- addr ) "Address of the block-write vector"
00093Cr 3               ; ## "block-write-vector"  auto  Tali block
00093Cr 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
00093Cr 3                       ; with their own version to write a block to storage.
00093Cr 3                       ; This word gives the address of the vector so it can be replaced.
00093Cr 3                       ; """
00093Cr 3               xt_block_write_vector:
00093Cr 3                               ; Get the BLOCK-WRITE-VECTOR address
00093Cr 3  CA                           dex
00093Dr 3  CA                           dex
00093Er 3  18                           clc
00093Fr 3  A5 rr                        lda up
000941r 3  69 30                        adc #blockwrite_offset
000943r 3  95 00                        sta 0,x
000945r 3  A5 rr                        lda up+1
000947r 3  69 00                        adc #0          ; Add carry
000949r 3  95 01                        sta 1,x
00094Br 3               
00094Br 3               z_block_write_vector:
00094Br 3  60                           rts
00094Cr 3               
00094Cr 3               
00094Cr 3               ; ## BOUNDS ( addr u -- addr+u addr ) "Prepare address for looping"
00094Cr 3               ; ## "bounds"  auto  Gforth
00094Cr 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Memory-Blocks.html
00094Cr 3                       ; Given a string, return the correct Data Stack parameters for
00094Cr 3                       ; a DO/LOOP loop over its characters. This is realized as
00094Cr 3                       ; OVER + SWAP in Forth, but we do it a lot faster in assembler
00094Cr 3                       ; """
00094Cr 3               xt_bounds:
00094Cr 3  20 rr rr                     jsr underflow_2
00094Fr 3               
00094Fr 3  18                           clc
000950r 3  B5 00                        lda 0,x                 ; LSB u
000952r 3  B4 02                        ldy 2,x                 ; LSB addr
000954r 3  75 02                        adc 2,x
000956r 3  95 02                        sta 2,x                 ; LSB addr+u
000958r 3  94 00                        sty 0,x
00095Ar 3               
00095Ar 3  B5 01                        lda 1,x                 ; MSB u
00095Cr 3  B4 03                        ldy 3,x                 ; MSB addr
00095Er 3  75 03                        adc 3,x
000960r 3  95 03                        sta 3,x                 ; MSB addr+u
000962r 3  94 01                        sty 1,x
000964r 3               
000964r 3  60           z_bounds:       rts
000965r 3               
000965r 3               
000965r 3               ; ## BRACKET_CHAR ( "c" -- ) "Compile character"
000965r 3               ; ## "[char]"  auto  ANS core
000965r 3                       ; """https://forth-standard.org/standard/core/BracketCHAR
000965r 3                       ; Compile the ASCII value of a character as a literal. This is an
000965r 3                       ; immediate, compile-only word.
000965r 3                       ;
000965r 3                       ; A definition given in
000965r 3                       ; http://forth-standard.org/standard/implement is
000965r 3                       ; : [CHAR]  CHAR POSTPONE LITERAL ; IMMEDIATE
000965r 3                       ; """
000965r 3               xt_bracket_char:
000965r 3  20 rr rr                     jsr xt_char
000968r 3  20 rr rr                     jsr xt_literal
00096Br 3  60           z_bracket_char: rts
00096Cr 3               
00096Cr 3               
00096Cr 3               ; ## BRACKET_TICK ( -- ) "Store xt of following word during compilation"
00096Cr 3               ; ## "[']"  auto  ANS core
00096Cr 3                       ; """https://forth-standard.org/standard/core/BracketTick"""
00096Cr 3               xt_bracket_tick:
00096Cr 3  20 rr rr                     jsr xt_tick
00096Fr 3  20 rr rr                     jsr xt_literal
000972r 3  60           z_bracket_tick: rts
000973r 3               
000973r 3               
000973r 3               ; ## BUFFBLOCKNUM ( -- addr ) "Push address of variable holding block in buffer"
000973r 3               ; ## "buffblocknum"  auto  Tali block
000973r 3               xt_buffblocknum:
000973r 3                               ; BUFFBLOCKNUM is at UP + buffblocknum_offset
000973r 3  CA                           dex
000974r 3  CA                           dex
000975r 3  18                           clc
000976r 3  A5 rr                        lda up
000978r 3  69 2A                        adc #buffblocknum_offset        ; Add offset
00097Ar 3  95 00                        sta 0,x
00097Cr 3  A5 rr                        lda up+1
00097Er 3  69 00                        adc #0                          ; Adding carry
000980r 3  95 01                        sta 1,x
000982r 3               
000982r 3  60           z_buffblocknum: rts
000983r 3               
000983r 3               
000983r 3               ; ## BUFFER ( u -- a-addr ) "Get a buffer for a block"
000983r 3               ; ## "buffer"  auto  ANS block
000983r 3                       ; """https://forth-standard.org/standard/block/BUFFER"""
000983r 3               
000983r 3               xt_buffer:
000983r 3                               ; Check the buffer status
000983r 3  A0 2C                        ldy #buffstatus_offset
000985r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
000987r 3  C9 03                        cmp #3          ; LSB is needed.
000989r 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
00098Br 3               
00098Br 3                               ; We need to save the block.
00098Br 3  20 rr rr                     jsr xt_blkbuffer
00098Er 3  20 rr rr                     jsr xt_buffblocknum
000991r 3  20 rr rr                     jsr xt_fetch
000994r 3  20 rr rr                     jsr xt_block_write
000997r 3               
000997r 3               @buffer_available:
000997r 3                               ; Save the block number.
000997r 3  A0 2A                        ldy #buffblocknum_offset
000999r 3  B5 00                        lda 0,x
00099Br 3  91 rr                        sta (up),y
00099Dr 3  C8                           iny
00099Er 3  B5 01                        lda 1,x
0009A0r 3  91 rr                        sta (up),y
0009A2r 3               
0009A2r 3                               ; Mark the buffer as clean and in-use.
0009A2r 3  A9 01                        lda #1
0009A4r 3  A0 2C                        ldy #buffstatus_offset
0009A6r 3  91 rr                        sta (up),y
0009A8r 3               
0009A8r 3               @done:
0009A8r 3                               ; Return the buffer address.
0009A8r 3  A0 28                        ldy #blkbuffer_offset
0009AAr 3  B1 rr                        lda (up),y
0009ACr 3  95 00                        sta 0,x
0009AEr 3  C8                           iny
0009AFr 3  B1 rr                        lda (up),y
0009B1r 3  95 01                        sta 1,x
0009B3r 3               
0009B3r 3  60           z_buffer:       rts
0009B4r 3               
0009B4r 3               
0009B4r 3               
0009B4r 3               ; ## BUFFER_COLON ( u "<name>" -- ; -- addr ) "Create an uninitialized buffer"
0009B4r 3               ; ## "buffer:"  auto  ANS core ext
0009B4r 3                               ; """https://forth-standard.org/standard/core/BUFFERColon
0009B4r 3                               ; Create a buffer of size u that puts its address on the stack
0009B4r 3                               ; when its name is used.
0009B4r 3                               ; """
0009B4r 3               xt_buffer_colon:
0009B4r 3  20 rr rr                     jsr xt_create
0009B7r 3  20 rr rr                     jsr xt_allot
0009BAr 3  60           z_buffer_colon: rts
0009BBr 3               
0009BBr 3               
0009BBr 3               ; ## BUFFSTATUS ( -- addr ) "Push address of variable holding buffer status"
0009BBr 3               ; ## "buffstatus"  auto  Tali block
0009BBr 3               xt_buffstatus:
0009BBr 3                               ; BUFFSTATUS is at UP + buffstatus_offset
0009BBr 3  CA                           dex
0009BCr 3  CA                           dex
0009BDr 3  18                           clc
0009BEr 3  A5 rr                        lda up
0009C0r 3  69 2C                        adc #buffstatus_offset  ; Add offset
0009C2r 3  95 00                        sta 0,x
0009C4r 3  A5 rr                        lda up+1
0009C6r 3  69 00                        adc #0                  ; Adding carry
0009C8r 3  95 01                        sta 1,x
0009CAr 3               
0009CAr 3  60           z_buffstatus:   rts
0009CBr 3               
0009CBr 3               
0009CBr 3               ; ## BYE ( -- ) "Break"
0009CBr 3               ; ## "bye"  tested  ANS tools ext
0009CBr 3                       ; """https://forth-standard.org/standard/tools/BYE"""
0009CBr 3               
0009CBr 3               xt_bye:
0009CBr 3                               ;brk
0009CBr 3  4C rr rr                     jmp platform_bye
0009CEr 3               z_bye:          ;rts             ; never reached
0009CEr 3               
0009CEr 3               
0009CEr 3               
0009CEr 3               ; ## C_COMMA ( c -- ) "Store one byte/char in the Dictionary"
0009CEr 3               ; ## "c,"  auto  ANS core
0009CEr 3                       ; """https://forth-standard.org/standard/core/CComma"""
0009CEr 3               
0009CEr 3               xt_c_comma:
0009CEr 3  20 rr rr                     jsr underflow_1
0009D1r 3               
0009D1r 3  B5 00                        lda 0,x
0009D3r 3  20 rr rr                     jsr cmpl_a
0009D6r 3               
0009D6r 3  E8                           inx
0009D7r 3  E8                           inx
0009D8r 3               
0009D8r 3  60           z_c_comma:      rts
0009D9r 3               
0009D9r 3               
0009D9r 3               
0009D9r 3               ; ## C_FETCH ( addr -- c ) "Get a character/byte from given address"
0009D9r 3               ; ## "c@"  auto  ANS core
0009D9r 3                       ; """https://forth-standard.org/standard/core/CFetch"""
0009D9r 3               xt_c_fetch:
0009D9r 3  20 rr rr                     jsr underflow_1
0009DCr 3               
0009DCr 3  A1 00                        lda (0,x)
0009DEr 3  95 00                        sta 0,x
0009E0r 3  74 01                        stz 1,x         ; Ignore LSB
0009E2r 3               
0009E2r 3  60           z_c_fetch:      rts
0009E3r 3               
0009E3r 3               
0009E3r 3               ; ## C_STORE ( c addr -- ) "Store character at address given"
0009E3r 3               ; ## "c!"  auto  ANS core
0009E3r 3                       ; """https://forth-standard.org/standard/core/CStore"""
0009E3r 3               xt_c_store:
0009E3r 3  20 rr rr                     jsr underflow_2
0009E6r 3               
0009E6r 3  B5 02                        lda 2,x
0009E8r 3  81 00                        sta (0,x)
0009EAr 3               
0009EAr 3  E8                           inx
0009EBr 3  E8                           inx
0009ECr 3  E8                           inx
0009EDr 3  E8                           inx
0009EEr 3               
0009EEr 3  60           z_c_store:      rts
0009EFr 3               
0009EFr 3               
0009EFr 3               ; ## CASE (C: -- 0) ( -- ) "Conditional flow control"
0009EFr 3               ; ## "case"  auto  ANS core ext
0009EFr 3                       ; """http://forth-standard.org/standard/core/CASE
0009EFr 3                       ;
0009EFr 3                       ; This is a dummy header, CASE shares the actual code with ZERO.
0009EFr 3                       ; """
0009EFr 3               
0009EFr 3               
0009EFr 3               ; ## CELL_PLUS ( u -- u ) "Add cell size in bytes"
0009EFr 3               ; ## "cell+"  auto  ANS core
0009EFr 3                       ; """https://forth-standard.org/standard/core/CELLPlus
0009EFr 3                       ; Add the number of bytes ("address units") that one cell needs.
0009EFr 3                       ; Since this is an 8 bit machine with 16 bit cells, we add two bytes.
0009EFr 3                       ; """
0009EFr 3               
0009EFr 3               xt_cell_plus:
0009EFr 3  20 rr rr                     jsr underflow_1
0009F2r 3               
0009F2r 3  F6 00                        inc 0,x
0009F4r 3  D0 02                        bne @1
0009F6r 3  F6 01                        inc 1,x
0009F8r 3               @1:
0009F8r 3  F6 00                        inc 0,x
0009FAr 3  D0 02                        bne @done
0009FCr 3  F6 01                        inc 1,x
0009FEr 3               @done:
0009FEr 3  60           z_cell_plus:    rts
0009FFr 3               
0009FFr 3               
0009FFr 3               
0009FFr 3               ; ## CELLS ( u -- u ) "Convert cells to size in bytes"
0009FFr 3               ; ## "cells"  auto  ANS core
0009FFr 3                       ; """https://forth-standard.org/standard/core/CELLS
0009FFr 3                       ;
0009FFr 3                       ; Dummy entry for the CELLS word, the code is the same as for
0009FFr 3                       ; 2*, which is where the header directs us to
0009FFr 3                       ; """
0009FFr 3               
0009FFr 3               
0009FFr 3               ; ## CHAR ( "c" -- u ) "Convert character to ASCII value"
0009FFr 3               ; ## "char"  auto  ANS core
0009FFr 3                       ; """https://forth-standard.org/standard/core/CHAR"""
0009FFr 3               
0009FFr 3               xt_char:
0009FFr 3                               ; get character from string, returns ( addr u )
0009FFr 3  20 rr rr                     jsr xt_parse_name
000A02r 3               
000A02r 3                               ; if we got back a zero, we have a problem
000A02r 3  B5 00                        lda 0,x
000A04r 3  15 01                        ora 1,x
000A06r 3  D0 05                        bne @not_empty
000A08r 3               
000A08r 3  A9 05                        lda #err_noname
000A0Ar 3  4C rr rr                     jmp error
000A0Dr 3               
000A0Dr 3               @not_empty:
000A0Dr 3  E8                           inx             ; drop number of characters, leave addr
000A0Er 3  E8                           inx
000A0Fr 3  A1 00                        lda (0,x)       ; get character (equivalent to C@)
000A11r 3  95 00                        sta 0,x
000A13r 3  74 01                        stz 1,x         ; MSB is always zero
000A15r 3               
000A15r 3  60           z_char:         rts
000A16r 3               
000A16r 3               
000A16r 3               
000A16r 3               ; ## CHAR_PLUS ( addr -- addr+1 ) "Add the size of a character unit to address"
000A16r 3               ; ## "char+"  auto  ANS core
000A16r 3                       ; """https://forth-standard.org/standard/core/CHARPlus
000A16r 3                       ;
000A16r 3                       ; This is a dummy entry, the code is shared with ONE_PLUS
000A16r 3                       ; """
000A16r 3               
000A16r 3               
000A16r 3               ; ## CHARS ( n -- n ) "Number of bytes that n chars need"
000A16r 3               ; ## "chars"  auto  ANS core
000A16r 3                       ; """https://forth-standard.org/standard/core/CHARS
000A16r 3                       ; Return how many address units n chars are. Since this is an 8 bit
000A16r 3                       ; machine, this does absolutely nothing and is included for
000A16r 3                       ; compatibility with other Forth versions
000A16r 3                       ; """
000A16r 3               
000A16r 3               xt_chars:
000A16r 3                               ; Checking for underflow seems a bit stupid because this
000A16r 3                               ; routine does nothing on this machine. However, the user
000A16r 3                               ; should be warned that there is something wrong with the
000A16r 3                               ; code if this occurs.
000A16r 3  20 rr rr                     jsr underflow_1
000A19r 3               
000A19r 3  60           z_chars:        rts
000A1Ar 3               
000A1Ar 3               
000A1Ar 3               ; ## CLEAVE ( addr u -- addr2 u2 addr1 u1 ) "Split off word from string"
000A1Ar 3               ; ## "cleave"  auto  Tali Forth
000A1Ar 3               
000A1Ar 3                       ; """Given a range of memory with words delimited by whitespace,return
000A1Ar 3                       ; the first word at the top of the stack and the rest of the word
000A1Ar 3                       ; following it.
000A1Ar 3                       ;
000A1Ar 3                       ; Example:
000A1Ar 3                       ; s" w1 w2 w3" cleave  -> "w2 w3" "w1"
000A1Ar 3                       ; s" w1" cleave        -> "" "w1"
000A1Ar 3                       ;
000A1Ar 3                       ; Since it will be used in loops a lot, we want it to work in pure
000A1Ar 3                       ; assembler and be as fast as we can make it. Calls PARSE-NAME so we
000A1Ar 3                       ; strip leading delimiters.
000A1Ar 3                       ; """
000A1Ar 3               
000A1Ar 3               xt_cleave:
000A1Ar 3  20 rr rr                     jsr underflow_2
000A1Dr 3               
000A1Dr 3                               ; We arrive here with ( addr u ). We need to strip any leading
000A1Dr 3                               ; spaces by hand: PARSE-NAME does do that, but it doesn't
000A1Dr 3                               ; remember how many spaces were stripped. This means we can't
000A1Dr 3                               ; calculate the length of the remainder. Fortunately, Tali
000A1Dr 3                               ; Forth has just the word we need for this:
000A1Dr 3  20 rr rr                     jsr xt_minus_leading    ; -LEADING ( addr u )
000A20r 3               
000A20r 3                               ; The main part we can turn over to PARSE-NAME, except that we
000A20r 3                               ; have a string ( addr u ) and not stuff in the input buffer.
000A20r 3                               ; We get around this by cheating: We place ( addr u ) in the
000A20r 3                               ; input buffer and then call PARSE-NAME.
000A20r 3  20 rr rr                     jsr xt_input_to_r       ; save old imput state
000A23r 3               
000A23r 3  B5 00                        lda 0,x         ; u is new ciblen
000A25r 3  85 rr                        sta ciblen
000A27r 3  B5 01                        lda 1,x
000A29r 3  85 rr                        sta ciblen+1
000A2Br 3               
000A2Br 3  B5 02                        lda 2,x         ; addr is new cib
000A2Dr 3  85 rr                        sta cib
000A2Fr 3  B5 03                        lda 3,x
000A31r 3  85 rr                        sta cib+1
000A33r 3               
000A33r 3  64 rr                        stz toin        ; >IN pointer is zero
000A35r 3  64 rr                        stz toin+1
000A37r 3               
000A37r 3                               ; PARSE-NAME gives us back the substring of the first word
000A37r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u addr-s u-s )
000A3Ar 3               
000A3Ar 3                               ; If we were given an empty string, then we're done. It's the
000A3Ar 3                               ; resposibility of the user to catch this as a sign to end the
000A3Ar 3                               ; any loop
000A3Ar 3  B5 00                        lda 0,x
000A3Cr 3  15 01                        ora 1,x
000A3Er 3  F0 23                        beq @done
000A40r 3               
000A40r 3                               ; Now we have to adjust the original string
000A40r 3  B5 04                        lda 4,x         ; LSB of original u
000A42r 3  38                           sec
000A43r 3  F5 00                        sbc 0,x
000A45r 3  95 04                        sta 4,x
000A47r 3               
000A47r 3  B5 05                        lda 5,x         ; MSB of original u
000A49r 3  F5 01                        sbc 1,x
000A4Br 3  95 05                        sta 5,x
000A4Dr 3               
000A4Dr 3  B5 06                        lda 6,x         ; LSB of original addr
000A4Fr 3  18                           clc
000A50r 3  75 00                        adc 0,x
000A52r 3  95 06                        sta 6,x
000A54r 3               
000A54r 3  B5 07                        lda 7,x         ; MSB of original addr
000A56r 3  75 01                        adc 1,x
000A58r 3  95 07                        sta 7,x
000A5Ar 3               
000A5Ar 3                               ; There is one small problem: PARSE-NAME will probably have
000A5Ar 3                               ; left the string with the rest of the words with leading
000A5Ar 3                               ; delimiters. We use our magic -LEADING again
000A5Ar 3  20 rr rr                     jsr xt_two_swap         ; ( addr-s u-s addr u )
000A5Dr 3  20 rr rr                     jsr xt_minus_leading
000A60r 3  20 rr rr                     jsr xt_two_swap         ; ( addr u addr-s u-s )
000A63r 3               @done:
000A63r 3                               ; Restore input
000A63r 3  20 rr rr                     jsr xt_r_to_input
000A66r 3               
000A66r 3  60           z_cleave:       rts
000A67r 3               
000A67r 3               
000A67r 3               
000A67r 3               ; ## CMOVE ( addr1 addr2 u -- ) "Copy bytes going from low to high"
000A67r 3               ; ## "cmove"  auto  ANS string
000A67r 3                       ; """https://forth-standard.org/standard/string/CMOVE
000A67r 3                       ; Copy u bytes from addr1 to addr2, going low to high (addr2 is
000A67r 3                       ; larger than addr1). Based on code in Leventhal, Lance A.
000A67r 3                       ; "6502 Assembly Language Routines", p. 201, where it is called
000A67r 3                       ; "move left".
000A67r 3                       ;
000A67r 3                       ; There are no official tests for this word.
000A67r 3                       ; """
000A67r 3               
000A67r 3               xt_cmove:
000A67r 3  20 rr rr                     jsr underflow_3
000A6Ar 3               
000A6Ar 3                               ; move destination address to where we can work with it
000A6Ar 3  B5 02                        lda 2,x
000A6Cr 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000A6Er 3  B5 03                        lda 3,x
000A70r 3  85 rr                        sta tmp2+1
000A72r 3               
000A72r 3                               ; move source address to where we can work with it
000A72r 3  B5 04                        lda 4,x
000A74r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000A76r 3  B5 05                        lda 5,x
000A78r 3  85 rr                        sta tmp1+1
000A7Ar 3               
000A7Ar 3  A0 00                        ldy #0
000A7Cr 3  B5 01                        lda 1,x         ; number of whole pages to move
000A7Er 3  F0 0F                        beq @dopartial
000A80r 3               
000A80r 3               @page:
000A80r 3  B1 rr                        lda (tmp1),y
000A82r 3  91 rr                        sta (tmp2),y
000A84r 3  C8                           iny
000A85r 3  D0 F9                        bne @page
000A87r 3               
000A87r 3  E6 rr                        inc tmp1+1
000A89r 3  E6 rr                        inc tmp2+1
000A8Br 3  D6 01                        dec 1,x
000A8Dr 3  D0 F1                        bne @page
000A8Fr 3               
000A8Fr 3               @dopartial:
000A8Fr 3  B5 00                        lda 0,x         ; length of last page
000A91r 3  F0 09                        beq @done
000A93r 3               
000A93r 3               @partial:
000A93r 3  B1 rr                        lda (tmp1),y
000A95r 3  91 rr                        sta (tmp2),y
000A97r 3  C8                           iny
000A98r 3               
000A98r 3  D6 00                        dec 0,x
000A9Ar 3  D0 F7                        bne @partial
000A9Cr 3               
000A9Cr 3               @done:          ; clear the stack
000A9Cr 3  8A                           txa
000A9Dr 3  18                           clc
000A9Er 3  69 06                        adc #6
000AA0r 3  AA                           tax
000AA1r 3               
000AA1r 3  60           z_cmove:        rts
000AA2r 3               
000AA2r 3               
000AA2r 3               
000AA2r 3               ; ## CMOVE_UP ( add1 add2 u -- ) "Copy bytes from high to low"
000AA2r 3               ; ## "cmove>"  auto  ANS string
000AA2r 3                       ; """https://forth-standard.org/standard/string/CMOVEtop
000AA2r 3                       ; Based on code in Leventhal, Lance A. "6502 Assembly Language
000AA2r 3                       ; Routines", p. 201, where it is called "move right".
000AA2r 3                       ;
000AA2r 3                       ; There are no official tests for this word.
000AA2r 3                       ; """
000AA2r 3               
000AA2r 3               xt_cmove_up:
000AA2r 3  20 rr rr                     jsr underflow_3
000AA5r 3               
000AA5r 3                               ; Move destination address to where we can work with it
000AA5r 3  B5 02                        lda 2,x
000AA7r 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000AA9r 3  B5 03                        lda 3,x
000AABr 3  18                           clc
000AACr 3  75 01                        adc 1,x
000AAEr 3  85 rr                        sta tmp2+1      ; point to last page of destination
000AB0r 3               
000AB0r 3                               ; Move source address to where we can work with it
000AB0r 3  B5 04                        lda 4,x
000AB2r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000AB4r 3  B5 05                        lda 5,x
000AB6r 3  18                           clc
000AB7r 3  75 01                        adc 1,x
000AB9r 3  85 rr                        sta tmp1+1      ; point to last page of source
000ABBr 3  F6 01                        inc 1,x         ; allows us to use bne with dec 1,x below
000ABDr 3               
000ABDr 3                               ; Move the last partial page first
000ABDr 3  B4 00                        ldy 0,x         ; length of last page
000ABFr 3  F0 0E                        beq @nopartial
000AC1r 3               
000AC1r 3               @outerloop:
000AC1r 3  88                           dey
000AC2r 3  F0 07                        beq @finishpage
000AC4r 3               
000AC4r 3               @innerloop:
000AC4r 3  B1 rr                        lda (tmp1),y
000AC6r 3  91 rr                        sta (tmp2),y
000AC8r 3  88                           dey
000AC9r 3  D0 F9                        bne @innerloop
000ACBr 3               
000ACBr 3               @finishpage:
000ACBr 3  B2 rr                        lda (tmp1)      ; handle y = 0 separately
000ACDr 3  92 rr                        sta (tmp2)
000ACFr 3               
000ACFr 3               @nopartial:
000ACFr 3  C6 rr                        dec tmp1+1      ; back up to previous pages
000AD1r 3  C6 rr                        dec tmp2+1
000AD3r 3  D6 01                        dec 1,x
000AD5r 3  D0 EA                        bne @outerloop
000AD7r 3               @done:
000AD7r 3                               ; clear up the stack and leave
000AD7r 3  8A                           txa
000AD8r 3  18                           clc
000AD9r 3  69 06                        adc #6
000ADBr 3  AA                           tax
000ADCr 3               
000ADCr 3  60           z_cmove_up:     rts
000ADDr 3               
000ADDr 3               
000ADDr 3               
000ADDr 3               ; ## COLON ( "name" -- ) "Start compilation of a new word"
000ADDr 3               ; ## ":"  auto  ANS core
000ADDr 3                       ; """https://forth-standard.org/standard/core/Colon
000ADDr 3                       ;
000ADDr 3                       ; Use the CREATE routine and fill in the rest by hand.
000ADDr 3                       ; """
000ADDr 3               
000ADDr 3               xt_colon:
000ADDr 3                               ; If we're already in the compile state, complain
000ADDr 3                               ; and quit
000ADDr 3  A5 rr                        lda state
000ADFr 3  05 rr                        ora state+1
000AE1r 3  F0 05                        beq @1
000AE3r 3               
000AE3r 3  A9 07                        lda #err_state
000AE5r 3  4C rr rr                     jmp error
000AE8r 3               @1:
000AE8r 3                               ; switch to compile state
000AE8r 3  C6 rr                        dec state
000AEAr 3  C6 rr                        dec state+1
000AECr 3               
000AECr 3                               ; Set bit 6 in status to tell ";" and RECURSE this is a normal
000AECr 3                               ; word
000AECr 3  A9 40                        lda #%01000000
000AEEr 3  04 rr                        tsb status
000AF0r 3               
000AF0r 3                               ; CREATE is going to change the DP to point to the new word's
000AF0r 3                               ; header. While this is fine for (say) variables, it would mean
000AF0r 3                               ; that FIND-NAME etc would find a half-finished word when
000AF0r 3                               ; looking in the Dictionary. To prevent this, we save the old
000AF0r 3                               ; version of DP and restore it later. The new DP is placed in
000AF0r 3                               ; the variable WORKWORD until we're finished with a SEMICOLON.
000AF0r 3  20 rr rr                     jsr current_to_dp
000AF3r 3  A5 rr                        lda dp+1            ; CREATE uses a lot of variables
000AF5r 3  48                           pha
000AF6r 3  A5 rr                        lda dp
000AF8r 3  48                           pha
000AF9r 3               
000AF9r 3                               ; Tell create not to print warning for duplicate name.
000AF9r 3  A9 80                        lda #%10000000
000AFBr 3  04 rr                        tsb status
000AFDr 3               
000AFDr 3  20 rr rr                     jsr xt_create
000B00r 3               
000B00r 3                               ; Get the nt (not the xt!) of the new word as described above.
000B00r 3                               ; Only COLON, SEMICOLON and RECURSE get to access WORKWORD
000B00r 3  20 rr rr                     jsr current_to_dp   ; This might be able to be omitted
000B03r 3  A5 rr                        lda dp
000B05r 3  85 rr                        sta workword
000B07r 3  A5 rr                        lda dp+1
000B09r 3  85 rr                        sta workword+1
000B0Br 3               
000B0Br 3                               ; Restore original DP
000B0Br 3  68                           pla
000B0Cr 3  85 rr                        sta dp
000B0Er 3  68                           pla
000B0Fr 3  85 rr                        sta dp+1
000B11r 3  20 rr rr                     jsr dp_to_current
000B14r 3               
000B14r 3                               ; CREATE includes a subroutine jump to DOVAR by default. We
000B14r 3                               ; back up three bytes and overwrite that.
000B14r 3  A5 rr                        lda cp
000B16r 3  38                           sec
000B17r 3  E9 03                        sbc #3
000B19r 3  85 rr                        sta cp
000B1Br 3  B0 02                        bcs @done
000B1Dr 3  C6 rr                        dec cp+1
000B1Fr 3               @done:
000B1Fr 3  60           z_colon:        rts
000B20r 3               
000B20r 3               
000B20r 3               ; ## COLON_NONAME ( -- ) "Start compilation of a new word""
000B20r 3               ; ## ":NONAME"  auto  ANS core
000B20r 3                       ; """https://forth-standard.org/standard/core/ColonNONAME
000B20r 3                       ; Compile a word with no nt.  ";" will put its xt on the stack.
000B20r 3                       ; """
000B20r 3               
000B20r 3               xt_colon_noname:
000B20r 3                               ; If we're already in the compile state, complain
000B20r 3                               ; and quit
000B20r 3  A5 rr                        lda state
000B22r 3  05 rr                        ora state+1
000B24r 3  F0 05                        beq @1
000B26r 3               
000B26r 3  A9 07                        lda #err_state
000B28r 3  4C rr rr                     jmp error
000B2Br 3               @1:
000B2Br 3                               ; switch to compile state
000B2Br 3  C6 rr                        dec state
000B2Dr 3  C6 rr                        dec state+1
000B2Fr 3               
000B2Fr 3                               ; Clear bit 6 in status to tell ";" and RECURSE this is
000B2Fr 3                               ; a :NONAME word.
000B2Fr 3  A9 40                        lda #%01000000
000B31r 3  14 rr                        trb status
000B33r 3               
000B33r 3                               ; Put cp (the xt for this word) in WORKWORD. The flag above
000B33r 3                               ; lets both ";" and RECURSE know that is is an xt instead of an
000B33r 3                               ; nt and they will modify their behavior.
000B33r 3  A5 rr                        lda cp
000B35r 3  85 rr                        sta workword
000B37r 3  A5 rr                        lda cp+1
000B39r 3  85 rr                        sta workword+1
000B3Br 3               @done:
000B3Br 3  60           z_colon_noname:        rts
000B3Cr 3               
000B3Cr 3               
000B3Cr 3               
000B3Cr 3               ; ## COMMA ( n -- ) "Allot and store one cell in memory"
000B3Cr 3               ; ## ","  auto  ANS core
000B3Cr 3                       ; """https://forth-standard.org/standard/core/Comma
000B3Cr 3                       ; Store TOS at current place in memory.
000B3Cr 3                       ;
000B3Cr 3                       ; Since this an eight-bit machine, we can ignore all alignment issues.
000B3Cr 3                       ; """
000B3Cr 3               
000B3Cr 3               xt_comma:
000B3Cr 3  20 rr rr                     jsr underflow_1
000B3Fr 3               
000B3Fr 3  B5 00                        lda 0,x
000B41r 3  92 rr                        sta (cp)
000B43r 3               
000B43r 3  E6 rr                        inc cp
000B45r 3  D0 02                        bne @1
000B47r 3  E6 rr                        inc cp+1
000B49r 3               @1:
000B49r 3  B5 01                        lda 1,x
000B4Br 3  92 rr                        sta (cp)
000B4Dr 3               
000B4Dr 3  E6 rr                        inc cp
000B4Fr 3  D0 02                        bne @done
000B51r 3  E6 rr                        inc cp+1
000B53r 3               @done:
000B53r 3  E8                           inx
000B54r 3  E8                           inx
000B55r 3               
000B55r 3  60           z_comma:        rts
000B56r 3               
000B56r 3               
000B56r 3               
000B56r 3               ; ## COMPARE ( addr1 u1 addr2 u2 -- -1 | 0 | 1) "Compare two strings"
000B56r 3               ; ## "compare"   auto  ANS string
000B56r 3                       ; """https://forth-standard.org/standard/string/COMPARE
000B56r 3                       ; Compare string1 (denoted by addr1 u1) to string2 (denoted by
000B56r 3                       ; addr2 u2).  Return -1 if string1 < string2, 0 if string1 = string2
000B56r 3                       ; and 1 if string1 > string2 (ASCIIbetical comparison).  A string
000B56r 3                       ; that entirely matches the beginning of the other string, but is
000B56r 3                       ; shorter, is considered less than the longer string.
000B56r 3                       ; """
000B56r 3               
000B56r 3               xt_compare:
000B56r 3  20 rr rr                     jsr underflow_4
000B59r 3               
000B59r 3                               ; Load the two string addresses into tmp1 and tmp2.
000B59r 3  B5 02                        lda 2,x
000B5Br 3  85 rr                        sta tmp2
000B5Dr 3  B5 03                        lda 3,x
000B5Fr 3  85 rr                        sta tmp2+1
000B61r 3  B5 06                        lda 6,x
000B63r 3  85 rr                        sta tmp1
000B65r 3  B5 07                        lda 7,x
000B67r 3  85 rr                        sta tmp1+1
000B69r 3                               ; The counts will be used in-place on the stack.
000B69r 3               
000B69r 3               @compare_loop:
000B69r 3                               ; Check to see if we are out of letters.
000B69r 3               
000B69r 3                               ; Check string1
000B69r 3  B5 04                        lda 4,x
000B6Br 3  15 05                        ora 5,x
000B6Dr 3  F0 2C                        beq @str1_done
000B6Fr 3               
000B6Fr 3                               ; Check string2
000B6Fr 3  B5 00                        lda 0,x
000B71r 3  15 01                        ora 1,x
000B73r 3  F0 3A                        beq @greater    ; Str2 empty first
000B75r 3               
000B75r 3               @check_letter:
000B75r 3                               ; Both strings have at least one letter left.
000B75r 3                               ; Check the letters against each other.
000B75r 3  B2 rr                        lda (tmp1)
000B77r 3  D2 rr                        cmp (tmp2)
000B79r 3  90 26                        bcc @less
000B7Br 3  D0 32                        bne @greater
000B7Dr 3               @next_letter:
000B7Dr 3                               ; Move both tmp pointers and decrement the counts
000B7Dr 3                               ; on the stack.
000B7Dr 3                               ; Increment tmp1
000B7Dr 3  E6 rr                        inc tmp1
000B7Fr 3  D0 02                        bne @1
000B81r 3  E6 rr                        inc tmp1+1
000B83r 3               @1:
000B83r 3                               ; Increment tmp2
000B83r 3  E6 rr                        inc tmp2
000B85r 3  D0 02                        bne @2
000B87r 3  E6 rr                        inc tmp2+1
000B89r 3               @2:
000B89r 3                               ; Decrement count1 on the stack.
000B89r 3  B5 04                        lda 4,x
000B8Br 3  D0 02                        bne @3
000B8Dr 3  D6 05                        dec 5,x
000B8Fr 3               @3:
000B8Fr 3  D6 04                        dec 4,x
000B91r 3               
000B91r 3                               ; Decrement count2 on the stack.
000B91r 3  B5 00                        lda 0,x
000B93r 3  D0 02                        bne @4
000B95r 3  D6 01                        dec 1,x
000B97r 3               @4:
000B97r 3  D6 00                        dec 0,x
000B99r 3               
000B99r 3                               ; Loop around and check again.
000B99r 3  80 CE                        bra @compare_loop
000B9Br 3               
000B9Br 3               @str1_done:
000B9Br 3                               ; String 1 is out of letters. Check string 2.
000B9Br 3  B5 00                        lda 0,x
000B9Dr 3  15 01                        ora 1,x
000B9Fr 3  F0 08                        beq @equal      ; Both out of letters
000BA1r 3               
000BA1r 3                               ; Falls into less (str1 is out but str2 has more)
000BA1r 3               @less:
000BA1r 3                               ; Return -1
000BA1r 3  A9 FF                        lda #$FF
000BA3r 3  95 06                        sta 6,x
000BA5r 3  95 07                        sta 7,x
000BA7r 3  80 0C                        bra @done
000BA9r 3               @equal:
000BA9r 3                               ; Return 0
000BA9r 3  74 06                        stz 6,x
000BABr 3  74 07                        stz 7,x
000BADr 3  80 06                        bra @done
000BAFr 3               @greater:
000BAFr 3                               ; Return 1
000BAFr 3  A9 01                        lda #1
000BB1r 3  95 06                        sta 6,x
000BB3r 3  74 07                        stz 7,x
000BB5r 3                               ; Falls into @done
000BB5r 3               @done:
000BB5r 3                               ; Remove all but the result from the stack.
000BB5r 3  8A                           txa
000BB6r 3  18                           clc
000BB7r 3  69 06                        adc #6
000BB9r 3  AA                           tax
000BBAr 3               
000BBAr 3  60           z_compare:      rts
000BBBr 3               
000BBBr 3               
000BBBr 3               
000BBBr 3               ; ## COMPILE_COMMA ( xt -- ) "Compile xt"
000BBBr 3               ; ## "compile,"  auto  ANS core ext
000BBBr 3                       ; """https://forth-standard.org/standard/core/COMPILEComma
000BBBr 3                       ; Compile the given xt in the current word definition. It is an
000BBBr 3                       ; error if we are not in the compile state. Because we are using
000BBBr 3                       ; subroutine threading, we can't use , (COMMA) to compile new words
000BBBr 3                       ; the traditional way. By default, native compiled is allowed, unless
000BBBr 3                       ; there is a NN (Never Native) flag associated. If not, we use the
000BBBr 3                       ; value NC_LIMIT (from definitions.tasm) to decide if the code
000BBBr 3                       ; is too large to be natively coded: If the size is larger than
000BBBr 3                       ; NC_LIMIT, we silently use subroutine coding. If the AN (Always
000BBBr 3                       ; Native) flag is set, the word is always natively compiled.
000BBBr 3                       ; """
000BBBr 3               
000BBBr 3               xt_compile_comma:
000BBBr 3  20 rr rr                     jsr underflow_1
000BBEr 3               
000BBEr 3                               ; See if this is an Always Native (AN) word by checking the
000BBEr 3                               ; AN flag. We need nt for this. First, save a copy of xt to
000BBEr 3                               ; the Return Stack
000BBEr 3  B5 01                        lda 1,x                 ; MSB
000BC0r 3  48                           pha
000BC1r 3  B5 00                        lda 0,x
000BC3r 3  48                           pha                     ; LSB
000BC4r 3               
000BC4r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt -- nt )
000BC7r 3               
000BC7r 3                               ; See if this xt even has an nt.
000BC7r 3  B5 00                        lda 0,x
000BC9r 3  15 01                        ora 1,x
000BCBr 3  D0 03                        bne @check_nt
000BCDr 3               
000BCDr 3                               ; No nt in dictionary. Just compile as a JSR.
000BCDr 3  4C rr rr                     jmp @compile_as_jump
000BD0r 3               
000BD0r 3               @check_nt:
000BD0r 3                               ; put nt away for safe keeping
000BD0r 3  B5 00                        lda 0,x
000BD2r 3  85 rr                        sta tmptos
000BD4r 3  B5 01                        lda 1,x
000BD6r 3  85 rr                        sta tmptos+1
000BD8r 3               
000BD8r 3                               ; status byte is one further down
000BD8r 3  F6 00                        inc 0,x
000BDAr 3  D0 02                        bne @1
000BDCr 3  F6 01                        inc 1,x                 ; ( nt -- nt+1 )
000BDEr 3               @1:
000BDEr 3  A1 00                        lda (0,x)
000BE0r 3  85 rr                        sta tmp3                ; keep copy of status byte for NN
000BE2r 3  29 02                        and #AN                 ; mask all but Always Native (AN) bit
000BE4r 3  F0 0D                        beq @compile_check
000BE6r 3               
000BE6r 3                               ; We're natively compiling no matter what. Get length and
000BE6r 3                               ; compile in code. Get the original nt back
000BE6r 3  A5 rr                        lda tmptos
000BE8r 3  95 00                        sta 0,x
000BEAr 3  A5 rr                        lda tmptos+1
000BECr 3  95 01                        sta 1,x
000BEEr 3               
000BEEr 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000BF1r 3               
000BF1r 3  80 27                        bra @compile_as_code
000BF3r 3               
000BF3r 3               @compile_check:
000BF3r 3                               ; See if Native Compile is even alowed by checking the NN
000BF3r 3                               ; flag
000BF3r 3  A5 rr                        lda tmp3
000BF5r 3  29 08                        and #NN
000BF7r 3  F0 03                        beq @check_size_limit
000BF9r 3               
000BF9r 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000BFCr 3               
000BFCr 3               @check_size_limit:
000BFCr 3                               ; Native compile is a legal option, but we need to see what
000BFCr 3                               ; limit the user set for size (in nc_limit)
000BFCr 3  A5 rr                        lda tmptos
000BFEr 3  95 00                        sta 0,x
000C00r 3  A5 rr                        lda tmptos+1
000C02r 3  95 01                        sta 1,x
000C04r 3               
000C04r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000C07r 3               
000C07r 3                               ; Check the wordsize MSB against the user-defined limit.
000C07r 3  B5 01                        lda 1,x
000C09r 3  C5 rr                        cmp nc_limit+1
000C0Br 3  90 0D                        bcc @compile_as_code    ; user-defined limit MSB
000C0Dr 3  D0 08                        bne @jumpto_compile_as_jump
000C0Fr 3               
000C0Fr 3                               ; Check the wordsize LSB against the user-defined limit.
000C0Fr 3  B5 00                        lda 0,x
000C11r 3  C5 rr                        cmp nc_limit            ; user-defined limit LSB
000C13r 3  90 05                        bcc @compile_as_code    ; Allow native compiling for less
000C15r 3  F0 03                        beq @compile_as_code    ; than or equal to the limit.
000C17r 3               
000C17r 3               @jumpto_compile_as_jump:
000C17r 3                               ; If the wordsize is greater than the user-defined
000C17r 3                               ; limit, it will be compiled as a subroutine jump.
000C17r 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000C1Ar 3               
000C1Ar 3               @compile_as_code:
000C1Ar 3                               ; We arrive here with the length of the word's code TOS and
000C1Ar 3                               ; xt on top of the Return Stack. MOVE will need ( xt cp u )
000C1Ar 3                               ; on the data stack
000C1Ar 3  CA                           dex
000C1Br 3  CA                           dex                     ; ( -- u ? )
000C1Cr 3  CA                           dex
000C1Dr 3  CA                           dex                     ; ( -- u ? ? )
000C1Er 3               
000C1Er 3  B5 04                        lda 4,x
000C20r 3  95 00                        sta 0,x                 ; LSB of u
000C22r 3  B5 05                        lda 5,x
000C24r 3  95 01                        sta 1,x                 ; ( -- u ? u )
000C26r 3               
000C26r 3  68                           pla
000C27r 3  95 04                        sta 4,x                 ; LSB of xt
000C29r 3  68                           pla
000C2Ar 3  95 05                        sta 5,x                 ; ( -- xt ? u )
000C2Cr 3               
000C2Cr 3  A5 rr                        lda cp                  ; LSB of cp
000C2Er 3  95 02                        sta 2,x
000C30r 3  A5 rr                        lda cp+1
000C32r 3  95 03                        sta 3,x                 ; ( -- xt cp u )
000C34r 3               
000C34r 3                               ; --- SPECIAL CASE 1: PREVENT RETURN STACK THRASHINIG ---
000C34r 3               
000C34r 3                               ; Native compiling allows us to strip the stack antics off
000C34r 3                               ; a number of words that use the Return Stack such as >R, R>,
000C34r 3                               ; 2>R and 2R> (but not 2R@ in this version). We compare the
000C34r 3                               ; xt with the contents of the table
000C34r 3  A0 00                        ldy #0
000C36r 3               
000C36r 3               @strip_loop:
000C36r 3  B9 rr rr                     lda @strip_table,y      ; LSB of first word
000C39r 3  D5 04                        cmp 4,x                 ; LSB of xt
000C3Br 3  D0 07                        bne @next_entry
000C3Dr 3               
000C3Dr 3                               ; LSB is the same, test MSB
000C3Dr 3  B9 rr rr                     lda @strip_table+1,y
000C40r 3  D5 05                        cmp 5,x
000C42r 3  F0 0C                        beq @found_entry
000C44r 3               
000C44r 3                               ; MSB is not equal. Pretend though that we've come from LSB
000C44r 3                               ; so we can use the next step for both cases
000C44r 3               @next_entry:
000C44r 3                               ; Not a word that needs stripping, so check next entry in table
000C44r 3                               ; Let's see if we're done with the table (marked by zero entry)
000C44r 3  B9 rr rr                     lda @strip_table,y      ; pointing to LSB
000C47r 3  19 rr rr                     ora @strip_table+1,y    ; get MSB
000C4Ar 3  F0 22                        beq @underflow_strip    ; table done, let's get out of here
000C4Cr 3               
000C4Cr 3  C8                           iny
000C4Dr 3  C8                           iny
000C4Er 3  80 E6                        bra @strip_loop
000C50r 3               @found_entry:
000C50r 3                               ; This word is one of the ones that needs to have its size
000C50r 3                               ; adjusted during native compile. We find the values in the
000C50r 3                               ; next table with the same index, which is Y. However, Y is
000C50r 3                               ; pointing to the MSB, so we need to go back to the LSB and
000C50r 3                               ; halve the index before we can use it.
000C50r 3  98                           tya
000C51r 3  4A                           lsr
000C52r 3  A8                           tay
000C53r 3               
000C53r 3                               ; Get the adjustment out of the size table. We were clever
000C53r 3                               ; enough to make sure the cut on both ends of the code is
000C53r 3                               ; is the same size.
000C53r 3  B9 rr rr                     lda @strip_size,y
000C56r 3  85 rr                        sta tmptos              ; save a copy
000C58r 3               
000C58r 3                               ; Adjust xt: Start later
000C58r 3  18                           clc
000C59r 3  75 04                        adc 4,x
000C5Br 3  95 04                        sta 4,x
000C5Dr 3  90 02                        bcc @2
000C5Fr 3  F6 05                        inc 5,x                 ; we just care about the carry
000C61r 3               @2:
000C61r 3               
000C61r 3                               ; Adjust u: Quit earlier. Since we cut off the top and the
000C61r 3                               ; bottom of the code, we have to double the value
000C61r 3  06 rr                        asl tmptos
000C63r 3               
000C63r 3  38                           sec
000C64r 3  B5 00                        lda 0,x
000C66r 3  E5 rr                        sbc tmptos
000C68r 3  95 00                        sta 0,x
000C6Ar 3  B0 02                        bcs @3
000C6Cr 3  D6 01                        dec 1,x                 ; we just care about the borrow
000C6Er 3               @3:
000C6Er 3                               ; drop through to underflow check stripping
000C6Er 3               
000C6Er 3               @underflow_strip:
000C6Er 3                               ; --- SPECIAL CASE 2: REMOVE UNDERFLOW CHECKING ---
000C6Er 3               
000C6Er 3                               ; The user can choose to remove the unterflow testing in those
000C6Er 3                               ; words that have the UF flag. This shortens the word by
000C6Er 3                               ; 3 bytes if there is no underflow.
000C6Er 3               
000C6Er 3                               ; See if the user wants underflow stripping turned on
000C6Er 3  A5 rr                        lda uf_strip
000C70r 3  05 rr                        ora uf_strip+1
000C72r 3  F0 1C                        beq @specials_done
000C74r 3               
000C74r 3                               ; See if this word even contains underflow checking
000C74r 3  A5 rr                        lda tmp3
000C76r 3  29 10                        and #UF
000C78r 3  F0 16                        beq @specials_done
000C7Ar 3               
000C7Ar 3                               ; If we arrived here, underflow has to go. It's always 3 bytes
000C7Ar 3                               ; long. Note hat PICK is a special case.
000C7Ar 3               
000C7Ar 3                               ; Adjust xt: Start later
000C7Ar 3  18                           clc
000C7Br 3  B5 04                        lda 4,x
000C7Dr 3  69 03                        adc #3
000C7Fr 3  95 04                        sta 4,x
000C81r 3  90 02                        bcc @4
000C83r 3  F6 05                        inc 5,x                  ; we just care about the carry
000C85r 3               @4:
000C85r 3                               ; Adjust u: End earlier
000C85r 3  38                           sec
000C86r 3  B5 00                        lda 0,x
000C88r 3  E9 03                        sbc #3
000C8Ar 3  95 00                        sta 0,x
000C8Cr 3  B0 02                        bcs @5
000C8Er 3  D6 01                        dec 1,x                  ; we just care about the borrow
000C90r 3               @5:
000C90r 3               
000C90r 3                               ; --- END OF SPECIAL CASES ---
000C90r 3               @specials_done:
000C90r 3                               ; Store size of area to be copied for calculation of
000C90r 3                               ; new CP. We have to do this after all of the special cases
000C90r 3                               ; because they might change the size
000C90r 3  B5 01                        lda 1,x                 ; MSB
000C92r 3  48                           pha
000C93r 3  B5 00                        lda 0,x                 ; LSB
000C95r 3  48                           pha
000C96r 3               
000C96r 3                               ; Enough of this, let's move those bytes already! We have
000C96r 3                               ; ( xt cp u ) on the stack at this point
000C96r 3  20 rr rr                     jsr xt_move
000C99r 3               
000C99r 3                               ; Update CP
000C99r 3  18                           clc
000C9Ar 3  68                           pla                     ; LSB
000C9Br 3  65 rr                        adc cp
000C9Dr 3  85 rr                        sta cp
000C9Fr 3               
000C9Fr 3  68                           pla                     ; MSB
000CA0r 3  65 rr                        adc cp+1
000CA2r 3  85 rr                        sta cp+1
000CA4r 3               
000CA4r 3  80 2C                        bra @done
000CA6r 3               
000CA6r 3               @strip_table:
000CA6r 3                              ; List of words we strip the Return Stack antics from
000CA6r 3                              ; during native compile, zero terminated. The index here
000CA6r 3                              ; must be the same as for the sizes
000CA6r 3  rr rr rr rr                  .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
000CAAr 3  rr rr        
000CACr 3  rr rr rr rr                  .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
000CB0r 3  00 00        
000CB2r 3               
000CB2r 3               @strip_size:
000CB2r 3                               ; List of bytes to be stripped from the words that get their
000CB2r 3                               ; Return Stack antics removed during native compile. Index must
000CB2r 3                               ; be the same as for the xts. Zero terminated.
000CB2r 3  04 04 04 06                  .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
000CB6r 3  06 00        
000CB8r 3               
000CB8r 3               @compile_as_jump:
000CB8r 3                               ; Compile xt as a subroutine jump
000CB8r 3  A9 20                        lda #$20
000CBAr 3  92 rr                        sta (cp)
000CBCr 3               
000CBCr 3  A0 01                        ldy #1
000CBEr 3  68                           pla             ; LSB
000CBFr 3  91 rr                        sta (cp),y
000CC1r 3  C8                           iny
000CC2r 3  68                           pla             ; MSB
000CC3r 3  91 rr                        sta (cp),y
000CC5r 3               
000CC5r 3                               ; allot space we just used
000CC5r 3  A9 03                        lda #3
000CC7r 3  18                           clc
000CC8r 3  65 rr                        adc cp
000CCAr 3  85 rr                        sta cp
000CCCr 3  90 02                        bcc @6
000CCEr 3  E6 rr                        inc cp+1
000CD0r 3               @6:
000CD0r 3  E8                           inx             ; drop xt
000CD1r 3  E8                           inx
000CD2r 3               @done:
000CD2r 3               z_compile_comma:
000CD2r 3  60                           rts
000CD3r 3               
000CD3r 3               
000CD3r 3               
000CD3r 3               ; ## COMPILE_ONLY ( -- ) "Mark most recent word as COMPILE-ONLY"
000CD3r 3               ; ## "compile-only"  tested  Tali Forth
000CD3r 3                       ; """Set the Compile Only flag (CO) of the most recently defined
000CD3r 3                       ; word.
000CD3r 3                       ;
000CD3r 3                       ; The alternative way to do this is to define a word
000CD3r 3                       ; ?COMPILE that makes sure  we're in compile mode
000CD3r 3                       ; """
000CD3r 3               
000CD3r 3               xt_compile_only:
000CD3r 3  20 rr rr                     jsr current_to_dp
000CD6r 3  A0 01                        ldy #1          ; offset for status byte
000CD8r 3  B1 rr                        lda (dp),y
000CDAr 3  09 01                        ora #CO        ; make sure bit 7 is set
000CDCr 3  91 rr                        sta (dp),y
000CDEr 3               
000CDEr 3  60           z_compile_only: rts
000CDFr 3               
000CDFr 3               
000CDFr 3               
000CDFr 3               ; ## CONSTANT ( n "name" -- ) "Define a constant"
000CDFr 3               ; ## "constant"  auto  ANS core
000CDFr 3                       ; """https://forth-standard.org/standard/core/CONSTANT
000CDFr 3                       ;
000CDFr 3                       ; Forth equivalent is  CREATE , DOES> @  but we do
000CDFr 3                       ; more in assembler and let CREATE do the heavy lifting.
000CDFr 3                       ; See http://www.bradrodriguez.com/papers/moving3.htm for
000CDFr 3                       ; a primer on how this works in various Forths. This is the
000CDFr 3                       ; same code as VALUE in our case.
000CDFr 3                       ; """
000CDFr 3               xt_value:
000CDFr 3               xt_constant:
000CDFr 3  20 rr rr                     jsr underflow_1
000CE2r 3               
000CE2r 3  20 rr rr                     jsr xt_create
000CE5r 3               
000CE5r 3                           	; CREATE by default installs a subroutine jump to DOVAR,
000CE5r 3                               ; but we want DOCONST for constants. Go back two bytes and
000CE5r 3                               ; replace the subroutine jump target
000CE5r 3  38                           sec
000CE6r 3  A5 rr                        lda cp
000CE8r 3  E9 02                        sbc #2
000CEAr 3  85 rr                        sta tmp1
000CECr 3  A5 rr                        lda cp+1
000CEEr 3  E9 00                        sbc #0
000CF0r 3  85 rr                        sta tmp1+1
000CF2r 3               
000CF2r 3  A9 rr                        lda #<doconst           ; LSB of DOCONST
000CF4r 3  92 rr                        sta (tmp1)
000CF6r 3  A0 01                        ldy #1
000CF8r 3  A9 rr                        lda #>doconst           ; MSB of DOCONST
000CFAr 3  91 rr                        sta (tmp1),y
000CFCr 3               
000CFCr 3                               ; Now we save the constant number itself in the next cell
000CFCr 3  20 rr rr                     jsr xt_comma            ; drop through to adjust_z
000CFFr 3               
000CFFr 3               adjust_z:
000CFFr 3                               ; Now the length of the complete word (z_word) has increased by
000CFFr 3                               ; two. We need to update that number or else words such as SEE
000CFFr 3                               ; will ignore the PFA. We use this same routine for VARIABLE,
000CFFr 3                               ; VALUE and DEFER
000CFFr 3  20 rr rr                     jsr xt_latestnt         ; gives us ( -- nt )
000D02r 3               
000D02r 3                               ; z_word is six bytes further down
000D02r 3  B5 00                        lda 0,x
000D04r 3  85 rr                        sta tmp1
000D06r 3  B5 01                        lda 1,x
000D08r 3  85 rr                        sta tmp1+1
000D0Ar 3               
000D0Ar 3  A0 06                        ldy #6
000D0Cr 3  B1 rr                        lda (tmp1),y
000D0Er 3  18                           clc
000D0Fr 3  69 02                        adc #2
000D11r 3  91 rr                        sta (tmp1),y
000D13r 3  C8                           iny
000D14r 3  B1 rr                        lda (tmp1),y
000D16r 3  69 00                        adc #0                  ; only need carry
000D18r 3  91 rr                        sta (tmp1),y
000D1Ar 3               
000D1Ar 3  E8                           inx
000D1Br 3  E8                           inx
000D1Cr 3               
000D1Cr 3               z_value:
000D1Cr 3  60           z_constant:     rts
000D1Dr 3               
000D1Dr 3               
000D1Dr 3               ; ## COUNT ( c-addr -- addr u ) "Convert character string to normal format"
000D1Dr 3               ; ## "count"  auto  ANS core
000D1Dr 3                       ; """https://forth-standard.org/standard/core/COUNT
000D1Dr 3                       ; Convert old-style character string to address-length pair. Note
000D1Dr 3                       ; that the length of the string c-addr is stored in character length
000D1Dr 3                       ; (8 bit), not cell length (16 bit). This is rarely used these days,
000D1Dr 3                       ; though COUNT can also be used to step through a string character by
000D1Dr 3                       ; character.
000D1Dr 3                       ; """
000D1Dr 3               xt_count:
000D1Dr 3  20 rr rr                     jsr underflow_1
000D20r 3               
000D20r 3  A1 00                        lda (0,x)       ; Get number of characters (255 max)
000D22r 3  A8                           tay
000D23r 3               
000D23r 3                               ; move start address up by one
000D23r 3  F6 00                        inc 0,x         ; LSB
000D25r 3  D0 02                        bne @1
000D27r 3  F6 01                        inc 1,x         ; MSB
000D29r 3               
000D29r 3                               ; save number of characters to stack
000D29r 3               @1:
000D29r 3  98                           tya
000D2Ar 3  CA                           dex
000D2Br 3  CA                           dex
000D2Cr 3  95 00                        sta 0,x         ; LSB
000D2Er 3  74 01                        stz 1,x         ; MSB, always zero
000D30r 3               
000D30r 3  60           z_count:        rts
000D31r 3               
000D31r 3               
000D31r 3               ; ## CR ( -- ) "Print a line feed"
000D31r 3               ; ## "cr"  auto  ANS core
000D31r 3                       ; """https://forth-standard.org/standard/core/CR"""
000D31r 3               xt_cr:
000D31r 3  A9 0A                        lda #AscLF
000D33r 3  20 rr rr                     jsr emit_a
000D36r 3  60           z_cr:           rts
000D37r 3               
000D37r 3               
000D37r 3               ; ## CREATE ( "name" -- ) "Create Dictionary entry for 'name'"
000D37r 3               ; ## "create"  auto  ANS core
000D37r 3                       ; """https://forth-standard.org/standard/core/CREATE
000D37r 3                       ;
000D37r 3                       ; See the drawing in headers.asm for details on the header
000D37r 3                       ; """
000D37r 3               
000D37r 3               xt_create:
000D37r 3                               ; get string
000D37r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
000D3Ar 3               
000D3Ar 3                               ; if we were given an empty string, we complain and quit
000D3Ar 3  B5 00                        lda 0,x
000D3Cr 3  15 01                        ora 1,x
000D3Er 3  D0 05                        bne @got_name
000D40r 3               
000D40r 3  A9 05                        lda #err_noname
000D42r 3  4C rr rr                     jmp error
000D45r 3               
000D45r 3               @got_name:
000D45r 3                               ; Enforce maximal length of string by overwriting the MSB of
000D45r 3                               ; the length. There is a possible error here: If the string
000D45r 3                               ; is exactly 255 chars long, then a lot of the following
000D45r 3                               ; additions will fail because of wrapping
000D45r 3  74 01                        stz 1,x
000D47r 3               
000D47r 3                               ; Check to see if this name already exists.
000D47r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u )
000D4Ar 3  20 rr rr                     jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
000D4Dr 3               
000D4Dr 3  B5 00                        lda 0,x
000D4Fr 3  15 01                        ora 1,x
000D51r 3  F0 1E                        beq @new_name           ; We haven't seen this one before.
000D53r 3               
000D53r 3                               ; This name already exists.  See if we are supposed to print
000D53r 3                               ; the message for it.
000D53r 3  E8                           inx                     ; Drop flag (nt) from find-name.
000D54r 3  E8                           inx
000D55r 3               
000D55r 3                               ; Check bit 7
000D55r 3  24 rr                        bit status
000D57r 3  10 08                        bpl @redefined_name     ; Bit 7 is zero, so print the message.
000D59r 3               
000D59r 3                               ; We aren't supposed to print the redefined message ourselves,
000D59r 3                               ; but we should indicate that it is redefined (for ; to print
000D59r 3                               ; later).
000D59r 3  A9 80                        lda #$80                ; Set bit 7 to indicate dup
000D5Br 3  05 rr                        ora status
000D5Dr 3  85 rr                        sta status
000D5Fr 3  80 18                        bra @process_name
000D61r 3               
000D61r 3               @redefined_name:
000D61r 3                               ; Print the message that the name is redefined.
000D61r 3  A9 02                        lda #str_redefined
000D63r 3  20 rr rr                     jsr print_string_no_lf
000D66r 3               
000D66r 3  20 rr rr                     jsr xt_two_dup           ; ( addr u addr u )
000D69r 3  20 rr rr                     jsr xt_type
000D6Cr 3  20 rr rr                     jsr xt_space
000D6Fr 3               
000D6Fr 3  80 08                        bra @process_name
000D71r 3               
000D71r 3               @new_name:
000D71r 3  E8                           inx                     ; Drop flag (0) from find-name.
000D72r 3  E8                           inx
000D73r 3  A9 7F                        lda #$7F                ; Clear bit 0 of status to indicate new word.
000D75r 3  25 rr                        and status
000D77r 3  85 rr                        sta status
000D79r 3               
000D79r 3               @process_name:
000D79r 3  B5 00                        lda 0,x
000D7Br 3  85 rr                        sta tmp2                ; store length of string in tmp2
000D7Dr 3               
000D7Dr 3                               ; remember the first free byte of memory as the start of
000D7Dr 3                               ; the new word
000D7Dr 3  A5 rr                        lda cp
000D7Fr 3  85 rr                        sta tmp1
000D81r 3  A5 rr                        lda cp+1
000D83r 3  85 rr                        sta tmp1+1
000D85r 3               
000D85r 3                               ; We need 8 bytes plus the length of the string for our new header.
000D85r 3                               ; This is also the offset for the start of the code field (the
000D85r 3                               ; xt_ label) so we need to remember it. Otherwise, we could
000D85r 3                               ; just allot the space afterwards
000D85r 3  B5 00                        lda 0,x
000D87r 3  18                           clc
000D88r 3  69 08                        adc #8
000D8Ar 3  85 rr                        sta tmp3                ; total header length
000D8Cr 3               
000D8Cr 3                               ; We need three more bytes for for the hardcoded code field
000D8Cr 3                               ; area (CFA), the "payload" of the word which by default will
000D8Cr 3                               ; be a subroutine jump to DOVAR
000D8Cr 3  18                           clc
000D8Dr 3  69 03                        adc #3
000D8Fr 3               
000D8Fr 3                               ; We overwrite the length of the string returned by PARSE-NAME
000D8Fr 3                               ; and then call ALLOT
000D8Fr 3  95 00                        sta 0,x
000D91r 3  74 01                        stz 1,x         ; max header size is 255 chars
000D93r 3  20 rr rr                     jsr xt_allot    ; ( addr )
000D96r 3               
000D96r 3                               ; Get the CURRENT dictionary pointer.
000D96r 3  20 rr rr                     jsr current_to_dp
000D99r 3               
000D99r 3                               ; Now we walk through the header with Y as the index, adding
000D99r 3                               ; information byte-by-byte
000D99r 3  A0 00                        ldy #0
000D9Br 3               
000D9Br 3                               ; HEADER BYTE 0: Length of string
000D9Br 3  A5 rr                        lda tmp2
000D9Dr 3  91 rr                        sta (tmp1),y
000D9Fr 3               
000D9Fr 3                               ; HEADER BYTE 1: Status byte. By default, we set all new words
000D9Fr 3                               ; to "never native", user will have to decide if they should
000D9Fr 3                               ; be inlined
000D9Fr 3  A9 08                        lda #NN
000DA1r 3               
000DA1r 3                               ; Also, words defined by CREATE are marked in the header has
000DA1r 3                               ; having a Code Field Area (CFA), which is a bit tricky for
000DA1r 3                               ; Subroutine Threaded Code (STC). We do this so >BODY works
000DA1r 3                               ; correctly with DOES> and CREATE. See the discussion at
000DA1r 3                               ; http://forum.6502.org/viewtopic.php?f=9&t=5182 for details
000DA1r 3  09 20                        ora #HC
000DA3r 3  C8                           iny
000DA4r 3  91 rr                        sta (tmp1),y
000DA6r 3  C8                           iny
000DA7r 3               
000DA7r 3                               ; HEADER BYTE 2,3: Next header. This is the current last word
000DA7r 3                               ; in the Dictionary
000DA7r 3  A5 rr                        lda dp
000DA9r 3  91 rr                        sta (tmp1),y
000DABr 3  C8                           iny
000DACr 3  A5 rr                        lda dp+1
000DAEr 3  91 rr                        sta (tmp1),y
000DB0r 3  C8                           iny
000DB1r 3               
000DB1r 3                               ; Interlude: Make old CP new DP (new start of Dictionary)
000DB1r 3  A5 rr                        lda tmp1+1
000DB3r 3  85 rr                        sta dp+1
000DB5r 3  A5 rr                        lda tmp1
000DB7r 3  85 rr                        sta dp
000DB9r 3               
000DB9r 3                               ; HEADER BYTE 4,5: Start of the code field ("xt_" of this word).
000DB9r 3                               ; This begins after the header so we take the length of the
000DB9r 3                               ; header, which we cleverly saved in tmp3, and use it as an
000DB9r 3                               ; offset to the address of the start of the word. We come here
000DB9r 3                               ; with tmp1 in A
000DB9r 3  18                           clc
000DBAr 3  65 rr                        adc tmp3        ; add total header length
000DBCr 3  91 rr                        sta (tmp1),y
000DBEr 3  48                           pha             ; we need this in the next step
000DBFr 3  C8                           iny
000DC0r 3               
000DC0r 3  A5 rr                        lda tmp1+1
000DC2r 3  69 00                        adc #0          ; only need the carry
000DC4r 3  91 rr                        sta (tmp1),y
000DC6r 3  C8                           iny
000DC7r 3               
000DC7r 3                               ; HEADER BYTE 6,7: End of code ("z_" of this word). By default,
000DC7r 3                               ; we execute a jump to the DOVAR routine, so we need to move three
000DC7r 3                               ; bytes down, and then one more byte so that the z_ label points
000DC7r 3                               ; to the (still fictional) RTS instruction for correct compilation
000DC7r 3  68                           pla             ; LSB of "z_" address
000DC8r 3  18                           clc
000DC9r 3  69 03                        adc #3
000DCBr 3  91 rr                        sta (tmp1),y
000DCDr 3               
000DCDr 3  88                           dey             ; get the MSB of xt back
000DCEr 3  B1 rr                        lda (tmp1),y
000DD0r 3  69 00                        adc #0          ; only need the carry
000DD2r 3  C8                           iny
000DD3r 3  C8                           iny
000DD4r 3  91 rr                        sta (tmp1),y
000DD6r 3  C8                           iny
000DD7r 3               
000DD7r 3                               ; HEADER BYTE 8: Start of name string. The address is TOS, the
000DD7r 3                               ; length in tmp2. We subtract 8 from the address so we can
000DD7r 3                               ; use the same loop index, which is already 8 byte ahead at
000DD7r 3                               ; this point
000DD7r 3  B5 00                        lda 0,x
000DD9r 3  38                           sec
000DDAr 3  E9 08                        sbc #8
000DDCr 3  85 rr                        sta tmptos
000DDEr 3               
000DDEr 3  B5 01                        lda 1,x
000DE0r 3  E9 00                        sbc #0          ; only need carry
000DE2r 3  85 rr                        sta tmptos+1
000DE4r 3               
000DE4r 3               @name_loop:
000DE4r 3  B1 rr                        lda (tmptos),y
000DE6r 3               
000DE6r 3                               ; Make sure it goes into the dictionary in lower case.
000DE6r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
000DE8r 3  B0 07                        bcs @store_name
000DEAr 3  C9 41                        cmp #$41        ; ASCII 'A'
000DECr 3  90 03                        bcc @store_name
000DEEr 3               
000DEEr 3                               ; An uppercase letter has been located. Make it
000DEEr 3                               ; lowercase.
000DEEr 3  18                           clc
000DEFr 3  69 20                        adc #$20
000DF1r 3               
000DF1r 3                               ; Fall into @store_name.
000DF1r 3               
000DF1r 3               @store_name:
000DF1r 3  91 rr                        sta (tmp1),y
000DF3r 3  C8                           iny
000DF4r 3  C6 rr                        dec tmp2
000DF6r 3  D0 EC                        bne @name_loop
000DF8r 3               
000DF8r 3                               ; After thename string comes the code field, starting at the
000DF8r 3                               ; current xt of this word, which is initially a jump to the
000DF8r 3                               ; subroutine to DOVAR. We code this jump by hand
000DF8r 3  A9 20                        lda #$20        ; opcode of JSR
000DFAr 3  91 rr                        sta (tmp1),y
000DFCr 3  C8                           iny
000DFDr 3  A9 rr                        lda #<dovar
000DFFr 3  91 rr                        sta (tmp1),y
000E01r 3  C8                           iny
000E02r 3  A9 rr                        lda #>dovar
000E04r 3  91 rr                        sta (tmp1),y
000E06r 3               
000E06r 3                               ; Update the CURRENT wordlist with the new DP.
000E06r 3                               ; We do this down here because this routine uses Y.
000E06r 3  20 rr rr                     jsr dp_to_current
000E09r 3               
000E09r 3                               ; And we're done. Restore stack
000E09r 3  E8                           inx
000E0Ar 3  E8                           inx
000E0Br 3               
000E0Br 3  60           z_create:       rts
000E0Cr 3               
000E0Cr 3               
000E0Cr 3               
000E0Cr 3               ; ## D_MINUS ( d d -- d ) "Subtract two double-celled numbers"
000E0Cr 3               ; ## "d-"  auto  ANS double
000E0Cr 3                       ; """https://forth-standard.org/standard/double/DMinus"""
000E0Cr 3               
000E0Cr 3               xt_d_minus:
000E0Cr 3  20 rr rr                     jsr underflow_4 ; two double numbers
000E0Fr 3               
000E0Fr 3  38                           sec
000E10r 3               
000E10r 3  B5 06                        lda 6,x         ; LSB of lower word
000E12r 3  F5 02                        sbc 2,x
000E14r 3  95 06                        sta 6,x
000E16r 3               
000E16r 3  B5 07                        lda 7,x         ; MSB of lower word
000E18r 3  F5 03                        sbc 3,x
000E1Ar 3  95 07                        sta 7,x
000E1Cr 3               
000E1Cr 3  B5 04                        lda 4,x         ; LSB of upper word
000E1Er 3  F5 00                        sbc 0,x
000E20r 3  95 04                        sta 4,x
000E22r 3               
000E22r 3  B5 05                        lda 5,x         ; MSB of upper word
000E24r 3  F5 01                        sbc 1,x
000E26r 3  95 05                        sta 5,x
000E28r 3               
000E28r 3  E8                           inx
000E29r 3  E8                           inx
000E2Ar 3  E8                           inx
000E2Br 3  E8                           inx
000E2Cr 3               
000E2Cr 3  60           z_d_minus:      rts
000E2Dr 3               
000E2Dr 3               
000E2Dr 3               
000E2Dr 3               ; ## D_PLUS ( d d -- d ) "Add two double-celled numbers"
000E2Dr 3               ; ## "d+"  auto  ANS double
000E2Dr 3                       ; """https://forth-standard.org/standard/double/DPlus"""
000E2Dr 3               
000E2Dr 3               xt_d_plus:
000E2Dr 3  20 rr rr                     jsr underflow_4 ; two double numbers
000E30r 3               
000E30r 3  18                           clc
000E31r 3  B5 02                        lda 2,x         ; LSB of lower word
000E33r 3  75 06                        adc 6,x
000E35r 3  95 06                        sta 6,x
000E37r 3               
000E37r 3  B5 03                        lda 3,x         ; MSB of lower word
000E39r 3  75 07                        adc 7,x
000E3Br 3  95 07                        sta 7,x
000E3Dr 3               
000E3Dr 3  B5 00                        lda 0,x         ; LSB of upper word
000E3Fr 3  75 04                        adc 4,x
000E41r 3  95 04                        sta 4,x
000E43r 3               
000E43r 3  B5 01                        lda 1,x         ; MSB of upper word
000E45r 3  75 05                        adc 5,x
000E47r 3  95 05                        sta 5,x
000E49r 3               
000E49r 3  E8                           inx
000E4Ar 3  E8                           inx
000E4Br 3  E8                           inx
000E4Cr 3  E8                           inx
000E4Dr 3               
000E4Dr 3  60           z_d_plus:       rts
000E4Er 3               
000E4Er 3               
000E4Er 3               
000E4Er 3               ; ## D_TO_S ( d -- n ) "Convert a double number to single"
000E4Er 3               ; ## "d>s"  auto  ANS double
000E4Er 3                       ; """https://forth-standard.org/standard/double/DtoS
000E4Er 3                       ; Though this is basically just DROP, we keep it
000E4Er 3                       ; separate so we can test for underflow
000E4Er 3                       ; """
000E4Er 3               
000E4Er 3               xt_d_to_s:
000E4Er 3  20 rr rr                     jsr underflow_2
000E51r 3               
000E51r 3  E8                           inx
000E52r 3  E8                           inx
000E53r 3               
000E53r 3  60           z_d_to_s:       rts
000E54r 3               
000E54r 3               
000E54r 3               
000E54r 3               ; ## DABS ( d -- d ) "Return the absolute value of a double"
000E54r 3               ; ## "dabs"  auto  ANS double
000E54r 3                       ; """https://forth-standard.org/standard/double/DABS"""
000E54r 3               
000E54r 3               xt_dabs:
000E54r 3  20 rr rr                     jsr underflow_2 ; double number
000E57r 3               
000E57r 3  B5 01                        lda 1,x         ; MSB of high cell
000E59r 3  10 17                        bpl @done       ; positive, we get off light
000E5Br 3               
000E5Br 3                               ; negative, calculate 0 - d
000E5Br 3  A0 00                        ldy #0
000E5Dr 3  38                           sec
000E5Er 3               
000E5Er 3  98                           tya
000E5Fr 3  F5 02                        sbc 2,x         ; LSB of low cell
000E61r 3  95 02                        sta 2,x
000E63r 3               
000E63r 3  98                           tya
000E64r 3  F5 03                        sbc 3,x         ; MSB of low cell
000E66r 3  95 03                        sta 3,x
000E68r 3               
000E68r 3  98                           tya
000E69r 3  F5 00                        sbc 0,x         ; LSB of high cell
000E6Br 3  95 00                        sta 0,x
000E6Dr 3               
000E6Dr 3  98                           tya
000E6Er 3  F5 01                        sbc 1,x         ; MSB of high cell
000E70r 3  95 01                        sta 1,x
000E72r 3               @done:
000E72r 3  60           z_dabs:         rts
000E73r 3               
000E73r 3               
000E73r 3               
000E73r 3               ; ## DECIMAL ( -- ) "Change radix base to decimal"
000E73r 3               ; ## "decimal"  auto  ANS core
000E73r 3                       ; """https://forth-standard.org/standard/core/DECIMAL"""
000E73r 3               xt_decimal:
000E73r 3  A9 0A                        lda #10
000E75r 3  85 rr                        sta base
000E77r 3  64 rr                        stz base+1              ; paranoid
000E79r 3               
000E79r 3  60           z_decimal:      rts
000E7Ar 3               
000E7Ar 3               
000E7Ar 3               ; ## DEFER ( "name" -- ) "Create a placeholder for words by name"
000E7Ar 3               ; ## "defer"  auto  ANS core ext
000E7Ar 3                       ; """https://forth-standard.org/standard/core/DEFER
000E7Ar 3                       ; Reserve an name that can be linked to various xt by IS.
000E7Ar 3                       ;
000E7Ar 3                       ; The ANS reference implementation is
000E7Ar 3                       ;       CREATE ['] ABORT , DOES> @ EXECUTE ;
000E7Ar 3                       ; But we use this routine as a low-level word so things go faster
000E7Ar 3               
000E7Ar 3               xt_defer:
000E7Ar 3  20 rr rr                     jsr xt_create
000E7Dr 3               
000E7Dr 3                               ; CREATE by default installs a subroutine jump to DOVAR,
000E7Dr 3                               ; but we actually want DODEFER this time. Go back two
000E7Dr 3                               ; bytes and repace the subroutine jump target
000E7Dr 3  A5 rr                        lda cp          ; LSB
000E7Fr 3  38                           sec
000E80r 3  E9 02                        sbc #2
000E82r 3  85 rr                        sta tmp1
000E84r 3               
000E84r 3  A5 rr                        lda cp+1        ; MSB
000E86r 3  E9 00                        sbc #0          ; we only care about the borrow
000E88r 3  85 rr                        sta tmp1+1
000E8Ar 3               
000E8Ar 3                               ; Save the target address
000E8Ar 3  A0 00                        ldy #0
000E8Cr 3  A9 rr                        lda #<dodefer   ; LSB
000E8Er 3  91 rr                        sta (tmp1),y
000E90r 3  C8                           iny
000E91r 3  A9 rr                        lda #>dodefer   ; MSB
000E93r 3  91 rr                        sta (tmp1),y
000E95r 3               
000E95r 3               
000E95r 3                               ; DODEFER executes the next address it finds after
000E95r 3                               ; its call. As default, we include the error
000E95r 3                               ; "Defer not defined"
000E95r 3  A9 rr                        lda #<defer_error
000E97r 3  92 rr                        sta (cp)
000E99r 3  E6 rr                        inc cp
000E9Br 3  D0 02                        bne @1
000E9Dr 3  E6 rr                        inc cp+1
000E9Fr 3               @1:
000E9Fr 3  A9 rr                        lda #>defer_error
000EA1r 3  92 rr                        sta (cp)
000EA3r 3  E6 rr                        inc cp
000EA5r 3  D0 02                        bne @2
000EA7r 3  E6 rr                        inc cp+1
000EA9r 3               @2:
000EA9r 3  20 rr rr                     jsr adjust_z    ; adjust header to correct length
000EACr 3               
000EACr 3  60           z_defer:        rts
000EADr 3               
000EADr 3               
000EADr 3               
000EADr 3               ; ## DEFER_FETCH ( xt1 -- xt2 ) "Get the current XT for a deferred word"
000EADr 3               ; ## "defer@"  auto  ANS core ext
000EADr 3                       ; """http://forth-standard.org/standard/core/DEFERFetch"""
000EADr 3               
000EADr 3               xt_defer_fetch:
000EADr 3                               ; No underflow checking as >BODY does it.
000EADr 3  20 rr rr                     jsr xt_to_body
000EB0r 3  20 rr rr                     jsr xt_fetch
000EB3r 3  60           z_defer_fetch:  rts
000EB4r 3               
000EB4r 3               
000EB4r 3               
000EB4r 3               ; ## DEFER_STORE ( xt2 x1 -- ) "Set xt1 to execute xt2"
000EB4r 3               ; ## "defer!"  auto  ANS core ext
000EB4r 3                       ; """http://forth-standard.org/standard/core/DEFERStore"""
000EB4r 3               
000EB4r 3               xt_defer_store:
000EB4r 3                               ; No underflow checking as >BODY and ! do it.
000EB4r 3  20 rr rr                     jsr xt_to_body
000EB7r 3  20 rr rr                     jsr xt_store
000EBAr 3  60           z_defer_store:  rts
000EBBr 3               
000EBBr 3               
000EBBr 3               
000EBBr 3               ; ## DEFINITIONS ( -- ) "Make first wordlist in search order the current wordlist"
000EBBr 3               ; ## "definitions" auto ANS search
000EBBr 3               xt_definitions:
000EBBr 3  A0 1F                        ldy #search_order_offset    ; Transfer byte variable
000EBDr 3  B1 rr                        lda (up),y                  ; SEARCH_ORDER[0] to
000EBFr 3  A0 04                        ldy #current_offset         ; byte variable CURRENT.
000EC1r 3  91 rr                        sta (up),y
000EC3r 3  60           z_definitions:  rts
000EC4r 3               
000EC4r 3               
000EC4r 3               ; ## DEPTH ( -- u ) "Get number of cells (not bytes) used by stack"
000EC4r 3               ; ## "depth"  auto  ANS core
000EC4r 3                       ; """https://forth-standard.org/standard/core/DEPTH"""
000EC4r 3               xt_depth:
000EC4r 3  A9 rr                        lda #dsp0
000EC6r 3  86 rr                        stx tmpdsp
000EC8r 3  38                           sec
000EC9r 3  E5 rr                        sbc tmpdsp
000ECBr 3               
000ECBr 3                               ; divide by two because each cell is two bytes
000ECBr 3  4A                           lsr
000ECCr 3               
000ECCr 3  CA                           dex
000ECDr 3  CA                           dex
000ECEr 3  95 00                        sta 0,x
000ED0r 3  74 01                        stz 1,x
000ED2r 3               
000ED2r 3  60           z_depth:        rts
000ED3r 3               
000ED3r 3               
000ED3r 3               ; ## DIGIT_QUESTION ( char -- u f | char f ) "Convert ASCII char to number"
000ED3r 3               ; ## "digit?"  auto  Tali Forth
000ED3r 3                       ; """Inspired by the pForth instruction DIGIT, see
000ED3r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
000ED3r 3                       ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to
000ED3r 3                       ; pForth, we get the base (radix) ourselves instead of having the
000ED3r 3                       ; user provide it. There is no standard name for this routine, which
000ED3r 3                       ; itself is not ANS; we use DIGIT? following pForth and Gforth.
000ED3r 3                       ; """
000ED3r 3               
000ED3r 3               xt_digit_question:
000ED3r 3  20 rr rr                     jsr underflow_1
000ED6r 3               
000ED6r 3                               ; one way or another, we're going to need room for the
000ED6r 3                               ; flag on the stack
000ED6r 3  CA                           dex
000ED7r 3  CA                           dex
000ED8r 3  74 00                        stz 0,x                 ; default flag is failure
000EDAr 3  74 01                        stz 1,x
000EDCr 3  74 03                        stz 3,x                 ; paranoid
000EDEr 3               
000EDEr 3                               ; Check the character, now in the LSB of NOS. First, make
000EDEr 3                               ; sure we're not below the ASCII code for "0"
000EDEr 3  B5 02                        lda 2,x
000EE0r 3  C9 30                        cmp #'0'
000EE2r 3  90 23                        bcc @done               ; failure flag already set
000EE4r 3               
000EE4r 3                               ; Next, see if we are below "9", because that would make
000EE4r 3                               ; this a normal number
000EE4r 3  C9 3A                        cmp #'9'+1               ; this is actually ":"
000EE6r 3  90 12                        bcc @checkbase
000EE8r 3               
000EE8r 3                               ; Well, then let's see if this is the gap between "9" and "A"
000EE8r 3                               ; so we can treat the whole range as a number
000EE8r 3  C9 41                        cmp #'A'
000EEAr 3  90 1B                        bcc @done               ; failure flag is already set
000EECr 3               
000EECr 3                               ; probably a letter, so we make sure it is uppercase
000EECr 3  C9 61                        cmp #'a'
000EEEr 3  90 07                        bcc @case_done          ; not lower case, too low
000EF0r 3  C9 7B                        cmp #'z'+1
000EF2r 3  B0 03                        bcs @case_done          ; not lower case, too high
000EF4r 3               
000EF4r 3  18                           clc                     ; just right
000EF5r 3  69 E0                        adc #$e0                ; offset to upper case (wraps)
000EF7r 3               
000EF7r 3               @case_done:
000EF7r 3                               ; get rid of the gap between "9" and "A" so we can treat
000EF7r 3                               ; the whole range as one number
000EF7r 3  38                           sec
000EF8r 3  E9 07                        sbc #7                  ; fall through to @checkbase
000EFAr 3               
000EFAr 3               @checkbase:
000EFAr 3                               ; we have a number, now see if it falls inside the range
000EFAr 3                               ; provided by BASE
000EFAr 3  38                           sec
000EFBr 3  E9 30                        sbc #'0'                 ; this is also the conversion step
000EFDr 3  C5 rr                        cmp base
000EFFr 3  B0 06                        bcs @done               ; already have false flag
000F01r 3               
000F01r 3                               ; Found a legal number
000F01r 3  95 02                        sta 2,x                 ; put number in NOS
000F03r 3  D6 00                        dec 0,x                 ; set success flag
000F05r 3  D6 01                        dec 1,x
000F07r 3               
000F07r 3               @done:
000F07r 3               z_digit_question:
000F07r 3  60                           rts
000F08r 3               
000F08r 3               
000F08r 3               ; ## DISASM ( addr u -- ) "Disassemble a block of memory"
000F08r 3               ; ## "disasm"  tested  Tali Forth
000F08r 3                       ; """Convert a segment of memory to assembler output. This
000F08r 3                       ; word is vectored so people can add their own disassembler.
000F08r 3                       ; Natively, this produces Simpler Assembly Notation (SAN)
000F08r 3                       ; code, see the section on The Disassembler in the manual and
000F08r 3                       ; the file disassembler.asm for more details.
000F08r 3                       ; """
000F08r 3               xt_disasm:
000F08r 3  20 rr rr                     jsr underflow_2
000F0Br 3                           .ifdef disassembler
000F0Br 3                               jsr disassembler
000F0Br 3                           .endif
000F0Br 3               
000F0Br 3  60           z_disasm:       rts
000F0Cr 3               
000F0Cr 3               
000F0Cr 3               ; ## DNEGATE ( d -- d ) "Negate double cell number"
000F0Cr 3               ; ## "dnegate"  auto  ANS double
000F0Cr 3                       ; """https://forth-standard.org/standard/double/DNEGATE"""
000F0Cr 3               xt_dnegate:
000F0Cr 3  20 rr rr                     jsr underflow_2 ; double number
000F0Fr 3               
000F0Fr 3  A0 00             		ldy #0
000F11r 3  38                           sec
000F12r 3               
000F12r 3  98                           tya
000F13r 3  F5 02                        sbc 2,x         ; LSB of low cell
000F15r 3  95 02                        sta 2,x
000F17r 3               
000F17r 3  98                           tya
000F18r 3  F5 03                        sbc 3,x         ; MSB of low cell
000F1Ar 3  95 03                        sta 3,x
000F1Cr 3               
000F1Cr 3  98                           tya
000F1Dr 3  F5 00                        sbc 0,x         ; LSB of high cell
000F1Fr 3  95 00                        sta 0,x
000F21r 3               
000F21r 3  98                           tya
000F22r 3  F5 01                        sbc 1,x         ; MSB of high cell
000F24r 3  95 01                        sta 1,x
000F26r 3               
000F26r 3  60           z_dnegate:      rts
000F27r 3               
000F27r 3               
000F27r 3               ; ## QUESTION_DO ( limit start -- )(R: -- limit start) "Conditional loop start"
000F27r 3               ; ## "?do"  auto  ANS core ext
000F27r 3                       ; """https://forth-standard.org/standard/core/qDO"""
000F27r 3               xt_question_do:
000F27r 3                               ; ?DO shares most of its code with DO. We use the tmp1 flag
000F27r 3                               ; to mark which is which
000F27r 3  A9 FF                        lda #$ff                ; -1 is ?DO, jump to common code
000F29r 3  85 rr                        sta tmp1
000F2Br 3  80 02                        bra do_common           ; skip flag for DO
000F2Dr 3               
000F2Dr 3               ; ## DO ( limit start -- )(R: -- limit start)  "Start a loop"
000F2Dr 3               ; ## "do"  auto  ANS core
000F2Dr 3                       ; """https://forth-standard.org/standard/core/DO
000F2Dr 3                       ;
000F2Dr 3                       ; Compile-time part of DO. Could be realized in Forth as
000F2Dr 3                       ;       : DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY
000F2Dr 3                       ; but we do it in assembler for speed. To work with LEAVE, we compile
000F2Dr 3                       ; a routine that pushes the end address to the Return Stack at run
000F2Dr 3                       ; time. This is based on a suggestion by Garth Wilson, see
000F2Dr 3                       ; the Control Flow section of the manual for details.
000F2Dr 3                       ;
000F2Dr 3                       ; This may not be native compile. Don't check for a stack underflow
000F2Dr 3                       ; """
000F2Dr 3               
000F2Dr 3               xt_do:
000F2Dr 3                               ; DO and ?DO share most of their code, use tmp1 as a flag.
000F2Dr 3  64 rr                        stz tmp1                ; 0 is DO, drop through to DO_COMMON
000F2Fr 3               do_common:
000F2Fr 3                               ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
000F2Fr 3                               ; compile the address we need to LDA at runtime
000F2Fr 3  CA                           dex
000F30r 3  CA                           dex
000F31r 3  A5 rr                        lda cp
000F33r 3  95 00                        sta 0,x                 ; LSB
000F35r 3  A5 rr                        lda cp+1
000F37r 3  95 01                        sta 1,x                 ; MSB   ( limit start here )
000F39r 3               
000F39r 3                               ; now we compile six dummy bytes that LOOP/+LOOP will
000F39r 3                               ; replace by the actual LDA/PHA instructions
000F39r 3  A9 05                        lda #5                  ; we don't really care about the value,
000F3Br 3  A8                           tay                     ; so we use 5 to be tricky
000F3Cr 3               @loop:
000F3Cr 3  91 rr                        sta (cp),y
000F3Er 3  88                           dey
000F3Fr 3  10 FB                        bpl @loop
000F41r 3               
000F41r 3                               ; update CP
000F41r 3  1A                           inc             ; we used 5 as a dummy value, this is why
000F42r 3  18                           clc
000F43r 3  65 rr                        adc cp
000F45r 3  85 rr                        sta cp
000F47r 3  90 02                        bcc @1
000F49r 3  E6 rr                        inc cp+1
000F4Br 3               @1:
000F4Br 3                               ; compile the (?DO) portion of ?DO if appropriate
000F4Br 3  A5 rr                        lda tmp1
000F4Dr 3  F0 17                        beq @compile_do
000F4Fr 3               
000F4Fr 3                               ; We came from ?DO, so compile its runtime first. We do
000F4Fr 3                               ; this with a quick loop because we know it has to be
000F4Fr 3                               ; Always Native anyway
000F4Fr 3  A0 14                        ldy #question_do_runtime_end-question_do_runtime
000F51r 3  5A                           phy             ; save counter to calculate new CP
000F52r 3               @2:
000F52r 3  B9 rr rr                     lda question_do_runtime,y
000F55r 3  91 rr                        sta (cp),y
000F57r 3  88                           dey
000F58r 3  10 F8                        bpl @2
000F5Ar 3               
000F5Ar 3                               ; adjust CP
000F5Ar 3  68                           pla             ; retrieve counter
000F5Br 3  18                           clc
000F5Cr 3  65 rr                        adc cp
000F5Er 3  85 rr                        sta cp
000F60r 3  A5 rr                        lda cp+1
000F62r 3  69 00                        adc #0          ; only care about carry
000F64r 3  85 rr                        sta cp+1        ; fall through to @compile_do
000F66r 3               
000F66r 3               @compile_do:
000F66r 3                               ; compile runtime part of DO.
000F66r 3  A0 24                        ldy #do_runtime_end-do_runtime  ; counter
000F68r 3  5A                           phy             ; save counter to calculate new CP
000F69r 3               @3:
000F69r 3  B9 rr rr                     lda do_runtime,y
000F6Cr 3  91 rr                        sta (cp),y
000F6Er 3  88                           dey
000F6Fr 3  10 F8                        bpl @3
000F71r 3               
000F71r 3                               ; adjust CP
000F71r 3  68                           pla             ; retrieve counter
000F72r 3  18                           clc
000F73r 3  65 rr                        adc cp
000F75r 3  85 rr                        sta cp
000F77r 3  A5 rr                        lda cp+1
000F79r 3  69 00                        adc #0          ; only care about carry
000F7Br 3  85 rr                        sta cp+1
000F7Dr 3               
000F7Dr 3                               ; HERE, hardcoded for speed. We put it on the Data Stack
000F7Dr 3                               ; where LOOP/+LOOP takes it from. Note this has nothing to
000F7Dr 3                               ; do with the HERE we're saving for LEAVE
000F7Dr 3  CA                           dex
000F7Er 3  CA                           dex
000F7Fr 3  A5 rr                        lda cp          ; LSB
000F81r 3  95 00                        sta 0,x
000F83r 3  A5 rr                        lda cp+1        ; MSB
000F85r 3  95 01                        sta 1,x
000F87r 3               z_question_do:
000F87r 3  60           z_do:           rts
000F88r 3               
000F88r 3               
000F88r 3               do_runtime:
000F88r 3                       ; """Runtime routine for DO loop. Note that ANS loops quit when the
000F88r 3                       ; boundry of limit-1 and limit is reached, a different mechanism than
000F88r 3                       ; the FIG Forth loop (you can see which version you have by running
000F88r 3                       ; a loop with start and limit as the same value, for instance
000F88r 3                       ; 0 0 DO -- these will walk through the number space). We use a
000F88r 3                       ; "fudge factor" for the limit that makes the Overflow Flag trip when
000F88r 3                       ; it is reached; see http://forum.6502.org/viewtopic.php?f=9&t=2026
000F88r 3                       ; for further discussion of this. The source given there for
000F88r 3                       ; this idea is Laxen & Perry F83. -- This routine is called (DO)
000F88r 3                       ; in some Forths. Usually, we would define this as a separate word
000F88r 3                       ; and compile it with COMPILE, and the Always Native (AN) flag.
000F88r 3                       ; However, we can do it faster if we just copy the bytes
000F88r 3                       ; of this routine with a simple loop in DO.
000F88r 3                       ; """
000F88r 3                               ; First step: create fudge factor (FUFA) by subtracting the
000F88r 3                               ; limit from $8000, the number that will trip the overflow
000F88r 3                               ; flag
000F88r 3  38                           sec
000F89r 3  A9 00                        lda #0
000F8Br 3  F5 02                        sbc 2,x         ; LSB of limit
000F8Dr 3  95 02                        sta 2,x         ; save FUFA for later use
000F8Fr 3               
000F8Fr 3  A9 80                        lda #$80
000F91r 3  F5 03                        sbc 3,x         ; MSB of limit
000F93r 3  95 03                        sta 3,x         ; save FUFA for later use
000F95r 3  48                           pha             ; FUFA replaces limit on R stack
000F96r 3  B5 02                        lda 2,x         ; LSB of limit
000F98r 3  48                           pha
000F99r 3               
000F99r 3                               ; Second step: index is FUFA plus original index
000F99r 3  18                           clc
000F9Ar 3  B5 00                        lda 0,x         ; LSB of original index
000F9Cr 3  75 02                        adc 2,x         ; add LSB of FUFA
000F9Er 3  95 00                        sta 0,x
000FA0r 3  B5 01                        lda 1,x         ; MSB of orginal index
000FA2r 3  75 03                        adc 3,x         ; add MSB of FUFA
000FA4r 3  48                           pha
000FA5r 3  B5 00                        lda 0,x         ; LSB of index
000FA7r 3  48                           pha
000FA8r 3               
000FA8r 3                               ; we've saved the FUFA on the NOS of the R stack, so we can
000FA8r 3                               ; use it later. Clean the Data Stack
000FA8r 3  E8                           inx
000FA9r 3  E8                           inx
000FAAr 3  E8                           inx
000FABr 3  E8                           inx             ; no RTS because this is copied into code
000FACr 3               do_runtime_end:
000FACr 3               
000FACr 3               question_do_runtime:
000FACr 3               
000FACr 3                       ; """This is called (?DO) in some Forths. See the explanation at
000FACr 3                       ; do_runtime for the background on this design
000FACr 3                       ; """
000FACr 3                               ; see if TOS and NOS are equal. Change this to assembler
000FACr 3                               ; for speed
000FACr 3  20 rr rr                     jsr xt_two_dup          ; ( n1 n2 n1 n2 )
000FAFr 3  20 rr rr                     jsr xt_equal            ; ( -- n1 n2 f )
000FB2r 3               
000FB2r 3  B5 00                        lda 0,x
000FB4r 3  15 01                        ora 1,x
000FB6r 3  F0 06                        beq @do_do
000FB8r 3               
000FB8r 3                               ; We're equal, so dump everything and jump beyond the loop.
000FB8r 3                               ; But first, dump six entries off of the Data Stack
000FB8r 3  8A                           txa
000FB9r 3  18                           clc
000FBAr 3  69 06                        adc #6
000FBCr 3  AA                           tax
000FBDr 3               
000FBDr 3                               ; Then abort the whole loop
000FBDr 3  60                           rts
000FBEr 3               @do_do:
000FBEr 3  E8                           inx             ; clear flag from EQUAL off stack
000FBFr 3  E8                           inx             ; no RTS because this is copied into code
000FC0r 3               question_do_runtime_end:
000FC0r 3               
000FC0r 3               
000FC0r 3               
000FC0r 3               ; ## DOES ( -- ) "Add payload when defining new words"
000FC0r 3               ; ## "does>"  auto  ANS core
000FC0r 3                       ; """https://forth-standard.org/standard/core/DOES
000FC0r 3                       ; Create the payload for defining new defining words. See
000FC0r 3                       ; http://www.bradrodriguez.com/papers/moving3.htm and
000FC0r 3                       ; the Developer Guide in the manual for a discussion of
000FC0r 3                       ; DOES>'s internal workings. This uses tmp1 and tmp2.
000FC0r 3                       ; """
000FC0r 3               
000FC0r 3               xt_does:
000FC0r 3                               ; compile a subroutine jump to runtime of DOES>
000FC0r 3  A0 rr                        ldy #>does_runtime
000FC2r 3  A9 rr                        lda #<does_runtime
000FC4r 3  20 rr rr                     jsr cmpl_subroutine
000FC7r 3               
000FC7r 3                               ; compile a subroutine jump to DODOES. In traditional
000FC7r 3                               ; terms, this is the Code Field Area (CFA) of the new
000FC7r 3                               ; word
000FC7r 3  A0 rr                        ldy #>dodoes
000FC9r 3  A9 rr                        lda #<dodoes
000FCBr 3  20 rr rr                     jsr cmpl_subroutine
000FCEr 3               
000FCEr 3  60           z_does:         rts
000FCFr 3               
000FCFr 3               
000FCFr 3               does_runtime:
000FCFr 3                       ; """Runtime portion of DOES>. This replaces the subroutine jump
000FCFr 3                       ; to DOVAR that CREATE automatically encodes by a jump to the
000FCFr 3                       ; address that contains a subroutine jump to DODOES. We don't
000FCFr 3                       ; jump to DODOES directly because we need to work our magic with
000FCFr 3                       ; the return addresses. This routine is also known as "(DOES)" in
000FCFr 3                       ; other Forths
000FCFr 3                       ; """
000FCFr 3               
000FCFr 3  7A                           ply             ; LSB
000FD0r 3  68                           pla             ; MSB
000FD1r 3               
000FD1r 3  C8                           iny
000FD2r 3  D0 01                        bne @1
000FD4r 3  1A                           inc
000FD5r 3               @1:
000FD5r 3  84 rr                        sty tmp1
000FD7r 3  85 rr                        sta tmp1+1
000FD9r 3               
000FD9r 3                               ; CREATE has also already modified the DP to point to the new
000FD9r 3                               ; word. We have no idea which instructions followed the CREATE
000FD9r 3                               ; command if there is a DOES> so the CP could point anywhere
000FD9r 3                               ; by now. The address of the word's xt is four bytes down.
000FD9r 3  20 rr rr                     jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
000FDCr 3  A5 rr                        lda dp
000FDEr 3  18                           clc
000FDFr 3  69 04                        adc #4
000FE1r 3  85 rr                        sta tmp2
000FE3r 3  A5 rr                        lda dp+1
000FE5r 3  69 00                        adc #0          ; we only care about the carry
000FE7r 3  85 rr                        sta tmp2+1
000FE9r 3               
000FE9r 3                               ; Now we get that address and add one byte to skip over the JSR
000FE9r 3                               ; opcode
000FE9r 3  B2 rr                        lda (tmp2)
000FEBr 3  18                           clc
000FECr 3  69 01                        adc #1
000FEEr 3  85 rr                        sta tmp3
000FF0r 3  A0 01                        ldy #1
000FF2r 3  B1 rr                        lda (tmp2),y
000FF4r 3  69 00                        adc #0          ; we only care about the carry
000FF6r 3  85 rr                        sta tmp3+1
000FF8r 3               
000FF8r 3                               ; Replace the DOVAR address with our own
000FF8r 3  A5 rr                        lda tmp1        ; LSB
000FFAr 3  92 rr                        sta (tmp3)
000FFCr 3  A5 rr                        lda tmp1+1
000FFEr 3  91 rr                        sta (tmp3),y    ; Y is still 1
001000r 3               
001000r 3                               ; Since we removed the return address that brought us here, we
001000r 3                               ; go back to whatever the main routine was. Otherwise, we we
001000r 3                               ; smash into the subroutine jump to DODOES.
001000r 3  60                           rts
001001r 3               
001001r 3               
001001r 3               
001001r 3               ; ## DOT ( u -- ) "Print TOS"
001001r 3               ; ## "."  auto  ANS core
001001r 3                       ; """https://forth-standard.org/standard/core/d"""
001001r 3               
001001r 3               xt_dot:
001001r 3  20 rr rr                     jsr underflow_1
001004r 3               
001004r 3  20 rr rr                     jsr xt_dup                      ; ( n n )
001007r 3  20 rr rr                     jsr xt_abs                      ; ( n u )
00100Ar 3  20 rr rr                     jsr xt_zero                     ; ( n u 0 )
00100Dr 3  20 rr rr                     jsr xt_less_number_sign         ; ( n u 0 )
001010r 3  20 rr rr                     jsr xt_number_sign_s            ; ( n ud )
001013r 3  20 rr rr                     jsr xt_rot                      ; ( ud n )
001016r 3  20 rr rr                     jsr xt_sign                     ; ( ud )
001019r 3  20 rr rr                     jsr xt_number_sign_greater      ; ( addr u )
00101Cr 3  20 rr rr                     jsr xt_type
00101Fr 3  20 rr rr                     jsr xt_space
001022r 3               
001022r 3  60           z_dot:          rts
001023r 3               
001023r 3               
001023r 3               
001023r 3               ; ## DOT_PAREN ( -- ) "Print input up to close paren .( comment )"
001023r 3               ; ## ".("  auto  ANS core
001023r 3                       ; """http://forth-standard.org/standard/core/Dotp"""
001023r 3               
001023r 3               xt_dot_paren:
001023r 3                               ; Put a right paren on the stack.
001023r 3  CA                           dex
001024r 3  CA                           dex
001025r 3  A9 29                        lda #41     ; Right parenthesis
001027r 3  95 00                        sta 0,x
001029r 3  74 01                        stz 1,x
00102Br 3               
00102Br 3  20 rr rr                     jsr xt_parse
00102Er 3  20 rr rr                     jsr xt_type
001031r 3               
001031r 3  60           z_dot_paren:    rts
001032r 3               
001032r 3               
001032r 3               
001032r 3               ; ## DOT_QUOTE ( "string" -- ) "Print string from compiled word"
001032r 3               ; ## ".""  auto  ANS core ext
001032r 3                       ; """https://forth-standard.org/standard/core/Dotq
001032r 3                       ; Compile string that is printed during run time. ANS Forth wants
001032r 3                       ; this to be compile-only, even though everybody and their friend
001032r 3                       ; uses it for everything. We follow the book here, and recommend
001032r 3                       ; `.(` for general printing.
001032r 3                       ; """
001032r 3               
001032r 3               xt_dot_quote:
001032r 3                               ; we let S" do the heavy lifting. Since we're in
001032r 3                               ; compile mode, it will save the string and reproduce it
001032r 3                               ; during runtime
001032r 3  20 rr rr                     jsr xt_s_quote
001035r 3               
001035r 3                               ; We then let TYPE do the actual printing
001035r 3  A0 rr                        ldy #>xt_type
001037r 3  A9 rr                        lda #<xt_type
001039r 3  20 rr rr                     jsr cmpl_subroutine
00103Cr 3               
00103Cr 3  60           z_dot_quote:    rts
00103Dr 3               
00103Dr 3               
00103Dr 3               
00103Dr 3               ; ## DOT_R ( n u -- ) "Print NOS as unsigned number with TOS with"
00103Dr 3               ; ## ".r"  tested  ANS core ext
00103Dr 3                       ; """https://forth-standard.org/standard/core/DotR
00103Dr 3                       ;
00103Dr 3                       ; Based on the Forth code
00103Dr 3                       ;  : .R  >R DUP ABS 0 <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
00103Dr 3                       ; """
00103Dr 3               
00103Dr 3               xt_dot_r:
00103Dr 3  20 rr rr                     jsr underflow_2
001040r 3               
001040r 3  20 rr rr                     jsr xt_to_r
001043r 3  20 rr rr                     jsr xt_dup
001046r 3  20 rr rr                     jsr xt_abs
001049r 3  20 rr rr                     jsr xt_zero
00104Cr 3  20 rr rr                     jsr xt_less_number_sign
00104Fr 3  20 rr rr                     jsr xt_number_sign_s
001052r 3  20 rr rr                     jsr xt_rot
001055r 3  20 rr rr                     jsr xt_sign
001058r 3  20 rr rr                     jsr xt_number_sign_greater
00105Br 3  20 rr rr                     jsr xt_r_from
00105Er 3  20 rr rr                     jsr xt_over
001061r 3  20 rr rr                     jsr xt_minus
001064r 3  20 rr rr                     jsr xt_spaces
001067r 3  20 rr rr                     jsr xt_type
00106Ar 3               
00106Ar 3  60           z_dot_r:        rts
00106Br 3               
00106Br 3               
00106Br 3               
00106Br 3               ; ## DOT_S ( -- ) "Print content of Data Stack"
00106Br 3               ; ## ".s"  tested  ANS tools
00106Br 3                       ; """https://forth-standard.org/standard/tools/DotS
00106Br 3                       ; Print content of Data Stack non-distructively. We follow the format
00106Br 3                       ; of Gforth and print the number of elements first in brackets,
00106Br 3                       ; followed by the Data Stack content (if any).
00106Br 3                       ;
00106Br 3                       ; Since this is for humans, we don't have to worry about speed.
00106Br 3                       ; """
00106Br 3               
00106Br 3               xt_dot_s:
00106Br 3  20 rr rr                     jsr xt_depth    ; ( -- u )
00106Er 3               
00106Er 3                               ; Print stack depth in brackets
00106Er 3  A9 3C                        lda #$3c        ; ASCII for "<"
001070r 3  20 rr rr                     jsr emit_a
001073r 3               
001073r 3                               ; We keep a copy of the number of the things on the stack
001073r 3                               ; to use as a counter later down. This assumes that there
001073r 3                               ; are less than 255 elements on the stack
001073r 3  B5 00                        lda 0,x
001075r 3  48                           pha
001076r 3               
001076r 3                               ; print unsigned number without the trailing space
001076r 3  CA                           dex             ; DUP
001077r 3  CA                           dex
001078r 3  95 00                        sta 0,x
00107Ar 3  74 01                        stz 1,x
00107Cr 3               
00107Cr 3  20 rr rr                     jsr print_u
00107Fr 3               
00107Fr 3  A9 3E                        lda #$3e        ; ASCII for ">"
001081r 3  20 rr rr                     jsr emit_a
001084r 3  A9 20                        lda #AscSP      ; ASCII for SPACE
001086r 3  20 rr rr                     jsr emit_a
001089r 3               
001089r 3  E8                           inx
00108Ar 3  E8                           inx
00108Br 3               
00108Br 3                               ; There will be lots of cases where the stack is empty. If that
00108Br 3                               ; is so, get out of here quickly
00108Br 3  E0 rr                        cpx #dsp0
00108Dr 3  F0 1E                        beq @done
00108Fr 3               
00108Fr 3               @have_stack:
00108Fr 3                               ; We have at least one element on the stack. The depth of the
00108Fr 3                               ; stack is on the stack, we can use it as a counter. We go
00108Fr 3                               ; from bottom to top
00108Fr 3  7A                           ply
001090r 3               
001090r 3  A9 rr                        lda #dsp0-1     ; go up one to avoid garbage
001092r 3  85 rr                        sta tmp3
001094r 3  64 rr                        stz tmp3+1      ; must be zero page on the 65c02
001096r 3               @loop:
001096r 3  CA                           dex
001097r 3  CA                           dex
001098r 3               
001098r 3  B2 rr                        lda (tmp3)
00109Ar 3  95 01                        sta 1,x
00109Cr 3  C6 rr                        dec tmp3
00109Er 3               
00109Er 3  B2 rr                        lda (tmp3)
0010A0r 3  95 00                        sta 0,x
0010A2r 3  C6 rr                        dec tmp3
0010A4r 3  5A                           phy
0010A5r 3               
0010A5r 3  20 rr rr                     jsr xt_dot
0010A8r 3               
0010A8r 3  7A                           ply
0010A9r 3  88                           dey
0010AAr 3  D0 EA                        bne @loop
0010ACr 3               
0010ACr 3  48                           pha             ; dummy to balance stack
0010ADr 3               @done:
0010ADr 3  68                           pla
0010AEr 3  60           z_dot_s:        rts
0010AFr 3               
0010AFr 3               
0010AFr 3               
0010AFr 3               ; ## D_DOT ( d -- ) "Print double"
0010AFr 3               ; ## "d."  tested  ANS double
0010AFr 3                       ; """http://forth-standard.org/standard/double/Dd"""
0010AFr 3                       ;
0010AFr 3                       ; From the Forth code:
0010AFr 3                       ; : D. TUCK DABS <# #S ROT SIGN #> TYPE SPACE ;
0010AFr 3                       ; """
0010AFr 3               
0010AFr 3               xt_d_dot:
0010AFr 3  20 rr rr                     jsr underflow_2
0010B2r 3               
0010B2r 3  20 rr rr                     jsr xt_tuck
0010B5r 3  20 rr rr                     jsr xt_dabs
0010B8r 3  20 rr rr                     jsr xt_less_number_sign
0010BBr 3  20 rr rr                     jsr xt_number_sign_s
0010BEr 3  20 rr rr                     jsr xt_rot
0010C1r 3  20 rr rr                     jsr xt_sign
0010C4r 3  20 rr rr                     jsr xt_number_sign_greater
0010C7r 3  20 rr rr                     jsr xt_type
0010CAr 3  20 rr rr                     jsr xt_space
0010CDr 3               
0010CDr 3  60           z_d_dot:        rts
0010CEr 3               
0010CEr 3               
0010CEr 3               
0010CEr 3               ; ## D_DOT_R ( d u -- ) "Print double right-justified u wide"
0010CEr 3               ; ## "d.r"  tested  ANS double
0010CEr 3                       ; """http://forth-standard.org/standard/double/DDotR"""
0010CEr 3                       ; Based on the Forth code
0010CEr 3                       ;  : D.R >R TUCK DABS <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
0010CEr 3                       ; """
0010CEr 3               
0010CEr 3               xt_d_dot_r:
0010CEr 3  20 rr rr                     jsr underflow_3
0010D1r 3                               ; From the forth code:
0010D1r 3  20 rr rr                     jsr xt_to_r
0010D4r 3  20 rr rr                     jsr xt_tuck
0010D7r 3  20 rr rr                     jsr xt_dabs
0010DAr 3  20 rr rr                     jsr xt_less_number_sign
0010DDr 3  20 rr rr                     jsr xt_number_sign_s
0010E0r 3  20 rr rr                     jsr xt_rot
0010E3r 3  20 rr rr                     jsr xt_sign
0010E6r 3  20 rr rr                     jsr xt_number_sign_greater
0010E9r 3  20 rr rr                     jsr xt_r_from
0010ECr 3  20 rr rr                     jsr xt_over
0010EFr 3  20 rr rr                     jsr xt_minus
0010F2r 3  20 rr rr                     jsr xt_spaces
0010F5r 3  20 rr rr                     jsr xt_type
0010F8r 3               
0010F8r 3  60           z_d_dot_r:      rts
0010F9r 3               
0010F9r 3               
0010F9r 3               
0010F9r 3               ; ## DROP ( u -- ) "Pop top entry on Data Stack"
0010F9r 3               ; ## "drop"  auto  ANS core
0010F9r 3                       ; """https://forth-standard.org/standard/core/DROP"""
0010F9r 3               xt_drop:
0010F9r 3  20 rr rr                     jsr underflow_1
0010FCr 3               
0010FCr 3  E8                           inx
0010FDr 3  E8                           inx
0010FEr 3               
0010FEr 3  60           z_drop:         rts
0010FFr 3               
0010FFr 3               
0010FFr 3               ; ## DUMP ( addr u -- ) "Display a memory region"
0010FFr 3               ; ## "dump"  tested  ANS tools
0010FFr 3                       ; """https://forth-standard.org/standard/tools/DUMP
0010FFr 3                       ;
0010FFr 3                       ; DUMP's exact output is defined as "implementation dependent".
0010FFr 3                       ; This is in assembler because it is
0010FFr 3                       ; useful for testing and development, so we want to have it work
0010FFr 3                       ; as soon as possible. Uses TMP2
0010FFr 3                       ; """
0010FFr 3               
0010FFr 3               xt_dump:
0010FFr 3  20 rr rr                     jsr underflow_2
001102r 3               @row:
001102r 3                               ; start counter for 16 numbers per row
001102r 3  A0 10                        ldy #16
001104r 3               
001104r 3                               ; We use TMP2 as the index for the ASCII characters
001104r 3                               ; that we print at the and of the hex block. We
001104r 3                               ; start saving them at HERE (CP)
001104r 3  64 rr                        stz tmp2
001106r 3               
001106r 3  20 rr rr                     jsr xt_cr
001109r 3               
001109r 3                               ; print address number
001109r 3  B5 03                        lda 3,x
00110Br 3  20 rr rr                     jsr byte_to_ascii
00110Er 3  B5 02                        lda 2,x
001110r 3  20 rr rr                     jsr byte_to_ascii
001113r 3               
001113r 3  20 rr rr                     jsr xt_space
001116r 3  20 rr rr                     jsr xt_space
001119r 3               @loop:
001119r 3                               ; if there are zero bytes left to display, we're done
001119r 3  B5 00                        lda 0,x
00111Br 3  15 01                        ora 1,x
00111Dr 3  F0 39                        beq @all_printed
00111Fr 3               
00111Fr 3                               ; dump the contents
00111Fr 3  A1 02                        lda (2,x)
001121r 3  48                           pha                     ; byte_to_ascii destroys A
001122r 3  20 rr rr                     jsr byte_to_ascii
001125r 3  20 rr rr                     jsr xt_space
001128r 3  68                           pla
001129r 3               
001129r 3                               ; Handle ASCII printing
001129r 3  20 rr rr                     jsr is_printable
00112Cr 3  B0 02                        bcs @printable
00112Er 3  A9 2E                        lda #'.'                 ; Print dot if not printable
001130r 3               @printable:
001130r 3  5A                           phy                     ; save counter
001131r 3  A4 rr                        ldy tmp2
001133r 3  91 rr                        sta (cp),y
001135r 3  E6 rr                        inc tmp2
001137r 3  7A                           ply
001138r 3               
001138r 3                               ; extra space after eight bytes
001138r 3  C0 09                        cpy #9
00113Ar 3  D0 03                        bne @next_char
00113Cr 3  20 rr rr                     jsr xt_space
00113Fr 3               
00113Fr 3               @next_char:
00113Fr 3  F6 02                        inc 2,x
001141r 3  D0 02                        bne @counter
001143r 3  F6 03                        inc 3,x
001145r 3               
001145r 3               @counter:
001145r 3                               ; loop counter
001145r 3  B5 00                        lda 0,x
001147r 3  D0 02                        bne @1
001149r 3  D6 01                        dec 1,x
00114Br 3               @1:
00114Br 3  D6 00                        dec 0,x
00114Dr 3  88                           dey
00114Er 3  D0 C9                        bne @loop               ; next byte
001150r 3               
001150r 3                               ; Done with one line, print the ASCII version of these
001150r 3                               ; characters
001150r 3  20 rr rr                     jsr xt_space
001153r 3  20 rr rr                     jsr print_ascii
001156r 3               
001156r 3  80 AA                        bra @row                ; new row
001158r 3               
001158r 3               @all_printed:
001158r 3                               ; See if there are any ASCII characters in the buffer
001158r 3                               ; left to print
001158r 3  A5 rr                        lda tmp2
00115Ar 3  F0 06                        beq @done
00115Cr 3               
00115Cr 3                               ; In theory, we could try to make the ASCII part line
00115Cr 3                               ; up with the line before it. But that is a hassle (we
00115Cr 3                               ; use three bytes for each missed hex entry, and
00115Cr 3                               ; then there is the gap after eight entries) and it
00115Cr 3                               ; makes it harder to read. We settle for one extra
00115Cr 3                               ; space instead for the moment
00115Cr 3  20 rr rr                     jsr xt_space
00115Fr 3  20 rr rr                     jsr print_ascii
001162r 3               @done:
001162r 3  20 rr rr                     jsr xt_two_drop         ; one byte less than 4x INX
001165r 3  60           z_dump:         rts
001166r 3               
001166r 3               
001166r 3               print_ascii:
001166r 3                               ; Print the ASCII characters that we have saved from
001166r 3                               ; HERE (CP) to HERE plus whatever is in TMP2. This routine
001166r 3                               ; is not compiled (DUMP is probably never compiled anyway)
001166r 3                               ; but we keep it inside the scope of DUMP.
001166r 3  A0 00                        ldy #0
001168r 3               @ascii_loop:
001168r 3  B1 rr                        lda (cp),y
00116Ar 3  20 rr rr                     jsr emit_a
00116Dr 3  C8                           iny
00116Er 3               
00116Er 3                               ; extra space after eight chars
00116Er 3  C0 08                        cpy #8
001170r 3  D0 03                        bne @1
001172r 3  20 rr rr                     jsr xt_space
001175r 3               @1:
001175r 3  C6 rr                        dec tmp2
001177r 3  D0 EF                        bne @ascii_loop
001179r 3               
001179r 3  60                           rts
00117Ar 3               
00117Ar 3               
00117Ar 3               
00117Ar 3               ; ## DUP ( u -- u u ) "Duplicate TOS"
00117Ar 3               ; ## "dup"  auto  ANS core
00117Ar 3                       ; """https://forth-standard.org/standard/core/DUP"""
00117Ar 3               xt_dup:
00117Ar 3  20 rr rr                     jsr underflow_1
00117Dr 3               
00117Dr 3  CA                           dex
00117Er 3  CA                           dex
00117Fr 3               
00117Fr 3  B5 02                        lda 2,x         ; LSB
001181r 3  95 00                        sta 0,x
001183r 3  B5 03                        lda 3,x         ; MSB
001185r 3  95 01                        sta 1,x
001187r 3               
001187r 3  60           z_dup:          rts
001188r 3               
001188r 3               
001188r 3               ; ## ED ( -- u ) "Line-based editor"
001188r 3               ; ## "ed"  fragment  Tali Forth
001188r 3                       ; """Start the line-based editor ed6502. See separate file
001188r 3                       ; ed.asm or the manual for details.
001188r 3                       ; """
001188r 3               xt_ed:
001188r 3                           .ifdef ed6502
001188r 3                               jsr ed6502      ; kept in separate file
001188r 3                           .endif
001188r 3               
001188r 3  60           z_ed:           rts
001189r 3               
001189r 3               
001189r 3               ; ## EDITOR_WORDLIST ( -- u ) "WID for the Editor wordlist"
001189r 3               ; ## "editor-wordlist"  tested  Tali Editor
001189r 3                       ; """ Commonly used like `editor-wordlist >order` to add the editor
001189r 3                       ; words to the search order so they can be used.  This will need
001189r 3                       ; to be done before any of the words marked "Tali Editor" can be
001189r 3                       ; used.  See the tutorial on Wordlists and the Search Order for
001189r 3                       ; more information.
001189r 3               
001189r 3                       ;
001189r 3                       ; This is a dummy entry, the code is shared with ONE
001189r 3                       ; """
001189r 3               
001189r 3               
001189r 3               ; ## ELSE (C: orig -- orig) ( -- ) "Conditional flow control"
001189r 3               ; ## "else"  auto  ANS core
001189r 3                       ; """http://forth-standard.org/standard/core/ELSE
001189r 3                       ;
001189r 3                       ; The code is shared with ENDOF
001189r 3                       ; """
001189r 3               
001189r 3               xt_else:
001189r 3               xt_endof:
001189r 3                               ; Put an unconditional branch.
001189r 3  A0 rr                        ldy #>branch_runtime
00118Br 3  A9 rr                        lda #<branch_runtime
00118Dr 3  20 rr rr                     jsr cmpl_subroutine
001190r 3               
001190r 3                               ; Put the address of the branch address on the stack.
001190r 3  20 rr rr                     jsr xt_here
001193r 3               
001193r 3                               ; Use zero for the branch address for now.
001193r 3                               ; THEN will fill it in later.
001193r 3  20 rr rr                     jsr xt_zero
001196r 3  20 rr rr                     jsr xt_comma
001199r 3               
001199r 3                               ; Get the address to jump to (just after the
001199r 3                               ; unconditional branch) for the IF to jump to
001199r 3                               ; when false.
001199r 3  20 rr rr                     jsr xt_here
00119Cr 3  20 rr rr                     jsr xt_rot
00119Fr 3               
00119Fr 3                               ; Update the original if 0branch address.
00119Fr 3  20 rr rr                     jsr xt_store
0011A2r 3               z_else:
0011A2r 3               z_endof:
0011A2r 3  60                           rts
0011A3r 3               
0011A3r 3               
0011A3r 3               
0011A3r 3               branch_runtime:
0011A3r 3                       ; """Runtime component for a branch. Used by ELSE and ENDOF. This was
0011A3r 3                       ; formally part of a separate word BRANCH which was later removed.
0011A3r 3                       ; """
0011A3r 3               
0011A3r 3                               ; The address on the Return Stack points to the last byte
0011A3r 3                               ; of the JSR address, one byte below the branch literal
0011A3r 3  68                           pla
0011A4r 3  85 rr                        sta tmpbranch
0011A6r 3  68                           pla
0011A7r 3  85 rr                        sta tmpbranch+1
0011A9r 3               
0011A9r 3                               ; Keep in mind: the address we just popped points one byte
0011A9r 3                               ; lower than the branch literal we want to grab
0011A9r 3  A0 01                        ldy #1
0011ABr 3  B1 rr                        lda (tmpbranch),y  ; LSB
0011ADr 3  85 rr                        sta tmp1
0011AFr 3  C8                           iny
0011B0r 3  B1 rr                        lda (tmpbranch),y  ; MSB
0011B2r 3  85 rr                        sta tmp1+1
0011B4r 3               
0011B4r 3  6C rr rr                     jmp (tmp1)
0011B7r 3               
0011B7r 3               
0011B7r 3               
0011B7r 3               ; ## EMIT ( char -- ) "Print character to current output"
0011B7r 3               ; ## "emit"  auto  ANS core
0011B7r 3                       ; """https://forth-standard.org/standard/core/EMIT
0011B7r 3                       ; Run-time default for EMIT. The user can revector this by changing
0011B7r 3                       ; the value of the OUTPUT variable. We ignore the MSB completely, and
0011B7r 3                       ; do not check to see if we have been given a valid ASCII character.
0011B7r 3                       ; Don't make this native compile.
0011B7r 3                       ; """
0011B7r 3               
0011B7r 3               xt_emit:
0011B7r 3  20 rr rr                     jsr underflow_1
0011BAr 3               
0011BAr 3  B5 00                        lda 0,x
0011BCr 3  E8                           inx
0011BDr 3  E8                           inx
0011BEr 3               
0011BEr 3               emit_a:
0011BEr 3                       ; We frequently want to print the character in A without fooling
0011BEr 3                       ; around with the Data Stack. This is emit_a's job, which still
0011BEr 3                       ; allows the output to be vectored. Call it with JSR as you
0011BEr 3                       ; would XT_EMIT
0011BEr 3  6C rr rr                     jmp (output)            ; JSR/RTS
0011C1r 3               
0011C1r 3               z_emit:         ; never reached
0011C1r 3               
0011C1r 3               
0011C1r 3               
0011C1r 3               ; ## EMPTY_BUFFERS ( -- ) "Empty all buffers without saving"
0011C1r 3               ; ## "empty-buffers"  tested  ANS block ext
0011C1r 3                       ; """https://forth-standard.org/standard/block/EMPTY-BUFFERS"""
0011C1r 3               xt_empty_buffers:
0011C1r 3                               ; Set the buffer status to empty.
0011C1r 3  A0 2C                        ldy #buffstatus_offset
0011C3r 3  A9 00                        lda #0
0011C5r 3  91 rr                        sta (up),y      ; Only LSB is used.
0011C7r 3               z_empty_buffers:
0011C7r 3  60                           rts
0011C8r 3               
0011C8r 3               
0011C8r 3               ; ## ENDCASE (C: case-sys -- ) ( x -- ) "Conditional flow control"
0011C8r 3               ; ## "endcase"  auto  ANS core ext
0011C8r 3                       ; """http://forth-standard.org/standard/core/ENDCASE"""
0011C8r 3               
0011C8r 3               xt_endcase:
0011C8r 3                               ; Postpone DROP to remove the item
0011C8r 3                               ; being checked.
0011C8r 3  A0 rr                        ldy #>xt_drop
0011CAr 3  A9 rr                        lda #<xt_drop
0011CCr 3  20 rr rr                     jsr cmpl_subroutine
0011CFr 3               
0011CFr 3                               ; There are a number of address (of branches that need their
0011CFr 3                               ; jump addressed filled in with the address of right here).
0011CFr 3                               ; Keep calling THEN to deal with them until we reach the
0011CFr 3                               ; 0 that CASE put on the stack at the beginning.
0011CFr 3               @endcase_loop:
0011CFr 3                               ; Check for 0 on the stack.
0011CFr 3  B5 00                        lda 0,x
0011D1r 3  15 01                        ora 1,x
0011D3r 3  F0 05                        beq @done
0011D5r 3               
0011D5r 3  20 rr rr                     jsr xt_then
0011D8r 3  80 F5                        bra @endcase_loop
0011DAr 3               @done:
0011DAr 3                               ; Remove the 0 from the stack.
0011DAr 3  E8                           inx
0011DBr 3  E8                           inx
0011DCr 3  60           z_endcase:      rts
0011DDr 3               
0011DDr 3               
0011DDr 3               
0011DDr 3               ; ## ENDOF (C: case-sys1 of-sys1-- case-sys2) ( -- ) "Conditional flow control"
0011DDr 3               ; ## "endof"  auto  ANS core ext
0011DDr 3                       ; """http://forth-standard.org/standard/core/ENDOF
0011DDr 3                       ; This is a dummy entry, the code is shared with ELSE
0011DDr 3                       ; """
0011DDr 3               
0011DDr 3               
0011DDr 3               ; ## ENVIRONMENT_Q  ( addr u -- 0 | i*x true )  "Return system information"
0011DDr 3               ; ## "environment?"  auto  ANS core
0011DDr 3                       ; """https://forth-standard.org/standard/core/ENVIRONMENTq
0011DDr 3                       ;
0011DDr 3                       ; By ANS definition, we use upper-case strings here, see the
0011DDr 3                       ; string file for details. This can be realized as a high-level
0011DDr 3                       ; Forth word as
0011DDr 3                       ;
0011DDr 3                       ; : STRING_OF POSTPONE 2OVER POSTPONE COMPARE POSTPONE 0=
0011DDr 3                       ;    POSTPONE IF POSTPONE 2DROP ; IMMEDIATE COMPILE-ONLY
0011DDr 3                       ; HEX
0011DDr 3                       ; : ENVIRONMENT? ( C-ADDR U -- FALSE | I*X TRUE )
0011DDr 3                       ; CASE
0011DDr 3                       ; S" /COUNTED-STRING"    STRING_OF  7FFF TRUE ENDOF
0011DDr 3                       ; S" /HOLD"              STRING_OF    FF TRUE ENDOF
0011DDr 3                       ; S" /PAD"               STRING_OF    54 TRUE ENDOF ( 84 DECIMAL )
0011DDr 3                       ; S" ADDRESS-UNIT-BITS"  STRING_OF     8 TRUE ENDOF
0011DDr 3                       ; S" FLOORED"            STRING_OF FALSE TRUE ENDOF ( WE HAVE SYMMETRIC )
0011DDr 3                       ; S" MAX-CHAR"           STRING_OF   255 TRUE ENDOF
0011DDr 3                       ; S" MAX-D"              STRING_OF
0011DDr 3                                                    ; 7FFFFFFF. TRUE ENDOF
0011DDr 3                       ; S" MAX-N"              STRING_OF  7FFF TRUE ENDOF
0011DDr 3                       ; S" MAX-U"              STRING_OF  FFFF TRUE ENDOF
0011DDr 3                       ; S" MAX-UD"             STRING_OF
0011DDr 3                                                    ; FFFFFFFF. TRUE ENDOF
0011DDr 3                       ; S" RETURN-STACK-CELLS" STRING_OF    80 TRUE ENDOF
0011DDr 3                       ; S" STACK-CELLS"        STRING_OF    20 TRUE ENDOF ( FROM DEFINITIONS.ASM )
0011DDr 3                       ; ( DEFAULT ) 2DROP FALSE FALSE ( ONE FALSE WILL DROPPED BY ENDCASE )
0011DDr 3                       ; ENDCASE ;
0011DDr 3                       ;
0011DDr 3                       ; but that uses lots of memory and increases the start up time. This
0011DDr 3                       ; word is rarely used so we can try to keep it short at the expense
0011DDr 3                       ; of speed.
0011DDr 3                       ; """
0011DDr 3               
0011DDr 3               xt_environment_q:
0011DDr 3  20 rr rr                     jsr underflow_1
0011E0r 3               
0011E0r 3                               ; This code is table-driven: We walk through the list of
0011E0r 3                               ; strings until we find one that matches, and then we take
0011E0r 3                               ; the equivalent data from the results table. This is made
0011E0r 3                               ; a bit harder by the fact that some of these return a
0011E0r 3                               ; double-cell number and some a single-cell one.
0011E0r 3               
0011E0r 3                               ; We will walk through the table with variables that return
0011E0r 3                               ; a single-cell result
0011E0r 3  A0 00                        ldy #00                 ; counter for table
0011E2r 3               
0011E2r 3                               ; We use a flag on the the stack to signal if we have a single-cell
0011E2r 3                               ; or double-cell number. We use 0 to signal single-cell and 1 for
0011E2r 3                               ; double-cell.
0011E2r 3  5A                           phy
0011E3r 3               @table_loop:
0011E3r 3                               ; We arrived here with the address of the string to be checked
0011E3r 3                               ; on the stack. We make a copy. Index is in Y
0011E3r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
0011E6r 3               
0011E6r 3                               ; We do our work on the TOS to speed things up
0011E6r 3  CA                           dex
0011E7r 3  CA                           dex                     ; ( addr u addr u ? )
0011E8r 3               
0011E8r 3                               ; Get address of string to check from table
0011E8r 3  B9 rr rr                     lda env_table_single,y
0011EBr 3  95 00                        sta 0,x
0011EDr 3  C8                           iny
0011EEr 3  B9 rr rr                     lda env_table_single,y
0011F1r 3  95 01                        sta 1,x                 ; ( addr u addr u addr-t )
0011F3r 3  C8                           iny
0011F4r 3               
0011F4r 3                               ; See if this is the last entry. The LSB is still in A
0011F4r 3  15 00                        ora 0,x
0011F6r 3  F0 4D                        beq @table_done
0011F8r 3               
0011F8r 3                               ; We have a string entry. The address there is stored in
0011F8r 3                               ; old-style address format, that is, the first byte is the
0011F8r 3                               ; length of the string
0011F8r 3  5A                           phy                     ; save Y, which is used by COUNT
0011F9r 3  20 rr rr                     jsr xt_count            ; ( addr u addr u addr-s u-s )
0011FCr 3  20 rr rr                     jsr xt_compare          ; ( addr u f )
0011FFr 3  7A                           ply
001200r 3               
001200r 3                               ; If we found a match (flag is zero -- COMPARE is weird
001200r 3                               ; that way), return the result
001200r 3  B5 00                        lda 0,x
001202r 3  15 01                        ora 1,x
001204r 3  F0 04                        beq @got_result
001206r 3               
001206r 3                               ; Flag is not zero, so not a perfect match, so try next
001206r 3                               ; word
001206r 3  E8                           inx                     ; DROP, now ( addr u )
001207r 3  E8                           inx
001208r 3               
001208r 3  80 D9                        bra @table_loop
00120Ar 3               
00120Ar 3               @got_result:
00120Ar 3                               ; We arrive here with ( addr u -1 ) and know that we've found
00120Ar 3                               ; a match. The index of the match+2 is in Y.
00120Ar 3  E8                           inx                     ; drop flag, now ( addr u )
00120Br 3  E8                           inx
00120Cr 3  88                           dey                     ; go back to index we had
00120Dr 3  88                           dey
00120Er 3               
00120Er 3                               ; See if this is a single-cell word.
00120Er 3  68                           pla
00120Fr 3  D0 0D                        bne @double_result
001211r 3               
001211r 3                               ; Single-cell result
001211r 3  B9 rr rr                     lda env_results_single,y
001214r 3  95 02                        sta 2,x
001216r 3  C8                           iny
001217r 3  B9 rr rr                     lda env_results_single,y
00121Ar 3  95 03                        sta 3,x                 ; ( res u )
00121Cr 3               
00121Cr 3  80 1F                        bra @set_flag
00121Er 3               
00121Er 3               @double_result:
00121Er 3                               ; This is a double-celled result, which means we have to
00121Er 3                               ; fool around with the index some more. We also need a
00121Er 3                               ; further cell on the stack
00121Er 3  CA                           dex                     ; ( addr u ? )
00121Fr 3  CA                           dex
001220r 3               
001220r 3                               ; We have 11 single-cell words we check, plus the 0000 as
001220r 3                               ; a marker for the end of the table, so we arrive here
001220r 3                               ; with Y as 22 or more. To get the index for the double-
001220r 3                               ; cell words, we move the result
001220r 3  98                           tya
001221r 3  38                           sec
001222r 3  E9 18                        sbc #24
001224r 3               
001224r 3                               ; We have four bytes per entry in the table, but the index
001224r 3                               ; keeps increasing by two, so we only have to multiply by
001224r 3                               ; two (shift left once) to get the right result
001224r 3  0A                           asl
001225r 3  A8                           tay
001226r 3               
001226r 3  B9 rr rr                     lda env_results_double,y
001229r 3  95 02                        sta 2,x
00122Br 3  C8                           iny
00122Cr 3  B9 rr rr                     lda env_results_double,y
00122Fr 3  95 03                        sta 3,x                 ; ( res u ? )
001231r 3  C8                           iny
001232r 3               
001232r 3  B9 rr rr                     lda env_results_double,y
001235r 3  95 04                        sta 4,x
001237r 3  C8                           iny
001238r 3  B9 rr rr                     lda env_results_double,y
00123Br 3  95 05                        sta 5,x                 ; ( res res ? )
00123Dr 3               
00123Dr 3                               ; fall through to @set_flag
00123Dr 3               @set_flag:
00123Dr 3  A9 FF                        lda #$ff
00123Fr 3  95 00                        sta 0,x
001241r 3  95 01                        sta 1,x                 ; ( res f )
001243r 3               
001243r 3  80 14                        bra @done
001245r 3               @table_done:
001245r 3                               ; We're done with a table, because the entry was a zero.
001245r 3                               ; We arrive here with ( addr u addr u 0 )
001245r 3               
001245r 3                               ; We take the flag from stack and increase it by one. If the
001245r 3                               ; flag is zero, we have just completed the single-cell number
001245r 3                               ; strings, so we in increase the flag and try again. Otherwise,
001245r 3                               ; we're done with the double-cell table without having found
001245r 3                               ; a match, and we're done
001245r 3  68                           pla
001246r 3  D0 09                        bne @no_match
001248r 3               
001248r 3                               ; Flag is zero, increase it to one and start over to check
001248r 3                               ; double-cell values
001248r 3  1A                           inc
001249r 3  48                           pha
00124Ar 3               
00124Ar 3  8A                           txa
00124Br 3  18                           clc
00124Cr 3  69 06                        adc #6                  ; skip six bytes
00124Er 3  AA                           tax                     ; ( addr u )
00124Fr 3               
00124Fr 3  80 92                        bra @table_loop
001251r 3               @no_match:
001251r 3                               ; Bummer, not found. We arrive here with
001251r 3                               ; ( addr u addr u 0 ) and need to return just a zero
001251r 3  8A                           txa
001252r 3  18                           clc
001253r 3  69 0A                        adc #10
001255r 3  AA                           tax                     ; ( addr ) - not ( 0 ) !
001256r 3               
001256r 3  20 rr rr                     jsr xt_false
001259r 3               @done:
001259r 3               z_environment_q:
001259r 3  60                           rts
00125Ar 3               
00125Ar 3               
00125Ar 3               ; Tables for ENVIRONMENT?. We use two separate ones, one for the single-cell
00125Ar 3               ; results and one for the double-celled results. The zero cell at the
00125Ar 3               ; end of each table marks its, uh, end. The strings themselves are defined
00125Ar 3               ; in strings.asm. Note if we add more entries to the single-cell table, we
00125Ar 3               ; have to adapt the result code for double printout, where we subtract 22
00125Ar 3               ; (two bytes each single-cell string and two bytes for the end-of-table
00125Ar 3               ; marker 0000
00125Ar 3               env_table_single:
00125Ar 3  rr rr rr rr          .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
00125Er 3  rr rr rr rr  
001262r 3  rr rr        
001264r 3  rr rr rr rr          .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
001268r 3  rr rr rr rr  
00126Cr 3  rr rr rr rr          .word envs_sc, envs_wl, 0000
001270r 3  00 00        
001272r 3               
001272r 3               env_table_double:
001272r 3  rr rr rr rr          .word envs_max_d, envs_max_ud, 0000
001276r 3  00 00        
001278r 3               
001278r 3               env_results_single:
001278r 3  FF 7F                .word $7FFF     ; /COUNTED-STRING
00127Ar 3  FF 00                .word $00FF     ; /HOLD
00127Cr 3  54 00                .word $0054     ; /PAD (this is 84 decimal)
00127Er 3  08 00                .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
001280r 3  00 00                .word 0000      ; FLOORED ("FALSE", we have symmetric)
001282r 3  FF 00                .word $00FF     ; MAX-CHAR
001284r 3  FF 7F                .word $7FFF     ; MAX-N
001286r 3  FF FF                .word $FFFF     ; MAX-U
001288r 3  80 00                .word $0080     ; RETURN-STACK-CELLS
00128Ar 3  20 00                .word $0020     ; STACK-CELLS (from definitions.asm)
00128Cr 3  09 00                .word $0009     ; WORDLISTS
00128Er 3               
00128Er 3               env_results_double:
00128Er 3  FF 7F FF FF          .word $7FFF, $FFFF      ; MAX-D
001292r 3  FF FF FF FF          .word $FFFF, $FFFF      ; MAX-UD
001296r 3               
001296r 3               
001296r 3               ; ## EQUAL ( n n -- f ) "See if TOS and NOS are equal"
001296r 3               ; ## "="  auto  ANS core
001296r 3                       ; """https://forth-standard.org/standard/core/Equal"""
001296r 3               
001296r 3               xt_equal:
001296r 3  20 rr rr                     jsr underflow_2
001299r 3               
001299r 3  B5 00                        lda 0,x                 ; LSB
00129Br 3  D5 02                        cmp 2,x
00129Dr 3  D0 0A                        bne @false
00129Fr 3               
00129Fr 3  B5 01                        lda 1,x                 ; MSB
0012A1r 3  D5 03                        cmp 3,x
0012A3r 3  D0 04                        bne @false
0012A5r 3               
0012A5r 3  A9 FF                        lda #$ff
0012A7r 3  80 02                        bra @done
0012A9r 3               
0012A9r 3  A9 00        @false:         lda #0                  ; drop thru to done
0012ABr 3               
0012ABr 3  95 02        @done:          sta 2,x
0012ADr 3  95 03                        sta 3,x
0012AFr 3               
0012AFr 3  E8                           inx
0012B0r 3  E8                           inx
0012B1r 3               
0012B1r 3  60           z_equal:        rts
0012B2r 3               
0012B2r 3               
0012B2r 3               
0012B2r 3               ; ## BLANK ( addr u -- ) "Fill memory region with spaces"
0012B2r 3               ; ## "blank"  auto  ANS string
0012B2r 3                       ; """https://forth-standard.org/standard/string/BLANK"""
0012B2r 3               xt_blank:
0012B2r 3                               ; We don't check for underflow here because
0012B2r 3                               ; we deal with that in FILL
0012B2r 3  CA                           dex
0012B3r 3  CA                           dex
0012B4r 3  A9 20                        lda #AscSP
0012B6r 3  95 00                        sta 0,x
0012B8r 3  74 01                        stz 1,x
0012BAr 3               
0012BAr 3  80 06                        bra xt_fill     ; skip over code for ERASE
0012BCr 3               
0012BCr 3               
0012BCr 3               ; ## ERASE ( addr u -- ) "Fill memory region with zeros"
0012BCr 3               ; ## "erase"  auto  ANS core ext
0012BCr 3                       ; """https://forth-standard.org/standard/core/ERASE
0012BCr 3                       ; Note that ERASE works with "address" units
0012BCr 3                       ; (bytes), not cells.
0012BCr 3                       ; """
0012BCr 3               
0012BCr 3               xt_erase:
0012BCr 3                               ; We don't check for underflow here because
0012BCr 3                               ; we deal with that in FILL
0012BCr 3  CA                           dex
0012BDr 3  CA                           dex
0012BEr 3  74 00                        stz 0,x
0012C0r 3  74 01                        stz 1,x
0012C2r 3               
0012C2r 3                               ; fall through to FILL
0012C2r 3               
0012C2r 3               ; ## FILL ( addr u char -- ) "Fill a memory region with a character"
0012C2r 3               ; ## "fill"  auto  ANS core
0012C2r 3                       ; """https://forth-standard.org/standard/core/FILL
0012C2r 3                       ; Fill u bytes of memory with char starting at addr. Note that
0012C2r 3                       ; this works on bytes, not on cells. On an 8-bit machine such as the
0012C2r 3                       ; 65c02, this is a serious pain in the rear. It is not defined what
0012C2r 3                       ; happens when we reach the end of the address space
0012C2r 3                       ; """
0012C2r 3               xt_fill:
0012C2r 3  20 rr rr                     jsr underflow_3
0012C5r 3               
0012C5r 3                               ; We use tmp1 to hold the address
0012C5r 3  B5 04                        lda 4,x         ; LSB
0012C7r 3  85 rr                        sta tmp1
0012C9r 3  B5 05                        lda 5,x
0012CBr 3  85 rr                        sta tmp1+1
0012CDr 3               
0012CDr 3                               ; We use tmp2 to hold the counter
0012CDr 3  B5 02                        lda 2,x
0012CFr 3  85 rr                        sta tmp2
0012D1r 3  B5 03                        lda 3,x
0012D3r 3  85 rr                        sta tmp2+1
0012D5r 3               
0012D5r 3                               ; We use Y to hold the character
0012D5r 3  B5 00                        lda 0,x
0012D7r 3  A8                           tay
0012D8r 3               @loop:
0012D8r 3                               ; Unfortunately, we also need to make sure that we don't
0012D8r 3                               ; write further than the end of the RAM. So RAM_END must
0012D8r 3                               ; be larger or equal to the current address
0012D8r 3  A9 80                        lda #>ram_end           ; MSB
0012DAr 3  C5 rr                        cmp tmp1+1
0012DCr 3  90 21                        bcc @done               ; RAM_END < TMP1, so leave
0012DEr 3  D0 06                        bne @check_counter      ; RAM_END is not smaller and not equal
0012E0r 3               
0012E0r 3  A9 00                        lda #<ram_end           ; LSB, because MSBs were equal
0012E2r 3  C5 rr                        cmp tmp1
0012E4r 3  90 19                        bcc @done               ; RAM_END < TMP1, so leave
0012E6r 3               
0012E6r 3               @check_counter:
0012E6r 3                               ; See if our counter has reached zero
0012E6r 3  A5 rr                        lda tmp2
0012E8r 3  05 rr                        ora tmp2+1
0012EAr 3  F0 13                        beq @done
0012ECr 3               
0012ECr 3                               ; We're not in ROM and we still have stuff on the counter, so
0012ECr 3                               ; let's actually do what we came here to do
0012ECr 3  98                           tya
0012EDr 3  92 rr                        sta (tmp1)
0012EFr 3               
0012EFr 3                               ; Adjust the counter
0012EFr 3  A5 rr                        lda tmp2
0012F1r 3  D0 02                        bne @1
0012F3r 3  C6 rr                        dec tmp2+1
0012F5r 3  C6 rr        @1:               dec tmp2
0012F7r 3               
0012F7r 3                               ; Next address
0012F7r 3  E6 rr                        inc tmp1
0012F9r 3  D0 DD                        bne @loop
0012FBr 3  E6 rr                        inc tmp1+1
0012FDr 3               
0012FDr 3  80 D9                        bra @loop
0012FFr 3               
0012FFr 3               @done:
0012FFr 3                               ; Drop three cells off the Data Stack. This uses one byte
0012FFr 3                               ; less than six times INX
0012FFr 3  8A                           txa
001300r 3  18                           clc
001301r 3  69 06                        adc #6
001303r 3  AA                           tax
001304r 3               z_blank:
001304r 3               z_erase:
001304r 3  60           z_fill:         rts
001305r 3               
001305r 3               
001305r 3               
001305r 3               ; ## EXECUTE ( xt -- ) "Jump to word based on execution token"
001305r 3               ; ## "execute"  auto  ANS core
001305r 3                       ; """https://forth-standard.org/standard/core/EXECUTE"""
001305r 3               xt_execute:
001305r 3  20 rr rr                     jsr underflow_1
001308r 3               
001308r 3  20 rr rr                     jsr doexecute   ; do not combine to JMP (native coding)
00130Br 3               
00130Br 3  60           z_execute:      rts
00130Cr 3               
00130Cr 3               doexecute:
00130Cr 3  B5 00                        lda 0,x
00130Er 3  85 rr                        sta ip
001310r 3  B5 01                        lda 1,x
001312r 3  85 rr                        sta ip+1
001314r 3               
001314r 3  E8                           inx
001315r 3  E8                           inx
001316r 3               
001316r 3                               ; we don't need a RTS here because we highjack the RTS of
001316r 3                               ; the word we're calling to get back to xt_execute
001316r 3  6C rr rr                     jmp (ip)
001319r 3               
001319r 3               ; end of doexecute
001319r 3               
001319r 3               
001319r 3               ; ## EXECUTE_PARSING ( addr u xt -- ) "Pass a string to a parsing word"
001319r 3               ; ## "execute-parsing"  auto  Gforth
001319r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001319r 3                       ; Execute the parsing word defined by the execution token (xt) on the
001319r 3                       ; string as if it were passed on the command line. See the file
001319r 3                       ; tests/tali.fs for examples.
001319r 3                       ;
001319r 3                       ; Note that this word is coded completely
001319r 3                       ; different in its Gforth version, see the file execute-parsing.fs
001319r 3                       ; (in /usr/share/gforth/0.7.3/compat/ on Ubuntu 18.04 LTS) for details.
001319r 3                       ; """
001319r 3               xt_execute_parsing:
001319r 3  20 rr rr                     jsr underflow_3
00131Cr 3               
00131Cr 3  20 rr rr                     jsr xt_input_to_r       ; save normal input for later
00131Fr 3  20 rr rr                     jsr xt_not_rote         ; -ROT ( xt addr u )
001322r 3               
001322r 3  B5 00                        lda 0,x                 ; TOS is new ciblen
001324r 3  85 rr                        sta ciblen
001326r 3  B5 01                        lda 1,x
001328r 3  85 rr                        sta ciblen+1
00132Ar 3               
00132Ar 3  B5 02                        lda 2,x                 ; NOS is new cib
00132Cr 3  85 rr                        sta cib
00132Er 3  B5 03                        lda 3,x
001330r 3  85 rr                        sta cib+1
001332r 3               
001332r 3  64 rr                        stz toin                ; Set >IN to zero
001334r 3  64 rr                        stz toin+1
001336r 3               
001336r 3  20 rr rr                     jsr xt_two_drop         ; 2DROP ( xt )
001339r 3  20 rr rr                     jsr xt_execute
00133Cr 3               
00133Cr 3  20 rr rr                     jsr xt_r_to_input
00133Fr 3               
00133Fr 3               z_execute_parsing:
00133Fr 3  60                           rts
001340r 3               
001340r 3               
001340r 3               ; ## EXIT ( -- ) "Return control to the calling word immediately"
001340r 3               ; ## "exit"  auto  ANS core
001340r 3                       ; """https://forth-standard.org/standard/core/EXIT
001340r 3                       ; If we're in a loop, we need to UNLOOP first and get everything
001340r 3                       ; we we might have put on the Return Stack off as well. This should
001340r 3                       ; be natively compiled.
001340r 3                       ; """
001340r 3               
001340r 3               xt_exit:
001340r 3  60                           rts             ; keep before z_exit
001341r 3               z_exit:                         ; never reached
001341r 3               
001341r 3               
001341r 3               
001341r 3               ; ## FALSE ( -- f ) "Push flag FALSE to Data Stack"
001341r 3               ; ## "false"  auto  ANS core ext
001341r 3                       ; """https://forth-standard.org/standard/core/FALSE"""
001341r 3               xt_false:
001341r 3  CA                           dex
001342r 3  CA                           dex
001343r 3  74 00                        stz 0,x
001345r 3  74 01                        stz 1,x
001347r 3               
001347r 3  60           z_false:        rts
001348r 3               
001348r 3               
001348r 3               ; ## FETCH ( addr -- n ) "Push cell content from memory to stack"
001348r 3               ; ## "@"  auto  ANS core
001348r 3                       ; """https://forth-standard.org/standard/core/Fetch"""
001348r 3               xt_fetch:
001348r 3  20 rr rr                     jsr underflow_1
00134Br 3               
00134Br 3  A1 00                        lda (0,x)               ; LSB
00134Dr 3  A8                           tay
00134Er 3  F6 00                        inc 0,x
001350r 3  D0 02                        bne @1
001352r 3  F6 01                        inc 1,x
001354r 3               @1:
001354r 3  A1 00                        lda (0,x)               ; MSB
001356r 3  95 01                        sta 1,x
001358r 3  94 00                        sty 0,x
00135Ar 3               
00135Ar 3  60           z_fetch:        rts
00135Br 3               
00135Br 3               
00135Br 3               ; ## FIND ( caddr -- addr 0 | xt 1 | xt -1 ) "Find word in Dictionary"
00135Br 3               ; ## "find"  auto  ANS core
00135Br 3                       ; """https://forth-standard.org/standard/core/FIND
00135Br 3                       ; Included for backwards compatibility only, because it still
00135Br 3                       ; can be found in so may examples. It should, however, be replaced
00135Br 3                       ; by FIND-NAME. Counted string either returns address with a FALSE
00135Br 3                       ; flag if not found in the Dictionary, or the xt with a flag to
00135Br 3                       ; indicate if this is immediate or not. FIND is a wrapper around
00135Br 3                       ; FIND-NAME, we get this all over with as quickly as possible. See
00135Br 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
00135Br 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
00135Br 3                       ; """
00135Br 3               
00135Br 3               xt_find:
00135Br 3  20 rr rr                     jsr underflow_1
00135Er 3               
00135Er 3                               ; Save address in case conversion fails. We use the
00135Er 3                               ; Return Stack instead of temporary variables like TMP1
00135Er 3                               ; because this is shorter and anybody still using FIND
00135Er 3                               ; can't be worried about speed anyway
00135Er 3  B5 01                        lda 1,x                 ; MSB
001360r 3  48                           pha
001361r 3  B5 00                        lda 0,x                 ; LSB
001363r 3  48                           pha
001364r 3               
001364r 3                               ; Convert ancient-type counted string address to
001364r 3                               ; modern format
001364r 3  20 rr rr                     jsr xt_count            ; ( caddr -- addr u )
001367r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt | 0 )
00136Ar 3               
00136Ar 3  B5 00                        lda 0,x
00136Cr 3  15 01                        ora 1,x
00136Er 3  D0 0B                        bne @found_word
001370r 3               
001370r 3                               ; No word found. Return address of the string and a false
001370r 3                               ; flag
001370r 3  20 rr rr                     jsr xt_false            ; ( 0 0 )
001373r 3               
001373r 3                               ; The address needs to be restored.
001373r 3  68                           pla                     ; LSB of address
001374r 3  95 02                        sta 2,x
001376r 3  68                           pla
001377r 3  95 03                        sta 3,x                 ; MSB of address
001379r 3               
001379r 3  80 27                        bra @done               ; ( addr 0 )
00137Br 3               
00137Br 3               @found_word:
00137Br 3                               ; We don't need the address after all, dump it
00137Br 3  68                           pla
00137Cr 3  68                           pla
00137Dr 3               
00137Dr 3                               ; We arrive here with ( nt ) on the TOS. Now we have to
00137Dr 3                               ; convert the return values to FIND's format
00137Dr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001380r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001383r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001386r 3               
001386r 3  A0 00                        ldy #0                  ; Prepare flag
001388r 3               
001388r 3                               ; The flags are in the second byte of the header
001388r 3  F6 00                        inc 0,x
00138Ar 3  D0 02                        bne @1
00138Cr 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
00138Er 3               @1:
00138Er 3  A1 00                        lda (0,x)               ; ( xt char )
001390r 3  29 04                        and #IM
001392r 3  D0 08                        bne @immediate          ; bit set, we're immediate
001394r 3               
001394r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
001396r 3  95 00                        sta 0,x
001398r 3  95 01                        sta 1,x
00139Ar 3  80 06                        bra @done
00139Cr 3               
00139Cr 3               @immediate:
00139Cr 3  A9 01                        lda #1                  ; We're immediate, return 1
00139Er 3  95 00                        sta 0,x
0013A0r 3  74 01                        stz 1,x
0013A2r 3               @done:
0013A2r 3  60           z_find:         rts
0013A3r 3               
0013A3r 3               
0013A3r 3               
0013A3r 3               ; ## FIND_NAME ( addr u -- nt|0 ) "Get the name token of input word"
0013A3r 3               ; ## "find-name"  auto  Gforth
0013A3r 3               
0013A3r 3               xt_find_name:
0013A3r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0013A3r 3                       ; Given a string, find the Name Token (nt) of a word or return
0013A3r 3                       ; zero if the word is not in the dictionary. We use this instead of
0013A3r 3                       ; ancient FIND to look up words in the Dictionary passed by
0013A3r 3                       ; PARSE-NAME. Note this returns the nt, not the xt of a word like
0013A3r 3                       ; FIND. To convert, use NAME>INT. This is a Gforth word. See
0013A3r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0013A3r 3                       ; FIND calls this word
0013A3r 3                       ; """
0013A3r 3  20 rr rr                     jsr underflow_2
0013A6r 3               
0013A6r 3                               ; check for special case of an empty string (length zero)
0013A6r 3  B5 00                        lda 0,x
0013A8r 3  15 01                        ora 1,x
0013AAr 3  D0 03                        bne @nonempty
0013ACr 3               
0013ACr 3  4C rr rr                     jmp @fail_done
0013AFr 3               
0013AFr 3               @nonempty:
0013AFr 3                               ; Set up for traversing the wordlist search order.
0013AFr 3  64 rr                        stz tmp3                ; Start at the beginning
0013B1r 3               
0013B1r 3               @wordlist_loop:
0013B1r 3  A0 1E                        ldy #num_order_offset   ; Compare to byte variable #ORDER
0013B3r 3  A5 rr                        lda tmp3
0013B5r 3  D1 rr                        cmp (up),y              ; Check to see if we are done
0013B7r 3  D0 03                        bne @have_string
0013B9r 3               
0013B9r 3                               ; We ran out of wordlists to search.
0013B9r 3  4C rr rr                     jmp @fail_done
0013BCr 3               
0013BCr 3               @have_string:
0013BCr 3                               ; set up first loop iteration
0013BCr 3               
0013BCr 3                               ; Get the current wordlist id
0013BCr 3  18                           clc             ; SEARCH-ORDER is array of bytes.
0013BDr 3  69 1F                        adc #search_order_offset
0013BFr 3  A8                           tay
0013C0r 3  B1 rr                        lda (up),y      ; Get the id byte, which is the offset
0013C2r 3                                               ; into the cell array WORDLISTS
0013C2r 3               
0013C2r 3                               ; Get the DP for that wordlist.
0013C2r 3  0A                           asl                     ; Turn offset into cells offset.
0013C3r 3  18                           clc
0013C4r 3  69 06                        adc #wordlists_offset
0013C6r 3  A8                           tay
0013C7r 3  B1 rr                        lda (up),y
0013C9r 3  85 rr                        sta tmp1
0013CBr 3  C8                           iny
0013CCr 3  B1 rr                        lda (up),y
0013CEr 3  85 rr                        sta tmp1+1
0013D0r 3               
0013D0r 3  B5 02                        lda 2,x                 ; Address of mystery string
0013D2r 3  85 rr                        sta tmp2
0013D4r 3  B5 03                        lda 3,x
0013D6r 3  85 rr                        sta tmp2+1
0013D8r 3               
0013D8r 3               @loop:
0013D8r 3                               ; first quick test: Are strings the same length?
0013D8r 3  B2 rr                        lda (tmp1)
0013DAr 3  D5 00                        cmp 0,x
0013DCr 3  D0 54                        bne @next_entry
0013DEr 3               
0013DEr 3               @compare_string:
0013DEr 3                               ; are the same length, so we now have to compare each
0013DEr 3                               ; character
0013DEr 3               
0013DEr 3                               ; second quick test: Is the first character the same?
0013DEr 3  B2 rr                        lda (tmp2)      ; first character of mystery string
0013E0r 3               
0013E0r 3                               ; Lowercase the incoming charcter.
0013E0r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
0013E2r 3  B0 07                        bcs @compare_first
0013E4r 3  C9 41                        cmp #$41        ; ASCII 'A'
0013E6r 3  90 03                        bcc @compare_first
0013E8r 3               
0013E8r 3                               ; An uppercase letter has been located.  Make it
0013E8r 3                               ; lowercase.
0013E8r 3  18                           clc
0013E9r 3  69 20                        adc #$20
0013EBr 3               
0013EBr 3               @compare_first:
0013EBr 3  A0 08                        ldy #8          ; Offset in nt to name
0013EDr 3  D1 rr                        cmp (tmp1),y    ; first character of current word
0013EFr 3  D0 41                        bne @next_entry
0013F1r 3               
0013F1r 3                               ; String length is the same and the first character is the
0013F1r 3                               ; same. If the length of the string is 1, we're already done
0013F1r 3  B5 00                        lda 0,x
0013F3r 3  3A                           dec
0013F4r 3  F0 2C                        beq @success
0013F6r 3               
0013F6r 3                               ; No such luck: The strings are the same length and the first
0013F6r 3                               ; char is the same, but the word is more than one char long.
0013F6r 3                               ; So we suck it up and compare every single character. We go
0013F6r 3                               ; from back to front, because words like CELLS and CELL+ would
0013F6r 3                               ; take longer otherwise. We can also shorten the loop by one
0013F6r 3                               ; because we've already compared the first char.
0013F6r 3               
0013F6r 3                               ; The string of the word we're testing against is 8 bytes down
0013F6r 3  A5 rr                        lda tmp1
0013F8r 3  48                           pha             ; Preserve tmp1 on the return stack.
0013F9r 3  18                           clc
0013FAr 3  69 08                        adc #8
0013FCr 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
0013FEr 3  A5 rr                        lda tmp1+1
001400r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
001401r 3  69 00                        adc #0          ; we only need the carry
001403r 3  85 rr                        sta tmp1+1
001405r 3               
001405r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
001407r 3  88                           dey
001408r 3               
001408r 3               @string_loop:
001408r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
00140Ar 3               
00140Ar 3                               ; Lowercase the incoming charcter.
00140Ar 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
00140Cr 3  B0 07                        bcs @check_char
00140Er 3  C9 41                        cmp #$41        ; ASCII 'A'
001410r 3  90 03                        bcc @check_char
001412r 3               
001412r 3                               ; An uppercase letter has been located.  Make it
001412r 3                               ; lowercase.
001412r 3  18                           clc
001413r 3  69 20                        adc #$20
001415r 3               
001415r 3               @check_char:
001415r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
001417r 3  D0 13                        bne @next_entry_tmp1
001419r 3               
001419r 3  88                           dey
00141Ar 3  D0 EC                        bne @string_loop
00141Cr 3               
00141Cr 3               @success_tmp1:
00141Cr 3  68                           pla             ; Restore tmp1 from the return stack.
00141Dr 3  85 rr                        sta tmp1+1
00141Fr 3  68                           pla
001420r 3  85 rr                        sta tmp1
001422r 3               
001422r 3               @success:
001422r 3                               ; The strings match. Put correct nt NOS, because we'll drop
001422r 3                               ; TOS before we leave
001422r 3  A5 rr                        lda tmp1
001424r 3  95 02                        sta 2,x
001426r 3  A5 rr                        lda tmp1+1
001428r 3  95 03                        sta 3,x
00142Ar 3               
00142Ar 3  80 20                        bra @done
00142Cr 3               
00142Cr 3               @next_entry_tmp1:
00142Cr 3  68                           pla             ; Restore tmp1 from the return stack.
00142Dr 3  85 rr                        sta tmp1+1
00142Fr 3  68                           pla
001430r 3  85 rr                        sta tmp1
001432r 3               
001432r 3               @next_entry:
001432r 3                               ; Not the same, so we get the next word. Next header
001432r 3                               ; address is two bytes down
001432r 3  A0 02                        ldy #2
001434r 3  B1 rr                        lda (tmp1),y
001436r 3  48                           pha
001437r 3  C8                           iny
001438r 3  B1 rr                        lda (tmp1),y
00143Ar 3  85 rr                        sta tmp1+1
00143Cr 3  68                           pla
00143Dr 3  85 rr                        sta tmp1
00143Fr 3               
00143Fr 3                               ; If we got a zero, we've walked the whole Dictionary and
00143Fr 3                               ; return as a failure, otherwise try again
00143Fr 3  05 rr                        ora tmp1+1
001441r 3  D0 95                        bne @loop
001443r 3               
001443r 3                               ; Move on to the next wordlist in the search order.
001443r 3  E6 rr                        inc tmp3
001445r 3  4C rr rr                     jmp @wordlist_loop
001448r 3               
001448r 3               @fail_done:
001448r 3  74 02                        stz 2,x         ; failure flag
00144Ar 3  74 03                        stz 3,x
00144Cr 3               @done:
00144Cr 3  E8                           inx
00144Dr 3  E8                           inx
00144Er 3               
00144Er 3  60           z_find_name:    rts
00144Fr 3               
00144Fr 3               
00144Fr 3               
00144Fr 3               ; ## FLUSH ( -- ) "Save dirty buffers and empty buffers"
00144Fr 3               ; ## "flush"  auto  ANS block
00144Fr 3                       ; """https://forth-standard.org/standard/block/FLUSH"""
00144Fr 3               xt_flush:
00144Fr 3  20 rr rr                     jsr xt_save_buffers
001452r 3               
001452r 3                               ; Set the buffer status to empty.
001452r 3  A0 2C                        ldy #buffstatus_offset
001454r 3  A9 00                        lda #0
001456r 3  91 rr                        sta (up),y      ; Only LSB is used.
001458r 3               z_flush:
001458r 3  60                           rts
001459r 3               
001459r 3               
001459r 3               ; ## FM_SLASH_MOD ( d n1  -- rem n2 ) "Floored signed division"
001459r 3               ; ## "fm/mod"  auto  ANS core
001459r 3                       ; """https://forth-standard.org/standard/core/FMDivMOD
001459r 3                       ; Note that by default, Tali Forth uses SM/REM for most things.
001459r 3                       ;
001459r 3                       ; There are various ways to realize this. We follow EForth with
001459r 3                       ;    DUP 0< DUP >R  IF NEGATE >R DNEGATE R> THEN >R DUP
001459r 3                       ;    0<  IF R@ + THEN  R> UM/MOD R> IF SWAP NEGATE SWAP THEN
001459r 3                       ; See (http://www.forth.org/eforth.html). However you can also
001459r 3                       ; go FM/MOD via SM/REM (http://www.figuk.plus.com/build/arith.htm):
001459r 3                       ;     DUP >R  SM/REM DUP 0< IF SWAP R> + SWAP 1+ ELSE  R> DROP THEN
001459r 3                       ; """
001459r 3               
001459r 3               xt_fm_slash_mod:
001459r 3  20 rr rr                     jsr underflow_3
00145Cr 3               
00145Cr 3                               ; if sign of n1 is negative, negate both n1 and d
00145Cr 3  64 rr                        stz tmp2        ; default: n is positive
00145Er 3  B5 01                        lda 1,x         ; MSB of n1
001460r 3  10 0E                        bpl @check_d
001462r 3               
001462r 3  E6 rr                        inc tmp2        ; set flag to negative for n1
001464r 3  20 rr rr                     jsr xt_negate   ; NEGATE
001467r 3  20 rr rr                     jsr xt_to_r     ; >R
00146Ar 3  20 rr rr                     jsr xt_dnegate  ; DNEGATE
00146Dr 3  20 rr rr                     jsr xt_r_from   ; R>
001470r 3               
001470r 3               @check_d:
001470r 3                               ; If d is negative, add n1 to high cell of d
001470r 3  B5 03                        lda 3,x         ; MSB of high word of d
001472r 3  10 0D                        bpl @multiply
001474r 3               
001474r 3  18                           clc
001475r 3  B5 00                        lda 0,x         ; LSB of n1
001477r 3  75 02                        adc 2,x         ; LSB of dh
001479r 3  95 02                        sta 2,x
00147Br 3               
00147Br 3  B5 01                        lda 1,x         ; MSB of n1
00147Dr 3  75 03                        adc 3,x         ; MSB of dh
00147Fr 3  95 03                        sta 3,x
001481r 3               
001481r 3               @multiply:
001481r 3  20 rr rr                     jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
001484r 3               
001484r 3                               ; if n was negative, negate the result
001484r 3  A5 rr                        lda tmp2
001486r 3  F0 07                        beq @done
001488r 3               
001488r 3  E8                           inx             ; pretend that we SWAP
001489r 3  E8                           inx
00148Ar 3  20 rr rr                     jsr xt_negate
00148Dr 3  CA                           dex
00148Er 3  CA                           dex
00148Fr 3               @done:
00148Fr 3  60           z_fm_slash_mod: rts
001490r 3               
001490r 3               
001490r 3               
001490r 3               ; ## FORTH ( -- ) "Replace first WID in search order with Forth-Wordlist"
001490r 3               ; ## "forth"  auto  ANS search ext
001490r 3                       ; """https://forth-standard.org/standard/search/FORTH"""
001490r 3               xt_forth:
001490r 3  A0 1F                        ldy #search_order_offset
001492r 3  A9 00                        lda #0          ; The WID for Forth is 0.
001494r 3               
001494r 3  91 rr                        sta (up),y
001496r 3               z_forth:
001496r 3  60                           rts
001497r 3               
001497r 3               
001497r 3               ; This is a special jsr target to skip the zeroing of BLK at the beginning
001497r 3               ; of evaluate.  It's used by LOAD to allow setting BLK while the block is
001497r 3               ; being evaluated.  Evaluate's normal behavior is to zero BLK.
001497r 3               load_evaluate:
001497r 3                               ; Set a flag (using tmp1) to not zero BLK
001497r 3  A9 FF                        lda #$FF
001499r 3  85 rr                        sta tmp1
00149Br 3  80 11                        bra load_evaluate_start
00149Dr 3               
00149Dr 3               ; ## EVALUATE ( addr u -- ) "Execute a string"
00149Dr 3               ; ## "evaluate"  auto  ANS core
00149Dr 3                       ; """https://forth-standard.org/standard/core/EVALUATE
00149Dr 3                       ; Set SOURCE-ID to -1, make addr u the input source, set >IN to zero.
00149Dr 3                       ; After processing the line, revert to old input source. We use this
00149Dr 3                       ; to compile high-level Forth words and user-defined words during
00149Dr 3                       ; start up and cold boot. In contrast to ACCEPT, we need to, uh,
00149Dr 3                       ; accept more than 255 characters here, even though it's a pain in
00149Dr 3                       ; the 8-bit.
00149Dr 3                       ; """
00149Dr 3               
00149Dr 3               xt_evaluate:
00149Dr 3  20 rr rr                     jsr underflow_2
0014A0r 3               
0014A0r 3                               ; Clear the flag to zero BLK.  Only LOAD will set the flag,
0014A0r 3                               ; and will set the block number.
0014A0r 3  64 rr                        stz tmp1
0014A2r 3               
0014A2r 3                               ; If u is zero (which can happen a lot for the user-defined
0014A2r 3                               ; words), just leave again
0014A2r 3  B5 00                        lda 0,x
0014A4r 3  15 01                        ora 1,x
0014A6r 3  D0 06                        bne _eval_got_work
0014A8r 3               
0014A8r 3  E8                           inx
0014A9r 3  E8                           inx
0014AAr 3  E8                           inx
0014ABr 3  E8                           inx
0014ACr 3               
0014ACr 3  80 42                        bra _eval_done
0014AEr 3               
0014AEr 3               ; Special entry point for LOAD to bypass the zeroing of BLK.
0014AEr 3               load_evaluate_start:
0014AEr 3               _eval_got_work:
0014AEr 3                               ; Save the current value of BLK on the return stack.
0014AEr 3  A0 01                        ldy #blk_offset+1
0014B0r 3  B1 rr                        lda (up),y
0014B2r 3  48                           pha
0014B3r 3  88                           dey
0014B4r 3  B1 rr                        lda (up),y
0014B6r 3  48                           pha
0014B7r 3               
0014B7r 3                               ; See if we should zero BLK.
0014B7r 3  A5 rr                        lda tmp1
0014B9r 3  D0 05                        bne @nozero
0014BBr 3               
0014BBr 3                               ; Set BLK to zero.
0014BBr 3                               ; lda #0        ; A is already zero from loading tmp1
0014BBr 3  91 rr                        sta (up),y
0014BDr 3  C8                           iny
0014BEr 3  91 rr                        sta (up),y
0014C0r 3               
0014C0r 3               @nozero:
0014C0r 3                               ; Save the input state to the Return Stack
0014C0r 3  20 rr rr                     jsr xt_input_to_r
0014C3r 3               
0014C3r 3                               ; set SOURCE-ID to -1
0014C3r 3  A9 FF                        lda #$ff
0014C5r 3  85 rr                        sta insrc
0014C7r 3  85 rr                        sta insrc+1
0014C9r 3               
0014C9r 3                               ; set >IN to zero
0014C9r 3  64 rr                        stz toin
0014CBr 3  64 rr                        stz toin+1
0014CDr 3               
0014CDr 3                               ; move TOS and NOS to input buffers
0014CDr 3  B5 00                        lda 0,x
0014CFr 3  85 rr                        sta ciblen
0014D1r 3  B5 01                        lda 1,x
0014D3r 3  85 rr                        sta ciblen+1
0014D5r 3               
0014D5r 3  B5 02                        lda 2,x
0014D7r 3  85 rr                        sta cib
0014D9r 3  B5 03                        lda 3,x
0014DBr 3  85 rr                        sta cib+1
0014DDr 3               
0014DDr 3  E8                           inx             ; A clean stack is a clean mind
0014DEr 3  E8                           inx
0014DFr 3  E8                           inx
0014E0r 3  E8                           inx
0014E1r 3               
0014E1r 3  20 rr rr                     jsr interpret   ; ( -- )
0014E4r 3               
0014E4r 3                               ; restore variables
0014E4r 3  20 rr rr                     jsr xt_r_to_input
0014E7r 3               
0014E7r 3                               ; Restore BLK from the return stack.
0014E7r 3  A0 00                        ldy #blk_offset
0014E9r 3  68                           pla
0014EAr 3  91 rr                        sta (up),y
0014ECr 3  C8                           iny
0014EDr 3  68                           pla
0014EEr 3  91 rr                        sta (up),y
0014F0r 3               
0014F0r 3               _eval_done:
0014F0r 3  60           z_evaluate:     rts
0014F1r 3               
0014F1r 3               
0014F1r 3               
0014F1r 3               ; ## FORTH_WORDLIST ( -- u ) "WID for the Forth Wordlist"
0014F1r 3               ; ## "forth-wordlist"  auto  ANS search
0014F1r 3                       ; """https://forth-standard.org/standard/search/FORTH-WORDLIST"""
0014F1r 3                       ; This is a dummy entry, the actual code is shared with ZERO.
0014F1r 3               
0014F1r 3               
0014F1r 3               ; ## GET_CURRENT ( -- wid ) "Get the id of the compilation wordlist"
0014F1r 3               ; ## "get-current" auto ANS search
0014F1r 3                       ; """https://forth-standard.org/standard/search/GET-CURRENT"""
0014F1r 3               
0014F1r 3               xt_get_current:
0014F1r 3                               ; This is a little different than some of the variables
0014F1r 3                               ; in the user area as we want the value rather than
0014F1r 3                               ; the address.
0014F1r 3  CA                           dex
0014F2r 3  CA                           dex
0014F3r 3  A0 04                        ldy #current_offset
0014F5r 3  B1 rr                        lda (up),y
0014F7r 3  95 00                        sta 0,x         ; CURRENT is a byte variable
0014F9r 3  74 01                        stz 1,x         ; so the MSB is zero.
0014FBr 3               
0014FBr 3  60           z_get_current:  rts
0014FCr 3               
0014FCr 3               
0014FCr 3               
0014FCr 3               ; ## GET_ORDER ( -- wid_n .. wid_1 n) "Get the current search order"
0014FCr 3               ; ## "get-order" auto ANS search
0014FCr 3                       ; """https://forth-standard.org/standard/search/GET-ORDER"""
0014FCr 3               
0014FCr 3               xt_get_order:
0014FCr 3                               ; Get #ORDER - the number of wordlists in the search order.
0014FCr 3  A0 1E                        ldy #num_order_offset
0014FEr 3  B1 rr                        lda (up),y
001500r 3  85 rr                        sta tmp1
001502r 3  F0 16                        beq @done       ; If zero, there are no wordlists.
001504r 3               
001504r 3               @loop:
001504r 3                               ; Count down towards the front of the list.
001504r 3                               ; By decrementing first, we also turn the length into an offset.
001504r 3  C6 rr                        dec tmp1        ; Count down by bytes.
001506r 3               
001506r 3                               ; Get a pointer to the current wordlist, working back to front.
001506r 3  A9 1F                        lda #search_order_offset
001508r 3  18                           clc
001509r 3  65 rr                        adc tmp1
00150Br 3  A8                           tay
00150Cr 3               
00150Cr 3                               ; Put that wordlist id on the stack.
00150Cr 3  CA                           dex
00150Dr 3  CA                           dex
00150Er 3  B1 rr                        lda (up),y
001510r 3  95 00                        sta 0,x         ; Search order array is bytes, so
001512r 3  74 01                        stz 1,x         ; put a zero in the high byte.
001514r 3               
001514r 3                               ; See if that was the last one to process (first in the list).
001514r 3  A9 00                        lda #0
001516r 3  C5 rr                        cmp tmp1
001518r 3  D0 EA                        bne @loop
00151Ar 3               
00151Ar 3               @done:
00151Ar 3                               ; Put the number of items on the stack.
00151Ar 3  CA                           dex
00151Br 3  CA                           dex
00151Cr 3  A0 1E                        ldy #num_order_offset
00151Er 3  B1 rr                        lda (up),y
001520r 3  95 00                        sta 0,x
001522r 3  74 01                        stz 1,x         ; We only support 8 wordlists.
001524r 3               
001524r 3  60           z_get_order:    rts
001525r 3               
001525r 3               
001525r 3               
001525r 3               ; ## GREATER_THAN ( n n -- f ) "See if NOS is greater than TOS"
001525r 3               ; ## ">"  auto  ANS core
001525r 3                       ; """https://forth-standard.org/standard/core/more"""
001525r 3               
001525r 3               xt_greater_than:
001525r 3  20 rr rr                     jsr underflow_2
001528r 3               
001528r 3  A0 00                        ldy #0          ; default false
00152Ar 3  20 rr rr                     jsr compare_16bit
00152Dr 3               
00152Dr 3                               ; for signed numbers, NOS>TOS gives us Z=0 and N=1
00152Dr 3  F0 03                        beq @false
00152Fr 3  10 01                        bpl @false
001531r 3               
001531r 3                               ; true
001531r 3  88                           dey
001532r 3               @false:
001532r 3  98                           tya
001533r 3               
001533r 3  E8                           inx
001534r 3  E8                           inx
001535r 3  95 00                        sta 0,x
001537r 3  95 01                        sta 1,x
001539r 3               
001539r 3  60           z_greater_than: rts
00153Ar 3               
00153Ar 3               
00153Ar 3               
00153Ar 3               ; ## HERE ( -- addr ) "Put Compiler Pointer on Data Stack"
00153Ar 3               ; ## "here"  auto  ANS core
00153Ar 3                       ; """https://forth-standard.org/standard/core/HERE
00153Ar 3                       ; This code is also used by the assembler directive ARROW
00153Ar 3                       ; ("->") though as immediate"""
00153Ar 3               xt_here:
00153Ar 3               xt_asm_arrow:
00153Ar 3  CA                           dex
00153Br 3  CA                           dex
00153Cr 3  A5 rr                        lda cp
00153Er 3  95 00                        sta 0,x
001540r 3  A5 rr                        lda cp+1
001542r 3  95 01                        sta 1,x
001544r 3               
001544r 3               z_asm_arrow:
001544r 3  60           z_here:         rts
001545r 3               
001545r 3               
001545r 3               ; ## HEX ( -- ) "Change base radix to hexadecimal"
001545r 3               ; ## "hex"  auto  ANS core ext
001545r 3                       ; """https://forth-standard.org/standard/core/HEX"""
001545r 3               xt_hex:
001545r 3  A9 10                        lda #16
001547r 3  85 rr                        sta base
001549r 3  64 rr                        stz base+1              ; paranoid
00154Br 3               
00154Br 3  60           z_hex:          rts
00154Cr 3               
00154Cr 3               
00154Cr 3               ; ## HEXSTORE ( addr1 u1 addr2 -- u2 ) "Store a list of numbers"
00154Cr 3               ; ## "hexstore"  auto  Tali
00154Cr 3                       ; """Given a string addr1 u1 with numbers in the current base seperated
00154Cr 3                       ; by spaces, store the numbers at the address addr2, returning the
00154Cr 3                       ; number of elements. Non-number elements are skipped, an zero-length
00154Cr 3                       ; string produces a zero output.
00154Cr 3                       ; """
00154Cr 3               
00154Cr 3               xt_hexstore:
00154Cr 3  20 rr rr                     jsr underflow_3
00154Fr 3               
00154Fr 3  20 rr rr                     jsr xt_dup              ; Save copy of original address
001552r 3  20 rr rr                     jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
001555r 3               
001555r 3               @loop:
001555r 3                               ; Loop until string is totally consumed
001555r 3  B5 00                        lda 0,x
001557r 3  15 01                        ora 1,x
001559r 3  F0 36                        beq @done
00155Br 3               
00155Br 3  20 rr rr                     jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
00155Er 3               
00155Er 3                               ; Prepare the conversion of the number.
00155Er 3  20 rr rr                     jsr xt_two_to_r
001561r 3  20 rr rr                     jsr xt_zero
001564r 3  20 rr rr                     jsr xt_zero
001567r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
00156Ar 3  20 rr rr                     jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
00156Dr 3               
00156Dr 3                               ; If u4 is not zero, we have leftover chars and have to do
00156Dr 3                               ; things differently
00156Dr 3  B5 00                        lda 0,x
00156Fr 3  15 01                        ora 1,x
001571r 3  D0 17                        bne @have_chars_left
001573r 3               
001573r 3                               ; Normal case, this number is all done
001573r 3  20 rr rr                     jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
001576r 3  20 rr rr                     jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
001579r 3               
001579r 3                               ; Store the new value
001579r 3  20 rr rr                     jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
00157Cr 3  20 rr rr                     jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
00157Fr 3               
00157Fr 3                               ; Increase counter
00157Fr 3  20 rr rr                     jsr xt_r_from           ; R>
001582r 3  20 rr rr                     jsr xt_one_plus         ; 1+
001585r 3  20 rr rr                     jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
001588r 3  80 CB                        bra @loop
00158Ar 3               
00158Ar 3               @have_chars_left:
00158Ar 3                               ; Pathological case: Drop the rest of this number off the stack
00158Ar 3                               ; and continue with the next word. Doesn't print a warning. We
00158Ar 3                               ; need to drop four cells, that is, eight bytes
00158Ar 3  8A                           txa
00158Br 3  18                           clc
00158Cr 3  69 08                        adc #8
00158Er 3  AA                           tax
00158Fr 3  80 C4                        bra @loop
001591r 3               
001591r 3               @done:
001591r 3                               ; Clean up return stack and calculate number of chars stored
001591r 3  E8                           inx
001592r 3  E8                           inx
001593r 3  E8                           inx
001594r 3  E8                           inx                     ; 2DROP
001595r 3               
001595r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr2+n addr2 )
001598r 3  20 rr rr                     jsr xt_swap
00159Br 3  20 rr rr                     jsr xt_minus            ; ( n )
00159Er 3               
00159Er 3  60           z_hexstore:     rts
00159Fr 3               
00159Fr 3               
00159Fr 3               
00159Fr 3               ; ## HOLD ( char -- ) "Insert character at current output"
00159Fr 3               ; ## "hold"  auto  ANS core
00159Fr 3                       ; """https://forth-standard.org/standard/core/HOLD
00159Fr 3                       ; Insert a character at the current position of a pictured numeric
00159Fr 3                       ; output string on
00159Fr 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
00159Fr 3                       ;
00159Fr 3                       ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal
00159Fr 3                       ; variable tohold instead of HLD.
00159Fr 3                       ; """
00159Fr 3               xt_hold:
00159Fr 3  20 rr rr                     jsr underflow_1
0015A2r 3               
0015A2r 3  A5 rr                        lda tohold
0015A4r 3  D0 02                        bne @1
0015A6r 3  C6 rr                        dec tohold+1
0015A8r 3               @1:
0015A8r 3  C6 rr                        dec tohold
0015AAr 3               
0015AAr 3  B5 00                        lda 0,x
0015ACr 3  92 rr                        sta (tohold)
0015AEr 3  E8                           inx
0015AFr 3  E8                           inx
0015B0r 3               
0015B0r 3  60           z_hold:         rts
0015B1r 3               
0015B1r 3               
0015B1r 3               ; ## I ( -- n )(R: n -- n)  "Copy loop counter to stack"
0015B1r 3               ; ## "i"  auto  ANS core
0015B1r 3                       ; """https://forth-standard.org/standard/core/I
0015B1r 3                       ; Note that this is not the same as R@ because we use a fudge
0015B1r 3                       ; factor for loop control; see the Control Flow section of the
0015B1r 3                       ; manual for details.
0015B1r 3                       ;
0015B1r 3                       ; We should make this native compile for speed.
0015B1r 3                       ; """
0015B1r 3               
0015B1r 3               xt_i:
0015B1r 3  CA                           dex
0015B2r 3  CA                           dex
0015B3r 3               
0015B3r 3                               ; Get the fudged index off of the top of the stack. It's
0015B3r 3                               ; easier to do math on the stack directly than to pop and
0015B3r 3                               ; push stuff around
0015B3r 3  86 rr                        stx tmpdsp
0015B5r 3  BA                           tsx
0015B6r 3               
0015B6r 3  38                           sec
0015B7r 3  BD 01 01                     lda $0101,x     ; LSB
0015BAr 3  FD 03 01                     sbc $0103,x
0015BDr 3  A8                           tay
0015BEr 3               
0015BEr 3  BD 02 01                     lda $0102,x     ; MSB
0015C1r 3  FD 04 01                     sbc $0104,x
0015C4r 3               
0015C4r 3  A6 rr                        ldx tmpdsp
0015C6r 3               
0015C6r 3  95 01                        sta 1,x         ; MSB of de-fudged index
0015C8r 3  94 00                        sty 0,x         ; LSB of de-fudged index
0015CAr 3               
0015CAr 3  60           z_i:            rts
0015CBr 3               
0015CBr 3               
0015CBr 3               
0015CBr 3               ; ## IF (C: -- orig) (flag -- ) "Conditional flow control"
0015CBr 3               ; ## "if"  auto  ANS core
0015CBr 3                       ; """http://forth-standard.org/standard/core/IF"""
0015CBr 3               
0015CBr 3               xt_if:
0015CBr 3                               ; Compile a 0BRANCH
0015CBr 3  A0 rr                        ldy #>zero_branch_runtime
0015CDr 3  A9 rr                        lda #<zero_branch_runtime
0015CFr 3  20 rr rr                     jsr cmpl_subroutine
0015D2r 3               
0015D2r 3                               ; Put the origination address on the stack for else/then
0015D2r 3  20 rr rr                     jsr xt_here
0015D5r 3               
0015D5r 3                               ; Stuff zero in for the branch address right now.
0015D5r 3                               ; THEN or ELSE will fix it later.
0015D5r 3  20 rr rr                     jsr xt_zero
0015D8r 3  20 rr rr                     jsr xt_comma
0015DBr 3  60           z_if:           rts
0015DCr 3               
0015DCr 3               
0015DCr 3               zero_branch_runtime:
0015DCr 3                       ; """In some Forths, this is called (0BRANCH). Tali Forth originally
0015DCr 3                       ; included 0BRANCH as a high-level word that inserted this code at
0015DCr 3                       ; runtime.
0015DCr 3                       ; """
0015DCr 3               
0015DCr 3                               ; We use the return value on the 65c02 stack to determine
0015DCr 3                               ; where we want to return to.
0015DCr 3  68                           pla
0015DDr 3  85 rr                        sta tmpbranch
0015DFr 3  68                           pla
0015E0r 3  85 rr                        sta tmpbranch+1
0015E2r 3               
0015E2r 3                               ; See if the flag is zero, which is the whole purpose of
0015E2r 3                               ; this all
0015E2r 3  B5 00                        lda 0,x
0015E4r 3  15 01                        ora 1,x
0015E6r 3  F0 0F                        beq @zero
0015E8r 3               
0015E8r 3                               ; Flag is TRUE, so we skip over the next two bytes. This is
0015E8r 3                               ; the part between IF and THEN
0015E8r 3  A5 rr                        lda tmpbranch   ; LSB
0015EAr 3  18                           clc
0015EBr 3  69 02                        adc #2
0015EDr 3  85 rr                        sta tmp1
0015EFr 3  A5 rr                        lda tmpbranch+1 ; MSB
0015F1r 3  69 00                        adc #0          ; For carry
0015F3r 3  85 rr                        sta tmp1+1
0015F5r 3               
0015F5r 3  80 13                        bra @done
0015F7r 3               
0015F7r 3               @zero:
0015F7r 3                               ; Flag is FALSE (0) so we take the jump to the address given in
0015F7r 3                               ; the next two bytes. However, the address points to the last
0015F7r 3                               ; byte of the JSR instruction, not to the next byte afterwards
0015F7r 3  A0 01                        ldy #1
0015F9r 3  B1 rr                        lda (tmpbranch),y
0015FBr 3  85 rr                        sta tmp1
0015FDr 3  C8                           iny
0015FEr 3  B1 rr                        lda (tmpbranch),y
001600r 3  85 rr                        sta tmp1+1
001602r 3               
001602r 3                               ; Now we have to subtract one byte from the address
001602r 3                               ; given because of the way the 6502 calculates RTS
001602r 3  A5 rr                        lda tmp1
001604r 3  D0 02                        bne @1
001606r 3  C6 rr                        dec tmp1+1
001608r 3               @1:
001608r 3  C6 rr                        dec tmp1
00160Ar 3               
00160Ar 3               @done:
00160Ar 3                               ; However we got here, tmp1 has the value we push to jump
00160Ar 3                               ; to
00160Ar 3  A5 rr                        lda tmp1+1
00160Cr 3  48                           pha             ; MSB first
00160Dr 3  A5 rr                        lda tmp1
00160Fr 3  48                           pha
001610r 3               
001610r 3                               ; clean up the stack and jump
001610r 3  E8                           inx
001611r 3  E8                           inx
001612r 3               
001612r 3  60                           rts
001613r 3               
001613r 3               
001613r 3               
001613r 3               ; ## IMMEDIATE ( -- ) "Mark most recent word as IMMEDIATE"
001613r 3               ; ## "immediate"  auto  ANS core
001613r 3                       ; """https://forth-standard.org/standard/core/IMMEDIATE
001613r 3                       ; Make sure the most recently defined word is immediate. Will only
001613r 3                       ; affect the last word in the dictionary. Note that if the word is
001613r 3                       ; defined in ROM, this will have no affect, but will not produce an
001613r 3                       ; error message.
001613r 3                       ; """
001613r 3               xt_immediate:
001613r 3  20 rr rr                     jsr current_to_dp
001616r 3  A0 01                        ldy #1          ; offset for status byte
001618r 3  B1 rr                        lda (dp),y
00161Ar 3  09 04                        ora #IM        ; make sure bit 7 is set
00161Cr 3  91 rr                        sta (dp),y
00161Er 3               
00161Er 3  60           z_immediate:    rts
00161Fr 3               
00161Fr 3               
00161Fr 3               ; ## INPUT ( -- addr ) "Return address of input vector"
00161Fr 3               ; ## "input" tested Tali Forth
00161Fr 3               
00161Fr 3               xt_input:
00161Fr 3  CA                           dex
001620r 3  CA                           dex
001621r 3  A9 rr                        lda #<input
001623r 3  95 00                        sta 0,x
001625r 3  A9 rr                        lda #>input
001627r 3  95 01                        sta 1,x
001629r 3               
001629r 3  60           z_input:        rts
00162Ar 3               
00162Ar 3               
00162Ar 3               
00162Ar 3               ; ## INPUT_TO_R ( -- ) ( R: -- n n n n ) "Save input state to the Return Stack"
00162Ar 3               ; ## "input>r"  tested  Tali Forth
00162Ar 3                  	; """Save the current input state as defined by insrc, cib, ciblen, and
00162Ar 3                       ; toin to the Return Stack. Used by EVALUTE.
00162Ar 3                       ;
00162Ar 3                       ; The naive way of doing
00162Ar 3                       ; this is to push each two-byte variable to the stack in the form of
00162Ar 3                       ;
00162Ar 3                       ;       lda insrc
00162Ar 3                       ;       pha
00162Ar 3                       ;       lda insrc+1
00162Ar 3                       ;       pha
00162Ar 3                       ;
00162Ar 3                       ; for a total of 24 byte of instruction in one direction and later
00162Ar 3                       ; a further 24 bytes to reverse the process. We shorten this at the
00162Ar 3                       ; cost of some speed by assuming the four variables are grouped
00162Ar 3                       ; together on the Zero Page and start with insrc (see definitions.asm
00162Ar 3                       ; for details). The reverse operation is r_to_input. These words must
00162Ar 3                       ; be flagged as Never Native. Uses tmp1
00162Ar 3                       ; """
00162Ar 3               
00162Ar 3               xt_input_to_r:
00162Ar 3                               ; We arrive here with the return address on the top of the
00162Ar 3                               ; 65c02's stack. We need to move it out of the way first
00162Ar 3  68                           pla
00162Br 3  85 rr                        sta tmp1
00162Dr 3  68                           pla
00162Er 3  85 rr                        sta tmp1+1
001630r 3               
001630r 3                               ; This assumes that insrc is the first of eight bytes and
001630r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001630r 3                               ; Page.
001630r 3  A0 07                        ldy #7
001632r 3               @loop:
001632r 3  B9 rr rr                     lda insrc,y     ; insrc+7 is toin+1
001635r 3  48                           pha
001636r 3  88                           dey
001637r 3  10 F9                        bpl @loop
001639r 3               
001639r 3                               ; Restore address for return jump
001639r 3  A5 rr                        lda tmp1+1
00163Br 3  48                           pha
00163Cr 3  A5 rr                        lda tmp1
00163Er 3  48                           pha
00163Fr 3               
00163Fr 3  60           z_input_to_r: 	rts
001640r 3               
001640r 3               
001640r 3               
001640r 3               ; ## INT_TO_NAME ( xt -- nt ) "Get name token from execution token"
001640r 3               ; ## "int>name"  auto  Tali Forth
001640r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001640r 3                       ; This is called >NAME in Gforth, but we change it to
001640r 3                       ; INT>NAME to match NAME>INT
001640r 3                       ; """
001640r 3               
001640r 3               xt_int_to_name:
001640r 3  20 rr rr                     jsr underflow_1
001643r 3               
001643r 3                               ; Unfortunately, to find the header, we have to walk through
001643r 3                               ; all of the wordlists. We are running out of tmp variables.
001643r 3                               ; (I'm assuming there is a reason this is avoiding tmp1) so
001643r 3                               ; hold the current wordlist on the data stack. This searches
001643r 3                               ; all of the wordlists in id order.
001643r 3  CA                           dex
001644r 3  CA                           dex
001645r 3  74 00                        stz 0,x
001647r 3  74 01                        stz 1,x
001649r 3               
001649r 3               @wordlist_loop:
001649r 3                               ; A needs to have the current wordlist id in it at
001649r 3                               ; the top of this loop.
001649r 3  B5 00                        lda 0,x                 ; Get the current wordlist.
00164Br 3               
00164Br 3                               ; Get the DP for that wordlist.
00164Br 3  0A                           asl                     ; Turn offset into cells offset.
00164Cr 3  18                           clc
00164Dr 3  69 06                        adc #wordlists_offset
00164Fr 3  A8                           tay
001650r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
001652r 3  85 rr                        sta tmp2                ; into tmp2
001654r 3  C8                           iny
001655r 3  B1 rr                        lda (up),y
001657r 3  85 rr                        sta tmp2+1
001659r 3               
001659r 3                               ; Check for an empty wordlist (DP will be 0)
001659r 3  A5 rr                        lda tmp2
00165Br 3  05 rr                        ora tmp2+1
00165Dr 3  F0 38                        beq @next_wordlist
00165Fr 3               
00165Fr 3  B5 02                        lda 2,x         ; Target xt is now behind wordlist id.
001661r 3  85 rr                        sta tmp3        ; Save target xt in tmp3
001663r 3  B5 03                        lda 3,x
001665r 3  85 rr                        sta tmp3+1
001667r 3               
001667r 3               @loop:
001667r 3  A0 04                        ldy #4          ; xt is four bytes down
001669r 3  B1 rr                        lda (tmp2),y    ; LSB of xt of current nt
00166Br 3  C5 rr                        cmp tmp3
00166Dr 3  D0 07                        bne @no_match
00166Fr 3               
00166Fr 3                               ; LSB is the same, now check MSB
00166Fr 3  C8                           iny
001670r 3  B1 rr                        lda (tmp2),y    ; MSB of xt of current nt
001672r 3  C5 rr                        cmp tmp3+1
001674r 3  F0 32                        beq @match
001676r 3               
001676r 3               @no_match:
001676r 3                               ; no match, so we need to get the next word. Next nt is two
001676r 3                               ; bytes down
001676r 3  18                           clc
001677r 3  A5 rr                        lda tmp2
001679r 3  69 02                        adc #2
00167Br 3  85 rr                        sta tmp2
00167Dr 3  A5 rr                        lda tmp2+1
00167Fr 3  69 00                        adc #0          ; only care about carry
001681r 3  85 rr                        sta tmp2+1
001683r 3               
001683r 3  A0 00                        ldy #0
001685r 3  B1 rr                        lda (tmp2),y
001687r 3  48                           pha
001688r 3  C8                           iny
001689r 3  11 rr                        ora (tmp2),y
00168Br 3  F0 09                        beq @zero
00168Dr 3               
00168Dr 3                               ; Not zero continue
00168Dr 3  B1 rr                        lda (tmp2),y
00168Fr 3  85 rr                        sta tmp2+1
001691r 3  68                           pla
001692r 3  85 rr                        sta tmp2
001694r 3  80 D1                        bra @loop
001696r 3               
001696r 3               @zero:
001696r 3                               ; if next word is zero, the xt has no nt in this wordlist
001696r 3  68                           pla             ; Leftover from above loop
001697r 3               
001697r 3               @next_wordlist:
001697r 3                               ; Move on to the next wordlist.
001697r 3  B5 00                        lda 0,x
001699r 3  1A                           inc
00169Ar 3  95 00                        sta 0,x
00169Cr 3  C9 0C                        cmp #max_wordlists
00169Er 3  D0 A9                        bne @wordlist_loop
0016A0r 3               
0016A0r 3                               ; We didn't find it in any of the wordlists.
0016A0r 3                               ; Remove the wordlist id from the stack.
0016A0r 3  E8                           inx
0016A1r 3  E8                           inx
0016A2r 3               
0016A2r 3                               ; We return a zero to indicate that we didn't find it.
0016A2r 3  74 00                        stz 0,x
0016A4r 3  74 01                        stz 1,x
0016A6r 3  80 0A                        bra z_int_to_name
0016A8r 3               
0016A8r 3               @match:
0016A8r 3                               ; We found it. Remove wordlist id from stack.
0016A8r 3  E8                           inx
0016A9r 3  E8                           inx
0016AAr 3               
0016AAr 3                               ; It's a match! Replace TOS with nt
0016AAr 3  A5 rr                        lda tmp2
0016ACr 3  95 00                        sta 0,x
0016AEr 3  A5 rr                        lda tmp2+1
0016B0r 3  95 01                        sta 1,x
0016B2r 3               
0016B2r 3  60           z_int_to_name:  rts
0016B3r 3               
0016B3r 3               
0016B3r 3               
0016B3r 3               ; ## INVERT ( n -- n ) "Complement of TOS"
0016B3r 3               ; ## "invert"  auto  ANS core
0016B3r 3                       ; """https://forth-standard.org/standard/core/INVERT"""
0016B3r 3               xt_invert:
0016B3r 3  20 rr rr                     jsr underflow_1
0016B6r 3               
0016B6r 3  A9 FF                        lda #$FF
0016B8r 3  55 00                        eor 0,x         ; LSB
0016BAr 3  95 00                        sta 0,x
0016BCr 3               
0016BCr 3  A9 FF                        lda #$FF
0016BEr 3  55 01                        eor 1,x         ; MSB
0016C0r 3  95 01                        sta 1,x
0016C2r 3               
0016C2r 3  60           z_invert:       rts
0016C3r 3               
0016C3r 3               
0016C3r 3               ; ## IS ( xt "name" -- ) "Set named word to execute xt"
0016C3r 3               ; ## "is"  auto  ANS core ext
0016C3r 3                       ; """http://forth-standard.org/standard/core/IS"""
0016C3r 3               
0016C3r 3               xt_is:
0016C3r 3                               ; This is a state aware word with differet behavior
0016C3r 3                               ; when used while compiling vs interpreting.
0016C3r 3                               ; Check STATE
0016C3r 3  A5 rr                        lda state
0016C5r 3  05 rr                        ora state+1
0016C7r 3  F0 0C                        beq @interpreting
0016C9r 3               
0016C9r 3               @compiling:
0016C9r 3                               ; Run ['] to compile the xt of the next word as a literal.
0016C9r 3  20 rr rr                     jsr xt_bracket_tick
0016CCr 3               
0016CCr 3                               ; Postpone DEFER! by compiling a JSR to it.
0016CCr 3  A0 rr                        ldy #>xt_defer_store
0016CEr 3  A9 rr                        lda #<xt_defer_store
0016D0r 3  20 rr rr                     jsr cmpl_subroutine
0016D3r 3               
0016D3r 3  80 06                        bra @done
0016D5r 3               
0016D5r 3               @interpreting:
0016D5r 3  20 rr rr                     jsr xt_tick
0016D8r 3  20 rr rr                     jsr xt_defer_store
0016DBr 3               @done:
0016DBr 3  60           z_is:           rts
0016DCr 3               
0016DCr 3               
0016DCr 3               
0016DCr 3               ; ## J ( -- n ) (R: n -- n ) "Copy second loop counter to stack"
0016DCr 3               ; ## "j"  auto  ANS core
0016DCr 3                       ; """https://forth-standard.org/standard/core/J
0016DCr 3                       ; Copy second loop counter from Return Stack to stack. Note we use
0016DCr 3                       ; a fudge factor for loop control; see the Control Flow section of
0016DCr 3                       ; the manual for more details.
0016DCr 3                       ; At this point, we have the "I" counter/limit and the LEAVE address
0016DCr 3                       ; on the stack above this (three entries), whereas the ideal Forth
0016DCr 3                       ; implementation would just have two.
0016DCr 3                       ;
0016DCr 3                       ; Make this native compiled for speed
0016DCr 3                       ; """
0016DCr 3               
0016DCr 3               xt_j:
0016DCr 3  CA                           dex
0016DDr 3  CA                           dex
0016DEr 3               
0016DEr 3                               ; Get the fudged index off from the stack. It's easier to
0016DEr 3                               ; do math on the stack directly than to pop and push stuff
0016DEr 3                               ; around
0016DEr 3  86 rr                        stx tmpdsp
0016E0r 3  BA                           tsx
0016E1r 3               
0016E1r 3  38                           sec
0016E2r 3  BD 07 01                     lda $0107,x     ; LSB
0016E5r 3  FD 09 01                     sbc $0109,x
0016E8r 3  A8                           tay
0016E9r 3               
0016E9r 3  BD 08 01                     lda $0108,x     ; MSB
0016ECr 3  FD 0A 01                     sbc $010A,x
0016EFr 3               
0016EFr 3  A6 rr                        ldx tmpdsp
0016F1r 3               
0016F1r 3  95 01                        sta 1,x         ; MSB of de-fudged index
0016F3r 3  94 00                        sty 0,x         ; LSB of de-fudged index
0016F5r 3               
0016F5r 3  60           z_j:            rts
0016F6r 3               
0016F6r 3               
0016F6r 3               
0016F6r 3               ; ## KEY ( -- char ) "Get one character from the input"
0016F6r 3               ; ## "key"  tested  ANS core
0016F6r 3               xt_key:
0016F6r 3                       ; """https://forth-standard.org/standard/core/KEY
0016F6r 3                       ; Get a single character of input from the vectored
0016F6r 3                       ; input without echoing.
0016F6r 3                       ; """
0016F6r 3  20 rr rr                     jsr key_a               ; returns char in A
0016F9r 3               
0016F9r 3  CA                           dex
0016FAr 3  CA                           dex
0016FBr 3  95 00                        sta 0,x
0016FDr 3  74 01                        stz 1,x
0016FFr 3               
0016FFr 3  60           z_key:          rts
001700r 3               
001700r 3               key_a:
001700r 3                       ; The 65c02 doesn't have a JSR (ADDR,X) instruction like the
001700r 3                       ; 65816, so we have to fake the indirect jump to vector it.
001700r 3                       ; This is depressingly slow. We use this routine internally
001700r 3                       ; to avoid manipulating the Data Stack when we just want a
001700r 3                       ; character
001700r 3  6C rr rr                     jmp (input)             ; JSR/RTS
001703r 3               
001703r 3               
001703r 3               ; ## LATESTNT ( -- nt ) "Push most recent nt to the stack"
001703r 3               ; ## "latestnt"  auto  Tali Forth
001703r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001703r 3                       ; The Gforth version of this word is called LATEST
001703r 3                       ; """
001703r 3               xt_latestnt:
001703r 3  CA                           dex
001704r 3  CA                           dex
001705r 3               
001705r 3  20 rr rr                     jsr current_to_dp
001708r 3               
001708r 3  A5 rr                        lda dp
00170Ar 3  95 00                        sta 0,x
00170Cr 3  A5 rr                        lda dp+1
00170Er 3  95 01                        sta 1,x
001710r 3               
001710r 3  60           z_latestnt:     rts
001711r 3               
001711r 3               
001711r 3               ; ## LATESTXT ( -- xt ) "Push most recent xt to the stack"
001711r 3               ; ## "latestxt"  auto  Gforth
001711r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Anonymous-Definitions.html"""
001711r 3               xt_latestxt:
001711r 3  20 rr rr                     jsr xt_latestnt         ; ( nt )
001714r 3  20 rr rr                     jsr xt_name_to_int      ; ( xt )
001717r 3               
001717r 3  60           z_latestxt:     rts
001718r 3               
001718r 3               
001718r 3               ; ## LEAVE ( -- ) "Leave DO/LOOP construct"
001718r 3               ; ## "leave"  auto  ANS core
001718r 3                       ; """https://forth-standard.org/standard/core/LEAVE
001718r 3                       ; Note that this does not work with anything but a DO/LOOP in
001718r 3                       ; contrast to other versions such as discussed at
001718r 3                       ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
001718r 3                       ;
001718r 3                       ;       : LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY
001718r 3                       ; See the Control Flow section in the manual for details of how this works.
001718r 3                       ; This must be native compile and not IMMEDIATE
001718r 3                       ; """
001718r 3               
001718r 3               xt_leave:
001718r 3                               ; We dump the limit/start entries off the Return Stack
001718r 3                               ; (four bytes)
001718r 3  68                           pla
001719r 3  68                           pla
00171Ar 3  68                           pla
00171Br 3  68                           pla
00171Cr 3               
00171Cr 3  60                           rts             ; this must be compiled, so keep before z_leave
00171Dr 3               z_leave:                        ; not reached, not compiled
00171Dr 3               
00171Dr 3               
00171Dr 3               
00171Dr 3               ; ## LEFT_BRACKET ( -- ) "Enter interpretation state"
00171Dr 3               ; ## "["  auto  ANS core
00171Dr 3                       ; """https://forth-standard.org/standard/core/Bracket
00171Dr 3                       ; This is an immediate and compile-only word
00171Dr 3                       ; """
00171Dr 3               xt_left_bracket:
00171Dr 3  64 rr                        stz state
00171Fr 3  64 rr                        stz state+1
001721r 3               
001721r 3  60           z_left_bracket: rts
001722r 3               
001722r 3               
001722r 3               ; ## LESS_NUMBER_SIGN ( -- ) "Start number conversion"
001722r 3               ; ## "<#"  auto  ANS core
001722r 3                       ; """https://forth-standard.org/standard/core/num-start
001722r 3                       ; Start the process to create pictured numeric output.
001722r 3                       ;
001722r 3                       ; The new
001722r 3                       ; string is constructed from back to front, saving the new character
001722r 3                       ; at the beginning of the output string. Since we use PAD as a
001722r 3                       ; starting address and work backward (!), the string is constructed
001722r 3                       ; in the space between the end of the Dictionary (as defined by CP)
001722r 3                       ; and the PAD. This allows us to satisfy the ANS Forth condition that
001722r 3                       ; programs don't fool around with the PAD but still use its address.
001722r 3                       ; Based on pForth
001722r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
001722r 3                       ; pForth is in the pubic domain. Forth is : <# PAD HLD ! ; we use the
001722r 3                       ; internal variable tohold instead of HLD.
001722r 3                       ; """
001722r 3               xt_less_number_sign:
001722r 3  20 rr rr                     jsr xt_pad      ; ( addr )
001725r 3               
001725r 3  B5 00                        lda 0,x
001727r 3  85 rr                        sta tohold
001729r 3  B5 01                        lda 1,x
00172Br 3  85 rr                        sta tohold+1
00172Dr 3               
00172Dr 3  E8                           inx
00172Er 3  E8                           inx
00172Fr 3               
00172Fr 3               z_less_number_sign:
00172Fr 3  60                           rts
001730r 3               
001730r 3               ; ## LESS_THAN ( n m -- f ) "Return true if NOS < TOS"
001730r 3               ; ## "<"  auto  ANS core
001730r 3                       ; """https://forth-standard.org/standard/core/less"""
001730r 3               
001730r 3               xt_less_than:
001730r 3  20 rr rr                     jsr underflow_2
001733r 3               
001733r 3  A0 00                        ldy #0          ; default false
001735r 3  20 rr rr                     jsr compare_16bit
001738r 3               
001738r 3                               ; for signed numbers, NOS < TOS if Z=0 and N=0
001738r 3  F0 03                        beq @false
00173Ar 3  30 01                        bmi @false
00173Cr 3               
00173Cr 3                               ; true
00173Cr 3  88                           dey
00173Dr 3               @false:
00173Dr 3  98                           tya
00173Er 3               
00173Er 3  E8                           inx
00173Fr 3  E8                           inx
001740r 3  95 00                        sta 0,x
001742r 3  95 01                        sta 1,x
001744r 3               
001744r 3  60           z_less_than:    rts
001745r 3               
001745r 3               
001745r 3               
001745r 3               ; ## LIST ( scr# -- ) "List the given screen"
001745r 3               ; ## "list"  tested  ANS block ext
001745r 3                       ; """https://forth-standard.org/standard/block/LIST"""
001745r 3               
001745r 3               xt_list:
001745r 3  20 rr rr                     jsr underflow_1
001748r 3               
001748r 3                               ; Save the screen number in SCR
001748r 3  20 rr rr                     jsr xt_scr
00174Br 3  20 rr rr                     jsr xt_store
00174Er 3               
00174Er 3                               ; Use L from the editor-wordlist to display the screen.
00174Er 3  20 rr rr                     jsr xt_editor_l
001751r 3               
001751r 3  60           z_list:         rts
001752r 3               
001752r 3               
001752r 3               
001752r 3               ; ## LITERAL ( n -- ) "Store TOS to be push on stack during runtime"
001752r 3               ; ## "literal"  auto  ANS core
001752r 3                       ; """https://forth-standard.org/standard/core/LITERAL
001752r 3                       ; Compile-only word to store TOS so that it is pushed on stack
001752r 3                       ; during runtime. This is a immediate, compile-only word. At runtime,
001752r 3                       ; it works by calling literal_runtime by compling JSR LITERAL_RT.
001752r 3                       ;
001752r 3                       ; Note the cmpl_ routines use TMPTOS
001752r 3                       ; """
001752r 3               xt_literal:
001752r 3  20 rr rr                     jsr underflow_1
001755r 3               
001755r 3  A0 rr                        ldy #>literal_runtime
001757r 3  A9 rr                        lda #<literal_runtime
001759r 3  20 rr rr                     jsr cmpl_subroutine
00175Cr 3               
00175Cr 3                               ; Compile the value that is to be pushed on the Stack during
00175Cr 3                               ; runtime
00175Cr 3  20 rr rr                     jsr xt_comma
00175Fr 3               
00175Fr 3  60           z_literal:      rts
001760r 3               
001760r 3               literal_runtime:
001760r 3               
001760r 3                               ; During runtime, we push the value following this word back
001760r 3                               ; on the Data Stack. The subroutine jump that brought us
001760r 3                               ; here put the address to return to on the Return Stack -
001760r 3                               ; this points to the data we need to get. This routine is
001760r 3                               ; also called (LITERAL) in some Forths
001760r 3  CA                           dex
001761r 3  CA                           dex
001762r 3               
001762r 3                           	; The 65c02 stores <RETURN-ADDRESS>-1 on the Return Stack,
001762r 3                               ; so we are actually popping the address-1 of the literal
001762r 3  68                           pla             ; LSB
001763r 3  85 rr                        sta tmp1
001765r 3  68                           pla             ; MSB
001766r 3  85 rr                        sta tmp1+1
001768r 3               
001768r 3                               ; Fetch the actual literal value and push it on Data stack
001768r 3  A0 01                        ldy #1
00176Ar 3  B1 rr                        lda (tmp1),y    ; LSB
00176Cr 3  95 00                        sta 0,x
00176Er 3  C8                           iny
00176Fr 3  B1 rr                        lda (tmp1),y    ; MSB
001771r 3  95 01                        sta 1,x
001773r 3               
001773r 3                               ; Adjust return address and push back on the Return Stack
001773r 3  98                           tya
001774r 3  18                           clc
001775r 3  65 rr                        adc tmp1
001777r 3  A8                           tay
001778r 3  A5 rr                        lda tmp1+1
00177Ar 3  69 00                        adc #0
00177Cr 3  48                           pha
00177Dr 3  5A                           phy
00177Er 3               
00177Er 3  60                           rts
00177Fr 3               
00177Fr 3               
00177Fr 3               
00177Fr 3               ; ## LOAD ( scr# -- ) "Load the Forth code in a screen/block"
00177Fr 3               ; ## "load"  auto  ANS block
00177Fr 3                       ; """https://forth-standard.org/standard/block/LOAD
00177Fr 3                       ;
00177Fr 3                       ; Note: LOAD current works because there is only one buffer.
00177Fr 3                       ; If/when multiple buffers are supported, we'll have to deal
00177Fr 3                       ; with the fact that it might re-load the old block into a
00177Fr 3                       ; different buffer.
00177Fr 3                       ; """
00177Fr 3               
00177Fr 3               xt_load:
00177Fr 3  20 rr rr                     jsr underflow_1
001782r 3               
001782r 3                               ; Save the current value of BLK on the return stack.
001782r 3  A0 01                        ldy #blk_offset+1
001784r 3  B1 rr                        lda (up),y
001786r 3  48                           pha
001787r 3  88                           dey
001788r 3  B1 rr                        lda (up),y
00178Ar 3  48                           pha
00178Br 3               
00178Br 3                               ; Set BLK to the given block/screen number.
00178Br 3  B5 00                        lda 0,x
00178Dr 3  91 rr                        sta (up),y
00178Fr 3  C8                           iny
001790r 3  B5 01                        lda 1,x
001792r 3  91 rr                        sta (up),y
001794r 3               
001794r 3                               ; Load that block into a buffer
001794r 3  20 rr rr                     jsr xt_block
001797r 3               
001797r 3                               ; Put 1024 on the stack for the screen length.
001797r 3  CA                           dex
001798r 3  CA                           dex
001799r 3  A9 04                        lda #4
00179Br 3  95 01                        sta 1,x
00179Dr 3  74 00                        stz 0,x
00179Fr 3               
00179Fr 3                               ; Jump to a special evluate target. This bypasses the underflow
00179Fr 3                               ; check and skips the zeroing of BLK.
00179Fr 3  20 rr rr                     jsr load_evaluate
0017A2r 3               
0017A2r 3                               ; Restore the value of BLK from before the LOAD command.
0017A2r 3  A0 00                        ldy #blk_offset
0017A4r 3  68                           pla
0017A5r 3  91 rr                        sta (up),y
0017A7r 3  C8                           iny
0017A8r 3  68                           pla
0017A9r 3  91 rr                        sta (up),y
0017ABr 3               
0017ABr 3                               ; If BLK is not zero, read it back into the buffer.
0017ABr 3                               ; A still has MSB
0017ABr 3  88                           dey
0017ACr 3  11 rr                        ora (up),y
0017AEr 3  F0 12                        beq @done
0017B0r 3               
0017B0r 3                               ; The block needs to be read back into the buffer.
0017B0r 3  CA                           dex
0017B1r 3  CA                           dex
0017B2r 3  A0 00                        ldy #blk_offset
0017B4r 3  B1 rr                        lda (up),y
0017B6r 3  95 00                        sta 0,x
0017B8r 3  C8                           iny
0017B9r 3  B1 rr                        lda (up),y
0017BBr 3  95 01                        sta 1,x
0017BDr 3  20 rr rr                     jsr xt_block
0017C0r 3               
0017C0r 3                               ; Drop the buffer address.
0017C0r 3  E8                           inx
0017C1r 3  E8                           inx
0017C2r 3               
0017C2r 3               @done:
0017C2r 3  60           z_load:         rts
0017C3r 3               
0017C3r 3               
0017C3r 3               
0017C3r 3               ; ## LOOP ( -- ) "Finish loop construct"
0017C3r 3               ; ## "loop"  auto  ANS core
0017C3r 3                       ; """https://forth-standard.org/standard/core/LOOP
0017C3r 3                       ; Compile-time part of LOOP. This does nothing more but push 1 on
0017C3r 3                       ; the stack and then call +LOOP.
0017C3r 3                       ;
0017C3r 3                       ; In Forth, this is
0017C3r 3                       ;       : LOOP  POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ;
0017C3r 3                       ;       IMMEDIATE ; COMPILE-ONLY
0017C3r 3                       ; """
0017C3r 3               xt_loop:
0017C3r 3                               ; Have the finished word push 1 on the stack
0017C3r 3  A0 rr                        ldy #>xt_one
0017C5r 3  A9 rr                        lda #<xt_one
0017C7r 3  20 rr rr                     jsr cmpl_subroutine     ; drop through to +LOOP
0017CAr 3               
0017CAr 3               
0017CAr 3               ; ## PLUS_LOOP ( -- ) "Finish loop construct"
0017CAr 3               ; ## "+loop"  auto  ANS core
0017CAr 3                       ; """https://forth-standard.org/standard/core/PlusLOOP
0017CAr 3                       ;
0017CAr 3                       ; Compile-time part of +LOOP, also used for LOOP. Is usually
0017CAr 3                       ;       : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
0017CAr 3                       ;       COMPILE-ONLY
0017CAr 3                       ; in Forth. LOOP uses this routine as well. We jump here with the
0017CAr 3                       ; address for looping as TOS and the address for aborting the loop
0017CAr 3                       ; (LEAVE) as the second double-byte entry on the Return Stack (see
0017CAr 3                       ; DO and the Control Flow section of the manual for details).
0017CAr 3                       ; """
0017CAr 3               
0017CAr 3               xt_plus_loop:
0017CAr 3                               ; Compile the run-time part. We do this with a short loop
0017CAr 3                               ; and not a call to COMPILE, because it has to be natively
0017CAr 3                               ; coded anyway.
0017CAr 3  A0 11                        ldy #plus_loop_runtime_end-plus_loop_runtime
0017CCr 3  5A                           phy             ; save counter to adjust CP
0017CDr 3               @1:
0017CDr 3  B9 rr rr                     lda plus_loop_runtime,y
0017D0r 3  91 rr                        sta (cp),y
0017D2r 3  88                           dey
0017D3r 3  10 F8                        bpl @1
0017D5r 3               
0017D5r 3                               ; Adjust CP
0017D5r 3  68                           pla
0017D6r 3  18                           clc
0017D7r 3  65 rr                        adc cp
0017D9r 3  85 rr                        sta cp
0017DBr 3  A5 rr                        lda cp+1
0017DDr 3  69 00                        adc #0          ; only need carry
0017DFr 3  85 rr                        sta cp+1
0017E1r 3               
0017E1r 3                               ; The address we need to loop back to is TOS. Store it so
0017E1r 3                               ; the runtime part of +LOOP jumps back up there
0017E1r 3  20 rr rr                     jsr xt_comma
0017E4r 3               
0017E4r 3                               ; Compile an UNLOOP for when we're all done. This is a series
0017E4r 3                               ; of six PLA, so we just do it here instead jumping around
0017E4r 3                               ; all over the place
0017E4r 3  A9 68                        lda #$68                ; opcode for PLA
0017E6r 3  A0 06                        ldy #6
0017E8r 3               @2:
0017E8r 3  91 rr                        sta (cp),y
0017EAr 3  88                           dey
0017EBr 3  10 FB                        bpl @2
0017EDr 3               
0017EDr 3                               ; Adjust CP
0017EDr 3  A9 06                        lda #6
0017EFr 3  18                           clc
0017F0r 3  65 rr                        adc cp
0017F2r 3  85 rr                        sta cp
0017F4r 3  A5 rr                        lda cp+1
0017F6r 3  69 00                        adc #0                  ; only need carry
0017F8r 3  85 rr                        sta cp+1
0017FAr 3               
0017FAr 3                               ; Complete compile of DO/?DO by replacing the six
0017FAr 3                               ; dummy bytes by PHA instructions. The address where
0017FAr 3                               ; they are located is on the Data Stack
0017FAr 3  B5 00                        lda 0,x
0017FCr 3  85 rr                        sta tmp1
0017FEr 3  B5 01                        lda 1,x
001800r 3  85 rr                        sta tmp1+1
001802r 3  E8                           inx
001803r 3  E8                           inx
001804r 3               
001804r 3                               ; Because of the way that CP works, we don't have to save
001804r 3                               ; CP, but CP-1
001804r 3  A5 rr                        lda cp
001806r 3  38                           sec
001807r 3  E9 01                        sbc #1
001809r 3  85 rr                        sta tmp2
00180Br 3  A5 rr                        lda cp+1
00180Dr 3  E9 00                        sbc #0
00180Fr 3  85 rr                        sta tmp2+1
001811r 3               
001811r 3                               ; now compile this in the DO/?DO routine
001811r 3  A0 00                        ldy #0
001813r 3               
001813r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001815r 3  91 rr                        sta (tmp1),y
001817r 3  C8                           iny
001818r 3  A5 rr                        lda tmp2+1      ; MSB
00181Ar 3  91 rr                        sta (tmp1),y
00181Cr 3  C8                           iny
00181Dr 3  A9 48                        lda #$48        ; Opcode for PHA
00181Fr 3  91 rr                        sta (tmp1),y
001821r 3  C8                           iny
001822r 3               
001822r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001824r 3  91 rr                        sta (tmp1),y
001826r 3  C8                           iny
001827r 3  A5 rr                        lda tmp2        ; LSB
001829r 3  91 rr                        sta (tmp1),y
00182Br 3  C8                           iny
00182Cr 3  A9 48                        lda #$48        ; Opcode for PHA
00182Er 3  91 rr                        sta (tmp1),y
001830r 3               z_loop:
001830r 3  60           z_plus_loop:    rts
001831r 3               
001831r 3               
001831r 3               plus_loop_runtime:
001831r 3                       ; """Runtime compile for loop control. This is used for both +LOOP and
001831r 3                       ; LOOP which are defined at high level. Note we use a fudge factor for
001831r 3                       ; loop control so we can test with the Overflow Flag. See
001831r 3                       ; the Control Flow section of the manual for details.
001831r 3                       ; The step value is TOS in the loop. This
001831r 3                       ; must always be native compiled. In some Forths, this is a separate
001831r 3                       ; word called (+LOOP) or (LOOP)
001831r 3                       ; """
001831r 3               
001831r 3  18                           clc
001832r 3  68                           pla             ; LSB of index
001833r 3  75 00                        adc 0,x         ; LSB of step
001835r 3  A8                           tay             ; temporary storage of LSB
001836r 3               
001836r 3  B8                           clv
001837r 3  68                           pla             ; MSB of index
001838r 3  75 01                        adc 1,x         ; MSB of step
00183Ar 3  48                           pha             ; put MSB of index back on stack
00183Br 3               
00183Br 3  98                           tya             ; put LSB of index back on stack
00183Cr 3  48                           pha
00183Dr 3               
00183Dr 3  E8                           inx             ; dump step from TOS
00183Er 3  E8                           inx
00183Fr 3               
00183Fr 3                               ; If V flag is set, we're done looping and continue
00183Fr 3                               ; after the +LOOP instruction
00183Fr 3  70 03                        bvs @hack+3     ; skip over JMP instruction
001841r 3               
001841r 3               @hack:          ; This is why this routine must be natively compiled: We
001841r 3                               ; compile the opcode for JMP here without an address to
001841r 3                               ; go to, which is added by the next next instruction of
001841r 3                               ; LOOP/+LOOP during compile time
001841r 3  4C                           .byte $4C
001842r 3               
001842r 3               plus_loop_runtime_end:
001842r 3               
001842r 3               
001842r 3               ; ## LSHIFT ( x u -- u ) "Shift TOS left"
001842r 3               ; ## "lshift"  auto  ANS core
001842r 3                       ; """https://forth-standard.org/standard/core/LSHIFT"""
001842r 3               
001842r 3               xt_lshift:
001842r 3  20 rr rr                     jsr underflow_2
001845r 3               
001845r 3                               ; max shift 16 times
001845r 3  B5 00                        lda 0,x
001847r 3  29 0F                        and #%00001111
001849r 3  F0 08                        beq @done
00184Br 3               
00184Br 3  A8                           tay
00184Cr 3               
00184Cr 3               @loop:
00184Cr 3  16 02                        asl 2,x
00184Er 3  36 03                        rol 3,x
001850r 3  88                           dey
001851r 3  D0 F9                        bne @loop
001853r 3               
001853r 3               @done:
001853r 3  E8                           inx
001854r 3  E8                           inx
001855r 3               
001855r 3  60           z_lshift:       rts
001856r 3               
001856r 3               
001856r 3               
001856r 3               ; ## M_STAR ( n n -- d ) "16 * 16 --> 32"
001856r 3               ; ## "m*"  auto  ANS core
001856r 3                       ; """https://forth-standard.org/standard/core/MTimes
001856r 3                       ; Multiply two 16 bit numbers, producing a 32 bit result. All
001856r 3                       ; values are signed. Adapted from FIG Forth for Tali Forth.
001856r 3                       ;
001856r 3                       ; The original Forth is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;
001856r 3                       ; with  : D+- O< IF DNEGATE THEN ;
001856r 3                       ; """
001856r 3               
001856r 3               xt_m_star:
001856r 3  20 rr rr                     jsr underflow_2
001859r 3               
001859r 3                               ; figure out the sign
001859r 3  B5 01                        lda 1,x         ; MSB of n1
00185Br 3  55 03                        eor 3,x         ; MSB of n2
00185Dr 3               
00185Dr 3                               ; UM* uses all kinds of temporary variables so we don't
00185Dr 3                               ; risk a conflict but just take the cycle hit and push
00185Dr 3                               ; this to the stack
00185Dr 3  48                           pha
00185Er 3               
00185Er 3                               ; get the absolute value of both numbers so we can feed
00185Er 3                               ; them to UM*, which does the real work
00185Er 3  20 rr rr                     jsr xt_abs
001861r 3  20 rr rr                     jsr xt_swap
001864r 3  20 rr rr                     jsr xt_abs
001867r 3               
001867r 3  20 rr rr                     jsr xt_um_star          ; ( d )
00186Ar 3               
00186Ar 3                               ; handle the sign
00186Ar 3  68                           pla
00186Br 3  10 03                        bpl @done
00186Dr 3               
00186Dr 3  20 rr rr                     jsr xt_dnegate
001870r 3               @done:
001870r 3  60           z_m_star:       rts
001871r 3               
001871r 3               
001871r 3               
001871r 3               ; ## MARKER ( "name" -- ) "Create a deletion boundry"
001871r 3               ; ## "marker"  auto  ANS core ext
001871r 3                       ; """https://forth-standard.org/standard/core/MARKER
001871r 3                       ; This word replaces FORGET in earlier Forths. Old entries are not
001871r 3                       ; actually deleted, but merely overwritten by restoring CP and DP.
001871r 3                       ; Run the named word at a later time to restore all of the wordlists
001871r 3                       ; to their state when the word was created with marker.  Any words
001871r 3                       ; created after the marker (including the marker) will be forgotten.
001871r 3                       ;
001871r 3                       ; To do this, we want to end up with something that jumps to a
001871r 3                       ; run-time component with a link to the original CP and DP values:
001871r 3                       ;
001871r 3                       ;       jsr marker_runtime
001871r 3                       ;       <Original CP MSB>
001871r 3                       ;       <Original CP LSB>
001871r 3                       ;       <Original DP MSB> ( for CURRENT wordlist )
001871r 3                       ;       <Original DP LSB>
001871r 3                       ;       < USER variables from offset 4 to 39 >
001871r 3                       ;
001871r 3                       ;       The user variables include:
001871r 3                       ;       CURRENT (byte variable)
001871r 3                       ;       <All wordlists> (currently 12) (cell array)
001871r 3                       ;       <#ORDER> (byte variable)
001871r 3                       ;       <All search order> (currently 9) (byte array)
001871r 3                       ;
001871r 3                       ; This code uses tmp1 and tmp2
001871r 3                       ; """
001871r 3               
001871r 3               xt_marker:
001871r 3                               ; Before we do anything, we need to save CP, which
001871r 3                               ; after all is the whole point of this operation. CREATE
001871r 3                               ; uses tmp1 and tmp2, so we take the speed hit and push stuff
001871r 3                               ; to the stack
001871r 3  20 rr rr                     jsr current_to_dp
001874r 3               
001874r 3  A5 rr                        lda dp
001876r 3  48                           pha
001877r 3  A5 rr                        lda dp+1
001879r 3  48                           pha
00187Ar 3               
00187Ar 3  A5 rr                        lda cp
00187Cr 3  48                           pha
00187Dr 3  A5 rr                        lda cp+1
00187Fr 3  48                           pha
001880r 3               
001880r 3  20 rr rr                     jsr xt_create
001883r 3               
001883r 3                               ; By default, CREATE installs a subroutine jump to DOVAR, which
001883r 3                               ; we have to replace by a jump to marker_runtime. We back up
001883r 3                               ; two bytes and then overwrite the address
001883r 3  A5 rr                        lda cp          ; LSB
001885r 3  38                           sec
001886r 3  E9 02                        sbc #2
001888r 3  85 rr                        sta cp
00188Ar 3               
00188Ar 3  A5 rr                        lda cp+1        ; MSB
00188Cr 3  E9 00                        sbc #0          ; we only care about the borrow
00188Er 3  85 rr                        sta cp+1
001890r 3               
001890r 3                               ; Add the address of the runtime component
001890r 3  A0 rr                        ldy #>marker_runtime
001892r 3  A9 rr                        lda #<marker_runtime
001894r 3  20 rr rr                     jsr cmpl_word
001897r 3               
001897r 3                               ; Add original CP as payload
001897r 3  7A                           ply                     ; MSB
001898r 3  68                           pla                     ; LSB
001899r 3  20 rr rr                     jsr cmpl_word
00189Cr 3               
00189Cr 3                               ; Add original DP as payload
00189Cr 3  7A                           ply                     ; MSB
00189Dr 3  68                           pla                     ; LSB
00189Er 3  20 rr rr                     jsr cmpl_word
0018A1r 3               
0018A1r 3                               ; Add the user variables for the wordlists and search order.
0018A1r 3                               ; We're compiling them in byte order.
0018A1r 3  A0 04                        ldy #4                  ; Start at CURRENT
0018A3r 3               @marker_loop:
0018A3r 3  B1 rr                        lda (up),y
0018A5r 3  20 rr rr                     jsr cmpl_a
0018A8r 3  C8                           iny
0018A9r 3  98                           tya
0018AAr 3  C9 28                        cmp #40                 ; One past the end of the search order.
0018ACr 3  D0 F5                        bne @marker_loop
0018AEr 3               
0018AEr 3  60           z_marker:       rts
0018AFr 3               
0018AFr 3               
0018AFr 3               
0018AFr 3               marker_runtime:
0018AFr 3                       ; """Restore Dictionary and memory (DP and CP) to where the were
0018AFr 3                       ; when this marker was defined. We arrive here with the return
0018AFr 3                       ; address on the Return Stack in the usual 65c02 format
0018AFr 3                       ; """
0018AFr 3               
0018AFr 3                               ; Get the address of the string address off the stack and
0018AFr 3                               ; increase by one because of the RTS mechanics
0018AFr 3  68                           pla
0018B0r 3  85 rr                        sta tmp1        ; LSB of address
0018B2r 3  68                           pla
0018B3r 3  85 rr                        sta tmp1+1      ; MSB of address
0018B5r 3               
0018B5r 3  E6 rr                        inc tmp1
0018B7r 3  D0 02                        bne @1
0018B9r 3  E6 rr                        inc tmp1+1
0018BBr 3               @1:
0018BBr 3  A0 00                        ldy #0
0018BDr 3               
0018BDr 3                               ; CP was stored first
0018BDr 3  B1 rr                        lda (tmp1),y
0018BFr 3  85 rr                        sta cp
0018C1r 3  C8                           iny
0018C2r 3  B1 rr                        lda (tmp1),y
0018C4r 3  85 rr                        sta cp+1
0018C6r 3               
0018C6r 3                               ; Next was DP
0018C6r 3  C8                           iny
0018C7r 3  B1 rr                        lda (tmp1),y
0018C9r 3  85 rr                        sta dp
0018CBr 3  C8                           iny
0018CCr 3  B1 rr                        lda (tmp1),y
0018CEr 3  85 rr                        sta dp+1
0018D0r 3               
0018D0r 3                               ; Conveniently, the offset into both tmp1 and UP is 4
0018D0r 3                               ; to start restoring the wordlists and search order.
0018D0r 3  A0 04                        ldy #4
0018D2r 3               
0018D2r 3               @marker_restore_loop:
0018D2r 3                               ; Copy from the dictionary back on top of the wordlists
0018D2r 3                               ; and search order.
0018D2r 3  B1 rr                        lda (tmp1), y
0018D4r 3  91 rr                        sta (up), y
0018D6r 3  C8                           iny
0018D7r 3  98                           tya
0018D8r 3  C9 28                        cmp #40                 ; One past the end of the search order.
0018DAr 3  D0 F6                        bne @marker_restore_loop
0018DCr 3               
0018DCr 3  20 rr rr                     jsr dp_to_current       ; Move the CURRENT DP back.
0018DFr 3               
0018DFr 3                               ; The return instruction takes us back to the original caller
0018DFr 3  60                           rts
0018E0r 3               
0018E0r 3               
0018E0r 3               
0018E0r 3               ; ## MAX ( n n -- n ) "Keep larger of two numbers"
0018E0r 3               ; ## "max"  auto  ANS core
0018E0r 3                       ; """https://forth-standard.org/standard/core/MAX
0018E0r 3                       ; Compare TOS and NOS and keep which one is larger. Adapted from
0018E0r 3                       ; Lance A. Leventhal "6502 Assembly Language Subroutines". Negative
0018E0r 3                       ; Flag indicates which number is larger. See also
0018E0r 3                       ; http://6502.org/tutorials/compare_instructions.html and
0018E0r 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
0018E0r 3                       ; """
0018E0r 3               
0018E0r 3               xt_max:
0018E0r 3  20 rr rr                     jsr underflow_2
0018E3r 3               
0018E3r 3                               ; Compare LSB. We do this first to set the carry flag
0018E3r 3  B5 00                        lda 0,x         ; LSB of TOS
0018E5r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets the carry
0018E7r 3               
0018E7r 3  B5 01                        lda 1,x         ; MSB of TOS
0018E9r 3  F5 03                        sbc 3,x         ; MSB of NOS
0018EBr 3  50 02                        bvc @no_overflow
0018EDr 3               
0018EDr 3                               ; handle overflow, because we use signed numbers
0018EDr 3  49 80                        eor #$80        ; complement negative flag
0018EFr 3               
0018EFr 3               @no_overflow:
0018EFr 3                               ; if negative, NOS is larger and needs to be kept
0018EFr 3  30 08                        bmi @keep_nos
0018F1r 3               
0018F1r 3                               ; move TOS to NOS
0018F1r 3  B5 00                        lda 0,x
0018F3r 3  95 02                        sta 2,x
0018F5r 3  B5 01                        lda 1,x
0018F7r 3  95 03                        sta 3,x
0018F9r 3               
0018F9r 3               @keep_nos:
0018F9r 3  E8                           inx
0018FAr 3  E8                           inx
0018FBr 3               
0018FBr 3  60           z_max:          rts
0018FCr 3               
0018FCr 3               
0018FCr 3               
0018FCr 3               ; ## MIN ( n n -- n ) "Keep smaller of two numbers"
0018FCr 3               ; ## "min"  auto  ANS core
0018FCr 3                       ; """https://forth-standard.org/standard/core/MIN
0018FCr 3                       ; Adapted from Lance A. Leventhal "6502 Assembly Language
0018FCr 3                       ; Subroutines." Negative Flag indicateds which number is larger. See
0018FCr 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
0018FCr 3                       ; """
0018FCr 3               
0018FCr 3               xt_min:
0018FCr 3  20 rr rr                     jsr underflow_2
0018FFr 3               
0018FFr 3                               ; compare LSB. We do this first to set the carry flag
0018FFr 3  B5 00                        lda 0,x         ; LSB of TOS
001901r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets carry
001903r 3               
001903r 3  B5 01                        lda 1,x         ; MSB of TOS
001905r 3  F5 03                        sbc 3,x         ; MSB of NOS
001907r 3  50 02                        bvc @no_overflow
001909r 3               
001909r 3                               ; handle overflow because we use signed numbers
001909r 3  49 80                        eor #$80
00190Br 3               
00190Br 3               @no_overflow:
00190Br 3                               ; if negative, NOS is larger and needs to be dumped
00190Br 3  10 08                        bpl @keep_nos
00190Dr 3               
00190Dr 3                               ; move TOS to NOS
00190Dr 3  B5 00                        lda 0,x
00190Fr 3  95 02                        sta 2,x
001911r 3  B5 01                        lda 1,x
001913r 3  95 03                        sta 3,x
001915r 3               
001915r 3               @keep_nos:
001915r 3  E8                           inx
001916r 3  E8                           inx
001917r 3               
001917r 3  60           z_min:          rts
001918r 3               
001918r 3               
001918r 3               
001918r 3               ; ## MINUS ( n n -- n ) "Subtract TOS from NOS"
001918r 3               ; ## "-"  auto  ANS core
001918r 3                       ; """https://forth-standard.org/standard/core/Minus"""
001918r 3               xt_minus:
001918r 3  20 rr rr                     jsr underflow_2
00191Br 3               
00191Br 3  38                           sec
00191Cr 3  B5 02                        lda 2,x         ; LSB
00191Er 3  F5 00                        sbc 0,x
001920r 3  95 02                        sta 2,x
001922r 3               
001922r 3  B5 03                        lda 3,x         ; MSB
001924r 3  F5 01                        sbc 1,x
001926r 3  95 03                        sta 3,x
001928r 3               
001928r 3  E8                           inx
001929r 3  E8                           inx
00192Ar 3               
00192Ar 3  60           z_minus:        rts
00192Br 3               
00192Br 3               
00192Br 3               ; ## MINUS_LEADING ( addr1 u1 -- addr2 u2 ) "Remove leading spaces"
00192Br 3               ; ## "-leading"  auto  Tali String
00192Br 3                       ; """Remove leading whitespace. This is the reverse of -TRAILING
00192Br 3                       ; """
00192Br 3               
00192Br 3               xt_minus_leading:
00192Br 3  20 rr rr                     jsr underflow_2
00192Er 3               
00192Er 3               @loop:
00192Er 3                               ; Quit if we were given an empty string. This also terminates
00192Er 3                               ; the main loop
00192Er 3  B5 00                        lda 0,x
001930r 3  15 01                        ora 1,x
001932r 3  F0 0F                        beq @done
001934r 3               
001934r 3  A1 02                        lda (2,x)               ; get first character
001936r 3  20 rr rr                     jsr is_whitespace
001939r 3  90 08                        bcc @done
00193Br 3               
00193Br 3                               ; It's whitespace, move one down
00193Br 3  20 rr rr                     jsr xt_one              ; ( addr u 1 )
00193Er 3  20 rr rr                     jsr xt_slash_string     ; ( addr+ u-1 )
001941r 3               
001941r 3  80 EB                        bra @loop
001943r 3               @done:
001943r 3               z_minus_leading:
001943r 3  60                           rts
001944r 3               
001944r 3               
001944r 3               
001944r 3               ; ## MINUS_TRAILING ( addr u1 -- addr u2 ) "Remove trailing spaces"
001944r 3               ; ## "-trailing"  auto  ANS string
001944r 3                       ; """https://forth-standard.org/standard/string/MinusTRAILING
001944r 3                       ; Remove trailing spaces
001944r 3                       ; """
001944r 3               
001944r 3               xt_minus_trailing:
001944r 3  20 rr rr                     jsr underflow_2
001947r 3               
001947r 3                               ; if length entry is zero, return a zero and leave the
001947r 3                               ; address part untouched
001947r 3  B5 00                        lda 0,x         ; LSB of n
001949r 3  15 01                        ora 1,x         ; MSB of n
00194Br 3  F0 33                        beq @done
00194Dr 3               
00194Dr 3                               ; Compute address of last char in tmp1 as
00194Dr 3                               ; addr + u1 - 1
00194Dr 3               
00194Dr 3                               ; addr + u1
00194Dr 3  18                           clc
00194Er 3  B5 02                        lda 2,x         ; LSB of addr
001950r 3  75 00                        adc 0,x
001952r 3  85 rr                        sta tmp1
001954r 3  B5 03                        lda 3,x         ; MSB of addr
001956r 3  75 01                        adc 1,x
001958r 3  85 rr                        sta tmp1+1
00195Ar 3               
00195Ar 3                               ; - 1
00195Ar 3  A5 rr                        lda tmp1
00195Cr 3  D0 02                        bne @1
00195Er 3  C6 rr                        dec tmp1+1
001960r 3               @1:
001960r 3  C6 rr                        dec tmp1
001962r 3               
001962r 3               @loop:
001962r 3                               ; While spaces are found, move tmp1 backwards and
001962r 3                               ; decrease the count on the data stack.
001962r 3  B2 rr                        lda (tmp1)
001964r 3  C9 20                        cmp #AscSP
001966r 3  D0 18                        bne @done
001968r 3               
001968r 3                               ; Move back one address.
001968r 3  A5 rr                        lda tmp1
00196Ar 3  D0 02                        bne @2
00196Cr 3  C6 rr                        dec tmp1+1
00196Er 3               @2:
00196Er 3  C6 rr                        dec tmp1
001970r 3               
001970r 3                               ; Decrement count by one.
001970r 3  B5 00                        lda 0,x
001972r 3  D0 02                        bne @3
001974r 3  D6 01                        dec 1,x
001976r 3               @3:
001976r 3  D6 00                        dec 0,x
001978r 3               
001978r 3                               ; Check if there are any characters left.
001978r 3  B5 00                        lda 0,x
00197Ar 3  15 01                        ora 1,x
00197Cr 3  F0 02                        beq @done       ; Count has reached zero - we're done!
00197Er 3               
00197Er 3  80 E2                        bra @loop
001980r 3               
001980r 3               @done:
001980r 3               z_minus_trailing:
001980r 3  60                           rts
001981r 3               
001981r 3               
001981r 3               
001981r 3               ; ## MOD ( n1 n2 -- n ) "Divide NOS by TOS and return the remainder"
001981r 3               ; ## "mod"  auto  ANS core
001981r 3                       ; """https://forth-standard.org/standard/core/MOD
001981r 3                       ;
001981r 3                       ; The Forth definition of this word is  : MOD /MOD DROP ;
001981r 3                       ; so we just jump to xt_slash_mod and dump the actual result.
001981r 3                       ; """
001981r 3               xt_mod:
001981r 3  20 rr rr                     jsr underflow_2
001984r 3               
001984r 3  20 rr rr                     jsr xt_slash_mod
001987r 3               
001987r 3  E8                           inx             ; DROP
001988r 3  E8                           inx
001989r 3               z_mod:
001989r 3  60                           rts
00198Ar 3               
00198Ar 3               
00198Ar 3               ; ## MOVE ( addr1 addr2 u -- ) "Copy bytes"
00198Ar 3               ; ## "move"  auto  ANS core
00198Ar 3                       ; """https://forth-standard.org/standard/core/MOVE
00198Ar 3                       ; Copy u "address units" from addr1 to addr2. Since our address
00198Ar 3                       ; units are bytes, this is just a front-end for CMOVE and CMOVE>. This
00198Ar 3                       ; is actually the only one of these three words that is in the CORE
00198Ar 3                       ; set.
00198Ar 3                       ;
00198Ar 3                       ; This word must not be natively compiled.
00198Ar 3                       ; """
00198Ar 3               
00198Ar 3               xt_move:
00198Ar 3                               ; We let CMOVE and CMOVE> check if there is underflow or
00198Ar 3                               ; we've been told to copy zero bytes
00198Ar 3               
00198Ar 3                               ; compare MSB first
00198Ar 3  B5 03                        lda 3,x                 ; MSB of addr2
00198Cr 3  D5 05                        cmp 5,x                 ; MSB of addr1
00198Er 3  F0 05                        beq @lsb                ; wasn't helpful, move to LSB
001990r 3  B0 0E                        bcs @to_move_up         ; we want CMOVE>
001992r 3               
001992r 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001995r 3               
001995r 3               @lsb:
001995r 3                               ; MSB were equal, so do the whole thing over with LSB
001995r 3  B5 02                        lda 2,x                 ; LSB of addr2
001997r 3  D5 04                        cmp 4,x                 ; LSB of addr1
001999r 3  F0 08                        beq @equal              ; LSB is equal as well
00199Br 3  B0 03                        bcs @to_move_up         ; we want CMOVE>
00199Dr 3               
00199Dr 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
0019A0r 3               
0019A0r 3               @to_move_up:
0019A0r 3  4C rr rr                     jmp xt_cmove_up         ; JSR/RTS
0019A3r 3               @equal:
0019A3r 3                               ; drop three entries from Data Stack
0019A3r 3  8A                           txa
0019A4r 3  18                           clc
0019A5r 3  69 06                        adc #6
0019A7r 3  AA                           tax
0019A8r 3               
0019A8r 3  60           z_move:         rts
0019A9r 3               
0019A9r 3               
0019A9r 3               
0019A9r 3               ; ## NAME_TO_INT ( nt -- xt ) "Convert Name Token to Execute Token"
0019A9r 3               ; ## "name>int"  tested  Gforth
0019A9r 3                       ; """See
0019A9r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0019A9r 3                       ; """
0019A9r 3               
0019A9r 3               xt_name_to_int:
0019A9r 3  20 rr rr                     jsr underflow_1
0019ACr 3               
0019ACr 3                               ; The xt starts four bytes down from the nt
0019ACr 3  B5 00                        lda 0,x
0019AEr 3  18                           clc
0019AFr 3  69 04                        adc #4
0019B1r 3  85 rr                        sta tmp3
0019B3r 3               
0019B3r 3  B5 01                        lda 1,x
0019B5r 3  90 01                        bcc @done
0019B7r 3  1A                           inc
0019B8r 3               @done:
0019B8r 3  85 rr                        sta tmp3+1
0019BAr 3               
0019BAr 3  A0 00                        ldy #0
0019BCr 3  B1 rr                        lda (tmp3),y
0019BEr 3  95 00                        sta 0,x
0019C0r 3  C8                           iny
0019C1r 3  B1 rr                        lda (tmp3),y
0019C3r 3  95 01                        sta 1,x
0019C5r 3               
0019C5r 3  60           z_name_to_int:  rts
0019C6r 3               
0019C6r 3               
0019C6r 3               
0019C6r 3               ; ## NAME_TO_STRING ( nt -- addr u ) "Given a name token, return string of word"
0019C6r 3               ; ## "name>string"  tested  Gforth
0019C6r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html"""
0019C6r 3               
0019C6r 3               xt_name_to_string:
0019C6r 3  20 rr rr                     jsr underflow_1
0019C9r 3               
0019C9r 3  CA                           dex
0019CAr 3  CA                           dex
0019CBr 3               
0019CBr 3                               ; the length of the string is the first byte of the
0019CBr 3                               ; header pointed to by nt
0019CBr 3  A1 02                        lda (2,x)
0019CDr 3  95 00                        sta 0,x
0019CFr 3  74 01                        stz 1,x
0019D1r 3               
0019D1r 3                               ; the string itself always starts eight bytes down
0019D1r 3  B5 02                        lda 2,x         ; LSB
0019D3r 3  18                           clc
0019D4r 3  69 08                        adc #8
0019D6r 3  A8                           tay
0019D7r 3  B5 03                        lda 3,x         ; MSB
0019D9r 3  69 00                        adc #0          ; just need carry
0019DBr 3  95 03                        sta 3,x
0019DDr 3  94 02                        sty 2,x
0019DFr 3               
0019DFr 3               z_name_to_string:
0019DFr 3  60                           rts
0019E0r 3               
0019E0r 3               
0019E0r 3               ; ## NC_LIMIT ( -- addr ) "Return address where NC-LIMIT value is kept"
0019E0r 3               ; ## "nc-limit"  tested  Tali Forth
0019E0r 3               
0019E0r 3               xt_nc_limit:
0019E0r 3  CA                           dex
0019E1r 3  CA                           dex
0019E2r 3  A9 rr                        lda #<nc_limit
0019E4r 3  95 00                        sta 0,x
0019E6r 3  A9 rr                        lda #>nc_limit
0019E8r 3  95 01                        sta 1,x
0019EAr 3               
0019EAr 3  60           z_nc_limit:     rts
0019EBr 3               
0019EBr 3               
0019EBr 3               
0019EBr 3               ; ## NEGATE ( n -- n ) "Two's complement"
0019EBr 3               ; ## "negate"  auto  ANS core
0019EBr 3                       ; """https://forth-standard.org/standard/core/NEGATE"""
0019EBr 3               xt_negate:
0019EBr 3  20 rr rr                     jsr underflow_1
0019EEr 3               
0019EEr 3  A9 00                	lda #0
0019F0r 3  38                           sec
0019F1r 3  F5 00                        sbc 0,x         ; LSB
0019F3r 3  95 00                        sta 0,x
0019F5r 3               
0019F5r 3  A9 00                        lda #0
0019F7r 3  F5 01                        sbc 1,x         ; MSB
0019F9r 3  95 01                        sta 1,x
0019FBr 3               
0019FBr 3  60           z_negate:       rts
0019FCr 3               
0019FCr 3               
0019FCr 3               ; ## NEVER_NATIVE ( -- ) "Flag last word as never natively compiled"
0019FCr 3               ; ## "never-native"  auto  Tali Forth
0019FCr 3               xt_never_native:
0019FCr 3  20 rr rr                     jsr current_to_dp
0019FFr 3  A0 01                        ldy #1          ; offset for status byte
001A01r 3  B1 rr                        lda (dp),y
001A03r 3  09 08                        ora #NN         ; Make sure NN flag is set
001A05r 3  29 FD                        and #$ff-AN     ; and AN flag is clear.
001A07r 3  91 rr                        sta (dp),y
001A09r 3               z_never_native:
001A09r 3  60                           rts
001A0Ar 3               
001A0Ar 3               
001A0Ar 3               ; ## NIP ( b a -- a ) "Delete NOS"
001A0Ar 3               ; ## "nip"  auto  ANS core ext
001A0Ar 3                       ; """https://forth-standard.org/standard/core/NIP"""
001A0Ar 3               xt_nip:
001A0Ar 3  20 rr rr                     jsr underflow_2
001A0Dr 3               
001A0Dr 3  B5 00                        lda 0,x         ; LSB
001A0Fr 3  95 02                        sta 2,x
001A11r 3  B5 01                        lda 1,x         ; MSB
001A13r 3  95 03                        sta 3,x
001A15r 3               
001A15r 3  E8                           inx
001A16r 3  E8                           inx
001A17r 3               
001A17r 3  60           z_nip:          rts
001A18r 3               
001A18r 3               
001A18r 3               ; ## NOT_EQUALS ( n m -- f ) "Return a true flag if TOS != NOS"
001A18r 3               ; ## "<>"  auto  ANS core ext
001A18r 3                       ; """https://forth-standard.org/standard/core/ne
001A18r 3                       ;
001A18r 3                       ; This is just a variant of EQUAL, we code it separately
001A18r 3                       ; for speed.
001A18r 3                       ; """
001A18r 3               
001A18r 3               xt_not_equals:
001A18r 3  20 rr rr                     jsr underflow_2
001A1Br 3               
001A1Br 3  A0 00                        ldy #0                  ; default is true
001A1Dr 3               
001A1Dr 3  B5 00                        lda 0,x                 ; LSB
001A1Fr 3  D5 02                        cmp 2,x
001A21r 3  D0 0A                        bne @not_equal
001A23r 3               
001A23r 3                               ; LSB is equal
001A23r 3  B5 01                        lda 1,x                 ; MSB
001A25r 3  D5 03                        cmp 3,x
001A27r 3  D0 04                        bne @not_equal
001A29r 3               
001A29r 3  A9 FF                        lda #$FF
001A2Br 3  80 01                        bra @done
001A2Dr 3               
001A2Dr 3               @not_equal:
001A2Dr 3  88                           dey                     ; drop thru to done
001A2Er 3               
001A2Er 3               @done:
001A2Er 3  98                           tya
001A2Fr 3  E8                           inx
001A30r 3  E8                           inx
001A31r 3  95 00                        sta 0,x
001A33r 3  95 01                        sta 1,x
001A35r 3               
001A35r 3  60           z_not_equals:   rts
001A36r 3               
001A36r 3               
001A36r 3               
001A36r 3               ; ## NOT_ROTE ( a b c -- c a b ) "Rotate upwards"
001A36r 3               ; ## "-rot"  auto  Gforth
001A36r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Data-stack.html"""
001A36r 3               
001A36r 3               xt_not_rote:
001A36r 3  20 rr rr                     jsr underflow_3
001A39r 3               
001A39r 3  B4 01                        ldy 1,x         ; MSB first
001A3Br 3  B5 03                        lda 3,x
001A3Dr 3  95 01                        sta 1,x
001A3Fr 3               
001A3Fr 3  B5 05                        lda 5,x
001A41r 3  95 03                        sta 3,x
001A43r 3  94 05                        sty 5,x
001A45r 3               
001A45r 3  B4 00                        ldy 0,x         ; LSB second
001A47r 3  B5 02                        lda 2,x
001A49r 3  95 00                        sta 0,x
001A4Br 3               
001A4Br 3  B5 04                        lda 4,x
001A4Dr 3  95 02                        sta 2,x
001A4Fr 3  94 04                        sty 4,x
001A51r 3               
001A51r 3  60           z_not_rote:     rts
001A52r 3               
001A52r 3               
001A52r 3               
001A52r 3               ; ## NUMBER ( addr u -- u | d ) "Convert a number string"
001A52r 3               ; ## "number"  auto  Tali Forth
001A52r 3                       ; """Convert a number string to a double or single cell number. This
001A52r 3                       ; is a wrapper for >NUMBER and follows the convention set out in the
001A52r 3                       ; "Forth Programmer's Handbook" (Conklin & Rather) 3rd edition p. 87.
001A52r 3                       ; Based in part on the "Starting Forth" code
001A52r 3                       ; https://www.forth.com/starting-forth/10-input-output-operators/
001A52r 3                       ; Gforth uses S>NUMBER? and S>UNUMBER? which return numbers and a flag
001A52r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
001A52r 3                       ; Another difference to Gforth is that we follow ANS Forth that the
001A52r 3                       ; dot to signal a double cell number is required to be the last
001A52r 3                       ; character of the string.
001A52r 3                       ;
001A52r 3                       ; Number calls >NUMBER which in turn calls UM*,
001A52r 3                       ; which uses tmp1, tmp2, and tmp3, so we can't use them here, which is
001A52r 3                       ; a pain.
001A52r 3                       ;"""
001A52r 3               
001A52r 3               xt_number:
001A52r 3  20 rr rr                     jsr underflow_2
001A55r 3               
001A55r 3                               ; we keep the flags for sign and double in tmpdsp because
001A55r 3                               ; we've run out of temporary variables
001A55r 3  64 rr                        stz tmpdsp      ; flag for double
001A57r 3  64 rr                        stz tmpdsp+1    ; flag for minus
001A59r 3               
001A59r 3                               ; If the first character is a minus, strip it off and set
001A59r 3                               ; the flag
001A59r 3  A1 02                        lda (2,x)
001A5Br 3  C9 2D                        cmp #$2D        ; ASCII for "-"
001A5Dr 3  D0 0A                        bne @check_dot
001A5Fr 3               
001A5Fr 3                               ; It's a minus
001A5Fr 3  C6 rr                        dec tmpdsp+1
001A61r 3  F6 02                        inc 2,x         ; start one character later
001A63r 3  D0 02                        bne @1
001A65r 3  F6 03                        inc 3,x
001A67r 3               @1:
001A67r 3  D6 00                        dec 0,x         ; decrease string length by one
001A69r 3               
001A69r 3               @check_dot:
001A69r 3                               ; If the last character is a dot, strip it off and set a
001A69r 3                               ; flag. We can use tmptos as a temporary variable
001A69r 3  B5 02                        lda 2,x         ; LSB of address
001A6Br 3  18                           clc
001A6Cr 3  75 00                        adc 0,x         ; length of string
001A6Er 3  85 rr                        sta tmptos
001A70r 3  B5 03                        lda 3,x
001A72r 3  69 00                        adc #0          ; only need carry
001A74r 3  85 rr                        sta tmptos+1
001A76r 3               
001A76r 3                               ; tmptos now points to the first character after the string,
001A76r 3                               ; but we need the last character
001A76r 3  A5 rr                        lda tmptos
001A78r 3  D0 02                        bne @2
001A7Ar 3  C6 rr                        dec tmptos+1
001A7Cr 3               @2:
001A7Cr 3  C6 rr                        dec tmptos
001A7Er 3               
001A7Er 3  B2 rr                        lda (tmptos)
001A80r 3  C9 2E                        cmp #'.'
001A82r 3  D0 04                        bne @main
001A84r 3               
001A84r 3                               ; We have a dot, which means this is a double number. Flag
001A84r 3                               ; the fact and reduce string length by one
001A84r 3  C6 rr                        dec tmpdsp
001A86r 3  D6 00                        dec 0,x
001A88r 3               
001A88r 3               @main:
001A88r 3                               ; Set up stack for subroutine jump to >NUMBER, which means
001A88r 3                               ; we have to go ( addr u --> ud addr u )
001A88r 3  CA                           dex
001A89r 3  CA                           dex
001A8Ar 3  CA                           dex
001A8Br 3  CA                           dex
001A8Cr 3               
001A8Cr 3  B5 04                        lda 4,x         ; LSB of length
001A8Er 3  95 00                        sta 0,x
001A90r 3  74 01                        stz 1,x         ; MSB, max length 255 chars
001A92r 3               
001A92r 3  B5 06                        lda 6,x         ; LSB of address
001A94r 3  95 02                        sta 2,x
001A96r 3  B5 07                        lda 7,x         ; MSB of address
001A98r 3  95 03                        sta 3,x
001A9Ar 3               
001A9Ar 3  74 04                        stz 4,x         ; clear space for ud
001A9Cr 3  74 05                        stz 5,x
001A9Er 3  74 06                        stz 6,x
001AA0r 3  74 07                        stz 7,x
001AA2r 3               
001AA2r 3  20 rr rr                     jsr xt_to_number        ; (ud addr u -- ud addr u )
001AA5r 3               
001AA5r 3                               ; test length of returned string, which should be zero
001AA5r 3  B5 00                        lda 0,x
001AA7r 3  F0 15                        beq @all_converted
001AA9r 3               
001AA9r 3                               ; Something went wrong, we still have characters left over,
001AA9r 3                               ; so we print an error and abort. If the NUMBER was called
001AA9r 3                               ; by INTERPRET, we've already checked for Forth words, so
001AA9r 3                               ; we're in deep trouble one way or another
001AA9r 3  A9 3E                        lda #$3E        ; ASCII for ">"
001AABr 3  20 rr rr                     jsr emit_a
001AAEr 3  20 rr rr                     jsr xt_type
001AB1r 3  A9 3C                        lda #$3C        ; ASCII for "<"
001AB3r 3  20 rr rr                     jsr emit_a
001AB6r 3  20 rr rr                     jsr xt_space
001AB9r 3               
001AB9r 3  A9 08                        lda #err_syntax
001ABBr 3  4C rr rr                     jmp error
001ABEr 3               
001ABEr 3               @all_converted:
001ABEr 3                               ; We can drop the string info
001ABEr 3  E8                           inx
001ABFr 3  E8                           inx
001AC0r 3  E8                           inx
001AC1r 3  E8                           inx
001AC2r 3               
001AC2r 3                               ; We have a double-cell number on the Data Stack that might
001AC2r 3                               ; actually have a minus and might actually be single-cell
001AC2r 3  A5 rr                        lda tmpdsp      ; flag for double
001AC4r 3  F0 0D                        beq @single
001AC6r 3               
001AC6r 3                               ; Set status bit 5 to indicate this is a double number
001AC6r 3  A9 20                        lda #%00100000
001AC8r 3  04 rr                        tsb status
001ACAr 3               
001ACAr 3                               ; This is a double cell number. If it had a minus, we'll have
001ACAr 3                               ; to negate it
001ACAr 3  A5 rr                        lda tmpdsp+1
001ACCr 3  F0 12                        beq @done       ; no minus, all done
001ACEr 3               
001ACEr 3  20 rr rr                     jsr xt_dnegate
001AD1r 3               
001AD1r 3  80 0D                        bra @done
001AD3r 3               
001AD3r 3               @single:
001AD3r 3                               ; This is a single number, so we just drop the top cell
001AD3r 3  E8                           inx
001AD4r 3  E8                           inx
001AD5r 3               
001AD5r 3                               ; Clear status bit 5 to indicate this is a single number
001AD5r 3  A9 20                        lda #%00100000
001AD7r 3  14 rr                        trb status
001AD9r 3               
001AD9r 3                               ; If we had a minus, we'll have to negate it
001AD9r 3  A5 rr                        lda tmpdsp+1
001ADBr 3  F0 03                        beq @done       ; no minus, all done
001ADDr 3               
001ADDr 3  20 rr rr                     jsr xt_negate
001AE0r 3               @done:
001AE0r 3  60           z_number:       rts
001AE1r 3               
001AE1r 3               
001AE1r 3               
001AE1r 3               ; ## NUMBER_SIGN ( ud -- ud ) "Add character to pictured output string"
001AE1r 3               ; ## "#"  auto  ANS core
001AE1r 3                       ; """https://forth-standard.org/standard/core/num
001AE1r 3                       ; Add one char to the beginning of the pictured output string.
001AE1r 3                       ;
001AE1r 3                       ; Based on
001AE1r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001AE1r 3                       ; Forth code  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
001AE1r 3                       ; """
001AE1r 3               xt_number_sign:
001AE1r 3  20 rr rr                     jsr underflow_2         ; double number
001AE4r 3               
001AE4r 3  20 rr rr                     jsr xt_base
001AE7r 3  20 rr rr                     jsr xt_fetch            ; ( ud1 base )
001AEAr 3               
001AEAr 3                               ; The following code is the ancient Forth word UD/MOD, which in
001AEAr 3                               ; various Forths (including Gforth) lives on under the hood,
001AEAr 3                               ; even though it's not an ANS standard word, it doesn't appear
001AEAr 3                               ; in the docs, it's only used here, and there are no tests for
001AEAr 3                               ; it. This is why we got rid of it. We'll be converting this
001AEAr 3                               ; mess to something more sane in the long run.
001AEAr 3  20 rr rr                     jsr xt_to_r             ; >r
001AEDr 3  20 rr rr                     jsr xt_zero             ; 0
001AF0r 3  20 rr rr                     jsr xt_r_fetch          ; r@
001AF3r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001AF6r 3  20 rr rr                     jsr xt_rot              ; rot
001AF9r 3  20 rr rr                     jsr xt_rot              ; rot
001AFCr 3  20 rr rr                     jsr xt_r_from           ; r>
001AFFr 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001B02r 3  20 rr rr                     jsr xt_rot              ; rot
001B05r 3                               ; end of UD/MOD ( rem ud )
001B05r 3               
001B05r 3  20 rr rr                     jsr xt_rot              ; ( ud rem )
001B08r 3               
001B08r 3                               ; Convert the number that is left over to an ASCII character. We
001B08r 3                               ; use a string lookup for speed. Use either abc_str_lower for
001B08r 3                               ; lower case or abc_str_upper for upper case (prefered)
001B08r 3  B5 00                        lda 0,x
001B0Ar 3  A8                           tay
001B0Br 3  B9 rr rr                     lda s_abc_upper,y
001B0Er 3  95 00                        sta 0,x
001B10r 3  74 01                        stz 1,x                 ; paranoid; now ( ud char )
001B12r 3               
001B12r 3  20 rr rr                     jsr xt_hold
001B15r 3               
001B15r 3               z_number_sign:
001B15r 3  60                           rts
001B16r 3               
001B16r 3               
001B16r 3               ; ## NUMBER_SIGN_GREATER ( d -- addr u ) "Finish pictured number conversion"
001B16r 3               ; ## "#>"  auto  ANS core
001B16r 3                       ; """https://forth-standard.org/standard/core/num-end
001B16r 3                       ; Finish conversion of pictured number string, putting address and
001B16r 3                       ; length on the Data Stack.
001B16r 3                       ;
001B16r 3                       ; Original Fort is  2DROP HLD @ PAD OVER -
001B16r 3                       ; Based on
001B16r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001B16r 3                       ; """
001B16r 3               xt_number_sign_greater:
001B16r 3               
001B16r 3  20 rr rr                     jsr underflow_2         ; double number
001B19r 3               
001B19r 3                               ; The start address lives in tohold
001B19r 3  A5 rr                        lda tohold
001B1Br 3  95 00                        sta 0,x         ; LSB of tohold
001B1Dr 3  95 02                        sta 2,x
001B1Fr 3  A5 rr                        lda tohold+1
001B21r 3  95 01                        sta 1,x         ; MSB of addr
001B23r 3  95 03                        sta 3,x         ; ( addr addr )
001B25r 3               
001B25r 3                               ; The length of the string is pad - addr
001B25r 3  20 rr rr                     jsr xt_pad      ; ( addr addr pad )
001B28r 3               
001B28r 3  38                           sec
001B29r 3  B5 00                        lda 0,x         ; LSB of pad address
001B2Br 3  F5 02                        sbc 2,x
001B2Dr 3  95 02                        sta 2,x
001B2Fr 3               
001B2Fr 3  B5 01                        lda 1,x         ; MSB, which should always be zero
001B31r 3  F5 03                        sbc 3,x
001B33r 3  95 03                        sta 3,x         ; ( addr u pad )
001B35r 3               
001B35r 3  E8                           inx
001B36r 3  E8                           inx
001B37r 3               
001B37r 3               z_number_sign_greater:
001B37r 3  60                           rts
001B38r 3               
001B38r 3               
001B38r 3               ; ## NUMBER_SIGN_S ( d -- addr u ) "Completely convert pictured output"
001B38r 3               ; ## "#s"  auto  ANS core
001B38r 3                       ; """https://forth-standard.org/standard/core/numS
001B38r 3                       ; Completely convert number for pictured numerical output.
001B38r 3                       ;
001B38r 3                       ; Based on
001B38r 3                       ; https://github.com/philburk/pforth/blob/master/fth/system.fth
001B38r 3                       ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
001B38r 3                       ; """
001B38r 3               
001B38r 3               xt_number_sign_s:
001B38r 3  20 rr rr                     jsr underflow_2
001B3Br 3               @loop:
001B3Br 3                               ; convert a single number ("#")
001B3Br 3  20 rr rr                     jsr xt_number_sign
001B3Er 3               
001B3Er 3                               ; stop when double-celled number in TOS is zero:
001B3Er 3  B5 00                        lda 0,x
001B40r 3  15 01                        ora 1,x
001B42r 3  15 02                        ora 2,x
001B44r 3  15 03                        ora 3,x
001B46r 3  D0 F3                        bne @loop
001B48r 3               
001B48r 3               z_number_sign_s:
001B48r 3  60                           rts
001B49r 3               
001B49r 3               
001B49r 3               
001B49r 3               ; ## OF (C: -- of-sys) (x1 x2 -- |x1) "Conditional flow control"
001B49r 3               ; ## "of"  auto  ANS core ext
001B49r 3                       ; """http://forth-standard.org/standard/core/OF"""
001B49r 3               
001B49r 3               xt_of:
001B49r 3                               ; Check if value is equal to this case.
001B49r 3                               ; Postpone over (eg. compile a jsr to it)
001B49r 3  A0 rr                        ldy #>xt_over
001B4Br 3  A9 rr                        lda #<xt_over
001B4Dr 3  20 rr rr                     jsr cmpl_subroutine
001B50r 3               
001B50r 3                               ; Postpone = (EQUAL), that is, compile a jsr to it
001B50r 3  A0 rr                        ldy #>xt_equal
001B52r 3  A9 rr                        lda #<xt_equal
001B54r 3  20 rr rr                     jsr cmpl_subroutine
001B57r 3               
001B57r 3  20 rr rr                     jsr xt_if
001B5Ar 3               
001B5Ar 3                               ; If it's true, consume the original value.
001B5Ar 3                               ; Postpone DROP (eg. compile a jsr to it)
001B5Ar 3  A0 rr                        ldy #>xt_drop
001B5Cr 3  A9 rr                        lda #<xt_drop
001B5Er 3  20 rr rr                     jsr cmpl_subroutine
001B61r 3               
001B61r 3  60           z_of:           rts
001B62r 3               
001B62r 3               
001B62r 3               
001B62r 3               ; ## ONE ( -- n ) "Push the number 1 to the Data Stack"
001B62r 3               ; ## "1"  auto  Tali Forth
001B62r 3                       ; """This is also the code for EDITOR-WORDLIST"""
001B62r 3               xt_editor_wordlist:
001B62r 3               xt_one:
001B62r 3  CA                           dex
001B63r 3  CA                           dex
001B64r 3  A9 01                        lda #1
001B66r 3  95 00                        sta 0,x
001B68r 3  74 01                        stz 1,x
001B6Ar 3               
001B6Ar 3               z_editor_wordlist:
001B6Ar 3               z_one:
001B6Ar 3  60                           rts
001B6Br 3               
001B6Br 3               
001B6Br 3               ; ## ONE_MINUS ( u -- u-1 ) "Decrease TOS by one"
001B6Br 3               ; ## "1-"  auto  ANS core
001B6Br 3                       ; """https://forth-standard.org/standard/core/OneMinus"""
001B6Br 3               
001B6Br 3               xt_one_minus:
001B6Br 3  20 rr rr                     jsr underflow_1
001B6Er 3               
001B6Er 3  B5 00                        lda 0,x
001B70r 3  D0 02                        bne @1
001B72r 3  D6 01                        dec 1,x
001B74r 3               @1:
001B74r 3  D6 00                        dec 0,x
001B76r 3               
001B76r 3  60           z_one_minus:    rts
001B77r 3               
001B77r 3               
001B77r 3               
001B77r 3               ; ## ONE_PLUS ( u -- u+1 ) "Increase TOS by one"
001B77r 3               ; ## "1+"  auto  ANS core
001B77r 3                       ; """https://forth-standard.org/standard/core/OnePlus
001B77r 3                       ;
001B77r 3                       ; Code is shared with CHAR-PLUS
001B77r 3                       ; """
001B77r 3               
001B77r 3               xt_char_plus:
001B77r 3               xt_one_plus:
001B77r 3  20 rr rr                     jsr underflow_1
001B7Ar 3               
001B7Ar 3  F6 00                        inc 0,x
001B7Cr 3  D0 02                        bne @done
001B7Er 3  F6 01                        inc 1,x
001B80r 3               
001B80r 3               @done:
001B80r 3               z_char_plus:
001B80r 3  60           z_one_plus:     rts
001B81r 3               
001B81r 3               
001B81r 3               
001B81r 3               ; ## ONLY ( -- ) "Set earch order to minimum wordlist"
001B81r 3               ; ## "only"  auto  ANS search ext
001B81r 3                       ; """https://forth-standard.org/standard/search/ONLY"""
001B81r 3               
001B81r 3               xt_only:
001B81r 3                               ; Put -1 on data stack.
001B81r 3  CA                           dex
001B82r 3  CA                           dex
001B83r 3  A9 FF                        lda #$FF
001B85r 3  95 00                        sta 0,x
001B87r 3  95 01                        sta 1,x
001B89r 3               
001B89r 3                               ; Invoke set-order to set the minimum search order.
001B89r 3  20 rr rr                     jsr xt_set_order
001B8Cr 3               
001B8Cr 3  60           z_only:         rts
001B8Dr 3               
001B8Dr 3               
001B8Dr 3               
001B8Dr 3               ; ## OR ( m n -- n ) "Logically OR TOS and NOS"
001B8Dr 3               ; ## "or"  auto  ANS core
001B8Dr 3                       ; """https://forth-standard.org/standard/core/OR"
001B8Dr 3               xt_or:
001B8Dr 3  20 rr rr                     jsr underflow_2
001B90r 3               
001B90r 3  B5 00                        lda 0,x
001B92r 3  15 02                        ora 2,x
001B94r 3  95 02                        sta 2,x
001B96r 3               
001B96r 3  B5 01                        lda 1,x
001B98r 3  15 03                        ora 3,x
001B9Ar 3  95 03                        sta 3,x
001B9Cr 3               
001B9Cr 3  E8                           inx
001B9Dr 3  E8                           inx
001B9Er 3               
001B9Er 3  60           z_or:           rts
001B9Fr 3               
001B9Fr 3               
001B9Fr 3               ; ## ORDER ( -- ) "Print current word order list and current WID"
001B9Fr 3               ; ## "order"  auto  ANS core
001B9Fr 3                       ; """https://forth-standard.org/standard/search/ORDER
001B9Fr 3                       ; Note the search order is displayed from first search to last
001B9Fr 3                       ; searched and is therefore exactly the reverse of the order in which
001B9Fr 3                       ; Forth stacks are displayed.
001B9Fr 3                       ;
001B9Fr 3                       ; A Forth implementation of this word is:
001B9Fr 3                       ;
001B9Fr 3                       ; 	: .wid ( wid -- )
001B9Fr 3                       ; 	dup 0=  if ." Forth "  drop    else
001B9Fr 3                       ; 	dup 1 = if ." Editor " drop    else
001B9Fr 3                       ; 	dup 2 = if ." Assembler " drop else
001B9Fr 3                       ; 	dup 3 = if ." Root " drop      else
001B9Fr 3                       ; 	           . ( just print the number )
001B9Fr 3                       ; 	then then then then ;
001B9Fr 3                       ;
001B9Fr 3                       ; : ORDER ( -- )
001B9Fr 3                       ; 	cr get-order 0 ?do .wid loop
001B9Fr 3                       ; 	space space get-current .wid ;
001B9Fr 3                       ;
001B9Fr 3                       ; This is an interactive program, so speed
001B9Fr 3                       ; is not as important as size. We assume we do not have more than 255
001B9Fr 3                       ; wordlists.
001B9Fr 3                       ; """
001B9Fr 3               
001B9Fr 3               xt_order:
001B9Fr 3  20 rr rr                     jsr xt_cr
001BA2r 3  20 rr rr                     jsr xt_get_order        ; ( wid_n ... wid_1 n )
001BA5r 3               
001BA5r 3                               ; Paranoid: Check if there are no wordlists, a rather
001BA5r 3                               ; pathological case. this would mean ( 0 ) on the stack. In
001BA5r 3                               ; that case, we just drop n and run
001BA5r 3  B5 00                        lda 0,x                 ; assumes no more than 255 wordlists
001BA7r 3  F0 1E                        beq @drop_done
001BA9r 3               
001BA9r 3               @have_wordlists:
001BA9r 3                               ; We arrive here with the LSB of TOS in A, the number of WIDs
001BA9r 3                               ; on the stack
001BA9r 3  A8                           tay
001BAAr 3               @loop:
001BAAr 3  E8                           inx
001BABr 3  E8                           inx                     ; DROP, now ( wid_n ... wid_1 )
001BACr 3  B5 00                        lda 0,x
001BAEr 3               
001BAEr 3  5A                           phy
001BAFr 3  20 rr rr                     jsr _print_wid_string   ; internal helper function
001BB2r 3  7A                           ply
001BB3r 3               
001BB3r 3  88                           dey
001BB4r 3  D0 F4                        bne @loop
001BB6r 3               
001BB6r 3                               ; We've printed the wordlists, now we add the current wordlist.
001BB6r 3                               ; This follows the convention of Gforth
001BB6r 3  20 rr rr                     jsr xt_space
001BB9r 3  20 rr rr                     jsr xt_space
001BBCr 3  20 rr rr                     jsr xt_get_current      ; ( wid )
001BBFr 3               
001BBFr 3  B5 00                        lda 0,x
001BC1r 3  20 rr rr                     jsr _print_wid_string
001BC4r 3  20 rr rr                     jsr xt_cr
001BC7r 3               
001BC7r 3               @drop_done:
001BC7r 3  E8                           inx
001BC8r 3  E8                           inx
001BC9r 3               z_order:
001BC9r 3  60                           rts
001BCAr 3               
001BCAr 3               _print_wid_string:
001BCAr 3                       ; """Helper function for ORDER: Given a WID in A, print the
001BCAr 3                       ; corresponding string. If there is no such word list defined, just
001BCAr 3                       ; print the number. Assumes we will not have more than 256 WIDs; also
001BCAr 3                       ; assumes we have just loaded A so Z reflects status of byte.  In
001BCAr 3                       ; theory, we could speed this up by having the WID be the same as the
001BCAr 3                       ; number of the strings. However, ORDER is used rather infrequently and
001BCAr 3                       ; this would make changes to the strings.asm file very dangerous, so we
001BCAr 3                       ; follow the slightly more complicated route with a translation table.
001BCAr 3                       ; """
001BCAr 3                               ; If the WID is larger than 3, we have no string avaliable and
001BCAr 3                               ; just print the number.
001BCAr 3                               ; See http://6502.org/tutorials/compare_instructions.html
001BCAr 3                               ; for details
001BCAr 3  C9 04                        cmp #4
001BCCr 3  90 09                        bcc @output_string      ; less than 4, print a real string
001BCEr 3               
001BCEr 3                               ; Our WID is not less than 4, that is, 4 or larger. We just
001BCEr 3                               ; print the number
001BCEr 3  CA                           dex
001BCFr 3  CA                           dex
001BD0r 3  95 00                        sta 0,x
001BD2r 3  74 01                        stz 1,x
001BD4r 3  4C rr rr                     jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
001BD7r 3               
001BD7r 3               @output_string:
001BD7r 3                               ; Get the string number based on WID 0 to 3
001BD7r 3  A8                           tay
001BD8r 3  B9 rr rr                     lda @wid_data,y
001BDBr 3               
001BDBr 3                               ; Print without a line feed
001BDBr 3  4C rr rr                     jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
001BDEr 3               
001BDEr 3               @wid_data:
001BDEr 3                       ; Table of string numbers (see strings.asm) indexed by the WID if
001BDEr 3                       ; less than 4.
001BDEr 3  03                   .byte str_wid_forth            ; WID 0: "Forth"
001BDFr 3  06                   .byte str_wid_editor           ; WID 1: "Editor"
001BE0r 3  07                   .byte str_wid_assembler        ; WID 2: "Assembler"
001BE1r 3  08                   .byte str_wid_root             ; WID 3: "Root"
001BE2r 3               
001BE2r 3               
001BE2r 3               
001BE2r 3               ; ## OUTPUT ( -- addr ) "Return the address of the EMIT vector address"
001BE2r 3               ; ## "output"  tested  Tali Forth
001BE2r 3               xt_output:
001BE2r 3                       ; """Return the address where the jump target for EMIT is stored (but
001BE2r 3                       ; not the vector itself). By default, this will hold the value of
001BE2r 3                       ; kernel_putc routine, but this can be changed by the user, hence this
001BE2r 3                       ; routine.
001BE2r 3                       ; """
001BE2r 3  CA                           dex
001BE3r 3  CA                           dex
001BE4r 3  A9 rr                        lda #<output
001BE6r 3  95 00                        sta 0,x
001BE8r 3  A9 rr                        lda #>output
001BEAr 3  95 01                        sta 1,x
001BECr 3               
001BECr 3  60           z_output:       rts
001BEDr 3               
001BEDr 3               
001BEDr 3               ; ## OVER ( b a -- b a b ) "Copy NOS to TOS"
001BEDr 3               ; ## "over"  auto  ANS core
001BEDr 3                       ; """https://forth-standard.org/standard/core/OVER"""
001BEDr 3               xt_over:
001BEDr 3  20 rr rr                     jsr underflow_2
001BF0r 3               
001BF0r 3  CA                           dex
001BF1r 3  CA                           dex
001BF2r 3               
001BF2r 3  B5 04                        lda 4,x         ; LSB
001BF4r 3  95 00                        sta 0,x
001BF6r 3  B5 05                        lda 5,x         ; MSB
001BF8r 3  95 01                        sta 1,x
001BFAr 3               
001BFAr 3  60           z_over:         rts
001BFBr 3               
001BFBr 3               
001BFBr 3               ; ## PAD ( -- addr ) "Return address of user scratchpad"
001BFBr 3               ; ## "pad"  auto  ANS core ext
001BFBr 3                       ; """https://forth-standard.org/standard/core/PAD
001BFBr 3                       ; Return address to a temporary area in free memory for user. Must
001BFBr 3                       ; be at least 84 bytes in size (says ANS). It is located relative to
001BFBr 3                       ; the compile area pointer (CP) and therefore varies in position.
001BFBr 3                       ; This area is reserved for the user and not used by the system
001BFBr 3                       ; """
001BFBr 3               xt_pad:
001BFBr 3  CA                           dex
001BFCr 3  CA                           dex
001BFDr 3               
001BFDr 3  A5 rr                        lda cp
001BFFr 3  18                           clc
001C00r 3  69 FF                        adc #padoffset  ; assumes padoffset one byte in size
001C02r 3  95 00                        sta 0,x
001C04r 3               
001C04r 3  A5 rr                        lda cp+1
001C06r 3  69 00                        adc #0          ; only need carry
001C08r 3  95 01                        sta 1,x
001C0Ar 3               
001C0Ar 3  60           z_pad:          rts
001C0Br 3               
001C0Br 3               
001C0Br 3               ; ## PAGE ( -- ) "Clear the screen"
001C0Br 3               ; ## "page"  tested  ANS facility
001C0Br 3                       ; """https://forth-standard.org/standard/facility/PAGE
001C0Br 3                       ; Clears a page if supported by ANS terminal codes. This is
001C0Br 3                       ; Clear Screen ("ESC[2J") plus moving the cursor to the top
001C0Br 3                       ; left of the screen
001C0Br 3                       ; """
001C0Br 3               xt_page:
001C0Br 3  A9 1B                        lda #AscESC
001C0Dr 3  20 rr rr                     jsr emit_a
001C10r 3  A9 5B                        lda #$5B        ; ASCII for "["
001C12r 3  20 rr rr                     jsr emit_a
001C15r 3  A9 32                        lda #'2'
001C17r 3  20 rr rr                     jsr emit_a
001C1Ar 3  A9 4A                        lda #'J'
001C1Cr 3  20 rr rr                     jsr emit_a
001C1Fr 3               
001C1Fr 3                               ; move cursor to top left of screen
001C1Fr 3  20 rr rr                     jsr xt_zero
001C22r 3  20 rr rr                     jsr xt_zero
001C25r 3  20 rr rr                     jsr xt_at_xy
001C28r 3               
001C28r 3  60           z_page:         rts
001C29r 3               
001C29r 3               
001C29r 3               ; ## PAREN ( -- ) "Discard input up to close paren ( comment )"
001C29r 3               ; ## "("  auto  ANS core
001C29r 3                       ; """http://forth-standard.org/standard/core/p"""
001C29r 3               
001C29r 3               xt_paren:
001C29r 3                               ; Put a right paren on the stack.
001C29r 3  CA                           dex
001C2Ar 3  CA                           dex
001C2Br 3  A9 29                        lda #41     ; Right parenthesis
001C2Dr 3  95 00                        sta 0,x
001C2Fr 3  74 01                        stz 1,x
001C31r 3               
001C31r 3                               ; Call parse.
001C31r 3  20 rr rr                     jsr xt_parse
001C34r 3               
001C34r 3                               ; Throw away the result.
001C34r 3  E8                           inx
001C35r 3  E8                           inx
001C36r 3  E8                           inx
001C37r 3  E8                           inx
001C38r 3               
001C38r 3  60           z_paren:        rts
001C39r 3               
001C39r 3               
001C39r 3               
001C39r 3               ; ## PARSE_NAME ( "name" -- addr u ) "Parse the input"
001C39r 3               ; ## "parse-name"  auto  ANS core ext
001C39r 3                       ; """https://forth-standard.org/standard/core/PARSE-NAME
001C39r 3                       ; Find next word in input string, skipping leading whitespace. This is
001C39r 3                       ; a special form of PARSE and drops through to that word. See PARSE
001C39r 3                       ; for more detail. We use this word internally for the interpreter
001C39r 3                       ; because it is a lot easier to use. Reference implementations at
001C39r 3                       ; http://forth-standard.org/standard/core/PARSE-NAME and
001C39r 3                       ; http://www.forth200x.org/reference-implementations/parse-name.fs
001C39r 3                       ; Roughly, the word is comparable to BL WORD COUNT. -- Note that
001C39r 3                       ; though the ANS standard talks about skipping "spaces", whitespace
001C39r 3                       ; is actually perfectly legal (see for example
001C39r 3                       ; http://forth-standard.org/standard/usage#subsubsection.3.4.1.1).
001C39r 3                       ; Otherwise, PARSE-NAME chokes on tabs.
001C39r 3                       ; """
001C39r 3               
001C39r 3               xt_parse_name:
001C39r 3                               ; To enable the compilation of the high-level Forth words
001C39r 3                               ; in forth-words.asm and user-words.asm at boot time,
001C39r 3                               ; PARSE-NAME and PARSE must be able to deal with 16-bit string
001C39r 3                               ; lengths. This is a pain on an 8-bit machine. The pointer
001C39r 3                               ; to the current location is in toin (>IN). We need to check,
001C39r 3                               ; worst case, the characters from cib+toin to cib+ciblen, and
001C39r 3                               ; we can't just use Y as an index.
001C39r 3               
001C39r 3                               ; The counter is CIBLEN-TOIN and stored in tmp1
001C39r 3  A5 rr                        lda ciblen              ; LSB of counter
001C3Br 3  38                           sec
001C3Cr 3  E5 rr                        sbc toin
001C3Er 3  85 rr                        sta tmp1
001C40r 3  A5 rr                        lda ciblen+1            ; MSB
001C42r 3  E5 rr                        sbc toin+1
001C44r 3  85 rr                        sta tmp1+1
001C46r 3               
001C46r 3                               ; Check the result for zero (TOIN is equal to CIBLEN)
001C46r 3  A5 rr                        lda tmp1
001C48r 3  05 rr                        ora tmp1+1
001C4Ar 3  F0 28                        beq @empty_line
001C4Cr 3               
001C4Cr 3                               ; We walk through the characters starting at CIB+TOIN, so we
001C4Cr 3                               ; save a temp version of that in tmp2
001C4Cr 3  A5 rr                        lda cib
001C4Er 3  18                           clc
001C4Fr 3  65 rr                        adc toin
001C51r 3  85 rr                        sta tmp2                ; LSB of first character
001C53r 3  A5 rr                        lda cib+1
001C55r 3  65 rr                        adc toin+1
001C57r 3  85 rr                        sta tmp2+1              ; MSB
001C59r 3               
001C59r 3               @skip_loop:
001C59r 3  B2 rr                        lda (tmp2)              ; work copy of cib
001C5Br 3  20 rr rr                     jsr is_whitespace
001C5Er 3  90 1F                        bcc @char_found
001C60r 3               
001C60r 3                               ; Char is still whitespace, continue
001C60r 3  E6 rr                        inc tmp2
001C62r 3  D0 02                        bne @2
001C64r 3  E6 rr                        inc tmp2+1
001C66r 3               @2:
001C66r 3                               ; Adjust counter
001C66r 3  A5 rr                        lda tmp1
001C68r 3  D0 02                        bne @3
001C6Ar 3  C6 rr                        dec tmp1+1
001C6Cr 3               @3:
001C6Cr 3  C6 rr                        dec tmp1
001C6Er 3               
001C6Er 3  A5 rr                        lda tmp1
001C70r 3  05 rr                        ora tmp1+1
001C72r 3  D0 E5                        bne @skip_loop          ; fall through if empty line
001C74r 3               
001C74r 3               @empty_line:
001C74r 3                               ; Neither the ANS Forth nor the Gforth documentation say
001C74r 3                               ; what to return as an address if a string with only
001C74r 3                               ; spaces is given. For speed reasons, we just return junk
001C74r 3                               ; NOS, with the TOS zero as per standard
001C74r 3  CA                           dex
001C75r 3  CA                           dex
001C76r 3  CA                           dex
001C77r 3  CA                           dex
001C78r 3               
001C78r 3  74 00                        stz 0,x                 ; TOS is zero
001C7Ar 3  74 01                        stz 1,x
001C7Cr 3               
001C7Cr 3  4C rr rr                     jmp z_parse_name        ; skip over PARSE
001C7Fr 3               
001C7Fr 3               @char_found:
001C7Fr 3                               ; We arrive here with tmp2 pointing to the first non-space
001C7Fr 3                               ; character. This is where the word really starts, so
001C7Fr 3                               ; we use it to calculate the new >IN by subtracting
001C7Fr 3  A5 rr                        lda tmp2
001C81r 3  38                           sec
001C82r 3  E5 rr                        sbc cib
001C84r 3  85 rr                        sta toin
001C86r 3  A5 rr                        lda tmp2+1
001C88r 3  E5 rr                        sbc cib+1
001C8Ar 3  85 rr                        sta toin+1
001C8Cr 3               
001C8Cr 3                               ; prepare Data Stack for PARSE by adding space
001C8Cr 3                               ; as the delimiter
001C8Cr 3  CA                           dex
001C8Dr 3  CA                           dex
001C8Er 3               
001C8Er 3  A9 20                        lda #AscSP
001C90r 3  95 00                        sta 0,x
001C92r 3  74 01                        stz 1,x                 ; paranoid, now ( "name" c )
001C94r 3               
001C94r 3               
001C94r 3               ; ## PARSE ( "name" c -- addr u ) "Parse input with delimiter character"
001C94r 3               ; ## "parse"  tested  ANS core ext
001C94r 3                       ; """https://forth-standard.org/standard/core/PARSE
001C94r 3                       ; Find word in input string delimited by character given. Do not
001C94r 3                       ; skip leading delimiters -- this is the main difference to PARSE-NAME.
001C94r 3                       ; PARSE and PARSE-NAME replace WORD in modern systems. ANS discussion
001C94r 3                       ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
001C94r 3                       ;
001C94r 3                       ;
001C94r 3                       ;     cib  cib+toin   cib+ciblen
001C94r 3                       ;      v      v            v
001C94r 3                       ;     |###################|
001C94r 3                       ;
001C94r 3                       ;     |------>|  toin (>IN)
001C94r 3                       ;     |------------------->|  ciblen
001C94r 3                       ;
001C94r 3                       ; The input string is stored starting at the address in the Current
001C94r 3                       ; Input Buffer (CIB), the length of which is in CIBLEN. While searching
001C94r 3                       ; for the delimiter, TOIN (>IN) points to the where we currently are.
001C94r 3                       ; Since PARSE does not skip leading delimiters, we assume we are on a
001C94r 3                       ; useful string if there are any characters at all. As with
001C94r 3                       ; PARSE-NAME, we must be able to handle strings with a length of
001C94r 3                       ; 16-bit for EVALUTE, which is a pain on an 8-bit machine.
001C94r 3                       ; """
001C94r 3               
001C94r 3               xt_parse:
001C94r 3  20 rr rr                     jsr underflow_1
001C97r 3               
001C97r 3                               ; If the input buffer is empty, we just return
001C97r 3  A5 rr                        lda ciblen
001C99r 3  05 rr                        ora ciblen+1
001C9Br 3  F0 0C                        beq @abort_parse
001C9Dr 3               
001C9Dr 3                               ; If the pointer >IN is larger or equal to the length of
001C9Dr 3                               ; the input buffer (CIBLEN), the line is done. Put
001C9Dr 3                               ; differently, we only continue if >IN is smaller than
001C9Dr 3                               ; CIBLEN
001C9Dr 3  A5 rr                        lda toin+1              ; MSB
001C9Fr 3  C5 rr                        cmp ciblen+1
001CA1r 3  90 0E                        bcc @go_parse           ; unsigned comparison
001CA3r 3               
001CA3r 3  A5 rr                        lda toin                ; LSB
001CA5r 3  C5 rr                        cmp ciblen
001CA7r 3  90 08                        bcc @go_parse
001CA9r 3               
001CA9r 3               @abort_parse:
001CA9r 3                               ; Sorry, this line is over
001CA9r 3  CA                           dex
001CAAr 3  CA                           dex
001CABr 3  74 00                        stz 0,x
001CADr 3  74 01                        stz 1,x
001CAFr 3               
001CAFr 3  80 7A                        bra @done
001CB1r 3               @go_parse:
001CB1r 3                               ; We actually have work to do. Save the delimiter in
001CB1r 3                               ; tmptos.
001CB1r 3  B5 00                        lda 0,x
001CB3r 3  85 rr                        sta tmptos
001CB5r 3               
001CB5r 3                               ; We can now prepare the Data Stack for the return value
001CB5r 3  CA                           dex
001CB6r 3  CA                           dex
001CB7r 3               
001CB7r 3                               ; tmp1 is CIB+TOIN, the beginning of the current string
001CB7r 3                               ; tmp2 is initially the same as tmp1, then the work index
001CB7r 3                               ; tmp3 is CIB+CIBLEN, one char past the end of the string
001CB7r 3               
001CB7r 3                               ; Calculate the beginning of the string, which is also the
001CB7r 3                               ; address to return
001CB7r 3  A5 rr                        lda cib
001CB9r 3  18                           clc
001CBAr 3  65 rr                        adc toin        ; LSB
001CBCr 3  85 rr                        sta tmp1
001CBEr 3  85 rr                        sta tmp2
001CC0r 3  95 02                        sta 2,x
001CC2r 3               
001CC2r 3  A5 rr                        lda cib+1
001CC4r 3  65 rr                        adc toin+1      ; MSB
001CC6r 3  85 rr                        sta tmp1+1
001CC8r 3  85 rr                        sta tmp2+1
001CCAr 3  95 03                        sta 3,x
001CCCr 3               
001CCCr 3                               ; Calculate the address where the input buffer ends plus 1, so
001CCCr 3                               ; we can compare it with TOIN, which is an index
001CCCr 3  A5 rr                        lda cib
001CCEr 3  18                           clc
001CCFr 3  65 rr                        adc ciblen
001CD1r 3  85 rr                        sta tmp3
001CD3r 3  A5 rr                        lda cib+1
001CD5r 3  65 rr                        adc ciblen+1
001CD7r 3  85 rr                        sta tmp3+1
001CD9r 3               
001CD9r 3                               ; Initialize the offset we use to adjust EOL or found delimiter
001CD9r 3  64 rr                        stz tmptos+1
001CDBr 3               @loop:
001CDBr 3                               ; If we are at the end of the string, quit
001CDBr 3  A5 rr                        lda tmp2
001CDDr 3  C5 rr                        cmp tmp3
001CDFr 3  D0 06                        bne @not_empty
001CE1r 3               
001CE1r 3  A5 rr                        lda tmp2+1
001CE3r 3  C5 rr                        cmp tmp3+1
001CE5r 3  F0 1D                        beq @eol
001CE7r 3               @not_empty:
001CE7r 3                               ; We have to do this the hard way. In fact, it's really
001CE7r 3                               ; hard since if we are dealing with a SPACE, the standard
001CE7r 3                               ; wants us to skip all whitespace, not just spaces. Otherwise,
001CE7r 3                               ; Tali would choke on tabs between words. For details, see
001CE7r 3                               ; http://forth-standard.org/standard/file#subsection.11.3.5
001CE7r 3                               ; In theory, we could make this faster by defining a delimiter
001CE7r 3                               ; that is 00 as the sign that we skip all whitespace, thereby
001CE7r 3                               ; avoiding having to test every time. However, somebody,
001CE7r 3                               ; somewhere might want to parse a zero-delimited list. Since
001CE7r 3                               ; any byte value could be chosen for that, we just test for
001CE7r 3                               ; a space every single time for the moment.
001CE7r 3  B2 rr                        lda (tmp2)
001CE9r 3               
001CE9r 3  A4 rr                        ldy tmptos
001CEBr 3  C0 20                        cpy #AscSP
001CEDr 3  D0 07                        bne @not_whitespace
001CEFr 3               
001CEFr 3                               ; The delimiter is a space, so we're looking for all
001CEFr 3                               ; whitespace
001CEFr 3  20 rr rr                     jsr is_whitespace
001CF2r 3  90 02                        bcc @not_whitespace
001CF4r 3  80 0C                        bra @found_delimiter
001CF6r 3               
001CF6r 3               @not_whitespace:
001CF6r 3                               ; The delimiter is not a space, so we're looking for
001CF6r 3                               ; whatever it is
001CF6r 3  C5 rr                        cmp tmptos
001CF8r 3  F0 08                        beq @found_delimiter
001CFAr 3               
001CFAr 3                               ; Not a delimiter, next character
001CFAr 3  E6 rr                        inc tmp2
001CFCr 3  D0 DD                        bne @loop
001CFEr 3  E6 rr                        inc tmp2+1
001D00r 3  80 D9                        bra @loop
001D02r 3               
001D02r 3               @found_delimiter:
001D02r 3                               ; Increase the offset: If we've found a delimiter, we want
001D02r 3                               ; TOIN to point to the character after it, not the delimiter
001D02r 3                               ; itself
001D02r 3  E6 rr                        inc tmptos+1
001D04r 3               @eol:
001D04r 3                               ; The length of the new string is tmp2-tmp1
001D04r 3  A5 rr                        lda tmp2
001D06r 3  38                           sec
001D07r 3  E5 rr                        sbc tmp1
001D09r 3  95 00                        sta 0,x
001D0Br 3               
001D0Br 3  A5 rr                        lda tmp2+1
001D0Dr 3  E5 rr                        sbc tmp1+1
001D0Fr 3  95 01                        sta 1,x
001D11r 3               
001D11r 3                               ; The new offset is tmp2-cib
001D11r 3  A5 rr                        lda tmp2
001D13r 3  38                           sec
001D14r 3  E5 rr                        sbc cib
001D16r 3  85 rr                        sta toin
001D18r 3  A5 rr                        lda tmp2+1
001D1Ar 3  E5 rr                        sbc cib+1
001D1Cr 3  85 rr                        sta toin+1
001D1Er 3               
001D1Er 3                               ; Add in the delimiter
001D1Er 3  A5 rr                        lda toin
001D20r 3  18                           clc
001D21r 3  65 rr                        adc tmptos+1
001D23r 3  85 rr                        sta toin
001D25r 3  A5 rr                        lda toin+1
001D27r 3  69 00                        adc #0          ; we only need the carry
001D29r 3  85 rr                        sta toin+1
001D2Br 3               @done:
001D2Br 3               z_parse_name:
001D2Br 3  60           z_parse:        rts
001D2Cr 3               
001D2Cr 3               
001D2Cr 3               
001D2Cr 3               ; ## PICK ( n n u -- n n n ) "Move element u of the stack to TOS"
001D2Cr 3               ; ## "pick"  auto  ANS core ext
001D2Cr 3                       ; """https://forth-standard.org/standard/core/PICK
001D2Cr 3                       ; Take the u-th element out of the stack and put it on TOS,
001D2Cr 3                       ; overwriting the original TOS. 0 PICK is equivalent to DUP, 1 PICK to
001D2Cr 3                       ; OVER. Note that using PICK is considered poor coding form. Also note
001D2Cr 3                       ; that FIG Forth has a different behavior for PICK than ANS Forth.
001D2Cr 3                       ; """
001D2Cr 3               
001D2Cr 3               xt_pick:
001D2Cr 3                               ; Checking for underflow is difficult because it depends on
001D2Cr 3                               ; which element we want to grab. We could probably figure
001D2Cr 3                               ; something out, but it wouldn't work with underflow stripping
001D2Cr 3                               ; Since using PICK is considered poor form anyway, we just
001D2Cr 3                               ; leave it as it is
001D2Cr 3  16 00                        asl 0,x         ; we assume u < 128 (stack is small)
001D2Er 3  8A                           txa
001D2Fr 3  75 00                        adc 0,x
001D31r 3  A8                           tay
001D32r 3               
001D32r 3  B9 02 00                     lda 0002,y
001D35r 3  95 00                        sta 0,x
001D37r 3  B9 03 00                     lda 0003,y
001D3Ar 3  95 01                        sta 1,x
001D3Cr 3               
001D3Cr 3  60           z_pick:         rts
001D3Dr 3               
001D3Dr 3               
001D3Dr 3               
001D3Dr 3               ; ## PLUS ( n n -- n ) "Add TOS and NOS"
001D3Dr 3               ; ## "+"  auto  ANS core
001D3Dr 3                       ; """https://forth-standard.org/standard/core/Plus"""
001D3Dr 3               xt_plus:
001D3Dr 3  20 rr rr                     jsr underflow_2
001D40r 3               
001D40r 3  18                           clc
001D41r 3  B5 00                        lda 0,x         ; LSB
001D43r 3  75 02                        adc 2,x
001D45r 3  95 02                        sta 2,x
001D47r 3               
001D47r 3  B5 01                        lda 1,x         ; MSB. No CLC, conserve carry bit
001D49r 3  75 03                        adc 3,x
001D4Br 3  95 03                        sta 3,x
001D4Dr 3               
001D4Dr 3  E8                           inx
001D4Er 3  E8                           inx
001D4Fr 3               
001D4Fr 3  60           z_plus:         rts
001D50r 3               
001D50r 3               
001D50r 3               ; ## PLUS_STORE ( n addr -- ) "Add number to value at given address"
001D50r 3               ; ## "+!"  auto  ANS core
001D50r 3                       ; """https://forth-standard.org/standard/core/PlusStore"""
001D50r 3               xt_plus_store:
001D50r 3  20 rr rr                     jsr underflow_2
001D53r 3               
001D53r 3                               ; move address to tmp1 so we can work with it
001D53r 3  B5 00                        lda 0,x
001D55r 3  85 rr                        sta tmp1
001D57r 3  B5 01                        lda 1,x
001D59r 3  85 rr                        sta tmp1+1
001D5Br 3               
001D5Br 3  A0 00                        ldy #0          ; LSB
001D5Dr 3  B1 rr                        lda (tmp1),y
001D5Fr 3  18                           clc
001D60r 3  75 02                        adc 2,x
001D62r 3  91 rr                        sta (tmp1),y
001D64r 3               
001D64r 3  C8                           iny             ; MSB
001D65r 3  B1 rr                        lda (tmp1),y
001D67r 3  75 03                        adc 3,x
001D69r 3  91 rr                        sta (tmp1),y
001D6Br 3               
001D6Br 3  E8                           inx
001D6Cr 3  E8                           inx
001D6Dr 3  E8                           inx
001D6Er 3  E8                           inx
001D6Fr 3               
001D6Fr 3  60           z_plus_store:   rts
001D70r 3               
001D70r 3               
001D70r 3               ; ## POSTPONE ( -- ) "Change IMMEDIATE status (it's complicated)"
001D70r 3               ; ## "postpone"  auto   ANS core
001D70r 3                       ; """https://forth-standard.org/standard/core/POSTPONE
001D70r 3                       ; Add the compilation behavior of a word to a new word at
001D70r 3                       ; compile time. If the word that follows it is immediate, include
001D70r 3                       ; it so that it will be compiled when the word being defined is
001D70r 3                       ; itself used for a new word. Tricky, but very useful.
001D70r 3                       ;
001D70r 3                       ; Because POSTPONE expects a word (not an xt) in the input stream (not
001D70r 3                       ; on the Data Stack). This means we cannot build words with
001D70r 3                       ; "jsr xt_postpone, jsr <word>" directly.
001D70r 3                       ; """
001D70r 3               
001D70r 3               xt_postpone:
001D70r 3  20 rr rr                     jsr xt_parse_name               ; ( -- addr n )
001D73r 3               
001D73r 3                               ; if there was no word provided, complain and quit
001D73r 3  B5 00                        lda 0,x
001D75r 3  15 01                        ora 1,x
001D77r 3  D0 05                        bne @1
001D79r 3               
001D79r 3  A9 05                        lda #err_noname
001D7Br 3  4C rr rr                     jmp error
001D7Er 3               @1:
001D7Er 3  20 rr rr                     jsr xt_find_name                ; ( -- nt | 0 )
001D81r 3               
001D81r 3                               ; if word not in Dictionary, complain and quit
001D81r 3  D0 05                        bne @2
001D83r 3  A9 05                        lda #err_noname
001D85r 3  4C rr rr                     jmp error
001D88r 3               
001D88r 3               @2:
001D88r 3                               ; keep a copy of nt for later
001D88r 3  B5 00                        lda 0,x
001D8Ar 3  85 rr                        sta tmp1
001D8Cr 3  B5 01                        lda 1,x
001D8Er 3  85 rr                        sta tmp1+1
001D90r 3               
001D90r 3                               ; We need the xt instead of the nt
001D90r 3  20 rr rr                     jsr xt_name_to_int              ; ( nt -- xt )
001D93r 3               
001D93r 3                               ; See if this is an immediate word. This is easier
001D93r 3                               ; with nt than with xt. The status byte of the word
001D93r 3                               ; is nt+1
001D93r 3  E6 rr                        inc tmp1
001D95r 3  D0 02                        bne @3
001D97r 3  E6 rr                        inc tmp1+1
001D99r 3               @3:
001D99r 3  B2 rr                        lda (tmp1)
001D9Br 3  29 04                        and #IM         ; mask all but Intermediate flag
001D9Dr 3  F0 05                        beq @not_immediate
001D9Fr 3               
001D9Fr 3                               ; We're immediate, so instead of executing it right now, we
001D9Fr 3                               ; compile it. xt is TOS, so this is easy. The RTS at the end
001D9Fr 3                               ; takes us back to the original caller
001D9Fr 3  20 rr rr                     jsr xt_compile_comma
001DA2r 3  80 0A                        bra @done
001DA4r 3               
001DA4r 3               @not_immediate:
001DA4r 3                               ; This is not an immediate word, so we enact "deferred
001DA4r 3                               ; compilation" by including ' <NAME> COMPILE, which we do by
001DA4r 3                               ; compiling the run-time routine of LITERAL, the xt itself, and
001DA4r 3                               ; a subroutine jump to COMPILE,
001DA4r 3  20 rr rr                     jsr xt_literal
001DA7r 3               
001DA7r 3                               ; Last, compile COMPILE,
001DA7r 3  A0 rr                        ldy #>xt_compile_comma
001DA9r 3  A9 rr                        lda #<xt_compile_comma
001DABr 3  20 rr rr                     jsr cmpl_subroutine
001DAEr 3               @done:
001DAEr 3  60           z_postpone:     rts
001DAFr 3               
001DAFr 3               
001DAFr 3               
001DAFr 3               ; ## PREVIOUS ( -- ) "Remove the first wordlist in the search order"
001DAFr 3               ; ## "previous"  auto  ANS search ext
001DAFr 3                       ; """http://forth-standard.org/standard/search/PREVIOUS"""
001DAFr 3               
001DAFr 3               xt_previous:
001DAFr 3  20 rr rr                     jsr xt_get_order
001DB2r 3  20 rr rr                     jsr xt_nip
001DB5r 3  20 rr rr                     jsr xt_one_minus
001DB8r 3  20 rr rr                     jsr xt_set_order
001DBBr 3               
001DBBr 3  60           z_previous:     rts
001DBCr 3               
001DBCr 3               
001DBCr 3               
001DBCr 3               ; ## QUESTION ( addr -- ) "Print content of a variable"
001DBCr 3               ; ## "?"  tested  ANS tools
001DBCr 3                       ; """https://forth-standard.org/standard/tools/q
001DBCr 3                       ;
001DBCr 3                       ; Only used interactively. Since humans are so slow, we
001DBCr 3                       ; save size and just go for the subroutine jumps
001DBCr 3                       ; """
001DBCr 3               xt_question:
001DBCr 3                               ; FETCH takes care of underflow check
001DBCr 3  20 rr rr                     jsr xt_fetch
001DBFr 3  20 rr rr                     jsr xt_dot
001DC2r 3               
001DC2r 3  60           z_question:     rts
001DC3r 3               
001DC3r 3               
001DC3r 3               ; ## QUESTION_DUP ( n -- 0 | n n ) "Duplicate TOS non-zero"
001DC3r 3               ; ## "?dup"  auto  ANS core
001DC3r 3                       ; """https://forth-standard.org/standard/core/qDUP"""
001DC3r 3               
001DC3r 3               xt_question_dup:
001DC3r 3  20 rr rr                     jsr underflow_1
001DC6r 3               
001DC6r 3                               ; Check if TOS is zero
001DC6r 3  B5 00                        lda 0,x
001DC8r 3  15 01                        ora 1,x
001DCAr 3  F0 0A                        beq @done
001DCCr 3               
001DCCr 3                               ; not zero, duplicate
001DCCr 3  CA                           dex
001DCDr 3  CA                           dex
001DCEr 3  B5 02                        lda 2,x
001DD0r 3  95 00                        sta 0,x
001DD2r 3  B5 03                        lda 3,x
001DD4r 3  95 01                        sta 1,x
001DD6r 3               @done:
001DD6r 3  60           z_question_dup: rts
001DD7r 3               
001DD7r 3               
001DD7r 3               
001DD7r 3               ; ## R_FETCH ( -- n ) "Get copy of top of Return Stack"
001DD7r 3               ; ## "r@"  auto  ANS core
001DD7r 3                       ; """https://forth-standard.org/standard/core/RFetch
001DD7r 3                       ; This word is Compile Only in Tali Forth, though Gforth has it
001DD7r 3                       ; work normally as well
001DD7r 3                       ;
001DD7r 3                       ; An alternative way to write this word
001DD7r 3                       ; would be to access the elements on the stack directly like 2R@
001DD7r 3                       ; does, these versions should be compared at some point.
001DD7r 3                       ; """
001DD7r 3               xt_r_fetch:
001DD7r 3                               ; get the return address
001DD7r 3  7A                           ply             ; LSB
001DD8r 3  84 rr                        sty tmp1
001DDAr 3  7A                           ply             ; MSB
001DDBr 3               
001DDBr 3                               ; --- CUT FOR NATIVE COMPILE ---
001DDBr 3               
001DDBr 3                               ; get the actual top of Return Stack
001DDBr 3  CA                           dex
001DDCr 3  CA                           dex
001DDDr 3               
001DDDr 3  68                           pla             ; LSB
001DDEr 3  95 00                        sta 0,x
001DE0r 3  68                           pla             ; MSB
001DE1r 3  95 01                        sta 1,x
001DE3r 3               
001DE3r 3                               ; now we have to put that value back
001DE3r 3  48                           pha
001DE4r 3  B5 00                        lda 0,x
001DE6r 3  48                           pha
001DE7r 3               
001DE7r 3                               ; --- CUT FOR NATIVE COMPILE ---
001DE7r 3               
001DE7r 3                               ; restore return value
001DE7r 3  5A                           phy             ; MSB
001DE8r 3  A4 rr                        ldy tmp1
001DEAr 3  5A                           phy             ; LSB
001DEBr 3               
001DEBr 3  60           z_r_fetch:      rts
001DECr 3               
001DECr 3               
001DECr 3               ; ## R_FROM ( -- n )(R: n --) "Move top of Return Stack to TOS"
001DECr 3               ; ## "r>"  auto  ANS core
001DECr 3                       ; """https://forth-standard.org/standard/core/Rfrom
001DECr 3                       ; Move Top of Return Stack to Top of Data Stack.
001DECr 3                       ;
001DECr 3                       ; We have to move
001DECr 3                       ; the RTS address out of the way first. This word is handled
001DECr 3                       ; differently for native and and subroutine compilation, see COMPILE,
001DECr 3                       ; This is a compile-only word
001DECr 3                       ; """
001DECr 3               
001DECr 3               xt_r_from:
001DECr 3                               ; Rescue the address of the return jump that is currently
001DECr 3                               ; on top of the Return Stack. If this word is natively
001DECr 3                               ; compiled, this is a total waste of time
001DECr 3  68                           pla             ; LSB
001DEDr 3  85 rr                        sta tmptos
001DEFr 3  7A                           ply             ; MSB
001DF0r 3               
001DF0r 3                               ; --- CUT FOR NATIVE CODING ---
001DF0r 3               
001DF0r 3  CA                           dex
001DF1r 3  CA                           dex
001DF2r 3               
001DF2r 3                               ; now we can access the actual data
001DF2r 3               
001DF2r 3  68                           pla             ; LSB
001DF3r 3  95 00                        sta 0,x
001DF5r 3  68                           pla             ; MSB
001DF6r 3  95 01                        sta 1,x
001DF8r 3               
001DF8r 3                               ; --- CUT FOR NATIVE CODING ---
001DF8r 3               
001DF8r 3                               ; restore the return address
001DF8r 3  5A                           phy             ; MSB
001DF9r 3  A5 rr                        lda tmptos
001DFBr 3  48                           pha             ; LSB
001DFCr 3               
001DFCr 3  60           z_r_from:       rts
001DFDr 3               
001DFDr 3               
001DFDr 3               ; ## R_TO_INPUT ( -- ) ( R: n n n n -- ) "Restore input state from Return Stack"
001DFDr 3               ; ## "r>input"  tested  Tali Forth
001DFDr 3                       ; """Restore the current input state as defined by insrc, cib, ciblen,
001DFDr 3                       ; and toin from the Return Stack.
001DFDr 3                       ;
001DFDr 3                       ; See INPUT_TO_R for a discussion of this word. Uses tmp1
001DFDr 3                       ; """
001DFDr 3               
001DFDr 3               xt_r_to_input:
001DFDr 3               
001DFDr 3                               ; We arrive here with the return address on the top of the
001DFDr 3                               ; 65c02's stack. We need to move it out of the way first
001DFDr 3  68                           pla
001DFEr 3  85 rr                        sta tmp1
001E00r 3  68                           pla
001E01r 3  85 rr                        sta tmp1+1
001E03r 3               
001E03r 3                               ; This assumes that insrc is the first of eight bytes and
001E03r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001E03r 3                               ; Page. Since we went in reverse order, insrc is now on the top
001E03r 3                               ; of the Return Stack.
001E03r 3  A0 00                        ldy #0
001E05r 3               @loop:
001E05r 3  68                           pla
001E06r 3  99 rr rr                     sta insrc,y
001E09r 3  C8                           iny
001E0Ar 3  C0 08                        cpy #8
001E0Cr 3  D0 F7                        bne @loop
001E0Er 3               
001E0Er 3                               ; Restore address for return jump
001E0Er 3  A5 rr                        lda tmp1+1
001E10r 3  48                           pha
001E11r 3  A5 rr                        lda tmp1
001E13r 3  48                           pha
001E14r 3               
001E14r 3  60           z_r_to_input: 	rts
001E15r 3               
001E15r 3               
001E15r 3               
001E15r 3               ; ## RECURSE ( -- ) "Copy recursive call to word being defined"
001E15r 3               ; ## "recurse"  auto  ANS core
001E15r 3                       ; """https://forth-standard.org/standard/core/RECURSE
001E15r 3                       ;
001E15r 3                       ; This word may not be natively compiled
001E15r 3                       ; """
001E15r 3               
001E15r 3               xt_recurse:
001E15r 3                               ; The whole routine amounts to compiling a reference to
001E15r 3                               ; the word that is being compiled. First, we save the JSR
001E15r 3                               ; instruction
001E15r 3  A0 00                        ldy #0
001E17r 3               
001E17r 3  A9 20                        lda #$20        ; opcode for JSR
001E19r 3  91 rr                        sta (cp),y
001E1Br 3  C8                           iny
001E1Cr 3               
001E1Cr 3                               ; Next, we save the LSB and MSB of the xt of the word
001E1Cr 3                               ; we are currently working on. We first need to see if
001E1Cr 3                               ; WORKWORD has the nt (: started the word) or the
001E1Cr 3                               ; xt (:NONAME started the word). Bit 6 in status tells us.
001E1Cr 3  24 rr                        bit status
001E1Er 3  70 0C                        bvs @nt_in_workword
001E20r 3               
001E20r 3                               ; This is a special :NONAME word. Just copy the xt
001E20r 3                               ; from WORKWORD into the dictionary.
001E20r 3  A5 rr                        lda workword
001E22r 3  91 rr                        sta (cp),y
001E24r 3  C8                           iny
001E25r 3  A5 rr                        lda workword+1
001E27r 3  91 rr                        sta (cp),y
001E29r 3  C8                           iny
001E2Ar 3  80 1B                        bra @update_cp
001E2Cr 3               
001E2Cr 3               @nt_in_workword:
001E2Cr 3                               ; This is a regular : word, so the xt is four bytes down
001E2Cr 3                               ; from the nt which we saved in WORKWORD. We could probably
001E2Cr 3                               ; use NAME>INT here but this is going to be faster, and
001E2Cr 3                               ; fast counts with recursion
001E2Cr 3  A5 rr                        lda workword            ; LSB
001E2Er 3  18                           clc
001E2Fr 3  69 04                        adc #4
001E31r 3  85 rr                        sta tmp1
001E33r 3  A5 rr                        lda workword+1          ; MSB
001E35r 3  69 00                        adc #0
001E37r 3  85 rr                        sta tmp1+1
001E39r 3               
001E39r 3  B2 rr                        lda (tmp1)
001E3Br 3  91 rr                        sta (cp),y
001E3Dr 3  5A                           phy
001E3Er 3  A0 01                        ldy #1
001E40r 3  B1 rr                        lda (tmp1),y
001E42r 3  7A                           ply
001E43r 3  C8                           iny
001E44r 3  91 rr                        sta (cp),y
001E46r 3  C8                           iny
001E47r 3               
001E47r 3               @update_cp:
001E47r 3  98                           tya
001E48r 3  18                           clc
001E49r 3  65 rr                        adc cp
001E4Br 3  85 rr                        sta cp
001E4Dr 3  90 02                        bcc @done
001E4Fr 3  E6 rr                        inc cp+1
001E51r 3               @done:
001E51r 3  60           z_recurse:      rts
001E52r 3               
001E52r 3               
001E52r 3               
001E52r 3               ; ## REFILL ( -- f ) "Refill the input buffer"
001E52r 3               ; ## "refill"  tested  ANS core ext
001E52r 3                       ; """https://forth-standard.org/standard/core/REFILL
001E52r 3                       ; Attempt to fill the input buffer from the input source, returning
001E52r 3                       ; a true flag if successful. When the input source is the user input
001E52r 3                       ; device, attempt to receive input into the terminal input buffer. If
001E52r 3                       ; successful, make the result the input buffer, set >IN to zero, and
001E52r 3                       ; return true. Receipt of a line containing no characters is considered
001E52r 3                       ; successful. If there is no input available from the current input
001E52r 3                       ; source, return false. When the input source is a string from EVALUATE,
001E52r 3                       ; return false and perform no other action." See
001E52r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001E52r 3                       ; and Conklin & Rather p. 156. Note we don't have to care about blocks
001E52r 3                       ; because REFILL is never used on blocks - Tali is able to evaluate the
001E52r 3                       ; entire block as a 1024 byte string.
001E52r 3                       ; """"
001E52r 3               
001E52r 3               xt_refill:
001E52r 3                               ; Get input source from SOURCE-ID. This is an
001E52r 3                               ; optimized version of a subroutine jump to SOURCE-ID
001E52r 3  A5 rr                        lda insrc               ; cheat: We only check LSB
001E54r 3  D0 2D                        bne @src_not_kbd
001E56r 3               
001E56r 3                               ; SOURCE-ID of zero means we're getting stuff from the keyboard
001E56r 3                               ; with ACCEPT, which wants the address of the current input
001E56r 3                               ; buffer NOS and the max number of characters to accept TOS
001E56r 3  CA                           dex
001E57r 3  CA                           dex
001E58r 3  CA                           dex
001E59r 3  CA                           dex
001E5Ar 3               
001E5Ar 3  A5 rr                        lda cib                 ; address of CIB is NOS
001E5Cr 3  95 02                        sta 2,x
001E5Er 3  A5 rr                        lda cib+1
001E60r 3  95 03                        sta 3,x
001E62r 3               
001E62r 3  64 rr                        stz ciblen              ; go in with empty buffer
001E64r 3  64 rr                        stz ciblen+1
001E66r 3               
001E66r 3  A9 FF                        lda #bsize              ; max number of chars is TOS
001E68r 3  95 00                        sta 0,x
001E6Ar 3  74 01                        stz 1,x                 ; cheat: We only accept max 255
001E6Cr 3               
001E6Cr 3  20 rr rr                     jsr xt_accept           ; ( addr n1 -- n2)
001E6Fr 3               
001E6Fr 3                               ; ACCEPT returns the number of characters accepted, which
001E6Fr 3                               ; belong in CIBLEN
001E6Fr 3  B5 00                        lda 0,x
001E71r 3  85 rr                        sta ciblen
001E73r 3  B5 01                        lda 1,x
001E75r 3  85 rr                        sta ciblen+1            ; though we only accept 255 chars
001E77r 3               
001E77r 3                               ; make >IN point to beginning of buffer
001E77r 3  64 rr                        stz toin
001E79r 3  64 rr                        stz toin+1
001E7Br 3               
001E7Br 3  A9 FF                        lda #$FF                ; overwrite with TRUE flag
001E7Dr 3  95 00                        sta 0,x
001E7Fr 3  95 01                        sta 1,x
001E81r 3               
001E81r 3  80 10                        bra @done
001E83r 3               
001E83r 3               @src_not_kbd:
001E83r 3                               ; If SOURCE-ID doesn't return a zero, it must be a string in
001E83r 3                               ; memory or a file (remember, no blocks in this version).
001E83r 3                               ; If source is a string, we were given the flag -1 ($FFFF)
001E83r 3  1A                           inc
001E84r 3  D0 08                        bne @src_not_string
001E86r 3               
001E86r 3                               ; Simply return FALSE flag as per specification
001E86r 3  CA                           dex
001E87r 3  CA                           dex
001E88r 3  74 00                        stz 0,x
001E8Ar 3  74 01                        stz 1,x
001E8Cr 3               
001E8Cr 3  80 05                        bra z_refill
001E8Er 3               
001E8Er 3               @src_not_string:
001E8Er 3                               ; Since we don't have blocks, this must mean that we are trying
001E8Er 3                               ; to read from a file. However, we don't have files yet, so we
001E8Er 3                               ; report an error and jump to ABORT.
001E8Er 3  A9 01                        lda #err_badsource
001E90r 3  4C rr rr                     jmp error
001E93r 3               @done:
001E93r 3  60           z_refill:       rts
001E94r 3               
001E94r 3               
001E94r 3               
001E94r 3               ; ## REPEAT (C: orig dest -- ) ( -- ) "Loop flow control"
001E94r 3               ; ## "repeat"  auto  ANS core
001E94r 3                       ; """http://forth-standard.org/standard/core/REPEAT"""
001E94r 3               
001E94r 3               xt_repeat:
001E94r 3                               ; Run again first
001E94r 3  20 rr rr                     jsr xt_again
001E97r 3               
001E97r 3                               ; Stuff HERE in for the branch address
001E97r 3                               ; to get out of the loop
001E97r 3  20 rr rr                     jsr xt_here
001E9Ar 3  20 rr rr                     jsr xt_swap
001E9Dr 3  20 rr rr                     jsr xt_store
001EA0r 3               
001EA0r 3  60           z_repeat:       rts
001EA1r 3               
001EA1r 3               
001EA1r 3               
001EA1r 3               ; ## RIGHT_BRACKET ( -- ) "Enter the compile state"
001EA1r 3               ; ## "]"  auto  ANS core
001EA1r 3                       ; """https://forth-standard.org/standard/right-bracket
001EA1r 3                       ; This is an immediate word.
001EA1r 3                       ; """
001EA1r 3               xt_right_bracket:
001EA1r 3  A9 FF                        lda #$FF
001EA3r 3  85 rr                        sta state
001EA5r 3  85 rr                        sta state+1
001EA7r 3               z_right_bracket:
001EA7r 3  60                           rts
001EA8r 3               
001EA8r 3               
001EA8r 3               ; ## ROOT_WORDLIST ( -- u ) "WID for the Root (minimal) wordlist"
001EA8r 3               ; ## "root-wordlist"  tested  Tali Editor
001EA8r 3               xt_root_wordlist:
001EA8r 3  CA                           dex             ; The WID for the Root wordlist is 3.
001EA9r 3  CA                           dex
001EAAr 3  A9 03                        lda #3
001EACr 3  95 00                        sta 0,x
001EAEr 3  74 01                        stz 1,x
001EB0r 3               
001EB0r 3               z_root_wordlist:
001EB0r 3  60                           rts
001EB1r 3               
001EB1r 3               
001EB1r 3               ; ## ROT ( a b c -- b c a ) "Rotate first three stack entries downwards"
001EB1r 3               ; ## "rot"  auto  ANS core
001EB1r 3                       ; """https://forth-standard.org/standard/core/ROT
001EB1r 3                       ; Remember "R for 'Revolution'" - the bottom entry comes out
001EB1r 3                       ; on top!
001EB1r 3                       ; """
001EB1r 3               
001EB1r 3               xt_rot:
001EB1r 3  20 rr rr                     jsr underflow_3
001EB4r 3               
001EB4r 3  B4 05                        ldy 5,x         ; MSB first
001EB6r 3  B5 03                        lda 3,x
001EB8r 3  95 05                        sta 5,x
001EBAr 3  B5 01                        lda 1,x
001EBCr 3  95 03                        sta 3,x
001EBEr 3  94 01                        sty 1,x
001EC0r 3               
001EC0r 3  B4 04                        ldy 4,x         ; LSB next
001EC2r 3  B5 02                        lda 2,x
001EC4r 3  95 04                        sta 4,x
001EC6r 3  B5 00                        lda 0,x
001EC8r 3  95 02                        sta 2,x
001ECAr 3  94 00                        sty 0,x
001ECCr 3               
001ECCr 3  60           z_rot:          rts
001ECDr 3               
001ECDr 3               
001ECDr 3               
001ECDr 3               ; ## RSHIFT ( x u -- x ) "Shift TOS to the right"
001ECDr 3               ; ## "rshift"  auto  ANS core
001ECDr 3                       ; """https://forth-standard.org/standard/core/RSHIFT"""
001ECDr 3               xt_rshift:
001ECDr 3  20 rr rr                     jsr underflow_2
001ED0r 3               
001ED0r 3                               ; We shift maximal by 16 bits, mask everything else
001ED0r 3  B5 00                        lda 0,x
001ED2r 3  29 0F                        and #%00001111
001ED4r 3  F0 08                        beq @done               ; if 0 shifts, quit
001ED6r 3               
001ED6r 3  A8                           tay
001ED7r 3               @loop:
001ED7r 3  56 03                        lsr 3,x
001ED9r 3  76 02                        ror 2,x
001EDBr 3  88                           dey
001EDCr 3  D0 F9                        bne @loop
001EDEr 3               @done:
001EDEr 3  E8                           inx
001EDFr 3  E8                           inx
001EE0r 3               
001EE0r 3  60           z_rshift:       rts
001EE1r 3               
001EE1r 3               
001EE1r 3               ; ## S_BACKSLASH_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
001EE1r 3               ; ## "s\""  auto  ANS core
001EE1r 3                       ; """https://forth-standard.org/standard/core/Seq
001EE1r 3                       ; Store address and length of string given, returning ( addr u ).
001EE1r 3                       ; ANS core claims this is compile-only, but the file set expands it
001EE1r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
001EE1r 3                       ; are evil. We follow general usage. This is just like S" except
001EE1r 3                       ; that it allows for some special escaped characters.
001EE1r 3                       ; """
001EE1r 3               
001EE1r 3               xt_s_backslash_quote:
001EE1r 3                               ; tmp2 will be used to determine if we are handling
001EE1r 3                               ; escaped characters or not. In this case, we are,
001EE1r 3                               ; so set it to $FF (the upper byte will be used to
001EE1r 3                               ; determine if we just had a \ and the next character
001EE1r 3                               ; needs to be modifed as an escaped character).
001EE1r 3  A9 FF                        lda #$FF
001EE3r 3  85 rr                        sta tmp2
001EE5r 3  64 rr                        stz tmp2+1
001EE7r 3               
001EE7r 3                               ; Now that the flag is set, jump into s_quote to process
001EE7r 3                               ; the string.
001EE7r 3  20 rr rr                     jsr s_quote_start
001EEAr 3               @done:
001EEAr 3               z_s_backslash_quote:
001EEAr 3  60                           rts
001EEBr 3               
001EEBr 3               
001EEBr 3               ; This is a helper function for s_backslash_quote to convert a character
001EEBr 3               ; from ASCII to the corresponding hex value, eg 'F'->15
001EEBr 3               convert_hex_value:
001EEBr 3               
001EEBr 3  C9 41                cmp #'A'
001EEDr 3  90 07                bcc @digit
001EEFr 3               
001EEFr 3                       ; It's A-F
001EEFr 3  29 DF                and #$DF                ; Make it uppercase.
001EF1r 3  38                   sec
001EF2r 3  E9 37                sbc #'7'                 ; gives value 10 for 'A'
001EF4r 3  80 03                bra @done
001EF6r 3               
001EF6r 3               @digit:
001EF6r 3                       ; It's 0-9
001EF6r 3  38                   sec
001EF7r 3  E9 30                sbc #'0'
001EF9r 3               
001EF9r 3               @done:
001EF9r 3  60                   rts
001EFAr 3               
001EFAr 3               
001EFAr 3               
001EFAr 3               ; ## SEARCH_WORDLIST ( caddr u wid -- 0 | xt 1 | xt -1) "Search for a word in a wordlist"
001EFAr 3               ; ## "search-wordlist" auto ANS search
001EFAr 3                       ; """https://forth-standard.org/standard/search/SEARCH_WORDLIST"""
001EFAr 3               
001EFAr 3               xt_search_wordlist:
001EFAr 3  20 rr rr                     jsr underflow_3
001EFDr 3               
001EFDr 3                               ; Set up tmp1 with the wordlist indicated by wid
001EFDr 3                               ; on the stack. Start by putting the base address
001EFDr 3                               ; of the wordlists in tmp2.
001EFDr 3  A5 rr                        lda up
001EFFr 3  18                           clc
001F00r 3  69 06                        adc #wordlists_offset
001F02r 3  85 rr                        sta tmp2
001F04r 3  A5 rr                        lda up+1
001F06r 3  69 00                        adc #0          ; Adding carry
001F08r 3  85 rr                        sta tmp2+1
001F0Ar 3               
001F0Ar 3                               ; Add the wid (in cells) to the base address.
001F0Ar 3  B5 00                        lda 0,x
001F0Cr 3  0A                           asl             ; Convert wid to offset in cells (x2)
001F0Dr 3  65 rr                        adc tmp2
001F0Fr 3  85 rr                        sta tmp2
001F11r 3  90 02                        bcc @1
001F13r 3  E6 rr                        inc tmp2+1      ; Propagate carry if needed.
001F15r 3               
001F15r 3                               ; tmp2 now holds the address of the dictionary pointer
001F15r 3                               ; for the given wordlist.
001F15r 3               @1:
001F15r 3                               ; Remove the wid from the stack.
001F15r 3  E8                           inx
001F16r 3  E8                           inx
001F17r 3               
001F17r 3                               ; check for special case of an empty string (length zero)
001F17r 3  B5 00                        lda 0,x
001F19r 3  15 01                        ora 1,x
001F1Br 3  D0 03                        bne @check_wordlist
001F1Dr 3  4C rr rr                     jmp @done
001F20r 3               
001F20r 3               @check_wordlist:
001F20r 3                               ; Check for special case of empty wordlist
001F20r 3                               ; (dictionary pointer, in tmp2, is 0)
001F20r 3  A5 rr                        lda tmp2
001F22r 3  05 rr                        ora tmp2+1
001F24r 3  D0 03                        bne @have_string
001F26r 3  4C rr rr                     jmp @done
001F29r 3               
001F29r 3               @have_string:
001F29r 3                               ; set up first loop iteration
001F29r 3  B2 rr                        lda (tmp2)              ; nt of first word in Dictionary
001F2Br 3  85 rr                        sta tmp1
001F2Dr 3               
001F2Dr 3  E6 rr                        inc tmp2                ; Move to the upper byte
001F2Fr 3  D0 02                        bne @2
001F31r 3  E6 rr                        inc tmp2+1
001F33r 3               @2:
001F33r 3  B2 rr                        lda (tmp2)
001F35r 3  85 rr                        sta tmp1+1
001F37r 3               
001F37r 3                               ; Reuse tmp2 to hold the address of the mystery string.
001F37r 3  B5 02                        lda 2,x                 ; Address of mystery string
001F39r 3  85 rr                        sta tmp2
001F3Br 3  B5 03                        lda 3,x
001F3Dr 3  85 rr                        sta tmp2+1
001F3Fr 3               
001F3Fr 3               @loop:
001F3Fr 3                               ; first quick test: Are strings the same length?
001F3Fr 3  B2 rr                        lda (tmp1)
001F41r 3  D5 00                        cmp 0,x
001F43r 3  D0 7B                        bne @next_entry
001F45r 3               
001F45r 3               @compare_string:
001F45r 3                               ; are the same length, so we now have to compare each
001F45r 3                               ; character
001F45r 3               
001F45r 3                               ; second quick test: Is the first character the same?
001F45r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
001F47r 3               
001F47r 3                               ; Lowercase the incoming charcter.
001F47r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
001F49r 3  B0 07                        bcs @compare_first
001F4Br 3  C9 41                        cmp #$41        ; ASCII 'A'
001F4Dr 3  90 03                        bcc @compare_first
001F4Fr 3               
001F4Fr 3                               ; An uppercase letter has been located.  Make it
001F4Fr 3                               ; lowercase.
001F4Fr 3  18                           clc
001F50r 3  69 20                        adc #$20
001F52r 3               
001F52r 3               @compare_first:
001F52r 3  A0 08                        ldy #8          ; Offset in nt to name
001F54r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
001F56r 3  D0 68                        bne @next_entry
001F58r 3               
001F58r 3                               ; string length are the same and the first character is the
001F58r 3                               ; same. If the length of the string is 1, we're already done
001F58r 3  B5 00                        lda 0,x
001F5Ar 3  3A                           dec
001F5Br 3  F0 2C                        beq @success
001F5Dr 3               
001F5Dr 3                               ; No such luck: The strings are the same length and the first
001F5Dr 3                               ; char is the same, but the word is more than one char long.
001F5Dr 3                               ; So we suck it up and compare every single character. We go
001F5Dr 3                               ; from back to front, because words like CELLS and CELL+ would
001F5Dr 3                               ; take longer otherwise. We can also shorten the loop by one
001F5Dr 3                               ; because we've already compared the first char.
001F5Dr 3               
001F5Dr 3                               ; The string of the word we're testing against is 8 bytes down
001F5Dr 3  A5 rr                        lda tmp1
001F5Fr 3  48                           pha             ; Preserve tmp1 on the return stack.
001F60r 3  18                           clc
001F61r 3  69 08                        adc #8
001F63r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
001F65r 3  A5 rr                        lda tmp1+1
001F67r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
001F68r 3  69 00                        adc #0          ; we only need the carry
001F6Ar 3  85 rr                        sta tmp1+1
001F6Cr 3               
001F6Cr 3  B4 00                        ldy 0,x         ; index is length of string minus 1
001F6Er 3  88                           dey
001F6Fr 3               
001F6Fr 3               @string_loop:
001F6Fr 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
001F71r 3               
001F71r 3                               ; Lowercase the incoming charcter.
001F71r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
001F73r 3  B0 07                        bcs @check_char
001F75r 3  C9 41                        cmp #$41        ; ASCII 'A'
001F77r 3  90 03                        bcc @check_char
001F79r 3               
001F79r 3                               ; An uppercase letter has been located.  Make it
001F79r 3                               ; lowercase.
001F79r 3  18                           clc
001F7Ar 3  69 20                        adc #$20
001F7Cr 3               @check_char:
001F7Cr 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
001F7Er 3  D0 3A                        bne @next_entry_tmp1
001F80r 3               
001F80r 3  88                           dey
001F81r 3  D0 EC                        bne @string_loop
001F83r 3               
001F83r 3               @success_tmp1:
001F83r 3  68                           pla             ; Restore tmp1 from the return stack.
001F84r 3  85 rr                        sta tmp1+1
001F86r 3  68                           pla
001F87r 3  85 rr                        sta tmp1
001F89r 3               
001F89r 3               @success:
001F89r 3                               ; The strings match. Drop the count and put correct nt TOS
001F89r 3  E8                           inx
001F8Ar 3  E8                           inx
001F8Br 3  A5 rr                        lda tmp1
001F8Dr 3  95 00                        sta 0,x
001F8Fr 3  A5 rr                        lda tmp1+1
001F91r 3  95 01                        sta 1,x
001F93r 3               
001F93r 3                               ; Change the nt into an xt, but save a copy of the nt
001F93r 3                               ; to look up whether the word is immediate or not.
001F93r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001F96r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001F99r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001F9Cr 3               
001F9Cr 3  A0 00                        ldy #0                  ; Prepare flag
001F9Er 3               
001F9Er 3                               ; The flags are in the second byte of the header
001F9Er 3  F6 00                        inc 0,x
001FA0r 3  D0 02                        bne @3
001FA2r 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
001FA4r 3               @3:
001FA4r 3  A1 00                        lda (0,x)               ; ( xt char )
001FA6r 3  29 04                        and #IM
001FA8r 3  D0 08                        bne @immediate          ; bit set, we're immediate
001FAAr 3               
001FAAr 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
001FACr 3  95 00                        sta 0,x
001FAEr 3  95 01                        sta 1,x
001FB0r 3  80 28                        bra @done_nodrop
001FB2r 3               
001FB2r 3               @immediate:
001FB2r 3  A9 01                        lda #1                  ; We're immediate, return 1
001FB4r 3  95 00                        sta 0,x
001FB6r 3  74 01                        stz 1,x
001FB8r 3               
001FB8r 3  80 20                        bra @done_nodrop
001FBAr 3               
001FBAr 3               @next_entry_tmp1:
001FBAr 3  68                           pla             ; Restore tmp1 from the return stack.
001FBBr 3  85 rr                        sta tmp1+1
001FBDr 3  68                           pla
001FBEr 3  85 rr                        sta tmp1
001FC0r 3               @next_entry:
001FC0r 3                               ; Not the same, so we get the next word. Next header
001FC0r 3                               ; address is two bytes down
001FC0r 3  A0 02                        ldy #2
001FC2r 3  B1 rr                        lda (tmp1),y
001FC4r 3  48                           pha
001FC5r 3  C8                           iny
001FC6r 3  B1 rr                        lda (tmp1),y
001FC8r 3  85 rr                        sta tmp1+1
001FCAr 3  68                           pla
001FCBr 3  85 rr                        sta tmp1
001FCDr 3               
001FCDr 3                               ; If we got a zero, we've walked the whole Dictionary and
001FCDr 3                               ; return as a failure, otherwise try again
001FCDr 3  05 rr                        ora tmp1+1
001FCFr 3  F0 03                        beq @fail_done
001FD1r 3  4C rr rr                     jmp @loop
001FD4r 3               
001FD4r 3               @fail_done:
001FD4r 3  74 02                        stz 2,x         ; failure flag
001FD6r 3  74 03                        stz 3,x
001FD8r 3               @done:
001FD8r 3  E8                           inx
001FD9r 3  E8                           inx
001FDAr 3               @done_nodrop:
001FDAr 3               z_search_wordlist:
001FDAr 3  60                           rts
001FDBr 3               
001FDBr 3               
001FDBr 3               
001FDBr 3               ; ## SEE ( "name" -- ) "Print information about a Forth word"
001FDBr 3               ; ## "see" tested  ANS tools
001FDBr 3                       ; """https://forth-standard.org/standard/tools/SEE
001FDBr 3                       ; SEE takes the name of a word and prints its name token (nt),
001FDBr 3                       ; execution token (xt), size in bytes, flags used, and then dumps the
001FDBr 3                       ; code and disassembles it.
001FDBr 3                       ; """
001FDBr 3               
001FDBr 3               xt_see:
001FDBr 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
001FDEr 3  20 rr rr                     jsr xt_find_name        ; ( nt | 0 )
001FE1r 3               
001FE1r 3                               ; If we got back a zero we don't know that word and so we quit
001FE1r 3                               ; with an error
001FE1r 3  B5 00                        lda 0,x
001FE3r 3  15 01                        ora 1,x
001FE5r 3  D0 05                        bne @1
001FE7r 3               
001FE7r 3  A9 05                        lda #err_noname
001FE9r 3  4C rr rr                     jmp error
001FECr 3               @1:
001FECr 3  20 rr rr                     jsr xt_cr
001FEFr 3               
001FEFr 3                               ; We have a legal word, so let's get serious. Save the current
001FEFr 3                               ; number base and use hexadecimal instead.
001FEFr 3  A5 rr                        lda base
001FF1r 3  48                           pha
001FF2r 3  20 rr rr                     jsr xt_hex
001FF5r 3               
001FF5r 3  A9 0A                        lda #str_see_nt
001FF7r 3  20 rr rr                     jsr print_string_no_lf
001FFAr 3               
001FFAr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001FFDr 3  20 rr rr                     jsr xt_u_dot
002000r 3  20 rr rr                     jsr xt_space            ; ( nt )
002003r 3               
002003r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002006r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
002009r 3               
002009r 3  A9 0B                        lda #str_see_xt
00200Br 3  20 rr rr                     jsr print_string_no_lf
00200Er 3               
00200Er 3  20 rr rr                     jsr xt_dup              ; ( nt xt xt )
002011r 3  20 rr rr                     jsr xt_u_dot
002014r 3  20 rr rr                     jsr xt_cr               ; ( nt xt )
002017r 3               
002017r 3                               ; We print letters for flags and then later follow it with 1 or
002017r 3                               ; 0 to mark if which flag is set
002017r 3  A9 09                        lda #str_see_flags
002019r 3  20 rr rr                     jsr print_string_no_lf
00201Cr 3               
00201Cr 3  20 rr rr                     jsr xt_over             ; ( nt xt nt )
00201Fr 3  20 rr rr                     jsr xt_one_plus         ; ( nt xt nt+1 )
002022r 3  20 rr rr                     jsr xt_fetch            ; ( nt xt flags )
002025r 3               
002025r 3  B5 00                        lda 0,x
002027r 3               
002027r 3                               ; This is crude, but for the moment it is good enough
002027r 3  A0 06                        ldy #6                  ; Not all bits are used
002029r 3               @flag_loop:
002029r 3  48                           pha
00202Ar 3  29 01                        and #%00000001
00202Cr 3  18                           clc
00202Dr 3  69 30                        adc #$30                ; ASCII "0"
00202Fr 3  20 rr rr                     jsr emit_a
002032r 3  20 rr rr                     jsr xt_space
002035r 3               
002035r 3  68                           pla
002036r 3  6A                           ror                     ; Next flag
002037r 3               
002037r 3  88                           dey
002038r 3  D0 EF                        bne @flag_loop
00203Ar 3               
00203Ar 3  20 rr rr                     jsr xt_cr
00203Dr 3               
00203Dr 3  E8                           inx
00203Er 3  E8                           inx                     ; ( nt xt )
00203Fr 3               
00203Fr 3                               ; Figure out the size
00203Fr 3  A9 0C                        lda #str_see_size
002041r 3  20 rr rr                     jsr print_string_no_lf
002044r 3               
002044r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
002047r 3  20 rr rr                     jsr xt_wordsize         ; ( xt u )
00204Ar 3  20 rr rr                     jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
00204Dr 3  20 rr rr                     jsr xt_decimal
002050r 3  20 rr rr                     jsr xt_u_dot            ; ( xt u )
002053r 3  20 rr rr                     jsr xt_hex
002056r 3  20 rr rr                     jsr xt_cr
002059r 3               
002059r 3                               ; Dump hex and disassemble
002059r 3  20 rr rr                     jsr xt_two_dup          ; ( xt u xt u )
00205Cr 3  20 rr rr                     jsr xt_dump
00205Fr 3  20 rr rr                     jsr xt_cr
002062r 3  20 rr rr                     jsr xt_disasm
002065r 3               
002065r 3  68                           pla
002066r 3  85 rr                        sta base
002068r 3               
002068r 3  60           z_see:          rts
002069r 3               
002069r 3               
002069r 3               
002069r 3               ; ## SET_CURRENT ( wid -- ) "Set the compilation wordlist"
002069r 3               ; ## "set-current" auto ANS search
002069r 3                       ; """https://forth-standard.org/standard/search/SET-CURRENT"""
002069r 3               
002069r 3               xt_set_current:
002069r 3  20 rr rr                     jsr underflow_1
00206Cr 3               
00206Cr 3                               ; Save the value from the data stack.
00206Cr 3  A0 04                        ldy #current_offset
00206Er 3  B5 00                        lda 0,x         ; CURRENT is byte variable
002070r 3  91 rr                        sta (up),y      ; so only the LSB is used.
002072r 3               
002072r 3  E8                           inx
002073r 3  E8                           inx
002074r 3               
002074r 3  60           z_set_current:  rts
002075r 3               
002075r 3               
002075r 3               
002075r 3               ; ## SET_ORDER ( wid_n .. wid_1 n -- ) "Set the current search order"
002075r 3               ; ## "set-order" auto ANS search
002075r 3                       ; """https://forth-standard.org/standard/search/SET-ORDER"""
002075r 3               
002075r 3               xt_set_order:
002075r 3                               ; Test for -1 TOS
002075r 3  A9 FF                        lda #$FF
002077r 3  D5 01                        cmp 1,x
002079r 3  D0 12                        bne @start
00207Br 3  D5 00                        cmp 0,x
00207Dr 3  D0 0E                        bne @start
00207Fr 3               
00207Fr 3                               ; There is a -1 TOS.  Replace it with the default
00207Fr 3                               ; search order, which is just the FORTH-WORDLIST.
00207Fr 3  CA                           dex             ; Make room for the count.
002080r 3  CA                           dex
002081r 3  74 03                        stz 3,x         ; ROOT-WORDLIST is 3
002083r 3  A9 03                        lda #3
002085r 3  95 02                        sta 2,x
002087r 3  74 01                        stz 1,x         ; Count is 1.
002089r 3  A9 01                        lda #1
00208Br 3  95 00                        sta 0,x
00208Dr 3               
00208Dr 3                               ; Continue processing with ( forth-wordlist 1 -- )
00208Dr 3               @start:
00208Dr 3                               ; Set #ORDER - the number of wordlists in the search order.
00208Dr 3  A0 1E                        ldy #num_order_offset
00208Fr 3  B5 00                        lda 0,x
002091r 3  91 rr                        sta (up),y      ; #ORDER is a byte variable.
002093r 3  85 rr                        sta tmp1        ; Save a copy for zero check and looping.
002095r 3                                               ; Only the low byte is saved in tmp1 as
002095r 3                                               ; only 8 wordlists are allowed.
002095r 3               
002095r 3  E8                           inx             ; Drop the count off the data stack.
002096r 3  E8                           inx
002097r 3               
002097r 3                               ; Check if there are zero wordlists.
002097r 3  A5 rr                        lda tmp1
002099r 3  F0 0D                        beq @done       ; If zero, there are no wordlists.
00209Br 3               
00209Br 3                               ; Move the wordlist ids from the data stack to the search order.
00209Br 3  A0 1F                        ldy #search_order_offset
00209Dr 3               @loop:
00209Dr 3                               ; Move one wordlist id over into the search order.
00209Dr 3  B5 00                        lda 0,x         ; The search order is a byte array
00209Fr 3  91 rr                        sta (up),y      ; so only save the LSB
0020A1r 3  C8                           iny
0020A2r 3               
0020A2r 3                               ; Remove it from the data stack.
0020A2r 3  E8                           inx
0020A3r 3  E8                           inx
0020A4r 3               
0020A4r 3                               ; See if that was the last one to process (first in the list).
0020A4r 3  C6 rr                        dec tmp1
0020A6r 3  D0 F5                        bne @loop
0020A8r 3               
0020A8r 3               @done:
0020A8r 3  60           z_set_order:    rts
0020A9r 3               
0020A9r 3               
0020A9r 3               
0020A9r 3               
0020A9r 3               ; ## S_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
0020A9r 3               ; ## "s""  auto  ANS core
0020A9r 3                       ; """https://forth-standard.org/standard/core/Sq
0020A9r 3                       ; Store address and length of string given, returning ( addr u ).
0020A9r 3                       ; ANS core claims this is compile-only, but the file set expands it
0020A9r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
0020A9r 3                       ; are evil. We follow general usage.
0020A9r 3                       ;
0020A9r 3                       ; Can also be realized as
0020A9r 3                       ;     : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE
0020A9r 3                       ; but it is used so much we want it in code.
0020A9r 3                       ; """
0020A9r 3               
0020A9r 3               xt_s_quote:
0020A9r 3                               ; tmp2 will be used to determine if we are handling
0020A9r 3                               ; escaped characters or not.  In this case, we are
0020A9r 3                               ; not, so set it to zero.
0020A9r 3  64 rr                        stz tmp2
0020ABr 3  64 rr                        stz tmp2+1
0020ADr 3               
0020ADr 3               s_quote_start:
0020ADr 3                               ; Make room on the data stack for the address.
0020ADr 3  CA                           dex
0020AEr 3  CA                           dex
0020AFr 3                               ; Make room on the data stack for the count.
0020AFr 3  CA                           dex
0020B0r 3  CA                           dex
0020B1r 3               
0020B1r 3                               ; Put a jmp over the string data with address to be filled
0020B1r 3                               ; in later.
0020B1r 3  A9 4C                        lda #$4C
0020B3r 3  20 rr rr                     jsr cmpl_a
0020B6r 3               
0020B6r 3                               ; Address to be filled in later, just use $4C for the moment
0020B6r 3  20 rr rr                     jsr cmpl_a
0020B9r 3  20 rr rr                     jsr cmpl_a
0020BCr 3               
0020BCr 3                               ; Save the current value of HERE on the data stack for the
0020BCr 3                               ; address of the string.
0020BCr 3  A5 rr                        lda cp
0020BEr 3  95 02                        sta 2,x
0020C0r 3  A5 rr                        lda cp+1
0020C2r 3  95 03                        sta 3,x
0020C4r 3               
0020C4r 3               @savechars_loop:
0020C4r 3                               ; Start saving the string into the dictionary up to the
0020C4r 3                               ; ending double quote. First, check to see if the input
0020C4r 3                               ; buffer is empty.
0020C4r 3  A5 rr                        lda toin+1              ; MSB
0020C6r 3  C5 rr                        cmp ciblen+1
0020C8r 3  90 2A                        bcc @input_fine         ; unsigned comparison
0020CAr 3               
0020CAr 3  A5 rr                        lda toin                ; LSB
0020CCr 3  C5 rr                        cmp ciblen
0020CEr 3  90 24                        bcc @input_fine
0020D0r 3               
0020D0r 3                               ; Input buffer is empty. Refill it. Refill calls accept,
0020D0r 3                               ; which uses tmp2 and tmp3. Save and restore them.
0020D0r 3  A5 rr                        lda tmp2
0020D2r 3  48                           pha
0020D3r 3  A5 rr                        lda tmp2+1
0020D5r 3  48                           pha
0020D6r 3  A5 rr                        lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
0020D8r 3  48                           pha
0020D9r 3               
0020D9r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
0020DCr 3               
0020DCr 3  68                           pla
0020DDr 3  85 rr                        sta tmp3
0020DFr 3  68                           pla
0020E0r 3  85 rr                        sta tmp2+1
0020E2r 3  68                           pla
0020E3r 3  85 rr                        sta tmp2
0020E5r 3               
0020E5r 3                               ; Check result of refill.
0020E5r 3  B5 00                        lda 0,x
0020E7r 3  15 01                        ora 1,x
0020E9r 3  D0 05                        bne @refill_ok
0020EBr 3               
0020EBr 3                               ; Something when wrong with refill.
0020EBr 3  A9 06                        lda #err_refill
0020EDr 3  4C rr rr                     jmp error
0020F0r 3               
0020F0r 3               @refill_ok:
0020F0r 3                               ; Remove the refill flag from the data stack.
0020F0r 3  E8                           inx
0020F1r 3  E8                           inx
0020F2r 3               
0020F2r 3                               ; For refill success, jump back up to the empty check, just in
0020F2r 3                               ; case refill gave us an empty buffer (eg. empty/blank line of
0020F2r 3                               ; input)
0020F2r 3  80 D0                        bra @savechars_loop
0020F4r 3               
0020F4r 3               @input_fine:
0020F4r 3                               ; There should be at least one valid char to use.
0020F4r 3                               ; Calculate it's address at CIB+TOIN into tmp1
0020F4r 3  A5 rr                        lda cib
0020F6r 3  18                           clc
0020F7r 3  65 rr                        adc toin        ; LSB
0020F9r 3  85 rr                        sta tmp1
0020FBr 3  A5 rr                        lda cib+1
0020FDr 3  65 rr                        adc toin+1      ; MSB
0020FFr 3  85 rr                        sta tmp1+1
002101r 3               
002101r 3                               ; Get the character
002101r 3  B2 rr                        lda (tmp1)
002103r 3               
002103r 3                               ; Check to see if we are handling escaped characters.
002103r 3  24 rr                        bit tmp2
002105r 3  30 03                        bmi @handle_escapes    ; Only checking bit 7
002107r 3  4C rr rr                     jmp @regular_char
00210Ar 3               
00210Ar 3               @handle_escapes:
00210Ar 3                               ; We are handling escaped characters.  See if we have
00210Ar 3                               ; already seen the backslash.
00210Ar 3  24 rr                        bit tmp2+1
00210Cr 3  30 03                        bmi @escaped
00210Er 3  4C rr rr                     jmp @not_escaped
002111r 3               
002111r 3               @escaped:
002111r 3               
002111r 3                               ; We have seen a backslash (previous character). Check to see if
002111r 3                               ; we are in the middle of a \x sequence (bit 6 of tmp2+1 will
002111r 3                               ; be clear in that case )
002111r 3  70 22                        bvs @check_esc_chars
002113r 3               
002113r 3                               ; We are in the middle of a \x sequence. Check to see if we
002113r 3                               ; are on the first or second digit.
002113r 3  A9 01                        lda #1
002115r 3  24 rr                        bit tmp2+1
002117r 3  D0 10                        bne @esc_x_second_digit
002119r 3               
002119r 3                               ; First digit.
002119r 3  E6 rr                        inc tmp2+1  ; Adjust flag for second digit next time.
00211Br 3  B2 rr                        lda (tmp1)  ; Get the char again.
00211Dr 3               
00211Dr 3                               ; Convert to hex
00211Dr 3  20 rr rr                     jsr convert_hex_value
002120r 3               
002120r 3                               ; This is the upper nybble, so move it up.
002120r 3  0A                           asl
002121r 3  0A                           asl
002122r 3  0A                           asl
002123r 3  0A                           asl
002124r 3  85 rr                        sta tmp3    ; Save it for later.
002126r 3  4C rr rr                     jmp @next_character
002129r 3               
002129r 3               @esc_x_second_digit:
002129r 3               
002129r 3                               ; We are on the second hex digit of a \x sequence. Clear the
002129r 3                               ; escaped character flag (because we are handling it right
002129r 3                               ; here)
002129r 3  64 rr                        stz tmp2+1
00212Br 3  B2 rr                        lda (tmp1)
00212Dr 3               
00212Dr 3                               ; Convert to hex, combine with value in tmp3
00212Dr 3  20 rr rr                     jsr convert_hex_value
002130r 3  05 rr                        ora tmp3
002132r 3               
002132r 3  4C rr rr                     jmp @save_character
002135r 3               
002135r 3               @check_esc_chars:
002135r 3                               ; Clear the escaped character flag (because we are
002135r 3                               ; handling it right here)
002135r 3  64 rr                        stz tmp2+1
002137r 3               
002137r 3                               ; Process the escaped character
002137r 3               @check_esc_a:
002137r 3  C9 61                        cmp #'a'
002139r 3  D0 05                        bne @check_esc_b
00213Br 3               
00213Br 3                               ; BEL (ASCII value 7)
00213Br 3  A9 07                        lda #7
00213Dr 3  4C rr rr                     jmp @save_character
002140r 3               
002140r 3               @check_esc_b:
002140r 3  C9 62                        cmp #'b'
002142r 3  D0 05                        bne @check_esc_e
002144r 3               
002144r 3                               ; Backspace (ASCII value 8)
002144r 3  A9 08                        lda #8
002146r 3  4C rr rr                     jmp @save_character
002149r 3               
002149r 3               @check_esc_e:
002149r 3  C9 65                        cmp #'e'
00214Br 3  D0 04                        bne @check_esc_f
00214Dr 3               
00214Dr 3                               ; ESC (ASCII value 27)
00214Dr 3  A9 1B                        lda #27
00214Fr 3  80 75                        bra @save_character
002151r 3               
002151r 3               @check_esc_f:
002151r 3  C9 66                        cmp #'f'
002153r 3  D0 04                        bne @check_esc_l
002155r 3               
002155r 3                               ; FF (ASCII value 12)
002155r 3  A9 0C                        lda #12
002157r 3  80 6D                        bra @save_character
002159r 3               
002159r 3               @check_esc_l:
002159r 3  C9 6C                        cmp #'l'
00215Br 3  D0 04                        bne @check_esc_m
00215Dr 3               
00215Dr 3                               ; LF (ASCII value 10)
00215Dr 3  A9 0A                        lda #10
00215Fr 3  80 65                        bra @save_character
002161r 3               
002161r 3               @check_esc_m:
002161r 3                               ; This one is not like the others because we save two
002161r 3                               ; characters
002161r 3  C9 6D                        cmp #'m'
002163r 3  D0 09                        bne @check_esc_n
002165r 3               
002165r 3                               ; CR/LF pair (ASCII values 13, 10)
002165r 3  A9 0D                        lda #13
002167r 3  20 rr rr                     jsr cmpl_a
00216Ar 3  A9 0A                        lda #10
00216Cr 3  80 58                        bra @save_character
00216Er 3               
00216Er 3               @check_esc_n:
00216Er 3  C9 6E                        cmp #'n'
002170r 3  D0 04                        bne @check_esc_q
002172r 3               
002172r 3                               ; newline, impl. dependant, using LF (ASCII values 10)
002172r 3  A9 0A                        lda #10
002174r 3  80 50                        bra @save_character
002176r 3               
002176r 3               @check_esc_q:
002176r 3  C9 71                        cmp #'q'
002178r 3  D0 04                        bne @check_esc_r
00217Ar 3               
00217Ar 3                               ; Double quote (ASCII value 34)
00217Ar 3  A9 22                        lda #34
00217Cr 3  80 48                        bra @save_character
00217Er 3               
00217Er 3               @check_esc_r:
00217Er 3  C9 72                        cmp #'r'
002180r 3  D0 04                        bne @check_esc_t
002182r 3               
002182r 3                               ; CR (ASCII value 13)
002182r 3  A9 0D                        lda #13
002184r 3  80 40                        bra @save_character
002186r 3               
002186r 3               @check_esc_t:
002186r 3  C9 74                        cmp #'t'
002188r 3  D0 04                        bne @check_esc_v
00218Ar 3               
00218Ar 3                               ; Horizontal TAB (ASCII value 9)
00218Ar 3  A9 09                        lda #9
00218Cr 3  80 38                        bra @save_character
00218Er 3               
00218Er 3               @check_esc_v:
00218Er 3  C9 76                        cmp #'v'
002190r 3  D0 04                        bne @check_esc_z
002192r 3               
002192r 3                               ; Vertical TAB (ASCII value 11)
002192r 3  A9 0B                        lda #11
002194r 3  80 30                        bra @save_character
002196r 3               
002196r 3               @check_esc_z:
002196r 3  C9 7A                        cmp #'z'
002198r 3  D0 04                        bne @check_esc_quote
00219Ar 3               
00219Ar 3                               ; NULL (ASCII value 0)
00219Ar 3  A9 00                        lda #0
00219Cr 3  80 28                        bra @save_character
00219Er 3               
00219Er 3               @check_esc_quote:
00219Er 3  C9 22                        cmp #$22
0021A0r 3  D0 04                        bne @check_esc_x
0021A2r 3               
0021A2r 3                               ; Double quote (ASCII value 34)
0021A2r 3  A9 22                        lda #34
0021A4r 3  80 20                        bra @save_character
0021A6r 3               
0021A6r 3               @check_esc_x:
0021A6r 3  C9 78                        cmp #'x'
0021A8r 3  D0 06                        bne @check_esc_backslash
0021AAr 3               
0021AAr 3                               ; This one is difficult. We need to get the next TWO
0021AAr 3                               ; characters (which might require a refill in the middle)
0021AAr 3                               ; and combine them as two hex digits. We do this by
0021AAr 3                               ; clearing bit 6 of tmp2+1 to indicate we are in a digit
0021AAr 3                               ; and using bit 0 to keep track of which digit we are on.
0021AAr 3  A9 BE                        lda #$BE        ; Clear bits 6 and 0
0021ACr 3  85 rr                        sta tmp2+1
0021AEr 3  80 19                        bra @next_character
0021B0r 3               
0021B0r 3               @check_esc_backslash:
0021B0r 3  C9 5C                        cmp #$5C
0021B2r 3  D0 04                        bne @not_escaped
0021B4r 3               
0021B4r 3                               ; Backslash (ASCII value 92)
0021B4r 3  A9 5C                        lda #92
0021B6r 3  80 0E                        bra @save_character
0021B8r 3               
0021B8r 3               @not_escaped:
0021B8r 3                               ; Check for the backslash to see if we should escape
0021B8r 3                               ; the next char.
0021B8r 3  C9 5C                        cmp #$5C        ; The backslash char
0021BAr 3  D0 06                        bne @regular_char
0021BCr 3               
0021BCr 3                               ; We found a backslash.  Don't save anyhing, but set
0021BCr 3                               ; a flag (in tmp2+1) to handle the next char. We don't
0021BCr 3                               ; try to get the next char here as it may require a
0021BCr 3                               ; refill of the input buffer.
0021BCr 3  A9 FF                        lda #$FF
0021BEr 3  85 rr                        sta tmp2+1
0021C0r 3  80 07                        bra @next_character
0021C2r 3               
0021C2r 3               @regular_char:
0021C2r 3                               ; Check if the current character is the end of the string.
0021C2r 3  C9 22                        cmp #$22        ; ASCII for "
0021C4r 3  F0 0C                        beq @found_string_end
0021C6r 3               
0021C6r 3               @save_character:
0021C6r 3                               ; If we didn't reach the end of the string, compile this
0021C6r 3                               ; character into the dictionary
0021C6r 3  20 rr rr                     jsr cmpl_a
0021C9r 3               
0021C9r 3               @next_character:
0021C9r 3                               ; Move on to the next character.
0021C9r 3  E6 rr                        inc toin
0021CBr 3  D0 02                        bne @savechars_loop_longjump
0021CDr 3  E6 rr                        inc toin+1
0021CFr 3               
0021CFr 3               @savechars_loop_longjump:
0021CFr 3  4C rr rr                     jmp @savechars_loop
0021D2r 3               
0021D2r 3               @found_string_end:
0021D2r 3                               ; Use up the delimiter.
0021D2r 3  E6 rr                        inc toin
0021D4r 3  D0 02                        bne @1
0021D6r 3  E6 rr                        inc toin+1
0021D8r 3               @1:
0021D8r 3                               ; Calculate the length of the string, which is the
0021D8r 3                               ; difference between cp and the address of the start
0021D8r 3                               ; of the string (currently saved on the stack).
0021D8r 3  A5 rr                        lda cp
0021DAr 3  38                           sec
0021DBr 3  F5 02                        sbc 2,x
0021DDr 3  95 00                        sta 0,x         ; LSB
0021DFr 3  A5 rr                        lda cp+1
0021E1r 3  F5 03                        sbc 3,x
0021E3r 3  95 01                        sta 1,x         ; MSB
0021E5r 3               
0021E5r 3                               ; Update the address of the jump-over jmp instruction.
0021E5r 3                               ; First determine location of jmp instructions address.
0021E5r 3                               ; It should be 2 bytes before the start of the string.
0021E5r 3                               ; Compute it into tmp1, which is no longer being used.
0021E5r 3  B5 02                        lda 2,x
0021E7r 3  38                           sec
0021E8r 3  E9 02                        sbc #2
0021EAr 3  85 rr                        sta tmp1
0021ECr 3  B5 03                        lda 3,x
0021EEr 3  E9 00                        sbc #0          ; Propagate borrow
0021F0r 3  85 rr                        sta tmp1+1
0021F2r 3               
0021F2r 3                               ; Update the address of the jump to HERE.
0021F2r 3  A5 rr                        lda cp
0021F4r 3  92 rr                        sta (tmp1)
0021F6r 3  A0 01                        ldy #1
0021F8r 3  A5 rr                        lda cp+1
0021FAr 3  91 rr                        sta (tmp1),y
0021FCr 3               
0021FCr 3                               ; What happens next depends on the state (which is bad, but
0021FCr 3                               ; that's the way it works at the moment). If we are
0021FCr 3                               ; interpretating, we save the string to a transient buffer
0021FCr 3                               ; and return that address (used for file calls, see
0021FCr 3                               ; https://forth-standard.org/standard/file/Sq . If we're
0021FCr 3                               ; compiling, we just need SLITERAL
0021FCr 3  A5 rr                        lda state
0021FEr 3  05 rr                        ora state+1             ; paranoid
002200r 3  F0 03                        beq @done
002202r 3               
002202r 3                               ; Jump into the middle of the sliteral word, after the
002202r 3                               ; string data has been compiled into the dictionary,
002202r 3                               ; because we've already done that step.
002202r 3  20 rr rr                     jsr sliteral_const_str         ; ( addr u -- )
002205r 3               
002205r 3               @done:
002205r 3  60           z_s_quote:      rts
002206r 3               
002206r 3               
002206r 3               
002206r 3               ; ## S_TO_D ( u -- d ) "Convert single cell number to double cell"
002206r 3               ; ## "s>d"  auto  ANS core
002206r 3                       ; """https://forth-standard.org/standard/core/StoD"""
002206r 3               
002206r 3               xt_s_to_d:
002206r 3  20 rr rr                     jsr underflow_1
002209r 3               
002209r 3  CA                           dex
00220Ar 3  CA                           dex
00220Br 3  74 00                        stz 0,x
00220Dr 3  74 01                        stz 1,x
00220Fr 3               
00220Fr 3  B5 03                        lda 3,x
002211r 3  10 04                        bpl @done
002213r 3               
002213r 3                               ; negative, extend sign
002213r 3  D6 00                        dec 0,x
002215r 3  D6 01                        dec 1,x
002217r 3               @done:
002217r 3  60           z_s_to_d:       rts
002218r 3               
002218r 3               
002218r 3               
002218r 3               ; ## SAVE_BUFFERS ( -- ) "Save all dirty buffers to storage"
002218r 3               ; ## "save-buffers"  tested  ANS block
002218r 3                       ; """https://forth-standard.org/standard/block/SAVE-BUFFERS"""
002218r 3               
002218r 3               xt_save_buffers:
002218r 3                               ; Check the buffer status
002218r 3  A0 2C                        ldy #buffstatus_offset
00221Ar 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
00221Cr 3  C9 03                        cmp #3          ; LSB is needed.
00221Er 3  D0 12                        bne @done       ; Either not used or not dirty = done!
002220r 3               
002220r 3                               ; We need to save the block.
002220r 3  20 rr rr                     jsr xt_blkbuffer
002223r 3  20 rr rr                     jsr xt_buffblocknum
002226r 3  20 rr rr                     jsr xt_fetch
002229r 3  20 rr rr                     jsr xt_block_write
00222Cr 3               
00222Cr 3                               ; Mark the buffer as clean now.
00222Cr 3  A9 01                        lda #1
00222Er 3  A0 2C                        ldy #buffstatus_offset
002230r 3  91 rr                        sta (up),y
002232r 3               
002232r 3               @done:
002232r 3  60           z_save_buffers: rts
002233r 3               
002233r 3               
002233r 3               
002233r 3               ; ## SCR ( -- addr ) "Push address of variable holding last screen listed"
002233r 3               ; ## "scr"  auto  ANS block ext
002233r 3                       ; """https://forth-standard.org/standard/block/SCR"""
002233r 3               xt_scr:
002233r 3                               ; SCR is at UP + scr_offset
002233r 3  CA                           dex
002234r 3  CA                           dex
002235r 3  18                           clc
002236r 3  A5 rr                        lda up
002238r 3  69 02                        adc #scr_offset ; Add offset
00223Ar 3  95 00                        sta 0,x
00223Cr 3  A5 rr                        lda up+1
00223Er 3  69 00                        adc #0          ; Adding carry
002240r 3  95 01                        sta 1,x
002242r 3               
002242r 3  60           z_scr:          rts
002243r 3               
002243r 3               
002243r 3               ; ## SEARCH ( addr1 u1 addr2 u2 -- addr3 u3 flag) "Search for a substring"
002243r 3               ; ## "search"   auto  ANS string
002243r 3                       ; """https://forth-standard.org/standard/string/SEARCH
002243r 3                       ; Search for string2 (denoted by addr2 u2) in string1 (denoted by
002243r 3                       ; addr1 u1). If a match is found the flag will be true and
002243r 3                       ; addr3 will have the address of the start of the match and u3 will have
002243r 3                       ; the number of characters remaining from the match point to the end
002243r 3                       ; of the original string1. If a match is not found, the flag will be
002243r 3                       ; false and addr3 and u3 will be the original string1's addr1 and u1.
002243r 3                       ; """
002243r 3               
002243r 3               xt_search:
002243r 3  20 rr rr                     jsr underflow_4
002246r 3               
002246r 3                               ; ANS says if the second string is a zero-length string it
002246r 3                               ; automatically matches.
002246r 3  B5 00                        lda 0,x
002248r 3  15 01                        ora 1,x
00224Ar 3  D0 0B                        bne @start_search
00224Cr 3               
00224Cr 3                               ; The second string is a zero length string.  Just remove
00224Cr 3                               ; the second string and put a true flag.
00224Cr 3  E8                           inx             ; Remove u2
00224Dr 3  E8                           inx
00224Er 3  A9 FF                        lda #$FF        ; Turn addr2 into a true flag
002250r 3  95 00                        sta 0,x
002252r 3  95 01                        sta 1,x
002254r 3  4C rr rr                     jmp z_search
002257r 3               
002257r 3               @start_search:
002257r 3                               ; Put an offset (starting at zero) on the stack.
002257r 3  20 rr rr                     jsr xt_zero
00225Ar 3               
00225Ar 3               @search_loop:
00225Ar 3                               ; We stop (not found) when u2 + offset > u1
00225Ar 3                               ; Calculate u2+offset into tmp1
00225Ar 3  18                           clc
00225Br 3  B5 00                        lda 0,x
00225Dr 3  75 02                        adc 2,x
00225Fr 3  85 rr                        sta tmp1
002261r 3  B5 01                        lda 1,x
002263r 3  75 03                        adc 3,x
002265r 3               
002265r 3               
002265r 3                               ; Compare to u1. Start with the high byte
002265r 3  D5 07                        cmp 7,x
002267r 3  90 12                        bcc @init_comparison ; Obviously less
002269r 3  D0 06                        bne @not_found
00226Br 3               
00226Br 3                               ; The upper address byte matched - check the lower byte
00226Br 3                               ; Load u1 first so we can use just a carry to check.
00226Br 3  B5 06                        lda 6,x
00226Dr 3  C5 rr                        cmp tmp1
00226Fr 3  B0 0A                        bcs @init_comparison
002271r 3               
002271r 3               @not_found:
002271r 3                               ; The substring isn't in the main string.
002271r 3                               ; Return just the main string and a false flag.
002271r 3  E8                           inx             ; Remove offset
002272r 3  E8                           inx
002273r 3  E8                           inx             ; Remove u2
002274r 3  E8                           inx
002275r 3  74 00                        stz 0,x         ; Turn addr2 into a false flag
002277r 3  74 01                        stz 1,x
002279r 3  80 66                        bra z_search
00227Br 3               
00227Br 3               @init_comparison:
00227Br 3                               ; Use tmp1 to hold address in string 1.
00227Br 3                               ; Use tmp2 to hold address in string 2.
00227Br 3                               ; Use tmp3 to hold the number of characters left to check.
00227Br 3               
00227Br 3                               ; Compute the starting address in string 1
00227Br 3                               ; as addr1 + offset
00227Br 3  18                           clc
00227Cr 3  B5 08                        lda 8,x
00227Er 3  75 00                        adc 0,x
002280r 3  85 rr                        sta tmp1
002282r 3  B5 09                        lda 9,x
002284r 3  75 01                        adc 1,x
002286r 3  85 rr                        sta tmp1+1
002288r 3               
002288r 3                               ; The starting address in string 2 is just addr2.
002288r 3  B5 04                        lda 4,x
00228Ar 3  85 rr                        sta tmp2
00228Cr 3  B5 05                        lda 5,x
00228Er 3  85 rr                        sta tmp2+1
002290r 3               
002290r 3                               ; The number of characters to check is u2.
002290r 3  B5 02                        lda 2,x
002292r 3  85 rr                        sta tmp3
002294r 3  B5 03                        lda 3,x
002296r 3  85 rr                        sta tmp3+1
002298r 3               
002298r 3               @comparison_loop:
002298r 3                               ; Check to see if the current characters match.
002298r 3  B2 rr                        lda (tmp1)
00229Ar 3  D2 rr                        cmp (tmp2)
00229Cr 3  F0 05                        beq @letters_match
00229Er 3               
00229Er 3                               ; One of the letters didn't match.
00229Er 3                               ; Increment the offset and try again.
00229Er 3  20 rr rr                     jsr xt_one_plus
0022A1r 3  80 B7                        bra @search_loop
0022A3r 3               
0022A3r 3               @letters_match:
0022A3r 3                               ; The letters match.  Advance the pointers until the
0022A3r 3                               ; count reaches zero.
0022A3r 3  E6 rr                        inc tmp1
0022A5r 3  D0 02                        bne @1
0022A7r 3  E6 rr                        inc tmp1+1
0022A9r 3               @1:
0022A9r 3  E6 rr                        inc tmp2
0022ABr 3  D0 02                        bne @2
0022ADr 3  E6 rr                        inc tmp2+1
0022AFr 3               @2:
0022AFr 3                               ; Decrement the count of remaining letters to check.
0022AFr 3  A5 rr                        lda tmp3
0022B1r 3  D0 02                        bne @3
0022B3r 3  C6 rr                        dec tmp3+1
0022B5r 3               @3:
0022B5r 3  C6 rr                        dec tmp3
0022B7r 3               
0022B7r 3                               ; Check if we've reached zero.
0022B7r 3  A5 rr                        lda tmp3
0022B9r 3  05 rr                        ora tmp3+1
0022BBr 3  D0 DB                        bne @comparison_loop ; Check the next letter
0022BDr 3               
0022BDr 3                               ; We've run out of letters and they all match!
0022BDr 3                               ; Return (addr1+offset) (u1-offset) true
0022BDr 3                               ; Add offset to addr1.
0022BDr 3  18                           clc
0022BEr 3  B5 00                        lda 0,x
0022C0r 3  75 08                        adc 8,x
0022C2r 3  95 08                        sta 8,x
0022C4r 3  B5 01                        lda 1,x
0022C6r 3  75 09                        adc 9,x
0022C8r 3  95 09                        sta 9,x
0022CAr 3               
0022CAr 3                               ; Subtract offset from u1.
0022CAr 3  38                           sec
0022CBr 3  B5 06                        lda 6,x
0022CDr 3  F5 00                        sbc 0,x
0022CFr 3  95 06                        sta 6,x
0022D1r 3  B5 07                        lda 7,x
0022D3r 3  F5 01                        sbc 1,x
0022D5r 3  95 07                        sta 7,x
0022D7r 3               
0022D7r 3                               ; Replace addr2, u2, and offset with a true flag.
0022D7r 3  E8                           inx             ; drop offset
0022D8r 3  E8                           inx
0022D9r 3  E8                           inx             ; drop u2
0022DAr 3  E8                           inx
0022DBr 3  A9 FF                        lda #$FF
0022DDr 3  95 00                        sta 0,x         ; Turn addr2 into a true flag.
0022DFr 3  95 01                        sta 1,x
0022E1r 3               
0022E1r 3  60           z_search:       rts
0022E2r 3               
0022E2r 3               
0022E2r 3               
0022E2r 3               ; ## SEMICOLON ( -- ) "End compilation of new word"
0022E2r 3               ; ## ";"  auto  ANS core
0022E2r 3                       ; """https://forth-standard.org/standard/core/Semi
0022E2r 3                       ; End the compilation of a new word into the Dictionary.
0022E2r 3                       ;
0022E2r 3                       ; When we
0022E2r 3                       ; enter this, WORKWORD is pointing to the nt_ of this word in the
0022E2r 3                       ; Dictionary, DP to the previous word, and CP to the next free byte.
0022E2r 3                       ; A Forth definition would be (see "Starting Forth"):
0022E2r 3                       ; : POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE  Following the
0022E2r 3                       ; practice of Gforth, we warn here if a word has been redefined.
0022E2r 3                       ; """
0022E2r 3               
0022E2r 3               xt_semicolon:
0022E2r 3                               ; Check if this is a : word or a :NONAME word.
0022E2r 3  24 rr                        bit status
0022E4r 3  70 11                        bvs @colonword
0022E6r 3               
0022E6r 3                               ; This is a :NONAME word - just put an RTS on the end and
0022E6r 3                               ; the address (held in workword) on the stack.
0022E6r 3  A9 60                        lda #$60                ; opcode for RTS
0022E8r 3  20 rr rr                     jsr cmpl_a
0022EBr 3               
0022EBr 3  CA                           dex
0022ECr 3  CA                           dex
0022EDr 3  A5 rr                        lda workword
0022EFr 3  95 00                        sta 0,x
0022F1r 3  A5 rr                        lda workword+1
0022F3r 3  95 01                        sta 1,x
0022F5r 3  80 45                        bra @semicolon_done
0022F7r 3               
0022F7r 3               @colonword:
0022F7r 3                               ; CP is the byte that will be the address we use in the
0022F7r 3                               ; header as the end-of-compile address (z_word). This is
0022F7r 3                               ; six bytes down from the header
0022F7r 3  A0 06                        ldy #6
0022F9r 3  A5 rr                        lda cp
0022FBr 3  91 rr                        sta (workword),y
0022FDr 3  C8                           iny
0022FEr 3  A5 rr                        lda cp+1
002300r 3  91 rr                        sta (workword),y
002302r 3               
002302r 3                               ; Allocate one further byte and save the RTS instruction
002302r 3                               ; there
002302r 3  A9 60                        lda #$60                ; opcode for RTS
002304r 3  20 rr rr                     jsr cmpl_a
002307r 3               
002307r 3                               ; Before we formally add the word to the Dictionary, we
002307r 3                               ; check to see if it is already present, and if yes, we
002307r 3                               ; warn the user.
002307r 3               
002307r 3                               ; See if word already in Dictionary.
002307r 3                               ; (STATUS bit 7 will be high as CREATE already
002307r 3                               ;  checked for us.)
002307r 3  24 rr                        bit status
002309r 3  10 26                        bpl @new_word   ; Bit 7 is clear = new word
00230Br 3               
00230Br 3                               ; We start by putting the string of the
00230Br 3                               ; word we're defining on the stack
00230Br 3  CA                           dex
00230Cr 3  CA                           dex
00230Dr 3  CA                           dex
00230Er 3  CA                           dex
00230Fr 3               
00230Fr 3                               ; WORKWORD points to the beginning of the head of our new
00230Fr 3                               ; word, where the first byte is the length of the string
00230Fr 3                               ; We can't use LATESTNT because we haven't added the new
00230Fr 3                               ; word to the Dictionary yet
00230Fr 3  B2 rr                        lda (workword)
002311r 3  95 00                        sta 0,x
002313r 3  74 01                        stz 1,x
002315r 3               
002315r 3                               ; Eight bytes below WORKWORD is the actual beginning of
002315r 3                               ; the string
002315r 3  A5 rr                        lda workword
002317r 3  18                           clc
002318r 3  69 08                        adc #8
00231Ar 3  95 02                        sta 2,x
00231Cr 3  A5 rr                        lda workword+1
00231Er 3  69 00                        adc #0                  ; only want carry
002320r 3  95 03                        sta 3,x
002322r 3               
002322r 3                               ; This word is already in the Dictionary, so we print a
002322r 3                               ; warning to the user.
002322r 3  A9 02                        lda #str_redefined       ; address of string "redefined"
002324r 3  20 rr rr                     jsr print_string_no_lf
002327r 3               
002327r 3                               ; Now we print the offending word.
002327r 3  20 rr rr                     jsr xt_type
00232Ar 3  20 rr rr                     jsr xt_space
00232Dr 3               
00232Dr 3                               ; Clear bit 7 of status (so future words will print message
00232Dr 3                               ; by defaut)
00232Dr 3  A9 80                        lda #%10000000
00232Fr 3  14 rr                        trb status
002331r 3               
002331r 3               @new_word:
002331r 3                               ; Let's get this over with. Save beginning of our word
002331r 3                               ; as new last word in the Dictionary
002331r 3  A5 rr                        lda workword
002333r 3  85 rr                        sta dp
002335r 3  A5 rr                        lda workword+1
002337r 3  85 rr                        sta dp+1
002339r 3  20 rr rr                     jsr dp_to_current       ; Save the updated DP to the
00233Cr 3                                                       ; CURRENT wordlist.
00233Cr 3               @semicolon_done:
00233Cr 3                               ; Word definition complete. Return compile flag to zero
00233Cr 3                               ; to return to interpret mode
00233Cr 3  64 rr                        stz state
00233Er 3  64 rr                        stz state+1
002340r 3               
002340r 3  60           z_semicolon:    rts
002341r 3               
002341r 3               
002341r 3               
002341r 3               ; ## SIGN ( n -- ) "Add minus to pictured output"
002341r 3               ; ## "sign"  auto  ANS core
002341r 3                       ; """https://forth-standard.org/standard/core/SIGN
002341r 3                       ;
002341r 3                       ; Code based on
002341r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
002341r 3                       ; Original Forth code is   0< IF ASCII - HOLD THEN
002341r 3                       ; """
002341r 3               
002341r 3               xt_sign:
002341r 3  20 rr rr                     jsr underflow_1
002344r 3               
002344r 3  B5 01                        lda 1,x         ; check MSB of TOS
002346r 3  30 04                        bmi @minus
002348r 3               
002348r 3  E8                           inx
002349r 3  E8                           inx
00234Ar 3  80 09                        bra @done
00234Cr 3               @minus:
00234Cr 3  A9 2D                        lda #$2D        ; ASCII for "-"
00234Er 3  95 00                        sta 0,x         ; overwrite TOS
002350r 3  74 01                        stz 1,x         ; paranoid
002352r 3               
002352r 3  20 rr rr                     jsr xt_hold
002355r 3               @done:
002355r 3  60           z_sign:         rts
002356r 3               
002356r 3               
002356r 3               
002356r 3               ; ## SLASH ( n1 n2 -- n ) "Divide NOS by TOS"
002356r 3               ; ## "/"  auto  ANS core
002356r 3                       ; """https://forth-standard.org/standard/core/Div
002356r 3                       ;
002356r 3                       ; Forth code is either  >R S>D R> FM/MOD SWAP DROP
002356r 3                       ; or >R S>D R> SM/REM SWAP DROP -- we use SM/REM in Tali Forth.
002356r 3                       ; This code is currently unoptimized. This code without the SLASH
002356r 3                       ; DROP at the end is /MOD, so we share the code as far as possible.
002356r 3                       ; """
002356r 3               
002356r 3               xt_slash:
002356r 3                               ; With all the multiplication going on, it would be hard to
002356r 3                               ; make sure that one of our temporary variables is not
002356r 3                               ; overwritten. We make sure that doesn't happen by taking the
002356r 3                               ; hit of pushing the flag to the 65c02's stack
002356r 3  A9 00                        lda #0
002358r 3  48                           pha
002359r 3  80 03                        bra _common
00235Br 3               
00235Br 3               xt_slash_mod:
00235Br 3                               ; Note that /MOD accesses this code
00235Br 3  A9 FF                        lda #$FF
00235Dr 3  48                           pha             ; falls through to _common
00235Er 3               
00235Er 3               _common:
00235Er 3  20 rr rr                     jsr xt_to_r             ; >R
002361r 3  20 rr rr                     jsr xt_s_to_d           ; S>D
002364r 3  20 rr rr                     jsr xt_r_from           ; R>
002367r 3  20 rr rr                     jsr xt_sm_slash_rem     ; SM/REM
00236Ar 3               
00236Ar 3                               ; Get the flag back from the 65c02's stack. Zero is SLASH,
00236Ar 3                               ; $FF is SLASH MOD
00236Ar 3  68                           pla
00236Br 3  D0 05                        bne @done
00236Dr 3               
00236Dr 3                               ; The following code is for SLASH only
00236Dr 3  20 rr rr                     jsr xt_swap
002370r 3  E8                           inx             ; DROP
002371r 3  E8                           inx
002372r 3               @done:
002372r 3               z_slash_mod:
002372r 3  60           z_slash:        rts
002373r 3               
002373r 3               
002373r 3               
002373r 3               ; ## SLASH_MOD ( n1 n2 -- n3 n4 ) "Divide NOS by TOS with a remainder"
002373r 3               ; ## "/mod"  auto  ANS core
002373r 3                       ; """https://forth-standard.org/standard/core/DivMOD
002373r 3                       ;
002373r 3                       ; This is a dummy entry, the actual code is shared with SLASH
002373r 3                       ; """
002373r 3               
002373r 3               
002373r 3               ; ## SLASH_STRING ( addr u n -- addr u ) "Shorten string by n"
002373r 3               ; ## "/string"  auto  ANS string
002373r 3                       ; """https://forth-standard.org/standard/string/DivSTRING
002373r 3                       ;
002373r 3                       ; Forth code is
002373r 3                       ; : /STRING ( ADDR U N -- ADDR U ) ROT OVER + ROT ROT - ;
002373r 3                       ; Put differently, we need to add TOS and 3OS, and subtract
002373r 3                       ; TOS from NOS, and then drop TOS
002373r 3                       ; """
002373r 3               
002373r 3               xt_slash_string:
002373r 3  20 rr rr                     jsr underflow_3
002376r 3               
002376r 3  18                           clc             ; 3OS+TOS
002377r 3  B5 00                        lda 0,x
002379r 3  75 04                        adc 4,x
00237Br 3  95 04                        sta 4,x
00237Dr 3               
00237Dr 3  B5 01                        lda 1,x
00237Fr 3  75 05                        adc 5,x
002381r 3  95 05                        sta 5,x
002383r 3               
002383r 3  38                           sec             ; NOS-TOS
002384r 3  B5 02                        lda 2,x
002386r 3  F5 00                        sbc 0,x
002388r 3  95 02                        sta 2,x
00238Ar 3               
00238Ar 3  B5 03                        lda 3,x
00238Cr 3  F5 01                        sbc 1,x
00238Er 3  95 03                        sta 3,x
002390r 3               
002390r 3  E8                           inx
002391r 3  E8                           inx
002392r 3               
002392r 3  60           z_slash_string: rts
002393r 3               
002393r 3               
002393r 3               
002393r 3               ; ## SLITERAL ( addr u -- )( -- addr u ) "Compile a string for runtime"
002393r 3               ; ## "sliteral" auto  ANS string
002393r 3                       ; """https://forth-standard.org/standard/string/SLITERAL
002393r 3                       ; Add the runtime for an existing string.
002393r 3                       ; """
002393r 3               
002393r 3               xt_sliteral:
002393r 3  20 rr rr                     jsr underflow_2
002396r 3               
002396r 3                               ; We can't assume that ( addr u ) of the current string is in
002396r 3                               ; a stable area (eg. already in the dictionary.) Copy the
002396r 3                               ; string data into the dictionary using move.
002396r 3               
002396r 3                               ; Put a jmp over the string data with address to be filled
002396r 3                               ; in later.
002396r 3  A9 4C                        lda #$4C
002398r 3  20 rr rr                     jsr cmpl_a
00239Br 3               
00239Br 3                               ; Address to be filled in later.
00239Br 3  20 rr rr                     jsr cmpl_a
00239Er 3  20 rr rr                     jsr cmpl_a
0023A1r 3               
0023A1r 3                               ; Turn the data stack from ( addr u ) into
0023A1r 3                               ; ( here u addr here u ) so move can be called with
0023A1r 3                               ; the remaining items on the stack ready for processing.
0023A1r 3                               ; Reserve three extra words on the stack.
0023A1r 3  8A                           txa
0023A2r 3  38                           sec
0023A3r 3  E9 06                        sbc #6
0023A5r 3  AA                           tax
0023A6r 3               
0023A6r 3                               ; Move addr down from TOS-4 to TOS-2
0023A6r 3  B5 08                        lda 8,x
0023A8r 3  95 04                        sta 4,x
0023AAr 3  B5 09                        lda 9,x
0023ACr 3  95 05                        sta 5,x
0023AEr 3               
0023AEr 3                               ; Copy u from TOS-3 to TOS
0023AEr 3  B5 06                        lda 6,x
0023B0r 3  95 00                        sta 0,x
0023B2r 3  B5 07                        lda 7,x
0023B4r 3  95 01                        sta 1,x
0023B6r 3               
0023B6r 3                               ; Put HERE into TOS-1 and TOS-4
0023B6r 3  A5 rr                        lda cp
0023B8r 3  95 08                        sta 8,x
0023BAr 3  95 02                        sta 2,x
0023BCr 3  A5 rr                        lda cp+1
0023BEr 3  95 09                        sta 9,x
0023C0r 3  95 03                        sta 3,x
0023C2r 3               
0023C2r 3                               ; Copy the string into the dictionary.
0023C2r 3  20 rr rr                     jsr xt_move
0023C5r 3               
0023C5r 3                               ; Update cp.
0023C5r 3  18                           clc
0023C6r 3  A5 rr                        lda cp
0023C8r 3  75 00                        adc 0,x
0023CAr 3  85 rr                        sta cp
0023CCr 3  A5 rr                        lda cp+1
0023CEr 3  75 01                        adc 1,x
0023D0r 3  85 rr                        sta cp+1
0023D2r 3               
0023D2r 3                               ; Update the address of the jump-over jmp instruction.
0023D2r 3                               ; First determine location of jmp instructions address.
0023D2r 3                               ; It should be 2 bytes before the start of the string.
0023D2r 3               
0023D2r 3                               ; Compute it into tmp1, which is no longer being used.
0023D2r 3  B5 02                        lda 2,x
0023D4r 3  38                           sec
0023D5r 3  E9 02                        sbc #2
0023D7r 3  85 rr                        sta tmp1
0023D9r 3  B5 03                        lda 3,x
0023DBr 3  E9 00                        sbc #0          ; Propagate borrow
0023DDr 3  85 rr                        sta tmp1+1
0023DFr 3               
0023DFr 3                               ; Update the address of the jump to HERE.
0023DFr 3  A5 rr                        lda cp
0023E1r 3  92 rr                        sta (tmp1)
0023E3r 3  A0 01                        ldy #1
0023E5r 3  A5 rr                        lda cp+1
0023E7r 3  91 rr                        sta (tmp1),y
0023E9r 3               
0023E9r 3                               ; Stack is now ( addr2 u ) where addr2 is the new
0023E9r 3                               ; location in the dictionary.
0023E9r 3               
0023E9r 3               sliteral_const_str:
0023E9r 3                               ; Compile a subroutine jump to the runtime of SLITERAL that
0023E9r 3                               ; pushes the new ( addr u ) pair to the Data Stack.
0023E9r 3                               ; When we're done, the code will look like this:
0023E9r 3               
0023E9r 3                               ; xt -->    jmp a
0023E9r 3                               ;           <string data bytes>
0023E9r 3                               ;  a -->    jsr sliteral_runtime
0023E9r 3                               ;           <string address>
0023E9r 3                               ;           <string length>
0023E9r 3                               ; rts -->
0023E9r 3               
0023E9r 3                               ; This means we'll have to adjust the return address for two
0023E9r 3                               ; cells, not just one
0023E9r 3  A0 rr                        ldy #>sliteral_runtime
0023EBr 3  A9 rr                        lda #<sliteral_runtime
0023EDr 3  20 rr rr                     jsr cmpl_subroutine
0023F0r 3               
0023F0r 3                               ; We want to have the address end up as NOS and the length
0023F0r 3                               ; as TOS, so we store the address first
0023F0r 3  B4 03                        ldy 3,x                ; address MSB
0023F2r 3  B5 02                        lda 2,x                ; address LSB
0023F4r 3  20 rr rr                     jsr cmpl_word
0023F7r 3               
0023F7r 3  B4 01                        ldy 1,x                ; length MSB
0023F9r 3  B5 00                        lda 0,x                ; length LSB
0023FBr 3  20 rr rr                     jsr cmpl_word
0023FEr 3               
0023FEr 3                               ; clean up and leave
0023FEr 3  E8                           inx
0023FFr 3  E8                           inx
002400r 3  E8                           inx
002401r 3  E8                           inx
002402r 3               
002402r 3  60           z_sliteral:     rts
002403r 3               
002403r 3               
002403r 3               sliteral_runtime:
002403r 3               
002403r 3                       ; """Run time behaviour of SLITERAL: Push ( addr u ) of string to
002403r 3                       ; the Data Stack. We arrive here with the return address as the
002403r 3                       ; top of Return Stack, which points to the address of the string
002403r 3                       ; """
002403r 3  CA                           dex
002404r 3  CA                           dex
002405r 3  CA                           dex
002406r 3  CA                           dex
002407r 3               
002407r 3                               ; Get the address of the string address off the stack and
002407r 3                               ; increase by one because of the RTS mechanics
002407r 3  68                           pla
002408r 3  85 rr                        sta tmp1        ; LSB of address
00240Ar 3  68                           pla
00240Br 3  85 rr                        sta tmp1+1      ; MSB of address
00240Dr 3               
00240Dr 3                               ; Walk through both and save them
00240Dr 3  A0 01                        ldy #1          ; adjust for JSR/RTS mechanics on 65c02
00240Fr 3  B1 rr                        lda (tmp1),y
002411r 3  95 02                        sta 2,x         ; LSB of address
002413r 3  C8                           iny
002414r 3               
002414r 3  B1 rr                        lda (tmp1),y
002416r 3  95 03                        sta 3,x         ; MSB of address
002418r 3  C8                           iny
002419r 3               
002419r 3  B1 rr                        lda (tmp1),y
00241Br 3  95 00                        sta 0,x         ; LSB of length
00241Dr 3  C8                           iny
00241Er 3               
00241Er 3  B1 rr                        lda (tmp1),y
002420r 3  95 01                        sta 1,x         ; MSB of length
002422r 3               
002422r 3                               ; restore return address
002422r 3  18                           clc
002423r 3  A5 rr                        lda tmp1
002425r 3  69 04                        adc #4
002427r 3  A8                           tay             ; LSB
002428r 3  A5 rr                        lda tmp1+1
00242Ar 3  69 00                        adc #0          ; we only need carry
00242Cr 3  48                           pha             ; MSB
00242Dr 3  5A                           phy
00242Er 3               
00242Er 3  60                           rts
00242Fr 3               
00242Fr 3               
00242Fr 3               
00242Fr 3               ; ## SM_SLASH_REM ( d n1 -- n2 n3 ) "Symmetic signed division"
00242Fr 3               ; ## "sm/rem"  auto  ANS core
00242Fr 3                       ; """https://forth-standard.org/standard/core/SMDivREM
00242Fr 3                       ; Symmetic signed division. Compare FM/MOD. Based on F-PC 3.6
00242Fr 3                       ; by Ulrich Hoffmann. See http://www.xlerb.de/uho/ansi.seq
00242Fr 3                       ;
00242Fr 3                       ; Forth:
00242Fr 3                       ; OVER >R 2DUP XOR 0< >R ABS >R DABS R> UM/MOD R> ?NEGATE SWAP
00242Fr 3                       ; R> ?NEGATE SWAP
00242Fr 3                       ; """
00242Fr 3               
00242Fr 3               xt_sm_slash_rem:
00242Fr 3  20 rr rr                     jsr underflow_3 ; contains double number
002432r 3               
002432r 3                               ; push MSB of high cell of d to Data Stack so we can check
002432r 3                               ; its sign later
002432r 3  B5 03                        lda 3,x
002434r 3  48                           pha
002435r 3               
002435r 3                               ; XOR the MSB of the high cell of d and n1 so we figure out
002435r 3                               ; its sign later as well
002435r 3  B5 01                        lda 1,x
002437r 3  55 03                        eor 3,x
002439r 3  48                           pha
00243Ar 3               
00243Ar 3                               ; Prepare division by getting absolute of n1 and d
00243Ar 3  20 rr rr                     jsr xt_abs
00243Dr 3  E8                           inx             ; pretend we pushed n1 to R
00243Er 3  E8                           inx
00243Fr 3               
00243Fr 3  20 rr rr                     jsr xt_dabs
002442r 3  CA                           dex
002443r 3  CA                           dex
002444r 3               
002444r 3  20 rr rr                     jsr xt_um_slash_mod     ; UM/MOD
002447r 3               
002447r 3                               ; if the XOR compiled above is negative, negate the
002447r 3                               ; quotient (n3)
002447r 3  68                           pla
002448r 3  10 03                        bpl @1
00244Ar 3  20 rr rr                     jsr xt_negate
00244Dr 3               @1:
00244Dr 3                               ; if d was negative, negate the remainder (n2)
00244Dr 3  68                           pla
00244Er 3  10 07                        bpl @done
002450r 3               
002450r 3  E8                           inx             ; pretend we pushed quotient to R
002451r 3  E8                           inx
002452r 3  20 rr rr                     jsr xt_negate
002455r 3  CA                           dex
002456r 3  CA                           dex
002457r 3               
002457r 3               @done:
002457r 3  60           z_sm_slash_rem: rts
002458r 3               
002458r 3               
002458r 3               
002458r 3               ; ## SOURCE ( -- addr u ) "Return location and size of input buffer""
002458r 3               ; ## "source"  auto  ANS core
002458r 3                       ; """https://forth-standard.org/standard/core/SOURCE"""
002458r 3               xt_source:
002458r 3                               ; add address
002458r 3  CA                           dex
002459r 3  CA                           dex
00245Ar 3  A5 rr                        lda cib
00245Cr 3  95 00                        sta 0,x
00245Er 3  A5 rr                        lda cib+1
002460r 3  95 01                        sta 1,x
002462r 3               
002462r 3                               ; add size
002462r 3  CA                           dex
002463r 3  CA                           dex
002464r 3  A5 rr                        lda ciblen
002466r 3  95 00                        sta 0,x
002468r 3  A5 rr                        lda ciblen+1
00246Ar 3  95 01                        sta 1,x
00246Cr 3               
00246Cr 3  60           z_source:       rts
00246Dr 3               
00246Dr 3               
00246Dr 3               ; ## SOURCE_ID ( -- n ) "Return source identifier"
00246Dr 3               ; ## "source-id"  tested  ANS core ext
00246Dr 3                       ; """https://forth-standard.org/standard/core/SOURCE-ID Identify the
00246Dr 3                       ; input source unless it is a block (s. Conklin & Rather p. 156). This
00246Dr 3                       ; will give the input source: 0 is keyboard, -1 ($FFFF) is character
00246Dr 3                       ; string, and a text file gives the fileid.
00246Dr 3                       ; """
00246Dr 3               xt_source_id:
00246Dr 3  CA                           dex
00246Er 3  CA                           dex
00246Fr 3               
00246Fr 3  A5 rr                        lda insrc
002471r 3  95 00                        sta 0,x
002473r 3  A5 rr                        lda insrc+1
002475r 3  95 01                        sta 1,x
002477r 3               
002477r 3  60           z_source_id:    rts
002478r 3               
002478r 3               
002478r 3               ; ## SPACE ( -- ) "Print a single space"
002478r 3               ; ## "space"  auto  ANS core
002478r 3                       ; """https://forth-standard.org/standard/core/SPACE"""
002478r 3               xt_space:
002478r 3  A9 20                        lda #AscSP
00247Ar 3  20 rr rr                     jsr emit_a
00247Dr 3               
00247Dr 3  60           z_space:        rts
00247Er 3               
00247Er 3               
00247Er 3               ; ## SPACES ( u -- ) "Print a number of spaces"
00247Er 3               ; ## "spaces"  auto  ANS core
00247Er 3                       ; """https://forth-standard.org/standard/core/SPACES"""
00247Er 3               
00247Er 3               xt_spaces:
00247Er 3  20 rr rr                     jsr underflow_1
002481r 3               
002481r 3                               ; catch any zero in TOS fast
002481r 3  B5 00                        lda 0,x
002483r 3  15 01                        ora 1,x
002485r 3  F0 2A                        beq @done
002487r 3               
002487r 3                               ; Usually we're only going to print far less than 256 spaces,
002487r 3                               ; so we create a quick loop for that. Short loop could be realized
002487r 3                               ; as a separate subroutine, but unless we're really pressed for
002487r 3                               ; memory at some point, this is faster
002487r 3  B4 01                        ldy 1,x
002489r 3  D0 0C                        bne @lots_of_spaces
00248Br 3               
00248Br 3  B4 00                        ldy 0,x
00248Dr 3               @quick_loop:
00248Dr 3                               ; we reach here knowing that there must be a number that is not
00248Dr 3                               ; zero in the TOS
00248Dr 3  A9 20                        lda #AscSP
00248Fr 3  20 rr rr                     jsr emit_a
002492r 3  88                           dey
002493r 3  F0 1C                        beq @done
002495r 3  80 F6                        bra @quick_loop
002497r 3               
002497r 3               @lots_of_spaces:
002497r 3                               ; We go through the first loop once to get rid of the lower
002497r 3                               ; counter byte. This could be zero
002497r 3  B4 00                        ldy 0,x
002499r 3               
002499r 3               @first_slow_loop:
002499r 3  F0 08                        beq @slow_outer_loop
00249Br 3  A9 20                        lda #AscSP
00249Dr 3  20 rr rr                     jsr emit_a
0024A0r 3  88                           dey
0024A1r 3  80 F6                        bra @first_slow_loop
0024A3r 3               
0024A3r 3               @slow_outer_loop:
0024A3r 3                               ; we arrive here knowing that the MSB of TOS cannot be a zero
0024A3r 3  A0 00                        ldy #00
0024A5r 3               
0024A5r 3               @slow_inner_loop:
0024A5r 3  A9 20                        lda #AscSP
0024A7r 3  20 rr rr                     jsr emit_a
0024AAr 3  88                           dey
0024ABr 3  D0 F8                        bne @slow_inner_loop
0024ADr 3               
0024ADr 3  D6 01                        dec 1,x
0024AFr 3  D0 F2                        bne @slow_outer_loop
0024B1r 3               
0024B1r 3               @done:
0024B1r 3  E8                           inx             ; drop
0024B2r 3  E8                           inx
0024B3r 3               
0024B3r 3  60           z_spaces:       rts
0024B4r 3               
0024B4r 3               
0024B4r 3               
0024B4r 3               ; ## STAR ( n n -- n ) "16*16 --> 16 "
0024B4r 3               ; ## "*"  auto  ANS core
0024B4r 3                       ; """https://forth-standard.org/standard/core/Times
0024B4r 3                       ; Multiply two signed 16 bit numbers, returning a 16 bit result.
0024B4r 3                       ;
0024B4r 3                       ; This is nothing  more than UM* DROP
0024B4r 3                       ; """
0024B4r 3               
0024B4r 3               xt_star:
0024B4r 3  20 rr rr                     jsr underflow_2
0024B7r 3               
0024B7r 3  20 rr rr                     jsr xt_um_star
0024BAr 3  E8                           inx
0024BBr 3  E8                           inx
0024BCr 3               
0024BCr 3  60           z_star:         rts
0024BDr 3               
0024BDr 3               
0024BDr 3               
0024BDr 3               ; ## STAR_SLASH  ( n1 n2 n3 -- n4 ) "n1 * n2 / n3 -->  n"
0024BDr 3               ; ## "*/"  auto  ANS core
0024BDr 3                       ; """https://forth-standard.org/standard/core/TimesDiv
0024BDr 3                       ; Multiply n1 by n2 and divide by n3, returning the result
0024BDr 3                       ; without a remainder. This is */MOD without the mod.
0024BDr 3                       ;
0024BDr 3                       ; This word
0024BDr 3                       ; can be defined in Forth as : */  */MOD SWAP DROP ; which is
0024BDr 3                       ; pretty much what we do here
0024BDr 3                       ; """
0024BDr 3               xt_star_slash:
0024BDr 3                               ; We let */MOD check for underflow
0024BDr 3  20 rr rr                     jsr xt_star_slash_mod
0024C0r 3  20 rr rr                     jsr xt_swap
0024C3r 3  E8                           inx
0024C4r 3  E8                           inx
0024C5r 3               z_star_slash:
0024C5r 3  60                           rts
0024C6r 3               
0024C6r 3               
0024C6r 3               ; ## STAR_SLASH_MOD  ( n1 n2 n3 -- n4 n5 ) "n1 * n2 / n3 --> n-mod n"
0024C6r 3               ; ## "*/mod"  auto  ANS core
0024C6r 3                       ; """https://forth-standard.org/standard/core/TimesDivMOD
0024C6r 3                       ; Multiply n1 by n2 producing the intermediate double-cell result d.
0024C6r 3                       ; Divide d by n3 producing the single-cell remainder n4 and the
0024C6r 3                       ; single-cell quotient n5.
0024C6r 3                       ;
0024C6r 3                       ; In Forth, this is
0024C6r 3                       ; : */MOD  >R M* >R SM/REM ;  Note that */ accesses this routine.
0024C6r 3                       ; """
0024C6r 3               xt_star_slash_mod:
0024C6r 3  20 rr rr                     jsr underflow_3
0024C9r 3               
0024C9r 3  20 rr rr                     jsr xt_to_r
0024CCr 3  20 rr rr                     jsr xt_m_star
0024CFr 3  20 rr rr                     jsr xt_r_from
0024D2r 3  20 rr rr                     jsr xt_sm_slash_rem
0024D5r 3               
0024D5r 3               z_star_slash_mod:
0024D5r 3  60                           rts
0024D6r 3               
0024D6r 3               
0024D6r 3               ; ## STATE ( -- addr ) "Return the address of compilation state flag"
0024D6r 3               ; ## "state"  auto  ANS core
0024D6r 3                       ; """https://forth-standard.org/standard/core/STATE
0024D6r 3                       ; STATE is true when in compilation state, false otherwise. Note
0024D6r 3                       ; we do not return the state itself, but only the address where
0024D6r 3                       ; it lives. The state should not be changed directly by the user; see
0024D6r 3                       ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
0024D6r 3                       ; """
0024D6r 3               xt_state:
0024D6r 3  CA                           dex
0024D7r 3  CA                           dex
0024D8r 3  A9 rr                        lda #<state
0024DAr 3  95 00                        sta 0,x
0024DCr 3  A9 rr                        lda #>state
0024DEr 3  95 01                        sta 1,x
0024E0r 3               
0024E0r 3  60           z_state:        rts
0024E1r 3               
0024E1r 3               
0024E1r 3               ; ## STORE ( n addr -- ) "Store TOS in memory"
0024E1r 3               ; ## "!"  auto  ANS core
0024E1r 3                       ; """https://forth-standard.org/standard/core/Store"""
0024E1r 3               xt_store:
0024E1r 3  20 rr rr                     jsr underflow_2
0024E4r 3               
0024E4r 3  B5 02                        lda 2,x         ; LSB
0024E6r 3  81 00                        sta (0,x)
0024E8r 3               
0024E8r 3  F6 00                        inc 0,x
0024EAr 3  D0 02                        bne @1
0024ECr 3  F6 01                        inc 1,x
0024EEr 3               @1:
0024EEr 3  B5 03                        lda 3,x         ; MSB
0024F0r 3  81 00                        sta (0,x)
0024F2r 3               
0024F2r 3  E8                           inx             ; 2DROP
0024F3r 3  E8                           inx
0024F4r 3  E8                           inx
0024F5r 3  E8                           inx
0024F6r 3               
0024F6r 3  60           z_store:        rts
0024F7r 3               
0024F7r 3               
0024F7r 3               ; ## STRIP_UNDERFLOW ( -- addr ) "Return address where underflow status is kept"
0024F7r 3               ; ## "strip-underflow"  tested  Tali Forth
0024F7r 3                       ; """`STRIP-UNDERFLOW` is a flag variable that determines if underflow
0024F7r 3                       ; checking should be removed during the compilation of new words.
0024F7r 3                       ; Default is false.
0024F7r 3                       ; """
0024F7r 3               xt_strip_underflow:
0024F7r 3  CA                           dex
0024F8r 3  CA                           dex
0024F9r 3               
0024F9r 3  A9 rr                        lda #<uf_strip
0024FBr 3  95 00                        sta 0,x
0024FDr 3  A9 rr                        lda #>uf_strip
0024FFr 3  95 01                        sta 1,x
002501r 3               
002501r 3               z_strip_underflow:
002501r 3  60                           rts
002502r 3               
002502r 3               
002502r 3               ; ## SWAP ( b a -- a b ) "Exchange TOS and NOS"
002502r 3               ; ## "swap"  auto  ANS core
002502r 3                       ; """https://forth-standard.org/standard/core/SWAP"""
002502r 3               xt_swap:
002502r 3  20 rr rr                     jsr underflow_2
002505r 3               
002505r 3  B5 00                        lda 0,x         ; LSB
002507r 3  B4 02                        ldy 2,x
002509r 3  95 02                        sta 2,x
00250Br 3  94 00                        sty 0,x
00250Dr 3               
00250Dr 3  B5 01                        lda 1,x         ; MSB
00250Fr 3  B4 03                        ldy 3,x
002511r 3  95 03                        sta 3,x
002513r 3  94 01                        sty 1,x
002515r 3               
002515r 3  60           z_swap:         rts
002516r 3               
002516r 3               
002516r 3               ; ## THEN (C: orig -- ) ( -- ) "Conditional flow control"
002516r 3               ; ## "then"  auto  ANS core
002516r 3                       ; """http://forth-standard.org/standard/core/THEN"""
002516r 3               xt_then:
002516r 3                               ; Get the address to jump to.
002516r 3  20 rr rr                     jsr xt_here
002519r 3               
002519r 3                               ; Stuff HERE in for the branch address back
002519r 3                               ; at the IF or ELSE (origination address is on stack).
002519r 3  20 rr rr                     jsr xt_swap
00251Cr 3  20 rr rr                     jsr xt_store
00251Fr 3               
00251Fr 3  60           z_then:         rts
002520r 3               
002520r 3               
002520r 3               ; ## THRU ( scr# scr# -- ) "Load screens in the given range"
002520r 3               ; ## "thru"  tested  ANS block ext
002520r 3                       ; """https://forth-standard.org/standard/block/THRU"""
002520r 3               
002520r 3               xt_thru:
002520r 3  20 rr rr                     jsr underflow_2
002523r 3               
002523r 3                               ; We need to loop here, and can't use the data stack
002523r 3                               ; because the LOADed screens might use it.  We'll
002523r 3                               ; need to use the same trick that DO loops use, holding
002523r 3                               ; the limit and current index on the return stack.
002523r 3               
002523r 3                               ; Put the ending screen number on the return stack
002523r 3  B5 01                        lda 1,x
002525r 3  48                           pha
002526r 3  B5 00                        lda 0,x
002528r 3  48                           pha
002529r 3  E8                           inx
00252Ar 3  E8                           inx
00252Br 3               @thru_loop:
00252Br 3                               ; Put the starting screen number on the stack,
00252Br 3                               ; but keep a copy
00252Br 3  B5 01                        lda 1,x
00252Dr 3  48                           pha
00252Er 3  B5 00                        lda 0,x
002530r 3  48                           pha
002531r 3               
002531r 3                               ; Load this screen.
002531r 3  20 rr rr                     jsr xt_load
002534r 3               
002534r 3                               ; Get the number and limit back off the stack.  Rather than
002534r 3                               ; waste time making room on the stack, just use tmp1 and tmp2.
002534r 3               
002534r 3                               ; Get the screen we just loaded.
002534r 3  68                           pla
002535r 3  85 rr                        sta tmp1
002537r 3  68                           pla
002538r 3  85 rr                        sta tmp1+1
00253Ar 3               
00253Ar 3                               ; Get the ending screen.
00253Ar 3  68                           pla
00253Br 3  85 rr                        sta tmp2
00253Dr 3  68                           pla
00253Er 3  85 rr                        sta tmp2+1
002540r 3               
002540r 3                               ; See if we just loaded the last screen.
002540r 3                               ; A already has the MSB of the last screen in it.
002540r 3  C5 rr                        cmp tmp1+1
002542r 3  D0 08                        bne @next_screen
002544r 3  A5 rr                        lda tmp2        ; Compare the LSB
002546r 3  C5 rr                        cmp tmp1
002548r 3  D0 02                        bne @next_screen
00254Ar 3  80 18                        bra @done       ; We just did the last screen.
00254Cr 3               
00254Cr 3               @next_screen:
00254Cr 3                               ; Put the ending screen back on the data stack.
00254Cr 3  A5 rr                        lda tmp2+1
00254Er 3  48                           pha
00254Fr 3  A5 rr                        lda tmp2
002551r 3  48                           pha
002552r 3               
002552r 3                               ; Increment the current screen.
002552r 3  E6 rr                        inc tmp1
002554r 3  D0 02                        bne @1
002556r 3  E6 rr                        inc tmp1+1
002558r 3               @1:
002558r 3                               ; Put the current screen on the stack to prepare for
002558r 3                               ; the next loop.
002558r 3  CA                           dex
002559r 3  CA                           dex
00255Ar 3  A5 rr                        lda tmp1
00255Cr 3  95 00                        sta 0,x
00255Er 3  A5 rr                        lda tmp1+1
002560r 3  95 01                        sta 1,x
002562r 3  80 C7                        bra @thru_loop
002564r 3               @done:
002564r 3  60           z_thru:         rts
002565r 3               
002565r 3               
002565r 3               
002565r 3               ; ## TICK ( "name" -- xt ) "Return a word's execution token (xt)"
002565r 3               ; ## "'"  auto  ANS core
002565r 3                       ; """https://forth-standard.org/standard/core/Tick"""
002565r 3               
002565r 3               xt_tick:
002565r 3  20 rr rr                     jsr xt_parse_name       ; ( -- addr u )
002568r 3               
002568r 3                               ; if we got a zero, there was a problem getting the
002568r 3                               ; name of the word
002568r 3  B5 00                        lda 0,x
00256Ar 3  15 01                        ora 1,x
00256Cr 3  D0 05                        bne @1
00256Er 3               
00256Er 3  A9 05                        lda #err_noname
002570r 3  4C rr rr                     jmp error
002573r 3               @1:
002573r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt )
002576r 3               
002576r 3                               ; If we didn't find the word in the Dictionary, abort
002576r 3  B5 00                        lda 0,x
002578r 3  15 01                        ora 1,x
00257Ar 3  D0 05                        bne @2
00257Cr 3               
00257Cr 3  A9 08                        lda #err_syntax
00257Er 3  4C rr rr                     jmp error
002581r 3               @2:
002581r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt -- xt )
002584r 3               
002584r 3  60           z_tick:         rts
002585r 3               
002585r 3               
002585r 3               
002585r 3               ; ## TO ( n "name" -- ) or ( "name") "Change a value"
002585r 3               ; ## "to"  auto  ANS core ext
002585r 3                       ; """https://forth-standard.org/standard/core/TO
002585r 3                       ; Gives a new value to a, uh, VALUE.
002585r 3                       ;
002585r 3                       ; One possible Forth
002585r 3                       ; implementation is  ' >BODY !  but given the problems we have
002585r 3                       ; with >BODY on STC Forths, we do this the hard way. Since
002585r 3                       ; Tali Forth uses the same code for CONSTANTs and VALUEs, you
002585r 3                       ; could use this to redefine a CONSTANT, but that is a no-no.
002585r 3                       ;
002585r 3                       ; Note that the standard has different behaviors for TO depending
002585r 3                       ; on the state (https://forth-standard.org/standard/core/TO).
002585r 3                       ; This makes TO state-dependent (which is bad) and also rather
002585r 3                       ; complex (see the Gforth implementation for comparison). This
002585r 3                       ; word may not be natively compiled and must be immediate. Frankly,
002585r 3                       ; it would have made more sense to have two words for this.
002585r 3                       ; """
002585r 3               
002585r 3               xt_to:
002585r 3                               ; One way or the other, we need the xt of the word after this
002585r 3                               ; one. At this point, we don't know if we are interpreted or
002585r 3                               ; compile, so we don't know if there is a value n on the stack,
002585r 3                               ; so we can't do an underflow check yet
002585r 3  20 rr rr                     jsr xt_tick             ; ( [n] xt )
002588r 3               
002588r 3                               ; The PFA (DFA in this case) is three bytes down,
002588r 3                               ; after the jump to DOCONST
002588r 3  B5 00                        lda 0,x                 ; LSB
00258Ar 3  18                           clc
00258Br 3  69 03                        adc #3
00258Dr 3  85 rr                        sta tmp1
00258Fr 3  B5 01                        lda 1,x                 ; MSB
002591r 3  69 00                        adc #0                  ; we just want the carry
002593r 3  85 rr                        sta tmp1+1
002595r 3               
002595r 3  E8                           inx
002596r 3  E8                           inx                     ; ( [n] )
002597r 3               
002597r 3                               ; Now it gets ugly. See which state we are in
002597r 3  A5 rr                        lda state
002599r 3  05 rr                        ora state+1
00259Br 3  F0 34                        beq @interpret
00259Dr 3               
00259Dr 3                               ; Well, we're compiling. We want to end up with simple
00259Dr 3                               ; code that just takes the number that is TOS and saves
00259Dr 3                               ; it in the address of the xt we were just given. So we
00259Dr 3                               ; want to compile this routine:
00259Dr 3                               ;
00259Dr 3                               ;       lda 0,x                 - B5 00
00259Dr 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
00259Dr 3                               ;       lda 1,x                 - B5 01
00259Dr 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
00259Dr 3                               ;       inx                     - E8
00259Dr 3                               ;       inx                     - E8
00259Dr 3                               ;
00259Dr 3                               ; which at least is nice and short. Other than that, we pretty
00259Dr 3                               ; much have to do this the hard and long way, because with the
00259Dr 3                               ; LSBs and MSBs, we can't really put the numbers in a data
00259Dr 3                               ; range and store them with a loop. Sigh.
00259Dr 3               
00259Dr 3  A0 00                        ldy #$00                ; Code for LDA 0,X
00259Fr 3  A9 B5                        lda #$B5
0025A1r 3  20 rr rr                     jsr cmpl_word
0025A4r 3               
0025A4r 3  A9 8D                        lda #$8D                ; Code for STA abs
0025A6r 3  20 rr rr                     jsr cmpl_a
0025A9r 3               
0025A9r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
0025ABr 3  A5 rr                        lda tmp1
0025ADr 3  20 rr rr                     jsr cmpl_word
0025B0r 3               
0025B0r 3  A0 01                        ldy #$01                ; Code for LDA 1,X
0025B2r 3  A9 B5                        lda #$B5
0025B4r 3  20 rr rr                     jsr cmpl_word
0025B7r 3               
0025B7r 3  A9 8D                        lda #$8D                ; Code for STA abs
0025B9r 3  20 rr rr                     jsr cmpl_a
0025BCr 3               
0025BCr 3  E6 rr                        inc tmp1                ; Calculate MSB
0025BEr 3  D0 02                        bne @1
0025C0r 3  E6 rr                        inc tmp1+1
0025C2r 3               @1:
0025C2r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
0025C4r 3  A5 rr                        lda tmp1
0025C6r 3  20 rr rr                     jsr cmpl_word
0025C9r 3               
0025C9r 3  A0 E8                        ldy #$E8                ; Code for INX
0025CBr 3  98                           tya
0025CCr 3  20 rr rr                     jsr cmpl_word
0025CFr 3               
0025CFr 3  80 0F                        bra @done
0025D1r 3               
0025D1r 3               @interpret:
0025D1r 3                               ; We're interpreting, so we arrive here with n
0025D1r 3                               ; on the stack. This is an annoying place to put
0025D1r 3                               ; the underflow check because we can't
0025D1r 3                               ; automatically strip it out
0025D1r 3  20 rr rr                     jsr underflow_1
0025D4r 3               
0025D4r 3                               ; We skip over the jump to DOCONST and store the number
0025D4r 3                               ; in the Program Field Area (PDF, in this case more a
0025D4r 3                               ; Data Field Area
0025D4r 3  B5 00                        lda 0,x
0025D6r 3  92 rr                        sta (tmp1)              ; LSB
0025D8r 3               
0025D8r 3  A0 01                        ldy #1
0025DAr 3  B5 01                        lda 1,x                 ; MSB
0025DCr 3  91 rr                        sta (tmp1),y            ; fall through to common
0025DEr 3               
0025DEr 3  E8                           inx                     ; DROP
0025DFr 3  E8                           inx
0025E0r 3               @done:
0025E0r 3  60           z_to:           rts
0025E1r 3               
0025E1r 3               
0025E1r 3               
0025E1r 3               ; ## TO_BODY ( xt -- addr ) "Return a word's Code Field Area (CFA)"
0025E1r 3               ; ## ">body"  auto  ANS core
0025E1r 3                       ; """https://forth-standard.org/standard/core/toBODY
0025E1r 3                       ; Given a word's execution token (xt), return the address of the
0025E1r 3                       ; start of that word's parameter field (PFA). This is defined as the
0025E1r 3                       ; address that HERE would return right after CREATE.
0025E1r 3                       ;
0025E1r 3                       ; This is a
0025E1r 3                       ; difficult word for STC Forths, because most words don't actually
0025E1r 3                       ; have a Code Field Area (CFA) to skip. We solve this by having CREATE
0025E1r 3                       ; add a flag, "has CFA" (HC), in the header so >BODY know to skip
0025E1r 3                       ; the subroutine jumps to DOVAR, DOCONST, or DODOES
0025E1r 3                       ; """
0025E1r 3               
0025E1r 3               xt_to_body:
0025E1r 3  20 rr rr                     jsr underflow_1
0025E4r 3               
0025E4r 3                               ; Ideally, xt already points to the CFA. We just need to check
0025E4r 3                               ; the HC flag for special cases
0025E4r 3  20 rr rr                     jsr xt_dup              ; ( xt xt )
0025E7r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt nt )
0025EAr 3               
0025EAr 3                               ; The status byte is nt+1
0025EAr 3  F6 00                        inc 0,x
0025ECr 3  D0 02                        bne @1
0025EEr 3  F6 01                        inc 1,x
0025F0r 3               @1:
0025F0r 3  A1 00                        lda (0,x)               ; get status byte
0025F2r 3  29 20                        and #HC
0025F4r 3  F0 0D                        beq @no_cfa
0025F6r 3               
0025F6r 3                               ; We've got a DOVAR, DOCONST, DODEFER, DODOES or whatever,
0025F6r 3                               ; so we add three to xt, which is NOS
0025F6r 3  18                           clc
0025F7r 3  B5 02                        lda 2,x         ; LSB
0025F9r 3  69 03                        adc #3
0025FBr 3  95 02                        sta 2,x
0025FDr 3  B5 03                        lda 3,x         ; MSB
0025FFr 3  69 00                        adc #0          ; we conly care about the carry
002601r 3  95 03                        sta 3,x         ; Fall through to @no_cfa
002603r 3               @no_cfa:
002603r 3  E8                           inx             ; get rid of the nt
002604r 3  E8                           inx
002605r 3               @done:
002605r 3  60           z_to_body:      rts
002606r 3               
002606r 3               
002606r 3               
002606r 3               ; ## TO_IN ( -- addr ) "Return address of the input pointer"
002606r 3               ; ## ">in"  auto  ANS core
002606r 3               xt_to_in:
002606r 3  CA                           dex
002607r 3  CA                           dex
002608r 3               
002608r 3  A9 rr                        lda #<toin
00260Ar 3  95 00                        sta 0,x
00260Cr 3  A9 rr                        lda #>toin      ; paranoid, should be zero
00260Er 3  95 01                        sta 1,x
002610r 3               
002610r 3  60           z_to_in:        rts
002611r 3               
002611r 3               
002611r 3               ; ## TO_NUMBER ( ud addr u -- ud addr u ) "Convert a number"
002611r 3               ; ## ">number"  auto  ANS core
002611r 3                       ; """https://forth-standard.org/standard/core/toNUMBER
002611r 3                       ; Convert a string to a double number. Logic here is based on the
002611r 3                       ; routine by Phil Burk of the same name in pForth, see
002611r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
002611r 3                       ; for the original Forth code. We arrive here from NUMBER which has
002611r 3                       ; made sure that we don't have to deal with a sign and we don't have
002611r 3                       ; to deal with a dot as a last character that signalizes double -
002611r 3                       ; this should be a pure number string.
002611r 3                       ;
002611r 3                       ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we
002611r 3                       ; cannot access any of those.
002611r 3                       ;
002611r 3                       ; For the math routine, we move the inputs to the scratchpad to
002611r 3                       ; avoid having to fool around with the Data Stack.
002611r 3                       ;
002611r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
002611r 3                       ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
002611r 3                       ;     |           |           |           |           |
002611r 3                       ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
002611r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
002611r 3                       ;
002611r 3                       ; The math routine works by converting one character to its
002611r 3                       ; numerical value (N) via DIGIT? and storing it in S+4 for
002611r 3                       ; the moment. We then multiply the UD-HI value with the radix
002611r 3                       ; (from BASE) using UM*, which returns a double-cell result. We
002611r 3                       ; discard the high cell of that result (UD-HI-HI) and store the
002611r 3                       ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
002611r 3                       ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
002611r 3                       ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
002611r 3                       ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
002611r 3                       ; storing the result back in S and S+2, before we start another
002611r 3                       ; round with it as the new UD-LO and UD-HI.
002611r 3                       ; """
002611r 3               
002611r 3               
002611r 3               xt_to_number:
002611r 3  20 rr rr                     jsr underflow_4
002614r 3               
002614r 3                               ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
002614r 3                               ; After this step, the original ud-lo and ud-hi will still be on
002614r 3                               ; the Data Stack, but will be ignored and later overwritten
002614r 3                               ; If >NUMBER is called by NUMBER, these should be all zeros
002614r 3  B5 06                        lda 6,x         ; ud-lo LSB
002616r 3  85 rr                        sta scratch
002618r 3  B5 07                        lda 7,x         ; ud-lo MSB
00261Ar 3  85 rr                        sta scratch+1
00261Cr 3               
00261Cr 3  B5 04                        lda 4,x         ; ud-hi LSB
00261Er 3  85 rr                        sta scratch+2
002620r 3  B5 05                        lda 5,x         ; ud-hi MSB
002622r 3  85 rr                        sta scratch+3
002624r 3               
002624r 3                               ; Push down one on the Data Stack to use TOS for character
002624r 3                               ; conversion ( ud-lo ud-hi addr u x )
002624r 3  CA                           dex
002625r 3  CA                           dex
002626r 3               
002626r 3               @loop:
002626r 3                               ; Get one character based on address
002626r 3  A1 04                        lda (4,x)
002628r 3  95 00                        sta 0,x                 ; ( ud-lo ud-hi addr u char )
00262Ar 3  74 01                        stz 1,x                 ; paranoid
00262Cr 3               
00262Cr 3  20 rr rr                     jsr xt_digit_question   ; ( char -- n -1 | char 0 )
00262Fr 3               
00262Fr 3                               ; This gives us ( ud-lo ud-hi addr u char f | n f ), so we
00262Fr 3                               ; check the flag. If it is zero, we return what we have and
00262Fr 3                               ; let the caller (usually NUMBER) complain
00262Fr 3  B5 00                        lda 0,x
002631r 3  D0 04                        bne @digit_ok
002633r 3               
002633r 3  E8                           inx
002634r 3  E8                           inx
002635r 3  80 67                        bra @done       ; ( ud-lo ud-hi addr u char )
002637r 3               
002637r 3               @digit_ok:
002637r 3                               ; Conversion was successful. We arrive here with
002637r 3                               ; ( ud-lo ud-hi addr u n -1 ) and can start the
002637r 3                               ; math routine
002637r 3               
002637r 3                               ; Save n so we don't have to fool around with the
002637r 3                               ; Data Stack
002637r 3  B5 02                        lda 2,x
002639r 3  85 rr                        sta scratch+4
00263Br 3  B5 03                        lda 3,x
00263Dr 3  85 rr                        sta scratch+5
00263Fr 3               
00263Fr 3                               ; Now multiply ud-hi (the one in the scratchpad, not the
00263Fr 3                               ; original one on the Data Stack) with the radix from BASE.
00263Fr 3                               ; We can clobber TOS and NOS because we saved n
00263Fr 3  A5 rr                        lda scratch+2
002641r 3  95 02                        sta 2,x         ; NOS
002643r 3  A5 rr                        lda scratch+3
002645r 3  95 03                        sta 3,x
002647r 3               
002647r 3  A5 rr                        lda base
002649r 3  95 00                        sta 0,x         ; TOS
00264Br 3  74 01                        stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
00264Dr 3               
00264Dr 3                               ; UM* returns a double-celled number
00264Dr 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
002650r 3               
002650r 3                               ; Move ud-hi-lo to safety
002650r 3  B5 02                        lda 2,x         ; ud-hi-lo
002652r 3  85 rr                        sta scratch+6
002654r 3  B5 03                        lda 3,x
002656r 3  85 rr                        sta scratch+7
002658r 3               
002658r 3                               ; Now we multiply ud-lo, overwriting the stack entries
002658r 3  A5 rr                        lda scratch
00265Ar 3  95 02                        sta 2,x
00265Cr 3  A5 rr                        lda scratch+1
00265Er 3  95 03                        sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
002660r 3               
002660r 3  A5 rr                        lda base
002662r 3  95 00                        sta 0,x
002664r 3  74 01                        stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
002666r 3               
002666r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
002669r 3               
002669r 3  B5 00                        lda 0,x
00266Br 3  85 rr                        sta scratch+2
00266Dr 3  B5 01                        lda 1,x
00266Fr 3  85 rr                        sta scratch+3
002671r 3               
002671r 3  B5 02                        lda 2,x
002673r 3  85 rr                        sta scratch
002675r 3  B5 03                        lda 3,x
002677r 3  85 rr                        sta scratch+1
002679r 3               
002679r 3                               ; We add ud-lo and n, as well as ud-hi and ud-hi-lo,
002679r 3                               ; both in the scratch pad
002679r 3  18                           clc
00267Ar 3  A5 rr                        lda scratch     ; ud-lo LSB
00267Cr 3  65 rr                        adc scratch+4   ; n LSB
00267Er 3  85 rr                        sta scratch     ; this is the new ud-lo
002680r 3  A5 rr                        lda scratch+1   ; ud-lo MSB
002682r 3  65 rr                        adc scratch+5   ; n MSB
002684r 3  85 rr                        sta scratch+1
002686r 3               
002686r 3  A5 rr                        lda scratch+2   ; LSB
002688r 3  65 rr                        adc scratch+6
00268Ar 3  85 rr                        sta scratch+2   ; this is the new ud-hi
00268Cr 3  A5 rr                        lda scratch+3   ; MSB
00268Er 3  65 rr                        adc scratch+7
002690r 3  85 rr                        sta scratch+3
002692r 3               
002692r 3                               ; Clean up: Get rid of one of the two top elements on
002692r 3                               ; the Data Stack. We don't really care which one
002692r 3  E8                           inx
002693r 3  E8                           inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
002694r 3               
002694r 3                               ; One character down. Move address up
002694r 3  F6 04                        inc 4,x
002696r 3  D0 02                        bne @1
002698r 3  F6 05                        inc 5,x
00269Ar 3               @1:
00269Ar 3                               ; Decrease counter
00269Ar 3  D6 02                        dec 2,x
00269Cr 3  D0 88                        bne @loop
00269Er 3               
00269Er 3               @done:
00269Er 3                               ; Counter has reached zero or we have an error. In both
00269Er 3                               ; cases, we clean up the Data Stack and return. Error gives
00269Er 3                               ; us ( ud-lo ud-hi addr u char ), regular end is
00269Er 3                               ; ( ud-lo ud-hi addr u ud-lo )
00269Er 3  E8                           inx
00269Fr 3  E8                           inx             ; ( ud-lo ud-hi addr u )
0026A0r 3               
0026A0r 3                               ; The new ud-lo and ud-hi are still on the scratch pad
0026A0r 3  A5 rr                        lda scratch     ; new ud-lo
0026A2r 3  95 06                        sta 6,x
0026A4r 3  A5 rr                        lda scratch+1
0026A6r 3  95 07                        sta 7,x
0026A8r 3               
0026A8r 3  A5 rr                        lda scratch+2
0026AAr 3  95 04                        sta 4,x
0026ACr 3  A5 rr                        lda scratch+3
0026AEr 3  95 05                        sta 5,x
0026B0r 3               
0026B0r 3  60           z_to_number:    rts
0026B1r 3               
0026B1r 3               
0026B1r 3               
0026B1r 3               ; ## TO_ORDER ( wid -- ) "Add wordlist at beginning of search order"
0026B1r 3               ; ## ">order"  tested  Gforth search
0026B1r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html"""
0026B1r 3               
0026B1r 3               xt_to_order:
0026B1r 3                               ; Put the wid on the return stack for now.
0026B1r 3  20 rr rr                     jsr xt_to_r
0026B4r 3               
0026B4r 3                               ; Get the current search order.
0026B4r 3  20 rr rr                     jsr xt_get_order
0026B7r 3               
0026B7r 3                               ; Get back the wid and add it to the list.
0026B7r 3  20 rr rr                     jsr xt_r_from
0026BAr 3  20 rr rr                     jsr xt_swap
0026BDr 3  20 rr rr                     jsr xt_one_plus
0026C0r 3               
0026C0r 3                               ; Set the search order with the new list.
0026C0r 3  20 rr rr                     jsr xt_set_order
0026C3r 3               
0026C3r 3  60           z_to_order:     rts
0026C4r 3               
0026C4r 3               
0026C4r 3               
0026C4r 3               ; ## TO_R ( n -- )(R: -- n) "Push TOS to the Return Stack"
0026C4r 3               ; ## ">r"  auto  ANS core
0026C4r 3                       ; """https://forth-standard.org/standard/core/toR
0026C4r 3                       ; This word is handled differently for native and for
0026C4r 3                       ; subroutine coding, see `COMPILE,`. This is a complile-only
0026C4r 3                       ; word.
0026C4r 3                       ; """
0026C4r 3               xt_to_r:
0026C4r 3                               ; Save the return address. If this word is natively
0026C4r 3                               ; coded, this is a complete waste of cycles, but
0026C4r 3                               ; required for subroutine coding
0026C4r 3  68                           pla             ; LSB
0026C5r 3  85 rr                        sta tmptos
0026C7r 3  7A                           ply             ; MSB
0026C8r 3               
0026C8r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0026C8r 3               
0026C8r 3                               ; We check for underflow in the second step, so we can
0026C8r 3                               ; strip off the stack thrashing for native compiling first
0026C8r 3  20 rr rr                     jsr underflow_1
0026CBr 3               
0026CBr 3                               ; now we can do the actual work
0026CBr 3  B5 01                        lda 1,x         ; MSB
0026CDr 3  48                           pha
0026CEr 3  B5 00                        lda 0,x         ; LSB
0026D0r 3  48                           pha
0026D1r 3               
0026D1r 3  E8                           inx
0026D2r 3  E8                           inx
0026D3r 3               
0026D3r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0026D3r 3               
0026D3r 3                               ; restore return address
0026D3r 3  5A                           phy             ; MSB
0026D4r 3  A5 rr                        lda tmptos
0026D6r 3  48                           pha             ; LSB
0026D7r 3               
0026D7r 3  60           z_to_r:         rts
0026D8r 3               
0026D8r 3               
0026D8r 3               ; ## TRUE ( -- f ) "Push TRUE flag to Data Stack"
0026D8r 3               ; ## "true"  auto  ANS core ext
0026D8r 3                       ; """https://forth-standard.org/standard/core/TRUE"""
0026D8r 3               xt_true:
0026D8r 3  CA                           dex
0026D9r 3  CA                           dex
0026DAr 3  A9 FF                        lda #$FF
0026DCr 3  95 00                        sta 0,x
0026DEr 3  95 01                        sta 1,x
0026E0r 3               
0026E0r 3  60           z_true:         rts
0026E1r 3               
0026E1r 3               
0026E1r 3               ; ## TUCK ( b a -- a b a ) "Copy TOS below NOS"
0026E1r 3               ; ## "tuck"  auto  ANS core ext
0026E1r 3                       ; """https://forth-standard.org/standard/core/TUCK"""
0026E1r 3               xt_tuck:
0026E1r 3  20 rr rr                     jsr underflow_2
0026E4r 3               
0026E4r 3  CA                           dex
0026E5r 3  CA                           dex
0026E6r 3               
0026E6r 3  B4 04                        ldy 4,x         ; LSB
0026E8r 3  B5 02                        lda 2,x
0026EAr 3  95 04                        sta 4,x
0026ECr 3  94 02                        sty 2,x
0026EEr 3  95 00                        sta 0,x
0026F0r 3               
0026F0r 3  B4 05                        ldy 5,x         ; MSB
0026F2r 3  B5 03                        lda 3,x
0026F4r 3  95 05                        sta 5,x
0026F6r 3  94 03                        sty 3,x         ; bba
0026F8r 3  95 01                        sta 1,x         ; baa
0026FAr 3               
0026FAr 3  60           z_tuck:         rts
0026FBr 3               
0026FBr 3               
0026FBr 3               ; ## TWO ( -- u ) "Push the number 2 to stack"
0026FBr 3               ; ## "2"  auto  Tali Forth
0026FBr 3                       ;
0026FBr 3                       ; This code is shared with ASSEMBLER-WORDLIST
0026FBr 3               xt_assembler_wordlist:
0026FBr 3               xt_two:
0026FBr 3  CA                           dex
0026FCr 3  CA                           dex
0026FDr 3  A9 02                        lda #2
0026FFr 3  95 00                        sta 0,x
002701r 3  74 01                        stz 1,x
002703r 3               
002703r 3               z_assembler_wordlist:
002703r 3  60           z_two:          rts
002704r 3               
002704r 3               
002704r 3               ; ## TWO_DROP ( n n -- ) "Drop TOS and NOS"
002704r 3               ; ## "2drop"  auto  ANS core
002704r 3                       ; """https://forth-standard.org/standard/core/TwoDROP"""
002704r 3               xt_two_drop:
002704r 3  20 rr rr                     jsr underflow_2
002707r 3               
002707r 3  E8                           inx
002708r 3  E8                           inx
002709r 3  E8                           inx
00270Ar 3  E8                           inx
00270Br 3               
00270Br 3  60           z_two_drop:     rts
00270Cr 3               
00270Cr 3               
00270Cr 3               ; ## TWO_DUP ( a b -- a b a b ) "Duplicate first two stack elements"
00270Cr 3               ; ## "2dup"  auto  ANS core
00270Cr 3                       ; """https://forth-standard.org/standard/core/TwoDUP"""
00270Cr 3               xt_two_dup:
00270Cr 3  20 rr rr                     jsr underflow_2
00270Fr 3               
00270Fr 3  CA                           dex
002710r 3  CA                           dex
002711r 3  CA                           dex
002712r 3  CA                           dex
002713r 3               
002713r 3  B5 04                        lda 4,x         ; TOS
002715r 3  95 00                        sta 0,x
002717r 3  B5 05                        lda 5,x
002719r 3  95 01                        sta 1,x
00271Br 3               
00271Br 3  B5 06                        lda 6,x         ; NOS
00271Dr 3  95 02                        sta 2,x
00271Fr 3  B5 07                        lda 7,x
002721r 3  95 03                        sta 3,x
002723r 3               
002723r 3  60           z_two_dup:      rts
002724r 3               
002724r 3               
002724r 3               ; ## TWO_FETCH ( addr -- n1 n2 ) "Fetch the cell pair n1 n2 stored at addr"
002724r 3               ; ## "2@"  auto  ANS core
002724r 3                       ; """https://forth-standard.org/standard/core/TwoFetch
002724r 3                       ; Note n2 stored at addr and n1 in the next cell -- in our case,
002724r 3                       ; the next two bytes. This is equvalent to  `DUP CELL+ @ SWAP @`
002724r 3                       ; """
002724r 3               xt_two_fetch:
002724r 3  20 rr rr                     jsr underflow_1
002727r 3               
002727r 3  B5 00                        lda 0,x
002729r 3  85 rr                        sta tmp1
00272Br 3  B4 01                        ldy 1,x
00272Dr 3  84 rr                        sty tmp1+1
00272Fr 3               
00272Fr 3  CA                           dex             ; reuse one stack element
002730r 3  CA                           dex
002731r 3               
002731r 3  B2 rr                        lda (tmp1)      ; copy LSB
002733r 3  95 00                        sta 0,x
002735r 3  A0 01                        ldy #1          ; copy next
002737r 3  B1 rr                        lda (tmp1),y
002739r 3  95 01                        sta 1,x
00273Br 3  C8                           iny             ; copy next
00273Cr 3  B1 rr                        lda (tmp1),y
00273Er 3  95 02                        sta 2,x
002740r 3  C8                           iny             ; copy next
002741r 3  B1 rr                        lda (tmp1),y
002743r 3  95 03                        sta 3,x
002745r 3               
002745r 3  60           z_two_fetch:    rts
002746r 3               
002746r 3               ; ## TWO_OVER ( d1 d2 -- d1 d2 d1 ) "Copy double word NOS to TOS"
002746r 3               ; ## "2over"  auto  ANS core
002746r 3                       ; """https://forth-standard.org/standard/core/TwoOVER"""
002746r 3               xt_two_over:
002746r 3  20 rr rr                     jsr underflow_4
002749r 3               
002749r 3  CA                           dex
00274Ar 3  CA                           dex
00274Br 3  CA                           dex
00274Cr 3  CA                           dex
00274Dr 3               
00274Dr 3  B5 08                        lda 8,x
00274Fr 3  95 00                        sta 0,x
002751r 3               
002751r 3  B5 09                        lda 9,x
002753r 3  95 01                        sta 1,x
002755r 3               
002755r 3  B5 0A                        lda 10,x
002757r 3  95 02                        sta 2,x
002759r 3               
002759r 3  B5 0B                        lda 11,x
00275Br 3  95 03                        sta 3,x
00275Dr 3               
00275Dr 3  60           z_two_over:     rts
00275Er 3               
00275Er 3               
00275Er 3               ; ## TWO_R_FETCH ( -- n n ) "Copy top two entries from Return Stack"
00275Er 3               ; ## "2r@"  auto  ANS core ext
00275Er 3                       ; """https://forth-standard.org/standard/core/TwoRFetch
00275Er 3                       ;
00275Er 3                       ; This is R> R> 2DUP >R >R SWAP but we can do it a lot faster in
00275Er 3                       ; assembler. We use trickery to access the elements on the Return
00275Er 3                       ; Stack instead of pulling the return address first and storing
00275Er 3                       ; it somewhere else like for 2R> and 2>R. In this version, we leave
00275Er 3                       ; it as Never Native; at some point, we should compare versions to
00275Er 3                       ; see if an Always Native version would be better
00275Er 3                       ; """
00275Er 3               xt_two_r_fetch:
00275Er 3               		; make room on the Data Stack
00275Er 3  CA                           dex
00275Fr 3  CA                           dex
002760r 3  CA                           dex
002761r 3  CA                           dex
002762r 3               
002762r 3                               ; Get four bytes off of Return Stack. This assumes that
002762r 3                               ; we took a subroutine jump here so the first two entries
002762r 3                               ; are the return address
002762r 3  8A                           txa
002763r 3  BA                           tsx
002764r 3  DA                           phx             ; 65c02 has no TXY, so do it the hard way
002765r 3  7A                           ply
002766r 3  AA                           tax
002767r 3               
002767r 3                               ; The Return Stack addreses $0101 and $0102 are occupied by
002767r 3                               ; the return address for this word. This is a whole lot
002767r 3                               ; easier on the 65816
002767r 3  B9 03 01                     lda $0103,y     ; LSB of top entry
00276Ar 3  95 00                        sta 0,x
00276Cr 3  B9 04 01                     lda $0104,y     ; MSB of top entry
00276Fr 3  95 01                        sta 1,x
002771r 3  B9 05 01                     lda $0105,y     ; LSB of bottom entry
002774r 3  95 02                        sta 2,x
002776r 3  B9 06 01                     lda $0106,y     ; MSB of top entry
002779r 3  95 03                        sta 3,x
00277Br 3               
00277Br 3  60           z_two_r_fetch:  rts
00277Cr 3               
00277Cr 3               
00277Cr 3               ; ## TWO_R_FROM ( -- n1 n2 ) (R: n1 n2 -- ) "Pull two cells from Return Stack"
00277Cr 3               ; ## "2r>"  auto  ANS core ext
00277Cr 3               	    ; """https://forth-standard.org/standard/core/TwoRfrom
00277Cr 3                       ; Pull top two entries from Return Stack.
00277Cr 3                       ;
00277Cr 3                       ; Is the same as
00277Cr 3                       ; R> R> SWAP. As with R>, the problem with the is word is that
00277Cr 3                       ; the top value on the ReturnStack for a STC Forth is the
00277Cr 3                       ; return address, which we need to get out of the way first.
00277Cr 3                       ; Native compile needs to be handled as a special case.
00277Cr 3                       ; """
00277Cr 3               xt_two_r_from:
00277Cr 3                               ; save the return address
00277Cr 3  68                           pla                     ; LSB
00277Dr 3  85 rr                        sta tmp1
00277Fr 3  68                           pla                     ; MSB
002780r 3  85 rr                        sta tmp1+1
002782r 3               
002782r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002782r 3               
002782r 3               		; make room on stack
002782r 3  CA                           dex
002783r 3  CA                           dex
002784r 3  CA                           dex
002785r 3  CA                           dex
002786r 3               
002786r 3                               ; In theory, we should test for underflow on the Return
002786r 3                               ; Stack. However, given the traffic there with an STC
002786r 3                               ; Forth, that's probably not really useful
002786r 3               
002786r 3                               ; now we can access the data
002786r 3  68                           pla                     ; LSB
002787r 3  95 00                        sta 0,x
002789r 3  68                           pla                     ; MSB
00278Ar 3  95 01                        sta 1,x
00278Cr 3               
00278Cr 3  68                           pla                     ; LSB
00278Dr 3  95 02                        sta 2,x
00278Fr 3  68                           pla                     ; MSB
002790r 3  95 03                        sta 3,x
002792r 3               
002792r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002792r 3               
002792r 3                               ; restore return address
002792r 3  A5 rr                        lda tmp1+1              ; MSB
002794r 3  48                           pha
002795r 3  A5 rr                        lda tmp1                ; LSB
002797r 3  48                           pha
002798r 3               
002798r 3  60           z_two_r_from:   rts
002799r 3               
002799r 3               
002799r 3               ; ## TWO_SLASH ( n -- n ) "Divide TOS by two"
002799r 3               ; ## "2/"  auto  ANS core
002799r 3                       ; """https://forth-standard.org/standard/core/TwoDiv"""
002799r 3               xt_two_slash:
002799r 3  20 rr rr                     jsr underflow_1
00279Cr 3               
00279Cr 3                               ; We can't just LSR the LSB and ROR the MSB because that
00279Cr 3                               ; would do bad things to the sign
00279Cr 3  B5 01                        lda 1,x
00279Er 3  0A                           asl                     ; save the sign
00279Fr 3  76 01                        ror 1,x
0027A1r 3  76 00                        ror 0,x
0027A3r 3               
0027A3r 3  60           z_two_slash:    rts
0027A4r 3               
0027A4r 3               
0027A4r 3               ; ## TWO_STAR ( n -- n ) "Multiply TOS by two"
0027A4r 3               ; ## "2*"  auto  ANS core
0027A4r 3                       ; """https://forth-standard.org/standard/core/TwoTimes
0027A4r 3                       ;
0027A4r 3                       ; Also used for CELLS
0027A4r 3                       ; """
0027A4r 3               xt_two_star:
0027A4r 3               xt_cells:
0027A4r 3  20 rr rr                     jsr underflow_1
0027A7r 3               
0027A7r 3  16 00                        asl 0,x
0027A9r 3  36 01                        rol 1,x
0027ABr 3               z_cells:
0027ABr 3  60           z_two_star:     rts
0027ACr 3               
0027ACr 3               
0027ACr 3               ; ## TWO_STORE ( n1 n2 addr -- ) "Store two numbers at given address"
0027ACr 3               ; ## "2!"  auto  ANS core
0027ACr 3                       ; """https://forth-standard.org/standard/core/TwoStore
0027ACr 3                       ; Stores so n2 goes to addr and n1 to the next consecutive cell.
0027ACr 3                       ; Is equivalent to  `SWAP OVER ! CELL+ !`
0027ACr 3                       ; """
0027ACr 3               xt_two_store:
0027ACr 3  20 rr rr                     jsr underflow_3
0027AFr 3               
0027AFr 3  B5 00                        lda 0,x
0027B1r 3  85 rr                        sta tmp1
0027B3r 3  B4 01                        ldy 1,x
0027B5r 3  84 rr                        sty tmp1+1
0027B7r 3               
0027B7r 3  E8                           inx
0027B8r 3  E8                           inx
0027B9r 3               
0027B9r 3  B5 00                        lda 0,x         ; copy MSB
0027BBr 3  92 rr                        sta (tmp1)
0027BDr 3  B5 01                        lda 1,x         ; copy next
0027BFr 3  A0 01                        ldy #1
0027C1r 3  91 rr                        sta (tmp1),y
0027C3r 3  B5 02                        lda 2,x         ; copy next
0027C5r 3  C8                           iny
0027C6r 3  91 rr                        sta (tmp1),y
0027C8r 3  B5 03                        lda 3,x         ; copy MSB
0027CAr 3  C8                           iny
0027CBr 3  91 rr                        sta (tmp1),y
0027CDr 3               
0027CDr 3  E8                           inx             ; 2DROP
0027CEr 3  E8                           inx
0027CFr 3  E8                           inx
0027D0r 3  E8                           inx
0027D1r 3               
0027D1r 3  60           z_two_store:    rts
0027D2r 3               
0027D2r 3               
0027D2r 3               ; ## TWO_SWAP ( n1 n2 n3 n4 -- n3 n4 n1 n1 ) "Exchange two double words"
0027D2r 3               ; ## "2swap"  auto  ANS core
0027D2r 3                       ; """https://forth-standard.org/standard/core/TwoSWAP"""
0027D2r 3               xt_two_swap:
0027D2r 3  20 rr rr                     jsr underflow_4
0027D5r 3               
0027D5r 3                               ; 0 <-> 4
0027D5r 3  B5 00                        lda 0,x
0027D7r 3  B4 04                        ldy 4,x
0027D9r 3  95 04                        sta 4,x
0027DBr 3  94 00                        sty 0,x
0027DDr 3               
0027DDr 3                               ; 1 <-> 5
0027DDr 3  B5 01                        lda 1,x
0027DFr 3  B4 05                        ldy 5,x
0027E1r 3  95 05                        sta 5,x
0027E3r 3  94 01                        sty 1,x
0027E5r 3               
0027E5r 3                               ; 2 <-> 6
0027E5r 3  B5 02                        lda 2,x
0027E7r 3  B4 06                        ldy 6,x
0027E9r 3  95 06                        sta 6,x
0027EBr 3  94 02                        sty 2,x
0027EDr 3               
0027EDr 3                               ; 3 <-> 7
0027EDr 3  B5 03                        lda 3,x
0027EFr 3  B4 07                        ldy 7,x
0027F1r 3  95 07                        sta 7,x
0027F3r 3  94 03                        sty 3,x
0027F5r 3               
0027F5r 3  60           z_two_swap:     rts
0027F6r 3               
0027F6r 3               
0027F6r 3               ; ## TWO_TO_R ( n1 n2 -- )(R: -- n1 n2 "Push top two entries to Return Stack"
0027F6r 3               ; ## "2>r"  auto  ANS core ext
0027F6r 3                       ; """https://forth-standard.org/standard/core/TwotoR
0027F6r 3                       ; Push top two entries to Return Stack.
0027F6r 3                       ;
0027F6r 3                       ; The same as SWAP >R >R
0027F6r 3                       ; except that if we jumped here, the return address will be in the
0027F6r 3                       ; way. May not be natively compiled unless we're clever and use
0027F6r 3                       ; special routines.
0027F6r 3                       ; """
0027F6r 3               xt_two_to_r:
0027F6r 3                               ; save the return address
0027F6r 3  68                           pla             ; LSB
0027F7r 3  85 rr                        sta tmp1
0027F9r 3  68                           pla             ; MSB
0027FAr 3  85 rr                        sta tmp1+1
0027FCr 3               
0027FCr 3                               ; --- CUT HERE FOR NATIVE CODING ---
0027FCr 3               
0027FCr 3  20 rr rr                     jsr underflow_2
0027FFr 3               
0027FFr 3                               ; now we can move the data
0027FFr 3  B5 03                        lda 3,x         ; MSB
002801r 3  48                           pha
002802r 3  B5 02                        lda 2,x         ; LSB
002804r 3  48                           pha
002805r 3               
002805r 3                               ; now we can move the data
002805r 3  B5 01                        lda 1,x         ; MSB
002807r 3  48                           pha
002808r 3  B5 00                        lda 0,x         ; LSB
00280Ar 3  48                           pha
00280Br 3               
00280Br 3  E8                           inx
00280Cr 3  E8                           inx
00280Dr 3  E8                           inx
00280Er 3  E8                           inx
00280Fr 3               
00280Fr 3                               ; --- CUT HERE FOR NATIVE CODING ---
00280Fr 3               
00280Fr 3                               ; restore return address
00280Fr 3  A5 rr                        lda tmp1+1      ; MSB
002811r 3  48                           pha
002812r 3  A5 rr                        lda tmp1        ; LSB
002814r 3  48                           pha
002815r 3               
002815r 3  60           z_two_to_r:     rts
002816r 3               
002816r 3               
002816r 3               ; ## TWO_CONSTANT (C: d "name" -- ) ( -- d) "Create a constant for a double word"
002816r 3               ; ## "2constant"  auto  ANS double
002816r 3                       ; """https://forth-standard.org/standard/double/TwoCONSTANT
002816r 3                       ;
002816r 3                       ; Based on the Forth code
002816r 3                       ; : 2CONSTANT ( D -- )  CREATE SWAP , , DOES> DUP @ SWAP CELL+ @ ;
002816r 3                       ; """
002816r 3               xt_two_constant:
002816r 3  20 rr rr                     jsr underflow_2
002819r 3               
002819r 3  20 rr rr                     jsr xt_create
00281Cr 3  20 rr rr                     jsr xt_swap
00281Fr 3  20 rr rr                     jsr xt_comma
002822r 3  20 rr rr                     jsr xt_comma
002825r 3               
002825r 3  20 rr rr                     jsr does_runtime    ; does> turns into these two routines.
002828r 3  20 rr rr                     jsr dodoes
00282Br 3               
00282Br 3  20 rr rr                     jsr xt_dup
00282Er 3  20 rr rr                     jsr xt_fetch
002831r 3  20 rr rr                     jsr xt_swap
002834r 3  20 rr rr                     jsr xt_cell_plus
002837r 3  20 rr rr                     jsr xt_fetch
00283Ar 3               
00283Ar 3  60           z_two_constant: rts
00283Br 3               
00283Br 3               
00283Br 3               ; ## TWO_LITERAL (C: d -- ) ( -- d) "Compile a literal double word"
00283Br 3               ; ## "2literal"  auto  ANS double
00283Br 3                       ; """https://forth-standard.org/standard/double/TwoLITERAL"""
00283Br 3                       ; Based on the Forth code
00283Br 3                       ; : 2LITERAL ( D -- ) SWAP POSTPONE LITERAL POSTPONE LITERAL ; IMMEDIATE
00283Br 3                       ; """
00283Br 3               xt_two_literal:
00283Br 3  20 rr rr                     jsr underflow_2 ; double number
00283Er 3               
00283Er 3  20 rr rr                     jsr xt_swap
002841r 3  20 rr rr                     jsr xt_literal
002844r 3  20 rr rr                     jsr xt_literal
002847r 3               
002847r 3  60           z_two_literal:  rts
002848r 3               
002848r 3               
002848r 3               ; ## TWO_VARIABLE ( "name" -- ) "Create a variable for a double word"
002848r 3               ; ## "2variable"  auto  ANS double
002848r 3                       ; """https://forth-standard.org/standard/double/TwoVARIABLE
002848r 3                       ; The variable is not initialized to zero.
002848r 3                       ;
002848r 3                       ; This can be realized in Forth as either
002848r 3                       ; CREATE 2 CELLS ALLOT  or just  CREATE 0 , 0 ,
002848r 3                       ; """
002848r 3               xt_two_variable:
002848r 3                               ; We just let CRATE and ALLOT do the heavy lifting
002848r 3  20 rr rr                     jsr xt_create
00284Br 3               
00284Br 3  CA                           dex
00284Cr 3  CA                           dex
00284Dr 3  A9 04                        lda #4
00284Fr 3  95 00                        sta 0,x
002851r 3  74 01                        stz 1,x
002853r 3               
002853r 3  20 rr rr                     jsr xt_allot
002856r 3               
002856r 3  60           z_two_variable: rts
002857r 3               
002857r 3               
002857r 3               ; ## TYPE ( addr u -- ) "Print string"
002857r 3               ; ## "type"  auto  ANS core
002857r 3                       ; """https://forth-standard.org/standard/core/TYPE
002857r 3                       ; Works through EMIT to allow OUTPUT revectoring.
002857r 3                       ; """
002857r 3               
002857r 3               xt_type:
002857r 3  20 rr rr                     jsr underflow_2
00285Ar 3               
00285Ar 3                               ; Save the starting address into tmp1
00285Ar 3  B5 02                        lda 2,x
00285Cr 3  85 rr                        sta tmp1
00285Er 3  B5 03                        lda 3,x
002860r 3  85 rr                        sta tmp1+1
002862r 3               @loop:
002862r 3                               ; done if length is zero
002862r 3  B5 00                        lda 0,x
002864r 3  15 01                        ora 1,x
002866r 3  F0 15                        beq @done
002868r 3               
002868r 3                               ; Send the current character
002868r 3  B2 rr                        lda (tmp1)
00286Ar 3  20 rr rr                     jsr emit_a      ; avoids stack foolery
00286Dr 3               
00286Dr 3                               ; Move the address along (in tmp1)
00286Dr 3  E6 rr                        inc tmp1
00286Fr 3  D0 02                        bne @1
002871r 3  E6 rr                        inc tmp1+1
002873r 3               @1:
002873r 3                               ; Reduce the count (on the data stack)
002873r 3  B5 00                        lda 0,x
002875r 3  D0 02                        bne @2
002877r 3  D6 01                        dec 1,x
002879r 3               @2:
002879r 3  D6 00                        dec 0,x
00287Br 3               
00287Br 3  80 E5                        bra @loop
00287Dr 3               @done:
00287Dr 3  E8                           inx
00287Er 3  E8                           inx
00287Fr 3  E8                           inx
002880r 3  E8                           inx
002881r 3               
002881r 3  60           z_type:         rts
002882r 3               
002882r 3               
002882r 3               
002882r 3               ; ## U_DOT ( u -- ) "Print TOS as unsigned number"
002882r 3               ; ## "u."  tested  ANS core
002882r 3                       ; """https://forth-standard.org/standard/core/Ud
002882r 3                       ;
002882r 3                       ; This is : U. 0 <# #S #> TYPE SPACE ; in Forth
002882r 3                       ; We use the internal assembler function print_u followed
002882r 3                       ; by a single space
002882r 3                       ; """
002882r 3               xt_u_dot:
002882r 3  20 rr rr                     jsr underflow_1
002885r 3               
002885r 3  20 rr rr                     jsr print_u
002888r 3  A9 20                        lda #AscSP
00288Ar 3  20 rr rr                     jsr emit_a
00288Dr 3               
00288Dr 3  60           z_u_dot:        rts
00288Er 3               
00288Er 3               
00288Er 3               ; ## U_DOT_R ( u u -- ) "Print NOS as unsigned number right-justified with TOS width"
00288Er 3               ; ## "u.r"  tested  ANS core ext
00288Er 3                       ; """https://forth-standard.org/standard/core/UDotR"""
00288Er 3               xt_u_dot_r:
00288Er 3  20 rr rr                     jsr underflow_2
002891r 3               
002891r 3  20 rr rr                     jsr xt_to_r
002894r 3  20 rr rr                     jsr xt_zero
002897r 3  20 rr rr                     jsr xt_less_number_sign
00289Ar 3  20 rr rr                     jsr xt_number_sign_s
00289Dr 3  20 rr rr                     jsr xt_number_sign_greater
0028A0r 3  20 rr rr                     jsr xt_r_from
0028A3r 3  20 rr rr                     jsr xt_over
0028A6r 3  20 rr rr                     jsr xt_minus
0028A9r 3  20 rr rr                     jsr xt_spaces
0028ACr 3  20 rr rr                     jsr xt_type
0028AFr 3               
0028AFr 3  60           z_u_dot_r:      rts
0028B0r 3               
0028B0r 3               
0028B0r 3               ; ## U_GREATER_THAN ( n m -- f ) "Return true if NOS > TOS (unsigned)"
0028B0r 3               ; ## "u>"  auto  ANS core ext
0028B0r 3                       ; """https://forth-standard.org/standard/core/Umore"""
0028B0r 3               xt_u_greater_than:
0028B0r 3  20 rr rr                     jsr underflow_2
0028B3r 3               
0028B3r 3  B5 00                        lda 0,x
0028B5r 3  D5 02                        cmp 2,x
0028B7r 3  B5 01                        lda 1,x
0028B9r 3  F5 03                        sbc 3,x
0028BBr 3  E8                           inx
0028BCr 3  E8                           inx
0028BDr 3               
0028BDr 3  A9 00                        lda #0
0028BFr 3  69 FF                        adc #$ff
0028C1r 3  95 00                        sta 0,x         ; store flag
0028C3r 3  95 01                        sta 1,x
0028C5r 3               
0028C5r 3  60           z_u_greater_than:    rts
0028C6r 3               
0028C6r 3               ; ## U_LESS_THAN ( n m -- f ) "Return true if NOS < TOS (unsigned)"
0028C6r 3               ; ## "u<"  auto  ANS core
0028C6r 3                       ; """https://forth-standard.org/standard/core/Uless"""
0028C6r 3               xt_u_less_than:
0028C6r 3  20 rr rr                     jsr underflow_2
0028C9r 3               
0028C9r 3  B5 02                        lda 2,x
0028CBr 3  D5 00                        cmp 0,x
0028CDr 3  B5 03                        lda 3,x
0028CFr 3  F5 01                        sbc 1,x
0028D1r 3  E8                           inx
0028D2r 3  E8                           inx
0028D3r 3               
0028D3r 3  A9 00                        lda #0
0028D5r 3  69 FF                        adc #$ff
0028D7r 3  95 00                        sta 0,x         ; store flag
0028D9r 3  95 01                        sta 1,x
0028DBr 3               
0028DBr 3  60           z_u_less_than:    rts
0028DCr 3               
0028DCr 3               
0028DCr 3               ; ## UD_DOT ( d -- ) "Print double as unsigned"
0028DCr 3               ; ## "ud."  auto  Tali double
0028DCr 3                       ;
0028DCr 3                       ; """Based on the Forth code  : UD. <# #S #> TYPE SPACE ;
0028DCr 3                       ; """
0028DCr 3               xt_ud_dot:
0028DCr 3  20 rr rr                     jsr underflow_2 ; double number
0028DFr 3               
0028DFr 3  20 rr rr                     jsr xt_less_number_sign
0028E2r 3  20 rr rr                     jsr xt_number_sign_s
0028E5r 3  20 rr rr                     jsr xt_number_sign_greater
0028E8r 3  20 rr rr                     jsr xt_type
0028EBr 3  20 rr rr                     jsr xt_space
0028EEr 3               
0028EEr 3  60           z_ud_dot:        rts
0028EFr 3               
0028EFr 3               
0028EFr 3               ; ## UD_DOT_R ( d u -- ) "Print unsigned double right-justified u wide"
0028EFr 3               ; ## "ud.r"  auto  Tali double
0028EFr 3                       ;
0028EFr 3                       ; """Based on the Forth code : UD.R  >R <# #S #> R> OVER - SPACES TYPE ;
0028EFr 3                       ; """
0028EFr 3               xt_ud_dot_r:
0028EFr 3  20 rr rr                     jsr underflow_3
0028F2r 3               
0028F2r 3  20 rr rr                     jsr xt_to_r
0028F5r 3  20 rr rr                     jsr xt_less_number_sign
0028F8r 3  20 rr rr                     jsr xt_number_sign_s
0028FBr 3  20 rr rr                     jsr xt_number_sign_greater
0028FEr 3  20 rr rr                     jsr xt_r_from
002901r 3  20 rr rr                     jsr xt_over
002904r 3  20 rr rr                     jsr xt_minus
002907r 3  20 rr rr                     jsr xt_spaces
00290Ar 3  20 rr rr                     jsr xt_type
00290Dr 3               
00290Dr 3  60           z_ud_dot_r:      rts
00290Er 3               
00290Er 3               
00290Er 3               ; ## UM_SLASH_MOD ( ud u -- ur u ) "32/16 -> 16 division"
00290Er 3               ; ## "um/mod"  auto  ANS core
00290Er 3                       ; """https://forth-standard.org/standard/core/UMDivMOD
00290Er 3                       ; Divide double cell number by single cell number, returning the
00290Er 3                       ; quotient as TOS and any remainder as NOS. All numbers are unsigned.
00290Er 3                       ; This is the basic division operation all others use. Based on FIG
00290Er 3                       ; Forth code, modified by Garth Wilson, see
00290Er 3                       ; http://6502.org/source/integers/ummodfix/ummodfix.htm
00290Er 3                       ;
00290Er 3                       ; This uses tmp1, tmp1+1, and tmptos
00290Er 3                       ; """
00290Er 3               
00290Er 3               xt_um_slash_mod:
00290Er 3  20 rr rr                     jsr underflow_3
002911r 3               
002911r 3                               ; catch division by zero
002911r 3  B5 00                        lda 0,x
002913r 3  15 01                        ora 1,x
002915r 3  D0 05                        bne @not_zero
002917r 3               
002917r 3  A9 04                        lda #err_divzero
002919r 3  4C rr rr                     jmp error
00291Cr 3               
00291Cr 3               @not_zero:
00291Cr 3                               ; We loop 17 times
00291Cr 3  A9 11                        lda #17
00291Er 3  85 rr                        sta tmptos
002920r 3               
002920r 3               @loop:
002920r 3                               ; rotate low cell of dividend one bit left (LSB)
002920r 3  36 04                        rol 4,x
002922r 3  36 05                        rol 5,x
002924r 3               
002924r 3                               ; loop control
002924r 3  C6 rr                        dec tmptos
002926r 3  F0 22                        beq @done
002928r 3               
002928r 3                               ; rotate high cell of dividend one bit left (MSB)
002928r 3  36 02                        rol 2,x
00292Ar 3  36 03                        rol 3,x
00292Cr 3               
00292Cr 3  64 rr                        stz tmp1        ; store the bit we got from hi cell (MSB)
00292Er 3  26 rr                        rol tmp1
002930r 3               
002930r 3                               ; subtract dividend hi cell minus divisor
002930r 3  38                           sec
002931r 3  B5 02                        lda 2,x
002933r 3  F5 00                        sbc 0,x
002935r 3  85 rr                        sta tmp1+1
002937r 3  B5 03                        lda 3,x
002939r 3  F5 01                        sbc 1,x
00293Br 3               
00293Br 3  A8                           tay
00293Cr 3  A5 rr                        lda tmp1
00293Er 3  E9 00                        sbc #0
002940r 3  90 DE                        bcc @loop
002942r 3               
002942r 3                               ; make result new dividend high cell
002942r 3  A5 rr                        lda tmp1+1
002944r 3  95 02                        sta 2,x
002946r 3  94 03                        sty 3,x         ; used as temp storage
002948r 3               
002948r 3  80 D6                        bra @loop
00294Ar 3               @done:
00294Ar 3  E8                           inx
00294Br 3  E8                           inx
00294Cr 3               
00294Cr 3  20 rr rr                     jsr xt_swap
00294Fr 3               
00294Fr 3  60           z_um_slash_mod: rts
002950r 3               
002950r 3               
002950r 3               
002950r 3               ; ## UM_STAR ( u u -- ud ) "Multiply 16 x 16 -> 32"
002950r 3               ; ## "um*"  auto  ANS core
002950r 3                       ; """https://forth-standard.org/standard/core/UMTimes
002950r 3                       ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.
002950r 3                       ; Old Forth versions such as FIG Forth call this U*
002950r 3                       ;
002950r 3                       ; This is based on modified FIG Forth code by Dr. Jefyll, see
002950r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed
002950r 3                       ; discussion.
002950r 3                       ;
002950r 3                       ; We don't use the system scratch pad (SYSPAD) for temp
002950r 3                       ; storage because >NUMBER uses it as well, but instead tmp1 to
002950r 3                       ; tmp3 (tmp1 is N in the original code, tmp1+1 is N+1, etc).
002950r 3                       ;
002950r 3                       ; Consider switching to a table-supported version based on
002950r 3                       ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
002950r 3                       ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d>
002950r 3                       ; http://forum.6502.org/viewtopic.php?p=205#p205
002950r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689
002950r 3                       ; """
002950r 3               
002950r 3               xt_um_star:
002950r 3  20 rr rr                     jsr underflow_2
002953r 3               
002953r 3                               ; to eliminate clc inside the loop, the value at
002953r 3                               ; tmp1 is reduced by 1 in advance
002953r 3  18                           clc
002954r 3  B5 00                        lda 0,x         ; copy TOS to tmp2
002956r 3  E9 00                        sbc #0
002958r 3  85 rr                        sta tmp2
00295Ar 3               
00295Ar 3  B5 01                        lda 1,x
00295Cr 3  E9 00                        sbc #0
00295Er 3  90 31                        bcc @zero       ; is TOS zero?
002960r 3  85 rr                        sta tmp2+1
002962r 3               
002962r 3  A9 00                        lda #0
002964r 3  85 rr                        sta tmp1
002966r 3  86 rr                        stx tmp3        ; tested for exit from outer loop
002968r 3  CA                           dex
002969r 3  CA                           dex
00296Ar 3               
00296Ar 3               @outer_loop:
00296Ar 3  A0 08                        ldy #8          ; counter inner loop
00296Cr 3  56 04                        lsr 4,x         ; think "2,x" then later "3,x"
00296Er 3               
00296Er 3               @inner_loop:
00296Er 3  90 0C                        bcc @no_add
002970r 3  85 rr                        sta tmp1+1      ; save time, don't CLC
002972r 3  A5 rr                        lda tmp1
002974r 3  65 rr                        adc tmp2
002976r 3  85 rr                        sta tmp1
002978r 3  A5 rr                        lda tmp1+1
00297Ar 3  65 rr                        adc tmp2+1
00297Cr 3               
00297Cr 3               @no_add:
00297Cr 3  6A                           ror
00297Dr 3  66 rr                        ror tmp1
00297Fr 3  76 04                        ror 4,x         ; think "2,x" then later "3,x"
002981r 3               
002981r 3  88                           dey
002982r 3  D0 EA                        bne @inner_loop ; go back for one more shift?
002984r 3               
002984r 3  E8                           inx
002985r 3  E4 rr                        cpx tmp3
002987r 3  D0 E1                        bne @outer_loop ; go back for eight more shifts?
002989r 3               
002989r 3                               ; all done, store high word of result
002989r 3  95 01                        sta 1,x
00298Br 3  A5 rr                        lda tmp1
00298Dr 3  95 00                        sta 0,x
00298Fr 3  80 04                        bra @done
002991r 3               
002991r 3               @zero:
002991r 3  74 02                        stz 2,x
002993r 3  74 03                        stz 3,x
002995r 3               @done:
002995r 3  60           z_um_star:      rts
002996r 3               
002996r 3               
002996r 3               
002996r 3               ; ## UNLOOP ( -- )(R: n1 n2 n3 ---) "Drop loop control from Return stack"
002996r 3               ; ## "unloop"  auto  ANS core
002996r 3                       ; """https://forth-standard.org/standard/core/UNLOOP
002996r 3                       ;
002996r 3                       ; Note that 6xPLA uses just as many bytes as a loop would
002996r 3                       ; """
002996r 3               xt_unloop:
002996r 3                               ; Drop fudge number (limit/start from DO/?DO off the
002996r 3                               ; return stack
002996r 3  68                           pla
002997r 3  68                           pla
002998r 3  68                           pla
002999r 3  68                           pla
00299Ar 3               
00299Ar 3                               ; Now drop the LEAVE address that was below them off
00299Ar 3                               ; the Return Stack as well
00299Ar 3  68                           pla
00299Br 3  68                           pla
00299Cr 3               
00299Cr 3  60           z_unloop:       rts
00299Dr 3               
00299Dr 3               
00299Dr 3               ; ## UNTIL (C: dest -- ) ( -- ) "Loop flow control"
00299Dr 3               ; ## "until"  auto  ANS core
00299Dr 3                       ; """http://forth-standard.org/standard/core/UNTIL"""
00299Dr 3               xt_until:
00299Dr 3                               ; Compile a 0BRANCH
00299Dr 3  A0 rr                        ldy #>zero_branch_runtime
00299Fr 3  A9 rr                        lda #<zero_branch_runtime
0029A1r 3  20 rr rr                     jsr cmpl_subroutine
0029A4r 3               
0029A4r 3                               ; The address to loop back to is on the stack.
0029A4r 3                               ; Just compile it as the destination for the
0029A4r 3                               ; 0branch.
0029A4r 3  20 rr rr                     jsr xt_comma
0029A7r 3               
0029A7r 3  60           z_until:        rts
0029A8r 3               
0029A8r 3               
0029A8r 3               ; ## UNUSED ( -- u ) "Return size of space available to Dictionary"
0029A8r 3               ; ## "unused"  auto  ANS core ext
0029A8r 3                       ; """https://forth-standard.org/standard/core/UNUSED
0029A8r 3                       ; UNUSED does not include the ACCEPT history buffers. Total RAM
0029A8r 3                       ; should be HERE + UNUSED + <history buffer size>, the last of which
0029A8r 3                       ; defaults to $400
0029A8r 3                       ; """
0029A8r 3               xt_unused:
0029A8r 3  CA                           dex
0029A9r 3  CA                           dex
0029AAr 3               
0029AAr 3  A9 FF                        lda #<cp_end
0029ACr 3  38                           sec
0029ADr 3  E5 rr                        sbc cp
0029AFr 3  95 00                        sta 0,x
0029B1r 3               
0029B1r 3  A9 7F                        lda #>cp_end
0029B3r 3  E5 rr                        sbc cp+1
0029B5r 3  95 01                        sta 1,x
0029B7r 3               
0029B7r 3  60           z_unused:       rts
0029B8r 3               
0029B8r 3               
0029B8r 3               ; ## UPDATE ( -- ) "Mark current block as dirty"
0029B8r 3               ; ## "update"  auto  ANS block
0029B8r 3                       ; """https://forth-standard.org/standard/block/UPDATE"""
0029B8r 3               xt_update:
0029B8r 3                               ; Turn on the dirty bit. We can't use TSB here because it only
0029B8r 3                               ; has Absolute and Direct Pages addressing modes
0029B8r 3  A0 2C                        ldy #buffstatus_offset
0029BAr 3  B1 rr                        lda (up),y
0029BCr 3  09 02                        ora #2          ; Turn on dirty flag (bit 2)
0029BEr 3  91 rr                        sta (up),y
0029C0r 3               
0029C0r 3  60           z_update:       rts
0029C1r 3               
0029C1r 3               
0029C1r 3               ; ## USERADDR ( -- addr ) "Push address of base address of user variables"
0029C1r 3               ; ## "useraddr"  tested  Tali Forth
0029C1r 3               xt_useraddr:
0029C1r 3  CA                           dex
0029C2r 3  CA                           dex
0029C3r 3  A9 rr                        lda #<up
0029C5r 3  95 00                        sta 0,x
0029C7r 3  A9 rr                        lda #>up
0029C9r 3  95 01                        sta 1,x
0029CBr 3               
0029CBr 3  60           z_useraddr:     rts
0029CCr 3               
0029CCr 3               
0029CCr 3               ; ## VALUE ( n "name" -- ) "Define a value"
0029CCr 3               ; ## "value"  auto  ANS core
0029CCr 3                       ; """https://forth-standard.org/standard/core/VALUE
0029CCr 3                       ;
0029CCr 3                       ; This is a dummy header for the WORDLIST. The actual code is
0029CCr 3                       ; identical to that of CONSTANT
0029CCr 3                       ; """
0029CCr 3               
0029CCr 3               
0029CCr 3               ; ## VARIABLE ( "name" -- ) "Define a variable"
0029CCr 3               ; ## "variable"  auto  ANS core
0029CCr 3                       ; """https://forth-standard.org/standard/core/VARIABLE
0029CCr 3                       ; There are various Forth definitions for this word, such as
0029CCr 3                       ; `CREATE 1 CELLS ALLOT`  or  `CREATE 0 ,`  We use a variant of the
0029CCr 3                       ; second one so the variable is initialized to zero
0029CCr 3                       ; """
0029CCr 3               xt_variable:
0029CCr 3                               ; we let CREATE do the heavy lifting
0029CCr 3  20 rr rr                     jsr xt_create
0029CFr 3               
0029CFr 3                               ; there is no "STZ (CP)" so we have to do this the hard
0029CFr 3                               ; way
0029CFr 3  A9 00                        lda #0
0029D1r 3               
0029D1r 3  92 rr                        sta (cp)
0029D3r 3  E6 rr                        inc cp
0029D5r 3  D0 02                        bne @1
0029D7r 3  E6 rr                        inc cp+1
0029D9r 3               @1:
0029D9r 3  92 rr                        sta (cp)
0029DBr 3  E6 rr                        inc cp
0029DDr 3  D0 02                        bne @2
0029DFr 3  E6 rr                        inc cp+1
0029E1r 3               @2:
0029E1r 3                               ; Now we need to adjust the length of the complete word by two
0029E1r 3  20 rr rr                     jsr adjust_z
0029E4r 3               
0029E4r 3  60           z_variable:     rts
0029E5r 3               
0029E5r 3               
0029E5r 3               ; ## WHILE ( C: dest -- orig dest ) ( x -- ) "Loop flow control"
0029E5r 3               ; ## "while"  auto  ANS core
0029E5r 3                       ; """http://forth-standard.org/standard/core/WHILE"""
0029E5r 3               xt_while:
0029E5r 3                               ; Compile a 0branch
0029E5r 3  A0 rr                        ldy #>zero_branch_runtime
0029E7r 3  A9 rr                        lda #<zero_branch_runtime
0029E9r 3  20 rr rr                     jsr cmpl_subroutine
0029ECr 3               
0029ECr 3                               ; Put the address (here) where the destination
0029ECr 3                               ; address needs to go so it can be put there later.
0029ECr 3  20 rr rr                     jsr xt_here
0029EFr 3               
0029EFr 3                               ; Fill in the destination address with 0 for now.
0029EFr 3  20 rr rr                     jsr xt_zero
0029F2r 3  20 rr rr                     jsr xt_comma
0029F5r 3               
0029F5r 3                               ; Swap the two addresses on the stack.
0029F5r 3  20 rr rr                     jsr xt_swap
0029F8r 3               
0029F8r 3  60           z_while:        rts
0029F9r 3               
0029F9r 3               
0029F9r 3               ; ## WITHIN ( n1 n2 n3 -- ) "See if within a range"
0029F9r 3               ; ## "within"  auto  ANS core ext
0029F9r 3                       ; """https://forth-standard.org/standard/core/WITHIN
0029F9r 3                       ;
0029F9r 3                       ; This an assembler version of the ANS Forth implementation
0029F9r 3                       ; at https://forth-standard.org/standard/core/WITHIN which is
0029F9r 3                       ; OVER - >R - R> U<  note there is an alternative high-level version
0029F9r 3                       ; ROT TUCK > -ROT > INVERT AND
0029F9r 3                       ; """"
0029F9r 3               xt_within:
0029F9r 3  20 rr rr                     jsr underflow_3
0029FCr 3               
0029FCr 3  20 rr rr                     jsr xt_over
0029FFr 3  20 rr rr                     jsr xt_minus
002A02r 3  20 rr rr                     jsr xt_to_r
002A05r 3  20 rr rr                     jsr xt_minus
002A08r 3  20 rr rr                     jsr xt_r_from
002A0Br 3  20 rr rr                     jsr xt_u_less_than
002A0Er 3               
002A0Er 3  60           z_within:       rts
002A0Fr 3               
002A0Fr 3               
002A0Fr 3               ; ## WORD ( char "name " -- caddr ) "Parse input stream"
002A0Fr 3               ; ## "word"  auto  ANS core
002A0Fr 3                       ; """https://forth-standard.org/standard/core/WORD
002A0Fr 3                       ; Obsolete parsing word included for backwards compatibility only.
002A0Fr 3                       ; Do not use this, use `PARSE` or `PARSE-NAME`. Skips leading delimiters
002A0Fr 3                       ; and copies word to storage area for a maximum size of 255 bytes.
002A0Fr 3                       ; Returns the result as a counted string (requires COUNT to convert
002A0Fr 3                       ; to modern format), and inserts a space after the string. See "Forth
002A0Fr 3                       ; Programmer's Handbook" 3rd edition p. 159 and
002A0Fr 3                       ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
002A0Fr 3                       ; for discussions of why you shouldn't be using WORD anymore.
002A0Fr 3                       ;
002A0Fr 3                       ; Forth
002A0Fr 3                       ; would be   PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
002A0Fr 3                       ; We only allow input of 255 chars. Seriously, use PARSE-NAME.
002A0Fr 3                       ; """
002A0Fr 3               
002A0Fr 3               xt_word:
002A0Fr 3  20 rr rr                     jsr underflow_1
002A12r 3               
002A12r 3                               ; Skip over leading delimiters - this is like PARSE-NAME,
002A12r 3                               ; but unlike PARSE
002A12r 3  A4 rr                        ldy toin                ; >IN
002A14r 3               @loop:
002A14r 3  C4 rr                        cpy ciblen              ; quit if end of input
002A16r 3  F0 09                        beq @found_char
002A18r 3  B1 rr                        lda (cib),y
002A1Ar 3  D5 00                        cmp 0,x                 ; ASCII of delimiter
002A1Cr 3  D0 03                        bne @found_char
002A1Er 3               
002A1Er 3  C8                           iny
002A1Fr 3  80 F3                        bra @loop
002A21r 3               @found_char:
002A21r 3                               ; Save index of where word starts
002A21r 3  84 rr                        sty toin
002A23r 3               
002A23r 3                               ; The real work is done by parse
002A23r 3  20 rr rr                     jsr xt_parse            ; Returns ( addr u )
002A26r 3               
002A26r 3                               ; Convert the modern ( addr u ) string format to obsolete
002A26r 3                               ; ( caddr ) format. We just do this in the Dictionary
002A26r 3  B5 00                        lda 0,x
002A28r 3  92 rr                        sta (cp)                ; Save length of string
002A2Ar 3  48                           pha                     ; Keep copy of length for later
002A2Br 3               
002A2Br 3  20 rr rr                     jsr xt_dup              ; ( addr u u )
002A2Er 3  A5 rr                        lda cp
002A30r 3  18                           clc
002A31r 3  69 01                        adc #1
002A33r 3  95 02                        sta 2,x                 ; LSB of CP
002A35r 3  A5 rr                        lda cp+1
002A37r 3  69 00                        adc #0
002A39r 3  95 03                        sta 3,x                 ; ( addr cp+1 u )
002A3Br 3               
002A3Br 3  20 rr rr                     jsr xt_move
002A3Er 3               
002A3Er 3                               ; Return caddr
002A3Er 3  CA                           dex
002A3Fr 3  CA                           dex
002A40r 3  A5 rr                        lda cp
002A42r 3  95 00                        sta 0,x
002A44r 3  A5 rr                        lda cp+1
002A46r 3  95 01                        sta 1,x
002A48r 3               
002A48r 3                               ; Adjust CP
002A48r 3  68                           pla                     ; length of string
002A49r 3  18                           clc
002A4Ar 3  65 rr                        adc cp
002A4Cr 3  85 rr                        sta cp
002A4Er 3  A5 rr                        lda cp+1
002A50r 3  69 00                        adc #0                  ; we only need the carry
002A52r 3  85 rr                        sta cp+1
002A54r 3  60           z_word:         rts
002A55r 3               
002A55r 3               
002A55r 3               ; ## WORDLIST ( -- wid ) "Create new wordlist (from pool of 8)"
002A55r 3               ; ## "wordlist" auto ANS search
002A55r 3                       ; """https://forth-standard.org/standard/search/WORDLIST
002A55r 3                       ; See the tutorial on Wordlists and the Search Order for
002A55r 3                       ; more information.
002A55r 3                       ; """
002A55r 3               
002A55r 3               xt_wordlist:
002A55r 3                               ; Get the current number of wordlists
002A55r 3  A0 05                        ldy #num_wordlists_offset
002A57r 3  B1 rr                        lda (up),y      ; This is a byte variable, so only
002A59r 3                                               ; the LSB needs to be checked.
002A59r 3               
002A59r 3                               ; See if we are already at the max.
002A59r 3  C9 0C                        cmp #max_wordlists
002A5Br 3  D0 05                        bne @ok
002A5Dr 3               
002A5Dr 3                               ; Print an error message if all wordlists used.
002A5Dr 3  A9 0B                        lda #err_wordlist
002A5Fr 3  4C rr rr                     jmp error
002A62r 3               
002A62r 3               @ok:
002A62r 3  1A                           inc             ; Increment the wordlist#
002A63r 3  91 rr                        sta (up),y      ; Save it into byte variable #wordlists
002A65r 3  CA                           dex             ; and put it on the stack.
002A66r 3  CA                           dex
002A67r 3  95 00                        sta 0,x
002A69r 3  74 01                        stz 1,x         ; 12 is the max, so upper byte is always zero.
002A6Br 3               
002A6Br 3  60           z_wordlist:     rts
002A6Cr 3               
002A6Cr 3               
002A6Cr 3               
002A6Cr 3               ; ## WORDS ( -- ) "Print known words from Dictionary"
002A6Cr 3               ; ## "words"  tested  ANS tools
002A6Cr 3                       ; """https://forth-standard.org/standard/tools/WORDS
002A6Cr 3                       ; This is pretty much only used at the command line so we can
002A6Cr 3                       ; be slow and try to save space.
002A6Cr 3                       ; """
002A6Cr 3               
002A6Cr 3               xt_words:
002A6Cr 3                               ; we follow Gforth by starting on the next
002A6Cr 3                               ; line
002A6Cr 3  20 rr rr                     jsr xt_cr
002A6Fr 3               
002A6Fr 3                               ; We pretty-format the output by inserting a line break
002A6Fr 3                               ; before the end of the line. We can get away with pushing
002A6Fr 3                               ; the counter to the stack because this is usually an
002A6Fr 3                               ; interactive word and speed is not that important
002A6Fr 3  A9 00                        lda #0
002A71r 3  48                           pha
002A72r 3               
002A72r 3                               ; Set up for traversing the wordlist search order.
002A72r 3  CA                           dex                     ; Make room on the stack for
002A73r 3  CA                           dex                     ; a dictionary pointer.
002A74r 3  64 rr                        stz tmp3                ; Start at the beginning of
002A76r 3                                                       ; the search order.
002A76r 3               @wordlist_loop:
002A76r 3  A0 1E                        ldy #num_order_offset   ; Check against byte variable #ORDER.
002A78r 3  A5 rr                        lda tmp3
002A7Ar 3  D1 rr                        cmp (up),y              ; See if we are done.
002A7Cr 3  D0 02                        bne @have_wordlist
002A7Er 3               
002A7Er 3                               ; We ran out of wordlists to search.
002A7Er 3  80 44                        bra @words_done
002A80r 3               
002A80r 3               @have_wordlist:
002A80r 3                               ; start with last word in Dictionary
002A80r 3                               ; Get the current wordlist id
002A80r 3  18                           clc                     ; Index into byte array SEARCH-ORDER.
002A81r 3  69 1F                        adc #search_order_offset
002A83r 3  A8                           tay
002A84r 3  B1 rr                        lda (up),y              ; Get the index into array WORDLISTS
002A86r 3               
002A86r 3                               ; Get the DP for that wordlist.
002A86r 3  0A                           asl                     ; Turn offset into cells offset.
002A87r 3  18                           clc
002A88r 3  69 06                        adc #wordlists_offset
002A8Ar 3  A8                           tay
002A8Br 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
002A8Dr 3  95 00                        sta 0,x                 ; on the stack. ( nt )
002A8Fr 3  C8                           iny
002A90r 3  B1 rr                        lda (up),y
002A92r 3  95 01                        sta 1,x
002A94r 3               
002A94r 3               @loop:
002A94r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002A97r 3  20 rr rr                     jsr xt_name_to_string   ; ( nt addr u )
002A9Ar 3               
002A9Ar 3                               ; Insert line break if we're about to go past the end of the
002A9Ar 3                               ; line
002A9Ar 3  68                           pla
002A9Br 3  18                           clc
002A9Cr 3  75 00                        adc 0,x
002A9Er 3  1A                           inc                     ; don't forget the space between words
002A9Fr 3  C9 4F                        cmp #MAX_LINE_LENGTH    ; usually 79
002AA1r 3  90 05                        bcc @1
002AA3r 3               
002AA3r 3  20 rr rr                     jsr xt_cr
002AA6r 3  A9 00                        lda #0
002AA8r 3               @1:
002AA8r 3  48                           pha
002AA9r 3  20 rr rr                     jsr xt_type             ; ( nt )
002AACr 3               
002AACr 3  A9 20                        lda #AscSP
002AAEr 3  20 rr rr                     jsr emit_a
002AB1r 3               
002AB1r 3                               ; get next word, which begins two down
002AB1r 3  20 rr rr                     jsr xt_one_plus         ; 1+
002AB4r 3  20 rr rr                     jsr xt_one_plus         ; 1+
002AB7r 3  20 rr rr                     jsr xt_fetch            ; @ ( nt+1 )
002ABAr 3               
002ABAr 3                               ; if next address is zero, we're done
002ABAr 3  B5 00                        lda 0,x
002ABCr 3  15 01                        ora 1,x
002ABEr 3  D0 D4                        bne @loop
002AC0r 3               
002AC0r 3                               ; Move on to the next wordlist in the search order.
002AC0r 3  E6 rr                        inc tmp3
002AC2r 3  80 B2                        bra @wordlist_loop
002AC4r 3               
002AC4r 3               @words_done:
002AC4r 3  68                           pla                     ; dump counter
002AC5r 3               
002AC5r 3  E8                           inx
002AC6r 3  E8                           inx
002AC7r 3               
002AC7r 3  60           z_words:        rts
002AC8r 3               
002AC8r 3               
002AC8r 3               
002AC8r 3               ; ## WORDSIZE ( nt -- u ) "Get size of word in bytes"
002AC8r 3               ; ## "wordsize"  auto  Tali Forth
002AC8r 3                       ; """Given an word's name token (nt), return the size of the
002AC8r 3                       ; word's payload size in bytes (CFA plus PFA) in bytes. Does not
002AC8r 3                       ; count the final RTS.
002AC8r 3                       ; """
002AC8r 3               xt_wordsize:
002AC8r 3  20 rr rr                     jsr underflow_1
002ACBr 3               
002ACBr 3                               ; We get the start address of the word from its header entry
002ACBr 3                               ; for the start of the actual code (execution token, xt)
002ACBr 3                               ; which is four bytes down, and the pointer to the end of the
002ACBr 3                               ; code (z_word, six bytes down)
002ACBr 3  B5 00                        lda 0,x
002ACDr 3  85 rr                        sta tmp1
002ACFr 3  B5 01                        lda 1,x
002AD1r 3  85 rr                        sta tmp1+1
002AD3r 3               
002AD3r 3  A0 06                        ldy #6
002AD5r 3  B1 rr                        lda (tmp1),y    ; LSB of z
002AD7r 3  88                           dey
002AD8r 3  88                           dey
002AD9r 3               
002AD9r 3  38                           sec
002ADAr 3  F1 rr                        sbc (tmp1),y    ; LSB of xt
002ADCr 3  95 00                        sta 0,x
002ADEr 3               
002ADEr 3  A0 07                        ldy #7
002AE0r 3  B1 rr                        lda (tmp1),y    ; MSB of z
002AE2r 3  88                           dey
002AE3r 3  88                           dey
002AE4r 3               
002AE4r 3  F1 rr                        sbc (tmp1),y    ; MSB of xt
002AE6r 3  95 01                        sta 1,x
002AE8r 3               
002AE8r 3  60           z_wordsize:     rts
002AE9r 3               
002AE9r 3               
002AE9r 3               ; ## XOR ( n n -- n ) "Logically XOR TOS and NOS"
002AE9r 3               ; ## "xor"  auto  ANS core
002AE9r 3                       ; """https://forth-standard.org/standard/core/XOR"""
002AE9r 3               xt_xor:
002AE9r 3  20 rr rr                     jsr underflow_2
002AECr 3               
002AECr 3  B5 00                        lda 0,x
002AEEr 3  55 02                        eor 2,x
002AF0r 3  95 02                        sta 2,x
002AF2r 3               
002AF2r 3  B5 01                        lda 1,x
002AF4r 3  55 03                        eor 3,x
002AF6r 3  95 03                        sta 3,x
002AF8r 3               
002AF8r 3  E8                           inx
002AF9r 3  E8                           inx
002AFAr 3               
002AFAr 3  60           z_xor:          rts
002AFBr 3               
002AFBr 3               
002AFBr 3               ; ## ZERO ( -- 0 ) "Push 0 to Data Stack"
002AFBr 3               ; ## "0"  auto  Tali Forth
002AFBr 3                       ; """The disassembler assumes that this routine does not use Y. Note
002AFBr 3                       ; that CASE and FORTH-WORDLIST use the same routine, as the WD for Forth
002AFBr 3                       ; is 0."""
002AFBr 3               xt_case:
002AFBr 3               xt_forth_wordlist:
002AFBr 3               xt_zero:
002AFBr 3  CA                           dex             ; push
002AFCr 3  CA                           dex
002AFDr 3  74 00                        stz 0,x
002AFFr 3  74 01                        stz 1,x
002B01r 3               z_case:
002B01r 3               z_forth_wordlist:
002B01r 3               z_zero:
002B01r 3  60                           rts
002B02r 3               
002B02r 3               
002B02r 3               ; ## ZERO_EQUAL ( n -- f ) "Check if TOS is zero"
002B02r 3               ; ## "0="  auto  ANS core
002B02r 3                       ; """https://forth-standard.org/standard/core/ZeroEqual"""
002B02r 3               
002B02r 3               xt_zero_equal:
002B02r 3  20 rr rr                     jsr underflow_1
002B05r 3               
002B05r 3  B5 00                        lda 0,x
002B07r 3  15 01                        ora 1,x
002B09r 3  F0 04                        beq @zero
002B0Br 3               
002B0Br 3                               ; not a zero, so we need a FALSE flag (0)
002B0Br 3  A9 00                        lda #0
002B0Dr 3  80 02                        bra @store
002B0Fr 3               @zero:
002B0Fr 3                               ; We have a zero, so we need a TRUE flag (-1)
002B0Fr 3  A9 FF                        lda #$ff
002B11r 3               @store:
002B11r 3  95 00                        sta 0,x
002B13r 3  95 01                        sta 1,x
002B15r 3               
002B15r 3  60           z_zero_equal:   rts
002B16r 3               
002B16r 3               
002B16r 3               
002B16r 3               ; ## ZERO_GREATER ( n -- f ) "Return a TRUE flag if TOS is positive"
002B16r 3               ; ## "0>"  auto  ANS core ext
002B16r 3                       ; """https://forth-standard.org/standard/core/Zeromore"""
002B16r 3               
002B16r 3               xt_zero_greater:
002B16r 3  20 rr rr                     jsr underflow_1
002B19r 3               
002B19r 3  A0 00                        ldy #0          ; Default is FALSE (TOS is negative)
002B1Br 3               
002B1Br 3  B5 01                        lda 1,x         ; MSB
002B1Dr 3  30 05                        bmi @done       ; TOS is negative, keep FLASE
002B1Fr 3  15 00                        ora 0,x
002B21r 3  F0 01                        beq @done       ; TOS is zero, keep FALSE
002B23r 3               
002B23r 3  88                           dey             ; TOS is postive, make true
002B24r 3               @done:
002B24r 3  98                           tya
002B25r 3  95 00                        sta 0,x
002B27r 3  95 01                        sta 1,x
002B29r 3               
002B29r 3  60           z_zero_greater: rts
002B2Ar 3               
002B2Ar 3               
002B2Ar 3               
002B2Ar 3               ; ## ZERO_LESS ( n -- f ) "Return a TRUE flag if TOS negative"
002B2Ar 3               ; ## "0<"  auto  ANS core
002B2Ar 3                       ; """https://forth-standard.org/standard/core/Zeroless"""
002B2Ar 3               
002B2Ar 3               xt_zero_less:
002B2Ar 3  20 rr rr                     jsr underflow_1
002B2Dr 3               
002B2Dr 3  A0 00                        ldy #0          ; Default is FALSE (TOS positive)
002B2Fr 3               
002B2Fr 3  B5 01                        lda 1,x         ; MSB
002B31r 3  10 01                        bpl @done       ; TOS is positive, so keep FALSE
002B33r 3               
002B33r 3  88                           dey             ; TOS is negative, make TRUE
002B34r 3               @done:
002B34r 3  98                           tya
002B35r 3  95 00                        sta 0,x
002B37r 3  95 01                        sta 1,x
002B39r 3               
002B39r 3  60           z_zero_less:    rts
002B3Ar 3               
002B3Ar 3               
002B3Ar 3               
002B3Ar 3               ; ## ZERO_UNEQUAL ( m -- f ) "Return TRUE flag if not zero"
002B3Ar 3               ; ## "0<>"  auto  ANS core ext
002B3Ar 3                       ; """https://forth-standard.org/standard/core/Zerone"""
002B3Ar 3               
002B3Ar 3               xt_zero_unequal:
002B3Ar 3  20 rr rr                     jsr underflow_1
002B3Dr 3               
002B3Dr 3  A0 00                        ldy #0          ; default false
002B3Fr 3               
002B3Fr 3  B5 00                        lda 0,x
002B41r 3  15 01                        ora 1,x
002B43r 3  F0 01                        beq @got_zero
002B45r 3               
002B45r 3  88                           dey
002B46r 3               @got_zero:
002B46r 3  98                           tya
002B47r 3  95 00                        sta 0,x
002B49r 3  95 01                        sta 1,x
002B4Br 3               
002B4Br 3  60           z_zero_unequal: rts
002B4Cr 3               
002B4Cr 3               
002B4Cr 3               
002B4Cr 3               ; ==========================================================
002B4Cr 3               ; EDITOR words
002B4Cr 3               
002B4Cr 3               ; This routine is used by both enter-screen and erase-screen
002B4Cr 3               ; to get a buffer for the given screen number and set SCR to
002B4Cr 3               ; the given screen number.  This word is not in the dictionary.
002B4Cr 3               xt_editor_screen_helper:
002B4Cr 3  20 rr rr                     jsr xt_dup
002B4Fr 3  20 rr rr                     jsr xt_scr
002B52r 3  20 rr rr                     jsr xt_store
002B55r 3  20 rr rr                     jsr xt_buffer
002B58r 3               z_editor_screen_helper:
002B58r 3  60                           rts
002B59r 3               
002B59r 3               
002B59r 3               ; ## EDITOR_ENTER_SCREEN ( scr# -- ) "Enter all lines for given screen"
002B59r 3               ; ## "enter-screen"  auto  Tali Editor
002B59r 3               
002B59r 3               xt_editor_enter_screen:
002B59r 3                               ; Set the variable SCR and get a buffer for the
002B59r 3                               ; given screen number.
002B59r 3  20 rr rr                     jsr xt_editor_screen_helper
002B5Cr 3               
002B5Cr 3                               ; Drop the buffer address.
002B5Cr 3  20 rr rr                     jsr xt_drop
002B5Fr 3               
002B5Fr 3                               ; Overwrite the lines one at a time.
002B5Fr 3  64 rr                        stz editor1
002B61r 3               @prompt_loop:
002B61r 3                               ; Put the current line number on the stack.
002B61r 3  CA                           dex
002B62r 3  CA                           dex
002B63r 3  A5 rr                        lda editor1
002B65r 3  95 00                        sta 0,x
002B67r 3  74 01                        stz 1,x
002B69r 3               
002B69r 3                               ; Use the O word to prompt for overwrite.
002B69r 3  20 rr rr                     jsr xt_editor_o
002B6Cr 3               
002B6Cr 3                               ; Move on to the next line.
002B6Cr 3  E6 rr                        inc editor1
002B6Er 3  A9 10                        lda #16
002B70r 3  C5 rr                        cmp editor1
002B72r 3  D0 ED                        bne @prompt_loop
002B74r 3               
002B74r 3               z_editor_enter_screen:
002B74r 3  60                           rts
002B75r 3               
002B75r 3               
002B75r 3               
002B75r 3               ; ## EDITOR_ERASE_SCREEN ( scr# -- ) "Erase all lines for given screen"
002B75r 3               ; ## "erase-screen"  tested  Tali Editor
002B75r 3               xt_editor_erase_screen:
002B75r 3                               ; Set the variable SCR and get a buffer for the
002B75r 3                               ; given screen number.
002B75r 3  20 rr rr                     jsr xt_editor_screen_helper
002B78r 3               
002B78r 3                               ; Put 1024 (chars/screen) on stack.
002B78r 3  CA                           dex
002B79r 3  CA                           dex
002B7Ar 3  74 00                        stz 0,x
002B7Cr 3  A9 04                        lda #4          ; 4 in MSB makes 1024 ($400).
002B7Er 3  95 01                        sta 1,x
002B80r 3               
002B80r 3                               ; Erase the entire block (fill with spaces).
002B80r 3  20 rr rr                     jsr xt_blank
002B83r 3               
002B83r 3                               ; Mark buffer as updated.
002B83r 3  20 rr rr                     jsr xt_update
002B86r 3               
002B86r 3               z_editor_erase_screen:
002B86r 3  60                           rts
002B87r 3               
002B87r 3               
002B87r 3               ; ## EDITOR_EL ( line# -- ) "Erase the given line number"
002B87r 3               ; ## "el"  tested  Tali Editor
002B87r 3               xt_editor_el:
002B87r 3                               ; Turn the line number into buffer offset.
002B87r 3                               ; This also loads the block into the buffer if it's
002B87r 3                               ; not there for some reason.
002B87r 3  20 rr rr                     jsr xt_editor_line
002B8Ar 3               
002B8Ar 3                               ; Put 64 (# of chars/line) on the stack.
002B8Ar 3  CA                           dex
002B8Br 3  CA                           dex
002B8Cr 3  A9 40                        lda #64
002B8Er 3  95 00                        sta 0,x
002B90r 3  74 01                        stz 1,x
002B92r 3               
002B92r 3                               ; Fill with spaces.
002B92r 3  20 rr rr                     jsr xt_blank
002B95r 3               
002B95r 3                               ; Mark buffer as updated.
002B95r 3  20 rr rr                     jsr xt_update
002B98r 3               
002B98r 3  60           z_editor_el:    rts
002B99r 3               
002B99r 3               
002B99r 3               ; ## EDITOR_L ( -- ) "List the current screen"
002B99r 3               ; ## "l"  tested  Tali Editor
002B99r 3               
002B99r 3               xt_editor_l:
002B99r 3                               ; Load the current screen
002B99r 3  CA                           dex             ; Put SCR on the stack.
002B9Ar 3  CA                           dex
002B9Br 3  A0 02                        ldy #scr_offset
002B9Dr 3  B1 rr                        lda (up),y
002B9Fr 3  95 00                        sta 0,x
002BA1r 3  C8                           iny
002BA2r 3  B1 rr                        lda (up),y
002BA4r 3  95 01                        sta 1,x
002BA6r 3  20 rr rr                     jsr xt_block    ; Get the current screen.
002BA9r 3               
002BA9r 3  20 rr rr                     jsr xt_cr
002BACr 3               
002BACr 3                               ; Print the screen number.
002BACr 3                               ; We're using sliteral, so we need to set up the
002BACr 3                               ; appropriate data structure (see sliteral)
002BACr 3  80 08                        bra @after_screen_msg
002BAEr 3               
002BAEr 3               @screen_msg:
002BAEr 3  53 63 72 65                  .byte "Screen #"
002BB2r 3  65 6E 20 23  
002BB6r 3               
002BB6r 3               @after_screen_msg:
002BB6r 3  20 rr rr                     jsr sliteral_runtime
002BB9r 3  rr rr 08 00                  .word @screen_msg, @after_screen_msg-@screen_msg
002BBDr 3               
002BBDr 3  20 rr rr                     jsr xt_type
002BC0r 3               
002BC0r 3                               ; Put the screen number and printed size for u.r on the stack.
002BC0r 3  20 rr rr                     jsr xt_scr
002BC3r 3  20 rr rr                     jsr xt_fetch
002BC6r 3  CA                           dex
002BC7r 3  CA                           dex
002BC8r 3  A9 04                        lda #4          ; four spaces
002BCAr 3  95 00                        sta 0,x
002BCCr 3  74 01                        stz 1,x
002BCEr 3  20 rr rr                     jsr xt_u_dot_r
002BD1r 3               
002BD1r 3                               ; The address of the buffer is currently on the stack.
002BD1r 3                               ; Print 64 chars at a time. TYPE uses tmp1, so we'll
002BD1r 3                               ; keep track of the line number in tmp3.
002BD1r 3  64 rr                        stz tmp3
002BD3r 3               
002BD3r 3               @line_loop:
002BD3r 3  20 rr rr                     jsr xt_cr
002BD6r 3               
002BD6r 3                               ; Print the line number (2-space fixed width)
002BD6r 3  CA                           dex
002BD7r 3  CA                           dex
002BD8r 3  CA                           dex
002BD9r 3  CA                           dex
002BDAr 3  74 03                        stz 3,x
002BDCr 3  A5 rr                        lda tmp3
002BDEr 3  95 02                        sta 2,x
002BE0r 3  74 01                        stz 1,x
002BE2r 3  A9 02                        lda #2
002BE4r 3  95 00                        sta 0,x
002BE6r 3  20 rr rr                     jsr xt_u_dot_r
002BE9r 3  20 rr rr                     jsr xt_space
002BECr 3               
002BECr 3                               ; Print one line using the address on the stack.
002BECr 3  20 rr rr                     jsr xt_dup
002BEFr 3  CA                           dex
002BF0r 3  CA                           dex
002BF1r 3  A9 40                        lda #64
002BF3r 3  95 00                        sta 0,x
002BF5r 3  74 01                        stz 1,x
002BF7r 3  20 rr rr                     jsr xt_type
002BFAr 3               
002BFAr 3                               ; Add 64 to the address on the stack to move to the next line.
002BFAr 3  18                           clc
002BFBr 3  A9 40                        lda #64
002BFDr 3  75 00                        adc 0,x
002BFFr 3  95 00                        sta 0,x
002C01r 3  B5 01                        lda 1,x
002C03r 3  69 00                        adc #0      ; Add carry
002C05r 3  95 01                        sta 1,x
002C07r 3               
002C07r 3                               ; Increment the line number (held in tmp3)
002C07r 3  E6 rr                        inc tmp3
002C09r 3               
002C09r 3                               ; See if we are done.
002C09r 3  A5 rr                        lda tmp3
002C0Br 3  C9 10                        cmp #16
002C0Dr 3  D0 C4                        bne @line_loop
002C0Fr 3               
002C0Fr 3  20 rr rr                     jsr xt_cr
002C12r 3                               ; Drop the address on the stack.
002C12r 3  E8                           inx
002C13r 3  E8                           inx
002C14r 3               
002C14r 3  60           z_editor_l:            rts
002C15r 3               
002C15r 3               
002C15r 3               
002C15r 3               ; ## EDITOR_LINE ( line# -- c-addr ) "Turn a line number into address in current screen"
002C15r 3               ; ## "line"  tested  Tali Editor
002C15r 3               
002C15r 3               xt_editor_line:
002C15r 3  20 rr rr                     jsr underflow_1
002C18r 3               
002C18r 3                               ; Multiply the TOS by 64 (chars/line) to compute offset.
002C18r 3  A0 06                        ldy #6          ; *64 is same as left shift 6 times.
002C1Ar 3               @shift_tos_left:
002C1Ar 3  16 00                        asl 0,x         ; Shift TOS to the left
002C1Cr 3  36 01                        rol 1,x         ; ROL brings MSb from lower byte.
002C1Er 3  88                           dey
002C1Fr 3  D0 F9                        bne @shift_tos_left
002C21r 3                               ; Load the current screen into a buffer
002C21r 3                               ; and get the buffer address
002C21r 3  20 rr rr                     jsr xt_scr
002C24r 3  20 rr rr                     jsr xt_fetch
002C27r 3  20 rr rr                     jsr xt_block
002C2Ar 3               
002C2Ar 3                               ; Add the offset to the buffer base address.
002C2Ar 3  20 rr rr                     jsr xt_plus
002C2Dr 3               
002C2Dr 3  60           z_editor_line:  rts
002C2Er 3               
002C2Er 3               
002C2Er 3               
002C2Er 3               ; ## EDITOR_O ( line# -- ) "Overwrite the given line"
002C2Er 3               ; ## "o"  tested  Tali Editor
002C2Er 3               xt_editor_o:
002C2Er 3                               ; Print prompt
002C2Er 3  20 rr rr                     jsr xt_cr
002C31r 3  20 rr rr                     jsr xt_dup
002C34r 3  20 rr rr                     jsr xt_two
002C37r 3  20 rr rr                     jsr xt_u_dot_r
002C3Ar 3  20 rr rr                     jsr xt_space
002C3Dr 3  A9 2A                        lda #42         ; ASCII for *
002C3Fr 3  20 rr rr                     jsr emit_a
002C42r 3  20 rr rr                     jsr xt_space
002C45r 3               
002C45r 3                               ; Accept new input (directly into the buffer)
002C45r 3  20 rr rr                     jsr xt_editor_line
002C48r 3  20 rr rr                     jsr xt_dup      ; Save a copy of the line address for later.
002C4Br 3  CA                           dex
002C4Cr 3  CA                           dex
002C4Dr 3  A9 40                        lda #64         ; chars/line
002C4Fr 3  95 00                        sta 0,x
002C51r 3  74 01                        stz 1,x
002C53r 3  20 rr rr                     jsr xt_accept
002C56r 3               
002C56r 3                               ; Fill the rest with spaces.
002C56r 3                               ; Stack is currently ( line_address numchars_from_accept )
002C56r 3  20 rr rr                     jsr xt_dup
002C59r 3  20 rr rr                     jsr xt_not_rote ; -rot
002C5Cr 3  20 rr rr                     jsr xt_plus
002C5Fr 3  CA                           dex
002C60r 3  CA                           dex
002C61r 3  A9 40                        lda #64         ; chars/line
002C63r 3  95 00                        sta 0,x
002C65r 3  74 01                        stz 1,x
002C67r 3  20 rr rr                     jsr xt_rot
002C6Ar 3  20 rr rr                     jsr xt_minus
002C6Dr 3  20 rr rr                     jsr xt_blank
002C70r 3               
002C70r 3                               ; Mark buffer as updated.
002C70r 3  20 rr rr                     jsr xt_update
002C73r 3               
002C73r 3  60           z_editor_o:     rts
002C74r 3               
002C74r 3               ; ## LCDPUT ( s -- ) "Print single character to LCD"
002C74r 3               ; ## "lcdput" coded Custom
002C74r 3               xt_lcdput:
002C74r 3  20 rr rr                     jsr underflow_1
002C77r 3               
002C77r 3  B5 00                        lda 0,x
002C79r 3                       .ifdef lcd_print
002C79r 3                               jsr lcd_print
002C79r 3                       .endif
002C79r 3  E8                           inx
002C7Ar 3  E8                           inx
002C7Br 3  60           z_lcdput: rts
002C7Cr 3               
002C7Cr 3               
002C7Cr 3               ; ## LCDPRINT ( addr u -- ) "Print string to LCD"
002C7Cr 3               ; ## "lcdprint"  coded Custom
002C7Cr 3               
002C7Cr 3               xt_lcdprint:
002C7Cr 3  20 rr rr                     jsr underflow_2
002C7Fr 3               
002C7Fr 3                               ; Save the starting address into tmp1
002C7Fr 3  B5 02                        lda 2,x
002C81r 3  85 rr                        sta tmp1
002C83r 3  B5 03                        lda 3,x
002C85r 3  85 rr                        sta tmp1+1
002C87r 3               @loop:
002C87r 3                               ; done if length is zero
002C87r 3  B5 00                        lda 0,x
002C89r 3  15 01                        ora 1,x
002C8Br 3  F0 12                        beq @done
002C8Dr 3               
002C8Dr 3                               ; Send the current character
002C8Dr 3  B2 rr                        lda (tmp1)
002C8Fr 3                       .ifdef lcd_print
002C8Fr 3                               jsr lcd_print      ; avoids stack foolery
002C8Fr 3                       .endif
002C8Fr 3                               ; Move the address along (in tmp1)
002C8Fr 3  E6 rr                        inc tmp1
002C91r 3  D0 02                        bne @1
002C93r 3  E6 rr                        inc tmp1+1
002C95r 3               @1:
002C95r 3                               ; Reduce the count (on the data stack)
002C95r 3  B5 00                        lda 0,x
002C97r 3  D0 02                        bne @2
002C99r 3  D6 01                        dec 1,x
002C9Br 3               @2:
002C9Br 3  D6 00                        dec 0,x
002C9Dr 3               
002C9Dr 3  80 E8                        bra @loop
002C9Fr 3               @done:
002C9Fr 3  E8                           inx
002CA0r 3  E8                           inx
002CA1r 3  E8                           inx
002CA2r 3  E8                           inx
002CA3r 3               
002CA3r 3  60           z_lcdprint:         rts
002CA4r 3               
002CA4r 3               
002CA4r 3               
002CA4r 3               ; ## CLS ( -- ) "clea VGA screen"
002CA4r 3               ; ## "cls" coded Custom
002CA4r 3               xt_cls:
002CA4r 3                       .ifdef vga_clear
002CA4r 3                               jsr vga_clear
002CA4r 3                       .endif
002CA4r 3               
002CA4r 3  60           z_cls: rts
002CA5r 3               
002CA5r 3               
002CA5r 3               ; ## SPI_INIT ( -- ) "Init SPI system"
002CA5r 3               ; ## "spi_init" coded Custom
002CA5r 3               xt_spi_init:
002CA5r 3                       .ifdef spi_init
002CA5r 3                               jsr spi_init
002CA5r 3                       .endif
002CA5r 3  60           z_spi_init: rts
002CA6r 3               
002CA6r 3               
002CA6r 3               ; ## SPI_CLK_TOGGLE ( -- ) "Toggle SPI clock"
002CA6r 3               ; ## "spi_clk_toggle" coded Custom
002CA6r 3               xt_spi_clk_toggle:
002CA6r 3                       .ifdef spi_clk_toggle
002CA6r 3                               jsr spi_clk_toggle
002CA6r 3                       .endif
002CA6r 3  60           z_spi_clk_toggle: rts
002CA7r 3               
002CA7r 3               ; ## SPI_SELECT ( s -- ) "Select SPI slave"
002CA7r 3               ; ## "spi_select" coded Custom
002CA7r 3               xt_spi_select:
002CA7r 3  20 rr rr                     jsr underflow_1
002CAAr 3               
002CAAr 3  B5 00                        lda 0,x
002CACr 3                       .ifdef spi_select
002CACr 3                               jsr spi_select
002CACr 3                       .endif
002CACr 3  E8                           inx
002CADr 3  E8                           inx
002CAEr 3  60           z_spi_select: rts
002CAFr 3               
002CAFr 3               ; ## SPI_TRANSCEIVE ( s -- u ) "Send and receive spi data"
002CAFr 3               ; ## "spi_transceive" coded Custom
002CAFr 3               xt_spi_transceive:
002CAFr 3  20 rr rr                     jsr underflow_1
002CB2r 3               
002CB2r 3  B5 00                        lda 0,x
002CB4r 3                       .ifdef spi_transceive
002CB4r 3                               jsr spi_transceive
002CB4r 3                       .endif
002CB4r 3  95 00                        sta 0,x         ; put return value in TOS
002CB6r 3  74 01                        stz 1,X         ;reset value there
002CB8r 3  60           z_spi_transceive: rts
002CB9r 3               
002CB9r 3               ; ## SD_INIT ( s -- u ) "Send and receive spi data"
002CB9r 3               ; ## "spi_transceive" coded Custom
002CB9r 3               xt_sd_init:
002CB9r 3  20 rr rr                     jsr underflow_1
002CBCr 3               
002CBCr 3  B5 00                        lda 0,x
002CBEr 3                       .ifdef sd_init
002CBEr 3                               jsr sd_init
002CBEr 3                       .endif
002CBEr 3  95 00                        sta 0,x         ; put return value in TOS
002CC0r 3  74 01                        stz 1,X         ;reset value there
002CC2r 3  60           z_sd_init: rts
002CC3r 3               
002CC3r 3               ; ## SD_READSECTOR ( addr d -- u ) "Read SD sector"
002CC3r 3               ; ## "sd_readsector" coded Custom
002CC3r 3               xt_sd_readsector:
002CC3r 3  20 rr rr                     jsr underflow_3
002CC6r 3                       .ifdef sd_readsector
002CC6r 3                               ; get and save storage address
002CC6r 3                               lda 0,x
002CC6r 3                               sta sd_buffer_address
002CC6r 3                               lda 1, x
002CC6r 3                               sta sd_buffer_address + 1
002CC6r 3                               ; get and save sector number (32 bit number, double)
002CC6r 3                               lda 2, X
002CC6r 3                               sta SD_ARG + 3
002CC6r 3                               lda 3, X
002CC6r 3                               sta SD_ARG + 2
002CC6r 3                               lda 4, X
002CC6r 3                               sta SD_ARG + 1
002CC6r 3                               lda 5, X
002CC6r 3                               sta SD_ARG
002CC6r 3                               lda #1
002CC6r 3                               sta SD_CRC
002CC6r 3               
002CC6r 3                               jsr sd_readsector
002CC6r 3                       .endif
002CC6r 3  95 00                        sta 0,x         ; put return value in TOS
002CC8r 3  74 01                        stz 1,X         ;reset value there
002CCAr 3               
002CCAr 3  E8                           inx
002CCBr 3  E8                           inx
002CCCr 3  E8                           inx
002CCDr 3  E8                           inx
002CCEr 3               
002CCEr 3  60           z_sd_readsector: rts
002CCFr 3               
002CCFr 3               
002CCFr 3               ; ## FAT32_INIT ( u -- u ) "initialize FAT32 file system on passed spi drive address"
002CCFr 3               ; ## "fat32_init" coded Custom
002CCFr 3               xt_fat32_init:
002CCFr 3  20 rr rr                     jsr underflow_1
002CD2r 3               
002CD2r 3  B5 00                        lda 0,x
002CD4r 3                       .ifdef sd_init
002CD4r 3                               jsr sd_init
002CD4r 3                               bne @error
002CD4r 3                       .endif
002CD4r 3                       .ifdef fat32_init
002CD4r 3                               jsr fat32_init
002CD4r 3                               beq @end
002CD4r 3                       .endif
002CD4r 3                       .ifdef fat32_openroot
002CD4r 3                               ; jsr fat32_openroot
002CD4r 3                               ; beq @end
002CD4r 3                       .endif
002CD4r 3               @error:
002CD4r 3  A9 01                        lda #1
002CD6r 3               @end:
002CD6r 3  95 00                        sta 0,x         ; put return value in TOS
002CD8r 3  74 01                        stz 1,X         ;reset value there
002CDAr 3  60           z_fat32_init: rts
002CDBr 3               
002CDBr 3               
002CDBr 3               ; ## FAT32_ROOT ( -- u ) "initialize FAT32 file system on passed spi drive address"
002CDBr 3               ; ## "fat32_root" coded Custom
002CDBr 3               xt_fat32_root:
002CDBr 3               
002CDBr 3  CA                   dex
002CDCr 3  CA                   dex
002CDDr 3                       .ifdef fat32_openroot
002CDDr 3                               jsr fat32_openroot
002CDDr 3                               beq @end
002CDDr 3                       .endif
002CDDr 3                       ; .ifdef fat32_readdirent
002CDDr 3                       ;         jsr fat32_readdirent
002CDDr 3                       ;         bcc @end
002CDDr 3                       ; .endif
002CDDr 3               
002CDDr 3               @error:
002CDDr 3  A9 01                lda #1
002CDFr 3               @end:
002CDFr 3               
002CDFr 3  95 00                sta 0,x         ; put return value in TOS
002CE1r 3  74 01                stz 1,X         ;reset value there
002CE3r 3  60           z_fat32_root: rts
002CE4r 3               
002CE4r 3               ; ## FAT32_FIND ( addr u -- u ) "Open file from initialized fat32 FS"
002CE4r 3               ; ## "fat32_find" coded Custom
002CE4r 3               xt_fat32_find:
002CE4r 3               .ifdef fat32_finddirent
002CE4r 3               textfile:  .byte "FILE.TXT   ", 0
002CE4r 3                               lda #<textfile
002CE4r 3                               sta fat32_filenamepointer
002CE4r 3                               lda #>textfile
002CE4r 3                               sta fat32_filenamepointer+1
002CE4r 3               
002CE4r 3                               jsr fat32_finddirent    ; find the file from its name
002CE4r 3                               bne @error
002CE4r 3               
002CE4r 3                               jsr fat32_file_read
002CE4r 3                               bne @error
002CE4r 3                               dex
002CE4r 3                               dex
002CE4r 3                               lda sd_buffer_address
002CE4r 3                               sta 0,x
002CE4r 3                               lda sd_buffer_address+1
002CE4r 3                               sta 1, x
002CE4r 3               ;                 phy
002CE4r 3               ;         ldy #0
002CE4r 3               ; @printloop:
002CE4r 3               ;         lda (sd_buffer_address),y
002CE4r 3               ;         beq @ex
002CE4r 3               ;         jsr kernel_putc
002CE4r 3               ; @ex:
002CE4r 3               ;         ply
002CE4r 3                       jmp @end
002CE4r 3               
002CE4r 3                               jmp @end
002CE4r 3               
002CE4r 3                               jsr underflow_2
002CE4r 3                               phy
002CE4r 3                               ldy 0,x ; length of string
002CE4r 3                               lda #0
002CE4r 3               @reset_loop:
002CE4r 3                           .ifdef fat32_finddirent
002CE4r 3                               sta (fat32_filenamepointer),y
002CE4r 3                               iny
002CE4r 3                               cpy #11
002CE4r 3                               bcc @reset_loop
002CE4r 3                           .endif
002CE4r 3                               inx     ; get address
002CE4r 3                               inx
002CE4r 3                           .ifdef fat32_finddirent
002CE4r 3                               lda 0,x
002CE4r 3                               sta fat32_filenamepointer
002CE4r 3                               lda 1,x
002CE4r 3                               sta fat32_filenamepointer+1
002CE4r 3                           .endif
002CE4r 3               
002CE4r 3                               ply
002CE4r 3                           .ifdef fat32_finddirent
002CE4r 3                               jsr fat32_finddirent    ; find the file from its name
002CE4r 3                               beq @end
002CE4r 3                           .endif
002CE4r 3               .endif
002CE4r 3               @error:
002CE4r 3  A9 01                        lda #1
002CE6r 3               @end:
002CE6r 3  95 00                        sta 0,x         ; put return value in TOS
002CE8r 3  74 01                        stz 1,X         ;reset value there
002CEAr 3  60           z_fat32_find: rts
002CEBr 3               
002CEBr 3               ; ## time ( -- addr ) "get time storage address"
002CEBr 3               ; ## "time" coded Custom
002CEBr 3               xt_time:
002CEBr 3                       .ifdef time
002CEBr 3  A9 rr                lda #time
002CEDr 3                       .else
002CEDr 3                       lda #0
002CEDr 3                       .endif
002CEDr 3  CA                   dex
002CEEr 3  CA                   dex
002CEFr 3  95 00                sta 0,x
002CF1r 3  74 01                stz 1,x
002CF3r 3               
002CF3r 3               
002CF3r 3  60           z_time: rts
002CF4r 3               
002CF4r 3               xt_cf_init:
002CF4r 3               .ifdef cf_init
002CF4r 3                       ; jsr underflow_1
002CF4r 3                       ; save CF card address
002CF4r 3                       ; lda 0, x
002CF4r 3                       ; sta CF_ADDRESS
002CF4r 3                       ; lda 1, x
002CF4r 3                       ; sta CF_ADDRESS + 1
002CF4r 3  20 rr rr             jsr cf_init
002CF7r 3                       ; inx
002CF7r 3                       ; inx
002CF7r 3               .endif
002CF7r 3               z_cf_init:
002CF7r 3  60                   rts
002CF8r 3               
002CF8r 3               ; ## cf_fat_init ( addr -- ) "Initialize FAT16 on CF card at specified address"
002CF8r 3               ; ## "cf_fat_init" coded Custom
002CF8r 3               xt_cf_fat_init:
002CF8r 3               check_fat_sector_signature:
002CF8r 3               
002CF8r 3               .ifdef cf_init
002CF8r 3                       ; jsr underflow_1
002CF8r 3                       ; save CF card address
002CF8r 3                       ; lda 0, x
002CF8r 3                       ; sta CF_ADDRESS
002CF8r 3                       ; lda 1, x
002CF8r 3                       ; sta CF_ADDRESS + 1
002CF8r 3               
002CF8r 3                       ; initialize CF card
002CF8r 3  20 rr rr             jsr cf_init
002CFBr 3                       ; prepare to read first sector
002CFBr 3  9C rr rr             stz CF_LBA
002CFEr 3  9C rr rr             stz CF_LBA + 1
002D01r 3  9C rr rr             stz CF_LBA + 2
002D04r 3  9C rr rr             stz CF_LBA + 3
002D07r 3               
002D07r 3               
002D07r 3                       ; LBA is set, now read sector
002D07r 3  20 rr rr             jsr cf_read_sector
002D0Ar 3                       ; we now have the first sector in FAT_BUFFER
002D0Ar 3               .ifdef check_fat_sector_signature
002D0Ar 3                       ; check signature
002D0Ar 3  AD rr rr             lda FAT_BUFFER + $1FE
002D0Dr 3  C9 55                cmp #$55
002D0Fr 3  D0 07                bne @sigerr
002D11r 3  AD rr rr             lda FAT_BUFFER + $1FF
002D14r 3  C9 AA                cmp #$AA
002D16r 3  F0 03                beq @sigok
002D18r 3               @sigerr:
002D18r 3  4C rr rr             jmp cf_fat_init_error
002D1Br 3               @sigok:
002D1Br 3               .endif
002D1Br 3                       ; check if this is MBR or FAT start sector
002D1Br 3  AD rr rr             lda FAT_BUFFER + 54
002D1Er 3  C9 46                cmp #'F'
002D20r 3  D0 10                bne @read_fat_sector
002D22r 3  AD rr rr             lda FAT_BUFFER + 55
002D25r 3  C9 41                cmp #'A'
002D27r 3  D0 09                bne @read_fat_sector
002D29r 3  AD rr rr             lda FAT_BUFFER + 56
002D2Cr 3  C9 54                cmp #'T'
002D2Er 3  D0 02                bne @read_fat_sector
002D30r 3               
002D30r 3  80 38                bra @is_fat_sector
002D32r 3               
002D32r 3               @read_fat_sector:
002D32r 3               
002D32r 3                       ; read FAT start sector
002D32r 3                       ; and save to sector address to read
002D32r 3  AD rr rr             lda FAT_BUFFER + 454
002D35r 3  8D rr rr             sta CF_LBA
002D38r 3  8D rr rr             sta CF_PART_START
002D3Br 3  AD rr rr             lda FAT_BUFFER + 455
002D3Er 3  8D rr rr             sta CF_LBA + 1
002D41r 3  8D rr rr             sta CF_PART_START + 1
002D44r 3  AD rr rr             lda FAT_BUFFER + 456
002D47r 3  8D rr rr             sta CF_LBA + 2
002D4Ar 3  8D rr rr             sta CF_PART_START + 2
002D4Dr 3  AD rr rr             lda FAT_BUFFER + 457
002D50r 3  8D rr rr             sta CF_LBA + 3
002D53r 3  8D rr rr             sta CF_PART_START + 3
002D56r 3               
002D56r 3                       ; LBA is set, now read sector
002D56r 3  20 rr rr             jsr cf_read_sector
002D59r 3                       ; We now have the FAT start sector in the buffer
002D59r 3               .ifdef check_fat_sector_signature
002D59r 3                       ; check signature
002D59r 3  AD rr rr             lda FAT_BUFFER + $1FE
002D5Cr 3  C9 55                cmp #$55
002D5Er 3  D0 07                bne @sigerr2
002D60r 3  AD rr rr             lda FAT_BUFFER + $1FF
002D63r 3  C9 AA                cmp #$AA
002D65r 3  F0 03                beq @is_fat_sector
002D67r 3               @sigerr2:
002D67r 3  4C rr rr             jmp cf_fat_init_error2
002D6Ar 3               @is_fat_sector:
002D6Ar 3               .endif
002D6Ar 3                       ; Check if its partition first sector
002D6Ar 3  AD rr rr             lda FAT_BUFFER + 54
002D6Dr 3  C9 46                cmp #'F'
002D6Fr 3  D0 F6                bne @sigerr2
002D71r 3  AD rr rr             lda FAT_BUFFER + 55
002D74r 3  C9 41                cmp #'A'
002D76r 3  D0 EF                bne @sigerr2
002D78r 3  AD rr rr             lda FAT_BUFFER + 56
002D7Br 3  C9 54                cmp #'T'
002D7Dr 3  D0 E8                bne @sigerr2
002D7Fr 3                       ; Save FAT sectors count
002D7Fr 3  AD rr rr 8D          cp16 FAT_BUFFER + 22, CF_FAT_SEC_CNT
002D83r 3  rr rr AD rr  
002D87r 3  rr 8D rr rr  
002D8Br 3                       ; Get the sectors per cluster
002D8Br 3  AD rr rr             lda FAT_BUFFER + 13
002D8Er 3  8D rr rr             sta CF_SEC_PER_CLUS
002D91r 3                       ; get the number of directory entries in the root directory
002D91r 3  AD rr rr 8D          cp16 FAT_BUFFER + 17, CF_ROOT_ENT_CNT
002D95r 3  rr rr AD rr  
002D99r 3  rr 8D rr rr  
002D9Dr 3               
002D9Dr 3                       ;($600 * 32 + 511) / 512
002D9Dr 3                       ; RootDirSectors = ((BPB_RootEntCnt * 32) + (BPB_BytsPerSec – 1)) / BPB_BytsPerSec;
002D9Dr 3  AD rr rr 8D          cp16 CF_ROOT_ENT_CNT, CF_ROOT_DIR_SECS
002DA1r 3  rr rr AD rr  
002DA5r 3  rr 8D rr rr  
002DA9r 3                       ; multiply by 32
002DA9r 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002DADr 3  rr rr        
002DAFr 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002DB3r 3  rr rr        
002DB5r 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002DB9r 3  rr rr        
002DBBr 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002DBFr 3  rr rr        
002DC1r 3  0E rr rr 2E          asl16 CF_ROOT_DIR_SECS
002DC5r 3  rr rr        
002DC7r 3                       ; add 512
002DC7r 3  EE rr rr             inc CF_ROOT_DIR_SECS+1
002DCAr 3  EE rr rr             inc CF_ROOT_DIR_SECS+1
002DCDr 3                       ; subtract 1
002DCDr 3  AD rr rr D0          dec16 CF_ROOT_DIR_SECS
002DD1r 3  03 CE rr rr  
002DD5r 3  CE rr rr     
002DD8r 3                       ; divide by 512
002DD8r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002DDCr 3  rr rr        
002DDEr 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002DE2r 3  rr rr        
002DE4r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002DE8r 3  rr rr        
002DEAr 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002DEEr 3  rr rr        
002DF0r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002DF4r 3  rr rr        
002DF6r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002DFAr 3  rr rr        
002DFCr 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002E00r 3  rr rr        
002E02r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002E06r 3  rr rr        
002E08r 3  4E rr rr 6E          lsr16 CF_ROOT_DIR_SECS
002E0Cr 3  rr rr        
002E0Er 3               
002E0Er 3                       ; FirstRootDirSecNum = BPB_ResvdSecCnt + (BPB_NumFATs * BPB_FATSz16) + FAT_PART_START;
002E0Er 3                       ; CF_FIRST_ROOT_SEC = 1 + 2*CF_FAT_SEC_CNT + FAT_PART_START
002E0Er 3               
002E0Er 3               
002E0Er 3  AD rr rr 8D          cp16 CF_FAT_SEC_CNT, CF_FIRST_ROOT_SEC
002E12r 3  rr rr AD rr  
002E16r 3  rr 8D rr rr  
002E1Ar 3  0E rr rr 2E          asl16 CF_FIRST_ROOT_SEC
002E1Er 3  rr rr        
002E20r 3  EE rr rr D0          inc16 CF_FIRST_ROOT_SEC
002E24r 3  03 EE rr rr  
002E28r 3  18 AD rr rr          add16 CF_FIRST_ROOT_SEC, CF_PART_START, CF_FIRST_ROOT_SEC
002E2Cr 3  6D rr rr 8D  
002E30r 3  rr rr AD rr  
002E3Br 3               
002E3Br 3  AD rr rr 8D          cp16 CF_FIRST_ROOT_SEC, CF_CURRENT_DIR_SEC
002E3Fr 3  rr rr AD rr  
002E43r 3  rr 8D rr rr  
002E47r 3               
002E47r 3                       ; FirstDataSector = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors;
002E47r 3                       ; CF_FIRST_DATA_SEC = 1 + 2*CF_FAT_SEC_CNT + CF_ROOT_DIR_SECS
002E47r 3  18 AD rr rr          add16 CF_FIRST_ROOT_SEC, CF_ROOT_DIR_SECS, CF_FIRST_DATA_SEC
002E4Br 3  6D rr rr 8D  
002E4Fr 3  rr rr AD rr  
002E5Ar 3               
002E5Ar 3                       ; print volume label
002E5Ar 3  AD rr rr 20          printstr FAT_BUFFER + 43, 11
002E5Er 3  rr rr AD rr  
002E62r 3  rr 20 rr rr  
002E9Cr 3                       ; printascii cf_fat_mounted_message
002E9Cr 3                       ; jsr xt_cr
002E9Cr 3               
002E9Cr 3               cf_fat_init_exit:
002E9Cr 3  CA                   dex
002E9Dr 3  CA                   dex
002E9Er 3  A9 rr                lda #<CF_LBA
002EA0r 3  95 00                sta 0, x
002EA2r 3  A9 rr                lda #>CF_LBA
002EA4r 3  95 01                sta 1, x
002EA6r 3               
002EA6r 3               .endif
002EA6r 3               z_cf_fat_init:
002EA6r 3  60                   rts
002EA7r 3               
002EA7r 3               cf_fat_init_error:
002EA7r 3  DA A2 00 BD          printascii cf_fat_mounted_error1
002EABr 3  rr rr F0 06  
002EAFr 3  20 rr rr E8  
002EB6r 3  20 rr rr             jsr xt_cr
002EB9r 3  4C rr rr             jmp xt_abort
002EBCr 3               cf_fat_init_error2:
002EBCr 3  DA A2 00 BD          printascii cf_fat_mounted_error2
002EC0r 3  rr rr F0 06  
002EC4r 3  20 rr rr E8  
002ECBr 3  20 rr rr             jsr xt_cr
002ECEr 3  4C rr rr             jmp xt_abort
002ED1r 3               
002ED1r 3               cf_fat_mounted_error1:
002ED1r 3  45 72 72 6F          .asciiz "Error reading boot sector"
002ED5r 3  72 20 72 65  
002ED9r 3  61 64 69 6E  
002EEBr 3               cf_fat_mounted_error2:
002EEBr 3  45 72 72 6F          .asciiz "Error reading FAT sector"
002EEFr 3  72 20 72 65  
002EF3r 3  61 64 69 6E  
002F04r 3  20 00        fat_entry_size: .byte $20, 0
002F06r 3               
002F06r 3               ls_header:
002F06r 3  4E 41 4D 45          .asciiz "NAME     EXT  TYPE  SIZE"
002F0Ar 3  20 20 20 20  
002F0Er 3  20 45 58 54  
002F1Fr 3               xt_cf_ls:
002F1Fr 3               .ifdef cf_init
002F1Fr 3                       ; read the current directory entry
002F1Fr 3                       ; and save the contents to be displayed later
002F1Fr 3               
002F1Fr 3                       ; check if fat is inited
002F1Fr 3  AD rr rr             lda CF_SEC_PER_CLUS
002F22r 3  D0 08                bne @fatok
002F24r 3  20 rr rr             jsr xt_cf_fat_init
002F27r 3  E8                   inx     ; drop fat_init return value
002F28r 3  E8                   inx
002F29r 3  20 rr rr             jsr xt_cr
002F2Cr 3               
002F2Cr 3               @fatok:
002F2Cr 3  AD rr rr 8D          cp16 CF_CURRENT_DIR_SEC, CF_LBA
002F30r 3  rr rr AD rr  
002F34r 3  rr 8D rr rr  
002F38r 3  9C rr rr             stz CF_LBA + 2
002F3Br 3  9C rr rr             stz CF_LBA + 3
002F3Er 3  20 rr rr             jsr cf_read_sector
002F41r 3               
002F41r 3                       ; current directory first sector is now in buffer
002F41r 3                       ; display file names
002F41r 3  20 rr rr             jsr xt_cr
002F44r 3  DA A2 00 BD          printascii ls_header
002F48r 3  rr rr F0 06  
002F4Cr 3  20 rr rr E8  
002F53r 3  20 rr rr             jsr xt_cr
002F56r 3               
002F56r 3  A9 rr                lda #<FAT_BUFFER
002F58r 3  85 rr                sta editor3
002F5Ar 3  A9 rr                lda #>FAT_BUFFER
002F5Cr 3  85 rr                sta editor3 + 1
002F5Er 3               
002F5Er 3  5A                   phy
002F5Fr 3               @outerloop:
002F5Fr 3  A0 0B                ldy #11
002F61r 3  B1 rr                lda (editor3), y
002F63r 3  C9 0F                cmp #$0F                ; ignore long filenames
002F65r 3  F0 2A                beq @next_entry
002F67r 3  A0 00                ldy #0
002F69r 3  B1 rr                lda (editor3), Y
002F6Br 3  F0 35                beq @exit               ; if zero, it means we reached the end of the list
002F6Dr 3  C9 E5                cmp #$E5                ; if $E5, it means the entry is deleted, so go to next entry
002F6Fr 3  F0 20                beq @next_entry
002F71r 3               @loop:
002F71r 3  B1 rr                lda (editor3), y
002F73r 3  20 rr rr             jsr emit_a
002F76r 3  C8                   iny
002F77r 3  C0 08                cpy #8
002F79r 3  D0 05                bne @check_end          ; print space after name and before extension
002F7Br 3  A9 20                lda #' '
002F7Dr 3  20 rr rr             jsr emit_a
002F80r 3               @check_end:
002F80r 3  C0 0B                cpy #11
002F82r 3  90 ED                bcc @loop
002F84r 3                       ; read entry type
002F84r 3  B1 rr                lda (editor3), y
002F86r 3  20 rr rr             jsr print_entry_type
002F89r 3               
002F89r 3  20 rr rr             jsr print_entry_size
002F8Cr 3  A9 0D                lda #$0D
002F8Er 3  20 rr rr             jsr emit_a
002F91r 3               @next_entry:
002F91r 3  18 A5 rr 6D          add16 editor3, fat_entry_size, editor3
002F95r 3  rr rr 85 rr  
002F99r 3  A5 rr 6D rr  
002FA0r 3  80 BD                bra @outerloop
002FA2r 3               @exit:
002FA2r 3  7A                   ply
002FA3r 3               .endif
002FA3r 3               
002FA3r 3                       ; dex
002FA3r 3                       ; dex
002FA3r 3                       ; lda #<FAT_BUFFER
002FA3r 3                       ; sta 0, x
002FA3r 3                       ; lda #>FAT_BUFFER
002FA3r 3                       ; sta 1, x
002FA3r 3               
002FA3r 3               z_cf_ls:
002FA3r 3  60                   rts
002FA4r 3               
002FA4r 3               print_entry_size:
002FA4r 3  5A                   phy
002FA5r 3               
002FA5r 3  CA                   dex
002FA6r 3  CA                   dex
002FA7r 3  CA                   dex
002FA8r 3  CA                   dex
002FA9r 3               
002FA9r 3  A0 1C                ldy #28
002FABr 3  B1 rr                lda (editor3), y
002FADr 3  95 02                sta 2,x
002FAFr 3  A0 1D                ldy #29
002FB1r 3  B1 rr                lda (editor3), y
002FB3r 3  95 03                sta 3,x
002FB5r 3               
002FB5r 3  A0 1E                ldy #30
002FB7r 3  B1 rr                lda (editor3), y
002FB9r 3  95 00                sta 0,x
002FBBr 3               
002FBBr 3  A0 1F                ldy #31
002FBDr 3  B1 rr                lda (editor3), y
002FBFr 3  95 01                sta 1,x
002FC1r 3  20 rr rr             jsr xt_ud_dot
002FC4r 3  7A                   ply
002FC5r 3  60                   rts
002FC6r 3               
002FC6r 3               print_entry_type:
002FC6r 3  29 10                and #$10
002FC8r 3  D0 02                bne @is_dir
002FCAr 3  80 11                bra @is_file
002FCCr 3               @is_dir:
002FCCr 3  DA A2 00 BD          printascii entry_type_dir
002FD0r 3  rr rr F0 06  
002FD4r 3  20 rr rr E8  
002FDBr 3  80 0F                bra @exit
002FDDr 3               @is_file:
002FDDr 3  DA A2 00 BD          printascii entry_type_file
002FE1r 3  rr rr F0 06  
002FE5r 3  20 rr rr E8  
002FECr 3               @exit:
002FECr 3  60                   rts
002FEDr 3               
002FEDr 3  20 20 20 44  entry_type_dir: .asciiz "   D    "
002FF1r 3  20 20 20 20  
002FF5r 3  00           
002FF6r 3  20 20 20 46  entry_type_file: .asciiz "   F    "
002FFAr 3  20 20 20 20  
002FFEr 3  00           
002FFFr 3               
002FFFr 3               xt_cf_info:
002FFFr 3               .ifdef cf_init
002FFFr 3  20 rr rr             jsr cf_init
003002r 3  20 rr rr             jsr cf_wait
003005r 3  A9 EC                lda #$EC
003007r 3  8D D7 FF             sta CF_ADDRESS + 7
00300Ar 3  CA                   dex
00300Br 3  CA                   dex
00300Cr 3  A9 rr                lda #<FAT_BUFFER
00300Er 3  95 00                sta 0, x
003010r 3  A9 rr                lda #>FAT_BUFFER
003012r 3  95 01                sta 1, x
003014r 3  20 rr rr             jsr cf_read
003017r 3               
003017r 3               .endif
003017r 3               z_cf_info:
003017r 3  60                   rts
003018r 3               
003018r 3               ; ## cf_readsector ( double -- addr ) "Set LBA block and read to buffer"
003018r 3               ; ## "cf_readsector" coded Custom
003018r 3               xt_cf_readsector:
003018r 3               .ifdef cf_init
003018r 3  20 rr rr             jsr underflow_2
00301Br 3                       ; most significant part is TOS
00301Br 3  B5 00                lda 0, x
00301Dr 3  8D rr rr             sta CF_LBA + 2
003020r 3  B5 01                lda 1, x
003022r 3  8D rr rr             sta CF_LBA + 3
003025r 3                       ; least significant part is NOS
003025r 3  B5 02                lda 2, x
003027r 3  8D rr rr             sta CF_LBA + 0
00302Ar 3  B5 03                lda 3, x
00302Cr 3  8D rr rr             sta CF_LBA + 1
00302Fr 3                       ; LBA is set, now read sector
00302Fr 3  20 rr rr             jsr cf_init
003032r 3               
003032r 3  A9 rr                lda #<FAT_BUFFER
003034r 3  95 02                sta 2, x
003036r 3               
003036r 3  A9 rr                lda #>FAT_BUFFER
003038r 3               
003038r 3  95 03                sta 3, x
00303Ar 3               
00303Ar 3  20 rr rr             jsr cf_read_sector
00303Dr 3               
00303Dr 3                       ; return buffer address
00303Dr 3  E8                   inx
00303Er 3  E8                   inx
00303Fr 3               .endif
00303Fr 3               z_cf_readsector:
00303Fr 3  60                   rts
003040r 3               
003040r 3               
003040r 3               
003040r 3               ; END
003040r 3               
003040r 3               
003040r 2                   .include "headers.s"          ; Headers of native words
003040r 3               ; Dictionary Headers for Tali Forth 2
003040r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
003040r 3               ; First version: 05. Dec 2016 (Liara Forth)
003040r 3               ; This version: 29. Dec 2018
003040r 3               
003040r 3               ; Dictionary headers are kept separately from the code, which allows various
003040r 3               ; tricks in the code. We roughly follow the Gforth terminology: The Execution
003040r 3               ; Token (xt) is the address of the first byte of a word's code that can be, uh,
003040r 3               ; executed; the Name Token (nt) is a pointer to the beginning of the word's
003040r 3               ; header in the Dictionary. There the link to the next word in the Dictionary
003040r 3               ; is always one cell down from the current word's own nt. In the code itself,
003040r 3               ; we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.
003040r 3               
003040r 3               ; This gives us the following header structure:
003040r 3               
003040r 3               ;              8 bit     8 bit
003040r 3               ;               LSB       MSB
003040r 3               ; nt_word ->  +--------+--------+
003040r 3               ;          +0 | Length | Status |
003040r 3               ;             +--------+--------+
003040r 3               ;          +2 | Next Header     | -> nt_next_word
003040r 3               ;             +-----------------+
003040r 3               ;          +4 | Start of Code   | -> xt_word
003040r 3               ;             +-----------------+
003040r 3               ;          +6 | End of Code     | -> z_word
003040r 3               ;             +--------+--------+
003040r 3               ;          +8 | Name   |        |
003040r 3               ;             +--------+--------+
003040r 3               ;             |        |        |
003040r 3               ;             +--------+--------+
003040r 3               ;             |        |  ...   | (name string does not end with a zero)
003040r 3               ;          +n +--------+--------+
003040r 3               
003040r 3               ; The Status Byte is created by adding the flags defined in definitions.asm,
003040r 3               ; which are:
003040r 3               
003040r 3               ;       CO - Compile Only
003040r 3               ;       IM - Immediate Word
003040r 3               ;       NN - Never Native Compile (must always be called by JSR)
003040r 3               ;       AN - Always Native Compile (may not be called by JSR)
003040r 3               ;       UF - Contains underflow check
003040r 3               ;       HC - Has CFA (words created by CREATE and DOES> only)
003040r 3               
003040r 3               ; Note there are currently two bits unused.
003040r 3               
003040r 3               ; By default, all existing words can be natively compiled (compiled inline) or
003040r 3               ; as a subroutine jump target; the system decides which variant to use based on
003040r 3               ; a threshold the user can set. By default, all user-created words are flagged
003040r 3               ; never-native. The user can override this by using the always-native word
003040r 3               ; just after defining their new word.  The NN flag forbids native compiling,
003040r 3               ; the AN flag forces it.
003040r 3               
003040r 3               ; The last word (top word in code) is always BYE. It is marked as the last word
003040r 3               ; by its value of 0000 in its Next Header field. The words are sorted with the
003040r 3               ; more common ones first (further down in code) so they are found earlier.
003040r 3               ; Anything to do with output comes later (further up) because things will
003040r 3               ; always be slow if there is a human involved.
003040r 3               
003040r 3               ; The initial skeleton of this list was automatically generated by a script
003040r 3               ; in the tools folder and then sorted by hand.
003040r 3               
003040r 3               nt_bye:
003040r 3  03                   .byte 3         ; length of word strings
003041r 3  00                   .byte 0         ; status byte
003042r 3  00 00                .word 0000      ; next word in Dictionary, 0000 signals end
003044r 3  rr rr                .word xt_bye    ; start of code block (xt of this word)
003046r 3  rr rr                .word z_bye     ; end of code (RTS)
003048r 3  62 79 65             .byte "bye"     ; word name, always lower case, not zero-terminated
00304Br 3               
00304Br 3               
00304Br 3               nt_cold:
00304Br 3  04 00                .byte 4, 0
00304Dr 3  rr rr rr rr          .word nt_bye, xt_cold, z_cold
003051r 3  rr rr        
003053r 3  63 6F 6C 64          .byte "cold"
003057r 3               
003057r 3               nt_lcdput:
003057r 3  06 10                .byte 6, UF
003059r 3  rr rr rr rr          .word nt_cold, xt_lcdput, z_lcdput
00305Dr 3  rr rr        
00305Fr 3  6C 63 64 70          .byte "lcdput"
003063r 3  75 74        
003065r 3               
003065r 3               nt_lcdprint:
003065r 3  08 10                .byte 8, UF
003067r 3  rr rr rr rr          .word nt_lcdput, xt_lcdprint, z_lcdprint
00306Br 3  rr rr        
00306Dr 3  6C 63 64 70          .byte "lcdprint"
003071r 3  72 69 6E 74  
003075r 3               
003075r 3               nt_cls:
003075r 3  03 00                .byte 3, 0
003077r 3  rr rr rr rr          .word nt_lcdprint, xt_cls, z_cls
00307Br 3  rr rr        
00307Dr 3  63 6C 73             .byte "cls"
003080r 3               
003080r 3               .ifdef spi_init
003080r 3               nt_spi_init:
003080r 3                       .byte 8, 0
003080r 3                       .word nt_cls, xt_spi_init, z_spi_init
003080r 3                       .byte "spi_init"
003080r 3               
003080r 3               
003080r 3               nt_spi_clk_toggle:
003080r 3                       .byte 14, 0
003080r 3                       .word nt_spi_init, xt_spi_clk_toggle, z_spi_clk_toggle
003080r 3                       .byte "spi_clk_toggle"
003080r 3               
003080r 3               nt_spi_select:
003080r 3                       .byte 10, 0
003080r 3                       .word nt_spi_clk_toggle, xt_spi_select, z_spi_select
003080r 3                       .byte "spi_select"
003080r 3               
003080r 3               nt_spi_transceive:
003080r 3                       .byte 14, 0
003080r 3                       .word nt_spi_select, xt_spi_transceive, z_spi_transceive
003080r 3                       .byte "spi_transceive"
003080r 3               
003080r 3               nt_sd_init:
003080r 3                       .byte 7, 0
003080r 3                       .word nt_spi_transceive, xt_sd_init, z_sd_init
003080r 3                       .byte "sd_init"
003080r 3               
003080r 3               .else
003080r 3               nt_sd_init:
003080r 3  07 00                .byte 7, 0
003082r 3  rr rr rr rr          .word nt_cls, xt_sd_init, z_sd_init
003086r 3  rr rr        
003088r 3  73 64 5F 69          .byte "sd_init"
00308Cr 3  6E 69 74     
00308Fr 3               .endif
00308Fr 3               
00308Fr 3               nt_cf_rs:
00308Fr 3  02 00                .byte 2, 0
003091r 3  rr rr rr rr          .word nt_sd_init, xt_cf_readsector, z_cf_readsector
003095r 3  rr rr        
003097r 3  72 73                .byte "rs"
003099r 3               
003099r 3               nt_cf_fat_init:
003099r 3  03 00                .byte 3, 0
00309Br 3  rr rr rr rr          .word nt_cf_rs, xt_cf_fat_init, z_cf_fat_init
00309Fr 3  rr rr        
0030A1r 3  66 61 74             .byte "fat"
0030A4r 3               nt_cf_info:
0030A4r 3  04 00                .byte 4, 0
0030A6r 3  rr rr rr rr          .word nt_cf_fat_init, xt_cf_info, z_cf_info
0030AAr 3  rr rr        
0030ACr 3  69 6E 66 6F          .byte "info"
0030B0r 3               nt_cf_ls:
0030B0r 3  02 00                .byte 2, 0
0030B2r 3  rr rr rr rr          .word nt_cf_info, xt_cf_ls, z_cf_ls
0030B6r 3  rr rr        
0030B8r 3  6C 73                .byte "ls"
0030BAr 3               
0030BAr 3               
0030BAr 3               nt_sd_readsector:
0030BAr 3  0D 00                .byte 13, 0
0030BCr 3  rr rr rr rr          .word nt_cf_ls, xt_sd_readsector, z_sd_readsector
0030C0r 3  rr rr        
0030C2r 3  73 64 5F 72          .byte "sd_readsector"
0030C6r 3  65 61 64 73  
0030CAr 3  65 63 74 6F  
0030CFr 3               
0030CFr 3               
0030CFr 3               nt_fat32_init:
0030CFr 3  0A 00                .byte 10, 0
0030D1r 3  rr rr rr rr          .word nt_sd_readsector, xt_fat32_init, z_fat32_init
0030D5r 3  rr rr        
0030D7r 3  66 61 74 33          .byte "fat32_init"
0030DBr 3  32 5F 69 6E  
0030DFr 3  69 74        
0030E1r 3               
0030E1r 3               nt_fat32_root:
0030E1r 3  0A 00                .byte 10, 0
0030E3r 3  rr rr rr rr          .word nt_fat32_init, xt_fat32_root, z_fat32_root
0030E7r 3  rr rr        
0030E9r 3  66 61 74 33          .byte "fat32_root"
0030EDr 3  32 5F 72 6F  
0030F1r 3  6F 74        
0030F3r 3               
0030F3r 3               nt_fat32_find:
0030F3r 3  0A 00                .byte 10, 0
0030F5r 3  rr rr rr rr          .word nt_fat32_root, xt_fat32_find, z_fat32_find
0030F9r 3  rr rr        
0030FBr 3  66 61 74 33          .byte "fat32_find"
0030FFr 3  32 5F 66 69  
003103r 3  6E 64        
003105r 3               
003105r 3               nt_time:
003105r 3  04 00                .byte 4, 0
003107r 3  rr rr rr rr          .word nt_fat32_find, xt_time, z_time
00310Br 3  rr rr        
00310Dr 3  74 69 6D 65          .byte "time"
003111r 3               
003111r 3               nt_ed:                  ; ed6502
003111r 3  02 08                .byte 2, NN
003113r 3  rr rr rr rr          .word nt_time, xt_ed, z_ed
003117r 3  rr rr        
003119r 3  65 64                .byte "ed"
00311Br 3               
00311Br 3  03 08        nt_see: .byte 3, NN
00311Dr 3  rr rr rr rr          .word nt_ed, xt_see, z_see
003121r 3  rr rr        
003123r 3  73 65 65             .byte "see"
003126r 3               
003126r 3               nt_forth:
003126r 3  05 00                .byte 5, 0
003128r 3  rr rr rr rr          .word nt_see, xt_forth, z_forth
00312Cr 3  rr rr        
00312Er 3  66 6F 72 74          .byte "forth"
003132r 3  68           
003133r 3               
003133r 3               nt_order:
003133r 3  05 00                .byte 5, 0
003135r 3  rr rr rr rr          .word nt_forth, xt_order, z_order
003139r 3  rr rr        
00313Br 3  6F 72 64 65          .byte "order"
00313Fr 3  72           
003140r 3               
003140r 3               nt_to_order:
003140r 3  06 00                .byte 6, 0
003142r 3  rr rr rr rr          .word nt_order, xt_to_order, z_to_order
003146r 3  rr rr        
003148r 3  3E 6F 72 64          .byte ">order"
00314Cr 3  65 72        
00314Er 3               
00314Er 3               nt_previous:
00314Er 3  08 00                .byte 8, 0
003150r 3  rr rr rr rr          .word nt_to_order, xt_previous, z_previous
003154r 3  rr rr        
003156r 3  70 72 65 76          .byte "previous"
00315Ar 3  69 6F 75 73  
00315Er 3               
00315Er 3               nt_also:
00315Er 3  04 00                .byte 4, 0
003160r 3  rr rr rr rr          .word nt_previous, xt_also, z_also
003164r 3  rr rr        
003166r 3  61 6C 73 6F          .byte "also"
00316Ar 3               
00316Ar 3               nt_only:
00316Ar 3  04 00                .byte 4, 0
00316Cr 3  rr rr rr rr          .word nt_also, xt_only, z_only
003170r 3  rr rr        
003172r 3  6F 6E 6C 79          .byte "only"
003176r 3               
003176r 3               nt_forth_wordlist:      ; shares code with ZERO
003176r 3  0E 00                .byte 14, 0
003178r 3  rr rr rr rr          .word nt_only, xt_forth_wordlist, z_forth_wordlist
00317Cr 3  rr rr        
00317Er 3  66 6F 72 74          .byte "forth-wordlist"
003182r 3  68 2D 77 6F  
003186r 3  72 64 6C 69  
00318Cr 3               
00318Cr 3               nt_editor_wordlist:     ; shares code with ONE
00318Cr 3  0F 00                .byte 15, 0
00318Er 3  rr rr rr rr          .word nt_forth_wordlist, xt_editor_wordlist, z_editor_wordlist
003192r 3  rr rr        
003194r 3  65 64 69 74          .byte "editor-wordlist"
003198r 3  6F 72 2D 77  
00319Cr 3  6F 72 64 6C  
0031A3r 3               
0031A3r 3               nt_assembler_wordlist:  ; shares code with TWO
0031A3r 3  12 00                .byte 18, 0
0031A5r 3  rr rr rr rr          .word nt_editor_wordlist, xt_assembler_wordlist, z_assembler_wordlist
0031A9r 3  rr rr        
0031ABr 3  61 73 73 65          .byte "assembler-wordlist"
0031AFr 3  6D 62 6C 65  
0031B3r 3  72 2D 77 6F  
0031BDr 3               
0031BDr 3               nt_root_wordlist:
0031BDr 3  0D 00                .byte 13, 0
0031BFr 3  rr rr rr rr          .word nt_assembler_wordlist, xt_root_wordlist, z_root_wordlist
0031C3r 3  rr rr        
0031C5r 3  72 6F 6F 74          .byte "root-wordlist"
0031C9r 3  2D 77 6F 72  
0031CDr 3  64 6C 69 73  
0031D2r 3               
0031D2r 3               nt_get_order:
0031D2r 3  09 00                .byte 9, 0
0031D4r 3  rr rr rr rr          .word nt_root_wordlist, xt_get_order, z_get_order
0031D8r 3  rr rr        
0031DAr 3  67 65 74 2D          .byte "get-order"
0031DEr 3  6F 72 64 65  
0031E2r 3  72           
0031E3r 3               
0031E3r 3               nt_set_order:
0031E3r 3  09 00                .byte 9, 0
0031E5r 3  rr rr rr rr          .word nt_get_order, xt_set_order, z_set_order
0031E9r 3  rr rr        
0031EBr 3  73 65 74 2D          .byte "set-order"
0031EFr 3  6F 72 64 65  
0031F3r 3  72           
0031F4r 3               
0031F4r 3               nt_get_current:
0031F4r 3  0B 00                .byte 11, 0
0031F6r 3  rr rr rr rr          .word nt_set_order, xt_get_current, z_get_current
0031FAr 3  rr rr        
0031FCr 3  67 65 74 2D          .byte "get-current"
003200r 3  63 75 72 72  
003204r 3  65 6E 74     
003207r 3               
003207r 3               nt_set_current:
003207r 3  0B 10                .byte 11, UF
003209r 3  rr rr rr rr          .word nt_get_current, xt_set_current, z_set_current
00320Dr 3  rr rr        
00320Fr 3  73 65 74 2D          .byte "set-current"
003213r 3  63 75 72 72  
003217r 3  65 6E 74     
00321Ar 3               
00321Ar 3               nt_search_wordlist:
00321Ar 3  0F 10                .byte 15, UF
00321Cr 3  rr rr rr rr          .word nt_set_current, xt_search_wordlist, z_search_wordlist
003220r 3  rr rr        
003222r 3  73 65 61 72          .byte "search-wordlist"
003226r 3  63 68 2D 77  
00322Ar 3  6F 72 64 6C  
003231r 3               
003231r 3               nt_wordlist:
003231r 3  08 00                .byte 8, 0
003233r 3  rr rr rr rr          .word nt_search_wordlist, xt_wordlist, z_wordlist
003237r 3  rr rr        
003239r 3  77 6F 72 64          .byte "wordlist"
00323Dr 3  6C 69 73 74  
003241r 3               
003241r 3               nt_definitions:
003241r 3  0B 00                .byte 11, 0
003243r 3  rr rr rr rr          .word nt_wordlist, xt_definitions, z_definitions
003247r 3  rr rr        
003249r 3  64 65 66 69          .byte "definitions"
00324Dr 3  6E 69 74 69  
003251r 3  6F 6E 73     
003254r 3               
003254r 3               nt_block_ramdrive_init:
003254r 3  13 10                .byte 19, UF
003256r 3  rr rr rr rr          .word nt_definitions, xt_block_ramdrive_init, z_block_ramdrive_init
00325Ar 3  rr rr        
00325Cr 3  62 6C 6F 63          .byte "block-ramdrive-init"
003260r 3  6B 2D 72 61  
003264r 3  6D 64 72 69  
00326Fr 3               
00326Fr 3               nt_list:
00326Fr 3  04 10                .byte 4, UF
003271r 3  rr rr rr rr          .word nt_block_ramdrive_init, xt_list, z_list
003275r 3  rr rr        
003277r 3  6C 69 73 74          .byte "list"
00327Br 3               
00327Br 3               nt_thru:
00327Br 3  04 10                .byte 4, UF
00327Dr 3  rr rr rr rr          .word nt_list, xt_thru, z_thru
003281r 3  rr rr        
003283r 3  74 68 72 75          .byte "thru"
003287r 3               
003287r 3               nt_load:
003287r 3  04 10                .byte 4, UF
003289r 3  rr rr rr rr          .word nt_thru, xt_load, z_load
00328Dr 3  rr rr        
00328Fr 3  6C 6F 61 64          .byte "load"
003293r 3               
003293r 3               nt_flush:
003293r 3  05 00                .byte 5, 0
003295r 3  rr rr rr rr          .word nt_load, xt_flush, z_flush
003299r 3  rr rr        
00329Br 3  66 6C 75 73          .byte "flush"
00329Fr 3  68           
0032A0r 3               
0032A0r 3               nt_empty_buffers:
0032A0r 3  0D 00                .byte 13, 0
0032A2r 3  rr rr rr rr          .word nt_flush, xt_empty_buffers, z_empty_buffers
0032A6r 3  rr rr        
0032A8r 3  65 6D 70 74          .byte "empty-buffers"
0032ACr 3  79 2D 62 75  
0032B0r 3  66 66 65 72  
0032B5r 3               
0032B5r 3               nt_buffer:
0032B5r 3  06 00                .byte 6, 0
0032B7r 3  rr rr rr rr          .word nt_empty_buffers, xt_buffer, z_buffer
0032BBr 3  rr rr        
0032BDr 3  62 75 66 66          .byte "buffer"
0032C1r 3  65 72        
0032C3r 3               
0032C3r 3               nt_update:
0032C3r 3  06 00                .byte 6, 0
0032C5r 3  rr rr rr rr          .word nt_buffer, xt_update, z_update
0032C9r 3  rr rr        
0032CBr 3  75 70 64 61          .byte "update"
0032CFr 3  74 65        
0032D1r 3               
0032D1r 3               nt_block:
0032D1r 3  05 00                .byte 5, 0
0032D3r 3  rr rr rr rr          .word nt_update, xt_block, z_block
0032D7r 3  rr rr        
0032D9r 3  62 6C 6F 63          .byte "block"
0032DDr 3  6B           
0032DEr 3               
0032DEr 3               nt_save_buffers:
0032DEr 3  0C 00                .byte 12, 0
0032E0r 3  rr rr rr rr          .word nt_block, xt_save_buffers, z_save_buffers
0032E4r 3  rr rr        
0032E6r 3  73 61 76 65          .byte "save-buffers"
0032EAr 3  2D 62 75 66  
0032EEr 3  66 65 72 73  
0032F2r 3               
0032F2r 3               nt_block_read_vector:
0032F2r 3  11 28                .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
0032F4r 3  rr rr rr rr          .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
0032F8r 3  rr rr        
0032FAr 3  62 6C 6F 63          .byte "block-read-vector"
0032FEr 3  6B 2D 72 65  
003302r 3  61 64 2D 76  
00330Br 3               
00330Br 3               nt_block_read:
00330Br 3  0A 28                .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
00330Dr 3  rr rr rr rr          .word nt_block_read_vector, xt_block_read, z_block_read
003311r 3  rr rr        
003313r 3  62 6C 6F 63          .byte "block-read"
003317r 3  6B 2D 72 65  
00331Br 3  61 64        
00331Dr 3               
00331Dr 3               nt_block_write_vector:
00331Dr 3  12 08                .byte 18, NN ; Deferred words need the HC (Code Field) flag.
00331Fr 3  rr rr rr rr          .word nt_block_read, xt_block_write_vector, z_block_write_vector
003323r 3  rr rr        
003325r 3  62 6C 6F 63          .byte "block-write-vector"
003329r 3  6B 2D 77 72  
00332Dr 3  69 74 65 2D  
003337r 3               
003337r 3               nt_block_write:
003337r 3  0B 08                .byte 11, NN ; Deferred words need the HC (Code Field) flag.
003339r 3  rr rr rr rr          .word nt_block_write_vector, xt_block_write, z_block_write
00333Dr 3  rr rr        
00333Fr 3  62 6C 6F 63          .byte "block-write"
003343r 3  6B 2D 77 72  
003347r 3  69 74 65     
00334Ar 3               
00334Ar 3               nt_blk:
00334Ar 3  03 00                .byte 3, 0
00334Cr 3  rr rr rr rr          .word nt_block_write, xt_blk, z_blk
003350r 3  rr rr        
003352r 3  62 6C 6B             .byte "blk"
003355r 3               
003355r 3               nt_scr:
003355r 3  03 00                .byte 3, 0
003357r 3  rr rr rr rr          .word nt_blk, xt_scr, z_scr
00335Br 3  rr rr        
00335Dr 3  73 63 72             .byte "scr"
003360r 3               
003360r 3               nt_blkbuffer:
003360r 3  09 00                .byte 9, 0
003362r 3  rr rr rr rr          .word nt_scr, xt_blkbuffer, z_blkbuffer
003366r 3  rr rr        
003368r 3  62 6C 6B 62          .byte "blkbuffer"
00336Cr 3  75 66 66 65  
003370r 3  72           
003371r 3               
003371r 3               nt_buffblocknum:
003371r 3  0C 00                .byte 12, 0
003373r 3  rr rr rr rr          .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
003377r 3  rr rr        
003379r 3  62 75 66 66          .byte "buffblocknum"
00337Dr 3  62 6C 6F 63  
003381r 3  6B 6E 75 6D  
003385r 3               
003385r 3               nt_buffstatus:
003385r 3  0A 00                .byte 10, 0
003387r 3  rr rr rr rr          .word nt_buffblocknum, xt_buffstatus, z_buffstatus
00338Br 3  rr rr        
00338Dr 3  62 75 66 66          .byte "buffstatus"
003391r 3  73 74 61 74  
003395r 3  75 73        
003397r 3               
003397r 3               nt_buffer_colon:
003397r 3  07 00                .byte 7, 0
003399r 3  rr rr rr rr          .word nt_buffstatus, xt_buffer_colon, z_buffer_colon
00339Dr 3  rr rr        
00339Fr 3  62 75 66 66          .byte "buffer:"
0033A3r 3  65 72 3A     
0033A6r 3               
0033A6r 3               nt_useraddr:
0033A6r 3  08 00                .byte 8, 0
0033A8r 3  rr rr rr rr          .word nt_buffer_colon, xt_useraddr, z_useraddr
0033ACr 3  rr rr        
0033AEr 3  75 73 65 72          .byte "useraddr"
0033B2r 3  61 64 64 72  
0033B6r 3               
0033B6r 3               nt_action_of:
0033B6r 3  09 04                .byte 9, IM
0033B8r 3  rr rr rr rr          .word nt_useraddr, xt_action_of, z_action_of
0033BCr 3  rr rr        
0033BEr 3  61 63 74 69          .byte "action-of"
0033C2r 3  6F 6E 2D 6F  
0033C6r 3  66           
0033C7r 3               
0033C7r 3               nt_is:
0033C7r 3  02 04                .byte 2, IM
0033C9r 3  rr rr rr rr          .word nt_action_of, xt_is, z_is
0033CDr 3  rr rr        
0033CFr 3  69 73                .byte "is"
0033D1r 3               
0033D1r 3               nt_defer_store:
0033D1r 3  06 00                .byte 6, 0
0033D3r 3  rr rr rr rr          .word nt_is, xt_defer_store, z_defer_store
0033D7r 3  rr rr        
0033D9r 3  64 65 66 65          .byte "defer!"
0033DDr 3  72 21        
0033DFr 3               
0033DFr 3               nt_defer_fetch:
0033DFr 3  06 00                .byte 6, 0
0033E1r 3  rr rr rr rr          .word nt_defer_store, xt_defer_fetch, z_defer_fetch
0033E5r 3  rr rr        
0033E7r 3  64 65 66 65          .byte "defer@"
0033EBr 3  72 40        
0033EDr 3               
0033EDr 3               nt_endcase:
0033EDr 3  07 0D                .byte 7, IM+CO+NN
0033EFr 3  rr rr rr rr          .word nt_defer_fetch, xt_endcase, z_endcase
0033F3r 3  rr rr        
0033F5r 3  65 6E 64 63          .byte "endcase"
0033F9r 3  61 73 65     
0033FCr 3               
0033FCr 3               nt_endof:
0033FCr 3  05 0D                .byte 5, IM+CO+NN
0033FEr 3  rr rr rr rr          .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
003402r 3  rr rr        
003404r 3  65 6E 64 6F          .byte "endof"
003408r 3  66           
003409r 3               
003409r 3               nt_of:
003409r 3  02 0D                .byte 2, IM+CO+NN
00340Br 3  rr rr rr rr          .word nt_endof, xt_of, z_of
00340Fr 3  rr rr        
003411r 3  6F 66                .byte "of"
003413r 3               
003413r 3               nt_case:
003413r 3  04 0D                .byte 4, IM+CO+NN
003415r 3  rr rr rr rr          .word nt_of, xt_case, z_case    ; shares code with ZERO
003419r 3  rr rr        
00341Br 3  63 61 73 65          .byte "case"
00341Fr 3               
00341Fr 3               nt_while:
00341Fr 3  05 0D                .byte 5, IM+CO+NN
003421r 3  rr rr rr rr          .word nt_case, xt_while, z_while
003425r 3  rr rr        
003427r 3  77 68 69 6C          .byte "while"
00342Br 3  65           
00342Cr 3               
00342Cr 3               nt_until:
00342Cr 3  05 0D                .byte 5, IM+CO+NN
00342Er 3  rr rr rr rr          .word nt_while, xt_until, z_until
003432r 3  rr rr        
003434r 3  75 6E 74 69          .byte "until"
003438r 3  6C           
003439r 3               
003439r 3               nt_repeat:
003439r 3  06 0D                .byte 6, IM+CO+NN
00343Br 3  rr rr rr rr          .word nt_until, xt_repeat, z_repeat
00343Fr 3  rr rr        
003441r 3  72 65 70 65          .byte "repeat"
003445r 3  61 74        
003447r 3               
003447r 3               nt_else:
003447r 3  04 0D                .byte 4, IM+CO+NN
003449r 3  rr rr rr rr          .word nt_repeat, xt_else, z_else
00344Dr 3  rr rr        
00344Fr 3  65 6C 73 65          .byte "else"
003453r 3               
003453r 3               nt_then:
003453r 3  04 0D                .byte 4, IM+CO+NN
003455r 3  rr rr rr rr          .word nt_else, xt_then, z_then
003459r 3  rr rr        
00345Br 3  74 68 65 6E          .byte "then"
00345Fr 3               
00345Fr 3               nt_if:
00345Fr 3  02 0D                .byte 2, IM+CO+NN
003461r 3  rr rr rr rr          .word nt_then, xt_if, z_if
003465r 3  rr rr        
003467r 3  69 66                .byte "if"
003469r 3               
003469r 3               nt_dot_paren:
003469r 3  02 04                .byte 2, IM
00346Br 3  rr rr rr rr          .word nt_if, xt_dot_paren, z_dot_paren
00346Fr 3  rr rr        
003471r 3  2E 28                .byte ".("
003473r 3               
003473r 3               nt_paren:
003473r 3  01 04                .byte 1, IM
003475r 3  rr rr rr rr          .word nt_dot_paren, xt_paren, z_paren
003479r 3  rr rr        
00347Br 3  28                   .byte "("
00347Cr 3               
00347Cr 3               nt_word:
00347Cr 3  04 10                .byte 4, UF
00347Er 3  rr rr rr rr          .word nt_paren, xt_word, z_word
003482r 3  rr rr        
003484r 3  77 6F 72 64          .byte "word"
003488r 3               
003488r 3               nt_find:
003488r 3  04 10                .byte 4, UF
00348Ar 3  rr rr rr rr          .word nt_word, xt_find, z_find
00348Er 3  rr rr        
003490r 3  66 69 6E 64          .byte "find"
003494r 3               
003494r 3               nt_environment_q:
003494r 3  0C 10                .byte 12, UF
003496r 3  rr rr rr rr          .word nt_find, xt_environment_q, z_environment_q
00349Ar 3  rr rr        
00349Cr 3  65 6E 76 69          .byte "environment?"
0034A0r 3  72 6F 6E 6D  
0034A4r 3  65 6E 74 3F  
0034A8r 3               
0034A8r 3               nt_search:
0034A8r 3  06 18                .byte 6, UF+NN
0034AAr 3  rr rr rr rr          .word nt_environment_q, xt_search, z_search
0034AEr 3  rr rr        
0034B0r 3  73 65 61 72          .byte "search"
0034B4r 3  63 68        
0034B6r 3               
0034B6r 3               nt_compare:
0034B6r 3  07 10                .byte 7, UF
0034B8r 3  rr rr rr rr          .word nt_search, xt_compare, z_compare
0034BCr 3  rr rr        
0034BEr 3  63 6F 6D 70          .byte "compare"
0034C2r 3  61 72 65     
0034C5r 3               
0034C5r 3               nt_disasm:
0034C5r 3  06 10                .byte 6, UF
0034C7r 3  rr rr rr rr          .word nt_compare, xt_disasm, z_disasm
0034CBr 3  rr rr        
0034CDr 3  64 69 73 61          .byte "disasm"
0034D1r 3  73 6D        
0034D3r 3               
0034D3r 3               nt_dot_s:
0034D3r 3  02 00                .byte 2, 0
0034D5r 3  rr rr rr rr          .word nt_disasm, xt_dot_s, z_dot_s
0034D9r 3  rr rr        
0034DBr 3  2E 73                .byte ".s"
0034DDr 3               
0034DDr 3               nt_dump:
0034DDr 3  04 10                .byte 4, UF
0034DFr 3  rr rr rr rr          .word nt_dot_s, xt_dump, z_dump
0034E3r 3  rr rr        
0034E5r 3  64 75 6D 70          .byte "dump"
0034E9r 3               
0034E9r 3               nt_bell:
0034E9r 3  04 00                .byte 4, 0
0034EBr 3  rr rr rr rr          .word nt_dump, xt_bell, z_bell
0034EFr 3  rr rr        
0034F1r 3  62 65 6C 6C          .byte "bell"
0034F5r 3               
0034F5r 3               nt_align:
0034F5r 3  05 00                .byte 5, 0
0034F7r 3  rr rr rr rr          .word nt_bell, xt_align, z_align
0034FBr 3  rr rr        
0034FDr 3  61 6C 69 67          .byte "align"
003501r 3  6E           
003502r 3               
003502r 3               nt_aligned:             ; same code as ALIGN
003502r 3  07 00                .byte 7, 0
003504r 3  rr rr rr rr          .word nt_align, xt_align, z_align
003508r 3  rr rr        
00350Ar 3  61 6C 69 67          .byte "aligned"
00350Er 3  6E 65 64     
003511r 3               
003511r 3               nt_wordsize:
003511r 3  08 10                .byte 8, UF
003513r 3  rr rr rr rr          .word nt_aligned, xt_wordsize, z_wordsize
003517r 3  rr rr        
003519r 3  77 6F 72 64          .byte "wordsize"
00351Dr 3  73 69 7A 65  
003521r 3               
003521r 3               nt_words:
003521r 3  05 00                .byte 5, 0
003523r 3  rr rr rr rr          .word nt_wordsize, xt_words, z_words
003527r 3  rr rr        
003529r 3  77 6F 72 64          .byte "words"
00352Dr 3  73           
00352Er 3               
00352Er 3               nt_marker:
00352Er 3  06 04                .byte 6, IM
003530r 3  rr rr rr rr          .word nt_words, xt_marker, z_marker
003534r 3  rr rr        
003536r 3  6D 61 72 6B          .byte "marker"
00353Ar 3  65 72        
00353Cr 3               
00353Cr 3               nt_at_xy:
00353Cr 3  05 10                .byte 5, UF
00353Er 3  rr rr rr rr          .word nt_marker, xt_at_xy, z_at_xy
003542r 3  rr rr        
003544r 3  61 74 2D 78          .byte "at-xy"
003548r 3  79           
003549r 3               
003549r 3               nt_page:
003549r 3  04 00                .byte 4, 0
00354Br 3  rr rr rr rr          .word nt_at_xy, xt_page, z_page
00354Fr 3  rr rr        
003551r 3  70 61 67 65          .byte "page"
003555r 3               
003555r 3               nt_cr:
003555r 3  02 00                .byte 2, 0
003557r 3  rr rr rr rr          .word nt_page, xt_cr, z_cr
00355Br 3  rr rr        
00355Dr 3  63 72                .byte "cr"
00355Fr 3               
00355Fr 3               nt_input:
00355Fr 3  05 00                .byte 5, 0
003561r 3  rr rr rr rr          .word nt_cr, xt_input, z_input
003565r 3  rr rr        
003567r 3  69 6E 70 75          .byte "input"
00356Br 3  74           
00356Cr 3               
00356Cr 3               nt_output:
00356Cr 3  06 00                .byte 6, 0
00356Er 3  rr rr rr rr          .word nt_input, xt_output, z_output
003572r 3  rr rr        
003574r 3  6F 75 74 70          .byte "output"
003578r 3  75 74        
00357Ar 3               
00357Ar 3               nt_sign:
00357Ar 3  04 10                .byte 4, UF
00357Cr 3  rr rr rr rr          .word nt_output, xt_sign, z_sign
003580r 3  rr rr        
003582r 3  73 69 67 6E          .byte "sign"
003586r 3               
003586r 3               nt_hold:
003586r 3  04 10                .byte 4, UF
003588r 3  rr rr rr rr          .word nt_sign, xt_hold, z_hold
00358Cr 3  rr rr        
00358Er 3  68 6F 6C 64          .byte "hold"
003592r 3               
003592r 3               nt_number_sign_greater:
003592r 3  02 10                .byte 2, UF
003594r 3  rr rr rr rr          .word nt_hold, xt_number_sign_greater, z_number_sign_greater
003598r 3  rr rr        
00359Ar 3  23 3E                .byte "#>"
00359Cr 3               
00359Cr 3               nt_number_sign_s:
00359Cr 3  02 10                .byte 2, UF
00359Er 3  rr rr rr rr          .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
0035A2r 3  rr rr        
0035A4r 3  23 73                .byte "#s"
0035A6r 3               
0035A6r 3               nt_number_sign:
0035A6r 3  01 10                .byte 1, UF
0035A8r 3  rr rr rr rr          .word nt_number_sign_s, xt_number_sign, z_number_sign
0035ACr 3  rr rr        
0035AEr 3  23                   .byte "#"
0035AFr 3               
0035AFr 3               nt_less_number_sign:
0035AFr 3  02 00                .byte 2, 0
0035B1r 3  rr rr rr rr          .word nt_number_sign, xt_less_number_sign, z_less_number_sign
0035B5r 3  rr rr        
0035B7r 3  3C 23                .byte "<#"
0035B9r 3               
0035B9r 3               nt_to_in:
0035B9r 3  03 00                .byte 3, 0
0035BBr 3  rr rr rr rr          .word nt_less_number_sign, xt_to_in, z_to_in
0035BFr 3  rr rr        
0035C1r 3  3E 69 6E             .byte ">in"
0035C4r 3               
0035C4r 3               nt_within:
0035C4r 3  06 10                .byte 6, UF
0035C6r 3  rr rr rr rr          .word nt_to_in, xt_within, z_within
0035CAr 3  rr rr        
0035CCr 3  77 69 74 68          .byte "within"
0035D0r 3  69 6E        
0035D2r 3               
0035D2r 3               nt_hexstore:
0035D2r 3  08 10                .byte 8, UF
0035D4r 3  rr rr rr rr          .word nt_within, xt_hexstore, z_hexstore
0035D8r 3  rr rr        
0035DAr 3  68 65 78 73          .byte "hexstore"
0035DEr 3  74 6F 72 65  
0035E2r 3               
0035E2r 3               nt_cleave:
0035E2r 3  06 10                .byte 6, UF
0035E4r 3  rr rr rr rr          .word nt_hexstore, xt_cleave, z_cleave
0035E8r 3  rr rr        
0035EAr 3  63 6C 65 61          .byte "cleave"
0035EEr 3  76 65        
0035F0r 3               
0035F0r 3               nt_pad:
0035F0r 3  03 00                .byte 3, 0
0035F2r 3  rr rr rr rr          .word nt_cleave, xt_pad, z_pad
0035F6r 3  rr rr        
0035F8r 3  70 61 64             .byte "pad"
0035FBr 3               
0035FBr 3               nt_cmove:
0035FBr 3  05 10                .byte 5, UF
0035FDr 3  rr rr rr rr          .word nt_pad, xt_cmove, z_cmove
003601r 3  rr rr        
003603r 3  63 6D 6F 76          .byte "cmove"
003607r 3  65           
003608r 3               
003608r 3               nt_cmove_up:
003608r 3  06 10                .byte 6, UF
00360Ar 3  rr rr rr rr          .word nt_cmove, xt_cmove_up, z_cmove_up
00360Er 3  rr rr        
003610r 3  63 6D 6F 76          .byte "cmove>"
003614r 3  65 3E        
003616r 3               
003616r 3               nt_move:
003616r 3  04 18                .byte 4, NN+UF
003618r 3  rr rr rr rr          .word nt_cmove_up, xt_move, z_move
00361Cr 3  rr rr        
00361Er 3  6D 6F 76 65          .byte "move"
003622r 3               
003622r 3               nt_backslash:
003622r 3  01 04                .byte 1, IM
003624r 3  rr rr rr rr          .word nt_move, xt_backslash, z_backslash
003628r 3  rr rr        
00362Ar 3  5C                   .byte $5c
00362Br 3               
00362Br 3               nt_star_slash:
00362Br 3  02 10                .byte 2, UF
00362Dr 3  rr rr rr rr          .word nt_backslash, xt_star_slash, z_star_slash
003631r 3  rr rr        
003633r 3  2A 2F                .byte "*/"
003635r 3               
003635r 3               nt_star_slash_mod:
003635r 3  05 10                .byte 5, UF
003637r 3  rr rr rr rr          .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
00363Br 3  rr rr        
00363Dr 3  2A 2F 6D 6F          .byte "*/mod"
003641r 3  64           
003642r 3               
003642r 3               nt_mod:
003642r 3  03 10                .byte 3, UF
003644r 3  rr rr rr rr          .word nt_star_slash_mod, xt_mod, z_mod
003648r 3  rr rr        
00364Ar 3  6D 6F 64             .byte "mod"
00364Dr 3               
00364Dr 3               nt_slash_mod:
00364Dr 3  04 10                .byte 4, UF
00364Fr 3  rr rr rr rr          .word nt_mod, xt_slash_mod, z_slash_mod
003653r 3  rr rr        
003655r 3  2F 6D 6F 64          .byte "/mod"
003659r 3               
003659r 3               nt_slash:
003659r 3  01 10                .byte 1, UF
00365Br 3  rr rr rr rr          .word nt_slash_mod, xt_slash, z_slash
00365Fr 3  rr rr        
003661r 3  2F                   .byte "/"
003662r 3               
003662r 3               nt_fm_slash_mod:
003662r 3  06 10                .byte 6, UF
003664r 3  rr rr rr rr          .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
003668r 3  rr rr        
00366Ar 3  66 6D 2F 6D          .byte "fm/mod"
00366Er 3  6F 64        
003670r 3               
003670r 3               nt_sm_slash_rem:
003670r 3  06 10                .byte 6, UF
003672r 3  rr rr rr rr          .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
003676r 3  rr rr        
003678r 3  73 6D 2F 72          .byte "sm/rem"
00367Cr 3  65 6D        
00367Er 3               
00367Er 3               nt_um_slash_mod:
00367Er 3  06 10                .byte 6, UF
003680r 3  rr rr rr rr          .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
003684r 3  rr rr        
003686r 3  75 6D 2F 6D          .byte "um/mod"
00368Ar 3  6F 64        
00368Cr 3               
00368Cr 3               nt_star:
00368Cr 3  01 10                .byte 1, UF
00368Er 3  rr rr rr rr          .word nt_um_slash_mod, xt_star, z_star
003692r 3  rr rr        
003694r 3  2A                   .byte "*"
003695r 3               
003695r 3               nt_um_star:
003695r 3  03 10                .byte 3, UF
003697r 3  rr rr rr rr          .word nt_star, xt_um_star, z_um_star
00369Br 3  rr rr        
00369Dr 3  75 6D 2A             .byte "um*"
0036A0r 3               
0036A0r 3               nt_m_star:
0036A0r 3  02 10                .byte 2, UF
0036A2r 3  rr rr rr rr          .word nt_um_star, xt_m_star, z_m_star
0036A6r 3  rr rr        
0036A8r 3  6D 2A                .byte "m*"
0036AAr 3               
0036AAr 3               nt_count:
0036AAr 3  05 10                .byte 5, UF
0036ACr 3  rr rr rr rr          .word nt_m_star, xt_count, z_count
0036B0r 3  rr rr        
0036B2r 3  63 6F 75 6E          .byte "count"
0036B6r 3  74           
0036B7r 3               
0036B7r 3               nt_decimal:
0036B7r 3  07 00                .byte 7, 0
0036B9r 3  rr rr rr rr          .word nt_count, xt_decimal, z_decimal
0036BDr 3  rr rr        
0036BFr 3  64 65 63 69          .byte "decimal"
0036C3r 3  6D 61 6C     
0036C6r 3               
0036C6r 3               nt_hex:
0036C6r 3  03 00                .byte 3, 0
0036C8r 3  rr rr rr rr          .word nt_decimal, xt_hex, z_hex
0036CCr 3  rr rr        
0036CEr 3  68 65 78             .byte "hex"
0036D1r 3               
0036D1r 3               nt_to_number:
0036D1r 3  07 10                .byte 7, UF
0036D3r 3  rr rr rr rr          .word nt_hex, xt_to_number, z_to_number
0036D7r 3  rr rr        
0036D9r 3  3E 6E 75 6D          .byte ">number"
0036DDr 3  62 65 72     
0036E0r 3               
0036E0r 3               nt_number:
0036E0r 3  06 10                .byte 6, UF
0036E2r 3  rr rr rr rr          .word nt_to_number, xt_number, z_number
0036E6r 3  rr rr        
0036E8r 3  6E 75 6D 62          .byte "number"
0036ECr 3  65 72        
0036EEr 3               
0036EEr 3               nt_digit_question:
0036EEr 3  06 10                .byte 6, UF
0036F0r 3  rr rr rr rr          .word nt_number, xt_digit_question, z_digit_question
0036F4r 3  rr rr        
0036F6r 3  64 69 67 69          .byte "digit?"
0036FAr 3  74 3F        
0036FCr 3               
0036FCr 3               nt_base:
0036FCr 3  04 00                .byte 4, 0
0036FEr 3  rr rr rr rr          .word nt_digit_question, xt_base, z_base
003702r 3  rr rr        
003704r 3  62 61 73 65          .byte "base"
003708r 3               
003708r 3               nt_evaluate:
003708r 3  08 10                .byte 8, UF
00370Ar 3  rr rr rr rr          .word nt_base, xt_evaluate, z_evaluate
00370Er 3  rr rr        
003710r 3  65 76 61 6C          .byte "evaluate"
003714r 3  75 61 74 65  
003718r 3               
003718r 3               nt_state:
003718r 3  05 00                .byte 5, 0
00371Ar 3  rr rr rr rr          .word nt_evaluate, xt_state, z_state
00371Er 3  rr rr        
003720r 3  73 74 61 74          .byte "state"
003724r 3  65           
003725r 3               
003725r 3               nt_again:
003725r 3  05 17                .byte 5, AN+CO+IM+UF
003727r 3  rr rr rr rr          .word nt_state, xt_again, z_again
00372Br 3  rr rr        
00372Dr 3  61 67 61 69          .byte "again"
003731r 3  6E           
003732r 3               
003732r 3               nt_begin:
003732r 3  05 07                .byte 5, AN+CO+IM
003734r 3  rr rr rr rr          .word nt_again, xt_begin, z_begin
003738r 3  rr rr        
00373Ar 3  62 65 67 69          .byte "begin"
00373Er 3  6E           
00373Fr 3               
00373Fr 3               nt_quit:
00373Fr 3  04 00                .byte 4, 0
003741r 3  rr rr rr rr          .word nt_begin, xt_quit, z_quit
003745r 3  rr rr        
003747r 3  71 75 69 74          .byte "quit"
00374Br 3               
00374Br 3               nt_recurse:
00374Br 3  07 0D                .byte 7, CO+IM+NN
00374Dr 3  rr rr rr rr          .word nt_quit, xt_recurse, z_recurse
003751r 3  rr rr        
003753r 3  72 65 63 75          .byte "recurse"
003757r 3  72 73 65     
00375Ar 3               
00375Ar 3               nt_leave:
00375Ar 3  05 03                .byte 5, AN+CO
00375Cr 3  rr rr rr rr          .word nt_recurse, xt_leave, z_leave
003760r 3  rr rr        
003762r 3  6C 65 61 76          .byte "leave"
003766r 3  65           
003767r 3               
003767r 3               nt_unloop:
003767r 3  06 03                .byte 6, AN+CO
003769r 3  rr rr rr rr          .word nt_leave, xt_unloop, z_unloop
00376Dr 3  rr rr        
00376Fr 3  75 6E 6C 6F          .byte "unloop"
003773r 3  6F 70        
003775r 3               
003775r 3               nt_exit:
003775r 3  04 03                .byte 4, AN+CO
003777r 3  rr rr rr rr          .word nt_unloop, xt_exit, z_exit
00377Br 3  rr rr        
00377Dr 3  65 78 69 74          .byte "exit"
003781r 3               
003781r 3               nt_plus_loop:
003781r 3  05 05                .byte 5, CO+IM
003783r 3  rr rr rr rr          .word nt_exit, xt_plus_loop, z_plus_loop
003787r 3  rr rr        
003789r 3  2B 6C 6F 6F          .byte "+loop"
00378Dr 3  70           
00378Er 3               
00378Er 3               nt_loop:
00378Er 3  04 05                .byte 4, CO+IM
003790r 3  rr rr rr rr          .word nt_plus_loop, xt_loop, z_loop
003794r 3  rr rr        
003796r 3  6C 6F 6F 70          .byte "loop"
00379Ar 3               
00379Ar 3               nt_j:
00379Ar 3  01 03                .byte 1, AN+CO
00379Cr 3  rr rr rr rr          .word nt_loop, xt_j, z_j
0037A0r 3  rr rr        
0037A2r 3  6A                   .byte "j"
0037A3r 3               
0037A3r 3               nt_i:
0037A3r 3  01 03                .byte 1, AN+CO
0037A5r 3  rr rr rr rr          .word nt_j, xt_i, z_i
0037A9r 3  rr rr        
0037ABr 3  69                   .byte "i"
0037ACr 3               
0037ACr 3               nt_question_do:
0037ACr 3  03 0D                .byte 3, CO+IM+NN
0037AEr 3  rr rr rr rr          .word nt_i, xt_question_do, z_question_do
0037B2r 3  rr rr        
0037B4r 3  3F 64 6F             .byte "?do"
0037B7r 3               
0037B7r 3               nt_do:
0037B7r 3  02 0D                .byte 2, CO+IM+NN
0037B9r 3  rr rr rr rr          .word nt_question_do, xt_do, z_do
0037BDr 3  rr rr        
0037BFr 3  64 6F                .byte "do"
0037C1r 3               
0037C1r 3               nt_abort_quote:
0037C1r 3  06 0D                .byte 6, CO+IM+NN
0037C3r 3  rr rr rr rr          .word nt_do, xt_abort_quote, z_abort_quote
0037C7r 3  rr rr        
0037C9r 3  61 62 6F 72          .byte "abort", $22
0037CDr 3  74 22        
0037CFr 3               
0037CFr 3               nt_abort:
0037CFr 3  05 00                .byte 5, 0
0037D1r 3  rr rr rr rr          .word nt_abort_quote, xt_abort, z_abort
0037D5r 3  rr rr        
0037D7r 3  61 62 6F 72          .byte "abort"
0037DBr 3  74           
0037DCr 3               
0037DCr 3               nt_strip_underflow:
0037DCr 3  0F 00                .byte 15, 0
0037DEr 3  rr rr rr rr          .word nt_abort, xt_strip_underflow, z_strip_underflow
0037E2r 3  rr rr        
0037E4r 3  73 74 72 69          .byte "strip-underflow"
0037E8r 3  70 2D 75 6E  
0037ECr 3  64 65 72 66  
0037F3r 3               
0037F3r 3               nt_nc_limit:
0037F3r 3  08 00                .byte 8, 0
0037F5r 3  rr rr rr rr          .word nt_strip_underflow, xt_nc_limit, z_nc_limit
0037F9r 3  rr rr        
0037FBr 3  6E 63 2D 6C          .byte "nc-limit"
0037FFr 3  69 6D 69 74  
003803r 3               
003803r 3               nt_allow_native:
003803r 3  0C 00                .byte 12, 0
003805r 3  rr rr rr rr          .word nt_nc_limit, xt_allow_native, z_allow_native
003809r 3  rr rr        
00380Br 3  61 6C 6C 6F          .byte "allow-native"
00380Fr 3  77 2D 6E 61  
003813r 3  74 69 76 65  
003817r 3               
003817r 3               nt_always_native:
003817r 3  0D 00                .byte 13, 0
003819r 3  rr rr rr rr          .word nt_allow_native, xt_always_native, z_always_native
00381Dr 3  rr rr        
00381Fr 3  61 6C 77 61          .byte "always-native"
003823r 3  79 73 2D 6E  
003827r 3  61 74 69 76  
00382Cr 3               
00382Cr 3               nt_never_native:
00382Cr 3  0C 00                .byte 12, 0
00382Er 3  rr rr rr rr          .word nt_always_native, xt_never_native, z_never_native
003832r 3  rr rr        
003834r 3  6E 65 76 65          .byte "never-native"
003838r 3  72 2D 6E 61  
00383Cr 3  74 69 76 65  
003840r 3               
003840r 3               nt_compile_only:
003840r 3  0C 00                .byte 12, 0
003842r 3  rr rr rr rr          .word nt_never_native, xt_compile_only, z_compile_only
003846r 3  rr rr        
003848r 3  63 6F 6D 70          .byte "compile-only"
00384Cr 3  69 6C 65 2D  
003850r 3  6F 6E 6C 79  
003854r 3               
003854r 3               nt_immediate:
003854r 3  09 00                .byte 9, 0
003856r 3  rr rr rr rr          .word nt_compile_only, xt_immediate, z_immediate
00385Ar 3  rr rr        
00385Cr 3  69 6D 6D 65          .byte "immediate"
003860r 3  64 69 61 74  
003864r 3  65           
003865r 3               
003865r 3               nt_postpone:
003865r 3  08 05                .byte 8, IM+CO
003867r 3  rr rr rr rr          .word nt_immediate, xt_postpone, z_postpone
00386Br 3  rr rr        
00386Dr 3  70 6F 73 74          .byte "postpone"
003871r 3  70 6F 6E 65  
003875r 3               
003875r 3               nt_s_backslash_quote:
003875r 3  03 04                .byte 3, IM
003877r 3  rr rr rr rr          .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
00387Br 3  rr rr        
00387Dr 3  73 5C 22             .byte "s", $5C, $22
003880r 3               
003880r 3               nt_s_quote:
003880r 3  02 0C                .byte 2, IM+NN
003882r 3  rr rr rr rr          .word nt_s_backslash_quote, xt_s_quote, z_s_quote
003886r 3  rr rr        
003888r 3  73 22                .byte "s", $22
00388Ar 3               
00388Ar 3               nt_dot_quote:
00388Ar 3  02 05                .byte 2, CO+IM
00388Cr 3  rr rr rr rr          .word nt_s_quote, xt_dot_quote, z_dot_quote
003890r 3  rr rr        
003892r 3  2E 22                .byte ".", $22
003894r 3               
003894r 3               nt_sliteral:
003894r 3  08 15                .byte 8, CO+IM+UF
003896r 3  rr rr rr rr          .word nt_dot_quote, xt_sliteral, z_sliteral
00389Ar 3  rr rr        
00389Cr 3  73 6C 69 74          .byte "sliteral"
0038A0r 3  65 72 61 6C  
0038A4r 3               
0038A4r 3               nt_literal:
0038A4r 3  07 15                .byte 7, IM+CO+UF
0038A6r 3  rr rr rr rr          .word nt_sliteral, xt_literal, z_literal
0038AAr 3  rr rr        
0038ACr 3  6C 69 74 65          .byte "literal"
0038B0r 3  72 61 6C     
0038B3r 3               
0038B3r 3               nt_right_bracket:
0038B3r 3  01 04                .byte 1, IM
0038B5r 3  rr rr rr rr          .word nt_literal, xt_right_bracket, z_right_bracket
0038B9r 3  rr rr        
0038BBr 3  5D                   .byte "]"
0038BCr 3               
0038BCr 3               nt_left_bracket:
0038BCr 3  01 05                .byte 1, IM+CO
0038BEr 3  rr rr rr rr          .word nt_right_bracket, xt_left_bracket, z_left_bracket
0038C2r 3  rr rr        
0038C4r 3  5B                   .byte "["
0038C5r 3               
0038C5r 3               nt_compile_comma:
0038C5r 3  08 18                .byte 8, UF+NN
0038C7r 3  rr rr rr rr          .word nt_left_bracket, xt_compile_comma, z_compile_comma
0038CBr 3  rr rr        
0038CDr 3  63 6F 6D 70          .byte "compile,"
0038D1r 3  69 6C 65 2C  
0038D5r 3               
0038D5r 3               nt_colon_noname:
0038D5r 3  07 00                .byte 7, 0
0038D7r 3  rr rr rr rr          .word nt_compile_comma, xt_colon_noname, z_colon_noname
0038DBr 3  rr rr        
0038DDr 3  3A 6E 6F 6E          .byte ":noname"
0038E1r 3  61 6D 65     
0038E4r 3               
0038E4r 3               nt_semicolon:
0038E4r 3  01 05                .byte 1, CO+IM
0038E6r 3  rr rr rr rr          .word nt_colon_noname, xt_semicolon, z_semicolon
0038EAr 3  rr rr        
0038ECr 3  3B                   .byte ";"
0038EDr 3               
0038EDr 3               nt_colon:
0038EDr 3  01 00                .byte 1, 0
0038EFr 3  rr rr rr rr          .word nt_semicolon, xt_colon, z_colon
0038F3r 3  rr rr        
0038F5r 3  3A                   .byte ":"
0038F6r 3               
0038F6r 3               nt_source_id:
0038F6r 3  09 00                .byte 9, 0
0038F8r 3  rr rr rr rr          .word nt_colon, xt_source_id, z_source_id
0038FCr 3  rr rr        
0038FEr 3  73 6F 75 72          .byte "source-id"
003902r 3  63 65 2D 69  
003906r 3  64           
003907r 3               
003907r 3               nt_source:
003907r 3  06 00                .byte 6, 0
003909r 3  rr rr rr rr          .word nt_source_id, xt_source, z_source
00390Dr 3  rr rr        
00390Fr 3  73 6F 75 72          .byte "source"
003913r 3  63 65        
003915r 3               
003915r 3               nt_execute_parsing:
003915r 3  0F 10                .byte 15, UF
003917r 3  rr rr rr rr          .word nt_source, xt_execute_parsing, z_execute_parsing
00391Br 3  rr rr        
00391Dr 3  65 78 65 63          .byte "execute-parsing"
003921r 3  75 74 65 2D  
003925r 3  70 61 72 73  
00392Cr 3               
00392Cr 3               nt_parse:
00392Cr 3  05 10                .byte 5, UF
00392Er 3  rr rr rr rr          .word nt_execute_parsing, xt_parse, z_parse
003932r 3  rr rr        
003934r 3  70 61 72 73          .byte "parse"
003938r 3  65           
003939r 3               
003939r 3               nt_parse_name:
003939r 3  0A 08                .byte 10, NN
00393Br 3  rr rr rr rr          .word nt_parse, xt_parse_name, z_parse_name
00393Fr 3  rr rr        
003941r 3  70 61 72 73          .byte "parse-name"
003945r 3  65 2D 6E 61  
003949r 3  6D 65        
00394Br 3               
00394Br 3               nt_latestnt:
00394Br 3  08 00                .byte 8, 0
00394Dr 3  rr rr rr rr          .word nt_parse_name, xt_latestnt, z_latestnt
003951r 3  rr rr        
003953r 3  6C 61 74 65          .byte "latestnt"
003957r 3  73 74 6E 74  
00395Br 3               
00395Br 3               nt_latestxt:
00395Br 3  08 00                .byte 8, 0
00395Dr 3  rr rr rr rr          .word nt_latestnt, xt_latestxt, z_latestxt
003961r 3  rr rr        
003963r 3  6C 61 74 65          .byte "latestxt"
003967r 3  73 74 78 74  
00396Br 3               
00396Br 3               nt_defer:
00396Br 3  05 00                .byte 5, 0
00396Dr 3  rr rr rr rr          .word nt_latestxt, xt_defer, z_defer
003971r 3  rr rr        
003973r 3  64 65 66 65          .byte "defer"
003977r 3  72           
003978r 3               
003978r 3               nt_to_body:
003978r 3  05 10                .byte 5, UF
00397Ar 3  rr rr rr rr          .word nt_defer, xt_to_body, z_to_body
00397Er 3  rr rr        
003980r 3  3E 62 6F 64          .byte ">body"
003984r 3  79           
003985r 3               
003985r 3               nt_name_to_string:
003985r 3  0B 10                .byte 11, UF
003987r 3  rr rr rr rr          .word nt_to_body, xt_name_to_string, z_name_to_string
00398Br 3  rr rr        
00398Dr 3  6E 61 6D 65          .byte "name>string"
003991r 3  3E 73 74 72  
003995r 3  69 6E 67     
003998r 3               
003998r 3               nt_int_to_name:
003998r 3  08 10                .byte 8, UF
00399Ar 3  rr rr rr rr          .word nt_name_to_string, xt_int_to_name, z_int_to_name
00399Er 3  rr rr        
0039A0r 3  69 6E 74 3E          .byte "int>name"
0039A4r 3  6E 61 6D 65  
0039A8r 3               
0039A8r 3               nt_name_to_int:
0039A8r 3  08 10                .byte 8, UF
0039AAr 3  rr rr rr rr          .word nt_int_to_name, xt_name_to_int, z_name_to_int
0039AEr 3  rr rr        
0039B0r 3  6E 61 6D 65          .byte "name>int"
0039B4r 3  3E 69 6E 74  
0039B8r 3               
0039B8r 3               nt_bracket_tick:
0039B8r 3  03 05                .byte 3, CO+IM
0039BAr 3  rr rr rr rr          .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
0039BEr 3  rr rr        
0039C0r 3  5B 27 5D             .byte "[']"
0039C3r 3               
0039C3r 3               nt_tick:
0039C3r 3  01 00                .byte 1, 0
0039C5r 3  rr rr rr rr          .word nt_bracket_tick, xt_tick, z_tick
0039C9r 3  rr rr        
0039CBr 3  27                   .byte "'"
0039CCr 3               
0039CCr 3               nt_find_name:
0039CCr 3  09 10                .byte 9, UF
0039CEr 3  rr rr rr rr          .word nt_tick, xt_find_name, z_find_name
0039D2r 3  rr rr        
0039D4r 3  66 69 6E 64          .byte "find-name"
0039D8r 3  2D 6E 61 6D  
0039DCr 3  65           
0039DDr 3               
0039DDr 3               nt_fill:
0039DDr 3  04 10                .byte 4, UF
0039DFr 3  rr rr rr rr          .word nt_find_name, xt_fill, z_fill
0039E3r 3  rr rr        
0039E5r 3  66 69 6C 6C          .byte "fill"
0039E9r 3               
0039E9r 3               nt_blank:
0039E9r 3  05 00                .byte 5, 0     ; underflow checked by FILL
0039EBr 3  rr rr rr rr          .word nt_fill, xt_blank, z_blank
0039EFr 3  rr rr        
0039F1r 3  62 6C 61 6E          .byte "blank"
0039F5r 3  6B           
0039F6r 3               
0039F6r 3               nt_erase:
0039F6r 3  05 00                .byte 5, 0      ; underflow checked by FILL
0039F8r 3  rr rr rr rr          .word nt_blank, xt_erase, z_erase
0039FCr 3  rr rr        
0039FEr 3  65 72 61 73          .byte "erase"
003A02r 3  65           
003A03r 3               
003A03r 3               nt_d_plus:
003A03r 3  02 10                .byte 2, UF
003A05r 3  rr rr rr rr          .word nt_erase, xt_d_plus, z_d_plus
003A09r 3  rr rr        
003A0Br 3  64 2B                .byte "d+"
003A0Dr 3               
003A0Dr 3               nt_d_minus:
003A0Dr 3  02 10                .byte 2, UF
003A0Fr 3  rr rr rr rr          .word nt_d_plus, xt_d_minus, z_d_minus
003A13r 3  rr rr        
003A15r 3  64 2D                .byte "d-"
003A17r 3               
003A17r 3               nt_d_to_s:
003A17r 3  03 10                .byte 3, UF
003A19r 3  rr rr rr rr          .word nt_d_minus, xt_d_to_s, z_d_to_s
003A1Dr 3  rr rr        
003A1Fr 3  64 3E 73             .byte "d>s"
003A22r 3               
003A22r 3               nt_s_to_d:
003A22r 3  03 10                .byte 3, UF
003A24r 3  rr rr rr rr          .word nt_d_to_s, xt_s_to_d, z_s_to_d
003A28r 3  rr rr        
003A2Ar 3  73 3E 64             .byte "s>d"
003A2Dr 3               
003A2Dr 3               nt_to:
003A2Dr 3  02 0C                .byte 2, NN+IM
003A2Fr 3  rr rr rr rr          .word nt_s_to_d, xt_to, z_to
003A33r 3  rr rr        
003A35r 3  74 6F                .byte "to"
003A37r 3               
003A37r 3               nt_value:               ; same code as CONSTANT
003A37r 3  05 10                .byte 5, UF
003A39r 3  rr rr rr rr          .word nt_to, xt_constant, z_constant
003A3Dr 3  rr rr        
003A3Fr 3  76 61 6C 75          .byte "value"
003A43r 3  65           
003A44r 3               
003A44r 3               nt_constant:
003A44r 3  08 10                .byte 8, UF
003A46r 3  rr rr rr rr          .word nt_value, xt_constant, z_constant
003A4Ar 3  rr rr        
003A4Cr 3  63 6F 6E 73          .byte "constant"
003A50r 3  74 61 6E 74  
003A54r 3               
003A54r 3               nt_variable:
003A54r 3  08 00                .byte 8, 0
003A56r 3  rr rr rr rr          .word nt_constant, xt_variable, z_variable
003A5Ar 3  rr rr        
003A5Cr 3  76 61 72 69          .byte "variable"
003A60r 3  61 62 6C 65  
003A64r 3               
003A64r 3               nt_does:
003A64r 3  05 05                .byte 5, CO+IM
003A66r 3  rr rr rr rr          .word nt_variable, xt_does, z_does
003A6Ar 3  rr rr        
003A6Cr 3  64 6F 65 73          .byte "does>"
003A70r 3  3E           
003A71r 3               
003A71r 3               nt_create:
003A71r 3  06 00                .byte 6, 0
003A73r 3  rr rr rr rr          .word nt_does, xt_create, z_create
003A77r 3  rr rr        
003A79r 3  63 72 65 61          .byte "create"
003A7Dr 3  74 65        
003A7Fr 3               
003A7Fr 3               nt_allot:
003A7Fr 3  05 10                .byte 5, UF
003A81r 3  rr rr rr rr          .word nt_create, xt_allot, z_allot
003A85r 3  rr rr        
003A87r 3  61 6C 6C 6F          .byte "allot"
003A8Br 3  74           
003A8Cr 3               
003A8Cr 3               nt_key:
003A8Cr 3  03 00                .byte 3, 0
003A8Er 3  rr rr rr rr          .word nt_allot, xt_key, z_key
003A92r 3  rr rr        
003A94r 3  6B 65 79             .byte "key"
003A97r 3               
003A97r 3               nt_depth:
003A97r 3  05 00                .byte 5, 0
003A99r 3  rr rr rr rr          .word nt_key, xt_depth, z_depth
003A9Dr 3  rr rr        
003A9Fr 3  64 65 70 74          .byte "depth"
003AA3r 3  68           
003AA4r 3               
003AA4r 3               nt_unused:
003AA4r 3  06 00                .byte 6, 0
003AA6r 3  rr rr rr rr          .word nt_depth, xt_unused, z_unused
003AAAr 3  rr rr        
003AACr 3  75 6E 75 73          .byte "unused"
003AB0r 3  65 64        
003AB2r 3               
003AB2r 3               nt_r_to_input:
003AB2r 3  07 08                .byte 7, NN
003AB4r 3  rr rr rr rr          .word nt_unused, xt_r_to_input, z_r_to_input
003AB8r 3  rr rr        
003ABAr 3  72 3E 69 6E          .byte "r>input"
003ABEr 3  70 75 74     
003AC1r 3               
003AC1r 3               nt_input_to_r:
003AC1r 3  07 08                .byte 7, NN
003AC3r 3  rr rr rr rr          .word nt_r_to_input, xt_input_to_r, z_input_to_r
003AC7r 3  rr rr        
003AC9r 3  69 6E 70 75          .byte "input>r"
003ACDr 3  74 3E 72     
003AD0r 3               
003AD0r 3               nt_accept:
003AD0r 3  06 18                .byte 6, UF+NN
003AD2r 3  rr rr rr rr          .word nt_input_to_r, xt_accept, z_accept
003AD6r 3  rr rr        
003AD8r 3  61 63 63 65          .byte "accept"
003ADCr 3  70 74        
003ADEr 3               
003ADEr 3               nt_refill:
003ADEr 3  06 00                .byte 6, 0
003AE0r 3  rr rr rr rr          .word nt_accept, xt_refill, z_refill
003AE4r 3  rr rr        
003AE6r 3  72 65 66 69          .byte "refill"
003AEAr 3  6C 6C        
003AECr 3               
003AECr 3               nt_slash_string:
003AECr 3  07 10                .byte 7, UF
003AEEr 3  rr rr rr rr          .word nt_refill, xt_slash_string, z_slash_string
003AF2r 3  rr rr        
003AF4r 3  2F 73 74 72          .byte "/string"
003AF8r 3  69 6E 67     
003AFBr 3               
003AFBr 3               nt_minus_leading:
003AFBr 3  08 10                .byte 8, UF
003AFDr 3  rr rr rr rr          .word nt_slash_string, xt_minus_leading, z_minus_leading
003B01r 3  rr rr        
003B03r 3  2D 6C 65 61          .byte "-leading"
003B07r 3  64 69 6E 67  
003B0Br 3               
003B0Br 3               nt_minus_trailing:
003B0Br 3  09 10                .byte 9, UF
003B0Dr 3  rr rr rr rr          .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
003B11r 3  rr rr        
003B13r 3  2D 74 72 61          .byte "-trailing"
003B17r 3  69 6C 69 6E  
003B1Br 3  67           
003B1Cr 3               
003B1Cr 3               nt_bl:
003B1Cr 3  02 00                .byte 2, 0
003B1Er 3  rr rr rr rr          .word nt_minus_trailing, xt_bl, z_bl
003B22r 3  rr rr        
003B24r 3  62 6C                .byte "bl"
003B26r 3               
003B26r 3               nt_spaces:
003B26r 3  06 10                .byte 6, UF
003B28r 3  rr rr rr rr          .word nt_bl, xt_spaces, z_spaces
003B2Cr 3  rr rr        
003B2Er 3  73 70 61 63          .byte "spaces"
003B32r 3  65 73        
003B34r 3               
003B34r 3               nt_bounds:
003B34r 3  06 10                .byte 6, UF
003B36r 3  rr rr rr rr          .word nt_spaces, xt_bounds, z_bounds
003B3Ar 3  rr rr        
003B3Cr 3  62 6F 75 6E          .byte "bounds"
003B40r 3  64 73        
003B42r 3               
003B42r 3               nt_c_comma:
003B42r 3  02 10                .byte 2, UF
003B44r 3  rr rr rr rr          .word nt_bounds, xt_c_comma, z_c_comma
003B48r 3  rr rr        
003B4Ar 3  63 2C                .byte "c,"
003B4Cr 3               
003B4Cr 3               nt_dnegate:
003B4Cr 3  07 10                .byte 7, UF
003B4Er 3  rr rr rr rr          .word nt_c_comma, xt_dnegate, z_dnegate
003B52r 3  rr rr        
003B54r 3  64 6E 65 67          .byte "dnegate"
003B58r 3  61 74 65     
003B5Br 3               
003B5Br 3               nt_negate:
003B5Br 3  06 10                .byte 6, UF
003B5Dr 3  rr rr rr rr          .word nt_dnegate, xt_negate, z_negate
003B61r 3  rr rr        
003B63r 3  6E 65 67 61          .byte "negate"
003B67r 3  74 65        
003B69r 3               
003B69r 3               nt_invert:
003B69r 3  06 10                .byte 6, UF
003B6Br 3  rr rr rr rr          .word nt_negate, xt_invert, z_invert
003B6Fr 3  rr rr        
003B71r 3  69 6E 76 65          .byte "invert"
003B75r 3  72 74        
003B77r 3               
003B77r 3               nt_two_to_r:
003B77r 3  03 11                .byte 3, CO+UF          ; native is special case
003B79r 3  rr rr rr rr          .word nt_invert, xt_two_to_r, z_two_to_r
003B7Dr 3  rr rr        
003B7Fr 3  32 3E 72             .byte "2>r"
003B82r 3               
003B82r 3               nt_two_r_from:
003B82r 3  03 01                .byte 3, CO             ; native is special case
003B84r 3  rr rr rr rr          .word nt_two_to_r, xt_two_r_from, z_two_r_from
003B88r 3  rr rr        
003B8Ar 3  32 72 3E             .byte "2r>"
003B8Dr 3               
003B8Dr 3               nt_two_r_fetch:
003B8Dr 3  03 09                .byte 3, CO+NN          ; native is special case, leave NN for now
003B8Fr 3  rr rr rr rr          .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
003B93r 3  rr rr        
003B95r 3  32 72 40             .byte "2r@"
003B98r 3               
003B98r 3               nt_two_literal:
003B98r 3  08 14                .byte 8, UF+IM
003B9Ar 3  rr rr rr rr          .word nt_two_r_fetch, xt_two_literal, z_two_literal
003B9Er 3  rr rr        
003BA0r 3  32 6C 69 74          .byte "2literal"
003BA4r 3  65 72 61 6C  
003BA8r 3               
003BA8r 3               nt_two_constant:
003BA8r 3  09 10                .byte 9, UF
003BAAr 3  rr rr rr rr          .word nt_two_literal, xt_two_constant, z_two_constant
003BAEr 3  rr rr        
003BB0r 3  32 63 6F 6E          .byte "2constant"
003BB4r 3  73 74 61 6E  
003BB8r 3  74           
003BB9r 3               
003BB9r 3               nt_two_variable:
003BB9r 3  09 00                .byte 9, 0
003BBBr 3  rr rr rr rr          .word nt_two_constant, xt_two_variable, z_two_variable
003BBFr 3  rr rr        
003BC1r 3  32 76 61 72          .byte "2variable"
003BC5r 3  69 61 62 6C  
003BC9r 3  65           
003BCAr 3               
003BCAr 3               nt_two_fetch:
003BCAr 3  02 10                .byte 2, UF
003BCCr 3  rr rr rr rr          .word nt_two_variable, xt_two_fetch, z_two_fetch
003BD0r 3  rr rr        
003BD2r 3  32 40                .byte "2@"
003BD4r 3               
003BD4r 3               nt_two_store:
003BD4r 3  02 10                .byte 2, UF
003BD6r 3  rr rr rr rr          .word nt_two_fetch, xt_two_store, z_two_store
003BDAr 3  rr rr        
003BDCr 3  32 21                .byte "2!"
003BDEr 3               
003BDEr 3               nt_two_over:
003BDEr 3  05 10                .byte 5, UF
003BE0r 3  rr rr rr rr          .word nt_two_store, xt_two_over, z_two_over
003BE4r 3  rr rr        
003BE6r 3  32 6F 76 65          .byte "2over"
003BEAr 3  72           
003BEBr 3               
003BEBr 3               nt_two_swap:
003BEBr 3  05 10                .byte 5, UF
003BEDr 3  rr rr rr rr          .word nt_two_over, xt_two_swap, z_two_swap
003BF1r 3  rr rr        
003BF3r 3  32 73 77 61          .byte "2swap"
003BF7r 3  70           
003BF8r 3               
003BF8r 3               nt_two_drop:
003BF8r 3  05 10                .byte 5, UF
003BFAr 3  rr rr rr rr          .word nt_two_swap, xt_two_drop, z_two_drop
003BFEr 3  rr rr        
003C00r 3  32 64 72 6F          .byte "2drop"
003C04r 3  70           
003C05r 3               
003C05r 3               nt_max:
003C05r 3  03 10                .byte 3, UF
003C07r 3  rr rr rr rr          .word nt_two_drop, xt_max, z_max
003C0Br 3  rr rr        
003C0Dr 3  6D 61 78             .byte "max"
003C10r 3               
003C10r 3               nt_min:
003C10r 3  03 10                .byte 3, UF
003C12r 3  rr rr rr rr          .word nt_max, xt_min, z_min
003C16r 3  rr rr        
003C18r 3  6D 69 6E             .byte "min"
003C1Br 3               
003C1Br 3               nt_zero_less:
003C1Br 3  02 10                .byte 2, UF
003C1Dr 3  rr rr rr rr          .word nt_min, xt_zero_less, z_zero_less
003C21r 3  rr rr        
003C23r 3  30 3C                .byte "0<"
003C25r 3               
003C25r 3               nt_zero_greater:
003C25r 3  02 10                .byte 2, UF
003C27r 3  rr rr rr rr          .word nt_zero_less, xt_zero_greater, z_zero_greater
003C2Br 3  rr rr        
003C2Dr 3  30 3E                .byte "0>"
003C2Fr 3               
003C2Fr 3               nt_zero_unequal:
003C2Fr 3  03 10                .byte 3, UF
003C31r 3  rr rr rr rr          .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
003C35r 3  rr rr        
003C37r 3  30 3C 3E             .byte "0<>"
003C3Ar 3               
003C3Ar 3               nt_zero_equal:
003C3Ar 3  02 10                .byte 2, UF
003C3Cr 3  rr rr rr rr          .word nt_zero_unequal, xt_zero_equal, z_zero_equal
003C40r 3  rr rr        
003C42r 3  30 3D                .byte "0="
003C44r 3               
003C44r 3               nt_greater_than:
003C44r 3  01 10                .byte 1, UF
003C46r 3  rr rr rr rr          .word nt_zero_equal, xt_greater_than, z_greater_than
003C4Ar 3  rr rr        
003C4Cr 3  3E                   .byte ">"
003C4Dr 3               
003C4Dr 3               nt_u_greater_than:
003C4Dr 3  02 10                .byte 2, UF
003C4Fr 3  rr rr rr rr          .word nt_greater_than, xt_u_greater_than, z_u_greater_than
003C53r 3  rr rr        
003C55r 3  75 3E                .byte "u>"
003C57r 3               
003C57r 3               nt_u_less_than:
003C57r 3  02 10                .byte 2, UF
003C59r 3  rr rr rr rr          .word nt_u_greater_than, xt_u_less_than, z_u_less_than
003C5Dr 3  rr rr        
003C5Fr 3  75 3C                .byte "u<"
003C61r 3               
003C61r 3               nt_less_than:
003C61r 3  01 10                .byte 1, UF
003C63r 3  rr rr rr rr          .word nt_u_less_than, xt_less_than, z_less_than
003C67r 3  rr rr        
003C69r 3  3C                   .byte "<"
003C6Ar 3               
003C6Ar 3               nt_not_equals:
003C6Ar 3  02 10                .byte 2, UF
003C6Cr 3  rr rr rr rr          .word nt_less_than, xt_not_equals, z_not_equals
003C70r 3  rr rr        
003C72r 3  3C 3E                .byte "<>"
003C74r 3               
003C74r 3               nt_equal:
003C74r 3  01 10                .byte 1, UF
003C76r 3  rr rr rr rr          .word nt_not_equals, xt_equal, z_equal
003C7Ar 3  rr rr        
003C7Cr 3  3D                   .byte "="
003C7Dr 3               
003C7Dr 3               nt_two_slash:
003C7Dr 3  02 10                .byte 2, UF
003C7Fr 3  rr rr rr rr          .word nt_equal, xt_two_slash, z_two_slash
003C83r 3  rr rr        
003C85r 3  32 2F                .byte "2/"
003C87r 3               
003C87r 3               nt_two_star:
003C87r 3  02 10                .byte 2, UF
003C89r 3  rr rr rr rr          .word nt_two_slash, xt_two_star, z_two_star
003C8Dr 3  rr rr        
003C8Fr 3  32 2A                .byte "2*"
003C91r 3               
003C91r 3               nt_one_plus:
003C91r 3  02 10                .byte 2, UF
003C93r 3  rr rr rr rr          .word nt_two_star, xt_one_plus, z_one_plus
003C97r 3  rr rr        
003C99r 3  31 2B                .byte "1+"
003C9Br 3               
003C9Br 3               nt_one_minus:
003C9Br 3  02 10                .byte 2, UF
003C9Dr 3  rr rr rr rr          .word nt_one_plus, xt_one_minus, z_one_minus
003CA1r 3  rr rr        
003CA3r 3  31 2D                .byte "1-"
003CA5r 3               
003CA5r 3               nt_here:
003CA5r 3  04 00                .byte 4, 0
003CA7r 3  rr rr rr rr          .word nt_one_minus, xt_here, z_here
003CABr 3  rr rr        
003CADr 3  68 65 72 65          .byte "here"
003CB1r 3               
003CB1r 3               nt_cell_plus:
003CB1r 3  05 10                .byte 5, UF
003CB3r 3  rr rr rr rr          .word nt_here, xt_cell_plus, z_cell_plus
003CB7r 3  rr rr        
003CB9r 3  63 65 6C 6C          .byte "cell+"
003CBDr 3  2B           
003CBEr 3               
003CBEr 3               nt_cells:
003CBEr 3  05 00                .byte 5, 0
003CC0r 3  rr rr rr rr          .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
003CC4r 3  rr rr        
003CC6r 3  63 65 6C 6C          .byte "cells"
003CCAr 3  73           
003CCBr 3               
003CCBr 3               nt_chars:
003CCBr 3  05 12                .byte 5, AN+UF   ; deleted during compile
003CCDr 3  rr rr rr rr          .word nt_cells, xt_chars, z_chars
003CD1r 3  rr rr        
003CD3r 3  63 68 61 72          .byte "chars"
003CD7r 3  73           
003CD8r 3               
003CD8r 3               nt_char_plus:
003CD8r 3  05 00                .byte 5, 0
003CDAr 3  rr rr rr rr          .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
003CDEr 3  rr rr        
003CE0r 3  63 68 61 72          .byte "char+"
003CE4r 3  2B           
003CE5r 3               
003CE5r 3               nt_bracket_char:
003CE5r 3  06 05                .byte 6, CO+IM
003CE7r 3  rr rr rr rr          .word nt_char_plus, xt_bracket_char, z_bracket_char
003CEBr 3  rr rr        
003CEDr 3  5B 63 68 61          .byte "[char]"
003CF1r 3  72 5D        
003CF3r 3               
003CF3r 3               nt_char:
003CF3r 3  04 00                .byte 4, 0
003CF5r 3  rr rr rr rr          .word nt_bracket_char, xt_char, z_char
003CF9r 3  rr rr        
003CFBr 3  63 68 61 72          .byte "char"
003CFFr 3               
003CFFr 3               nt_pick:
003CFFr 3  04 00                .byte 4, 0    ; underflow check is complicated, leave off here
003D01r 3  rr rr rr rr          .word nt_char, xt_pick, z_pick
003D05r 3  rr rr        
003D07r 3  70 69 63 6B          .byte "pick"
003D0Br 3               
003D0Br 3               nt_lshift:
003D0Br 3  06 10                .byte 6, UF
003D0Dr 3  rr rr rr rr          .word nt_pick, xt_lshift, z_lshift
003D11r 3  rr rr        
003D13r 3  6C 73 68 69          .byte "lshift"
003D17r 3  66 74        
003D19r 3               
003D19r 3               nt_rshift:
003D19r 3  06 10                .byte 6, UF
003D1Br 3  rr rr rr rr          .word nt_lshift, xt_rshift, z_rshift
003D1Fr 3  rr rr        
003D21r 3  72 73 68 69          .byte "rshift"
003D25r 3  66 74        
003D27r 3               
003D27r 3               nt_xor:
003D27r 3  03 10                .byte 3, UF
003D29r 3  rr rr rr rr          .word nt_rshift, xt_xor, z_xor
003D2Dr 3  rr rr        
003D2Fr 3  78 6F 72             .byte "xor"
003D32r 3               
003D32r 3               nt_or:
003D32r 3  02 10                .byte 2, UF
003D34r 3  rr rr rr rr          .word nt_xor, xt_or, z_or
003D38r 3  rr rr        
003D3Ar 3  6F 72                .byte "or"
003D3Cr 3               
003D3Cr 3               nt_and:
003D3Cr 3  03 10                .byte 3, UF
003D3Er 3  rr rr rr rr          .word nt_or, xt_and, z_and
003D42r 3  rr rr        
003D44r 3  61 6E 64             .byte "and"
003D47r 3               
003D47r 3               nt_dabs:
003D47r 3  04 10                .byte 4, UF
003D49r 3  rr rr rr rr          .word nt_and, xt_dabs, z_dabs
003D4Dr 3  rr rr        
003D4Fr 3  64 61 62 73          .byte "dabs"
003D53r 3               
003D53r 3               nt_abs:
003D53r 3  03 10                .byte 3, UF
003D55r 3  rr rr rr rr          .word nt_dabs, xt_abs, z_abs
003D59r 3  rr rr        
003D5Br 3  61 62 73             .byte "abs"
003D5Er 3               
003D5Er 3               nt_minus:
003D5Er 3  01 10                .byte 1, UF
003D60r 3  rr rr rr rr          .word nt_abs, xt_minus, z_minus
003D64r 3  rr rr        
003D66r 3  2D                   .byte "-"
003D67r 3               
003D67r 3               nt_plus:
003D67r 3  01 10                .byte 1, UF
003D69r 3  rr rr rr rr          .word nt_minus, xt_plus, z_plus
003D6Dr 3  rr rr        
003D6Fr 3  2B                   .byte "+"
003D70r 3               
003D70r 3               nt_question_dup:
003D70r 3  04 10                .byte 4, UF
003D72r 3  rr rr rr rr          .word nt_plus, xt_question_dup, z_question_dup
003D76r 3  rr rr        
003D78r 3  3F 64 75 70          .byte "?dup"
003D7Cr 3               
003D7Cr 3               nt_two_dup:
003D7Cr 3  04 10                .byte 4, UF
003D7Er 3  rr rr rr rr          .word nt_question_dup, xt_two_dup, z_two_dup
003D82r 3  rr rr        
003D84r 3  32 64 75 70          .byte "2dup"
003D88r 3               
003D88r 3               nt_two:
003D88r 3  01 00                .byte 1, 0
003D8Ar 3  rr rr rr rr          .word nt_two_dup, xt_two, z_two
003D8Er 3  rr rr        
003D90r 3  32                   .byte "2"
003D91r 3               
003D91r 3               nt_one:
003D91r 3  01 00                .byte 1, 0
003D93r 3  rr rr rr rr          .word nt_two, xt_one, z_one
003D97r 3  rr rr        
003D99r 3  31                   .byte "1"
003D9Ar 3               
003D9Ar 3               nt_zero:
003D9Ar 3  01 00                .byte 1, 0
003D9Cr 3  rr rr rr rr          .word nt_one, xt_zero, z_zero
003DA0r 3  rr rr        
003DA2r 3  30                   .byte "0"
003DA3r 3               
003DA3r 3               nt_space:
003DA3r 3  05 00                .byte 5, 0
003DA5r 3  rr rr rr rr          .word nt_zero, xt_space, z_space
003DA9r 3  rr rr        
003DABr 3  73 70 61 63          .byte "space"
003DAFr 3  65           
003DB0r 3               
003DB0r 3               nt_true:
003DB0r 3  04 00                .byte 4, 0
003DB2r 3  rr rr rr rr          .word nt_space, xt_true, z_true
003DB6r 3  rr rr        
003DB8r 3  74 72 75 65          .byte "true"
003DBCr 3               
003DBCr 3               nt_false:
003DBCr 3  05 00                .byte 5, 0
003DBEr 3  rr rr rr rr          .word nt_true, xt_false, z_false
003DC2r 3  rr rr        
003DC4r 3  66 61 6C 73          .byte "false"
003DC8r 3  65           
003DC9r 3               
003DC9r 3               nt_question:
003DC9r 3  01 00                .byte 1, 0
003DCBr 3  rr rr rr rr          .word nt_false, xt_question, z_question
003DCFr 3  rr rr        
003DD1r 3  3F                   .byte "?"
003DD2r 3               
003DD2r 3               nt_ud_dot_r:
003DD2r 3  04 10                .byte 4, UF
003DD4r 3  rr rr rr rr          .word nt_question, xt_ud_dot_r, z_ud_dot_r
003DD8r 3  rr rr        
003DDAr 3  75 64 2E 72          .byte "ud.r"
003DDEr 3               
003DDEr 3               nt_ud_dot:
003DDEr 3  03 10                .byte 3, UF
003DE0r 3  rr rr rr rr          .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
003DE4r 3  rr rr        
003DE6r 3  75 64 2E             .byte "ud."
003DE9r 3               
003DE9r 3               nt_d_dot_r:
003DE9r 3  03 10                .byte 3, UF
003DEBr 3  rr rr rr rr          .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
003DEFr 3  rr rr        
003DF1r 3  64 2E 72             .byte "d.r"
003DF4r 3               
003DF4r 3               nt_d_dot:
003DF4r 3  02 10                .byte 2, UF
003DF6r 3  rr rr rr rr          .word nt_d_dot_r, xt_d_dot, z_d_dot
003DFAr 3  rr rr        
003DFCr 3  64 2E                .byte "d."
003DFEr 3               
003DFEr 3               nt_dot_r:
003DFEr 3  02 10                .byte 2, UF
003E00r 3  rr rr rr rr          .word nt_d_dot, xt_dot_r, z_dot_r
003E04r 3  rr rr        
003E06r 3  2E 72                .byte ".r"
003E08r 3               
003E08r 3               nt_u_dot_r:
003E08r 3  03 10                .byte 3, UF
003E0Ar 3  rr rr rr rr          .word nt_dot_r, xt_u_dot_r, z_u_dot_r
003E0Er 3  rr rr        
003E10r 3  75 2E 72             .byte "u.r"
003E13r 3               
003E13r 3               nt_u_dot:
003E13r 3  02 10                .byte 2, UF
003E15r 3  rr rr rr rr          .word nt_u_dot_r, xt_u_dot, z_u_dot
003E19r 3  rr rr        
003E1Br 3  75 2E                .byte "u."
003E1Dr 3               
003E1Dr 3               nt_dot:
003E1Dr 3  01 10                .byte 1, UF
003E1Fr 3  rr rr rr rr          .word nt_u_dot, xt_dot, z_dot
003E23r 3  rr rr        
003E25r 3  2E                   .byte "."
003E26r 3               
003E26r 3               nt_type:
003E26r 3  04 10                .byte 4, UF
003E28r 3  rr rr rr rr          .word nt_dot, xt_type, z_type
003E2Cr 3  rr rr        
003E2Er 3  74 79 70 65          .byte "type"
003E32r 3               
003E32r 3               nt_emit:
003E32r 3  04 18                .byte 4, NN+UF
003E34r 3  rr rr rr rr          .word nt_type, xt_emit, z_emit
003E38r 3  rr rr        
003E3Ar 3  65 6D 69 74          .byte "emit"
003E3Er 3               
003E3Er 3               nt_execute:
003E3Er 3  07 10                .byte 7, UF
003E40r 3  rr rr rr rr          .word nt_emit, xt_execute, z_execute
003E44r 3  rr rr        
003E46r 3  65 78 65 63          .byte "execute"
003E4Ar 3  75 74 65     
003E4Dr 3               
003E4Dr 3               nt_plus_store:
003E4Dr 3  02 10                .byte 2, UF
003E4Fr 3  rr rr rr rr          .word nt_execute, xt_plus_store, z_plus_store
003E53r 3  rr rr        
003E55r 3  2B 21                .byte "+!"
003E57r 3               
003E57r 3               nt_c_store:
003E57r 3  02 10                .byte 2, UF
003E59r 3  rr rr rr rr          .word nt_plus_store, xt_c_store, z_c_store
003E5Dr 3  rr rr        
003E5Fr 3  63 21                .byte "c!"
003E61r 3               
003E61r 3               nt_c_fetch:
003E61r 3  02 10                .byte 2, UF
003E63r 3  rr rr rr rr          .word nt_c_store, xt_c_fetch, z_c_fetch
003E67r 3  rr rr        
003E69r 3  63 40                .byte "c@"
003E6Br 3               
003E6Br 3               nt_comma:
003E6Br 3  01 10                .byte 1, UF
003E6Dr 3  rr rr rr rr          .word nt_c_fetch, xt_comma, z_comma
003E71r 3  rr rr        
003E73r 3  2C                   .byte ","
003E74r 3               
003E74r 3               nt_tuck:
003E74r 3  04 10                .byte 4, UF
003E76r 3  rr rr rr rr          .word nt_comma, xt_tuck, z_tuck
003E7Ar 3  rr rr        
003E7Cr 3  74 75 63 6B          .byte "tuck"
003E80r 3               
003E80r 3               nt_not_rote:
003E80r 3  04 10                .byte 4, UF
003E82r 3  rr rr rr rr          .word nt_tuck, xt_not_rote, z_not_rote
003E86r 3  rr rr        
003E88r 3  2D 72 6F 74          .byte "-rot"
003E8Cr 3               
003E8Cr 3               nt_rot:
003E8Cr 3  03 10                .byte 3, UF
003E8Er 3  rr rr rr rr          .word nt_not_rote, xt_rot, z_rot
003E92r 3  rr rr        
003E94r 3  72 6F 74             .byte "rot"
003E97r 3               
003E97r 3               nt_nip:
003E97r 3  03 10                .byte 3, UF
003E99r 3  rr rr rr rr          .word nt_rot, xt_nip, z_nip
003E9Dr 3  rr rr        
003E9Fr 3  6E 69 70             .byte "nip"
003EA2r 3               
003EA2r 3               nt_r_fetch:
003EA2r 3  02 01                .byte 2, CO    ; native is special case
003EA4r 3  rr rr rr rr          .word nt_nip, xt_r_fetch, z_r_fetch
003EA8r 3  rr rr        
003EAAr 3  72 40                .byte "r@"
003EACr 3               
003EACr 3               nt_r_from:
003EACr 3  02 01                .byte 2, CO    ; native is special case
003EAEr 3  rr rr rr rr          .word nt_r_fetch, xt_r_from, z_r_from
003EB2r 3  rr rr        
003EB4r 3  72 3E                .byte "r>"
003EB6r 3               
003EB6r 3               nt_to_r:
003EB6r 3  02 11                .byte 2, CO+UF ; native is special case
003EB8r 3  rr rr rr rr          .word nt_r_from, xt_to_r, z_to_r
003EBCr 3  rr rr        
003EBEr 3  3E 72                .byte ">r"
003EC0r 3               
003EC0r 3               nt_over:
003EC0r 3  04 10                .byte 4, UF
003EC2r 3  rr rr rr rr          .word nt_to_r, xt_over, z_over
003EC6r 3  rr rr        
003EC8r 3  6F 76 65 72          .byte "over"
003ECCr 3               
003ECCr 3               nt_fetch:
003ECCr 3  01 10                .byte 1, UF
003ECEr 3  rr rr rr rr          .word nt_over, xt_fetch, z_fetch
003ED2r 3  rr rr        
003ED4r 3  40                   .byte "@"
003ED5r 3               
003ED5r 3               nt_store:
003ED5r 3  01 10                .byte 1, UF
003ED7r 3  rr rr rr rr          .word nt_fetch, xt_store, z_store
003EDBr 3  rr rr        
003EDDr 3  21                   .byte "!"
003EDEr 3               
003EDEr 3               nt_swap:
003EDEr 3  04 10                .byte 4, UF
003EE0r 3  rr rr rr rr          .word nt_store, xt_swap, z_swap
003EE4r 3  rr rr        
003EE6r 3  73 77 61 70          .byte "swap"
003EEAr 3               
003EEAr 3               nt_dup:
003EEAr 3  03 10                .byte 3, UF
003EECr 3  rr rr rr rr          .word nt_swap, xt_dup, z_dup
003EF0r 3  rr rr        
003EF2r 3  64 75 70             .byte "dup"
003EF5r 3               
003EF5r 3               ; DROP is always the first native word in the Dictionary
003EF5r 3               dictionary_start:
003EF5r 3               nt_drop:
003EF5r 3  04 10                .byte 4, UF
003EF7r 3  rr rr rr rr          .word nt_dup, xt_drop, z_drop
003EFBr 3  rr rr        
003EFDr 3  64 72 6F 70          .byte "drop"
003F01r 3               
003F01r 3               ; END of FORTH-WORDLIST
003F01r 3               
003F01r 3               
003F01r 3               ; ROOT-WORDLIST
003F01r 3                       ; This is a short wordlist that has just the words needed to
003F01r 3                       ; set the wordlists. These words are also included in the
003F01r 3                       ; FORTH-WORDLIST as well.
003F01r 3               
003F01r 3               nt_root_words:
003F01r 3  05 00                .byte 5, 0
003F03r 3  00 00 rr rr          .word 0000, xt_words, z_words
003F07r 3  rr rr        
003F09r 3  77 6F 72 64          .byte "words"
003F0Dr 3  73           
003F0Er 3               
003F0Er 3               nt_root_forth_wordlist: ; shares code with ZERO
003F0Er 3  0E 00                .byte 14, 0
003F10r 3  rr rr rr rr          .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
003F14r 3  rr rr        
003F16r 3  66 6F 72 74          .byte "forth-wordlist"
003F1Ar 3  68 2D 77 6F  
003F1Er 3  72 64 6C 69  
003F24r 3               
003F24r 3               nt_root_forth:
003F24r 3  05 00                .byte 5, 0
003F26r 3  rr rr rr rr          .word nt_root_forth_wordlist, xt_forth, z_forth
003F2Ar 3  rr rr        
003F2Cr 3  66 6F 72 74          .byte "forth"
003F30r 3  68           
003F31r 3               
003F31r 3               root_dictionary_start:
003F31r 3               nt_root_set_order:
003F31r 3  09 00                .byte 9, 0
003F33r 3  rr rr rr rr          .word nt_root_forth, xt_set_order, z_set_order
003F37r 3  rr rr        
003F39r 3  73 65 74 2D          .byte "set-order"
003F3Dr 3  6F 72 64 65  
003F41r 3  72           
003F42r 3               
003F42r 3               ; END of ROOT-WORDLIST
003F42r 3               
003F42r 3               
003F42r 3               ; ; EDITOR-WORDLIST
003F42r 3               
003F42r 3               ; nt_editor_enter_screen:
003F42r 3               ;         .byte 12, 0
003F42r 3               ;         .word 0000, xt_editor_enter_screen, z_editor_enter_screen
003F42r 3               ;         .byte "enter-screen"
003F42r 3               
003F42r 3               ; nt_editor_erase_screen:
003F42r 3               ;         .byte 12, 0
003F42r 3               ;         .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
003F42r 3               ;         .byte "erase-screen"
003F42r 3               
003F42r 3               ; nt_editor_el:
003F42r 3               ;         .byte 2, 0
003F42r 3               ;         .word nt_editor_erase_screen, xt_editor_el, z_editor_el
003F42r 3               ;         .byte "el"
003F42r 3               
003F42r 3               ; nt_editor_l:
003F42r 3               ;         .byte 1, 0
003F42r 3               ;         .word nt_editor_el, xt_editor_l, z_editor_l
003F42r 3               ;         .byte "l"
003F42r 3               
003F42r 3               ; nt_editor_line:
003F42r 3               ;         .byte 4, UF
003F42r 3               ;         .word nt_editor_l, xt_editor_line, z_editor_line
003F42r 3               ;         .byte "line"
003F42r 3               
003F42r 3               editor_dictionary_start:
003F42r 3               ; nt_editor_o:
003F42r 3               ;         .byte 1, 0
003F42r 3               ;         .word nt_editor_line, xt_editor_o, z_editor_o
003F42r 3               ;         .byte "o"
003F42r 3               
003F42r 3               ; ; END of EDITOR-WORDLIST
003F42r 3               
003F42r 3               
003F42r 3               ; ; ASSEMBLER-WORDLIST
003F42r 3               
003F42r 3               ; ; Labels for the opcodes have the format "nt_asm_<OPC>" where a futher
003F42r 3               ; ; underscore replaces any dot present in the SAN mnemonic. The hash sign for
003F42r 3               ; ; immediate addressing is replaced by an "h" (for example, the label code for
003F42r 3               ; ; "lda.#" is "xt_adm_lda_h"). All opcodes are immediate.
003F42r 3               assembler_dictionary_start:
003F42r 3               ; nt_asm_adc_h:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_adc_x
003F42r 3               ; 		.word xt_asm_adc_h, z_asm_adc_h
003F42r 3               ; 		.byte "adc.#"
003F42r 3               
003F42r 3               ; nt_asm_adc_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_adc_y
003F42r 3               ; 		.word xt_asm_adc_x, z_asm_adc_x
003F42r 3               ; 		.byte "adc.x"
003F42r 3               
003F42r 3               ; nt_asm_adc_y:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_adc_z
003F42r 3               ; 		.word xt_asm_adc_y, z_asm_adc_y
003F42r 3               ; 		.byte "adc.y"
003F42r 3               
003F42r 3               ; nt_asm_adc_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_adc_zi
003F42r 3               ; 		.word xt_asm_adc_z, z_asm_adc_z
003F42r 3               ; 		.byte "adc.z"
003F42r 3               
003F42r 3               ; nt_asm_adc_zi:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_adc_ziy
003F42r 3               ; 		.word xt_asm_adc_zi, z_asm_adc_zi
003F42r 3               ; 		.byte "adc.zi"
003F42r 3               
003F42r 3               ; nt_asm_adc_ziy:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_adc_zx
003F42r 3               ; 		.word xt_asm_adc_ziy, z_asm_adc_ziy
003F42r 3               ; 		.byte "adc.ziy"
003F42r 3               
003F42r 3               ; nt_asm_adc_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_adc_zxi
003F42r 3               ; 		.word xt_asm_adc_zx, z_asm_adc_zx
003F42r 3               ; 		.byte "adc.zx"
003F42r 3               
003F42r 3               ; nt_asm_adc_zxi:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_and
003F42r 3               ; 		.word xt_asm_adc_zxi, z_asm_adc_zxi
003F42r 3               ; 		.byte "adc.zxi"
003F42r 3               
003F42r 3               ; nt_asm_and:     ; not "and" because of conflicts with Forth word
003F42r 3               ; 		.byte 4, IM
003F42r 3               ;                 .word nt_asm_and_h
003F42r 3               ; 		.word xt_asm_and, z_asm_and
003F42r 3               ; 		.byte "and."
003F42r 3               
003F42r 3               ; nt_asm_and_h:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_and_x
003F42r 3               ; 		.word xt_asm_and_h, z_asm_and_h
003F42r 3               ; 		.byte "and.#"
003F42r 3               
003F42r 3               ; nt_asm_and_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_and_y
003F42r 3               ; 		.word xt_asm_and_x, z_asm_and_x
003F42r 3               ; 		.byte "and.x"
003F42r 3               
003F42r 3               ; nt_asm_and_y:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_and_z
003F42r 3               ; 		.word xt_asm_and_y, z_asm_and_y
003F42r 3               ; 		.byte "and.y"
003F42r 3               
003F42r 3               ; nt_asm_and_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_and_zi
003F42r 3               ; 		.word xt_asm_and_z, z_asm_and_z
003F42r 3               ; 		.byte "and.z"
003F42r 3               
003F42r 3               ; nt_asm_and_zi:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_and_ziy
003F42r 3               ; 		.word xt_asm_and_zi, z_asm_and_zi
003F42r 3               ; 		.byte "and.zi"
003F42r 3               
003F42r 3               ; nt_asm_and_ziy:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_and_zx
003F42r 3               ; 		.word xt_asm_and_ziy, z_asm_and_ziy
003F42r 3               ; 		.byte "and.ziy"
003F42r 3               
003F42r 3               ; nt_asm_and_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_and_zxi
003F42r 3               ; 		.word xt_asm_and_zx, z_asm_and_zx
003F42r 3               ; 		.byte "and.zx"
003F42r 3               
003F42r 3               ; nt_asm_and_zxi:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_asl
003F42r 3               ; 		.word xt_asm_and_zxi, z_asm_and_zxi
003F42r 3               ; 		.byte "and.zxi"
003F42r 3               
003F42r 3               ; nt_asm_asl:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_asl_a
003F42r 3               ; 		.word xt_asm_asl, z_asm_asl
003F42r 3               ; 		.byte "asl"
003F42r 3               
003F42r 3               ; nt_asm_asl_a:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_asl_x
003F42r 3               ; 		.word xt_asm_asl_a, z_asm_asl_a
003F42r 3               ; 		.byte "asl.a"
003F42r 3               
003F42r 3               ; nt_asm_asl_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_asl_z
003F42r 3               ; 		.word xt_asm_asl_x, z_asm_asl_x
003F42r 3               ; 		.byte "asl.x"
003F42r 3               
003F42r 3               ; nt_asm_asl_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_asl_zx
003F42r 3               ; 		.word xt_asm_asl_z, z_asm_asl_z
003F42r 3               ; 		.byte "asl.z"
003F42r 3               
003F42r 3               ; nt_asm_asl_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_bcc
003F42r 3               ; 		.word xt_asm_asl_zx, z_asm_asl_zx
003F42r 3               ; 		.byte "asl.zx"
003F42r 3               
003F42r 3               ; nt_asm_bcc:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_bcs
003F42r 3               ; 		.word xt_asm_bcc, z_asm_bcc
003F42r 3               ; 		.byte "bcc"
003F42r 3               
003F42r 3               ; nt_asm_bcs:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_beq
003F42r 3               ; 		.word xt_asm_bcs, z_asm_bcs
003F42r 3               ; 		.byte "bcs"
003F42r 3               
003F42r 3               ; nt_asm_beq:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_bit
003F42r 3               ; 		.word xt_asm_beq, z_asm_beq
003F42r 3               ; 		.byte "beq"
003F42r 3               
003F42r 3               ; nt_asm_bit:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_bit_h
003F42r 3               ; 		.word xt_asm_bit, z_asm_bit
003F42r 3               ; 		.byte "bit"
003F42r 3               
003F42r 3               ; nt_asm_bit_h:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_bit_x
003F42r 3               ; 		.word xt_asm_bit_h, z_asm_bit_h
003F42r 3               ; 		.byte "bit.#"
003F42r 3               
003F42r 3               ; nt_asm_bit_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_bit_z
003F42r 3               ; 		.word xt_asm_bit_x, z_asm_bit_x
003F42r 3               ; 		.byte "bit.x"
003F42r 3               
003F42r 3               ; nt_asm_bit_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_bit_zx
003F42r 3               ; 		.word xt_asm_bit_z, z_asm_bit_z
003F42r 3               ; 		.byte "bit.z"
003F42r 3               
003F42r 3               ; nt_asm_bit_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_bmi
003F42r 3               ; 		.word xt_asm_bit_zx, z_asm_bit_zx
003F42r 3               ; 		.byte "bit.zx"
003F42r 3               
003F42r 3               ; nt_asm_bmi:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_bne
003F42r 3               ; 		.word xt_asm_bmi, z_asm_bmi
003F42r 3               ; 		.byte "bmi"
003F42r 3               
003F42r 3               ; nt_asm_bne:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_bpl
003F42r 3               ; 		.word xt_asm_bne, z_asm_bne
003F42r 3               ; 		.byte "bne"
003F42r 3               
003F42r 3               ; nt_asm_bpl:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_bra
003F42r 3               ; 		.word xt_asm_bpl, z_asm_bpl
003F42r 3               ; 		.byte "bpl"
003F42r 3               
003F42r 3               ; nt_asm_bra:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_brk
003F42r 3               ; 		.word xt_asm_bra, z_asm_bra
003F42r 3               ; 		.byte "bra"
003F42r 3               
003F42r 3               ; nt_asm_brk:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_bvc
003F42r 3               ; 		.word xt_asm_brk, z_asm_brk
003F42r 3               ; 		.byte "brk"
003F42r 3               
003F42r 3               ; nt_asm_bvc:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_bvs
003F42r 3               ; 		.word xt_asm_bvc, z_asm_bvc
003F42r 3               ; 		.byte "bvc"
003F42r 3               
003F42r 3               ; nt_asm_bvs:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_clc
003F42r 3               ; 		.word xt_asm_bvs, z_asm_bvs
003F42r 3               ; 		.byte "bvs"
003F42r 3               
003F42r 3               ; nt_asm_clc:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_cld
003F42r 3               ; 		.word xt_asm_clc, z_asm_clc
003F42r 3               ; 		.byte "clc"
003F42r 3               
003F42r 3               ; nt_asm_cld:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_cli
003F42r 3               ; 		.word xt_asm_cld, z_asm_cld
003F42r 3               ; 		.byte "cld"
003F42r 3               
003F42r 3               ; nt_asm_cli:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_clv
003F42r 3               ; 		.word xt_asm_cli, z_asm_cli
003F42r 3               ; 		.byte "cli"
003F42r 3               
003F42r 3               ; nt_asm_clv:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_cmp
003F42r 3               ; 		.word xt_asm_clv, z_asm_clv
003F42r 3               ; 		.byte "clv"
003F42r 3               
003F42r 3               ; nt_asm_cmp:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_cmp_h
003F42r 3               ; 		.word xt_asm_cmp, z_asm_cmp
003F42r 3               ; 		.byte "cmp"
003F42r 3               
003F42r 3               ; nt_asm_cmp_h:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_cmp_x
003F42r 3               ; 		.word xt_asm_cmp_h, z_asm_cmp_h
003F42r 3               ; 		.byte "cmp.#"
003F42r 3               
003F42r 3               ; nt_asm_cmp_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_cmp_y
003F42r 3               ; 		.word xt_asm_cmp_x, z_asm_cmp_x
003F42r 3               ; 		.byte "cmp.x"
003F42r 3               
003F42r 3               ; nt_asm_cmp_y:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_cmp_z
003F42r 3               ; 		.word xt_asm_cmp_y, z_asm_cmp_y
003F42r 3               ; 		.byte "cmp.y"
003F42r 3               
003F42r 3               ; nt_asm_cmp_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_cmp_zi
003F42r 3               ; 		.word xt_asm_cmp_z, z_asm_cmp_z
003F42r 3               ; 		.byte "cmp.z"
003F42r 3               
003F42r 3               ; nt_asm_cmp_zi:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_cmp_ziy
003F42r 3               ; 		.word xt_asm_cmp_zi, z_asm_cmp_zi
003F42r 3               ; 		.byte "cmp.zi"
003F42r 3               
003F42r 3               ; nt_asm_cmp_ziy:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_cmp_zx
003F42r 3               ; 		.word xt_asm_cmp_ziy, z_asm_cmp_ziy
003F42r 3               ; 		.byte "cmp.ziy"
003F42r 3               
003F42r 3               ; nt_asm_cmp_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_cmp_zxi
003F42r 3               ; 		.word xt_asm_cmp_zx, z_asm_cmp_zx
003F42r 3               ; 		.byte "cmp.zx"
003F42r 3               
003F42r 3               ; nt_asm_cmp_zxi:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_cpx
003F42r 3               ; 		.word xt_asm_cmp_zxi, z_asm_cmp_zxi
003F42r 3               ; 		.byte "cmp.zxi"
003F42r 3               
003F42r 3               ; nt_asm_cpx:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_cpx_h
003F42r 3               ; 		.word xt_asm_cpx, z_asm_cpx
003F42r 3               ; 		.byte "cpx"
003F42r 3               
003F42r 3               ; nt_asm_cpx_h:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_cpx_z
003F42r 3               ; 		.word xt_asm_cpx_h, z_asm_cpx_h
003F42r 3               ; 		.byte "cpx.#"
003F42r 3               
003F42r 3               ; nt_asm_cpx_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_cpy
003F42r 3               ; 		.word xt_asm_cpx_z, z_asm_cpx_z
003F42r 3               ; 		.byte "cpx.z"
003F42r 3               
003F42r 3               ; nt_asm_cpy:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_cpy_h
003F42r 3               ; 		.word xt_asm_cpy, z_asm_cpy
003F42r 3               ; 		.byte "cpy"
003F42r 3               
003F42r 3               ; nt_asm_cpy_h:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_cpy_z
003F42r 3               ; 		.word xt_asm_cpy_h, z_asm_cpy_h
003F42r 3               ; 		.byte "cpy.#"
003F42r 3               
003F42r 3               ; nt_asm_cpy_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_dec
003F42r 3               ; 		.word xt_asm_cpy_z, z_asm_cpy_z
003F42r 3               ; 		.byte "cpy.z"
003F42r 3               
003F42r 3               ; nt_asm_dec:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_dec_a
003F42r 3               ; 		.word xt_asm_dec, z_asm_dec
003F42r 3               ; 		.byte "dec"
003F42r 3               
003F42r 3               ; nt_asm_dec_a:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_dec_x
003F42r 3               ; 		.word xt_asm_dec_a, z_asm_dec_a
003F42r 3               ; 		.byte "dec.a"
003F42r 3               
003F42r 3               ; nt_asm_dec_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_dec_z
003F42r 3               ; 		.word xt_asm_dec_x, z_asm_dec_x
003F42r 3               ; 		.byte "dec.x"
003F42r 3               
003F42r 3               ; nt_asm_dec_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_dec_zx
003F42r 3               ; 		.word xt_asm_dec_z, z_asm_dec_z
003F42r 3               ; 		.byte "dec.z"
003F42r 3               
003F42r 3               ; nt_asm_dec_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_dex
003F42r 3               ; 		.word xt_asm_dec_zx, z_asm_dec_zx
003F42r 3               ; 		.byte "dec.zx"
003F42r 3               
003F42r 3               ; nt_asm_dex:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_dey
003F42r 3               ; 		.word xt_asm_dex, z_asm_dex
003F42r 3               ; 		.byte "dex"
003F42r 3               
003F42r 3               ; nt_asm_dey:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_eor
003F42r 3               ; 		.word xt_asm_dey, z_asm_dey
003F42r 3               ; 		.byte "dey"
003F42r 3               
003F42r 3               ; nt_asm_eor:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_eor_h
003F42r 3               ; 		.word xt_asm_eor, z_asm_eor
003F42r 3               ; 		.byte "eor"
003F42r 3               
003F42r 3               ; nt_asm_eor_h:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_eor_x
003F42r 3               ; 		.word xt_asm_eor_h, z_asm_eor_h
003F42r 3               ; 		.byte "eor.#"
003F42r 3               
003F42r 3               ; nt_asm_eor_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_eor_y
003F42r 3               ; 		.word xt_asm_eor_x, z_asm_eor_x
003F42r 3               ; 		.byte "eor.x"
003F42r 3               
003F42r 3               ; nt_asm_eor_y:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_eor_z
003F42r 3               ; 		.word xt_asm_eor_y, z_asm_eor_y
003F42r 3               ; 		.byte "eor.y"
003F42r 3               
003F42r 3               ; nt_asm_eor_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_eor_zi
003F42r 3               ; 		.word xt_asm_eor_z, z_asm_eor_z
003F42r 3               ; 		.byte "eor.z"
003F42r 3               
003F42r 3               ; nt_asm_eor_zi:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_eor_ziy
003F42r 3               ; 		.word xt_asm_eor_zi, z_asm_eor_zi
003F42r 3               ; 		.byte "eor.zi"
003F42r 3               
003F42r 3               ; nt_asm_eor_ziy:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_eor_zx
003F42r 3               ; 		.word xt_asm_eor_ziy, z_asm_eor_ziy
003F42r 3               ; 		.byte "eor.ziy"
003F42r 3               
003F42r 3               ; nt_asm_eor_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_eor_zxi
003F42r 3               ; 		.word xt_asm_eor_zx, z_asm_eor_zx
003F42r 3               ; 		.byte "eor.zx"
003F42r 3               
003F42r 3               ; nt_asm_eor_zxi:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_inc
003F42r 3               ; 		.word xt_asm_eor_zxi, z_asm_eor_zxi
003F42r 3               ; 		.byte "eor.zxi"
003F42r 3               
003F42r 3               ; nt_asm_inc:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_inc_a
003F42r 3               ; 		.word xt_asm_inc, z_asm_inc
003F42r 3               ; 		.byte "inc"
003F42r 3               
003F42r 3               ; nt_asm_inc_a:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_inc_x
003F42r 3               ; 		.word xt_asm_inc_a, z_asm_inc_a
003F42r 3               ; 		.byte "inc.a"
003F42r 3               
003F42r 3               ; nt_asm_inc_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_inc_z
003F42r 3               ; 		.word xt_asm_inc_x, z_asm_inc_x
003F42r 3               ; 		.byte "inc.x"
003F42r 3               
003F42r 3               ; nt_asm_inc_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_inc_zx
003F42r 3               ; 		.word xt_asm_inc_z, z_asm_inc_z
003F42r 3               ; 		.byte "inc.z"
003F42r 3               
003F42r 3               ; nt_asm_inc_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_inx
003F42r 3               ; 		.word xt_asm_inc_zx, z_asm_inc_zx
003F42r 3               ; 		.byte "inc.zx"
003F42r 3               
003F42r 3               ; nt_asm_inx:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_iny
003F42r 3               ; 		.word xt_asm_inx, z_asm_inx
003F42r 3               ; 		.byte "inx"
003F42r 3               
003F42r 3               ; nt_asm_iny:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_jmp
003F42r 3               ; 		.word xt_asm_iny, z_asm_iny
003F42r 3               ; 		.byte "iny"
003F42r 3               
003F42r 3               ; nt_asm_jmp:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_jmp_i
003F42r 3               ; 		.word xt_asm_jmp, z_asm_jmp
003F42r 3               ; 		.byte "jmp"
003F42r 3               
003F42r 3               ; nt_asm_jmp_i:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_jmp_xi
003F42r 3               ; 		.word xt_asm_jmp_i, z_asm_jmp_i
003F42r 3               ; 		.byte "jmp.i"
003F42r 3               
003F42r 3               ; nt_asm_jmp_xi:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_jsr
003F42r 3               ; 		.word xt_asm_jmp_xi, z_asm_jmp_xi
003F42r 3               ; 		.byte "jmp.xi"
003F42r 3               
003F42r 3               ; nt_asm_jsr:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_lda
003F42r 3               ; 		.word xt_asm_jsr, z_asm_jsr
003F42r 3               ; 		.byte "jsr"
003F42r 3               
003F42r 3               ; nt_asm_lda:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_lda_h
003F42r 3               ; 		.word xt_asm_lda, z_asm_lda
003F42r 3               ; 		.byte "lda"
003F42r 3               
003F42r 3               ; nt_asm_lda_h:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_lda_x
003F42r 3               ; 		.word xt_asm_lda_h, z_asm_lda_h
003F42r 3               ; 		.byte "lda.#"
003F42r 3               
003F42r 3               ; nt_asm_lda_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_lda_y
003F42r 3               ; 		.word xt_asm_lda_x, z_asm_lda_x
003F42r 3               ; 		.byte "lda.x"
003F42r 3               
003F42r 3               ; nt_asm_lda_y:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_lda_z
003F42r 3               ; 		.word xt_asm_lda_y, z_asm_lda_y
003F42r 3               ; 		.byte "lda.y"
003F42r 3               
003F42r 3               ; nt_asm_lda_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_lda_zi
003F42r 3               ; 		.word xt_asm_lda_z, z_asm_lda_z
003F42r 3               ; 		.byte "lda.z"
003F42r 3               
003F42r 3               ; nt_asm_lda_zi:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_lda_ziy
003F42r 3               ; 		.word xt_asm_lda_zi, z_asm_lda_zi
003F42r 3               ; 		.byte "lda.zi"
003F42r 3               
003F42r 3               ; nt_asm_lda_ziy:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_lda_zx
003F42r 3               ; 		.word xt_asm_lda_ziy, z_asm_lda_ziy
003F42r 3               ; 		.byte "lda.ziy"
003F42r 3               
003F42r 3               ; nt_asm_lda_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_lda_zxi
003F42r 3               ; 		.word xt_asm_lda_zx, z_asm_lda_zx
003F42r 3               ; 		.byte "lda.zx"
003F42r 3               
003F42r 3               ; nt_asm_lda_zxi:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_ldx
003F42r 3               ; 		.word xt_asm_lda_zxi, z_asm_lda_zxi
003F42r 3               ; 		.byte "lda.zxi"
003F42r 3               
003F42r 3               ; nt_asm_ldx:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_ldx_h
003F42r 3               ; 		.word xt_asm_ldx, z_asm_ldx
003F42r 3               ; 		.byte "ldx"
003F42r 3               
003F42r 3               ; nt_asm_ldx_h:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_ldx_y
003F42r 3               ; 		.word xt_asm_ldx_h, z_asm_ldx_h
003F42r 3               ; 		.byte "ldx.#"
003F42r 3               
003F42r 3               ; nt_asm_ldx_y:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_ldx_z
003F42r 3               ; 		.word xt_asm_ldx_y, z_asm_ldx_y
003F42r 3               ; 		.byte "ldx.y"
003F42r 3               
003F42r 3               ; nt_asm_ldx_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_ldx_zy
003F42r 3               ; 		.word xt_asm_ldx_z, z_asm_ldx_z
003F42r 3               ; 		.byte "ldx.z"
003F42r 3               
003F42r 3               ; nt_asm_ldx_zy:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_ldy
003F42r 3               ; 		.word xt_asm_ldx_zy, z_asm_ldx_zy
003F42r 3               ; 		.byte "ldx.zy"
003F42r 3               
003F42r 3               ; nt_asm_ldy:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_ldy_h
003F42r 3               ; 		.word xt_asm_ldy, z_asm_ldy
003F42r 3               ; 		.byte "ldy"
003F42r 3               
003F42r 3               ; nt_asm_ldy_h:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_ldy_x
003F42r 3               ; 		.word xt_asm_ldy_h, z_asm_ldy_h
003F42r 3               ; 		.byte "ldy.#"
003F42r 3               
003F42r 3               ; nt_asm_ldy_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_ldy_z
003F42r 3               ; 		.word xt_asm_ldy_x, z_asm_ldy_x
003F42r 3               ; 		.byte "ldy.x"
003F42r 3               
003F42r 3               ; nt_asm_ldy_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_ldy_zx
003F42r 3               ; 		.word xt_asm_ldy_z, z_asm_ldy_z
003F42r 3               ; 		.byte "ldy.z"
003F42r 3               
003F42r 3               ; nt_asm_ldy_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_lsr
003F42r 3               ; 		.word xt_asm_ldy_zx, z_asm_ldy_zx
003F42r 3               ; 		.byte "ldy.zx"
003F42r 3               
003F42r 3               ; nt_asm_lsr:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_lsr_a
003F42r 3               ; 		.word xt_asm_lsr, z_asm_lsr
003F42r 3               ; 		.byte "lsr"
003F42r 3               
003F42r 3               ; nt_asm_lsr_a:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_lsr_x
003F42r 3               ; 		.word xt_asm_lsr_a, z_asm_lsr_a
003F42r 3               ; 		.byte "lsr.a"
003F42r 3               
003F42r 3               ; nt_asm_lsr_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_lsr_z
003F42r 3               ; 		.word xt_asm_lsr_x, z_asm_lsr_x
003F42r 3               ; 		.byte "lsr.x"
003F42r 3               
003F42r 3               ; nt_asm_lsr_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_lsr_zx
003F42r 3               ; 		.word xt_asm_lsr_z, z_asm_lsr_z
003F42r 3               ; 		.byte "lsr.z"
003F42r 3               
003F42r 3               ; nt_asm_lsr_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_nop
003F42r 3               ; 		.word xt_asm_lsr_zx, z_asm_lsr_zx
003F42r 3               ; 		.byte "lsr.zx"
003F42r 3               
003F42r 3               ; nt_asm_nop:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_ora
003F42r 3               ; 		.word xt_asm_nop, z_asm_nop
003F42r 3               ; 		.byte "nop"
003F42r 3               
003F42r 3               ; nt_asm_ora:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_ora_h
003F42r 3               ; 		.word xt_asm_ora, z_asm_ora
003F42r 3               ; 		.byte "ora"
003F42r 3               
003F42r 3               ; nt_asm_ora_h:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_ora_x
003F42r 3               ; 		.word xt_asm_ora_h, z_asm_ora_h
003F42r 3               ; 		.byte "ora.#"
003F42r 3               
003F42r 3               ; nt_asm_ora_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_ora_y
003F42r 3               ; 		.word xt_asm_ora_x, z_asm_ora_x
003F42r 3               ; 		.byte "ora.x"
003F42r 3               
003F42r 3               ; nt_asm_ora_y:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_ora_z
003F42r 3               ; 		.word xt_asm_ora_y, z_asm_ora_y
003F42r 3               ; 		.byte "ora.y"
003F42r 3               
003F42r 3               ; nt_asm_ora_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_ora_zi
003F42r 3               ; 		.word xt_asm_ora_z, z_asm_ora_z
003F42r 3               ; 		.byte "ora.z"
003F42r 3               
003F42r 3               ; nt_asm_ora_zi:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_ora_ziy
003F42r 3               ; 		.word xt_asm_ora_zi, z_asm_ora_zi
003F42r 3               ; 		.byte "ora.zi"
003F42r 3               
003F42r 3               ; nt_asm_ora_ziy:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_ora_zx
003F42r 3               ; 		.word xt_asm_ora_ziy, z_asm_ora_ziy
003F42r 3               ; 		.byte "ora.ziy"
003F42r 3               
003F42r 3               ; nt_asm_ora_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_ora_zxi
003F42r 3               ; 		.word xt_asm_ora_zx, z_asm_ora_zx
003F42r 3               ; 		.byte "ora.zx"
003F42r 3               
003F42r 3               ; nt_asm_ora_zxi:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_pha
003F42r 3               ; 		.word xt_asm_ora_zxi, z_asm_ora_zxi
003F42r 3               ; 		.byte "ora.zxi"
003F42r 3               
003F42r 3               ; nt_asm_pha:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_php
003F42r 3               ; 		.word xt_asm_pha, z_asm_pha
003F42r 3               ; 		.byte "pha"
003F42r 3               
003F42r 3               ; nt_asm_php:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_phx
003F42r 3               ; 		.word xt_asm_php, z_asm_php
003F42r 3               ; 		.byte "php"
003F42r 3               
003F42r 3               ; nt_asm_phx:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_phy
003F42r 3               ; 		.word xt_asm_phx, z_asm_phx
003F42r 3               ; 		.byte "phx"
003F42r 3               
003F42r 3               ; nt_asm_phy:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_pla
003F42r 3               ; 		.word xt_asm_phy, z_asm_phy
003F42r 3               ; 		.byte "phy"
003F42r 3               
003F42r 3               ; nt_asm_pla:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_plp
003F42r 3               ; 		.word xt_asm_pla, z_asm_pla
003F42r 3               ; 		.byte "pla"
003F42r 3               
003F42r 3               ; nt_asm_plp:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_plx
003F42r 3               ; 		.word xt_asm_plp, z_asm_plp
003F42r 3               ; 		.byte "plp"
003F42r 3               
003F42r 3               ; nt_asm_plx:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_ply
003F42r 3               ; 		.word xt_asm_plx, z_asm_plx
003F42r 3               ; 		.byte "plx"
003F42r 3               
003F42r 3               ; nt_asm_ply:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_rol
003F42r 3               ; 		.word xt_asm_ply, z_asm_ply
003F42r 3               ; 		.byte "ply"
003F42r 3               
003F42r 3               ; nt_asm_rol:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_rol_a
003F42r 3               ; 		.word xt_asm_rol, z_asm_rol
003F42r 3               ; 		.byte "rol"
003F42r 3               
003F42r 3               ; nt_asm_rol_a:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_rol_x
003F42r 3               ; 		.word xt_asm_rol_a, z_asm_rol_a
003F42r 3               ; 		.byte "rol.a"
003F42r 3               
003F42r 3               ; nt_asm_rol_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_rol_z
003F42r 3               ; 		.word xt_asm_rol_x, z_asm_rol_x
003F42r 3               ; 		.byte "rol.x"
003F42r 3               
003F42r 3               ; nt_asm_rol_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_rol_zx
003F42r 3               ; 		.word xt_asm_rol_z, z_asm_rol_z
003F42r 3               ; 		.byte "rol.z"
003F42r 3               
003F42r 3               ; nt_asm_rol_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_ror
003F42r 3               ; 		.word xt_asm_rol_zx, z_asm_rol_zx
003F42r 3               ; 		.byte "rol.zx"
003F42r 3               
003F42r 3               ; nt_asm_ror:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_ror_a
003F42r 3               ; 		.word xt_asm_ror, z_asm_ror
003F42r 3               ; 		.byte "ror"
003F42r 3               
003F42r 3               ; nt_asm_ror_a:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_ror_x
003F42r 3               ; 		.word xt_asm_ror_a, z_asm_ror_a
003F42r 3               ; 		.byte "ror.a"
003F42r 3               
003F42r 3               ; nt_asm_ror_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_ror_z
003F42r 3               ; 		.word xt_asm_ror_x, z_asm_ror_x
003F42r 3               ; 		.byte "ror.x"
003F42r 3               
003F42r 3               ; nt_asm_ror_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_ror_zx
003F42r 3               ; 		.word xt_asm_ror_z, z_asm_ror_z
003F42r 3               ; 		.byte "ror.z"
003F42r 3               
003F42r 3               ; nt_asm_ror_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_rti
003F42r 3               ; 		.word xt_asm_ror_zx, z_asm_ror_zx
003F42r 3               ; 		.byte "ror.zx"
003F42r 3               
003F42r 3               ; nt_asm_rti:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_rts
003F42r 3               ; 		.word xt_asm_rti, z_asm_rti
003F42r 3               ; 		.byte "rti"
003F42r 3               
003F42r 3               ; nt_asm_rts:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_sbc
003F42r 3               ; 		.word xt_asm_rts, z_asm_rts
003F42r 3               ; 		.byte "rts"
003F42r 3               
003F42r 3               ; nt_asm_sbc:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_sbc_h
003F42r 3               ; 		.word xt_asm_sbc, z_asm_sbc
003F42r 3               ; 		.byte "sbc"
003F42r 3               
003F42r 3               ; nt_asm_sbc_h:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_sbc_x
003F42r 3               ; 		.word xt_asm_sbc_h, z_asm_sbc_h
003F42r 3               ; 		.byte "sbc.#"
003F42r 3               
003F42r 3               ; nt_asm_sbc_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_sbc_y
003F42r 3               ; 		.word xt_asm_sbc_x, z_asm_sbc_x
003F42r 3               ; 		.byte "sbc.x"
003F42r 3               
003F42r 3               ; nt_asm_sbc_y:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_sbc_z
003F42r 3               ; 		.word xt_asm_sbc_y, z_asm_sbc_y
003F42r 3               ; 		.byte "sbc.y"
003F42r 3               
003F42r 3               ; nt_asm_sbc_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_sbc_zi
003F42r 3               ; 		.word xt_asm_sbc_z, z_asm_sbc_z
003F42r 3               ; 		.byte "sbc.z"
003F42r 3               
003F42r 3               ; nt_asm_sbc_zi:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_sbc_ziy
003F42r 3               ; 		.word xt_asm_sbc_zi, z_asm_sbc_zi
003F42r 3               ; 		.byte "sbc.zi"
003F42r 3               
003F42r 3               ; nt_asm_sbc_ziy:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_sbc_zx
003F42r 3               ; 		.word xt_asm_sbc_ziy, z_asm_sbc_ziy
003F42r 3               ; 		.byte "sbc.ziy"
003F42r 3               
003F42r 3               ; nt_asm_sbc_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_sbc_zxi
003F42r 3               ; 		.word xt_asm_sbc_zx, z_asm_sbc_zx
003F42r 3               ; 		.byte "sbc.zx"
003F42r 3               
003F42r 3               ; nt_asm_sbc_zxi:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_sec
003F42r 3               ; 		.word xt_asm_sbc_zxi, z_asm_sbc_zxi
003F42r 3               ; 		.byte "sbc.zxi"
003F42r 3               
003F42r 3               ; nt_asm_sec:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_sed
003F42r 3               ; 		.word xt_asm_sec, z_asm_sec
003F42r 3               ; 		.byte "sec"
003F42r 3               
003F42r 3               ; nt_asm_sed:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_sei
003F42r 3               ; 		.word xt_asm_sed, z_asm_sed
003F42r 3               ; 		.byte "sed"
003F42r 3               
003F42r 3               ; nt_asm_sei:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_sta
003F42r 3               ; 		.word xt_asm_sei, z_asm_sei
003F42r 3               ; 		.byte "sei"
003F42r 3               
003F42r 3               ; nt_asm_sta:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_sta_x
003F42r 3               ; 		.word xt_asm_sta, z_asm_sta
003F42r 3               ; 		.byte "sta"
003F42r 3               
003F42r 3               ; nt_asm_sta_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_sta_y
003F42r 3               ; 		.word xt_asm_sta_x, z_asm_sta_x
003F42r 3               ; 		.byte "sta.x"
003F42r 3               
003F42r 3               ; nt_asm_sta_y:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_sta_z
003F42r 3               ; 		.word xt_asm_sta_y, z_asm_sta_y
003F42r 3               ; 		.byte "sta.y"
003F42r 3               
003F42r 3               ; nt_asm_sta_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_sta_zi
003F42r 3               ; 		.word xt_asm_sta_z, z_asm_sta_z
003F42r 3               ; 		.byte "sta.z"
003F42r 3               
003F42r 3               ; nt_asm_sta_zi:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_sta_ziy
003F42r 3               ; 		.word xt_asm_sta_zi, z_asm_sta_zi
003F42r 3               ; 		.byte "sta.zi"
003F42r 3               
003F42r 3               ; nt_asm_sta_ziy:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_sta_zx
003F42r 3               ; 		.word xt_asm_sta_ziy, z_asm_sta_ziy
003F42r 3               ; 		.byte "sta.ziy"
003F42r 3               
003F42r 3               ; nt_asm_sta_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_sta_zxi
003F42r 3               ; 		.word xt_asm_sta_zx, z_asm_sta_zx
003F42r 3               ; 		.byte "sta.zx"
003F42r 3               
003F42r 3               ; nt_asm_sta_zxi:
003F42r 3               ; 		.byte 7, IM
003F42r 3               ;                 .word nt_asm_stx
003F42r 3               ; 		.word xt_asm_sta_zxi, z_asm_sta_zxi
003F42r 3               ; 		.byte "sta.zxi"
003F42r 3               
003F42r 3               ; nt_asm_stx:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_stx_z
003F42r 3               ; 		.word xt_asm_stx, z_asm_stx
003F42r 3               ; 		.byte "stx"
003F42r 3               
003F42r 3               ; nt_asm_stx_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_stx_zy
003F42r 3               ; 		.word xt_asm_stx_z, z_asm_stx_z
003F42r 3               ; 		.byte "stx.z"
003F42r 3               
003F42r 3               ; nt_asm_stx_zy:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_sty
003F42r 3               ; 		.word xt_asm_stx_zy, z_asm_stx_zy
003F42r 3               ; 		.byte "stx.zy"
003F42r 3               
003F42r 3               ; nt_asm_sty:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_sty_z
003F42r 3               ; 		.word xt_asm_sty, z_asm_sty
003F42r 3               ; 		.byte "sty"
003F42r 3               
003F42r 3               ; nt_asm_sty_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_sty_zx
003F42r 3               ; 		.word xt_asm_sty_z, z_asm_sty_z
003F42r 3               ; 		.byte "sty.z"
003F42r 3               
003F42r 3               ; nt_asm_sty_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_stz
003F42r 3               ; 		.word xt_asm_sty_zx, z_asm_sty_zx
003F42r 3               ; 		.byte "sty.zx"
003F42r 3               
003F42r 3               ; nt_asm_stz:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_stz_x
003F42r 3               ; 		.word xt_asm_stz, z_asm_stz
003F42r 3               ; 		.byte "stz"
003F42r 3               
003F42r 3               ; nt_asm_stz_x:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_stz_z
003F42r 3               ; 		.word xt_asm_stz_x, z_asm_stz_x
003F42r 3               ; 		.byte "stz.x"
003F42r 3               
003F42r 3               ; nt_asm_stz_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_stz_zx
003F42r 3               ; 		.word xt_asm_stz_z, z_asm_stz_z
003F42r 3               ; 		.byte "stz.z"
003F42r 3               
003F42r 3               ; nt_asm_stz_zx:
003F42r 3               ; 		.byte 6, IM
003F42r 3               ;                 .word nt_asm_tax
003F42r 3               ; 		.word xt_asm_stz_zx, z_asm_stz_zx
003F42r 3               ; 		.byte "stz.zx"
003F42r 3               
003F42r 3               ; nt_asm_tax:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_tay
003F42r 3               ; 		.word xt_asm_tax, z_asm_tax
003F42r 3               ; 		.byte "tax"
003F42r 3               
003F42r 3               ; nt_asm_tay:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_trb
003F42r 3               ; 		.word xt_asm_tay, z_asm_tay
003F42r 3               ; 		.byte "tay"
003F42r 3               
003F42r 3               ; nt_asm_trb:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_trb_z
003F42r 3               ; 		.word xt_asm_trb, z_asm_trb
003F42r 3               ; 		.byte "trb"
003F42r 3               
003F42r 3               ; nt_asm_trb_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_tsb
003F42r 3               ; 		.word xt_asm_trb_z, z_asm_trb_z
003F42r 3               ; 		.byte "trb.z"
003F42r 3               
003F42r 3               ; nt_asm_tsb:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_tsb_z
003F42r 3               ; 		.word xt_asm_tsb, z_asm_tsb
003F42r 3               ; 		.byte "tsb"
003F42r 3               
003F42r 3               ; nt_asm_tsb_z:
003F42r 3               ; 		.byte 5, IM
003F42r 3               ;                 .word nt_asm_tsx
003F42r 3               ; 		.word xt_asm_tsb_z, z_asm_tsb_z
003F42r 3               ; 		.byte "tsb.z"
003F42r 3               
003F42r 3               ; nt_asm_tsx:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_txa
003F42r 3               ; 		.word xt_asm_tsx, z_asm_tsx
003F42r 3               ; 		.byte "tsx"
003F42r 3               
003F42r 3               ; nt_asm_txa:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_txs
003F42r 3               ; 		.word xt_asm_txa, z_asm_txa
003F42r 3               ; 		.byte "txa"
003F42r 3               
003F42r 3               ; nt_asm_txs:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_tya
003F42r 3               ; 		.word xt_asm_txs, z_asm_txs
003F42r 3               ; 		.byte "txs"
003F42r 3               
003F42r 3               ; nt_asm_tya:
003F42r 3               ; 		.byte 3, IM
003F42r 3               ;                 .word nt_asm_arrow
003F42r 3               ; 		.word xt_asm_tya, z_asm_tya
003F42r 3               ; 		.byte "tya"
003F42r 3               
003F42r 3               ; ; Assembler pseudo-instructions, directives and macros
003F42r 3               
003F42r 3               ; nt_asm_arrow:   ; uses same code as HERE, but immediate
003F42r 3               ;                 .byte 3, IM
003F42r 3               ;                 .word nt_asm_back_jump
003F42r 3               ;                 .word xt_asm_arrow, z_asm_arrow
003F42r 3               ;                 .byte "-->"
003F42r 3               
003F42r 3               
003F42r 3               ; nt_asm_back_jump:  ; syntactic sugar, does nothing
003F42r 3               ;                 .byte 2, IM
003F42r 3               ;                 .word nt_asm_back_branch
003F42r 3               ;                 .word xt_asm_back_jump, z_asm_back_jump
003F42r 3               ;                 .byte "<j"
003F42r 3               
003F42r 3               ; nt_asm_back_branch:
003F42r 3               ;                 .byte 2, IM
003F42r 3               ;                 .word nt_asm_push_a
003F42r 3               ;                 .word xt_asm_back_branch, z_asm_back_branch
003F42r 3               ;                 .byte "<b"
003F42r 3               
003F42r 3               ; nt_asm_push_a:
003F42r 3               ;                 .byte 6, IM
003F42r 3               ;                 .word 0000
003F42r 3               ;                 .word xt_asm_push_a, z_asm_push_a
003F42r 3               ;                 .byte "push-a"
003F42r 3               
003F42r 3               
003F42r 3               
003F42r 3               ; END of ASSEMBLER-WORDLIST
003F42r 3               
003F42r 3               ; END
003F42r 3               
003F42r 2                   .include "strings.s"          ; Headers of native words
003F42r 3               ; List of Strings for Tali Forth 2
003F42r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
003F42r 3               ; First version: 01. Apr 2016 (for Liara Forth)
003F42r 3               ; This version: 28. Dec 2018
003F42r 3               
003F42r 3               ; This file is included by taliforth.asm
003F42r 3               
003F42r 3               ; ## GENERAL STRINGS
003F42r 3               
003F42r 3               ; All general strings must be zero-terminated, names start with "s_",
003F42r 3               ; aliases with "str_"
003F42r 3               
003F42r 3               str_ok =              0
003F42r 3               str_compile =         1
003F42r 3               str_redefined =       2
003F42r 3               str_wid_forth =       3
003F42r 3               str_abc_lower =       4
003F42r 3               str_abc_upper =       5
003F42r 3               str_wid_editor =      6
003F42r 3               str_wid_assembler =   7
003F42r 3               str_wid_root =        8
003F42r 3               str_see_flags =       9
003F42r 3               str_see_nt =         10
003F42r 3               str_see_xt =         11
003F42r 3               str_see_size =       12
003F42r 3               
003F42r 3               ; Since we can't fit a 16-bit address in a register, we use indexes as offsets
003F42r 3               ; to tables as error and string numbers.
003F42r 3               string_table:
003F42r 3  rr rr rr rr          .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
003F46r 3  rr rr rr rr  
003F4Ar 3  rr rr        
003F4Cr 3  rr rr rr rr          .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
003F50r 3  rr rr rr rr  
003F54r 3  rr rr rr rr          .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
003F58r 3  rr rr rr rr  
003F5Cr 3               
003F5Cr 3  20 6F 6B 00  s_ok:         .byte " ok", 0         ; note space at beginning
003F60r 3  20 63 6F 6D  s_compiled:   .byte " compiled", 0   ; note space at beginning
003F64r 3  70 69 6C 65  
003F68r 3  64 00        
003F6Ar 3  72 65 64 65  s_redefined:  .byte "redefined ", 0  ; note space at end
003F6Er 3  66 69 6E 65  
003F72r 3  64 20 00     
003F75r 3               
003F75r 3  30 31 32 33  s_abc_lower:  .byte "0123456789abcdefghijklmnopqrstuvwxyz"
003F79r 3  34 35 36 37  
003F7Dr 3  38 39 61 62  
003F99r 3  30 31 32 33  s_abc_upper:  .byte "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
003F9Dr 3  34 35 36 37  
003FA1r 3  38 39 41 42  
003FBDr 3               
003FBDr 3  41 73 73 65  s_wid_asm:    .byte "Assembler ", 0  ; Wordlist ID 2, note space at end
003FC1r 3  6D 62 6C 65  
003FC5r 3  72 20 00     
003FC8r 3  45 64 69 74  s_wid_editor: .byte "Editor ", 0     ; Wordlist ID 1, note space at end
003FCCr 3  6F 72 20 00  
003FD0r 3  46 6F 72 74  s_wid_forth:  .byte "Forth ", 0      ; Wordlist ID 0, note space at end
003FD4r 3  68 20 00     
003FD7r 3  52 6F 6F 74  s_wid_root:   .byte "Root ", 0       ; Wordlist ID 3, note space at end
003FDBr 3  20 00        
003FDDr 3               
003FDDr 3  66 6C 61 67  s_see_flags:  .byte "flags (CO AN IM NN UF HC): ", 0
003FE1r 3  73 20 28 43  
003FE5r 3  4F 20 41 4E  
003FF9r 3  6E 74 3A 20  s_see_nt:     .byte "nt: ", 0
003FFDr 3  00           
003FFEr 3  78 74 3A 20  s_see_xt:     .byte "xt: ", 0
004002r 3  00           
004003r 3  73 69 7A 65  s_see_size:   .byte "size (decimal): ", 0
004007r 3  20 28 64 65  
00400Br 3  63 69 6D 61  
004014r 3               
004014r 3               
004014r 3               ; ## ERROR STRINGS
004014r 3               
004014r 3               ; All error strings must be zero-terminated, all names start with "es_",
004014r 3               ; aliases with "err_". If the string texts are changed, the test suite must be
004014r 3               ; as well
004014r 3               
004014r 3               err_allot =        0
004014r 3               err_badsource =    1
004014r 3               err_compileonly =  2
004014r 3               err_defer =        3
004014r 3               err_divzero =      4
004014r 3               err_noname =       5
004014r 3               err_refill =       6
004014r 3               err_state =        7
004014r 3               err_syntax =       8
004014r 3               err_underflow =    9
004014r 3               err_negallot =     10
004014r 3               err_wordlist =     11
004014r 3               err_blockwords =   12
004014r 3               
004014r 3               error_table:
004014r 3  rr rr rr rr          .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
004018r 3  rr rr rr rr  
00401Cr 3  rr rr rr rr          .word es_divzero, es_noname, es_refill, es_state        ;  4-7
004020r 3  rr rr rr rr  
004024r 3  rr rr rr rr          .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
004028r 3  rr rr rr rr  
00402Cr 3  rr rr                .word es_blockwords                                    ; 12
00402Er 3               
00402Er 3  41 4C 4C 4F  es_allot:       .byte "ALLOT using all available memory", 0
004032r 3  54 20 75 73  
004036r 3  69 6E 67 20  
00404Fr 3  49 6C 6C 65  es_badsource:   .byte "Illegal SOURCE-ID during REFILL", 0
004053r 3  67 61 6C 20  
004057r 3  53 4F 55 52  
00406Fr 3  49 6E 74 65  es_compileonly: .byte "Interpreting a compile-only word", 0
004073r 3  72 70 72 65  
004077r 3  74 69 6E 67  
004090r 3  44 45 46 45  es_defer:       .byte "DEFERed word not defined yet", 0
004094r 3  52 65 64 20  
004098r 3  77 6F 72 64  
0040ADr 3  44 69 76 69  es_divzero:     .byte "Division by zero", 0
0040B1r 3  73 69 6F 6E  
0040B5r 3  20 62 79 20  
0040BEr 3  50 61 72 73  es_noname:      .byte "Parsing failure", 0
0040C2r 3  69 6E 67 20  
0040C6r 3  66 61 69 6C  
0040CEr 3  51 55 49 54  es_refill:      .byte "QUIT could not get input (REFILL returned -1)", 0
0040D2r 3  20 63 6F 75  
0040D6r 3  6C 64 20 6E  
0040FCr 3  41 6C 72 65  es_state:       .byte "Already in compile mode", 0
004100r 3  61 64 79 20  
004104r 3  69 6E 20 63  
004114r 3  55 6E 64 65  es_syntax:      .byte "Undefined word", 0
004118r 3  66 69 6E 65  
00411Cr 3  64 20 77 6F  
004123r 3  53 74 61 63  es_underflow:   .byte "Stack underflow", 0
004127r 3  6B 20 75 6E  
00412Br 3  64 65 72 66  
004133r 3  4D 61 78 20  es_negallot:    .byte "Max memory freed with ALLOT", 0
004137r 3  6D 65 6D 6F  
00413Br 3  72 79 20 66  
00414Fr 3  4E 6F 20 77  es_wordlist:    .byte "No wordlists available", 0
004153r 3  6F 72 64 6C  
004157r 3  69 73 74 73  
004166r 3  50 6C 65 61  es_blockwords:  .byte "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
00416Ar 3  73 65 20 61  
00416Er 3  73 73 69 67  
0041A5r 3               
0041A5r 3               ; ## ENVIRONMENT STRINGS
0041A5r 3               
0041A5r 3               ; These are used by the ENVIRONMENT? word and stored in the old string format:
0041A5r 3               ; Length byte first, then the string itself that is not rpt. not
0041A5r 3               ; zero-terminated. Note these are uppercase by ANS defintion. All start with
0041A5r 3               ; "envs_".
0041A5r 3               
0041A5r 3               ; These return a single-cell number
0041A5r 3  0F 2F 43 4F  envs_cs:        .byte 15, "/COUNTED-STRING"
0041A9r 3  55 4E 54 45  
0041ADr 3  44 2D 53 54  
0041B5r 3  05 2F 48 4F  envs_hold:      .byte 5, "/HOLD"
0041B9r 3  4C 44        
0041BBr 3  04 2F 50 41  envs_pad:       .byte 4, "/PAD"
0041BFr 3  44           
0041C0r 3  11 41 44 44  envs_aub:       .byte 17, "ADDRESS-UNIT-BITS"
0041C4r 3  52 45 53 53  
0041C8r 3  2D 55 4E 49  
0041D2r 3  07 46 4C 4F  envs_floored:   .byte 7, "FLOORED"
0041D6r 3  4F 52 45 44  
0041DAr 3  08 4D 41 58  envs_max_char:  .byte 8, "MAX-CHAR"
0041DEr 3  2D 43 48 41  
0041E2r 3  52           
0041E3r 3  05 4D 41 58  envs_max_n:     .byte 5, "MAX-N"
0041E7r 3  2D 4E        
0041E9r 3  05 4D 41 58  envs_max_u:     .byte 5, "MAX-U"
0041EDr 3  2D 55        
0041EFr 3  12 52 45 54  envs_rsc:       .byte 18, "RETURN-STACK-CELLS"
0041F3r 3  55 52 4E 2D  
0041F7r 3  53 54 41 43  
004202r 3  0B 53 54 41  envs_sc:        .byte 11, "STACK-CELLS"
004206r 3  43 4B 2D 43  
00420Ar 3  45 4C 4C 53  
00420Er 3  09 57 4F 52  envs_wl:        .byte 9, "WORDLISTS"
004212r 3  44 4C 49 53  
004216r 3  54 53        
004218r 3               
004218r 3               ; These return a double-cell number
004218r 3  05 4D 41 58  envs_max_d:     .byte 5, "MAX-D"
00421Cr 3  2D 44        
00421Er 3  06 4D 41 58  envs_max_ud:    .byte 6, "MAX-UD"
004222r 3  2D 55 44     
004225r 3               
004225r 3               ; END
004225r 3               
004225r 2               
004225r 2               ; High-level Forth words, see forth_code/README.md
004225r 2               forth_words_start:
004225r 2  20 63 72 20  .incbin "forth_code/forth_words.asc"
004229r 2  2E 28 20 52  
00422Dr 2  65 61 64 79  
004237r 2               forth_words_end:
004237r 2               
004237r 2               ; User-defined Forth words, see forth_code/README.md
004237r 2               user_words_start:
004237r 2  20 32 30 20  .incbin "forth_code/user_words.asc"
00423Br 2  63 6F 6E 73  
00423Fr 2  74 61 6E 74  
0048F9r 2               user_words_end:
0048F9r 2               
0048F9r 2               
0048F9r 2               ; =====================================================================
0048F9r 2               ; COMPILE WORDS, JUMPS and SUBROUTINE JUMPS INTO CODE
0048F9r 2               
0048F9r 2               ; These three routines compile instructions such as "jsr xt_words" into a word
0048F9r 2               ; at compile time so they are available at run time. Words that use this
0048F9r 2               ; routine may not be natively compiled. We use "cmpl" as not to confuse these
0048F9r 2               ; routines with the COMPILE, word. Always call this with a subroutine jump.
0048F9r 2               ; This means combining JSR/RTS to JMP in those cases is not going to work. To
0048F9r 2               ; use, load the LSB of the address in A and the MSB in Y. You can remember
0048F9r 2               ; which comes first by thinking of the song "Young Americans" ("YA") by David
0048F9r 2               ; Bowie.
0048F9r 2               
0048F9r 2               ;               ldy #>addr      ; MSB   ; "Young"
0048F9r 2               ;               lda #<addr      ; LSB   ; "Americans"
0048F9r 2               ;               jsr cmpl_subroutine
0048F9r 2               
0048F9r 2               ; Also, we keep a routine here to compile a single byte passed through A.
0048F9r 2               
0048F9r 2               cmpl_subroutine:
0048F9r 2                   ; This is the entry point to compile JSR <ADDR>
0048F9r 2  48               pha             ; save LSB of address
0048FAr 2  A9 20            lda #$20        ; load opcode for JSR
0048FCr 2  80 03            bra cmpl_common
0048FEr 2               cmpl_jump:
0048FEr 2                   ; This is the entry point to compile JMP <ADDR>
0048FEr 2  48               pha             ; save LSB of address
0048FFr 2  A9 4C            lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
004901r 2               cmpl_common:
004901r 2                   ; At this point, A contains the opcode to be compiled,
004901r 2                   ; the LSB of the address is on the 65c02 stack, and the MSB of
004901r 2                   ; the address is in Y
004901r 2  20 rr rr         jsr cmpl_a      ; compile opcode
004904r 2  68               pla             ; retrieve address LSB; fall thru to cmpl_word
004905r 2               cmpl_word:
004905r 2                   ; This is the entry point to compile a word (little-endian)
004905r 2  20 rr rr         jsr cmpl_a      ; compile LSB of address
004908r 2  98               tya             ; fall thru for MSB
004909r 2               cmpl_a:
004909r 2                   ; This is the entry point to compile a single byte which
004909r 2                   ; is passed in A. The built-in assembler assumes that this
004909r 2                   ; routine does not modify Y.
004909r 2  92 rr            sta (cp)
00490Br 2  E6 rr            inc cp
00490Dr 2  D0 02            bne _done
00490Fr 2  E6 rr            inc cp+1
004911r 2               _done:
004911r 2  60               rts
004912r 2               
004912r 2               
004912r 2               
004912r 2               ; =====================================================================
004912r 2               ; CODE FIELD ROUTINES
004912r 2               
004912r 2               doconst:
004912r 2               ; """Execute a CONSTANT: Push the data in the first two bytes of
004912r 2               ; the Data Field onto the Data Stack
004912r 2               ; """
004912r 2  CA               dex             ; make room for constant
004913r 2  CA               dex
004914r 2               
004914r 2                   ; The value we need is stored in the two bytes after the
004914r 2                   ; JSR return address, which in turn is what is on top of
004914r 2                   ; the Return Stack
004914r 2  68               pla             ; LSB of return address
004915r 2  85 rr            sta tmp1
004917r 2  68               pla             ; MSB of return address
004918r 2  85 rr            sta tmp1+1
00491Ar 2               
00491Ar 2                   ; Start LDY with 1 instead of 0 because of how JSR stores
00491Ar 2                   ; the return address on the 65c02
00491Ar 2  A0 01            ldy #1
00491Cr 2  B1 rr            lda (tmp1),y
00491Er 2  95 00            sta 0,x
004920r 2  C8               iny
004921r 2  B1 rr            lda (tmp1),y
004923r 2  95 01            sta 1,x
004925r 2               
004925r 2                   ; This takes us back to the original caller, not the
004925r 2                   ; DOCONST caller
004925r 2  60               rts
004926r 2               
004926r 2               
004926r 2               dodefer:
004926r 2               ; """Execute a DEFER statement at runtime: Execute the address we
004926r 2               ; find after the caller in the Data Field
004926r 2               ; """
004926r 2                   ; The xt we need is stored in the two bytes after the JSR
004926r 2                   ; return address, which is what is on top of the Return
004926r 2                   ; Stack. So all we have to do is replace our return jump
004926r 2                   ; with what we find there
004926r 2  68               pla             ; LSB
004927r 2  85 rr            sta tmp1
004929r 2  68               pla             ; MSB
00492Ar 2  85 rr            sta tmp1+1
00492Cr 2               
00492Cr 2  A0 01            ldy #1
00492Er 2  B1 rr            lda (tmp1),y
004930r 2  85 rr            sta tmp2
004932r 2  C8               iny
004933r 2  B1 rr            lda (tmp1),y
004935r 2  85 rr            sta tmp2+1
004937r 2               
004937r 2  6C rr rr         jmp (tmp2)      ; This is actually a jump to the new target
00493Ar 2               
00493Ar 2               defer_error:
00493Ar 2                   ; """Error routine for undefined DEFER: Complain and abort"""
00493Ar 2  A9 03            lda #err_defer
00493Cr 2  4C rr rr         jmp error
00493Fr 2               
00493Fr 2               dodoes:
00493Fr 2               ; """Execute the runtime portion of DOES>. See DOES> and
00493Fr 2               ; docs/create-does.txt for details and
00493Fr 2               ; http://www.bradrodriguez.com/papers/moving3.htm
00493Fr 2               ; """
00493Fr 2                   ; Assumes the address of the CFA of the original defining word
00493Fr 2                   ; (say, CONSTANT) is on the top of the Return Stack. Save it
00493Fr 2                   ; for a later jump, adding one byte because of the way the
00493Fr 2                   ; 6502 works
00493Fr 2  7A               ply             ; LSB
004940r 2  68               pla             ; MSB
004941r 2  C8               iny
004942r 2  D0 01            bne @1
004944r 2  1A               inc
004945r 2               @1:
004945r 2  84 rr            sty tmp2
004947r 2  85 rr            sta tmp2+1
004949r 2               
004949r 2                   ; Next on the Return Stack should be the address of the PFA of
004949r 2                   ; the calling defined word (say, the name of whatever constant we
004949r 2                   ; just defined). Move this to the Data Stack, again adding one.
004949r 2  CA               dex
00494Ar 2  CA               dex
00494Br 2               
00494Br 2  7A               ply
00494Cr 2  68               pla
00494Dr 2  C8               iny
00494Er 2  D0 01            bne @2
004950r 2  1A               inc
004951r 2               @2:
004951r 2  94 00            sty 0,x         ; LSB
004953r 2  95 01            sta 1,x         ; MSB
004955r 2               
004955r 2                   ; This leaves the return address from the original main routine
004955r 2                   ; on top of the Return Stack. We leave that untouched and jump
004955r 2                   ; to the special code of the defining word. It's RTS instruction
004955r 2                   ; will take us back to the main routine
004955r 2  6C rr rr         jmp (tmp2)
004958r 2               
004958r 2               
004958r 2               dovar:
004958r 2               ; """Execute a variable: Push the address of the first bytes of
004958r 2               ; the Data Field onto the stack. This is called with JSR so we
004958r 2               ; can pick up the address of the calling variable off the 65c02's
004958r 2               ; stack. The final RTS takes us to the original caller of the
004958r 2               ; routine that itself called DOVAR. This is the default
004958r 2               ; routine installed with CREATE.
004958r 2               ; """
004958r 2                   ; Pull the return address off the machine's stack, adding
004958r 2                   ; one because of the way the 65c02 handles subroutines
004958r 2  7A               ply             ; LSB
004959r 2  68               pla             ; MSB
00495Ar 2  C8               iny
00495Br 2  D0 01            bne @1
00495Dr 2  1A               inc
00495Er 2               @1:
00495Er 2  CA               dex
00495Fr 2  CA               dex
004960r 2               
004960r 2  95 01            sta 1,x
004962r 2  98               tya
004963r 2  95 00            sta 0,x
004965r 2               
004965r 2  60               rts
004966r 2               
004966r 2               ; =====================================================================
004966r 2               ; LOW LEVEL HELPER FUNCTIONS
004966r 2               
004966r 2               byte_to_ascii:
004966r 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
004966r 2               .scope
004966r 2  48               pha
004967r 2  4A               lsr             ; convert high nibble first
004968r 2  4A               lsr
004969r 2  4A               lsr
00496Ar 2  4A               lsr
00496Br 2  20 rr rr         jsr _nibble_to_ascii
00496Er 2  68               pla
00496Fr 2               
00496Fr 2                   ; fall through to _nibble_to_ascii
00496Fr 2               
00496Fr 2               _nibble_to_ascii:
00496Fr 2               ; """Private helper function for byte_to_ascii: Print lower nibble
00496Fr 2               ; of A and and EMIT it. This does the actual work.
00496Fr 2               ; """
00496Fr 2  29 0F            and #$0F
004971r 2  09 30            ora #'0'
004973r 2  C9 3A            cmp #$3A        ; '9+1
004975r 2  90 02            bcc @1
004977r 2  69 06            adc #$06
004979r 2               
004979r 2  4C rr rr     @1:               jmp emit_a
00497Cr 2               
00497Cr 2  60               rts
00497Dr 2               .endscope
00497Dr 2               
00497Dr 2               compare_16bit:
00497Dr 2               ; """Compare TOS/NOS and return results in form of the 65c02 flags
00497Dr 2               ; Adapted from Leventhal "6502 Assembly Language Subroutines", see
00497Dr 2               ; also http://www.6502.org/tutorials/compare_beyond.html
00497Dr 2               ; For signed numbers, Z signals equality and N which number is larger:
00497Dr 2               ;       if TOS = NOS: Z=1 and N=0
00497Dr 2               ;       if TOS > NOS: Z=0 and N=0
00497Dr 2               ;       if TOS < NOS: Z=0 and N=1
00497Dr 2               ; For unsigned numbers, Z signals equality and C which number is larger:
00497Dr 2               ;       if TOS = NOS: Z=1 and N=0
00497Dr 2               ;       if TOS > NOS: Z=0 and C=1
00497Dr 2               ;       if TOS < NOS: Z=0 and C=0
00497Dr 2               ; Compared to the book routine, WORD1 (MINUED) is TOS
00497Dr 2               ;                               WORD2 (SUBTRAHEND) is NOS
00497Dr 2               ; """
00497Dr 2               .scope
00497Dr 2                   ; Compare LSB first to set the carry flag
00497Dr 2  B5 00            lda 0,x                 ; LSB of TOS
00497Fr 2  D5 02            cmp 2,x                 ; LSB of NOS
004981r 2  F0 0A            beq _equal
004983r 2               
004983r 2                   ; LSBs are not equal, compare MSB
004983r 2  B5 01            lda 1,x                 ; MSB of TOS
004985r 2  F5 03            sbc 3,x                 ; MSB of NOS
004987r 2  09 01            ora #1                  ; Make zero flag 0 because not equal
004989r 2  70 08            bvs _overflow
00498Br 2  80 08            bra _not_equal
00498Dr 2               _equal:
00498Dr 2                   ; Low bytes are equal, so we compare high bytes
00498Dr 2  B5 01            lda 1,x                 ; MSB of TOS
00498Fr 2  F5 03            sbc 3,x                 ; MSB of NOS
004991r 2  50 04            bvc _done
004993r 2               _overflow:
004993r 2                   ; Handle overflow because we use signed numbers
004993r 2  49 80            eor #$80                ; complement negative flag
004995r 2               _not_equal:
004995r 2  09 01            ora #1                  ; if overflow, we can't be eqal
004997r 2               _done:
004997r 2  60               rts
004998r 2               .endscope
004998r 2               
004998r 2               current_to_dp:
004998r 2               ; """Look up the current (compilation) dictionary pointer
004998r 2               ; in the wordlist set and put it into the dp zero-page
004998r 2               ; variable. Uses A and Y.
004998r 2               ; """
004998r 2                   ; Determine which wordlist is current
004998r 2  A0 04            ldy #current_offset
00499Ar 2  B1 rr            lda (up),y      ; current is a byte variable
00499Cr 2  0A               asl             ; turn it into an offset (in cells)
00499Dr 2               
00499Dr 2                   ; Get the dictionary pointer for that wordlist.
00499Dr 2  18               clc
00499Er 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
0049A0r 2  A8               tay
0049A1r 2  B1 rr            lda (up),y              ; get the dp for that wordlist.
0049A3r 2  85 rr            sta dp
0049A5r 2  C8               iny
0049A6r 2  B1 rr            lda (up),y
0049A8r 2  85 rr            sta dp+1
0049AAr 2               
0049AAr 2  60               rts
0049ABr 2               
0049ABr 2               
0049ABr 2               dp_to_current:
0049ABr 2               ; """Look up which wordlist is current and update its pointer
0049ABr 2               ; with the value in dp. Uses A and Y.
0049ABr 2               ; """
0049ABr 2                   ; Determine which wordlist is current
0049ABr 2  A0 04            ldy #current_offset
0049ADr 2  B1 rr            lda (up),y      ; current is a byte variable
0049AFr 2  0A               asl             ; turn it into an offset (in cells)
0049B0r 2               
0049B0r 2                   ; Get the dictionary pointer for that wordlist.
0049B0r 2  18               clc
0049B1r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
0049B3r 2  A8               tay
0049B4r 2  A5 rr            lda dp
0049B6r 2  91 rr            sta (up),y              ; get the dp for that wordlist.
0049B8r 2  C8               iny
0049B9r 2  A5 rr            lda dp+1
0049BBr 2  91 rr            sta (up),y
0049BDr 2               
0049BDr 2  60               rts
0049BEr 2               
0049BEr 2               interpret:
0049BEr 2               .scope
0049BEr 2               ; """Core routine for the interpreter called by EVALUATE and QUIT.
0049BEr 2               ; Process one line only. Assumes that the address of name is in
0049BEr 2               ; cib and the length of the whole input line string is in ciblen
0049BEr 2               ; """
0049BEr 2                   ; Normally we would use PARSE here with the SPACE character as
0049BEr 2                   ; a parameter (PARSE replaces WORD in modern Forths). However,
0049BEr 2                   ; Gforth's PARSE-NAME makes more sense as it uses spaces as
0049BEr 2                   ; delimiters per default and skips any leading spaces, which
0049BEr 2                   ; PARSE doesn't
0049BEr 2               _loop:
0049BEr 2  20 rr rr         jsr xt_parse_name       ; ( "string" -- addr u )
0049C1r 2               
0049C1r 2                   ; If PARSE-NAME returns 0 (empty line), no characters were left
0049C1r 2                   ; in the line and we need to go get a new line
0049C1r 2  B5 00            lda 0,x
0049C3r 2  15 01            ora 1,x
0049C5r 2  F0 70            beq _line_done
0049C7r 2               
0049C7r 2                   ; Go to FIND-NAME to see if this is a word we know. We have to
0049C7r 2                   ; make a copy of the address in case it isn't a word we know and
0049C7r 2                   ; we have to go see if it is a number
0049C7r 2  20 rr rr         jsr xt_two_dup          ; ( addr u -- addr u addr u )
0049CAr 2  20 rr rr         jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
0049CDr 2               
0049CDr 2                   ; A zero signals that we didn't find a word in the Dictionary
0049CDr 2  B5 00            lda 0,x
0049CFr 2  15 01            ora 1,x
0049D1r 2  D0 28            bne _got_name_token
0049D3r 2               
0049D3r 2                   ; We didn't get any nt we know of, so let's see if this is
0049D3r 2                   ; a number.
0049D3r 2  E8               inx                     ; ( addr u 0 -- addr u )
0049D4r 2  E8               inx
0049D5r 2               
0049D5r 2                   ; If the number conversion doesn't work, NUMBER will do the
0049D5r 2                   ; complaining for us
0049D5r 2  20 rr rr         jsr xt_number           ; ( addr u -- u|d )
0049D8r 2               
0049D8r 2                   ; Otherweise, if we're interpreting, we're done
0049D8r 2  A5 rr            lda state
0049DAr 2  F0 E2            beq _loop
0049DCr 2               
0049DCr 2                   ; We're compiling, so there is a bit more work.  Check
0049DCr 2                   ; status bit 5 to see if it's a single or double-cell
0049DCr 2                   ; number.
0049DCr 2  A9 20            lda #$20
0049DEr 2  24 rr            bit status
0049E0r 2  F0 0D            beq _single_number
0049E2r 2               
0049E2r 2                   ; It's a double cell number.  If we swap the
0049E2r 2                   ; upper and lower half, we can use the literal_runtime twice
0049E2r 2                   ; to compile it into the dictionary.
0049E2r 2  20 rr rr         jsr xt_swap
0049E5r 2  A0 rr            ldy #>literal_runtime
0049E7r 2  A9 rr            lda #<literal_runtime
0049E9r 2  20 rr rr         jsr cmpl_subroutine
0049ECr 2               
0049ECr 2                   ; compile our number
0049ECr 2  20 rr rr         jsr xt_comma
0049EFr 2               
0049EFr 2                   ; Fall into _single_number to process the other half.
0049EFr 2               _single_number:
0049EFr 2  A0 rr            ldy #>literal_runtime
0049F1r 2  A9 rr            lda #<literal_runtime
0049F3r 2  20 rr rr         jsr cmpl_subroutine
0049F6r 2               
0049F6r 2                   ; compile our number
0049F6r 2  20 rr rr         jsr xt_comma
0049F9r 2               
0049F9r 2                   ; That was so much fun, let's do it again!
0049F9r 2  80 C3            bra _loop
0049FBr 2               
0049FBr 2               _got_name_token:
0049FBr 2                   ; We have a known word's nt TOS. We're going to need its xt
0049FBr 2                   ; though, which is four bytes father down.
0049FBr 2               
0049FBr 2                   ; We arrive here with ( addr u nt ), so we NIP twice
0049FBr 2  B5 00            lda 0,x
0049FDr 2  95 04            sta 4,x
0049FFr 2  B5 01            lda 1,x
004A01r 2  95 05            sta 5,x
004A03r 2               
004A03r 2  E8               inx
004A04r 2  E8               inx
004A05r 2  E8               inx
004A06r 2  E8               inx                     ; ( nt )
004A07r 2               
004A07r 2                   ; Save a version of nt for error handling and compilation stuff
004A07r 2  B5 00            lda 0,x
004A09r 2  85 rr            sta tmpbranch
004A0Br 2  B5 01            lda 1,x
004A0Dr 2  85 rr            sta tmpbranch+1
004A0Fr 2               
004A0Fr 2  20 rr rr         jsr xt_name_to_int      ; ( nt - xt )
004A12r 2               
004A12r 2                   ; See if we are in interpret or compile mode, 0 is interpret
004A12r 2  A5 rr            lda state
004A14r 2  D0 13            bne _compile
004A16r 2               
004A16r 2                   ; We are interpreting, so EXECUTE the xt that is TOS. First,
004A16r 2                   ; though, see if this isn't a compile-only word, which would be
004A16r 2                   ; illegal. The status byte is the second one of the header.
004A16r 2  A0 01            ldy #1
004A18r 2  B1 rr            lda (tmpbranch),y
004A1Ar 2  29 01            and #CO                 ; mask everything but Compile Only bit
004A1Cr 2  F0 05            beq _interpret
004A1Er 2               
004A1Er 2  A9 02            lda #err_compileonly
004A20r 2  4C rr rr         jmp error
004A23r 2               
004A23r 2               _interpret:
004A23r 2                   ; We JSR to EXECUTE instead of calling the xt directly because
004A23r 2                   ; the RTS of the word we're executing will bring us back here,
004A23r 2                   ; skipping EXECUTE completely during RTS. If we were to execute
004A23r 2                   ; xt directly, we have to fool around with the Return Stack
004A23r 2                   ; instead, which is actually slightly slower
004A23r 2  20 rr rr         jsr xt_execute
004A26r 2               
004A26r 2                   ; That's quite enough for this word, let's get the next one
004A26r 2  4C rr rr         jmp _loop
004A29r 2               
004A29r 2               _compile:
004A29r 2                   ; We're compiling! However, we need to see if this is an
004A29r 2                   ; IMMEDIATE word, which would mean we execute it right now even
004A29r 2                   ; during compilation mode. Fortunately, we saved the nt so life
004A29r 2                   ; is easier. The flags are in the second byte of the header
004A29r 2  A0 01            ldy #1
004A2Br 2  B1 rr            lda (tmpbranch),y
004A2Dr 2  29 04            and #IM                 ; Mask all but IM bit
004A2Fr 2  D0 F2            bne _interpret          ; IMMEDIATE word, execute right now
004A31r 2               
004A31r 2                   ; Compile the xt into the Dictionary with COMPILE,
004A31r 2  20 rr rr         jsr xt_compile_comma
004A34r 2  4C rr rr         jmp _loop
004A37r 2               
004A37r 2               _line_done:
004A37r 2                   ; drop stuff from PARSE_NAME
004A37r 2  E8               inx
004A38r 2  E8               inx
004A39r 2  E8               inx
004A3Ar 2  E8               inx
004A3Br 2               
004A3Br 2  60               rts
004A3Cr 2               .endscope
004A3Cr 2               
004A3Cr 2               
004A3Cr 2               is_printable:
004A3Cr 2               .scope
004A3Cr 2               ; """Given a character in A, check if it is a printable ASCII
004A3Cr 2               ; character in the range from $20 to $7E inclusive. Returns the
004A3Cr 2               ; result in the Carry Flag: 0 (clear) is not printable, 1 (set)
004A3Cr 2               ; is printable. Keeps A. See
004A3Cr 2               ; http://www.obelisk.me.uk/6502/algorithms.html for a
004A3Cr 2               ; discussion of various ways to do this
004A3Cr 2  C9 20            cmp #AscSP              ; $20
004A3Er 2  90 08            bcc _done
004A40r 2  C9 7F            cmp #'~' + 1             ; $7E
004A42r 2  B0 03            bcs _failed
004A44r 2               
004A44r 2  38               sec
004A45r 2  80 01            bra _done
004A47r 2               _failed:
004A47r 2  18               clc
004A48r 2               _done:
004A48r 2  60               rts
004A49r 2               .endscope
004A49r 2               
004A49r 2               
004A49r 2               is_whitespace:
004A49r 2               .scope
004A49r 2               ; """Given a character in A, check if it is a whitespace
004A49r 2               ; character, that is, an ASCII value from 0 to 32 (where
004A49r 2               ; 32 is SPACE). Returns the result in the Carry Flag:
004A49r 2               ; 0 (clear) is no, it isn't whitespace, while 1 (set) means
004A49r 2               ; that it is whitespace. See PARSE and PARSE-NAME for
004A49r 2               ; a discussion of the uses. Does not change A or Y.
004A49r 2  C9 00            cmp #00         ; explicit comparison to leave Y untouched
004A4Br 2  90 08            bcc _done
004A4Dr 2               
004A4Dr 2  C9 21            cmp #AscSP+1
004A4Fr 2  B0 03            bcs _failed
004A51r 2               
004A51r 2  38               sec
004A52r 2  80 01            bra _done
004A54r 2               _failed:
004A54r 2  18               clc
004A55r 2               _done:
004A55r 2  60               rts
004A56r 2               .endscope
004A56r 2               
004A56r 2               
004A56r 2               ; Underflow tests. We jump to the label with the number of cells (not: bytes)
004A56r 2               ; required for the word. This routine flows into the generic error handling
004A56r 2               ; code
004A56r 2               underflow_1:
004A56r 2               ; """Make sure we have at least one cell on the Data Stack"""
004A56r 2  E0 rr            cpx #dsp0-1
004A58r 2  10 10            bpl underflow_error
004A5Ar 2  60               rts
004A5Br 2               underflow_2:
004A5Br 2               ; """Make sure we have at least two cells on the Data Stack"""
004A5Br 2  E0 rr            cpx #dsp0-3
004A5Dr 2  10 0B            bpl underflow_error
004A5Fr 2  60               rts
004A60r 2               underflow_3:
004A60r 2               ; """Make sure we have at least three cells on the Data Stack"""
004A60r 2  E0 rr            cpx #dsp0-5
004A62r 2  10 06            bpl underflow_error
004A64r 2  60               rts
004A65r 2               underflow_4:
004A65r 2               ; """Make sure we have at least four cells on the Data Stack"""
004A65r 2  E0 rr            cpx #dsp0-7
004A67r 2  10 01            bpl underflow_error
004A69r 2  60               rts
004A6Ar 2               
004A6Ar 2               underflow_error:
004A6Ar 2                   ; Entry for COLD/ABORT/QUIT
004A6Ar 2  A9 09            lda #err_underflow      ; fall through to error
004A6Cr 2               
004A6Cr 2               error:
004A6Cr 2               ; """Given the error number in a, print the associated error string and
004A6Cr 2               ; call abort. Uses tmp3.
004A6Cr 2               ; """
004A6Cr 2  0A               asl
004A6Dr 2  A8               tay
004A6Er 2  B9 rr rr         lda error_table,y
004A71r 2  85 rr            sta tmp3                ; LSB
004A73r 2  C8               iny
004A74r 2  B9 rr rr         lda error_table,y
004A77r 2  85 rr            sta tmp3+1              ; MSB
004A79r 2               
004A79r 2  20 rr rr         jsr print_common
004A7Cr 2  20 rr rr         jsr xt_cr
004A7Fr 2  4C rr rr         jmp xt_abort            ; no jsr, as we clobber return stack
004A82r 2               
004A82r 2               
004A82r 2               ; =====================================================================
004A82r 2               ; PRINTING ROUTINES
004A82r 2               
004A82r 2               ; We distinguish two types of print calls, both of which take the string number
004A82r 2               ; (see strings.asm) in A:
004A82r 2               
004A82r 2               ;       print_string       - with a line feed
004A82r 2               ;       print_string_no_lf - without a line feed
004A82r 2               
004A82r 2               ; In addition, print_common provides a lower-level alternative for error
004A82r 2               ; handling and anything else that provides the address of the
004A82r 2               ; zero-terminated string directly in tmp3. All of those routines assume that
004A82r 2               ; printing should be more concerned with size than speed, because anything to
004A82r 2               ; do with humans reading text is going to be slow.
004A82r 2               
004A82r 2               print_string_no_lf:
004A82r 2               ; """Given the number of a zero-terminated string in A, print it to the
004A82r 2               ; current output without adding a LF. Uses Y and tmp3 by falling
004A82r 2               ; through to print_common
004A82r 2               ; """
004A82r 2                   ; Get the entry from the string table
004A82r 2  0A               asl
004A83r 2  A8               tay
004A84r 2  B9 rr rr         lda string_table,y
004A87r 2  85 rr            sta tmp3                ; LSB
004A89r 2  C8               iny
004A8Ar 2  B9 rr rr         lda string_table,y
004A8Dr 2  85 rr            sta tmp3+1              ; MSB
004A8Fr 2               
004A8Fr 2                   ; fall through to print_common
004A8Fr 2               print_common:
004A8Fr 2               ; """Common print routine used by both the print functions and
004A8Fr 2               ; the error printing routine. Assumes string address is in tmp3. Uses
004A8Fr 2               ; Y.
004A8Fr 2               ; """
004A8Fr 2               .scope
004A8Fr 2  A0 00            ldy #0
004A91r 2               _loop:
004A91r 2  B1 rr            lda (tmp3),y
004A93r 2  F0 06            beq _done               ; strings are zero-terminated
004A95r 2               
004A95r 2  20 rr rr         jsr emit_a              ; allows vectoring via output
004A98r 2  C8               iny
004A99r 2  80 F6            bra _loop
004A9Br 2               _done:
004A9Br 2  60               rts
004A9Cr 2               .endscope
004A9Cr 2               
004A9Cr 2               print_string:
004A9Cr 2               ; """Print a zero-terminated string to the console/screen, adding a LF.
004A9Cr 2               ; We do not check to see if the index is out of range. Uses tmp3.
004A9Cr 2               ; """
004A9Cr 2  20 rr rr         jsr print_string_no_lf
004A9Fr 2  4C rr rr         jmp xt_cr               ; JSR/RTS because never compiled
004AA2r 2               
004AA2r 2               
004AA2r 2               print_u:
004AA2r 2               ; """basic printing routine used by higher-level constructs,
004AA2r 2               ; the equivalent of the forth word  0 <# #s #> type  which is
004AA2r 2               ; basically u. without the space at the end. used for various
004AA2r 2               ; outputs
004AA2r 2               ; """
004AA2r 2  20 rr rr         jsr xt_zero                     ; 0
004AA5r 2  20 rr rr         jsr xt_less_number_sign         ; <#
004AA8r 2  20 rr rr         jsr xt_number_sign_s            ; #S
004AABr 2  20 rr rr         jsr xt_number_sign_greater      ; #>
004AAEr 2  4C rr rr         jmp xt_type                     ; JSR/RTS because never compiled
004AB1r 2               
004AB1r 2               ; END
004AB1r 2               
004AB1r 1               ; .include "../../ed.s"
004AB1r 1               
004AB1r 1               .segment "DATA"
004AB1r 1               
004AB1r 1               platform_bye:
004AB1r 1               kernel_init:
004AB1r 1               v_nmi:
004AB1r 1  A9 FF            lda #$FF
004AB3r 1  8D 82 FF         sta DDRB
004AB6r 1  8D 83 FF         sta DDRA
004AB9r 1  9C 81 FF         stz PORTA
004ABCr 1  9C 80 FF         stz PORTB
004ABFr 1               .ifdef video_init
004ABFr 1                   jsr video_init
004ABFr 1               .endif
004ABFr 1               .ifdef ps2_init
004ABFr 1  20 rr rr         jsr ps2_init
004AC2r 1               .endif
004AC2r 1               
004AC2r 1               .ifdef timer_init
004AC2r 1  20 rr rr         jsr timer_init
004AC5r 1               .endif
004AC5r 1  20 rr rr         jsr acia_init
004AC8r 1               .ifdef lcd_init
004AC8r 1                   jsr lcd_init
004AC8r 1               .endif
004AC8r 1               .ifdef spi_init
004AC8r 1                   jsr spi_init
004AC8r 1               .endif
004AC8r 1               .ifdef kb_init
004AC8r 1                   jsr kb_init
004AC8r 1               .endif
004AC8r 1               
004AC8r 1               
004AC8r 1  DA A2 00 BD      printascii welcome_message
004ACCr 1  rr rr F0 06  
004AD0r 1  20 rr rr E8  
004AD7r 1               
004AD7r 1               
004AD7r 1  4C rr rr         jmp forth
004ADAr 1               
004ADAr 1               
004ADAr 1               kernel_putc:
004ADAr 1                   ; """Print a single character to the console. """
004ADAr 1                   ;; Send_Char - send character in A out serial port.
004ADAr 1                   ;; Uses: A (original value restored)
004ADAr 1               send_char:
004ADAr 1  48               pha
004ADBr 1                   .ifdef char_out
004ADBr 1                   jsr char_out
004ADBr 1                   .endif
004ADBr 1                   .ifdef acia_out
004ADBr 1  20 rr rr         jsr acia_out
004ADEr 1                   .endif
004ADEr 1               send_char_exit:
004ADEr 1               .ifdef lcd_print
004ADEr 1                   jsr lcd_print
004ADEr 1               .endif
004ADEr 1  68               pla
004ADFr 1  60               rts
004AE0r 1               
004AE0r 1               
004AE0r 1                       ;; Get_Char - get a character from the serial port into A.
004AE0r 1                       ;; Set the carry flag if char is valid.
004AE0r 1                       ;; Return immediately with carry flag clear if no char available.
004AE0r 1                       ;; Uses: A (return value)
004AE0r 1               
004AE0r 1               Get_Char:
004AE0r 1  20 rr rr         jsr acia_getc
004AE3r 1  90 05            bcc get_ps2_char                ; check keyboard buffer if nothing from ACIA
004AE5r 1  20 rr rr         jsr check_ctrl_c
004AE8r 1  38               sec                             ; Set Carry to show we got a character
004AE9r 1  60               rts                             ; Return
004AEAr 1               
004AEAr 1               get_ps2_char:                       ; no ACIA char available, try to get from KB buffer
004AEAr 1               .ifdef ps2_get_char
004AEAr 1  20 rr rr         jsr ps2_get_char
004AEDr 1               .endif
004AEDr 1  90 02            bcc get_kb_char
004AEFr 1  38               sec
004AF0r 1               
004AF0r 1  60               rts
004AF1r 1               get_kb_char:
004AF1r 1                   .ifdef kb_get_char
004AF1r 1               
004AF1r 1                   ; ldy #5
004AF1r 1                   ; jsr delay_short
004AF1r 1                   ; ply
004AF1r 1                       jsr kb_get_char
004AF1r 1               
004AF1r 1                   .endif
004AF1r 1               exit:                         ; Indicate no char available.
004AF1r 1  60               rts                             ; return
004AF2r 1               
004AF2r 1               kernel_getc:
004AF2r 1                   ; """Get a single character from the keyboard (waits for key).
004AF2r 1                   ; """
004AF2r 1                   ;; Get_Char_Wait - same as Get_Char only blocking.
004AF2r 1                   ;; Uses: A (return value)
004AF2r 1               Get_Char_Wait:
004AF2r 1  20 rr rr         jsr Get_Char
004AF5r 1  90 FB            bcc Get_Char_Wait
004AF7r 1  60               rts
004AF8r 1               
004AF8r 1               check_ctrl_c:
004AF8r 1                   ;; Check if we have ctrl-C character, if so jump to nmi
004AF8r 1  C9 03            cmp #$03
004AFAr 1  D0 12            bne exit_ctrl_c
004AFCr 1  DA A2 00 BD      printascii abort_message
004B00r 1  rr rr F0 06  
004B04r 1  20 rr rr E8  
004B0Br 1  4C rr rr         jmp xt_abort
004B0Er 1               
004B0Er 1               exit_ctrl_c:
004B0Er 1  60               rts
004B0Fr 1               
004B0Fr 1               
004B0Fr 1               v_irq:                          ; IRQ handler
004B0Fr 1  48                   pha
004B10r 1  5A                   phy
004B11r 1                       ; lda #'.'
004B11r 1                       ; jsr kernel_putc
004B11r 1                       ; check if bit 7 of IFR is set
004B11r 1  AD 8D FF             lda IFR
004B14r 1  10 0B                bpl v_kb_irq  ; Interrupt not from VIA, exit
004B16r 1               
004B16r 1  29 08                and #$08        ; ps2 has priority
004B18r 1  D0 12                bne v_irq_ps2
004B1Ar 1  AD 8D FF             lda IFR
004B1Dr 1  29 40                and #$40
004B1Fr 1  D0 20                bne v_irq_timer
004B21r 1               v_kb_irq:
004B21r 1  AD 9D FF             lda KB_IFR
004B24r 1  10 26                bpl v_irq_exit
004B26r 1  29 40                and #$40
004B28r 1  D0 22                bne v_kb_irq_timer
004B2Ar 1  80 20                bra v_irq_exit
004B2Cr 1               
004B2Cr 1               
004B2Cr 1               v_irq_ps2:
004B2Cr 1                   .ifdef ps2_irq
004B2Cr 1  A5 rr                lda time
004B2Er 1  85 rr                sta last_ps2_time
004B30r 1  A5 rr                lda time+1
004B32r 1  85 rr                sta last_ps2_time+1
004B34r 1  A5 rr                lda time+2
004B36r 1  85 rr                sta last_ps2_time+2
004B38r 1  A5 rr                lda time+3
004B3Ar 1  85 rr                sta last_ps2_time+3
004B3Cr 1                       ; this delay is here to ensure we prevent desynchronization
004B3Cr 1                       ;ldy #$04         ; correct delay seems to be #$20 at 10Mhz
004B3Cr 1                       ; jsr delay_short
004B3Cr 1               
004B3Cr 1               
004B3Cr 1  20 rr rr             jsr ps2_irq
004B3Fr 1               
004B3Fr 1                       ; ldy #$04         ; correct delay seems to be #$20 at 10Mhz
004B3Fr 1                       ; jsr delay_short
004B3Fr 1                   .endif
004B3Fr 1  80 0B                bra v_irq_exit
004B41r 1               
004B41r 1               v_irq_timer:
004B41r 1  AD 84 FF             lda T1CL
004B44r 1                       ; clear timer interrupt
004B44r 1                   .ifdef timer_irq
004B44r 1  20 rr rr             jsr timer_irq
004B47r 1                   .endif
004B47r 1  20 rr rr             jsr Get_Char ; Check if a char is waiting to be able to break on CTRL-C
004B4Ar 1                       ; check if there is a char waiting to be printed to the lcd
004B4Ar 1                       ; lda lcd_char
004B4Ar 1                       ; beq v_exit
004B4Ar 1                       ; jsr lcd_print
004B4Ar 1                       ; stz lcd_char
004B4Ar 1               
004B4Ar 1               
004B4Ar 1  80 00                bra v_irq_exit
004B4Cr 1               v_kb_irq_timer:
004B4Cr 1               .ifdef kb_time
004B4Cr 1                   lda KB_T1CL ; clear timer interrupt
004B4Cr 1                   inc kb_time
004B4Cr 1                   bne v_irq_exit
004B4Cr 1               .endif
004B4Cr 1                   ;jsr kb_scan
004B4Cr 1               v_irq_exit:
004B4Cr 1  7A               ply
004B4Dr 1  68               pla
004B4Er 1  40               rti
004B4Fr 1               
004B4Fr 1               
004B4Fr 1               
004B4Fr 1               .segment "RODATA"
0000FFr 1               
0000FFr 1  57 65 6C 63  welcome_message: .byte "Welcome to Planck 6502", $0D, "Type 'words' for available words", 0
000103r 1  6F 6D 65 20  
000107r 1  74 6F 20 50  
000137r 1  0D 0A 00     abort_message: .byte AscCR, AscLF, 0
00013Ar 1               
00013Ar 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        .word v_nmi
000002r 1  rr rr        .word v_reset
000004r 1  rr rr        .word v_irq
000004r 1               
