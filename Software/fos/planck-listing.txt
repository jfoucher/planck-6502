ca65 V2.18 - N/A
Main file   : platform/planck/main.s
Current file: platform/planck/main.s

000000r 1               
000000r 1               .include "../../macros.s"
000000r 2               .macro  printascii   addr
000000r 2               .local @loop
000000r 2               .local @done
000000r 2                   phx
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda addr,x
000000r 2                   beq @done
000000r 2                   jsr kernel_putc
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @done:
000000r 2                   plx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               
000000r 2               .macro  cp16   src, dest
000000r 2                   lda src
000000r 2                   sta dest
000000r 2                   lda src + 1
000000r 2                   sta dest + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro printstr addr, len
000000r 2               .repeat len, I
000000r 2               lda addr + I
000000r 2               jsr kernel_putc
000000r 2               .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl16 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl32 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2                   rol src + 2
000000r 2                   rol src + 3
000000r 2               .endmacro
000000r 2               
000000r 2               .macro lsr16 src
000000r 2                   lsr src + 1
000000r 2                   ror src
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc16 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment the MSB if LSB wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc32 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment next byte if LSB wrapped round
000000r 2                   bne @done
000000r 2                   inc src+2       ;Increment the next byte the previous wrapped round
000000r 2                   bne @done
000000r 2                   inc src+3       ;Increment the MSB if previous wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16 src
000000r 2               .local @skip
000000r 2               .local @end
000000r 2                   lda src             ; load low byte
000000r 2                   bne @skip           ; if it's not zero, just decrement it
000000r 2                   dec src + 1         ; if low byte is zero decrement high byte
000000r 2               @skip:
000000r 2                   dec src
000000r 2               @end:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16zero src
000000r 2               .local @skip
000000r 2               .local @end
000000r 2                   lda src             ; load low byte
000000r 2                   bne @skip           ; if it's not zero, decrement it
000000r 2                   dec src + 1         ; if low byte is zero decrement high byte
000000r 2                   beq @end            ; if high byte is also zero, we reached zero, exit now
000000r 2               @skip:
000000r 2                   dec src
000000r 2                   bne @end            ; if low byte is not zero exit now
000000r 2                   lda src + 1         ; if low byte was zero, load high byte to check if it's also zero
000000r 2               @end:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro add16 first, second, result
000000r 2                   CLC             ;Ensure carry is clear
000000r 2                   LDA first+0       ;Add the two least significant bytes
000000r 2                   ADC second+0
000000r 2                   STA result+0       ;... and store the result
000000r 2                   LDA first+1       ;Add the two most significant bytes
000000r 2                   ADC second+1       ;... and any propagated carry bit
000000r 2                   STA result+1       ;... and store the result
000000r 2               .endmacro
000000r 2               
000000r 2               ; compare data at two adresses for defined length
000000r 2               ; On exit, carry is set if there is a match
000000r 2               ; and unset if no match
000000r 2               ; length of data to check is in X
000000r 2               
000000r 2               .macro memcmp first, second
000000r 2               .local @exit
000000r 2               .local @loop
000000r 2               .local @exit_fail
000000r 2               @loop:
000000r 2                   lda first, x
000000r 2                   cmp second, x
000000r 2                   bne @exit_fail
000000r 2                   dex
000000r 2                   bne @loop
000000r 2                   lda first           ; check 0th element
000000r 2                   cmp second
000000r 2                   bne @exit_fail
000000r 2                   sec
000000r 2                   bra @exit
000000r 2               @exit_fail:
000000r 2                   clc
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               ; copy data from one address to another for defined length
000000r 2               ; length of data to copy is in X
000000r 2               .macro memcp first, second
000000r 2               .local @exit
000000r 2               .local @loop
000000r 2               @loop:
000000r 2                   lda first, x
000000r 2                   sta second, x
000000r 2                   dex
000000r 2                   bne @loop
000000r 2                   lda first           ; copy zeroth item
000000r 2                   sta second
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               ; calculates length of zero terminated string
000000r 2               ; result is in x
000000r 2               .macro strlen address
000000r 2               .local @loop
000000r 2               .local @exit
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda address, x
000000r 2                   beq @exit
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_axy
000000r 2               	pha		; push accumulator to stack
000000r 2               	phx
000000r 2                   phy
000000r 2               .endmacro
000000r 2               
000000r 2               .macro pull_axy
000000r 2               	ply		; pull y from stack
000000r 2               	plx		; pull x from stack
000000r 2               	pla		; pull a from stack
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro push_ax
000000r 2               	pha
000000r 2               	phx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ax
000000r 2               	pla
000000r 2               	plx
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_ay
000000r 2               	pha
000000r 2               	phy
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ay
000000r 2               	pla
000000r 2               	ply
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro mov32 SRC, DEST
000000r 2               	lda SRC
000000r 2               	sta DEST
000000r 2               	lda SRC+1
000000r 2               	sta DEST+1
000000r 2               	lda SRC+2
000000r 2               	sta DEST+2
000000r 2               	lda SRC+3
000000r 2               	sta DEST+3
000000r 2               .endmacro
000000r 2               
000000r 1               CLOCK_SPEED = 24000000
000000r 1               
000000r 1               ram_end = $8000
000000r 1               
000000r 1               ; select includes to enable card drivers
000000r 1               
000000r 1               .include "drivers/cf.inc"
000000r 2               
000000r 2               CF_READ_SECTOR_COMMAND = $20
000000r 2               CF_WRITE_SECTOR_COMMAND = $30
000000r 2               CF_ADDRESS = $FFD0
000000r 2               
000000r 1               .include "drivers/acia.inc"
000000r 2               ACIA_BASE   = $FFE0
000000r 2               ACIA_DATA = ACIA_BASE
000000r 2               ACIA_STATUS = ACIA_BASE + 1
000000r 2               ACIA_CMD = ACIA_BASE + 2
000000r 2               ACIA_CTRL = ACIA_BASE + 3
000000r 2               
000000r 2               
000000r 1               .include "drivers/via.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               VIA1_BASE   = $FF80
000000r 2               PORTB = VIA1_BASE
000000r 2               PORTA  = VIA1_BASE+1
000000r 2               DDRB = VIA1_BASE+2
000000r 2               DDRA = VIA1_BASE+3
000000r 2               
000000r 2               
000000r 2               T1CL = VIA1_BASE + 4
000000r 2               T1CH = VIA1_BASE + 5
000000r 2               T1LL = VIA1_BASE + 6
000000r 2               T1LH = VIA1_BASE + 7
000000r 2               ACR = VIA1_BASE + 11
000000r 2               PCR = VIA1_BASE + 12
000000r 2               IFR = VIA1_BASE + 13
000000r 2               IER = VIA1_BASE + 14
000000r 2               
000000r 1               ; .include "drivers/sd.inc"
000000r 1               ; .include "drivers/ps2.inc"
000000r 1               ; .include "drivers/4004.inc"
000000r 1               ; .include "drivers/lcd.inc"
000000r 1               ; .include "drivers/vga.inc"
000000r 1               ; .include "drivers/keyboard.inc"
000000r 1               
000000r 1               .segment "ZEROPAGE": zeropage
000000r 1  xx xx        io_buffer_ptr: .res 2
000002r 1               
000002r 1               .include "drivers/zp.s"
000002r 2               ; Copyright 2020 Jonathan Foucher
000002r 2               
000002r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000002r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000002r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000002r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000002r 2               ; is furnished to do so, subject to the following conditions:
000002r 2               
000002r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000002r 2               ; substantial portions of the Software.
000002r 2               
000002r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000002r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000002r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000002r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000002r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000002r 2               ; DEALINGS IN THE SOFTWARE.
000002r 2               
000002r 2               ; next_addr: .res 1
000002r 2               
000002r 2               
000002r 2  xx xx        tmp_var: .res 2
000004r 2  xx xx        stack_p: .res 2
000006r 2               .ifdef VIA1_BASE
000006r 2  xx xx xx xx  time: .res 4
00000Ar 2               .endif
00000Ar 2               
00000Ar 1               
00000Ar 1               .segment "BSS"
000000r 1               .ifdef VIA1_BASE
000000r 1  xx           lcd_absent: .res 1
000001r 1               .endif
000001r 1               .ifdef ACIA_BASE
000001r 1  xx           has_acia: .res 1
000002r 1               .endif
000002r 1               
000002r 1               .ifdef CF_ADDRESS
000002r 1               IO_BUFFER = cp0+256 ; set IO_BUFFER to block buffer
000002r 1  xx xx xx xx  IO_SECTOR: .res 4
000006r 1               .endif
000006r 1               
000006r 1               
000006r 1               
000006r 1               .segment "STARTUP"
000000r 1               .import    copydata
000000r 1               .import zerobss
000000r 1               zero_ram:
000000r 1  A2 FF            ldx #$FF
000002r 1               zero_zp:
000002r 1  74 00            stz 0, x
000004r 1  CA               dex
000005r 1  D0 FB            bne zero_zp
000007r 1  64 00            stz $00
000009r 1  A9 00            lda #0
00000Br 1  85 01            sta $01
00000Dr 1               
00000Dr 1  A2 80            ldx #$80
00000Fr 1  A0 00            ldy #0
000011r 1  A9 00            lda #0
000013r 1               @loop:
000013r 1  91 00            sta ($0), y
000015r 1  C8               iny
000016r 1  D0 FB            bne @loop
000018r 1  E6 01            inc $1
00001Ar 1  CA               dex
00001Br 1  D0 F6            bne @loop
00001Dr 1               
00001Dr 1  4C rr rr         jmp ram_zeroed
000020r 1               
000020r 1               v_reset:
000020r 1  4C rr rr         jmp zero_ram
000023r 1               ram_zeroed:
000023r 1  20 rr rr         JSR     copydata
000026r 1  20 rr rr         jsr zerobss
000029r 1               
000029r 1  4C rr rr         jmp kernel_init
00002Cr 1               
00002Cr 1               
00002Cr 1               
00002Cr 1               .segment "DATA"
000000r 1               
000000r 1               .include "drivers/delayroutines.s"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               ; this routine delays by 2304 * y + 23 cycles
000000r 2               delay:
000000r 2  DA             phx       ; 3 cycles
000001r 2  5A             phy       ; 3 cycles
000002r 2               two:
000002r 2  A2 FF          ldx #$ff  ; 2 cycles
000004r 2               one:
000004r 2  EA             nop       ; 2 cycles
000005r 2  EA             nop       ; 2 cycles
000006r 2  CA             dex       ; 2 cycles
000007r 2  D0 FB          bne one   ; 3 for all cycles, 2 for last
000009r 2  88             dey       ; 2 cycles
00000Ar 2  D0 F6          bne two   ; 3 for all cycles, 2 for last
00000Cr 2  7A             ply       ; 4 cycles
00000Dr 2  FA             plx       ; 4 cycles
00000Er 2  60             rts       ; 6 cycles
00000Fr 2               
00000Fr 2               ; delay is in Y register
00000Fr 2               delay_long:
00000Fr 2  48             pha
000010r 2  5A             phy
000011r 2  DA             phx
000012r 2  98             tya
000013r 2  AA             tax
000014r 2               delay_long_loop:
000014r 2  A0 FF          ldy #$ff
000016r 2  20 rr rr       jsr delay
000019r 2  CA             dex
00001Ar 2  D0 F8          bne delay_long_loop
00001Cr 2  FA             plx
00001Dr 2  7A             ply
00001Er 2  68             pla
00001Fr 2  60             rts
000020r 2               
000020r 2               delay_short:        ; delay Y * 19 cycles
000020r 2  5A             phy
000021r 2               delay_short_loop:
000021r 2  EA             nop               ; 2 cycles
000022r 2  EA             nop               ; 2 cycles
000023r 2  EA             nop               ; 2 cycles
000024r 2  EA             nop               ; 2 cycles
000025r 2  EA             nop               ; 2 cycles
000026r 2  EA             nop               ; 2 cycles
000027r 2  EA             nop               ; 2 cycles
000028r 2               
000028r 2               
000028r 2  88             dey               ; 2 cycles
000029r 2  D0 F6          bne delay_short_loop   ; 2 or 3 cycles
00002Br 2  7A             ply
00002Cr 2  60             rts
00002Dr 2               
00002Dr 1               
00002Dr 1               .ifdef VIA1_BASE
00002Dr 1               .include "drivers/timer.s"
00002Dr 2               
00002Dr 2               
00002Dr 2               COUNTER = CLOCK_SPEED/400        ; n/s
00002Dr 2               
00002Dr 2               timer_init:
00002Dr 2  AD 8E FF         lda IER
000030r 2  09 C0            ora #$C0        ;enable interrupt on timer1 timeout
000032r 2  8D 8E FF         sta IER
000035r 2  A9 40            lda #$40        ; timer one free run mode
000037r 2  8D 8B FF         sta ACR
00003Ar 2  A9 60            lda #<COUNTER     ; set timer to low byte to calculated value from defined clock speed
00003Cr 2  8D 84 FF         sta T1CL
00003Fr 2  A9 EA            lda #>COUNTER       ; set timer to high byte to calculated value from defined clock speed
000041r 2               
000041r 2  8D 85 FF         sta T1CH
000044r 2  64 rr            stz time
000046r 2  64 rr            stz time+1
000048r 2  64 rr            stz time+2
00004Ar 2  64 rr            stz time+3
00004Cr 2  58               cli
00004Dr 2  60               rts
00004Er 2               
00004Er 2               
00004Er 2               timer_irq:
00004Er 2  E6 rr            inc time
000050r 2  F0 01            beq @inc1
000052r 2               @exit1:
000052r 2                   ; this resets the PS/2 temp variables
000052r 2                   ;jsr reset_ps2
000052r 2  60               rts
000053r 2               @inc1:
000053r 2  E6 rr            inc time+1
000055r 2  F0 02            beq @inc2
000057r 2  80 F9            bra @exit1
000059r 2               @inc2:
000059r 2  E6 rr            inc time+2
00005Br 2  F0 02            beq @inc3
00005Dr 2  80 F3            bra @exit1
00005Fr 2               @inc3:
00005Fr 2  E6 rr            inc time+3
000061r 2  80 EF            bra @exit1
000063r 2  60               rts
000064r 2               
000064r 1               .include "drivers/spi.s"
000064r 2               ; SPI defines
000064r 2               .ifndef DATA
000064r 2               DATA = $80
000064r 2               .endif
000064r 2               SS = $07   ; Slave Select with lowest 3 bits
000064r 2               SCK = $08   ; Clock on bit 3
000064r 2               MISO = $10  ; MISO on bit 4
000064r 2               MOSI = $20  ; MOSI on bit 5
000064r 2               CONF = $40  ; CONF on bit 6
000064r 2               
000064r 2               .segment "BSS"
000006r 2  xx           spi_tmp: .res 1
000007r 2  xx           spi_tmp2: .res 1
000008r 2  xx           spi_slave: .res 1
000009r 2               
000009r 2               .segment "DATA"
000064r 2               
000064r 2               spi_init:
000064r 2  AD 80 FF         lda PORTB               ; load current port B
000067r 2  29 90            and #(DATA | MISO)      ; set everything to zero except for PS2 DATA and MISO
000069r 2  09 40            ora #CONF               ; set CONF high
00006Br 2  8D 80 FF         sta PORTB               ; save to PORTB
00006Er 2  AD 82 FF         lda DDRB                ; get current direction register
000071r 2  09 6F            ora #(MOSI | CONF | SCK | SS) ; set MOSI, CONF, SCK and SS as outputs
000073r 2  29 EF            and #($FF^MISO)                 ; set MISO as input
000075r 2  8D 82 FF         sta DDRB
000078r 2  A9 FF            lda #$FF                ; flash leds to see what is going on
00007Ar 2  8D 83 FF         sta DDRA
00007Dr 2  8D 81 FF         sta PORTA
000080r 2  60               rts
000081r 2               
000081r 2               spi_select:
000081r 2                   ; selected slave in A
000081r 2  29 07            and #SS                 ; mask slave select bits
000083r 2  8D 80 FF         sta PORTB               ; set everything low except for SS bits
000086r 2  8D rr rr         sta spi_slave
000089r 2  5A               phy
00008Ar 2  A0 01            ldy #$1
00008Cr 2  20 rr rr         jsr delay_short         ; slight delay
00008Fr 2  09 40            ora #CONF               ; set CONF high to latch address
000091r 2  8D 80 FF         sta PORTB               ; save to PORTB
000094r 2  7A               ply                     ; CONF MUST stay high for the duration of the transfer
000095r 2  60               rts
000096r 2               
000096r 2               spi_clk_toggle:
000096r 2  60               rts
000097r 2               
000097r 2               spi_transceive:
000097r 2                   ; send data in A, received data will be in A
000097r 2  5A               phy
000098r 2                   ; save data in RAM
000098r 2  8D rr rr         sta spi_tmp
00009Br 2                   ; reset X
00009Br 2  DA               phx
00009Cr 2  A2 08            ldx #8
00009Er 2                   ; reset result
00009Er 2  9C rr rr         stz spi_tmp2
0000A1r 2               spi_send_loop:
0000A1r 2  0E rr rr         asl spi_tmp
0000A4r 2  90 08            bcc bit_unset
0000A6r 2               bit_set:
0000A6r 2  AD 80 FF         lda PORTB
0000A9r 2  09 60            ora #(MOSI | CONF)
0000ABr 2  4C rr rr         jmp clock_on
0000AEr 2               bit_unset:
0000AEr 2  AD 80 FF         lda PORTB
0000B1r 2  29 DF            and #(($FF^MOSI) | CONF)
0000B3r 2               clock_on:
0000B3r 2                   ; set data bit
0000B3r 2  0D rr rr         ora spi_slave
0000B6r 2  8D 80 FF         sta PORTB
0000B9r 2               
0000B9r 2                   ; set clock on
0000B9r 2  09 48            ora #(SCK | CONF)
0000BBr 2  0D rr rr         ora spi_slave
0000BEr 2  8D 80 FF         sta PORTB
0000C1r 2               
0000C1r 2                   ; read bit from slave, maybe add slight delay here ?
0000C1r 2  AD 80 FF         lda PORTB
0000C4r 2  29 10            and #MISO           ; mask miso bit
0000C6r 2  D0 07            bne spi_bit_set      ; bit is set
0000C8r 2                   ; bit is unset
0000C8r 2  18               clc
0000C9r 2  2E rr rr         rol spi_tmp2
0000CCr 2  4C rr rr         jmp clock_off
0000CFr 2               
0000CFr 2               spi_bit_set:
0000CFr 2  38               sec
0000D0r 2  2E rr rr         rol spi_tmp2
0000D3r 2               
0000D3r 2               
0000D3r 2               clock_off:
0000D3r 2  AD 80 FF         lda PORTB
0000D6r 2  29 F7            and #(($FF^SCK) | CONF)
0000D8r 2  0D rr rr         ora spi_slave
0000DBr 2  8D 80 FF         sta PORTB
0000DEr 2               end_loop:
0000DEr 2  CA               dex
0000DFr 2  D0 C0            bne spi_send_loop
0000E1r 2                   ; set data low
0000E1r 2  A0 01            ldy #$1
0000E3r 2  20 rr rr         jsr delay_short
0000E6r 2  AD 80 FF         lda PORTB
0000E9r 2  0D rr rr         ora spi_slave
0000ECr 2  29 DF            and #(($FF^MOSI) | CONF)
0000EEr 2  8D 80 FF         sta PORTB
0000F1r 2  FA               plx
0000F2r 2  7A               ply
0000F3r 2  AD rr rr         lda spi_tmp2
0000F6r 2  60               rts
0000F7r 2               
0000F7r 1               .endif
0000F7r 1               
0000F7r 1               .ifdef ACIA_BASE
0000F7r 1               .include "drivers/acia.s"
0000F7r 2               ACIA_DELAY = CLOCK_SPEED / 500000
0000F7r 2               
0000F7r 2               acia_init:
0000F7r 2  8D E1 FF         sta ACIA_STATUS        ; soft reset (value not important)
0000FAr 2                                           ; set specific modes and functions
0000FAr 2  9C rr rr         stz has_acia
0000FDr 2  A9 0B            lda #$0B                ; no parity, no echo, no Tx interrupt, NO Rx interrupt, enable Tx/Rx
0000FFr 2                   ;lda #$09               ; no parity, no echo, no Tx interrupt, Rx interrupt, enable Tx/Rx
0000FFr 2  8D E2 FF         sta ACIA_CMD        ; store to the command register
000102r 2  AD E2 FF         lda ACIA_CMD        ; load command register again
000105r 2  C9 0B            cmp #$0B                ; if not the same
000107r 2  D0 11            bne acia_absent         ; then it means the ACIA is not connected
000109r 2  AD E1 FF         lda ACIA_STATUS         ; Read the ACAI status to
00010Cr 2  29 60            and #$60                ; check if present or absent
00010Er 2  D0 0A            bne acia_absent
000110r 2  A9 01            lda #1
000112r 2  8D rr rr         sta has_acia           ; remember that ACIA is here
000115r 2  A9 10            lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 115.200k baud rate
000117r 2                   ;lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 1200 baud rate
000117r 2  8D E3 FF         sta ACIA_CTRL          ; program the ctl register
00011Ar 2               
00011Ar 2               acia_absent:
00011Ar 2  A0 14                ldy #20
00011Cr 2               aa_loop:
00011Cr 2  20 rr rr             jsr delay_short
00011Fr 2  AD E1 FF             lda ACIA_STATUS         ; Read ACIA data a few times
000122r 2  AD E0 FF             lda ACIA_DATA           ; to try and prevent spurious characters
000125r 2  88                   dey
000126r 2  D0 F4                bne aa_loop
000128r 2               aa_end:
000128r 2  60                   rts
000129r 2               
000129r 2               acia_out:
000129r 2  48               pha
00012Ar 2  5A               phy
00012Br 2  8D E0 FF         sta ACIA_DATA
00012Er 2  A0 30            ldy #ACIA_DELAY            ;minimal delay is $02
000130r 2  20 rr rr         jsr delay_short
000133r 2  7A               ply
000134r 2  68               pla
000135r 2  60               rts
000136r 2               
000136r 2               acia_getc:
000136r 2  AD E1 FF         lda ACIA_STATUS                 ; Read the ACIA status to
000139r 2  29 08            and #$08                        ; Check if there is character in the receiver
00013Br 2  F0 05            beq @no_char      ; Exit now if we don't get one.
00013Dr 2  AD E0 FF         lda ACIA_DATA
000140r 2  38               sec
000141r 2  60               rts
000142r 2               @no_char:
000142r 2  18               clc
000143r 2  60               rts
000144r 2               
000144r 1               .endif
000144r 1               
000144r 1               
000144r 1               .ifdef KB_VIA_BASE
000144r 1               .include "drivers/keyboard.s"
000144r 1               .endif
000144r 1               .ifdef KB_INIT_STATE_RESET
000144r 1               .include "drivers/ps2.s"
000144r 1               .endif
000144r 1               
000144r 1               .ifdef LCD2_ENABLED
000144r 1               .include "drivers/4004.s"
000144r 1               .endif
000144r 1               .ifdef CF_ADDRESS
000144r 1               .include "drivers/cf.s"
000144r 2               .segment "ZEROPAGE": zeropage
00000Ar 2  xx xx        CF_POINTER: .res 2
00000Cr 2               
00000Cr 2               .segment "BSS"
000009r 2  xx xx xx xx  LBA_SIZE: .res 4
00000Dr 2               .segment "DATA"
000144r 2               
000144r 2               
000144r 2               
000144r 2               cf_init:
000144r 2                   ; phy
000144r 2  A9 04            lda #$4
000146r 2                   ; ldy #7
000146r 2                   ; sta (CF_ADDRESS),y
000146r 2  8D D7 FF         sta CF_ADDRESS + 7
000149r 2  20 rr rr         jsr cf_wait
00014Cr 2  A9 E0            lda #$E0
00014Er 2                   ; ldy #6
00014Er 2                   ; sta (CF_ADDRESS),y
00014Er 2  8D D6 FF         sta CF_ADDRESS + 6
000151r 2  A9 01            lda #$1
000153r 2                   ; ldy #1
000153r 2                   ; sta (CF_ADDRESS),y
000153r 2  8D D1 FF         sta CF_ADDRESS + 1
000156r 2  A9 EF            lda #$EF
000158r 2                   ; ldy #7
000158r 2                   ; sta (CF_ADDRESS),y
000158r 2  8D D7 FF         sta CF_ADDRESS + 7
00015Br 2  20 rr rr         jsr cf_wait
00015Er 2  20 rr rr         jsr cf_err
000161r 2                   ; ply
000161r 2  60               rts
000162r 2               
000162r 2               
000162r 2               
000162r 2               
000162r 2               cf_read:
000162r 2  5A               phy
000163r 2  A0 00            ldy #0
000165r 2               @loop:
000165r 2  20 rr rr         jsr cf_wait
000168r 2  AD D0 FF         lda CF_ADDRESS
00016Br 2                   ; jsr kernel_putc
00016Br 2  91 rr            sta (io_buffer_ptr), y
00016Dr 2  C8               iny
00016Er 2  D0 F5            bne @loop
000170r 2  E6 rr            inc io_buffer_ptr + 1
000172r 2               @loop2:
000172r 2  20 rr rr         jsr cf_wait
000175r 2  AD D0 FF         lda CF_ADDRESS
000178r 2                   ; jsr kernel_putc
000178r 2  91 rr            sta (io_buffer_ptr), y
00017Ar 2  C8               iny
00017Br 2  D0 F5            bne @loop2
00017Dr 2  C6 rr            dec io_buffer_ptr + 1
00017Fr 2               @loop3:
00017Fr 2  AD D7 FF         lda CF_ADDRESS + 7
000182r 2  29 08            and #$08
000184r 2  F0 06            beq @exit
000186r 2  AD D0 FF         lda CF_ADDRESS
000189r 2  C8               iny
00018Ar 2  D0 F3            bne @loop3
00018Cr 2               @exit:
00018Cr 2  7A               ply
00018Dr 2  60               rts
00018Er 2               
00018Er 2               
00018Er 2               ; number of sectors to read is in X
00018Er 2               cf_read_sector:
00018Er 2                   ; sei
00018Er 2  20 rr rr         jsr cf_set_lba
000191r 2                   ; ldy #2
000191r 2                   ; sta (CF_ADDRESS), y
000191r 2  A9 01            lda #1
000193r 2  8D D2 FF         sta CF_ADDRESS + 2
000196r 2  20 rr rr         jsr cf_wait
000199r 2  A9 20            lda #CF_READ_SECTOR_COMMAND
00019Br 2                   ; ldy #7
00019Br 2                   ; sta (CF_ADDRESS), y
00019Br 2  8D D7 FF         sta CF_ADDRESS + 7
00019Er 2  20 rr rr         jsr cf_wait
0001A1r 2  20 rr rr         jsr cf_read
0001A4r 2  20 rr rr         jsr cf_err
0001A7r 2                   ; cli
0001A7r 2  60               rts
0001A8r 2               
0001A8r 2               ; number of sectors to write is in X
0001A8r 2               cf_write_sector:
0001A8r 2                   ; sei
0001A8r 2  20 rr rr         jsr cf_set_lba
0001ABr 2  A9 01            lda #1
0001ADr 2                   ; ldy #2
0001ADr 2                   ; sta (CF_ADDRESS), y
0001ADr 2  8D D2 FF         sta CF_ADDRESS + 2
0001B0r 2  20 rr rr         jsr cf_wait
0001B3r 2  A9 30            lda #CF_WRITE_SECTOR_COMMAND
0001B5r 2                   ; ldy #7
0001B5r 2                   ; sta (CF_ADDRESS), y
0001B5r 2  8D D7 FF         sta CF_ADDRESS + 7
0001B8r 2  20 rr rr         jsr cf_wait
0001BBr 2  20 rr rr         jsr cf_write
0001BEr 2  20 rr rr         jsr cf_err
0001C1r 2                   ; cli
0001C1r 2  60               rts
0001C2r 2               
0001C2r 2               
0001C2r 2               cf_write:
0001C2r 2  5A               phy
0001C3r 2  A0 00            ldy #0
0001C5r 2               @loop:
0001C5r 2  20 rr rr         jsr cf_wait
0001C8r 2               
0001C8r 2  B1 rr            lda (io_buffer_ptr), y
0001CAr 2  8D D0 FF         sta CF_ADDRESS
0001CDr 2  C8               iny
0001CEr 2  D0 F5            bne @loop
0001D0r 2  E6 rr            inc io_buffer_ptr + 1
0001D2r 2               @loop2:
0001D2r 2  20 rr rr         jsr cf_wait
0001D5r 2  B1 rr            lda (io_buffer_ptr), y
0001D7r 2  8D D0 FF         sta CF_ADDRESS
0001DAr 2  C8               iny
0001DBr 2  D0 F5            bne @loop2
0001DDr 2  C6 rr            dec io_buffer_ptr + 1
0001DFr 2               @loop3:
0001DFr 2  AD D7 FF         lda CF_ADDRESS + 7
0001E2r 2  29 08            and #$08
0001E4r 2  F0 06            beq @exit
0001E6r 2  8D D0 FF         sta CF_ADDRESS
0001E9r 2  C8               iny
0001EAr 2  D0 F3            bne @loop3
0001ECr 2               @exit:
0001ECr 2  7A               ply
0001EDr 2  60               rts
0001EEr 2               
0001EEr 2               
0001EEr 2               
0001EEr 2               
0001EEr 2               
0001EEr 2               
0001EEr 2               cf_wait:
0001EEr 2                   ; phy
0001EEr 2                   ; ldy #7
0001EEr 2               @wait_loop:
0001EEr 2                   ; lda (CF_ADDRESS), y
0001EEr 2  AD D7 FF         lda CF_ADDRESS + 7
0001F1r 2  29 80            and #$80
0001F3r 2  D0 F9            bne @wait_loop
0001F5r 2                   ; ply
0001F5r 2  60               rts
0001F6r 2               
0001F6r 2               cf_set_lba:
0001F6r 2                   ; phy
0001F6r 2  AD rr rr         lda IO_SECTOR
0001F9r 2                   ; ldy #3
0001F9r 2                   ; sta (CF_ADDRESS),y
0001F9r 2  8D D3 FF         sta CF_ADDRESS + 3
0001FCr 2  AD rr rr         lda IO_SECTOR + 1
0001FFr 2                   ; ldy #4
0001FFr 2                   ; sta (CF_ADDRESS), y
0001FFr 2  8D D4 FF         sta CF_ADDRESS + 4
000202r 2  AD rr rr         lda IO_SECTOR + 2
000205r 2                   ; ldy #5
000205r 2                   ; sta (CF_ADDRESS), y
000205r 2  8D D5 FF         sta CF_ADDRESS + 5
000208r 2  AD rr rr         lda IO_SECTOR + 3
00020Br 2  29 0F            and #$0F
00020Dr 2  09 E0            ora #$E0
00020Fr 2                   ; ldy #6
00020Fr 2                   ; sta (CF_ADDRESS), y
00020Fr 2  8D D6 FF         sta CF_ADDRESS + 6
000212r 2                   ; ply
000212r 2  60               rts
000213r 2               
000213r 2               cf_err:
000213r 2                   ; phy
000213r 2  20 rr rr         jsr cf_wait
000216r 2                   ; ldy #7
000216r 2                   ; lda (CF_ADDRESS), y
000216r 2  AD D7 FF         lda CF_ADDRESS + 7
000219r 2  29 01            and #$01
00021Br 2  F0 05            beq @exit
00021Dr 2               @exit_fail:
00021Dr 2  A9 21            lda #'!'
00021Fr 2  20 rr rr         jsr kernel_putc
000222r 2               @exit:
000222r 2                   ; ply
000222r 2  60               rts
000223r 2               
000223r 2               cf_info:
000223r 2  20 rr rr         jsr cf_init
000226r 2  20 rr rr         jsr cf_wait
000229r 2  A9 EC            lda #$EC
00022Br 2  8D D7 FF         sta CF_ADDRESS + 7
00022Er 2  20 rr rr         jsr cf_read
000231r 2  60               rts
000232r 2               
000232r 2               cf_print_id:
000232r 2                   ; print model number
000232r 2  5A               phy
000233r 2  A0 37            ldy #55
000235r 2               @loop:
000235r 2  B1 rr            lda (io_buffer_ptr), y
000237r 2  20 rr rr         jsr kernel_putc
00023Ar 2  88               dey
00023Br 2  B1 rr            lda (io_buffer_ptr), y
00023Dr 2  20 rr rr         jsr kernel_putc
000240r 2  C8               iny
000241r 2  C8               iny
000242r 2  C8               iny
000243r 2  C0 5F            cpy #(40+55)
000245r 2  90 EE            bcc @loop
000247r 2  7A               ply
000248r 2  60               rts
000249r 2               
000249r 2               cf_print_capacity:
000249r 2  5A               phy
00024Ar 2               
00024Ar 2  20 rr rr         jsr xt_cr
00024Dr 2               
00024Dr 2  A0 78            ldy #120
00024Fr 2                   ; print lba size
00024Fr 2  B1 rr            lda (io_buffer_ptr), y
000251r 2  8D rr rr         sta LBA_SIZE
000254r 2  C8               iny
000255r 2  B1 rr            lda (io_buffer_ptr), y
000257r 2  8D rr rr         sta LBA_SIZE + 1
00025Ar 2               
00025Ar 2  C8               iny
00025Br 2  B1 rr            lda (io_buffer_ptr), y
00025Dr 2  8D rr rr         sta LBA_SIZE + 2
000260r 2               
000260r 2  C8               iny
000261r 2  B1 rr            lda (io_buffer_ptr), y
000263r 2  8D rr rr         sta LBA_SIZE + 3
000266r 2               
000266r 2  A0 09            ldy #9
000268r 2               @loop:
000268r 2  0E rr rr 2E      asl32 LBA_SIZE
00026Cr 2  rr rr 2E rr  
000270r 2  rr 2E rr rr  
000274r 2  88               dey
000275r 2  D0 F1            bne @loop
000277r 2               
000277r 2  CA               dex
000278r 2  CA               dex
000279r 2  CA               dex
00027Ar 2  CA               dex
00027Br 2               
00027Br 2  AD rr rr         lda LBA_SIZE
00027Er 2  95 02            sta 2, x
000280r 2  AD rr rr         lda LBA_SIZE + 1
000283r 2  95 03            sta 3, x
000285r 2  AD rr rr         lda LBA_SIZE + 2
000288r 2  95 00            sta 0, x
00028Ar 2  AD rr rr         lda LBA_SIZE + 3
00028Dr 2  95 01            sta 1, x
00028Fr 2               
00028Fr 2  20 rr rr         jsr xt_ud_dot
000292r 2               
000292r 2  CA               dex
000293r 2  CA               dex
000294r 2  CA               dex
000295r 2  CA               dex
000296r 2  A9 06            lda #6
000298r 2  95 00            sta 0, x
00029Ar 2  74 01            stz 1, x
00029Cr 2  A9 rr            lda #<bytes_msg
00029Er 2  95 02            sta 2, x
0002A0r 2  A9 rr            lda #>bytes_msg
0002A2r 2  95 03            sta 3, x
0002A4r 2  20 rr rr         jsr xt_type
0002A7r 2  20 rr rr         jsr xt_cr
0002AAr 2  7A               ply
0002ABr 2  60               rts
0002ACr 2  20 62 79 74  bytes_msg: .byte " bytes"
0002B0r 2  65 73        
0002B2r 2               cf_end:
0002B2r 2               
0002B2r 2               
0002B2r 1               io_read_sector_address = cf_read_sector
0002B2r 1               io_write_sector_address = cf_write_sector
0002B2r 1               .endif
0002B2r 1               .ifdef SD
0002B2r 1               
0002B2r 1               .include "drivers/sd.s"
0002B2r 1               io_read_sector_address = sd_read_sector
0002B2r 1               
0002B2r 1               .endif
0002B2r 1               
0002B2r 1               ; .if .def(SD)
0002B2r 1               ; .include "../../fat16.s"
0002B2r 1               ; .elseif .def(CF_ADDRESS)
0002B2r 1               ; .include "../../fat16.s"
0002B2r 1               ; .endif
0002B2r 1               
0002B2r 1               .include "../../utils.s"
0002B2r 2               ;  print a 16-bit integer
0002B2r 2               ; lsb in x, msb in a
0002B2r 2               
0002B2r 2               .segment "ZEROPAGE": zeropage
00000Cr 2  xx xx        util_tmp: .res 2
00000Er 2               
00000Er 2               .segment "BSS"
00000Dr 2  xx xx        util_tmp_var: .res 2
00000Fr 2  xx xx xx xx  pad: .res 4
000013r 2               
000013r 2               .segment "DATA"
0002B2r 2               
0002B2r 2               print16:
0002B2r 2  8D rr rr         sta acc+1
0002B5r 2  8E rr rr         stx acc
0002B8r 2               
0002B8r 2  A2 04            ldx #4
0002BAr 2               nextdig:
0002BAr 2  20 rr rr         jsr div
0002BDr 2  AD rr rr         lda ext
0002C0r 2  9D rr rr         sta num,x
0002C3r 2  CA               dex
0002C4r 2  10 F4            bpl nextdig
0002C6r 2               
0002C6r 2               firstdig:
0002C6r 2  E8               inx
0002C7r 2  E0 05            cpx #5
0002C9r 2  F0 17            beq print0
0002CBr 2  BD rr rr         lda num,x
0002CEr 2  F0 F6            beq firstdig
0002D0r 2               
0002D0r 2               ptnxtdig:
0002D0r 2  18               clc
0002D1r 2  69 30            adc #'0'
0002D3r 2  20 rr rr         jsr kernel_putc
0002D6r 2  E8               inx
0002D7r 2  E0 05            cpx #5
0002D9r 2  F0 06            beq pt16done
0002DBr 2  BD rr rr         lda num,x
0002DEr 2  4C rr rr         jmp ptnxtdig
0002E1r 2               
0002E1r 2               pt16done:
0002E1r 2  60               rts
0002E2r 2               
0002E2r 2               print0:
0002E2r 2  A9 30            lda #'0'
0002E4r 2  20 rr rr         jsr kernel_putc
0002E7r 2  60               rts
0002E8r 2               
0002E8r 2  00 00 00 00  num: .byte 0,0,0,0,0
0002ECr 2  00           
0002EDr 2               
0002EDr 2               ; 16/16-bit division, from the fridge
0002EDr 2               ; acc/aux -> acc, remainder in ext
0002EDr 2               div:
0002EDr 2  A9 00            lda #0
0002EFr 2  8D rr rr         sta ext+1
0002F2r 2  A0 10            ldy #$10
0002F4r 2               dloop:
0002F4r 2  0E rr rr         asl acc
0002F7r 2  2E rr rr         rol acc+1
0002FAr 2  2A               rol
0002FBr 2  2E rr rr         rol ext+1
0002FEr 2  48               pha
0002FFr 2  CD rr rr         cmp aux
000302r 2  AD rr rr         lda ext+1
000305r 2  ED rr rr         sbc aux+1
000308r 2  90 0B            bcc div2
00030Ar 2  8D rr rr         sta ext+1
00030Dr 2  68               pla
00030Er 2  ED rr rr         sbc aux
000311r 2  48               pha
000312r 2  EE rr rr         inc acc
000315r 2               div2:
000315r 2  68               pla
000316r 2  88               dey
000317r 2  D0 DB            bne dloop
000319r 2  8D rr rr         sta ext
00031Cr 2  60               rts
00031Dr 2               
00031Dr 2  00 00        acc: .word 0
00031Fr 2  0A 00        aux: .word 10 ; constant
000321r 2  00 00        ext: .word 0
000323r 2               
000323r 2               
000323r 2               
000323r 2               calculate_free_mem:
000323r 2                   ; load dictionary address
000323r 2                   ; fill with $55 until ram_end
000323r 2                   ; read and check same
000323r 2                   ; fill again with zeroes
000323r 2               
000323r 2  9C rr rr         stz util_tmp_var
000326r 2  9C rr rr         stz util_tmp_var + 1
000329r 2               
000329r 2  A0 00            ldy #0
00032Br 2               @loop:
00032Br 2  A9 55            lda #$55
00032Dr 2  91 rr            sta (util_tmp), y        ; store to mem address
00032Fr 2  D1 rr            cmp (util_tmp), y        ; compare to what is now there
000331r 2  D0 19            bne @exit               ; no equal, stop couting and exit
000333r 2  A9 00            lda #0                  ; zero the memory again
000335r 2  91 rr            sta (util_tmp), y
000337r 2  EE rr rr         inc util_tmp_var
00033Ar 2  D0 03            bne @incok
00033Cr 2  EE rr rr         inc util_tmp_var + 1
00033Fr 2               @incok:
00033Fr 2  C8               iny
000340r 2  D0 E9            bne @loop
000342r 2  A5 rr            lda util_tmp + 1
000344r 2  C9 80            cmp #>ram_end
000346r 2  B0 04            bcs @exit
000348r 2  E6 rr            inc util_tmp + 1
00034Ar 2  80 DF            bra @loop
00034Cr 2               @exit:
00034Cr 2  60               rts
00034Dr 2               
00034Dr 2               
00034Dr 2               
00034Dr 2               print_message:
00034Dr 2  68           	pla					; get return address from stack
00034Er 2  85 rr        	sta util_tmp
000350r 2  68           	pla
000351r 2  85 rr        	sta util_tmp + 1
000353r 2               
000353r 2  80 03        	bra @inc
000355r 2               @print:
000355r 2  20 rr rr     	jsr kernel_putc
000358r 2               
000358r 2               @inc:
000358r 2  E6 rr        	inc util_tmp
00035Ar 2  D0 02        	bne @inced
00035Cr 2  E6 rr        	inc util_tmp + 1
00035Er 2               @inced:
00035Er 2  B2 rr        	lda (util_tmp)
000360r 2  D0 F3        	bne @print
000362r 2  A5 rr        	lda util_tmp + 1
000364r 2  48           	pha
000365r 2  A5 rr        	lda util_tmp
000367r 2  48           	pha
000368r 2               print_message_end:
000368r 2  60           	rts
000369r 2               
000369r 2               
000369r 2               print_zp_index_string:
000369r 2               @loop:
000369r 2  B1 rr            lda (util_tmp), y
00036Br 2  F0 06            beq @exit
00036Dr 2  20 rr rr         jsr kernel_putc
000370r 2  C8               iny
000371r 2  D0 F6            bne @loop
000373r 2               @exit:
000373r 2  60               rts
000374r 2               
000374r 2               
000374r 2               output_ascii:
000374r 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
000374r 2  48               pha
000375r 2  4A               lsr             ; convert high nibble first
000376r 2  4A               lsr
000377r 2  4A               lsr
000378r 2  4A               lsr
000379r 2  20 rr rr         jsr output_ascii_nibble_to_ascii
00037Cr 2  68               pla
00037Dr 2               
00037Dr 2                   ; fall through to _nibble_to_ascii
00037Dr 2               
00037Dr 2               output_ascii_nibble_to_ascii:
00037Dr 2               ; """Private helper function for byte_to_ascii: Print lower nibble
00037Dr 2               ; of A and and EMIT it. This does the actual work.
00037Dr 2               ; """
00037Dr 2  29 0F            and #$0F
00037Fr 2  09 30            ora #'0'
000381r 2  C9 3A            cmp #$3A        ; '9+1
000383r 2  90 02            bcc @1
000385r 2  69 06            adc #$06
000387r 2               
000387r 2               @1:
000387r 2  20 rr rr         jsr kernel_putc
00038Ar 2  60               rts
00038Br 2               
00038Br 1               
00038Br 1               ; .include "drivers/spi.s"
00038Br 1               ; .include "drivers/sd.s"
00038Br 1               ; .include "drivers/vga.s"
00038Br 1               ; .include "drivers/fat32.s"
00038Br 1               ; .include "drivers/lcd.s"
00038Br 1               
00038Br 1               ; .include "../../ed.s"
00038Br 1               .include "../../forth.s"
00038Br 2               
00038Br 2               
00038Br 2               ; Definitions for Tali Forth 2
00038Br 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00038Br 2               ; First version: 01. Apr 2016 (Liara Forth)
00038Br 2               ; This version: 29. Jan 2020
00038Br 2               
00038Br 2               ; This file is included by taliforth.asm. These are the general
00038Br 2               ; definitions; platform-specific definitions such as the
00038Br 2               ; memory map are kept in the platform folder.
00038Br 2               
00038Br 2               stack0 =    $0100   ; location of the stack
00038Br 2               
00038Br 2               ; User Variables:
00038Br 2               ; Block variables
00038Br 2               blk_offset =  0        ; BLK : UP + 0
00038Br 2               scr_offset =  2        ; SCR : UP + 2
00038Br 2               
00038Br 2               ; Wordlists
00038Br 2               current_offset =  4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
00038Br 2               num_wordlists_offset =  5
00038Br 2                                          ; #WORDLISTS (byte) : UP + 5
00038Br 2               wordlists_offset =  6  ; WORDLISTS (cells) : UP + 6 to UP + 29
00038Br 2                                          ;          (FORTH, EDITOR, ASSEMBLER, ROOT, +8 more)
00038Br 2               num_order_offset =  30 ; #ORDER (byte) : UP + 30
00038Br 2                                          ;          (Number of wordlists in search order)
00038Br 2               search_order_offset =  31
00038Br 2                                          ; SEARCH-ORDER (bytes) : UP + 31 to UP + 39
00038Br 2                                          ; Allowing for 9 to keep offsets even.
00038Br 2               max_wordlists =  12    ; Maximum number of wordlists supported
00038Br 2                                          ; 4 Tali built-ins + 8 user wordlists
00038Br 2               
00038Br 2               ; Buffer variables
00038Br 2               blkbuffer_offset =     40   ; Address of buffer
00038Br 2               buffblocknum_offset =  42   ; Block number current in buffer
00038Br 2               buffstatus_offset =    44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
00038Br 2               
00038Br 2               ; Block I/O vectors
00038Br 2               blockread_offset =     46   ; Vector to block reading routine
00038Br 2               blockwrite_offset =    48   ; Vector to block writing routine
00038Br 2               
00038Br 2               
00038Br 2               ; ASCII CHARACTERS
00038Br 2               AscCC =   $03  ; break (CTRL-c)
00038Br 2               AscBELL = $07  ; bell sound
00038Br 2               AscBS =   $08  ; backspace
00038Br 2               AscLF =   $0a  ; line feed
00038Br 2               AscCR =   $0d  ; carriage return
00038Br 2               AscESC =  $1b  ; escape
00038Br 2               AscSP =   $20  ; space
00038Br 2               AscDEL =  $7f  ; delete (CTRL-h)
00038Br 2               AscCP =   $10  ; CTRL-p (used to recall previous input history)
00038Br 2               AscCN =   $0e  ; CTRL-n (used to recall next input history)
00038Br 2               
00038Br 2               ; DICTIONARY FLAGS
00038Br 2               ; The first three bits are currently unused
00038Br 2               CO = 1  ; Compile Only
00038Br 2               AN = 2  ; Always Native Compile
00038Br 2               IM = 4  ; Immediate Word
00038Br 2               NN = 8  ; Never Native Compile
00038Br 2               UF = 16 ; Includes Underflow Check (RESERVED)
00038Br 2               HC = 32 ; Word has Code Field Area (CFA)
00038Br 2               
00038Br 2               
00038Br 2               ; VARIOUS
00038Br 2               MAX_LINE_LENGTH =   79      ; assumes 80 character lines
00038Br 2               
00038Br 2               ; END
00038Br 2               
00038Br 2               .segment "ZEROPAGE": zeropage
00000Er 2               ; ZERO PAGE ADDRESSES/VARIABLES
00000Er 2               
00000Er 2               ; These are kept at the top of Zero Page, with the most important variables at
00000Er 2               ; the top because the Data Stack grows towards this area from dsp0: If there is
00000Er 2               ; an overflow, the lower, less important variables will be clobbered first,
00000Er 2               ; giving the system a chance to recover. In other words, they are part of the
00000Er 2               ; floodplain.
00000Er 2               
00000Er 2               ; The four variables insrc, cib, ciblen, and toin must stay together in this
00000Er 2               ; sequence for the words INPUT>R and R>INPUT to work correctly.
00000Er 2               
00000Er 2  xx xx        cp: .res 2   ; Compiler Pointer
000010r 2  xx xx        dp: .res 2   ; Dictionary Pointer
000012r 2  xx xx        workword: .res 2   ; nt (not xt!) of word being compiled, except in
000014r 2                                          ; a :NONAME declared word (see status)
000014r 2  xx xx        insrc: .res 2   ; input Source for SOURCE-ID
000016r 2  xx xx        cib: .res 2   ; address of current input buffer
000018r 2  xx xx        ciblen: .res 2  ; length of current input buffer
00001Ar 2  xx xx        toin: .res 2  ; pointer to CIB (>IN in Forth)
00001Cr 2  xx xx        ip: .res 2  ; Instruction Pointer (current xt)
00001Er 2  xx xx        output: .res 2  ; vector for EMIT
000020r 2  xx xx        input: .res 2  ; vector for KEY
000022r 2  xx xx        havekey: .res 2  ; vector for KEY?
000024r 2  xx xx        state: .res 2  ; STATE: -1 compile, 0 interpret
000026r 2  xx xx        base: .res 2  ; number radix, default decimal
000028r 2  xx xx        nc_limit: .res 2  ; limit for Native Compile size
00002Ar 2  xx xx        uf_strip: .res 2  ; flag to strip underflow detection code
00002Cr 2  xx xx        up: .res 2  ; User Pointer (Address of user variables)
00002Er 2  xx xx        status: .res 2  ; internal status information
000030r 2                                          ; (used by : :NONAME ; ACCEPT)
000030r 2                                          ; Bit 7 = Redefined word message postpone
000030r 2                                          ;         When set before calling CREATE, it will
000030r 2                                          ;         not print the "redefined xxxx" message if
000030r 2                                          ;         the word exists. Instead, this bit will
000030r 2                                          ;         be reused and after CREATE has run, it will
000030r 2                                          ;         be set if the word was redefined and 0 if
000030r 2                                          ;         not. This bit should be 0 when not in use.
000030r 2                                          ; Bit 6 = 1 for normal ":" definitions
000030r 2                                          ;         WORKWORD contains nt of word being compiled
000030r 2                                          ;       = 0 for :NONAME definitions
000030r 2                                          ;         WORKWORD contains xt of word being compiled
000030r 2                                          ; Bit 5 = 1 for NUMBER returning a double word
000030r 2                                          ;       = 0 for NUMBER returning a single word
000030r 2                                          ; Bit 3 = 1 makes CTRL-n recall current history
000030r 2                                          ;       = 0 CTRL-n recalls previous history
000030r 2                                          ; Bit 2 = Current history buffer msb
000030r 2                                          ; Bit 1 = Current history buffer (0-7, wraps)
000030r 2                                          ; Bit 0 = Current history buffer lsb
000030r 2                                          ; status+1 is used by ACCEPT to hold history lengths.
000030r 2  xx xx        tmpbranch: .res 2  ; temporary storage for 0BRANCH, BRANCH only
000032r 2  xx xx        tmp1: .res 2  ; temporary storage
000034r 2  xx xx        tmp2: .res 2  ; temporary storage
000036r 2  xx xx        tmp3: .res 2  ; temporary storage (especially for print)
000038r 2  xx xx        tmpdsp: .res 2  ; temporary DSP (X) storage (two bytes)
00003Ar 2  xx xx        tmptos: .res 2  ; temporary TOS storage
00003Cr 2  xx xx        editor1: .res 2  ; temporary for editors
00003Er 2  xx xx        editor2: .res 2  ; temporary for editors
000040r 2  xx xx        editor3: .res 2  ; temporary for editors
000042r 2  xx xx        tohold: .res 2  ; pointer for formatted output
000044r 2  xx xx xx xx  scratch: .res 8  ; 8 byte scratchpad (see UM/MOD)
000048r 2  xx xx xx xx  
00004Cr 2               
00004Cr 2               .segment "DATASTACK": zeropage
000000r 2  xx xx xx xx  dsp_start: .res 127 ; reserve 128 bytes for data stack (64 16 bit cells)
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
00007Fr 2               dsp0:          ; first data stack location. Data stack grows down
00007Fr 2               rsp0:     ; starting stack pointer
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               .segment "BSS"
000013r 2  xx xx xx xx  hist_buff: .res $400
000017r 2  xx xx xx xx  
00001Br 2  xx xx xx xx  
000413r 2  xx xx xx xx  buffer0: .res $100
000417r 2  xx xx xx xx  
00041Br 2  xx xx xx xx  
000513r 2               
000513r 2               .segment "DICTIONARY"   ; the dictionary gets its own segment so that it uses all the space left in RAM
000000r 2  xx xx xx xx  dictionary: .res $1000
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
001000r 2               
001000r 2               cp_end = $7FFF          ; the dictionary ends at RAM end (everything else is before)
001000r 2               
001000r 2               cp0 = dictionary
001000r 2               bsize =     $ff
001000r 2               padoffset = $ff
001000r 2               
001000r 2               
001000r 2               
001000r 2               .segment "DATA"
00038Br 2               
00038Br 2               
00038Br 2               
00038Br 2               forth:
00038Br 2                   .include "native_words.s"     ; Native Forth words. Starts with COLD
00038Br 3               ; Low-level Forth word routines
00038Br 3               ; Tali Forth 2 for the 65c02
00038Br 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00038Br 3               ; First version: 19. Jan 2014
00038Br 3               ; This version: 03. Jan 2018
00038Br 3               
00038Br 3               ; This list is ordered alphabetically by the names of the words, not their
00038Br 3               ; strings (so "!" is sorted as "STORE"). However, we start off with COLD,
00038Br 3               ; ABORT, and QUIT as the natural start sequence. Each word has two special
00038Br 3               ; status lines that begins with "; ## ", which allows auto-generation of the
00038Br 3               ; WORDLIST.md file and other entries in the docs folder. Status entries are:
00038Br 3               
00038Br 3               ;       TBA --> fragment --> coded --> tested --> auto
00038Br 3               
00038Br 3               ; "Auto" means that the word is automatically tested by the test suite (good),
00038Br 3               ; "tested" means that it was tested by hand in some way (okay), "coded" means
00038Br 3               ; it hasn't been tested at all (bad). See the test suite for more details.
00038Br 3               
00038Br 3               ; ## COLD ( -- ) "Reset the Forth system"
00038Br 3               ; ## "cold"  tested  Tali Forth
00038Br 3               ;       """Reset the Forth system. Does not restart the kernel,
00038Br 3               ;       use the 65c02 reset for that. Flows into ABORT.
00038Br 3               ;       """
00038Br 3               xt_cold:
00038Br 3  D8                           cld
00038Cr 3               
00038Cr 3                               ; Set the OUTPUT vector to the default kernel_putc
00038Cr 3                               ; We do this really early so we can print error messages
00038Cr 3                               ; during debugging
00038Cr 3  A9 rr                        lda #<kernel_putc
00038Er 3  85 rr                        sta output
000390r 3  A9 rr                        lda #>kernel_putc
000392r 3  85 rr                        sta output+1
000394r 3               
000394r 3                               ; Load all of the important zero page variables from ROM
000394r 3  A2 21                        ldx #cold_zp_table_end-cold_zp_table-1
000396r 3               
000396r 3               @load_zp_loop:
000396r 3                               ; This loop loads them back to front. We can use X here
000396r 3                               ; because Tali hasn't started using the stack yet.
000396r 3  BD rr rr                     lda cold_zp_table,x
000399r 3  95 rr                        sta cp,x
00039Br 3  CA                           dex
00039Cr 3  D0 F8                        bne @load_zp_loop
00039Er 3               
00039Er 3                               ; Copy the 0th element.
00039Er 3  AD rr rr                     lda cold_zp_table
0003A1r 3  85 rr                        sta cp
0003A3r 3                               ; Initialize 65c02 stack (Return Stack)
0003A3r 3  A2 rr                        ldx #rsp0
0003A5r 3  9A                           txs
0003A6r 3               
0003A6r 3                               ; Clear Data Stack. This is repeated in ABORT, but this way we
0003A6r 3                               ; can load high-level words with EVALUATE
0003A6r 3  A2 rr                        ldx #dsp0
0003A8r 3               
0003A8r 3               
0003A8r 3                               ; Initialize the user variables.
0003A8r 3  A0 31                        ldy #cold_user_table_end-cold_user_table-1
0003AAr 3  A9 00                        lda #0
0003ACr 3               
0003ACr 3               @load_user_vars_loop:
0003ACr 3                               ; Like the zero page variables, these are initialized
0003ACr 3                               ; back to front.
0003ACr 3  B9 rr rr                     lda cold_user_table,y
0003AFr 3  91 rr                        sta (up),y
0003B1r 3  88                           dey
0003B2r 3  D0 F8                        bne @load_user_vars_loop
0003B4r 3               
0003B4r 3                               ; Copy the 0th element.
0003B4r 3  AD rr rr                     lda cold_user_table
0003B7r 3  92 rr                        sta (up)
0003B9r 3  20 rr rr                     jsr xt_cr
0003BCr 3               
0003BCr 3                               ; Define high-level words in forth_words.asm via EVALUATE. If
0003BCr 3                               ; you do not have any high-level words, this part can be
0003BCr 3                               ; commented out.
0003BCr 3  CA                           dex
0003BDr 3  CA                           dex
0003BEr 3  CA                           dex
0003BFr 3  CA                           dex
0003C0r 3               
0003C0r 3               
0003C0r 3                               ; start address goes NOS
0003C0r 3  A9 rr                        lda #<forth_words_start
0003C2r 3  95 02                        sta 2,x
0003C4r 3  A9 rr                        lda #>forth_words_start
0003C6r 3  95 03                        sta 3,x
0003C8r 3               
0003C8r 3                               ; length goes TOS
0003C8r 3  A9 rr                        lda #<forth_words_end
0003CAr 3  38                           sec
0003CBr 3  E9 rr                        sbc #<forth_words_start
0003CDr 3  95 00                        sta 0,x
0003CFr 3               
0003CFr 3  A9 rr                        lda #>forth_words_end
0003D1r 3  E9 rr                        sbc #>forth_words_start
0003D3r 3  95 01                        sta 1,x
0003D5r 3               
0003D5r 3               
0003D5r 3  20 rr rr                     jsr xt_evaluate
0003D8r 3               
0003D8r 3                               ; Now define any user words via EVALUATE. If you do not have
0003D8r 3                               ; any user-defined words, this part can be commented out as
0003D8r 3                               ; well.
0003D8r 3  CA                           dex
0003D9r 3  CA                           dex
0003DAr 3  CA                           dex
0003DBr 3  CA                           dex
0003DCr 3               
0003DCr 3               
0003DCr 3                               ; start address goes NOS
0003DCr 3  A9 rr                        lda #<user_words_start
0003DEr 3  95 02                        sta 2,x
0003E0r 3  A9 rr                        lda #>user_words_start
0003E2r 3  95 03                        sta 3,x
0003E4r 3               
0003E4r 3                               ; length goes TOS
0003E4r 3  A9 rr                        lda #<user_words_end
0003E6r 3  38                           sec
0003E7r 3  E9 rr                        sbc #<user_words_start
0003E9r 3  95 00                        sta 0,x
0003EBr 3               
0003EBr 3  A9 rr                        lda #>user_words_end
0003EDr 3  E9 rr                        sbc #>user_words_start
0003EFr 3  95 01                        sta 1,x
0003F1r 3               
0003F1r 3  20 rr rr                     jsr xt_evaluate
0003F4r 3               
0003F4r 3                               ; Initialize all of the history buffers by putting a zero in
0003F4r 3                               ; each length byte.
0003F4r 3  9C rr rr                     stz hist_buff
0003F7r 3  9C rr rr                     stz hist_buff+$80
0003FAr 3  9C rr rr                     stz hist_buff+$100
0003FDr 3  9C rr rr                     stz hist_buff+$180
000400r 3  9C rr rr                     stz hist_buff+$200
000403r 3  9C rr rr                     stz hist_buff+$280
000406r 3  9C rr rr                     stz hist_buff+$300
000409r 3  9C rr rr                     stz hist_buff+$380
00040Cr 3               
00040Cr 3               
00040Cr 3                               ; fall through to ABORT
00040Cr 3               
00040Cr 3               
00040Cr 3               ; ## ABORT ( -- ) "Reset the Data Stack and restart the CLI"
00040Cr 3               ; ## "abort"  tested  ANS core
00040Cr 3                       ; """https://forth-standard.org/standard/core/ABORT
00040Cr 3                       ; Clear Data Stack and continue into QUIT. We can jump here via
00040Cr 3                       ; subroutine if we want to because we are going to reset the 65c02's
00040Cr 3                       ; stack pointer (the Return Stack) anyway during QUIT. Note we don't
00040Cr 3                       ; actually delete the stuff on the Data Stack.
00040Cr 3                       ; """
00040Cr 3               xt_abort:
00040Cr 3  A2 rr                        ldx #dsp0
00040Er 3               
00040Er 3                               ; fall through to QUIT
00040Er 3               
00040Er 3               
00040Er 3               ; ## QUIT ( -- ) "Reset the input and get new input"
00040Er 3               ; ## "quit"  tested  ANS core
00040Er 3                       ; """https://forth-standard.org/standard/core/QUIT
00040Er 3                       ; Rest the input and start command loop
00040Er 3                       ; """
00040Er 3               
00040Er 3               xt_quit:
00040Er 3                               ; Clear the Return Stack. This is a little screwed up
00040Er 3                               ; because the 65c02 can only set the Return Stack via X,
00040Er 3                               ; which is our Data Stack pointer. The ANS specification
00040Er 3                               ; demands, however, that ABORT reset the Data Stack pointer
00040Er 3  8A                           txa             ; Save the DSP that we just defined
00040Fr 3  A2 rr                        ldx #rsp0
000411r 3  9A                           txs
000412r 3  AA                           tax             ; Restore the DSP. Dude, seriously.
000413r 3               
000413r 3                               ; make sure instruction pointer is empty
000413r 3  64 rr                        stz ip
000415r 3  64 rr                        stz ip+1
000417r 3               
000417r 3                               ; SOURCE-ID is zero (keyboard input)
000417r 3  64 rr                        stz insrc
000419r 3  64 rr                        stz insrc+1
00041Br 3               
00041Br 3                               ; STATE is zero (interpret, not compile)
00041Br 3  64 rr                        stz state
00041Dr 3  64 rr                        stz state+1
00041Fr 3               @get_line:
00041Fr 3  A9 rr                        lda #<buffer0   ; input buffer, this is paranoid
000421r 3  85 rr                        sta cib
000423r 3  A9 rr                        lda #>buffer0
000425r 3  85 rr                        sta cib+1
000427r 3               
000427r 3                               ; Size of current input buffer (CIB) is zero
000427r 3  64 rr                        stz ciblen
000429r 3  64 rr                        stz ciblen+1
00042Br 3               
00042Br 3                               ; Accept a line from the current import source. This is how
00042Br 3                               ; modern Forths to it.
00042Br 3  20 rr rr                     jsr xt_refill           ; ( -- f )
00042Er 3               
00042Er 3                               ; Test flag: LSB of TOS
00042Er 3  B5 00                        lda 0,x
000430r 3  D0 05                        bne @success
000432r 3               
000432r 3                               ; If REFILL returned a FALSE flag, something went wrong and we
000432r 3                               ; need to print an error message and reset the machine. We
000432r 3                               ; don't need to save TOS because we're going to clobber it
000432r 3                               ; anyway when we go back to ABORT.
000432r 3  A9 06                        lda #err_refill
000434r 3  4C rr rr                     jmp error
000437r 3               
000437r 3               @success:
000437r 3                               ; Assume we have successfully accepted a string of input from
000437r 3                               ; a source, with address cib and length of input in ciblen. We
000437r 3                               ; arrive here still with the TRUE flag from REFILL as TOS
000437r 3  E8                           inx                     ; drop
000438r 3  E8                           inx
000439r 3               
000439r 3                               ; Main compile/execute routine
000439r 3  20 rr rr                     jsr interpret
00043Cr 3               
00043Cr 3                               ; Test for Data Stack underflow. Tali Forth does not check for
00043Cr 3                               ; overflow because it is so rare
00043Cr 3  E0 rr                        cpx #dsp0
00043Er 3  F0 05                        beq @stack_ok
000440r 3  90 03                        bcc @stack_ok           ; DSP must always be smaller than DSP0
000442r 3               
000442r 3  4C rr rr                     jmp underflow_error
000445r 3               
000445r 3               @stack_ok:
000445r 3                               ; Display system prompt if all went well. If we're interpreting,
000445r 3                               ; this is " ok", if we're compiling, it's " compiled". Note
000445r 3                               ; space at beginning of the string.
000445r 3  A5 rr                        lda state
000447r 3  F0 02                        beq @print
000449r 3               
000449r 3  A9 01                        lda #1                  ; number for "compile" string
00044Br 3               @print:
00044Br 3  20 rr rr                     jsr print_string
00044Er 3               
00044Er 3                               ; Awesome line, everybody! Now get the next one.
00044Er 3  80 CF                        bra @get_line
000450r 3               
000450r 3               z_cold:
000450r 3               z_abort:
000450r 3               z_quit:         ; no RTS required
000450r 3               
000450r 3               
000450r 3               
000450r 3               ; This table holds all of the initial values for the variables in zero page.
000450r 3               ; This table is used by COLD.
000450r 3               cold_zp_table:
000450r 3  rr rr                .word cp0+256+1024      ; cp moved to make room for user vars and
000452r 3                                               ; block buffer
000452r 3  rr rr                .word dictionary_start  ; dp
000454r 3  00 00                .word 0                 ; workword
000456r 3  00 00                .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
000458r 3  rr rr                .word buffer0           ; cib
00045Ar 3  00 00                .word 0                 ; ciblen
00045Cr 3  00 00                .word 0                 ; toin
00045Er 3  00 00                .word 0                 ; ip
000460r 3  rr rr                .word kernel_putc       ; output
000462r 3  rr rr                .word kernel_getc       ; input
000464r 3  00 00                .word 0                 ; havekey
000466r 3  00 00                .word 0                 ; state (0 = interpret)
000468r 3  0A 00                .word 10                ; base
00046Ar 3  14 00                .word 20                ; nc-limit
00046Cr 3  00 00                .word 0                 ; uf_strip (off by default)
00046Er 3  rr rr                .word cp0               ; up (user vars put right at beginning of
000470r 3                                               ; available RAM)
000470r 3  00 00                .word 0                 ; status
000472r 3               cold_zp_table_end:
000472r 3               
000472r 3               ; No further ZP variables are initialized. The variables past this point are
000472r 3               ; all temporaries.
000472r 3               
000472r 3               ; This table holds the inital values for the user variables. This table is
000472r 3               ; used by COLD.
000472r 3               cold_user_table:
000472r 3  00 00                .word 0                         ; BLK
000474r 3  00 00                .word 0                         ; SCR
000476r 3  00                   .byte 0                         ; CURRENT = FORTH-WORDLIST
000477r 3  04                   .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
000478r 3  rr rr                .word dictionary_start          ; FORTH-WORDLIST
00047Ar 3  rr rr                .word editor_dictionary_start   ; EDITOR-WORDLIST
00047Cr 3  rr rr                .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
00047Er 3  rr rr                .word root_dictionary_start     ; ROOT-WORDLIST
000480r 3  00 00 00 00          .word 0,0,0,0,0,0,0,0           ; User wordlists
000484r 3  00 00 00 00  
000488r 3  00 00 00 00  
000490r 3  01                   .byte 1                         ; #ORDER
000491r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0         ; search-order
000495r 3  00 00 00 00  
000499r 3  00           
00049Ar 3  rr rr                .word cp0+256                   ; Address of buffer (right after USER vars)
00049Cr 3  00 00                .word 0                         ; block in buffer
00049Er 3  00 00                .word 0                         ; buffer status (not in use)
0004A0r 3  rr rr                .word xt_block_word_error       ; block-read vector
0004A2r 3  rr rr                .word xt_block_word_error       ; block-write vector
0004A4r 3               cold_user_table_end:
0004A4r 3               
0004A4r 3               
0004A4r 3               ; ## ABORT_QUOTE ( "string" -- ) "If flag TOS is true, ABORT with message"
0004A4r 3               ; ## "abort""  tested  ANS core
0004A4r 3                       ; """https://forth-standard.org/standard/core/ABORTq
0004A4r 3                       ; Abort and print a string.
0004A4r 3                       ; """
0004A4r 3               
0004A4r 3               xt_abort_quote:
0004A4r 3                               ; save the string
0004A4r 3  20 rr rr                     jsr xt_s_quote          ; S"
0004A7r 3               
0004A7r 3                               ; compile run-time part
0004A7r 3  A0 rr                        ldy #>abort_quote_runtime
0004A9r 3  A9 rr                        lda #<abort_quote_runtime
0004ABr 3  20 rr rr                     jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
0004AEr 3               
0004AEr 3  60           z_abort_quote:  rts
0004AFr 3               
0004AFr 3               
0004AFr 3               abort_quote_runtime:
0004AFr 3                       ; """Runtime aspect of ABORT_QUOTE"""
0004AFr 3               
0004AFr 3                               ; We arrive here with ( f addr u )
0004AFr 3  B5 04                        lda 4,x
0004B1r 3  15 05                        ora 5,x
0004B3r 3  F0 09                        beq @done       ; if FALSE, we're done
0004B5r 3               
0004B5r 3                               ; We're true, so print string and ABORT. We follow Gforth
0004B5r 3                               ; in going to a new line after the string
0004B5r 3  20 rr rr                     jsr xt_type
0004B8r 3  20 rr rr                     jsr xt_cr
0004BBr 3  4C rr rr                     jmp xt_abort    ; not JSR, so never come back
0004BEr 3               @done:
0004BEr 3                               ; Drop three entries from the Data Stack
0004BEr 3  8A                           txa
0004BFr 3  18                           clc
0004C0r 3  69 06                        adc #6
0004C2r 3  AA                           tax
0004C3r 3               
0004C3r 3  60                           rts
0004C4r 3               
0004C4r 3               
0004C4r 3               
0004C4r 3               ; ## ABS ( n -- u ) "Return absolute value of a number"
0004C4r 3               ; ## "abs"  auto  ANS core
0004C4r 3                       ; """https://forth-standard.org/standard/core/ABS
0004C4r 3                       ; Return the absolute value of a number.
0004C4r 3                       ; """
0004C4r 3               
0004C4r 3               xt_abs:
0004C4r 3  20 rr rr                     jsr underflow_1
0004C7r 3               
0004C7r 3  B5 01                        lda 1,x
0004C9r 3  10 0D                        bpl @done       ; positive number, easy money!
0004CBr 3               
0004CBr 3                               ; negative: calculate 0 - n
0004CBr 3  38                           sec
0004CCr 3  A9 00                        lda #0
0004CEr 3  F5 00                        sbc 0,x         ; LSB
0004D0r 3  95 00                        sta 0,x
0004D2r 3               
0004D2r 3  A9 00                        lda #0          ; MSB
0004D4r 3  F5 01                        sbc 1,x
0004D6r 3  95 01                        sta 1,x
0004D8r 3               
0004D8r 3               @done:
0004D8r 3  60           z_abs:          rts
0004D9r 3               
0004D9r 3               
0004D9r 3               
0004D9r 3               ; ## ACCEPT ( addr n -- n ) "Receive a string of characters from the keyboard"
0004D9r 3               ; ## "accept"  auto  ANS core
0004D9r 3                       ; """https://forth-standard.org/standard/core/ACCEPT
0004D9r 3                       ; Receive a string of at most n1 characters, placing them at
0004D9r 3                       ; addr. Return the actual number of characters as n2. Characters
0004D9r 3                       ; are echoed as they are received. ACCEPT is called by REFILL in
0004D9r 3                       ; modern Forths.
0004D9r 3                       ; """
0004D9r 3               
0004D9r 3               xt_accept:
0004D9r 3  20 rr rr                     jsr underflow_2
0004DCr 3               
0004DCr 3                               ; Abort if we were asked to receive 0 chars
0004DCr 3  B5 00                        lda 0,x
0004DEr 3  15 01                        ora 1,x
0004E0r 3  D0 09                        bne @not_zero
0004E2r 3               
0004E2r 3  E8                           inx
0004E3r 3  E8                           inx
0004E4r 3  74 00                        stz 0,x
0004E6r 3  74 01                        stz 1,x
0004E8r 3               
0004E8r 3  4C rr rr                     jmp accept_done
0004EBr 3               
0004EBr 3               @not_zero:
0004EBr 3  B5 00                        lda 0,x         ; number of chars to get in tmp2 ...
0004EDr 3  85 rr                        sta tmp2
0004EFr 3  64 rr                        stz tmp2+1      ; ... but we only accept max 255 chars
0004F1r 3               
0004F1r 3  B5 02                        lda 2,x         ; address of buffer is NOS, to tmp1
0004F3r 3  85 rr                        sta tmp1
0004F5r 3  B5 03                        lda 3,x
0004F7r 3  85 rr                        sta tmp1+1
0004F9r 3               
0004F9r 3  E8                           inx
0004FAr 3  E8                           inx
0004FBr 3               
0004FBr 3  A0 00                        ldy #0
0004FDr 3               
0004FDr 3                               ; Select the next history buffer. Clear bit 3 first (so overflow
0004FDr 3                               ; from bit 2 to 3 is OK)
0004FDr 3  A5 rr                        lda status
0004FFr 3  29 F7                        and #$f7
000501r 3               
000501r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
000501r 3  1A                           inc
000502r 3               
000502r 3                               ; Set bit 3 for detecting if CTRL-n has been pressed the first
000502r 3                               ; time. This bit will be cleared on the first CTRL-n or CTRL-p
000502r 3                               ; received and won't be used to calculate the history buffer
000502r 3                               ; offset.
000502r 3  09 08                        ora #$08
000504r 3  85 rr                        sta status
000506r 3               
000506r 3               accept_loop:
000506r 3                               ; Out of the box, py65mon catches some CTRL sequences such as
000506r 3                               ; CTRL-c. We also don't need to check for CTRL-l because a
000506r 3                               ; vt100 terminal clears the screen automatically.
000506r 3               
000506r 3                               ; This is the internal version of KEY without all the mucking
000506r 3                               ; about with the Data Stack while still using the input vector
000506r 3  20 rr rr                     jsr key_a
000509r 3               
000509r 3                               ; We quit on both line feed and carriage return
000509r 3  C9 0A                        cmp #AscLF
00050Br 3  F0 20                        beq @eol
00050Dr 3  C9 0D                        cmp #AscCR
00050Fr 3  F0 1C                        beq @eol
000511r 3               
000511r 3                               ; BACKSPACE and DEL do the same thing for the moment
000511r 3  C9 08                        cmp #AscBS
000513r 3  F0 22                        beq @backspace
000515r 3  C9 7F                        cmp #AscDEL     ; (CTRL-h)
000517r 3  F0 1E                        beq @backspace
000519r 3               
000519r 3                               ; Check for CTRL-p and CTRL-n to recall input history
000519r 3  C9 10                        cmp #AscCP
00051Br 3  F0 36                        beq @ctrl_p
00051Dr 3  C9 0E                        cmp #AscCN
00051Fr 3  F0 44                        beq @ctrl_n
000521r 3               
000521r 3                               ; That's enough for now. Save and echo character.
000521r 3  91 rr                        sta (tmp1),y
000523r 3  C8                           iny
000524r 3               
000524r 3                               ; EMIT_A sidesteps all the fooling around with the Data Stack
000524r 3  20 rr rr                     jsr emit_a
000527r 3               
000527r 3  C4 rr                        cpy tmp2        ; reached character limit?
000529r 3  D0 DB                        bne accept_loop       ; fall through if buffer limit reached
00052Br 3  80 03                        bra @buffer_full
00052Dr 3               
00052Dr 3               @eol:
00052Dr 3  20 rr rr                     jsr xt_space    ; print final space
000530r 3               
000530r 3               @buffer_full:
000530r 3                               ; REFILL updates ciblen and toin, we don't need to do it here
000530r 3  94 00                        sty 0,x         ; Y contains number of chars accepted already
000532r 3  74 01                        stz 1,x         ; we only accept 256 chars
000534r 3               
000534r 3  4C rr rr                     jmp accept_done
000537r 3               
000537r 3               @backspace:
000537r 3                               ; Handle backspace and delete kex, which currently do the same
000537r 3                               ; thing
000537r 3  C0 00                        cpy #0          ; buffer empty?
000539r 3  D0 06                        bne @1
00053Br 3               
00053Br 3  A9 07                        lda #AscBELL    ; complain and don't delete beyond the start of line
00053Dr 3  20 rr rr                     jsr emit_a
000540r 3  C8                           iny
000541r 3               @1:
000541r 3  88                           dey
000542r 3  A9 08                        lda #AscBS      ; move back one
000544r 3  20 rr rr                     jsr emit_a
000547r 3  A9 20                        lda #AscSP      ; print a space (rubout)
000549r 3  20 rr rr                     jsr emit_a
00054Cr 3  A9 08                        lda #AscBS      ; move back over space
00054Er 3  20 rr rr                     jsr emit_a
000551r 3               
000551r 3  80 B3                        bra accept_loop
000553r 3               
000553r 3               @ctrl_p:
000553r 3                               ; CTRL-p was pressed. Recall the previous input buffer.
000553r 3               
000553r 3                               ; Select the previous buffer
000553r 3  A5 rr                        lda status
000555r 3               
000555r 3                               ; Check for 0 (need to wrap back to 7)
000555r 3  29 07                        and #7
000557r 3  D0 08                        bne @ctrl_p_dec
000559r 3               
000559r 3                               ; We need to wrap back to 7.
000559r 3  A5 rr                        lda status
00055Br 3  09 07                        ora #7
00055Dr 3  85 rr                        sta status
00055Fr 3  80 11                        bra @recall_history
000561r 3               
000561r 3               @ctrl_p_dec:
000561r 3                               ; It's safe to decrement the buffer index directly.
000561r 3  C6 rr                        dec status
000563r 3  80 0D                        bra @recall_history
000565r 3               
000565r 3               @ctrl_n:
000565r 3                               ; CTRL-n was pressed. Recall the next input buffer. Select
000565r 3                               ; the next buffer Check bit 3. If it's set, this is the first
000565r 3                               ; time CTRL-n has been pressed and we should select the CURRENT
000565r 3                               ; history buffer.
000565r 3  A9 08                        lda #$8
000567r 3  24 rr                        bit status
000569r 3  D0 07                        bne @recall_history
00056Br 3               
00056Br 3                               ; This isn't the first time CTRL-n has been pressed, select the
00056Br 3                               ; next history buffer. Clear bit 3 first (so overflow is OK)
00056Br 3  A5 rr                        lda status
00056Dr 3  29 F7                        and #$f7
00056Fr 3               
00056Fr 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
00056Fr 3  1A                           inc
000570r 3               
000570r 3                               ; Bit 3 (if it got set by going from buffer 7 to 0) will
000570r 3                               ; be cleared below.
000570r 3  85 rr                        sta status
000572r 3               
000572r 3                               ; Falls through to @recall_history
000572r 3               
000572r 3               @recall_history:
000572r 3                               ; Clear bit 3 (first time ctrl-n recall) bit in status
000572r 3  A9 08                        lda #%00001000
000574r 3  14 rr                        trb status
000576r 3               
000576r 3  20 rr rr                     jsr total_recall
000579r 3               
000579r 3                               ; tmp3 now has the address of the previous history buffer.
000579r 3                               ; First byte of buffer is length. Clear the line by sending
000579r 3                               ; CR, Y spaces, then CR.
000579r 3  A9 0D                        lda #AscCR
00057Br 3  20 rr rr                     jsr emit_a
00057Er 3               
00057Er 3               input_clear:
00057Er 3  C0 00                        cpy #0
000580r 3  F0 08                        beq input_cleared
000582r 3               
000582r 3  A9 20                        lda #AscSP
000584r 3  20 rr rr                     jsr emit_a
000587r 3  88                           dey
000588r 3  80 F4                        bra input_clear
00058Ar 3               
00058Ar 3               input_cleared:
00058Ar 3  A9 0D                        lda #AscCR
00058Cr 3  20 rr rr                     jsr emit_a
00058Fr 3               
00058Fr 3                               ; Save the history length byte into histinfo+1
00058Fr 3                               ; ldy #0        ; Y is already 0 by clearing the line.
00058Fr 3  B1 rr                        lda (tmp3),y
000591r 3  85 rr                        sta status+1
000593r 3               
000593r 3                               ; Increment the tmp3 pointer so we can use ,y addressing
000593r 3                               ; on both tmp1 (the input buffer) and tmp3 (the history
000593r 3                               ; buffer)
000593r 3  E6 rr                        inc tmp3
000595r 3  D0 02                        bne @2           ; Increment the upper byte on carry.
000597r 3  E6 rr                        inc tmp3+1
000599r 3               @2:
000599r 3                               ; Copy the history buffer into the input buffer,
000599r 3                               ; sending the characters to the output as we go.
000599r 3  A9 0D                        lda #AscCR
00059Br 3  20 rr rr                     jsr emit_a
00059Er 3               
00059Er 3               @history_loop:
00059Er 3                               ; See if we have reached the end of the history buffer.
00059Er 3  C4 rr                        cpy status+1
0005A0r 3  D0 03                        bne @3
0005A2r 3  4C rr rr                     jmp accept_loop       ; Needs a long jump
0005A5r 3               @3:
0005A5r 3                               ; See if we have reached the end of the input buffer.
0005A5r 3                               ; (only comparing to lower byte as we currently limit
0005A5r 3                               ; to 255 characters max)
0005A5r 3  C4 rr                        cpy tmp2
0005A7r 3  F0 0A                        beq @hist_filled_buffer
0005A9r 3               
0005A9r 3                               ; Copy a character and echo.
0005A9r 3  B1 rr                        lda (tmp3),y
0005ABr 3  91 rr                        sta (tmp1),y
0005ADr 3  20 rr rr                     jsr emit_a
0005B0r 3               
0005B0r 3                               ; Move to the next character.
0005B0r 3  C8                           iny
0005B1r 3  80 EB                        bra @history_loop
0005B3r 3               
0005B3r 3               @hist_filled_buffer:
0005B3r 3                               ; We don't want a history recall to EOL our buffer,
0005B3r 3                               ; so back up one character and return to editing.
0005B3r 3  88                           dey
0005B4r 3  4C rr rr                     jmp accept_loop
0005B7r 3               accept_done:
0005B7r 3               @done:
0005B7r 3                               ; Copy the input buffer into the currently
0005B7r 3                               ; selected history buffer.
0005B7r 3  20 rr rr                     jsr total_recall
0005BAr 3  85 rr                        sta status+1
0005BCr 3               
0005BCr 3                               ; Also save it in the first buffer byte.
0005BCr 3  A0 00                        ldy #0
0005BEr 3  91 rr                        sta (tmp3),y
0005C0r 3               
0005C0r 3                               ; Move path the count to the data bytes
0005C0r 3  E6 rr                        inc tmp3
0005C2r 3  D0 02                        bne @4           ; Increment the upper byte on carry.
0005C4r 3  E6 rr                        inc tmp3+1
0005C6r 3               @4:
0005C6r 3                               ; Copy the characters from the input buffer to the
0005C6r 3                               ; history buffer.
0005C6r 3               
0005C6r 3               @save_history_loop:
0005C6r 3  C4 rr                        cpy status+1
0005C8r 3  F0 07                        beq @save_history_done
0005CAr 3               
0005CAr 3  B1 rr                        lda (tmp1),y
0005CCr 3  91 rr                        sta (tmp3),y
0005CEr 3  C8                           iny
0005CFr 3  80 F5                        bra @save_history_loop
0005D1r 3               
0005D1r 3               @save_history_done:
0005D1r 3               z_accept:
0005D1r 3  60                           rts
0005D2r 3               
0005D2r 3               total_recall:
0005D2r 3                       ; """Internal subroutine for ACCEPT that recalls history entry"""
0005D2r 3               
0005D2r 3                               ; Generate the address of the buffer in tmp3. Start with the
0005D2r 3                               ; base address.
0005D2r 3  A9 rr                        lda #<hist_buff
0005D4r 3  85 rr                        sta tmp3
0005D6r 3  A9 rr                        lda #>hist_buff
0005D8r 3  85 rr                        sta tmp3+1
0005DAr 3               
0005DAr 3                               ; This is a bit annoying as some bits go into each byte.
0005DAr 3                               ; .....xxx gets put into address like ......xx x.......
0005DAr 3  A5 rr                        lda status
0005DCr 3  6A                           ror
0005DDr 3  29 03                        and #3
0005DFr 3  18                           clc
0005E0r 3  65 rr                        adc tmp3+1
0005E2r 3  85 rr                        sta tmp3+1
0005E4r 3               
0005E4r 3  A5 rr                        lda status
0005E6r 3  6A                           ror             ; Rotate through carry into msb.
0005E7r 3  6A                           ror
0005E8r 3  29 80                        and #$80
0005EAr 3  18                           clc
0005EBr 3  65 rr                        adc tmp3
0005EDr 3  85 rr                        sta tmp3
0005EFr 3  90 02                        bcc @1           ; Increment the upper byte on carry.
0005F1r 3  E6 rr                        inc tmp3+1
0005F3r 3               @1:
0005F3r 3                               ; Save the current length of the input buffer in
0005F3r 3                               ; histinfo+1 temporarily.  Reduce to 127 if larger.
0005F3r 3  98                           tya
0005F4r 3  C9 80                        cmp #$80
0005F6r 3  90 02                        bcc @2
0005F8r 3  A9 7F                        lda #$7F
0005FAr 3               @2:
0005FAr 3  60                           rts
0005FBr 3               
0005FBr 3               
0005FBr 3               
0005FBr 3               
0005FBr 3               
0005FBr 3               ; ## ACTION_OF ( "name" -- xt ) "Get named deferred word's xt"
0005FBr 3               ; ## "action-of"  auto  ANS core ext
0005FBr 3                       ; """http://forth-standard.org/standard/core/ACTION-OF"""
0005FBr 3               
0005FBr 3               xt_action_of:
0005FBr 3                               ; This is a state aware word with differet behavior
0005FBr 3                               ; when used while compiling vs interpreting.
0005FBr 3                               ; Check STATE
0005FBr 3  A5 rr                        lda state
0005FDr 3  05 rr                        ora state+1
0005FFr 3  F0 0C                        beq @interpreting
000601r 3               
000601r 3               @compiling:
000601r 3                               ; Run ['] to compile the xt of the next word
000601r 3                               ; as a literal.
000601r 3  20 rr rr                     jsr xt_bracket_tick
000604r 3               
000604r 3                               ; Postpone DEFER@ by compiling a JSR to it.
000604r 3  A0 rr                        ldy #>xt_defer_fetch
000606r 3  A9 rr                        lda #<xt_defer_fetch
000608r 3  20 rr rr                     jsr cmpl_subroutine
00060Br 3  80 06                        bra @done
00060Dr 3               
00060Dr 3               @interpreting:
00060Dr 3  20 rr rr                     jsr xt_tick
000610r 3  20 rr rr                     jsr xt_defer_fetch
000613r 3               
000613r 3               @done:
000613r 3  60           z_action_of:           rts
000614r 3               
000614r 3               
000614r 3               
000614r 3               ; ## AGAIN ( addr -- ) "Code backwards branch to address left by BEGIN"
000614r 3               ; ## "again"  tested  ANS core ext
000614r 3                       ; """https://forth-standard.org/standard/core/AGAIN"""
000614r 3               
000614r 3               xt_again:
000614r 3  20 rr rr                     jsr underflow_1
000617r 3               
000617r 3                               ; Add the opcode for a JMP. We use JMP instead of BRA
000617r 3                               ; so we have the range and don't have to calculate the
000617r 3                               ; offset.
000617r 3  A0 00                        ldy #0
000619r 3  A9 4C                        lda #$4C        ; JMP
00061Br 3  91 rr                        sta (cp),y
00061Dr 3  C8                           iny
00061Er 3               
00061Er 3  B5 00                        lda 0,x         ; LSB of address
000620r 3  91 rr                        sta (cp),y
000622r 3  C8                           iny
000623r 3               
000623r 3  B5 01                        lda 1,x         ; MSB of address
000625r 3  91 rr                        sta (cp),y
000627r 3  C8                           iny
000628r 3               
000628r 3                               ; Allot the space we just used
000628r 3  98                           tya
000629r 3  18                           clc
00062Ar 3  65 rr                        adc cp
00062Cr 3  85 rr                        sta cp
00062Er 3  90 02                        bcc @done
000630r 3  E6 rr                        inc cp+1
000632r 3               @done:
000632r 3  E8                           inx
000633r 3  E8                           inx
000634r 3               
000634r 3  60           z_again:        rts
000635r 3               
000635r 3               
000635r 3               
000635r 3               ; ## ALIGN ( -- ) "Make sure CP is aligned on word size"
000635r 3               ; ## "align"  auto  ANS core
000635r 3                       ; """https://forth-standard.org/standard/core/ALIGN
000635r 3                       ; On a 8-bit machine, this does nothing. ALIGNED uses this
000635r 3                       ; routine as well, and also does nothing
000635r 3                       ; """
000635r 3               
000635r 3               ; ## ALIGNED ( addr -- addr ) "Return the first aligned address"
000635r 3               ; ## "aligned"  auto  ANS core
000635r 3                       ; """https://forth-standard.org/standard/core/ALIGNED"""
000635r 3               
000635r 3               xt_align:
000635r 3               xt_aligned:
000635r 3               z_align:
000635r 3  60           z_aligned:      rts             ; stripped out during native compile
000636r 3               
000636r 3               
000636r 3               
000636r 3               ; ## ALLOT ( n -- ) "Reserve or release memory"
000636r 3               ; ## "allot"  auto  ANS core
000636r 3                       ; """https://forth-standard.org/standard/core/ALLOT
000636r 3                       ; Reserve a certain number of bytes (not cells) or release them.
000636r 3                       ; If n = 0, do nothing. If n is negative, release n bytes, but only
000636r 3                       ; to the beginning of the Dictionary. If n is positive (the most
000636r 3                       ; common case), reserve n bytes, but not past the end of the
000636r 3                       ; Dictionary. See http://forth-standard.org/standard/core/ALLOT
000636r 3                       ; """
000636r 3               
000636r 3               xt_allot:
000636r 3  20 rr rr                     jsr underflow_1
000639r 3               
000639r 3                               ; Releasing memory is going to be a very rare operation,
000639r 3                               ; so we check for it at the beginning and try to make
000639r 3                               ; the most common case as fast as possible
000639r 3  B5 01                        lda 1,x
00063Br 3  30 22                        bmi @release
00063Dr 3               
00063Dr 3                               ; Common case: We are reserving memory, not releasing it
00063Dr 3  18                           clc
00063Er 3  A5 rr                        lda cp
000640r 3  75 00                        adc 0,x
000642r 3  85 rr                        sta cp
000644r 3               
000644r 3  A5 rr                        lda cp+1
000646r 3  75 01                        adc 1,x
000648r 3  85 rr                        sta cp+1
00064Ar 3               
00064Ar 3                               ; Wait, did we just grant more space than we have? This is
00064Ar 3                               ; a check we only do here, not for other situations like cmpl_a
00064Ar 3                               ; where smaller amounts are reserved.
00064Ar 3  A0 FF                        ldy #<cp_end
00064Cr 3  C4 rr                        cpy cp
00064Er 3  A9 7F                        lda #>cp_end
000650r 3  E5 rr                        sbc cp+1
000652r 3  B0 48                        bcs @done               ; we're fine.
000654r 3               
000654r 3                               ; Oops, that was too much, we're beyond the end of
000654r 3                               ; legal Dictionary RAM. Reduce to max memory and report
000654r 3                               ; an error
000654r 3  84 rr                        sty cp                  ; still #<cp_end
000656r 3  A9 7F                        lda #>cp_end
000658r 3  85 rr                        sta cp+1
00065Ar 3               
00065Ar 3  A9 00                        lda #err_allot
00065Cr 3  4C rr rr                     jmp error
00065Fr 3               
00065Fr 3               @release:
00065Fr 3                  		; The ANS standard doesn't really say what to do if too much
00065Fr 3                               ; memory is freed ("negatively alloted"). In fact, there isn't
00065Fr 3                               ; even an official test. Gforth is little help either. The good
00065Fr 3                               ; news is, this is going to be a rare case. We want to use as
00065Fr 3                               ; few bytes as possible.
00065Fr 3               
00065Fr 3                               ; What we do is let the user free anything up to the beginning
00065Fr 3                               ; of the RAM area assigned to the Dicionary (CP0), but at
00065Fr 3                               ; their own risk. This means that the Dictionary pointer DP
00065Fr 3                               ; might end up pointing to garbage. However, an attempt to
00065Fr 3                               ; free more than RAM than CP0 will lead to CP being set to CP0,
00065Fr 3                               ; the DP pointing to the last word in RAM (should be DROP) and
00065Fr 3                               ; an error message.
00065Fr 3               
00065Fr 3                               ; We arrive here with ( n ) which is negative. First step,
00065Fr 3                               ; subtract the number TOS from the CP for a new CP
00065Fr 3  CA                           dex
000660r 3  CA                           dex
000661r 3  A5 rr                        lda cp
000663r 3  95 00                        sta 0,x
000665r 3  A5 rr                        lda cp+1
000667r 3  95 01                        sta 1,x
000669r 3               
000669r 3  20 rr rr                     jsr xt_plus                     ; new CP is now TOS
00066Cr 3               
00066Cr 3                               ; Second step, see if we've gone too far. We compare the new
00066Cr 3                               ; CP on TOS (which, if we've really screwed up, might be
00066Cr 3                               ; negative) with CP0. This is a signed comparison
00066Cr 3  CA                           dex
00066Dr 3  CA                           dex                             ; new CP now NOS
00066Er 3  A9 rr                        lda #<cp0
000670r 3  95 00                        sta 0,x
000672r 3  A9 rr                        lda #>cp0
000674r 3  95 01                        sta 1,x                         ; CP0 is TOS
000676r 3               
000676r 3  20 rr rr                     jsr compare_16bit               ; still ( CP CP0 )
000679r 3               
000679r 3                               ; If CP (NOS) is smaller than CP0 (TOS), we're in trouble.
000679r 3                               ; This means we want Z=1 or N=1
000679r 3  F0 17                        beq @nega_done
00067Br 3  30 15                        bmi @nega_done
00067Dr 3               
00067Dr 3                               ; Yep, we're in trouble. Set CP to CP0, set DP to the first
00067Dr 3                               ; word in ROM (should be DROP), and abort with an error
00067Dr 3  A9 rr                        lda #<cp0
00067Fr 3  85 rr                        sta cp
000681r 3  A9 rr                        lda #>cp0
000683r 3  85 rr                        sta cp+1
000685r 3               
000685r 3  A9 rr                        lda #<dictionary_start
000687r 3  85 rr                        sta dp
000689r 3  A9 rr                        lda #>dictionary_start
00068Br 3  85 rr                        sta dp+1
00068Dr 3               
00068Dr 3  A9 0A                        lda #err_negallot
00068Fr 3  4C rr rr                     jmp error
000692r 3               
000692r 3               @nega_done:
000692r 3                               ; Save new CP, which is NOS
000692r 3  B5 02                        lda 2,x
000694r 3  85 rr                        sta cp
000696r 3  B5 03                        lda 3,x
000698r 3  85 rr                        sta cp+1
00069Ar 3               
00069Ar 3  E8                           inx
00069Br 3  E8                           inx                     ; drop through to @done
00069Cr 3               @done:
00069Cr 3  E8                           inx
00069Dr 3  E8                           inx
00069Er 3               z_allot:
00069Er 3  60                           rts
00069Fr 3               
00069Fr 3               
00069Fr 3               
00069Fr 3               ; ## ALLOW_NATIVE ( -- ) "Flag last word to allow native compiling"
00069Fr 3               ; ## "allow-native"  auto  Tali Forth
00069Fr 3               xt_allow_native:
00069Fr 3  20 rr rr                     jsr current_to_dp
0006A2r 3  A0 01                        ldy #1          ; offset for status byte
0006A4r 3  B1 rr                        lda (dp),y
0006A6r 3  29 F5                        and #$ff-NN-AN  ; AN and NN flag is clear.
0006A8r 3  91 rr                        sta (dp),y
0006AAr 3               z_allow_native:
0006AAr 3  60                           rts
0006ABr 3               
0006ABr 3               
0006ABr 3               ; ## ALSO ( -- ) "Make room in the search order for another wordlist"
0006ABr 3               ; ## "also"  auto  ANS search ext
0006ABr 3                       ; """http://forth-standard.org/standard/search/ALSO"""
0006ABr 3               xt_also:
0006ABr 3  20 rr rr                     jsr xt_get_order
0006AEr 3  20 rr rr                     jsr xt_over
0006B1r 3  20 rr rr                     jsr xt_swap
0006B4r 3  20 rr rr                     jsr xt_one_plus
0006B7r 3  20 rr rr                     jsr xt_set_order
0006BAr 3               
0006BAr 3  60           z_also:         rts
0006BBr 3               
0006BBr 3               
0006BBr 3               ; ## ALWAYS_NATIVE ( -- ) "Flag last word as always natively compiled"
0006BBr 3               ; ## "always-native"  auto  Tali Forth
0006BBr 3               xt_always_native:
0006BBr 3  20 rr rr                     jsr current_to_dp
0006BEr 3  A0 01                        ldy #1          ; offset for status byte
0006C0r 3  B1 rr                        lda (dp),y
0006C2r 3  09 02                        ora #AN         ; Make sure AN flag is set
0006C4r 3  29 F7                        and #$ff-NN     ; and NN flag is clear.
0006C6r 3  91 rr                        sta (dp),y
0006C8r 3               z_always_native:
0006C8r 3  60                           rts
0006C9r 3               
0006C9r 3               
0006C9r 3               ; ## AND ( n n -- n ) "Logically AND TOS and NOS"
0006C9r 3               ; ## "and"  auto  ANS core
0006C9r 3                       ; """https://forth-standard.org/standard/core/AND"""
0006C9r 3               xt_and:
0006C9r 3  20 rr rr                     jsr underflow_2
0006CCr 3               
0006CCr 3  B5 00                        lda 0,x
0006CEr 3  35 02                        and 2,x
0006D0r 3  95 02                        sta 2,x
0006D2r 3               
0006D2r 3  B5 01                        lda 1,x
0006D4r 3  35 03                        and 3,x
0006D6r 3  95 03                        sta 3,x
0006D8r 3               
0006D8r 3  E8                           inx
0006D9r 3  E8                           inx
0006DAr 3               
0006DAr 3  60           z_and:          rts
0006DBr 3               
0006DBr 3               
0006DBr 3               ; ## ASSEMBLER_WORDLIST ( -- u ) "WID for the Assembler wordlist"
0006DBr 3               ; ## "assembler-wordlist"  tested  Tali Assembler
0006DBr 3                       ; """ Commonly used like `assembler-wordlist >order` to add the
0006DBr 3                       ; assembler words to the search order so they can be used.
0006DBr 3                       ; See the tutorial on Wordlists and the Search Order for
0006DBr 3                       ; more information.
0006DBr 3                       ;
0006DBr 3                       ; This is a dummy entry, the code is shared with TWO
0006DBr 3                       ; """
0006DBr 3               
0006DBr 3               
0006DBr 3               ; ## AT_XY ( n m -- ) "Move cursor to position given"
0006DBr 3               ; ## "at-xy"  tested  ANS facility
0006DBr 3                       ; """https://forth-standard.org/standard/facility/AT-XY
0006DBr 3                       ; On an ANSI compatible terminal, place cursor at row n colum m.
0006DBr 3                       ; ANSI code is ESC[<n>;<m>H
0006DBr 3                       ;
0006DBr 3                       ; Do not use U. to print the numbers because the
0006DBr 3                       ; trailing space will not work with xterm
0006DBr 3                       ; """
0006DBr 3               xt_at_xy:
0006DBr 3  20 rr rr                     jsr underflow_2
0006DEr 3               
0006DEr 3  A9 1B                        lda #AscESC
0006E0r 3  20 rr rr                     jsr emit_a
0006E3r 3  A9 5B                        lda #$5B        ; ASCII for "["
0006E5r 3  20 rr rr                     jsr emit_a
0006E8r 3  20 rr rr                     jsr print_u
0006EBr 3  A9 3B                        lda #$3B        ; ASCII for ";"
0006EDr 3  20 rr rr                     jsr emit_a
0006F0r 3  20 rr rr                     jsr print_u
0006F3r 3  A9 48                        lda #'H'
0006F5r 3  20 rr rr                     jsr emit_a
0006F8r 3               
0006F8r 3  60           z_at_xy:        rts
0006F9r 3               
0006F9r 3               
0006F9r 3               ; ## BACKSLASH ( -- ) "Ignore rest of line"
0006F9r 3               ; ## "\"  auto  ANS core ext
0006F9r 3                       ; """https://forth-standard.org/standard/core/bs"""
0006F9r 3               xt_backslash:
0006F9r 3  A5 rr                        lda ciblen
0006FBr 3  85 rr                        sta toin
0006FDr 3  A5 rr                        lda ciblen+1
0006FFr 3  85 rr                        sta toin+1
000701r 3               
000701r 3  60           z_backslash:    rts
000702r 3               
000702r 3               
000702r 3               ; ## BASE ( -- addr ) "Push address of radix base to stack"
000702r 3               ; ## "base"  auto  ANS core
000702r 3                       ; """https://forth-standard.org/standard/core/BASE
000702r 3                       ; The ANS Forth standard sees the base up to 36, so we can cheat and
000702r 3                       ; ingore the MSB
000702r 3                       ; """
000702r 3               xt_base:
000702r 3  CA                           dex
000703r 3  CA                           dex
000704r 3  A9 rr                        lda #<base
000706r 3  95 00                        sta 0,x         ; LSB
000708r 3  74 01                        stz 1,x         ; MSB is always 0
00070Ar 3               
00070Ar 3  60           z_base:         rts
00070Br 3               
00070Br 3               
00070Br 3               ; ## BEGIN ( -- addr ) "Mark entry point for loop"
00070Br 3               ; ## "begin"  auto  ANS core
00070Br 3                       ; """https://forth-standard.org/standard/core/BEGIN
00070Br 3                       ;
00070Br 3                       ; This is just an immediate version of here which could just
00070Br 3                       ; as well be coded in Forth as
00070Br 3                       ;       : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
00070Br 3                       ; Since this is a compiling word, we don't care that much about
00070Br 3                       ; about speed
00070Br 3                       ; """
00070Br 3               
00070Br 3               xt_begin:
00070Br 3  20 rr rr                     jsr xt_here
00070Er 3  60           z_begin:        rts
00070Fr 3               
00070Fr 3               
00070Fr 3               
00070Fr 3               ; ## BELL ( -- ) "Emit ASCII BELL"
00070Fr 3               ; ## "bell"  tested  Tali Forth
00070Fr 3               xt_bell:
00070Fr 3  A9 07                        lda #7          ; ASCII value for BELl
000711r 3  20 rr rr                     jsr emit_a
000714r 3               
000714r 3  60           z_bell:         rts
000715r 3               
000715r 3               
000715r 3               ; ## BL ( -- c ) "Push ASCII value of SPACE to stack"
000715r 3               ; ## "bl"  auto  ANS core
000715r 3                       ; """https://forth-standard.org/standard/core/BL"""
000715r 3               
000715r 3               xt_bl:
000715r 3  CA                           dex
000716r 3  CA                           dex
000717r 3  A9 20                        lda #AscSP
000719r 3  95 00                        sta 0,x
00071Br 3  74 01                        stz 1,x
00071Dr 3               
00071Dr 3  60           z_bl:           rts
00071Er 3               
00071Er 3               
00071Er 3               ; ## BLK ( -- addr ) "Push address of block being interpreted"
00071Er 3               ; ## "block"  auto  ANS block
00071Er 3                       ; """https://forth-standard.org/standard/block/BLK"""
00071Er 3               xt_blk:
00071Er 3                               ; BLK is at UP + blk_offset
00071Er 3  CA                           dex
00071Fr 3  CA                           dex
000720r 3  18                           clc
000721r 3  A5 rr                        lda up
000723r 3  69 00                        adc #blk_offset ; Add offset
000725r 3  95 00                        sta 0,x
000727r 3  A5 rr                        lda up+1
000729r 3  69 00                        adc #0          ; Adding carry
00072Br 3  95 01                        sta 1,x
00072Dr 3               
00072Dr 3  60           z_blk:          rts
00072Er 3               
00072Er 3               
00072Er 3               ; ## BLKBUFFER ( -- addr ) "Push address of block buffer"
00072Er 3               ; ## "blkbuffer"  auto  Tali block
00072Er 3               xt_blkbuffer:
00072Er 3                               ; blkbuffer address is at UP + blkbuffer_offset.
00072Er 3                               ; Unlike some of the other user variables, we actually
00072Er 3                               ; want to push the address stored here, which will
00072Er 3                               ; point to somewhere outside of the user variables.
00072Er 3  CA                           dex
00072Fr 3  CA                           dex
000730r 3                               ; Put the address on the stack.
000730r 3  A0 28                        ldy #blkbuffer_offset
000732r 3  B1 rr                        lda (up),y
000734r 3  95 00                        sta 0,x
000736r 3  C8                           iny             ; Move along to the next byte
000737r 3  B1 rr                        lda (up),y
000739r 3  95 01                        sta 1,x
00073Br 3               
00073Br 3  60           z_blkbuffer:    rts
00073Cr 3               
00073Cr 3               
00073Cr 3               ; ## BLOCK ( u -- a-addr ) "Fetch a block into a buffer"
00073Cr 3               ; ## "block"  auto  ANS block
00073Cr 3                       ; """https://forth-standard.org/standard/block/BLOCK"""
00073Cr 3               
00073Cr 3               xt_block:
00073Cr 3               
00073Cr 3                               ; See if the block requested is the same as the one we
00073Cr 3                               ; currently have in the buffer. Check the LSB.
00073Cr 3  A0 2A                        ldy #buffblocknum_offset
00073Er 3  B1 rr                        lda (up),y
000740r 3  D5 00                        cmp 0,x
000742r 3  D0 0F                        bne @not_in_buffer
000744r 3               
000744r 3                               ; Check the MSB.
000744r 3  C8                           iny
000745r 3  B1 rr                        lda (up),y
000747r 3  D5 01                        cmp 1,x
000749r 3  D0 08                        bne @not_in_buffer
00074Br 3               
00074Br 3                               ; The block is in the buffer. See if the buffer is in use.
00074Br 3  A0 2C                        ldy #buffstatus_offset
00074Dr 3  B1 rr                        lda (up),y
00074Fr 3  29 01                        and #1          ; Check the in-use flag (bit 0)
000751r 3  D0 30                        bne @done       ; It's already in the buffer and in use.
000753r 3                                               ; @done will replace the block# with the
000753r 3                                               ; buffer address.
000753r 3               @not_in_buffer:
000753r 3                               ; Check the buffer status
000753r 3  A0 2C                        ldy #buffstatus_offset
000755r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
000757r 3  C9 03                        cmp #3          ; LSB is needed.
000759r 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
00075Br 3               
00075Br 3                               ; We need to save the block.
00075Br 3  20 rr rr                     jsr xt_blkbuffer
00075Er 3  20 rr rr                     jsr xt_buffblocknum
000761r 3  20 rr rr                     jsr xt_fetch
000764r 3  20 rr rr                     jsr xt_block_write
000767r 3               
000767r 3               @buffer_available:
000767r 3                               ; Save the block number.
000767r 3  A0 2A                        ldy #buffblocknum_offset
000769r 3  B5 00                        lda 0,x
00076Br 3  91 rr                        sta (up),y
00076Dr 3  C8                           iny
00076Er 3  B5 01                        lda 1,x
000770r 3  91 rr                        sta (up),y
000772r 3               
000772r 3                               ; Get the requested block.
000772r 3  20 rr rr                     jsr xt_blkbuffer
000775r 3  20 rr rr                     jsr xt_swap
000778r 3  20 rr rr                     jsr xt_block_read
00077Br 3               
00077Br 3                               ; Mark the buffer as clean and in-use.
00077Br 3  A9 01                        lda #1
00077Dr 3  A0 2C                        ldy #buffstatus_offset
00077Fr 3  91 rr                        sta (up),y
000781r 3               
000781r 3                               ; Make room on the stack for the return address.
000781r 3  CA                           dex
000782r 3  CA                           dex
000783r 3               
000783r 3               @done:
000783r 3                               ; It's in the buffer. Return the buffer address.
000783r 3  A0 28                        ldy #blkbuffer_offset
000785r 3  B1 rr                        lda (up),y
000787r 3  95 00                        sta 0,x
000789r 3  C8                           iny
00078Ar 3  B1 rr                        lda (up),y
00078Cr 3  95 01                        sta 1,x
00078Er 3               
00078Er 3  60           z_block:        rts
00078Fr 3               
00078Fr 3               
00078Fr 3               
00078Fr 3               ; ## BLOCK_RAMDRIVE_INIT ( u -- ) "Create a ramdrive for blocks"
00078Fr 3               ; ## "block-ramdrive-init"  auto  Tali block
00078Fr 3                       ; """Create a RAM drive, with the given number of
00078Fr 3                       ; blocks, in the dictionary along with setting up the block words to
00078Fr 3                       ; use it.  The read/write routines do not provide bounds checking.
00078Fr 3                       ; Expected use: `4 block-ramdrive-init` ( to create blocks 0-3 )
00078Fr 3                       ; """
00078Fr 3               
00078Fr 3               xt_block_ramdrive_init:
00078Fr 3  20 rr rr                     jsr underflow_1
000792r 3               
000792r 3                               ; Store the string to run here as a string literal.
000792r 3                               ; See SLITERAL for the format information. This way, we
000792r 3                               ; don't have the words defined below in the Dictionary until
000792r 3                               ; we really use them.
000792r 3  4C rr rr                     jmp @after_ramdrive_code
000795r 3               
000795r 3               @ramdrive_code:
000795r 3  62 61 73 65          .byte "base @ swap decimal"
000799r 3  20 40 20 73  
00079Dr 3  77 61 70 20  
0007A8r 3  20 31 30 32          .byte " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
0007ACr 3  34 20 2A     
0007AFr 3  20 64 75 70          .byte " dup"    ; ( Save a copy for formatting it at the end )
0007B3r 3  20 62 75 66          .byte " buffer: ramdrive" ; ( Create ramdrive )
0007B7r 3  66 65 72 3A  
0007BBr 3  20 72 61 6D  
0007C4r 3                       ; ( These routines just copy between the buffer and the ramdrive blocks )
0007C4r 3  20 3A 20 62          .byte " : block-read-ramdrive"  ; ( addr u -- )
0007C8r 3  6C 6F 63 6B  
0007CCr 3  2D 72 65 61  
0007DAr 3  20 72 61 6D          .byte " ramdrive swap 1024 * + swap 1024 move ;"
0007DEr 3  64 72 69 76  
0007E2r 3  65 20 73 77  
000802r 3  20 3A 20 62          .byte " : block-write-ramdrive" ; ( addr u -- )
000806r 3  6C 6F 63 6B  
00080Ar 3  2D 77 72 69  
000819r 3  20 72 61 6D          .byte " ramdrive swap 1024 * + 1024 move ;"
00081Dr 3  64 72 69 76  
000821r 3  65 20 73 77  
00083Cr 3  20 27 20 62          .byte " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
000840r 3  6C 6F 63 6B  
000844r 3  2D 72 65 61  
000866r 3  20 27 20 62          .byte " ' block-write-ramdrive block-write-vector !"
00086Ar 3  6C 6F 63 6B  
00086Er 3  2D 77 72 69  
000892r 3  20 72 61 6D          .byte " ramdrive swap blank base !"
000896r 3  64 72 69 76  
00089Ar 3  65 20 73 77  
0008ADr 3               
0008ADr 3               @after_ramdrive_code:
0008ADr 3  20 rr rr                     jsr sliteral_runtime
0008B0r 3               
0008B0r 3  rr rr 18 01  .word @ramdrive_code, @after_ramdrive_code-@ramdrive_code
0008B4r 3               
0008B4r 3                               ; The address and length of the ramdrive code is now on the
0008B4r 3                               ; stack. Call EVALUATE to run it.
0008B4r 3  20 rr rr                     jsr xt_evaluate
0008B7r 3               
0008B7r 3               z_block_ramdrive_init:
0008B7r 3  60                           rts
0008B8r 3               
0008B8r 3               
0008B8r 3               
0008B8r 3               ; ## BLOCK_READ ( addr u -- ) "Read a block from storage (deferred word)"
0008B8r 3               ; ## "block-read"  auto  Tali block
0008B8r 3                       ; """BLOCK-READ is a vectored word that the user needs to override
0008B8r 3                       ; with their own version to read a block from storage.
0008B8r 3                       ; The stack parameters are ( buffer_address block# -- ).
0008B8r 3                       ; """
0008B8r 3               xt_block_read:
0008B8r 3                               ; Execute the BLOCK-READ-VECTOR
0008B8r 3  A0 2E                        ldy #blockread_offset
0008BAr 3  B1 rr                        lda (up),y
0008BCr 3  85 rr                        sta tmp1
0008BEr 3  C8                           iny
0008BFr 3  B1 rr                        lda (up),y
0008C1r 3  85 rr                        sta tmp1+1
0008C3r 3               
0008C3r 3  6C rr rr                     jmp (tmp1)
0008C6r 3               
0008C6r 3               z_block_read:   ; No RTS needed
0008C6r 3               
0008C6r 3               
0008C6r 3               ; ## BLOCK_READ_VECTOR ( -- addr ) "Address of the block-read vector"
0008C6r 3               ; ## "block-read-vector"  auto  Tali block
0008C6r 3                       ; """BLOCK-READ is a vectored word that the user needs to override
0008C6r 3                       ; with their own version to read a block from storage.
0008C6r 3                       ; This word gives the address of the vector so it can be replaced.
0008C6r 3                       ; """
0008C6r 3               xt_block_read_vector:
0008C6r 3                               ; Get the BLOCK-READ-VECTOR address
0008C6r 3  CA                           dex
0008C7r 3  CA                           dex
0008C8r 3  18                           clc
0008C9r 3  A5 rr                        lda up
0008CBr 3  69 2E                        adc #blockread_offset
0008CDr 3  95 00                        sta 0,x
0008CFr 3  A5 rr                        lda up+1
0008D1r 3  69 00                        adc #0          ; Add carry
0008D3r 3  95 01                        sta 1,x
0008D5r 3               
0008D5r 3               z_block_read_vector:
0008D5r 3  60                           rts
0008D6r 3               
0008D6r 3               
0008D6r 3               ; This is the default error message the vectored words BLOCK-READ and
0008D6r 3               ; BLOCK-WRITE start with. This word is not included in the dictionary.
0008D6r 3               xt_block_word_error:
0008D6r 3  A9 0C                        lda #err_blockwords
0008D8r 3  4C rr rr                     jmp error       ; no RTS needed
0008DBr 3               z_block_word_error:
0008DBr 3               
0008DBr 3               ; ## BLOCK_WRITE ( addr u -- ) "Write a block to storage (deferred word)"
0008DBr 3               ; ## "block-write"  auto  Tali block
0008DBr 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
0008DBr 3                       ; with their own version to write a block to storage.
0008DBr 3                       ; The stack parameters are ( buffer_address block# -- ).
0008DBr 3                       ; """
0008DBr 3               xt_block_write:
0008DBr 3                               ; Execute the BLOCK-READ-VECTOR
0008DBr 3  A0 30                        ldy #blockwrite_offset
0008DDr 3  B1 rr                        lda (up),y
0008DFr 3  85 rr                        sta tmp1
0008E1r 3  C8                           iny
0008E2r 3  B1 rr                        lda (up),y
0008E4r 3  85 rr                        sta tmp1+1
0008E6r 3  6C rr rr                     jmp (tmp1)
0008E9r 3               
0008E9r 3               z_block_write:  ; No RTS needed
0008E9r 3               
0008E9r 3               
0008E9r 3               ; ## BLOCK_WRITE_VECTOR ( -- addr ) "Address of the block-write vector"
0008E9r 3               ; ## "block-write-vector"  auto  Tali block
0008E9r 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
0008E9r 3                       ; with their own version to write a block to storage.
0008E9r 3                       ; This word gives the address of the vector so it can be replaced.
0008E9r 3                       ; """
0008E9r 3               xt_block_write_vector:
0008E9r 3                               ; Get the BLOCK-WRITE-VECTOR address
0008E9r 3  CA                           dex
0008EAr 3  CA                           dex
0008EBr 3  18                           clc
0008ECr 3  A5 rr                        lda up
0008EEr 3  69 30                        adc #blockwrite_offset
0008F0r 3  95 00                        sta 0,x
0008F2r 3  A5 rr                        lda up+1
0008F4r 3  69 00                        adc #0          ; Add carry
0008F6r 3  95 01                        sta 1,x
0008F8r 3               
0008F8r 3               z_block_write_vector:
0008F8r 3  60                           rts
0008F9r 3               
0008F9r 3               
0008F9r 3               ; ## BOUNDS ( addr u -- addr+u addr ) "Prepare address for looping"
0008F9r 3               ; ## "bounds"  auto  Gforth
0008F9r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Memory-Blocks.html
0008F9r 3                       ; Given a string, return the correct Data Stack parameters for
0008F9r 3                       ; a DO/LOOP loop over its characters. This is realized as
0008F9r 3                       ; OVER + SWAP in Forth, but we do it a lot faster in assembler
0008F9r 3                       ; """
0008F9r 3               xt_bounds:
0008F9r 3  20 rr rr                     jsr underflow_2
0008FCr 3               
0008FCr 3  18                           clc
0008FDr 3  B5 00                        lda 0,x                 ; LSB u
0008FFr 3  B4 02                        ldy 2,x                 ; LSB addr
000901r 3  75 02                        adc 2,x
000903r 3  95 02                        sta 2,x                 ; LSB addr+u
000905r 3  94 00                        sty 0,x
000907r 3               
000907r 3  B5 01                        lda 1,x                 ; MSB u
000909r 3  B4 03                        ldy 3,x                 ; MSB addr
00090Br 3  75 03                        adc 3,x
00090Dr 3  95 03                        sta 3,x                 ; MSB addr+u
00090Fr 3  94 01                        sty 1,x
000911r 3               
000911r 3  60           z_bounds:       rts
000912r 3               
000912r 3               
000912r 3               ; ## BRACKET_CHAR ( "c" -- ) "Compile character"
000912r 3               ; ## "[char]"  auto  ANS core
000912r 3                       ; """https://forth-standard.org/standard/core/BracketCHAR
000912r 3                       ; Compile the ASCII value of a character as a literal. This is an
000912r 3                       ; immediate, compile-only word.
000912r 3                       ;
000912r 3                       ; A definition given in
000912r 3                       ; http://forth-standard.org/standard/implement is
000912r 3                       ; : [CHAR]  CHAR POSTPONE LITERAL ; IMMEDIATE
000912r 3                       ; """
000912r 3               xt_bracket_char:
000912r 3  20 rr rr                     jsr xt_char
000915r 3  20 rr rr                     jsr xt_literal
000918r 3  60           z_bracket_char: rts
000919r 3               
000919r 3               
000919r 3               ; ## BRACKET_TICK ( -- ) "Store xt of following word during compilation"
000919r 3               ; ## "[']"  auto  ANS core
000919r 3                       ; """https://forth-standard.org/standard/core/BracketTick"""
000919r 3               xt_bracket_tick:
000919r 3  20 rr rr                     jsr xt_tick
00091Cr 3  20 rr rr                     jsr xt_literal
00091Fr 3  60           z_bracket_tick: rts
000920r 3               
000920r 3               
000920r 3               ; ## BUFFBLOCKNUM ( -- addr ) "Push address of variable holding block in buffer"
000920r 3               ; ## "buffblocknum"  auto  Tali block
000920r 3               xt_buffblocknum:
000920r 3                               ; BUFFBLOCKNUM is at UP + buffblocknum_offset
000920r 3  CA                           dex
000921r 3  CA                           dex
000922r 3  18                           clc
000923r 3  A5 rr                        lda up
000925r 3  69 2A                        adc #buffblocknum_offset        ; Add offset
000927r 3  95 00                        sta 0,x
000929r 3  A5 rr                        lda up+1
00092Br 3  69 00                        adc #0                          ; Adding carry
00092Dr 3  95 01                        sta 1,x
00092Fr 3               
00092Fr 3  60           z_buffblocknum: rts
000930r 3               
000930r 3               
000930r 3               ; ## BUFFER ( u -- a-addr ) "Get a buffer for a block"
000930r 3               ; ## "buffer"  auto  ANS block
000930r 3                       ; """https://forth-standard.org/standard/block/BUFFER"""
000930r 3               
000930r 3               xt_buffer:
000930r 3                               ; Check the buffer status
000930r 3  A0 2C                        ldy #buffstatus_offset
000932r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
000934r 3  C9 03                        cmp #3          ; LSB is needed.
000936r 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
000938r 3               
000938r 3                               ; We need to save the block.
000938r 3  20 rr rr                     jsr xt_blkbuffer
00093Br 3  20 rr rr                     jsr xt_buffblocknum
00093Er 3  20 rr rr                     jsr xt_fetch
000941r 3  20 rr rr                     jsr xt_block_write
000944r 3               
000944r 3               @buffer_available:
000944r 3                               ; Save the block number.
000944r 3  A0 2A                        ldy #buffblocknum_offset
000946r 3  B5 00                        lda 0,x
000948r 3  91 rr                        sta (up),y
00094Ar 3  C8                           iny
00094Br 3  B5 01                        lda 1,x
00094Dr 3  91 rr                        sta (up),y
00094Fr 3               
00094Fr 3                               ; Mark the buffer as clean and in-use.
00094Fr 3  A9 01                        lda #1
000951r 3  A0 2C                        ldy #buffstatus_offset
000953r 3  91 rr                        sta (up),y
000955r 3               
000955r 3               @done:
000955r 3                               ; Return the buffer address.
000955r 3  A0 28                        ldy #blkbuffer_offset
000957r 3  B1 rr                        lda (up),y
000959r 3  95 00                        sta 0,x
00095Br 3  C8                           iny
00095Cr 3  B1 rr                        lda (up),y
00095Er 3  95 01                        sta 1,x
000960r 3               
000960r 3  60           z_buffer:       rts
000961r 3               
000961r 3               
000961r 3               
000961r 3               ; ## BUFFER_COLON ( u "<name>" -- ; -- addr ) "Create an uninitialized buffer"
000961r 3               ; ## "buffer:"  auto  ANS core ext
000961r 3                               ; """https://forth-standard.org/standard/core/BUFFERColon
000961r 3                               ; Create a buffer of size u that puts its address on the stack
000961r 3                               ; when its name is used.
000961r 3                               ; """
000961r 3               xt_buffer_colon:
000961r 3  20 rr rr                     jsr xt_create
000964r 3  20 rr rr                     jsr xt_allot
000967r 3  60           z_buffer_colon: rts
000968r 3               
000968r 3               
000968r 3               ; ## BUFFSTATUS ( -- addr ) "Push address of variable holding buffer status"
000968r 3               ; ## "buffstatus"  auto  Tali block
000968r 3               xt_buffstatus:
000968r 3                               ; BUFFSTATUS is at UP + buffstatus_offset
000968r 3  CA                           dex
000969r 3  CA                           dex
00096Ar 3  18                           clc
00096Br 3  A5 rr                        lda up
00096Dr 3  69 2C                        adc #buffstatus_offset  ; Add offset
00096Fr 3  95 00                        sta 0,x
000971r 3  A5 rr                        lda up+1
000973r 3  69 00                        adc #0                  ; Adding carry
000975r 3  95 01                        sta 1,x
000977r 3               
000977r 3  60           z_buffstatus:   rts
000978r 3               
000978r 3               
000978r 3               ; ## BYE ( -- ) "Break"
000978r 3               ; ## "bye"  tested  ANS tools ext
000978r 3                       ; """https://forth-standard.org/standard/tools/BYE"""
000978r 3               
000978r 3               xt_bye:
000978r 3                               ;brk
000978r 3  4C rr rr                     jmp platform_bye
00097Br 3               z_bye:          ;rts             ; never reached
00097Br 3               
00097Br 3               
00097Br 3               
00097Br 3               ; ## C_COMMA ( c -- ) "Store one byte/char in the Dictionary"
00097Br 3               ; ## "c,"  auto  ANS core
00097Br 3                       ; """https://forth-standard.org/standard/core/CComma"""
00097Br 3               
00097Br 3               xt_c_comma:
00097Br 3  20 rr rr                     jsr underflow_1
00097Er 3               
00097Er 3  B5 00                        lda 0,x
000980r 3  20 rr rr                     jsr cmpl_a
000983r 3               
000983r 3  E8                           inx
000984r 3  E8                           inx
000985r 3               
000985r 3  60           z_c_comma:      rts
000986r 3               
000986r 3               
000986r 3               
000986r 3               ; ## C_FETCH ( addr -- c ) "Get a character/byte from given address"
000986r 3               ; ## "c@"  auto  ANS core
000986r 3                       ; """https://forth-standard.org/standard/core/CFetch"""
000986r 3               xt_c_fetch:
000986r 3  20 rr rr                     jsr underflow_1
000989r 3               
000989r 3  A1 00                        lda (0,x)
00098Br 3  95 00                        sta 0,x
00098Dr 3  74 01                        stz 1,x         ; Ignore LSB
00098Fr 3               
00098Fr 3  60           z_c_fetch:      rts
000990r 3               
000990r 3               
000990r 3               ; ## C_STORE ( c addr -- ) "Store character at address given"
000990r 3               ; ## "c!"  auto  ANS core
000990r 3                       ; """https://forth-standard.org/standard/core/CStore"""
000990r 3               xt_c_store:
000990r 3  20 rr rr                     jsr underflow_2
000993r 3               
000993r 3  B5 02                        lda 2,x
000995r 3  81 00                        sta (0,x)
000997r 3               
000997r 3  E8                           inx
000998r 3  E8                           inx
000999r 3  E8                           inx
00099Ar 3  E8                           inx
00099Br 3               
00099Br 3  60           z_c_store:      rts
00099Cr 3               
00099Cr 3               
00099Cr 3               ; ## CASE (C: -- 0) ( -- ) "Conditional flow control"
00099Cr 3               ; ## "case"  auto  ANS core ext
00099Cr 3                       ; """http://forth-standard.org/standard/core/CASE
00099Cr 3                       ;
00099Cr 3                       ; This is a dummy header, CASE shares the actual code with ZERO.
00099Cr 3                       ; """
00099Cr 3               
00099Cr 3               
00099Cr 3               ; ## CELL_PLUS ( u -- u ) "Add cell size in bytes"
00099Cr 3               ; ## "cell+"  auto  ANS core
00099Cr 3                       ; """https://forth-standard.org/standard/core/CELLPlus
00099Cr 3                       ; Add the number of bytes ("address units") that one cell needs.
00099Cr 3                       ; Since this is an 8 bit machine with 16 bit cells, we add two bytes.
00099Cr 3                       ; """
00099Cr 3               
00099Cr 3               xt_cell_plus:
00099Cr 3  20 rr rr                     jsr underflow_1
00099Fr 3               
00099Fr 3  F6 00                        inc 0,x
0009A1r 3  D0 02                        bne @1
0009A3r 3  F6 01                        inc 1,x
0009A5r 3               @1:
0009A5r 3  F6 00                        inc 0,x
0009A7r 3  D0 02                        bne @done
0009A9r 3  F6 01                        inc 1,x
0009ABr 3               @done:
0009ABr 3  60           z_cell_plus:    rts
0009ACr 3               
0009ACr 3               
0009ACr 3               
0009ACr 3               ; ## CELLS ( u -- u ) "Convert cells to size in bytes"
0009ACr 3               ; ## "cells"  auto  ANS core
0009ACr 3                       ; """https://forth-standard.org/standard/core/CELLS
0009ACr 3                       ;
0009ACr 3                       ; Dummy entry for the CELLS word, the code is the same as for
0009ACr 3                       ; 2*, which is where the header directs us to
0009ACr 3                       ; """
0009ACr 3               
0009ACr 3               
0009ACr 3               ; ## CHAR ( "c" -- u ) "Convert character to ASCII value"
0009ACr 3               ; ## "char"  auto  ANS core
0009ACr 3                       ; """https://forth-standard.org/standard/core/CHAR"""
0009ACr 3               
0009ACr 3               xt_char:
0009ACr 3                               ; get character from string, returns ( addr u )
0009ACr 3  20 rr rr                     jsr xt_parse_name
0009AFr 3               
0009AFr 3                               ; if we got back a zero, we have a problem
0009AFr 3  B5 00                        lda 0,x
0009B1r 3  15 01                        ora 1,x
0009B3r 3  D0 05                        bne @not_empty
0009B5r 3               
0009B5r 3  A9 05                        lda #err_noname
0009B7r 3  4C rr rr                     jmp error
0009BAr 3               
0009BAr 3               @not_empty:
0009BAr 3  E8                           inx             ; drop number of characters, leave addr
0009BBr 3  E8                           inx
0009BCr 3  A1 00                        lda (0,x)       ; get character (equivalent to C@)
0009BEr 3  95 00                        sta 0,x
0009C0r 3  74 01                        stz 1,x         ; MSB is always zero
0009C2r 3               
0009C2r 3  60           z_char:         rts
0009C3r 3               
0009C3r 3               
0009C3r 3               
0009C3r 3               ; ## CHAR_PLUS ( addr -- addr+1 ) "Add the size of a character unit to address"
0009C3r 3               ; ## "char+"  auto  ANS core
0009C3r 3                       ; """https://forth-standard.org/standard/core/CHARPlus
0009C3r 3                       ;
0009C3r 3                       ; This is a dummy entry, the code is shared with ONE_PLUS
0009C3r 3                       ; """
0009C3r 3               
0009C3r 3               
0009C3r 3               ; ## CHARS ( n -- n ) "Number of bytes that n chars need"
0009C3r 3               ; ## "chars"  auto  ANS core
0009C3r 3                       ; """https://forth-standard.org/standard/core/CHARS
0009C3r 3                       ; Return how many address units n chars are. Since this is an 8 bit
0009C3r 3                       ; machine, this does absolutely nothing and is included for
0009C3r 3                       ; compatibility with other Forth versions
0009C3r 3                       ; """
0009C3r 3               
0009C3r 3               xt_chars:
0009C3r 3                               ; Checking for underflow seems a bit stupid because this
0009C3r 3                               ; routine does nothing on this machine. However, the user
0009C3r 3                               ; should be warned that there is something wrong with the
0009C3r 3                               ; code if this occurs.
0009C3r 3  20 rr rr                     jsr underflow_1
0009C6r 3               
0009C6r 3  60           z_chars:        rts
0009C7r 3               
0009C7r 3               
0009C7r 3               ; ## CLEAVE ( addr u -- addr2 u2 addr1 u1 ) "Split off word from string"
0009C7r 3               ; ## "cleave"  auto  Tali Forth
0009C7r 3               
0009C7r 3                       ; """Given a range of memory with words delimited by whitespace,return
0009C7r 3                       ; the first word at the top of the stack and the rest of the word
0009C7r 3                       ; following it.
0009C7r 3                       ;
0009C7r 3                       ; Example:
0009C7r 3                       ; s" w1 w2 w3" cleave  -> "w2 w3" "w1"
0009C7r 3                       ; s" w1" cleave        -> "" "w1"
0009C7r 3                       ;
0009C7r 3                       ; Since it will be used in loops a lot, we want it to work in pure
0009C7r 3                       ; assembler and be as fast as we can make it. Calls PARSE-NAME so we
0009C7r 3                       ; strip leading delimiters.
0009C7r 3                       ; """
0009C7r 3               
0009C7r 3               xt_cleave:
0009C7r 3  20 rr rr                     jsr underflow_2
0009CAr 3               
0009CAr 3                               ; We arrive here with ( addr u ). We need to strip any leading
0009CAr 3                               ; spaces by hand: PARSE-NAME does do that, but it doesn't
0009CAr 3                               ; remember how many spaces were stripped. This means we can't
0009CAr 3                               ; calculate the length of the remainder. Fortunately, Tali
0009CAr 3                               ; Forth has just the word we need for this:
0009CAr 3  20 rr rr                     jsr xt_minus_leading    ; -LEADING ( addr u )
0009CDr 3               
0009CDr 3                               ; The main part we can turn over to PARSE-NAME, except that we
0009CDr 3                               ; have a string ( addr u ) and not stuff in the input buffer.
0009CDr 3                               ; We get around this by cheating: We place ( addr u ) in the
0009CDr 3                               ; input buffer and then call PARSE-NAME.
0009CDr 3  20 rr rr                     jsr xt_input_to_r       ; save old imput state
0009D0r 3               
0009D0r 3  B5 00                        lda 0,x         ; u is new ciblen
0009D2r 3  85 rr                        sta ciblen
0009D4r 3  B5 01                        lda 1,x
0009D6r 3  85 rr                        sta ciblen+1
0009D8r 3               
0009D8r 3  B5 02                        lda 2,x         ; addr is new cib
0009DAr 3  85 rr                        sta cib
0009DCr 3  B5 03                        lda 3,x
0009DEr 3  85 rr                        sta cib+1
0009E0r 3               
0009E0r 3  64 rr                        stz toin        ; >IN pointer is zero
0009E2r 3  64 rr                        stz toin+1
0009E4r 3               
0009E4r 3                               ; PARSE-NAME gives us back the substring of the first word
0009E4r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u addr-s u-s )
0009E7r 3               
0009E7r 3                               ; If we were given an empty string, then we're done. It's the
0009E7r 3                               ; resposibility of the user to catch this as a sign to end the
0009E7r 3                               ; any loop
0009E7r 3  B5 00                        lda 0,x
0009E9r 3  15 01                        ora 1,x
0009EBr 3  F0 23                        beq @done
0009EDr 3               
0009EDr 3                               ; Now we have to adjust the original string
0009EDr 3  B5 04                        lda 4,x         ; LSB of original u
0009EFr 3  38                           sec
0009F0r 3  F5 00                        sbc 0,x
0009F2r 3  95 04                        sta 4,x
0009F4r 3               
0009F4r 3  B5 05                        lda 5,x         ; MSB of original u
0009F6r 3  F5 01                        sbc 1,x
0009F8r 3  95 05                        sta 5,x
0009FAr 3               
0009FAr 3  B5 06                        lda 6,x         ; LSB of original addr
0009FCr 3  18                           clc
0009FDr 3  75 00                        adc 0,x
0009FFr 3  95 06                        sta 6,x
000A01r 3               
000A01r 3  B5 07                        lda 7,x         ; MSB of original addr
000A03r 3  75 01                        adc 1,x
000A05r 3  95 07                        sta 7,x
000A07r 3               
000A07r 3                               ; There is one small problem: PARSE-NAME will probably have
000A07r 3                               ; left the string with the rest of the words with leading
000A07r 3                               ; delimiters. We use our magic -LEADING again
000A07r 3  20 rr rr                     jsr xt_two_swap         ; ( addr-s u-s addr u )
000A0Ar 3  20 rr rr                     jsr xt_minus_leading
000A0Dr 3  20 rr rr                     jsr xt_two_swap         ; ( addr u addr-s u-s )
000A10r 3               @done:
000A10r 3                               ; Restore input
000A10r 3  20 rr rr                     jsr xt_r_to_input
000A13r 3               
000A13r 3  60           z_cleave:       rts
000A14r 3               
000A14r 3               
000A14r 3               
000A14r 3               ; ## CMOVE ( addr1 addr2 u -- ) "Copy bytes going from low to high"
000A14r 3               ; ## "cmove"  auto  ANS string
000A14r 3                       ; """https://forth-standard.org/standard/string/CMOVE
000A14r 3                       ; Copy u bytes from addr1 to addr2, going low to high (addr2 is
000A14r 3                       ; larger than addr1). Based on code in Leventhal, Lance A.
000A14r 3                       ; "6502 Assembly Language Routines", p. 201, where it is called
000A14r 3                       ; "move left".
000A14r 3                       ;
000A14r 3                       ; There are no official tests for this word.
000A14r 3                       ; """
000A14r 3               
000A14r 3               xt_cmove:
000A14r 3  20 rr rr                     jsr underflow_3
000A17r 3               
000A17r 3                               ; move destination address to where we can work with it
000A17r 3  B5 02                        lda 2,x
000A19r 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000A1Br 3  B5 03                        lda 3,x
000A1Dr 3  85 rr                        sta tmp2+1
000A1Fr 3               
000A1Fr 3                               ; move source address to where we can work with it
000A1Fr 3  B5 04                        lda 4,x
000A21r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000A23r 3  B5 05                        lda 5,x
000A25r 3  85 rr                        sta tmp1+1
000A27r 3               
000A27r 3  A0 00                        ldy #0
000A29r 3  B5 01                        lda 1,x         ; number of whole pages to move
000A2Br 3  F0 0F                        beq @dopartial
000A2Dr 3               
000A2Dr 3               @page:
000A2Dr 3  B1 rr                        lda (tmp1),y
000A2Fr 3  91 rr                        sta (tmp2),y
000A31r 3  C8                           iny
000A32r 3  D0 F9                        bne @page
000A34r 3               
000A34r 3  E6 rr                        inc tmp1+1
000A36r 3  E6 rr                        inc tmp2+1
000A38r 3  D6 01                        dec 1,x
000A3Ar 3  D0 F1                        bne @page
000A3Cr 3               
000A3Cr 3               @dopartial:
000A3Cr 3  B5 00                        lda 0,x         ; length of last page
000A3Er 3  F0 09                        beq @done
000A40r 3               
000A40r 3               @partial:
000A40r 3  B1 rr                        lda (tmp1),y
000A42r 3  91 rr                        sta (tmp2),y
000A44r 3  C8                           iny
000A45r 3               
000A45r 3  D6 00                        dec 0,x
000A47r 3  D0 F7                        bne @partial
000A49r 3               
000A49r 3               @done:          ; clear the stack
000A49r 3  8A                           txa
000A4Ar 3  18                           clc
000A4Br 3  69 06                        adc #6
000A4Dr 3  AA                           tax
000A4Er 3               
000A4Er 3  60           z_cmove:        rts
000A4Fr 3               
000A4Fr 3               
000A4Fr 3               
000A4Fr 3               ; ## CMOVE_UP ( add1 add2 u -- ) "Copy bytes from high to low"
000A4Fr 3               ; ## "cmove>"  auto  ANS string
000A4Fr 3                       ; """https://forth-standard.org/standard/string/CMOVEtop
000A4Fr 3                       ; Based on code in Leventhal, Lance A. "6502 Assembly Language
000A4Fr 3                       ; Routines", p. 201, where it is called "move right".
000A4Fr 3                       ;
000A4Fr 3                       ; There are no official tests for this word.
000A4Fr 3                       ; """
000A4Fr 3               
000A4Fr 3               xt_cmove_up:
000A4Fr 3  20 rr rr                     jsr underflow_3
000A52r 3               
000A52r 3                               ; Move destination address to where we can work with it
000A52r 3  B5 02                        lda 2,x
000A54r 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000A56r 3  B5 03                        lda 3,x
000A58r 3  18                           clc
000A59r 3  75 01                        adc 1,x
000A5Br 3  85 rr                        sta tmp2+1      ; point to last page of destination
000A5Dr 3               
000A5Dr 3                               ; Move source address to where we can work with it
000A5Dr 3  B5 04                        lda 4,x
000A5Fr 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000A61r 3  B5 05                        lda 5,x
000A63r 3  18                           clc
000A64r 3  75 01                        adc 1,x
000A66r 3  85 rr                        sta tmp1+1      ; point to last page of source
000A68r 3  F6 01                        inc 1,x         ; allows us to use bne with dec 1,x below
000A6Ar 3               
000A6Ar 3                               ; Move the last partial page first
000A6Ar 3  B4 00                        ldy 0,x         ; length of last page
000A6Cr 3  F0 0E                        beq @nopartial
000A6Er 3               
000A6Er 3               @outerloop:
000A6Er 3  88                           dey
000A6Fr 3  F0 07                        beq @finishpage
000A71r 3               
000A71r 3               @innerloop:
000A71r 3  B1 rr                        lda (tmp1),y
000A73r 3  91 rr                        sta (tmp2),y
000A75r 3  88                           dey
000A76r 3  D0 F9                        bne @innerloop
000A78r 3               
000A78r 3               @finishpage:
000A78r 3  B2 rr                        lda (tmp1)      ; handle y = 0 separately
000A7Ar 3  92 rr                        sta (tmp2)
000A7Cr 3               
000A7Cr 3               @nopartial:
000A7Cr 3  C6 rr                        dec tmp1+1      ; back up to previous pages
000A7Er 3  C6 rr                        dec tmp2+1
000A80r 3  D6 01                        dec 1,x
000A82r 3  D0 EA                        bne @outerloop
000A84r 3               @done:
000A84r 3                               ; clear up the stack and leave
000A84r 3  8A                           txa
000A85r 3  18                           clc
000A86r 3  69 06                        adc #6
000A88r 3  AA                           tax
000A89r 3               
000A89r 3  60           z_cmove_up:     rts
000A8Ar 3               
000A8Ar 3               
000A8Ar 3               
000A8Ar 3               ; ## COLON ( "name" -- ) "Start compilation of a new word"
000A8Ar 3               ; ## ":"  auto  ANS core
000A8Ar 3                       ; """https://forth-standard.org/standard/core/Colon
000A8Ar 3                       ;
000A8Ar 3                       ; Use the CREATE routine and fill in the rest by hand.
000A8Ar 3                       ; """
000A8Ar 3               
000A8Ar 3               xt_colon:
000A8Ar 3                               ; If we're already in the compile state, complain
000A8Ar 3                               ; and quit
000A8Ar 3  A5 rr                        lda state
000A8Cr 3  05 rr                        ora state+1
000A8Er 3  F0 05                        beq @1
000A90r 3               
000A90r 3  A9 07                        lda #err_state
000A92r 3  4C rr rr                     jmp error
000A95r 3               @1:
000A95r 3                               ; switch to compile state
000A95r 3  C6 rr                        dec state
000A97r 3  C6 rr                        dec state+1
000A99r 3               
000A99r 3                               ; Set bit 6 in status to tell ";" and RECURSE this is a normal
000A99r 3                               ; word
000A99r 3  A9 40                        lda #%01000000
000A9Br 3  04 rr                        tsb status
000A9Dr 3               
000A9Dr 3                               ; CREATE is going to change the DP to point to the new word's
000A9Dr 3                               ; header. While this is fine for (say) variables, it would mean
000A9Dr 3                               ; that FIND-NAME etc would find a half-finished word when
000A9Dr 3                               ; looking in the Dictionary. To prevent this, we save the old
000A9Dr 3                               ; version of DP and restore it later. The new DP is placed in
000A9Dr 3                               ; the variable WORKWORD until we're finished with a SEMICOLON.
000A9Dr 3  20 rr rr                     jsr current_to_dp
000AA0r 3  A5 rr                        lda dp+1            ; CREATE uses a lot of variables
000AA2r 3  48                           pha
000AA3r 3  A5 rr                        lda dp
000AA5r 3  48                           pha
000AA6r 3               
000AA6r 3                               ; Tell create not to print warning for duplicate name.
000AA6r 3  A9 80                        lda #%10000000
000AA8r 3  04 rr                        tsb status
000AAAr 3               
000AAAr 3  20 rr rr                     jsr xt_create
000AADr 3               
000AADr 3                               ; Get the nt (not the xt!) of the new word as described above.
000AADr 3                               ; Only COLON, SEMICOLON and RECURSE get to access WORKWORD
000AADr 3  20 rr rr                     jsr current_to_dp   ; This might be able to be omitted
000AB0r 3  A5 rr                        lda dp
000AB2r 3  85 rr                        sta workword
000AB4r 3  A5 rr                        lda dp+1
000AB6r 3  85 rr                        sta workword+1
000AB8r 3               
000AB8r 3                               ; Restore original DP
000AB8r 3  68                           pla
000AB9r 3  85 rr                        sta dp
000ABBr 3  68                           pla
000ABCr 3  85 rr                        sta dp+1
000ABEr 3  20 rr rr                     jsr dp_to_current
000AC1r 3               
000AC1r 3                               ; CREATE includes a subroutine jump to DOVAR by default. We
000AC1r 3                               ; back up three bytes and overwrite that.
000AC1r 3  A5 rr                        lda cp
000AC3r 3  38                           sec
000AC4r 3  E9 03                        sbc #3
000AC6r 3  85 rr                        sta cp
000AC8r 3  B0 02                        bcs @done
000ACAr 3  C6 rr                        dec cp+1
000ACCr 3               @done:
000ACCr 3  60           z_colon:        rts
000ACDr 3               
000ACDr 3               
000ACDr 3               ; ## COLON_NONAME ( -- ) "Start compilation of a new word""
000ACDr 3               ; ## ":NONAME"  auto  ANS core
000ACDr 3                       ; """https://forth-standard.org/standard/core/ColonNONAME
000ACDr 3                       ; Compile a word with no nt.  ";" will put its xt on the stack.
000ACDr 3                       ; """
000ACDr 3               
000ACDr 3               xt_colon_noname:
000ACDr 3                               ; If we're already in the compile state, complain
000ACDr 3                               ; and quit
000ACDr 3  A5 rr                        lda state
000ACFr 3  05 rr                        ora state+1
000AD1r 3  F0 05                        beq @1
000AD3r 3               
000AD3r 3  A9 07                        lda #err_state
000AD5r 3  4C rr rr                     jmp error
000AD8r 3               @1:
000AD8r 3                               ; switch to compile state
000AD8r 3  C6 rr                        dec state
000ADAr 3  C6 rr                        dec state+1
000ADCr 3               
000ADCr 3                               ; Clear bit 6 in status to tell ";" and RECURSE this is
000ADCr 3                               ; a :NONAME word.
000ADCr 3  A9 40                        lda #%01000000
000ADEr 3  14 rr                        trb status
000AE0r 3               
000AE0r 3                               ; Put cp (the xt for this word) in WORKWORD. The flag above
000AE0r 3                               ; lets both ";" and RECURSE know that is is an xt instead of an
000AE0r 3                               ; nt and they will modify their behavior.
000AE0r 3  A5 rr                        lda cp
000AE2r 3  85 rr                        sta workword
000AE4r 3  A5 rr                        lda cp+1
000AE6r 3  85 rr                        sta workword+1
000AE8r 3               @done:
000AE8r 3  60           z_colon_noname:        rts
000AE9r 3               
000AE9r 3               
000AE9r 3               
000AE9r 3               ; ## COMMA ( n -- ) "Allot and store one cell in memory"
000AE9r 3               ; ## ","  auto  ANS core
000AE9r 3                       ; """https://forth-standard.org/standard/core/Comma
000AE9r 3                       ; Store TOS at current place in memory.
000AE9r 3                       ;
000AE9r 3                       ; Since this an eight-bit machine, we can ignore all alignment issues.
000AE9r 3                       ; """
000AE9r 3               
000AE9r 3               xt_comma:
000AE9r 3  20 rr rr                     jsr underflow_1
000AECr 3               
000AECr 3  B5 00                        lda 0,x
000AEEr 3  92 rr                        sta (cp)
000AF0r 3               
000AF0r 3  E6 rr                        inc cp
000AF2r 3  D0 02                        bne @1
000AF4r 3  E6 rr                        inc cp+1
000AF6r 3               @1:
000AF6r 3  B5 01                        lda 1,x
000AF8r 3  92 rr                        sta (cp)
000AFAr 3               
000AFAr 3  E6 rr                        inc cp
000AFCr 3  D0 02                        bne @done
000AFEr 3  E6 rr                        inc cp+1
000B00r 3               @done:
000B00r 3  E8                           inx
000B01r 3  E8                           inx
000B02r 3               
000B02r 3  60           z_comma:        rts
000B03r 3               
000B03r 3               
000B03r 3               
000B03r 3               ; ## COMPARE ( addr1 u1 addr2 u2 -- -1 | 0 | 1) "Compare two strings"
000B03r 3               ; ## "compare"   auto  ANS string
000B03r 3                       ; """https://forth-standard.org/standard/string/COMPARE
000B03r 3                       ; Compare string1 (denoted by addr1 u1) to string2 (denoted by
000B03r 3                       ; addr2 u2).  Return -1 if string1 < string2, 0 if string1 = string2
000B03r 3                       ; and 1 if string1 > string2 (ASCIIbetical comparison).  A string
000B03r 3                       ; that entirely matches the beginning of the other string, but is
000B03r 3                       ; shorter, is considered less than the longer string.
000B03r 3                       ; """
000B03r 3               
000B03r 3               xt_compare:
000B03r 3  20 rr rr                     jsr underflow_4
000B06r 3               
000B06r 3                               ; Load the two string addresses into tmp1 and tmp2.
000B06r 3  B5 02                        lda 2,x
000B08r 3  85 rr                        sta tmp2
000B0Ar 3  B5 03                        lda 3,x
000B0Cr 3  85 rr                        sta tmp2+1
000B0Er 3  B5 06                        lda 6,x
000B10r 3  85 rr                        sta tmp1
000B12r 3  B5 07                        lda 7,x
000B14r 3  85 rr                        sta tmp1+1
000B16r 3                               ; The counts will be used in-place on the stack.
000B16r 3               
000B16r 3               @compare_loop:
000B16r 3                               ; Check to see if we are out of letters.
000B16r 3               
000B16r 3                               ; Check string1
000B16r 3  B5 04                        lda 4,x
000B18r 3  15 05                        ora 5,x
000B1Ar 3  F0 2C                        beq @str1_done
000B1Cr 3               
000B1Cr 3                               ; Check string2
000B1Cr 3  B5 00                        lda 0,x
000B1Er 3  15 01                        ora 1,x
000B20r 3  F0 3A                        beq @greater    ; Str2 empty first
000B22r 3               
000B22r 3               @check_letter:
000B22r 3                               ; Both strings have at least one letter left.
000B22r 3                               ; Check the letters against each other.
000B22r 3  B2 rr                        lda (tmp1)
000B24r 3  D2 rr                        cmp (tmp2)
000B26r 3  90 26                        bcc @less
000B28r 3  D0 32                        bne @greater
000B2Ar 3               @next_letter:
000B2Ar 3                               ; Move both tmp pointers and decrement the counts
000B2Ar 3                               ; on the stack.
000B2Ar 3                               ; Increment tmp1
000B2Ar 3  E6 rr                        inc tmp1
000B2Cr 3  D0 02                        bne @1
000B2Er 3  E6 rr                        inc tmp1+1
000B30r 3               @1:
000B30r 3                               ; Increment tmp2
000B30r 3  E6 rr                        inc tmp2
000B32r 3  D0 02                        bne @2
000B34r 3  E6 rr                        inc tmp2+1
000B36r 3               @2:
000B36r 3                               ; Decrement count1 on the stack.
000B36r 3  B5 04                        lda 4,x
000B38r 3  D0 02                        bne @3
000B3Ar 3  D6 05                        dec 5,x
000B3Cr 3               @3:
000B3Cr 3  D6 04                        dec 4,x
000B3Er 3               
000B3Er 3                               ; Decrement count2 on the stack.
000B3Er 3  B5 00                        lda 0,x
000B40r 3  D0 02                        bne @4
000B42r 3  D6 01                        dec 1,x
000B44r 3               @4:
000B44r 3  D6 00                        dec 0,x
000B46r 3               
000B46r 3                               ; Loop around and check again.
000B46r 3  80 CE                        bra @compare_loop
000B48r 3               
000B48r 3               @str1_done:
000B48r 3                               ; String 1 is out of letters. Check string 2.
000B48r 3  B5 00                        lda 0,x
000B4Ar 3  15 01                        ora 1,x
000B4Cr 3  F0 08                        beq @equal      ; Both out of letters
000B4Er 3               
000B4Er 3                               ; Falls into less (str1 is out but str2 has more)
000B4Er 3               @less:
000B4Er 3                               ; Return -1
000B4Er 3  A9 FF                        lda #$FF
000B50r 3  95 06                        sta 6,x
000B52r 3  95 07                        sta 7,x
000B54r 3  80 0C                        bra @done
000B56r 3               @equal:
000B56r 3                               ; Return 0
000B56r 3  74 06                        stz 6,x
000B58r 3  74 07                        stz 7,x
000B5Ar 3  80 06                        bra @done
000B5Cr 3               @greater:
000B5Cr 3                               ; Return 1
000B5Cr 3  A9 01                        lda #1
000B5Er 3  95 06                        sta 6,x
000B60r 3  74 07                        stz 7,x
000B62r 3                               ; Falls into @done
000B62r 3               @done:
000B62r 3                               ; Remove all but the result from the stack.
000B62r 3  8A                           txa
000B63r 3  18                           clc
000B64r 3  69 06                        adc #6
000B66r 3  AA                           tax
000B67r 3               
000B67r 3  60           z_compare:      rts
000B68r 3               
000B68r 3               
000B68r 3               
000B68r 3               ; ## COMPILE_COMMA ( xt -- ) "Compile xt"
000B68r 3               ; ## "compile,"  auto  ANS core ext
000B68r 3                       ; """https://forth-standard.org/standard/core/COMPILEComma
000B68r 3                       ; Compile the given xt in the current word definition. It is an
000B68r 3                       ; error if we are not in the compile state. Because we are using
000B68r 3                       ; subroutine threading, we can't use , (COMMA) to compile new words
000B68r 3                       ; the traditional way. By default, native compiled is allowed, unless
000B68r 3                       ; there is a NN (Never Native) flag associated. If not, we use the
000B68r 3                       ; value NC_LIMIT (from definitions.tasm) to decide if the code
000B68r 3                       ; is too large to be natively coded: If the size is larger than
000B68r 3                       ; NC_LIMIT, we silently use subroutine coding. If the AN (Always
000B68r 3                       ; Native) flag is set, the word is always natively compiled.
000B68r 3                       ; """
000B68r 3               
000B68r 3               xt_compile_comma:
000B68r 3  20 rr rr                     jsr underflow_1
000B6Br 3               
000B6Br 3                               ; See if this is an Always Native (AN) word by checking the
000B6Br 3                               ; AN flag. We need nt for this. First, save a copy of xt to
000B6Br 3                               ; the Return Stack
000B6Br 3  B5 01                        lda 1,x                 ; MSB
000B6Dr 3  48                           pha
000B6Er 3  B5 00                        lda 0,x
000B70r 3  48                           pha                     ; LSB
000B71r 3               
000B71r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt -- nt )
000B74r 3               
000B74r 3                               ; See if this xt even has an nt.
000B74r 3  B5 00                        lda 0,x
000B76r 3  15 01                        ora 1,x
000B78r 3  D0 03                        bne @check_nt
000B7Ar 3               
000B7Ar 3                               ; No nt in dictionary. Just compile as a JSR.
000B7Ar 3  4C rr rr                     jmp @compile_as_jump
000B7Dr 3               
000B7Dr 3               @check_nt:
000B7Dr 3                               ; put nt away for safe keeping
000B7Dr 3  B5 00                        lda 0,x
000B7Fr 3  85 rr                        sta tmptos
000B81r 3  B5 01                        lda 1,x
000B83r 3  85 rr                        sta tmptos+1
000B85r 3               
000B85r 3                               ; status byte is one further down
000B85r 3  F6 00                        inc 0,x
000B87r 3  D0 02                        bne @1
000B89r 3  F6 01                        inc 1,x                 ; ( nt -- nt+1 )
000B8Br 3               @1:
000B8Br 3  A1 00                        lda (0,x)
000B8Dr 3  85 rr                        sta tmp3                ; keep copy of status byte for NN
000B8Fr 3  29 02                        and #AN                 ; mask all but Always Native (AN) bit
000B91r 3  F0 0D                        beq @compile_check
000B93r 3               
000B93r 3                               ; We're natively compiling no matter what. Get length and
000B93r 3                               ; compile in code. Get the original nt back
000B93r 3  A5 rr                        lda tmptos
000B95r 3  95 00                        sta 0,x
000B97r 3  A5 rr                        lda tmptos+1
000B99r 3  95 01                        sta 1,x
000B9Br 3               
000B9Br 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000B9Er 3               
000B9Er 3  80 27                        bra @compile_as_code
000BA0r 3               
000BA0r 3               @compile_check:
000BA0r 3                               ; See if Native Compile is even alowed by checking the NN
000BA0r 3                               ; flag
000BA0r 3  A5 rr                        lda tmp3
000BA2r 3  29 08                        and #NN
000BA4r 3  F0 03                        beq @check_size_limit
000BA6r 3               
000BA6r 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000BA9r 3               
000BA9r 3               @check_size_limit:
000BA9r 3                               ; Native compile is a legal option, but we need to see what
000BA9r 3                               ; limit the user set for size (in nc_limit)
000BA9r 3  A5 rr                        lda tmptos
000BABr 3  95 00                        sta 0,x
000BADr 3  A5 rr                        lda tmptos+1
000BAFr 3  95 01                        sta 1,x
000BB1r 3               
000BB1r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000BB4r 3               
000BB4r 3                               ; Check the wordsize MSB against the user-defined limit.
000BB4r 3  B5 01                        lda 1,x
000BB6r 3  C5 rr                        cmp nc_limit+1
000BB8r 3  90 0D                        bcc @compile_as_code    ; user-defined limit MSB
000BBAr 3  D0 08                        bne @jumpto_compile_as_jump
000BBCr 3               
000BBCr 3                               ; Check the wordsize LSB against the user-defined limit.
000BBCr 3  B5 00                        lda 0,x
000BBEr 3  C5 rr                        cmp nc_limit            ; user-defined limit LSB
000BC0r 3  90 05                        bcc @compile_as_code    ; Allow native compiling for less
000BC2r 3  F0 03                        beq @compile_as_code    ; than or equal to the limit.
000BC4r 3               
000BC4r 3               @jumpto_compile_as_jump:
000BC4r 3                               ; If the wordsize is greater than the user-defined
000BC4r 3                               ; limit, it will be compiled as a subroutine jump.
000BC4r 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000BC7r 3               
000BC7r 3               @compile_as_code:
000BC7r 3                               ; We arrive here with the length of the word's code TOS and
000BC7r 3                               ; xt on top of the Return Stack. MOVE will need ( xt cp u )
000BC7r 3                               ; on the data stack
000BC7r 3  CA                           dex
000BC8r 3  CA                           dex                     ; ( -- u ? )
000BC9r 3  CA                           dex
000BCAr 3  CA                           dex                     ; ( -- u ? ? )
000BCBr 3               
000BCBr 3  B5 04                        lda 4,x
000BCDr 3  95 00                        sta 0,x                 ; LSB of u
000BCFr 3  B5 05                        lda 5,x
000BD1r 3  95 01                        sta 1,x                 ; ( -- u ? u )
000BD3r 3               
000BD3r 3  68                           pla
000BD4r 3  95 04                        sta 4,x                 ; LSB of xt
000BD6r 3  68                           pla
000BD7r 3  95 05                        sta 5,x                 ; ( -- xt ? u )
000BD9r 3               
000BD9r 3  A5 rr                        lda cp                  ; LSB of cp
000BDBr 3  95 02                        sta 2,x
000BDDr 3  A5 rr                        lda cp+1
000BDFr 3  95 03                        sta 3,x                 ; ( -- xt cp u )
000BE1r 3               
000BE1r 3                               ; --- SPECIAL CASE 1: PREVENT RETURN STACK THRASHINIG ---
000BE1r 3               
000BE1r 3                               ; Native compiling allows us to strip the stack antics off
000BE1r 3                               ; a number of words that use the Return Stack such as >R, R>,
000BE1r 3                               ; 2>R and 2R> (but not 2R@ in this version). We compare the
000BE1r 3                               ; xt with the contents of the table
000BE1r 3  A0 00                        ldy #0
000BE3r 3               
000BE3r 3               @strip_loop:
000BE3r 3  B9 rr rr                     lda @strip_table,y      ; LSB of first word
000BE6r 3  D5 04                        cmp 4,x                 ; LSB of xt
000BE8r 3  D0 07                        bne @next_entry
000BEAr 3               
000BEAr 3                               ; LSB is the same, test MSB
000BEAr 3  B9 rr rr                     lda @strip_table+1,y
000BEDr 3  D5 05                        cmp 5,x
000BEFr 3  F0 0C                        beq @found_entry
000BF1r 3               
000BF1r 3                               ; MSB is not equal. Pretend though that we've come from LSB
000BF1r 3                               ; so we can use the next step for both cases
000BF1r 3               @next_entry:
000BF1r 3                               ; Not a word that needs stripping, so check next entry in table
000BF1r 3                               ; Let's see if we're done with the table (marked by zero entry)
000BF1r 3  B9 rr rr                     lda @strip_table,y      ; pointing to LSB
000BF4r 3  19 rr rr                     ora @strip_table+1,y    ; get MSB
000BF7r 3  F0 22                        beq @underflow_strip    ; table done, let's get out of here
000BF9r 3               
000BF9r 3  C8                           iny
000BFAr 3  C8                           iny
000BFBr 3  80 E6                        bra @strip_loop
000BFDr 3               @found_entry:
000BFDr 3                               ; This word is one of the ones that needs to have its size
000BFDr 3                               ; adjusted during native compile. We find the values in the
000BFDr 3                               ; next table with the same index, which is Y. However, Y is
000BFDr 3                               ; pointing to the MSB, so we need to go back to the LSB and
000BFDr 3                               ; halve the index before we can use it.
000BFDr 3  98                           tya
000BFEr 3  4A                           lsr
000BFFr 3  A8                           tay
000C00r 3               
000C00r 3                               ; Get the adjustment out of the size table. We were clever
000C00r 3                               ; enough to make sure the cut on both ends of the code is
000C00r 3                               ; is the same size.
000C00r 3  B9 rr rr                     lda @strip_size,y
000C03r 3  85 rr                        sta tmptos              ; save a copy
000C05r 3               
000C05r 3                               ; Adjust xt: Start later
000C05r 3  18                           clc
000C06r 3  75 04                        adc 4,x
000C08r 3  95 04                        sta 4,x
000C0Ar 3  90 02                        bcc @2
000C0Cr 3  F6 05                        inc 5,x                 ; we just care about the carry
000C0Er 3               @2:
000C0Er 3               
000C0Er 3                               ; Adjust u: Quit earlier. Since we cut off the top and the
000C0Er 3                               ; bottom of the code, we have to double the value
000C0Er 3  06 rr                        asl tmptos
000C10r 3               
000C10r 3  38                           sec
000C11r 3  B5 00                        lda 0,x
000C13r 3  E5 rr                        sbc tmptos
000C15r 3  95 00                        sta 0,x
000C17r 3  B0 02                        bcs @3
000C19r 3  D6 01                        dec 1,x                 ; we just care about the borrow
000C1Br 3               @3:
000C1Br 3                               ; drop through to underflow check stripping
000C1Br 3               
000C1Br 3               @underflow_strip:
000C1Br 3                               ; --- SPECIAL CASE 2: REMOVE UNDERFLOW CHECKING ---
000C1Br 3               
000C1Br 3                               ; The user can choose to remove the unterflow testing in those
000C1Br 3                               ; words that have the UF flag. This shortens the word by
000C1Br 3                               ; 3 bytes if there is no underflow.
000C1Br 3               
000C1Br 3                               ; See if the user wants underflow stripping turned on
000C1Br 3  A5 rr                        lda uf_strip
000C1Dr 3  05 rr                        ora uf_strip+1
000C1Fr 3  F0 1C                        beq @specials_done
000C21r 3               
000C21r 3                               ; See if this word even contains underflow checking
000C21r 3  A5 rr                        lda tmp3
000C23r 3  29 10                        and #UF
000C25r 3  F0 16                        beq @specials_done
000C27r 3               
000C27r 3                               ; If we arrived here, underflow has to go. It's always 3 bytes
000C27r 3                               ; long. Note hat PICK is a special case.
000C27r 3               
000C27r 3                               ; Adjust xt: Start later
000C27r 3  18                           clc
000C28r 3  B5 04                        lda 4,x
000C2Ar 3  69 03                        adc #3
000C2Cr 3  95 04                        sta 4,x
000C2Er 3  90 02                        bcc @4
000C30r 3  F6 05                        inc 5,x                  ; we just care about the carry
000C32r 3               @4:
000C32r 3                               ; Adjust u: End earlier
000C32r 3  38                           sec
000C33r 3  B5 00                        lda 0,x
000C35r 3  E9 03                        sbc #3
000C37r 3  95 00                        sta 0,x
000C39r 3  B0 02                        bcs @5
000C3Br 3  D6 01                        dec 1,x                  ; we just care about the borrow
000C3Dr 3               @5:
000C3Dr 3               
000C3Dr 3                               ; --- END OF SPECIAL CASES ---
000C3Dr 3               @specials_done:
000C3Dr 3                               ; Store size of area to be copied for calculation of
000C3Dr 3                               ; new CP. We have to do this after all of the special cases
000C3Dr 3                               ; because they might change the size
000C3Dr 3  B5 01                        lda 1,x                 ; MSB
000C3Fr 3  48                           pha
000C40r 3  B5 00                        lda 0,x                 ; LSB
000C42r 3  48                           pha
000C43r 3               
000C43r 3                               ; Enough of this, let's move those bytes already! We have
000C43r 3                               ; ( xt cp u ) on the stack at this point
000C43r 3  20 rr rr                     jsr xt_move
000C46r 3               
000C46r 3                               ; Update CP
000C46r 3  18                           clc
000C47r 3  68                           pla                     ; LSB
000C48r 3  65 rr                        adc cp
000C4Ar 3  85 rr                        sta cp
000C4Cr 3               
000C4Cr 3  68                           pla                     ; MSB
000C4Dr 3  65 rr                        adc cp+1
000C4Fr 3  85 rr                        sta cp+1
000C51r 3               
000C51r 3  80 2C                        bra @done
000C53r 3               
000C53r 3               @strip_table:
000C53r 3                              ; List of words we strip the Return Stack antics from
000C53r 3                              ; during native compile, zero terminated. The index here
000C53r 3                              ; must be the same as for the sizes
000C53r 3  rr rr rr rr                  .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
000C57r 3  rr rr        
000C59r 3  rr rr rr rr                  .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
000C5Dr 3  00 00        
000C5Fr 3               
000C5Fr 3               @strip_size:
000C5Fr 3                               ; List of bytes to be stripped from the words that get their
000C5Fr 3                               ; Return Stack antics removed during native compile. Index must
000C5Fr 3                               ; be the same as for the xts. Zero terminated.
000C5Fr 3  04 04 04 06                  .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
000C63r 3  06 00        
000C65r 3               
000C65r 3               @compile_as_jump:
000C65r 3                               ; Compile xt as a subroutine jump
000C65r 3  A9 20                        lda #$20
000C67r 3  92 rr                        sta (cp)
000C69r 3               
000C69r 3  A0 01                        ldy #1
000C6Br 3  68                           pla             ; LSB
000C6Cr 3  91 rr                        sta (cp),y
000C6Er 3  C8                           iny
000C6Fr 3  68                           pla             ; MSB
000C70r 3  91 rr                        sta (cp),y
000C72r 3               
000C72r 3                               ; allot space we just used
000C72r 3  A9 03                        lda #3
000C74r 3  18                           clc
000C75r 3  65 rr                        adc cp
000C77r 3  85 rr                        sta cp
000C79r 3  90 02                        bcc @6
000C7Br 3  E6 rr                        inc cp+1
000C7Dr 3               @6:
000C7Dr 3  E8                           inx             ; drop xt
000C7Er 3  E8                           inx
000C7Fr 3               @done:
000C7Fr 3               z_compile_comma:
000C7Fr 3  60                           rts
000C80r 3               
000C80r 3               
000C80r 3               
000C80r 3               ; ## COMPILE_ONLY ( -- ) "Mark most recent word as COMPILE-ONLY"
000C80r 3               ; ## "compile-only"  tested  Tali Forth
000C80r 3                       ; """Set the Compile Only flag (CO) of the most recently defined
000C80r 3                       ; word.
000C80r 3                       ;
000C80r 3                       ; The alternative way to do this is to define a word
000C80r 3                       ; ?COMPILE that makes sure  we're in compile mode
000C80r 3                       ; """
000C80r 3               
000C80r 3               xt_compile_only:
000C80r 3  20 rr rr                     jsr current_to_dp
000C83r 3  A0 01                        ldy #1          ; offset for status byte
000C85r 3  B1 rr                        lda (dp),y
000C87r 3  09 01                        ora #CO        ; make sure bit 7 is set
000C89r 3  91 rr                        sta (dp),y
000C8Br 3               
000C8Br 3  60           z_compile_only: rts
000C8Cr 3               
000C8Cr 3               
000C8Cr 3               
000C8Cr 3               ; ## CONSTANT ( n "name" -- ) "Define a constant"
000C8Cr 3               ; ## "constant"  auto  ANS core
000C8Cr 3                       ; """https://forth-standard.org/standard/core/CONSTANT
000C8Cr 3                       ;
000C8Cr 3                       ; Forth equivalent is  CREATE , DOES> @  but we do
000C8Cr 3                       ; more in assembler and let CREATE do the heavy lifting.
000C8Cr 3                       ; See http://www.bradrodriguez.com/papers/moving3.htm for
000C8Cr 3                       ; a primer on how this works in various Forths. This is the
000C8Cr 3                       ; same code as VALUE in our case.
000C8Cr 3                       ; """
000C8Cr 3               xt_value:
000C8Cr 3               xt_constant:
000C8Cr 3  20 rr rr                     jsr underflow_1
000C8Fr 3               
000C8Fr 3  20 rr rr                     jsr xt_create
000C92r 3               
000C92r 3                           	; CREATE by default installs a subroutine jump to DOVAR,
000C92r 3                               ; but we want DOCONST for constants. Go back two bytes and
000C92r 3                               ; replace the subroutine jump target
000C92r 3  38                           sec
000C93r 3  A5 rr                        lda cp
000C95r 3  E9 02                        sbc #2
000C97r 3  85 rr                        sta tmp1
000C99r 3  A5 rr                        lda cp+1
000C9Br 3  E9 00                        sbc #0
000C9Dr 3  85 rr                        sta tmp1+1
000C9Fr 3               
000C9Fr 3  A9 rr                        lda #<doconst           ; LSB of DOCONST
000CA1r 3  92 rr                        sta (tmp1)
000CA3r 3  A0 01                        ldy #1
000CA5r 3  A9 rr                        lda #>doconst           ; MSB of DOCONST
000CA7r 3  91 rr                        sta (tmp1),y
000CA9r 3               
000CA9r 3                               ; Now we save the constant number itself in the next cell
000CA9r 3  20 rr rr                     jsr xt_comma            ; drop through to adjust_z
000CACr 3               
000CACr 3               adjust_z:
000CACr 3                               ; Now the length of the complete word (z_word) has increased by
000CACr 3                               ; two. We need to update that number or else words such as SEE
000CACr 3                               ; will ignore the PFA. We use this same routine for VARIABLE,
000CACr 3                               ; VALUE and DEFER
000CACr 3  20 rr rr                     jsr xt_latestnt         ; gives us ( -- nt )
000CAFr 3               
000CAFr 3                               ; z_word is six bytes further down
000CAFr 3  B5 00                        lda 0,x
000CB1r 3  85 rr                        sta tmp1
000CB3r 3  B5 01                        lda 1,x
000CB5r 3  85 rr                        sta tmp1+1
000CB7r 3               
000CB7r 3  A0 06                        ldy #6
000CB9r 3  B1 rr                        lda (tmp1),y
000CBBr 3  18                           clc
000CBCr 3  69 02                        adc #2
000CBEr 3  91 rr                        sta (tmp1),y
000CC0r 3  C8                           iny
000CC1r 3  B1 rr                        lda (tmp1),y
000CC3r 3  69 00                        adc #0                  ; only need carry
000CC5r 3  91 rr                        sta (tmp1),y
000CC7r 3               
000CC7r 3  E8                           inx
000CC8r 3  E8                           inx
000CC9r 3               
000CC9r 3               z_value:
000CC9r 3  60           z_constant:     rts
000CCAr 3               
000CCAr 3               
000CCAr 3               ; ## COUNT ( c-addr -- addr u ) "Convert character string to normal format"
000CCAr 3               ; ## "count"  auto  ANS core
000CCAr 3                       ; """https://forth-standard.org/standard/core/COUNT
000CCAr 3                       ; Convert old-style character string to address-length pair. Note
000CCAr 3                       ; that the length of the string c-addr is stored in character length
000CCAr 3                       ; (8 bit), not cell length (16 bit). This is rarely used these days,
000CCAr 3                       ; though COUNT can also be used to step through a string character by
000CCAr 3                       ; character.
000CCAr 3                       ; """
000CCAr 3               xt_count:
000CCAr 3  20 rr rr                     jsr underflow_1
000CCDr 3               
000CCDr 3  A1 00                        lda (0,x)       ; Get number of characters (255 max)
000CCFr 3  A8                           tay
000CD0r 3               
000CD0r 3                               ; move start address up by one
000CD0r 3  F6 00                        inc 0,x         ; LSB
000CD2r 3  D0 02                        bne @1
000CD4r 3  F6 01                        inc 1,x         ; MSB
000CD6r 3               
000CD6r 3                               ; save number of characters to stack
000CD6r 3               @1:
000CD6r 3  98                           tya
000CD7r 3  CA                           dex
000CD8r 3  CA                           dex
000CD9r 3  95 00                        sta 0,x         ; LSB
000CDBr 3  74 01                        stz 1,x         ; MSB, always zero
000CDDr 3               
000CDDr 3  60           z_count:        rts
000CDEr 3               
000CDEr 3               
000CDEr 3               ; ## CR ( -- ) "Print a line feed"
000CDEr 3               ; ## "cr"  auto  ANS core
000CDEr 3                       ; """https://forth-standard.org/standard/core/CR"""
000CDEr 3               xt_cr:
000CDEr 3  A9 0A                        lda #AscLF
000CE0r 3  20 rr rr                     jsr emit_a
000CE3r 3  60           z_cr:           rts
000CE4r 3               
000CE4r 3               
000CE4r 3               ; ## CREATE ( "name" -- ) "Create Dictionary entry for 'name'"
000CE4r 3               ; ## "create"  auto  ANS core
000CE4r 3                       ; """https://forth-standard.org/standard/core/CREATE
000CE4r 3                       ;
000CE4r 3                       ; See the drawing in headers.asm for details on the header
000CE4r 3                       ; """
000CE4r 3               
000CE4r 3               xt_create:
000CE4r 3                               ; get string
000CE4r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
000CE7r 3               
000CE7r 3                               ; if we were given an empty string, we complain and quit
000CE7r 3  B5 00                        lda 0,x
000CE9r 3  15 01                        ora 1,x
000CEBr 3  D0 05                        bne @got_name
000CEDr 3               
000CEDr 3  A9 05                        lda #err_noname
000CEFr 3  4C rr rr                     jmp error
000CF2r 3               
000CF2r 3               @got_name:
000CF2r 3                               ; Enforce maximal length of string by overwriting the MSB of
000CF2r 3                               ; the length. There is a possible error here: If the string
000CF2r 3                               ; is exactly 255 chars long, then a lot of the following
000CF2r 3                               ; additions will fail because of wrapping
000CF2r 3  74 01                        stz 1,x
000CF4r 3               
000CF4r 3                               ; Check to see if this name already exists.
000CF4r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u )
000CF7r 3  20 rr rr                     jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
000CFAr 3               
000CFAr 3  B5 00                        lda 0,x
000CFCr 3  15 01                        ora 1,x
000CFEr 3  F0 1E                        beq @new_name           ; We haven't seen this one before.
000D00r 3               
000D00r 3                               ; This name already exists.  See if we are supposed to print
000D00r 3                               ; the message for it.
000D00r 3  E8                           inx                     ; Drop flag (nt) from find-name.
000D01r 3  E8                           inx
000D02r 3               
000D02r 3                               ; Check bit 7
000D02r 3  24 rr                        bit status
000D04r 3  10 08                        bpl @redefined_name     ; Bit 7 is zero, so print the message.
000D06r 3               
000D06r 3                               ; We aren't supposed to print the redefined message ourselves,
000D06r 3                               ; but we should indicate that it is redefined (for ; to print
000D06r 3                               ; later).
000D06r 3  A9 80                        lda #$80                ; Set bit 7 to indicate dup
000D08r 3  05 rr                        ora status
000D0Ar 3  85 rr                        sta status
000D0Cr 3  80 18                        bra @process_name
000D0Er 3               
000D0Er 3               @redefined_name:
000D0Er 3                               ; Print the message that the name is redefined.
000D0Er 3  A9 02                        lda #str_redefined
000D10r 3  20 rr rr                     jsr print_string_no_lf
000D13r 3               
000D13r 3  20 rr rr                     jsr xt_two_dup           ; ( addr u addr u )
000D16r 3  20 rr rr                     jsr xt_type
000D19r 3  20 rr rr                     jsr xt_space
000D1Cr 3               
000D1Cr 3  80 08                        bra @process_name
000D1Er 3               
000D1Er 3               @new_name:
000D1Er 3  E8                           inx                     ; Drop flag (0) from find-name.
000D1Fr 3  E8                           inx
000D20r 3  A9 7F                        lda #$7F                ; Clear bit 0 of status to indicate new word.
000D22r 3  25 rr                        and status
000D24r 3  85 rr                        sta status
000D26r 3               
000D26r 3               @process_name:
000D26r 3  B5 00                        lda 0,x
000D28r 3  85 rr                        sta tmp2                ; store length of string in tmp2
000D2Ar 3               
000D2Ar 3                               ; remember the first free byte of memory as the start of
000D2Ar 3                               ; the new word
000D2Ar 3  A5 rr                        lda cp
000D2Cr 3  85 rr                        sta tmp1
000D2Er 3  A5 rr                        lda cp+1
000D30r 3  85 rr                        sta tmp1+1
000D32r 3               
000D32r 3                               ; We need 8 bytes plus the length of the string for our new header.
000D32r 3                               ; This is also the offset for the start of the code field (the
000D32r 3                               ; xt_ label) so we need to remember it. Otherwise, we could
000D32r 3                               ; just allot the space afterwards
000D32r 3  B5 00                        lda 0,x
000D34r 3  18                           clc
000D35r 3  69 08                        adc #8
000D37r 3  85 rr                        sta tmp3                ; total header length
000D39r 3               
000D39r 3                               ; We need three more bytes for for the hardcoded code field
000D39r 3                               ; area (CFA), the "payload" of the word which by default will
000D39r 3                               ; be a subroutine jump to DOVAR
000D39r 3  18                           clc
000D3Ar 3  69 03                        adc #3
000D3Cr 3               
000D3Cr 3                               ; We overwrite the length of the string returned by PARSE-NAME
000D3Cr 3                               ; and then call ALLOT
000D3Cr 3  95 00                        sta 0,x
000D3Er 3  74 01                        stz 1,x         ; max header size is 255 chars
000D40r 3  20 rr rr                     jsr xt_allot    ; ( addr )
000D43r 3               
000D43r 3                               ; Get the CURRENT dictionary pointer.
000D43r 3  20 rr rr                     jsr current_to_dp
000D46r 3               
000D46r 3                               ; Now we walk through the header with Y as the index, adding
000D46r 3                               ; information byte-by-byte
000D46r 3  A0 00                        ldy #0
000D48r 3               
000D48r 3                               ; HEADER BYTE 0: Length of string
000D48r 3  A5 rr                        lda tmp2
000D4Ar 3  91 rr                        sta (tmp1),y
000D4Cr 3               
000D4Cr 3                               ; HEADER BYTE 1: Status byte. By default, we set all new words
000D4Cr 3                               ; to "never native", user will have to decide if they should
000D4Cr 3                               ; be inlined
000D4Cr 3  A9 08                        lda #NN
000D4Er 3               
000D4Er 3                               ; Also, words defined by CREATE are marked in the header has
000D4Er 3                               ; having a Code Field Area (CFA), which is a bit tricky for
000D4Er 3                               ; Subroutine Threaded Code (STC). We do this so >BODY works
000D4Er 3                               ; correctly with DOES> and CREATE. See the discussion at
000D4Er 3                               ; http://forum.6502.org/viewtopic.php?f=9&t=5182 for details
000D4Er 3  09 20                        ora #HC
000D50r 3  C8                           iny
000D51r 3  91 rr                        sta (tmp1),y
000D53r 3  C8                           iny
000D54r 3               
000D54r 3                               ; HEADER BYTE 2,3: Next header. This is the current last word
000D54r 3                               ; in the Dictionary
000D54r 3  A5 rr                        lda dp
000D56r 3  91 rr                        sta (tmp1),y
000D58r 3  C8                           iny
000D59r 3  A5 rr                        lda dp+1
000D5Br 3  91 rr                        sta (tmp1),y
000D5Dr 3  C8                           iny
000D5Er 3               
000D5Er 3                               ; Interlude: Make old CP new DP (new start of Dictionary)
000D5Er 3  A5 rr                        lda tmp1+1
000D60r 3  85 rr                        sta dp+1
000D62r 3  A5 rr                        lda tmp1
000D64r 3  85 rr                        sta dp
000D66r 3               
000D66r 3                               ; HEADER BYTE 4,5: Start of the code field ("xt_" of this word).
000D66r 3                               ; This begins after the header so we take the length of the
000D66r 3                               ; header, which we cleverly saved in tmp3, and use it as an
000D66r 3                               ; offset to the address of the start of the word. We come here
000D66r 3                               ; with tmp1 in A
000D66r 3  18                           clc
000D67r 3  65 rr                        adc tmp3        ; add total header length
000D69r 3  91 rr                        sta (tmp1),y
000D6Br 3  48                           pha             ; we need this in the next step
000D6Cr 3  C8                           iny
000D6Dr 3               
000D6Dr 3  A5 rr                        lda tmp1+1
000D6Fr 3  69 00                        adc #0          ; only need the carry
000D71r 3  91 rr                        sta (tmp1),y
000D73r 3  C8                           iny
000D74r 3               
000D74r 3                               ; HEADER BYTE 6,7: End of code ("z_" of this word). By default,
000D74r 3                               ; we execute a jump to the DOVAR routine, so we need to move three
000D74r 3                               ; bytes down, and then one more byte so that the z_ label points
000D74r 3                               ; to the (still fictional) RTS instruction for correct compilation
000D74r 3  68                           pla             ; LSB of "z_" address
000D75r 3  18                           clc
000D76r 3  69 03                        adc #3
000D78r 3  91 rr                        sta (tmp1),y
000D7Ar 3               
000D7Ar 3  88                           dey             ; get the MSB of xt back
000D7Br 3  B1 rr                        lda (tmp1),y
000D7Dr 3  69 00                        adc #0          ; only need the carry
000D7Fr 3  C8                           iny
000D80r 3  C8                           iny
000D81r 3  91 rr                        sta (tmp1),y
000D83r 3  C8                           iny
000D84r 3               
000D84r 3                               ; HEADER BYTE 8: Start of name string. The address is TOS, the
000D84r 3                               ; length in tmp2. We subtract 8 from the address so we can
000D84r 3                               ; use the same loop index, which is already 8 byte ahead at
000D84r 3                               ; this point
000D84r 3  B5 00                        lda 0,x
000D86r 3  38                           sec
000D87r 3  E9 08                        sbc #8
000D89r 3  85 rr                        sta tmptos
000D8Br 3               
000D8Br 3  B5 01                        lda 1,x
000D8Dr 3  E9 00                        sbc #0          ; only need carry
000D8Fr 3  85 rr                        sta tmptos+1
000D91r 3               
000D91r 3               @name_loop:
000D91r 3  B1 rr                        lda (tmptos),y
000D93r 3               
000D93r 3                               ; Make sure it goes into the dictionary in lower case.
000D93r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
000D95r 3  B0 07                        bcs @store_name
000D97r 3  C9 41                        cmp #$41        ; ASCII 'A'
000D99r 3  90 03                        bcc @store_name
000D9Br 3               
000D9Br 3                               ; An uppercase letter has been located. Make it
000D9Br 3                               ; lowercase.
000D9Br 3  18                           clc
000D9Cr 3  69 20                        adc #$20
000D9Er 3               
000D9Er 3                               ; Fall into @store_name.
000D9Er 3               
000D9Er 3               @store_name:
000D9Er 3  91 rr                        sta (tmp1),y
000DA0r 3  C8                           iny
000DA1r 3  C6 rr                        dec tmp2
000DA3r 3  D0 EC                        bne @name_loop
000DA5r 3               
000DA5r 3                               ; After thename string comes the code field, starting at the
000DA5r 3                               ; current xt of this word, which is initially a jump to the
000DA5r 3                               ; subroutine to DOVAR. We code this jump by hand
000DA5r 3  A9 20                        lda #$20        ; opcode of JSR
000DA7r 3  91 rr                        sta (tmp1),y
000DA9r 3  C8                           iny
000DAAr 3  A9 rr                        lda #<dovar
000DACr 3  91 rr                        sta (tmp1),y
000DAEr 3  C8                           iny
000DAFr 3  A9 rr                        lda #>dovar
000DB1r 3  91 rr                        sta (tmp1),y
000DB3r 3               
000DB3r 3                               ; Update the CURRENT wordlist with the new DP.
000DB3r 3                               ; We do this down here because this routine uses Y.
000DB3r 3  20 rr rr                     jsr dp_to_current
000DB6r 3               
000DB6r 3                               ; And we're done. Restore stack
000DB6r 3  E8                           inx
000DB7r 3  E8                           inx
000DB8r 3               
000DB8r 3  60           z_create:       rts
000DB9r 3               
000DB9r 3               
000DB9r 3               
000DB9r 3               ; ## D_MINUS ( d d -- d ) "Subtract two double-celled numbers"
000DB9r 3               ; ## "d-"  auto  ANS double
000DB9r 3                       ; """https://forth-standard.org/standard/double/DMinus"""
000DB9r 3               
000DB9r 3               xt_d_minus:
000DB9r 3  20 rr rr                     jsr underflow_4 ; two double numbers
000DBCr 3               
000DBCr 3  38                           sec
000DBDr 3               
000DBDr 3  B5 06                        lda 6,x         ; LSB of lower word
000DBFr 3  F5 02                        sbc 2,x
000DC1r 3  95 06                        sta 6,x
000DC3r 3               
000DC3r 3  B5 07                        lda 7,x         ; MSB of lower word
000DC5r 3  F5 03                        sbc 3,x
000DC7r 3  95 07                        sta 7,x
000DC9r 3               
000DC9r 3  B5 04                        lda 4,x         ; LSB of upper word
000DCBr 3  F5 00                        sbc 0,x
000DCDr 3  95 04                        sta 4,x
000DCFr 3               
000DCFr 3  B5 05                        lda 5,x         ; MSB of upper word
000DD1r 3  F5 01                        sbc 1,x
000DD3r 3  95 05                        sta 5,x
000DD5r 3               
000DD5r 3  E8                           inx
000DD6r 3  E8                           inx
000DD7r 3  E8                           inx
000DD8r 3  E8                           inx
000DD9r 3               
000DD9r 3  60           z_d_minus:      rts
000DDAr 3               
000DDAr 3               
000DDAr 3               
000DDAr 3               ; ## D_PLUS ( d d -- d ) "Add two double-celled numbers"
000DDAr 3               ; ## "d+"  auto  ANS double
000DDAr 3                       ; """https://forth-standard.org/standard/double/DPlus"""
000DDAr 3               
000DDAr 3               xt_d_plus:
000DDAr 3  20 rr rr                     jsr underflow_4 ; two double numbers
000DDDr 3               
000DDDr 3  18                           clc
000DDEr 3  B5 02                        lda 2,x         ; LSB of lower word
000DE0r 3  75 06                        adc 6,x
000DE2r 3  95 06                        sta 6,x
000DE4r 3               
000DE4r 3  B5 03                        lda 3,x         ; MSB of lower word
000DE6r 3  75 07                        adc 7,x
000DE8r 3  95 07                        sta 7,x
000DEAr 3               
000DEAr 3  B5 00                        lda 0,x         ; LSB of upper word
000DECr 3  75 04                        adc 4,x
000DEEr 3  95 04                        sta 4,x
000DF0r 3               
000DF0r 3  B5 01                        lda 1,x         ; MSB of upper word
000DF2r 3  75 05                        adc 5,x
000DF4r 3  95 05                        sta 5,x
000DF6r 3               
000DF6r 3  E8                           inx
000DF7r 3  E8                           inx
000DF8r 3  E8                           inx
000DF9r 3  E8                           inx
000DFAr 3               
000DFAr 3  60           z_d_plus:       rts
000DFBr 3               
000DFBr 3               
000DFBr 3               
000DFBr 3               ; ## D_TO_S ( d -- n ) "Convert a double number to single"
000DFBr 3               ; ## "d>s"  auto  ANS double
000DFBr 3                       ; """https://forth-standard.org/standard/double/DtoS
000DFBr 3                       ; Though this is basically just DROP, we keep it
000DFBr 3                       ; separate so we can test for underflow
000DFBr 3                       ; """
000DFBr 3               
000DFBr 3               xt_d_to_s:
000DFBr 3  20 rr rr                     jsr underflow_2
000DFEr 3               
000DFEr 3  E8                           inx
000DFFr 3  E8                           inx
000E00r 3               
000E00r 3  60           z_d_to_s:       rts
000E01r 3               
000E01r 3               
000E01r 3               
000E01r 3               ; ## DABS ( d -- d ) "Return the absolute value of a double"
000E01r 3               ; ## "dabs"  auto  ANS double
000E01r 3                       ; """https://forth-standard.org/standard/double/DABS"""
000E01r 3               
000E01r 3               xt_dabs:
000E01r 3  20 rr rr                     jsr underflow_2 ; double number
000E04r 3               
000E04r 3  B5 01                        lda 1,x         ; MSB of high cell
000E06r 3  10 17                        bpl @done       ; positive, we get off light
000E08r 3               
000E08r 3                               ; negative, calculate 0 - d
000E08r 3  A0 00                        ldy #0
000E0Ar 3  38                           sec
000E0Br 3               
000E0Br 3  98                           tya
000E0Cr 3  F5 02                        sbc 2,x         ; LSB of low cell
000E0Er 3  95 02                        sta 2,x
000E10r 3               
000E10r 3  98                           tya
000E11r 3  F5 03                        sbc 3,x         ; MSB of low cell
000E13r 3  95 03                        sta 3,x
000E15r 3               
000E15r 3  98                           tya
000E16r 3  F5 00                        sbc 0,x         ; LSB of high cell
000E18r 3  95 00                        sta 0,x
000E1Ar 3               
000E1Ar 3  98                           tya
000E1Br 3  F5 01                        sbc 1,x         ; MSB of high cell
000E1Dr 3  95 01                        sta 1,x
000E1Fr 3               @done:
000E1Fr 3  60           z_dabs:         rts
000E20r 3               
000E20r 3               
000E20r 3               
000E20r 3               ; ## DECIMAL ( -- ) "Change radix base to decimal"
000E20r 3               ; ## "decimal"  auto  ANS core
000E20r 3                       ; """https://forth-standard.org/standard/core/DECIMAL"""
000E20r 3               xt_decimal:
000E20r 3  A9 0A                        lda #10
000E22r 3  85 rr                        sta base
000E24r 3  64 rr                        stz base+1              ; paranoid
000E26r 3               
000E26r 3  60           z_decimal:      rts
000E27r 3               
000E27r 3               
000E27r 3               ; ## DEFER ( "name" -- ) "Create a placeholder for words by name"
000E27r 3               ; ## "defer"  auto  ANS core ext
000E27r 3                       ; """https://forth-standard.org/standard/core/DEFER
000E27r 3                       ; Reserve an name that can be linked to various xt by IS.
000E27r 3                       ;
000E27r 3                       ; The ANS reference implementation is
000E27r 3                       ;       CREATE ['] ABORT , DOES> @ EXECUTE ;
000E27r 3                       ; But we use this routine as a low-level word so things go faster
000E27r 3               
000E27r 3               xt_defer:
000E27r 3  20 rr rr                     jsr xt_create
000E2Ar 3               
000E2Ar 3                               ; CREATE by default installs a subroutine jump to DOVAR,
000E2Ar 3                               ; but we actually want DODEFER this time. Go back two
000E2Ar 3                               ; bytes and repace the subroutine jump target
000E2Ar 3  A5 rr                        lda cp          ; LSB
000E2Cr 3  38                           sec
000E2Dr 3  E9 02                        sbc #2
000E2Fr 3  85 rr                        sta tmp1
000E31r 3               
000E31r 3  A5 rr                        lda cp+1        ; MSB
000E33r 3  E9 00                        sbc #0          ; we only care about the borrow
000E35r 3  85 rr                        sta tmp1+1
000E37r 3               
000E37r 3                               ; Save the target address
000E37r 3  A0 00                        ldy #0
000E39r 3  A9 rr                        lda #<dodefer   ; LSB
000E3Br 3  91 rr                        sta (tmp1),y
000E3Dr 3  C8                           iny
000E3Er 3  A9 rr                        lda #>dodefer   ; MSB
000E40r 3  91 rr                        sta (tmp1),y
000E42r 3               
000E42r 3               
000E42r 3                               ; DODEFER executes the next address it finds after
000E42r 3                               ; its call. As default, we include the error
000E42r 3                               ; "Defer not defined"
000E42r 3  A9 rr                        lda #<defer_error
000E44r 3  92 rr                        sta (cp)
000E46r 3  E6 rr                        inc cp
000E48r 3  D0 02                        bne @1
000E4Ar 3  E6 rr                        inc cp+1
000E4Cr 3               @1:
000E4Cr 3  A9 rr                        lda #>defer_error
000E4Er 3  92 rr                        sta (cp)
000E50r 3  E6 rr                        inc cp
000E52r 3  D0 02                        bne @2
000E54r 3  E6 rr                        inc cp+1
000E56r 3               @2:
000E56r 3  20 rr rr                     jsr adjust_z    ; adjust header to correct length
000E59r 3               
000E59r 3  60           z_defer:        rts
000E5Ar 3               
000E5Ar 3               
000E5Ar 3               
000E5Ar 3               ; ## DEFER_FETCH ( xt1 -- xt2 ) "Get the current XT for a deferred word"
000E5Ar 3               ; ## "defer@"  auto  ANS core ext
000E5Ar 3                       ; """http://forth-standard.org/standard/core/DEFERFetch"""
000E5Ar 3               
000E5Ar 3               xt_defer_fetch:
000E5Ar 3                               ; No underflow checking as >BODY does it.
000E5Ar 3  20 rr rr                     jsr xt_to_body
000E5Dr 3  20 rr rr                     jsr xt_fetch
000E60r 3  60           z_defer_fetch:  rts
000E61r 3               
000E61r 3               
000E61r 3               
000E61r 3               ; ## DEFER_STORE ( xt2 x1 -- ) "Set xt1 to execute xt2"
000E61r 3               ; ## "defer!"  auto  ANS core ext
000E61r 3                       ; """http://forth-standard.org/standard/core/DEFERStore"""
000E61r 3               
000E61r 3               xt_defer_store:
000E61r 3                               ; No underflow checking as >BODY and ! do it.
000E61r 3  20 rr rr                     jsr xt_to_body
000E64r 3  20 rr rr                     jsr xt_store
000E67r 3  60           z_defer_store:  rts
000E68r 3               
000E68r 3               
000E68r 3               
000E68r 3               ; ## DEFINITIONS ( -- ) "Make first wordlist in search order the current wordlist"
000E68r 3               ; ## "definitions" auto ANS search
000E68r 3               xt_definitions:
000E68r 3  A0 1F                        ldy #search_order_offset    ; Transfer byte variable
000E6Ar 3  B1 rr                        lda (up),y                  ; SEARCH_ORDER[0] to
000E6Cr 3  A0 04                        ldy #current_offset         ; byte variable CURRENT.
000E6Er 3  91 rr                        sta (up),y
000E70r 3  60           z_definitions:  rts
000E71r 3               
000E71r 3               
000E71r 3               ; ## DEPTH ( -- u ) "Get number of cells (not bytes) used by stack"
000E71r 3               ; ## "depth"  auto  ANS core
000E71r 3                       ; """https://forth-standard.org/standard/core/DEPTH"""
000E71r 3               xt_depth:
000E71r 3  A9 rr                        lda #dsp0
000E73r 3  86 rr                        stx tmpdsp
000E75r 3  38                           sec
000E76r 3  E5 rr                        sbc tmpdsp
000E78r 3               
000E78r 3                               ; divide by two because each cell is two bytes
000E78r 3  4A                           lsr
000E79r 3               
000E79r 3  CA                           dex
000E7Ar 3  CA                           dex
000E7Br 3  95 00                        sta 0,x
000E7Dr 3  74 01                        stz 1,x
000E7Fr 3               
000E7Fr 3  60           z_depth:        rts
000E80r 3               
000E80r 3               
000E80r 3               ; ## DIGIT_QUESTION ( char -- u f | char f ) "Convert ASCII char to number"
000E80r 3               ; ## "digit?"  auto  Tali Forth
000E80r 3                       ; """Inspired by the pForth instruction DIGIT, see
000E80r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
000E80r 3                       ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to
000E80r 3                       ; pForth, we get the base (radix) ourselves instead of having the
000E80r 3                       ; user provide it. There is no standard name for this routine, which
000E80r 3                       ; itself is not ANS; we use DIGIT? following pForth and Gforth.
000E80r 3                       ; """
000E80r 3               
000E80r 3               xt_digit_question:
000E80r 3  20 rr rr                     jsr underflow_1
000E83r 3               
000E83r 3                               ; one way or another, we're going to need room for the
000E83r 3                               ; flag on the stack
000E83r 3  CA                           dex
000E84r 3  CA                           dex
000E85r 3  74 00                        stz 0,x                 ; default flag is failure
000E87r 3  74 01                        stz 1,x
000E89r 3  74 03                        stz 3,x                 ; paranoid
000E8Br 3               
000E8Br 3                               ; Check the character, now in the LSB of NOS. First, make
000E8Br 3                               ; sure we're not below the ASCII code for "0"
000E8Br 3  B5 02                        lda 2,x
000E8Dr 3  C9 30                        cmp #'0'
000E8Fr 3  90 23                        bcc @done               ; failure flag already set
000E91r 3               
000E91r 3                               ; Next, see if we are below "9", because that would make
000E91r 3                               ; this a normal number
000E91r 3  C9 3A                        cmp #'9'+1               ; this is actually ":"
000E93r 3  90 12                        bcc @checkbase
000E95r 3               
000E95r 3                               ; Well, then let's see if this is the gap between "9" and "A"
000E95r 3                               ; so we can treat the whole range as a number
000E95r 3  C9 41                        cmp #'A'
000E97r 3  90 1B                        bcc @done               ; failure flag is already set
000E99r 3               
000E99r 3                               ; probably a letter, so we make sure it is uppercase
000E99r 3  C9 61                        cmp #'a'
000E9Br 3  90 07                        bcc @case_done          ; not lower case, too low
000E9Dr 3  C9 7B                        cmp #'z'+1
000E9Fr 3  B0 03                        bcs @case_done          ; not lower case, too high
000EA1r 3               
000EA1r 3  18                           clc                     ; just right
000EA2r 3  69 E0                        adc #$e0                ; offset to upper case (wraps)
000EA4r 3               
000EA4r 3               @case_done:
000EA4r 3                               ; get rid of the gap between "9" and "A" so we can treat
000EA4r 3                               ; the whole range as one number
000EA4r 3  38                           sec
000EA5r 3  E9 07                        sbc #7                  ; fall through to @checkbase
000EA7r 3               
000EA7r 3               @checkbase:
000EA7r 3                               ; we have a number, now see if it falls inside the range
000EA7r 3                               ; provided by BASE
000EA7r 3  38                           sec
000EA8r 3  E9 30                        sbc #'0'                 ; this is also the conversion step
000EAAr 3  C5 rr                        cmp base
000EACr 3  B0 06                        bcs @done               ; already have false flag
000EAEr 3               
000EAEr 3                               ; Found a legal number
000EAEr 3  95 02                        sta 2,x                 ; put number in NOS
000EB0r 3  D6 00                        dec 0,x                 ; set success flag
000EB2r 3  D6 01                        dec 1,x
000EB4r 3               
000EB4r 3               @done:
000EB4r 3               z_digit_question:
000EB4r 3  60                           rts
000EB5r 3               
000EB5r 3               
000EB5r 3               ; ## DISASM ( addr u -- ) "Disassemble a block of memory"
000EB5r 3               ; ## "disasm"  tested  Tali Forth
000EB5r 3                       ; """Convert a segment of memory to assembler output. This
000EB5r 3                       ; word is vectored so people can add their own disassembler.
000EB5r 3                       ; Natively, this produces Simpler Assembly Notation (SAN)
000EB5r 3                       ; code, see the section on The Disassembler in the manual and
000EB5r 3                       ; the file disassembler.asm for more details.
000EB5r 3                       ; """
000EB5r 3               xt_disasm:
000EB5r 3  20 rr rr                     jsr underflow_2
000EB8r 3                           .ifdef disassembler
000EB8r 3                               jsr disassembler
000EB8r 3                           .endif
000EB8r 3               
000EB8r 3  60           z_disasm:       rts
000EB9r 3               
000EB9r 3               
000EB9r 3               ; ## DNEGATE ( d -- d ) "Negate double cell number"
000EB9r 3               ; ## "dnegate"  auto  ANS double
000EB9r 3                       ; """https://forth-standard.org/standard/double/DNEGATE"""
000EB9r 3               xt_dnegate:
000EB9r 3  20 rr rr                     jsr underflow_2 ; double number
000EBCr 3               
000EBCr 3  A0 00             		ldy #0
000EBEr 3  38                           sec
000EBFr 3               
000EBFr 3  98                           tya
000EC0r 3  F5 02                        sbc 2,x         ; LSB of low cell
000EC2r 3  95 02                        sta 2,x
000EC4r 3               
000EC4r 3  98                           tya
000EC5r 3  F5 03                        sbc 3,x         ; MSB of low cell
000EC7r 3  95 03                        sta 3,x
000EC9r 3               
000EC9r 3  98                           tya
000ECAr 3  F5 00                        sbc 0,x         ; LSB of high cell
000ECCr 3  95 00                        sta 0,x
000ECEr 3               
000ECEr 3  98                           tya
000ECFr 3  F5 01                        sbc 1,x         ; MSB of high cell
000ED1r 3  95 01                        sta 1,x
000ED3r 3               
000ED3r 3  60           z_dnegate:      rts
000ED4r 3               
000ED4r 3               
000ED4r 3               ; ## QUESTION_DO ( limit start -- )(R: -- limit start) "Conditional loop start"
000ED4r 3               ; ## "?do"  auto  ANS core ext
000ED4r 3                       ; """https://forth-standard.org/standard/core/qDO"""
000ED4r 3               xt_question_do:
000ED4r 3                               ; ?DO shares most of its code with DO. We use the tmp1 flag
000ED4r 3                               ; to mark which is which
000ED4r 3  A9 FF                        lda #$ff                ; -1 is ?DO, jump to common code
000ED6r 3  85 rr                        sta tmp1
000ED8r 3  80 02                        bra do_common           ; skip flag for DO
000EDAr 3               
000EDAr 3               ; ## DO ( limit start -- )(R: -- limit start)  "Start a loop"
000EDAr 3               ; ## "do"  auto  ANS core
000EDAr 3                       ; """https://forth-standard.org/standard/core/DO
000EDAr 3                       ;
000EDAr 3                       ; Compile-time part of DO. Could be realized in Forth as
000EDAr 3                       ;       : DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY
000EDAr 3                       ; but we do it in assembler for speed. To work with LEAVE, we compile
000EDAr 3                       ; a routine that pushes the end address to the Return Stack at run
000EDAr 3                       ; time. This is based on a suggestion by Garth Wilson, see
000EDAr 3                       ; the Control Flow section of the manual for details.
000EDAr 3                       ;
000EDAr 3                       ; This may not be native compile. Don't check for a stack underflow
000EDAr 3                       ; """
000EDAr 3               
000EDAr 3               xt_do:
000EDAr 3                               ; DO and ?DO share most of their code, use tmp1 as a flag.
000EDAr 3  64 rr                        stz tmp1                ; 0 is DO, drop through to DO_COMMON
000EDCr 3               do_common:
000EDCr 3                               ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
000EDCr 3                               ; compile the address we need to LDA at runtime
000EDCr 3  CA                           dex
000EDDr 3  CA                           dex
000EDEr 3  A5 rr                        lda cp
000EE0r 3  95 00                        sta 0,x                 ; LSB
000EE2r 3  A5 rr                        lda cp+1
000EE4r 3  95 01                        sta 1,x                 ; MSB   ( limit start here )
000EE6r 3               
000EE6r 3                               ; now we compile six dummy bytes that LOOP/+LOOP will
000EE6r 3                               ; replace by the actual LDA/PHA instructions
000EE6r 3  A9 05                        lda #5                  ; we don't really care about the value,
000EE8r 3  A8                           tay                     ; so we use 5 to be tricky
000EE9r 3               @loop:
000EE9r 3  91 rr                        sta (cp),y
000EEBr 3  88                           dey
000EECr 3  10 FB                        bpl @loop
000EEEr 3               
000EEEr 3                               ; update CP
000EEEr 3  1A                           inc             ; we used 5 as a dummy value, this is why
000EEFr 3  18                           clc
000EF0r 3  65 rr                        adc cp
000EF2r 3  85 rr                        sta cp
000EF4r 3  90 02                        bcc @1
000EF6r 3  E6 rr                        inc cp+1
000EF8r 3               @1:
000EF8r 3                               ; compile the (?DO) portion of ?DO if appropriate
000EF8r 3  A5 rr                        lda tmp1
000EFAr 3  F0 17                        beq @compile_do
000EFCr 3               
000EFCr 3                               ; We came from ?DO, so compile its runtime first. We do
000EFCr 3                               ; this with a quick loop because we know it has to be
000EFCr 3                               ; Always Native anyway
000EFCr 3  A0 14                        ldy #question_do_runtime_end-question_do_runtime
000EFEr 3  5A                           phy             ; save counter to calculate new CP
000EFFr 3               @2:
000EFFr 3  B9 rr rr                     lda question_do_runtime,y
000F02r 3  91 rr                        sta (cp),y
000F04r 3  88                           dey
000F05r 3  10 F8                        bpl @2
000F07r 3               
000F07r 3                               ; adjust CP
000F07r 3  68                           pla             ; retrieve counter
000F08r 3  18                           clc
000F09r 3  65 rr                        adc cp
000F0Br 3  85 rr                        sta cp
000F0Dr 3  A5 rr                        lda cp+1
000F0Fr 3  69 00                        adc #0          ; only care about carry
000F11r 3  85 rr                        sta cp+1        ; fall through to @compile_do
000F13r 3               
000F13r 3               @compile_do:
000F13r 3                               ; compile runtime part of DO.
000F13r 3  A0 24                        ldy #do_runtime_end-do_runtime  ; counter
000F15r 3  5A                           phy             ; save counter to calculate new CP
000F16r 3               @3:
000F16r 3  B9 rr rr                     lda do_runtime,y
000F19r 3  91 rr                        sta (cp),y
000F1Br 3  88                           dey
000F1Cr 3  10 F8                        bpl @3
000F1Er 3               
000F1Er 3                               ; adjust CP
000F1Er 3  68                           pla             ; retrieve counter
000F1Fr 3  18                           clc
000F20r 3  65 rr                        adc cp
000F22r 3  85 rr                        sta cp
000F24r 3  A5 rr                        lda cp+1
000F26r 3  69 00                        adc #0          ; only care about carry
000F28r 3  85 rr                        sta cp+1
000F2Ar 3               
000F2Ar 3                               ; HERE, hardcoded for speed. We put it on the Data Stack
000F2Ar 3                               ; where LOOP/+LOOP takes it from. Note this has nothing to
000F2Ar 3                               ; do with the HERE we're saving for LEAVE
000F2Ar 3  CA                           dex
000F2Br 3  CA                           dex
000F2Cr 3  A5 rr                        lda cp          ; LSB
000F2Er 3  95 00                        sta 0,x
000F30r 3  A5 rr                        lda cp+1        ; MSB
000F32r 3  95 01                        sta 1,x
000F34r 3               z_question_do:
000F34r 3  60           z_do:           rts
000F35r 3               
000F35r 3               
000F35r 3               do_runtime:
000F35r 3                       ; """Runtime routine for DO loop. Note that ANS loops quit when the
000F35r 3                       ; boundry of limit-1 and limit is reached, a different mechanism than
000F35r 3                       ; the FIG Forth loop (you can see which version you have by running
000F35r 3                       ; a loop with start and limit as the same value, for instance
000F35r 3                       ; 0 0 DO -- these will walk through the number space). We use a
000F35r 3                       ; "fudge factor" for the limit that makes the Overflow Flag trip when
000F35r 3                       ; it is reached; see http://forum.6502.org/viewtopic.php?f=9&t=2026
000F35r 3                       ; for further discussion of this. The source given there for
000F35r 3                       ; this idea is Laxen & Perry F83. -- This routine is called (DO)
000F35r 3                       ; in some Forths. Usually, we would define this as a separate word
000F35r 3                       ; and compile it with COMPILE, and the Always Native (AN) flag.
000F35r 3                       ; However, we can do it faster if we just copy the bytes
000F35r 3                       ; of this routine with a simple loop in DO.
000F35r 3                       ; """
000F35r 3                               ; First step: create fudge factor (FUFA) by subtracting the
000F35r 3                               ; limit from $8000, the number that will trip the overflow
000F35r 3                               ; flag
000F35r 3  38                           sec
000F36r 3  A9 00                        lda #0
000F38r 3  F5 02                        sbc 2,x         ; LSB of limit
000F3Ar 3  95 02                        sta 2,x         ; save FUFA for later use
000F3Cr 3               
000F3Cr 3  A9 80                        lda #$80
000F3Er 3  F5 03                        sbc 3,x         ; MSB of limit
000F40r 3  95 03                        sta 3,x         ; save FUFA for later use
000F42r 3  48                           pha             ; FUFA replaces limit on R stack
000F43r 3  B5 02                        lda 2,x         ; LSB of limit
000F45r 3  48                           pha
000F46r 3               
000F46r 3                               ; Second step: index is FUFA plus original index
000F46r 3  18                           clc
000F47r 3  B5 00                        lda 0,x         ; LSB of original index
000F49r 3  75 02                        adc 2,x         ; add LSB of FUFA
000F4Br 3  95 00                        sta 0,x
000F4Dr 3  B5 01                        lda 1,x         ; MSB of orginal index
000F4Fr 3  75 03                        adc 3,x         ; add MSB of FUFA
000F51r 3  48                           pha
000F52r 3  B5 00                        lda 0,x         ; LSB of index
000F54r 3  48                           pha
000F55r 3               
000F55r 3                               ; we've saved the FUFA on the NOS of the R stack, so we can
000F55r 3                               ; use it later. Clean the Data Stack
000F55r 3  E8                           inx
000F56r 3  E8                           inx
000F57r 3  E8                           inx
000F58r 3  E8                           inx             ; no RTS because this is copied into code
000F59r 3               do_runtime_end:
000F59r 3               
000F59r 3               question_do_runtime:
000F59r 3               
000F59r 3                       ; """This is called (?DO) in some Forths. See the explanation at
000F59r 3                       ; do_runtime for the background on this design
000F59r 3                       ; """
000F59r 3                               ; see if TOS and NOS are equal. Change this to assembler
000F59r 3                               ; for speed
000F59r 3  20 rr rr                     jsr xt_two_dup          ; ( n1 n2 n1 n2 )
000F5Cr 3  20 rr rr                     jsr xt_equal            ; ( -- n1 n2 f )
000F5Fr 3               
000F5Fr 3  B5 00                        lda 0,x
000F61r 3  15 01                        ora 1,x
000F63r 3  F0 06                        beq @do_do
000F65r 3               
000F65r 3                               ; We're equal, so dump everything and jump beyond the loop.
000F65r 3                               ; But first, dump six entries off of the Data Stack
000F65r 3  8A                           txa
000F66r 3  18                           clc
000F67r 3  69 06                        adc #6
000F69r 3  AA                           tax
000F6Ar 3               
000F6Ar 3                               ; Then abort the whole loop
000F6Ar 3  60                           rts
000F6Br 3               @do_do:
000F6Br 3  E8                           inx             ; clear flag from EQUAL off stack
000F6Cr 3  E8                           inx             ; no RTS because this is copied into code
000F6Dr 3               question_do_runtime_end:
000F6Dr 3               
000F6Dr 3               
000F6Dr 3               
000F6Dr 3               ; ## DOES ( -- ) "Add payload when defining new words"
000F6Dr 3               ; ## "does>"  auto  ANS core
000F6Dr 3                       ; """https://forth-standard.org/standard/core/DOES
000F6Dr 3                       ; Create the payload for defining new defining words. See
000F6Dr 3                       ; http://www.bradrodriguez.com/papers/moving3.htm and
000F6Dr 3                       ; the Developer Guide in the manual for a discussion of
000F6Dr 3                       ; DOES>'s internal workings. This uses tmp1 and tmp2.
000F6Dr 3                       ; """
000F6Dr 3               
000F6Dr 3               xt_does:
000F6Dr 3                               ; compile a subroutine jump to runtime of DOES>
000F6Dr 3  A0 rr                        ldy #>does_runtime
000F6Fr 3  A9 rr                        lda #<does_runtime
000F71r 3  20 rr rr                     jsr cmpl_subroutine
000F74r 3               
000F74r 3                               ; compile a subroutine jump to DODOES. In traditional
000F74r 3                               ; terms, this is the Code Field Area (CFA) of the new
000F74r 3                               ; word
000F74r 3  A0 rr                        ldy #>dodoes
000F76r 3  A9 rr                        lda #<dodoes
000F78r 3  20 rr rr                     jsr cmpl_subroutine
000F7Br 3               
000F7Br 3  60           z_does:         rts
000F7Cr 3               
000F7Cr 3               
000F7Cr 3               does_runtime:
000F7Cr 3                       ; """Runtime portion of DOES>. This replaces the subroutine jump
000F7Cr 3                       ; to DOVAR that CREATE automatically encodes by a jump to the
000F7Cr 3                       ; address that contains a subroutine jump to DODOES. We don't
000F7Cr 3                       ; jump to DODOES directly because we need to work our magic with
000F7Cr 3                       ; the return addresses. This routine is also known as "(DOES)" in
000F7Cr 3                       ; other Forths
000F7Cr 3                       ; """
000F7Cr 3               
000F7Cr 3  7A                           ply             ; LSB
000F7Dr 3  68                           pla             ; MSB
000F7Er 3               
000F7Er 3  C8                           iny
000F7Fr 3  D0 01                        bne @1
000F81r 3  1A                           inc
000F82r 3               @1:
000F82r 3  84 rr                        sty tmp1
000F84r 3  85 rr                        sta tmp1+1
000F86r 3               
000F86r 3                               ; CREATE has also already modified the DP to point to the new
000F86r 3                               ; word. We have no idea which instructions followed the CREATE
000F86r 3                               ; command if there is a DOES> so the CP could point anywhere
000F86r 3                               ; by now. The address of the word's xt is four bytes down.
000F86r 3  20 rr rr                     jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
000F89r 3  A5 rr                        lda dp
000F8Br 3  18                           clc
000F8Cr 3  69 04                        adc #4
000F8Er 3  85 rr                        sta tmp2
000F90r 3  A5 rr                        lda dp+1
000F92r 3  69 00                        adc #0          ; we only care about the carry
000F94r 3  85 rr                        sta tmp2+1
000F96r 3               
000F96r 3                               ; Now we get that address and add one byte to skip over the JSR
000F96r 3                               ; opcode
000F96r 3  B2 rr                        lda (tmp2)
000F98r 3  18                           clc
000F99r 3  69 01                        adc #1
000F9Br 3  85 rr                        sta tmp3
000F9Dr 3  A0 01                        ldy #1
000F9Fr 3  B1 rr                        lda (tmp2),y
000FA1r 3  69 00                        adc #0          ; we only care about the carry
000FA3r 3  85 rr                        sta tmp3+1
000FA5r 3               
000FA5r 3                               ; Replace the DOVAR address with our own
000FA5r 3  A5 rr                        lda tmp1        ; LSB
000FA7r 3  92 rr                        sta (tmp3)
000FA9r 3  A5 rr                        lda tmp1+1
000FABr 3  91 rr                        sta (tmp3),y    ; Y is still 1
000FADr 3               
000FADr 3                               ; Since we removed the return address that brought us here, we
000FADr 3                               ; go back to whatever the main routine was. Otherwise, we we
000FADr 3                               ; smash into the subroutine jump to DODOES.
000FADr 3  60                           rts
000FAEr 3               
000FAEr 3               
000FAEr 3               
000FAEr 3               ; ## DOT ( u -- ) "Print TOS"
000FAEr 3               ; ## "."  auto  ANS core
000FAEr 3                       ; """https://forth-standard.org/standard/core/d"""
000FAEr 3               
000FAEr 3               xt_dot:
000FAEr 3  20 rr rr                     jsr underflow_1
000FB1r 3               
000FB1r 3  20 rr rr                     jsr xt_dup                      ; ( n n )
000FB4r 3  20 rr rr                     jsr xt_abs                      ; ( n u )
000FB7r 3  20 rr rr                     jsr xt_zero                     ; ( n u 0 )
000FBAr 3  20 rr rr                     jsr xt_less_number_sign         ; ( n u 0 )
000FBDr 3  20 rr rr                     jsr xt_number_sign_s            ; ( n ud )
000FC0r 3  20 rr rr                     jsr xt_rot                      ; ( ud n )
000FC3r 3  20 rr rr                     jsr xt_sign                     ; ( ud )
000FC6r 3  20 rr rr                     jsr xt_number_sign_greater      ; ( addr u )
000FC9r 3  20 rr rr                     jsr xt_type
000FCCr 3  20 rr rr                     jsr xt_space
000FCFr 3               
000FCFr 3  60           z_dot:          rts
000FD0r 3               
000FD0r 3               
000FD0r 3               
000FD0r 3               ; ## DOT_PAREN ( -- ) "Print input up to close paren .( comment )"
000FD0r 3               ; ## ".("  auto  ANS core
000FD0r 3                       ; """http://forth-standard.org/standard/core/Dotp"""
000FD0r 3               
000FD0r 3               xt_dot_paren:
000FD0r 3                               ; Put a right paren on the stack.
000FD0r 3  CA                           dex
000FD1r 3  CA                           dex
000FD2r 3  A9 29                        lda #41     ; Right parenthesis
000FD4r 3  95 00                        sta 0,x
000FD6r 3  74 01                        stz 1,x
000FD8r 3               
000FD8r 3  20 rr rr                     jsr xt_parse
000FDBr 3  20 rr rr                     jsr xt_type
000FDEr 3               
000FDEr 3  60           z_dot_paren:    rts
000FDFr 3               
000FDFr 3               
000FDFr 3               
000FDFr 3               ; ## DOT_QUOTE ( "string" -- ) "Print string from compiled word"
000FDFr 3               ; ## ".""  auto  ANS core ext
000FDFr 3                       ; """https://forth-standard.org/standard/core/Dotq
000FDFr 3                       ; Compile string that is printed during run time. ANS Forth wants
000FDFr 3                       ; this to be compile-only, even though everybody and their friend
000FDFr 3                       ; uses it for everything. We follow the book here, and recommend
000FDFr 3                       ; `.(` for general printing.
000FDFr 3                       ; """
000FDFr 3               
000FDFr 3               xt_dot_quote:
000FDFr 3                               ; we let S" do the heavy lifting. Since we're in
000FDFr 3                               ; compile mode, it will save the string and reproduce it
000FDFr 3                               ; during runtime
000FDFr 3  20 rr rr                     jsr xt_s_quote
000FE2r 3               
000FE2r 3                               ; We then let TYPE do the actual printing
000FE2r 3  A0 rr                        ldy #>xt_type
000FE4r 3  A9 rr                        lda #<xt_type
000FE6r 3  20 rr rr                     jsr cmpl_subroutine
000FE9r 3               
000FE9r 3  60           z_dot_quote:    rts
000FEAr 3               
000FEAr 3               
000FEAr 3               
000FEAr 3               ; ## DOT_R ( n u -- ) "Print NOS as unsigned number with TOS with"
000FEAr 3               ; ## ".r"  tested  ANS core ext
000FEAr 3                       ; """https://forth-standard.org/standard/core/DotR
000FEAr 3                       ;
000FEAr 3                       ; Based on the Forth code
000FEAr 3                       ;  : .R  >R DUP ABS 0 <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
000FEAr 3                       ; """
000FEAr 3               
000FEAr 3               xt_dot_r:
000FEAr 3  20 rr rr                     jsr underflow_2
000FEDr 3               
000FEDr 3  20 rr rr                     jsr xt_to_r
000FF0r 3  20 rr rr                     jsr xt_dup
000FF3r 3  20 rr rr                     jsr xt_abs
000FF6r 3  20 rr rr                     jsr xt_zero
000FF9r 3  20 rr rr                     jsr xt_less_number_sign
000FFCr 3  20 rr rr                     jsr xt_number_sign_s
000FFFr 3  20 rr rr                     jsr xt_rot
001002r 3  20 rr rr                     jsr xt_sign
001005r 3  20 rr rr                     jsr xt_number_sign_greater
001008r 3  20 rr rr                     jsr xt_r_from
00100Br 3  20 rr rr                     jsr xt_over
00100Er 3  20 rr rr                     jsr xt_minus
001011r 3  20 rr rr                     jsr xt_spaces
001014r 3  20 rr rr                     jsr xt_type
001017r 3               
001017r 3  60           z_dot_r:        rts
001018r 3               
001018r 3               
001018r 3               
001018r 3               ; ## DOT_S ( -- ) "Print content of Data Stack"
001018r 3               ; ## ".s"  tested  ANS tools
001018r 3                       ; """https://forth-standard.org/standard/tools/DotS
001018r 3                       ; Print content of Data Stack non-distructively. We follow the format
001018r 3                       ; of Gforth and print the number of elements first in brackets,
001018r 3                       ; followed by the Data Stack content (if any).
001018r 3                       ;
001018r 3                       ; Since this is for humans, we don't have to worry about speed.
001018r 3                       ; """
001018r 3               
001018r 3               xt_dot_s:
001018r 3  20 rr rr                     jsr xt_depth    ; ( -- u )
00101Br 3               
00101Br 3                               ; Print stack depth in brackets
00101Br 3  A9 3C                        lda #$3c        ; ASCII for "<"
00101Dr 3  20 rr rr                     jsr emit_a
001020r 3               
001020r 3                               ; We keep a copy of the number of the things on the stack
001020r 3                               ; to use as a counter later down. This assumes that there
001020r 3                               ; are less than 255 elements on the stack
001020r 3  B5 00                        lda 0,x
001022r 3  48                           pha
001023r 3               
001023r 3                               ; print unsigned number without the trailing space
001023r 3  CA                           dex             ; DUP
001024r 3  CA                           dex
001025r 3  95 00                        sta 0,x
001027r 3  74 01                        stz 1,x
001029r 3               
001029r 3  20 rr rr                     jsr print_u
00102Cr 3               
00102Cr 3  A9 3E                        lda #$3e        ; ASCII for ">"
00102Er 3  20 rr rr                     jsr emit_a
001031r 3  A9 20                        lda #AscSP      ; ASCII for SPACE
001033r 3  20 rr rr                     jsr emit_a
001036r 3               
001036r 3  E8                           inx
001037r 3  E8                           inx
001038r 3               
001038r 3                               ; There will be lots of cases where the stack is empty. If that
001038r 3                               ; is so, get out of here quickly
001038r 3  E0 rr                        cpx #dsp0
00103Ar 3  F0 1E                        beq @done
00103Cr 3               
00103Cr 3               @have_stack:
00103Cr 3                               ; We have at least one element on the stack. The depth of the
00103Cr 3                               ; stack is on the stack, we can use it as a counter. We go
00103Cr 3                               ; from bottom to top
00103Cr 3  7A                           ply
00103Dr 3               
00103Dr 3  A9 rr                        lda #dsp0-1     ; go up one to avoid garbage
00103Fr 3  85 rr                        sta tmp3
001041r 3  64 rr                        stz tmp3+1      ; must be zero page on the 65c02
001043r 3               @loop:
001043r 3  CA                           dex
001044r 3  CA                           dex
001045r 3               
001045r 3  B2 rr                        lda (tmp3)
001047r 3  95 01                        sta 1,x
001049r 3  C6 rr                        dec tmp3
00104Br 3               
00104Br 3  B2 rr                        lda (tmp3)
00104Dr 3  95 00                        sta 0,x
00104Fr 3  C6 rr                        dec tmp3
001051r 3  5A                           phy
001052r 3               
001052r 3  20 rr rr                     jsr xt_dot
001055r 3               
001055r 3  7A                           ply
001056r 3  88                           dey
001057r 3  D0 EA                        bne @loop
001059r 3               
001059r 3  48                           pha             ; dummy to balance stack
00105Ar 3               @done:
00105Ar 3  68                           pla
00105Br 3  60           z_dot_s:        rts
00105Cr 3               
00105Cr 3               
00105Cr 3               
00105Cr 3               ; ## D_DOT ( d -- ) "Print double"
00105Cr 3               ; ## "d."  tested  ANS double
00105Cr 3                       ; """http://forth-standard.org/standard/double/Dd"""
00105Cr 3                       ;
00105Cr 3                       ; From the Forth code:
00105Cr 3                       ; : D. TUCK DABS <# #S ROT SIGN #> TYPE SPACE ;
00105Cr 3                       ; """
00105Cr 3               
00105Cr 3               xt_d_dot:
00105Cr 3  20 rr rr                     jsr underflow_2
00105Fr 3               
00105Fr 3  20 rr rr                     jsr xt_tuck
001062r 3  20 rr rr                     jsr xt_dabs
001065r 3  20 rr rr                     jsr xt_less_number_sign
001068r 3  20 rr rr                     jsr xt_number_sign_s
00106Br 3  20 rr rr                     jsr xt_rot
00106Er 3  20 rr rr                     jsr xt_sign
001071r 3  20 rr rr                     jsr xt_number_sign_greater
001074r 3  20 rr rr                     jsr xt_type
001077r 3  20 rr rr                     jsr xt_space
00107Ar 3               
00107Ar 3  60           z_d_dot:        rts
00107Br 3               
00107Br 3               
00107Br 3               
00107Br 3               ; ## D_DOT_R ( d u -- ) "Print double right-justified u wide"
00107Br 3               ; ## "d.r"  tested  ANS double
00107Br 3                       ; """http://forth-standard.org/standard/double/DDotR"""
00107Br 3                       ; Based on the Forth code
00107Br 3                       ;  : D.R >R TUCK DABS <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
00107Br 3                       ; """
00107Br 3               
00107Br 3               xt_d_dot_r:
00107Br 3  20 rr rr                     jsr underflow_3
00107Er 3                               ; From the forth code:
00107Er 3  20 rr rr                     jsr xt_to_r
001081r 3  20 rr rr                     jsr xt_tuck
001084r 3  20 rr rr                     jsr xt_dabs
001087r 3  20 rr rr                     jsr xt_less_number_sign
00108Ar 3  20 rr rr                     jsr xt_number_sign_s
00108Dr 3  20 rr rr                     jsr xt_rot
001090r 3  20 rr rr                     jsr xt_sign
001093r 3  20 rr rr                     jsr xt_number_sign_greater
001096r 3  20 rr rr                     jsr xt_r_from
001099r 3  20 rr rr                     jsr xt_over
00109Cr 3  20 rr rr                     jsr xt_minus
00109Fr 3  20 rr rr                     jsr xt_spaces
0010A2r 3  20 rr rr                     jsr xt_type
0010A5r 3               
0010A5r 3  60           z_d_dot_r:      rts
0010A6r 3               
0010A6r 3               
0010A6r 3               
0010A6r 3               ; ## DROP ( u -- ) "Pop top entry on Data Stack"
0010A6r 3               ; ## "drop"  auto  ANS core
0010A6r 3                       ; """https://forth-standard.org/standard/core/DROP"""
0010A6r 3               xt_drop:
0010A6r 3  20 rr rr                     jsr underflow_1
0010A9r 3               
0010A9r 3  E8                           inx
0010AAr 3  E8                           inx
0010ABr 3               
0010ABr 3  60           z_drop:         rts
0010ACr 3               
0010ACr 3               
0010ACr 3               ; ## DUMP ( addr u -- ) "Display a memory region"
0010ACr 3               ; ## "dump"  tested  ANS tools
0010ACr 3                       ; """https://forth-standard.org/standard/tools/DUMP
0010ACr 3                       ;
0010ACr 3                       ; DUMP's exact output is defined as "implementation dependent".
0010ACr 3                       ; This is in assembler because it is
0010ACr 3                       ; useful for testing and development, so we want to have it work
0010ACr 3                       ; as soon as possible. Uses TMP2
0010ACr 3                       ; """
0010ACr 3               
0010ACr 3               xt_dump:
0010ACr 3  20 rr rr                     jsr underflow_2
0010AFr 3               @row:
0010AFr 3                               ; start counter for 16 numbers per row
0010AFr 3  A0 10                        ldy #16
0010B1r 3               
0010B1r 3                               ; We use TMP2 as the index for the ASCII characters
0010B1r 3                               ; that we print at the and of the hex block. We
0010B1r 3                               ; start saving them at HERE (CP)
0010B1r 3  64 rr                        stz tmp2
0010B3r 3               
0010B3r 3  20 rr rr                     jsr xt_cr
0010B6r 3               
0010B6r 3                               ; print address number
0010B6r 3  B5 03                        lda 3,x
0010B8r 3  20 rr rr                     jsr byte_to_ascii
0010BBr 3  B5 02                        lda 2,x
0010BDr 3  20 rr rr                     jsr byte_to_ascii
0010C0r 3               
0010C0r 3  20 rr rr                     jsr xt_space
0010C3r 3  20 rr rr                     jsr xt_space
0010C6r 3               @loop:
0010C6r 3                               ; if there are zero bytes left to display, we're done
0010C6r 3  B5 00                        lda 0,x
0010C8r 3  15 01                        ora 1,x
0010CAr 3  F0 39                        beq @all_printed
0010CCr 3               
0010CCr 3                               ; dump the contents
0010CCr 3  A1 02                        lda (2,x)
0010CEr 3  48                           pha                     ; byte_to_ascii destroys A
0010CFr 3  20 rr rr                     jsr byte_to_ascii
0010D2r 3  20 rr rr                     jsr xt_space
0010D5r 3  68                           pla
0010D6r 3               
0010D6r 3                               ; Handle ASCII printing
0010D6r 3  20 rr rr                     jsr is_printable
0010D9r 3  B0 02                        bcs @printable
0010DBr 3  A9 2E                        lda #'.'                 ; Print dot if not printable
0010DDr 3               @printable:
0010DDr 3  5A                           phy                     ; save counter
0010DEr 3  A4 rr                        ldy tmp2
0010E0r 3  91 rr                        sta (cp),y
0010E2r 3  E6 rr                        inc tmp2
0010E4r 3  7A                           ply
0010E5r 3               
0010E5r 3                               ; extra space after eight bytes
0010E5r 3  C0 09                        cpy #9
0010E7r 3  D0 03                        bne @next_char
0010E9r 3  20 rr rr                     jsr xt_space
0010ECr 3               
0010ECr 3               @next_char:
0010ECr 3  F6 02                        inc 2,x
0010EEr 3  D0 02                        bne @counter
0010F0r 3  F6 03                        inc 3,x
0010F2r 3               
0010F2r 3               @counter:
0010F2r 3                               ; loop counter
0010F2r 3  B5 00                        lda 0,x
0010F4r 3  D0 02                        bne @1
0010F6r 3  D6 01                        dec 1,x
0010F8r 3               @1:
0010F8r 3  D6 00                        dec 0,x
0010FAr 3  88                           dey
0010FBr 3  D0 C9                        bne @loop               ; next byte
0010FDr 3               
0010FDr 3                               ; Done with one line, print the ASCII version of these
0010FDr 3                               ; characters
0010FDr 3  20 rr rr                     jsr xt_space
001100r 3  20 rr rr                     jsr print_ascii
001103r 3               
001103r 3  80 AA                        bra @row                ; new row
001105r 3               
001105r 3               @all_printed:
001105r 3                               ; See if there are any ASCII characters in the buffer
001105r 3                               ; left to print
001105r 3  A5 rr                        lda tmp2
001107r 3  F0 06                        beq @done
001109r 3               
001109r 3                               ; In theory, we could try to make the ASCII part line
001109r 3                               ; up with the line before it. But that is a hassle (we
001109r 3                               ; use three bytes for each missed hex entry, and
001109r 3                               ; then there is the gap after eight entries) and it
001109r 3                               ; makes it harder to read. We settle for one extra
001109r 3                               ; space instead for the moment
001109r 3  20 rr rr                     jsr xt_space
00110Cr 3  20 rr rr                     jsr print_ascii
00110Fr 3               @done:
00110Fr 3  20 rr rr                     jsr xt_two_drop         ; one byte less than 4x INX
001112r 3  60           z_dump:         rts
001113r 3               
001113r 3               
001113r 3               print_ascii:
001113r 3                               ; Print the ASCII characters that we have saved from
001113r 3                               ; HERE (CP) to HERE plus whatever is in TMP2. This routine
001113r 3                               ; is not compiled (DUMP is probably never compiled anyway)
001113r 3                               ; but we keep it inside the scope of DUMP.
001113r 3  A0 00                        ldy #0
001115r 3               @ascii_loop:
001115r 3  B1 rr                        lda (cp),y
001117r 3  20 rr rr                     jsr emit_a
00111Ar 3  C8                           iny
00111Br 3               
00111Br 3                               ; extra space after eight chars
00111Br 3  C0 08                        cpy #8
00111Dr 3  D0 03                        bne @1
00111Fr 3  20 rr rr                     jsr xt_space
001122r 3               @1:
001122r 3  C6 rr                        dec tmp2
001124r 3  D0 EF                        bne @ascii_loop
001126r 3               
001126r 3  60                           rts
001127r 3               
001127r 3               
001127r 3               
001127r 3               ; ## DUP ( u -- u u ) "Duplicate TOS"
001127r 3               ; ## "dup"  auto  ANS core
001127r 3                       ; """https://forth-standard.org/standard/core/DUP"""
001127r 3               xt_dup:
001127r 3  20 rr rr                     jsr underflow_1
00112Ar 3               
00112Ar 3  CA                           dex
00112Br 3  CA                           dex
00112Cr 3               
00112Cr 3  B5 02                        lda 2,x         ; LSB
00112Er 3  95 00                        sta 0,x
001130r 3  B5 03                        lda 3,x         ; MSB
001132r 3  95 01                        sta 1,x
001134r 3               
001134r 3  60           z_dup:          rts
001135r 3               
001135r 3               
001135r 3               ; ## ED ( -- u ) "Line-based editor"
001135r 3               ; ## "ed"  fragment  Tali Forth
001135r 3                       ; """Start the line-based editor ed6502. See separate file
001135r 3                       ; ed.asm or the manual for details.
001135r 3                       ; """
001135r 3               xt_ed:
001135r 3                       .ifdef ed6502
001135r 3                               jsr ed6502      ; kept in separate file
001135r 3                       .endif
001135r 3               
001135r 3  60           z_ed:           rts
001136r 3               
001136r 3               
001136r 3               ; ## EDITOR_WORDLIST ( -- u ) "WID for the Editor wordlist"
001136r 3               ; ## "editor-wordlist"  tested  Tali Editor
001136r 3                       ; """ Commonly used like `editor-wordlist >order` to add the editor
001136r 3                       ; words to the search order so they can be used.  This will need
001136r 3                       ; to be done before any of the words marked "Tali Editor" can be
001136r 3                       ; used.  See the tutorial on Wordlists and the Search Order for
001136r 3                       ; more information.
001136r 3               
001136r 3                       ;
001136r 3                       ; This is a dummy entry, the code is shared with ONE
001136r 3                       ; """
001136r 3               
001136r 3               
001136r 3               ; ## ELSE (C: orig -- orig) ( -- ) "Conditional flow control"
001136r 3               ; ## "else"  auto  ANS core
001136r 3                       ; """http://forth-standard.org/standard/core/ELSE
001136r 3                       ;
001136r 3                       ; The code is shared with ENDOF
001136r 3                       ; """
001136r 3               
001136r 3               xt_else:
001136r 3               xt_endof:
001136r 3                               ; Put an unconditional branch.
001136r 3  A0 rr                        ldy #>branch_runtime
001138r 3  A9 rr                        lda #<branch_runtime
00113Ar 3  20 rr rr                     jsr cmpl_subroutine
00113Dr 3               
00113Dr 3                               ; Put the address of the branch address on the stack.
00113Dr 3  20 rr rr                     jsr xt_here
001140r 3               
001140r 3                               ; Use zero for the branch address for now.
001140r 3                               ; THEN will fill it in later.
001140r 3  20 rr rr                     jsr xt_zero
001143r 3  20 rr rr                     jsr xt_comma
001146r 3               
001146r 3                               ; Get the address to jump to (just after the
001146r 3                               ; unconditional branch) for the IF to jump to
001146r 3                               ; when false.
001146r 3  20 rr rr                     jsr xt_here
001149r 3  20 rr rr                     jsr xt_rot
00114Cr 3               
00114Cr 3                               ; Update the original if 0branch address.
00114Cr 3  20 rr rr                     jsr xt_store
00114Fr 3               z_else:
00114Fr 3               z_endof:
00114Fr 3  60                           rts
001150r 3               
001150r 3               
001150r 3               
001150r 3               branch_runtime:
001150r 3                       ; """Runtime component for a branch. Used by ELSE and ENDOF. This was
001150r 3                       ; formally part of a separate word BRANCH which was later removed.
001150r 3                       ; """
001150r 3               
001150r 3                               ; The address on the Return Stack points to the last byte
001150r 3                               ; of the JSR address, one byte below the branch literal
001150r 3  68                           pla
001151r 3  85 rr                        sta tmpbranch
001153r 3  68                           pla
001154r 3  85 rr                        sta tmpbranch+1
001156r 3               
001156r 3                               ; Keep in mind: the address we just popped points one byte
001156r 3                               ; lower than the branch literal we want to grab
001156r 3  A0 01                        ldy #1
001158r 3  B1 rr                        lda (tmpbranch),y  ; LSB
00115Ar 3  85 rr                        sta tmp1
00115Cr 3  C8                           iny
00115Dr 3  B1 rr                        lda (tmpbranch),y  ; MSB
00115Fr 3  85 rr                        sta tmp1+1
001161r 3               
001161r 3  6C rr rr                     jmp (tmp1)
001164r 3               
001164r 3               
001164r 3               
001164r 3               ; ## EMIT ( char -- ) "Print character to current output"
001164r 3               ; ## "emit"  auto  ANS core
001164r 3                       ; """https://forth-standard.org/standard/core/EMIT
001164r 3                       ; Run-time default for EMIT. The user can revector this by changing
001164r 3                       ; the value of the OUTPUT variable. We ignore the MSB completely, and
001164r 3                       ; do not check to see if we have been given a valid ASCII character.
001164r 3                       ; Don't make this native compile.
001164r 3                       ; """
001164r 3               
001164r 3               xt_emit:
001164r 3  20 rr rr                     jsr underflow_1
001167r 3               
001167r 3  B5 00                        lda 0,x
001169r 3  E8                           inx
00116Ar 3  E8                           inx
00116Br 3               
00116Br 3               emit_a:
00116Br 3                       ; We frequently want to print the character in A without fooling
00116Br 3                       ; around with the Data Stack. This is emit_a's job, which still
00116Br 3                       ; allows the output to be vectored. Call it with JSR as you
00116Br 3                       ; would XT_EMIT
00116Br 3  6C rr rr                     jmp (output)            ; JSR/RTS
00116Er 3               
00116Er 3               z_emit:         ; never reached
00116Er 3               
00116Er 3               
00116Er 3               
00116Er 3               ; ## EMPTY_BUFFERS ( -- ) "Empty all buffers without saving"
00116Er 3               ; ## "empty-buffers"  tested  ANS block ext
00116Er 3                       ; """https://forth-standard.org/standard/block/EMPTY-BUFFERS"""
00116Er 3               xt_empty_buffers:
00116Er 3                               ; Set the buffer status to empty.
00116Er 3  A0 2C                        ldy #buffstatus_offset
001170r 3  A9 00                        lda #0
001172r 3  91 rr                        sta (up),y      ; Only LSB is used.
001174r 3               z_empty_buffers:
001174r 3  60                           rts
001175r 3               
001175r 3               
001175r 3               ; ## ENDCASE (C: case-sys -- ) ( x -- ) "Conditional flow control"
001175r 3               ; ## "endcase"  auto  ANS core ext
001175r 3                       ; """http://forth-standard.org/standard/core/ENDCASE"""
001175r 3               
001175r 3               xt_endcase:
001175r 3                               ; Postpone DROP to remove the item
001175r 3                               ; being checked.
001175r 3  A0 rr                        ldy #>xt_drop
001177r 3  A9 rr                        lda #<xt_drop
001179r 3  20 rr rr                     jsr cmpl_subroutine
00117Cr 3               
00117Cr 3                               ; There are a number of address (of branches that need their
00117Cr 3                               ; jump addressed filled in with the address of right here).
00117Cr 3                               ; Keep calling THEN to deal with them until we reach the
00117Cr 3                               ; 0 that CASE put on the stack at the beginning.
00117Cr 3               @endcase_loop:
00117Cr 3                               ; Check for 0 on the stack.
00117Cr 3  B5 00                        lda 0,x
00117Er 3  15 01                        ora 1,x
001180r 3  F0 05                        beq @done
001182r 3               
001182r 3  20 rr rr                     jsr xt_then
001185r 3  80 F5                        bra @endcase_loop
001187r 3               @done:
001187r 3                               ; Remove the 0 from the stack.
001187r 3  E8                           inx
001188r 3  E8                           inx
001189r 3  60           z_endcase:      rts
00118Ar 3               
00118Ar 3               
00118Ar 3               
00118Ar 3               ; ## ENDOF (C: case-sys1 of-sys1-- case-sys2) ( -- ) "Conditional flow control"
00118Ar 3               ; ## "endof"  auto  ANS core ext
00118Ar 3                       ; """http://forth-standard.org/standard/core/ENDOF
00118Ar 3                       ; This is a dummy entry, the code is shared with ELSE
00118Ar 3                       ; """
00118Ar 3               
00118Ar 3               
00118Ar 3               ; ## ENVIRONMENT_Q  ( addr u -- 0 | i*x true )  "Return system information"
00118Ar 3               ; ## "environment?"  auto  ANS core
00118Ar 3                       ; """https://forth-standard.org/standard/core/ENVIRONMENTq
00118Ar 3                       ;
00118Ar 3                       ; By ANS definition, we use upper-case strings here, see the
00118Ar 3                       ; string file for details. This can be realized as a high-level
00118Ar 3                       ; Forth word as
00118Ar 3                       ;
00118Ar 3                       ; : STRING_OF POSTPONE 2OVER POSTPONE COMPARE POSTPONE 0=
00118Ar 3                       ;    POSTPONE IF POSTPONE 2DROP ; IMMEDIATE COMPILE-ONLY
00118Ar 3                       ; HEX
00118Ar 3                       ; : ENVIRONMENT? ( C-ADDR U -- FALSE | I*X TRUE )
00118Ar 3                       ; CASE
00118Ar 3                       ; S" /COUNTED-STRING"    STRING_OF  7FFF TRUE ENDOF
00118Ar 3                       ; S" /HOLD"              STRING_OF    FF TRUE ENDOF
00118Ar 3                       ; S" /PAD"               STRING_OF    54 TRUE ENDOF ( 84 DECIMAL )
00118Ar 3                       ; S" ADDRESS-UNIT-BITS"  STRING_OF     8 TRUE ENDOF
00118Ar 3                       ; S" FLOORED"            STRING_OF FALSE TRUE ENDOF ( WE HAVE SYMMETRIC )
00118Ar 3                       ; S" MAX-CHAR"           STRING_OF   255 TRUE ENDOF
00118Ar 3                       ; S" MAX-D"              STRING_OF
00118Ar 3                                                    ; 7FFFFFFF. TRUE ENDOF
00118Ar 3                       ; S" MAX-N"              STRING_OF  7FFF TRUE ENDOF
00118Ar 3                       ; S" MAX-U"              STRING_OF  FFFF TRUE ENDOF
00118Ar 3                       ; S" MAX-UD"             STRING_OF
00118Ar 3                                                    ; FFFFFFFF. TRUE ENDOF
00118Ar 3                       ; S" RETURN-STACK-CELLS" STRING_OF    80 TRUE ENDOF
00118Ar 3                       ; S" STACK-CELLS"        STRING_OF    20 TRUE ENDOF ( FROM DEFINITIONS.ASM )
00118Ar 3                       ; ( DEFAULT ) 2DROP FALSE FALSE ( ONE FALSE WILL DROPPED BY ENDCASE )
00118Ar 3                       ; ENDCASE ;
00118Ar 3                       ;
00118Ar 3                       ; but that uses lots of memory and increases the start up time. This
00118Ar 3                       ; word is rarely used so we can try to keep it short at the expense
00118Ar 3                       ; of speed.
00118Ar 3                       ; """
00118Ar 3               
00118Ar 3               xt_environment_q:
00118Ar 3  20 rr rr                     jsr underflow_1
00118Dr 3               
00118Dr 3                               ; This code is table-driven: We walk through the list of
00118Dr 3                               ; strings until we find one that matches, and then we take
00118Dr 3                               ; the equivalent data from the results table. This is made
00118Dr 3                               ; a bit harder by the fact that some of these return a
00118Dr 3                               ; double-cell number and some a single-cell one.
00118Dr 3               
00118Dr 3                               ; We will walk through the table with variables that return
00118Dr 3                               ; a single-cell result
00118Dr 3  A0 00                        ldy #00                 ; counter for table
00118Fr 3               
00118Fr 3                               ; We use a flag on the the stack to signal if we have a single-cell
00118Fr 3                               ; or double-cell number. We use 0 to signal single-cell and 1 for
00118Fr 3                               ; double-cell.
00118Fr 3  5A                           phy
001190r 3               @table_loop:
001190r 3                               ; We arrived here with the address of the string to be checked
001190r 3                               ; on the stack. We make a copy. Index is in Y
001190r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
001193r 3               
001193r 3                               ; We do our work on the TOS to speed things up
001193r 3  CA                           dex
001194r 3  CA                           dex                     ; ( addr u addr u ? )
001195r 3               
001195r 3                               ; Get address of string to check from table
001195r 3  B9 rr rr                     lda env_table_single,y
001198r 3  95 00                        sta 0,x
00119Ar 3  C8                           iny
00119Br 3  B9 rr rr                     lda env_table_single,y
00119Er 3  95 01                        sta 1,x                 ; ( addr u addr u addr-t )
0011A0r 3  C8                           iny
0011A1r 3               
0011A1r 3                               ; See if this is the last entry. The LSB is still in A
0011A1r 3  15 00                        ora 0,x
0011A3r 3  F0 4D                        beq @table_done
0011A5r 3               
0011A5r 3                               ; We have a string entry. The address there is stored in
0011A5r 3                               ; old-style address format, that is, the first byte is the
0011A5r 3                               ; length of the string
0011A5r 3  5A                           phy                     ; save Y, which is used by COUNT
0011A6r 3  20 rr rr                     jsr xt_count            ; ( addr u addr u addr-s u-s )
0011A9r 3  20 rr rr                     jsr xt_compare          ; ( addr u f )
0011ACr 3  7A                           ply
0011ADr 3               
0011ADr 3                               ; If we found a match (flag is zero -- COMPARE is weird
0011ADr 3                               ; that way), return the result
0011ADr 3  B5 00                        lda 0,x
0011AFr 3  15 01                        ora 1,x
0011B1r 3  F0 04                        beq @got_result
0011B3r 3               
0011B3r 3                               ; Flag is not zero, so not a perfect match, so try next
0011B3r 3                               ; word
0011B3r 3  E8                           inx                     ; DROP, now ( addr u )
0011B4r 3  E8                           inx
0011B5r 3               
0011B5r 3  80 D9                        bra @table_loop
0011B7r 3               
0011B7r 3               @got_result:
0011B7r 3                               ; We arrive here with ( addr u -1 ) and know that we've found
0011B7r 3                               ; a match. The index of the match+2 is in Y.
0011B7r 3  E8                           inx                     ; drop flag, now ( addr u )
0011B8r 3  E8                           inx
0011B9r 3  88                           dey                     ; go back to index we had
0011BAr 3  88                           dey
0011BBr 3               
0011BBr 3                               ; See if this is a single-cell word.
0011BBr 3  68                           pla
0011BCr 3  D0 0D                        bne @double_result
0011BEr 3               
0011BEr 3                               ; Single-cell result
0011BEr 3  B9 rr rr                     lda env_results_single,y
0011C1r 3  95 02                        sta 2,x
0011C3r 3  C8                           iny
0011C4r 3  B9 rr rr                     lda env_results_single,y
0011C7r 3  95 03                        sta 3,x                 ; ( res u )
0011C9r 3               
0011C9r 3  80 1F                        bra @set_flag
0011CBr 3               
0011CBr 3               @double_result:
0011CBr 3                               ; This is a double-celled result, which means we have to
0011CBr 3                               ; fool around with the index some more. We also need a
0011CBr 3                               ; further cell on the stack
0011CBr 3  CA                           dex                     ; ( addr u ? )
0011CCr 3  CA                           dex
0011CDr 3               
0011CDr 3                               ; We have 11 single-cell words we check, plus the 0000 as
0011CDr 3                               ; a marker for the end of the table, so we arrive here
0011CDr 3                               ; with Y as 22 or more. To get the index for the double-
0011CDr 3                               ; cell words, we move the result
0011CDr 3  98                           tya
0011CEr 3  38                           sec
0011CFr 3  E9 18                        sbc #24
0011D1r 3               
0011D1r 3                               ; We have four bytes per entry in the table, but the index
0011D1r 3                               ; keeps increasing by two, so we only have to multiply by
0011D1r 3                               ; two (shift left once) to get the right result
0011D1r 3  0A                           asl
0011D2r 3  A8                           tay
0011D3r 3               
0011D3r 3  B9 rr rr                     lda env_results_double,y
0011D6r 3  95 02                        sta 2,x
0011D8r 3  C8                           iny
0011D9r 3  B9 rr rr                     lda env_results_double,y
0011DCr 3  95 03                        sta 3,x                 ; ( res u ? )
0011DEr 3  C8                           iny
0011DFr 3               
0011DFr 3  B9 rr rr                     lda env_results_double,y
0011E2r 3  95 04                        sta 4,x
0011E4r 3  C8                           iny
0011E5r 3  B9 rr rr                     lda env_results_double,y
0011E8r 3  95 05                        sta 5,x                 ; ( res res ? )
0011EAr 3               
0011EAr 3                               ; fall through to @set_flag
0011EAr 3               @set_flag:
0011EAr 3  A9 FF                        lda #$ff
0011ECr 3  95 00                        sta 0,x
0011EEr 3  95 01                        sta 1,x                 ; ( res f )
0011F0r 3               
0011F0r 3  80 14                        bra @done
0011F2r 3               @table_done:
0011F2r 3                               ; We're done with a table, because the entry was a zero.
0011F2r 3                               ; We arrive here with ( addr u addr u 0 )
0011F2r 3               
0011F2r 3                               ; We take the flag from stack and increase it by one. If the
0011F2r 3                               ; flag is zero, we have just completed the single-cell number
0011F2r 3                               ; strings, so we in increase the flag and try again. Otherwise,
0011F2r 3                               ; we're done with the double-cell table without having found
0011F2r 3                               ; a match, and we're done
0011F2r 3  68                           pla
0011F3r 3  D0 09                        bne @no_match
0011F5r 3               
0011F5r 3                               ; Flag is zero, increase it to one and start over to check
0011F5r 3                               ; double-cell values
0011F5r 3  1A                           inc
0011F6r 3  48                           pha
0011F7r 3               
0011F7r 3  8A                           txa
0011F8r 3  18                           clc
0011F9r 3  69 06                        adc #6                  ; skip six bytes
0011FBr 3  AA                           tax                     ; ( addr u )
0011FCr 3               
0011FCr 3  80 92                        bra @table_loop
0011FEr 3               @no_match:
0011FEr 3                               ; Bummer, not found. We arrive here with
0011FEr 3                               ; ( addr u addr u 0 ) and need to return just a zero
0011FEr 3  8A                           txa
0011FFr 3  18                           clc
001200r 3  69 0A                        adc #10
001202r 3  AA                           tax                     ; ( addr ) - not ( 0 ) !
001203r 3               
001203r 3  20 rr rr                     jsr xt_false
001206r 3               @done:
001206r 3               z_environment_q:
001206r 3  60                           rts
001207r 3               
001207r 3               
001207r 3               ; Tables for ENVIRONMENT?. We use two separate ones, one for the single-cell
001207r 3               ; results and one for the double-celled results. The zero cell at the
001207r 3               ; end of each table marks its, uh, end. The strings themselves are defined
001207r 3               ; in strings.asm. Note if we add more entries to the single-cell table, we
001207r 3               ; have to adapt the result code for double printout, where we subtract 22
001207r 3               ; (two bytes each single-cell string and two bytes for the end-of-table
001207r 3               ; marker 0000
001207r 3               env_table_single:
001207r 3  rr rr rr rr          .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
00120Br 3  rr rr rr rr  
00120Fr 3  rr rr        
001211r 3  rr rr rr rr          .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
001215r 3  rr rr rr rr  
001219r 3  rr rr rr rr          .word envs_sc, envs_wl, 0000
00121Dr 3  00 00        
00121Fr 3               
00121Fr 3               env_table_double:
00121Fr 3  rr rr rr rr          .word envs_max_d, envs_max_ud, 0000
001223r 3  00 00        
001225r 3               
001225r 3               env_results_single:
001225r 3  FF 7F                .word $7FFF     ; /COUNTED-STRING
001227r 3  FF 00                .word $00FF     ; /HOLD
001229r 3  54 00                .word $0054     ; /PAD (this is 84 decimal)
00122Br 3  08 00                .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
00122Dr 3  00 00                .word 0000      ; FLOORED ("FALSE", we have symmetric)
00122Fr 3  FF 00                .word $00FF     ; MAX-CHAR
001231r 3  FF 7F                .word $7FFF     ; MAX-N
001233r 3  FF FF                .word $FFFF     ; MAX-U
001235r 3  80 00                .word $0080     ; RETURN-STACK-CELLS
001237r 3  20 00                .word $0020     ; STACK-CELLS (from definitions.asm)
001239r 3  09 00                .word $0009     ; WORDLISTS
00123Br 3               
00123Br 3               env_results_double:
00123Br 3  FF 7F FF FF          .word $7FFF, $FFFF      ; MAX-D
00123Fr 3  FF FF FF FF          .word $FFFF, $FFFF      ; MAX-UD
001243r 3               
001243r 3               
001243r 3               ; ## EQUAL ( n n -- f ) "See if TOS and NOS are equal"
001243r 3               ; ## "="  auto  ANS core
001243r 3                       ; """https://forth-standard.org/standard/core/Equal"""
001243r 3               
001243r 3               xt_equal:
001243r 3  20 rr rr                     jsr underflow_2
001246r 3               
001246r 3  B5 00                        lda 0,x                 ; LSB
001248r 3  D5 02                        cmp 2,x
00124Ar 3  D0 0A                        bne @false
00124Cr 3               
00124Cr 3  B5 01                        lda 1,x                 ; MSB
00124Er 3  D5 03                        cmp 3,x
001250r 3  D0 04                        bne @false
001252r 3               
001252r 3  A9 FF                        lda #$ff
001254r 3  80 02                        bra @done
001256r 3               
001256r 3  A9 00        @false:         lda #0                  ; drop thru to done
001258r 3               
001258r 3  95 02        @done:          sta 2,x
00125Ar 3  95 03                        sta 3,x
00125Cr 3               
00125Cr 3  E8                           inx
00125Dr 3  E8                           inx
00125Er 3               
00125Er 3  60           z_equal:        rts
00125Fr 3               
00125Fr 3               
00125Fr 3               
00125Fr 3               ; ## BLANK ( addr u -- ) "Fill memory region with spaces"
00125Fr 3               ; ## "blank"  auto  ANS string
00125Fr 3                       ; """https://forth-standard.org/standard/string/BLANK"""
00125Fr 3               xt_blank:
00125Fr 3                               ; We don't check for underflow here because
00125Fr 3                               ; we deal with that in FILL
00125Fr 3  CA                           dex
001260r 3  CA                           dex
001261r 3  A9 20                        lda #AscSP
001263r 3  95 00                        sta 0,x
001265r 3  74 01                        stz 1,x
001267r 3               
001267r 3  80 06                        bra xt_fill     ; skip over code for ERASE
001269r 3               
001269r 3               
001269r 3               ; ## ERASE ( addr u -- ) "Fill memory region with zeros"
001269r 3               ; ## "erase"  auto  ANS core ext
001269r 3                       ; """https://forth-standard.org/standard/core/ERASE
001269r 3                       ; Note that ERASE works with "address" units
001269r 3                       ; (bytes), not cells.
001269r 3                       ; """
001269r 3               
001269r 3               xt_erase:
001269r 3                               ; We don't check for underflow here because
001269r 3                               ; we deal with that in FILL
001269r 3  CA                           dex
00126Ar 3  CA                           dex
00126Br 3  74 00                        stz 0,x
00126Dr 3  74 01                        stz 1,x
00126Fr 3               
00126Fr 3                               ; fall through to FILL
00126Fr 3               
00126Fr 3               ; ## FILL ( addr u char -- ) "Fill a memory region with a character"
00126Fr 3               ; ## "fill"  auto  ANS core
00126Fr 3                       ; """https://forth-standard.org/standard/core/FILL
00126Fr 3                       ; Fill u bytes of memory with char starting at addr. Note that
00126Fr 3                       ; this works on bytes, not on cells. On an 8-bit machine such as the
00126Fr 3                       ; 65c02, this is a serious pain in the rear. It is not defined what
00126Fr 3                       ; happens when we reach the end of the address space
00126Fr 3                       ; """
00126Fr 3               xt_fill:
00126Fr 3  20 rr rr                     jsr underflow_3
001272r 3               
001272r 3                               ; We use tmp1 to hold the address
001272r 3  B5 04                        lda 4,x         ; LSB
001274r 3  85 rr                        sta tmp1
001276r 3  B5 05                        lda 5,x
001278r 3  85 rr                        sta tmp1+1
00127Ar 3               
00127Ar 3                               ; We use tmp2 to hold the counter
00127Ar 3  B5 02                        lda 2,x
00127Cr 3  85 rr                        sta tmp2
00127Er 3  B5 03                        lda 3,x
001280r 3  85 rr                        sta tmp2+1
001282r 3               
001282r 3                               ; We use Y to hold the character
001282r 3  B5 00                        lda 0,x
001284r 3  A8                           tay
001285r 3               @loop:
001285r 3                               ; Unfortunately, we also need to make sure that we don't
001285r 3                               ; write further than the end of the RAM. So RAM_END must
001285r 3                               ; be larger or equal to the current address
001285r 3  A9 80                        lda #>ram_end           ; MSB
001287r 3  C5 rr                        cmp tmp1+1
001289r 3  90 21                        bcc @done               ; RAM_END < TMP1, so leave
00128Br 3  D0 06                        bne @check_counter      ; RAM_END is not smaller and not equal
00128Dr 3               
00128Dr 3  A9 00                        lda #<ram_end           ; LSB, because MSBs were equal
00128Fr 3  C5 rr                        cmp tmp1
001291r 3  90 19                        bcc @done               ; RAM_END < TMP1, so leave
001293r 3               
001293r 3               @check_counter:
001293r 3                               ; See if our counter has reached zero
001293r 3  A5 rr                        lda tmp2
001295r 3  05 rr                        ora tmp2+1
001297r 3  F0 13                        beq @done
001299r 3               
001299r 3                               ; We're not in ROM and we still have stuff on the counter, so
001299r 3                               ; let's actually do what we came here to do
001299r 3  98                           tya
00129Ar 3  92 rr                        sta (tmp1)
00129Cr 3               
00129Cr 3                               ; Adjust the counter
00129Cr 3  A5 rr                        lda tmp2
00129Er 3  D0 02                        bne @1
0012A0r 3  C6 rr                        dec tmp2+1
0012A2r 3  C6 rr        @1:               dec tmp2
0012A4r 3               
0012A4r 3                               ; Next address
0012A4r 3  E6 rr                        inc tmp1
0012A6r 3  D0 DD                        bne @loop
0012A8r 3  E6 rr                        inc tmp1+1
0012AAr 3               
0012AAr 3  80 D9                        bra @loop
0012ACr 3               
0012ACr 3               @done:
0012ACr 3                               ; Drop three cells off the Data Stack. This uses one byte
0012ACr 3                               ; less than six times INX
0012ACr 3  8A                           txa
0012ADr 3  18                           clc
0012AEr 3  69 06                        adc #6
0012B0r 3  AA                           tax
0012B1r 3               z_blank:
0012B1r 3               z_erase:
0012B1r 3  60           z_fill:         rts
0012B2r 3               
0012B2r 3               
0012B2r 3               
0012B2r 3               ; ## EXECUTE ( xt -- ) "Jump to word based on execution token"
0012B2r 3               ; ## "execute"  auto  ANS core
0012B2r 3                       ; """https://forth-standard.org/standard/core/EXECUTE"""
0012B2r 3               xt_execute:
0012B2r 3  20 rr rr                     jsr underflow_1
0012B5r 3               
0012B5r 3  20 rr rr                     jsr doexecute   ; do not combine to JMP (native coding)
0012B8r 3               
0012B8r 3  60           z_execute:      rts
0012B9r 3               
0012B9r 3               doexecute:
0012B9r 3  B5 00                        lda 0,x
0012BBr 3  85 rr                        sta ip
0012BDr 3  B5 01                        lda 1,x
0012BFr 3  85 rr                        sta ip+1
0012C1r 3               
0012C1r 3  E8                           inx
0012C2r 3  E8                           inx
0012C3r 3               
0012C3r 3                               ; we don't need a RTS here because we highjack the RTS of
0012C3r 3                               ; the word we're calling to get back to xt_execute
0012C3r 3  6C rr rr                     jmp (ip)
0012C6r 3               
0012C6r 3               ; end of doexecute
0012C6r 3               
0012C6r 3               
0012C6r 3               ; ## EXECUTE_PARSING ( addr u xt -- ) "Pass a string to a parsing word"
0012C6r 3               ; ## "execute-parsing"  auto  Gforth
0012C6r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
0012C6r 3                       ; Execute the parsing word defined by the execution token (xt) on the
0012C6r 3                       ; string as if it were passed on the command line. See the file
0012C6r 3                       ; tests/tali.fs for examples.
0012C6r 3                       ;
0012C6r 3                       ; Note that this word is coded completely
0012C6r 3                       ; different in its Gforth version, see the file execute-parsing.fs
0012C6r 3                       ; (in /usr/share/gforth/0.7.3/compat/ on Ubuntu 18.04 LTS) for details.
0012C6r 3                       ; """
0012C6r 3               xt_execute_parsing:
0012C6r 3  20 rr rr                     jsr underflow_3
0012C9r 3               
0012C9r 3  20 rr rr                     jsr xt_input_to_r       ; save normal input for later
0012CCr 3  20 rr rr                     jsr xt_not_rote         ; -ROT ( xt addr u )
0012CFr 3               
0012CFr 3  B5 00                        lda 0,x                 ; TOS is new ciblen
0012D1r 3  85 rr                        sta ciblen
0012D3r 3  B5 01                        lda 1,x
0012D5r 3  85 rr                        sta ciblen+1
0012D7r 3               
0012D7r 3  B5 02                        lda 2,x                 ; NOS is new cib
0012D9r 3  85 rr                        sta cib
0012DBr 3  B5 03                        lda 3,x
0012DDr 3  85 rr                        sta cib+1
0012DFr 3               
0012DFr 3  64 rr                        stz toin                ; Set >IN to zero
0012E1r 3  64 rr                        stz toin+1
0012E3r 3               
0012E3r 3  20 rr rr                     jsr xt_two_drop         ; 2DROP ( xt )
0012E6r 3  20 rr rr                     jsr xt_execute
0012E9r 3               
0012E9r 3  20 rr rr                     jsr xt_r_to_input
0012ECr 3               
0012ECr 3               z_execute_parsing:
0012ECr 3  60                           rts
0012EDr 3               
0012EDr 3               
0012EDr 3               ; ## EXIT ( -- ) "Return control to the calling word immediately"
0012EDr 3               ; ## "exit"  auto  ANS core
0012EDr 3                       ; """https://forth-standard.org/standard/core/EXIT
0012EDr 3                       ; If we're in a loop, we need to UNLOOP first and get everything
0012EDr 3                       ; we we might have put on the Return Stack off as well. This should
0012EDr 3                       ; be natively compiled.
0012EDr 3                       ; """
0012EDr 3               
0012EDr 3               xt_exit:
0012EDr 3  60                           rts             ; keep before z_exit
0012EEr 3               z_exit:                         ; never reached
0012EEr 3               
0012EEr 3               
0012EEr 3               
0012EEr 3               ; ## FALSE ( -- f ) "Push flag FALSE to Data Stack"
0012EEr 3               ; ## "false"  auto  ANS core ext
0012EEr 3                       ; """https://forth-standard.org/standard/core/FALSE"""
0012EEr 3               xt_false:
0012EEr 3  CA                           dex
0012EFr 3  CA                           dex
0012F0r 3  74 00                        stz 0,x
0012F2r 3  74 01                        stz 1,x
0012F4r 3               
0012F4r 3  60           z_false:        rts
0012F5r 3               
0012F5r 3               
0012F5r 3               ; ## FETCH ( addr -- n ) "Push cell content from memory to stack"
0012F5r 3               ; ## "@"  auto  ANS core
0012F5r 3                       ; """https://forth-standard.org/standard/core/Fetch"""
0012F5r 3               xt_fetch:
0012F5r 3  20 rr rr                     jsr underflow_1
0012F8r 3               
0012F8r 3  A1 00                        lda (0,x)               ; LSB
0012FAr 3  A8                           tay
0012FBr 3  F6 00                        inc 0,x
0012FDr 3  D0 02                        bne @1
0012FFr 3  F6 01                        inc 1,x
001301r 3               @1:
001301r 3  A1 00                        lda (0,x)               ; MSB
001303r 3  95 01                        sta 1,x
001305r 3  94 00                        sty 0,x
001307r 3               
001307r 3  60           z_fetch:        rts
001308r 3               
001308r 3               
001308r 3               ; ## FIND ( caddr -- addr 0 | xt 1 | xt -1 ) "Find word in Dictionary"
001308r 3               ; ## "find"  auto  ANS core
001308r 3                       ; """https://forth-standard.org/standard/core/FIND
001308r 3                       ; Included for backwards compatibility only, because it still
001308r 3                       ; can be found in so may examples. It should, however, be replaced
001308r 3                       ; by FIND-NAME. Counted string either returns address with a FALSE
001308r 3                       ; flag if not found in the Dictionary, or the xt with a flag to
001308r 3                       ; indicate if this is immediate or not. FIND is a wrapper around
001308r 3                       ; FIND-NAME, we get this all over with as quickly as possible. See
001308r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
001308r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001308r 3                       ; """
001308r 3               
001308r 3               xt_find:
001308r 3  20 rr rr                     jsr underflow_1
00130Br 3               
00130Br 3                               ; Save address in case conversion fails. We use the
00130Br 3                               ; Return Stack instead of temporary variables like TMP1
00130Br 3                               ; because this is shorter and anybody still using FIND
00130Br 3                               ; can't be worried about speed anyway
00130Br 3  B5 01                        lda 1,x                 ; MSB
00130Dr 3  48                           pha
00130Er 3  B5 00                        lda 0,x                 ; LSB
001310r 3  48                           pha
001311r 3               
001311r 3                               ; Convert ancient-type counted string address to
001311r 3                               ; modern format
001311r 3  20 rr rr                     jsr xt_count            ; ( caddr -- addr u )
001314r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt | 0 )
001317r 3               
001317r 3  B5 00                        lda 0,x
001319r 3  15 01                        ora 1,x
00131Br 3  D0 0B                        bne @found_word
00131Dr 3               
00131Dr 3                               ; No word found. Return address of the string and a false
00131Dr 3                               ; flag
00131Dr 3  20 rr rr                     jsr xt_false            ; ( 0 0 )
001320r 3               
001320r 3                               ; The address needs to be restored.
001320r 3  68                           pla                     ; LSB of address
001321r 3  95 02                        sta 2,x
001323r 3  68                           pla
001324r 3  95 03                        sta 3,x                 ; MSB of address
001326r 3               
001326r 3  80 27                        bra @done               ; ( addr 0 )
001328r 3               
001328r 3               @found_word:
001328r 3                               ; We don't need the address after all, dump it
001328r 3  68                           pla
001329r 3  68                           pla
00132Ar 3               
00132Ar 3                               ; We arrive here with ( nt ) on the TOS. Now we have to
00132Ar 3                               ; convert the return values to FIND's format
00132Ar 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
00132Dr 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001330r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001333r 3               
001333r 3  A0 00                        ldy #0                  ; Prepare flag
001335r 3               
001335r 3                               ; The flags are in the second byte of the header
001335r 3  F6 00                        inc 0,x
001337r 3  D0 02                        bne @1
001339r 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
00133Br 3               @1:
00133Br 3  A1 00                        lda (0,x)               ; ( xt char )
00133Dr 3  29 04                        and #IM
00133Fr 3  D0 08                        bne @immediate          ; bit set, we're immediate
001341r 3               
001341r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
001343r 3  95 00                        sta 0,x
001345r 3  95 01                        sta 1,x
001347r 3  80 06                        bra @done
001349r 3               
001349r 3               @immediate:
001349r 3  A9 01                        lda #1                  ; We're immediate, return 1
00134Br 3  95 00                        sta 0,x
00134Dr 3  74 01                        stz 1,x
00134Fr 3               @done:
00134Fr 3  60           z_find:         rts
001350r 3               
001350r 3               
001350r 3               
001350r 3               ; ## FIND_NAME ( addr u -- nt|0 ) "Get the name token of input word"
001350r 3               ; ## "find-name"  auto  Gforth
001350r 3               
001350r 3               xt_find_name:
001350r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001350r 3                       ; Given a string, find the Name Token (nt) of a word or return
001350r 3                       ; zero if the word is not in the dictionary. We use this instead of
001350r 3                       ; ancient FIND to look up words in the Dictionary passed by
001350r 3                       ; PARSE-NAME. Note this returns the nt, not the xt of a word like
001350r 3                       ; FIND. To convert, use NAME>INT. This is a Gforth word. See
001350r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001350r 3                       ; FIND calls this word
001350r 3                       ; """
001350r 3  20 rr rr                     jsr underflow_2
001353r 3               
001353r 3                               ; check for special case of an empty string (length zero)
001353r 3  B5 00                        lda 0,x
001355r 3  15 01                        ora 1,x
001357r 3  D0 03                        bne @nonempty
001359r 3               
001359r 3  4C rr rr                     jmp @fail_done
00135Cr 3               
00135Cr 3               @nonempty:
00135Cr 3                               ; Set up for traversing the wordlist search order.
00135Cr 3  64 rr                        stz tmp3                ; Start at the beginning
00135Er 3               
00135Er 3               @wordlist_loop:
00135Er 3  A0 1E                        ldy #num_order_offset   ; Compare to byte variable #ORDER
001360r 3  A5 rr                        lda tmp3
001362r 3  D1 rr                        cmp (up),y              ; Check to see if we are done
001364r 3  D0 03                        bne @have_string
001366r 3               
001366r 3                               ; We ran out of wordlists to search.
001366r 3  4C rr rr                     jmp @fail_done
001369r 3               
001369r 3               @have_string:
001369r 3                               ; set up first loop iteration
001369r 3               
001369r 3                               ; Get the current wordlist id
001369r 3  18                           clc             ; SEARCH-ORDER is array of bytes.
00136Ar 3  69 1F                        adc #search_order_offset
00136Cr 3  A8                           tay
00136Dr 3  B1 rr                        lda (up),y      ; Get the id byte, which is the offset
00136Fr 3                                               ; into the cell array WORDLISTS
00136Fr 3               
00136Fr 3                               ; Get the DP for that wordlist.
00136Fr 3  0A                           asl                     ; Turn offset into cells offset.
001370r 3  18                           clc
001371r 3  69 06                        adc #wordlists_offset
001373r 3  A8                           tay
001374r 3  B1 rr                        lda (up),y
001376r 3  85 rr                        sta tmp1
001378r 3  C8                           iny
001379r 3  B1 rr                        lda (up),y
00137Br 3  85 rr                        sta tmp1+1
00137Dr 3               
00137Dr 3  B5 02                        lda 2,x                 ; Address of mystery string
00137Fr 3  85 rr                        sta tmp2
001381r 3  B5 03                        lda 3,x
001383r 3  85 rr                        sta tmp2+1
001385r 3               
001385r 3               @loop:
001385r 3                               ; first quick test: Are strings the same length?
001385r 3  B2 rr                        lda (tmp1)
001387r 3  D5 00                        cmp 0,x
001389r 3  D0 54                        bne @next_entry
00138Br 3               
00138Br 3               @compare_string:
00138Br 3                               ; are the same length, so we now have to compare each
00138Br 3                               ; character
00138Br 3               
00138Br 3                               ; second quick test: Is the first character the same?
00138Br 3  B2 rr                        lda (tmp2)      ; first character of mystery string
00138Dr 3               
00138Dr 3                               ; Lowercase the incoming charcter.
00138Dr 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
00138Fr 3  B0 07                        bcs @compare_first
001391r 3  C9 41                        cmp #$41        ; ASCII 'A'
001393r 3  90 03                        bcc @compare_first
001395r 3               
001395r 3                               ; An uppercase letter has been located.  Make it
001395r 3                               ; lowercase.
001395r 3  18                           clc
001396r 3  69 20                        adc #$20
001398r 3               
001398r 3               @compare_first:
001398r 3  A0 08                        ldy #8          ; Offset in nt to name
00139Ar 3  D1 rr                        cmp (tmp1),y    ; first character of current word
00139Cr 3  D0 41                        bne @next_entry
00139Er 3               
00139Er 3                               ; String length is the same and the first character is the
00139Er 3                               ; same. If the length of the string is 1, we're already done
00139Er 3  B5 00                        lda 0,x
0013A0r 3  3A                           dec
0013A1r 3  F0 2C                        beq @success
0013A3r 3               
0013A3r 3                               ; No such luck: The strings are the same length and the first
0013A3r 3                               ; char is the same, but the word is more than one char long.
0013A3r 3                               ; So we suck it up and compare every single character. We go
0013A3r 3                               ; from back to front, because words like CELLS and CELL+ would
0013A3r 3                               ; take longer otherwise. We can also shorten the loop by one
0013A3r 3                               ; because we've already compared the first char.
0013A3r 3               
0013A3r 3                               ; The string of the word we're testing against is 8 bytes down
0013A3r 3  A5 rr                        lda tmp1
0013A5r 3  48                           pha             ; Preserve tmp1 on the return stack.
0013A6r 3  18                           clc
0013A7r 3  69 08                        adc #8
0013A9r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
0013ABr 3  A5 rr                        lda tmp1+1
0013ADr 3  48                           pha             ; Preserve tmp1+1 on the return stack.
0013AEr 3  69 00                        adc #0          ; we only need the carry
0013B0r 3  85 rr                        sta tmp1+1
0013B2r 3               
0013B2r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
0013B4r 3  88                           dey
0013B5r 3               
0013B5r 3               @string_loop:
0013B5r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
0013B7r 3               
0013B7r 3                               ; Lowercase the incoming charcter.
0013B7r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
0013B9r 3  B0 07                        bcs @check_char
0013BBr 3  C9 41                        cmp #$41        ; ASCII 'A'
0013BDr 3  90 03                        bcc @check_char
0013BFr 3               
0013BFr 3                               ; An uppercase letter has been located.  Make it
0013BFr 3                               ; lowercase.
0013BFr 3  18                           clc
0013C0r 3  69 20                        adc #$20
0013C2r 3               
0013C2r 3               @check_char:
0013C2r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
0013C4r 3  D0 13                        bne @next_entry_tmp1
0013C6r 3               
0013C6r 3  88                           dey
0013C7r 3  D0 EC                        bne @string_loop
0013C9r 3               
0013C9r 3               @success_tmp1:
0013C9r 3  68                           pla             ; Restore tmp1 from the return stack.
0013CAr 3  85 rr                        sta tmp1+1
0013CCr 3  68                           pla
0013CDr 3  85 rr                        sta tmp1
0013CFr 3               
0013CFr 3               @success:
0013CFr 3                               ; The strings match. Put correct nt NOS, because we'll drop
0013CFr 3                               ; TOS before we leave
0013CFr 3  A5 rr                        lda tmp1
0013D1r 3  95 02                        sta 2,x
0013D3r 3  A5 rr                        lda tmp1+1
0013D5r 3  95 03                        sta 3,x
0013D7r 3               
0013D7r 3  80 20                        bra @done
0013D9r 3               
0013D9r 3               @next_entry_tmp1:
0013D9r 3  68                           pla             ; Restore tmp1 from the return stack.
0013DAr 3  85 rr                        sta tmp1+1
0013DCr 3  68                           pla
0013DDr 3  85 rr                        sta tmp1
0013DFr 3               
0013DFr 3               @next_entry:
0013DFr 3                               ; Not the same, so we get the next word. Next header
0013DFr 3                               ; address is two bytes down
0013DFr 3  A0 02                        ldy #2
0013E1r 3  B1 rr                        lda (tmp1),y
0013E3r 3  48                           pha
0013E4r 3  C8                           iny
0013E5r 3  B1 rr                        lda (tmp1),y
0013E7r 3  85 rr                        sta tmp1+1
0013E9r 3  68                           pla
0013EAr 3  85 rr                        sta tmp1
0013ECr 3               
0013ECr 3                               ; If we got a zero, we've walked the whole Dictionary and
0013ECr 3                               ; return as a failure, otherwise try again
0013ECr 3  05 rr                        ora tmp1+1
0013EEr 3  D0 95                        bne @loop
0013F0r 3               
0013F0r 3                               ; Move on to the next wordlist in the search order.
0013F0r 3  E6 rr                        inc tmp3
0013F2r 3  4C rr rr                     jmp @wordlist_loop
0013F5r 3               
0013F5r 3               @fail_done:
0013F5r 3  74 02                        stz 2,x         ; failure flag
0013F7r 3  74 03                        stz 3,x
0013F9r 3               @done:
0013F9r 3  E8                           inx
0013FAr 3  E8                           inx
0013FBr 3               
0013FBr 3  60           z_find_name:    rts
0013FCr 3               
0013FCr 3               
0013FCr 3               
0013FCr 3               ; ## FLUSH ( -- ) "Save dirty buffers and empty buffers"
0013FCr 3               ; ## "flush"  auto  ANS block
0013FCr 3                       ; """https://forth-standard.org/standard/block/FLUSH"""
0013FCr 3               xt_flush:
0013FCr 3  20 rr rr                     jsr xt_save_buffers
0013FFr 3               
0013FFr 3                               ; Set the buffer status to empty.
0013FFr 3  A0 2C                        ldy #buffstatus_offset
001401r 3  A9 00                        lda #0
001403r 3  91 rr                        sta (up),y      ; Only LSB is used.
001405r 3               z_flush:
001405r 3  60                           rts
001406r 3               
001406r 3               
001406r 3               ; ## FM_SLASH_MOD ( d n1  -- rem n2 ) "Floored signed division"
001406r 3               ; ## "fm/mod"  auto  ANS core
001406r 3                       ; """https://forth-standard.org/standard/core/FMDivMOD
001406r 3                       ; Note that by default, Tali Forth uses SM/REM for most things.
001406r 3                       ;
001406r 3                       ; There are various ways to realize this. We follow EForth with
001406r 3                       ;    DUP 0< DUP >R  IF NEGATE >R DNEGATE R> THEN >R DUP
001406r 3                       ;    0<  IF R@ + THEN  R> UM/MOD R> IF SWAP NEGATE SWAP THEN
001406r 3                       ; See (http://www.forth.org/eforth.html). However you can also
001406r 3                       ; go FM/MOD via SM/REM (http://www.figuk.plus.com/build/arith.htm):
001406r 3                       ;     DUP >R  SM/REM DUP 0< IF SWAP R> + SWAP 1+ ELSE  R> DROP THEN
001406r 3                       ; """
001406r 3               
001406r 3               xt_fm_slash_mod:
001406r 3  20 rr rr                     jsr underflow_3
001409r 3               
001409r 3                               ; if sign of n1 is negative, negate both n1 and d
001409r 3  64 rr                        stz tmp2        ; default: n is positive
00140Br 3  B5 01                        lda 1,x         ; MSB of n1
00140Dr 3  10 0E                        bpl @check_d
00140Fr 3               
00140Fr 3  E6 rr                        inc tmp2        ; set flag to negative for n1
001411r 3  20 rr rr                     jsr xt_negate   ; NEGATE
001414r 3  20 rr rr                     jsr xt_to_r     ; >R
001417r 3  20 rr rr                     jsr xt_dnegate  ; DNEGATE
00141Ar 3  20 rr rr                     jsr xt_r_from   ; R>
00141Dr 3               
00141Dr 3               @check_d:
00141Dr 3                               ; If d is negative, add n1 to high cell of d
00141Dr 3  B5 03                        lda 3,x         ; MSB of high word of d
00141Fr 3  10 0D                        bpl @multiply
001421r 3               
001421r 3  18                           clc
001422r 3  B5 00                        lda 0,x         ; LSB of n1
001424r 3  75 02                        adc 2,x         ; LSB of dh
001426r 3  95 02                        sta 2,x
001428r 3               
001428r 3  B5 01                        lda 1,x         ; MSB of n1
00142Ar 3  75 03                        adc 3,x         ; MSB of dh
00142Cr 3  95 03                        sta 3,x
00142Er 3               
00142Er 3               @multiply:
00142Er 3  20 rr rr                     jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
001431r 3               
001431r 3                               ; if n was negative, negate the result
001431r 3  A5 rr                        lda tmp2
001433r 3  F0 07                        beq @done
001435r 3               
001435r 3  E8                           inx             ; pretend that we SWAP
001436r 3  E8                           inx
001437r 3  20 rr rr                     jsr xt_negate
00143Ar 3  CA                           dex
00143Br 3  CA                           dex
00143Cr 3               @done:
00143Cr 3  60           z_fm_slash_mod: rts
00143Dr 3               
00143Dr 3               
00143Dr 3               
00143Dr 3               ; ## FORTH ( -- ) "Replace first WID in search order with Forth-Wordlist"
00143Dr 3               ; ## "forth"  auto  ANS search ext
00143Dr 3                       ; """https://forth-standard.org/standard/search/FORTH"""
00143Dr 3               xt_forth:
00143Dr 3  A0 1F                        ldy #search_order_offset
00143Fr 3  A9 00                        lda #0          ; The WID for Forth is 0.
001441r 3               
001441r 3  91 rr                        sta (up),y
001443r 3               z_forth:
001443r 3  60                           rts
001444r 3               
001444r 3               
001444r 3               ; This is a special jsr target to skip the zeroing of BLK at the beginning
001444r 3               ; of evaluate.  It's used by LOAD to allow setting BLK while the block is
001444r 3               ; being evaluated.  Evaluate's normal behavior is to zero BLK.
001444r 3               load_evaluate:
001444r 3                               ; Set a flag (using tmp1) to not zero BLK
001444r 3  A9 FF                        lda #$FF
001446r 3  85 rr                        sta tmp1
001448r 3  80 11                        bra load_evaluate_start
00144Ar 3               
00144Ar 3               ; ## EVALUATE ( addr u -- ) "Execute a string"
00144Ar 3               ; ## "evaluate"  auto  ANS core
00144Ar 3                       ; """https://forth-standard.org/standard/core/EVALUATE
00144Ar 3                       ; Set SOURCE-ID to -1, make addr u the input source, set >IN to zero.
00144Ar 3                       ; After processing the line, revert to old input source. We use this
00144Ar 3                       ; to compile high-level Forth words and user-defined words during
00144Ar 3                       ; start up and cold boot. In contrast to ACCEPT, we need to, uh,
00144Ar 3                       ; accept more than 255 characters here, even though it's a pain in
00144Ar 3                       ; the 8-bit.
00144Ar 3                       ; """
00144Ar 3               
00144Ar 3               xt_evaluate:
00144Ar 3  20 rr rr                     jsr underflow_2
00144Dr 3               
00144Dr 3                               ; Clear the flag to zero BLK.  Only LOAD will set the flag,
00144Dr 3                               ; and will set the block number.
00144Dr 3  64 rr                        stz tmp1
00144Fr 3               
00144Fr 3                               ; If u is zero (which can happen a lot for the user-defined
00144Fr 3                               ; words), just leave again
00144Fr 3  B5 00                        lda 0,x
001451r 3  15 01                        ora 1,x
001453r 3  D0 06                        bne _eval_got_work
001455r 3               
001455r 3  E8                           inx
001456r 3  E8                           inx
001457r 3  E8                           inx
001458r 3  E8                           inx
001459r 3               
001459r 3  80 42                        bra _eval_done
00145Br 3               
00145Br 3               ; Special entry point for LOAD to bypass the zeroing of BLK.
00145Br 3               load_evaluate_start:
00145Br 3               _eval_got_work:
00145Br 3                               ; Save the current value of BLK on the return stack.
00145Br 3  A0 01                        ldy #blk_offset+1
00145Dr 3  B1 rr                        lda (up),y
00145Fr 3  48                           pha
001460r 3  88                           dey
001461r 3  B1 rr                        lda (up),y
001463r 3  48                           pha
001464r 3               
001464r 3                               ; See if we should zero BLK.
001464r 3  A5 rr                        lda tmp1
001466r 3  D0 05                        bne @nozero
001468r 3               
001468r 3                               ; Set BLK to zero.
001468r 3                               ; lda #0        ; A is already zero from loading tmp1
001468r 3  91 rr                        sta (up),y
00146Ar 3  C8                           iny
00146Br 3  91 rr                        sta (up),y
00146Dr 3               
00146Dr 3               @nozero:
00146Dr 3                               ; Save the input state to the Return Stack
00146Dr 3  20 rr rr                     jsr xt_input_to_r
001470r 3               
001470r 3                               ; set SOURCE-ID to -1
001470r 3  A9 FF                        lda #$ff
001472r 3  85 rr                        sta insrc
001474r 3  85 rr                        sta insrc+1
001476r 3               
001476r 3                               ; set >IN to zero
001476r 3  64 rr                        stz toin
001478r 3  64 rr                        stz toin+1
00147Ar 3               
00147Ar 3                               ; move TOS and NOS to input buffers
00147Ar 3  B5 00                        lda 0,x
00147Cr 3  85 rr                        sta ciblen
00147Er 3  B5 01                        lda 1,x
001480r 3  85 rr                        sta ciblen+1
001482r 3               
001482r 3  B5 02                        lda 2,x
001484r 3  85 rr                        sta cib
001486r 3  B5 03                        lda 3,x
001488r 3  85 rr                        sta cib+1
00148Ar 3               
00148Ar 3  E8                           inx             ; A clean stack is a clean mind
00148Br 3  E8                           inx
00148Cr 3  E8                           inx
00148Dr 3  E8                           inx
00148Er 3               
00148Er 3  20 rr rr                     jsr interpret   ; ( -- )
001491r 3               
001491r 3                               ; restore variables
001491r 3  20 rr rr                     jsr xt_r_to_input
001494r 3               
001494r 3                               ; Restore BLK from the return stack.
001494r 3  A0 00                        ldy #blk_offset
001496r 3  68                           pla
001497r 3  91 rr                        sta (up),y
001499r 3  C8                           iny
00149Ar 3  68                           pla
00149Br 3  91 rr                        sta (up),y
00149Dr 3               
00149Dr 3               _eval_done:
00149Dr 3  60           z_evaluate:     rts
00149Er 3               
00149Er 3               
00149Er 3               
00149Er 3               ; ## FORTH_WORDLIST ( -- u ) "WID for the Forth Wordlist"
00149Er 3               ; ## "forth-wordlist"  auto  ANS search
00149Er 3                       ; """https://forth-standard.org/standard/search/FORTH-WORDLIST"""
00149Er 3                       ; This is a dummy entry, the actual code is shared with ZERO.
00149Er 3               
00149Er 3               
00149Er 3               ; ## GET_CURRENT ( -- wid ) "Get the id of the compilation wordlist"
00149Er 3               ; ## "get-current" auto ANS search
00149Er 3                       ; """https://forth-standard.org/standard/search/GET-CURRENT"""
00149Er 3               
00149Er 3               xt_get_current:
00149Er 3                               ; This is a little different than some of the variables
00149Er 3                               ; in the user area as we want the value rather than
00149Er 3                               ; the address.
00149Er 3  CA                           dex
00149Fr 3  CA                           dex
0014A0r 3  A0 04                        ldy #current_offset
0014A2r 3  B1 rr                        lda (up),y
0014A4r 3  95 00                        sta 0,x         ; CURRENT is a byte variable
0014A6r 3  74 01                        stz 1,x         ; so the MSB is zero.
0014A8r 3               
0014A8r 3  60           z_get_current:  rts
0014A9r 3               
0014A9r 3               
0014A9r 3               
0014A9r 3               ; ## GET_ORDER ( -- wid_n .. wid_1 n) "Get the current search order"
0014A9r 3               ; ## "get-order" auto ANS search
0014A9r 3                       ; """https://forth-standard.org/standard/search/GET-ORDER"""
0014A9r 3               
0014A9r 3               xt_get_order:
0014A9r 3                               ; Get #ORDER - the number of wordlists in the search order.
0014A9r 3  A0 1E                        ldy #num_order_offset
0014ABr 3  B1 rr                        lda (up),y
0014ADr 3  85 rr                        sta tmp1
0014AFr 3  F0 16                        beq @done       ; If zero, there are no wordlists.
0014B1r 3               
0014B1r 3               @loop:
0014B1r 3                               ; Count down towards the front of the list.
0014B1r 3                               ; By decrementing first, we also turn the length into an offset.
0014B1r 3  C6 rr                        dec tmp1        ; Count down by bytes.
0014B3r 3               
0014B3r 3                               ; Get a pointer to the current wordlist, working back to front.
0014B3r 3  A9 1F                        lda #search_order_offset
0014B5r 3  18                           clc
0014B6r 3  65 rr                        adc tmp1
0014B8r 3  A8                           tay
0014B9r 3               
0014B9r 3                               ; Put that wordlist id on the stack.
0014B9r 3  CA                           dex
0014BAr 3  CA                           dex
0014BBr 3  B1 rr                        lda (up),y
0014BDr 3  95 00                        sta 0,x         ; Search order array is bytes, so
0014BFr 3  74 01                        stz 1,x         ; put a zero in the high byte.
0014C1r 3               
0014C1r 3                               ; See if that was the last one to process (first in the list).
0014C1r 3  A9 00                        lda #0
0014C3r 3  C5 rr                        cmp tmp1
0014C5r 3  D0 EA                        bne @loop
0014C7r 3               
0014C7r 3               @done:
0014C7r 3                               ; Put the number of items on the stack.
0014C7r 3  CA                           dex
0014C8r 3  CA                           dex
0014C9r 3  A0 1E                        ldy #num_order_offset
0014CBr 3  B1 rr                        lda (up),y
0014CDr 3  95 00                        sta 0,x
0014CFr 3  74 01                        stz 1,x         ; We only support 8 wordlists.
0014D1r 3               
0014D1r 3  60           z_get_order:    rts
0014D2r 3               
0014D2r 3               
0014D2r 3               
0014D2r 3               ; ## GREATER_THAN ( n n -- f ) "See if NOS is greater than TOS"
0014D2r 3               ; ## ">"  auto  ANS core
0014D2r 3                       ; """https://forth-standard.org/standard/core/more"""
0014D2r 3               
0014D2r 3               xt_greater_than:
0014D2r 3  20 rr rr                     jsr underflow_2
0014D5r 3               
0014D5r 3  A0 00                        ldy #0          ; default false
0014D7r 3  20 rr rr                     jsr compare_16bit
0014DAr 3               
0014DAr 3                               ; for signed numbers, NOS>TOS gives us Z=0 and N=1
0014DAr 3  F0 03                        beq @false
0014DCr 3  10 01                        bpl @false
0014DEr 3               
0014DEr 3                               ; true
0014DEr 3  88                           dey
0014DFr 3               @false:
0014DFr 3  98                           tya
0014E0r 3               
0014E0r 3  E8                           inx
0014E1r 3  E8                           inx
0014E2r 3  95 00                        sta 0,x
0014E4r 3  95 01                        sta 1,x
0014E6r 3               
0014E6r 3  60           z_greater_than: rts
0014E7r 3               
0014E7r 3               
0014E7r 3               
0014E7r 3               ; ## HERE ( -- addr ) "Put Compiler Pointer on Data Stack"
0014E7r 3               ; ## "here"  auto  ANS core
0014E7r 3                       ; """https://forth-standard.org/standard/core/HERE
0014E7r 3                       ; This code is also used by the assembler directive ARROW
0014E7r 3                       ; ("->") though as immediate"""
0014E7r 3               xt_here:
0014E7r 3               xt_asm_arrow:
0014E7r 3  CA                           dex
0014E8r 3  CA                           dex
0014E9r 3  A5 rr                        lda cp
0014EBr 3  95 00                        sta 0,x
0014EDr 3  A5 rr                        lda cp+1
0014EFr 3  95 01                        sta 1,x
0014F1r 3               
0014F1r 3               z_asm_arrow:
0014F1r 3  60           z_here:         rts
0014F2r 3               
0014F2r 3               
0014F2r 3               ; ## HEX ( -- ) "Change base radix to hexadecimal"
0014F2r 3               ; ## "hex"  auto  ANS core ext
0014F2r 3                       ; """https://forth-standard.org/standard/core/HEX"""
0014F2r 3               xt_hex:
0014F2r 3  A9 10                        lda #16
0014F4r 3  85 rr                        sta base
0014F6r 3  64 rr                        stz base+1              ; paranoid
0014F8r 3               
0014F8r 3  60           z_hex:          rts
0014F9r 3               
0014F9r 3               
0014F9r 3               ; ## HEXSTORE ( addr1 u1 addr2 -- u2 ) "Store a list of numbers"
0014F9r 3               ; ## "hexstore"  auto  Tali
0014F9r 3                       ; """Given a string addr1 u1 with numbers in the current base seperated
0014F9r 3                       ; by spaces, store the numbers at the address addr2, returning the
0014F9r 3                       ; number of elements. Non-number elements are skipped, an zero-length
0014F9r 3                       ; string produces a zero output.
0014F9r 3                       ; """
0014F9r 3               
0014F9r 3               xt_hexstore:
0014F9r 3  20 rr rr                     jsr underflow_3
0014FCr 3               
0014FCr 3  20 rr rr                     jsr xt_dup              ; Save copy of original address
0014FFr 3  20 rr rr                     jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
001502r 3               
001502r 3               @loop:
001502r 3                               ; Loop until string is totally consumed
001502r 3  B5 00                        lda 0,x
001504r 3  15 01                        ora 1,x
001506r 3  F0 36                        beq @done
001508r 3               
001508r 3  20 rr rr                     jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
00150Br 3               
00150Br 3                               ; Prepare the conversion of the number.
00150Br 3  20 rr rr                     jsr xt_two_to_r
00150Er 3  20 rr rr                     jsr xt_zero
001511r 3  20 rr rr                     jsr xt_zero
001514r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
001517r 3  20 rr rr                     jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
00151Ar 3               
00151Ar 3                               ; If u4 is not zero, we have leftover chars and have to do
00151Ar 3                               ; things differently
00151Ar 3  B5 00                        lda 0,x
00151Cr 3  15 01                        ora 1,x
00151Er 3  D0 17                        bne @have_chars_left
001520r 3               
001520r 3                               ; Normal case, this number is all done
001520r 3  20 rr rr                     jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
001523r 3  20 rr rr                     jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
001526r 3               
001526r 3                               ; Store the new value
001526r 3  20 rr rr                     jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
001529r 3  20 rr rr                     jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
00152Cr 3               
00152Cr 3                               ; Increase counter
00152Cr 3  20 rr rr                     jsr xt_r_from           ; R>
00152Fr 3  20 rr rr                     jsr xt_one_plus         ; 1+
001532r 3  20 rr rr                     jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
001535r 3  80 CB                        bra @loop
001537r 3               
001537r 3               @have_chars_left:
001537r 3                               ; Pathological case: Drop the rest of this number off the stack
001537r 3                               ; and continue with the next word. Doesn't print a warning. We
001537r 3                               ; need to drop four cells, that is, eight bytes
001537r 3  8A                           txa
001538r 3  18                           clc
001539r 3  69 08                        adc #8
00153Br 3  AA                           tax
00153Cr 3  80 C4                        bra @loop
00153Er 3               
00153Er 3               @done:
00153Er 3                               ; Clean up return stack and calculate number of chars stored
00153Er 3  E8                           inx
00153Fr 3  E8                           inx
001540r 3  E8                           inx
001541r 3  E8                           inx                     ; 2DROP
001542r 3               
001542r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr2+n addr2 )
001545r 3  20 rr rr                     jsr xt_swap
001548r 3  20 rr rr                     jsr xt_minus            ; ( n )
00154Br 3               
00154Br 3  60           z_hexstore:     rts
00154Cr 3               
00154Cr 3               
00154Cr 3               
00154Cr 3               ; ## HOLD ( char -- ) "Insert character at current output"
00154Cr 3               ; ## "hold"  auto  ANS core
00154Cr 3                       ; """https://forth-standard.org/standard/core/HOLD
00154Cr 3                       ; Insert a character at the current position of a pictured numeric
00154Cr 3                       ; output string on
00154Cr 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
00154Cr 3                       ;
00154Cr 3                       ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal
00154Cr 3                       ; variable tohold instead of HLD.
00154Cr 3                       ; """
00154Cr 3               xt_hold:
00154Cr 3  20 rr rr                     jsr underflow_1
00154Fr 3               
00154Fr 3  A5 rr                        lda tohold
001551r 3  D0 02                        bne @1
001553r 3  C6 rr                        dec tohold+1
001555r 3               @1:
001555r 3  C6 rr                        dec tohold
001557r 3               
001557r 3  B5 00                        lda 0,x
001559r 3  92 rr                        sta (tohold)
00155Br 3  E8                           inx
00155Cr 3  E8                           inx
00155Dr 3               
00155Dr 3  60           z_hold:         rts
00155Er 3               
00155Er 3               
00155Er 3               ; ## I ( -- n )(R: n -- n)  "Copy loop counter to stack"
00155Er 3               ; ## "i"  auto  ANS core
00155Er 3                       ; """https://forth-standard.org/standard/core/I
00155Er 3                       ; Note that this is not the same as R@ because we use a fudge
00155Er 3                       ; factor for loop control; see the Control Flow section of the
00155Er 3                       ; manual for details.
00155Er 3                       ;
00155Er 3                       ; We should make this native compile for speed.
00155Er 3                       ; """
00155Er 3               
00155Er 3               xt_i:
00155Er 3  CA                           dex
00155Fr 3  CA                           dex
001560r 3               
001560r 3                               ; Get the fudged index off of the top of the stack. It's
001560r 3                               ; easier to do math on the stack directly than to pop and
001560r 3                               ; push stuff around
001560r 3  86 rr                        stx tmpdsp
001562r 3  BA                           tsx
001563r 3               
001563r 3  38                           sec
001564r 3  BD 01 01                     lda $0101,x     ; LSB
001567r 3  FD 03 01                     sbc $0103,x
00156Ar 3  A8                           tay
00156Br 3               
00156Br 3  BD 02 01                     lda $0102,x     ; MSB
00156Er 3  FD 04 01                     sbc $0104,x
001571r 3               
001571r 3  A6 rr                        ldx tmpdsp
001573r 3               
001573r 3  95 01                        sta 1,x         ; MSB of de-fudged index
001575r 3  94 00                        sty 0,x         ; LSB of de-fudged index
001577r 3               
001577r 3  60           z_i:            rts
001578r 3               
001578r 3               
001578r 3               
001578r 3               ; ## IF (C: -- orig) (flag -- ) "Conditional flow control"
001578r 3               ; ## "if"  auto  ANS core
001578r 3                       ; """http://forth-standard.org/standard/core/IF"""
001578r 3               
001578r 3               xt_if:
001578r 3                               ; Compile a 0BRANCH
001578r 3  A0 rr                        ldy #>zero_branch_runtime
00157Ar 3  A9 rr                        lda #<zero_branch_runtime
00157Cr 3  20 rr rr                     jsr cmpl_subroutine
00157Fr 3               
00157Fr 3                               ; Put the origination address on the stack for else/then
00157Fr 3  20 rr rr                     jsr xt_here
001582r 3               
001582r 3                               ; Stuff zero in for the branch address right now.
001582r 3                               ; THEN or ELSE will fix it later.
001582r 3  20 rr rr                     jsr xt_zero
001585r 3  20 rr rr                     jsr xt_comma
001588r 3  60           z_if:           rts
001589r 3               
001589r 3               
001589r 3               zero_branch_runtime:
001589r 3                       ; """In some Forths, this is called (0BRANCH). Tali Forth originally
001589r 3                       ; included 0BRANCH as a high-level word that inserted this code at
001589r 3                       ; runtime.
001589r 3                       ; """
001589r 3               
001589r 3                               ; We use the return value on the 65c02 stack to determine
001589r 3                               ; where we want to return to.
001589r 3  68                           pla
00158Ar 3  85 rr                        sta tmpbranch
00158Cr 3  68                           pla
00158Dr 3  85 rr                        sta tmpbranch+1
00158Fr 3               
00158Fr 3                               ; See if the flag is zero, which is the whole purpose of
00158Fr 3                               ; this all
00158Fr 3  B5 00                        lda 0,x
001591r 3  15 01                        ora 1,x
001593r 3  F0 0F                        beq @zero
001595r 3               
001595r 3                               ; Flag is TRUE, so we skip over the next two bytes. This is
001595r 3                               ; the part between IF and THEN
001595r 3  A5 rr                        lda tmpbranch   ; LSB
001597r 3  18                           clc
001598r 3  69 02                        adc #2
00159Ar 3  85 rr                        sta tmp1
00159Cr 3  A5 rr                        lda tmpbranch+1 ; MSB
00159Er 3  69 00                        adc #0          ; For carry
0015A0r 3  85 rr                        sta tmp1+1
0015A2r 3               
0015A2r 3  80 13                        bra @done
0015A4r 3               
0015A4r 3               @zero:
0015A4r 3                               ; Flag is FALSE (0) so we take the jump to the address given in
0015A4r 3                               ; the next two bytes. However, the address points to the last
0015A4r 3                               ; byte of the JSR instruction, not to the next byte afterwards
0015A4r 3  A0 01                        ldy #1
0015A6r 3  B1 rr                        lda (tmpbranch),y
0015A8r 3  85 rr                        sta tmp1
0015AAr 3  C8                           iny
0015ABr 3  B1 rr                        lda (tmpbranch),y
0015ADr 3  85 rr                        sta tmp1+1
0015AFr 3               
0015AFr 3                               ; Now we have to subtract one byte from the address
0015AFr 3                               ; given because of the way the 6502 calculates RTS
0015AFr 3  A5 rr                        lda tmp1
0015B1r 3  D0 02                        bne @1
0015B3r 3  C6 rr                        dec tmp1+1
0015B5r 3               @1:
0015B5r 3  C6 rr                        dec tmp1
0015B7r 3               
0015B7r 3               @done:
0015B7r 3                               ; However we got here, tmp1 has the value we push to jump
0015B7r 3                               ; to
0015B7r 3  A5 rr                        lda tmp1+1
0015B9r 3  48                           pha             ; MSB first
0015BAr 3  A5 rr                        lda tmp1
0015BCr 3  48                           pha
0015BDr 3               
0015BDr 3                               ; clean up the stack and jump
0015BDr 3  E8                           inx
0015BEr 3  E8                           inx
0015BFr 3               
0015BFr 3  60                           rts
0015C0r 3               
0015C0r 3               
0015C0r 3               
0015C0r 3               ; ## IMMEDIATE ( -- ) "Mark most recent word as IMMEDIATE"
0015C0r 3               ; ## "immediate"  auto  ANS core
0015C0r 3                       ; """https://forth-standard.org/standard/core/IMMEDIATE
0015C0r 3                       ; Make sure the most recently defined word is immediate. Will only
0015C0r 3                       ; affect the last word in the dictionary. Note that if the word is
0015C0r 3                       ; defined in ROM, this will have no affect, but will not produce an
0015C0r 3                       ; error message.
0015C0r 3                       ; """
0015C0r 3               xt_immediate:
0015C0r 3  20 rr rr                     jsr current_to_dp
0015C3r 3  A0 01                        ldy #1          ; offset for status byte
0015C5r 3  B1 rr                        lda (dp),y
0015C7r 3  09 04                        ora #IM        ; make sure bit 7 is set
0015C9r 3  91 rr                        sta (dp),y
0015CBr 3               
0015CBr 3  60           z_immediate:    rts
0015CCr 3               
0015CCr 3               
0015CCr 3               ; ## INPUT ( -- addr ) "Return address of input vector"
0015CCr 3               ; ## "input" tested Tali Forth
0015CCr 3               
0015CCr 3               xt_input:
0015CCr 3  CA                           dex
0015CDr 3  CA                           dex
0015CEr 3  A9 rr                        lda #<input
0015D0r 3  95 00                        sta 0,x
0015D2r 3  A9 rr                        lda #>input
0015D4r 3  95 01                        sta 1,x
0015D6r 3               
0015D6r 3  60           z_input:        rts
0015D7r 3               
0015D7r 3               
0015D7r 3               
0015D7r 3               ; ## INPUT_TO_R ( -- ) ( R: -- n n n n ) "Save input state to the Return Stack"
0015D7r 3               ; ## "input>r"  tested  Tali Forth
0015D7r 3                  	; """Save the current input state as defined by insrc, cib, ciblen, and
0015D7r 3                       ; toin to the Return Stack. Used by EVALUTE.
0015D7r 3                       ;
0015D7r 3                       ; The naive way of doing
0015D7r 3                       ; this is to push each two-byte variable to the stack in the form of
0015D7r 3                       ;
0015D7r 3                       ;       lda insrc
0015D7r 3                       ;       pha
0015D7r 3                       ;       lda insrc+1
0015D7r 3                       ;       pha
0015D7r 3                       ;
0015D7r 3                       ; for a total of 24 byte of instruction in one direction and later
0015D7r 3                       ; a further 24 bytes to reverse the process. We shorten this at the
0015D7r 3                       ; cost of some speed by assuming the four variables are grouped
0015D7r 3                       ; together on the Zero Page and start with insrc (see definitions.asm
0015D7r 3                       ; for details). The reverse operation is r_to_input. These words must
0015D7r 3                       ; be flagged as Never Native. Uses tmp1
0015D7r 3                       ; """
0015D7r 3               
0015D7r 3               xt_input_to_r:
0015D7r 3                               ; We arrive here with the return address on the top of the
0015D7r 3                               ; 65c02's stack. We need to move it out of the way first
0015D7r 3  68                           pla
0015D8r 3  85 rr                        sta tmp1
0015DAr 3  68                           pla
0015DBr 3  85 rr                        sta tmp1+1
0015DDr 3               
0015DDr 3                               ; This assumes that insrc is the first of eight bytes and
0015DDr 3                               ; toin+1 the last in the sequence we want to save from the Zero
0015DDr 3                               ; Page.
0015DDr 3  A0 07                        ldy #7
0015DFr 3               @loop:
0015DFr 3  B9 rr rr                     lda insrc,y     ; insrc+7 is toin+1
0015E2r 3  48                           pha
0015E3r 3  88                           dey
0015E4r 3  10 F9                        bpl @loop
0015E6r 3               
0015E6r 3                               ; Restore address for return jump
0015E6r 3  A5 rr                        lda tmp1+1
0015E8r 3  48                           pha
0015E9r 3  A5 rr                        lda tmp1
0015EBr 3  48                           pha
0015ECr 3               
0015ECr 3  60           z_input_to_r: 	rts
0015EDr 3               
0015EDr 3               
0015EDr 3               
0015EDr 3               ; ## INT_TO_NAME ( xt -- nt ) "Get name token from execution token"
0015EDr 3               ; ## "int>name"  auto  Tali Forth
0015EDr 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0015EDr 3                       ; This is called >NAME in Gforth, but we change it to
0015EDr 3                       ; INT>NAME to match NAME>INT
0015EDr 3                       ; """
0015EDr 3               
0015EDr 3               xt_int_to_name:
0015EDr 3  20 rr rr                     jsr underflow_1
0015F0r 3               
0015F0r 3                               ; Unfortunately, to find the header, we have to walk through
0015F0r 3                               ; all of the wordlists. We are running out of tmp variables.
0015F0r 3                               ; (I'm assuming there is a reason this is avoiding tmp1) so
0015F0r 3                               ; hold the current wordlist on the data stack. This searches
0015F0r 3                               ; all of the wordlists in id order.
0015F0r 3  CA                           dex
0015F1r 3  CA                           dex
0015F2r 3  74 00                        stz 0,x
0015F4r 3  74 01                        stz 1,x
0015F6r 3               
0015F6r 3               @wordlist_loop:
0015F6r 3                               ; A needs to have the current wordlist id in it at
0015F6r 3                               ; the top of this loop.
0015F6r 3  B5 00                        lda 0,x                 ; Get the current wordlist.
0015F8r 3               
0015F8r 3                               ; Get the DP for that wordlist.
0015F8r 3  0A                           asl                     ; Turn offset into cells offset.
0015F9r 3  18                           clc
0015FAr 3  69 06                        adc #wordlists_offset
0015FCr 3  A8                           tay
0015FDr 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
0015FFr 3  85 rr                        sta tmp2                ; into tmp2
001601r 3  C8                           iny
001602r 3  B1 rr                        lda (up),y
001604r 3  85 rr                        sta tmp2+1
001606r 3               
001606r 3                               ; Check for an empty wordlist (DP will be 0)
001606r 3  A5 rr                        lda tmp2
001608r 3  05 rr                        ora tmp2+1
00160Ar 3  F0 38                        beq @next_wordlist
00160Cr 3               
00160Cr 3  B5 02                        lda 2,x         ; Target xt is now behind wordlist id.
00160Er 3  85 rr                        sta tmp3        ; Save target xt in tmp3
001610r 3  B5 03                        lda 3,x
001612r 3  85 rr                        sta tmp3+1
001614r 3               
001614r 3               @loop:
001614r 3  A0 04                        ldy #4          ; xt is four bytes down
001616r 3  B1 rr                        lda (tmp2),y    ; LSB of xt of current nt
001618r 3  C5 rr                        cmp tmp3
00161Ar 3  D0 07                        bne @no_match
00161Cr 3               
00161Cr 3                               ; LSB is the same, now check MSB
00161Cr 3  C8                           iny
00161Dr 3  B1 rr                        lda (tmp2),y    ; MSB of xt of current nt
00161Fr 3  C5 rr                        cmp tmp3+1
001621r 3  F0 32                        beq @match
001623r 3               
001623r 3               @no_match:
001623r 3                               ; no match, so we need to get the next word. Next nt is two
001623r 3                               ; bytes down
001623r 3  18                           clc
001624r 3  A5 rr                        lda tmp2
001626r 3  69 02                        adc #2
001628r 3  85 rr                        sta tmp2
00162Ar 3  A5 rr                        lda tmp2+1
00162Cr 3  69 00                        adc #0          ; only care about carry
00162Er 3  85 rr                        sta tmp2+1
001630r 3               
001630r 3  A0 00                        ldy #0
001632r 3  B1 rr                        lda (tmp2),y
001634r 3  48                           pha
001635r 3  C8                           iny
001636r 3  11 rr                        ora (tmp2),y
001638r 3  F0 09                        beq @zero
00163Ar 3               
00163Ar 3                               ; Not zero continue
00163Ar 3  B1 rr                        lda (tmp2),y
00163Cr 3  85 rr                        sta tmp2+1
00163Er 3  68                           pla
00163Fr 3  85 rr                        sta tmp2
001641r 3  80 D1                        bra @loop
001643r 3               
001643r 3               @zero:
001643r 3                               ; if next word is zero, the xt has no nt in this wordlist
001643r 3  68                           pla             ; Leftover from above loop
001644r 3               
001644r 3               @next_wordlist:
001644r 3                               ; Move on to the next wordlist.
001644r 3  B5 00                        lda 0,x
001646r 3  1A                           inc
001647r 3  95 00                        sta 0,x
001649r 3  C9 0C                        cmp #max_wordlists
00164Br 3  D0 A9                        bne @wordlist_loop
00164Dr 3               
00164Dr 3                               ; We didn't find it in any of the wordlists.
00164Dr 3                               ; Remove the wordlist id from the stack.
00164Dr 3  E8                           inx
00164Er 3  E8                           inx
00164Fr 3               
00164Fr 3                               ; We return a zero to indicate that we didn't find it.
00164Fr 3  74 00                        stz 0,x
001651r 3  74 01                        stz 1,x
001653r 3  80 0A                        bra z_int_to_name
001655r 3               
001655r 3               @match:
001655r 3                               ; We found it. Remove wordlist id from stack.
001655r 3  E8                           inx
001656r 3  E8                           inx
001657r 3               
001657r 3                               ; It's a match! Replace TOS with nt
001657r 3  A5 rr                        lda tmp2
001659r 3  95 00                        sta 0,x
00165Br 3  A5 rr                        lda tmp2+1
00165Dr 3  95 01                        sta 1,x
00165Fr 3               
00165Fr 3  60           z_int_to_name:  rts
001660r 3               
001660r 3               
001660r 3               
001660r 3               ; ## INVERT ( n -- n ) "Complement of TOS"
001660r 3               ; ## "invert"  auto  ANS core
001660r 3                       ; """https://forth-standard.org/standard/core/INVERT"""
001660r 3               xt_invert:
001660r 3  20 rr rr                     jsr underflow_1
001663r 3               
001663r 3  A9 FF                        lda #$FF
001665r 3  55 00                        eor 0,x         ; LSB
001667r 3  95 00                        sta 0,x
001669r 3               
001669r 3  A9 FF                        lda #$FF
00166Br 3  55 01                        eor 1,x         ; MSB
00166Dr 3  95 01                        sta 1,x
00166Fr 3               
00166Fr 3  60           z_invert:       rts
001670r 3               
001670r 3               
001670r 3               ; ## IS ( xt "name" -- ) "Set named word to execute xt"
001670r 3               ; ## "is"  auto  ANS core ext
001670r 3                       ; """http://forth-standard.org/standard/core/IS"""
001670r 3               
001670r 3               xt_is:
001670r 3                               ; This is a state aware word with differet behavior
001670r 3                               ; when used while compiling vs interpreting.
001670r 3                               ; Check STATE
001670r 3  A5 rr                        lda state
001672r 3  05 rr                        ora state+1
001674r 3  F0 0C                        beq @interpreting
001676r 3               
001676r 3               @compiling:
001676r 3                               ; Run ['] to compile the xt of the next word as a literal.
001676r 3  20 rr rr                     jsr xt_bracket_tick
001679r 3               
001679r 3                               ; Postpone DEFER! by compiling a JSR to it.
001679r 3  A0 rr                        ldy #>xt_defer_store
00167Br 3  A9 rr                        lda #<xt_defer_store
00167Dr 3  20 rr rr                     jsr cmpl_subroutine
001680r 3               
001680r 3  80 06                        bra @done
001682r 3               
001682r 3               @interpreting:
001682r 3  20 rr rr                     jsr xt_tick
001685r 3  20 rr rr                     jsr xt_defer_store
001688r 3               @done:
001688r 3  60           z_is:           rts
001689r 3               
001689r 3               
001689r 3               
001689r 3               ; ## J ( -- n ) (R: n -- n ) "Copy second loop counter to stack"
001689r 3               ; ## "j"  auto  ANS core
001689r 3                       ; """https://forth-standard.org/standard/core/J
001689r 3                       ; Copy second loop counter from Return Stack to stack. Note we use
001689r 3                       ; a fudge factor for loop control; see the Control Flow section of
001689r 3                       ; the manual for more details.
001689r 3                       ; At this point, we have the "I" counter/limit and the LEAVE address
001689r 3                       ; on the stack above this (three entries), whereas the ideal Forth
001689r 3                       ; implementation would just have two.
001689r 3                       ;
001689r 3                       ; Make this native compiled for speed
001689r 3                       ; """
001689r 3               
001689r 3               xt_j:
001689r 3  CA                           dex
00168Ar 3  CA                           dex
00168Br 3               
00168Br 3                               ; Get the fudged index off from the stack. It's easier to
00168Br 3                               ; do math on the stack directly than to pop and push stuff
00168Br 3                               ; around
00168Br 3  86 rr                        stx tmpdsp
00168Dr 3  BA                           tsx
00168Er 3               
00168Er 3  38                           sec
00168Fr 3  BD 07 01                     lda $0107,x     ; LSB
001692r 3  FD 09 01                     sbc $0109,x
001695r 3  A8                           tay
001696r 3               
001696r 3  BD 08 01                     lda $0108,x     ; MSB
001699r 3  FD 0A 01                     sbc $010A,x
00169Cr 3               
00169Cr 3  A6 rr                        ldx tmpdsp
00169Er 3               
00169Er 3  95 01                        sta 1,x         ; MSB of de-fudged index
0016A0r 3  94 00                        sty 0,x         ; LSB of de-fudged index
0016A2r 3               
0016A2r 3  60           z_j:            rts
0016A3r 3               
0016A3r 3               
0016A3r 3               
0016A3r 3               ; ## KEY ( -- char ) "Get one character from the input"
0016A3r 3               ; ## "key"  tested  ANS core
0016A3r 3               xt_key:
0016A3r 3                       ; """https://forth-standard.org/standard/core/KEY
0016A3r 3                       ; Get a single character of input from the vectored
0016A3r 3                       ; input without echoing.
0016A3r 3                       ; """
0016A3r 3  20 rr rr                     jsr key_a               ; returns char in A
0016A6r 3               
0016A6r 3  CA                           dex
0016A7r 3  CA                           dex
0016A8r 3  95 00                        sta 0,x
0016AAr 3  74 01                        stz 1,x
0016ACr 3               
0016ACr 3  60           z_key:          rts
0016ADr 3               
0016ADr 3               key_a:
0016ADr 3                       ; The 65c02 doesn't have a JSR (ADDR,X) instruction like the
0016ADr 3                       ; 65816, so we have to fake the indirect jump to vector it.
0016ADr 3                       ; This is depressingly slow. We use this routine internally
0016ADr 3                       ; to avoid manipulating the Data Stack when we just want a
0016ADr 3                       ; character
0016ADr 3  6C rr rr                     jmp (input)             ; JSR/RTS
0016B0r 3               
0016B0r 3               
0016B0r 3               ; ## LATESTNT ( -- nt ) "Push most recent nt to the stack"
0016B0r 3               ; ## "latestnt"  auto  Tali Forth
0016B0r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0016B0r 3                       ; The Gforth version of this word is called LATEST
0016B0r 3                       ; """
0016B0r 3               xt_latestnt:
0016B0r 3  CA                           dex
0016B1r 3  CA                           dex
0016B2r 3               
0016B2r 3  20 rr rr                     jsr current_to_dp
0016B5r 3               
0016B5r 3  A5 rr                        lda dp
0016B7r 3  95 00                        sta 0,x
0016B9r 3  A5 rr                        lda dp+1
0016BBr 3  95 01                        sta 1,x
0016BDr 3               
0016BDr 3  60           z_latestnt:     rts
0016BEr 3               
0016BEr 3               
0016BEr 3               ; ## LATESTXT ( -- xt ) "Push most recent xt to the stack"
0016BEr 3               ; ## "latestxt"  auto  Gforth
0016BEr 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Anonymous-Definitions.html"""
0016BEr 3               xt_latestxt:
0016BEr 3  20 rr rr                     jsr xt_latestnt         ; ( nt )
0016C1r 3  20 rr rr                     jsr xt_name_to_int      ; ( xt )
0016C4r 3               
0016C4r 3  60           z_latestxt:     rts
0016C5r 3               
0016C5r 3               
0016C5r 3               ; ## LEAVE ( -- ) "Leave DO/LOOP construct"
0016C5r 3               ; ## "leave"  auto  ANS core
0016C5r 3                       ; """https://forth-standard.org/standard/core/LEAVE
0016C5r 3                       ; Note that this does not work with anything but a DO/LOOP in
0016C5r 3                       ; contrast to other versions such as discussed at
0016C5r 3                       ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
0016C5r 3                       ;
0016C5r 3                       ;       : LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY
0016C5r 3                       ; See the Control Flow section in the manual for details of how this works.
0016C5r 3                       ; This must be native compile and not IMMEDIATE
0016C5r 3                       ; """
0016C5r 3               
0016C5r 3               xt_leave:
0016C5r 3                               ; We dump the limit/start entries off the Return Stack
0016C5r 3                               ; (four bytes)
0016C5r 3  68                           pla
0016C6r 3  68                           pla
0016C7r 3  68                           pla
0016C8r 3  68                           pla
0016C9r 3               
0016C9r 3  60                           rts             ; this must be compiled, so keep before z_leave
0016CAr 3               z_leave:                        ; not reached, not compiled
0016CAr 3               
0016CAr 3               
0016CAr 3               
0016CAr 3               ; ## LEFT_BRACKET ( -- ) "Enter interpretation state"
0016CAr 3               ; ## "["  auto  ANS core
0016CAr 3                       ; """https://forth-standard.org/standard/core/Bracket
0016CAr 3                       ; This is an immediate and compile-only word
0016CAr 3                       ; """
0016CAr 3               xt_left_bracket:
0016CAr 3  64 rr                        stz state
0016CCr 3  64 rr                        stz state+1
0016CEr 3               
0016CEr 3  60           z_left_bracket: rts
0016CFr 3               
0016CFr 3               
0016CFr 3               ; ## LESS_NUMBER_SIGN ( -- ) "Start number conversion"
0016CFr 3               ; ## "<#"  auto  ANS core
0016CFr 3                       ; """https://forth-standard.org/standard/core/num-start
0016CFr 3                       ; Start the process to create pictured numeric output.
0016CFr 3                       ;
0016CFr 3                       ; The new
0016CFr 3                       ; string is constructed from back to front, saving the new character
0016CFr 3                       ; at the beginning of the output string. Since we use PAD as a
0016CFr 3                       ; starting address and work backward (!), the string is constructed
0016CFr 3                       ; in the space between the end of the Dictionary (as defined by CP)
0016CFr 3                       ; and the PAD. This allows us to satisfy the ANS Forth condition that
0016CFr 3                       ; programs don't fool around with the PAD but still use its address.
0016CFr 3                       ; Based on pForth
0016CFr 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
0016CFr 3                       ; pForth is in the pubic domain. Forth is : <# PAD HLD ! ; we use the
0016CFr 3                       ; internal variable tohold instead of HLD.
0016CFr 3                       ; """
0016CFr 3               xt_less_number_sign:
0016CFr 3  20 rr rr                     jsr xt_pad      ; ( addr )
0016D2r 3               
0016D2r 3  B5 00                        lda 0,x
0016D4r 3  85 rr                        sta tohold
0016D6r 3  B5 01                        lda 1,x
0016D8r 3  85 rr                        sta tohold+1
0016DAr 3               
0016DAr 3  E8                           inx
0016DBr 3  E8                           inx
0016DCr 3               
0016DCr 3               z_less_number_sign:
0016DCr 3  60                           rts
0016DDr 3               
0016DDr 3               ; ## LESS_THAN ( n m -- f ) "Return true if NOS < TOS"
0016DDr 3               ; ## "<"  auto  ANS core
0016DDr 3                       ; """https://forth-standard.org/standard/core/less"""
0016DDr 3               
0016DDr 3               xt_less_than:
0016DDr 3  20 rr rr                     jsr underflow_2
0016E0r 3               
0016E0r 3  A0 00                        ldy #0          ; default false
0016E2r 3  20 rr rr                     jsr compare_16bit
0016E5r 3               
0016E5r 3                               ; for signed numbers, NOS < TOS if Z=0 and N=0
0016E5r 3  F0 03                        beq @false
0016E7r 3  30 01                        bmi @false
0016E9r 3               
0016E9r 3                               ; true
0016E9r 3  88                           dey
0016EAr 3               @false:
0016EAr 3  98                           tya
0016EBr 3               
0016EBr 3  E8                           inx
0016ECr 3  E8                           inx
0016EDr 3  95 00                        sta 0,x
0016EFr 3  95 01                        sta 1,x
0016F1r 3               
0016F1r 3  60           z_less_than:    rts
0016F2r 3               
0016F2r 3               
0016F2r 3               
0016F2r 3               ; ## LIST ( scr# -- ) "List the given screen"
0016F2r 3               ; ## "list"  tested  ANS block ext
0016F2r 3                       ; """https://forth-standard.org/standard/block/LIST"""
0016F2r 3               
0016F2r 3               xt_list:
0016F2r 3  20 rr rr                     jsr underflow_1
0016F5r 3               
0016F5r 3                               ; Save the screen number in SCR
0016F5r 3  20 rr rr                     jsr xt_scr
0016F8r 3  20 rr rr                     jsr xt_store
0016FBr 3               
0016FBr 3                               ; Use L from the editor-wordlist to display the screen.
0016FBr 3  20 rr rr                     jsr xt_editor_l
0016FEr 3               
0016FEr 3  60           z_list:         rts
0016FFr 3               
0016FFr 3               
0016FFr 3               
0016FFr 3               ; ## LITERAL ( n -- ) "Store TOS to be push on stack during runtime"
0016FFr 3               ; ## "literal"  auto  ANS core
0016FFr 3                       ; """https://forth-standard.org/standard/core/LITERAL
0016FFr 3                       ; Compile-only word to store TOS so that it is pushed on stack
0016FFr 3                       ; during runtime. This is a immediate, compile-only word. At runtime,
0016FFr 3                       ; it works by calling literal_runtime by compling JSR LITERAL_RT.
0016FFr 3                       ;
0016FFr 3                       ; Note the cmpl_ routines use TMPTOS
0016FFr 3                       ; """
0016FFr 3               xt_literal:
0016FFr 3  20 rr rr                     jsr underflow_1
001702r 3               
001702r 3  A0 rr                        ldy #>literal_runtime
001704r 3  A9 rr                        lda #<literal_runtime
001706r 3  20 rr rr                     jsr cmpl_subroutine
001709r 3               
001709r 3                               ; Compile the value that is to be pushed on the Stack during
001709r 3                               ; runtime
001709r 3  20 rr rr                     jsr xt_comma
00170Cr 3               
00170Cr 3  60           z_literal:      rts
00170Dr 3               
00170Dr 3               literal_runtime:
00170Dr 3               
00170Dr 3                               ; During runtime, we push the value following this word back
00170Dr 3                               ; on the Data Stack. The subroutine jump that brought us
00170Dr 3                               ; here put the address to return to on the Return Stack -
00170Dr 3                               ; this points to the data we need to get. This routine is
00170Dr 3                               ; also called (LITERAL) in some Forths
00170Dr 3  CA                           dex
00170Er 3  CA                           dex
00170Fr 3               
00170Fr 3                           	; The 65c02 stores <RETURN-ADDRESS>-1 on the Return Stack,
00170Fr 3                               ; so we are actually popping the address-1 of the literal
00170Fr 3  68                           pla             ; LSB
001710r 3  85 rr                        sta tmp1
001712r 3  68                           pla             ; MSB
001713r 3  85 rr                        sta tmp1+1
001715r 3               
001715r 3                               ; Fetch the actual literal value and push it on Data stack
001715r 3  A0 01                        ldy #1
001717r 3  B1 rr                        lda (tmp1),y    ; LSB
001719r 3  95 00                        sta 0,x
00171Br 3  C8                           iny
00171Cr 3  B1 rr                        lda (tmp1),y    ; MSB
00171Er 3  95 01                        sta 1,x
001720r 3               
001720r 3                               ; Adjust return address and push back on the Return Stack
001720r 3  98                           tya
001721r 3  18                           clc
001722r 3  65 rr                        adc tmp1
001724r 3  A8                           tay
001725r 3  A5 rr                        lda tmp1+1
001727r 3  69 00                        adc #0
001729r 3  48                           pha
00172Ar 3  5A                           phy
00172Br 3               
00172Br 3  60                           rts
00172Cr 3               
00172Cr 3               
00172Cr 3               
00172Cr 3               ; ## LOAD ( scr# -- ) "Load the Forth code in a screen/block"
00172Cr 3               ; ## "load"  auto  ANS block
00172Cr 3                       ; """https://forth-standard.org/standard/block/LOAD
00172Cr 3                       ;
00172Cr 3                       ; Note: LOAD current works because there is only one buffer.
00172Cr 3                       ; If/when multiple buffers are supported, we'll have to deal
00172Cr 3                       ; with the fact that it might re-load the old block into a
00172Cr 3                       ; different buffer.
00172Cr 3                       ; """
00172Cr 3               
00172Cr 3               xt_load:
00172Cr 3  20 rr rr                     jsr underflow_1
00172Fr 3               
00172Fr 3                               ; Save the current value of BLK on the return stack.
00172Fr 3  A0 01                        ldy #blk_offset+1
001731r 3  B1 rr                        lda (up),y
001733r 3  48                           pha
001734r 3  88                           dey
001735r 3  B1 rr                        lda (up),y
001737r 3  48                           pha
001738r 3               
001738r 3                               ; Set BLK to the given block/screen number.
001738r 3  B5 00                        lda 0,x
00173Ar 3  91 rr                        sta (up),y
00173Cr 3  C8                           iny
00173Dr 3  B5 01                        lda 1,x
00173Fr 3  91 rr                        sta (up),y
001741r 3               
001741r 3                               ; Load that block into a buffer
001741r 3  20 rr rr                     jsr xt_block
001744r 3               
001744r 3                               ; Put 1024 on the stack for the screen length.
001744r 3  CA                           dex
001745r 3  CA                           dex
001746r 3  A9 04                        lda #4
001748r 3  95 01                        sta 1,x
00174Ar 3  74 00                        stz 0,x
00174Cr 3               
00174Cr 3                               ; Jump to a special evluate target. This bypasses the underflow
00174Cr 3                               ; check and skips the zeroing of BLK.
00174Cr 3  20 rr rr                     jsr load_evaluate
00174Fr 3               
00174Fr 3                               ; Restore the value of BLK from before the LOAD command.
00174Fr 3  A0 00                        ldy #blk_offset
001751r 3  68                           pla
001752r 3  91 rr                        sta (up),y
001754r 3  C8                           iny
001755r 3  68                           pla
001756r 3  91 rr                        sta (up),y
001758r 3               
001758r 3                               ; If BLK is not zero, read it back into the buffer.
001758r 3                               ; A still has MSB
001758r 3  88                           dey
001759r 3  11 rr                        ora (up),y
00175Br 3  F0 12                        beq @done
00175Dr 3               
00175Dr 3                               ; The block needs to be read back into the buffer.
00175Dr 3  CA                           dex
00175Er 3  CA                           dex
00175Fr 3  A0 00                        ldy #blk_offset
001761r 3  B1 rr                        lda (up),y
001763r 3  95 00                        sta 0,x
001765r 3  C8                           iny
001766r 3  B1 rr                        lda (up),y
001768r 3  95 01                        sta 1,x
00176Ar 3  20 rr rr                     jsr xt_block
00176Dr 3               
00176Dr 3                               ; Drop the buffer address.
00176Dr 3  E8                           inx
00176Er 3  E8                           inx
00176Fr 3               
00176Fr 3               @done:
00176Fr 3  60           z_load:         rts
001770r 3               
001770r 3               
001770r 3               
001770r 3               ; ## LOOP ( -- ) "Finish loop construct"
001770r 3               ; ## "loop"  auto  ANS core
001770r 3                       ; """https://forth-standard.org/standard/core/LOOP
001770r 3                       ; Compile-time part of LOOP. This does nothing more but push 1 on
001770r 3                       ; the stack and then call +LOOP.
001770r 3                       ;
001770r 3                       ; In Forth, this is
001770r 3                       ;       : LOOP  POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ;
001770r 3                       ;       IMMEDIATE ; COMPILE-ONLY
001770r 3                       ; """
001770r 3               xt_loop:
001770r 3                               ; Have the finished word push 1 on the stack
001770r 3  A0 rr                        ldy #>xt_one
001772r 3  A9 rr                        lda #<xt_one
001774r 3  20 rr rr                     jsr cmpl_subroutine     ; drop through to +LOOP
001777r 3               
001777r 3               
001777r 3               ; ## PLUS_LOOP ( -- ) "Finish loop construct"
001777r 3               ; ## "+loop"  auto  ANS core
001777r 3                       ; """https://forth-standard.org/standard/core/PlusLOOP
001777r 3                       ;
001777r 3                       ; Compile-time part of +LOOP, also used for LOOP. Is usually
001777r 3                       ;       : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
001777r 3                       ;       COMPILE-ONLY
001777r 3                       ; in Forth. LOOP uses this routine as well. We jump here with the
001777r 3                       ; address for looping as TOS and the address for aborting the loop
001777r 3                       ; (LEAVE) as the second double-byte entry on the Return Stack (see
001777r 3                       ; DO and the Control Flow section of the manual for details).
001777r 3                       ; """
001777r 3               
001777r 3               xt_plus_loop:
001777r 3                               ; Compile the run-time part. We do this with a short loop
001777r 3                               ; and not a call to COMPILE, because it has to be natively
001777r 3                               ; coded anyway.
001777r 3  A0 11                        ldy #plus_loop_runtime_end-plus_loop_runtime
001779r 3  5A                           phy             ; save counter to adjust CP
00177Ar 3               @1:
00177Ar 3  B9 rr rr                     lda plus_loop_runtime,y
00177Dr 3  91 rr                        sta (cp),y
00177Fr 3  88                           dey
001780r 3  10 F8                        bpl @1
001782r 3               
001782r 3                               ; Adjust CP
001782r 3  68                           pla
001783r 3  18                           clc
001784r 3  65 rr                        adc cp
001786r 3  85 rr                        sta cp
001788r 3  A5 rr                        lda cp+1
00178Ar 3  69 00                        adc #0          ; only need carry
00178Cr 3  85 rr                        sta cp+1
00178Er 3               
00178Er 3                               ; The address we need to loop back to is TOS. Store it so
00178Er 3                               ; the runtime part of +LOOP jumps back up there
00178Er 3  20 rr rr                     jsr xt_comma
001791r 3               
001791r 3                               ; Compile an UNLOOP for when we're all done. This is a series
001791r 3                               ; of six PLA, so we just do it here instead jumping around
001791r 3                               ; all over the place
001791r 3  A9 68                        lda #$68                ; opcode for PLA
001793r 3  A0 06                        ldy #6
001795r 3               @2:
001795r 3  91 rr                        sta (cp),y
001797r 3  88                           dey
001798r 3  10 FB                        bpl @2
00179Ar 3               
00179Ar 3                               ; Adjust CP
00179Ar 3  A9 06                        lda #6
00179Cr 3  18                           clc
00179Dr 3  65 rr                        adc cp
00179Fr 3  85 rr                        sta cp
0017A1r 3  A5 rr                        lda cp+1
0017A3r 3  69 00                        adc #0                  ; only need carry
0017A5r 3  85 rr                        sta cp+1
0017A7r 3               
0017A7r 3                               ; Complete compile of DO/?DO by replacing the six
0017A7r 3                               ; dummy bytes by PHA instructions. The address where
0017A7r 3                               ; they are located is on the Data Stack
0017A7r 3  B5 00                        lda 0,x
0017A9r 3  85 rr                        sta tmp1
0017ABr 3  B5 01                        lda 1,x
0017ADr 3  85 rr                        sta tmp1+1
0017AFr 3  E8                           inx
0017B0r 3  E8                           inx
0017B1r 3               
0017B1r 3                               ; Because of the way that CP works, we don't have to save
0017B1r 3                               ; CP, but CP-1
0017B1r 3  A5 rr                        lda cp
0017B3r 3  38                           sec
0017B4r 3  E9 01                        sbc #1
0017B6r 3  85 rr                        sta tmp2
0017B8r 3  A5 rr                        lda cp+1
0017BAr 3  E9 00                        sbc #0
0017BCr 3  85 rr                        sta tmp2+1
0017BEr 3               
0017BEr 3                               ; now compile this in the DO/?DO routine
0017BEr 3  A0 00                        ldy #0
0017C0r 3               
0017C0r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
0017C2r 3  91 rr                        sta (tmp1),y
0017C4r 3  C8                           iny
0017C5r 3  A5 rr                        lda tmp2+1      ; MSB
0017C7r 3  91 rr                        sta (tmp1),y
0017C9r 3  C8                           iny
0017CAr 3  A9 48                        lda #$48        ; Opcode for PHA
0017CCr 3  91 rr                        sta (tmp1),y
0017CEr 3  C8                           iny
0017CFr 3               
0017CFr 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
0017D1r 3  91 rr                        sta (tmp1),y
0017D3r 3  C8                           iny
0017D4r 3  A5 rr                        lda tmp2        ; LSB
0017D6r 3  91 rr                        sta (tmp1),y
0017D8r 3  C8                           iny
0017D9r 3  A9 48                        lda #$48        ; Opcode for PHA
0017DBr 3  91 rr                        sta (tmp1),y
0017DDr 3               z_loop:
0017DDr 3  60           z_plus_loop:    rts
0017DEr 3               
0017DEr 3               
0017DEr 3               plus_loop_runtime:
0017DEr 3                       ; """Runtime compile for loop control. This is used for both +LOOP and
0017DEr 3                       ; LOOP which are defined at high level. Note we use a fudge factor for
0017DEr 3                       ; loop control so we can test with the Overflow Flag. See
0017DEr 3                       ; the Control Flow section of the manual for details.
0017DEr 3                       ; The step value is TOS in the loop. This
0017DEr 3                       ; must always be native compiled. In some Forths, this is a separate
0017DEr 3                       ; word called (+LOOP) or (LOOP)
0017DEr 3                       ; """
0017DEr 3               
0017DEr 3  18                           clc
0017DFr 3  68                           pla             ; LSB of index
0017E0r 3  75 00                        adc 0,x         ; LSB of step
0017E2r 3  A8                           tay             ; temporary storage of LSB
0017E3r 3               
0017E3r 3  B8                           clv
0017E4r 3  68                           pla             ; MSB of index
0017E5r 3  75 01                        adc 1,x         ; MSB of step
0017E7r 3  48                           pha             ; put MSB of index back on stack
0017E8r 3               
0017E8r 3  98                           tya             ; put LSB of index back on stack
0017E9r 3  48                           pha
0017EAr 3               
0017EAr 3  E8                           inx             ; dump step from TOS
0017EBr 3  E8                           inx
0017ECr 3               
0017ECr 3                               ; If V flag is set, we're done looping and continue
0017ECr 3                               ; after the +LOOP instruction
0017ECr 3  70 03                        bvs @hack+3     ; skip over JMP instruction
0017EEr 3               
0017EEr 3               @hack:          ; This is why this routine must be natively compiled: We
0017EEr 3                               ; compile the opcode for JMP here without an address to
0017EEr 3                               ; go to, which is added by the next next instruction of
0017EEr 3                               ; LOOP/+LOOP during compile time
0017EEr 3  4C                           .byte $4C
0017EFr 3               
0017EFr 3               plus_loop_runtime_end:
0017EFr 3               
0017EFr 3               
0017EFr 3               ; ## LSHIFT ( x u -- u ) "Shift TOS left"
0017EFr 3               ; ## "lshift"  auto  ANS core
0017EFr 3                       ; """https://forth-standard.org/standard/core/LSHIFT"""
0017EFr 3               
0017EFr 3               xt_lshift:
0017EFr 3  20 rr rr                     jsr underflow_2
0017F2r 3               
0017F2r 3                               ; max shift 16 times
0017F2r 3  B5 00                        lda 0,x
0017F4r 3  29 0F                        and #%00001111
0017F6r 3  F0 08                        beq @done
0017F8r 3               
0017F8r 3  A8                           tay
0017F9r 3               
0017F9r 3               @loop:
0017F9r 3  16 02                        asl 2,x
0017FBr 3  36 03                        rol 3,x
0017FDr 3  88                           dey
0017FEr 3  D0 F9                        bne @loop
001800r 3               
001800r 3               @done:
001800r 3  E8                           inx
001801r 3  E8                           inx
001802r 3               
001802r 3  60           z_lshift:       rts
001803r 3               
001803r 3               
001803r 3               
001803r 3               ; ## M_STAR ( n n -- d ) "16 * 16 --> 32"
001803r 3               ; ## "m*"  auto  ANS core
001803r 3                       ; """https://forth-standard.org/standard/core/MTimes
001803r 3                       ; Multiply two 16 bit numbers, producing a 32 bit result. All
001803r 3                       ; values are signed. Adapted from FIG Forth for Tali Forth.
001803r 3                       ;
001803r 3                       ; The original Forth is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;
001803r 3                       ; with  : D+- O< IF DNEGATE THEN ;
001803r 3                       ; """
001803r 3               
001803r 3               xt_m_star:
001803r 3  20 rr rr                     jsr underflow_2
001806r 3               
001806r 3                               ; figure out the sign
001806r 3  B5 01                        lda 1,x         ; MSB of n1
001808r 3  55 03                        eor 3,x         ; MSB of n2
00180Ar 3               
00180Ar 3                               ; UM* uses all kinds of temporary variables so we don't
00180Ar 3                               ; risk a conflict but just take the cycle hit and push
00180Ar 3                               ; this to the stack
00180Ar 3  48                           pha
00180Br 3               
00180Br 3                               ; get the absolute value of both numbers so we can feed
00180Br 3                               ; them to UM*, which does the real work
00180Br 3  20 rr rr                     jsr xt_abs
00180Er 3  20 rr rr                     jsr xt_swap
001811r 3  20 rr rr                     jsr xt_abs
001814r 3               
001814r 3  20 rr rr                     jsr xt_um_star          ; ( d )
001817r 3               
001817r 3                               ; handle the sign
001817r 3  68                           pla
001818r 3  10 03                        bpl @done
00181Ar 3               
00181Ar 3  20 rr rr                     jsr xt_dnegate
00181Dr 3               @done:
00181Dr 3  60           z_m_star:       rts
00181Er 3               
00181Er 3               
00181Er 3               
00181Er 3               ; ## MARKER ( "name" -- ) "Create a deletion boundry"
00181Er 3               ; ## "marker"  auto  ANS core ext
00181Er 3                       ; """https://forth-standard.org/standard/core/MARKER
00181Er 3                       ; This word replaces FORGET in earlier Forths. Old entries are not
00181Er 3                       ; actually deleted, but merely overwritten by restoring CP and DP.
00181Er 3                       ; Run the named word at a later time to restore all of the wordlists
00181Er 3                       ; to their state when the word was created with marker.  Any words
00181Er 3                       ; created after the marker (including the marker) will be forgotten.
00181Er 3                       ;
00181Er 3                       ; To do this, we want to end up with something that jumps to a
00181Er 3                       ; run-time component with a link to the original CP and DP values:
00181Er 3                       ;
00181Er 3                       ;       jsr marker_runtime
00181Er 3                       ;       <Original CP MSB>
00181Er 3                       ;       <Original CP LSB>
00181Er 3                       ;       <Original DP MSB> ( for CURRENT wordlist )
00181Er 3                       ;       <Original DP LSB>
00181Er 3                       ;       < USER variables from offset 4 to 39 >
00181Er 3                       ;
00181Er 3                       ;       The user variables include:
00181Er 3                       ;       CURRENT (byte variable)
00181Er 3                       ;       <All wordlists> (currently 12) (cell array)
00181Er 3                       ;       <#ORDER> (byte variable)
00181Er 3                       ;       <All search order> (currently 9) (byte array)
00181Er 3                       ;
00181Er 3                       ; This code uses tmp1 and tmp2
00181Er 3                       ; """
00181Er 3               
00181Er 3               xt_marker:
00181Er 3                               ; Before we do anything, we need to save CP, which
00181Er 3                               ; after all is the whole point of this operation. CREATE
00181Er 3                               ; uses tmp1 and tmp2, so we take the speed hit and push stuff
00181Er 3                               ; to the stack
00181Er 3  20 rr rr                     jsr current_to_dp
001821r 3               
001821r 3  A5 rr                        lda dp
001823r 3  48                           pha
001824r 3  A5 rr                        lda dp+1
001826r 3  48                           pha
001827r 3               
001827r 3  A5 rr                        lda cp
001829r 3  48                           pha
00182Ar 3  A5 rr                        lda cp+1
00182Cr 3  48                           pha
00182Dr 3               
00182Dr 3  20 rr rr                     jsr xt_create
001830r 3               
001830r 3                               ; By default, CREATE installs a subroutine jump to DOVAR, which
001830r 3                               ; we have to replace by a jump to marker_runtime. We back up
001830r 3                               ; two bytes and then overwrite the address
001830r 3  A5 rr                        lda cp          ; LSB
001832r 3  38                           sec
001833r 3  E9 02                        sbc #2
001835r 3  85 rr                        sta cp
001837r 3               
001837r 3  A5 rr                        lda cp+1        ; MSB
001839r 3  E9 00                        sbc #0          ; we only care about the borrow
00183Br 3  85 rr                        sta cp+1
00183Dr 3               
00183Dr 3                               ; Add the address of the runtime component
00183Dr 3  A0 rr                        ldy #>marker_runtime
00183Fr 3  A9 rr                        lda #<marker_runtime
001841r 3  20 rr rr                     jsr cmpl_word
001844r 3               
001844r 3                               ; Add original CP as payload
001844r 3  7A                           ply                     ; MSB
001845r 3  68                           pla                     ; LSB
001846r 3  20 rr rr                     jsr cmpl_word
001849r 3               
001849r 3                               ; Add original DP as payload
001849r 3  7A                           ply                     ; MSB
00184Ar 3  68                           pla                     ; LSB
00184Br 3  20 rr rr                     jsr cmpl_word
00184Er 3               
00184Er 3                               ; Add the user variables for the wordlists and search order.
00184Er 3                               ; We're compiling them in byte order.
00184Er 3  A0 04                        ldy #4                  ; Start at CURRENT
001850r 3               @marker_loop:
001850r 3  B1 rr                        lda (up),y
001852r 3  20 rr rr                     jsr cmpl_a
001855r 3  C8                           iny
001856r 3  98                           tya
001857r 3  C9 28                        cmp #40                 ; One past the end of the search order.
001859r 3  D0 F5                        bne @marker_loop
00185Br 3               
00185Br 3  60           z_marker:       rts
00185Cr 3               
00185Cr 3               
00185Cr 3               
00185Cr 3               marker_runtime:
00185Cr 3                       ; """Restore Dictionary and memory (DP and CP) to where the were
00185Cr 3                       ; when this marker was defined. We arrive here with the return
00185Cr 3                       ; address on the Return Stack in the usual 65c02 format
00185Cr 3                       ; """
00185Cr 3               
00185Cr 3                               ; Get the address of the string address off the stack and
00185Cr 3                               ; increase by one because of the RTS mechanics
00185Cr 3  68                           pla
00185Dr 3  85 rr                        sta tmp1        ; LSB of address
00185Fr 3  68                           pla
001860r 3  85 rr                        sta tmp1+1      ; MSB of address
001862r 3               
001862r 3  E6 rr                        inc tmp1
001864r 3  D0 02                        bne @1
001866r 3  E6 rr                        inc tmp1+1
001868r 3               @1:
001868r 3  A0 00                        ldy #0
00186Ar 3               
00186Ar 3                               ; CP was stored first
00186Ar 3  B1 rr                        lda (tmp1),y
00186Cr 3  85 rr                        sta cp
00186Er 3  C8                           iny
00186Fr 3  B1 rr                        lda (tmp1),y
001871r 3  85 rr                        sta cp+1
001873r 3               
001873r 3                               ; Next was DP
001873r 3  C8                           iny
001874r 3  B1 rr                        lda (tmp1),y
001876r 3  85 rr                        sta dp
001878r 3  C8                           iny
001879r 3  B1 rr                        lda (tmp1),y
00187Br 3  85 rr                        sta dp+1
00187Dr 3               
00187Dr 3                               ; Conveniently, the offset into both tmp1 and UP is 4
00187Dr 3                               ; to start restoring the wordlists and search order.
00187Dr 3  A0 04                        ldy #4
00187Fr 3               
00187Fr 3               @marker_restore_loop:
00187Fr 3                               ; Copy from the dictionary back on top of the wordlists
00187Fr 3                               ; and search order.
00187Fr 3  B1 rr                        lda (tmp1), y
001881r 3  91 rr                        sta (up), y
001883r 3  C8                           iny
001884r 3  98                           tya
001885r 3  C9 28                        cmp #40                 ; One past the end of the search order.
001887r 3  D0 F6                        bne @marker_restore_loop
001889r 3               
001889r 3  20 rr rr                     jsr dp_to_current       ; Move the CURRENT DP back.
00188Cr 3               
00188Cr 3                               ; The return instruction takes us back to the original caller
00188Cr 3  60                           rts
00188Dr 3               
00188Dr 3               
00188Dr 3               
00188Dr 3               ; ## MAX ( n n -- n ) "Keep larger of two numbers"
00188Dr 3               ; ## "max"  auto  ANS core
00188Dr 3                       ; """https://forth-standard.org/standard/core/MAX
00188Dr 3                       ; Compare TOS and NOS and keep which one is larger. Adapted from
00188Dr 3                       ; Lance A. Leventhal "6502 Assembly Language Subroutines". Negative
00188Dr 3                       ; Flag indicates which number is larger. See also
00188Dr 3                       ; http://6502.org/tutorials/compare_instructions.html and
00188Dr 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
00188Dr 3                       ; """
00188Dr 3               
00188Dr 3               xt_max:
00188Dr 3  20 rr rr                     jsr underflow_2
001890r 3               
001890r 3                               ; Compare LSB. We do this first to set the carry flag
001890r 3  B5 00                        lda 0,x         ; LSB of TOS
001892r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets the carry
001894r 3               
001894r 3  B5 01                        lda 1,x         ; MSB of TOS
001896r 3  F5 03                        sbc 3,x         ; MSB of NOS
001898r 3  50 02                        bvc @no_overflow
00189Ar 3               
00189Ar 3                               ; handle overflow, because we use signed numbers
00189Ar 3  49 80                        eor #$80        ; complement negative flag
00189Cr 3               
00189Cr 3               @no_overflow:
00189Cr 3                               ; if negative, NOS is larger and needs to be kept
00189Cr 3  30 08                        bmi @keep_nos
00189Er 3               
00189Er 3                               ; move TOS to NOS
00189Er 3  B5 00                        lda 0,x
0018A0r 3  95 02                        sta 2,x
0018A2r 3  B5 01                        lda 1,x
0018A4r 3  95 03                        sta 3,x
0018A6r 3               
0018A6r 3               @keep_nos:
0018A6r 3  E8                           inx
0018A7r 3  E8                           inx
0018A8r 3               
0018A8r 3  60           z_max:          rts
0018A9r 3               
0018A9r 3               
0018A9r 3               
0018A9r 3               ; ## MIN ( n n -- n ) "Keep smaller of two numbers"
0018A9r 3               ; ## "min"  auto  ANS core
0018A9r 3                       ; """https://forth-standard.org/standard/core/MIN
0018A9r 3                       ; Adapted from Lance A. Leventhal "6502 Assembly Language
0018A9r 3                       ; Subroutines." Negative Flag indicateds which number is larger. See
0018A9r 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
0018A9r 3                       ; """
0018A9r 3               
0018A9r 3               xt_min:
0018A9r 3  20 rr rr                     jsr underflow_2
0018ACr 3               
0018ACr 3                               ; compare LSB. We do this first to set the carry flag
0018ACr 3  B5 00                        lda 0,x         ; LSB of TOS
0018AEr 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets carry
0018B0r 3               
0018B0r 3  B5 01                        lda 1,x         ; MSB of TOS
0018B2r 3  F5 03                        sbc 3,x         ; MSB of NOS
0018B4r 3  50 02                        bvc @no_overflow
0018B6r 3               
0018B6r 3                               ; handle overflow because we use signed numbers
0018B6r 3  49 80                        eor #$80
0018B8r 3               
0018B8r 3               @no_overflow:
0018B8r 3                               ; if negative, NOS is larger and needs to be dumped
0018B8r 3  10 08                        bpl @keep_nos
0018BAr 3               
0018BAr 3                               ; move TOS to NOS
0018BAr 3  B5 00                        lda 0,x
0018BCr 3  95 02                        sta 2,x
0018BEr 3  B5 01                        lda 1,x
0018C0r 3  95 03                        sta 3,x
0018C2r 3               
0018C2r 3               @keep_nos:
0018C2r 3  E8                           inx
0018C3r 3  E8                           inx
0018C4r 3               
0018C4r 3  60           z_min:          rts
0018C5r 3               
0018C5r 3               
0018C5r 3               
0018C5r 3               ; ## MINUS ( n n -- n ) "Subtract TOS from NOS"
0018C5r 3               ; ## "-"  auto  ANS core
0018C5r 3                       ; """https://forth-standard.org/standard/core/Minus"""
0018C5r 3               xt_minus:
0018C5r 3  20 rr rr                     jsr underflow_2
0018C8r 3               
0018C8r 3  38                           sec
0018C9r 3  B5 02                        lda 2,x         ; LSB
0018CBr 3  F5 00                        sbc 0,x
0018CDr 3  95 02                        sta 2,x
0018CFr 3               
0018CFr 3  B5 03                        lda 3,x         ; MSB
0018D1r 3  F5 01                        sbc 1,x
0018D3r 3  95 03                        sta 3,x
0018D5r 3               
0018D5r 3  E8                           inx
0018D6r 3  E8                           inx
0018D7r 3               
0018D7r 3  60           z_minus:        rts
0018D8r 3               
0018D8r 3               
0018D8r 3               ; ## MINUS_LEADING ( addr1 u1 -- addr2 u2 ) "Remove leading spaces"
0018D8r 3               ; ## "-leading"  auto  Tali String
0018D8r 3                       ; """Remove leading whitespace. This is the reverse of -TRAILING
0018D8r 3                       ; """
0018D8r 3               
0018D8r 3               xt_minus_leading:
0018D8r 3  20 rr rr                     jsr underflow_2
0018DBr 3               
0018DBr 3               @loop:
0018DBr 3                               ; Quit if we were given an empty string. This also terminates
0018DBr 3                               ; the main loop
0018DBr 3  B5 00                        lda 0,x
0018DDr 3  15 01                        ora 1,x
0018DFr 3  F0 0F                        beq @done
0018E1r 3               
0018E1r 3  A1 02                        lda (2,x)               ; get first character
0018E3r 3  20 rr rr                     jsr is_whitespace
0018E6r 3  90 08                        bcc @done
0018E8r 3               
0018E8r 3                               ; It's whitespace, move one down
0018E8r 3  20 rr rr                     jsr xt_one              ; ( addr u 1 )
0018EBr 3  20 rr rr                     jsr xt_slash_string     ; ( addr+ u-1 )
0018EEr 3               
0018EEr 3  80 EB                        bra @loop
0018F0r 3               @done:
0018F0r 3               z_minus_leading:
0018F0r 3  60                           rts
0018F1r 3               
0018F1r 3               
0018F1r 3               
0018F1r 3               ; ## MINUS_TRAILING ( addr u1 -- addr u2 ) "Remove trailing spaces"
0018F1r 3               ; ## "-trailing"  auto  ANS string
0018F1r 3                       ; """https://forth-standard.org/standard/string/MinusTRAILING
0018F1r 3                       ; Remove trailing spaces
0018F1r 3                       ; """
0018F1r 3               
0018F1r 3               xt_minus_trailing:
0018F1r 3  20 rr rr                     jsr underflow_2
0018F4r 3               
0018F4r 3                               ; if length entry is zero, return a zero and leave the
0018F4r 3                               ; address part untouched
0018F4r 3  B5 00                        lda 0,x         ; LSB of n
0018F6r 3  15 01                        ora 1,x         ; MSB of n
0018F8r 3  F0 33                        beq @done
0018FAr 3               
0018FAr 3                               ; Compute address of last char in tmp1 as
0018FAr 3                               ; addr + u1 - 1
0018FAr 3               
0018FAr 3                               ; addr + u1
0018FAr 3  18                           clc
0018FBr 3  B5 02                        lda 2,x         ; LSB of addr
0018FDr 3  75 00                        adc 0,x
0018FFr 3  85 rr                        sta tmp1
001901r 3  B5 03                        lda 3,x         ; MSB of addr
001903r 3  75 01                        adc 1,x
001905r 3  85 rr                        sta tmp1+1
001907r 3               
001907r 3                               ; - 1
001907r 3  A5 rr                        lda tmp1
001909r 3  D0 02                        bne @1
00190Br 3  C6 rr                        dec tmp1+1
00190Dr 3               @1:
00190Dr 3  C6 rr                        dec tmp1
00190Fr 3               
00190Fr 3               @loop:
00190Fr 3                               ; While spaces are found, move tmp1 backwards and
00190Fr 3                               ; decrease the count on the data stack.
00190Fr 3  B2 rr                        lda (tmp1)
001911r 3  C9 20                        cmp #AscSP
001913r 3  D0 18                        bne @done
001915r 3               
001915r 3                               ; Move back one address.
001915r 3  A5 rr                        lda tmp1
001917r 3  D0 02                        bne @2
001919r 3  C6 rr                        dec tmp1+1
00191Br 3               @2:
00191Br 3  C6 rr                        dec tmp1
00191Dr 3               
00191Dr 3                               ; Decrement count by one.
00191Dr 3  B5 00                        lda 0,x
00191Fr 3  D0 02                        bne @3
001921r 3  D6 01                        dec 1,x
001923r 3               @3:
001923r 3  D6 00                        dec 0,x
001925r 3               
001925r 3                               ; Check if there are any characters left.
001925r 3  B5 00                        lda 0,x
001927r 3  15 01                        ora 1,x
001929r 3  F0 02                        beq @done       ; Count has reached zero - we're done!
00192Br 3               
00192Br 3  80 E2                        bra @loop
00192Dr 3               
00192Dr 3               @done:
00192Dr 3               z_minus_trailing:
00192Dr 3  60                           rts
00192Er 3               
00192Er 3               
00192Er 3               
00192Er 3               ; ## MOD ( n1 n2 -- n ) "Divide NOS by TOS and return the remainder"
00192Er 3               ; ## "mod"  auto  ANS core
00192Er 3                       ; """https://forth-standard.org/standard/core/MOD
00192Er 3                       ;
00192Er 3                       ; The Forth definition of this word is  : MOD /MOD DROP ;
00192Er 3                       ; so we just jump to xt_slash_mod and dump the actual result.
00192Er 3                       ; """
00192Er 3               xt_mod:
00192Er 3  20 rr rr                     jsr underflow_2
001931r 3               
001931r 3  20 rr rr                     jsr xt_slash_mod
001934r 3               
001934r 3  E8                           inx             ; DROP
001935r 3  E8                           inx
001936r 3               z_mod:
001936r 3  60                           rts
001937r 3               
001937r 3               
001937r 3               ; ## MOVE ( addr1 addr2 u -- ) "Copy bytes"
001937r 3               ; ## "move"  auto  ANS core
001937r 3                       ; """https://forth-standard.org/standard/core/MOVE
001937r 3                       ; Copy u "address units" from addr1 to addr2. Since our address
001937r 3                       ; units are bytes, this is just a front-end for CMOVE and CMOVE>. This
001937r 3                       ; is actually the only one of these three words that is in the CORE
001937r 3                       ; set.
001937r 3                       ;
001937r 3                       ; This word must not be natively compiled.
001937r 3                       ; """
001937r 3               
001937r 3               xt_move:
001937r 3                               ; We let CMOVE and CMOVE> check if there is underflow or
001937r 3                               ; we've been told to copy zero bytes
001937r 3               
001937r 3                               ; compare MSB first
001937r 3  B5 03                        lda 3,x                 ; MSB of addr2
001939r 3  D5 05                        cmp 5,x                 ; MSB of addr1
00193Br 3  F0 05                        beq @lsb                ; wasn't helpful, move to LSB
00193Dr 3  B0 0E                        bcs @to_move_up         ; we want CMOVE>
00193Fr 3               
00193Fr 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001942r 3               
001942r 3               @lsb:
001942r 3                               ; MSB were equal, so do the whole thing over with LSB
001942r 3  B5 02                        lda 2,x                 ; LSB of addr2
001944r 3  D5 04                        cmp 4,x                 ; LSB of addr1
001946r 3  F0 08                        beq @equal              ; LSB is equal as well
001948r 3  B0 03                        bcs @to_move_up         ; we want CMOVE>
00194Ar 3               
00194Ar 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
00194Dr 3               
00194Dr 3               @to_move_up:
00194Dr 3  4C rr rr                     jmp xt_cmove_up         ; JSR/RTS
001950r 3               @equal:
001950r 3                               ; drop three entries from Data Stack
001950r 3  8A                           txa
001951r 3  18                           clc
001952r 3  69 06                        adc #6
001954r 3  AA                           tax
001955r 3               
001955r 3  60           z_move:         rts
001956r 3               
001956r 3               
001956r 3               
001956r 3               ; ## NAME_TO_INT ( nt -- xt ) "Convert Name Token to Execute Token"
001956r 3               ; ## "name>int"  tested  Gforth
001956r 3                       ; """See
001956r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001956r 3                       ; """
001956r 3               
001956r 3               xt_name_to_int:
001956r 3  20 rr rr                     jsr underflow_1
001959r 3               
001959r 3                               ; The xt starts four bytes down from the nt
001959r 3  B5 00                        lda 0,x
00195Br 3  18                           clc
00195Cr 3  69 04                        adc #4
00195Er 3  85 rr                        sta tmp3
001960r 3               
001960r 3  B5 01                        lda 1,x
001962r 3  90 01                        bcc @done
001964r 3  1A                           inc
001965r 3               @done:
001965r 3  85 rr                        sta tmp3+1
001967r 3               
001967r 3  A0 00                        ldy #0
001969r 3  B1 rr                        lda (tmp3),y
00196Br 3  95 00                        sta 0,x
00196Dr 3  C8                           iny
00196Er 3  B1 rr                        lda (tmp3),y
001970r 3  95 01                        sta 1,x
001972r 3               
001972r 3  60           z_name_to_int:  rts
001973r 3               
001973r 3               
001973r 3               
001973r 3               ; ## NAME_TO_STRING ( nt -- addr u ) "Given a name token, return string of word"
001973r 3               ; ## "name>string"  tested  Gforth
001973r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html"""
001973r 3               
001973r 3               xt_name_to_string:
001973r 3  20 rr rr                     jsr underflow_1
001976r 3               
001976r 3  CA                           dex
001977r 3  CA                           dex
001978r 3               
001978r 3                               ; the length of the string is the first byte of the
001978r 3                               ; header pointed to by nt
001978r 3  A1 02                        lda (2,x)
00197Ar 3  95 00                        sta 0,x
00197Cr 3  74 01                        stz 1,x
00197Er 3               
00197Er 3                               ; the string itself always starts eight bytes down
00197Er 3  B5 02                        lda 2,x         ; LSB
001980r 3  18                           clc
001981r 3  69 08                        adc #8
001983r 3  A8                           tay
001984r 3  B5 03                        lda 3,x         ; MSB
001986r 3  69 00                        adc #0          ; just need carry
001988r 3  95 03                        sta 3,x
00198Ar 3  94 02                        sty 2,x
00198Cr 3               
00198Cr 3               z_name_to_string:
00198Cr 3  60                           rts
00198Dr 3               
00198Dr 3               
00198Dr 3               ; ## NC_LIMIT ( -- addr ) "Return address where NC-LIMIT value is kept"
00198Dr 3               ; ## "nc-limit"  tested  Tali Forth
00198Dr 3               
00198Dr 3               xt_nc_limit:
00198Dr 3  CA                           dex
00198Er 3  CA                           dex
00198Fr 3  A9 rr                        lda #<nc_limit
001991r 3  95 00                        sta 0,x
001993r 3  A9 rr                        lda #>nc_limit
001995r 3  95 01                        sta 1,x
001997r 3               
001997r 3  60           z_nc_limit:     rts
001998r 3               
001998r 3               
001998r 3               
001998r 3               ; ## NEGATE ( n -- n ) "Two's complement"
001998r 3               ; ## "negate"  auto  ANS core
001998r 3                       ; """https://forth-standard.org/standard/core/NEGATE"""
001998r 3               xt_negate:
001998r 3  20 rr rr                     jsr underflow_1
00199Br 3               
00199Br 3  A9 00                	lda #0
00199Dr 3  38                           sec
00199Er 3  F5 00                        sbc 0,x         ; LSB
0019A0r 3  95 00                        sta 0,x
0019A2r 3               
0019A2r 3  A9 00                        lda #0
0019A4r 3  F5 01                        sbc 1,x         ; MSB
0019A6r 3  95 01                        sta 1,x
0019A8r 3               
0019A8r 3  60           z_negate:       rts
0019A9r 3               
0019A9r 3               
0019A9r 3               ; ## NEVER_NATIVE ( -- ) "Flag last word as never natively compiled"
0019A9r 3               ; ## "never-native"  auto  Tali Forth
0019A9r 3               xt_never_native:
0019A9r 3  20 rr rr                     jsr current_to_dp
0019ACr 3  A0 01                        ldy #1          ; offset for status byte
0019AEr 3  B1 rr                        lda (dp),y
0019B0r 3  09 08                        ora #NN         ; Make sure NN flag is set
0019B2r 3  29 FD                        and #$ff-AN     ; and AN flag is clear.
0019B4r 3  91 rr                        sta (dp),y
0019B6r 3               z_never_native:
0019B6r 3  60                           rts
0019B7r 3               
0019B7r 3               
0019B7r 3               ; ## NIP ( b a -- a ) "Delete NOS"
0019B7r 3               ; ## "nip"  auto  ANS core ext
0019B7r 3                       ; """https://forth-standard.org/standard/core/NIP"""
0019B7r 3               xt_nip:
0019B7r 3  20 rr rr                     jsr underflow_2
0019BAr 3               
0019BAr 3  B5 00                        lda 0,x         ; LSB
0019BCr 3  95 02                        sta 2,x
0019BEr 3  B5 01                        lda 1,x         ; MSB
0019C0r 3  95 03                        sta 3,x
0019C2r 3               
0019C2r 3  E8                           inx
0019C3r 3  E8                           inx
0019C4r 3               
0019C4r 3  60           z_nip:          rts
0019C5r 3               
0019C5r 3               
0019C5r 3               ; ## NOT_EQUALS ( n m -- f ) "Return a true flag if TOS != NOS"
0019C5r 3               ; ## "<>"  auto  ANS core ext
0019C5r 3                       ; """https://forth-standard.org/standard/core/ne
0019C5r 3                       ;
0019C5r 3                       ; This is just a variant of EQUAL, we code it separately
0019C5r 3                       ; for speed.
0019C5r 3                       ; """
0019C5r 3               
0019C5r 3               xt_not_equals:
0019C5r 3  20 rr rr                     jsr underflow_2
0019C8r 3               
0019C8r 3  A0 00                        ldy #0                  ; default is true
0019CAr 3               
0019CAr 3  B5 00                        lda 0,x                 ; LSB
0019CCr 3  D5 02                        cmp 2,x
0019CEr 3  D0 0A                        bne @not_equal
0019D0r 3               
0019D0r 3                               ; LSB is equal
0019D0r 3  B5 01                        lda 1,x                 ; MSB
0019D2r 3  D5 03                        cmp 3,x
0019D4r 3  D0 04                        bne @not_equal
0019D6r 3               
0019D6r 3  A9 FF                        lda #$FF
0019D8r 3  80 01                        bra @done
0019DAr 3               
0019DAr 3               @not_equal:
0019DAr 3  88                           dey                     ; drop thru to done
0019DBr 3               
0019DBr 3               @done:
0019DBr 3  98                           tya
0019DCr 3  E8                           inx
0019DDr 3  E8                           inx
0019DEr 3  95 00                        sta 0,x
0019E0r 3  95 01                        sta 1,x
0019E2r 3               
0019E2r 3  60           z_not_equals:   rts
0019E3r 3               
0019E3r 3               
0019E3r 3               
0019E3r 3               ; ## NOT_ROTE ( a b c -- c a b ) "Rotate upwards"
0019E3r 3               ; ## "-rot"  auto  Gforth
0019E3r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Data-stack.html"""
0019E3r 3               
0019E3r 3               xt_not_rote:
0019E3r 3  20 rr rr                     jsr underflow_3
0019E6r 3               
0019E6r 3  B4 01                        ldy 1,x         ; MSB first
0019E8r 3  B5 03                        lda 3,x
0019EAr 3  95 01                        sta 1,x
0019ECr 3               
0019ECr 3  B5 05                        lda 5,x
0019EEr 3  95 03                        sta 3,x
0019F0r 3  94 05                        sty 5,x
0019F2r 3               
0019F2r 3  B4 00                        ldy 0,x         ; LSB second
0019F4r 3  B5 02                        lda 2,x
0019F6r 3  95 00                        sta 0,x
0019F8r 3               
0019F8r 3  B5 04                        lda 4,x
0019FAr 3  95 02                        sta 2,x
0019FCr 3  94 04                        sty 4,x
0019FEr 3               
0019FEr 3  60           z_not_rote:     rts
0019FFr 3               
0019FFr 3               
0019FFr 3               
0019FFr 3               ; ## NUMBER ( addr u -- u | d ) "Convert a number string"
0019FFr 3               ; ## "number"  auto  Tali Forth
0019FFr 3                       ; """Convert a number string to a double or single cell number. This
0019FFr 3                       ; is a wrapper for >NUMBER and follows the convention set out in the
0019FFr 3                       ; "Forth Programmer's Handbook" (Conklin & Rather) 3rd edition p. 87.
0019FFr 3                       ; Based in part on the "Starting Forth" code
0019FFr 3                       ; https://www.forth.com/starting-forth/10-input-output-operators/
0019FFr 3                       ; Gforth uses S>NUMBER? and S>UNUMBER? which return numbers and a flag
0019FFr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
0019FFr 3                       ; Another difference to Gforth is that we follow ANS Forth that the
0019FFr 3                       ; dot to signal a double cell number is required to be the last
0019FFr 3                       ; character of the string.
0019FFr 3                       ;
0019FFr 3                       ; Number calls >NUMBER which in turn calls UM*,
0019FFr 3                       ; which uses tmp1, tmp2, and tmp3, so we can't use them here, which is
0019FFr 3                       ; a pain.
0019FFr 3                       ;"""
0019FFr 3               
0019FFr 3               xt_number:
0019FFr 3  20 rr rr                     jsr underflow_2
001A02r 3               
001A02r 3                               ; we keep the flags for sign and double in tmpdsp because
001A02r 3                               ; we've run out of temporary variables
001A02r 3  64 rr                        stz tmpdsp      ; flag for double
001A04r 3  64 rr                        stz tmpdsp+1    ; flag for minus
001A06r 3               
001A06r 3                               ; If the first character is a minus, strip it off and set
001A06r 3                               ; the flag
001A06r 3  A1 02                        lda (2,x)
001A08r 3  C9 2D                        cmp #$2D        ; ASCII for "-"
001A0Ar 3  D0 0A                        bne @check_dot
001A0Cr 3               
001A0Cr 3                               ; It's a minus
001A0Cr 3  C6 rr                        dec tmpdsp+1
001A0Er 3  F6 02                        inc 2,x         ; start one character later
001A10r 3  D0 02                        bne @1
001A12r 3  F6 03                        inc 3,x
001A14r 3               @1:
001A14r 3  D6 00                        dec 0,x         ; decrease string length by one
001A16r 3               
001A16r 3               @check_dot:
001A16r 3                               ; If the last character is a dot, strip it off and set a
001A16r 3                               ; flag. We can use tmptos as a temporary variable
001A16r 3  B5 02                        lda 2,x         ; LSB of address
001A18r 3  18                           clc
001A19r 3  75 00                        adc 0,x         ; length of string
001A1Br 3  85 rr                        sta tmptos
001A1Dr 3  B5 03                        lda 3,x
001A1Fr 3  69 00                        adc #0          ; only need carry
001A21r 3  85 rr                        sta tmptos+1
001A23r 3               
001A23r 3                               ; tmptos now points to the first character after the string,
001A23r 3                               ; but we need the last character
001A23r 3  A5 rr                        lda tmptos
001A25r 3  D0 02                        bne @2
001A27r 3  C6 rr                        dec tmptos+1
001A29r 3               @2:
001A29r 3  C6 rr                        dec tmptos
001A2Br 3               
001A2Br 3  B2 rr                        lda (tmptos)
001A2Dr 3  C9 2E                        cmp #'.'
001A2Fr 3  D0 04                        bne @main
001A31r 3               
001A31r 3                               ; We have a dot, which means this is a double number. Flag
001A31r 3                               ; the fact and reduce string length by one
001A31r 3  C6 rr                        dec tmpdsp
001A33r 3  D6 00                        dec 0,x
001A35r 3               
001A35r 3               @main:
001A35r 3                               ; Set up stack for subroutine jump to >NUMBER, which means
001A35r 3                               ; we have to go ( addr u --> ud addr u )
001A35r 3  CA                           dex
001A36r 3  CA                           dex
001A37r 3  CA                           dex
001A38r 3  CA                           dex
001A39r 3               
001A39r 3  B5 04                        lda 4,x         ; LSB of length
001A3Br 3  95 00                        sta 0,x
001A3Dr 3  74 01                        stz 1,x         ; MSB, max length 255 chars
001A3Fr 3               
001A3Fr 3  B5 06                        lda 6,x         ; LSB of address
001A41r 3  95 02                        sta 2,x
001A43r 3  B5 07                        lda 7,x         ; MSB of address
001A45r 3  95 03                        sta 3,x
001A47r 3               
001A47r 3  74 04                        stz 4,x         ; clear space for ud
001A49r 3  74 05                        stz 5,x
001A4Br 3  74 06                        stz 6,x
001A4Dr 3  74 07                        stz 7,x
001A4Fr 3               
001A4Fr 3  20 rr rr                     jsr xt_to_number        ; (ud addr u -- ud addr u )
001A52r 3               
001A52r 3                               ; test length of returned string, which should be zero
001A52r 3  B5 00                        lda 0,x
001A54r 3  F0 15                        beq @all_converted
001A56r 3               
001A56r 3                               ; Something went wrong, we still have characters left over,
001A56r 3                               ; so we print an error and abort. If the NUMBER was called
001A56r 3                               ; by INTERPRET, we've already checked for Forth words, so
001A56r 3                               ; we're in deep trouble one way or another
001A56r 3  A9 3E                        lda #$3E        ; ASCII for ">"
001A58r 3  20 rr rr                     jsr emit_a
001A5Br 3  20 rr rr                     jsr xt_type
001A5Er 3  A9 3C                        lda #$3C        ; ASCII for "<"
001A60r 3  20 rr rr                     jsr emit_a
001A63r 3  20 rr rr                     jsr xt_space
001A66r 3               
001A66r 3  A9 08                        lda #err_syntax
001A68r 3  4C rr rr                     jmp error
001A6Br 3               
001A6Br 3               @all_converted:
001A6Br 3                               ; We can drop the string info
001A6Br 3  E8                           inx
001A6Cr 3  E8                           inx
001A6Dr 3  E8                           inx
001A6Er 3  E8                           inx
001A6Fr 3               
001A6Fr 3                               ; We have a double-cell number on the Data Stack that might
001A6Fr 3                               ; actually have a minus and might actually be single-cell
001A6Fr 3  A5 rr                        lda tmpdsp      ; flag for double
001A71r 3  F0 0D                        beq @single
001A73r 3               
001A73r 3                               ; Set status bit 5 to indicate this is a double number
001A73r 3  A9 20                        lda #%00100000
001A75r 3  04 rr                        tsb status
001A77r 3               
001A77r 3                               ; This is a double cell number. If it had a minus, we'll have
001A77r 3                               ; to negate it
001A77r 3  A5 rr                        lda tmpdsp+1
001A79r 3  F0 12                        beq @done       ; no minus, all done
001A7Br 3               
001A7Br 3  20 rr rr                     jsr xt_dnegate
001A7Er 3               
001A7Er 3  80 0D                        bra @done
001A80r 3               
001A80r 3               @single:
001A80r 3                               ; This is a single number, so we just drop the top cell
001A80r 3  E8                           inx
001A81r 3  E8                           inx
001A82r 3               
001A82r 3                               ; Clear status bit 5 to indicate this is a single number
001A82r 3  A9 20                        lda #%00100000
001A84r 3  14 rr                        trb status
001A86r 3               
001A86r 3                               ; If we had a minus, we'll have to negate it
001A86r 3  A5 rr                        lda tmpdsp+1
001A88r 3  F0 03                        beq @done       ; no minus, all done
001A8Ar 3               
001A8Ar 3  20 rr rr                     jsr xt_negate
001A8Dr 3               @done:
001A8Dr 3  60           z_number:       rts
001A8Er 3               
001A8Er 3               
001A8Er 3               
001A8Er 3               ; ## NUMBER_SIGN ( ud -- ud ) "Add character to pictured output string"
001A8Er 3               ; ## "#"  auto  ANS core
001A8Er 3                       ; """https://forth-standard.org/standard/core/num
001A8Er 3                       ; Add one char to the beginning of the pictured output string.
001A8Er 3                       ;
001A8Er 3                       ; Based on
001A8Er 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001A8Er 3                       ; Forth code  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
001A8Er 3                       ; """
001A8Er 3               xt_number_sign:
001A8Er 3  20 rr rr                     jsr underflow_2         ; double number
001A91r 3               
001A91r 3  20 rr rr                     jsr xt_base
001A94r 3  20 rr rr                     jsr xt_fetch            ; ( ud1 base )
001A97r 3               
001A97r 3                               ; The following code is the ancient Forth word UD/MOD, which in
001A97r 3                               ; various Forths (including Gforth) lives on under the hood,
001A97r 3                               ; even though it's not an ANS standard word, it doesn't appear
001A97r 3                               ; in the docs, it's only used here, and there are no tests for
001A97r 3                               ; it. This is why we got rid of it. We'll be converting this
001A97r 3                               ; mess to something more sane in the long run.
001A97r 3  20 rr rr                     jsr xt_to_r             ; >r
001A9Ar 3  20 rr rr                     jsr xt_zero             ; 0
001A9Dr 3  20 rr rr                     jsr xt_r_fetch          ; r@
001AA0r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001AA3r 3  20 rr rr                     jsr xt_rot              ; rot
001AA6r 3  20 rr rr                     jsr xt_rot              ; rot
001AA9r 3  20 rr rr                     jsr xt_r_from           ; r>
001AACr 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001AAFr 3  20 rr rr                     jsr xt_rot              ; rot
001AB2r 3                               ; end of UD/MOD ( rem ud )
001AB2r 3               
001AB2r 3  20 rr rr                     jsr xt_rot              ; ( ud rem )
001AB5r 3               
001AB5r 3                               ; Convert the number that is left over to an ASCII character. We
001AB5r 3                               ; use a string lookup for speed. Use either abc_str_lower for
001AB5r 3                               ; lower case or abc_str_upper for upper case (prefered)
001AB5r 3  B5 00                        lda 0,x
001AB7r 3  A8                           tay
001AB8r 3  B9 rr rr                     lda s_abc_upper,y
001ABBr 3  95 00                        sta 0,x
001ABDr 3  74 01                        stz 1,x                 ; paranoid; now ( ud char )
001ABFr 3               
001ABFr 3  20 rr rr                     jsr xt_hold
001AC2r 3               
001AC2r 3               z_number_sign:
001AC2r 3  60                           rts
001AC3r 3               
001AC3r 3               
001AC3r 3               ; ## NUMBER_SIGN_GREATER ( d -- addr u ) "Finish pictured number conversion"
001AC3r 3               ; ## "#>"  auto  ANS core
001AC3r 3                       ; """https://forth-standard.org/standard/core/num-end
001AC3r 3                       ; Finish conversion of pictured number string, putting address and
001AC3r 3                       ; length on the Data Stack.
001AC3r 3                       ;
001AC3r 3                       ; Original Fort is  2DROP HLD @ PAD OVER -
001AC3r 3                       ; Based on
001AC3r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001AC3r 3                       ; """
001AC3r 3               xt_number_sign_greater:
001AC3r 3               
001AC3r 3  20 rr rr                     jsr underflow_2         ; double number
001AC6r 3               
001AC6r 3                               ; The start address lives in tohold
001AC6r 3  A5 rr                        lda tohold
001AC8r 3  95 00                        sta 0,x         ; LSB of tohold
001ACAr 3  95 02                        sta 2,x
001ACCr 3  A5 rr                        lda tohold+1
001ACEr 3  95 01                        sta 1,x         ; MSB of addr
001AD0r 3  95 03                        sta 3,x         ; ( addr addr )
001AD2r 3               
001AD2r 3                               ; The length of the string is pad - addr
001AD2r 3  20 rr rr                     jsr xt_pad      ; ( addr addr pad )
001AD5r 3               
001AD5r 3  38                           sec
001AD6r 3  B5 00                        lda 0,x         ; LSB of pad address
001AD8r 3  F5 02                        sbc 2,x
001ADAr 3  95 02                        sta 2,x
001ADCr 3               
001ADCr 3  B5 01                        lda 1,x         ; MSB, which should always be zero
001ADEr 3  F5 03                        sbc 3,x
001AE0r 3  95 03                        sta 3,x         ; ( addr u pad )
001AE2r 3               
001AE2r 3  E8                           inx
001AE3r 3  E8                           inx
001AE4r 3               
001AE4r 3               z_number_sign_greater:
001AE4r 3  60                           rts
001AE5r 3               
001AE5r 3               
001AE5r 3               ; ## NUMBER_SIGN_S ( d -- addr u ) "Completely convert pictured output"
001AE5r 3               ; ## "#s"  auto  ANS core
001AE5r 3                       ; """https://forth-standard.org/standard/core/numS
001AE5r 3                       ; Completely convert number for pictured numerical output.
001AE5r 3                       ;
001AE5r 3                       ; Based on
001AE5r 3                       ; https://github.com/philburk/pforth/blob/master/fth/system.fth
001AE5r 3                       ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
001AE5r 3                       ; """
001AE5r 3               
001AE5r 3               xt_number_sign_s:
001AE5r 3  20 rr rr                     jsr underflow_2
001AE8r 3               @loop:
001AE8r 3                               ; convert a single number ("#")
001AE8r 3  20 rr rr                     jsr xt_number_sign
001AEBr 3               
001AEBr 3                               ; stop when double-celled number in TOS is zero:
001AEBr 3  B5 00                        lda 0,x
001AEDr 3  15 01                        ora 1,x
001AEFr 3  15 02                        ora 2,x
001AF1r 3  15 03                        ora 3,x
001AF3r 3  D0 F3                        bne @loop
001AF5r 3               
001AF5r 3               z_number_sign_s:
001AF5r 3  60                           rts
001AF6r 3               
001AF6r 3               
001AF6r 3               
001AF6r 3               ; ## OF (C: -- of-sys) (x1 x2 -- |x1) "Conditional flow control"
001AF6r 3               ; ## "of"  auto  ANS core ext
001AF6r 3                       ; """http://forth-standard.org/standard/core/OF"""
001AF6r 3               
001AF6r 3               xt_of:
001AF6r 3                               ; Check if value is equal to this case.
001AF6r 3                               ; Postpone over (eg. compile a jsr to it)
001AF6r 3  A0 rr                        ldy #>xt_over
001AF8r 3  A9 rr                        lda #<xt_over
001AFAr 3  20 rr rr                     jsr cmpl_subroutine
001AFDr 3               
001AFDr 3                               ; Postpone = (EQUAL), that is, compile a jsr to it
001AFDr 3  A0 rr                        ldy #>xt_equal
001AFFr 3  A9 rr                        lda #<xt_equal
001B01r 3  20 rr rr                     jsr cmpl_subroutine
001B04r 3               
001B04r 3  20 rr rr                     jsr xt_if
001B07r 3               
001B07r 3                               ; If it's true, consume the original value.
001B07r 3                               ; Postpone DROP (eg. compile a jsr to it)
001B07r 3  A0 rr                        ldy #>xt_drop
001B09r 3  A9 rr                        lda #<xt_drop
001B0Br 3  20 rr rr                     jsr cmpl_subroutine
001B0Er 3               
001B0Er 3  60           z_of:           rts
001B0Fr 3               
001B0Fr 3               
001B0Fr 3               
001B0Fr 3               ; ## ONE ( -- n ) "Push the number 1 to the Data Stack"
001B0Fr 3               ; ## "1"  auto  Tali Forth
001B0Fr 3                       ; """This is also the code for EDITOR-WORDLIST"""
001B0Fr 3               xt_editor_wordlist:
001B0Fr 3               xt_one:
001B0Fr 3  CA                           dex
001B10r 3  CA                           dex
001B11r 3  A9 01                        lda #1
001B13r 3  95 00                        sta 0,x
001B15r 3  74 01                        stz 1,x
001B17r 3               
001B17r 3               z_editor_wordlist:
001B17r 3               z_one:
001B17r 3  60                           rts
001B18r 3               
001B18r 3               
001B18r 3               ; ## ONE_MINUS ( u -- u-1 ) "Decrease TOS by one"
001B18r 3               ; ## "1-"  auto  ANS core
001B18r 3                       ; """https://forth-standard.org/standard/core/OneMinus"""
001B18r 3               
001B18r 3               xt_one_minus:
001B18r 3  20 rr rr                     jsr underflow_1
001B1Br 3               
001B1Br 3  B5 00                        lda 0,x
001B1Dr 3  D0 02                        bne @1
001B1Fr 3  D6 01                        dec 1,x
001B21r 3               @1:
001B21r 3  D6 00                        dec 0,x
001B23r 3               
001B23r 3  60           z_one_minus:    rts
001B24r 3               
001B24r 3               
001B24r 3               
001B24r 3               ; ## ONE_PLUS ( u -- u+1 ) "Increase TOS by one"
001B24r 3               ; ## "1+"  auto  ANS core
001B24r 3                       ; """https://forth-standard.org/standard/core/OnePlus
001B24r 3                       ;
001B24r 3                       ; Code is shared with CHAR-PLUS
001B24r 3                       ; """
001B24r 3               
001B24r 3               xt_char_plus:
001B24r 3               xt_one_plus:
001B24r 3  20 rr rr                     jsr underflow_1
001B27r 3               
001B27r 3  F6 00                        inc 0,x
001B29r 3  D0 02                        bne @done
001B2Br 3  F6 01                        inc 1,x
001B2Dr 3               
001B2Dr 3               @done:
001B2Dr 3               z_char_plus:
001B2Dr 3  60           z_one_plus:     rts
001B2Er 3               
001B2Er 3               
001B2Er 3               
001B2Er 3               ; ## ONLY ( -- ) "Set earch order to minimum wordlist"
001B2Er 3               ; ## "only"  auto  ANS search ext
001B2Er 3                       ; """https://forth-standard.org/standard/search/ONLY"""
001B2Er 3               
001B2Er 3               xt_only:
001B2Er 3                               ; Put -1 on data stack.
001B2Er 3  CA                           dex
001B2Fr 3  CA                           dex
001B30r 3  A9 FF                        lda #$FF
001B32r 3  95 00                        sta 0,x
001B34r 3  95 01                        sta 1,x
001B36r 3               
001B36r 3                               ; Invoke set-order to set the minimum search order.
001B36r 3  20 rr rr                     jsr xt_set_order
001B39r 3               
001B39r 3  60           z_only:         rts
001B3Ar 3               
001B3Ar 3               
001B3Ar 3               
001B3Ar 3               ; ## OR ( m n -- n ) "Logically OR TOS and NOS"
001B3Ar 3               ; ## "or"  auto  ANS core
001B3Ar 3                       ; """https://forth-standard.org/standard/core/OR"
001B3Ar 3               xt_or:
001B3Ar 3  20 rr rr                     jsr underflow_2
001B3Dr 3               
001B3Dr 3  B5 00                        lda 0,x
001B3Fr 3  15 02                        ora 2,x
001B41r 3  95 02                        sta 2,x
001B43r 3               
001B43r 3  B5 01                        lda 1,x
001B45r 3  15 03                        ora 3,x
001B47r 3  95 03                        sta 3,x
001B49r 3               
001B49r 3  E8                           inx
001B4Ar 3  E8                           inx
001B4Br 3               
001B4Br 3  60           z_or:           rts
001B4Cr 3               
001B4Cr 3               
001B4Cr 3               ; ## ORDER ( -- ) "Print current word order list and current WID"
001B4Cr 3               ; ## "order"  auto  ANS core
001B4Cr 3                       ; """https://forth-standard.org/standard/search/ORDER
001B4Cr 3                       ; Note the search order is displayed from first search to last
001B4Cr 3                       ; searched and is therefore exactly the reverse of the order in which
001B4Cr 3                       ; Forth stacks are displayed.
001B4Cr 3                       ;
001B4Cr 3                       ; A Forth implementation of this word is:
001B4Cr 3                       ;
001B4Cr 3                       ; 	: .wid ( wid -- )
001B4Cr 3                       ; 	dup 0=  if ." Forth "  drop    else
001B4Cr 3                       ; 	dup 1 = if ." Editor " drop    else
001B4Cr 3                       ; 	dup 2 = if ." Assembler " drop else
001B4Cr 3                       ; 	dup 3 = if ." Root " drop      else
001B4Cr 3                       ; 	           . ( just print the number )
001B4Cr 3                       ; 	then then then then ;
001B4Cr 3                       ;
001B4Cr 3                       ; : ORDER ( -- )
001B4Cr 3                       ; 	cr get-order 0 ?do .wid loop
001B4Cr 3                       ; 	space space get-current .wid ;
001B4Cr 3                       ;
001B4Cr 3                       ; This is an interactive program, so speed
001B4Cr 3                       ; is not as important as size. We assume we do not have more than 255
001B4Cr 3                       ; wordlists.
001B4Cr 3                       ; """
001B4Cr 3               
001B4Cr 3               xt_order:
001B4Cr 3  20 rr rr                     jsr xt_cr
001B4Fr 3  20 rr rr                     jsr xt_get_order        ; ( wid_n ... wid_1 n )
001B52r 3               
001B52r 3                               ; Paranoid: Check if there are no wordlists, a rather
001B52r 3                               ; pathological case. this would mean ( 0 ) on the stack. In
001B52r 3                               ; that case, we just drop n and run
001B52r 3  B5 00                        lda 0,x                 ; assumes no more than 255 wordlists
001B54r 3  F0 1E                        beq @drop_done
001B56r 3               
001B56r 3               @have_wordlists:
001B56r 3                               ; We arrive here with the LSB of TOS in A, the number of WIDs
001B56r 3                               ; on the stack
001B56r 3  A8                           tay
001B57r 3               @loop:
001B57r 3  E8                           inx
001B58r 3  E8                           inx                     ; DROP, now ( wid_n ... wid_1 )
001B59r 3  B5 00                        lda 0,x
001B5Br 3               
001B5Br 3  5A                           phy
001B5Cr 3  20 rr rr                     jsr _print_wid_string   ; internal helper function
001B5Fr 3  7A                           ply
001B60r 3               
001B60r 3  88                           dey
001B61r 3  D0 F4                        bne @loop
001B63r 3               
001B63r 3                               ; We've printed the wordlists, now we add the current wordlist.
001B63r 3                               ; This follows the convention of Gforth
001B63r 3  20 rr rr                     jsr xt_space
001B66r 3  20 rr rr                     jsr xt_space
001B69r 3  20 rr rr                     jsr xt_get_current      ; ( wid )
001B6Cr 3               
001B6Cr 3  B5 00                        lda 0,x
001B6Er 3  20 rr rr                     jsr _print_wid_string
001B71r 3  20 rr rr                     jsr xt_cr
001B74r 3               
001B74r 3               @drop_done:
001B74r 3  E8                           inx
001B75r 3  E8                           inx
001B76r 3               z_order:
001B76r 3  60                           rts
001B77r 3               
001B77r 3               _print_wid_string:
001B77r 3                       ; """Helper function for ORDER: Given a WID in A, print the
001B77r 3                       ; corresponding string. If there is no such word list defined, just
001B77r 3                       ; print the number. Assumes we will not have more than 256 WIDs; also
001B77r 3                       ; assumes we have just loaded A so Z reflects status of byte.  In
001B77r 3                       ; theory, we could speed this up by having the WID be the same as the
001B77r 3                       ; number of the strings. However, ORDER is used rather infrequently and
001B77r 3                       ; this would make changes to the strings.asm file very dangerous, so we
001B77r 3                       ; follow the slightly more complicated route with a translation table.
001B77r 3                       ; """
001B77r 3                               ; If the WID is larger than 3, we have no string avaliable and
001B77r 3                               ; just print the number.
001B77r 3                               ; See http://6502.org/tutorials/compare_instructions.html
001B77r 3                               ; for details
001B77r 3  C9 04                        cmp #4
001B79r 3  90 09                        bcc @output_string      ; less than 4, print a real string
001B7Br 3               
001B7Br 3                               ; Our WID is not less than 4, that is, 4 or larger. We just
001B7Br 3                               ; print the number
001B7Br 3  CA                           dex
001B7Cr 3  CA                           dex
001B7Dr 3  95 00                        sta 0,x
001B7Fr 3  74 01                        stz 1,x
001B81r 3  4C rr rr                     jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
001B84r 3               
001B84r 3               @output_string:
001B84r 3                               ; Get the string number based on WID 0 to 3
001B84r 3  A8                           tay
001B85r 3  B9 rr rr                     lda @wid_data,y
001B88r 3               
001B88r 3                               ; Print without a line feed
001B88r 3  4C rr rr                     jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
001B8Br 3               
001B8Br 3               @wid_data:
001B8Br 3                       ; Table of string numbers (see strings.asm) indexed by the WID if
001B8Br 3                       ; less than 4.
001B8Br 3  03                   .byte str_wid_forth            ; WID 0: "Forth"
001B8Cr 3  06                   .byte str_wid_editor           ; WID 1: "Editor"
001B8Dr 3  07                   .byte str_wid_assembler        ; WID 2: "Assembler"
001B8Er 3  08                   .byte str_wid_root             ; WID 3: "Root"
001B8Fr 3               
001B8Fr 3               
001B8Fr 3               
001B8Fr 3               ; ## OUTPUT ( -- addr ) "Return the address of the EMIT vector address"
001B8Fr 3               ; ## "output"  tested  Tali Forth
001B8Fr 3               xt_output:
001B8Fr 3                       ; """Return the address where the jump target for EMIT is stored (but
001B8Fr 3                       ; not the vector itself). By default, this will hold the value of
001B8Fr 3                       ; kernel_putc routine, but this can be changed by the user, hence this
001B8Fr 3                       ; routine.
001B8Fr 3                       ; """
001B8Fr 3  CA                           dex
001B90r 3  CA                           dex
001B91r 3  A9 rr                        lda #<output
001B93r 3  95 00                        sta 0,x
001B95r 3  A9 rr                        lda #>output
001B97r 3  95 01                        sta 1,x
001B99r 3               
001B99r 3  60           z_output:       rts
001B9Ar 3               
001B9Ar 3               
001B9Ar 3               ; ## OVER ( b a -- b a b ) "Copy NOS to TOS"
001B9Ar 3               ; ## "over"  auto  ANS core
001B9Ar 3                       ; """https://forth-standard.org/standard/core/OVER"""
001B9Ar 3               xt_over:
001B9Ar 3  20 rr rr                     jsr underflow_2
001B9Dr 3               
001B9Dr 3  CA                           dex
001B9Er 3  CA                           dex
001B9Fr 3               
001B9Fr 3  B5 04                        lda 4,x         ; LSB
001BA1r 3  95 00                        sta 0,x
001BA3r 3  B5 05                        lda 5,x         ; MSB
001BA5r 3  95 01                        sta 1,x
001BA7r 3               
001BA7r 3  60           z_over:         rts
001BA8r 3               
001BA8r 3               
001BA8r 3               ; ## PAD ( -- addr ) "Return address of user scratchpad"
001BA8r 3               ; ## "pad"  auto  ANS core ext
001BA8r 3                       ; """https://forth-standard.org/standard/core/PAD
001BA8r 3                       ; Return address to a temporary area in free memory for user. Must
001BA8r 3                       ; be at least 84 bytes in size (says ANS). It is located relative to
001BA8r 3                       ; the compile area pointer (CP) and therefore varies in position.
001BA8r 3                       ; This area is reserved for the user and not used by the system
001BA8r 3                       ; """
001BA8r 3               xt_pad:
001BA8r 3  CA                           dex
001BA9r 3  CA                           dex
001BAAr 3               
001BAAr 3  A5 rr                        lda cp
001BACr 3  18                           clc
001BADr 3  69 FF                        adc #padoffset  ; assumes padoffset one byte in size
001BAFr 3  95 00                        sta 0,x
001BB1r 3               
001BB1r 3  A5 rr                        lda cp+1
001BB3r 3  69 00                        adc #0          ; only need carry
001BB5r 3  95 01                        sta 1,x
001BB7r 3               
001BB7r 3  60           z_pad:          rts
001BB8r 3               
001BB8r 3               
001BB8r 3               ; ## PAGE ( -- ) "Clear the screen"
001BB8r 3               ; ## "page"  tested  ANS facility
001BB8r 3                       ; """https://forth-standard.org/standard/facility/PAGE
001BB8r 3                       ; Clears a page if supported by ANS terminal codes. This is
001BB8r 3                       ; Clear Screen ("ESC[2J") plus moving the cursor to the top
001BB8r 3                       ; left of the screen
001BB8r 3                       ; """
001BB8r 3               xt_page:
001BB8r 3  A9 1B                        lda #AscESC
001BBAr 3  20 rr rr                     jsr emit_a
001BBDr 3  A9 5B                        lda #$5B        ; ASCII for "["
001BBFr 3  20 rr rr                     jsr emit_a
001BC2r 3  A9 32                        lda #'2'
001BC4r 3  20 rr rr                     jsr emit_a
001BC7r 3  A9 4A                        lda #'J'
001BC9r 3  20 rr rr                     jsr emit_a
001BCCr 3               
001BCCr 3                               ; move cursor to top left of screen
001BCCr 3  20 rr rr                     jsr xt_zero
001BCFr 3  20 rr rr                     jsr xt_zero
001BD2r 3  20 rr rr                     jsr xt_at_xy
001BD5r 3               
001BD5r 3  60           z_page:         rts
001BD6r 3               
001BD6r 3               
001BD6r 3               ; ## PAREN ( -- ) "Discard input up to close paren ( comment )"
001BD6r 3               ; ## "("  auto  ANS core
001BD6r 3                       ; """http://forth-standard.org/standard/core/p"""
001BD6r 3               
001BD6r 3               xt_paren:
001BD6r 3                               ; Put a right paren on the stack.
001BD6r 3  CA                           dex
001BD7r 3  CA                           dex
001BD8r 3  A9 29                        lda #41     ; Right parenthesis
001BDAr 3  95 00                        sta 0,x
001BDCr 3  74 01                        stz 1,x
001BDEr 3               
001BDEr 3                               ; Call parse.
001BDEr 3  20 rr rr                     jsr xt_parse
001BE1r 3               
001BE1r 3                               ; Throw away the result.
001BE1r 3  E8                           inx
001BE2r 3  E8                           inx
001BE3r 3  E8                           inx
001BE4r 3  E8                           inx
001BE5r 3               
001BE5r 3  60           z_paren:        rts
001BE6r 3               
001BE6r 3               
001BE6r 3               
001BE6r 3               ; ## PARSE_NAME ( "name" -- addr u ) "Parse the input"
001BE6r 3               ; ## "parse-name"  auto  ANS core ext
001BE6r 3                       ; """https://forth-standard.org/standard/core/PARSE-NAME
001BE6r 3                       ; Find next word in input string, skipping leading whitespace. This is
001BE6r 3                       ; a special form of PARSE and drops through to that word. See PARSE
001BE6r 3                       ; for more detail. We use this word internally for the interpreter
001BE6r 3                       ; because it is a lot easier to use. Reference implementations at
001BE6r 3                       ; http://forth-standard.org/standard/core/PARSE-NAME and
001BE6r 3                       ; http://www.forth200x.org/reference-implementations/parse-name.fs
001BE6r 3                       ; Roughly, the word is comparable to BL WORD COUNT. -- Note that
001BE6r 3                       ; though the ANS standard talks about skipping "spaces", whitespace
001BE6r 3                       ; is actually perfectly legal (see for example
001BE6r 3                       ; http://forth-standard.org/standard/usage#subsubsection.3.4.1.1).
001BE6r 3                       ; Otherwise, PARSE-NAME chokes on tabs.
001BE6r 3                       ; """
001BE6r 3               
001BE6r 3               xt_parse_name:
001BE6r 3                               ; To enable the compilation of the high-level Forth words
001BE6r 3                               ; in forth-words.asm and user-words.asm at boot time,
001BE6r 3                               ; PARSE-NAME and PARSE must be able to deal with 16-bit string
001BE6r 3                               ; lengths. This is a pain on an 8-bit machine. The pointer
001BE6r 3                               ; to the current location is in toin (>IN). We need to check,
001BE6r 3                               ; worst case, the characters from cib+toin to cib+ciblen, and
001BE6r 3                               ; we can't just use Y as an index.
001BE6r 3               
001BE6r 3                               ; The counter is CIBLEN-TOIN and stored in tmp1
001BE6r 3  A5 rr                        lda ciblen              ; LSB of counter
001BE8r 3  38                           sec
001BE9r 3  E5 rr                        sbc toin
001BEBr 3  85 rr                        sta tmp1
001BEDr 3  A5 rr                        lda ciblen+1            ; MSB
001BEFr 3  E5 rr                        sbc toin+1
001BF1r 3  85 rr                        sta tmp1+1
001BF3r 3               
001BF3r 3                               ; Check the result for zero (TOIN is equal to CIBLEN)
001BF3r 3  A5 rr                        lda tmp1
001BF5r 3  05 rr                        ora tmp1+1
001BF7r 3  F0 28                        beq @empty_line
001BF9r 3               
001BF9r 3                               ; We walk through the characters starting at CIB+TOIN, so we
001BF9r 3                               ; save a temp version of that in tmp2
001BF9r 3  A5 rr                        lda cib
001BFBr 3  18                           clc
001BFCr 3  65 rr                        adc toin
001BFEr 3  85 rr                        sta tmp2                ; LSB of first character
001C00r 3  A5 rr                        lda cib+1
001C02r 3  65 rr                        adc toin+1
001C04r 3  85 rr                        sta tmp2+1              ; MSB
001C06r 3               
001C06r 3               @skip_loop:
001C06r 3  B2 rr                        lda (tmp2)              ; work copy of cib
001C08r 3  20 rr rr                     jsr is_whitespace
001C0Br 3  90 1F                        bcc @char_found
001C0Dr 3               
001C0Dr 3                               ; Char is still whitespace, continue
001C0Dr 3  E6 rr                        inc tmp2
001C0Fr 3  D0 02                        bne @2
001C11r 3  E6 rr                        inc tmp2+1
001C13r 3               @2:
001C13r 3                               ; Adjust counter
001C13r 3  A5 rr                        lda tmp1
001C15r 3  D0 02                        bne @3
001C17r 3  C6 rr                        dec tmp1+1
001C19r 3               @3:
001C19r 3  C6 rr                        dec tmp1
001C1Br 3               
001C1Br 3  A5 rr                        lda tmp1
001C1Dr 3  05 rr                        ora tmp1+1
001C1Fr 3  D0 E5                        bne @skip_loop          ; fall through if empty line
001C21r 3               
001C21r 3               @empty_line:
001C21r 3                               ; Neither the ANS Forth nor the Gforth documentation say
001C21r 3                               ; what to return as an address if a string with only
001C21r 3                               ; spaces is given. For speed reasons, we just return junk
001C21r 3                               ; NOS, with the TOS zero as per standard
001C21r 3  CA                           dex
001C22r 3  CA                           dex
001C23r 3  CA                           dex
001C24r 3  CA                           dex
001C25r 3               
001C25r 3  74 00                        stz 0,x                 ; TOS is zero
001C27r 3  74 01                        stz 1,x
001C29r 3               
001C29r 3  4C rr rr                     jmp z_parse_name        ; skip over PARSE
001C2Cr 3               
001C2Cr 3               @char_found:
001C2Cr 3                               ; We arrive here with tmp2 pointing to the first non-space
001C2Cr 3                               ; character. This is where the word really starts, so
001C2Cr 3                               ; we use it to calculate the new >IN by subtracting
001C2Cr 3  A5 rr                        lda tmp2
001C2Er 3  38                           sec
001C2Fr 3  E5 rr                        sbc cib
001C31r 3  85 rr                        sta toin
001C33r 3  A5 rr                        lda tmp2+1
001C35r 3  E5 rr                        sbc cib+1
001C37r 3  85 rr                        sta toin+1
001C39r 3               
001C39r 3                               ; prepare Data Stack for PARSE by adding space
001C39r 3                               ; as the delimiter
001C39r 3  CA                           dex
001C3Ar 3  CA                           dex
001C3Br 3               
001C3Br 3  A9 20                        lda #AscSP
001C3Dr 3  95 00                        sta 0,x
001C3Fr 3  74 01                        stz 1,x                 ; paranoid, now ( "name" c )
001C41r 3               
001C41r 3               
001C41r 3               ; ## PARSE ( "name" c -- addr u ) "Parse input with delimiter character"
001C41r 3               ; ## "parse"  tested  ANS core ext
001C41r 3                       ; """https://forth-standard.org/standard/core/PARSE
001C41r 3                       ; Find word in input string delimited by character given. Do not
001C41r 3                       ; skip leading delimiters -- this is the main difference to PARSE-NAME.
001C41r 3                       ; PARSE and PARSE-NAME replace WORD in modern systems. ANS discussion
001C41r 3                       ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
001C41r 3                       ;
001C41r 3                       ;
001C41r 3                       ;     cib  cib+toin   cib+ciblen
001C41r 3                       ;      v      v            v
001C41r 3                       ;     |###################|
001C41r 3                       ;
001C41r 3                       ;     |------>|  toin (>IN)
001C41r 3                       ;     |------------------->|  ciblen
001C41r 3                       ;
001C41r 3                       ; The input string is stored starting at the address in the Current
001C41r 3                       ; Input Buffer (CIB), the length of which is in CIBLEN. While searching
001C41r 3                       ; for the delimiter, TOIN (>IN) points to the where we currently are.
001C41r 3                       ; Since PARSE does not skip leading delimiters, we assume we are on a
001C41r 3                       ; useful string if there are any characters at all. As with
001C41r 3                       ; PARSE-NAME, we must be able to handle strings with a length of
001C41r 3                       ; 16-bit for EVALUTE, which is a pain on an 8-bit machine.
001C41r 3                       ; """
001C41r 3               
001C41r 3               xt_parse:
001C41r 3  20 rr rr                     jsr underflow_1
001C44r 3               
001C44r 3                               ; If the input buffer is empty, we just return
001C44r 3  A5 rr                        lda ciblen
001C46r 3  05 rr                        ora ciblen+1
001C48r 3  F0 0C                        beq @abort_parse
001C4Ar 3               
001C4Ar 3                               ; If the pointer >IN is larger or equal to the length of
001C4Ar 3                               ; the input buffer (CIBLEN), the line is done. Put
001C4Ar 3                               ; differently, we only continue if >IN is smaller than
001C4Ar 3                               ; CIBLEN
001C4Ar 3  A5 rr                        lda toin+1              ; MSB
001C4Cr 3  C5 rr                        cmp ciblen+1
001C4Er 3  90 0E                        bcc @go_parse           ; unsigned comparison
001C50r 3               
001C50r 3  A5 rr                        lda toin                ; LSB
001C52r 3  C5 rr                        cmp ciblen
001C54r 3  90 08                        bcc @go_parse
001C56r 3               
001C56r 3               @abort_parse:
001C56r 3                               ; Sorry, this line is over
001C56r 3  CA                           dex
001C57r 3  CA                           dex
001C58r 3  74 00                        stz 0,x
001C5Ar 3  74 01                        stz 1,x
001C5Cr 3               
001C5Cr 3  80 7A                        bra @done
001C5Er 3               @go_parse:
001C5Er 3                               ; We actually have work to do. Save the delimiter in
001C5Er 3                               ; tmptos.
001C5Er 3  B5 00                        lda 0,x
001C60r 3  85 rr                        sta tmptos
001C62r 3               
001C62r 3                               ; We can now prepare the Data Stack for the return value
001C62r 3  CA                           dex
001C63r 3  CA                           dex
001C64r 3               
001C64r 3                               ; tmp1 is CIB+TOIN, the beginning of the current string
001C64r 3                               ; tmp2 is initially the same as tmp1, then the work index
001C64r 3                               ; tmp3 is CIB+CIBLEN, one char past the end of the string
001C64r 3               
001C64r 3                               ; Calculate the beginning of the string, which is also the
001C64r 3                               ; address to return
001C64r 3  A5 rr                        lda cib
001C66r 3  18                           clc
001C67r 3  65 rr                        adc toin        ; LSB
001C69r 3  85 rr                        sta tmp1
001C6Br 3  85 rr                        sta tmp2
001C6Dr 3  95 02                        sta 2,x
001C6Fr 3               
001C6Fr 3  A5 rr                        lda cib+1
001C71r 3  65 rr                        adc toin+1      ; MSB
001C73r 3  85 rr                        sta tmp1+1
001C75r 3  85 rr                        sta tmp2+1
001C77r 3  95 03                        sta 3,x
001C79r 3               
001C79r 3                               ; Calculate the address where the input buffer ends plus 1, so
001C79r 3                               ; we can compare it with TOIN, which is an index
001C79r 3  A5 rr                        lda cib
001C7Br 3  18                           clc
001C7Cr 3  65 rr                        adc ciblen
001C7Er 3  85 rr                        sta tmp3
001C80r 3  A5 rr                        lda cib+1
001C82r 3  65 rr                        adc ciblen+1
001C84r 3  85 rr                        sta tmp3+1
001C86r 3               
001C86r 3                               ; Initialize the offset we use to adjust EOL or found delimiter
001C86r 3  64 rr                        stz tmptos+1
001C88r 3               @loop:
001C88r 3                               ; If we are at the end of the string, quit
001C88r 3  A5 rr                        lda tmp2
001C8Ar 3  C5 rr                        cmp tmp3
001C8Cr 3  D0 06                        bne @not_empty
001C8Er 3               
001C8Er 3  A5 rr                        lda tmp2+1
001C90r 3  C5 rr                        cmp tmp3+1
001C92r 3  F0 1D                        beq @eol
001C94r 3               @not_empty:
001C94r 3                               ; We have to do this the hard way. In fact, it's really
001C94r 3                               ; hard since if we are dealing with a SPACE, the standard
001C94r 3                               ; wants us to skip all whitespace, not just spaces. Otherwise,
001C94r 3                               ; Tali would choke on tabs between words. For details, see
001C94r 3                               ; http://forth-standard.org/standard/file#subsection.11.3.5
001C94r 3                               ; In theory, we could make this faster by defining a delimiter
001C94r 3                               ; that is 00 as the sign that we skip all whitespace, thereby
001C94r 3                               ; avoiding having to test every time. However, somebody,
001C94r 3                               ; somewhere might want to parse a zero-delimited list. Since
001C94r 3                               ; any byte value could be chosen for that, we just test for
001C94r 3                               ; a space every single time for the moment.
001C94r 3  B2 rr                        lda (tmp2)
001C96r 3               
001C96r 3  A4 rr                        ldy tmptos
001C98r 3  C0 20                        cpy #AscSP
001C9Ar 3  D0 07                        bne @not_whitespace
001C9Cr 3               
001C9Cr 3                               ; The delimiter is a space, so we're looking for all
001C9Cr 3                               ; whitespace
001C9Cr 3  20 rr rr                     jsr is_whitespace
001C9Fr 3  90 02                        bcc @not_whitespace
001CA1r 3  80 0C                        bra @found_delimiter
001CA3r 3               
001CA3r 3               @not_whitespace:
001CA3r 3                               ; The delimiter is not a space, so we're looking for
001CA3r 3                               ; whatever it is
001CA3r 3  C5 rr                        cmp tmptos
001CA5r 3  F0 08                        beq @found_delimiter
001CA7r 3               
001CA7r 3                               ; Not a delimiter, next character
001CA7r 3  E6 rr                        inc tmp2
001CA9r 3  D0 DD                        bne @loop
001CABr 3  E6 rr                        inc tmp2+1
001CADr 3  80 D9                        bra @loop
001CAFr 3               
001CAFr 3               @found_delimiter:
001CAFr 3                               ; Increase the offset: If we've found a delimiter, we want
001CAFr 3                               ; TOIN to point to the character after it, not the delimiter
001CAFr 3                               ; itself
001CAFr 3  E6 rr                        inc tmptos+1
001CB1r 3               @eol:
001CB1r 3                               ; The length of the new string is tmp2-tmp1
001CB1r 3  A5 rr                        lda tmp2
001CB3r 3  38                           sec
001CB4r 3  E5 rr                        sbc tmp1
001CB6r 3  95 00                        sta 0,x
001CB8r 3               
001CB8r 3  A5 rr                        lda tmp2+1
001CBAr 3  E5 rr                        sbc tmp1+1
001CBCr 3  95 01                        sta 1,x
001CBEr 3               
001CBEr 3                               ; The new offset is tmp2-cib
001CBEr 3  A5 rr                        lda tmp2
001CC0r 3  38                           sec
001CC1r 3  E5 rr                        sbc cib
001CC3r 3  85 rr                        sta toin
001CC5r 3  A5 rr                        lda tmp2+1
001CC7r 3  E5 rr                        sbc cib+1
001CC9r 3  85 rr                        sta toin+1
001CCBr 3               
001CCBr 3                               ; Add in the delimiter
001CCBr 3  A5 rr                        lda toin
001CCDr 3  18                           clc
001CCEr 3  65 rr                        adc tmptos+1
001CD0r 3  85 rr                        sta toin
001CD2r 3  A5 rr                        lda toin+1
001CD4r 3  69 00                        adc #0          ; we only need the carry
001CD6r 3  85 rr                        sta toin+1
001CD8r 3               @done:
001CD8r 3               z_parse_name:
001CD8r 3  60           z_parse:        rts
001CD9r 3               
001CD9r 3               
001CD9r 3               
001CD9r 3               ; ## PICK ( n n u -- n n n ) "Move element u of the stack to TOS"
001CD9r 3               ; ## "pick"  auto  ANS core ext
001CD9r 3                       ; """https://forth-standard.org/standard/core/PICK
001CD9r 3                       ; Take the u-th element out of the stack and put it on TOS,
001CD9r 3                       ; overwriting the original TOS. 0 PICK is equivalent to DUP, 1 PICK to
001CD9r 3                       ; OVER. Note that using PICK is considered poor coding form. Also note
001CD9r 3                       ; that FIG Forth has a different behavior for PICK than ANS Forth.
001CD9r 3                       ; """
001CD9r 3               
001CD9r 3               xt_pick:
001CD9r 3                               ; Checking for underflow is difficult because it depends on
001CD9r 3                               ; which element we want to grab. We could probably figure
001CD9r 3                               ; something out, but it wouldn't work with underflow stripping
001CD9r 3                               ; Since using PICK is considered poor form anyway, we just
001CD9r 3                               ; leave it as it is
001CD9r 3  16 00                        asl 0,x         ; we assume u < 128 (stack is small)
001CDBr 3  8A                           txa
001CDCr 3  75 00                        adc 0,x
001CDEr 3  A8                           tay
001CDFr 3               
001CDFr 3  B9 02 00                     lda 0002,y
001CE2r 3  95 00                        sta 0,x
001CE4r 3  B9 03 00                     lda 0003,y
001CE7r 3  95 01                        sta 1,x
001CE9r 3               
001CE9r 3  60           z_pick:         rts
001CEAr 3               
001CEAr 3               
001CEAr 3               
001CEAr 3               ; ## PLUS ( n n -- n ) "Add TOS and NOS"
001CEAr 3               ; ## "+"  auto  ANS core
001CEAr 3                       ; """https://forth-standard.org/standard/core/Plus"""
001CEAr 3               xt_plus:
001CEAr 3  20 rr rr                     jsr underflow_2
001CEDr 3               
001CEDr 3  18                           clc
001CEEr 3  B5 00                        lda 0,x         ; LSB
001CF0r 3  75 02                        adc 2,x
001CF2r 3  95 02                        sta 2,x
001CF4r 3               
001CF4r 3  B5 01                        lda 1,x         ; MSB. No CLC, conserve carry bit
001CF6r 3  75 03                        adc 3,x
001CF8r 3  95 03                        sta 3,x
001CFAr 3               
001CFAr 3  E8                           inx
001CFBr 3  E8                           inx
001CFCr 3               
001CFCr 3  60           z_plus:         rts
001CFDr 3               
001CFDr 3               
001CFDr 3               ; ## PLUS_STORE ( n addr -- ) "Add number to value at given address"
001CFDr 3               ; ## "+!"  auto  ANS core
001CFDr 3                       ; """https://forth-standard.org/standard/core/PlusStore"""
001CFDr 3               xt_plus_store:
001CFDr 3  20 rr rr                     jsr underflow_2
001D00r 3               
001D00r 3                               ; move address to tmp1 so we can work with it
001D00r 3  B5 00                        lda 0,x
001D02r 3  85 rr                        sta tmp1
001D04r 3  B5 01                        lda 1,x
001D06r 3  85 rr                        sta tmp1+1
001D08r 3               
001D08r 3  A0 00                        ldy #0          ; LSB
001D0Ar 3  B1 rr                        lda (tmp1),y
001D0Cr 3  18                           clc
001D0Dr 3  75 02                        adc 2,x
001D0Fr 3  91 rr                        sta (tmp1),y
001D11r 3               
001D11r 3  C8                           iny             ; MSB
001D12r 3  B1 rr                        lda (tmp1),y
001D14r 3  75 03                        adc 3,x
001D16r 3  91 rr                        sta (tmp1),y
001D18r 3               
001D18r 3  E8                           inx
001D19r 3  E8                           inx
001D1Ar 3  E8                           inx
001D1Br 3  E8                           inx
001D1Cr 3               
001D1Cr 3  60           z_plus_store:   rts
001D1Dr 3               
001D1Dr 3               
001D1Dr 3               ; ## POSTPONE ( -- ) "Change IMMEDIATE status (it's complicated)"
001D1Dr 3               ; ## "postpone"  auto   ANS core
001D1Dr 3                       ; """https://forth-standard.org/standard/core/POSTPONE
001D1Dr 3                       ; Add the compilation behavior of a word to a new word at
001D1Dr 3                       ; compile time. If the word that follows it is immediate, include
001D1Dr 3                       ; it so that it will be compiled when the word being defined is
001D1Dr 3                       ; itself used for a new word. Tricky, but very useful.
001D1Dr 3                       ;
001D1Dr 3                       ; Because POSTPONE expects a word (not an xt) in the input stream (not
001D1Dr 3                       ; on the Data Stack). This means we cannot build words with
001D1Dr 3                       ; "jsr xt_postpone, jsr <word>" directly.
001D1Dr 3                       ; """
001D1Dr 3               
001D1Dr 3               xt_postpone:
001D1Dr 3  20 rr rr                     jsr xt_parse_name               ; ( -- addr n )
001D20r 3               
001D20r 3                               ; if there was no word provided, complain and quit
001D20r 3  B5 00                        lda 0,x
001D22r 3  15 01                        ora 1,x
001D24r 3  D0 05                        bne @1
001D26r 3               
001D26r 3  A9 05                        lda #err_noname
001D28r 3  4C rr rr                     jmp error
001D2Br 3               @1:
001D2Br 3  20 rr rr                     jsr xt_find_name                ; ( -- nt | 0 )
001D2Er 3               
001D2Er 3                               ; if word not in Dictionary, complain and quit
001D2Er 3  D0 05                        bne @2
001D30r 3  A9 05                        lda #err_noname
001D32r 3  4C rr rr                     jmp error
001D35r 3               
001D35r 3               @2:
001D35r 3                               ; keep a copy of nt for later
001D35r 3  B5 00                        lda 0,x
001D37r 3  85 rr                        sta tmp1
001D39r 3  B5 01                        lda 1,x
001D3Br 3  85 rr                        sta tmp1+1
001D3Dr 3               
001D3Dr 3                               ; We need the xt instead of the nt
001D3Dr 3  20 rr rr                     jsr xt_name_to_int              ; ( nt -- xt )
001D40r 3               
001D40r 3                               ; See if this is an immediate word. This is easier
001D40r 3                               ; with nt than with xt. The status byte of the word
001D40r 3                               ; is nt+1
001D40r 3  E6 rr                        inc tmp1
001D42r 3  D0 02                        bne @3
001D44r 3  E6 rr                        inc tmp1+1
001D46r 3               @3:
001D46r 3  B2 rr                        lda (tmp1)
001D48r 3  29 04                        and #IM         ; mask all but Intermediate flag
001D4Ar 3  F0 05                        beq @not_immediate
001D4Cr 3               
001D4Cr 3                               ; We're immediate, so instead of executing it right now, we
001D4Cr 3                               ; compile it. xt is TOS, so this is easy. The RTS at the end
001D4Cr 3                               ; takes us back to the original caller
001D4Cr 3  20 rr rr                     jsr xt_compile_comma
001D4Fr 3  80 0A                        bra @done
001D51r 3               
001D51r 3               @not_immediate:
001D51r 3                               ; This is not an immediate word, so we enact "deferred
001D51r 3                               ; compilation" by including ' <NAME> COMPILE, which we do by
001D51r 3                               ; compiling the run-time routine of LITERAL, the xt itself, and
001D51r 3                               ; a subroutine jump to COMPILE,
001D51r 3  20 rr rr                     jsr xt_literal
001D54r 3               
001D54r 3                               ; Last, compile COMPILE,
001D54r 3  A0 rr                        ldy #>xt_compile_comma
001D56r 3  A9 rr                        lda #<xt_compile_comma
001D58r 3  20 rr rr                     jsr cmpl_subroutine
001D5Br 3               @done:
001D5Br 3  60           z_postpone:     rts
001D5Cr 3               
001D5Cr 3               
001D5Cr 3               
001D5Cr 3               ; ## PREVIOUS ( -- ) "Remove the first wordlist in the search order"
001D5Cr 3               ; ## "previous"  auto  ANS search ext
001D5Cr 3                       ; """http://forth-standard.org/standard/search/PREVIOUS"""
001D5Cr 3               
001D5Cr 3               xt_previous:
001D5Cr 3  20 rr rr                     jsr xt_get_order
001D5Fr 3  20 rr rr                     jsr xt_nip
001D62r 3  20 rr rr                     jsr xt_one_minus
001D65r 3  20 rr rr                     jsr xt_set_order
001D68r 3               
001D68r 3  60           z_previous:     rts
001D69r 3               
001D69r 3               
001D69r 3               
001D69r 3               ; ## QUESTION ( addr -- ) "Print content of a variable"
001D69r 3               ; ## "?"  tested  ANS tools
001D69r 3                       ; """https://forth-standard.org/standard/tools/q
001D69r 3                       ;
001D69r 3                       ; Only used interactively. Since humans are so slow, we
001D69r 3                       ; save size and just go for the subroutine jumps
001D69r 3                       ; """
001D69r 3               xt_question:
001D69r 3                               ; FETCH takes care of underflow check
001D69r 3  20 rr rr                     jsr xt_fetch
001D6Cr 3  20 rr rr                     jsr xt_dot
001D6Fr 3               
001D6Fr 3  60           z_question:     rts
001D70r 3               
001D70r 3               
001D70r 3               ; ## QUESTION_DUP ( n -- 0 | n n ) "Duplicate TOS non-zero"
001D70r 3               ; ## "?dup"  auto  ANS core
001D70r 3                       ; """https://forth-standard.org/standard/core/qDUP"""
001D70r 3               
001D70r 3               xt_question_dup:
001D70r 3  20 rr rr                     jsr underflow_1
001D73r 3               
001D73r 3                               ; Check if TOS is zero
001D73r 3  B5 00                        lda 0,x
001D75r 3  15 01                        ora 1,x
001D77r 3  F0 0A                        beq @done
001D79r 3               
001D79r 3                               ; not zero, duplicate
001D79r 3  CA                           dex
001D7Ar 3  CA                           dex
001D7Br 3  B5 02                        lda 2,x
001D7Dr 3  95 00                        sta 0,x
001D7Fr 3  B5 03                        lda 3,x
001D81r 3  95 01                        sta 1,x
001D83r 3               @done:
001D83r 3  60           z_question_dup: rts
001D84r 3               
001D84r 3               
001D84r 3               
001D84r 3               ; ## R_FETCH ( -- n ) "Get copy of top of Return Stack"
001D84r 3               ; ## "r@"  auto  ANS core
001D84r 3                       ; """https://forth-standard.org/standard/core/RFetch
001D84r 3                       ; This word is Compile Only in Tali Forth, though Gforth has it
001D84r 3                       ; work normally as well
001D84r 3                       ;
001D84r 3                       ; An alternative way to write this word
001D84r 3                       ; would be to access the elements on the stack directly like 2R@
001D84r 3                       ; does, these versions should be compared at some point.
001D84r 3                       ; """
001D84r 3               xt_r_fetch:
001D84r 3                               ; get the return address
001D84r 3  7A                           ply             ; LSB
001D85r 3  84 rr                        sty tmp1
001D87r 3  7A                           ply             ; MSB
001D88r 3               
001D88r 3                               ; --- CUT FOR NATIVE COMPILE ---
001D88r 3               
001D88r 3                               ; get the actual top of Return Stack
001D88r 3  CA                           dex
001D89r 3  CA                           dex
001D8Ar 3               
001D8Ar 3  68                           pla             ; LSB
001D8Br 3  95 00                        sta 0,x
001D8Dr 3  68                           pla             ; MSB
001D8Er 3  95 01                        sta 1,x
001D90r 3               
001D90r 3                               ; now we have to put that value back
001D90r 3  48                           pha
001D91r 3  B5 00                        lda 0,x
001D93r 3  48                           pha
001D94r 3               
001D94r 3                               ; --- CUT FOR NATIVE COMPILE ---
001D94r 3               
001D94r 3                               ; restore return value
001D94r 3  5A                           phy             ; MSB
001D95r 3  A4 rr                        ldy tmp1
001D97r 3  5A                           phy             ; LSB
001D98r 3               
001D98r 3  60           z_r_fetch:      rts
001D99r 3               
001D99r 3               
001D99r 3               ; ## R_FROM ( -- n )(R: n --) "Move top of Return Stack to TOS"
001D99r 3               ; ## "r>"  auto  ANS core
001D99r 3                       ; """https://forth-standard.org/standard/core/Rfrom
001D99r 3                       ; Move Top of Return Stack to Top of Data Stack.
001D99r 3                       ;
001D99r 3                       ; We have to move
001D99r 3                       ; the RTS address out of the way first. This word is handled
001D99r 3                       ; differently for native and and subroutine compilation, see COMPILE,
001D99r 3                       ; This is a compile-only word
001D99r 3                       ; """
001D99r 3               
001D99r 3               xt_r_from:
001D99r 3                               ; Rescue the address of the return jump that is currently
001D99r 3                               ; on top of the Return Stack. If this word is natively
001D99r 3                               ; compiled, this is a total waste of time
001D99r 3  68                           pla             ; LSB
001D9Ar 3  85 rr                        sta tmptos
001D9Cr 3  7A                           ply             ; MSB
001D9Dr 3               
001D9Dr 3                               ; --- CUT FOR NATIVE CODING ---
001D9Dr 3               
001D9Dr 3  CA                           dex
001D9Er 3  CA                           dex
001D9Fr 3               
001D9Fr 3                               ; now we can access the actual data
001D9Fr 3               
001D9Fr 3  68                           pla             ; LSB
001DA0r 3  95 00                        sta 0,x
001DA2r 3  68                           pla             ; MSB
001DA3r 3  95 01                        sta 1,x
001DA5r 3               
001DA5r 3                               ; --- CUT FOR NATIVE CODING ---
001DA5r 3               
001DA5r 3                               ; restore the return address
001DA5r 3  5A                           phy             ; MSB
001DA6r 3  A5 rr                        lda tmptos
001DA8r 3  48                           pha             ; LSB
001DA9r 3               
001DA9r 3  60           z_r_from:       rts
001DAAr 3               
001DAAr 3               
001DAAr 3               ; ## R_TO_INPUT ( -- ) ( R: n n n n -- ) "Restore input state from Return Stack"
001DAAr 3               ; ## "r>input"  tested  Tali Forth
001DAAr 3                       ; """Restore the current input state as defined by insrc, cib, ciblen,
001DAAr 3                       ; and toin from the Return Stack.
001DAAr 3                       ;
001DAAr 3                       ; See INPUT_TO_R for a discussion of this word. Uses tmp1
001DAAr 3                       ; """
001DAAr 3               
001DAAr 3               xt_r_to_input:
001DAAr 3               
001DAAr 3                               ; We arrive here with the return address on the top of the
001DAAr 3                               ; 65c02's stack. We need to move it out of the way first
001DAAr 3  68                           pla
001DABr 3  85 rr                        sta tmp1
001DADr 3  68                           pla
001DAEr 3  85 rr                        sta tmp1+1
001DB0r 3               
001DB0r 3                               ; This assumes that insrc is the first of eight bytes and
001DB0r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001DB0r 3                               ; Page. Since we went in reverse order, insrc is now on the top
001DB0r 3                               ; of the Return Stack.
001DB0r 3  A0 00                        ldy #0
001DB2r 3               @loop:
001DB2r 3  68                           pla
001DB3r 3  99 rr rr                     sta insrc,y
001DB6r 3  C8                           iny
001DB7r 3  C0 08                        cpy #8
001DB9r 3  D0 F7                        bne @loop
001DBBr 3               
001DBBr 3                               ; Restore address for return jump
001DBBr 3  A5 rr                        lda tmp1+1
001DBDr 3  48                           pha
001DBEr 3  A5 rr                        lda tmp1
001DC0r 3  48                           pha
001DC1r 3               
001DC1r 3  60           z_r_to_input: 	rts
001DC2r 3               
001DC2r 3               
001DC2r 3               
001DC2r 3               ; ## RECURSE ( -- ) "Copy recursive call to word being defined"
001DC2r 3               ; ## "recurse"  auto  ANS core
001DC2r 3                       ; """https://forth-standard.org/standard/core/RECURSE
001DC2r 3                       ;
001DC2r 3                       ; This word may not be natively compiled
001DC2r 3                       ; """
001DC2r 3               
001DC2r 3               xt_recurse:
001DC2r 3                               ; The whole routine amounts to compiling a reference to
001DC2r 3                               ; the word that is being compiled. First, we save the JSR
001DC2r 3                               ; instruction
001DC2r 3  A0 00                        ldy #0
001DC4r 3               
001DC4r 3  A9 20                        lda #$20        ; opcode for JSR
001DC6r 3  91 rr                        sta (cp),y
001DC8r 3  C8                           iny
001DC9r 3               
001DC9r 3                               ; Next, we save the LSB and MSB of the xt of the word
001DC9r 3                               ; we are currently working on. We first need to see if
001DC9r 3                               ; WORKWORD has the nt (: started the word) or the
001DC9r 3                               ; xt (:NONAME started the word). Bit 6 in status tells us.
001DC9r 3  24 rr                        bit status
001DCBr 3  70 0C                        bvs @nt_in_workword
001DCDr 3               
001DCDr 3                               ; This is a special :NONAME word. Just copy the xt
001DCDr 3                               ; from WORKWORD into the dictionary.
001DCDr 3  A5 rr                        lda workword
001DCFr 3  91 rr                        sta (cp),y
001DD1r 3  C8                           iny
001DD2r 3  A5 rr                        lda workword+1
001DD4r 3  91 rr                        sta (cp),y
001DD6r 3  C8                           iny
001DD7r 3  80 1B                        bra @update_cp
001DD9r 3               
001DD9r 3               @nt_in_workword:
001DD9r 3                               ; This is a regular : word, so the xt is four bytes down
001DD9r 3                               ; from the nt which we saved in WORKWORD. We could probably
001DD9r 3                               ; use NAME>INT here but this is going to be faster, and
001DD9r 3                               ; fast counts with recursion
001DD9r 3  A5 rr                        lda workword            ; LSB
001DDBr 3  18                           clc
001DDCr 3  69 04                        adc #4
001DDEr 3  85 rr                        sta tmp1
001DE0r 3  A5 rr                        lda workword+1          ; MSB
001DE2r 3  69 00                        adc #0
001DE4r 3  85 rr                        sta tmp1+1
001DE6r 3               
001DE6r 3  B2 rr                        lda (tmp1)
001DE8r 3  91 rr                        sta (cp),y
001DEAr 3  5A                           phy
001DEBr 3  A0 01                        ldy #1
001DEDr 3  B1 rr                        lda (tmp1),y
001DEFr 3  7A                           ply
001DF0r 3  C8                           iny
001DF1r 3  91 rr                        sta (cp),y
001DF3r 3  C8                           iny
001DF4r 3               
001DF4r 3               @update_cp:
001DF4r 3  98                           tya
001DF5r 3  18                           clc
001DF6r 3  65 rr                        adc cp
001DF8r 3  85 rr                        sta cp
001DFAr 3  90 02                        bcc @done
001DFCr 3  E6 rr                        inc cp+1
001DFEr 3               @done:
001DFEr 3  60           z_recurse:      rts
001DFFr 3               
001DFFr 3               
001DFFr 3               
001DFFr 3               ; ## REFILL ( -- f ) "Refill the input buffer"
001DFFr 3               ; ## "refill"  tested  ANS core ext
001DFFr 3                       ; """https://forth-standard.org/standard/core/REFILL
001DFFr 3                       ; Attempt to fill the input buffer from the input source, returning
001DFFr 3                       ; a true flag if successful. When the input source is the user input
001DFFr 3                       ; device, attempt to receive input into the terminal input buffer. If
001DFFr 3                       ; successful, make the result the input buffer, set >IN to zero, and
001DFFr 3                       ; return true. Receipt of a line containing no characters is considered
001DFFr 3                       ; successful. If there is no input available from the current input
001DFFr 3                       ; source, return false. When the input source is a string from EVALUATE,
001DFFr 3                       ; return false and perform no other action." See
001DFFr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001DFFr 3                       ; and Conklin & Rather p. 156. Note we don't have to care about blocks
001DFFr 3                       ; because REFILL is never used on blocks - Tali is able to evaluate the
001DFFr 3                       ; entire block as a 1024 byte string.
001DFFr 3                       ; """"
001DFFr 3               
001DFFr 3               xt_refill:
001DFFr 3                               ; Get input source from SOURCE-ID. This is an
001DFFr 3                               ; optimized version of a subroutine jump to SOURCE-ID
001DFFr 3  A5 rr                        lda insrc               ; cheat: We only check LSB
001E01r 3  D0 2D                        bne @src_not_kbd
001E03r 3               
001E03r 3                               ; SOURCE-ID of zero means we're getting stuff from the keyboard
001E03r 3                               ; with ACCEPT, which wants the address of the current input
001E03r 3                               ; buffer NOS and the max number of characters to accept TOS
001E03r 3  CA                           dex
001E04r 3  CA                           dex
001E05r 3  CA                           dex
001E06r 3  CA                           dex
001E07r 3               
001E07r 3  A5 rr                        lda cib                 ; address of CIB is NOS
001E09r 3  95 02                        sta 2,x
001E0Br 3  A5 rr                        lda cib+1
001E0Dr 3  95 03                        sta 3,x
001E0Fr 3               
001E0Fr 3  64 rr                        stz ciblen              ; go in with empty buffer
001E11r 3  64 rr                        stz ciblen+1
001E13r 3               
001E13r 3  A9 FF                        lda #bsize              ; max number of chars is TOS
001E15r 3  95 00                        sta 0,x
001E17r 3  74 01                        stz 1,x                 ; cheat: We only accept max 255
001E19r 3               
001E19r 3  20 rr rr                     jsr xt_accept           ; ( addr n1 -- n2)
001E1Cr 3               
001E1Cr 3                               ; ACCEPT returns the number of characters accepted, which
001E1Cr 3                               ; belong in CIBLEN
001E1Cr 3  B5 00                        lda 0,x
001E1Er 3  85 rr                        sta ciblen
001E20r 3  B5 01                        lda 1,x
001E22r 3  85 rr                        sta ciblen+1            ; though we only accept 255 chars
001E24r 3               
001E24r 3                               ; make >IN point to beginning of buffer
001E24r 3  64 rr                        stz toin
001E26r 3  64 rr                        stz toin+1
001E28r 3               
001E28r 3  A9 FF                        lda #$FF                ; overwrite with TRUE flag
001E2Ar 3  95 00                        sta 0,x
001E2Cr 3  95 01                        sta 1,x
001E2Er 3               
001E2Er 3  80 10                        bra @done
001E30r 3               
001E30r 3               @src_not_kbd:
001E30r 3                               ; If SOURCE-ID doesn't return a zero, it must be a string in
001E30r 3                               ; memory or a file (remember, no blocks in this version).
001E30r 3                               ; If source is a string, we were given the flag -1 ($FFFF)
001E30r 3  1A                           inc
001E31r 3  D0 08                        bne @src_not_string
001E33r 3               
001E33r 3                               ; Simply return FALSE flag as per specification
001E33r 3  CA                           dex
001E34r 3  CA                           dex
001E35r 3  74 00                        stz 0,x
001E37r 3  74 01                        stz 1,x
001E39r 3               
001E39r 3  80 05                        bra z_refill
001E3Br 3               
001E3Br 3               @src_not_string:
001E3Br 3                               ; Since we don't have blocks, this must mean that we are trying
001E3Br 3                               ; to read from a file. However, we don't have files yet, so we
001E3Br 3                               ; report an error and jump to ABORT.
001E3Br 3  A9 01                        lda #err_badsource
001E3Dr 3  4C rr rr                     jmp error
001E40r 3               @done:
001E40r 3  60           z_refill:       rts
001E41r 3               
001E41r 3               
001E41r 3               
001E41r 3               ; ## REPEAT (C: orig dest -- ) ( -- ) "Loop flow control"
001E41r 3               ; ## "repeat"  auto  ANS core
001E41r 3                       ; """http://forth-standard.org/standard/core/REPEAT"""
001E41r 3               
001E41r 3               xt_repeat:
001E41r 3                               ; Run again first
001E41r 3  20 rr rr                     jsr xt_again
001E44r 3               
001E44r 3                               ; Stuff HERE in for the branch address
001E44r 3                               ; to get out of the loop
001E44r 3  20 rr rr                     jsr xt_here
001E47r 3  20 rr rr                     jsr xt_swap
001E4Ar 3  20 rr rr                     jsr xt_store
001E4Dr 3               
001E4Dr 3  60           z_repeat:       rts
001E4Er 3               
001E4Er 3               
001E4Er 3               
001E4Er 3               ; ## RIGHT_BRACKET ( -- ) "Enter the compile state"
001E4Er 3               ; ## "]"  auto  ANS core
001E4Er 3                       ; """https://forth-standard.org/standard/right-bracket
001E4Er 3                       ; This is an immediate word.
001E4Er 3                       ; """
001E4Er 3               xt_right_bracket:
001E4Er 3  A9 FF                        lda #$FF
001E50r 3  85 rr                        sta state
001E52r 3  85 rr                        sta state+1
001E54r 3               z_right_bracket:
001E54r 3  60                           rts
001E55r 3               
001E55r 3               
001E55r 3               ; ## ROOT_WORDLIST ( -- u ) "WID for the Root (minimal) wordlist"
001E55r 3               ; ## "root-wordlist"  tested  Tali Editor
001E55r 3               xt_root_wordlist:
001E55r 3  CA                           dex             ; The WID for the Root wordlist is 3.
001E56r 3  CA                           dex
001E57r 3  A9 03                        lda #3
001E59r 3  95 00                        sta 0,x
001E5Br 3  74 01                        stz 1,x
001E5Dr 3               
001E5Dr 3               z_root_wordlist:
001E5Dr 3  60                           rts
001E5Er 3               
001E5Er 3               
001E5Er 3               ; ## ROT ( a b c -- b c a ) "Rotate first three stack entries downwards"
001E5Er 3               ; ## "rot"  auto  ANS core
001E5Er 3                       ; """https://forth-standard.org/standard/core/ROT
001E5Er 3                       ; Remember "R for 'Revolution'" - the bottom entry comes out
001E5Er 3                       ; on top!
001E5Er 3                       ; """
001E5Er 3               
001E5Er 3               xt_rot:
001E5Er 3  20 rr rr                     jsr underflow_3
001E61r 3               
001E61r 3  B4 05                        ldy 5,x         ; MSB first
001E63r 3  B5 03                        lda 3,x
001E65r 3  95 05                        sta 5,x
001E67r 3  B5 01                        lda 1,x
001E69r 3  95 03                        sta 3,x
001E6Br 3  94 01                        sty 1,x
001E6Dr 3               
001E6Dr 3  B4 04                        ldy 4,x         ; LSB next
001E6Fr 3  B5 02                        lda 2,x
001E71r 3  95 04                        sta 4,x
001E73r 3  B5 00                        lda 0,x
001E75r 3  95 02                        sta 2,x
001E77r 3  94 00                        sty 0,x
001E79r 3               
001E79r 3  60           z_rot:          rts
001E7Ar 3               
001E7Ar 3               
001E7Ar 3               
001E7Ar 3               ; ## RSHIFT ( x u -- x ) "Shift TOS to the right"
001E7Ar 3               ; ## "rshift"  auto  ANS core
001E7Ar 3                       ; """https://forth-standard.org/standard/core/RSHIFT"""
001E7Ar 3               xt_rshift:
001E7Ar 3  20 rr rr                     jsr underflow_2
001E7Dr 3               
001E7Dr 3                               ; We shift maximal by 16 bits, mask everything else
001E7Dr 3  B5 00                        lda 0,x
001E7Fr 3  29 0F                        and #%00001111
001E81r 3  F0 08                        beq @done               ; if 0 shifts, quit
001E83r 3               
001E83r 3  A8                           tay
001E84r 3               @loop:
001E84r 3  56 03                        lsr 3,x
001E86r 3  76 02                        ror 2,x
001E88r 3  88                           dey
001E89r 3  D0 F9                        bne @loop
001E8Br 3               @done:
001E8Br 3  E8                           inx
001E8Cr 3  E8                           inx
001E8Dr 3               
001E8Dr 3  60           z_rshift:       rts
001E8Er 3               
001E8Er 3               
001E8Er 3               ; ## S_BACKSLASH_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
001E8Er 3               ; ## "s\""  auto  ANS core
001E8Er 3                       ; """https://forth-standard.org/standard/core/Seq
001E8Er 3                       ; Store address and length of string given, returning ( addr u ).
001E8Er 3                       ; ANS core claims this is compile-only, but the file set expands it
001E8Er 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
001E8Er 3                       ; are evil. We follow general usage. This is just like S" except
001E8Er 3                       ; that it allows for some special escaped characters.
001E8Er 3                       ; """
001E8Er 3               
001E8Er 3               xt_s_backslash_quote:
001E8Er 3                               ; tmp2 will be used to determine if we are handling
001E8Er 3                               ; escaped characters or not. In this case, we are,
001E8Er 3                               ; so set it to $FF (the upper byte will be used to
001E8Er 3                               ; determine if we just had a \ and the next character
001E8Er 3                               ; needs to be modifed as an escaped character).
001E8Er 3  A9 FF                        lda #$FF
001E90r 3  85 rr                        sta tmp2
001E92r 3  64 rr                        stz tmp2+1
001E94r 3               
001E94r 3                               ; Now that the flag is set, jump into s_quote to process
001E94r 3                               ; the string.
001E94r 3  20 rr rr                     jsr s_quote_start
001E97r 3               @done:
001E97r 3               z_s_backslash_quote:
001E97r 3  60                           rts
001E98r 3               
001E98r 3               
001E98r 3               ; This is a helper function for s_backslash_quote to convert a character
001E98r 3               ; from ASCII to the corresponding hex value, eg 'F'->15
001E98r 3               convert_hex_value:
001E98r 3               
001E98r 3  C9 41                cmp #'A'
001E9Ar 3  90 07                bcc @digit
001E9Cr 3               
001E9Cr 3                       ; It's A-F
001E9Cr 3  29 DF                and #$DF                ; Make it uppercase.
001E9Er 3  38                   sec
001E9Fr 3  E9 37                sbc #'7'                 ; gives value 10 for 'A'
001EA1r 3  80 03                bra @done
001EA3r 3               
001EA3r 3               @digit:
001EA3r 3                       ; It's 0-9
001EA3r 3  38                   sec
001EA4r 3  E9 30                sbc #'0'
001EA6r 3               
001EA6r 3               @done:
001EA6r 3  60                   rts
001EA7r 3               
001EA7r 3               
001EA7r 3               
001EA7r 3               ; ## SEARCH_WORDLIST ( caddr u wid -- 0 | xt 1 | xt -1) "Search for a word in a wordlist"
001EA7r 3               ; ## "search-wordlist" auto ANS search
001EA7r 3                       ; """https://forth-standard.org/standard/search/SEARCH_WORDLIST"""
001EA7r 3               
001EA7r 3               xt_search_wordlist:
001EA7r 3  20 rr rr                     jsr underflow_3
001EAAr 3               
001EAAr 3                               ; Set up tmp1 with the wordlist indicated by wid
001EAAr 3                               ; on the stack. Start by putting the base address
001EAAr 3                               ; of the wordlists in tmp2.
001EAAr 3  A5 rr                        lda up
001EACr 3  18                           clc
001EADr 3  69 06                        adc #wordlists_offset
001EAFr 3  85 rr                        sta tmp2
001EB1r 3  A5 rr                        lda up+1
001EB3r 3  69 00                        adc #0          ; Adding carry
001EB5r 3  85 rr                        sta tmp2+1
001EB7r 3               
001EB7r 3                               ; Add the wid (in cells) to the base address.
001EB7r 3  B5 00                        lda 0,x
001EB9r 3  0A                           asl             ; Convert wid to offset in cells (x2)
001EBAr 3  65 rr                        adc tmp2
001EBCr 3  85 rr                        sta tmp2
001EBEr 3  90 02                        bcc @1
001EC0r 3  E6 rr                        inc tmp2+1      ; Propagate carry if needed.
001EC2r 3               
001EC2r 3                               ; tmp2 now holds the address of the dictionary pointer
001EC2r 3                               ; for the given wordlist.
001EC2r 3               @1:
001EC2r 3                               ; Remove the wid from the stack.
001EC2r 3  E8                           inx
001EC3r 3  E8                           inx
001EC4r 3               
001EC4r 3                               ; check for special case of an empty string (length zero)
001EC4r 3  B5 00                        lda 0,x
001EC6r 3  15 01                        ora 1,x
001EC8r 3  D0 03                        bne @check_wordlist
001ECAr 3  4C rr rr                     jmp @done
001ECDr 3               
001ECDr 3               @check_wordlist:
001ECDr 3                               ; Check for special case of empty wordlist
001ECDr 3                               ; (dictionary pointer, in tmp2, is 0)
001ECDr 3  A5 rr                        lda tmp2
001ECFr 3  05 rr                        ora tmp2+1
001ED1r 3  D0 03                        bne @have_string
001ED3r 3  4C rr rr                     jmp @done
001ED6r 3               
001ED6r 3               @have_string:
001ED6r 3                               ; set up first loop iteration
001ED6r 3  B2 rr                        lda (tmp2)              ; nt of first word in Dictionary
001ED8r 3  85 rr                        sta tmp1
001EDAr 3               
001EDAr 3  E6 rr                        inc tmp2                ; Move to the upper byte
001EDCr 3  D0 02                        bne @2
001EDEr 3  E6 rr                        inc tmp2+1
001EE0r 3               @2:
001EE0r 3  B2 rr                        lda (tmp2)
001EE2r 3  85 rr                        sta tmp1+1
001EE4r 3               
001EE4r 3                               ; Reuse tmp2 to hold the address of the mystery string.
001EE4r 3  B5 02                        lda 2,x                 ; Address of mystery string
001EE6r 3  85 rr                        sta tmp2
001EE8r 3  B5 03                        lda 3,x
001EEAr 3  85 rr                        sta tmp2+1
001EECr 3               
001EECr 3               @loop:
001EECr 3                               ; first quick test: Are strings the same length?
001EECr 3  B2 rr                        lda (tmp1)
001EEEr 3  D5 00                        cmp 0,x
001EF0r 3  D0 7B                        bne @next_entry
001EF2r 3               
001EF2r 3               @compare_string:
001EF2r 3                               ; are the same length, so we now have to compare each
001EF2r 3                               ; character
001EF2r 3               
001EF2r 3                               ; second quick test: Is the first character the same?
001EF2r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
001EF4r 3               
001EF4r 3                               ; Lowercase the incoming charcter.
001EF4r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
001EF6r 3  B0 07                        bcs @compare_first
001EF8r 3  C9 41                        cmp #$41        ; ASCII 'A'
001EFAr 3  90 03                        bcc @compare_first
001EFCr 3               
001EFCr 3                               ; An uppercase letter has been located.  Make it
001EFCr 3                               ; lowercase.
001EFCr 3  18                           clc
001EFDr 3  69 20                        adc #$20
001EFFr 3               
001EFFr 3               @compare_first:
001EFFr 3  A0 08                        ldy #8          ; Offset in nt to name
001F01r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
001F03r 3  D0 68                        bne @next_entry
001F05r 3               
001F05r 3                               ; string length are the same and the first character is the
001F05r 3                               ; same. If the length of the string is 1, we're already done
001F05r 3  B5 00                        lda 0,x
001F07r 3  3A                           dec
001F08r 3  F0 2C                        beq @success
001F0Ar 3               
001F0Ar 3                               ; No such luck: The strings are the same length and the first
001F0Ar 3                               ; char is the same, but the word is more than one char long.
001F0Ar 3                               ; So we suck it up and compare every single character. We go
001F0Ar 3                               ; from back to front, because words like CELLS and CELL+ would
001F0Ar 3                               ; take longer otherwise. We can also shorten the loop by one
001F0Ar 3                               ; because we've already compared the first char.
001F0Ar 3               
001F0Ar 3                               ; The string of the word we're testing against is 8 bytes down
001F0Ar 3  A5 rr                        lda tmp1
001F0Cr 3  48                           pha             ; Preserve tmp1 on the return stack.
001F0Dr 3  18                           clc
001F0Er 3  69 08                        adc #8
001F10r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
001F12r 3  A5 rr                        lda tmp1+1
001F14r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
001F15r 3  69 00                        adc #0          ; we only need the carry
001F17r 3  85 rr                        sta tmp1+1
001F19r 3               
001F19r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
001F1Br 3  88                           dey
001F1Cr 3               
001F1Cr 3               @string_loop:
001F1Cr 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
001F1Er 3               
001F1Er 3                               ; Lowercase the incoming charcter.
001F1Er 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
001F20r 3  B0 07                        bcs @check_char
001F22r 3  C9 41                        cmp #$41        ; ASCII 'A'
001F24r 3  90 03                        bcc @check_char
001F26r 3               
001F26r 3                               ; An uppercase letter has been located.  Make it
001F26r 3                               ; lowercase.
001F26r 3  18                           clc
001F27r 3  69 20                        adc #$20
001F29r 3               @check_char:
001F29r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
001F2Br 3  D0 3A                        bne @next_entry_tmp1
001F2Dr 3               
001F2Dr 3  88                           dey
001F2Er 3  D0 EC                        bne @string_loop
001F30r 3               
001F30r 3               @success_tmp1:
001F30r 3  68                           pla             ; Restore tmp1 from the return stack.
001F31r 3  85 rr                        sta tmp1+1
001F33r 3  68                           pla
001F34r 3  85 rr                        sta tmp1
001F36r 3               
001F36r 3               @success:
001F36r 3                               ; The strings match. Drop the count and put correct nt TOS
001F36r 3  E8                           inx
001F37r 3  E8                           inx
001F38r 3  A5 rr                        lda tmp1
001F3Ar 3  95 00                        sta 0,x
001F3Cr 3  A5 rr                        lda tmp1+1
001F3Er 3  95 01                        sta 1,x
001F40r 3               
001F40r 3                               ; Change the nt into an xt, but save a copy of the nt
001F40r 3                               ; to look up whether the word is immediate or not.
001F40r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001F43r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001F46r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001F49r 3               
001F49r 3  A0 00                        ldy #0                  ; Prepare flag
001F4Br 3               
001F4Br 3                               ; The flags are in the second byte of the header
001F4Br 3  F6 00                        inc 0,x
001F4Dr 3  D0 02                        bne @3
001F4Fr 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
001F51r 3               @3:
001F51r 3  A1 00                        lda (0,x)               ; ( xt char )
001F53r 3  29 04                        and #IM
001F55r 3  D0 08                        bne @immediate          ; bit set, we're immediate
001F57r 3               
001F57r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
001F59r 3  95 00                        sta 0,x
001F5Br 3  95 01                        sta 1,x
001F5Dr 3  80 28                        bra @done_nodrop
001F5Fr 3               
001F5Fr 3               @immediate:
001F5Fr 3  A9 01                        lda #1                  ; We're immediate, return 1
001F61r 3  95 00                        sta 0,x
001F63r 3  74 01                        stz 1,x
001F65r 3               
001F65r 3  80 20                        bra @done_nodrop
001F67r 3               
001F67r 3               @next_entry_tmp1:
001F67r 3  68                           pla             ; Restore tmp1 from the return stack.
001F68r 3  85 rr                        sta tmp1+1
001F6Ar 3  68                           pla
001F6Br 3  85 rr                        sta tmp1
001F6Dr 3               @next_entry:
001F6Dr 3                               ; Not the same, so we get the next word. Next header
001F6Dr 3                               ; address is two bytes down
001F6Dr 3  A0 02                        ldy #2
001F6Fr 3  B1 rr                        lda (tmp1),y
001F71r 3  48                           pha
001F72r 3  C8                           iny
001F73r 3  B1 rr                        lda (tmp1),y
001F75r 3  85 rr                        sta tmp1+1
001F77r 3  68                           pla
001F78r 3  85 rr                        sta tmp1
001F7Ar 3               
001F7Ar 3                               ; If we got a zero, we've walked the whole Dictionary and
001F7Ar 3                               ; return as a failure, otherwise try again
001F7Ar 3  05 rr                        ora tmp1+1
001F7Cr 3  F0 03                        beq @fail_done
001F7Er 3  4C rr rr                     jmp @loop
001F81r 3               
001F81r 3               @fail_done:
001F81r 3  74 02                        stz 2,x         ; failure flag
001F83r 3  74 03                        stz 3,x
001F85r 3               @done:
001F85r 3  E8                           inx
001F86r 3  E8                           inx
001F87r 3               @done_nodrop:
001F87r 3               z_search_wordlist:
001F87r 3  60                           rts
001F88r 3               
001F88r 3               
001F88r 3               
001F88r 3               ; ## SEE ( "name" -- ) "Print information about a Forth word"
001F88r 3               ; ## "see" tested  ANS tools
001F88r 3                       ; """https://forth-standard.org/standard/tools/SEE
001F88r 3                       ; SEE takes the name of a word and prints its name token (nt),
001F88r 3                       ; execution token (xt), size in bytes, flags used, and then dumps the
001F88r 3                       ; code and disassembles it.
001F88r 3                       ; """
001F88r 3               
001F88r 3               xt_see:
001F88r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
001F8Br 3  20 rr rr                     jsr xt_find_name        ; ( nt | 0 )
001F8Er 3               
001F8Er 3                               ; If we got back a zero we don't know that word and so we quit
001F8Er 3                               ; with an error
001F8Er 3  B5 00                        lda 0,x
001F90r 3  15 01                        ora 1,x
001F92r 3  D0 05                        bne @1
001F94r 3               
001F94r 3  A9 05                        lda #err_noname
001F96r 3  4C rr rr                     jmp error
001F99r 3               @1:
001F99r 3  20 rr rr                     jsr xt_cr
001F9Cr 3               
001F9Cr 3                               ; We have a legal word, so let's get serious. Save the current
001F9Cr 3                               ; number base and use hexadecimal instead.
001F9Cr 3  A5 rr                        lda base
001F9Er 3  48                           pha
001F9Fr 3  20 rr rr                     jsr xt_hex
001FA2r 3               
001FA2r 3  A9 0A                        lda #str_see_nt
001FA4r 3  20 rr rr                     jsr print_string_no_lf
001FA7r 3               
001FA7r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001FAAr 3  20 rr rr                     jsr xt_u_dot
001FADr 3  20 rr rr                     jsr xt_space            ; ( nt )
001FB0r 3               
001FB0r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001FB3r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001FB6r 3               
001FB6r 3  A9 0B                        lda #str_see_xt
001FB8r 3  20 rr rr                     jsr print_string_no_lf
001FBBr 3               
001FBBr 3  20 rr rr                     jsr xt_dup              ; ( nt xt xt )
001FBEr 3  20 rr rr                     jsr xt_u_dot
001FC1r 3  20 rr rr                     jsr xt_cr               ; ( nt xt )
001FC4r 3               
001FC4r 3                               ; We print letters for flags and then later follow it with 1 or
001FC4r 3                               ; 0 to mark if which flag is set
001FC4r 3  A9 09                        lda #str_see_flags
001FC6r 3  20 rr rr                     jsr print_string_no_lf
001FC9r 3               
001FC9r 3  20 rr rr                     jsr xt_over             ; ( nt xt nt )
001FCCr 3  20 rr rr                     jsr xt_one_plus         ; ( nt xt nt+1 )
001FCFr 3  20 rr rr                     jsr xt_fetch            ; ( nt xt flags )
001FD2r 3               
001FD2r 3  B5 00                        lda 0,x
001FD4r 3               
001FD4r 3                               ; This is crude, but for the moment it is good enough
001FD4r 3  A0 06                        ldy #6                  ; Not all bits are used
001FD6r 3               @flag_loop:
001FD6r 3  48                           pha
001FD7r 3  29 01                        and #%00000001
001FD9r 3  18                           clc
001FDAr 3  69 30                        adc #$30                ; ASCII "0"
001FDCr 3  20 rr rr                     jsr emit_a
001FDFr 3  20 rr rr                     jsr xt_space
001FE2r 3               
001FE2r 3  68                           pla
001FE3r 3  6A                           ror                     ; Next flag
001FE4r 3               
001FE4r 3  88                           dey
001FE5r 3  D0 EF                        bne @flag_loop
001FE7r 3               
001FE7r 3  20 rr rr                     jsr xt_cr
001FEAr 3               
001FEAr 3  E8                           inx
001FEBr 3  E8                           inx                     ; ( nt xt )
001FECr 3               
001FECr 3                               ; Figure out the size
001FECr 3  A9 0C                        lda #str_see_size
001FEEr 3  20 rr rr                     jsr print_string_no_lf
001FF1r 3               
001FF1r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001FF4r 3  20 rr rr                     jsr xt_wordsize         ; ( xt u )
001FF7r 3  20 rr rr                     jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
001FFAr 3  20 rr rr                     jsr xt_decimal
001FFDr 3  20 rr rr                     jsr xt_u_dot            ; ( xt u )
002000r 3  20 rr rr                     jsr xt_hex
002003r 3  20 rr rr                     jsr xt_cr
002006r 3               
002006r 3                               ; Dump hex and disassemble
002006r 3  20 rr rr                     jsr xt_two_dup          ; ( xt u xt u )
002009r 3  20 rr rr                     jsr xt_dump
00200Cr 3  20 rr rr                     jsr xt_cr
00200Fr 3  20 rr rr                     jsr xt_disasm
002012r 3               
002012r 3  68                           pla
002013r 3  85 rr                        sta base
002015r 3               
002015r 3  60           z_see:          rts
002016r 3               
002016r 3               
002016r 3               
002016r 3               ; ## SET_CURRENT ( wid -- ) "Set the compilation wordlist"
002016r 3               ; ## "set-current" auto ANS search
002016r 3                       ; """https://forth-standard.org/standard/search/SET-CURRENT"""
002016r 3               
002016r 3               xt_set_current:
002016r 3  20 rr rr                     jsr underflow_1
002019r 3               
002019r 3                               ; Save the value from the data stack.
002019r 3  A0 04                        ldy #current_offset
00201Br 3  B5 00                        lda 0,x         ; CURRENT is byte variable
00201Dr 3  91 rr                        sta (up),y      ; so only the LSB is used.
00201Fr 3               
00201Fr 3  E8                           inx
002020r 3  E8                           inx
002021r 3               
002021r 3  60           z_set_current:  rts
002022r 3               
002022r 3               
002022r 3               
002022r 3               ; ## SET_ORDER ( wid_n .. wid_1 n -- ) "Set the current search order"
002022r 3               ; ## "set-order" auto ANS search
002022r 3                       ; """https://forth-standard.org/standard/search/SET-ORDER"""
002022r 3               
002022r 3               xt_set_order:
002022r 3                               ; Test for -1 TOS
002022r 3  A9 FF                        lda #$FF
002024r 3  D5 01                        cmp 1,x
002026r 3  D0 12                        bne @start
002028r 3  D5 00                        cmp 0,x
00202Ar 3  D0 0E                        bne @start
00202Cr 3               
00202Cr 3                               ; There is a -1 TOS.  Replace it with the default
00202Cr 3                               ; search order, which is just the FORTH-WORDLIST.
00202Cr 3  CA                           dex             ; Make room for the count.
00202Dr 3  CA                           dex
00202Er 3  74 03                        stz 3,x         ; ROOT-WORDLIST is 3
002030r 3  A9 03                        lda #3
002032r 3  95 02                        sta 2,x
002034r 3  74 01                        stz 1,x         ; Count is 1.
002036r 3  A9 01                        lda #1
002038r 3  95 00                        sta 0,x
00203Ar 3               
00203Ar 3                               ; Continue processing with ( forth-wordlist 1 -- )
00203Ar 3               @start:
00203Ar 3                               ; Set #ORDER - the number of wordlists in the search order.
00203Ar 3  A0 1E                        ldy #num_order_offset
00203Cr 3  B5 00                        lda 0,x
00203Er 3  91 rr                        sta (up),y      ; #ORDER is a byte variable.
002040r 3  85 rr                        sta tmp1        ; Save a copy for zero check and looping.
002042r 3                                               ; Only the low byte is saved in tmp1 as
002042r 3                                               ; only 8 wordlists are allowed.
002042r 3               
002042r 3  E8                           inx             ; Drop the count off the data stack.
002043r 3  E8                           inx
002044r 3               
002044r 3                               ; Check if there are zero wordlists.
002044r 3  A5 rr                        lda tmp1
002046r 3  F0 0D                        beq @done       ; If zero, there are no wordlists.
002048r 3               
002048r 3                               ; Move the wordlist ids from the data stack to the search order.
002048r 3  A0 1F                        ldy #search_order_offset
00204Ar 3               @loop:
00204Ar 3                               ; Move one wordlist id over into the search order.
00204Ar 3  B5 00                        lda 0,x         ; The search order is a byte array
00204Cr 3  91 rr                        sta (up),y      ; so only save the LSB
00204Er 3  C8                           iny
00204Fr 3               
00204Fr 3                               ; Remove it from the data stack.
00204Fr 3  E8                           inx
002050r 3  E8                           inx
002051r 3               
002051r 3                               ; See if that was the last one to process (first in the list).
002051r 3  C6 rr                        dec tmp1
002053r 3  D0 F5                        bne @loop
002055r 3               
002055r 3               @done:
002055r 3  60           z_set_order:    rts
002056r 3               
002056r 3               
002056r 3               
002056r 3               
002056r 3               ; ## S_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
002056r 3               ; ## "s""  auto  ANS core
002056r 3                       ; """https://forth-standard.org/standard/core/Sq
002056r 3                       ; Store address and length of string given, returning ( addr u ).
002056r 3                       ; ANS core claims this is compile-only, but the file set expands it
002056r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
002056r 3                       ; are evil. We follow general usage.
002056r 3                       ;
002056r 3                       ; Can also be realized as
002056r 3                       ;     : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE
002056r 3                       ; but it is used so much we want it in code.
002056r 3                       ; """
002056r 3               
002056r 3               xt_s_quote:
002056r 3                               ; tmp2 will be used to determine if we are handling
002056r 3                               ; escaped characters or not.  In this case, we are
002056r 3                               ; not, so set it to zero.
002056r 3  64 rr                        stz tmp2
002058r 3  64 rr                        stz tmp2+1
00205Ar 3               
00205Ar 3               s_quote_start:
00205Ar 3                               ; Make room on the data stack for the address.
00205Ar 3  CA                           dex
00205Br 3  CA                           dex
00205Cr 3                               ; Make room on the data stack for the count.
00205Cr 3  CA                           dex
00205Dr 3  CA                           dex
00205Er 3               
00205Er 3                               ; Put a jmp over the string data with address to be filled
00205Er 3                               ; in later.
00205Er 3  A9 4C                        lda #$4C
002060r 3  20 rr rr                     jsr cmpl_a
002063r 3               
002063r 3                               ; Address to be filled in later, just use $4C for the moment
002063r 3  20 rr rr                     jsr cmpl_a
002066r 3  20 rr rr                     jsr cmpl_a
002069r 3               
002069r 3                               ; Save the current value of HERE on the data stack for the
002069r 3                               ; address of the string.
002069r 3  A5 rr                        lda cp
00206Br 3  95 02                        sta 2,x
00206Dr 3  A5 rr                        lda cp+1
00206Fr 3  95 03                        sta 3,x
002071r 3               
002071r 3               @savechars_loop:
002071r 3                               ; Start saving the string into the dictionary up to the
002071r 3                               ; ending double quote. First, check to see if the input
002071r 3                               ; buffer is empty.
002071r 3  A5 rr                        lda toin+1              ; MSB
002073r 3  C5 rr                        cmp ciblen+1
002075r 3  90 2A                        bcc @input_fine         ; unsigned comparison
002077r 3               
002077r 3  A5 rr                        lda toin                ; LSB
002079r 3  C5 rr                        cmp ciblen
00207Br 3  90 24                        bcc @input_fine
00207Dr 3               
00207Dr 3                               ; Input buffer is empty. Refill it. Refill calls accept,
00207Dr 3                               ; which uses tmp2 and tmp3. Save and restore them.
00207Dr 3  A5 rr                        lda tmp2
00207Fr 3  48                           pha
002080r 3  A5 rr                        lda tmp2+1
002082r 3  48                           pha
002083r 3  A5 rr                        lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
002085r 3  48                           pha
002086r 3               
002086r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
002089r 3               
002089r 3  68                           pla
00208Ar 3  85 rr                        sta tmp3
00208Cr 3  68                           pla
00208Dr 3  85 rr                        sta tmp2+1
00208Fr 3  68                           pla
002090r 3  85 rr                        sta tmp2
002092r 3               
002092r 3                               ; Check result of refill.
002092r 3  B5 00                        lda 0,x
002094r 3  15 01                        ora 1,x
002096r 3  D0 05                        bne @refill_ok
002098r 3               
002098r 3                               ; Something when wrong with refill.
002098r 3  A9 06                        lda #err_refill
00209Ar 3  4C rr rr                     jmp error
00209Dr 3               
00209Dr 3               @refill_ok:
00209Dr 3                               ; Remove the refill flag from the data stack.
00209Dr 3  E8                           inx
00209Er 3  E8                           inx
00209Fr 3               
00209Fr 3                               ; For refill success, jump back up to the empty check, just in
00209Fr 3                               ; case refill gave us an empty buffer (eg. empty/blank line of
00209Fr 3                               ; input)
00209Fr 3  80 D0                        bra @savechars_loop
0020A1r 3               
0020A1r 3               @input_fine:
0020A1r 3                               ; There should be at least one valid char to use.
0020A1r 3                               ; Calculate it's address at CIB+TOIN into tmp1
0020A1r 3  A5 rr                        lda cib
0020A3r 3  18                           clc
0020A4r 3  65 rr                        adc toin        ; LSB
0020A6r 3  85 rr                        sta tmp1
0020A8r 3  A5 rr                        lda cib+1
0020AAr 3  65 rr                        adc toin+1      ; MSB
0020ACr 3  85 rr                        sta tmp1+1
0020AEr 3               
0020AEr 3                               ; Get the character
0020AEr 3  B2 rr                        lda (tmp1)
0020B0r 3               
0020B0r 3                               ; Check to see if we are handling escaped characters.
0020B0r 3  24 rr                        bit tmp2
0020B2r 3  30 03                        bmi @handle_escapes    ; Only checking bit 7
0020B4r 3  4C rr rr                     jmp @regular_char
0020B7r 3               
0020B7r 3               @handle_escapes:
0020B7r 3                               ; We are handling escaped characters.  See if we have
0020B7r 3                               ; already seen the backslash.
0020B7r 3  24 rr                        bit tmp2+1
0020B9r 3  30 03                        bmi @escaped
0020BBr 3  4C rr rr                     jmp @not_escaped
0020BEr 3               
0020BEr 3               @escaped:
0020BEr 3               
0020BEr 3                               ; We have seen a backslash (previous character). Check to see if
0020BEr 3                               ; we are in the middle of a \x sequence (bit 6 of tmp2+1 will
0020BEr 3                               ; be clear in that case )
0020BEr 3  70 22                        bvs @check_esc_chars
0020C0r 3               
0020C0r 3                               ; We are in the middle of a \x sequence. Check to see if we
0020C0r 3                               ; are on the first or second digit.
0020C0r 3  A9 01                        lda #1
0020C2r 3  24 rr                        bit tmp2+1
0020C4r 3  D0 10                        bne @esc_x_second_digit
0020C6r 3               
0020C6r 3                               ; First digit.
0020C6r 3  E6 rr                        inc tmp2+1  ; Adjust flag for second digit next time.
0020C8r 3  B2 rr                        lda (tmp1)  ; Get the char again.
0020CAr 3               
0020CAr 3                               ; Convert to hex
0020CAr 3  20 rr rr                     jsr convert_hex_value
0020CDr 3               
0020CDr 3                               ; This is the upper nybble, so move it up.
0020CDr 3  0A                           asl
0020CEr 3  0A                           asl
0020CFr 3  0A                           asl
0020D0r 3  0A                           asl
0020D1r 3  85 rr                        sta tmp3    ; Save it for later.
0020D3r 3  4C rr rr                     jmp @next_character
0020D6r 3               
0020D6r 3               @esc_x_second_digit:
0020D6r 3               
0020D6r 3                               ; We are on the second hex digit of a \x sequence. Clear the
0020D6r 3                               ; escaped character flag (because we are handling it right
0020D6r 3                               ; here)
0020D6r 3  64 rr                        stz tmp2+1
0020D8r 3  B2 rr                        lda (tmp1)
0020DAr 3               
0020DAr 3                               ; Convert to hex, combine with value in tmp3
0020DAr 3  20 rr rr                     jsr convert_hex_value
0020DDr 3  05 rr                        ora tmp3
0020DFr 3               
0020DFr 3  4C rr rr                     jmp @save_character
0020E2r 3               
0020E2r 3               @check_esc_chars:
0020E2r 3                               ; Clear the escaped character flag (because we are
0020E2r 3                               ; handling it right here)
0020E2r 3  64 rr                        stz tmp2+1
0020E4r 3               
0020E4r 3                               ; Process the escaped character
0020E4r 3               @check_esc_a:
0020E4r 3  C9 61                        cmp #'a'
0020E6r 3  D0 05                        bne @check_esc_b
0020E8r 3               
0020E8r 3                               ; BEL (ASCII value 7)
0020E8r 3  A9 07                        lda #7
0020EAr 3  4C rr rr                     jmp @save_character
0020EDr 3               
0020EDr 3               @check_esc_b:
0020EDr 3  C9 62                        cmp #'b'
0020EFr 3  D0 05                        bne @check_esc_e
0020F1r 3               
0020F1r 3                               ; Backspace (ASCII value 8)
0020F1r 3  A9 08                        lda #8
0020F3r 3  4C rr rr                     jmp @save_character
0020F6r 3               
0020F6r 3               @check_esc_e:
0020F6r 3  C9 65                        cmp #'e'
0020F8r 3  D0 04                        bne @check_esc_f
0020FAr 3               
0020FAr 3                               ; ESC (ASCII value 27)
0020FAr 3  A9 1B                        lda #27
0020FCr 3  80 75                        bra @save_character
0020FEr 3               
0020FEr 3               @check_esc_f:
0020FEr 3  C9 66                        cmp #'f'
002100r 3  D0 04                        bne @check_esc_l
002102r 3               
002102r 3                               ; FF (ASCII value 12)
002102r 3  A9 0C                        lda #12
002104r 3  80 6D                        bra @save_character
002106r 3               
002106r 3               @check_esc_l:
002106r 3  C9 6C                        cmp #'l'
002108r 3  D0 04                        bne @check_esc_m
00210Ar 3               
00210Ar 3                               ; LF (ASCII value 10)
00210Ar 3  A9 0A                        lda #10
00210Cr 3  80 65                        bra @save_character
00210Er 3               
00210Er 3               @check_esc_m:
00210Er 3                               ; This one is not like the others because we save two
00210Er 3                               ; characters
00210Er 3  C9 6D                        cmp #'m'
002110r 3  D0 09                        bne @check_esc_n
002112r 3               
002112r 3                               ; CR/LF pair (ASCII values 13, 10)
002112r 3  A9 0D                        lda #13
002114r 3  20 rr rr                     jsr cmpl_a
002117r 3  A9 0A                        lda #10
002119r 3  80 58                        bra @save_character
00211Br 3               
00211Br 3               @check_esc_n:
00211Br 3  C9 6E                        cmp #'n'
00211Dr 3  D0 04                        bne @check_esc_q
00211Fr 3               
00211Fr 3                               ; newline, impl. dependant, using LF (ASCII values 10)
00211Fr 3  A9 0A                        lda #10
002121r 3  80 50                        bra @save_character
002123r 3               
002123r 3               @check_esc_q:
002123r 3  C9 71                        cmp #'q'
002125r 3  D0 04                        bne @check_esc_r
002127r 3               
002127r 3                               ; Double quote (ASCII value 34)
002127r 3  A9 22                        lda #34
002129r 3  80 48                        bra @save_character
00212Br 3               
00212Br 3               @check_esc_r:
00212Br 3  C9 72                        cmp #'r'
00212Dr 3  D0 04                        bne @check_esc_t
00212Fr 3               
00212Fr 3                               ; CR (ASCII value 13)
00212Fr 3  A9 0D                        lda #13
002131r 3  80 40                        bra @save_character
002133r 3               
002133r 3               @check_esc_t:
002133r 3  C9 74                        cmp #'t'
002135r 3  D0 04                        bne @check_esc_v
002137r 3               
002137r 3                               ; Horizontal TAB (ASCII value 9)
002137r 3  A9 09                        lda #9
002139r 3  80 38                        bra @save_character
00213Br 3               
00213Br 3               @check_esc_v:
00213Br 3  C9 76                        cmp #'v'
00213Dr 3  D0 04                        bne @check_esc_z
00213Fr 3               
00213Fr 3                               ; Vertical TAB (ASCII value 11)
00213Fr 3  A9 0B                        lda #11
002141r 3  80 30                        bra @save_character
002143r 3               
002143r 3               @check_esc_z:
002143r 3  C9 7A                        cmp #'z'
002145r 3  D0 04                        bne @check_esc_quote
002147r 3               
002147r 3                               ; NULL (ASCII value 0)
002147r 3  A9 00                        lda #0
002149r 3  80 28                        bra @save_character
00214Br 3               
00214Br 3               @check_esc_quote:
00214Br 3  C9 22                        cmp #$22
00214Dr 3  D0 04                        bne @check_esc_x
00214Fr 3               
00214Fr 3                               ; Double quote (ASCII value 34)
00214Fr 3  A9 22                        lda #34
002151r 3  80 20                        bra @save_character
002153r 3               
002153r 3               @check_esc_x:
002153r 3  C9 78                        cmp #'x'
002155r 3  D0 06                        bne @check_esc_backslash
002157r 3               
002157r 3                               ; This one is difficult. We need to get the next TWO
002157r 3                               ; characters (which might require a refill in the middle)
002157r 3                               ; and combine them as two hex digits. We do this by
002157r 3                               ; clearing bit 6 of tmp2+1 to indicate we are in a digit
002157r 3                               ; and using bit 0 to keep track of which digit we are on.
002157r 3  A9 BE                        lda #$BE        ; Clear bits 6 and 0
002159r 3  85 rr                        sta tmp2+1
00215Br 3  80 19                        bra @next_character
00215Dr 3               
00215Dr 3               @check_esc_backslash:
00215Dr 3  C9 5C                        cmp #$5C
00215Fr 3  D0 04                        bne @not_escaped
002161r 3               
002161r 3                               ; Backslash (ASCII value 92)
002161r 3  A9 5C                        lda #92
002163r 3  80 0E                        bra @save_character
002165r 3               
002165r 3               @not_escaped:
002165r 3                               ; Check for the backslash to see if we should escape
002165r 3                               ; the next char.
002165r 3  C9 5C                        cmp #$5C        ; The backslash char
002167r 3  D0 06                        bne @regular_char
002169r 3               
002169r 3                               ; We found a backslash.  Don't save anyhing, but set
002169r 3                               ; a flag (in tmp2+1) to handle the next char. We don't
002169r 3                               ; try to get the next char here as it may require a
002169r 3                               ; refill of the input buffer.
002169r 3  A9 FF                        lda #$FF
00216Br 3  85 rr                        sta tmp2+1
00216Dr 3  80 07                        bra @next_character
00216Fr 3               
00216Fr 3               @regular_char:
00216Fr 3                               ; Check if the current character is the end of the string.
00216Fr 3  C9 22                        cmp #$22        ; ASCII for "
002171r 3  F0 0C                        beq @found_string_end
002173r 3               
002173r 3               @save_character:
002173r 3                               ; If we didn't reach the end of the string, compile this
002173r 3                               ; character into the dictionary
002173r 3  20 rr rr                     jsr cmpl_a
002176r 3               
002176r 3               @next_character:
002176r 3                               ; Move on to the next character.
002176r 3  E6 rr                        inc toin
002178r 3  D0 02                        bne @savechars_loop_longjump
00217Ar 3  E6 rr                        inc toin+1
00217Cr 3               
00217Cr 3               @savechars_loop_longjump:
00217Cr 3  4C rr rr                     jmp @savechars_loop
00217Fr 3               
00217Fr 3               @found_string_end:
00217Fr 3                               ; Use up the delimiter.
00217Fr 3  E6 rr                        inc toin
002181r 3  D0 02                        bne @1
002183r 3  E6 rr                        inc toin+1
002185r 3               @1:
002185r 3                               ; Calculate the length of the string, which is the
002185r 3                               ; difference between cp and the address of the start
002185r 3                               ; of the string (currently saved on the stack).
002185r 3  A5 rr                        lda cp
002187r 3  38                           sec
002188r 3  F5 02                        sbc 2,x
00218Ar 3  95 00                        sta 0,x         ; LSB
00218Cr 3  A5 rr                        lda cp+1
00218Er 3  F5 03                        sbc 3,x
002190r 3  95 01                        sta 1,x         ; MSB
002192r 3               
002192r 3                               ; Update the address of the jump-over jmp instruction.
002192r 3                               ; First determine location of jmp instructions address.
002192r 3                               ; It should be 2 bytes before the start of the string.
002192r 3                               ; Compute it into tmp1, which is no longer being used.
002192r 3  B5 02                        lda 2,x
002194r 3  38                           sec
002195r 3  E9 02                        sbc #2
002197r 3  85 rr                        sta tmp1
002199r 3  B5 03                        lda 3,x
00219Br 3  E9 00                        sbc #0          ; Propagate borrow
00219Dr 3  85 rr                        sta tmp1+1
00219Fr 3               
00219Fr 3                               ; Update the address of the jump to HERE.
00219Fr 3  A5 rr                        lda cp
0021A1r 3  92 rr                        sta (tmp1)
0021A3r 3  A0 01                        ldy #1
0021A5r 3  A5 rr                        lda cp+1
0021A7r 3  91 rr                        sta (tmp1),y
0021A9r 3               
0021A9r 3                               ; What happens next depends on the state (which is bad, but
0021A9r 3                               ; that's the way it works at the moment). If we are
0021A9r 3                               ; interpretating, we save the string to a transient buffer
0021A9r 3                               ; and return that address (used for file calls, see
0021A9r 3                               ; https://forth-standard.org/standard/file/Sq . If we're
0021A9r 3                               ; compiling, we just need SLITERAL
0021A9r 3  A5 rr                        lda state
0021ABr 3  05 rr                        ora state+1             ; paranoid
0021ADr 3  F0 03                        beq @done
0021AFr 3               
0021AFr 3                               ; Jump into the middle of the sliteral word, after the
0021AFr 3                               ; string data has been compiled into the dictionary,
0021AFr 3                               ; because we've already done that step.
0021AFr 3  20 rr rr                     jsr sliteral_const_str         ; ( addr u -- )
0021B2r 3               
0021B2r 3               @done:
0021B2r 3  60           z_s_quote:      rts
0021B3r 3               
0021B3r 3               
0021B3r 3               
0021B3r 3               ; ## S_TO_D ( u -- d ) "Convert single cell number to double cell"
0021B3r 3               ; ## "s>d"  auto  ANS core
0021B3r 3                       ; """https://forth-standard.org/standard/core/StoD"""
0021B3r 3               
0021B3r 3               xt_s_to_d:
0021B3r 3  20 rr rr                     jsr underflow_1
0021B6r 3               
0021B6r 3  CA                           dex
0021B7r 3  CA                           dex
0021B8r 3  74 00                        stz 0,x
0021BAr 3  74 01                        stz 1,x
0021BCr 3               
0021BCr 3  B5 03                        lda 3,x
0021BEr 3  10 04                        bpl @done
0021C0r 3               
0021C0r 3                               ; negative, extend sign
0021C0r 3  D6 00                        dec 0,x
0021C2r 3  D6 01                        dec 1,x
0021C4r 3               @done:
0021C4r 3  60           z_s_to_d:       rts
0021C5r 3               
0021C5r 3               
0021C5r 3               
0021C5r 3               ; ## SAVE_BUFFERS ( -- ) "Save all dirty buffers to storage"
0021C5r 3               ; ## "save-buffers"  tested  ANS block
0021C5r 3                       ; """https://forth-standard.org/standard/block/SAVE-BUFFERS"""
0021C5r 3               
0021C5r 3               xt_save_buffers:
0021C5r 3                               ; Check the buffer status
0021C5r 3  A0 2C                        ldy #buffstatus_offset
0021C7r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
0021C9r 3  C9 03                        cmp #3          ; LSB is needed.
0021CBr 3  D0 12                        bne @done       ; Either not used or not dirty = done!
0021CDr 3               
0021CDr 3                               ; We need to save the block.
0021CDr 3  20 rr rr                     jsr xt_blkbuffer
0021D0r 3  20 rr rr                     jsr xt_buffblocknum
0021D3r 3  20 rr rr                     jsr xt_fetch
0021D6r 3  20 rr rr                     jsr xt_block_write
0021D9r 3               
0021D9r 3                               ; Mark the buffer as clean now.
0021D9r 3  A9 01                        lda #1
0021DBr 3  A0 2C                        ldy #buffstatus_offset
0021DDr 3  91 rr                        sta (up),y
0021DFr 3               
0021DFr 3               @done:
0021DFr 3  60           z_save_buffers: rts
0021E0r 3               
0021E0r 3               
0021E0r 3               
0021E0r 3               ; ## SCR ( -- addr ) "Push address of variable holding last screen listed"
0021E0r 3               ; ## "scr"  auto  ANS block ext
0021E0r 3                       ; """https://forth-standard.org/standard/block/SCR"""
0021E0r 3               xt_scr:
0021E0r 3                               ; SCR is at UP + scr_offset
0021E0r 3  CA                           dex
0021E1r 3  CA                           dex
0021E2r 3  18                           clc
0021E3r 3  A5 rr                        lda up
0021E5r 3  69 02                        adc #scr_offset ; Add offset
0021E7r 3  95 00                        sta 0,x
0021E9r 3  A5 rr                        lda up+1
0021EBr 3  69 00                        adc #0          ; Adding carry
0021EDr 3  95 01                        sta 1,x
0021EFr 3               
0021EFr 3  60           z_scr:          rts
0021F0r 3               
0021F0r 3               
0021F0r 3               ; ## SEARCH ( addr1 u1 addr2 u2 -- addr3 u3 flag) "Search for a substring"
0021F0r 3               ; ## "search"   auto  ANS string
0021F0r 3                       ; """https://forth-standard.org/standard/string/SEARCH
0021F0r 3                       ; Search for string2 (denoted by addr2 u2) in string1 (denoted by
0021F0r 3                       ; addr1 u1). If a match is found the flag will be true and
0021F0r 3                       ; addr3 will have the address of the start of the match and u3 will have
0021F0r 3                       ; the number of characters remaining from the match point to the end
0021F0r 3                       ; of the original string1. If a match is not found, the flag will be
0021F0r 3                       ; false and addr3 and u3 will be the original string1's addr1 and u1.
0021F0r 3                       ; """
0021F0r 3               
0021F0r 3               xt_search:
0021F0r 3  20 rr rr                     jsr underflow_4
0021F3r 3               
0021F3r 3                               ; ANS says if the second string is a zero-length string it
0021F3r 3                               ; automatically matches.
0021F3r 3  B5 00                        lda 0,x
0021F5r 3  15 01                        ora 1,x
0021F7r 3  D0 0B                        bne @start_search
0021F9r 3               
0021F9r 3                               ; The second string is a zero length string.  Just remove
0021F9r 3                               ; the second string and put a true flag.
0021F9r 3  E8                           inx             ; Remove u2
0021FAr 3  E8                           inx
0021FBr 3  A9 FF                        lda #$FF        ; Turn addr2 into a true flag
0021FDr 3  95 00                        sta 0,x
0021FFr 3  95 01                        sta 1,x
002201r 3  4C rr rr                     jmp z_search
002204r 3               
002204r 3               @start_search:
002204r 3                               ; Put an offset (starting at zero) on the stack.
002204r 3  20 rr rr                     jsr xt_zero
002207r 3               
002207r 3               @search_loop:
002207r 3                               ; We stop (not found) when u2 + offset > u1
002207r 3                               ; Calculate u2+offset into tmp1
002207r 3  18                           clc
002208r 3  B5 00                        lda 0,x
00220Ar 3  75 02                        adc 2,x
00220Cr 3  85 rr                        sta tmp1
00220Er 3  B5 01                        lda 1,x
002210r 3  75 03                        adc 3,x
002212r 3               
002212r 3               
002212r 3                               ; Compare to u1. Start with the high byte
002212r 3  D5 07                        cmp 7,x
002214r 3  90 12                        bcc @init_comparison ; Obviously less
002216r 3  D0 06                        bne @not_found
002218r 3               
002218r 3                               ; The upper address byte matched - check the lower byte
002218r 3                               ; Load u1 first so we can use just a carry to check.
002218r 3  B5 06                        lda 6,x
00221Ar 3  C5 rr                        cmp tmp1
00221Cr 3  B0 0A                        bcs @init_comparison
00221Er 3               
00221Er 3               @not_found:
00221Er 3                               ; The substring isn't in the main string.
00221Er 3                               ; Return just the main string and a false flag.
00221Er 3  E8                           inx             ; Remove offset
00221Fr 3  E8                           inx
002220r 3  E8                           inx             ; Remove u2
002221r 3  E8                           inx
002222r 3  74 00                        stz 0,x         ; Turn addr2 into a false flag
002224r 3  74 01                        stz 1,x
002226r 3  80 66                        bra z_search
002228r 3               
002228r 3               @init_comparison:
002228r 3                               ; Use tmp1 to hold address in string 1.
002228r 3                               ; Use tmp2 to hold address in string 2.
002228r 3                               ; Use tmp3 to hold the number of characters left to check.
002228r 3               
002228r 3                               ; Compute the starting address in string 1
002228r 3                               ; as addr1 + offset
002228r 3  18                           clc
002229r 3  B5 08                        lda 8,x
00222Br 3  75 00                        adc 0,x
00222Dr 3  85 rr                        sta tmp1
00222Fr 3  B5 09                        lda 9,x
002231r 3  75 01                        adc 1,x
002233r 3  85 rr                        sta tmp1+1
002235r 3               
002235r 3                               ; The starting address in string 2 is just addr2.
002235r 3  B5 04                        lda 4,x
002237r 3  85 rr                        sta tmp2
002239r 3  B5 05                        lda 5,x
00223Br 3  85 rr                        sta tmp2+1
00223Dr 3               
00223Dr 3                               ; The number of characters to check is u2.
00223Dr 3  B5 02                        lda 2,x
00223Fr 3  85 rr                        sta tmp3
002241r 3  B5 03                        lda 3,x
002243r 3  85 rr                        sta tmp3+1
002245r 3               
002245r 3               @comparison_loop:
002245r 3                               ; Check to see if the current characters match.
002245r 3  B2 rr                        lda (tmp1)
002247r 3  D2 rr                        cmp (tmp2)
002249r 3  F0 05                        beq @letters_match
00224Br 3               
00224Br 3                               ; One of the letters didn't match.
00224Br 3                               ; Increment the offset and try again.
00224Br 3  20 rr rr                     jsr xt_one_plus
00224Er 3  80 B7                        bra @search_loop
002250r 3               
002250r 3               @letters_match:
002250r 3                               ; The letters match.  Advance the pointers until the
002250r 3                               ; count reaches zero.
002250r 3  E6 rr                        inc tmp1
002252r 3  D0 02                        bne @1
002254r 3  E6 rr                        inc tmp1+1
002256r 3               @1:
002256r 3  E6 rr                        inc tmp2
002258r 3  D0 02                        bne @2
00225Ar 3  E6 rr                        inc tmp2+1
00225Cr 3               @2:
00225Cr 3                               ; Decrement the count of remaining letters to check.
00225Cr 3  A5 rr                        lda tmp3
00225Er 3  D0 02                        bne @3
002260r 3  C6 rr                        dec tmp3+1
002262r 3               @3:
002262r 3  C6 rr                        dec tmp3
002264r 3               
002264r 3                               ; Check if we've reached zero.
002264r 3  A5 rr                        lda tmp3
002266r 3  05 rr                        ora tmp3+1
002268r 3  D0 DB                        bne @comparison_loop ; Check the next letter
00226Ar 3               
00226Ar 3                               ; We've run out of letters and they all match!
00226Ar 3                               ; Return (addr1+offset) (u1-offset) true
00226Ar 3                               ; Add offset to addr1.
00226Ar 3  18                           clc
00226Br 3  B5 00                        lda 0,x
00226Dr 3  75 08                        adc 8,x
00226Fr 3  95 08                        sta 8,x
002271r 3  B5 01                        lda 1,x
002273r 3  75 09                        adc 9,x
002275r 3  95 09                        sta 9,x
002277r 3               
002277r 3                               ; Subtract offset from u1.
002277r 3  38                           sec
002278r 3  B5 06                        lda 6,x
00227Ar 3  F5 00                        sbc 0,x
00227Cr 3  95 06                        sta 6,x
00227Er 3  B5 07                        lda 7,x
002280r 3  F5 01                        sbc 1,x
002282r 3  95 07                        sta 7,x
002284r 3               
002284r 3                               ; Replace addr2, u2, and offset with a true flag.
002284r 3  E8                           inx             ; drop offset
002285r 3  E8                           inx
002286r 3  E8                           inx             ; drop u2
002287r 3  E8                           inx
002288r 3  A9 FF                        lda #$FF
00228Ar 3  95 00                        sta 0,x         ; Turn addr2 into a true flag.
00228Cr 3  95 01                        sta 1,x
00228Er 3               
00228Er 3  60           z_search:       rts
00228Fr 3               
00228Fr 3               
00228Fr 3               
00228Fr 3               ; ## SEMICOLON ( -- ) "End compilation of new word"
00228Fr 3               ; ## ";"  auto  ANS core
00228Fr 3                       ; """https://forth-standard.org/standard/core/Semi
00228Fr 3                       ; End the compilation of a new word into the Dictionary.
00228Fr 3                       ;
00228Fr 3                       ; When we
00228Fr 3                       ; enter this, WORKWORD is pointing to the nt_ of this word in the
00228Fr 3                       ; Dictionary, DP to the previous word, and CP to the next free byte.
00228Fr 3                       ; A Forth definition would be (see "Starting Forth"):
00228Fr 3                       ; : POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE  Following the
00228Fr 3                       ; practice of Gforth, we warn here if a word has been redefined.
00228Fr 3                       ; """
00228Fr 3               
00228Fr 3               xt_semicolon:
00228Fr 3                               ; Check if this is a : word or a :NONAME word.
00228Fr 3  24 rr                        bit status
002291r 3  70 11                        bvs @colonword
002293r 3               
002293r 3                               ; This is a :NONAME word - just put an RTS on the end and
002293r 3                               ; the address (held in workword) on the stack.
002293r 3  A9 60                        lda #$60                ; opcode for RTS
002295r 3  20 rr rr                     jsr cmpl_a
002298r 3               
002298r 3  CA                           dex
002299r 3  CA                           dex
00229Ar 3  A5 rr                        lda workword
00229Cr 3  95 00                        sta 0,x
00229Er 3  A5 rr                        lda workword+1
0022A0r 3  95 01                        sta 1,x
0022A2r 3  80 45                        bra @semicolon_done
0022A4r 3               
0022A4r 3               @colonword:
0022A4r 3                               ; CP is the byte that will be the address we use in the
0022A4r 3                               ; header as the end-of-compile address (z_word). This is
0022A4r 3                               ; six bytes down from the header
0022A4r 3  A0 06                        ldy #6
0022A6r 3  A5 rr                        lda cp
0022A8r 3  91 rr                        sta (workword),y
0022AAr 3  C8                           iny
0022ABr 3  A5 rr                        lda cp+1
0022ADr 3  91 rr                        sta (workword),y
0022AFr 3               
0022AFr 3                               ; Allocate one further byte and save the RTS instruction
0022AFr 3                               ; there
0022AFr 3  A9 60                        lda #$60                ; opcode for RTS
0022B1r 3  20 rr rr                     jsr cmpl_a
0022B4r 3               
0022B4r 3                               ; Before we formally add the word to the Dictionary, we
0022B4r 3                               ; check to see if it is already present, and if yes, we
0022B4r 3                               ; warn the user.
0022B4r 3               
0022B4r 3                               ; See if word already in Dictionary.
0022B4r 3                               ; (STATUS bit 7 will be high as CREATE already
0022B4r 3                               ;  checked for us.)
0022B4r 3  24 rr                        bit status
0022B6r 3  10 26                        bpl @new_word   ; Bit 7 is clear = new word
0022B8r 3               
0022B8r 3                               ; We start by putting the string of the
0022B8r 3                               ; word we're defining on the stack
0022B8r 3  CA                           dex
0022B9r 3  CA                           dex
0022BAr 3  CA                           dex
0022BBr 3  CA                           dex
0022BCr 3               
0022BCr 3                               ; WORKWORD points to the beginning of the head of our new
0022BCr 3                               ; word, where the first byte is the length of the string
0022BCr 3                               ; We can't use LATESTNT because we haven't added the new
0022BCr 3                               ; word to the Dictionary yet
0022BCr 3  B2 rr                        lda (workword)
0022BEr 3  95 00                        sta 0,x
0022C0r 3  74 01                        stz 1,x
0022C2r 3               
0022C2r 3                               ; Eight bytes below WORKWORD is the actual beginning of
0022C2r 3                               ; the string
0022C2r 3  A5 rr                        lda workword
0022C4r 3  18                           clc
0022C5r 3  69 08                        adc #8
0022C7r 3  95 02                        sta 2,x
0022C9r 3  A5 rr                        lda workword+1
0022CBr 3  69 00                        adc #0                  ; only want carry
0022CDr 3  95 03                        sta 3,x
0022CFr 3               
0022CFr 3                               ; This word is already in the Dictionary, so we print a
0022CFr 3                               ; warning to the user.
0022CFr 3  A9 02                        lda #str_redefined       ; address of string "redefined"
0022D1r 3  20 rr rr                     jsr print_string_no_lf
0022D4r 3               
0022D4r 3                               ; Now we print the offending word.
0022D4r 3  20 rr rr                     jsr xt_type
0022D7r 3  20 rr rr                     jsr xt_space
0022DAr 3               
0022DAr 3                               ; Clear bit 7 of status (so future words will print message
0022DAr 3                               ; by defaut)
0022DAr 3  A9 80                        lda #%10000000
0022DCr 3  14 rr                        trb status
0022DEr 3               
0022DEr 3               @new_word:
0022DEr 3                               ; Let's get this over with. Save beginning of our word
0022DEr 3                               ; as new last word in the Dictionary
0022DEr 3  A5 rr                        lda workword
0022E0r 3  85 rr                        sta dp
0022E2r 3  A5 rr                        lda workword+1
0022E4r 3  85 rr                        sta dp+1
0022E6r 3  20 rr rr                     jsr dp_to_current       ; Save the updated DP to the
0022E9r 3                                                       ; CURRENT wordlist.
0022E9r 3               @semicolon_done:
0022E9r 3                               ; Word definition complete. Return compile flag to zero
0022E9r 3                               ; to return to interpret mode
0022E9r 3  64 rr                        stz state
0022EBr 3  64 rr                        stz state+1
0022EDr 3               
0022EDr 3  60           z_semicolon:    rts
0022EEr 3               
0022EEr 3               
0022EEr 3               
0022EEr 3               ; ## SIGN ( n -- ) "Add minus to pictured output"
0022EEr 3               ; ## "sign"  auto  ANS core
0022EEr 3                       ; """https://forth-standard.org/standard/core/SIGN
0022EEr 3                       ;
0022EEr 3                       ; Code based on
0022EEr 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
0022EEr 3                       ; Original Forth code is   0< IF ASCII - HOLD THEN
0022EEr 3                       ; """
0022EEr 3               
0022EEr 3               xt_sign:
0022EEr 3  20 rr rr                     jsr underflow_1
0022F1r 3               
0022F1r 3  B5 01                        lda 1,x         ; check MSB of TOS
0022F3r 3  30 04                        bmi @minus
0022F5r 3               
0022F5r 3  E8                           inx
0022F6r 3  E8                           inx
0022F7r 3  80 09                        bra @done
0022F9r 3               @minus:
0022F9r 3  A9 2D                        lda #$2D        ; ASCII for "-"
0022FBr 3  95 00                        sta 0,x         ; overwrite TOS
0022FDr 3  74 01                        stz 1,x         ; paranoid
0022FFr 3               
0022FFr 3  20 rr rr                     jsr xt_hold
002302r 3               @done:
002302r 3  60           z_sign:         rts
002303r 3               
002303r 3               
002303r 3               
002303r 3               ; ## SLASH ( n1 n2 -- n ) "Divide NOS by TOS"
002303r 3               ; ## "/"  auto  ANS core
002303r 3                       ; """https://forth-standard.org/standard/core/Div
002303r 3                       ;
002303r 3                       ; Forth code is either  >R S>D R> FM/MOD SWAP DROP
002303r 3                       ; or >R S>D R> SM/REM SWAP DROP -- we use SM/REM in Tali Forth.
002303r 3                       ; This code is currently unoptimized. This code without the SLASH
002303r 3                       ; DROP at the end is /MOD, so we share the code as far as possible.
002303r 3                       ; """
002303r 3               
002303r 3               xt_slash:
002303r 3                               ; With all the multiplication going on, it would be hard to
002303r 3                               ; make sure that one of our temporary variables is not
002303r 3                               ; overwritten. We make sure that doesn't happen by taking the
002303r 3                               ; hit of pushing the flag to the 65c02's stack
002303r 3  A9 00                        lda #0
002305r 3  48                           pha
002306r 3  80 03                        bra _common
002308r 3               
002308r 3               xt_slash_mod:
002308r 3                               ; Note that /MOD accesses this code
002308r 3  A9 FF                        lda #$FF
00230Ar 3  48                           pha             ; falls through to _common
00230Br 3               
00230Br 3               _common:
00230Br 3  20 rr rr                     jsr xt_to_r             ; >R
00230Er 3  20 rr rr                     jsr xt_s_to_d           ; S>D
002311r 3  20 rr rr                     jsr xt_r_from           ; R>
002314r 3  20 rr rr                     jsr xt_sm_slash_rem     ; SM/REM
002317r 3               
002317r 3                               ; Get the flag back from the 65c02's stack. Zero is SLASH,
002317r 3                               ; $FF is SLASH MOD
002317r 3  68                           pla
002318r 3  D0 05                        bne @done
00231Ar 3               
00231Ar 3                               ; The following code is for SLASH only
00231Ar 3  20 rr rr                     jsr xt_swap
00231Dr 3  E8                           inx             ; DROP
00231Er 3  E8                           inx
00231Fr 3               @done:
00231Fr 3               z_slash_mod:
00231Fr 3  60           z_slash:        rts
002320r 3               
002320r 3               
002320r 3               
002320r 3               ; ## SLASH_MOD ( n1 n2 -- n3 n4 ) "Divide NOS by TOS with a remainder"
002320r 3               ; ## "/mod"  auto  ANS core
002320r 3                       ; """https://forth-standard.org/standard/core/DivMOD
002320r 3                       ;
002320r 3                       ; This is a dummy entry, the actual code is shared with SLASH
002320r 3                       ; """
002320r 3               
002320r 3               
002320r 3               ; ## SLASH_STRING ( addr u n -- addr u ) "Shorten string by n"
002320r 3               ; ## "/string"  auto  ANS string
002320r 3                       ; """https://forth-standard.org/standard/string/DivSTRING
002320r 3                       ;
002320r 3                       ; Forth code is
002320r 3                       ; : /STRING ( ADDR U N -- ADDR U ) ROT OVER + ROT ROT - ;
002320r 3                       ; Put differently, we need to add TOS and 3OS, and subtract
002320r 3                       ; TOS from NOS, and then drop TOS
002320r 3                       ; """
002320r 3               
002320r 3               xt_slash_string:
002320r 3  20 rr rr                     jsr underflow_3
002323r 3               
002323r 3  18                           clc             ; 3OS+TOS
002324r 3  B5 00                        lda 0,x
002326r 3  75 04                        adc 4,x
002328r 3  95 04                        sta 4,x
00232Ar 3               
00232Ar 3  B5 01                        lda 1,x
00232Cr 3  75 05                        adc 5,x
00232Er 3  95 05                        sta 5,x
002330r 3               
002330r 3  38                           sec             ; NOS-TOS
002331r 3  B5 02                        lda 2,x
002333r 3  F5 00                        sbc 0,x
002335r 3  95 02                        sta 2,x
002337r 3               
002337r 3  B5 03                        lda 3,x
002339r 3  F5 01                        sbc 1,x
00233Br 3  95 03                        sta 3,x
00233Dr 3               
00233Dr 3  E8                           inx
00233Er 3  E8                           inx
00233Fr 3               
00233Fr 3  60           z_slash_string: rts
002340r 3               
002340r 3               
002340r 3               
002340r 3               ; ## SLITERAL ( addr u -- )( -- addr u ) "Compile a string for runtime"
002340r 3               ; ## "sliteral" auto  ANS string
002340r 3                       ; """https://forth-standard.org/standard/string/SLITERAL
002340r 3                       ; Add the runtime for an existing string.
002340r 3                       ; """
002340r 3               
002340r 3               xt_sliteral:
002340r 3  20 rr rr                     jsr underflow_2
002343r 3               
002343r 3                               ; We can't assume that ( addr u ) of the current string is in
002343r 3                               ; a stable area (eg. already in the dictionary.) Copy the
002343r 3                               ; string data into the dictionary using move.
002343r 3               
002343r 3                               ; Put a jmp over the string data with address to be filled
002343r 3                               ; in later.
002343r 3  A9 4C                        lda #$4C
002345r 3  20 rr rr                     jsr cmpl_a
002348r 3               
002348r 3                               ; Address to be filled in later.
002348r 3  20 rr rr                     jsr cmpl_a
00234Br 3  20 rr rr                     jsr cmpl_a
00234Er 3               
00234Er 3                               ; Turn the data stack from ( addr u ) into
00234Er 3                               ; ( here u addr here u ) so move can be called with
00234Er 3                               ; the remaining items on the stack ready for processing.
00234Er 3                               ; Reserve three extra words on the stack.
00234Er 3  8A                           txa
00234Fr 3  38                           sec
002350r 3  E9 06                        sbc #6
002352r 3  AA                           tax
002353r 3               
002353r 3                               ; Move addr down from TOS-4 to TOS-2
002353r 3  B5 08                        lda 8,x
002355r 3  95 04                        sta 4,x
002357r 3  B5 09                        lda 9,x
002359r 3  95 05                        sta 5,x
00235Br 3               
00235Br 3                               ; Copy u from TOS-3 to TOS
00235Br 3  B5 06                        lda 6,x
00235Dr 3  95 00                        sta 0,x
00235Fr 3  B5 07                        lda 7,x
002361r 3  95 01                        sta 1,x
002363r 3               
002363r 3                               ; Put HERE into TOS-1 and TOS-4
002363r 3  A5 rr                        lda cp
002365r 3  95 08                        sta 8,x
002367r 3  95 02                        sta 2,x
002369r 3  A5 rr                        lda cp+1
00236Br 3  95 09                        sta 9,x
00236Dr 3  95 03                        sta 3,x
00236Fr 3               
00236Fr 3                               ; Copy the string into the dictionary.
00236Fr 3  20 rr rr                     jsr xt_move
002372r 3               
002372r 3                               ; Update cp.
002372r 3  18                           clc
002373r 3  A5 rr                        lda cp
002375r 3  75 00                        adc 0,x
002377r 3  85 rr                        sta cp
002379r 3  A5 rr                        lda cp+1
00237Br 3  75 01                        adc 1,x
00237Dr 3  85 rr                        sta cp+1
00237Fr 3               
00237Fr 3                               ; Update the address of the jump-over jmp instruction.
00237Fr 3                               ; First determine location of jmp instructions address.
00237Fr 3                               ; It should be 2 bytes before the start of the string.
00237Fr 3               
00237Fr 3                               ; Compute it into tmp1, which is no longer being used.
00237Fr 3  B5 02                        lda 2,x
002381r 3  38                           sec
002382r 3  E9 02                        sbc #2
002384r 3  85 rr                        sta tmp1
002386r 3  B5 03                        lda 3,x
002388r 3  E9 00                        sbc #0          ; Propagate borrow
00238Ar 3  85 rr                        sta tmp1+1
00238Cr 3               
00238Cr 3                               ; Update the address of the jump to HERE.
00238Cr 3  A5 rr                        lda cp
00238Er 3  92 rr                        sta (tmp1)
002390r 3  A0 01                        ldy #1
002392r 3  A5 rr                        lda cp+1
002394r 3  91 rr                        sta (tmp1),y
002396r 3               
002396r 3                               ; Stack is now ( addr2 u ) where addr2 is the new
002396r 3                               ; location in the dictionary.
002396r 3               
002396r 3               sliteral_const_str:
002396r 3                               ; Compile a subroutine jump to the runtime of SLITERAL that
002396r 3                               ; pushes the new ( addr u ) pair to the Data Stack.
002396r 3                               ; When we're done, the code will look like this:
002396r 3               
002396r 3                               ; xt -->    jmp a
002396r 3                               ;           <string data bytes>
002396r 3                               ;  a -->    jsr sliteral_runtime
002396r 3                               ;           <string address>
002396r 3                               ;           <string length>
002396r 3                               ; rts -->
002396r 3               
002396r 3                               ; This means we'll have to adjust the return address for two
002396r 3                               ; cells, not just one
002396r 3  A0 rr                        ldy #>sliteral_runtime
002398r 3  A9 rr                        lda #<sliteral_runtime
00239Ar 3  20 rr rr                     jsr cmpl_subroutine
00239Dr 3               
00239Dr 3                               ; We want to have the address end up as NOS and the length
00239Dr 3                               ; as TOS, so we store the address first
00239Dr 3  B4 03                        ldy 3,x                ; address MSB
00239Fr 3  B5 02                        lda 2,x                ; address LSB
0023A1r 3  20 rr rr                     jsr cmpl_word
0023A4r 3               
0023A4r 3  B4 01                        ldy 1,x                ; length MSB
0023A6r 3  B5 00                        lda 0,x                ; length LSB
0023A8r 3  20 rr rr                     jsr cmpl_word
0023ABr 3               
0023ABr 3                               ; clean up and leave
0023ABr 3  E8                           inx
0023ACr 3  E8                           inx
0023ADr 3  E8                           inx
0023AEr 3  E8                           inx
0023AFr 3               
0023AFr 3  60           z_sliteral:     rts
0023B0r 3               
0023B0r 3               
0023B0r 3               sliteral_runtime:
0023B0r 3               
0023B0r 3                       ; """Run time behaviour of SLITERAL: Push ( addr u ) of string to
0023B0r 3                       ; the Data Stack. We arrive here with the return address as the
0023B0r 3                       ; top of Return Stack, which points to the address of the string
0023B0r 3                       ; """
0023B0r 3  CA                           dex
0023B1r 3  CA                           dex
0023B2r 3  CA                           dex
0023B3r 3  CA                           dex
0023B4r 3               
0023B4r 3                               ; Get the address of the string address off the stack and
0023B4r 3                               ; increase by one because of the RTS mechanics
0023B4r 3  68                           pla
0023B5r 3  85 rr                        sta tmp1        ; LSB of address
0023B7r 3  68                           pla
0023B8r 3  85 rr                        sta tmp1+1      ; MSB of address
0023BAr 3               
0023BAr 3                               ; Walk through both and save them
0023BAr 3  A0 01                        ldy #1          ; adjust for JSR/RTS mechanics on 65c02
0023BCr 3  B1 rr                        lda (tmp1),y
0023BEr 3  95 02                        sta 2,x         ; LSB of address
0023C0r 3  C8                           iny
0023C1r 3               
0023C1r 3  B1 rr                        lda (tmp1),y
0023C3r 3  95 03                        sta 3,x         ; MSB of address
0023C5r 3  C8                           iny
0023C6r 3               
0023C6r 3  B1 rr                        lda (tmp1),y
0023C8r 3  95 00                        sta 0,x         ; LSB of length
0023CAr 3  C8                           iny
0023CBr 3               
0023CBr 3  B1 rr                        lda (tmp1),y
0023CDr 3  95 01                        sta 1,x         ; MSB of length
0023CFr 3               
0023CFr 3                               ; restore return address
0023CFr 3  18                           clc
0023D0r 3  A5 rr                        lda tmp1
0023D2r 3  69 04                        adc #4
0023D4r 3  A8                           tay             ; LSB
0023D5r 3  A5 rr                        lda tmp1+1
0023D7r 3  69 00                        adc #0          ; we only need carry
0023D9r 3  48                           pha             ; MSB
0023DAr 3  5A                           phy
0023DBr 3               
0023DBr 3  60                           rts
0023DCr 3               
0023DCr 3               
0023DCr 3               
0023DCr 3               ; ## SM_SLASH_REM ( d n1 -- n2 n3 ) "Symmetic signed division"
0023DCr 3               ; ## "sm/rem"  auto  ANS core
0023DCr 3                       ; """https://forth-standard.org/standard/core/SMDivREM
0023DCr 3                       ; Symmetic signed division. Compare FM/MOD. Based on F-PC 3.6
0023DCr 3                       ; by Ulrich Hoffmann. See http://www.xlerb.de/uho/ansi.seq
0023DCr 3                       ;
0023DCr 3                       ; Forth:
0023DCr 3                       ; OVER >R 2DUP XOR 0< >R ABS >R DABS R> UM/MOD R> ?NEGATE SWAP
0023DCr 3                       ; R> ?NEGATE SWAP
0023DCr 3                       ; """
0023DCr 3               
0023DCr 3               xt_sm_slash_rem:
0023DCr 3  20 rr rr                     jsr underflow_3 ; contains double number
0023DFr 3               
0023DFr 3                               ; push MSB of high cell of d to Data Stack so we can check
0023DFr 3                               ; its sign later
0023DFr 3  B5 03                        lda 3,x
0023E1r 3  48                           pha
0023E2r 3               
0023E2r 3                               ; XOR the MSB of the high cell of d and n1 so we figure out
0023E2r 3                               ; its sign later as well
0023E2r 3  B5 01                        lda 1,x
0023E4r 3  55 03                        eor 3,x
0023E6r 3  48                           pha
0023E7r 3               
0023E7r 3                               ; Prepare division by getting absolute of n1 and d
0023E7r 3  20 rr rr                     jsr xt_abs
0023EAr 3  E8                           inx             ; pretend we pushed n1 to R
0023EBr 3  E8                           inx
0023ECr 3               
0023ECr 3  20 rr rr                     jsr xt_dabs
0023EFr 3  CA                           dex
0023F0r 3  CA                           dex
0023F1r 3               
0023F1r 3  20 rr rr                     jsr xt_um_slash_mod     ; UM/MOD
0023F4r 3               
0023F4r 3                               ; if the XOR compiled above is negative, negate the
0023F4r 3                               ; quotient (n3)
0023F4r 3  68                           pla
0023F5r 3  10 03                        bpl @1
0023F7r 3  20 rr rr                     jsr xt_negate
0023FAr 3               @1:
0023FAr 3                               ; if d was negative, negate the remainder (n2)
0023FAr 3  68                           pla
0023FBr 3  10 07                        bpl @done
0023FDr 3               
0023FDr 3  E8                           inx             ; pretend we pushed quotient to R
0023FEr 3  E8                           inx
0023FFr 3  20 rr rr                     jsr xt_negate
002402r 3  CA                           dex
002403r 3  CA                           dex
002404r 3               
002404r 3               @done:
002404r 3  60           z_sm_slash_rem: rts
002405r 3               
002405r 3               
002405r 3               
002405r 3               ; ## SOURCE ( -- addr u ) "Return location and size of input buffer""
002405r 3               ; ## "source"  auto  ANS core
002405r 3                       ; """https://forth-standard.org/standard/core/SOURCE"""
002405r 3               xt_source:
002405r 3                               ; add address
002405r 3  CA                           dex
002406r 3  CA                           dex
002407r 3  A5 rr                        lda cib
002409r 3  95 00                        sta 0,x
00240Br 3  A5 rr                        lda cib+1
00240Dr 3  95 01                        sta 1,x
00240Fr 3               
00240Fr 3                               ; add size
00240Fr 3  CA                           dex
002410r 3  CA                           dex
002411r 3  A5 rr                        lda ciblen
002413r 3  95 00                        sta 0,x
002415r 3  A5 rr                        lda ciblen+1
002417r 3  95 01                        sta 1,x
002419r 3               
002419r 3  60           z_source:       rts
00241Ar 3               
00241Ar 3               
00241Ar 3               ; ## SOURCE_ID ( -- n ) "Return source identifier"
00241Ar 3               ; ## "source-id"  tested  ANS core ext
00241Ar 3                       ; """https://forth-standard.org/standard/core/SOURCE-ID Identify the
00241Ar 3                       ; input source unless it is a block (s. Conklin & Rather p. 156). This
00241Ar 3                       ; will give the input source: 0 is keyboard, -1 ($FFFF) is character
00241Ar 3                       ; string, and a text file gives the fileid.
00241Ar 3                       ; """
00241Ar 3               xt_source_id:
00241Ar 3  CA                           dex
00241Br 3  CA                           dex
00241Cr 3               
00241Cr 3  A5 rr                        lda insrc
00241Er 3  95 00                        sta 0,x
002420r 3  A5 rr                        lda insrc+1
002422r 3  95 01                        sta 1,x
002424r 3               
002424r 3  60           z_source_id:    rts
002425r 3               
002425r 3               
002425r 3               ; ## SPACE ( -- ) "Print a single space"
002425r 3               ; ## "space"  auto  ANS core
002425r 3                       ; """https://forth-standard.org/standard/core/SPACE"""
002425r 3               xt_space:
002425r 3  A9 20                        lda #AscSP
002427r 3  20 rr rr                     jsr emit_a
00242Ar 3               
00242Ar 3  60           z_space:        rts
00242Br 3               
00242Br 3               
00242Br 3               ; ## SPACES ( u -- ) "Print a number of spaces"
00242Br 3               ; ## "spaces"  auto  ANS core
00242Br 3                       ; """https://forth-standard.org/standard/core/SPACES"""
00242Br 3               
00242Br 3               xt_spaces:
00242Br 3  20 rr rr                     jsr underflow_1
00242Er 3               
00242Er 3                               ; catch any zero in TOS fast
00242Er 3  B5 00                        lda 0,x
002430r 3  15 01                        ora 1,x
002432r 3  F0 2A                        beq @done
002434r 3               
002434r 3                               ; Usually we're only going to print far less than 256 spaces,
002434r 3                               ; so we create a quick loop for that. Short loop could be realized
002434r 3                               ; as a separate subroutine, but unless we're really pressed for
002434r 3                               ; memory at some point, this is faster
002434r 3  B4 01                        ldy 1,x
002436r 3  D0 0C                        bne @lots_of_spaces
002438r 3               
002438r 3  B4 00                        ldy 0,x
00243Ar 3               @quick_loop:
00243Ar 3                               ; we reach here knowing that there must be a number that is not
00243Ar 3                               ; zero in the TOS
00243Ar 3  A9 20                        lda #AscSP
00243Cr 3  20 rr rr                     jsr emit_a
00243Fr 3  88                           dey
002440r 3  F0 1C                        beq @done
002442r 3  80 F6                        bra @quick_loop
002444r 3               
002444r 3               @lots_of_spaces:
002444r 3                               ; We go through the first loop once to get rid of the lower
002444r 3                               ; counter byte. This could be zero
002444r 3  B4 00                        ldy 0,x
002446r 3               
002446r 3               @first_slow_loop:
002446r 3  F0 08                        beq @slow_outer_loop
002448r 3  A9 20                        lda #AscSP
00244Ar 3  20 rr rr                     jsr emit_a
00244Dr 3  88                           dey
00244Er 3  80 F6                        bra @first_slow_loop
002450r 3               
002450r 3               @slow_outer_loop:
002450r 3                               ; we arrive here knowing that the MSB of TOS cannot be a zero
002450r 3  A0 00                        ldy #00
002452r 3               
002452r 3               @slow_inner_loop:
002452r 3  A9 20                        lda #AscSP
002454r 3  20 rr rr                     jsr emit_a
002457r 3  88                           dey
002458r 3  D0 F8                        bne @slow_inner_loop
00245Ar 3               
00245Ar 3  D6 01                        dec 1,x
00245Cr 3  D0 F2                        bne @slow_outer_loop
00245Er 3               
00245Er 3               @done:
00245Er 3  E8                           inx             ; drop
00245Fr 3  E8                           inx
002460r 3               
002460r 3  60           z_spaces:       rts
002461r 3               
002461r 3               
002461r 3               
002461r 3               ; ## STAR ( n n -- n ) "16*16 --> 16 "
002461r 3               ; ## "*"  auto  ANS core
002461r 3                       ; """https://forth-standard.org/standard/core/Times
002461r 3                       ; Multiply two signed 16 bit numbers, returning a 16 bit result.
002461r 3                       ;
002461r 3                       ; This is nothing  more than UM* DROP
002461r 3                       ; """
002461r 3               
002461r 3               xt_star:
002461r 3  20 rr rr                     jsr underflow_2
002464r 3               
002464r 3  20 rr rr                     jsr xt_um_star
002467r 3  E8                           inx
002468r 3  E8                           inx
002469r 3               
002469r 3  60           z_star:         rts
00246Ar 3               
00246Ar 3               
00246Ar 3               
00246Ar 3               ; ## STAR_SLASH  ( n1 n2 n3 -- n4 ) "n1 * n2 / n3 -->  n"
00246Ar 3               ; ## "*/"  auto  ANS core
00246Ar 3                       ; """https://forth-standard.org/standard/core/TimesDiv
00246Ar 3                       ; Multiply n1 by n2 and divide by n3, returning the result
00246Ar 3                       ; without a remainder. This is */MOD without the mod.
00246Ar 3                       ;
00246Ar 3                       ; This word
00246Ar 3                       ; can be defined in Forth as : */  */MOD SWAP DROP ; which is
00246Ar 3                       ; pretty much what we do here
00246Ar 3                       ; """
00246Ar 3               xt_star_slash:
00246Ar 3                               ; We let */MOD check for underflow
00246Ar 3  20 rr rr                     jsr xt_star_slash_mod
00246Dr 3  20 rr rr                     jsr xt_swap
002470r 3  E8                           inx
002471r 3  E8                           inx
002472r 3               z_star_slash:
002472r 3  60                           rts
002473r 3               
002473r 3               
002473r 3               ; ## STAR_SLASH_MOD  ( n1 n2 n3 -- n4 n5 ) "n1 * n2 / n3 --> n-mod n"
002473r 3               ; ## "*/mod"  auto  ANS core
002473r 3                       ; """https://forth-standard.org/standard/core/TimesDivMOD
002473r 3                       ; Multiply n1 by n2 producing the intermediate double-cell result d.
002473r 3                       ; Divide d by n3 producing the single-cell remainder n4 and the
002473r 3                       ; single-cell quotient n5.
002473r 3                       ;
002473r 3                       ; In Forth, this is
002473r 3                       ; : */MOD  >R M* >R SM/REM ;  Note that */ accesses this routine.
002473r 3                       ; """
002473r 3               xt_star_slash_mod:
002473r 3  20 rr rr                     jsr underflow_3
002476r 3               
002476r 3  20 rr rr                     jsr xt_to_r
002479r 3  20 rr rr                     jsr xt_m_star
00247Cr 3  20 rr rr                     jsr xt_r_from
00247Fr 3  20 rr rr                     jsr xt_sm_slash_rem
002482r 3               
002482r 3               z_star_slash_mod:
002482r 3  60                           rts
002483r 3               
002483r 3               
002483r 3               ; ## STATE ( -- addr ) "Return the address of compilation state flag"
002483r 3               ; ## "state"  auto  ANS core
002483r 3                       ; """https://forth-standard.org/standard/core/STATE
002483r 3                       ; STATE is true when in compilation state, false otherwise. Note
002483r 3                       ; we do not return the state itself, but only the address where
002483r 3                       ; it lives. The state should not be changed directly by the user; see
002483r 3                       ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
002483r 3                       ; """
002483r 3               xt_state:
002483r 3  CA                           dex
002484r 3  CA                           dex
002485r 3  A9 rr                        lda #<state
002487r 3  95 00                        sta 0,x
002489r 3  A9 rr                        lda #>state
00248Br 3  95 01                        sta 1,x
00248Dr 3               
00248Dr 3  60           z_state:        rts
00248Er 3               
00248Er 3               
00248Er 3               ; ## STORE ( n addr -- ) "Store TOS in memory"
00248Er 3               ; ## "!"  auto  ANS core
00248Er 3                       ; """https://forth-standard.org/standard/core/Store"""
00248Er 3               xt_store:
00248Er 3  20 rr rr                     jsr underflow_2
002491r 3               
002491r 3  B5 02                        lda 2,x         ; LSB
002493r 3  81 00                        sta (0,x)
002495r 3               
002495r 3  F6 00                        inc 0,x
002497r 3  D0 02                        bne @1
002499r 3  F6 01                        inc 1,x
00249Br 3               @1:
00249Br 3  B5 03                        lda 3,x         ; MSB
00249Dr 3  81 00                        sta (0,x)
00249Fr 3               
00249Fr 3  E8                           inx             ; 2DROP
0024A0r 3  E8                           inx
0024A1r 3  E8                           inx
0024A2r 3  E8                           inx
0024A3r 3               
0024A3r 3  60           z_store:        rts
0024A4r 3               
0024A4r 3               
0024A4r 3               ; ## STRIP_UNDERFLOW ( -- addr ) "Return address where underflow status is kept"
0024A4r 3               ; ## "strip-underflow"  tested  Tali Forth
0024A4r 3                       ; """`STRIP-UNDERFLOW` is a flag variable that determines if underflow
0024A4r 3                       ; checking should be removed during the compilation of new words.
0024A4r 3                       ; Default is false.
0024A4r 3                       ; """
0024A4r 3               xt_strip_underflow:
0024A4r 3  CA                           dex
0024A5r 3  CA                           dex
0024A6r 3               
0024A6r 3  A9 rr                        lda #<uf_strip
0024A8r 3  95 00                        sta 0,x
0024AAr 3  A9 rr                        lda #>uf_strip
0024ACr 3  95 01                        sta 1,x
0024AEr 3               
0024AEr 3               z_strip_underflow:
0024AEr 3  60                           rts
0024AFr 3               
0024AFr 3               
0024AFr 3               ; ## SWAP ( b a -- a b ) "Exchange TOS and NOS"
0024AFr 3               ; ## "swap"  auto  ANS core
0024AFr 3                       ; """https://forth-standard.org/standard/core/SWAP"""
0024AFr 3               xt_swap:
0024AFr 3  20 rr rr                     jsr underflow_2
0024B2r 3               
0024B2r 3  B5 00                        lda 0,x         ; LSB
0024B4r 3  B4 02                        ldy 2,x
0024B6r 3  95 02                        sta 2,x
0024B8r 3  94 00                        sty 0,x
0024BAr 3               
0024BAr 3  B5 01                        lda 1,x         ; MSB
0024BCr 3  B4 03                        ldy 3,x
0024BEr 3  95 03                        sta 3,x
0024C0r 3  94 01                        sty 1,x
0024C2r 3               
0024C2r 3  60           z_swap:         rts
0024C3r 3               
0024C3r 3               
0024C3r 3               ; ## THEN (C: orig -- ) ( -- ) "Conditional flow control"
0024C3r 3               ; ## "then"  auto  ANS core
0024C3r 3                       ; """http://forth-standard.org/standard/core/THEN"""
0024C3r 3               xt_then:
0024C3r 3                               ; Get the address to jump to.
0024C3r 3  20 rr rr                     jsr xt_here
0024C6r 3               
0024C6r 3                               ; Stuff HERE in for the branch address back
0024C6r 3                               ; at the IF or ELSE (origination address is on stack).
0024C6r 3  20 rr rr                     jsr xt_swap
0024C9r 3  20 rr rr                     jsr xt_store
0024CCr 3               
0024CCr 3  60           z_then:         rts
0024CDr 3               
0024CDr 3               
0024CDr 3               ; ## THRU ( scr# scr# -- ) "Load screens in the given range"
0024CDr 3               ; ## "thru"  tested  ANS block ext
0024CDr 3                       ; """https://forth-standard.org/standard/block/THRU"""
0024CDr 3               
0024CDr 3               xt_thru:
0024CDr 3  20 rr rr                     jsr underflow_2
0024D0r 3               
0024D0r 3                               ; We need to loop here, and can't use the data stack
0024D0r 3                               ; because the LOADed screens might use it.  We'll
0024D0r 3                               ; need to use the same trick that DO loops use, holding
0024D0r 3                               ; the limit and current index on the return stack.
0024D0r 3               
0024D0r 3                               ; Put the ending screen number on the return stack
0024D0r 3  B5 01                        lda 1,x
0024D2r 3  48                           pha
0024D3r 3  B5 00                        lda 0,x
0024D5r 3  48                           pha
0024D6r 3  E8                           inx
0024D7r 3  E8                           inx
0024D8r 3               @thru_loop:
0024D8r 3                               ; Put the starting screen number on the stack,
0024D8r 3                               ; but keep a copy
0024D8r 3  B5 01                        lda 1,x
0024DAr 3  48                           pha
0024DBr 3  B5 00                        lda 0,x
0024DDr 3  48                           pha
0024DEr 3               
0024DEr 3                               ; Load this screen.
0024DEr 3  20 rr rr                     jsr xt_load
0024E1r 3               
0024E1r 3                               ; Get the number and limit back off the stack.  Rather than
0024E1r 3                               ; waste time making room on the stack, just use tmp1 and tmp2.
0024E1r 3               
0024E1r 3                               ; Get the screen we just loaded.
0024E1r 3  68                           pla
0024E2r 3  85 rr                        sta tmp1
0024E4r 3  68                           pla
0024E5r 3  85 rr                        sta tmp1+1
0024E7r 3               
0024E7r 3                               ; Get the ending screen.
0024E7r 3  68                           pla
0024E8r 3  85 rr                        sta tmp2
0024EAr 3  68                           pla
0024EBr 3  85 rr                        sta tmp2+1
0024EDr 3               
0024EDr 3                               ; See if we just loaded the last screen.
0024EDr 3                               ; A already has the MSB of the last screen in it.
0024EDr 3  C5 rr                        cmp tmp1+1
0024EFr 3  D0 08                        bne @next_screen
0024F1r 3  A5 rr                        lda tmp2        ; Compare the LSB
0024F3r 3  C5 rr                        cmp tmp1
0024F5r 3  D0 02                        bne @next_screen
0024F7r 3  80 18                        bra @done       ; We just did the last screen.
0024F9r 3               
0024F9r 3               @next_screen:
0024F9r 3                               ; Put the ending screen back on the data stack.
0024F9r 3  A5 rr                        lda tmp2+1
0024FBr 3  48                           pha
0024FCr 3  A5 rr                        lda tmp2
0024FEr 3  48                           pha
0024FFr 3               
0024FFr 3                               ; Increment the current screen.
0024FFr 3  E6 rr                        inc tmp1
002501r 3  D0 02                        bne @1
002503r 3  E6 rr                        inc tmp1+1
002505r 3               @1:
002505r 3                               ; Put the current screen on the stack to prepare for
002505r 3                               ; the next loop.
002505r 3  CA                           dex
002506r 3  CA                           dex
002507r 3  A5 rr                        lda tmp1
002509r 3  95 00                        sta 0,x
00250Br 3  A5 rr                        lda tmp1+1
00250Dr 3  95 01                        sta 1,x
00250Fr 3  80 C7                        bra @thru_loop
002511r 3               @done:
002511r 3  60           z_thru:         rts
002512r 3               
002512r 3               
002512r 3               
002512r 3               ; ## TICK ( "name" -- xt ) "Return a word's execution token (xt)"
002512r 3               ; ## "'"  auto  ANS core
002512r 3                       ; """https://forth-standard.org/standard/core/Tick"""
002512r 3               
002512r 3               xt_tick:
002512r 3  20 rr rr                     jsr xt_parse_name       ; ( -- addr u )
002515r 3               
002515r 3                               ; if we got a zero, there was a problem getting the
002515r 3                               ; name of the word
002515r 3  B5 00                        lda 0,x
002517r 3  15 01                        ora 1,x
002519r 3  D0 05                        bne @1
00251Br 3               
00251Br 3  A9 05                        lda #err_noname
00251Dr 3  4C rr rr                     jmp error
002520r 3               @1:
002520r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt )
002523r 3               
002523r 3                               ; If we didn't find the word in the Dictionary, abort
002523r 3  B5 00                        lda 0,x
002525r 3  15 01                        ora 1,x
002527r 3  D0 05                        bne @2
002529r 3               
002529r 3  A9 08                        lda #err_syntax
00252Br 3  4C rr rr                     jmp error
00252Er 3               @2:
00252Er 3  20 rr rr                     jsr xt_name_to_int      ; ( nt -- xt )
002531r 3               
002531r 3  60           z_tick:         rts
002532r 3               
002532r 3               
002532r 3               
002532r 3               ; ## TO ( n "name" -- ) or ( "name") "Change a value"
002532r 3               ; ## "to"  auto  ANS core ext
002532r 3                       ; """https://forth-standard.org/standard/core/TO
002532r 3                       ; Gives a new value to a, uh, VALUE.
002532r 3                       ;
002532r 3                       ; One possible Forth
002532r 3                       ; implementation is  ' >BODY !  but given the problems we have
002532r 3                       ; with >BODY on STC Forths, we do this the hard way. Since
002532r 3                       ; Tali Forth uses the same code for CONSTANTs and VALUEs, you
002532r 3                       ; could use this to redefine a CONSTANT, but that is a no-no.
002532r 3                       ;
002532r 3                       ; Note that the standard has different behaviors for TO depending
002532r 3                       ; on the state (https://forth-standard.org/standard/core/TO).
002532r 3                       ; This makes TO state-dependent (which is bad) and also rather
002532r 3                       ; complex (see the Gforth implementation for comparison). This
002532r 3                       ; word may not be natively compiled and must be immediate. Frankly,
002532r 3                       ; it would have made more sense to have two words for this.
002532r 3                       ; """
002532r 3               
002532r 3               xt_to:
002532r 3                               ; One way or the other, we need the xt of the word after this
002532r 3                               ; one. At this point, we don't know if we are interpreted or
002532r 3                               ; compile, so we don't know if there is a value n on the stack,
002532r 3                               ; so we can't do an underflow check yet
002532r 3  20 rr rr                     jsr xt_tick             ; ( [n] xt )
002535r 3               
002535r 3                               ; The PFA (DFA in this case) is three bytes down,
002535r 3                               ; after the jump to DOCONST
002535r 3  B5 00                        lda 0,x                 ; LSB
002537r 3  18                           clc
002538r 3  69 03                        adc #3
00253Ar 3  85 rr                        sta tmp1
00253Cr 3  B5 01                        lda 1,x                 ; MSB
00253Er 3  69 00                        adc #0                  ; we just want the carry
002540r 3  85 rr                        sta tmp1+1
002542r 3               
002542r 3  E8                           inx
002543r 3  E8                           inx                     ; ( [n] )
002544r 3               
002544r 3                               ; Now it gets ugly. See which state we are in
002544r 3  A5 rr                        lda state
002546r 3  05 rr                        ora state+1
002548r 3  F0 34                        beq @interpret
00254Ar 3               
00254Ar 3                               ; Well, we're compiling. We want to end up with simple
00254Ar 3                               ; code that just takes the number that is TOS and saves
00254Ar 3                               ; it in the address of the xt we were just given. So we
00254Ar 3                               ; want to compile this routine:
00254Ar 3                               ;
00254Ar 3                               ;       lda 0,x                 - B5 00
00254Ar 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
00254Ar 3                               ;       lda 1,x                 - B5 01
00254Ar 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
00254Ar 3                               ;       inx                     - E8
00254Ar 3                               ;       inx                     - E8
00254Ar 3                               ;
00254Ar 3                               ; which at least is nice and short. Other than that, we pretty
00254Ar 3                               ; much have to do this the hard and long way, because with the
00254Ar 3                               ; LSBs and MSBs, we can't really put the numbers in a data
00254Ar 3                               ; range and store them with a loop. Sigh.
00254Ar 3               
00254Ar 3  A0 00                        ldy #$00                ; Code for LDA 0,X
00254Cr 3  A9 B5                        lda #$B5
00254Er 3  20 rr rr                     jsr cmpl_word
002551r 3               
002551r 3  A9 8D                        lda #$8D                ; Code for STA abs
002553r 3  20 rr rr                     jsr cmpl_a
002556r 3               
002556r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
002558r 3  A5 rr                        lda tmp1
00255Ar 3  20 rr rr                     jsr cmpl_word
00255Dr 3               
00255Dr 3  A0 01                        ldy #$01                ; Code for LDA 1,X
00255Fr 3  A9 B5                        lda #$B5
002561r 3  20 rr rr                     jsr cmpl_word
002564r 3               
002564r 3  A9 8D                        lda #$8D                ; Code for STA abs
002566r 3  20 rr rr                     jsr cmpl_a
002569r 3               
002569r 3  E6 rr                        inc tmp1                ; Calculate MSB
00256Br 3  D0 02                        bne @1
00256Dr 3  E6 rr                        inc tmp1+1
00256Fr 3               @1:
00256Fr 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
002571r 3  A5 rr                        lda tmp1
002573r 3  20 rr rr                     jsr cmpl_word
002576r 3               
002576r 3  A0 E8                        ldy #$E8                ; Code for INX
002578r 3  98                           tya
002579r 3  20 rr rr                     jsr cmpl_word
00257Cr 3               
00257Cr 3  80 0F                        bra @done
00257Er 3               
00257Er 3               @interpret:
00257Er 3                               ; We're interpreting, so we arrive here with n
00257Er 3                               ; on the stack. This is an annoying place to put
00257Er 3                               ; the underflow check because we can't
00257Er 3                               ; automatically strip it out
00257Er 3  20 rr rr                     jsr underflow_1
002581r 3               
002581r 3                               ; We skip over the jump to DOCONST and store the number
002581r 3                               ; in the Program Field Area (PDF, in this case more a
002581r 3                               ; Data Field Area
002581r 3  B5 00                        lda 0,x
002583r 3  92 rr                        sta (tmp1)              ; LSB
002585r 3               
002585r 3  A0 01                        ldy #1
002587r 3  B5 01                        lda 1,x                 ; MSB
002589r 3  91 rr                        sta (tmp1),y            ; fall through to common
00258Br 3               
00258Br 3  E8                           inx                     ; DROP
00258Cr 3  E8                           inx
00258Dr 3               @done:
00258Dr 3  60           z_to:           rts
00258Er 3               
00258Er 3               
00258Er 3               
00258Er 3               ; ## TO_BODY ( xt -- addr ) "Return a word's Code Field Area (CFA)"
00258Er 3               ; ## ">body"  auto  ANS core
00258Er 3                       ; """https://forth-standard.org/standard/core/toBODY
00258Er 3                       ; Given a word's execution token (xt), return the address of the
00258Er 3                       ; start of that word's parameter field (PFA). This is defined as the
00258Er 3                       ; address that HERE would return right after CREATE.
00258Er 3                       ;
00258Er 3                       ; This is a
00258Er 3                       ; difficult word for STC Forths, because most words don't actually
00258Er 3                       ; have a Code Field Area (CFA) to skip. We solve this by having CREATE
00258Er 3                       ; add a flag, "has CFA" (HC), in the header so >BODY know to skip
00258Er 3                       ; the subroutine jumps to DOVAR, DOCONST, or DODOES
00258Er 3                       ; """
00258Er 3               
00258Er 3               xt_to_body:
00258Er 3  20 rr rr                     jsr underflow_1
002591r 3               
002591r 3                               ; Ideally, xt already points to the CFA. We just need to check
002591r 3                               ; the HC flag for special cases
002591r 3  20 rr rr                     jsr xt_dup              ; ( xt xt )
002594r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt nt )
002597r 3               
002597r 3                               ; The status byte is nt+1
002597r 3  F6 00                        inc 0,x
002599r 3  D0 02                        bne @1
00259Br 3  F6 01                        inc 1,x
00259Dr 3               @1:
00259Dr 3  A1 00                        lda (0,x)               ; get status byte
00259Fr 3  29 20                        and #HC
0025A1r 3  F0 0D                        beq @no_cfa
0025A3r 3               
0025A3r 3                               ; We've got a DOVAR, DOCONST, DODEFER, DODOES or whatever,
0025A3r 3                               ; so we add three to xt, which is NOS
0025A3r 3  18                           clc
0025A4r 3  B5 02                        lda 2,x         ; LSB
0025A6r 3  69 03                        adc #3
0025A8r 3  95 02                        sta 2,x
0025AAr 3  B5 03                        lda 3,x         ; MSB
0025ACr 3  69 00                        adc #0          ; we conly care about the carry
0025AEr 3  95 03                        sta 3,x         ; Fall through to @no_cfa
0025B0r 3               @no_cfa:
0025B0r 3  E8                           inx             ; get rid of the nt
0025B1r 3  E8                           inx
0025B2r 3               @done:
0025B2r 3  60           z_to_body:      rts
0025B3r 3               
0025B3r 3               
0025B3r 3               
0025B3r 3               ; ## TO_IN ( -- addr ) "Return address of the input pointer"
0025B3r 3               ; ## ">in"  auto  ANS core
0025B3r 3               xt_to_in:
0025B3r 3  CA                           dex
0025B4r 3  CA                           dex
0025B5r 3               
0025B5r 3  A9 rr                        lda #<toin
0025B7r 3  95 00                        sta 0,x
0025B9r 3  A9 rr                        lda #>toin      ; paranoid, should be zero
0025BBr 3  95 01                        sta 1,x
0025BDr 3               
0025BDr 3  60           z_to_in:        rts
0025BEr 3               
0025BEr 3               
0025BEr 3               ; ## TO_NUMBER ( ud addr u -- ud addr u ) "Convert a number"
0025BEr 3               ; ## ">number"  auto  ANS core
0025BEr 3                       ; """https://forth-standard.org/standard/core/toNUMBER
0025BEr 3                       ; Convert a string to a double number. Logic here is based on the
0025BEr 3                       ; routine by Phil Burk of the same name in pForth, see
0025BEr 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
0025BEr 3                       ; for the original Forth code. We arrive here from NUMBER which has
0025BEr 3                       ; made sure that we don't have to deal with a sign and we don't have
0025BEr 3                       ; to deal with a dot as a last character that signalizes double -
0025BEr 3                       ; this should be a pure number string.
0025BEr 3                       ;
0025BEr 3                       ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we
0025BEr 3                       ; cannot access any of those.
0025BEr 3                       ;
0025BEr 3                       ; For the math routine, we move the inputs to the scratchpad to
0025BEr 3                       ; avoid having to fool around with the Data Stack.
0025BEr 3                       ;
0025BEr 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
0025BEr 3                       ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
0025BEr 3                       ;     |           |           |           |           |
0025BEr 3                       ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
0025BEr 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
0025BEr 3                       ;
0025BEr 3                       ; The math routine works by converting one character to its
0025BEr 3                       ; numerical value (N) via DIGIT? and storing it in S+4 for
0025BEr 3                       ; the moment. We then multiply the UD-HI value with the radix
0025BEr 3                       ; (from BASE) using UM*, which returns a double-cell result. We
0025BEr 3                       ; discard the high cell of that result (UD-HI-HI) and store the
0025BEr 3                       ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
0025BEr 3                       ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
0025BEr 3                       ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
0025BEr 3                       ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
0025BEr 3                       ; storing the result back in S and S+2, before we start another
0025BEr 3                       ; round with it as the new UD-LO and UD-HI.
0025BEr 3                       ; """
0025BEr 3               
0025BEr 3               
0025BEr 3               xt_to_number:
0025BEr 3  20 rr rr                     jsr underflow_4
0025C1r 3               
0025C1r 3                               ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
0025C1r 3                               ; After this step, the original ud-lo and ud-hi will still be on
0025C1r 3                               ; the Data Stack, but will be ignored and later overwritten
0025C1r 3                               ; If >NUMBER is called by NUMBER, these should be all zeros
0025C1r 3  B5 06                        lda 6,x         ; ud-lo LSB
0025C3r 3  85 rr                        sta scratch
0025C5r 3  B5 07                        lda 7,x         ; ud-lo MSB
0025C7r 3  85 rr                        sta scratch+1
0025C9r 3               
0025C9r 3  B5 04                        lda 4,x         ; ud-hi LSB
0025CBr 3  85 rr                        sta scratch+2
0025CDr 3  B5 05                        lda 5,x         ; ud-hi MSB
0025CFr 3  85 rr                        sta scratch+3
0025D1r 3               
0025D1r 3                               ; Push down one on the Data Stack to use TOS for character
0025D1r 3                               ; conversion ( ud-lo ud-hi addr u x )
0025D1r 3  CA                           dex
0025D2r 3  CA                           dex
0025D3r 3               
0025D3r 3               @loop:
0025D3r 3                               ; Get one character based on address
0025D3r 3  A1 04                        lda (4,x)
0025D5r 3  95 00                        sta 0,x                 ; ( ud-lo ud-hi addr u char )
0025D7r 3  74 01                        stz 1,x                 ; paranoid
0025D9r 3               
0025D9r 3  20 rr rr                     jsr xt_digit_question   ; ( char -- n -1 | char 0 )
0025DCr 3               
0025DCr 3                               ; This gives us ( ud-lo ud-hi addr u char f | n f ), so we
0025DCr 3                               ; check the flag. If it is zero, we return what we have and
0025DCr 3                               ; let the caller (usually NUMBER) complain
0025DCr 3  B5 00                        lda 0,x
0025DEr 3  D0 04                        bne @digit_ok
0025E0r 3               
0025E0r 3  E8                           inx
0025E1r 3  E8                           inx
0025E2r 3  80 67                        bra @done       ; ( ud-lo ud-hi addr u char )
0025E4r 3               
0025E4r 3               @digit_ok:
0025E4r 3                               ; Conversion was successful. We arrive here with
0025E4r 3                               ; ( ud-lo ud-hi addr u n -1 ) and can start the
0025E4r 3                               ; math routine
0025E4r 3               
0025E4r 3                               ; Save n so we don't have to fool around with the
0025E4r 3                               ; Data Stack
0025E4r 3  B5 02                        lda 2,x
0025E6r 3  85 rr                        sta scratch+4
0025E8r 3  B5 03                        lda 3,x
0025EAr 3  85 rr                        sta scratch+5
0025ECr 3               
0025ECr 3                               ; Now multiply ud-hi (the one in the scratchpad, not the
0025ECr 3                               ; original one on the Data Stack) with the radix from BASE.
0025ECr 3                               ; We can clobber TOS and NOS because we saved n
0025ECr 3  A5 rr                        lda scratch+2
0025EEr 3  95 02                        sta 2,x         ; NOS
0025F0r 3  A5 rr                        lda scratch+3
0025F2r 3  95 03                        sta 3,x
0025F4r 3               
0025F4r 3  A5 rr                        lda base
0025F6r 3  95 00                        sta 0,x         ; TOS
0025F8r 3  74 01                        stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
0025FAr 3               
0025FAr 3                               ; UM* returns a double-celled number
0025FAr 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
0025FDr 3               
0025FDr 3                               ; Move ud-hi-lo to safety
0025FDr 3  B5 02                        lda 2,x         ; ud-hi-lo
0025FFr 3  85 rr                        sta scratch+6
002601r 3  B5 03                        lda 3,x
002603r 3  85 rr                        sta scratch+7
002605r 3               
002605r 3                               ; Now we multiply ud-lo, overwriting the stack entries
002605r 3  A5 rr                        lda scratch
002607r 3  95 02                        sta 2,x
002609r 3  A5 rr                        lda scratch+1
00260Br 3  95 03                        sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
00260Dr 3               
00260Dr 3  A5 rr                        lda base
00260Fr 3  95 00                        sta 0,x
002611r 3  74 01                        stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
002613r 3               
002613r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
002616r 3               
002616r 3  B5 00                        lda 0,x
002618r 3  85 rr                        sta scratch+2
00261Ar 3  B5 01                        lda 1,x
00261Cr 3  85 rr                        sta scratch+3
00261Er 3               
00261Er 3  B5 02                        lda 2,x
002620r 3  85 rr                        sta scratch
002622r 3  B5 03                        lda 3,x
002624r 3  85 rr                        sta scratch+1
002626r 3               
002626r 3                               ; We add ud-lo and n, as well as ud-hi and ud-hi-lo,
002626r 3                               ; both in the scratch pad
002626r 3  18                           clc
002627r 3  A5 rr                        lda scratch     ; ud-lo LSB
002629r 3  65 rr                        adc scratch+4   ; n LSB
00262Br 3  85 rr                        sta scratch     ; this is the new ud-lo
00262Dr 3  A5 rr                        lda scratch+1   ; ud-lo MSB
00262Fr 3  65 rr                        adc scratch+5   ; n MSB
002631r 3  85 rr                        sta scratch+1
002633r 3               
002633r 3  A5 rr                        lda scratch+2   ; LSB
002635r 3  65 rr                        adc scratch+6
002637r 3  85 rr                        sta scratch+2   ; this is the new ud-hi
002639r 3  A5 rr                        lda scratch+3   ; MSB
00263Br 3  65 rr                        adc scratch+7
00263Dr 3  85 rr                        sta scratch+3
00263Fr 3               
00263Fr 3                               ; Clean up: Get rid of one of the two top elements on
00263Fr 3                               ; the Data Stack. We don't really care which one
00263Fr 3  E8                           inx
002640r 3  E8                           inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
002641r 3               
002641r 3                               ; One character down. Move address up
002641r 3  F6 04                        inc 4,x
002643r 3  D0 02                        bne @1
002645r 3  F6 05                        inc 5,x
002647r 3               @1:
002647r 3                               ; Decrease counter
002647r 3  D6 02                        dec 2,x
002649r 3  D0 88                        bne @loop
00264Br 3               
00264Br 3               @done:
00264Br 3                               ; Counter has reached zero or we have an error. In both
00264Br 3                               ; cases, we clean up the Data Stack and return. Error gives
00264Br 3                               ; us ( ud-lo ud-hi addr u char ), regular end is
00264Br 3                               ; ( ud-lo ud-hi addr u ud-lo )
00264Br 3  E8                           inx
00264Cr 3  E8                           inx             ; ( ud-lo ud-hi addr u )
00264Dr 3               
00264Dr 3                               ; The new ud-lo and ud-hi are still on the scratch pad
00264Dr 3  A5 rr                        lda scratch     ; new ud-lo
00264Fr 3  95 06                        sta 6,x
002651r 3  A5 rr                        lda scratch+1
002653r 3  95 07                        sta 7,x
002655r 3               
002655r 3  A5 rr                        lda scratch+2
002657r 3  95 04                        sta 4,x
002659r 3  A5 rr                        lda scratch+3
00265Br 3  95 05                        sta 5,x
00265Dr 3               
00265Dr 3  60           z_to_number:    rts
00265Er 3               
00265Er 3               
00265Er 3               
00265Er 3               ; ## TO_ORDER ( wid -- ) "Add wordlist at beginning of search order"
00265Er 3               ; ## ">order"  tested  Gforth search
00265Er 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html"""
00265Er 3               
00265Er 3               xt_to_order:
00265Er 3                               ; Put the wid on the return stack for now.
00265Er 3  20 rr rr                     jsr xt_to_r
002661r 3               
002661r 3                               ; Get the current search order.
002661r 3  20 rr rr                     jsr xt_get_order
002664r 3               
002664r 3                               ; Get back the wid and add it to the list.
002664r 3  20 rr rr                     jsr xt_r_from
002667r 3  20 rr rr                     jsr xt_swap
00266Ar 3  20 rr rr                     jsr xt_one_plus
00266Dr 3               
00266Dr 3                               ; Set the search order with the new list.
00266Dr 3  20 rr rr                     jsr xt_set_order
002670r 3               
002670r 3  60           z_to_order:     rts
002671r 3               
002671r 3               
002671r 3               
002671r 3               ; ## TO_R ( n -- )(R: -- n) "Push TOS to the Return Stack"
002671r 3               ; ## ">r"  auto  ANS core
002671r 3                       ; """https://forth-standard.org/standard/core/toR
002671r 3                       ; This word is handled differently for native and for
002671r 3                       ; subroutine coding, see `COMPILE,`. This is a complile-only
002671r 3                       ; word.
002671r 3                       ; """
002671r 3               xt_to_r:
002671r 3                               ; Save the return address. If this word is natively
002671r 3                               ; coded, this is a complete waste of cycles, but
002671r 3                               ; required for subroutine coding
002671r 3  68                           pla             ; LSB
002672r 3  85 rr                        sta tmptos
002674r 3  7A                           ply             ; MSB
002675r 3               
002675r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002675r 3               
002675r 3                               ; We check for underflow in the second step, so we can
002675r 3                               ; strip off the stack thrashing for native compiling first
002675r 3  20 rr rr                     jsr underflow_1
002678r 3               
002678r 3                               ; now we can do the actual work
002678r 3  B5 01                        lda 1,x         ; MSB
00267Ar 3  48                           pha
00267Br 3  B5 00                        lda 0,x         ; LSB
00267Dr 3  48                           pha
00267Er 3               
00267Er 3  E8                           inx
00267Fr 3  E8                           inx
002680r 3               
002680r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002680r 3               
002680r 3                               ; restore return address
002680r 3  5A                           phy             ; MSB
002681r 3  A5 rr                        lda tmptos
002683r 3  48                           pha             ; LSB
002684r 3               
002684r 3  60           z_to_r:         rts
002685r 3               
002685r 3               
002685r 3               ; ## TRUE ( -- f ) "Push TRUE flag to Data Stack"
002685r 3               ; ## "true"  auto  ANS core ext
002685r 3                       ; """https://forth-standard.org/standard/core/TRUE"""
002685r 3               xt_true:
002685r 3  CA                           dex
002686r 3  CA                           dex
002687r 3  A9 FF                        lda #$FF
002689r 3  95 00                        sta 0,x
00268Br 3  95 01                        sta 1,x
00268Dr 3               
00268Dr 3  60           z_true:         rts
00268Er 3               
00268Er 3               
00268Er 3               ; ## TUCK ( b a -- a b a ) "Copy TOS below NOS"
00268Er 3               ; ## "tuck"  auto  ANS core ext
00268Er 3                       ; """https://forth-standard.org/standard/core/TUCK"""
00268Er 3               xt_tuck:
00268Er 3  20 rr rr                     jsr underflow_2
002691r 3               
002691r 3  CA                           dex
002692r 3  CA                           dex
002693r 3               
002693r 3  B4 04                        ldy 4,x         ; LSB
002695r 3  B5 02                        lda 2,x
002697r 3  95 04                        sta 4,x
002699r 3  94 02                        sty 2,x
00269Br 3  95 00                        sta 0,x
00269Dr 3               
00269Dr 3  B4 05                        ldy 5,x         ; MSB
00269Fr 3  B5 03                        lda 3,x
0026A1r 3  95 05                        sta 5,x
0026A3r 3  94 03                        sty 3,x         ; bba
0026A5r 3  95 01                        sta 1,x         ; baa
0026A7r 3               
0026A7r 3  60           z_tuck:         rts
0026A8r 3               
0026A8r 3               
0026A8r 3               ; ## TWO ( -- u ) "Push the number 2 to stack"
0026A8r 3               ; ## "2"  auto  Tali Forth
0026A8r 3                       ;
0026A8r 3                       ; This code is shared with ASSEMBLER-WORDLIST
0026A8r 3               xt_assembler_wordlist:
0026A8r 3               xt_two:
0026A8r 3  CA                           dex
0026A9r 3  CA                           dex
0026AAr 3  A9 02                        lda #2
0026ACr 3  95 00                        sta 0,x
0026AEr 3  74 01                        stz 1,x
0026B0r 3               
0026B0r 3               z_assembler_wordlist:
0026B0r 3  60           z_two:          rts
0026B1r 3               
0026B1r 3               
0026B1r 3               ; ## TWO_DROP ( n n -- ) "Drop TOS and NOS"
0026B1r 3               ; ## "2drop"  auto  ANS core
0026B1r 3                       ; """https://forth-standard.org/standard/core/TwoDROP"""
0026B1r 3               xt_two_drop:
0026B1r 3  20 rr rr                     jsr underflow_2
0026B4r 3               
0026B4r 3  E8                           inx
0026B5r 3  E8                           inx
0026B6r 3  E8                           inx
0026B7r 3  E8                           inx
0026B8r 3               
0026B8r 3  60           z_two_drop:     rts
0026B9r 3               
0026B9r 3               
0026B9r 3               ; ## TWO_DUP ( a b -- a b a b ) "Duplicate first two stack elements"
0026B9r 3               ; ## "2dup"  auto  ANS core
0026B9r 3                       ; """https://forth-standard.org/standard/core/TwoDUP"""
0026B9r 3               xt_two_dup:
0026B9r 3  20 rr rr                     jsr underflow_2
0026BCr 3               
0026BCr 3  CA                           dex
0026BDr 3  CA                           dex
0026BEr 3  CA                           dex
0026BFr 3  CA                           dex
0026C0r 3               
0026C0r 3  B5 04                        lda 4,x         ; TOS
0026C2r 3  95 00                        sta 0,x
0026C4r 3  B5 05                        lda 5,x
0026C6r 3  95 01                        sta 1,x
0026C8r 3               
0026C8r 3  B5 06                        lda 6,x         ; NOS
0026CAr 3  95 02                        sta 2,x
0026CCr 3  B5 07                        lda 7,x
0026CEr 3  95 03                        sta 3,x
0026D0r 3               
0026D0r 3  60           z_two_dup:      rts
0026D1r 3               
0026D1r 3               
0026D1r 3               ; ## TWO_FETCH ( addr -- n1 n2 ) "Fetch the cell pair n1 n2 stored at addr"
0026D1r 3               ; ## "2@"  auto  ANS core
0026D1r 3                       ; """https://forth-standard.org/standard/core/TwoFetch
0026D1r 3                       ; Note n2 stored at addr and n1 in the next cell -- in our case,
0026D1r 3                       ; the next two bytes. This is equvalent to  `DUP CELL+ @ SWAP @`
0026D1r 3                       ; """
0026D1r 3               xt_two_fetch:
0026D1r 3  20 rr rr                     jsr underflow_1
0026D4r 3               
0026D4r 3  B5 00                        lda 0,x
0026D6r 3  85 rr                        sta tmp1
0026D8r 3  B4 01                        ldy 1,x
0026DAr 3  84 rr                        sty tmp1+1
0026DCr 3               
0026DCr 3  CA                           dex             ; reuse one stack element
0026DDr 3  CA                           dex
0026DEr 3               
0026DEr 3  B2 rr                        lda (tmp1)      ; copy LSB
0026E0r 3  95 00                        sta 0,x
0026E2r 3  A0 01                        ldy #1          ; copy next
0026E4r 3  B1 rr                        lda (tmp1),y
0026E6r 3  95 01                        sta 1,x
0026E8r 3  C8                           iny             ; copy next
0026E9r 3  B1 rr                        lda (tmp1),y
0026EBr 3  95 02                        sta 2,x
0026EDr 3  C8                           iny             ; copy next
0026EEr 3  B1 rr                        lda (tmp1),y
0026F0r 3  95 03                        sta 3,x
0026F2r 3               
0026F2r 3  60           z_two_fetch:    rts
0026F3r 3               
0026F3r 3               ; ## TWO_OVER ( d1 d2 -- d1 d2 d1 ) "Copy double word NOS to TOS"
0026F3r 3               ; ## "2over"  auto  ANS core
0026F3r 3                       ; """https://forth-standard.org/standard/core/TwoOVER"""
0026F3r 3               xt_two_over:
0026F3r 3  20 rr rr                     jsr underflow_4
0026F6r 3               
0026F6r 3  CA                           dex
0026F7r 3  CA                           dex
0026F8r 3  CA                           dex
0026F9r 3  CA                           dex
0026FAr 3               
0026FAr 3  B5 08                        lda 8,x
0026FCr 3  95 00                        sta 0,x
0026FEr 3               
0026FEr 3  B5 09                        lda 9,x
002700r 3  95 01                        sta 1,x
002702r 3               
002702r 3  B5 0A                        lda 10,x
002704r 3  95 02                        sta 2,x
002706r 3               
002706r 3  B5 0B                        lda 11,x
002708r 3  95 03                        sta 3,x
00270Ar 3               
00270Ar 3  60           z_two_over:     rts
00270Br 3               
00270Br 3               
00270Br 3               ; ## TWO_R_FETCH ( -- n n ) "Copy top two entries from Return Stack"
00270Br 3               ; ## "2r@"  auto  ANS core ext
00270Br 3                       ; """https://forth-standard.org/standard/core/TwoRFetch
00270Br 3                       ;
00270Br 3                       ; This is R> R> 2DUP >R >R SWAP but we can do it a lot faster in
00270Br 3                       ; assembler. We use trickery to access the elements on the Return
00270Br 3                       ; Stack instead of pulling the return address first and storing
00270Br 3                       ; it somewhere else like for 2R> and 2>R. In this version, we leave
00270Br 3                       ; it as Never Native; at some point, we should compare versions to
00270Br 3                       ; see if an Always Native version would be better
00270Br 3                       ; """
00270Br 3               xt_two_r_fetch:
00270Br 3               		; make room on the Data Stack
00270Br 3  CA                           dex
00270Cr 3  CA                           dex
00270Dr 3  CA                           dex
00270Er 3  CA                           dex
00270Fr 3               
00270Fr 3                               ; Get four bytes off of Return Stack. This assumes that
00270Fr 3                               ; we took a subroutine jump here so the first two entries
00270Fr 3                               ; are the return address
00270Fr 3  8A                           txa
002710r 3  BA                           tsx
002711r 3  DA                           phx             ; 65c02 has no TXY, so do it the hard way
002712r 3  7A                           ply
002713r 3  AA                           tax
002714r 3               
002714r 3                               ; The Return Stack addreses $0101 and $0102 are occupied by
002714r 3                               ; the return address for this word. This is a whole lot
002714r 3                               ; easier on the 65816
002714r 3  B9 03 01                     lda $0103,y     ; LSB of top entry
002717r 3  95 00                        sta 0,x
002719r 3  B9 04 01                     lda $0104,y     ; MSB of top entry
00271Cr 3  95 01                        sta 1,x
00271Er 3  B9 05 01                     lda $0105,y     ; LSB of bottom entry
002721r 3  95 02                        sta 2,x
002723r 3  B9 06 01                     lda $0106,y     ; MSB of top entry
002726r 3  95 03                        sta 3,x
002728r 3               
002728r 3  60           z_two_r_fetch:  rts
002729r 3               
002729r 3               
002729r 3               ; ## TWO_R_FROM ( -- n1 n2 ) (R: n1 n2 -- ) "Pull two cells from Return Stack"
002729r 3               ; ## "2r>"  auto  ANS core ext
002729r 3               	    ; """https://forth-standard.org/standard/core/TwoRfrom
002729r 3                       ; Pull top two entries from Return Stack.
002729r 3                       ;
002729r 3                       ; Is the same as
002729r 3                       ; R> R> SWAP. As with R>, the problem with the is word is that
002729r 3                       ; the top value on the ReturnStack for a STC Forth is the
002729r 3                       ; return address, which we need to get out of the way first.
002729r 3                       ; Native compile needs to be handled as a special case.
002729r 3                       ; """
002729r 3               xt_two_r_from:
002729r 3                               ; save the return address
002729r 3  68                           pla                     ; LSB
00272Ar 3  85 rr                        sta tmp1
00272Cr 3  68                           pla                     ; MSB
00272Dr 3  85 rr                        sta tmp1+1
00272Fr 3               
00272Fr 3                               ; --- CUT HERE FOR NATIVE CODING ---
00272Fr 3               
00272Fr 3               		; make room on stack
00272Fr 3  CA                           dex
002730r 3  CA                           dex
002731r 3  CA                           dex
002732r 3  CA                           dex
002733r 3               
002733r 3                               ; In theory, we should test for underflow on the Return
002733r 3                               ; Stack. However, given the traffic there with an STC
002733r 3                               ; Forth, that's probably not really useful
002733r 3               
002733r 3                               ; now we can access the data
002733r 3  68                           pla                     ; LSB
002734r 3  95 00                        sta 0,x
002736r 3  68                           pla                     ; MSB
002737r 3  95 01                        sta 1,x
002739r 3               
002739r 3  68                           pla                     ; LSB
00273Ar 3  95 02                        sta 2,x
00273Cr 3  68                           pla                     ; MSB
00273Dr 3  95 03                        sta 3,x
00273Fr 3               
00273Fr 3                               ; --- CUT HERE FOR NATIVE CODING ---
00273Fr 3               
00273Fr 3                               ; restore return address
00273Fr 3  A5 rr                        lda tmp1+1              ; MSB
002741r 3  48                           pha
002742r 3  A5 rr                        lda tmp1                ; LSB
002744r 3  48                           pha
002745r 3               
002745r 3  60           z_two_r_from:   rts
002746r 3               
002746r 3               
002746r 3               ; ## TWO_SLASH ( n -- n ) "Divide TOS by two"
002746r 3               ; ## "2/"  auto  ANS core
002746r 3                       ; """https://forth-standard.org/standard/core/TwoDiv"""
002746r 3               xt_two_slash:
002746r 3  20 rr rr                     jsr underflow_1
002749r 3               
002749r 3                               ; We can't just LSR the LSB and ROR the MSB because that
002749r 3                               ; would do bad things to the sign
002749r 3  B5 01                        lda 1,x
00274Br 3  0A                           asl                     ; save the sign
00274Cr 3  76 01                        ror 1,x
00274Er 3  76 00                        ror 0,x
002750r 3               
002750r 3  60           z_two_slash:    rts
002751r 3               
002751r 3               
002751r 3               ; ## TWO_STAR ( n -- n ) "Multiply TOS by two"
002751r 3               ; ## "2*"  auto  ANS core
002751r 3                       ; """https://forth-standard.org/standard/core/TwoTimes
002751r 3                       ;
002751r 3                       ; Also used for CELLS
002751r 3                       ; """
002751r 3               xt_two_star:
002751r 3               xt_cells:
002751r 3  20 rr rr                     jsr underflow_1
002754r 3               
002754r 3  16 00                        asl 0,x
002756r 3  36 01                        rol 1,x
002758r 3               z_cells:
002758r 3  60           z_two_star:     rts
002759r 3               
002759r 3               
002759r 3               ; ## TWO_STORE ( n1 n2 addr -- ) "Store two numbers at given address"
002759r 3               ; ## "2!"  auto  ANS core
002759r 3                       ; """https://forth-standard.org/standard/core/TwoStore
002759r 3                       ; Stores so n2 goes to addr and n1 to the next consecutive cell.
002759r 3                       ; Is equivalent to  `SWAP OVER ! CELL+ !`
002759r 3                       ; """
002759r 3               xt_two_store:
002759r 3  20 rr rr                     jsr underflow_3
00275Cr 3               
00275Cr 3  B5 00                        lda 0,x
00275Er 3  85 rr                        sta tmp1
002760r 3  B4 01                        ldy 1,x
002762r 3  84 rr                        sty tmp1+1
002764r 3               
002764r 3  E8                           inx
002765r 3  E8                           inx
002766r 3               
002766r 3  B5 00                        lda 0,x         ; copy MSB
002768r 3  92 rr                        sta (tmp1)
00276Ar 3  B5 01                        lda 1,x         ; copy next
00276Cr 3  A0 01                        ldy #1
00276Er 3  91 rr                        sta (tmp1),y
002770r 3  B5 02                        lda 2,x         ; copy next
002772r 3  C8                           iny
002773r 3  91 rr                        sta (tmp1),y
002775r 3  B5 03                        lda 3,x         ; copy MSB
002777r 3  C8                           iny
002778r 3  91 rr                        sta (tmp1),y
00277Ar 3               
00277Ar 3  E8                           inx             ; 2DROP
00277Br 3  E8                           inx
00277Cr 3  E8                           inx
00277Dr 3  E8                           inx
00277Er 3               
00277Er 3  60           z_two_store:    rts
00277Fr 3               
00277Fr 3               
00277Fr 3               ; ## TWO_SWAP ( n1 n2 n3 n4 -- n3 n4 n1 n1 ) "Exchange two double words"
00277Fr 3               ; ## "2swap"  auto  ANS core
00277Fr 3                       ; """https://forth-standard.org/standard/core/TwoSWAP"""
00277Fr 3               xt_two_swap:
00277Fr 3  20 rr rr                     jsr underflow_4
002782r 3               
002782r 3                               ; 0 <-> 4
002782r 3  B5 00                        lda 0,x
002784r 3  B4 04                        ldy 4,x
002786r 3  95 04                        sta 4,x
002788r 3  94 00                        sty 0,x
00278Ar 3               
00278Ar 3                               ; 1 <-> 5
00278Ar 3  B5 01                        lda 1,x
00278Cr 3  B4 05                        ldy 5,x
00278Er 3  95 05                        sta 5,x
002790r 3  94 01                        sty 1,x
002792r 3               
002792r 3                               ; 2 <-> 6
002792r 3  B5 02                        lda 2,x
002794r 3  B4 06                        ldy 6,x
002796r 3  95 06                        sta 6,x
002798r 3  94 02                        sty 2,x
00279Ar 3               
00279Ar 3                               ; 3 <-> 7
00279Ar 3  B5 03                        lda 3,x
00279Cr 3  B4 07                        ldy 7,x
00279Er 3  95 07                        sta 7,x
0027A0r 3  94 03                        sty 3,x
0027A2r 3               
0027A2r 3  60           z_two_swap:     rts
0027A3r 3               
0027A3r 3               
0027A3r 3               ; ## TWO_TO_R ( n1 n2 -- )(R: -- n1 n2 "Push top two entries to Return Stack"
0027A3r 3               ; ## "2>r"  auto  ANS core ext
0027A3r 3                       ; """https://forth-standard.org/standard/core/TwotoR
0027A3r 3                       ; Push top two entries to Return Stack.
0027A3r 3                       ;
0027A3r 3                       ; The same as SWAP >R >R
0027A3r 3                       ; except that if we jumped here, the return address will be in the
0027A3r 3                       ; way. May not be natively compiled unless we're clever and use
0027A3r 3                       ; special routines.
0027A3r 3                       ; """
0027A3r 3               xt_two_to_r:
0027A3r 3                               ; save the return address
0027A3r 3  68                           pla             ; LSB
0027A4r 3  85 rr                        sta tmp1
0027A6r 3  68                           pla             ; MSB
0027A7r 3  85 rr                        sta tmp1+1
0027A9r 3               
0027A9r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0027A9r 3               
0027A9r 3  20 rr rr                     jsr underflow_2
0027ACr 3               
0027ACr 3                               ; now we can move the data
0027ACr 3  B5 03                        lda 3,x         ; MSB
0027AEr 3  48                           pha
0027AFr 3  B5 02                        lda 2,x         ; LSB
0027B1r 3  48                           pha
0027B2r 3               
0027B2r 3                               ; now we can move the data
0027B2r 3  B5 01                        lda 1,x         ; MSB
0027B4r 3  48                           pha
0027B5r 3  B5 00                        lda 0,x         ; LSB
0027B7r 3  48                           pha
0027B8r 3               
0027B8r 3  E8                           inx
0027B9r 3  E8                           inx
0027BAr 3  E8                           inx
0027BBr 3  E8                           inx
0027BCr 3               
0027BCr 3                               ; --- CUT HERE FOR NATIVE CODING ---
0027BCr 3               
0027BCr 3                               ; restore return address
0027BCr 3  A5 rr                        lda tmp1+1      ; MSB
0027BEr 3  48                           pha
0027BFr 3  A5 rr                        lda tmp1        ; LSB
0027C1r 3  48                           pha
0027C2r 3               
0027C2r 3  60           z_two_to_r:     rts
0027C3r 3               
0027C3r 3               
0027C3r 3               ; ## TWO_CONSTANT (C: d "name" -- ) ( -- d) "Create a constant for a double word"
0027C3r 3               ; ## "2constant"  auto  ANS double
0027C3r 3                       ; """https://forth-standard.org/standard/double/TwoCONSTANT
0027C3r 3                       ;
0027C3r 3                       ; Based on the Forth code
0027C3r 3                       ; : 2CONSTANT ( D -- )  CREATE SWAP , , DOES> DUP @ SWAP CELL+ @ ;
0027C3r 3                       ; """
0027C3r 3               xt_two_constant:
0027C3r 3  20 rr rr                     jsr underflow_2
0027C6r 3               
0027C6r 3  20 rr rr                     jsr xt_create
0027C9r 3  20 rr rr                     jsr xt_swap
0027CCr 3  20 rr rr                     jsr xt_comma
0027CFr 3  20 rr rr                     jsr xt_comma
0027D2r 3               
0027D2r 3  20 rr rr                     jsr does_runtime    ; does> turns into these two routines.
0027D5r 3  20 rr rr                     jsr dodoes
0027D8r 3               
0027D8r 3  20 rr rr                     jsr xt_dup
0027DBr 3  20 rr rr                     jsr xt_fetch
0027DEr 3  20 rr rr                     jsr xt_swap
0027E1r 3  20 rr rr                     jsr xt_cell_plus
0027E4r 3  20 rr rr                     jsr xt_fetch
0027E7r 3               
0027E7r 3  60           z_two_constant: rts
0027E8r 3               
0027E8r 3               
0027E8r 3               ; ## TWO_LITERAL (C: d -- ) ( -- d) "Compile a literal double word"
0027E8r 3               ; ## "2literal"  auto  ANS double
0027E8r 3                       ; """https://forth-standard.org/standard/double/TwoLITERAL"""
0027E8r 3                       ; Based on the Forth code
0027E8r 3                       ; : 2LITERAL ( D -- ) SWAP POSTPONE LITERAL POSTPONE LITERAL ; IMMEDIATE
0027E8r 3                       ; """
0027E8r 3               xt_two_literal:
0027E8r 3  20 rr rr                     jsr underflow_2 ; double number
0027EBr 3               
0027EBr 3  20 rr rr                     jsr xt_swap
0027EEr 3  20 rr rr                     jsr xt_literal
0027F1r 3  20 rr rr                     jsr xt_literal
0027F4r 3               
0027F4r 3  60           z_two_literal:  rts
0027F5r 3               
0027F5r 3               
0027F5r 3               ; ## TWO_VARIABLE ( "name" -- ) "Create a variable for a double word"
0027F5r 3               ; ## "2variable"  auto  ANS double
0027F5r 3                       ; """https://forth-standard.org/standard/double/TwoVARIABLE
0027F5r 3                       ; The variable is not initialized to zero.
0027F5r 3                       ;
0027F5r 3                       ; This can be realized in Forth as either
0027F5r 3                       ; CREATE 2 CELLS ALLOT  or just  CREATE 0 , 0 ,
0027F5r 3                       ; """
0027F5r 3               xt_two_variable:
0027F5r 3                               ; We just let CRATE and ALLOT do the heavy lifting
0027F5r 3  20 rr rr                     jsr xt_create
0027F8r 3               
0027F8r 3  CA                           dex
0027F9r 3  CA                           dex
0027FAr 3  A9 04                        lda #4
0027FCr 3  95 00                        sta 0,x
0027FEr 3  74 01                        stz 1,x
002800r 3               
002800r 3  20 rr rr                     jsr xt_allot
002803r 3               
002803r 3  60           z_two_variable: rts
002804r 3               
002804r 3               
002804r 3               ; ## TYPE ( addr u -- ) "Print string"
002804r 3               ; ## "type"  auto  ANS core
002804r 3                       ; """https://forth-standard.org/standard/core/TYPE
002804r 3                       ; Works through EMIT to allow OUTPUT revectoring.
002804r 3                       ; """
002804r 3               
002804r 3               xt_type:
002804r 3  20 rr rr                     jsr underflow_2
002807r 3               
002807r 3                               ; Save the starting address into tmp1
002807r 3  B5 02                        lda 2,x
002809r 3  85 rr                        sta tmp1
00280Br 3  B5 03                        lda 3,x
00280Dr 3  85 rr                        sta tmp1+1
00280Fr 3               @loop:
00280Fr 3                               ; done if length is zero
00280Fr 3  B5 00                        lda 0,x
002811r 3  15 01                        ora 1,x
002813r 3  F0 15                        beq @done
002815r 3               
002815r 3                               ; Send the current character
002815r 3  B2 rr                        lda (tmp1)
002817r 3  20 rr rr                     jsr emit_a      ; avoids stack foolery
00281Ar 3               
00281Ar 3                               ; Move the address along (in tmp1)
00281Ar 3  E6 rr                        inc tmp1
00281Cr 3  D0 02                        bne @1
00281Er 3  E6 rr                        inc tmp1+1
002820r 3               @1:
002820r 3                               ; Reduce the count (on the data stack)
002820r 3  B5 00                        lda 0,x
002822r 3  D0 02                        bne @2
002824r 3  D6 01                        dec 1,x
002826r 3               @2:
002826r 3  D6 00                        dec 0,x
002828r 3               
002828r 3  80 E5                        bra @loop
00282Ar 3               @done:
00282Ar 3  E8                           inx
00282Br 3  E8                           inx
00282Cr 3  E8                           inx
00282Dr 3  E8                           inx
00282Er 3               
00282Er 3  60           z_type:         rts
00282Fr 3               
00282Fr 3               
00282Fr 3               
00282Fr 3               ; ## U_DOT ( u -- ) "Print TOS as unsigned number"
00282Fr 3               ; ## "u."  tested  ANS core
00282Fr 3                       ; """https://forth-standard.org/standard/core/Ud
00282Fr 3                       ;
00282Fr 3                       ; This is : U. 0 <# #S #> TYPE SPACE ; in Forth
00282Fr 3                       ; We use the internal assembler function print_u followed
00282Fr 3                       ; by a single space
00282Fr 3                       ; """
00282Fr 3               xt_u_dot:
00282Fr 3  20 rr rr                     jsr underflow_1
002832r 3               
002832r 3  20 rr rr                     jsr print_u
002835r 3  A9 20                        lda #AscSP
002837r 3  20 rr rr                     jsr emit_a
00283Ar 3               
00283Ar 3  60           z_u_dot:        rts
00283Br 3               
00283Br 3               
00283Br 3               ; ## U_DOT_R ( u u -- ) "Print NOS as unsigned number right-justified with TOS width"
00283Br 3               ; ## "u.r"  tested  ANS core ext
00283Br 3                       ; """https://forth-standard.org/standard/core/UDotR"""
00283Br 3               xt_u_dot_r:
00283Br 3  20 rr rr                     jsr underflow_2
00283Er 3               
00283Er 3  20 rr rr                     jsr xt_to_r
002841r 3  20 rr rr                     jsr xt_zero
002844r 3  20 rr rr                     jsr xt_less_number_sign
002847r 3  20 rr rr                     jsr xt_number_sign_s
00284Ar 3  20 rr rr                     jsr xt_number_sign_greater
00284Dr 3  20 rr rr                     jsr xt_r_from
002850r 3  20 rr rr                     jsr xt_over
002853r 3  20 rr rr                     jsr xt_minus
002856r 3  20 rr rr                     jsr xt_spaces
002859r 3  20 rr rr                     jsr xt_type
00285Cr 3               
00285Cr 3  60           z_u_dot_r:      rts
00285Dr 3               
00285Dr 3               
00285Dr 3               ; ## U_GREATER_THAN ( n m -- f ) "Return true if NOS > TOS (unsigned)"
00285Dr 3               ; ## "u>"  auto  ANS core ext
00285Dr 3                       ; """https://forth-standard.org/standard/core/Umore"""
00285Dr 3               xt_u_greater_than:
00285Dr 3  20 rr rr                     jsr underflow_2
002860r 3               
002860r 3  B5 00                        lda 0,x
002862r 3  D5 02                        cmp 2,x
002864r 3  B5 01                        lda 1,x
002866r 3  F5 03                        sbc 3,x
002868r 3  E8                           inx
002869r 3  E8                           inx
00286Ar 3               
00286Ar 3  A9 00                        lda #0
00286Cr 3  69 FF                        adc #$ff
00286Er 3  95 00                        sta 0,x         ; store flag
002870r 3  95 01                        sta 1,x
002872r 3               
002872r 3  60           z_u_greater_than:    rts
002873r 3               
002873r 3               ; ## U_LESS_THAN ( n m -- f ) "Return true if NOS < TOS (unsigned)"
002873r 3               ; ## "u<"  auto  ANS core
002873r 3                       ; """https://forth-standard.org/standard/core/Uless"""
002873r 3               xt_u_less_than:
002873r 3  20 rr rr                     jsr underflow_2
002876r 3               
002876r 3  B5 02                        lda 2,x
002878r 3  D5 00                        cmp 0,x
00287Ar 3  B5 03                        lda 3,x
00287Cr 3  F5 01                        sbc 1,x
00287Er 3  E8                           inx
00287Fr 3  E8                           inx
002880r 3               
002880r 3  A9 00                        lda #0
002882r 3  69 FF                        adc #$ff
002884r 3  95 00                        sta 0,x         ; store flag
002886r 3  95 01                        sta 1,x
002888r 3               
002888r 3  60           z_u_less_than:    rts
002889r 3               
002889r 3               
002889r 3               ; ## UD_DOT ( d -- ) "Print double as unsigned"
002889r 3               ; ## "ud."  auto  Tali double
002889r 3                       ;
002889r 3                       ; """Based on the Forth code  : UD. <# #S #> TYPE SPACE ;
002889r 3                       ; """
002889r 3               xt_ud_dot:
002889r 3  20 rr rr                     jsr underflow_2 ; double number
00288Cr 3               
00288Cr 3  20 rr rr                     jsr xt_less_number_sign
00288Fr 3  20 rr rr                     jsr xt_number_sign_s
002892r 3  20 rr rr                     jsr xt_number_sign_greater
002895r 3  20 rr rr                     jsr xt_type
002898r 3  20 rr rr                     jsr xt_space
00289Br 3               
00289Br 3  60           z_ud_dot:        rts
00289Cr 3               
00289Cr 3               
00289Cr 3               ; ## UD_DOT_R ( d u -- ) "Print unsigned double right-justified u wide"
00289Cr 3               ; ## "ud.r"  auto  Tali double
00289Cr 3                       ;
00289Cr 3                       ; """Based on the Forth code : UD.R  >R <# #S #> R> OVER - SPACES TYPE ;
00289Cr 3                       ; """
00289Cr 3               xt_ud_dot_r:
00289Cr 3  20 rr rr                     jsr underflow_3
00289Fr 3               
00289Fr 3  20 rr rr                     jsr xt_to_r
0028A2r 3  20 rr rr                     jsr xt_less_number_sign
0028A5r 3  20 rr rr                     jsr xt_number_sign_s
0028A8r 3  20 rr rr                     jsr xt_number_sign_greater
0028ABr 3  20 rr rr                     jsr xt_r_from
0028AEr 3  20 rr rr                     jsr xt_over
0028B1r 3  20 rr rr                     jsr xt_minus
0028B4r 3  20 rr rr                     jsr xt_spaces
0028B7r 3  20 rr rr                     jsr xt_type
0028BAr 3               
0028BAr 3  60           z_ud_dot_r:      rts
0028BBr 3               
0028BBr 3               
0028BBr 3               ; ## UM_SLASH_MOD ( ud u -- ur u ) "32/16 -> 16 division"
0028BBr 3               ; ## "um/mod"  auto  ANS core
0028BBr 3                       ; """https://forth-standard.org/standard/core/UMDivMOD
0028BBr 3                       ; Divide double cell number by single cell number, returning the
0028BBr 3                       ; quotient as TOS and any remainder as NOS. All numbers are unsigned.
0028BBr 3                       ; This is the basic division operation all others use. Based on FIG
0028BBr 3                       ; Forth code, modified by Garth Wilson, see
0028BBr 3                       ; http://6502.org/source/integers/ummodfix/ummodfix.htm
0028BBr 3                       ;
0028BBr 3                       ; This uses tmp1, tmp1+1, and tmptos
0028BBr 3                       ; """
0028BBr 3               
0028BBr 3               xt_um_slash_mod:
0028BBr 3  20 rr rr                     jsr underflow_3
0028BEr 3               
0028BEr 3                               ; catch division by zero
0028BEr 3  B5 00                        lda 0,x
0028C0r 3  15 01                        ora 1,x
0028C2r 3  D0 05                        bne @not_zero
0028C4r 3               
0028C4r 3  A9 04                        lda #err_divzero
0028C6r 3  4C rr rr                     jmp error
0028C9r 3               
0028C9r 3               @not_zero:
0028C9r 3                               ; We loop 17 times
0028C9r 3  A9 11                        lda #17
0028CBr 3  85 rr                        sta tmptos
0028CDr 3               
0028CDr 3               @loop:
0028CDr 3                               ; rotate low cell of dividend one bit left (LSB)
0028CDr 3  36 04                        rol 4,x
0028CFr 3  36 05                        rol 5,x
0028D1r 3               
0028D1r 3                               ; loop control
0028D1r 3  C6 rr                        dec tmptos
0028D3r 3  F0 22                        beq @done
0028D5r 3               
0028D5r 3                               ; rotate high cell of dividend one bit left (MSB)
0028D5r 3  36 02                        rol 2,x
0028D7r 3  36 03                        rol 3,x
0028D9r 3               
0028D9r 3  64 rr                        stz tmp1        ; store the bit we got from hi cell (MSB)
0028DBr 3  26 rr                        rol tmp1
0028DDr 3               
0028DDr 3                               ; subtract dividend hi cell minus divisor
0028DDr 3  38                           sec
0028DEr 3  B5 02                        lda 2,x
0028E0r 3  F5 00                        sbc 0,x
0028E2r 3  85 rr                        sta tmp1+1
0028E4r 3  B5 03                        lda 3,x
0028E6r 3  F5 01                        sbc 1,x
0028E8r 3               
0028E8r 3  A8                           tay
0028E9r 3  A5 rr                        lda tmp1
0028EBr 3  E9 00                        sbc #0
0028EDr 3  90 DE                        bcc @loop
0028EFr 3               
0028EFr 3                               ; make result new dividend high cell
0028EFr 3  A5 rr                        lda tmp1+1
0028F1r 3  95 02                        sta 2,x
0028F3r 3  94 03                        sty 3,x         ; used as temp storage
0028F5r 3               
0028F5r 3  80 D6                        bra @loop
0028F7r 3               @done:
0028F7r 3  E8                           inx
0028F8r 3  E8                           inx
0028F9r 3               
0028F9r 3  20 rr rr                     jsr xt_swap
0028FCr 3               
0028FCr 3  60           z_um_slash_mod: rts
0028FDr 3               
0028FDr 3               
0028FDr 3               
0028FDr 3               ; ## UM_STAR ( u u -- ud ) "Multiply 16 x 16 -> 32"
0028FDr 3               ; ## "um*"  auto  ANS core
0028FDr 3                       ; """https://forth-standard.org/standard/core/UMTimes
0028FDr 3                       ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.
0028FDr 3                       ; Old Forth versions such as FIG Forth call this U*
0028FDr 3                       ;
0028FDr 3                       ; This is based on modified FIG Forth code by Dr. Jefyll, see
0028FDr 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed
0028FDr 3                       ; discussion.
0028FDr 3                       ;
0028FDr 3                       ; We don't use the system scratch pad (SYSPAD) for temp
0028FDr 3                       ; storage because >NUMBER uses it as well, but instead tmp1 to
0028FDr 3                       ; tmp3 (tmp1 is N in the original code, tmp1+1 is N+1, etc).
0028FDr 3                       ;
0028FDr 3                       ; Consider switching to a table-supported version based on
0028FDr 3                       ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
0028FDr 3                       ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d>
0028FDr 3                       ; http://forum.6502.org/viewtopic.php?p=205#p205
0028FDr 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689
0028FDr 3                       ; """
0028FDr 3               
0028FDr 3               xt_um_star:
0028FDr 3  20 rr rr                     jsr underflow_2
002900r 3               
002900r 3                               ; to eliminate clc inside the loop, the value at
002900r 3                               ; tmp1 is reduced by 1 in advance
002900r 3  18                           clc
002901r 3  B5 00                        lda 0,x         ; copy TOS to tmp2
002903r 3  E9 00                        sbc #0
002905r 3  85 rr                        sta tmp2
002907r 3               
002907r 3  B5 01                        lda 1,x
002909r 3  E9 00                        sbc #0
00290Br 3  90 31                        bcc @zero       ; is TOS zero?
00290Dr 3  85 rr                        sta tmp2+1
00290Fr 3               
00290Fr 3  A9 00                        lda #0
002911r 3  85 rr                        sta tmp1
002913r 3  86 rr                        stx tmp3        ; tested for exit from outer loop
002915r 3  CA                           dex
002916r 3  CA                           dex
002917r 3               
002917r 3               @outer_loop:
002917r 3  A0 08                        ldy #8          ; counter inner loop
002919r 3  56 04                        lsr 4,x         ; think "2,x" then later "3,x"
00291Br 3               
00291Br 3               @inner_loop:
00291Br 3  90 0C                        bcc @no_add
00291Dr 3  85 rr                        sta tmp1+1      ; save time, don't CLC
00291Fr 3  A5 rr                        lda tmp1
002921r 3  65 rr                        adc tmp2
002923r 3  85 rr                        sta tmp1
002925r 3  A5 rr                        lda tmp1+1
002927r 3  65 rr                        adc tmp2+1
002929r 3               
002929r 3               @no_add:
002929r 3  6A                           ror
00292Ar 3  66 rr                        ror tmp1
00292Cr 3  76 04                        ror 4,x         ; think "2,x" then later "3,x"
00292Er 3               
00292Er 3  88                           dey
00292Fr 3  D0 EA                        bne @inner_loop ; go back for one more shift?
002931r 3               
002931r 3  E8                           inx
002932r 3  E4 rr                        cpx tmp3
002934r 3  D0 E1                        bne @outer_loop ; go back for eight more shifts?
002936r 3               
002936r 3                               ; all done, store high word of result
002936r 3  95 01                        sta 1,x
002938r 3  A5 rr                        lda tmp1
00293Ar 3  95 00                        sta 0,x
00293Cr 3  80 04                        bra @done
00293Er 3               
00293Er 3               @zero:
00293Er 3  74 02                        stz 2,x
002940r 3  74 03                        stz 3,x
002942r 3               @done:
002942r 3  60           z_um_star:      rts
002943r 3               
002943r 3               
002943r 3               
002943r 3               ; ## UNLOOP ( -- )(R: n1 n2 n3 ---) "Drop loop control from Return stack"
002943r 3               ; ## "unloop"  auto  ANS core
002943r 3                       ; """https://forth-standard.org/standard/core/UNLOOP
002943r 3                       ;
002943r 3                       ; Note that 6xPLA uses just as many bytes as a loop would
002943r 3                       ; """
002943r 3               xt_unloop:
002943r 3                               ; Drop fudge number (limit/start from DO/?DO off the
002943r 3                               ; return stack
002943r 3  68                           pla
002944r 3  68                           pla
002945r 3  68                           pla
002946r 3  68                           pla
002947r 3               
002947r 3                               ; Now drop the LEAVE address that was below them off
002947r 3                               ; the Return Stack as well
002947r 3  68                           pla
002948r 3  68                           pla
002949r 3               
002949r 3  60           z_unloop:       rts
00294Ar 3               
00294Ar 3               
00294Ar 3               ; ## UNTIL (C: dest -- ) ( -- ) "Loop flow control"
00294Ar 3               ; ## "until"  auto  ANS core
00294Ar 3                       ; """http://forth-standard.org/standard/core/UNTIL"""
00294Ar 3               xt_until:
00294Ar 3                               ; Compile a 0BRANCH
00294Ar 3  A0 rr                        ldy #>zero_branch_runtime
00294Cr 3  A9 rr                        lda #<zero_branch_runtime
00294Er 3  20 rr rr                     jsr cmpl_subroutine
002951r 3               
002951r 3                               ; The address to loop back to is on the stack.
002951r 3                               ; Just compile it as the destination for the
002951r 3                               ; 0branch.
002951r 3  20 rr rr                     jsr xt_comma
002954r 3               
002954r 3  60           z_until:        rts
002955r 3               
002955r 3               
002955r 3               ; ## UNUSED ( -- u ) "Return size of space available to Dictionary"
002955r 3               ; ## "unused"  auto  ANS core ext
002955r 3                       ; """https://forth-standard.org/standard/core/UNUSED
002955r 3                       ; UNUSED does not include the ACCEPT history buffers. Total RAM
002955r 3                       ; should be HERE + UNUSED + <history buffer size>, the last of which
002955r 3                       ; defaults to $400
002955r 3                       ; """
002955r 3               xt_unused:
002955r 3  CA                           dex
002956r 3  CA                           dex
002957r 3               
002957r 3  A9 FF                        lda #<cp_end
002959r 3  38                           sec
00295Ar 3  E5 rr                        sbc cp
00295Cr 3  95 00                        sta 0,x
00295Er 3               
00295Er 3  A9 7F                        lda #>cp_end
002960r 3  E5 rr                        sbc cp+1
002962r 3  95 01                        sta 1,x
002964r 3               
002964r 3  60           z_unused:       rts
002965r 3               
002965r 3               
002965r 3               ; ## UPDATE ( -- ) "Mark current block as dirty"
002965r 3               ; ## "update"  auto  ANS block
002965r 3                       ; """https://forth-standard.org/standard/block/UPDATE"""
002965r 3               xt_update:
002965r 3                               ; Turn on the dirty bit. We can't use TSB here because it only
002965r 3                               ; has Absolute and Direct Pages addressing modes
002965r 3  A0 2C                        ldy #buffstatus_offset
002967r 3  B1 rr                        lda (up),y
002969r 3  09 02                        ora #2          ; Turn on dirty flag (bit 2)
00296Br 3  91 rr                        sta (up),y
00296Dr 3               
00296Dr 3  60           z_update:       rts
00296Er 3               
00296Er 3               
00296Er 3               ; ## USERADDR ( -- addr ) "Push address of base address of user variables"
00296Er 3               ; ## "useraddr"  tested  Tali Forth
00296Er 3               xt_useraddr:
00296Er 3  CA                           dex
00296Fr 3  CA                           dex
002970r 3  A9 rr                        lda #<up
002972r 3  95 00                        sta 0,x
002974r 3  A9 rr                        lda #>up
002976r 3  95 01                        sta 1,x
002978r 3               
002978r 3  60           z_useraddr:     rts
002979r 3               
002979r 3               
002979r 3               ; ## VALUE ( n "name" -- ) "Define a value"
002979r 3               ; ## "value"  auto  ANS core
002979r 3                       ; """https://forth-standard.org/standard/core/VALUE
002979r 3                       ;
002979r 3                       ; This is a dummy header for the WORDLIST. The actual code is
002979r 3                       ; identical to that of CONSTANT
002979r 3                       ; """
002979r 3               
002979r 3               
002979r 3               ; ## VARIABLE ( "name" -- ) "Define a variable"
002979r 3               ; ## "variable"  auto  ANS core
002979r 3                       ; """https://forth-standard.org/standard/core/VARIABLE
002979r 3                       ; There are various Forth definitions for this word, such as
002979r 3                       ; `CREATE 1 CELLS ALLOT`  or  `CREATE 0 ,`  We use a variant of the
002979r 3                       ; second one so the variable is initialized to zero
002979r 3                       ; """
002979r 3               xt_variable:
002979r 3                               ; we let CREATE do the heavy lifting
002979r 3  20 rr rr                     jsr xt_create
00297Cr 3               
00297Cr 3                               ; there is no "STZ (CP)" so we have to do this the hard
00297Cr 3                               ; way
00297Cr 3  A9 00                        lda #0
00297Er 3               
00297Er 3  92 rr                        sta (cp)
002980r 3  E6 rr                        inc cp
002982r 3  D0 02                        bne @1
002984r 3  E6 rr                        inc cp+1
002986r 3               @1:
002986r 3  92 rr                        sta (cp)
002988r 3  E6 rr                        inc cp
00298Ar 3  D0 02                        bne @2
00298Cr 3  E6 rr                        inc cp+1
00298Er 3               @2:
00298Er 3                               ; Now we need to adjust the length of the complete word by two
00298Er 3  20 rr rr                     jsr adjust_z
002991r 3               
002991r 3  60           z_variable:     rts
002992r 3               
002992r 3               
002992r 3               ; ## WHILE ( C: dest -- orig dest ) ( x -- ) "Loop flow control"
002992r 3               ; ## "while"  auto  ANS core
002992r 3                       ; """http://forth-standard.org/standard/core/WHILE"""
002992r 3               xt_while:
002992r 3                               ; Compile a 0branch
002992r 3  A0 rr                        ldy #>zero_branch_runtime
002994r 3  A9 rr                        lda #<zero_branch_runtime
002996r 3  20 rr rr                     jsr cmpl_subroutine
002999r 3               
002999r 3                               ; Put the address (here) where the destination
002999r 3                               ; address needs to go so it can be put there later.
002999r 3  20 rr rr                     jsr xt_here
00299Cr 3               
00299Cr 3                               ; Fill in the destination address with 0 for now.
00299Cr 3  20 rr rr                     jsr xt_zero
00299Fr 3  20 rr rr                     jsr xt_comma
0029A2r 3               
0029A2r 3                               ; Swap the two addresses on the stack.
0029A2r 3  20 rr rr                     jsr xt_swap
0029A5r 3               
0029A5r 3  60           z_while:        rts
0029A6r 3               
0029A6r 3               
0029A6r 3               ; ## WITHIN ( n1 n2 n3 -- ) "See if within a range"
0029A6r 3               ; ## "within"  auto  ANS core ext
0029A6r 3                       ; """https://forth-standard.org/standard/core/WITHIN
0029A6r 3                       ;
0029A6r 3                       ; This an assembler version of the ANS Forth implementation
0029A6r 3                       ; at https://forth-standard.org/standard/core/WITHIN which is
0029A6r 3                       ; OVER - >R - R> U<  note there is an alternative high-level version
0029A6r 3                       ; ROT TUCK > -ROT > INVERT AND
0029A6r 3                       ; """"
0029A6r 3               xt_within:
0029A6r 3  20 rr rr                     jsr underflow_3
0029A9r 3               
0029A9r 3  20 rr rr                     jsr xt_over
0029ACr 3  20 rr rr                     jsr xt_minus
0029AFr 3  20 rr rr                     jsr xt_to_r
0029B2r 3  20 rr rr                     jsr xt_minus
0029B5r 3  20 rr rr                     jsr xt_r_from
0029B8r 3  20 rr rr                     jsr xt_u_less_than
0029BBr 3               
0029BBr 3  60           z_within:       rts
0029BCr 3               
0029BCr 3               
0029BCr 3               ; ## WORD ( char "name " -- caddr ) "Parse input stream"
0029BCr 3               ; ## "word"  auto  ANS core
0029BCr 3                       ; """https://forth-standard.org/standard/core/WORD
0029BCr 3                       ; Obsolete parsing word included for backwards compatibility only.
0029BCr 3                       ; Do not use this, use `PARSE` or `PARSE-NAME`. Skips leading delimiters
0029BCr 3                       ; and copies word to storage area for a maximum size of 255 bytes.
0029BCr 3                       ; Returns the result as a counted string (requires COUNT to convert
0029BCr 3                       ; to modern format), and inserts a space after the string. See "Forth
0029BCr 3                       ; Programmer's Handbook" 3rd edition p. 159 and
0029BCr 3                       ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
0029BCr 3                       ; for discussions of why you shouldn't be using WORD anymore.
0029BCr 3                       ;
0029BCr 3                       ; Forth
0029BCr 3                       ; would be   PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
0029BCr 3                       ; We only allow input of 255 chars. Seriously, use PARSE-NAME.
0029BCr 3                       ; """
0029BCr 3               
0029BCr 3               xt_word:
0029BCr 3  20 rr rr                     jsr underflow_1
0029BFr 3               
0029BFr 3                               ; Skip over leading delimiters - this is like PARSE-NAME,
0029BFr 3                               ; but unlike PARSE
0029BFr 3  A4 rr                        ldy toin                ; >IN
0029C1r 3               @loop:
0029C1r 3  C4 rr                        cpy ciblen              ; quit if end of input
0029C3r 3  F0 09                        beq @found_char
0029C5r 3  B1 rr                        lda (cib),y
0029C7r 3  D5 00                        cmp 0,x                 ; ASCII of delimiter
0029C9r 3  D0 03                        bne @found_char
0029CBr 3               
0029CBr 3  C8                           iny
0029CCr 3  80 F3                        bra @loop
0029CEr 3               @found_char:
0029CEr 3                               ; Save index of where word starts
0029CEr 3  84 rr                        sty toin
0029D0r 3               
0029D0r 3                               ; The real work is done by parse
0029D0r 3  20 rr rr                     jsr xt_parse            ; Returns ( addr u )
0029D3r 3               
0029D3r 3                               ; Convert the modern ( addr u ) string format to obsolete
0029D3r 3                               ; ( caddr ) format. We just do this in the Dictionary
0029D3r 3  B5 00                        lda 0,x
0029D5r 3  92 rr                        sta (cp)                ; Save length of string
0029D7r 3  48                           pha                     ; Keep copy of length for later
0029D8r 3               
0029D8r 3  20 rr rr                     jsr xt_dup              ; ( addr u u )
0029DBr 3  A5 rr                        lda cp
0029DDr 3  18                           clc
0029DEr 3  69 01                        adc #1
0029E0r 3  95 02                        sta 2,x                 ; LSB of CP
0029E2r 3  A5 rr                        lda cp+1
0029E4r 3  69 00                        adc #0
0029E6r 3  95 03                        sta 3,x                 ; ( addr cp+1 u )
0029E8r 3               
0029E8r 3  20 rr rr                     jsr xt_move
0029EBr 3               
0029EBr 3                               ; Return caddr
0029EBr 3  CA                           dex
0029ECr 3  CA                           dex
0029EDr 3  A5 rr                        lda cp
0029EFr 3  95 00                        sta 0,x
0029F1r 3  A5 rr                        lda cp+1
0029F3r 3  95 01                        sta 1,x
0029F5r 3               
0029F5r 3                               ; Adjust CP
0029F5r 3  68                           pla                     ; length of string
0029F6r 3  18                           clc
0029F7r 3  65 rr                        adc cp
0029F9r 3  85 rr                        sta cp
0029FBr 3  A5 rr                        lda cp+1
0029FDr 3  69 00                        adc #0                  ; we only need the carry
0029FFr 3  85 rr                        sta cp+1
002A01r 3  60           z_word:         rts
002A02r 3               
002A02r 3               
002A02r 3               ; ## WORDLIST ( -- wid ) "Create new wordlist (from pool of 8)"
002A02r 3               ; ## "wordlist" auto ANS search
002A02r 3                       ; """https://forth-standard.org/standard/search/WORDLIST
002A02r 3                       ; See the tutorial on Wordlists and the Search Order for
002A02r 3                       ; more information.
002A02r 3                       ; """
002A02r 3               
002A02r 3               xt_wordlist:
002A02r 3                               ; Get the current number of wordlists
002A02r 3  A0 05                        ldy #num_wordlists_offset
002A04r 3  B1 rr                        lda (up),y      ; This is a byte variable, so only
002A06r 3                                               ; the LSB needs to be checked.
002A06r 3               
002A06r 3                               ; See if we are already at the max.
002A06r 3  C9 0C                        cmp #max_wordlists
002A08r 3  D0 05                        bne @ok
002A0Ar 3               
002A0Ar 3                               ; Print an error message if all wordlists used.
002A0Ar 3  A9 0B                        lda #err_wordlist
002A0Cr 3  4C rr rr                     jmp error
002A0Fr 3               
002A0Fr 3               @ok:
002A0Fr 3  1A                           inc             ; Increment the wordlist#
002A10r 3  91 rr                        sta (up),y      ; Save it into byte variable #wordlists
002A12r 3  CA                           dex             ; and put it on the stack.
002A13r 3  CA                           dex
002A14r 3  95 00                        sta 0,x
002A16r 3  74 01                        stz 1,x         ; 12 is the max, so upper byte is always zero.
002A18r 3               
002A18r 3  60           z_wordlist:     rts
002A19r 3               
002A19r 3               
002A19r 3               
002A19r 3               ; ## WORDS ( -- ) "Print known words from Dictionary"
002A19r 3               ; ## "words"  tested  ANS tools
002A19r 3                       ; """https://forth-standard.org/standard/tools/WORDS
002A19r 3                       ; This is pretty much only used at the command line so we can
002A19r 3                       ; be slow and try to save space.
002A19r 3                       ; """
002A19r 3               
002A19r 3               xt_words:
002A19r 3                               ; we follow Gforth by starting on the next
002A19r 3                               ; line
002A19r 3  20 rr rr                     jsr xt_cr
002A1Cr 3               
002A1Cr 3                               ; We pretty-format the output by inserting a line break
002A1Cr 3                               ; before the end of the line. We can get away with pushing
002A1Cr 3                               ; the counter to the stack because this is usually an
002A1Cr 3                               ; interactive word and speed is not that important
002A1Cr 3  A9 00                        lda #0
002A1Er 3  48                           pha
002A1Fr 3               
002A1Fr 3                               ; Set up for traversing the wordlist search order.
002A1Fr 3  CA                           dex                     ; Make room on the stack for
002A20r 3  CA                           dex                     ; a dictionary pointer.
002A21r 3  64 rr                        stz tmp3                ; Start at the beginning of
002A23r 3                                                       ; the search order.
002A23r 3               @wordlist_loop:
002A23r 3  A0 1E                        ldy #num_order_offset   ; Check against byte variable #ORDER.
002A25r 3  A5 rr                        lda tmp3
002A27r 3  D1 rr                        cmp (up),y              ; See if we are done.
002A29r 3  D0 02                        bne @have_wordlist
002A2Br 3               
002A2Br 3                               ; We ran out of wordlists to search.
002A2Br 3  80 44                        bra @words_done
002A2Dr 3               
002A2Dr 3               @have_wordlist:
002A2Dr 3                               ; start with last word in Dictionary
002A2Dr 3                               ; Get the current wordlist id
002A2Dr 3  18                           clc                     ; Index into byte array SEARCH-ORDER.
002A2Er 3  69 1F                        adc #search_order_offset
002A30r 3  A8                           tay
002A31r 3  B1 rr                        lda (up),y              ; Get the index into array WORDLISTS
002A33r 3               
002A33r 3                               ; Get the DP for that wordlist.
002A33r 3  0A                           asl                     ; Turn offset into cells offset.
002A34r 3  18                           clc
002A35r 3  69 06                        adc #wordlists_offset
002A37r 3  A8                           tay
002A38r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
002A3Ar 3  95 00                        sta 0,x                 ; on the stack. ( nt )
002A3Cr 3  C8                           iny
002A3Dr 3  B1 rr                        lda (up),y
002A3Fr 3  95 01                        sta 1,x
002A41r 3               
002A41r 3               @loop:
002A41r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002A44r 3  20 rr rr                     jsr xt_name_to_string   ; ( nt addr u )
002A47r 3               
002A47r 3                               ; Insert line break if we're about to go past the end of the
002A47r 3                               ; line
002A47r 3  68                           pla
002A48r 3  18                           clc
002A49r 3  75 00                        adc 0,x
002A4Br 3  1A                           inc                     ; don't forget the space between words
002A4Cr 3  C9 4F                        cmp #MAX_LINE_LENGTH    ; usually 79
002A4Er 3  90 05                        bcc @1
002A50r 3               
002A50r 3  20 rr rr                     jsr xt_cr
002A53r 3  A9 00                        lda #0
002A55r 3               @1:
002A55r 3  48                           pha
002A56r 3  20 rr rr                     jsr xt_type             ; ( nt )
002A59r 3               
002A59r 3  A9 20                        lda #AscSP
002A5Br 3  20 rr rr                     jsr emit_a
002A5Er 3               
002A5Er 3                               ; get next word, which begins two down
002A5Er 3  20 rr rr                     jsr xt_one_plus         ; 1+
002A61r 3  20 rr rr                     jsr xt_one_plus         ; 1+
002A64r 3  20 rr rr                     jsr xt_fetch            ; @ ( nt+1 )
002A67r 3               
002A67r 3                               ; if next address is zero, we're done
002A67r 3  B5 00                        lda 0,x
002A69r 3  15 01                        ora 1,x
002A6Br 3  D0 D4                        bne @loop
002A6Dr 3               
002A6Dr 3                               ; Move on to the next wordlist in the search order.
002A6Dr 3  E6 rr                        inc tmp3
002A6Fr 3  80 B2                        bra @wordlist_loop
002A71r 3               
002A71r 3               @words_done:
002A71r 3  68                           pla                     ; dump counter
002A72r 3               
002A72r 3  E8                           inx
002A73r 3  E8                           inx
002A74r 3               
002A74r 3  60           z_words:        rts
002A75r 3               
002A75r 3               
002A75r 3               
002A75r 3               ; ## WORDSIZE ( nt -- u ) "Get size of word in bytes"
002A75r 3               ; ## "wordsize"  auto  Tali Forth
002A75r 3                       ; """Given an word's name token (nt), return the size of the
002A75r 3                       ; word's payload size in bytes (CFA plus PFA) in bytes. Does not
002A75r 3                       ; count the final RTS.
002A75r 3                       ; """
002A75r 3               xt_wordsize:
002A75r 3  20 rr rr                     jsr underflow_1
002A78r 3               
002A78r 3                               ; We get the start address of the word from its header entry
002A78r 3                               ; for the start of the actual code (execution token, xt)
002A78r 3                               ; which is four bytes down, and the pointer to the end of the
002A78r 3                               ; code (z_word, six bytes down)
002A78r 3  B5 00                        lda 0,x
002A7Ar 3  85 rr                        sta tmp1
002A7Cr 3  B5 01                        lda 1,x
002A7Er 3  85 rr                        sta tmp1+1
002A80r 3               
002A80r 3  A0 06                        ldy #6
002A82r 3  B1 rr                        lda (tmp1),y    ; LSB of z
002A84r 3  88                           dey
002A85r 3  88                           dey
002A86r 3               
002A86r 3  38                           sec
002A87r 3  F1 rr                        sbc (tmp1),y    ; LSB of xt
002A89r 3  95 00                        sta 0,x
002A8Br 3               
002A8Br 3  A0 07                        ldy #7
002A8Dr 3  B1 rr                        lda (tmp1),y    ; MSB of z
002A8Fr 3  88                           dey
002A90r 3  88                           dey
002A91r 3               
002A91r 3  F1 rr                        sbc (tmp1),y    ; MSB of xt
002A93r 3  95 01                        sta 1,x
002A95r 3               
002A95r 3  60           z_wordsize:     rts
002A96r 3               
002A96r 3               
002A96r 3               ; ## XOR ( n n -- n ) "Logically XOR TOS and NOS"
002A96r 3               ; ## "xor"  auto  ANS core
002A96r 3                       ; """https://forth-standard.org/standard/core/XOR"""
002A96r 3               xt_xor:
002A96r 3  20 rr rr                     jsr underflow_2
002A99r 3               
002A99r 3  B5 00                        lda 0,x
002A9Br 3  55 02                        eor 2,x
002A9Dr 3  95 02                        sta 2,x
002A9Fr 3               
002A9Fr 3  B5 01                        lda 1,x
002AA1r 3  55 03                        eor 3,x
002AA3r 3  95 03                        sta 3,x
002AA5r 3               
002AA5r 3  E8                           inx
002AA6r 3  E8                           inx
002AA7r 3               
002AA7r 3  60           z_xor:          rts
002AA8r 3               
002AA8r 3               
002AA8r 3               ; ## ZERO ( -- 0 ) "Push 0 to Data Stack"
002AA8r 3               ; ## "0"  auto  Tali Forth
002AA8r 3                       ; """The disassembler assumes that this routine does not use Y. Note
002AA8r 3                       ; that CASE and FORTH-WORDLIST use the same routine, as the WD for Forth
002AA8r 3                       ; is 0."""
002AA8r 3               xt_case:
002AA8r 3               xt_forth_wordlist:
002AA8r 3               xt_zero:
002AA8r 3  CA                           dex             ; push
002AA9r 3  CA                           dex
002AAAr 3  74 00                        stz 0,x
002AACr 3  74 01                        stz 1,x
002AAEr 3               z_case:
002AAEr 3               z_forth_wordlist:
002AAEr 3               z_zero:
002AAEr 3  60                           rts
002AAFr 3               
002AAFr 3               
002AAFr 3               ; ## ZERO_EQUAL ( n -- f ) "Check if TOS is zero"
002AAFr 3               ; ## "0="  auto  ANS core
002AAFr 3                       ; """https://forth-standard.org/standard/core/ZeroEqual"""
002AAFr 3               
002AAFr 3               xt_zero_equal:
002AAFr 3  20 rr rr                     jsr underflow_1
002AB2r 3               
002AB2r 3  B5 00                        lda 0,x
002AB4r 3  15 01                        ora 1,x
002AB6r 3  F0 04                        beq @zero
002AB8r 3               
002AB8r 3                               ; not a zero, so we need a FALSE flag (0)
002AB8r 3  A9 00                        lda #0
002ABAr 3  80 02                        bra @store
002ABCr 3               @zero:
002ABCr 3                               ; We have a zero, so we need a TRUE flag (-1)
002ABCr 3  A9 FF                        lda #$ff
002ABEr 3               @store:
002ABEr 3  95 00                        sta 0,x
002AC0r 3  95 01                        sta 1,x
002AC2r 3               
002AC2r 3  60           z_zero_equal:   rts
002AC3r 3               
002AC3r 3               
002AC3r 3               
002AC3r 3               ; ## ZERO_GREATER ( n -- f ) "Return a TRUE flag if TOS is positive"
002AC3r 3               ; ## "0>"  auto  ANS core ext
002AC3r 3                       ; """https://forth-standard.org/standard/core/Zeromore"""
002AC3r 3               
002AC3r 3               xt_zero_greater:
002AC3r 3  20 rr rr                     jsr underflow_1
002AC6r 3               
002AC6r 3  A0 00                        ldy #0          ; Default is FALSE (TOS is negative)
002AC8r 3               
002AC8r 3  B5 01                        lda 1,x         ; MSB
002ACAr 3  30 05                        bmi @done       ; TOS is negative, keep FLASE
002ACCr 3  15 00                        ora 0,x
002ACEr 3  F0 01                        beq @done       ; TOS is zero, keep FALSE
002AD0r 3               
002AD0r 3  88                           dey             ; TOS is postive, make true
002AD1r 3               @done:
002AD1r 3  98                           tya
002AD2r 3  95 00                        sta 0,x
002AD4r 3  95 01                        sta 1,x
002AD6r 3               
002AD6r 3  60           z_zero_greater: rts
002AD7r 3               
002AD7r 3               
002AD7r 3               
002AD7r 3               ; ## ZERO_LESS ( n -- f ) "Return a TRUE flag if TOS negative"
002AD7r 3               ; ## "0<"  auto  ANS core
002AD7r 3                       ; """https://forth-standard.org/standard/core/Zeroless"""
002AD7r 3               
002AD7r 3               xt_zero_less:
002AD7r 3  20 rr rr                     jsr underflow_1
002ADAr 3               
002ADAr 3  A0 00                        ldy #0          ; Default is FALSE (TOS positive)
002ADCr 3               
002ADCr 3  B5 01                        lda 1,x         ; MSB
002ADEr 3  10 01                        bpl @done       ; TOS is positive, so keep FALSE
002AE0r 3               
002AE0r 3  88                           dey             ; TOS is negative, make TRUE
002AE1r 3               @done:
002AE1r 3  98                           tya
002AE2r 3  95 00                        sta 0,x
002AE4r 3  95 01                        sta 1,x
002AE6r 3               
002AE6r 3  60           z_zero_less:    rts
002AE7r 3               
002AE7r 3               
002AE7r 3               
002AE7r 3               ; ## ZERO_UNEQUAL ( m -- f ) "Return TRUE flag if not zero"
002AE7r 3               ; ## "0<>"  auto  ANS core ext
002AE7r 3                       ; """https://forth-standard.org/standard/core/Zerone"""
002AE7r 3               
002AE7r 3               xt_zero_unequal:
002AE7r 3  20 rr rr                     jsr underflow_1
002AEAr 3               
002AEAr 3  A0 00                        ldy #0          ; default false
002AECr 3               
002AECr 3  B5 00                        lda 0,x
002AEEr 3  15 01                        ora 1,x
002AF0r 3  F0 01                        beq @got_zero
002AF2r 3               
002AF2r 3  88                           dey
002AF3r 3               @got_zero:
002AF3r 3  98                           tya
002AF4r 3  95 00                        sta 0,x
002AF6r 3  95 01                        sta 1,x
002AF8r 3               
002AF8r 3  60           z_zero_unequal: rts
002AF9r 3               
002AF9r 3               
002AF9r 3               
002AF9r 3               ; ==========================================================
002AF9r 3               ; EDITOR words
002AF9r 3               
002AF9r 3               ; This routine is used by both enter-screen and erase-screen
002AF9r 3               ; to get a buffer for the given screen number and set SCR to
002AF9r 3               ; the given screen number.  This word is not in the dictionary.
002AF9r 3               xt_editor_screen_helper:
002AF9r 3  20 rr rr                     jsr xt_dup
002AFCr 3  20 rr rr                     jsr xt_scr
002AFFr 3  20 rr rr                     jsr xt_store
002B02r 3  20 rr rr                     jsr xt_buffer
002B05r 3               z_editor_screen_helper:
002B05r 3  60                           rts
002B06r 3               
002B06r 3               
002B06r 3               ; ## EDITOR_ENTER_SCREEN ( scr# -- ) "Enter all lines for given screen"
002B06r 3               ; ## "enter-screen"  auto  Tali Editor
002B06r 3               
002B06r 3               xt_editor_enter_screen:
002B06r 3                               ; Set the variable SCR and get a buffer for the
002B06r 3                               ; given screen number.
002B06r 3  20 rr rr                     jsr xt_editor_screen_helper
002B09r 3               
002B09r 3                               ; Drop the buffer address.
002B09r 3  20 rr rr                     jsr xt_drop
002B0Cr 3               
002B0Cr 3                               ; Overwrite the lines one at a time.
002B0Cr 3  64 rr                        stz editor1
002B0Er 3               @prompt_loop:
002B0Er 3                               ; Put the current line number on the stack.
002B0Er 3  CA                           dex
002B0Fr 3  CA                           dex
002B10r 3  A5 rr                        lda editor1
002B12r 3  95 00                        sta 0,x
002B14r 3  74 01                        stz 1,x
002B16r 3               
002B16r 3                               ; Use the O word to prompt for overwrite.
002B16r 3  20 rr rr                     jsr xt_editor_o
002B19r 3               
002B19r 3                               ; Move on to the next line.
002B19r 3  E6 rr                        inc editor1
002B1Br 3  A9 10                        lda #16
002B1Dr 3  C5 rr                        cmp editor1
002B1Fr 3  D0 ED                        bne @prompt_loop
002B21r 3               
002B21r 3               z_editor_enter_screen:
002B21r 3  60                           rts
002B22r 3               
002B22r 3               
002B22r 3               
002B22r 3               ; ## EDITOR_ERASE_SCREEN ( scr# -- ) "Erase all lines for given screen"
002B22r 3               ; ## "erase-screen"  tested  Tali Editor
002B22r 3               xt_editor_erase_screen:
002B22r 3                               ; Set the variable SCR and get a buffer for the
002B22r 3                               ; given screen number.
002B22r 3  20 rr rr                     jsr xt_editor_screen_helper
002B25r 3               
002B25r 3                               ; Put 1024 (chars/screen) on stack.
002B25r 3  CA                           dex
002B26r 3  CA                           dex
002B27r 3  74 00                        stz 0,x
002B29r 3  A9 04                        lda #4          ; 4 in MSB makes 1024 ($400).
002B2Br 3  95 01                        sta 1,x
002B2Dr 3               
002B2Dr 3                               ; Erase the entire block (fill with spaces).
002B2Dr 3  20 rr rr                     jsr xt_blank
002B30r 3               
002B30r 3                               ; Mark buffer as updated.
002B30r 3  20 rr rr                     jsr xt_update
002B33r 3               
002B33r 3               z_editor_erase_screen:
002B33r 3  60                           rts
002B34r 3               
002B34r 3               
002B34r 3               ; ## EDITOR_EL ( line# -- ) "Erase the given line number"
002B34r 3               ; ## "el"  tested  Tali Editor
002B34r 3               xt_editor_el:
002B34r 3                               ; Turn the line number into buffer offset.
002B34r 3                               ; This also loads the block into the buffer if it's
002B34r 3                               ; not there for some reason.
002B34r 3  20 rr rr                     jsr xt_editor_line
002B37r 3               
002B37r 3                               ; Put 64 (# of chars/line) on the stack.
002B37r 3  CA                           dex
002B38r 3  CA                           dex
002B39r 3  A9 40                        lda #64
002B3Br 3  95 00                        sta 0,x
002B3Dr 3  74 01                        stz 1,x
002B3Fr 3               
002B3Fr 3                               ; Fill with spaces.
002B3Fr 3  20 rr rr                     jsr xt_blank
002B42r 3               
002B42r 3                               ; Mark buffer as updated.
002B42r 3  20 rr rr                     jsr xt_update
002B45r 3               
002B45r 3  60           z_editor_el:    rts
002B46r 3               
002B46r 3               
002B46r 3               ; ## EDITOR_L ( -- ) "List the current screen"
002B46r 3               ; ## "l"  tested  Tali Editor
002B46r 3               
002B46r 3               xt_editor_l:
002B46r 3                               ; Load the current screen
002B46r 3  CA                           dex             ; Put SCR on the stack.
002B47r 3  CA                           dex
002B48r 3  A0 02                        ldy #scr_offset
002B4Ar 3  B1 rr                        lda (up),y
002B4Cr 3  95 00                        sta 0,x
002B4Er 3  C8                           iny
002B4Fr 3  B1 rr                        lda (up),y
002B51r 3  95 01                        sta 1,x
002B53r 3  20 rr rr                     jsr xt_block    ; Get the current screen.
002B56r 3               
002B56r 3  20 rr rr                     jsr xt_cr
002B59r 3               
002B59r 3                               ; Print the screen number.
002B59r 3                               ; We're using sliteral, so we need to set up the
002B59r 3                               ; appropriate data structure (see sliteral)
002B59r 3  80 08                        bra @after_screen_msg
002B5Br 3               
002B5Br 3               @screen_msg:
002B5Br 3  53 63 72 65                  .byte "Screen #"
002B5Fr 3  65 6E 20 23  
002B63r 3               
002B63r 3               @after_screen_msg:
002B63r 3  20 rr rr                     jsr sliteral_runtime
002B66r 3  rr rr 08 00                  .word @screen_msg, @after_screen_msg-@screen_msg
002B6Ar 3               
002B6Ar 3  20 rr rr                     jsr xt_type
002B6Dr 3               
002B6Dr 3                               ; Put the screen number and printed size for u.r on the stack.
002B6Dr 3  20 rr rr                     jsr xt_scr
002B70r 3  20 rr rr                     jsr xt_fetch
002B73r 3  CA                           dex
002B74r 3  CA                           dex
002B75r 3  A9 04                        lda #4          ; four spaces
002B77r 3  95 00                        sta 0,x
002B79r 3  74 01                        stz 1,x
002B7Br 3  20 rr rr                     jsr xt_u_dot_r
002B7Er 3               
002B7Er 3                               ; The address of the buffer is currently on the stack.
002B7Er 3                               ; Print 64 chars at a time. TYPE uses tmp1, so we'll
002B7Er 3                               ; keep track of the line number in tmp3.
002B7Er 3  64 rr                        stz tmp3
002B80r 3               
002B80r 3               @line_loop:
002B80r 3  20 rr rr                     jsr xt_cr
002B83r 3               
002B83r 3                               ; Print the line number (2-space fixed width)
002B83r 3  CA                           dex
002B84r 3  CA                           dex
002B85r 3  CA                           dex
002B86r 3  CA                           dex
002B87r 3  74 03                        stz 3,x
002B89r 3  A5 rr                        lda tmp3
002B8Br 3  95 02                        sta 2,x
002B8Dr 3  74 01                        stz 1,x
002B8Fr 3  A9 02                        lda #2
002B91r 3  95 00                        sta 0,x
002B93r 3  20 rr rr                     jsr xt_u_dot_r
002B96r 3  20 rr rr                     jsr xt_space
002B99r 3               
002B99r 3                               ; Print one line using the address on the stack.
002B99r 3  20 rr rr                     jsr xt_dup
002B9Cr 3  CA                           dex
002B9Dr 3  CA                           dex
002B9Er 3  A9 40                        lda #64
002BA0r 3  95 00                        sta 0,x
002BA2r 3  74 01                        stz 1,x
002BA4r 3  20 rr rr                     jsr xt_type
002BA7r 3               
002BA7r 3                               ; Add 64 to the address on the stack to move to the next line.
002BA7r 3  18                           clc
002BA8r 3  A9 40                        lda #64
002BAAr 3  75 00                        adc 0,x
002BACr 3  95 00                        sta 0,x
002BAEr 3  B5 01                        lda 1,x
002BB0r 3  69 00                        adc #0      ; Add carry
002BB2r 3  95 01                        sta 1,x
002BB4r 3               
002BB4r 3                               ; Increment the line number (held in tmp3)
002BB4r 3  E6 rr                        inc tmp3
002BB6r 3               
002BB6r 3                               ; See if we are done.
002BB6r 3  A5 rr                        lda tmp3
002BB8r 3  C9 10                        cmp #16
002BBAr 3  D0 C4                        bne @line_loop
002BBCr 3               
002BBCr 3  20 rr rr                     jsr xt_cr
002BBFr 3                               ; Drop the address on the stack.
002BBFr 3  E8                           inx
002BC0r 3  E8                           inx
002BC1r 3               
002BC1r 3  60           z_editor_l:            rts
002BC2r 3               
002BC2r 3               
002BC2r 3               
002BC2r 3               ; ## EDITOR_LINE ( line# -- c-addr ) "Turn a line number into address in current screen"
002BC2r 3               ; ## "line"  tested  Tali Editor
002BC2r 3               
002BC2r 3               xt_editor_line:
002BC2r 3  20 rr rr                     jsr underflow_1
002BC5r 3               
002BC5r 3                               ; Multiply the TOS by 64 (chars/line) to compute offset.
002BC5r 3  A0 06                        ldy #6          ; *64 is same as left shift 6 times.
002BC7r 3               @shift_tos_left:
002BC7r 3  16 00                        asl 0,x         ; Shift TOS to the left
002BC9r 3  36 01                        rol 1,x         ; ROL brings MSb from lower byte.
002BCBr 3  88                           dey
002BCCr 3  D0 F9                        bne @shift_tos_left
002BCEr 3                               ; Load the current screen into a buffer
002BCEr 3                               ; and get the buffer address
002BCEr 3  20 rr rr                     jsr xt_scr
002BD1r 3  20 rr rr                     jsr xt_fetch
002BD4r 3  20 rr rr                     jsr xt_block
002BD7r 3               
002BD7r 3                               ; Add the offset to the buffer base address.
002BD7r 3  20 rr rr                     jsr xt_plus
002BDAr 3               
002BDAr 3  60           z_editor_line:  rts
002BDBr 3               
002BDBr 3               
002BDBr 3               
002BDBr 3               ; ## EDITOR_O ( line# -- ) "Overwrite the given line"
002BDBr 3               ; ## "o"  tested  Tali Editor
002BDBr 3               xt_editor_o:
002BDBr 3                               ; Print prompt
002BDBr 3  20 rr rr                     jsr xt_cr
002BDEr 3  20 rr rr                     jsr xt_dup
002BE1r 3  20 rr rr                     jsr xt_two
002BE4r 3  20 rr rr                     jsr xt_u_dot_r
002BE7r 3  20 rr rr                     jsr xt_space
002BEAr 3  A9 2A                        lda #42         ; ASCII for *
002BECr 3  20 rr rr                     jsr emit_a
002BEFr 3  20 rr rr                     jsr xt_space
002BF2r 3               
002BF2r 3                               ; Accept new input (directly into the buffer)
002BF2r 3  20 rr rr                     jsr xt_editor_line
002BF5r 3  20 rr rr                     jsr xt_dup      ; Save a copy of the line address for later.
002BF8r 3  CA                           dex
002BF9r 3  CA                           dex
002BFAr 3  A9 40                        lda #64         ; chars/line
002BFCr 3  95 00                        sta 0,x
002BFEr 3  74 01                        stz 1,x
002C00r 3  20 rr rr                     jsr xt_accept
002C03r 3               
002C03r 3                               ; Fill the rest with spaces.
002C03r 3                               ; Stack is currently ( line_address numchars_from_accept )
002C03r 3  20 rr rr                     jsr xt_dup
002C06r 3  20 rr rr                     jsr xt_not_rote ; -rot
002C09r 3  20 rr rr                     jsr xt_plus
002C0Cr 3  CA                           dex
002C0Dr 3  CA                           dex
002C0Er 3  A9 40                        lda #64         ; chars/line
002C10r 3  95 00                        sta 0,x
002C12r 3  74 01                        stz 1,x
002C14r 3  20 rr rr                     jsr xt_rot
002C17r 3  20 rr rr                     jsr xt_minus
002C1Ar 3  20 rr rr                     jsr xt_blank
002C1Dr 3               
002C1Dr 3                               ; Mark buffer as updated.
002C1Dr 3  20 rr rr                     jsr xt_update
002C20r 3               
002C20r 3  60           z_editor_o:     rts
002C21r 3               
002C21r 3               ; ## LCDPUT ( s -- ) "Print single character to LCD"
002C21r 3               ; ## "lcdput" coded Custom
002C21r 3               xt_lcdput:
002C21r 3  20 rr rr                     jsr underflow_1
002C24r 3               
002C24r 3  B5 00                        lda 0,x
002C26r 3                       .ifdef lcd_print
002C26r 3                               jsr lcd_print
002C26r 3                       .endif
002C26r 3  E8                           inx
002C27r 3  E8                           inx
002C28r 3  60           z_lcdput: rts
002C29r 3               
002C29r 3               
002C29r 3               ; ## LCDPRINT ( addr u -- ) "Print string to LCD"
002C29r 3               ; ## "lcdprint"  coded Custom
002C29r 3               
002C29r 3               xt_lcdprint:
002C29r 3  20 rr rr                     jsr underflow_2
002C2Cr 3               
002C2Cr 3                               ; Save the starting address into tmp1
002C2Cr 3  B5 02                        lda 2,x
002C2Er 3  85 rr                        sta tmp1
002C30r 3  B5 03                        lda 3,x
002C32r 3  85 rr                        sta tmp1+1
002C34r 3               @loop:
002C34r 3                               ; done if length is zero
002C34r 3  B5 00                        lda 0,x
002C36r 3  15 01                        ora 1,x
002C38r 3  F0 12                        beq @done
002C3Ar 3               
002C3Ar 3                               ; Send the current character
002C3Ar 3  B2 rr                        lda (tmp1)
002C3Cr 3                       .ifdef lcd_print
002C3Cr 3                               jsr lcd_print      ; avoids stack foolery
002C3Cr 3                       .endif
002C3Cr 3                               ; Move the address along (in tmp1)
002C3Cr 3  E6 rr                        inc tmp1
002C3Er 3  D0 02                        bne @1
002C40r 3  E6 rr                        inc tmp1+1
002C42r 3               @1:
002C42r 3                               ; Reduce the count (on the data stack)
002C42r 3  B5 00                        lda 0,x
002C44r 3  D0 02                        bne @2
002C46r 3  D6 01                        dec 1,x
002C48r 3               @2:
002C48r 3  D6 00                        dec 0,x
002C4Ar 3               
002C4Ar 3  80 E8                        bra @loop
002C4Cr 3               @done:
002C4Cr 3  E8                           inx
002C4Dr 3  E8                           inx
002C4Er 3  E8                           inx
002C4Fr 3  E8                           inx
002C50r 3               
002C50r 3  60           z_lcdprint:         rts
002C51r 3               
002C51r 3               
002C51r 3               
002C51r 3               ; ## CLS ( -- ) "clea VGA screen"
002C51r 3               ; ## "cls" coded Custom
002C51r 3               xt_cls:
002C51r 3                       .ifdef vga_clear
002C51r 3                               jsr vga_clear
002C51r 3                       .endif
002C51r 3               
002C51r 3  60           z_cls: rts
002C52r 3               
002C52r 3               
002C52r 3               ; ## SPI_INIT ( -- ) "Init SPI system"
002C52r 3               ; ## "spi_init" coded Custom
002C52r 3               xt_spi_init:
002C52r 3               .ifdef VIA1_BASE
002C52r 3  20 rr rr                     jsr spi_init
002C55r 3               .endif
002C55r 3  60           z_spi_init: rts
002C56r 3               
002C56r 3               
002C56r 3               ; ## SPI_CLK_TOGGLE ( -- ) "Toggle SPI clock"
002C56r 3               ; ## "spi_clk_toggle" coded Custom
002C56r 3               xt_spi_clk_toggle:
002C56r 3               .ifdef VIA1_BASE
002C56r 3  20 rr rr                     jsr spi_clk_toggle
002C59r 3               .endif
002C59r 3  60           z_spi_clk_toggle: rts
002C5Ar 3               
002C5Ar 3               ; ## SPI_SELECT ( s -- ) "Select SPI slave"
002C5Ar 3               ; ## "spi_select" coded Custom
002C5Ar 3               xt_spi_select:
002C5Ar 3               .ifdef VIA1_BASE
002C5Ar 3  20 rr rr                     jsr underflow_1
002C5Dr 3               
002C5Dr 3  B5 00                        lda 0,x
002C5Fr 3               
002C5Fr 3  20 rr rr                     jsr spi_select
002C62r 3               
002C62r 3  E8                           inx
002C63r 3  E8                           inx
002C64r 3               .endif
002C64r 3  60           z_spi_select: rts
002C65r 3               
002C65r 3               ; ## SPI_TRANSCEIVE ( s -- u ) "Send and receive spi data"
002C65r 3               ; ## "spi_transceive" coded Custom
002C65r 3               xt_spi_transceive:
002C65r 3               .ifdef VIA1_BASE
002C65r 3  20 rr rr                     jsr underflow_1
002C68r 3               
002C68r 3  B5 00                        lda 0,x
002C6Ar 3               
002C6Ar 3  20 rr rr                     jsr spi_transceive
002C6Dr 3               
002C6Dr 3  95 00                        sta 0,x         ; put return value in TOS
002C6Fr 3  74 01                        stz 1,X         ;reset value there
002C71r 3               .endif
002C71r 3  60           z_spi_transceive: rts
002C72r 3               
002C72r 3               ; ## SD_INIT ( s -- u ) "Send and receive spi data"
002C72r 3               ; ## "sd_init" coded Custom
002C72r 3               xt_sd_init:
002C72r 3               .ifdef SD
002C72r 3                               jsr underflow_1
002C72r 3               
002C72r 3                               lda 0,x
002C72r 3                               jsr sd_init
002C72r 3                               beq @ok
002C72r 3                               pha
002C72r 3                               printascii sd_init_error_message
002C72r 3                               pla
002C72r 3               @ok:
002C72r 3                               sta 0,x         ; put return value in TOS
002C72r 3                               stz 1,X         ;reset value there
002C72r 3               .endif
002C72r 3  60           z_sd_init: rts
002C73r 3               
002C73r 3               ; ## SD_READSECTOR ( addr d -- u ) "Read SD sector"
002C73r 3               ; ## "sd_readsector" coded Custom
002C73r 3               xt_sd_readsector:
002C73r 3               
002C73r 3               .ifdef SD
002C73r 3                               jsr underflow_2
002C73r 3                               ; get and save sector number (32 bit number, double)
002C73r 3                               ; most significant part is TOS
002C73r 3                               lda 0, x
002C73r 3                               sta IO_SECTOR + 2
002C73r 3                               lda 1, x
002C73r 3                               sta IO_SECTOR + 3
002C73r 3                               ; least significant part is NOS
002C73r 3                               lda 2, x
002C73r 3                               sta IO_SECTOR + 0
002C73r 3                               lda 3, x
002C73r 3                               sta IO_SECTOR + 1
002C73r 3                               lda #1
002C73r 3                               sta SD_CRC
002C73r 3               
002C73r 3                               jsr sd_readsector
002C73r 3                               sta 0,x         ; put return value in TOS
002C73r 3                               stz 1,X         ;reset value there
002C73r 3               
002C73r 3                               inx
002C73r 3                               inx
002C73r 3               .endif
002C73r 3  60           z_sd_readsector: rts
002C74r 3               
002C74r 3               
002C74r 3               ; ## time ( -- addr ) "get time storage address"
002C74r 3               ; ## "time" coded Custom
002C74r 3               xt_time:
002C74r 3                       .ifdef time
002C74r 3  A9 rr                lda #time
002C76r 3                       .else
002C76r 3                       lda #0
002C76r 3                       .endif
002C76r 3  CA                   dex
002C77r 3  CA                   dex
002C78r 3  95 00                sta 0,x
002C7Ar 3  74 01                stz 1,x
002C7Cr 3               
002C7Cr 3               
002C7Cr 3  60           z_time: rts
002C7Dr 3               
002C7Dr 3               
002C7Dr 3               xt_cf_info:
002C7Dr 3               .ifdef CF_ADDRESS
002C7Dr 3  20 rr rr             jsr cf_info
002C80r 3  20 rr rr             jsr xt_cr
002C83r 3  20 rr rr             jsr cf_print_id
002C86r 3  20 rr rr             jsr cf_print_capacity
002C89r 3               .endif
002C89r 3               z_cf_info:
002C89r 3  60                   rts
002C8Ar 3               
002C8Ar 3               xt_io_readblock:
002C8Ar 3               .ifdef io_read_sector_address
002C8Ar 3                       ; block-read ( addr blk# -- )
002C8Ar 3  B5 02                lda 2, x
002C8Cr 3  85 rr                sta io_buffer_ptr
002C8Er 3  B5 03                lda 3, x
002C90r 3  85 rr                sta io_buffer_ptr + 1
002C92r 3  B5 00                lda 0, x
002C94r 3  8D rr rr             sta IO_SECTOR
002C97r 3  B5 01                lda 1, x
002C99r 3  8D rr rr             sta IO_SECTOR + 1
002C9Cr 3  9C rr rr             stz IO_SECTOR + 2
002C9Fr 3  9C rr rr             stz IO_SECTOR + 3
002CA2r 3               
002CA2r 3  0E rr rr             asl IO_SECTOR                   ; multiply by two to get first sector number
002CA5r 3  2E rr rr             rol IO_SECTOR + 1
002CA8r 3  2E rr rr             rol IO_SECTOR + 2
002CABr 3               
002CABr 3                       ; lda io_buffer_ptr
002CABr 3                       ; sta 0, x
002CABr 3                       ; lda io_buffer_ptr + 1
002CABr 3                       ; sta 1, x
002CABr 3                       ; jsr xt_dot
002CABr 3               
002CABr 3  20 rr rr             jsr io_read_sector
002CAEr 3  EE rr rr D0          inc32 IO_SECTOR
002CB2r 3  0D EE rr rr  
002CB6r 3  D0 08 EE rr  
002CC0r 3  E6 rr                inc io_buffer_ptr + 1
002CC2r 3  E6 rr                inc io_buffer_ptr + 1
002CC4r 3  20 rr rr             jsr io_read_sector
002CC7r 3                       ; lda io_buffer_ptr
002CC7r 3                       ; sta 0, x
002CC7r 3                       ; lda io_buffer_ptr + 1
002CC7r 3                       ; sta 1, x
002CC7r 3                       ; jsr xt_dot
002CC7r 3               
002CC7r 3  E8                   inx
002CC8r 3  E8                   inx
002CC9r 3               
002CC9r 3               .endif
002CC9r 3               z_io_readblock:
002CC9r 3  60                   rts
002CCAr 3               
002CCAr 3               xt_io_writeblock:
002CCAr 3               .ifdef io_read_sector_address
002CCAr 3                       ; block-write ( addr blk# -- )
002CCAr 3  B5 02                lda 2, x
002CCCr 3  85 rr                sta io_buffer_ptr
002CCEr 3  B5 03                lda 3, x
002CD0r 3  85 rr                sta io_buffer_ptr + 1
002CD2r 3  B5 00                lda 0, x
002CD4r 3  8D rr rr             sta IO_SECTOR
002CD7r 3  B5 01                lda 1, x
002CD9r 3  8D rr rr             sta IO_SECTOR + 1
002CDCr 3  9C rr rr             stz IO_SECTOR + 2
002CDFr 3  9C rr rr             stz IO_SECTOR + 3
002CE2r 3               
002CE2r 3  0E rr rr             asl IO_SECTOR                   ; multiply by two to get first sector number
002CE5r 3  2E rr rr             rol IO_SECTOR + 1
002CE8r 3  2E rr rr             rol IO_SECTOR + 2
002CEBr 3               
002CEBr 3  20 rr rr             jsr io_write_sector
002CEEr 3  EE rr rr D0          inc32 IO_SECTOR
002CF2r 3  0D EE rr rr  
002CF6r 3  D0 08 EE rr  
002D00r 3  E6 rr                inc io_buffer_ptr + 1
002D02r 3  E6 rr                inc io_buffer_ptr + 1
002D04r 3  20 rr rr             jsr io_write_sector
002D07r 3               
002D07r 3               
002D07r 3                       ; inc io_buffer_ptr + 1           ; jump two pages forward
002D07r 3                       ; inc io_buffer_ptr + 1
002D07r 3                       ; jsr io_write_sector
002D07r 3  E8                   inx
002D08r 3  E8                   inx
002D09r 3                       ; inx
002D09r 3                       ; inx
002D09r 3               .endif
002D09r 3               z_io_writeblock:
002D09r 3  60                   rts
002D0Ar 3               ; END
002D0Ar 3               
002D0Ar 3               
002D0Ar 2                   .include "headers.s"          ; Headers of native words
002D0Ar 3               ; Dictionary Headers for Tali Forth 2
002D0Ar 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
002D0Ar 3               ; First version: 05. Dec 2016 (Liara Forth)
002D0Ar 3               ; This version: 29. Dec 2018
002D0Ar 3               
002D0Ar 3               ; Dictionary headers are kept separately from the code, which allows various
002D0Ar 3               ; tricks in the code. We roughly follow the Gforth terminology: The Execution
002D0Ar 3               ; Token (xt) is the address of the first byte of a word's code that can be, uh,
002D0Ar 3               ; executed; the Name Token (nt) is a pointer to the beginning of the word's
002D0Ar 3               ; header in the Dictionary. There the link to the next word in the Dictionary
002D0Ar 3               ; is always one cell down from the current word's own nt. In the code itself,
002D0Ar 3               ; we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.
002D0Ar 3               
002D0Ar 3               ; This gives us the following header structure:
002D0Ar 3               
002D0Ar 3               ;              8 bit     8 bit
002D0Ar 3               ;               LSB       MSB
002D0Ar 3               ; nt_word ->  +--------+--------+
002D0Ar 3               ;          +0 | Length | Status |
002D0Ar 3               ;             +--------+--------+
002D0Ar 3               ;          +2 | Next Header     | -> nt_next_word
002D0Ar 3               ;             +-----------------+
002D0Ar 3               ;          +4 | Start of Code   | -> xt_word
002D0Ar 3               ;             +-----------------+
002D0Ar 3               ;          +6 | End of Code     | -> z_word
002D0Ar 3               ;             +--------+--------+
002D0Ar 3               ;          +8 | Name   |        |
002D0Ar 3               ;             +--------+--------+
002D0Ar 3               ;             |        |        |
002D0Ar 3               ;             +--------+--------+
002D0Ar 3               ;             |        |  ...   | (name string does not end with a zero)
002D0Ar 3               ;          +n +--------+--------+
002D0Ar 3               
002D0Ar 3               ; The Status Byte is created by adding the flags defined in definitions.asm,
002D0Ar 3               ; which are:
002D0Ar 3               
002D0Ar 3               ;       CO - Compile Only
002D0Ar 3               ;       IM - Immediate Word
002D0Ar 3               ;       NN - Never Native Compile (must always be called by JSR)
002D0Ar 3               ;       AN - Always Native Compile (may not be called by JSR)
002D0Ar 3               ;       UF - Contains underflow check
002D0Ar 3               ;       HC - Has CFA (words created by CREATE and DOES> only)
002D0Ar 3               
002D0Ar 3               ; Note there are currently two bits unused.
002D0Ar 3               
002D0Ar 3               ; By default, all existing words can be natively compiled (compiled inline) or
002D0Ar 3               ; as a subroutine jump target; the system decides which variant to use based on
002D0Ar 3               ; a threshold the user can set. By default, all user-created words are flagged
002D0Ar 3               ; never-native. The user can override this by using the always-native word
002D0Ar 3               ; just after defining their new word.  The NN flag forbids native compiling,
002D0Ar 3               ; the AN flag forces it.
002D0Ar 3               
002D0Ar 3               ; The last word (top word in code) is always BYE. It is marked as the last word
002D0Ar 3               ; by its value of 0000 in its Next Header field. The words are sorted with the
002D0Ar 3               ; more common ones first (further down in code) so they are found earlier.
002D0Ar 3               ; Anything to do with output comes later (further up) because things will
002D0Ar 3               ; always be slow if there is a human involved.
002D0Ar 3               
002D0Ar 3               ; The initial skeleton of this list was automatically generated by a script
002D0Ar 3               ; in the tools folder and then sorted by hand.
002D0Ar 3               
002D0Ar 3               nt_bye:
002D0Ar 3  03                   .byte 3         ; length of word strings
002D0Br 3  00                   .byte 0         ; status byte
002D0Cr 3  00 00                .word 0000      ; next word in Dictionary, 0000 signals end
002D0Er 3  rr rr                .word xt_bye    ; start of code block (xt of this word)
002D10r 3  rr rr                .word z_bye     ; end of code (RTS)
002D12r 3  62 79 65             .byte "bye"     ; word name, always lower case, not zero-terminated
002D15r 3               
002D15r 3               
002D15r 3               nt_cold:
002D15r 3  04 00                .byte 4, 0
002D17r 3  rr rr rr rr          .word nt_bye, xt_cold, z_cold
002D1Br 3  rr rr        
002D1Dr 3  63 6F 6C 64          .byte "cold"
002D21r 3               
002D21r 3               nt_lcdput:
002D21r 3  06 10                .byte 6, UF
002D23r 3  rr rr rr rr          .word nt_cold, xt_lcdput, z_lcdput
002D27r 3  rr rr        
002D29r 3  6C 63 64 70          .byte "lcdput"
002D2Dr 3  75 74        
002D2Fr 3               
002D2Fr 3               nt_lcdprint:
002D2Fr 3  08 10                .byte 8, UF
002D31r 3  rr rr rr rr          .word nt_lcdput, xt_lcdprint, z_lcdprint
002D35r 3  rr rr        
002D37r 3  6C 63 64 70          .byte "lcdprint"
002D3Br 3  72 69 6E 74  
002D3Fr 3               
002D3Fr 3               nt_cls:
002D3Fr 3  03 00                .byte 3, 0
002D41r 3  rr rr rr rr          .word nt_lcdprint, xt_cls, z_cls
002D45r 3  rr rr        
002D47r 3  63 6C 73             .byte "cls"
002D4Ar 3               
002D4Ar 3               .ifdef VIA1_BASE
002D4Ar 3               nt_spi_init:
002D4Ar 3  08 00                .byte 8, 0
002D4Cr 3  rr rr rr rr          .word nt_cls, xt_spi_init, z_spi_init
002D50r 3  rr rr        
002D52r 3  73 70 69 5F          .byte "spi_init"
002D56r 3  69 6E 69 74  
002D5Ar 3               
002D5Ar 3               
002D5Ar 3               nt_spi_clk_toggle:
002D5Ar 3  0E 00                .byte 14, 0
002D5Cr 3  rr rr rr rr          .word nt_spi_init, xt_spi_clk_toggle, z_spi_clk_toggle
002D60r 3  rr rr        
002D62r 3  73 70 69 5F          .byte "spi_clk_toggle"
002D66r 3  63 6C 6B 5F  
002D6Ar 3  74 6F 67 67  
002D70r 3               
002D70r 3               nt_spi_select:
002D70r 3  0A 00                .byte 10, 0
002D72r 3  rr rr rr rr          .word nt_spi_clk_toggle, xt_spi_select, z_spi_select
002D76r 3  rr rr        
002D78r 3  73 70 69 5F          .byte "spi_select"
002D7Cr 3  73 65 6C 65  
002D80r 3  63 74        
002D82r 3               
002D82r 3               nt_spi_transceive:
002D82r 3  0E 00                .byte 14, 0
002D84r 3  rr rr rr rr          .word nt_spi_select, xt_spi_transceive, z_spi_transceive
002D88r 3  rr rr        
002D8Ar 3  73 70 69 5F          .byte "spi_transceive"
002D8Er 3  74 72 61 6E  
002D92r 3  73 63 65 69  
002D98r 3               .endif
002D98r 3               
002D98r 3               
002D98r 3               .ifdef CF_ADDRESS
002D98r 3               nt_cf_info:
002D98r 3  04 00                .byte 4, 0
002D9Ar 3                       .ifdef VIA1_BASE
002D9Ar 3  rr rr rr rr          .word nt_spi_select, xt_cf_info, z_cf_info
002D9Er 3  rr rr        
002DA0r 3                       .else
002DA0r 3                       .word nt_cls, xt_cf_info, z_cf_info
002DA0r 3                       .endif
002DA0r 3  69 6E 66 6F          .byte "info"
002DA4r 3               .endif
002DA4r 3               .ifdef io_read_sector_address
002DA4r 3               nt_io_readblock:
002DA4r 3  02 00                .byte 2, 0
002DA6r 3                       .ifdef CF_ADDRESS
002DA6r 3  rr rr rr rr          .word nt_cf_info, xt_io_readblock, z_io_readblock
002DAAr 3  rr rr        
002DACr 3                       .elseif .def(VIA1_BASE)
002DACr 3                       .word nt_spi_transceive, xt_io_readblock, z_io_readblock
002DACr 3                       .else
002DACr 3                       .word nt_cls, xt_io_readblock, z_io_readblock
002DACr 3                       .endif
002DACr 3  72 62                .byte "rb"
002DAEr 3               nt_io_writeblock:
002DAEr 3  02 00                .byte 2, 0
002DB0r 3  rr rr rr rr          .word nt_io_readblock, xt_io_writeblock, z_io_writeblock
002DB4r 3  rr rr        
002DB6r 3  77 62                .byte "wb"
002DB8r 3               .endif
002DB8r 3               nt_time:
002DB8r 3  04 00                .byte 4, 0
002DBAr 3               .ifdef io_read_sector_address
002DBAr 3  rr rr rr rr          .word nt_io_writeblock, xt_time, z_time
002DBEr 3  rr rr        
002DC0r 3               .elseif .def(CF_ADDRESS)
002DC0r 3                       .word nt_cf_info, xt_time, z_time
002DC0r 3               .elseif .def(VIA1_BASE)
002DC0r 3                       .word nt_spi_transceive, xt_time, z_time
002DC0r 3               .else
002DC0r 3                       .word nt_cls, xt_time, z_time
002DC0r 3               .endif
002DC0r 3  74 69 6D 65          .byte "time"
002DC4r 3               
002DC4r 3               nt_ed:                  ; ed6502
002DC4r 3  02 08                .byte 2, NN
002DC6r 3  rr rr rr rr          .word nt_time, xt_ed, z_ed
002DCAr 3  rr rr        
002DCCr 3  65 64                .byte "ed"
002DCEr 3               
002DCEr 3  03 08        nt_see: .byte 3, NN
002DD0r 3  rr rr rr rr          .word nt_ed, xt_see, z_see
002DD4r 3  rr rr        
002DD6r 3  73 65 65             .byte "see"
002DD9r 3               
002DD9r 3               nt_forth:
002DD9r 3  05 00                .byte 5, 0
002DDBr 3  rr rr rr rr          .word nt_see, xt_forth, z_forth
002DDFr 3  rr rr        
002DE1r 3  66 6F 72 74          .byte "forth"
002DE5r 3  68           
002DE6r 3               
002DE6r 3               nt_order:
002DE6r 3  05 00                .byte 5, 0
002DE8r 3  rr rr rr rr          .word nt_forth, xt_order, z_order
002DECr 3  rr rr        
002DEEr 3  6F 72 64 65          .byte "order"
002DF2r 3  72           
002DF3r 3               
002DF3r 3               nt_to_order:
002DF3r 3  06 00                .byte 6, 0
002DF5r 3  rr rr rr rr          .word nt_order, xt_to_order, z_to_order
002DF9r 3  rr rr        
002DFBr 3  3E 6F 72 64          .byte ">order"
002DFFr 3  65 72        
002E01r 3               
002E01r 3               nt_previous:
002E01r 3  08 00                .byte 8, 0
002E03r 3  rr rr rr rr          .word nt_to_order, xt_previous, z_previous
002E07r 3  rr rr        
002E09r 3  70 72 65 76          .byte "previous"
002E0Dr 3  69 6F 75 73  
002E11r 3               
002E11r 3               nt_also:
002E11r 3  04 00                .byte 4, 0
002E13r 3  rr rr rr rr          .word nt_previous, xt_also, z_also
002E17r 3  rr rr        
002E19r 3  61 6C 73 6F          .byte "also"
002E1Dr 3               
002E1Dr 3               nt_only:
002E1Dr 3  04 00                .byte 4, 0
002E1Fr 3  rr rr rr rr          .word nt_also, xt_only, z_only
002E23r 3  rr rr        
002E25r 3  6F 6E 6C 79          .byte "only"
002E29r 3               
002E29r 3               nt_forth_wordlist:      ; shares code with ZERO
002E29r 3  0E 00                .byte 14, 0
002E2Br 3  rr rr rr rr          .word nt_only, xt_forth_wordlist, z_forth_wordlist
002E2Fr 3  rr rr        
002E31r 3  66 6F 72 74          .byte "forth-wordlist"
002E35r 3  68 2D 77 6F  
002E39r 3  72 64 6C 69  
002E3Fr 3               
002E3Fr 3               nt_editor_wordlist:     ; shares code with ONE
002E3Fr 3  0F 00                .byte 15, 0
002E41r 3  rr rr rr rr          .word nt_forth_wordlist, xt_editor_wordlist, z_editor_wordlist
002E45r 3  rr rr        
002E47r 3  65 64 69 74          .byte "editor-wordlist"
002E4Br 3  6F 72 2D 77  
002E4Fr 3  6F 72 64 6C  
002E56r 3               
002E56r 3               nt_assembler_wordlist:  ; shares code with TWO
002E56r 3  12 00                .byte 18, 0
002E58r 3  rr rr rr rr          .word nt_editor_wordlist, xt_assembler_wordlist, z_assembler_wordlist
002E5Cr 3  rr rr        
002E5Er 3  61 73 73 65          .byte "assembler-wordlist"
002E62r 3  6D 62 6C 65  
002E66r 3  72 2D 77 6F  
002E70r 3               
002E70r 3               nt_root_wordlist:
002E70r 3  0D 00                .byte 13, 0
002E72r 3  rr rr rr rr          .word nt_assembler_wordlist, xt_root_wordlist, z_root_wordlist
002E76r 3  rr rr        
002E78r 3  72 6F 6F 74          .byte "root-wordlist"
002E7Cr 3  2D 77 6F 72  
002E80r 3  64 6C 69 73  
002E85r 3               
002E85r 3               nt_get_order:
002E85r 3  09 00                .byte 9, 0
002E87r 3  rr rr rr rr          .word nt_root_wordlist, xt_get_order, z_get_order
002E8Br 3  rr rr        
002E8Dr 3  67 65 74 2D          .byte "get-order"
002E91r 3  6F 72 64 65  
002E95r 3  72           
002E96r 3               
002E96r 3               nt_set_order:
002E96r 3  09 00                .byte 9, 0
002E98r 3  rr rr rr rr          .word nt_get_order, xt_set_order, z_set_order
002E9Cr 3  rr rr        
002E9Er 3  73 65 74 2D          .byte "set-order"
002EA2r 3  6F 72 64 65  
002EA6r 3  72           
002EA7r 3               
002EA7r 3               nt_get_current:
002EA7r 3  0B 00                .byte 11, 0
002EA9r 3  rr rr rr rr          .word nt_set_order, xt_get_current, z_get_current
002EADr 3  rr rr        
002EAFr 3  67 65 74 2D          .byte "get-current"
002EB3r 3  63 75 72 72  
002EB7r 3  65 6E 74     
002EBAr 3               
002EBAr 3               nt_set_current:
002EBAr 3  0B 10                .byte 11, UF
002EBCr 3  rr rr rr rr          .word nt_get_current, xt_set_current, z_set_current
002EC0r 3  rr rr        
002EC2r 3  73 65 74 2D          .byte "set-current"
002EC6r 3  63 75 72 72  
002ECAr 3  65 6E 74     
002ECDr 3               
002ECDr 3               nt_search_wordlist:
002ECDr 3  0F 10                .byte 15, UF
002ECFr 3  rr rr rr rr          .word nt_set_current, xt_search_wordlist, z_search_wordlist
002ED3r 3  rr rr        
002ED5r 3  73 65 61 72          .byte "search-wordlist"
002ED9r 3  63 68 2D 77  
002EDDr 3  6F 72 64 6C  
002EE4r 3               
002EE4r 3               nt_wordlist:
002EE4r 3  08 00                .byte 8, 0
002EE6r 3  rr rr rr rr          .word nt_search_wordlist, xt_wordlist, z_wordlist
002EEAr 3  rr rr        
002EECr 3  77 6F 72 64          .byte "wordlist"
002EF0r 3  6C 69 73 74  
002EF4r 3               
002EF4r 3               nt_definitions:
002EF4r 3  0B 00                .byte 11, 0
002EF6r 3  rr rr rr rr          .word nt_wordlist, xt_definitions, z_definitions
002EFAr 3  rr rr        
002EFCr 3  64 65 66 69          .byte "definitions"
002F00r 3  6E 69 74 69  
002F04r 3  6F 6E 73     
002F07r 3               
002F07r 3               nt_block_ramdrive_init:
002F07r 3  13 10                .byte 19, UF
002F09r 3  rr rr rr rr          .word nt_definitions, xt_block_ramdrive_init, z_block_ramdrive_init
002F0Dr 3  rr rr        
002F0Fr 3  62 6C 6F 63          .byte "block-ramdrive-init"
002F13r 3  6B 2D 72 61  
002F17r 3  6D 64 72 69  
002F22r 3               
002F22r 3               nt_list:
002F22r 3  04 10                .byte 4, UF
002F24r 3  rr rr rr rr          .word nt_block_ramdrive_init, xt_list, z_list
002F28r 3  rr rr        
002F2Ar 3  6C 69 73 74          .byte "list"
002F2Er 3               
002F2Er 3               nt_thru:
002F2Er 3  04 10                .byte 4, UF
002F30r 3  rr rr rr rr          .word nt_list, xt_thru, z_thru
002F34r 3  rr rr        
002F36r 3  74 68 72 75          .byte "thru"
002F3Ar 3               
002F3Ar 3               nt_load:
002F3Ar 3  04 10                .byte 4, UF
002F3Cr 3  rr rr rr rr          .word nt_thru, xt_load, z_load
002F40r 3  rr rr        
002F42r 3  6C 6F 61 64          .byte "load"
002F46r 3               
002F46r 3               nt_flush:
002F46r 3  05 00                .byte 5, 0
002F48r 3  rr rr rr rr          .word nt_load, xt_flush, z_flush
002F4Cr 3  rr rr        
002F4Er 3  66 6C 75 73          .byte "flush"
002F52r 3  68           
002F53r 3               
002F53r 3               nt_empty_buffers:
002F53r 3  0D 00                .byte 13, 0
002F55r 3  rr rr rr rr          .word nt_flush, xt_empty_buffers, z_empty_buffers
002F59r 3  rr rr        
002F5Br 3  65 6D 70 74          .byte "empty-buffers"
002F5Fr 3  79 2D 62 75  
002F63r 3  66 66 65 72  
002F68r 3               
002F68r 3               nt_buffer:
002F68r 3  06 00                .byte 6, 0
002F6Ar 3  rr rr rr rr          .word nt_empty_buffers, xt_buffer, z_buffer
002F6Er 3  rr rr        
002F70r 3  62 75 66 66          .byte "buffer"
002F74r 3  65 72        
002F76r 3               
002F76r 3               nt_update:
002F76r 3  06 00                .byte 6, 0
002F78r 3  rr rr rr rr          .word nt_buffer, xt_update, z_update
002F7Cr 3  rr rr        
002F7Er 3  75 70 64 61          .byte "update"
002F82r 3  74 65        
002F84r 3               
002F84r 3               nt_block:
002F84r 3  05 00                .byte 5, 0
002F86r 3  rr rr rr rr          .word nt_update, xt_block, z_block
002F8Ar 3  rr rr        
002F8Cr 3  62 6C 6F 63          .byte "block"
002F90r 3  6B           
002F91r 3               
002F91r 3               nt_save_buffers:
002F91r 3  0C 00                .byte 12, 0
002F93r 3  rr rr rr rr          .word nt_block, xt_save_buffers, z_save_buffers
002F97r 3  rr rr        
002F99r 3  73 61 76 65          .byte "save-buffers"
002F9Dr 3  2D 62 75 66  
002FA1r 3  66 65 72 73  
002FA5r 3               
002FA5r 3               nt_block_read_vector:
002FA5r 3  11 28                .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
002FA7r 3  rr rr rr rr          .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
002FABr 3  rr rr        
002FADr 3  62 6C 6F 63          .byte "block-read-vector"
002FB1r 3  6B 2D 72 65  
002FB5r 3  61 64 2D 76  
002FBEr 3               
002FBEr 3               nt_block_read:
002FBEr 3  0A 28                .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
002FC0r 3  rr rr rr rr          .word nt_block_read_vector, xt_block_read, z_block_read
002FC4r 3  rr rr        
002FC6r 3  62 6C 6F 63          .byte "block-read"
002FCAr 3  6B 2D 72 65  
002FCEr 3  61 64        
002FD0r 3               
002FD0r 3               nt_block_write_vector:
002FD0r 3  12 08                .byte 18, NN ; Deferred words need the HC (Code Field) flag.
002FD2r 3  rr rr rr rr          .word nt_block_read, xt_block_write_vector, z_block_write_vector
002FD6r 3  rr rr        
002FD8r 3  62 6C 6F 63          .byte "block-write-vector"
002FDCr 3  6B 2D 77 72  
002FE0r 3  69 74 65 2D  
002FEAr 3               
002FEAr 3               nt_block_write:
002FEAr 3  0B 08                .byte 11, NN ; Deferred words need the HC (Code Field) flag.
002FECr 3  rr rr rr rr          .word nt_block_write_vector, xt_block_write, z_block_write
002FF0r 3  rr rr        
002FF2r 3  62 6C 6F 63          .byte "block-write"
002FF6r 3  6B 2D 77 72  
002FFAr 3  69 74 65     
002FFDr 3               
002FFDr 3               nt_blk:
002FFDr 3  03 00                .byte 3, 0
002FFFr 3  rr rr rr rr          .word nt_block_write, xt_blk, z_blk
003003r 3  rr rr        
003005r 3  62 6C 6B             .byte "blk"
003008r 3               
003008r 3               nt_scr:
003008r 3  03 00                .byte 3, 0
00300Ar 3  rr rr rr rr          .word nt_blk, xt_scr, z_scr
00300Er 3  rr rr        
003010r 3  73 63 72             .byte "scr"
003013r 3               
003013r 3               nt_blkbuffer:
003013r 3  09 00                .byte 9, 0
003015r 3  rr rr rr rr          .word nt_scr, xt_blkbuffer, z_blkbuffer
003019r 3  rr rr        
00301Br 3  62 6C 6B 62          .byte "blkbuffer"
00301Fr 3  75 66 66 65  
003023r 3  72           
003024r 3               
003024r 3               nt_buffblocknum:
003024r 3  0C 00                .byte 12, 0
003026r 3  rr rr rr rr          .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
00302Ar 3  rr rr        
00302Cr 3  62 75 66 66          .byte "buffblocknum"
003030r 3  62 6C 6F 63  
003034r 3  6B 6E 75 6D  
003038r 3               
003038r 3               nt_buffstatus:
003038r 3  0A 00                .byte 10, 0
00303Ar 3  rr rr rr rr          .word nt_buffblocknum, xt_buffstatus, z_buffstatus
00303Er 3  rr rr        
003040r 3  62 75 66 66          .byte "buffstatus"
003044r 3  73 74 61 74  
003048r 3  75 73        
00304Ar 3               
00304Ar 3               nt_buffer_colon:
00304Ar 3  07 00                .byte 7, 0
00304Cr 3  rr rr rr rr          .word nt_buffstatus, xt_buffer_colon, z_buffer_colon
003050r 3  rr rr        
003052r 3  62 75 66 66          .byte "buffer:"
003056r 3  65 72 3A     
003059r 3               
003059r 3               nt_useraddr:
003059r 3  08 00                .byte 8, 0
00305Br 3  rr rr rr rr          .word nt_buffer_colon, xt_useraddr, z_useraddr
00305Fr 3  rr rr        
003061r 3  75 73 65 72          .byte "useraddr"
003065r 3  61 64 64 72  
003069r 3               
003069r 3               nt_action_of:
003069r 3  09 04                .byte 9, IM
00306Br 3  rr rr rr rr          .word nt_useraddr, xt_action_of, z_action_of
00306Fr 3  rr rr        
003071r 3  61 63 74 69          .byte "action-of"
003075r 3  6F 6E 2D 6F  
003079r 3  66           
00307Ar 3               
00307Ar 3               nt_is:
00307Ar 3  02 04                .byte 2, IM
00307Cr 3  rr rr rr rr          .word nt_action_of, xt_is, z_is
003080r 3  rr rr        
003082r 3  69 73                .byte "is"
003084r 3               
003084r 3               nt_defer_store:
003084r 3  06 00                .byte 6, 0
003086r 3  rr rr rr rr          .word nt_is, xt_defer_store, z_defer_store
00308Ar 3  rr rr        
00308Cr 3  64 65 66 65          .byte "defer!"
003090r 3  72 21        
003092r 3               
003092r 3               nt_defer_fetch:
003092r 3  06 00                .byte 6, 0
003094r 3  rr rr rr rr          .word nt_defer_store, xt_defer_fetch, z_defer_fetch
003098r 3  rr rr        
00309Ar 3  64 65 66 65          .byte "defer@"
00309Er 3  72 40        
0030A0r 3               
0030A0r 3               nt_endcase:
0030A0r 3  07 0D                .byte 7, IM+CO+NN
0030A2r 3  rr rr rr rr          .word nt_defer_fetch, xt_endcase, z_endcase
0030A6r 3  rr rr        
0030A8r 3  65 6E 64 63          .byte "endcase"
0030ACr 3  61 73 65     
0030AFr 3               
0030AFr 3               nt_endof:
0030AFr 3  05 0D                .byte 5, IM+CO+NN
0030B1r 3  rr rr rr rr          .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
0030B5r 3  rr rr        
0030B7r 3  65 6E 64 6F          .byte "endof"
0030BBr 3  66           
0030BCr 3               
0030BCr 3               nt_of:
0030BCr 3  02 0D                .byte 2, IM+CO+NN
0030BEr 3  rr rr rr rr          .word nt_endof, xt_of, z_of
0030C2r 3  rr rr        
0030C4r 3  6F 66                .byte "of"
0030C6r 3               
0030C6r 3               nt_case:
0030C6r 3  04 0D                .byte 4, IM+CO+NN
0030C8r 3  rr rr rr rr          .word nt_of, xt_case, z_case    ; shares code with ZERO
0030CCr 3  rr rr        
0030CEr 3  63 61 73 65          .byte "case"
0030D2r 3               
0030D2r 3               nt_while:
0030D2r 3  05 0D                .byte 5, IM+CO+NN
0030D4r 3  rr rr rr rr          .word nt_case, xt_while, z_while
0030D8r 3  rr rr        
0030DAr 3  77 68 69 6C          .byte "while"
0030DEr 3  65           
0030DFr 3               
0030DFr 3               nt_until:
0030DFr 3  05 0D                .byte 5, IM+CO+NN
0030E1r 3  rr rr rr rr          .word nt_while, xt_until, z_until
0030E5r 3  rr rr        
0030E7r 3  75 6E 74 69          .byte "until"
0030EBr 3  6C           
0030ECr 3               
0030ECr 3               nt_repeat:
0030ECr 3  06 0D                .byte 6, IM+CO+NN
0030EEr 3  rr rr rr rr          .word nt_until, xt_repeat, z_repeat
0030F2r 3  rr rr        
0030F4r 3  72 65 70 65          .byte "repeat"
0030F8r 3  61 74        
0030FAr 3               
0030FAr 3               nt_else:
0030FAr 3  04 0D                .byte 4, IM+CO+NN
0030FCr 3  rr rr rr rr          .word nt_repeat, xt_else, z_else
003100r 3  rr rr        
003102r 3  65 6C 73 65          .byte "else"
003106r 3               
003106r 3               nt_then:
003106r 3  04 0D                .byte 4, IM+CO+NN
003108r 3  rr rr rr rr          .word nt_else, xt_then, z_then
00310Cr 3  rr rr        
00310Er 3  74 68 65 6E          .byte "then"
003112r 3               
003112r 3               nt_if:
003112r 3  02 0D                .byte 2, IM+CO+NN
003114r 3  rr rr rr rr          .word nt_then, xt_if, z_if
003118r 3  rr rr        
00311Ar 3  69 66                .byte "if"
00311Cr 3               
00311Cr 3               nt_dot_paren:
00311Cr 3  02 04                .byte 2, IM
00311Er 3  rr rr rr rr          .word nt_if, xt_dot_paren, z_dot_paren
003122r 3  rr rr        
003124r 3  2E 28                .byte ".("
003126r 3               
003126r 3               nt_paren:
003126r 3  01 04                .byte 1, IM
003128r 3  rr rr rr rr          .word nt_dot_paren, xt_paren, z_paren
00312Cr 3  rr rr        
00312Er 3  28                   .byte "("
00312Fr 3               
00312Fr 3               nt_word:
00312Fr 3  04 10                .byte 4, UF
003131r 3  rr rr rr rr          .word nt_paren, xt_word, z_word
003135r 3  rr rr        
003137r 3  77 6F 72 64          .byte "word"
00313Br 3               
00313Br 3               nt_find:
00313Br 3  04 10                .byte 4, UF
00313Dr 3  rr rr rr rr          .word nt_word, xt_find, z_find
003141r 3  rr rr        
003143r 3  66 69 6E 64          .byte "find"
003147r 3               
003147r 3               nt_environment_q:
003147r 3  0C 10                .byte 12, UF
003149r 3  rr rr rr rr          .word nt_find, xt_environment_q, z_environment_q
00314Dr 3  rr rr        
00314Fr 3  65 6E 76 69          .byte "environment?"
003153r 3  72 6F 6E 6D  
003157r 3  65 6E 74 3F  
00315Br 3               
00315Br 3               nt_search:
00315Br 3  06 18                .byte 6, UF+NN
00315Dr 3  rr rr rr rr          .word nt_environment_q, xt_search, z_search
003161r 3  rr rr        
003163r 3  73 65 61 72          .byte "search"
003167r 3  63 68        
003169r 3               
003169r 3               nt_compare:
003169r 3  07 10                .byte 7, UF
00316Br 3  rr rr rr rr          .word nt_search, xt_compare, z_compare
00316Fr 3  rr rr        
003171r 3  63 6F 6D 70          .byte "compare"
003175r 3  61 72 65     
003178r 3               
003178r 3               nt_disasm:
003178r 3  06 10                .byte 6, UF
00317Ar 3  rr rr rr rr          .word nt_compare, xt_disasm, z_disasm
00317Er 3  rr rr        
003180r 3  64 69 73 61          .byte "disasm"
003184r 3  73 6D        
003186r 3               
003186r 3               nt_dot_s:
003186r 3  02 00                .byte 2, 0
003188r 3  rr rr rr rr          .word nt_disasm, xt_dot_s, z_dot_s
00318Cr 3  rr rr        
00318Er 3  2E 73                .byte ".s"
003190r 3               
003190r 3               nt_dump:
003190r 3  04 10                .byte 4, UF
003192r 3  rr rr rr rr          .word nt_dot_s, xt_dump, z_dump
003196r 3  rr rr        
003198r 3  64 75 6D 70          .byte "dump"
00319Cr 3               
00319Cr 3               nt_bell:
00319Cr 3  04 00                .byte 4, 0
00319Er 3  rr rr rr rr          .word nt_dump, xt_bell, z_bell
0031A2r 3  rr rr        
0031A4r 3  62 65 6C 6C          .byte "bell"
0031A8r 3               
0031A8r 3               nt_align:
0031A8r 3  05 00                .byte 5, 0
0031AAr 3  rr rr rr rr          .word nt_bell, xt_align, z_align
0031AEr 3  rr rr        
0031B0r 3  61 6C 69 67          .byte "align"
0031B4r 3  6E           
0031B5r 3               
0031B5r 3               nt_aligned:             ; same code as ALIGN
0031B5r 3  07 00                .byte 7, 0
0031B7r 3  rr rr rr rr          .word nt_align, xt_align, z_align
0031BBr 3  rr rr        
0031BDr 3  61 6C 69 67          .byte "aligned"
0031C1r 3  6E 65 64     
0031C4r 3               
0031C4r 3               nt_wordsize:
0031C4r 3  08 10                .byte 8, UF
0031C6r 3  rr rr rr rr          .word nt_aligned, xt_wordsize, z_wordsize
0031CAr 3  rr rr        
0031CCr 3  77 6F 72 64          .byte "wordsize"
0031D0r 3  73 69 7A 65  
0031D4r 3               
0031D4r 3               nt_words:
0031D4r 3  05 00                .byte 5, 0
0031D6r 3  rr rr rr rr          .word nt_wordsize, xt_words, z_words
0031DAr 3  rr rr        
0031DCr 3  77 6F 72 64          .byte "words"
0031E0r 3  73           
0031E1r 3               
0031E1r 3               nt_marker:
0031E1r 3  06 04                .byte 6, IM
0031E3r 3  rr rr rr rr          .word nt_words, xt_marker, z_marker
0031E7r 3  rr rr        
0031E9r 3  6D 61 72 6B          .byte "marker"
0031EDr 3  65 72        
0031EFr 3               
0031EFr 3               nt_at_xy:
0031EFr 3  05 10                .byte 5, UF
0031F1r 3  rr rr rr rr          .word nt_marker, xt_at_xy, z_at_xy
0031F5r 3  rr rr        
0031F7r 3  61 74 2D 78          .byte "at-xy"
0031FBr 3  79           
0031FCr 3               
0031FCr 3               nt_page:
0031FCr 3  04 00                .byte 4, 0
0031FEr 3  rr rr rr rr          .word nt_at_xy, xt_page, z_page
003202r 3  rr rr        
003204r 3  70 61 67 65          .byte "page"
003208r 3               
003208r 3               nt_cr:
003208r 3  02 00                .byte 2, 0
00320Ar 3  rr rr rr rr          .word nt_page, xt_cr, z_cr
00320Er 3  rr rr        
003210r 3  63 72                .byte "cr"
003212r 3               
003212r 3               nt_input:
003212r 3  05 00                .byte 5, 0
003214r 3  rr rr rr rr          .word nt_cr, xt_input, z_input
003218r 3  rr rr        
00321Ar 3  69 6E 70 75          .byte "input"
00321Er 3  74           
00321Fr 3               
00321Fr 3               nt_output:
00321Fr 3  06 00                .byte 6, 0
003221r 3  rr rr rr rr          .word nt_input, xt_output, z_output
003225r 3  rr rr        
003227r 3  6F 75 74 70          .byte "output"
00322Br 3  75 74        
00322Dr 3               
00322Dr 3               nt_sign:
00322Dr 3  04 10                .byte 4, UF
00322Fr 3  rr rr rr rr          .word nt_output, xt_sign, z_sign
003233r 3  rr rr        
003235r 3  73 69 67 6E          .byte "sign"
003239r 3               
003239r 3               nt_hold:
003239r 3  04 10                .byte 4, UF
00323Br 3  rr rr rr rr          .word nt_sign, xt_hold, z_hold
00323Fr 3  rr rr        
003241r 3  68 6F 6C 64          .byte "hold"
003245r 3               
003245r 3               nt_number_sign_greater:
003245r 3  02 10                .byte 2, UF
003247r 3  rr rr rr rr          .word nt_hold, xt_number_sign_greater, z_number_sign_greater
00324Br 3  rr rr        
00324Dr 3  23 3E                .byte "#>"
00324Fr 3               
00324Fr 3               nt_number_sign_s:
00324Fr 3  02 10                .byte 2, UF
003251r 3  rr rr rr rr          .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
003255r 3  rr rr        
003257r 3  23 73                .byte "#s"
003259r 3               
003259r 3               nt_number_sign:
003259r 3  01 10                .byte 1, UF
00325Br 3  rr rr rr rr          .word nt_number_sign_s, xt_number_sign, z_number_sign
00325Fr 3  rr rr        
003261r 3  23                   .byte "#"
003262r 3               
003262r 3               nt_less_number_sign:
003262r 3  02 00                .byte 2, 0
003264r 3  rr rr rr rr          .word nt_number_sign, xt_less_number_sign, z_less_number_sign
003268r 3  rr rr        
00326Ar 3  3C 23                .byte "<#"
00326Cr 3               
00326Cr 3               nt_to_in:
00326Cr 3  03 00                .byte 3, 0
00326Er 3  rr rr rr rr          .word nt_less_number_sign, xt_to_in, z_to_in
003272r 3  rr rr        
003274r 3  3E 69 6E             .byte ">in"
003277r 3               
003277r 3               nt_within:
003277r 3  06 10                .byte 6, UF
003279r 3  rr rr rr rr          .word nt_to_in, xt_within, z_within
00327Dr 3  rr rr        
00327Fr 3  77 69 74 68          .byte "within"
003283r 3  69 6E        
003285r 3               
003285r 3               nt_hexstore:
003285r 3  08 10                .byte 8, UF
003287r 3  rr rr rr rr          .word nt_within, xt_hexstore, z_hexstore
00328Br 3  rr rr        
00328Dr 3  68 65 78 73          .byte "hexstore"
003291r 3  74 6F 72 65  
003295r 3               
003295r 3               nt_cleave:
003295r 3  06 10                .byte 6, UF
003297r 3  rr rr rr rr          .word nt_hexstore, xt_cleave, z_cleave
00329Br 3  rr rr        
00329Dr 3  63 6C 65 61          .byte "cleave"
0032A1r 3  76 65        
0032A3r 3               
0032A3r 3               nt_pad:
0032A3r 3  03 00                .byte 3, 0
0032A5r 3  rr rr rr rr          .word nt_cleave, xt_pad, z_pad
0032A9r 3  rr rr        
0032ABr 3  70 61 64             .byte "pad"
0032AEr 3               
0032AEr 3               nt_cmove:
0032AEr 3  05 10                .byte 5, UF
0032B0r 3  rr rr rr rr          .word nt_pad, xt_cmove, z_cmove
0032B4r 3  rr rr        
0032B6r 3  63 6D 6F 76          .byte "cmove"
0032BAr 3  65           
0032BBr 3               
0032BBr 3               nt_cmove_up:
0032BBr 3  06 10                .byte 6, UF
0032BDr 3  rr rr rr rr          .word nt_cmove, xt_cmove_up, z_cmove_up
0032C1r 3  rr rr        
0032C3r 3  63 6D 6F 76          .byte "cmove>"
0032C7r 3  65 3E        
0032C9r 3               
0032C9r 3               nt_move:
0032C9r 3  04 18                .byte 4, NN+UF
0032CBr 3  rr rr rr rr          .word nt_cmove_up, xt_move, z_move
0032CFr 3  rr rr        
0032D1r 3  6D 6F 76 65          .byte "move"
0032D5r 3               
0032D5r 3               nt_backslash:
0032D5r 3  01 04                .byte 1, IM
0032D7r 3  rr rr rr rr          .word nt_move, xt_backslash, z_backslash
0032DBr 3  rr rr        
0032DDr 3  5C                   .byte $5c
0032DEr 3               
0032DEr 3               nt_star_slash:
0032DEr 3  02 10                .byte 2, UF
0032E0r 3  rr rr rr rr          .word nt_backslash, xt_star_slash, z_star_slash
0032E4r 3  rr rr        
0032E6r 3  2A 2F                .byte "*/"
0032E8r 3               
0032E8r 3               nt_star_slash_mod:
0032E8r 3  05 10                .byte 5, UF
0032EAr 3  rr rr rr rr          .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
0032EEr 3  rr rr        
0032F0r 3  2A 2F 6D 6F          .byte "*/mod"
0032F4r 3  64           
0032F5r 3               
0032F5r 3               nt_mod:
0032F5r 3  03 10                .byte 3, UF
0032F7r 3  rr rr rr rr          .word nt_star_slash_mod, xt_mod, z_mod
0032FBr 3  rr rr        
0032FDr 3  6D 6F 64             .byte "mod"
003300r 3               
003300r 3               nt_slash_mod:
003300r 3  04 10                .byte 4, UF
003302r 3  rr rr rr rr          .word nt_mod, xt_slash_mod, z_slash_mod
003306r 3  rr rr        
003308r 3  2F 6D 6F 64          .byte "/mod"
00330Cr 3               
00330Cr 3               nt_slash:
00330Cr 3  01 10                .byte 1, UF
00330Er 3  rr rr rr rr          .word nt_slash_mod, xt_slash, z_slash
003312r 3  rr rr        
003314r 3  2F                   .byte "/"
003315r 3               
003315r 3               nt_fm_slash_mod:
003315r 3  06 10                .byte 6, UF
003317r 3  rr rr rr rr          .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
00331Br 3  rr rr        
00331Dr 3  66 6D 2F 6D          .byte "fm/mod"
003321r 3  6F 64        
003323r 3               
003323r 3               nt_sm_slash_rem:
003323r 3  06 10                .byte 6, UF
003325r 3  rr rr rr rr          .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
003329r 3  rr rr        
00332Br 3  73 6D 2F 72          .byte "sm/rem"
00332Fr 3  65 6D        
003331r 3               
003331r 3               nt_um_slash_mod:
003331r 3  06 10                .byte 6, UF
003333r 3  rr rr rr rr          .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
003337r 3  rr rr        
003339r 3  75 6D 2F 6D          .byte "um/mod"
00333Dr 3  6F 64        
00333Fr 3               
00333Fr 3               nt_star:
00333Fr 3  01 10                .byte 1, UF
003341r 3  rr rr rr rr          .word nt_um_slash_mod, xt_star, z_star
003345r 3  rr rr        
003347r 3  2A                   .byte "*"
003348r 3               
003348r 3               nt_um_star:
003348r 3  03 10                .byte 3, UF
00334Ar 3  rr rr rr rr          .word nt_star, xt_um_star, z_um_star
00334Er 3  rr rr        
003350r 3  75 6D 2A             .byte "um*"
003353r 3               
003353r 3               nt_m_star:
003353r 3  02 10                .byte 2, UF
003355r 3  rr rr rr rr          .word nt_um_star, xt_m_star, z_m_star
003359r 3  rr rr        
00335Br 3  6D 2A                .byte "m*"
00335Dr 3               
00335Dr 3               nt_count:
00335Dr 3  05 10                .byte 5, UF
00335Fr 3  rr rr rr rr          .word nt_m_star, xt_count, z_count
003363r 3  rr rr        
003365r 3  63 6F 75 6E          .byte "count"
003369r 3  74           
00336Ar 3               
00336Ar 3               nt_decimal:
00336Ar 3  07 00                .byte 7, 0
00336Cr 3  rr rr rr rr          .word nt_count, xt_decimal, z_decimal
003370r 3  rr rr        
003372r 3  64 65 63 69          .byte "decimal"
003376r 3  6D 61 6C     
003379r 3               
003379r 3               nt_hex:
003379r 3  03 00                .byte 3, 0
00337Br 3  rr rr rr rr          .word nt_decimal, xt_hex, z_hex
00337Fr 3  rr rr        
003381r 3  68 65 78             .byte "hex"
003384r 3               
003384r 3               nt_to_number:
003384r 3  07 10                .byte 7, UF
003386r 3  rr rr rr rr          .word nt_hex, xt_to_number, z_to_number
00338Ar 3  rr rr        
00338Cr 3  3E 6E 75 6D          .byte ">number"
003390r 3  62 65 72     
003393r 3               
003393r 3               nt_number:
003393r 3  06 10                .byte 6, UF
003395r 3  rr rr rr rr          .word nt_to_number, xt_number, z_number
003399r 3  rr rr        
00339Br 3  6E 75 6D 62          .byte "number"
00339Fr 3  65 72        
0033A1r 3               
0033A1r 3               nt_digit_question:
0033A1r 3  06 10                .byte 6, UF
0033A3r 3  rr rr rr rr          .word nt_number, xt_digit_question, z_digit_question
0033A7r 3  rr rr        
0033A9r 3  64 69 67 69          .byte "digit?"
0033ADr 3  74 3F        
0033AFr 3               
0033AFr 3               nt_base:
0033AFr 3  04 00                .byte 4, 0
0033B1r 3  rr rr rr rr          .word nt_digit_question, xt_base, z_base
0033B5r 3  rr rr        
0033B7r 3  62 61 73 65          .byte "base"
0033BBr 3               
0033BBr 3               nt_evaluate:
0033BBr 3  08 10                .byte 8, UF
0033BDr 3  rr rr rr rr          .word nt_base, xt_evaluate, z_evaluate
0033C1r 3  rr rr        
0033C3r 3  65 76 61 6C          .byte "evaluate"
0033C7r 3  75 61 74 65  
0033CBr 3               
0033CBr 3               nt_state:
0033CBr 3  05 00                .byte 5, 0
0033CDr 3  rr rr rr rr          .word nt_evaluate, xt_state, z_state
0033D1r 3  rr rr        
0033D3r 3  73 74 61 74          .byte "state"
0033D7r 3  65           
0033D8r 3               
0033D8r 3               nt_again:
0033D8r 3  05 17                .byte 5, AN+CO+IM+UF
0033DAr 3  rr rr rr rr          .word nt_state, xt_again, z_again
0033DEr 3  rr rr        
0033E0r 3  61 67 61 69          .byte "again"
0033E4r 3  6E           
0033E5r 3               
0033E5r 3               nt_begin:
0033E5r 3  05 07                .byte 5, AN+CO+IM
0033E7r 3  rr rr rr rr          .word nt_again, xt_begin, z_begin
0033EBr 3  rr rr        
0033EDr 3  62 65 67 69          .byte "begin"
0033F1r 3  6E           
0033F2r 3               
0033F2r 3               nt_quit:
0033F2r 3  04 00                .byte 4, 0
0033F4r 3  rr rr rr rr          .word nt_begin, xt_quit, z_quit
0033F8r 3  rr rr        
0033FAr 3  71 75 69 74          .byte "quit"
0033FEr 3               
0033FEr 3               nt_recurse:
0033FEr 3  07 0D                .byte 7, CO+IM+NN
003400r 3  rr rr rr rr          .word nt_quit, xt_recurse, z_recurse
003404r 3  rr rr        
003406r 3  72 65 63 75          .byte "recurse"
00340Ar 3  72 73 65     
00340Dr 3               
00340Dr 3               nt_leave:
00340Dr 3  05 03                .byte 5, AN+CO
00340Fr 3  rr rr rr rr          .word nt_recurse, xt_leave, z_leave
003413r 3  rr rr        
003415r 3  6C 65 61 76          .byte "leave"
003419r 3  65           
00341Ar 3               
00341Ar 3               nt_unloop:
00341Ar 3  06 03                .byte 6, AN+CO
00341Cr 3  rr rr rr rr          .word nt_leave, xt_unloop, z_unloop
003420r 3  rr rr        
003422r 3  75 6E 6C 6F          .byte "unloop"
003426r 3  6F 70        
003428r 3               
003428r 3               nt_exit:
003428r 3  04 03                .byte 4, AN+CO
00342Ar 3  rr rr rr rr          .word nt_unloop, xt_exit, z_exit
00342Er 3  rr rr        
003430r 3  65 78 69 74          .byte "exit"
003434r 3               
003434r 3               nt_plus_loop:
003434r 3  05 05                .byte 5, CO+IM
003436r 3  rr rr rr rr          .word nt_exit, xt_plus_loop, z_plus_loop
00343Ar 3  rr rr        
00343Cr 3  2B 6C 6F 6F          .byte "+loop"
003440r 3  70           
003441r 3               
003441r 3               nt_loop:
003441r 3  04 05                .byte 4, CO+IM
003443r 3  rr rr rr rr          .word nt_plus_loop, xt_loop, z_loop
003447r 3  rr rr        
003449r 3  6C 6F 6F 70          .byte "loop"
00344Dr 3               
00344Dr 3               nt_j:
00344Dr 3  01 03                .byte 1, AN+CO
00344Fr 3  rr rr rr rr          .word nt_loop, xt_j, z_j
003453r 3  rr rr        
003455r 3  6A                   .byte "j"
003456r 3               
003456r 3               nt_i:
003456r 3  01 03                .byte 1, AN+CO
003458r 3  rr rr rr rr          .word nt_j, xt_i, z_i
00345Cr 3  rr rr        
00345Er 3  69                   .byte "i"
00345Fr 3               
00345Fr 3               nt_question_do:
00345Fr 3  03 0D                .byte 3, CO+IM+NN
003461r 3  rr rr rr rr          .word nt_i, xt_question_do, z_question_do
003465r 3  rr rr        
003467r 3  3F 64 6F             .byte "?do"
00346Ar 3               
00346Ar 3               nt_do:
00346Ar 3  02 0D                .byte 2, CO+IM+NN
00346Cr 3  rr rr rr rr          .word nt_question_do, xt_do, z_do
003470r 3  rr rr        
003472r 3  64 6F                .byte "do"
003474r 3               
003474r 3               nt_abort_quote:
003474r 3  06 0D                .byte 6, CO+IM+NN
003476r 3  rr rr rr rr          .word nt_do, xt_abort_quote, z_abort_quote
00347Ar 3  rr rr        
00347Cr 3  61 62 6F 72          .byte "abort", $22
003480r 3  74 22        
003482r 3               
003482r 3               nt_abort:
003482r 3  05 00                .byte 5, 0
003484r 3  rr rr rr rr          .word nt_abort_quote, xt_abort, z_abort
003488r 3  rr rr        
00348Ar 3  61 62 6F 72          .byte "abort"
00348Er 3  74           
00348Fr 3               
00348Fr 3               nt_strip_underflow:
00348Fr 3  0F 00                .byte 15, 0
003491r 3  rr rr rr rr          .word nt_abort, xt_strip_underflow, z_strip_underflow
003495r 3  rr rr        
003497r 3  73 74 72 69          .byte "strip-underflow"
00349Br 3  70 2D 75 6E  
00349Fr 3  64 65 72 66  
0034A6r 3               
0034A6r 3               nt_nc_limit:
0034A6r 3  08 00                .byte 8, 0
0034A8r 3  rr rr rr rr          .word nt_strip_underflow, xt_nc_limit, z_nc_limit
0034ACr 3  rr rr        
0034AEr 3  6E 63 2D 6C          .byte "nc-limit"
0034B2r 3  69 6D 69 74  
0034B6r 3               
0034B6r 3               nt_allow_native:
0034B6r 3  0C 00                .byte 12, 0
0034B8r 3  rr rr rr rr          .word nt_nc_limit, xt_allow_native, z_allow_native
0034BCr 3  rr rr        
0034BEr 3  61 6C 6C 6F          .byte "allow-native"
0034C2r 3  77 2D 6E 61  
0034C6r 3  74 69 76 65  
0034CAr 3               
0034CAr 3               nt_always_native:
0034CAr 3  0D 00                .byte 13, 0
0034CCr 3  rr rr rr rr          .word nt_allow_native, xt_always_native, z_always_native
0034D0r 3  rr rr        
0034D2r 3  61 6C 77 61          .byte "always-native"
0034D6r 3  79 73 2D 6E  
0034DAr 3  61 74 69 76  
0034DFr 3               
0034DFr 3               nt_never_native:
0034DFr 3  0C 00                .byte 12, 0
0034E1r 3  rr rr rr rr          .word nt_always_native, xt_never_native, z_never_native
0034E5r 3  rr rr        
0034E7r 3  6E 65 76 65          .byte "never-native"
0034EBr 3  72 2D 6E 61  
0034EFr 3  74 69 76 65  
0034F3r 3               
0034F3r 3               nt_compile_only:
0034F3r 3  0C 00                .byte 12, 0
0034F5r 3  rr rr rr rr          .word nt_never_native, xt_compile_only, z_compile_only
0034F9r 3  rr rr        
0034FBr 3  63 6F 6D 70          .byte "compile-only"
0034FFr 3  69 6C 65 2D  
003503r 3  6F 6E 6C 79  
003507r 3               
003507r 3               nt_immediate:
003507r 3  09 00                .byte 9, 0
003509r 3  rr rr rr rr          .word nt_compile_only, xt_immediate, z_immediate
00350Dr 3  rr rr        
00350Fr 3  69 6D 6D 65          .byte "immediate"
003513r 3  64 69 61 74  
003517r 3  65           
003518r 3               
003518r 3               nt_postpone:
003518r 3  08 05                .byte 8, IM+CO
00351Ar 3  rr rr rr rr          .word nt_immediate, xt_postpone, z_postpone
00351Er 3  rr rr        
003520r 3  70 6F 73 74          .byte "postpone"
003524r 3  70 6F 6E 65  
003528r 3               
003528r 3               nt_s_backslash_quote:
003528r 3  03 04                .byte 3, IM
00352Ar 3  rr rr rr rr          .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
00352Er 3  rr rr        
003530r 3  73 5C 22             .byte "s", $5C, $22
003533r 3               
003533r 3               nt_s_quote:
003533r 3  02 0C                .byte 2, IM+NN
003535r 3  rr rr rr rr          .word nt_s_backslash_quote, xt_s_quote, z_s_quote
003539r 3  rr rr        
00353Br 3  73 22                .byte "s", $22
00353Dr 3               
00353Dr 3               nt_dot_quote:
00353Dr 3  02 05                .byte 2, CO+IM
00353Fr 3  rr rr rr rr          .word nt_s_quote, xt_dot_quote, z_dot_quote
003543r 3  rr rr        
003545r 3  2E 22                .byte ".", $22
003547r 3               
003547r 3               nt_sliteral:
003547r 3  08 15                .byte 8, CO+IM+UF
003549r 3  rr rr rr rr          .word nt_dot_quote, xt_sliteral, z_sliteral
00354Dr 3  rr rr        
00354Fr 3  73 6C 69 74          .byte "sliteral"
003553r 3  65 72 61 6C  
003557r 3               
003557r 3               nt_literal:
003557r 3  07 15                .byte 7, IM+CO+UF
003559r 3  rr rr rr rr          .word nt_sliteral, xt_literal, z_literal
00355Dr 3  rr rr        
00355Fr 3  6C 69 74 65          .byte "literal"
003563r 3  72 61 6C     
003566r 3               
003566r 3               nt_right_bracket:
003566r 3  01 04                .byte 1, IM
003568r 3  rr rr rr rr          .word nt_literal, xt_right_bracket, z_right_bracket
00356Cr 3  rr rr        
00356Er 3  5D                   .byte "]"
00356Fr 3               
00356Fr 3               nt_left_bracket:
00356Fr 3  01 05                .byte 1, IM+CO
003571r 3  rr rr rr rr          .word nt_right_bracket, xt_left_bracket, z_left_bracket
003575r 3  rr rr        
003577r 3  5B                   .byte "["
003578r 3               
003578r 3               nt_compile_comma:
003578r 3  08 18                .byte 8, UF+NN
00357Ar 3  rr rr rr rr          .word nt_left_bracket, xt_compile_comma, z_compile_comma
00357Er 3  rr rr        
003580r 3  63 6F 6D 70          .byte "compile,"
003584r 3  69 6C 65 2C  
003588r 3               
003588r 3               nt_colon_noname:
003588r 3  07 00                .byte 7, 0
00358Ar 3  rr rr rr rr          .word nt_compile_comma, xt_colon_noname, z_colon_noname
00358Er 3  rr rr        
003590r 3  3A 6E 6F 6E          .byte ":noname"
003594r 3  61 6D 65     
003597r 3               
003597r 3               nt_semicolon:
003597r 3  01 05                .byte 1, CO+IM
003599r 3  rr rr rr rr          .word nt_colon_noname, xt_semicolon, z_semicolon
00359Dr 3  rr rr        
00359Fr 3  3B                   .byte ";"
0035A0r 3               
0035A0r 3               nt_colon:
0035A0r 3  01 00                .byte 1, 0
0035A2r 3  rr rr rr rr          .word nt_semicolon, xt_colon, z_colon
0035A6r 3  rr rr        
0035A8r 3  3A                   .byte ":"
0035A9r 3               
0035A9r 3               nt_source_id:
0035A9r 3  09 00                .byte 9, 0
0035ABr 3  rr rr rr rr          .word nt_colon, xt_source_id, z_source_id
0035AFr 3  rr rr        
0035B1r 3  73 6F 75 72          .byte "source-id"
0035B5r 3  63 65 2D 69  
0035B9r 3  64           
0035BAr 3               
0035BAr 3               nt_source:
0035BAr 3  06 00                .byte 6, 0
0035BCr 3  rr rr rr rr          .word nt_source_id, xt_source, z_source
0035C0r 3  rr rr        
0035C2r 3  73 6F 75 72          .byte "source"
0035C6r 3  63 65        
0035C8r 3               
0035C8r 3               nt_execute_parsing:
0035C8r 3  0F 10                .byte 15, UF
0035CAr 3  rr rr rr rr          .word nt_source, xt_execute_parsing, z_execute_parsing
0035CEr 3  rr rr        
0035D0r 3  65 78 65 63          .byte "execute-parsing"
0035D4r 3  75 74 65 2D  
0035D8r 3  70 61 72 73  
0035DFr 3               
0035DFr 3               nt_parse:
0035DFr 3  05 10                .byte 5, UF
0035E1r 3  rr rr rr rr          .word nt_execute_parsing, xt_parse, z_parse
0035E5r 3  rr rr        
0035E7r 3  70 61 72 73          .byte "parse"
0035EBr 3  65           
0035ECr 3               
0035ECr 3               nt_parse_name:
0035ECr 3  0A 08                .byte 10, NN
0035EEr 3  rr rr rr rr          .word nt_parse, xt_parse_name, z_parse_name
0035F2r 3  rr rr        
0035F4r 3  70 61 72 73          .byte "parse-name"
0035F8r 3  65 2D 6E 61  
0035FCr 3  6D 65        
0035FEr 3               
0035FEr 3               nt_latestnt:
0035FEr 3  08 00                .byte 8, 0
003600r 3  rr rr rr rr          .word nt_parse_name, xt_latestnt, z_latestnt
003604r 3  rr rr        
003606r 3  6C 61 74 65          .byte "latestnt"
00360Ar 3  73 74 6E 74  
00360Er 3               
00360Er 3               nt_latestxt:
00360Er 3  08 00                .byte 8, 0
003610r 3  rr rr rr rr          .word nt_latestnt, xt_latestxt, z_latestxt
003614r 3  rr rr        
003616r 3  6C 61 74 65          .byte "latestxt"
00361Ar 3  73 74 78 74  
00361Er 3               
00361Er 3               nt_defer:
00361Er 3  05 00                .byte 5, 0
003620r 3  rr rr rr rr          .word nt_latestxt, xt_defer, z_defer
003624r 3  rr rr        
003626r 3  64 65 66 65          .byte "defer"
00362Ar 3  72           
00362Br 3               
00362Br 3               nt_to_body:
00362Br 3  05 10                .byte 5, UF
00362Dr 3  rr rr rr rr          .word nt_defer, xt_to_body, z_to_body
003631r 3  rr rr        
003633r 3  3E 62 6F 64          .byte ">body"
003637r 3  79           
003638r 3               
003638r 3               nt_name_to_string:
003638r 3  0B 10                .byte 11, UF
00363Ar 3  rr rr rr rr          .word nt_to_body, xt_name_to_string, z_name_to_string
00363Er 3  rr rr        
003640r 3  6E 61 6D 65          .byte "name>string"
003644r 3  3E 73 74 72  
003648r 3  69 6E 67     
00364Br 3               
00364Br 3               nt_int_to_name:
00364Br 3  08 10                .byte 8, UF
00364Dr 3  rr rr rr rr          .word nt_name_to_string, xt_int_to_name, z_int_to_name
003651r 3  rr rr        
003653r 3  69 6E 74 3E          .byte "int>name"
003657r 3  6E 61 6D 65  
00365Br 3               
00365Br 3               nt_name_to_int:
00365Br 3  08 10                .byte 8, UF
00365Dr 3  rr rr rr rr          .word nt_int_to_name, xt_name_to_int, z_name_to_int
003661r 3  rr rr        
003663r 3  6E 61 6D 65          .byte "name>int"
003667r 3  3E 69 6E 74  
00366Br 3               
00366Br 3               nt_bracket_tick:
00366Br 3  03 05                .byte 3, CO+IM
00366Dr 3  rr rr rr rr          .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
003671r 3  rr rr        
003673r 3  5B 27 5D             .byte "[']"
003676r 3               
003676r 3               nt_tick:
003676r 3  01 00                .byte 1, 0
003678r 3  rr rr rr rr          .word nt_bracket_tick, xt_tick, z_tick
00367Cr 3  rr rr        
00367Er 3  27                   .byte "'"
00367Fr 3               
00367Fr 3               nt_find_name:
00367Fr 3  09 10                .byte 9, UF
003681r 3  rr rr rr rr          .word nt_tick, xt_find_name, z_find_name
003685r 3  rr rr        
003687r 3  66 69 6E 64          .byte "find-name"
00368Br 3  2D 6E 61 6D  
00368Fr 3  65           
003690r 3               
003690r 3               nt_fill:
003690r 3  04 10                .byte 4, UF
003692r 3  rr rr rr rr          .word nt_find_name, xt_fill, z_fill
003696r 3  rr rr        
003698r 3  66 69 6C 6C          .byte "fill"
00369Cr 3               
00369Cr 3               nt_blank:
00369Cr 3  05 00                .byte 5, 0     ; underflow checked by FILL
00369Er 3  rr rr rr rr          .word nt_fill, xt_blank, z_blank
0036A2r 3  rr rr        
0036A4r 3  62 6C 61 6E          .byte "blank"
0036A8r 3  6B           
0036A9r 3               
0036A9r 3               nt_erase:
0036A9r 3  05 00                .byte 5, 0      ; underflow checked by FILL
0036ABr 3  rr rr rr rr          .word nt_blank, xt_erase, z_erase
0036AFr 3  rr rr        
0036B1r 3  65 72 61 73          .byte "erase"
0036B5r 3  65           
0036B6r 3               
0036B6r 3               nt_d_plus:
0036B6r 3  02 10                .byte 2, UF
0036B8r 3  rr rr rr rr          .word nt_erase, xt_d_plus, z_d_plus
0036BCr 3  rr rr        
0036BEr 3  64 2B                .byte "d+"
0036C0r 3               
0036C0r 3               nt_d_minus:
0036C0r 3  02 10                .byte 2, UF
0036C2r 3  rr rr rr rr          .word nt_d_plus, xt_d_minus, z_d_minus
0036C6r 3  rr rr        
0036C8r 3  64 2D                .byte "d-"
0036CAr 3               
0036CAr 3               nt_d_to_s:
0036CAr 3  03 10                .byte 3, UF
0036CCr 3  rr rr rr rr          .word nt_d_minus, xt_d_to_s, z_d_to_s
0036D0r 3  rr rr        
0036D2r 3  64 3E 73             .byte "d>s"
0036D5r 3               
0036D5r 3               nt_s_to_d:
0036D5r 3  03 10                .byte 3, UF
0036D7r 3  rr rr rr rr          .word nt_d_to_s, xt_s_to_d, z_s_to_d
0036DBr 3  rr rr        
0036DDr 3  73 3E 64             .byte "s>d"
0036E0r 3               
0036E0r 3               nt_to:
0036E0r 3  02 0C                .byte 2, NN+IM
0036E2r 3  rr rr rr rr          .word nt_s_to_d, xt_to, z_to
0036E6r 3  rr rr        
0036E8r 3  74 6F                .byte "to"
0036EAr 3               
0036EAr 3               nt_value:               ; same code as CONSTANT
0036EAr 3  05 10                .byte 5, UF
0036ECr 3  rr rr rr rr          .word nt_to, xt_constant, z_constant
0036F0r 3  rr rr        
0036F2r 3  76 61 6C 75          .byte "value"
0036F6r 3  65           
0036F7r 3               
0036F7r 3               nt_constant:
0036F7r 3  08 10                .byte 8, UF
0036F9r 3  rr rr rr rr          .word nt_value, xt_constant, z_constant
0036FDr 3  rr rr        
0036FFr 3  63 6F 6E 73          .byte "constant"
003703r 3  74 61 6E 74  
003707r 3               
003707r 3               nt_variable:
003707r 3  08 00                .byte 8, 0
003709r 3  rr rr rr rr          .word nt_constant, xt_variable, z_variable
00370Dr 3  rr rr        
00370Fr 3  76 61 72 69          .byte "variable"
003713r 3  61 62 6C 65  
003717r 3               
003717r 3               nt_does:
003717r 3  05 05                .byte 5, CO+IM
003719r 3  rr rr rr rr          .word nt_variable, xt_does, z_does
00371Dr 3  rr rr        
00371Fr 3  64 6F 65 73          .byte "does>"
003723r 3  3E           
003724r 3               
003724r 3               nt_create:
003724r 3  06 00                .byte 6, 0
003726r 3  rr rr rr rr          .word nt_does, xt_create, z_create
00372Ar 3  rr rr        
00372Cr 3  63 72 65 61          .byte "create"
003730r 3  74 65        
003732r 3               
003732r 3               nt_allot:
003732r 3  05 10                .byte 5, UF
003734r 3  rr rr rr rr          .word nt_create, xt_allot, z_allot
003738r 3  rr rr        
00373Ar 3  61 6C 6C 6F          .byte "allot"
00373Er 3  74           
00373Fr 3               
00373Fr 3               nt_key:
00373Fr 3  03 00                .byte 3, 0
003741r 3  rr rr rr rr          .word nt_allot, xt_key, z_key
003745r 3  rr rr        
003747r 3  6B 65 79             .byte "key"
00374Ar 3               
00374Ar 3               nt_depth:
00374Ar 3  05 00                .byte 5, 0
00374Cr 3  rr rr rr rr          .word nt_key, xt_depth, z_depth
003750r 3  rr rr        
003752r 3  64 65 70 74          .byte "depth"
003756r 3  68           
003757r 3               
003757r 3               nt_unused:
003757r 3  06 00                .byte 6, 0
003759r 3  rr rr rr rr          .word nt_depth, xt_unused, z_unused
00375Dr 3  rr rr        
00375Fr 3  75 6E 75 73          .byte "unused"
003763r 3  65 64        
003765r 3               
003765r 3               nt_r_to_input:
003765r 3  07 08                .byte 7, NN
003767r 3  rr rr rr rr          .word nt_unused, xt_r_to_input, z_r_to_input
00376Br 3  rr rr        
00376Dr 3  72 3E 69 6E          .byte "r>input"
003771r 3  70 75 74     
003774r 3               
003774r 3               nt_input_to_r:
003774r 3  07 08                .byte 7, NN
003776r 3  rr rr rr rr          .word nt_r_to_input, xt_input_to_r, z_input_to_r
00377Ar 3  rr rr        
00377Cr 3  69 6E 70 75          .byte "input>r"
003780r 3  74 3E 72     
003783r 3               
003783r 3               nt_accept:
003783r 3  06 18                .byte 6, UF+NN
003785r 3  rr rr rr rr          .word nt_input_to_r, xt_accept, z_accept
003789r 3  rr rr        
00378Br 3  61 63 63 65          .byte "accept"
00378Fr 3  70 74        
003791r 3               
003791r 3               nt_refill:
003791r 3  06 00                .byte 6, 0
003793r 3  rr rr rr rr          .word nt_accept, xt_refill, z_refill
003797r 3  rr rr        
003799r 3  72 65 66 69          .byte "refill"
00379Dr 3  6C 6C        
00379Fr 3               
00379Fr 3               nt_slash_string:
00379Fr 3  07 10                .byte 7, UF
0037A1r 3  rr rr rr rr          .word nt_refill, xt_slash_string, z_slash_string
0037A5r 3  rr rr        
0037A7r 3  2F 73 74 72          .byte "/string"
0037ABr 3  69 6E 67     
0037AEr 3               
0037AEr 3               nt_minus_leading:
0037AEr 3  08 10                .byte 8, UF
0037B0r 3  rr rr rr rr          .word nt_slash_string, xt_minus_leading, z_minus_leading
0037B4r 3  rr rr        
0037B6r 3  2D 6C 65 61          .byte "-leading"
0037BAr 3  64 69 6E 67  
0037BEr 3               
0037BEr 3               nt_minus_trailing:
0037BEr 3  09 10                .byte 9, UF
0037C0r 3  rr rr rr rr          .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
0037C4r 3  rr rr        
0037C6r 3  2D 74 72 61          .byte "-trailing"
0037CAr 3  69 6C 69 6E  
0037CEr 3  67           
0037CFr 3               
0037CFr 3               nt_bl:
0037CFr 3  02 00                .byte 2, 0
0037D1r 3  rr rr rr rr          .word nt_minus_trailing, xt_bl, z_bl
0037D5r 3  rr rr        
0037D7r 3  62 6C                .byte "bl"
0037D9r 3               
0037D9r 3               nt_spaces:
0037D9r 3  06 10                .byte 6, UF
0037DBr 3  rr rr rr rr          .word nt_bl, xt_spaces, z_spaces
0037DFr 3  rr rr        
0037E1r 3  73 70 61 63          .byte "spaces"
0037E5r 3  65 73        
0037E7r 3               
0037E7r 3               nt_bounds:
0037E7r 3  06 10                .byte 6, UF
0037E9r 3  rr rr rr rr          .word nt_spaces, xt_bounds, z_bounds
0037EDr 3  rr rr        
0037EFr 3  62 6F 75 6E          .byte "bounds"
0037F3r 3  64 73        
0037F5r 3               
0037F5r 3               nt_c_comma:
0037F5r 3  02 10                .byte 2, UF
0037F7r 3  rr rr rr rr          .word nt_bounds, xt_c_comma, z_c_comma
0037FBr 3  rr rr        
0037FDr 3  63 2C                .byte "c,"
0037FFr 3               
0037FFr 3               nt_dnegate:
0037FFr 3  07 10                .byte 7, UF
003801r 3  rr rr rr rr          .word nt_c_comma, xt_dnegate, z_dnegate
003805r 3  rr rr        
003807r 3  64 6E 65 67          .byte "dnegate"
00380Br 3  61 74 65     
00380Er 3               
00380Er 3               nt_negate:
00380Er 3  06 10                .byte 6, UF
003810r 3  rr rr rr rr          .word nt_dnegate, xt_negate, z_negate
003814r 3  rr rr        
003816r 3  6E 65 67 61          .byte "negate"
00381Ar 3  74 65        
00381Cr 3               
00381Cr 3               nt_invert:
00381Cr 3  06 10                .byte 6, UF
00381Er 3  rr rr rr rr          .word nt_negate, xt_invert, z_invert
003822r 3  rr rr        
003824r 3  69 6E 76 65          .byte "invert"
003828r 3  72 74        
00382Ar 3               
00382Ar 3               nt_two_to_r:
00382Ar 3  03 11                .byte 3, CO+UF          ; native is special case
00382Cr 3  rr rr rr rr          .word nt_invert, xt_two_to_r, z_two_to_r
003830r 3  rr rr        
003832r 3  32 3E 72             .byte "2>r"
003835r 3               
003835r 3               nt_two_r_from:
003835r 3  03 01                .byte 3, CO             ; native is special case
003837r 3  rr rr rr rr          .word nt_two_to_r, xt_two_r_from, z_two_r_from
00383Br 3  rr rr        
00383Dr 3  32 72 3E             .byte "2r>"
003840r 3               
003840r 3               nt_two_r_fetch:
003840r 3  03 09                .byte 3, CO+NN          ; native is special case, leave NN for now
003842r 3  rr rr rr rr          .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
003846r 3  rr rr        
003848r 3  32 72 40             .byte "2r@"
00384Br 3               
00384Br 3               nt_two_literal:
00384Br 3  08 14                .byte 8, UF+IM
00384Dr 3  rr rr rr rr          .word nt_two_r_fetch, xt_two_literal, z_two_literal
003851r 3  rr rr        
003853r 3  32 6C 69 74          .byte "2literal"
003857r 3  65 72 61 6C  
00385Br 3               
00385Br 3               nt_two_constant:
00385Br 3  09 10                .byte 9, UF
00385Dr 3  rr rr rr rr          .word nt_two_literal, xt_two_constant, z_two_constant
003861r 3  rr rr        
003863r 3  32 63 6F 6E          .byte "2constant"
003867r 3  73 74 61 6E  
00386Br 3  74           
00386Cr 3               
00386Cr 3               nt_two_variable:
00386Cr 3  09 00                .byte 9, 0
00386Er 3  rr rr rr rr          .word nt_two_constant, xt_two_variable, z_two_variable
003872r 3  rr rr        
003874r 3  32 76 61 72          .byte "2variable"
003878r 3  69 61 62 6C  
00387Cr 3  65           
00387Dr 3               
00387Dr 3               nt_two_fetch:
00387Dr 3  02 10                .byte 2, UF
00387Fr 3  rr rr rr rr          .word nt_two_variable, xt_two_fetch, z_two_fetch
003883r 3  rr rr        
003885r 3  32 40                .byte "2@"
003887r 3               
003887r 3               nt_two_store:
003887r 3  02 10                .byte 2, UF
003889r 3  rr rr rr rr          .word nt_two_fetch, xt_two_store, z_two_store
00388Dr 3  rr rr        
00388Fr 3  32 21                .byte "2!"
003891r 3               
003891r 3               nt_two_over:
003891r 3  05 10                .byte 5, UF
003893r 3  rr rr rr rr          .word nt_two_store, xt_two_over, z_two_over
003897r 3  rr rr        
003899r 3  32 6F 76 65          .byte "2over"
00389Dr 3  72           
00389Er 3               
00389Er 3               nt_two_swap:
00389Er 3  05 10                .byte 5, UF
0038A0r 3  rr rr rr rr          .word nt_two_over, xt_two_swap, z_two_swap
0038A4r 3  rr rr        
0038A6r 3  32 73 77 61          .byte "2swap"
0038AAr 3  70           
0038ABr 3               
0038ABr 3               nt_two_drop:
0038ABr 3  05 10                .byte 5, UF
0038ADr 3  rr rr rr rr          .word nt_two_swap, xt_two_drop, z_two_drop
0038B1r 3  rr rr        
0038B3r 3  32 64 72 6F          .byte "2drop"
0038B7r 3  70           
0038B8r 3               
0038B8r 3               nt_max:
0038B8r 3  03 10                .byte 3, UF
0038BAr 3  rr rr rr rr          .word nt_two_drop, xt_max, z_max
0038BEr 3  rr rr        
0038C0r 3  6D 61 78             .byte "max"
0038C3r 3               
0038C3r 3               nt_min:
0038C3r 3  03 10                .byte 3, UF
0038C5r 3  rr rr rr rr          .word nt_max, xt_min, z_min
0038C9r 3  rr rr        
0038CBr 3  6D 69 6E             .byte "min"
0038CEr 3               
0038CEr 3               nt_zero_less:
0038CEr 3  02 10                .byte 2, UF
0038D0r 3  rr rr rr rr          .word nt_min, xt_zero_less, z_zero_less
0038D4r 3  rr rr        
0038D6r 3  30 3C                .byte "0<"
0038D8r 3               
0038D8r 3               nt_zero_greater:
0038D8r 3  02 10                .byte 2, UF
0038DAr 3  rr rr rr rr          .word nt_zero_less, xt_zero_greater, z_zero_greater
0038DEr 3  rr rr        
0038E0r 3  30 3E                .byte "0>"
0038E2r 3               
0038E2r 3               nt_zero_unequal:
0038E2r 3  03 10                .byte 3, UF
0038E4r 3  rr rr rr rr          .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
0038E8r 3  rr rr        
0038EAr 3  30 3C 3E             .byte "0<>"
0038EDr 3               
0038EDr 3               nt_zero_equal:
0038EDr 3  02 10                .byte 2, UF
0038EFr 3  rr rr rr rr          .word nt_zero_unequal, xt_zero_equal, z_zero_equal
0038F3r 3  rr rr        
0038F5r 3  30 3D                .byte "0="
0038F7r 3               
0038F7r 3               nt_greater_than:
0038F7r 3  01 10                .byte 1, UF
0038F9r 3  rr rr rr rr          .word nt_zero_equal, xt_greater_than, z_greater_than
0038FDr 3  rr rr        
0038FFr 3  3E                   .byte ">"
003900r 3               
003900r 3               nt_u_greater_than:
003900r 3  02 10                .byte 2, UF
003902r 3  rr rr rr rr          .word nt_greater_than, xt_u_greater_than, z_u_greater_than
003906r 3  rr rr        
003908r 3  75 3E                .byte "u>"
00390Ar 3               
00390Ar 3               nt_u_less_than:
00390Ar 3  02 10                .byte 2, UF
00390Cr 3  rr rr rr rr          .word nt_u_greater_than, xt_u_less_than, z_u_less_than
003910r 3  rr rr        
003912r 3  75 3C                .byte "u<"
003914r 3               
003914r 3               nt_less_than:
003914r 3  01 10                .byte 1, UF
003916r 3  rr rr rr rr          .word nt_u_less_than, xt_less_than, z_less_than
00391Ar 3  rr rr        
00391Cr 3  3C                   .byte "<"
00391Dr 3               
00391Dr 3               nt_not_equals:
00391Dr 3  02 10                .byte 2, UF
00391Fr 3  rr rr rr rr          .word nt_less_than, xt_not_equals, z_not_equals
003923r 3  rr rr        
003925r 3  3C 3E                .byte "<>"
003927r 3               
003927r 3               nt_equal:
003927r 3  01 10                .byte 1, UF
003929r 3  rr rr rr rr          .word nt_not_equals, xt_equal, z_equal
00392Dr 3  rr rr        
00392Fr 3  3D                   .byte "="
003930r 3               
003930r 3               nt_two_slash:
003930r 3  02 10                .byte 2, UF
003932r 3  rr rr rr rr          .word nt_equal, xt_two_slash, z_two_slash
003936r 3  rr rr        
003938r 3  32 2F                .byte "2/"
00393Ar 3               
00393Ar 3               nt_two_star:
00393Ar 3  02 10                .byte 2, UF
00393Cr 3  rr rr rr rr          .word nt_two_slash, xt_two_star, z_two_star
003940r 3  rr rr        
003942r 3  32 2A                .byte "2*"
003944r 3               
003944r 3               nt_one_plus:
003944r 3  02 10                .byte 2, UF
003946r 3  rr rr rr rr          .word nt_two_star, xt_one_plus, z_one_plus
00394Ar 3  rr rr        
00394Cr 3  31 2B                .byte "1+"
00394Er 3               
00394Er 3               nt_one_minus:
00394Er 3  02 10                .byte 2, UF
003950r 3  rr rr rr rr          .word nt_one_plus, xt_one_minus, z_one_minus
003954r 3  rr rr        
003956r 3  31 2D                .byte "1-"
003958r 3               
003958r 3               nt_here:
003958r 3  04 00                .byte 4, 0
00395Ar 3  rr rr rr rr          .word nt_one_minus, xt_here, z_here
00395Er 3  rr rr        
003960r 3  68 65 72 65          .byte "here"
003964r 3               
003964r 3               nt_cell_plus:
003964r 3  05 10                .byte 5, UF
003966r 3  rr rr rr rr          .word nt_here, xt_cell_plus, z_cell_plus
00396Ar 3  rr rr        
00396Cr 3  63 65 6C 6C          .byte "cell+"
003970r 3  2B           
003971r 3               
003971r 3               nt_cells:
003971r 3  05 00                .byte 5, 0
003973r 3  rr rr rr rr          .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
003977r 3  rr rr        
003979r 3  63 65 6C 6C          .byte "cells"
00397Dr 3  73           
00397Er 3               
00397Er 3               nt_chars:
00397Er 3  05 12                .byte 5, AN+UF   ; deleted during compile
003980r 3  rr rr rr rr          .word nt_cells, xt_chars, z_chars
003984r 3  rr rr        
003986r 3  63 68 61 72          .byte "chars"
00398Ar 3  73           
00398Br 3               
00398Br 3               nt_char_plus:
00398Br 3  05 00                .byte 5, 0
00398Dr 3  rr rr rr rr          .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
003991r 3  rr rr        
003993r 3  63 68 61 72          .byte "char+"
003997r 3  2B           
003998r 3               
003998r 3               nt_bracket_char:
003998r 3  06 05                .byte 6, CO+IM
00399Ar 3  rr rr rr rr          .word nt_char_plus, xt_bracket_char, z_bracket_char
00399Er 3  rr rr        
0039A0r 3  5B 63 68 61          .byte "[char]"
0039A4r 3  72 5D        
0039A6r 3               
0039A6r 3               nt_char:
0039A6r 3  04 00                .byte 4, 0
0039A8r 3  rr rr rr rr          .word nt_bracket_char, xt_char, z_char
0039ACr 3  rr rr        
0039AEr 3  63 68 61 72          .byte "char"
0039B2r 3               
0039B2r 3               nt_pick:
0039B2r 3  04 00                .byte 4, 0    ; underflow check is complicated, leave off here
0039B4r 3  rr rr rr rr          .word nt_char, xt_pick, z_pick
0039B8r 3  rr rr        
0039BAr 3  70 69 63 6B          .byte "pick"
0039BEr 3               
0039BEr 3               nt_lshift:
0039BEr 3  06 10                .byte 6, UF
0039C0r 3  rr rr rr rr          .word nt_pick, xt_lshift, z_lshift
0039C4r 3  rr rr        
0039C6r 3  6C 73 68 69          .byte "lshift"
0039CAr 3  66 74        
0039CCr 3               
0039CCr 3               nt_rshift:
0039CCr 3  06 10                .byte 6, UF
0039CEr 3  rr rr rr rr          .word nt_lshift, xt_rshift, z_rshift
0039D2r 3  rr rr        
0039D4r 3  72 73 68 69          .byte "rshift"
0039D8r 3  66 74        
0039DAr 3               
0039DAr 3               nt_xor:
0039DAr 3  03 10                .byte 3, UF
0039DCr 3  rr rr rr rr          .word nt_rshift, xt_xor, z_xor
0039E0r 3  rr rr        
0039E2r 3  78 6F 72             .byte "xor"
0039E5r 3               
0039E5r 3               nt_or:
0039E5r 3  02 10                .byte 2, UF
0039E7r 3  rr rr rr rr          .word nt_xor, xt_or, z_or
0039EBr 3  rr rr        
0039EDr 3  6F 72                .byte "or"
0039EFr 3               
0039EFr 3               nt_and:
0039EFr 3  03 10                .byte 3, UF
0039F1r 3  rr rr rr rr          .word nt_or, xt_and, z_and
0039F5r 3  rr rr        
0039F7r 3  61 6E 64             .byte "and"
0039FAr 3               
0039FAr 3               nt_dabs:
0039FAr 3  04 10                .byte 4, UF
0039FCr 3  rr rr rr rr          .word nt_and, xt_dabs, z_dabs
003A00r 3  rr rr        
003A02r 3  64 61 62 73          .byte "dabs"
003A06r 3               
003A06r 3               nt_abs:
003A06r 3  03 10                .byte 3, UF
003A08r 3  rr rr rr rr          .word nt_dabs, xt_abs, z_abs
003A0Cr 3  rr rr        
003A0Er 3  61 62 73             .byte "abs"
003A11r 3               
003A11r 3               nt_minus:
003A11r 3  01 10                .byte 1, UF
003A13r 3  rr rr rr rr          .word nt_abs, xt_minus, z_minus
003A17r 3  rr rr        
003A19r 3  2D                   .byte "-"
003A1Ar 3               
003A1Ar 3               nt_plus:
003A1Ar 3  01 10                .byte 1, UF
003A1Cr 3  rr rr rr rr          .word nt_minus, xt_plus, z_plus
003A20r 3  rr rr        
003A22r 3  2B                   .byte "+"
003A23r 3               
003A23r 3               nt_question_dup:
003A23r 3  04 10                .byte 4, UF
003A25r 3  rr rr rr rr          .word nt_plus, xt_question_dup, z_question_dup
003A29r 3  rr rr        
003A2Br 3  3F 64 75 70          .byte "?dup"
003A2Fr 3               
003A2Fr 3               nt_two_dup:
003A2Fr 3  04 10                .byte 4, UF
003A31r 3  rr rr rr rr          .word nt_question_dup, xt_two_dup, z_two_dup
003A35r 3  rr rr        
003A37r 3  32 64 75 70          .byte "2dup"
003A3Br 3               
003A3Br 3               nt_two:
003A3Br 3  01 00                .byte 1, 0
003A3Dr 3  rr rr rr rr          .word nt_two_dup, xt_two, z_two
003A41r 3  rr rr        
003A43r 3  32                   .byte "2"
003A44r 3               
003A44r 3               nt_one:
003A44r 3  01 00                .byte 1, 0
003A46r 3  rr rr rr rr          .word nt_two, xt_one, z_one
003A4Ar 3  rr rr        
003A4Cr 3  31                   .byte "1"
003A4Dr 3               
003A4Dr 3               nt_zero:
003A4Dr 3  01 00                .byte 1, 0
003A4Fr 3  rr rr rr rr          .word nt_one, xt_zero, z_zero
003A53r 3  rr rr        
003A55r 3  30                   .byte "0"
003A56r 3               
003A56r 3               nt_space:
003A56r 3  05 00                .byte 5, 0
003A58r 3  rr rr rr rr          .word nt_zero, xt_space, z_space
003A5Cr 3  rr rr        
003A5Er 3  73 70 61 63          .byte "space"
003A62r 3  65           
003A63r 3               
003A63r 3               nt_true:
003A63r 3  04 00                .byte 4, 0
003A65r 3  rr rr rr rr          .word nt_space, xt_true, z_true
003A69r 3  rr rr        
003A6Br 3  74 72 75 65          .byte "true"
003A6Fr 3               
003A6Fr 3               nt_false:
003A6Fr 3  05 00                .byte 5, 0
003A71r 3  rr rr rr rr          .word nt_true, xt_false, z_false
003A75r 3  rr rr        
003A77r 3  66 61 6C 73          .byte "false"
003A7Br 3  65           
003A7Cr 3               
003A7Cr 3               nt_question:
003A7Cr 3  01 00                .byte 1, 0
003A7Er 3  rr rr rr rr          .word nt_false, xt_question, z_question
003A82r 3  rr rr        
003A84r 3  3F                   .byte "?"
003A85r 3               
003A85r 3               nt_ud_dot_r:
003A85r 3  04 10                .byte 4, UF
003A87r 3  rr rr rr rr          .word nt_question, xt_ud_dot_r, z_ud_dot_r
003A8Br 3  rr rr        
003A8Dr 3  75 64 2E 72          .byte "ud.r"
003A91r 3               
003A91r 3               nt_ud_dot:
003A91r 3  03 10                .byte 3, UF
003A93r 3  rr rr rr rr          .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
003A97r 3  rr rr        
003A99r 3  75 64 2E             .byte "ud."
003A9Cr 3               
003A9Cr 3               nt_d_dot_r:
003A9Cr 3  03 10                .byte 3, UF
003A9Er 3  rr rr rr rr          .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
003AA2r 3  rr rr        
003AA4r 3  64 2E 72             .byte "d.r"
003AA7r 3               
003AA7r 3               nt_d_dot:
003AA7r 3  02 10                .byte 2, UF
003AA9r 3  rr rr rr rr          .word nt_d_dot_r, xt_d_dot, z_d_dot
003AADr 3  rr rr        
003AAFr 3  64 2E                .byte "d."
003AB1r 3               
003AB1r 3               nt_dot_r:
003AB1r 3  02 10                .byte 2, UF
003AB3r 3  rr rr rr rr          .word nt_d_dot, xt_dot_r, z_dot_r
003AB7r 3  rr rr        
003AB9r 3  2E 72                .byte ".r"
003ABBr 3               
003ABBr 3               nt_u_dot_r:
003ABBr 3  03 10                .byte 3, UF
003ABDr 3  rr rr rr rr          .word nt_dot_r, xt_u_dot_r, z_u_dot_r
003AC1r 3  rr rr        
003AC3r 3  75 2E 72             .byte "u.r"
003AC6r 3               
003AC6r 3               nt_u_dot:
003AC6r 3  02 10                .byte 2, UF
003AC8r 3  rr rr rr rr          .word nt_u_dot_r, xt_u_dot, z_u_dot
003ACCr 3  rr rr        
003ACEr 3  75 2E                .byte "u."
003AD0r 3               
003AD0r 3               nt_dot:
003AD0r 3  01 10                .byte 1, UF
003AD2r 3  rr rr rr rr          .word nt_u_dot, xt_dot, z_dot
003AD6r 3  rr rr        
003AD8r 3  2E                   .byte "."
003AD9r 3               
003AD9r 3               nt_type:
003AD9r 3  04 10                .byte 4, UF
003ADBr 3  rr rr rr rr          .word nt_dot, xt_type, z_type
003ADFr 3  rr rr        
003AE1r 3  74 79 70 65          .byte "type"
003AE5r 3               
003AE5r 3               nt_emit:
003AE5r 3  04 18                .byte 4, NN+UF
003AE7r 3  rr rr rr rr          .word nt_type, xt_emit, z_emit
003AEBr 3  rr rr        
003AEDr 3  65 6D 69 74          .byte "emit"
003AF1r 3               
003AF1r 3               nt_execute:
003AF1r 3  07 10                .byte 7, UF
003AF3r 3  rr rr rr rr          .word nt_emit, xt_execute, z_execute
003AF7r 3  rr rr        
003AF9r 3  65 78 65 63          .byte "execute"
003AFDr 3  75 74 65     
003B00r 3               
003B00r 3               nt_plus_store:
003B00r 3  02 10                .byte 2, UF
003B02r 3  rr rr rr rr          .word nt_execute, xt_plus_store, z_plus_store
003B06r 3  rr rr        
003B08r 3  2B 21                .byte "+!"
003B0Ar 3               
003B0Ar 3               nt_c_store:
003B0Ar 3  02 10                .byte 2, UF
003B0Cr 3  rr rr rr rr          .word nt_plus_store, xt_c_store, z_c_store
003B10r 3  rr rr        
003B12r 3  63 21                .byte "c!"
003B14r 3               
003B14r 3               nt_c_fetch:
003B14r 3  02 10                .byte 2, UF
003B16r 3  rr rr rr rr          .word nt_c_store, xt_c_fetch, z_c_fetch
003B1Ar 3  rr rr        
003B1Cr 3  63 40                .byte "c@"
003B1Er 3               
003B1Er 3               nt_comma:
003B1Er 3  01 10                .byte 1, UF
003B20r 3  rr rr rr rr          .word nt_c_fetch, xt_comma, z_comma
003B24r 3  rr rr        
003B26r 3  2C                   .byte ","
003B27r 3               
003B27r 3               nt_tuck:
003B27r 3  04 10                .byte 4, UF
003B29r 3  rr rr rr rr          .word nt_comma, xt_tuck, z_tuck
003B2Dr 3  rr rr        
003B2Fr 3  74 75 63 6B          .byte "tuck"
003B33r 3               
003B33r 3               nt_not_rote:
003B33r 3  04 10                .byte 4, UF
003B35r 3  rr rr rr rr          .word nt_tuck, xt_not_rote, z_not_rote
003B39r 3  rr rr        
003B3Br 3  2D 72 6F 74          .byte "-rot"
003B3Fr 3               
003B3Fr 3               nt_rot:
003B3Fr 3  03 10                .byte 3, UF
003B41r 3  rr rr rr rr          .word nt_not_rote, xt_rot, z_rot
003B45r 3  rr rr        
003B47r 3  72 6F 74             .byte "rot"
003B4Ar 3               
003B4Ar 3               nt_nip:
003B4Ar 3  03 10                .byte 3, UF
003B4Cr 3  rr rr rr rr          .word nt_rot, xt_nip, z_nip
003B50r 3  rr rr        
003B52r 3  6E 69 70             .byte "nip"
003B55r 3               
003B55r 3               nt_r_fetch:
003B55r 3  02 01                .byte 2, CO    ; native is special case
003B57r 3  rr rr rr rr          .word nt_nip, xt_r_fetch, z_r_fetch
003B5Br 3  rr rr        
003B5Dr 3  72 40                .byte "r@"
003B5Fr 3               
003B5Fr 3               nt_r_from:
003B5Fr 3  02 01                .byte 2, CO    ; native is special case
003B61r 3  rr rr rr rr          .word nt_r_fetch, xt_r_from, z_r_from
003B65r 3  rr rr        
003B67r 3  72 3E                .byte "r>"
003B69r 3               
003B69r 3               nt_to_r:
003B69r 3  02 11                .byte 2, CO+UF ; native is special case
003B6Br 3  rr rr rr rr          .word nt_r_from, xt_to_r, z_to_r
003B6Fr 3  rr rr        
003B71r 3  3E 72                .byte ">r"
003B73r 3               
003B73r 3               nt_over:
003B73r 3  04 10                .byte 4, UF
003B75r 3  rr rr rr rr          .word nt_to_r, xt_over, z_over
003B79r 3  rr rr        
003B7Br 3  6F 76 65 72          .byte "over"
003B7Fr 3               
003B7Fr 3               nt_fetch:
003B7Fr 3  01 10                .byte 1, UF
003B81r 3  rr rr rr rr          .word nt_over, xt_fetch, z_fetch
003B85r 3  rr rr        
003B87r 3  40                   .byte "@"
003B88r 3               
003B88r 3               nt_store:
003B88r 3  01 10                .byte 1, UF
003B8Ar 3  rr rr rr rr          .word nt_fetch, xt_store, z_store
003B8Er 3  rr rr        
003B90r 3  21                   .byte "!"
003B91r 3               
003B91r 3               nt_swap:
003B91r 3  04 10                .byte 4, UF
003B93r 3  rr rr rr rr          .word nt_store, xt_swap, z_swap
003B97r 3  rr rr        
003B99r 3  73 77 61 70          .byte "swap"
003B9Dr 3               
003B9Dr 3               nt_dup:
003B9Dr 3  03 10                .byte 3, UF
003B9Fr 3  rr rr rr rr          .word nt_swap, xt_dup, z_dup
003BA3r 3  rr rr        
003BA5r 3  64 75 70             .byte "dup"
003BA8r 3               
003BA8r 3               ; DROP is always the first native word in the Dictionary
003BA8r 3               dictionary_start:
003BA8r 3               nt_drop:
003BA8r 3  04 10                .byte 4, UF
003BAAr 3  rr rr rr rr          .word nt_dup, xt_drop, z_drop
003BAEr 3  rr rr        
003BB0r 3  64 72 6F 70          .byte "drop"
003BB4r 3               
003BB4r 3               ; END of FORTH-WORDLIST
003BB4r 3               
003BB4r 3               
003BB4r 3               ; ROOT-WORDLIST
003BB4r 3                       ; This is a short wordlist that has just the words needed to
003BB4r 3                       ; set the wordlists. These words are also included in the
003BB4r 3                       ; FORTH-WORDLIST as well.
003BB4r 3               
003BB4r 3               nt_root_words:
003BB4r 3  05 00                .byte 5, 0
003BB6r 3  00 00 rr rr          .word 0000, xt_words, z_words
003BBAr 3  rr rr        
003BBCr 3  77 6F 72 64          .byte "words"
003BC0r 3  73           
003BC1r 3               
003BC1r 3               nt_root_forth_wordlist: ; shares code with ZERO
003BC1r 3  0E 00                .byte 14, 0
003BC3r 3  rr rr rr rr          .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
003BC7r 3  rr rr        
003BC9r 3  66 6F 72 74          .byte "forth-wordlist"
003BCDr 3  68 2D 77 6F  
003BD1r 3  72 64 6C 69  
003BD7r 3               
003BD7r 3               nt_root_forth:
003BD7r 3  05 00                .byte 5, 0
003BD9r 3  rr rr rr rr          .word nt_root_forth_wordlist, xt_forth, z_forth
003BDDr 3  rr rr        
003BDFr 3  66 6F 72 74          .byte "forth"
003BE3r 3  68           
003BE4r 3               
003BE4r 3               root_dictionary_start:
003BE4r 3               nt_root_set_order:
003BE4r 3  09 00                .byte 9, 0
003BE6r 3  rr rr rr rr          .word nt_root_forth, xt_set_order, z_set_order
003BEAr 3  rr rr        
003BECr 3  73 65 74 2D          .byte "set-order"
003BF0r 3  6F 72 64 65  
003BF4r 3  72           
003BF5r 3               
003BF5r 3               ; END of ROOT-WORDLIST
003BF5r 3               
003BF5r 3               
003BF5r 3               ; EDITOR-WORDLIST
003BF5r 3               
003BF5r 3               nt_editor_enter_screen:
003BF5r 3  0C 00                .byte 12, 0
003BF7r 3  00 00 rr rr          .word 0000, xt_editor_enter_screen, z_editor_enter_screen
003BFBr 3  rr rr        
003BFDr 3  65 6E 74 65          .byte "enter-screen"
003C01r 3  72 2D 73 63  
003C05r 3  72 65 65 6E  
003C09r 3               
003C09r 3               nt_editor_erase_screen:
003C09r 3  0C 00                .byte 12, 0
003C0Br 3  rr rr rr rr          .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
003C0Fr 3  rr rr        
003C11r 3  65 72 61 73          .byte "erase-screen"
003C15r 3  65 2D 73 63  
003C19r 3  72 65 65 6E  
003C1Dr 3               
003C1Dr 3               nt_editor_el:
003C1Dr 3  02 00                .byte 2, 0
003C1Fr 3  rr rr rr rr          .word nt_editor_erase_screen, xt_editor_el, z_editor_el
003C23r 3  rr rr        
003C25r 3  65 6C                .byte "el"
003C27r 3               
003C27r 3               nt_editor_l:
003C27r 3  01 00                .byte 1, 0
003C29r 3  rr rr rr rr          .word nt_editor_el, xt_editor_l, z_editor_l
003C2Dr 3  rr rr        
003C2Fr 3  6C                   .byte "l"
003C30r 3               
003C30r 3               nt_editor_line:
003C30r 3  04 10                .byte 4, UF
003C32r 3  rr rr rr rr          .word nt_editor_l, xt_editor_line, z_editor_line
003C36r 3  rr rr        
003C38r 3  6C 69 6E 65          .byte "line"
003C3Cr 3               
003C3Cr 3               editor_dictionary_start:
003C3Cr 3               nt_editor_o:
003C3Cr 3  01 00                .byte 1, 0
003C3Er 3  rr rr rr rr          .word nt_editor_line, xt_editor_o, z_editor_o
003C42r 3  rr rr        
003C44r 3  6F                   .byte "o"
003C45r 3               
003C45r 3               ; END of EDITOR-WORDLIST
003C45r 3               
003C45r 3               
003C45r 3               ; ; ASSEMBLER-WORDLIST
003C45r 3               
003C45r 3               ; ; Labels for the opcodes have the format "nt_asm_<OPC>" where a futher
003C45r 3               ; ; underscore replaces any dot present in the SAN mnemonic. The hash sign for
003C45r 3               ; ; immediate addressing is replaced by an "h" (for example, the label code for
003C45r 3               ; ; "lda.#" is "xt_adm_lda_h"). All opcodes are immediate.
003C45r 3               assembler_dictionary_start:
003C45r 3               ; nt_asm_adc_h:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_adc_x
003C45r 3               ; 		.word xt_asm_adc_h, z_asm_adc_h
003C45r 3               ; 		.byte "adc.#"
003C45r 3               
003C45r 3               ; nt_asm_adc_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_adc_y
003C45r 3               ; 		.word xt_asm_adc_x, z_asm_adc_x
003C45r 3               ; 		.byte "adc.x"
003C45r 3               
003C45r 3               ; nt_asm_adc_y:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_adc_z
003C45r 3               ; 		.word xt_asm_adc_y, z_asm_adc_y
003C45r 3               ; 		.byte "adc.y"
003C45r 3               
003C45r 3               ; nt_asm_adc_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_adc_zi
003C45r 3               ; 		.word xt_asm_adc_z, z_asm_adc_z
003C45r 3               ; 		.byte "adc.z"
003C45r 3               
003C45r 3               ; nt_asm_adc_zi:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_adc_ziy
003C45r 3               ; 		.word xt_asm_adc_zi, z_asm_adc_zi
003C45r 3               ; 		.byte "adc.zi"
003C45r 3               
003C45r 3               ; nt_asm_adc_ziy:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_adc_zx
003C45r 3               ; 		.word xt_asm_adc_ziy, z_asm_adc_ziy
003C45r 3               ; 		.byte "adc.ziy"
003C45r 3               
003C45r 3               ; nt_asm_adc_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_adc_zxi
003C45r 3               ; 		.word xt_asm_adc_zx, z_asm_adc_zx
003C45r 3               ; 		.byte "adc.zx"
003C45r 3               
003C45r 3               ; nt_asm_adc_zxi:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_and
003C45r 3               ; 		.word xt_asm_adc_zxi, z_asm_adc_zxi
003C45r 3               ; 		.byte "adc.zxi"
003C45r 3               
003C45r 3               ; nt_asm_and:     ; not "and" because of conflicts with Forth word
003C45r 3               ; 		.byte 4, IM
003C45r 3               ;                 .word nt_asm_and_h
003C45r 3               ; 		.word xt_asm_and, z_asm_and
003C45r 3               ; 		.byte "and."
003C45r 3               
003C45r 3               ; nt_asm_and_h:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_and_x
003C45r 3               ; 		.word xt_asm_and_h, z_asm_and_h
003C45r 3               ; 		.byte "and.#"
003C45r 3               
003C45r 3               ; nt_asm_and_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_and_y
003C45r 3               ; 		.word xt_asm_and_x, z_asm_and_x
003C45r 3               ; 		.byte "and.x"
003C45r 3               
003C45r 3               ; nt_asm_and_y:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_and_z
003C45r 3               ; 		.word xt_asm_and_y, z_asm_and_y
003C45r 3               ; 		.byte "and.y"
003C45r 3               
003C45r 3               ; nt_asm_and_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_and_zi
003C45r 3               ; 		.word xt_asm_and_z, z_asm_and_z
003C45r 3               ; 		.byte "and.z"
003C45r 3               
003C45r 3               ; nt_asm_and_zi:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_and_ziy
003C45r 3               ; 		.word xt_asm_and_zi, z_asm_and_zi
003C45r 3               ; 		.byte "and.zi"
003C45r 3               
003C45r 3               ; nt_asm_and_ziy:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_and_zx
003C45r 3               ; 		.word xt_asm_and_ziy, z_asm_and_ziy
003C45r 3               ; 		.byte "and.ziy"
003C45r 3               
003C45r 3               ; nt_asm_and_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_and_zxi
003C45r 3               ; 		.word xt_asm_and_zx, z_asm_and_zx
003C45r 3               ; 		.byte "and.zx"
003C45r 3               
003C45r 3               ; nt_asm_and_zxi:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_asl
003C45r 3               ; 		.word xt_asm_and_zxi, z_asm_and_zxi
003C45r 3               ; 		.byte "and.zxi"
003C45r 3               
003C45r 3               ; nt_asm_asl:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_asl_a
003C45r 3               ; 		.word xt_asm_asl, z_asm_asl
003C45r 3               ; 		.byte "asl"
003C45r 3               
003C45r 3               ; nt_asm_asl_a:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_asl_x
003C45r 3               ; 		.word xt_asm_asl_a, z_asm_asl_a
003C45r 3               ; 		.byte "asl.a"
003C45r 3               
003C45r 3               ; nt_asm_asl_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_asl_z
003C45r 3               ; 		.word xt_asm_asl_x, z_asm_asl_x
003C45r 3               ; 		.byte "asl.x"
003C45r 3               
003C45r 3               ; nt_asm_asl_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_asl_zx
003C45r 3               ; 		.word xt_asm_asl_z, z_asm_asl_z
003C45r 3               ; 		.byte "asl.z"
003C45r 3               
003C45r 3               ; nt_asm_asl_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_bcc
003C45r 3               ; 		.word xt_asm_asl_zx, z_asm_asl_zx
003C45r 3               ; 		.byte "asl.zx"
003C45r 3               
003C45r 3               ; nt_asm_bcc:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_bcs
003C45r 3               ; 		.word xt_asm_bcc, z_asm_bcc
003C45r 3               ; 		.byte "bcc"
003C45r 3               
003C45r 3               ; nt_asm_bcs:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_beq
003C45r 3               ; 		.word xt_asm_bcs, z_asm_bcs
003C45r 3               ; 		.byte "bcs"
003C45r 3               
003C45r 3               ; nt_asm_beq:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_bit
003C45r 3               ; 		.word xt_asm_beq, z_asm_beq
003C45r 3               ; 		.byte "beq"
003C45r 3               
003C45r 3               ; nt_asm_bit:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_bit_h
003C45r 3               ; 		.word xt_asm_bit, z_asm_bit
003C45r 3               ; 		.byte "bit"
003C45r 3               
003C45r 3               ; nt_asm_bit_h:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_bit_x
003C45r 3               ; 		.word xt_asm_bit_h, z_asm_bit_h
003C45r 3               ; 		.byte "bit.#"
003C45r 3               
003C45r 3               ; nt_asm_bit_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_bit_z
003C45r 3               ; 		.word xt_asm_bit_x, z_asm_bit_x
003C45r 3               ; 		.byte "bit.x"
003C45r 3               
003C45r 3               ; nt_asm_bit_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_bit_zx
003C45r 3               ; 		.word xt_asm_bit_z, z_asm_bit_z
003C45r 3               ; 		.byte "bit.z"
003C45r 3               
003C45r 3               ; nt_asm_bit_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_bmi
003C45r 3               ; 		.word xt_asm_bit_zx, z_asm_bit_zx
003C45r 3               ; 		.byte "bit.zx"
003C45r 3               
003C45r 3               ; nt_asm_bmi:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_bne
003C45r 3               ; 		.word xt_asm_bmi, z_asm_bmi
003C45r 3               ; 		.byte "bmi"
003C45r 3               
003C45r 3               ; nt_asm_bne:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_bpl
003C45r 3               ; 		.word xt_asm_bne, z_asm_bne
003C45r 3               ; 		.byte "bne"
003C45r 3               
003C45r 3               ; nt_asm_bpl:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_bra
003C45r 3               ; 		.word xt_asm_bpl, z_asm_bpl
003C45r 3               ; 		.byte "bpl"
003C45r 3               
003C45r 3               ; nt_asm_bra:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_brk
003C45r 3               ; 		.word xt_asm_bra, z_asm_bra
003C45r 3               ; 		.byte "bra"
003C45r 3               
003C45r 3               ; nt_asm_brk:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_bvc
003C45r 3               ; 		.word xt_asm_brk, z_asm_brk
003C45r 3               ; 		.byte "brk"
003C45r 3               
003C45r 3               ; nt_asm_bvc:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_bvs
003C45r 3               ; 		.word xt_asm_bvc, z_asm_bvc
003C45r 3               ; 		.byte "bvc"
003C45r 3               
003C45r 3               ; nt_asm_bvs:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_clc
003C45r 3               ; 		.word xt_asm_bvs, z_asm_bvs
003C45r 3               ; 		.byte "bvs"
003C45r 3               
003C45r 3               ; nt_asm_clc:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_cld
003C45r 3               ; 		.word xt_asm_clc, z_asm_clc
003C45r 3               ; 		.byte "clc"
003C45r 3               
003C45r 3               ; nt_asm_cld:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_cli
003C45r 3               ; 		.word xt_asm_cld, z_asm_cld
003C45r 3               ; 		.byte "cld"
003C45r 3               
003C45r 3               ; nt_asm_cli:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_clv
003C45r 3               ; 		.word xt_asm_cli, z_asm_cli
003C45r 3               ; 		.byte "cli"
003C45r 3               
003C45r 3               ; nt_asm_clv:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_cmp
003C45r 3               ; 		.word xt_asm_clv, z_asm_clv
003C45r 3               ; 		.byte "clv"
003C45r 3               
003C45r 3               ; nt_asm_cmp:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_cmp_h
003C45r 3               ; 		.word xt_asm_cmp, z_asm_cmp
003C45r 3               ; 		.byte "cmp"
003C45r 3               
003C45r 3               ; nt_asm_cmp_h:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_cmp_x
003C45r 3               ; 		.word xt_asm_cmp_h, z_asm_cmp_h
003C45r 3               ; 		.byte "cmp.#"
003C45r 3               
003C45r 3               ; nt_asm_cmp_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_cmp_y
003C45r 3               ; 		.word xt_asm_cmp_x, z_asm_cmp_x
003C45r 3               ; 		.byte "cmp.x"
003C45r 3               
003C45r 3               ; nt_asm_cmp_y:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_cmp_z
003C45r 3               ; 		.word xt_asm_cmp_y, z_asm_cmp_y
003C45r 3               ; 		.byte "cmp.y"
003C45r 3               
003C45r 3               ; nt_asm_cmp_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_cmp_zi
003C45r 3               ; 		.word xt_asm_cmp_z, z_asm_cmp_z
003C45r 3               ; 		.byte "cmp.z"
003C45r 3               
003C45r 3               ; nt_asm_cmp_zi:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_cmp_ziy
003C45r 3               ; 		.word xt_asm_cmp_zi, z_asm_cmp_zi
003C45r 3               ; 		.byte "cmp.zi"
003C45r 3               
003C45r 3               ; nt_asm_cmp_ziy:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_cmp_zx
003C45r 3               ; 		.word xt_asm_cmp_ziy, z_asm_cmp_ziy
003C45r 3               ; 		.byte "cmp.ziy"
003C45r 3               
003C45r 3               ; nt_asm_cmp_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_cmp_zxi
003C45r 3               ; 		.word xt_asm_cmp_zx, z_asm_cmp_zx
003C45r 3               ; 		.byte "cmp.zx"
003C45r 3               
003C45r 3               ; nt_asm_cmp_zxi:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_cpx
003C45r 3               ; 		.word xt_asm_cmp_zxi, z_asm_cmp_zxi
003C45r 3               ; 		.byte "cmp.zxi"
003C45r 3               
003C45r 3               ; nt_asm_cpx:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_cpx_h
003C45r 3               ; 		.word xt_asm_cpx, z_asm_cpx
003C45r 3               ; 		.byte "cpx"
003C45r 3               
003C45r 3               ; nt_asm_cpx_h:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_cpx_z
003C45r 3               ; 		.word xt_asm_cpx_h, z_asm_cpx_h
003C45r 3               ; 		.byte "cpx.#"
003C45r 3               
003C45r 3               ; nt_asm_cpx_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_cpy
003C45r 3               ; 		.word xt_asm_cpx_z, z_asm_cpx_z
003C45r 3               ; 		.byte "cpx.z"
003C45r 3               
003C45r 3               ; nt_asm_cpy:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_cpy_h
003C45r 3               ; 		.word xt_asm_cpy, z_asm_cpy
003C45r 3               ; 		.byte "cpy"
003C45r 3               
003C45r 3               ; nt_asm_cpy_h:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_cpy_z
003C45r 3               ; 		.word xt_asm_cpy_h, z_asm_cpy_h
003C45r 3               ; 		.byte "cpy.#"
003C45r 3               
003C45r 3               ; nt_asm_cpy_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_dec
003C45r 3               ; 		.word xt_asm_cpy_z, z_asm_cpy_z
003C45r 3               ; 		.byte "cpy.z"
003C45r 3               
003C45r 3               ; nt_asm_dec:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_dec_a
003C45r 3               ; 		.word xt_asm_dec, z_asm_dec
003C45r 3               ; 		.byte "dec"
003C45r 3               
003C45r 3               ; nt_asm_dec_a:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_dec_x
003C45r 3               ; 		.word xt_asm_dec_a, z_asm_dec_a
003C45r 3               ; 		.byte "dec.a"
003C45r 3               
003C45r 3               ; nt_asm_dec_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_dec_z
003C45r 3               ; 		.word xt_asm_dec_x, z_asm_dec_x
003C45r 3               ; 		.byte "dec.x"
003C45r 3               
003C45r 3               ; nt_asm_dec_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_dec_zx
003C45r 3               ; 		.word xt_asm_dec_z, z_asm_dec_z
003C45r 3               ; 		.byte "dec.z"
003C45r 3               
003C45r 3               ; nt_asm_dec_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_dex
003C45r 3               ; 		.word xt_asm_dec_zx, z_asm_dec_zx
003C45r 3               ; 		.byte "dec.zx"
003C45r 3               
003C45r 3               ; nt_asm_dex:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_dey
003C45r 3               ; 		.word xt_asm_dex, z_asm_dex
003C45r 3               ; 		.byte "dex"
003C45r 3               
003C45r 3               ; nt_asm_dey:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_eor
003C45r 3               ; 		.word xt_asm_dey, z_asm_dey
003C45r 3               ; 		.byte "dey"
003C45r 3               
003C45r 3               ; nt_asm_eor:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_eor_h
003C45r 3               ; 		.word xt_asm_eor, z_asm_eor
003C45r 3               ; 		.byte "eor"
003C45r 3               
003C45r 3               ; nt_asm_eor_h:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_eor_x
003C45r 3               ; 		.word xt_asm_eor_h, z_asm_eor_h
003C45r 3               ; 		.byte "eor.#"
003C45r 3               
003C45r 3               ; nt_asm_eor_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_eor_y
003C45r 3               ; 		.word xt_asm_eor_x, z_asm_eor_x
003C45r 3               ; 		.byte "eor.x"
003C45r 3               
003C45r 3               ; nt_asm_eor_y:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_eor_z
003C45r 3               ; 		.word xt_asm_eor_y, z_asm_eor_y
003C45r 3               ; 		.byte "eor.y"
003C45r 3               
003C45r 3               ; nt_asm_eor_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_eor_zi
003C45r 3               ; 		.word xt_asm_eor_z, z_asm_eor_z
003C45r 3               ; 		.byte "eor.z"
003C45r 3               
003C45r 3               ; nt_asm_eor_zi:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_eor_ziy
003C45r 3               ; 		.word xt_asm_eor_zi, z_asm_eor_zi
003C45r 3               ; 		.byte "eor.zi"
003C45r 3               
003C45r 3               ; nt_asm_eor_ziy:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_eor_zx
003C45r 3               ; 		.word xt_asm_eor_ziy, z_asm_eor_ziy
003C45r 3               ; 		.byte "eor.ziy"
003C45r 3               
003C45r 3               ; nt_asm_eor_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_eor_zxi
003C45r 3               ; 		.word xt_asm_eor_zx, z_asm_eor_zx
003C45r 3               ; 		.byte "eor.zx"
003C45r 3               
003C45r 3               ; nt_asm_eor_zxi:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_inc
003C45r 3               ; 		.word xt_asm_eor_zxi, z_asm_eor_zxi
003C45r 3               ; 		.byte "eor.zxi"
003C45r 3               
003C45r 3               ; nt_asm_inc:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_inc_a
003C45r 3               ; 		.word xt_asm_inc, z_asm_inc
003C45r 3               ; 		.byte "inc"
003C45r 3               
003C45r 3               ; nt_asm_inc_a:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_inc_x
003C45r 3               ; 		.word xt_asm_inc_a, z_asm_inc_a
003C45r 3               ; 		.byte "inc.a"
003C45r 3               
003C45r 3               ; nt_asm_inc_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_inc_z
003C45r 3               ; 		.word xt_asm_inc_x, z_asm_inc_x
003C45r 3               ; 		.byte "inc.x"
003C45r 3               
003C45r 3               ; nt_asm_inc_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_inc_zx
003C45r 3               ; 		.word xt_asm_inc_z, z_asm_inc_z
003C45r 3               ; 		.byte "inc.z"
003C45r 3               
003C45r 3               ; nt_asm_inc_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_inx
003C45r 3               ; 		.word xt_asm_inc_zx, z_asm_inc_zx
003C45r 3               ; 		.byte "inc.zx"
003C45r 3               
003C45r 3               ; nt_asm_inx:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_iny
003C45r 3               ; 		.word xt_asm_inx, z_asm_inx
003C45r 3               ; 		.byte "inx"
003C45r 3               
003C45r 3               ; nt_asm_iny:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_jmp
003C45r 3               ; 		.word xt_asm_iny, z_asm_iny
003C45r 3               ; 		.byte "iny"
003C45r 3               
003C45r 3               ; nt_asm_jmp:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_jmp_i
003C45r 3               ; 		.word xt_asm_jmp, z_asm_jmp
003C45r 3               ; 		.byte "jmp"
003C45r 3               
003C45r 3               ; nt_asm_jmp_i:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_jmp_xi
003C45r 3               ; 		.word xt_asm_jmp_i, z_asm_jmp_i
003C45r 3               ; 		.byte "jmp.i"
003C45r 3               
003C45r 3               ; nt_asm_jmp_xi:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_jsr
003C45r 3               ; 		.word xt_asm_jmp_xi, z_asm_jmp_xi
003C45r 3               ; 		.byte "jmp.xi"
003C45r 3               
003C45r 3               ; nt_asm_jsr:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_lda
003C45r 3               ; 		.word xt_asm_jsr, z_asm_jsr
003C45r 3               ; 		.byte "jsr"
003C45r 3               
003C45r 3               ; nt_asm_lda:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_lda_h
003C45r 3               ; 		.word xt_asm_lda, z_asm_lda
003C45r 3               ; 		.byte "lda"
003C45r 3               
003C45r 3               ; nt_asm_lda_h:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_lda_x
003C45r 3               ; 		.word xt_asm_lda_h, z_asm_lda_h
003C45r 3               ; 		.byte "lda.#"
003C45r 3               
003C45r 3               ; nt_asm_lda_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_lda_y
003C45r 3               ; 		.word xt_asm_lda_x, z_asm_lda_x
003C45r 3               ; 		.byte "lda.x"
003C45r 3               
003C45r 3               ; nt_asm_lda_y:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_lda_z
003C45r 3               ; 		.word xt_asm_lda_y, z_asm_lda_y
003C45r 3               ; 		.byte "lda.y"
003C45r 3               
003C45r 3               ; nt_asm_lda_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_lda_zi
003C45r 3               ; 		.word xt_asm_lda_z, z_asm_lda_z
003C45r 3               ; 		.byte "lda.z"
003C45r 3               
003C45r 3               ; nt_asm_lda_zi:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_lda_ziy
003C45r 3               ; 		.word xt_asm_lda_zi, z_asm_lda_zi
003C45r 3               ; 		.byte "lda.zi"
003C45r 3               
003C45r 3               ; nt_asm_lda_ziy:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_lda_zx
003C45r 3               ; 		.word xt_asm_lda_ziy, z_asm_lda_ziy
003C45r 3               ; 		.byte "lda.ziy"
003C45r 3               
003C45r 3               ; nt_asm_lda_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_lda_zxi
003C45r 3               ; 		.word xt_asm_lda_zx, z_asm_lda_zx
003C45r 3               ; 		.byte "lda.zx"
003C45r 3               
003C45r 3               ; nt_asm_lda_zxi:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_ldx
003C45r 3               ; 		.word xt_asm_lda_zxi, z_asm_lda_zxi
003C45r 3               ; 		.byte "lda.zxi"
003C45r 3               
003C45r 3               ; nt_asm_ldx:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_ldx_h
003C45r 3               ; 		.word xt_asm_ldx, z_asm_ldx
003C45r 3               ; 		.byte "ldx"
003C45r 3               
003C45r 3               ; nt_asm_ldx_h:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_ldx_y
003C45r 3               ; 		.word xt_asm_ldx_h, z_asm_ldx_h
003C45r 3               ; 		.byte "ldx.#"
003C45r 3               
003C45r 3               ; nt_asm_ldx_y:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_ldx_z
003C45r 3               ; 		.word xt_asm_ldx_y, z_asm_ldx_y
003C45r 3               ; 		.byte "ldx.y"
003C45r 3               
003C45r 3               ; nt_asm_ldx_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_ldx_zy
003C45r 3               ; 		.word xt_asm_ldx_z, z_asm_ldx_z
003C45r 3               ; 		.byte "ldx.z"
003C45r 3               
003C45r 3               ; nt_asm_ldx_zy:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_ldy
003C45r 3               ; 		.word xt_asm_ldx_zy, z_asm_ldx_zy
003C45r 3               ; 		.byte "ldx.zy"
003C45r 3               
003C45r 3               ; nt_asm_ldy:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_ldy_h
003C45r 3               ; 		.word xt_asm_ldy, z_asm_ldy
003C45r 3               ; 		.byte "ldy"
003C45r 3               
003C45r 3               ; nt_asm_ldy_h:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_ldy_x
003C45r 3               ; 		.word xt_asm_ldy_h, z_asm_ldy_h
003C45r 3               ; 		.byte "ldy.#"
003C45r 3               
003C45r 3               ; nt_asm_ldy_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_ldy_z
003C45r 3               ; 		.word xt_asm_ldy_x, z_asm_ldy_x
003C45r 3               ; 		.byte "ldy.x"
003C45r 3               
003C45r 3               ; nt_asm_ldy_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_ldy_zx
003C45r 3               ; 		.word xt_asm_ldy_z, z_asm_ldy_z
003C45r 3               ; 		.byte "ldy.z"
003C45r 3               
003C45r 3               ; nt_asm_ldy_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_lsr
003C45r 3               ; 		.word xt_asm_ldy_zx, z_asm_ldy_zx
003C45r 3               ; 		.byte "ldy.zx"
003C45r 3               
003C45r 3               ; nt_asm_lsr:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_lsr_a
003C45r 3               ; 		.word xt_asm_lsr, z_asm_lsr
003C45r 3               ; 		.byte "lsr"
003C45r 3               
003C45r 3               ; nt_asm_lsr_a:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_lsr_x
003C45r 3               ; 		.word xt_asm_lsr_a, z_asm_lsr_a
003C45r 3               ; 		.byte "lsr.a"
003C45r 3               
003C45r 3               ; nt_asm_lsr_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_lsr_z
003C45r 3               ; 		.word xt_asm_lsr_x, z_asm_lsr_x
003C45r 3               ; 		.byte "lsr.x"
003C45r 3               
003C45r 3               ; nt_asm_lsr_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_lsr_zx
003C45r 3               ; 		.word xt_asm_lsr_z, z_asm_lsr_z
003C45r 3               ; 		.byte "lsr.z"
003C45r 3               
003C45r 3               ; nt_asm_lsr_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_nop
003C45r 3               ; 		.word xt_asm_lsr_zx, z_asm_lsr_zx
003C45r 3               ; 		.byte "lsr.zx"
003C45r 3               
003C45r 3               ; nt_asm_nop:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_ora
003C45r 3               ; 		.word xt_asm_nop, z_asm_nop
003C45r 3               ; 		.byte "nop"
003C45r 3               
003C45r 3               ; nt_asm_ora:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_ora_h
003C45r 3               ; 		.word xt_asm_ora, z_asm_ora
003C45r 3               ; 		.byte "ora"
003C45r 3               
003C45r 3               ; nt_asm_ora_h:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_ora_x
003C45r 3               ; 		.word xt_asm_ora_h, z_asm_ora_h
003C45r 3               ; 		.byte "ora.#"
003C45r 3               
003C45r 3               ; nt_asm_ora_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_ora_y
003C45r 3               ; 		.word xt_asm_ora_x, z_asm_ora_x
003C45r 3               ; 		.byte "ora.x"
003C45r 3               
003C45r 3               ; nt_asm_ora_y:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_ora_z
003C45r 3               ; 		.word xt_asm_ora_y, z_asm_ora_y
003C45r 3               ; 		.byte "ora.y"
003C45r 3               
003C45r 3               ; nt_asm_ora_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_ora_zi
003C45r 3               ; 		.word xt_asm_ora_z, z_asm_ora_z
003C45r 3               ; 		.byte "ora.z"
003C45r 3               
003C45r 3               ; nt_asm_ora_zi:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_ora_ziy
003C45r 3               ; 		.word xt_asm_ora_zi, z_asm_ora_zi
003C45r 3               ; 		.byte "ora.zi"
003C45r 3               
003C45r 3               ; nt_asm_ora_ziy:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_ora_zx
003C45r 3               ; 		.word xt_asm_ora_ziy, z_asm_ora_ziy
003C45r 3               ; 		.byte "ora.ziy"
003C45r 3               
003C45r 3               ; nt_asm_ora_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_ora_zxi
003C45r 3               ; 		.word xt_asm_ora_zx, z_asm_ora_zx
003C45r 3               ; 		.byte "ora.zx"
003C45r 3               
003C45r 3               ; nt_asm_ora_zxi:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_pha
003C45r 3               ; 		.word xt_asm_ora_zxi, z_asm_ora_zxi
003C45r 3               ; 		.byte "ora.zxi"
003C45r 3               
003C45r 3               ; nt_asm_pha:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_php
003C45r 3               ; 		.word xt_asm_pha, z_asm_pha
003C45r 3               ; 		.byte "pha"
003C45r 3               
003C45r 3               ; nt_asm_php:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_phx
003C45r 3               ; 		.word xt_asm_php, z_asm_php
003C45r 3               ; 		.byte "php"
003C45r 3               
003C45r 3               ; nt_asm_phx:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_phy
003C45r 3               ; 		.word xt_asm_phx, z_asm_phx
003C45r 3               ; 		.byte "phx"
003C45r 3               
003C45r 3               ; nt_asm_phy:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_pla
003C45r 3               ; 		.word xt_asm_phy, z_asm_phy
003C45r 3               ; 		.byte "phy"
003C45r 3               
003C45r 3               ; nt_asm_pla:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_plp
003C45r 3               ; 		.word xt_asm_pla, z_asm_pla
003C45r 3               ; 		.byte "pla"
003C45r 3               
003C45r 3               ; nt_asm_plp:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_plx
003C45r 3               ; 		.word xt_asm_plp, z_asm_plp
003C45r 3               ; 		.byte "plp"
003C45r 3               
003C45r 3               ; nt_asm_plx:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_ply
003C45r 3               ; 		.word xt_asm_plx, z_asm_plx
003C45r 3               ; 		.byte "plx"
003C45r 3               
003C45r 3               ; nt_asm_ply:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_rol
003C45r 3               ; 		.word xt_asm_ply, z_asm_ply
003C45r 3               ; 		.byte "ply"
003C45r 3               
003C45r 3               ; nt_asm_rol:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_rol_a
003C45r 3               ; 		.word xt_asm_rol, z_asm_rol
003C45r 3               ; 		.byte "rol"
003C45r 3               
003C45r 3               ; nt_asm_rol_a:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_rol_x
003C45r 3               ; 		.word xt_asm_rol_a, z_asm_rol_a
003C45r 3               ; 		.byte "rol.a"
003C45r 3               
003C45r 3               ; nt_asm_rol_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_rol_z
003C45r 3               ; 		.word xt_asm_rol_x, z_asm_rol_x
003C45r 3               ; 		.byte "rol.x"
003C45r 3               
003C45r 3               ; nt_asm_rol_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_rol_zx
003C45r 3               ; 		.word xt_asm_rol_z, z_asm_rol_z
003C45r 3               ; 		.byte "rol.z"
003C45r 3               
003C45r 3               ; nt_asm_rol_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_ror
003C45r 3               ; 		.word xt_asm_rol_zx, z_asm_rol_zx
003C45r 3               ; 		.byte "rol.zx"
003C45r 3               
003C45r 3               ; nt_asm_ror:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_ror_a
003C45r 3               ; 		.word xt_asm_ror, z_asm_ror
003C45r 3               ; 		.byte "ror"
003C45r 3               
003C45r 3               ; nt_asm_ror_a:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_ror_x
003C45r 3               ; 		.word xt_asm_ror_a, z_asm_ror_a
003C45r 3               ; 		.byte "ror.a"
003C45r 3               
003C45r 3               ; nt_asm_ror_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_ror_z
003C45r 3               ; 		.word xt_asm_ror_x, z_asm_ror_x
003C45r 3               ; 		.byte "ror.x"
003C45r 3               
003C45r 3               ; nt_asm_ror_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_ror_zx
003C45r 3               ; 		.word xt_asm_ror_z, z_asm_ror_z
003C45r 3               ; 		.byte "ror.z"
003C45r 3               
003C45r 3               ; nt_asm_ror_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_rti
003C45r 3               ; 		.word xt_asm_ror_zx, z_asm_ror_zx
003C45r 3               ; 		.byte "ror.zx"
003C45r 3               
003C45r 3               ; nt_asm_rti:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_rts
003C45r 3               ; 		.word xt_asm_rti, z_asm_rti
003C45r 3               ; 		.byte "rti"
003C45r 3               
003C45r 3               ; nt_asm_rts:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_sbc
003C45r 3               ; 		.word xt_asm_rts, z_asm_rts
003C45r 3               ; 		.byte "rts"
003C45r 3               
003C45r 3               ; nt_asm_sbc:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_sbc_h
003C45r 3               ; 		.word xt_asm_sbc, z_asm_sbc
003C45r 3               ; 		.byte "sbc"
003C45r 3               
003C45r 3               ; nt_asm_sbc_h:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_sbc_x
003C45r 3               ; 		.word xt_asm_sbc_h, z_asm_sbc_h
003C45r 3               ; 		.byte "sbc.#"
003C45r 3               
003C45r 3               ; nt_asm_sbc_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_sbc_y
003C45r 3               ; 		.word xt_asm_sbc_x, z_asm_sbc_x
003C45r 3               ; 		.byte "sbc.x"
003C45r 3               
003C45r 3               ; nt_asm_sbc_y:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_sbc_z
003C45r 3               ; 		.word xt_asm_sbc_y, z_asm_sbc_y
003C45r 3               ; 		.byte "sbc.y"
003C45r 3               
003C45r 3               ; nt_asm_sbc_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_sbc_zi
003C45r 3               ; 		.word xt_asm_sbc_z, z_asm_sbc_z
003C45r 3               ; 		.byte "sbc.z"
003C45r 3               
003C45r 3               ; nt_asm_sbc_zi:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_sbc_ziy
003C45r 3               ; 		.word xt_asm_sbc_zi, z_asm_sbc_zi
003C45r 3               ; 		.byte "sbc.zi"
003C45r 3               
003C45r 3               ; nt_asm_sbc_ziy:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_sbc_zx
003C45r 3               ; 		.word xt_asm_sbc_ziy, z_asm_sbc_ziy
003C45r 3               ; 		.byte "sbc.ziy"
003C45r 3               
003C45r 3               ; nt_asm_sbc_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_sbc_zxi
003C45r 3               ; 		.word xt_asm_sbc_zx, z_asm_sbc_zx
003C45r 3               ; 		.byte "sbc.zx"
003C45r 3               
003C45r 3               ; nt_asm_sbc_zxi:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_sec
003C45r 3               ; 		.word xt_asm_sbc_zxi, z_asm_sbc_zxi
003C45r 3               ; 		.byte "sbc.zxi"
003C45r 3               
003C45r 3               ; nt_asm_sec:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_sed
003C45r 3               ; 		.word xt_asm_sec, z_asm_sec
003C45r 3               ; 		.byte "sec"
003C45r 3               
003C45r 3               ; nt_asm_sed:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_sei
003C45r 3               ; 		.word xt_asm_sed, z_asm_sed
003C45r 3               ; 		.byte "sed"
003C45r 3               
003C45r 3               ; nt_asm_sei:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_sta
003C45r 3               ; 		.word xt_asm_sei, z_asm_sei
003C45r 3               ; 		.byte "sei"
003C45r 3               
003C45r 3               ; nt_asm_sta:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_sta_x
003C45r 3               ; 		.word xt_asm_sta, z_asm_sta
003C45r 3               ; 		.byte "sta"
003C45r 3               
003C45r 3               ; nt_asm_sta_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_sta_y
003C45r 3               ; 		.word xt_asm_sta_x, z_asm_sta_x
003C45r 3               ; 		.byte "sta.x"
003C45r 3               
003C45r 3               ; nt_asm_sta_y:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_sta_z
003C45r 3               ; 		.word xt_asm_sta_y, z_asm_sta_y
003C45r 3               ; 		.byte "sta.y"
003C45r 3               
003C45r 3               ; nt_asm_sta_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_sta_zi
003C45r 3               ; 		.word xt_asm_sta_z, z_asm_sta_z
003C45r 3               ; 		.byte "sta.z"
003C45r 3               
003C45r 3               ; nt_asm_sta_zi:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_sta_ziy
003C45r 3               ; 		.word xt_asm_sta_zi, z_asm_sta_zi
003C45r 3               ; 		.byte "sta.zi"
003C45r 3               
003C45r 3               ; nt_asm_sta_ziy:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_sta_zx
003C45r 3               ; 		.word xt_asm_sta_ziy, z_asm_sta_ziy
003C45r 3               ; 		.byte "sta.ziy"
003C45r 3               
003C45r 3               ; nt_asm_sta_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_sta_zxi
003C45r 3               ; 		.word xt_asm_sta_zx, z_asm_sta_zx
003C45r 3               ; 		.byte "sta.zx"
003C45r 3               
003C45r 3               ; nt_asm_sta_zxi:
003C45r 3               ; 		.byte 7, IM
003C45r 3               ;                 .word nt_asm_stx
003C45r 3               ; 		.word xt_asm_sta_zxi, z_asm_sta_zxi
003C45r 3               ; 		.byte "sta.zxi"
003C45r 3               
003C45r 3               ; nt_asm_stx:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_stx_z
003C45r 3               ; 		.word xt_asm_stx, z_asm_stx
003C45r 3               ; 		.byte "stx"
003C45r 3               
003C45r 3               ; nt_asm_stx_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_stx_zy
003C45r 3               ; 		.word xt_asm_stx_z, z_asm_stx_z
003C45r 3               ; 		.byte "stx.z"
003C45r 3               
003C45r 3               ; nt_asm_stx_zy:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_sty
003C45r 3               ; 		.word xt_asm_stx_zy, z_asm_stx_zy
003C45r 3               ; 		.byte "stx.zy"
003C45r 3               
003C45r 3               ; nt_asm_sty:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_sty_z
003C45r 3               ; 		.word xt_asm_sty, z_asm_sty
003C45r 3               ; 		.byte "sty"
003C45r 3               
003C45r 3               ; nt_asm_sty_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_sty_zx
003C45r 3               ; 		.word xt_asm_sty_z, z_asm_sty_z
003C45r 3               ; 		.byte "sty.z"
003C45r 3               
003C45r 3               ; nt_asm_sty_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_stz
003C45r 3               ; 		.word xt_asm_sty_zx, z_asm_sty_zx
003C45r 3               ; 		.byte "sty.zx"
003C45r 3               
003C45r 3               ; nt_asm_stz:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_stz_x
003C45r 3               ; 		.word xt_asm_stz, z_asm_stz
003C45r 3               ; 		.byte "stz"
003C45r 3               
003C45r 3               ; nt_asm_stz_x:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_stz_z
003C45r 3               ; 		.word xt_asm_stz_x, z_asm_stz_x
003C45r 3               ; 		.byte "stz.x"
003C45r 3               
003C45r 3               ; nt_asm_stz_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_stz_zx
003C45r 3               ; 		.word xt_asm_stz_z, z_asm_stz_z
003C45r 3               ; 		.byte "stz.z"
003C45r 3               
003C45r 3               ; nt_asm_stz_zx:
003C45r 3               ; 		.byte 6, IM
003C45r 3               ;                 .word nt_asm_tax
003C45r 3               ; 		.word xt_asm_stz_zx, z_asm_stz_zx
003C45r 3               ; 		.byte "stz.zx"
003C45r 3               
003C45r 3               ; nt_asm_tax:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_tay
003C45r 3               ; 		.word xt_asm_tax, z_asm_tax
003C45r 3               ; 		.byte "tax"
003C45r 3               
003C45r 3               ; nt_asm_tay:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_trb
003C45r 3               ; 		.word xt_asm_tay, z_asm_tay
003C45r 3               ; 		.byte "tay"
003C45r 3               
003C45r 3               ; nt_asm_trb:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_trb_z
003C45r 3               ; 		.word xt_asm_trb, z_asm_trb
003C45r 3               ; 		.byte "trb"
003C45r 3               
003C45r 3               ; nt_asm_trb_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_tsb
003C45r 3               ; 		.word xt_asm_trb_z, z_asm_trb_z
003C45r 3               ; 		.byte "trb.z"
003C45r 3               
003C45r 3               ; nt_asm_tsb:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_tsb_z
003C45r 3               ; 		.word xt_asm_tsb, z_asm_tsb
003C45r 3               ; 		.byte "tsb"
003C45r 3               
003C45r 3               ; nt_asm_tsb_z:
003C45r 3               ; 		.byte 5, IM
003C45r 3               ;                 .word nt_asm_tsx
003C45r 3               ; 		.word xt_asm_tsb_z, z_asm_tsb_z
003C45r 3               ; 		.byte "tsb.z"
003C45r 3               
003C45r 3               ; nt_asm_tsx:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_txa
003C45r 3               ; 		.word xt_asm_tsx, z_asm_tsx
003C45r 3               ; 		.byte "tsx"
003C45r 3               
003C45r 3               ; nt_asm_txa:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_txs
003C45r 3               ; 		.word xt_asm_txa, z_asm_txa
003C45r 3               ; 		.byte "txa"
003C45r 3               
003C45r 3               ; nt_asm_txs:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_tya
003C45r 3               ; 		.word xt_asm_txs, z_asm_txs
003C45r 3               ; 		.byte "txs"
003C45r 3               
003C45r 3               ; nt_asm_tya:
003C45r 3               ; 		.byte 3, IM
003C45r 3               ;                 .word nt_asm_arrow
003C45r 3               ; 		.word xt_asm_tya, z_asm_tya
003C45r 3               ; 		.byte "tya"
003C45r 3               
003C45r 3               ; ; Assembler pseudo-instructions, directives and macros
003C45r 3               
003C45r 3               ; nt_asm_arrow:   ; uses same code as HERE, but immediate
003C45r 3               ;                 .byte 3, IM
003C45r 3               ;                 .word nt_asm_back_jump
003C45r 3               ;                 .word xt_asm_arrow, z_asm_arrow
003C45r 3               ;                 .byte "-->"
003C45r 3               
003C45r 3               
003C45r 3               ; nt_asm_back_jump:  ; syntactic sugar, does nothing
003C45r 3               ;                 .byte 2, IM
003C45r 3               ;                 .word nt_asm_back_branch
003C45r 3               ;                 .word xt_asm_back_jump, z_asm_back_jump
003C45r 3               ;                 .byte "<j"
003C45r 3               
003C45r 3               ; nt_asm_back_branch:
003C45r 3               ;                 .byte 2, IM
003C45r 3               ;                 .word nt_asm_push_a
003C45r 3               ;                 .word xt_asm_back_branch, z_asm_back_branch
003C45r 3               ;                 .byte "<b"
003C45r 3               
003C45r 3               ; nt_asm_push_a:
003C45r 3               ;                 .byte 6, IM
003C45r 3               ;                 .word 0000
003C45r 3               ;                 .word xt_asm_push_a, z_asm_push_a
003C45r 3               ;                 .byte "push-a"
003C45r 3               
003C45r 3               
003C45r 3               
003C45r 3               ; END of ASSEMBLER-WORDLIST
003C45r 3               
003C45r 3               ; END
003C45r 3               
003C45r 2                   .include "strings.s"          ; Headers of native words
003C45r 3               ; List of Strings for Tali Forth 2
003C45r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
003C45r 3               ; First version: 01. Apr 2016 (for Liara Forth)
003C45r 3               ; This version: 28. Dec 2018
003C45r 3               
003C45r 3               ; This file is included by taliforth.asm
003C45r 3               
003C45r 3               ; ## GENERAL STRINGS
003C45r 3               
003C45r 3               ; All general strings must be zero-terminated, names start with "s_",
003C45r 3               ; aliases with "str_"
003C45r 3               
003C45r 3               str_ok =              0
003C45r 3               str_compile =         1
003C45r 3               str_redefined =       2
003C45r 3               str_wid_forth =       3
003C45r 3               str_abc_lower =       4
003C45r 3               str_abc_upper =       5
003C45r 3               str_wid_editor =      6
003C45r 3               str_wid_assembler =   7
003C45r 3               str_wid_root =        8
003C45r 3               str_see_flags =       9
003C45r 3               str_see_nt =         10
003C45r 3               str_see_xt =         11
003C45r 3               str_see_size =       12
003C45r 3               
003C45r 3               ; Since we can't fit a 16-bit address in a register, we use indexes as offsets
003C45r 3               ; to tables as error and string numbers.
003C45r 3               string_table:
003C45r 3  rr rr rr rr          .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
003C49r 3  rr rr rr rr  
003C4Dr 3  rr rr        
003C4Fr 3  rr rr rr rr          .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
003C53r 3  rr rr rr rr  
003C57r 3  rr rr rr rr          .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
003C5Br 3  rr rr rr rr  
003C5Fr 3               
003C5Fr 3  20 6F 6B 00  s_ok:         .byte " ok", 0         ; note space at beginning
003C63r 3  20 63 6F 6D  s_compiled:   .byte " compiled", 0   ; note space at beginning
003C67r 3  70 69 6C 65  
003C6Br 3  64 00        
003C6Dr 3  72 65 64 65  s_redefined:  .byte "redefined ", 0  ; note space at end
003C71r 3  66 69 6E 65  
003C75r 3  64 20 00     
003C78r 3               
003C78r 3  30 31 32 33  s_abc_lower:  .byte "0123456789abcdefghijklmnopqrstuvwxyz"
003C7Cr 3  34 35 36 37  
003C80r 3  38 39 61 62  
003C9Cr 3  30 31 32 33  s_abc_upper:  .byte "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
003CA0r 3  34 35 36 37  
003CA4r 3  38 39 41 42  
003CC0r 3               
003CC0r 3  41 73 73 65  s_wid_asm:    .byte "Assembler ", 0  ; Wordlist ID 2, note space at end
003CC4r 3  6D 62 6C 65  
003CC8r 3  72 20 00     
003CCBr 3  45 64 69 74  s_wid_editor: .byte "Editor ", 0     ; Wordlist ID 1, note space at end
003CCFr 3  6F 72 20 00  
003CD3r 3  46 6F 72 74  s_wid_forth:  .byte "Forth ", 0      ; Wordlist ID 0, note space at end
003CD7r 3  68 20 00     
003CDAr 3  52 6F 6F 74  s_wid_root:   .byte "Root ", 0       ; Wordlist ID 3, note space at end
003CDEr 3  20 00        
003CE0r 3               
003CE0r 3  66 6C 61 67  s_see_flags:  .byte "flags (CO AN IM NN UF HC): ", 0
003CE4r 3  73 20 28 43  
003CE8r 3  4F 20 41 4E  
003CFCr 3  6E 74 3A 20  s_see_nt:     .byte "nt: ", 0
003D00r 3  00           
003D01r 3  78 74 3A 20  s_see_xt:     .byte "xt: ", 0
003D05r 3  00           
003D06r 3  73 69 7A 65  s_see_size:   .byte "size (decimal): ", 0
003D0Ar 3  20 28 64 65  
003D0Er 3  63 69 6D 61  
003D17r 3               
003D17r 3               
003D17r 3               ; ## ERROR STRINGS
003D17r 3               
003D17r 3               ; All error strings must be zero-terminated, all names start with "es_",
003D17r 3               ; aliases with "err_". If the string texts are changed, the test suite must be
003D17r 3               ; as well
003D17r 3               
003D17r 3               err_allot =        0
003D17r 3               err_badsource =    1
003D17r 3               err_compileonly =  2
003D17r 3               err_defer =        3
003D17r 3               err_divzero =      4
003D17r 3               err_noname =       5
003D17r 3               err_refill =       6
003D17r 3               err_state =        7
003D17r 3               err_syntax =       8
003D17r 3               err_underflow =    9
003D17r 3               err_negallot =     10
003D17r 3               err_wordlist =     11
003D17r 3               err_blockwords =   12
003D17r 3               
003D17r 3               error_table:
003D17r 3  rr rr rr rr          .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
003D1Br 3  rr rr rr rr  
003D1Fr 3  rr rr rr rr          .word es_divzero, es_noname, es_refill, es_state        ;  4-7
003D23r 3  rr rr rr rr  
003D27r 3  rr rr rr rr          .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
003D2Br 3  rr rr rr rr  
003D2Fr 3  rr rr                .word es_blockwords                                    ; 12
003D31r 3               
003D31r 3  41 4C 4C 4F  es_allot:       .byte "ALLOT using all available memory", 0
003D35r 3  54 20 75 73  
003D39r 3  69 6E 67 20  
003D52r 3  49 6C 6C 65  es_badsource:   .byte "Illegal SOURCE-ID during REFILL", 0
003D56r 3  67 61 6C 20  
003D5Ar 3  53 4F 55 52  
003D72r 3  49 6E 74 65  es_compileonly: .byte "Interpreting a compile-only word", 0
003D76r 3  72 70 72 65  
003D7Ar 3  74 69 6E 67  
003D93r 3  44 45 46 45  es_defer:       .byte "DEFERed word not defined yet", 0
003D97r 3  52 65 64 20  
003D9Br 3  77 6F 72 64  
003DB0r 3  44 69 76 69  es_divzero:     .byte "Division by zero", 0
003DB4r 3  73 69 6F 6E  
003DB8r 3  20 62 79 20  
003DC1r 3  50 61 72 73  es_noname:      .byte "Parsing failure", 0
003DC5r 3  69 6E 67 20  
003DC9r 3  66 61 69 6C  
003DD1r 3  51 55 49 54  es_refill:      .byte "QUIT could not get input (REFILL returned -1)", 0
003DD5r 3  20 63 6F 75  
003DD9r 3  6C 64 20 6E  
003DFFr 3  41 6C 72 65  es_state:       .byte "Already in compile mode", 0
003E03r 3  61 64 79 20  
003E07r 3  69 6E 20 63  
003E17r 3  55 6E 64 65  es_syntax:      .byte "Undefined word", 0
003E1Br 3  66 69 6E 65  
003E1Fr 3  64 20 77 6F  
003E26r 3  53 74 61 63  es_underflow:   .byte "Stack underflow", 0
003E2Ar 3  6B 20 75 6E  
003E2Er 3  64 65 72 66  
003E36r 3  4D 61 78 20  es_negallot:    .byte "Max memory freed with ALLOT", 0
003E3Ar 3  6D 65 6D 6F  
003E3Er 3  72 79 20 66  
003E52r 3  4E 6F 20 77  es_wordlist:    .byte "No wordlists available", 0
003E56r 3  6F 72 64 6C  
003E5Ar 3  69 73 74 73  
003E69r 3  50 6C 65 61  es_blockwords:  .byte "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
003E6Dr 3  73 65 20 61  
003E71r 3  73 73 69 67  
003EA8r 3               
003EA8r 3               ; ## ENVIRONMENT STRINGS
003EA8r 3               
003EA8r 3               ; These are used by the ENVIRONMENT? word and stored in the old string format:
003EA8r 3               ; Length byte first, then the string itself that is not rpt. not
003EA8r 3               ; zero-terminated. Note these are uppercase by ANS defintion. All start with
003EA8r 3               ; "envs_".
003EA8r 3               
003EA8r 3               ; These return a single-cell number
003EA8r 3  0F 2F 43 4F  envs_cs:        .byte 15, "/COUNTED-STRING"
003EACr 3  55 4E 54 45  
003EB0r 3  44 2D 53 54  
003EB8r 3  05 2F 48 4F  envs_hold:      .byte 5, "/HOLD"
003EBCr 3  4C 44        
003EBEr 3  04 2F 50 41  envs_pad:       .byte 4, "/PAD"
003EC2r 3  44           
003EC3r 3  11 41 44 44  envs_aub:       .byte 17, "ADDRESS-UNIT-BITS"
003EC7r 3  52 45 53 53  
003ECBr 3  2D 55 4E 49  
003ED5r 3  07 46 4C 4F  envs_floored:   .byte 7, "FLOORED"
003ED9r 3  4F 52 45 44  
003EDDr 3  08 4D 41 58  envs_max_char:  .byte 8, "MAX-CHAR"
003EE1r 3  2D 43 48 41  
003EE5r 3  52           
003EE6r 3  05 4D 41 58  envs_max_n:     .byte 5, "MAX-N"
003EEAr 3  2D 4E        
003EECr 3  05 4D 41 58  envs_max_u:     .byte 5, "MAX-U"
003EF0r 3  2D 55        
003EF2r 3  12 52 45 54  envs_rsc:       .byte 18, "RETURN-STACK-CELLS"
003EF6r 3  55 52 4E 2D  
003EFAr 3  53 54 41 43  
003F05r 3  0B 53 54 41  envs_sc:        .byte 11, "STACK-CELLS"
003F09r 3  43 4B 2D 43  
003F0Dr 3  45 4C 4C 53  
003F11r 3  09 57 4F 52  envs_wl:        .byte 9, "WORDLISTS"
003F15r 3  44 4C 49 53  
003F19r 3  54 53        
003F1Br 3               
003F1Br 3               ; These return a double-cell number
003F1Br 3  05 4D 41 58  envs_max_d:     .byte 5, "MAX-D"
003F1Fr 3  2D 44        
003F21r 3  06 4D 41 58  envs_max_ud:    .byte 6, "MAX-UD"
003F25r 3  2D 55 44     
003F28r 3               
003F28r 3               ; END
003F28r 3               
003F28r 2               
003F28r 2               ; High-level Forth words, see forth_code/README.md
003F28r 2               forth_words_start:
003F28r 2  20 63 72 20  .incbin "forth_code/forth_words.asc"
003F2Cr 2  2E 28 20 52  
003F30r 2  65 61 64 79  
003F3Ar 2               forth_words_end:
003F3Ar 2               
003F3Ar 2               ; User-defined Forth words, see forth_code/README.md
003F3Ar 2               user_words_start:
003F3Ar 2  20 32 30 20  .incbin "forth_code/user_words.asc"
003F3Er 2  63 6F 6E 73  
003F42r 2  74 61 6E 74  
0045D8r 2               user_words_end:
0045D8r 2               
0045D8r 2               
0045D8r 2               ; =====================================================================
0045D8r 2               ; COMPILE WORDS, JUMPS and SUBROUTINE JUMPS INTO CODE
0045D8r 2               
0045D8r 2               ; These three routines compile instructions such as "jsr xt_words" into a word
0045D8r 2               ; at compile time so they are available at run time. Words that use this
0045D8r 2               ; routine may not be natively compiled. We use "cmpl" as not to confuse these
0045D8r 2               ; routines with the COMPILE, word. Always call this with a subroutine jump.
0045D8r 2               ; This means combining JSR/RTS to JMP in those cases is not going to work. To
0045D8r 2               ; use, load the LSB of the address in A and the MSB in Y. You can remember
0045D8r 2               ; which comes first by thinking of the song "Young Americans" ("YA") by David
0045D8r 2               ; Bowie.
0045D8r 2               
0045D8r 2               ;               ldy #>addr      ; MSB   ; "Young"
0045D8r 2               ;               lda #<addr      ; LSB   ; "Americans"
0045D8r 2               ;               jsr cmpl_subroutine
0045D8r 2               
0045D8r 2               ; Also, we keep a routine here to compile a single byte passed through A.
0045D8r 2               
0045D8r 2               cmpl_subroutine:
0045D8r 2                   ; This is the entry point to compile JSR <ADDR>
0045D8r 2  48               pha             ; save LSB of address
0045D9r 2  A9 20            lda #$20        ; load opcode for JSR
0045DBr 2  80 03            bra cmpl_common
0045DDr 2               cmpl_jump:
0045DDr 2                   ; This is the entry point to compile JMP <ADDR>
0045DDr 2  48               pha             ; save LSB of address
0045DEr 2  A9 4C            lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
0045E0r 2               cmpl_common:
0045E0r 2                   ; At this point, A contains the opcode to be compiled,
0045E0r 2                   ; the LSB of the address is on the 65c02 stack, and the MSB of
0045E0r 2                   ; the address is in Y
0045E0r 2  20 rr rr         jsr cmpl_a      ; compile opcode
0045E3r 2  68               pla             ; retrieve address LSB; fall thru to cmpl_word
0045E4r 2               cmpl_word:
0045E4r 2                   ; This is the entry point to compile a word (little-endian)
0045E4r 2  20 rr rr         jsr cmpl_a      ; compile LSB of address
0045E7r 2  98               tya             ; fall thru for MSB
0045E8r 2               cmpl_a:
0045E8r 2                   ; This is the entry point to compile a single byte which
0045E8r 2                   ; is passed in A. The built-in assembler assumes that this
0045E8r 2                   ; routine does not modify Y.
0045E8r 2  92 rr            sta (cp)
0045EAr 2  E6 rr            inc cp
0045ECr 2  D0 02            bne _done
0045EEr 2  E6 rr            inc cp+1
0045F0r 2               _done:
0045F0r 2  60               rts
0045F1r 2               
0045F1r 2               
0045F1r 2               
0045F1r 2               ; =====================================================================
0045F1r 2               ; CODE FIELD ROUTINES
0045F1r 2               
0045F1r 2               doconst:
0045F1r 2               ; """Execute a CONSTANT: Push the data in the first two bytes of
0045F1r 2               ; the Data Field onto the Data Stack
0045F1r 2               ; """
0045F1r 2  CA               dex             ; make room for constant
0045F2r 2  CA               dex
0045F3r 2               
0045F3r 2                   ; The value we need is stored in the two bytes after the
0045F3r 2                   ; JSR return address, which in turn is what is on top of
0045F3r 2                   ; the Return Stack
0045F3r 2  68               pla             ; LSB of return address
0045F4r 2  85 rr            sta tmp1
0045F6r 2  68               pla             ; MSB of return address
0045F7r 2  85 rr            sta tmp1+1
0045F9r 2               
0045F9r 2                   ; Start LDY with 1 instead of 0 because of how JSR stores
0045F9r 2                   ; the return address on the 65c02
0045F9r 2  A0 01            ldy #1
0045FBr 2  B1 rr            lda (tmp1),y
0045FDr 2  95 00            sta 0,x
0045FFr 2  C8               iny
004600r 2  B1 rr            lda (tmp1),y
004602r 2  95 01            sta 1,x
004604r 2               
004604r 2                   ; This takes us back to the original caller, not the
004604r 2                   ; DOCONST caller
004604r 2  60               rts
004605r 2               
004605r 2               
004605r 2               dodefer:
004605r 2               ; """Execute a DEFER statement at runtime: Execute the address we
004605r 2               ; find after the caller in the Data Field
004605r 2               ; """
004605r 2                   ; The xt we need is stored in the two bytes after the JSR
004605r 2                   ; return address, which is what is on top of the Return
004605r 2                   ; Stack. So all we have to do is replace our return jump
004605r 2                   ; with what we find there
004605r 2  68               pla             ; LSB
004606r 2  85 rr            sta tmp1
004608r 2  68               pla             ; MSB
004609r 2  85 rr            sta tmp1+1
00460Br 2               
00460Br 2  A0 01            ldy #1
00460Dr 2  B1 rr            lda (tmp1),y
00460Fr 2  85 rr            sta tmp2
004611r 2  C8               iny
004612r 2  B1 rr            lda (tmp1),y
004614r 2  85 rr            sta tmp2+1
004616r 2               
004616r 2  6C rr rr         jmp (tmp2)      ; This is actually a jump to the new target
004619r 2               
004619r 2               defer_error:
004619r 2                   ; """Error routine for undefined DEFER: Complain and abort"""
004619r 2  A9 03            lda #err_defer
00461Br 2  4C rr rr         jmp error
00461Er 2               
00461Er 2               dodoes:
00461Er 2               ; """Execute the runtime portion of DOES>. See DOES> and
00461Er 2               ; docs/create-does.txt for details and
00461Er 2               ; http://www.bradrodriguez.com/papers/moving3.htm
00461Er 2               ; """
00461Er 2                   ; Assumes the address of the CFA of the original defining word
00461Er 2                   ; (say, CONSTANT) is on the top of the Return Stack. Save it
00461Er 2                   ; for a later jump, adding one byte because of the way the
00461Er 2                   ; 6502 works
00461Er 2  7A               ply             ; LSB
00461Fr 2  68               pla             ; MSB
004620r 2  C8               iny
004621r 2  D0 01            bne @1
004623r 2  1A               inc
004624r 2               @1:
004624r 2  84 rr            sty tmp2
004626r 2  85 rr            sta tmp2+1
004628r 2               
004628r 2                   ; Next on the Return Stack should be the address of the PFA of
004628r 2                   ; the calling defined word (say, the name of whatever constant we
004628r 2                   ; just defined). Move this to the Data Stack, again adding one.
004628r 2  CA               dex
004629r 2  CA               dex
00462Ar 2               
00462Ar 2  7A               ply
00462Br 2  68               pla
00462Cr 2  C8               iny
00462Dr 2  D0 01            bne @2
00462Fr 2  1A               inc
004630r 2               @2:
004630r 2  94 00            sty 0,x         ; LSB
004632r 2  95 01            sta 1,x         ; MSB
004634r 2               
004634r 2                   ; This leaves the return address from the original main routine
004634r 2                   ; on top of the Return Stack. We leave that untouched and jump
004634r 2                   ; to the special code of the defining word. It's RTS instruction
004634r 2                   ; will take us back to the main routine
004634r 2  6C rr rr         jmp (tmp2)
004637r 2               
004637r 2               
004637r 2               dovar:
004637r 2               ; """Execute a variable: Push the address of the first bytes of
004637r 2               ; the Data Field onto the stack. This is called with JSR so we
004637r 2               ; can pick up the address of the calling variable off the 65c02's
004637r 2               ; stack. The final RTS takes us to the original caller of the
004637r 2               ; routine that itself called DOVAR. This is the default
004637r 2               ; routine installed with CREATE.
004637r 2               ; """
004637r 2                   ; Pull the return address off the machine's stack, adding
004637r 2                   ; one because of the way the 65c02 handles subroutines
004637r 2  7A               ply             ; LSB
004638r 2  68               pla             ; MSB
004639r 2  C8               iny
00463Ar 2  D0 01            bne @1
00463Cr 2  1A               inc
00463Dr 2               @1:
00463Dr 2  CA               dex
00463Er 2  CA               dex
00463Fr 2               
00463Fr 2  95 01            sta 1,x
004641r 2  98               tya
004642r 2  95 00            sta 0,x
004644r 2               
004644r 2  60               rts
004645r 2               
004645r 2               ; =====================================================================
004645r 2               ; LOW LEVEL HELPER FUNCTIONS
004645r 2               
004645r 2               byte_to_ascii:
004645r 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
004645r 2               .scope
004645r 2  48               pha
004646r 2  4A               lsr             ; convert high nibble first
004647r 2  4A               lsr
004648r 2  4A               lsr
004649r 2  4A               lsr
00464Ar 2  20 rr rr         jsr _nibble_to_ascii
00464Dr 2  68               pla
00464Er 2               
00464Er 2                   ; fall through to _nibble_to_ascii
00464Er 2               
00464Er 2               _nibble_to_ascii:
00464Er 2               ; """Private helper function for byte_to_ascii: Print lower nibble
00464Er 2               ; of A and and EMIT it. This does the actual work.
00464Er 2               ; """
00464Er 2  29 0F            and #$0F
004650r 2  09 30            ora #'0'
004652r 2  C9 3A            cmp #$3A        ; '9+1
004654r 2  90 02            bcc @1
004656r 2  69 06            adc #$06
004658r 2               
004658r 2  4C rr rr     @1:               jmp emit_a
00465Br 2               
00465Br 2  60               rts
00465Cr 2               .endscope
00465Cr 2               
00465Cr 2               compare_16bit:
00465Cr 2               ; """Compare TOS/NOS and return results in form of the 65c02 flags
00465Cr 2               ; Adapted from Leventhal "6502 Assembly Language Subroutines", see
00465Cr 2               ; also http://www.6502.org/tutorials/compare_beyond.html
00465Cr 2               ; For signed numbers, Z signals equality and N which number is larger:
00465Cr 2               ;       if TOS = NOS: Z=1 and N=0
00465Cr 2               ;       if TOS > NOS: Z=0 and N=0
00465Cr 2               ;       if TOS < NOS: Z=0 and N=1
00465Cr 2               ; For unsigned numbers, Z signals equality and C which number is larger:
00465Cr 2               ;       if TOS = NOS: Z=1 and N=0
00465Cr 2               ;       if TOS > NOS: Z=0 and C=1
00465Cr 2               ;       if TOS < NOS: Z=0 and C=0
00465Cr 2               ; Compared to the book routine, WORD1 (MINUED) is TOS
00465Cr 2               ;                               WORD2 (SUBTRAHEND) is NOS
00465Cr 2               ; """
00465Cr 2               .scope
00465Cr 2                   ; Compare LSB first to set the carry flag
00465Cr 2  B5 00            lda 0,x                 ; LSB of TOS
00465Er 2  D5 02            cmp 2,x                 ; LSB of NOS
004660r 2  F0 0A            beq _equal
004662r 2               
004662r 2                   ; LSBs are not equal, compare MSB
004662r 2  B5 01            lda 1,x                 ; MSB of TOS
004664r 2  F5 03            sbc 3,x                 ; MSB of NOS
004666r 2  09 01            ora #1                  ; Make zero flag 0 because not equal
004668r 2  70 08            bvs _overflow
00466Ar 2  80 08            bra _not_equal
00466Cr 2               _equal:
00466Cr 2                   ; Low bytes are equal, so we compare high bytes
00466Cr 2  B5 01            lda 1,x                 ; MSB of TOS
00466Er 2  F5 03            sbc 3,x                 ; MSB of NOS
004670r 2  50 04            bvc _done
004672r 2               _overflow:
004672r 2                   ; Handle overflow because we use signed numbers
004672r 2  49 80            eor #$80                ; complement negative flag
004674r 2               _not_equal:
004674r 2  09 01            ora #1                  ; if overflow, we can't be eqal
004676r 2               _done:
004676r 2  60               rts
004677r 2               .endscope
004677r 2               
004677r 2               current_to_dp:
004677r 2               ; """Look up the current (compilation) dictionary pointer
004677r 2               ; in the wordlist set and put it into the dp zero-page
004677r 2               ; variable. Uses A and Y.
004677r 2               ; """
004677r 2                   ; Determine which wordlist is current
004677r 2  A0 04            ldy #current_offset
004679r 2  B1 rr            lda (up),y      ; current is a byte variable
00467Br 2  0A               asl             ; turn it into an offset (in cells)
00467Cr 2               
00467Cr 2                   ; Get the dictionary pointer for that wordlist.
00467Cr 2  18               clc
00467Dr 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
00467Fr 2  A8               tay
004680r 2  B1 rr            lda (up),y              ; get the dp for that wordlist.
004682r 2  85 rr            sta dp
004684r 2  C8               iny
004685r 2  B1 rr            lda (up),y
004687r 2  85 rr            sta dp+1
004689r 2               
004689r 2  60               rts
00468Ar 2               
00468Ar 2               
00468Ar 2               dp_to_current:
00468Ar 2               ; """Look up which wordlist is current and update its pointer
00468Ar 2               ; with the value in dp. Uses A and Y.
00468Ar 2               ; """
00468Ar 2                   ; Determine which wordlist is current
00468Ar 2  A0 04            ldy #current_offset
00468Cr 2  B1 rr            lda (up),y      ; current is a byte variable
00468Er 2  0A               asl             ; turn it into an offset (in cells)
00468Fr 2               
00468Fr 2                   ; Get the dictionary pointer for that wordlist.
00468Fr 2  18               clc
004690r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
004692r 2  A8               tay
004693r 2  A5 rr            lda dp
004695r 2  91 rr            sta (up),y              ; get the dp for that wordlist.
004697r 2  C8               iny
004698r 2  A5 rr            lda dp+1
00469Ar 2  91 rr            sta (up),y
00469Cr 2               
00469Cr 2  60               rts
00469Dr 2               
00469Dr 2               interpret:
00469Dr 2               .scope
00469Dr 2               ; """Core routine for the interpreter called by EVALUATE and QUIT.
00469Dr 2               ; Process one line only. Assumes that the address of name is in
00469Dr 2               ; cib and the length of the whole input line string is in ciblen
00469Dr 2               ; """
00469Dr 2                   ; Normally we would use PARSE here with the SPACE character as
00469Dr 2                   ; a parameter (PARSE replaces WORD in modern Forths). However,
00469Dr 2                   ; Gforth's PARSE-NAME makes more sense as it uses spaces as
00469Dr 2                   ; delimiters per default and skips any leading spaces, which
00469Dr 2                   ; PARSE doesn't
00469Dr 2               _loop:
00469Dr 2  20 rr rr         jsr xt_parse_name       ; ( "string" -- addr u )
0046A0r 2               
0046A0r 2                   ; If PARSE-NAME returns 0 (empty line), no characters were left
0046A0r 2                   ; in the line and we need to go get a new line
0046A0r 2  B5 00            lda 0,x
0046A2r 2  15 01            ora 1,x
0046A4r 2  F0 70            beq _line_done
0046A6r 2               
0046A6r 2                   ; Go to FIND-NAME to see if this is a word we know. We have to
0046A6r 2                   ; make a copy of the address in case it isn't a word we know and
0046A6r 2                   ; we have to go see if it is a number
0046A6r 2  20 rr rr         jsr xt_two_dup          ; ( addr u -- addr u addr u )
0046A9r 2  20 rr rr         jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
0046ACr 2               
0046ACr 2                   ; A zero signals that we didn't find a word in the Dictionary
0046ACr 2  B5 00            lda 0,x
0046AEr 2  15 01            ora 1,x
0046B0r 2  D0 28            bne _got_name_token
0046B2r 2               
0046B2r 2                   ; We didn't get any nt we know of, so let's see if this is
0046B2r 2                   ; a number.
0046B2r 2  E8               inx                     ; ( addr u 0 -- addr u )
0046B3r 2  E8               inx
0046B4r 2               
0046B4r 2                   ; If the number conversion doesn't work, NUMBER will do the
0046B4r 2                   ; complaining for us
0046B4r 2  20 rr rr         jsr xt_number           ; ( addr u -- u|d )
0046B7r 2               
0046B7r 2                   ; Otherweise, if we're interpreting, we're done
0046B7r 2  A5 rr            lda state
0046B9r 2  F0 E2            beq _loop
0046BBr 2               
0046BBr 2                   ; We're compiling, so there is a bit more work.  Check
0046BBr 2                   ; status bit 5 to see if it's a single or double-cell
0046BBr 2                   ; number.
0046BBr 2  A9 20            lda #$20
0046BDr 2  24 rr            bit status
0046BFr 2  F0 0D            beq _single_number
0046C1r 2               
0046C1r 2                   ; It's a double cell number.  If we swap the
0046C1r 2                   ; upper and lower half, we can use the literal_runtime twice
0046C1r 2                   ; to compile it into the dictionary.
0046C1r 2  20 rr rr         jsr xt_swap
0046C4r 2  A0 rr            ldy #>literal_runtime
0046C6r 2  A9 rr            lda #<literal_runtime
0046C8r 2  20 rr rr         jsr cmpl_subroutine
0046CBr 2               
0046CBr 2                   ; compile our number
0046CBr 2  20 rr rr         jsr xt_comma
0046CEr 2               
0046CEr 2                   ; Fall into _single_number to process the other half.
0046CEr 2               _single_number:
0046CEr 2  A0 rr            ldy #>literal_runtime
0046D0r 2  A9 rr            lda #<literal_runtime
0046D2r 2  20 rr rr         jsr cmpl_subroutine
0046D5r 2               
0046D5r 2                   ; compile our number
0046D5r 2  20 rr rr         jsr xt_comma
0046D8r 2               
0046D8r 2                   ; That was so much fun, let's do it again!
0046D8r 2  80 C3            bra _loop
0046DAr 2               
0046DAr 2               _got_name_token:
0046DAr 2                   ; We have a known word's nt TOS. We're going to need its xt
0046DAr 2                   ; though, which is four bytes father down.
0046DAr 2               
0046DAr 2                   ; We arrive here with ( addr u nt ), so we NIP twice
0046DAr 2  B5 00            lda 0,x
0046DCr 2  95 04            sta 4,x
0046DEr 2  B5 01            lda 1,x
0046E0r 2  95 05            sta 5,x
0046E2r 2               
0046E2r 2  E8               inx
0046E3r 2  E8               inx
0046E4r 2  E8               inx
0046E5r 2  E8               inx                     ; ( nt )
0046E6r 2               
0046E6r 2                   ; Save a version of nt for error handling and compilation stuff
0046E6r 2  B5 00            lda 0,x
0046E8r 2  85 rr            sta tmpbranch
0046EAr 2  B5 01            lda 1,x
0046ECr 2  85 rr            sta tmpbranch+1
0046EEr 2               
0046EEr 2  20 rr rr         jsr xt_name_to_int      ; ( nt - xt )
0046F1r 2               
0046F1r 2                   ; See if we are in interpret or compile mode, 0 is interpret
0046F1r 2  A5 rr            lda state
0046F3r 2  D0 13            bne _compile
0046F5r 2               
0046F5r 2                   ; We are interpreting, so EXECUTE the xt that is TOS. First,
0046F5r 2                   ; though, see if this isn't a compile-only word, which would be
0046F5r 2                   ; illegal. The status byte is the second one of the header.
0046F5r 2  A0 01            ldy #1
0046F7r 2  B1 rr            lda (tmpbranch),y
0046F9r 2  29 01            and #CO                 ; mask everything but Compile Only bit
0046FBr 2  F0 05            beq _interpret
0046FDr 2               
0046FDr 2  A9 02            lda #err_compileonly
0046FFr 2  4C rr rr         jmp error
004702r 2               
004702r 2               _interpret:
004702r 2                   ; We JSR to EXECUTE instead of calling the xt directly because
004702r 2                   ; the RTS of the word we're executing will bring us back here,
004702r 2                   ; skipping EXECUTE completely during RTS. If we were to execute
004702r 2                   ; xt directly, we have to fool around with the Return Stack
004702r 2                   ; instead, which is actually slightly slower
004702r 2  20 rr rr         jsr xt_execute
004705r 2               
004705r 2                   ; That's quite enough for this word, let's get the next one
004705r 2  4C rr rr         jmp _loop
004708r 2               
004708r 2               _compile:
004708r 2                   ; We're compiling! However, we need to see if this is an
004708r 2                   ; IMMEDIATE word, which would mean we execute it right now even
004708r 2                   ; during compilation mode. Fortunately, we saved the nt so life
004708r 2                   ; is easier. The flags are in the second byte of the header
004708r 2  A0 01            ldy #1
00470Ar 2  B1 rr            lda (tmpbranch),y
00470Cr 2  29 04            and #IM                 ; Mask all but IM bit
00470Er 2  D0 F2            bne _interpret          ; IMMEDIATE word, execute right now
004710r 2               
004710r 2                   ; Compile the xt into the Dictionary with COMPILE,
004710r 2  20 rr rr         jsr xt_compile_comma
004713r 2  4C rr rr         jmp _loop
004716r 2               
004716r 2               _line_done:
004716r 2                   ; drop stuff from PARSE_NAME
004716r 2  E8               inx
004717r 2  E8               inx
004718r 2  E8               inx
004719r 2  E8               inx
00471Ar 2               
00471Ar 2  60               rts
00471Br 2               .endscope
00471Br 2               
00471Br 2               
00471Br 2               is_printable:
00471Br 2               .scope
00471Br 2               ; """Given a character in A, check if it is a printable ASCII
00471Br 2               ; character in the range from $20 to $7E inclusive. Returns the
00471Br 2               ; result in the Carry Flag: 0 (clear) is not printable, 1 (set)
00471Br 2               ; is printable. Keeps A. See
00471Br 2               ; http://www.obelisk.me.uk/6502/algorithms.html for a
00471Br 2               ; discussion of various ways to do this
00471Br 2  C9 20            cmp #AscSP              ; $20
00471Dr 2  90 08            bcc _done
00471Fr 2  C9 7F            cmp #'~' + 1             ; $7E
004721r 2  B0 03            bcs _failed
004723r 2               
004723r 2  38               sec
004724r 2  80 01            bra _done
004726r 2               _failed:
004726r 2  18               clc
004727r 2               _done:
004727r 2  60               rts
004728r 2               .endscope
004728r 2               
004728r 2               
004728r 2               is_whitespace:
004728r 2               .scope
004728r 2               ; """Given a character in A, check if it is a whitespace
004728r 2               ; character, that is, an ASCII value from 0 to 32 (where
004728r 2               ; 32 is SPACE). Returns the result in the Carry Flag:
004728r 2               ; 0 (clear) is no, it isn't whitespace, while 1 (set) means
004728r 2               ; that it is whitespace. See PARSE and PARSE-NAME for
004728r 2               ; a discussion of the uses. Does not change A or Y.
004728r 2  C9 00            cmp #00         ; explicit comparison to leave Y untouched
00472Ar 2  90 08            bcc _done
00472Cr 2               
00472Cr 2  C9 21            cmp #AscSP+1
00472Er 2  B0 03            bcs _failed
004730r 2               
004730r 2  38               sec
004731r 2  80 01            bra _done
004733r 2               _failed:
004733r 2  18               clc
004734r 2               _done:
004734r 2  60               rts
004735r 2               .endscope
004735r 2               
004735r 2               
004735r 2               ; Underflow tests. We jump to the label with the number of cells (not: bytes)
004735r 2               ; required for the word. This routine flows into the generic error handling
004735r 2               ; code
004735r 2               underflow_1:
004735r 2               ; """Make sure we have at least one cell on the Data Stack"""
004735r 2  E0 rr            cpx #dsp0-1
004737r 2  10 10            bpl underflow_error
004739r 2  60               rts
00473Ar 2               underflow_2:
00473Ar 2               ; """Make sure we have at least two cells on the Data Stack"""
00473Ar 2  E0 rr            cpx #dsp0-3
00473Cr 2  10 0B            bpl underflow_error
00473Er 2  60               rts
00473Fr 2               underflow_3:
00473Fr 2               ; """Make sure we have at least three cells on the Data Stack"""
00473Fr 2  E0 rr            cpx #dsp0-5
004741r 2  10 06            bpl underflow_error
004743r 2  60               rts
004744r 2               underflow_4:
004744r 2               ; """Make sure we have at least four cells on the Data Stack"""
004744r 2  E0 rr            cpx #dsp0-7
004746r 2  10 01            bpl underflow_error
004748r 2  60               rts
004749r 2               
004749r 2               underflow_error:
004749r 2                   ; Entry for COLD/ABORT/QUIT
004749r 2  A9 09            lda #err_underflow      ; fall through to error
00474Br 2               
00474Br 2               error:
00474Br 2               ; """Given the error number in a, print the associated error string and
00474Br 2               ; call abort. Uses tmp3.
00474Br 2               ; """
00474Br 2  0A               asl
00474Cr 2  A8               tay
00474Dr 2  B9 rr rr         lda error_table,y
004750r 2  85 rr            sta tmp3                ; LSB
004752r 2  C8               iny
004753r 2  B9 rr rr         lda error_table,y
004756r 2  85 rr            sta tmp3+1              ; MSB
004758r 2               
004758r 2  20 rr rr         jsr print_common
00475Br 2  20 rr rr         jsr xt_cr
00475Er 2  4C rr rr         jmp xt_abort            ; no jsr, as we clobber return stack
004761r 2               
004761r 2               
004761r 2               ; =====================================================================
004761r 2               ; PRINTING ROUTINES
004761r 2               
004761r 2               ; We distinguish two types of print calls, both of which take the string number
004761r 2               ; (see strings.asm) in A:
004761r 2               
004761r 2               ;       print_string       - with a line feed
004761r 2               ;       print_string_no_lf - without a line feed
004761r 2               
004761r 2               ; In addition, print_common provides a lower-level alternative for error
004761r 2               ; handling and anything else that provides the address of the
004761r 2               ; zero-terminated string directly in tmp3. All of those routines assume that
004761r 2               ; printing should be more concerned with size than speed, because anything to
004761r 2               ; do with humans reading text is going to be slow.
004761r 2               
004761r 2               print_string_no_lf:
004761r 2               ; """Given the number of a zero-terminated string in A, print it to the
004761r 2               ; current output without adding a LF. Uses Y and tmp3 by falling
004761r 2               ; through to print_common
004761r 2               ; """
004761r 2                   ; Get the entry from the string table
004761r 2  0A               asl
004762r 2  A8               tay
004763r 2  B9 rr rr         lda string_table,y
004766r 2  85 rr            sta tmp3                ; LSB
004768r 2  C8               iny
004769r 2  B9 rr rr         lda string_table,y
00476Cr 2  85 rr            sta tmp3+1              ; MSB
00476Er 2               
00476Er 2                   ; fall through to print_common
00476Er 2               print_common:
00476Er 2               ; """Common print routine used by both the print functions and
00476Er 2               ; the error printing routine. Assumes string address is in tmp3. Uses
00476Er 2               ; Y.
00476Er 2               ; """
00476Er 2               .scope
00476Er 2  A0 00            ldy #0
004770r 2               _loop:
004770r 2  B1 rr            lda (tmp3),y
004772r 2  F0 06            beq _done               ; strings are zero-terminated
004774r 2               
004774r 2  20 rr rr         jsr emit_a              ; allows vectoring via output
004777r 2  C8               iny
004778r 2  80 F6            bra _loop
00477Ar 2               _done:
00477Ar 2  60               rts
00477Br 2               .endscope
00477Br 2               
00477Br 2               print_string:
00477Br 2               ; """Print a zero-terminated string to the console/screen, adding a LF.
00477Br 2               ; We do not check to see if the index is out of range. Uses tmp3.
00477Br 2               ; """
00477Br 2  20 rr rr         jsr print_string_no_lf
00477Er 2  4C rr rr         jmp xt_cr               ; JSR/RTS because never compiled
004781r 2               
004781r 2               
004781r 2               print_u:
004781r 2               ; """basic printing routine used by higher-level constructs,
004781r 2               ; the equivalent of the forth word  0 <# #s #> type  which is
004781r 2               ; basically u. without the space at the end. used for various
004781r 2               ; outputs
004781r 2               ; """
004781r 2  20 rr rr         jsr xt_zero                     ; 0
004784r 2  20 rr rr         jsr xt_less_number_sign         ; <#
004787r 2  20 rr rr         jsr xt_number_sign_s            ; #S
00478Ar 2  20 rr rr         jsr xt_number_sign_greater      ; #>
00478Dr 2  4C rr rr         jmp xt_type                     ; JSR/RTS because never compiled
004790r 2               
004790r 2               ; END
004790r 2               
004790r 1               
004790r 1               .segment "DATA"
004790r 1               
004790r 1               
004790r 1               
004790r 1               
004790r 1               platform_bye:
004790r 1               kernel_init:
004790r 1               .ifdef VIA1_BASE
004790r 1  A9 FF            lda #$FF
004792r 1  8D 82 FF         sta DDRB
004795r 1  8D 83 FF         sta DDRA
004798r 1  A9 01            lda #1
00479Ar 1  8D 80 FF         sta PORTB
00479Dr 1  9C 81 FF         stz PORTA
0047A0r 1               .endif
0047A0r 1               
0047A0r 1  20 rr rr     jsr acia_init
0047A3r 1               .ifdef timer_init
0047A3r 1  20 rr rr         jsr timer_init
0047A6r 1               .endif
0047A6r 1               .ifdef video_init
0047A6r 1                   jsr video_init
0047A6r 1               .endif
0047A6r 1               .ifdef ps2_init
0047A6r 1                   jsr ps2_init
0047A6r 1               .endif
0047A6r 1               .ifdef cf_init
0047A6r 1  20 rr rr         jsr cf_init
0047A9r 1               .endif
0047A9r 1               .ifdef lcd_init
0047A9r 1                   jsr lcd_init
0047A9r 1               .endif
0047A9r 1               .ifdef spi_init
0047A9r 1  20 rr rr         jsr spi_init
0047ACr 1               .endif
0047ACr 1               .ifdef kb_init
0047ACr 1                   jsr kb_init
0047ACr 1               .endif
0047ACr 1               
0047ACr 1  DA A2 00 BD      printascii welcome_message
0047B0r 1  rr rr F0 06  
0047B4r 1  20 rr rr E8  
0047BBr 1               
0047BBr 1  A9 rr            lda #<dictionary
0047BDr 1  85 rr            sta util_tmp
0047BFr 1  A9 rr            lda #>dictionary
0047C1r 1  85 rr            sta util_tmp + 1
0047C3r 1               
0047C3r 1  20 rr rr         jsr calculate_free_mem
0047C6r 1  A5 rr            lda tmp_var + 1
0047C8r 1  A6 rr            ldx tmp_var
0047CAr 1  20 rr rr         jsr print16
0047CDr 1               
0047CDr 1  DA A2 00 BD      printascii free_message
0047D1r 1  rr rr F0 06  
0047D5r 1  20 rr rr E8  
0047DCr 1               
0047DCr 1               
0047DCr 1  4C rr rr         jmp forth
0047DFr 1               
0047DFr 1               v_nmi:
0047DFr 1               
0047DFr 1                   ; jsr calculate_free_mem
0047DFr 1                   ; lda tmp_var + 1
0047DFr 1                   ; ldx tmp_var
0047DFr 1                   ; jsr print16
0047DFr 1               
0047DFr 1                   ; printascii free_message
0047DFr 1  DA A2 00 BD      printascii ready_message
0047E3r 1  rr rr F0 06  
0047E7r 1  20 rr rr E8  
0047EEr 1               
0047EEr 1  4C rr rr         jmp xt_abort
0047F1r 1               
0047F1r 1               
0047F1r 1               
0047F1r 1               
0047F1r 1               io_read_sector:
0047F1r 1  4C rr rr         jmp io_read_sector_address        ; jump to read sector routine
0047F4r 1               
0047F4r 1               io_write_sector:
0047F4r 1  4C rr rr         jmp io_write_sector_address        ; jump to read sector routine
0047F7r 1               
0047F7r 1               
0047F7r 1               
0047F7r 1               kernel_putc:
0047F7r 1                   ; """Print a single character to the console. """
0047F7r 1                   ;; Send_Char - send character in A out serial port.
0047F7r 1                   ;; Uses: A (original value restored)
0047F7r 1               send_char:
0047F7r 1  48               pha
0047F8r 1                   .ifdef char_out
0047F8r 1                   jsr char_out
0047F8r 1                   .endif
0047F8r 1                   .ifdef acia_out
0047F8r 1  20 rr rr         jsr acia_out
0047FBr 1                   .endif
0047FBr 1               send_char_exit:
0047FBr 1               .ifdef lcd_print
0047FBr 1                   ; jsr lcd_print
0047FBr 1               .endif
0047FBr 1  68               pla
0047FCr 1  60               rts
0047FDr 1               
0047FDr 1               
0047FDr 1                       ;; Get_Char - get a character from the serial port into A.
0047FDr 1                       ;; Set the carry flag if char is valid.
0047FDr 1                       ;; Return immediately with carry flag clear if no char available.
0047FDr 1                       ;; Uses: A (return value)
0047FDr 1               
0047FDr 1               Get_Char:
0047FDr 1  20 rr rr         jsr acia_getc
004800r 1  90 02            bcc get_ps2_char                ; check keyboard buffer if nothing from ACIA
004802r 1  38               sec                             ; Set Carry to show we got a character
004803r 1  60               rts                             ; Return
004804r 1               
004804r 1               get_ps2_char:                       ; no ACIA char available, try to get from KB buffer
004804r 1               .ifdef ps2_get_char
004804r 1                   jsr ps2_get_char
004804r 1               .endif
004804r 1  90 02            bcc get_kb_char
004806r 1  38               sec
004807r 1               
004807r 1  60               rts
004808r 1               get_kb_char:
004808r 1                   .ifdef kb_get_char
004808r 1               
004808r 1                   ; ldy #5
004808r 1                   ; jsr delay_short
004808r 1                   ; ply
004808r 1                       jsr kb_get_char
004808r 1               
004808r 1                   .endif
004808r 1               exit:                         ; Indicate no char available.
004808r 1  60               rts                             ; return
004809r 1               
004809r 1               kernel_getc:
004809r 1                   ; """Get a single character from the keyboard (waits for key).
004809r 1                   ; """
004809r 1                   ;; Get_Char_Wait - same as Get_Char only blocking.
004809r 1                   ;; Uses: A (return value)
004809r 1               Get_Char_Wait:
004809r 1  20 rr rr         jsr Get_Char
00480Cr 1  90 FB            bcc Get_Char_Wait
00480Er 1  60               rts
00480Fr 1               
00480Fr 1               
00480Fr 1               v_irq:                          ; IRQ handler
00480Fr 1  48                   pha
004810r 1  5A                   phy
004811r 1                       ; lda #'.'
004811r 1                       ; jsr kernel_putc
004811r 1                       ; check if bit 7 of IFR is set
004811r 1               .ifdef IFR
004811r 1  AD 8D FF             lda IFR
004814r 1  10 0B                bpl irq_not_from_via  ; Interrupt not from VIA, exit
004816r 1               
004816r 1  29 08                and #$08        ; ps2 has priority
004818r 1  D0 07                bne v_irq_ps2
00481Ar 1  AD 8D FF             lda IFR
00481Dr 1  29 40                and #$40
00481Fr 1  D0 02                bne v_irq_timer
004821r 1               irq_not_from_via:
004821r 1               .endif
004821r 1               .ifdef KB_IFR
004821r 1               v_kb_irq:
004821r 1                       lda KB_IFR
004821r 1                       bpl v_irq_exit
004821r 1                       and #$40
004821r 1                       bne v_kb_irq_timer
004821r 1                       bra v_irq_exit
004821r 1               .endif
004821r 1               
004821r 1               v_irq_ps2:
004821r 1                   .ifdef ps2_irq
004821r 1                       lda time
004821r 1                       sta last_ps2_time
004821r 1                       lda time+1
004821r 1                       sta last_ps2_time+1
004821r 1                       lda time+2
004821r 1                       sta last_ps2_time+2
004821r 1                       lda time+3
004821r 1                       sta last_ps2_time+3
004821r 1               
004821r 1                       jsr ps2_irq
004821r 1               
004821r 1                   .endif
004821r 1  80 27                bra v_irq_exit
004823r 1               
004823r 1               .ifdef T1CL
004823r 1               v_irq_timer:
004823r 1  AD 84 FF             lda T1CL
004826r 1                       ; clear timer interrupt
004826r 1                   .ifdef timer_irq
004826r 1  20 rr rr             jsr timer_irq
004829r 1                   .endif
004829r 1  20 rr rr             jsr Get_Char ; Check if a char is waiting to be able to break on CTRL-C
00482Cr 1                       ; check if there is a char waiting to be printed to the lcd
00482Cr 1                       ; lda lcd_char
00482Cr 1                       ; beq v_exit
00482Cr 1                       ; jsr lcd_print
00482Cr 1                       ; stz lcd_char
00482Cr 1               
00482Cr 1               
00482Cr 1  90 1C                bcc v_irq_exit      ; no character waiting, exit normally
00482Er 1  C9 03                cmp #$03            ; check if CTRL-C
004830r 1  D0 18                bne v_irq_exit      ; not CTRL-C, exit normally
004832r 1  DA A2 00 BD          printascii abort_message    ; was a CTRL_C
004836r 1  rr rr F0 06  
00483Ar 1  20 rr rr E8  
004841r 1  7A                   ply                         ; pull what the ISR pushed
004842r 1  68                   pla
004843r 1  28                   plp                         ; pull status register
004844r 1  68                   pla                         ; pull return address
004845r 1  68                   pla
004846r 1               
004846r 1  58                   cli                         ; clear interrupt diabled bit
004847r 1  4C rr rr             jmp xt_abort
00484Ar 1               
00484Ar 1               .endif
00484Ar 1               v_kb_irq_timer:
00484Ar 1               .ifdef kb_time
00484Ar 1                   lda KB_T1CL ; clear timer interrupt
00484Ar 1                   inc kb_time
00484Ar 1                   bne v_irq_exit
00484Ar 1               .endif
00484Ar 1                   ;jsr kb_scan
00484Ar 1               v_irq_exit:
00484Ar 1  7A               ply
00484Br 1  68               pla
00484Cr 1  40               rti
00484Dr 1               
00484Dr 1  20 62 79 74  free_message: .byte " bytes free", $0D, 0
004851r 1  65 73 20 66  
004855r 1  72 65 65 0D  
00485Ar 1  52 65 61 64  ready_message: .byte "Ready", $0D, 0
00485Er 1  79 0D 00     
004861r 1  57 65 6C 63  welcome_message: .byte "Welcome to Planck 6502", $0D, "Type 'words' for available words", $0D, 0
004865r 1  6F 6D 65 20  
004869r 1  74 6F 20 50  
00489Ar 1  0D 0A 00     abort_message: .byte AscCR, AscLF, 0
00489Dr 1               
00489Dr 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        .word v_nmi
000002r 1  rr rr        .word v_reset
000004r 1  rr rr        .word v_irq
000004r 1               
