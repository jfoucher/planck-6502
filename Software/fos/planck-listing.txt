ca65 V2.18 - N/A
Main file   : platform/planck/main.s
Current file: platform/planck/main.s

000000r 1               CLOCK_SPEED = 24000000
000000r 1               
000000r 1               ram_end = $8000
000000r 1               
000000r 1               .include "drivers/acia.inc"
000000r 2               ACIA_BASE   = $FFE0
000000r 2               ACIA_DATA = ACIA_BASE
000000r 2               ACIA_STATUS = ACIA_BASE + 1
000000r 2               ACIA_CMD = ACIA_BASE + 2
000000r 2               ACIA_CTRL = ACIA_BASE + 3
000000r 2               
000000r 2               
000000r 1               .include "drivers/via.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               VIA1_BASE   = $FF80
000000r 2               PORTB = VIA1_BASE
000000r 2               PORTA  = VIA1_BASE+1
000000r 2               DDRB = VIA1_BASE+2
000000r 2               DDRA = VIA1_BASE+3
000000r 2               
000000r 2               
000000r 2               T1CL = VIA1_BASE + 4
000000r 2               T1CH = VIA1_BASE + 5
000000r 2               T1LL = VIA1_BASE + 6
000000r 2               T1LH = VIA1_BASE + 7
000000r 2               ACR = VIA1_BASE + 11
000000r 2               PCR = VIA1_BASE + 12
000000r 2               IFR = VIA1_BASE + 13
000000r 2               IER = VIA1_BASE + 14
000000r 2               
000000r 1               .include "drivers/ps2.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               DATA = $80   ; Data is in bit 7 of PORTA
000000r 2               ; clock is on CA2
000000r 2               SHIFT = $1
000000r 2               ALT = $2
000000r 2               
000000r 2               KB_STATE_START = $0
000000r 2               KB_STATE_DATA = $1
000000r 2               KB_STATE_PARITY = $2
000000r 2               KB_STATE_STOP = $3
000000r 2               
000000r 2               KB_INIT_STATE_RESET = $0
000000r 2               KB_INIT_STATE_RESET_ACK = $1
000000r 2               KB_INIT_STATE_LEDS = $2
000000r 2               KB_INIT_STATE_LEDS_ACK = $3
000000r 2               KB_INIT_STATE_LEDS_DATA = $4
000000r 2               KB_INIT_STATE_LEDS_DATA_ACK = $5
000000r 2               
000000r 2               LSHIFT_KEY = $12
000000r 2               RSHIFT_KEY = $59
000000r 2               
000000r 2               TIMER_DELAY = $C4
000000r 2               
000000r 2               
000000r 1               .include "drivers/4004.inc"
000000r 2               
000000r 2               ; HD 44780 driver
000000r 2               ; all pins on VIA PORTA, 4 bit mode
000000r 2               
000000r 2               ; PORTA0 is free
000000r 2               LCD_BASE = $FFC0
000000r 2               LCD_RS = 1
000000r 2               LCD_E1 = 2
000000r 2               LCD_E2 = 4
000000r 2               
000000r 2               LCD_DATA = LCD_BASE | LCD_RS
000000r 2               LCD_ADDR = LCD_BASE & ($FF ^ LCD_RS)
000000r 2               LCD1_ENABLED = (LCD_BASE | LCD_E1)
000000r 2               LCD2_ENABLED = (LCD_BASE | LCD_E2)
000000r 2               LCD_DISABLED = LCD_BASE
000000r 2               ; A0: RS
000000r 2               ; A1: E1
000000r 2               ; A2: E2
000000r 2               
000000r 1               ; .include "drivers/lcd.inc"
000000r 1               .include "drivers/vga.inc"
000000r 2               VIDEO_BASE = $FFB0
000000r 2               
000000r 2               VIDEO_CTRL = VIDEO_BASE       ;// Formatted as follows |INCR_5|INCR_4|INCR_3|INCR_2|INCR_1|INCR_0|MODE_1|MODE_0|  default to LORES
000000r 2               VIDEO_ADDR_LOW = VIDEO_BASE + 1   ;// also contains the increment ||||ADDR4|ADDR_3|ADDR_2|ADDR_1|ADDR_0|
000000r 2               VIDEO_ADDR_HIGH = VIDEO_BASE + 2
000000r 2               VIDEO_DATA = VIDEO_BASE + 3
000000r 2               VIDEO_IEN = VIDEO_BASE + 4    ;// formatted as follows |VSYNC| | | | | | |HSYNC|
000000r 2               VIDEO_INTR = VIDEO_BASE + 5   ;// formatted as follows |VSYNC| | | | | | |HSYNC|
000000r 2               VIDEO_HSCROLL = VIDEO_BASE + 6
000000r 2               VIDEO_VSCROLL = VIDEO_BASE + 7
000000r 2               
000000r 2               VIDEO_HIRES_HCHARS = 80
000000r 2               VIDEO_HIRES_VCHARS = 60
000000r 2               
000000r 1               .include "drivers/keyboard.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               KB_VIA_BASE   = $FF90
000000r 2               KB_PORTB = KB_VIA_BASE
000000r 2               KB_PORTA  = KB_VIA_BASE+1
000000r 2               KB_DDRB = KB_VIA_BASE+2
000000r 2               KB_DDRA = KB_VIA_BASE+3
000000r 2               
000000r 2               
000000r 2               KB_T1CL = KB_VIA_BASE + 4
000000r 2               KB_T1CH = KB_VIA_BASE + 5
000000r 2               KB_T1LL = KB_VIA_BASE + 6
000000r 2               KB_T1LH = KB_VIA_BASE + 7
000000r 2               KB_ACR = KB_VIA_BASE + 11
000000r 2               KB_PCR = KB_VIA_BASE + 12
000000r 2               KB_IFR = KB_VIA_BASE + 13
000000r 2               KB_IER = KB_VIA_BASE + 14
000000r 2               
000000r 1               
000000r 1               .include "drivers/zp.s"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               ; next_addr: .res 1
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 2               .segment "ZEROPAGE": zeropage
000000r 2               
000000r 2  xx xx        stack_p: .res 2
000002r 2               
000002r 2               
000002r 1               
000002r 1               .segment "BSS"
000000r 1               
000000r 1  xx           lcd_absent: .res 1
000001r 1               
000001r 1  xx           has_acia: .res 1
000002r 1               
000002r 1               
000002r 1               .segment "RODATA"
000000r 1               
000000r 1               .import    copydata
000000r 1               
000000r 1               .segment "STARTUP"
000000r 1               
000000r 1               v_reset:
000000r 1  20 rr rr         JSR     copydata
000003r 1  4C rr rr         jmp kernel_init
000006r 1               
000006r 1               .segment "DATA"
000000r 1               
000000r 1               .include "drivers/acia.s"
000000r 2               acia_init:
000000r 2  8D E1 FF         sta ACIA_STATUS        ; soft reset (value not important)
000003r 2                                           ; set specific modes and functions
000003r 2  9C rr rr         stz has_acia
000006r 2  A9 0B            lda #$0B                ; no parity, no echo, no Tx interrupt, NO Rx interrupt, enable Tx/Rx
000008r 2                   ;lda #$09               ; no parity, no echo, no Tx interrupt, Rx interrupt, enable Tx/Rx
000008r 2  8D E2 FF         sta ACIA_CMD        ; store to the command register
00000Br 2  AD E2 FF         lda ACIA_CMD        ; load command register again
00000Er 2  C9 0B            cmp #$0B                ; if not the same
000010r 2  D0 11            bne acia_absent         ; then it means the ACIA is not connected
000012r 2  AD E1 FF         lda ACIA_STATUS         ; Read the ACAI status to
000015r 2  29 60            and #$60                ; check if present or absent
000017r 2  D0 0A            bne acia_absent
000019r 2  A9 01            lda #1
00001Br 2  8D rr rr         sta has_acia           ; remember that ACIA is here
00001Er 2  A9 10            lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 115.200k baud rate
000020r 2                   ;lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 1200 baud rate
000020r 2  8D E3 FF         sta ACIA_CTRL          ; program the ctl register
000023r 2               
000023r 2               acia_absent:
000023r 2  A0 14                ldy #20
000025r 2               aa_loop:
000025r 2  20 rr rr             jsr delay_short
000028r 2  AD E1 FF             lda ACIA_STATUS         ; Read ACIA data a few times
00002Br 2  AD E0 FF             lda ACIA_DATA           ; to try and prevent spurious characters
00002Er 2  88                   dey
00002Fr 2  D0 F4                bne aa_loop
000031r 2               aa_end:
000031r 2  60                   rts
000032r 2               
000032r 2               acia_out:
000032r 2  48               pha
000033r 2  5A               phy
000034r 2  8D E0 FF         sta ACIA_DATA
000037r 2  A0 40            ldy #$40            ;minimal delay is $02
000039r 2  20 rr rr         jsr delay_short
00003Cr 2  7A               ply
00003Dr 2  68               pla
00003Er 2  60               rts
00003Fr 2               
00003Fr 2               acia_getc:
00003Fr 2  AD E1 FF         lda ACIA_STATUS                 ; Read the ACIA status to
000042r 2  29 08            and #$08                        ; Check if there is character in the receiver
000044r 2  F0 05            beq @no_char      ; Exit now if we don't get one.
000046r 2  AD E0 FF         lda ACIA_DATA
000049r 2  38               sec
00004Ar 2  60               rts
00004Br 2               @no_char:
00004Br 2  18               clc
00004Cr 2  60               rts
00004Dr 2               
00004Dr 1               .include "drivers/timer.s"
00004Dr 2               
00004Dr 2               
00004Dr 2               COUNTER = CLOCK_SPEED/400        ; n/s
00004Dr 2               
00004Dr 2               .segment "ZEROPAGE": zeropage
000002r 2  xx xx xx xx  time: .res 4
000006r 2               
000006r 2               .segment "DATA"
00004Dr 2               
00004Dr 2               timer_init:
00004Dr 2  AD 8E FF         lda IER
000050r 2  09 C0            ora #$C0        ;enable interrupt on timer1 timeout
000052r 2  8D 8E FF         sta IER
000055r 2  A9 40            lda #$40        ; timer one free run mode
000057r 2  8D 8B FF         sta ACR
00005Ar 2  A9 60            lda #<COUNTER     ; set timer to low byte to calculated value from defined clock speed
00005Cr 2  8D 84 FF         sta T1CL
00005Fr 2  A9 EA            lda #>COUNTER       ; set timer to high byte to calculated value from defined clock speed
000061r 2               
000061r 2  8D 85 FF         sta T1CH
000064r 2  A9 00            lda #0              ; reset time variable
000066r 2  85 rr            sta time
000068r 2  85 rr            sta time+1
00006Ar 2  85 rr            sta time+2
00006Cr 2  85 rr            sta time+3
00006Er 2  58               cli
00006Fr 2  60               rts
000070r 2               
000070r 2               
000070r 2               timer_irq:
000070r 2  E6 rr            inc time
000072r 2  F0 01            beq @inc1
000074r 2               @exit1:
000074r 2                   ; this resets the PS/2 temp variables
000074r 2                   ;jsr reset_ps2
000074r 2  60               rts
000075r 2               @inc1:
000075r 2  E6 rr            inc time+1
000077r 2  F0 02            beq @inc2
000079r 2  80 F9            bra @exit1
00007Br 2               @inc2:
00007Br 2  E6 rr            inc time+2
00007Dr 2  F0 02            beq @inc3
00007Fr 2  80 F3            bra @exit1
000081r 2               @inc3:
000081r 2  E6 rr            inc time+3
000083r 2  80 EF            bra @exit1
000085r 2  60               rts
000086r 2               
000086r 1               .include "drivers/keyboard.s"
000086r 2               ; Copyright 2020 Jonathan Foucher
000086r 2               
000086r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000086r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000086r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000086r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000086r 2               ; is furnished to do so, subject to the following conditions:
000086r 2               
000086r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000086r 2               ; substantial portions of the Software.
000086r 2               
000086r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000086r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000086r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000086r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000086r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000086r 2               ; DEALINGS IN THE SOFTWARE.
000086r 2               
000086r 2               K_NO = 0;
000086r 2               K_GUI = 1;
000086r 2               K_SFT = 2;
000086r 2               K_CTL = 3;
000086r 2               K_ALT = 4;
000086r 2               K_CAPS = 5;
000086r 2               K_BSPC = $08;
000086r 2               K_TAB = 9;
000086r 2               K_ENT = $0A
000086r 2               K_ESC = $1B;
000086r 2               K_SCLN = $3B
000086r 2               
000086r 2               
000086r 2               KB_COUNTER = CLOCK_SPEED/2048
000086r 2               
000086r 2               
000086r 2               max_key_rollover = 4
000086r 2               
000086r 2               .segment "ZEROPAGE": zeropage
000006r 2  00 00 00 00  new_keys: .byte 0, 0, 0, 0, 0, 0, 0, 0
00000Ar 2  00 00 00 00  
00000Er 2  xx           kb_time: .res 1
00000Fr 2  00 00 00 00  keys: .byte 0, 0, 0, 0, 0, 0, 0, 0
000013r 2  00 00 00 00  
000017r 2               
000017r 2               .segment "BSS"
000002r 2  xx           key_quantity: .res 1
000003r 2  FF           buffer_quantity: .byte $ff
000004r 2  00 00 00 00  old_keys: .byte 0, 0, 0, 0, 0, 0, 0, 0
000008r 2  00 00 00 00  
00000Cr 2               
00000Cr 2               
00000Cr 2  xx xx xx xx  scan_result: .res 8
000010r 2  xx xx xx xx  
000014r 2  xx           too_many_keys: .res 1
000015r 2  xx           simultaneous_keys: .res 1
000016r 2  xx           kb_control_keys_mask: .res 1
000017r 2               
000017r 2               .segment "RODATA"
000000r 2               
000000r 2               keymap:
000000r 2                         ; SHIFT                             CTRL
000000r 2  00 00 09 34  .byte K_NO, K_NO,  K_TAB, '4', 'r', 'f', 'c', K_NO  ; COL 1
000004r 2  72 66 63 00  
000008r 2                         ; CAPS
000008r 2  00 00 1B 38  .byte K_NO, K_NO, K_ESC, '8', 'i', 'k', 'm', K_NO   ; COL 2
00000Cr 2  69 6B 6D 00  
000010r 2               ; $10                                     WIN
000010r 2  00 60 71 35  .byte K_NO, '`', 'q', '5', 't', 'g', 'v', K_NO   ; COL 3
000014r 2  74 67 76 00  
000018r 2               ; $18                                      ALT
000018r 2  00 61 31 39  .byte K_NO, 'a', '1', '9', 'o', 'l', ',',  K_NO   ; COL 4
00001Cr 2  6F 6C 2C 00  
000020r 2               ; $20
000020r 2  00 78 65 36  .byte K_NO, 'x', 'e', '6', 'y', 'h', 'b', ' '   ; COL 5
000024r 2  79 68 62 20  
000028r 2               ;$28
000028r 2  00 73 32 30  .byte K_NO, 's', '2', '0', 'p', K_SCLN, '.', '/'   ; COL 6
00002Cr 2  70 3B 2E 2F  
000030r 2               ; $30                                      RSHIFT FN
000030r 2  00 64 33 08  .byte K_NO, 'd', '3', K_BSPC, K_ENT, K_NO, K_NO, K_NO   ; COL 7
000034r 2  0A 00 00 00  
000038r 2               ; $38
000038r 2  00 7A 77 37  .byte K_NO, 'z', 'w', '7', 'u', 'j', 'n', K_NO   ; COL 8
00003Cr 2  75 6A 6E 00  
000040r 2               
000040r 2               
000040r 2               fn_keymap:
000040r 2                         ; SHIFT                             CTRL
000040r 2  00 00 09 34  .byte K_NO, K_NO,  K_TAB, '4', 'r', 'f', 'c', K_NO  ; COL 1
000044r 2  72 66 63 00  
000048r 2                         ; CAPS
000048r 2  00 00 1B 38  .byte K_NO, K_NO, K_ESC, '8', 'i', 'k', 'm', K_NO   ; COL 2
00004Cr 2  69 6B 6D 00  
000050r 2               ; $10                                     WIN
000050r 2  00 60 71 35  .byte K_NO, '`', 'q', '5', 't', 'g', 'v', K_NO   ; COL 3
000054r 2  74 67 76 00  
000058r 2               ; $18                                      ALT
000058r 2  00 61 31 39  .byte K_NO, 'a', '1', '9', 'o', 'l', ',',  K_NO   ; COL 4
00005Cr 2  6F 6C 2C 00  
000060r 2               ; $20
000060r 2  00 78 65 36  .byte K_NO, 'x', 'e', '6', 'y', 'h', 'b', ' '   ; COL 5
000064r 2  79 68 62 20  
000068r 2               ;$28
000068r 2  00 73 32 30  .byte K_NO, 's', '2', '0', 'p', K_SCLN, '.', '/'   ; COL 6
00006Cr 2  70 3B 2E 2F  
000070r 2               ; $30                                      RSHIFT FN
000070r 2  00 64 33 08  .byte K_NO, 'd', '3', K_BSPC, K_ENT, K_NO, K_NO, K_NO   ; COL 7
000074r 2  0A 00 00 00  
000078r 2               ; $38
000078r 2  00 7A 77 37  .byte K_NO, 'z', 'w', '7', 'u', 'j', 'n', K_NO   ; COL 8
00007Cr 2  75 6A 6E 00  
000080r 2               
000080r 2               shifted_keymap:
000080r 2                         ; SHIFT                             CTRL
000080r 2  00 00 09 24  .byte K_NO, K_NO,  K_TAB, '$', 'R', 'F', 'C', K_NO  ; COL 1
000084r 2  52 46 43 00  
000088r 2                         ; CAPS
000088r 2  00 00 1B 2A  .byte K_NO, K_NO, K_ESC, '*', 'I', 'K', 'M', K_NO   ; COL 2
00008Cr 2  49 4B 4D 00  
000090r 2               ; $10                                     WIN
000090r 2  00 7E 51 25  .byte K_NO, '~', 'Q', '%', 'T', 'G', 'V', K_NO   ; COL 3
000094r 2  54 47 56 00  
000098r 2               ; $18                                      ALT
000098r 2  00 41 21 28  .byte K_NO, 'A', '!', '(', 'O', 'L', '<',  K_NO   ; COL 4
00009Cr 2  4F 4C 3C 00  
0000A0r 2               ; $20
0000A0r 2  00 58 45 5E  .byte K_NO, 'X', 'E', '^', 'Y', 'H', 'B', ' '   ; COL 5
0000A4r 2  59 48 42 20  
0000A8r 2               ;$28
0000A8r 2  00 53 40 29  .byte K_NO, 'S', '@', ')', 'P', K_SCLN, '>', '?'   ; COL 6
0000ACr 2  50 3B 3E 3F  
0000B0r 2               ; $30                                      RSHIFT FN
0000B0r 2  00 44 23 08  .byte K_NO, 'D', '#', K_BSPC, K_ENT, K_NO, K_NO, K_NO   ; COL 7
0000B4r 2  0A 00 00 00  
0000B8r 2               ; $38
0000B8r 2  00 5A 57 26  .byte K_NO, 'Z', 'W', '&', 'U', 'J', 'N', K_NO   ; COL 8
0000BCr 2  55 4A 4E 00  
0000C0r 2               
0000C0r 2               .segment "DATA"
000086r 2               
000086r 2               ;Initialize the VIA for keyboard scanning
000086r 2               kb_init:
000086r 2  78             sei
000087r 2                 ; Set PORTA as ouput for cols
000087r 2  A9 FF          lda #$FF
000089r 2  8D 93 FF       sta KB_DDRA
00008Cr 2                 ; Set PORTB as input for rows
00008Cr 2  9C 92 FF       stz KB_DDRB
00008Fr 2                 ; reset key buffer
00008Fr 2  64 rr          stz new_keys
000091r 2  64 rr          stz new_keys+1
000093r 2  64 rr          stz new_keys+2
000095r 2  64 rr          stz new_keys+3
000097r 2  64 rr          stz new_keys+4
000099r 2  64 rr          stz new_keys+5
00009Br 2  64 rr          stz new_keys+6
00009Dr 2  64 rr          stz new_keys+7
00009Fr 2               
00009Fr 2  64 rr          stz keys
0000A1r 2  64 rr          stz keys+1
0000A3r 2  64 rr          stz keys+2
0000A5r 2  64 rr          stz keys+3
0000A7r 2  64 rr          stz keys+4
0000A9r 2  64 rr          stz keys+5
0000ABr 2  64 rr          stz keys+6
0000ADr 2  64 rr          stz keys+7
0000AFr 2               
0000AFr 2               
0000AFr 2               
0000AFr 2                 ; set timer
0000AFr 2  AD 9E FF       lda KB_IER
0000B2r 2  09 C0          ora #$C0        ;enable interrupt on timer1 timeout
0000B4r 2  8D 9E FF       sta KB_IER
0000B7r 2  A9 40          lda #$40        ; timer one free run mode
0000B9r 2  8D 9B FF       sta KB_ACR
0000BCr 2  A9 C6          lda #<KB_COUNTER     ; set timer to low byte to calculated value from defined clock speed
0000BEr 2  8D 94 FF       sta KB_T1CL
0000C1r 2  A9 2D          lda #>KB_COUNTER       ; set timer to high byte to calculated value from defined clock speed
0000C3r 2  8D 95 FF       sta KB_T1CH
0000C6r 2  58             cli
0000C7r 2               
0000C7r 2               
0000C7r 2  60             rts
0000C8r 2               
0000C8r 2               
0000C8r 2               
0000C8r 2               nothing_pressed:
0000C8r 2                 ;stz PORTA
0000C8r 2  9C rr rr       stz old_keys
0000CBr 2  9C rr rr       stz old_keys+1
0000CEr 2  9C rr rr       stz old_keys+2
0000D1r 2  9C rr rr       stz old_keys+3
0000D4r 2  9C rr rr       stz too_many_keys
0000D7r 2  A9 00          lda #0
0000D9r 2  7A             ply
0000DAr 2  FA             plx
0000DBr 2  18             clc
0000DCr 2  60             rts
0000DDr 2               
0000DDr 2               kb_get_char:
0000DDr 2  DA             phx
0000DEr 2  5A             phy
0000DFr 2                 ; ldy #$40
0000DFr 2                 ; jsr delay_short
0000DFr 2                 ; check if anything is pressed
0000DFr 2  A9 FF          lda #$FF
0000E1r 2  8D 91 FF       sta KB_PORTA
0000E4r 2  AD 90 FF       lda KB_PORTB
0000E7r 2  F0 DF          beq nothing_pressed
0000E9r 2                 ;sta PORTA
0000E9r 2                 ; make sure we don't have too many keys pressed at once
0000E9r 2  AD rr rr       lda too_many_keys
0000ECr 2  F0 06          beq @go
0000EEr 2  A9 00          lda #0
0000F0r 2  7A             ply
0000F1r 2  FA             plx
0000F2r 2  18             clc
0000F3r 2  60             rts
0000F4r 2               @go:
0000F4r 2                 ; scan matrix
0000F4r 2                 SCAN_DELAY = $10
0000F4r 2  A9 01          lda #1
0000F6r 2               @u1:
0000F6r 2  A0 10          ldy #SCAN_DELAY
0000F8r 2  20 rr rr       jsr delay_short
0000FBr 2  8D 91 FF       sta KB_PORTA
0000FEr 2  AC 90 FF       ldy KB_PORTB
000101r 2  8C rr rr       sty scan_result+7
000104r 2  AC 90 FF       ldy KB_PORTB
000107r 2  CC rr rr       cpy scan_result+7
00010Ar 2  D0 EA          bne @u1
00010Cr 2  0A             asl
00010Dr 2               @u2:
00010Dr 2  A0 10          ldy #SCAN_DELAY
00010Fr 2  20 rr rr       jsr delay_short
000112r 2  8D 91 FF       sta KB_PORTA
000115r 2  AC 90 FF       ldy KB_PORTB
000118r 2  8C rr rr       sty scan_result+6
00011Br 2  AC 90 FF       ldy KB_PORTB
00011Er 2  CC rr rr       cpy scan_result+6
000121r 2  D0 EA          bne @u2
000123r 2  0A             asl
000124r 2               @u3:
000124r 2  A0 10          ldy #SCAN_DELAY
000126r 2  20 rr rr       jsr delay_short
000129r 2  8D 91 FF       sta KB_PORTA
00012Cr 2  AC 90 FF       ldy KB_PORTB
00012Fr 2  8C rr rr       sty scan_result+5
000132r 2  AC 90 FF       ldy KB_PORTB
000135r 2  CC rr rr       cpy scan_result+5
000138r 2  D0 EA          bne @u3
00013Ar 2  0A             asl
00013Br 2               @u4:
00013Br 2  A0 10          ldy #SCAN_DELAY
00013Dr 2  20 rr rr       jsr delay_short
000140r 2  8D 91 FF       sta KB_PORTA
000143r 2  AC 90 FF       ldy KB_PORTB
000146r 2  8C rr rr       sty scan_result+4
000149r 2  AC 90 FF       ldy KB_PORTB
00014Cr 2  CC rr rr       cpy scan_result+4
00014Fr 2  D0 EA          bne @u4
000151r 2  0A             asl
000152r 2               @u5:
000152r 2  A0 10          ldy #SCAN_DELAY
000154r 2  20 rr rr       jsr delay_short
000157r 2  8D 91 FF       sta KB_PORTA
00015Ar 2  AC 90 FF       ldy KB_PORTB
00015Dr 2  8C rr rr       sty scan_result+3
000160r 2  AC 90 FF       ldy KB_PORTB
000163r 2  CC rr rr       cpy scan_result+3
000166r 2  D0 EA          bne @u5
000168r 2  0A             asl
000169r 2               @u6:
000169r 2  A0 10          ldy #SCAN_DELAY
00016Br 2  20 rr rr       jsr delay_short
00016Er 2  8D 91 FF       sta KB_PORTA
000171r 2  AC 90 FF       ldy KB_PORTB
000174r 2  8C rr rr       sty scan_result+2
000177r 2  AC 90 FF       ldy KB_PORTB
00017Ar 2  CC rr rr       cpy scan_result+2
00017Dr 2  D0 EA          bne @u6
00017Fr 2  0A             asl
000180r 2               @u7:
000180r 2  A0 10          ldy #SCAN_DELAY
000182r 2  20 rr rr       jsr delay_short
000185r 2  8D 91 FF       sta KB_PORTA
000188r 2  AC 90 FF       ldy KB_PORTB
00018Br 2  8C rr rr       sty scan_result+1
00018Er 2  AC 90 FF       ldy KB_PORTB
000191r 2  CC rr rr       cpy scan_result+1
000194r 2  D0 EA          bne @u7
000196r 2  0A             asl
000197r 2               @u8:
000197r 2  A0 10          ldy #SCAN_DELAY
000199r 2  20 rr rr       jsr delay_short
00019Cr 2  8D 91 FF       sta KB_PORTA
00019Fr 2  AC 90 FF       ldy KB_PORTB
0001A2r 2  8C rr rr       sty scan_result
0001A5r 2  AC 90 FF       ldy KB_PORTB
0001A8r 2  CC rr rr       cpy scan_result
0001ABr 2  D0 EA          bne @u8
0001ADr 2                 ;reset read buffer
0001ADr 2  64 rr          stz new_keys
0001AFr 2  64 rr          stz new_keys+1
0001B1r 2  64 rr          stz new_keys+2
0001B3r 2  64 rr          stz new_keys+3
0001B5r 2                 ; set max allowed keys presses
0001B5r 2  A9 04          lda #max_key_rollover
0001B7r 2  8D rr rr       sta key_quantity
0001BAr 2               
0001BAr 2  9C rr rr       stz kb_control_keys_mask
0001BDr 2               
0001BDr 2  A9 FC          lda #($FF - (max_key_rollover-1))
0001BFr 2  8D rr rr       sta simultaneous_keys
0001C2r 2                 ; Scan complete
0001C2r 2                 ; TODO check for control keys
0001C2r 2                 ; left shift
0001C2r 2  AD rr rr       lda scan_result+7
0001C5r 2  29 40          and #$40
0001C7r 2  D0 07          bne @shift
0001C9r 2  AD rr rr       lda scan_result+1
0001CCr 2  29 02          and #$02
0001CEr 2  F0 03          beq @no_shift
0001D0r 2               @shift:
0001D0r 2  8D rr rr       sta kb_control_keys_mask
0001D3r 2               
0001D3r 2               @no_shift:
0001D3r 2                 ;
0001D3r 2               
0001D3r 2  AD rr rr       lda scan_result+7
0001D6r 2  F0 05          beq @1
0001D8r 2  A2 00          ldx #0
0001DAr 2  20 rr rr       jsr keys_in_row
0001DDr 2               @1:
0001DDr 2  AD rr rr       lda scan_result+6
0001E0r 2  F0 05          beq @2
0001E2r 2  A2 08          ldx #8
0001E4r 2  20 rr rr       jsr keys_in_row
0001E7r 2               @2:
0001E7r 2  AD rr rr       lda scan_result+5
0001EAr 2  F0 05          beq @3
0001ECr 2  A2 10          ldx #16
0001EEr 2  20 rr rr       jsr keys_in_row
0001F1r 2               @3:
0001F1r 2  AD rr rr       lda scan_result+4
0001F4r 2  F0 05          beq @4
0001F6r 2  A2 18          ldx #24
0001F8r 2  20 rr rr       jsr keys_in_row
0001FBr 2               @4:
0001FBr 2  AD rr rr       lda scan_result+3
0001FEr 2  F0 05          beq @5
000200r 2  A2 20          ldx #32
000202r 2  20 rr rr       jsr keys_in_row
000205r 2               @5:
000205r 2  AD rr rr       lda scan_result+2
000208r 2  F0 05          beq @6
00020Ar 2  A2 28          ldx #40
00020Cr 2  20 rr rr       jsr keys_in_row
00020Fr 2               @6:
00020Fr 2  AD rr rr       lda scan_result+1
000212r 2  F0 05          beq @7
000214r 2  A2 30          ldx #48
000216r 2  20 rr rr       jsr keys_in_row
000219r 2               @7:
000219r 2  AD rr rr       lda scan_result
00021Cr 2  F0 05          beq @8
00021Er 2  A2 38          ldx #56
000220r 2  20 rr rr       jsr keys_in_row
000223r 2               @8:
000223r 2               
000223r 2               
000223r 2               
000223r 2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000223r 2               ; Key Scan Completed
000223r 2               
000223r 2               ; Put any new key (not in old scan) into buffer
000223r 2  A2 03          ldx #max_key_rollover-1
000225r 2               next_key:
000225r 2  B5 rr          lda new_keys, x
000227r 2  F0 36          beq @exist        ; Handle 'null' values
000229r 2  CD rr rr       cmp old_keys
00022Cr 2  F0 31          beq @exist
00022Er 2  CD rr rr       cmp old_keys+1
000231r 2  F0 2C          beq @exist
000233r 2  CD rr rr       cmp old_keys+2
000236r 2  F0 27          beq @exist
000238r 2  CD rr rr       cmp old_keys+3
00023Br 2  F0 22          beq @exist
00023Dr 2  CD rr rr       cmp old_keys+4
000240r 2  F0 1D          beq @exist
000242r 2  CD rr rr       cmp old_keys+5
000245r 2  F0 18          beq @exist
000247r 2  CD rr rr       cmp old_keys+6
00024Ar 2  F0 13          beq @exist
00024Cr 2  CD rr rr       cmp old_keys+7
00024Fr 2  F0 0E          beq @exist
000251r 2                 ; New Key Detected
000251r 2  EE rr rr       inc buffer_quantity
000254r 2  AC rr rr       ldy buffer_quantity
000257r 2  99 rr rr       sta keys,y
00025Ar 2                 ; Keep track of how many new Alphanumeric keys are detected
00025Ar 2  EE rr rr       inc simultaneous_keys
00025Dr 2  F0 5C          beq too_many_new_keys
00025Fr 2               @exist:
00025Fr 2  CA             dex
000260r 2  10 C3          bpl next_key
000262r 2               
000262r 2                 ; Anything in Buffer?
000262r 2  AC rr rr       ldy buffer_quantity
000265r 2  30 26          bmi buffer_empty
000267r 2                 ; Yes: Then return it and tidy up the buffer
000267r 2  CE rr rr       dec buffer_quantity
00026Ar 2  A5 rr          lda keys
00026Cr 2  A6 rr          ldx keys+1
00026Er 2  86 rr          stx keys
000270r 2  A6 rr          ldx keys+2
000272r 2  86 rr          stx keys+1
000274r 2  A6 rr          ldx keys+3
000276r 2  86 rr          stx keys+2
000278r 2  A6 rr          ldx keys+4
00027Ar 2  86 rr          stx keys+3
00027Cr 2  A6 rr          ldx keys+5
00027Er 2  86 rr          stx keys+4
000280r 2  A6 rr          ldx keys+6
000282r 2  86 rr          stx keys+5
000284r 2  A6 rr          ldx keys+7
000286r 2  86 rr          stx keys+6
000288r 2  64 rr          stz keys+7
00028Ar 2                 ; cmp kb_prev_char
00028Ar 2                 ; beq buffer_empty
00028Ar 2  38             sec
00028Br 2  80 03          bra return
00028Dr 2               
00028Dr 2               
00028Dr 2               buffer_empty:  ;No new Alphanumeric keys to handle.
00028Dr 2  A9 00          lda #0
00028Fr 2  18             clc
000290r 2               
000290r 2               return:
000290r 2                 ; sta kb_prev_char
000290r 2               ; Copy BufferNew to BufferOld
000290r 2  A6 rr          ldx new_keys
000292r 2  8E rr rr       stx old_keys
000295r 2  A6 rr          ldx new_keys+1
000297r 2  8E rr rr       stx old_keys+1
00029Ar 2  A6 rr          ldx new_keys+2
00029Cr 2  8E rr rr       stx old_keys+2
00029Fr 2  A6 rr          ldx new_keys+3
0002A1r 2  8E rr rr       stx old_keys+3
0002A4r 2  A6 rr          ldx new_keys+4
0002A6r 2  8E rr rr       stx old_keys+4
0002A9r 2  A6 rr          ldx new_keys+5
0002ABr 2  8E rr rr       stx old_keys+5
0002AEr 2  A6 rr          ldx new_keys+6
0002B0r 2  8E rr rr       stx old_keys+6
0002B3r 2  A6 rr          ldx new_keys+7
0002B5r 2  8E rr rr       stx old_keys+7
0002B8r 2  7A             ply
0002B9r 2  FA             plx
0002BAr 2  60             rts
0002BBr 2               
0002BBr 2               too_many_new_keys:
0002BBr 2  18               clc
0002BCr 2  A9 FF            lda #$ff
0002BEr 2  8D rr rr         sta buffer_quantity
0002C1r 2  8D rr rr         sta simultaneous_keys
0002C4r 2  A9 00            lda #$0
0002C6r 2  7A               ply
0002C7r 2  FA               plx
0002C8r 2  60               rts
0002C9r 2               
0002C9r 2               keys_in_row:
0002C9r 2  0A             asl
0002CAr 2  90 03          bcc @1
0002CCr 2  20 rr rr       jsr key_found
0002CFr 2               @1:
0002CFr 2  E8             inx
0002D0r 2  0A             asl
0002D1r 2  90 03          bcc @2
0002D3r 2  20 rr rr       jsr key_found
0002D6r 2               @2:
0002D6r 2  E8             inx
0002D7r 2  0A             asl
0002D8r 2  90 03          bcc @3
0002DAr 2  20 rr rr       jsr key_found
0002DDr 2               @3:
0002DDr 2  E8             inx
0002DEr 2  0A             asl
0002DFr 2  90 03          bcc @4
0002E1r 2  20 rr rr       jsr key_found
0002E4r 2               @4:
0002E4r 2  E8             inx
0002E5r 2  0A             asl
0002E6r 2  90 03          bcc @5
0002E8r 2  20 rr rr       jsr key_found
0002EBr 2               @5:
0002EBr 2  E8             inx
0002ECr 2  0A             asl
0002EDr 2  90 03          bcc @6
0002EFr 2  20 rr rr       jsr key_found
0002F2r 2               @6:
0002F2r 2  E8             inx
0002F3r 2  0A             asl
0002F4r 2  90 03          bcc @7
0002F6r 2  20 rr rr       jsr key_found
0002F9r 2               @7:
0002F9r 2  E8             inx
0002FAr 2  0A             asl
0002FBr 2  90 03          bcc @8
0002FDr 2  20 rr rr       jsr key_found
000300r 2               @8:
000300r 2               
000300r 2  60             rts
000301r 2               
000301r 2               key_found:
000301r 2  DA             phx
000302r 2  8E 81 FF       stx PORTA
000305r 2  CE rr rr       dec key_quantity
000308r 2  30 14          bmi overflow
00030Ar 2                 ; pha
00030Ar 2                 ; txa
00030Ar 2  AC rr rr       ldy kb_control_keys_mask
00030Dr 2  D0 05          bne @shifted
00030Fr 2               
00030Fr 2  BC rr rr       ldy keymap,x
000312r 2  80 03          bra @unshifted
000314r 2               @shifted:
000314r 2  BC rr rr       ldy shifted_keymap,x
000317r 2               @unshifted:
000317r 2  AE rr rr       ldx key_quantity
00031Ar 2  94 rr          sty new_keys,x
00031Cr 2                 ; sta new_keys,x
00031Cr 2                 ; pla
00031Cr 2  FA             plx
00031Dr 2  60             rts
00031Er 2               
00031Er 2               overflow:
00031Er 2  FA             plx
00031Fr 2  68             pla  ; Dirty hack to handle 2 layers of JSR
000320r 2  68             pla
000321r 2  68             pla
000322r 2  68             pla
000323r 2  7A             ply
000324r 2  FA             plx
000325r 2  A9 00          lda #0
000327r 2  18             clc
000328r 2  60             rts
000329r 2               
000329r 1               ; .include "drivers/ps2.s"
000329r 1               .include "drivers/delayroutines.s"
000329r 2               ; Copyright 2020 Jonathan Foucher
000329r 2               
000329r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000329r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000329r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000329r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000329r 2               ; is furnished to do so, subject to the following conditions:
000329r 2               
000329r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000329r 2               ; substantial portions of the Software.
000329r 2               
000329r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000329r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000329r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000329r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000329r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000329r 2               ; DEALINGS IN THE SOFTWARE.
000329r 2               
000329r 2               
000329r 2               ; this routine delays by 2304 * y + 23 cycles
000329r 2               delay:
000329r 2  DA             phx       ; 3 cycles
00032Ar 2  5A             phy       ; 3 cycles
00032Br 2               two:
00032Br 2  A2 FF          ldx #$ff  ; 2 cycles
00032Dr 2               one:
00032Dr 2  EA             nop       ; 2 cycles
00032Er 2  EA             nop       ; 2 cycles
00032Fr 2  CA             dex       ; 2 cycles
000330r 2  D0 FB          bne one   ; 3 for all cycles, 2 for last
000332r 2  88             dey       ; 2 cycles
000333r 2  D0 F6          bne two   ; 3 for all cycles, 2 for last
000335r 2  7A             ply       ; 4 cycles
000336r 2  FA             plx       ; 4 cycles
000337r 2  60             rts       ; 6 cycles
000338r 2               
000338r 2               ; delay is in Y register
000338r 2               delay_long:
000338r 2  48             pha
000339r 2  5A             phy
00033Ar 2  DA             phx
00033Br 2  98             tya
00033Cr 2  AA             tax
00033Dr 2               delay_long_loop:
00033Dr 2  A0 FF          ldy #$ff
00033Fr 2  20 rr rr       jsr delay
000342r 2  CA             dex
000343r 2  D0 F8          bne delay_long_loop
000345r 2  FA             plx
000346r 2  7A             ply
000347r 2  68             pla
000348r 2  60             rts
000349r 2               
000349r 2               delay_short:        ; delay Y * 19 cycles
000349r 2  5A             phy
00034Ar 2               delay_short_loop:
00034Ar 2  EA             nop               ; 2 cycles
00034Br 2  EA             nop               ; 2 cycles
00034Cr 2  EA             nop               ; 2 cycles
00034Dr 2  EA             nop               ; 2 cycles
00034Er 2  EA             nop               ; 2 cycles
00034Fr 2  EA             nop               ; 2 cycles
000350r 2  EA             nop               ; 2 cycles
000351r 2               
000351r 2               
000351r 2  88             dey               ; 2 cycles
000352r 2  D0 F6          bne delay_short_loop   ; 2 or 3 cycles
000354r 2  7A             ply
000355r 2  60             rts
000356r 2               
000356r 1               .include "drivers/4004.s"
000356r 2               LCD_DELAY = $08
000356r 2               
000356r 2               .segment "ZEROPAGE": zeropage
000017r 2  xx           LCD_BUF_W_PTR: .res 1
000018r 2  xx           LCD_BUF_R_PTR: .res 1
000019r 2  xx           lcd_pos: .res 1
00001Ar 2               
00001Ar 2               .segment "BSS"
000017r 2  xx xx xx xx  LCD_BUF: .res 256
00001Br 2  xx xx xx xx  
00001Fr 2  xx xx xx xx  
000117r 2               
000117r 2               .segment "DATA"
000356r 2               
000356r 2               ; initialize the LCD in 8 bit mode
000356r 2               lcd_init:
000356r 2  20 rr rr         jsr buf_clr
000359r 2  A9 00            lda #0
00035Br 2  8D rr rr         sta lcd_absent
00035Er 2  85 rr            sta LCD_BUF_W_PTR
000360r 2  85 rr            sta LCD_BUF_R_PTR
000362r 2  85 rr            sta lcd_pos
000364r 2  8D C0 FF         sta LCD_BASE
000367r 2               
000367r 2  A0 08            ldy #LCD_DELAY
000369r 2  20 rr rr         jsr delay_long
00036Cr 2               
00036Cr 2  A9 38            LDA #$38           ;function set: 8 bit, 2 lines, display off
00036Er 2  8D C0 FF         sta LCD_DISABLED
000371r 2  20 rr rr         jsr lcd1_inst
000374r 2  20 rr rr         jsr lcd2_inst
000377r 2  8D 80 FF         sta PORTB
00037Ar 2               
00037Ar 2  A0 08            ldy #LCD_DELAY
00037Cr 2  20 rr rr         jsr delay_long
00037Fr 2               
00037Fr 2  A9 0F            LDA #$0F            ;display on, cursor on, blink on
000381r 2  8D C0 FF         sta LCD_DISABLED
000384r 2  20 rr rr         jsr lcd1_inst
000387r 2  20 rr rr         jsr lcd2_inst
00038Ar 2               
00038Ar 2  A0 08            ldy #LCD_DELAY
00038Cr 2  20 rr rr         jsr delay_long
00038Fr 2               
00038Fr 2                   ;clear display
00038Fr 2  A9 01            LDA #$01
000391r 2  8D C0 FF         sta LCD_DISABLED
000394r 2  20 rr rr         jsr lcd1_inst
000397r 2  20 rr rr         jsr lcd2_inst
00039Ar 2               
00039Ar 2  A0 08            ldy #LCD_DELAY
00039Cr 2  20 rr rr         jsr delay_long
00039Fr 2               
00039Fr 2                   ;entry mode set
00039Fr 2  A9 06            LDA #$06
0003A1r 2  8D C0 FF         sta LCD_DISABLED
0003A4r 2  20 rr rr         jsr lcd1_inst
0003A7r 2  20 rr rr         jsr lcd2_inst
0003AAr 2               
0003AAr 2               
0003AAr 2               
0003AAr 2  A0 08            ldy #LCD_DELAY            ; wait a while
0003ACr 2  20 rr rr         jsr delay_long
0003AFr 2                   ;set dram address to start of screen
0003AFr 2  A9 80            LDA #$80
0003B1r 2  8D C0 FF         sta LCD_DISABLED
0003B4r 2  20 rr rr         jsr lcd1_inst
0003B7r 2  20 rr rr         jsr lcd2_inst
0003BAr 2               
0003BAr 2  A0 08            ldy #LCD_DELAY            ; wait a while
0003BCr 2               
0003BCr 2  20 rr rr         jsr delay_long
0003BFr 2  A4 07            ldy $7
0003C1r 2  8C 80 FF         sty PORTB
0003C4r 2  60               RTS
0003C5r 2               
0003C5r 2               ; Send an instruction in 8 bit mode
0003C5r 2               lcd1_inst:
0003C5r 2  5A               phy
0003C6r 2  8D C2 FF         sta LCD_ADDR | LCD1_ENABLED
0003C9r 2  A0 02            ldy #$2                    ; Delay 38 clock cycles - 3 us at 12.5 MHz
0003CBr 2  20 rr rr         jsr delay_short
0003CEr 2  8D C0 FF         sta LCD_DISABLED
0003D1r 2  A0 20            ldy #$20                     ; Delay 608 clock cycles - 48 us at 12.5 MHz
0003D3r 2  20 rr rr         jsr delay_short
0003D6r 2  7A               ply
0003D7r 2  60               rts
0003D8r 2               
0003D8r 2               
0003D8r 2               ; Send an instruction in 8 bit mode
0003D8r 2               lcd2_inst:
0003D8r 2  5A               phy
0003D9r 2  8D C4 FF         sta LCD_ADDR | LCD2_ENABLED
0003DCr 2  A0 02            ldy #$2                    ; Delay 38 clock cycles - 3 us at 12.5 MHz
0003DEr 2  20 rr rr         jsr delay_short
0003E1r 2  8D C0 FF         sta LCD_DISABLED
0003E4r 2  A0 20            ldy #$20                     ; Delay 608 clock cycles - 48 us at 12.5 MHz
0003E6r 2  20 rr rr         jsr delay_short
0003E9r 2  7A               ply
0003EAr 2  60               rts
0003EBr 2               
0003EBr 2               lcd_send:
0003EBr 2  8D C2 FF         sta LCD_ADDR | LCD1_ENABLED
0003EEr 2  A0 02            ldy #$2                    ; Delay 38 clock cycles - 3 us at 12.5 MHz
0003F0r 2  20 rr rr         jsr delay_short
0003F3r 2  8D C0 FF         sta LCD_DISABLED
0003F6r 2  A0 20            ldy #$20                     ; Delay 608 clock cycles - 48 us at 12.5 MHz
0003F8r 2  20 rr rr         jsr delay_short
0003FBr 2  8D C4 FF         sta LCD_ADDR | LCD2_ENABLED
0003FEr 2  A0 02            ldy #$2                    ; Delay 38 clock cycles - 3 us at 12.5 MHz
000400r 2  20 rr rr         jsr delay_short
000403r 2  8D C0 FF         sta LCD_DISABLED
000406r 2  A0 20            ldy #$20                     ; Delay 608 clock cycles - 48 us at 12.5 MHz
000408r 2  20 rr rr         jsr delay_short
00040Br 2  60               rts
00040Cr 2               
00040Cr 2               ; Sends the character in A to the display
00040Cr 2               lcd_print:               ; 8 bit data in A
00040Cr 2  5A               phy
00040Dr 2  DA               phx
00040Er 2  48               pha
00040Fr 2  C9 0A            cmp #$0A
000411r 2  F0 67            beq @next_line
000413r 2  C9 0D            cmp #$0D
000415r 2  F0 63            beq @next_line
000417r 2  C9 08            cmp #$08            ;backspace
000419r 2  F0 1F            beq @backspace
00041Br 2               
00041Br 2  20 rr rr         jsr lcd_send
00041Er 2  A6 rr            ldx lcd_pos
000420r 2  9D rr rr         sta LCD_BUF, x
000423r 2               
000423r 2  E8               inx
000424r 2                   ; Check at which position we are and change line if necessary
000424r 2  86 rr            stx lcd_pos
000426r 2               
000426r 2  E0 14            cpx #20
000428r 2  F0 2A            beq @line_2
00042Ar 2  E0 28            cpx #40
00042Cr 2  F0 31            beq @line_3
00042Er 2  E0 3C            cpx #60
000430r 2  F0 38            beq @line_4
000432r 2  E0 50            cpx #80
000434r 2  F0 3F            beq @clr
000436r 2               
000436r 2               @continue:
000436r 2  68               pla
000437r 2  FA               plx
000438r 2  7A               ply
000439r 2  60               rts
00043Ar 2               
00043Ar 2               ; LCD adressing http://web.alfredstate.edu/faculty/weimandn/lcd/lcd_addressing/lcd_addressing_index.html
00043Ar 2               @backspace:
00043Ar 2  A9 10            lda #$10            ; shift cursor left
00043Cr 2  20 rr rr         jsr lcd1_inst
00043Fr 2  A9 20            lda #$20            ; print a space to erase previous char
000441r 2  20 rr rr         jsr lcd_send
000444r 2               
000444r 2  A9 10            lda #$10            ; shift cursor left
000446r 2  20 rr rr         jsr lcd1_inst
000449r 2  C6 rr            dec lcd_pos
00044Br 2  A6 rr            ldx lcd_pos         ; save in buffer
00044Dr 2  A9 20            lda #$20
00044Fr 2  9D rr rr         sta LCD_BUF,x
000452r 2  80 E2            bra @continue
000454r 2               @line_2:
000454r 2  A9 14            lda #20
000456r 2  85 rr            sta lcd_pos
000458r 2  A9 C0            lda #$C0
00045Ar 2  20 rr rr         jsr lcd1_inst
00045Dr 2  80 D7            bra @continue
00045Fr 2               
00045Fr 2               @line_3:
00045Fr 2  A9 28            lda #40
000461r 2  85 rr            sta lcd_pos
000463r 2  A9 94            lda #$94
000465r 2  20 rr rr         jsr lcd1_inst
000468r 2  80 CC            bra @continue
00046Ar 2               
00046Ar 2               @line_4:
00046Ar 2  A9 3C            lda #60
00046Cr 2  85 rr            sta lcd_pos
00046Er 2  A9 D4            lda #$D4
000470r 2  20 rr rr         jsr lcd1_inst
000473r 2  80 C1            bra @continue
000475r 2               @clr:
000475r 2                   ; lda #0
000475r 2                   ; sta lcd_pos
000475r 2                   ; lda #$80
000475r 2                   ; jsr lcd_inst
000475r 2  20 rr rr         jsr lcd_scroll_up
000478r 2  80 BC            bra @continue
00047Ar 2               
00047Ar 2               @next_line:
00047Ar 2  A6 rr            ldx lcd_pos            ;get current position
00047Cr 2  E0 50            cpx #80
00047Er 2  F0 F5            beq @clr
000480r 2  E0 3C            cpx #60
000482r 2  F0 E6            beq @line_4
000484r 2  E0 28            cpx #40
000486r 2  F0 D7            beq @line_3
000488r 2  E0 14            cpx #20
00048Ar 2  F0 C8            beq @line_2
00048Cr 2  E8               inx
00048Dr 2  86 rr            stx lcd_pos
00048Fr 2  A9 20            lda #$20
000491r 2  20 rr rr         jsr lcd_send
000494r 2  9D rr rr         sta LCD_BUF, x
000497r 2  80 E1            bra @next_line
000499r 2               
000499r 2               lcd_scroll_up:
000499r 2  48               pha                     ; save registers
00049Ar 2  5A               phy
00049Br 2  DA               phx
00049Cr 2  A9 80            lda #$80                ; set LCD address to start
00049Er 2  20 rr rr         jsr lcd1_inst
0004A1r 2               
0004A1r 2  A2 14            ldx #20                 ; start getting characters at the start of the second line
0004A3r 2               @scroll_loop:
0004A3r 2  BD rr rr         lda LCD_BUF, X          ; load from buffer
0004A6r 2  20 rr rr         jsr lcd_send            ; send to display
0004A9r 2  A8               tay                     ; save current character in Y
0004AAr 2  E0 4F            cpx #79                 ; update LCD address if necessary
0004ACr 2  F0 4A            beq @scline_4
0004AEr 2  E0 3B            cpx #59
0004B0r 2  F0 3F            beq @scline_3
0004B2r 2  E0 27            cpx #39
0004B4r 2  F0 34            beq @scline_2
0004B6r 2               @sccontinue:                ; return from updating LCD address
0004B6r 2  8A               txa                     ; copy X to A to be able to subtract from it
0004B7r 2  38               sec                     ; set carry before subtraction
0004B8r 2  E9 14            sbc #20                 ; subtract 20 to get where to put this character
0004BAr 2  AA               tax                     ; put the result in X
0004BBr 2  98               tya                     ; restore character from Y
0004BCr 2  9D rr rr         sta LCD_BUF, X          ; store char in buffer
0004BFr 2  8A               txa                     ; copy X to A to be able to add to it
0004C0r 2  18               clc
0004C1r 2  69 14            adc #20                 ; add 20 to restore X
0004C3r 2  AA               tax                     ; put the result back in X
0004C4r 2  E8               inx                     ; increment X to prepare to get next char
0004C5r 2  E0 50            cpx #80                 ; if not at end of buffer
0004C7r 2  90 DA            bcc @scroll_loop        ; do next char
0004C9r 2                   ; fill the last line with spaces
0004C9r 2  A9 D4            lda #$D4                ; set address to last line
0004CBr 2  20 rr rr         jsr lcd1_inst
0004CEr 2  A9 20            lda #$20
0004D0r 2  A2 3C            ldx #60
0004D2r 2               @last_line_loop:
0004D2r 2  9D rr rr         sta LCD_BUF, x
0004D5r 2  20 rr rr         jsr lcd_send
0004D8r 2  E8               inx
0004D9r 2  E0 50            cpx #80                 ; if not at end of buffer
0004DBr 2  90 F5            bcc @last_line_loop     ; do next char
0004DDr 2               
0004DDr 2                   ;finally, place the cursor at the start of the last line
0004DDr 2  A9 3C            lda #60
0004DFr 2  85 rr            sta lcd_pos
0004E1r 2  A9 D4            lda #$D4
0004E3r 2  20 rr rr         jsr lcd1_inst
0004E6r 2  FA               plx                     ; restore everything as it was
0004E7r 2  7A               ply
0004E8r 2  68               pla
0004E9r 2  60               rts
0004EAr 2               
0004EAr 2               @scline_2:
0004EAr 2  A9 C0            lda #$C0
0004ECr 2  20 rr rr         jsr lcd1_inst
0004EFr 2  80 C5            bra @sccontinue
0004F1r 2               
0004F1r 2               @scline_3:
0004F1r 2  A9 94            lda #$94
0004F3r 2  20 rr rr         jsr lcd1_inst
0004F6r 2  80 BE            bra @sccontinue
0004F8r 2               
0004F8r 2               @scline_4:
0004F8r 2  A9 D4            lda #$D4
0004FAr 2  20 rr rr         jsr lcd1_inst
0004FDr 2  80 B7            bra @sccontinue
0004FFr 2               
0004FFr 2               lcd_clear:
0004FFr 2  48               PHA
000500r 2                   ;clear display
000500r 2  A9 01            LDA #$01
000502r 2  20 rr rr         jsr lcd1_inst
000505r 2                   ;set dram address
000505r 2  A9 80            LDA #$80
000507r 2  20 rr rr         jsr lcd1_inst
00050Ar 2  68               PLA
00050Br 2  60               RTS
00050Cr 2               
00050Cr 2               
00050Cr 2               buf_clr:
00050Cr 2  48               pha
00050Dr 2  DA               phx
00050Er 2  A2 80            ldx #$80
000510r 2  A9 20            lda #$20
000512r 2               buf_clr_loop:
000512r 2  9D rr rr         sta LCD_BUF,X
000515r 2  CA               dex
000516r 2  D0 FA            bne buf_clr_loop
000518r 2  FA               plx
000519r 2  68               pla
00051Ar 2  60               rts
00051Br 2               
00051Br 1               ; .include "drivers/lcd.s"
00051Br 1               ; .include "drivers/spi.s"
00051Br 1               ; .include "drivers/sd.s"
00051Br 1               ; .include "drivers/vga.s"
00051Br 1               ; .include "drivers/fat32.s"
00051Br 1               
00051Br 1               .include "../../forth.s"
00051Br 2               .include "../../macros.s"
00051Br 3               .macro  printascii   addr
00051Br 3                   ldx #0
00051Br 3               @loop:
00051Br 3                   lda addr,x
00051Br 3                   beq @done
00051Br 3                   jsr kernel_putc
00051Br 3                   inx
00051Br 3                   bra @loop
00051Br 3               @done:
00051Br 3               .endmacro
00051Br 3               
00051Br 3               
00051Br 2               
00051Br 2               
00051Br 2               ; Definitions for Tali Forth 2
00051Br 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00051Br 2               ; First version: 01. Apr 2016 (Liara Forth)
00051Br 2               ; This version: 29. Jan 2020
00051Br 2               
00051Br 2               ; This file is included by taliforth.asm. These are the general
00051Br 2               ; definitions; platform-specific definitions such as the
00051Br 2               ; memory map are kept in the platform folder.
00051Br 2               
00051Br 2               
00051Br 2               ; User Variables:
00051Br 2               ; Block variables
00051Br 2               blk_offset =  0        ; BLK : UP + 0
00051Br 2               scr_offset =  2        ; SCR : UP + 2
00051Br 2               
00051Br 2               ; Wordlists
00051Br 2               current_offset =  4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
00051Br 2               num_wordlists_offset =  5
00051Br 2                                          ; #WORDLISTS (byte) : UP + 5
00051Br 2               wordlists_offset =  6  ; WORDLISTS (cells) : UP + 6 to UP + 29
00051Br 2                                          ;          (FORTH, EDITOR, ASSEMBLER, ROOT, +8 more)
00051Br 2               num_order_offset =  30 ; #ORDER (byte) : UP + 30
00051Br 2                                          ;          (Number of wordlists in search order)
00051Br 2               search_order_offset =  31
00051Br 2                                          ; SEARCH-ORDER (bytes) : UP + 31 to UP + 39
00051Br 2                                          ; Allowing for 9 to keep offsets even.
00051Br 2               max_wordlists =  12    ; Maximum number of wordlists supported
00051Br 2                                          ; 4 Tali built-ins + 8 user wordlists
00051Br 2               
00051Br 2               ; Buffer variables
00051Br 2               blkbuffer_offset =     40   ; Address of buffer
00051Br 2               buffblocknum_offset =  42   ; Block number current in buffer
00051Br 2               buffstatus_offset =    44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
00051Br 2               
00051Br 2               ; Block I/O vectors
00051Br 2               blockread_offset =     46   ; Vector to block reading routine
00051Br 2               blockwrite_offset =    48   ; Vector to block writing routine
00051Br 2               
00051Br 2               
00051Br 2               ; ASCII CHARACTERS
00051Br 2               AscCC =   $03  ; break (CTRL-c)
00051Br 2               AscBELL = $07  ; bell sound
00051Br 2               AscBS =   $08  ; backspace
00051Br 2               AscLF =   $0a  ; line feed
00051Br 2               AscCR =   $0d  ; carriage return
00051Br 2               AscESC =  $1b  ; escape
00051Br 2               AscSP =   $20  ; space
00051Br 2               AscDEL =  $7f  ; delete (CTRL-h)
00051Br 2               AscCP =   $10  ; CTRL-p (used to recall previous input history)
00051Br 2               AscCN =   $0e  ; CTRL-n (used to recall next input history)
00051Br 2               
00051Br 2               ; DICTIONARY FLAGS
00051Br 2               ; The first three bits are currently unused
00051Br 2               CO = 1  ; Compile Only
00051Br 2               AN = 2  ; Always Native Compile
00051Br 2               IM = 4  ; Immediate Word
00051Br 2               NN = 8  ; Never Native Compile
00051Br 2               UF = 16 ; Includes Underflow Check (RESERVED)
00051Br 2               HC = 32 ; Word has Code Field Area (CFA)
00051Br 2               
00051Br 2               
00051Br 2               ; VARIOUS
00051Br 2               MAX_LINE_LENGTH =   79      ; assumes 80 character lines
00051Br 2               
00051Br 2               ; END
00051Br 2               
00051Br 2               .segment "ZEROPAGE": zeropage
00001Ar 2               ; ZERO PAGE ADDRESSES/VARIABLES
00001Ar 2               
00001Ar 2               ; These are kept at the top of Zero Page, with the most important variables at
00001Ar 2               ; the top because the Data Stack grows towards this area from dsp0: If there is
00001Ar 2               ; an overflow, the lower, less important variables will be clobbered first,
00001Ar 2               ; giving the system a chance to recover. In other words, they are part of the
00001Ar 2               ; floodplain.
00001Ar 2               
00001Ar 2               ; The four variables insrc, cib, ciblen, and toin must stay together in this
00001Ar 2               ; sequence for the words INPUT>R and R>INPUT to work correctly.
00001Ar 2               
00001Ar 2  xx xx        cp: .res 2   ; Compiler Pointer
00001Cr 2  xx xx        dp: .res 2   ; Dictionary Pointer
00001Er 2  xx xx        workword: .res 2   ; nt (not xt!) of word being compiled, except in
000020r 2                                          ; a :NONAME declared word (see status)
000020r 2  xx xx        insrc: .res 2   ; input Source for SOURCE-ID
000022r 2  xx xx        cib: .res 2   ; address of current input buffer
000024r 2  xx xx        ciblen: .res 2  ; length of current input buffer
000026r 2  xx xx        toin: .res 2  ; pointer to CIB (>IN in Forth)
000028r 2  xx xx        ip: .res 2  ; Instruction Pointer (current xt)
00002Ar 2  xx xx        output: .res 2  ; vector for EMIT
00002Cr 2  xx xx        input: .res 2  ; vector for KEY
00002Er 2  xx xx        havekey: .res 2  ; vector for KEY?
000030r 2  xx xx        state: .res 2  ; STATE: -1 compile, 0 interpret
000032r 2  xx xx        base: .res 2  ; number radix, default decimal
000034r 2  xx xx        nc_limit: .res 2  ; limit for Native Compile size
000036r 2  xx xx        uf_strip: .res 2  ; flag to strip underflow detection code
000038r 2  xx xx        up: .res 2  ; User Pointer (Address of user variables)
00003Ar 2  xx xx        status: .res 2  ; internal status information
00003Cr 2                                          ; (used by : :NONAME ; ACCEPT)
00003Cr 2                                          ; Bit 7 = Redefined word message postpone
00003Cr 2                                          ;         When set before calling CREATE, it will
00003Cr 2                                          ;         not print the "redefined xxxx" message if
00003Cr 2                                          ;         the word exists. Instead, this bit will
00003Cr 2                                          ;         be reused and after CREATE has run, it will
00003Cr 2                                          ;         be set if the word was redefined and 0 if
00003Cr 2                                          ;         not. This bit should be 0 when not in use.
00003Cr 2                                          ; Bit 6 = 1 for normal ":" definitions
00003Cr 2                                          ;         WORKWORD contains nt of word being compiled
00003Cr 2                                          ;       = 0 for :NONAME definitions
00003Cr 2                                          ;         WORKWORD contains xt of word being compiled
00003Cr 2                                          ; Bit 5 = 1 for NUMBER returning a double word
00003Cr 2                                          ;       = 0 for NUMBER returning a single word
00003Cr 2                                          ; Bit 3 = 1 makes CTRL-n recall current history
00003Cr 2                                          ;       = 0 CTRL-n recalls previous history
00003Cr 2                                          ; Bit 2 = Current history buffer msb
00003Cr 2                                          ; Bit 1 = Current history buffer (0-7, wraps)
00003Cr 2                                          ; Bit 0 = Current history buffer lsb
00003Cr 2                                          ; status+1 is used by ACCEPT to hold history lengths.
00003Cr 2  xx xx        tmpbranch: .res 2  ; temporary storage for 0BRANCH, BRANCH only
00003Er 2  xx xx        tmp1: .res 2  ; temporary storage
000040r 2  xx xx        tmp2: .res 2  ; temporary storage
000042r 2  xx xx        tmp3: .res 2  ; temporary storage (especially for print)
000044r 2  xx xx        tmpdsp: .res 2  ; temporary DSP (X) storage (two bytes)
000046r 2  xx xx        tmptos: .res 2  ; temporary TOS storage
000048r 2  xx xx        editor1: .res 2  ; temporary for editors
00004Ar 2  xx xx        editor2: .res 2  ; temporary for editors
00004Cr 2  xx xx        editor3: .res 2  ; temporary for editors
00004Er 2  xx xx        tohold: .res 2  ; pointer for formatted output
000050r 2  xx xx xx xx  scratch: .res 8  ; 8 byte scratchpad (see UM/MOD)
000054r 2  xx xx xx xx  
000058r 2  xx xx xx xx  dsp_start: .res 128 ; reserve 128 bytes for data stack (64 16 bit cells)
00005Cr 2  xx xx xx xx  
000060r 2  xx xx xx xx  
0000D8r 2               dsp0 = $FF          ; first data stack location. Data stack grows down
0000D8r 2               rsp0 =      $FF     ; starting stack pointer
0000D8r 2               stack0 =    $0100   ; location of the stack
0000D8r 2               
0000D8r 2               
0000D8r 2               .segment "BSS"
000117r 2  xx xx xx xx  hist_buff: .res $400
00011Br 2  xx xx xx xx  
00011Fr 2  xx xx xx xx  
000517r 2  xx xx xx xx  buffer0: .res $100
00051Br 2  xx xx xx xx  
00051Fr 2  xx xx xx xx  
000617r 2               .segment "DICTIONARY"   ; the dictionary gets its own segment so that it uses all the space left in RAM
000000r 2  xx xx xx xx  dictionary: .res $1000
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
001000r 2               
001000r 2               cp_end = $7FFF          ; the dictionary ends at RAM end (everything else is before)
001000r 2               
001000r 2               cp0 = dictionary
001000r 2               bsize =     $ff
001000r 2               padoffset = $ff
001000r 2               
001000r 2               
001000r 2               .segment "DATA"
00051Br 2               
00051Br 2               forth:
00051Br 2                   .include "native_words.s"     ; Native Forth words. Starts with COLD
00051Br 3               ; Low-level Forth word routines
00051Br 3               ; Tali Forth 2 for the 65c02
00051Br 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00051Br 3               ; First version: 19. Jan 2014
00051Br 3               ; This version: 03. Jan 2018
00051Br 3               
00051Br 3               ; This list is ordered alphabetically by the names of the words, not their
00051Br 3               ; strings (so "!" is sorted as "STORE"). However, we start off with COLD,
00051Br 3               ; ABORT, and QUIT as the natural start sequence. Each word has two special
00051Br 3               ; status lines that begins with "; ## ", which allows auto-generation of the
00051Br 3               ; WORDLIST.md file and other entries in the docs folder. Status entries are:
00051Br 3               
00051Br 3               ;       TBA --> fragment --> coded --> tested --> auto
00051Br 3               
00051Br 3               ; "Auto" means that the word is automatically tested by the test suite (good),
00051Br 3               ; "tested" means that it was tested by hand in some way (okay), "coded" means
00051Br 3               ; it hasn't been tested at all (bad). See the test suite for more details.
00051Br 3               
00051Br 3               ; ## COLD ( -- ) "Reset the Forth system"
00051Br 3               ; ## "cold"  tested  Tali Forth
00051Br 3               ;       """Reset the Forth system. Does not restart the kernel,
00051Br 3               ;       use the 65c02 reset for that. Flows into ABORT.
00051Br 3               ;       """
00051Br 3               xt_cold:
00051Br 3  D8                           cld
00051Cr 3               
00051Cr 3                               ; Set the OUTPUT vector to the default kernel_putc
00051Cr 3                               ; We do this really early so we can print error messages
00051Cr 3                               ; during debugging
00051Cr 3  A9 rr                        lda #<kernel_putc
00051Er 3  85 rr                        sta output
000520r 3  A9 rr                        lda #>kernel_putc
000522r 3  85 rr                        sta output+1
000524r 3               
000524r 3                               ; Load all of the important zero page variables from ROM
000524r 3  A2 21                        ldx #cold_zp_table_end-cold_zp_table-1
000526r 3               
000526r 3               @load_zp_loop:
000526r 3                               ; This loop loads them back to front. We can use X here
000526r 3                               ; because Tali hasn't started using the stack yet.
000526r 3  BD rr rr                     lda cold_zp_table,x
000529r 3  95 rr                        sta cp,x
00052Br 3  CA                           dex
00052Cr 3  D0 F8                        bne @load_zp_loop
00052Er 3               
00052Er 3                               ; Copy the 0th element.
00052Er 3  AD rr rr                     lda cold_zp_table
000531r 3  85 rr                        sta cp
000533r 3                               ; Initialize 65c02 stack (Return Stack)
000533r 3  A2 FF                        ldx #rsp0
000535r 3  9A                           txs
000536r 3               
000536r 3                               ; Clear Data Stack. This is repeated in ABORT, but this way we
000536r 3                               ; can load high-level words with EVALUATE
000536r 3  A2 FF                        ldx #dsp0
000538r 3               
000538r 3               
000538r 3                               ; Initialize the user variables.
000538r 3  A0 31                        ldy #cold_user_table_end-cold_user_table-1
00053Ar 3  A9 00                        lda #0
00053Cr 3               
00053Cr 3               @load_user_vars_loop:
00053Cr 3                               ; Like the zero page variables, these are initialized
00053Cr 3                               ; back to front.
00053Cr 3  B9 rr rr                     lda cold_user_table,y
00053Fr 3  91 rr                        sta (up),y
000541r 3  88                           dey
000542r 3  D0 F8                        bne @load_user_vars_loop
000544r 3               
000544r 3                               ; Copy the 0th element.
000544r 3  AD rr rr                     lda cold_user_table
000547r 3  92 rr                        sta (up)
000549r 3  20 rr rr                     jsr xt_cr
00054Cr 3               
00054Cr 3                               ; Define high-level words in forth_words.asm via EVALUATE. If
00054Cr 3                               ; you do not have any high-level words, this part can be
00054Cr 3                               ; commented out.
00054Cr 3  CA                           dex
00054Dr 3  CA                           dex
00054Er 3  CA                           dex
00054Fr 3  CA                           dex
000550r 3               
000550r 3               
000550r 3                               ; start address goes NOS
000550r 3  A9 rr                        lda #<forth_words_start
000552r 3  95 02                        sta 2,x
000554r 3  A9 rr                        lda #>forth_words_start
000556r 3  95 03                        sta 3,x
000558r 3               
000558r 3                               ; length goes TOS
000558r 3  A9 rr                        lda #<forth_words_end
00055Ar 3  38                           sec
00055Br 3  E9 rr                        sbc #<forth_words_start
00055Dr 3  95 00                        sta 0,x
00055Fr 3               
00055Fr 3  A9 rr                        lda #>forth_words_end
000561r 3  E9 rr                        sbc #>forth_words_start
000563r 3  95 01                        sta 1,x
000565r 3               
000565r 3               
000565r 3  20 rr rr                     jsr xt_evaluate
000568r 3               
000568r 3                               ; Now define any user words via EVALUATE. If you do not have
000568r 3                               ; any user-defined words, this part can be commented out as
000568r 3                               ; well.
000568r 3  CA                           dex
000569r 3  CA                           dex
00056Ar 3  CA                           dex
00056Br 3  CA                           dex
00056Cr 3               
00056Cr 3               
00056Cr 3                               ; start address goes NOS
00056Cr 3  A9 rr                        lda #<user_words_start
00056Er 3  95 02                        sta 2,x
000570r 3  A9 rr                        lda #>user_words_start
000572r 3  95 03                        sta 3,x
000574r 3               
000574r 3                               ; length goes TOS
000574r 3  A9 rr                        lda #<user_words_end
000576r 3  38                           sec
000577r 3  E9 rr                        sbc #<user_words_start
000579r 3  95 00                        sta 0,x
00057Br 3               
00057Br 3  A9 rr                        lda #>user_words_end
00057Dr 3  E9 rr                        sbc #>user_words_start
00057Fr 3  95 01                        sta 1,x
000581r 3               
000581r 3  20 rr rr                     jsr xt_evaluate
000584r 3               
000584r 3                               ; Initialize all of the history buffers by putting a zero in
000584r 3                               ; each length byte.
000584r 3  9C rr rr                     stz hist_buff
000587r 3  9C rr rr                     stz hist_buff+$80
00058Ar 3  9C rr rr                     stz hist_buff+$100
00058Dr 3  9C rr rr                     stz hist_buff+$180
000590r 3  9C rr rr                     stz hist_buff+$200
000593r 3  9C rr rr                     stz hist_buff+$280
000596r 3  9C rr rr                     stz hist_buff+$300
000599r 3  9C rr rr                     stz hist_buff+$380
00059Cr 3               
00059Cr 3               
00059Cr 3                               ; fall through to ABORT
00059Cr 3               
00059Cr 3               
00059Cr 3               ; ## ABORT ( -- ) "Reset the Data Stack and restart the CLI"
00059Cr 3               ; ## "abort"  tested  ANS core
00059Cr 3                       ; """https://forth-standard.org/standard/core/ABORT
00059Cr 3                       ; Clear Data Stack and continue into QUIT. We can jump here via
00059Cr 3                       ; subroutine if we want to because we are going to reset the 65c02's
00059Cr 3                       ; stack pointer (the Return Stack) anyway during QUIT. Note we don't
00059Cr 3                       ; actually delete the stuff on the Data Stack.
00059Cr 3                       ; """
00059Cr 3               xt_abort:
00059Cr 3  A2 FF                        ldx #dsp0
00059Er 3               
00059Er 3                               ; fall through to QUIT
00059Er 3               
00059Er 3               
00059Er 3               ; ## QUIT ( -- ) "Reset the input and get new input"
00059Er 3               ; ## "quit"  tested  ANS core
00059Er 3                       ; """https://forth-standard.org/standard/core/QUIT
00059Er 3                       ; Rest the input and start command loop
00059Er 3                       ; """
00059Er 3               
00059Er 3               xt_quit:
00059Er 3                               ; Clear the Return Stack. This is a little screwed up
00059Er 3                               ; because the 65c02 can only set the Return Stack via X,
00059Er 3                               ; which is our Data Stack pointer. The ANS specification
00059Er 3                               ; demands, however, that ABORT reset the Data Stack pointer
00059Er 3  8A                           txa             ; Save the DSP that we just defined
00059Fr 3  A2 FF                        ldx #rsp0
0005A1r 3  9A                           txs
0005A2r 3  AA                           tax             ; Restore the DSP. Dude, seriously.
0005A3r 3               
0005A3r 3                               ; make sure instruction pointer is empty
0005A3r 3  64 rr                        stz ip
0005A5r 3  64 rr                        stz ip+1
0005A7r 3               
0005A7r 3                               ; SOURCE-ID is zero (keyboard input)
0005A7r 3  64 rr                        stz insrc
0005A9r 3  64 rr                        stz insrc+1
0005ABr 3               
0005ABr 3                               ; STATE is zero (interpret, not compile)
0005ABr 3  64 rr                        stz state
0005ADr 3  64 rr                        stz state+1
0005AFr 3               @get_line:
0005AFr 3  A9 rr                        lda #<buffer0   ; input buffer, this is paranoid
0005B1r 3  85 rr                        sta cib
0005B3r 3  A9 rr                        lda #>buffer0
0005B5r 3  85 rr                        sta cib+1
0005B7r 3               
0005B7r 3                               ; Size of current input buffer (CIB) is zero
0005B7r 3  64 rr                        stz ciblen
0005B9r 3  64 rr                        stz ciblen+1
0005BBr 3               
0005BBr 3                               ; Accept a line from the current import source. This is how
0005BBr 3                               ; modern Forths to it.
0005BBr 3  20 rr rr                     jsr xt_refill           ; ( -- f )
0005BEr 3               
0005BEr 3                               ; Test flag: LSB of TOS
0005BEr 3  B5 00                        lda 0,x
0005C0r 3  D0 05                        bne @success
0005C2r 3               
0005C2r 3                               ; If REFILL returned a FALSE flag, something went wrong and we
0005C2r 3                               ; need to print an error message and reset the machine. We
0005C2r 3                               ; don't need to save TOS because we're going to clobber it
0005C2r 3                               ; anyway when we go back to ABORT.
0005C2r 3  A9 06                        lda #err_refill
0005C4r 3  4C rr rr                     jmp error
0005C7r 3               
0005C7r 3               @success:
0005C7r 3                               ; Assume we have successfully accepted a string of input from
0005C7r 3                               ; a source, with address cib and length of input in ciblen. We
0005C7r 3                               ; arrive here still with the TRUE flag from REFILL as TOS
0005C7r 3  E8                           inx                     ; drop
0005C8r 3  E8                           inx
0005C9r 3               
0005C9r 3                               ; Main compile/execute routine
0005C9r 3  20 rr rr                     jsr interpret
0005CCr 3               
0005CCr 3                               ; Test for Data Stack underflow. Tali Forth does not check for
0005CCr 3                               ; overflow because it is so rare
0005CCr 3  E0 FF                        cpx #dsp0
0005CEr 3  F0 05                        beq @stack_ok
0005D0r 3  90 03                        bcc @stack_ok           ; DSP must always be smaller than DSP0
0005D2r 3               
0005D2r 3  4C rr rr                     jmp underflow_error
0005D5r 3               
0005D5r 3               @stack_ok:
0005D5r 3                               ; Display system prompt if all went well. If we're interpreting,
0005D5r 3                               ; this is " ok", if we're compiling, it's " compiled". Note
0005D5r 3                               ; space at beginning of the string.
0005D5r 3  A5 rr                        lda state
0005D7r 3  F0 02                        beq @print
0005D9r 3               
0005D9r 3  A9 01                        lda #1                  ; number for "compile" string
0005DBr 3               @print:
0005DBr 3  20 rr rr                     jsr print_string
0005DEr 3               
0005DEr 3                               ; Awesome line, everybody! Now get the next one.
0005DEr 3  80 CF                        bra @get_line
0005E0r 3               
0005E0r 3               z_cold:
0005E0r 3               z_abort:
0005E0r 3               z_quit:         ; no RTS required
0005E0r 3               
0005E0r 3               
0005E0r 3               
0005E0r 3               ; This table holds all of the initial values for the variables in zero page.
0005E0r 3               ; This table is used by COLD.
0005E0r 3               cold_zp_table:
0005E0r 3  rr rr                .word cp0+256+1024      ; cp moved to make room for user vars and
0005E2r 3                                               ; block buffer
0005E2r 3  rr rr                .word dictionary_start  ; dp
0005E4r 3  00 00                .word 0                 ; workword
0005E6r 3  00 00                .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
0005E8r 3  rr rr                .word buffer0           ; cib
0005EAr 3  00 00                .word 0                 ; ciblen
0005ECr 3  00 00                .word 0                 ; toin
0005EEr 3  00 00                .word 0                 ; ip
0005F0r 3  rr rr                .word kernel_putc       ; output
0005F2r 3  rr rr                .word kernel_getc       ; input
0005F4r 3  00 00                .word 0                 ; havekey
0005F6r 3  00 00                .word 0                 ; state (0 = interpret)
0005F8r 3  0A 00                .word 10                ; base
0005FAr 3  14 00                .word 20                ; nc-limit
0005FCr 3  00 00                .word 0                 ; uf_strip (off by default)
0005FEr 3  rr rr                .word cp0               ; up (user vars put right at beginning of
000600r 3                                               ; available RAM)
000600r 3  00 00                .word 0                 ; status
000602r 3               cold_zp_table_end:
000602r 3               
000602r 3               ; No further ZP variables are initialized. The variables past this point are
000602r 3               ; all temporaries.
000602r 3               
000602r 3               ; This table holds the inital values for the user variables. This table is
000602r 3               ; used by COLD.
000602r 3               cold_user_table:
000602r 3  00 00                .word 0                         ; BLK
000604r 3  00 00                .word 0                         ; SCR
000606r 3  00                   .byte 0                         ; CURRENT = FORTH-WORDLIST
000607r 3  04                   .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
000608r 3  rr rr                .word dictionary_start          ; FORTH-WORDLIST
00060Ar 3  rr rr                .word editor_dictionary_start   ; EDITOR-WORDLIST
00060Cr 3  rr rr                .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
00060Er 3  rr rr                .word root_dictionary_start     ; ROOT-WORDLIST
000610r 3  00 00 00 00          .word 0,0,0,0,0,0,0,0           ; User wordlists
000614r 3  00 00 00 00  
000618r 3  00 00 00 00  
000620r 3  01                   .byte 1                         ; #ORDER
000621r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0         ; search-order
000625r 3  00 00 00 00  
000629r 3  00           
00062Ar 3  rr rr                .word cp0+256                   ; Address of buffer (right after USER vars)
00062Cr 3  00 00                .word 0                         ; block in buffer
00062Er 3  00 00                .word 0                         ; buffer status (not in use)
000630r 3  rr rr                .word xt_block_word_error       ; block-read vector
000632r 3  rr rr                .word xt_block_word_error       ; block-write vector
000634r 3               cold_user_table_end:
000634r 3               
000634r 3               
000634r 3               ; ## ABORT_QUOTE ( "string" -- ) "If flag TOS is true, ABORT with message"
000634r 3               ; ## "abort""  tested  ANS core
000634r 3                       ; """https://forth-standard.org/standard/core/ABORTq
000634r 3                       ; Abort and print a string.
000634r 3                       ; """
000634r 3               
000634r 3               xt_abort_quote:
000634r 3                               ; save the string
000634r 3  20 rr rr                     jsr xt_s_quote          ; S"
000637r 3               
000637r 3                               ; compile run-time part
000637r 3  A0 rr                        ldy #>abort_quote_runtime
000639r 3  A9 rr                        lda #<abort_quote_runtime
00063Br 3  20 rr rr                     jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
00063Er 3               
00063Er 3  60           z_abort_quote:  rts
00063Fr 3               
00063Fr 3               
00063Fr 3               abort_quote_runtime:
00063Fr 3                       ; """Runtime aspect of ABORT_QUOTE"""
00063Fr 3               
00063Fr 3                               ; We arrive here with ( f addr u )
00063Fr 3  B5 04                        lda 4,x
000641r 3  15 05                        ora 5,x
000643r 3  F0 09                        beq @done       ; if FALSE, we're done
000645r 3               
000645r 3                               ; We're true, so print string and ABORT. We follow Gforth
000645r 3                               ; in going to a new line after the string
000645r 3  20 rr rr                     jsr xt_type
000648r 3  20 rr rr                     jsr xt_cr
00064Br 3  4C rr rr                     jmp xt_abort    ; not JSR, so never come back
00064Er 3               @done:
00064Er 3                               ; Drop three entries from the Data Stack
00064Er 3  8A                           txa
00064Fr 3  18                           clc
000650r 3  69 06                        adc #6
000652r 3  AA                           tax
000653r 3               
000653r 3  60                           rts
000654r 3               
000654r 3               
000654r 3               
000654r 3               ; ## ABS ( n -- u ) "Return absolute value of a number"
000654r 3               ; ## "abs"  auto  ANS core
000654r 3                       ; """https://forth-standard.org/standard/core/ABS
000654r 3                       ; Return the absolute value of a number.
000654r 3                       ; """
000654r 3               
000654r 3               xt_abs:
000654r 3  20 rr rr                     jsr underflow_1
000657r 3               
000657r 3  B5 01                        lda 1,x
000659r 3  10 0D                        bpl @done       ; positive number, easy money!
00065Br 3               
00065Br 3                               ; negative: calculate 0 - n
00065Br 3  38                           sec
00065Cr 3  A9 00                        lda #0
00065Er 3  F5 00                        sbc 0,x         ; LSB
000660r 3  95 00                        sta 0,x
000662r 3               
000662r 3  A9 00                        lda #0          ; MSB
000664r 3  F5 01                        sbc 1,x
000666r 3  95 01                        sta 1,x
000668r 3               
000668r 3               @done:
000668r 3  60           z_abs:          rts
000669r 3               
000669r 3               
000669r 3               
000669r 3               ; ## ACCEPT ( addr n -- n ) "Receive a string of characters from the keyboard"
000669r 3               ; ## "accept"  auto  ANS core
000669r 3                       ; """https://forth-standard.org/standard/core/ACCEPT
000669r 3                       ; Receive a string of at most n1 characters, placing them at
000669r 3                       ; addr. Return the actual number of characters as n2. Characters
000669r 3                       ; are echoed as they are received. ACCEPT is called by REFILL in
000669r 3                       ; modern Forths.
000669r 3                       ; """
000669r 3               
000669r 3               xt_accept:
000669r 3  20 rr rr                     jsr underflow_2
00066Cr 3               
00066Cr 3                               ; Abort if we were asked to receive 0 chars
00066Cr 3  B5 00                        lda 0,x
00066Er 3  15 01                        ora 1,x
000670r 3  D0 09                        bne @not_zero
000672r 3               
000672r 3  E8                           inx
000673r 3  E8                           inx
000674r 3  74 00                        stz 0,x
000676r 3  74 01                        stz 1,x
000678r 3               
000678r 3  4C rr rr                     jmp accept_done
00067Br 3               
00067Br 3               @not_zero:
00067Br 3  B5 00                        lda 0,x         ; number of chars to get in tmp2 ...
00067Dr 3  85 rr                        sta tmp2
00067Fr 3  64 rr                        stz tmp2+1      ; ... but we only accept max 255 chars
000681r 3               
000681r 3  B5 02                        lda 2,x         ; address of buffer is NOS, to tmp1
000683r 3  85 rr                        sta tmp1
000685r 3  B5 03                        lda 3,x
000687r 3  85 rr                        sta tmp1+1
000689r 3               
000689r 3  E8                           inx
00068Ar 3  E8                           inx
00068Br 3               
00068Br 3  A0 00                        ldy #0
00068Dr 3               
00068Dr 3                               ; Select the next history buffer. Clear bit 3 first (so overflow
00068Dr 3                               ; from bit 2 to 3 is OK)
00068Dr 3  A5 rr                        lda status
00068Fr 3  29 F7                        and #$f7
000691r 3               
000691r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
000691r 3  1A                           inc
000692r 3               
000692r 3                               ; Set bit 3 for detecting if CTRL-n has been pressed the first
000692r 3                               ; time. This bit will be cleared on the first CTRL-n or CTRL-p
000692r 3                               ; received and won't be used to calculate the history buffer
000692r 3                               ; offset.
000692r 3  09 08                        ora #$08
000694r 3  85 rr                        sta status
000696r 3               
000696r 3               accept_loop:
000696r 3                               ; Out of the box, py65mon catches some CTRL sequences such as
000696r 3                               ; CTRL-c. We also don't need to check for CTRL-l because a
000696r 3                               ; vt100 terminal clears the screen automatically.
000696r 3               
000696r 3                               ; This is the internal version of KEY without all the mucking
000696r 3                               ; about with the Data Stack while still using the input vector
000696r 3  20 rr rr                     jsr key_a
000699r 3               
000699r 3                               ; We quit on both line feed and carriage return
000699r 3  C9 0A                        cmp #AscLF
00069Br 3  F0 20                        beq @eol
00069Dr 3  C9 0D                        cmp #AscCR
00069Fr 3  F0 1C                        beq @eol
0006A1r 3               
0006A1r 3                               ; BACKSPACE and DEL do the same thing for the moment
0006A1r 3  C9 08                        cmp #AscBS
0006A3r 3  F0 22                        beq @backspace
0006A5r 3  C9 7F                        cmp #AscDEL     ; (CTRL-h)
0006A7r 3  F0 1E                        beq @backspace
0006A9r 3               
0006A9r 3                               ; Check for CTRL-p and CTRL-n to recall input history
0006A9r 3  C9 10                        cmp #AscCP
0006ABr 3  F0 36                        beq @ctrl_p
0006ADr 3  C9 0E                        cmp #AscCN
0006AFr 3  F0 44                        beq @ctrl_n
0006B1r 3               
0006B1r 3                               ; That's enough for now. Save and echo character.
0006B1r 3  91 rr                        sta (tmp1),y
0006B3r 3  C8                           iny
0006B4r 3               
0006B4r 3                               ; EMIT_A sidesteps all the fooling around with the Data Stack
0006B4r 3  20 rr rr                     jsr emit_a
0006B7r 3               
0006B7r 3  C4 rr                        cpy tmp2        ; reached character limit?
0006B9r 3  D0 DB                        bne accept_loop       ; fall through if buffer limit reached
0006BBr 3  80 03                        bra @buffer_full
0006BDr 3               
0006BDr 3               @eol:
0006BDr 3  20 rr rr                     jsr xt_space    ; print final space
0006C0r 3               
0006C0r 3               @buffer_full:
0006C0r 3                               ; REFILL updates ciblen and toin, we don't need to do it here
0006C0r 3  94 00                        sty 0,x         ; Y contains number of chars accepted already
0006C2r 3  74 01                        stz 1,x         ; we only accept 256 chars
0006C4r 3               
0006C4r 3  4C rr rr                     jmp accept_done
0006C7r 3               
0006C7r 3               @backspace:
0006C7r 3                               ; Handle backspace and delete kex, which currently do the same
0006C7r 3                               ; thing
0006C7r 3  C0 00                        cpy #0          ; buffer empty?
0006C9r 3  D0 06                        bne @1
0006CBr 3               
0006CBr 3  A9 07                        lda #AscBELL    ; complain and don't delete beyond the start of line
0006CDr 3  20 rr rr                     jsr emit_a
0006D0r 3  C8                           iny
0006D1r 3               @1:
0006D1r 3  88                           dey
0006D2r 3  A9 08                        lda #AscBS      ; move back one
0006D4r 3  20 rr rr                     jsr emit_a
0006D7r 3  A9 20                        lda #AscSP      ; print a space (rubout)
0006D9r 3  20 rr rr                     jsr emit_a
0006DCr 3  A9 08                        lda #AscBS      ; move back over space
0006DEr 3  20 rr rr                     jsr emit_a
0006E1r 3               
0006E1r 3  80 B3                        bra accept_loop
0006E3r 3               
0006E3r 3               @ctrl_p:
0006E3r 3                               ; CTRL-p was pressed. Recall the previous input buffer.
0006E3r 3               
0006E3r 3                               ; Select the previous buffer
0006E3r 3  A5 rr                        lda status
0006E5r 3               
0006E5r 3                               ; Check for 0 (need to wrap back to 7)
0006E5r 3  29 07                        and #7
0006E7r 3  D0 08                        bne @ctrl_p_dec
0006E9r 3               
0006E9r 3                               ; We need to wrap back to 7.
0006E9r 3  A5 rr                        lda status
0006EBr 3  09 07                        ora #7
0006EDr 3  85 rr                        sta status
0006EFr 3  80 11                        bra @recall_history
0006F1r 3               
0006F1r 3               @ctrl_p_dec:
0006F1r 3                               ; It's safe to decrement the buffer index directly.
0006F1r 3  C6 rr                        dec status
0006F3r 3  80 0D                        bra @recall_history
0006F5r 3               
0006F5r 3               @ctrl_n:
0006F5r 3                               ; CTRL-n was pressed. Recall the next input buffer. Select
0006F5r 3                               ; the next buffer Check bit 3. If it's set, this is the first
0006F5r 3                               ; time CTRL-n has been pressed and we should select the CURRENT
0006F5r 3                               ; history buffer.
0006F5r 3  A9 08                        lda #$8
0006F7r 3  24 rr                        bit status
0006F9r 3  D0 07                        bne @recall_history
0006FBr 3               
0006FBr 3                               ; This isn't the first time CTRL-n has been pressed, select the
0006FBr 3                               ; next history buffer. Clear bit 3 first (so overflow is OK)
0006FBr 3  A5 rr                        lda status
0006FDr 3  29 F7                        and #$f7
0006FFr 3               
0006FFr 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
0006FFr 3  1A                           inc
000700r 3               
000700r 3                               ; Bit 3 (if it got set by going from buffer 7 to 0) will
000700r 3                               ; be cleared below.
000700r 3  85 rr                        sta status
000702r 3               
000702r 3                               ; Falls through to @recall_history
000702r 3               
000702r 3               @recall_history:
000702r 3                               ; Clear bit 3 (first time ctrl-n recall) bit in status
000702r 3  A9 08                        lda #%00001000
000704r 3  14 rr                        trb status
000706r 3               
000706r 3  20 rr rr                     jsr total_recall
000709r 3               
000709r 3                               ; tmp3 now has the address of the previous history buffer.
000709r 3                               ; First byte of buffer is length. Clear the line by sending
000709r 3                               ; CR, Y spaces, then CR.
000709r 3  A9 0D                        lda #AscCR
00070Br 3  20 rr rr                     jsr emit_a
00070Er 3               
00070Er 3               input_clear:
00070Er 3  C0 00                        cpy #0
000710r 3  F0 08                        beq input_cleared
000712r 3               
000712r 3  A9 20                        lda #AscSP
000714r 3  20 rr rr                     jsr emit_a
000717r 3  88                           dey
000718r 3  80 F4                        bra input_clear
00071Ar 3               
00071Ar 3               input_cleared:
00071Ar 3  A9 0D                        lda #AscCR
00071Cr 3  20 rr rr                     jsr emit_a
00071Fr 3               
00071Fr 3                               ; Save the history length byte into histinfo+1
00071Fr 3                               ; ldy #0        ; Y is already 0 by clearing the line.
00071Fr 3  B1 rr                        lda (tmp3),y
000721r 3  85 rr                        sta status+1
000723r 3               
000723r 3                               ; Increment the tmp3 pointer so we can use ,y addressing
000723r 3                               ; on both tmp1 (the input buffer) and tmp3 (the history
000723r 3                               ; buffer)
000723r 3  E6 rr                        inc tmp3
000725r 3  D0 02                        bne @2           ; Increment the upper byte on carry.
000727r 3  E6 rr                        inc tmp3+1
000729r 3               @2:
000729r 3                               ; Copy the history buffer into the input buffer,
000729r 3                               ; sending the characters to the output as we go.
000729r 3  A9 0D                        lda #AscCR
00072Br 3  20 rr rr                     jsr emit_a
00072Er 3               
00072Er 3               @history_loop:
00072Er 3                               ; See if we have reached the end of the history buffer.
00072Er 3  C4 rr                        cpy status+1
000730r 3  D0 03                        bne @3
000732r 3  4C rr rr                     jmp accept_loop       ; Needs a long jump
000735r 3               @3:
000735r 3                               ; See if we have reached the end of the input buffer.
000735r 3                               ; (only comparing to lower byte as we currently limit
000735r 3                               ; to 255 characters max)
000735r 3  C4 rr                        cpy tmp2
000737r 3  F0 0A                        beq @hist_filled_buffer
000739r 3               
000739r 3                               ; Copy a character and echo.
000739r 3  B1 rr                        lda (tmp3),y
00073Br 3  91 rr                        sta (tmp1),y
00073Dr 3  20 rr rr                     jsr emit_a
000740r 3               
000740r 3                               ; Move to the next character.
000740r 3  C8                           iny
000741r 3  80 EB                        bra @history_loop
000743r 3               
000743r 3               @hist_filled_buffer:
000743r 3                               ; We don't want a history recall to EOL our buffer,
000743r 3                               ; so back up one character and return to editing.
000743r 3  88                           dey
000744r 3  4C rr rr                     jmp accept_loop
000747r 3               accept_done:
000747r 3               @done:
000747r 3                               ; Copy the input buffer into the currently
000747r 3                               ; selected history buffer.
000747r 3  20 rr rr                     jsr total_recall
00074Ar 3  85 rr                        sta status+1
00074Cr 3               
00074Cr 3                               ; Also save it in the first buffer byte.
00074Cr 3  A0 00                        ldy #0
00074Er 3  91 rr                        sta (tmp3),y
000750r 3               
000750r 3                               ; Move path the count to the data bytes
000750r 3  E6 rr                        inc tmp3
000752r 3  D0 02                        bne @4           ; Increment the upper byte on carry.
000754r 3  E6 rr                        inc tmp3+1
000756r 3               @4:
000756r 3                               ; Copy the characters from the input buffer to the
000756r 3                               ; history buffer.
000756r 3               
000756r 3               @save_history_loop:
000756r 3  C4 rr                        cpy status+1
000758r 3  F0 07                        beq @save_history_done
00075Ar 3               
00075Ar 3  B1 rr                        lda (tmp1),y
00075Cr 3  91 rr                        sta (tmp3),y
00075Er 3  C8                           iny
00075Fr 3  80 F5                        bra @save_history_loop
000761r 3               
000761r 3               @save_history_done:
000761r 3               z_accept:
000761r 3  60                           rts
000762r 3               
000762r 3               total_recall:
000762r 3                       ; """Internal subroutine for ACCEPT that recalls history entry"""
000762r 3               
000762r 3                               ; Generate the address of the buffer in tmp3. Start with the
000762r 3                               ; base address.
000762r 3  A9 rr                        lda #<hist_buff
000764r 3  85 rr                        sta tmp3
000766r 3  A9 rr                        lda #>hist_buff
000768r 3  85 rr                        sta tmp3+1
00076Ar 3               
00076Ar 3                               ; This is a bit annoying as some bits go into each byte.
00076Ar 3                               ; .....xxx gets put into address like ......xx x.......
00076Ar 3  A5 rr                        lda status
00076Cr 3  6A                           ror
00076Dr 3  29 03                        and #3
00076Fr 3  18                           clc
000770r 3  65 rr                        adc tmp3+1
000772r 3  85 rr                        sta tmp3+1
000774r 3               
000774r 3  A5 rr                        lda status
000776r 3  6A                           ror             ; Rotate through carry into msb.
000777r 3  6A                           ror
000778r 3  29 80                        and #$80
00077Ar 3  18                           clc
00077Br 3  65 rr                        adc tmp3
00077Dr 3  85 rr                        sta tmp3
00077Fr 3  90 02                        bcc @1           ; Increment the upper byte on carry.
000781r 3  E6 rr                        inc tmp3+1
000783r 3               @1:
000783r 3                               ; Save the current length of the input buffer in
000783r 3                               ; histinfo+1 temporarily.  Reduce to 127 if larger.
000783r 3  98                           tya
000784r 3  C9 80                        cmp #$80
000786r 3  90 02                        bcc @2
000788r 3  A9 7F                        lda #$7F
00078Ar 3               @2:
00078Ar 3  60                           rts
00078Br 3               
00078Br 3               
00078Br 3               
00078Br 3               
00078Br 3               
00078Br 3               ; ## ACTION_OF ( "name" -- xt ) "Get named deferred word's xt"
00078Br 3               ; ## "action-of"  auto  ANS core ext
00078Br 3                       ; """http://forth-standard.org/standard/core/ACTION-OF"""
00078Br 3               
00078Br 3               xt_action_of:
00078Br 3                               ; This is a state aware word with differet behavior
00078Br 3                               ; when used while compiling vs interpreting.
00078Br 3                               ; Check STATE
00078Br 3  A5 rr                        lda state
00078Dr 3  05 rr                        ora state+1
00078Fr 3  F0 0C                        beq @interpreting
000791r 3               
000791r 3               @compiling:
000791r 3                               ; Run ['] to compile the xt of the next word
000791r 3                               ; as a literal.
000791r 3  20 rr rr                     jsr xt_bracket_tick
000794r 3               
000794r 3                               ; Postpone DEFER@ by compiling a JSR to it.
000794r 3  A0 rr                        ldy #>xt_defer_fetch
000796r 3  A9 rr                        lda #<xt_defer_fetch
000798r 3  20 rr rr                     jsr cmpl_subroutine
00079Br 3  80 06                        bra @done
00079Dr 3               
00079Dr 3               @interpreting:
00079Dr 3  20 rr rr                     jsr xt_tick
0007A0r 3  20 rr rr                     jsr xt_defer_fetch
0007A3r 3               
0007A3r 3               @done:
0007A3r 3  60           z_action_of:           rts
0007A4r 3               
0007A4r 3               
0007A4r 3               
0007A4r 3               ; ## AGAIN ( addr -- ) "Code backwards branch to address left by BEGIN"
0007A4r 3               ; ## "again"  tested  ANS core ext
0007A4r 3                       ; """https://forth-standard.org/standard/core/AGAIN"""
0007A4r 3               
0007A4r 3               xt_again:
0007A4r 3  20 rr rr                     jsr underflow_1
0007A7r 3               
0007A7r 3                               ; Add the opcode for a JMP. We use JMP instead of BRA
0007A7r 3                               ; so we have the range and don't have to calculate the
0007A7r 3                               ; offset.
0007A7r 3  A0 00                        ldy #0
0007A9r 3  A9 4C                        lda #$4C        ; JMP
0007ABr 3  91 rr                        sta (cp),y
0007ADr 3  C8                           iny
0007AEr 3               
0007AEr 3  B5 00                        lda 0,x         ; LSB of address
0007B0r 3  91 rr                        sta (cp),y
0007B2r 3  C8                           iny
0007B3r 3               
0007B3r 3  B5 01                        lda 1,x         ; MSB of address
0007B5r 3  91 rr                        sta (cp),y
0007B7r 3  C8                           iny
0007B8r 3               
0007B8r 3                               ; Allot the space we just used
0007B8r 3  98                           tya
0007B9r 3  18                           clc
0007BAr 3  65 rr                        adc cp
0007BCr 3  85 rr                        sta cp
0007BEr 3  90 02                        bcc @done
0007C0r 3  E6 rr                        inc cp+1
0007C2r 3               @done:
0007C2r 3  E8                           inx
0007C3r 3  E8                           inx
0007C4r 3               
0007C4r 3  60           z_again:        rts
0007C5r 3               
0007C5r 3               
0007C5r 3               
0007C5r 3               ; ## ALIGN ( -- ) "Make sure CP is aligned on word size"
0007C5r 3               ; ## "align"  auto  ANS core
0007C5r 3                       ; """https://forth-standard.org/standard/core/ALIGN
0007C5r 3                       ; On a 8-bit machine, this does nothing. ALIGNED uses this
0007C5r 3                       ; routine as well, and also does nothing
0007C5r 3                       ; """
0007C5r 3               
0007C5r 3               ; ## ALIGNED ( addr -- addr ) "Return the first aligned address"
0007C5r 3               ; ## "aligned"  auto  ANS core
0007C5r 3                       ; """https://forth-standard.org/standard/core/ALIGNED"""
0007C5r 3               
0007C5r 3               xt_align:
0007C5r 3               xt_aligned:
0007C5r 3               z_align:
0007C5r 3  60           z_aligned:      rts             ; stripped out during native compile
0007C6r 3               
0007C6r 3               
0007C6r 3               
0007C6r 3               ; ## ALLOT ( n -- ) "Reserve or release memory"
0007C6r 3               ; ## "allot"  auto  ANS core
0007C6r 3                       ; """https://forth-standard.org/standard/core/ALLOT
0007C6r 3                       ; Reserve a certain number of bytes (not cells) or release them.
0007C6r 3                       ; If n = 0, do nothing. If n is negative, release n bytes, but only
0007C6r 3                       ; to the beginning of the Dictionary. If n is positive (the most
0007C6r 3                       ; common case), reserve n bytes, but not past the end of the
0007C6r 3                       ; Dictionary. See http://forth-standard.org/standard/core/ALLOT
0007C6r 3                       ; """
0007C6r 3               
0007C6r 3               xt_allot:
0007C6r 3  20 rr rr                     jsr underflow_1
0007C9r 3               
0007C9r 3                               ; Releasing memory is going to be a very rare operation,
0007C9r 3                               ; so we check for it at the beginning and try to make
0007C9r 3                               ; the most common case as fast as possible
0007C9r 3  B5 01                        lda 1,x
0007CBr 3  30 22                        bmi @release
0007CDr 3               
0007CDr 3                               ; Common case: We are reserving memory, not releasing it
0007CDr 3  18                           clc
0007CEr 3  A5 rr                        lda cp
0007D0r 3  75 00                        adc 0,x
0007D2r 3  85 rr                        sta cp
0007D4r 3               
0007D4r 3  A5 rr                        lda cp+1
0007D6r 3  75 01                        adc 1,x
0007D8r 3  85 rr                        sta cp+1
0007DAr 3               
0007DAr 3                               ; Wait, did we just grant more space than we have? This is
0007DAr 3                               ; a check we only do here, not for other situations like cmpl_a
0007DAr 3                               ; where smaller amounts are reserved.
0007DAr 3  A0 FF                        ldy #<cp_end
0007DCr 3  C4 rr                        cpy cp
0007DEr 3  A9 7F                        lda #>cp_end
0007E0r 3  E5 rr                        sbc cp+1
0007E2r 3  B0 48                        bcs @done               ; we're fine.
0007E4r 3               
0007E4r 3                               ; Oops, that was too much, we're beyond the end of
0007E4r 3                               ; legal Dictionary RAM. Reduce to max memory and report
0007E4r 3                               ; an error
0007E4r 3  84 rr                        sty cp                  ; still #<cp_end
0007E6r 3  A9 7F                        lda #>cp_end
0007E8r 3  85 rr                        sta cp+1
0007EAr 3               
0007EAr 3  A9 00                        lda #err_allot
0007ECr 3  4C rr rr                     jmp error
0007EFr 3               
0007EFr 3               @release:
0007EFr 3                  		; The ANS standard doesn't really say what to do if too much
0007EFr 3                               ; memory is freed ("negatively alloted"). In fact, there isn't
0007EFr 3                               ; even an official test. Gforth is little help either. The good
0007EFr 3                               ; news is, this is going to be a rare case. We want to use as
0007EFr 3                               ; few bytes as possible.
0007EFr 3               
0007EFr 3                               ; What we do is let the user free anything up to the beginning
0007EFr 3                               ; of the RAM area assigned to the Dicionary (CP0), but at
0007EFr 3                               ; their own risk. This means that the Dictionary pointer DP
0007EFr 3                               ; might end up pointing to garbage. However, an attempt to
0007EFr 3                               ; free more than RAM than CP0 will lead to CP being set to CP0,
0007EFr 3                               ; the DP pointing to the last word in RAM (should be DROP) and
0007EFr 3                               ; an error message.
0007EFr 3               
0007EFr 3                               ; We arrive here with ( n ) which is negative. First step,
0007EFr 3                               ; subtract the number TOS from the CP for a new CP
0007EFr 3  CA                           dex
0007F0r 3  CA                           dex
0007F1r 3  A5 rr                        lda cp
0007F3r 3  95 00                        sta 0,x
0007F5r 3  A5 rr                        lda cp+1
0007F7r 3  95 01                        sta 1,x
0007F9r 3               
0007F9r 3  20 rr rr                     jsr xt_plus                     ; new CP is now TOS
0007FCr 3               
0007FCr 3                               ; Second step, see if we've gone too far. We compare the new
0007FCr 3                               ; CP on TOS (which, if we've really screwed up, might be
0007FCr 3                               ; negative) with CP0. This is a signed comparison
0007FCr 3  CA                           dex
0007FDr 3  CA                           dex                             ; new CP now NOS
0007FEr 3  A9 rr                        lda #<cp0
000800r 3  95 00                        sta 0,x
000802r 3  A9 rr                        lda #>cp0
000804r 3  95 01                        sta 1,x                         ; CP0 is TOS
000806r 3               
000806r 3  20 rr rr                     jsr compare_16bit               ; still ( CP CP0 )
000809r 3               
000809r 3                               ; If CP (NOS) is smaller than CP0 (TOS), we're in trouble.
000809r 3                               ; This means we want Z=1 or N=1
000809r 3  F0 17                        beq @nega_done
00080Br 3  30 15                        bmi @nega_done
00080Dr 3               
00080Dr 3                               ; Yep, we're in trouble. Set CP to CP0, set DP to the first
00080Dr 3                               ; word in ROM (should be DROP), and abort with an error
00080Dr 3  A9 rr                        lda #<cp0
00080Fr 3  85 rr                        sta cp
000811r 3  A9 rr                        lda #>cp0
000813r 3  85 rr                        sta cp+1
000815r 3               
000815r 3  A9 rr                        lda #<dictionary_start
000817r 3  85 rr                        sta dp
000819r 3  A9 rr                        lda #>dictionary_start
00081Br 3  85 rr                        sta dp+1
00081Dr 3               
00081Dr 3  A9 0A                        lda #err_negallot
00081Fr 3  4C rr rr                     jmp error
000822r 3               
000822r 3               @nega_done:
000822r 3                               ; Save new CP, which is NOS
000822r 3  B5 02                        lda 2,x
000824r 3  85 rr                        sta cp
000826r 3  B5 03                        lda 3,x
000828r 3  85 rr                        sta cp+1
00082Ar 3               
00082Ar 3  E8                           inx
00082Br 3  E8                           inx                     ; drop through to @done
00082Cr 3               @done:
00082Cr 3  E8                           inx
00082Dr 3  E8                           inx
00082Er 3               z_allot:
00082Er 3  60                           rts
00082Fr 3               
00082Fr 3               
00082Fr 3               
00082Fr 3               ; ## ALLOW_NATIVE ( -- ) "Flag last word to allow native compiling"
00082Fr 3               ; ## "allow-native"  auto  Tali Forth
00082Fr 3               xt_allow_native:
00082Fr 3  20 rr rr                     jsr current_to_dp
000832r 3  A0 01                        ldy #1          ; offset for status byte
000834r 3  B1 rr                        lda (dp),y
000836r 3  29 F5                        and #$ff-NN-AN  ; AN and NN flag is clear.
000838r 3  91 rr                        sta (dp),y
00083Ar 3               z_allow_native:
00083Ar 3  60                           rts
00083Br 3               
00083Br 3               
00083Br 3               ; ## ALSO ( -- ) "Make room in the search order for another wordlist"
00083Br 3               ; ## "also"  auto  ANS search ext
00083Br 3                       ; """http://forth-standard.org/standard/search/ALSO"""
00083Br 3               xt_also:
00083Br 3  20 rr rr                     jsr xt_get_order
00083Er 3  20 rr rr                     jsr xt_over
000841r 3  20 rr rr                     jsr xt_swap
000844r 3  20 rr rr                     jsr xt_one_plus
000847r 3  20 rr rr                     jsr xt_set_order
00084Ar 3               
00084Ar 3  60           z_also:         rts
00084Br 3               
00084Br 3               
00084Br 3               ; ## ALWAYS_NATIVE ( -- ) "Flag last word as always natively compiled"
00084Br 3               ; ## "always-native"  auto  Tali Forth
00084Br 3               xt_always_native:
00084Br 3  20 rr rr                     jsr current_to_dp
00084Er 3  A0 01                        ldy #1          ; offset for status byte
000850r 3  B1 rr                        lda (dp),y
000852r 3  09 02                        ora #AN         ; Make sure AN flag is set
000854r 3  29 F7                        and #$ff-NN     ; and NN flag is clear.
000856r 3  91 rr                        sta (dp),y
000858r 3               z_always_native:
000858r 3  60                           rts
000859r 3               
000859r 3               
000859r 3               ; ## AND ( n n -- n ) "Logically AND TOS and NOS"
000859r 3               ; ## "and"  auto  ANS core
000859r 3                       ; """https://forth-standard.org/standard/core/AND"""
000859r 3               xt_and:
000859r 3  20 rr rr                     jsr underflow_2
00085Cr 3               
00085Cr 3  B5 00                        lda 0,x
00085Er 3  35 02                        and 2,x
000860r 3  95 02                        sta 2,x
000862r 3               
000862r 3  B5 01                        lda 1,x
000864r 3  35 03                        and 3,x
000866r 3  95 03                        sta 3,x
000868r 3               
000868r 3  E8                           inx
000869r 3  E8                           inx
00086Ar 3               
00086Ar 3  60           z_and:          rts
00086Br 3               
00086Br 3               
00086Br 3               ; ## ASSEMBLER_WORDLIST ( -- u ) "WID for the Assembler wordlist"
00086Br 3               ; ## "assembler-wordlist"  tested  Tali Assembler
00086Br 3                       ; """ Commonly used like `assembler-wordlist >order` to add the
00086Br 3                       ; assembler words to the search order so they can be used.
00086Br 3                       ; See the tutorial on Wordlists and the Search Order for
00086Br 3                       ; more information.
00086Br 3                       ;
00086Br 3                       ; This is a dummy entry, the code is shared with TWO
00086Br 3                       ; """
00086Br 3               
00086Br 3               
00086Br 3               ; ## AT_XY ( n m -- ) "Move cursor to position given"
00086Br 3               ; ## "at-xy"  tested  ANS facility
00086Br 3                       ; """https://forth-standard.org/standard/facility/AT-XY
00086Br 3                       ; On an ANSI compatible terminal, place cursor at row n colum m.
00086Br 3                       ; ANSI code is ESC[<n>;<m>H
00086Br 3                       ;
00086Br 3                       ; Do not use U. to print the numbers because the
00086Br 3                       ; trailing space will not work with xterm
00086Br 3                       ; """
00086Br 3               xt_at_xy:
00086Br 3  20 rr rr                     jsr underflow_2
00086Er 3               
00086Er 3  A9 1B                        lda #AscESC
000870r 3  20 rr rr                     jsr emit_a
000873r 3  A9 5B                        lda #$5B        ; ASCII for "["
000875r 3  20 rr rr                     jsr emit_a
000878r 3  20 rr rr                     jsr print_u
00087Br 3  A9 3B                        lda #$3B        ; ASCII for ";"
00087Dr 3  20 rr rr                     jsr emit_a
000880r 3  20 rr rr                     jsr print_u
000883r 3  A9 48                        lda #'H'
000885r 3  20 rr rr                     jsr emit_a
000888r 3               
000888r 3  60           z_at_xy:        rts
000889r 3               
000889r 3               
000889r 3               ; ## BACKSLASH ( -- ) "Ignore rest of line"
000889r 3               ; ## "\"  auto  ANS core ext
000889r 3                       ; """https://forth-standard.org/standard/core/bs"""
000889r 3               xt_backslash:
000889r 3  A5 rr                        lda ciblen
00088Br 3  85 rr                        sta toin
00088Dr 3  A5 rr                        lda ciblen+1
00088Fr 3  85 rr                        sta toin+1
000891r 3               
000891r 3  60           z_backslash:    rts
000892r 3               
000892r 3               
000892r 3               ; ## BASE ( -- addr ) "Push address of radix base to stack"
000892r 3               ; ## "base"  auto  ANS core
000892r 3                       ; """https://forth-standard.org/standard/core/BASE
000892r 3                       ; The ANS Forth standard sees the base up to 36, so we can cheat and
000892r 3                       ; ingore the MSB
000892r 3                       ; """
000892r 3               xt_base:
000892r 3  CA                           dex
000893r 3  CA                           dex
000894r 3  A9 rr                        lda #<base
000896r 3  95 00                        sta 0,x         ; LSB
000898r 3  74 01                        stz 1,x         ; MSB is always 0
00089Ar 3               
00089Ar 3  60           z_base:         rts
00089Br 3               
00089Br 3               
00089Br 3               ; ## BEGIN ( -- addr ) "Mark entry point for loop"
00089Br 3               ; ## "begin"  auto  ANS core
00089Br 3                       ; """https://forth-standard.org/standard/core/BEGIN
00089Br 3                       ;
00089Br 3                       ; This is just an immediate version of here which could just
00089Br 3                       ; as well be coded in Forth as
00089Br 3                       ;       : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
00089Br 3                       ; Since this is a compiling word, we don't care that much about
00089Br 3                       ; about speed
00089Br 3                       ; """
00089Br 3               
00089Br 3               xt_begin:
00089Br 3  20 rr rr                     jsr xt_here
00089Er 3  60           z_begin:        rts
00089Fr 3               
00089Fr 3               
00089Fr 3               
00089Fr 3               ; ## BELL ( -- ) "Emit ASCII BELL"
00089Fr 3               ; ## "bell"  tested  Tali Forth
00089Fr 3               xt_bell:
00089Fr 3  A9 07                        lda #7          ; ASCII value for BELl
0008A1r 3  20 rr rr                     jsr emit_a
0008A4r 3               
0008A4r 3  60           z_bell:         rts
0008A5r 3               
0008A5r 3               
0008A5r 3               ; ## BL ( -- c ) "Push ASCII value of SPACE to stack"
0008A5r 3               ; ## "bl"  auto  ANS core
0008A5r 3                       ; """https://forth-standard.org/standard/core/BL"""
0008A5r 3               
0008A5r 3               xt_bl:
0008A5r 3  CA                           dex
0008A6r 3  CA                           dex
0008A7r 3  A9 20                        lda #AscSP
0008A9r 3  95 00                        sta 0,x
0008ABr 3  74 01                        stz 1,x
0008ADr 3               
0008ADr 3  60           z_bl:           rts
0008AEr 3               
0008AEr 3               
0008AEr 3               ; ## BLK ( -- addr ) "Push address of block being interpreted"
0008AEr 3               ; ## "block"  auto  ANS block
0008AEr 3                       ; """https://forth-standard.org/standard/block/BLK"""
0008AEr 3               xt_blk:
0008AEr 3                               ; BLK is at UP + blk_offset
0008AEr 3  CA                           dex
0008AFr 3  CA                           dex
0008B0r 3  18                           clc
0008B1r 3  A5 rr                        lda up
0008B3r 3  69 00                        adc #blk_offset ; Add offset
0008B5r 3  95 00                        sta 0,x
0008B7r 3  A5 rr                        lda up+1
0008B9r 3  69 00                        adc #0          ; Adding carry
0008BBr 3  95 01                        sta 1,x
0008BDr 3               
0008BDr 3  60           z_blk:          rts
0008BEr 3               
0008BEr 3               
0008BEr 3               ; ## BLKBUFFER ( -- addr ) "Push address of block buffer"
0008BEr 3               ; ## "blkbuffer"  auto  Tali block
0008BEr 3               xt_blkbuffer:
0008BEr 3                               ; blkbuffer address is at UP + blkbuffer_offset.
0008BEr 3                               ; Unlike some of the other user variables, we actually
0008BEr 3                               ; want to push the address stored here, which will
0008BEr 3                               ; point to somewhere outside of the user variables.
0008BEr 3  CA                           dex
0008BFr 3  CA                           dex
0008C0r 3                               ; Put the address on the stack.
0008C0r 3  A0 28                        ldy #blkbuffer_offset
0008C2r 3  B1 rr                        lda (up),y
0008C4r 3  95 00                        sta 0,x
0008C6r 3  C8                           iny             ; Move along to the next byte
0008C7r 3  B1 rr                        lda (up),y
0008C9r 3  95 01                        sta 1,x
0008CBr 3               
0008CBr 3  60           z_blkbuffer:    rts
0008CCr 3               
0008CCr 3               
0008CCr 3               ; ## BLOCK ( u -- a-addr ) "Fetch a block into a buffer"
0008CCr 3               ; ## "block"  auto  ANS block
0008CCr 3                       ; """https://forth-standard.org/standard/block/BLOCK"""
0008CCr 3               
0008CCr 3               xt_block:
0008CCr 3               
0008CCr 3                               ; See if the block requested is the same as the one we
0008CCr 3                               ; currently have in the buffer. Check the LSB.
0008CCr 3  A0 2A                        ldy #buffblocknum_offset
0008CEr 3  B1 rr                        lda (up),y
0008D0r 3  D5 00                        cmp 0,x
0008D2r 3  D0 0F                        bne @not_in_buffer
0008D4r 3               
0008D4r 3                               ; Check the MSB.
0008D4r 3  C8                           iny
0008D5r 3  B1 rr                        lda (up),y
0008D7r 3  D5 01                        cmp 1,x
0008D9r 3  D0 08                        bne @not_in_buffer
0008DBr 3               
0008DBr 3                               ; The block is in the buffer. See if the buffer is in use.
0008DBr 3  A0 2C                        ldy #buffstatus_offset
0008DDr 3  B1 rr                        lda (up),y
0008DFr 3  29 01                        and #1          ; Check the in-use flag (bit 0)
0008E1r 3  D0 30                        bne @done       ; It's already in the buffer and in use.
0008E3r 3                                               ; @done will replace the block# with the
0008E3r 3                                               ; buffer address.
0008E3r 3               @not_in_buffer:
0008E3r 3                               ; Check the buffer status
0008E3r 3  A0 2C                        ldy #buffstatus_offset
0008E5r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
0008E7r 3  C9 03                        cmp #3          ; LSB is needed.
0008E9r 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
0008EBr 3               
0008EBr 3                               ; We need to save the block.
0008EBr 3  20 rr rr                     jsr xt_blkbuffer
0008EEr 3  20 rr rr                     jsr xt_buffblocknum
0008F1r 3  20 rr rr                     jsr xt_fetch
0008F4r 3  20 rr rr                     jsr xt_block_write
0008F7r 3               
0008F7r 3               @buffer_available:
0008F7r 3                               ; Save the block number.
0008F7r 3  A0 2A                        ldy #buffblocknum_offset
0008F9r 3  B5 00                        lda 0,x
0008FBr 3  91 rr                        sta (up),y
0008FDr 3  C8                           iny
0008FEr 3  B5 01                        lda 1,x
000900r 3  91 rr                        sta (up),y
000902r 3               
000902r 3                               ; Get the requested block.
000902r 3  20 rr rr                     jsr xt_blkbuffer
000905r 3  20 rr rr                     jsr xt_swap
000908r 3  20 rr rr                     jsr xt_block_read
00090Br 3               
00090Br 3                               ; Mark the buffer as clean and in-use.
00090Br 3  A9 01                        lda #1
00090Dr 3  A0 2C                        ldy #buffstatus_offset
00090Fr 3  91 rr                        sta (up),y
000911r 3               
000911r 3                               ; Make room on the stack for the return address.
000911r 3  CA                           dex
000912r 3  CA                           dex
000913r 3               
000913r 3               @done:
000913r 3                               ; It's in the buffer. Return the buffer address.
000913r 3  A0 28                        ldy #blkbuffer_offset
000915r 3  B1 rr                        lda (up),y
000917r 3  95 00                        sta 0,x
000919r 3  C8                           iny
00091Ar 3  B1 rr                        lda (up),y
00091Cr 3  95 01                        sta 1,x
00091Er 3               
00091Er 3  60           z_block:        rts
00091Fr 3               
00091Fr 3               
00091Fr 3               
00091Fr 3               ; ## BLOCK_RAMDRIVE_INIT ( u -- ) "Create a ramdrive for blocks"
00091Fr 3               ; ## "block-ramdrive-init"  auto  Tali block
00091Fr 3                       ; """Create a RAM drive, with the given number of
00091Fr 3                       ; blocks, in the dictionary along with setting up the block words to
00091Fr 3                       ; use it.  The read/write routines do not provide bounds checking.
00091Fr 3                       ; Expected use: `4 block-ramdrive-init` ( to create blocks 0-3 )
00091Fr 3                       ; """
00091Fr 3               
00091Fr 3               xt_block_ramdrive_init:
00091Fr 3  20 rr rr                     jsr underflow_1
000922r 3               
000922r 3                               ; Store the string to run here as a string literal.
000922r 3                               ; See SLITERAL for the format information. This way, we
000922r 3                               ; don't have the words defined below in the Dictionary until
000922r 3                               ; we really use them.
000922r 3  4C rr rr                     jmp @after_ramdrive_code
000925r 3               
000925r 3               @ramdrive_code:
000925r 3  62 61 73 65          .byte "base @ swap decimal"
000929r 3  20 40 20 73  
00092Dr 3  77 61 70 20  
000938r 3  20 31 30 32          .byte " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
00093Cr 3  34 20 2A     
00093Fr 3  20 64 75 70          .byte " dup"    ; ( Save a copy for formatting it at the end )
000943r 3  20 62 75 66          .byte " buffer: ramdrive" ; ( Create ramdrive )
000947r 3  66 65 72 3A  
00094Br 3  20 72 61 6D  
000954r 3                       ; ( These routines just copy between the buffer and the ramdrive blocks )
000954r 3  20 3A 20 62          .byte " : block-read-ramdrive"  ; ( addr u -- )
000958r 3  6C 6F 63 6B  
00095Cr 3  2D 72 65 61  
00096Ar 3  20 72 61 6D          .byte " ramdrive swap 1024 * + swap 1024 move ;"
00096Er 3  64 72 69 76  
000972r 3  65 20 73 77  
000992r 3  20 3A 20 62          .byte " : block-write-ramdrive" ; ( addr u -- )
000996r 3  6C 6F 63 6B  
00099Ar 3  2D 77 72 69  
0009A9r 3  20 72 61 6D          .byte " ramdrive swap 1024 * + 1024 move ;"
0009ADr 3  64 72 69 76  
0009B1r 3  65 20 73 77  
0009CCr 3  20 27 20 62          .byte " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
0009D0r 3  6C 6F 63 6B  
0009D4r 3  2D 72 65 61  
0009F6r 3  20 27 20 62          .byte " ' block-write-ramdrive block-write-vector !"
0009FAr 3  6C 6F 63 6B  
0009FEr 3  2D 77 72 69  
000A22r 3  20 72 61 6D          .byte " ramdrive swap blank base !"
000A26r 3  64 72 69 76  
000A2Ar 3  65 20 73 77  
000A3Dr 3               
000A3Dr 3               @after_ramdrive_code:
000A3Dr 3  20 rr rr                     jsr sliteral_runtime
000A40r 3               
000A40r 3  rr rr 18 01  .word @ramdrive_code, @after_ramdrive_code-@ramdrive_code
000A44r 3               
000A44r 3                               ; The address and length of the ramdrive code is now on the
000A44r 3                               ; stack. Call EVALUATE to run it.
000A44r 3  20 rr rr                     jsr xt_evaluate
000A47r 3               
000A47r 3               z_block_ramdrive_init:
000A47r 3  60                           rts
000A48r 3               
000A48r 3               
000A48r 3               
000A48r 3               ; ## BLOCK_READ ( addr u -- ) "Read a block from storage (deferred word)"
000A48r 3               ; ## "block-read"  auto  Tali block
000A48r 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000A48r 3                       ; with their own version to read a block from storage.
000A48r 3                       ; The stack parameters are ( buffer_address block# -- ).
000A48r 3                       ; """
000A48r 3               xt_block_read:
000A48r 3                               ; Execute the BLOCK-READ-VECTOR
000A48r 3  A0 2E                        ldy #blockread_offset
000A4Ar 3  B1 rr                        lda (up),y
000A4Cr 3  85 rr                        sta tmp1
000A4Er 3  C8                           iny
000A4Fr 3  B1 rr                        lda (up),y
000A51r 3  85 rr                        sta tmp1+1
000A53r 3               
000A53r 3  6C rr rr                     jmp (tmp1)
000A56r 3               
000A56r 3               z_block_read:   ; No RTS needed
000A56r 3               
000A56r 3               
000A56r 3               ; ## BLOCK_READ_VECTOR ( -- addr ) "Address of the block-read vector"
000A56r 3               ; ## "block-read-vector"  auto  Tali block
000A56r 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000A56r 3                       ; with their own version to read a block from storage.
000A56r 3                       ; This word gives the address of the vector so it can be replaced.
000A56r 3                       ; """
000A56r 3               xt_block_read_vector:
000A56r 3                               ; Get the BLOCK-READ-VECTOR address
000A56r 3  CA                           dex
000A57r 3  CA                           dex
000A58r 3  18                           clc
000A59r 3  A5 rr                        lda up
000A5Br 3  69 2E                        adc #blockread_offset
000A5Dr 3  95 00                        sta 0,x
000A5Fr 3  A5 rr                        lda up+1
000A61r 3  69 00                        adc #0          ; Add carry
000A63r 3  95 01                        sta 1,x
000A65r 3               
000A65r 3               z_block_read_vector:
000A65r 3  60                           rts
000A66r 3               
000A66r 3               
000A66r 3               ; This is the default error message the vectored words BLOCK-READ and
000A66r 3               ; BLOCK-WRITE start with. This word is not included in the dictionary.
000A66r 3               xt_block_word_error:
000A66r 3  A9 0C                        lda #err_blockwords
000A68r 3  4C rr rr                     jmp error       ; no RTS needed
000A6Br 3               z_block_word_error:
000A6Br 3               
000A6Br 3               ; ## BLOCK_WRITE ( addr u -- ) "Write a block to storage (deferred word)"
000A6Br 3               ; ## "block-write"  auto  Tali block
000A6Br 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000A6Br 3                       ; with their own version to write a block to storage.
000A6Br 3                       ; The stack parameters are ( buffer_address block# -- ).
000A6Br 3                       ; """
000A6Br 3               xt_block_write:
000A6Br 3                               ; Execute the BLOCK-READ-VECTOR
000A6Br 3  A0 30                        ldy #blockwrite_offset
000A6Dr 3  B1 rr                        lda (up),y
000A6Fr 3  85 rr                        sta tmp1
000A71r 3  C8                           iny
000A72r 3  B1 rr                        lda (up),y
000A74r 3  85 rr                        sta tmp1+1
000A76r 3  6C rr rr                     jmp (tmp1)
000A79r 3               
000A79r 3               z_block_write:  ; No RTS needed
000A79r 3               
000A79r 3               
000A79r 3               ; ## BLOCK_WRITE_VECTOR ( -- addr ) "Address of the block-write vector"
000A79r 3               ; ## "block-write-vector"  auto  Tali block
000A79r 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000A79r 3                       ; with their own version to write a block to storage.
000A79r 3                       ; This word gives the address of the vector so it can be replaced.
000A79r 3                       ; """
000A79r 3               xt_block_write_vector:
000A79r 3                               ; Get the BLOCK-WRITE-VECTOR address
000A79r 3  CA                           dex
000A7Ar 3  CA                           dex
000A7Br 3  18                           clc
000A7Cr 3  A5 rr                        lda up
000A7Er 3  69 30                        adc #blockwrite_offset
000A80r 3  95 00                        sta 0,x
000A82r 3  A5 rr                        lda up+1
000A84r 3  69 00                        adc #0          ; Add carry
000A86r 3  95 01                        sta 1,x
000A88r 3               
000A88r 3               z_block_write_vector:
000A88r 3  60                           rts
000A89r 3               
000A89r 3               
000A89r 3               ; ## BOUNDS ( addr u -- addr+u addr ) "Prepare address for looping"
000A89r 3               ; ## "bounds"  auto  Gforth
000A89r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Memory-Blocks.html
000A89r 3                       ; Given a string, return the correct Data Stack parameters for
000A89r 3                       ; a DO/LOOP loop over its characters. This is realized as
000A89r 3                       ; OVER + SWAP in Forth, but we do it a lot faster in assembler
000A89r 3                       ; """
000A89r 3               xt_bounds:
000A89r 3  20 rr rr                     jsr underflow_2
000A8Cr 3               
000A8Cr 3  18                           clc
000A8Dr 3  B5 00                        lda 0,x                 ; LSB u
000A8Fr 3  B4 02                        ldy 2,x                 ; LSB addr
000A91r 3  75 02                        adc 2,x
000A93r 3  95 02                        sta 2,x                 ; LSB addr+u
000A95r 3  94 00                        sty 0,x
000A97r 3               
000A97r 3  B5 01                        lda 1,x                 ; MSB u
000A99r 3  B4 03                        ldy 3,x                 ; MSB addr
000A9Br 3  75 03                        adc 3,x
000A9Dr 3  95 03                        sta 3,x                 ; MSB addr+u
000A9Fr 3  94 01                        sty 1,x
000AA1r 3               
000AA1r 3  60           z_bounds:       rts
000AA2r 3               
000AA2r 3               
000AA2r 3               ; ## BRACKET_CHAR ( "c" -- ) "Compile character"
000AA2r 3               ; ## "[char]"  auto  ANS core
000AA2r 3                       ; """https://forth-standard.org/standard/core/BracketCHAR
000AA2r 3                       ; Compile the ASCII value of a character as a literal. This is an
000AA2r 3                       ; immediate, compile-only word.
000AA2r 3                       ;
000AA2r 3                       ; A definition given in
000AA2r 3                       ; http://forth-standard.org/standard/implement is
000AA2r 3                       ; : [CHAR]  CHAR POSTPONE LITERAL ; IMMEDIATE
000AA2r 3                       ; """
000AA2r 3               xt_bracket_char:
000AA2r 3  20 rr rr                     jsr xt_char
000AA5r 3  20 rr rr                     jsr xt_literal
000AA8r 3  60           z_bracket_char: rts
000AA9r 3               
000AA9r 3               
000AA9r 3               ; ## BRACKET_TICK ( -- ) "Store xt of following word during compilation"
000AA9r 3               ; ## "[']"  auto  ANS core
000AA9r 3                       ; """https://forth-standard.org/standard/core/BracketTick"""
000AA9r 3               xt_bracket_tick:
000AA9r 3  20 rr rr                     jsr xt_tick
000AACr 3  20 rr rr                     jsr xt_literal
000AAFr 3  60           z_bracket_tick: rts
000AB0r 3               
000AB0r 3               
000AB0r 3               ; ## BUFFBLOCKNUM ( -- addr ) "Push address of variable holding block in buffer"
000AB0r 3               ; ## "buffblocknum"  auto  Tali block
000AB0r 3               xt_buffblocknum:
000AB0r 3                               ; BUFFBLOCKNUM is at UP + buffblocknum_offset
000AB0r 3  CA                           dex
000AB1r 3  CA                           dex
000AB2r 3  18                           clc
000AB3r 3  A5 rr                        lda up
000AB5r 3  69 2A                        adc #buffblocknum_offset        ; Add offset
000AB7r 3  95 00                        sta 0,x
000AB9r 3  A5 rr                        lda up+1
000ABBr 3  69 00                        adc #0                          ; Adding carry
000ABDr 3  95 01                        sta 1,x
000ABFr 3               
000ABFr 3  60           z_buffblocknum: rts
000AC0r 3               
000AC0r 3               
000AC0r 3               ; ## BUFFER ( u -- a-addr ) "Get a buffer for a block"
000AC0r 3               ; ## "buffer"  auto  ANS block
000AC0r 3                       ; """https://forth-standard.org/standard/block/BUFFER"""
000AC0r 3               
000AC0r 3               xt_buffer:
000AC0r 3                               ; Check the buffer status
000AC0r 3  A0 2C                        ldy #buffstatus_offset
000AC2r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
000AC4r 3  C9 03                        cmp #3          ; LSB is needed.
000AC6r 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
000AC8r 3               
000AC8r 3                               ; We need to save the block.
000AC8r 3  20 rr rr                     jsr xt_blkbuffer
000ACBr 3  20 rr rr                     jsr xt_buffblocknum
000ACEr 3  20 rr rr                     jsr xt_fetch
000AD1r 3  20 rr rr                     jsr xt_block_write
000AD4r 3               
000AD4r 3               @buffer_available:
000AD4r 3                               ; Save the block number.
000AD4r 3  A0 2A                        ldy #buffblocknum_offset
000AD6r 3  B5 00                        lda 0,x
000AD8r 3  91 rr                        sta (up),y
000ADAr 3  C8                           iny
000ADBr 3  B5 01                        lda 1,x
000ADDr 3  91 rr                        sta (up),y
000ADFr 3               
000ADFr 3                               ; Mark the buffer as clean and in-use.
000ADFr 3  A9 01                        lda #1
000AE1r 3  A0 2C                        ldy #buffstatus_offset
000AE3r 3  91 rr                        sta (up),y
000AE5r 3               
000AE5r 3               @done:
000AE5r 3                               ; Return the buffer address.
000AE5r 3  A0 28                        ldy #blkbuffer_offset
000AE7r 3  B1 rr                        lda (up),y
000AE9r 3  95 00                        sta 0,x
000AEBr 3  C8                           iny
000AECr 3  B1 rr                        lda (up),y
000AEEr 3  95 01                        sta 1,x
000AF0r 3               
000AF0r 3  60           z_buffer:       rts
000AF1r 3               
000AF1r 3               
000AF1r 3               
000AF1r 3               ; ## BUFFER_COLON ( u "<name>" -- ; -- addr ) "Create an uninitialized buffer"
000AF1r 3               ; ## "buffer:"  auto  ANS core ext
000AF1r 3                               ; """https://forth-standard.org/standard/core/BUFFERColon
000AF1r 3                               ; Create a buffer of size u that puts its address on the stack
000AF1r 3                               ; when its name is used.
000AF1r 3                               ; """
000AF1r 3               xt_buffer_colon:
000AF1r 3  20 rr rr                     jsr xt_create
000AF4r 3  20 rr rr                     jsr xt_allot
000AF7r 3  60           z_buffer_colon: rts
000AF8r 3               
000AF8r 3               
000AF8r 3               ; ## BUFFSTATUS ( -- addr ) "Push address of variable holding buffer status"
000AF8r 3               ; ## "buffstatus"  auto  Tali block
000AF8r 3               xt_buffstatus:
000AF8r 3                               ; BUFFSTATUS is at UP + buffstatus_offset
000AF8r 3  CA                           dex
000AF9r 3  CA                           dex
000AFAr 3  18                           clc
000AFBr 3  A5 rr                        lda up
000AFDr 3  69 2C                        adc #buffstatus_offset  ; Add offset
000AFFr 3  95 00                        sta 0,x
000B01r 3  A5 rr                        lda up+1
000B03r 3  69 00                        adc #0                  ; Adding carry
000B05r 3  95 01                        sta 1,x
000B07r 3               
000B07r 3  60           z_buffstatus:   rts
000B08r 3               
000B08r 3               
000B08r 3               ; ## BYE ( -- ) "Break"
000B08r 3               ; ## "bye"  tested  ANS tools ext
000B08r 3                       ; """https://forth-standard.org/standard/tools/BYE"""
000B08r 3               
000B08r 3               xt_bye:
000B08r 3                               ;brk
000B08r 3  4C rr rr                     jmp platform_bye
000B0Br 3               z_bye:          ;rts             ; never reached
000B0Br 3               
000B0Br 3               
000B0Br 3               
000B0Br 3               ; ## C_COMMA ( c -- ) "Store one byte/char in the Dictionary"
000B0Br 3               ; ## "c,"  auto  ANS core
000B0Br 3                       ; """https://forth-standard.org/standard/core/CComma"""
000B0Br 3               
000B0Br 3               xt_c_comma:
000B0Br 3  20 rr rr                     jsr underflow_1
000B0Er 3               
000B0Er 3  B5 00                        lda 0,x
000B10r 3  20 rr rr                     jsr cmpl_a
000B13r 3               
000B13r 3  E8                           inx
000B14r 3  E8                           inx
000B15r 3               
000B15r 3  60           z_c_comma:      rts
000B16r 3               
000B16r 3               
000B16r 3               
000B16r 3               ; ## C_FETCH ( addr -- c ) "Get a character/byte from given address"
000B16r 3               ; ## "c@"  auto  ANS core
000B16r 3                       ; """https://forth-standard.org/standard/core/CFetch"""
000B16r 3               xt_c_fetch:
000B16r 3  20 rr rr                     jsr underflow_1
000B19r 3               
000B19r 3  A1 00                        lda (0,x)
000B1Br 3  95 00                        sta 0,x
000B1Dr 3  74 01                        stz 1,x         ; Ignore LSB
000B1Fr 3               
000B1Fr 3  60           z_c_fetch:      rts
000B20r 3               
000B20r 3               
000B20r 3               ; ## C_STORE ( c addr -- ) "Store character at address given"
000B20r 3               ; ## "c!"  auto  ANS core
000B20r 3                       ; """https://forth-standard.org/standard/core/CStore"""
000B20r 3               xt_c_store:
000B20r 3  20 rr rr                     jsr underflow_2
000B23r 3               
000B23r 3  B5 02                        lda 2,x
000B25r 3  81 00                        sta (0,x)
000B27r 3               
000B27r 3  E8                           inx
000B28r 3  E8                           inx
000B29r 3  E8                           inx
000B2Ar 3  E8                           inx
000B2Br 3               
000B2Br 3  60           z_c_store:      rts
000B2Cr 3               
000B2Cr 3               
000B2Cr 3               ; ## CASE (C: -- 0) ( -- ) "Conditional flow control"
000B2Cr 3               ; ## "case"  auto  ANS core ext
000B2Cr 3                       ; """http://forth-standard.org/standard/core/CASE
000B2Cr 3                       ;
000B2Cr 3                       ; This is a dummy header, CASE shares the actual code with ZERO.
000B2Cr 3                       ; """
000B2Cr 3               
000B2Cr 3               
000B2Cr 3               ; ## CELL_PLUS ( u -- u ) "Add cell size in bytes"
000B2Cr 3               ; ## "cell+"  auto  ANS core
000B2Cr 3                       ; """https://forth-standard.org/standard/core/CELLPlus
000B2Cr 3                       ; Add the number of bytes ("address units") that one cell needs.
000B2Cr 3                       ; Since this is an 8 bit machine with 16 bit cells, we add two bytes.
000B2Cr 3                       ; """
000B2Cr 3               
000B2Cr 3               xt_cell_plus:
000B2Cr 3  20 rr rr                     jsr underflow_1
000B2Fr 3               
000B2Fr 3  F6 00                        inc 0,x
000B31r 3  D0 02                        bne @1
000B33r 3  F6 01                        inc 1,x
000B35r 3               @1:
000B35r 3  F6 00                        inc 0,x
000B37r 3  D0 02                        bne @done
000B39r 3  F6 01                        inc 1,x
000B3Br 3               @done:
000B3Br 3  60           z_cell_plus:    rts
000B3Cr 3               
000B3Cr 3               
000B3Cr 3               
000B3Cr 3               ; ## CELLS ( u -- u ) "Convert cells to size in bytes"
000B3Cr 3               ; ## "cells"  auto  ANS core
000B3Cr 3                       ; """https://forth-standard.org/standard/core/CELLS
000B3Cr 3                       ;
000B3Cr 3                       ; Dummy entry for the CELLS word, the code is the same as for
000B3Cr 3                       ; 2*, which is where the header directs us to
000B3Cr 3                       ; """
000B3Cr 3               
000B3Cr 3               
000B3Cr 3               ; ## CHAR ( "c" -- u ) "Convert character to ASCII value"
000B3Cr 3               ; ## "char"  auto  ANS core
000B3Cr 3                       ; """https://forth-standard.org/standard/core/CHAR"""
000B3Cr 3               
000B3Cr 3               xt_char:
000B3Cr 3                               ; get character from string, returns ( addr u )
000B3Cr 3  20 rr rr                     jsr xt_parse_name
000B3Fr 3               
000B3Fr 3                               ; if we got back a zero, we have a problem
000B3Fr 3  B5 00                        lda 0,x
000B41r 3  15 01                        ora 1,x
000B43r 3  D0 05                        bne @not_empty
000B45r 3               
000B45r 3  A9 05                        lda #err_noname
000B47r 3  4C rr rr                     jmp error
000B4Ar 3               
000B4Ar 3               @not_empty:
000B4Ar 3  E8                           inx             ; drop number of characters, leave addr
000B4Br 3  E8                           inx
000B4Cr 3  A1 00                        lda (0,x)       ; get character (equivalent to C@)
000B4Er 3  95 00                        sta 0,x
000B50r 3  74 01                        stz 1,x         ; MSB is always zero
000B52r 3               
000B52r 3  60           z_char:         rts
000B53r 3               
000B53r 3               
000B53r 3               
000B53r 3               ; ## CHAR_PLUS ( addr -- addr+1 ) "Add the size of a character unit to address"
000B53r 3               ; ## "char+"  auto  ANS core
000B53r 3                       ; """https://forth-standard.org/standard/core/CHARPlus
000B53r 3                       ;
000B53r 3                       ; This is a dummy entry, the code is shared with ONE_PLUS
000B53r 3                       ; """
000B53r 3               
000B53r 3               
000B53r 3               ; ## CHARS ( n -- n ) "Number of bytes that n chars need"
000B53r 3               ; ## "chars"  auto  ANS core
000B53r 3                       ; """https://forth-standard.org/standard/core/CHARS
000B53r 3                       ; Return how many address units n chars are. Since this is an 8 bit
000B53r 3                       ; machine, this does absolutely nothing and is included for
000B53r 3                       ; compatibility with other Forth versions
000B53r 3                       ; """
000B53r 3               
000B53r 3               xt_chars:
000B53r 3                               ; Checking for underflow seems a bit stupid because this
000B53r 3                               ; routine does nothing on this machine. However, the user
000B53r 3                               ; should be warned that there is something wrong with the
000B53r 3                               ; code if this occurs.
000B53r 3  20 rr rr                     jsr underflow_1
000B56r 3               
000B56r 3  60           z_chars:        rts
000B57r 3               
000B57r 3               
000B57r 3               ; ## CLEAVE ( addr u -- addr2 u2 addr1 u1 ) "Split off word from string"
000B57r 3               ; ## "cleave"  auto  Tali Forth
000B57r 3               
000B57r 3                       ; """Given a range of memory with words delimited by whitespace,return
000B57r 3                       ; the first word at the top of the stack and the rest of the word
000B57r 3                       ; following it.
000B57r 3                       ;
000B57r 3                       ; Example:
000B57r 3                       ; s" w1 w2 w3" cleave  -> "w2 w3" "w1"
000B57r 3                       ; s" w1" cleave        -> "" "w1"
000B57r 3                       ;
000B57r 3                       ; Since it will be used in loops a lot, we want it to work in pure
000B57r 3                       ; assembler and be as fast as we can make it. Calls PARSE-NAME so we
000B57r 3                       ; strip leading delimiters.
000B57r 3                       ; """
000B57r 3               
000B57r 3               xt_cleave:
000B57r 3  20 rr rr                     jsr underflow_2
000B5Ar 3               
000B5Ar 3                               ; We arrive here with ( addr u ). We need to strip any leading
000B5Ar 3                               ; spaces by hand: PARSE-NAME does do that, but it doesn't
000B5Ar 3                               ; remember how many spaces were stripped. This means we can't
000B5Ar 3                               ; calculate the length of the remainder. Fortunately, Tali
000B5Ar 3                               ; Forth has just the word we need for this:
000B5Ar 3  20 rr rr                     jsr xt_minus_leading    ; -LEADING ( addr u )
000B5Dr 3               
000B5Dr 3                               ; The main part we can turn over to PARSE-NAME, except that we
000B5Dr 3                               ; have a string ( addr u ) and not stuff in the input buffer.
000B5Dr 3                               ; We get around this by cheating: We place ( addr u ) in the
000B5Dr 3                               ; input buffer and then call PARSE-NAME.
000B5Dr 3  20 rr rr                     jsr xt_input_to_r       ; save old imput state
000B60r 3               
000B60r 3  B5 00                        lda 0,x         ; u is new ciblen
000B62r 3  85 rr                        sta ciblen
000B64r 3  B5 01                        lda 1,x
000B66r 3  85 rr                        sta ciblen+1
000B68r 3               
000B68r 3  B5 02                        lda 2,x         ; addr is new cib
000B6Ar 3  85 rr                        sta cib
000B6Cr 3  B5 03                        lda 3,x
000B6Er 3  85 rr                        sta cib+1
000B70r 3               
000B70r 3  64 rr                        stz toin        ; >IN pointer is zero
000B72r 3  64 rr                        stz toin+1
000B74r 3               
000B74r 3                               ; PARSE-NAME gives us back the substring of the first word
000B74r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u addr-s u-s )
000B77r 3               
000B77r 3                               ; If we were given an empty string, then we're done. It's the
000B77r 3                               ; resposibility of the user to catch this as a sign to end the
000B77r 3                               ; any loop
000B77r 3  B5 00                        lda 0,x
000B79r 3  15 01                        ora 1,x
000B7Br 3  F0 23                        beq @done
000B7Dr 3               
000B7Dr 3                               ; Now we have to adjust the original string
000B7Dr 3  B5 04                        lda 4,x         ; LSB of original u
000B7Fr 3  38                           sec
000B80r 3  F5 00                        sbc 0,x
000B82r 3  95 04                        sta 4,x
000B84r 3               
000B84r 3  B5 05                        lda 5,x         ; MSB of original u
000B86r 3  F5 01                        sbc 1,x
000B88r 3  95 05                        sta 5,x
000B8Ar 3               
000B8Ar 3  B5 06                        lda 6,x         ; LSB of original addr
000B8Cr 3  18                           clc
000B8Dr 3  75 00                        adc 0,x
000B8Fr 3  95 06                        sta 6,x
000B91r 3               
000B91r 3  B5 07                        lda 7,x         ; MSB of original addr
000B93r 3  75 01                        adc 1,x
000B95r 3  95 07                        sta 7,x
000B97r 3               
000B97r 3                               ; There is one small problem: PARSE-NAME will probably have
000B97r 3                               ; left the string with the rest of the words with leading
000B97r 3                               ; delimiters. We use our magic -LEADING again
000B97r 3  20 rr rr                     jsr xt_two_swap         ; ( addr-s u-s addr u )
000B9Ar 3  20 rr rr                     jsr xt_minus_leading
000B9Dr 3  20 rr rr                     jsr xt_two_swap         ; ( addr u addr-s u-s )
000BA0r 3               @done:
000BA0r 3                               ; Restore input
000BA0r 3  20 rr rr                     jsr xt_r_to_input
000BA3r 3               
000BA3r 3  60           z_cleave:       rts
000BA4r 3               
000BA4r 3               
000BA4r 3               
000BA4r 3               ; ## CMOVE ( addr1 addr2 u -- ) "Copy bytes going from low to high"
000BA4r 3               ; ## "cmove"  auto  ANS string
000BA4r 3                       ; """https://forth-standard.org/standard/string/CMOVE
000BA4r 3                       ; Copy u bytes from addr1 to addr2, going low to high (addr2 is
000BA4r 3                       ; larger than addr1). Based on code in Leventhal, Lance A.
000BA4r 3                       ; "6502 Assembly Language Routines", p. 201, where it is called
000BA4r 3                       ; "move left".
000BA4r 3                       ;
000BA4r 3                       ; There are no official tests for this word.
000BA4r 3                       ; """
000BA4r 3               
000BA4r 3               xt_cmove:
000BA4r 3  20 rr rr                     jsr underflow_3
000BA7r 3               
000BA7r 3                               ; move destination address to where we can work with it
000BA7r 3  B5 02                        lda 2,x
000BA9r 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000BABr 3  B5 03                        lda 3,x
000BADr 3  85 rr                        sta tmp2+1
000BAFr 3               
000BAFr 3                               ; move source address to where we can work with it
000BAFr 3  B5 04                        lda 4,x
000BB1r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000BB3r 3  B5 05                        lda 5,x
000BB5r 3  85 rr                        sta tmp1+1
000BB7r 3               
000BB7r 3  A0 00                        ldy #0
000BB9r 3  B5 01                        lda 1,x         ; number of whole pages to move
000BBBr 3  F0 0F                        beq @dopartial
000BBDr 3               
000BBDr 3               @page:
000BBDr 3  B1 rr                        lda (tmp1),y
000BBFr 3  91 rr                        sta (tmp2),y
000BC1r 3  C8                           iny
000BC2r 3  D0 F9                        bne @page
000BC4r 3               
000BC4r 3  E6 rr                        inc tmp1+1
000BC6r 3  E6 rr                        inc tmp2+1
000BC8r 3  D6 01                        dec 1,x
000BCAr 3  D0 F1                        bne @page
000BCCr 3               
000BCCr 3               @dopartial:
000BCCr 3  B5 00                        lda 0,x         ; length of last page
000BCEr 3  F0 09                        beq @done
000BD0r 3               
000BD0r 3               @partial:
000BD0r 3  B1 rr                        lda (tmp1),y
000BD2r 3  91 rr                        sta (tmp2),y
000BD4r 3  C8                           iny
000BD5r 3               
000BD5r 3  D6 00                        dec 0,x
000BD7r 3  D0 F7                        bne @partial
000BD9r 3               
000BD9r 3               @done:          ; clear the stack
000BD9r 3  8A                           txa
000BDAr 3  18                           clc
000BDBr 3  69 06                        adc #6
000BDDr 3  AA                           tax
000BDEr 3               
000BDEr 3  60           z_cmove:        rts
000BDFr 3               
000BDFr 3               
000BDFr 3               
000BDFr 3               ; ## CMOVE_UP ( add1 add2 u -- ) "Copy bytes from high to low"
000BDFr 3               ; ## "cmove>"  auto  ANS string
000BDFr 3                       ; """https://forth-standard.org/standard/string/CMOVEtop
000BDFr 3                       ; Based on code in Leventhal, Lance A. "6502 Assembly Language
000BDFr 3                       ; Routines", p. 201, where it is called "move right".
000BDFr 3                       ;
000BDFr 3                       ; There are no official tests for this word.
000BDFr 3                       ; """
000BDFr 3               
000BDFr 3               xt_cmove_up:
000BDFr 3  20 rr rr                     jsr underflow_3
000BE2r 3               
000BE2r 3                               ; Move destination address to where we can work with it
000BE2r 3  B5 02                        lda 2,x
000BE4r 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000BE6r 3  B5 03                        lda 3,x
000BE8r 3  18                           clc
000BE9r 3  75 01                        adc 1,x
000BEBr 3  85 rr                        sta tmp2+1      ; point to last page of destination
000BEDr 3               
000BEDr 3                               ; Move source address to where we can work with it
000BEDr 3  B5 04                        lda 4,x
000BEFr 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000BF1r 3  B5 05                        lda 5,x
000BF3r 3  18                           clc
000BF4r 3  75 01                        adc 1,x
000BF6r 3  85 rr                        sta tmp1+1      ; point to last page of source
000BF8r 3  F6 01                        inc 1,x         ; allows us to use bne with dec 1,x below
000BFAr 3               
000BFAr 3                               ; Move the last partial page first
000BFAr 3  B4 00                        ldy 0,x         ; length of last page
000BFCr 3  F0 0E                        beq @nopartial
000BFEr 3               
000BFEr 3               @outerloop:
000BFEr 3  88                           dey
000BFFr 3  F0 07                        beq @finishpage
000C01r 3               
000C01r 3               @innerloop:
000C01r 3  B1 rr                        lda (tmp1),y
000C03r 3  91 rr                        sta (tmp2),y
000C05r 3  88                           dey
000C06r 3  D0 F9                        bne @innerloop
000C08r 3               
000C08r 3               @finishpage:
000C08r 3  B2 rr                        lda (tmp1)      ; handle y = 0 separately
000C0Ar 3  92 rr                        sta (tmp2)
000C0Cr 3               
000C0Cr 3               @nopartial:
000C0Cr 3  C6 rr                        dec tmp1+1      ; back up to previous pages
000C0Er 3  C6 rr                        dec tmp2+1
000C10r 3  D6 01                        dec 1,x
000C12r 3  D0 EA                        bne @outerloop
000C14r 3               @done:
000C14r 3                               ; clear up the stack and leave
000C14r 3  8A                           txa
000C15r 3  18                           clc
000C16r 3  69 06                        adc #6
000C18r 3  AA                           tax
000C19r 3               
000C19r 3  60           z_cmove_up:     rts
000C1Ar 3               
000C1Ar 3               
000C1Ar 3               
000C1Ar 3               ; ## COLON ( "name" -- ) "Start compilation of a new word"
000C1Ar 3               ; ## ":"  auto  ANS core
000C1Ar 3                       ; """https://forth-standard.org/standard/core/Colon
000C1Ar 3                       ;
000C1Ar 3                       ; Use the CREATE routine and fill in the rest by hand.
000C1Ar 3                       ; """
000C1Ar 3               
000C1Ar 3               xt_colon:
000C1Ar 3                               ; If we're already in the compile state, complain
000C1Ar 3                               ; and quit
000C1Ar 3  A5 rr                        lda state
000C1Cr 3  05 rr                        ora state+1
000C1Er 3  F0 05                        beq @1
000C20r 3               
000C20r 3  A9 07                        lda #err_state
000C22r 3  4C rr rr                     jmp error
000C25r 3               @1:
000C25r 3                               ; switch to compile state
000C25r 3  C6 rr                        dec state
000C27r 3  C6 rr                        dec state+1
000C29r 3               
000C29r 3                               ; Set bit 6 in status to tell ";" and RECURSE this is a normal
000C29r 3                               ; word
000C29r 3  A9 40                        lda #%01000000
000C2Br 3  04 rr                        tsb status
000C2Dr 3               
000C2Dr 3                               ; CREATE is going to change the DP to point to the new word's
000C2Dr 3                               ; header. While this is fine for (say) variables, it would mean
000C2Dr 3                               ; that FIND-NAME etc would find a half-finished word when
000C2Dr 3                               ; looking in the Dictionary. To prevent this, we save the old
000C2Dr 3                               ; version of DP and restore it later. The new DP is placed in
000C2Dr 3                               ; the variable WORKWORD until we're finished with a SEMICOLON.
000C2Dr 3  20 rr rr                     jsr current_to_dp
000C30r 3  A5 rr                        lda dp+1            ; CREATE uses a lot of variables
000C32r 3  48                           pha
000C33r 3  A5 rr                        lda dp
000C35r 3  48                           pha
000C36r 3               
000C36r 3                               ; Tell create not to print warning for duplicate name.
000C36r 3  A9 80                        lda #%10000000
000C38r 3  04 rr                        tsb status
000C3Ar 3               
000C3Ar 3  20 rr rr                     jsr xt_create
000C3Dr 3               
000C3Dr 3                               ; Get the nt (not the xt!) of the new word as described above.
000C3Dr 3                               ; Only COLON, SEMICOLON and RECURSE get to access WORKWORD
000C3Dr 3  20 rr rr                     jsr current_to_dp   ; This might be able to be omitted
000C40r 3  A5 rr                        lda dp
000C42r 3  85 rr                        sta workword
000C44r 3  A5 rr                        lda dp+1
000C46r 3  85 rr                        sta workword+1
000C48r 3               
000C48r 3                               ; Restore original DP
000C48r 3  68                           pla
000C49r 3  85 rr                        sta dp
000C4Br 3  68                           pla
000C4Cr 3  85 rr                        sta dp+1
000C4Er 3  20 rr rr                     jsr dp_to_current
000C51r 3               
000C51r 3                               ; CREATE includes a subroutine jump to DOVAR by default. We
000C51r 3                               ; back up three bytes and overwrite that.
000C51r 3  A5 rr                        lda cp
000C53r 3  38                           sec
000C54r 3  E9 03                        sbc #3
000C56r 3  85 rr                        sta cp
000C58r 3  B0 02                        bcs @done
000C5Ar 3  C6 rr                        dec cp+1
000C5Cr 3               @done:
000C5Cr 3  60           z_colon:        rts
000C5Dr 3               
000C5Dr 3               
000C5Dr 3               ; ## COLON_NONAME ( -- ) "Start compilation of a new word""
000C5Dr 3               ; ## ":NONAME"  auto  ANS core
000C5Dr 3                       ; """https://forth-standard.org/standard/core/ColonNONAME
000C5Dr 3                       ; Compile a word with no nt.  ";" will put its xt on the stack.
000C5Dr 3                       ; """
000C5Dr 3               
000C5Dr 3               xt_colon_noname:
000C5Dr 3                               ; If we're already in the compile state, complain
000C5Dr 3                               ; and quit
000C5Dr 3  A5 rr                        lda state
000C5Fr 3  05 rr                        ora state+1
000C61r 3  F0 05                        beq @1
000C63r 3               
000C63r 3  A9 07                        lda #err_state
000C65r 3  4C rr rr                     jmp error
000C68r 3               @1:
000C68r 3                               ; switch to compile state
000C68r 3  C6 rr                        dec state
000C6Ar 3  C6 rr                        dec state+1
000C6Cr 3               
000C6Cr 3                               ; Clear bit 6 in status to tell ";" and RECURSE this is
000C6Cr 3                               ; a :NONAME word.
000C6Cr 3  A9 40                        lda #%01000000
000C6Er 3  14 rr                        trb status
000C70r 3               
000C70r 3                               ; Put cp (the xt for this word) in WORKWORD. The flag above
000C70r 3                               ; lets both ";" and RECURSE know that is is an xt instead of an
000C70r 3                               ; nt and they will modify their behavior.
000C70r 3  A5 rr                        lda cp
000C72r 3  85 rr                        sta workword
000C74r 3  A5 rr                        lda cp+1
000C76r 3  85 rr                        sta workword+1
000C78r 3               @done:
000C78r 3  60           z_colon_noname:        rts
000C79r 3               
000C79r 3               
000C79r 3               
000C79r 3               ; ## COMMA ( n -- ) "Allot and store one cell in memory"
000C79r 3               ; ## ","  auto  ANS core
000C79r 3                       ; """https://forth-standard.org/standard/core/Comma
000C79r 3                       ; Store TOS at current place in memory.
000C79r 3                       ;
000C79r 3                       ; Since this an eight-bit machine, we can ignore all alignment issues.
000C79r 3                       ; """
000C79r 3               
000C79r 3               xt_comma:
000C79r 3  20 rr rr                     jsr underflow_1
000C7Cr 3               
000C7Cr 3  B5 00                        lda 0,x
000C7Er 3  92 rr                        sta (cp)
000C80r 3               
000C80r 3  E6 rr                        inc cp
000C82r 3  D0 02                        bne @1
000C84r 3  E6 rr                        inc cp+1
000C86r 3               @1:
000C86r 3  B5 01                        lda 1,x
000C88r 3  92 rr                        sta (cp)
000C8Ar 3               
000C8Ar 3  E6 rr                        inc cp
000C8Cr 3  D0 02                        bne @done
000C8Er 3  E6 rr                        inc cp+1
000C90r 3               @done:
000C90r 3  E8                           inx
000C91r 3  E8                           inx
000C92r 3               
000C92r 3  60           z_comma:        rts
000C93r 3               
000C93r 3               
000C93r 3               
000C93r 3               ; ## COMPARE ( addr1 u1 addr2 u2 -- -1 | 0 | 1) "Compare two strings"
000C93r 3               ; ## "compare"   auto  ANS string
000C93r 3                       ; """https://forth-standard.org/standard/string/COMPARE
000C93r 3                       ; Compare string1 (denoted by addr1 u1) to string2 (denoted by
000C93r 3                       ; addr2 u2).  Return -1 if string1 < string2, 0 if string1 = string2
000C93r 3                       ; and 1 if string1 > string2 (ASCIIbetical comparison).  A string
000C93r 3                       ; that entirely matches the beginning of the other string, but is
000C93r 3                       ; shorter, is considered less than the longer string.
000C93r 3                       ; """
000C93r 3               
000C93r 3               xt_compare:
000C93r 3  20 rr rr                     jsr underflow_4
000C96r 3               
000C96r 3                               ; Load the two string addresses into tmp1 and tmp2.
000C96r 3  B5 02                        lda 2,x
000C98r 3  85 rr                        sta tmp2
000C9Ar 3  B5 03                        lda 3,x
000C9Cr 3  85 rr                        sta tmp2+1
000C9Er 3  B5 06                        lda 6,x
000CA0r 3  85 rr                        sta tmp1
000CA2r 3  B5 07                        lda 7,x
000CA4r 3  85 rr                        sta tmp1+1
000CA6r 3                               ; The counts will be used in-place on the stack.
000CA6r 3               
000CA6r 3               @compare_loop:
000CA6r 3                               ; Check to see if we are out of letters.
000CA6r 3               
000CA6r 3                               ; Check string1
000CA6r 3  B5 04                        lda 4,x
000CA8r 3  15 05                        ora 5,x
000CAAr 3  F0 2C                        beq @str1_done
000CACr 3               
000CACr 3                               ; Check string2
000CACr 3  B5 00                        lda 0,x
000CAEr 3  15 01                        ora 1,x
000CB0r 3  F0 3A                        beq @greater    ; Str2 empty first
000CB2r 3               
000CB2r 3               @check_letter:
000CB2r 3                               ; Both strings have at least one letter left.
000CB2r 3                               ; Check the letters against each other.
000CB2r 3  B2 rr                        lda (tmp1)
000CB4r 3  D2 rr                        cmp (tmp2)
000CB6r 3  90 26                        bcc @less
000CB8r 3  D0 32                        bne @greater
000CBAr 3               @next_letter:
000CBAr 3                               ; Move both tmp pointers and decrement the counts
000CBAr 3                               ; on the stack.
000CBAr 3                               ; Increment tmp1
000CBAr 3  E6 rr                        inc tmp1
000CBCr 3  D0 02                        bne @1
000CBEr 3  E6 rr                        inc tmp1+1
000CC0r 3               @1:
000CC0r 3                               ; Increment tmp2
000CC0r 3  E6 rr                        inc tmp2
000CC2r 3  D0 02                        bne @2
000CC4r 3  E6 rr                        inc tmp2+1
000CC6r 3               @2:
000CC6r 3                               ; Decrement count1 on the stack.
000CC6r 3  B5 04                        lda 4,x
000CC8r 3  D0 02                        bne @3
000CCAr 3  D6 05                        dec 5,x
000CCCr 3               @3:
000CCCr 3  D6 04                        dec 4,x
000CCEr 3               
000CCEr 3                               ; Decrement count2 on the stack.
000CCEr 3  B5 00                        lda 0,x
000CD0r 3  D0 02                        bne @4
000CD2r 3  D6 01                        dec 1,x
000CD4r 3               @4:
000CD4r 3  D6 00                        dec 0,x
000CD6r 3               
000CD6r 3                               ; Loop around and check again.
000CD6r 3  80 CE                        bra @compare_loop
000CD8r 3               
000CD8r 3               @str1_done:
000CD8r 3                               ; String 1 is out of letters. Check string 2.
000CD8r 3  B5 00                        lda 0,x
000CDAr 3  15 01                        ora 1,x
000CDCr 3  F0 08                        beq @equal      ; Both out of letters
000CDEr 3               
000CDEr 3                               ; Falls into less (str1 is out but str2 has more)
000CDEr 3               @less:
000CDEr 3                               ; Return -1
000CDEr 3  A9 FF                        lda #$FF
000CE0r 3  95 06                        sta 6,x
000CE2r 3  95 07                        sta 7,x
000CE4r 3  80 0C                        bra @done
000CE6r 3               @equal:
000CE6r 3                               ; Return 0
000CE6r 3  74 06                        stz 6,x
000CE8r 3  74 07                        stz 7,x
000CEAr 3  80 06                        bra @done
000CECr 3               @greater:
000CECr 3                               ; Return 1
000CECr 3  A9 01                        lda #1
000CEEr 3  95 06                        sta 6,x
000CF0r 3  74 07                        stz 7,x
000CF2r 3                               ; Falls into @done
000CF2r 3               @done:
000CF2r 3                               ; Remove all but the result from the stack.
000CF2r 3  8A                           txa
000CF3r 3  18                           clc
000CF4r 3  69 06                        adc #6
000CF6r 3  AA                           tax
000CF7r 3               
000CF7r 3  60           z_compare:      rts
000CF8r 3               
000CF8r 3               
000CF8r 3               
000CF8r 3               ; ## COMPILE_COMMA ( xt -- ) "Compile xt"
000CF8r 3               ; ## "compile,"  auto  ANS core ext
000CF8r 3                       ; """https://forth-standard.org/standard/core/COMPILEComma
000CF8r 3                       ; Compile the given xt in the current word definition. It is an
000CF8r 3                       ; error if we are not in the compile state. Because we are using
000CF8r 3                       ; subroutine threading, we can't use , (COMMA) to compile new words
000CF8r 3                       ; the traditional way. By default, native compiled is allowed, unless
000CF8r 3                       ; there is a NN (Never Native) flag associated. If not, we use the
000CF8r 3                       ; value NC_LIMIT (from definitions.tasm) to decide if the code
000CF8r 3                       ; is too large to be natively coded: If the size is larger than
000CF8r 3                       ; NC_LIMIT, we silently use subroutine coding. If the AN (Always
000CF8r 3                       ; Native) flag is set, the word is always natively compiled.
000CF8r 3                       ; """
000CF8r 3               
000CF8r 3               xt_compile_comma:
000CF8r 3  20 rr rr                     jsr underflow_1
000CFBr 3               
000CFBr 3                               ; See if this is an Always Native (AN) word by checking the
000CFBr 3                               ; AN flag. We need nt for this. First, save a copy of xt to
000CFBr 3                               ; the Return Stack
000CFBr 3  B5 01                        lda 1,x                 ; MSB
000CFDr 3  48                           pha
000CFEr 3  B5 00                        lda 0,x
000D00r 3  48                           pha                     ; LSB
000D01r 3               
000D01r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt -- nt )
000D04r 3               
000D04r 3                               ; See if this xt even has an nt.
000D04r 3  B5 00                        lda 0,x
000D06r 3  15 01                        ora 1,x
000D08r 3  D0 03                        bne @check_nt
000D0Ar 3               
000D0Ar 3                               ; No nt in dictionary. Just compile as a JSR.
000D0Ar 3  4C rr rr                     jmp @compile_as_jump
000D0Dr 3               
000D0Dr 3               @check_nt:
000D0Dr 3                               ; put nt away for safe keeping
000D0Dr 3  B5 00                        lda 0,x
000D0Fr 3  85 rr                        sta tmptos
000D11r 3  B5 01                        lda 1,x
000D13r 3  85 rr                        sta tmptos+1
000D15r 3               
000D15r 3                               ; status byte is one further down
000D15r 3  F6 00                        inc 0,x
000D17r 3  D0 02                        bne @1
000D19r 3  F6 01                        inc 1,x                 ; ( nt -- nt+1 )
000D1Br 3               @1:
000D1Br 3  A1 00                        lda (0,x)
000D1Dr 3  85 rr                        sta tmp3                ; keep copy of status byte for NN
000D1Fr 3  29 02                        and #AN                 ; mask all but Always Native (AN) bit
000D21r 3  F0 0D                        beq @compile_check
000D23r 3               
000D23r 3                               ; We're natively compiling no matter what. Get length and
000D23r 3                               ; compile in code. Get the original nt back
000D23r 3  A5 rr                        lda tmptos
000D25r 3  95 00                        sta 0,x
000D27r 3  A5 rr                        lda tmptos+1
000D29r 3  95 01                        sta 1,x
000D2Br 3               
000D2Br 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000D2Er 3               
000D2Er 3  80 27                        bra @compile_as_code
000D30r 3               
000D30r 3               @compile_check:
000D30r 3                               ; See if Native Compile is even alowed by checking the NN
000D30r 3                               ; flag
000D30r 3  A5 rr                        lda tmp3
000D32r 3  29 08                        and #NN
000D34r 3  F0 03                        beq @check_size_limit
000D36r 3               
000D36r 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000D39r 3               
000D39r 3               @check_size_limit:
000D39r 3                               ; Native compile is a legal option, but we need to see what
000D39r 3                               ; limit the user set for size (in nc_limit)
000D39r 3  A5 rr                        lda tmptos
000D3Br 3  95 00                        sta 0,x
000D3Dr 3  A5 rr                        lda tmptos+1
000D3Fr 3  95 01                        sta 1,x
000D41r 3               
000D41r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000D44r 3               
000D44r 3                               ; Check the wordsize MSB against the user-defined limit.
000D44r 3  B5 01                        lda 1,x
000D46r 3  C5 rr                        cmp nc_limit+1
000D48r 3  90 0D                        bcc @compile_as_code    ; user-defined limit MSB
000D4Ar 3  D0 08                        bne @jumpto_compile_as_jump
000D4Cr 3               
000D4Cr 3                               ; Check the wordsize LSB against the user-defined limit.
000D4Cr 3  B5 00                        lda 0,x
000D4Er 3  C5 rr                        cmp nc_limit            ; user-defined limit LSB
000D50r 3  90 05                        bcc @compile_as_code    ; Allow native compiling for less
000D52r 3  F0 03                        beq @compile_as_code    ; than or equal to the limit.
000D54r 3               
000D54r 3               @jumpto_compile_as_jump:
000D54r 3                               ; If the wordsize is greater than the user-defined
000D54r 3                               ; limit, it will be compiled as a subroutine jump.
000D54r 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000D57r 3               
000D57r 3               @compile_as_code:
000D57r 3                               ; We arrive here with the length of the word's code TOS and
000D57r 3                               ; xt on top of the Return Stack. MOVE will need ( xt cp u )
000D57r 3                               ; on the data stack
000D57r 3  CA                           dex
000D58r 3  CA                           dex                     ; ( -- u ? )
000D59r 3  CA                           dex
000D5Ar 3  CA                           dex                     ; ( -- u ? ? )
000D5Br 3               
000D5Br 3  B5 04                        lda 4,x
000D5Dr 3  95 00                        sta 0,x                 ; LSB of u
000D5Fr 3  B5 05                        lda 5,x
000D61r 3  95 01                        sta 1,x                 ; ( -- u ? u )
000D63r 3               
000D63r 3  68                           pla
000D64r 3  95 04                        sta 4,x                 ; LSB of xt
000D66r 3  68                           pla
000D67r 3  95 05                        sta 5,x                 ; ( -- xt ? u )
000D69r 3               
000D69r 3  A5 rr                        lda cp                  ; LSB of cp
000D6Br 3  95 02                        sta 2,x
000D6Dr 3  A5 rr                        lda cp+1
000D6Fr 3  95 03                        sta 3,x                 ; ( -- xt cp u )
000D71r 3               
000D71r 3                               ; --- SPECIAL CASE 1: PREVENT RETURN STACK THRASHINIG ---
000D71r 3               
000D71r 3                               ; Native compiling allows us to strip the stack antics off
000D71r 3                               ; a number of words that use the Return Stack such as >R, R>,
000D71r 3                               ; 2>R and 2R> (but not 2R@ in this version). We compare the
000D71r 3                               ; xt with the contents of the table
000D71r 3  A0 00                        ldy #0
000D73r 3               
000D73r 3               @strip_loop:
000D73r 3  B9 rr rr                     lda @strip_table,y      ; LSB of first word
000D76r 3  D5 04                        cmp 4,x                 ; LSB of xt
000D78r 3  D0 07                        bne @next_entry
000D7Ar 3               
000D7Ar 3                               ; LSB is the same, test MSB
000D7Ar 3  B9 rr rr                     lda @strip_table+1,y
000D7Dr 3  D5 05                        cmp 5,x
000D7Fr 3  F0 0C                        beq @found_entry
000D81r 3               
000D81r 3                               ; MSB is not equal. Pretend though that we've come from LSB
000D81r 3                               ; so we can use the next step for both cases
000D81r 3               @next_entry:
000D81r 3                               ; Not a word that needs stripping, so check next entry in table
000D81r 3                               ; Let's see if we're done with the table (marked by zero entry)
000D81r 3  B9 rr rr                     lda @strip_table,y      ; pointing to LSB
000D84r 3  19 rr rr                     ora @strip_table+1,y    ; get MSB
000D87r 3  F0 22                        beq @underflow_strip    ; table done, let's get out of here
000D89r 3               
000D89r 3  C8                           iny
000D8Ar 3  C8                           iny
000D8Br 3  80 E6                        bra @strip_loop
000D8Dr 3               @found_entry:
000D8Dr 3                               ; This word is one of the ones that needs to have its size
000D8Dr 3                               ; adjusted during native compile. We find the values in the
000D8Dr 3                               ; next table with the same index, which is Y. However, Y is
000D8Dr 3                               ; pointing to the MSB, so we need to go back to the LSB and
000D8Dr 3                               ; halve the index before we can use it.
000D8Dr 3  98                           tya
000D8Er 3  4A                           lsr
000D8Fr 3  A8                           tay
000D90r 3               
000D90r 3                               ; Get the adjustment out of the size table. We were clever
000D90r 3                               ; enough to make sure the cut on both ends of the code is
000D90r 3                               ; is the same size.
000D90r 3  B9 rr rr                     lda @strip_size,y
000D93r 3  85 rr                        sta tmptos              ; save a copy
000D95r 3               
000D95r 3                               ; Adjust xt: Start later
000D95r 3  18                           clc
000D96r 3  75 04                        adc 4,x
000D98r 3  95 04                        sta 4,x
000D9Ar 3  90 02                        bcc @2
000D9Cr 3  F6 05                        inc 5,x                 ; we just care about the carry
000D9Er 3               @2:
000D9Er 3               
000D9Er 3                               ; Adjust u: Quit earlier. Since we cut off the top and the
000D9Er 3                               ; bottom of the code, we have to double the value
000D9Er 3  06 rr                        asl tmptos
000DA0r 3               
000DA0r 3  38                           sec
000DA1r 3  B5 00                        lda 0,x
000DA3r 3  E5 rr                        sbc tmptos
000DA5r 3  95 00                        sta 0,x
000DA7r 3  B0 02                        bcs @3
000DA9r 3  D6 01                        dec 1,x                 ; we just care about the borrow
000DABr 3               @3:
000DABr 3                               ; drop through to underflow check stripping
000DABr 3               
000DABr 3               @underflow_strip:
000DABr 3                               ; --- SPECIAL CASE 2: REMOVE UNDERFLOW CHECKING ---
000DABr 3               
000DABr 3                               ; The user can choose to remove the unterflow testing in those
000DABr 3                               ; words that have the UF flag. This shortens the word by
000DABr 3                               ; 3 bytes if there is no underflow.
000DABr 3               
000DABr 3                               ; See if the user wants underflow stripping turned on
000DABr 3  A5 rr                        lda uf_strip
000DADr 3  05 rr                        ora uf_strip+1
000DAFr 3  F0 1C                        beq @specials_done
000DB1r 3               
000DB1r 3                               ; See if this word even contains underflow checking
000DB1r 3  A5 rr                        lda tmp3
000DB3r 3  29 10                        and #UF
000DB5r 3  F0 16                        beq @specials_done
000DB7r 3               
000DB7r 3                               ; If we arrived here, underflow has to go. It's always 3 bytes
000DB7r 3                               ; long. Note hat PICK is a special case.
000DB7r 3               
000DB7r 3                               ; Adjust xt: Start later
000DB7r 3  18                           clc
000DB8r 3  B5 04                        lda 4,x
000DBAr 3  69 03                        adc #3
000DBCr 3  95 04                        sta 4,x
000DBEr 3  90 02                        bcc @4
000DC0r 3  F6 05                        inc 5,x                  ; we just care about the carry
000DC2r 3               @4:
000DC2r 3                               ; Adjust u: End earlier
000DC2r 3  38                           sec
000DC3r 3  B5 00                        lda 0,x
000DC5r 3  E9 03                        sbc #3
000DC7r 3  95 00                        sta 0,x
000DC9r 3  B0 02                        bcs @5
000DCBr 3  D6 01                        dec 1,x                  ; we just care about the borrow
000DCDr 3               @5:
000DCDr 3               
000DCDr 3                               ; --- END OF SPECIAL CASES ---
000DCDr 3               @specials_done:
000DCDr 3                               ; Store size of area to be copied for calculation of
000DCDr 3                               ; new CP. We have to do this after all of the special cases
000DCDr 3                               ; because they might change the size
000DCDr 3  B5 01                        lda 1,x                 ; MSB
000DCFr 3  48                           pha
000DD0r 3  B5 00                        lda 0,x                 ; LSB
000DD2r 3  48                           pha
000DD3r 3               
000DD3r 3                               ; Enough of this, let's move those bytes already! We have
000DD3r 3                               ; ( xt cp u ) on the stack at this point
000DD3r 3  20 rr rr                     jsr xt_move
000DD6r 3               
000DD6r 3                               ; Update CP
000DD6r 3  18                           clc
000DD7r 3  68                           pla                     ; LSB
000DD8r 3  65 rr                        adc cp
000DDAr 3  85 rr                        sta cp
000DDCr 3               
000DDCr 3  68                           pla                     ; MSB
000DDDr 3  65 rr                        adc cp+1
000DDFr 3  85 rr                        sta cp+1
000DE1r 3               
000DE1r 3  80 2C                        bra @done
000DE3r 3               
000DE3r 3               @strip_table:
000DE3r 3                              ; List of words we strip the Return Stack antics from
000DE3r 3                              ; during native compile, zero terminated. The index here
000DE3r 3                              ; must be the same as for the sizes
000DE3r 3  rr rr rr rr                  .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
000DE7r 3  rr rr        
000DE9r 3  rr rr rr rr                  .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
000DEDr 3  00 00        
000DEFr 3               
000DEFr 3               @strip_size:
000DEFr 3                               ; List of bytes to be stripped from the words that get their
000DEFr 3                               ; Return Stack antics removed during native compile. Index must
000DEFr 3                               ; be the same as for the xts. Zero terminated.
000DEFr 3  04 04 04 06                  .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
000DF3r 3  06 00        
000DF5r 3               
000DF5r 3               @compile_as_jump:
000DF5r 3                               ; Compile xt as a subroutine jump
000DF5r 3  A9 20                        lda #$20
000DF7r 3  92 rr                        sta (cp)
000DF9r 3               
000DF9r 3  A0 01                        ldy #1
000DFBr 3  68                           pla             ; LSB
000DFCr 3  91 rr                        sta (cp),y
000DFEr 3  C8                           iny
000DFFr 3  68                           pla             ; MSB
000E00r 3  91 rr                        sta (cp),y
000E02r 3               
000E02r 3                               ; allot space we just used
000E02r 3  A9 03                        lda #3
000E04r 3  18                           clc
000E05r 3  65 rr                        adc cp
000E07r 3  85 rr                        sta cp
000E09r 3  90 02                        bcc @6
000E0Br 3  E6 rr                        inc cp+1
000E0Dr 3               @6:
000E0Dr 3  E8                           inx             ; drop xt
000E0Er 3  E8                           inx
000E0Fr 3               @done:
000E0Fr 3               z_compile_comma:
000E0Fr 3  60                           rts
000E10r 3               
000E10r 3               
000E10r 3               
000E10r 3               ; ## COMPILE_ONLY ( -- ) "Mark most recent word as COMPILE-ONLY"
000E10r 3               ; ## "compile-only"  tested  Tali Forth
000E10r 3                       ; """Set the Compile Only flag (CO) of the most recently defined
000E10r 3                       ; word.
000E10r 3                       ;
000E10r 3                       ; The alternative way to do this is to define a word
000E10r 3                       ; ?COMPILE that makes sure  we're in compile mode
000E10r 3                       ; """
000E10r 3               
000E10r 3               xt_compile_only:
000E10r 3  20 rr rr                     jsr current_to_dp
000E13r 3  A0 01                        ldy #1          ; offset for status byte
000E15r 3  B1 rr                        lda (dp),y
000E17r 3  09 01                        ora #CO        ; make sure bit 7 is set
000E19r 3  91 rr                        sta (dp),y
000E1Br 3               
000E1Br 3  60           z_compile_only: rts
000E1Cr 3               
000E1Cr 3               
000E1Cr 3               
000E1Cr 3               ; ## CONSTANT ( n "name" -- ) "Define a constant"
000E1Cr 3               ; ## "constant"  auto  ANS core
000E1Cr 3                       ; """https://forth-standard.org/standard/core/CONSTANT
000E1Cr 3                       ;
000E1Cr 3                       ; Forth equivalent is  CREATE , DOES> @  but we do
000E1Cr 3                       ; more in assembler and let CREATE do the heavy lifting.
000E1Cr 3                       ; See http://www.bradrodriguez.com/papers/moving3.htm for
000E1Cr 3                       ; a primer on how this works in various Forths. This is the
000E1Cr 3                       ; same code as VALUE in our case.
000E1Cr 3                       ; """
000E1Cr 3               xt_value:
000E1Cr 3               xt_constant:
000E1Cr 3  20 rr rr                     jsr underflow_1
000E1Fr 3               
000E1Fr 3  20 rr rr                     jsr xt_create
000E22r 3               
000E22r 3                           	; CREATE by default installs a subroutine jump to DOVAR,
000E22r 3                               ; but we want DOCONST for constants. Go back two bytes and
000E22r 3                               ; replace the subroutine jump target
000E22r 3  38                           sec
000E23r 3  A5 rr                        lda cp
000E25r 3  E9 02                        sbc #2
000E27r 3  85 rr                        sta tmp1
000E29r 3  A5 rr                        lda cp+1
000E2Br 3  E9 00                        sbc #0
000E2Dr 3  85 rr                        sta tmp1+1
000E2Fr 3               
000E2Fr 3  A9 rr                        lda #<doconst           ; LSB of DOCONST
000E31r 3  92 rr                        sta (tmp1)
000E33r 3  A0 01                        ldy #1
000E35r 3  A9 rr                        lda #>doconst           ; MSB of DOCONST
000E37r 3  91 rr                        sta (tmp1),y
000E39r 3               
000E39r 3                               ; Now we save the constant number itself in the next cell
000E39r 3  20 rr rr                     jsr xt_comma            ; drop through to adjust_z
000E3Cr 3               
000E3Cr 3               adjust_z:
000E3Cr 3                               ; Now the length of the complete word (z_word) has increased by
000E3Cr 3                               ; two. We need to update that number or else words such as SEE
000E3Cr 3                               ; will ignore the PFA. We use this same routine for VARIABLE,
000E3Cr 3                               ; VALUE and DEFER
000E3Cr 3  20 rr rr                     jsr xt_latestnt         ; gives us ( -- nt )
000E3Fr 3               
000E3Fr 3                               ; z_word is six bytes further down
000E3Fr 3  B5 00                        lda 0,x
000E41r 3  85 rr                        sta tmp1
000E43r 3  B5 01                        lda 1,x
000E45r 3  85 rr                        sta tmp1+1
000E47r 3               
000E47r 3  A0 06                        ldy #6
000E49r 3  B1 rr                        lda (tmp1),y
000E4Br 3  18                           clc
000E4Cr 3  69 02                        adc #2
000E4Er 3  91 rr                        sta (tmp1),y
000E50r 3  C8                           iny
000E51r 3  B1 rr                        lda (tmp1),y
000E53r 3  69 00                        adc #0                  ; only need carry
000E55r 3  91 rr                        sta (tmp1),y
000E57r 3               
000E57r 3  E8                           inx
000E58r 3  E8                           inx
000E59r 3               
000E59r 3               z_value:
000E59r 3  60           z_constant:     rts
000E5Ar 3               
000E5Ar 3               
000E5Ar 3               ; ## COUNT ( c-addr -- addr u ) "Convert character string to normal format"
000E5Ar 3               ; ## "count"  auto  ANS core
000E5Ar 3                       ; """https://forth-standard.org/standard/core/COUNT
000E5Ar 3                       ; Convert old-style character string to address-length pair. Note
000E5Ar 3                       ; that the length of the string c-addr is stored in character length
000E5Ar 3                       ; (8 bit), not cell length (16 bit). This is rarely used these days,
000E5Ar 3                       ; though COUNT can also be used to step through a string character by
000E5Ar 3                       ; character.
000E5Ar 3                       ; """
000E5Ar 3               xt_count:
000E5Ar 3  20 rr rr                     jsr underflow_1
000E5Dr 3               
000E5Dr 3  A1 00                        lda (0,x)       ; Get number of characters (255 max)
000E5Fr 3  A8                           tay
000E60r 3               
000E60r 3                               ; move start address up by one
000E60r 3  F6 00                        inc 0,x         ; LSB
000E62r 3  D0 02                        bne @1
000E64r 3  F6 01                        inc 1,x         ; MSB
000E66r 3               
000E66r 3                               ; save number of characters to stack
000E66r 3               @1:
000E66r 3  98                           tya
000E67r 3  CA                           dex
000E68r 3  CA                           dex
000E69r 3  95 00                        sta 0,x         ; LSB
000E6Br 3  74 01                        stz 1,x         ; MSB, always zero
000E6Dr 3               
000E6Dr 3  60           z_count:        rts
000E6Er 3               
000E6Er 3               
000E6Er 3               ; ## CR ( -- ) "Print a line feed"
000E6Er 3               ; ## "cr"  auto  ANS core
000E6Er 3                       ; """https://forth-standard.org/standard/core/CR"""
000E6Er 3               xt_cr:
000E6Er 3  A9 0A                        lda #AscLF
000E70r 3  20 rr rr                     jsr emit_a
000E73r 3  60           z_cr:           rts
000E74r 3               
000E74r 3               
000E74r 3               ; ## CREATE ( "name" -- ) "Create Dictionary entry for 'name'"
000E74r 3               ; ## "create"  auto  ANS core
000E74r 3                       ; """https://forth-standard.org/standard/core/CREATE
000E74r 3                       ;
000E74r 3                       ; See the drawing in headers.asm for details on the header
000E74r 3                       ; """
000E74r 3               
000E74r 3               xt_create:
000E74r 3                               ; get string
000E74r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
000E77r 3               
000E77r 3                               ; if we were given an empty string, we complain and quit
000E77r 3  B5 00                        lda 0,x
000E79r 3  15 01                        ora 1,x
000E7Br 3  D0 05                        bne @got_name
000E7Dr 3               
000E7Dr 3  A9 05                        lda #err_noname
000E7Fr 3  4C rr rr                     jmp error
000E82r 3               
000E82r 3               @got_name:
000E82r 3                               ; Enforce maximal length of string by overwriting the MSB of
000E82r 3                               ; the length. There is a possible error here: If the string
000E82r 3                               ; is exactly 255 chars long, then a lot of the following
000E82r 3                               ; additions will fail because of wrapping
000E82r 3  74 01                        stz 1,x
000E84r 3               
000E84r 3                               ; Check to see if this name already exists.
000E84r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u )
000E87r 3  20 rr rr                     jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
000E8Ar 3               
000E8Ar 3  B5 00                        lda 0,x
000E8Cr 3  15 01                        ora 1,x
000E8Er 3  F0 1E                        beq @new_name           ; We haven't seen this one before.
000E90r 3               
000E90r 3                               ; This name already exists.  See if we are supposed to print
000E90r 3                               ; the message for it.
000E90r 3  E8                           inx                     ; Drop flag (nt) from find-name.
000E91r 3  E8                           inx
000E92r 3               
000E92r 3                               ; Check bit 7
000E92r 3  24 rr                        bit status
000E94r 3  10 08                        bpl @redefined_name     ; Bit 7 is zero, so print the message.
000E96r 3               
000E96r 3                               ; We aren't supposed to print the redefined message ourselves,
000E96r 3                               ; but we should indicate that it is redefined (for ; to print
000E96r 3                               ; later).
000E96r 3  A9 80                        lda #$80                ; Set bit 7 to indicate dup
000E98r 3  05 rr                        ora status
000E9Ar 3  85 rr                        sta status
000E9Cr 3  80 18                        bra @process_name
000E9Er 3               
000E9Er 3               @redefined_name:
000E9Er 3                               ; Print the message that the name is redefined.
000E9Er 3  A9 02                        lda #str_redefined
000EA0r 3  20 rr rr                     jsr print_string_no_lf
000EA3r 3               
000EA3r 3  20 rr rr                     jsr xt_two_dup           ; ( addr u addr u )
000EA6r 3  20 rr rr                     jsr xt_type
000EA9r 3  20 rr rr                     jsr xt_space
000EACr 3               
000EACr 3  80 08                        bra @process_name
000EAEr 3               
000EAEr 3               @new_name:
000EAEr 3  E8                           inx                     ; Drop flag (0) from find-name.
000EAFr 3  E8                           inx
000EB0r 3  A9 7F                        lda #$7F                ; Clear bit 0 of status to indicate new word.
000EB2r 3  25 rr                        and status
000EB4r 3  85 rr                        sta status
000EB6r 3               
000EB6r 3               @process_name:
000EB6r 3  B5 00                        lda 0,x
000EB8r 3  85 rr                        sta tmp2                ; store length of string in tmp2
000EBAr 3               
000EBAr 3                               ; remember the first free byte of memory as the start of
000EBAr 3                               ; the new word
000EBAr 3  A5 rr                        lda cp
000EBCr 3  85 rr                        sta tmp1
000EBEr 3  A5 rr                        lda cp+1
000EC0r 3  85 rr                        sta tmp1+1
000EC2r 3               
000EC2r 3                               ; We need 8 bytes plus the length of the string for our new header.
000EC2r 3                               ; This is also the offset for the start of the code field (the
000EC2r 3                               ; xt_ label) so we need to remember it. Otherwise, we could
000EC2r 3                               ; just allot the space afterwards
000EC2r 3  B5 00                        lda 0,x
000EC4r 3  18                           clc
000EC5r 3  69 08                        adc #8
000EC7r 3  85 rr                        sta tmp3                ; total header length
000EC9r 3               
000EC9r 3                               ; We need three more bytes for for the hardcoded code field
000EC9r 3                               ; area (CFA), the "payload" of the word which by default will
000EC9r 3                               ; be a subroutine jump to DOVAR
000EC9r 3  18                           clc
000ECAr 3  69 03                        adc #3
000ECCr 3               
000ECCr 3                               ; We overwrite the length of the string returned by PARSE-NAME
000ECCr 3                               ; and then call ALLOT
000ECCr 3  95 00                        sta 0,x
000ECEr 3  74 01                        stz 1,x         ; max header size is 255 chars
000ED0r 3  20 rr rr                     jsr xt_allot    ; ( addr )
000ED3r 3               
000ED3r 3                               ; Get the CURRENT dictionary pointer.
000ED3r 3  20 rr rr                     jsr current_to_dp
000ED6r 3               
000ED6r 3                               ; Now we walk through the header with Y as the index, adding
000ED6r 3                               ; information byte-by-byte
000ED6r 3  A0 00                        ldy #0
000ED8r 3               
000ED8r 3                               ; HEADER BYTE 0: Length of string
000ED8r 3  A5 rr                        lda tmp2
000EDAr 3  91 rr                        sta (tmp1),y
000EDCr 3               
000EDCr 3                               ; HEADER BYTE 1: Status byte. By default, we set all new words
000EDCr 3                               ; to "never native", user will have to decide if they should
000EDCr 3                               ; be inlined
000EDCr 3  A9 08                        lda #NN
000EDEr 3               
000EDEr 3                               ; Also, words defined by CREATE are marked in the header has
000EDEr 3                               ; having a Code Field Area (CFA), which is a bit tricky for
000EDEr 3                               ; Subroutine Threaded Code (STC). We do this so >BODY works
000EDEr 3                               ; correctly with DOES> and CREATE. See the discussion at
000EDEr 3                               ; http://forum.6502.org/viewtopic.php?f=9&t=5182 for details
000EDEr 3  09 20                        ora #HC
000EE0r 3  C8                           iny
000EE1r 3  91 rr                        sta (tmp1),y
000EE3r 3  C8                           iny
000EE4r 3               
000EE4r 3                               ; HEADER BYTE 2,3: Next header. This is the current last word
000EE4r 3                               ; in the Dictionary
000EE4r 3  A5 rr                        lda dp
000EE6r 3  91 rr                        sta (tmp1),y
000EE8r 3  C8                           iny
000EE9r 3  A5 rr                        lda dp+1
000EEBr 3  91 rr                        sta (tmp1),y
000EEDr 3  C8                           iny
000EEEr 3               
000EEEr 3                               ; Interlude: Make old CP new DP (new start of Dictionary)
000EEEr 3  A5 rr                        lda tmp1+1
000EF0r 3  85 rr                        sta dp+1
000EF2r 3  A5 rr                        lda tmp1
000EF4r 3  85 rr                        sta dp
000EF6r 3               
000EF6r 3                               ; HEADER BYTE 4,5: Start of the code field ("xt_" of this word).
000EF6r 3                               ; This begins after the header so we take the length of the
000EF6r 3                               ; header, which we cleverly saved in tmp3, and use it as an
000EF6r 3                               ; offset to the address of the start of the word. We come here
000EF6r 3                               ; with tmp1 in A
000EF6r 3  18                           clc
000EF7r 3  65 rr                        adc tmp3        ; add total header length
000EF9r 3  91 rr                        sta (tmp1),y
000EFBr 3  48                           pha             ; we need this in the next step
000EFCr 3  C8                           iny
000EFDr 3               
000EFDr 3  A5 rr                        lda tmp1+1
000EFFr 3  69 00                        adc #0          ; only need the carry
000F01r 3  91 rr                        sta (tmp1),y
000F03r 3  C8                           iny
000F04r 3               
000F04r 3                               ; HEADER BYTE 6,7: End of code ("z_" of this word). By default,
000F04r 3                               ; we execute a jump to the DOVAR routine, so we need to move three
000F04r 3                               ; bytes down, and then one more byte so that the z_ label points
000F04r 3                               ; to the (still fictional) RTS instruction for correct compilation
000F04r 3  68                           pla             ; LSB of "z_" address
000F05r 3  18                           clc
000F06r 3  69 03                        adc #3
000F08r 3  91 rr                        sta (tmp1),y
000F0Ar 3               
000F0Ar 3  88                           dey             ; get the MSB of xt back
000F0Br 3  B1 rr                        lda (tmp1),y
000F0Dr 3  69 00                        adc #0          ; only need the carry
000F0Fr 3  C8                           iny
000F10r 3  C8                           iny
000F11r 3  91 rr                        sta (tmp1),y
000F13r 3  C8                           iny
000F14r 3               
000F14r 3                               ; HEADER BYTE 8: Start of name string. The address is TOS, the
000F14r 3                               ; length in tmp2. We subtract 8 from the address so we can
000F14r 3                               ; use the same loop index, which is already 8 byte ahead at
000F14r 3                               ; this point
000F14r 3  B5 00                        lda 0,x
000F16r 3  38                           sec
000F17r 3  E9 08                        sbc #8
000F19r 3  85 rr                        sta tmptos
000F1Br 3               
000F1Br 3  B5 01                        lda 1,x
000F1Dr 3  E9 00                        sbc #0          ; only need carry
000F1Fr 3  85 rr                        sta tmptos+1
000F21r 3               
000F21r 3               @name_loop:
000F21r 3  B1 rr                        lda (tmptos),y
000F23r 3               
000F23r 3                               ; Make sure it goes into the dictionary in lower case.
000F23r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
000F25r 3  B0 07                        bcs @store_name
000F27r 3  C9 41                        cmp #$41        ; ASCII 'A'
000F29r 3  90 03                        bcc @store_name
000F2Br 3               
000F2Br 3                               ; An uppercase letter has been located. Make it
000F2Br 3                               ; lowercase.
000F2Br 3  18                           clc
000F2Cr 3  69 20                        adc #$20
000F2Er 3               
000F2Er 3                               ; Fall into @store_name.
000F2Er 3               
000F2Er 3               @store_name:
000F2Er 3  91 rr                        sta (tmp1),y
000F30r 3  C8                           iny
000F31r 3  C6 rr                        dec tmp2
000F33r 3  D0 EC                        bne @name_loop
000F35r 3               
000F35r 3                               ; After thename string comes the code field, starting at the
000F35r 3                               ; current xt of this word, which is initially a jump to the
000F35r 3                               ; subroutine to DOVAR. We code this jump by hand
000F35r 3  A9 20                        lda #$20        ; opcode of JSR
000F37r 3  91 rr                        sta (tmp1),y
000F39r 3  C8                           iny
000F3Ar 3  A9 rr                        lda #<dovar
000F3Cr 3  91 rr                        sta (tmp1),y
000F3Er 3  C8                           iny
000F3Fr 3  A9 rr                        lda #>dovar
000F41r 3  91 rr                        sta (tmp1),y
000F43r 3               
000F43r 3                               ; Update the CURRENT wordlist with the new DP.
000F43r 3                               ; We do this down here because this routine uses Y.
000F43r 3  20 rr rr                     jsr dp_to_current
000F46r 3               
000F46r 3                               ; And we're done. Restore stack
000F46r 3  E8                           inx
000F47r 3  E8                           inx
000F48r 3               
000F48r 3  60           z_create:       rts
000F49r 3               
000F49r 3               
000F49r 3               
000F49r 3               ; ## D_MINUS ( d d -- d ) "Subtract two double-celled numbers"
000F49r 3               ; ## "d-"  auto  ANS double
000F49r 3                       ; """https://forth-standard.org/standard/double/DMinus"""
000F49r 3               
000F49r 3               xt_d_minus:
000F49r 3  20 rr rr                     jsr underflow_4 ; two double numbers
000F4Cr 3               
000F4Cr 3  38                           sec
000F4Dr 3               
000F4Dr 3  B5 06                        lda 6,x         ; LSB of lower word
000F4Fr 3  F5 02                        sbc 2,x
000F51r 3  95 06                        sta 6,x
000F53r 3               
000F53r 3  B5 07                        lda 7,x         ; MSB of lower word
000F55r 3  F5 03                        sbc 3,x
000F57r 3  95 07                        sta 7,x
000F59r 3               
000F59r 3  B5 04                        lda 4,x         ; LSB of upper word
000F5Br 3  F5 00                        sbc 0,x
000F5Dr 3  95 04                        sta 4,x
000F5Fr 3               
000F5Fr 3  B5 05                        lda 5,x         ; MSB of upper word
000F61r 3  F5 01                        sbc 1,x
000F63r 3  95 05                        sta 5,x
000F65r 3               
000F65r 3  E8                           inx
000F66r 3  E8                           inx
000F67r 3  E8                           inx
000F68r 3  E8                           inx
000F69r 3               
000F69r 3  60           z_d_minus:      rts
000F6Ar 3               
000F6Ar 3               
000F6Ar 3               
000F6Ar 3               ; ## D_PLUS ( d d -- d ) "Add two double-celled numbers"
000F6Ar 3               ; ## "d+"  auto  ANS double
000F6Ar 3                       ; """https://forth-standard.org/standard/double/DPlus"""
000F6Ar 3               
000F6Ar 3               xt_d_plus:
000F6Ar 3  20 rr rr                     jsr underflow_4 ; two double numbers
000F6Dr 3               
000F6Dr 3  18                           clc
000F6Er 3  B5 02                        lda 2,x         ; LSB of lower word
000F70r 3  75 06                        adc 6,x
000F72r 3  95 06                        sta 6,x
000F74r 3               
000F74r 3  B5 03                        lda 3,x         ; MSB of lower word
000F76r 3  75 07                        adc 7,x
000F78r 3  95 07                        sta 7,x
000F7Ar 3               
000F7Ar 3  B5 00                        lda 0,x         ; LSB of upper word
000F7Cr 3  75 04                        adc 4,x
000F7Er 3  95 04                        sta 4,x
000F80r 3               
000F80r 3  B5 01                        lda 1,x         ; MSB of upper word
000F82r 3  75 05                        adc 5,x
000F84r 3  95 05                        sta 5,x
000F86r 3               
000F86r 3  E8                           inx
000F87r 3  E8                           inx
000F88r 3  E8                           inx
000F89r 3  E8                           inx
000F8Ar 3               
000F8Ar 3  60           z_d_plus:       rts
000F8Br 3               
000F8Br 3               
000F8Br 3               
000F8Br 3               ; ## D_TO_S ( d -- n ) "Convert a double number to single"
000F8Br 3               ; ## "d>s"  auto  ANS double
000F8Br 3                       ; """https://forth-standard.org/standard/double/DtoS
000F8Br 3                       ; Though this is basically just DROP, we keep it
000F8Br 3                       ; separate so we can test for underflow
000F8Br 3                       ; """
000F8Br 3               
000F8Br 3               xt_d_to_s:
000F8Br 3  20 rr rr                     jsr underflow_2
000F8Er 3               
000F8Er 3  E8                           inx
000F8Fr 3  E8                           inx
000F90r 3               
000F90r 3  60           z_d_to_s:       rts
000F91r 3               
000F91r 3               
000F91r 3               
000F91r 3               ; ## DABS ( d -- d ) "Return the absolute value of a double"
000F91r 3               ; ## "dabs"  auto  ANS double
000F91r 3                       ; """https://forth-standard.org/standard/double/DABS"""
000F91r 3               
000F91r 3               xt_dabs:
000F91r 3  20 rr rr                     jsr underflow_2 ; double number
000F94r 3               
000F94r 3  B5 01                        lda 1,x         ; MSB of high cell
000F96r 3  10 17                        bpl @done       ; positive, we get off light
000F98r 3               
000F98r 3                               ; negative, calculate 0 - d
000F98r 3  A0 00                        ldy #0
000F9Ar 3  38                           sec
000F9Br 3               
000F9Br 3  98                           tya
000F9Cr 3  F5 02                        sbc 2,x         ; LSB of low cell
000F9Er 3  95 02                        sta 2,x
000FA0r 3               
000FA0r 3  98                           tya
000FA1r 3  F5 03                        sbc 3,x         ; MSB of low cell
000FA3r 3  95 03                        sta 3,x
000FA5r 3               
000FA5r 3  98                           tya
000FA6r 3  F5 00                        sbc 0,x         ; LSB of high cell
000FA8r 3  95 00                        sta 0,x
000FAAr 3               
000FAAr 3  98                           tya
000FABr 3  F5 01                        sbc 1,x         ; MSB of high cell
000FADr 3  95 01                        sta 1,x
000FAFr 3               @done:
000FAFr 3  60           z_dabs:         rts
000FB0r 3               
000FB0r 3               
000FB0r 3               
000FB0r 3               ; ## DECIMAL ( -- ) "Change radix base to decimal"
000FB0r 3               ; ## "decimal"  auto  ANS core
000FB0r 3                       ; """https://forth-standard.org/standard/core/DECIMAL"""
000FB0r 3               xt_decimal:
000FB0r 3  A9 0A                        lda #10
000FB2r 3  85 rr                        sta base
000FB4r 3  64 rr                        stz base+1              ; paranoid
000FB6r 3               
000FB6r 3  60           z_decimal:      rts
000FB7r 3               
000FB7r 3               
000FB7r 3               ; ## DEFER ( "name" -- ) "Create a placeholder for words by name"
000FB7r 3               ; ## "defer"  auto  ANS core ext
000FB7r 3                       ; """https://forth-standard.org/standard/core/DEFER
000FB7r 3                       ; Reserve an name that can be linked to various xt by IS.
000FB7r 3                       ;
000FB7r 3                       ; The ANS reference implementation is
000FB7r 3                       ;       CREATE ['] ABORT , DOES> @ EXECUTE ;
000FB7r 3                       ; But we use this routine as a low-level word so things go faster
000FB7r 3               
000FB7r 3               xt_defer:
000FB7r 3  20 rr rr                     jsr xt_create
000FBAr 3               
000FBAr 3                               ; CREATE by default installs a subroutine jump to DOVAR,
000FBAr 3                               ; but we actually want DODEFER this time. Go back two
000FBAr 3                               ; bytes and repace the subroutine jump target
000FBAr 3  A5 rr                        lda cp          ; LSB
000FBCr 3  38                           sec
000FBDr 3  E9 02                        sbc #2
000FBFr 3  85 rr                        sta tmp1
000FC1r 3               
000FC1r 3  A5 rr                        lda cp+1        ; MSB
000FC3r 3  E9 00                        sbc #0          ; we only care about the borrow
000FC5r 3  85 rr                        sta tmp1+1
000FC7r 3               
000FC7r 3                               ; Save the target address
000FC7r 3  A0 00                        ldy #0
000FC9r 3  A9 rr                        lda #<dodefer   ; LSB
000FCBr 3  91 rr                        sta (tmp1),y
000FCDr 3  C8                           iny
000FCEr 3  A9 rr                        lda #>dodefer   ; MSB
000FD0r 3  91 rr                        sta (tmp1),y
000FD2r 3               
000FD2r 3               
000FD2r 3                               ; DODEFER executes the next address it finds after
000FD2r 3                               ; its call. As default, we include the error
000FD2r 3                               ; "Defer not defined"
000FD2r 3  A9 rr                        lda #<defer_error
000FD4r 3  92 rr                        sta (cp)
000FD6r 3  E6 rr                        inc cp
000FD8r 3  D0 02                        bne @1
000FDAr 3  E6 rr                        inc cp+1
000FDCr 3               @1:
000FDCr 3  A9 rr                        lda #>defer_error
000FDEr 3  92 rr                        sta (cp)
000FE0r 3  E6 rr                        inc cp
000FE2r 3  D0 02                        bne @2
000FE4r 3  E6 rr                        inc cp+1
000FE6r 3               @2:
000FE6r 3  20 rr rr                     jsr adjust_z    ; adjust header to correct length
000FE9r 3               
000FE9r 3  60           z_defer:        rts
000FEAr 3               
000FEAr 3               
000FEAr 3               
000FEAr 3               ; ## DEFER_FETCH ( xt1 -- xt2 ) "Get the current XT for a deferred word"
000FEAr 3               ; ## "defer@"  auto  ANS core ext
000FEAr 3                       ; """http://forth-standard.org/standard/core/DEFERFetch"""
000FEAr 3               
000FEAr 3               xt_defer_fetch:
000FEAr 3                               ; No underflow checking as >BODY does it.
000FEAr 3  20 rr rr                     jsr xt_to_body
000FEDr 3  20 rr rr                     jsr xt_fetch
000FF0r 3  60           z_defer_fetch:  rts
000FF1r 3               
000FF1r 3               
000FF1r 3               
000FF1r 3               ; ## DEFER_STORE ( xt2 x1 -- ) "Set xt1 to execute xt2"
000FF1r 3               ; ## "defer!"  auto  ANS core ext
000FF1r 3                       ; """http://forth-standard.org/standard/core/DEFERStore"""
000FF1r 3               
000FF1r 3               xt_defer_store:
000FF1r 3                               ; No underflow checking as >BODY and ! do it.
000FF1r 3  20 rr rr                     jsr xt_to_body
000FF4r 3  20 rr rr                     jsr xt_store
000FF7r 3  60           z_defer_store:  rts
000FF8r 3               
000FF8r 3               
000FF8r 3               
000FF8r 3               ; ## DEFINITIONS ( -- ) "Make first wordlist in search order the current wordlist"
000FF8r 3               ; ## "definitions" auto ANS search
000FF8r 3               xt_definitions:
000FF8r 3  A0 1F                        ldy #search_order_offset    ; Transfer byte variable
000FFAr 3  B1 rr                        lda (up),y                  ; SEARCH_ORDER[0] to
000FFCr 3  A0 04                        ldy #current_offset         ; byte variable CURRENT.
000FFEr 3  91 rr                        sta (up),y
001000r 3  60           z_definitions:  rts
001001r 3               
001001r 3               
001001r 3               ; ## DEPTH ( -- u ) "Get number of cells (not bytes) used by stack"
001001r 3               ; ## "depth"  auto  ANS core
001001r 3                       ; """https://forth-standard.org/standard/core/DEPTH"""
001001r 3               xt_depth:
001001r 3  A9 FF                        lda #dsp0
001003r 3  86 rr                        stx tmpdsp
001005r 3  38                           sec
001006r 3  E5 rr                        sbc tmpdsp
001008r 3               
001008r 3                               ; divide by two because each cell is two bytes
001008r 3  4A                           lsr
001009r 3               
001009r 3  CA                           dex
00100Ar 3  CA                           dex
00100Br 3  95 00                        sta 0,x
00100Dr 3  74 01                        stz 1,x
00100Fr 3               
00100Fr 3  60           z_depth:        rts
001010r 3               
001010r 3               
001010r 3               ; ## DIGIT_QUESTION ( char -- u f | char f ) "Convert ASCII char to number"
001010r 3               ; ## "digit?"  auto  Tali Forth
001010r 3                       ; """Inspired by the pForth instruction DIGIT, see
001010r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001010r 3                       ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to
001010r 3                       ; pForth, we get the base (radix) ourselves instead of having the
001010r 3                       ; user provide it. There is no standard name for this routine, which
001010r 3                       ; itself is not ANS; we use DIGIT? following pForth and Gforth.
001010r 3                       ; """
001010r 3               
001010r 3               xt_digit_question:
001010r 3  20 rr rr                     jsr underflow_1
001013r 3               
001013r 3                               ; one way or another, we're going to need room for the
001013r 3                               ; flag on the stack
001013r 3  CA                           dex
001014r 3  CA                           dex
001015r 3  74 00                        stz 0,x                 ; default flag is failure
001017r 3  74 01                        stz 1,x
001019r 3  74 03                        stz 3,x                 ; paranoid
00101Br 3               
00101Br 3                               ; Check the character, now in the LSB of NOS. First, make
00101Br 3                               ; sure we're not below the ASCII code for "0"
00101Br 3  B5 02                        lda 2,x
00101Dr 3  C9 30                        cmp #'0'
00101Fr 3  90 23                        bcc @done               ; failure flag already set
001021r 3               
001021r 3                               ; Next, see if we are below "9", because that would make
001021r 3                               ; this a normal number
001021r 3  C9 3A                        cmp #'9'+1               ; this is actually ":"
001023r 3  90 12                        bcc @checkbase
001025r 3               
001025r 3                               ; Well, then let's see if this is the gap between "9" and "A"
001025r 3                               ; so we can treat the whole range as a number
001025r 3  C9 41                        cmp #'A'
001027r 3  90 1B                        bcc @done               ; failure flag is already set
001029r 3               
001029r 3                               ; probably a letter, so we make sure it is uppercase
001029r 3  C9 61                        cmp #'a'
00102Br 3  90 07                        bcc @case_done          ; not lower case, too low
00102Dr 3  C9 7B                        cmp #'z'+1
00102Fr 3  B0 03                        bcs @case_done          ; not lower case, too high
001031r 3               
001031r 3  18                           clc                     ; just right
001032r 3  69 E0                        adc #$e0                ; offset to upper case (wraps)
001034r 3               
001034r 3               @case_done:
001034r 3                               ; get rid of the gap between "9" and "A" so we can treat
001034r 3                               ; the whole range as one number
001034r 3  38                           sec
001035r 3  E9 07                        sbc #7                  ; fall through to @checkbase
001037r 3               
001037r 3               @checkbase:
001037r 3                               ; we have a number, now see if it falls inside the range
001037r 3                               ; provided by BASE
001037r 3  38                           sec
001038r 3  E9 30                        sbc #'0'                 ; this is also the conversion step
00103Ar 3  C5 rr                        cmp base
00103Cr 3  B0 06                        bcs @done               ; already have false flag
00103Er 3               
00103Er 3                               ; Found a legal number
00103Er 3  95 02                        sta 2,x                 ; put number in NOS
001040r 3  D6 00                        dec 0,x                 ; set success flag
001042r 3  D6 01                        dec 1,x
001044r 3               
001044r 3               @done:
001044r 3               z_digit_question:
001044r 3  60                           rts
001045r 3               
001045r 3               
001045r 3               ; ## DISASM ( addr u -- ) "Disassemble a block of memory"
001045r 3               ; ## "disasm"  tested  Tali Forth
001045r 3                       ; """Convert a segment of memory to assembler output. This
001045r 3                       ; word is vectored so people can add their own disassembler.
001045r 3                       ; Natively, this produces Simpler Assembly Notation (SAN)
001045r 3                       ; code, see the section on The Disassembler in the manual and
001045r 3                       ; the file disassembler.asm for more details.
001045r 3                       ; """
001045r 3               xt_disasm:
001045r 3  20 rr rr                     jsr underflow_2
001048r 3                           .ifdef disassembler
001048r 3                               jsr disassembler
001048r 3                           .endif
001048r 3               
001048r 3  60           z_disasm:       rts
001049r 3               
001049r 3               
001049r 3               ; ## DNEGATE ( d -- d ) "Negate double cell number"
001049r 3               ; ## "dnegate"  auto  ANS double
001049r 3                       ; """https://forth-standard.org/standard/double/DNEGATE"""
001049r 3               xt_dnegate:
001049r 3  20 rr rr                     jsr underflow_2 ; double number
00104Cr 3               
00104Cr 3  A0 00             		ldy #0
00104Er 3  38                           sec
00104Fr 3               
00104Fr 3  98                           tya
001050r 3  F5 02                        sbc 2,x         ; LSB of low cell
001052r 3  95 02                        sta 2,x
001054r 3               
001054r 3  98                           tya
001055r 3  F5 03                        sbc 3,x         ; MSB of low cell
001057r 3  95 03                        sta 3,x
001059r 3               
001059r 3  98                           tya
00105Ar 3  F5 00                        sbc 0,x         ; LSB of high cell
00105Cr 3  95 00                        sta 0,x
00105Er 3               
00105Er 3  98                           tya
00105Fr 3  F5 01                        sbc 1,x         ; MSB of high cell
001061r 3  95 01                        sta 1,x
001063r 3               
001063r 3  60           z_dnegate:      rts
001064r 3               
001064r 3               
001064r 3               ; ## QUESTION_DO ( limit start -- )(R: -- limit start) "Conditional loop start"
001064r 3               ; ## "?do"  auto  ANS core ext
001064r 3                       ; """https://forth-standard.org/standard/core/qDO"""
001064r 3               xt_question_do:
001064r 3                               ; ?DO shares most of its code with DO. We use the tmp1 flag
001064r 3                               ; to mark which is which
001064r 3  A9 FF                        lda #$ff                ; -1 is ?DO, jump to common code
001066r 3  85 rr                        sta tmp1
001068r 3  80 02                        bra do_common           ; skip flag for DO
00106Ar 3               
00106Ar 3               ; ## DO ( limit start -- )(R: -- limit start)  "Start a loop"
00106Ar 3               ; ## "do"  auto  ANS core
00106Ar 3                       ; """https://forth-standard.org/standard/core/DO
00106Ar 3                       ;
00106Ar 3                       ; Compile-time part of DO. Could be realized in Forth as
00106Ar 3                       ;       : DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY
00106Ar 3                       ; but we do it in assembler for speed. To work with LEAVE, we compile
00106Ar 3                       ; a routine that pushes the end address to the Return Stack at run
00106Ar 3                       ; time. This is based on a suggestion by Garth Wilson, see
00106Ar 3                       ; the Control Flow section of the manual for details.
00106Ar 3                       ;
00106Ar 3                       ; This may not be native compile. Don't check for a stack underflow
00106Ar 3                       ; """
00106Ar 3               
00106Ar 3               xt_do:
00106Ar 3                               ; DO and ?DO share most of their code, use tmp1 as a flag.
00106Ar 3  64 rr                        stz tmp1                ; 0 is DO, drop through to DO_COMMON
00106Cr 3               do_common:
00106Cr 3                               ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
00106Cr 3                               ; compile the address we need to LDA at runtime
00106Cr 3  CA                           dex
00106Dr 3  CA                           dex
00106Er 3  A5 rr                        lda cp
001070r 3  95 00                        sta 0,x                 ; LSB
001072r 3  A5 rr                        lda cp+1
001074r 3  95 01                        sta 1,x                 ; MSB   ( limit start here )
001076r 3               
001076r 3                               ; now we compile six dummy bytes that LOOP/+LOOP will
001076r 3                               ; replace by the actual LDA/PHA instructions
001076r 3  A9 05                        lda #5                  ; we don't really care about the value,
001078r 3  A8                           tay                     ; so we use 5 to be tricky
001079r 3               @loop:
001079r 3  91 rr                        sta (cp),y
00107Br 3  88                           dey
00107Cr 3  10 FB                        bpl @loop
00107Er 3               
00107Er 3                               ; update CP
00107Er 3  1A                           inc             ; we used 5 as a dummy value, this is why
00107Fr 3  18                           clc
001080r 3  65 rr                        adc cp
001082r 3  85 rr                        sta cp
001084r 3  90 02                        bcc @1
001086r 3  E6 rr                        inc cp+1
001088r 3               @1:
001088r 3                               ; compile the (?DO) portion of ?DO if appropriate
001088r 3  A5 rr                        lda tmp1
00108Ar 3  F0 17                        beq @compile_do
00108Cr 3               
00108Cr 3                               ; We came from ?DO, so compile its runtime first. We do
00108Cr 3                               ; this with a quick loop because we know it has to be
00108Cr 3                               ; Always Native anyway
00108Cr 3  A0 14                        ldy #question_do_runtime_end-question_do_runtime
00108Er 3  5A                           phy             ; save counter to calculate new CP
00108Fr 3               @2:
00108Fr 3  B9 rr rr                     lda question_do_runtime,y
001092r 3  91 rr                        sta (cp),y
001094r 3  88                           dey
001095r 3  10 F8                        bpl @2
001097r 3               
001097r 3                               ; adjust CP
001097r 3  68                           pla             ; retrieve counter
001098r 3  18                           clc
001099r 3  65 rr                        adc cp
00109Br 3  85 rr                        sta cp
00109Dr 3  A5 rr                        lda cp+1
00109Fr 3  69 00                        adc #0          ; only care about carry
0010A1r 3  85 rr                        sta cp+1        ; fall through to @compile_do
0010A3r 3               
0010A3r 3               @compile_do:
0010A3r 3                               ; compile runtime part of DO.
0010A3r 3  A0 24                        ldy #do_runtime_end-do_runtime  ; counter
0010A5r 3  5A                           phy             ; save counter to calculate new CP
0010A6r 3               @3:
0010A6r 3  B9 rr rr                     lda do_runtime,y
0010A9r 3  91 rr                        sta (cp),y
0010ABr 3  88                           dey
0010ACr 3  10 F8                        bpl @3
0010AEr 3               
0010AEr 3                               ; adjust CP
0010AEr 3  68                           pla             ; retrieve counter
0010AFr 3  18                           clc
0010B0r 3  65 rr                        adc cp
0010B2r 3  85 rr                        sta cp
0010B4r 3  A5 rr                        lda cp+1
0010B6r 3  69 00                        adc #0          ; only care about carry
0010B8r 3  85 rr                        sta cp+1
0010BAr 3               
0010BAr 3                               ; HERE, hardcoded for speed. We put it on the Data Stack
0010BAr 3                               ; where LOOP/+LOOP takes it from. Note this has nothing to
0010BAr 3                               ; do with the HERE we're saving for LEAVE
0010BAr 3  CA                           dex
0010BBr 3  CA                           dex
0010BCr 3  A5 rr                        lda cp          ; LSB
0010BEr 3  95 00                        sta 0,x
0010C0r 3  A5 rr                        lda cp+1        ; MSB
0010C2r 3  95 01                        sta 1,x
0010C4r 3               z_question_do:
0010C4r 3  60           z_do:           rts
0010C5r 3               
0010C5r 3               
0010C5r 3               do_runtime:
0010C5r 3                       ; """Runtime routine for DO loop. Note that ANS loops quit when the
0010C5r 3                       ; boundry of limit-1 and limit is reached, a different mechanism than
0010C5r 3                       ; the FIG Forth loop (you can see which version you have by running
0010C5r 3                       ; a loop with start and limit as the same value, for instance
0010C5r 3                       ; 0 0 DO -- these will walk through the number space). We use a
0010C5r 3                       ; "fudge factor" for the limit that makes the Overflow Flag trip when
0010C5r 3                       ; it is reached; see http://forum.6502.org/viewtopic.php?f=9&t=2026
0010C5r 3                       ; for further discussion of this. The source given there for
0010C5r 3                       ; this idea is Laxen & Perry F83. -- This routine is called (DO)
0010C5r 3                       ; in some Forths. Usually, we would define this as a separate word
0010C5r 3                       ; and compile it with COMPILE, and the Always Native (AN) flag.
0010C5r 3                       ; However, we can do it faster if we just copy the bytes
0010C5r 3                       ; of this routine with a simple loop in DO.
0010C5r 3                       ; """
0010C5r 3                               ; First step: create fudge factor (FUFA) by subtracting the
0010C5r 3                               ; limit from $8000, the number that will trip the overflow
0010C5r 3                               ; flag
0010C5r 3  38                           sec
0010C6r 3  A9 00                        lda #0
0010C8r 3  F5 02                        sbc 2,x         ; LSB of limit
0010CAr 3  95 02                        sta 2,x         ; save FUFA for later use
0010CCr 3               
0010CCr 3  A9 80                        lda #$80
0010CEr 3  F5 03                        sbc 3,x         ; MSB of limit
0010D0r 3  95 03                        sta 3,x         ; save FUFA for later use
0010D2r 3  48                           pha             ; FUFA replaces limit on R stack
0010D3r 3  B5 02                        lda 2,x         ; LSB of limit
0010D5r 3  48                           pha
0010D6r 3               
0010D6r 3                               ; Second step: index is FUFA plus original index
0010D6r 3  18                           clc
0010D7r 3  B5 00                        lda 0,x         ; LSB of original index
0010D9r 3  75 02                        adc 2,x         ; add LSB of FUFA
0010DBr 3  95 00                        sta 0,x
0010DDr 3  B5 01                        lda 1,x         ; MSB of orginal index
0010DFr 3  75 03                        adc 3,x         ; add MSB of FUFA
0010E1r 3  48                           pha
0010E2r 3  B5 00                        lda 0,x         ; LSB of index
0010E4r 3  48                           pha
0010E5r 3               
0010E5r 3                               ; we've saved the FUFA on the NOS of the R stack, so we can
0010E5r 3                               ; use it later. Clean the Data Stack
0010E5r 3  E8                           inx
0010E6r 3  E8                           inx
0010E7r 3  E8                           inx
0010E8r 3  E8                           inx             ; no RTS because this is copied into code
0010E9r 3               do_runtime_end:
0010E9r 3               
0010E9r 3               question_do_runtime:
0010E9r 3               
0010E9r 3                       ; """This is called (?DO) in some Forths. See the explanation at
0010E9r 3                       ; do_runtime for the background on this design
0010E9r 3                       ; """
0010E9r 3                               ; see if TOS and NOS are equal. Change this to assembler
0010E9r 3                               ; for speed
0010E9r 3  20 rr rr                     jsr xt_two_dup          ; ( n1 n2 n1 n2 )
0010ECr 3  20 rr rr                     jsr xt_equal            ; ( -- n1 n2 f )
0010EFr 3               
0010EFr 3  B5 00                        lda 0,x
0010F1r 3  15 01                        ora 1,x
0010F3r 3  F0 06                        beq @do_do
0010F5r 3               
0010F5r 3                               ; We're equal, so dump everything and jump beyond the loop.
0010F5r 3                               ; But first, dump six entries off of the Data Stack
0010F5r 3  8A                           txa
0010F6r 3  18                           clc
0010F7r 3  69 06                        adc #6
0010F9r 3  AA                           tax
0010FAr 3               
0010FAr 3                               ; Then abort the whole loop
0010FAr 3  60                           rts
0010FBr 3               @do_do:
0010FBr 3  E8                           inx             ; clear flag from EQUAL off stack
0010FCr 3  E8                           inx             ; no RTS because this is copied into code
0010FDr 3               question_do_runtime_end:
0010FDr 3               
0010FDr 3               
0010FDr 3               
0010FDr 3               ; ## DOES ( -- ) "Add payload when defining new words"
0010FDr 3               ; ## "does>"  auto  ANS core
0010FDr 3                       ; """https://forth-standard.org/standard/core/DOES
0010FDr 3                       ; Create the payload for defining new defining words. See
0010FDr 3                       ; http://www.bradrodriguez.com/papers/moving3.htm and
0010FDr 3                       ; the Developer Guide in the manual for a discussion of
0010FDr 3                       ; DOES>'s internal workings. This uses tmp1 and tmp2.
0010FDr 3                       ; """
0010FDr 3               
0010FDr 3               xt_does:
0010FDr 3                               ; compile a subroutine jump to runtime of DOES>
0010FDr 3  A0 rr                        ldy #>does_runtime
0010FFr 3  A9 rr                        lda #<does_runtime
001101r 3  20 rr rr                     jsr cmpl_subroutine
001104r 3               
001104r 3                               ; compile a subroutine jump to DODOES. In traditional
001104r 3                               ; terms, this is the Code Field Area (CFA) of the new
001104r 3                               ; word
001104r 3  A0 rr                        ldy #>dodoes
001106r 3  A9 rr                        lda #<dodoes
001108r 3  20 rr rr                     jsr cmpl_subroutine
00110Br 3               
00110Br 3  60           z_does:         rts
00110Cr 3               
00110Cr 3               
00110Cr 3               does_runtime:
00110Cr 3                       ; """Runtime portion of DOES>. This replaces the subroutine jump
00110Cr 3                       ; to DOVAR that CREATE automatically encodes by a jump to the
00110Cr 3                       ; address that contains a subroutine jump to DODOES. We don't
00110Cr 3                       ; jump to DODOES directly because we need to work our magic with
00110Cr 3                       ; the return addresses. This routine is also known as "(DOES)" in
00110Cr 3                       ; other Forths
00110Cr 3                       ; """
00110Cr 3               
00110Cr 3  7A                           ply             ; LSB
00110Dr 3  68                           pla             ; MSB
00110Er 3               
00110Er 3  C8                           iny
00110Fr 3  D0 01                        bne @1
001111r 3  1A                           inc
001112r 3               @1:
001112r 3  84 rr                        sty tmp1
001114r 3  85 rr                        sta tmp1+1
001116r 3               
001116r 3                               ; CREATE has also already modified the DP to point to the new
001116r 3                               ; word. We have no idea which instructions followed the CREATE
001116r 3                               ; command if there is a DOES> so the CP could point anywhere
001116r 3                               ; by now. The address of the word's xt is four bytes down.
001116r 3  20 rr rr                     jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
001119r 3  A5 rr                        lda dp
00111Br 3  18                           clc
00111Cr 3  69 04                        adc #4
00111Er 3  85 rr                        sta tmp2
001120r 3  A5 rr                        lda dp+1
001122r 3  69 00                        adc #0          ; we only care about the carry
001124r 3  85 rr                        sta tmp2+1
001126r 3               
001126r 3                               ; Now we get that address and add one byte to skip over the JSR
001126r 3                               ; opcode
001126r 3  B2 rr                        lda (tmp2)
001128r 3  18                           clc
001129r 3  69 01                        adc #1
00112Br 3  85 rr                        sta tmp3
00112Dr 3  A0 01                        ldy #1
00112Fr 3  B1 rr                        lda (tmp2),y
001131r 3  69 00                        adc #0          ; we only care about the carry
001133r 3  85 rr                        sta tmp3+1
001135r 3               
001135r 3                               ; Replace the DOVAR address with our own
001135r 3  A5 rr                        lda tmp1        ; LSB
001137r 3  92 rr                        sta (tmp3)
001139r 3  A5 rr                        lda tmp1+1
00113Br 3  91 rr                        sta (tmp3),y    ; Y is still 1
00113Dr 3               
00113Dr 3                               ; Since we removed the return address that brought us here, we
00113Dr 3                               ; go back to whatever the main routine was. Otherwise, we we
00113Dr 3                               ; smash into the subroutine jump to DODOES.
00113Dr 3  60                           rts
00113Er 3               
00113Er 3               
00113Er 3               
00113Er 3               ; ## DOT ( u -- ) "Print TOS"
00113Er 3               ; ## "."  auto  ANS core
00113Er 3                       ; """https://forth-standard.org/standard/core/d"""
00113Er 3               
00113Er 3               xt_dot:
00113Er 3  20 rr rr                     jsr underflow_1
001141r 3               
001141r 3  20 rr rr                     jsr xt_dup                      ; ( n n )
001144r 3  20 rr rr                     jsr xt_abs                      ; ( n u )
001147r 3  20 rr rr                     jsr xt_zero                     ; ( n u 0 )
00114Ar 3  20 rr rr                     jsr xt_less_number_sign         ; ( n u 0 )
00114Dr 3  20 rr rr                     jsr xt_number_sign_s            ; ( n ud )
001150r 3  20 rr rr                     jsr xt_rot                      ; ( ud n )
001153r 3  20 rr rr                     jsr xt_sign                     ; ( ud )
001156r 3  20 rr rr                     jsr xt_number_sign_greater      ; ( addr u )
001159r 3  20 rr rr                     jsr xt_type
00115Cr 3  20 rr rr                     jsr xt_space
00115Fr 3               
00115Fr 3  60           z_dot:          rts
001160r 3               
001160r 3               
001160r 3               
001160r 3               ; ## DOT_PAREN ( -- ) "Print input up to close paren .( comment )"
001160r 3               ; ## ".("  auto  ANS core
001160r 3                       ; """http://forth-standard.org/standard/core/Dotp"""
001160r 3               
001160r 3               xt_dot_paren:
001160r 3                               ; Put a right paren on the stack.
001160r 3  CA                           dex
001161r 3  CA                           dex
001162r 3  A9 29                        lda #41     ; Right parenthesis
001164r 3  95 00                        sta 0,x
001166r 3  74 01                        stz 1,x
001168r 3               
001168r 3  20 rr rr                     jsr xt_parse
00116Br 3  20 rr rr                     jsr xt_type
00116Er 3               
00116Er 3  60           z_dot_paren:    rts
00116Fr 3               
00116Fr 3               
00116Fr 3               
00116Fr 3               ; ## DOT_QUOTE ( "string" -- ) "Print string from compiled word"
00116Fr 3               ; ## ".""  auto  ANS core ext
00116Fr 3                       ; """https://forth-standard.org/standard/core/Dotq
00116Fr 3                       ; Compile string that is printed during run time. ANS Forth wants
00116Fr 3                       ; this to be compile-only, even though everybody and their friend
00116Fr 3                       ; uses it for everything. We follow the book here, and recommend
00116Fr 3                       ; `.(` for general printing.
00116Fr 3                       ; """
00116Fr 3               
00116Fr 3               xt_dot_quote:
00116Fr 3                               ; we let S" do the heavy lifting. Since we're in
00116Fr 3                               ; compile mode, it will save the string and reproduce it
00116Fr 3                               ; during runtime
00116Fr 3  20 rr rr                     jsr xt_s_quote
001172r 3               
001172r 3                               ; We then let TYPE do the actual printing
001172r 3  A0 rr                        ldy #>xt_type
001174r 3  A9 rr                        lda #<xt_type
001176r 3  20 rr rr                     jsr cmpl_subroutine
001179r 3               
001179r 3  60           z_dot_quote:    rts
00117Ar 3               
00117Ar 3               
00117Ar 3               
00117Ar 3               ; ## DOT_R ( n u -- ) "Print NOS as unsigned number with TOS with"
00117Ar 3               ; ## ".r"  tested  ANS core ext
00117Ar 3                       ; """https://forth-standard.org/standard/core/DotR
00117Ar 3                       ;
00117Ar 3                       ; Based on the Forth code
00117Ar 3                       ;  : .R  >R DUP ABS 0 <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
00117Ar 3                       ; """
00117Ar 3               
00117Ar 3               xt_dot_r:
00117Ar 3  20 rr rr                     jsr underflow_2
00117Dr 3               
00117Dr 3  20 rr rr                     jsr xt_to_r
001180r 3  20 rr rr                     jsr xt_dup
001183r 3  20 rr rr                     jsr xt_abs
001186r 3  20 rr rr                     jsr xt_zero
001189r 3  20 rr rr                     jsr xt_less_number_sign
00118Cr 3  20 rr rr                     jsr xt_number_sign_s
00118Fr 3  20 rr rr                     jsr xt_rot
001192r 3  20 rr rr                     jsr xt_sign
001195r 3  20 rr rr                     jsr xt_number_sign_greater
001198r 3  20 rr rr                     jsr xt_r_from
00119Br 3  20 rr rr                     jsr xt_over
00119Er 3  20 rr rr                     jsr xt_minus
0011A1r 3  20 rr rr                     jsr xt_spaces
0011A4r 3  20 rr rr                     jsr xt_type
0011A7r 3               
0011A7r 3  60           z_dot_r:        rts
0011A8r 3               
0011A8r 3               
0011A8r 3               
0011A8r 3               ; ## DOT_S ( -- ) "Print content of Data Stack"
0011A8r 3               ; ## ".s"  tested  ANS tools
0011A8r 3                       ; """https://forth-standard.org/standard/tools/DotS
0011A8r 3                       ; Print content of Data Stack non-distructively. We follow the format
0011A8r 3                       ; of Gforth and print the number of elements first in brackets,
0011A8r 3                       ; followed by the Data Stack content (if any).
0011A8r 3                       ;
0011A8r 3                       ; Since this is for humans, we don't have to worry about speed.
0011A8r 3                       ; """
0011A8r 3               
0011A8r 3               xt_dot_s:
0011A8r 3  20 rr rr                     jsr xt_depth    ; ( -- u )
0011ABr 3               
0011ABr 3                               ; Print stack depth in brackets
0011ABr 3  A9 3C                        lda #$3c        ; ASCII for "<"
0011ADr 3  20 rr rr                     jsr emit_a
0011B0r 3               
0011B0r 3                               ; We keep a copy of the number of the things on the stack
0011B0r 3                               ; to use as a counter later down. This assumes that there
0011B0r 3                               ; are less than 255 elements on the stack
0011B0r 3  B5 00                        lda 0,x
0011B2r 3  48                           pha
0011B3r 3               
0011B3r 3                               ; print unsigned number without the trailing space
0011B3r 3  CA                           dex             ; DUP
0011B4r 3  CA                           dex
0011B5r 3  95 00                        sta 0,x
0011B7r 3  74 01                        stz 1,x
0011B9r 3               
0011B9r 3  20 rr rr                     jsr print_u
0011BCr 3               
0011BCr 3  A9 3E                        lda #$3e        ; ASCII for ">"
0011BEr 3  20 rr rr                     jsr emit_a
0011C1r 3  A9 20                        lda #AscSP      ; ASCII for SPACE
0011C3r 3  20 rr rr                     jsr emit_a
0011C6r 3               
0011C6r 3  E8                           inx
0011C7r 3  E8                           inx
0011C8r 3               
0011C8r 3                               ; There will be lots of cases where the stack is empty. If that
0011C8r 3                               ; is so, get out of here quickly
0011C8r 3  E0 FF                        cpx #dsp0
0011CAr 3  F0 1E                        beq @done
0011CCr 3               
0011CCr 3               @have_stack:
0011CCr 3                               ; We have at least one element on the stack. The depth of the
0011CCr 3                               ; stack is on the stack, we can use it as a counter. We go
0011CCr 3                               ; from bottom to top
0011CCr 3  7A                           ply
0011CDr 3               
0011CDr 3  A9 FE                        lda #dsp0-1     ; go up one to avoid garbage
0011CFr 3  85 rr                        sta tmp3
0011D1r 3  64 rr                        stz tmp3+1      ; must be zero page on the 65c02
0011D3r 3               @loop:
0011D3r 3  CA                           dex
0011D4r 3  CA                           dex
0011D5r 3               
0011D5r 3  B2 rr                        lda (tmp3)
0011D7r 3  95 01                        sta 1,x
0011D9r 3  C6 rr                        dec tmp3
0011DBr 3               
0011DBr 3  B2 rr                        lda (tmp3)
0011DDr 3  95 00                        sta 0,x
0011DFr 3  C6 rr                        dec tmp3
0011E1r 3  5A                           phy
0011E2r 3               
0011E2r 3  20 rr rr                     jsr xt_dot
0011E5r 3               
0011E5r 3  7A                           ply
0011E6r 3  88                           dey
0011E7r 3  D0 EA                        bne @loop
0011E9r 3               
0011E9r 3  48                           pha             ; dummy to balance stack
0011EAr 3               @done:
0011EAr 3  68                           pla
0011EBr 3  60           z_dot_s:        rts
0011ECr 3               
0011ECr 3               
0011ECr 3               
0011ECr 3               ; ## D_DOT ( d -- ) "Print double"
0011ECr 3               ; ## "d."  tested  ANS double
0011ECr 3                       ; """http://forth-standard.org/standard/double/Dd"""
0011ECr 3                       ;
0011ECr 3                       ; From the Forth code:
0011ECr 3                       ; : D. TUCK DABS <# #S ROT SIGN #> TYPE SPACE ;
0011ECr 3                       ; """
0011ECr 3               
0011ECr 3               xt_d_dot:
0011ECr 3  20 rr rr                     jsr underflow_2
0011EFr 3               
0011EFr 3  20 rr rr                     jsr xt_tuck
0011F2r 3  20 rr rr                     jsr xt_dabs
0011F5r 3  20 rr rr                     jsr xt_less_number_sign
0011F8r 3  20 rr rr                     jsr xt_number_sign_s
0011FBr 3  20 rr rr                     jsr xt_rot
0011FEr 3  20 rr rr                     jsr xt_sign
001201r 3  20 rr rr                     jsr xt_number_sign_greater
001204r 3  20 rr rr                     jsr xt_type
001207r 3  20 rr rr                     jsr xt_space
00120Ar 3               
00120Ar 3  60           z_d_dot:        rts
00120Br 3               
00120Br 3               
00120Br 3               
00120Br 3               ; ## D_DOT_R ( d u -- ) "Print double right-justified u wide"
00120Br 3               ; ## "d.r"  tested  ANS double
00120Br 3                       ; """http://forth-standard.org/standard/double/DDotR"""
00120Br 3                       ; Based on the Forth code
00120Br 3                       ;  : D.R >R TUCK DABS <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
00120Br 3                       ; """
00120Br 3               
00120Br 3               xt_d_dot_r:
00120Br 3  20 rr rr                     jsr underflow_3
00120Er 3                               ; From the forth code:
00120Er 3  20 rr rr                     jsr xt_to_r
001211r 3  20 rr rr                     jsr xt_tuck
001214r 3  20 rr rr                     jsr xt_dabs
001217r 3  20 rr rr                     jsr xt_less_number_sign
00121Ar 3  20 rr rr                     jsr xt_number_sign_s
00121Dr 3  20 rr rr                     jsr xt_rot
001220r 3  20 rr rr                     jsr xt_sign
001223r 3  20 rr rr                     jsr xt_number_sign_greater
001226r 3  20 rr rr                     jsr xt_r_from
001229r 3  20 rr rr                     jsr xt_over
00122Cr 3  20 rr rr                     jsr xt_minus
00122Fr 3  20 rr rr                     jsr xt_spaces
001232r 3  20 rr rr                     jsr xt_type
001235r 3               
001235r 3  60           z_d_dot_r:      rts
001236r 3               
001236r 3               
001236r 3               
001236r 3               ; ## DROP ( u -- ) "Pop top entry on Data Stack"
001236r 3               ; ## "drop"  auto  ANS core
001236r 3                       ; """https://forth-standard.org/standard/core/DROP"""
001236r 3               xt_drop:
001236r 3  20 rr rr                     jsr underflow_1
001239r 3               
001239r 3  E8                           inx
00123Ar 3  E8                           inx
00123Br 3               
00123Br 3  60           z_drop:         rts
00123Cr 3               
00123Cr 3               
00123Cr 3               ; ## DUMP ( addr u -- ) "Display a memory region"
00123Cr 3               ; ## "dump"  tested  ANS tools
00123Cr 3                       ; """https://forth-standard.org/standard/tools/DUMP
00123Cr 3                       ;
00123Cr 3                       ; DUMP's exact output is defined as "implementation dependent".
00123Cr 3                       ; This is in assembler because it is
00123Cr 3                       ; useful for testing and development, so we want to have it work
00123Cr 3                       ; as soon as possible. Uses TMP2
00123Cr 3                       ; """
00123Cr 3               
00123Cr 3               xt_dump:
00123Cr 3  20 rr rr                     jsr underflow_2
00123Fr 3               @row:
00123Fr 3                               ; start counter for 16 numbers per row
00123Fr 3  A0 10                        ldy #16
001241r 3               
001241r 3                               ; We use TMP2 as the index for the ASCII characters
001241r 3                               ; that we print at the and of the hex block. We
001241r 3                               ; start saving them at HERE (CP)
001241r 3  64 rr                        stz tmp2
001243r 3               
001243r 3  20 rr rr                     jsr xt_cr
001246r 3               
001246r 3                               ; print address number
001246r 3  B5 03                        lda 3,x
001248r 3  20 rr rr                     jsr byte_to_ascii
00124Br 3  B5 02                        lda 2,x
00124Dr 3  20 rr rr                     jsr byte_to_ascii
001250r 3               
001250r 3  20 rr rr                     jsr xt_space
001253r 3  20 rr rr                     jsr xt_space
001256r 3               @loop:
001256r 3                               ; if there are zero bytes left to display, we're done
001256r 3  B5 00                        lda 0,x
001258r 3  15 01                        ora 1,x
00125Ar 3  F0 39                        beq @all_printed
00125Cr 3               
00125Cr 3                               ; dump the contents
00125Cr 3  A1 02                        lda (2,x)
00125Er 3  48                           pha                     ; byte_to_ascii destroys A
00125Fr 3  20 rr rr                     jsr byte_to_ascii
001262r 3  20 rr rr                     jsr xt_space
001265r 3  68                           pla
001266r 3               
001266r 3                               ; Handle ASCII printing
001266r 3  20 rr rr                     jsr is_printable
001269r 3  B0 02                        bcs @printable
00126Br 3  A9 2E                        lda #'.'                 ; Print dot if not printable
00126Dr 3               @printable:
00126Dr 3  5A                           phy                     ; save counter
00126Er 3  A4 rr                        ldy tmp2
001270r 3  91 rr                        sta (cp),y
001272r 3  E6 rr                        inc tmp2
001274r 3  7A                           ply
001275r 3               
001275r 3                               ; extra space after eight bytes
001275r 3  C0 09                        cpy #9
001277r 3  D0 03                        bne @next_char
001279r 3  20 rr rr                     jsr xt_space
00127Cr 3               
00127Cr 3               @next_char:
00127Cr 3  F6 02                        inc 2,x
00127Er 3  D0 02                        bne @counter
001280r 3  F6 03                        inc 3,x
001282r 3               
001282r 3               @counter:
001282r 3                               ; loop counter
001282r 3  B5 00                        lda 0,x
001284r 3  D0 02                        bne @1
001286r 3  D6 01                        dec 1,x
001288r 3               @1:
001288r 3  D6 00                        dec 0,x
00128Ar 3  88                           dey
00128Br 3  D0 C9                        bne @loop               ; next byte
00128Dr 3               
00128Dr 3                               ; Done with one line, print the ASCII version of these
00128Dr 3                               ; characters
00128Dr 3  20 rr rr                     jsr xt_space
001290r 3  20 rr rr                     jsr print_ascii
001293r 3               
001293r 3  80 AA                        bra @row                ; new row
001295r 3               
001295r 3               @all_printed:
001295r 3                               ; See if there are any ASCII characters in the buffer
001295r 3                               ; left to print
001295r 3  A5 rr                        lda tmp2
001297r 3  F0 06                        beq @done
001299r 3               
001299r 3                               ; In theory, we could try to make the ASCII part line
001299r 3                               ; up with the line before it. But that is a hassle (we
001299r 3                               ; use three bytes for each missed hex entry, and
001299r 3                               ; then there is the gap after eight entries) and it
001299r 3                               ; makes it harder to read. We settle for one extra
001299r 3                               ; space instead for the moment
001299r 3  20 rr rr                     jsr xt_space
00129Cr 3  20 rr rr                     jsr print_ascii
00129Fr 3               @done:
00129Fr 3  20 rr rr                     jsr xt_two_drop         ; one byte less than 4x INX
0012A2r 3  60           z_dump:         rts
0012A3r 3               
0012A3r 3               
0012A3r 3               print_ascii:
0012A3r 3                               ; Print the ASCII characters that we have saved from
0012A3r 3                               ; HERE (CP) to HERE plus whatever is in TMP2. This routine
0012A3r 3                               ; is not compiled (DUMP is probably never compiled anyway)
0012A3r 3                               ; but we keep it inside the scope of DUMP.
0012A3r 3  A0 00                        ldy #0
0012A5r 3               @ascii_loop:
0012A5r 3  B1 rr                        lda (cp),y
0012A7r 3  20 rr rr                     jsr emit_a
0012AAr 3  C8                           iny
0012ABr 3               
0012ABr 3                               ; extra space after eight chars
0012ABr 3  C0 08                        cpy #8
0012ADr 3  D0 03                        bne @1
0012AFr 3  20 rr rr                     jsr xt_space
0012B2r 3               @1:
0012B2r 3  C6 rr                        dec tmp2
0012B4r 3  D0 EF                        bne @ascii_loop
0012B6r 3               
0012B6r 3  60                           rts
0012B7r 3               
0012B7r 3               
0012B7r 3               
0012B7r 3               ; ## DUP ( u -- u u ) "Duplicate TOS"
0012B7r 3               ; ## "dup"  auto  ANS core
0012B7r 3                       ; """https://forth-standard.org/standard/core/DUP"""
0012B7r 3               xt_dup:
0012B7r 3  20 rr rr                     jsr underflow_1
0012BAr 3               
0012BAr 3  CA                           dex
0012BBr 3  CA                           dex
0012BCr 3               
0012BCr 3  B5 02                        lda 2,x         ; LSB
0012BEr 3  95 00                        sta 0,x
0012C0r 3  B5 03                        lda 3,x         ; MSB
0012C2r 3  95 01                        sta 1,x
0012C4r 3               
0012C4r 3  60           z_dup:          rts
0012C5r 3               
0012C5r 3               
0012C5r 3               ; ## ED ( -- u ) "Line-based editor"
0012C5r 3               ; ## "ed"  fragment  Tali Forth
0012C5r 3                       ; """Start the line-based editor ed6502. See separate file
0012C5r 3                       ; ed.asm or the manual for details.
0012C5r 3                       ; """
0012C5r 3               xt_ed:
0012C5r 3                           .ifdef ed6502
0012C5r 3                               jsr ed6502      ; kept in separate file
0012C5r 3                           .endif
0012C5r 3               
0012C5r 3  60           z_ed:           rts
0012C6r 3               
0012C6r 3               
0012C6r 3               ; ## EDITOR_WORDLIST ( -- u ) "WID for the Editor wordlist"
0012C6r 3               ; ## "editor-wordlist"  tested  Tali Editor
0012C6r 3                       ; """ Commonly used like `editor-wordlist >order` to add the editor
0012C6r 3                       ; words to the search order so they can be used.  This will need
0012C6r 3                       ; to be done before any of the words marked "Tali Editor" can be
0012C6r 3                       ; used.  See the tutorial on Wordlists and the Search Order for
0012C6r 3                       ; more information.
0012C6r 3               
0012C6r 3                       ;
0012C6r 3                       ; This is a dummy entry, the code is shared with ONE
0012C6r 3                       ; """
0012C6r 3               
0012C6r 3               
0012C6r 3               ; ## ELSE (C: orig -- orig) ( -- ) "Conditional flow control"
0012C6r 3               ; ## "else"  auto  ANS core
0012C6r 3                       ; """http://forth-standard.org/standard/core/ELSE
0012C6r 3                       ;
0012C6r 3                       ; The code is shared with ENDOF
0012C6r 3                       ; """
0012C6r 3               
0012C6r 3               xt_else:
0012C6r 3               xt_endof:
0012C6r 3                               ; Put an unconditional branch.
0012C6r 3  A0 rr                        ldy #>branch_runtime
0012C8r 3  A9 rr                        lda #<branch_runtime
0012CAr 3  20 rr rr                     jsr cmpl_subroutine
0012CDr 3               
0012CDr 3                               ; Put the address of the branch address on the stack.
0012CDr 3  20 rr rr                     jsr xt_here
0012D0r 3               
0012D0r 3                               ; Use zero for the branch address for now.
0012D0r 3                               ; THEN will fill it in later.
0012D0r 3  20 rr rr                     jsr xt_zero
0012D3r 3  20 rr rr                     jsr xt_comma
0012D6r 3               
0012D6r 3                               ; Get the address to jump to (just after the
0012D6r 3                               ; unconditional branch) for the IF to jump to
0012D6r 3                               ; when false.
0012D6r 3  20 rr rr                     jsr xt_here
0012D9r 3  20 rr rr                     jsr xt_rot
0012DCr 3               
0012DCr 3                               ; Update the original if 0branch address.
0012DCr 3  20 rr rr                     jsr xt_store
0012DFr 3               z_else:
0012DFr 3               z_endof:
0012DFr 3  60                           rts
0012E0r 3               
0012E0r 3               
0012E0r 3               
0012E0r 3               branch_runtime:
0012E0r 3                       ; """Runtime component for a branch. Used by ELSE and ENDOF. This was
0012E0r 3                       ; formally part of a separate word BRANCH which was later removed.
0012E0r 3                       ; """
0012E0r 3               
0012E0r 3                               ; The address on the Return Stack points to the last byte
0012E0r 3                               ; of the JSR address, one byte below the branch literal
0012E0r 3  68                           pla
0012E1r 3  85 rr                        sta tmpbranch
0012E3r 3  68                           pla
0012E4r 3  85 rr                        sta tmpbranch+1
0012E6r 3               
0012E6r 3                               ; Keep in mind: the address we just popped points one byte
0012E6r 3                               ; lower than the branch literal we want to grab
0012E6r 3  A0 01                        ldy #1
0012E8r 3  B1 rr                        lda (tmpbranch),y  ; LSB
0012EAr 3  85 rr                        sta tmp1
0012ECr 3  C8                           iny
0012EDr 3  B1 rr                        lda (tmpbranch),y  ; MSB
0012EFr 3  85 rr                        sta tmp1+1
0012F1r 3               
0012F1r 3  6C rr rr                     jmp (tmp1)
0012F4r 3               
0012F4r 3               
0012F4r 3               
0012F4r 3               ; ## EMIT ( char -- ) "Print character to current output"
0012F4r 3               ; ## "emit"  auto  ANS core
0012F4r 3                       ; """https://forth-standard.org/standard/core/EMIT
0012F4r 3                       ; Run-time default for EMIT. The user can revector this by changing
0012F4r 3                       ; the value of the OUTPUT variable. We ignore the MSB completely, and
0012F4r 3                       ; do not check to see if we have been given a valid ASCII character.
0012F4r 3                       ; Don't make this native compile.
0012F4r 3                       ; """
0012F4r 3               
0012F4r 3               xt_emit:
0012F4r 3  20 rr rr                     jsr underflow_1
0012F7r 3               
0012F7r 3  B5 00                        lda 0,x
0012F9r 3  E8                           inx
0012FAr 3  E8                           inx
0012FBr 3               
0012FBr 3               emit_a:
0012FBr 3                       ; We frequently want to print the character in A without fooling
0012FBr 3                       ; around with the Data Stack. This is emit_a's job, which still
0012FBr 3                       ; allows the output to be vectored. Call it with JSR as you
0012FBr 3                       ; would XT_EMIT
0012FBr 3  6C rr rr                     jmp (output)            ; JSR/RTS
0012FEr 3               
0012FEr 3               z_emit:         ; never reached
0012FEr 3               
0012FEr 3               
0012FEr 3               
0012FEr 3               ; ## EMPTY_BUFFERS ( -- ) "Empty all buffers without saving"
0012FEr 3               ; ## "empty-buffers"  tested  ANS block ext
0012FEr 3                       ; """https://forth-standard.org/standard/block/EMPTY-BUFFERS"""
0012FEr 3               xt_empty_buffers:
0012FEr 3                               ; Set the buffer status to empty.
0012FEr 3  A0 2C                        ldy #buffstatus_offset
001300r 3  A9 00                        lda #0
001302r 3  91 rr                        sta (up),y      ; Only LSB is used.
001304r 3               z_empty_buffers:
001304r 3  60                           rts
001305r 3               
001305r 3               
001305r 3               ; ## ENDCASE (C: case-sys -- ) ( x -- ) "Conditional flow control"
001305r 3               ; ## "endcase"  auto  ANS core ext
001305r 3                       ; """http://forth-standard.org/standard/core/ENDCASE"""
001305r 3               
001305r 3               xt_endcase:
001305r 3                               ; Postpone DROP to remove the item
001305r 3                               ; being checked.
001305r 3  A0 rr                        ldy #>xt_drop
001307r 3  A9 rr                        lda #<xt_drop
001309r 3  20 rr rr                     jsr cmpl_subroutine
00130Cr 3               
00130Cr 3                               ; There are a number of address (of branches that need their
00130Cr 3                               ; jump addressed filled in with the address of right here).
00130Cr 3                               ; Keep calling THEN to deal with them until we reach the
00130Cr 3                               ; 0 that CASE put on the stack at the beginning.
00130Cr 3               @endcase_loop:
00130Cr 3                               ; Check for 0 on the stack.
00130Cr 3  B5 00                        lda 0,x
00130Er 3  15 01                        ora 1,x
001310r 3  F0 05                        beq @done
001312r 3               
001312r 3  20 rr rr                     jsr xt_then
001315r 3  80 F5                        bra @endcase_loop
001317r 3               @done:
001317r 3                               ; Remove the 0 from the stack.
001317r 3  E8                           inx
001318r 3  E8                           inx
001319r 3  60           z_endcase:      rts
00131Ar 3               
00131Ar 3               
00131Ar 3               
00131Ar 3               ; ## ENDOF (C: case-sys1 of-sys1-- case-sys2) ( -- ) "Conditional flow control"
00131Ar 3               ; ## "endof"  auto  ANS core ext
00131Ar 3                       ; """http://forth-standard.org/standard/core/ENDOF
00131Ar 3                       ; This is a dummy entry, the code is shared with ELSE
00131Ar 3                       ; """
00131Ar 3               
00131Ar 3               
00131Ar 3               ; ## ENVIRONMENT_Q  ( addr u -- 0 | i*x true )  "Return system information"
00131Ar 3               ; ## "environment?"  auto  ANS core
00131Ar 3                       ; """https://forth-standard.org/standard/core/ENVIRONMENTq
00131Ar 3                       ;
00131Ar 3                       ; By ANS definition, we use upper-case strings here, see the
00131Ar 3                       ; string file for details. This can be realized as a high-level
00131Ar 3                       ; Forth word as
00131Ar 3                       ;
00131Ar 3                       ; : STRING_OF POSTPONE 2OVER POSTPONE COMPARE POSTPONE 0=
00131Ar 3                       ;    POSTPONE IF POSTPONE 2DROP ; IMMEDIATE COMPILE-ONLY
00131Ar 3                       ; HEX
00131Ar 3                       ; : ENVIRONMENT? ( C-ADDR U -- FALSE | I*X TRUE )
00131Ar 3                       ; CASE
00131Ar 3                       ; S" /COUNTED-STRING"    STRING_OF  7FFF TRUE ENDOF
00131Ar 3                       ; S" /HOLD"              STRING_OF    FF TRUE ENDOF
00131Ar 3                       ; S" /PAD"               STRING_OF    54 TRUE ENDOF ( 84 DECIMAL )
00131Ar 3                       ; S" ADDRESS-UNIT-BITS"  STRING_OF     8 TRUE ENDOF
00131Ar 3                       ; S" FLOORED"            STRING_OF FALSE TRUE ENDOF ( WE HAVE SYMMETRIC )
00131Ar 3                       ; S" MAX-CHAR"           STRING_OF   255 TRUE ENDOF
00131Ar 3                       ; S" MAX-D"              STRING_OF
00131Ar 3                                                    ; 7FFFFFFF. TRUE ENDOF
00131Ar 3                       ; S" MAX-N"              STRING_OF  7FFF TRUE ENDOF
00131Ar 3                       ; S" MAX-U"              STRING_OF  FFFF TRUE ENDOF
00131Ar 3                       ; S" MAX-UD"             STRING_OF
00131Ar 3                                                    ; FFFFFFFF. TRUE ENDOF
00131Ar 3                       ; S" RETURN-STACK-CELLS" STRING_OF    80 TRUE ENDOF
00131Ar 3                       ; S" STACK-CELLS"        STRING_OF    20 TRUE ENDOF ( FROM DEFINITIONS.ASM )
00131Ar 3                       ; ( DEFAULT ) 2DROP FALSE FALSE ( ONE FALSE WILL DROPPED BY ENDCASE )
00131Ar 3                       ; ENDCASE ;
00131Ar 3                       ;
00131Ar 3                       ; but that uses lots of memory and increases the start up time. This
00131Ar 3                       ; word is rarely used so we can try to keep it short at the expense
00131Ar 3                       ; of speed.
00131Ar 3                       ; """
00131Ar 3               
00131Ar 3               xt_environment_q:
00131Ar 3  20 rr rr                     jsr underflow_1
00131Dr 3               
00131Dr 3                               ; This code is table-driven: We walk through the list of
00131Dr 3                               ; strings until we find one that matches, and then we take
00131Dr 3                               ; the equivalent data from the results table. This is made
00131Dr 3                               ; a bit harder by the fact that some of these return a
00131Dr 3                               ; double-cell number and some a single-cell one.
00131Dr 3               
00131Dr 3                               ; We will walk through the table with variables that return
00131Dr 3                               ; a single-cell result
00131Dr 3  A0 00                        ldy #00                 ; counter for table
00131Fr 3               
00131Fr 3                               ; We use a flag on the the stack to signal if we have a single-cell
00131Fr 3                               ; or double-cell number. We use 0 to signal single-cell and 1 for
00131Fr 3                               ; double-cell.
00131Fr 3  5A                           phy
001320r 3               @table_loop:
001320r 3                               ; We arrived here with the address of the string to be checked
001320r 3                               ; on the stack. We make a copy. Index is in Y
001320r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
001323r 3               
001323r 3                               ; We do our work on the TOS to speed things up
001323r 3  CA                           dex
001324r 3  CA                           dex                     ; ( addr u addr u ? )
001325r 3               
001325r 3                               ; Get address of string to check from table
001325r 3  B9 rr rr                     lda env_table_single,y
001328r 3  95 00                        sta 0,x
00132Ar 3  C8                           iny
00132Br 3  B9 rr rr                     lda env_table_single,y
00132Er 3  95 01                        sta 1,x                 ; ( addr u addr u addr-t )
001330r 3  C8                           iny
001331r 3               
001331r 3                               ; See if this is the last entry. The LSB is still in A
001331r 3  15 00                        ora 0,x
001333r 3  F0 4D                        beq @table_done
001335r 3               
001335r 3                               ; We have a string entry. The address there is stored in
001335r 3                               ; old-style address format, that is, the first byte is the
001335r 3                               ; length of the string
001335r 3  5A                           phy                     ; save Y, which is used by COUNT
001336r 3  20 rr rr                     jsr xt_count            ; ( addr u addr u addr-s u-s )
001339r 3  20 rr rr                     jsr xt_compare          ; ( addr u f )
00133Cr 3  7A                           ply
00133Dr 3               
00133Dr 3                               ; If we found a match (flag is zero -- COMPARE is weird
00133Dr 3                               ; that way), return the result
00133Dr 3  B5 00                        lda 0,x
00133Fr 3  15 01                        ora 1,x
001341r 3  F0 04                        beq @got_result
001343r 3               
001343r 3                               ; Flag is not zero, so not a perfect match, so try next
001343r 3                               ; word
001343r 3  E8                           inx                     ; DROP, now ( addr u )
001344r 3  E8                           inx
001345r 3               
001345r 3  80 D9                        bra @table_loop
001347r 3               
001347r 3               @got_result:
001347r 3                               ; We arrive here with ( addr u -1 ) and know that we've found
001347r 3                               ; a match. The index of the match+2 is in Y.
001347r 3  E8                           inx                     ; drop flag, now ( addr u )
001348r 3  E8                           inx
001349r 3  88                           dey                     ; go back to index we had
00134Ar 3  88                           dey
00134Br 3               
00134Br 3                               ; See if this is a single-cell word.
00134Br 3  68                           pla
00134Cr 3  D0 0D                        bne @double_result
00134Er 3               
00134Er 3                               ; Single-cell result
00134Er 3  B9 rr rr                     lda env_results_single,y
001351r 3  95 02                        sta 2,x
001353r 3  C8                           iny
001354r 3  B9 rr rr                     lda env_results_single,y
001357r 3  95 03                        sta 3,x                 ; ( res u )
001359r 3               
001359r 3  80 1F                        bra @set_flag
00135Br 3               
00135Br 3               @double_result:
00135Br 3                               ; This is a double-celled result, which means we have to
00135Br 3                               ; fool around with the index some more. We also need a
00135Br 3                               ; further cell on the stack
00135Br 3  CA                           dex                     ; ( addr u ? )
00135Cr 3  CA                           dex
00135Dr 3               
00135Dr 3                               ; We have 11 single-cell words we check, plus the 0000 as
00135Dr 3                               ; a marker for the end of the table, so we arrive here
00135Dr 3                               ; with Y as 22 or more. To get the index for the double-
00135Dr 3                               ; cell words, we move the result
00135Dr 3  98                           tya
00135Er 3  38                           sec
00135Fr 3  E9 18                        sbc #24
001361r 3               
001361r 3                               ; We have four bytes per entry in the table, but the index
001361r 3                               ; keeps increasing by two, so we only have to multiply by
001361r 3                               ; two (shift left once) to get the right result
001361r 3  0A                           asl
001362r 3  A8                           tay
001363r 3               
001363r 3  B9 rr rr                     lda env_results_double,y
001366r 3  95 02                        sta 2,x
001368r 3  C8                           iny
001369r 3  B9 rr rr                     lda env_results_double,y
00136Cr 3  95 03                        sta 3,x                 ; ( res u ? )
00136Er 3  C8                           iny
00136Fr 3               
00136Fr 3  B9 rr rr                     lda env_results_double,y
001372r 3  95 04                        sta 4,x
001374r 3  C8                           iny
001375r 3  B9 rr rr                     lda env_results_double,y
001378r 3  95 05                        sta 5,x                 ; ( res res ? )
00137Ar 3               
00137Ar 3                               ; fall through to @set_flag
00137Ar 3               @set_flag:
00137Ar 3  A9 FF                        lda #$ff
00137Cr 3  95 00                        sta 0,x
00137Er 3  95 01                        sta 1,x                 ; ( res f )
001380r 3               
001380r 3  80 14                        bra @done
001382r 3               @table_done:
001382r 3                               ; We're done with a table, because the entry was a zero.
001382r 3                               ; We arrive here with ( addr u addr u 0 )
001382r 3               
001382r 3                               ; We take the flag from stack and increase it by one. If the
001382r 3                               ; flag is zero, we have just completed the single-cell number
001382r 3                               ; strings, so we in increase the flag and try again. Otherwise,
001382r 3                               ; we're done with the double-cell table without having found
001382r 3                               ; a match, and we're done
001382r 3  68                           pla
001383r 3  D0 09                        bne @no_match
001385r 3               
001385r 3                               ; Flag is zero, increase it to one and start over to check
001385r 3                               ; double-cell values
001385r 3  1A                           inc
001386r 3  48                           pha
001387r 3               
001387r 3  8A                           txa
001388r 3  18                           clc
001389r 3  69 06                        adc #6                  ; skip six bytes
00138Br 3  AA                           tax                     ; ( addr u )
00138Cr 3               
00138Cr 3  80 92                        bra @table_loop
00138Er 3               @no_match:
00138Er 3                               ; Bummer, not found. We arrive here with
00138Er 3                               ; ( addr u addr u 0 ) and need to return just a zero
00138Er 3  8A                           txa
00138Fr 3  18                           clc
001390r 3  69 0A                        adc #10
001392r 3  AA                           tax                     ; ( addr ) - not ( 0 ) !
001393r 3               
001393r 3  20 rr rr                     jsr xt_false
001396r 3               @done:
001396r 3               z_environment_q:
001396r 3  60                           rts
001397r 3               
001397r 3               
001397r 3               ; Tables for ENVIRONMENT?. We use two separate ones, one for the single-cell
001397r 3               ; results and one for the double-celled results. The zero cell at the
001397r 3               ; end of each table marks its, uh, end. The strings themselves are defined
001397r 3               ; in strings.asm. Note if we add more entries to the single-cell table, we
001397r 3               ; have to adapt the result code for double printout, where we subtract 22
001397r 3               ; (two bytes each single-cell string and two bytes for the end-of-table
001397r 3               ; marker 0000
001397r 3               env_table_single:
001397r 3  rr rr rr rr          .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
00139Br 3  rr rr rr rr  
00139Fr 3  rr rr        
0013A1r 3  rr rr rr rr          .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
0013A5r 3  rr rr rr rr  
0013A9r 3  rr rr rr rr          .word envs_sc, envs_wl, 0000
0013ADr 3  00 00        
0013AFr 3               
0013AFr 3               env_table_double:
0013AFr 3  rr rr rr rr          .word envs_max_d, envs_max_ud, 0000
0013B3r 3  00 00        
0013B5r 3               
0013B5r 3               env_results_single:
0013B5r 3  FF 7F                .word $7FFF     ; /COUNTED-STRING
0013B7r 3  FF 00                .word $00FF     ; /HOLD
0013B9r 3  54 00                .word $0054     ; /PAD (this is 84 decimal)
0013BBr 3  08 00                .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
0013BDr 3  00 00                .word 0000      ; FLOORED ("FALSE", we have symmetric)
0013BFr 3  FF 00                .word $00FF     ; MAX-CHAR
0013C1r 3  FF 7F                .word $7FFF     ; MAX-N
0013C3r 3  FF FF                .word $FFFF     ; MAX-U
0013C5r 3  80 00                .word $0080     ; RETURN-STACK-CELLS
0013C7r 3  20 00                .word $0020     ; STACK-CELLS (from definitions.asm)
0013C9r 3  09 00                .word $0009     ; WORDLISTS
0013CBr 3               
0013CBr 3               env_results_double:
0013CBr 3  FF 7F FF FF          .word $7FFF, $FFFF      ; MAX-D
0013CFr 3  FF FF FF FF          .word $FFFF, $FFFF      ; MAX-UD
0013D3r 3               
0013D3r 3               
0013D3r 3               ; ## EQUAL ( n n -- f ) "See if TOS and NOS are equal"
0013D3r 3               ; ## "="  auto  ANS core
0013D3r 3                       ; """https://forth-standard.org/standard/core/Equal"""
0013D3r 3               
0013D3r 3               xt_equal:
0013D3r 3  20 rr rr                     jsr underflow_2
0013D6r 3               
0013D6r 3  B5 00                        lda 0,x                 ; LSB
0013D8r 3  D5 02                        cmp 2,x
0013DAr 3  D0 0A                        bne @false
0013DCr 3               
0013DCr 3  B5 01                        lda 1,x                 ; MSB
0013DEr 3  D5 03                        cmp 3,x
0013E0r 3  D0 04                        bne @false
0013E2r 3               
0013E2r 3  A9 FF                        lda #$ff
0013E4r 3  80 02                        bra @done
0013E6r 3               
0013E6r 3  A9 00        @false:         lda #0                  ; drop thru to done
0013E8r 3               
0013E8r 3  95 02        @done:          sta 2,x
0013EAr 3  95 03                        sta 3,x
0013ECr 3               
0013ECr 3  E8                           inx
0013EDr 3  E8                           inx
0013EEr 3               
0013EEr 3  60           z_equal:        rts
0013EFr 3               
0013EFr 3               
0013EFr 3               
0013EFr 3               ; ## BLANK ( addr u -- ) "Fill memory region with spaces"
0013EFr 3               ; ## "blank"  auto  ANS string
0013EFr 3                       ; """https://forth-standard.org/standard/string/BLANK"""
0013EFr 3               xt_blank:
0013EFr 3                               ; We don't check for underflow here because
0013EFr 3                               ; we deal with that in FILL
0013EFr 3  CA                           dex
0013F0r 3  CA                           dex
0013F1r 3  A9 20                        lda #AscSP
0013F3r 3  95 00                        sta 0,x
0013F5r 3  74 01                        stz 1,x
0013F7r 3               
0013F7r 3  80 06                        bra xt_fill     ; skip over code for ERASE
0013F9r 3               
0013F9r 3               
0013F9r 3               ; ## ERASE ( addr u -- ) "Fill memory region with zeros"
0013F9r 3               ; ## "erase"  auto  ANS core ext
0013F9r 3                       ; """https://forth-standard.org/standard/core/ERASE
0013F9r 3                       ; Note that ERASE works with "address" units
0013F9r 3                       ; (bytes), not cells.
0013F9r 3                       ; """
0013F9r 3               
0013F9r 3               xt_erase:
0013F9r 3                               ; We don't check for underflow here because
0013F9r 3                               ; we deal with that in FILL
0013F9r 3  CA                           dex
0013FAr 3  CA                           dex
0013FBr 3  74 00                        stz 0,x
0013FDr 3  74 01                        stz 1,x
0013FFr 3               
0013FFr 3                               ; fall through to FILL
0013FFr 3               
0013FFr 3               ; ## FILL ( addr u char -- ) "Fill a memory region with a character"
0013FFr 3               ; ## "fill"  auto  ANS core
0013FFr 3                       ; """https://forth-standard.org/standard/core/FILL
0013FFr 3                       ; Fill u bytes of memory with char starting at addr. Note that
0013FFr 3                       ; this works on bytes, not on cells. On an 8-bit machine such as the
0013FFr 3                       ; 65c02, this is a serious pain in the rear. It is not defined what
0013FFr 3                       ; happens when we reach the end of the address space
0013FFr 3                       ; """
0013FFr 3               xt_fill:
0013FFr 3  20 rr rr                     jsr underflow_3
001402r 3               
001402r 3                               ; We use tmp1 to hold the address
001402r 3  B5 04                        lda 4,x         ; LSB
001404r 3  85 rr                        sta tmp1
001406r 3  B5 05                        lda 5,x
001408r 3  85 rr                        sta tmp1+1
00140Ar 3               
00140Ar 3                               ; We use tmp2 to hold the counter
00140Ar 3  B5 02                        lda 2,x
00140Cr 3  85 rr                        sta tmp2
00140Er 3  B5 03                        lda 3,x
001410r 3  85 rr                        sta tmp2+1
001412r 3               
001412r 3                               ; We use Y to hold the character
001412r 3  B5 00                        lda 0,x
001414r 3  A8                           tay
001415r 3               @loop:
001415r 3                               ; Unfortunately, we also need to make sure that we don't
001415r 3                               ; write further than the end of the RAM. So RAM_END must
001415r 3                               ; be larger or equal to the current address
001415r 3  A9 80                        lda #>ram_end           ; MSB
001417r 3  C5 rr                        cmp tmp1+1
001419r 3  90 21                        bcc @done               ; RAM_END < TMP1, so leave
00141Br 3  D0 06                        bne @check_counter      ; RAM_END is not smaller and not equal
00141Dr 3               
00141Dr 3  A9 00                        lda #<ram_end           ; LSB, because MSBs were equal
00141Fr 3  C5 rr                        cmp tmp1
001421r 3  90 19                        bcc @done               ; RAM_END < TMP1, so leave
001423r 3               
001423r 3               @check_counter:
001423r 3                               ; See if our counter has reached zero
001423r 3  A5 rr                        lda tmp2
001425r 3  05 rr                        ora tmp2+1
001427r 3  F0 13                        beq @done
001429r 3               
001429r 3                               ; We're not in ROM and we still have stuff on the counter, so
001429r 3                               ; let's actually do what we came here to do
001429r 3  98                           tya
00142Ar 3  92 rr                        sta (tmp1)
00142Cr 3               
00142Cr 3                               ; Adjust the counter
00142Cr 3  A5 rr                        lda tmp2
00142Er 3  D0 02                        bne @1
001430r 3  C6 rr                        dec tmp2+1
001432r 3  C6 rr        @1:               dec tmp2
001434r 3               
001434r 3                               ; Next address
001434r 3  E6 rr                        inc tmp1
001436r 3  D0 DD                        bne @loop
001438r 3  E6 rr                        inc tmp1+1
00143Ar 3               
00143Ar 3  80 D9                        bra @loop
00143Cr 3               
00143Cr 3               @done:
00143Cr 3                               ; Drop three cells off the Data Stack. This uses one byte
00143Cr 3                               ; less than six times INX
00143Cr 3  8A                           txa
00143Dr 3  18                           clc
00143Er 3  69 06                        adc #6
001440r 3  AA                           tax
001441r 3               z_blank:
001441r 3               z_erase:
001441r 3  60           z_fill:         rts
001442r 3               
001442r 3               
001442r 3               
001442r 3               ; ## EXECUTE ( xt -- ) "Jump to word based on execution token"
001442r 3               ; ## "execute"  auto  ANS core
001442r 3                       ; """https://forth-standard.org/standard/core/EXECUTE"""
001442r 3               xt_execute:
001442r 3  20 rr rr                     jsr underflow_1
001445r 3               
001445r 3  20 rr rr                     jsr doexecute   ; do not combine to JMP (native coding)
001448r 3               
001448r 3  60           z_execute:      rts
001449r 3               
001449r 3               doexecute:
001449r 3  B5 00                        lda 0,x
00144Br 3  85 rr                        sta ip
00144Dr 3  B5 01                        lda 1,x
00144Fr 3  85 rr                        sta ip+1
001451r 3               
001451r 3  E8                           inx
001452r 3  E8                           inx
001453r 3               
001453r 3                               ; we don't need a RTS here because we highjack the RTS of
001453r 3                               ; the word we're calling to get back to xt_execute
001453r 3  6C rr rr                     jmp (ip)
001456r 3               
001456r 3               ; end of doexecute
001456r 3               
001456r 3               
001456r 3               ; ## EXECUTE_PARSING ( addr u xt -- ) "Pass a string to a parsing word"
001456r 3               ; ## "execute-parsing"  auto  Gforth
001456r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001456r 3                       ; Execute the parsing word defined by the execution token (xt) on the
001456r 3                       ; string as if it were passed on the command line. See the file
001456r 3                       ; tests/tali.fs for examples.
001456r 3                       ;
001456r 3                       ; Note that this word is coded completely
001456r 3                       ; different in its Gforth version, see the file execute-parsing.fs
001456r 3                       ; (in /usr/share/gforth/0.7.3/compat/ on Ubuntu 18.04 LTS) for details.
001456r 3                       ; """
001456r 3               xt_execute_parsing:
001456r 3  20 rr rr                     jsr underflow_3
001459r 3               
001459r 3  20 rr rr                     jsr xt_input_to_r       ; save normal input for later
00145Cr 3  20 rr rr                     jsr xt_not_rote         ; -ROT ( xt addr u )
00145Fr 3               
00145Fr 3  B5 00                        lda 0,x                 ; TOS is new ciblen
001461r 3  85 rr                        sta ciblen
001463r 3  B5 01                        lda 1,x
001465r 3  85 rr                        sta ciblen+1
001467r 3               
001467r 3  B5 02                        lda 2,x                 ; NOS is new cib
001469r 3  85 rr                        sta cib
00146Br 3  B5 03                        lda 3,x
00146Dr 3  85 rr                        sta cib+1
00146Fr 3               
00146Fr 3  64 rr                        stz toin                ; Set >IN to zero
001471r 3  64 rr                        stz toin+1
001473r 3               
001473r 3  20 rr rr                     jsr xt_two_drop         ; 2DROP ( xt )
001476r 3  20 rr rr                     jsr xt_execute
001479r 3               
001479r 3  20 rr rr                     jsr xt_r_to_input
00147Cr 3               
00147Cr 3               z_execute_parsing:
00147Cr 3  60                           rts
00147Dr 3               
00147Dr 3               
00147Dr 3               ; ## EXIT ( -- ) "Return control to the calling word immediately"
00147Dr 3               ; ## "exit"  auto  ANS core
00147Dr 3                       ; """https://forth-standard.org/standard/core/EXIT
00147Dr 3                       ; If we're in a loop, we need to UNLOOP first and get everything
00147Dr 3                       ; we we might have put on the Return Stack off as well. This should
00147Dr 3                       ; be natively compiled.
00147Dr 3                       ; """
00147Dr 3               
00147Dr 3               xt_exit:
00147Dr 3  60                           rts             ; keep before z_exit
00147Er 3               z_exit:                         ; never reached
00147Er 3               
00147Er 3               
00147Er 3               
00147Er 3               ; ## FALSE ( -- f ) "Push flag FALSE to Data Stack"
00147Er 3               ; ## "false"  auto  ANS core ext
00147Er 3                       ; """https://forth-standard.org/standard/core/FALSE"""
00147Er 3               xt_false:
00147Er 3  CA                           dex
00147Fr 3  CA                           dex
001480r 3  74 00                        stz 0,x
001482r 3  74 01                        stz 1,x
001484r 3               
001484r 3  60           z_false:        rts
001485r 3               
001485r 3               
001485r 3               ; ## FETCH ( addr -- n ) "Push cell content from memory to stack"
001485r 3               ; ## "@"  auto  ANS core
001485r 3                       ; """https://forth-standard.org/standard/core/Fetch"""
001485r 3               xt_fetch:
001485r 3  20 rr rr                     jsr underflow_1
001488r 3               
001488r 3  A1 00                        lda (0,x)               ; LSB
00148Ar 3  A8                           tay
00148Br 3  F6 00                        inc 0,x
00148Dr 3  D0 02                        bne @1
00148Fr 3  F6 01                        inc 1,x
001491r 3               @1:
001491r 3  A1 00                        lda (0,x)               ; MSB
001493r 3  95 01                        sta 1,x
001495r 3  94 00                        sty 0,x
001497r 3               
001497r 3  60           z_fetch:        rts
001498r 3               
001498r 3               
001498r 3               ; ## FIND ( caddr -- addr 0 | xt 1 | xt -1 ) "Find word in Dictionary"
001498r 3               ; ## "find"  auto  ANS core
001498r 3                       ; """https://forth-standard.org/standard/core/FIND
001498r 3                       ; Included for backwards compatibility only, because it still
001498r 3                       ; can be found in so may examples. It should, however, be replaced
001498r 3                       ; by FIND-NAME. Counted string either returns address with a FALSE
001498r 3                       ; flag if not found in the Dictionary, or the xt with a flag to
001498r 3                       ; indicate if this is immediate or not. FIND is a wrapper around
001498r 3                       ; FIND-NAME, we get this all over with as quickly as possible. See
001498r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
001498r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001498r 3                       ; """
001498r 3               
001498r 3               xt_find:
001498r 3  20 rr rr                     jsr underflow_1
00149Br 3               
00149Br 3                               ; Save address in case conversion fails. We use the
00149Br 3                               ; Return Stack instead of temporary variables like TMP1
00149Br 3                               ; because this is shorter and anybody still using FIND
00149Br 3                               ; can't be worried about speed anyway
00149Br 3  B5 01                        lda 1,x                 ; MSB
00149Dr 3  48                           pha
00149Er 3  B5 00                        lda 0,x                 ; LSB
0014A0r 3  48                           pha
0014A1r 3               
0014A1r 3                               ; Convert ancient-type counted string address to
0014A1r 3                               ; modern format
0014A1r 3  20 rr rr                     jsr xt_count            ; ( caddr -- addr u )
0014A4r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt | 0 )
0014A7r 3               
0014A7r 3  B5 00                        lda 0,x
0014A9r 3  15 01                        ora 1,x
0014ABr 3  D0 0B                        bne @found_word
0014ADr 3               
0014ADr 3                               ; No word found. Return address of the string and a false
0014ADr 3                               ; flag
0014ADr 3  20 rr rr                     jsr xt_false            ; ( 0 0 )
0014B0r 3               
0014B0r 3                               ; The address needs to be restored.
0014B0r 3  68                           pla                     ; LSB of address
0014B1r 3  95 02                        sta 2,x
0014B3r 3  68                           pla
0014B4r 3  95 03                        sta 3,x                 ; MSB of address
0014B6r 3               
0014B6r 3  80 27                        bra @done               ; ( addr 0 )
0014B8r 3               
0014B8r 3               @found_word:
0014B8r 3                               ; We don't need the address after all, dump it
0014B8r 3  68                           pla
0014B9r 3  68                           pla
0014BAr 3               
0014BAr 3                               ; We arrive here with ( nt ) on the TOS. Now we have to
0014BAr 3                               ; convert the return values to FIND's format
0014BAr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0014BDr 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
0014C0r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
0014C3r 3               
0014C3r 3  A0 00                        ldy #0                  ; Prepare flag
0014C5r 3               
0014C5r 3                               ; The flags are in the second byte of the header
0014C5r 3  F6 00                        inc 0,x
0014C7r 3  D0 02                        bne @1
0014C9r 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
0014CBr 3               @1:
0014CBr 3  A1 00                        lda (0,x)               ; ( xt char )
0014CDr 3  29 04                        and #IM
0014CFr 3  D0 08                        bne @immediate          ; bit set, we're immediate
0014D1r 3               
0014D1r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
0014D3r 3  95 00                        sta 0,x
0014D5r 3  95 01                        sta 1,x
0014D7r 3  80 06                        bra @done
0014D9r 3               
0014D9r 3               @immediate:
0014D9r 3  A9 01                        lda #1                  ; We're immediate, return 1
0014DBr 3  95 00                        sta 0,x
0014DDr 3  74 01                        stz 1,x
0014DFr 3               @done:
0014DFr 3  60           z_find:         rts
0014E0r 3               
0014E0r 3               
0014E0r 3               
0014E0r 3               ; ## FIND_NAME ( addr u -- nt|0 ) "Get the name token of input word"
0014E0r 3               ; ## "find-name"  auto  Gforth
0014E0r 3               
0014E0r 3               xt_find_name:
0014E0r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0014E0r 3                       ; Given a string, find the Name Token (nt) of a word or return
0014E0r 3                       ; zero if the word is not in the dictionary. We use this instead of
0014E0r 3                       ; ancient FIND to look up words in the Dictionary passed by
0014E0r 3                       ; PARSE-NAME. Note this returns the nt, not the xt of a word like
0014E0r 3                       ; FIND. To convert, use NAME>INT. This is a Gforth word. See
0014E0r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0014E0r 3                       ; FIND calls this word
0014E0r 3                       ; """
0014E0r 3  20 rr rr                     jsr underflow_2
0014E3r 3               
0014E3r 3                               ; check for special case of an empty string (length zero)
0014E3r 3  B5 00                        lda 0,x
0014E5r 3  15 01                        ora 1,x
0014E7r 3  D0 03                        bne @nonempty
0014E9r 3               
0014E9r 3  4C rr rr                     jmp @fail_done
0014ECr 3               
0014ECr 3               @nonempty:
0014ECr 3                               ; Set up for traversing the wordlist search order.
0014ECr 3  64 rr                        stz tmp3                ; Start at the beginning
0014EEr 3               
0014EEr 3               @wordlist_loop:
0014EEr 3  A0 1E                        ldy #num_order_offset   ; Compare to byte variable #ORDER
0014F0r 3  A5 rr                        lda tmp3
0014F2r 3  D1 rr                        cmp (up),y              ; Check to see if we are done
0014F4r 3  D0 03                        bne @have_string
0014F6r 3               
0014F6r 3                               ; We ran out of wordlists to search.
0014F6r 3  4C rr rr                     jmp @fail_done
0014F9r 3               
0014F9r 3               @have_string:
0014F9r 3                               ; set up first loop iteration
0014F9r 3               
0014F9r 3                               ; Get the current wordlist id
0014F9r 3  18                           clc             ; SEARCH-ORDER is array of bytes.
0014FAr 3  69 1F                        adc #search_order_offset
0014FCr 3  A8                           tay
0014FDr 3  B1 rr                        lda (up),y      ; Get the id byte, which is the offset
0014FFr 3                                               ; into the cell array WORDLISTS
0014FFr 3               
0014FFr 3                               ; Get the DP for that wordlist.
0014FFr 3  0A                           asl                     ; Turn offset into cells offset.
001500r 3  18                           clc
001501r 3  69 06                        adc #wordlists_offset
001503r 3  A8                           tay
001504r 3  B1 rr                        lda (up),y
001506r 3  85 rr                        sta tmp1
001508r 3  C8                           iny
001509r 3  B1 rr                        lda (up),y
00150Br 3  85 rr                        sta tmp1+1
00150Dr 3               
00150Dr 3  B5 02                        lda 2,x                 ; Address of mystery string
00150Fr 3  85 rr                        sta tmp2
001511r 3  B5 03                        lda 3,x
001513r 3  85 rr                        sta tmp2+1
001515r 3               
001515r 3               @loop:
001515r 3                               ; first quick test: Are strings the same length?
001515r 3  B2 rr                        lda (tmp1)
001517r 3  D5 00                        cmp 0,x
001519r 3  D0 54                        bne @next_entry
00151Br 3               
00151Br 3               @compare_string:
00151Br 3                               ; are the same length, so we now have to compare each
00151Br 3                               ; character
00151Br 3               
00151Br 3                               ; second quick test: Is the first character the same?
00151Br 3  B2 rr                        lda (tmp2)      ; first character of mystery string
00151Dr 3               
00151Dr 3                               ; Lowercase the incoming charcter.
00151Dr 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
00151Fr 3  B0 07                        bcs @compare_first
001521r 3  C9 41                        cmp #$41        ; ASCII 'A'
001523r 3  90 03                        bcc @compare_first
001525r 3               
001525r 3                               ; An uppercase letter has been located.  Make it
001525r 3                               ; lowercase.
001525r 3  18                           clc
001526r 3  69 20                        adc #$20
001528r 3               
001528r 3               @compare_first:
001528r 3  A0 08                        ldy #8          ; Offset in nt to name
00152Ar 3  D1 rr                        cmp (tmp1),y    ; first character of current word
00152Cr 3  D0 41                        bne @next_entry
00152Er 3               
00152Er 3                               ; String length is the same and the first character is the
00152Er 3                               ; same. If the length of the string is 1, we're already done
00152Er 3  B5 00                        lda 0,x
001530r 3  3A                           dec
001531r 3  F0 2C                        beq @success
001533r 3               
001533r 3                               ; No such luck: The strings are the same length and the first
001533r 3                               ; char is the same, but the word is more than one char long.
001533r 3                               ; So we suck it up and compare every single character. We go
001533r 3                               ; from back to front, because words like CELLS and CELL+ would
001533r 3                               ; take longer otherwise. We can also shorten the loop by one
001533r 3                               ; because we've already compared the first char.
001533r 3               
001533r 3                               ; The string of the word we're testing against is 8 bytes down
001533r 3  A5 rr                        lda tmp1
001535r 3  48                           pha             ; Preserve tmp1 on the return stack.
001536r 3  18                           clc
001537r 3  69 08                        adc #8
001539r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
00153Br 3  A5 rr                        lda tmp1+1
00153Dr 3  48                           pha             ; Preserve tmp1+1 on the return stack.
00153Er 3  69 00                        adc #0          ; we only need the carry
001540r 3  85 rr                        sta tmp1+1
001542r 3               
001542r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
001544r 3  88                           dey
001545r 3               
001545r 3               @string_loop:
001545r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
001547r 3               
001547r 3                               ; Lowercase the incoming charcter.
001547r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
001549r 3  B0 07                        bcs @check_char
00154Br 3  C9 41                        cmp #$41        ; ASCII 'A'
00154Dr 3  90 03                        bcc @check_char
00154Fr 3               
00154Fr 3                               ; An uppercase letter has been located.  Make it
00154Fr 3                               ; lowercase.
00154Fr 3  18                           clc
001550r 3  69 20                        adc #$20
001552r 3               
001552r 3               @check_char:
001552r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
001554r 3  D0 13                        bne @next_entry_tmp1
001556r 3               
001556r 3  88                           dey
001557r 3  D0 EC                        bne @string_loop
001559r 3               
001559r 3               @success_tmp1:
001559r 3  68                           pla             ; Restore tmp1 from the return stack.
00155Ar 3  85 rr                        sta tmp1+1
00155Cr 3  68                           pla
00155Dr 3  85 rr                        sta tmp1
00155Fr 3               
00155Fr 3               @success:
00155Fr 3                               ; The strings match. Put correct nt NOS, because we'll drop
00155Fr 3                               ; TOS before we leave
00155Fr 3  A5 rr                        lda tmp1
001561r 3  95 02                        sta 2,x
001563r 3  A5 rr                        lda tmp1+1
001565r 3  95 03                        sta 3,x
001567r 3               
001567r 3  80 20                        bra @done
001569r 3               
001569r 3               @next_entry_tmp1:
001569r 3  68                           pla             ; Restore tmp1 from the return stack.
00156Ar 3  85 rr                        sta tmp1+1
00156Cr 3  68                           pla
00156Dr 3  85 rr                        sta tmp1
00156Fr 3               
00156Fr 3               @next_entry:
00156Fr 3                               ; Not the same, so we get the next word. Next header
00156Fr 3                               ; address is two bytes down
00156Fr 3  A0 02                        ldy #2
001571r 3  B1 rr                        lda (tmp1),y
001573r 3  48                           pha
001574r 3  C8                           iny
001575r 3  B1 rr                        lda (tmp1),y
001577r 3  85 rr                        sta tmp1+1
001579r 3  68                           pla
00157Ar 3  85 rr                        sta tmp1
00157Cr 3               
00157Cr 3                               ; If we got a zero, we've walked the whole Dictionary and
00157Cr 3                               ; return as a failure, otherwise try again
00157Cr 3  05 rr                        ora tmp1+1
00157Er 3  D0 95                        bne @loop
001580r 3               
001580r 3                               ; Move on to the next wordlist in the search order.
001580r 3  E6 rr                        inc tmp3
001582r 3  4C rr rr                     jmp @wordlist_loop
001585r 3               
001585r 3               @fail_done:
001585r 3  74 02                        stz 2,x         ; failure flag
001587r 3  74 03                        stz 3,x
001589r 3               @done:
001589r 3  E8                           inx
00158Ar 3  E8                           inx
00158Br 3               
00158Br 3  60           z_find_name:    rts
00158Cr 3               
00158Cr 3               
00158Cr 3               
00158Cr 3               ; ## FLUSH ( -- ) "Save dirty buffers and empty buffers"
00158Cr 3               ; ## "flush"  auto  ANS block
00158Cr 3                       ; """https://forth-standard.org/standard/block/FLUSH"""
00158Cr 3               xt_flush:
00158Cr 3  20 rr rr                     jsr xt_save_buffers
00158Fr 3               
00158Fr 3                               ; Set the buffer status to empty.
00158Fr 3  A0 2C                        ldy #buffstatus_offset
001591r 3  A9 00                        lda #0
001593r 3  91 rr                        sta (up),y      ; Only LSB is used.
001595r 3               z_flush:
001595r 3  60                           rts
001596r 3               
001596r 3               
001596r 3               ; ## FM_SLASH_MOD ( d n1  -- rem n2 ) "Floored signed division"
001596r 3               ; ## "fm/mod"  auto  ANS core
001596r 3                       ; """https://forth-standard.org/standard/core/FMDivMOD
001596r 3                       ; Note that by default, Tali Forth uses SM/REM for most things.
001596r 3                       ;
001596r 3                       ; There are various ways to realize this. We follow EForth with
001596r 3                       ;    DUP 0< DUP >R  IF NEGATE >R DNEGATE R> THEN >R DUP
001596r 3                       ;    0<  IF R@ + THEN  R> UM/MOD R> IF SWAP NEGATE SWAP THEN
001596r 3                       ; See (http://www.forth.org/eforth.html). However you can also
001596r 3                       ; go FM/MOD via SM/REM (http://www.figuk.plus.com/build/arith.htm):
001596r 3                       ;     DUP >R  SM/REM DUP 0< IF SWAP R> + SWAP 1+ ELSE  R> DROP THEN
001596r 3                       ; """
001596r 3               
001596r 3               xt_fm_slash_mod:
001596r 3  20 rr rr                     jsr underflow_3
001599r 3               
001599r 3                               ; if sign of n1 is negative, negate both n1 and d
001599r 3  64 rr                        stz tmp2        ; default: n is positive
00159Br 3  B5 01                        lda 1,x         ; MSB of n1
00159Dr 3  10 0E                        bpl @check_d
00159Fr 3               
00159Fr 3  E6 rr                        inc tmp2        ; set flag to negative for n1
0015A1r 3  20 rr rr                     jsr xt_negate   ; NEGATE
0015A4r 3  20 rr rr                     jsr xt_to_r     ; >R
0015A7r 3  20 rr rr                     jsr xt_dnegate  ; DNEGATE
0015AAr 3  20 rr rr                     jsr xt_r_from   ; R>
0015ADr 3               
0015ADr 3               @check_d:
0015ADr 3                               ; If d is negative, add n1 to high cell of d
0015ADr 3  B5 03                        lda 3,x         ; MSB of high word of d
0015AFr 3  10 0D                        bpl @multiply
0015B1r 3               
0015B1r 3  18                           clc
0015B2r 3  B5 00                        lda 0,x         ; LSB of n1
0015B4r 3  75 02                        adc 2,x         ; LSB of dh
0015B6r 3  95 02                        sta 2,x
0015B8r 3               
0015B8r 3  B5 01                        lda 1,x         ; MSB of n1
0015BAr 3  75 03                        adc 3,x         ; MSB of dh
0015BCr 3  95 03                        sta 3,x
0015BEr 3               
0015BEr 3               @multiply:
0015BEr 3  20 rr rr                     jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
0015C1r 3               
0015C1r 3                               ; if n was negative, negate the result
0015C1r 3  A5 rr                        lda tmp2
0015C3r 3  F0 07                        beq @done
0015C5r 3               
0015C5r 3  E8                           inx             ; pretend that we SWAP
0015C6r 3  E8                           inx
0015C7r 3  20 rr rr                     jsr xt_negate
0015CAr 3  CA                           dex
0015CBr 3  CA                           dex
0015CCr 3               @done:
0015CCr 3  60           z_fm_slash_mod: rts
0015CDr 3               
0015CDr 3               
0015CDr 3               
0015CDr 3               ; ## FORTH ( -- ) "Replace first WID in search order with Forth-Wordlist"
0015CDr 3               ; ## "forth"  auto  ANS search ext
0015CDr 3                       ; """https://forth-standard.org/standard/search/FORTH"""
0015CDr 3               xt_forth:
0015CDr 3  A0 1F                        ldy #search_order_offset
0015CFr 3  A9 00                        lda #0          ; The WID for Forth is 0.
0015D1r 3               
0015D1r 3  91 rr                        sta (up),y
0015D3r 3               z_forth:
0015D3r 3  60                           rts
0015D4r 3               
0015D4r 3               
0015D4r 3               ; This is a special jsr target to skip the zeroing of BLK at the beginning
0015D4r 3               ; of evaluate.  It's used by LOAD to allow setting BLK while the block is
0015D4r 3               ; being evaluated.  Evaluate's normal behavior is to zero BLK.
0015D4r 3               load_evaluate:
0015D4r 3                               ; Set a flag (using tmp1) to not zero BLK
0015D4r 3  A9 FF                        lda #$FF
0015D6r 3  85 rr                        sta tmp1
0015D8r 3  80 11                        bra load_evaluate_start
0015DAr 3               
0015DAr 3               ; ## EVALUATE ( addr u -- ) "Execute a string"
0015DAr 3               ; ## "evaluate"  auto  ANS core
0015DAr 3                       ; """https://forth-standard.org/standard/core/EVALUATE
0015DAr 3                       ; Set SOURCE-ID to -1, make addr u the input source, set >IN to zero.
0015DAr 3                       ; After processing the line, revert to old input source. We use this
0015DAr 3                       ; to compile high-level Forth words and user-defined words during
0015DAr 3                       ; start up and cold boot. In contrast to ACCEPT, we need to, uh,
0015DAr 3                       ; accept more than 255 characters here, even though it's a pain in
0015DAr 3                       ; the 8-bit.
0015DAr 3                       ; """
0015DAr 3               
0015DAr 3               xt_evaluate:
0015DAr 3  20 rr rr                     jsr underflow_2
0015DDr 3               
0015DDr 3                               ; Clear the flag to zero BLK.  Only LOAD will set the flag,
0015DDr 3                               ; and will set the block number.
0015DDr 3  64 rr                        stz tmp1
0015DFr 3               
0015DFr 3                               ; If u is zero (which can happen a lot for the user-defined
0015DFr 3                               ; words), just leave again
0015DFr 3  B5 00                        lda 0,x
0015E1r 3  15 01                        ora 1,x
0015E3r 3  D0 06                        bne _eval_got_work
0015E5r 3               
0015E5r 3  E8                           inx
0015E6r 3  E8                           inx
0015E7r 3  E8                           inx
0015E8r 3  E8                           inx
0015E9r 3               
0015E9r 3  80 42                        bra _eval_done
0015EBr 3               
0015EBr 3               ; Special entry point for LOAD to bypass the zeroing of BLK.
0015EBr 3               load_evaluate_start:
0015EBr 3               _eval_got_work:
0015EBr 3                               ; Save the current value of BLK on the return stack.
0015EBr 3  A0 01                        ldy #blk_offset+1
0015EDr 3  B1 rr                        lda (up),y
0015EFr 3  48                           pha
0015F0r 3  88                           dey
0015F1r 3  B1 rr                        lda (up),y
0015F3r 3  48                           pha
0015F4r 3               
0015F4r 3                               ; See if we should zero BLK.
0015F4r 3  A5 rr                        lda tmp1
0015F6r 3  D0 05                        bne @nozero
0015F8r 3               
0015F8r 3                               ; Set BLK to zero.
0015F8r 3                               ; lda #0        ; A is already zero from loading tmp1
0015F8r 3  91 rr                        sta (up),y
0015FAr 3  C8                           iny
0015FBr 3  91 rr                        sta (up),y
0015FDr 3               
0015FDr 3               @nozero:
0015FDr 3                               ; Save the input state to the Return Stack
0015FDr 3  20 rr rr                     jsr xt_input_to_r
001600r 3               
001600r 3                               ; set SOURCE-ID to -1
001600r 3  A9 FF                        lda #$ff
001602r 3  85 rr                        sta insrc
001604r 3  85 rr                        sta insrc+1
001606r 3               
001606r 3                               ; set >IN to zero
001606r 3  64 rr                        stz toin
001608r 3  64 rr                        stz toin+1
00160Ar 3               
00160Ar 3                               ; move TOS and NOS to input buffers
00160Ar 3  B5 00                        lda 0,x
00160Cr 3  85 rr                        sta ciblen
00160Er 3  B5 01                        lda 1,x
001610r 3  85 rr                        sta ciblen+1
001612r 3               
001612r 3  B5 02                        lda 2,x
001614r 3  85 rr                        sta cib
001616r 3  B5 03                        lda 3,x
001618r 3  85 rr                        sta cib+1
00161Ar 3               
00161Ar 3  E8                           inx             ; A clean stack is a clean mind
00161Br 3  E8                           inx
00161Cr 3  E8                           inx
00161Dr 3  E8                           inx
00161Er 3               
00161Er 3  20 rr rr                     jsr interpret   ; ( -- )
001621r 3               
001621r 3                               ; restore variables
001621r 3  20 rr rr                     jsr xt_r_to_input
001624r 3               
001624r 3                               ; Restore BLK from the return stack.
001624r 3  A0 00                        ldy #blk_offset
001626r 3  68                           pla
001627r 3  91 rr                        sta (up),y
001629r 3  C8                           iny
00162Ar 3  68                           pla
00162Br 3  91 rr                        sta (up),y
00162Dr 3               
00162Dr 3               _eval_done:
00162Dr 3  60           z_evaluate:     rts
00162Er 3               
00162Er 3               
00162Er 3               
00162Er 3               ; ## FORTH_WORDLIST ( -- u ) "WID for the Forth Wordlist"
00162Er 3               ; ## "forth-wordlist"  auto  ANS search
00162Er 3                       ; """https://forth-standard.org/standard/search/FORTH-WORDLIST"""
00162Er 3                       ; This is a dummy entry, the actual code is shared with ZERO.
00162Er 3               
00162Er 3               
00162Er 3               ; ## GET_CURRENT ( -- wid ) "Get the id of the compilation wordlist"
00162Er 3               ; ## "get-current" auto ANS search
00162Er 3                       ; """https://forth-standard.org/standard/search/GET-CURRENT"""
00162Er 3               
00162Er 3               xt_get_current:
00162Er 3                               ; This is a little different than some of the variables
00162Er 3                               ; in the user area as we want the value rather than
00162Er 3                               ; the address.
00162Er 3  CA                           dex
00162Fr 3  CA                           dex
001630r 3  A0 04                        ldy #current_offset
001632r 3  B1 rr                        lda (up),y
001634r 3  95 00                        sta 0,x         ; CURRENT is a byte variable
001636r 3  74 01                        stz 1,x         ; so the MSB is zero.
001638r 3               
001638r 3  60           z_get_current:  rts
001639r 3               
001639r 3               
001639r 3               
001639r 3               ; ## GET_ORDER ( -- wid_n .. wid_1 n) "Get the current search order"
001639r 3               ; ## "get-order" auto ANS search
001639r 3                       ; """https://forth-standard.org/standard/search/GET-ORDER"""
001639r 3               
001639r 3               xt_get_order:
001639r 3                               ; Get #ORDER - the number of wordlists in the search order.
001639r 3  A0 1E                        ldy #num_order_offset
00163Br 3  B1 rr                        lda (up),y
00163Dr 3  85 rr                        sta tmp1
00163Fr 3  F0 16                        beq @done       ; If zero, there are no wordlists.
001641r 3               
001641r 3               @loop:
001641r 3                               ; Count down towards the front of the list.
001641r 3                               ; By decrementing first, we also turn the length into an offset.
001641r 3  C6 rr                        dec tmp1        ; Count down by bytes.
001643r 3               
001643r 3                               ; Get a pointer to the current wordlist, working back to front.
001643r 3  A9 1F                        lda #search_order_offset
001645r 3  18                           clc
001646r 3  65 rr                        adc tmp1
001648r 3  A8                           tay
001649r 3               
001649r 3                               ; Put that wordlist id on the stack.
001649r 3  CA                           dex
00164Ar 3  CA                           dex
00164Br 3  B1 rr                        lda (up),y
00164Dr 3  95 00                        sta 0,x         ; Search order array is bytes, so
00164Fr 3  74 01                        stz 1,x         ; put a zero in the high byte.
001651r 3               
001651r 3                               ; See if that was the last one to process (first in the list).
001651r 3  A9 00                        lda #0
001653r 3  C5 rr                        cmp tmp1
001655r 3  D0 EA                        bne @loop
001657r 3               
001657r 3               @done:
001657r 3                               ; Put the number of items on the stack.
001657r 3  CA                           dex
001658r 3  CA                           dex
001659r 3  A0 1E                        ldy #num_order_offset
00165Br 3  B1 rr                        lda (up),y
00165Dr 3  95 00                        sta 0,x
00165Fr 3  74 01                        stz 1,x         ; We only support 8 wordlists.
001661r 3               
001661r 3  60           z_get_order:    rts
001662r 3               
001662r 3               
001662r 3               
001662r 3               ; ## GREATER_THAN ( n n -- f ) "See if NOS is greater than TOS"
001662r 3               ; ## ">"  auto  ANS core
001662r 3                       ; """https://forth-standard.org/standard/core/more"""
001662r 3               
001662r 3               xt_greater_than:
001662r 3  20 rr rr                     jsr underflow_2
001665r 3               
001665r 3  A0 00                        ldy #0          ; default false
001667r 3  20 rr rr                     jsr compare_16bit
00166Ar 3               
00166Ar 3                               ; for signed numbers, NOS>TOS gives us Z=0 and N=1
00166Ar 3  F0 03                        beq @false
00166Cr 3  10 01                        bpl @false
00166Er 3               
00166Er 3                               ; true
00166Er 3  88                           dey
00166Fr 3               @false:
00166Fr 3  98                           tya
001670r 3               
001670r 3  E8                           inx
001671r 3  E8                           inx
001672r 3  95 00                        sta 0,x
001674r 3  95 01                        sta 1,x
001676r 3               
001676r 3  60           z_greater_than: rts
001677r 3               
001677r 3               
001677r 3               
001677r 3               ; ## HERE ( -- addr ) "Put Compiler Pointer on Data Stack"
001677r 3               ; ## "here"  auto  ANS core
001677r 3                       ; """https://forth-standard.org/standard/core/HERE
001677r 3                       ; This code is also used by the assembler directive ARROW
001677r 3                       ; ("->") though as immediate"""
001677r 3               xt_here:
001677r 3               xt_asm_arrow:
001677r 3  CA                           dex
001678r 3  CA                           dex
001679r 3  A5 rr                        lda cp
00167Br 3  95 00                        sta 0,x
00167Dr 3  A5 rr                        lda cp+1
00167Fr 3  95 01                        sta 1,x
001681r 3               
001681r 3               z_asm_arrow:
001681r 3  60           z_here:         rts
001682r 3               
001682r 3               
001682r 3               ; ## HEX ( -- ) "Change base radix to hexadecimal"
001682r 3               ; ## "hex"  auto  ANS core ext
001682r 3                       ; """https://forth-standard.org/standard/core/HEX"""
001682r 3               xt_hex:
001682r 3  A9 10                        lda #16
001684r 3  85 rr                        sta base
001686r 3  64 rr                        stz base+1              ; paranoid
001688r 3               
001688r 3  60           z_hex:          rts
001689r 3               
001689r 3               
001689r 3               ; ## HEXSTORE ( addr1 u1 addr2 -- u2 ) "Store a list of numbers"
001689r 3               ; ## "hexstore"  auto  Tali
001689r 3                       ; """Given a string addr1 u1 with numbers in the current base seperated
001689r 3                       ; by spaces, store the numbers at the address addr2, returning the
001689r 3                       ; number of elements. Non-number elements are skipped, an zero-length
001689r 3                       ; string produces a zero output.
001689r 3                       ; """
001689r 3               
001689r 3               xt_hexstore:
001689r 3  20 rr rr                     jsr underflow_3
00168Cr 3               
00168Cr 3  20 rr rr                     jsr xt_dup              ; Save copy of original address
00168Fr 3  20 rr rr                     jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
001692r 3               
001692r 3               @loop:
001692r 3                               ; Loop until string is totally consumed
001692r 3  B5 00                        lda 0,x
001694r 3  15 01                        ora 1,x
001696r 3  F0 36                        beq @done
001698r 3               
001698r 3  20 rr rr                     jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
00169Br 3               
00169Br 3                               ; Prepare the conversion of the number.
00169Br 3  20 rr rr                     jsr xt_two_to_r
00169Er 3  20 rr rr                     jsr xt_zero
0016A1r 3  20 rr rr                     jsr xt_zero
0016A4r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
0016A7r 3  20 rr rr                     jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
0016AAr 3               
0016AAr 3                               ; If u4 is not zero, we have leftover chars and have to do
0016AAr 3                               ; things differently
0016AAr 3  B5 00                        lda 0,x
0016ACr 3  15 01                        ora 1,x
0016AEr 3  D0 17                        bne @have_chars_left
0016B0r 3               
0016B0r 3                               ; Normal case, this number is all done
0016B0r 3  20 rr rr                     jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
0016B3r 3  20 rr rr                     jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
0016B6r 3               
0016B6r 3                               ; Store the new value
0016B6r 3  20 rr rr                     jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
0016B9r 3  20 rr rr                     jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
0016BCr 3               
0016BCr 3                               ; Increase counter
0016BCr 3  20 rr rr                     jsr xt_r_from           ; R>
0016BFr 3  20 rr rr                     jsr xt_one_plus         ; 1+
0016C2r 3  20 rr rr                     jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
0016C5r 3  80 CB                        bra @loop
0016C7r 3               
0016C7r 3               @have_chars_left:
0016C7r 3                               ; Pathological case: Drop the rest of this number off the stack
0016C7r 3                               ; and continue with the next word. Doesn't print a warning. We
0016C7r 3                               ; need to drop four cells, that is, eight bytes
0016C7r 3  8A                           txa
0016C8r 3  18                           clc
0016C9r 3  69 08                        adc #8
0016CBr 3  AA                           tax
0016CCr 3  80 C4                        bra @loop
0016CEr 3               
0016CEr 3               @done:
0016CEr 3                               ; Clean up return stack and calculate number of chars stored
0016CEr 3  E8                           inx
0016CFr 3  E8                           inx
0016D0r 3  E8                           inx
0016D1r 3  E8                           inx                     ; 2DROP
0016D2r 3               
0016D2r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr2+n addr2 )
0016D5r 3  20 rr rr                     jsr xt_swap
0016D8r 3  20 rr rr                     jsr xt_minus            ; ( n )
0016DBr 3               
0016DBr 3  60           z_hexstore:     rts
0016DCr 3               
0016DCr 3               
0016DCr 3               
0016DCr 3               ; ## HOLD ( char -- ) "Insert character at current output"
0016DCr 3               ; ## "hold"  auto  ANS core
0016DCr 3                       ; """https://forth-standard.org/standard/core/HOLD
0016DCr 3                       ; Insert a character at the current position of a pictured numeric
0016DCr 3                       ; output string on
0016DCr 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
0016DCr 3                       ;
0016DCr 3                       ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal
0016DCr 3                       ; variable tohold instead of HLD.
0016DCr 3                       ; """
0016DCr 3               xt_hold:
0016DCr 3  20 rr rr                     jsr underflow_1
0016DFr 3               
0016DFr 3  A5 rr                        lda tohold
0016E1r 3  D0 02                        bne @1
0016E3r 3  C6 rr                        dec tohold+1
0016E5r 3               @1:
0016E5r 3  C6 rr                        dec tohold
0016E7r 3               
0016E7r 3  B5 00                        lda 0,x
0016E9r 3  92 rr                        sta (tohold)
0016EBr 3  E8                           inx
0016ECr 3  E8                           inx
0016EDr 3               
0016EDr 3  60           z_hold:         rts
0016EEr 3               
0016EEr 3               
0016EEr 3               ; ## I ( -- n )(R: n -- n)  "Copy loop counter to stack"
0016EEr 3               ; ## "i"  auto  ANS core
0016EEr 3                       ; """https://forth-standard.org/standard/core/I
0016EEr 3                       ; Note that this is not the same as R@ because we use a fudge
0016EEr 3                       ; factor for loop control; see the Control Flow section of the
0016EEr 3                       ; manual for details.
0016EEr 3                       ;
0016EEr 3                       ; We should make this native compile for speed.
0016EEr 3                       ; """
0016EEr 3               
0016EEr 3               xt_i:
0016EEr 3  CA                           dex
0016EFr 3  CA                           dex
0016F0r 3               
0016F0r 3                               ; Get the fudged index off of the top of the stack. It's
0016F0r 3                               ; easier to do math on the stack directly than to pop and
0016F0r 3                               ; push stuff around
0016F0r 3  86 rr                        stx tmpdsp
0016F2r 3  BA                           tsx
0016F3r 3               
0016F3r 3  38                           sec
0016F4r 3  BD 01 01                     lda $0101,x     ; LSB
0016F7r 3  FD 03 01                     sbc $0103,x
0016FAr 3  A8                           tay
0016FBr 3               
0016FBr 3  BD 02 01                     lda $0102,x     ; MSB
0016FEr 3  FD 04 01                     sbc $0104,x
001701r 3               
001701r 3  A6 rr                        ldx tmpdsp
001703r 3               
001703r 3  95 01                        sta 1,x         ; MSB of de-fudged index
001705r 3  94 00                        sty 0,x         ; LSB of de-fudged index
001707r 3               
001707r 3  60           z_i:            rts
001708r 3               
001708r 3               
001708r 3               
001708r 3               ; ## IF (C: -- orig) (flag -- ) "Conditional flow control"
001708r 3               ; ## "if"  auto  ANS core
001708r 3                       ; """http://forth-standard.org/standard/core/IF"""
001708r 3               
001708r 3               xt_if:
001708r 3                               ; Compile a 0BRANCH
001708r 3  A0 rr                        ldy #>zero_branch_runtime
00170Ar 3  A9 rr                        lda #<zero_branch_runtime
00170Cr 3  20 rr rr                     jsr cmpl_subroutine
00170Fr 3               
00170Fr 3                               ; Put the origination address on the stack for else/then
00170Fr 3  20 rr rr                     jsr xt_here
001712r 3               
001712r 3                               ; Stuff zero in for the branch address right now.
001712r 3                               ; THEN or ELSE will fix it later.
001712r 3  20 rr rr                     jsr xt_zero
001715r 3  20 rr rr                     jsr xt_comma
001718r 3  60           z_if:           rts
001719r 3               
001719r 3               
001719r 3               zero_branch_runtime:
001719r 3                       ; """In some Forths, this is called (0BRANCH). Tali Forth originally
001719r 3                       ; included 0BRANCH as a high-level word that inserted this code at
001719r 3                       ; runtime.
001719r 3                       ; """
001719r 3               
001719r 3                               ; We use the return value on the 65c02 stack to determine
001719r 3                               ; where we want to return to.
001719r 3  68                           pla
00171Ar 3  85 rr                        sta tmpbranch
00171Cr 3  68                           pla
00171Dr 3  85 rr                        sta tmpbranch+1
00171Fr 3               
00171Fr 3                               ; See if the flag is zero, which is the whole purpose of
00171Fr 3                               ; this all
00171Fr 3  B5 00                        lda 0,x
001721r 3  15 01                        ora 1,x
001723r 3  F0 0F                        beq @zero
001725r 3               
001725r 3                               ; Flag is TRUE, so we skip over the next two bytes. This is
001725r 3                               ; the part between IF and THEN
001725r 3  A5 rr                        lda tmpbranch   ; LSB
001727r 3  18                           clc
001728r 3  69 02                        adc #2
00172Ar 3  85 rr                        sta tmp1
00172Cr 3  A5 rr                        lda tmpbranch+1 ; MSB
00172Er 3  69 00                        adc #0          ; For carry
001730r 3  85 rr                        sta tmp1+1
001732r 3               
001732r 3  80 13                        bra @done
001734r 3               
001734r 3               @zero:
001734r 3                               ; Flag is FALSE (0) so we take the jump to the address given in
001734r 3                               ; the next two bytes. However, the address points to the last
001734r 3                               ; byte of the JSR instruction, not to the next byte afterwards
001734r 3  A0 01                        ldy #1
001736r 3  B1 rr                        lda (tmpbranch),y
001738r 3  85 rr                        sta tmp1
00173Ar 3  C8                           iny
00173Br 3  B1 rr                        lda (tmpbranch),y
00173Dr 3  85 rr                        sta tmp1+1
00173Fr 3               
00173Fr 3                               ; Now we have to subtract one byte from the address
00173Fr 3                               ; given because of the way the 6502 calculates RTS
00173Fr 3  A5 rr                        lda tmp1
001741r 3  D0 02                        bne @1
001743r 3  C6 rr                        dec tmp1+1
001745r 3               @1:
001745r 3  C6 rr                        dec tmp1
001747r 3               
001747r 3               @done:
001747r 3                               ; However we got here, tmp1 has the value we push to jump
001747r 3                               ; to
001747r 3  A5 rr                        lda tmp1+1
001749r 3  48                           pha             ; MSB first
00174Ar 3  A5 rr                        lda tmp1
00174Cr 3  48                           pha
00174Dr 3               
00174Dr 3                               ; clean up the stack and jump
00174Dr 3  E8                           inx
00174Er 3  E8                           inx
00174Fr 3               
00174Fr 3  60                           rts
001750r 3               
001750r 3               
001750r 3               
001750r 3               ; ## IMMEDIATE ( -- ) "Mark most recent word as IMMEDIATE"
001750r 3               ; ## "immediate"  auto  ANS core
001750r 3                       ; """https://forth-standard.org/standard/core/IMMEDIATE
001750r 3                       ; Make sure the most recently defined word is immediate. Will only
001750r 3                       ; affect the last word in the dictionary. Note that if the word is
001750r 3                       ; defined in ROM, this will have no affect, but will not produce an
001750r 3                       ; error message.
001750r 3                       ; """
001750r 3               xt_immediate:
001750r 3  20 rr rr                     jsr current_to_dp
001753r 3  A0 01                        ldy #1          ; offset for status byte
001755r 3  B1 rr                        lda (dp),y
001757r 3  09 04                        ora #IM        ; make sure bit 7 is set
001759r 3  91 rr                        sta (dp),y
00175Br 3               
00175Br 3  60           z_immediate:    rts
00175Cr 3               
00175Cr 3               
00175Cr 3               ; ## INPUT ( -- addr ) "Return address of input vector"
00175Cr 3               ; ## "input" tested Tali Forth
00175Cr 3               
00175Cr 3               xt_input:
00175Cr 3  CA                           dex
00175Dr 3  CA                           dex
00175Er 3  A9 rr                        lda #<input
001760r 3  95 00                        sta 0,x
001762r 3  A9 rr                        lda #>input
001764r 3  95 01                        sta 1,x
001766r 3               
001766r 3  60           z_input:        rts
001767r 3               
001767r 3               
001767r 3               
001767r 3               ; ## INPUT_TO_R ( -- ) ( R: -- n n n n ) "Save input state to the Return Stack"
001767r 3               ; ## "input>r"  tested  Tali Forth
001767r 3                  	; """Save the current input state as defined by insrc, cib, ciblen, and
001767r 3                       ; toin to the Return Stack. Used by EVALUTE.
001767r 3                       ;
001767r 3                       ; The naive way of doing
001767r 3                       ; this is to push each two-byte variable to the stack in the form of
001767r 3                       ;
001767r 3                       ;       lda insrc
001767r 3                       ;       pha
001767r 3                       ;       lda insrc+1
001767r 3                       ;       pha
001767r 3                       ;
001767r 3                       ; for a total of 24 byte of instruction in one direction and later
001767r 3                       ; a further 24 bytes to reverse the process. We shorten this at the
001767r 3                       ; cost of some speed by assuming the four variables are grouped
001767r 3                       ; together on the Zero Page and start with insrc (see definitions.asm
001767r 3                       ; for details). The reverse operation is r_to_input. These words must
001767r 3                       ; be flagged as Never Native. Uses tmp1
001767r 3                       ; """
001767r 3               
001767r 3               xt_input_to_r:
001767r 3                               ; We arrive here with the return address on the top of the
001767r 3                               ; 65c02's stack. We need to move it out of the way first
001767r 3  68                           pla
001768r 3  85 rr                        sta tmp1
00176Ar 3  68                           pla
00176Br 3  85 rr                        sta tmp1+1
00176Dr 3               
00176Dr 3                               ; This assumes that insrc is the first of eight bytes and
00176Dr 3                               ; toin+1 the last in the sequence we want to save from the Zero
00176Dr 3                               ; Page.
00176Dr 3  A0 07                        ldy #7
00176Fr 3               @loop:
00176Fr 3  B9 rr rr                     lda insrc,y     ; insrc+7 is toin+1
001772r 3  48                           pha
001773r 3  88                           dey
001774r 3  10 F9                        bpl @loop
001776r 3               
001776r 3                               ; Restore address for return jump
001776r 3  A5 rr                        lda tmp1+1
001778r 3  48                           pha
001779r 3  A5 rr                        lda tmp1
00177Br 3  48                           pha
00177Cr 3               
00177Cr 3  60           z_input_to_r: 	rts
00177Dr 3               
00177Dr 3               
00177Dr 3               
00177Dr 3               ; ## INT_TO_NAME ( xt -- nt ) "Get name token from execution token"
00177Dr 3               ; ## "int>name"  auto  Tali Forth
00177Dr 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
00177Dr 3                       ; This is called >NAME in Gforth, but we change it to
00177Dr 3                       ; INT>NAME to match NAME>INT
00177Dr 3                       ; """
00177Dr 3               
00177Dr 3               xt_int_to_name:
00177Dr 3  20 rr rr                     jsr underflow_1
001780r 3               
001780r 3                               ; Unfortunately, to find the header, we have to walk through
001780r 3                               ; all of the wordlists. We are running out of tmp variables.
001780r 3                               ; (I'm assuming there is a reason this is avoiding tmp1) so
001780r 3                               ; hold the current wordlist on the data stack. This searches
001780r 3                               ; all of the wordlists in id order.
001780r 3  CA                           dex
001781r 3  CA                           dex
001782r 3  74 00                        stz 0,x
001784r 3  74 01                        stz 1,x
001786r 3               
001786r 3               @wordlist_loop:
001786r 3                               ; A needs to have the current wordlist id in it at
001786r 3                               ; the top of this loop.
001786r 3  B5 00                        lda 0,x                 ; Get the current wordlist.
001788r 3               
001788r 3                               ; Get the DP for that wordlist.
001788r 3  0A                           asl                     ; Turn offset into cells offset.
001789r 3  18                           clc
00178Ar 3  69 06                        adc #wordlists_offset
00178Cr 3  A8                           tay
00178Dr 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
00178Fr 3  85 rr                        sta tmp2                ; into tmp2
001791r 3  C8                           iny
001792r 3  B1 rr                        lda (up),y
001794r 3  85 rr                        sta tmp2+1
001796r 3               
001796r 3                               ; Check for an empty wordlist (DP will be 0)
001796r 3  A5 rr                        lda tmp2
001798r 3  05 rr                        ora tmp2+1
00179Ar 3  F0 38                        beq @next_wordlist
00179Cr 3               
00179Cr 3  B5 02                        lda 2,x         ; Target xt is now behind wordlist id.
00179Er 3  85 rr                        sta tmp3        ; Save target xt in tmp3
0017A0r 3  B5 03                        lda 3,x
0017A2r 3  85 rr                        sta tmp3+1
0017A4r 3               
0017A4r 3               @loop:
0017A4r 3  A0 04                        ldy #4          ; xt is four bytes down
0017A6r 3  B1 rr                        lda (tmp2),y    ; LSB of xt of current nt
0017A8r 3  C5 rr                        cmp tmp3
0017AAr 3  D0 07                        bne @no_match
0017ACr 3               
0017ACr 3                               ; LSB is the same, now check MSB
0017ACr 3  C8                           iny
0017ADr 3  B1 rr                        lda (tmp2),y    ; MSB of xt of current nt
0017AFr 3  C5 rr                        cmp tmp3+1
0017B1r 3  F0 32                        beq @match
0017B3r 3               
0017B3r 3               @no_match:
0017B3r 3                               ; no match, so we need to get the next word. Next nt is two
0017B3r 3                               ; bytes down
0017B3r 3  18                           clc
0017B4r 3  A5 rr                        lda tmp2
0017B6r 3  69 02                        adc #2
0017B8r 3  85 rr                        sta tmp2
0017BAr 3  A5 rr                        lda tmp2+1
0017BCr 3  69 00                        adc #0          ; only care about carry
0017BEr 3  85 rr                        sta tmp2+1
0017C0r 3               
0017C0r 3  A0 00                        ldy #0
0017C2r 3  B1 rr                        lda (tmp2),y
0017C4r 3  48                           pha
0017C5r 3  C8                           iny
0017C6r 3  11 rr                        ora (tmp2),y
0017C8r 3  F0 09                        beq @zero
0017CAr 3               
0017CAr 3                               ; Not zero continue
0017CAr 3  B1 rr                        lda (tmp2),y
0017CCr 3  85 rr                        sta tmp2+1
0017CEr 3  68                           pla
0017CFr 3  85 rr                        sta tmp2
0017D1r 3  80 D1                        bra @loop
0017D3r 3               
0017D3r 3               @zero:
0017D3r 3                               ; if next word is zero, the xt has no nt in this wordlist
0017D3r 3  68                           pla             ; Leftover from above loop
0017D4r 3               
0017D4r 3               @next_wordlist:
0017D4r 3                               ; Move on to the next wordlist.
0017D4r 3  B5 00                        lda 0,x
0017D6r 3  1A                           inc
0017D7r 3  95 00                        sta 0,x
0017D9r 3  C9 0C                        cmp #max_wordlists
0017DBr 3  D0 A9                        bne @wordlist_loop
0017DDr 3               
0017DDr 3                               ; We didn't find it in any of the wordlists.
0017DDr 3                               ; Remove the wordlist id from the stack.
0017DDr 3  E8                           inx
0017DEr 3  E8                           inx
0017DFr 3               
0017DFr 3                               ; We return a zero to indicate that we didn't find it.
0017DFr 3  74 00                        stz 0,x
0017E1r 3  74 01                        stz 1,x
0017E3r 3  80 0A                        bra z_int_to_name
0017E5r 3               
0017E5r 3               @match:
0017E5r 3                               ; We found it. Remove wordlist id from stack.
0017E5r 3  E8                           inx
0017E6r 3  E8                           inx
0017E7r 3               
0017E7r 3                               ; It's a match! Replace TOS with nt
0017E7r 3  A5 rr                        lda tmp2
0017E9r 3  95 00                        sta 0,x
0017EBr 3  A5 rr                        lda tmp2+1
0017EDr 3  95 01                        sta 1,x
0017EFr 3               
0017EFr 3  60           z_int_to_name:  rts
0017F0r 3               
0017F0r 3               
0017F0r 3               
0017F0r 3               ; ## INVERT ( n -- n ) "Complement of TOS"
0017F0r 3               ; ## "invert"  auto  ANS core
0017F0r 3                       ; """https://forth-standard.org/standard/core/INVERT"""
0017F0r 3               xt_invert:
0017F0r 3  20 rr rr                     jsr underflow_1
0017F3r 3               
0017F3r 3  A9 FF                        lda #$FF
0017F5r 3  55 00                        eor 0,x         ; LSB
0017F7r 3  95 00                        sta 0,x
0017F9r 3               
0017F9r 3  A9 FF                        lda #$FF
0017FBr 3  55 01                        eor 1,x         ; MSB
0017FDr 3  95 01                        sta 1,x
0017FFr 3               
0017FFr 3  60           z_invert:       rts
001800r 3               
001800r 3               
001800r 3               ; ## IS ( xt "name" -- ) "Set named word to execute xt"
001800r 3               ; ## "is"  auto  ANS core ext
001800r 3                       ; """http://forth-standard.org/standard/core/IS"""
001800r 3               
001800r 3               xt_is:
001800r 3                               ; This is a state aware word with differet behavior
001800r 3                               ; when used while compiling vs interpreting.
001800r 3                               ; Check STATE
001800r 3  A5 rr                        lda state
001802r 3  05 rr                        ora state+1
001804r 3  F0 0C                        beq @interpreting
001806r 3               
001806r 3               @compiling:
001806r 3                               ; Run ['] to compile the xt of the next word as a literal.
001806r 3  20 rr rr                     jsr xt_bracket_tick
001809r 3               
001809r 3                               ; Postpone DEFER! by compiling a JSR to it.
001809r 3  A0 rr                        ldy #>xt_defer_store
00180Br 3  A9 rr                        lda #<xt_defer_store
00180Dr 3  20 rr rr                     jsr cmpl_subroutine
001810r 3               
001810r 3  80 06                        bra @done
001812r 3               
001812r 3               @interpreting:
001812r 3  20 rr rr                     jsr xt_tick
001815r 3  20 rr rr                     jsr xt_defer_store
001818r 3               @done:
001818r 3  60           z_is:           rts
001819r 3               
001819r 3               
001819r 3               
001819r 3               ; ## J ( -- n ) (R: n -- n ) "Copy second loop counter to stack"
001819r 3               ; ## "j"  auto  ANS core
001819r 3                       ; """https://forth-standard.org/standard/core/J
001819r 3                       ; Copy second loop counter from Return Stack to stack. Note we use
001819r 3                       ; a fudge factor for loop control; see the Control Flow section of
001819r 3                       ; the manual for more details.
001819r 3                       ; At this point, we have the "I" counter/limit and the LEAVE address
001819r 3                       ; on the stack above this (three entries), whereas the ideal Forth
001819r 3                       ; implementation would just have two.
001819r 3                       ;
001819r 3                       ; Make this native compiled for speed
001819r 3                       ; """
001819r 3               
001819r 3               xt_j:
001819r 3  CA                           dex
00181Ar 3  CA                           dex
00181Br 3               
00181Br 3                               ; Get the fudged index off from the stack. It's easier to
00181Br 3                               ; do math on the stack directly than to pop and push stuff
00181Br 3                               ; around
00181Br 3  86 rr                        stx tmpdsp
00181Dr 3  BA                           tsx
00181Er 3               
00181Er 3  38                           sec
00181Fr 3  BD 07 01                     lda $0107,x     ; LSB
001822r 3  FD 09 01                     sbc $0109,x
001825r 3  A8                           tay
001826r 3               
001826r 3  BD 08 01                     lda $0108,x     ; MSB
001829r 3  FD 0A 01                     sbc $010A,x
00182Cr 3               
00182Cr 3  A6 rr                        ldx tmpdsp
00182Er 3               
00182Er 3  95 01                        sta 1,x         ; MSB of de-fudged index
001830r 3  94 00                        sty 0,x         ; LSB of de-fudged index
001832r 3               
001832r 3  60           z_j:            rts
001833r 3               
001833r 3               
001833r 3               
001833r 3               ; ## KEY ( -- char ) "Get one character from the input"
001833r 3               ; ## "key"  tested  ANS core
001833r 3               xt_key:
001833r 3                       ; """https://forth-standard.org/standard/core/KEY
001833r 3                       ; Get a single character of input from the vectored
001833r 3                       ; input without echoing.
001833r 3                       ; """
001833r 3  20 rr rr                     jsr key_a               ; returns char in A
001836r 3               
001836r 3  CA                           dex
001837r 3  CA                           dex
001838r 3  95 00                        sta 0,x
00183Ar 3  74 01                        stz 1,x
00183Cr 3               
00183Cr 3  60           z_key:          rts
00183Dr 3               
00183Dr 3               key_a:
00183Dr 3                       ; The 65c02 doesn't have a JSR (ADDR,X) instruction like the
00183Dr 3                       ; 65816, so we have to fake the indirect jump to vector it.
00183Dr 3                       ; This is depressingly slow. We use this routine internally
00183Dr 3                       ; to avoid manipulating the Data Stack when we just want a
00183Dr 3                       ; character
00183Dr 3  6C rr rr                     jmp (input)             ; JSR/RTS
001840r 3               
001840r 3               
001840r 3               ; ## LATESTNT ( -- nt ) "Push most recent nt to the stack"
001840r 3               ; ## "latestnt"  auto  Tali Forth
001840r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001840r 3                       ; The Gforth version of this word is called LATEST
001840r 3                       ; """
001840r 3               xt_latestnt:
001840r 3  CA                           dex
001841r 3  CA                           dex
001842r 3               
001842r 3  20 rr rr                     jsr current_to_dp
001845r 3               
001845r 3  A5 rr                        lda dp
001847r 3  95 00                        sta 0,x
001849r 3  A5 rr                        lda dp+1
00184Br 3  95 01                        sta 1,x
00184Dr 3               
00184Dr 3  60           z_latestnt:     rts
00184Er 3               
00184Er 3               
00184Er 3               ; ## LATESTXT ( -- xt ) "Push most recent xt to the stack"
00184Er 3               ; ## "latestxt"  auto  Gforth
00184Er 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Anonymous-Definitions.html"""
00184Er 3               xt_latestxt:
00184Er 3  20 rr rr                     jsr xt_latestnt         ; ( nt )
001851r 3  20 rr rr                     jsr xt_name_to_int      ; ( xt )
001854r 3               
001854r 3  60           z_latestxt:     rts
001855r 3               
001855r 3               
001855r 3               ; ## LEAVE ( -- ) "Leave DO/LOOP construct"
001855r 3               ; ## "leave"  auto  ANS core
001855r 3                       ; """https://forth-standard.org/standard/core/LEAVE
001855r 3                       ; Note that this does not work with anything but a DO/LOOP in
001855r 3                       ; contrast to other versions such as discussed at
001855r 3                       ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
001855r 3                       ;
001855r 3                       ;       : LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY
001855r 3                       ; See the Control Flow section in the manual for details of how this works.
001855r 3                       ; This must be native compile and not IMMEDIATE
001855r 3                       ; """
001855r 3               
001855r 3               xt_leave:
001855r 3                               ; We dump the limit/start entries off the Return Stack
001855r 3                               ; (four bytes)
001855r 3  68                           pla
001856r 3  68                           pla
001857r 3  68                           pla
001858r 3  68                           pla
001859r 3               
001859r 3  60                           rts             ; this must be compiled, so keep before z_leave
00185Ar 3               z_leave:                        ; not reached, not compiled
00185Ar 3               
00185Ar 3               
00185Ar 3               
00185Ar 3               ; ## LEFT_BRACKET ( -- ) "Enter interpretation state"
00185Ar 3               ; ## "["  auto  ANS core
00185Ar 3                       ; """https://forth-standard.org/standard/core/Bracket
00185Ar 3                       ; This is an immediate and compile-only word
00185Ar 3                       ; """
00185Ar 3               xt_left_bracket:
00185Ar 3  64 rr                        stz state
00185Cr 3  64 rr                        stz state+1
00185Er 3               
00185Er 3  60           z_left_bracket: rts
00185Fr 3               
00185Fr 3               
00185Fr 3               ; ## LESS_NUMBER_SIGN ( -- ) "Start number conversion"
00185Fr 3               ; ## "<#"  auto  ANS core
00185Fr 3                       ; """https://forth-standard.org/standard/core/num-start
00185Fr 3                       ; Start the process to create pictured numeric output.
00185Fr 3                       ;
00185Fr 3                       ; The new
00185Fr 3                       ; string is constructed from back to front, saving the new character
00185Fr 3                       ; at the beginning of the output string. Since we use PAD as a
00185Fr 3                       ; starting address and work backward (!), the string is constructed
00185Fr 3                       ; in the space between the end of the Dictionary (as defined by CP)
00185Fr 3                       ; and the PAD. This allows us to satisfy the ANS Forth condition that
00185Fr 3                       ; programs don't fool around with the PAD but still use its address.
00185Fr 3                       ; Based on pForth
00185Fr 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
00185Fr 3                       ; pForth is in the pubic domain. Forth is : <# PAD HLD ! ; we use the
00185Fr 3                       ; internal variable tohold instead of HLD.
00185Fr 3                       ; """
00185Fr 3               xt_less_number_sign:
00185Fr 3  20 rr rr                     jsr xt_pad      ; ( addr )
001862r 3               
001862r 3  B5 00                        lda 0,x
001864r 3  85 rr                        sta tohold
001866r 3  B5 01                        lda 1,x
001868r 3  85 rr                        sta tohold+1
00186Ar 3               
00186Ar 3  E8                           inx
00186Br 3  E8                           inx
00186Cr 3               
00186Cr 3               z_less_number_sign:
00186Cr 3  60                           rts
00186Dr 3               
00186Dr 3               ; ## LESS_THAN ( n m -- f ) "Return true if NOS < TOS"
00186Dr 3               ; ## "<"  auto  ANS core
00186Dr 3                       ; """https://forth-standard.org/standard/core/less"""
00186Dr 3               
00186Dr 3               xt_less_than:
00186Dr 3  20 rr rr                     jsr underflow_2
001870r 3               
001870r 3  A0 00                        ldy #0          ; default false
001872r 3  20 rr rr                     jsr compare_16bit
001875r 3               
001875r 3                               ; for signed numbers, NOS < TOS if Z=0 and N=0
001875r 3  F0 03                        beq @false
001877r 3  30 01                        bmi @false
001879r 3               
001879r 3                               ; true
001879r 3  88                           dey
00187Ar 3               @false:
00187Ar 3  98                           tya
00187Br 3               
00187Br 3  E8                           inx
00187Cr 3  E8                           inx
00187Dr 3  95 00                        sta 0,x
00187Fr 3  95 01                        sta 1,x
001881r 3               
001881r 3  60           z_less_than:    rts
001882r 3               
001882r 3               
001882r 3               
001882r 3               ; ## LIST ( scr# -- ) "List the given screen"
001882r 3               ; ## "list"  tested  ANS block ext
001882r 3                       ; """https://forth-standard.org/standard/block/LIST"""
001882r 3               
001882r 3               xt_list:
001882r 3  20 rr rr                     jsr underflow_1
001885r 3               
001885r 3                               ; Save the screen number in SCR
001885r 3  20 rr rr                     jsr xt_scr
001888r 3  20 rr rr                     jsr xt_store
00188Br 3               
00188Br 3                               ; Use L from the editor-wordlist to display the screen.
00188Br 3  20 rr rr                     jsr xt_editor_l
00188Er 3               
00188Er 3  60           z_list:         rts
00188Fr 3               
00188Fr 3               
00188Fr 3               
00188Fr 3               ; ## LITERAL ( n -- ) "Store TOS to be push on stack during runtime"
00188Fr 3               ; ## "literal"  auto  ANS core
00188Fr 3                       ; """https://forth-standard.org/standard/core/LITERAL
00188Fr 3                       ; Compile-only word to store TOS so that it is pushed on stack
00188Fr 3                       ; during runtime. This is a immediate, compile-only word. At runtime,
00188Fr 3                       ; it works by calling literal_runtime by compling JSR LITERAL_RT.
00188Fr 3                       ;
00188Fr 3                       ; Note the cmpl_ routines use TMPTOS
00188Fr 3                       ; """
00188Fr 3               xt_literal:
00188Fr 3  20 rr rr                     jsr underflow_1
001892r 3               
001892r 3  A0 rr                        ldy #>literal_runtime
001894r 3  A9 rr                        lda #<literal_runtime
001896r 3  20 rr rr                     jsr cmpl_subroutine
001899r 3               
001899r 3                               ; Compile the value that is to be pushed on the Stack during
001899r 3                               ; runtime
001899r 3  20 rr rr                     jsr xt_comma
00189Cr 3               
00189Cr 3  60           z_literal:      rts
00189Dr 3               
00189Dr 3               literal_runtime:
00189Dr 3               
00189Dr 3                               ; During runtime, we push the value following this word back
00189Dr 3                               ; on the Data Stack. The subroutine jump that brought us
00189Dr 3                               ; here put the address to return to on the Return Stack -
00189Dr 3                               ; this points to the data we need to get. This routine is
00189Dr 3                               ; also called (LITERAL) in some Forths
00189Dr 3  CA                           dex
00189Er 3  CA                           dex
00189Fr 3               
00189Fr 3                           	; The 65c02 stores <RETURN-ADDRESS>-1 on the Return Stack,
00189Fr 3                               ; so we are actually popping the address-1 of the literal
00189Fr 3  68                           pla             ; LSB
0018A0r 3  85 rr                        sta tmp1
0018A2r 3  68                           pla             ; MSB
0018A3r 3  85 rr                        sta tmp1+1
0018A5r 3               
0018A5r 3                               ; Fetch the actual literal value and push it on Data stack
0018A5r 3  A0 01                        ldy #1
0018A7r 3  B1 rr                        lda (tmp1),y    ; LSB
0018A9r 3  95 00                        sta 0,x
0018ABr 3  C8                           iny
0018ACr 3  B1 rr                        lda (tmp1),y    ; MSB
0018AEr 3  95 01                        sta 1,x
0018B0r 3               
0018B0r 3                               ; Adjust return address and push back on the Return Stack
0018B0r 3  98                           tya
0018B1r 3  18                           clc
0018B2r 3  65 rr                        adc tmp1
0018B4r 3  A8                           tay
0018B5r 3  A5 rr                        lda tmp1+1
0018B7r 3  69 00                        adc #0
0018B9r 3  48                           pha
0018BAr 3  5A                           phy
0018BBr 3               
0018BBr 3  60                           rts
0018BCr 3               
0018BCr 3               
0018BCr 3               
0018BCr 3               ; ## LOAD ( scr# -- ) "Load the Forth code in a screen/block"
0018BCr 3               ; ## "load"  auto  ANS block
0018BCr 3                       ; """https://forth-standard.org/standard/block/LOAD
0018BCr 3                       ;
0018BCr 3                       ; Note: LOAD current works because there is only one buffer.
0018BCr 3                       ; If/when multiple buffers are supported, we'll have to deal
0018BCr 3                       ; with the fact that it might re-load the old block into a
0018BCr 3                       ; different buffer.
0018BCr 3                       ; """
0018BCr 3               
0018BCr 3               xt_load:
0018BCr 3  20 rr rr                     jsr underflow_1
0018BFr 3               
0018BFr 3                               ; Save the current value of BLK on the return stack.
0018BFr 3  A0 01                        ldy #blk_offset+1
0018C1r 3  B1 rr                        lda (up),y
0018C3r 3  48                           pha
0018C4r 3  88                           dey
0018C5r 3  B1 rr                        lda (up),y
0018C7r 3  48                           pha
0018C8r 3               
0018C8r 3                               ; Set BLK to the given block/screen number.
0018C8r 3  B5 00                        lda 0,x
0018CAr 3  91 rr                        sta (up),y
0018CCr 3  C8                           iny
0018CDr 3  B5 01                        lda 1,x
0018CFr 3  91 rr                        sta (up),y
0018D1r 3               
0018D1r 3                               ; Load that block into a buffer
0018D1r 3  20 rr rr                     jsr xt_block
0018D4r 3               
0018D4r 3                               ; Put 1024 on the stack for the screen length.
0018D4r 3  CA                           dex
0018D5r 3  CA                           dex
0018D6r 3  A9 04                        lda #4
0018D8r 3  95 01                        sta 1,x
0018DAr 3  74 00                        stz 0,x
0018DCr 3               
0018DCr 3                               ; Jump to a special evluate target. This bypasses the underflow
0018DCr 3                               ; check and skips the zeroing of BLK.
0018DCr 3  20 rr rr                     jsr load_evaluate
0018DFr 3               
0018DFr 3                               ; Restore the value of BLK from before the LOAD command.
0018DFr 3  A0 00                        ldy #blk_offset
0018E1r 3  68                           pla
0018E2r 3  91 rr                        sta (up),y
0018E4r 3  C8                           iny
0018E5r 3  68                           pla
0018E6r 3  91 rr                        sta (up),y
0018E8r 3               
0018E8r 3                               ; If BLK is not zero, read it back into the buffer.
0018E8r 3                               ; A still has MSB
0018E8r 3  88                           dey
0018E9r 3  11 rr                        ora (up),y
0018EBr 3  F0 12                        beq @done
0018EDr 3               
0018EDr 3                               ; The block needs to be read back into the buffer.
0018EDr 3  CA                           dex
0018EEr 3  CA                           dex
0018EFr 3  A0 00                        ldy #blk_offset
0018F1r 3  B1 rr                        lda (up),y
0018F3r 3  95 00                        sta 0,x
0018F5r 3  C8                           iny
0018F6r 3  B1 rr                        lda (up),y
0018F8r 3  95 01                        sta 1,x
0018FAr 3  20 rr rr                     jsr xt_block
0018FDr 3               
0018FDr 3                               ; Drop the buffer address.
0018FDr 3  E8                           inx
0018FEr 3  E8                           inx
0018FFr 3               
0018FFr 3               @done:
0018FFr 3  60           z_load:         rts
001900r 3               
001900r 3               
001900r 3               
001900r 3               ; ## LOOP ( -- ) "Finish loop construct"
001900r 3               ; ## "loop"  auto  ANS core
001900r 3                       ; """https://forth-standard.org/standard/core/LOOP
001900r 3                       ; Compile-time part of LOOP. This does nothing more but push 1 on
001900r 3                       ; the stack and then call +LOOP.
001900r 3                       ;
001900r 3                       ; In Forth, this is
001900r 3                       ;       : LOOP  POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ;
001900r 3                       ;       IMMEDIATE ; COMPILE-ONLY
001900r 3                       ; """
001900r 3               xt_loop:
001900r 3                               ; Have the finished word push 1 on the stack
001900r 3  A0 rr                        ldy #>xt_one
001902r 3  A9 rr                        lda #<xt_one
001904r 3  20 rr rr                     jsr cmpl_subroutine     ; drop through to +LOOP
001907r 3               
001907r 3               
001907r 3               ; ## PLUS_LOOP ( -- ) "Finish loop construct"
001907r 3               ; ## "+loop"  auto  ANS core
001907r 3                       ; """https://forth-standard.org/standard/core/PlusLOOP
001907r 3                       ;
001907r 3                       ; Compile-time part of +LOOP, also used for LOOP. Is usually
001907r 3                       ;       : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
001907r 3                       ;       COMPILE-ONLY
001907r 3                       ; in Forth. LOOP uses this routine as well. We jump here with the
001907r 3                       ; address for looping as TOS and the address for aborting the loop
001907r 3                       ; (LEAVE) as the second double-byte entry on the Return Stack (see
001907r 3                       ; DO and the Control Flow section of the manual for details).
001907r 3                       ; """
001907r 3               
001907r 3               xt_plus_loop:
001907r 3                               ; Compile the run-time part. We do this with a short loop
001907r 3                               ; and not a call to COMPILE, because it has to be natively
001907r 3                               ; coded anyway.
001907r 3  A0 11                        ldy #plus_loop_runtime_end-plus_loop_runtime
001909r 3  5A                           phy             ; save counter to adjust CP
00190Ar 3               @1:
00190Ar 3  B9 rr rr                     lda plus_loop_runtime,y
00190Dr 3  91 rr                        sta (cp),y
00190Fr 3  88                           dey
001910r 3  10 F8                        bpl @1
001912r 3               
001912r 3                               ; Adjust CP
001912r 3  68                           pla
001913r 3  18                           clc
001914r 3  65 rr                        adc cp
001916r 3  85 rr                        sta cp
001918r 3  A5 rr                        lda cp+1
00191Ar 3  69 00                        adc #0          ; only need carry
00191Cr 3  85 rr                        sta cp+1
00191Er 3               
00191Er 3                               ; The address we need to loop back to is TOS. Store it so
00191Er 3                               ; the runtime part of +LOOP jumps back up there
00191Er 3  20 rr rr                     jsr xt_comma
001921r 3               
001921r 3                               ; Compile an UNLOOP for when we're all done. This is a series
001921r 3                               ; of six PLA, so we just do it here instead jumping around
001921r 3                               ; all over the place
001921r 3  A9 68                        lda #$68                ; opcode for PLA
001923r 3  A0 06                        ldy #6
001925r 3               @2:
001925r 3  91 rr                        sta (cp),y
001927r 3  88                           dey
001928r 3  10 FB                        bpl @2
00192Ar 3               
00192Ar 3                               ; Adjust CP
00192Ar 3  A9 06                        lda #6
00192Cr 3  18                           clc
00192Dr 3  65 rr                        adc cp
00192Fr 3  85 rr                        sta cp
001931r 3  A5 rr                        lda cp+1
001933r 3  69 00                        adc #0                  ; only need carry
001935r 3  85 rr                        sta cp+1
001937r 3               
001937r 3                               ; Complete compile of DO/?DO by replacing the six
001937r 3                               ; dummy bytes by PHA instructions. The address where
001937r 3                               ; they are located is on the Data Stack
001937r 3  B5 00                        lda 0,x
001939r 3  85 rr                        sta tmp1
00193Br 3  B5 01                        lda 1,x
00193Dr 3  85 rr                        sta tmp1+1
00193Fr 3  E8                           inx
001940r 3  E8                           inx
001941r 3               
001941r 3                               ; Because of the way that CP works, we don't have to save
001941r 3                               ; CP, but CP-1
001941r 3  A5 rr                        lda cp
001943r 3  38                           sec
001944r 3  E9 01                        sbc #1
001946r 3  85 rr                        sta tmp2
001948r 3  A5 rr                        lda cp+1
00194Ar 3  E9 00                        sbc #0
00194Cr 3  85 rr                        sta tmp2+1
00194Er 3               
00194Er 3                               ; now compile this in the DO/?DO routine
00194Er 3  A0 00                        ldy #0
001950r 3               
001950r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001952r 3  91 rr                        sta (tmp1),y
001954r 3  C8                           iny
001955r 3  A5 rr                        lda tmp2+1      ; MSB
001957r 3  91 rr                        sta (tmp1),y
001959r 3  C8                           iny
00195Ar 3  A9 48                        lda #$48        ; Opcode for PHA
00195Cr 3  91 rr                        sta (tmp1),y
00195Er 3  C8                           iny
00195Fr 3               
00195Fr 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001961r 3  91 rr                        sta (tmp1),y
001963r 3  C8                           iny
001964r 3  A5 rr                        lda tmp2        ; LSB
001966r 3  91 rr                        sta (tmp1),y
001968r 3  C8                           iny
001969r 3  A9 48                        lda #$48        ; Opcode for PHA
00196Br 3  91 rr                        sta (tmp1),y
00196Dr 3               z_loop:
00196Dr 3  60           z_plus_loop:    rts
00196Er 3               
00196Er 3               
00196Er 3               plus_loop_runtime:
00196Er 3                       ; """Runtime compile for loop control. This is used for both +LOOP and
00196Er 3                       ; LOOP which are defined at high level. Note we use a fudge factor for
00196Er 3                       ; loop control so we can test with the Overflow Flag. See
00196Er 3                       ; the Control Flow section of the manual for details.
00196Er 3                       ; The step value is TOS in the loop. This
00196Er 3                       ; must always be native compiled. In some Forths, this is a separate
00196Er 3                       ; word called (+LOOP) or (LOOP)
00196Er 3                       ; """
00196Er 3               
00196Er 3  18                           clc
00196Fr 3  68                           pla             ; LSB of index
001970r 3  75 00                        adc 0,x         ; LSB of step
001972r 3  A8                           tay             ; temporary storage of LSB
001973r 3               
001973r 3  B8                           clv
001974r 3  68                           pla             ; MSB of index
001975r 3  75 01                        adc 1,x         ; MSB of step
001977r 3  48                           pha             ; put MSB of index back on stack
001978r 3               
001978r 3  98                           tya             ; put LSB of index back on stack
001979r 3  48                           pha
00197Ar 3               
00197Ar 3  E8                           inx             ; dump step from TOS
00197Br 3  E8                           inx
00197Cr 3               
00197Cr 3                               ; If V flag is set, we're done looping and continue
00197Cr 3                               ; after the +LOOP instruction
00197Cr 3  70 03                        bvs @hack+3     ; skip over JMP instruction
00197Er 3               
00197Er 3               @hack:          ; This is why this routine must be natively compiled: We
00197Er 3                               ; compile the opcode for JMP here without an address to
00197Er 3                               ; go to, which is added by the next next instruction of
00197Er 3                               ; LOOP/+LOOP during compile time
00197Er 3  4C                           .byte $4C
00197Fr 3               
00197Fr 3               plus_loop_runtime_end:
00197Fr 3               
00197Fr 3               
00197Fr 3               ; ## LSHIFT ( x u -- u ) "Shift TOS left"
00197Fr 3               ; ## "lshift"  auto  ANS core
00197Fr 3                       ; """https://forth-standard.org/standard/core/LSHIFT"""
00197Fr 3               
00197Fr 3               xt_lshift:
00197Fr 3  20 rr rr                     jsr underflow_2
001982r 3               
001982r 3                               ; max shift 16 times
001982r 3  B5 00                        lda 0,x
001984r 3  29 0F                        and #%00001111
001986r 3  F0 08                        beq @done
001988r 3               
001988r 3  A8                           tay
001989r 3               
001989r 3               @loop:
001989r 3  16 02                        asl 2,x
00198Br 3  36 03                        rol 3,x
00198Dr 3  88                           dey
00198Er 3  D0 F9                        bne @loop
001990r 3               
001990r 3               @done:
001990r 3  E8                           inx
001991r 3  E8                           inx
001992r 3               
001992r 3  60           z_lshift:       rts
001993r 3               
001993r 3               
001993r 3               
001993r 3               ; ## M_STAR ( n n -- d ) "16 * 16 --> 32"
001993r 3               ; ## "m*"  auto  ANS core
001993r 3                       ; """https://forth-standard.org/standard/core/MTimes
001993r 3                       ; Multiply two 16 bit numbers, producing a 32 bit result. All
001993r 3                       ; values are signed. Adapted from FIG Forth for Tali Forth.
001993r 3                       ;
001993r 3                       ; The original Forth is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;
001993r 3                       ; with  : D+- O< IF DNEGATE THEN ;
001993r 3                       ; """
001993r 3               
001993r 3               xt_m_star:
001993r 3  20 rr rr                     jsr underflow_2
001996r 3               
001996r 3                               ; figure out the sign
001996r 3  B5 01                        lda 1,x         ; MSB of n1
001998r 3  55 03                        eor 3,x         ; MSB of n2
00199Ar 3               
00199Ar 3                               ; UM* uses all kinds of temporary variables so we don't
00199Ar 3                               ; risk a conflict but just take the cycle hit and push
00199Ar 3                               ; this to the stack
00199Ar 3  48                           pha
00199Br 3               
00199Br 3                               ; get the absolute value of both numbers so we can feed
00199Br 3                               ; them to UM*, which does the real work
00199Br 3  20 rr rr                     jsr xt_abs
00199Er 3  20 rr rr                     jsr xt_swap
0019A1r 3  20 rr rr                     jsr xt_abs
0019A4r 3               
0019A4r 3  20 rr rr                     jsr xt_um_star          ; ( d )
0019A7r 3               
0019A7r 3                               ; handle the sign
0019A7r 3  68                           pla
0019A8r 3  10 03                        bpl @done
0019AAr 3               
0019AAr 3  20 rr rr                     jsr xt_dnegate
0019ADr 3               @done:
0019ADr 3  60           z_m_star:       rts
0019AEr 3               
0019AEr 3               
0019AEr 3               
0019AEr 3               ; ## MARKER ( "name" -- ) "Create a deletion boundry"
0019AEr 3               ; ## "marker"  auto  ANS core ext
0019AEr 3                       ; """https://forth-standard.org/standard/core/MARKER
0019AEr 3                       ; This word replaces FORGET in earlier Forths. Old entries are not
0019AEr 3                       ; actually deleted, but merely overwritten by restoring CP and DP.
0019AEr 3                       ; Run the named word at a later time to restore all of the wordlists
0019AEr 3                       ; to their state when the word was created with marker.  Any words
0019AEr 3                       ; created after the marker (including the marker) will be forgotten.
0019AEr 3                       ;
0019AEr 3                       ; To do this, we want to end up with something that jumps to a
0019AEr 3                       ; run-time component with a link to the original CP and DP values:
0019AEr 3                       ;
0019AEr 3                       ;       jsr marker_runtime
0019AEr 3                       ;       <Original CP MSB>
0019AEr 3                       ;       <Original CP LSB>
0019AEr 3                       ;       <Original DP MSB> ( for CURRENT wordlist )
0019AEr 3                       ;       <Original DP LSB>
0019AEr 3                       ;       < USER variables from offset 4 to 39 >
0019AEr 3                       ;
0019AEr 3                       ;       The user variables include:
0019AEr 3                       ;       CURRENT (byte variable)
0019AEr 3                       ;       <All wordlists> (currently 12) (cell array)
0019AEr 3                       ;       <#ORDER> (byte variable)
0019AEr 3                       ;       <All search order> (currently 9) (byte array)
0019AEr 3                       ;
0019AEr 3                       ; This code uses tmp1 and tmp2
0019AEr 3                       ; """
0019AEr 3               
0019AEr 3               xt_marker:
0019AEr 3                               ; Before we do anything, we need to save CP, which
0019AEr 3                               ; after all is the whole point of this operation. CREATE
0019AEr 3                               ; uses tmp1 and tmp2, so we take the speed hit and push stuff
0019AEr 3                               ; to the stack
0019AEr 3  20 rr rr                     jsr current_to_dp
0019B1r 3               
0019B1r 3  A5 rr                        lda dp
0019B3r 3  48                           pha
0019B4r 3  A5 rr                        lda dp+1
0019B6r 3  48                           pha
0019B7r 3               
0019B7r 3  A5 rr                        lda cp
0019B9r 3  48                           pha
0019BAr 3  A5 rr                        lda cp+1
0019BCr 3  48                           pha
0019BDr 3               
0019BDr 3  20 rr rr                     jsr xt_create
0019C0r 3               
0019C0r 3                               ; By default, CREATE installs a subroutine jump to DOVAR, which
0019C0r 3                               ; we have to replace by a jump to marker_runtime. We back up
0019C0r 3                               ; two bytes and then overwrite the address
0019C0r 3  A5 rr                        lda cp          ; LSB
0019C2r 3  38                           sec
0019C3r 3  E9 02                        sbc #2
0019C5r 3  85 rr                        sta cp
0019C7r 3               
0019C7r 3  A5 rr                        lda cp+1        ; MSB
0019C9r 3  E9 00                        sbc #0          ; we only care about the borrow
0019CBr 3  85 rr                        sta cp+1
0019CDr 3               
0019CDr 3                               ; Add the address of the runtime component
0019CDr 3  A0 rr                        ldy #>marker_runtime
0019CFr 3  A9 rr                        lda #<marker_runtime
0019D1r 3  20 rr rr                     jsr cmpl_word
0019D4r 3               
0019D4r 3                               ; Add original CP as payload
0019D4r 3  7A                           ply                     ; MSB
0019D5r 3  68                           pla                     ; LSB
0019D6r 3  20 rr rr                     jsr cmpl_word
0019D9r 3               
0019D9r 3                               ; Add original DP as payload
0019D9r 3  7A                           ply                     ; MSB
0019DAr 3  68                           pla                     ; LSB
0019DBr 3  20 rr rr                     jsr cmpl_word
0019DEr 3               
0019DEr 3                               ; Add the user variables for the wordlists and search order.
0019DEr 3                               ; We're compiling them in byte order.
0019DEr 3  A0 04                        ldy #4                  ; Start at CURRENT
0019E0r 3               @marker_loop:
0019E0r 3  B1 rr                        lda (up),y
0019E2r 3  20 rr rr                     jsr cmpl_a
0019E5r 3  C8                           iny
0019E6r 3  98                           tya
0019E7r 3  C9 28                        cmp #40                 ; One past the end of the search order.
0019E9r 3  D0 F5                        bne @marker_loop
0019EBr 3               
0019EBr 3  60           z_marker:       rts
0019ECr 3               
0019ECr 3               
0019ECr 3               
0019ECr 3               marker_runtime:
0019ECr 3                       ; """Restore Dictionary and memory (DP and CP) to where the were
0019ECr 3                       ; when this marker was defined. We arrive here with the return
0019ECr 3                       ; address on the Return Stack in the usual 65c02 format
0019ECr 3                       ; """
0019ECr 3               
0019ECr 3                               ; Get the address of the string address off the stack and
0019ECr 3                               ; increase by one because of the RTS mechanics
0019ECr 3  68                           pla
0019EDr 3  85 rr                        sta tmp1        ; LSB of address
0019EFr 3  68                           pla
0019F0r 3  85 rr                        sta tmp1+1      ; MSB of address
0019F2r 3               
0019F2r 3  E6 rr                        inc tmp1
0019F4r 3  D0 02                        bne @1
0019F6r 3  E6 rr                        inc tmp1+1
0019F8r 3               @1:
0019F8r 3  A0 00                        ldy #0
0019FAr 3               
0019FAr 3                               ; CP was stored first
0019FAr 3  B1 rr                        lda (tmp1),y
0019FCr 3  85 rr                        sta cp
0019FEr 3  C8                           iny
0019FFr 3  B1 rr                        lda (tmp1),y
001A01r 3  85 rr                        sta cp+1
001A03r 3               
001A03r 3                               ; Next was DP
001A03r 3  C8                           iny
001A04r 3  B1 rr                        lda (tmp1),y
001A06r 3  85 rr                        sta dp
001A08r 3  C8                           iny
001A09r 3  B1 rr                        lda (tmp1),y
001A0Br 3  85 rr                        sta dp+1
001A0Dr 3               
001A0Dr 3                               ; Conveniently, the offset into both tmp1 and UP is 4
001A0Dr 3                               ; to start restoring the wordlists and search order.
001A0Dr 3  A0 04                        ldy #4
001A0Fr 3               
001A0Fr 3               @marker_restore_loop:
001A0Fr 3                               ; Copy from the dictionary back on top of the wordlists
001A0Fr 3                               ; and search order.
001A0Fr 3  B1 rr                        lda (tmp1), y
001A11r 3  91 rr                        sta (up), y
001A13r 3  C8                           iny
001A14r 3  98                           tya
001A15r 3  C9 28                        cmp #40                 ; One past the end of the search order.
001A17r 3  D0 F6                        bne @marker_restore_loop
001A19r 3               
001A19r 3  20 rr rr                     jsr dp_to_current       ; Move the CURRENT DP back.
001A1Cr 3               
001A1Cr 3                               ; The return instruction takes us back to the original caller
001A1Cr 3  60                           rts
001A1Dr 3               
001A1Dr 3               
001A1Dr 3               
001A1Dr 3               ; ## MAX ( n n -- n ) "Keep larger of two numbers"
001A1Dr 3               ; ## "max"  auto  ANS core
001A1Dr 3                       ; """https://forth-standard.org/standard/core/MAX
001A1Dr 3                       ; Compare TOS and NOS and keep which one is larger. Adapted from
001A1Dr 3                       ; Lance A. Leventhal "6502 Assembly Language Subroutines". Negative
001A1Dr 3                       ; Flag indicates which number is larger. See also
001A1Dr 3                       ; http://6502.org/tutorials/compare_instructions.html and
001A1Dr 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001A1Dr 3                       ; """
001A1Dr 3               
001A1Dr 3               xt_max:
001A1Dr 3  20 rr rr                     jsr underflow_2
001A20r 3               
001A20r 3                               ; Compare LSB. We do this first to set the carry flag
001A20r 3  B5 00                        lda 0,x         ; LSB of TOS
001A22r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets the carry
001A24r 3               
001A24r 3  B5 01                        lda 1,x         ; MSB of TOS
001A26r 3  F5 03                        sbc 3,x         ; MSB of NOS
001A28r 3  50 02                        bvc @no_overflow
001A2Ar 3               
001A2Ar 3                               ; handle overflow, because we use signed numbers
001A2Ar 3  49 80                        eor #$80        ; complement negative flag
001A2Cr 3               
001A2Cr 3               @no_overflow:
001A2Cr 3                               ; if negative, NOS is larger and needs to be kept
001A2Cr 3  30 08                        bmi @keep_nos
001A2Er 3               
001A2Er 3                               ; move TOS to NOS
001A2Er 3  B5 00                        lda 0,x
001A30r 3  95 02                        sta 2,x
001A32r 3  B5 01                        lda 1,x
001A34r 3  95 03                        sta 3,x
001A36r 3               
001A36r 3               @keep_nos:
001A36r 3  E8                           inx
001A37r 3  E8                           inx
001A38r 3               
001A38r 3  60           z_max:          rts
001A39r 3               
001A39r 3               
001A39r 3               
001A39r 3               ; ## MIN ( n n -- n ) "Keep smaller of two numbers"
001A39r 3               ; ## "min"  auto  ANS core
001A39r 3                       ; """https://forth-standard.org/standard/core/MIN
001A39r 3                       ; Adapted from Lance A. Leventhal "6502 Assembly Language
001A39r 3                       ; Subroutines." Negative Flag indicateds which number is larger. See
001A39r 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001A39r 3                       ; """
001A39r 3               
001A39r 3               xt_min:
001A39r 3  20 rr rr                     jsr underflow_2
001A3Cr 3               
001A3Cr 3                               ; compare LSB. We do this first to set the carry flag
001A3Cr 3  B5 00                        lda 0,x         ; LSB of TOS
001A3Er 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets carry
001A40r 3               
001A40r 3  B5 01                        lda 1,x         ; MSB of TOS
001A42r 3  F5 03                        sbc 3,x         ; MSB of NOS
001A44r 3  50 02                        bvc @no_overflow
001A46r 3               
001A46r 3                               ; handle overflow because we use signed numbers
001A46r 3  49 80                        eor #$80
001A48r 3               
001A48r 3               @no_overflow:
001A48r 3                               ; if negative, NOS is larger and needs to be dumped
001A48r 3  10 08                        bpl @keep_nos
001A4Ar 3               
001A4Ar 3                               ; move TOS to NOS
001A4Ar 3  B5 00                        lda 0,x
001A4Cr 3  95 02                        sta 2,x
001A4Er 3  B5 01                        lda 1,x
001A50r 3  95 03                        sta 3,x
001A52r 3               
001A52r 3               @keep_nos:
001A52r 3  E8                           inx
001A53r 3  E8                           inx
001A54r 3               
001A54r 3  60           z_min:          rts
001A55r 3               
001A55r 3               
001A55r 3               
001A55r 3               ; ## MINUS ( n n -- n ) "Subtract TOS from NOS"
001A55r 3               ; ## "-"  auto  ANS core
001A55r 3                       ; """https://forth-standard.org/standard/core/Minus"""
001A55r 3               xt_minus:
001A55r 3  20 rr rr                     jsr underflow_2
001A58r 3               
001A58r 3  38                           sec
001A59r 3  B5 02                        lda 2,x         ; LSB
001A5Br 3  F5 00                        sbc 0,x
001A5Dr 3  95 02                        sta 2,x
001A5Fr 3               
001A5Fr 3  B5 03                        lda 3,x         ; MSB
001A61r 3  F5 01                        sbc 1,x
001A63r 3  95 03                        sta 3,x
001A65r 3               
001A65r 3  E8                           inx
001A66r 3  E8                           inx
001A67r 3               
001A67r 3  60           z_minus:        rts
001A68r 3               
001A68r 3               
001A68r 3               ; ## MINUS_LEADING ( addr1 u1 -- addr2 u2 ) "Remove leading spaces"
001A68r 3               ; ## "-leading"  auto  Tali String
001A68r 3                       ; """Remove leading whitespace. This is the reverse of -TRAILING
001A68r 3                       ; """
001A68r 3               
001A68r 3               xt_minus_leading:
001A68r 3  20 rr rr                     jsr underflow_2
001A6Br 3               
001A6Br 3               @loop:
001A6Br 3                               ; Quit if we were given an empty string. This also terminates
001A6Br 3                               ; the main loop
001A6Br 3  B5 00                        lda 0,x
001A6Dr 3  15 01                        ora 1,x
001A6Fr 3  F0 0F                        beq @done
001A71r 3               
001A71r 3  A1 02                        lda (2,x)               ; get first character
001A73r 3  20 rr rr                     jsr is_whitespace
001A76r 3  90 08                        bcc @done
001A78r 3               
001A78r 3                               ; It's whitespace, move one down
001A78r 3  20 rr rr                     jsr xt_one              ; ( addr u 1 )
001A7Br 3  20 rr rr                     jsr xt_slash_string     ; ( addr+ u-1 )
001A7Er 3               
001A7Er 3  80 EB                        bra @loop
001A80r 3               @done:
001A80r 3               z_minus_leading:
001A80r 3  60                           rts
001A81r 3               
001A81r 3               
001A81r 3               
001A81r 3               ; ## MINUS_TRAILING ( addr u1 -- addr u2 ) "Remove trailing spaces"
001A81r 3               ; ## "-trailing"  auto  ANS string
001A81r 3                       ; """https://forth-standard.org/standard/string/MinusTRAILING
001A81r 3                       ; Remove trailing spaces
001A81r 3                       ; """
001A81r 3               
001A81r 3               xt_minus_trailing:
001A81r 3  20 rr rr                     jsr underflow_2
001A84r 3               
001A84r 3                               ; if length entry is zero, return a zero and leave the
001A84r 3                               ; address part untouched
001A84r 3  B5 00                        lda 0,x         ; LSB of n
001A86r 3  15 01                        ora 1,x         ; MSB of n
001A88r 3  F0 33                        beq @done
001A8Ar 3               
001A8Ar 3                               ; Compute address of last char in tmp1 as
001A8Ar 3                               ; addr + u1 - 1
001A8Ar 3               
001A8Ar 3                               ; addr + u1
001A8Ar 3  18                           clc
001A8Br 3  B5 02                        lda 2,x         ; LSB of addr
001A8Dr 3  75 00                        adc 0,x
001A8Fr 3  85 rr                        sta tmp1
001A91r 3  B5 03                        lda 3,x         ; MSB of addr
001A93r 3  75 01                        adc 1,x
001A95r 3  85 rr                        sta tmp1+1
001A97r 3               
001A97r 3                               ; - 1
001A97r 3  A5 rr                        lda tmp1
001A99r 3  D0 02                        bne @1
001A9Br 3  C6 rr                        dec tmp1+1
001A9Dr 3               @1:
001A9Dr 3  C6 rr                        dec tmp1
001A9Fr 3               
001A9Fr 3               @loop:
001A9Fr 3                               ; While spaces are found, move tmp1 backwards and
001A9Fr 3                               ; decrease the count on the data stack.
001A9Fr 3  B2 rr                        lda (tmp1)
001AA1r 3  C9 20                        cmp #AscSP
001AA3r 3  D0 18                        bne @done
001AA5r 3               
001AA5r 3                               ; Move back one address.
001AA5r 3  A5 rr                        lda tmp1
001AA7r 3  D0 02                        bne @2
001AA9r 3  C6 rr                        dec tmp1+1
001AABr 3               @2:
001AABr 3  C6 rr                        dec tmp1
001AADr 3               
001AADr 3                               ; Decrement count by one.
001AADr 3  B5 00                        lda 0,x
001AAFr 3  D0 02                        bne @3
001AB1r 3  D6 01                        dec 1,x
001AB3r 3               @3:
001AB3r 3  D6 00                        dec 0,x
001AB5r 3               
001AB5r 3                               ; Check if there are any characters left.
001AB5r 3  B5 00                        lda 0,x
001AB7r 3  15 01                        ora 1,x
001AB9r 3  F0 02                        beq @done       ; Count has reached zero - we're done!
001ABBr 3               
001ABBr 3  80 E2                        bra @loop
001ABDr 3               
001ABDr 3               @done:
001ABDr 3               z_minus_trailing:
001ABDr 3  60                           rts
001ABEr 3               
001ABEr 3               
001ABEr 3               
001ABEr 3               ; ## MOD ( n1 n2 -- n ) "Divide NOS by TOS and return the remainder"
001ABEr 3               ; ## "mod"  auto  ANS core
001ABEr 3                       ; """https://forth-standard.org/standard/core/MOD
001ABEr 3                       ;
001ABEr 3                       ; The Forth definition of this word is  : MOD /MOD DROP ;
001ABEr 3                       ; so we just jump to xt_slash_mod and dump the actual result.
001ABEr 3                       ; """
001ABEr 3               xt_mod:
001ABEr 3  20 rr rr                     jsr underflow_2
001AC1r 3               
001AC1r 3  20 rr rr                     jsr xt_slash_mod
001AC4r 3               
001AC4r 3  E8                           inx             ; DROP
001AC5r 3  E8                           inx
001AC6r 3               z_mod:
001AC6r 3  60                           rts
001AC7r 3               
001AC7r 3               
001AC7r 3               ; ## MOVE ( addr1 addr2 u -- ) "Copy bytes"
001AC7r 3               ; ## "move"  auto  ANS core
001AC7r 3                       ; """https://forth-standard.org/standard/core/MOVE
001AC7r 3                       ; Copy u "address units" from addr1 to addr2. Since our address
001AC7r 3                       ; units are bytes, this is just a front-end for CMOVE and CMOVE>. This
001AC7r 3                       ; is actually the only one of these three words that is in the CORE
001AC7r 3                       ; set.
001AC7r 3                       ;
001AC7r 3                       ; This word must not be natively compiled.
001AC7r 3                       ; """
001AC7r 3               
001AC7r 3               xt_move:
001AC7r 3                               ; We let CMOVE and CMOVE> check if there is underflow or
001AC7r 3                               ; we've been told to copy zero bytes
001AC7r 3               
001AC7r 3                               ; compare MSB first
001AC7r 3  B5 03                        lda 3,x                 ; MSB of addr2
001AC9r 3  D5 05                        cmp 5,x                 ; MSB of addr1
001ACBr 3  F0 05                        beq @lsb                ; wasn't helpful, move to LSB
001ACDr 3  B0 0E                        bcs @to_move_up         ; we want CMOVE>
001ACFr 3               
001ACFr 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001AD2r 3               
001AD2r 3               @lsb:
001AD2r 3                               ; MSB were equal, so do the whole thing over with LSB
001AD2r 3  B5 02                        lda 2,x                 ; LSB of addr2
001AD4r 3  D5 04                        cmp 4,x                 ; LSB of addr1
001AD6r 3  F0 08                        beq @equal              ; LSB is equal as well
001AD8r 3  B0 03                        bcs @to_move_up         ; we want CMOVE>
001ADAr 3               
001ADAr 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001ADDr 3               
001ADDr 3               @to_move_up:
001ADDr 3  4C rr rr                     jmp xt_cmove_up         ; JSR/RTS
001AE0r 3               @equal:
001AE0r 3                               ; drop three entries from Data Stack
001AE0r 3  8A                           txa
001AE1r 3  18                           clc
001AE2r 3  69 06                        adc #6
001AE4r 3  AA                           tax
001AE5r 3               
001AE5r 3  60           z_move:         rts
001AE6r 3               
001AE6r 3               
001AE6r 3               
001AE6r 3               ; ## NAME_TO_INT ( nt -- xt ) "Convert Name Token to Execute Token"
001AE6r 3               ; ## "name>int"  tested  Gforth
001AE6r 3                       ; """See
001AE6r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001AE6r 3                       ; """
001AE6r 3               
001AE6r 3               xt_name_to_int:
001AE6r 3  20 rr rr                     jsr underflow_1
001AE9r 3               
001AE9r 3                               ; The xt starts four bytes down from the nt
001AE9r 3  B5 00                        lda 0,x
001AEBr 3  18                           clc
001AECr 3  69 04                        adc #4
001AEEr 3  85 rr                        sta tmp3
001AF0r 3               
001AF0r 3  B5 01                        lda 1,x
001AF2r 3  90 01                        bcc @done
001AF4r 3  1A                           inc
001AF5r 3               @done:
001AF5r 3  85 rr                        sta tmp3+1
001AF7r 3               
001AF7r 3  A0 00                        ldy #0
001AF9r 3  B1 rr                        lda (tmp3),y
001AFBr 3  95 00                        sta 0,x
001AFDr 3  C8                           iny
001AFEr 3  B1 rr                        lda (tmp3),y
001B00r 3  95 01                        sta 1,x
001B02r 3               
001B02r 3  60           z_name_to_int:  rts
001B03r 3               
001B03r 3               
001B03r 3               
001B03r 3               ; ## NAME_TO_STRING ( nt -- addr u ) "Given a name token, return string of word"
001B03r 3               ; ## "name>string"  tested  Gforth
001B03r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html"""
001B03r 3               
001B03r 3               xt_name_to_string:
001B03r 3  20 rr rr                     jsr underflow_1
001B06r 3               
001B06r 3  CA                           dex
001B07r 3  CA                           dex
001B08r 3               
001B08r 3                               ; the length of the string is the first byte of the
001B08r 3                               ; header pointed to by nt
001B08r 3  A1 02                        lda (2,x)
001B0Ar 3  95 00                        sta 0,x
001B0Cr 3  74 01                        stz 1,x
001B0Er 3               
001B0Er 3                               ; the string itself always starts eight bytes down
001B0Er 3  B5 02                        lda 2,x         ; LSB
001B10r 3  18                           clc
001B11r 3  69 08                        adc #8
001B13r 3  A8                           tay
001B14r 3  B5 03                        lda 3,x         ; MSB
001B16r 3  69 00                        adc #0          ; just need carry
001B18r 3  95 03                        sta 3,x
001B1Ar 3  94 02                        sty 2,x
001B1Cr 3               
001B1Cr 3               z_name_to_string:
001B1Cr 3  60                           rts
001B1Dr 3               
001B1Dr 3               
001B1Dr 3               ; ## NC_LIMIT ( -- addr ) "Return address where NC-LIMIT value is kept"
001B1Dr 3               ; ## "nc-limit"  tested  Tali Forth
001B1Dr 3               
001B1Dr 3               xt_nc_limit:
001B1Dr 3  CA                           dex
001B1Er 3  CA                           dex
001B1Fr 3  A9 rr                        lda #<nc_limit
001B21r 3  95 00                        sta 0,x
001B23r 3  A9 rr                        lda #>nc_limit
001B25r 3  95 01                        sta 1,x
001B27r 3               
001B27r 3  60           z_nc_limit:     rts
001B28r 3               
001B28r 3               
001B28r 3               
001B28r 3               ; ## NEGATE ( n -- n ) "Two's complement"
001B28r 3               ; ## "negate"  auto  ANS core
001B28r 3                       ; """https://forth-standard.org/standard/core/NEGATE"""
001B28r 3               xt_negate:
001B28r 3  20 rr rr                     jsr underflow_1
001B2Br 3               
001B2Br 3  A9 00                	lda #0
001B2Dr 3  38                           sec
001B2Er 3  F5 00                        sbc 0,x         ; LSB
001B30r 3  95 00                        sta 0,x
001B32r 3               
001B32r 3  A9 00                        lda #0
001B34r 3  F5 01                        sbc 1,x         ; MSB
001B36r 3  95 01                        sta 1,x
001B38r 3               
001B38r 3  60           z_negate:       rts
001B39r 3               
001B39r 3               
001B39r 3               ; ## NEVER_NATIVE ( -- ) "Flag last word as never natively compiled"
001B39r 3               ; ## "never-native"  auto  Tali Forth
001B39r 3               xt_never_native:
001B39r 3  20 rr rr                     jsr current_to_dp
001B3Cr 3  A0 01                        ldy #1          ; offset for status byte
001B3Er 3  B1 rr                        lda (dp),y
001B40r 3  09 08                        ora #NN         ; Make sure NN flag is set
001B42r 3  29 FD                        and #$ff-AN     ; and AN flag is clear.
001B44r 3  91 rr                        sta (dp),y
001B46r 3               z_never_native:
001B46r 3  60                           rts
001B47r 3               
001B47r 3               
001B47r 3               ; ## NIP ( b a -- a ) "Delete NOS"
001B47r 3               ; ## "nip"  auto  ANS core ext
001B47r 3                       ; """https://forth-standard.org/standard/core/NIP"""
001B47r 3               xt_nip:
001B47r 3  20 rr rr                     jsr underflow_2
001B4Ar 3               
001B4Ar 3  B5 00                        lda 0,x         ; LSB
001B4Cr 3  95 02                        sta 2,x
001B4Er 3  B5 01                        lda 1,x         ; MSB
001B50r 3  95 03                        sta 3,x
001B52r 3               
001B52r 3  E8                           inx
001B53r 3  E8                           inx
001B54r 3               
001B54r 3  60           z_nip:          rts
001B55r 3               
001B55r 3               
001B55r 3               ; ## NOT_EQUALS ( n m -- f ) "Return a true flag if TOS != NOS"
001B55r 3               ; ## "<>"  auto  ANS core ext
001B55r 3                       ; """https://forth-standard.org/standard/core/ne
001B55r 3                       ;
001B55r 3                       ; This is just a variant of EQUAL, we code it separately
001B55r 3                       ; for speed.
001B55r 3                       ; """
001B55r 3               
001B55r 3               xt_not_equals:
001B55r 3  20 rr rr                     jsr underflow_2
001B58r 3               
001B58r 3  A0 00                        ldy #0                  ; default is true
001B5Ar 3               
001B5Ar 3  B5 00                        lda 0,x                 ; LSB
001B5Cr 3  D5 02                        cmp 2,x
001B5Er 3  D0 0A                        bne @not_equal
001B60r 3               
001B60r 3                               ; LSB is equal
001B60r 3  B5 01                        lda 1,x                 ; MSB
001B62r 3  D5 03                        cmp 3,x
001B64r 3  D0 04                        bne @not_equal
001B66r 3               
001B66r 3  A9 FF                        lda #$FF
001B68r 3  80 01                        bra @done
001B6Ar 3               
001B6Ar 3               @not_equal:
001B6Ar 3  88                           dey                     ; drop thru to done
001B6Br 3               
001B6Br 3               @done:
001B6Br 3  98                           tya
001B6Cr 3  E8                           inx
001B6Dr 3  E8                           inx
001B6Er 3  95 00                        sta 0,x
001B70r 3  95 01                        sta 1,x
001B72r 3               
001B72r 3  60           z_not_equals:   rts
001B73r 3               
001B73r 3               
001B73r 3               
001B73r 3               ; ## NOT_ROTE ( a b c -- c a b ) "Rotate upwards"
001B73r 3               ; ## "-rot"  auto  Gforth
001B73r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Data-stack.html"""
001B73r 3               
001B73r 3               xt_not_rote:
001B73r 3  20 rr rr                     jsr underflow_3
001B76r 3               
001B76r 3  B4 01                        ldy 1,x         ; MSB first
001B78r 3  B5 03                        lda 3,x
001B7Ar 3  95 01                        sta 1,x
001B7Cr 3               
001B7Cr 3  B5 05                        lda 5,x
001B7Er 3  95 03                        sta 3,x
001B80r 3  94 05                        sty 5,x
001B82r 3               
001B82r 3  B4 00                        ldy 0,x         ; LSB second
001B84r 3  B5 02                        lda 2,x
001B86r 3  95 00                        sta 0,x
001B88r 3               
001B88r 3  B5 04                        lda 4,x
001B8Ar 3  95 02                        sta 2,x
001B8Cr 3  94 04                        sty 4,x
001B8Er 3               
001B8Er 3  60           z_not_rote:     rts
001B8Fr 3               
001B8Fr 3               
001B8Fr 3               
001B8Fr 3               ; ## NUMBER ( addr u -- u | d ) "Convert a number string"
001B8Fr 3               ; ## "number"  auto  Tali Forth
001B8Fr 3                       ; """Convert a number string to a double or single cell number. This
001B8Fr 3                       ; is a wrapper for >NUMBER and follows the convention set out in the
001B8Fr 3                       ; "Forth Programmer's Handbook" (Conklin & Rather) 3rd edition p. 87.
001B8Fr 3                       ; Based in part on the "Starting Forth" code
001B8Fr 3                       ; https://www.forth.com/starting-forth/10-input-output-operators/
001B8Fr 3                       ; Gforth uses S>NUMBER? and S>UNUMBER? which return numbers and a flag
001B8Fr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
001B8Fr 3                       ; Another difference to Gforth is that we follow ANS Forth that the
001B8Fr 3                       ; dot to signal a double cell number is required to be the last
001B8Fr 3                       ; character of the string.
001B8Fr 3                       ;
001B8Fr 3                       ; Number calls >NUMBER which in turn calls UM*,
001B8Fr 3                       ; which uses tmp1, tmp2, and tmp3, so we can't use them here, which is
001B8Fr 3                       ; a pain.
001B8Fr 3                       ;"""
001B8Fr 3               
001B8Fr 3               xt_number:
001B8Fr 3  20 rr rr                     jsr underflow_2
001B92r 3               
001B92r 3                               ; we keep the flags for sign and double in tmpdsp because
001B92r 3                               ; we've run out of temporary variables
001B92r 3  64 rr                        stz tmpdsp      ; flag for double
001B94r 3  64 rr                        stz tmpdsp+1    ; flag for minus
001B96r 3               
001B96r 3                               ; If the first character is a minus, strip it off and set
001B96r 3                               ; the flag
001B96r 3  A1 02                        lda (2,x)
001B98r 3  C9 2D                        cmp #$2D        ; ASCII for "-"
001B9Ar 3  D0 0A                        bne @check_dot
001B9Cr 3               
001B9Cr 3                               ; It's a minus
001B9Cr 3  C6 rr                        dec tmpdsp+1
001B9Er 3  F6 02                        inc 2,x         ; start one character later
001BA0r 3  D0 02                        bne @1
001BA2r 3  F6 03                        inc 3,x
001BA4r 3               @1:
001BA4r 3  D6 00                        dec 0,x         ; decrease string length by one
001BA6r 3               
001BA6r 3               @check_dot:
001BA6r 3                               ; If the last character is a dot, strip it off and set a
001BA6r 3                               ; flag. We can use tmptos as a temporary variable
001BA6r 3  B5 02                        lda 2,x         ; LSB of address
001BA8r 3  18                           clc
001BA9r 3  75 00                        adc 0,x         ; length of string
001BABr 3  85 rr                        sta tmptos
001BADr 3  B5 03                        lda 3,x
001BAFr 3  69 00                        adc #0          ; only need carry
001BB1r 3  85 rr                        sta tmptos+1
001BB3r 3               
001BB3r 3                               ; tmptos now points to the first character after the string,
001BB3r 3                               ; but we need the last character
001BB3r 3  A5 rr                        lda tmptos
001BB5r 3  D0 02                        bne @2
001BB7r 3  C6 rr                        dec tmptos+1
001BB9r 3               @2:
001BB9r 3  C6 rr                        dec tmptos
001BBBr 3               
001BBBr 3  B2 rr                        lda (tmptos)
001BBDr 3  C9 2E                        cmp #'.'
001BBFr 3  D0 04                        bne @main
001BC1r 3               
001BC1r 3                               ; We have a dot, which means this is a double number. Flag
001BC1r 3                               ; the fact and reduce string length by one
001BC1r 3  C6 rr                        dec tmpdsp
001BC3r 3  D6 00                        dec 0,x
001BC5r 3               
001BC5r 3               @main:
001BC5r 3                               ; Set up stack for subroutine jump to >NUMBER, which means
001BC5r 3                               ; we have to go ( addr u --> ud addr u )
001BC5r 3  CA                           dex
001BC6r 3  CA                           dex
001BC7r 3  CA                           dex
001BC8r 3  CA                           dex
001BC9r 3               
001BC9r 3  B5 04                        lda 4,x         ; LSB of length
001BCBr 3  95 00                        sta 0,x
001BCDr 3  74 01                        stz 1,x         ; MSB, max length 255 chars
001BCFr 3               
001BCFr 3  B5 06                        lda 6,x         ; LSB of address
001BD1r 3  95 02                        sta 2,x
001BD3r 3  B5 07                        lda 7,x         ; MSB of address
001BD5r 3  95 03                        sta 3,x
001BD7r 3               
001BD7r 3  74 04                        stz 4,x         ; clear space for ud
001BD9r 3  74 05                        stz 5,x
001BDBr 3  74 06                        stz 6,x
001BDDr 3  74 07                        stz 7,x
001BDFr 3               
001BDFr 3  20 rr rr                     jsr xt_to_number        ; (ud addr u -- ud addr u )
001BE2r 3               
001BE2r 3                               ; test length of returned string, which should be zero
001BE2r 3  B5 00                        lda 0,x
001BE4r 3  F0 15                        beq @all_converted
001BE6r 3               
001BE6r 3                               ; Something went wrong, we still have characters left over,
001BE6r 3                               ; so we print an error and abort. If the NUMBER was called
001BE6r 3                               ; by INTERPRET, we've already checked for Forth words, so
001BE6r 3                               ; we're in deep trouble one way or another
001BE6r 3  A9 3E                        lda #$3E        ; ASCII for ">"
001BE8r 3  20 rr rr                     jsr emit_a
001BEBr 3  20 rr rr                     jsr xt_type
001BEEr 3  A9 3C                        lda #$3C        ; ASCII for "<"
001BF0r 3  20 rr rr                     jsr emit_a
001BF3r 3  20 rr rr                     jsr xt_space
001BF6r 3               
001BF6r 3  A9 08                        lda #err_syntax
001BF8r 3  4C rr rr                     jmp error
001BFBr 3               
001BFBr 3               @all_converted:
001BFBr 3                               ; We can drop the string info
001BFBr 3  E8                           inx
001BFCr 3  E8                           inx
001BFDr 3  E8                           inx
001BFEr 3  E8                           inx
001BFFr 3               
001BFFr 3                               ; We have a double-cell number on the Data Stack that might
001BFFr 3                               ; actually have a minus and might actually be single-cell
001BFFr 3  A5 rr                        lda tmpdsp      ; flag for double
001C01r 3  F0 0D                        beq @single
001C03r 3               
001C03r 3                               ; Set status bit 5 to indicate this is a double number
001C03r 3  A9 20                        lda #%00100000
001C05r 3  04 rr                        tsb status
001C07r 3               
001C07r 3                               ; This is a double cell number. If it had a minus, we'll have
001C07r 3                               ; to negate it
001C07r 3  A5 rr                        lda tmpdsp+1
001C09r 3  F0 12                        beq @done       ; no minus, all done
001C0Br 3               
001C0Br 3  20 rr rr                     jsr xt_dnegate
001C0Er 3               
001C0Er 3  80 0D                        bra @done
001C10r 3               
001C10r 3               @single:
001C10r 3                               ; This is a single number, so we just drop the top cell
001C10r 3  E8                           inx
001C11r 3  E8                           inx
001C12r 3               
001C12r 3                               ; Clear status bit 5 to indicate this is a single number
001C12r 3  A9 20                        lda #%00100000
001C14r 3  14 rr                        trb status
001C16r 3               
001C16r 3                               ; If we had a minus, we'll have to negate it
001C16r 3  A5 rr                        lda tmpdsp+1
001C18r 3  F0 03                        beq @done       ; no minus, all done
001C1Ar 3               
001C1Ar 3  20 rr rr                     jsr xt_negate
001C1Dr 3               @done:
001C1Dr 3  60           z_number:       rts
001C1Er 3               
001C1Er 3               
001C1Er 3               
001C1Er 3               ; ## NUMBER_SIGN ( ud -- ud ) "Add character to pictured output string"
001C1Er 3               ; ## "#"  auto  ANS core
001C1Er 3                       ; """https://forth-standard.org/standard/core/num
001C1Er 3                       ; Add one char to the beginning of the pictured output string.
001C1Er 3                       ;
001C1Er 3                       ; Based on
001C1Er 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001C1Er 3                       ; Forth code  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
001C1Er 3                       ; """
001C1Er 3               xt_number_sign:
001C1Er 3  20 rr rr                     jsr underflow_2         ; double number
001C21r 3               
001C21r 3  20 rr rr                     jsr xt_base
001C24r 3  20 rr rr                     jsr xt_fetch            ; ( ud1 base )
001C27r 3               
001C27r 3                               ; The following code is the ancient Forth word UD/MOD, which in
001C27r 3                               ; various Forths (including Gforth) lives on under the hood,
001C27r 3                               ; even though it's not an ANS standard word, it doesn't appear
001C27r 3                               ; in the docs, it's only used here, and there are no tests for
001C27r 3                               ; it. This is why we got rid of it. We'll be converting this
001C27r 3                               ; mess to something more sane in the long run.
001C27r 3  20 rr rr                     jsr xt_to_r             ; >r
001C2Ar 3  20 rr rr                     jsr xt_zero             ; 0
001C2Dr 3  20 rr rr                     jsr xt_r_fetch          ; r@
001C30r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001C33r 3  20 rr rr                     jsr xt_rot              ; rot
001C36r 3  20 rr rr                     jsr xt_rot              ; rot
001C39r 3  20 rr rr                     jsr xt_r_from           ; r>
001C3Cr 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001C3Fr 3  20 rr rr                     jsr xt_rot              ; rot
001C42r 3                               ; end of UD/MOD ( rem ud )
001C42r 3               
001C42r 3  20 rr rr                     jsr xt_rot              ; ( ud rem )
001C45r 3               
001C45r 3                               ; Convert the number that is left over to an ASCII character. We
001C45r 3                               ; use a string lookup for speed. Use either abc_str_lower for
001C45r 3                               ; lower case or abc_str_upper for upper case (prefered)
001C45r 3  B5 00                        lda 0,x
001C47r 3  A8                           tay
001C48r 3  B9 rr rr                     lda s_abc_upper,y
001C4Br 3  95 00                        sta 0,x
001C4Dr 3  74 01                        stz 1,x                 ; paranoid; now ( ud char )
001C4Fr 3               
001C4Fr 3  20 rr rr                     jsr xt_hold
001C52r 3               
001C52r 3               z_number_sign:
001C52r 3  60                           rts
001C53r 3               
001C53r 3               
001C53r 3               ; ## NUMBER_SIGN_GREATER ( d -- addr u ) "Finish pictured number conversion"
001C53r 3               ; ## "#>"  auto  ANS core
001C53r 3                       ; """https://forth-standard.org/standard/core/num-end
001C53r 3                       ; Finish conversion of pictured number string, putting address and
001C53r 3                       ; length on the Data Stack.
001C53r 3                       ;
001C53r 3                       ; Original Fort is  2DROP HLD @ PAD OVER -
001C53r 3                       ; Based on
001C53r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001C53r 3                       ; """
001C53r 3               xt_number_sign_greater:
001C53r 3               
001C53r 3  20 rr rr                     jsr underflow_2         ; double number
001C56r 3               
001C56r 3                               ; The start address lives in tohold
001C56r 3  A5 rr                        lda tohold
001C58r 3  95 00                        sta 0,x         ; LSB of tohold
001C5Ar 3  95 02                        sta 2,x
001C5Cr 3  A5 rr                        lda tohold+1
001C5Er 3  95 01                        sta 1,x         ; MSB of addr
001C60r 3  95 03                        sta 3,x         ; ( addr addr )
001C62r 3               
001C62r 3                               ; The length of the string is pad - addr
001C62r 3  20 rr rr                     jsr xt_pad      ; ( addr addr pad )
001C65r 3               
001C65r 3  38                           sec
001C66r 3  B5 00                        lda 0,x         ; LSB of pad address
001C68r 3  F5 02                        sbc 2,x
001C6Ar 3  95 02                        sta 2,x
001C6Cr 3               
001C6Cr 3  B5 01                        lda 1,x         ; MSB, which should always be zero
001C6Er 3  F5 03                        sbc 3,x
001C70r 3  95 03                        sta 3,x         ; ( addr u pad )
001C72r 3               
001C72r 3  E8                           inx
001C73r 3  E8                           inx
001C74r 3               
001C74r 3               z_number_sign_greater:
001C74r 3  60                           rts
001C75r 3               
001C75r 3               
001C75r 3               ; ## NUMBER_SIGN_S ( d -- addr u ) "Completely convert pictured output"
001C75r 3               ; ## "#s"  auto  ANS core
001C75r 3                       ; """https://forth-standard.org/standard/core/numS
001C75r 3                       ; Completely convert number for pictured numerical output.
001C75r 3                       ;
001C75r 3                       ; Based on
001C75r 3                       ; https://github.com/philburk/pforth/blob/master/fth/system.fth
001C75r 3                       ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
001C75r 3                       ; """
001C75r 3               
001C75r 3               xt_number_sign_s:
001C75r 3  20 rr rr                     jsr underflow_2
001C78r 3               @loop:
001C78r 3                               ; convert a single number ("#")
001C78r 3  20 rr rr                     jsr xt_number_sign
001C7Br 3               
001C7Br 3                               ; stop when double-celled number in TOS is zero:
001C7Br 3  B5 00                        lda 0,x
001C7Dr 3  15 01                        ora 1,x
001C7Fr 3  15 02                        ora 2,x
001C81r 3  15 03                        ora 3,x
001C83r 3  D0 F3                        bne @loop
001C85r 3               
001C85r 3               z_number_sign_s:
001C85r 3  60                           rts
001C86r 3               
001C86r 3               
001C86r 3               
001C86r 3               ; ## OF (C: -- of-sys) (x1 x2 -- |x1) "Conditional flow control"
001C86r 3               ; ## "of"  auto  ANS core ext
001C86r 3                       ; """http://forth-standard.org/standard/core/OF"""
001C86r 3               
001C86r 3               xt_of:
001C86r 3                               ; Check if value is equal to this case.
001C86r 3                               ; Postpone over (eg. compile a jsr to it)
001C86r 3  A0 rr                        ldy #>xt_over
001C88r 3  A9 rr                        lda #<xt_over
001C8Ar 3  20 rr rr                     jsr cmpl_subroutine
001C8Dr 3               
001C8Dr 3                               ; Postpone = (EQUAL), that is, compile a jsr to it
001C8Dr 3  A0 rr                        ldy #>xt_equal
001C8Fr 3  A9 rr                        lda #<xt_equal
001C91r 3  20 rr rr                     jsr cmpl_subroutine
001C94r 3               
001C94r 3  20 rr rr                     jsr xt_if
001C97r 3               
001C97r 3                               ; If it's true, consume the original value.
001C97r 3                               ; Postpone DROP (eg. compile a jsr to it)
001C97r 3  A0 rr                        ldy #>xt_drop
001C99r 3  A9 rr                        lda #<xt_drop
001C9Br 3  20 rr rr                     jsr cmpl_subroutine
001C9Er 3               
001C9Er 3  60           z_of:           rts
001C9Fr 3               
001C9Fr 3               
001C9Fr 3               
001C9Fr 3               ; ## ONE ( -- n ) "Push the number 1 to the Data Stack"
001C9Fr 3               ; ## "1"  auto  Tali Forth
001C9Fr 3                       ; """This is also the code for EDITOR-WORDLIST"""
001C9Fr 3               xt_editor_wordlist:
001C9Fr 3               xt_one:
001C9Fr 3  CA                           dex
001CA0r 3  CA                           dex
001CA1r 3  A9 01                        lda #1
001CA3r 3  95 00                        sta 0,x
001CA5r 3  74 01                        stz 1,x
001CA7r 3               
001CA7r 3               z_editor_wordlist:
001CA7r 3               z_one:
001CA7r 3  60                           rts
001CA8r 3               
001CA8r 3               
001CA8r 3               ; ## ONE_MINUS ( u -- u-1 ) "Decrease TOS by one"
001CA8r 3               ; ## "1-"  auto  ANS core
001CA8r 3                       ; """https://forth-standard.org/standard/core/OneMinus"""
001CA8r 3               
001CA8r 3               xt_one_minus:
001CA8r 3  20 rr rr                     jsr underflow_1
001CABr 3               
001CABr 3  B5 00                        lda 0,x
001CADr 3  D0 02                        bne @1
001CAFr 3  D6 01                        dec 1,x
001CB1r 3               @1:
001CB1r 3  D6 00                        dec 0,x
001CB3r 3               
001CB3r 3  60           z_one_minus:    rts
001CB4r 3               
001CB4r 3               
001CB4r 3               
001CB4r 3               ; ## ONE_PLUS ( u -- u+1 ) "Increase TOS by one"
001CB4r 3               ; ## "1+"  auto  ANS core
001CB4r 3                       ; """https://forth-standard.org/standard/core/OnePlus
001CB4r 3                       ;
001CB4r 3                       ; Code is shared with CHAR-PLUS
001CB4r 3                       ; """
001CB4r 3               
001CB4r 3               xt_char_plus:
001CB4r 3               xt_one_plus:
001CB4r 3  20 rr rr                     jsr underflow_1
001CB7r 3               
001CB7r 3  F6 00                        inc 0,x
001CB9r 3  D0 02                        bne @done
001CBBr 3  F6 01                        inc 1,x
001CBDr 3               
001CBDr 3               @done:
001CBDr 3               z_char_plus:
001CBDr 3  60           z_one_plus:     rts
001CBEr 3               
001CBEr 3               
001CBEr 3               
001CBEr 3               ; ## ONLY ( -- ) "Set earch order to minimum wordlist"
001CBEr 3               ; ## "only"  auto  ANS search ext
001CBEr 3                       ; """https://forth-standard.org/standard/search/ONLY"""
001CBEr 3               
001CBEr 3               xt_only:
001CBEr 3                               ; Put -1 on data stack.
001CBEr 3  CA                           dex
001CBFr 3  CA                           dex
001CC0r 3  A9 FF                        lda #$FF
001CC2r 3  95 00                        sta 0,x
001CC4r 3  95 01                        sta 1,x
001CC6r 3               
001CC6r 3                               ; Invoke set-order to set the minimum search order.
001CC6r 3  20 rr rr                     jsr xt_set_order
001CC9r 3               
001CC9r 3  60           z_only:         rts
001CCAr 3               
001CCAr 3               
001CCAr 3               
001CCAr 3               ; ## OR ( m n -- n ) "Logically OR TOS and NOS"
001CCAr 3               ; ## "or"  auto  ANS core
001CCAr 3                       ; """https://forth-standard.org/standard/core/OR"
001CCAr 3               xt_or:
001CCAr 3  20 rr rr                     jsr underflow_2
001CCDr 3               
001CCDr 3  B5 00                        lda 0,x
001CCFr 3  15 02                        ora 2,x
001CD1r 3  95 02                        sta 2,x
001CD3r 3               
001CD3r 3  B5 01                        lda 1,x
001CD5r 3  15 03                        ora 3,x
001CD7r 3  95 03                        sta 3,x
001CD9r 3               
001CD9r 3  E8                           inx
001CDAr 3  E8                           inx
001CDBr 3               
001CDBr 3  60           z_or:           rts
001CDCr 3               
001CDCr 3               
001CDCr 3               ; ## ORDER ( -- ) "Print current word order list and current WID"
001CDCr 3               ; ## "order"  auto  ANS core
001CDCr 3                       ; """https://forth-standard.org/standard/search/ORDER
001CDCr 3                       ; Note the search order is displayed from first search to last
001CDCr 3                       ; searched and is therefore exactly the reverse of the order in which
001CDCr 3                       ; Forth stacks are displayed.
001CDCr 3                       ;
001CDCr 3                       ; A Forth implementation of this word is:
001CDCr 3                       ;
001CDCr 3                       ; 	: .wid ( wid -- )
001CDCr 3                       ; 	dup 0=  if ." Forth "  drop    else
001CDCr 3                       ; 	dup 1 = if ." Editor " drop    else
001CDCr 3                       ; 	dup 2 = if ." Assembler " drop else
001CDCr 3                       ; 	dup 3 = if ." Root " drop      else
001CDCr 3                       ; 	           . ( just print the number )
001CDCr 3                       ; 	then then then then ;
001CDCr 3                       ;
001CDCr 3                       ; : ORDER ( -- )
001CDCr 3                       ; 	cr get-order 0 ?do .wid loop
001CDCr 3                       ; 	space space get-current .wid ;
001CDCr 3                       ;
001CDCr 3                       ; This is an interactive program, so speed
001CDCr 3                       ; is not as important as size. We assume we do not have more than 255
001CDCr 3                       ; wordlists.
001CDCr 3                       ; """
001CDCr 3               
001CDCr 3               xt_order:
001CDCr 3  20 rr rr                     jsr xt_cr
001CDFr 3  20 rr rr                     jsr xt_get_order        ; ( wid_n ... wid_1 n )
001CE2r 3               
001CE2r 3                               ; Paranoid: Check if there are no wordlists, a rather
001CE2r 3                               ; pathological case. this would mean ( 0 ) on the stack. In
001CE2r 3                               ; that case, we just drop n and run
001CE2r 3  B5 00                        lda 0,x                 ; assumes no more than 255 wordlists
001CE4r 3  F0 1E                        beq @drop_done
001CE6r 3               
001CE6r 3               @have_wordlists:
001CE6r 3                               ; We arrive here with the LSB of TOS in A, the number of WIDs
001CE6r 3                               ; on the stack
001CE6r 3  A8                           tay
001CE7r 3               @loop:
001CE7r 3  E8                           inx
001CE8r 3  E8                           inx                     ; DROP, now ( wid_n ... wid_1 )
001CE9r 3  B5 00                        lda 0,x
001CEBr 3               
001CEBr 3  5A                           phy
001CECr 3  20 rr rr                     jsr _print_wid_string   ; internal helper function
001CEFr 3  7A                           ply
001CF0r 3               
001CF0r 3  88                           dey
001CF1r 3  D0 F4                        bne @loop
001CF3r 3               
001CF3r 3                               ; We've printed the wordlists, now we add the current wordlist.
001CF3r 3                               ; This follows the convention of Gforth
001CF3r 3  20 rr rr                     jsr xt_space
001CF6r 3  20 rr rr                     jsr xt_space
001CF9r 3  20 rr rr                     jsr xt_get_current      ; ( wid )
001CFCr 3               
001CFCr 3  B5 00                        lda 0,x
001CFEr 3  20 rr rr                     jsr _print_wid_string
001D01r 3  20 rr rr                     jsr xt_cr
001D04r 3               
001D04r 3               @drop_done:
001D04r 3  E8                           inx
001D05r 3  E8                           inx
001D06r 3               z_order:
001D06r 3  60                           rts
001D07r 3               
001D07r 3               _print_wid_string:
001D07r 3                       ; """Helper function for ORDER: Given a WID in A, print the
001D07r 3                       ; corresponding string. If there is no such word list defined, just
001D07r 3                       ; print the number. Assumes we will not have more than 256 WIDs; also
001D07r 3                       ; assumes we have just loaded A so Z reflects status of byte.  In
001D07r 3                       ; theory, we could speed this up by having the WID be the same as the
001D07r 3                       ; number of the strings. However, ORDER is used rather infrequently and
001D07r 3                       ; this would make changes to the strings.asm file very dangerous, so we
001D07r 3                       ; follow the slightly more complicated route with a translation table.
001D07r 3                       ; """
001D07r 3                               ; If the WID is larger than 3, we have no string avaliable and
001D07r 3                               ; just print the number.
001D07r 3                               ; See http://6502.org/tutorials/compare_instructions.html
001D07r 3                               ; for details
001D07r 3  C9 04                        cmp #4
001D09r 3  90 09                        bcc @output_string      ; less than 4, print a real string
001D0Br 3               
001D0Br 3                               ; Our WID is not less than 4, that is, 4 or larger. We just
001D0Br 3                               ; print the number
001D0Br 3  CA                           dex
001D0Cr 3  CA                           dex
001D0Dr 3  95 00                        sta 0,x
001D0Fr 3  74 01                        stz 1,x
001D11r 3  4C rr rr                     jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
001D14r 3               
001D14r 3               @output_string:
001D14r 3                               ; Get the string number based on WID 0 to 3
001D14r 3  A8                           tay
001D15r 3  B9 rr rr                     lda @wid_data,y
001D18r 3               
001D18r 3                               ; Print without a line feed
001D18r 3  4C rr rr                     jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
001D1Br 3               
001D1Br 3               @wid_data:
001D1Br 3                       ; Table of string numbers (see strings.asm) indexed by the WID if
001D1Br 3                       ; less than 4.
001D1Br 3  03                   .byte str_wid_forth            ; WID 0: "Forth"
001D1Cr 3  06                   .byte str_wid_editor           ; WID 1: "Editor"
001D1Dr 3  07                   .byte str_wid_assembler        ; WID 2: "Assembler"
001D1Er 3  08                   .byte str_wid_root             ; WID 3: "Root"
001D1Fr 3               
001D1Fr 3               
001D1Fr 3               
001D1Fr 3               ; ## OUTPUT ( -- addr ) "Return the address of the EMIT vector address"
001D1Fr 3               ; ## "output"  tested  Tali Forth
001D1Fr 3               xt_output:
001D1Fr 3                       ; """Return the address where the jump target for EMIT is stored (but
001D1Fr 3                       ; not the vector itself). By default, this will hold the value of
001D1Fr 3                       ; kernel_putc routine, but this can be changed by the user, hence this
001D1Fr 3                       ; routine.
001D1Fr 3                       ; """
001D1Fr 3  CA                           dex
001D20r 3  CA                           dex
001D21r 3  A9 rr                        lda #<output
001D23r 3  95 00                        sta 0,x
001D25r 3  A9 rr                        lda #>output
001D27r 3  95 01                        sta 1,x
001D29r 3               
001D29r 3  60           z_output:       rts
001D2Ar 3               
001D2Ar 3               
001D2Ar 3               ; ## OVER ( b a -- b a b ) "Copy NOS to TOS"
001D2Ar 3               ; ## "over"  auto  ANS core
001D2Ar 3                       ; """https://forth-standard.org/standard/core/OVER"""
001D2Ar 3               xt_over:
001D2Ar 3  20 rr rr                     jsr underflow_2
001D2Dr 3               
001D2Dr 3  CA                           dex
001D2Er 3  CA                           dex
001D2Fr 3               
001D2Fr 3  B5 04                        lda 4,x         ; LSB
001D31r 3  95 00                        sta 0,x
001D33r 3  B5 05                        lda 5,x         ; MSB
001D35r 3  95 01                        sta 1,x
001D37r 3               
001D37r 3  60           z_over:         rts
001D38r 3               
001D38r 3               
001D38r 3               ; ## PAD ( -- addr ) "Return address of user scratchpad"
001D38r 3               ; ## "pad"  auto  ANS core ext
001D38r 3                       ; """https://forth-standard.org/standard/core/PAD
001D38r 3                       ; Return address to a temporary area in free memory for user. Must
001D38r 3                       ; be at least 84 bytes in size (says ANS). It is located relative to
001D38r 3                       ; the compile area pointer (CP) and therefore varies in position.
001D38r 3                       ; This area is reserved for the user and not used by the system
001D38r 3                       ; """
001D38r 3               xt_pad:
001D38r 3  CA                           dex
001D39r 3  CA                           dex
001D3Ar 3               
001D3Ar 3  A5 rr                        lda cp
001D3Cr 3  18                           clc
001D3Dr 3  69 FF                        adc #padoffset  ; assumes padoffset one byte in size
001D3Fr 3  95 00                        sta 0,x
001D41r 3               
001D41r 3  A5 rr                        lda cp+1
001D43r 3  69 00                        adc #0          ; only need carry
001D45r 3  95 01                        sta 1,x
001D47r 3               
001D47r 3  60           z_pad:          rts
001D48r 3               
001D48r 3               
001D48r 3               ; ## PAGE ( -- ) "Clear the screen"
001D48r 3               ; ## "page"  tested  ANS facility
001D48r 3                       ; """https://forth-standard.org/standard/facility/PAGE
001D48r 3                       ; Clears a page if supported by ANS terminal codes. This is
001D48r 3                       ; Clear Screen ("ESC[2J") plus moving the cursor to the top
001D48r 3                       ; left of the screen
001D48r 3                       ; """
001D48r 3               xt_page:
001D48r 3  A9 1B                        lda #AscESC
001D4Ar 3  20 rr rr                     jsr emit_a
001D4Dr 3  A9 5B                        lda #$5B        ; ASCII for "["
001D4Fr 3  20 rr rr                     jsr emit_a
001D52r 3  A9 32                        lda #'2'
001D54r 3  20 rr rr                     jsr emit_a
001D57r 3  A9 4A                        lda #'J'
001D59r 3  20 rr rr                     jsr emit_a
001D5Cr 3               
001D5Cr 3                               ; move cursor to top left of screen
001D5Cr 3  20 rr rr                     jsr xt_zero
001D5Fr 3  20 rr rr                     jsr xt_zero
001D62r 3  20 rr rr                     jsr xt_at_xy
001D65r 3               
001D65r 3  60           z_page:         rts
001D66r 3               
001D66r 3               
001D66r 3               ; ## PAREN ( -- ) "Discard input up to close paren ( comment )"
001D66r 3               ; ## "("  auto  ANS core
001D66r 3                       ; """http://forth-standard.org/standard/core/p"""
001D66r 3               
001D66r 3               xt_paren:
001D66r 3                               ; Put a right paren on the stack.
001D66r 3  CA                           dex
001D67r 3  CA                           dex
001D68r 3  A9 29                        lda #41     ; Right parenthesis
001D6Ar 3  95 00                        sta 0,x
001D6Cr 3  74 01                        stz 1,x
001D6Er 3               
001D6Er 3                               ; Call parse.
001D6Er 3  20 rr rr                     jsr xt_parse
001D71r 3               
001D71r 3                               ; Throw away the result.
001D71r 3  E8                           inx
001D72r 3  E8                           inx
001D73r 3  E8                           inx
001D74r 3  E8                           inx
001D75r 3               
001D75r 3  60           z_paren:        rts
001D76r 3               
001D76r 3               
001D76r 3               
001D76r 3               ; ## PARSE_NAME ( "name" -- addr u ) "Parse the input"
001D76r 3               ; ## "parse-name"  auto  ANS core ext
001D76r 3                       ; """https://forth-standard.org/standard/core/PARSE-NAME
001D76r 3                       ; Find next word in input string, skipping leading whitespace. This is
001D76r 3                       ; a special form of PARSE and drops through to that word. See PARSE
001D76r 3                       ; for more detail. We use this word internally for the interpreter
001D76r 3                       ; because it is a lot easier to use. Reference implementations at
001D76r 3                       ; http://forth-standard.org/standard/core/PARSE-NAME and
001D76r 3                       ; http://www.forth200x.org/reference-implementations/parse-name.fs
001D76r 3                       ; Roughly, the word is comparable to BL WORD COUNT. -- Note that
001D76r 3                       ; though the ANS standard talks about skipping "spaces", whitespace
001D76r 3                       ; is actually perfectly legal (see for example
001D76r 3                       ; http://forth-standard.org/standard/usage#subsubsection.3.4.1.1).
001D76r 3                       ; Otherwise, PARSE-NAME chokes on tabs.
001D76r 3                       ; """
001D76r 3               
001D76r 3               xt_parse_name:
001D76r 3                               ; To enable the compilation of the high-level Forth words
001D76r 3                               ; in forth-words.asm and user-words.asm at boot time,
001D76r 3                               ; PARSE-NAME and PARSE must be able to deal with 16-bit string
001D76r 3                               ; lengths. This is a pain on an 8-bit machine. The pointer
001D76r 3                               ; to the current location is in toin (>IN). We need to check,
001D76r 3                               ; worst case, the characters from cib+toin to cib+ciblen, and
001D76r 3                               ; we can't just use Y as an index.
001D76r 3               
001D76r 3                               ; The counter is CIBLEN-TOIN and stored in tmp1
001D76r 3  A5 rr                        lda ciblen              ; LSB of counter
001D78r 3  38                           sec
001D79r 3  E5 rr                        sbc toin
001D7Br 3  85 rr                        sta tmp1
001D7Dr 3  A5 rr                        lda ciblen+1            ; MSB
001D7Fr 3  E5 rr                        sbc toin+1
001D81r 3  85 rr                        sta tmp1+1
001D83r 3               
001D83r 3                               ; Check the result for zero (TOIN is equal to CIBLEN)
001D83r 3  A5 rr                        lda tmp1
001D85r 3  05 rr                        ora tmp1+1
001D87r 3  F0 28                        beq @empty_line
001D89r 3               
001D89r 3                               ; We walk through the characters starting at CIB+TOIN, so we
001D89r 3                               ; save a temp version of that in tmp2
001D89r 3  A5 rr                        lda cib
001D8Br 3  18                           clc
001D8Cr 3  65 rr                        adc toin
001D8Er 3  85 rr                        sta tmp2                ; LSB of first character
001D90r 3  A5 rr                        lda cib+1
001D92r 3  65 rr                        adc toin+1
001D94r 3  85 rr                        sta tmp2+1              ; MSB
001D96r 3               
001D96r 3               @skip_loop:
001D96r 3  B2 rr                        lda (tmp2)              ; work copy of cib
001D98r 3  20 rr rr                     jsr is_whitespace
001D9Br 3  90 1F                        bcc @char_found
001D9Dr 3               
001D9Dr 3                               ; Char is still whitespace, continue
001D9Dr 3  E6 rr                        inc tmp2
001D9Fr 3  D0 02                        bne @2
001DA1r 3  E6 rr                        inc tmp2+1
001DA3r 3               @2:
001DA3r 3                               ; Adjust counter
001DA3r 3  A5 rr                        lda tmp1
001DA5r 3  D0 02                        bne @3
001DA7r 3  C6 rr                        dec tmp1+1
001DA9r 3               @3:
001DA9r 3  C6 rr                        dec tmp1
001DABr 3               
001DABr 3  A5 rr                        lda tmp1
001DADr 3  05 rr                        ora tmp1+1
001DAFr 3  D0 E5                        bne @skip_loop          ; fall through if empty line
001DB1r 3               
001DB1r 3               @empty_line:
001DB1r 3                               ; Neither the ANS Forth nor the Gforth documentation say
001DB1r 3                               ; what to return as an address if a string with only
001DB1r 3                               ; spaces is given. For speed reasons, we just return junk
001DB1r 3                               ; NOS, with the TOS zero as per standard
001DB1r 3  CA                           dex
001DB2r 3  CA                           dex
001DB3r 3  CA                           dex
001DB4r 3  CA                           dex
001DB5r 3               
001DB5r 3  74 00                        stz 0,x                 ; TOS is zero
001DB7r 3  74 01                        stz 1,x
001DB9r 3               
001DB9r 3  4C rr rr                     jmp z_parse_name        ; skip over PARSE
001DBCr 3               
001DBCr 3               @char_found:
001DBCr 3                               ; We arrive here with tmp2 pointing to the first non-space
001DBCr 3                               ; character. This is where the word really starts, so
001DBCr 3                               ; we use it to calculate the new >IN by subtracting
001DBCr 3  A5 rr                        lda tmp2
001DBEr 3  38                           sec
001DBFr 3  E5 rr                        sbc cib
001DC1r 3  85 rr                        sta toin
001DC3r 3  A5 rr                        lda tmp2+1
001DC5r 3  E5 rr                        sbc cib+1
001DC7r 3  85 rr                        sta toin+1
001DC9r 3               
001DC9r 3                               ; prepare Data Stack for PARSE by adding space
001DC9r 3                               ; as the delimiter
001DC9r 3  CA                           dex
001DCAr 3  CA                           dex
001DCBr 3               
001DCBr 3  A9 20                        lda #AscSP
001DCDr 3  95 00                        sta 0,x
001DCFr 3  74 01                        stz 1,x                 ; paranoid, now ( "name" c )
001DD1r 3               
001DD1r 3               
001DD1r 3               ; ## PARSE ( "name" c -- addr u ) "Parse input with delimiter character"
001DD1r 3               ; ## "parse"  tested  ANS core ext
001DD1r 3                       ; """https://forth-standard.org/standard/core/PARSE
001DD1r 3                       ; Find word in input string delimited by character given. Do not
001DD1r 3                       ; skip leading delimiters -- this is the main difference to PARSE-NAME.
001DD1r 3                       ; PARSE and PARSE-NAME replace WORD in modern systems. ANS discussion
001DD1r 3                       ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
001DD1r 3                       ;
001DD1r 3                       ;
001DD1r 3                       ;     cib  cib+toin   cib+ciblen
001DD1r 3                       ;      v      v            v
001DD1r 3                       ;     |###################|
001DD1r 3                       ;
001DD1r 3                       ;     |------>|  toin (>IN)
001DD1r 3                       ;     |------------------->|  ciblen
001DD1r 3                       ;
001DD1r 3                       ; The input string is stored starting at the address in the Current
001DD1r 3                       ; Input Buffer (CIB), the length of which is in CIBLEN. While searching
001DD1r 3                       ; for the delimiter, TOIN (>IN) points to the where we currently are.
001DD1r 3                       ; Since PARSE does not skip leading delimiters, we assume we are on a
001DD1r 3                       ; useful string if there are any characters at all. As with
001DD1r 3                       ; PARSE-NAME, we must be able to handle strings with a length of
001DD1r 3                       ; 16-bit for EVALUTE, which is a pain on an 8-bit machine.
001DD1r 3                       ; """
001DD1r 3               
001DD1r 3               xt_parse:
001DD1r 3  20 rr rr                     jsr underflow_1
001DD4r 3               
001DD4r 3                               ; If the input buffer is empty, we just return
001DD4r 3  A5 rr                        lda ciblen
001DD6r 3  05 rr                        ora ciblen+1
001DD8r 3  F0 0C                        beq @abort_parse
001DDAr 3               
001DDAr 3                               ; If the pointer >IN is larger or equal to the length of
001DDAr 3                               ; the input buffer (CIBLEN), the line is done. Put
001DDAr 3                               ; differently, we only continue if >IN is smaller than
001DDAr 3                               ; CIBLEN
001DDAr 3  A5 rr                        lda toin+1              ; MSB
001DDCr 3  C5 rr                        cmp ciblen+1
001DDEr 3  90 0E                        bcc @go_parse           ; unsigned comparison
001DE0r 3               
001DE0r 3  A5 rr                        lda toin                ; LSB
001DE2r 3  C5 rr                        cmp ciblen
001DE4r 3  90 08                        bcc @go_parse
001DE6r 3               
001DE6r 3               @abort_parse:
001DE6r 3                               ; Sorry, this line is over
001DE6r 3  CA                           dex
001DE7r 3  CA                           dex
001DE8r 3  74 00                        stz 0,x
001DEAr 3  74 01                        stz 1,x
001DECr 3               
001DECr 3  80 7A                        bra @done
001DEEr 3               @go_parse:
001DEEr 3                               ; We actually have work to do. Save the delimiter in
001DEEr 3                               ; tmptos.
001DEEr 3  B5 00                        lda 0,x
001DF0r 3  85 rr                        sta tmptos
001DF2r 3               
001DF2r 3                               ; We can now prepare the Data Stack for the return value
001DF2r 3  CA                           dex
001DF3r 3  CA                           dex
001DF4r 3               
001DF4r 3                               ; tmp1 is CIB+TOIN, the beginning of the current string
001DF4r 3                               ; tmp2 is initially the same as tmp1, then the work index
001DF4r 3                               ; tmp3 is CIB+CIBLEN, one char past the end of the string
001DF4r 3               
001DF4r 3                               ; Calculate the beginning of the string, which is also the
001DF4r 3                               ; address to return
001DF4r 3  A5 rr                        lda cib
001DF6r 3  18                           clc
001DF7r 3  65 rr                        adc toin        ; LSB
001DF9r 3  85 rr                        sta tmp1
001DFBr 3  85 rr                        sta tmp2
001DFDr 3  95 02                        sta 2,x
001DFFr 3               
001DFFr 3  A5 rr                        lda cib+1
001E01r 3  65 rr                        adc toin+1      ; MSB
001E03r 3  85 rr                        sta tmp1+1
001E05r 3  85 rr                        sta tmp2+1
001E07r 3  95 03                        sta 3,x
001E09r 3               
001E09r 3                               ; Calculate the address where the input buffer ends plus 1, so
001E09r 3                               ; we can compare it with TOIN, which is an index
001E09r 3  A5 rr                        lda cib
001E0Br 3  18                           clc
001E0Cr 3  65 rr                        adc ciblen
001E0Er 3  85 rr                        sta tmp3
001E10r 3  A5 rr                        lda cib+1
001E12r 3  65 rr                        adc ciblen+1
001E14r 3  85 rr                        sta tmp3+1
001E16r 3               
001E16r 3                               ; Initialize the offset we use to adjust EOL or found delimiter
001E16r 3  64 rr                        stz tmptos+1
001E18r 3               @loop:
001E18r 3                               ; If we are at the end of the string, quit
001E18r 3  A5 rr                        lda tmp2
001E1Ar 3  C5 rr                        cmp tmp3
001E1Cr 3  D0 06                        bne @not_empty
001E1Er 3               
001E1Er 3  A5 rr                        lda tmp2+1
001E20r 3  C5 rr                        cmp tmp3+1
001E22r 3  F0 1D                        beq @eol
001E24r 3               @not_empty:
001E24r 3                               ; We have to do this the hard way. In fact, it's really
001E24r 3                               ; hard since if we are dealing with a SPACE, the standard
001E24r 3                               ; wants us to skip all whitespace, not just spaces. Otherwise,
001E24r 3                               ; Tali would choke on tabs between words. For details, see
001E24r 3                               ; http://forth-standard.org/standard/file#subsection.11.3.5
001E24r 3                               ; In theory, we could make this faster by defining a delimiter
001E24r 3                               ; that is 00 as the sign that we skip all whitespace, thereby
001E24r 3                               ; avoiding having to test every time. However, somebody,
001E24r 3                               ; somewhere might want to parse a zero-delimited list. Since
001E24r 3                               ; any byte value could be chosen for that, we just test for
001E24r 3                               ; a space every single time for the moment.
001E24r 3  B2 rr                        lda (tmp2)
001E26r 3               
001E26r 3  A4 rr                        ldy tmptos
001E28r 3  C0 20                        cpy #AscSP
001E2Ar 3  D0 07                        bne @not_whitespace
001E2Cr 3               
001E2Cr 3                               ; The delimiter is a space, so we're looking for all
001E2Cr 3                               ; whitespace
001E2Cr 3  20 rr rr                     jsr is_whitespace
001E2Fr 3  90 02                        bcc @not_whitespace
001E31r 3  80 0C                        bra @found_delimiter
001E33r 3               
001E33r 3               @not_whitespace:
001E33r 3                               ; The delimiter is not a space, so we're looking for
001E33r 3                               ; whatever it is
001E33r 3  C5 rr                        cmp tmptos
001E35r 3  F0 08                        beq @found_delimiter
001E37r 3               
001E37r 3                               ; Not a delimiter, next character
001E37r 3  E6 rr                        inc tmp2
001E39r 3  D0 DD                        bne @loop
001E3Br 3  E6 rr                        inc tmp2+1
001E3Dr 3  80 D9                        bra @loop
001E3Fr 3               
001E3Fr 3               @found_delimiter:
001E3Fr 3                               ; Increase the offset: If we've found a delimiter, we want
001E3Fr 3                               ; TOIN to point to the character after it, not the delimiter
001E3Fr 3                               ; itself
001E3Fr 3  E6 rr                        inc tmptos+1
001E41r 3               @eol:
001E41r 3                               ; The length of the new string is tmp2-tmp1
001E41r 3  A5 rr                        lda tmp2
001E43r 3  38                           sec
001E44r 3  E5 rr                        sbc tmp1
001E46r 3  95 00                        sta 0,x
001E48r 3               
001E48r 3  A5 rr                        lda tmp2+1
001E4Ar 3  E5 rr                        sbc tmp1+1
001E4Cr 3  95 01                        sta 1,x
001E4Er 3               
001E4Er 3                               ; The new offset is tmp2-cib
001E4Er 3  A5 rr                        lda tmp2
001E50r 3  38                           sec
001E51r 3  E5 rr                        sbc cib
001E53r 3  85 rr                        sta toin
001E55r 3  A5 rr                        lda tmp2+1
001E57r 3  E5 rr                        sbc cib+1
001E59r 3  85 rr                        sta toin+1
001E5Br 3               
001E5Br 3                               ; Add in the delimiter
001E5Br 3  A5 rr                        lda toin
001E5Dr 3  18                           clc
001E5Er 3  65 rr                        adc tmptos+1
001E60r 3  85 rr                        sta toin
001E62r 3  A5 rr                        lda toin+1
001E64r 3  69 00                        adc #0          ; we only need the carry
001E66r 3  85 rr                        sta toin+1
001E68r 3               @done:
001E68r 3               z_parse_name:
001E68r 3  60           z_parse:        rts
001E69r 3               
001E69r 3               
001E69r 3               
001E69r 3               ; ## PICK ( n n u -- n n n ) "Move element u of the stack to TOS"
001E69r 3               ; ## "pick"  auto  ANS core ext
001E69r 3                       ; """https://forth-standard.org/standard/core/PICK
001E69r 3                       ; Take the u-th element out of the stack and put it on TOS,
001E69r 3                       ; overwriting the original TOS. 0 PICK is equivalent to DUP, 1 PICK to
001E69r 3                       ; OVER. Note that using PICK is considered poor coding form. Also note
001E69r 3                       ; that FIG Forth has a different behavior for PICK than ANS Forth.
001E69r 3                       ; """
001E69r 3               
001E69r 3               xt_pick:
001E69r 3                               ; Checking for underflow is difficult because it depends on
001E69r 3                               ; which element we want to grab. We could probably figure
001E69r 3                               ; something out, but it wouldn't work with underflow stripping
001E69r 3                               ; Since using PICK is considered poor form anyway, we just
001E69r 3                               ; leave it as it is
001E69r 3  16 00                        asl 0,x         ; we assume u < 128 (stack is small)
001E6Br 3  8A                           txa
001E6Cr 3  75 00                        adc 0,x
001E6Er 3  A8                           tay
001E6Fr 3               
001E6Fr 3  B9 02 00                     lda 0002,y
001E72r 3  95 00                        sta 0,x
001E74r 3  B9 03 00                     lda 0003,y
001E77r 3  95 01                        sta 1,x
001E79r 3               
001E79r 3  60           z_pick:         rts
001E7Ar 3               
001E7Ar 3               
001E7Ar 3               
001E7Ar 3               ; ## PLUS ( n n -- n ) "Add TOS and NOS"
001E7Ar 3               ; ## "+"  auto  ANS core
001E7Ar 3                       ; """https://forth-standard.org/standard/core/Plus"""
001E7Ar 3               xt_plus:
001E7Ar 3  20 rr rr                     jsr underflow_2
001E7Dr 3               
001E7Dr 3  18                           clc
001E7Er 3  B5 00                        lda 0,x         ; LSB
001E80r 3  75 02                        adc 2,x
001E82r 3  95 02                        sta 2,x
001E84r 3               
001E84r 3  B5 01                        lda 1,x         ; MSB. No CLC, conserve carry bit
001E86r 3  75 03                        adc 3,x
001E88r 3  95 03                        sta 3,x
001E8Ar 3               
001E8Ar 3  E8                           inx
001E8Br 3  E8                           inx
001E8Cr 3               
001E8Cr 3  60           z_plus:         rts
001E8Dr 3               
001E8Dr 3               
001E8Dr 3               ; ## PLUS_STORE ( n addr -- ) "Add number to value at given address"
001E8Dr 3               ; ## "+!"  auto  ANS core
001E8Dr 3                       ; """https://forth-standard.org/standard/core/PlusStore"""
001E8Dr 3               xt_plus_store:
001E8Dr 3  20 rr rr                     jsr underflow_2
001E90r 3               
001E90r 3                               ; move address to tmp1 so we can work with it
001E90r 3  B5 00                        lda 0,x
001E92r 3  85 rr                        sta tmp1
001E94r 3  B5 01                        lda 1,x
001E96r 3  85 rr                        sta tmp1+1
001E98r 3               
001E98r 3  A0 00                        ldy #0          ; LSB
001E9Ar 3  B1 rr                        lda (tmp1),y
001E9Cr 3  18                           clc
001E9Dr 3  75 02                        adc 2,x
001E9Fr 3  91 rr                        sta (tmp1),y
001EA1r 3               
001EA1r 3  C8                           iny             ; MSB
001EA2r 3  B1 rr                        lda (tmp1),y
001EA4r 3  75 03                        adc 3,x
001EA6r 3  91 rr                        sta (tmp1),y
001EA8r 3               
001EA8r 3  E8                           inx
001EA9r 3  E8                           inx
001EAAr 3  E8                           inx
001EABr 3  E8                           inx
001EACr 3               
001EACr 3  60           z_plus_store:   rts
001EADr 3               
001EADr 3               
001EADr 3               ; ## POSTPONE ( -- ) "Change IMMEDIATE status (it's complicated)"
001EADr 3               ; ## "postpone"  auto   ANS core
001EADr 3                       ; """https://forth-standard.org/standard/core/POSTPONE
001EADr 3                       ; Add the compilation behavior of a word to a new word at
001EADr 3                       ; compile time. If the word that follows it is immediate, include
001EADr 3                       ; it so that it will be compiled when the word being defined is
001EADr 3                       ; itself used for a new word. Tricky, but very useful.
001EADr 3                       ;
001EADr 3                       ; Because POSTPONE expects a word (not an xt) in the input stream (not
001EADr 3                       ; on the Data Stack). This means we cannot build words with
001EADr 3                       ; "jsr xt_postpone, jsr <word>" directly.
001EADr 3                       ; """
001EADr 3               
001EADr 3               xt_postpone:
001EADr 3  20 rr rr                     jsr xt_parse_name               ; ( -- addr n )
001EB0r 3               
001EB0r 3                               ; if there was no word provided, complain and quit
001EB0r 3  B5 00                        lda 0,x
001EB2r 3  15 01                        ora 1,x
001EB4r 3  D0 05                        bne @1
001EB6r 3               
001EB6r 3  A9 05                        lda #err_noname
001EB8r 3  4C rr rr                     jmp error
001EBBr 3               @1:
001EBBr 3  20 rr rr                     jsr xt_find_name                ; ( -- nt | 0 )
001EBEr 3               
001EBEr 3                               ; if word not in Dictionary, complain and quit
001EBEr 3  D0 05                        bne @2
001EC0r 3  A9 05                        lda #err_noname
001EC2r 3  4C rr rr                     jmp error
001EC5r 3               
001EC5r 3               @2:
001EC5r 3                               ; keep a copy of nt for later
001EC5r 3  B5 00                        lda 0,x
001EC7r 3  85 rr                        sta tmp1
001EC9r 3  B5 01                        lda 1,x
001ECBr 3  85 rr                        sta tmp1+1
001ECDr 3               
001ECDr 3                               ; We need the xt instead of the nt
001ECDr 3  20 rr rr                     jsr xt_name_to_int              ; ( nt -- xt )
001ED0r 3               
001ED0r 3                               ; See if this is an immediate word. This is easier
001ED0r 3                               ; with nt than with xt. The status byte of the word
001ED0r 3                               ; is nt+1
001ED0r 3  E6 rr                        inc tmp1
001ED2r 3  D0 02                        bne @3
001ED4r 3  E6 rr                        inc tmp1+1
001ED6r 3               @3:
001ED6r 3  B2 rr                        lda (tmp1)
001ED8r 3  29 04                        and #IM         ; mask all but Intermediate flag
001EDAr 3  F0 05                        beq @not_immediate
001EDCr 3               
001EDCr 3                               ; We're immediate, so instead of executing it right now, we
001EDCr 3                               ; compile it. xt is TOS, so this is easy. The RTS at the end
001EDCr 3                               ; takes us back to the original caller
001EDCr 3  20 rr rr                     jsr xt_compile_comma
001EDFr 3  80 0A                        bra @done
001EE1r 3               
001EE1r 3               @not_immediate:
001EE1r 3                               ; This is not an immediate word, so we enact "deferred
001EE1r 3                               ; compilation" by including ' <NAME> COMPILE, which we do by
001EE1r 3                               ; compiling the run-time routine of LITERAL, the xt itself, and
001EE1r 3                               ; a subroutine jump to COMPILE,
001EE1r 3  20 rr rr                     jsr xt_literal
001EE4r 3               
001EE4r 3                               ; Last, compile COMPILE,
001EE4r 3  A0 rr                        ldy #>xt_compile_comma
001EE6r 3  A9 rr                        lda #<xt_compile_comma
001EE8r 3  20 rr rr                     jsr cmpl_subroutine
001EEBr 3               @done:
001EEBr 3  60           z_postpone:     rts
001EECr 3               
001EECr 3               
001EECr 3               
001EECr 3               ; ## PREVIOUS ( -- ) "Remove the first wordlist in the search order"
001EECr 3               ; ## "previous"  auto  ANS search ext
001EECr 3                       ; """http://forth-standard.org/standard/search/PREVIOUS"""
001EECr 3               
001EECr 3               xt_previous:
001EECr 3  20 rr rr                     jsr xt_get_order
001EEFr 3  20 rr rr                     jsr xt_nip
001EF2r 3  20 rr rr                     jsr xt_one_minus
001EF5r 3  20 rr rr                     jsr xt_set_order
001EF8r 3               
001EF8r 3  60           z_previous:     rts
001EF9r 3               
001EF9r 3               
001EF9r 3               
001EF9r 3               ; ## QUESTION ( addr -- ) "Print content of a variable"
001EF9r 3               ; ## "?"  tested  ANS tools
001EF9r 3                       ; """https://forth-standard.org/standard/tools/q
001EF9r 3                       ;
001EF9r 3                       ; Only used interactively. Since humans are so slow, we
001EF9r 3                       ; save size and just go for the subroutine jumps
001EF9r 3                       ; """
001EF9r 3               xt_question:
001EF9r 3                               ; FETCH takes care of underflow check
001EF9r 3  20 rr rr                     jsr xt_fetch
001EFCr 3  20 rr rr                     jsr xt_dot
001EFFr 3               
001EFFr 3  60           z_question:     rts
001F00r 3               
001F00r 3               
001F00r 3               ; ## QUESTION_DUP ( n -- 0 | n n ) "Duplicate TOS non-zero"
001F00r 3               ; ## "?dup"  auto  ANS core
001F00r 3                       ; """https://forth-standard.org/standard/core/qDUP"""
001F00r 3               
001F00r 3               xt_question_dup:
001F00r 3  20 rr rr                     jsr underflow_1
001F03r 3               
001F03r 3                               ; Check if TOS is zero
001F03r 3  B5 00                        lda 0,x
001F05r 3  15 01                        ora 1,x
001F07r 3  F0 0A                        beq @done
001F09r 3               
001F09r 3                               ; not zero, duplicate
001F09r 3  CA                           dex
001F0Ar 3  CA                           dex
001F0Br 3  B5 02                        lda 2,x
001F0Dr 3  95 00                        sta 0,x
001F0Fr 3  B5 03                        lda 3,x
001F11r 3  95 01                        sta 1,x
001F13r 3               @done:
001F13r 3  60           z_question_dup: rts
001F14r 3               
001F14r 3               
001F14r 3               
001F14r 3               ; ## R_FETCH ( -- n ) "Get copy of top of Return Stack"
001F14r 3               ; ## "r@"  auto  ANS core
001F14r 3                       ; """https://forth-standard.org/standard/core/RFetch
001F14r 3                       ; This word is Compile Only in Tali Forth, though Gforth has it
001F14r 3                       ; work normally as well
001F14r 3                       ;
001F14r 3                       ; An alternative way to write this word
001F14r 3                       ; would be to access the elements on the stack directly like 2R@
001F14r 3                       ; does, these versions should be compared at some point.
001F14r 3                       ; """
001F14r 3               xt_r_fetch:
001F14r 3                               ; get the return address
001F14r 3  7A                           ply             ; LSB
001F15r 3  84 rr                        sty tmp1
001F17r 3  7A                           ply             ; MSB
001F18r 3               
001F18r 3                               ; --- CUT FOR NATIVE COMPILE ---
001F18r 3               
001F18r 3                               ; get the actual top of Return Stack
001F18r 3  CA                           dex
001F19r 3  CA                           dex
001F1Ar 3               
001F1Ar 3  68                           pla             ; LSB
001F1Br 3  95 00                        sta 0,x
001F1Dr 3  68                           pla             ; MSB
001F1Er 3  95 01                        sta 1,x
001F20r 3               
001F20r 3                               ; now we have to put that value back
001F20r 3  48                           pha
001F21r 3  B5 00                        lda 0,x
001F23r 3  48                           pha
001F24r 3               
001F24r 3                               ; --- CUT FOR NATIVE COMPILE ---
001F24r 3               
001F24r 3                               ; restore return value
001F24r 3  5A                           phy             ; MSB
001F25r 3  A4 rr                        ldy tmp1
001F27r 3  5A                           phy             ; LSB
001F28r 3               
001F28r 3  60           z_r_fetch:      rts
001F29r 3               
001F29r 3               
001F29r 3               ; ## R_FROM ( -- n )(R: n --) "Move top of Return Stack to TOS"
001F29r 3               ; ## "r>"  auto  ANS core
001F29r 3                       ; """https://forth-standard.org/standard/core/Rfrom
001F29r 3                       ; Move Top of Return Stack to Top of Data Stack.
001F29r 3                       ;
001F29r 3                       ; We have to move
001F29r 3                       ; the RTS address out of the way first. This word is handled
001F29r 3                       ; differently for native and and subroutine compilation, see COMPILE,
001F29r 3                       ; This is a compile-only word
001F29r 3                       ; """
001F29r 3               
001F29r 3               xt_r_from:
001F29r 3                               ; Rescue the address of the return jump that is currently
001F29r 3                               ; on top of the Return Stack. If this word is natively
001F29r 3                               ; compiled, this is a total waste of time
001F29r 3  68                           pla             ; LSB
001F2Ar 3  85 rr                        sta tmptos
001F2Cr 3  7A                           ply             ; MSB
001F2Dr 3               
001F2Dr 3                               ; --- CUT FOR NATIVE CODING ---
001F2Dr 3               
001F2Dr 3  CA                           dex
001F2Er 3  CA                           dex
001F2Fr 3               
001F2Fr 3                               ; now we can access the actual data
001F2Fr 3               
001F2Fr 3  68                           pla             ; LSB
001F30r 3  95 00                        sta 0,x
001F32r 3  68                           pla             ; MSB
001F33r 3  95 01                        sta 1,x
001F35r 3               
001F35r 3                               ; --- CUT FOR NATIVE CODING ---
001F35r 3               
001F35r 3                               ; restore the return address
001F35r 3  5A                           phy             ; MSB
001F36r 3  A5 rr                        lda tmptos
001F38r 3  48                           pha             ; LSB
001F39r 3               
001F39r 3  60           z_r_from:       rts
001F3Ar 3               
001F3Ar 3               
001F3Ar 3               ; ## R_TO_INPUT ( -- ) ( R: n n n n -- ) "Restore input state from Return Stack"
001F3Ar 3               ; ## "r>input"  tested  Tali Forth
001F3Ar 3                       ; """Restore the current input state as defined by insrc, cib, ciblen,
001F3Ar 3                       ; and toin from the Return Stack.
001F3Ar 3                       ;
001F3Ar 3                       ; See INPUT_TO_R for a discussion of this word. Uses tmp1
001F3Ar 3                       ; """
001F3Ar 3               
001F3Ar 3               xt_r_to_input:
001F3Ar 3               
001F3Ar 3                               ; We arrive here with the return address on the top of the
001F3Ar 3                               ; 65c02's stack. We need to move it out of the way first
001F3Ar 3  68                           pla
001F3Br 3  85 rr                        sta tmp1
001F3Dr 3  68                           pla
001F3Er 3  85 rr                        sta tmp1+1
001F40r 3               
001F40r 3                               ; This assumes that insrc is the first of eight bytes and
001F40r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001F40r 3                               ; Page. Since we went in reverse order, insrc is now on the top
001F40r 3                               ; of the Return Stack.
001F40r 3  A0 00                        ldy #0
001F42r 3               @loop:
001F42r 3  68                           pla
001F43r 3  99 rr rr                     sta insrc,y
001F46r 3  C8                           iny
001F47r 3  C0 08                        cpy #8
001F49r 3  D0 F7                        bne @loop
001F4Br 3               
001F4Br 3                               ; Restore address for return jump
001F4Br 3  A5 rr                        lda tmp1+1
001F4Dr 3  48                           pha
001F4Er 3  A5 rr                        lda tmp1
001F50r 3  48                           pha
001F51r 3               
001F51r 3  60           z_r_to_input: 	rts
001F52r 3               
001F52r 3               
001F52r 3               
001F52r 3               ; ## RECURSE ( -- ) "Copy recursive call to word being defined"
001F52r 3               ; ## "recurse"  auto  ANS core
001F52r 3                       ; """https://forth-standard.org/standard/core/RECURSE
001F52r 3                       ;
001F52r 3                       ; This word may not be natively compiled
001F52r 3                       ; """
001F52r 3               
001F52r 3               xt_recurse:
001F52r 3                               ; The whole routine amounts to compiling a reference to
001F52r 3                               ; the word that is being compiled. First, we save the JSR
001F52r 3                               ; instruction
001F52r 3  A0 00                        ldy #0
001F54r 3               
001F54r 3  A9 20                        lda #$20        ; opcode for JSR
001F56r 3  91 rr                        sta (cp),y
001F58r 3  C8                           iny
001F59r 3               
001F59r 3                               ; Next, we save the LSB and MSB of the xt of the word
001F59r 3                               ; we are currently working on. We first need to see if
001F59r 3                               ; WORKWORD has the nt (: started the word) or the
001F59r 3                               ; xt (:NONAME started the word). Bit 6 in status tells us.
001F59r 3  24 rr                        bit status
001F5Br 3  70 0C                        bvs @nt_in_workword
001F5Dr 3               
001F5Dr 3                               ; This is a special :NONAME word. Just copy the xt
001F5Dr 3                               ; from WORKWORD into the dictionary.
001F5Dr 3  A5 rr                        lda workword
001F5Fr 3  91 rr                        sta (cp),y
001F61r 3  C8                           iny
001F62r 3  A5 rr                        lda workword+1
001F64r 3  91 rr                        sta (cp),y
001F66r 3  C8                           iny
001F67r 3  80 1B                        bra @update_cp
001F69r 3               
001F69r 3               @nt_in_workword:
001F69r 3                               ; This is a regular : word, so the xt is four bytes down
001F69r 3                               ; from the nt which we saved in WORKWORD. We could probably
001F69r 3                               ; use NAME>INT here but this is going to be faster, and
001F69r 3                               ; fast counts with recursion
001F69r 3  A5 rr                        lda workword            ; LSB
001F6Br 3  18                           clc
001F6Cr 3  69 04                        adc #4
001F6Er 3  85 rr                        sta tmp1
001F70r 3  A5 rr                        lda workword+1          ; MSB
001F72r 3  69 00                        adc #0
001F74r 3  85 rr                        sta tmp1+1
001F76r 3               
001F76r 3  B2 rr                        lda (tmp1)
001F78r 3  91 rr                        sta (cp),y
001F7Ar 3  5A                           phy
001F7Br 3  A0 01                        ldy #1
001F7Dr 3  B1 rr                        lda (tmp1),y
001F7Fr 3  7A                           ply
001F80r 3  C8                           iny
001F81r 3  91 rr                        sta (cp),y
001F83r 3  C8                           iny
001F84r 3               
001F84r 3               @update_cp:
001F84r 3  98                           tya
001F85r 3  18                           clc
001F86r 3  65 rr                        adc cp
001F88r 3  85 rr                        sta cp
001F8Ar 3  90 02                        bcc @done
001F8Cr 3  E6 rr                        inc cp+1
001F8Er 3               @done:
001F8Er 3  60           z_recurse:      rts
001F8Fr 3               
001F8Fr 3               
001F8Fr 3               
001F8Fr 3               ; ## REFILL ( -- f ) "Refill the input buffer"
001F8Fr 3               ; ## "refill"  tested  ANS core ext
001F8Fr 3                       ; """https://forth-standard.org/standard/core/REFILL
001F8Fr 3                       ; Attempt to fill the input buffer from the input source, returning
001F8Fr 3                       ; a true flag if successful. When the input source is the user input
001F8Fr 3                       ; device, attempt to receive input into the terminal input buffer. If
001F8Fr 3                       ; successful, make the result the input buffer, set >IN to zero, and
001F8Fr 3                       ; return true. Receipt of a line containing no characters is considered
001F8Fr 3                       ; successful. If there is no input available from the current input
001F8Fr 3                       ; source, return false. When the input source is a string from EVALUATE,
001F8Fr 3                       ; return false and perform no other action." See
001F8Fr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001F8Fr 3                       ; and Conklin & Rather p. 156. Note we don't have to care about blocks
001F8Fr 3                       ; because REFILL is never used on blocks - Tali is able to evaluate the
001F8Fr 3                       ; entire block as a 1024 byte string.
001F8Fr 3                       ; """"
001F8Fr 3               
001F8Fr 3               xt_refill:
001F8Fr 3                               ; Get input source from SOURCE-ID. This is an
001F8Fr 3                               ; optimized version of a subroutine jump to SOURCE-ID
001F8Fr 3  A5 rr                        lda insrc               ; cheat: We only check LSB
001F91r 3  D0 2D                        bne @src_not_kbd
001F93r 3               
001F93r 3                               ; SOURCE-ID of zero means we're getting stuff from the keyboard
001F93r 3                               ; with ACCEPT, which wants the address of the current input
001F93r 3                               ; buffer NOS and the max number of characters to accept TOS
001F93r 3  CA                           dex
001F94r 3  CA                           dex
001F95r 3  CA                           dex
001F96r 3  CA                           dex
001F97r 3               
001F97r 3  A5 rr                        lda cib                 ; address of CIB is NOS
001F99r 3  95 02                        sta 2,x
001F9Br 3  A5 rr                        lda cib+1
001F9Dr 3  95 03                        sta 3,x
001F9Fr 3               
001F9Fr 3  64 rr                        stz ciblen              ; go in with empty buffer
001FA1r 3  64 rr                        stz ciblen+1
001FA3r 3               
001FA3r 3  A9 FF                        lda #bsize              ; max number of chars is TOS
001FA5r 3  95 00                        sta 0,x
001FA7r 3  74 01                        stz 1,x                 ; cheat: We only accept max 255
001FA9r 3               
001FA9r 3  20 rr rr                     jsr xt_accept           ; ( addr n1 -- n2)
001FACr 3               
001FACr 3                               ; ACCEPT returns the number of characters accepted, which
001FACr 3                               ; belong in CIBLEN
001FACr 3  B5 00                        lda 0,x
001FAEr 3  85 rr                        sta ciblen
001FB0r 3  B5 01                        lda 1,x
001FB2r 3  85 rr                        sta ciblen+1            ; though we only accept 255 chars
001FB4r 3               
001FB4r 3                               ; make >IN point to beginning of buffer
001FB4r 3  64 rr                        stz toin
001FB6r 3  64 rr                        stz toin+1
001FB8r 3               
001FB8r 3  A9 FF                        lda #$FF                ; overwrite with TRUE flag
001FBAr 3  95 00                        sta 0,x
001FBCr 3  95 01                        sta 1,x
001FBEr 3               
001FBEr 3  80 10                        bra @done
001FC0r 3               
001FC0r 3               @src_not_kbd:
001FC0r 3                               ; If SOURCE-ID doesn't return a zero, it must be a string in
001FC0r 3                               ; memory or a file (remember, no blocks in this version).
001FC0r 3                               ; If source is a string, we were given the flag -1 ($FFFF)
001FC0r 3  1A                           inc
001FC1r 3  D0 08                        bne @src_not_string
001FC3r 3               
001FC3r 3                               ; Simply return FALSE flag as per specification
001FC3r 3  CA                           dex
001FC4r 3  CA                           dex
001FC5r 3  74 00                        stz 0,x
001FC7r 3  74 01                        stz 1,x
001FC9r 3               
001FC9r 3  80 05                        bra z_refill
001FCBr 3               
001FCBr 3               @src_not_string:
001FCBr 3                               ; Since we don't have blocks, this must mean that we are trying
001FCBr 3                               ; to read from a file. However, we don't have files yet, so we
001FCBr 3                               ; report an error and jump to ABORT.
001FCBr 3  A9 01                        lda #err_badsource
001FCDr 3  4C rr rr                     jmp error
001FD0r 3               @done:
001FD0r 3  60           z_refill:       rts
001FD1r 3               
001FD1r 3               
001FD1r 3               
001FD1r 3               ; ## REPEAT (C: orig dest -- ) ( -- ) "Loop flow control"
001FD1r 3               ; ## "repeat"  auto  ANS core
001FD1r 3                       ; """http://forth-standard.org/standard/core/REPEAT"""
001FD1r 3               
001FD1r 3               xt_repeat:
001FD1r 3                               ; Run again first
001FD1r 3  20 rr rr                     jsr xt_again
001FD4r 3               
001FD4r 3                               ; Stuff HERE in for the branch address
001FD4r 3                               ; to get out of the loop
001FD4r 3  20 rr rr                     jsr xt_here
001FD7r 3  20 rr rr                     jsr xt_swap
001FDAr 3  20 rr rr                     jsr xt_store
001FDDr 3               
001FDDr 3  60           z_repeat:       rts
001FDEr 3               
001FDEr 3               
001FDEr 3               
001FDEr 3               ; ## RIGHT_BRACKET ( -- ) "Enter the compile state"
001FDEr 3               ; ## "]"  auto  ANS core
001FDEr 3                       ; """https://forth-standard.org/standard/right-bracket
001FDEr 3                       ; This is an immediate word.
001FDEr 3                       ; """
001FDEr 3               xt_right_bracket:
001FDEr 3  A9 FF                        lda #$FF
001FE0r 3  85 rr                        sta state
001FE2r 3  85 rr                        sta state+1
001FE4r 3               z_right_bracket:
001FE4r 3  60                           rts
001FE5r 3               
001FE5r 3               
001FE5r 3               ; ## ROOT_WORDLIST ( -- u ) "WID for the Root (minimal) wordlist"
001FE5r 3               ; ## "root-wordlist"  tested  Tali Editor
001FE5r 3               xt_root_wordlist:
001FE5r 3  CA                           dex             ; The WID for the Root wordlist is 3.
001FE6r 3  CA                           dex
001FE7r 3  A9 03                        lda #3
001FE9r 3  95 00                        sta 0,x
001FEBr 3  74 01                        stz 1,x
001FEDr 3               
001FEDr 3               z_root_wordlist:
001FEDr 3  60                           rts
001FEEr 3               
001FEEr 3               
001FEEr 3               ; ## ROT ( a b c -- b c a ) "Rotate first three stack entries downwards"
001FEEr 3               ; ## "rot"  auto  ANS core
001FEEr 3                       ; """https://forth-standard.org/standard/core/ROT
001FEEr 3                       ; Remember "R for 'Revolution'" - the bottom entry comes out
001FEEr 3                       ; on top!
001FEEr 3                       ; """
001FEEr 3               
001FEEr 3               xt_rot:
001FEEr 3  20 rr rr                     jsr underflow_3
001FF1r 3               
001FF1r 3  B4 05                        ldy 5,x         ; MSB first
001FF3r 3  B5 03                        lda 3,x
001FF5r 3  95 05                        sta 5,x
001FF7r 3  B5 01                        lda 1,x
001FF9r 3  95 03                        sta 3,x
001FFBr 3  94 01                        sty 1,x
001FFDr 3               
001FFDr 3  B4 04                        ldy 4,x         ; LSB next
001FFFr 3  B5 02                        lda 2,x
002001r 3  95 04                        sta 4,x
002003r 3  B5 00                        lda 0,x
002005r 3  95 02                        sta 2,x
002007r 3  94 00                        sty 0,x
002009r 3               
002009r 3  60           z_rot:          rts
00200Ar 3               
00200Ar 3               
00200Ar 3               
00200Ar 3               ; ## RSHIFT ( x u -- x ) "Shift TOS to the right"
00200Ar 3               ; ## "rshift"  auto  ANS core
00200Ar 3                       ; """https://forth-standard.org/standard/core/RSHIFT"""
00200Ar 3               xt_rshift:
00200Ar 3  20 rr rr                     jsr underflow_2
00200Dr 3               
00200Dr 3                               ; We shift maximal by 16 bits, mask everything else
00200Dr 3  B5 00                        lda 0,x
00200Fr 3  29 0F                        and #%00001111
002011r 3  F0 08                        beq @done               ; if 0 shifts, quit
002013r 3               
002013r 3  A8                           tay
002014r 3               @loop:
002014r 3  56 03                        lsr 3,x
002016r 3  76 02                        ror 2,x
002018r 3  88                           dey
002019r 3  D0 F9                        bne @loop
00201Br 3               @done:
00201Br 3  E8                           inx
00201Cr 3  E8                           inx
00201Dr 3               
00201Dr 3  60           z_rshift:       rts
00201Er 3               
00201Er 3               
00201Er 3               ; ## S_BACKSLASH_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
00201Er 3               ; ## "s\""  auto  ANS core
00201Er 3                       ; """https://forth-standard.org/standard/core/Seq
00201Er 3                       ; Store address and length of string given, returning ( addr u ).
00201Er 3                       ; ANS core claims this is compile-only, but the file set expands it
00201Er 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
00201Er 3                       ; are evil. We follow general usage. This is just like S" except
00201Er 3                       ; that it allows for some special escaped characters.
00201Er 3                       ; """
00201Er 3               
00201Er 3               xt_s_backslash_quote:
00201Er 3                               ; tmp2 will be used to determine if we are handling
00201Er 3                               ; escaped characters or not. In this case, we are,
00201Er 3                               ; so set it to $FF (the upper byte will be used to
00201Er 3                               ; determine if we just had a \ and the next character
00201Er 3                               ; needs to be modifed as an escaped character).
00201Er 3  A9 FF                        lda #$FF
002020r 3  85 rr                        sta tmp2
002022r 3  64 rr                        stz tmp2+1
002024r 3               
002024r 3                               ; Now that the flag is set, jump into s_quote to process
002024r 3                               ; the string.
002024r 3  20 rr rr                     jsr s_quote_start
002027r 3               @done:
002027r 3               z_s_backslash_quote:
002027r 3  60                           rts
002028r 3               
002028r 3               
002028r 3               ; This is a helper function for s_backslash_quote to convert a character
002028r 3               ; from ASCII to the corresponding hex value, eg 'F'->15
002028r 3               convert_hex_value:
002028r 3               
002028r 3  C9 41                cmp #'A'
00202Ar 3  90 07                bcc @digit
00202Cr 3               
00202Cr 3                       ; It's A-F
00202Cr 3  29 DF                and #$DF                ; Make it uppercase.
00202Er 3  38                   sec
00202Fr 3  E9 37                sbc #'7'                 ; gives value 10 for 'A'
002031r 3  80 03                bra @done
002033r 3               
002033r 3               @digit:
002033r 3                       ; It's 0-9
002033r 3  38                   sec
002034r 3  E9 30                sbc #'0'
002036r 3               
002036r 3               @done:
002036r 3  60                   rts
002037r 3               
002037r 3               
002037r 3               
002037r 3               ; ## SEARCH_WORDLIST ( caddr u wid -- 0 | xt 1 | xt -1) "Search for a word in a wordlist"
002037r 3               ; ## "search-wordlist" auto ANS search
002037r 3                       ; """https://forth-standard.org/standard/search/SEARCH_WORDLIST"""
002037r 3               
002037r 3               xt_search_wordlist:
002037r 3  20 rr rr                     jsr underflow_3
00203Ar 3               
00203Ar 3                               ; Set up tmp1 with the wordlist indicated by wid
00203Ar 3                               ; on the stack. Start by putting the base address
00203Ar 3                               ; of the wordlists in tmp2.
00203Ar 3  A5 rr                        lda up
00203Cr 3  18                           clc
00203Dr 3  69 06                        adc #wordlists_offset
00203Fr 3  85 rr                        sta tmp2
002041r 3  A5 rr                        lda up+1
002043r 3  69 00                        adc #0          ; Adding carry
002045r 3  85 rr                        sta tmp2+1
002047r 3               
002047r 3                               ; Add the wid (in cells) to the base address.
002047r 3  B5 00                        lda 0,x
002049r 3  0A                           asl             ; Convert wid to offset in cells (x2)
00204Ar 3  65 rr                        adc tmp2
00204Cr 3  85 rr                        sta tmp2
00204Er 3  90 02                        bcc @1
002050r 3  E6 rr                        inc tmp2+1      ; Propagate carry if needed.
002052r 3               
002052r 3                               ; tmp2 now holds the address of the dictionary pointer
002052r 3                               ; for the given wordlist.
002052r 3               @1:
002052r 3                               ; Remove the wid from the stack.
002052r 3  E8                           inx
002053r 3  E8                           inx
002054r 3               
002054r 3                               ; check for special case of an empty string (length zero)
002054r 3  B5 00                        lda 0,x
002056r 3  15 01                        ora 1,x
002058r 3  D0 03                        bne @check_wordlist
00205Ar 3  4C rr rr                     jmp @done
00205Dr 3               
00205Dr 3               @check_wordlist:
00205Dr 3                               ; Check for special case of empty wordlist
00205Dr 3                               ; (dictionary pointer, in tmp2, is 0)
00205Dr 3  A5 rr                        lda tmp2
00205Fr 3  05 rr                        ora tmp2+1
002061r 3  D0 03                        bne @have_string
002063r 3  4C rr rr                     jmp @done
002066r 3               
002066r 3               @have_string:
002066r 3                               ; set up first loop iteration
002066r 3  B2 rr                        lda (tmp2)              ; nt of first word in Dictionary
002068r 3  85 rr                        sta tmp1
00206Ar 3               
00206Ar 3  E6 rr                        inc tmp2                ; Move to the upper byte
00206Cr 3  D0 02                        bne @2
00206Er 3  E6 rr                        inc tmp2+1
002070r 3               @2:
002070r 3  B2 rr                        lda (tmp2)
002072r 3  85 rr                        sta tmp1+1
002074r 3               
002074r 3                               ; Reuse tmp2 to hold the address of the mystery string.
002074r 3  B5 02                        lda 2,x                 ; Address of mystery string
002076r 3  85 rr                        sta tmp2
002078r 3  B5 03                        lda 3,x
00207Ar 3  85 rr                        sta tmp2+1
00207Cr 3               
00207Cr 3               @loop:
00207Cr 3                               ; first quick test: Are strings the same length?
00207Cr 3  B2 rr                        lda (tmp1)
00207Er 3  D5 00                        cmp 0,x
002080r 3  D0 7B                        bne @next_entry
002082r 3               
002082r 3               @compare_string:
002082r 3                               ; are the same length, so we now have to compare each
002082r 3                               ; character
002082r 3               
002082r 3                               ; second quick test: Is the first character the same?
002082r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
002084r 3               
002084r 3                               ; Lowercase the incoming charcter.
002084r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
002086r 3  B0 07                        bcs @compare_first
002088r 3  C9 41                        cmp #$41        ; ASCII 'A'
00208Ar 3  90 03                        bcc @compare_first
00208Cr 3               
00208Cr 3                               ; An uppercase letter has been located.  Make it
00208Cr 3                               ; lowercase.
00208Cr 3  18                           clc
00208Dr 3  69 20                        adc #$20
00208Fr 3               
00208Fr 3               @compare_first:
00208Fr 3  A0 08                        ldy #8          ; Offset in nt to name
002091r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
002093r 3  D0 68                        bne @next_entry
002095r 3               
002095r 3                               ; string length are the same and the first character is the
002095r 3                               ; same. If the length of the string is 1, we're already done
002095r 3  B5 00                        lda 0,x
002097r 3  3A                           dec
002098r 3  F0 2C                        beq @success
00209Ar 3               
00209Ar 3                               ; No such luck: The strings are the same length and the first
00209Ar 3                               ; char is the same, but the word is more than one char long.
00209Ar 3                               ; So we suck it up and compare every single character. We go
00209Ar 3                               ; from back to front, because words like CELLS and CELL+ would
00209Ar 3                               ; take longer otherwise. We can also shorten the loop by one
00209Ar 3                               ; because we've already compared the first char.
00209Ar 3               
00209Ar 3                               ; The string of the word we're testing against is 8 bytes down
00209Ar 3  A5 rr                        lda tmp1
00209Cr 3  48                           pha             ; Preserve tmp1 on the return stack.
00209Dr 3  18                           clc
00209Er 3  69 08                        adc #8
0020A0r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
0020A2r 3  A5 rr                        lda tmp1+1
0020A4r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
0020A5r 3  69 00                        adc #0          ; we only need the carry
0020A7r 3  85 rr                        sta tmp1+1
0020A9r 3               
0020A9r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
0020ABr 3  88                           dey
0020ACr 3               
0020ACr 3               @string_loop:
0020ACr 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
0020AEr 3               
0020AEr 3                               ; Lowercase the incoming charcter.
0020AEr 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
0020B0r 3  B0 07                        bcs @check_char
0020B2r 3  C9 41                        cmp #$41        ; ASCII 'A'
0020B4r 3  90 03                        bcc @check_char
0020B6r 3               
0020B6r 3                               ; An uppercase letter has been located.  Make it
0020B6r 3                               ; lowercase.
0020B6r 3  18                           clc
0020B7r 3  69 20                        adc #$20
0020B9r 3               @check_char:
0020B9r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
0020BBr 3  D0 3A                        bne @next_entry_tmp1
0020BDr 3               
0020BDr 3  88                           dey
0020BEr 3  D0 EC                        bne @string_loop
0020C0r 3               
0020C0r 3               @success_tmp1:
0020C0r 3  68                           pla             ; Restore tmp1 from the return stack.
0020C1r 3  85 rr                        sta tmp1+1
0020C3r 3  68                           pla
0020C4r 3  85 rr                        sta tmp1
0020C6r 3               
0020C6r 3               @success:
0020C6r 3                               ; The strings match. Drop the count and put correct nt TOS
0020C6r 3  E8                           inx
0020C7r 3  E8                           inx
0020C8r 3  A5 rr                        lda tmp1
0020CAr 3  95 00                        sta 0,x
0020CCr 3  A5 rr                        lda tmp1+1
0020CEr 3  95 01                        sta 1,x
0020D0r 3               
0020D0r 3                               ; Change the nt into an xt, but save a copy of the nt
0020D0r 3                               ; to look up whether the word is immediate or not.
0020D0r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0020D3r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
0020D6r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
0020D9r 3               
0020D9r 3  A0 00                        ldy #0                  ; Prepare flag
0020DBr 3               
0020DBr 3                               ; The flags are in the second byte of the header
0020DBr 3  F6 00                        inc 0,x
0020DDr 3  D0 02                        bne @3
0020DFr 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
0020E1r 3               @3:
0020E1r 3  A1 00                        lda (0,x)               ; ( xt char )
0020E3r 3  29 04                        and #IM
0020E5r 3  D0 08                        bne @immediate          ; bit set, we're immediate
0020E7r 3               
0020E7r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
0020E9r 3  95 00                        sta 0,x
0020EBr 3  95 01                        sta 1,x
0020EDr 3  80 28                        bra @done_nodrop
0020EFr 3               
0020EFr 3               @immediate:
0020EFr 3  A9 01                        lda #1                  ; We're immediate, return 1
0020F1r 3  95 00                        sta 0,x
0020F3r 3  74 01                        stz 1,x
0020F5r 3               
0020F5r 3  80 20                        bra @done_nodrop
0020F7r 3               
0020F7r 3               @next_entry_tmp1:
0020F7r 3  68                           pla             ; Restore tmp1 from the return stack.
0020F8r 3  85 rr                        sta tmp1+1
0020FAr 3  68                           pla
0020FBr 3  85 rr                        sta tmp1
0020FDr 3               @next_entry:
0020FDr 3                               ; Not the same, so we get the next word. Next header
0020FDr 3                               ; address is two bytes down
0020FDr 3  A0 02                        ldy #2
0020FFr 3  B1 rr                        lda (tmp1),y
002101r 3  48                           pha
002102r 3  C8                           iny
002103r 3  B1 rr                        lda (tmp1),y
002105r 3  85 rr                        sta tmp1+1
002107r 3  68                           pla
002108r 3  85 rr                        sta tmp1
00210Ar 3               
00210Ar 3                               ; If we got a zero, we've walked the whole Dictionary and
00210Ar 3                               ; return as a failure, otherwise try again
00210Ar 3  05 rr                        ora tmp1+1
00210Cr 3  F0 03                        beq @fail_done
00210Er 3  4C rr rr                     jmp @loop
002111r 3               
002111r 3               @fail_done:
002111r 3  74 02                        stz 2,x         ; failure flag
002113r 3  74 03                        stz 3,x
002115r 3               @done:
002115r 3  E8                           inx
002116r 3  E8                           inx
002117r 3               @done_nodrop:
002117r 3               z_search_wordlist:
002117r 3  60                           rts
002118r 3               
002118r 3               
002118r 3               
002118r 3               ; ## SEE ( "name" -- ) "Print information about a Forth word"
002118r 3               ; ## "see" tested  ANS tools
002118r 3                       ; """https://forth-standard.org/standard/tools/SEE
002118r 3                       ; SEE takes the name of a word and prints its name token (nt),
002118r 3                       ; execution token (xt), size in bytes, flags used, and then dumps the
002118r 3                       ; code and disassembles it.
002118r 3                       ; """
002118r 3               
002118r 3               xt_see:
002118r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
00211Br 3  20 rr rr                     jsr xt_find_name        ; ( nt | 0 )
00211Er 3               
00211Er 3                               ; If we got back a zero we don't know that word and so we quit
00211Er 3                               ; with an error
00211Er 3  B5 00                        lda 0,x
002120r 3  15 01                        ora 1,x
002122r 3  D0 05                        bne @1
002124r 3               
002124r 3  A9 05                        lda #err_noname
002126r 3  4C rr rr                     jmp error
002129r 3               @1:
002129r 3  20 rr rr                     jsr xt_cr
00212Cr 3               
00212Cr 3                               ; We have a legal word, so let's get serious. Save the current
00212Cr 3                               ; number base and use hexadecimal instead.
00212Cr 3  A5 rr                        lda base
00212Er 3  48                           pha
00212Fr 3  20 rr rr                     jsr xt_hex
002132r 3               
002132r 3  A9 0A                        lda #str_see_nt
002134r 3  20 rr rr                     jsr print_string_no_lf
002137r 3               
002137r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
00213Ar 3  20 rr rr                     jsr xt_u_dot
00213Dr 3  20 rr rr                     jsr xt_space            ; ( nt )
002140r 3               
002140r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002143r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
002146r 3               
002146r 3  A9 0B                        lda #str_see_xt
002148r 3  20 rr rr                     jsr print_string_no_lf
00214Br 3               
00214Br 3  20 rr rr                     jsr xt_dup              ; ( nt xt xt )
00214Er 3  20 rr rr                     jsr xt_u_dot
002151r 3  20 rr rr                     jsr xt_cr               ; ( nt xt )
002154r 3               
002154r 3                               ; We print letters for flags and then later follow it with 1 or
002154r 3                               ; 0 to mark if which flag is set
002154r 3  A9 09                        lda #str_see_flags
002156r 3  20 rr rr                     jsr print_string_no_lf
002159r 3               
002159r 3  20 rr rr                     jsr xt_over             ; ( nt xt nt )
00215Cr 3  20 rr rr                     jsr xt_one_plus         ; ( nt xt nt+1 )
00215Fr 3  20 rr rr                     jsr xt_fetch            ; ( nt xt flags )
002162r 3               
002162r 3  B5 00                        lda 0,x
002164r 3               
002164r 3                               ; This is crude, but for the moment it is good enough
002164r 3  A0 06                        ldy #6                  ; Not all bits are used
002166r 3               @flag_loop:
002166r 3  48                           pha
002167r 3  29 01                        and #%00000001
002169r 3  18                           clc
00216Ar 3  69 30                        adc #$30                ; ASCII "0"
00216Cr 3  20 rr rr                     jsr emit_a
00216Fr 3  20 rr rr                     jsr xt_space
002172r 3               
002172r 3  68                           pla
002173r 3  6A                           ror                     ; Next flag
002174r 3               
002174r 3  88                           dey
002175r 3  D0 EF                        bne @flag_loop
002177r 3               
002177r 3  20 rr rr                     jsr xt_cr
00217Ar 3               
00217Ar 3  E8                           inx
00217Br 3  E8                           inx                     ; ( nt xt )
00217Cr 3               
00217Cr 3                               ; Figure out the size
00217Cr 3  A9 0C                        lda #str_see_size
00217Er 3  20 rr rr                     jsr print_string_no_lf
002181r 3               
002181r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
002184r 3  20 rr rr                     jsr xt_wordsize         ; ( xt u )
002187r 3  20 rr rr                     jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
00218Ar 3  20 rr rr                     jsr xt_decimal
00218Dr 3  20 rr rr                     jsr xt_u_dot            ; ( xt u )
002190r 3  20 rr rr                     jsr xt_hex
002193r 3  20 rr rr                     jsr xt_cr
002196r 3               
002196r 3                               ; Dump hex and disassemble
002196r 3  20 rr rr                     jsr xt_two_dup          ; ( xt u xt u )
002199r 3  20 rr rr                     jsr xt_dump
00219Cr 3  20 rr rr                     jsr xt_cr
00219Fr 3  20 rr rr                     jsr xt_disasm
0021A2r 3               
0021A2r 3  68                           pla
0021A3r 3  85 rr                        sta base
0021A5r 3               
0021A5r 3  60           z_see:          rts
0021A6r 3               
0021A6r 3               
0021A6r 3               
0021A6r 3               ; ## SET_CURRENT ( wid -- ) "Set the compilation wordlist"
0021A6r 3               ; ## "set-current" auto ANS search
0021A6r 3                       ; """https://forth-standard.org/standard/search/SET-CURRENT"""
0021A6r 3               
0021A6r 3               xt_set_current:
0021A6r 3  20 rr rr                     jsr underflow_1
0021A9r 3               
0021A9r 3                               ; Save the value from the data stack.
0021A9r 3  A0 04                        ldy #current_offset
0021ABr 3  B5 00                        lda 0,x         ; CURRENT is byte variable
0021ADr 3  91 rr                        sta (up),y      ; so only the LSB is used.
0021AFr 3               
0021AFr 3  E8                           inx
0021B0r 3  E8                           inx
0021B1r 3               
0021B1r 3  60           z_set_current:  rts
0021B2r 3               
0021B2r 3               
0021B2r 3               
0021B2r 3               ; ## SET_ORDER ( wid_n .. wid_1 n -- ) "Set the current search order"
0021B2r 3               ; ## "set-order" auto ANS search
0021B2r 3                       ; """https://forth-standard.org/standard/search/SET-ORDER"""
0021B2r 3               
0021B2r 3               xt_set_order:
0021B2r 3                               ; Test for -1 TOS
0021B2r 3  A9 FF                        lda #$FF
0021B4r 3  D5 01                        cmp 1,x
0021B6r 3  D0 12                        bne @start
0021B8r 3  D5 00                        cmp 0,x
0021BAr 3  D0 0E                        bne @start
0021BCr 3               
0021BCr 3                               ; There is a -1 TOS.  Replace it with the default
0021BCr 3                               ; search order, which is just the FORTH-WORDLIST.
0021BCr 3  CA                           dex             ; Make room for the count.
0021BDr 3  CA                           dex
0021BEr 3  74 03                        stz 3,x         ; ROOT-WORDLIST is 3
0021C0r 3  A9 03                        lda #3
0021C2r 3  95 02                        sta 2,x
0021C4r 3  74 01                        stz 1,x         ; Count is 1.
0021C6r 3  A9 01                        lda #1
0021C8r 3  95 00                        sta 0,x
0021CAr 3               
0021CAr 3                               ; Continue processing with ( forth-wordlist 1 -- )
0021CAr 3               @start:
0021CAr 3                               ; Set #ORDER - the number of wordlists in the search order.
0021CAr 3  A0 1E                        ldy #num_order_offset
0021CCr 3  B5 00                        lda 0,x
0021CEr 3  91 rr                        sta (up),y      ; #ORDER is a byte variable.
0021D0r 3  85 rr                        sta tmp1        ; Save a copy for zero check and looping.
0021D2r 3                                               ; Only the low byte is saved in tmp1 as
0021D2r 3                                               ; only 8 wordlists are allowed.
0021D2r 3               
0021D2r 3  E8                           inx             ; Drop the count off the data stack.
0021D3r 3  E8                           inx
0021D4r 3               
0021D4r 3                               ; Check if there are zero wordlists.
0021D4r 3  A5 rr                        lda tmp1
0021D6r 3  F0 0D                        beq @done       ; If zero, there are no wordlists.
0021D8r 3               
0021D8r 3                               ; Move the wordlist ids from the data stack to the search order.
0021D8r 3  A0 1F                        ldy #search_order_offset
0021DAr 3               @loop:
0021DAr 3                               ; Move one wordlist id over into the search order.
0021DAr 3  B5 00                        lda 0,x         ; The search order is a byte array
0021DCr 3  91 rr                        sta (up),y      ; so only save the LSB
0021DEr 3  C8                           iny
0021DFr 3               
0021DFr 3                               ; Remove it from the data stack.
0021DFr 3  E8                           inx
0021E0r 3  E8                           inx
0021E1r 3               
0021E1r 3                               ; See if that was the last one to process (first in the list).
0021E1r 3  C6 rr                        dec tmp1
0021E3r 3  D0 F5                        bne @loop
0021E5r 3               
0021E5r 3               @done:
0021E5r 3  60           z_set_order:    rts
0021E6r 3               
0021E6r 3               
0021E6r 3               
0021E6r 3               
0021E6r 3               ; ## S_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
0021E6r 3               ; ## "s""  auto  ANS core
0021E6r 3                       ; """https://forth-standard.org/standard/core/Sq
0021E6r 3                       ; Store address and length of string given, returning ( addr u ).
0021E6r 3                       ; ANS core claims this is compile-only, but the file set expands it
0021E6r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
0021E6r 3                       ; are evil. We follow general usage.
0021E6r 3                       ;
0021E6r 3                       ; Can also be realized as
0021E6r 3                       ;     : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE
0021E6r 3                       ; but it is used so much we want it in code.
0021E6r 3                       ; """
0021E6r 3               
0021E6r 3               xt_s_quote:
0021E6r 3                               ; tmp2 will be used to determine if we are handling
0021E6r 3                               ; escaped characters or not.  In this case, we are
0021E6r 3                               ; not, so set it to zero.
0021E6r 3  64 rr                        stz tmp2
0021E8r 3  64 rr                        stz tmp2+1
0021EAr 3               
0021EAr 3               s_quote_start:
0021EAr 3                               ; Make room on the data stack for the address.
0021EAr 3  CA                           dex
0021EBr 3  CA                           dex
0021ECr 3                               ; Make room on the data stack for the count.
0021ECr 3  CA                           dex
0021EDr 3  CA                           dex
0021EEr 3               
0021EEr 3                               ; Put a jmp over the string data with address to be filled
0021EEr 3                               ; in later.
0021EEr 3  A9 4C                        lda #$4C
0021F0r 3  20 rr rr                     jsr cmpl_a
0021F3r 3               
0021F3r 3                               ; Address to be filled in later, just use $4C for the moment
0021F3r 3  20 rr rr                     jsr cmpl_a
0021F6r 3  20 rr rr                     jsr cmpl_a
0021F9r 3               
0021F9r 3                               ; Save the current value of HERE on the data stack for the
0021F9r 3                               ; address of the string.
0021F9r 3  A5 rr                        lda cp
0021FBr 3  95 02                        sta 2,x
0021FDr 3  A5 rr                        lda cp+1
0021FFr 3  95 03                        sta 3,x
002201r 3               
002201r 3               @savechars_loop:
002201r 3                               ; Start saving the string into the dictionary up to the
002201r 3                               ; ending double quote. First, check to see if the input
002201r 3                               ; buffer is empty.
002201r 3  A5 rr                        lda toin+1              ; MSB
002203r 3  C5 rr                        cmp ciblen+1
002205r 3  90 2A                        bcc @input_fine         ; unsigned comparison
002207r 3               
002207r 3  A5 rr                        lda toin                ; LSB
002209r 3  C5 rr                        cmp ciblen
00220Br 3  90 24                        bcc @input_fine
00220Dr 3               
00220Dr 3                               ; Input buffer is empty. Refill it. Refill calls accept,
00220Dr 3                               ; which uses tmp2 and tmp3. Save and restore them.
00220Dr 3  A5 rr                        lda tmp2
00220Fr 3  48                           pha
002210r 3  A5 rr                        lda tmp2+1
002212r 3  48                           pha
002213r 3  A5 rr                        lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
002215r 3  48                           pha
002216r 3               
002216r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
002219r 3               
002219r 3  68                           pla
00221Ar 3  85 rr                        sta tmp3
00221Cr 3  68                           pla
00221Dr 3  85 rr                        sta tmp2+1
00221Fr 3  68                           pla
002220r 3  85 rr                        sta tmp2
002222r 3               
002222r 3                               ; Check result of refill.
002222r 3  B5 00                        lda 0,x
002224r 3  15 01                        ora 1,x
002226r 3  D0 05                        bne @refill_ok
002228r 3               
002228r 3                               ; Something when wrong with refill.
002228r 3  A9 06                        lda #err_refill
00222Ar 3  4C rr rr                     jmp error
00222Dr 3               
00222Dr 3               @refill_ok:
00222Dr 3                               ; Remove the refill flag from the data stack.
00222Dr 3  E8                           inx
00222Er 3  E8                           inx
00222Fr 3               
00222Fr 3                               ; For refill success, jump back up to the empty check, just in
00222Fr 3                               ; case refill gave us an empty buffer (eg. empty/blank line of
00222Fr 3                               ; input)
00222Fr 3  80 D0                        bra @savechars_loop
002231r 3               
002231r 3               @input_fine:
002231r 3                               ; There should be at least one valid char to use.
002231r 3                               ; Calculate it's address at CIB+TOIN into tmp1
002231r 3  A5 rr                        lda cib
002233r 3  18                           clc
002234r 3  65 rr                        adc toin        ; LSB
002236r 3  85 rr                        sta tmp1
002238r 3  A5 rr                        lda cib+1
00223Ar 3  65 rr                        adc toin+1      ; MSB
00223Cr 3  85 rr                        sta tmp1+1
00223Er 3               
00223Er 3                               ; Get the character
00223Er 3  B2 rr                        lda (tmp1)
002240r 3               
002240r 3                               ; Check to see if we are handling escaped characters.
002240r 3  24 rr                        bit tmp2
002242r 3  30 03                        bmi @handle_escapes    ; Only checking bit 7
002244r 3  4C rr rr                     jmp @regular_char
002247r 3               
002247r 3               @handle_escapes:
002247r 3                               ; We are handling escaped characters.  See if we have
002247r 3                               ; already seen the backslash.
002247r 3  24 rr                        bit tmp2+1
002249r 3  30 03                        bmi @escaped
00224Br 3  4C rr rr                     jmp @not_escaped
00224Er 3               
00224Er 3               @escaped:
00224Er 3               
00224Er 3                               ; We have seen a backslash (previous character). Check to see if
00224Er 3                               ; we are in the middle of a \x sequence (bit 6 of tmp2+1 will
00224Er 3                               ; be clear in that case )
00224Er 3  70 22                        bvs @check_esc_chars
002250r 3               
002250r 3                               ; We are in the middle of a \x sequence. Check to see if we
002250r 3                               ; are on the first or second digit.
002250r 3  A9 01                        lda #1
002252r 3  24 rr                        bit tmp2+1
002254r 3  D0 10                        bne @esc_x_second_digit
002256r 3               
002256r 3                               ; First digit.
002256r 3  E6 rr                        inc tmp2+1  ; Adjust flag for second digit next time.
002258r 3  B2 rr                        lda (tmp1)  ; Get the char again.
00225Ar 3               
00225Ar 3                               ; Convert to hex
00225Ar 3  20 rr rr                     jsr convert_hex_value
00225Dr 3               
00225Dr 3                               ; This is the upper nybble, so move it up.
00225Dr 3  0A                           asl
00225Er 3  0A                           asl
00225Fr 3  0A                           asl
002260r 3  0A                           asl
002261r 3  85 rr                        sta tmp3    ; Save it for later.
002263r 3  4C rr rr                     jmp @next_character
002266r 3               
002266r 3               @esc_x_second_digit:
002266r 3               
002266r 3                               ; We are on the second hex digit of a \x sequence. Clear the
002266r 3                               ; escaped character flag (because we are handling it right
002266r 3                               ; here)
002266r 3  64 rr                        stz tmp2+1
002268r 3  B2 rr                        lda (tmp1)
00226Ar 3               
00226Ar 3                               ; Convert to hex, combine with value in tmp3
00226Ar 3  20 rr rr                     jsr convert_hex_value
00226Dr 3  05 rr                        ora tmp3
00226Fr 3               
00226Fr 3  4C rr rr                     jmp @save_character
002272r 3               
002272r 3               @check_esc_chars:
002272r 3                               ; Clear the escaped character flag (because we are
002272r 3                               ; handling it right here)
002272r 3  64 rr                        stz tmp2+1
002274r 3               
002274r 3                               ; Process the escaped character
002274r 3               @check_esc_a:
002274r 3  C9 61                        cmp #'a'
002276r 3  D0 05                        bne @check_esc_b
002278r 3               
002278r 3                               ; BEL (ASCII value 7)
002278r 3  A9 07                        lda #7
00227Ar 3  4C rr rr                     jmp @save_character
00227Dr 3               
00227Dr 3               @check_esc_b:
00227Dr 3  C9 62                        cmp #'b'
00227Fr 3  D0 05                        bne @check_esc_e
002281r 3               
002281r 3                               ; Backspace (ASCII value 8)
002281r 3  A9 08                        lda #8
002283r 3  4C rr rr                     jmp @save_character
002286r 3               
002286r 3               @check_esc_e:
002286r 3  C9 65                        cmp #'e'
002288r 3  D0 04                        bne @check_esc_f
00228Ar 3               
00228Ar 3                               ; ESC (ASCII value 27)
00228Ar 3  A9 1B                        lda #27
00228Cr 3  80 75                        bra @save_character
00228Er 3               
00228Er 3               @check_esc_f:
00228Er 3  C9 66                        cmp #'f'
002290r 3  D0 04                        bne @check_esc_l
002292r 3               
002292r 3                               ; FF (ASCII value 12)
002292r 3  A9 0C                        lda #12
002294r 3  80 6D                        bra @save_character
002296r 3               
002296r 3               @check_esc_l:
002296r 3  C9 6C                        cmp #'l'
002298r 3  D0 04                        bne @check_esc_m
00229Ar 3               
00229Ar 3                               ; LF (ASCII value 10)
00229Ar 3  A9 0A                        lda #10
00229Cr 3  80 65                        bra @save_character
00229Er 3               
00229Er 3               @check_esc_m:
00229Er 3                               ; This one is not like the others because we save two
00229Er 3                               ; characters
00229Er 3  C9 6D                        cmp #'m'
0022A0r 3  D0 09                        bne @check_esc_n
0022A2r 3               
0022A2r 3                               ; CR/LF pair (ASCII values 13, 10)
0022A2r 3  A9 0D                        lda #13
0022A4r 3  20 rr rr                     jsr cmpl_a
0022A7r 3  A9 0A                        lda #10
0022A9r 3  80 58                        bra @save_character
0022ABr 3               
0022ABr 3               @check_esc_n:
0022ABr 3  C9 6E                        cmp #'n'
0022ADr 3  D0 04                        bne @check_esc_q
0022AFr 3               
0022AFr 3                               ; newline, impl. dependant, using LF (ASCII values 10)
0022AFr 3  A9 0A                        lda #10
0022B1r 3  80 50                        bra @save_character
0022B3r 3               
0022B3r 3               @check_esc_q:
0022B3r 3  C9 71                        cmp #'q'
0022B5r 3  D0 04                        bne @check_esc_r
0022B7r 3               
0022B7r 3                               ; Double quote (ASCII value 34)
0022B7r 3  A9 22                        lda #34
0022B9r 3  80 48                        bra @save_character
0022BBr 3               
0022BBr 3               @check_esc_r:
0022BBr 3  C9 72                        cmp #'r'
0022BDr 3  D0 04                        bne @check_esc_t
0022BFr 3               
0022BFr 3                               ; CR (ASCII value 13)
0022BFr 3  A9 0D                        lda #13
0022C1r 3  80 40                        bra @save_character
0022C3r 3               
0022C3r 3               @check_esc_t:
0022C3r 3  C9 74                        cmp #'t'
0022C5r 3  D0 04                        bne @check_esc_v
0022C7r 3               
0022C7r 3                               ; Horizontal TAB (ASCII value 9)
0022C7r 3  A9 09                        lda #9
0022C9r 3  80 38                        bra @save_character
0022CBr 3               
0022CBr 3               @check_esc_v:
0022CBr 3  C9 76                        cmp #'v'
0022CDr 3  D0 04                        bne @check_esc_z
0022CFr 3               
0022CFr 3                               ; Vertical TAB (ASCII value 11)
0022CFr 3  A9 0B                        lda #11
0022D1r 3  80 30                        bra @save_character
0022D3r 3               
0022D3r 3               @check_esc_z:
0022D3r 3  C9 7A                        cmp #'z'
0022D5r 3  D0 04                        bne @check_esc_quote
0022D7r 3               
0022D7r 3                               ; NULL (ASCII value 0)
0022D7r 3  A9 00                        lda #0
0022D9r 3  80 28                        bra @save_character
0022DBr 3               
0022DBr 3               @check_esc_quote:
0022DBr 3  C9 22                        cmp #$22
0022DDr 3  D0 04                        bne @check_esc_x
0022DFr 3               
0022DFr 3                               ; Double quote (ASCII value 34)
0022DFr 3  A9 22                        lda #34
0022E1r 3  80 20                        bra @save_character
0022E3r 3               
0022E3r 3               @check_esc_x:
0022E3r 3  C9 78                        cmp #'x'
0022E5r 3  D0 06                        bne @check_esc_backslash
0022E7r 3               
0022E7r 3                               ; This one is difficult. We need to get the next TWO
0022E7r 3                               ; characters (which might require a refill in the middle)
0022E7r 3                               ; and combine them as two hex digits. We do this by
0022E7r 3                               ; clearing bit 6 of tmp2+1 to indicate we are in a digit
0022E7r 3                               ; and using bit 0 to keep track of which digit we are on.
0022E7r 3  A9 BE                        lda #$BE        ; Clear bits 6 and 0
0022E9r 3  85 rr                        sta tmp2+1
0022EBr 3  80 19                        bra @next_character
0022EDr 3               
0022EDr 3               @check_esc_backslash:
0022EDr 3  C9 5C                        cmp #$5C
0022EFr 3  D0 04                        bne @not_escaped
0022F1r 3               
0022F1r 3                               ; Backslash (ASCII value 92)
0022F1r 3  A9 5C                        lda #92
0022F3r 3  80 0E                        bra @save_character
0022F5r 3               
0022F5r 3               @not_escaped:
0022F5r 3                               ; Check for the backslash to see if we should escape
0022F5r 3                               ; the next char.
0022F5r 3  C9 5C                        cmp #$5C        ; The backslash char
0022F7r 3  D0 06                        bne @regular_char
0022F9r 3               
0022F9r 3                               ; We found a backslash.  Don't save anyhing, but set
0022F9r 3                               ; a flag (in tmp2+1) to handle the next char. We don't
0022F9r 3                               ; try to get the next char here as it may require a
0022F9r 3                               ; refill of the input buffer.
0022F9r 3  A9 FF                        lda #$FF
0022FBr 3  85 rr                        sta tmp2+1
0022FDr 3  80 07                        bra @next_character
0022FFr 3               
0022FFr 3               @regular_char:
0022FFr 3                               ; Check if the current character is the end of the string.
0022FFr 3  C9 22                        cmp #$22        ; ASCII for "
002301r 3  F0 0C                        beq @found_string_end
002303r 3               
002303r 3               @save_character:
002303r 3                               ; If we didn't reach the end of the string, compile this
002303r 3                               ; character into the dictionary
002303r 3  20 rr rr                     jsr cmpl_a
002306r 3               
002306r 3               @next_character:
002306r 3                               ; Move on to the next character.
002306r 3  E6 rr                        inc toin
002308r 3  D0 02                        bne @savechars_loop_longjump
00230Ar 3  E6 rr                        inc toin+1
00230Cr 3               
00230Cr 3               @savechars_loop_longjump:
00230Cr 3  4C rr rr                     jmp @savechars_loop
00230Fr 3               
00230Fr 3               @found_string_end:
00230Fr 3                               ; Use up the delimiter.
00230Fr 3  E6 rr                        inc toin
002311r 3  D0 02                        bne @1
002313r 3  E6 rr                        inc toin+1
002315r 3               @1:
002315r 3                               ; Calculate the length of the string, which is the
002315r 3                               ; difference between cp and the address of the start
002315r 3                               ; of the string (currently saved on the stack).
002315r 3  A5 rr                        lda cp
002317r 3  38                           sec
002318r 3  F5 02                        sbc 2,x
00231Ar 3  95 00                        sta 0,x         ; LSB
00231Cr 3  A5 rr                        lda cp+1
00231Er 3  F5 03                        sbc 3,x
002320r 3  95 01                        sta 1,x         ; MSB
002322r 3               
002322r 3                               ; Update the address of the jump-over jmp instruction.
002322r 3                               ; First determine location of jmp instructions address.
002322r 3                               ; It should be 2 bytes before the start of the string.
002322r 3                               ; Compute it into tmp1, which is no longer being used.
002322r 3  B5 02                        lda 2,x
002324r 3  38                           sec
002325r 3  E9 02                        sbc #2
002327r 3  85 rr                        sta tmp1
002329r 3  B5 03                        lda 3,x
00232Br 3  E9 00                        sbc #0          ; Propagate borrow
00232Dr 3  85 rr                        sta tmp1+1
00232Fr 3               
00232Fr 3                               ; Update the address of the jump to HERE.
00232Fr 3  A5 rr                        lda cp
002331r 3  92 rr                        sta (tmp1)
002333r 3  A0 01                        ldy #1
002335r 3  A5 rr                        lda cp+1
002337r 3  91 rr                        sta (tmp1),y
002339r 3               
002339r 3                               ; What happens next depends on the state (which is bad, but
002339r 3                               ; that's the way it works at the moment). If we are
002339r 3                               ; interpretating, we save the string to a transient buffer
002339r 3                               ; and return that address (used for file calls, see
002339r 3                               ; https://forth-standard.org/standard/file/Sq . If we're
002339r 3                               ; compiling, we just need SLITERAL
002339r 3  A5 rr                        lda state
00233Br 3  05 rr                        ora state+1             ; paranoid
00233Dr 3  F0 03                        beq @done
00233Fr 3               
00233Fr 3                               ; Jump into the middle of the sliteral word, after the
00233Fr 3                               ; string data has been compiled into the dictionary,
00233Fr 3                               ; because we've already done that step.
00233Fr 3  20 rr rr                     jsr sliteral_const_str         ; ( addr u -- )
002342r 3               
002342r 3               @done:
002342r 3  60           z_s_quote:      rts
002343r 3               
002343r 3               
002343r 3               
002343r 3               ; ## S_TO_D ( u -- d ) "Convert single cell number to double cell"
002343r 3               ; ## "s>d"  auto  ANS core
002343r 3                       ; """https://forth-standard.org/standard/core/StoD"""
002343r 3               
002343r 3               xt_s_to_d:
002343r 3  20 rr rr                     jsr underflow_1
002346r 3               
002346r 3  CA                           dex
002347r 3  CA                           dex
002348r 3  74 00                        stz 0,x
00234Ar 3  74 01                        stz 1,x
00234Cr 3               
00234Cr 3  B5 03                        lda 3,x
00234Er 3  10 04                        bpl @done
002350r 3               
002350r 3                               ; negative, extend sign
002350r 3  D6 00                        dec 0,x
002352r 3  D6 01                        dec 1,x
002354r 3               @done:
002354r 3  60           z_s_to_d:       rts
002355r 3               
002355r 3               
002355r 3               
002355r 3               ; ## SAVE_BUFFERS ( -- ) "Save all dirty buffers to storage"
002355r 3               ; ## "save-buffers"  tested  ANS block
002355r 3                       ; """https://forth-standard.org/standard/block/SAVE-BUFFERS"""
002355r 3               
002355r 3               xt_save_buffers:
002355r 3                               ; Check the buffer status
002355r 3  A0 2C                        ldy #buffstatus_offset
002357r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
002359r 3  C9 03                        cmp #3          ; LSB is needed.
00235Br 3  D0 12                        bne @done       ; Either not used or not dirty = done!
00235Dr 3               
00235Dr 3                               ; We need to save the block.
00235Dr 3  20 rr rr                     jsr xt_blkbuffer
002360r 3  20 rr rr                     jsr xt_buffblocknum
002363r 3  20 rr rr                     jsr xt_fetch
002366r 3  20 rr rr                     jsr xt_block_write
002369r 3               
002369r 3                               ; Mark the buffer as clean now.
002369r 3  A9 01                        lda #1
00236Br 3  A0 2C                        ldy #buffstatus_offset
00236Dr 3  91 rr                        sta (up),y
00236Fr 3               
00236Fr 3               @done:
00236Fr 3  60           z_save_buffers: rts
002370r 3               
002370r 3               
002370r 3               
002370r 3               ; ## SCR ( -- addr ) "Push address of variable holding last screen listed"
002370r 3               ; ## "scr"  auto  ANS block ext
002370r 3                       ; """https://forth-standard.org/standard/block/SCR"""
002370r 3               xt_scr:
002370r 3                               ; SCR is at UP + scr_offset
002370r 3  CA                           dex
002371r 3  CA                           dex
002372r 3  18                           clc
002373r 3  A5 rr                        lda up
002375r 3  69 02                        adc #scr_offset ; Add offset
002377r 3  95 00                        sta 0,x
002379r 3  A5 rr                        lda up+1
00237Br 3  69 00                        adc #0          ; Adding carry
00237Dr 3  95 01                        sta 1,x
00237Fr 3               
00237Fr 3  60           z_scr:          rts
002380r 3               
002380r 3               
002380r 3               ; ## SEARCH ( addr1 u1 addr2 u2 -- addr3 u3 flag) "Search for a substring"
002380r 3               ; ## "search"   auto  ANS string
002380r 3                       ; """https://forth-standard.org/standard/string/SEARCH
002380r 3                       ; Search for string2 (denoted by addr2 u2) in string1 (denoted by
002380r 3                       ; addr1 u1). If a match is found the flag will be true and
002380r 3                       ; addr3 will have the address of the start of the match and u3 will have
002380r 3                       ; the number of characters remaining from the match point to the end
002380r 3                       ; of the original string1. If a match is not found, the flag will be
002380r 3                       ; false and addr3 and u3 will be the original string1's addr1 and u1.
002380r 3                       ; """
002380r 3               
002380r 3               xt_search:
002380r 3  20 rr rr                     jsr underflow_4
002383r 3               
002383r 3                               ; ANS says if the second string is a zero-length string it
002383r 3                               ; automatically matches.
002383r 3  B5 00                        lda 0,x
002385r 3  15 01                        ora 1,x
002387r 3  D0 0B                        bne @start_search
002389r 3               
002389r 3                               ; The second string is a zero length string.  Just remove
002389r 3                               ; the second string and put a true flag.
002389r 3  E8                           inx             ; Remove u2
00238Ar 3  E8                           inx
00238Br 3  A9 FF                        lda #$FF        ; Turn addr2 into a true flag
00238Dr 3  95 00                        sta 0,x
00238Fr 3  95 01                        sta 1,x
002391r 3  4C rr rr                     jmp z_search
002394r 3               
002394r 3               @start_search:
002394r 3                               ; Put an offset (starting at zero) on the stack.
002394r 3  20 rr rr                     jsr xt_zero
002397r 3               
002397r 3               @search_loop:
002397r 3                               ; We stop (not found) when u2 + offset > u1
002397r 3                               ; Calculate u2+offset into tmp1
002397r 3  18                           clc
002398r 3  B5 00                        lda 0,x
00239Ar 3  75 02                        adc 2,x
00239Cr 3  85 rr                        sta tmp1
00239Er 3  B5 01                        lda 1,x
0023A0r 3  75 03                        adc 3,x
0023A2r 3               
0023A2r 3               
0023A2r 3                               ; Compare to u1. Start with the high byte
0023A2r 3  D5 07                        cmp 7,x
0023A4r 3  90 12                        bcc @init_comparison ; Obviously less
0023A6r 3  D0 06                        bne @not_found
0023A8r 3               
0023A8r 3                               ; The upper address byte matched - check the lower byte
0023A8r 3                               ; Load u1 first so we can use just a carry to check.
0023A8r 3  B5 06                        lda 6,x
0023AAr 3  C5 rr                        cmp tmp1
0023ACr 3  B0 0A                        bcs @init_comparison
0023AEr 3               
0023AEr 3               @not_found:
0023AEr 3                               ; The substring isn't in the main string.
0023AEr 3                               ; Return just the main string and a false flag.
0023AEr 3  E8                           inx             ; Remove offset
0023AFr 3  E8                           inx
0023B0r 3  E8                           inx             ; Remove u2
0023B1r 3  E8                           inx
0023B2r 3  74 00                        stz 0,x         ; Turn addr2 into a false flag
0023B4r 3  74 01                        stz 1,x
0023B6r 3  80 66                        bra z_search
0023B8r 3               
0023B8r 3               @init_comparison:
0023B8r 3                               ; Use tmp1 to hold address in string 1.
0023B8r 3                               ; Use tmp2 to hold address in string 2.
0023B8r 3                               ; Use tmp3 to hold the number of characters left to check.
0023B8r 3               
0023B8r 3                               ; Compute the starting address in string 1
0023B8r 3                               ; as addr1 + offset
0023B8r 3  18                           clc
0023B9r 3  B5 08                        lda 8,x
0023BBr 3  75 00                        adc 0,x
0023BDr 3  85 rr                        sta tmp1
0023BFr 3  B5 09                        lda 9,x
0023C1r 3  75 01                        adc 1,x
0023C3r 3  85 rr                        sta tmp1+1
0023C5r 3               
0023C5r 3                               ; The starting address in string 2 is just addr2.
0023C5r 3  B5 04                        lda 4,x
0023C7r 3  85 rr                        sta tmp2
0023C9r 3  B5 05                        lda 5,x
0023CBr 3  85 rr                        sta tmp2+1
0023CDr 3               
0023CDr 3                               ; The number of characters to check is u2.
0023CDr 3  B5 02                        lda 2,x
0023CFr 3  85 rr                        sta tmp3
0023D1r 3  B5 03                        lda 3,x
0023D3r 3  85 rr                        sta tmp3+1
0023D5r 3               
0023D5r 3               @comparison_loop:
0023D5r 3                               ; Check to see if the current characters match.
0023D5r 3  B2 rr                        lda (tmp1)
0023D7r 3  D2 rr                        cmp (tmp2)
0023D9r 3  F0 05                        beq @letters_match
0023DBr 3               
0023DBr 3                               ; One of the letters didn't match.
0023DBr 3                               ; Increment the offset and try again.
0023DBr 3  20 rr rr                     jsr xt_one_plus
0023DEr 3  80 B7                        bra @search_loop
0023E0r 3               
0023E0r 3               @letters_match:
0023E0r 3                               ; The letters match.  Advance the pointers until the
0023E0r 3                               ; count reaches zero.
0023E0r 3  E6 rr                        inc tmp1
0023E2r 3  D0 02                        bne @1
0023E4r 3  E6 rr                        inc tmp1+1
0023E6r 3               @1:
0023E6r 3  E6 rr                        inc tmp2
0023E8r 3  D0 02                        bne @2
0023EAr 3  E6 rr                        inc tmp2+1
0023ECr 3               @2:
0023ECr 3                               ; Decrement the count of remaining letters to check.
0023ECr 3  A5 rr                        lda tmp3
0023EEr 3  D0 02                        bne @3
0023F0r 3  C6 rr                        dec tmp3+1
0023F2r 3               @3:
0023F2r 3  C6 rr                        dec tmp3
0023F4r 3               
0023F4r 3                               ; Check if we've reached zero.
0023F4r 3  A5 rr                        lda tmp3
0023F6r 3  05 rr                        ora tmp3+1
0023F8r 3  D0 DB                        bne @comparison_loop ; Check the next letter
0023FAr 3               
0023FAr 3                               ; We've run out of letters and they all match!
0023FAr 3                               ; Return (addr1+offset) (u1-offset) true
0023FAr 3                               ; Add offset to addr1.
0023FAr 3  18                           clc
0023FBr 3  B5 00                        lda 0,x
0023FDr 3  75 08                        adc 8,x
0023FFr 3  95 08                        sta 8,x
002401r 3  B5 01                        lda 1,x
002403r 3  75 09                        adc 9,x
002405r 3  95 09                        sta 9,x
002407r 3               
002407r 3                               ; Subtract offset from u1.
002407r 3  38                           sec
002408r 3  B5 06                        lda 6,x
00240Ar 3  F5 00                        sbc 0,x
00240Cr 3  95 06                        sta 6,x
00240Er 3  B5 07                        lda 7,x
002410r 3  F5 01                        sbc 1,x
002412r 3  95 07                        sta 7,x
002414r 3               
002414r 3                               ; Replace addr2, u2, and offset with a true flag.
002414r 3  E8                           inx             ; drop offset
002415r 3  E8                           inx
002416r 3  E8                           inx             ; drop u2
002417r 3  E8                           inx
002418r 3  A9 FF                        lda #$FF
00241Ar 3  95 00                        sta 0,x         ; Turn addr2 into a true flag.
00241Cr 3  95 01                        sta 1,x
00241Er 3               
00241Er 3  60           z_search:       rts
00241Fr 3               
00241Fr 3               
00241Fr 3               
00241Fr 3               ; ## SEMICOLON ( -- ) "End compilation of new word"
00241Fr 3               ; ## ";"  auto  ANS core
00241Fr 3                       ; """https://forth-standard.org/standard/core/Semi
00241Fr 3                       ; End the compilation of a new word into the Dictionary.
00241Fr 3                       ;
00241Fr 3                       ; When we
00241Fr 3                       ; enter this, WORKWORD is pointing to the nt_ of this word in the
00241Fr 3                       ; Dictionary, DP to the previous word, and CP to the next free byte.
00241Fr 3                       ; A Forth definition would be (see "Starting Forth"):
00241Fr 3                       ; : POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE  Following the
00241Fr 3                       ; practice of Gforth, we warn here if a word has been redefined.
00241Fr 3                       ; """
00241Fr 3               
00241Fr 3               xt_semicolon:
00241Fr 3                               ; Check if this is a : word or a :NONAME word.
00241Fr 3  24 rr                        bit status
002421r 3  70 11                        bvs @colonword
002423r 3               
002423r 3                               ; This is a :NONAME word - just put an RTS on the end and
002423r 3                               ; the address (held in workword) on the stack.
002423r 3  A9 60                        lda #$60                ; opcode for RTS
002425r 3  20 rr rr                     jsr cmpl_a
002428r 3               
002428r 3  CA                           dex
002429r 3  CA                           dex
00242Ar 3  A5 rr                        lda workword
00242Cr 3  95 00                        sta 0,x
00242Er 3  A5 rr                        lda workword+1
002430r 3  95 01                        sta 1,x
002432r 3  80 45                        bra @semicolon_done
002434r 3               
002434r 3               @colonword:
002434r 3                               ; CP is the byte that will be the address we use in the
002434r 3                               ; header as the end-of-compile address (z_word). This is
002434r 3                               ; six bytes down from the header
002434r 3  A0 06                        ldy #6
002436r 3  A5 rr                        lda cp
002438r 3  91 rr                        sta (workword),y
00243Ar 3  C8                           iny
00243Br 3  A5 rr                        lda cp+1
00243Dr 3  91 rr                        sta (workword),y
00243Fr 3               
00243Fr 3                               ; Allocate one further byte and save the RTS instruction
00243Fr 3                               ; there
00243Fr 3  A9 60                        lda #$60                ; opcode for RTS
002441r 3  20 rr rr                     jsr cmpl_a
002444r 3               
002444r 3                               ; Before we formally add the word to the Dictionary, we
002444r 3                               ; check to see if it is already present, and if yes, we
002444r 3                               ; warn the user.
002444r 3               
002444r 3                               ; See if word already in Dictionary.
002444r 3                               ; (STATUS bit 7 will be high as CREATE already
002444r 3                               ;  checked for us.)
002444r 3  24 rr                        bit status
002446r 3  10 26                        bpl @new_word   ; Bit 7 is clear = new word
002448r 3               
002448r 3                               ; We start by putting the string of the
002448r 3                               ; word we're defining on the stack
002448r 3  CA                           dex
002449r 3  CA                           dex
00244Ar 3  CA                           dex
00244Br 3  CA                           dex
00244Cr 3               
00244Cr 3                               ; WORKWORD points to the beginning of the head of our new
00244Cr 3                               ; word, where the first byte is the length of the string
00244Cr 3                               ; We can't use LATESTNT because we haven't added the new
00244Cr 3                               ; word to the Dictionary yet
00244Cr 3  B2 rr                        lda (workword)
00244Er 3  95 00                        sta 0,x
002450r 3  74 01                        stz 1,x
002452r 3               
002452r 3                               ; Eight bytes below WORKWORD is the actual beginning of
002452r 3                               ; the string
002452r 3  A5 rr                        lda workword
002454r 3  18                           clc
002455r 3  69 08                        adc #8
002457r 3  95 02                        sta 2,x
002459r 3  A5 rr                        lda workword+1
00245Br 3  69 00                        adc #0                  ; only want carry
00245Dr 3  95 03                        sta 3,x
00245Fr 3               
00245Fr 3                               ; This word is already in the Dictionary, so we print a
00245Fr 3                               ; warning to the user.
00245Fr 3  A9 02                        lda #str_redefined       ; address of string "redefined"
002461r 3  20 rr rr                     jsr print_string_no_lf
002464r 3               
002464r 3                               ; Now we print the offending word.
002464r 3  20 rr rr                     jsr xt_type
002467r 3  20 rr rr                     jsr xt_space
00246Ar 3               
00246Ar 3                               ; Clear bit 7 of status (so future words will print message
00246Ar 3                               ; by defaut)
00246Ar 3  A9 80                        lda #%10000000
00246Cr 3  14 rr                        trb status
00246Er 3               
00246Er 3               @new_word:
00246Er 3                               ; Let's get this over with. Save beginning of our word
00246Er 3                               ; as new last word in the Dictionary
00246Er 3  A5 rr                        lda workword
002470r 3  85 rr                        sta dp
002472r 3  A5 rr                        lda workword+1
002474r 3  85 rr                        sta dp+1
002476r 3  20 rr rr                     jsr dp_to_current       ; Save the updated DP to the
002479r 3                                                       ; CURRENT wordlist.
002479r 3               @semicolon_done:
002479r 3                               ; Word definition complete. Return compile flag to zero
002479r 3                               ; to return to interpret mode
002479r 3  64 rr                        stz state
00247Br 3  64 rr                        stz state+1
00247Dr 3               
00247Dr 3  60           z_semicolon:    rts
00247Er 3               
00247Er 3               
00247Er 3               
00247Er 3               ; ## SIGN ( n -- ) "Add minus to pictured output"
00247Er 3               ; ## "sign"  auto  ANS core
00247Er 3                       ; """https://forth-standard.org/standard/core/SIGN
00247Er 3                       ;
00247Er 3                       ; Code based on
00247Er 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
00247Er 3                       ; Original Forth code is   0< IF ASCII - HOLD THEN
00247Er 3                       ; """
00247Er 3               
00247Er 3               xt_sign:
00247Er 3  20 rr rr                     jsr underflow_1
002481r 3               
002481r 3  B5 01                        lda 1,x         ; check MSB of TOS
002483r 3  30 04                        bmi @minus
002485r 3               
002485r 3  E8                           inx
002486r 3  E8                           inx
002487r 3  80 09                        bra @done
002489r 3               @minus:
002489r 3  A9 2D                        lda #$2D        ; ASCII for "-"
00248Br 3  95 00                        sta 0,x         ; overwrite TOS
00248Dr 3  74 01                        stz 1,x         ; paranoid
00248Fr 3               
00248Fr 3  20 rr rr                     jsr xt_hold
002492r 3               @done:
002492r 3  60           z_sign:         rts
002493r 3               
002493r 3               
002493r 3               
002493r 3               ; ## SLASH ( n1 n2 -- n ) "Divide NOS by TOS"
002493r 3               ; ## "/"  auto  ANS core
002493r 3                       ; """https://forth-standard.org/standard/core/Div
002493r 3                       ;
002493r 3                       ; Forth code is either  >R S>D R> FM/MOD SWAP DROP
002493r 3                       ; or >R S>D R> SM/REM SWAP DROP -- we use SM/REM in Tali Forth.
002493r 3                       ; This code is currently unoptimized. This code without the SLASH
002493r 3                       ; DROP at the end is /MOD, so we share the code as far as possible.
002493r 3                       ; """
002493r 3               
002493r 3               xt_slash:
002493r 3                               ; With all the multiplication going on, it would be hard to
002493r 3                               ; make sure that one of our temporary variables is not
002493r 3                               ; overwritten. We make sure that doesn't happen by taking the
002493r 3                               ; hit of pushing the flag to the 65c02's stack
002493r 3  A9 00                        lda #0
002495r 3  48                           pha
002496r 3  80 03                        bra _common
002498r 3               
002498r 3               xt_slash_mod:
002498r 3                               ; Note that /MOD accesses this code
002498r 3  A9 FF                        lda #$FF
00249Ar 3  48                           pha             ; falls through to _common
00249Br 3               
00249Br 3               _common:
00249Br 3  20 rr rr                     jsr xt_to_r             ; >R
00249Er 3  20 rr rr                     jsr xt_s_to_d           ; S>D
0024A1r 3  20 rr rr                     jsr xt_r_from           ; R>
0024A4r 3  20 rr rr                     jsr xt_sm_slash_rem     ; SM/REM
0024A7r 3               
0024A7r 3                               ; Get the flag back from the 65c02's stack. Zero is SLASH,
0024A7r 3                               ; $FF is SLASH MOD
0024A7r 3  68                           pla
0024A8r 3  D0 05                        bne @done
0024AAr 3               
0024AAr 3                               ; The following code is for SLASH only
0024AAr 3  20 rr rr                     jsr xt_swap
0024ADr 3  E8                           inx             ; DROP
0024AEr 3  E8                           inx
0024AFr 3               @done:
0024AFr 3               z_slash_mod:
0024AFr 3  60           z_slash:        rts
0024B0r 3               
0024B0r 3               
0024B0r 3               
0024B0r 3               ; ## SLASH_MOD ( n1 n2 -- n3 n4 ) "Divide NOS by TOS with a remainder"
0024B0r 3               ; ## "/mod"  auto  ANS core
0024B0r 3                       ; """https://forth-standard.org/standard/core/DivMOD
0024B0r 3                       ;
0024B0r 3                       ; This is a dummy entry, the actual code is shared with SLASH
0024B0r 3                       ; """
0024B0r 3               
0024B0r 3               
0024B0r 3               ; ## SLASH_STRING ( addr u n -- addr u ) "Shorten string by n"
0024B0r 3               ; ## "/string"  auto  ANS string
0024B0r 3                       ; """https://forth-standard.org/standard/string/DivSTRING
0024B0r 3                       ;
0024B0r 3                       ; Forth code is
0024B0r 3                       ; : /STRING ( ADDR U N -- ADDR U ) ROT OVER + ROT ROT - ;
0024B0r 3                       ; Put differently, we need to add TOS and 3OS, and subtract
0024B0r 3                       ; TOS from NOS, and then drop TOS
0024B0r 3                       ; """
0024B0r 3               
0024B0r 3               xt_slash_string:
0024B0r 3  20 rr rr                     jsr underflow_3
0024B3r 3               
0024B3r 3  18                           clc             ; 3OS+TOS
0024B4r 3  B5 00                        lda 0,x
0024B6r 3  75 04                        adc 4,x
0024B8r 3  95 04                        sta 4,x
0024BAr 3               
0024BAr 3  B5 01                        lda 1,x
0024BCr 3  75 05                        adc 5,x
0024BEr 3  95 05                        sta 5,x
0024C0r 3               
0024C0r 3  38                           sec             ; NOS-TOS
0024C1r 3  B5 02                        lda 2,x
0024C3r 3  F5 00                        sbc 0,x
0024C5r 3  95 02                        sta 2,x
0024C7r 3               
0024C7r 3  B5 03                        lda 3,x
0024C9r 3  F5 01                        sbc 1,x
0024CBr 3  95 03                        sta 3,x
0024CDr 3               
0024CDr 3  E8                           inx
0024CEr 3  E8                           inx
0024CFr 3               
0024CFr 3  60           z_slash_string: rts
0024D0r 3               
0024D0r 3               
0024D0r 3               
0024D0r 3               ; ## SLITERAL ( addr u -- )( -- addr u ) "Compile a string for runtime"
0024D0r 3               ; ## "sliteral" auto  ANS string
0024D0r 3                       ; """https://forth-standard.org/standard/string/SLITERAL
0024D0r 3                       ; Add the runtime for an existing string.
0024D0r 3                       ; """
0024D0r 3               
0024D0r 3               xt_sliteral:
0024D0r 3  20 rr rr                     jsr underflow_2
0024D3r 3               
0024D3r 3                               ; We can't assume that ( addr u ) of the current string is in
0024D3r 3                               ; a stable area (eg. already in the dictionary.) Copy the
0024D3r 3                               ; string data into the dictionary using move.
0024D3r 3               
0024D3r 3                               ; Put a jmp over the string data with address to be filled
0024D3r 3                               ; in later.
0024D3r 3  A9 4C                        lda #$4C
0024D5r 3  20 rr rr                     jsr cmpl_a
0024D8r 3               
0024D8r 3                               ; Address to be filled in later.
0024D8r 3  20 rr rr                     jsr cmpl_a
0024DBr 3  20 rr rr                     jsr cmpl_a
0024DEr 3               
0024DEr 3                               ; Turn the data stack from ( addr u ) into
0024DEr 3                               ; ( here u addr here u ) so move can be called with
0024DEr 3                               ; the remaining items on the stack ready for processing.
0024DEr 3                               ; Reserve three extra words on the stack.
0024DEr 3  8A                           txa
0024DFr 3  38                           sec
0024E0r 3  E9 06                        sbc #6
0024E2r 3  AA                           tax
0024E3r 3               
0024E3r 3                               ; Move addr down from TOS-4 to TOS-2
0024E3r 3  B5 08                        lda 8,x
0024E5r 3  95 04                        sta 4,x
0024E7r 3  B5 09                        lda 9,x
0024E9r 3  95 05                        sta 5,x
0024EBr 3               
0024EBr 3                               ; Copy u from TOS-3 to TOS
0024EBr 3  B5 06                        lda 6,x
0024EDr 3  95 00                        sta 0,x
0024EFr 3  B5 07                        lda 7,x
0024F1r 3  95 01                        sta 1,x
0024F3r 3               
0024F3r 3                               ; Put HERE into TOS-1 and TOS-4
0024F3r 3  A5 rr                        lda cp
0024F5r 3  95 08                        sta 8,x
0024F7r 3  95 02                        sta 2,x
0024F9r 3  A5 rr                        lda cp+1
0024FBr 3  95 09                        sta 9,x
0024FDr 3  95 03                        sta 3,x
0024FFr 3               
0024FFr 3                               ; Copy the string into the dictionary.
0024FFr 3  20 rr rr                     jsr xt_move
002502r 3               
002502r 3                               ; Update cp.
002502r 3  18                           clc
002503r 3  A5 rr                        lda cp
002505r 3  75 00                        adc 0,x
002507r 3  85 rr                        sta cp
002509r 3  A5 rr                        lda cp+1
00250Br 3  75 01                        adc 1,x
00250Dr 3  85 rr                        sta cp+1
00250Fr 3               
00250Fr 3                               ; Update the address of the jump-over jmp instruction.
00250Fr 3                               ; First determine location of jmp instructions address.
00250Fr 3                               ; It should be 2 bytes before the start of the string.
00250Fr 3               
00250Fr 3                               ; Compute it into tmp1, which is no longer being used.
00250Fr 3  B5 02                        lda 2,x
002511r 3  38                           sec
002512r 3  E9 02                        sbc #2
002514r 3  85 rr                        sta tmp1
002516r 3  B5 03                        lda 3,x
002518r 3  E9 00                        sbc #0          ; Propagate borrow
00251Ar 3  85 rr                        sta tmp1+1
00251Cr 3               
00251Cr 3                               ; Update the address of the jump to HERE.
00251Cr 3  A5 rr                        lda cp
00251Er 3  92 rr                        sta (tmp1)
002520r 3  A0 01                        ldy #1
002522r 3  A5 rr                        lda cp+1
002524r 3  91 rr                        sta (tmp1),y
002526r 3               
002526r 3                               ; Stack is now ( addr2 u ) where addr2 is the new
002526r 3                               ; location in the dictionary.
002526r 3               
002526r 3               sliteral_const_str:
002526r 3                               ; Compile a subroutine jump to the runtime of SLITERAL that
002526r 3                               ; pushes the new ( addr u ) pair to the Data Stack.
002526r 3                               ; When we're done, the code will look like this:
002526r 3               
002526r 3                               ; xt -->    jmp a
002526r 3                               ;           <string data bytes>
002526r 3                               ;  a -->    jsr sliteral_runtime
002526r 3                               ;           <string address>
002526r 3                               ;           <string length>
002526r 3                               ; rts -->
002526r 3               
002526r 3                               ; This means we'll have to adjust the return address for two
002526r 3                               ; cells, not just one
002526r 3  A0 rr                        ldy #>sliteral_runtime
002528r 3  A9 rr                        lda #<sliteral_runtime
00252Ar 3  20 rr rr                     jsr cmpl_subroutine
00252Dr 3               
00252Dr 3                               ; We want to have the address end up as NOS and the length
00252Dr 3                               ; as TOS, so we store the address first
00252Dr 3  B4 03                        ldy 3,x                ; address MSB
00252Fr 3  B5 02                        lda 2,x                ; address LSB
002531r 3  20 rr rr                     jsr cmpl_word
002534r 3               
002534r 3  B4 01                        ldy 1,x                ; length MSB
002536r 3  B5 00                        lda 0,x                ; length LSB
002538r 3  20 rr rr                     jsr cmpl_word
00253Br 3               
00253Br 3                               ; clean up and leave
00253Br 3  E8                           inx
00253Cr 3  E8                           inx
00253Dr 3  E8                           inx
00253Er 3  E8                           inx
00253Fr 3               
00253Fr 3  60           z_sliteral:     rts
002540r 3               
002540r 3               
002540r 3               sliteral_runtime:
002540r 3               
002540r 3                       ; """Run time behaviour of SLITERAL: Push ( addr u ) of string to
002540r 3                       ; the Data Stack. We arrive here with the return address as the
002540r 3                       ; top of Return Stack, which points to the address of the string
002540r 3                       ; """
002540r 3  CA                           dex
002541r 3  CA                           dex
002542r 3  CA                           dex
002543r 3  CA                           dex
002544r 3               
002544r 3                               ; Get the address of the string address off the stack and
002544r 3                               ; increase by one because of the RTS mechanics
002544r 3  68                           pla
002545r 3  85 rr                        sta tmp1        ; LSB of address
002547r 3  68                           pla
002548r 3  85 rr                        sta tmp1+1      ; MSB of address
00254Ar 3               
00254Ar 3                               ; Walk through both and save them
00254Ar 3  A0 01                        ldy #1          ; adjust for JSR/RTS mechanics on 65c02
00254Cr 3  B1 rr                        lda (tmp1),y
00254Er 3  95 02                        sta 2,x         ; LSB of address
002550r 3  C8                           iny
002551r 3               
002551r 3  B1 rr                        lda (tmp1),y
002553r 3  95 03                        sta 3,x         ; MSB of address
002555r 3  C8                           iny
002556r 3               
002556r 3  B1 rr                        lda (tmp1),y
002558r 3  95 00                        sta 0,x         ; LSB of length
00255Ar 3  C8                           iny
00255Br 3               
00255Br 3  B1 rr                        lda (tmp1),y
00255Dr 3  95 01                        sta 1,x         ; MSB of length
00255Fr 3               
00255Fr 3                               ; restore return address
00255Fr 3  18                           clc
002560r 3  A5 rr                        lda tmp1
002562r 3  69 04                        adc #4
002564r 3  A8                           tay             ; LSB
002565r 3  A5 rr                        lda tmp1+1
002567r 3  69 00                        adc #0          ; we only need carry
002569r 3  48                           pha             ; MSB
00256Ar 3  5A                           phy
00256Br 3               
00256Br 3  60                           rts
00256Cr 3               
00256Cr 3               
00256Cr 3               
00256Cr 3               ; ## SM_SLASH_REM ( d n1 -- n2 n3 ) "Symmetic signed division"
00256Cr 3               ; ## "sm/rem"  auto  ANS core
00256Cr 3                       ; """https://forth-standard.org/standard/core/SMDivREM
00256Cr 3                       ; Symmetic signed division. Compare FM/MOD. Based on F-PC 3.6
00256Cr 3                       ; by Ulrich Hoffmann. See http://www.xlerb.de/uho/ansi.seq
00256Cr 3                       ;
00256Cr 3                       ; Forth:
00256Cr 3                       ; OVER >R 2DUP XOR 0< >R ABS >R DABS R> UM/MOD R> ?NEGATE SWAP
00256Cr 3                       ; R> ?NEGATE SWAP
00256Cr 3                       ; """
00256Cr 3               
00256Cr 3               xt_sm_slash_rem:
00256Cr 3  20 rr rr                     jsr underflow_3 ; contains double number
00256Fr 3               
00256Fr 3                               ; push MSB of high cell of d to Data Stack so we can check
00256Fr 3                               ; its sign later
00256Fr 3  B5 03                        lda 3,x
002571r 3  48                           pha
002572r 3               
002572r 3                               ; XOR the MSB of the high cell of d and n1 so we figure out
002572r 3                               ; its sign later as well
002572r 3  B5 01                        lda 1,x
002574r 3  55 03                        eor 3,x
002576r 3  48                           pha
002577r 3               
002577r 3                               ; Prepare division by getting absolute of n1 and d
002577r 3  20 rr rr                     jsr xt_abs
00257Ar 3  E8                           inx             ; pretend we pushed n1 to R
00257Br 3  E8                           inx
00257Cr 3               
00257Cr 3  20 rr rr                     jsr xt_dabs
00257Fr 3  CA                           dex
002580r 3  CA                           dex
002581r 3               
002581r 3  20 rr rr                     jsr xt_um_slash_mod     ; UM/MOD
002584r 3               
002584r 3                               ; if the XOR compiled above is negative, negate the
002584r 3                               ; quotient (n3)
002584r 3  68                           pla
002585r 3  10 03                        bpl @1
002587r 3  20 rr rr                     jsr xt_negate
00258Ar 3               @1:
00258Ar 3                               ; if d was negative, negate the remainder (n2)
00258Ar 3  68                           pla
00258Br 3  10 07                        bpl @done
00258Dr 3               
00258Dr 3  E8                           inx             ; pretend we pushed quotient to R
00258Er 3  E8                           inx
00258Fr 3  20 rr rr                     jsr xt_negate
002592r 3  CA                           dex
002593r 3  CA                           dex
002594r 3               
002594r 3               @done:
002594r 3  60           z_sm_slash_rem: rts
002595r 3               
002595r 3               
002595r 3               
002595r 3               ; ## SOURCE ( -- addr u ) "Return location and size of input buffer""
002595r 3               ; ## "source"  auto  ANS core
002595r 3                       ; """https://forth-standard.org/standard/core/SOURCE"""
002595r 3               xt_source:
002595r 3                               ; add address
002595r 3  CA                           dex
002596r 3  CA                           dex
002597r 3  A5 rr                        lda cib
002599r 3  95 00                        sta 0,x
00259Br 3  A5 rr                        lda cib+1
00259Dr 3  95 01                        sta 1,x
00259Fr 3               
00259Fr 3                               ; add size
00259Fr 3  CA                           dex
0025A0r 3  CA                           dex
0025A1r 3  A5 rr                        lda ciblen
0025A3r 3  95 00                        sta 0,x
0025A5r 3  A5 rr                        lda ciblen+1
0025A7r 3  95 01                        sta 1,x
0025A9r 3               
0025A9r 3  60           z_source:       rts
0025AAr 3               
0025AAr 3               
0025AAr 3               ; ## SOURCE_ID ( -- n ) "Return source identifier"
0025AAr 3               ; ## "source-id"  tested  ANS core ext
0025AAr 3                       ; """https://forth-standard.org/standard/core/SOURCE-ID Identify the
0025AAr 3                       ; input source unless it is a block (s. Conklin & Rather p. 156). This
0025AAr 3                       ; will give the input source: 0 is keyboard, -1 ($FFFF) is character
0025AAr 3                       ; string, and a text file gives the fileid.
0025AAr 3                       ; """
0025AAr 3               xt_source_id:
0025AAr 3  CA                           dex
0025ABr 3  CA                           dex
0025ACr 3               
0025ACr 3  A5 rr                        lda insrc
0025AEr 3  95 00                        sta 0,x
0025B0r 3  A5 rr                        lda insrc+1
0025B2r 3  95 01                        sta 1,x
0025B4r 3               
0025B4r 3  60           z_source_id:    rts
0025B5r 3               
0025B5r 3               
0025B5r 3               ; ## SPACE ( -- ) "Print a single space"
0025B5r 3               ; ## "space"  auto  ANS core
0025B5r 3                       ; """https://forth-standard.org/standard/core/SPACE"""
0025B5r 3               xt_space:
0025B5r 3  A9 20                        lda #AscSP
0025B7r 3  20 rr rr                     jsr emit_a
0025BAr 3               
0025BAr 3  60           z_space:        rts
0025BBr 3               
0025BBr 3               
0025BBr 3               ; ## SPACES ( u -- ) "Print a number of spaces"
0025BBr 3               ; ## "spaces"  auto  ANS core
0025BBr 3                       ; """https://forth-standard.org/standard/core/SPACES"""
0025BBr 3               
0025BBr 3               xt_spaces:
0025BBr 3  20 rr rr                     jsr underflow_1
0025BEr 3               
0025BEr 3                               ; catch any zero in TOS fast
0025BEr 3  B5 00                        lda 0,x
0025C0r 3  15 01                        ora 1,x
0025C2r 3  F0 2A                        beq @done
0025C4r 3               
0025C4r 3                               ; Usually we're only going to print far less than 256 spaces,
0025C4r 3                               ; so we create a quick loop for that. Short loop could be realized
0025C4r 3                               ; as a separate subroutine, but unless we're really pressed for
0025C4r 3                               ; memory at some point, this is faster
0025C4r 3  B4 01                        ldy 1,x
0025C6r 3  D0 0C                        bne @lots_of_spaces
0025C8r 3               
0025C8r 3  B4 00                        ldy 0,x
0025CAr 3               @quick_loop:
0025CAr 3                               ; we reach here knowing that there must be a number that is not
0025CAr 3                               ; zero in the TOS
0025CAr 3  A9 20                        lda #AscSP
0025CCr 3  20 rr rr                     jsr emit_a
0025CFr 3  88                           dey
0025D0r 3  F0 1C                        beq @done
0025D2r 3  80 F6                        bra @quick_loop
0025D4r 3               
0025D4r 3               @lots_of_spaces:
0025D4r 3                               ; We go through the first loop once to get rid of the lower
0025D4r 3                               ; counter byte. This could be zero
0025D4r 3  B4 00                        ldy 0,x
0025D6r 3               
0025D6r 3               @first_slow_loop:
0025D6r 3  F0 08                        beq @slow_outer_loop
0025D8r 3  A9 20                        lda #AscSP
0025DAr 3  20 rr rr                     jsr emit_a
0025DDr 3  88                           dey
0025DEr 3  80 F6                        bra @first_slow_loop
0025E0r 3               
0025E0r 3               @slow_outer_loop:
0025E0r 3                               ; we arrive here knowing that the MSB of TOS cannot be a zero
0025E0r 3  A0 00                        ldy #00
0025E2r 3               
0025E2r 3               @slow_inner_loop:
0025E2r 3  A9 20                        lda #AscSP
0025E4r 3  20 rr rr                     jsr emit_a
0025E7r 3  88                           dey
0025E8r 3  D0 F8                        bne @slow_inner_loop
0025EAr 3               
0025EAr 3  D6 01                        dec 1,x
0025ECr 3  D0 F2                        bne @slow_outer_loop
0025EEr 3               
0025EEr 3               @done:
0025EEr 3  E8                           inx             ; drop
0025EFr 3  E8                           inx
0025F0r 3               
0025F0r 3  60           z_spaces:       rts
0025F1r 3               
0025F1r 3               
0025F1r 3               
0025F1r 3               ; ## STAR ( n n -- n ) "16*16 --> 16 "
0025F1r 3               ; ## "*"  auto  ANS core
0025F1r 3                       ; """https://forth-standard.org/standard/core/Times
0025F1r 3                       ; Multiply two signed 16 bit numbers, returning a 16 bit result.
0025F1r 3                       ;
0025F1r 3                       ; This is nothing  more than UM* DROP
0025F1r 3                       ; """
0025F1r 3               
0025F1r 3               xt_star:
0025F1r 3  20 rr rr                     jsr underflow_2
0025F4r 3               
0025F4r 3  20 rr rr                     jsr xt_um_star
0025F7r 3  E8                           inx
0025F8r 3  E8                           inx
0025F9r 3               
0025F9r 3  60           z_star:         rts
0025FAr 3               
0025FAr 3               
0025FAr 3               
0025FAr 3               ; ## STAR_SLASH  ( n1 n2 n3 -- n4 ) "n1 * n2 / n3 -->  n"
0025FAr 3               ; ## "*/"  auto  ANS core
0025FAr 3                       ; """https://forth-standard.org/standard/core/TimesDiv
0025FAr 3                       ; Multiply n1 by n2 and divide by n3, returning the result
0025FAr 3                       ; without a remainder. This is */MOD without the mod.
0025FAr 3                       ;
0025FAr 3                       ; This word
0025FAr 3                       ; can be defined in Forth as : */  */MOD SWAP DROP ; which is
0025FAr 3                       ; pretty much what we do here
0025FAr 3                       ; """
0025FAr 3               xt_star_slash:
0025FAr 3                               ; We let */MOD check for underflow
0025FAr 3  20 rr rr                     jsr xt_star_slash_mod
0025FDr 3  20 rr rr                     jsr xt_swap
002600r 3  E8                           inx
002601r 3  E8                           inx
002602r 3               z_star_slash:
002602r 3  60                           rts
002603r 3               
002603r 3               
002603r 3               ; ## STAR_SLASH_MOD  ( n1 n2 n3 -- n4 n5 ) "n1 * n2 / n3 --> n-mod n"
002603r 3               ; ## "*/mod"  auto  ANS core
002603r 3                       ; """https://forth-standard.org/standard/core/TimesDivMOD
002603r 3                       ; Multiply n1 by n2 producing the intermediate double-cell result d.
002603r 3                       ; Divide d by n3 producing the single-cell remainder n4 and the
002603r 3                       ; single-cell quotient n5.
002603r 3                       ;
002603r 3                       ; In Forth, this is
002603r 3                       ; : */MOD  >R M* >R SM/REM ;  Note that */ accesses this routine.
002603r 3                       ; """
002603r 3               xt_star_slash_mod:
002603r 3  20 rr rr                     jsr underflow_3
002606r 3               
002606r 3  20 rr rr                     jsr xt_to_r
002609r 3  20 rr rr                     jsr xt_m_star
00260Cr 3  20 rr rr                     jsr xt_r_from
00260Fr 3  20 rr rr                     jsr xt_sm_slash_rem
002612r 3               
002612r 3               z_star_slash_mod:
002612r 3  60                           rts
002613r 3               
002613r 3               
002613r 3               ; ## STATE ( -- addr ) "Return the address of compilation state flag"
002613r 3               ; ## "state"  auto  ANS core
002613r 3                       ; """https://forth-standard.org/standard/core/STATE
002613r 3                       ; STATE is true when in compilation state, false otherwise. Note
002613r 3                       ; we do not return the state itself, but only the address where
002613r 3                       ; it lives. The state should not be changed directly by the user; see
002613r 3                       ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
002613r 3                       ; """
002613r 3               xt_state:
002613r 3  CA                           dex
002614r 3  CA                           dex
002615r 3  A9 rr                        lda #<state
002617r 3  95 00                        sta 0,x
002619r 3  A9 rr                        lda #>state
00261Br 3  95 01                        sta 1,x
00261Dr 3               
00261Dr 3  60           z_state:        rts
00261Er 3               
00261Er 3               
00261Er 3               ; ## STORE ( n addr -- ) "Store TOS in memory"
00261Er 3               ; ## "!"  auto  ANS core
00261Er 3                       ; """https://forth-standard.org/standard/core/Store"""
00261Er 3               xt_store:
00261Er 3  20 rr rr                     jsr underflow_2
002621r 3               
002621r 3  B5 02                        lda 2,x         ; LSB
002623r 3  81 00                        sta (0,x)
002625r 3               
002625r 3  F6 00                        inc 0,x
002627r 3  D0 02                        bne @1
002629r 3  F6 01                        inc 1,x
00262Br 3               @1:
00262Br 3  B5 03                        lda 3,x         ; MSB
00262Dr 3  81 00                        sta (0,x)
00262Fr 3               
00262Fr 3  E8                           inx             ; 2DROP
002630r 3  E8                           inx
002631r 3  E8                           inx
002632r 3  E8                           inx
002633r 3               
002633r 3  60           z_store:        rts
002634r 3               
002634r 3               
002634r 3               ; ## STRIP_UNDERFLOW ( -- addr ) "Return address where underflow status is kept"
002634r 3               ; ## "strip-underflow"  tested  Tali Forth
002634r 3                       ; """`STRIP-UNDERFLOW` is a flag variable that determines if underflow
002634r 3                       ; checking should be removed during the compilation of new words.
002634r 3                       ; Default is false.
002634r 3                       ; """
002634r 3               xt_strip_underflow:
002634r 3  CA                           dex
002635r 3  CA                           dex
002636r 3               
002636r 3  A9 rr                        lda #<uf_strip
002638r 3  95 00                        sta 0,x
00263Ar 3  A9 rr                        lda #>uf_strip
00263Cr 3  95 01                        sta 1,x
00263Er 3               
00263Er 3               z_strip_underflow:
00263Er 3  60                           rts
00263Fr 3               
00263Fr 3               
00263Fr 3               ; ## SWAP ( b a -- a b ) "Exchange TOS and NOS"
00263Fr 3               ; ## "swap"  auto  ANS core
00263Fr 3                       ; """https://forth-standard.org/standard/core/SWAP"""
00263Fr 3               xt_swap:
00263Fr 3  20 rr rr                     jsr underflow_2
002642r 3               
002642r 3  B5 00                        lda 0,x         ; LSB
002644r 3  B4 02                        ldy 2,x
002646r 3  95 02                        sta 2,x
002648r 3  94 00                        sty 0,x
00264Ar 3               
00264Ar 3  B5 01                        lda 1,x         ; MSB
00264Cr 3  B4 03                        ldy 3,x
00264Er 3  95 03                        sta 3,x
002650r 3  94 01                        sty 1,x
002652r 3               
002652r 3  60           z_swap:         rts
002653r 3               
002653r 3               
002653r 3               ; ## THEN (C: orig -- ) ( -- ) "Conditional flow control"
002653r 3               ; ## "then"  auto  ANS core
002653r 3                       ; """http://forth-standard.org/standard/core/THEN"""
002653r 3               xt_then:
002653r 3                               ; Get the address to jump to.
002653r 3  20 rr rr                     jsr xt_here
002656r 3               
002656r 3                               ; Stuff HERE in for the branch address back
002656r 3                               ; at the IF or ELSE (origination address is on stack).
002656r 3  20 rr rr                     jsr xt_swap
002659r 3  20 rr rr                     jsr xt_store
00265Cr 3               
00265Cr 3  60           z_then:         rts
00265Dr 3               
00265Dr 3               
00265Dr 3               ; ## THRU ( scr# scr# -- ) "Load screens in the given range"
00265Dr 3               ; ## "thru"  tested  ANS block ext
00265Dr 3                       ; """https://forth-standard.org/standard/block/THRU"""
00265Dr 3               
00265Dr 3               xt_thru:
00265Dr 3  20 rr rr                     jsr underflow_2
002660r 3               
002660r 3                               ; We need to loop here, and can't use the data stack
002660r 3                               ; because the LOADed screens might use it.  We'll
002660r 3                               ; need to use the same trick that DO loops use, holding
002660r 3                               ; the limit and current index on the return stack.
002660r 3               
002660r 3                               ; Put the ending screen number on the return stack
002660r 3  B5 01                        lda 1,x
002662r 3  48                           pha
002663r 3  B5 00                        lda 0,x
002665r 3  48                           pha
002666r 3  E8                           inx
002667r 3  E8                           inx
002668r 3               @thru_loop:
002668r 3                               ; Put the starting screen number on the stack,
002668r 3                               ; but keep a copy
002668r 3  B5 01                        lda 1,x
00266Ar 3  48                           pha
00266Br 3  B5 00                        lda 0,x
00266Dr 3  48                           pha
00266Er 3               
00266Er 3                               ; Load this screen.
00266Er 3  20 rr rr                     jsr xt_load
002671r 3               
002671r 3                               ; Get the number and limit back off the stack.  Rather than
002671r 3                               ; waste time making room on the stack, just use tmp1 and tmp2.
002671r 3               
002671r 3                               ; Get the screen we just loaded.
002671r 3  68                           pla
002672r 3  85 rr                        sta tmp1
002674r 3  68                           pla
002675r 3  85 rr                        sta tmp1+1
002677r 3               
002677r 3                               ; Get the ending screen.
002677r 3  68                           pla
002678r 3  85 rr                        sta tmp2
00267Ar 3  68                           pla
00267Br 3  85 rr                        sta tmp2+1
00267Dr 3               
00267Dr 3                               ; See if we just loaded the last screen.
00267Dr 3                               ; A already has the MSB of the last screen in it.
00267Dr 3  C5 rr                        cmp tmp1+1
00267Fr 3  D0 08                        bne @next_screen
002681r 3  A5 rr                        lda tmp2        ; Compare the LSB
002683r 3  C5 rr                        cmp tmp1
002685r 3  D0 02                        bne @next_screen
002687r 3  80 18                        bra @done       ; We just did the last screen.
002689r 3               
002689r 3               @next_screen:
002689r 3                               ; Put the ending screen back on the data stack.
002689r 3  A5 rr                        lda tmp2+1
00268Br 3  48                           pha
00268Cr 3  A5 rr                        lda tmp2
00268Er 3  48                           pha
00268Fr 3               
00268Fr 3                               ; Increment the current screen.
00268Fr 3  E6 rr                        inc tmp1
002691r 3  D0 02                        bne @1
002693r 3  E6 rr                        inc tmp1+1
002695r 3               @1:
002695r 3                               ; Put the current screen on the stack to prepare for
002695r 3                               ; the next loop.
002695r 3  CA                           dex
002696r 3  CA                           dex
002697r 3  A5 rr                        lda tmp1
002699r 3  95 00                        sta 0,x
00269Br 3  A5 rr                        lda tmp1+1
00269Dr 3  95 01                        sta 1,x
00269Fr 3  80 C7                        bra @thru_loop
0026A1r 3               @done:
0026A1r 3  60           z_thru:         rts
0026A2r 3               
0026A2r 3               
0026A2r 3               
0026A2r 3               ; ## TICK ( "name" -- xt ) "Return a word's execution token (xt)"
0026A2r 3               ; ## "'"  auto  ANS core
0026A2r 3                       ; """https://forth-standard.org/standard/core/Tick"""
0026A2r 3               
0026A2r 3               xt_tick:
0026A2r 3  20 rr rr                     jsr xt_parse_name       ; ( -- addr u )
0026A5r 3               
0026A5r 3                               ; if we got a zero, there was a problem getting the
0026A5r 3                               ; name of the word
0026A5r 3  B5 00                        lda 0,x
0026A7r 3  15 01                        ora 1,x
0026A9r 3  D0 05                        bne @1
0026ABr 3               
0026ABr 3  A9 05                        lda #err_noname
0026ADr 3  4C rr rr                     jmp error
0026B0r 3               @1:
0026B0r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt )
0026B3r 3               
0026B3r 3                               ; If we didn't find the word in the Dictionary, abort
0026B3r 3  B5 00                        lda 0,x
0026B5r 3  15 01                        ora 1,x
0026B7r 3  D0 05                        bne @2
0026B9r 3               
0026B9r 3  A9 08                        lda #err_syntax
0026BBr 3  4C rr rr                     jmp error
0026BEr 3               @2:
0026BEr 3  20 rr rr                     jsr xt_name_to_int      ; ( nt -- xt )
0026C1r 3               
0026C1r 3  60           z_tick:         rts
0026C2r 3               
0026C2r 3               
0026C2r 3               
0026C2r 3               ; ## TO ( n "name" -- ) or ( "name") "Change a value"
0026C2r 3               ; ## "to"  auto  ANS core ext
0026C2r 3                       ; """https://forth-standard.org/standard/core/TO
0026C2r 3                       ; Gives a new value to a, uh, VALUE.
0026C2r 3                       ;
0026C2r 3                       ; One possible Forth
0026C2r 3                       ; implementation is  ' >BODY !  but given the problems we have
0026C2r 3                       ; with >BODY on STC Forths, we do this the hard way. Since
0026C2r 3                       ; Tali Forth uses the same code for CONSTANTs and VALUEs, you
0026C2r 3                       ; could use this to redefine a CONSTANT, but that is a no-no.
0026C2r 3                       ;
0026C2r 3                       ; Note that the standard has different behaviors for TO depending
0026C2r 3                       ; on the state (https://forth-standard.org/standard/core/TO).
0026C2r 3                       ; This makes TO state-dependent (which is bad) and also rather
0026C2r 3                       ; complex (see the Gforth implementation for comparison). This
0026C2r 3                       ; word may not be natively compiled and must be immediate. Frankly,
0026C2r 3                       ; it would have made more sense to have two words for this.
0026C2r 3                       ; """
0026C2r 3               
0026C2r 3               xt_to:
0026C2r 3                               ; One way or the other, we need the xt of the word after this
0026C2r 3                               ; one. At this point, we don't know if we are interpreted or
0026C2r 3                               ; compile, so we don't know if there is a value n on the stack,
0026C2r 3                               ; so we can't do an underflow check yet
0026C2r 3  20 rr rr                     jsr xt_tick             ; ( [n] xt )
0026C5r 3               
0026C5r 3                               ; The PFA (DFA in this case) is three bytes down,
0026C5r 3                               ; after the jump to DOCONST
0026C5r 3  B5 00                        lda 0,x                 ; LSB
0026C7r 3  18                           clc
0026C8r 3  69 03                        adc #3
0026CAr 3  85 rr                        sta tmp1
0026CCr 3  B5 01                        lda 1,x                 ; MSB
0026CEr 3  69 00                        adc #0                  ; we just want the carry
0026D0r 3  85 rr                        sta tmp1+1
0026D2r 3               
0026D2r 3  E8                           inx
0026D3r 3  E8                           inx                     ; ( [n] )
0026D4r 3               
0026D4r 3                               ; Now it gets ugly. See which state we are in
0026D4r 3  A5 rr                        lda state
0026D6r 3  05 rr                        ora state+1
0026D8r 3  F0 34                        beq @interpret
0026DAr 3               
0026DAr 3                               ; Well, we're compiling. We want to end up with simple
0026DAr 3                               ; code that just takes the number that is TOS and saves
0026DAr 3                               ; it in the address of the xt we were just given. So we
0026DAr 3                               ; want to compile this routine:
0026DAr 3                               ;
0026DAr 3                               ;       lda 0,x                 - B5 00
0026DAr 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
0026DAr 3                               ;       lda 1,x                 - B5 01
0026DAr 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
0026DAr 3                               ;       inx                     - E8
0026DAr 3                               ;       inx                     - E8
0026DAr 3                               ;
0026DAr 3                               ; which at least is nice and short. Other than that, we pretty
0026DAr 3                               ; much have to do this the hard and long way, because with the
0026DAr 3                               ; LSBs and MSBs, we can't really put the numbers in a data
0026DAr 3                               ; range and store them with a loop. Sigh.
0026DAr 3               
0026DAr 3  A0 00                        ldy #$00                ; Code for LDA 0,X
0026DCr 3  A9 B5                        lda #$B5
0026DEr 3  20 rr rr                     jsr cmpl_word
0026E1r 3               
0026E1r 3  A9 8D                        lda #$8D                ; Code for STA abs
0026E3r 3  20 rr rr                     jsr cmpl_a
0026E6r 3               
0026E6r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
0026E8r 3  A5 rr                        lda tmp1
0026EAr 3  20 rr rr                     jsr cmpl_word
0026EDr 3               
0026EDr 3  A0 01                        ldy #$01                ; Code for LDA 1,X
0026EFr 3  A9 B5                        lda #$B5
0026F1r 3  20 rr rr                     jsr cmpl_word
0026F4r 3               
0026F4r 3  A9 8D                        lda #$8D                ; Code for STA abs
0026F6r 3  20 rr rr                     jsr cmpl_a
0026F9r 3               
0026F9r 3  E6 rr                        inc tmp1                ; Calculate MSB
0026FBr 3  D0 02                        bne @1
0026FDr 3  E6 rr                        inc tmp1+1
0026FFr 3               @1:
0026FFr 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
002701r 3  A5 rr                        lda tmp1
002703r 3  20 rr rr                     jsr cmpl_word
002706r 3               
002706r 3  A0 E8                        ldy #$E8                ; Code for INX
002708r 3  98                           tya
002709r 3  20 rr rr                     jsr cmpl_word
00270Cr 3               
00270Cr 3  80 0F                        bra @done
00270Er 3               
00270Er 3               @interpret:
00270Er 3                               ; We're interpreting, so we arrive here with n
00270Er 3                               ; on the stack. This is an annoying place to put
00270Er 3                               ; the underflow check because we can't
00270Er 3                               ; automatically strip it out
00270Er 3  20 rr rr                     jsr underflow_1
002711r 3               
002711r 3                               ; We skip over the jump to DOCONST and store the number
002711r 3                               ; in the Program Field Area (PDF, in this case more a
002711r 3                               ; Data Field Area
002711r 3  B5 00                        lda 0,x
002713r 3  92 rr                        sta (tmp1)              ; LSB
002715r 3               
002715r 3  A0 01                        ldy #1
002717r 3  B5 01                        lda 1,x                 ; MSB
002719r 3  91 rr                        sta (tmp1),y            ; fall through to common
00271Br 3               
00271Br 3  E8                           inx                     ; DROP
00271Cr 3  E8                           inx
00271Dr 3               @done:
00271Dr 3  60           z_to:           rts
00271Er 3               
00271Er 3               
00271Er 3               
00271Er 3               ; ## TO_BODY ( xt -- addr ) "Return a word's Code Field Area (CFA)"
00271Er 3               ; ## ">body"  auto  ANS core
00271Er 3                       ; """https://forth-standard.org/standard/core/toBODY
00271Er 3                       ; Given a word's execution token (xt), return the address of the
00271Er 3                       ; start of that word's parameter field (PFA). This is defined as the
00271Er 3                       ; address that HERE would return right after CREATE.
00271Er 3                       ;
00271Er 3                       ; This is a
00271Er 3                       ; difficult word for STC Forths, because most words don't actually
00271Er 3                       ; have a Code Field Area (CFA) to skip. We solve this by having CREATE
00271Er 3                       ; add a flag, "has CFA" (HC), in the header so >BODY know to skip
00271Er 3                       ; the subroutine jumps to DOVAR, DOCONST, or DODOES
00271Er 3                       ; """
00271Er 3               
00271Er 3               xt_to_body:
00271Er 3  20 rr rr                     jsr underflow_1
002721r 3               
002721r 3                               ; Ideally, xt already points to the CFA. We just need to check
002721r 3                               ; the HC flag for special cases
002721r 3  20 rr rr                     jsr xt_dup              ; ( xt xt )
002724r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt nt )
002727r 3               
002727r 3                               ; The status byte is nt+1
002727r 3  F6 00                        inc 0,x
002729r 3  D0 02                        bne @1
00272Br 3  F6 01                        inc 1,x
00272Dr 3               @1:
00272Dr 3  A1 00                        lda (0,x)               ; get status byte
00272Fr 3  29 20                        and #HC
002731r 3  F0 0D                        beq @no_cfa
002733r 3               
002733r 3                               ; We've got a DOVAR, DOCONST, DODEFER, DODOES or whatever,
002733r 3                               ; so we add three to xt, which is NOS
002733r 3  18                           clc
002734r 3  B5 02                        lda 2,x         ; LSB
002736r 3  69 03                        adc #3
002738r 3  95 02                        sta 2,x
00273Ar 3  B5 03                        lda 3,x         ; MSB
00273Cr 3  69 00                        adc #0          ; we conly care about the carry
00273Er 3  95 03                        sta 3,x         ; Fall through to @no_cfa
002740r 3               @no_cfa:
002740r 3  E8                           inx             ; get rid of the nt
002741r 3  E8                           inx
002742r 3               @done:
002742r 3  60           z_to_body:      rts
002743r 3               
002743r 3               
002743r 3               
002743r 3               ; ## TO_IN ( -- addr ) "Return address of the input pointer"
002743r 3               ; ## ">in"  auto  ANS core
002743r 3               xt_to_in:
002743r 3  CA                           dex
002744r 3  CA                           dex
002745r 3               
002745r 3  A9 rr                        lda #<toin
002747r 3  95 00                        sta 0,x
002749r 3  A9 rr                        lda #>toin      ; paranoid, should be zero
00274Br 3  95 01                        sta 1,x
00274Dr 3               
00274Dr 3  60           z_to_in:        rts
00274Er 3               
00274Er 3               
00274Er 3               ; ## TO_NUMBER ( ud addr u -- ud addr u ) "Convert a number"
00274Er 3               ; ## ">number"  auto  ANS core
00274Er 3                       ; """https://forth-standard.org/standard/core/toNUMBER
00274Er 3                       ; Convert a string to a double number. Logic here is based on the
00274Er 3                       ; routine by Phil Burk of the same name in pForth, see
00274Er 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
00274Er 3                       ; for the original Forth code. We arrive here from NUMBER which has
00274Er 3                       ; made sure that we don't have to deal with a sign and we don't have
00274Er 3                       ; to deal with a dot as a last character that signalizes double -
00274Er 3                       ; this should be a pure number string.
00274Er 3                       ;
00274Er 3                       ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we
00274Er 3                       ; cannot access any of those.
00274Er 3                       ;
00274Er 3                       ; For the math routine, we move the inputs to the scratchpad to
00274Er 3                       ; avoid having to fool around with the Data Stack.
00274Er 3                       ;
00274Er 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
00274Er 3                       ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
00274Er 3                       ;     |           |           |           |           |
00274Er 3                       ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
00274Er 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
00274Er 3                       ;
00274Er 3                       ; The math routine works by converting one character to its
00274Er 3                       ; numerical value (N) via DIGIT? and storing it in S+4 for
00274Er 3                       ; the moment. We then multiply the UD-HI value with the radix
00274Er 3                       ; (from BASE) using UM*, which returns a double-cell result. We
00274Er 3                       ; discard the high cell of that result (UD-HI-HI) and store the
00274Er 3                       ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
00274Er 3                       ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
00274Er 3                       ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
00274Er 3                       ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
00274Er 3                       ; storing the result back in S and S+2, before we start another
00274Er 3                       ; round with it as the new UD-LO and UD-HI.
00274Er 3                       ; """
00274Er 3               
00274Er 3               
00274Er 3               xt_to_number:
00274Er 3  20 rr rr                     jsr underflow_4
002751r 3               
002751r 3                               ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
002751r 3                               ; After this step, the original ud-lo and ud-hi will still be on
002751r 3                               ; the Data Stack, but will be ignored and later overwritten
002751r 3                               ; If >NUMBER is called by NUMBER, these should be all zeros
002751r 3  B5 06                        lda 6,x         ; ud-lo LSB
002753r 3  85 rr                        sta scratch
002755r 3  B5 07                        lda 7,x         ; ud-lo MSB
002757r 3  85 rr                        sta scratch+1
002759r 3               
002759r 3  B5 04                        lda 4,x         ; ud-hi LSB
00275Br 3  85 rr                        sta scratch+2
00275Dr 3  B5 05                        lda 5,x         ; ud-hi MSB
00275Fr 3  85 rr                        sta scratch+3
002761r 3               
002761r 3                               ; Push down one on the Data Stack to use TOS for character
002761r 3                               ; conversion ( ud-lo ud-hi addr u x )
002761r 3  CA                           dex
002762r 3  CA                           dex
002763r 3               
002763r 3               @loop:
002763r 3                               ; Get one character based on address
002763r 3  A1 04                        lda (4,x)
002765r 3  95 00                        sta 0,x                 ; ( ud-lo ud-hi addr u char )
002767r 3  74 01                        stz 1,x                 ; paranoid
002769r 3               
002769r 3  20 rr rr                     jsr xt_digit_question   ; ( char -- n -1 | char 0 )
00276Cr 3               
00276Cr 3                               ; This gives us ( ud-lo ud-hi addr u char f | n f ), so we
00276Cr 3                               ; check the flag. If it is zero, we return what we have and
00276Cr 3                               ; let the caller (usually NUMBER) complain
00276Cr 3  B5 00                        lda 0,x
00276Er 3  D0 04                        bne @digit_ok
002770r 3               
002770r 3  E8                           inx
002771r 3  E8                           inx
002772r 3  80 67                        bra @done       ; ( ud-lo ud-hi addr u char )
002774r 3               
002774r 3               @digit_ok:
002774r 3                               ; Conversion was successful. We arrive here with
002774r 3                               ; ( ud-lo ud-hi addr u n -1 ) and can start the
002774r 3                               ; math routine
002774r 3               
002774r 3                               ; Save n so we don't have to fool around with the
002774r 3                               ; Data Stack
002774r 3  B5 02                        lda 2,x
002776r 3  85 rr                        sta scratch+4
002778r 3  B5 03                        lda 3,x
00277Ar 3  85 rr                        sta scratch+5
00277Cr 3               
00277Cr 3                               ; Now multiply ud-hi (the one in the scratchpad, not the
00277Cr 3                               ; original one on the Data Stack) with the radix from BASE.
00277Cr 3                               ; We can clobber TOS and NOS because we saved n
00277Cr 3  A5 rr                        lda scratch+2
00277Er 3  95 02                        sta 2,x         ; NOS
002780r 3  A5 rr                        lda scratch+3
002782r 3  95 03                        sta 3,x
002784r 3               
002784r 3  A5 rr                        lda base
002786r 3  95 00                        sta 0,x         ; TOS
002788r 3  74 01                        stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
00278Ar 3               
00278Ar 3                               ; UM* returns a double-celled number
00278Ar 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
00278Dr 3               
00278Dr 3                               ; Move ud-hi-lo to safety
00278Dr 3  B5 02                        lda 2,x         ; ud-hi-lo
00278Fr 3  85 rr                        sta scratch+6
002791r 3  B5 03                        lda 3,x
002793r 3  85 rr                        sta scratch+7
002795r 3               
002795r 3                               ; Now we multiply ud-lo, overwriting the stack entries
002795r 3  A5 rr                        lda scratch
002797r 3  95 02                        sta 2,x
002799r 3  A5 rr                        lda scratch+1
00279Br 3  95 03                        sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
00279Dr 3               
00279Dr 3  A5 rr                        lda base
00279Fr 3  95 00                        sta 0,x
0027A1r 3  74 01                        stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
0027A3r 3               
0027A3r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
0027A6r 3               
0027A6r 3  B5 00                        lda 0,x
0027A8r 3  85 rr                        sta scratch+2
0027AAr 3  B5 01                        lda 1,x
0027ACr 3  85 rr                        sta scratch+3
0027AEr 3               
0027AEr 3  B5 02                        lda 2,x
0027B0r 3  85 rr                        sta scratch
0027B2r 3  B5 03                        lda 3,x
0027B4r 3  85 rr                        sta scratch+1
0027B6r 3               
0027B6r 3                               ; We add ud-lo and n, as well as ud-hi and ud-hi-lo,
0027B6r 3                               ; both in the scratch pad
0027B6r 3  18                           clc
0027B7r 3  A5 rr                        lda scratch     ; ud-lo LSB
0027B9r 3  65 rr                        adc scratch+4   ; n LSB
0027BBr 3  85 rr                        sta scratch     ; this is the new ud-lo
0027BDr 3  A5 rr                        lda scratch+1   ; ud-lo MSB
0027BFr 3  65 rr                        adc scratch+5   ; n MSB
0027C1r 3  85 rr                        sta scratch+1
0027C3r 3               
0027C3r 3  A5 rr                        lda scratch+2   ; LSB
0027C5r 3  65 rr                        adc scratch+6
0027C7r 3  85 rr                        sta scratch+2   ; this is the new ud-hi
0027C9r 3  A5 rr                        lda scratch+3   ; MSB
0027CBr 3  65 rr                        adc scratch+7
0027CDr 3  85 rr                        sta scratch+3
0027CFr 3               
0027CFr 3                               ; Clean up: Get rid of one of the two top elements on
0027CFr 3                               ; the Data Stack. We don't really care which one
0027CFr 3  E8                           inx
0027D0r 3  E8                           inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
0027D1r 3               
0027D1r 3                               ; One character down. Move address up
0027D1r 3  F6 04                        inc 4,x
0027D3r 3  D0 02                        bne @1
0027D5r 3  F6 05                        inc 5,x
0027D7r 3               @1:
0027D7r 3                               ; Decrease counter
0027D7r 3  D6 02                        dec 2,x
0027D9r 3  D0 88                        bne @loop
0027DBr 3               
0027DBr 3               @done:
0027DBr 3                               ; Counter has reached zero or we have an error. In both
0027DBr 3                               ; cases, we clean up the Data Stack and return. Error gives
0027DBr 3                               ; us ( ud-lo ud-hi addr u char ), regular end is
0027DBr 3                               ; ( ud-lo ud-hi addr u ud-lo )
0027DBr 3  E8                           inx
0027DCr 3  E8                           inx             ; ( ud-lo ud-hi addr u )
0027DDr 3               
0027DDr 3                               ; The new ud-lo and ud-hi are still on the scratch pad
0027DDr 3  A5 rr                        lda scratch     ; new ud-lo
0027DFr 3  95 06                        sta 6,x
0027E1r 3  A5 rr                        lda scratch+1
0027E3r 3  95 07                        sta 7,x
0027E5r 3               
0027E5r 3  A5 rr                        lda scratch+2
0027E7r 3  95 04                        sta 4,x
0027E9r 3  A5 rr                        lda scratch+3
0027EBr 3  95 05                        sta 5,x
0027EDr 3               
0027EDr 3  60           z_to_number:    rts
0027EEr 3               
0027EEr 3               
0027EEr 3               
0027EEr 3               ; ## TO_ORDER ( wid -- ) "Add wordlist at beginning of search order"
0027EEr 3               ; ## ">order"  tested  Gforth search
0027EEr 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html"""
0027EEr 3               
0027EEr 3               xt_to_order:
0027EEr 3                               ; Put the wid on the return stack for now.
0027EEr 3  20 rr rr                     jsr xt_to_r
0027F1r 3               
0027F1r 3                               ; Get the current search order.
0027F1r 3  20 rr rr                     jsr xt_get_order
0027F4r 3               
0027F4r 3                               ; Get back the wid and add it to the list.
0027F4r 3  20 rr rr                     jsr xt_r_from
0027F7r 3  20 rr rr                     jsr xt_swap
0027FAr 3  20 rr rr                     jsr xt_one_plus
0027FDr 3               
0027FDr 3                               ; Set the search order with the new list.
0027FDr 3  20 rr rr                     jsr xt_set_order
002800r 3               
002800r 3  60           z_to_order:     rts
002801r 3               
002801r 3               
002801r 3               
002801r 3               ; ## TO_R ( n -- )(R: -- n) "Push TOS to the Return Stack"
002801r 3               ; ## ">r"  auto  ANS core
002801r 3                       ; """https://forth-standard.org/standard/core/toR
002801r 3                       ; This word is handled differently for native and for
002801r 3                       ; subroutine coding, see `COMPILE,`. This is a complile-only
002801r 3                       ; word.
002801r 3                       ; """
002801r 3               xt_to_r:
002801r 3                               ; Save the return address. If this word is natively
002801r 3                               ; coded, this is a complete waste of cycles, but
002801r 3                               ; required for subroutine coding
002801r 3  68                           pla             ; LSB
002802r 3  85 rr                        sta tmptos
002804r 3  7A                           ply             ; MSB
002805r 3               
002805r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002805r 3               
002805r 3                               ; We check for underflow in the second step, so we can
002805r 3                               ; strip off the stack thrashing for native compiling first
002805r 3  20 rr rr                     jsr underflow_1
002808r 3               
002808r 3                               ; now we can do the actual work
002808r 3  B5 01                        lda 1,x         ; MSB
00280Ar 3  48                           pha
00280Br 3  B5 00                        lda 0,x         ; LSB
00280Dr 3  48                           pha
00280Er 3               
00280Er 3  E8                           inx
00280Fr 3  E8                           inx
002810r 3               
002810r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002810r 3               
002810r 3                               ; restore return address
002810r 3  5A                           phy             ; MSB
002811r 3  A5 rr                        lda tmptos
002813r 3  48                           pha             ; LSB
002814r 3               
002814r 3  60           z_to_r:         rts
002815r 3               
002815r 3               
002815r 3               ; ## TRUE ( -- f ) "Push TRUE flag to Data Stack"
002815r 3               ; ## "true"  auto  ANS core ext
002815r 3                       ; """https://forth-standard.org/standard/core/TRUE"""
002815r 3               xt_true:
002815r 3  CA                           dex
002816r 3  CA                           dex
002817r 3  A9 FF                        lda #$FF
002819r 3  95 00                        sta 0,x
00281Br 3  95 01                        sta 1,x
00281Dr 3               
00281Dr 3  60           z_true:         rts
00281Er 3               
00281Er 3               
00281Er 3               ; ## TUCK ( b a -- a b a ) "Copy TOS below NOS"
00281Er 3               ; ## "tuck"  auto  ANS core ext
00281Er 3                       ; """https://forth-standard.org/standard/core/TUCK"""
00281Er 3               xt_tuck:
00281Er 3  20 rr rr                     jsr underflow_2
002821r 3               
002821r 3  CA                           dex
002822r 3  CA                           dex
002823r 3               
002823r 3  B4 04                        ldy 4,x         ; LSB
002825r 3  B5 02                        lda 2,x
002827r 3  95 04                        sta 4,x
002829r 3  94 02                        sty 2,x
00282Br 3  95 00                        sta 0,x
00282Dr 3               
00282Dr 3  B4 05                        ldy 5,x         ; MSB
00282Fr 3  B5 03                        lda 3,x
002831r 3  95 05                        sta 5,x
002833r 3  94 03                        sty 3,x         ; bba
002835r 3  95 01                        sta 1,x         ; baa
002837r 3               
002837r 3  60           z_tuck:         rts
002838r 3               
002838r 3               
002838r 3               ; ## TWO ( -- u ) "Push the number 2 to stack"
002838r 3               ; ## "2"  auto  Tali Forth
002838r 3                       ;
002838r 3                       ; This code is shared with ASSEMBLER-WORDLIST
002838r 3               xt_assembler_wordlist:
002838r 3               xt_two:
002838r 3  CA                           dex
002839r 3  CA                           dex
00283Ar 3  A9 02                        lda #2
00283Cr 3  95 00                        sta 0,x
00283Er 3  74 01                        stz 1,x
002840r 3               
002840r 3               z_assembler_wordlist:
002840r 3  60           z_two:          rts
002841r 3               
002841r 3               
002841r 3               ; ## TWO_DROP ( n n -- ) "Drop TOS and NOS"
002841r 3               ; ## "2drop"  auto  ANS core
002841r 3                       ; """https://forth-standard.org/standard/core/TwoDROP"""
002841r 3               xt_two_drop:
002841r 3  20 rr rr                     jsr underflow_2
002844r 3               
002844r 3  E8                           inx
002845r 3  E8                           inx
002846r 3  E8                           inx
002847r 3  E8                           inx
002848r 3               
002848r 3  60           z_two_drop:     rts
002849r 3               
002849r 3               
002849r 3               ; ## TWO_DUP ( a b -- a b a b ) "Duplicate first two stack elements"
002849r 3               ; ## "2dup"  auto  ANS core
002849r 3                       ; """https://forth-standard.org/standard/core/TwoDUP"""
002849r 3               xt_two_dup:
002849r 3  20 rr rr                     jsr underflow_2
00284Cr 3               
00284Cr 3  CA                           dex
00284Dr 3  CA                           dex
00284Er 3  CA                           dex
00284Fr 3  CA                           dex
002850r 3               
002850r 3  B5 04                        lda 4,x         ; TOS
002852r 3  95 00                        sta 0,x
002854r 3  B5 05                        lda 5,x
002856r 3  95 01                        sta 1,x
002858r 3               
002858r 3  B5 06                        lda 6,x         ; NOS
00285Ar 3  95 02                        sta 2,x
00285Cr 3  B5 07                        lda 7,x
00285Er 3  95 03                        sta 3,x
002860r 3               
002860r 3  60           z_two_dup:      rts
002861r 3               
002861r 3               
002861r 3               ; ## TWO_FETCH ( addr -- n1 n2 ) "Fetch the cell pair n1 n2 stored at addr"
002861r 3               ; ## "2@"  auto  ANS core
002861r 3                       ; """https://forth-standard.org/standard/core/TwoFetch
002861r 3                       ; Note n2 stored at addr and n1 in the next cell -- in our case,
002861r 3                       ; the next two bytes. This is equvalent to  `DUP CELL+ @ SWAP @`
002861r 3                       ; """
002861r 3               xt_two_fetch:
002861r 3  20 rr rr                     jsr underflow_1
002864r 3               
002864r 3  B5 00                        lda 0,x
002866r 3  85 rr                        sta tmp1
002868r 3  B4 01                        ldy 1,x
00286Ar 3  84 rr                        sty tmp1+1
00286Cr 3               
00286Cr 3  CA                           dex             ; reuse one stack element
00286Dr 3  CA                           dex
00286Er 3               
00286Er 3  B2 rr                        lda (tmp1)      ; copy LSB
002870r 3  95 00                        sta 0,x
002872r 3  A0 01                        ldy #1          ; copy next
002874r 3  B1 rr                        lda (tmp1),y
002876r 3  95 01                        sta 1,x
002878r 3  C8                           iny             ; copy next
002879r 3  B1 rr                        lda (tmp1),y
00287Br 3  95 02                        sta 2,x
00287Dr 3  C8                           iny             ; copy next
00287Er 3  B1 rr                        lda (tmp1),y
002880r 3  95 03                        sta 3,x
002882r 3               
002882r 3  60           z_two_fetch:    rts
002883r 3               
002883r 3               ; ## TWO_OVER ( d1 d2 -- d1 d2 d1 ) "Copy double word NOS to TOS"
002883r 3               ; ## "2over"  auto  ANS core
002883r 3                       ; """https://forth-standard.org/standard/core/TwoOVER"""
002883r 3               xt_two_over:
002883r 3  20 rr rr                     jsr underflow_4
002886r 3               
002886r 3  CA                           dex
002887r 3  CA                           dex
002888r 3  CA                           dex
002889r 3  CA                           dex
00288Ar 3               
00288Ar 3  B5 08                        lda 8,x
00288Cr 3  95 00                        sta 0,x
00288Er 3               
00288Er 3  B5 09                        lda 9,x
002890r 3  95 01                        sta 1,x
002892r 3               
002892r 3  B5 0A                        lda 10,x
002894r 3  95 02                        sta 2,x
002896r 3               
002896r 3  B5 0B                        lda 11,x
002898r 3  95 03                        sta 3,x
00289Ar 3               
00289Ar 3  60           z_two_over:     rts
00289Br 3               
00289Br 3               
00289Br 3               ; ## TWO_R_FETCH ( -- n n ) "Copy top two entries from Return Stack"
00289Br 3               ; ## "2r@"  auto  ANS core ext
00289Br 3                       ; """https://forth-standard.org/standard/core/TwoRFetch
00289Br 3                       ;
00289Br 3                       ; This is R> R> 2DUP >R >R SWAP but we can do it a lot faster in
00289Br 3                       ; assembler. We use trickery to access the elements on the Return
00289Br 3                       ; Stack instead of pulling the return address first and storing
00289Br 3                       ; it somewhere else like for 2R> and 2>R. In this version, we leave
00289Br 3                       ; it as Never Native; at some point, we should compare versions to
00289Br 3                       ; see if an Always Native version would be better
00289Br 3                       ; """
00289Br 3               xt_two_r_fetch:
00289Br 3               		; make room on the Data Stack
00289Br 3  CA                           dex
00289Cr 3  CA                           dex
00289Dr 3  CA                           dex
00289Er 3  CA                           dex
00289Fr 3               
00289Fr 3                               ; Get four bytes off of Return Stack. This assumes that
00289Fr 3                               ; we took a subroutine jump here so the first two entries
00289Fr 3                               ; are the return address
00289Fr 3  8A                           txa
0028A0r 3  BA                           tsx
0028A1r 3  DA                           phx             ; 65c02 has no TXY, so do it the hard way
0028A2r 3  7A                           ply
0028A3r 3  AA                           tax
0028A4r 3               
0028A4r 3                               ; The Return Stack addreses $0101 and $0102 are occupied by
0028A4r 3                               ; the return address for this word. This is a whole lot
0028A4r 3                               ; easier on the 65816
0028A4r 3  B9 03 01                     lda $0103,y     ; LSB of top entry
0028A7r 3  95 00                        sta 0,x
0028A9r 3  B9 04 01                     lda $0104,y     ; MSB of top entry
0028ACr 3  95 01                        sta 1,x
0028AEr 3  B9 05 01                     lda $0105,y     ; LSB of bottom entry
0028B1r 3  95 02                        sta 2,x
0028B3r 3  B9 06 01                     lda $0106,y     ; MSB of top entry
0028B6r 3  95 03                        sta 3,x
0028B8r 3               
0028B8r 3  60           z_two_r_fetch:  rts
0028B9r 3               
0028B9r 3               
0028B9r 3               ; ## TWO_R_FROM ( -- n1 n2 ) (R: n1 n2 -- ) "Pull two cells from Return Stack"
0028B9r 3               ; ## "2r>"  auto  ANS core ext
0028B9r 3               	    ; """https://forth-standard.org/standard/core/TwoRfrom
0028B9r 3                       ; Pull top two entries from Return Stack.
0028B9r 3                       ;
0028B9r 3                       ; Is the same as
0028B9r 3                       ; R> R> SWAP. As with R>, the problem with the is word is that
0028B9r 3                       ; the top value on the ReturnStack for a STC Forth is the
0028B9r 3                       ; return address, which we need to get out of the way first.
0028B9r 3                       ; Native compile needs to be handled as a special case.
0028B9r 3                       ; """
0028B9r 3               xt_two_r_from:
0028B9r 3                               ; save the return address
0028B9r 3  68                           pla                     ; LSB
0028BAr 3  85 rr                        sta tmp1
0028BCr 3  68                           pla                     ; MSB
0028BDr 3  85 rr                        sta tmp1+1
0028BFr 3               
0028BFr 3                               ; --- CUT HERE FOR NATIVE CODING ---
0028BFr 3               
0028BFr 3               		; make room on stack
0028BFr 3  CA                           dex
0028C0r 3  CA                           dex
0028C1r 3  CA                           dex
0028C2r 3  CA                           dex
0028C3r 3               
0028C3r 3                               ; In theory, we should test for underflow on the Return
0028C3r 3                               ; Stack. However, given the traffic there with an STC
0028C3r 3                               ; Forth, that's probably not really useful
0028C3r 3               
0028C3r 3                               ; now we can access the data
0028C3r 3  68                           pla                     ; LSB
0028C4r 3  95 00                        sta 0,x
0028C6r 3  68                           pla                     ; MSB
0028C7r 3  95 01                        sta 1,x
0028C9r 3               
0028C9r 3  68                           pla                     ; LSB
0028CAr 3  95 02                        sta 2,x
0028CCr 3  68                           pla                     ; MSB
0028CDr 3  95 03                        sta 3,x
0028CFr 3               
0028CFr 3                               ; --- CUT HERE FOR NATIVE CODING ---
0028CFr 3               
0028CFr 3                               ; restore return address
0028CFr 3  A5 rr                        lda tmp1+1              ; MSB
0028D1r 3  48                           pha
0028D2r 3  A5 rr                        lda tmp1                ; LSB
0028D4r 3  48                           pha
0028D5r 3               
0028D5r 3  60           z_two_r_from:   rts
0028D6r 3               
0028D6r 3               
0028D6r 3               ; ## TWO_SLASH ( n -- n ) "Divide TOS by two"
0028D6r 3               ; ## "2/"  auto  ANS core
0028D6r 3                       ; """https://forth-standard.org/standard/core/TwoDiv"""
0028D6r 3               xt_two_slash:
0028D6r 3  20 rr rr                     jsr underflow_1
0028D9r 3               
0028D9r 3                               ; We can't just LSR the LSB and ROR the MSB because that
0028D9r 3                               ; would do bad things to the sign
0028D9r 3  B5 01                        lda 1,x
0028DBr 3  0A                           asl                     ; save the sign
0028DCr 3  76 01                        ror 1,x
0028DEr 3  76 00                        ror 0,x
0028E0r 3               
0028E0r 3  60           z_two_slash:    rts
0028E1r 3               
0028E1r 3               
0028E1r 3               ; ## TWO_STAR ( n -- n ) "Multiply TOS by two"
0028E1r 3               ; ## "2*"  auto  ANS core
0028E1r 3                       ; """https://forth-standard.org/standard/core/TwoTimes
0028E1r 3                       ;
0028E1r 3                       ; Also used for CELLS
0028E1r 3                       ; """
0028E1r 3               xt_two_star:
0028E1r 3               xt_cells:
0028E1r 3  20 rr rr                     jsr underflow_1
0028E4r 3               
0028E4r 3  16 00                        asl 0,x
0028E6r 3  36 01                        rol 1,x
0028E8r 3               z_cells:
0028E8r 3  60           z_two_star:     rts
0028E9r 3               
0028E9r 3               
0028E9r 3               ; ## TWO_STORE ( n1 n2 addr -- ) "Store two numbers at given address"
0028E9r 3               ; ## "2!"  auto  ANS core
0028E9r 3                       ; """https://forth-standard.org/standard/core/TwoStore
0028E9r 3                       ; Stores so n2 goes to addr and n1 to the next consecutive cell.
0028E9r 3                       ; Is equivalent to  `SWAP OVER ! CELL+ !`
0028E9r 3                       ; """
0028E9r 3               xt_two_store:
0028E9r 3  20 rr rr                     jsr underflow_3
0028ECr 3               
0028ECr 3  B5 00                        lda 0,x
0028EEr 3  85 rr                        sta tmp1
0028F0r 3  B4 01                        ldy 1,x
0028F2r 3  84 rr                        sty tmp1+1
0028F4r 3               
0028F4r 3  E8                           inx
0028F5r 3  E8                           inx
0028F6r 3               
0028F6r 3  B5 00                        lda 0,x         ; copy MSB
0028F8r 3  92 rr                        sta (tmp1)
0028FAr 3  B5 01                        lda 1,x         ; copy next
0028FCr 3  A0 01                        ldy #1
0028FEr 3  91 rr                        sta (tmp1),y
002900r 3  B5 02                        lda 2,x         ; copy next
002902r 3  C8                           iny
002903r 3  91 rr                        sta (tmp1),y
002905r 3  B5 03                        lda 3,x         ; copy MSB
002907r 3  C8                           iny
002908r 3  91 rr                        sta (tmp1),y
00290Ar 3               
00290Ar 3  E8                           inx             ; 2DROP
00290Br 3  E8                           inx
00290Cr 3  E8                           inx
00290Dr 3  E8                           inx
00290Er 3               
00290Er 3  60           z_two_store:    rts
00290Fr 3               
00290Fr 3               
00290Fr 3               ; ## TWO_SWAP ( n1 n2 n3 n4 -- n3 n4 n1 n1 ) "Exchange two double words"
00290Fr 3               ; ## "2swap"  auto  ANS core
00290Fr 3                       ; """https://forth-standard.org/standard/core/TwoSWAP"""
00290Fr 3               xt_two_swap:
00290Fr 3  20 rr rr                     jsr underflow_4
002912r 3               
002912r 3                               ; 0 <-> 4
002912r 3  B5 00                        lda 0,x
002914r 3  B4 04                        ldy 4,x
002916r 3  95 04                        sta 4,x
002918r 3  94 00                        sty 0,x
00291Ar 3               
00291Ar 3                               ; 1 <-> 5
00291Ar 3  B5 01                        lda 1,x
00291Cr 3  B4 05                        ldy 5,x
00291Er 3  95 05                        sta 5,x
002920r 3  94 01                        sty 1,x
002922r 3               
002922r 3                               ; 2 <-> 6
002922r 3  B5 02                        lda 2,x
002924r 3  B4 06                        ldy 6,x
002926r 3  95 06                        sta 6,x
002928r 3  94 02                        sty 2,x
00292Ar 3               
00292Ar 3                               ; 3 <-> 7
00292Ar 3  B5 03                        lda 3,x
00292Cr 3  B4 07                        ldy 7,x
00292Er 3  95 07                        sta 7,x
002930r 3  94 03                        sty 3,x
002932r 3               
002932r 3  60           z_two_swap:     rts
002933r 3               
002933r 3               
002933r 3               ; ## TWO_TO_R ( n1 n2 -- )(R: -- n1 n2 "Push top two entries to Return Stack"
002933r 3               ; ## "2>r"  auto  ANS core ext
002933r 3                       ; """https://forth-standard.org/standard/core/TwotoR
002933r 3                       ; Push top two entries to Return Stack.
002933r 3                       ;
002933r 3                       ; The same as SWAP >R >R
002933r 3                       ; except that if we jumped here, the return address will be in the
002933r 3                       ; way. May not be natively compiled unless we're clever and use
002933r 3                       ; special routines.
002933r 3                       ; """
002933r 3               xt_two_to_r:
002933r 3                               ; save the return address
002933r 3  68                           pla             ; LSB
002934r 3  85 rr                        sta tmp1
002936r 3  68                           pla             ; MSB
002937r 3  85 rr                        sta tmp1+1
002939r 3               
002939r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002939r 3               
002939r 3  20 rr rr                     jsr underflow_2
00293Cr 3               
00293Cr 3                               ; now we can move the data
00293Cr 3  B5 03                        lda 3,x         ; MSB
00293Er 3  48                           pha
00293Fr 3  B5 02                        lda 2,x         ; LSB
002941r 3  48                           pha
002942r 3               
002942r 3                               ; now we can move the data
002942r 3  B5 01                        lda 1,x         ; MSB
002944r 3  48                           pha
002945r 3  B5 00                        lda 0,x         ; LSB
002947r 3  48                           pha
002948r 3               
002948r 3  E8                           inx
002949r 3  E8                           inx
00294Ar 3  E8                           inx
00294Br 3  E8                           inx
00294Cr 3               
00294Cr 3                               ; --- CUT HERE FOR NATIVE CODING ---
00294Cr 3               
00294Cr 3                               ; restore return address
00294Cr 3  A5 rr                        lda tmp1+1      ; MSB
00294Er 3  48                           pha
00294Fr 3  A5 rr                        lda tmp1        ; LSB
002951r 3  48                           pha
002952r 3               
002952r 3  60           z_two_to_r:     rts
002953r 3               
002953r 3               
002953r 3               ; ## TWO_CONSTANT (C: d "name" -- ) ( -- d) "Create a constant for a double word"
002953r 3               ; ## "2constant"  auto  ANS double
002953r 3                       ; """https://forth-standard.org/standard/double/TwoCONSTANT
002953r 3                       ;
002953r 3                       ; Based on the Forth code
002953r 3                       ; : 2CONSTANT ( D -- )  CREATE SWAP , , DOES> DUP @ SWAP CELL+ @ ;
002953r 3                       ; """
002953r 3               xt_two_constant:
002953r 3  20 rr rr                     jsr underflow_2
002956r 3               
002956r 3  20 rr rr                     jsr xt_create
002959r 3  20 rr rr                     jsr xt_swap
00295Cr 3  20 rr rr                     jsr xt_comma
00295Fr 3  20 rr rr                     jsr xt_comma
002962r 3               
002962r 3  20 rr rr                     jsr does_runtime    ; does> turns into these two routines.
002965r 3  20 rr rr                     jsr dodoes
002968r 3               
002968r 3  20 rr rr                     jsr xt_dup
00296Br 3  20 rr rr                     jsr xt_fetch
00296Er 3  20 rr rr                     jsr xt_swap
002971r 3  20 rr rr                     jsr xt_cell_plus
002974r 3  20 rr rr                     jsr xt_fetch
002977r 3               
002977r 3  60           z_two_constant: rts
002978r 3               
002978r 3               
002978r 3               ; ## TWO_LITERAL (C: d -- ) ( -- d) "Compile a literal double word"
002978r 3               ; ## "2literal"  auto  ANS double
002978r 3                       ; """https://forth-standard.org/standard/double/TwoLITERAL"""
002978r 3                       ; Based on the Forth code
002978r 3                       ; : 2LITERAL ( D -- ) SWAP POSTPONE LITERAL POSTPONE LITERAL ; IMMEDIATE
002978r 3                       ; """
002978r 3               xt_two_literal:
002978r 3  20 rr rr                     jsr underflow_2 ; double number
00297Br 3               
00297Br 3  20 rr rr                     jsr xt_swap
00297Er 3  20 rr rr                     jsr xt_literal
002981r 3  20 rr rr                     jsr xt_literal
002984r 3               
002984r 3  60           z_two_literal:  rts
002985r 3               
002985r 3               
002985r 3               ; ## TWO_VARIABLE ( "name" -- ) "Create a variable for a double word"
002985r 3               ; ## "2variable"  auto  ANS double
002985r 3                       ; """https://forth-standard.org/standard/double/TwoVARIABLE
002985r 3                       ; The variable is not initialized to zero.
002985r 3                       ;
002985r 3                       ; This can be realized in Forth as either
002985r 3                       ; CREATE 2 CELLS ALLOT  or just  CREATE 0 , 0 ,
002985r 3                       ; """
002985r 3               xt_two_variable:
002985r 3                               ; We just let CRATE and ALLOT do the heavy lifting
002985r 3  20 rr rr                     jsr xt_create
002988r 3               
002988r 3  CA                           dex
002989r 3  CA                           dex
00298Ar 3  A9 04                        lda #4
00298Cr 3  95 00                        sta 0,x
00298Er 3  74 01                        stz 1,x
002990r 3               
002990r 3  20 rr rr                     jsr xt_allot
002993r 3               
002993r 3  60           z_two_variable: rts
002994r 3               
002994r 3               
002994r 3               ; ## TYPE ( addr u -- ) "Print string"
002994r 3               ; ## "type"  auto  ANS core
002994r 3                       ; """https://forth-standard.org/standard/core/TYPE
002994r 3                       ; Works through EMIT to allow OUTPUT revectoring.
002994r 3                       ; """
002994r 3               
002994r 3               xt_type:
002994r 3  20 rr rr                     jsr underflow_2
002997r 3               
002997r 3                               ; Save the starting address into tmp1
002997r 3  B5 02                        lda 2,x
002999r 3  85 rr                        sta tmp1
00299Br 3  B5 03                        lda 3,x
00299Dr 3  85 rr                        sta tmp1+1
00299Fr 3               @loop:
00299Fr 3                               ; done if length is zero
00299Fr 3  B5 00                        lda 0,x
0029A1r 3  15 01                        ora 1,x
0029A3r 3  F0 15                        beq @done
0029A5r 3               
0029A5r 3                               ; Send the current character
0029A5r 3  B2 rr                        lda (tmp1)
0029A7r 3  20 rr rr                     jsr emit_a      ; avoids stack foolery
0029AAr 3               
0029AAr 3                               ; Move the address along (in tmp1)
0029AAr 3  E6 rr                        inc tmp1
0029ACr 3  D0 02                        bne @1
0029AEr 3  E6 rr                        inc tmp1+1
0029B0r 3               @1:
0029B0r 3                               ; Reduce the count (on the data stack)
0029B0r 3  B5 00                        lda 0,x
0029B2r 3  D0 02                        bne @2
0029B4r 3  D6 01                        dec 1,x
0029B6r 3               @2:
0029B6r 3  D6 00                        dec 0,x
0029B8r 3               
0029B8r 3  80 E5                        bra @loop
0029BAr 3               @done:
0029BAr 3  E8                           inx
0029BBr 3  E8                           inx
0029BCr 3  E8                           inx
0029BDr 3  E8                           inx
0029BEr 3               
0029BEr 3  60           z_type:         rts
0029BFr 3               
0029BFr 3               
0029BFr 3               
0029BFr 3               ; ## U_DOT ( u -- ) "Print TOS as unsigned number"
0029BFr 3               ; ## "u."  tested  ANS core
0029BFr 3                       ; """https://forth-standard.org/standard/core/Ud
0029BFr 3                       ;
0029BFr 3                       ; This is : U. 0 <# #S #> TYPE SPACE ; in Forth
0029BFr 3                       ; We use the internal assembler function print_u followed
0029BFr 3                       ; by a single space
0029BFr 3                       ; """
0029BFr 3               xt_u_dot:
0029BFr 3  20 rr rr                     jsr underflow_1
0029C2r 3               
0029C2r 3  20 rr rr                     jsr print_u
0029C5r 3  A9 20                        lda #AscSP
0029C7r 3  20 rr rr                     jsr emit_a
0029CAr 3               
0029CAr 3  60           z_u_dot:        rts
0029CBr 3               
0029CBr 3               
0029CBr 3               ; ## U_DOT_R ( u u -- ) "Print NOS as unsigned number right-justified with TOS width"
0029CBr 3               ; ## "u.r"  tested  ANS core ext
0029CBr 3                       ; """https://forth-standard.org/standard/core/UDotR"""
0029CBr 3               xt_u_dot_r:
0029CBr 3  20 rr rr                     jsr underflow_2
0029CEr 3               
0029CEr 3  20 rr rr                     jsr xt_to_r
0029D1r 3  20 rr rr                     jsr xt_zero
0029D4r 3  20 rr rr                     jsr xt_less_number_sign
0029D7r 3  20 rr rr                     jsr xt_number_sign_s
0029DAr 3  20 rr rr                     jsr xt_number_sign_greater
0029DDr 3  20 rr rr                     jsr xt_r_from
0029E0r 3  20 rr rr                     jsr xt_over
0029E3r 3  20 rr rr                     jsr xt_minus
0029E6r 3  20 rr rr                     jsr xt_spaces
0029E9r 3  20 rr rr                     jsr xt_type
0029ECr 3               
0029ECr 3  60           z_u_dot_r:      rts
0029EDr 3               
0029EDr 3               
0029EDr 3               ; ## U_GREATER_THAN ( n m -- f ) "Return true if NOS > TOS (unsigned)"
0029EDr 3               ; ## "u>"  auto  ANS core ext
0029EDr 3                       ; """https://forth-standard.org/standard/core/Umore"""
0029EDr 3               xt_u_greater_than:
0029EDr 3  20 rr rr                     jsr underflow_2
0029F0r 3               
0029F0r 3  B5 00                        lda 0,x
0029F2r 3  D5 02                        cmp 2,x
0029F4r 3  B5 01                        lda 1,x
0029F6r 3  F5 03                        sbc 3,x
0029F8r 3  E8                           inx
0029F9r 3  E8                           inx
0029FAr 3               
0029FAr 3  A9 00                        lda #0
0029FCr 3  69 FF                        adc #$ff
0029FEr 3  95 00                        sta 0,x         ; store flag
002A00r 3  95 01                        sta 1,x
002A02r 3               
002A02r 3  60           z_u_greater_than:    rts
002A03r 3               
002A03r 3               ; ## U_LESS_THAN ( n m -- f ) "Return true if NOS < TOS (unsigned)"
002A03r 3               ; ## "u<"  auto  ANS core
002A03r 3                       ; """https://forth-standard.org/standard/core/Uless"""
002A03r 3               xt_u_less_than:
002A03r 3  20 rr rr                     jsr underflow_2
002A06r 3               
002A06r 3  B5 02                        lda 2,x
002A08r 3  D5 00                        cmp 0,x
002A0Ar 3  B5 03                        lda 3,x
002A0Cr 3  F5 01                        sbc 1,x
002A0Er 3  E8                           inx
002A0Fr 3  E8                           inx
002A10r 3               
002A10r 3  A9 00                        lda #0
002A12r 3  69 FF                        adc #$ff
002A14r 3  95 00                        sta 0,x         ; store flag
002A16r 3  95 01                        sta 1,x
002A18r 3               
002A18r 3  60           z_u_less_than:    rts
002A19r 3               
002A19r 3               
002A19r 3               ; ## UD_DOT ( d -- ) "Print double as unsigned"
002A19r 3               ; ## "ud."  auto  Tali double
002A19r 3                       ;
002A19r 3                       ; """Based on the Forth code  : UD. <# #S #> TYPE SPACE ;
002A19r 3                       ; """
002A19r 3               xt_ud_dot:
002A19r 3  20 rr rr                     jsr underflow_2 ; double number
002A1Cr 3               
002A1Cr 3  20 rr rr                     jsr xt_less_number_sign
002A1Fr 3  20 rr rr                     jsr xt_number_sign_s
002A22r 3  20 rr rr                     jsr xt_number_sign_greater
002A25r 3  20 rr rr                     jsr xt_type
002A28r 3  20 rr rr                     jsr xt_space
002A2Br 3               
002A2Br 3  60           z_ud_dot:        rts
002A2Cr 3               
002A2Cr 3               
002A2Cr 3               ; ## UD_DOT_R ( d u -- ) "Print unsigned double right-justified u wide"
002A2Cr 3               ; ## "ud.r"  auto  Tali double
002A2Cr 3                       ;
002A2Cr 3                       ; """Based on the Forth code : UD.R  >R <# #S #> R> OVER - SPACES TYPE ;
002A2Cr 3                       ; """
002A2Cr 3               xt_ud_dot_r:
002A2Cr 3  20 rr rr                     jsr underflow_3
002A2Fr 3               
002A2Fr 3  20 rr rr                     jsr xt_to_r
002A32r 3  20 rr rr                     jsr xt_less_number_sign
002A35r 3  20 rr rr                     jsr xt_number_sign_s
002A38r 3  20 rr rr                     jsr xt_number_sign_greater
002A3Br 3  20 rr rr                     jsr xt_r_from
002A3Er 3  20 rr rr                     jsr xt_over
002A41r 3  20 rr rr                     jsr xt_minus
002A44r 3  20 rr rr                     jsr xt_spaces
002A47r 3  20 rr rr                     jsr xt_type
002A4Ar 3               
002A4Ar 3  60           z_ud_dot_r:      rts
002A4Br 3               
002A4Br 3               
002A4Br 3               ; ## UM_SLASH_MOD ( ud u -- ur u ) "32/16 -> 16 division"
002A4Br 3               ; ## "um/mod"  auto  ANS core
002A4Br 3                       ; """https://forth-standard.org/standard/core/UMDivMOD
002A4Br 3                       ; Divide double cell number by single cell number, returning the
002A4Br 3                       ; quotient as TOS and any remainder as NOS. All numbers are unsigned.
002A4Br 3                       ; This is the basic division operation all others use. Based on FIG
002A4Br 3                       ; Forth code, modified by Garth Wilson, see
002A4Br 3                       ; http://6502.org/source/integers/ummodfix/ummodfix.htm
002A4Br 3                       ;
002A4Br 3                       ; This uses tmp1, tmp1+1, and tmptos
002A4Br 3                       ; """
002A4Br 3               
002A4Br 3               xt_um_slash_mod:
002A4Br 3  20 rr rr                     jsr underflow_3
002A4Er 3               
002A4Er 3                               ; catch division by zero
002A4Er 3  B5 00                        lda 0,x
002A50r 3  15 01                        ora 1,x
002A52r 3  D0 05                        bne @not_zero
002A54r 3               
002A54r 3  A9 04                        lda #err_divzero
002A56r 3  4C rr rr                     jmp error
002A59r 3               
002A59r 3               @not_zero:
002A59r 3                               ; We loop 17 times
002A59r 3  A9 11                        lda #17
002A5Br 3  85 rr                        sta tmptos
002A5Dr 3               
002A5Dr 3               @loop:
002A5Dr 3                               ; rotate low cell of dividend one bit left (LSB)
002A5Dr 3  36 04                        rol 4,x
002A5Fr 3  36 05                        rol 5,x
002A61r 3               
002A61r 3                               ; loop control
002A61r 3  C6 rr                        dec tmptos
002A63r 3  F0 22                        beq @done
002A65r 3               
002A65r 3                               ; rotate high cell of dividend one bit left (MSB)
002A65r 3  36 02                        rol 2,x
002A67r 3  36 03                        rol 3,x
002A69r 3               
002A69r 3  64 rr                        stz tmp1        ; store the bit we got from hi cell (MSB)
002A6Br 3  26 rr                        rol tmp1
002A6Dr 3               
002A6Dr 3                               ; subtract dividend hi cell minus divisor
002A6Dr 3  38                           sec
002A6Er 3  B5 02                        lda 2,x
002A70r 3  F5 00                        sbc 0,x
002A72r 3  85 rr                        sta tmp1+1
002A74r 3  B5 03                        lda 3,x
002A76r 3  F5 01                        sbc 1,x
002A78r 3               
002A78r 3  A8                           tay
002A79r 3  A5 rr                        lda tmp1
002A7Br 3  E9 00                        sbc #0
002A7Dr 3  90 DE                        bcc @loop
002A7Fr 3               
002A7Fr 3                               ; make result new dividend high cell
002A7Fr 3  A5 rr                        lda tmp1+1
002A81r 3  95 02                        sta 2,x
002A83r 3  94 03                        sty 3,x         ; used as temp storage
002A85r 3               
002A85r 3  80 D6                        bra @loop
002A87r 3               @done:
002A87r 3  E8                           inx
002A88r 3  E8                           inx
002A89r 3               
002A89r 3  20 rr rr                     jsr xt_swap
002A8Cr 3               
002A8Cr 3  60           z_um_slash_mod: rts
002A8Dr 3               
002A8Dr 3               
002A8Dr 3               
002A8Dr 3               ; ## UM_STAR ( u u -- ud ) "Multiply 16 x 16 -> 32"
002A8Dr 3               ; ## "um*"  auto  ANS core
002A8Dr 3                       ; """https://forth-standard.org/standard/core/UMTimes
002A8Dr 3                       ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.
002A8Dr 3                       ; Old Forth versions such as FIG Forth call this U*
002A8Dr 3                       ;
002A8Dr 3                       ; This is based on modified FIG Forth code by Dr. Jefyll, see
002A8Dr 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed
002A8Dr 3                       ; discussion.
002A8Dr 3                       ;
002A8Dr 3                       ; We don't use the system scratch pad (SYSPAD) for temp
002A8Dr 3                       ; storage because >NUMBER uses it as well, but instead tmp1 to
002A8Dr 3                       ; tmp3 (tmp1 is N in the original code, tmp1+1 is N+1, etc).
002A8Dr 3                       ;
002A8Dr 3                       ; Consider switching to a table-supported version based on
002A8Dr 3                       ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
002A8Dr 3                       ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d>
002A8Dr 3                       ; http://forum.6502.org/viewtopic.php?p=205#p205
002A8Dr 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689
002A8Dr 3                       ; """
002A8Dr 3               
002A8Dr 3               xt_um_star:
002A8Dr 3  20 rr rr                     jsr underflow_2
002A90r 3               
002A90r 3                               ; to eliminate clc inside the loop, the value at
002A90r 3                               ; tmp1 is reduced by 1 in advance
002A90r 3  18                           clc
002A91r 3  B5 00                        lda 0,x         ; copy TOS to tmp2
002A93r 3  E9 00                        sbc #0
002A95r 3  85 rr                        sta tmp2
002A97r 3               
002A97r 3  B5 01                        lda 1,x
002A99r 3  E9 00                        sbc #0
002A9Br 3  90 31                        bcc @zero       ; is TOS zero?
002A9Dr 3  85 rr                        sta tmp2+1
002A9Fr 3               
002A9Fr 3  A9 00                        lda #0
002AA1r 3  85 rr                        sta tmp1
002AA3r 3  86 rr                        stx tmp3        ; tested for exit from outer loop
002AA5r 3  CA                           dex
002AA6r 3  CA                           dex
002AA7r 3               
002AA7r 3               @outer_loop:
002AA7r 3  A0 08                        ldy #8          ; counter inner loop
002AA9r 3  56 04                        lsr 4,x         ; think "2,x" then later "3,x"
002AABr 3               
002AABr 3               @inner_loop:
002AABr 3  90 0C                        bcc @no_add
002AADr 3  85 rr                        sta tmp1+1      ; save time, don't CLC
002AAFr 3  A5 rr                        lda tmp1
002AB1r 3  65 rr                        adc tmp2
002AB3r 3  85 rr                        sta tmp1
002AB5r 3  A5 rr                        lda tmp1+1
002AB7r 3  65 rr                        adc tmp2+1
002AB9r 3               
002AB9r 3               @no_add:
002AB9r 3  6A                           ror
002ABAr 3  66 rr                        ror tmp1
002ABCr 3  76 04                        ror 4,x         ; think "2,x" then later "3,x"
002ABEr 3               
002ABEr 3  88                           dey
002ABFr 3  D0 EA                        bne @inner_loop ; go back for one more shift?
002AC1r 3               
002AC1r 3  E8                           inx
002AC2r 3  E4 rr                        cpx tmp3
002AC4r 3  D0 E1                        bne @outer_loop ; go back for eight more shifts?
002AC6r 3               
002AC6r 3                               ; all done, store high word of result
002AC6r 3  95 01                        sta 1,x
002AC8r 3  A5 rr                        lda tmp1
002ACAr 3  95 00                        sta 0,x
002ACCr 3  80 04                        bra @done
002ACEr 3               
002ACEr 3               @zero:
002ACEr 3  74 02                        stz 2,x
002AD0r 3  74 03                        stz 3,x
002AD2r 3               @done:
002AD2r 3  60           z_um_star:      rts
002AD3r 3               
002AD3r 3               
002AD3r 3               
002AD3r 3               ; ## UNLOOP ( -- )(R: n1 n2 n3 ---) "Drop loop control from Return stack"
002AD3r 3               ; ## "unloop"  auto  ANS core
002AD3r 3                       ; """https://forth-standard.org/standard/core/UNLOOP
002AD3r 3                       ;
002AD3r 3                       ; Note that 6xPLA uses just as many bytes as a loop would
002AD3r 3                       ; """
002AD3r 3               xt_unloop:
002AD3r 3                               ; Drop fudge number (limit/start from DO/?DO off the
002AD3r 3                               ; return stack
002AD3r 3  68                           pla
002AD4r 3  68                           pla
002AD5r 3  68                           pla
002AD6r 3  68                           pla
002AD7r 3               
002AD7r 3                               ; Now drop the LEAVE address that was below them off
002AD7r 3                               ; the Return Stack as well
002AD7r 3  68                           pla
002AD8r 3  68                           pla
002AD9r 3               
002AD9r 3  60           z_unloop:       rts
002ADAr 3               
002ADAr 3               
002ADAr 3               ; ## UNTIL (C: dest -- ) ( -- ) "Loop flow control"
002ADAr 3               ; ## "until"  auto  ANS core
002ADAr 3                       ; """http://forth-standard.org/standard/core/UNTIL"""
002ADAr 3               xt_until:
002ADAr 3                               ; Compile a 0BRANCH
002ADAr 3  A0 rr                        ldy #>zero_branch_runtime
002ADCr 3  A9 rr                        lda #<zero_branch_runtime
002ADEr 3  20 rr rr                     jsr cmpl_subroutine
002AE1r 3               
002AE1r 3                               ; The address to loop back to is on the stack.
002AE1r 3                               ; Just compile it as the destination for the
002AE1r 3                               ; 0branch.
002AE1r 3  20 rr rr                     jsr xt_comma
002AE4r 3               
002AE4r 3  60           z_until:        rts
002AE5r 3               
002AE5r 3               
002AE5r 3               ; ## UNUSED ( -- u ) "Return size of space available to Dictionary"
002AE5r 3               ; ## "unused"  auto  ANS core ext
002AE5r 3                       ; """https://forth-standard.org/standard/core/UNUSED
002AE5r 3                       ; UNUSED does not include the ACCEPT history buffers. Total RAM
002AE5r 3                       ; should be HERE + UNUSED + <history buffer size>, the last of which
002AE5r 3                       ; defaults to $400
002AE5r 3                       ; """
002AE5r 3               xt_unused:
002AE5r 3  CA                           dex
002AE6r 3  CA                           dex
002AE7r 3               
002AE7r 3  A9 FF                        lda #<cp_end
002AE9r 3  38                           sec
002AEAr 3  E5 rr                        sbc cp
002AECr 3  95 00                        sta 0,x
002AEEr 3               
002AEEr 3  A9 7F                        lda #>cp_end
002AF0r 3  E5 rr                        sbc cp+1
002AF2r 3  95 01                        sta 1,x
002AF4r 3               
002AF4r 3  60           z_unused:       rts
002AF5r 3               
002AF5r 3               
002AF5r 3               ; ## UPDATE ( -- ) "Mark current block as dirty"
002AF5r 3               ; ## "update"  auto  ANS block
002AF5r 3                       ; """https://forth-standard.org/standard/block/UPDATE"""
002AF5r 3               xt_update:
002AF5r 3                               ; Turn on the dirty bit. We can't use TSB here because it only
002AF5r 3                               ; has Absolute and Direct Pages addressing modes
002AF5r 3  A0 2C                        ldy #buffstatus_offset
002AF7r 3  B1 rr                        lda (up),y
002AF9r 3  09 02                        ora #2          ; Turn on dirty flag (bit 2)
002AFBr 3  91 rr                        sta (up),y
002AFDr 3               
002AFDr 3  60           z_update:       rts
002AFEr 3               
002AFEr 3               
002AFEr 3               ; ## USERADDR ( -- addr ) "Push address of base address of user variables"
002AFEr 3               ; ## "useraddr"  tested  Tali Forth
002AFEr 3               xt_useraddr:
002AFEr 3  CA                           dex
002AFFr 3  CA                           dex
002B00r 3  A9 rr                        lda #<up
002B02r 3  95 00                        sta 0,x
002B04r 3  A9 rr                        lda #>up
002B06r 3  95 01                        sta 1,x
002B08r 3               
002B08r 3  60           z_useraddr:     rts
002B09r 3               
002B09r 3               
002B09r 3               ; ## VALUE ( n "name" -- ) "Define a value"
002B09r 3               ; ## "value"  auto  ANS core
002B09r 3                       ; """https://forth-standard.org/standard/core/VALUE
002B09r 3                       ;
002B09r 3                       ; This is a dummy header for the WORDLIST. The actual code is
002B09r 3                       ; identical to that of CONSTANT
002B09r 3                       ; """
002B09r 3               
002B09r 3               
002B09r 3               ; ## VARIABLE ( "name" -- ) "Define a variable"
002B09r 3               ; ## "variable"  auto  ANS core
002B09r 3                       ; """https://forth-standard.org/standard/core/VARIABLE
002B09r 3                       ; There are various Forth definitions for this word, such as
002B09r 3                       ; `CREATE 1 CELLS ALLOT`  or  `CREATE 0 ,`  We use a variant of the
002B09r 3                       ; second one so the variable is initialized to zero
002B09r 3                       ; """
002B09r 3               xt_variable:
002B09r 3                               ; we let CREATE do the heavy lifting
002B09r 3  20 rr rr                     jsr xt_create
002B0Cr 3               
002B0Cr 3                               ; there is no "STZ (CP)" so we have to do this the hard
002B0Cr 3                               ; way
002B0Cr 3  A9 00                        lda #0
002B0Er 3               
002B0Er 3  92 rr                        sta (cp)
002B10r 3  E6 rr                        inc cp
002B12r 3  D0 02                        bne @1
002B14r 3  E6 rr                        inc cp+1
002B16r 3               @1:
002B16r 3  92 rr                        sta (cp)
002B18r 3  E6 rr                        inc cp
002B1Ar 3  D0 02                        bne @2
002B1Cr 3  E6 rr                        inc cp+1
002B1Er 3               @2:
002B1Er 3                               ; Now we need to adjust the length of the complete word by two
002B1Er 3  20 rr rr                     jsr adjust_z
002B21r 3               
002B21r 3  60           z_variable:     rts
002B22r 3               
002B22r 3               
002B22r 3               ; ## WHILE ( C: dest -- orig dest ) ( x -- ) "Loop flow control"
002B22r 3               ; ## "while"  auto  ANS core
002B22r 3                       ; """http://forth-standard.org/standard/core/WHILE"""
002B22r 3               xt_while:
002B22r 3                               ; Compile a 0branch
002B22r 3  A0 rr                        ldy #>zero_branch_runtime
002B24r 3  A9 rr                        lda #<zero_branch_runtime
002B26r 3  20 rr rr                     jsr cmpl_subroutine
002B29r 3               
002B29r 3                               ; Put the address (here) where the destination
002B29r 3                               ; address needs to go so it can be put there later.
002B29r 3  20 rr rr                     jsr xt_here
002B2Cr 3               
002B2Cr 3                               ; Fill in the destination address with 0 for now.
002B2Cr 3  20 rr rr                     jsr xt_zero
002B2Fr 3  20 rr rr                     jsr xt_comma
002B32r 3               
002B32r 3                               ; Swap the two addresses on the stack.
002B32r 3  20 rr rr                     jsr xt_swap
002B35r 3               
002B35r 3  60           z_while:        rts
002B36r 3               
002B36r 3               
002B36r 3               ; ## WITHIN ( n1 n2 n3 -- ) "See if within a range"
002B36r 3               ; ## "within"  auto  ANS core ext
002B36r 3                       ; """https://forth-standard.org/standard/core/WITHIN
002B36r 3                       ;
002B36r 3                       ; This an assembler version of the ANS Forth implementation
002B36r 3                       ; at https://forth-standard.org/standard/core/WITHIN which is
002B36r 3                       ; OVER - >R - R> U<  note there is an alternative high-level version
002B36r 3                       ; ROT TUCK > -ROT > INVERT AND
002B36r 3                       ; """"
002B36r 3               xt_within:
002B36r 3  20 rr rr                     jsr underflow_3
002B39r 3               
002B39r 3  20 rr rr                     jsr xt_over
002B3Cr 3  20 rr rr                     jsr xt_minus
002B3Fr 3  20 rr rr                     jsr xt_to_r
002B42r 3  20 rr rr                     jsr xt_minus
002B45r 3  20 rr rr                     jsr xt_r_from
002B48r 3  20 rr rr                     jsr xt_u_less_than
002B4Br 3               
002B4Br 3  60           z_within:       rts
002B4Cr 3               
002B4Cr 3               
002B4Cr 3               ; ## WORD ( char "name " -- caddr ) "Parse input stream"
002B4Cr 3               ; ## "word"  auto  ANS core
002B4Cr 3                       ; """https://forth-standard.org/standard/core/WORD
002B4Cr 3                       ; Obsolete parsing word included for backwards compatibility only.
002B4Cr 3                       ; Do not use this, use `PARSE` or `PARSE-NAME`. Skips leading delimiters
002B4Cr 3                       ; and copies word to storage area for a maximum size of 255 bytes.
002B4Cr 3                       ; Returns the result as a counted string (requires COUNT to convert
002B4Cr 3                       ; to modern format), and inserts a space after the string. See "Forth
002B4Cr 3                       ; Programmer's Handbook" 3rd edition p. 159 and
002B4Cr 3                       ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
002B4Cr 3                       ; for discussions of why you shouldn't be using WORD anymore.
002B4Cr 3                       ;
002B4Cr 3                       ; Forth
002B4Cr 3                       ; would be   PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
002B4Cr 3                       ; We only allow input of 255 chars. Seriously, use PARSE-NAME.
002B4Cr 3                       ; """
002B4Cr 3               
002B4Cr 3               xt_word:
002B4Cr 3  20 rr rr                     jsr underflow_1
002B4Fr 3               
002B4Fr 3                               ; Skip over leading delimiters - this is like PARSE-NAME,
002B4Fr 3                               ; but unlike PARSE
002B4Fr 3  A4 rr                        ldy toin                ; >IN
002B51r 3               @loop:
002B51r 3  C4 rr                        cpy ciblen              ; quit if end of input
002B53r 3  F0 09                        beq @found_char
002B55r 3  B1 rr                        lda (cib),y
002B57r 3  D5 00                        cmp 0,x                 ; ASCII of delimiter
002B59r 3  D0 03                        bne @found_char
002B5Br 3               
002B5Br 3  C8                           iny
002B5Cr 3  80 F3                        bra @loop
002B5Er 3               @found_char:
002B5Er 3                               ; Save index of where word starts
002B5Er 3  84 rr                        sty toin
002B60r 3               
002B60r 3                               ; The real work is done by parse
002B60r 3  20 rr rr                     jsr xt_parse            ; Returns ( addr u )
002B63r 3               
002B63r 3                               ; Convert the modern ( addr u ) string format to obsolete
002B63r 3                               ; ( caddr ) format. We just do this in the Dictionary
002B63r 3  B5 00                        lda 0,x
002B65r 3  92 rr                        sta (cp)                ; Save length of string
002B67r 3  48                           pha                     ; Keep copy of length for later
002B68r 3               
002B68r 3  20 rr rr                     jsr xt_dup              ; ( addr u u )
002B6Br 3  A5 rr                        lda cp
002B6Dr 3  18                           clc
002B6Er 3  69 01                        adc #1
002B70r 3  95 02                        sta 2,x                 ; LSB of CP
002B72r 3  A5 rr                        lda cp+1
002B74r 3  69 00                        adc #0
002B76r 3  95 03                        sta 3,x                 ; ( addr cp+1 u )
002B78r 3               
002B78r 3  20 rr rr                     jsr xt_move
002B7Br 3               
002B7Br 3                               ; Return caddr
002B7Br 3  CA                           dex
002B7Cr 3  CA                           dex
002B7Dr 3  A5 rr                        lda cp
002B7Fr 3  95 00                        sta 0,x
002B81r 3  A5 rr                        lda cp+1
002B83r 3  95 01                        sta 1,x
002B85r 3               
002B85r 3                               ; Adjust CP
002B85r 3  68                           pla                     ; length of string
002B86r 3  18                           clc
002B87r 3  65 rr                        adc cp
002B89r 3  85 rr                        sta cp
002B8Br 3  A5 rr                        lda cp+1
002B8Dr 3  69 00                        adc #0                  ; we only need the carry
002B8Fr 3  85 rr                        sta cp+1
002B91r 3  60           z_word:         rts
002B92r 3               
002B92r 3               
002B92r 3               ; ## WORDLIST ( -- wid ) "Create new wordlist (from pool of 8)"
002B92r 3               ; ## "wordlist" auto ANS search
002B92r 3                       ; """https://forth-standard.org/standard/search/WORDLIST
002B92r 3                       ; See the tutorial on Wordlists and the Search Order for
002B92r 3                       ; more information.
002B92r 3                       ; """
002B92r 3               
002B92r 3               xt_wordlist:
002B92r 3                               ; Get the current number of wordlists
002B92r 3  A0 05                        ldy #num_wordlists_offset
002B94r 3  B1 rr                        lda (up),y      ; This is a byte variable, so only
002B96r 3                                               ; the LSB needs to be checked.
002B96r 3               
002B96r 3                               ; See if we are already at the max.
002B96r 3  C9 0C                        cmp #max_wordlists
002B98r 3  D0 05                        bne @ok
002B9Ar 3               
002B9Ar 3                               ; Print an error message if all wordlists used.
002B9Ar 3  A9 0B                        lda #err_wordlist
002B9Cr 3  4C rr rr                     jmp error
002B9Fr 3               
002B9Fr 3               @ok:
002B9Fr 3  1A                           inc             ; Increment the wordlist#
002BA0r 3  91 rr                        sta (up),y      ; Save it into byte variable #wordlists
002BA2r 3  CA                           dex             ; and put it on the stack.
002BA3r 3  CA                           dex
002BA4r 3  95 00                        sta 0,x
002BA6r 3  74 01                        stz 1,x         ; 12 is the max, so upper byte is always zero.
002BA8r 3               
002BA8r 3  60           z_wordlist:     rts
002BA9r 3               
002BA9r 3               
002BA9r 3               
002BA9r 3               ; ## WORDS ( -- ) "Print known words from Dictionary"
002BA9r 3               ; ## "words"  tested  ANS tools
002BA9r 3                       ; """https://forth-standard.org/standard/tools/WORDS
002BA9r 3                       ; This is pretty much only used at the command line so we can
002BA9r 3                       ; be slow and try to save space.
002BA9r 3                       ; """
002BA9r 3               
002BA9r 3               xt_words:
002BA9r 3                               ; we follow Gforth by starting on the next
002BA9r 3                               ; line
002BA9r 3  20 rr rr                     jsr xt_cr
002BACr 3               
002BACr 3                               ; We pretty-format the output by inserting a line break
002BACr 3                               ; before the end of the line. We can get away with pushing
002BACr 3                               ; the counter to the stack because this is usually an
002BACr 3                               ; interactive word and speed is not that important
002BACr 3  A9 00                        lda #0
002BAEr 3  48                           pha
002BAFr 3               
002BAFr 3                               ; Set up for traversing the wordlist search order.
002BAFr 3  CA                           dex                     ; Make room on the stack for
002BB0r 3  CA                           dex                     ; a dictionary pointer.
002BB1r 3  64 rr                        stz tmp3                ; Start at the beginning of
002BB3r 3                                                       ; the search order.
002BB3r 3               @wordlist_loop:
002BB3r 3  A0 1E                        ldy #num_order_offset   ; Check against byte variable #ORDER.
002BB5r 3  A5 rr                        lda tmp3
002BB7r 3  D1 rr                        cmp (up),y              ; See if we are done.
002BB9r 3  D0 02                        bne @have_wordlist
002BBBr 3               
002BBBr 3                               ; We ran out of wordlists to search.
002BBBr 3  80 44                        bra @words_done
002BBDr 3               
002BBDr 3               @have_wordlist:
002BBDr 3                               ; start with last word in Dictionary
002BBDr 3                               ; Get the current wordlist id
002BBDr 3  18                           clc                     ; Index into byte array SEARCH-ORDER.
002BBEr 3  69 1F                        adc #search_order_offset
002BC0r 3  A8                           tay
002BC1r 3  B1 rr                        lda (up),y              ; Get the index into array WORDLISTS
002BC3r 3               
002BC3r 3                               ; Get the DP for that wordlist.
002BC3r 3  0A                           asl                     ; Turn offset into cells offset.
002BC4r 3  18                           clc
002BC5r 3  69 06                        adc #wordlists_offset
002BC7r 3  A8                           tay
002BC8r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
002BCAr 3  95 00                        sta 0,x                 ; on the stack. ( nt )
002BCCr 3  C8                           iny
002BCDr 3  B1 rr                        lda (up),y
002BCFr 3  95 01                        sta 1,x
002BD1r 3               
002BD1r 3               @loop:
002BD1r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002BD4r 3  20 rr rr                     jsr xt_name_to_string   ; ( nt addr u )
002BD7r 3               
002BD7r 3                               ; Insert line break if we're about to go past the end of the
002BD7r 3                               ; line
002BD7r 3  68                           pla
002BD8r 3  18                           clc
002BD9r 3  75 00                        adc 0,x
002BDBr 3  1A                           inc                     ; don't forget the space between words
002BDCr 3  C9 4F                        cmp #MAX_LINE_LENGTH    ; usually 79
002BDEr 3  90 05                        bcc @1
002BE0r 3               
002BE0r 3  20 rr rr                     jsr xt_cr
002BE3r 3  A9 00                        lda #0
002BE5r 3               @1:
002BE5r 3  48                           pha
002BE6r 3  20 rr rr                     jsr xt_type             ; ( nt )
002BE9r 3               
002BE9r 3  A9 20                        lda #AscSP
002BEBr 3  20 rr rr                     jsr emit_a
002BEEr 3               
002BEEr 3                               ; get next word, which begins two down
002BEEr 3  20 rr rr                     jsr xt_one_plus         ; 1+
002BF1r 3  20 rr rr                     jsr xt_one_plus         ; 1+
002BF4r 3  20 rr rr                     jsr xt_fetch            ; @ ( nt+1 )
002BF7r 3               
002BF7r 3                               ; if next address is zero, we're done
002BF7r 3  B5 00                        lda 0,x
002BF9r 3  15 01                        ora 1,x
002BFBr 3  D0 D4                        bne @loop
002BFDr 3               
002BFDr 3                               ; Move on to the next wordlist in the search order.
002BFDr 3  E6 rr                        inc tmp3
002BFFr 3  80 B2                        bra @wordlist_loop
002C01r 3               
002C01r 3               @words_done:
002C01r 3  68                           pla                     ; dump counter
002C02r 3               
002C02r 3  E8                           inx
002C03r 3  E8                           inx
002C04r 3               
002C04r 3  60           z_words:        rts
002C05r 3               
002C05r 3               
002C05r 3               
002C05r 3               ; ## WORDSIZE ( nt -- u ) "Get size of word in bytes"
002C05r 3               ; ## "wordsize"  auto  Tali Forth
002C05r 3                       ; """Given an word's name token (nt), return the size of the
002C05r 3                       ; word's payload size in bytes (CFA plus PFA) in bytes. Does not
002C05r 3                       ; count the final RTS.
002C05r 3                       ; """
002C05r 3               xt_wordsize:
002C05r 3  20 rr rr                     jsr underflow_1
002C08r 3               
002C08r 3                               ; We get the start address of the word from its header entry
002C08r 3                               ; for the start of the actual code (execution token, xt)
002C08r 3                               ; which is four bytes down, and the pointer to the end of the
002C08r 3                               ; code (z_word, six bytes down)
002C08r 3  B5 00                        lda 0,x
002C0Ar 3  85 rr                        sta tmp1
002C0Cr 3  B5 01                        lda 1,x
002C0Er 3  85 rr                        sta tmp1+1
002C10r 3               
002C10r 3  A0 06                        ldy #6
002C12r 3  B1 rr                        lda (tmp1),y    ; LSB of z
002C14r 3  88                           dey
002C15r 3  88                           dey
002C16r 3               
002C16r 3  38                           sec
002C17r 3  F1 rr                        sbc (tmp1),y    ; LSB of xt
002C19r 3  95 00                        sta 0,x
002C1Br 3               
002C1Br 3  A0 07                        ldy #7
002C1Dr 3  B1 rr                        lda (tmp1),y    ; MSB of z
002C1Fr 3  88                           dey
002C20r 3  88                           dey
002C21r 3               
002C21r 3  F1 rr                        sbc (tmp1),y    ; MSB of xt
002C23r 3  95 01                        sta 1,x
002C25r 3               
002C25r 3  60           z_wordsize:     rts
002C26r 3               
002C26r 3               
002C26r 3               ; ## XOR ( n n -- n ) "Logically XOR TOS and NOS"
002C26r 3               ; ## "xor"  auto  ANS core
002C26r 3                       ; """https://forth-standard.org/standard/core/XOR"""
002C26r 3               xt_xor:
002C26r 3  20 rr rr                     jsr underflow_2
002C29r 3               
002C29r 3  B5 00                        lda 0,x
002C2Br 3  55 02                        eor 2,x
002C2Dr 3  95 02                        sta 2,x
002C2Fr 3               
002C2Fr 3  B5 01                        lda 1,x
002C31r 3  55 03                        eor 3,x
002C33r 3  95 03                        sta 3,x
002C35r 3               
002C35r 3  E8                           inx
002C36r 3  E8                           inx
002C37r 3               
002C37r 3  60           z_xor:          rts
002C38r 3               
002C38r 3               
002C38r 3               ; ## ZERO ( -- 0 ) "Push 0 to Data Stack"
002C38r 3               ; ## "0"  auto  Tali Forth
002C38r 3                       ; """The disassembler assumes that this routine does not use Y. Note
002C38r 3                       ; that CASE and FORTH-WORDLIST use the same routine, as the WD for Forth
002C38r 3                       ; is 0."""
002C38r 3               xt_case:
002C38r 3               xt_forth_wordlist:
002C38r 3               xt_zero:
002C38r 3  CA                           dex             ; push
002C39r 3  CA                           dex
002C3Ar 3  74 00                        stz 0,x
002C3Cr 3  74 01                        stz 1,x
002C3Er 3               z_case:
002C3Er 3               z_forth_wordlist:
002C3Er 3               z_zero:
002C3Er 3  60                           rts
002C3Fr 3               
002C3Fr 3               
002C3Fr 3               ; ## ZERO_EQUAL ( n -- f ) "Check if TOS is zero"
002C3Fr 3               ; ## "0="  auto  ANS core
002C3Fr 3                       ; """https://forth-standard.org/standard/core/ZeroEqual"""
002C3Fr 3               
002C3Fr 3               xt_zero_equal:
002C3Fr 3  20 rr rr                     jsr underflow_1
002C42r 3               
002C42r 3  B5 00                        lda 0,x
002C44r 3  15 01                        ora 1,x
002C46r 3  F0 04                        beq @zero
002C48r 3               
002C48r 3                               ; not a zero, so we need a FALSE flag (0)
002C48r 3  A9 00                        lda #0
002C4Ar 3  80 02                        bra @store
002C4Cr 3               @zero:
002C4Cr 3                               ; We have a zero, so we need a TRUE flag (-1)
002C4Cr 3  A9 FF                        lda #$ff
002C4Er 3               @store:
002C4Er 3  95 00                        sta 0,x
002C50r 3  95 01                        sta 1,x
002C52r 3               
002C52r 3  60           z_zero_equal:   rts
002C53r 3               
002C53r 3               
002C53r 3               
002C53r 3               ; ## ZERO_GREATER ( n -- f ) "Return a TRUE flag if TOS is positive"
002C53r 3               ; ## "0>"  auto  ANS core ext
002C53r 3                       ; """https://forth-standard.org/standard/core/Zeromore"""
002C53r 3               
002C53r 3               xt_zero_greater:
002C53r 3  20 rr rr                     jsr underflow_1
002C56r 3               
002C56r 3  A0 00                        ldy #0          ; Default is FALSE (TOS is negative)
002C58r 3               
002C58r 3  B5 01                        lda 1,x         ; MSB
002C5Ar 3  30 05                        bmi @done       ; TOS is negative, keep FLASE
002C5Cr 3  15 00                        ora 0,x
002C5Er 3  F0 01                        beq @done       ; TOS is zero, keep FALSE
002C60r 3               
002C60r 3  88                           dey             ; TOS is postive, make true
002C61r 3               @done:
002C61r 3  98                           tya
002C62r 3  95 00                        sta 0,x
002C64r 3  95 01                        sta 1,x
002C66r 3               
002C66r 3  60           z_zero_greater: rts
002C67r 3               
002C67r 3               
002C67r 3               
002C67r 3               ; ## ZERO_LESS ( n -- f ) "Return a TRUE flag if TOS negative"
002C67r 3               ; ## "0<"  auto  ANS core
002C67r 3                       ; """https://forth-standard.org/standard/core/Zeroless"""
002C67r 3               
002C67r 3               xt_zero_less:
002C67r 3  20 rr rr                     jsr underflow_1
002C6Ar 3               
002C6Ar 3  A0 00                        ldy #0          ; Default is FALSE (TOS positive)
002C6Cr 3               
002C6Cr 3  B5 01                        lda 1,x         ; MSB
002C6Er 3  10 01                        bpl @done       ; TOS is positive, so keep FALSE
002C70r 3               
002C70r 3  88                           dey             ; TOS is negative, make TRUE
002C71r 3               @done:
002C71r 3  98                           tya
002C72r 3  95 00                        sta 0,x
002C74r 3  95 01                        sta 1,x
002C76r 3               
002C76r 3  60           z_zero_less:    rts
002C77r 3               
002C77r 3               
002C77r 3               
002C77r 3               ; ## ZERO_UNEQUAL ( m -- f ) "Return TRUE flag if not zero"
002C77r 3               ; ## "0<>"  auto  ANS core ext
002C77r 3                       ; """https://forth-standard.org/standard/core/Zerone"""
002C77r 3               
002C77r 3               xt_zero_unequal:
002C77r 3  20 rr rr                     jsr underflow_1
002C7Ar 3               
002C7Ar 3  A0 00                        ldy #0          ; default false
002C7Cr 3               
002C7Cr 3  B5 00                        lda 0,x
002C7Er 3  15 01                        ora 1,x
002C80r 3  F0 01                        beq @got_zero
002C82r 3               
002C82r 3  88                           dey
002C83r 3               @got_zero:
002C83r 3  98                           tya
002C84r 3  95 00                        sta 0,x
002C86r 3  95 01                        sta 1,x
002C88r 3               
002C88r 3  60           z_zero_unequal: rts
002C89r 3               
002C89r 3               
002C89r 3               
002C89r 3               ; ==========================================================
002C89r 3               ; EDITOR words
002C89r 3               
002C89r 3               ; This routine is used by both enter-screen and erase-screen
002C89r 3               ; to get a buffer for the given screen number and set SCR to
002C89r 3               ; the given screen number.  This word is not in the dictionary.
002C89r 3               xt_editor_screen_helper:
002C89r 3  20 rr rr                     jsr xt_dup
002C8Cr 3  20 rr rr                     jsr xt_scr
002C8Fr 3  20 rr rr                     jsr xt_store
002C92r 3  20 rr rr                     jsr xt_buffer
002C95r 3               z_editor_screen_helper:
002C95r 3  60                           rts
002C96r 3               
002C96r 3               
002C96r 3               ; ## EDITOR_ENTER_SCREEN ( scr# -- ) "Enter all lines for given screen"
002C96r 3               ; ## "enter-screen"  auto  Tali Editor
002C96r 3               
002C96r 3               xt_editor_enter_screen:
002C96r 3                               ; Set the variable SCR and get a buffer for the
002C96r 3                               ; given screen number.
002C96r 3  20 rr rr                     jsr xt_editor_screen_helper
002C99r 3               
002C99r 3                               ; Drop the buffer address.
002C99r 3  20 rr rr                     jsr xt_drop
002C9Cr 3               
002C9Cr 3                               ; Overwrite the lines one at a time.
002C9Cr 3  64 rr                        stz editor1
002C9Er 3               @prompt_loop:
002C9Er 3                               ; Put the current line number on the stack.
002C9Er 3  CA                           dex
002C9Fr 3  CA                           dex
002CA0r 3  A5 rr                        lda editor1
002CA2r 3  95 00                        sta 0,x
002CA4r 3  74 01                        stz 1,x
002CA6r 3               
002CA6r 3                               ; Use the O word to prompt for overwrite.
002CA6r 3  20 rr rr                     jsr xt_editor_o
002CA9r 3               
002CA9r 3                               ; Move on to the next line.
002CA9r 3  E6 rr                        inc editor1
002CABr 3  A9 10                        lda #16
002CADr 3  C5 rr                        cmp editor1
002CAFr 3  D0 ED                        bne @prompt_loop
002CB1r 3               
002CB1r 3               z_editor_enter_screen:
002CB1r 3  60                           rts
002CB2r 3               
002CB2r 3               
002CB2r 3               
002CB2r 3               ; ## EDITOR_ERASE_SCREEN ( scr# -- ) "Erase all lines for given screen"
002CB2r 3               ; ## "erase-screen"  tested  Tali Editor
002CB2r 3               xt_editor_erase_screen:
002CB2r 3                               ; Set the variable SCR and get a buffer for the
002CB2r 3                               ; given screen number.
002CB2r 3  20 rr rr                     jsr xt_editor_screen_helper
002CB5r 3               
002CB5r 3                               ; Put 1024 (chars/screen) on stack.
002CB5r 3  CA                           dex
002CB6r 3  CA                           dex
002CB7r 3  74 00                        stz 0,x
002CB9r 3  A9 04                        lda #4          ; 4 in MSB makes 1024 ($400).
002CBBr 3  95 01                        sta 1,x
002CBDr 3               
002CBDr 3                               ; Erase the entire block (fill with spaces).
002CBDr 3  20 rr rr                     jsr xt_blank
002CC0r 3               
002CC0r 3                               ; Mark buffer as updated.
002CC0r 3  20 rr rr                     jsr xt_update
002CC3r 3               
002CC3r 3               z_editor_erase_screen:
002CC3r 3  60                           rts
002CC4r 3               
002CC4r 3               
002CC4r 3               ; ## EDITOR_EL ( line# -- ) "Erase the given line number"
002CC4r 3               ; ## "el"  tested  Tali Editor
002CC4r 3               xt_editor_el:
002CC4r 3                               ; Turn the line number into buffer offset.
002CC4r 3                               ; This also loads the block into the buffer if it's
002CC4r 3                               ; not there for some reason.
002CC4r 3  20 rr rr                     jsr xt_editor_line
002CC7r 3               
002CC7r 3                               ; Put 64 (# of chars/line) on the stack.
002CC7r 3  CA                           dex
002CC8r 3  CA                           dex
002CC9r 3  A9 40                        lda #64
002CCBr 3  95 00                        sta 0,x
002CCDr 3  74 01                        stz 1,x
002CCFr 3               
002CCFr 3                               ; Fill with spaces.
002CCFr 3  20 rr rr                     jsr xt_blank
002CD2r 3               
002CD2r 3                               ; Mark buffer as updated.
002CD2r 3  20 rr rr                     jsr xt_update
002CD5r 3               
002CD5r 3  60           z_editor_el:    rts
002CD6r 3               
002CD6r 3               
002CD6r 3               ; ## EDITOR_L ( -- ) "List the current screen"
002CD6r 3               ; ## "l"  tested  Tali Editor
002CD6r 3               
002CD6r 3               xt_editor_l:
002CD6r 3                               ; Load the current screen
002CD6r 3  CA                           dex             ; Put SCR on the stack.
002CD7r 3  CA                           dex
002CD8r 3  A0 02                        ldy #scr_offset
002CDAr 3  B1 rr                        lda (up),y
002CDCr 3  95 00                        sta 0,x
002CDEr 3  C8                           iny
002CDFr 3  B1 rr                        lda (up),y
002CE1r 3  95 01                        sta 1,x
002CE3r 3  20 rr rr                     jsr xt_block    ; Get the current screen.
002CE6r 3               
002CE6r 3  20 rr rr                     jsr xt_cr
002CE9r 3               
002CE9r 3                               ; Print the screen number.
002CE9r 3                               ; We're using sliteral, so we need to set up the
002CE9r 3                               ; appropriate data structure (see sliteral)
002CE9r 3  80 08                        bra @after_screen_msg
002CEBr 3               
002CEBr 3               @screen_msg:
002CEBr 3  53 63 72 65                  .byte "Screen #"
002CEFr 3  65 6E 20 23  
002CF3r 3               
002CF3r 3               @after_screen_msg:
002CF3r 3  20 rr rr                     jsr sliteral_runtime
002CF6r 3  rr rr 08 00                  .word @screen_msg, @after_screen_msg-@screen_msg
002CFAr 3               
002CFAr 3  20 rr rr                     jsr xt_type
002CFDr 3               
002CFDr 3                               ; Put the screen number and printed size for u.r on the stack.
002CFDr 3  20 rr rr                     jsr xt_scr
002D00r 3  20 rr rr                     jsr xt_fetch
002D03r 3  CA                           dex
002D04r 3  CA                           dex
002D05r 3  A9 04                        lda #4          ; four spaces
002D07r 3  95 00                        sta 0,x
002D09r 3  74 01                        stz 1,x
002D0Br 3  20 rr rr                     jsr xt_u_dot_r
002D0Er 3               
002D0Er 3                               ; The address of the buffer is currently on the stack.
002D0Er 3                               ; Print 64 chars at a time. TYPE uses tmp1, so we'll
002D0Er 3                               ; keep track of the line number in tmp3.
002D0Er 3  64 rr                        stz tmp3
002D10r 3               
002D10r 3               @line_loop:
002D10r 3  20 rr rr                     jsr xt_cr
002D13r 3               
002D13r 3                               ; Print the line number (2-space fixed width)
002D13r 3  CA                           dex
002D14r 3  CA                           dex
002D15r 3  CA                           dex
002D16r 3  CA                           dex
002D17r 3  74 03                        stz 3,x
002D19r 3  A5 rr                        lda tmp3
002D1Br 3  95 02                        sta 2,x
002D1Dr 3  74 01                        stz 1,x
002D1Fr 3  A9 02                        lda #2
002D21r 3  95 00                        sta 0,x
002D23r 3  20 rr rr                     jsr xt_u_dot_r
002D26r 3  20 rr rr                     jsr xt_space
002D29r 3               
002D29r 3                               ; Print one line using the address on the stack.
002D29r 3  20 rr rr                     jsr xt_dup
002D2Cr 3  CA                           dex
002D2Dr 3  CA                           dex
002D2Er 3  A9 40                        lda #64
002D30r 3  95 00                        sta 0,x
002D32r 3  74 01                        stz 1,x
002D34r 3  20 rr rr                     jsr xt_type
002D37r 3               
002D37r 3                               ; Add 64 to the address on the stack to move to the next line.
002D37r 3  18                           clc
002D38r 3  A9 40                        lda #64
002D3Ar 3  75 00                        adc 0,x
002D3Cr 3  95 00                        sta 0,x
002D3Er 3  B5 01                        lda 1,x
002D40r 3  69 00                        adc #0      ; Add carry
002D42r 3  95 01                        sta 1,x
002D44r 3               
002D44r 3                               ; Increment the line number (held in tmp3)
002D44r 3  E6 rr                        inc tmp3
002D46r 3               
002D46r 3                               ; See if we are done.
002D46r 3  A5 rr                        lda tmp3
002D48r 3  C9 10                        cmp #16
002D4Ar 3  D0 C4                        bne @line_loop
002D4Cr 3               
002D4Cr 3  20 rr rr                     jsr xt_cr
002D4Fr 3                               ; Drop the address on the stack.
002D4Fr 3  E8                           inx
002D50r 3  E8                           inx
002D51r 3               
002D51r 3  60           z_editor_l:            rts
002D52r 3               
002D52r 3               
002D52r 3               
002D52r 3               ; ## EDITOR_LINE ( line# -- c-addr ) "Turn a line number into address in current screen"
002D52r 3               ; ## "line"  tested  Tali Editor
002D52r 3               
002D52r 3               xt_editor_line:
002D52r 3  20 rr rr                     jsr underflow_1
002D55r 3               
002D55r 3                               ; Multiply the TOS by 64 (chars/line) to compute offset.
002D55r 3  A0 06                        ldy #6          ; *64 is same as left shift 6 times.
002D57r 3               @shift_tos_left:
002D57r 3  16 00                        asl 0,x         ; Shift TOS to the left
002D59r 3  36 01                        rol 1,x         ; ROL brings MSb from lower byte.
002D5Br 3  88                           dey
002D5Cr 3  D0 F9                        bne @shift_tos_left
002D5Er 3                               ; Load the current screen into a buffer
002D5Er 3                               ; and get the buffer address
002D5Er 3  20 rr rr                     jsr xt_scr
002D61r 3  20 rr rr                     jsr xt_fetch
002D64r 3  20 rr rr                     jsr xt_block
002D67r 3               
002D67r 3                               ; Add the offset to the buffer base address.
002D67r 3  20 rr rr                     jsr xt_plus
002D6Ar 3               
002D6Ar 3  60           z_editor_line:  rts
002D6Br 3               
002D6Br 3               
002D6Br 3               
002D6Br 3               ; ## EDITOR_O ( line# -- ) "Overwrite the given line"
002D6Br 3               ; ## "o"  tested  Tali Editor
002D6Br 3               xt_editor_o:
002D6Br 3                               ; Print prompt
002D6Br 3  20 rr rr                     jsr xt_cr
002D6Er 3  20 rr rr                     jsr xt_dup
002D71r 3  20 rr rr                     jsr xt_two
002D74r 3  20 rr rr                     jsr xt_u_dot_r
002D77r 3  20 rr rr                     jsr xt_space
002D7Ar 3  A9 2A                        lda #42         ; ASCII for *
002D7Cr 3  20 rr rr                     jsr emit_a
002D7Fr 3  20 rr rr                     jsr xt_space
002D82r 3               
002D82r 3                               ; Accept new input (directly into the buffer)
002D82r 3  20 rr rr                     jsr xt_editor_line
002D85r 3  20 rr rr                     jsr xt_dup      ; Save a copy of the line address for later.
002D88r 3  CA                           dex
002D89r 3  CA                           dex
002D8Ar 3  A9 40                        lda #64         ; chars/line
002D8Cr 3  95 00                        sta 0,x
002D8Er 3  74 01                        stz 1,x
002D90r 3  20 rr rr                     jsr xt_accept
002D93r 3               
002D93r 3                               ; Fill the rest with spaces.
002D93r 3                               ; Stack is currently ( line_address numchars_from_accept )
002D93r 3  20 rr rr                     jsr xt_dup
002D96r 3  20 rr rr                     jsr xt_not_rote ; -rot
002D99r 3  20 rr rr                     jsr xt_plus
002D9Cr 3  CA                           dex
002D9Dr 3  CA                           dex
002D9Er 3  A9 40                        lda #64         ; chars/line
002DA0r 3  95 00                        sta 0,x
002DA2r 3  74 01                        stz 1,x
002DA4r 3  20 rr rr                     jsr xt_rot
002DA7r 3  20 rr rr                     jsr xt_minus
002DAAr 3  20 rr rr                     jsr xt_blank
002DADr 3               
002DADr 3                               ; Mark buffer as updated.
002DADr 3  20 rr rr                     jsr xt_update
002DB0r 3               
002DB0r 3  60           z_editor_o:     rts
002DB1r 3               
002DB1r 3               ; ## LCDPUT ( s -- ) "Print single character to LCD"
002DB1r 3               ; ## "lcdput" coded Custom
002DB1r 3               xt_lcdput:
002DB1r 3  20 rr rr                     jsr underflow_1
002DB4r 3               
002DB4r 3  B5 00                        lda 0,x
002DB6r 3                       .ifdef lcd_print
002DB6r 3  20 rr rr                     jsr lcd_print
002DB9r 3                       .endif
002DB9r 3  E8                           inx
002DBAr 3  E8                           inx
002DBBr 3  60           z_lcdput: rts
002DBCr 3               
002DBCr 3               
002DBCr 3               ; ## LCDPRINT ( addr u -- ) "Print string to LCD"
002DBCr 3               ; ## "lcdprint"  coded Custom
002DBCr 3               
002DBCr 3               xt_lcdprint:
002DBCr 3  20 rr rr                     jsr underflow_2
002DBFr 3               
002DBFr 3                               ; Save the starting address into tmp1
002DBFr 3  B5 02                        lda 2,x
002DC1r 3  85 rr                        sta tmp1
002DC3r 3  B5 03                        lda 3,x
002DC5r 3  85 rr                        sta tmp1+1
002DC7r 3               @loop:
002DC7r 3                               ; done if length is zero
002DC7r 3  B5 00                        lda 0,x
002DC9r 3  15 01                        ora 1,x
002DCBr 3  F0 15                        beq @done
002DCDr 3               
002DCDr 3                               ; Send the current character
002DCDr 3  B2 rr                        lda (tmp1)
002DCFr 3                       .ifdef lcd_print
002DCFr 3  20 rr rr                     jsr lcd_print      ; avoids stack foolery
002DD2r 3                       .endif
002DD2r 3                               ; Move the address along (in tmp1)
002DD2r 3  E6 rr                        inc tmp1
002DD4r 3  D0 02                        bne @1
002DD6r 3  E6 rr                        inc tmp1+1
002DD8r 3               @1:
002DD8r 3                               ; Reduce the count (on the data stack)
002DD8r 3  B5 00                        lda 0,x
002DDAr 3  D0 02                        bne @2
002DDCr 3  D6 01                        dec 1,x
002DDEr 3               @2:
002DDEr 3  D6 00                        dec 0,x
002DE0r 3               
002DE0r 3  80 E5                        bra @loop
002DE2r 3               @done:
002DE2r 3  E8                           inx
002DE3r 3  E8                           inx
002DE4r 3  E8                           inx
002DE5r 3  E8                           inx
002DE6r 3               
002DE6r 3  60           z_lcdprint:         rts
002DE7r 3               
002DE7r 3               
002DE7r 3               
002DE7r 3               ; ## CLS ( -- ) "clea VGA screen"
002DE7r 3               ; ## "cls" coded Custom
002DE7r 3               xt_cls:
002DE7r 3                       .ifdef vga_clear
002DE7r 3                               jsr vga_clear
002DE7r 3                       .endif
002DE7r 3               
002DE7r 3  60           z_cls: rts
002DE8r 3               
002DE8r 3               
002DE8r 3               ; ## SPI_INIT ( -- ) "Init SPI system"
002DE8r 3               ; ## "spi_init" coded Custom
002DE8r 3               xt_spi_init:
002DE8r 3                       .ifdef spi_init
002DE8r 3                               jsr spi_init
002DE8r 3                       .endif
002DE8r 3  60           z_spi_init: rts
002DE9r 3               
002DE9r 3               
002DE9r 3               ; ## SPI_CLK_TOGGLE ( -- ) "Toggle SPI clock"
002DE9r 3               ; ## "spi_clk_toggle" coded Custom
002DE9r 3               xt_spi_clk_toggle:
002DE9r 3                       .ifdef spi_clk_toggle
002DE9r 3                               jsr spi_clk_toggle
002DE9r 3                       .endif
002DE9r 3  60           z_spi_clk_toggle: rts
002DEAr 3               
002DEAr 3               ; ## SPI_SELECT ( s -- ) "Select SPI slave"
002DEAr 3               ; ## "spi_select" coded Custom
002DEAr 3               xt_spi_select:
002DEAr 3  20 rr rr                     jsr underflow_1
002DEDr 3               
002DEDr 3  B5 00                        lda 0,x
002DEFr 3                       .ifdef spi_select
002DEFr 3                               jsr spi_select
002DEFr 3                       .endif
002DEFr 3  E8                           inx
002DF0r 3  E8                           inx
002DF1r 3  60           z_spi_select: rts
002DF2r 3               
002DF2r 3               ; ## SPI_TRANSCEIVE ( s -- u ) "Send and receive spi data"
002DF2r 3               ; ## "spi_transceive" coded Custom
002DF2r 3               xt_spi_transceive:
002DF2r 3  20 rr rr                     jsr underflow_1
002DF5r 3               
002DF5r 3  B5 00                        lda 0,x
002DF7r 3                       .ifdef spi_transceive
002DF7r 3                               jsr spi_transceive
002DF7r 3                       .endif
002DF7r 3  95 00                        sta 0,x         ; put return value in TOS
002DF9r 3  74 01                        stz 1,X         ;reset value there
002DFBr 3  60           z_spi_transceive: rts
002DFCr 3               
002DFCr 3               ; ## SD_INIT ( s -- u ) "Send and receive spi data"
002DFCr 3               ; ## "spi_transceive" coded Custom
002DFCr 3               xt_sd_init:
002DFCr 3  20 rr rr                     jsr underflow_1
002DFFr 3               
002DFFr 3  B5 00                        lda 0,x
002E01r 3                       .ifdef sd_init
002E01r 3                               jsr sd_init
002E01r 3                       .endif
002E01r 3  95 00                        sta 0,x         ; put return value in TOS
002E03r 3  74 01                        stz 1,X         ;reset value there
002E05r 3  60           z_sd_init: rts
002E06r 3               
002E06r 3               ; ## SD_READSECTOR ( addr d -- u ) "Read SD sector"
002E06r 3               ; ## "sd_readsector" coded Custom
002E06r 3               xt_sd_readsector:
002E06r 3  20 rr rr                     jsr underflow_3
002E09r 3                       .ifdef sd_readsector
002E09r 3                               ; get and save storage address
002E09r 3                               lda 0,x
002E09r 3                               sta sd_buffer_address
002E09r 3                               lda 1, x
002E09r 3                               sta sd_buffer_address + 1
002E09r 3                               ; get and save sector number (32 bit number, double)
002E09r 3                               lda 2, X
002E09r 3                               sta SD_ARG + 3
002E09r 3                               lda 3, X
002E09r 3                               sta SD_ARG + 2
002E09r 3                               lda 4, X
002E09r 3                               sta SD_ARG + 1
002E09r 3                               lda 5, X
002E09r 3                               sta SD_ARG
002E09r 3                               lda #1
002E09r 3                               sta SD_CRC
002E09r 3               
002E09r 3                               jsr sd_readsector
002E09r 3                       .endif
002E09r 3  95 00                        sta 0,x         ; put return value in TOS
002E0Br 3  74 01                        stz 1,X         ;reset value there
002E0Dr 3               
002E0Dr 3  E8                           inx
002E0Er 3  E8                           inx
002E0Fr 3  E8                           inx
002E10r 3  E8                           inx
002E11r 3               
002E11r 3  60           z_sd_readsector: rts
002E12r 3               
002E12r 3               
002E12r 3               ; ## FAT32_INIT ( u -- u ) "initialize FAT32 file system on passed spi drive address"
002E12r 3               ; ## "fat32_init" coded Custom
002E12r 3               xt_fat32_init:
002E12r 3  20 rr rr                     jsr underflow_1
002E15r 3               
002E15r 3  B5 00                        lda 0,x
002E17r 3                       .ifdef sd_init
002E17r 3                               jsr sd_init
002E17r 3                               bne @error
002E17r 3                       .endif
002E17r 3                       .ifdef fat32_init
002E17r 3                               jsr fat32_init
002E17r 3                               beq @end
002E17r 3                       .endif
002E17r 3                       .ifdef fat32_openroot
002E17r 3                               ; jsr fat32_openroot
002E17r 3                               ; beq @end
002E17r 3                       .endif
002E17r 3               @error:
002E17r 3  A9 01                        lda #1
002E19r 3               @end:
002E19r 3  95 00                        sta 0,x         ; put return value in TOS
002E1Br 3  74 01                        stz 1,X         ;reset value there
002E1Dr 3  60           z_fat32_init: rts
002E1Er 3               
002E1Er 3               
002E1Er 3               ; ## FAT32_ROOT ( -- u ) "initialize FAT32 file system on passed spi drive address"
002E1Er 3               ; ## "fat32_root" coded Custom
002E1Er 3               xt_fat32_root:
002E1Er 3               
002E1Er 3  CA                   dex
002E1Fr 3  CA                   dex
002E20r 3                       .ifdef fat32_openroot
002E20r 3                               jsr fat32_openroot
002E20r 3                               beq @end
002E20r 3                       .endif
002E20r 3                       ; .ifdef fat32_readdirent
002E20r 3                       ;         jsr fat32_readdirent
002E20r 3                       ;         bcc @end
002E20r 3                       ; .endif
002E20r 3               
002E20r 3               @error:
002E20r 3  A9 01                lda #1
002E22r 3               @end:
002E22r 3               
002E22r 3  95 00                sta 0,x         ; put return value in TOS
002E24r 3  74 01                stz 1,X         ;reset value there
002E26r 3  60           z_fat32_root: rts
002E27r 3               
002E27r 3               ; ## FAT32_FIND ( addr u -- u ) "Open file from initialized fat32 FS"
002E27r 3               ; ## "fat32_find" coded Custom
002E27r 3               xt_fat32_find:
002E27r 3               .ifdef fat32_finddirent
002E27r 3               textfile:  .byte "FILE.TXT   ", 0
002E27r 3                               lda #<textfile
002E27r 3                               sta fat32_filenamepointer
002E27r 3                               lda #>textfile
002E27r 3                               sta fat32_filenamepointer+1
002E27r 3               
002E27r 3                               jsr fat32_finddirent    ; find the file from its name
002E27r 3                               bne @error
002E27r 3               
002E27r 3                               jsr fat32_file_read
002E27r 3                               bne @error
002E27r 3                               dex
002E27r 3                               dex
002E27r 3                               lda sd_buffer_address
002E27r 3                               sta 0,x
002E27r 3                               lda sd_buffer_address+1
002E27r 3                               sta 1, x
002E27r 3               ;                 phy
002E27r 3               ;         ldy #0
002E27r 3               ; @printloop:
002E27r 3               ;         lda (sd_buffer_address),y
002E27r 3               ;         beq @ex
002E27r 3               ;         jsr kernel_putc
002E27r 3               ; @ex:
002E27r 3               ;         ply
002E27r 3                       jmp @end
002E27r 3               
002E27r 3                               jmp @end
002E27r 3               
002E27r 3                               jsr underflow_2
002E27r 3                               phy
002E27r 3                               ldy 0,x ; length of string
002E27r 3                               lda #0
002E27r 3               @reset_loop:
002E27r 3                           .ifdef fat32_finddirent
002E27r 3                               sta (fat32_filenamepointer),y
002E27r 3                               iny
002E27r 3                               cpy #11
002E27r 3                               bcc @reset_loop
002E27r 3                           .endif
002E27r 3                               inx     ; get address
002E27r 3                               inx
002E27r 3                           .ifdef fat32_finddirent
002E27r 3                               lda 0,x
002E27r 3                               sta fat32_filenamepointer
002E27r 3                               lda 1,x
002E27r 3                               sta fat32_filenamepointer+1
002E27r 3                           .endif
002E27r 3               
002E27r 3                               ply
002E27r 3                           .ifdef fat32_finddirent
002E27r 3                               jsr fat32_finddirent    ; find the file from its name
002E27r 3                               beq @end
002E27r 3                           .endif
002E27r 3               .endif
002E27r 3               @error:
002E27r 3  A9 01                        lda #1
002E29r 3               @end:
002E29r 3  95 00                        sta 0,x         ; put return value in TOS
002E2Br 3  74 01                        stz 1,X         ;reset value there
002E2Dr 3  60           z_fat32_find: rts
002E2Er 3               
002E2Er 3               ; ## time ( -- addr ) "get time storage address"
002E2Er 3               ; ## "time" coded Custom
002E2Er 3               xt_time:
002E2Er 3                       .ifdef time
002E2Er 3  A9 rr                lda #time
002E30r 3                       .else
002E30r 3                       lda #0
002E30r 3                       .endif
002E30r 3  CA                   dex
002E31r 3  CA                   dex
002E32r 3  95 00                sta 0,x
002E34r 3  74 01                stz 1,x
002E36r 3               
002E36r 3               
002E36r 3  60           z_time: rts
002E37r 3               
002E37r 3               ; TODO add routine to send a block of data in memory via SPI
002E37r 3               ; similar to lcdprint
002E37r 3               
002E37r 3               ; END
002E37r 3               
002E37r 3               
002E37r 2                   .include "headers.s"          ; Headers of native words
002E37r 3               ; Dictionary Headers for Tali Forth 2
002E37r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
002E37r 3               ; First version: 05. Dec 2016 (Liara Forth)
002E37r 3               ; This version: 29. Dec 2018
002E37r 3               
002E37r 3               ; Dictionary headers are kept separately from the code, which allows various
002E37r 3               ; tricks in the code. We roughly follow the Gforth terminology: The Execution
002E37r 3               ; Token (xt) is the address of the first byte of a word's code that can be, uh,
002E37r 3               ; executed; the Name Token (nt) is a pointer to the beginning of the word's
002E37r 3               ; header in the Dictionary. There the link to the next word in the Dictionary
002E37r 3               ; is always one cell down from the current word's own nt. In the code itself,
002E37r 3               ; we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.
002E37r 3               
002E37r 3               ; This gives us the following header structure:
002E37r 3               
002E37r 3               ;              8 bit     8 bit
002E37r 3               ;               LSB       MSB
002E37r 3               ; nt_word ->  +--------+--------+
002E37r 3               ;          +0 | Length | Status |
002E37r 3               ;             +--------+--------+
002E37r 3               ;          +2 | Next Header     | -> nt_next_word
002E37r 3               ;             +-----------------+
002E37r 3               ;          +4 | Start of Code   | -> xt_word
002E37r 3               ;             +-----------------+
002E37r 3               ;          +6 | End of Code     | -> z_word
002E37r 3               ;             +--------+--------+
002E37r 3               ;          +8 | Name   |        |
002E37r 3               ;             +--------+--------+
002E37r 3               ;             |        |        |
002E37r 3               ;             +--------+--------+
002E37r 3               ;             |        |  ...   | (name string does not end with a zero)
002E37r 3               ;          +n +--------+--------+
002E37r 3               
002E37r 3               ; The Status Byte is created by adding the flags defined in definitions.asm,
002E37r 3               ; which are:
002E37r 3               
002E37r 3               ;       CO - Compile Only
002E37r 3               ;       IM - Immediate Word
002E37r 3               ;       NN - Never Native Compile (must always be called by JSR)
002E37r 3               ;       AN - Always Native Compile (may not be called by JSR)
002E37r 3               ;       UF - Contains underflow check
002E37r 3               ;       HC - Has CFA (words created by CREATE and DOES> only)
002E37r 3               
002E37r 3               ; Note there are currently two bits unused.
002E37r 3               
002E37r 3               ; By default, all existing words can be natively compiled (compiled inline) or
002E37r 3               ; as a subroutine jump target; the system decides which variant to use based on
002E37r 3               ; a threshold the user can set. By default, all user-created words are flagged
002E37r 3               ; never-native. The user can override this by using the always-native word
002E37r 3               ; just after defining their new word.  The NN flag forbids native compiling,
002E37r 3               ; the AN flag forces it.
002E37r 3               
002E37r 3               ; The last word (top word in code) is always BYE. It is marked as the last word
002E37r 3               ; by its value of 0000 in its Next Header field. The words are sorted with the
002E37r 3               ; more common ones first (further down in code) so they are found earlier.
002E37r 3               ; Anything to do with output comes later (further up) because things will
002E37r 3               ; always be slow if there is a human involved.
002E37r 3               
002E37r 3               ; The initial skeleton of this list was automatically generated by a script
002E37r 3               ; in the tools folder and then sorted by hand.
002E37r 3               
002E37r 3               nt_bye:
002E37r 3  03                   .byte 3         ; length of word strings
002E38r 3  00                   .byte 0         ; status byte
002E39r 3  00 00                .word 0000      ; next word in Dictionary, 0000 signals end
002E3Br 3  rr rr                .word xt_bye    ; start of code block (xt of this word)
002E3Dr 3  rr rr                .word z_bye     ; end of code (RTS)
002E3Fr 3  62 79 65             .byte "bye"     ; word name, always lower case, not zero-terminated
002E42r 3               
002E42r 3               
002E42r 3               nt_cold:
002E42r 3  04 00                .byte 4, 0
002E44r 3  rr rr rr rr          .word nt_bye, xt_cold, z_cold
002E48r 3  rr rr        
002E4Ar 3  63 6F 6C 64          .byte "cold"
002E4Er 3               
002E4Er 3               nt_lcdput:
002E4Er 3  06 10                .byte 6, UF
002E50r 3  rr rr rr rr          .word nt_cold, xt_lcdput, z_lcdput
002E54r 3  rr rr        
002E56r 3  6C 63 64 70          .byte "lcdput"
002E5Ar 3  75 74        
002E5Cr 3               
002E5Cr 3               nt_lcdprint:
002E5Cr 3  08 10                .byte 8, UF
002E5Er 3  rr rr rr rr          .word nt_lcdput, xt_lcdprint, z_lcdprint
002E62r 3  rr rr        
002E64r 3  6C 63 64 70          .byte "lcdprint"
002E68r 3  72 69 6E 74  
002E6Cr 3               
002E6Cr 3               nt_cls:
002E6Cr 3  03 00                .byte 3, 0
002E6Er 3  rr rr rr rr          .word nt_lcdprint, xt_cls, z_cls
002E72r 3  rr rr        
002E74r 3  63 6C 73             .byte "cls"
002E77r 3               
002E77r 3               nt_spi_init:
002E77r 3  08 00                .byte 8, 0
002E79r 3  rr rr rr rr          .word nt_cls, xt_spi_init, z_spi_init
002E7Dr 3  rr rr        
002E7Fr 3  73 70 69 5F          .byte "spi_init"
002E83r 3  69 6E 69 74  
002E87r 3               
002E87r 3               
002E87r 3               nt_spi_clk_toggle:
002E87r 3  0E 00                .byte 14, 0
002E89r 3  rr rr rr rr          .word nt_spi_init, xt_spi_clk_toggle, z_spi_clk_toggle
002E8Dr 3  rr rr        
002E8Fr 3  73 70 69 5F          .byte "spi_clk_toggle"
002E93r 3  63 6C 6B 5F  
002E97r 3  74 6F 67 67  
002E9Dr 3               
002E9Dr 3               nt_spi_select:
002E9Dr 3  0A 00                .byte 10, 0
002E9Fr 3  rr rr rr rr          .word nt_spi_clk_toggle, xt_spi_select, z_spi_select
002EA3r 3  rr rr        
002EA5r 3  73 70 69 5F          .byte "spi_select"
002EA9r 3  73 65 6C 65  
002EADr 3  63 74        
002EAFr 3               
002EAFr 3               nt_spi_transceive:
002EAFr 3  0E 00                .byte 14, 0
002EB1r 3  rr rr rr rr          .word nt_spi_select, xt_spi_transceive, z_spi_transceive
002EB5r 3  rr rr        
002EB7r 3  73 70 69 5F          .byte "spi_transceive"
002EBBr 3  74 72 61 6E  
002EBFr 3  73 63 65 69  
002EC5r 3               
002EC5r 3               nt_sd_init:
002EC5r 3  07 00                .byte 7, 0
002EC7r 3  rr rr rr rr          .word nt_spi_transceive, xt_sd_init, z_sd_init
002ECBr 3  rr rr        
002ECDr 3  73 64 5F 69          .byte "sd_init"
002ED1r 3  6E 69 74     
002ED4r 3               
002ED4r 3               
002ED4r 3               nt_sd_readsector:
002ED4r 3  0D 00                .byte 13, 0
002ED6r 3  rr rr rr rr          .word nt_sd_init, xt_sd_readsector, z_sd_readsector
002EDAr 3  rr rr        
002EDCr 3  73 64 5F 72          .byte "sd_readsector"
002EE0r 3  65 61 64 73  
002EE4r 3  65 63 74 6F  
002EE9r 3               
002EE9r 3               
002EE9r 3               nt_fat32_init:
002EE9r 3  0A 00                .byte 10, 0
002EEBr 3  rr rr rr rr          .word nt_sd_readsector, xt_fat32_init, z_fat32_init
002EEFr 3  rr rr        
002EF1r 3  66 61 74 33          .byte "fat32_init"
002EF5r 3  32 5F 69 6E  
002EF9r 3  69 74        
002EFBr 3               
002EFBr 3               nt_fat32_root:
002EFBr 3  0A 00                .byte 10, 0
002EFDr 3  rr rr rr rr          .word nt_fat32_init, xt_fat32_root, z_fat32_root
002F01r 3  rr rr        
002F03r 3  66 61 74 33          .byte "fat32_root"
002F07r 3  32 5F 72 6F  
002F0Br 3  6F 74        
002F0Dr 3               
002F0Dr 3               nt_fat32_find:
002F0Dr 3  0A 00                .byte 10, 0
002F0Fr 3  rr rr rr rr          .word nt_fat32_root, xt_fat32_find, z_fat32_find
002F13r 3  rr rr        
002F15r 3  66 61 74 33          .byte "fat32_find"
002F19r 3  32 5F 66 69  
002F1Dr 3  6E 64        
002F1Fr 3               
002F1Fr 3               nt_time:
002F1Fr 3  04 00                .byte 4, 0
002F21r 3  rr rr rr rr          .word nt_fat32_find, xt_time, z_time
002F25r 3  rr rr        
002F27r 3  74 69 6D 65          .byte "time"
002F2Br 3               
002F2Br 3               nt_ed:                  ; ed6502
002F2Br 3  02 08                .byte 2, NN
002F2Dr 3  rr rr rr rr          .word nt_time, xt_ed, z_ed
002F31r 3  rr rr        
002F33r 3  65 64                .byte "ed"
002F35r 3               
002F35r 3  03 08        nt_see: .byte 3, NN
002F37r 3  rr rr rr rr          .word nt_ed, xt_see, z_see
002F3Br 3  rr rr        
002F3Dr 3  73 65 65             .byte "see"
002F40r 3               
002F40r 3               nt_forth:
002F40r 3  05 00                .byte 5, 0
002F42r 3  rr rr rr rr          .word nt_see, xt_forth, z_forth
002F46r 3  rr rr        
002F48r 3  66 6F 72 74          .byte "forth"
002F4Cr 3  68           
002F4Dr 3               
002F4Dr 3               nt_order:
002F4Dr 3  05 00                .byte 5, 0
002F4Fr 3  rr rr rr rr          .word nt_forth, xt_order, z_order
002F53r 3  rr rr        
002F55r 3  6F 72 64 65          .byte "order"
002F59r 3  72           
002F5Ar 3               
002F5Ar 3               nt_to_order:
002F5Ar 3  06 00                .byte 6, 0
002F5Cr 3  rr rr rr rr          .word nt_order, xt_to_order, z_to_order
002F60r 3  rr rr        
002F62r 3  3E 6F 72 64          .byte ">order"
002F66r 3  65 72        
002F68r 3               
002F68r 3               nt_previous:
002F68r 3  08 00                .byte 8, 0
002F6Ar 3  rr rr rr rr          .word nt_to_order, xt_previous, z_previous
002F6Er 3  rr rr        
002F70r 3  70 72 65 76          .byte "previous"
002F74r 3  69 6F 75 73  
002F78r 3               
002F78r 3               nt_also:
002F78r 3  04 00                .byte 4, 0
002F7Ar 3  rr rr rr rr          .word nt_previous, xt_also, z_also
002F7Er 3  rr rr        
002F80r 3  61 6C 73 6F          .byte "also"
002F84r 3               
002F84r 3               nt_only:
002F84r 3  04 00                .byte 4, 0
002F86r 3  rr rr rr rr          .word nt_also, xt_only, z_only
002F8Ar 3  rr rr        
002F8Cr 3  6F 6E 6C 79          .byte "only"
002F90r 3               
002F90r 3               nt_forth_wordlist:      ; shares code with ZERO
002F90r 3  0E 00                .byte 14, 0
002F92r 3  rr rr rr rr          .word nt_only, xt_forth_wordlist, z_forth_wordlist
002F96r 3  rr rr        
002F98r 3  66 6F 72 74          .byte "forth-wordlist"
002F9Cr 3  68 2D 77 6F  
002FA0r 3  72 64 6C 69  
002FA6r 3               
002FA6r 3               nt_editor_wordlist:     ; shares code with ONE
002FA6r 3  0F 00                .byte 15, 0
002FA8r 3  rr rr rr rr          .word nt_forth_wordlist, xt_editor_wordlist, z_editor_wordlist
002FACr 3  rr rr        
002FAEr 3  65 64 69 74          .byte "editor-wordlist"
002FB2r 3  6F 72 2D 77  
002FB6r 3  6F 72 64 6C  
002FBDr 3               
002FBDr 3               nt_assembler_wordlist:  ; shares code with TWO
002FBDr 3  12 00                .byte 18, 0
002FBFr 3  rr rr rr rr          .word nt_editor_wordlist, xt_assembler_wordlist, z_assembler_wordlist
002FC3r 3  rr rr        
002FC5r 3  61 73 73 65          .byte "assembler-wordlist"
002FC9r 3  6D 62 6C 65  
002FCDr 3  72 2D 77 6F  
002FD7r 3               
002FD7r 3               nt_root_wordlist:
002FD7r 3  0D 00                .byte 13, 0
002FD9r 3  rr rr rr rr          .word nt_assembler_wordlist, xt_root_wordlist, z_root_wordlist
002FDDr 3  rr rr        
002FDFr 3  72 6F 6F 74          .byte "root-wordlist"
002FE3r 3  2D 77 6F 72  
002FE7r 3  64 6C 69 73  
002FECr 3               
002FECr 3               nt_get_order:
002FECr 3  09 00                .byte 9, 0
002FEEr 3  rr rr rr rr          .word nt_root_wordlist, xt_get_order, z_get_order
002FF2r 3  rr rr        
002FF4r 3  67 65 74 2D          .byte "get-order"
002FF8r 3  6F 72 64 65  
002FFCr 3  72           
002FFDr 3               
002FFDr 3               nt_set_order:
002FFDr 3  09 00                .byte 9, 0
002FFFr 3  rr rr rr rr          .word nt_get_order, xt_set_order, z_set_order
003003r 3  rr rr        
003005r 3  73 65 74 2D          .byte "set-order"
003009r 3  6F 72 64 65  
00300Dr 3  72           
00300Er 3               
00300Er 3               nt_get_current:
00300Er 3  0B 00                .byte 11, 0
003010r 3  rr rr rr rr          .word nt_set_order, xt_get_current, z_get_current
003014r 3  rr rr        
003016r 3  67 65 74 2D          .byte "get-current"
00301Ar 3  63 75 72 72  
00301Er 3  65 6E 74     
003021r 3               
003021r 3               nt_set_current:
003021r 3  0B 10                .byte 11, UF
003023r 3  rr rr rr rr          .word nt_get_current, xt_set_current, z_set_current
003027r 3  rr rr        
003029r 3  73 65 74 2D          .byte "set-current"
00302Dr 3  63 75 72 72  
003031r 3  65 6E 74     
003034r 3               
003034r 3               nt_search_wordlist:
003034r 3  0F 10                .byte 15, UF
003036r 3  rr rr rr rr          .word nt_set_current, xt_search_wordlist, z_search_wordlist
00303Ar 3  rr rr        
00303Cr 3  73 65 61 72          .byte "search-wordlist"
003040r 3  63 68 2D 77  
003044r 3  6F 72 64 6C  
00304Br 3               
00304Br 3               nt_wordlist:
00304Br 3  08 00                .byte 8, 0
00304Dr 3  rr rr rr rr          .word nt_search_wordlist, xt_wordlist, z_wordlist
003051r 3  rr rr        
003053r 3  77 6F 72 64          .byte "wordlist"
003057r 3  6C 69 73 74  
00305Br 3               
00305Br 3               nt_definitions:
00305Br 3  0B 00                .byte 11, 0
00305Dr 3  rr rr rr rr          .word nt_wordlist, xt_definitions, z_definitions
003061r 3  rr rr        
003063r 3  64 65 66 69          .byte "definitions"
003067r 3  6E 69 74 69  
00306Br 3  6F 6E 73     
00306Er 3               
00306Er 3               nt_block_ramdrive_init:
00306Er 3  13 10                .byte 19, UF
003070r 3  rr rr rr rr          .word nt_definitions, xt_block_ramdrive_init, z_block_ramdrive_init
003074r 3  rr rr        
003076r 3  62 6C 6F 63          .byte "block-ramdrive-init"
00307Ar 3  6B 2D 72 61  
00307Er 3  6D 64 72 69  
003089r 3               
003089r 3               nt_list:
003089r 3  04 10                .byte 4, UF
00308Br 3  rr rr rr rr          .word nt_block_ramdrive_init, xt_list, z_list
00308Fr 3  rr rr        
003091r 3  6C 69 73 74          .byte "list"
003095r 3               
003095r 3               nt_thru:
003095r 3  04 10                .byte 4, UF
003097r 3  rr rr rr rr          .word nt_list, xt_thru, z_thru
00309Br 3  rr rr        
00309Dr 3  74 68 72 75          .byte "thru"
0030A1r 3               
0030A1r 3               nt_load:
0030A1r 3  04 10                .byte 4, UF
0030A3r 3  rr rr rr rr          .word nt_thru, xt_load, z_load
0030A7r 3  rr rr        
0030A9r 3  6C 6F 61 64          .byte "load"
0030ADr 3               
0030ADr 3               nt_flush:
0030ADr 3  05 00                .byte 5, 0
0030AFr 3  rr rr rr rr          .word nt_load, xt_flush, z_flush
0030B3r 3  rr rr        
0030B5r 3  66 6C 75 73          .byte "flush"
0030B9r 3  68           
0030BAr 3               
0030BAr 3               nt_empty_buffers:
0030BAr 3  0D 00                .byte 13, 0
0030BCr 3  rr rr rr rr          .word nt_flush, xt_empty_buffers, z_empty_buffers
0030C0r 3  rr rr        
0030C2r 3  65 6D 70 74          .byte "empty-buffers"
0030C6r 3  79 2D 62 75  
0030CAr 3  66 66 65 72  
0030CFr 3               
0030CFr 3               nt_buffer:
0030CFr 3  06 00                .byte 6, 0
0030D1r 3  rr rr rr rr          .word nt_empty_buffers, xt_buffer, z_buffer
0030D5r 3  rr rr        
0030D7r 3  62 75 66 66          .byte "buffer"
0030DBr 3  65 72        
0030DDr 3               
0030DDr 3               nt_update:
0030DDr 3  06 00                .byte 6, 0
0030DFr 3  rr rr rr rr          .word nt_buffer, xt_update, z_update
0030E3r 3  rr rr        
0030E5r 3  75 70 64 61          .byte "update"
0030E9r 3  74 65        
0030EBr 3               
0030EBr 3               nt_block:
0030EBr 3  05 00                .byte 5, 0
0030EDr 3  rr rr rr rr          .word nt_update, xt_block, z_block
0030F1r 3  rr rr        
0030F3r 3  62 6C 6F 63          .byte "block"
0030F7r 3  6B           
0030F8r 3               
0030F8r 3               nt_save_buffers:
0030F8r 3  0C 00                .byte 12, 0
0030FAr 3  rr rr rr rr          .word nt_block, xt_save_buffers, z_save_buffers
0030FEr 3  rr rr        
003100r 3  73 61 76 65          .byte "save-buffers"
003104r 3  2D 62 75 66  
003108r 3  66 65 72 73  
00310Cr 3               
00310Cr 3               nt_block_read_vector:
00310Cr 3  11 28                .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
00310Er 3  rr rr rr rr          .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
003112r 3  rr rr        
003114r 3  62 6C 6F 63          .byte "block-read-vector"
003118r 3  6B 2D 72 65  
00311Cr 3  61 64 2D 76  
003125r 3               
003125r 3               nt_block_read:
003125r 3  0A 28                .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
003127r 3  rr rr rr rr          .word nt_block_read_vector, xt_block_read, z_block_read
00312Br 3  rr rr        
00312Dr 3  62 6C 6F 63          .byte "block-read"
003131r 3  6B 2D 72 65  
003135r 3  61 64        
003137r 3               
003137r 3               nt_block_write_vector:
003137r 3  12 08                .byte 18, NN ; Deferred words need the HC (Code Field) flag.
003139r 3  rr rr rr rr          .word nt_block_read, xt_block_write_vector, z_block_write_vector
00313Dr 3  rr rr        
00313Fr 3  62 6C 6F 63          .byte "block-write-vector"
003143r 3  6B 2D 77 72  
003147r 3  69 74 65 2D  
003151r 3               
003151r 3               nt_block_write:
003151r 3  0B 08                .byte 11, NN ; Deferred words need the HC (Code Field) flag.
003153r 3  rr rr rr rr          .word nt_block_write_vector, xt_block_write, z_block_write
003157r 3  rr rr        
003159r 3  62 6C 6F 63          .byte "block-write"
00315Dr 3  6B 2D 77 72  
003161r 3  69 74 65     
003164r 3               
003164r 3               nt_blk:
003164r 3  03 00                .byte 3, 0
003166r 3  rr rr rr rr          .word nt_block_write, xt_blk, z_blk
00316Ar 3  rr rr        
00316Cr 3  62 6C 6B             .byte "blk"
00316Fr 3               
00316Fr 3               nt_scr:
00316Fr 3  03 00                .byte 3, 0
003171r 3  rr rr rr rr          .word nt_blk, xt_scr, z_scr
003175r 3  rr rr        
003177r 3  73 63 72             .byte "scr"
00317Ar 3               
00317Ar 3               nt_blkbuffer:
00317Ar 3  09 00                .byte 9, 0
00317Cr 3  rr rr rr rr          .word nt_scr, xt_blkbuffer, z_blkbuffer
003180r 3  rr rr        
003182r 3  62 6C 6B 62          .byte "blkbuffer"
003186r 3  75 66 66 65  
00318Ar 3  72           
00318Br 3               
00318Br 3               nt_buffblocknum:
00318Br 3  0C 00                .byte 12, 0
00318Dr 3  rr rr rr rr          .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
003191r 3  rr rr        
003193r 3  62 75 66 66          .byte "buffblocknum"
003197r 3  62 6C 6F 63  
00319Br 3  6B 6E 75 6D  
00319Fr 3               
00319Fr 3               nt_buffstatus:
00319Fr 3  0A 00                .byte 10, 0
0031A1r 3  rr rr rr rr          .word nt_buffblocknum, xt_buffstatus, z_buffstatus
0031A5r 3  rr rr        
0031A7r 3  62 75 66 66          .byte "buffstatus"
0031ABr 3  73 74 61 74  
0031AFr 3  75 73        
0031B1r 3               
0031B1r 3               nt_buffer_colon:
0031B1r 3  07 00                .byte 7, 0
0031B3r 3  rr rr rr rr          .word nt_buffstatus, xt_buffer_colon, z_buffer_colon
0031B7r 3  rr rr        
0031B9r 3  62 75 66 66          .byte "buffer:"
0031BDr 3  65 72 3A     
0031C0r 3               
0031C0r 3               nt_useraddr:
0031C0r 3  08 00                .byte 8, 0
0031C2r 3  rr rr rr rr          .word nt_buffer_colon, xt_useraddr, z_useraddr
0031C6r 3  rr rr        
0031C8r 3  75 73 65 72          .byte "useraddr"
0031CCr 3  61 64 64 72  
0031D0r 3               
0031D0r 3               nt_action_of:
0031D0r 3  09 04                .byte 9, IM
0031D2r 3  rr rr rr rr          .word nt_useraddr, xt_action_of, z_action_of
0031D6r 3  rr rr        
0031D8r 3  61 63 74 69          .byte "action-of"
0031DCr 3  6F 6E 2D 6F  
0031E0r 3  66           
0031E1r 3               
0031E1r 3               nt_is:
0031E1r 3  02 04                .byte 2, IM
0031E3r 3  rr rr rr rr          .word nt_action_of, xt_is, z_is
0031E7r 3  rr rr        
0031E9r 3  69 73                .byte "is"
0031EBr 3               
0031EBr 3               nt_defer_store:
0031EBr 3  06 00                .byte 6, 0
0031EDr 3  rr rr rr rr          .word nt_is, xt_defer_store, z_defer_store
0031F1r 3  rr rr        
0031F3r 3  64 65 66 65          .byte "defer!"
0031F7r 3  72 21        
0031F9r 3               
0031F9r 3               nt_defer_fetch:
0031F9r 3  06 00                .byte 6, 0
0031FBr 3  rr rr rr rr          .word nt_defer_store, xt_defer_fetch, z_defer_fetch
0031FFr 3  rr rr        
003201r 3  64 65 66 65          .byte "defer@"
003205r 3  72 40        
003207r 3               
003207r 3               nt_endcase:
003207r 3  07 0D                .byte 7, IM+CO+NN
003209r 3  rr rr rr rr          .word nt_defer_fetch, xt_endcase, z_endcase
00320Dr 3  rr rr        
00320Fr 3  65 6E 64 63          .byte "endcase"
003213r 3  61 73 65     
003216r 3               
003216r 3               nt_endof:
003216r 3  05 0D                .byte 5, IM+CO+NN
003218r 3  rr rr rr rr          .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
00321Cr 3  rr rr        
00321Er 3  65 6E 64 6F          .byte "endof"
003222r 3  66           
003223r 3               
003223r 3               nt_of:
003223r 3  02 0D                .byte 2, IM+CO+NN
003225r 3  rr rr rr rr          .word nt_endof, xt_of, z_of
003229r 3  rr rr        
00322Br 3  6F 66                .byte "of"
00322Dr 3               
00322Dr 3               nt_case:
00322Dr 3  04 0D                .byte 4, IM+CO+NN
00322Fr 3  rr rr rr rr          .word nt_of, xt_case, z_case    ; shares code with ZERO
003233r 3  rr rr        
003235r 3  63 61 73 65          .byte "case"
003239r 3               
003239r 3               nt_while:
003239r 3  05 0D                .byte 5, IM+CO+NN
00323Br 3  rr rr rr rr          .word nt_case, xt_while, z_while
00323Fr 3  rr rr        
003241r 3  77 68 69 6C          .byte "while"
003245r 3  65           
003246r 3               
003246r 3               nt_until:
003246r 3  05 0D                .byte 5, IM+CO+NN
003248r 3  rr rr rr rr          .word nt_while, xt_until, z_until
00324Cr 3  rr rr        
00324Er 3  75 6E 74 69          .byte "until"
003252r 3  6C           
003253r 3               
003253r 3               nt_repeat:
003253r 3  06 0D                .byte 6, IM+CO+NN
003255r 3  rr rr rr rr          .word nt_until, xt_repeat, z_repeat
003259r 3  rr rr        
00325Br 3  72 65 70 65          .byte "repeat"
00325Fr 3  61 74        
003261r 3               
003261r 3               nt_else:
003261r 3  04 0D                .byte 4, IM+CO+NN
003263r 3  rr rr rr rr          .word nt_repeat, xt_else, z_else
003267r 3  rr rr        
003269r 3  65 6C 73 65          .byte "else"
00326Dr 3               
00326Dr 3               nt_then:
00326Dr 3  04 0D                .byte 4, IM+CO+NN
00326Fr 3  rr rr rr rr          .word nt_else, xt_then, z_then
003273r 3  rr rr        
003275r 3  74 68 65 6E          .byte "then"
003279r 3               
003279r 3               nt_if:
003279r 3  02 0D                .byte 2, IM+CO+NN
00327Br 3  rr rr rr rr          .word nt_then, xt_if, z_if
00327Fr 3  rr rr        
003281r 3  69 66                .byte "if"
003283r 3               
003283r 3               nt_dot_paren:
003283r 3  02 04                .byte 2, IM
003285r 3  rr rr rr rr          .word nt_if, xt_dot_paren, z_dot_paren
003289r 3  rr rr        
00328Br 3  2E 28                .byte ".("
00328Dr 3               
00328Dr 3               nt_paren:
00328Dr 3  01 04                .byte 1, IM
00328Fr 3  rr rr rr rr          .word nt_dot_paren, xt_paren, z_paren
003293r 3  rr rr        
003295r 3  28                   .byte "("
003296r 3               
003296r 3               nt_word:
003296r 3  04 10                .byte 4, UF
003298r 3  rr rr rr rr          .word nt_paren, xt_word, z_word
00329Cr 3  rr rr        
00329Er 3  77 6F 72 64          .byte "word"
0032A2r 3               
0032A2r 3               nt_find:
0032A2r 3  04 10                .byte 4, UF
0032A4r 3  rr rr rr rr          .word nt_word, xt_find, z_find
0032A8r 3  rr rr        
0032AAr 3  66 69 6E 64          .byte "find"
0032AEr 3               
0032AEr 3               nt_environment_q:
0032AEr 3  0C 10                .byte 12, UF
0032B0r 3  rr rr rr rr          .word nt_find, xt_environment_q, z_environment_q
0032B4r 3  rr rr        
0032B6r 3  65 6E 76 69          .byte "environment?"
0032BAr 3  72 6F 6E 6D  
0032BEr 3  65 6E 74 3F  
0032C2r 3               
0032C2r 3               nt_search:
0032C2r 3  06 18                .byte 6, UF+NN
0032C4r 3  rr rr rr rr          .word nt_environment_q, xt_search, z_search
0032C8r 3  rr rr        
0032CAr 3  73 65 61 72          .byte "search"
0032CEr 3  63 68        
0032D0r 3               
0032D0r 3               nt_compare:
0032D0r 3  07 10                .byte 7, UF
0032D2r 3  rr rr rr rr          .word nt_search, xt_compare, z_compare
0032D6r 3  rr rr        
0032D8r 3  63 6F 6D 70          .byte "compare"
0032DCr 3  61 72 65     
0032DFr 3               
0032DFr 3               nt_disasm:
0032DFr 3  06 10                .byte 6, UF
0032E1r 3  rr rr rr rr          .word nt_compare, xt_disasm, z_disasm
0032E5r 3  rr rr        
0032E7r 3  64 69 73 61          .byte "disasm"
0032EBr 3  73 6D        
0032EDr 3               
0032EDr 3               nt_dot_s:
0032EDr 3  02 00                .byte 2, 0
0032EFr 3  rr rr rr rr          .word nt_disasm, xt_dot_s, z_dot_s
0032F3r 3  rr rr        
0032F5r 3  2E 73                .byte ".s"
0032F7r 3               
0032F7r 3               nt_dump:
0032F7r 3  04 10                .byte 4, UF
0032F9r 3  rr rr rr rr          .word nt_dot_s, xt_dump, z_dump
0032FDr 3  rr rr        
0032FFr 3  64 75 6D 70          .byte "dump"
003303r 3               
003303r 3               nt_bell:
003303r 3  04 00                .byte 4, 0
003305r 3  rr rr rr rr          .word nt_dump, xt_bell, z_bell
003309r 3  rr rr        
00330Br 3  62 65 6C 6C          .byte "bell"
00330Fr 3               
00330Fr 3               nt_align:
00330Fr 3  05 00                .byte 5, 0
003311r 3  rr rr rr rr          .word nt_bell, xt_align, z_align
003315r 3  rr rr        
003317r 3  61 6C 69 67          .byte "align"
00331Br 3  6E           
00331Cr 3               
00331Cr 3               nt_aligned:             ; same code as ALIGN
00331Cr 3  07 00                .byte 7, 0
00331Er 3  rr rr rr rr          .word nt_align, xt_align, z_align
003322r 3  rr rr        
003324r 3  61 6C 69 67          .byte "aligned"
003328r 3  6E 65 64     
00332Br 3               
00332Br 3               nt_wordsize:
00332Br 3  08 10                .byte 8, UF
00332Dr 3  rr rr rr rr          .word nt_aligned, xt_wordsize, z_wordsize
003331r 3  rr rr        
003333r 3  77 6F 72 64          .byte "wordsize"
003337r 3  73 69 7A 65  
00333Br 3               
00333Br 3               nt_words:
00333Br 3  05 00                .byte 5, 0
00333Dr 3  rr rr rr rr          .word nt_wordsize, xt_words, z_words
003341r 3  rr rr        
003343r 3  77 6F 72 64          .byte "words"
003347r 3  73           
003348r 3               
003348r 3               nt_marker:
003348r 3  06 04                .byte 6, IM
00334Ar 3  rr rr rr rr          .word nt_words, xt_marker, z_marker
00334Er 3  rr rr        
003350r 3  6D 61 72 6B          .byte "marker"
003354r 3  65 72        
003356r 3               
003356r 3               nt_at_xy:
003356r 3  05 10                .byte 5, UF
003358r 3  rr rr rr rr          .word nt_marker, xt_at_xy, z_at_xy
00335Cr 3  rr rr        
00335Er 3  61 74 2D 78          .byte "at-xy"
003362r 3  79           
003363r 3               
003363r 3               nt_page:
003363r 3  04 00                .byte 4, 0
003365r 3  rr rr rr rr          .word nt_at_xy, xt_page, z_page
003369r 3  rr rr        
00336Br 3  70 61 67 65          .byte "page"
00336Fr 3               
00336Fr 3               nt_cr:
00336Fr 3  02 00                .byte 2, 0
003371r 3  rr rr rr rr          .word nt_page, xt_cr, z_cr
003375r 3  rr rr        
003377r 3  63 72                .byte "cr"
003379r 3               
003379r 3               nt_input:
003379r 3  05 00                .byte 5, 0
00337Br 3  rr rr rr rr          .word nt_cr, xt_input, z_input
00337Fr 3  rr rr        
003381r 3  69 6E 70 75          .byte "input"
003385r 3  74           
003386r 3               
003386r 3               nt_output:
003386r 3  06 00                .byte 6, 0
003388r 3  rr rr rr rr          .word nt_input, xt_output, z_output
00338Cr 3  rr rr        
00338Er 3  6F 75 74 70          .byte "output"
003392r 3  75 74        
003394r 3               
003394r 3               nt_sign:
003394r 3  04 10                .byte 4, UF
003396r 3  rr rr rr rr          .word nt_output, xt_sign, z_sign
00339Ar 3  rr rr        
00339Cr 3  73 69 67 6E          .byte "sign"
0033A0r 3               
0033A0r 3               nt_hold:
0033A0r 3  04 10                .byte 4, UF
0033A2r 3  rr rr rr rr          .word nt_sign, xt_hold, z_hold
0033A6r 3  rr rr        
0033A8r 3  68 6F 6C 64          .byte "hold"
0033ACr 3               
0033ACr 3               nt_number_sign_greater:
0033ACr 3  02 10                .byte 2, UF
0033AEr 3  rr rr rr rr          .word nt_hold, xt_number_sign_greater, z_number_sign_greater
0033B2r 3  rr rr        
0033B4r 3  23 3E                .byte "#>"
0033B6r 3               
0033B6r 3               nt_number_sign_s:
0033B6r 3  02 10                .byte 2, UF
0033B8r 3  rr rr rr rr          .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
0033BCr 3  rr rr        
0033BEr 3  23 73                .byte "#s"
0033C0r 3               
0033C0r 3               nt_number_sign:
0033C0r 3  01 10                .byte 1, UF
0033C2r 3  rr rr rr rr          .word nt_number_sign_s, xt_number_sign, z_number_sign
0033C6r 3  rr rr        
0033C8r 3  23                   .byte "#"
0033C9r 3               
0033C9r 3               nt_less_number_sign:
0033C9r 3  02 00                .byte 2, 0
0033CBr 3  rr rr rr rr          .word nt_number_sign, xt_less_number_sign, z_less_number_sign
0033CFr 3  rr rr        
0033D1r 3  3C 23                .byte "<#"
0033D3r 3               
0033D3r 3               nt_to_in:
0033D3r 3  03 00                .byte 3, 0
0033D5r 3  rr rr rr rr          .word nt_less_number_sign, xt_to_in, z_to_in
0033D9r 3  rr rr        
0033DBr 3  3E 69 6E             .byte ">in"
0033DEr 3               
0033DEr 3               nt_within:
0033DEr 3  06 10                .byte 6, UF
0033E0r 3  rr rr rr rr          .word nt_to_in, xt_within, z_within
0033E4r 3  rr rr        
0033E6r 3  77 69 74 68          .byte "within"
0033EAr 3  69 6E        
0033ECr 3               
0033ECr 3               nt_hexstore:
0033ECr 3  08 10                .byte 8, UF
0033EEr 3  rr rr rr rr          .word nt_within, xt_hexstore, z_hexstore
0033F2r 3  rr rr        
0033F4r 3  68 65 78 73          .byte "hexstore"
0033F8r 3  74 6F 72 65  
0033FCr 3               
0033FCr 3               nt_cleave:
0033FCr 3  06 10                .byte 6, UF
0033FEr 3  rr rr rr rr          .word nt_hexstore, xt_cleave, z_cleave
003402r 3  rr rr        
003404r 3  63 6C 65 61          .byte "cleave"
003408r 3  76 65        
00340Ar 3               
00340Ar 3               nt_pad:
00340Ar 3  03 00                .byte 3, 0
00340Cr 3  rr rr rr rr          .word nt_cleave, xt_pad, z_pad
003410r 3  rr rr        
003412r 3  70 61 64             .byte "pad"
003415r 3               
003415r 3               nt_cmove:
003415r 3  05 10                .byte 5, UF
003417r 3  rr rr rr rr          .word nt_pad, xt_cmove, z_cmove
00341Br 3  rr rr        
00341Dr 3  63 6D 6F 76          .byte "cmove"
003421r 3  65           
003422r 3               
003422r 3               nt_cmove_up:
003422r 3  06 10                .byte 6, UF
003424r 3  rr rr rr rr          .word nt_cmove, xt_cmove_up, z_cmove_up
003428r 3  rr rr        
00342Ar 3  63 6D 6F 76          .byte "cmove>"
00342Er 3  65 3E        
003430r 3               
003430r 3               nt_move:
003430r 3  04 18                .byte 4, NN+UF
003432r 3  rr rr rr rr          .word nt_cmove_up, xt_move, z_move
003436r 3  rr rr        
003438r 3  6D 6F 76 65          .byte "move"
00343Cr 3               
00343Cr 3               nt_backslash:
00343Cr 3  01 04                .byte 1, IM
00343Er 3  rr rr rr rr          .word nt_move, xt_backslash, z_backslash
003442r 3  rr rr        
003444r 3  5C                   .byte $5c
003445r 3               
003445r 3               nt_star_slash:
003445r 3  02 10                .byte 2, UF
003447r 3  rr rr rr rr          .word nt_backslash, xt_star_slash, z_star_slash
00344Br 3  rr rr        
00344Dr 3  2A 2F                .byte "*/"
00344Fr 3               
00344Fr 3               nt_star_slash_mod:
00344Fr 3  05 10                .byte 5, UF
003451r 3  rr rr rr rr          .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
003455r 3  rr rr        
003457r 3  2A 2F 6D 6F          .byte "*/mod"
00345Br 3  64           
00345Cr 3               
00345Cr 3               nt_mod:
00345Cr 3  03 10                .byte 3, UF
00345Er 3  rr rr rr rr          .word nt_star_slash_mod, xt_mod, z_mod
003462r 3  rr rr        
003464r 3  6D 6F 64             .byte "mod"
003467r 3               
003467r 3               nt_slash_mod:
003467r 3  04 10                .byte 4, UF
003469r 3  rr rr rr rr          .word nt_mod, xt_slash_mod, z_slash_mod
00346Dr 3  rr rr        
00346Fr 3  2F 6D 6F 64          .byte "/mod"
003473r 3               
003473r 3               nt_slash:
003473r 3  01 10                .byte 1, UF
003475r 3  rr rr rr rr          .word nt_slash_mod, xt_slash, z_slash
003479r 3  rr rr        
00347Br 3  2F                   .byte "/"
00347Cr 3               
00347Cr 3               nt_fm_slash_mod:
00347Cr 3  06 10                .byte 6, UF
00347Er 3  rr rr rr rr          .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
003482r 3  rr rr        
003484r 3  66 6D 2F 6D          .byte "fm/mod"
003488r 3  6F 64        
00348Ar 3               
00348Ar 3               nt_sm_slash_rem:
00348Ar 3  06 10                .byte 6, UF
00348Cr 3  rr rr rr rr          .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
003490r 3  rr rr        
003492r 3  73 6D 2F 72          .byte "sm/rem"
003496r 3  65 6D        
003498r 3               
003498r 3               nt_um_slash_mod:
003498r 3  06 10                .byte 6, UF
00349Ar 3  rr rr rr rr          .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
00349Er 3  rr rr        
0034A0r 3  75 6D 2F 6D          .byte "um/mod"
0034A4r 3  6F 64        
0034A6r 3               
0034A6r 3               nt_star:
0034A6r 3  01 10                .byte 1, UF
0034A8r 3  rr rr rr rr          .word nt_um_slash_mod, xt_star, z_star
0034ACr 3  rr rr        
0034AEr 3  2A                   .byte "*"
0034AFr 3               
0034AFr 3               nt_um_star:
0034AFr 3  03 10                .byte 3, UF
0034B1r 3  rr rr rr rr          .word nt_star, xt_um_star, z_um_star
0034B5r 3  rr rr        
0034B7r 3  75 6D 2A             .byte "um*"
0034BAr 3               
0034BAr 3               nt_m_star:
0034BAr 3  02 10                .byte 2, UF
0034BCr 3  rr rr rr rr          .word nt_um_star, xt_m_star, z_m_star
0034C0r 3  rr rr        
0034C2r 3  6D 2A                .byte "m*"
0034C4r 3               
0034C4r 3               nt_count:
0034C4r 3  05 10                .byte 5, UF
0034C6r 3  rr rr rr rr          .word nt_m_star, xt_count, z_count
0034CAr 3  rr rr        
0034CCr 3  63 6F 75 6E          .byte "count"
0034D0r 3  74           
0034D1r 3               
0034D1r 3               nt_decimal:
0034D1r 3  07 00                .byte 7, 0
0034D3r 3  rr rr rr rr          .word nt_count, xt_decimal, z_decimal
0034D7r 3  rr rr        
0034D9r 3  64 65 63 69          .byte "decimal"
0034DDr 3  6D 61 6C     
0034E0r 3               
0034E0r 3               nt_hex:
0034E0r 3  03 00                .byte 3, 0
0034E2r 3  rr rr rr rr          .word nt_decimal, xt_hex, z_hex
0034E6r 3  rr rr        
0034E8r 3  68 65 78             .byte "hex"
0034EBr 3               
0034EBr 3               nt_to_number:
0034EBr 3  07 10                .byte 7, UF
0034EDr 3  rr rr rr rr          .word nt_hex, xt_to_number, z_to_number
0034F1r 3  rr rr        
0034F3r 3  3E 6E 75 6D          .byte ">number"
0034F7r 3  62 65 72     
0034FAr 3               
0034FAr 3               nt_number:
0034FAr 3  06 10                .byte 6, UF
0034FCr 3  rr rr rr rr          .word nt_to_number, xt_number, z_number
003500r 3  rr rr        
003502r 3  6E 75 6D 62          .byte "number"
003506r 3  65 72        
003508r 3               
003508r 3               nt_digit_question:
003508r 3  06 10                .byte 6, UF
00350Ar 3  rr rr rr rr          .word nt_number, xt_digit_question, z_digit_question
00350Er 3  rr rr        
003510r 3  64 69 67 69          .byte "digit?"
003514r 3  74 3F        
003516r 3               
003516r 3               nt_base:
003516r 3  04 00                .byte 4, 0
003518r 3  rr rr rr rr          .word nt_digit_question, xt_base, z_base
00351Cr 3  rr rr        
00351Er 3  62 61 73 65          .byte "base"
003522r 3               
003522r 3               nt_evaluate:
003522r 3  08 10                .byte 8, UF
003524r 3  rr rr rr rr          .word nt_base, xt_evaluate, z_evaluate
003528r 3  rr rr        
00352Ar 3  65 76 61 6C          .byte "evaluate"
00352Er 3  75 61 74 65  
003532r 3               
003532r 3               nt_state:
003532r 3  05 00                .byte 5, 0
003534r 3  rr rr rr rr          .word nt_evaluate, xt_state, z_state
003538r 3  rr rr        
00353Ar 3  73 74 61 74          .byte "state"
00353Er 3  65           
00353Fr 3               
00353Fr 3               nt_again:
00353Fr 3  05 17                .byte 5, AN+CO+IM+UF
003541r 3  rr rr rr rr          .word nt_state, xt_again, z_again
003545r 3  rr rr        
003547r 3  61 67 61 69          .byte "again"
00354Br 3  6E           
00354Cr 3               
00354Cr 3               nt_begin:
00354Cr 3  05 07                .byte 5, AN+CO+IM
00354Er 3  rr rr rr rr          .word nt_again, xt_begin, z_begin
003552r 3  rr rr        
003554r 3  62 65 67 69          .byte "begin"
003558r 3  6E           
003559r 3               
003559r 3               nt_quit:
003559r 3  04 00                .byte 4, 0
00355Br 3  rr rr rr rr          .word nt_begin, xt_quit, z_quit
00355Fr 3  rr rr        
003561r 3  71 75 69 74          .byte "quit"
003565r 3               
003565r 3               nt_recurse:
003565r 3  07 0D                .byte 7, CO+IM+NN
003567r 3  rr rr rr rr          .word nt_quit, xt_recurse, z_recurse
00356Br 3  rr rr        
00356Dr 3  72 65 63 75          .byte "recurse"
003571r 3  72 73 65     
003574r 3               
003574r 3               nt_leave:
003574r 3  05 03                .byte 5, AN+CO
003576r 3  rr rr rr rr          .word nt_recurse, xt_leave, z_leave
00357Ar 3  rr rr        
00357Cr 3  6C 65 61 76          .byte "leave"
003580r 3  65           
003581r 3               
003581r 3               nt_unloop:
003581r 3  06 03                .byte 6, AN+CO
003583r 3  rr rr rr rr          .word nt_leave, xt_unloop, z_unloop
003587r 3  rr rr        
003589r 3  75 6E 6C 6F          .byte "unloop"
00358Dr 3  6F 70        
00358Fr 3               
00358Fr 3               nt_exit:
00358Fr 3  04 03                .byte 4, AN+CO
003591r 3  rr rr rr rr          .word nt_unloop, xt_exit, z_exit
003595r 3  rr rr        
003597r 3  65 78 69 74          .byte "exit"
00359Br 3               
00359Br 3               nt_plus_loop:
00359Br 3  05 05                .byte 5, CO+IM
00359Dr 3  rr rr rr rr          .word nt_exit, xt_plus_loop, z_plus_loop
0035A1r 3  rr rr        
0035A3r 3  2B 6C 6F 6F          .byte "+loop"
0035A7r 3  70           
0035A8r 3               
0035A8r 3               nt_loop:
0035A8r 3  04 05                .byte 4, CO+IM
0035AAr 3  rr rr rr rr          .word nt_plus_loop, xt_loop, z_loop
0035AEr 3  rr rr        
0035B0r 3  6C 6F 6F 70          .byte "loop"
0035B4r 3               
0035B4r 3               nt_j:
0035B4r 3  01 03                .byte 1, AN+CO
0035B6r 3  rr rr rr rr          .word nt_loop, xt_j, z_j
0035BAr 3  rr rr        
0035BCr 3  6A                   .byte "j"
0035BDr 3               
0035BDr 3               nt_i:
0035BDr 3  01 03                .byte 1, AN+CO
0035BFr 3  rr rr rr rr          .word nt_j, xt_i, z_i
0035C3r 3  rr rr        
0035C5r 3  69                   .byte "i"
0035C6r 3               
0035C6r 3               nt_question_do:
0035C6r 3  03 0D                .byte 3, CO+IM+NN
0035C8r 3  rr rr rr rr          .word nt_i, xt_question_do, z_question_do
0035CCr 3  rr rr        
0035CEr 3  3F 64 6F             .byte "?do"
0035D1r 3               
0035D1r 3               nt_do:
0035D1r 3  02 0D                .byte 2, CO+IM+NN
0035D3r 3  rr rr rr rr          .word nt_question_do, xt_do, z_do
0035D7r 3  rr rr        
0035D9r 3  64 6F                .byte "do"
0035DBr 3               
0035DBr 3               nt_abort_quote:
0035DBr 3  06 0D                .byte 6, CO+IM+NN
0035DDr 3  rr rr rr rr          .word nt_do, xt_abort_quote, z_abort_quote
0035E1r 3  rr rr        
0035E3r 3  61 62 6F 72          .byte "abort", $22
0035E7r 3  74 22        
0035E9r 3               
0035E9r 3               nt_abort:
0035E9r 3  05 00                .byte 5, 0
0035EBr 3  rr rr rr rr          .word nt_abort_quote, xt_abort, z_abort
0035EFr 3  rr rr        
0035F1r 3  61 62 6F 72          .byte "abort"
0035F5r 3  74           
0035F6r 3               
0035F6r 3               nt_strip_underflow:
0035F6r 3  0F 00                .byte 15, 0
0035F8r 3  rr rr rr rr          .word nt_abort, xt_strip_underflow, z_strip_underflow
0035FCr 3  rr rr        
0035FEr 3  73 74 72 69          .byte "strip-underflow"
003602r 3  70 2D 75 6E  
003606r 3  64 65 72 66  
00360Dr 3               
00360Dr 3               nt_nc_limit:
00360Dr 3  08 00                .byte 8, 0
00360Fr 3  rr rr rr rr          .word nt_strip_underflow, xt_nc_limit, z_nc_limit
003613r 3  rr rr        
003615r 3  6E 63 2D 6C          .byte "nc-limit"
003619r 3  69 6D 69 74  
00361Dr 3               
00361Dr 3               nt_allow_native:
00361Dr 3  0C 00                .byte 12, 0
00361Fr 3  rr rr rr rr          .word nt_nc_limit, xt_allow_native, z_allow_native
003623r 3  rr rr        
003625r 3  61 6C 6C 6F          .byte "allow-native"
003629r 3  77 2D 6E 61  
00362Dr 3  74 69 76 65  
003631r 3               
003631r 3               nt_always_native:
003631r 3  0D 00                .byte 13, 0
003633r 3  rr rr rr rr          .word nt_allow_native, xt_always_native, z_always_native
003637r 3  rr rr        
003639r 3  61 6C 77 61          .byte "always-native"
00363Dr 3  79 73 2D 6E  
003641r 3  61 74 69 76  
003646r 3               
003646r 3               nt_never_native:
003646r 3  0C 00                .byte 12, 0
003648r 3  rr rr rr rr          .word nt_always_native, xt_never_native, z_never_native
00364Cr 3  rr rr        
00364Er 3  6E 65 76 65          .byte "never-native"
003652r 3  72 2D 6E 61  
003656r 3  74 69 76 65  
00365Ar 3               
00365Ar 3               nt_compile_only:
00365Ar 3  0C 00                .byte 12, 0
00365Cr 3  rr rr rr rr          .word nt_never_native, xt_compile_only, z_compile_only
003660r 3  rr rr        
003662r 3  63 6F 6D 70          .byte "compile-only"
003666r 3  69 6C 65 2D  
00366Ar 3  6F 6E 6C 79  
00366Er 3               
00366Er 3               nt_immediate:
00366Er 3  09 00                .byte 9, 0
003670r 3  rr rr rr rr          .word nt_compile_only, xt_immediate, z_immediate
003674r 3  rr rr        
003676r 3  69 6D 6D 65          .byte "immediate"
00367Ar 3  64 69 61 74  
00367Er 3  65           
00367Fr 3               
00367Fr 3               nt_postpone:
00367Fr 3  08 05                .byte 8, IM+CO
003681r 3  rr rr rr rr          .word nt_immediate, xt_postpone, z_postpone
003685r 3  rr rr        
003687r 3  70 6F 73 74          .byte "postpone"
00368Br 3  70 6F 6E 65  
00368Fr 3               
00368Fr 3               nt_s_backslash_quote:
00368Fr 3  03 04                .byte 3, IM
003691r 3  rr rr rr rr          .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
003695r 3  rr rr        
003697r 3  73 5C 22             .byte "s", $5C, $22
00369Ar 3               
00369Ar 3               nt_s_quote:
00369Ar 3  02 0C                .byte 2, IM+NN
00369Cr 3  rr rr rr rr          .word nt_s_backslash_quote, xt_s_quote, z_s_quote
0036A0r 3  rr rr        
0036A2r 3  73 22                .byte "s", $22
0036A4r 3               
0036A4r 3               nt_dot_quote:
0036A4r 3  02 05                .byte 2, CO+IM
0036A6r 3  rr rr rr rr          .word nt_s_quote, xt_dot_quote, z_dot_quote
0036AAr 3  rr rr        
0036ACr 3  2E 22                .byte ".", $22
0036AEr 3               
0036AEr 3               nt_sliteral:
0036AEr 3  08 15                .byte 8, CO+IM+UF
0036B0r 3  rr rr rr rr          .word nt_dot_quote, xt_sliteral, z_sliteral
0036B4r 3  rr rr        
0036B6r 3  73 6C 69 74          .byte "sliteral"
0036BAr 3  65 72 61 6C  
0036BEr 3               
0036BEr 3               nt_literal:
0036BEr 3  07 15                .byte 7, IM+CO+UF
0036C0r 3  rr rr rr rr          .word nt_sliteral, xt_literal, z_literal
0036C4r 3  rr rr        
0036C6r 3  6C 69 74 65          .byte "literal"
0036CAr 3  72 61 6C     
0036CDr 3               
0036CDr 3               nt_right_bracket:
0036CDr 3  01 04                .byte 1, IM
0036CFr 3  rr rr rr rr          .word nt_literal, xt_right_bracket, z_right_bracket
0036D3r 3  rr rr        
0036D5r 3  5D                   .byte "]"
0036D6r 3               
0036D6r 3               nt_left_bracket:
0036D6r 3  01 05                .byte 1, IM+CO
0036D8r 3  rr rr rr rr          .word nt_right_bracket, xt_left_bracket, z_left_bracket
0036DCr 3  rr rr        
0036DEr 3  5B                   .byte "["
0036DFr 3               
0036DFr 3               nt_compile_comma:
0036DFr 3  08 18                .byte 8, UF+NN
0036E1r 3  rr rr rr rr          .word nt_left_bracket, xt_compile_comma, z_compile_comma
0036E5r 3  rr rr        
0036E7r 3  63 6F 6D 70          .byte "compile,"
0036EBr 3  69 6C 65 2C  
0036EFr 3               
0036EFr 3               nt_colon_noname:
0036EFr 3  07 00                .byte 7, 0
0036F1r 3  rr rr rr rr          .word nt_compile_comma, xt_colon_noname, z_colon_noname
0036F5r 3  rr rr        
0036F7r 3  3A 6E 6F 6E          .byte ":noname"
0036FBr 3  61 6D 65     
0036FEr 3               
0036FEr 3               nt_semicolon:
0036FEr 3  01 05                .byte 1, CO+IM
003700r 3  rr rr rr rr          .word nt_colon_noname, xt_semicolon, z_semicolon
003704r 3  rr rr        
003706r 3  3B                   .byte ";"
003707r 3               
003707r 3               nt_colon:
003707r 3  01 00                .byte 1, 0
003709r 3  rr rr rr rr          .word nt_semicolon, xt_colon, z_colon
00370Dr 3  rr rr        
00370Fr 3  3A                   .byte ":"
003710r 3               
003710r 3               nt_source_id:
003710r 3  09 00                .byte 9, 0
003712r 3  rr rr rr rr          .word nt_colon, xt_source_id, z_source_id
003716r 3  rr rr        
003718r 3  73 6F 75 72          .byte "source-id"
00371Cr 3  63 65 2D 69  
003720r 3  64           
003721r 3               
003721r 3               nt_source:
003721r 3  06 00                .byte 6, 0
003723r 3  rr rr rr rr          .word nt_source_id, xt_source, z_source
003727r 3  rr rr        
003729r 3  73 6F 75 72          .byte "source"
00372Dr 3  63 65        
00372Fr 3               
00372Fr 3               nt_execute_parsing:
00372Fr 3  0F 10                .byte 15, UF
003731r 3  rr rr rr rr          .word nt_source, xt_execute_parsing, z_execute_parsing
003735r 3  rr rr        
003737r 3  65 78 65 63          .byte "execute-parsing"
00373Br 3  75 74 65 2D  
00373Fr 3  70 61 72 73  
003746r 3               
003746r 3               nt_parse:
003746r 3  05 10                .byte 5, UF
003748r 3  rr rr rr rr          .word nt_execute_parsing, xt_parse, z_parse
00374Cr 3  rr rr        
00374Er 3  70 61 72 73          .byte "parse"
003752r 3  65           
003753r 3               
003753r 3               nt_parse_name:
003753r 3  0A 08                .byte 10, NN
003755r 3  rr rr rr rr          .word nt_parse, xt_parse_name, z_parse_name
003759r 3  rr rr        
00375Br 3  70 61 72 73          .byte "parse-name"
00375Fr 3  65 2D 6E 61  
003763r 3  6D 65        
003765r 3               
003765r 3               nt_latestnt:
003765r 3  08 00                .byte 8, 0
003767r 3  rr rr rr rr          .word nt_parse_name, xt_latestnt, z_latestnt
00376Br 3  rr rr        
00376Dr 3  6C 61 74 65          .byte "latestnt"
003771r 3  73 74 6E 74  
003775r 3               
003775r 3               nt_latestxt:
003775r 3  08 00                .byte 8, 0
003777r 3  rr rr rr rr          .word nt_latestnt, xt_latestxt, z_latestxt
00377Br 3  rr rr        
00377Dr 3  6C 61 74 65          .byte "latestxt"
003781r 3  73 74 78 74  
003785r 3               
003785r 3               nt_defer:
003785r 3  05 00                .byte 5, 0
003787r 3  rr rr rr rr          .word nt_latestxt, xt_defer, z_defer
00378Br 3  rr rr        
00378Dr 3  64 65 66 65          .byte "defer"
003791r 3  72           
003792r 3               
003792r 3               nt_to_body:
003792r 3  05 10                .byte 5, UF
003794r 3  rr rr rr rr          .word nt_defer, xt_to_body, z_to_body
003798r 3  rr rr        
00379Ar 3  3E 62 6F 64          .byte ">body"
00379Er 3  79           
00379Fr 3               
00379Fr 3               nt_name_to_string:
00379Fr 3  0B 10                .byte 11, UF
0037A1r 3  rr rr rr rr          .word nt_to_body, xt_name_to_string, z_name_to_string
0037A5r 3  rr rr        
0037A7r 3  6E 61 6D 65          .byte "name>string"
0037ABr 3  3E 73 74 72  
0037AFr 3  69 6E 67     
0037B2r 3               
0037B2r 3               nt_int_to_name:
0037B2r 3  08 10                .byte 8, UF
0037B4r 3  rr rr rr rr          .word nt_name_to_string, xt_int_to_name, z_int_to_name
0037B8r 3  rr rr        
0037BAr 3  69 6E 74 3E          .byte "int>name"
0037BEr 3  6E 61 6D 65  
0037C2r 3               
0037C2r 3               nt_name_to_int:
0037C2r 3  08 10                .byte 8, UF
0037C4r 3  rr rr rr rr          .word nt_int_to_name, xt_name_to_int, z_name_to_int
0037C8r 3  rr rr        
0037CAr 3  6E 61 6D 65          .byte "name>int"
0037CEr 3  3E 69 6E 74  
0037D2r 3               
0037D2r 3               nt_bracket_tick:
0037D2r 3  03 05                .byte 3, CO+IM
0037D4r 3  rr rr rr rr          .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
0037D8r 3  rr rr        
0037DAr 3  5B 27 5D             .byte "[']"
0037DDr 3               
0037DDr 3               nt_tick:
0037DDr 3  01 00                .byte 1, 0
0037DFr 3  rr rr rr rr          .word nt_bracket_tick, xt_tick, z_tick
0037E3r 3  rr rr        
0037E5r 3  27                   .byte "'"
0037E6r 3               
0037E6r 3               nt_find_name:
0037E6r 3  09 10                .byte 9, UF
0037E8r 3  rr rr rr rr          .word nt_tick, xt_find_name, z_find_name
0037ECr 3  rr rr        
0037EEr 3  66 69 6E 64          .byte "find-name"
0037F2r 3  2D 6E 61 6D  
0037F6r 3  65           
0037F7r 3               
0037F7r 3               nt_fill:
0037F7r 3  04 10                .byte 4, UF
0037F9r 3  rr rr rr rr          .word nt_find_name, xt_fill, z_fill
0037FDr 3  rr rr        
0037FFr 3  66 69 6C 6C          .byte "fill"
003803r 3               
003803r 3               nt_blank:
003803r 3  05 00                .byte 5, 0     ; underflow checked by FILL
003805r 3  rr rr rr rr          .word nt_fill, xt_blank, z_blank
003809r 3  rr rr        
00380Br 3  62 6C 61 6E          .byte "blank"
00380Fr 3  6B           
003810r 3               
003810r 3               nt_erase:
003810r 3  05 00                .byte 5, 0      ; underflow checked by FILL
003812r 3  rr rr rr rr          .word nt_blank, xt_erase, z_erase
003816r 3  rr rr        
003818r 3  65 72 61 73          .byte "erase"
00381Cr 3  65           
00381Dr 3               
00381Dr 3               nt_d_plus:
00381Dr 3  02 10                .byte 2, UF
00381Fr 3  rr rr rr rr          .word nt_erase, xt_d_plus, z_d_plus
003823r 3  rr rr        
003825r 3  64 2B                .byte "d+"
003827r 3               
003827r 3               nt_d_minus:
003827r 3  02 10                .byte 2, UF
003829r 3  rr rr rr rr          .word nt_d_plus, xt_d_minus, z_d_minus
00382Dr 3  rr rr        
00382Fr 3  64 2D                .byte "d-"
003831r 3               
003831r 3               nt_d_to_s:
003831r 3  03 10                .byte 3, UF
003833r 3  rr rr rr rr          .word nt_d_minus, xt_d_to_s, z_d_to_s
003837r 3  rr rr        
003839r 3  64 3E 73             .byte "d>s"
00383Cr 3               
00383Cr 3               nt_s_to_d:
00383Cr 3  03 10                .byte 3, UF
00383Er 3  rr rr rr rr          .word nt_d_to_s, xt_s_to_d, z_s_to_d
003842r 3  rr rr        
003844r 3  73 3E 64             .byte "s>d"
003847r 3               
003847r 3               nt_to:
003847r 3  02 0C                .byte 2, NN+IM
003849r 3  rr rr rr rr          .word nt_s_to_d, xt_to, z_to
00384Dr 3  rr rr        
00384Fr 3  74 6F                .byte "to"
003851r 3               
003851r 3               nt_value:               ; same code as CONSTANT
003851r 3  05 10                .byte 5, UF
003853r 3  rr rr rr rr          .word nt_to, xt_constant, z_constant
003857r 3  rr rr        
003859r 3  76 61 6C 75          .byte "value"
00385Dr 3  65           
00385Er 3               
00385Er 3               nt_constant:
00385Er 3  08 10                .byte 8, UF
003860r 3  rr rr rr rr          .word nt_value, xt_constant, z_constant
003864r 3  rr rr        
003866r 3  63 6F 6E 73          .byte "constant"
00386Ar 3  74 61 6E 74  
00386Er 3               
00386Er 3               nt_variable:
00386Er 3  08 00                .byte 8, 0
003870r 3  rr rr rr rr          .word nt_constant, xt_variable, z_variable
003874r 3  rr rr        
003876r 3  76 61 72 69          .byte "variable"
00387Ar 3  61 62 6C 65  
00387Er 3               
00387Er 3               nt_does:
00387Er 3  05 05                .byte 5, CO+IM
003880r 3  rr rr rr rr          .word nt_variable, xt_does, z_does
003884r 3  rr rr        
003886r 3  64 6F 65 73          .byte "does>"
00388Ar 3  3E           
00388Br 3               
00388Br 3               nt_create:
00388Br 3  06 00                .byte 6, 0
00388Dr 3  rr rr rr rr          .word nt_does, xt_create, z_create
003891r 3  rr rr        
003893r 3  63 72 65 61          .byte "create"
003897r 3  74 65        
003899r 3               
003899r 3               nt_allot:
003899r 3  05 10                .byte 5, UF
00389Br 3  rr rr rr rr          .word nt_create, xt_allot, z_allot
00389Fr 3  rr rr        
0038A1r 3  61 6C 6C 6F          .byte "allot"
0038A5r 3  74           
0038A6r 3               
0038A6r 3               nt_key:
0038A6r 3  03 00                .byte 3, 0
0038A8r 3  rr rr rr rr          .word nt_allot, xt_key, z_key
0038ACr 3  rr rr        
0038AEr 3  6B 65 79             .byte "key"
0038B1r 3               
0038B1r 3               nt_depth:
0038B1r 3  05 00                .byte 5, 0
0038B3r 3  rr rr rr rr          .word nt_key, xt_depth, z_depth
0038B7r 3  rr rr        
0038B9r 3  64 65 70 74          .byte "depth"
0038BDr 3  68           
0038BEr 3               
0038BEr 3               nt_unused:
0038BEr 3  06 00                .byte 6, 0
0038C0r 3  rr rr rr rr          .word nt_depth, xt_unused, z_unused
0038C4r 3  rr rr        
0038C6r 3  75 6E 75 73          .byte "unused"
0038CAr 3  65 64        
0038CCr 3               
0038CCr 3               nt_r_to_input:
0038CCr 3  07 08                .byte 7, NN
0038CEr 3  rr rr rr rr          .word nt_unused, xt_r_to_input, z_r_to_input
0038D2r 3  rr rr        
0038D4r 3  72 3E 69 6E          .byte "r>input"
0038D8r 3  70 75 74     
0038DBr 3               
0038DBr 3               nt_input_to_r:
0038DBr 3  07 08                .byte 7, NN
0038DDr 3  rr rr rr rr          .word nt_r_to_input, xt_input_to_r, z_input_to_r
0038E1r 3  rr rr        
0038E3r 3  69 6E 70 75          .byte "input>r"
0038E7r 3  74 3E 72     
0038EAr 3               
0038EAr 3               nt_accept:
0038EAr 3  06 18                .byte 6, UF+NN
0038ECr 3  rr rr rr rr          .word nt_input_to_r, xt_accept, z_accept
0038F0r 3  rr rr        
0038F2r 3  61 63 63 65          .byte "accept"
0038F6r 3  70 74        
0038F8r 3               
0038F8r 3               nt_refill:
0038F8r 3  06 00                .byte 6, 0
0038FAr 3  rr rr rr rr          .word nt_accept, xt_refill, z_refill
0038FEr 3  rr rr        
003900r 3  72 65 66 69          .byte "refill"
003904r 3  6C 6C        
003906r 3               
003906r 3               nt_slash_string:
003906r 3  07 10                .byte 7, UF
003908r 3  rr rr rr rr          .word nt_refill, xt_slash_string, z_slash_string
00390Cr 3  rr rr        
00390Er 3  2F 73 74 72          .byte "/string"
003912r 3  69 6E 67     
003915r 3               
003915r 3               nt_minus_leading:
003915r 3  08 10                .byte 8, UF
003917r 3  rr rr rr rr          .word nt_slash_string, xt_minus_leading, z_minus_leading
00391Br 3  rr rr        
00391Dr 3  2D 6C 65 61          .byte "-leading"
003921r 3  64 69 6E 67  
003925r 3               
003925r 3               nt_minus_trailing:
003925r 3  09 10                .byte 9, UF
003927r 3  rr rr rr rr          .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
00392Br 3  rr rr        
00392Dr 3  2D 74 72 61          .byte "-trailing"
003931r 3  69 6C 69 6E  
003935r 3  67           
003936r 3               
003936r 3               nt_bl:
003936r 3  02 00                .byte 2, 0
003938r 3  rr rr rr rr          .word nt_minus_trailing, xt_bl, z_bl
00393Cr 3  rr rr        
00393Er 3  62 6C                .byte "bl"
003940r 3               
003940r 3               nt_spaces:
003940r 3  06 10                .byte 6, UF
003942r 3  rr rr rr rr          .word nt_bl, xt_spaces, z_spaces
003946r 3  rr rr        
003948r 3  73 70 61 63          .byte "spaces"
00394Cr 3  65 73        
00394Er 3               
00394Er 3               nt_bounds:
00394Er 3  06 10                .byte 6, UF
003950r 3  rr rr rr rr          .word nt_spaces, xt_bounds, z_bounds
003954r 3  rr rr        
003956r 3  62 6F 75 6E          .byte "bounds"
00395Ar 3  64 73        
00395Cr 3               
00395Cr 3               nt_c_comma:
00395Cr 3  02 10                .byte 2, UF
00395Er 3  rr rr rr rr          .word nt_bounds, xt_c_comma, z_c_comma
003962r 3  rr rr        
003964r 3  63 2C                .byte "c,"
003966r 3               
003966r 3               nt_dnegate:
003966r 3  07 10                .byte 7, UF
003968r 3  rr rr rr rr          .word nt_c_comma, xt_dnegate, z_dnegate
00396Cr 3  rr rr        
00396Er 3  64 6E 65 67          .byte "dnegate"
003972r 3  61 74 65     
003975r 3               
003975r 3               nt_negate:
003975r 3  06 10                .byte 6, UF
003977r 3  rr rr rr rr          .word nt_dnegate, xt_negate, z_negate
00397Br 3  rr rr        
00397Dr 3  6E 65 67 61          .byte "negate"
003981r 3  74 65        
003983r 3               
003983r 3               nt_invert:
003983r 3  06 10                .byte 6, UF
003985r 3  rr rr rr rr          .word nt_negate, xt_invert, z_invert
003989r 3  rr rr        
00398Br 3  69 6E 76 65          .byte "invert"
00398Fr 3  72 74        
003991r 3               
003991r 3               nt_two_to_r:
003991r 3  03 11                .byte 3, CO+UF          ; native is special case
003993r 3  rr rr rr rr          .word nt_invert, xt_two_to_r, z_two_to_r
003997r 3  rr rr        
003999r 3  32 3E 72             .byte "2>r"
00399Cr 3               
00399Cr 3               nt_two_r_from:
00399Cr 3  03 01                .byte 3, CO             ; native is special case
00399Er 3  rr rr rr rr          .word nt_two_to_r, xt_two_r_from, z_two_r_from
0039A2r 3  rr rr        
0039A4r 3  32 72 3E             .byte "2r>"
0039A7r 3               
0039A7r 3               nt_two_r_fetch:
0039A7r 3  03 09                .byte 3, CO+NN          ; native is special case, leave NN for now
0039A9r 3  rr rr rr rr          .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
0039ADr 3  rr rr        
0039AFr 3  32 72 40             .byte "2r@"
0039B2r 3               
0039B2r 3               nt_two_literal:
0039B2r 3  08 14                .byte 8, UF+IM
0039B4r 3  rr rr rr rr          .word nt_two_r_fetch, xt_two_literal, z_two_literal
0039B8r 3  rr rr        
0039BAr 3  32 6C 69 74          .byte "2literal"
0039BEr 3  65 72 61 6C  
0039C2r 3               
0039C2r 3               nt_two_constant:
0039C2r 3  09 10                .byte 9, UF
0039C4r 3  rr rr rr rr          .word nt_two_literal, xt_two_constant, z_two_constant
0039C8r 3  rr rr        
0039CAr 3  32 63 6F 6E          .byte "2constant"
0039CEr 3  73 74 61 6E  
0039D2r 3  74           
0039D3r 3               
0039D3r 3               nt_two_variable:
0039D3r 3  09 00                .byte 9, 0
0039D5r 3  rr rr rr rr          .word nt_two_constant, xt_two_variable, z_two_variable
0039D9r 3  rr rr        
0039DBr 3  32 76 61 72          .byte "2variable"
0039DFr 3  69 61 62 6C  
0039E3r 3  65           
0039E4r 3               
0039E4r 3               nt_two_fetch:
0039E4r 3  02 10                .byte 2, UF
0039E6r 3  rr rr rr rr          .word nt_two_variable, xt_two_fetch, z_two_fetch
0039EAr 3  rr rr        
0039ECr 3  32 40                .byte "2@"
0039EEr 3               
0039EEr 3               nt_two_store:
0039EEr 3  02 10                .byte 2, UF
0039F0r 3  rr rr rr rr          .word nt_two_fetch, xt_two_store, z_two_store
0039F4r 3  rr rr        
0039F6r 3  32 21                .byte "2!"
0039F8r 3               
0039F8r 3               nt_two_over:
0039F8r 3  05 10                .byte 5, UF
0039FAr 3  rr rr rr rr          .word nt_two_store, xt_two_over, z_two_over
0039FEr 3  rr rr        
003A00r 3  32 6F 76 65          .byte "2over"
003A04r 3  72           
003A05r 3               
003A05r 3               nt_two_swap:
003A05r 3  05 10                .byte 5, UF
003A07r 3  rr rr rr rr          .word nt_two_over, xt_two_swap, z_two_swap
003A0Br 3  rr rr        
003A0Dr 3  32 73 77 61          .byte "2swap"
003A11r 3  70           
003A12r 3               
003A12r 3               nt_two_drop:
003A12r 3  05 10                .byte 5, UF
003A14r 3  rr rr rr rr          .word nt_two_swap, xt_two_drop, z_two_drop
003A18r 3  rr rr        
003A1Ar 3  32 64 72 6F          .byte "2drop"
003A1Er 3  70           
003A1Fr 3               
003A1Fr 3               nt_max:
003A1Fr 3  03 10                .byte 3, UF
003A21r 3  rr rr rr rr          .word nt_two_drop, xt_max, z_max
003A25r 3  rr rr        
003A27r 3  6D 61 78             .byte "max"
003A2Ar 3               
003A2Ar 3               nt_min:
003A2Ar 3  03 10                .byte 3, UF
003A2Cr 3  rr rr rr rr          .word nt_max, xt_min, z_min
003A30r 3  rr rr        
003A32r 3  6D 69 6E             .byte "min"
003A35r 3               
003A35r 3               nt_zero_less:
003A35r 3  02 10                .byte 2, UF
003A37r 3  rr rr rr rr          .word nt_min, xt_zero_less, z_zero_less
003A3Br 3  rr rr        
003A3Dr 3  30 3C                .byte "0<"
003A3Fr 3               
003A3Fr 3               nt_zero_greater:
003A3Fr 3  02 10                .byte 2, UF
003A41r 3  rr rr rr rr          .word nt_zero_less, xt_zero_greater, z_zero_greater
003A45r 3  rr rr        
003A47r 3  30 3E                .byte "0>"
003A49r 3               
003A49r 3               nt_zero_unequal:
003A49r 3  03 10                .byte 3, UF
003A4Br 3  rr rr rr rr          .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
003A4Fr 3  rr rr        
003A51r 3  30 3C 3E             .byte "0<>"
003A54r 3               
003A54r 3               nt_zero_equal:
003A54r 3  02 10                .byte 2, UF
003A56r 3  rr rr rr rr          .word nt_zero_unequal, xt_zero_equal, z_zero_equal
003A5Ar 3  rr rr        
003A5Cr 3  30 3D                .byte "0="
003A5Er 3               
003A5Er 3               nt_greater_than:
003A5Er 3  01 10                .byte 1, UF
003A60r 3  rr rr rr rr          .word nt_zero_equal, xt_greater_than, z_greater_than
003A64r 3  rr rr        
003A66r 3  3E                   .byte ">"
003A67r 3               
003A67r 3               nt_u_greater_than:
003A67r 3  02 10                .byte 2, UF
003A69r 3  rr rr rr rr          .word nt_greater_than, xt_u_greater_than, z_u_greater_than
003A6Dr 3  rr rr        
003A6Fr 3  75 3E                .byte "u>"
003A71r 3               
003A71r 3               nt_u_less_than:
003A71r 3  02 10                .byte 2, UF
003A73r 3  rr rr rr rr          .word nt_u_greater_than, xt_u_less_than, z_u_less_than
003A77r 3  rr rr        
003A79r 3  75 3C                .byte "u<"
003A7Br 3               
003A7Br 3               nt_less_than:
003A7Br 3  01 10                .byte 1, UF
003A7Dr 3  rr rr rr rr          .word nt_u_less_than, xt_less_than, z_less_than
003A81r 3  rr rr        
003A83r 3  3C                   .byte "<"
003A84r 3               
003A84r 3               nt_not_equals:
003A84r 3  02 10                .byte 2, UF
003A86r 3  rr rr rr rr          .word nt_less_than, xt_not_equals, z_not_equals
003A8Ar 3  rr rr        
003A8Cr 3  3C 3E                .byte "<>"
003A8Er 3               
003A8Er 3               nt_equal:
003A8Er 3  01 10                .byte 1, UF
003A90r 3  rr rr rr rr          .word nt_not_equals, xt_equal, z_equal
003A94r 3  rr rr        
003A96r 3  3D                   .byte "="
003A97r 3               
003A97r 3               nt_two_slash:
003A97r 3  02 10                .byte 2, UF
003A99r 3  rr rr rr rr          .word nt_equal, xt_two_slash, z_two_slash
003A9Dr 3  rr rr        
003A9Fr 3  32 2F                .byte "2/"
003AA1r 3               
003AA1r 3               nt_two_star:
003AA1r 3  02 10                .byte 2, UF
003AA3r 3  rr rr rr rr          .word nt_two_slash, xt_two_star, z_two_star
003AA7r 3  rr rr        
003AA9r 3  32 2A                .byte "2*"
003AABr 3               
003AABr 3               nt_one_plus:
003AABr 3  02 10                .byte 2, UF
003AADr 3  rr rr rr rr          .word nt_two_star, xt_one_plus, z_one_plus
003AB1r 3  rr rr        
003AB3r 3  31 2B                .byte "1+"
003AB5r 3               
003AB5r 3               nt_one_minus:
003AB5r 3  02 10                .byte 2, UF
003AB7r 3  rr rr rr rr          .word nt_one_plus, xt_one_minus, z_one_minus
003ABBr 3  rr rr        
003ABDr 3  31 2D                .byte "1-"
003ABFr 3               
003ABFr 3               nt_here:
003ABFr 3  04 00                .byte 4, 0
003AC1r 3  rr rr rr rr          .word nt_one_minus, xt_here, z_here
003AC5r 3  rr rr        
003AC7r 3  68 65 72 65          .byte "here"
003ACBr 3               
003ACBr 3               nt_cell_plus:
003ACBr 3  05 10                .byte 5, UF
003ACDr 3  rr rr rr rr          .word nt_here, xt_cell_plus, z_cell_plus
003AD1r 3  rr rr        
003AD3r 3  63 65 6C 6C          .byte "cell+"
003AD7r 3  2B           
003AD8r 3               
003AD8r 3               nt_cells:
003AD8r 3  05 00                .byte 5, 0
003ADAr 3  rr rr rr rr          .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
003ADEr 3  rr rr        
003AE0r 3  63 65 6C 6C          .byte "cells"
003AE4r 3  73           
003AE5r 3               
003AE5r 3               nt_chars:
003AE5r 3  05 12                .byte 5, AN+UF   ; deleted during compile
003AE7r 3  rr rr rr rr          .word nt_cells, xt_chars, z_chars
003AEBr 3  rr rr        
003AEDr 3  63 68 61 72          .byte "chars"
003AF1r 3  73           
003AF2r 3               
003AF2r 3               nt_char_plus:
003AF2r 3  05 00                .byte 5, 0
003AF4r 3  rr rr rr rr          .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
003AF8r 3  rr rr        
003AFAr 3  63 68 61 72          .byte "char+"
003AFEr 3  2B           
003AFFr 3               
003AFFr 3               nt_bracket_char:
003AFFr 3  06 05                .byte 6, CO+IM
003B01r 3  rr rr rr rr          .word nt_char_plus, xt_bracket_char, z_bracket_char
003B05r 3  rr rr        
003B07r 3  5B 63 68 61          .byte "[char]"
003B0Br 3  72 5D        
003B0Dr 3               
003B0Dr 3               nt_char:
003B0Dr 3  04 00                .byte 4, 0
003B0Fr 3  rr rr rr rr          .word nt_bracket_char, xt_char, z_char
003B13r 3  rr rr        
003B15r 3  63 68 61 72          .byte "char"
003B19r 3               
003B19r 3               nt_pick:
003B19r 3  04 00                .byte 4, 0    ; underflow check is complicated, leave off here
003B1Br 3  rr rr rr rr          .word nt_char, xt_pick, z_pick
003B1Fr 3  rr rr        
003B21r 3  70 69 63 6B          .byte "pick"
003B25r 3               
003B25r 3               nt_lshift:
003B25r 3  06 10                .byte 6, UF
003B27r 3  rr rr rr rr          .word nt_pick, xt_lshift, z_lshift
003B2Br 3  rr rr        
003B2Dr 3  6C 73 68 69          .byte "lshift"
003B31r 3  66 74        
003B33r 3               
003B33r 3               nt_rshift:
003B33r 3  06 10                .byte 6, UF
003B35r 3  rr rr rr rr          .word nt_lshift, xt_rshift, z_rshift
003B39r 3  rr rr        
003B3Br 3  72 73 68 69          .byte "rshift"
003B3Fr 3  66 74        
003B41r 3               
003B41r 3               nt_xor:
003B41r 3  03 10                .byte 3, UF
003B43r 3  rr rr rr rr          .word nt_rshift, xt_xor, z_xor
003B47r 3  rr rr        
003B49r 3  78 6F 72             .byte "xor"
003B4Cr 3               
003B4Cr 3               nt_or:
003B4Cr 3  02 10                .byte 2, UF
003B4Er 3  rr rr rr rr          .word nt_xor, xt_or, z_or
003B52r 3  rr rr        
003B54r 3  6F 72                .byte "or"
003B56r 3               
003B56r 3               nt_and:
003B56r 3  03 10                .byte 3, UF
003B58r 3  rr rr rr rr          .word nt_or, xt_and, z_and
003B5Cr 3  rr rr        
003B5Er 3  61 6E 64             .byte "and"
003B61r 3               
003B61r 3               nt_dabs:
003B61r 3  04 10                .byte 4, UF
003B63r 3  rr rr rr rr          .word nt_and, xt_dabs, z_dabs
003B67r 3  rr rr        
003B69r 3  64 61 62 73          .byte "dabs"
003B6Dr 3               
003B6Dr 3               nt_abs:
003B6Dr 3  03 10                .byte 3, UF
003B6Fr 3  rr rr rr rr          .word nt_dabs, xt_abs, z_abs
003B73r 3  rr rr        
003B75r 3  61 62 73             .byte "abs"
003B78r 3               
003B78r 3               nt_minus:
003B78r 3  01 10                .byte 1, UF
003B7Ar 3  rr rr rr rr          .word nt_abs, xt_minus, z_minus
003B7Er 3  rr rr        
003B80r 3  2D                   .byte "-"
003B81r 3               
003B81r 3               nt_plus:
003B81r 3  01 10                .byte 1, UF
003B83r 3  rr rr rr rr          .word nt_minus, xt_plus, z_plus
003B87r 3  rr rr        
003B89r 3  2B                   .byte "+"
003B8Ar 3               
003B8Ar 3               nt_question_dup:
003B8Ar 3  04 10                .byte 4, UF
003B8Cr 3  rr rr rr rr          .word nt_plus, xt_question_dup, z_question_dup
003B90r 3  rr rr        
003B92r 3  3F 64 75 70          .byte "?dup"
003B96r 3               
003B96r 3               nt_two_dup:
003B96r 3  04 10                .byte 4, UF
003B98r 3  rr rr rr rr          .word nt_question_dup, xt_two_dup, z_two_dup
003B9Cr 3  rr rr        
003B9Er 3  32 64 75 70          .byte "2dup"
003BA2r 3               
003BA2r 3               nt_two:
003BA2r 3  01 00                .byte 1, 0
003BA4r 3  rr rr rr rr          .word nt_two_dup, xt_two, z_two
003BA8r 3  rr rr        
003BAAr 3  32                   .byte "2"
003BABr 3               
003BABr 3               nt_one:
003BABr 3  01 00                .byte 1, 0
003BADr 3  rr rr rr rr          .word nt_two, xt_one, z_one
003BB1r 3  rr rr        
003BB3r 3  31                   .byte "1"
003BB4r 3               
003BB4r 3               nt_zero:
003BB4r 3  01 00                .byte 1, 0
003BB6r 3  rr rr rr rr          .word nt_one, xt_zero, z_zero
003BBAr 3  rr rr        
003BBCr 3  30                   .byte "0"
003BBDr 3               
003BBDr 3               nt_space:
003BBDr 3  05 00                .byte 5, 0
003BBFr 3  rr rr rr rr          .word nt_zero, xt_space, z_space
003BC3r 3  rr rr        
003BC5r 3  73 70 61 63          .byte "space"
003BC9r 3  65           
003BCAr 3               
003BCAr 3               nt_true:
003BCAr 3  04 00                .byte 4, 0
003BCCr 3  rr rr rr rr          .word nt_space, xt_true, z_true
003BD0r 3  rr rr        
003BD2r 3  74 72 75 65          .byte "true"
003BD6r 3               
003BD6r 3               nt_false:
003BD6r 3  05 00                .byte 5, 0
003BD8r 3  rr rr rr rr          .word nt_true, xt_false, z_false
003BDCr 3  rr rr        
003BDEr 3  66 61 6C 73          .byte "false"
003BE2r 3  65           
003BE3r 3               
003BE3r 3               nt_question:
003BE3r 3  01 00                .byte 1, 0
003BE5r 3  rr rr rr rr          .word nt_false, xt_question, z_question
003BE9r 3  rr rr        
003BEBr 3  3F                   .byte "?"
003BECr 3               
003BECr 3               nt_ud_dot_r:
003BECr 3  04 10                .byte 4, UF
003BEEr 3  rr rr rr rr          .word nt_question, xt_ud_dot_r, z_ud_dot_r
003BF2r 3  rr rr        
003BF4r 3  75 64 2E 72          .byte "ud.r"
003BF8r 3               
003BF8r 3               nt_ud_dot:
003BF8r 3  03 10                .byte 3, UF
003BFAr 3  rr rr rr rr          .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
003BFEr 3  rr rr        
003C00r 3  75 64 2E             .byte "ud."
003C03r 3               
003C03r 3               nt_d_dot_r:
003C03r 3  03 10                .byte 3, UF
003C05r 3  rr rr rr rr          .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
003C09r 3  rr rr        
003C0Br 3  64 2E 72             .byte "d.r"
003C0Er 3               
003C0Er 3               nt_d_dot:
003C0Er 3  02 10                .byte 2, UF
003C10r 3  rr rr rr rr          .word nt_d_dot_r, xt_d_dot, z_d_dot
003C14r 3  rr rr        
003C16r 3  64 2E                .byte "d."
003C18r 3               
003C18r 3               nt_dot_r:
003C18r 3  02 10                .byte 2, UF
003C1Ar 3  rr rr rr rr          .word nt_d_dot, xt_dot_r, z_dot_r
003C1Er 3  rr rr        
003C20r 3  2E 72                .byte ".r"
003C22r 3               
003C22r 3               nt_u_dot_r:
003C22r 3  03 10                .byte 3, UF
003C24r 3  rr rr rr rr          .word nt_dot_r, xt_u_dot_r, z_u_dot_r
003C28r 3  rr rr        
003C2Ar 3  75 2E 72             .byte "u.r"
003C2Dr 3               
003C2Dr 3               nt_u_dot:
003C2Dr 3  02 10                .byte 2, UF
003C2Fr 3  rr rr rr rr          .word nt_u_dot_r, xt_u_dot, z_u_dot
003C33r 3  rr rr        
003C35r 3  75 2E                .byte "u."
003C37r 3               
003C37r 3               nt_dot:
003C37r 3  01 10                .byte 1, UF
003C39r 3  rr rr rr rr          .word nt_u_dot, xt_dot, z_dot
003C3Dr 3  rr rr        
003C3Fr 3  2E                   .byte "."
003C40r 3               
003C40r 3               nt_type:
003C40r 3  04 10                .byte 4, UF
003C42r 3  rr rr rr rr          .word nt_dot, xt_type, z_type
003C46r 3  rr rr        
003C48r 3  74 79 70 65          .byte "type"
003C4Cr 3               
003C4Cr 3               nt_emit:
003C4Cr 3  04 18                .byte 4, NN+UF
003C4Er 3  rr rr rr rr          .word nt_type, xt_emit, z_emit
003C52r 3  rr rr        
003C54r 3  65 6D 69 74          .byte "emit"
003C58r 3               
003C58r 3               nt_execute:
003C58r 3  07 10                .byte 7, UF
003C5Ar 3  rr rr rr rr          .word nt_emit, xt_execute, z_execute
003C5Er 3  rr rr        
003C60r 3  65 78 65 63          .byte "execute"
003C64r 3  75 74 65     
003C67r 3               
003C67r 3               nt_plus_store:
003C67r 3  02 10                .byte 2, UF
003C69r 3  rr rr rr rr          .word nt_execute, xt_plus_store, z_plus_store
003C6Dr 3  rr rr        
003C6Fr 3  2B 21                .byte "+!"
003C71r 3               
003C71r 3               nt_c_store:
003C71r 3  02 10                .byte 2, UF
003C73r 3  rr rr rr rr          .word nt_plus_store, xt_c_store, z_c_store
003C77r 3  rr rr        
003C79r 3  63 21                .byte "c!"
003C7Br 3               
003C7Br 3               nt_c_fetch:
003C7Br 3  02 10                .byte 2, UF
003C7Dr 3  rr rr rr rr          .word nt_c_store, xt_c_fetch, z_c_fetch
003C81r 3  rr rr        
003C83r 3  63 40                .byte "c@"
003C85r 3               
003C85r 3               nt_comma:
003C85r 3  01 10                .byte 1, UF
003C87r 3  rr rr rr rr          .word nt_c_fetch, xt_comma, z_comma
003C8Br 3  rr rr        
003C8Dr 3  2C                   .byte ","
003C8Er 3               
003C8Er 3               nt_tuck:
003C8Er 3  04 10                .byte 4, UF
003C90r 3  rr rr rr rr          .word nt_comma, xt_tuck, z_tuck
003C94r 3  rr rr        
003C96r 3  74 75 63 6B          .byte "tuck"
003C9Ar 3               
003C9Ar 3               nt_not_rote:
003C9Ar 3  04 10                .byte 4, UF
003C9Cr 3  rr rr rr rr          .word nt_tuck, xt_not_rote, z_not_rote
003CA0r 3  rr rr        
003CA2r 3  2D 72 6F 74          .byte "-rot"
003CA6r 3               
003CA6r 3               nt_rot:
003CA6r 3  03 10                .byte 3, UF
003CA8r 3  rr rr rr rr          .word nt_not_rote, xt_rot, z_rot
003CACr 3  rr rr        
003CAEr 3  72 6F 74             .byte "rot"
003CB1r 3               
003CB1r 3               nt_nip:
003CB1r 3  03 10                .byte 3, UF
003CB3r 3  rr rr rr rr          .word nt_rot, xt_nip, z_nip
003CB7r 3  rr rr        
003CB9r 3  6E 69 70             .byte "nip"
003CBCr 3               
003CBCr 3               nt_r_fetch:
003CBCr 3  02 01                .byte 2, CO    ; native is special case
003CBEr 3  rr rr rr rr          .word nt_nip, xt_r_fetch, z_r_fetch
003CC2r 3  rr rr        
003CC4r 3  72 40                .byte "r@"
003CC6r 3               
003CC6r 3               nt_r_from:
003CC6r 3  02 01                .byte 2, CO    ; native is special case
003CC8r 3  rr rr rr rr          .word nt_r_fetch, xt_r_from, z_r_from
003CCCr 3  rr rr        
003CCEr 3  72 3E                .byte "r>"
003CD0r 3               
003CD0r 3               nt_to_r:
003CD0r 3  02 11                .byte 2, CO+UF ; native is special case
003CD2r 3  rr rr rr rr          .word nt_r_from, xt_to_r, z_to_r
003CD6r 3  rr rr        
003CD8r 3  3E 72                .byte ">r"
003CDAr 3               
003CDAr 3               nt_over:
003CDAr 3  04 10                .byte 4, UF
003CDCr 3  rr rr rr rr          .word nt_to_r, xt_over, z_over
003CE0r 3  rr rr        
003CE2r 3  6F 76 65 72          .byte "over"
003CE6r 3               
003CE6r 3               nt_fetch:
003CE6r 3  01 10                .byte 1, UF
003CE8r 3  rr rr rr rr          .word nt_over, xt_fetch, z_fetch
003CECr 3  rr rr        
003CEEr 3  40                   .byte "@"
003CEFr 3               
003CEFr 3               nt_store:
003CEFr 3  01 10                .byte 1, UF
003CF1r 3  rr rr rr rr          .word nt_fetch, xt_store, z_store
003CF5r 3  rr rr        
003CF7r 3  21                   .byte "!"
003CF8r 3               
003CF8r 3               nt_swap:
003CF8r 3  04 10                .byte 4, UF
003CFAr 3  rr rr rr rr          .word nt_store, xt_swap, z_swap
003CFEr 3  rr rr        
003D00r 3  73 77 61 70          .byte "swap"
003D04r 3               
003D04r 3               nt_dup:
003D04r 3  03 10                .byte 3, UF
003D06r 3  rr rr rr rr          .word nt_swap, xt_dup, z_dup
003D0Ar 3  rr rr        
003D0Cr 3  64 75 70             .byte "dup"
003D0Fr 3               
003D0Fr 3               ; DROP is always the first native word in the Dictionary
003D0Fr 3               dictionary_start:
003D0Fr 3               nt_drop:
003D0Fr 3  04 10                .byte 4, UF
003D11r 3  rr rr rr rr          .word nt_dup, xt_drop, z_drop
003D15r 3  rr rr        
003D17r 3  64 72 6F 70          .byte "drop"
003D1Br 3               
003D1Br 3               ; END of FORTH-WORDLIST
003D1Br 3               
003D1Br 3               
003D1Br 3               ; ROOT-WORDLIST
003D1Br 3                       ; This is a short wordlist that has just the words needed to
003D1Br 3                       ; set the wordlists. These words are also included in the
003D1Br 3                       ; FORTH-WORDLIST as well.
003D1Br 3               
003D1Br 3               nt_root_words:
003D1Br 3  05 00                .byte 5, 0
003D1Dr 3  00 00 rr rr          .word 0000, xt_words, z_words
003D21r 3  rr rr        
003D23r 3  77 6F 72 64          .byte "words"
003D27r 3  73           
003D28r 3               
003D28r 3               nt_root_forth_wordlist: ; shares code with ZERO
003D28r 3  0E 00                .byte 14, 0
003D2Ar 3  rr rr rr rr          .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
003D2Er 3  rr rr        
003D30r 3  66 6F 72 74          .byte "forth-wordlist"
003D34r 3  68 2D 77 6F  
003D38r 3  72 64 6C 69  
003D3Er 3               
003D3Er 3               nt_root_forth:
003D3Er 3  05 00                .byte 5, 0
003D40r 3  rr rr rr rr          .word nt_root_forth_wordlist, xt_forth, z_forth
003D44r 3  rr rr        
003D46r 3  66 6F 72 74          .byte "forth"
003D4Ar 3  68           
003D4Br 3               
003D4Br 3               root_dictionary_start:
003D4Br 3               nt_root_set_order:
003D4Br 3  09 00                .byte 9, 0
003D4Dr 3  rr rr rr rr          .word nt_root_forth, xt_set_order, z_set_order
003D51r 3  rr rr        
003D53r 3  73 65 74 2D          .byte "set-order"
003D57r 3  6F 72 64 65  
003D5Br 3  72           
003D5Cr 3               
003D5Cr 3               ; END of ROOT-WORDLIST
003D5Cr 3               
003D5Cr 3               
003D5Cr 3               ; ; EDITOR-WORDLIST
003D5Cr 3               
003D5Cr 3               ; nt_editor_enter_screen:
003D5Cr 3               ;         .byte 12, 0
003D5Cr 3               ;         .word 0000, xt_editor_enter_screen, z_editor_enter_screen
003D5Cr 3               ;         .byte "enter-screen"
003D5Cr 3               
003D5Cr 3               ; nt_editor_erase_screen:
003D5Cr 3               ;         .byte 12, 0
003D5Cr 3               ;         .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
003D5Cr 3               ;         .byte "erase-screen"
003D5Cr 3               
003D5Cr 3               ; nt_editor_el:
003D5Cr 3               ;         .byte 2, 0
003D5Cr 3               ;         .word nt_editor_erase_screen, xt_editor_el, z_editor_el
003D5Cr 3               ;         .byte "el"
003D5Cr 3               
003D5Cr 3               ; nt_editor_l:
003D5Cr 3               ;         .byte 1, 0
003D5Cr 3               ;         .word nt_editor_el, xt_editor_l, z_editor_l
003D5Cr 3               ;         .byte "l"
003D5Cr 3               
003D5Cr 3               ; nt_editor_line:
003D5Cr 3               ;         .byte 4, UF
003D5Cr 3               ;         .word nt_editor_l, xt_editor_line, z_editor_line
003D5Cr 3               ;         .byte "line"
003D5Cr 3               
003D5Cr 3               editor_dictionary_start:
003D5Cr 3               ; nt_editor_o:
003D5Cr 3               ;         .byte 1, 0
003D5Cr 3               ;         .word nt_editor_line, xt_editor_o, z_editor_o
003D5Cr 3               ;         .byte "o"
003D5Cr 3               
003D5Cr 3               ; ; END of EDITOR-WORDLIST
003D5Cr 3               
003D5Cr 3               
003D5Cr 3               ; ; ASSEMBLER-WORDLIST
003D5Cr 3               
003D5Cr 3               ; ; Labels for the opcodes have the format "nt_asm_<OPC>" where a futher
003D5Cr 3               ; ; underscore replaces any dot present in the SAN mnemonic. The hash sign for
003D5Cr 3               ; ; immediate addressing is replaced by an "h" (for example, the label code for
003D5Cr 3               ; ; "lda.#" is "xt_adm_lda_h"). All opcodes are immediate.
003D5Cr 3               assembler_dictionary_start:
003D5Cr 3               ; nt_asm_adc_h:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_adc_x
003D5Cr 3               ; 		.word xt_asm_adc_h, z_asm_adc_h
003D5Cr 3               ; 		.byte "adc.#"
003D5Cr 3               
003D5Cr 3               ; nt_asm_adc_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_adc_y
003D5Cr 3               ; 		.word xt_asm_adc_x, z_asm_adc_x
003D5Cr 3               ; 		.byte "adc.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_adc_y:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_adc_z
003D5Cr 3               ; 		.word xt_asm_adc_y, z_asm_adc_y
003D5Cr 3               ; 		.byte "adc.y"
003D5Cr 3               
003D5Cr 3               ; nt_asm_adc_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_adc_zi
003D5Cr 3               ; 		.word xt_asm_adc_z, z_asm_adc_z
003D5Cr 3               ; 		.byte "adc.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_adc_zi:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_adc_ziy
003D5Cr 3               ; 		.word xt_asm_adc_zi, z_asm_adc_zi
003D5Cr 3               ; 		.byte "adc.zi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_adc_ziy:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_adc_zx
003D5Cr 3               ; 		.word xt_asm_adc_ziy, z_asm_adc_ziy
003D5Cr 3               ; 		.byte "adc.ziy"
003D5Cr 3               
003D5Cr 3               ; nt_asm_adc_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_adc_zxi
003D5Cr 3               ; 		.word xt_asm_adc_zx, z_asm_adc_zx
003D5Cr 3               ; 		.byte "adc.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_adc_zxi:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_and
003D5Cr 3               ; 		.word xt_asm_adc_zxi, z_asm_adc_zxi
003D5Cr 3               ; 		.byte "adc.zxi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_and:     ; not "and" because of conflicts with Forth word
003D5Cr 3               ; 		.byte 4, IM
003D5Cr 3               ;                 .word nt_asm_and_h
003D5Cr 3               ; 		.word xt_asm_and, z_asm_and
003D5Cr 3               ; 		.byte "and."
003D5Cr 3               
003D5Cr 3               ; nt_asm_and_h:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_and_x
003D5Cr 3               ; 		.word xt_asm_and_h, z_asm_and_h
003D5Cr 3               ; 		.byte "and.#"
003D5Cr 3               
003D5Cr 3               ; nt_asm_and_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_and_y
003D5Cr 3               ; 		.word xt_asm_and_x, z_asm_and_x
003D5Cr 3               ; 		.byte "and.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_and_y:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_and_z
003D5Cr 3               ; 		.word xt_asm_and_y, z_asm_and_y
003D5Cr 3               ; 		.byte "and.y"
003D5Cr 3               
003D5Cr 3               ; nt_asm_and_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_and_zi
003D5Cr 3               ; 		.word xt_asm_and_z, z_asm_and_z
003D5Cr 3               ; 		.byte "and.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_and_zi:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_and_ziy
003D5Cr 3               ; 		.word xt_asm_and_zi, z_asm_and_zi
003D5Cr 3               ; 		.byte "and.zi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_and_ziy:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_and_zx
003D5Cr 3               ; 		.word xt_asm_and_ziy, z_asm_and_ziy
003D5Cr 3               ; 		.byte "and.ziy"
003D5Cr 3               
003D5Cr 3               ; nt_asm_and_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_and_zxi
003D5Cr 3               ; 		.word xt_asm_and_zx, z_asm_and_zx
003D5Cr 3               ; 		.byte "and.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_and_zxi:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_asl
003D5Cr 3               ; 		.word xt_asm_and_zxi, z_asm_and_zxi
003D5Cr 3               ; 		.byte "and.zxi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_asl:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_asl_a
003D5Cr 3               ; 		.word xt_asm_asl, z_asm_asl
003D5Cr 3               ; 		.byte "asl"
003D5Cr 3               
003D5Cr 3               ; nt_asm_asl_a:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_asl_x
003D5Cr 3               ; 		.word xt_asm_asl_a, z_asm_asl_a
003D5Cr 3               ; 		.byte "asl.a"
003D5Cr 3               
003D5Cr 3               ; nt_asm_asl_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_asl_z
003D5Cr 3               ; 		.word xt_asm_asl_x, z_asm_asl_x
003D5Cr 3               ; 		.byte "asl.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_asl_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_asl_zx
003D5Cr 3               ; 		.word xt_asm_asl_z, z_asm_asl_z
003D5Cr 3               ; 		.byte "asl.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_asl_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_bcc
003D5Cr 3               ; 		.word xt_asm_asl_zx, z_asm_asl_zx
003D5Cr 3               ; 		.byte "asl.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_bcc:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_bcs
003D5Cr 3               ; 		.word xt_asm_bcc, z_asm_bcc
003D5Cr 3               ; 		.byte "bcc"
003D5Cr 3               
003D5Cr 3               ; nt_asm_bcs:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_beq
003D5Cr 3               ; 		.word xt_asm_bcs, z_asm_bcs
003D5Cr 3               ; 		.byte "bcs"
003D5Cr 3               
003D5Cr 3               ; nt_asm_beq:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_bit
003D5Cr 3               ; 		.word xt_asm_beq, z_asm_beq
003D5Cr 3               ; 		.byte "beq"
003D5Cr 3               
003D5Cr 3               ; nt_asm_bit:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_bit_h
003D5Cr 3               ; 		.word xt_asm_bit, z_asm_bit
003D5Cr 3               ; 		.byte "bit"
003D5Cr 3               
003D5Cr 3               ; nt_asm_bit_h:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_bit_x
003D5Cr 3               ; 		.word xt_asm_bit_h, z_asm_bit_h
003D5Cr 3               ; 		.byte "bit.#"
003D5Cr 3               
003D5Cr 3               ; nt_asm_bit_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_bit_z
003D5Cr 3               ; 		.word xt_asm_bit_x, z_asm_bit_x
003D5Cr 3               ; 		.byte "bit.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_bit_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_bit_zx
003D5Cr 3               ; 		.word xt_asm_bit_z, z_asm_bit_z
003D5Cr 3               ; 		.byte "bit.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_bit_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_bmi
003D5Cr 3               ; 		.word xt_asm_bit_zx, z_asm_bit_zx
003D5Cr 3               ; 		.byte "bit.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_bmi:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_bne
003D5Cr 3               ; 		.word xt_asm_bmi, z_asm_bmi
003D5Cr 3               ; 		.byte "bmi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_bne:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_bpl
003D5Cr 3               ; 		.word xt_asm_bne, z_asm_bne
003D5Cr 3               ; 		.byte "bne"
003D5Cr 3               
003D5Cr 3               ; nt_asm_bpl:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_bra
003D5Cr 3               ; 		.word xt_asm_bpl, z_asm_bpl
003D5Cr 3               ; 		.byte "bpl"
003D5Cr 3               
003D5Cr 3               ; nt_asm_bra:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_brk
003D5Cr 3               ; 		.word xt_asm_bra, z_asm_bra
003D5Cr 3               ; 		.byte "bra"
003D5Cr 3               
003D5Cr 3               ; nt_asm_brk:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_bvc
003D5Cr 3               ; 		.word xt_asm_brk, z_asm_brk
003D5Cr 3               ; 		.byte "brk"
003D5Cr 3               
003D5Cr 3               ; nt_asm_bvc:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_bvs
003D5Cr 3               ; 		.word xt_asm_bvc, z_asm_bvc
003D5Cr 3               ; 		.byte "bvc"
003D5Cr 3               
003D5Cr 3               ; nt_asm_bvs:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_clc
003D5Cr 3               ; 		.word xt_asm_bvs, z_asm_bvs
003D5Cr 3               ; 		.byte "bvs"
003D5Cr 3               
003D5Cr 3               ; nt_asm_clc:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_cld
003D5Cr 3               ; 		.word xt_asm_clc, z_asm_clc
003D5Cr 3               ; 		.byte "clc"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cld:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_cli
003D5Cr 3               ; 		.word xt_asm_cld, z_asm_cld
003D5Cr 3               ; 		.byte "cld"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cli:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_clv
003D5Cr 3               ; 		.word xt_asm_cli, z_asm_cli
003D5Cr 3               ; 		.byte "cli"
003D5Cr 3               
003D5Cr 3               ; nt_asm_clv:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_cmp
003D5Cr 3               ; 		.word xt_asm_clv, z_asm_clv
003D5Cr 3               ; 		.byte "clv"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cmp:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_cmp_h
003D5Cr 3               ; 		.word xt_asm_cmp, z_asm_cmp
003D5Cr 3               ; 		.byte "cmp"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cmp_h:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_cmp_x
003D5Cr 3               ; 		.word xt_asm_cmp_h, z_asm_cmp_h
003D5Cr 3               ; 		.byte "cmp.#"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cmp_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_cmp_y
003D5Cr 3               ; 		.word xt_asm_cmp_x, z_asm_cmp_x
003D5Cr 3               ; 		.byte "cmp.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cmp_y:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_cmp_z
003D5Cr 3               ; 		.word xt_asm_cmp_y, z_asm_cmp_y
003D5Cr 3               ; 		.byte "cmp.y"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cmp_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_cmp_zi
003D5Cr 3               ; 		.word xt_asm_cmp_z, z_asm_cmp_z
003D5Cr 3               ; 		.byte "cmp.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cmp_zi:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_cmp_ziy
003D5Cr 3               ; 		.word xt_asm_cmp_zi, z_asm_cmp_zi
003D5Cr 3               ; 		.byte "cmp.zi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cmp_ziy:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_cmp_zx
003D5Cr 3               ; 		.word xt_asm_cmp_ziy, z_asm_cmp_ziy
003D5Cr 3               ; 		.byte "cmp.ziy"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cmp_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_cmp_zxi
003D5Cr 3               ; 		.word xt_asm_cmp_zx, z_asm_cmp_zx
003D5Cr 3               ; 		.byte "cmp.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cmp_zxi:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_cpx
003D5Cr 3               ; 		.word xt_asm_cmp_zxi, z_asm_cmp_zxi
003D5Cr 3               ; 		.byte "cmp.zxi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cpx:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_cpx_h
003D5Cr 3               ; 		.word xt_asm_cpx, z_asm_cpx
003D5Cr 3               ; 		.byte "cpx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cpx_h:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_cpx_z
003D5Cr 3               ; 		.word xt_asm_cpx_h, z_asm_cpx_h
003D5Cr 3               ; 		.byte "cpx.#"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cpx_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_cpy
003D5Cr 3               ; 		.word xt_asm_cpx_z, z_asm_cpx_z
003D5Cr 3               ; 		.byte "cpx.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cpy:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_cpy_h
003D5Cr 3               ; 		.word xt_asm_cpy, z_asm_cpy
003D5Cr 3               ; 		.byte "cpy"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cpy_h:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_cpy_z
003D5Cr 3               ; 		.word xt_asm_cpy_h, z_asm_cpy_h
003D5Cr 3               ; 		.byte "cpy.#"
003D5Cr 3               
003D5Cr 3               ; nt_asm_cpy_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_dec
003D5Cr 3               ; 		.word xt_asm_cpy_z, z_asm_cpy_z
003D5Cr 3               ; 		.byte "cpy.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_dec:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_dec_a
003D5Cr 3               ; 		.word xt_asm_dec, z_asm_dec
003D5Cr 3               ; 		.byte "dec"
003D5Cr 3               
003D5Cr 3               ; nt_asm_dec_a:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_dec_x
003D5Cr 3               ; 		.word xt_asm_dec_a, z_asm_dec_a
003D5Cr 3               ; 		.byte "dec.a"
003D5Cr 3               
003D5Cr 3               ; nt_asm_dec_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_dec_z
003D5Cr 3               ; 		.word xt_asm_dec_x, z_asm_dec_x
003D5Cr 3               ; 		.byte "dec.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_dec_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_dec_zx
003D5Cr 3               ; 		.word xt_asm_dec_z, z_asm_dec_z
003D5Cr 3               ; 		.byte "dec.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_dec_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_dex
003D5Cr 3               ; 		.word xt_asm_dec_zx, z_asm_dec_zx
003D5Cr 3               ; 		.byte "dec.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_dex:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_dey
003D5Cr 3               ; 		.word xt_asm_dex, z_asm_dex
003D5Cr 3               ; 		.byte "dex"
003D5Cr 3               
003D5Cr 3               ; nt_asm_dey:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_eor
003D5Cr 3               ; 		.word xt_asm_dey, z_asm_dey
003D5Cr 3               ; 		.byte "dey"
003D5Cr 3               
003D5Cr 3               ; nt_asm_eor:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_eor_h
003D5Cr 3               ; 		.word xt_asm_eor, z_asm_eor
003D5Cr 3               ; 		.byte "eor"
003D5Cr 3               
003D5Cr 3               ; nt_asm_eor_h:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_eor_x
003D5Cr 3               ; 		.word xt_asm_eor_h, z_asm_eor_h
003D5Cr 3               ; 		.byte "eor.#"
003D5Cr 3               
003D5Cr 3               ; nt_asm_eor_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_eor_y
003D5Cr 3               ; 		.word xt_asm_eor_x, z_asm_eor_x
003D5Cr 3               ; 		.byte "eor.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_eor_y:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_eor_z
003D5Cr 3               ; 		.word xt_asm_eor_y, z_asm_eor_y
003D5Cr 3               ; 		.byte "eor.y"
003D5Cr 3               
003D5Cr 3               ; nt_asm_eor_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_eor_zi
003D5Cr 3               ; 		.word xt_asm_eor_z, z_asm_eor_z
003D5Cr 3               ; 		.byte "eor.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_eor_zi:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_eor_ziy
003D5Cr 3               ; 		.word xt_asm_eor_zi, z_asm_eor_zi
003D5Cr 3               ; 		.byte "eor.zi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_eor_ziy:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_eor_zx
003D5Cr 3               ; 		.word xt_asm_eor_ziy, z_asm_eor_ziy
003D5Cr 3               ; 		.byte "eor.ziy"
003D5Cr 3               
003D5Cr 3               ; nt_asm_eor_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_eor_zxi
003D5Cr 3               ; 		.word xt_asm_eor_zx, z_asm_eor_zx
003D5Cr 3               ; 		.byte "eor.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_eor_zxi:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_inc
003D5Cr 3               ; 		.word xt_asm_eor_zxi, z_asm_eor_zxi
003D5Cr 3               ; 		.byte "eor.zxi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_inc:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_inc_a
003D5Cr 3               ; 		.word xt_asm_inc, z_asm_inc
003D5Cr 3               ; 		.byte "inc"
003D5Cr 3               
003D5Cr 3               ; nt_asm_inc_a:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_inc_x
003D5Cr 3               ; 		.word xt_asm_inc_a, z_asm_inc_a
003D5Cr 3               ; 		.byte "inc.a"
003D5Cr 3               
003D5Cr 3               ; nt_asm_inc_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_inc_z
003D5Cr 3               ; 		.word xt_asm_inc_x, z_asm_inc_x
003D5Cr 3               ; 		.byte "inc.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_inc_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_inc_zx
003D5Cr 3               ; 		.word xt_asm_inc_z, z_asm_inc_z
003D5Cr 3               ; 		.byte "inc.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_inc_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_inx
003D5Cr 3               ; 		.word xt_asm_inc_zx, z_asm_inc_zx
003D5Cr 3               ; 		.byte "inc.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_inx:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_iny
003D5Cr 3               ; 		.word xt_asm_inx, z_asm_inx
003D5Cr 3               ; 		.byte "inx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_iny:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_jmp
003D5Cr 3               ; 		.word xt_asm_iny, z_asm_iny
003D5Cr 3               ; 		.byte "iny"
003D5Cr 3               
003D5Cr 3               ; nt_asm_jmp:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_jmp_i
003D5Cr 3               ; 		.word xt_asm_jmp, z_asm_jmp
003D5Cr 3               ; 		.byte "jmp"
003D5Cr 3               
003D5Cr 3               ; nt_asm_jmp_i:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_jmp_xi
003D5Cr 3               ; 		.word xt_asm_jmp_i, z_asm_jmp_i
003D5Cr 3               ; 		.byte "jmp.i"
003D5Cr 3               
003D5Cr 3               ; nt_asm_jmp_xi:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_jsr
003D5Cr 3               ; 		.word xt_asm_jmp_xi, z_asm_jmp_xi
003D5Cr 3               ; 		.byte "jmp.xi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_jsr:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_lda
003D5Cr 3               ; 		.word xt_asm_jsr, z_asm_jsr
003D5Cr 3               ; 		.byte "jsr"
003D5Cr 3               
003D5Cr 3               ; nt_asm_lda:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_lda_h
003D5Cr 3               ; 		.word xt_asm_lda, z_asm_lda
003D5Cr 3               ; 		.byte "lda"
003D5Cr 3               
003D5Cr 3               ; nt_asm_lda_h:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_lda_x
003D5Cr 3               ; 		.word xt_asm_lda_h, z_asm_lda_h
003D5Cr 3               ; 		.byte "lda.#"
003D5Cr 3               
003D5Cr 3               ; nt_asm_lda_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_lda_y
003D5Cr 3               ; 		.word xt_asm_lda_x, z_asm_lda_x
003D5Cr 3               ; 		.byte "lda.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_lda_y:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_lda_z
003D5Cr 3               ; 		.word xt_asm_lda_y, z_asm_lda_y
003D5Cr 3               ; 		.byte "lda.y"
003D5Cr 3               
003D5Cr 3               ; nt_asm_lda_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_lda_zi
003D5Cr 3               ; 		.word xt_asm_lda_z, z_asm_lda_z
003D5Cr 3               ; 		.byte "lda.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_lda_zi:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_lda_ziy
003D5Cr 3               ; 		.word xt_asm_lda_zi, z_asm_lda_zi
003D5Cr 3               ; 		.byte "lda.zi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_lda_ziy:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_lda_zx
003D5Cr 3               ; 		.word xt_asm_lda_ziy, z_asm_lda_ziy
003D5Cr 3               ; 		.byte "lda.ziy"
003D5Cr 3               
003D5Cr 3               ; nt_asm_lda_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_lda_zxi
003D5Cr 3               ; 		.word xt_asm_lda_zx, z_asm_lda_zx
003D5Cr 3               ; 		.byte "lda.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_lda_zxi:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_ldx
003D5Cr 3               ; 		.word xt_asm_lda_zxi, z_asm_lda_zxi
003D5Cr 3               ; 		.byte "lda.zxi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ldx:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_ldx_h
003D5Cr 3               ; 		.word xt_asm_ldx, z_asm_ldx
003D5Cr 3               ; 		.byte "ldx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ldx_h:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_ldx_y
003D5Cr 3               ; 		.word xt_asm_ldx_h, z_asm_ldx_h
003D5Cr 3               ; 		.byte "ldx.#"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ldx_y:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_ldx_z
003D5Cr 3               ; 		.word xt_asm_ldx_y, z_asm_ldx_y
003D5Cr 3               ; 		.byte "ldx.y"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ldx_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_ldx_zy
003D5Cr 3               ; 		.word xt_asm_ldx_z, z_asm_ldx_z
003D5Cr 3               ; 		.byte "ldx.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ldx_zy:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_ldy
003D5Cr 3               ; 		.word xt_asm_ldx_zy, z_asm_ldx_zy
003D5Cr 3               ; 		.byte "ldx.zy"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ldy:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_ldy_h
003D5Cr 3               ; 		.word xt_asm_ldy, z_asm_ldy
003D5Cr 3               ; 		.byte "ldy"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ldy_h:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_ldy_x
003D5Cr 3               ; 		.word xt_asm_ldy_h, z_asm_ldy_h
003D5Cr 3               ; 		.byte "ldy.#"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ldy_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_ldy_z
003D5Cr 3               ; 		.word xt_asm_ldy_x, z_asm_ldy_x
003D5Cr 3               ; 		.byte "ldy.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ldy_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_ldy_zx
003D5Cr 3               ; 		.word xt_asm_ldy_z, z_asm_ldy_z
003D5Cr 3               ; 		.byte "ldy.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ldy_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_lsr
003D5Cr 3               ; 		.word xt_asm_ldy_zx, z_asm_ldy_zx
003D5Cr 3               ; 		.byte "ldy.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_lsr:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_lsr_a
003D5Cr 3               ; 		.word xt_asm_lsr, z_asm_lsr
003D5Cr 3               ; 		.byte "lsr"
003D5Cr 3               
003D5Cr 3               ; nt_asm_lsr_a:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_lsr_x
003D5Cr 3               ; 		.word xt_asm_lsr_a, z_asm_lsr_a
003D5Cr 3               ; 		.byte "lsr.a"
003D5Cr 3               
003D5Cr 3               ; nt_asm_lsr_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_lsr_z
003D5Cr 3               ; 		.word xt_asm_lsr_x, z_asm_lsr_x
003D5Cr 3               ; 		.byte "lsr.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_lsr_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_lsr_zx
003D5Cr 3               ; 		.word xt_asm_lsr_z, z_asm_lsr_z
003D5Cr 3               ; 		.byte "lsr.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_lsr_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_nop
003D5Cr 3               ; 		.word xt_asm_lsr_zx, z_asm_lsr_zx
003D5Cr 3               ; 		.byte "lsr.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_nop:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_ora
003D5Cr 3               ; 		.word xt_asm_nop, z_asm_nop
003D5Cr 3               ; 		.byte "nop"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ora:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_ora_h
003D5Cr 3               ; 		.word xt_asm_ora, z_asm_ora
003D5Cr 3               ; 		.byte "ora"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ora_h:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_ora_x
003D5Cr 3               ; 		.word xt_asm_ora_h, z_asm_ora_h
003D5Cr 3               ; 		.byte "ora.#"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ora_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_ora_y
003D5Cr 3               ; 		.word xt_asm_ora_x, z_asm_ora_x
003D5Cr 3               ; 		.byte "ora.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ora_y:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_ora_z
003D5Cr 3               ; 		.word xt_asm_ora_y, z_asm_ora_y
003D5Cr 3               ; 		.byte "ora.y"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ora_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_ora_zi
003D5Cr 3               ; 		.word xt_asm_ora_z, z_asm_ora_z
003D5Cr 3               ; 		.byte "ora.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ora_zi:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_ora_ziy
003D5Cr 3               ; 		.word xt_asm_ora_zi, z_asm_ora_zi
003D5Cr 3               ; 		.byte "ora.zi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ora_ziy:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_ora_zx
003D5Cr 3               ; 		.word xt_asm_ora_ziy, z_asm_ora_ziy
003D5Cr 3               ; 		.byte "ora.ziy"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ora_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_ora_zxi
003D5Cr 3               ; 		.word xt_asm_ora_zx, z_asm_ora_zx
003D5Cr 3               ; 		.byte "ora.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ora_zxi:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_pha
003D5Cr 3               ; 		.word xt_asm_ora_zxi, z_asm_ora_zxi
003D5Cr 3               ; 		.byte "ora.zxi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_pha:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_php
003D5Cr 3               ; 		.word xt_asm_pha, z_asm_pha
003D5Cr 3               ; 		.byte "pha"
003D5Cr 3               
003D5Cr 3               ; nt_asm_php:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_phx
003D5Cr 3               ; 		.word xt_asm_php, z_asm_php
003D5Cr 3               ; 		.byte "php"
003D5Cr 3               
003D5Cr 3               ; nt_asm_phx:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_phy
003D5Cr 3               ; 		.word xt_asm_phx, z_asm_phx
003D5Cr 3               ; 		.byte "phx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_phy:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_pla
003D5Cr 3               ; 		.word xt_asm_phy, z_asm_phy
003D5Cr 3               ; 		.byte "phy"
003D5Cr 3               
003D5Cr 3               ; nt_asm_pla:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_plp
003D5Cr 3               ; 		.word xt_asm_pla, z_asm_pla
003D5Cr 3               ; 		.byte "pla"
003D5Cr 3               
003D5Cr 3               ; nt_asm_plp:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_plx
003D5Cr 3               ; 		.word xt_asm_plp, z_asm_plp
003D5Cr 3               ; 		.byte "plp"
003D5Cr 3               
003D5Cr 3               ; nt_asm_plx:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_ply
003D5Cr 3               ; 		.word xt_asm_plx, z_asm_plx
003D5Cr 3               ; 		.byte "plx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ply:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_rol
003D5Cr 3               ; 		.word xt_asm_ply, z_asm_ply
003D5Cr 3               ; 		.byte "ply"
003D5Cr 3               
003D5Cr 3               ; nt_asm_rol:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_rol_a
003D5Cr 3               ; 		.word xt_asm_rol, z_asm_rol
003D5Cr 3               ; 		.byte "rol"
003D5Cr 3               
003D5Cr 3               ; nt_asm_rol_a:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_rol_x
003D5Cr 3               ; 		.word xt_asm_rol_a, z_asm_rol_a
003D5Cr 3               ; 		.byte "rol.a"
003D5Cr 3               
003D5Cr 3               ; nt_asm_rol_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_rol_z
003D5Cr 3               ; 		.word xt_asm_rol_x, z_asm_rol_x
003D5Cr 3               ; 		.byte "rol.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_rol_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_rol_zx
003D5Cr 3               ; 		.word xt_asm_rol_z, z_asm_rol_z
003D5Cr 3               ; 		.byte "rol.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_rol_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_ror
003D5Cr 3               ; 		.word xt_asm_rol_zx, z_asm_rol_zx
003D5Cr 3               ; 		.byte "rol.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ror:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_ror_a
003D5Cr 3               ; 		.word xt_asm_ror, z_asm_ror
003D5Cr 3               ; 		.byte "ror"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ror_a:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_ror_x
003D5Cr 3               ; 		.word xt_asm_ror_a, z_asm_ror_a
003D5Cr 3               ; 		.byte "ror.a"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ror_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_ror_z
003D5Cr 3               ; 		.word xt_asm_ror_x, z_asm_ror_x
003D5Cr 3               ; 		.byte "ror.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ror_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_ror_zx
003D5Cr 3               ; 		.word xt_asm_ror_z, z_asm_ror_z
003D5Cr 3               ; 		.byte "ror.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_ror_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_rti
003D5Cr 3               ; 		.word xt_asm_ror_zx, z_asm_ror_zx
003D5Cr 3               ; 		.byte "ror.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_rti:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_rts
003D5Cr 3               ; 		.word xt_asm_rti, z_asm_rti
003D5Cr 3               ; 		.byte "rti"
003D5Cr 3               
003D5Cr 3               ; nt_asm_rts:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_sbc
003D5Cr 3               ; 		.word xt_asm_rts, z_asm_rts
003D5Cr 3               ; 		.byte "rts"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sbc:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_sbc_h
003D5Cr 3               ; 		.word xt_asm_sbc, z_asm_sbc
003D5Cr 3               ; 		.byte "sbc"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sbc_h:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_sbc_x
003D5Cr 3               ; 		.word xt_asm_sbc_h, z_asm_sbc_h
003D5Cr 3               ; 		.byte "sbc.#"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sbc_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_sbc_y
003D5Cr 3               ; 		.word xt_asm_sbc_x, z_asm_sbc_x
003D5Cr 3               ; 		.byte "sbc.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sbc_y:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_sbc_z
003D5Cr 3               ; 		.word xt_asm_sbc_y, z_asm_sbc_y
003D5Cr 3               ; 		.byte "sbc.y"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sbc_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_sbc_zi
003D5Cr 3               ; 		.word xt_asm_sbc_z, z_asm_sbc_z
003D5Cr 3               ; 		.byte "sbc.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sbc_zi:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_sbc_ziy
003D5Cr 3               ; 		.word xt_asm_sbc_zi, z_asm_sbc_zi
003D5Cr 3               ; 		.byte "sbc.zi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sbc_ziy:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_sbc_zx
003D5Cr 3               ; 		.word xt_asm_sbc_ziy, z_asm_sbc_ziy
003D5Cr 3               ; 		.byte "sbc.ziy"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sbc_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_sbc_zxi
003D5Cr 3               ; 		.word xt_asm_sbc_zx, z_asm_sbc_zx
003D5Cr 3               ; 		.byte "sbc.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sbc_zxi:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_sec
003D5Cr 3               ; 		.word xt_asm_sbc_zxi, z_asm_sbc_zxi
003D5Cr 3               ; 		.byte "sbc.zxi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sec:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_sed
003D5Cr 3               ; 		.word xt_asm_sec, z_asm_sec
003D5Cr 3               ; 		.byte "sec"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sed:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_sei
003D5Cr 3               ; 		.word xt_asm_sed, z_asm_sed
003D5Cr 3               ; 		.byte "sed"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sei:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_sta
003D5Cr 3               ; 		.word xt_asm_sei, z_asm_sei
003D5Cr 3               ; 		.byte "sei"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sta:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_sta_x
003D5Cr 3               ; 		.word xt_asm_sta, z_asm_sta
003D5Cr 3               ; 		.byte "sta"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sta_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_sta_y
003D5Cr 3               ; 		.word xt_asm_sta_x, z_asm_sta_x
003D5Cr 3               ; 		.byte "sta.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sta_y:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_sta_z
003D5Cr 3               ; 		.word xt_asm_sta_y, z_asm_sta_y
003D5Cr 3               ; 		.byte "sta.y"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sta_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_sta_zi
003D5Cr 3               ; 		.word xt_asm_sta_z, z_asm_sta_z
003D5Cr 3               ; 		.byte "sta.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sta_zi:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_sta_ziy
003D5Cr 3               ; 		.word xt_asm_sta_zi, z_asm_sta_zi
003D5Cr 3               ; 		.byte "sta.zi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sta_ziy:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_sta_zx
003D5Cr 3               ; 		.word xt_asm_sta_ziy, z_asm_sta_ziy
003D5Cr 3               ; 		.byte "sta.ziy"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sta_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_sta_zxi
003D5Cr 3               ; 		.word xt_asm_sta_zx, z_asm_sta_zx
003D5Cr 3               ; 		.byte "sta.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sta_zxi:
003D5Cr 3               ; 		.byte 7, IM
003D5Cr 3               ;                 .word nt_asm_stx
003D5Cr 3               ; 		.word xt_asm_sta_zxi, z_asm_sta_zxi
003D5Cr 3               ; 		.byte "sta.zxi"
003D5Cr 3               
003D5Cr 3               ; nt_asm_stx:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_stx_z
003D5Cr 3               ; 		.word xt_asm_stx, z_asm_stx
003D5Cr 3               ; 		.byte "stx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_stx_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_stx_zy
003D5Cr 3               ; 		.word xt_asm_stx_z, z_asm_stx_z
003D5Cr 3               ; 		.byte "stx.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_stx_zy:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_sty
003D5Cr 3               ; 		.word xt_asm_stx_zy, z_asm_stx_zy
003D5Cr 3               ; 		.byte "stx.zy"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sty:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_sty_z
003D5Cr 3               ; 		.word xt_asm_sty, z_asm_sty
003D5Cr 3               ; 		.byte "sty"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sty_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_sty_zx
003D5Cr 3               ; 		.word xt_asm_sty_z, z_asm_sty_z
003D5Cr 3               ; 		.byte "sty.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_sty_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_stz
003D5Cr 3               ; 		.word xt_asm_sty_zx, z_asm_sty_zx
003D5Cr 3               ; 		.byte "sty.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_stz:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_stz_x
003D5Cr 3               ; 		.word xt_asm_stz, z_asm_stz
003D5Cr 3               ; 		.byte "stz"
003D5Cr 3               
003D5Cr 3               ; nt_asm_stz_x:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_stz_z
003D5Cr 3               ; 		.word xt_asm_stz_x, z_asm_stz_x
003D5Cr 3               ; 		.byte "stz.x"
003D5Cr 3               
003D5Cr 3               ; nt_asm_stz_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_stz_zx
003D5Cr 3               ; 		.word xt_asm_stz_z, z_asm_stz_z
003D5Cr 3               ; 		.byte "stz.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_stz_zx:
003D5Cr 3               ; 		.byte 6, IM
003D5Cr 3               ;                 .word nt_asm_tax
003D5Cr 3               ; 		.word xt_asm_stz_zx, z_asm_stz_zx
003D5Cr 3               ; 		.byte "stz.zx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_tax:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_tay
003D5Cr 3               ; 		.word xt_asm_tax, z_asm_tax
003D5Cr 3               ; 		.byte "tax"
003D5Cr 3               
003D5Cr 3               ; nt_asm_tay:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_trb
003D5Cr 3               ; 		.word xt_asm_tay, z_asm_tay
003D5Cr 3               ; 		.byte "tay"
003D5Cr 3               
003D5Cr 3               ; nt_asm_trb:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_trb_z
003D5Cr 3               ; 		.word xt_asm_trb, z_asm_trb
003D5Cr 3               ; 		.byte "trb"
003D5Cr 3               
003D5Cr 3               ; nt_asm_trb_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_tsb
003D5Cr 3               ; 		.word xt_asm_trb_z, z_asm_trb_z
003D5Cr 3               ; 		.byte "trb.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_tsb:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_tsb_z
003D5Cr 3               ; 		.word xt_asm_tsb, z_asm_tsb
003D5Cr 3               ; 		.byte "tsb"
003D5Cr 3               
003D5Cr 3               ; nt_asm_tsb_z:
003D5Cr 3               ; 		.byte 5, IM
003D5Cr 3               ;                 .word nt_asm_tsx
003D5Cr 3               ; 		.word xt_asm_tsb_z, z_asm_tsb_z
003D5Cr 3               ; 		.byte "tsb.z"
003D5Cr 3               
003D5Cr 3               ; nt_asm_tsx:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_txa
003D5Cr 3               ; 		.word xt_asm_tsx, z_asm_tsx
003D5Cr 3               ; 		.byte "tsx"
003D5Cr 3               
003D5Cr 3               ; nt_asm_txa:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_txs
003D5Cr 3               ; 		.word xt_asm_txa, z_asm_txa
003D5Cr 3               ; 		.byte "txa"
003D5Cr 3               
003D5Cr 3               ; nt_asm_txs:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_tya
003D5Cr 3               ; 		.word xt_asm_txs, z_asm_txs
003D5Cr 3               ; 		.byte "txs"
003D5Cr 3               
003D5Cr 3               ; nt_asm_tya:
003D5Cr 3               ; 		.byte 3, IM
003D5Cr 3               ;                 .word nt_asm_arrow
003D5Cr 3               ; 		.word xt_asm_tya, z_asm_tya
003D5Cr 3               ; 		.byte "tya"
003D5Cr 3               
003D5Cr 3               ; ; Assembler pseudo-instructions, directives and macros
003D5Cr 3               
003D5Cr 3               ; nt_asm_arrow:   ; uses same code as HERE, but immediate
003D5Cr 3               ;                 .byte 3, IM
003D5Cr 3               ;                 .word nt_asm_back_jump
003D5Cr 3               ;                 .word xt_asm_arrow, z_asm_arrow
003D5Cr 3               ;                 .byte "-->"
003D5Cr 3               
003D5Cr 3               
003D5Cr 3               ; nt_asm_back_jump:  ; syntactic sugar, does nothing
003D5Cr 3               ;                 .byte 2, IM
003D5Cr 3               ;                 .word nt_asm_back_branch
003D5Cr 3               ;                 .word xt_asm_back_jump, z_asm_back_jump
003D5Cr 3               ;                 .byte "<j"
003D5Cr 3               
003D5Cr 3               ; nt_asm_back_branch:
003D5Cr 3               ;                 .byte 2, IM
003D5Cr 3               ;                 .word nt_asm_push_a
003D5Cr 3               ;                 .word xt_asm_back_branch, z_asm_back_branch
003D5Cr 3               ;                 .byte "<b"
003D5Cr 3               
003D5Cr 3               ; nt_asm_push_a:
003D5Cr 3               ;                 .byte 6, IM
003D5Cr 3               ;                 .word 0000
003D5Cr 3               ;                 .word xt_asm_push_a, z_asm_push_a
003D5Cr 3               ;                 .byte "push-a"
003D5Cr 3               
003D5Cr 3               
003D5Cr 3               
003D5Cr 3               ; END of ASSEMBLER-WORDLIST
003D5Cr 3               
003D5Cr 3               ; END
003D5Cr 3               
003D5Cr 2                   .include "strings.s"          ; Headers of native words
003D5Cr 3               ; List of Strings for Tali Forth 2
003D5Cr 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
003D5Cr 3               ; First version: 01. Apr 2016 (for Liara Forth)
003D5Cr 3               ; This version: 28. Dec 2018
003D5Cr 3               
003D5Cr 3               ; This file is included by taliforth.asm
003D5Cr 3               
003D5Cr 3               ; ## GENERAL STRINGS
003D5Cr 3               
003D5Cr 3               ; All general strings must be zero-terminated, names start with "s_",
003D5Cr 3               ; aliases with "str_"
003D5Cr 3               
003D5Cr 3               str_ok =              0
003D5Cr 3               str_compile =         1
003D5Cr 3               str_redefined =       2
003D5Cr 3               str_wid_forth =       3
003D5Cr 3               str_abc_lower =       4
003D5Cr 3               str_abc_upper =       5
003D5Cr 3               str_wid_editor =      6
003D5Cr 3               str_wid_assembler =   7
003D5Cr 3               str_wid_root =        8
003D5Cr 3               str_see_flags =       9
003D5Cr 3               str_see_nt =         10
003D5Cr 3               str_see_xt =         11
003D5Cr 3               str_see_size =       12
003D5Cr 3               
003D5Cr 3               ; Since we can't fit a 16-bit address in a register, we use indexes as offsets
003D5Cr 3               ; to tables as error and string numbers.
003D5Cr 3               string_table:
003D5Cr 3  rr rr rr rr          .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
003D60r 3  rr rr rr rr  
003D64r 3  rr rr        
003D66r 3  rr rr rr rr          .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
003D6Ar 3  rr rr rr rr  
003D6Er 3  rr rr rr rr          .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
003D72r 3  rr rr rr rr  
003D76r 3               
003D76r 3  20 6F 6B 00  s_ok:         .byte " ok", 0         ; note space at beginning
003D7Ar 3  20 63 6F 6D  s_compiled:   .byte " compiled", 0   ; note space at beginning
003D7Er 3  70 69 6C 65  
003D82r 3  64 00        
003D84r 3  72 65 64 65  s_redefined:  .byte "redefined ", 0  ; note space at end
003D88r 3  66 69 6E 65  
003D8Cr 3  64 20 00     
003D8Fr 3               
003D8Fr 3  30 31 32 33  s_abc_lower:  .byte "0123456789abcdefghijklmnopqrstuvwxyz"
003D93r 3  34 35 36 37  
003D97r 3  38 39 61 62  
003DB3r 3  30 31 32 33  s_abc_upper:  .byte "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
003DB7r 3  34 35 36 37  
003DBBr 3  38 39 41 42  
003DD7r 3               
003DD7r 3  41 73 73 65  s_wid_asm:    .byte "Assembler ", 0  ; Wordlist ID 2, note space at end
003DDBr 3  6D 62 6C 65  
003DDFr 3  72 20 00     
003DE2r 3  45 64 69 74  s_wid_editor: .byte "Editor ", 0     ; Wordlist ID 1, note space at end
003DE6r 3  6F 72 20 00  
003DEAr 3  46 6F 72 74  s_wid_forth:  .byte "Forth ", 0      ; Wordlist ID 0, note space at end
003DEEr 3  68 20 00     
003DF1r 3  52 6F 6F 74  s_wid_root:   .byte "Root ", 0       ; Wordlist ID 3, note space at end
003DF5r 3  20 00        
003DF7r 3               
003DF7r 3  66 6C 61 67  s_see_flags:  .byte "flags (CO AN IM NN UF HC): ", 0
003DFBr 3  73 20 28 43  
003DFFr 3  4F 20 41 4E  
003E13r 3  6E 74 3A 20  s_see_nt:     .byte "nt: ", 0
003E17r 3  00           
003E18r 3  78 74 3A 20  s_see_xt:     .byte "xt: ", 0
003E1Cr 3  00           
003E1Dr 3  73 69 7A 65  s_see_size:   .byte "size (decimal): ", 0
003E21r 3  20 28 64 65  
003E25r 3  63 69 6D 61  
003E2Er 3               
003E2Er 3               
003E2Er 3               ; ## ERROR STRINGS
003E2Er 3               
003E2Er 3               ; All error strings must be zero-terminated, all names start with "es_",
003E2Er 3               ; aliases with "err_". If the string texts are changed, the test suite must be
003E2Er 3               ; as well
003E2Er 3               
003E2Er 3               err_allot =        0
003E2Er 3               err_badsource =    1
003E2Er 3               err_compileonly =  2
003E2Er 3               err_defer =        3
003E2Er 3               err_divzero =      4
003E2Er 3               err_noname =       5
003E2Er 3               err_refill =       6
003E2Er 3               err_state =        7
003E2Er 3               err_syntax =       8
003E2Er 3               err_underflow =    9
003E2Er 3               err_negallot =     10
003E2Er 3               err_wordlist =     11
003E2Er 3               err_blockwords =   12
003E2Er 3               
003E2Er 3               error_table:
003E2Er 3  rr rr rr rr          .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
003E32r 3  rr rr rr rr  
003E36r 3  rr rr rr rr          .word es_divzero, es_noname, es_refill, es_state        ;  4-7
003E3Ar 3  rr rr rr rr  
003E3Er 3  rr rr rr rr          .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
003E42r 3  rr rr rr rr  
003E46r 3  rr rr                .word es_blockwords                                    ; 12
003E48r 3               
003E48r 3  41 4C 4C 4F  es_allot:       .byte "ALLOT using all available memory", 0
003E4Cr 3  54 20 75 73  
003E50r 3  69 6E 67 20  
003E69r 3  49 6C 6C 65  es_badsource:   .byte "Illegal SOURCE-ID during REFILL", 0
003E6Dr 3  67 61 6C 20  
003E71r 3  53 4F 55 52  
003E89r 3  49 6E 74 65  es_compileonly: .byte "Interpreting a compile-only word", 0
003E8Dr 3  72 70 72 65  
003E91r 3  74 69 6E 67  
003EAAr 3  44 45 46 45  es_defer:       .byte "DEFERed word not defined yet", 0
003EAEr 3  52 65 64 20  
003EB2r 3  77 6F 72 64  
003EC7r 3  44 69 76 69  es_divzero:     .byte "Division by zero", 0
003ECBr 3  73 69 6F 6E  
003ECFr 3  20 62 79 20  
003ED8r 3  50 61 72 73  es_noname:      .byte "Parsing failure", 0
003EDCr 3  69 6E 67 20  
003EE0r 3  66 61 69 6C  
003EE8r 3  51 55 49 54  es_refill:      .byte "QUIT could not get input (REFILL returned -1)", 0
003EECr 3  20 63 6F 75  
003EF0r 3  6C 64 20 6E  
003F16r 3  41 6C 72 65  es_state:       .byte "Already in compile mode", 0
003F1Ar 3  61 64 79 20  
003F1Er 3  69 6E 20 63  
003F2Er 3  55 6E 64 65  es_syntax:      .byte "Undefined word", 0
003F32r 3  66 69 6E 65  
003F36r 3  64 20 77 6F  
003F3Dr 3  53 74 61 63  es_underflow:   .byte "Stack underflow", 0
003F41r 3  6B 20 75 6E  
003F45r 3  64 65 72 66  
003F4Dr 3  4D 61 78 20  es_negallot:    .byte "Max memory freed with ALLOT", 0
003F51r 3  6D 65 6D 6F  
003F55r 3  72 79 20 66  
003F69r 3  4E 6F 20 77  es_wordlist:    .byte "No wordlists available", 0
003F6Dr 3  6F 72 64 6C  
003F71r 3  69 73 74 73  
003F80r 3  50 6C 65 61  es_blockwords:  .byte "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
003F84r 3  73 65 20 61  
003F88r 3  73 73 69 67  
003FBFr 3               
003FBFr 3               ; ## ENVIRONMENT STRINGS
003FBFr 3               
003FBFr 3               ; These are used by the ENVIRONMENT? word and stored in the old string format:
003FBFr 3               ; Length byte first, then the string itself that is not rpt. not
003FBFr 3               ; zero-terminated. Note these are uppercase by ANS defintion. All start with
003FBFr 3               ; "envs_".
003FBFr 3               
003FBFr 3               ; These return a single-cell number
003FBFr 3  0F 2F 43 4F  envs_cs:        .byte 15, "/COUNTED-STRING"
003FC3r 3  55 4E 54 45  
003FC7r 3  44 2D 53 54  
003FCFr 3  05 2F 48 4F  envs_hold:      .byte 5, "/HOLD"
003FD3r 3  4C 44        
003FD5r 3  04 2F 50 41  envs_pad:       .byte 4, "/PAD"
003FD9r 3  44           
003FDAr 3  11 41 44 44  envs_aub:       .byte 17, "ADDRESS-UNIT-BITS"
003FDEr 3  52 45 53 53  
003FE2r 3  2D 55 4E 49  
003FECr 3  07 46 4C 4F  envs_floored:   .byte 7, "FLOORED"
003FF0r 3  4F 52 45 44  
003FF4r 3  08 4D 41 58  envs_max_char:  .byte 8, "MAX-CHAR"
003FF8r 3  2D 43 48 41  
003FFCr 3  52           
003FFDr 3  05 4D 41 58  envs_max_n:     .byte 5, "MAX-N"
004001r 3  2D 4E        
004003r 3  05 4D 41 58  envs_max_u:     .byte 5, "MAX-U"
004007r 3  2D 55        
004009r 3  12 52 45 54  envs_rsc:       .byte 18, "RETURN-STACK-CELLS"
00400Dr 3  55 52 4E 2D  
004011r 3  53 54 41 43  
00401Cr 3  0B 53 54 41  envs_sc:        .byte 11, "STACK-CELLS"
004020r 3  43 4B 2D 43  
004024r 3  45 4C 4C 53  
004028r 3  09 57 4F 52  envs_wl:        .byte 9, "WORDLISTS"
00402Cr 3  44 4C 49 53  
004030r 3  54 53        
004032r 3               
004032r 3               ; These return a double-cell number
004032r 3  05 4D 41 58  envs_max_d:     .byte 5, "MAX-D"
004036r 3  2D 44        
004038r 3  06 4D 41 58  envs_max_ud:    .byte 6, "MAX-UD"
00403Cr 3  2D 55 44     
00403Fr 3               
00403Fr 3               ; END
00403Fr 3               
00403Fr 2               
00403Fr 2               ; High-level Forth words, see forth_code/README.md
00403Fr 2               forth_words_start:
00403Fr 2  20 63 72 20  .incbin "forth_code/forth_words.asc"
004043r 2  2E 28 20 52  
004047r 2  65 61 64 79  
004051r 2               forth_words_end:
004051r 2               
004051r 2               ; User-defined Forth words, see forth_code/README.md
004051r 2               user_words_start:
004051r 2  20 32 30 20  .incbin "forth_code/user_words.asc"
004055r 2  63 6F 6E 73  
004059r 2  74 61 6E 74  
0046FDr 2               user_words_end:
0046FDr 2               
0046FDr 2               
0046FDr 2               ; =====================================================================
0046FDr 2               ; COMPILE WORDS, JUMPS and SUBROUTINE JUMPS INTO CODE
0046FDr 2               
0046FDr 2               ; These three routines compile instructions such as "jsr xt_words" into a word
0046FDr 2               ; at compile time so they are available at run time. Words that use this
0046FDr 2               ; routine may not be natively compiled. We use "cmpl" as not to confuse these
0046FDr 2               ; routines with the COMPILE, word. Always call this with a subroutine jump.
0046FDr 2               ; This means combining JSR/RTS to JMP in those cases is not going to work. To
0046FDr 2               ; use, load the LSB of the address in A and the MSB in Y. You can remember
0046FDr 2               ; which comes first by thinking of the song "Young Americans" ("YA") by David
0046FDr 2               ; Bowie.
0046FDr 2               
0046FDr 2               ;               ldy #>addr      ; MSB   ; "Young"
0046FDr 2               ;               lda #<addr      ; LSB   ; "Americans"
0046FDr 2               ;               jsr cmpl_subroutine
0046FDr 2               
0046FDr 2               ; Also, we keep a routine here to compile a single byte passed through A.
0046FDr 2               
0046FDr 2               cmpl_subroutine:
0046FDr 2                   ; This is the entry point to compile JSR <ADDR>
0046FDr 2  48               pha             ; save LSB of address
0046FEr 2  A9 20            lda #$20        ; load opcode for JSR
004700r 2  80 03            bra cmpl_common
004702r 2               cmpl_jump:
004702r 2                   ; This is the entry point to compile JMP <ADDR>
004702r 2  48               pha             ; save LSB of address
004703r 2  A9 4C            lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
004705r 2               cmpl_common:
004705r 2                   ; At this point, A contains the opcode to be compiled,
004705r 2                   ; the LSB of the address is on the 65c02 stack, and the MSB of
004705r 2                   ; the address is in Y
004705r 2  20 rr rr         jsr cmpl_a      ; compile opcode
004708r 2  68               pla             ; retrieve address LSB; fall thru to cmpl_word
004709r 2               cmpl_word:
004709r 2                   ; This is the entry point to compile a word (little-endian)
004709r 2  20 rr rr         jsr cmpl_a      ; compile LSB of address
00470Cr 2  98               tya             ; fall thru for MSB
00470Dr 2               cmpl_a:
00470Dr 2                   ; This is the entry point to compile a single byte which
00470Dr 2                   ; is passed in A. The built-in assembler assumes that this
00470Dr 2                   ; routine does not modify Y.
00470Dr 2  92 rr            sta (cp)
00470Fr 2  E6 rr            inc cp
004711r 2  D0 02            bne _done
004713r 2  E6 rr            inc cp+1
004715r 2               _done:
004715r 2  60               rts
004716r 2               
004716r 2               
004716r 2               
004716r 2               ; =====================================================================
004716r 2               ; CODE FIELD ROUTINES
004716r 2               
004716r 2               doconst:
004716r 2               ; """Execute a CONSTANT: Push the data in the first two bytes of
004716r 2               ; the Data Field onto the Data Stack
004716r 2               ; """
004716r 2  CA               dex             ; make room for constant
004717r 2  CA               dex
004718r 2               
004718r 2                   ; The value we need is stored in the two bytes after the
004718r 2                   ; JSR return address, which in turn is what is on top of
004718r 2                   ; the Return Stack
004718r 2  68               pla             ; LSB of return address
004719r 2  85 rr            sta tmp1
00471Br 2  68               pla             ; MSB of return address
00471Cr 2  85 rr            sta tmp1+1
00471Er 2               
00471Er 2                   ; Start LDY with 1 instead of 0 because of how JSR stores
00471Er 2                   ; the return address on the 65c02
00471Er 2  A0 01            ldy #1
004720r 2  B1 rr            lda (tmp1),y
004722r 2  95 00            sta 0,x
004724r 2  C8               iny
004725r 2  B1 rr            lda (tmp1),y
004727r 2  95 01            sta 1,x
004729r 2               
004729r 2                   ; This takes us back to the original caller, not the
004729r 2                   ; DOCONST caller
004729r 2  60               rts
00472Ar 2               
00472Ar 2               
00472Ar 2               dodefer:
00472Ar 2               ; """Execute a DEFER statement at runtime: Execute the address we
00472Ar 2               ; find after the caller in the Data Field
00472Ar 2               ; """
00472Ar 2                   ; The xt we need is stored in the two bytes after the JSR
00472Ar 2                   ; return address, which is what is on top of the Return
00472Ar 2                   ; Stack. So all we have to do is replace our return jump
00472Ar 2                   ; with what we find there
00472Ar 2  68               pla             ; LSB
00472Br 2  85 rr            sta tmp1
00472Dr 2  68               pla             ; MSB
00472Er 2  85 rr            sta tmp1+1
004730r 2               
004730r 2  A0 01            ldy #1
004732r 2  B1 rr            lda (tmp1),y
004734r 2  85 rr            sta tmp2
004736r 2  C8               iny
004737r 2  B1 rr            lda (tmp1),y
004739r 2  85 rr            sta tmp2+1
00473Br 2               
00473Br 2  6C rr rr         jmp (tmp2)      ; This is actually a jump to the new target
00473Er 2               
00473Er 2               defer_error:
00473Er 2                   ; """Error routine for undefined DEFER: Complain and abort"""
00473Er 2  A9 03            lda #err_defer
004740r 2  4C rr rr         jmp error
004743r 2               
004743r 2               dodoes:
004743r 2               ; """Execute the runtime portion of DOES>. See DOES> and
004743r 2               ; docs/create-does.txt for details and
004743r 2               ; http://www.bradrodriguez.com/papers/moving3.htm
004743r 2               ; """
004743r 2                   ; Assumes the address of the CFA of the original defining word
004743r 2                   ; (say, CONSTANT) is on the top of the Return Stack. Save it
004743r 2                   ; for a later jump, adding one byte because of the way the
004743r 2                   ; 6502 works
004743r 2  7A               ply             ; LSB
004744r 2  68               pla             ; MSB
004745r 2  C8               iny
004746r 2  D0 01            bne @1
004748r 2  1A               inc
004749r 2               @1:
004749r 2  84 rr            sty tmp2
00474Br 2  85 rr            sta tmp2+1
00474Dr 2               
00474Dr 2                   ; Next on the Return Stack should be the address of the PFA of
00474Dr 2                   ; the calling defined word (say, the name of whatever constant we
00474Dr 2                   ; just defined). Move this to the Data Stack, again adding one.
00474Dr 2  CA               dex
00474Er 2  CA               dex
00474Fr 2               
00474Fr 2  7A               ply
004750r 2  68               pla
004751r 2  C8               iny
004752r 2  D0 01            bne @2
004754r 2  1A               inc
004755r 2               @2:
004755r 2  94 00            sty 0,x         ; LSB
004757r 2  95 01            sta 1,x         ; MSB
004759r 2               
004759r 2                   ; This leaves the return address from the original main routine
004759r 2                   ; on top of the Return Stack. We leave that untouched and jump
004759r 2                   ; to the special code of the defining word. It's RTS instruction
004759r 2                   ; will take us back to the main routine
004759r 2  6C rr rr         jmp (tmp2)
00475Cr 2               
00475Cr 2               
00475Cr 2               dovar:
00475Cr 2               ; """Execute a variable: Push the address of the first bytes of
00475Cr 2               ; the Data Field onto the stack. This is called with JSR so we
00475Cr 2               ; can pick up the address of the calling variable off the 65c02's
00475Cr 2               ; stack. The final RTS takes us to the original caller of the
00475Cr 2               ; routine that itself called DOVAR. This is the default
00475Cr 2               ; routine installed with CREATE.
00475Cr 2               ; """
00475Cr 2                   ; Pull the return address off the machine's stack, adding
00475Cr 2                   ; one because of the way the 65c02 handles subroutines
00475Cr 2  7A               ply             ; LSB
00475Dr 2  68               pla             ; MSB
00475Er 2  C8               iny
00475Fr 2  D0 01            bne @1
004761r 2  1A               inc
004762r 2               @1:
004762r 2  CA               dex
004763r 2  CA               dex
004764r 2               
004764r 2  95 01            sta 1,x
004766r 2  98               tya
004767r 2  95 00            sta 0,x
004769r 2               
004769r 2  60               rts
00476Ar 2               
00476Ar 2               ; =====================================================================
00476Ar 2               ; LOW LEVEL HELPER FUNCTIONS
00476Ar 2               
00476Ar 2               byte_to_ascii:
00476Ar 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
00476Ar 2               .scope
00476Ar 2  48               pha
00476Br 2  4A               lsr             ; convert high nibble first
00476Cr 2  4A               lsr
00476Dr 2  4A               lsr
00476Er 2  4A               lsr
00476Fr 2  20 rr rr         jsr _nibble_to_ascii
004772r 2  68               pla
004773r 2               
004773r 2                   ; fall through to _nibble_to_ascii
004773r 2               
004773r 2               _nibble_to_ascii:
004773r 2               ; """Private helper function for byte_to_ascii: Print lower nibble
004773r 2               ; of A and and EMIT it. This does the actual work.
004773r 2               ; """
004773r 2  29 0F            and #$0F
004775r 2  09 30            ora #'0'
004777r 2  C9 3A            cmp #$3A        ; '9+1
004779r 2  90 02            bcc @1
00477Br 2  69 06            adc #$06
00477Dr 2               
00477Dr 2  4C rr rr     @1:               jmp emit_a
004780r 2               
004780r 2  60               rts
004781r 2               .endscope
004781r 2               
004781r 2               compare_16bit:
004781r 2               ; """Compare TOS/NOS and return results in form of the 65c02 flags
004781r 2               ; Adapted from Leventhal "6502 Assembly Language Subroutines", see
004781r 2               ; also http://www.6502.org/tutorials/compare_beyond.html
004781r 2               ; For signed numbers, Z signals equality and N which number is larger:
004781r 2               ;       if TOS = NOS: Z=1 and N=0
004781r 2               ;       if TOS > NOS: Z=0 and N=0
004781r 2               ;       if TOS < NOS: Z=0 and N=1
004781r 2               ; For unsigned numbers, Z signals equality and C which number is larger:
004781r 2               ;       if TOS = NOS: Z=1 and N=0
004781r 2               ;       if TOS > NOS: Z=0 and C=1
004781r 2               ;       if TOS < NOS: Z=0 and C=0
004781r 2               ; Compared to the book routine, WORD1 (MINUED) is TOS
004781r 2               ;                               WORD2 (SUBTRAHEND) is NOS
004781r 2               ; """
004781r 2               .scope
004781r 2                   ; Compare LSB first to set the carry flag
004781r 2  B5 00            lda 0,x                 ; LSB of TOS
004783r 2  D5 02            cmp 2,x                 ; LSB of NOS
004785r 2  F0 0A            beq _equal
004787r 2               
004787r 2                   ; LSBs are not equal, compare MSB
004787r 2  B5 01            lda 1,x                 ; MSB of TOS
004789r 2  F5 03            sbc 3,x                 ; MSB of NOS
00478Br 2  09 01            ora #1                  ; Make zero flag 0 because not equal
00478Dr 2  70 08            bvs _overflow
00478Fr 2  80 08            bra _not_equal
004791r 2               _equal:
004791r 2                   ; Low bytes are equal, so we compare high bytes
004791r 2  B5 01            lda 1,x                 ; MSB of TOS
004793r 2  F5 03            sbc 3,x                 ; MSB of NOS
004795r 2  50 04            bvc _done
004797r 2               _overflow:
004797r 2                   ; Handle overflow because we use signed numbers
004797r 2  49 80            eor #$80                ; complement negative flag
004799r 2               _not_equal:
004799r 2  09 01            ora #1                  ; if overflow, we can't be eqal
00479Br 2               _done:
00479Br 2  60               rts
00479Cr 2               .endscope
00479Cr 2               
00479Cr 2               current_to_dp:
00479Cr 2               ; """Look up the current (compilation) dictionary pointer
00479Cr 2               ; in the wordlist set and put it into the dp zero-page
00479Cr 2               ; variable. Uses A and Y.
00479Cr 2               ; """
00479Cr 2                   ; Determine which wordlist is current
00479Cr 2  A0 04            ldy #current_offset
00479Er 2  B1 rr            lda (up),y      ; current is a byte variable
0047A0r 2  0A               asl             ; turn it into an offset (in cells)
0047A1r 2               
0047A1r 2                   ; Get the dictionary pointer for that wordlist.
0047A1r 2  18               clc
0047A2r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
0047A4r 2  A8               tay
0047A5r 2  B1 rr            lda (up),y              ; get the dp for that wordlist.
0047A7r 2  85 rr            sta dp
0047A9r 2  C8               iny
0047AAr 2  B1 rr            lda (up),y
0047ACr 2  85 rr            sta dp+1
0047AEr 2               
0047AEr 2  60               rts
0047AFr 2               
0047AFr 2               
0047AFr 2               dp_to_current:
0047AFr 2               ; """Look up which wordlist is current and update its pointer
0047AFr 2               ; with the value in dp. Uses A and Y.
0047AFr 2               ; """
0047AFr 2                   ; Determine which wordlist is current
0047AFr 2  A0 04            ldy #current_offset
0047B1r 2  B1 rr            lda (up),y      ; current is a byte variable
0047B3r 2  0A               asl             ; turn it into an offset (in cells)
0047B4r 2               
0047B4r 2                   ; Get the dictionary pointer for that wordlist.
0047B4r 2  18               clc
0047B5r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
0047B7r 2  A8               tay
0047B8r 2  A5 rr            lda dp
0047BAr 2  91 rr            sta (up),y              ; get the dp for that wordlist.
0047BCr 2  C8               iny
0047BDr 2  A5 rr            lda dp+1
0047BFr 2  91 rr            sta (up),y
0047C1r 2               
0047C1r 2  60               rts
0047C2r 2               
0047C2r 2               interpret:
0047C2r 2               .scope
0047C2r 2               ; """Core routine for the interpreter called by EVALUATE and QUIT.
0047C2r 2               ; Process one line only. Assumes that the address of name is in
0047C2r 2               ; cib and the length of the whole input line string is in ciblen
0047C2r 2               ; """
0047C2r 2                   ; Normally we would use PARSE here with the SPACE character as
0047C2r 2                   ; a parameter (PARSE replaces WORD in modern Forths). However,
0047C2r 2                   ; Gforth's PARSE-NAME makes more sense as it uses spaces as
0047C2r 2                   ; delimiters per default and skips any leading spaces, which
0047C2r 2                   ; PARSE doesn't
0047C2r 2               _loop:
0047C2r 2  20 rr rr         jsr xt_parse_name       ; ( "string" -- addr u )
0047C5r 2               
0047C5r 2                   ; If PARSE-NAME returns 0 (empty line), no characters were left
0047C5r 2                   ; in the line and we need to go get a new line
0047C5r 2  B5 00            lda 0,x
0047C7r 2  15 01            ora 1,x
0047C9r 2  F0 70            beq _line_done
0047CBr 2               
0047CBr 2                   ; Go to FIND-NAME to see if this is a word we know. We have to
0047CBr 2                   ; make a copy of the address in case it isn't a word we know and
0047CBr 2                   ; we have to go see if it is a number
0047CBr 2  20 rr rr         jsr xt_two_dup          ; ( addr u -- addr u addr u )
0047CEr 2  20 rr rr         jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
0047D1r 2               
0047D1r 2                   ; A zero signals that we didn't find a word in the Dictionary
0047D1r 2  B5 00            lda 0,x
0047D3r 2  15 01            ora 1,x
0047D5r 2  D0 28            bne _got_name_token
0047D7r 2               
0047D7r 2                   ; We didn't get any nt we know of, so let's see if this is
0047D7r 2                   ; a number.
0047D7r 2  E8               inx                     ; ( addr u 0 -- addr u )
0047D8r 2  E8               inx
0047D9r 2               
0047D9r 2                   ; If the number conversion doesn't work, NUMBER will do the
0047D9r 2                   ; complaining for us
0047D9r 2  20 rr rr         jsr xt_number           ; ( addr u -- u|d )
0047DCr 2               
0047DCr 2                   ; Otherweise, if we're interpreting, we're done
0047DCr 2  A5 rr            lda state
0047DEr 2  F0 E2            beq _loop
0047E0r 2               
0047E0r 2                   ; We're compiling, so there is a bit more work.  Check
0047E0r 2                   ; status bit 5 to see if it's a single or double-cell
0047E0r 2                   ; number.
0047E0r 2  A9 20            lda #$20
0047E2r 2  24 rr            bit status
0047E4r 2  F0 0D            beq _single_number
0047E6r 2               
0047E6r 2                   ; It's a double cell number.  If we swap the
0047E6r 2                   ; upper and lower half, we can use the literal_runtime twice
0047E6r 2                   ; to compile it into the dictionary.
0047E6r 2  20 rr rr         jsr xt_swap
0047E9r 2  A0 rr            ldy #>literal_runtime
0047EBr 2  A9 rr            lda #<literal_runtime
0047EDr 2  20 rr rr         jsr cmpl_subroutine
0047F0r 2               
0047F0r 2                   ; compile our number
0047F0r 2  20 rr rr         jsr xt_comma
0047F3r 2               
0047F3r 2                   ; Fall into _single_number to process the other half.
0047F3r 2               _single_number:
0047F3r 2  A0 rr            ldy #>literal_runtime
0047F5r 2  A9 rr            lda #<literal_runtime
0047F7r 2  20 rr rr         jsr cmpl_subroutine
0047FAr 2               
0047FAr 2                   ; compile our number
0047FAr 2  20 rr rr         jsr xt_comma
0047FDr 2               
0047FDr 2                   ; That was so much fun, let's do it again!
0047FDr 2  80 C3            bra _loop
0047FFr 2               
0047FFr 2               _got_name_token:
0047FFr 2                   ; We have a known word's nt TOS. We're going to need its xt
0047FFr 2                   ; though, which is four bytes father down.
0047FFr 2               
0047FFr 2                   ; We arrive here with ( addr u nt ), so we NIP twice
0047FFr 2  B5 00            lda 0,x
004801r 2  95 04            sta 4,x
004803r 2  B5 01            lda 1,x
004805r 2  95 05            sta 5,x
004807r 2               
004807r 2  E8               inx
004808r 2  E8               inx
004809r 2  E8               inx
00480Ar 2  E8               inx                     ; ( nt )
00480Br 2               
00480Br 2                   ; Save a version of nt for error handling and compilation stuff
00480Br 2  B5 00            lda 0,x
00480Dr 2  85 rr            sta tmpbranch
00480Fr 2  B5 01            lda 1,x
004811r 2  85 rr            sta tmpbranch+1
004813r 2               
004813r 2  20 rr rr         jsr xt_name_to_int      ; ( nt - xt )
004816r 2               
004816r 2                   ; See if we are in interpret or compile mode, 0 is interpret
004816r 2  A5 rr            lda state
004818r 2  D0 13            bne _compile
00481Ar 2               
00481Ar 2                   ; We are interpreting, so EXECUTE the xt that is TOS. First,
00481Ar 2                   ; though, see if this isn't a compile-only word, which would be
00481Ar 2                   ; illegal. The status byte is the second one of the header.
00481Ar 2  A0 01            ldy #1
00481Cr 2  B1 rr            lda (tmpbranch),y
00481Er 2  29 01            and #CO                 ; mask everything but Compile Only bit
004820r 2  F0 05            beq _interpret
004822r 2               
004822r 2  A9 02            lda #err_compileonly
004824r 2  4C rr rr         jmp error
004827r 2               
004827r 2               _interpret:
004827r 2                   ; We JSR to EXECUTE instead of calling the xt directly because
004827r 2                   ; the RTS of the word we're executing will bring us back here,
004827r 2                   ; skipping EXECUTE completely during RTS. If we were to execute
004827r 2                   ; xt directly, we have to fool around with the Return Stack
004827r 2                   ; instead, which is actually slightly slower
004827r 2  20 rr rr         jsr xt_execute
00482Ar 2               
00482Ar 2                   ; That's quite enough for this word, let's get the next one
00482Ar 2  4C rr rr         jmp _loop
00482Dr 2               
00482Dr 2               _compile:
00482Dr 2                   ; We're compiling! However, we need to see if this is an
00482Dr 2                   ; IMMEDIATE word, which would mean we execute it right now even
00482Dr 2                   ; during compilation mode. Fortunately, we saved the nt so life
00482Dr 2                   ; is easier. The flags are in the second byte of the header
00482Dr 2  A0 01            ldy #1
00482Fr 2  B1 rr            lda (tmpbranch),y
004831r 2  29 04            and #IM                 ; Mask all but IM bit
004833r 2  D0 F2            bne _interpret          ; IMMEDIATE word, execute right now
004835r 2               
004835r 2                   ; Compile the xt into the Dictionary with COMPILE,
004835r 2  20 rr rr         jsr xt_compile_comma
004838r 2  4C rr rr         jmp _loop
00483Br 2               
00483Br 2               _line_done:
00483Br 2                   ; drop stuff from PARSE_NAME
00483Br 2  E8               inx
00483Cr 2  E8               inx
00483Dr 2  E8               inx
00483Er 2  E8               inx
00483Fr 2               
00483Fr 2  60               rts
004840r 2               .endscope
004840r 2               
004840r 2               
004840r 2               is_printable:
004840r 2               .scope
004840r 2               ; """Given a character in A, check if it is a printable ASCII
004840r 2               ; character in the range from $20 to $7E inclusive. Returns the
004840r 2               ; result in the Carry Flag: 0 (clear) is not printable, 1 (set)
004840r 2               ; is printable. Keeps A. See
004840r 2               ; http://www.obelisk.me.uk/6502/algorithms.html for a
004840r 2               ; discussion of various ways to do this
004840r 2  C9 20            cmp #AscSP              ; $20
004842r 2  90 08            bcc _done
004844r 2  C9 7F            cmp #'~' + 1             ; $7E
004846r 2  B0 03            bcs _failed
004848r 2               
004848r 2  38               sec
004849r 2  80 01            bra _done
00484Br 2               _failed:
00484Br 2  18               clc
00484Cr 2               _done:
00484Cr 2  60               rts
00484Dr 2               .endscope
00484Dr 2               
00484Dr 2               
00484Dr 2               is_whitespace:
00484Dr 2               .scope
00484Dr 2               ; """Given a character in A, check if it is a whitespace
00484Dr 2               ; character, that is, an ASCII value from 0 to 32 (where
00484Dr 2               ; 32 is SPACE). Returns the result in the Carry Flag:
00484Dr 2               ; 0 (clear) is no, it isn't whitespace, while 1 (set) means
00484Dr 2               ; that it is whitespace. See PARSE and PARSE-NAME for
00484Dr 2               ; a discussion of the uses. Does not change A or Y.
00484Dr 2  C9 00            cmp #00         ; explicit comparison to leave Y untouched
00484Fr 2  90 08            bcc _done
004851r 2               
004851r 2  C9 21            cmp #AscSP+1
004853r 2  B0 03            bcs _failed
004855r 2               
004855r 2  38               sec
004856r 2  80 01            bra _done
004858r 2               _failed:
004858r 2  18               clc
004859r 2               _done:
004859r 2  60               rts
00485Ar 2               .endscope
00485Ar 2               
00485Ar 2               
00485Ar 2               ; Underflow tests. We jump to the label with the number of cells (not: bytes)
00485Ar 2               ; required for the word. This routine flows into the generic error handling
00485Ar 2               ; code
00485Ar 2               underflow_1:
00485Ar 2               ; """Make sure we have at least one cell on the Data Stack"""
00485Ar 2  E0 FE            cpx #dsp0-1
00485Cr 2  10 10            bpl underflow_error
00485Er 2  60               rts
00485Fr 2               underflow_2:
00485Fr 2               ; """Make sure we have at least two cells on the Data Stack"""
00485Fr 2  E0 FC            cpx #dsp0-3
004861r 2  10 0B            bpl underflow_error
004863r 2  60               rts
004864r 2               underflow_3:
004864r 2               ; """Make sure we have at least three cells on the Data Stack"""
004864r 2  E0 FA            cpx #dsp0-5
004866r 2  10 06            bpl underflow_error
004868r 2  60               rts
004869r 2               underflow_4:
004869r 2               ; """Make sure we have at least four cells on the Data Stack"""
004869r 2  E0 F8            cpx #dsp0-7
00486Br 2  10 01            bpl underflow_error
00486Dr 2  60               rts
00486Er 2               
00486Er 2               underflow_error:
00486Er 2                   ; Entry for COLD/ABORT/QUIT
00486Er 2  A9 09            lda #err_underflow      ; fall through to error
004870r 2               
004870r 2               error:
004870r 2               ; """Given the error number in a, print the associated error string and
004870r 2               ; call abort. Uses tmp3.
004870r 2               ; """
004870r 2  0A               asl
004871r 2  A8               tay
004872r 2  B9 rr rr         lda error_table,y
004875r 2  85 rr            sta tmp3                ; LSB
004877r 2  C8               iny
004878r 2  B9 rr rr         lda error_table,y
00487Br 2  85 rr            sta tmp3+1              ; MSB
00487Dr 2               
00487Dr 2  20 rr rr         jsr print_common
004880r 2  20 rr rr         jsr xt_cr
004883r 2  4C rr rr         jmp xt_abort            ; no jsr, as we clobber return stack
004886r 2               
004886r 2               
004886r 2               ; =====================================================================
004886r 2               ; PRINTING ROUTINES
004886r 2               
004886r 2               ; We distinguish two types of print calls, both of which take the string number
004886r 2               ; (see strings.asm) in A:
004886r 2               
004886r 2               ;       print_string       - with a line feed
004886r 2               ;       print_string_no_lf - without a line feed
004886r 2               
004886r 2               ; In addition, print_common provides a lower-level alternative for error
004886r 2               ; handling and anything else that provides the address of the
004886r 2               ; zero-terminated string directly in tmp3. All of those routines assume that
004886r 2               ; printing should be more concerned with size than speed, because anything to
004886r 2               ; do with humans reading text is going to be slow.
004886r 2               
004886r 2               print_string_no_lf:
004886r 2               ; """Given the number of a zero-terminated string in A, print it to the
004886r 2               ; current output without adding a LF. Uses Y and tmp3 by falling
004886r 2               ; through to print_common
004886r 2               ; """
004886r 2                   ; Get the entry from the string table
004886r 2  0A               asl
004887r 2  A8               tay
004888r 2  B9 rr rr         lda string_table,y
00488Br 2  85 rr            sta tmp3                ; LSB
00488Dr 2  C8               iny
00488Er 2  B9 rr rr         lda string_table,y
004891r 2  85 rr            sta tmp3+1              ; MSB
004893r 2               
004893r 2                   ; fall through to print_common
004893r 2               print_common:
004893r 2               ; """Common print routine used by both the print functions and
004893r 2               ; the error printing routine. Assumes string address is in tmp3. Uses
004893r 2               ; Y.
004893r 2               ; """
004893r 2               .scope
004893r 2  A0 00            ldy #0
004895r 2               _loop:
004895r 2  B1 rr            lda (tmp3),y
004897r 2  F0 06            beq _done               ; strings are zero-terminated
004899r 2               
004899r 2  20 rr rr         jsr emit_a              ; allows vectoring via output
00489Cr 2  C8               iny
00489Dr 2  80 F6            bra _loop
00489Fr 2               _done:
00489Fr 2  60               rts
0048A0r 2               .endscope
0048A0r 2               
0048A0r 2               print_string:
0048A0r 2               ; """Print a zero-terminated string to the console/screen, adding a LF.
0048A0r 2               ; We do not check to see if the index is out of range. Uses tmp3.
0048A0r 2               ; """
0048A0r 2  20 rr rr         jsr print_string_no_lf
0048A3r 2  4C rr rr         jmp xt_cr               ; JSR/RTS because never compiled
0048A6r 2               
0048A6r 2               
0048A6r 2               print_u:
0048A6r 2               ; """basic printing routine used by higher-level constructs,
0048A6r 2               ; the equivalent of the forth word  0 <# #s #> type  which is
0048A6r 2               ; basically u. without the space at the end. used for various
0048A6r 2               ; outputs
0048A6r 2               ; """
0048A6r 2  20 rr rr         jsr xt_zero                     ; 0
0048A9r 2  20 rr rr         jsr xt_less_number_sign         ; <#
0048ACr 2  20 rr rr         jsr xt_number_sign_s            ; #S
0048AFr 2  20 rr rr         jsr xt_number_sign_greater      ; #>
0048B2r 2  4C rr rr         jmp xt_type                     ; JSR/RTS because never compiled
0048B5r 2               
0048B5r 2               ; END
0048B5r 2               
0048B5r 1               
0048B5r 1               kernel_init:
0048B5r 1               v_nmi:
0048B5r 1  A9 FF            lda #$FF
0048B7r 1  8D 82 FF         sta DDRB
0048BAr 1  8D 83 FF         sta DDRA
0048BDr 1  9C 81 FF         stz PORTA
0048C0r 1  9C 80 FF         stz PORTB
0048C3r 1               .ifdef video_init
0048C3r 1                   jsr video_init
0048C3r 1               .endif
0048C3r 1               .ifdef ps2_init
0048C3r 1                   jsr ps2_init
0048C3r 1               .endif
0048C3r 1               .ifdef timer_init
0048C3r 1  20 rr rr         jsr timer_init
0048C6r 1               .endif
0048C6r 1  20 rr rr         jsr acia_init
0048C9r 1               .ifdef lcd_init
0048C9r 1  20 rr rr         jsr lcd_init
0048CCr 1               .endif
0048CCr 1               .ifdef spi_init
0048CCr 1                   jsr spi_init
0048CCr 1               .endif
0048CCr 1               .ifdef kb_init
0048CCr 1  20 rr rr         jsr kb_init
0048CFr 1               .endif
0048CFr 1               
0048CFr 1               
0048CFr 1               
0048CFr 1  A2 00 BD rr      printascii welcome_message
0048D3r 1  rr F0 06 20  
0048D7r 1  rr rr E8 80  
0048DCr 1               
0048DCr 1  4C rr rr         jmp forth
0048DFr 1               
0048DFr 1               platform_bye:
0048DFr 1  4C rr rr         jmp platform_bye
0048E2r 1               
0048E2r 1               
0048E2r 1               kernel_putc:
0048E2r 1                   ; """Print a single character to the console. """
0048E2r 1                   ;; Send_Char - send character in A out serial port.
0048E2r 1                   ;; Uses: A (original value restored)
0048E2r 1               send_char:
0048E2r 1  48               pha
0048E3r 1                   .ifdef char_out
0048E3r 1                   jsr char_out
0048E3r 1                   .endif
0048E3r 1                   .ifdef acia_out
0048E3r 1  20 rr rr         jsr acia_out
0048E6r 1                   .endif
0048E6r 1               send_char_exit:
0048E6r 1               .ifdef lcd_print
0048E6r 1                   ; jsr lcd_print
0048E6r 1               .endif
0048E6r 1  68               pla
0048E7r 1  60               rts
0048E8r 1               
0048E8r 1               
0048E8r 1                       ;; Get_Char - get a character from the serial port into A.
0048E8r 1                       ;; Set the carry flag if char is valid.
0048E8r 1                       ;; Return immediately with carry flag clear if no char available.
0048E8r 1                       ;; Uses: A (return value)
0048E8r 1               
0048E8r 1               Get_Char:
0048E8r 1  20 rr rr         jsr acia_getc
0048EBr 1  90 05            bcc get_ps2_char                ; check keyboard buffer if nothing from ACIA
0048EDr 1  20 rr rr         jsr check_ctrl_c
0048F0r 1  38               sec                             ; Set Carry to show we got a character
0048F1r 1  60               rts                             ; Return
0048F2r 1               
0048F2r 1               get_ps2_char:                       ; no ACIA char available, try to get from KB buffer
0048F2r 1               .ifdef ps2_get_char
0048F2r 1                   jsr ps2_get_char
0048F2r 1               .endif
0048F2r 1  90 02            bcc get_kb_char
0048F4r 1  38               sec
0048F5r 1               
0048F5r 1  60               rts
0048F6r 1               get_kb_char:
0048F6r 1                   .ifdef kb_get_char
0048F6r 1               
0048F6r 1                   ; ldy #5
0048F6r 1                   ; jsr delay_short
0048F6r 1                   ; ply
0048F6r 1  20 rr rr             jsr kb_get_char
0048F9r 1               
0048F9r 1                   .endif
0048F9r 1               exit:                         ; Indicate no char available.
0048F9r 1  60               rts                             ; return
0048FAr 1               
0048FAr 1               kernel_getc:
0048FAr 1                   ; """Get a single character from the keyboard (waits for key).
0048FAr 1                   ; """
0048FAr 1                   ;; Get_Char_Wait - same as Get_Char only blocking.
0048FAr 1                   ;; Uses: A (return value)
0048FAr 1               Get_Char_Wait:
0048FAr 1  20 rr rr         jsr Get_Char
0048FDr 1  90 FB            bcc Get_Char_Wait
0048FFr 1  60               rts
004900r 1               
004900r 1               check_ctrl_c:
004900r 1                   ;; Check if we have ctrl-C character, if so jump to nmi
004900r 1  C9 03            cmp #$03
004902r 1  D0 10            bne exit_ctrl_c
004904r 1  A2 00 BD rr      printascii abort_message
004908r 1  rr F0 06 20  
00490Cr 1  rr rr E8 80  
004911r 1  4C rr rr         jmp xt_abort
004914r 1               
004914r 1               exit_ctrl_c:
004914r 1  60               rts
004915r 1               
004915r 1               
004915r 1               
004915r 1               v_irq:                          ; IRQ handler
004915r 1  48                   pha
004916r 1  5A                   phy
004917r 1                       ; check if bit 7 of IFR is set
004917r 1  AD 8D FF             lda IFR
00491Ar 1  10 0B                bpl v_kb_irq  ; Interrupt not from VIA, exit
00491Cr 1               
00491Cr 1  29 08                and #$08        ; ps2 has priority
00491Er 1  D0 12                bne v_irq_ps2
004920r 1  AD 8D FF             lda IFR
004923r 1  29 40                and #$40
004925r 1  D0 0D                bne v_irq_timer
004927r 1               v_kb_irq:
004927r 1  AD 9D FF             lda KB_IFR
00492Ar 1  10 1A                bpl v_irq_exit
00492Cr 1  29 40                and #$40
00492Er 1  D0 0F                bne v_kb_irq_timer
004930r 1  80 14                bra v_irq_exit
004932r 1               
004932r 1               
004932r 1               v_irq_ps2:
004932r 1                   .ifdef ps2_irq
004932r 1                       lda time
004932r 1                       sta last_ps2_time
004932r 1                       lda time+1
004932r 1                       sta last_ps2_time+1
004932r 1                       lda time+2
004932r 1                       sta last_ps2_time+2
004932r 1                       lda time+3
004932r 1                       sta last_ps2_time+3
004932r 1                       ; this delay is here to ensure we prevent desynchronization
004932r 1                       ;ldy #$04         ; correct delay seems to be #$20 at 10Mhz
004932r 1                       ; jsr delay_short
004932r 1               
004932r 1               
004932r 1                       jsr ps2_irq
004932r 1               
004932r 1                       ; ldy #$04         ; correct delay seems to be #$20 at 10Mhz
004932r 1                       ; jsr delay_short
004932r 1                   .endif
004932r 1  80 12                bra v_irq_exit
004934r 1               
004934r 1               v_irq_timer:
004934r 1  AD 84 FF             lda T1CL
004937r 1                       ; clear timer interrupt
004937r 1                   .ifdef timer_irq
004937r 1  20 rr rr             jsr timer_irq
00493Ar 1                   .endif
00493Ar 1  20 rr rr             jsr Get_Char ; Check if a char is waiting to be able to break on CTRL-C
00493Dr 1                       ; check if there is a char waiting to be printed to the lcd
00493Dr 1                       ; lda lcd_char
00493Dr 1                       ; beq v_exit
00493Dr 1                       ; jsr lcd_print
00493Dr 1                       ; stz lcd_char
00493Dr 1               
00493Dr 1               
00493Dr 1  80 07                bra v_irq_exit
00493Fr 1               v_kb_irq_timer:
00493Fr 1  AD 94 FF         lda KB_T1CL ; clear timer interrupt
004942r 1  E6 rr            inc kb_time
004944r 1  D0 00            bne v_irq_exit
004946r 1                   ;jsr kb_scan
004946r 1               v_irq_exit:
004946r 1  7A               ply
004947r 1  68               pla
004948r 1  40               rti
004949r 1               
004949r 1               .segment "RODATA"
0000C0r 1               
0000C0r 1  57 65 6C 63  welcome_message: .byte "Welcome to Planck 6502", $0D, "Type 'words' for available words", 0
0000C4r 1  6F 6D 65 20  
0000C8r 1  74 6F 20 50  
0000F8r 1  0D 0A 00     abort_message: .byte AscCR, AscLF, 0
0000FBr 1               
0000FBr 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        .word v_nmi
000002r 1  rr rr        .word v_reset
000004r 1  rr rr        .word v_irq
000004r 1               
