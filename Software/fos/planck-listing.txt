ca65 V2.18 - N/A
Main file   : platform/planck/main.s
Current file: platform/planck/main.s

000000r 1               
000000r 1               .include "../../macros.s"
000000r 2               .macro  printascii   addr
000000r 2               .local @loop
000000r 2               .local @done
000000r 2                   phx
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda addr,x
000000r 2                   beq @done
000000r 2                   jsr kernel_putc
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @done:
000000r 2                   plx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               
000000r 2               .macro  cp16   src, dest
000000r 2                   lda src
000000r 2                   sta dest
000000r 2                   lda src + 1
000000r 2                   sta dest + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro printstr addr, len
000000r 2               .repeat len, I
000000r 2               lda addr + I
000000r 2               jsr kernel_putc
000000r 2               .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl16 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl32 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2                   rol src + 2
000000r 2                   rol src + 3
000000r 2               .endmacro
000000r 2               
000000r 2               .macro lsr16 src
000000r 2                   lsr src + 1
000000r 2                   ror src
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc16 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment the MSB if LSB wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc32 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment next byte if LSB wrapped round
000000r 2                   bne @done
000000r 2                   inc src+2       ;Increment the next byte the previous wrapped round
000000r 2                   bne @done
000000r 2                   inc src+3       ;Increment the MSB if previous wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16 src
000000r 2               .local @skip
000000r 2               .local @end
000000r 2                   lda src             ; load low byte
000000r 2                   bne @skip           ; if it's not zero, just decrement it
000000r 2                   dec src + 1         ; if low byte is zero decrement high byte
000000r 2               @skip:
000000r 2                   dec src
000000r 2               @end:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16zero src
000000r 2               .local @skip
000000r 2               .local @end
000000r 2                   lda src             ; load low byte
000000r 2                   bne @skip           ; if it's not zero, decrement it
000000r 2                   dec src + 1         ; if low byte is zero decrement high byte
000000r 2                   beq @end            ; if high byte is also zero, we reached zero, exit now
000000r 2               @skip:
000000r 2                   dec src
000000r 2                   bne @end            ; if low byte is not zero exit now
000000r 2                   lda src + 1         ; if low byte was zero, load high byte to check if it's also zero
000000r 2               @end:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro add16 first, second, result
000000r 2                   CLC             ;Ensure carry is clear
000000r 2                   LDA first+0       ;Add the two least significant bytes
000000r 2                   ADC second+0
000000r 2                   STA result+0       ;... and store the result
000000r 2                   LDA first+1       ;Add the two most significant bytes
000000r 2                   ADC second+1       ;... and any propagated carry bit
000000r 2                   STA result+1       ;... and store the result
000000r 2               .endmacro
000000r 2               
000000r 2               ; compare data at two adresses for defined length
000000r 2               ; On exit, carry is set if there is a match
000000r 2               ; and unset if no match
000000r 2               ; length of data to check is in X
000000r 2               
000000r 2               .macro memcmp first, second
000000r 2               .local @exit
000000r 2               .local @loop
000000r 2               .local @exit_fail
000000r 2               @loop:
000000r 2                   lda first, x
000000r 2                   cmp second, x
000000r 2                   bne @exit_fail
000000r 2                   dex
000000r 2                   bne @loop
000000r 2                   lda first           ; check 0th element
000000r 2                   cmp second
000000r 2                   bne @exit_fail
000000r 2                   sec
000000r 2                   bra @exit
000000r 2               @exit_fail:
000000r 2                   clc
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               ; copy data from one address to another for defined length
000000r 2               ; length of data to copy is in X
000000r 2               .macro memcp first, second
000000r 2               .local @exit
000000r 2               .local @loop
000000r 2               @loop:
000000r 2                   lda first, x
000000r 2                   sta second, x
000000r 2                   dex
000000r 2                   bne @loop
000000r 2                   lda first           ; copy zeroth item
000000r 2                   sta second
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               ; calculates length of zero terminated string
000000r 2               ; result is in x
000000r 2               .macro strlen address
000000r 2               .local @loop
000000r 2               .local @exit
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda address, x
000000r 2                   beq @exit
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_axy
000000r 2               	pha		; push accumulator to stack
000000r 2               	phx
000000r 2                   phy
000000r 2               .endmacro
000000r 2               
000000r 2               .macro pull_axy
000000r 2               	ply		; pull y from stack
000000r 2               	plx		; pull x from stack
000000r 2               	pla		; pull a from stack
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro push_ax
000000r 2               	pha
000000r 2               	phx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ax
000000r 2               	pla
000000r 2               	plx
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_ay
000000r 2               	pha
000000r 2               	phy
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ay
000000r 2               	pla
000000r 2               	ply
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro mov32 SRC, DEST
000000r 2               	lda SRC
000000r 2               	sta DEST
000000r 2               	lda SRC+1
000000r 2               	sta DEST+1
000000r 2               	lda SRC+2
000000r 2               	sta DEST+2
000000r 2               	lda SRC+3
000000r 2               	sta DEST+3
000000r 2               .endmacro
000000r 2               
000000r 1               CLOCK_SPEED = 24000000
000000r 1               TALI_OPTIONAL_ASSEMBLER = 1
000000r 1               
000000r 1               ram_end = $8000
000000r 1               
000000r 1               ; select includes to enable card drivers
000000r 1               
000000r 1               .include "drivers/cf.inc"
000000r 2               
000000r 2               CF_READ_SECTOR_COMMAND = $20
000000r 2               CF_WRITE_SECTOR_COMMAND = $30
000000r 2               CF_ADDRESS = $FFD0
000000r 2               
000000r 1               .include "drivers/acia.inc"
000000r 2               ACIA_BASE   = $FFE0
000000r 2               ACIA_DATA = ACIA_BASE
000000r 2               ACIA_STATUS = ACIA_BASE + 1
000000r 2               ACIA_CMD = ACIA_BASE + 2
000000r 2               ACIA_CTRL = ACIA_BASE + 3
000000r 2               
000000r 2               
000000r 1               .include "drivers/via.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               VIA1_BASE   = $FF80
000000r 2               PORTB = VIA1_BASE
000000r 2               PORTA  = VIA1_BASE+1
000000r 2               DDRB = VIA1_BASE+2
000000r 2               DDRA = VIA1_BASE+3
000000r 2               
000000r 2               
000000r 2               T1CL = VIA1_BASE + 4
000000r 2               T1CH = VIA1_BASE + 5
000000r 2               T1LL = VIA1_BASE + 6
000000r 2               T1LH = VIA1_BASE + 7
000000r 2               ACR = VIA1_BASE + 11
000000r 2               PCR = VIA1_BASE + 12
000000r 2               IFR = VIA1_BASE + 13
000000r 2               IER = VIA1_BASE + 14
000000r 2               
000000r 1               ; .include "drivers/sd.inc"
000000r 1               ; .include "drivers/ps2.inc"
000000r 1               ; .include "drivers/4004.inc"
000000r 1               ; .include "drivers/lcd.inc"
000000r 1               ; .include "drivers/vga.inc"
000000r 1               ; .include "drivers/keyboard.inc"
000000r 1               
000000r 1               .segment "ZEROPAGE": zeropage
000000r 1  xx xx        io_buffer_ptr: .res 2
000002r 1               
000002r 1               .include "drivers/zp.s"
000002r 2               ; Copyright 2020 Jonathan Foucher
000002r 2               
000002r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000002r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000002r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000002r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000002r 2               ; is furnished to do so, subject to the following conditions:
000002r 2               
000002r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000002r 2               ; substantial portions of the Software.
000002r 2               
000002r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000002r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000002r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000002r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000002r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000002r 2               ; DEALINGS IN THE SOFTWARE.
000002r 2               
000002r 2               ; next_addr: .res 1
000002r 2               
000002r 2               
000002r 2  xx xx        tmp_var: .res 2
000004r 2  xx xx        stack_p: .res 2
000006r 2               .ifdef VIA1_BASE
000006r 2  xx xx xx xx  time: .res 4
00000Ar 2               .endif
00000Ar 2               
00000Ar 1               
00000Ar 1               .segment "BSS"
000000r 1               .ifdef VIA1_BASE
000000r 1  xx           lcd_absent: .res 1
000001r 1               .endif
000001r 1               .ifdef ACIA_BASE
000001r 1  xx           has_acia: .res 1
000002r 1               .endif
000002r 1               
000002r 1               .ifdef CF_ADDRESS
000002r 1               IO_BUFFER = cp0+256 ; set IO_BUFFER to block buffer
000002r 1  xx xx xx xx  IO_SECTOR: .res 4
000006r 1               .endif
000006r 1               
000006r 1               
000006r 1               
000006r 1               .segment "STARTUP"
000000r 1               .import    copydata
000000r 1               .import zerobss
000000r 1               zero_ram:
000000r 1  A2 FF            ldx #$FF
000002r 1               zero_zp:
000002r 1  74 00            stz 0, x
000004r 1  CA               dex
000005r 1  D0 FB            bne zero_zp
000007r 1  64 00            stz $00
000009r 1  A9 00            lda #0
00000Br 1  85 01            sta $01
00000Dr 1               
00000Dr 1  A2 80            ldx #$80
00000Fr 1  A0 00            ldy #0
000011r 1  A9 00            lda #0
000013r 1               @loop:
000013r 1  91 00            sta ($0), y
000015r 1  C8               iny
000016r 1  D0 FB            bne @loop
000018r 1  E6 01            inc $1
00001Ar 1  CA               dex
00001Br 1  D0 F6            bne @loop
00001Dr 1               
00001Dr 1  4C rr rr         jmp ram_zeroed
000020r 1               
000020r 1               v_reset:
000020r 1  4C rr rr         jmp zero_ram
000023r 1               ram_zeroed:
000023r 1  20 rr rr         JSR     copydata
000026r 1  20 rr rr         jsr zerobss
000029r 1               
000029r 1  4C rr rr         jmp kernel_init
00002Cr 1               
00002Cr 1               
00002Cr 1               
00002Cr 1               .segment "DATA"
000000r 1               
000000r 1               .include "drivers/delayroutines.s"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               ; this routine delays by 2304 * y + 23 cycles
000000r 2               delay:
000000r 2  DA             phx       ; 3 cycles
000001r 2  5A             phy       ; 3 cycles
000002r 2               two:
000002r 2  A2 FF          ldx #$ff  ; 2 cycles
000004r 2               one:
000004r 2  EA             nop       ; 2 cycles
000005r 2  EA             nop       ; 2 cycles
000006r 2  CA             dex       ; 2 cycles
000007r 2  D0 FB          bne one   ; 3 for all cycles, 2 for last
000009r 2  88             dey       ; 2 cycles
00000Ar 2  D0 F6          bne two   ; 3 for all cycles, 2 for last
00000Cr 2  7A             ply       ; 4 cycles
00000Dr 2  FA             plx       ; 4 cycles
00000Er 2  60             rts       ; 6 cycles
00000Fr 2               
00000Fr 2               ; delay is in Y register
00000Fr 2               delay_long:
00000Fr 2  48             pha
000010r 2  5A             phy
000011r 2  DA             phx
000012r 2  98             tya
000013r 2  AA             tax
000014r 2               delay_long_loop:
000014r 2  A0 FF          ldy #$ff
000016r 2  20 rr rr       jsr delay
000019r 2  CA             dex
00001Ar 2  D0 F8          bne delay_long_loop
00001Cr 2  FA             plx
00001Dr 2  7A             ply
00001Er 2  68             pla
00001Fr 2  60             rts
000020r 2               
000020r 2               delay_short:        ; delay Y * 19 cycles
000020r 2  5A             phy
000021r 2               delay_short_loop:
000021r 2  EA             nop               ; 2 cycles
000022r 2  EA             nop               ; 2 cycles
000023r 2  EA             nop               ; 2 cycles
000024r 2  EA             nop               ; 2 cycles
000025r 2  EA             nop               ; 2 cycles
000026r 2  EA             nop               ; 2 cycles
000027r 2  EA             nop               ; 2 cycles
000028r 2               
000028r 2               
000028r 2  88             dey               ; 2 cycles
000029r 2  D0 F6          bne delay_short_loop   ; 2 or 3 cycles
00002Br 2  7A             ply
00002Cr 2  60             rts
00002Dr 2               
00002Dr 1               
00002Dr 1               .ifdef VIA1_BASE
00002Dr 1               .include "drivers/timer.s"
00002Dr 2               
00002Dr 2               
00002Dr 2               COUNTER = CLOCK_SPEED/400        ; n/s
00002Dr 2               
00002Dr 2               timer_init:
00002Dr 2  AD 8E FF         lda IER
000030r 2  09 C0            ora #$C0        ;enable interrupt on timer1 timeout
000032r 2  8D 8E FF         sta IER
000035r 2  A9 40            lda #$40        ; timer one free run mode
000037r 2  8D 8B FF         sta ACR
00003Ar 2  A9 60            lda #<COUNTER     ; set timer to low byte to calculated value from defined clock speed
00003Cr 2  8D 84 FF         sta T1CL
00003Fr 2  A9 EA            lda #>COUNTER       ; set timer to high byte to calculated value from defined clock speed
000041r 2               
000041r 2  8D 85 FF         sta T1CH
000044r 2  64 rr            stz time
000046r 2  64 rr            stz time+1
000048r 2  64 rr            stz time+2
00004Ar 2  64 rr            stz time+3
00004Cr 2  58               cli
00004Dr 2  60               rts
00004Er 2               
00004Er 2               
00004Er 2               timer_irq:
00004Er 2  E6 rr            inc time
000050r 2  F0 01            beq @inc1
000052r 2               @exit1:
000052r 2                   ; this resets the PS/2 temp variables
000052r 2                   ;jsr reset_ps2
000052r 2  60               rts
000053r 2               @inc1:
000053r 2  E6 rr            inc time+1
000055r 2  F0 02            beq @inc2
000057r 2  80 F9            bra @exit1
000059r 2               @inc2:
000059r 2  E6 rr            inc time+2
00005Br 2  F0 02            beq @inc3
00005Dr 2  80 F3            bra @exit1
00005Fr 2               @inc3:
00005Fr 2  E6 rr            inc time+3
000061r 2  80 EF            bra @exit1
000063r 2  60               rts
000064r 2               
000064r 1               .include "drivers/spi.s"
000064r 2               ; SPI defines
000064r 2               .ifndef DATA
000064r 2               DATA = $80
000064r 2               .endif
000064r 2               SS = $07   ; Slave Select with lowest 3 bits
000064r 2               SCK = $08   ; Clock on bit 3
000064r 2               MISO = $10  ; MISO on bit 4
000064r 2               MOSI = $20  ; MOSI on bit 5
000064r 2               CONF = $40  ; CONF on bit 6
000064r 2               
000064r 2               .segment "BSS"
000006r 2  xx           spi_tmp: .res 1
000007r 2  xx           spi_tmp2: .res 1
000008r 2  xx           spi_slave: .res 1
000009r 2               
000009r 2               .segment "DATA"
000064r 2               
000064r 2               spi_init:
000064r 2  AD 80 FF         lda PORTB               ; load current port B
000067r 2  29 90            and #(DATA | MISO)      ; set everything to zero except for PS2 DATA and MISO
000069r 2  09 40            ora #CONF               ; set CONF high
00006Br 2  8D 80 FF         sta PORTB               ; save to PORTB
00006Er 2  AD 82 FF         lda DDRB                ; get current direction register
000071r 2  09 6F            ora #(MOSI | CONF | SCK | SS) ; set MOSI, CONF, SCK and SS as outputs
000073r 2  29 EF            and #($FF^MISO)                 ; set MISO as input
000075r 2  8D 82 FF         sta DDRB
000078r 2  A9 FF            lda #$FF                ; flash leds to see what is going on
00007Ar 2  8D 83 FF         sta DDRA
00007Dr 2  8D 81 FF         sta PORTA
000080r 2  60               rts
000081r 2               
000081r 2               spi_select:
000081r 2                   ; selected slave in A
000081r 2  29 07            and #SS                 ; mask slave select bits
000083r 2  8D 80 FF         sta PORTB               ; set everything low except for SS bits
000086r 2  8D rr rr         sta spi_slave
000089r 2  5A               phy
00008Ar 2  A0 01            ldy #$1
00008Cr 2  20 rr rr         jsr delay_short         ; slight delay
00008Fr 2  09 40            ora #CONF               ; set CONF high to latch address
000091r 2  8D 80 FF         sta PORTB               ; save to PORTB
000094r 2  7A               ply                     ; CONF MUST stay high for the duration of the transfer
000095r 2  60               rts
000096r 2               
000096r 2               spi_clk_toggle:
000096r 2  60               rts
000097r 2               
000097r 2               spi_transceive:
000097r 2                   ; send data in A, received data will be in A
000097r 2  5A               phy
000098r 2                   ; save data in RAM
000098r 2  8D rr rr         sta spi_tmp
00009Br 2                   ; reset X
00009Br 2  DA               phx
00009Cr 2  A2 08            ldx #8
00009Er 2                   ; reset result
00009Er 2  9C rr rr         stz spi_tmp2
0000A1r 2               spi_send_loop:
0000A1r 2  0E rr rr         asl spi_tmp
0000A4r 2  90 08            bcc bit_unset
0000A6r 2               bit_set:
0000A6r 2  AD 80 FF         lda PORTB
0000A9r 2  09 60            ora #(MOSI | CONF)
0000ABr 2  4C rr rr         jmp clock_on
0000AEr 2               bit_unset:
0000AEr 2  AD 80 FF         lda PORTB
0000B1r 2  29 DF            and #(($FF^MOSI) | CONF)
0000B3r 2               clock_on:
0000B3r 2                   ; set data bit
0000B3r 2  0D rr rr         ora spi_slave
0000B6r 2  8D 80 FF         sta PORTB
0000B9r 2               
0000B9r 2                   ; set clock on
0000B9r 2  09 48            ora #(SCK | CONF)
0000BBr 2  0D rr rr         ora spi_slave
0000BEr 2  8D 80 FF         sta PORTB
0000C1r 2               
0000C1r 2                   ; read bit from slave, maybe add slight delay here ?
0000C1r 2  AD 80 FF         lda PORTB
0000C4r 2  29 10            and #MISO           ; mask miso bit
0000C6r 2  D0 07            bne spi_bit_set      ; bit is set
0000C8r 2                   ; bit is unset
0000C8r 2  18               clc
0000C9r 2  2E rr rr         rol spi_tmp2
0000CCr 2  4C rr rr         jmp clock_off
0000CFr 2               
0000CFr 2               spi_bit_set:
0000CFr 2  38               sec
0000D0r 2  2E rr rr         rol spi_tmp2
0000D3r 2               
0000D3r 2               
0000D3r 2               clock_off:
0000D3r 2  AD 80 FF         lda PORTB
0000D6r 2  29 F7            and #(($FF^SCK) | CONF)
0000D8r 2  0D rr rr         ora spi_slave
0000DBr 2  8D 80 FF         sta PORTB
0000DEr 2               end_loop:
0000DEr 2  CA               dex
0000DFr 2  D0 C0            bne spi_send_loop
0000E1r 2                   ; set data low
0000E1r 2  A0 01            ldy #$1
0000E3r 2  20 rr rr         jsr delay_short
0000E6r 2  AD 80 FF         lda PORTB
0000E9r 2  0D rr rr         ora spi_slave
0000ECr 2  29 DF            and #(($FF^MOSI) | CONF)
0000EEr 2  8D 80 FF         sta PORTB
0000F1r 2  FA               plx
0000F2r 2  7A               ply
0000F3r 2  AD rr rr         lda spi_tmp2
0000F6r 2  60               rts
0000F7r 2               
0000F7r 1               .endif
0000F7r 1               
0000F7r 1               .ifdef ACIA_BASE
0000F7r 1               .include "drivers/acia.s"
0000F7r 2               ACIA_DELAY = CLOCK_SPEED / 500000
0000F7r 2               
0000F7r 2               acia_init:
0000F7r 2  8D E1 FF         sta ACIA_STATUS        ; soft reset (value not important)
0000FAr 2                                           ; set specific modes and functions
0000FAr 2  9C rr rr         stz has_acia
0000FDr 2  A9 0B            lda #$0B                ; no parity, no echo, no Tx interrupt, NO Rx interrupt, enable Tx/Rx
0000FFr 2                   ;lda #$09               ; no parity, no echo, no Tx interrupt, Rx interrupt, enable Tx/Rx
0000FFr 2  8D E2 FF         sta ACIA_CMD        ; store to the command register
000102r 2  AD E2 FF         lda ACIA_CMD        ; load command register again
000105r 2  C9 0B            cmp #$0B                ; if not the same
000107r 2  D0 11            bne acia_absent         ; then it means the ACIA is not connected
000109r 2  AD E1 FF         lda ACIA_STATUS         ; Read the ACAI status to
00010Cr 2  29 60            and #$60                ; check if present or absent
00010Er 2  D0 0A            bne acia_absent
000110r 2  A9 01            lda #1
000112r 2  8D rr rr         sta has_acia           ; remember that ACIA is here
000115r 2  A9 10            lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 115.200k baud rate
000117r 2                   ;lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 1200 baud rate
000117r 2  8D E3 FF         sta ACIA_CTRL          ; program the ctl register
00011Ar 2               
00011Ar 2               acia_absent:
00011Ar 2  A0 14                ldy #20
00011Cr 2               aa_loop:
00011Cr 2  20 rr rr             jsr delay_short
00011Fr 2  AD E1 FF             lda ACIA_STATUS         ; Read ACIA data a few times
000122r 2  AD E0 FF             lda ACIA_DATA           ; to try and prevent spurious characters
000125r 2  88                   dey
000126r 2  D0 F4                bne aa_loop
000128r 2               aa_end:
000128r 2  60                   rts
000129r 2               
000129r 2               acia_out:
000129r 2  48               pha
00012Ar 2  5A               phy
00012Br 2  8D E0 FF         sta ACIA_DATA
00012Er 2  A0 30            ldy #ACIA_DELAY            ;minimal delay is $02
000130r 2  20 rr rr         jsr delay_short
000133r 2  7A               ply
000134r 2  68               pla
000135r 2  60               rts
000136r 2               
000136r 2               acia_getc:
000136r 2  AD E1 FF         lda ACIA_STATUS                 ; Read the ACIA status to
000139r 2  29 08            and #$08                        ; Check if there is character in the receiver
00013Br 2  F0 05            beq @no_char      ; Exit now if we don't get one.
00013Dr 2  AD E0 FF         lda ACIA_DATA
000140r 2  38               sec
000141r 2  60               rts
000142r 2               @no_char:
000142r 2  18               clc
000143r 2  60               rts
000144r 2               
000144r 1               .endif
000144r 1               
000144r 1               
000144r 1               .ifdef KB_VIA_BASE
000144r 1               .include "drivers/keyboard.s"
000144r 1               .endif
000144r 1               .ifdef KB_INIT_STATE_RESET
000144r 1               .include "drivers/ps2.s"
000144r 1               .endif
000144r 1               
000144r 1               .ifdef LCD2_ENABLED
000144r 1               .include "drivers/4004.s"
000144r 1               .endif
000144r 1               .ifdef CF_ADDRESS
000144r 1               .include "drivers/cf.s"
000144r 2               .segment "ZEROPAGE": zeropage
00000Ar 2  xx xx        CF_POINTER: .res 2
00000Cr 2               
00000Cr 2               .segment "BSS"
000009r 2  xx xx xx xx  LBA_SIZE: .res 4
00000Dr 2               .segment "DATA"
000144r 2               
000144r 2               
000144r 2               
000144r 2               cf_init:
000144r 2                   ; phy
000144r 2  A9 04            lda #$4
000146r 2                   ; ldy #7
000146r 2                   ; sta (CF_ADDRESS),y
000146r 2  8D D7 FF         sta CF_ADDRESS + 7
000149r 2  20 rr rr         jsr cf_wait
00014Cr 2  A9 E0            lda #$E0
00014Er 2  8D D6 FF         sta CF_ADDRESS + 6
000151r 2  20 rr rr         jsr cf_wait
000154r 2  A9 01            lda #$1
000156r 2  8D D1 FF         sta CF_ADDRESS + 1
000159r 2  20 rr rr         jsr cf_wait
00015Cr 2  A9 EF            lda #$EF
00015Er 2  8D D7 FF         sta CF_ADDRESS + 7
000161r 2  20 rr rr         jsr cf_wait
000164r 2  20 rr rr         jsr cf_err
000167r 2                   ; ply
000167r 2  60               rts
000168r 2               
000168r 2               
000168r 2               
000168r 2               
000168r 2               cf_read:
000168r 2  5A               phy
000169r 2  A0 00            ldy #0
00016Br 2               @loop:
00016Br 2                   ; jsr cf_wait
00016Br 2  AD D0 FF         lda CF_ADDRESS
00016Er 2  91 rr            sta (io_buffer_ptr), y
000170r 2  C8               iny
000171r 2  D0 F8            bne @loop
000173r 2  E6 rr            inc io_buffer_ptr + 1
000175r 2  20 rr rr         jsr cf_wait
000178r 2               @loop2:
000178r 2                   ; jsr cf_wait
000178r 2  AD D0 FF         lda CF_ADDRESS
00017Br 2  91 rr            sta (io_buffer_ptr), y
00017Dr 2  C8               iny
00017Er 2  D0 F8            bne @loop2
000180r 2  C6 rr            dec io_buffer_ptr + 1
000182r 2               @loop3:
000182r 2  20 rr rr         jsr cf_wait
000185r 2  AD D7 FF         lda CF_ADDRESS + 7
000188r 2  29 08            and #$08
00018Ar 2  F0 06            beq @exit
00018Cr 2  AD D0 FF         lda CF_ADDRESS
00018Fr 2  C8               iny
000190r 2  D0 F0            bne @loop3
000192r 2               @exit:
000192r 2  7A               ply
000193r 2  60               rts
000194r 2               
000194r 2               
000194r 2               ; number of sectors to read is in X
000194r 2               cf_read_sector:
000194r 2                   ; sei
000194r 2  20 rr rr         jsr cf_set_lba
000197r 2                   ; ldy #2
000197r 2                   ; sta (CF_ADDRESS), y
000197r 2  A9 01            lda #1
000199r 2  8D D2 FF         sta CF_ADDRESS + 2
00019Cr 2  20 rr rr         jsr cf_wait
00019Fr 2  A9 20            lda #CF_READ_SECTOR_COMMAND
0001A1r 2                   ; ldy #7
0001A1r 2                   ; sta (CF_ADDRESS), y
0001A1r 2  8D D7 FF         sta CF_ADDRESS + 7
0001A4r 2  20 rr rr         jsr cf_wait
0001A7r 2  20 rr rr         jsr cf_read
0001AAr 2  20 rr rr         jsr cf_err
0001ADr 2                   ; cli
0001ADr 2  60               rts
0001AEr 2               
0001AEr 2               ; number of sectors to write is in X
0001AEr 2               cf_write_sector:
0001AEr 2                   ; sei
0001AEr 2  20 rr rr         jsr cf_set_lba
0001B1r 2  A9 01            lda #1
0001B3r 2                   ; ldy #2
0001B3r 2                   ; sta (CF_ADDRESS), y
0001B3r 2  8D D2 FF         sta CF_ADDRESS + 2
0001B6r 2  20 rr rr         jsr cf_wait
0001B9r 2  A9 30            lda #CF_WRITE_SECTOR_COMMAND
0001BBr 2                   ; ldy #7
0001BBr 2                   ; sta (CF_ADDRESS), y
0001BBr 2  8D D7 FF         sta CF_ADDRESS + 7
0001BEr 2  20 rr rr         jsr cf_wait
0001C1r 2  20 rr rr         jsr cf_write
0001C4r 2  20 rr rr         jsr cf_err
0001C7r 2                   ; cli
0001C7r 2  60               rts
0001C8r 2               
0001C8r 2               
0001C8r 2               cf_write:
0001C8r 2  5A               phy
0001C9r 2  A0 00            ldy #0
0001CBr 2               @loop:
0001CBr 2  20 rr rr         jsr cf_wait
0001CEr 2               
0001CEr 2  B1 rr            lda (io_buffer_ptr), y
0001D0r 2  8D D0 FF         sta CF_ADDRESS
0001D3r 2  C8               iny
0001D4r 2  D0 F5            bne @loop
0001D6r 2  E6 rr            inc io_buffer_ptr + 1
0001D8r 2               @loop2:
0001D8r 2  20 rr rr         jsr cf_wait
0001DBr 2  B1 rr            lda (io_buffer_ptr), y
0001DDr 2  8D D0 FF         sta CF_ADDRESS
0001E0r 2  C8               iny
0001E1r 2  D0 F5            bne @loop2
0001E3r 2  C6 rr            dec io_buffer_ptr + 1
0001E5r 2               @loop3:
0001E5r 2  20 rr rr         jsr cf_wait
0001E8r 2  AD D7 FF         lda CF_ADDRESS + 7
0001EBr 2  29 08            and #$08
0001EDr 2  F0 06            beq @exit
0001EFr 2  8D D0 FF         sta CF_ADDRESS
0001F2r 2  C8               iny
0001F3r 2  D0 F0            bne @loop3
0001F5r 2               @exit:
0001F5r 2  7A               ply
0001F6r 2  60               rts
0001F7r 2               
0001F7r 2               
0001F7r 2               
0001F7r 2               
0001F7r 2               
0001F7r 2               
0001F7r 2               cf_wait:
0001F7r 2                   ; phy
0001F7r 2                   ; ldy #7
0001F7r 2               @wait_loop:
0001F7r 2                   ; lda (CF_ADDRESS), y
0001F7r 2  AD D7 FF         lda CF_ADDRESS + 7
0001FAr 2  29 80            and #$80
0001FCr 2  D0 F9            bne @wait_loop
0001FEr 2                   ; ply
0001FEr 2  60               rts
0001FFr 2               
0001FFr 2               cf_set_lba:
0001FFr 2  AD rr rr         lda IO_SECTOR
000202r 2  8D D3 FF         sta CF_ADDRESS + 3
000205r 2  20 rr rr         jsr cf_wait
000208r 2  AD rr rr         lda IO_SECTOR + 1
00020Br 2  8D D4 FF         sta CF_ADDRESS + 4
00020Er 2  20 rr rr         jsr cf_wait
000211r 2  AD rr rr         lda IO_SECTOR + 2
000214r 2  8D D5 FF         sta CF_ADDRESS + 5
000217r 2  20 rr rr         jsr cf_wait
00021Ar 2  AD rr rr         lda IO_SECTOR + 3
00021Dr 2  29 0F            and #$0F
00021Fr 2  09 E0            ora #$E0
000221r 2  8D D6 FF         sta CF_ADDRESS + 6
000224r 2  20 rr rr         jsr cf_wait
000227r 2  60               rts
000228r 2               
000228r 2               cf_err:
000228r 2                   ; phy
000228r 2  20 rr rr         jsr cf_wait
00022Br 2                   ; ldy #7
00022Br 2                   ; lda (CF_ADDRESS), y
00022Br 2  AD D7 FF         lda CF_ADDRESS + 7
00022Er 2  29 01            and #$01
000230r 2  F0 05            beq @exit
000232r 2               @exit_fail:
000232r 2  A9 21            lda #'!'
000234r 2  20 rr rr         jsr kernel_putc
000237r 2               @exit:
000237r 2                   ; ply
000237r 2  60               rts
000238r 2               
000238r 2               cf_info:
000238r 2  20 rr rr         jsr cf_init
00023Br 2  20 rr rr         jsr cf_wait
00023Er 2  A9 EC            lda #$EC
000240r 2  8D D7 FF         sta CF_ADDRESS + 7
000243r 2  20 rr rr         jsr cf_read
000246r 2  60               rts
000247r 2               
000247r 2               cf_print_id:
000247r 2                   ; print model number
000247r 2  5A               phy
000248r 2  A0 37            ldy #55
00024Ar 2               @loop:
00024Ar 2  B1 rr            lda (io_buffer_ptr), y
00024Cr 2  20 rr rr         jsr kernel_putc
00024Fr 2  88               dey
000250r 2  B1 rr            lda (io_buffer_ptr), y
000252r 2  20 rr rr         jsr kernel_putc
000255r 2  C8               iny
000256r 2  C8               iny
000257r 2  C8               iny
000258r 2  C0 5F            cpy #(40+55)
00025Ar 2  90 EE            bcc @loop
00025Cr 2  7A               ply
00025Dr 2  60               rts
00025Er 2               
00025Er 2               cf_print_capacity:
00025Er 2  5A               phy
00025Fr 2               
00025Fr 2  20 rr rr         jsr xt_cr
000262r 2               
000262r 2  A0 78            ldy #120
000264r 2                   ; print lba size
000264r 2  B1 rr            lda (io_buffer_ptr), y
000266r 2  8D rr rr         sta LBA_SIZE
000269r 2  C8               iny
00026Ar 2  B1 rr            lda (io_buffer_ptr), y
00026Cr 2  8D rr rr         sta LBA_SIZE + 1
00026Fr 2               
00026Fr 2  C8               iny
000270r 2  B1 rr            lda (io_buffer_ptr), y
000272r 2  8D rr rr         sta LBA_SIZE + 2
000275r 2               
000275r 2  C8               iny
000276r 2  B1 rr            lda (io_buffer_ptr), y
000278r 2  8D rr rr         sta LBA_SIZE + 3
00027Br 2               
00027Br 2  A0 09            ldy #9
00027Dr 2               @loop:
00027Dr 2  0E rr rr 2E      asl32 LBA_SIZE
000281r 2  rr rr 2E rr  
000285r 2  rr 2E rr rr  
000289r 2  88               dey
00028Ar 2  D0 F1            bne @loop
00028Cr 2               
00028Cr 2  CA               dex
00028Dr 2  CA               dex
00028Er 2  CA               dex
00028Fr 2  CA               dex
000290r 2               
000290r 2  AD rr rr         lda LBA_SIZE
000293r 2  95 02            sta 2, x
000295r 2  AD rr rr         lda LBA_SIZE + 1
000298r 2  95 03            sta 3, x
00029Ar 2  AD rr rr         lda LBA_SIZE + 2
00029Dr 2  95 00            sta 0, x
00029Fr 2  AD rr rr         lda LBA_SIZE + 3
0002A2r 2  95 01            sta 1, x
0002A4r 2               
0002A4r 2  20 rr rr         jsr xt_ud_dot
0002A7r 2               
0002A7r 2  CA               dex
0002A8r 2  CA               dex
0002A9r 2  CA               dex
0002AAr 2  CA               dex
0002ABr 2  A9 06            lda #6
0002ADr 2  95 00            sta 0, x
0002AFr 2  74 01            stz 1, x
0002B1r 2  A9 rr            lda #<bytes_msg
0002B3r 2  95 02            sta 2, x
0002B5r 2  A9 rr            lda #>bytes_msg
0002B7r 2  95 03            sta 3, x
0002B9r 2  20 rr rr         jsr xt_type
0002BCr 2  20 rr rr         jsr xt_cr
0002BFr 2  7A               ply
0002C0r 2  60               rts
0002C1r 2  20 62 79 74  bytes_msg: .byte " bytes"
0002C5r 2  65 73        
0002C7r 2               cf_end:
0002C7r 2               
0002C7r 2               
0002C7r 1               io_read_sector_address = cf_read_sector
0002C7r 1               io_write_sector_address = cf_write_sector
0002C7r 1               .endif
0002C7r 1               .ifdef SD
0002C7r 1               
0002C7r 1               .include "drivers/sd.s"
0002C7r 1               io_read_sector_address = sd_read_sector
0002C7r 1               
0002C7r 1               .endif
0002C7r 1               
0002C7r 1               ; .if .def(SD)
0002C7r 1               ; .include "../../fat16.s"
0002C7r 1               ; .elseif .def(CF_ADDRESS)
0002C7r 1               ; .include "../../fat16.s"
0002C7r 1               ; .endif
0002C7r 1               
0002C7r 1               .include "../../utils.s"
0002C7r 2               ;  print a 16-bit integer
0002C7r 2               ; lsb in x, msb in a
0002C7r 2               
0002C7r 2               .segment "ZEROPAGE": zeropage
00000Cr 2  xx xx        util_tmp: .res 2
00000Er 2               
00000Er 2               .segment "BSS"
00000Dr 2  xx xx        util_tmp_var: .res 2
00000Fr 2  xx xx xx xx  pad: .res 4
000013r 2               
000013r 2               .segment "DATA"
0002C7r 2               
0002C7r 2               print16:
0002C7r 2  8D rr rr         sta acc+1
0002CAr 2  8E rr rr         stx acc
0002CDr 2               
0002CDr 2  A2 04            ldx #4
0002CFr 2               nextdig:
0002CFr 2  20 rr rr         jsr div
0002D2r 2  AD rr rr         lda ext
0002D5r 2  9D rr rr         sta num,x
0002D8r 2  CA               dex
0002D9r 2  10 F4            bpl nextdig
0002DBr 2               
0002DBr 2               firstdig:
0002DBr 2  E8               inx
0002DCr 2  E0 05            cpx #5
0002DEr 2  F0 17            beq print0
0002E0r 2  BD rr rr         lda num,x
0002E3r 2  F0 F6            beq firstdig
0002E5r 2               
0002E5r 2               ptnxtdig:
0002E5r 2  18               clc
0002E6r 2  69 30            adc #'0'
0002E8r 2  20 rr rr         jsr kernel_putc
0002EBr 2  E8               inx
0002ECr 2  E0 05            cpx #5
0002EEr 2  F0 06            beq pt16done
0002F0r 2  BD rr rr         lda num,x
0002F3r 2  4C rr rr         jmp ptnxtdig
0002F6r 2               
0002F6r 2               pt16done:
0002F6r 2  60               rts
0002F7r 2               
0002F7r 2               print0:
0002F7r 2  A9 30            lda #'0'
0002F9r 2  20 rr rr         jsr kernel_putc
0002FCr 2  60               rts
0002FDr 2               
0002FDr 2  00 00 00 00  num: .byte 0,0,0,0,0
000301r 2  00           
000302r 2               
000302r 2               ; 16/16-bit division, from the fridge
000302r 2               ; acc/aux -> acc, remainder in ext
000302r 2               div:
000302r 2  A9 00            lda #0
000304r 2  8D rr rr         sta ext+1
000307r 2  A0 10            ldy #$10
000309r 2               dloop:
000309r 2  0E rr rr         asl acc
00030Cr 2  2E rr rr         rol acc+1
00030Fr 2  2A               rol
000310r 2  2E rr rr         rol ext+1
000313r 2  48               pha
000314r 2  CD rr rr         cmp aux
000317r 2  AD rr rr         lda ext+1
00031Ar 2  ED rr rr         sbc aux+1
00031Dr 2  90 0B            bcc div2
00031Fr 2  8D rr rr         sta ext+1
000322r 2  68               pla
000323r 2  ED rr rr         sbc aux
000326r 2  48               pha
000327r 2  EE rr rr         inc acc
00032Ar 2               div2:
00032Ar 2  68               pla
00032Br 2  88               dey
00032Cr 2  D0 DB            bne dloop
00032Er 2  8D rr rr         sta ext
000331r 2  60               rts
000332r 2               
000332r 2  00 00        acc: .word 0
000334r 2  0A 00        aux: .word 10 ; constant
000336r 2  00 00        ext: .word 0
000338r 2               
000338r 2               
000338r 2               
000338r 2               calculate_free_mem:
000338r 2                   ; load dictionary address
000338r 2                   ; fill with $55 until ram_end
000338r 2                   ; read and check same
000338r 2                   ; fill again with zeroes
000338r 2               
000338r 2  9C rr rr         stz util_tmp_var
00033Br 2  9C rr rr         stz util_tmp_var + 1
00033Er 2               
00033Er 2  A0 00            ldy #0
000340r 2               @loop:
000340r 2  A9 55            lda #$55
000342r 2  91 rr            sta (util_tmp), y        ; store to mem address
000344r 2  D1 rr            cmp (util_tmp), y        ; compare to what is now there
000346r 2  D0 19            bne @exit               ; no equal, stop couting and exit
000348r 2  A9 00            lda #0                  ; zero the memory again
00034Ar 2  91 rr            sta (util_tmp), y
00034Cr 2  EE rr rr         inc util_tmp_var
00034Fr 2  D0 03            bne @incok
000351r 2  EE rr rr         inc util_tmp_var + 1
000354r 2               @incok:
000354r 2  C8               iny
000355r 2  D0 E9            bne @loop
000357r 2  A5 rr            lda util_tmp + 1
000359r 2  C9 80            cmp #>ram_end
00035Br 2  B0 04            bcs @exit
00035Dr 2  E6 rr            inc util_tmp + 1
00035Fr 2  80 DF            bra @loop
000361r 2               @exit:
000361r 2  60               rts
000362r 2               
000362r 2               
000362r 2               
000362r 2               print_message:
000362r 2  68           	pla					; get return address from stack
000363r 2  85 rr        	sta util_tmp
000365r 2  68           	pla
000366r 2  85 rr        	sta util_tmp + 1
000368r 2               
000368r 2  80 03        	bra @inc
00036Ar 2               @print:
00036Ar 2  20 rr rr     	jsr kernel_putc
00036Dr 2               
00036Dr 2               @inc:
00036Dr 2  E6 rr        	inc util_tmp
00036Fr 2  D0 02        	bne @inced
000371r 2  E6 rr        	inc util_tmp + 1
000373r 2               @inced:
000373r 2  B2 rr        	lda (util_tmp)
000375r 2  D0 F3        	bne @print
000377r 2  A5 rr        	lda util_tmp + 1
000379r 2  48           	pha
00037Ar 2  A5 rr        	lda util_tmp
00037Cr 2  48           	pha
00037Dr 2               print_message_end:
00037Dr 2  60           	rts
00037Er 2               
00037Er 2               
00037Er 2               print_zp_index_string:
00037Er 2               @loop:
00037Er 2  B1 rr            lda (util_tmp), y
000380r 2  F0 06            beq @exit
000382r 2  20 rr rr         jsr kernel_putc
000385r 2  C8               iny
000386r 2  D0 F6            bne @loop
000388r 2               @exit:
000388r 2  60               rts
000389r 2               
000389r 2               
000389r 2               output_ascii:
000389r 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
000389r 2  48               pha
00038Ar 2  4A               lsr             ; convert high nibble first
00038Br 2  4A               lsr
00038Cr 2  4A               lsr
00038Dr 2  4A               lsr
00038Er 2  20 rr rr         jsr output_ascii_nibble_to_ascii
000391r 2  68               pla
000392r 2               
000392r 2                   ; fall through to _nibble_to_ascii
000392r 2               
000392r 2               output_ascii_nibble_to_ascii:
000392r 2               ; """Private helper function for byte_to_ascii: Print lower nibble
000392r 2               ; of A and and EMIT it. This does the actual work.
000392r 2               ; """
000392r 2  29 0F            and #$0F
000394r 2  09 30            ora #'0'
000396r 2  C9 3A            cmp #$3A        ; '9+1
000398r 2  90 02            bcc @1
00039Ar 2  69 06            adc #$06
00039Cr 2               
00039Cr 2               @1:
00039Cr 2  20 rr rr         jsr kernel_putc
00039Fr 2  60               rts
0003A0r 2               
0003A0r 1               
0003A0r 1               ; .include "drivers/spi.s"
0003A0r 1               ; .include "drivers/sd.s"
0003A0r 1               ; .include "drivers/vga.s"
0003A0r 1               ; .include "drivers/fat32.s"
0003A0r 1               ; .include "drivers/lcd.s"
0003A0r 1               
0003A0r 1               ; .include "../../ed.s"
0003A0r 1               
0003A0r 1               .include "../../forth.s"
0003A0r 2               
0003A0r 2               
0003A0r 2               ; Definitions for Tali Forth 2
0003A0r 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0003A0r 2               ; First version: 01. Apr 2016 (Liara Forth)
0003A0r 2               ; This version: 29. Jan 2020
0003A0r 2               
0003A0r 2               ; This file is included by taliforth.asm. These are the general
0003A0r 2               ; definitions; platform-specific definitions such as the
0003A0r 2               ; memory map are kept in the platform folder.
0003A0r 2               
0003A0r 2               stack0 =    $0100   ; location of the stack
0003A0r 2               
0003A0r 2               ; User Variables:
0003A0r 2               ; Block variables
0003A0r 2               blk_offset =  0        ; BLK : UP + 0
0003A0r 2               scr_offset =  2        ; SCR : UP + 2
0003A0r 2               
0003A0r 2               ; Wordlists
0003A0r 2               current_offset =  4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
0003A0r 2               num_wordlists_offset =  5
0003A0r 2                                          ; #WORDLISTS (byte) : UP + 5
0003A0r 2               wordlists_offset =  6  ; WORDLISTS (cells) : UP + 6 to UP + 29
0003A0r 2                                          ;          (FORTH, EDITOR, ASSEMBLER, ROOT, +8 more)
0003A0r 2               num_order_offset =  30 ; #ORDER (byte) : UP + 30
0003A0r 2                                          ;          (Number of wordlists in search order)
0003A0r 2               search_order_offset =  31
0003A0r 2                                          ; SEARCH-ORDER (bytes) : UP + 31 to UP + 39
0003A0r 2                                          ; Allowing for 9 to keep offsets even.
0003A0r 2               max_wordlists =  12    ; Maximum number of wordlists supported
0003A0r 2                                          ; 4 Tali built-ins + 8 user wordlists
0003A0r 2               
0003A0r 2               ; Buffer variables
0003A0r 2               blkbuffer_offset =     40   ; Address of buffer
0003A0r 2               buffblocknum_offset =  42   ; Block number current in buffer
0003A0r 2               buffstatus_offset =    44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
0003A0r 2               
0003A0r 2               ; Block I/O vectors
0003A0r 2               blockread_offset =     46   ; Vector to block reading routine
0003A0r 2               blockwrite_offset =    48   ; Vector to block writing routine
0003A0r 2               
0003A0r 2               
0003A0r 2               ; ASCII CHARACTERS
0003A0r 2               AscCC =   $03  ; break (CTRL-c)
0003A0r 2               AscBELL = $07  ; bell sound
0003A0r 2               AscBS =   $08  ; backspace
0003A0r 2               AscLF =   $0a  ; line feed
0003A0r 2               AscCR =   $0d  ; carriage return
0003A0r 2               AscESC =  $1b  ; escape
0003A0r 2               AscSP =   $20  ; space
0003A0r 2               AscDEL =  $7f  ; delete (CTRL-h)
0003A0r 2               AscCP =   $10  ; CTRL-p (used to recall previous input history)
0003A0r 2               AscCN =   $0e  ; CTRL-n (used to recall next input history)
0003A0r 2               
0003A0r 2               ; DICTIONARY FLAGS
0003A0r 2               ; The first three bits are currently unused
0003A0r 2               CO = 1  ; Compile Only
0003A0r 2               AN = 2  ; Always Native Compile
0003A0r 2               IM = 4  ; Immediate Word
0003A0r 2               NN = 8  ; Never Native Compile
0003A0r 2               UF = 16 ; Includes Underflow Check (RESERVED)
0003A0r 2               HC = 32 ; Word has Code Field Area (CFA)
0003A0r 2               
0003A0r 2               
0003A0r 2               ; VARIOUS
0003A0r 2               MAX_LINE_LENGTH =   79      ; assumes 80 character lines
0003A0r 2               
0003A0r 2               ; END
0003A0r 2               
0003A0r 2               .segment "ZEROPAGE": zeropage
00000Er 2               ; ZERO PAGE ADDRESSES/VARIABLES
00000Er 2               
00000Er 2               ; These are kept at the top of Zero Page, with the most important variables at
00000Er 2               ; the top because the Data Stack grows towards this area from dsp0: If there is
00000Er 2               ; an overflow, the lower, less important variables will be clobbered first,
00000Er 2               ; giving the system a chance to recover. In other words, they are part of the
00000Er 2               ; floodplain.
00000Er 2               
00000Er 2               ; The four variables insrc, cib, ciblen, and toin must stay together in this
00000Er 2               ; sequence for the words INPUT>R and R>INPUT to work correctly.
00000Er 2               
00000Er 2  xx xx        cp: .res 2   ; Compiler Pointer
000010r 2  xx xx        dp: .res 2   ; Dictionary Pointer
000012r 2  xx xx        workword: .res 2   ; nt (not xt!) of word being compiled, except in
000014r 2                                          ; a :NONAME declared word (see status)
000014r 2  xx xx        insrc: .res 2   ; input Source for SOURCE-ID
000016r 2  xx xx        cib: .res 2   ; address of current input buffer
000018r 2  xx xx        ciblen: .res 2  ; length of current input buffer
00001Ar 2  xx xx        toin: .res 2  ; pointer to CIB (>IN in Forth)
00001Cr 2  xx xx        ip: .res 2  ; Instruction Pointer (current xt)
00001Er 2  xx xx        output: .res 2  ; vector for EMIT
000020r 2  xx xx        input: .res 2  ; vector for KEY
000022r 2  xx xx        havekey: .res 2  ; vector for KEY?
000024r 2  xx xx        state: .res 2  ; STATE: -1 compile, 0 interpret
000026r 2  xx xx        base: .res 2  ; number radix, default decimal
000028r 2  xx xx        nc_limit: .res 2  ; limit for Native Compile size
00002Ar 2  xx xx        uf_strip: .res 2  ; flag to strip underflow detection code
00002Cr 2  xx xx        up: .res 2  ; User Pointer (Address of user variables)
00002Er 2  xx xx        status: .res 2  ; internal status information
000030r 2                                          ; (used by : :NONAME ; ACCEPT)
000030r 2                                          ; Bit 7 = Redefined word message postpone
000030r 2                                          ;         When set before calling CREATE, it will
000030r 2                                          ;         not print the "redefined xxxx" message if
000030r 2                                          ;         the word exists. Instead, this bit will
000030r 2                                          ;         be reused and after CREATE has run, it will
000030r 2                                          ;         be set if the word was redefined and 0 if
000030r 2                                          ;         not. This bit should be 0 when not in use.
000030r 2                                          ; Bit 6 = 1 for normal ":" definitions
000030r 2                                          ;         WORKWORD contains nt of word being compiled
000030r 2                                          ;       = 0 for :NONAME definitions
000030r 2                                          ;         WORKWORD contains xt of word being compiled
000030r 2                                          ; Bit 5 = 1 for NUMBER returning a double word
000030r 2                                          ;       = 0 for NUMBER returning a single word
000030r 2                                          ; Bit 3 = 1 makes CTRL-n recall current history
000030r 2                                          ;       = 0 CTRL-n recalls previous history
000030r 2                                          ; Bit 2 = Current history buffer msb
000030r 2                                          ; Bit 1 = Current history buffer (0-7, wraps)
000030r 2                                          ; Bit 0 = Current history buffer lsb
000030r 2                                          ; status+1 is used by ACCEPT to hold history lengths.
000030r 2  xx xx        tmpbranch: .res 2  ; temporary storage for 0BRANCH, BRANCH only
000032r 2  xx xx        tmp1: .res 2  ; temporary storage
000034r 2  xx xx        tmp2: .res 2  ; temporary storage
000036r 2  xx xx        tmp3: .res 2  ; temporary storage (especially for print)
000038r 2  xx xx        tmpdsp: .res 2  ; temporary DSP (X) storage (two bytes)
00003Ar 2  xx xx        tmptos: .res 2  ; temporary TOS storage
00003Cr 2  xx xx        editor1: .res 2  ; temporary for editors
00003Er 2  xx xx        editor2: .res 2  ; temporary for editors
000040r 2  xx xx        editor3: .res 2  ; temporary for editors
000042r 2  xx xx        tohold: .res 2  ; pointer for formatted output
000044r 2  xx xx xx xx  scratch: .res 8  ; 8 byte scratchpad (see UM/MOD)
000048r 2  xx xx xx xx  
00004Cr 2               
00004Cr 2               .segment "DATASTACK": zeropage
000000r 2  xx xx xx xx  dsp_start: .res 127 ; reserve 128 bytes for data stack (64 16 bit cells)
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
00007Fr 2               dsp0:          ; first data stack location. Data stack grows down
00007Fr 2               rsp0:     ; starting stack pointer
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               .segment "BSS"
000013r 2  xx xx xx xx  hist_buff: .res $400
000017r 2  xx xx xx xx  
00001Br 2  xx xx xx xx  
000413r 2  xx xx xx xx  buffer0: .res $100
000417r 2  xx xx xx xx  
00041Br 2  xx xx xx xx  
000513r 2               
000513r 2               .segment "DICTIONARY"   ; the dictionary gets its own segment so that it uses all the space left in RAM
000000r 2  xx xx xx xx  dictionary: .res $1000
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
001000r 2               
001000r 2               cp_end = $7FFF          ; the dictionary ends at RAM end (everything else is before)
001000r 2               
001000r 2               cp0 = dictionary
001000r 2               bsize =     $ff
001000r 2               padoffset = $ff
001000r 2               
001000r 2               
001000r 2               
001000r 2               .segment "DATA"
0003A0r 2               
0003A0r 2               
0003A0r 2               
0003A0r 2               forth:
0003A0r 2                   .include "native_words.s"     ; Native Forth words. Starts with COLD
0003A0r 3               ; Low-level Forth word routines
0003A0r 3               ; Tali Forth 2 for the 65c02
0003A0r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0003A0r 3               ; First version: 19. Jan 2014
0003A0r 3               ; This version: 03. Jan 2018
0003A0r 3               
0003A0r 3               ; This list is ordered alphabetically by the names of the words, not their
0003A0r 3               ; strings (so "!" is sorted as "STORE"). However, we start off with COLD,
0003A0r 3               ; ABORT, and QUIT as the natural start sequence. Each word has two special
0003A0r 3               ; status lines that begins with "; ## ", which allows auto-generation of the
0003A0r 3               ; WORDLIST.md file and other entries in the docs folder. Status entries are:
0003A0r 3               
0003A0r 3               ;       TBA --> fragment --> coded --> tested --> auto
0003A0r 3               
0003A0r 3               ; "Auto" means that the word is automatically tested by the test suite (good),
0003A0r 3               ; "tested" means that it was tested by hand in some way (okay), "coded" means
0003A0r 3               ; it hasn't been tested at all (bad). See the test suite for more details.
0003A0r 3               
0003A0r 3               ; ## COLD ( -- ) "Reset the Forth system"
0003A0r 3               ; ## "cold"  tested  Tali Forth
0003A0r 3               ;       """Reset the Forth system. Does not restart the kernel,
0003A0r 3               ;       use the 65c02 reset for that. Flows into ABORT.
0003A0r 3               ;       """
0003A0r 3               xt_cold:
0003A0r 3  D8                           cld
0003A1r 3               
0003A1r 3                               ; Set the OUTPUT vector to the default kernel_putc
0003A1r 3                               ; We do this really early so we can print error messages
0003A1r 3                               ; during debugging
0003A1r 3  A9 rr                        lda #<kernel_putc
0003A3r 3  85 rr                        sta output
0003A5r 3  A9 rr                        lda #>kernel_putc
0003A7r 3  85 rr                        sta output+1
0003A9r 3               
0003A9r 3                               ; Load all of the important zero page variables from ROM
0003A9r 3  A2 21                        ldx #cold_zp_table_end-cold_zp_table-1
0003ABr 3               
0003ABr 3               @load_zp_loop:
0003ABr 3                               ; This loop loads them back to front. We can use X here
0003ABr 3                               ; because Tali hasn't started using the stack yet.
0003ABr 3  BD rr rr                     lda cold_zp_table,x
0003AEr 3  95 rr                        sta cp,x
0003B0r 3  CA                           dex
0003B1r 3  D0 F8                        bne @load_zp_loop
0003B3r 3               
0003B3r 3                               ; Copy the 0th element.
0003B3r 3  AD rr rr                     lda cold_zp_table
0003B6r 3  85 rr                        sta cp
0003B8r 3                               ; Initialize 65c02 stack (Return Stack)
0003B8r 3  A2 rr                        ldx #rsp0
0003BAr 3  9A                           txs
0003BBr 3               
0003BBr 3                               ; Clear Data Stack. This is repeated in ABORT, but this way we
0003BBr 3                               ; can load high-level words with EVALUATE
0003BBr 3  A2 rr                        ldx #dsp0
0003BDr 3               
0003BDr 3               
0003BDr 3                               ; Initialize the user variables.
0003BDr 3  A0 31                        ldy #cold_user_table_end-cold_user_table-1
0003BFr 3  A9 00                        lda #0
0003C1r 3               
0003C1r 3               @load_user_vars_loop:
0003C1r 3                               ; Like the zero page variables, these are initialized
0003C1r 3                               ; back to front.
0003C1r 3  B9 rr rr                     lda cold_user_table,y
0003C4r 3  91 rr                        sta (up),y
0003C6r 3  88                           dey
0003C7r 3  D0 F8                        bne @load_user_vars_loop
0003C9r 3               
0003C9r 3                               ; Copy the 0th element.
0003C9r 3  AD rr rr                     lda cold_user_table
0003CCr 3  92 rr                        sta (up)
0003CEr 3  20 rr rr                     jsr xt_cr
0003D1r 3               
0003D1r 3                               ; Define high-level words in forth_words.asm via EVALUATE. If
0003D1r 3                               ; you do not have any high-level words, this part can be
0003D1r 3                               ; commented out.
0003D1r 3  CA                           dex
0003D2r 3  CA                           dex
0003D3r 3  CA                           dex
0003D4r 3  CA                           dex
0003D5r 3               
0003D5r 3               
0003D5r 3                               ; start address goes NOS
0003D5r 3  A9 rr                        lda #<forth_words_start
0003D7r 3  95 02                        sta 2,x
0003D9r 3  A9 rr                        lda #>forth_words_start
0003DBr 3  95 03                        sta 3,x
0003DDr 3               
0003DDr 3                               ; length goes TOS
0003DDr 3  A9 rr                        lda #<forth_words_end
0003DFr 3  38                           sec
0003E0r 3  E9 rr                        sbc #<forth_words_start
0003E2r 3  95 00                        sta 0,x
0003E4r 3               
0003E4r 3  A9 rr                        lda #>forth_words_end
0003E6r 3  E9 rr                        sbc #>forth_words_start
0003E8r 3  95 01                        sta 1,x
0003EAr 3               
0003EAr 3               
0003EAr 3  20 rr rr                     jsr xt_evaluate
0003EDr 3               
0003EDr 3                               ; Now define any user words via EVALUATE. If you do not have
0003EDr 3                               ; any user-defined words, this part can be commented out as
0003EDr 3                               ; well.
0003EDr 3  CA                           dex
0003EEr 3  CA                           dex
0003EFr 3  CA                           dex
0003F0r 3  CA                           dex
0003F1r 3               
0003F1r 3               
0003F1r 3                               ; start address goes NOS
0003F1r 3  A9 rr                        lda #<user_words_start
0003F3r 3  95 02                        sta 2,x
0003F5r 3  A9 rr                        lda #>user_words_start
0003F7r 3  95 03                        sta 3,x
0003F9r 3               
0003F9r 3                               ; length goes TOS
0003F9r 3  A9 rr                        lda #<user_words_end
0003FBr 3  38                           sec
0003FCr 3  E9 rr                        sbc #<user_words_start
0003FEr 3  95 00                        sta 0,x
000400r 3               
000400r 3  A9 rr                        lda #>user_words_end
000402r 3  E9 rr                        sbc #>user_words_start
000404r 3  95 01                        sta 1,x
000406r 3               
000406r 3  20 rr rr                     jsr xt_evaluate
000409r 3               
000409r 3                               ; Initialize all of the history buffers by putting a zero in
000409r 3                               ; each length byte.
000409r 3  9C rr rr                     stz hist_buff
00040Cr 3  9C rr rr                     stz hist_buff+$80
00040Fr 3  9C rr rr                     stz hist_buff+$100
000412r 3  9C rr rr                     stz hist_buff+$180
000415r 3  9C rr rr                     stz hist_buff+$200
000418r 3  9C rr rr                     stz hist_buff+$280
00041Br 3  9C rr rr                     stz hist_buff+$300
00041Er 3  9C rr rr                     stz hist_buff+$380
000421r 3               
000421r 3               
000421r 3                               ; fall through to ABORT
000421r 3               
000421r 3               
000421r 3               ; ## ABORT ( -- ) "Reset the Data Stack and restart the CLI"
000421r 3               ; ## "abort"  tested  ANS core
000421r 3                       ; """https://forth-standard.org/standard/core/ABORT
000421r 3                       ; Clear Data Stack and continue into QUIT. We can jump here via
000421r 3                       ; subroutine if we want to because we are going to reset the 65c02's
000421r 3                       ; stack pointer (the Return Stack) anyway during QUIT. Note we don't
000421r 3                       ; actually delete the stuff on the Data Stack.
000421r 3                       ; """
000421r 3               xt_abort:
000421r 3  A2 rr                        ldx #dsp0
000423r 3               
000423r 3                               ; fall through to QUIT
000423r 3               
000423r 3               
000423r 3               ; ## QUIT ( -- ) "Reset the input and get new input"
000423r 3               ; ## "quit"  tested  ANS core
000423r 3                       ; """https://forth-standard.org/standard/core/QUIT
000423r 3                       ; Rest the input and start command loop
000423r 3                       ; """
000423r 3               
000423r 3               xt_quit:
000423r 3                               ; Clear the Return Stack. This is a little screwed up
000423r 3                               ; because the 65c02 can only set the Return Stack via X,
000423r 3                               ; which is our Data Stack pointer. The ANS specification
000423r 3                               ; demands, however, that ABORT reset the Data Stack pointer
000423r 3  8A                           txa             ; Save the DSP that we just defined
000424r 3  A2 rr                        ldx #rsp0
000426r 3  9A                           txs
000427r 3  AA                           tax             ; Restore the DSP. Dude, seriously.
000428r 3               
000428r 3                               ; make sure instruction pointer is empty
000428r 3  64 rr                        stz ip
00042Ar 3  64 rr                        stz ip+1
00042Cr 3               
00042Cr 3                               ; SOURCE-ID is zero (keyboard input)
00042Cr 3  64 rr                        stz insrc
00042Er 3  64 rr                        stz insrc+1
000430r 3               
000430r 3                               ; STATE is zero (interpret, not compile)
000430r 3  64 rr                        stz state
000432r 3  64 rr                        stz state+1
000434r 3               @get_line:
000434r 3  A9 rr                        lda #<buffer0   ; input buffer, this is paranoid
000436r 3  85 rr                        sta cib
000438r 3  A9 rr                        lda #>buffer0
00043Ar 3  85 rr                        sta cib+1
00043Cr 3               
00043Cr 3                               ; Size of current input buffer (CIB) is zero
00043Cr 3  64 rr                        stz ciblen
00043Er 3  64 rr                        stz ciblen+1
000440r 3               
000440r 3                               ; Accept a line from the current import source. This is how
000440r 3                               ; modern Forths to it.
000440r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
000443r 3               
000443r 3                               ; Test flag: LSB of TOS
000443r 3  B5 00                        lda 0,x
000445r 3  D0 05                        bne @success
000447r 3               
000447r 3                               ; If REFILL returned a FALSE flag, something went wrong and we
000447r 3                               ; need to print an error message and reset the machine. We
000447r 3                               ; don't need to save TOS because we're going to clobber it
000447r 3                               ; anyway when we go back to ABORT.
000447r 3  A9 06                        lda #err_refill
000449r 3  4C rr rr                     jmp error
00044Cr 3               
00044Cr 3               @success:
00044Cr 3                               ; Assume we have successfully accepted a string of input from
00044Cr 3                               ; a source, with address cib and length of input in ciblen. We
00044Cr 3                               ; arrive here still with the TRUE flag from REFILL as TOS
00044Cr 3  E8                           inx                     ; drop
00044Dr 3  E8                           inx
00044Er 3               
00044Er 3                               ; Main compile/execute routine
00044Er 3  20 rr rr                     jsr interpret
000451r 3               
000451r 3                               ; Test for Data Stack underflow. Tali Forth does not check for
000451r 3                               ; overflow because it is so rare
000451r 3  E0 rr                        cpx #dsp0
000453r 3  F0 05                        beq @stack_ok
000455r 3  90 03                        bcc @stack_ok           ; DSP must always be smaller than DSP0
000457r 3               
000457r 3  4C rr rr                     jmp underflow_error
00045Ar 3               
00045Ar 3               @stack_ok:
00045Ar 3                               ; Display system prompt if all went well. If we're interpreting,
00045Ar 3                               ; this is " ok", if we're compiling, it's " compiled". Note
00045Ar 3                               ; space at beginning of the string.
00045Ar 3  A5 rr                        lda state
00045Cr 3  F0 02                        beq @print
00045Er 3               
00045Er 3  A9 01                        lda #1                  ; number for "compile" string
000460r 3               @print:
000460r 3  20 rr rr                     jsr print_string
000463r 3               
000463r 3                               ; Awesome line, everybody! Now get the next one.
000463r 3  80 CF                        bra @get_line
000465r 3               
000465r 3               z_cold:
000465r 3               z_abort:
000465r 3               z_quit:         ; no RTS required
000465r 3               
000465r 3               
000465r 3               
000465r 3               ; This table holds all of the initial values for the variables in zero page.
000465r 3               ; This table is used by COLD.
000465r 3               cold_zp_table:
000465r 3  rr rr                .word cp0+256+1024      ; cp moved to make room for user vars and
000467r 3                                               ; block buffer
000467r 3  rr rr                .word dictionary_start  ; dp
000469r 3  00 00                .word 0                 ; workword
00046Br 3  00 00                .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
00046Dr 3  rr rr                .word buffer0           ; cib
00046Fr 3  00 00                .word 0                 ; ciblen
000471r 3  00 00                .word 0                 ; toin
000473r 3  00 00                .word 0                 ; ip
000475r 3  rr rr                .word kernel_putc       ; output
000477r 3  rr rr                .word kernel_getc       ; input
000479r 3  00 00                .word 0                 ; havekey
00047Br 3  00 00                .word 0                 ; state (0 = interpret)
00047Dr 3  0A 00                .word 10                ; base
00047Fr 3  14 00                .word 20                ; nc-limit
000481r 3  00 00                .word 0                 ; uf_strip (off by default)
000483r 3  rr rr                .word cp0               ; up (user vars put right at beginning of
000485r 3                                               ; available RAM)
000485r 3  00 00                .word 0                 ; status
000487r 3               cold_zp_table_end:
000487r 3               
000487r 3               ; No further ZP variables are initialized. The variables past this point are
000487r 3               ; all temporaries.
000487r 3               
000487r 3               ; This table holds the inital values for the user variables. This table is
000487r 3               ; used by COLD.
000487r 3               cold_user_table:
000487r 3  00 00                .word 0                         ; BLK
000489r 3  00 00                .word 0                         ; SCR
00048Br 3  00                   .byte 0                         ; CURRENT = FORTH-WORDLIST
00048Cr 3  04                   .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
00048Dr 3  rr rr                .word dictionary_start          ; FORTH-WORDLIST
00048Fr 3  rr rr                .word editor_dictionary_start   ; EDITOR-WORDLIST
000491r 3  rr rr                .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
000493r 3  rr rr                .word root_dictionary_start     ; ROOT-WORDLIST
000495r 3  00 00 00 00          .word 0,0,0,0,0,0,0,0           ; User wordlists
000499r 3  00 00 00 00  
00049Dr 3  00 00 00 00  
0004A5r 3  01                   .byte 1                         ; #ORDER
0004A6r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0         ; search-order
0004AAr 3  00 00 00 00  
0004AEr 3  00           
0004AFr 3  rr rr                .word cp0+256                   ; Address of buffer (right after USER vars)
0004B1r 3  00 00                .word 0                         ; block in buffer
0004B3r 3  00 00                .word 0                         ; buffer status (not in use)
0004B5r 3  rr rr                .word xt_block_word_error       ; block-read vector
0004B7r 3  rr rr                .word xt_block_word_error       ; block-write vector
0004B9r 3               cold_user_table_end:
0004B9r 3               
0004B9r 3               
0004B9r 3               ; ## ABORT_QUOTE ( "string" -- ) "If flag TOS is true, ABORT with message"
0004B9r 3               ; ## "abort""  tested  ANS core
0004B9r 3                       ; """https://forth-standard.org/standard/core/ABORTq
0004B9r 3                       ; Abort and print a string.
0004B9r 3                       ; """
0004B9r 3               
0004B9r 3               xt_abort_quote:
0004B9r 3                               ; save the string
0004B9r 3  20 rr rr                     jsr xt_s_quote          ; S"
0004BCr 3               
0004BCr 3                               ; compile run-time part
0004BCr 3  A0 rr                        ldy #>abort_quote_runtime
0004BEr 3  A9 rr                        lda #<abort_quote_runtime
0004C0r 3  20 rr rr                     jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
0004C3r 3               
0004C3r 3  60           z_abort_quote:  rts
0004C4r 3               
0004C4r 3               
0004C4r 3               abort_quote_runtime:
0004C4r 3                       ; """Runtime aspect of ABORT_QUOTE"""
0004C4r 3               
0004C4r 3                               ; We arrive here with ( f addr u )
0004C4r 3  B5 04                        lda 4,x
0004C6r 3  15 05                        ora 5,x
0004C8r 3  F0 09                        beq @done       ; if FALSE, we're done
0004CAr 3               
0004CAr 3                               ; We're true, so print string and ABORT. We follow Gforth
0004CAr 3                               ; in going to a new line after the string
0004CAr 3  20 rr rr                     jsr xt_type
0004CDr 3  20 rr rr                     jsr xt_cr
0004D0r 3  4C rr rr                     jmp xt_abort    ; not JSR, so never come back
0004D3r 3               @done:
0004D3r 3                               ; Drop three entries from the Data Stack
0004D3r 3  8A                           txa
0004D4r 3  18                           clc
0004D5r 3  69 06                        adc #6
0004D7r 3  AA                           tax
0004D8r 3               
0004D8r 3  60                           rts
0004D9r 3               
0004D9r 3               
0004D9r 3               
0004D9r 3               ; ## ABS ( n -- u ) "Return absolute value of a number"
0004D9r 3               ; ## "abs"  auto  ANS core
0004D9r 3                       ; """https://forth-standard.org/standard/core/ABS
0004D9r 3                       ; Return the absolute value of a number.
0004D9r 3                       ; """
0004D9r 3               
0004D9r 3               xt_abs:
0004D9r 3  20 rr rr                     jsr underflow_1
0004DCr 3               
0004DCr 3  B5 01                        lda 1,x
0004DEr 3  10 0D                        bpl @done       ; positive number, easy money!
0004E0r 3               
0004E0r 3                               ; negative: calculate 0 - n
0004E0r 3  38                           sec
0004E1r 3  A9 00                        lda #0
0004E3r 3  F5 00                        sbc 0,x         ; LSB
0004E5r 3  95 00                        sta 0,x
0004E7r 3               
0004E7r 3  A9 00                        lda #0          ; MSB
0004E9r 3  F5 01                        sbc 1,x
0004EBr 3  95 01                        sta 1,x
0004EDr 3               
0004EDr 3               @done:
0004EDr 3  60           z_abs:          rts
0004EEr 3               
0004EEr 3               
0004EEr 3               
0004EEr 3               ; ## ACCEPT ( addr n -- n ) "Receive a string of characters from the keyboard"
0004EEr 3               ; ## "accept"  auto  ANS core
0004EEr 3                       ; """https://forth-standard.org/standard/core/ACCEPT
0004EEr 3                       ; Receive a string of at most n1 characters, placing them at
0004EEr 3                       ; addr. Return the actual number of characters as n2. Characters
0004EEr 3                       ; are echoed as they are received. ACCEPT is called by REFILL in
0004EEr 3                       ; modern Forths.
0004EEr 3                       ; """
0004EEr 3               
0004EEr 3               xt_accept:
0004EEr 3  20 rr rr                     jsr underflow_2
0004F1r 3               
0004F1r 3                               ; Abort if we were asked to receive 0 chars
0004F1r 3  B5 00                        lda 0,x
0004F3r 3  15 01                        ora 1,x
0004F5r 3  D0 09                        bne @not_zero
0004F7r 3               
0004F7r 3  E8                           inx
0004F8r 3  E8                           inx
0004F9r 3  74 00                        stz 0,x
0004FBr 3  74 01                        stz 1,x
0004FDr 3               
0004FDr 3  4C rr rr                     jmp accept_done
000500r 3               
000500r 3               @not_zero:
000500r 3  B5 00                        lda 0,x         ; number of chars to get in tmp2 ...
000502r 3  85 rr                        sta tmp2
000504r 3  64 rr                        stz tmp2+1      ; ... but we only accept max 255 chars
000506r 3               
000506r 3  B5 02                        lda 2,x         ; address of buffer is NOS, to tmp1
000508r 3  85 rr                        sta tmp1
00050Ar 3  B5 03                        lda 3,x
00050Cr 3  85 rr                        sta tmp1+1
00050Er 3               
00050Er 3  E8                           inx
00050Fr 3  E8                           inx
000510r 3               
000510r 3  A0 00                        ldy #0
000512r 3               
000512r 3                               ; Select the next history buffer. Clear bit 3 first (so overflow
000512r 3                               ; from bit 2 to 3 is OK)
000512r 3  A5 rr                        lda status
000514r 3  29 F7                        and #$f7
000516r 3               
000516r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
000516r 3  1A                           inc
000517r 3               
000517r 3                               ; Set bit 3 for detecting if CTRL-n has been pressed the first
000517r 3                               ; time. This bit will be cleared on the first CTRL-n or CTRL-p
000517r 3                               ; received and won't be used to calculate the history buffer
000517r 3                               ; offset.
000517r 3  09 08                        ora #$08
000519r 3  85 rr                        sta status
00051Br 3               
00051Br 3               accept_loop:
00051Br 3                               ; Out of the box, py65mon catches some CTRL sequences such as
00051Br 3                               ; CTRL-c. We also don't need to check for CTRL-l because a
00051Br 3                               ; vt100 terminal clears the screen automatically.
00051Br 3               
00051Br 3                               ; This is the internal version of KEY without all the mucking
00051Br 3                               ; about with the Data Stack while still using the input vector
00051Br 3  20 rr rr                     jsr key_a
00051Er 3               
00051Er 3                               ; We quit on both line feed and carriage return
00051Er 3  C9 0A                        cmp #AscLF
000520r 3  F0 20                        beq @eol
000522r 3  C9 0D                        cmp #AscCR
000524r 3  F0 1C                        beq @eol
000526r 3               
000526r 3                               ; BACKSPACE and DEL do the same thing for the moment
000526r 3  C9 08                        cmp #AscBS
000528r 3  F0 22                        beq @backspace
00052Ar 3  C9 7F                        cmp #AscDEL     ; (CTRL-h)
00052Cr 3  F0 1E                        beq @backspace
00052Er 3               
00052Er 3                               ; Check for CTRL-p and CTRL-n to recall input history
00052Er 3  C9 10                        cmp #AscCP
000530r 3  F0 36                        beq @ctrl_p
000532r 3  C9 0E                        cmp #AscCN
000534r 3  F0 44                        beq @ctrl_n
000536r 3               
000536r 3                               ; That's enough for now. Save and echo character.
000536r 3  91 rr                        sta (tmp1),y
000538r 3  C8                           iny
000539r 3               
000539r 3                               ; EMIT_A sidesteps all the fooling around with the Data Stack
000539r 3  20 rr rr                     jsr emit_a
00053Cr 3               
00053Cr 3  C4 rr                        cpy tmp2        ; reached character limit?
00053Er 3  D0 DB                        bne accept_loop       ; fall through if buffer limit reached
000540r 3  80 03                        bra @buffer_full
000542r 3               
000542r 3               @eol:
000542r 3  20 rr rr                     jsr xt_space    ; print final space
000545r 3               
000545r 3               @buffer_full:
000545r 3                               ; REFILL updates ciblen and toin, we don't need to do it here
000545r 3  94 00                        sty 0,x         ; Y contains number of chars accepted already
000547r 3  74 01                        stz 1,x         ; we only accept 256 chars
000549r 3               
000549r 3  4C rr rr                     jmp accept_done
00054Cr 3               
00054Cr 3               @backspace:
00054Cr 3                               ; Handle backspace and delete kex, which currently do the same
00054Cr 3                               ; thing
00054Cr 3  C0 00                        cpy #0          ; buffer empty?
00054Er 3  D0 06                        bne @1
000550r 3               
000550r 3  A9 07                        lda #AscBELL    ; complain and don't delete beyond the start of line
000552r 3  20 rr rr                     jsr emit_a
000555r 3  C8                           iny
000556r 3               @1:
000556r 3  88                           dey
000557r 3  A9 08                        lda #AscBS      ; move back one
000559r 3  20 rr rr                     jsr emit_a
00055Cr 3  A9 20                        lda #AscSP      ; print a space (rubout)
00055Er 3  20 rr rr                     jsr emit_a
000561r 3  A9 08                        lda #AscBS      ; move back over space
000563r 3  20 rr rr                     jsr emit_a
000566r 3               
000566r 3  80 B3                        bra accept_loop
000568r 3               
000568r 3               @ctrl_p:
000568r 3                               ; CTRL-p was pressed. Recall the previous input buffer.
000568r 3               
000568r 3                               ; Select the previous buffer
000568r 3  A5 rr                        lda status
00056Ar 3               
00056Ar 3                               ; Check for 0 (need to wrap back to 7)
00056Ar 3  29 07                        and #7
00056Cr 3  D0 08                        bne @ctrl_p_dec
00056Er 3               
00056Er 3                               ; We need to wrap back to 7.
00056Er 3  A5 rr                        lda status
000570r 3  09 07                        ora #7
000572r 3  85 rr                        sta status
000574r 3  80 11                        bra @recall_history
000576r 3               
000576r 3               @ctrl_p_dec:
000576r 3                               ; It's safe to decrement the buffer index directly.
000576r 3  C6 rr                        dec status
000578r 3  80 0D                        bra @recall_history
00057Ar 3               
00057Ar 3               @ctrl_n:
00057Ar 3                               ; CTRL-n was pressed. Recall the next input buffer. Select
00057Ar 3                               ; the next buffer Check bit 3. If it's set, this is the first
00057Ar 3                               ; time CTRL-n has been pressed and we should select the CURRENT
00057Ar 3                               ; history buffer.
00057Ar 3  A9 08                        lda #$8
00057Cr 3  24 rr                        bit status
00057Er 3  D0 07                        bne @recall_history
000580r 3               
000580r 3                               ; This isn't the first time CTRL-n has been pressed, select the
000580r 3                               ; next history buffer. Clear bit 3 first (so overflow is OK)
000580r 3  A5 rr                        lda status
000582r 3  29 F7                        and #$f7
000584r 3               
000584r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
000584r 3  1A                           inc
000585r 3               
000585r 3                               ; Bit 3 (if it got set by going from buffer 7 to 0) will
000585r 3                               ; be cleared below.
000585r 3  85 rr                        sta status
000587r 3               
000587r 3                               ; Falls through to @recall_history
000587r 3               
000587r 3               @recall_history:
000587r 3                               ; Clear bit 3 (first time ctrl-n recall) bit in status
000587r 3  A9 08                        lda #%00001000
000589r 3  14 rr                        trb status
00058Br 3               
00058Br 3  20 rr rr                     jsr total_recall
00058Er 3               
00058Er 3                               ; tmp3 now has the address of the previous history buffer.
00058Er 3                               ; First byte of buffer is length. Clear the line by sending
00058Er 3                               ; CR, Y spaces, then CR.
00058Er 3  A9 0D                        lda #AscCR
000590r 3  20 rr rr                     jsr emit_a
000593r 3               
000593r 3               input_clear:
000593r 3  C0 00                        cpy #0
000595r 3  F0 08                        beq input_cleared
000597r 3               
000597r 3  A9 20                        lda #AscSP
000599r 3  20 rr rr                     jsr emit_a
00059Cr 3  88                           dey
00059Dr 3  80 F4                        bra input_clear
00059Fr 3               
00059Fr 3               input_cleared:
00059Fr 3  A9 0D                        lda #AscCR
0005A1r 3  20 rr rr                     jsr emit_a
0005A4r 3               
0005A4r 3                               ; Save the history length byte into histinfo+1
0005A4r 3                               ; ldy #0        ; Y is already 0 by clearing the line.
0005A4r 3  B1 rr                        lda (tmp3),y
0005A6r 3  85 rr                        sta status+1
0005A8r 3               
0005A8r 3                               ; Increment the tmp3 pointer so we can use ,y addressing
0005A8r 3                               ; on both tmp1 (the input buffer) and tmp3 (the history
0005A8r 3                               ; buffer)
0005A8r 3  E6 rr                        inc tmp3
0005AAr 3  D0 02                        bne @2           ; Increment the upper byte on carry.
0005ACr 3  E6 rr                        inc tmp3+1
0005AEr 3               @2:
0005AEr 3                               ; Copy the history buffer into the input buffer,
0005AEr 3                               ; sending the characters to the output as we go.
0005AEr 3  A9 0D                        lda #AscCR
0005B0r 3  20 rr rr                     jsr emit_a
0005B3r 3               
0005B3r 3               @history_loop:
0005B3r 3                               ; See if we have reached the end of the history buffer.
0005B3r 3  C4 rr                        cpy status+1
0005B5r 3  D0 03                        bne @3
0005B7r 3  4C rr rr                     jmp accept_loop       ; Needs a long jump
0005BAr 3               @3:
0005BAr 3                               ; See if we have reached the end of the input buffer.
0005BAr 3                               ; (only comparing to lower byte as we currently limit
0005BAr 3                               ; to 255 characters max)
0005BAr 3  C4 rr                        cpy tmp2
0005BCr 3  F0 0A                        beq @hist_filled_buffer
0005BEr 3               
0005BEr 3                               ; Copy a character and echo.
0005BEr 3  B1 rr                        lda (tmp3),y
0005C0r 3  91 rr                        sta (tmp1),y
0005C2r 3  20 rr rr                     jsr emit_a
0005C5r 3               
0005C5r 3                               ; Move to the next character.
0005C5r 3  C8                           iny
0005C6r 3  80 EB                        bra @history_loop
0005C8r 3               
0005C8r 3               @hist_filled_buffer:
0005C8r 3                               ; We don't want a history recall to EOL our buffer,
0005C8r 3                               ; so back up one character and return to editing.
0005C8r 3  88                           dey
0005C9r 3  4C rr rr                     jmp accept_loop
0005CCr 3               accept_done:
0005CCr 3               @done:
0005CCr 3                               ; Copy the input buffer into the currently
0005CCr 3                               ; selected history buffer.
0005CCr 3  20 rr rr                     jsr total_recall
0005CFr 3  85 rr                        sta status+1
0005D1r 3               
0005D1r 3                               ; Also save it in the first buffer byte.
0005D1r 3  A0 00                        ldy #0
0005D3r 3  91 rr                        sta (tmp3),y
0005D5r 3               
0005D5r 3                               ; Move path the count to the data bytes
0005D5r 3  E6 rr                        inc tmp3
0005D7r 3  D0 02                        bne @4           ; Increment the upper byte on carry.
0005D9r 3  E6 rr                        inc tmp3+1
0005DBr 3               @4:
0005DBr 3                               ; Copy the characters from the input buffer to the
0005DBr 3                               ; history buffer.
0005DBr 3               
0005DBr 3               @save_history_loop:
0005DBr 3  C4 rr                        cpy status+1
0005DDr 3  F0 07                        beq @save_history_done
0005DFr 3               
0005DFr 3  B1 rr                        lda (tmp1),y
0005E1r 3  91 rr                        sta (tmp3),y
0005E3r 3  C8                           iny
0005E4r 3  80 F5                        bra @save_history_loop
0005E6r 3               
0005E6r 3               @save_history_done:
0005E6r 3               z_accept:
0005E6r 3  60                           rts
0005E7r 3               
0005E7r 3               total_recall:
0005E7r 3                       ; """Internal subroutine for ACCEPT that recalls history entry"""
0005E7r 3               
0005E7r 3                               ; Generate the address of the buffer in tmp3. Start with the
0005E7r 3                               ; base address.
0005E7r 3  A9 rr                        lda #<hist_buff
0005E9r 3  85 rr                        sta tmp3
0005EBr 3  A9 rr                        lda #>hist_buff
0005EDr 3  85 rr                        sta tmp3+1
0005EFr 3               
0005EFr 3                               ; This is a bit annoying as some bits go into each byte.
0005EFr 3                               ; .....xxx gets put into address like ......xx x.......
0005EFr 3  A5 rr                        lda status
0005F1r 3  6A                           ror
0005F2r 3  29 03                        and #3
0005F4r 3  18                           clc
0005F5r 3  65 rr                        adc tmp3+1
0005F7r 3  85 rr                        sta tmp3+1
0005F9r 3               
0005F9r 3  A5 rr                        lda status
0005FBr 3  6A                           ror             ; Rotate through carry into msb.
0005FCr 3  6A                           ror
0005FDr 3  29 80                        and #$80
0005FFr 3  18                           clc
000600r 3  65 rr                        adc tmp3
000602r 3  85 rr                        sta tmp3
000604r 3  90 02                        bcc @1           ; Increment the upper byte on carry.
000606r 3  E6 rr                        inc tmp3+1
000608r 3               @1:
000608r 3                               ; Save the current length of the input buffer in
000608r 3                               ; histinfo+1 temporarily.  Reduce to 127 if larger.
000608r 3  98                           tya
000609r 3  C9 80                        cmp #$80
00060Br 3  90 02                        bcc @2
00060Dr 3  A9 7F                        lda #$7F
00060Fr 3               @2:
00060Fr 3  60                           rts
000610r 3               
000610r 3               
000610r 3               
000610r 3               
000610r 3               
000610r 3               ; ## ACTION_OF ( "name" -- xt ) "Get named deferred word's xt"
000610r 3               ; ## "action-of"  auto  ANS core ext
000610r 3                       ; """http://forth-standard.org/standard/core/ACTION-OF"""
000610r 3               
000610r 3               xt_action_of:
000610r 3                               ; This is a state aware word with differet behavior
000610r 3                               ; when used while compiling vs interpreting.
000610r 3                               ; Check STATE
000610r 3  A5 rr                        lda state
000612r 3  05 rr                        ora state+1
000614r 3  F0 0C                        beq @interpreting
000616r 3               
000616r 3               @compiling:
000616r 3                               ; Run ['] to compile the xt of the next word
000616r 3                               ; as a literal.
000616r 3  20 rr rr                     jsr xt_bracket_tick
000619r 3               
000619r 3                               ; Postpone DEFER@ by compiling a JSR to it.
000619r 3  A0 rr                        ldy #>xt_defer_fetch
00061Br 3  A9 rr                        lda #<xt_defer_fetch
00061Dr 3  20 rr rr                     jsr cmpl_subroutine
000620r 3  80 06                        bra @done
000622r 3               
000622r 3               @interpreting:
000622r 3  20 rr rr                     jsr xt_tick
000625r 3  20 rr rr                     jsr xt_defer_fetch
000628r 3               
000628r 3               @done:
000628r 3  60           z_action_of:           rts
000629r 3               
000629r 3               
000629r 3               
000629r 3               ; ## AGAIN ( addr -- ) "Code backwards branch to address left by BEGIN"
000629r 3               ; ## "again"  tested  ANS core ext
000629r 3                       ; """https://forth-standard.org/standard/core/AGAIN"""
000629r 3               
000629r 3               xt_again:
000629r 3  20 rr rr                     jsr underflow_1
00062Cr 3               
00062Cr 3                               ; Add the opcode for a JMP. We use JMP instead of BRA
00062Cr 3                               ; so we have the range and don't have to calculate the
00062Cr 3                               ; offset.
00062Cr 3  A0 00                        ldy #0
00062Er 3  A9 4C                        lda #$4C        ; JMP
000630r 3  91 rr                        sta (cp),y
000632r 3  C8                           iny
000633r 3               
000633r 3  B5 00                        lda 0,x         ; LSB of address
000635r 3  91 rr                        sta (cp),y
000637r 3  C8                           iny
000638r 3               
000638r 3  B5 01                        lda 1,x         ; MSB of address
00063Ar 3  91 rr                        sta (cp),y
00063Cr 3  C8                           iny
00063Dr 3               
00063Dr 3                               ; Allot the space we just used
00063Dr 3  98                           tya
00063Er 3  18                           clc
00063Fr 3  65 rr                        adc cp
000641r 3  85 rr                        sta cp
000643r 3  90 02                        bcc @done
000645r 3  E6 rr                        inc cp+1
000647r 3               @done:
000647r 3  E8                           inx
000648r 3  E8                           inx
000649r 3               
000649r 3  60           z_again:        rts
00064Ar 3               
00064Ar 3               
00064Ar 3               
00064Ar 3               ; ## ALIGN ( -- ) "Make sure CP is aligned on word size"
00064Ar 3               ; ## "align"  auto  ANS core
00064Ar 3                       ; """https://forth-standard.org/standard/core/ALIGN
00064Ar 3                       ; On a 8-bit machine, this does nothing. ALIGNED uses this
00064Ar 3                       ; routine as well, and also does nothing
00064Ar 3                       ; """
00064Ar 3               
00064Ar 3               ; ## ALIGNED ( addr -- addr ) "Return the first aligned address"
00064Ar 3               ; ## "aligned"  auto  ANS core
00064Ar 3                       ; """https://forth-standard.org/standard/core/ALIGNED"""
00064Ar 3               
00064Ar 3               xt_align:
00064Ar 3               xt_aligned:
00064Ar 3               z_align:
00064Ar 3  60           z_aligned:      rts             ; stripped out during native compile
00064Br 3               
00064Br 3               
00064Br 3               
00064Br 3               ; ## ALLOT ( n -- ) "Reserve or release memory"
00064Br 3               ; ## "allot"  auto  ANS core
00064Br 3                       ; """https://forth-standard.org/standard/core/ALLOT
00064Br 3                       ; Reserve a certain number of bytes (not cells) or release them.
00064Br 3                       ; If n = 0, do nothing. If n is negative, release n bytes, but only
00064Br 3                       ; to the beginning of the Dictionary. If n is positive (the most
00064Br 3                       ; common case), reserve n bytes, but not past the end of the
00064Br 3                       ; Dictionary. See http://forth-standard.org/standard/core/ALLOT
00064Br 3                       ; """
00064Br 3               
00064Br 3               xt_allot:
00064Br 3  20 rr rr                     jsr underflow_1
00064Er 3               
00064Er 3                               ; Releasing memory is going to be a very rare operation,
00064Er 3                               ; so we check for it at the beginning and try to make
00064Er 3                               ; the most common case as fast as possible
00064Er 3  B5 01                        lda 1,x
000650r 3  30 22                        bmi @release
000652r 3               
000652r 3                               ; Common case: We are reserving memory, not releasing it
000652r 3  18                           clc
000653r 3  A5 rr                        lda cp
000655r 3  75 00                        adc 0,x
000657r 3  85 rr                        sta cp
000659r 3               
000659r 3  A5 rr                        lda cp+1
00065Br 3  75 01                        adc 1,x
00065Dr 3  85 rr                        sta cp+1
00065Fr 3               
00065Fr 3                               ; Wait, did we just grant more space than we have? This is
00065Fr 3                               ; a check we only do here, not for other situations like cmpl_a
00065Fr 3                               ; where smaller amounts are reserved.
00065Fr 3  A0 FF                        ldy #<cp_end
000661r 3  C4 rr                        cpy cp
000663r 3  A9 7F                        lda #>cp_end
000665r 3  E5 rr                        sbc cp+1
000667r 3  B0 48                        bcs @done               ; we're fine.
000669r 3               
000669r 3                               ; Oops, that was too much, we're beyond the end of
000669r 3                               ; legal Dictionary RAM. Reduce to max memory and report
000669r 3                               ; an error
000669r 3  84 rr                        sty cp                  ; still #<cp_end
00066Br 3  A9 7F                        lda #>cp_end
00066Dr 3  85 rr                        sta cp+1
00066Fr 3               
00066Fr 3  A9 00                        lda #err_allot
000671r 3  4C rr rr                     jmp error
000674r 3               
000674r 3               @release:
000674r 3                  		; The ANS standard doesn't really say what to do if too much
000674r 3                               ; memory is freed ("negatively alloted"). In fact, there isn't
000674r 3                               ; even an official test. Gforth is little help either. The good
000674r 3                               ; news is, this is going to be a rare case. We want to use as
000674r 3                               ; few bytes as possible.
000674r 3               
000674r 3                               ; What we do is let the user free anything up to the beginning
000674r 3                               ; of the RAM area assigned to the Dicionary (CP0), but at
000674r 3                               ; their own risk. This means that the Dictionary pointer DP
000674r 3                               ; might end up pointing to garbage. However, an attempt to
000674r 3                               ; free more than RAM than CP0 will lead to CP being set to CP0,
000674r 3                               ; the DP pointing to the last word in RAM (should be DROP) and
000674r 3                               ; an error message.
000674r 3               
000674r 3                               ; We arrive here with ( n ) which is negative. First step,
000674r 3                               ; subtract the number TOS from the CP for a new CP
000674r 3  CA                           dex
000675r 3  CA                           dex
000676r 3  A5 rr                        lda cp
000678r 3  95 00                        sta 0,x
00067Ar 3  A5 rr                        lda cp+1
00067Cr 3  95 01                        sta 1,x
00067Er 3               
00067Er 3  20 rr rr                     jsr xt_plus                     ; new CP is now TOS
000681r 3               
000681r 3                               ; Second step, see if we've gone too far. We compare the new
000681r 3                               ; CP on TOS (which, if we've really screwed up, might be
000681r 3                               ; negative) with CP0. This is a signed comparison
000681r 3  CA                           dex
000682r 3  CA                           dex                             ; new CP now NOS
000683r 3  A9 rr                        lda #<cp0
000685r 3  95 00                        sta 0,x
000687r 3  A9 rr                        lda #>cp0
000689r 3  95 01                        sta 1,x                         ; CP0 is TOS
00068Br 3               
00068Br 3  20 rr rr                     jsr compare_16bit               ; still ( CP CP0 )
00068Er 3               
00068Er 3                               ; If CP (NOS) is smaller than CP0 (TOS), we're in trouble.
00068Er 3                               ; This means we want Z=1 or N=1
00068Er 3  F0 17                        beq @nega_done
000690r 3  30 15                        bmi @nega_done
000692r 3               
000692r 3                               ; Yep, we're in trouble. Set CP to CP0, set DP to the first
000692r 3                               ; word in ROM (should be DROP), and abort with an error
000692r 3  A9 rr                        lda #<cp0
000694r 3  85 rr                        sta cp
000696r 3  A9 rr                        lda #>cp0
000698r 3  85 rr                        sta cp+1
00069Ar 3               
00069Ar 3  A9 rr                        lda #<dictionary_start
00069Cr 3  85 rr                        sta dp
00069Er 3  A9 rr                        lda #>dictionary_start
0006A0r 3  85 rr                        sta dp+1
0006A2r 3               
0006A2r 3  A9 0A                        lda #err_negallot
0006A4r 3  4C rr rr                     jmp error
0006A7r 3               
0006A7r 3               @nega_done:
0006A7r 3                               ; Save new CP, which is NOS
0006A7r 3  B5 02                        lda 2,x
0006A9r 3  85 rr                        sta cp
0006ABr 3  B5 03                        lda 3,x
0006ADr 3  85 rr                        sta cp+1
0006AFr 3               
0006AFr 3  E8                           inx
0006B0r 3  E8                           inx                     ; drop through to @done
0006B1r 3               @done:
0006B1r 3  E8                           inx
0006B2r 3  E8                           inx
0006B3r 3               z_allot:
0006B3r 3  60                           rts
0006B4r 3               
0006B4r 3               
0006B4r 3               
0006B4r 3               ; ## ALLOW_NATIVE ( -- ) "Flag last word to allow native compiling"
0006B4r 3               ; ## "allow-native"  auto  Tali Forth
0006B4r 3               xt_allow_native:
0006B4r 3  20 rr rr                     jsr current_to_dp
0006B7r 3  A0 01                        ldy #1          ; offset for status byte
0006B9r 3  B1 rr                        lda (dp),y
0006BBr 3  29 F5                        and #$ff-NN-AN  ; AN and NN flag is clear.
0006BDr 3  91 rr                        sta (dp),y
0006BFr 3               z_allow_native:
0006BFr 3  60                           rts
0006C0r 3               
0006C0r 3               
0006C0r 3               ; ## ALSO ( -- ) "Make room in the search order for another wordlist"
0006C0r 3               ; ## "also"  auto  ANS search ext
0006C0r 3                       ; """http://forth-standard.org/standard/search/ALSO"""
0006C0r 3               xt_also:
0006C0r 3  20 rr rr                     jsr xt_get_order
0006C3r 3  20 rr rr                     jsr xt_over
0006C6r 3  20 rr rr                     jsr xt_swap
0006C9r 3  20 rr rr                     jsr xt_one_plus
0006CCr 3  20 rr rr                     jsr xt_set_order
0006CFr 3               
0006CFr 3  60           z_also:         rts
0006D0r 3               
0006D0r 3               
0006D0r 3               ; ## ALWAYS_NATIVE ( -- ) "Flag last word as always natively compiled"
0006D0r 3               ; ## "always-native"  auto  Tali Forth
0006D0r 3               xt_always_native:
0006D0r 3  20 rr rr                     jsr current_to_dp
0006D3r 3  A0 01                        ldy #1          ; offset for status byte
0006D5r 3  B1 rr                        lda (dp),y
0006D7r 3  09 02                        ora #AN         ; Make sure AN flag is set
0006D9r 3  29 F7                        and #$ff-NN     ; and NN flag is clear.
0006DBr 3  91 rr                        sta (dp),y
0006DDr 3               z_always_native:
0006DDr 3  60                           rts
0006DEr 3               
0006DEr 3               
0006DEr 3               ; ## AND ( n n -- n ) "Logically AND TOS and NOS"
0006DEr 3               ; ## "and"  auto  ANS core
0006DEr 3                       ; """https://forth-standard.org/standard/core/AND"""
0006DEr 3               xt_and:
0006DEr 3  20 rr rr                     jsr underflow_2
0006E1r 3               
0006E1r 3  B5 00                        lda 0,x
0006E3r 3  35 02                        and 2,x
0006E5r 3  95 02                        sta 2,x
0006E7r 3               
0006E7r 3  B5 01                        lda 1,x
0006E9r 3  35 03                        and 3,x
0006EBr 3  95 03                        sta 3,x
0006EDr 3               
0006EDr 3  E8                           inx
0006EEr 3  E8                           inx
0006EFr 3               
0006EFr 3  60           z_and:          rts
0006F0r 3               
0006F0r 3               
0006F0r 3               ; ## ASSEMBLER_WORDLIST ( -- u ) "WID for the Assembler wordlist"
0006F0r 3               ; ## "assembler-wordlist"  tested  Tali Assembler
0006F0r 3                       ; """ Commonly used like `assembler-wordlist >order` to add the
0006F0r 3                       ; assembler words to the search order so they can be used.
0006F0r 3                       ; See the tutorial on Wordlists and the Search Order for
0006F0r 3                       ; more information.
0006F0r 3                       ;
0006F0r 3                       ; This is a dummy entry, the code is shared with TWO
0006F0r 3                       ; """
0006F0r 3               
0006F0r 3               
0006F0r 3               ; ## AT_XY ( n m -- ) "Move cursor to position given"
0006F0r 3               ; ## "at-xy"  tested  ANS facility
0006F0r 3                       ; """https://forth-standard.org/standard/facility/AT-XY
0006F0r 3                       ; On an ANSI compatible terminal, place cursor at row n colum m.
0006F0r 3                       ; ANSI code is ESC[<n>;<m>H
0006F0r 3                       ;
0006F0r 3                       ; Do not use U. to print the numbers because the
0006F0r 3                       ; trailing space will not work with xterm
0006F0r 3                       ; """
0006F0r 3               xt_at_xy:
0006F0r 3  20 rr rr                     jsr underflow_2
0006F3r 3               
0006F3r 3  A9 1B                        lda #AscESC
0006F5r 3  20 rr rr                     jsr emit_a
0006F8r 3  A9 5B                        lda #$5B        ; ASCII for "["
0006FAr 3  20 rr rr                     jsr emit_a
0006FDr 3  20 rr rr                     jsr print_u
000700r 3  A9 3B                        lda #$3B        ; ASCII for ";"
000702r 3  20 rr rr                     jsr emit_a
000705r 3  20 rr rr                     jsr print_u
000708r 3  A9 48                        lda #'H'
00070Ar 3  20 rr rr                     jsr emit_a
00070Dr 3               
00070Dr 3  60           z_at_xy:        rts
00070Er 3               
00070Er 3               
00070Er 3               ; ## BACKSLASH ( -- ) "Ignore rest of line"
00070Er 3               ; ## "\"  auto  ANS core ext
00070Er 3                       ; """https://forth-standard.org/standard/core/bs"""
00070Er 3               xt_backslash:
00070Er 3  A5 rr                        lda ciblen
000710r 3  85 rr                        sta toin
000712r 3  A5 rr                        lda ciblen+1
000714r 3  85 rr                        sta toin+1
000716r 3               
000716r 3  60           z_backslash:    rts
000717r 3               
000717r 3               
000717r 3               ; ## BASE ( -- addr ) "Push address of radix base to stack"
000717r 3               ; ## "base"  auto  ANS core
000717r 3                       ; """https://forth-standard.org/standard/core/BASE
000717r 3                       ; The ANS Forth standard sees the base up to 36, so we can cheat and
000717r 3                       ; ingore the MSB
000717r 3                       ; """
000717r 3               xt_base:
000717r 3  CA                           dex
000718r 3  CA                           dex
000719r 3  A9 rr                        lda #<base
00071Br 3  95 00                        sta 0,x         ; LSB
00071Dr 3  74 01                        stz 1,x         ; MSB is always 0
00071Fr 3               
00071Fr 3  60           z_base:         rts
000720r 3               
000720r 3               
000720r 3               ; ## BEGIN ( -- addr ) "Mark entry point for loop"
000720r 3               ; ## "begin"  auto  ANS core
000720r 3                       ; """https://forth-standard.org/standard/core/BEGIN
000720r 3                       ;
000720r 3                       ; This is just an immediate version of here which could just
000720r 3                       ; as well be coded in Forth as
000720r 3                       ;       : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
000720r 3                       ; Since this is a compiling word, we don't care that much about
000720r 3                       ; about speed
000720r 3                       ; """
000720r 3               
000720r 3               xt_begin:
000720r 3  20 rr rr                     jsr xt_here
000723r 3  60           z_begin:        rts
000724r 3               
000724r 3               
000724r 3               
000724r 3               ; ## BELL ( -- ) "Emit ASCII BELL"
000724r 3               ; ## "bell"  tested  Tali Forth
000724r 3               xt_bell:
000724r 3  A9 07                        lda #7          ; ASCII value for BELl
000726r 3  20 rr rr                     jsr emit_a
000729r 3               
000729r 3  60           z_bell:         rts
00072Ar 3               
00072Ar 3               
00072Ar 3               ; ## BL ( -- c ) "Push ASCII value of SPACE to stack"
00072Ar 3               ; ## "bl"  auto  ANS core
00072Ar 3                       ; """https://forth-standard.org/standard/core/BL"""
00072Ar 3               
00072Ar 3               xt_bl:
00072Ar 3  CA                           dex
00072Br 3  CA                           dex
00072Cr 3  A9 20                        lda #AscSP
00072Er 3  95 00                        sta 0,x
000730r 3  74 01                        stz 1,x
000732r 3               
000732r 3  60           z_bl:           rts
000733r 3               
000733r 3               
000733r 3               ; ## BLK ( -- addr ) "Push address of block being interpreted"
000733r 3               ; ## "block"  auto  ANS block
000733r 3                       ; """https://forth-standard.org/standard/block/BLK"""
000733r 3               xt_blk:
000733r 3                               ; BLK is at UP + blk_offset
000733r 3  CA                           dex
000734r 3  CA                           dex
000735r 3  18                           clc
000736r 3  A5 rr                        lda up
000738r 3  69 00                        adc #blk_offset ; Add offset
00073Ar 3  95 00                        sta 0,x
00073Cr 3  A5 rr                        lda up+1
00073Er 3  69 00                        adc #0          ; Adding carry
000740r 3  95 01                        sta 1,x
000742r 3               
000742r 3  60           z_blk:          rts
000743r 3               
000743r 3               
000743r 3               ; ## BLKBUFFER ( -- addr ) "Push address of block buffer"
000743r 3               ; ## "blkbuffer"  auto  Tali block
000743r 3               xt_blkbuffer:
000743r 3                               ; blkbuffer address is at UP + blkbuffer_offset.
000743r 3                               ; Unlike some of the other user variables, we actually
000743r 3                               ; want to push the address stored here, which will
000743r 3                               ; point to somewhere outside of the user variables.
000743r 3  CA                           dex
000744r 3  CA                           dex
000745r 3                               ; Put the address on the stack.
000745r 3  A0 28                        ldy #blkbuffer_offset
000747r 3  B1 rr                        lda (up),y
000749r 3  95 00                        sta 0,x
00074Br 3  C8                           iny             ; Move along to the next byte
00074Cr 3  B1 rr                        lda (up),y
00074Er 3  95 01                        sta 1,x
000750r 3               
000750r 3  60           z_blkbuffer:    rts
000751r 3               
000751r 3               
000751r 3               ; ## BLOCK ( u -- a-addr ) "Fetch a block into a buffer"
000751r 3               ; ## "block"  auto  ANS block
000751r 3                       ; """https://forth-standard.org/standard/block/BLOCK"""
000751r 3               
000751r 3               xt_block:
000751r 3               
000751r 3                               ; See if the block requested is the same as the one we
000751r 3                               ; currently have in the buffer. Check the LSB.
000751r 3  A0 2A                        ldy #buffblocknum_offset
000753r 3  B1 rr                        lda (up),y
000755r 3  D5 00                        cmp 0,x
000757r 3  D0 0F                        bne @not_in_buffer
000759r 3               
000759r 3                               ; Check the MSB.
000759r 3  C8                           iny
00075Ar 3  B1 rr                        lda (up),y
00075Cr 3  D5 01                        cmp 1,x
00075Er 3  D0 08                        bne @not_in_buffer
000760r 3               
000760r 3                               ; The block is in the buffer. See if the buffer is in use.
000760r 3  A0 2C                        ldy #buffstatus_offset
000762r 3  B1 rr                        lda (up),y
000764r 3  29 01                        and #1          ; Check the in-use flag (bit 0)
000766r 3  D0 30                        bne @done       ; It's already in the buffer and in use.
000768r 3                                               ; @done will replace the block# with the
000768r 3                                               ; buffer address.
000768r 3               @not_in_buffer:
000768r 3                               ; Check the buffer status
000768r 3  A0 2C                        ldy #buffstatus_offset
00076Ar 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
00076Cr 3  C9 03                        cmp #3          ; LSB is needed.
00076Er 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
000770r 3               
000770r 3                               ; We need to save the block.
000770r 3  20 rr rr                     jsr xt_blkbuffer
000773r 3  20 rr rr                     jsr xt_buffblocknum
000776r 3  20 rr rr                     jsr xt_fetch
000779r 3  20 rr rr                     jsr xt_block_write
00077Cr 3               
00077Cr 3               @buffer_available:
00077Cr 3                               ; Save the block number.
00077Cr 3  A0 2A                        ldy #buffblocknum_offset
00077Er 3  B5 00                        lda 0,x
000780r 3  91 rr                        sta (up),y
000782r 3  C8                           iny
000783r 3  B5 01                        lda 1,x
000785r 3  91 rr                        sta (up),y
000787r 3               
000787r 3                               ; Get the requested block.
000787r 3  20 rr rr                     jsr xt_blkbuffer
00078Ar 3  20 rr rr                     jsr xt_swap
00078Dr 3  20 rr rr                     jsr xt_block_read
000790r 3               
000790r 3                               ; Mark the buffer as clean and in-use.
000790r 3  A9 01                        lda #1
000792r 3  A0 2C                        ldy #buffstatus_offset
000794r 3  91 rr                        sta (up),y
000796r 3               
000796r 3                               ; Make room on the stack for the return address.
000796r 3  CA                           dex
000797r 3  CA                           dex
000798r 3               
000798r 3               @done:
000798r 3                               ; It's in the buffer. Return the buffer address.
000798r 3  A0 28                        ldy #blkbuffer_offset
00079Ar 3  B1 rr                        lda (up),y
00079Cr 3  95 00                        sta 0,x
00079Er 3  C8                           iny
00079Fr 3  B1 rr                        lda (up),y
0007A1r 3  95 01                        sta 1,x
0007A3r 3               
0007A3r 3  60           z_block:        rts
0007A4r 3               
0007A4r 3               
0007A4r 3               
0007A4r 3               ; ## BLOCK_RAMDRIVE_INIT ( u -- ) "Create a ramdrive for blocks"
0007A4r 3               ; ## "block-ramdrive-init"  auto  Tali block
0007A4r 3                       ; """Create a RAM drive, with the given number of
0007A4r 3                       ; blocks, in the dictionary along with setting up the block words to
0007A4r 3                       ; use it.  The read/write routines do not provide bounds checking.
0007A4r 3                       ; Expected use: `4 block-ramdrive-init` ( to create blocks 0-3 )
0007A4r 3                       ; """
0007A4r 3               
0007A4r 3               xt_block_ramdrive_init:
0007A4r 3  20 rr rr                     jsr underflow_1
0007A7r 3               
0007A7r 3                               ; Store the string to run here as a string literal.
0007A7r 3                               ; See SLITERAL for the format information. This way, we
0007A7r 3                               ; don't have the words defined below in the Dictionary until
0007A7r 3                               ; we really use them.
0007A7r 3  4C rr rr                     jmp @after_ramdrive_code
0007AAr 3               
0007AAr 3               @ramdrive_code:
0007AAr 3  62 61 73 65          .byte "base @ swap decimal"
0007AEr 3  20 40 20 73  
0007B2r 3  77 61 70 20  
0007BDr 3  20 31 30 32          .byte " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
0007C1r 3  34 20 2A     
0007C4r 3  20 64 75 70          .byte " dup"    ; ( Save a copy for formatting it at the end )
0007C8r 3  20 62 75 66          .byte " buffer: ramdrive" ; ( Create ramdrive )
0007CCr 3  66 65 72 3A  
0007D0r 3  20 72 61 6D  
0007D9r 3                       ; ( These routines just copy between the buffer and the ramdrive blocks )
0007D9r 3  20 3A 20 62          .byte " : block-read-ramdrive"  ; ( addr u -- )
0007DDr 3  6C 6F 63 6B  
0007E1r 3  2D 72 65 61  
0007EFr 3  20 72 61 6D          .byte " ramdrive swap 1024 * + swap 1024 move ;"
0007F3r 3  64 72 69 76  
0007F7r 3  65 20 73 77  
000817r 3  20 3A 20 62          .byte " : block-write-ramdrive" ; ( addr u -- )
00081Br 3  6C 6F 63 6B  
00081Fr 3  2D 77 72 69  
00082Er 3  20 72 61 6D          .byte " ramdrive swap 1024 * + 1024 move ;"
000832r 3  64 72 69 76  
000836r 3  65 20 73 77  
000851r 3  20 27 20 62          .byte " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
000855r 3  6C 6F 63 6B  
000859r 3  2D 72 65 61  
00087Br 3  20 27 20 62          .byte " ' block-write-ramdrive block-write-vector !"
00087Fr 3  6C 6F 63 6B  
000883r 3  2D 77 72 69  
0008A7r 3  20 72 61 6D          .byte " ramdrive swap blank base !"
0008ABr 3  64 72 69 76  
0008AFr 3  65 20 73 77  
0008C2r 3               
0008C2r 3               @after_ramdrive_code:
0008C2r 3  20 rr rr                     jsr sliteral_runtime
0008C5r 3               
0008C5r 3  rr rr 18 01  .word @ramdrive_code, @after_ramdrive_code-@ramdrive_code
0008C9r 3               
0008C9r 3                               ; The address and length of the ramdrive code is now on the
0008C9r 3                               ; stack. Call EVALUATE to run it.
0008C9r 3  20 rr rr                     jsr xt_evaluate
0008CCr 3               
0008CCr 3               z_block_ramdrive_init:
0008CCr 3  60                           rts
0008CDr 3               
0008CDr 3               
0008CDr 3               
0008CDr 3               ; ## BLOCK_READ ( addr u -- ) "Read a block from storage (deferred word)"
0008CDr 3               ; ## "block-read"  auto  Tali block
0008CDr 3                       ; """BLOCK-READ is a vectored word that the user needs to override
0008CDr 3                       ; with their own version to read a block from storage.
0008CDr 3                       ; The stack parameters are ( buffer_address block# -- ).
0008CDr 3                       ; """
0008CDr 3               xt_block_read:
0008CDr 3                               ; Execute the BLOCK-READ-VECTOR
0008CDr 3  A0 2E                        ldy #blockread_offset
0008CFr 3  B1 rr                        lda (up),y
0008D1r 3  85 rr                        sta tmp1
0008D3r 3  C8                           iny
0008D4r 3  B1 rr                        lda (up),y
0008D6r 3  85 rr                        sta tmp1+1
0008D8r 3               
0008D8r 3  6C rr rr                     jmp (tmp1)
0008DBr 3               
0008DBr 3               z_block_read:   ; No RTS needed
0008DBr 3               
0008DBr 3               
0008DBr 3               ; ## BLOCK_READ_VECTOR ( -- addr ) "Address of the block-read vector"
0008DBr 3               ; ## "block-read-vector"  auto  Tali block
0008DBr 3                       ; """BLOCK-READ is a vectored word that the user needs to override
0008DBr 3                       ; with their own version to read a block from storage.
0008DBr 3                       ; This word gives the address of the vector so it can be replaced.
0008DBr 3                       ; """
0008DBr 3               xt_block_read_vector:
0008DBr 3                               ; Get the BLOCK-READ-VECTOR address
0008DBr 3  CA                           dex
0008DCr 3  CA                           dex
0008DDr 3  18                           clc
0008DEr 3  A5 rr                        lda up
0008E0r 3  69 2E                        adc #blockread_offset
0008E2r 3  95 00                        sta 0,x
0008E4r 3  A5 rr                        lda up+1
0008E6r 3  69 00                        adc #0          ; Add carry
0008E8r 3  95 01                        sta 1,x
0008EAr 3               
0008EAr 3               z_block_read_vector:
0008EAr 3  60                           rts
0008EBr 3               
0008EBr 3               
0008EBr 3               ; This is the default error message the vectored words BLOCK-READ and
0008EBr 3               ; BLOCK-WRITE start with. This word is not included in the dictionary.
0008EBr 3               xt_block_word_error:
0008EBr 3  A9 0C                        lda #err_blockwords
0008EDr 3  4C rr rr                     jmp error       ; no RTS needed
0008F0r 3               z_block_word_error:
0008F0r 3               
0008F0r 3               ; ## BLOCK_WRITE ( addr u -- ) "Write a block to storage (deferred word)"
0008F0r 3               ; ## "block-write"  auto  Tali block
0008F0r 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
0008F0r 3                       ; with their own version to write a block to storage.
0008F0r 3                       ; The stack parameters are ( buffer_address block# -- ).
0008F0r 3                       ; """
0008F0r 3               xt_block_write:
0008F0r 3                               ; Execute the BLOCK-READ-VECTOR
0008F0r 3  A0 30                        ldy #blockwrite_offset
0008F2r 3  B1 rr                        lda (up),y
0008F4r 3  85 rr                        sta tmp1
0008F6r 3  C8                           iny
0008F7r 3  B1 rr                        lda (up),y
0008F9r 3  85 rr                        sta tmp1+1
0008FBr 3  6C rr rr                     jmp (tmp1)
0008FEr 3               
0008FEr 3               z_block_write:  ; No RTS needed
0008FEr 3               
0008FEr 3               
0008FEr 3               ; ## BLOCK_WRITE_VECTOR ( -- addr ) "Address of the block-write vector"
0008FEr 3               ; ## "block-write-vector"  auto  Tali block
0008FEr 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
0008FEr 3                       ; with their own version to write a block to storage.
0008FEr 3                       ; This word gives the address of the vector so it can be replaced.
0008FEr 3                       ; """
0008FEr 3               xt_block_write_vector:
0008FEr 3                               ; Get the BLOCK-WRITE-VECTOR address
0008FEr 3  CA                           dex
0008FFr 3  CA                           dex
000900r 3  18                           clc
000901r 3  A5 rr                        lda up
000903r 3  69 30                        adc #blockwrite_offset
000905r 3  95 00                        sta 0,x
000907r 3  A5 rr                        lda up+1
000909r 3  69 00                        adc #0          ; Add carry
00090Br 3  95 01                        sta 1,x
00090Dr 3               
00090Dr 3               z_block_write_vector:
00090Dr 3  60                           rts
00090Er 3               
00090Er 3               
00090Er 3               ; ## BOUNDS ( addr u -- addr+u addr ) "Prepare address for looping"
00090Er 3               ; ## "bounds"  auto  Gforth
00090Er 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Memory-Blocks.html
00090Er 3                       ; Given a string, return the correct Data Stack parameters for
00090Er 3                       ; a DO/LOOP loop over its characters. This is realized as
00090Er 3                       ; OVER + SWAP in Forth, but we do it a lot faster in assembler
00090Er 3                       ; """
00090Er 3               xt_bounds:
00090Er 3  20 rr rr                     jsr underflow_2
000911r 3               
000911r 3  18                           clc
000912r 3  B5 00                        lda 0,x                 ; LSB u
000914r 3  B4 02                        ldy 2,x                 ; LSB addr
000916r 3  75 02                        adc 2,x
000918r 3  95 02                        sta 2,x                 ; LSB addr+u
00091Ar 3  94 00                        sty 0,x
00091Cr 3               
00091Cr 3  B5 01                        lda 1,x                 ; MSB u
00091Er 3  B4 03                        ldy 3,x                 ; MSB addr
000920r 3  75 03                        adc 3,x
000922r 3  95 03                        sta 3,x                 ; MSB addr+u
000924r 3  94 01                        sty 1,x
000926r 3               
000926r 3  60           z_bounds:       rts
000927r 3               
000927r 3               
000927r 3               ; ## BRACKET_CHAR ( "c" -- ) "Compile character"
000927r 3               ; ## "[char]"  auto  ANS core
000927r 3                       ; """https://forth-standard.org/standard/core/BracketCHAR
000927r 3                       ; Compile the ASCII value of a character as a literal. This is an
000927r 3                       ; immediate, compile-only word.
000927r 3                       ;
000927r 3                       ; A definition given in
000927r 3                       ; http://forth-standard.org/standard/implement is
000927r 3                       ; : [CHAR]  CHAR POSTPONE LITERAL ; IMMEDIATE
000927r 3                       ; """
000927r 3               xt_bracket_char:
000927r 3  20 rr rr                     jsr xt_char
00092Ar 3  20 rr rr                     jsr xt_literal
00092Dr 3  60           z_bracket_char: rts
00092Er 3               
00092Er 3               
00092Er 3               ; ## BRACKET_TICK ( -- ) "Store xt of following word during compilation"
00092Er 3               ; ## "[']"  auto  ANS core
00092Er 3                       ; """https://forth-standard.org/standard/core/BracketTick"""
00092Er 3               xt_bracket_tick:
00092Er 3  20 rr rr                     jsr xt_tick
000931r 3  20 rr rr                     jsr xt_literal
000934r 3  60           z_bracket_tick: rts
000935r 3               
000935r 3               
000935r 3               ; ## BUFFBLOCKNUM ( -- addr ) "Push address of variable holding block in buffer"
000935r 3               ; ## "buffblocknum"  auto  Tali block
000935r 3               xt_buffblocknum:
000935r 3                               ; BUFFBLOCKNUM is at UP + buffblocknum_offset
000935r 3  CA                           dex
000936r 3  CA                           dex
000937r 3  18                           clc
000938r 3  A5 rr                        lda up
00093Ar 3  69 2A                        adc #buffblocknum_offset        ; Add offset
00093Cr 3  95 00                        sta 0,x
00093Er 3  A5 rr                        lda up+1
000940r 3  69 00                        adc #0                          ; Adding carry
000942r 3  95 01                        sta 1,x
000944r 3               
000944r 3  60           z_buffblocknum: rts
000945r 3               
000945r 3               
000945r 3               ; ## BUFFER ( u -- a-addr ) "Get a buffer for a block"
000945r 3               ; ## "buffer"  auto  ANS block
000945r 3                       ; """https://forth-standard.org/standard/block/BUFFER"""
000945r 3               
000945r 3               xt_buffer:
000945r 3                               ; Check the buffer status
000945r 3  A0 2C                        ldy #buffstatus_offset
000947r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
000949r 3  C9 03                        cmp #3          ; LSB is needed.
00094Br 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
00094Dr 3               
00094Dr 3                               ; We need to save the block.
00094Dr 3  20 rr rr                     jsr xt_blkbuffer
000950r 3  20 rr rr                     jsr xt_buffblocknum
000953r 3  20 rr rr                     jsr xt_fetch
000956r 3  20 rr rr                     jsr xt_block_write
000959r 3               
000959r 3               @buffer_available:
000959r 3                               ; Save the block number.
000959r 3  A0 2A                        ldy #buffblocknum_offset
00095Br 3  B5 00                        lda 0,x
00095Dr 3  91 rr                        sta (up),y
00095Fr 3  C8                           iny
000960r 3  B5 01                        lda 1,x
000962r 3  91 rr                        sta (up),y
000964r 3               
000964r 3                               ; Mark the buffer as clean and in-use.
000964r 3  A9 01                        lda #1
000966r 3  A0 2C                        ldy #buffstatus_offset
000968r 3  91 rr                        sta (up),y
00096Ar 3               
00096Ar 3               @done:
00096Ar 3                               ; Return the buffer address.
00096Ar 3  A0 28                        ldy #blkbuffer_offset
00096Cr 3  B1 rr                        lda (up),y
00096Er 3  95 00                        sta 0,x
000970r 3  C8                           iny
000971r 3  B1 rr                        lda (up),y
000973r 3  95 01                        sta 1,x
000975r 3               
000975r 3  60           z_buffer:       rts
000976r 3               
000976r 3               
000976r 3               
000976r 3               ; ## BUFFER_COLON ( u "<name>" -- ; -- addr ) "Create an uninitialized buffer"
000976r 3               ; ## "buffer:"  auto  ANS core ext
000976r 3                               ; """https://forth-standard.org/standard/core/BUFFERColon
000976r 3                               ; Create a buffer of size u that puts its address on the stack
000976r 3                               ; when its name is used.
000976r 3                               ; """
000976r 3               xt_buffer_colon:
000976r 3  20 rr rr                     jsr xt_create
000979r 3  20 rr rr                     jsr xt_allot
00097Cr 3  60           z_buffer_colon: rts
00097Dr 3               
00097Dr 3               
00097Dr 3               ; ## BUFFSTATUS ( -- addr ) "Push address of variable holding buffer status"
00097Dr 3               ; ## "buffstatus"  auto  Tali block
00097Dr 3               xt_buffstatus:
00097Dr 3                               ; BUFFSTATUS is at UP + buffstatus_offset
00097Dr 3  CA                           dex
00097Er 3  CA                           dex
00097Fr 3  18                           clc
000980r 3  A5 rr                        lda up
000982r 3  69 2C                        adc #buffstatus_offset  ; Add offset
000984r 3  95 00                        sta 0,x
000986r 3  A5 rr                        lda up+1
000988r 3  69 00                        adc #0                  ; Adding carry
00098Ar 3  95 01                        sta 1,x
00098Cr 3               
00098Cr 3  60           z_buffstatus:   rts
00098Dr 3               
00098Dr 3               
00098Dr 3               ; ## BYE ( -- ) "Break"
00098Dr 3               ; ## "bye"  tested  ANS tools ext
00098Dr 3                       ; """https://forth-standard.org/standard/tools/BYE"""
00098Dr 3               
00098Dr 3               xt_bye:
00098Dr 3                               ;brk
00098Dr 3  4C rr rr                     jmp platform_bye
000990r 3               z_bye:          ;rts             ; never reached
000990r 3               
000990r 3               
000990r 3               
000990r 3               ; ## C_COMMA ( c -- ) "Store one byte/char in the Dictionary"
000990r 3               ; ## "c,"  auto  ANS core
000990r 3                       ; """https://forth-standard.org/standard/core/CComma"""
000990r 3               
000990r 3               xt_c_comma:
000990r 3  20 rr rr                     jsr underflow_1
000993r 3               
000993r 3  B5 00                        lda 0,x
000995r 3  20 rr rr                     jsr cmpl_a
000998r 3               
000998r 3  E8                           inx
000999r 3  E8                           inx
00099Ar 3               
00099Ar 3  60           z_c_comma:      rts
00099Br 3               
00099Br 3               
00099Br 3               
00099Br 3               ; ## C_FETCH ( addr -- c ) "Get a character/byte from given address"
00099Br 3               ; ## "c@"  auto  ANS core
00099Br 3                       ; """https://forth-standard.org/standard/core/CFetch"""
00099Br 3               xt_c_fetch:
00099Br 3  20 rr rr                     jsr underflow_1
00099Er 3               
00099Er 3  A1 00                        lda (0,x)
0009A0r 3  95 00                        sta 0,x
0009A2r 3  74 01                        stz 1,x         ; Ignore LSB
0009A4r 3               
0009A4r 3  60           z_c_fetch:      rts
0009A5r 3               
0009A5r 3               
0009A5r 3               ; ## C_STORE ( c addr -- ) "Store character at address given"
0009A5r 3               ; ## "c!"  auto  ANS core
0009A5r 3                       ; """https://forth-standard.org/standard/core/CStore"""
0009A5r 3               xt_c_store:
0009A5r 3  20 rr rr                     jsr underflow_2
0009A8r 3               
0009A8r 3  B5 02                        lda 2,x
0009AAr 3  81 00                        sta (0,x)
0009ACr 3               
0009ACr 3  E8                           inx
0009ADr 3  E8                           inx
0009AEr 3  E8                           inx
0009AFr 3  E8                           inx
0009B0r 3               
0009B0r 3  60           z_c_store:      rts
0009B1r 3               
0009B1r 3               
0009B1r 3               ; ## CASE (C: -- 0) ( -- ) "Conditional flow control"
0009B1r 3               ; ## "case"  auto  ANS core ext
0009B1r 3                       ; """http://forth-standard.org/standard/core/CASE
0009B1r 3                       ;
0009B1r 3                       ; This is a dummy header, CASE shares the actual code with ZERO.
0009B1r 3                       ; """
0009B1r 3               
0009B1r 3               
0009B1r 3               ; ## CELL_PLUS ( u -- u ) "Add cell size in bytes"
0009B1r 3               ; ## "cell+"  auto  ANS core
0009B1r 3                       ; """https://forth-standard.org/standard/core/CELLPlus
0009B1r 3                       ; Add the number of bytes ("address units") that one cell needs.
0009B1r 3                       ; Since this is an 8 bit machine with 16 bit cells, we add two bytes.
0009B1r 3                       ; """
0009B1r 3               
0009B1r 3               xt_cell_plus:
0009B1r 3  20 rr rr                     jsr underflow_1
0009B4r 3               
0009B4r 3  F6 00                        inc 0,x
0009B6r 3  D0 02                        bne @1
0009B8r 3  F6 01                        inc 1,x
0009BAr 3               @1:
0009BAr 3  F6 00                        inc 0,x
0009BCr 3  D0 02                        bne @done
0009BEr 3  F6 01                        inc 1,x
0009C0r 3               @done:
0009C0r 3  60           z_cell_plus:    rts
0009C1r 3               
0009C1r 3               
0009C1r 3               
0009C1r 3               ; ## CELLS ( u -- u ) "Convert cells to size in bytes"
0009C1r 3               ; ## "cells"  auto  ANS core
0009C1r 3                       ; """https://forth-standard.org/standard/core/CELLS
0009C1r 3                       ;
0009C1r 3                       ; Dummy entry for the CELLS word, the code is the same as for
0009C1r 3                       ; 2*, which is where the header directs us to
0009C1r 3                       ; """
0009C1r 3               
0009C1r 3               
0009C1r 3               ; ## CHAR ( "c" -- u ) "Convert character to ASCII value"
0009C1r 3               ; ## "char"  auto  ANS core
0009C1r 3                       ; """https://forth-standard.org/standard/core/CHAR"""
0009C1r 3               
0009C1r 3               xt_char:
0009C1r 3                               ; get character from string, returns ( addr u )
0009C1r 3  20 rr rr                     jsr xt_parse_name
0009C4r 3               
0009C4r 3                               ; if we got back a zero, we have a problem
0009C4r 3  B5 00                        lda 0,x
0009C6r 3  15 01                        ora 1,x
0009C8r 3  D0 05                        bne @not_empty
0009CAr 3               
0009CAr 3  A9 05                        lda #err_noname
0009CCr 3  4C rr rr                     jmp error
0009CFr 3               
0009CFr 3               @not_empty:
0009CFr 3  E8                           inx             ; drop number of characters, leave addr
0009D0r 3  E8                           inx
0009D1r 3  A1 00                        lda (0,x)       ; get character (equivalent to C@)
0009D3r 3  95 00                        sta 0,x
0009D5r 3  74 01                        stz 1,x         ; MSB is always zero
0009D7r 3               
0009D7r 3  60           z_char:         rts
0009D8r 3               
0009D8r 3               
0009D8r 3               
0009D8r 3               ; ## CHAR_PLUS ( addr -- addr+1 ) "Add the size of a character unit to address"
0009D8r 3               ; ## "char+"  auto  ANS core
0009D8r 3                       ; """https://forth-standard.org/standard/core/CHARPlus
0009D8r 3                       ;
0009D8r 3                       ; This is a dummy entry, the code is shared with ONE_PLUS
0009D8r 3                       ; """
0009D8r 3               
0009D8r 3               
0009D8r 3               ; ## CHARS ( n -- n ) "Number of bytes that n chars need"
0009D8r 3               ; ## "chars"  auto  ANS core
0009D8r 3                       ; """https://forth-standard.org/standard/core/CHARS
0009D8r 3                       ; Return how many address units n chars are. Since this is an 8 bit
0009D8r 3                       ; machine, this does absolutely nothing and is included for
0009D8r 3                       ; compatibility with other Forth versions
0009D8r 3                       ; """
0009D8r 3               
0009D8r 3               xt_chars:
0009D8r 3                               ; Checking for underflow seems a bit stupid because this
0009D8r 3                               ; routine does nothing on this machine. However, the user
0009D8r 3                               ; should be warned that there is something wrong with the
0009D8r 3                               ; code if this occurs.
0009D8r 3  20 rr rr                     jsr underflow_1
0009DBr 3               
0009DBr 3  60           z_chars:        rts
0009DCr 3               
0009DCr 3               
0009DCr 3               ; ## CLEAVE ( addr u -- addr2 u2 addr1 u1 ) "Split off word from string"
0009DCr 3               ; ## "cleave"  auto  Tali Forth
0009DCr 3               
0009DCr 3                       ; """Given a range of memory with words delimited by whitespace,return
0009DCr 3                       ; the first word at the top of the stack and the rest of the word
0009DCr 3                       ; following it.
0009DCr 3                       ;
0009DCr 3                       ; Example:
0009DCr 3                       ; s" w1 w2 w3" cleave  -> "w2 w3" "w1"
0009DCr 3                       ; s" w1" cleave        -> "" "w1"
0009DCr 3                       ;
0009DCr 3                       ; Since it will be used in loops a lot, we want it to work in pure
0009DCr 3                       ; assembler and be as fast as we can make it. Calls PARSE-NAME so we
0009DCr 3                       ; strip leading delimiters.
0009DCr 3                       ; """
0009DCr 3               
0009DCr 3               xt_cleave:
0009DCr 3  20 rr rr                     jsr underflow_2
0009DFr 3               
0009DFr 3                               ; We arrive here with ( addr u ). We need to strip any leading
0009DFr 3                               ; spaces by hand: PARSE-NAME does do that, but it doesn't
0009DFr 3                               ; remember how many spaces were stripped. This means we can't
0009DFr 3                               ; calculate the length of the remainder. Fortunately, Tali
0009DFr 3                               ; Forth has just the word we need for this:
0009DFr 3  20 rr rr                     jsr xt_minus_leading    ; -LEADING ( addr u )
0009E2r 3               
0009E2r 3                               ; The main part we can turn over to PARSE-NAME, except that we
0009E2r 3                               ; have a string ( addr u ) and not stuff in the input buffer.
0009E2r 3                               ; We get around this by cheating: We place ( addr u ) in the
0009E2r 3                               ; input buffer and then call PARSE-NAME.
0009E2r 3  20 rr rr                     jsr xt_input_to_r       ; save old imput state
0009E5r 3               
0009E5r 3  B5 00                        lda 0,x         ; u is new ciblen
0009E7r 3  85 rr                        sta ciblen
0009E9r 3  B5 01                        lda 1,x
0009EBr 3  85 rr                        sta ciblen+1
0009EDr 3               
0009EDr 3  B5 02                        lda 2,x         ; addr is new cib
0009EFr 3  85 rr                        sta cib
0009F1r 3  B5 03                        lda 3,x
0009F3r 3  85 rr                        sta cib+1
0009F5r 3               
0009F5r 3  64 rr                        stz toin        ; >IN pointer is zero
0009F7r 3  64 rr                        stz toin+1
0009F9r 3               
0009F9r 3                               ; PARSE-NAME gives us back the substring of the first word
0009F9r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u addr-s u-s )
0009FCr 3               
0009FCr 3                               ; If we were given an empty string, then we're done. It's the
0009FCr 3                               ; resposibility of the user to catch this as a sign to end the
0009FCr 3                               ; any loop
0009FCr 3  B5 00                        lda 0,x
0009FEr 3  15 01                        ora 1,x
000A00r 3  F0 23                        beq @done
000A02r 3               
000A02r 3                               ; Now we have to adjust the original string
000A02r 3  B5 04                        lda 4,x         ; LSB of original u
000A04r 3  38                           sec
000A05r 3  F5 00                        sbc 0,x
000A07r 3  95 04                        sta 4,x
000A09r 3               
000A09r 3  B5 05                        lda 5,x         ; MSB of original u
000A0Br 3  F5 01                        sbc 1,x
000A0Dr 3  95 05                        sta 5,x
000A0Fr 3               
000A0Fr 3  B5 06                        lda 6,x         ; LSB of original addr
000A11r 3  18                           clc
000A12r 3  75 00                        adc 0,x
000A14r 3  95 06                        sta 6,x
000A16r 3               
000A16r 3  B5 07                        lda 7,x         ; MSB of original addr
000A18r 3  75 01                        adc 1,x
000A1Ar 3  95 07                        sta 7,x
000A1Cr 3               
000A1Cr 3                               ; There is one small problem: PARSE-NAME will probably have
000A1Cr 3                               ; left the string with the rest of the words with leading
000A1Cr 3                               ; delimiters. We use our magic -LEADING again
000A1Cr 3  20 rr rr                     jsr xt_two_swap         ; ( addr-s u-s addr u )
000A1Fr 3  20 rr rr                     jsr xt_minus_leading
000A22r 3  20 rr rr                     jsr xt_two_swap         ; ( addr u addr-s u-s )
000A25r 3               @done:
000A25r 3                               ; Restore input
000A25r 3  20 rr rr                     jsr xt_r_to_input
000A28r 3               
000A28r 3  60           z_cleave:       rts
000A29r 3               
000A29r 3               
000A29r 3               
000A29r 3               ; ## CMOVE ( addr1 addr2 u -- ) "Copy bytes going from low to high"
000A29r 3               ; ## "cmove"  auto  ANS string
000A29r 3                       ; """https://forth-standard.org/standard/string/CMOVE
000A29r 3                       ; Copy u bytes from addr1 to addr2, going low to high (addr2 is
000A29r 3                       ; larger than addr1). Based on code in Leventhal, Lance A.
000A29r 3                       ; "6502 Assembly Language Routines", p. 201, where it is called
000A29r 3                       ; "move left".
000A29r 3                       ;
000A29r 3                       ; There are no official tests for this word.
000A29r 3                       ; """
000A29r 3               
000A29r 3               xt_cmove:
000A29r 3  20 rr rr                     jsr underflow_3
000A2Cr 3               
000A2Cr 3                               ; move destination address to where we can work with it
000A2Cr 3  B5 02                        lda 2,x
000A2Er 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000A30r 3  B5 03                        lda 3,x
000A32r 3  85 rr                        sta tmp2+1
000A34r 3               
000A34r 3                               ; move source address to where we can work with it
000A34r 3  B5 04                        lda 4,x
000A36r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000A38r 3  B5 05                        lda 5,x
000A3Ar 3  85 rr                        sta tmp1+1
000A3Cr 3               
000A3Cr 3  A0 00                        ldy #0
000A3Er 3  B5 01                        lda 1,x         ; number of whole pages to move
000A40r 3  F0 0F                        beq @dopartial
000A42r 3               
000A42r 3               @page:
000A42r 3  B1 rr                        lda (tmp1),y
000A44r 3  91 rr                        sta (tmp2),y
000A46r 3  C8                           iny
000A47r 3  D0 F9                        bne @page
000A49r 3               
000A49r 3  E6 rr                        inc tmp1+1
000A4Br 3  E6 rr                        inc tmp2+1
000A4Dr 3  D6 01                        dec 1,x
000A4Fr 3  D0 F1                        bne @page
000A51r 3               
000A51r 3               @dopartial:
000A51r 3  B5 00                        lda 0,x         ; length of last page
000A53r 3  F0 09                        beq @done
000A55r 3               
000A55r 3               @partial:
000A55r 3  B1 rr                        lda (tmp1),y
000A57r 3  91 rr                        sta (tmp2),y
000A59r 3  C8                           iny
000A5Ar 3               
000A5Ar 3  D6 00                        dec 0,x
000A5Cr 3  D0 F7                        bne @partial
000A5Er 3               
000A5Er 3               @done:          ; clear the stack
000A5Er 3  8A                           txa
000A5Fr 3  18                           clc
000A60r 3  69 06                        adc #6
000A62r 3  AA                           tax
000A63r 3               
000A63r 3  60           z_cmove:        rts
000A64r 3               
000A64r 3               
000A64r 3               
000A64r 3               ; ## CMOVE_UP ( add1 add2 u -- ) "Copy bytes from high to low"
000A64r 3               ; ## "cmove>"  auto  ANS string
000A64r 3                       ; """https://forth-standard.org/standard/string/CMOVEtop
000A64r 3                       ; Based on code in Leventhal, Lance A. "6502 Assembly Language
000A64r 3                       ; Routines", p. 201, where it is called "move right".
000A64r 3                       ;
000A64r 3                       ; There are no official tests for this word.
000A64r 3                       ; """
000A64r 3               
000A64r 3               xt_cmove_up:
000A64r 3  20 rr rr                     jsr underflow_3
000A67r 3               
000A67r 3                               ; Move destination address to where we can work with it
000A67r 3  B5 02                        lda 2,x
000A69r 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000A6Br 3  B5 03                        lda 3,x
000A6Dr 3  18                           clc
000A6Er 3  75 01                        adc 1,x
000A70r 3  85 rr                        sta tmp2+1      ; point to last page of destination
000A72r 3               
000A72r 3                               ; Move source address to where we can work with it
000A72r 3  B5 04                        lda 4,x
000A74r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000A76r 3  B5 05                        lda 5,x
000A78r 3  18                           clc
000A79r 3  75 01                        adc 1,x
000A7Br 3  85 rr                        sta tmp1+1      ; point to last page of source
000A7Dr 3  F6 01                        inc 1,x         ; allows us to use bne with dec 1,x below
000A7Fr 3               
000A7Fr 3                               ; Move the last partial page first
000A7Fr 3  B4 00                        ldy 0,x         ; length of last page
000A81r 3  F0 0E                        beq @nopartial
000A83r 3               
000A83r 3               @outerloop:
000A83r 3  88                           dey
000A84r 3  F0 07                        beq @finishpage
000A86r 3               
000A86r 3               @innerloop:
000A86r 3  B1 rr                        lda (tmp1),y
000A88r 3  91 rr                        sta (tmp2),y
000A8Ar 3  88                           dey
000A8Br 3  D0 F9                        bne @innerloop
000A8Dr 3               
000A8Dr 3               @finishpage:
000A8Dr 3  B2 rr                        lda (tmp1)      ; handle y = 0 separately
000A8Fr 3  92 rr                        sta (tmp2)
000A91r 3               
000A91r 3               @nopartial:
000A91r 3  C6 rr                        dec tmp1+1      ; back up to previous pages
000A93r 3  C6 rr                        dec tmp2+1
000A95r 3  D6 01                        dec 1,x
000A97r 3  D0 EA                        bne @outerloop
000A99r 3               @done:
000A99r 3                               ; clear up the stack and leave
000A99r 3  8A                           txa
000A9Ar 3  18                           clc
000A9Br 3  69 06                        adc #6
000A9Dr 3  AA                           tax
000A9Er 3               
000A9Er 3  60           z_cmove_up:     rts
000A9Fr 3               
000A9Fr 3               
000A9Fr 3               
000A9Fr 3               ; ## COLON ( "name" -- ) "Start compilation of a new word"
000A9Fr 3               ; ## ":"  auto  ANS core
000A9Fr 3                       ; """https://forth-standard.org/standard/core/Colon
000A9Fr 3                       ;
000A9Fr 3                       ; Use the CREATE routine and fill in the rest by hand.
000A9Fr 3                       ; """
000A9Fr 3               
000A9Fr 3               xt_colon:
000A9Fr 3                               ; If we're already in the compile state, complain
000A9Fr 3                               ; and quit
000A9Fr 3  A5 rr                        lda state
000AA1r 3  05 rr                        ora state+1
000AA3r 3  F0 05                        beq @1
000AA5r 3               
000AA5r 3  A9 07                        lda #err_state
000AA7r 3  4C rr rr                     jmp error
000AAAr 3               @1:
000AAAr 3                               ; switch to compile state
000AAAr 3  C6 rr                        dec state
000AACr 3  C6 rr                        dec state+1
000AAEr 3               
000AAEr 3                               ; Set bit 6 in status to tell ";" and RECURSE this is a normal
000AAEr 3                               ; word
000AAEr 3  A9 40                        lda #%01000000
000AB0r 3  04 rr                        tsb status
000AB2r 3               
000AB2r 3                               ; CREATE is going to change the DP to point to the new word's
000AB2r 3                               ; header. While this is fine for (say) variables, it would mean
000AB2r 3                               ; that FIND-NAME etc would find a half-finished word when
000AB2r 3                               ; looking in the Dictionary. To prevent this, we save the old
000AB2r 3                               ; version of DP and restore it later. The new DP is placed in
000AB2r 3                               ; the variable WORKWORD until we're finished with a SEMICOLON.
000AB2r 3  20 rr rr                     jsr current_to_dp
000AB5r 3  A5 rr                        lda dp+1            ; CREATE uses a lot of variables
000AB7r 3  48                           pha
000AB8r 3  A5 rr                        lda dp
000ABAr 3  48                           pha
000ABBr 3               
000ABBr 3                               ; Tell create not to print warning for duplicate name.
000ABBr 3  A9 80                        lda #%10000000
000ABDr 3  04 rr                        tsb status
000ABFr 3               
000ABFr 3  20 rr rr                     jsr xt_create
000AC2r 3               
000AC2r 3                               ; Get the nt (not the xt!) of the new word as described above.
000AC2r 3                               ; Only COLON, SEMICOLON and RECURSE get to access WORKWORD
000AC2r 3  20 rr rr                     jsr current_to_dp   ; This might be able to be omitted
000AC5r 3  A5 rr                        lda dp
000AC7r 3  85 rr                        sta workword
000AC9r 3  A5 rr                        lda dp+1
000ACBr 3  85 rr                        sta workword+1
000ACDr 3               
000ACDr 3                               ; Restore original DP
000ACDr 3  68                           pla
000ACEr 3  85 rr                        sta dp
000AD0r 3  68                           pla
000AD1r 3  85 rr                        sta dp+1
000AD3r 3  20 rr rr                     jsr dp_to_current
000AD6r 3               
000AD6r 3                               ; CREATE includes a subroutine jump to DOVAR by default. We
000AD6r 3                               ; back up three bytes and overwrite that.
000AD6r 3  A5 rr                        lda cp
000AD8r 3  38                           sec
000AD9r 3  E9 03                        sbc #3
000ADBr 3  85 rr                        sta cp
000ADDr 3  B0 02                        bcs @done
000ADFr 3  C6 rr                        dec cp+1
000AE1r 3               @done:
000AE1r 3  60           z_colon:        rts
000AE2r 3               
000AE2r 3               
000AE2r 3               ; ## COLON_NONAME ( -- ) "Start compilation of a new word""
000AE2r 3               ; ## ":NONAME"  auto  ANS core
000AE2r 3                       ; """https://forth-standard.org/standard/core/ColonNONAME
000AE2r 3                       ; Compile a word with no nt.  ";" will put its xt on the stack.
000AE2r 3                       ; """
000AE2r 3               
000AE2r 3               xt_colon_noname:
000AE2r 3                               ; If we're already in the compile state, complain
000AE2r 3                               ; and quit
000AE2r 3  A5 rr                        lda state
000AE4r 3  05 rr                        ora state+1
000AE6r 3  F0 05                        beq @1
000AE8r 3               
000AE8r 3  A9 07                        lda #err_state
000AEAr 3  4C rr rr                     jmp error
000AEDr 3               @1:
000AEDr 3                               ; switch to compile state
000AEDr 3  C6 rr                        dec state
000AEFr 3  C6 rr                        dec state+1
000AF1r 3               
000AF1r 3                               ; Clear bit 6 in status to tell ";" and RECURSE this is
000AF1r 3                               ; a :NONAME word.
000AF1r 3  A9 40                        lda #%01000000
000AF3r 3  14 rr                        trb status
000AF5r 3               
000AF5r 3                               ; Put cp (the xt for this word) in WORKWORD. The flag above
000AF5r 3                               ; lets both ";" and RECURSE know that is is an xt instead of an
000AF5r 3                               ; nt and they will modify their behavior.
000AF5r 3  A5 rr                        lda cp
000AF7r 3  85 rr                        sta workword
000AF9r 3  A5 rr                        lda cp+1
000AFBr 3  85 rr                        sta workword+1
000AFDr 3               @done:
000AFDr 3  60           z_colon_noname:        rts
000AFEr 3               
000AFEr 3               
000AFEr 3               
000AFEr 3               ; ## COMMA ( n -- ) "Allot and store one cell in memory"
000AFEr 3               ; ## ","  auto  ANS core
000AFEr 3                       ; """https://forth-standard.org/standard/core/Comma
000AFEr 3                       ; Store TOS at current place in memory.
000AFEr 3                       ;
000AFEr 3                       ; Since this an eight-bit machine, we can ignore all alignment issues.
000AFEr 3                       ; """
000AFEr 3               
000AFEr 3               xt_comma:
000AFEr 3  20 rr rr                     jsr underflow_1
000B01r 3               
000B01r 3  B5 00                        lda 0,x
000B03r 3  92 rr                        sta (cp)
000B05r 3               
000B05r 3  E6 rr                        inc cp
000B07r 3  D0 02                        bne @1
000B09r 3  E6 rr                        inc cp+1
000B0Br 3               @1:
000B0Br 3  B5 01                        lda 1,x
000B0Dr 3  92 rr                        sta (cp)
000B0Fr 3               
000B0Fr 3  E6 rr                        inc cp
000B11r 3  D0 02                        bne @done
000B13r 3  E6 rr                        inc cp+1
000B15r 3               @done:
000B15r 3  E8                           inx
000B16r 3  E8                           inx
000B17r 3               
000B17r 3  60           z_comma:        rts
000B18r 3               
000B18r 3               
000B18r 3               
000B18r 3               ; ## COMPARE ( addr1 u1 addr2 u2 -- -1 | 0 | 1) "Compare two strings"
000B18r 3               ; ## "compare"   auto  ANS string
000B18r 3                       ; """https://forth-standard.org/standard/string/COMPARE
000B18r 3                       ; Compare string1 (denoted by addr1 u1) to string2 (denoted by
000B18r 3                       ; addr2 u2).  Return -1 if string1 < string2, 0 if string1 = string2
000B18r 3                       ; and 1 if string1 > string2 (ASCIIbetical comparison).  A string
000B18r 3                       ; that entirely matches the beginning of the other string, but is
000B18r 3                       ; shorter, is considered less than the longer string.
000B18r 3                       ; """
000B18r 3               
000B18r 3               xt_compare:
000B18r 3  20 rr rr                     jsr underflow_4
000B1Br 3               
000B1Br 3                               ; Load the two string addresses into tmp1 and tmp2.
000B1Br 3  B5 02                        lda 2,x
000B1Dr 3  85 rr                        sta tmp2
000B1Fr 3  B5 03                        lda 3,x
000B21r 3  85 rr                        sta tmp2+1
000B23r 3  B5 06                        lda 6,x
000B25r 3  85 rr                        sta tmp1
000B27r 3  B5 07                        lda 7,x
000B29r 3  85 rr                        sta tmp1+1
000B2Br 3                               ; The counts will be used in-place on the stack.
000B2Br 3               
000B2Br 3               @compare_loop:
000B2Br 3                               ; Check to see if we are out of letters.
000B2Br 3               
000B2Br 3                               ; Check string1
000B2Br 3  B5 04                        lda 4,x
000B2Dr 3  15 05                        ora 5,x
000B2Fr 3  F0 2C                        beq @str1_done
000B31r 3               
000B31r 3                               ; Check string2
000B31r 3  B5 00                        lda 0,x
000B33r 3  15 01                        ora 1,x
000B35r 3  F0 3A                        beq @greater    ; Str2 empty first
000B37r 3               
000B37r 3               @check_letter:
000B37r 3                               ; Both strings have at least one letter left.
000B37r 3                               ; Check the letters against each other.
000B37r 3  B2 rr                        lda (tmp1)
000B39r 3  D2 rr                        cmp (tmp2)
000B3Br 3  90 26                        bcc @less
000B3Dr 3  D0 32                        bne @greater
000B3Fr 3               @next_letter:
000B3Fr 3                               ; Move both tmp pointers and decrement the counts
000B3Fr 3                               ; on the stack.
000B3Fr 3                               ; Increment tmp1
000B3Fr 3  E6 rr                        inc tmp1
000B41r 3  D0 02                        bne @1
000B43r 3  E6 rr                        inc tmp1+1
000B45r 3               @1:
000B45r 3                               ; Increment tmp2
000B45r 3  E6 rr                        inc tmp2
000B47r 3  D0 02                        bne @2
000B49r 3  E6 rr                        inc tmp2+1
000B4Br 3               @2:
000B4Br 3                               ; Decrement count1 on the stack.
000B4Br 3  B5 04                        lda 4,x
000B4Dr 3  D0 02                        bne @3
000B4Fr 3  D6 05                        dec 5,x
000B51r 3               @3:
000B51r 3  D6 04                        dec 4,x
000B53r 3               
000B53r 3                               ; Decrement count2 on the stack.
000B53r 3  B5 00                        lda 0,x
000B55r 3  D0 02                        bne @4
000B57r 3  D6 01                        dec 1,x
000B59r 3               @4:
000B59r 3  D6 00                        dec 0,x
000B5Br 3               
000B5Br 3                               ; Loop around and check again.
000B5Br 3  80 CE                        bra @compare_loop
000B5Dr 3               
000B5Dr 3               @str1_done:
000B5Dr 3                               ; String 1 is out of letters. Check string 2.
000B5Dr 3  B5 00                        lda 0,x
000B5Fr 3  15 01                        ora 1,x
000B61r 3  F0 08                        beq @equal      ; Both out of letters
000B63r 3               
000B63r 3                               ; Falls into less (str1 is out but str2 has more)
000B63r 3               @less:
000B63r 3                               ; Return -1
000B63r 3  A9 FF                        lda #$FF
000B65r 3  95 06                        sta 6,x
000B67r 3  95 07                        sta 7,x
000B69r 3  80 0C                        bra @done
000B6Br 3               @equal:
000B6Br 3                               ; Return 0
000B6Br 3  74 06                        stz 6,x
000B6Dr 3  74 07                        stz 7,x
000B6Fr 3  80 06                        bra @done
000B71r 3               @greater:
000B71r 3                               ; Return 1
000B71r 3  A9 01                        lda #1
000B73r 3  95 06                        sta 6,x
000B75r 3  74 07                        stz 7,x
000B77r 3                               ; Falls into @done
000B77r 3               @done:
000B77r 3                               ; Remove all but the result from the stack.
000B77r 3  8A                           txa
000B78r 3  18                           clc
000B79r 3  69 06                        adc #6
000B7Br 3  AA                           tax
000B7Cr 3               
000B7Cr 3  60           z_compare:      rts
000B7Dr 3               
000B7Dr 3               
000B7Dr 3               
000B7Dr 3               ; ## COMPILE_COMMA ( xt -- ) "Compile xt"
000B7Dr 3               ; ## "compile,"  auto  ANS core ext
000B7Dr 3                       ; """https://forth-standard.org/standard/core/COMPILEComma
000B7Dr 3                       ; Compile the given xt in the current word definition. It is an
000B7Dr 3                       ; error if we are not in the compile state. Because we are using
000B7Dr 3                       ; subroutine threading, we can't use , (COMMA) to compile new words
000B7Dr 3                       ; the traditional way. By default, native compiled is allowed, unless
000B7Dr 3                       ; there is a NN (Never Native) flag associated. If not, we use the
000B7Dr 3                       ; value NC_LIMIT (from definitions.tasm) to decide if the code
000B7Dr 3                       ; is too large to be natively coded: If the size is larger than
000B7Dr 3                       ; NC_LIMIT, we silently use subroutine coding. If the AN (Always
000B7Dr 3                       ; Native) flag is set, the word is always natively compiled.
000B7Dr 3                       ; """
000B7Dr 3               
000B7Dr 3               xt_compile_comma:
000B7Dr 3  20 rr rr                     jsr underflow_1
000B80r 3               
000B80r 3                               ; See if this is an Always Native (AN) word by checking the
000B80r 3                               ; AN flag. We need nt for this. First, save a copy of xt to
000B80r 3                               ; the Return Stack
000B80r 3  B5 01                        lda 1,x                 ; MSB
000B82r 3  48                           pha
000B83r 3  B5 00                        lda 0,x
000B85r 3  48                           pha                     ; LSB
000B86r 3               
000B86r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt -- nt )
000B89r 3               
000B89r 3                               ; See if this xt even has an nt.
000B89r 3  B5 00                        lda 0,x
000B8Br 3  15 01                        ora 1,x
000B8Dr 3  D0 03                        bne @check_nt
000B8Fr 3               
000B8Fr 3                               ; No nt in dictionary. Just compile as a JSR.
000B8Fr 3  4C rr rr                     jmp @compile_as_jump
000B92r 3               
000B92r 3               @check_nt:
000B92r 3                               ; put nt away for safe keeping
000B92r 3  B5 00                        lda 0,x
000B94r 3  85 rr                        sta tmptos
000B96r 3  B5 01                        lda 1,x
000B98r 3  85 rr                        sta tmptos+1
000B9Ar 3               
000B9Ar 3                               ; status byte is one further down
000B9Ar 3  F6 00                        inc 0,x
000B9Cr 3  D0 02                        bne @1
000B9Er 3  F6 01                        inc 1,x                 ; ( nt -- nt+1 )
000BA0r 3               @1:
000BA0r 3  A1 00                        lda (0,x)
000BA2r 3  85 rr                        sta tmp3                ; keep copy of status byte for NN
000BA4r 3  29 02                        and #AN                 ; mask all but Always Native (AN) bit
000BA6r 3  F0 0D                        beq @compile_check
000BA8r 3               
000BA8r 3                               ; We're natively compiling no matter what. Get length and
000BA8r 3                               ; compile in code. Get the original nt back
000BA8r 3  A5 rr                        lda tmptos
000BAAr 3  95 00                        sta 0,x
000BACr 3  A5 rr                        lda tmptos+1
000BAEr 3  95 01                        sta 1,x
000BB0r 3               
000BB0r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000BB3r 3               
000BB3r 3  80 27                        bra @compile_as_code
000BB5r 3               
000BB5r 3               @compile_check:
000BB5r 3                               ; See if Native Compile is even alowed by checking the NN
000BB5r 3                               ; flag
000BB5r 3  A5 rr                        lda tmp3
000BB7r 3  29 08                        and #NN
000BB9r 3  F0 03                        beq @check_size_limit
000BBBr 3               
000BBBr 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000BBEr 3               
000BBEr 3               @check_size_limit:
000BBEr 3                               ; Native compile is a legal option, but we need to see what
000BBEr 3                               ; limit the user set for size (in nc_limit)
000BBEr 3  A5 rr                        lda tmptos
000BC0r 3  95 00                        sta 0,x
000BC2r 3  A5 rr                        lda tmptos+1
000BC4r 3  95 01                        sta 1,x
000BC6r 3               
000BC6r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000BC9r 3               
000BC9r 3                               ; Check the wordsize MSB against the user-defined limit.
000BC9r 3  B5 01                        lda 1,x
000BCBr 3  C5 rr                        cmp nc_limit+1
000BCDr 3  90 0D                        bcc @compile_as_code    ; user-defined limit MSB
000BCFr 3  D0 08                        bne @jumpto_compile_as_jump
000BD1r 3               
000BD1r 3                               ; Check the wordsize LSB against the user-defined limit.
000BD1r 3  B5 00                        lda 0,x
000BD3r 3  C5 rr                        cmp nc_limit            ; user-defined limit LSB
000BD5r 3  90 05                        bcc @compile_as_code    ; Allow native compiling for less
000BD7r 3  F0 03                        beq @compile_as_code    ; than or equal to the limit.
000BD9r 3               
000BD9r 3               @jumpto_compile_as_jump:
000BD9r 3                               ; If the wordsize is greater than the user-defined
000BD9r 3                               ; limit, it will be compiled as a subroutine jump.
000BD9r 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000BDCr 3               
000BDCr 3               @compile_as_code:
000BDCr 3                               ; We arrive here with the length of the word's code TOS and
000BDCr 3                               ; xt on top of the Return Stack. MOVE will need ( xt cp u )
000BDCr 3                               ; on the data stack
000BDCr 3  CA                           dex
000BDDr 3  CA                           dex                     ; ( -- u ? )
000BDEr 3  CA                           dex
000BDFr 3  CA                           dex                     ; ( -- u ? ? )
000BE0r 3               
000BE0r 3  B5 04                        lda 4,x
000BE2r 3  95 00                        sta 0,x                 ; LSB of u
000BE4r 3  B5 05                        lda 5,x
000BE6r 3  95 01                        sta 1,x                 ; ( -- u ? u )
000BE8r 3               
000BE8r 3  68                           pla
000BE9r 3  95 04                        sta 4,x                 ; LSB of xt
000BEBr 3  68                           pla
000BECr 3  95 05                        sta 5,x                 ; ( -- xt ? u )
000BEEr 3               
000BEEr 3  A5 rr                        lda cp                  ; LSB of cp
000BF0r 3  95 02                        sta 2,x
000BF2r 3  A5 rr                        lda cp+1
000BF4r 3  95 03                        sta 3,x                 ; ( -- xt cp u )
000BF6r 3               
000BF6r 3                               ; --- SPECIAL CASE 1: PREVENT RETURN STACK THRASHINIG ---
000BF6r 3               
000BF6r 3                               ; Native compiling allows us to strip the stack antics off
000BF6r 3                               ; a number of words that use the Return Stack such as >R, R>,
000BF6r 3                               ; 2>R and 2R> (but not 2R@ in this version). We compare the
000BF6r 3                               ; xt with the contents of the table
000BF6r 3  A0 00                        ldy #0
000BF8r 3               
000BF8r 3               @strip_loop:
000BF8r 3  B9 rr rr                     lda @strip_table,y      ; LSB of first word
000BFBr 3  D5 04                        cmp 4,x                 ; LSB of xt
000BFDr 3  D0 07                        bne @next_entry
000BFFr 3               
000BFFr 3                               ; LSB is the same, test MSB
000BFFr 3  B9 rr rr                     lda @strip_table+1,y
000C02r 3  D5 05                        cmp 5,x
000C04r 3  F0 0C                        beq @found_entry
000C06r 3               
000C06r 3                               ; MSB is not equal. Pretend though that we've come from LSB
000C06r 3                               ; so we can use the next step for both cases
000C06r 3               @next_entry:
000C06r 3                               ; Not a word that needs stripping, so check next entry in table
000C06r 3                               ; Let's see if we're done with the table (marked by zero entry)
000C06r 3  B9 rr rr                     lda @strip_table,y      ; pointing to LSB
000C09r 3  19 rr rr                     ora @strip_table+1,y    ; get MSB
000C0Cr 3  F0 22                        beq @underflow_strip    ; table done, let's get out of here
000C0Er 3               
000C0Er 3  C8                           iny
000C0Fr 3  C8                           iny
000C10r 3  80 E6                        bra @strip_loop
000C12r 3               @found_entry:
000C12r 3                               ; This word is one of the ones that needs to have its size
000C12r 3                               ; adjusted during native compile. We find the values in the
000C12r 3                               ; next table with the same index, which is Y. However, Y is
000C12r 3                               ; pointing to the MSB, so we need to go back to the LSB and
000C12r 3                               ; halve the index before we can use it.
000C12r 3  98                           tya
000C13r 3  4A                           lsr
000C14r 3  A8                           tay
000C15r 3               
000C15r 3                               ; Get the adjustment out of the size table. We were clever
000C15r 3                               ; enough to make sure the cut on both ends of the code is
000C15r 3                               ; is the same size.
000C15r 3  B9 rr rr                     lda @strip_size,y
000C18r 3  85 rr                        sta tmptos              ; save a copy
000C1Ar 3               
000C1Ar 3                               ; Adjust xt: Start later
000C1Ar 3  18                           clc
000C1Br 3  75 04                        adc 4,x
000C1Dr 3  95 04                        sta 4,x
000C1Fr 3  90 02                        bcc @2
000C21r 3  F6 05                        inc 5,x                 ; we just care about the carry
000C23r 3               @2:
000C23r 3               
000C23r 3                               ; Adjust u: Quit earlier. Since we cut off the top and the
000C23r 3                               ; bottom of the code, we have to double the value
000C23r 3  06 rr                        asl tmptos
000C25r 3               
000C25r 3  38                           sec
000C26r 3  B5 00                        lda 0,x
000C28r 3  E5 rr                        sbc tmptos
000C2Ar 3  95 00                        sta 0,x
000C2Cr 3  B0 02                        bcs @3
000C2Er 3  D6 01                        dec 1,x                 ; we just care about the borrow
000C30r 3               @3:
000C30r 3                               ; drop through to underflow check stripping
000C30r 3               
000C30r 3               @underflow_strip:
000C30r 3                               ; --- SPECIAL CASE 2: REMOVE UNDERFLOW CHECKING ---
000C30r 3               
000C30r 3                               ; The user can choose to remove the unterflow testing in those
000C30r 3                               ; words that have the UF flag. This shortens the word by
000C30r 3                               ; 3 bytes if there is no underflow.
000C30r 3               
000C30r 3                               ; See if the user wants underflow stripping turned on
000C30r 3  A5 rr                        lda uf_strip
000C32r 3  05 rr                        ora uf_strip+1
000C34r 3  F0 1C                        beq @specials_done
000C36r 3               
000C36r 3                               ; See if this word even contains underflow checking
000C36r 3  A5 rr                        lda tmp3
000C38r 3  29 10                        and #UF
000C3Ar 3  F0 16                        beq @specials_done
000C3Cr 3               
000C3Cr 3                               ; If we arrived here, underflow has to go. It's always 3 bytes
000C3Cr 3                               ; long. Note hat PICK is a special case.
000C3Cr 3               
000C3Cr 3                               ; Adjust xt: Start later
000C3Cr 3  18                           clc
000C3Dr 3  B5 04                        lda 4,x
000C3Fr 3  69 03                        adc #3
000C41r 3  95 04                        sta 4,x
000C43r 3  90 02                        bcc @4
000C45r 3  F6 05                        inc 5,x                  ; we just care about the carry
000C47r 3               @4:
000C47r 3                               ; Adjust u: End earlier
000C47r 3  38                           sec
000C48r 3  B5 00                        lda 0,x
000C4Ar 3  E9 03                        sbc #3
000C4Cr 3  95 00                        sta 0,x
000C4Er 3  B0 02                        bcs @5
000C50r 3  D6 01                        dec 1,x                  ; we just care about the borrow
000C52r 3               @5:
000C52r 3               
000C52r 3                               ; --- END OF SPECIAL CASES ---
000C52r 3               @specials_done:
000C52r 3                               ; Store size of area to be copied for calculation of
000C52r 3                               ; new CP. We have to do this after all of the special cases
000C52r 3                               ; because they might change the size
000C52r 3  B5 01                        lda 1,x                 ; MSB
000C54r 3  48                           pha
000C55r 3  B5 00                        lda 0,x                 ; LSB
000C57r 3  48                           pha
000C58r 3               
000C58r 3                               ; Enough of this, let's move those bytes already! We have
000C58r 3                               ; ( xt cp u ) on the stack at this point
000C58r 3  20 rr rr                     jsr xt_move
000C5Br 3               
000C5Br 3                               ; Update CP
000C5Br 3  18                           clc
000C5Cr 3  68                           pla                     ; LSB
000C5Dr 3  65 rr                        adc cp
000C5Fr 3  85 rr                        sta cp
000C61r 3               
000C61r 3  68                           pla                     ; MSB
000C62r 3  65 rr                        adc cp+1
000C64r 3  85 rr                        sta cp+1
000C66r 3               
000C66r 3  80 2C                        bra @done
000C68r 3               
000C68r 3               @strip_table:
000C68r 3                              ; List of words we strip the Return Stack antics from
000C68r 3                              ; during native compile, zero terminated. The index here
000C68r 3                              ; must be the same as for the sizes
000C68r 3  rr rr rr rr                  .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
000C6Cr 3  rr rr        
000C6Er 3  rr rr rr rr                  .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
000C72r 3  00 00        
000C74r 3               
000C74r 3               @strip_size:
000C74r 3                               ; List of bytes to be stripped from the words that get their
000C74r 3                               ; Return Stack antics removed during native compile. Index must
000C74r 3                               ; be the same as for the xts. Zero terminated.
000C74r 3  04 04 04 06                  .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
000C78r 3  06 00        
000C7Ar 3               
000C7Ar 3               @compile_as_jump:
000C7Ar 3                               ; Compile xt as a subroutine jump
000C7Ar 3  A9 20                        lda #$20
000C7Cr 3  92 rr                        sta (cp)
000C7Er 3               
000C7Er 3  A0 01                        ldy #1
000C80r 3  68                           pla             ; LSB
000C81r 3  91 rr                        sta (cp),y
000C83r 3  C8                           iny
000C84r 3  68                           pla             ; MSB
000C85r 3  91 rr                        sta (cp),y
000C87r 3               
000C87r 3                               ; allot space we just used
000C87r 3  A9 03                        lda #3
000C89r 3  18                           clc
000C8Ar 3  65 rr                        adc cp
000C8Cr 3  85 rr                        sta cp
000C8Er 3  90 02                        bcc @6
000C90r 3  E6 rr                        inc cp+1
000C92r 3               @6:
000C92r 3  E8                           inx             ; drop xt
000C93r 3  E8                           inx
000C94r 3               @done:
000C94r 3               z_compile_comma:
000C94r 3  60                           rts
000C95r 3               
000C95r 3               
000C95r 3               
000C95r 3               ; ## COMPILE_ONLY ( -- ) "Mark most recent word as COMPILE-ONLY"
000C95r 3               ; ## "compile-only"  tested  Tali Forth
000C95r 3                       ; """Set the Compile Only flag (CO) of the most recently defined
000C95r 3                       ; word.
000C95r 3                       ;
000C95r 3                       ; The alternative way to do this is to define a word
000C95r 3                       ; ?COMPILE that makes sure  we're in compile mode
000C95r 3                       ; """
000C95r 3               
000C95r 3               xt_compile_only:
000C95r 3  20 rr rr                     jsr current_to_dp
000C98r 3  A0 01                        ldy #1          ; offset for status byte
000C9Ar 3  B1 rr                        lda (dp),y
000C9Cr 3  09 01                        ora #CO        ; make sure bit 7 is set
000C9Er 3  91 rr                        sta (dp),y
000CA0r 3               
000CA0r 3  60           z_compile_only: rts
000CA1r 3               
000CA1r 3               
000CA1r 3               
000CA1r 3               ; ## CONSTANT ( n "name" -- ) "Define a constant"
000CA1r 3               ; ## "constant"  auto  ANS core
000CA1r 3                       ; """https://forth-standard.org/standard/core/CONSTANT
000CA1r 3                       ;
000CA1r 3                       ; Forth equivalent is  CREATE , DOES> @  but we do
000CA1r 3                       ; more in assembler and let CREATE do the heavy lifting.
000CA1r 3                       ; See http://www.bradrodriguez.com/papers/moving3.htm for
000CA1r 3                       ; a primer on how this works in various Forths. This is the
000CA1r 3                       ; same code as VALUE in our case.
000CA1r 3                       ; """
000CA1r 3               xt_value:
000CA1r 3               xt_constant:
000CA1r 3  20 rr rr                     jsr underflow_1
000CA4r 3               
000CA4r 3  20 rr rr                     jsr xt_create
000CA7r 3               
000CA7r 3                           	; CREATE by default installs a subroutine jump to DOVAR,
000CA7r 3                               ; but we want DOCONST for constants. Go back two bytes and
000CA7r 3                               ; replace the subroutine jump target
000CA7r 3  38                           sec
000CA8r 3  A5 rr                        lda cp
000CAAr 3  E9 02                        sbc #2
000CACr 3  85 rr                        sta tmp1
000CAEr 3  A5 rr                        lda cp+1
000CB0r 3  E9 00                        sbc #0
000CB2r 3  85 rr                        sta tmp1+1
000CB4r 3               
000CB4r 3  A9 rr                        lda #<doconst           ; LSB of DOCONST
000CB6r 3  92 rr                        sta (tmp1)
000CB8r 3  A0 01                        ldy #1
000CBAr 3  A9 rr                        lda #>doconst           ; MSB of DOCONST
000CBCr 3  91 rr                        sta (tmp1),y
000CBEr 3               
000CBEr 3                               ; Now we save the constant number itself in the next cell
000CBEr 3  20 rr rr                     jsr xt_comma            ; drop through to adjust_z
000CC1r 3               
000CC1r 3               adjust_z:
000CC1r 3                               ; Now the length of the complete word (z_word) has increased by
000CC1r 3                               ; two. We need to update that number or else words such as SEE
000CC1r 3                               ; will ignore the PFA. We use this same routine for VARIABLE,
000CC1r 3                               ; VALUE and DEFER
000CC1r 3  20 rr rr                     jsr xt_latestnt         ; gives us ( -- nt )
000CC4r 3               
000CC4r 3                               ; z_word is six bytes further down
000CC4r 3  B5 00                        lda 0,x
000CC6r 3  85 rr                        sta tmp1
000CC8r 3  B5 01                        lda 1,x
000CCAr 3  85 rr                        sta tmp1+1
000CCCr 3               
000CCCr 3  A0 06                        ldy #6
000CCEr 3  B1 rr                        lda (tmp1),y
000CD0r 3  18                           clc
000CD1r 3  69 02                        adc #2
000CD3r 3  91 rr                        sta (tmp1),y
000CD5r 3  C8                           iny
000CD6r 3  B1 rr                        lda (tmp1),y
000CD8r 3  69 00                        adc #0                  ; only need carry
000CDAr 3  91 rr                        sta (tmp1),y
000CDCr 3               
000CDCr 3  E8                           inx
000CDDr 3  E8                           inx
000CDEr 3               
000CDEr 3               z_value:
000CDEr 3  60           z_constant:     rts
000CDFr 3               
000CDFr 3               
000CDFr 3               ; ## COUNT ( c-addr -- addr u ) "Convert character string to normal format"
000CDFr 3               ; ## "count"  auto  ANS core
000CDFr 3                       ; """https://forth-standard.org/standard/core/COUNT
000CDFr 3                       ; Convert old-style character string to address-length pair. Note
000CDFr 3                       ; that the length of the string c-addr is stored in character length
000CDFr 3                       ; (8 bit), not cell length (16 bit). This is rarely used these days,
000CDFr 3                       ; though COUNT can also be used to step through a string character by
000CDFr 3                       ; character.
000CDFr 3                       ; """
000CDFr 3               xt_count:
000CDFr 3  20 rr rr                     jsr underflow_1
000CE2r 3               
000CE2r 3  A1 00                        lda (0,x)       ; Get number of characters (255 max)
000CE4r 3  A8                           tay
000CE5r 3               
000CE5r 3                               ; move start address up by one
000CE5r 3  F6 00                        inc 0,x         ; LSB
000CE7r 3  D0 02                        bne @1
000CE9r 3  F6 01                        inc 1,x         ; MSB
000CEBr 3               
000CEBr 3                               ; save number of characters to stack
000CEBr 3               @1:
000CEBr 3  98                           tya
000CECr 3  CA                           dex
000CEDr 3  CA                           dex
000CEEr 3  95 00                        sta 0,x         ; LSB
000CF0r 3  74 01                        stz 1,x         ; MSB, always zero
000CF2r 3               
000CF2r 3  60           z_count:        rts
000CF3r 3               
000CF3r 3               
000CF3r 3               ; ## CR ( -- ) "Print a line feed"
000CF3r 3               ; ## "cr"  auto  ANS core
000CF3r 3                       ; """https://forth-standard.org/standard/core/CR"""
000CF3r 3               xt_cr:
000CF3r 3  A9 0A                        lda #AscLF
000CF5r 3  20 rr rr                     jsr emit_a
000CF8r 3  60           z_cr:           rts
000CF9r 3               
000CF9r 3               
000CF9r 3               ; ## CREATE ( "name" -- ) "Create Dictionary entry for 'name'"
000CF9r 3               ; ## "create"  auto  ANS core
000CF9r 3                       ; """https://forth-standard.org/standard/core/CREATE
000CF9r 3                       ;
000CF9r 3                       ; See the drawing in headers.asm for details on the header
000CF9r 3                       ; """
000CF9r 3               
000CF9r 3               xt_create:
000CF9r 3                               ; get string
000CF9r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
000CFCr 3               
000CFCr 3                               ; if we were given an empty string, we complain and quit
000CFCr 3  B5 00                        lda 0,x
000CFEr 3  15 01                        ora 1,x
000D00r 3  D0 05                        bne @got_name
000D02r 3               
000D02r 3  A9 05                        lda #err_noname
000D04r 3  4C rr rr                     jmp error
000D07r 3               
000D07r 3               @got_name:
000D07r 3                               ; Enforce maximal length of string by overwriting the MSB of
000D07r 3                               ; the length. There is a possible error here: If the string
000D07r 3                               ; is exactly 255 chars long, then a lot of the following
000D07r 3                               ; additions will fail because of wrapping
000D07r 3  74 01                        stz 1,x
000D09r 3               
000D09r 3                               ; Check to see if this name already exists.
000D09r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u )
000D0Cr 3  20 rr rr                     jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
000D0Fr 3               
000D0Fr 3  B5 00                        lda 0,x
000D11r 3  15 01                        ora 1,x
000D13r 3  F0 1E                        beq @new_name           ; We haven't seen this one before.
000D15r 3               
000D15r 3                               ; This name already exists.  See if we are supposed to print
000D15r 3                               ; the message for it.
000D15r 3  E8                           inx                     ; Drop flag (nt) from find-name.
000D16r 3  E8                           inx
000D17r 3               
000D17r 3                               ; Check bit 7
000D17r 3  24 rr                        bit status
000D19r 3  10 08                        bpl @redefined_name     ; Bit 7 is zero, so print the message.
000D1Br 3               
000D1Br 3                               ; We aren't supposed to print the redefined message ourselves,
000D1Br 3                               ; but we should indicate that it is redefined (for ; to print
000D1Br 3                               ; later).
000D1Br 3  A9 80                        lda #$80                ; Set bit 7 to indicate dup
000D1Dr 3  05 rr                        ora status
000D1Fr 3  85 rr                        sta status
000D21r 3  80 18                        bra @process_name
000D23r 3               
000D23r 3               @redefined_name:
000D23r 3                               ; Print the message that the name is redefined.
000D23r 3  A9 02                        lda #str_redefined
000D25r 3  20 rr rr                     jsr print_string_no_lf
000D28r 3               
000D28r 3  20 rr rr                     jsr xt_two_dup           ; ( addr u addr u )
000D2Br 3  20 rr rr                     jsr xt_type
000D2Er 3  20 rr rr                     jsr xt_space
000D31r 3               
000D31r 3  80 08                        bra @process_name
000D33r 3               
000D33r 3               @new_name:
000D33r 3  E8                           inx                     ; Drop flag (0) from find-name.
000D34r 3  E8                           inx
000D35r 3  A9 7F                        lda #$7F                ; Clear bit 0 of status to indicate new word.
000D37r 3  25 rr                        and status
000D39r 3  85 rr                        sta status
000D3Br 3               
000D3Br 3               @process_name:
000D3Br 3  B5 00                        lda 0,x
000D3Dr 3  85 rr                        sta tmp2                ; store length of string in tmp2
000D3Fr 3               
000D3Fr 3                               ; remember the first free byte of memory as the start of
000D3Fr 3                               ; the new word
000D3Fr 3  A5 rr                        lda cp
000D41r 3  85 rr                        sta tmp1
000D43r 3  A5 rr                        lda cp+1
000D45r 3  85 rr                        sta tmp1+1
000D47r 3               
000D47r 3                               ; We need 8 bytes plus the length of the string for our new header.
000D47r 3                               ; This is also the offset for the start of the code field (the
000D47r 3                               ; xt_ label) so we need to remember it. Otherwise, we could
000D47r 3                               ; just allot the space afterwards
000D47r 3  B5 00                        lda 0,x
000D49r 3  18                           clc
000D4Ar 3  69 08                        adc #8
000D4Cr 3  85 rr                        sta tmp3                ; total header length
000D4Er 3               
000D4Er 3                               ; We need three more bytes for for the hardcoded code field
000D4Er 3                               ; area (CFA), the "payload" of the word which by default will
000D4Er 3                               ; be a subroutine jump to DOVAR
000D4Er 3  18                           clc
000D4Fr 3  69 03                        adc #3
000D51r 3               
000D51r 3                               ; We overwrite the length of the string returned by PARSE-NAME
000D51r 3                               ; and then call ALLOT
000D51r 3  95 00                        sta 0,x
000D53r 3  74 01                        stz 1,x         ; max header size is 255 chars
000D55r 3  20 rr rr                     jsr xt_allot    ; ( addr )
000D58r 3               
000D58r 3                               ; Get the CURRENT dictionary pointer.
000D58r 3  20 rr rr                     jsr current_to_dp
000D5Br 3               
000D5Br 3                               ; Now we walk through the header with Y as the index, adding
000D5Br 3                               ; information byte-by-byte
000D5Br 3  A0 00                        ldy #0
000D5Dr 3               
000D5Dr 3                               ; HEADER BYTE 0: Length of string
000D5Dr 3  A5 rr                        lda tmp2
000D5Fr 3  91 rr                        sta (tmp1),y
000D61r 3               
000D61r 3                               ; HEADER BYTE 1: Status byte. By default, we set all new words
000D61r 3                               ; to "never native", user will have to decide if they should
000D61r 3                               ; be inlined
000D61r 3  A9 08                        lda #NN
000D63r 3               
000D63r 3                               ; Also, words defined by CREATE are marked in the header has
000D63r 3                               ; having a Code Field Area (CFA), which is a bit tricky for
000D63r 3                               ; Subroutine Threaded Code (STC). We do this so >BODY works
000D63r 3                               ; correctly with DOES> and CREATE. See the discussion at
000D63r 3                               ; http://forum.6502.org/viewtopic.php?f=9&t=5182 for details
000D63r 3  09 20                        ora #HC
000D65r 3  C8                           iny
000D66r 3  91 rr                        sta (tmp1),y
000D68r 3  C8                           iny
000D69r 3               
000D69r 3                               ; HEADER BYTE 2,3: Next header. This is the current last word
000D69r 3                               ; in the Dictionary
000D69r 3  A5 rr                        lda dp
000D6Br 3  91 rr                        sta (tmp1),y
000D6Dr 3  C8                           iny
000D6Er 3  A5 rr                        lda dp+1
000D70r 3  91 rr                        sta (tmp1),y
000D72r 3  C8                           iny
000D73r 3               
000D73r 3                               ; Interlude: Make old CP new DP (new start of Dictionary)
000D73r 3  A5 rr                        lda tmp1+1
000D75r 3  85 rr                        sta dp+1
000D77r 3  A5 rr                        lda tmp1
000D79r 3  85 rr                        sta dp
000D7Br 3               
000D7Br 3                               ; HEADER BYTE 4,5: Start of the code field ("xt_" of this word).
000D7Br 3                               ; This begins after the header so we take the length of the
000D7Br 3                               ; header, which we cleverly saved in tmp3, and use it as an
000D7Br 3                               ; offset to the address of the start of the word. We come here
000D7Br 3                               ; with tmp1 in A
000D7Br 3  18                           clc
000D7Cr 3  65 rr                        adc tmp3        ; add total header length
000D7Er 3  91 rr                        sta (tmp1),y
000D80r 3  48                           pha             ; we need this in the next step
000D81r 3  C8                           iny
000D82r 3               
000D82r 3  A5 rr                        lda tmp1+1
000D84r 3  69 00                        adc #0          ; only need the carry
000D86r 3  91 rr                        sta (tmp1),y
000D88r 3  C8                           iny
000D89r 3               
000D89r 3                               ; HEADER BYTE 6,7: End of code ("z_" of this word). By default,
000D89r 3                               ; we execute a jump to the DOVAR routine, so we need to move three
000D89r 3                               ; bytes down, and then one more byte so that the z_ label points
000D89r 3                               ; to the (still fictional) RTS instruction for correct compilation
000D89r 3  68                           pla             ; LSB of "z_" address
000D8Ar 3  18                           clc
000D8Br 3  69 03                        adc #3
000D8Dr 3  91 rr                        sta (tmp1),y
000D8Fr 3               
000D8Fr 3  88                           dey             ; get the MSB of xt back
000D90r 3  B1 rr                        lda (tmp1),y
000D92r 3  69 00                        adc #0          ; only need the carry
000D94r 3  C8                           iny
000D95r 3  C8                           iny
000D96r 3  91 rr                        sta (tmp1),y
000D98r 3  C8                           iny
000D99r 3               
000D99r 3                               ; HEADER BYTE 8: Start of name string. The address is TOS, the
000D99r 3                               ; length in tmp2. We subtract 8 from the address so we can
000D99r 3                               ; use the same loop index, which is already 8 byte ahead at
000D99r 3                               ; this point
000D99r 3  B5 00                        lda 0,x
000D9Br 3  38                           sec
000D9Cr 3  E9 08                        sbc #8
000D9Er 3  85 rr                        sta tmptos
000DA0r 3               
000DA0r 3  B5 01                        lda 1,x
000DA2r 3  E9 00                        sbc #0          ; only need carry
000DA4r 3  85 rr                        sta tmptos+1
000DA6r 3               
000DA6r 3               @name_loop:
000DA6r 3  B1 rr                        lda (tmptos),y
000DA8r 3               
000DA8r 3                               ; Make sure it goes into the dictionary in lower case.
000DA8r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
000DAAr 3  B0 07                        bcs @store_name
000DACr 3  C9 41                        cmp #$41        ; ASCII 'A'
000DAEr 3  90 03                        bcc @store_name
000DB0r 3               
000DB0r 3                               ; An uppercase letter has been located. Make it
000DB0r 3                               ; lowercase.
000DB0r 3  18                           clc
000DB1r 3  69 20                        adc #$20
000DB3r 3               
000DB3r 3                               ; Fall into @store_name.
000DB3r 3               
000DB3r 3               @store_name:
000DB3r 3  91 rr                        sta (tmp1),y
000DB5r 3  C8                           iny
000DB6r 3  C6 rr                        dec tmp2
000DB8r 3  D0 EC                        bne @name_loop
000DBAr 3               
000DBAr 3                               ; After thename string comes the code field, starting at the
000DBAr 3                               ; current xt of this word, which is initially a jump to the
000DBAr 3                               ; subroutine to DOVAR. We code this jump by hand
000DBAr 3  A9 20                        lda #$20        ; opcode of JSR
000DBCr 3  91 rr                        sta (tmp1),y
000DBEr 3  C8                           iny
000DBFr 3  A9 rr                        lda #<dovar
000DC1r 3  91 rr                        sta (tmp1),y
000DC3r 3  C8                           iny
000DC4r 3  A9 rr                        lda #>dovar
000DC6r 3  91 rr                        sta (tmp1),y
000DC8r 3               
000DC8r 3                               ; Update the CURRENT wordlist with the new DP.
000DC8r 3                               ; We do this down here because this routine uses Y.
000DC8r 3  20 rr rr                     jsr dp_to_current
000DCBr 3               
000DCBr 3                               ; And we're done. Restore stack
000DCBr 3  E8                           inx
000DCCr 3  E8                           inx
000DCDr 3               
000DCDr 3  60           z_create:       rts
000DCEr 3               
000DCEr 3               
000DCEr 3               
000DCEr 3               ; ## D_MINUS ( d d -- d ) "Subtract two double-celled numbers"
000DCEr 3               ; ## "d-"  auto  ANS double
000DCEr 3                       ; """https://forth-standard.org/standard/double/DMinus"""
000DCEr 3               
000DCEr 3               xt_d_minus:
000DCEr 3  20 rr rr                     jsr underflow_4 ; two double numbers
000DD1r 3               
000DD1r 3  38                           sec
000DD2r 3               
000DD2r 3  B5 06                        lda 6,x         ; LSB of lower word
000DD4r 3  F5 02                        sbc 2,x
000DD6r 3  95 06                        sta 6,x
000DD8r 3               
000DD8r 3  B5 07                        lda 7,x         ; MSB of lower word
000DDAr 3  F5 03                        sbc 3,x
000DDCr 3  95 07                        sta 7,x
000DDEr 3               
000DDEr 3  B5 04                        lda 4,x         ; LSB of upper word
000DE0r 3  F5 00                        sbc 0,x
000DE2r 3  95 04                        sta 4,x
000DE4r 3               
000DE4r 3  B5 05                        lda 5,x         ; MSB of upper word
000DE6r 3  F5 01                        sbc 1,x
000DE8r 3  95 05                        sta 5,x
000DEAr 3               
000DEAr 3  E8                           inx
000DEBr 3  E8                           inx
000DECr 3  E8                           inx
000DEDr 3  E8                           inx
000DEEr 3               
000DEEr 3  60           z_d_minus:      rts
000DEFr 3               
000DEFr 3               
000DEFr 3               
000DEFr 3               ; ## D_PLUS ( d d -- d ) "Add two double-celled numbers"
000DEFr 3               ; ## "d+"  auto  ANS double
000DEFr 3                       ; """https://forth-standard.org/standard/double/DPlus"""
000DEFr 3               
000DEFr 3               xt_d_plus:
000DEFr 3  20 rr rr                     jsr underflow_4 ; two double numbers
000DF2r 3               
000DF2r 3  18                           clc
000DF3r 3  B5 02                        lda 2,x         ; LSB of lower word
000DF5r 3  75 06                        adc 6,x
000DF7r 3  95 06                        sta 6,x
000DF9r 3               
000DF9r 3  B5 03                        lda 3,x         ; MSB of lower word
000DFBr 3  75 07                        adc 7,x
000DFDr 3  95 07                        sta 7,x
000DFFr 3               
000DFFr 3  B5 00                        lda 0,x         ; LSB of upper word
000E01r 3  75 04                        adc 4,x
000E03r 3  95 04                        sta 4,x
000E05r 3               
000E05r 3  B5 01                        lda 1,x         ; MSB of upper word
000E07r 3  75 05                        adc 5,x
000E09r 3  95 05                        sta 5,x
000E0Br 3               
000E0Br 3  E8                           inx
000E0Cr 3  E8                           inx
000E0Dr 3  E8                           inx
000E0Er 3  E8                           inx
000E0Fr 3               
000E0Fr 3  60           z_d_plus:       rts
000E10r 3               
000E10r 3               
000E10r 3               
000E10r 3               ; ## D_TO_S ( d -- n ) "Convert a double number to single"
000E10r 3               ; ## "d>s"  auto  ANS double
000E10r 3                       ; """https://forth-standard.org/standard/double/DtoS
000E10r 3                       ; Though this is basically just DROP, we keep it
000E10r 3                       ; separate so we can test for underflow
000E10r 3                       ; """
000E10r 3               
000E10r 3               xt_d_to_s:
000E10r 3  20 rr rr                     jsr underflow_2
000E13r 3               
000E13r 3  E8                           inx
000E14r 3  E8                           inx
000E15r 3               
000E15r 3  60           z_d_to_s:       rts
000E16r 3               
000E16r 3               
000E16r 3               
000E16r 3               ; ## DABS ( d -- d ) "Return the absolute value of a double"
000E16r 3               ; ## "dabs"  auto  ANS double
000E16r 3                       ; """https://forth-standard.org/standard/double/DABS"""
000E16r 3               
000E16r 3               xt_dabs:
000E16r 3  20 rr rr                     jsr underflow_2 ; double number
000E19r 3               
000E19r 3  B5 01                        lda 1,x         ; MSB of high cell
000E1Br 3  10 17                        bpl @done       ; positive, we get off light
000E1Dr 3               
000E1Dr 3                               ; negative, calculate 0 - d
000E1Dr 3  A0 00                        ldy #0
000E1Fr 3  38                           sec
000E20r 3               
000E20r 3  98                           tya
000E21r 3  F5 02                        sbc 2,x         ; LSB of low cell
000E23r 3  95 02                        sta 2,x
000E25r 3               
000E25r 3  98                           tya
000E26r 3  F5 03                        sbc 3,x         ; MSB of low cell
000E28r 3  95 03                        sta 3,x
000E2Ar 3               
000E2Ar 3  98                           tya
000E2Br 3  F5 00                        sbc 0,x         ; LSB of high cell
000E2Dr 3  95 00                        sta 0,x
000E2Fr 3               
000E2Fr 3  98                           tya
000E30r 3  F5 01                        sbc 1,x         ; MSB of high cell
000E32r 3  95 01                        sta 1,x
000E34r 3               @done:
000E34r 3  60           z_dabs:         rts
000E35r 3               
000E35r 3               
000E35r 3               
000E35r 3               ; ## DECIMAL ( -- ) "Change radix base to decimal"
000E35r 3               ; ## "decimal"  auto  ANS core
000E35r 3                       ; """https://forth-standard.org/standard/core/DECIMAL"""
000E35r 3               xt_decimal:
000E35r 3  A9 0A                        lda #10
000E37r 3  85 rr                        sta base
000E39r 3  64 rr                        stz base+1              ; paranoid
000E3Br 3               
000E3Br 3  60           z_decimal:      rts
000E3Cr 3               
000E3Cr 3               
000E3Cr 3               ; ## DEFER ( "name" -- ) "Create a placeholder for words by name"
000E3Cr 3               ; ## "defer"  auto  ANS core ext
000E3Cr 3                       ; """https://forth-standard.org/standard/core/DEFER
000E3Cr 3                       ; Reserve an name that can be linked to various xt by IS.
000E3Cr 3                       ;
000E3Cr 3                       ; The ANS reference implementation is
000E3Cr 3                       ;       CREATE ['] ABORT , DOES> @ EXECUTE ;
000E3Cr 3                       ; But we use this routine as a low-level word so things go faster
000E3Cr 3               
000E3Cr 3               xt_defer:
000E3Cr 3  20 rr rr                     jsr xt_create
000E3Fr 3               
000E3Fr 3                               ; CREATE by default installs a subroutine jump to DOVAR,
000E3Fr 3                               ; but we actually want DODEFER this time. Go back two
000E3Fr 3                               ; bytes and repace the subroutine jump target
000E3Fr 3  A5 rr                        lda cp          ; LSB
000E41r 3  38                           sec
000E42r 3  E9 02                        sbc #2
000E44r 3  85 rr                        sta tmp1
000E46r 3               
000E46r 3  A5 rr                        lda cp+1        ; MSB
000E48r 3  E9 00                        sbc #0          ; we only care about the borrow
000E4Ar 3  85 rr                        sta tmp1+1
000E4Cr 3               
000E4Cr 3                               ; Save the target address
000E4Cr 3  A0 00                        ldy #0
000E4Er 3  A9 rr                        lda #<dodefer   ; LSB
000E50r 3  91 rr                        sta (tmp1),y
000E52r 3  C8                           iny
000E53r 3  A9 rr                        lda #>dodefer   ; MSB
000E55r 3  91 rr                        sta (tmp1),y
000E57r 3               
000E57r 3               
000E57r 3                               ; DODEFER executes the next address it finds after
000E57r 3                               ; its call. As default, we include the error
000E57r 3                               ; "Defer not defined"
000E57r 3  A9 rr                        lda #<defer_error
000E59r 3  92 rr                        sta (cp)
000E5Br 3  E6 rr                        inc cp
000E5Dr 3  D0 02                        bne @1
000E5Fr 3  E6 rr                        inc cp+1
000E61r 3               @1:
000E61r 3  A9 rr                        lda #>defer_error
000E63r 3  92 rr                        sta (cp)
000E65r 3  E6 rr                        inc cp
000E67r 3  D0 02                        bne @2
000E69r 3  E6 rr                        inc cp+1
000E6Br 3               @2:
000E6Br 3  20 rr rr                     jsr adjust_z    ; adjust header to correct length
000E6Er 3               
000E6Er 3  60           z_defer:        rts
000E6Fr 3               
000E6Fr 3               
000E6Fr 3               
000E6Fr 3               ; ## DEFER_FETCH ( xt1 -- xt2 ) "Get the current XT for a deferred word"
000E6Fr 3               ; ## "defer@"  auto  ANS core ext
000E6Fr 3                       ; """http://forth-standard.org/standard/core/DEFERFetch"""
000E6Fr 3               
000E6Fr 3               xt_defer_fetch:
000E6Fr 3                               ; No underflow checking as >BODY does it.
000E6Fr 3  20 rr rr                     jsr xt_to_body
000E72r 3  20 rr rr                     jsr xt_fetch
000E75r 3  60           z_defer_fetch:  rts
000E76r 3               
000E76r 3               
000E76r 3               
000E76r 3               ; ## DEFER_STORE ( xt2 x1 -- ) "Set xt1 to execute xt2"
000E76r 3               ; ## "defer!"  auto  ANS core ext
000E76r 3                       ; """http://forth-standard.org/standard/core/DEFERStore"""
000E76r 3               
000E76r 3               xt_defer_store:
000E76r 3                               ; No underflow checking as >BODY and ! do it.
000E76r 3  20 rr rr                     jsr xt_to_body
000E79r 3  20 rr rr                     jsr xt_store
000E7Cr 3  60           z_defer_store:  rts
000E7Dr 3               
000E7Dr 3               
000E7Dr 3               
000E7Dr 3               ; ## DEFINITIONS ( -- ) "Make first wordlist in search order the current wordlist"
000E7Dr 3               ; ## "definitions" auto ANS search
000E7Dr 3               xt_definitions:
000E7Dr 3  A0 1F                        ldy #search_order_offset    ; Transfer byte variable
000E7Fr 3  B1 rr                        lda (up),y                  ; SEARCH_ORDER[0] to
000E81r 3  A0 04                        ldy #current_offset         ; byte variable CURRENT.
000E83r 3  91 rr                        sta (up),y
000E85r 3  60           z_definitions:  rts
000E86r 3               
000E86r 3               
000E86r 3               ; ## DEPTH ( -- u ) "Get number of cells (not bytes) used by stack"
000E86r 3               ; ## "depth"  auto  ANS core
000E86r 3                       ; """https://forth-standard.org/standard/core/DEPTH"""
000E86r 3               xt_depth:
000E86r 3  A9 rr                        lda #dsp0
000E88r 3  86 rr                        stx tmpdsp
000E8Ar 3  38                           sec
000E8Br 3  E5 rr                        sbc tmpdsp
000E8Dr 3               
000E8Dr 3                               ; divide by two because each cell is two bytes
000E8Dr 3  4A                           lsr
000E8Er 3               
000E8Er 3  CA                           dex
000E8Fr 3  CA                           dex
000E90r 3  95 00                        sta 0,x
000E92r 3  74 01                        stz 1,x
000E94r 3               
000E94r 3  60           z_depth:        rts
000E95r 3               
000E95r 3               
000E95r 3               ; ## DIGIT_QUESTION ( char -- u f | char f ) "Convert ASCII char to number"
000E95r 3               ; ## "digit?"  auto  Tali Forth
000E95r 3                       ; """Inspired by the pForth instruction DIGIT, see
000E95r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
000E95r 3                       ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to
000E95r 3                       ; pForth, we get the base (radix) ourselves instead of having the
000E95r 3                       ; user provide it. There is no standard name for this routine, which
000E95r 3                       ; itself is not ANS; we use DIGIT? following pForth and Gforth.
000E95r 3                       ; """
000E95r 3               
000E95r 3               xt_digit_question:
000E95r 3  20 rr rr                     jsr underflow_1
000E98r 3               
000E98r 3                               ; one way or another, we're going to need room for the
000E98r 3                               ; flag on the stack
000E98r 3  CA                           dex
000E99r 3  CA                           dex
000E9Ar 3  74 00                        stz 0,x                 ; default flag is failure
000E9Cr 3  74 01                        stz 1,x
000E9Er 3  74 03                        stz 3,x                 ; paranoid
000EA0r 3               
000EA0r 3                               ; Check the character, now in the LSB of NOS. First, make
000EA0r 3                               ; sure we're not below the ASCII code for "0"
000EA0r 3  B5 02                        lda 2,x
000EA2r 3  C9 30                        cmp #'0'
000EA4r 3  90 23                        bcc @done               ; failure flag already set
000EA6r 3               
000EA6r 3                               ; Next, see if we are below "9", because that would make
000EA6r 3                               ; this a normal number
000EA6r 3  C9 3A                        cmp #'9'+1               ; this is actually ":"
000EA8r 3  90 12                        bcc @checkbase
000EAAr 3               
000EAAr 3                               ; Well, then let's see if this is the gap between "9" and "A"
000EAAr 3                               ; so we can treat the whole range as a number
000EAAr 3  C9 41                        cmp #'A'
000EACr 3  90 1B                        bcc @done               ; failure flag is already set
000EAEr 3               
000EAEr 3                               ; probably a letter, so we make sure it is uppercase
000EAEr 3  C9 61                        cmp #'a'
000EB0r 3  90 07                        bcc @case_done          ; not lower case, too low
000EB2r 3  C9 7B                        cmp #'z'+1
000EB4r 3  B0 03                        bcs @case_done          ; not lower case, too high
000EB6r 3               
000EB6r 3  18                           clc                     ; just right
000EB7r 3  69 E0                        adc #$e0                ; offset to upper case (wraps)
000EB9r 3               
000EB9r 3               @case_done:
000EB9r 3                               ; get rid of the gap between "9" and "A" so we can treat
000EB9r 3                               ; the whole range as one number
000EB9r 3  38                           sec
000EBAr 3  E9 07                        sbc #7                  ; fall through to @checkbase
000EBCr 3               
000EBCr 3               @checkbase:
000EBCr 3                               ; we have a number, now see if it falls inside the range
000EBCr 3                               ; provided by BASE
000EBCr 3  38                           sec
000EBDr 3  E9 30                        sbc #'0'                 ; this is also the conversion step
000EBFr 3  C5 rr                        cmp base
000EC1r 3  B0 06                        bcs @done               ; already have false flag
000EC3r 3               
000EC3r 3                               ; Found a legal number
000EC3r 3  95 02                        sta 2,x                 ; put number in NOS
000EC5r 3  D6 00                        dec 0,x                 ; set success flag
000EC7r 3  D6 01                        dec 1,x
000EC9r 3               
000EC9r 3               @done:
000EC9r 3               z_digit_question:
000EC9r 3  60                           rts
000ECAr 3               
000ECAr 3               
000ECAr 3               ; ## DISASM ( addr u -- ) "Disassemble a block of memory"
000ECAr 3               ; ## "disasm"  tested  Tali Forth
000ECAr 3                       ; """Convert a segment of memory to assembler output. This
000ECAr 3                       ; word is vectored so people can add their own disassembler.
000ECAr 3                       ; Natively, this produces Simpler Assembly Notation (SAN)
000ECAr 3                       ; code, see the section on The Disassembler in the manual and
000ECAr 3                       ; the file disassembler.asm for more details.
000ECAr 3                       ; """
000ECAr 3               xt_disasm:
000ECAr 3  20 rr rr                     jsr underflow_2
000ECDr 3                           .ifdef disassembler
000ECDr 3                               jsr disassembler
000ECDr 3                           .endif
000ECDr 3               
000ECDr 3  60           z_disasm:       rts
000ECEr 3               
000ECEr 3               
000ECEr 3               ; ## DNEGATE ( d -- d ) "Negate double cell number"
000ECEr 3               ; ## "dnegate"  auto  ANS double
000ECEr 3                       ; """https://forth-standard.org/standard/double/DNEGATE"""
000ECEr 3               xt_dnegate:
000ECEr 3  20 rr rr                     jsr underflow_2 ; double number
000ED1r 3               
000ED1r 3  A0 00             		ldy #0
000ED3r 3  38                           sec
000ED4r 3               
000ED4r 3  98                           tya
000ED5r 3  F5 02                        sbc 2,x         ; LSB of low cell
000ED7r 3  95 02                        sta 2,x
000ED9r 3               
000ED9r 3  98                           tya
000EDAr 3  F5 03                        sbc 3,x         ; MSB of low cell
000EDCr 3  95 03                        sta 3,x
000EDEr 3               
000EDEr 3  98                           tya
000EDFr 3  F5 00                        sbc 0,x         ; LSB of high cell
000EE1r 3  95 00                        sta 0,x
000EE3r 3               
000EE3r 3  98                           tya
000EE4r 3  F5 01                        sbc 1,x         ; MSB of high cell
000EE6r 3  95 01                        sta 1,x
000EE8r 3               
000EE8r 3  60           z_dnegate:      rts
000EE9r 3               
000EE9r 3               
000EE9r 3               ; ## QUESTION_DO ( limit start -- )(R: -- limit start) "Conditional loop start"
000EE9r 3               ; ## "?do"  auto  ANS core ext
000EE9r 3                       ; """https://forth-standard.org/standard/core/qDO"""
000EE9r 3               xt_question_do:
000EE9r 3                               ; ?DO shares most of its code with DO. We use the tmp1 flag
000EE9r 3                               ; to mark which is which
000EE9r 3  A9 FF                        lda #$ff                ; -1 is ?DO, jump to common code
000EEBr 3  85 rr                        sta tmp1
000EEDr 3  80 02                        bra do_common           ; skip flag for DO
000EEFr 3               
000EEFr 3               ; ## DO ( limit start -- )(R: -- limit start)  "Start a loop"
000EEFr 3               ; ## "do"  auto  ANS core
000EEFr 3                       ; """https://forth-standard.org/standard/core/DO
000EEFr 3                       ;
000EEFr 3                       ; Compile-time part of DO. Could be realized in Forth as
000EEFr 3                       ;       : DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY
000EEFr 3                       ; but we do it in assembler for speed. To work with LEAVE, we compile
000EEFr 3                       ; a routine that pushes the end address to the Return Stack at run
000EEFr 3                       ; time. This is based on a suggestion by Garth Wilson, see
000EEFr 3                       ; the Control Flow section of the manual for details.
000EEFr 3                       ;
000EEFr 3                       ; This may not be native compile. Don't check for a stack underflow
000EEFr 3                       ; """
000EEFr 3               
000EEFr 3               xt_do:
000EEFr 3                               ; DO and ?DO share most of their code, use tmp1 as a flag.
000EEFr 3  64 rr                        stz tmp1                ; 0 is DO, drop through to DO_COMMON
000EF1r 3               do_common:
000EF1r 3                               ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
000EF1r 3                               ; compile the address we need to LDA at runtime
000EF1r 3  CA                           dex
000EF2r 3  CA                           dex
000EF3r 3  A5 rr                        lda cp
000EF5r 3  95 00                        sta 0,x                 ; LSB
000EF7r 3  A5 rr                        lda cp+1
000EF9r 3  95 01                        sta 1,x                 ; MSB   ( limit start here )
000EFBr 3               
000EFBr 3                               ; now we compile six dummy bytes that LOOP/+LOOP will
000EFBr 3                               ; replace by the actual LDA/PHA instructions
000EFBr 3  A9 05                        lda #5                  ; we don't really care about the value,
000EFDr 3  A8                           tay                     ; so we use 5 to be tricky
000EFEr 3               @loop:
000EFEr 3  91 rr                        sta (cp),y
000F00r 3  88                           dey
000F01r 3  10 FB                        bpl @loop
000F03r 3               
000F03r 3                               ; update CP
000F03r 3  1A                           inc             ; we used 5 as a dummy value, this is why
000F04r 3  18                           clc
000F05r 3  65 rr                        adc cp
000F07r 3  85 rr                        sta cp
000F09r 3  90 02                        bcc @1
000F0Br 3  E6 rr                        inc cp+1
000F0Dr 3               @1:
000F0Dr 3                               ; compile the (?DO) portion of ?DO if appropriate
000F0Dr 3  A5 rr                        lda tmp1
000F0Fr 3  F0 17                        beq @compile_do
000F11r 3               
000F11r 3                               ; We came from ?DO, so compile its runtime first. We do
000F11r 3                               ; this with a quick loop because we know it has to be
000F11r 3                               ; Always Native anyway
000F11r 3  A0 14                        ldy #question_do_runtime_end-question_do_runtime
000F13r 3  5A                           phy             ; save counter to calculate new CP
000F14r 3               @2:
000F14r 3  B9 rr rr                     lda question_do_runtime,y
000F17r 3  91 rr                        sta (cp),y
000F19r 3  88                           dey
000F1Ar 3  10 F8                        bpl @2
000F1Cr 3               
000F1Cr 3                               ; adjust CP
000F1Cr 3  68                           pla             ; retrieve counter
000F1Dr 3  18                           clc
000F1Er 3  65 rr                        adc cp
000F20r 3  85 rr                        sta cp
000F22r 3  A5 rr                        lda cp+1
000F24r 3  69 00                        adc #0          ; only care about carry
000F26r 3  85 rr                        sta cp+1        ; fall through to @compile_do
000F28r 3               
000F28r 3               @compile_do:
000F28r 3                               ; compile runtime part of DO.
000F28r 3  A0 24                        ldy #do_runtime_end-do_runtime  ; counter
000F2Ar 3  5A                           phy             ; save counter to calculate new CP
000F2Br 3               @3:
000F2Br 3  B9 rr rr                     lda do_runtime,y
000F2Er 3  91 rr                        sta (cp),y
000F30r 3  88                           dey
000F31r 3  10 F8                        bpl @3
000F33r 3               
000F33r 3                               ; adjust CP
000F33r 3  68                           pla             ; retrieve counter
000F34r 3  18                           clc
000F35r 3  65 rr                        adc cp
000F37r 3  85 rr                        sta cp
000F39r 3  A5 rr                        lda cp+1
000F3Br 3  69 00                        adc #0          ; only care about carry
000F3Dr 3  85 rr                        sta cp+1
000F3Fr 3               
000F3Fr 3                               ; HERE, hardcoded for speed. We put it on the Data Stack
000F3Fr 3                               ; where LOOP/+LOOP takes it from. Note this has nothing to
000F3Fr 3                               ; do with the HERE we're saving for LEAVE
000F3Fr 3  CA                           dex
000F40r 3  CA                           dex
000F41r 3  A5 rr                        lda cp          ; LSB
000F43r 3  95 00                        sta 0,x
000F45r 3  A5 rr                        lda cp+1        ; MSB
000F47r 3  95 01                        sta 1,x
000F49r 3               z_question_do:
000F49r 3  60           z_do:           rts
000F4Ar 3               
000F4Ar 3               
000F4Ar 3               do_runtime:
000F4Ar 3                       ; """Runtime routine for DO loop. Note that ANS loops quit when the
000F4Ar 3                       ; boundry of limit-1 and limit is reached, a different mechanism than
000F4Ar 3                       ; the FIG Forth loop (you can see which version you have by running
000F4Ar 3                       ; a loop with start and limit as the same value, for instance
000F4Ar 3                       ; 0 0 DO -- these will walk through the number space). We use a
000F4Ar 3                       ; "fudge factor" for the limit that makes the Overflow Flag trip when
000F4Ar 3                       ; it is reached; see http://forum.6502.org/viewtopic.php?f=9&t=2026
000F4Ar 3                       ; for further discussion of this. The source given there for
000F4Ar 3                       ; this idea is Laxen & Perry F83. -- This routine is called (DO)
000F4Ar 3                       ; in some Forths. Usually, we would define this as a separate word
000F4Ar 3                       ; and compile it with COMPILE, and the Always Native (AN) flag.
000F4Ar 3                       ; However, we can do it faster if we just copy the bytes
000F4Ar 3                       ; of this routine with a simple loop in DO.
000F4Ar 3                       ; """
000F4Ar 3                               ; First step: create fudge factor (FUFA) by subtracting the
000F4Ar 3                               ; limit from $8000, the number that will trip the overflow
000F4Ar 3                               ; flag
000F4Ar 3  38                           sec
000F4Br 3  A9 00                        lda #0
000F4Dr 3  F5 02                        sbc 2,x         ; LSB of limit
000F4Fr 3  95 02                        sta 2,x         ; save FUFA for later use
000F51r 3               
000F51r 3  A9 80                        lda #$80
000F53r 3  F5 03                        sbc 3,x         ; MSB of limit
000F55r 3  95 03                        sta 3,x         ; save FUFA for later use
000F57r 3  48                           pha             ; FUFA replaces limit on R stack
000F58r 3  B5 02                        lda 2,x         ; LSB of limit
000F5Ar 3  48                           pha
000F5Br 3               
000F5Br 3                               ; Second step: index is FUFA plus original index
000F5Br 3  18                           clc
000F5Cr 3  B5 00                        lda 0,x         ; LSB of original index
000F5Er 3  75 02                        adc 2,x         ; add LSB of FUFA
000F60r 3  95 00                        sta 0,x
000F62r 3  B5 01                        lda 1,x         ; MSB of orginal index
000F64r 3  75 03                        adc 3,x         ; add MSB of FUFA
000F66r 3  48                           pha
000F67r 3  B5 00                        lda 0,x         ; LSB of index
000F69r 3  48                           pha
000F6Ar 3               
000F6Ar 3                               ; we've saved the FUFA on the NOS of the R stack, so we can
000F6Ar 3                               ; use it later. Clean the Data Stack
000F6Ar 3  E8                           inx
000F6Br 3  E8                           inx
000F6Cr 3  E8                           inx
000F6Dr 3  E8                           inx             ; no RTS because this is copied into code
000F6Er 3               do_runtime_end:
000F6Er 3               
000F6Er 3               question_do_runtime:
000F6Er 3               
000F6Er 3                       ; """This is called (?DO) in some Forths. See the explanation at
000F6Er 3                       ; do_runtime for the background on this design
000F6Er 3                       ; """
000F6Er 3                               ; see if TOS and NOS are equal. Change this to assembler
000F6Er 3                               ; for speed
000F6Er 3  20 rr rr                     jsr xt_two_dup          ; ( n1 n2 n1 n2 )
000F71r 3  20 rr rr                     jsr xt_equal            ; ( -- n1 n2 f )
000F74r 3               
000F74r 3  B5 00                        lda 0,x
000F76r 3  15 01                        ora 1,x
000F78r 3  F0 06                        beq @do_do
000F7Ar 3               
000F7Ar 3                               ; We're equal, so dump everything and jump beyond the loop.
000F7Ar 3                               ; But first, dump six entries off of the Data Stack
000F7Ar 3  8A                           txa
000F7Br 3  18                           clc
000F7Cr 3  69 06                        adc #6
000F7Er 3  AA                           tax
000F7Fr 3               
000F7Fr 3                               ; Then abort the whole loop
000F7Fr 3  60                           rts
000F80r 3               @do_do:
000F80r 3  E8                           inx             ; clear flag from EQUAL off stack
000F81r 3  E8                           inx             ; no RTS because this is copied into code
000F82r 3               question_do_runtime_end:
000F82r 3               
000F82r 3               
000F82r 3               
000F82r 3               ; ## DOES ( -- ) "Add payload when defining new words"
000F82r 3               ; ## "does>"  auto  ANS core
000F82r 3                       ; """https://forth-standard.org/standard/core/DOES
000F82r 3                       ; Create the payload for defining new defining words. See
000F82r 3                       ; http://www.bradrodriguez.com/papers/moving3.htm and
000F82r 3                       ; the Developer Guide in the manual for a discussion of
000F82r 3                       ; DOES>'s internal workings. This uses tmp1 and tmp2.
000F82r 3                       ; """
000F82r 3               
000F82r 3               xt_does:
000F82r 3                               ; compile a subroutine jump to runtime of DOES>
000F82r 3  A0 rr                        ldy #>does_runtime
000F84r 3  A9 rr                        lda #<does_runtime
000F86r 3  20 rr rr                     jsr cmpl_subroutine
000F89r 3               
000F89r 3                               ; compile a subroutine jump to DODOES. In traditional
000F89r 3                               ; terms, this is the Code Field Area (CFA) of the new
000F89r 3                               ; word
000F89r 3  A0 rr                        ldy #>dodoes
000F8Br 3  A9 rr                        lda #<dodoes
000F8Dr 3  20 rr rr                     jsr cmpl_subroutine
000F90r 3               
000F90r 3  60           z_does:         rts
000F91r 3               
000F91r 3               
000F91r 3               does_runtime:
000F91r 3                       ; """Runtime portion of DOES>. This replaces the subroutine jump
000F91r 3                       ; to DOVAR that CREATE automatically encodes by a jump to the
000F91r 3                       ; address that contains a subroutine jump to DODOES. We don't
000F91r 3                       ; jump to DODOES directly because we need to work our magic with
000F91r 3                       ; the return addresses. This routine is also known as "(DOES)" in
000F91r 3                       ; other Forths
000F91r 3                       ; """
000F91r 3               
000F91r 3  7A                           ply             ; LSB
000F92r 3  68                           pla             ; MSB
000F93r 3               
000F93r 3  C8                           iny
000F94r 3  D0 01                        bne @1
000F96r 3  1A                           inc
000F97r 3               @1:
000F97r 3  84 rr                        sty tmp1
000F99r 3  85 rr                        sta tmp1+1
000F9Br 3               
000F9Br 3                               ; CREATE has also already modified the DP to point to the new
000F9Br 3                               ; word. We have no idea which instructions followed the CREATE
000F9Br 3                               ; command if there is a DOES> so the CP could point anywhere
000F9Br 3                               ; by now. The address of the word's xt is four bytes down.
000F9Br 3  20 rr rr                     jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
000F9Er 3  A5 rr                        lda dp
000FA0r 3  18                           clc
000FA1r 3  69 04                        adc #4
000FA3r 3  85 rr                        sta tmp2
000FA5r 3  A5 rr                        lda dp+1
000FA7r 3  69 00                        adc #0          ; we only care about the carry
000FA9r 3  85 rr                        sta tmp2+1
000FABr 3               
000FABr 3                               ; Now we get that address and add one byte to skip over the JSR
000FABr 3                               ; opcode
000FABr 3  B2 rr                        lda (tmp2)
000FADr 3  18                           clc
000FAEr 3  69 01                        adc #1
000FB0r 3  85 rr                        sta tmp3
000FB2r 3  A0 01                        ldy #1
000FB4r 3  B1 rr                        lda (tmp2),y
000FB6r 3  69 00                        adc #0          ; we only care about the carry
000FB8r 3  85 rr                        sta tmp3+1
000FBAr 3               
000FBAr 3                               ; Replace the DOVAR address with our own
000FBAr 3  A5 rr                        lda tmp1        ; LSB
000FBCr 3  92 rr                        sta (tmp3)
000FBEr 3  A5 rr                        lda tmp1+1
000FC0r 3  91 rr                        sta (tmp3),y    ; Y is still 1
000FC2r 3               
000FC2r 3                               ; Since we removed the return address that brought us here, we
000FC2r 3                               ; go back to whatever the main routine was. Otherwise, we we
000FC2r 3                               ; smash into the subroutine jump to DODOES.
000FC2r 3  60                           rts
000FC3r 3               
000FC3r 3               
000FC3r 3               
000FC3r 3               ; ## DOT ( u -- ) "Print TOS"
000FC3r 3               ; ## "."  auto  ANS core
000FC3r 3                       ; """https://forth-standard.org/standard/core/d"""
000FC3r 3               
000FC3r 3               xt_dot:
000FC3r 3  20 rr rr                     jsr underflow_1
000FC6r 3               
000FC6r 3  20 rr rr                     jsr xt_dup                      ; ( n n )
000FC9r 3  20 rr rr                     jsr xt_abs                      ; ( n u )
000FCCr 3  20 rr rr                     jsr xt_zero                     ; ( n u 0 )
000FCFr 3  20 rr rr                     jsr xt_less_number_sign         ; ( n u 0 )
000FD2r 3  20 rr rr                     jsr xt_number_sign_s            ; ( n ud )
000FD5r 3  20 rr rr                     jsr xt_rot                      ; ( ud n )
000FD8r 3  20 rr rr                     jsr xt_sign                     ; ( ud )
000FDBr 3  20 rr rr                     jsr xt_number_sign_greater      ; ( addr u )
000FDEr 3  20 rr rr                     jsr xt_type
000FE1r 3  20 rr rr                     jsr xt_space
000FE4r 3               
000FE4r 3  60           z_dot:          rts
000FE5r 3               
000FE5r 3               
000FE5r 3               
000FE5r 3               ; ## DOT_PAREN ( -- ) "Print input up to close paren .( comment )"
000FE5r 3               ; ## ".("  auto  ANS core
000FE5r 3                       ; """http://forth-standard.org/standard/core/Dotp"""
000FE5r 3               
000FE5r 3               xt_dot_paren:
000FE5r 3                               ; Put a right paren on the stack.
000FE5r 3  CA                           dex
000FE6r 3  CA                           dex
000FE7r 3  A9 29                        lda #41     ; Right parenthesis
000FE9r 3  95 00                        sta 0,x
000FEBr 3  74 01                        stz 1,x
000FEDr 3               
000FEDr 3  20 rr rr                     jsr xt_parse
000FF0r 3  20 rr rr                     jsr xt_type
000FF3r 3               
000FF3r 3  60           z_dot_paren:    rts
000FF4r 3               
000FF4r 3               
000FF4r 3               
000FF4r 3               ; ## DOT_QUOTE ( "string" -- ) "Print string from compiled word"
000FF4r 3               ; ## ".""  auto  ANS core ext
000FF4r 3                       ; """https://forth-standard.org/standard/core/Dotq
000FF4r 3                       ; Compile string that is printed during run time. ANS Forth wants
000FF4r 3                       ; this to be compile-only, even though everybody and their friend
000FF4r 3                       ; uses it for everything. We follow the book here, and recommend
000FF4r 3                       ; `.(` for general printing.
000FF4r 3                       ; """
000FF4r 3               
000FF4r 3               xt_dot_quote:
000FF4r 3                               ; we let S" do the heavy lifting. Since we're in
000FF4r 3                               ; compile mode, it will save the string and reproduce it
000FF4r 3                               ; during runtime
000FF4r 3  20 rr rr                     jsr xt_s_quote
000FF7r 3               
000FF7r 3                               ; We then let TYPE do the actual printing
000FF7r 3  A0 rr                        ldy #>xt_type
000FF9r 3  A9 rr                        lda #<xt_type
000FFBr 3  20 rr rr                     jsr cmpl_subroutine
000FFEr 3               
000FFEr 3  60           z_dot_quote:    rts
000FFFr 3               
000FFFr 3               
000FFFr 3               
000FFFr 3               ; ## DOT_R ( n u -- ) "Print NOS as unsigned number with TOS with"
000FFFr 3               ; ## ".r"  tested  ANS core ext
000FFFr 3                       ; """https://forth-standard.org/standard/core/DotR
000FFFr 3                       ;
000FFFr 3                       ; Based on the Forth code
000FFFr 3                       ;  : .R  >R DUP ABS 0 <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
000FFFr 3                       ; """
000FFFr 3               
000FFFr 3               xt_dot_r:
000FFFr 3  20 rr rr                     jsr underflow_2
001002r 3               
001002r 3  20 rr rr                     jsr xt_to_r
001005r 3  20 rr rr                     jsr xt_dup
001008r 3  20 rr rr                     jsr xt_abs
00100Br 3  20 rr rr                     jsr xt_zero
00100Er 3  20 rr rr                     jsr xt_less_number_sign
001011r 3  20 rr rr                     jsr xt_number_sign_s
001014r 3  20 rr rr                     jsr xt_rot
001017r 3  20 rr rr                     jsr xt_sign
00101Ar 3  20 rr rr                     jsr xt_number_sign_greater
00101Dr 3  20 rr rr                     jsr xt_r_from
001020r 3  20 rr rr                     jsr xt_over
001023r 3  20 rr rr                     jsr xt_minus
001026r 3  20 rr rr                     jsr xt_spaces
001029r 3  20 rr rr                     jsr xt_type
00102Cr 3               
00102Cr 3  60           z_dot_r:        rts
00102Dr 3               
00102Dr 3               
00102Dr 3               
00102Dr 3               ; ## DOT_S ( -- ) "Print content of Data Stack"
00102Dr 3               ; ## ".s"  tested  ANS tools
00102Dr 3                       ; """https://forth-standard.org/standard/tools/DotS
00102Dr 3                       ; Print content of Data Stack non-distructively. We follow the format
00102Dr 3                       ; of Gforth and print the number of elements first in brackets,
00102Dr 3                       ; followed by the Data Stack content (if any).
00102Dr 3                       ;
00102Dr 3                       ; Since this is for humans, we don't have to worry about speed.
00102Dr 3                       ; """
00102Dr 3               
00102Dr 3               xt_dot_s:
00102Dr 3  20 rr rr                     jsr xt_depth    ; ( -- u )
001030r 3               
001030r 3                               ; Print stack depth in brackets
001030r 3  A9 3C                        lda #$3c        ; ASCII for "<"
001032r 3  20 rr rr                     jsr emit_a
001035r 3               
001035r 3                               ; We keep a copy of the number of the things on the stack
001035r 3                               ; to use as a counter later down. This assumes that there
001035r 3                               ; are less than 255 elements on the stack
001035r 3  B5 00                        lda 0,x
001037r 3  48                           pha
001038r 3               
001038r 3                               ; print unsigned number without the trailing space
001038r 3  CA                           dex             ; DUP
001039r 3  CA                           dex
00103Ar 3  95 00                        sta 0,x
00103Cr 3  74 01                        stz 1,x
00103Er 3               
00103Er 3  20 rr rr                     jsr print_u
001041r 3               
001041r 3  A9 3E                        lda #$3e        ; ASCII for ">"
001043r 3  20 rr rr                     jsr emit_a
001046r 3  A9 20                        lda #AscSP      ; ASCII for SPACE
001048r 3  20 rr rr                     jsr emit_a
00104Br 3               
00104Br 3  E8                           inx
00104Cr 3  E8                           inx
00104Dr 3               
00104Dr 3                               ; There will be lots of cases where the stack is empty. If that
00104Dr 3                               ; is so, get out of here quickly
00104Dr 3  E0 rr                        cpx #dsp0
00104Fr 3  F0 1E                        beq @done
001051r 3               
001051r 3               @have_stack:
001051r 3                               ; We have at least one element on the stack. The depth of the
001051r 3                               ; stack is on the stack, we can use it as a counter. We go
001051r 3                               ; from bottom to top
001051r 3  7A                           ply
001052r 3               
001052r 3  A9 rr                        lda #dsp0-1     ; go up one to avoid garbage
001054r 3  85 rr                        sta tmp3
001056r 3  64 rr                        stz tmp3+1      ; must be zero page on the 65c02
001058r 3               @loop:
001058r 3  CA                           dex
001059r 3  CA                           dex
00105Ar 3               
00105Ar 3  B2 rr                        lda (tmp3)
00105Cr 3  95 01                        sta 1,x
00105Er 3  C6 rr                        dec tmp3
001060r 3               
001060r 3  B2 rr                        lda (tmp3)
001062r 3  95 00                        sta 0,x
001064r 3  C6 rr                        dec tmp3
001066r 3  5A                           phy
001067r 3               
001067r 3  20 rr rr                     jsr xt_dot
00106Ar 3               
00106Ar 3  7A                           ply
00106Br 3  88                           dey
00106Cr 3  D0 EA                        bne @loop
00106Er 3               
00106Er 3  48                           pha             ; dummy to balance stack
00106Fr 3               @done:
00106Fr 3  68                           pla
001070r 3  60           z_dot_s:        rts
001071r 3               
001071r 3               
001071r 3               
001071r 3               ; ## D_DOT ( d -- ) "Print double"
001071r 3               ; ## "d."  tested  ANS double
001071r 3                       ; """http://forth-standard.org/standard/double/Dd"""
001071r 3                       ;
001071r 3                       ; From the Forth code:
001071r 3                       ; : D. TUCK DABS <# #S ROT SIGN #> TYPE SPACE ;
001071r 3                       ; """
001071r 3               
001071r 3               xt_d_dot:
001071r 3  20 rr rr                     jsr underflow_2
001074r 3               
001074r 3  20 rr rr                     jsr xt_tuck
001077r 3  20 rr rr                     jsr xt_dabs
00107Ar 3  20 rr rr                     jsr xt_less_number_sign
00107Dr 3  20 rr rr                     jsr xt_number_sign_s
001080r 3  20 rr rr                     jsr xt_rot
001083r 3  20 rr rr                     jsr xt_sign
001086r 3  20 rr rr                     jsr xt_number_sign_greater
001089r 3  20 rr rr                     jsr xt_type
00108Cr 3  20 rr rr                     jsr xt_space
00108Fr 3               
00108Fr 3  60           z_d_dot:        rts
001090r 3               
001090r 3               
001090r 3               
001090r 3               ; ## D_DOT_R ( d u -- ) "Print double right-justified u wide"
001090r 3               ; ## "d.r"  tested  ANS double
001090r 3                       ; """http://forth-standard.org/standard/double/DDotR"""
001090r 3                       ; Based on the Forth code
001090r 3                       ;  : D.R >R TUCK DABS <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
001090r 3                       ; """
001090r 3               
001090r 3               xt_d_dot_r:
001090r 3  20 rr rr                     jsr underflow_3
001093r 3                               ; From the forth code:
001093r 3  20 rr rr                     jsr xt_to_r
001096r 3  20 rr rr                     jsr xt_tuck
001099r 3  20 rr rr                     jsr xt_dabs
00109Cr 3  20 rr rr                     jsr xt_less_number_sign
00109Fr 3  20 rr rr                     jsr xt_number_sign_s
0010A2r 3  20 rr rr                     jsr xt_rot
0010A5r 3  20 rr rr                     jsr xt_sign
0010A8r 3  20 rr rr                     jsr xt_number_sign_greater
0010ABr 3  20 rr rr                     jsr xt_r_from
0010AEr 3  20 rr rr                     jsr xt_over
0010B1r 3  20 rr rr                     jsr xt_minus
0010B4r 3  20 rr rr                     jsr xt_spaces
0010B7r 3  20 rr rr                     jsr xt_type
0010BAr 3               
0010BAr 3  60           z_d_dot_r:      rts
0010BBr 3               
0010BBr 3               
0010BBr 3               
0010BBr 3               ; ## DROP ( u -- ) "Pop top entry on Data Stack"
0010BBr 3               ; ## "drop"  auto  ANS core
0010BBr 3                       ; """https://forth-standard.org/standard/core/DROP"""
0010BBr 3               xt_drop:
0010BBr 3  20 rr rr                     jsr underflow_1
0010BEr 3               
0010BEr 3  E8                           inx
0010BFr 3  E8                           inx
0010C0r 3               
0010C0r 3  60           z_drop:         rts
0010C1r 3               
0010C1r 3               
0010C1r 3               ; ## DUMP ( addr u -- ) "Display a memory region"
0010C1r 3               ; ## "dump"  tested  ANS tools
0010C1r 3                       ; """https://forth-standard.org/standard/tools/DUMP
0010C1r 3                       ;
0010C1r 3                       ; DUMP's exact output is defined as "implementation dependent".
0010C1r 3                       ; This is in assembler because it is
0010C1r 3                       ; useful for testing and development, so we want to have it work
0010C1r 3                       ; as soon as possible. Uses TMP2
0010C1r 3                       ; """
0010C1r 3               
0010C1r 3               xt_dump:
0010C1r 3  20 rr rr                     jsr underflow_2
0010C4r 3               @row:
0010C4r 3                               ; start counter for 16 numbers per row
0010C4r 3  A0 10                        ldy #16
0010C6r 3               
0010C6r 3                               ; We use TMP2 as the index for the ASCII characters
0010C6r 3                               ; that we print at the and of the hex block. We
0010C6r 3                               ; start saving them at HERE (CP)
0010C6r 3  64 rr                        stz tmp2
0010C8r 3               
0010C8r 3  20 rr rr                     jsr xt_cr
0010CBr 3               
0010CBr 3                               ; print address number
0010CBr 3  B5 03                        lda 3,x
0010CDr 3  20 rr rr                     jsr byte_to_ascii
0010D0r 3  B5 02                        lda 2,x
0010D2r 3  20 rr rr                     jsr byte_to_ascii
0010D5r 3               
0010D5r 3  20 rr rr                     jsr xt_space
0010D8r 3  20 rr rr                     jsr xt_space
0010DBr 3               @loop:
0010DBr 3                               ; if there are zero bytes left to display, we're done
0010DBr 3  B5 00                        lda 0,x
0010DDr 3  15 01                        ora 1,x
0010DFr 3  F0 39                        beq @all_printed
0010E1r 3               
0010E1r 3                               ; dump the contents
0010E1r 3  A1 02                        lda (2,x)
0010E3r 3  48                           pha                     ; byte_to_ascii destroys A
0010E4r 3  20 rr rr                     jsr byte_to_ascii
0010E7r 3  20 rr rr                     jsr xt_space
0010EAr 3  68                           pla
0010EBr 3               
0010EBr 3                               ; Handle ASCII printing
0010EBr 3  20 rr rr                     jsr is_printable
0010EEr 3  B0 02                        bcs @printable
0010F0r 3  A9 2E                        lda #'.'                 ; Print dot if not printable
0010F2r 3               @printable:
0010F2r 3  5A                           phy                     ; save counter
0010F3r 3  A4 rr                        ldy tmp2
0010F5r 3  91 rr                        sta (cp),y
0010F7r 3  E6 rr                        inc tmp2
0010F9r 3  7A                           ply
0010FAr 3               
0010FAr 3                               ; extra space after eight bytes
0010FAr 3  C0 09                        cpy #9
0010FCr 3  D0 03                        bne @next_char
0010FEr 3  20 rr rr                     jsr xt_space
001101r 3               
001101r 3               @next_char:
001101r 3  F6 02                        inc 2,x
001103r 3  D0 02                        bne @counter
001105r 3  F6 03                        inc 3,x
001107r 3               
001107r 3               @counter:
001107r 3                               ; loop counter
001107r 3  B5 00                        lda 0,x
001109r 3  D0 02                        bne @1
00110Br 3  D6 01                        dec 1,x
00110Dr 3               @1:
00110Dr 3  D6 00                        dec 0,x
00110Fr 3  88                           dey
001110r 3  D0 C9                        bne @loop               ; next byte
001112r 3               
001112r 3                               ; Done with one line, print the ASCII version of these
001112r 3                               ; characters
001112r 3  20 rr rr                     jsr xt_space
001115r 3  20 rr rr                     jsr print_ascii
001118r 3               
001118r 3  80 AA                        bra @row                ; new row
00111Ar 3               
00111Ar 3               @all_printed:
00111Ar 3                               ; See if there are any ASCII characters in the buffer
00111Ar 3                               ; left to print
00111Ar 3  A5 rr                        lda tmp2
00111Cr 3  F0 06                        beq @done
00111Er 3               
00111Er 3                               ; In theory, we could try to make the ASCII part line
00111Er 3                               ; up with the line before it. But that is a hassle (we
00111Er 3                               ; use three bytes for each missed hex entry, and
00111Er 3                               ; then there is the gap after eight entries) and it
00111Er 3                               ; makes it harder to read. We settle for one extra
00111Er 3                               ; space instead for the moment
00111Er 3  20 rr rr                     jsr xt_space
001121r 3  20 rr rr                     jsr print_ascii
001124r 3               @done:
001124r 3  20 rr rr                     jsr xt_two_drop         ; one byte less than 4x INX
001127r 3  60           z_dump:         rts
001128r 3               
001128r 3               
001128r 3               print_ascii:
001128r 3                               ; Print the ASCII characters that we have saved from
001128r 3                               ; HERE (CP) to HERE plus whatever is in TMP2. This routine
001128r 3                               ; is not compiled (DUMP is probably never compiled anyway)
001128r 3                               ; but we keep it inside the scope of DUMP.
001128r 3  A0 00                        ldy #0
00112Ar 3               @ascii_loop:
00112Ar 3  B1 rr                        lda (cp),y
00112Cr 3  20 rr rr                     jsr emit_a
00112Fr 3  C8                           iny
001130r 3               
001130r 3                               ; extra space after eight chars
001130r 3  C0 08                        cpy #8
001132r 3  D0 03                        bne @1
001134r 3  20 rr rr                     jsr xt_space
001137r 3               @1:
001137r 3  C6 rr                        dec tmp2
001139r 3  D0 EF                        bne @ascii_loop
00113Br 3               
00113Br 3  60                           rts
00113Cr 3               
00113Cr 3               
00113Cr 3               
00113Cr 3               ; ## DUP ( u -- u u ) "Duplicate TOS"
00113Cr 3               ; ## "dup"  auto  ANS core
00113Cr 3                       ; """https://forth-standard.org/standard/core/DUP"""
00113Cr 3               xt_dup:
00113Cr 3  20 rr rr                     jsr underflow_1
00113Fr 3               
00113Fr 3  CA                           dex
001140r 3  CA                           dex
001141r 3               
001141r 3  B5 02                        lda 2,x         ; LSB
001143r 3  95 00                        sta 0,x
001145r 3  B5 03                        lda 3,x         ; MSB
001147r 3  95 01                        sta 1,x
001149r 3               
001149r 3  60           z_dup:          rts
00114Ar 3               
00114Ar 3               
00114Ar 3               ; ## ED ( -- u ) "Line-based editor"
00114Ar 3               ; ## "ed"  fragment  Tali Forth
00114Ar 3                       ; """Start the line-based editor ed6502. See separate file
00114Ar 3                       ; ed.asm or the manual for details.
00114Ar 3                       ; """
00114Ar 3               xt_ed:
00114Ar 3                       .ifdef ed6502
00114Ar 3                               jsr ed6502      ; kept in separate file
00114Ar 3                       .endif
00114Ar 3               
00114Ar 3  60           z_ed:           rts
00114Br 3               
00114Br 3               
00114Br 3               ; ## EDITOR_WORDLIST ( -- u ) "WID for the Editor wordlist"
00114Br 3               ; ## "editor-wordlist"  tested  Tali Editor
00114Br 3                       ; """ Commonly used like `editor-wordlist >order` to add the editor
00114Br 3                       ; words to the search order so they can be used.  This will need
00114Br 3                       ; to be done before any of the words marked "Tali Editor" can be
00114Br 3                       ; used.  See the tutorial on Wordlists and the Search Order for
00114Br 3                       ; more information.
00114Br 3               
00114Br 3                       ;
00114Br 3                       ; This is a dummy entry, the code is shared with ONE
00114Br 3                       ; """
00114Br 3               
00114Br 3               
00114Br 3               ; ## ELSE (C: orig -- orig) ( -- ) "Conditional flow control"
00114Br 3               ; ## "else"  auto  ANS core
00114Br 3                       ; """http://forth-standard.org/standard/core/ELSE
00114Br 3                       ;
00114Br 3                       ; The code is shared with ENDOF
00114Br 3                       ; """
00114Br 3               
00114Br 3               xt_else:
00114Br 3               xt_endof:
00114Br 3                               ; Put an unconditional branch.
00114Br 3  A0 rr                        ldy #>branch_runtime
00114Dr 3  A9 rr                        lda #<branch_runtime
00114Fr 3  20 rr rr                     jsr cmpl_subroutine
001152r 3               
001152r 3                               ; Put the address of the branch address on the stack.
001152r 3  20 rr rr                     jsr xt_here
001155r 3               
001155r 3                               ; Use zero for the branch address for now.
001155r 3                               ; THEN will fill it in later.
001155r 3  20 rr rr                     jsr xt_zero
001158r 3  20 rr rr                     jsr xt_comma
00115Br 3               
00115Br 3                               ; Get the address to jump to (just after the
00115Br 3                               ; unconditional branch) for the IF to jump to
00115Br 3                               ; when false.
00115Br 3  20 rr rr                     jsr xt_here
00115Er 3  20 rr rr                     jsr xt_rot
001161r 3               
001161r 3                               ; Update the original if 0branch address.
001161r 3  20 rr rr                     jsr xt_store
001164r 3               z_else:
001164r 3               z_endof:
001164r 3  60                           rts
001165r 3               
001165r 3               
001165r 3               
001165r 3               branch_runtime:
001165r 3                       ; """Runtime component for a branch. Used by ELSE and ENDOF. This was
001165r 3                       ; formally part of a separate word BRANCH which was later removed.
001165r 3                       ; """
001165r 3               
001165r 3                               ; The address on the Return Stack points to the last byte
001165r 3                               ; of the JSR address, one byte below the branch literal
001165r 3  68                           pla
001166r 3  85 rr                        sta tmpbranch
001168r 3  68                           pla
001169r 3  85 rr                        sta tmpbranch+1
00116Br 3               
00116Br 3                               ; Keep in mind: the address we just popped points one byte
00116Br 3                               ; lower than the branch literal we want to grab
00116Br 3  A0 01                        ldy #1
00116Dr 3  B1 rr                        lda (tmpbranch),y  ; LSB
00116Fr 3  85 rr                        sta tmp1
001171r 3  C8                           iny
001172r 3  B1 rr                        lda (tmpbranch),y  ; MSB
001174r 3  85 rr                        sta tmp1+1
001176r 3               
001176r 3  6C rr rr                     jmp (tmp1)
001179r 3               
001179r 3               
001179r 3               
001179r 3               ; ## EMIT ( char -- ) "Print character to current output"
001179r 3               ; ## "emit"  auto  ANS core
001179r 3                       ; """https://forth-standard.org/standard/core/EMIT
001179r 3                       ; Run-time default for EMIT. The user can revector this by changing
001179r 3                       ; the value of the OUTPUT variable. We ignore the MSB completely, and
001179r 3                       ; do not check to see if we have been given a valid ASCII character.
001179r 3                       ; Don't make this native compile.
001179r 3                       ; """
001179r 3               
001179r 3               xt_emit:
001179r 3  20 rr rr                     jsr underflow_1
00117Cr 3               
00117Cr 3  B5 00                        lda 0,x
00117Er 3  E8                           inx
00117Fr 3  E8                           inx
001180r 3               
001180r 3               emit_a:
001180r 3                       ; We frequently want to print the character in A without fooling
001180r 3                       ; around with the Data Stack. This is emit_a's job, which still
001180r 3                       ; allows the output to be vectored. Call it with JSR as you
001180r 3                       ; would XT_EMIT
001180r 3  6C rr rr                     jmp (output)            ; JSR/RTS
001183r 3               
001183r 3               z_emit:         ; never reached
001183r 3               
001183r 3               
001183r 3               
001183r 3               ; ## EMPTY_BUFFERS ( -- ) "Empty all buffers without saving"
001183r 3               ; ## "empty-buffers"  tested  ANS block ext
001183r 3                       ; """https://forth-standard.org/standard/block/EMPTY-BUFFERS"""
001183r 3               xt_empty_buffers:
001183r 3                               ; Set the buffer status to empty.
001183r 3  A0 2C                        ldy #buffstatus_offset
001185r 3  A9 00                        lda #0
001187r 3  91 rr                        sta (up),y      ; Only LSB is used.
001189r 3               z_empty_buffers:
001189r 3  60                           rts
00118Ar 3               
00118Ar 3               
00118Ar 3               ; ## ENDCASE (C: case-sys -- ) ( x -- ) "Conditional flow control"
00118Ar 3               ; ## "endcase"  auto  ANS core ext
00118Ar 3                       ; """http://forth-standard.org/standard/core/ENDCASE"""
00118Ar 3               
00118Ar 3               xt_endcase:
00118Ar 3                               ; Postpone DROP to remove the item
00118Ar 3                               ; being checked.
00118Ar 3  A0 rr                        ldy #>xt_drop
00118Cr 3  A9 rr                        lda #<xt_drop
00118Er 3  20 rr rr                     jsr cmpl_subroutine
001191r 3               
001191r 3                               ; There are a number of address (of branches that need their
001191r 3                               ; jump addressed filled in with the address of right here).
001191r 3                               ; Keep calling THEN to deal with them until we reach the
001191r 3                               ; 0 that CASE put on the stack at the beginning.
001191r 3               @endcase_loop:
001191r 3                               ; Check for 0 on the stack.
001191r 3  B5 00                        lda 0,x
001193r 3  15 01                        ora 1,x
001195r 3  F0 05                        beq @done
001197r 3               
001197r 3  20 rr rr                     jsr xt_then
00119Ar 3  80 F5                        bra @endcase_loop
00119Cr 3               @done:
00119Cr 3                               ; Remove the 0 from the stack.
00119Cr 3  E8                           inx
00119Dr 3  E8                           inx
00119Er 3  60           z_endcase:      rts
00119Fr 3               
00119Fr 3               
00119Fr 3               
00119Fr 3               ; ## ENDOF (C: case-sys1 of-sys1-- case-sys2) ( -- ) "Conditional flow control"
00119Fr 3               ; ## "endof"  auto  ANS core ext
00119Fr 3                       ; """http://forth-standard.org/standard/core/ENDOF
00119Fr 3                       ; This is a dummy entry, the code is shared with ELSE
00119Fr 3                       ; """
00119Fr 3               
00119Fr 3               
00119Fr 3               ; ## ENVIRONMENT_Q  ( addr u -- 0 | i*x true )  "Return system information"
00119Fr 3               ; ## "environment?"  auto  ANS core
00119Fr 3                       ; """https://forth-standard.org/standard/core/ENVIRONMENTq
00119Fr 3                       ;
00119Fr 3                       ; By ANS definition, we use upper-case strings here, see the
00119Fr 3                       ; string file for details. This can be realized as a high-level
00119Fr 3                       ; Forth word as
00119Fr 3                       ;
00119Fr 3                       ; : STRING_OF POSTPONE 2OVER POSTPONE COMPARE POSTPONE 0=
00119Fr 3                       ;    POSTPONE IF POSTPONE 2DROP ; IMMEDIATE COMPILE-ONLY
00119Fr 3                       ; HEX
00119Fr 3                       ; : ENVIRONMENT? ( C-ADDR U -- FALSE | I*X TRUE )
00119Fr 3                       ; CASE
00119Fr 3                       ; S" /COUNTED-STRING"    STRING_OF  7FFF TRUE ENDOF
00119Fr 3                       ; S" /HOLD"              STRING_OF    FF TRUE ENDOF
00119Fr 3                       ; S" /PAD"               STRING_OF    54 TRUE ENDOF ( 84 DECIMAL )
00119Fr 3                       ; S" ADDRESS-UNIT-BITS"  STRING_OF     8 TRUE ENDOF
00119Fr 3                       ; S" FLOORED"            STRING_OF FALSE TRUE ENDOF ( WE HAVE SYMMETRIC )
00119Fr 3                       ; S" MAX-CHAR"           STRING_OF   255 TRUE ENDOF
00119Fr 3                       ; S" MAX-D"              STRING_OF
00119Fr 3                                                    ; 7FFFFFFF. TRUE ENDOF
00119Fr 3                       ; S" MAX-N"              STRING_OF  7FFF TRUE ENDOF
00119Fr 3                       ; S" MAX-U"              STRING_OF  FFFF TRUE ENDOF
00119Fr 3                       ; S" MAX-UD"             STRING_OF
00119Fr 3                                                    ; FFFFFFFF. TRUE ENDOF
00119Fr 3                       ; S" RETURN-STACK-CELLS" STRING_OF    80 TRUE ENDOF
00119Fr 3                       ; S" STACK-CELLS"        STRING_OF    20 TRUE ENDOF ( FROM DEFINITIONS.ASM )
00119Fr 3                       ; ( DEFAULT ) 2DROP FALSE FALSE ( ONE FALSE WILL DROPPED BY ENDCASE )
00119Fr 3                       ; ENDCASE ;
00119Fr 3                       ;
00119Fr 3                       ; but that uses lots of memory and increases the start up time. This
00119Fr 3                       ; word is rarely used so we can try to keep it short at the expense
00119Fr 3                       ; of speed.
00119Fr 3                       ; """
00119Fr 3               
00119Fr 3               xt_environment_q:
00119Fr 3  20 rr rr                     jsr underflow_1
0011A2r 3               
0011A2r 3                               ; This code is table-driven: We walk through the list of
0011A2r 3                               ; strings until we find one that matches, and then we take
0011A2r 3                               ; the equivalent data from the results table. This is made
0011A2r 3                               ; a bit harder by the fact that some of these return a
0011A2r 3                               ; double-cell number and some a single-cell one.
0011A2r 3               
0011A2r 3                               ; We will walk through the table with variables that return
0011A2r 3                               ; a single-cell result
0011A2r 3  A0 00                        ldy #00                 ; counter for table
0011A4r 3               
0011A4r 3                               ; We use a flag on the the stack to signal if we have a single-cell
0011A4r 3                               ; or double-cell number. We use 0 to signal single-cell and 1 for
0011A4r 3                               ; double-cell.
0011A4r 3  5A                           phy
0011A5r 3               @table_loop:
0011A5r 3                               ; We arrived here with the address of the string to be checked
0011A5r 3                               ; on the stack. We make a copy. Index is in Y
0011A5r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
0011A8r 3               
0011A8r 3                               ; We do our work on the TOS to speed things up
0011A8r 3  CA                           dex
0011A9r 3  CA                           dex                     ; ( addr u addr u ? )
0011AAr 3               
0011AAr 3                               ; Get address of string to check from table
0011AAr 3  B9 rr rr                     lda env_table_single,y
0011ADr 3  95 00                        sta 0,x
0011AFr 3  C8                           iny
0011B0r 3  B9 rr rr                     lda env_table_single,y
0011B3r 3  95 01                        sta 1,x                 ; ( addr u addr u addr-t )
0011B5r 3  C8                           iny
0011B6r 3               
0011B6r 3                               ; See if this is the last entry. The LSB is still in A
0011B6r 3  15 00                        ora 0,x
0011B8r 3  F0 4D                        beq @table_done
0011BAr 3               
0011BAr 3                               ; We have a string entry. The address there is stored in
0011BAr 3                               ; old-style address format, that is, the first byte is the
0011BAr 3                               ; length of the string
0011BAr 3  5A                           phy                     ; save Y, which is used by COUNT
0011BBr 3  20 rr rr                     jsr xt_count            ; ( addr u addr u addr-s u-s )
0011BEr 3  20 rr rr                     jsr xt_compare          ; ( addr u f )
0011C1r 3  7A                           ply
0011C2r 3               
0011C2r 3                               ; If we found a match (flag is zero -- COMPARE is weird
0011C2r 3                               ; that way), return the result
0011C2r 3  B5 00                        lda 0,x
0011C4r 3  15 01                        ora 1,x
0011C6r 3  F0 04                        beq @got_result
0011C8r 3               
0011C8r 3                               ; Flag is not zero, so not a perfect match, so try next
0011C8r 3                               ; word
0011C8r 3  E8                           inx                     ; DROP, now ( addr u )
0011C9r 3  E8                           inx
0011CAr 3               
0011CAr 3  80 D9                        bra @table_loop
0011CCr 3               
0011CCr 3               @got_result:
0011CCr 3                               ; We arrive here with ( addr u -1 ) and know that we've found
0011CCr 3                               ; a match. The index of the match+2 is in Y.
0011CCr 3  E8                           inx                     ; drop flag, now ( addr u )
0011CDr 3  E8                           inx
0011CEr 3  88                           dey                     ; go back to index we had
0011CFr 3  88                           dey
0011D0r 3               
0011D0r 3                               ; See if this is a single-cell word.
0011D0r 3  68                           pla
0011D1r 3  D0 0D                        bne @double_result
0011D3r 3               
0011D3r 3                               ; Single-cell result
0011D3r 3  B9 rr rr                     lda env_results_single,y
0011D6r 3  95 02                        sta 2,x
0011D8r 3  C8                           iny
0011D9r 3  B9 rr rr                     lda env_results_single,y
0011DCr 3  95 03                        sta 3,x                 ; ( res u )
0011DEr 3               
0011DEr 3  80 1F                        bra @set_flag
0011E0r 3               
0011E0r 3               @double_result:
0011E0r 3                               ; This is a double-celled result, which means we have to
0011E0r 3                               ; fool around with the index some more. We also need a
0011E0r 3                               ; further cell on the stack
0011E0r 3  CA                           dex                     ; ( addr u ? )
0011E1r 3  CA                           dex
0011E2r 3               
0011E2r 3                               ; We have 11 single-cell words we check, plus the 0000 as
0011E2r 3                               ; a marker for the end of the table, so we arrive here
0011E2r 3                               ; with Y as 22 or more. To get the index for the double-
0011E2r 3                               ; cell words, we move the result
0011E2r 3  98                           tya
0011E3r 3  38                           sec
0011E4r 3  E9 18                        sbc #24
0011E6r 3               
0011E6r 3                               ; We have four bytes per entry in the table, but the index
0011E6r 3                               ; keeps increasing by two, so we only have to multiply by
0011E6r 3                               ; two (shift left once) to get the right result
0011E6r 3  0A                           asl
0011E7r 3  A8                           tay
0011E8r 3               
0011E8r 3  B9 rr rr                     lda env_results_double,y
0011EBr 3  95 02                        sta 2,x
0011EDr 3  C8                           iny
0011EEr 3  B9 rr rr                     lda env_results_double,y
0011F1r 3  95 03                        sta 3,x                 ; ( res u ? )
0011F3r 3  C8                           iny
0011F4r 3               
0011F4r 3  B9 rr rr                     lda env_results_double,y
0011F7r 3  95 04                        sta 4,x
0011F9r 3  C8                           iny
0011FAr 3  B9 rr rr                     lda env_results_double,y
0011FDr 3  95 05                        sta 5,x                 ; ( res res ? )
0011FFr 3               
0011FFr 3                               ; fall through to @set_flag
0011FFr 3               @set_flag:
0011FFr 3  A9 FF                        lda #$ff
001201r 3  95 00                        sta 0,x
001203r 3  95 01                        sta 1,x                 ; ( res f )
001205r 3               
001205r 3  80 14                        bra @done
001207r 3               @table_done:
001207r 3                               ; We're done with a table, because the entry was a zero.
001207r 3                               ; We arrive here with ( addr u addr u 0 )
001207r 3               
001207r 3                               ; We take the flag from stack and increase it by one. If the
001207r 3                               ; flag is zero, we have just completed the single-cell number
001207r 3                               ; strings, so we in increase the flag and try again. Otherwise,
001207r 3                               ; we're done with the double-cell table without having found
001207r 3                               ; a match, and we're done
001207r 3  68                           pla
001208r 3  D0 09                        bne @no_match
00120Ar 3               
00120Ar 3                               ; Flag is zero, increase it to one and start over to check
00120Ar 3                               ; double-cell values
00120Ar 3  1A                           inc
00120Br 3  48                           pha
00120Cr 3               
00120Cr 3  8A                           txa
00120Dr 3  18                           clc
00120Er 3  69 06                        adc #6                  ; skip six bytes
001210r 3  AA                           tax                     ; ( addr u )
001211r 3               
001211r 3  80 92                        bra @table_loop
001213r 3               @no_match:
001213r 3                               ; Bummer, not found. We arrive here with
001213r 3                               ; ( addr u addr u 0 ) and need to return just a zero
001213r 3  8A                           txa
001214r 3  18                           clc
001215r 3  69 0A                        adc #10
001217r 3  AA                           tax                     ; ( addr ) - not ( 0 ) !
001218r 3               
001218r 3  20 rr rr                     jsr xt_false
00121Br 3               @done:
00121Br 3               z_environment_q:
00121Br 3  60                           rts
00121Cr 3               
00121Cr 3               
00121Cr 3               ; Tables for ENVIRONMENT?. We use two separate ones, one for the single-cell
00121Cr 3               ; results and one for the double-celled results. The zero cell at the
00121Cr 3               ; end of each table marks its, uh, end. The strings themselves are defined
00121Cr 3               ; in strings.asm. Note if we add more entries to the single-cell table, we
00121Cr 3               ; have to adapt the result code for double printout, where we subtract 22
00121Cr 3               ; (two bytes each single-cell string and two bytes for the end-of-table
00121Cr 3               ; marker 0000
00121Cr 3               env_table_single:
00121Cr 3  rr rr rr rr          .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
001220r 3  rr rr rr rr  
001224r 3  rr rr        
001226r 3  rr rr rr rr          .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
00122Ar 3  rr rr rr rr  
00122Er 3  rr rr rr rr          .word envs_sc, envs_wl, 0000
001232r 3  00 00        
001234r 3               
001234r 3               env_table_double:
001234r 3  rr rr rr rr          .word envs_max_d, envs_max_ud, 0000
001238r 3  00 00        
00123Ar 3               
00123Ar 3               env_results_single:
00123Ar 3  FF 7F                .word $7FFF     ; /COUNTED-STRING
00123Cr 3  FF 00                .word $00FF     ; /HOLD
00123Er 3  54 00                .word $0054     ; /PAD (this is 84 decimal)
001240r 3  08 00                .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
001242r 3  00 00                .word 0000      ; FLOORED ("FALSE", we have symmetric)
001244r 3  FF 00                .word $00FF     ; MAX-CHAR
001246r 3  FF 7F                .word $7FFF     ; MAX-N
001248r 3  FF FF                .word $FFFF     ; MAX-U
00124Ar 3  80 00                .word $0080     ; RETURN-STACK-CELLS
00124Cr 3  20 00                .word $0020     ; STACK-CELLS (from definitions.asm)
00124Er 3  09 00                .word $0009     ; WORDLISTS
001250r 3               
001250r 3               env_results_double:
001250r 3  FF 7F FF FF          .word $7FFF, $FFFF      ; MAX-D
001254r 3  FF FF FF FF          .word $FFFF, $FFFF      ; MAX-UD
001258r 3               
001258r 3               
001258r 3               ; ## EQUAL ( n n -- f ) "See if TOS and NOS are equal"
001258r 3               ; ## "="  auto  ANS core
001258r 3                       ; """https://forth-standard.org/standard/core/Equal"""
001258r 3               
001258r 3               xt_equal:
001258r 3  20 rr rr                     jsr underflow_2
00125Br 3               
00125Br 3  B5 00                        lda 0,x                 ; LSB
00125Dr 3  D5 02                        cmp 2,x
00125Fr 3  D0 0A                        bne @false
001261r 3               
001261r 3  B5 01                        lda 1,x                 ; MSB
001263r 3  D5 03                        cmp 3,x
001265r 3  D0 04                        bne @false
001267r 3               
001267r 3  A9 FF                        lda #$ff
001269r 3  80 02                        bra @done
00126Br 3               
00126Br 3  A9 00        @false:         lda #0                  ; drop thru to done
00126Dr 3               
00126Dr 3  95 02        @done:          sta 2,x
00126Fr 3  95 03                        sta 3,x
001271r 3               
001271r 3  E8                           inx
001272r 3  E8                           inx
001273r 3               
001273r 3  60           z_equal:        rts
001274r 3               
001274r 3               
001274r 3               
001274r 3               ; ## BLANK ( addr u -- ) "Fill memory region with spaces"
001274r 3               ; ## "blank"  auto  ANS string
001274r 3                       ; """https://forth-standard.org/standard/string/BLANK"""
001274r 3               xt_blank:
001274r 3                               ; We don't check for underflow here because
001274r 3                               ; we deal with that in FILL
001274r 3  CA                           dex
001275r 3  CA                           dex
001276r 3  A9 20                        lda #AscSP
001278r 3  95 00                        sta 0,x
00127Ar 3  74 01                        stz 1,x
00127Cr 3               
00127Cr 3  80 06                        bra xt_fill     ; skip over code for ERASE
00127Er 3               
00127Er 3               
00127Er 3               ; ## ERASE ( addr u -- ) "Fill memory region with zeros"
00127Er 3               ; ## "erase"  auto  ANS core ext
00127Er 3                       ; """https://forth-standard.org/standard/core/ERASE
00127Er 3                       ; Note that ERASE works with "address" units
00127Er 3                       ; (bytes), not cells.
00127Er 3                       ; """
00127Er 3               
00127Er 3               xt_erase:
00127Er 3                               ; We don't check for underflow here because
00127Er 3                               ; we deal with that in FILL
00127Er 3  CA                           dex
00127Fr 3  CA                           dex
001280r 3  74 00                        stz 0,x
001282r 3  74 01                        stz 1,x
001284r 3               
001284r 3                               ; fall through to FILL
001284r 3               
001284r 3               ; ## FILL ( addr u char -- ) "Fill a memory region with a character"
001284r 3               ; ## "fill"  auto  ANS core
001284r 3                       ; """https://forth-standard.org/standard/core/FILL
001284r 3                       ; Fill u bytes of memory with char starting at addr. Note that
001284r 3                       ; this works on bytes, not on cells. On an 8-bit machine such as the
001284r 3                       ; 65c02, this is a serious pain in the rear. It is not defined what
001284r 3                       ; happens when we reach the end of the address space
001284r 3                       ; """
001284r 3               xt_fill:
001284r 3  20 rr rr                     jsr underflow_3
001287r 3               
001287r 3                               ; We use tmp1 to hold the address
001287r 3  B5 04                        lda 4,x         ; LSB
001289r 3  85 rr                        sta tmp1
00128Br 3  B5 05                        lda 5,x
00128Dr 3  85 rr                        sta tmp1+1
00128Fr 3               
00128Fr 3                               ; We use tmp2 to hold the counter
00128Fr 3  B5 02                        lda 2,x
001291r 3  85 rr                        sta tmp2
001293r 3  B5 03                        lda 3,x
001295r 3  85 rr                        sta tmp2+1
001297r 3               
001297r 3                               ; We use Y to hold the character
001297r 3  B5 00                        lda 0,x
001299r 3  A8                           tay
00129Ar 3               @loop:
00129Ar 3                               ; Unfortunately, we also need to make sure that we don't
00129Ar 3                               ; write further than the end of the RAM. So RAM_END must
00129Ar 3                               ; be larger or equal to the current address
00129Ar 3  A9 80                        lda #>ram_end           ; MSB
00129Cr 3  C5 rr                        cmp tmp1+1
00129Er 3  90 21                        bcc @done               ; RAM_END < TMP1, so leave
0012A0r 3  D0 06                        bne @check_counter      ; RAM_END is not smaller and not equal
0012A2r 3               
0012A2r 3  A9 00                        lda #<ram_end           ; LSB, because MSBs were equal
0012A4r 3  C5 rr                        cmp tmp1
0012A6r 3  90 19                        bcc @done               ; RAM_END < TMP1, so leave
0012A8r 3               
0012A8r 3               @check_counter:
0012A8r 3                               ; See if our counter has reached zero
0012A8r 3  A5 rr                        lda tmp2
0012AAr 3  05 rr                        ora tmp2+1
0012ACr 3  F0 13                        beq @done
0012AEr 3               
0012AEr 3                               ; We're not in ROM and we still have stuff on the counter, so
0012AEr 3                               ; let's actually do what we came here to do
0012AEr 3  98                           tya
0012AFr 3  92 rr                        sta (tmp1)
0012B1r 3               
0012B1r 3                               ; Adjust the counter
0012B1r 3  A5 rr                        lda tmp2
0012B3r 3  D0 02                        bne @1
0012B5r 3  C6 rr                        dec tmp2+1
0012B7r 3  C6 rr        @1:               dec tmp2
0012B9r 3               
0012B9r 3                               ; Next address
0012B9r 3  E6 rr                        inc tmp1
0012BBr 3  D0 DD                        bne @loop
0012BDr 3  E6 rr                        inc tmp1+1
0012BFr 3               
0012BFr 3  80 D9                        bra @loop
0012C1r 3               
0012C1r 3               @done:
0012C1r 3                               ; Drop three cells off the Data Stack. This uses one byte
0012C1r 3                               ; less than six times INX
0012C1r 3  8A                           txa
0012C2r 3  18                           clc
0012C3r 3  69 06                        adc #6
0012C5r 3  AA                           tax
0012C6r 3               z_blank:
0012C6r 3               z_erase:
0012C6r 3  60           z_fill:         rts
0012C7r 3               
0012C7r 3               
0012C7r 3               
0012C7r 3               ; ## EXECUTE ( xt -- ) "Jump to word based on execution token"
0012C7r 3               ; ## "execute"  auto  ANS core
0012C7r 3                       ; """https://forth-standard.org/standard/core/EXECUTE"""
0012C7r 3               xt_execute:
0012C7r 3  20 rr rr                     jsr underflow_1
0012CAr 3               
0012CAr 3  20 rr rr                     jsr doexecute   ; do not combine to JMP (native coding)
0012CDr 3               
0012CDr 3  60           z_execute:      rts
0012CEr 3               
0012CEr 3               doexecute:
0012CEr 3  B5 00                        lda 0,x
0012D0r 3  85 rr                        sta ip
0012D2r 3  B5 01                        lda 1,x
0012D4r 3  85 rr                        sta ip+1
0012D6r 3               
0012D6r 3  E8                           inx
0012D7r 3  E8                           inx
0012D8r 3               
0012D8r 3                               ; we don't need a RTS here because we highjack the RTS of
0012D8r 3                               ; the word we're calling to get back to xt_execute
0012D8r 3  6C rr rr                     jmp (ip)
0012DBr 3               
0012DBr 3               ; end of doexecute
0012DBr 3               
0012DBr 3               
0012DBr 3               ; ## EXECUTE_PARSING ( addr u xt -- ) "Pass a string to a parsing word"
0012DBr 3               ; ## "execute-parsing"  auto  Gforth
0012DBr 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
0012DBr 3                       ; Execute the parsing word defined by the execution token (xt) on the
0012DBr 3                       ; string as if it were passed on the command line. See the file
0012DBr 3                       ; tests/tali.fs for examples.
0012DBr 3                       ;
0012DBr 3                       ; Note that this word is coded completely
0012DBr 3                       ; different in its Gforth version, see the file execute-parsing.fs
0012DBr 3                       ; (in /usr/share/gforth/0.7.3/compat/ on Ubuntu 18.04 LTS) for details.
0012DBr 3                       ; """
0012DBr 3               xt_execute_parsing:
0012DBr 3  20 rr rr                     jsr underflow_3
0012DEr 3               
0012DEr 3  20 rr rr                     jsr xt_input_to_r       ; save normal input for later
0012E1r 3  20 rr rr                     jsr xt_not_rote         ; -ROT ( xt addr u )
0012E4r 3               
0012E4r 3  B5 00                        lda 0,x                 ; TOS is new ciblen
0012E6r 3  85 rr                        sta ciblen
0012E8r 3  B5 01                        lda 1,x
0012EAr 3  85 rr                        sta ciblen+1
0012ECr 3               
0012ECr 3  B5 02                        lda 2,x                 ; NOS is new cib
0012EEr 3  85 rr                        sta cib
0012F0r 3  B5 03                        lda 3,x
0012F2r 3  85 rr                        sta cib+1
0012F4r 3               
0012F4r 3  64 rr                        stz toin                ; Set >IN to zero
0012F6r 3  64 rr                        stz toin+1
0012F8r 3               
0012F8r 3  20 rr rr                     jsr xt_two_drop         ; 2DROP ( xt )
0012FBr 3  20 rr rr                     jsr xt_execute
0012FEr 3               
0012FEr 3  20 rr rr                     jsr xt_r_to_input
001301r 3               
001301r 3               z_execute_parsing:
001301r 3  60                           rts
001302r 3               
001302r 3               
001302r 3               ; ## EXIT ( -- ) "Return control to the calling word immediately"
001302r 3               ; ## "exit"  auto  ANS core
001302r 3                       ; """https://forth-standard.org/standard/core/EXIT
001302r 3                       ; If we're in a loop, we need to UNLOOP first and get everything
001302r 3                       ; we we might have put on the Return Stack off as well. This should
001302r 3                       ; be natively compiled.
001302r 3                       ; """
001302r 3               
001302r 3               xt_exit:
001302r 3  60                           rts             ; keep before z_exit
001303r 3               z_exit:                         ; never reached
001303r 3               
001303r 3               
001303r 3               
001303r 3               ; ## FALSE ( -- f ) "Push flag FALSE to Data Stack"
001303r 3               ; ## "false"  auto  ANS core ext
001303r 3                       ; """https://forth-standard.org/standard/core/FALSE"""
001303r 3               xt_false:
001303r 3  CA                           dex
001304r 3  CA                           dex
001305r 3  74 00                        stz 0,x
001307r 3  74 01                        stz 1,x
001309r 3               
001309r 3  60           z_false:        rts
00130Ar 3               
00130Ar 3               
00130Ar 3               ; ## FETCH ( addr -- n ) "Push cell content from memory to stack"
00130Ar 3               ; ## "@"  auto  ANS core
00130Ar 3                       ; """https://forth-standard.org/standard/core/Fetch"""
00130Ar 3               xt_fetch:
00130Ar 3  20 rr rr                     jsr underflow_1
00130Dr 3               
00130Dr 3  A1 00                        lda (0,x)               ; LSB
00130Fr 3  A8                           tay
001310r 3  F6 00                        inc 0,x
001312r 3  D0 02                        bne @1
001314r 3  F6 01                        inc 1,x
001316r 3               @1:
001316r 3  A1 00                        lda (0,x)               ; MSB
001318r 3  95 01                        sta 1,x
00131Ar 3  94 00                        sty 0,x
00131Cr 3               
00131Cr 3  60           z_fetch:        rts
00131Dr 3               
00131Dr 3               
00131Dr 3               ; ## FIND ( caddr -- addr 0 | xt 1 | xt -1 ) "Find word in Dictionary"
00131Dr 3               ; ## "find"  auto  ANS core
00131Dr 3                       ; """https://forth-standard.org/standard/core/FIND
00131Dr 3                       ; Included for backwards compatibility only, because it still
00131Dr 3                       ; can be found in so may examples. It should, however, be replaced
00131Dr 3                       ; by FIND-NAME. Counted string either returns address with a FALSE
00131Dr 3                       ; flag if not found in the Dictionary, or the xt with a flag to
00131Dr 3                       ; indicate if this is immediate or not. FIND is a wrapper around
00131Dr 3                       ; FIND-NAME, we get this all over with as quickly as possible. See
00131Dr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
00131Dr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
00131Dr 3                       ; """
00131Dr 3               
00131Dr 3               xt_find:
00131Dr 3  20 rr rr                     jsr underflow_1
001320r 3               
001320r 3                               ; Save address in case conversion fails. We use the
001320r 3                               ; Return Stack instead of temporary variables like TMP1
001320r 3                               ; because this is shorter and anybody still using FIND
001320r 3                               ; can't be worried about speed anyway
001320r 3  B5 01                        lda 1,x                 ; MSB
001322r 3  48                           pha
001323r 3  B5 00                        lda 0,x                 ; LSB
001325r 3  48                           pha
001326r 3               
001326r 3                               ; Convert ancient-type counted string address to
001326r 3                               ; modern format
001326r 3  20 rr rr                     jsr xt_count            ; ( caddr -- addr u )
001329r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt | 0 )
00132Cr 3               
00132Cr 3  B5 00                        lda 0,x
00132Er 3  15 01                        ora 1,x
001330r 3  D0 0B                        bne @found_word
001332r 3               
001332r 3                               ; No word found. Return address of the string and a false
001332r 3                               ; flag
001332r 3  20 rr rr                     jsr xt_false            ; ( 0 0 )
001335r 3               
001335r 3                               ; The address needs to be restored.
001335r 3  68                           pla                     ; LSB of address
001336r 3  95 02                        sta 2,x
001338r 3  68                           pla
001339r 3  95 03                        sta 3,x                 ; MSB of address
00133Br 3               
00133Br 3  80 27                        bra @done               ; ( addr 0 )
00133Dr 3               
00133Dr 3               @found_word:
00133Dr 3                               ; We don't need the address after all, dump it
00133Dr 3  68                           pla
00133Er 3  68                           pla
00133Fr 3               
00133Fr 3                               ; We arrive here with ( nt ) on the TOS. Now we have to
00133Fr 3                               ; convert the return values to FIND's format
00133Fr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001342r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001345r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001348r 3               
001348r 3  A0 00                        ldy #0                  ; Prepare flag
00134Ar 3               
00134Ar 3                               ; The flags are in the second byte of the header
00134Ar 3  F6 00                        inc 0,x
00134Cr 3  D0 02                        bne @1
00134Er 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
001350r 3               @1:
001350r 3  A1 00                        lda (0,x)               ; ( xt char )
001352r 3  29 04                        and #IM
001354r 3  D0 08                        bne @immediate          ; bit set, we're immediate
001356r 3               
001356r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
001358r 3  95 00                        sta 0,x
00135Ar 3  95 01                        sta 1,x
00135Cr 3  80 06                        bra @done
00135Er 3               
00135Er 3               @immediate:
00135Er 3  A9 01                        lda #1                  ; We're immediate, return 1
001360r 3  95 00                        sta 0,x
001362r 3  74 01                        stz 1,x
001364r 3               @done:
001364r 3  60           z_find:         rts
001365r 3               
001365r 3               
001365r 3               
001365r 3               ; ## FIND_NAME ( addr u -- nt|0 ) "Get the name token of input word"
001365r 3               ; ## "find-name"  auto  Gforth
001365r 3               
001365r 3               xt_find_name:
001365r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001365r 3                       ; Given a string, find the Name Token (nt) of a word or return
001365r 3                       ; zero if the word is not in the dictionary. We use this instead of
001365r 3                       ; ancient FIND to look up words in the Dictionary passed by
001365r 3                       ; PARSE-NAME. Note this returns the nt, not the xt of a word like
001365r 3                       ; FIND. To convert, use NAME>INT. This is a Gforth word. See
001365r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001365r 3                       ; FIND calls this word
001365r 3                       ; """
001365r 3  20 rr rr                     jsr underflow_2
001368r 3               
001368r 3                               ; check for special case of an empty string (length zero)
001368r 3  B5 00                        lda 0,x
00136Ar 3  15 01                        ora 1,x
00136Cr 3  D0 03                        bne @nonempty
00136Er 3               
00136Er 3  4C rr rr                     jmp @fail_done
001371r 3               
001371r 3               @nonempty:
001371r 3                               ; Set up for traversing the wordlist search order.
001371r 3  64 rr                        stz tmp3                ; Start at the beginning
001373r 3               
001373r 3               @wordlist_loop:
001373r 3  A0 1E                        ldy #num_order_offset   ; Compare to byte variable #ORDER
001375r 3  A5 rr                        lda tmp3
001377r 3  D1 rr                        cmp (up),y              ; Check to see if we are done
001379r 3  D0 03                        bne @have_string
00137Br 3               
00137Br 3                               ; We ran out of wordlists to search.
00137Br 3  4C rr rr                     jmp @fail_done
00137Er 3               
00137Er 3               @have_string:
00137Er 3                               ; set up first loop iteration
00137Er 3               
00137Er 3                               ; Get the current wordlist id
00137Er 3  18                           clc             ; SEARCH-ORDER is array of bytes.
00137Fr 3  69 1F                        adc #search_order_offset
001381r 3  A8                           tay
001382r 3  B1 rr                        lda (up),y      ; Get the id byte, which is the offset
001384r 3                                               ; into the cell array WORDLISTS
001384r 3               
001384r 3                               ; Get the DP for that wordlist.
001384r 3  0A                           asl                     ; Turn offset into cells offset.
001385r 3  18                           clc
001386r 3  69 06                        adc #wordlists_offset
001388r 3  A8                           tay
001389r 3  B1 rr                        lda (up),y
00138Br 3  85 rr                        sta tmp1
00138Dr 3  C8                           iny
00138Er 3  B1 rr                        lda (up),y
001390r 3  85 rr                        sta tmp1+1
001392r 3               
001392r 3  B5 02                        lda 2,x                 ; Address of mystery string
001394r 3  85 rr                        sta tmp2
001396r 3  B5 03                        lda 3,x
001398r 3  85 rr                        sta tmp2+1
00139Ar 3               
00139Ar 3               @loop:
00139Ar 3                               ; first quick test: Are strings the same length?
00139Ar 3  B2 rr                        lda (tmp1)
00139Cr 3  D5 00                        cmp 0,x
00139Er 3  D0 54                        bne @next_entry
0013A0r 3               
0013A0r 3               @compare_string:
0013A0r 3                               ; are the same length, so we now have to compare each
0013A0r 3                               ; character
0013A0r 3               
0013A0r 3                               ; second quick test: Is the first character the same?
0013A0r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
0013A2r 3               
0013A2r 3                               ; Lowercase the incoming charcter.
0013A2r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
0013A4r 3  B0 07                        bcs @compare_first
0013A6r 3  C9 41                        cmp #$41        ; ASCII 'A'
0013A8r 3  90 03                        bcc @compare_first
0013AAr 3               
0013AAr 3                               ; An uppercase letter has been located.  Make it
0013AAr 3                               ; lowercase.
0013AAr 3  18                           clc
0013ABr 3  69 20                        adc #$20
0013ADr 3               
0013ADr 3               @compare_first:
0013ADr 3  A0 08                        ldy #8          ; Offset in nt to name
0013AFr 3  D1 rr                        cmp (tmp1),y    ; first character of current word
0013B1r 3  D0 41                        bne @next_entry
0013B3r 3               
0013B3r 3                               ; String length is the same and the first character is the
0013B3r 3                               ; same. If the length of the string is 1, we're already done
0013B3r 3  B5 00                        lda 0,x
0013B5r 3  3A                           dec
0013B6r 3  F0 2C                        beq @success
0013B8r 3               
0013B8r 3                               ; No such luck: The strings are the same length and the first
0013B8r 3                               ; char is the same, but the word is more than one char long.
0013B8r 3                               ; So we suck it up and compare every single character. We go
0013B8r 3                               ; from back to front, because words like CELLS and CELL+ would
0013B8r 3                               ; take longer otherwise. We can also shorten the loop by one
0013B8r 3                               ; because we've already compared the first char.
0013B8r 3               
0013B8r 3                               ; The string of the word we're testing against is 8 bytes down
0013B8r 3  A5 rr                        lda tmp1
0013BAr 3  48                           pha             ; Preserve tmp1 on the return stack.
0013BBr 3  18                           clc
0013BCr 3  69 08                        adc #8
0013BEr 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
0013C0r 3  A5 rr                        lda tmp1+1
0013C2r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
0013C3r 3  69 00                        adc #0          ; we only need the carry
0013C5r 3  85 rr                        sta tmp1+1
0013C7r 3               
0013C7r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
0013C9r 3  88                           dey
0013CAr 3               
0013CAr 3               @string_loop:
0013CAr 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
0013CCr 3               
0013CCr 3                               ; Lowercase the incoming charcter.
0013CCr 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
0013CEr 3  B0 07                        bcs @check_char
0013D0r 3  C9 41                        cmp #$41        ; ASCII 'A'
0013D2r 3  90 03                        bcc @check_char
0013D4r 3               
0013D4r 3                               ; An uppercase letter has been located.  Make it
0013D4r 3                               ; lowercase.
0013D4r 3  18                           clc
0013D5r 3  69 20                        adc #$20
0013D7r 3               
0013D7r 3               @check_char:
0013D7r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
0013D9r 3  D0 13                        bne @next_entry_tmp1
0013DBr 3               
0013DBr 3  88                           dey
0013DCr 3  D0 EC                        bne @string_loop
0013DEr 3               
0013DEr 3               @success_tmp1:
0013DEr 3  68                           pla             ; Restore tmp1 from the return stack.
0013DFr 3  85 rr                        sta tmp1+1
0013E1r 3  68                           pla
0013E2r 3  85 rr                        sta tmp1
0013E4r 3               
0013E4r 3               @success:
0013E4r 3                               ; The strings match. Put correct nt NOS, because we'll drop
0013E4r 3                               ; TOS before we leave
0013E4r 3  A5 rr                        lda tmp1
0013E6r 3  95 02                        sta 2,x
0013E8r 3  A5 rr                        lda tmp1+1
0013EAr 3  95 03                        sta 3,x
0013ECr 3               
0013ECr 3  80 20                        bra @done
0013EEr 3               
0013EEr 3               @next_entry_tmp1:
0013EEr 3  68                           pla             ; Restore tmp1 from the return stack.
0013EFr 3  85 rr                        sta tmp1+1
0013F1r 3  68                           pla
0013F2r 3  85 rr                        sta tmp1
0013F4r 3               
0013F4r 3               @next_entry:
0013F4r 3                               ; Not the same, so we get the next word. Next header
0013F4r 3                               ; address is two bytes down
0013F4r 3  A0 02                        ldy #2
0013F6r 3  B1 rr                        lda (tmp1),y
0013F8r 3  48                           pha
0013F9r 3  C8                           iny
0013FAr 3  B1 rr                        lda (tmp1),y
0013FCr 3  85 rr                        sta tmp1+1
0013FEr 3  68                           pla
0013FFr 3  85 rr                        sta tmp1
001401r 3               
001401r 3                               ; If we got a zero, we've walked the whole Dictionary and
001401r 3                               ; return as a failure, otherwise try again
001401r 3  05 rr                        ora tmp1+1
001403r 3  D0 95                        bne @loop
001405r 3               
001405r 3                               ; Move on to the next wordlist in the search order.
001405r 3  E6 rr                        inc tmp3
001407r 3  4C rr rr                     jmp @wordlist_loop
00140Ar 3               
00140Ar 3               @fail_done:
00140Ar 3  74 02                        stz 2,x         ; failure flag
00140Cr 3  74 03                        stz 3,x
00140Er 3               @done:
00140Er 3  E8                           inx
00140Fr 3  E8                           inx
001410r 3               
001410r 3  60           z_find_name:    rts
001411r 3               
001411r 3               
001411r 3               
001411r 3               ; ## FLUSH ( -- ) "Save dirty buffers and empty buffers"
001411r 3               ; ## "flush"  auto  ANS block
001411r 3                       ; """https://forth-standard.org/standard/block/FLUSH"""
001411r 3               xt_flush:
001411r 3  20 rr rr                     jsr xt_save_buffers
001414r 3               
001414r 3                               ; Set the buffer status to empty.
001414r 3  A0 2C                        ldy #buffstatus_offset
001416r 3  A9 00                        lda #0
001418r 3  91 rr                        sta (up),y      ; Only LSB is used.
00141Ar 3               z_flush:
00141Ar 3  60                           rts
00141Br 3               
00141Br 3               
00141Br 3               ; ## FM_SLASH_MOD ( d n1  -- rem n2 ) "Floored signed division"
00141Br 3               ; ## "fm/mod"  auto  ANS core
00141Br 3                       ; """https://forth-standard.org/standard/core/FMDivMOD
00141Br 3                       ; Note that by default, Tali Forth uses SM/REM for most things.
00141Br 3                       ;
00141Br 3                       ; There are various ways to realize this. We follow EForth with
00141Br 3                       ;    DUP 0< DUP >R  IF NEGATE >R DNEGATE R> THEN >R DUP
00141Br 3                       ;    0<  IF R@ + THEN  R> UM/MOD R> IF SWAP NEGATE SWAP THEN
00141Br 3                       ; See (http://www.forth.org/eforth.html). However you can also
00141Br 3                       ; go FM/MOD via SM/REM (http://www.figuk.plus.com/build/arith.htm):
00141Br 3                       ;     DUP >R  SM/REM DUP 0< IF SWAP R> + SWAP 1+ ELSE  R> DROP THEN
00141Br 3                       ; """
00141Br 3               
00141Br 3               xt_fm_slash_mod:
00141Br 3  20 rr rr                     jsr underflow_3
00141Er 3               
00141Er 3                               ; if sign of n1 is negative, negate both n1 and d
00141Er 3  64 rr                        stz tmp2        ; default: n is positive
001420r 3  B5 01                        lda 1,x         ; MSB of n1
001422r 3  10 0E                        bpl @check_d
001424r 3               
001424r 3  E6 rr                        inc tmp2        ; set flag to negative for n1
001426r 3  20 rr rr                     jsr xt_negate   ; NEGATE
001429r 3  20 rr rr                     jsr xt_to_r     ; >R
00142Cr 3  20 rr rr                     jsr xt_dnegate  ; DNEGATE
00142Fr 3  20 rr rr                     jsr xt_r_from   ; R>
001432r 3               
001432r 3               @check_d:
001432r 3                               ; If d is negative, add n1 to high cell of d
001432r 3  B5 03                        lda 3,x         ; MSB of high word of d
001434r 3  10 0D                        bpl @multiply
001436r 3               
001436r 3  18                           clc
001437r 3  B5 00                        lda 0,x         ; LSB of n1
001439r 3  75 02                        adc 2,x         ; LSB of dh
00143Br 3  95 02                        sta 2,x
00143Dr 3               
00143Dr 3  B5 01                        lda 1,x         ; MSB of n1
00143Fr 3  75 03                        adc 3,x         ; MSB of dh
001441r 3  95 03                        sta 3,x
001443r 3               
001443r 3               @multiply:
001443r 3  20 rr rr                     jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
001446r 3               
001446r 3                               ; if n was negative, negate the result
001446r 3  A5 rr                        lda tmp2
001448r 3  F0 07                        beq @done
00144Ar 3               
00144Ar 3  E8                           inx             ; pretend that we SWAP
00144Br 3  E8                           inx
00144Cr 3  20 rr rr                     jsr xt_negate
00144Fr 3  CA                           dex
001450r 3  CA                           dex
001451r 3               @done:
001451r 3  60           z_fm_slash_mod: rts
001452r 3               
001452r 3               
001452r 3               
001452r 3               ; ## FORTH ( -- ) "Replace first WID in search order with Forth-Wordlist"
001452r 3               ; ## "forth"  auto  ANS search ext
001452r 3                       ; """https://forth-standard.org/standard/search/FORTH"""
001452r 3               xt_forth:
001452r 3  A0 1F                        ldy #search_order_offset
001454r 3  A9 00                        lda #0          ; The WID for Forth is 0.
001456r 3               
001456r 3  91 rr                        sta (up),y
001458r 3               z_forth:
001458r 3  60                           rts
001459r 3               
001459r 3               
001459r 3               ; This is a special jsr target to skip the zeroing of BLK at the beginning
001459r 3               ; of evaluate.  It's used by LOAD to allow setting BLK while the block is
001459r 3               ; being evaluated.  Evaluate's normal behavior is to zero BLK.
001459r 3               load_evaluate:
001459r 3                               ; Set a flag (using tmp1) to not zero BLK
001459r 3  A9 FF                        lda #$FF
00145Br 3  85 rr                        sta tmp1
00145Dr 3  80 11                        bra load_evaluate_start
00145Fr 3               
00145Fr 3               ; ## EVALUATE ( addr u -- ) "Execute a string"
00145Fr 3               ; ## "evaluate"  auto  ANS core
00145Fr 3                       ; """https://forth-standard.org/standard/core/EVALUATE
00145Fr 3                       ; Set SOURCE-ID to -1, make addr u the input source, set >IN to zero.
00145Fr 3                       ; After processing the line, revert to old input source. We use this
00145Fr 3                       ; to compile high-level Forth words and user-defined words during
00145Fr 3                       ; start up and cold boot. In contrast to ACCEPT, we need to, uh,
00145Fr 3                       ; accept more than 255 characters here, even though it's a pain in
00145Fr 3                       ; the 8-bit.
00145Fr 3                       ; """
00145Fr 3               
00145Fr 3               xt_evaluate:
00145Fr 3  20 rr rr                     jsr underflow_2
001462r 3               
001462r 3                               ; Clear the flag to zero BLK.  Only LOAD will set the flag,
001462r 3                               ; and will set the block number.
001462r 3  64 rr                        stz tmp1
001464r 3               
001464r 3                               ; If u is zero (which can happen a lot for the user-defined
001464r 3                               ; words), just leave again
001464r 3  B5 00                        lda 0,x
001466r 3  15 01                        ora 1,x
001468r 3  D0 06                        bne _eval_got_work
00146Ar 3               
00146Ar 3  E8                           inx
00146Br 3  E8                           inx
00146Cr 3  E8                           inx
00146Dr 3  E8                           inx
00146Er 3               
00146Er 3  80 42                        bra _eval_done
001470r 3               
001470r 3               ; Special entry point for LOAD to bypass the zeroing of BLK.
001470r 3               load_evaluate_start:
001470r 3               _eval_got_work:
001470r 3                               ; Save the current value of BLK on the return stack.
001470r 3  A0 01                        ldy #blk_offset+1
001472r 3  B1 rr                        lda (up),y
001474r 3  48                           pha
001475r 3  88                           dey
001476r 3  B1 rr                        lda (up),y
001478r 3  48                           pha
001479r 3               
001479r 3                               ; See if we should zero BLK.
001479r 3  A5 rr                        lda tmp1
00147Br 3  D0 05                        bne @nozero
00147Dr 3               
00147Dr 3                               ; Set BLK to zero.
00147Dr 3                               ; lda #0        ; A is already zero from loading tmp1
00147Dr 3  91 rr                        sta (up),y
00147Fr 3  C8                           iny
001480r 3  91 rr                        sta (up),y
001482r 3               
001482r 3               @nozero:
001482r 3                               ; Save the input state to the Return Stack
001482r 3  20 rr rr                     jsr xt_input_to_r
001485r 3               
001485r 3                               ; set SOURCE-ID to -1
001485r 3  A9 FF                        lda #$ff
001487r 3  85 rr                        sta insrc
001489r 3  85 rr                        sta insrc+1
00148Br 3               
00148Br 3                               ; set >IN to zero
00148Br 3  64 rr                        stz toin
00148Dr 3  64 rr                        stz toin+1
00148Fr 3               
00148Fr 3                               ; move TOS and NOS to input buffers
00148Fr 3  B5 00                        lda 0,x
001491r 3  85 rr                        sta ciblen
001493r 3  B5 01                        lda 1,x
001495r 3  85 rr                        sta ciblen+1
001497r 3               
001497r 3  B5 02                        lda 2,x
001499r 3  85 rr                        sta cib
00149Br 3  B5 03                        lda 3,x
00149Dr 3  85 rr                        sta cib+1
00149Fr 3               
00149Fr 3  E8                           inx             ; A clean stack is a clean mind
0014A0r 3  E8                           inx
0014A1r 3  E8                           inx
0014A2r 3  E8                           inx
0014A3r 3               
0014A3r 3  20 rr rr                     jsr interpret   ; ( -- )
0014A6r 3               
0014A6r 3                               ; restore variables
0014A6r 3  20 rr rr                     jsr xt_r_to_input
0014A9r 3               
0014A9r 3                               ; Restore BLK from the return stack.
0014A9r 3  A0 00                        ldy #blk_offset
0014ABr 3  68                           pla
0014ACr 3  91 rr                        sta (up),y
0014AEr 3  C8                           iny
0014AFr 3  68                           pla
0014B0r 3  91 rr                        sta (up),y
0014B2r 3               
0014B2r 3               _eval_done:
0014B2r 3  60           z_evaluate:     rts
0014B3r 3               
0014B3r 3               
0014B3r 3               
0014B3r 3               ; ## FORTH_WORDLIST ( -- u ) "WID for the Forth Wordlist"
0014B3r 3               ; ## "forth-wordlist"  auto  ANS search
0014B3r 3                       ; """https://forth-standard.org/standard/search/FORTH-WORDLIST"""
0014B3r 3                       ; This is a dummy entry, the actual code is shared with ZERO.
0014B3r 3               
0014B3r 3               
0014B3r 3               ; ## GET_CURRENT ( -- wid ) "Get the id of the compilation wordlist"
0014B3r 3               ; ## "get-current" auto ANS search
0014B3r 3                       ; """https://forth-standard.org/standard/search/GET-CURRENT"""
0014B3r 3               
0014B3r 3               xt_get_current:
0014B3r 3                               ; This is a little different than some of the variables
0014B3r 3                               ; in the user area as we want the value rather than
0014B3r 3                               ; the address.
0014B3r 3  CA                           dex
0014B4r 3  CA                           dex
0014B5r 3  A0 04                        ldy #current_offset
0014B7r 3  B1 rr                        lda (up),y
0014B9r 3  95 00                        sta 0,x         ; CURRENT is a byte variable
0014BBr 3  74 01                        stz 1,x         ; so the MSB is zero.
0014BDr 3               
0014BDr 3  60           z_get_current:  rts
0014BEr 3               
0014BEr 3               
0014BEr 3               
0014BEr 3               ; ## GET_ORDER ( -- wid_n .. wid_1 n) "Get the current search order"
0014BEr 3               ; ## "get-order" auto ANS search
0014BEr 3                       ; """https://forth-standard.org/standard/search/GET-ORDER"""
0014BEr 3               
0014BEr 3               xt_get_order:
0014BEr 3                               ; Get #ORDER - the number of wordlists in the search order.
0014BEr 3  A0 1E                        ldy #num_order_offset
0014C0r 3  B1 rr                        lda (up),y
0014C2r 3  85 rr                        sta tmp1
0014C4r 3  F0 16                        beq @done       ; If zero, there are no wordlists.
0014C6r 3               
0014C6r 3               @loop:
0014C6r 3                               ; Count down towards the front of the list.
0014C6r 3                               ; By decrementing first, we also turn the length into an offset.
0014C6r 3  C6 rr                        dec tmp1        ; Count down by bytes.
0014C8r 3               
0014C8r 3                               ; Get a pointer to the current wordlist, working back to front.
0014C8r 3  A9 1F                        lda #search_order_offset
0014CAr 3  18                           clc
0014CBr 3  65 rr                        adc tmp1
0014CDr 3  A8                           tay
0014CEr 3               
0014CEr 3                               ; Put that wordlist id on the stack.
0014CEr 3  CA                           dex
0014CFr 3  CA                           dex
0014D0r 3  B1 rr                        lda (up),y
0014D2r 3  95 00                        sta 0,x         ; Search order array is bytes, so
0014D4r 3  74 01                        stz 1,x         ; put a zero in the high byte.
0014D6r 3               
0014D6r 3                               ; See if that was the last one to process (first in the list).
0014D6r 3  A9 00                        lda #0
0014D8r 3  C5 rr                        cmp tmp1
0014DAr 3  D0 EA                        bne @loop
0014DCr 3               
0014DCr 3               @done:
0014DCr 3                               ; Put the number of items on the stack.
0014DCr 3  CA                           dex
0014DDr 3  CA                           dex
0014DEr 3  A0 1E                        ldy #num_order_offset
0014E0r 3  B1 rr                        lda (up),y
0014E2r 3  95 00                        sta 0,x
0014E4r 3  74 01                        stz 1,x         ; We only support 8 wordlists.
0014E6r 3               
0014E6r 3  60           z_get_order:    rts
0014E7r 3               
0014E7r 3               
0014E7r 3               
0014E7r 3               ; ## GREATER_THAN ( n n -- f ) "See if NOS is greater than TOS"
0014E7r 3               ; ## ">"  auto  ANS core
0014E7r 3                       ; """https://forth-standard.org/standard/core/more"""
0014E7r 3               
0014E7r 3               xt_greater_than:
0014E7r 3  20 rr rr                     jsr underflow_2
0014EAr 3               
0014EAr 3  A0 00                        ldy #0          ; default false
0014ECr 3  20 rr rr                     jsr compare_16bit
0014EFr 3               
0014EFr 3                               ; for signed numbers, NOS>TOS gives us Z=0 and N=1
0014EFr 3  F0 03                        beq @false
0014F1r 3  10 01                        bpl @false
0014F3r 3               
0014F3r 3                               ; true
0014F3r 3  88                           dey
0014F4r 3               @false:
0014F4r 3  98                           tya
0014F5r 3               
0014F5r 3  E8                           inx
0014F6r 3  E8                           inx
0014F7r 3  95 00                        sta 0,x
0014F9r 3  95 01                        sta 1,x
0014FBr 3               
0014FBr 3  60           z_greater_than: rts
0014FCr 3               
0014FCr 3               
0014FCr 3               
0014FCr 3               ; ## HERE ( -- addr ) "Put Compiler Pointer on Data Stack"
0014FCr 3               ; ## "here"  auto  ANS core
0014FCr 3                       ; """https://forth-standard.org/standard/core/HERE
0014FCr 3                       ; This code is also used by the assembler directive ARROW
0014FCr 3                       ; ("->") though as immediate"""
0014FCr 3               xt_here:
0014FCr 3               xt_asm_arrow:
0014FCr 3  CA                           dex
0014FDr 3  CA                           dex
0014FEr 3  A5 rr                        lda cp
001500r 3  95 00                        sta 0,x
001502r 3  A5 rr                        lda cp+1
001504r 3  95 01                        sta 1,x
001506r 3               
001506r 3               z_asm_arrow:
001506r 3  60           z_here:         rts
001507r 3               
001507r 3               
001507r 3               ; ## HEX ( -- ) "Change base radix to hexadecimal"
001507r 3               ; ## "hex"  auto  ANS core ext
001507r 3                       ; """https://forth-standard.org/standard/core/HEX"""
001507r 3               xt_hex:
001507r 3  A9 10                        lda #16
001509r 3  85 rr                        sta base
00150Br 3  64 rr                        stz base+1              ; paranoid
00150Dr 3               
00150Dr 3  60           z_hex:          rts
00150Er 3               
00150Er 3               
00150Er 3               ; ## HEXSTORE ( addr1 u1 addr2 -- u2 ) "Store a list of numbers"
00150Er 3               ; ## "hexstore"  auto  Tali
00150Er 3                       ; """Given a string addr1 u1 with numbers in the current base seperated
00150Er 3                       ; by spaces, store the numbers at the address addr2, returning the
00150Er 3                       ; number of elements. Non-number elements are skipped, an zero-length
00150Er 3                       ; string produces a zero output.
00150Er 3                       ; """
00150Er 3               
00150Er 3               xt_hexstore:
00150Er 3  20 rr rr                     jsr underflow_3
001511r 3               
001511r 3  20 rr rr                     jsr xt_dup              ; Save copy of original address
001514r 3  20 rr rr                     jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
001517r 3               
001517r 3               @loop:
001517r 3                               ; Loop until string is totally consumed
001517r 3  B5 00                        lda 0,x
001519r 3  15 01                        ora 1,x
00151Br 3  F0 36                        beq @done
00151Dr 3               
00151Dr 3  20 rr rr                     jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
001520r 3               
001520r 3                               ; Prepare the conversion of the number.
001520r 3  20 rr rr                     jsr xt_two_to_r
001523r 3  20 rr rr                     jsr xt_zero
001526r 3  20 rr rr                     jsr xt_zero
001529r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
00152Cr 3  20 rr rr                     jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
00152Fr 3               
00152Fr 3                               ; If u4 is not zero, we have leftover chars and have to do
00152Fr 3                               ; things differently
00152Fr 3  B5 00                        lda 0,x
001531r 3  15 01                        ora 1,x
001533r 3  D0 17                        bne @have_chars_left
001535r 3               
001535r 3                               ; Normal case, this number is all done
001535r 3  20 rr rr                     jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
001538r 3  20 rr rr                     jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
00153Br 3               
00153Br 3                               ; Store the new value
00153Br 3  20 rr rr                     jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
00153Er 3  20 rr rr                     jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
001541r 3               
001541r 3                               ; Increase counter
001541r 3  20 rr rr                     jsr xt_r_from           ; R>
001544r 3  20 rr rr                     jsr xt_one_plus         ; 1+
001547r 3  20 rr rr                     jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
00154Ar 3  80 CB                        bra @loop
00154Cr 3               
00154Cr 3               @have_chars_left:
00154Cr 3                               ; Pathological case: Drop the rest of this number off the stack
00154Cr 3                               ; and continue with the next word. Doesn't print a warning. We
00154Cr 3                               ; need to drop four cells, that is, eight bytes
00154Cr 3  8A                           txa
00154Dr 3  18                           clc
00154Er 3  69 08                        adc #8
001550r 3  AA                           tax
001551r 3  80 C4                        bra @loop
001553r 3               
001553r 3               @done:
001553r 3                               ; Clean up return stack and calculate number of chars stored
001553r 3  E8                           inx
001554r 3  E8                           inx
001555r 3  E8                           inx
001556r 3  E8                           inx                     ; 2DROP
001557r 3               
001557r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr2+n addr2 )
00155Ar 3  20 rr rr                     jsr xt_swap
00155Dr 3  20 rr rr                     jsr xt_minus            ; ( n )
001560r 3               
001560r 3  60           z_hexstore:     rts
001561r 3               
001561r 3               
001561r 3               
001561r 3               ; ## HOLD ( char -- ) "Insert character at current output"
001561r 3               ; ## "hold"  auto  ANS core
001561r 3                       ; """https://forth-standard.org/standard/core/HOLD
001561r 3                       ; Insert a character at the current position of a pictured numeric
001561r 3                       ; output string on
001561r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001561r 3                       ;
001561r 3                       ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal
001561r 3                       ; variable tohold instead of HLD.
001561r 3                       ; """
001561r 3               xt_hold:
001561r 3  20 rr rr                     jsr underflow_1
001564r 3               
001564r 3  A5 rr                        lda tohold
001566r 3  D0 02                        bne @1
001568r 3  C6 rr                        dec tohold+1
00156Ar 3               @1:
00156Ar 3  C6 rr                        dec tohold
00156Cr 3               
00156Cr 3  B5 00                        lda 0,x
00156Er 3  92 rr                        sta (tohold)
001570r 3  E8                           inx
001571r 3  E8                           inx
001572r 3               
001572r 3  60           z_hold:         rts
001573r 3               
001573r 3               
001573r 3               ; ## I ( -- n )(R: n -- n)  "Copy loop counter to stack"
001573r 3               ; ## "i"  auto  ANS core
001573r 3                       ; """https://forth-standard.org/standard/core/I
001573r 3                       ; Note that this is not the same as R@ because we use a fudge
001573r 3                       ; factor for loop control; see the Control Flow section of the
001573r 3                       ; manual for details.
001573r 3                       ;
001573r 3                       ; We should make this native compile for speed.
001573r 3                       ; """
001573r 3               
001573r 3               xt_i:
001573r 3  CA                           dex
001574r 3  CA                           dex
001575r 3               
001575r 3                               ; Get the fudged index off of the top of the stack. It's
001575r 3                               ; easier to do math on the stack directly than to pop and
001575r 3                               ; push stuff around
001575r 3  86 rr                        stx tmpdsp
001577r 3  BA                           tsx
001578r 3               
001578r 3  38                           sec
001579r 3  BD 01 01                     lda $0101,x     ; LSB
00157Cr 3  FD 03 01                     sbc $0103,x
00157Fr 3  A8                           tay
001580r 3               
001580r 3  BD 02 01                     lda $0102,x     ; MSB
001583r 3  FD 04 01                     sbc $0104,x
001586r 3               
001586r 3  A6 rr                        ldx tmpdsp
001588r 3               
001588r 3  95 01                        sta 1,x         ; MSB of de-fudged index
00158Ar 3  94 00                        sty 0,x         ; LSB of de-fudged index
00158Cr 3               
00158Cr 3  60           z_i:            rts
00158Dr 3               
00158Dr 3               
00158Dr 3               
00158Dr 3               ; ## IF (C: -- orig) (flag -- ) "Conditional flow control"
00158Dr 3               ; ## "if"  auto  ANS core
00158Dr 3                       ; """http://forth-standard.org/standard/core/IF"""
00158Dr 3               
00158Dr 3               xt_if:
00158Dr 3                               ; Compile a 0BRANCH
00158Dr 3  A0 rr                        ldy #>zero_branch_runtime
00158Fr 3  A9 rr                        lda #<zero_branch_runtime
001591r 3  20 rr rr                     jsr cmpl_subroutine
001594r 3               
001594r 3                               ; Put the origination address on the stack for else/then
001594r 3  20 rr rr                     jsr xt_here
001597r 3               
001597r 3                               ; Stuff zero in for the branch address right now.
001597r 3                               ; THEN or ELSE will fix it later.
001597r 3  20 rr rr                     jsr xt_zero
00159Ar 3  20 rr rr                     jsr xt_comma
00159Dr 3  60           z_if:           rts
00159Er 3               
00159Er 3               
00159Er 3               zero_branch_runtime:
00159Er 3                       ; """In some Forths, this is called (0BRANCH). Tali Forth originally
00159Er 3                       ; included 0BRANCH as a high-level word that inserted this code at
00159Er 3                       ; runtime.
00159Er 3                       ; """
00159Er 3               
00159Er 3                               ; We use the return value on the 65c02 stack to determine
00159Er 3                               ; where we want to return to.
00159Er 3  68                           pla
00159Fr 3  85 rr                        sta tmpbranch
0015A1r 3  68                           pla
0015A2r 3  85 rr                        sta tmpbranch+1
0015A4r 3               
0015A4r 3                               ; See if the flag is zero, which is the whole purpose of
0015A4r 3                               ; this all
0015A4r 3  B5 00                        lda 0,x
0015A6r 3  15 01                        ora 1,x
0015A8r 3  F0 0F                        beq @zero
0015AAr 3               
0015AAr 3                               ; Flag is TRUE, so we skip over the next two bytes. This is
0015AAr 3                               ; the part between IF and THEN
0015AAr 3  A5 rr                        lda tmpbranch   ; LSB
0015ACr 3  18                           clc
0015ADr 3  69 02                        adc #2
0015AFr 3  85 rr                        sta tmp1
0015B1r 3  A5 rr                        lda tmpbranch+1 ; MSB
0015B3r 3  69 00                        adc #0          ; For carry
0015B5r 3  85 rr                        sta tmp1+1
0015B7r 3               
0015B7r 3  80 13                        bra @done
0015B9r 3               
0015B9r 3               @zero:
0015B9r 3                               ; Flag is FALSE (0) so we take the jump to the address given in
0015B9r 3                               ; the next two bytes. However, the address points to the last
0015B9r 3                               ; byte of the JSR instruction, not to the next byte afterwards
0015B9r 3  A0 01                        ldy #1
0015BBr 3  B1 rr                        lda (tmpbranch),y
0015BDr 3  85 rr                        sta tmp1
0015BFr 3  C8                           iny
0015C0r 3  B1 rr                        lda (tmpbranch),y
0015C2r 3  85 rr                        sta tmp1+1
0015C4r 3               
0015C4r 3                               ; Now we have to subtract one byte from the address
0015C4r 3                               ; given because of the way the 6502 calculates RTS
0015C4r 3  A5 rr                        lda tmp1
0015C6r 3  D0 02                        bne @1
0015C8r 3  C6 rr                        dec tmp1+1
0015CAr 3               @1:
0015CAr 3  C6 rr                        dec tmp1
0015CCr 3               
0015CCr 3               @done:
0015CCr 3                               ; However we got here, tmp1 has the value we push to jump
0015CCr 3                               ; to
0015CCr 3  A5 rr                        lda tmp1+1
0015CEr 3  48                           pha             ; MSB first
0015CFr 3  A5 rr                        lda tmp1
0015D1r 3  48                           pha
0015D2r 3               
0015D2r 3                               ; clean up the stack and jump
0015D2r 3  E8                           inx
0015D3r 3  E8                           inx
0015D4r 3               
0015D4r 3  60                           rts
0015D5r 3               
0015D5r 3               
0015D5r 3               
0015D5r 3               ; ## IMMEDIATE ( -- ) "Mark most recent word as IMMEDIATE"
0015D5r 3               ; ## "immediate"  auto  ANS core
0015D5r 3                       ; """https://forth-standard.org/standard/core/IMMEDIATE
0015D5r 3                       ; Make sure the most recently defined word is immediate. Will only
0015D5r 3                       ; affect the last word in the dictionary. Note that if the word is
0015D5r 3                       ; defined in ROM, this will have no affect, but will not produce an
0015D5r 3                       ; error message.
0015D5r 3                       ; """
0015D5r 3               xt_immediate:
0015D5r 3  20 rr rr                     jsr current_to_dp
0015D8r 3  A0 01                        ldy #1          ; offset for status byte
0015DAr 3  B1 rr                        lda (dp),y
0015DCr 3  09 04                        ora #IM        ; make sure bit 7 is set
0015DEr 3  91 rr                        sta (dp),y
0015E0r 3               
0015E0r 3  60           z_immediate:    rts
0015E1r 3               
0015E1r 3               
0015E1r 3               ; ## INPUT ( -- addr ) "Return address of input vector"
0015E1r 3               ; ## "input" tested Tali Forth
0015E1r 3               
0015E1r 3               xt_input:
0015E1r 3  CA                           dex
0015E2r 3  CA                           dex
0015E3r 3  A9 rr                        lda #<input
0015E5r 3  95 00                        sta 0,x
0015E7r 3  A9 rr                        lda #>input
0015E9r 3  95 01                        sta 1,x
0015EBr 3               
0015EBr 3  60           z_input:        rts
0015ECr 3               
0015ECr 3               
0015ECr 3               
0015ECr 3               ; ## INPUT_TO_R ( -- ) ( R: -- n n n n ) "Save input state to the Return Stack"
0015ECr 3               ; ## "input>r"  tested  Tali Forth
0015ECr 3                  	; """Save the current input state as defined by insrc, cib, ciblen, and
0015ECr 3                       ; toin to the Return Stack. Used by EVALUTE.
0015ECr 3                       ;
0015ECr 3                       ; The naive way of doing
0015ECr 3                       ; this is to push each two-byte variable to the stack in the form of
0015ECr 3                       ;
0015ECr 3                       ;       lda insrc
0015ECr 3                       ;       pha
0015ECr 3                       ;       lda insrc+1
0015ECr 3                       ;       pha
0015ECr 3                       ;
0015ECr 3                       ; for a total of 24 byte of instruction in one direction and later
0015ECr 3                       ; a further 24 bytes to reverse the process. We shorten this at the
0015ECr 3                       ; cost of some speed by assuming the four variables are grouped
0015ECr 3                       ; together on the Zero Page and start with insrc (see definitions.asm
0015ECr 3                       ; for details). The reverse operation is r_to_input. These words must
0015ECr 3                       ; be flagged as Never Native. Uses tmp1
0015ECr 3                       ; """
0015ECr 3               
0015ECr 3               xt_input_to_r:
0015ECr 3                               ; We arrive here with the return address on the top of the
0015ECr 3                               ; 65c02's stack. We need to move it out of the way first
0015ECr 3  68                           pla
0015EDr 3  85 rr                        sta tmp1
0015EFr 3  68                           pla
0015F0r 3  85 rr                        sta tmp1+1
0015F2r 3               
0015F2r 3                               ; This assumes that insrc is the first of eight bytes and
0015F2r 3                               ; toin+1 the last in the sequence we want to save from the Zero
0015F2r 3                               ; Page.
0015F2r 3  A0 07                        ldy #7
0015F4r 3               @loop:
0015F4r 3  B9 rr rr                     lda insrc,y     ; insrc+7 is toin+1
0015F7r 3  48                           pha
0015F8r 3  88                           dey
0015F9r 3  10 F9                        bpl @loop
0015FBr 3               
0015FBr 3                               ; Restore address for return jump
0015FBr 3  A5 rr                        lda tmp1+1
0015FDr 3  48                           pha
0015FEr 3  A5 rr                        lda tmp1
001600r 3  48                           pha
001601r 3               
001601r 3  60           z_input_to_r: 	rts
001602r 3               
001602r 3               
001602r 3               
001602r 3               ; ## INT_TO_NAME ( xt -- nt ) "Get name token from execution token"
001602r 3               ; ## "int>name"  auto  Tali Forth
001602r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001602r 3                       ; This is called >NAME in Gforth, but we change it to
001602r 3                       ; INT>NAME to match NAME>INT
001602r 3                       ; """
001602r 3               
001602r 3               xt_int_to_name:
001602r 3  20 rr rr                     jsr underflow_1
001605r 3               
001605r 3                               ; Unfortunately, to find the header, we have to walk through
001605r 3                               ; all of the wordlists. We are running out of tmp variables.
001605r 3                               ; (I'm assuming there is a reason this is avoiding tmp1) so
001605r 3                               ; hold the current wordlist on the data stack. This searches
001605r 3                               ; all of the wordlists in id order.
001605r 3  CA                           dex
001606r 3  CA                           dex
001607r 3  74 00                        stz 0,x
001609r 3  74 01                        stz 1,x
00160Br 3               
00160Br 3               @wordlist_loop:
00160Br 3                               ; A needs to have the current wordlist id in it at
00160Br 3                               ; the top of this loop.
00160Br 3  B5 00                        lda 0,x                 ; Get the current wordlist.
00160Dr 3               
00160Dr 3                               ; Get the DP for that wordlist.
00160Dr 3  0A                           asl                     ; Turn offset into cells offset.
00160Er 3  18                           clc
00160Fr 3  69 06                        adc #wordlists_offset
001611r 3  A8                           tay
001612r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
001614r 3  85 rr                        sta tmp2                ; into tmp2
001616r 3  C8                           iny
001617r 3  B1 rr                        lda (up),y
001619r 3  85 rr                        sta tmp2+1
00161Br 3               
00161Br 3                               ; Check for an empty wordlist (DP will be 0)
00161Br 3  A5 rr                        lda tmp2
00161Dr 3  05 rr                        ora tmp2+1
00161Fr 3  F0 38                        beq @next_wordlist
001621r 3               
001621r 3  B5 02                        lda 2,x         ; Target xt is now behind wordlist id.
001623r 3  85 rr                        sta tmp3        ; Save target xt in tmp3
001625r 3  B5 03                        lda 3,x
001627r 3  85 rr                        sta tmp3+1
001629r 3               
001629r 3               @loop:
001629r 3  A0 04                        ldy #4          ; xt is four bytes down
00162Br 3  B1 rr                        lda (tmp2),y    ; LSB of xt of current nt
00162Dr 3  C5 rr                        cmp tmp3
00162Fr 3  D0 07                        bne @no_match
001631r 3               
001631r 3                               ; LSB is the same, now check MSB
001631r 3  C8                           iny
001632r 3  B1 rr                        lda (tmp2),y    ; MSB of xt of current nt
001634r 3  C5 rr                        cmp tmp3+1
001636r 3  F0 32                        beq @match
001638r 3               
001638r 3               @no_match:
001638r 3                               ; no match, so we need to get the next word. Next nt is two
001638r 3                               ; bytes down
001638r 3  18                           clc
001639r 3  A5 rr                        lda tmp2
00163Br 3  69 02                        adc #2
00163Dr 3  85 rr                        sta tmp2
00163Fr 3  A5 rr                        lda tmp2+1
001641r 3  69 00                        adc #0          ; only care about carry
001643r 3  85 rr                        sta tmp2+1
001645r 3               
001645r 3  A0 00                        ldy #0
001647r 3  B1 rr                        lda (tmp2),y
001649r 3  48                           pha
00164Ar 3  C8                           iny
00164Br 3  11 rr                        ora (tmp2),y
00164Dr 3  F0 09                        beq @zero
00164Fr 3               
00164Fr 3                               ; Not zero continue
00164Fr 3  B1 rr                        lda (tmp2),y
001651r 3  85 rr                        sta tmp2+1
001653r 3  68                           pla
001654r 3  85 rr                        sta tmp2
001656r 3  80 D1                        bra @loop
001658r 3               
001658r 3               @zero:
001658r 3                               ; if next word is zero, the xt has no nt in this wordlist
001658r 3  68                           pla             ; Leftover from above loop
001659r 3               
001659r 3               @next_wordlist:
001659r 3                               ; Move on to the next wordlist.
001659r 3  B5 00                        lda 0,x
00165Br 3  1A                           inc
00165Cr 3  95 00                        sta 0,x
00165Er 3  C9 0C                        cmp #max_wordlists
001660r 3  D0 A9                        bne @wordlist_loop
001662r 3               
001662r 3                               ; We didn't find it in any of the wordlists.
001662r 3                               ; Remove the wordlist id from the stack.
001662r 3  E8                           inx
001663r 3  E8                           inx
001664r 3               
001664r 3                               ; We return a zero to indicate that we didn't find it.
001664r 3  74 00                        stz 0,x
001666r 3  74 01                        stz 1,x
001668r 3  80 0A                        bra z_int_to_name
00166Ar 3               
00166Ar 3               @match:
00166Ar 3                               ; We found it. Remove wordlist id from stack.
00166Ar 3  E8                           inx
00166Br 3  E8                           inx
00166Cr 3               
00166Cr 3                               ; It's a match! Replace TOS with nt
00166Cr 3  A5 rr                        lda tmp2
00166Er 3  95 00                        sta 0,x
001670r 3  A5 rr                        lda tmp2+1
001672r 3  95 01                        sta 1,x
001674r 3               
001674r 3  60           z_int_to_name:  rts
001675r 3               
001675r 3               
001675r 3               
001675r 3               ; ## INVERT ( n -- n ) "Complement of TOS"
001675r 3               ; ## "invert"  auto  ANS core
001675r 3                       ; """https://forth-standard.org/standard/core/INVERT"""
001675r 3               xt_invert:
001675r 3  20 rr rr                     jsr underflow_1
001678r 3               
001678r 3  A9 FF                        lda #$FF
00167Ar 3  55 00                        eor 0,x         ; LSB
00167Cr 3  95 00                        sta 0,x
00167Er 3               
00167Er 3  A9 FF                        lda #$FF
001680r 3  55 01                        eor 1,x         ; MSB
001682r 3  95 01                        sta 1,x
001684r 3               
001684r 3  60           z_invert:       rts
001685r 3               
001685r 3               
001685r 3               ; ## IS ( xt "name" -- ) "Set named word to execute xt"
001685r 3               ; ## "is"  auto  ANS core ext
001685r 3                       ; """http://forth-standard.org/standard/core/IS"""
001685r 3               
001685r 3               xt_is:
001685r 3                               ; This is a state aware word with differet behavior
001685r 3                               ; when used while compiling vs interpreting.
001685r 3                               ; Check STATE
001685r 3  A5 rr                        lda state
001687r 3  05 rr                        ora state+1
001689r 3  F0 0C                        beq @interpreting
00168Br 3               
00168Br 3               @compiling:
00168Br 3                               ; Run ['] to compile the xt of the next word as a literal.
00168Br 3  20 rr rr                     jsr xt_bracket_tick
00168Er 3               
00168Er 3                               ; Postpone DEFER! by compiling a JSR to it.
00168Er 3  A0 rr                        ldy #>xt_defer_store
001690r 3  A9 rr                        lda #<xt_defer_store
001692r 3  20 rr rr                     jsr cmpl_subroutine
001695r 3               
001695r 3  80 06                        bra @done
001697r 3               
001697r 3               @interpreting:
001697r 3  20 rr rr                     jsr xt_tick
00169Ar 3  20 rr rr                     jsr xt_defer_store
00169Dr 3               @done:
00169Dr 3  60           z_is:           rts
00169Er 3               
00169Er 3               
00169Er 3               
00169Er 3               ; ## J ( -- n ) (R: n -- n ) "Copy second loop counter to stack"
00169Er 3               ; ## "j"  auto  ANS core
00169Er 3                       ; """https://forth-standard.org/standard/core/J
00169Er 3                       ; Copy second loop counter from Return Stack to stack. Note we use
00169Er 3                       ; a fudge factor for loop control; see the Control Flow section of
00169Er 3                       ; the manual for more details.
00169Er 3                       ; At this point, we have the "I" counter/limit and the LEAVE address
00169Er 3                       ; on the stack above this (three entries), whereas the ideal Forth
00169Er 3                       ; implementation would just have two.
00169Er 3                       ;
00169Er 3                       ; Make this native compiled for speed
00169Er 3                       ; """
00169Er 3               
00169Er 3               xt_j:
00169Er 3  CA                           dex
00169Fr 3  CA                           dex
0016A0r 3               
0016A0r 3                               ; Get the fudged index off from the stack. It's easier to
0016A0r 3                               ; do math on the stack directly than to pop and push stuff
0016A0r 3                               ; around
0016A0r 3  86 rr                        stx tmpdsp
0016A2r 3  BA                           tsx
0016A3r 3               
0016A3r 3  38                           sec
0016A4r 3  BD 07 01                     lda $0107,x     ; LSB
0016A7r 3  FD 09 01                     sbc $0109,x
0016AAr 3  A8                           tay
0016ABr 3               
0016ABr 3  BD 08 01                     lda $0108,x     ; MSB
0016AEr 3  FD 0A 01                     sbc $010A,x
0016B1r 3               
0016B1r 3  A6 rr                        ldx tmpdsp
0016B3r 3               
0016B3r 3  95 01                        sta 1,x         ; MSB of de-fudged index
0016B5r 3  94 00                        sty 0,x         ; LSB of de-fudged index
0016B7r 3               
0016B7r 3  60           z_j:            rts
0016B8r 3               
0016B8r 3               
0016B8r 3               
0016B8r 3               ; ## KEY ( -- char ) "Get one character from the input"
0016B8r 3               ; ## "key"  tested  ANS core
0016B8r 3               xt_key:
0016B8r 3                       ; """https://forth-standard.org/standard/core/KEY
0016B8r 3                       ; Get a single character of input from the vectored
0016B8r 3                       ; input without echoing.
0016B8r 3                       ; """
0016B8r 3  20 rr rr                     jsr key_a               ; returns char in A
0016BBr 3               
0016BBr 3  CA                           dex
0016BCr 3  CA                           dex
0016BDr 3  95 00                        sta 0,x
0016BFr 3  74 01                        stz 1,x
0016C1r 3               
0016C1r 3  60           z_key:          rts
0016C2r 3               
0016C2r 3               key_a:
0016C2r 3                       ; The 65c02 doesn't have a JSR (ADDR,X) instruction like the
0016C2r 3                       ; 65816, so we have to fake the indirect jump to vector it.
0016C2r 3                       ; This is depressingly slow. We use this routine internally
0016C2r 3                       ; to avoid manipulating the Data Stack when we just want a
0016C2r 3                       ; character
0016C2r 3  6C rr rr                     jmp (input)             ; JSR/RTS
0016C5r 3               
0016C5r 3               
0016C5r 3               ; ## LATESTNT ( -- nt ) "Push most recent nt to the stack"
0016C5r 3               ; ## "latestnt"  auto  Tali Forth
0016C5r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0016C5r 3                       ; The Gforth version of this word is called LATEST
0016C5r 3                       ; """
0016C5r 3               xt_latestnt:
0016C5r 3  CA                           dex
0016C6r 3  CA                           dex
0016C7r 3               
0016C7r 3  20 rr rr                     jsr current_to_dp
0016CAr 3               
0016CAr 3  A5 rr                        lda dp
0016CCr 3  95 00                        sta 0,x
0016CEr 3  A5 rr                        lda dp+1
0016D0r 3  95 01                        sta 1,x
0016D2r 3               
0016D2r 3  60           z_latestnt:     rts
0016D3r 3               
0016D3r 3               
0016D3r 3               ; ## LATESTXT ( -- xt ) "Push most recent xt to the stack"
0016D3r 3               ; ## "latestxt"  auto  Gforth
0016D3r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Anonymous-Definitions.html"""
0016D3r 3               xt_latestxt:
0016D3r 3  20 rr rr                     jsr xt_latestnt         ; ( nt )
0016D6r 3  20 rr rr                     jsr xt_name_to_int      ; ( xt )
0016D9r 3               
0016D9r 3  60           z_latestxt:     rts
0016DAr 3               
0016DAr 3               
0016DAr 3               ; ## LEAVE ( -- ) "Leave DO/LOOP construct"
0016DAr 3               ; ## "leave"  auto  ANS core
0016DAr 3                       ; """https://forth-standard.org/standard/core/LEAVE
0016DAr 3                       ; Note that this does not work with anything but a DO/LOOP in
0016DAr 3                       ; contrast to other versions such as discussed at
0016DAr 3                       ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
0016DAr 3                       ;
0016DAr 3                       ;       : LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY
0016DAr 3                       ; See the Control Flow section in the manual for details of how this works.
0016DAr 3                       ; This must be native compile and not IMMEDIATE
0016DAr 3                       ; """
0016DAr 3               
0016DAr 3               xt_leave:
0016DAr 3                               ; We dump the limit/start entries off the Return Stack
0016DAr 3                               ; (four bytes)
0016DAr 3  68                           pla
0016DBr 3  68                           pla
0016DCr 3  68                           pla
0016DDr 3  68                           pla
0016DEr 3               
0016DEr 3  60                           rts             ; this must be compiled, so keep before z_leave
0016DFr 3               z_leave:                        ; not reached, not compiled
0016DFr 3               
0016DFr 3               
0016DFr 3               
0016DFr 3               ; ## LEFT_BRACKET ( -- ) "Enter interpretation state"
0016DFr 3               ; ## "["  auto  ANS core
0016DFr 3                       ; """https://forth-standard.org/standard/core/Bracket
0016DFr 3                       ; This is an immediate and compile-only word
0016DFr 3                       ; """
0016DFr 3               xt_left_bracket:
0016DFr 3  64 rr                        stz state
0016E1r 3  64 rr                        stz state+1
0016E3r 3               
0016E3r 3  60           z_left_bracket: rts
0016E4r 3               
0016E4r 3               
0016E4r 3               ; ## LESS_NUMBER_SIGN ( -- ) "Start number conversion"
0016E4r 3               ; ## "<#"  auto  ANS core
0016E4r 3                       ; """https://forth-standard.org/standard/core/num-start
0016E4r 3                       ; Start the process to create pictured numeric output.
0016E4r 3                       ;
0016E4r 3                       ; The new
0016E4r 3                       ; string is constructed from back to front, saving the new character
0016E4r 3                       ; at the beginning of the output string. Since we use PAD as a
0016E4r 3                       ; starting address and work backward (!), the string is constructed
0016E4r 3                       ; in the space between the end of the Dictionary (as defined by CP)
0016E4r 3                       ; and the PAD. This allows us to satisfy the ANS Forth condition that
0016E4r 3                       ; programs don't fool around with the PAD but still use its address.
0016E4r 3                       ; Based on pForth
0016E4r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
0016E4r 3                       ; pForth is in the pubic domain. Forth is : <# PAD HLD ! ; we use the
0016E4r 3                       ; internal variable tohold instead of HLD.
0016E4r 3                       ; """
0016E4r 3               xt_less_number_sign:
0016E4r 3  20 rr rr                     jsr xt_pad      ; ( addr )
0016E7r 3               
0016E7r 3  B5 00                        lda 0,x
0016E9r 3  85 rr                        sta tohold
0016EBr 3  B5 01                        lda 1,x
0016EDr 3  85 rr                        sta tohold+1
0016EFr 3               
0016EFr 3  E8                           inx
0016F0r 3  E8                           inx
0016F1r 3               
0016F1r 3               z_less_number_sign:
0016F1r 3  60                           rts
0016F2r 3               
0016F2r 3               ; ## LESS_THAN ( n m -- f ) "Return true if NOS < TOS"
0016F2r 3               ; ## "<"  auto  ANS core
0016F2r 3                       ; """https://forth-standard.org/standard/core/less"""
0016F2r 3               
0016F2r 3               xt_less_than:
0016F2r 3  20 rr rr                     jsr underflow_2
0016F5r 3               
0016F5r 3  A0 00                        ldy #0          ; default false
0016F7r 3  20 rr rr                     jsr compare_16bit
0016FAr 3               
0016FAr 3                               ; for signed numbers, NOS < TOS if Z=0 and N=0
0016FAr 3  F0 03                        beq @false
0016FCr 3  30 01                        bmi @false
0016FEr 3               
0016FEr 3                               ; true
0016FEr 3  88                           dey
0016FFr 3               @false:
0016FFr 3  98                           tya
001700r 3               
001700r 3  E8                           inx
001701r 3  E8                           inx
001702r 3  95 00                        sta 0,x
001704r 3  95 01                        sta 1,x
001706r 3               
001706r 3  60           z_less_than:    rts
001707r 3               
001707r 3               
001707r 3               
001707r 3               ; ## LIST ( scr# -- ) "List the given screen"
001707r 3               ; ## "list"  tested  ANS block ext
001707r 3                       ; """https://forth-standard.org/standard/block/LIST"""
001707r 3               
001707r 3               xt_list:
001707r 3  20 rr rr                     jsr underflow_1
00170Ar 3               
00170Ar 3                               ; Save the screen number in SCR
00170Ar 3  20 rr rr                     jsr xt_scr
00170Dr 3  20 rr rr                     jsr xt_store
001710r 3               
001710r 3                               ; Use L from the editor-wordlist to display the screen.
001710r 3  20 rr rr                     jsr xt_editor_l
001713r 3               
001713r 3  60           z_list:         rts
001714r 3               
001714r 3               
001714r 3               
001714r 3               ; ## LITERAL ( n -- ) "Store TOS to be push on stack during runtime"
001714r 3               ; ## "literal"  auto  ANS core
001714r 3                       ; """https://forth-standard.org/standard/core/LITERAL
001714r 3                       ; Compile-only word to store TOS so that it is pushed on stack
001714r 3                       ; during runtime. This is a immediate, compile-only word. At runtime,
001714r 3                       ; it works by calling literal_runtime by compling JSR LITERAL_RT.
001714r 3                       ;
001714r 3                       ; Note the cmpl_ routines use TMPTOS
001714r 3                       ; """
001714r 3               xt_literal:
001714r 3  20 rr rr                     jsr underflow_1
001717r 3               
001717r 3  A0 rr                        ldy #>literal_runtime
001719r 3  A9 rr                        lda #<literal_runtime
00171Br 3  20 rr rr                     jsr cmpl_subroutine
00171Er 3               
00171Er 3                               ; Compile the value that is to be pushed on the Stack during
00171Er 3                               ; runtime
00171Er 3  20 rr rr                     jsr xt_comma
001721r 3               
001721r 3  60           z_literal:      rts
001722r 3               
001722r 3               literal_runtime:
001722r 3               
001722r 3                               ; During runtime, we push the value following this word back
001722r 3                               ; on the Data Stack. The subroutine jump that brought us
001722r 3                               ; here put the address to return to on the Return Stack -
001722r 3                               ; this points to the data we need to get. This routine is
001722r 3                               ; also called (LITERAL) in some Forths
001722r 3  CA                           dex
001723r 3  CA                           dex
001724r 3               
001724r 3                           	; The 65c02 stores <RETURN-ADDRESS>-1 on the Return Stack,
001724r 3                               ; so we are actually popping the address-1 of the literal
001724r 3  68                           pla             ; LSB
001725r 3  85 rr                        sta tmp1
001727r 3  68                           pla             ; MSB
001728r 3  85 rr                        sta tmp1+1
00172Ar 3               
00172Ar 3                               ; Fetch the actual literal value and push it on Data stack
00172Ar 3  A0 01                        ldy #1
00172Cr 3  B1 rr                        lda (tmp1),y    ; LSB
00172Er 3  95 00                        sta 0,x
001730r 3  C8                           iny
001731r 3  B1 rr                        lda (tmp1),y    ; MSB
001733r 3  95 01                        sta 1,x
001735r 3               
001735r 3                               ; Adjust return address and push back on the Return Stack
001735r 3  98                           tya
001736r 3  18                           clc
001737r 3  65 rr                        adc tmp1
001739r 3  A8                           tay
00173Ar 3  A5 rr                        lda tmp1+1
00173Cr 3  69 00                        adc #0
00173Er 3  48                           pha
00173Fr 3  5A                           phy
001740r 3               
001740r 3  60                           rts
001741r 3               
001741r 3               
001741r 3               
001741r 3               ; ## LOAD ( scr# -- ) "Load the Forth code in a screen/block"
001741r 3               ; ## "load"  auto  ANS block
001741r 3                       ; """https://forth-standard.org/standard/block/LOAD
001741r 3                       ;
001741r 3                       ; Note: LOAD current works because there is only one buffer.
001741r 3                       ; If/when multiple buffers are supported, we'll have to deal
001741r 3                       ; with the fact that it might re-load the old block into a
001741r 3                       ; different buffer.
001741r 3                       ; """
001741r 3               
001741r 3               xt_load:
001741r 3  20 rr rr                     jsr underflow_1
001744r 3               
001744r 3                               ; Save the current value of BLK on the return stack.
001744r 3  A0 01                        ldy #blk_offset+1
001746r 3  B1 rr                        lda (up),y
001748r 3  48                           pha
001749r 3  88                           dey
00174Ar 3  B1 rr                        lda (up),y
00174Cr 3  48                           pha
00174Dr 3               
00174Dr 3                               ; Set BLK to the given block/screen number.
00174Dr 3  B5 00                        lda 0,x
00174Fr 3  91 rr                        sta (up),y
001751r 3  C8                           iny
001752r 3  B5 01                        lda 1,x
001754r 3  91 rr                        sta (up),y
001756r 3               
001756r 3                               ; Load that block into a buffer
001756r 3  20 rr rr                     jsr xt_block
001759r 3               
001759r 3                               ; Put 1024 on the stack for the screen length.
001759r 3  CA                           dex
00175Ar 3  CA                           dex
00175Br 3  A9 04                        lda #4
00175Dr 3  95 01                        sta 1,x
00175Fr 3  74 00                        stz 0,x
001761r 3               
001761r 3                               ; Jump to a special evluate target. This bypasses the underflow
001761r 3                               ; check and skips the zeroing of BLK.
001761r 3  20 rr rr                     jsr load_evaluate
001764r 3               
001764r 3                               ; Restore the value of BLK from before the LOAD command.
001764r 3  A0 00                        ldy #blk_offset
001766r 3  68                           pla
001767r 3  91 rr                        sta (up),y
001769r 3  C8                           iny
00176Ar 3  68                           pla
00176Br 3  91 rr                        sta (up),y
00176Dr 3               
00176Dr 3                               ; If BLK is not zero, read it back into the buffer.
00176Dr 3                               ; A still has MSB
00176Dr 3  88                           dey
00176Er 3  11 rr                        ora (up),y
001770r 3  F0 12                        beq @done
001772r 3               
001772r 3                               ; The block needs to be read back into the buffer.
001772r 3  CA                           dex
001773r 3  CA                           dex
001774r 3  A0 00                        ldy #blk_offset
001776r 3  B1 rr                        lda (up),y
001778r 3  95 00                        sta 0,x
00177Ar 3  C8                           iny
00177Br 3  B1 rr                        lda (up),y
00177Dr 3  95 01                        sta 1,x
00177Fr 3  20 rr rr                     jsr xt_block
001782r 3               
001782r 3                               ; Drop the buffer address.
001782r 3  E8                           inx
001783r 3  E8                           inx
001784r 3               
001784r 3               @done:
001784r 3  60           z_load:         rts
001785r 3               
001785r 3               
001785r 3               
001785r 3               ; ## LOOP ( -- ) "Finish loop construct"
001785r 3               ; ## "loop"  auto  ANS core
001785r 3                       ; """https://forth-standard.org/standard/core/LOOP
001785r 3                       ; Compile-time part of LOOP. This does nothing more but push 1 on
001785r 3                       ; the stack and then call +LOOP.
001785r 3                       ;
001785r 3                       ; In Forth, this is
001785r 3                       ;       : LOOP  POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ;
001785r 3                       ;       IMMEDIATE ; COMPILE-ONLY
001785r 3                       ; """
001785r 3               xt_loop:
001785r 3                               ; Have the finished word push 1 on the stack
001785r 3  A0 rr                        ldy #>xt_one
001787r 3  A9 rr                        lda #<xt_one
001789r 3  20 rr rr                     jsr cmpl_subroutine     ; drop through to +LOOP
00178Cr 3               
00178Cr 3               
00178Cr 3               ; ## PLUS_LOOP ( -- ) "Finish loop construct"
00178Cr 3               ; ## "+loop"  auto  ANS core
00178Cr 3                       ; """https://forth-standard.org/standard/core/PlusLOOP
00178Cr 3                       ;
00178Cr 3                       ; Compile-time part of +LOOP, also used for LOOP. Is usually
00178Cr 3                       ;       : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
00178Cr 3                       ;       COMPILE-ONLY
00178Cr 3                       ; in Forth. LOOP uses this routine as well. We jump here with the
00178Cr 3                       ; address for looping as TOS and the address for aborting the loop
00178Cr 3                       ; (LEAVE) as the second double-byte entry on the Return Stack (see
00178Cr 3                       ; DO and the Control Flow section of the manual for details).
00178Cr 3                       ; """
00178Cr 3               
00178Cr 3               xt_plus_loop:
00178Cr 3                               ; Compile the run-time part. We do this with a short loop
00178Cr 3                               ; and not a call to COMPILE, because it has to be natively
00178Cr 3                               ; coded anyway.
00178Cr 3  A0 11                        ldy #plus_loop_runtime_end-plus_loop_runtime
00178Er 3  5A                           phy             ; save counter to adjust CP
00178Fr 3               @1:
00178Fr 3  B9 rr rr                     lda plus_loop_runtime,y
001792r 3  91 rr                        sta (cp),y
001794r 3  88                           dey
001795r 3  10 F8                        bpl @1
001797r 3               
001797r 3                               ; Adjust CP
001797r 3  68                           pla
001798r 3  18                           clc
001799r 3  65 rr                        adc cp
00179Br 3  85 rr                        sta cp
00179Dr 3  A5 rr                        lda cp+1
00179Fr 3  69 00                        adc #0          ; only need carry
0017A1r 3  85 rr                        sta cp+1
0017A3r 3               
0017A3r 3                               ; The address we need to loop back to is TOS. Store it so
0017A3r 3                               ; the runtime part of +LOOP jumps back up there
0017A3r 3  20 rr rr                     jsr xt_comma
0017A6r 3               
0017A6r 3                               ; Compile an UNLOOP for when we're all done. This is a series
0017A6r 3                               ; of six PLA, so we just do it here instead jumping around
0017A6r 3                               ; all over the place
0017A6r 3  A9 68                        lda #$68                ; opcode for PLA
0017A8r 3  A0 06                        ldy #6
0017AAr 3               @2:
0017AAr 3  91 rr                        sta (cp),y
0017ACr 3  88                           dey
0017ADr 3  10 FB                        bpl @2
0017AFr 3               
0017AFr 3                               ; Adjust CP
0017AFr 3  A9 06                        lda #6
0017B1r 3  18                           clc
0017B2r 3  65 rr                        adc cp
0017B4r 3  85 rr                        sta cp
0017B6r 3  A5 rr                        lda cp+1
0017B8r 3  69 00                        adc #0                  ; only need carry
0017BAr 3  85 rr                        sta cp+1
0017BCr 3               
0017BCr 3                               ; Complete compile of DO/?DO by replacing the six
0017BCr 3                               ; dummy bytes by PHA instructions. The address where
0017BCr 3                               ; they are located is on the Data Stack
0017BCr 3  B5 00                        lda 0,x
0017BEr 3  85 rr                        sta tmp1
0017C0r 3  B5 01                        lda 1,x
0017C2r 3  85 rr                        sta tmp1+1
0017C4r 3  E8                           inx
0017C5r 3  E8                           inx
0017C6r 3               
0017C6r 3                               ; Because of the way that CP works, we don't have to save
0017C6r 3                               ; CP, but CP-1
0017C6r 3  A5 rr                        lda cp
0017C8r 3  38                           sec
0017C9r 3  E9 01                        sbc #1
0017CBr 3  85 rr                        sta tmp2
0017CDr 3  A5 rr                        lda cp+1
0017CFr 3  E9 00                        sbc #0
0017D1r 3  85 rr                        sta tmp2+1
0017D3r 3               
0017D3r 3                               ; now compile this in the DO/?DO routine
0017D3r 3  A0 00                        ldy #0
0017D5r 3               
0017D5r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
0017D7r 3  91 rr                        sta (tmp1),y
0017D9r 3  C8                           iny
0017DAr 3  A5 rr                        lda tmp2+1      ; MSB
0017DCr 3  91 rr                        sta (tmp1),y
0017DEr 3  C8                           iny
0017DFr 3  A9 48                        lda #$48        ; Opcode for PHA
0017E1r 3  91 rr                        sta (tmp1),y
0017E3r 3  C8                           iny
0017E4r 3               
0017E4r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
0017E6r 3  91 rr                        sta (tmp1),y
0017E8r 3  C8                           iny
0017E9r 3  A5 rr                        lda tmp2        ; LSB
0017EBr 3  91 rr                        sta (tmp1),y
0017EDr 3  C8                           iny
0017EEr 3  A9 48                        lda #$48        ; Opcode for PHA
0017F0r 3  91 rr                        sta (tmp1),y
0017F2r 3               z_loop:
0017F2r 3  60           z_plus_loop:    rts
0017F3r 3               
0017F3r 3               
0017F3r 3               plus_loop_runtime:
0017F3r 3                       ; """Runtime compile for loop control. This is used for both +LOOP and
0017F3r 3                       ; LOOP which are defined at high level. Note we use a fudge factor for
0017F3r 3                       ; loop control so we can test with the Overflow Flag. See
0017F3r 3                       ; the Control Flow section of the manual for details.
0017F3r 3                       ; The step value is TOS in the loop. This
0017F3r 3                       ; must always be native compiled. In some Forths, this is a separate
0017F3r 3                       ; word called (+LOOP) or (LOOP)
0017F3r 3                       ; """
0017F3r 3               
0017F3r 3  18                           clc
0017F4r 3  68                           pla             ; LSB of index
0017F5r 3  75 00                        adc 0,x         ; LSB of step
0017F7r 3  A8                           tay             ; temporary storage of LSB
0017F8r 3               
0017F8r 3  B8                           clv
0017F9r 3  68                           pla             ; MSB of index
0017FAr 3  75 01                        adc 1,x         ; MSB of step
0017FCr 3  48                           pha             ; put MSB of index back on stack
0017FDr 3               
0017FDr 3  98                           tya             ; put LSB of index back on stack
0017FEr 3  48                           pha
0017FFr 3               
0017FFr 3  E8                           inx             ; dump step from TOS
001800r 3  E8                           inx
001801r 3               
001801r 3                               ; If V flag is set, we're done looping and continue
001801r 3                               ; after the +LOOP instruction
001801r 3  70 03                        bvs @hack+3     ; skip over JMP instruction
001803r 3               
001803r 3               @hack:          ; This is why this routine must be natively compiled: We
001803r 3                               ; compile the opcode for JMP here without an address to
001803r 3                               ; go to, which is added by the next next instruction of
001803r 3                               ; LOOP/+LOOP during compile time
001803r 3  4C                           .byte $4C
001804r 3               
001804r 3               plus_loop_runtime_end:
001804r 3               
001804r 3               
001804r 3               ; ## LSHIFT ( x u -- u ) "Shift TOS left"
001804r 3               ; ## "lshift"  auto  ANS core
001804r 3                       ; """https://forth-standard.org/standard/core/LSHIFT"""
001804r 3               
001804r 3               xt_lshift:
001804r 3  20 rr rr                     jsr underflow_2
001807r 3               
001807r 3                               ; max shift 16 times
001807r 3  B5 00                        lda 0,x
001809r 3  29 0F                        and #%00001111
00180Br 3  F0 08                        beq @done
00180Dr 3               
00180Dr 3  A8                           tay
00180Er 3               
00180Er 3               @loop:
00180Er 3  16 02                        asl 2,x
001810r 3  36 03                        rol 3,x
001812r 3  88                           dey
001813r 3  D0 F9                        bne @loop
001815r 3               
001815r 3               @done:
001815r 3  E8                           inx
001816r 3  E8                           inx
001817r 3               
001817r 3  60           z_lshift:       rts
001818r 3               
001818r 3               
001818r 3               
001818r 3               ; ## M_STAR ( n n -- d ) "16 * 16 --> 32"
001818r 3               ; ## "m*"  auto  ANS core
001818r 3                       ; """https://forth-standard.org/standard/core/MTimes
001818r 3                       ; Multiply two 16 bit numbers, producing a 32 bit result. All
001818r 3                       ; values are signed. Adapted from FIG Forth for Tali Forth.
001818r 3                       ;
001818r 3                       ; The original Forth is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;
001818r 3                       ; with  : D+- O< IF DNEGATE THEN ;
001818r 3                       ; """
001818r 3               
001818r 3               xt_m_star:
001818r 3  20 rr rr                     jsr underflow_2
00181Br 3               
00181Br 3                               ; figure out the sign
00181Br 3  B5 01                        lda 1,x         ; MSB of n1
00181Dr 3  55 03                        eor 3,x         ; MSB of n2
00181Fr 3               
00181Fr 3                               ; UM* uses all kinds of temporary variables so we don't
00181Fr 3                               ; risk a conflict but just take the cycle hit and push
00181Fr 3                               ; this to the stack
00181Fr 3  48                           pha
001820r 3               
001820r 3                               ; get the absolute value of both numbers so we can feed
001820r 3                               ; them to UM*, which does the real work
001820r 3  20 rr rr                     jsr xt_abs
001823r 3  20 rr rr                     jsr xt_swap
001826r 3  20 rr rr                     jsr xt_abs
001829r 3               
001829r 3  20 rr rr                     jsr xt_um_star          ; ( d )
00182Cr 3               
00182Cr 3                               ; handle the sign
00182Cr 3  68                           pla
00182Dr 3  10 03                        bpl @done
00182Fr 3               
00182Fr 3  20 rr rr                     jsr xt_dnegate
001832r 3               @done:
001832r 3  60           z_m_star:       rts
001833r 3               
001833r 3               
001833r 3               
001833r 3               ; ## MARKER ( "name" -- ) "Create a deletion boundry"
001833r 3               ; ## "marker"  auto  ANS core ext
001833r 3                       ; """https://forth-standard.org/standard/core/MARKER
001833r 3                       ; This word replaces FORGET in earlier Forths. Old entries are not
001833r 3                       ; actually deleted, but merely overwritten by restoring CP and DP.
001833r 3                       ; Run the named word at a later time to restore all of the wordlists
001833r 3                       ; to their state when the word was created with marker.  Any words
001833r 3                       ; created after the marker (including the marker) will be forgotten.
001833r 3                       ;
001833r 3                       ; To do this, we want to end up with something that jumps to a
001833r 3                       ; run-time component with a link to the original CP and DP values:
001833r 3                       ;
001833r 3                       ;       jsr marker_runtime
001833r 3                       ;       <Original CP MSB>
001833r 3                       ;       <Original CP LSB>
001833r 3                       ;       <Original DP MSB> ( for CURRENT wordlist )
001833r 3                       ;       <Original DP LSB>
001833r 3                       ;       < USER variables from offset 4 to 39 >
001833r 3                       ;
001833r 3                       ;       The user variables include:
001833r 3                       ;       CURRENT (byte variable)
001833r 3                       ;       <All wordlists> (currently 12) (cell array)
001833r 3                       ;       <#ORDER> (byte variable)
001833r 3                       ;       <All search order> (currently 9) (byte array)
001833r 3                       ;
001833r 3                       ; This code uses tmp1 and tmp2
001833r 3                       ; """
001833r 3               
001833r 3               xt_marker:
001833r 3                               ; Before we do anything, we need to save CP, which
001833r 3                               ; after all is the whole point of this operation. CREATE
001833r 3                               ; uses tmp1 and tmp2, so we take the speed hit and push stuff
001833r 3                               ; to the stack
001833r 3  20 rr rr                     jsr current_to_dp
001836r 3               
001836r 3  A5 rr                        lda dp
001838r 3  48                           pha
001839r 3  A5 rr                        lda dp+1
00183Br 3  48                           pha
00183Cr 3               
00183Cr 3  A5 rr                        lda cp
00183Er 3  48                           pha
00183Fr 3  A5 rr                        lda cp+1
001841r 3  48                           pha
001842r 3               
001842r 3  20 rr rr                     jsr xt_create
001845r 3               
001845r 3                               ; By default, CREATE installs a subroutine jump to DOVAR, which
001845r 3                               ; we have to replace by a jump to marker_runtime. We back up
001845r 3                               ; two bytes and then overwrite the address
001845r 3  A5 rr                        lda cp          ; LSB
001847r 3  38                           sec
001848r 3  E9 02                        sbc #2
00184Ar 3  85 rr                        sta cp
00184Cr 3               
00184Cr 3  A5 rr                        lda cp+1        ; MSB
00184Er 3  E9 00                        sbc #0          ; we only care about the borrow
001850r 3  85 rr                        sta cp+1
001852r 3               
001852r 3                               ; Add the address of the runtime component
001852r 3  A0 rr                        ldy #>marker_runtime
001854r 3  A9 rr                        lda #<marker_runtime
001856r 3  20 rr rr                     jsr cmpl_word
001859r 3               
001859r 3                               ; Add original CP as payload
001859r 3  7A                           ply                     ; MSB
00185Ar 3  68                           pla                     ; LSB
00185Br 3  20 rr rr                     jsr cmpl_word
00185Er 3               
00185Er 3                               ; Add original DP as payload
00185Er 3  7A                           ply                     ; MSB
00185Fr 3  68                           pla                     ; LSB
001860r 3  20 rr rr                     jsr cmpl_word
001863r 3               
001863r 3                               ; Add the user variables for the wordlists and search order.
001863r 3                               ; We're compiling them in byte order.
001863r 3  A0 04                        ldy #4                  ; Start at CURRENT
001865r 3               @marker_loop:
001865r 3  B1 rr                        lda (up),y
001867r 3  20 rr rr                     jsr cmpl_a
00186Ar 3  C8                           iny
00186Br 3  98                           tya
00186Cr 3  C9 28                        cmp #40                 ; One past the end of the search order.
00186Er 3  D0 F5                        bne @marker_loop
001870r 3               
001870r 3  60           z_marker:       rts
001871r 3               
001871r 3               
001871r 3               
001871r 3               marker_runtime:
001871r 3                       ; """Restore Dictionary and memory (DP and CP) to where the were
001871r 3                       ; when this marker was defined. We arrive here with the return
001871r 3                       ; address on the Return Stack in the usual 65c02 format
001871r 3                       ; """
001871r 3               
001871r 3                               ; Get the address of the string address off the stack and
001871r 3                               ; increase by one because of the RTS mechanics
001871r 3  68                           pla
001872r 3  85 rr                        sta tmp1        ; LSB of address
001874r 3  68                           pla
001875r 3  85 rr                        sta tmp1+1      ; MSB of address
001877r 3               
001877r 3  E6 rr                        inc tmp1
001879r 3  D0 02                        bne @1
00187Br 3  E6 rr                        inc tmp1+1
00187Dr 3               @1:
00187Dr 3  A0 00                        ldy #0
00187Fr 3               
00187Fr 3                               ; CP was stored first
00187Fr 3  B1 rr                        lda (tmp1),y
001881r 3  85 rr                        sta cp
001883r 3  C8                           iny
001884r 3  B1 rr                        lda (tmp1),y
001886r 3  85 rr                        sta cp+1
001888r 3               
001888r 3                               ; Next was DP
001888r 3  C8                           iny
001889r 3  B1 rr                        lda (tmp1),y
00188Br 3  85 rr                        sta dp
00188Dr 3  C8                           iny
00188Er 3  B1 rr                        lda (tmp1),y
001890r 3  85 rr                        sta dp+1
001892r 3               
001892r 3                               ; Conveniently, the offset into both tmp1 and UP is 4
001892r 3                               ; to start restoring the wordlists and search order.
001892r 3  A0 04                        ldy #4
001894r 3               
001894r 3               @marker_restore_loop:
001894r 3                               ; Copy from the dictionary back on top of the wordlists
001894r 3                               ; and search order.
001894r 3  B1 rr                        lda (tmp1), y
001896r 3  91 rr                        sta (up), y
001898r 3  C8                           iny
001899r 3  98                           tya
00189Ar 3  C9 28                        cmp #40                 ; One past the end of the search order.
00189Cr 3  D0 F6                        bne @marker_restore_loop
00189Er 3               
00189Er 3  20 rr rr                     jsr dp_to_current       ; Move the CURRENT DP back.
0018A1r 3               
0018A1r 3                               ; The return instruction takes us back to the original caller
0018A1r 3  60                           rts
0018A2r 3               
0018A2r 3               
0018A2r 3               
0018A2r 3               ; ## MAX ( n n -- n ) "Keep larger of two numbers"
0018A2r 3               ; ## "max"  auto  ANS core
0018A2r 3                       ; """https://forth-standard.org/standard/core/MAX
0018A2r 3                       ; Compare TOS and NOS and keep which one is larger. Adapted from
0018A2r 3                       ; Lance A. Leventhal "6502 Assembly Language Subroutines". Negative
0018A2r 3                       ; Flag indicates which number is larger. See also
0018A2r 3                       ; http://6502.org/tutorials/compare_instructions.html and
0018A2r 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
0018A2r 3                       ; """
0018A2r 3               
0018A2r 3               xt_max:
0018A2r 3  20 rr rr                     jsr underflow_2
0018A5r 3               
0018A5r 3                               ; Compare LSB. We do this first to set the carry flag
0018A5r 3  B5 00                        lda 0,x         ; LSB of TOS
0018A7r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets the carry
0018A9r 3               
0018A9r 3  B5 01                        lda 1,x         ; MSB of TOS
0018ABr 3  F5 03                        sbc 3,x         ; MSB of NOS
0018ADr 3  50 02                        bvc @no_overflow
0018AFr 3               
0018AFr 3                               ; handle overflow, because we use signed numbers
0018AFr 3  49 80                        eor #$80        ; complement negative flag
0018B1r 3               
0018B1r 3               @no_overflow:
0018B1r 3                               ; if negative, NOS is larger and needs to be kept
0018B1r 3  30 08                        bmi @keep_nos
0018B3r 3               
0018B3r 3                               ; move TOS to NOS
0018B3r 3  B5 00                        lda 0,x
0018B5r 3  95 02                        sta 2,x
0018B7r 3  B5 01                        lda 1,x
0018B9r 3  95 03                        sta 3,x
0018BBr 3               
0018BBr 3               @keep_nos:
0018BBr 3  E8                           inx
0018BCr 3  E8                           inx
0018BDr 3               
0018BDr 3  60           z_max:          rts
0018BEr 3               
0018BEr 3               
0018BEr 3               
0018BEr 3               ; ## MIN ( n n -- n ) "Keep smaller of two numbers"
0018BEr 3               ; ## "min"  auto  ANS core
0018BEr 3                       ; """https://forth-standard.org/standard/core/MIN
0018BEr 3                       ; Adapted from Lance A. Leventhal "6502 Assembly Language
0018BEr 3                       ; Subroutines." Negative Flag indicateds which number is larger. See
0018BEr 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
0018BEr 3                       ; """
0018BEr 3               
0018BEr 3               xt_min:
0018BEr 3  20 rr rr                     jsr underflow_2
0018C1r 3               
0018C1r 3                               ; compare LSB. We do this first to set the carry flag
0018C1r 3  B5 00                        lda 0,x         ; LSB of TOS
0018C3r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets carry
0018C5r 3               
0018C5r 3  B5 01                        lda 1,x         ; MSB of TOS
0018C7r 3  F5 03                        sbc 3,x         ; MSB of NOS
0018C9r 3  50 02                        bvc @no_overflow
0018CBr 3               
0018CBr 3                               ; handle overflow because we use signed numbers
0018CBr 3  49 80                        eor #$80
0018CDr 3               
0018CDr 3               @no_overflow:
0018CDr 3                               ; if negative, NOS is larger and needs to be dumped
0018CDr 3  10 08                        bpl @keep_nos
0018CFr 3               
0018CFr 3                               ; move TOS to NOS
0018CFr 3  B5 00                        lda 0,x
0018D1r 3  95 02                        sta 2,x
0018D3r 3  B5 01                        lda 1,x
0018D5r 3  95 03                        sta 3,x
0018D7r 3               
0018D7r 3               @keep_nos:
0018D7r 3  E8                           inx
0018D8r 3  E8                           inx
0018D9r 3               
0018D9r 3  60           z_min:          rts
0018DAr 3               
0018DAr 3               
0018DAr 3               
0018DAr 3               ; ## MINUS ( n n -- n ) "Subtract TOS from NOS"
0018DAr 3               ; ## "-"  auto  ANS core
0018DAr 3                       ; """https://forth-standard.org/standard/core/Minus"""
0018DAr 3               xt_minus:
0018DAr 3  20 rr rr                     jsr underflow_2
0018DDr 3               
0018DDr 3  38                           sec
0018DEr 3  B5 02                        lda 2,x         ; LSB
0018E0r 3  F5 00                        sbc 0,x
0018E2r 3  95 02                        sta 2,x
0018E4r 3               
0018E4r 3  B5 03                        lda 3,x         ; MSB
0018E6r 3  F5 01                        sbc 1,x
0018E8r 3  95 03                        sta 3,x
0018EAr 3               
0018EAr 3  E8                           inx
0018EBr 3  E8                           inx
0018ECr 3               
0018ECr 3  60           z_minus:        rts
0018EDr 3               
0018EDr 3               
0018EDr 3               ; ## MINUS_LEADING ( addr1 u1 -- addr2 u2 ) "Remove leading spaces"
0018EDr 3               ; ## "-leading"  auto  Tali String
0018EDr 3                       ; """Remove leading whitespace. This is the reverse of -TRAILING
0018EDr 3                       ; """
0018EDr 3               
0018EDr 3               xt_minus_leading:
0018EDr 3  20 rr rr                     jsr underflow_2
0018F0r 3               
0018F0r 3               @loop:
0018F0r 3                               ; Quit if we were given an empty string. This also terminates
0018F0r 3                               ; the main loop
0018F0r 3  B5 00                        lda 0,x
0018F2r 3  15 01                        ora 1,x
0018F4r 3  F0 0F                        beq @done
0018F6r 3               
0018F6r 3  A1 02                        lda (2,x)               ; get first character
0018F8r 3  20 rr rr                     jsr is_whitespace
0018FBr 3  90 08                        bcc @done
0018FDr 3               
0018FDr 3                               ; It's whitespace, move one down
0018FDr 3  20 rr rr                     jsr xt_one              ; ( addr u 1 )
001900r 3  20 rr rr                     jsr xt_slash_string     ; ( addr+ u-1 )
001903r 3               
001903r 3  80 EB                        bra @loop
001905r 3               @done:
001905r 3               z_minus_leading:
001905r 3  60                           rts
001906r 3               
001906r 3               
001906r 3               
001906r 3               ; ## MINUS_TRAILING ( addr u1 -- addr u2 ) "Remove trailing spaces"
001906r 3               ; ## "-trailing"  auto  ANS string
001906r 3                       ; """https://forth-standard.org/standard/string/MinusTRAILING
001906r 3                       ; Remove trailing spaces
001906r 3                       ; """
001906r 3               
001906r 3               xt_minus_trailing:
001906r 3  20 rr rr                     jsr underflow_2
001909r 3               
001909r 3                               ; if length entry is zero, return a zero and leave the
001909r 3                               ; address part untouched
001909r 3  B5 00                        lda 0,x         ; LSB of n
00190Br 3  15 01                        ora 1,x         ; MSB of n
00190Dr 3  F0 33                        beq @done
00190Fr 3               
00190Fr 3                               ; Compute address of last char in tmp1 as
00190Fr 3                               ; addr + u1 - 1
00190Fr 3               
00190Fr 3                               ; addr + u1
00190Fr 3  18                           clc
001910r 3  B5 02                        lda 2,x         ; LSB of addr
001912r 3  75 00                        adc 0,x
001914r 3  85 rr                        sta tmp1
001916r 3  B5 03                        lda 3,x         ; MSB of addr
001918r 3  75 01                        adc 1,x
00191Ar 3  85 rr                        sta tmp1+1
00191Cr 3               
00191Cr 3                               ; - 1
00191Cr 3  A5 rr                        lda tmp1
00191Er 3  D0 02                        bne @1
001920r 3  C6 rr                        dec tmp1+1
001922r 3               @1:
001922r 3  C6 rr                        dec tmp1
001924r 3               
001924r 3               @loop:
001924r 3                               ; While spaces are found, move tmp1 backwards and
001924r 3                               ; decrease the count on the data stack.
001924r 3  B2 rr                        lda (tmp1)
001926r 3  C9 20                        cmp #AscSP
001928r 3  D0 18                        bne @done
00192Ar 3               
00192Ar 3                               ; Move back one address.
00192Ar 3  A5 rr                        lda tmp1
00192Cr 3  D0 02                        bne @2
00192Er 3  C6 rr                        dec tmp1+1
001930r 3               @2:
001930r 3  C6 rr                        dec tmp1
001932r 3               
001932r 3                               ; Decrement count by one.
001932r 3  B5 00                        lda 0,x
001934r 3  D0 02                        bne @3
001936r 3  D6 01                        dec 1,x
001938r 3               @3:
001938r 3  D6 00                        dec 0,x
00193Ar 3               
00193Ar 3                               ; Check if there are any characters left.
00193Ar 3  B5 00                        lda 0,x
00193Cr 3  15 01                        ora 1,x
00193Er 3  F0 02                        beq @done       ; Count has reached zero - we're done!
001940r 3               
001940r 3  80 E2                        bra @loop
001942r 3               
001942r 3               @done:
001942r 3               z_minus_trailing:
001942r 3  60                           rts
001943r 3               
001943r 3               
001943r 3               
001943r 3               ; ## MOD ( n1 n2 -- n ) "Divide NOS by TOS and return the remainder"
001943r 3               ; ## "mod"  auto  ANS core
001943r 3                       ; """https://forth-standard.org/standard/core/MOD
001943r 3                       ;
001943r 3                       ; The Forth definition of this word is  : MOD /MOD DROP ;
001943r 3                       ; so we just jump to xt_slash_mod and dump the actual result.
001943r 3                       ; """
001943r 3               xt_mod:
001943r 3  20 rr rr                     jsr underflow_2
001946r 3               
001946r 3  20 rr rr                     jsr xt_slash_mod
001949r 3               
001949r 3  E8                           inx             ; DROP
00194Ar 3  E8                           inx
00194Br 3               z_mod:
00194Br 3  60                           rts
00194Cr 3               
00194Cr 3               
00194Cr 3               ; ## MOVE ( addr1 addr2 u -- ) "Copy bytes"
00194Cr 3               ; ## "move"  auto  ANS core
00194Cr 3                       ; """https://forth-standard.org/standard/core/MOVE
00194Cr 3                       ; Copy u "address units" from addr1 to addr2. Since our address
00194Cr 3                       ; units are bytes, this is just a front-end for CMOVE and CMOVE>. This
00194Cr 3                       ; is actually the only one of these three words that is in the CORE
00194Cr 3                       ; set.
00194Cr 3                       ;
00194Cr 3                       ; This word must not be natively compiled.
00194Cr 3                       ; """
00194Cr 3               
00194Cr 3               xt_move:
00194Cr 3                               ; We let CMOVE and CMOVE> check if there is underflow or
00194Cr 3                               ; we've been told to copy zero bytes
00194Cr 3               
00194Cr 3                               ; compare MSB first
00194Cr 3  B5 03                        lda 3,x                 ; MSB of addr2
00194Er 3  D5 05                        cmp 5,x                 ; MSB of addr1
001950r 3  F0 05                        beq @lsb                ; wasn't helpful, move to LSB
001952r 3  B0 0E                        bcs @to_move_up         ; we want CMOVE>
001954r 3               
001954r 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001957r 3               
001957r 3               @lsb:
001957r 3                               ; MSB were equal, so do the whole thing over with LSB
001957r 3  B5 02                        lda 2,x                 ; LSB of addr2
001959r 3  D5 04                        cmp 4,x                 ; LSB of addr1
00195Br 3  F0 08                        beq @equal              ; LSB is equal as well
00195Dr 3  B0 03                        bcs @to_move_up         ; we want CMOVE>
00195Fr 3               
00195Fr 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001962r 3               
001962r 3               @to_move_up:
001962r 3  4C rr rr                     jmp xt_cmove_up         ; JSR/RTS
001965r 3               @equal:
001965r 3                               ; drop three entries from Data Stack
001965r 3  8A                           txa
001966r 3  18                           clc
001967r 3  69 06                        adc #6
001969r 3  AA                           tax
00196Ar 3               
00196Ar 3  60           z_move:         rts
00196Br 3               
00196Br 3               
00196Br 3               
00196Br 3               ; ## NAME_TO_INT ( nt -- xt ) "Convert Name Token to Execute Token"
00196Br 3               ; ## "name>int"  tested  Gforth
00196Br 3                       ; """See
00196Br 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
00196Br 3                       ; """
00196Br 3               
00196Br 3               xt_name_to_int:
00196Br 3  20 rr rr                     jsr underflow_1
00196Er 3               
00196Er 3                               ; The xt starts four bytes down from the nt
00196Er 3  B5 00                        lda 0,x
001970r 3  18                           clc
001971r 3  69 04                        adc #4
001973r 3  85 rr                        sta tmp3
001975r 3               
001975r 3  B5 01                        lda 1,x
001977r 3  90 01                        bcc @done
001979r 3  1A                           inc
00197Ar 3               @done:
00197Ar 3  85 rr                        sta tmp3+1
00197Cr 3               
00197Cr 3  A0 00                        ldy #0
00197Er 3  B1 rr                        lda (tmp3),y
001980r 3  95 00                        sta 0,x
001982r 3  C8                           iny
001983r 3  B1 rr                        lda (tmp3),y
001985r 3  95 01                        sta 1,x
001987r 3               
001987r 3  60           z_name_to_int:  rts
001988r 3               
001988r 3               
001988r 3               
001988r 3               ; ## NAME_TO_STRING ( nt -- addr u ) "Given a name token, return string of word"
001988r 3               ; ## "name>string"  tested  Gforth
001988r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html"""
001988r 3               
001988r 3               xt_name_to_string:
001988r 3  20 rr rr                     jsr underflow_1
00198Br 3               
00198Br 3  CA                           dex
00198Cr 3  CA                           dex
00198Dr 3               
00198Dr 3                               ; the length of the string is the first byte of the
00198Dr 3                               ; header pointed to by nt
00198Dr 3  A1 02                        lda (2,x)
00198Fr 3  95 00                        sta 0,x
001991r 3  74 01                        stz 1,x
001993r 3               
001993r 3                               ; the string itself always starts eight bytes down
001993r 3  B5 02                        lda 2,x         ; LSB
001995r 3  18                           clc
001996r 3  69 08                        adc #8
001998r 3  A8                           tay
001999r 3  B5 03                        lda 3,x         ; MSB
00199Br 3  69 00                        adc #0          ; just need carry
00199Dr 3  95 03                        sta 3,x
00199Fr 3  94 02                        sty 2,x
0019A1r 3               
0019A1r 3               z_name_to_string:
0019A1r 3  60                           rts
0019A2r 3               
0019A2r 3               
0019A2r 3               ; ## NC_LIMIT ( -- addr ) "Return address where NC-LIMIT value is kept"
0019A2r 3               ; ## "nc-limit"  tested  Tali Forth
0019A2r 3               
0019A2r 3               xt_nc_limit:
0019A2r 3  CA                           dex
0019A3r 3  CA                           dex
0019A4r 3  A9 rr                        lda #<nc_limit
0019A6r 3  95 00                        sta 0,x
0019A8r 3  A9 rr                        lda #>nc_limit
0019AAr 3  95 01                        sta 1,x
0019ACr 3               
0019ACr 3  60           z_nc_limit:     rts
0019ADr 3               
0019ADr 3               
0019ADr 3               
0019ADr 3               ; ## NEGATE ( n -- n ) "Two's complement"
0019ADr 3               ; ## "negate"  auto  ANS core
0019ADr 3                       ; """https://forth-standard.org/standard/core/NEGATE"""
0019ADr 3               xt_negate:
0019ADr 3  20 rr rr                     jsr underflow_1
0019B0r 3               
0019B0r 3  A9 00                	lda #0
0019B2r 3  38                           sec
0019B3r 3  F5 00                        sbc 0,x         ; LSB
0019B5r 3  95 00                        sta 0,x
0019B7r 3               
0019B7r 3  A9 00                        lda #0
0019B9r 3  F5 01                        sbc 1,x         ; MSB
0019BBr 3  95 01                        sta 1,x
0019BDr 3               
0019BDr 3  60           z_negate:       rts
0019BEr 3               
0019BEr 3               
0019BEr 3               ; ## NEVER_NATIVE ( -- ) "Flag last word as never natively compiled"
0019BEr 3               ; ## "never-native"  auto  Tali Forth
0019BEr 3               xt_never_native:
0019BEr 3  20 rr rr                     jsr current_to_dp
0019C1r 3  A0 01                        ldy #1          ; offset for status byte
0019C3r 3  B1 rr                        lda (dp),y
0019C5r 3  09 08                        ora #NN         ; Make sure NN flag is set
0019C7r 3  29 FD                        and #$ff-AN     ; and AN flag is clear.
0019C9r 3  91 rr                        sta (dp),y
0019CBr 3               z_never_native:
0019CBr 3  60                           rts
0019CCr 3               
0019CCr 3               
0019CCr 3               ; ## NIP ( b a -- a ) "Delete NOS"
0019CCr 3               ; ## "nip"  auto  ANS core ext
0019CCr 3                       ; """https://forth-standard.org/standard/core/NIP"""
0019CCr 3               xt_nip:
0019CCr 3  20 rr rr                     jsr underflow_2
0019CFr 3               
0019CFr 3  B5 00                        lda 0,x         ; LSB
0019D1r 3  95 02                        sta 2,x
0019D3r 3  B5 01                        lda 1,x         ; MSB
0019D5r 3  95 03                        sta 3,x
0019D7r 3               
0019D7r 3  E8                           inx
0019D8r 3  E8                           inx
0019D9r 3               
0019D9r 3  60           z_nip:          rts
0019DAr 3               
0019DAr 3               
0019DAr 3               ; ## NOT_EQUALS ( n m -- f ) "Return a true flag if TOS != NOS"
0019DAr 3               ; ## "<>"  auto  ANS core ext
0019DAr 3                       ; """https://forth-standard.org/standard/core/ne
0019DAr 3                       ;
0019DAr 3                       ; This is just a variant of EQUAL, we code it separately
0019DAr 3                       ; for speed.
0019DAr 3                       ; """
0019DAr 3               
0019DAr 3               xt_not_equals:
0019DAr 3  20 rr rr                     jsr underflow_2
0019DDr 3               
0019DDr 3  A0 00                        ldy #0                  ; default is true
0019DFr 3               
0019DFr 3  B5 00                        lda 0,x                 ; LSB
0019E1r 3  D5 02                        cmp 2,x
0019E3r 3  D0 0A                        bne @not_equal
0019E5r 3               
0019E5r 3                               ; LSB is equal
0019E5r 3  B5 01                        lda 1,x                 ; MSB
0019E7r 3  D5 03                        cmp 3,x
0019E9r 3  D0 04                        bne @not_equal
0019EBr 3               
0019EBr 3  A9 FF                        lda #$FF
0019EDr 3  80 01                        bra @done
0019EFr 3               
0019EFr 3               @not_equal:
0019EFr 3  88                           dey                     ; drop thru to done
0019F0r 3               
0019F0r 3               @done:
0019F0r 3  98                           tya
0019F1r 3  E8                           inx
0019F2r 3  E8                           inx
0019F3r 3  95 00                        sta 0,x
0019F5r 3  95 01                        sta 1,x
0019F7r 3               
0019F7r 3  60           z_not_equals:   rts
0019F8r 3               
0019F8r 3               
0019F8r 3               
0019F8r 3               ; ## NOT_ROTE ( a b c -- c a b ) "Rotate upwards"
0019F8r 3               ; ## "-rot"  auto  Gforth
0019F8r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Data-stack.html"""
0019F8r 3               
0019F8r 3               xt_not_rote:
0019F8r 3  20 rr rr                     jsr underflow_3
0019FBr 3               
0019FBr 3  B4 01                        ldy 1,x         ; MSB first
0019FDr 3  B5 03                        lda 3,x
0019FFr 3  95 01                        sta 1,x
001A01r 3               
001A01r 3  B5 05                        lda 5,x
001A03r 3  95 03                        sta 3,x
001A05r 3  94 05                        sty 5,x
001A07r 3               
001A07r 3  B4 00                        ldy 0,x         ; LSB second
001A09r 3  B5 02                        lda 2,x
001A0Br 3  95 00                        sta 0,x
001A0Dr 3               
001A0Dr 3  B5 04                        lda 4,x
001A0Fr 3  95 02                        sta 2,x
001A11r 3  94 04                        sty 4,x
001A13r 3               
001A13r 3  60           z_not_rote:     rts
001A14r 3               
001A14r 3               
001A14r 3               
001A14r 3               ; ## NUMBER ( addr u -- u | d ) "Convert a number string"
001A14r 3               ; ## "number"  auto  Tali Forth
001A14r 3                       ; """Convert a number string to a double or single cell number. This
001A14r 3                       ; is a wrapper for >NUMBER and follows the convention set out in the
001A14r 3                       ; "Forth Programmer's Handbook" (Conklin & Rather) 3rd edition p. 87.
001A14r 3                       ; Based in part on the "Starting Forth" code
001A14r 3                       ; https://www.forth.com/starting-forth/10-input-output-operators/
001A14r 3                       ; Gforth uses S>NUMBER? and S>UNUMBER? which return numbers and a flag
001A14r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
001A14r 3                       ; Another difference to Gforth is that we follow ANS Forth that the
001A14r 3                       ; dot to signal a double cell number is required to be the last
001A14r 3                       ; character of the string.
001A14r 3                       ;
001A14r 3                       ; Number calls >NUMBER which in turn calls UM*,
001A14r 3                       ; which uses tmp1, tmp2, and tmp3, so we can't use them here, which is
001A14r 3                       ; a pain.
001A14r 3                       ;"""
001A14r 3               
001A14r 3               xt_number:
001A14r 3  20 rr rr                     jsr underflow_2
001A17r 3               
001A17r 3                               ; we keep the flags for sign and double in tmpdsp because
001A17r 3                               ; we've run out of temporary variables
001A17r 3  64 rr                        stz tmpdsp      ; flag for double
001A19r 3  64 rr                        stz tmpdsp+1    ; flag for minus
001A1Br 3               
001A1Br 3                               ; If the first character is a minus, strip it off and set
001A1Br 3                               ; the flag
001A1Br 3  A1 02                        lda (2,x)
001A1Dr 3  C9 2D                        cmp #$2D        ; ASCII for "-"
001A1Fr 3  D0 0A                        bne @check_dot
001A21r 3               
001A21r 3                               ; It's a minus
001A21r 3  C6 rr                        dec tmpdsp+1
001A23r 3  F6 02                        inc 2,x         ; start one character later
001A25r 3  D0 02                        bne @1
001A27r 3  F6 03                        inc 3,x
001A29r 3               @1:
001A29r 3  D6 00                        dec 0,x         ; decrease string length by one
001A2Br 3               
001A2Br 3               @check_dot:
001A2Br 3                               ; If the last character is a dot, strip it off and set a
001A2Br 3                               ; flag. We can use tmptos as a temporary variable
001A2Br 3  B5 02                        lda 2,x         ; LSB of address
001A2Dr 3  18                           clc
001A2Er 3  75 00                        adc 0,x         ; length of string
001A30r 3  85 rr                        sta tmptos
001A32r 3  B5 03                        lda 3,x
001A34r 3  69 00                        adc #0          ; only need carry
001A36r 3  85 rr                        sta tmptos+1
001A38r 3               
001A38r 3                               ; tmptos now points to the first character after the string,
001A38r 3                               ; but we need the last character
001A38r 3  A5 rr                        lda tmptos
001A3Ar 3  D0 02                        bne @2
001A3Cr 3  C6 rr                        dec tmptos+1
001A3Er 3               @2:
001A3Er 3  C6 rr                        dec tmptos
001A40r 3               
001A40r 3  B2 rr                        lda (tmptos)
001A42r 3  C9 2E                        cmp #'.'
001A44r 3  D0 04                        bne @main
001A46r 3               
001A46r 3                               ; We have a dot, which means this is a double number. Flag
001A46r 3                               ; the fact and reduce string length by one
001A46r 3  C6 rr                        dec tmpdsp
001A48r 3  D6 00                        dec 0,x
001A4Ar 3               
001A4Ar 3               @main:
001A4Ar 3                               ; Set up stack for subroutine jump to >NUMBER, which means
001A4Ar 3                               ; we have to go ( addr u --> ud addr u )
001A4Ar 3  CA                           dex
001A4Br 3  CA                           dex
001A4Cr 3  CA                           dex
001A4Dr 3  CA                           dex
001A4Er 3               
001A4Er 3  B5 04                        lda 4,x         ; LSB of length
001A50r 3  95 00                        sta 0,x
001A52r 3  74 01                        stz 1,x         ; MSB, max length 255 chars
001A54r 3               
001A54r 3  B5 06                        lda 6,x         ; LSB of address
001A56r 3  95 02                        sta 2,x
001A58r 3  B5 07                        lda 7,x         ; MSB of address
001A5Ar 3  95 03                        sta 3,x
001A5Cr 3               
001A5Cr 3  74 04                        stz 4,x         ; clear space for ud
001A5Er 3  74 05                        stz 5,x
001A60r 3  74 06                        stz 6,x
001A62r 3  74 07                        stz 7,x
001A64r 3               
001A64r 3  20 rr rr                     jsr xt_to_number        ; (ud addr u -- ud addr u )
001A67r 3               
001A67r 3                               ; test length of returned string, which should be zero
001A67r 3  B5 00                        lda 0,x
001A69r 3  F0 15                        beq @all_converted
001A6Br 3               
001A6Br 3                               ; Something went wrong, we still have characters left over,
001A6Br 3                               ; so we print an error and abort. If the NUMBER was called
001A6Br 3                               ; by INTERPRET, we've already checked for Forth words, so
001A6Br 3                               ; we're in deep trouble one way or another
001A6Br 3  A9 3E                        lda #$3E        ; ASCII for ">"
001A6Dr 3  20 rr rr                     jsr emit_a
001A70r 3  20 rr rr                     jsr xt_type
001A73r 3  A9 3C                        lda #$3C        ; ASCII for "<"
001A75r 3  20 rr rr                     jsr emit_a
001A78r 3  20 rr rr                     jsr xt_space
001A7Br 3               
001A7Br 3  A9 08                        lda #err_syntax
001A7Dr 3  4C rr rr                     jmp error
001A80r 3               
001A80r 3               @all_converted:
001A80r 3                               ; We can drop the string info
001A80r 3  E8                           inx
001A81r 3  E8                           inx
001A82r 3  E8                           inx
001A83r 3  E8                           inx
001A84r 3               
001A84r 3                               ; We have a double-cell number on the Data Stack that might
001A84r 3                               ; actually have a minus and might actually be single-cell
001A84r 3  A5 rr                        lda tmpdsp      ; flag for double
001A86r 3  F0 0D                        beq @single
001A88r 3               
001A88r 3                               ; Set status bit 5 to indicate this is a double number
001A88r 3  A9 20                        lda #%00100000
001A8Ar 3  04 rr                        tsb status
001A8Cr 3               
001A8Cr 3                               ; This is a double cell number. If it had a minus, we'll have
001A8Cr 3                               ; to negate it
001A8Cr 3  A5 rr                        lda tmpdsp+1
001A8Er 3  F0 12                        beq @done       ; no minus, all done
001A90r 3               
001A90r 3  20 rr rr                     jsr xt_dnegate
001A93r 3               
001A93r 3  80 0D                        bra @done
001A95r 3               
001A95r 3               @single:
001A95r 3                               ; This is a single number, so we just drop the top cell
001A95r 3  E8                           inx
001A96r 3  E8                           inx
001A97r 3               
001A97r 3                               ; Clear status bit 5 to indicate this is a single number
001A97r 3  A9 20                        lda #%00100000
001A99r 3  14 rr                        trb status
001A9Br 3               
001A9Br 3                               ; If we had a minus, we'll have to negate it
001A9Br 3  A5 rr                        lda tmpdsp+1
001A9Dr 3  F0 03                        beq @done       ; no minus, all done
001A9Fr 3               
001A9Fr 3  20 rr rr                     jsr xt_negate
001AA2r 3               @done:
001AA2r 3  60           z_number:       rts
001AA3r 3               
001AA3r 3               
001AA3r 3               
001AA3r 3               ; ## NUMBER_SIGN ( ud -- ud ) "Add character to pictured output string"
001AA3r 3               ; ## "#"  auto  ANS core
001AA3r 3                       ; """https://forth-standard.org/standard/core/num
001AA3r 3                       ; Add one char to the beginning of the pictured output string.
001AA3r 3                       ;
001AA3r 3                       ; Based on
001AA3r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001AA3r 3                       ; Forth code  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
001AA3r 3                       ; """
001AA3r 3               xt_number_sign:
001AA3r 3  20 rr rr                     jsr underflow_2         ; double number
001AA6r 3               
001AA6r 3  20 rr rr                     jsr xt_base
001AA9r 3  20 rr rr                     jsr xt_fetch            ; ( ud1 base )
001AACr 3               
001AACr 3                               ; The following code is the ancient Forth word UD/MOD, which in
001AACr 3                               ; various Forths (including Gforth) lives on under the hood,
001AACr 3                               ; even though it's not an ANS standard word, it doesn't appear
001AACr 3                               ; in the docs, it's only used here, and there are no tests for
001AACr 3                               ; it. This is why we got rid of it. We'll be converting this
001AACr 3                               ; mess to something more sane in the long run.
001AACr 3  20 rr rr                     jsr xt_to_r             ; >r
001AAFr 3  20 rr rr                     jsr xt_zero             ; 0
001AB2r 3  20 rr rr                     jsr xt_r_fetch          ; r@
001AB5r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001AB8r 3  20 rr rr                     jsr xt_rot              ; rot
001ABBr 3  20 rr rr                     jsr xt_rot              ; rot
001ABEr 3  20 rr rr                     jsr xt_r_from           ; r>
001AC1r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001AC4r 3  20 rr rr                     jsr xt_rot              ; rot
001AC7r 3                               ; end of UD/MOD ( rem ud )
001AC7r 3               
001AC7r 3  20 rr rr                     jsr xt_rot              ; ( ud rem )
001ACAr 3               
001ACAr 3                               ; Convert the number that is left over to an ASCII character. We
001ACAr 3                               ; use a string lookup for speed. Use either abc_str_lower for
001ACAr 3                               ; lower case or abc_str_upper for upper case (prefered)
001ACAr 3  B5 00                        lda 0,x
001ACCr 3  A8                           tay
001ACDr 3  B9 rr rr                     lda s_abc_upper,y
001AD0r 3  95 00                        sta 0,x
001AD2r 3  74 01                        stz 1,x                 ; paranoid; now ( ud char )
001AD4r 3               
001AD4r 3  20 rr rr                     jsr xt_hold
001AD7r 3               
001AD7r 3               z_number_sign:
001AD7r 3  60                           rts
001AD8r 3               
001AD8r 3               
001AD8r 3               ; ## NUMBER_SIGN_GREATER ( d -- addr u ) "Finish pictured number conversion"
001AD8r 3               ; ## "#>"  auto  ANS core
001AD8r 3                       ; """https://forth-standard.org/standard/core/num-end
001AD8r 3                       ; Finish conversion of pictured number string, putting address and
001AD8r 3                       ; length on the Data Stack.
001AD8r 3                       ;
001AD8r 3                       ; Original Fort is  2DROP HLD @ PAD OVER -
001AD8r 3                       ; Based on
001AD8r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001AD8r 3                       ; """
001AD8r 3               xt_number_sign_greater:
001AD8r 3               
001AD8r 3  20 rr rr                     jsr underflow_2         ; double number
001ADBr 3               
001ADBr 3                               ; The start address lives in tohold
001ADBr 3  A5 rr                        lda tohold
001ADDr 3  95 00                        sta 0,x         ; LSB of tohold
001ADFr 3  95 02                        sta 2,x
001AE1r 3  A5 rr                        lda tohold+1
001AE3r 3  95 01                        sta 1,x         ; MSB of addr
001AE5r 3  95 03                        sta 3,x         ; ( addr addr )
001AE7r 3               
001AE7r 3                               ; The length of the string is pad - addr
001AE7r 3  20 rr rr                     jsr xt_pad      ; ( addr addr pad )
001AEAr 3               
001AEAr 3  38                           sec
001AEBr 3  B5 00                        lda 0,x         ; LSB of pad address
001AEDr 3  F5 02                        sbc 2,x
001AEFr 3  95 02                        sta 2,x
001AF1r 3               
001AF1r 3  B5 01                        lda 1,x         ; MSB, which should always be zero
001AF3r 3  F5 03                        sbc 3,x
001AF5r 3  95 03                        sta 3,x         ; ( addr u pad )
001AF7r 3               
001AF7r 3  E8                           inx
001AF8r 3  E8                           inx
001AF9r 3               
001AF9r 3               z_number_sign_greater:
001AF9r 3  60                           rts
001AFAr 3               
001AFAr 3               
001AFAr 3               ; ## NUMBER_SIGN_S ( d -- addr u ) "Completely convert pictured output"
001AFAr 3               ; ## "#s"  auto  ANS core
001AFAr 3                       ; """https://forth-standard.org/standard/core/numS
001AFAr 3                       ; Completely convert number for pictured numerical output.
001AFAr 3                       ;
001AFAr 3                       ; Based on
001AFAr 3                       ; https://github.com/philburk/pforth/blob/master/fth/system.fth
001AFAr 3                       ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
001AFAr 3                       ; """
001AFAr 3               
001AFAr 3               xt_number_sign_s:
001AFAr 3  20 rr rr                     jsr underflow_2
001AFDr 3               @loop:
001AFDr 3                               ; convert a single number ("#")
001AFDr 3  20 rr rr                     jsr xt_number_sign
001B00r 3               
001B00r 3                               ; stop when double-celled number in TOS is zero:
001B00r 3  B5 00                        lda 0,x
001B02r 3  15 01                        ora 1,x
001B04r 3  15 02                        ora 2,x
001B06r 3  15 03                        ora 3,x
001B08r 3  D0 F3                        bne @loop
001B0Ar 3               
001B0Ar 3               z_number_sign_s:
001B0Ar 3  60                           rts
001B0Br 3               
001B0Br 3               
001B0Br 3               
001B0Br 3               ; ## OF (C: -- of-sys) (x1 x2 -- |x1) "Conditional flow control"
001B0Br 3               ; ## "of"  auto  ANS core ext
001B0Br 3                       ; """http://forth-standard.org/standard/core/OF"""
001B0Br 3               
001B0Br 3               xt_of:
001B0Br 3                               ; Check if value is equal to this case.
001B0Br 3                               ; Postpone over (eg. compile a jsr to it)
001B0Br 3  A0 rr                        ldy #>xt_over
001B0Dr 3  A9 rr                        lda #<xt_over
001B0Fr 3  20 rr rr                     jsr cmpl_subroutine
001B12r 3               
001B12r 3                               ; Postpone = (EQUAL), that is, compile a jsr to it
001B12r 3  A0 rr                        ldy #>xt_equal
001B14r 3  A9 rr                        lda #<xt_equal
001B16r 3  20 rr rr                     jsr cmpl_subroutine
001B19r 3               
001B19r 3  20 rr rr                     jsr xt_if
001B1Cr 3               
001B1Cr 3                               ; If it's true, consume the original value.
001B1Cr 3                               ; Postpone DROP (eg. compile a jsr to it)
001B1Cr 3  A0 rr                        ldy #>xt_drop
001B1Er 3  A9 rr                        lda #<xt_drop
001B20r 3  20 rr rr                     jsr cmpl_subroutine
001B23r 3               
001B23r 3  60           z_of:           rts
001B24r 3               
001B24r 3               
001B24r 3               
001B24r 3               ; ## ONE ( -- n ) "Push the number 1 to the Data Stack"
001B24r 3               ; ## "1"  auto  Tali Forth
001B24r 3                       ; """This is also the code for EDITOR-WORDLIST"""
001B24r 3               xt_editor_wordlist:
001B24r 3               xt_one:
001B24r 3  CA                           dex
001B25r 3  CA                           dex
001B26r 3  A9 01                        lda #1
001B28r 3  95 00                        sta 0,x
001B2Ar 3  74 01                        stz 1,x
001B2Cr 3               
001B2Cr 3               z_editor_wordlist:
001B2Cr 3               z_one:
001B2Cr 3  60                           rts
001B2Dr 3               
001B2Dr 3               
001B2Dr 3               ; ## ONE_MINUS ( u -- u-1 ) "Decrease TOS by one"
001B2Dr 3               ; ## "1-"  auto  ANS core
001B2Dr 3                       ; """https://forth-standard.org/standard/core/OneMinus"""
001B2Dr 3               
001B2Dr 3               xt_one_minus:
001B2Dr 3  20 rr rr                     jsr underflow_1
001B30r 3               
001B30r 3  B5 00                        lda 0,x
001B32r 3  D0 02                        bne @1
001B34r 3  D6 01                        dec 1,x
001B36r 3               @1:
001B36r 3  D6 00                        dec 0,x
001B38r 3               
001B38r 3  60           z_one_minus:    rts
001B39r 3               
001B39r 3               
001B39r 3               
001B39r 3               ; ## ONE_PLUS ( u -- u+1 ) "Increase TOS by one"
001B39r 3               ; ## "1+"  auto  ANS core
001B39r 3                       ; """https://forth-standard.org/standard/core/OnePlus
001B39r 3                       ;
001B39r 3                       ; Code is shared with CHAR-PLUS
001B39r 3                       ; """
001B39r 3               
001B39r 3               xt_char_plus:
001B39r 3               xt_one_plus:
001B39r 3  20 rr rr                     jsr underflow_1
001B3Cr 3               
001B3Cr 3  F6 00                        inc 0,x
001B3Er 3  D0 02                        bne @done
001B40r 3  F6 01                        inc 1,x
001B42r 3               
001B42r 3               @done:
001B42r 3               z_char_plus:
001B42r 3  60           z_one_plus:     rts
001B43r 3               
001B43r 3               
001B43r 3               
001B43r 3               ; ## ONLY ( -- ) "Set earch order to minimum wordlist"
001B43r 3               ; ## "only"  auto  ANS search ext
001B43r 3                       ; """https://forth-standard.org/standard/search/ONLY"""
001B43r 3               
001B43r 3               xt_only:
001B43r 3                               ; Put -1 on data stack.
001B43r 3  CA                           dex
001B44r 3  CA                           dex
001B45r 3  A9 FF                        lda #$FF
001B47r 3  95 00                        sta 0,x
001B49r 3  95 01                        sta 1,x
001B4Br 3               
001B4Br 3                               ; Invoke set-order to set the minimum search order.
001B4Br 3  20 rr rr                     jsr xt_set_order
001B4Er 3               
001B4Er 3  60           z_only:         rts
001B4Fr 3               
001B4Fr 3               
001B4Fr 3               
001B4Fr 3               ; ## OR ( m n -- n ) "Logically OR TOS and NOS"
001B4Fr 3               ; ## "or"  auto  ANS core
001B4Fr 3                       ; """https://forth-standard.org/standard/core/OR"
001B4Fr 3               xt_or:
001B4Fr 3  20 rr rr                     jsr underflow_2
001B52r 3               
001B52r 3  B5 00                        lda 0,x
001B54r 3  15 02                        ora 2,x
001B56r 3  95 02                        sta 2,x
001B58r 3               
001B58r 3  B5 01                        lda 1,x
001B5Ar 3  15 03                        ora 3,x
001B5Cr 3  95 03                        sta 3,x
001B5Er 3               
001B5Er 3  E8                           inx
001B5Fr 3  E8                           inx
001B60r 3               
001B60r 3  60           z_or:           rts
001B61r 3               
001B61r 3               
001B61r 3               ; ## ORDER ( -- ) "Print current word order list and current WID"
001B61r 3               ; ## "order"  auto  ANS core
001B61r 3                       ; """https://forth-standard.org/standard/search/ORDER
001B61r 3                       ; Note the search order is displayed from first search to last
001B61r 3                       ; searched and is therefore exactly the reverse of the order in which
001B61r 3                       ; Forth stacks are displayed.
001B61r 3                       ;
001B61r 3                       ; A Forth implementation of this word is:
001B61r 3                       ;
001B61r 3                       ; 	: .wid ( wid -- )
001B61r 3                       ; 	dup 0=  if ." Forth "  drop    else
001B61r 3                       ; 	dup 1 = if ." Editor " drop    else
001B61r 3                       ; 	dup 2 = if ." Assembler " drop else
001B61r 3                       ; 	dup 3 = if ." Root " drop      else
001B61r 3                       ; 	           . ( just print the number )
001B61r 3                       ; 	then then then then ;
001B61r 3                       ;
001B61r 3                       ; : ORDER ( -- )
001B61r 3                       ; 	cr get-order 0 ?do .wid loop
001B61r 3                       ; 	space space get-current .wid ;
001B61r 3                       ;
001B61r 3                       ; This is an interactive program, so speed
001B61r 3                       ; is not as important as size. We assume we do not have more than 255
001B61r 3                       ; wordlists.
001B61r 3                       ; """
001B61r 3               
001B61r 3               xt_order:
001B61r 3  20 rr rr                     jsr xt_cr
001B64r 3  20 rr rr                     jsr xt_get_order        ; ( wid_n ... wid_1 n )
001B67r 3               
001B67r 3                               ; Paranoid: Check if there are no wordlists, a rather
001B67r 3                               ; pathological case. this would mean ( 0 ) on the stack. In
001B67r 3                               ; that case, we just drop n and run
001B67r 3  B5 00                        lda 0,x                 ; assumes no more than 255 wordlists
001B69r 3  F0 1E                        beq @drop_done
001B6Br 3               
001B6Br 3               @have_wordlists:
001B6Br 3                               ; We arrive here with the LSB of TOS in A, the number of WIDs
001B6Br 3                               ; on the stack
001B6Br 3  A8                           tay
001B6Cr 3               @loop:
001B6Cr 3  E8                           inx
001B6Dr 3  E8                           inx                     ; DROP, now ( wid_n ... wid_1 )
001B6Er 3  B5 00                        lda 0,x
001B70r 3               
001B70r 3  5A                           phy
001B71r 3  20 rr rr                     jsr _print_wid_string   ; internal helper function
001B74r 3  7A                           ply
001B75r 3               
001B75r 3  88                           dey
001B76r 3  D0 F4                        bne @loop
001B78r 3               
001B78r 3                               ; We've printed the wordlists, now we add the current wordlist.
001B78r 3                               ; This follows the convention of Gforth
001B78r 3  20 rr rr                     jsr xt_space
001B7Br 3  20 rr rr                     jsr xt_space
001B7Er 3  20 rr rr                     jsr xt_get_current      ; ( wid )
001B81r 3               
001B81r 3  B5 00                        lda 0,x
001B83r 3  20 rr rr                     jsr _print_wid_string
001B86r 3  20 rr rr                     jsr xt_cr
001B89r 3               
001B89r 3               @drop_done:
001B89r 3  E8                           inx
001B8Ar 3  E8                           inx
001B8Br 3               z_order:
001B8Br 3  60                           rts
001B8Cr 3               
001B8Cr 3               _print_wid_string:
001B8Cr 3                       ; """Helper function for ORDER: Given a WID in A, print the
001B8Cr 3                       ; corresponding string. If there is no such word list defined, just
001B8Cr 3                       ; print the number. Assumes we will not have more than 256 WIDs; also
001B8Cr 3                       ; assumes we have just loaded A so Z reflects status of byte.  In
001B8Cr 3                       ; theory, we could speed this up by having the WID be the same as the
001B8Cr 3                       ; number of the strings. However, ORDER is used rather infrequently and
001B8Cr 3                       ; this would make changes to the strings.asm file very dangerous, so we
001B8Cr 3                       ; follow the slightly more complicated route with a translation table.
001B8Cr 3                       ; """
001B8Cr 3                               ; If the WID is larger than 3, we have no string avaliable and
001B8Cr 3                               ; just print the number.
001B8Cr 3                               ; See http://6502.org/tutorials/compare_instructions.html
001B8Cr 3                               ; for details
001B8Cr 3  C9 04                        cmp #4
001B8Er 3  90 09                        bcc @output_string      ; less than 4, print a real string
001B90r 3               
001B90r 3                               ; Our WID is not less than 4, that is, 4 or larger. We just
001B90r 3                               ; print the number
001B90r 3  CA                           dex
001B91r 3  CA                           dex
001B92r 3  95 00                        sta 0,x
001B94r 3  74 01                        stz 1,x
001B96r 3  4C rr rr                     jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
001B99r 3               
001B99r 3               @output_string:
001B99r 3                               ; Get the string number based on WID 0 to 3
001B99r 3  A8                           tay
001B9Ar 3  B9 rr rr                     lda @wid_data,y
001B9Dr 3               
001B9Dr 3                               ; Print without a line feed
001B9Dr 3  4C rr rr                     jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
001BA0r 3               
001BA0r 3               @wid_data:
001BA0r 3                       ; Table of string numbers (see strings.asm) indexed by the WID if
001BA0r 3                       ; less than 4.
001BA0r 3  03                   .byte str_wid_forth            ; WID 0: "Forth"
001BA1r 3  06                   .byte str_wid_editor           ; WID 1: "Editor"
001BA2r 3  07                   .byte str_wid_assembler        ; WID 2: "Assembler"
001BA3r 3  08                   .byte str_wid_root             ; WID 3: "Root"
001BA4r 3               
001BA4r 3               
001BA4r 3               
001BA4r 3               ; ## OUTPUT ( -- addr ) "Return the address of the EMIT vector address"
001BA4r 3               ; ## "output"  tested  Tali Forth
001BA4r 3               xt_output:
001BA4r 3                       ; """Return the address where the jump target for EMIT is stored (but
001BA4r 3                       ; not the vector itself). By default, this will hold the value of
001BA4r 3                       ; kernel_putc routine, but this can be changed by the user, hence this
001BA4r 3                       ; routine.
001BA4r 3                       ; """
001BA4r 3  CA                           dex
001BA5r 3  CA                           dex
001BA6r 3  A9 rr                        lda #<output
001BA8r 3  95 00                        sta 0,x
001BAAr 3  A9 rr                        lda #>output
001BACr 3  95 01                        sta 1,x
001BAEr 3               
001BAEr 3  60           z_output:       rts
001BAFr 3               
001BAFr 3               
001BAFr 3               ; ## OVER ( b a -- b a b ) "Copy NOS to TOS"
001BAFr 3               ; ## "over"  auto  ANS core
001BAFr 3                       ; """https://forth-standard.org/standard/core/OVER"""
001BAFr 3               xt_over:
001BAFr 3  20 rr rr                     jsr underflow_2
001BB2r 3               
001BB2r 3  CA                           dex
001BB3r 3  CA                           dex
001BB4r 3               
001BB4r 3  B5 04                        lda 4,x         ; LSB
001BB6r 3  95 00                        sta 0,x
001BB8r 3  B5 05                        lda 5,x         ; MSB
001BBAr 3  95 01                        sta 1,x
001BBCr 3               
001BBCr 3  60           z_over:         rts
001BBDr 3               
001BBDr 3               
001BBDr 3               ; ## PAD ( -- addr ) "Return address of user scratchpad"
001BBDr 3               ; ## "pad"  auto  ANS core ext
001BBDr 3                       ; """https://forth-standard.org/standard/core/PAD
001BBDr 3                       ; Return address to a temporary area in free memory for user. Must
001BBDr 3                       ; be at least 84 bytes in size (says ANS). It is located relative to
001BBDr 3                       ; the compile area pointer (CP) and therefore varies in position.
001BBDr 3                       ; This area is reserved for the user and not used by the system
001BBDr 3                       ; """
001BBDr 3               xt_pad:
001BBDr 3  CA                           dex
001BBEr 3  CA                           dex
001BBFr 3               
001BBFr 3  A5 rr                        lda cp
001BC1r 3  18                           clc
001BC2r 3  69 FF                        adc #padoffset  ; assumes padoffset one byte in size
001BC4r 3  95 00                        sta 0,x
001BC6r 3               
001BC6r 3  A5 rr                        lda cp+1
001BC8r 3  69 00                        adc #0          ; only need carry
001BCAr 3  95 01                        sta 1,x
001BCCr 3               
001BCCr 3  60           z_pad:          rts
001BCDr 3               
001BCDr 3               
001BCDr 3               ; ## PAGE ( -- ) "Clear the screen"
001BCDr 3               ; ## "page"  tested  ANS facility
001BCDr 3                       ; """https://forth-standard.org/standard/facility/PAGE
001BCDr 3                       ; Clears a page if supported by ANS terminal codes. This is
001BCDr 3                       ; Clear Screen ("ESC[2J") plus moving the cursor to the top
001BCDr 3                       ; left of the screen
001BCDr 3                       ; """
001BCDr 3               xt_page:
001BCDr 3  A9 1B                        lda #AscESC
001BCFr 3  20 rr rr                     jsr emit_a
001BD2r 3  A9 5B                        lda #$5B        ; ASCII for "["
001BD4r 3  20 rr rr                     jsr emit_a
001BD7r 3  A9 32                        lda #'2'
001BD9r 3  20 rr rr                     jsr emit_a
001BDCr 3  A9 4A                        lda #'J'
001BDEr 3  20 rr rr                     jsr emit_a
001BE1r 3               
001BE1r 3                               ; move cursor to top left of screen
001BE1r 3  20 rr rr                     jsr xt_zero
001BE4r 3  20 rr rr                     jsr xt_zero
001BE7r 3  20 rr rr                     jsr xt_at_xy
001BEAr 3               
001BEAr 3  60           z_page:         rts
001BEBr 3               
001BEBr 3               
001BEBr 3               ; ## PAREN ( -- ) "Discard input up to close paren ( comment )"
001BEBr 3               ; ## "("  auto  ANS core
001BEBr 3                       ; """http://forth-standard.org/standard/core/p"""
001BEBr 3               
001BEBr 3               xt_paren:
001BEBr 3                               ; Put a right paren on the stack.
001BEBr 3  CA                           dex
001BECr 3  CA                           dex
001BEDr 3  A9 29                        lda #41     ; Right parenthesis
001BEFr 3  95 00                        sta 0,x
001BF1r 3  74 01                        stz 1,x
001BF3r 3               
001BF3r 3                               ; Call parse.
001BF3r 3  20 rr rr                     jsr xt_parse
001BF6r 3               
001BF6r 3                               ; Throw away the result.
001BF6r 3  E8                           inx
001BF7r 3  E8                           inx
001BF8r 3  E8                           inx
001BF9r 3  E8                           inx
001BFAr 3               
001BFAr 3  60           z_paren:        rts
001BFBr 3               
001BFBr 3               
001BFBr 3               
001BFBr 3               ; ## PARSE_NAME ( "name" -- addr u ) "Parse the input"
001BFBr 3               ; ## "parse-name"  auto  ANS core ext
001BFBr 3                       ; """https://forth-standard.org/standard/core/PARSE-NAME
001BFBr 3                       ; Find next word in input string, skipping leading whitespace. This is
001BFBr 3                       ; a special form of PARSE and drops through to that word. See PARSE
001BFBr 3                       ; for more detail. We use this word internally for the interpreter
001BFBr 3                       ; because it is a lot easier to use. Reference implementations at
001BFBr 3                       ; http://forth-standard.org/standard/core/PARSE-NAME and
001BFBr 3                       ; http://www.forth200x.org/reference-implementations/parse-name.fs
001BFBr 3                       ; Roughly, the word is comparable to BL WORD COUNT. -- Note that
001BFBr 3                       ; though the ANS standard talks about skipping "spaces", whitespace
001BFBr 3                       ; is actually perfectly legal (see for example
001BFBr 3                       ; http://forth-standard.org/standard/usage#subsubsection.3.4.1.1).
001BFBr 3                       ; Otherwise, PARSE-NAME chokes on tabs.
001BFBr 3                       ; """
001BFBr 3               
001BFBr 3               xt_parse_name:
001BFBr 3                               ; To enable the compilation of the high-level Forth words
001BFBr 3                               ; in forth-words.asm and user-words.asm at boot time,
001BFBr 3                               ; PARSE-NAME and PARSE must be able to deal with 16-bit string
001BFBr 3                               ; lengths. This is a pain on an 8-bit machine. The pointer
001BFBr 3                               ; to the current location is in toin (>IN). We need to check,
001BFBr 3                               ; worst case, the characters from cib+toin to cib+ciblen, and
001BFBr 3                               ; we can't just use Y as an index.
001BFBr 3               
001BFBr 3                               ; The counter is CIBLEN-TOIN and stored in tmp1
001BFBr 3  A5 rr                        lda ciblen              ; LSB of counter
001BFDr 3  38                           sec
001BFEr 3  E5 rr                        sbc toin
001C00r 3  85 rr                        sta tmp1
001C02r 3  A5 rr                        lda ciblen+1            ; MSB
001C04r 3  E5 rr                        sbc toin+1
001C06r 3  85 rr                        sta tmp1+1
001C08r 3               
001C08r 3                               ; Check the result for zero (TOIN is equal to CIBLEN)
001C08r 3  A5 rr                        lda tmp1
001C0Ar 3  05 rr                        ora tmp1+1
001C0Cr 3  F0 28                        beq @empty_line
001C0Er 3               
001C0Er 3                               ; We walk through the characters starting at CIB+TOIN, so we
001C0Er 3                               ; save a temp version of that in tmp2
001C0Er 3  A5 rr                        lda cib
001C10r 3  18                           clc
001C11r 3  65 rr                        adc toin
001C13r 3  85 rr                        sta tmp2                ; LSB of first character
001C15r 3  A5 rr                        lda cib+1
001C17r 3  65 rr                        adc toin+1
001C19r 3  85 rr                        sta tmp2+1              ; MSB
001C1Br 3               
001C1Br 3               @skip_loop:
001C1Br 3  B2 rr                        lda (tmp2)              ; work copy of cib
001C1Dr 3  20 rr rr                     jsr is_whitespace
001C20r 3  90 1F                        bcc @char_found
001C22r 3               
001C22r 3                               ; Char is still whitespace, continue
001C22r 3  E6 rr                        inc tmp2
001C24r 3  D0 02                        bne @2
001C26r 3  E6 rr                        inc tmp2+1
001C28r 3               @2:
001C28r 3                               ; Adjust counter
001C28r 3  A5 rr                        lda tmp1
001C2Ar 3  D0 02                        bne @3
001C2Cr 3  C6 rr                        dec tmp1+1
001C2Er 3               @3:
001C2Er 3  C6 rr                        dec tmp1
001C30r 3               
001C30r 3  A5 rr                        lda tmp1
001C32r 3  05 rr                        ora tmp1+1
001C34r 3  D0 E5                        bne @skip_loop          ; fall through if empty line
001C36r 3               
001C36r 3               @empty_line:
001C36r 3                               ; Neither the ANS Forth nor the Gforth documentation say
001C36r 3                               ; what to return as an address if a string with only
001C36r 3                               ; spaces is given. For speed reasons, we just return junk
001C36r 3                               ; NOS, with the TOS zero as per standard
001C36r 3  CA                           dex
001C37r 3  CA                           dex
001C38r 3  CA                           dex
001C39r 3  CA                           dex
001C3Ar 3               
001C3Ar 3  74 00                        stz 0,x                 ; TOS is zero
001C3Cr 3  74 01                        stz 1,x
001C3Er 3               
001C3Er 3  4C rr rr                     jmp z_parse_name        ; skip over PARSE
001C41r 3               
001C41r 3               @char_found:
001C41r 3                               ; We arrive here with tmp2 pointing to the first non-space
001C41r 3                               ; character. This is where the word really starts, so
001C41r 3                               ; we use it to calculate the new >IN by subtracting
001C41r 3  A5 rr                        lda tmp2
001C43r 3  38                           sec
001C44r 3  E5 rr                        sbc cib
001C46r 3  85 rr                        sta toin
001C48r 3  A5 rr                        lda tmp2+1
001C4Ar 3  E5 rr                        sbc cib+1
001C4Cr 3  85 rr                        sta toin+1
001C4Er 3               
001C4Er 3                               ; prepare Data Stack for PARSE by adding space
001C4Er 3                               ; as the delimiter
001C4Er 3  CA                           dex
001C4Fr 3  CA                           dex
001C50r 3               
001C50r 3  A9 20                        lda #AscSP
001C52r 3  95 00                        sta 0,x
001C54r 3  74 01                        stz 1,x                 ; paranoid, now ( "name" c )
001C56r 3               
001C56r 3               
001C56r 3               ; ## PARSE ( "name" c -- addr u ) "Parse input with delimiter character"
001C56r 3               ; ## "parse"  tested  ANS core ext
001C56r 3                       ; """https://forth-standard.org/standard/core/PARSE
001C56r 3                       ; Find word in input string delimited by character given. Do not
001C56r 3                       ; skip leading delimiters -- this is the main difference to PARSE-NAME.
001C56r 3                       ; PARSE and PARSE-NAME replace WORD in modern systems. ANS discussion
001C56r 3                       ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
001C56r 3                       ;
001C56r 3                       ;
001C56r 3                       ;     cib  cib+toin   cib+ciblen
001C56r 3                       ;      v      v            v
001C56r 3                       ;     |###################|
001C56r 3                       ;
001C56r 3                       ;     |------>|  toin (>IN)
001C56r 3                       ;     |------------------->|  ciblen
001C56r 3                       ;
001C56r 3                       ; The input string is stored starting at the address in the Current
001C56r 3                       ; Input Buffer (CIB), the length of which is in CIBLEN. While searching
001C56r 3                       ; for the delimiter, TOIN (>IN) points to the where we currently are.
001C56r 3                       ; Since PARSE does not skip leading delimiters, we assume we are on a
001C56r 3                       ; useful string if there are any characters at all. As with
001C56r 3                       ; PARSE-NAME, we must be able to handle strings with a length of
001C56r 3                       ; 16-bit for EVALUTE, which is a pain on an 8-bit machine.
001C56r 3                       ; """
001C56r 3               
001C56r 3               xt_parse:
001C56r 3  20 rr rr                     jsr underflow_1
001C59r 3               
001C59r 3                               ; If the input buffer is empty, we just return
001C59r 3  A5 rr                        lda ciblen
001C5Br 3  05 rr                        ora ciblen+1
001C5Dr 3  F0 0C                        beq @abort_parse
001C5Fr 3               
001C5Fr 3                               ; If the pointer >IN is larger or equal to the length of
001C5Fr 3                               ; the input buffer (CIBLEN), the line is done. Put
001C5Fr 3                               ; differently, we only continue if >IN is smaller than
001C5Fr 3                               ; CIBLEN
001C5Fr 3  A5 rr                        lda toin+1              ; MSB
001C61r 3  C5 rr                        cmp ciblen+1
001C63r 3  90 0E                        bcc @go_parse           ; unsigned comparison
001C65r 3               
001C65r 3  A5 rr                        lda toin                ; LSB
001C67r 3  C5 rr                        cmp ciblen
001C69r 3  90 08                        bcc @go_parse
001C6Br 3               
001C6Br 3               @abort_parse:
001C6Br 3                               ; Sorry, this line is over
001C6Br 3  CA                           dex
001C6Cr 3  CA                           dex
001C6Dr 3  74 00                        stz 0,x
001C6Fr 3  74 01                        stz 1,x
001C71r 3               
001C71r 3  80 7A                        bra @done
001C73r 3               @go_parse:
001C73r 3                               ; We actually have work to do. Save the delimiter in
001C73r 3                               ; tmptos.
001C73r 3  B5 00                        lda 0,x
001C75r 3  85 rr                        sta tmptos
001C77r 3               
001C77r 3                               ; We can now prepare the Data Stack for the return value
001C77r 3  CA                           dex
001C78r 3  CA                           dex
001C79r 3               
001C79r 3                               ; tmp1 is CIB+TOIN, the beginning of the current string
001C79r 3                               ; tmp2 is initially the same as tmp1, then the work index
001C79r 3                               ; tmp3 is CIB+CIBLEN, one char past the end of the string
001C79r 3               
001C79r 3                               ; Calculate the beginning of the string, which is also the
001C79r 3                               ; address to return
001C79r 3  A5 rr                        lda cib
001C7Br 3  18                           clc
001C7Cr 3  65 rr                        adc toin        ; LSB
001C7Er 3  85 rr                        sta tmp1
001C80r 3  85 rr                        sta tmp2
001C82r 3  95 02                        sta 2,x
001C84r 3               
001C84r 3  A5 rr                        lda cib+1
001C86r 3  65 rr                        adc toin+1      ; MSB
001C88r 3  85 rr                        sta tmp1+1
001C8Ar 3  85 rr                        sta tmp2+1
001C8Cr 3  95 03                        sta 3,x
001C8Er 3               
001C8Er 3                               ; Calculate the address where the input buffer ends plus 1, so
001C8Er 3                               ; we can compare it with TOIN, which is an index
001C8Er 3  A5 rr                        lda cib
001C90r 3  18                           clc
001C91r 3  65 rr                        adc ciblen
001C93r 3  85 rr                        sta tmp3
001C95r 3  A5 rr                        lda cib+1
001C97r 3  65 rr                        adc ciblen+1
001C99r 3  85 rr                        sta tmp3+1
001C9Br 3               
001C9Br 3                               ; Initialize the offset we use to adjust EOL or found delimiter
001C9Br 3  64 rr                        stz tmptos+1
001C9Dr 3               @loop:
001C9Dr 3                               ; If we are at the end of the string, quit
001C9Dr 3  A5 rr                        lda tmp2
001C9Fr 3  C5 rr                        cmp tmp3
001CA1r 3  D0 06                        bne @not_empty
001CA3r 3               
001CA3r 3  A5 rr                        lda tmp2+1
001CA5r 3  C5 rr                        cmp tmp3+1
001CA7r 3  F0 1D                        beq @eol
001CA9r 3               @not_empty:
001CA9r 3                               ; We have to do this the hard way. In fact, it's really
001CA9r 3                               ; hard since if we are dealing with a SPACE, the standard
001CA9r 3                               ; wants us to skip all whitespace, not just spaces. Otherwise,
001CA9r 3                               ; Tali would choke on tabs between words. For details, see
001CA9r 3                               ; http://forth-standard.org/standard/file#subsection.11.3.5
001CA9r 3                               ; In theory, we could make this faster by defining a delimiter
001CA9r 3                               ; that is 00 as the sign that we skip all whitespace, thereby
001CA9r 3                               ; avoiding having to test every time. However, somebody,
001CA9r 3                               ; somewhere might want to parse a zero-delimited list. Since
001CA9r 3                               ; any byte value could be chosen for that, we just test for
001CA9r 3                               ; a space every single time for the moment.
001CA9r 3  B2 rr                        lda (tmp2)
001CABr 3               
001CABr 3  A4 rr                        ldy tmptos
001CADr 3  C0 20                        cpy #AscSP
001CAFr 3  D0 07                        bne @not_whitespace
001CB1r 3               
001CB1r 3                               ; The delimiter is a space, so we're looking for all
001CB1r 3                               ; whitespace
001CB1r 3  20 rr rr                     jsr is_whitespace
001CB4r 3  90 02                        bcc @not_whitespace
001CB6r 3  80 0C                        bra @found_delimiter
001CB8r 3               
001CB8r 3               @not_whitespace:
001CB8r 3                               ; The delimiter is not a space, so we're looking for
001CB8r 3                               ; whatever it is
001CB8r 3  C5 rr                        cmp tmptos
001CBAr 3  F0 08                        beq @found_delimiter
001CBCr 3               
001CBCr 3                               ; Not a delimiter, next character
001CBCr 3  E6 rr                        inc tmp2
001CBEr 3  D0 DD                        bne @loop
001CC0r 3  E6 rr                        inc tmp2+1
001CC2r 3  80 D9                        bra @loop
001CC4r 3               
001CC4r 3               @found_delimiter:
001CC4r 3                               ; Increase the offset: If we've found a delimiter, we want
001CC4r 3                               ; TOIN to point to the character after it, not the delimiter
001CC4r 3                               ; itself
001CC4r 3  E6 rr                        inc tmptos+1
001CC6r 3               @eol:
001CC6r 3                               ; The length of the new string is tmp2-tmp1
001CC6r 3  A5 rr                        lda tmp2
001CC8r 3  38                           sec
001CC9r 3  E5 rr                        sbc tmp1
001CCBr 3  95 00                        sta 0,x
001CCDr 3               
001CCDr 3  A5 rr                        lda tmp2+1
001CCFr 3  E5 rr                        sbc tmp1+1
001CD1r 3  95 01                        sta 1,x
001CD3r 3               
001CD3r 3                               ; The new offset is tmp2-cib
001CD3r 3  A5 rr                        lda tmp2
001CD5r 3  38                           sec
001CD6r 3  E5 rr                        sbc cib
001CD8r 3  85 rr                        sta toin
001CDAr 3  A5 rr                        lda tmp2+1
001CDCr 3  E5 rr                        sbc cib+1
001CDEr 3  85 rr                        sta toin+1
001CE0r 3               
001CE0r 3                               ; Add in the delimiter
001CE0r 3  A5 rr                        lda toin
001CE2r 3  18                           clc
001CE3r 3  65 rr                        adc tmptos+1
001CE5r 3  85 rr                        sta toin
001CE7r 3  A5 rr                        lda toin+1
001CE9r 3  69 00                        adc #0          ; we only need the carry
001CEBr 3  85 rr                        sta toin+1
001CEDr 3               @done:
001CEDr 3               z_parse_name:
001CEDr 3  60           z_parse:        rts
001CEEr 3               
001CEEr 3               
001CEEr 3               
001CEEr 3               ; ## PICK ( n n u -- n n n ) "Move element u of the stack to TOS"
001CEEr 3               ; ## "pick"  auto  ANS core ext
001CEEr 3                       ; """https://forth-standard.org/standard/core/PICK
001CEEr 3                       ; Take the u-th element out of the stack and put it on TOS,
001CEEr 3                       ; overwriting the original TOS. 0 PICK is equivalent to DUP, 1 PICK to
001CEEr 3                       ; OVER. Note that using PICK is considered poor coding form. Also note
001CEEr 3                       ; that FIG Forth has a different behavior for PICK than ANS Forth.
001CEEr 3                       ; """
001CEEr 3               
001CEEr 3               xt_pick:
001CEEr 3                               ; Checking for underflow is difficult because it depends on
001CEEr 3                               ; which element we want to grab. We could probably figure
001CEEr 3                               ; something out, but it wouldn't work with underflow stripping
001CEEr 3                               ; Since using PICK is considered poor form anyway, we just
001CEEr 3                               ; leave it as it is
001CEEr 3  16 00                        asl 0,x         ; we assume u < 128 (stack is small)
001CF0r 3  8A                           txa
001CF1r 3  75 00                        adc 0,x
001CF3r 3  A8                           tay
001CF4r 3               
001CF4r 3  B9 02 00                     lda 0002,y
001CF7r 3  95 00                        sta 0,x
001CF9r 3  B9 03 00                     lda 0003,y
001CFCr 3  95 01                        sta 1,x
001CFEr 3               
001CFEr 3  60           z_pick:         rts
001CFFr 3               
001CFFr 3               
001CFFr 3               
001CFFr 3               ; ## PLUS ( n n -- n ) "Add TOS and NOS"
001CFFr 3               ; ## "+"  auto  ANS core
001CFFr 3                       ; """https://forth-standard.org/standard/core/Plus"""
001CFFr 3               xt_plus:
001CFFr 3  20 rr rr                     jsr underflow_2
001D02r 3               
001D02r 3  18                           clc
001D03r 3  B5 00                        lda 0,x         ; LSB
001D05r 3  75 02                        adc 2,x
001D07r 3  95 02                        sta 2,x
001D09r 3               
001D09r 3  B5 01                        lda 1,x         ; MSB. No CLC, conserve carry bit
001D0Br 3  75 03                        adc 3,x
001D0Dr 3  95 03                        sta 3,x
001D0Fr 3               
001D0Fr 3  E8                           inx
001D10r 3  E8                           inx
001D11r 3               
001D11r 3  60           z_plus:         rts
001D12r 3               
001D12r 3               
001D12r 3               ; ## PLUS_STORE ( n addr -- ) "Add number to value at given address"
001D12r 3               ; ## "+!"  auto  ANS core
001D12r 3                       ; """https://forth-standard.org/standard/core/PlusStore"""
001D12r 3               xt_plus_store:
001D12r 3  20 rr rr                     jsr underflow_2
001D15r 3               
001D15r 3                               ; move address to tmp1 so we can work with it
001D15r 3  B5 00                        lda 0,x
001D17r 3  85 rr                        sta tmp1
001D19r 3  B5 01                        lda 1,x
001D1Br 3  85 rr                        sta tmp1+1
001D1Dr 3               
001D1Dr 3  A0 00                        ldy #0          ; LSB
001D1Fr 3  B1 rr                        lda (tmp1),y
001D21r 3  18                           clc
001D22r 3  75 02                        adc 2,x
001D24r 3  91 rr                        sta (tmp1),y
001D26r 3               
001D26r 3  C8                           iny             ; MSB
001D27r 3  B1 rr                        lda (tmp1),y
001D29r 3  75 03                        adc 3,x
001D2Br 3  91 rr                        sta (tmp1),y
001D2Dr 3               
001D2Dr 3  E8                           inx
001D2Er 3  E8                           inx
001D2Fr 3  E8                           inx
001D30r 3  E8                           inx
001D31r 3               
001D31r 3  60           z_plus_store:   rts
001D32r 3               
001D32r 3               
001D32r 3               ; ## POSTPONE ( -- ) "Change IMMEDIATE status (it's complicated)"
001D32r 3               ; ## "postpone"  auto   ANS core
001D32r 3                       ; """https://forth-standard.org/standard/core/POSTPONE
001D32r 3                       ; Add the compilation behavior of a word to a new word at
001D32r 3                       ; compile time. If the word that follows it is immediate, include
001D32r 3                       ; it so that it will be compiled when the word being defined is
001D32r 3                       ; itself used for a new word. Tricky, but very useful.
001D32r 3                       ;
001D32r 3                       ; Because POSTPONE expects a word (not an xt) in the input stream (not
001D32r 3                       ; on the Data Stack). This means we cannot build words with
001D32r 3                       ; "jsr xt_postpone, jsr <word>" directly.
001D32r 3                       ; """
001D32r 3               
001D32r 3               xt_postpone:
001D32r 3  20 rr rr                     jsr xt_parse_name               ; ( -- addr n )
001D35r 3               
001D35r 3                               ; if there was no word provided, complain and quit
001D35r 3  B5 00                        lda 0,x
001D37r 3  15 01                        ora 1,x
001D39r 3  D0 05                        bne @1
001D3Br 3               
001D3Br 3  A9 05                        lda #err_noname
001D3Dr 3  4C rr rr                     jmp error
001D40r 3               @1:
001D40r 3  20 rr rr                     jsr xt_find_name                ; ( -- nt | 0 )
001D43r 3               
001D43r 3                               ; if word not in Dictionary, complain and quit
001D43r 3  D0 05                        bne @2
001D45r 3  A9 05                        lda #err_noname
001D47r 3  4C rr rr                     jmp error
001D4Ar 3               
001D4Ar 3               @2:
001D4Ar 3                               ; keep a copy of nt for later
001D4Ar 3  B5 00                        lda 0,x
001D4Cr 3  85 rr                        sta tmp1
001D4Er 3  B5 01                        lda 1,x
001D50r 3  85 rr                        sta tmp1+1
001D52r 3               
001D52r 3                               ; We need the xt instead of the nt
001D52r 3  20 rr rr                     jsr xt_name_to_int              ; ( nt -- xt )
001D55r 3               
001D55r 3                               ; See if this is an immediate word. This is easier
001D55r 3                               ; with nt than with xt. The status byte of the word
001D55r 3                               ; is nt+1
001D55r 3  E6 rr                        inc tmp1
001D57r 3  D0 02                        bne @3
001D59r 3  E6 rr                        inc tmp1+1
001D5Br 3               @3:
001D5Br 3  B2 rr                        lda (tmp1)
001D5Dr 3  29 04                        and #IM         ; mask all but Intermediate flag
001D5Fr 3  F0 05                        beq @not_immediate
001D61r 3               
001D61r 3                               ; We're immediate, so instead of executing it right now, we
001D61r 3                               ; compile it. xt is TOS, so this is easy. The RTS at the end
001D61r 3                               ; takes us back to the original caller
001D61r 3  20 rr rr                     jsr xt_compile_comma
001D64r 3  80 0A                        bra @done
001D66r 3               
001D66r 3               @not_immediate:
001D66r 3                               ; This is not an immediate word, so we enact "deferred
001D66r 3                               ; compilation" by including ' <NAME> COMPILE, which we do by
001D66r 3                               ; compiling the run-time routine of LITERAL, the xt itself, and
001D66r 3                               ; a subroutine jump to COMPILE,
001D66r 3  20 rr rr                     jsr xt_literal
001D69r 3               
001D69r 3                               ; Last, compile COMPILE,
001D69r 3  A0 rr                        ldy #>xt_compile_comma
001D6Br 3  A9 rr                        lda #<xt_compile_comma
001D6Dr 3  20 rr rr                     jsr cmpl_subroutine
001D70r 3               @done:
001D70r 3  60           z_postpone:     rts
001D71r 3               
001D71r 3               
001D71r 3               
001D71r 3               ; ## PREVIOUS ( -- ) "Remove the first wordlist in the search order"
001D71r 3               ; ## "previous"  auto  ANS search ext
001D71r 3                       ; """http://forth-standard.org/standard/search/PREVIOUS"""
001D71r 3               
001D71r 3               xt_previous:
001D71r 3  20 rr rr                     jsr xt_get_order
001D74r 3  20 rr rr                     jsr xt_nip
001D77r 3  20 rr rr                     jsr xt_one_minus
001D7Ar 3  20 rr rr                     jsr xt_set_order
001D7Dr 3               
001D7Dr 3  60           z_previous:     rts
001D7Er 3               
001D7Er 3               
001D7Er 3               
001D7Er 3               ; ## QUESTION ( addr -- ) "Print content of a variable"
001D7Er 3               ; ## "?"  tested  ANS tools
001D7Er 3                       ; """https://forth-standard.org/standard/tools/q
001D7Er 3                       ;
001D7Er 3                       ; Only used interactively. Since humans are so slow, we
001D7Er 3                       ; save size and just go for the subroutine jumps
001D7Er 3                       ; """
001D7Er 3               xt_question:
001D7Er 3                               ; FETCH takes care of underflow check
001D7Er 3  20 rr rr                     jsr xt_fetch
001D81r 3  20 rr rr                     jsr xt_dot
001D84r 3               
001D84r 3  60           z_question:     rts
001D85r 3               
001D85r 3               
001D85r 3               ; ## QUESTION_DUP ( n -- 0 | n n ) "Duplicate TOS non-zero"
001D85r 3               ; ## "?dup"  auto  ANS core
001D85r 3                       ; """https://forth-standard.org/standard/core/qDUP"""
001D85r 3               
001D85r 3               xt_question_dup:
001D85r 3  20 rr rr                     jsr underflow_1
001D88r 3               
001D88r 3                               ; Check if TOS is zero
001D88r 3  B5 00                        lda 0,x
001D8Ar 3  15 01                        ora 1,x
001D8Cr 3  F0 0A                        beq @done
001D8Er 3               
001D8Er 3                               ; not zero, duplicate
001D8Er 3  CA                           dex
001D8Fr 3  CA                           dex
001D90r 3  B5 02                        lda 2,x
001D92r 3  95 00                        sta 0,x
001D94r 3  B5 03                        lda 3,x
001D96r 3  95 01                        sta 1,x
001D98r 3               @done:
001D98r 3  60           z_question_dup: rts
001D99r 3               
001D99r 3               
001D99r 3               
001D99r 3               ; ## R_FETCH ( -- n ) "Get copy of top of Return Stack"
001D99r 3               ; ## "r@"  auto  ANS core
001D99r 3                       ; """https://forth-standard.org/standard/core/RFetch
001D99r 3                       ; This word is Compile Only in Tali Forth, though Gforth has it
001D99r 3                       ; work normally as well
001D99r 3                       ;
001D99r 3                       ; An alternative way to write this word
001D99r 3                       ; would be to access the elements on the stack directly like 2R@
001D99r 3                       ; does, these versions should be compared at some point.
001D99r 3                       ; """
001D99r 3               xt_r_fetch:
001D99r 3                               ; get the return address
001D99r 3  7A                           ply             ; LSB
001D9Ar 3  84 rr                        sty tmp1
001D9Cr 3  7A                           ply             ; MSB
001D9Dr 3               
001D9Dr 3                               ; --- CUT FOR NATIVE COMPILE ---
001D9Dr 3               
001D9Dr 3                               ; get the actual top of Return Stack
001D9Dr 3  CA                           dex
001D9Er 3  CA                           dex
001D9Fr 3               
001D9Fr 3  68                           pla             ; LSB
001DA0r 3  95 00                        sta 0,x
001DA2r 3  68                           pla             ; MSB
001DA3r 3  95 01                        sta 1,x
001DA5r 3               
001DA5r 3                               ; now we have to put that value back
001DA5r 3  48                           pha
001DA6r 3  B5 00                        lda 0,x
001DA8r 3  48                           pha
001DA9r 3               
001DA9r 3                               ; --- CUT FOR NATIVE COMPILE ---
001DA9r 3               
001DA9r 3                               ; restore return value
001DA9r 3  5A                           phy             ; MSB
001DAAr 3  A4 rr                        ldy tmp1
001DACr 3  5A                           phy             ; LSB
001DADr 3               
001DADr 3  60           z_r_fetch:      rts
001DAEr 3               
001DAEr 3               
001DAEr 3               ; ## R_FROM ( -- n )(R: n --) "Move top of Return Stack to TOS"
001DAEr 3               ; ## "r>"  auto  ANS core
001DAEr 3                       ; """https://forth-standard.org/standard/core/Rfrom
001DAEr 3                       ; Move Top of Return Stack to Top of Data Stack.
001DAEr 3                       ;
001DAEr 3                       ; We have to move
001DAEr 3                       ; the RTS address out of the way first. This word is handled
001DAEr 3                       ; differently for native and and subroutine compilation, see COMPILE,
001DAEr 3                       ; This is a compile-only word
001DAEr 3                       ; """
001DAEr 3               
001DAEr 3               xt_r_from:
001DAEr 3                               ; Rescue the address of the return jump that is currently
001DAEr 3                               ; on top of the Return Stack. If this word is natively
001DAEr 3                               ; compiled, this is a total waste of time
001DAEr 3  68                           pla             ; LSB
001DAFr 3  85 rr                        sta tmptos
001DB1r 3  7A                           ply             ; MSB
001DB2r 3               
001DB2r 3                               ; --- CUT FOR NATIVE CODING ---
001DB2r 3               
001DB2r 3  CA                           dex
001DB3r 3  CA                           dex
001DB4r 3               
001DB4r 3                               ; now we can access the actual data
001DB4r 3               
001DB4r 3  68                           pla             ; LSB
001DB5r 3  95 00                        sta 0,x
001DB7r 3  68                           pla             ; MSB
001DB8r 3  95 01                        sta 1,x
001DBAr 3               
001DBAr 3                               ; --- CUT FOR NATIVE CODING ---
001DBAr 3               
001DBAr 3                               ; restore the return address
001DBAr 3  5A                           phy             ; MSB
001DBBr 3  A5 rr                        lda tmptos
001DBDr 3  48                           pha             ; LSB
001DBEr 3               
001DBEr 3  60           z_r_from:       rts
001DBFr 3               
001DBFr 3               
001DBFr 3               ; ## R_TO_INPUT ( -- ) ( R: n n n n -- ) "Restore input state from Return Stack"
001DBFr 3               ; ## "r>input"  tested  Tali Forth
001DBFr 3                       ; """Restore the current input state as defined by insrc, cib, ciblen,
001DBFr 3                       ; and toin from the Return Stack.
001DBFr 3                       ;
001DBFr 3                       ; See INPUT_TO_R for a discussion of this word. Uses tmp1
001DBFr 3                       ; """
001DBFr 3               
001DBFr 3               xt_r_to_input:
001DBFr 3               
001DBFr 3                               ; We arrive here with the return address on the top of the
001DBFr 3                               ; 65c02's stack. We need to move it out of the way first
001DBFr 3  68                           pla
001DC0r 3  85 rr                        sta tmp1
001DC2r 3  68                           pla
001DC3r 3  85 rr                        sta tmp1+1
001DC5r 3               
001DC5r 3                               ; This assumes that insrc is the first of eight bytes and
001DC5r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001DC5r 3                               ; Page. Since we went in reverse order, insrc is now on the top
001DC5r 3                               ; of the Return Stack.
001DC5r 3  A0 00                        ldy #0
001DC7r 3               @loop:
001DC7r 3  68                           pla
001DC8r 3  99 rr rr                     sta insrc,y
001DCBr 3  C8                           iny
001DCCr 3  C0 08                        cpy #8
001DCEr 3  D0 F7                        bne @loop
001DD0r 3               
001DD0r 3                               ; Restore address for return jump
001DD0r 3  A5 rr                        lda tmp1+1
001DD2r 3  48                           pha
001DD3r 3  A5 rr                        lda tmp1
001DD5r 3  48                           pha
001DD6r 3               
001DD6r 3  60           z_r_to_input: 	rts
001DD7r 3               
001DD7r 3               
001DD7r 3               
001DD7r 3               ; ## RECURSE ( -- ) "Copy recursive call to word being defined"
001DD7r 3               ; ## "recurse"  auto  ANS core
001DD7r 3                       ; """https://forth-standard.org/standard/core/RECURSE
001DD7r 3                       ;
001DD7r 3                       ; This word may not be natively compiled
001DD7r 3                       ; """
001DD7r 3               
001DD7r 3               xt_recurse:
001DD7r 3                               ; The whole routine amounts to compiling a reference to
001DD7r 3                               ; the word that is being compiled. First, we save the JSR
001DD7r 3                               ; instruction
001DD7r 3  A0 00                        ldy #0
001DD9r 3               
001DD9r 3  A9 20                        lda #$20        ; opcode for JSR
001DDBr 3  91 rr                        sta (cp),y
001DDDr 3  C8                           iny
001DDEr 3               
001DDEr 3                               ; Next, we save the LSB and MSB of the xt of the word
001DDEr 3                               ; we are currently working on. We first need to see if
001DDEr 3                               ; WORKWORD has the nt (: started the word) or the
001DDEr 3                               ; xt (:NONAME started the word). Bit 6 in status tells us.
001DDEr 3  24 rr                        bit status
001DE0r 3  70 0C                        bvs @nt_in_workword
001DE2r 3               
001DE2r 3                               ; This is a special :NONAME word. Just copy the xt
001DE2r 3                               ; from WORKWORD into the dictionary.
001DE2r 3  A5 rr                        lda workword
001DE4r 3  91 rr                        sta (cp),y
001DE6r 3  C8                           iny
001DE7r 3  A5 rr                        lda workword+1
001DE9r 3  91 rr                        sta (cp),y
001DEBr 3  C8                           iny
001DECr 3  80 1B                        bra @update_cp
001DEEr 3               
001DEEr 3               @nt_in_workword:
001DEEr 3                               ; This is a regular : word, so the xt is four bytes down
001DEEr 3                               ; from the nt which we saved in WORKWORD. We could probably
001DEEr 3                               ; use NAME>INT here but this is going to be faster, and
001DEEr 3                               ; fast counts with recursion
001DEEr 3  A5 rr                        lda workword            ; LSB
001DF0r 3  18                           clc
001DF1r 3  69 04                        adc #4
001DF3r 3  85 rr                        sta tmp1
001DF5r 3  A5 rr                        lda workword+1          ; MSB
001DF7r 3  69 00                        adc #0
001DF9r 3  85 rr                        sta tmp1+1
001DFBr 3               
001DFBr 3  B2 rr                        lda (tmp1)
001DFDr 3  91 rr                        sta (cp),y
001DFFr 3  5A                           phy
001E00r 3  A0 01                        ldy #1
001E02r 3  B1 rr                        lda (tmp1),y
001E04r 3  7A                           ply
001E05r 3  C8                           iny
001E06r 3  91 rr                        sta (cp),y
001E08r 3  C8                           iny
001E09r 3               
001E09r 3               @update_cp:
001E09r 3  98                           tya
001E0Ar 3  18                           clc
001E0Br 3  65 rr                        adc cp
001E0Dr 3  85 rr                        sta cp
001E0Fr 3  90 02                        bcc @done
001E11r 3  E6 rr                        inc cp+1
001E13r 3               @done:
001E13r 3  60           z_recurse:      rts
001E14r 3               
001E14r 3               
001E14r 3               
001E14r 3               ; ## REFILL ( -- f ) "Refill the input buffer"
001E14r 3               ; ## "refill"  tested  ANS core ext
001E14r 3                       ; """https://forth-standard.org/standard/core/REFILL
001E14r 3                       ; Attempt to fill the input buffer from the input source, returning
001E14r 3                       ; a true flag if successful. When the input source is the user input
001E14r 3                       ; device, attempt to receive input into the terminal input buffer. If
001E14r 3                       ; successful, make the result the input buffer, set >IN to zero, and
001E14r 3                       ; return true. Receipt of a line containing no characters is considered
001E14r 3                       ; successful. If there is no input available from the current input
001E14r 3                       ; source, return false. When the input source is a string from EVALUATE,
001E14r 3                       ; return false and perform no other action." See
001E14r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001E14r 3                       ; and Conklin & Rather p. 156. Note we don't have to care about blocks
001E14r 3                       ; because REFILL is never used on blocks - Tali is able to evaluate the
001E14r 3                       ; entire block as a 1024 byte string.
001E14r 3                       ; """"
001E14r 3               
001E14r 3               xt_refill:
001E14r 3                               ; Get input source from SOURCE-ID. This is an
001E14r 3                               ; optimized version of a subroutine jump to SOURCE-ID
001E14r 3  A5 rr                        lda insrc               ; cheat: We only check LSB
001E16r 3  D0 2D                        bne @src_not_kbd
001E18r 3               
001E18r 3                               ; SOURCE-ID of zero means we're getting stuff from the keyboard
001E18r 3                               ; with ACCEPT, which wants the address of the current input
001E18r 3                               ; buffer NOS and the max number of characters to accept TOS
001E18r 3  CA                           dex
001E19r 3  CA                           dex
001E1Ar 3  CA                           dex
001E1Br 3  CA                           dex
001E1Cr 3               
001E1Cr 3  A5 rr                        lda cib                 ; address of CIB is NOS
001E1Er 3  95 02                        sta 2,x
001E20r 3  A5 rr                        lda cib+1
001E22r 3  95 03                        sta 3,x
001E24r 3               
001E24r 3  64 rr                        stz ciblen              ; go in with empty buffer
001E26r 3  64 rr                        stz ciblen+1
001E28r 3               
001E28r 3  A9 FF                        lda #bsize              ; max number of chars is TOS
001E2Ar 3  95 00                        sta 0,x
001E2Cr 3  74 01                        stz 1,x                 ; cheat: We only accept max 255
001E2Er 3               
001E2Er 3  20 rr rr                     jsr xt_accept           ; ( addr n1 -- n2)
001E31r 3               
001E31r 3                               ; ACCEPT returns the number of characters accepted, which
001E31r 3                               ; belong in CIBLEN
001E31r 3  B5 00                        lda 0,x
001E33r 3  85 rr                        sta ciblen
001E35r 3  B5 01                        lda 1,x
001E37r 3  85 rr                        sta ciblen+1            ; though we only accept 255 chars
001E39r 3               
001E39r 3                               ; make >IN point to beginning of buffer
001E39r 3  64 rr                        stz toin
001E3Br 3  64 rr                        stz toin+1
001E3Dr 3               
001E3Dr 3  A9 FF                        lda #$FF                ; overwrite with TRUE flag
001E3Fr 3  95 00                        sta 0,x
001E41r 3  95 01                        sta 1,x
001E43r 3               
001E43r 3  80 10                        bra @done
001E45r 3               
001E45r 3               @src_not_kbd:
001E45r 3                               ; If SOURCE-ID doesn't return a zero, it must be a string in
001E45r 3                               ; memory or a file (remember, no blocks in this version).
001E45r 3                               ; If source is a string, we were given the flag -1 ($FFFF)
001E45r 3  1A                           inc
001E46r 3  D0 08                        bne @src_not_string
001E48r 3               
001E48r 3                               ; Simply return FALSE flag as per specification
001E48r 3  CA                           dex
001E49r 3  CA                           dex
001E4Ar 3  74 00                        stz 0,x
001E4Cr 3  74 01                        stz 1,x
001E4Er 3               
001E4Er 3  80 05                        bra z_refill
001E50r 3               
001E50r 3               @src_not_string:
001E50r 3                               ; Since we don't have blocks, this must mean that we are trying
001E50r 3                               ; to read from a file. However, we don't have files yet, so we
001E50r 3                               ; report an error and jump to ABORT.
001E50r 3  A9 01                        lda #err_badsource
001E52r 3  4C rr rr                     jmp error
001E55r 3               @done:
001E55r 3  60           z_refill:       rts
001E56r 3               
001E56r 3               
001E56r 3               
001E56r 3               ; ## REPEAT (C: orig dest -- ) ( -- ) "Loop flow control"
001E56r 3               ; ## "repeat"  auto  ANS core
001E56r 3                       ; """http://forth-standard.org/standard/core/REPEAT"""
001E56r 3               
001E56r 3               xt_repeat:
001E56r 3                               ; Run again first
001E56r 3  20 rr rr                     jsr xt_again
001E59r 3               
001E59r 3                               ; Stuff HERE in for the branch address
001E59r 3                               ; to get out of the loop
001E59r 3  20 rr rr                     jsr xt_here
001E5Cr 3  20 rr rr                     jsr xt_swap
001E5Fr 3  20 rr rr                     jsr xt_store
001E62r 3               
001E62r 3  60           z_repeat:       rts
001E63r 3               
001E63r 3               
001E63r 3               
001E63r 3               ; ## RIGHT_BRACKET ( -- ) "Enter the compile state"
001E63r 3               ; ## "]"  auto  ANS core
001E63r 3                       ; """https://forth-standard.org/standard/right-bracket
001E63r 3                       ; This is an immediate word.
001E63r 3                       ; """
001E63r 3               xt_right_bracket:
001E63r 3  A9 FF                        lda #$FF
001E65r 3  85 rr                        sta state
001E67r 3  85 rr                        sta state+1
001E69r 3               z_right_bracket:
001E69r 3  60                           rts
001E6Ar 3               
001E6Ar 3               
001E6Ar 3               ; ## ROOT_WORDLIST ( -- u ) "WID for the Root (minimal) wordlist"
001E6Ar 3               ; ## "root-wordlist"  tested  Tali Editor
001E6Ar 3               xt_root_wordlist:
001E6Ar 3  CA                           dex             ; The WID for the Root wordlist is 3.
001E6Br 3  CA                           dex
001E6Cr 3  A9 03                        lda #3
001E6Er 3  95 00                        sta 0,x
001E70r 3  74 01                        stz 1,x
001E72r 3               
001E72r 3               z_root_wordlist:
001E72r 3  60                           rts
001E73r 3               
001E73r 3               
001E73r 3               ; ## ROT ( a b c -- b c a ) "Rotate first three stack entries downwards"
001E73r 3               ; ## "rot"  auto  ANS core
001E73r 3                       ; """https://forth-standard.org/standard/core/ROT
001E73r 3                       ; Remember "R for 'Revolution'" - the bottom entry comes out
001E73r 3                       ; on top!
001E73r 3                       ; """
001E73r 3               
001E73r 3               xt_rot:
001E73r 3  20 rr rr                     jsr underflow_3
001E76r 3               
001E76r 3  B4 05                        ldy 5,x         ; MSB first
001E78r 3  B5 03                        lda 3,x
001E7Ar 3  95 05                        sta 5,x
001E7Cr 3  B5 01                        lda 1,x
001E7Er 3  95 03                        sta 3,x
001E80r 3  94 01                        sty 1,x
001E82r 3               
001E82r 3  B4 04                        ldy 4,x         ; LSB next
001E84r 3  B5 02                        lda 2,x
001E86r 3  95 04                        sta 4,x
001E88r 3  B5 00                        lda 0,x
001E8Ar 3  95 02                        sta 2,x
001E8Cr 3  94 00                        sty 0,x
001E8Er 3               
001E8Er 3  60           z_rot:          rts
001E8Fr 3               
001E8Fr 3               
001E8Fr 3               
001E8Fr 3               ; ## RSHIFT ( x u -- x ) "Shift TOS to the right"
001E8Fr 3               ; ## "rshift"  auto  ANS core
001E8Fr 3                       ; """https://forth-standard.org/standard/core/RSHIFT"""
001E8Fr 3               xt_rshift:
001E8Fr 3  20 rr rr                     jsr underflow_2
001E92r 3               
001E92r 3                               ; We shift maximal by 16 bits, mask everything else
001E92r 3  B5 00                        lda 0,x
001E94r 3  29 0F                        and #%00001111
001E96r 3  F0 08                        beq @done               ; if 0 shifts, quit
001E98r 3               
001E98r 3  A8                           tay
001E99r 3               @loop:
001E99r 3  56 03                        lsr 3,x
001E9Br 3  76 02                        ror 2,x
001E9Dr 3  88                           dey
001E9Er 3  D0 F9                        bne @loop
001EA0r 3               @done:
001EA0r 3  E8                           inx
001EA1r 3  E8                           inx
001EA2r 3               
001EA2r 3  60           z_rshift:       rts
001EA3r 3               
001EA3r 3               
001EA3r 3               ; ## S_BACKSLASH_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
001EA3r 3               ; ## "s\""  auto  ANS core
001EA3r 3                       ; """https://forth-standard.org/standard/core/Seq
001EA3r 3                       ; Store address and length of string given, returning ( addr u ).
001EA3r 3                       ; ANS core claims this is compile-only, but the file set expands it
001EA3r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
001EA3r 3                       ; are evil. We follow general usage. This is just like S" except
001EA3r 3                       ; that it allows for some special escaped characters.
001EA3r 3                       ; """
001EA3r 3               
001EA3r 3               xt_s_backslash_quote:
001EA3r 3                               ; tmp2 will be used to determine if we are handling
001EA3r 3                               ; escaped characters or not. In this case, we are,
001EA3r 3                               ; so set it to $FF (the upper byte will be used to
001EA3r 3                               ; determine if we just had a \ and the next character
001EA3r 3                               ; needs to be modifed as an escaped character).
001EA3r 3  A9 FF                        lda #$FF
001EA5r 3  85 rr                        sta tmp2
001EA7r 3  64 rr                        stz tmp2+1
001EA9r 3               
001EA9r 3                               ; Now that the flag is set, jump into s_quote to process
001EA9r 3                               ; the string.
001EA9r 3  20 rr rr                     jsr s_quote_start
001EACr 3               @done:
001EACr 3               z_s_backslash_quote:
001EACr 3  60                           rts
001EADr 3               
001EADr 3               
001EADr 3               ; This is a helper function for s_backslash_quote to convert a character
001EADr 3               ; from ASCII to the corresponding hex value, eg 'F'->15
001EADr 3               convert_hex_value:
001EADr 3               
001EADr 3  C9 41                cmp #'A'
001EAFr 3  90 07                bcc @digit
001EB1r 3               
001EB1r 3                       ; It's A-F
001EB1r 3  29 DF                and #$DF                ; Make it uppercase.
001EB3r 3  38                   sec
001EB4r 3  E9 37                sbc #'7'                 ; gives value 10 for 'A'
001EB6r 3  80 03                bra @done
001EB8r 3               
001EB8r 3               @digit:
001EB8r 3                       ; It's 0-9
001EB8r 3  38                   sec
001EB9r 3  E9 30                sbc #'0'
001EBBr 3               
001EBBr 3               @done:
001EBBr 3  60                   rts
001EBCr 3               
001EBCr 3               
001EBCr 3               
001EBCr 3               ; ## SEARCH_WORDLIST ( caddr u wid -- 0 | xt 1 | xt -1) "Search for a word in a wordlist"
001EBCr 3               ; ## "search-wordlist" auto ANS search
001EBCr 3                       ; """https://forth-standard.org/standard/search/SEARCH_WORDLIST"""
001EBCr 3               
001EBCr 3               xt_search_wordlist:
001EBCr 3  20 rr rr                     jsr underflow_3
001EBFr 3               
001EBFr 3                               ; Set up tmp1 with the wordlist indicated by wid
001EBFr 3                               ; on the stack. Start by putting the base address
001EBFr 3                               ; of the wordlists in tmp2.
001EBFr 3  A5 rr                        lda up
001EC1r 3  18                           clc
001EC2r 3  69 06                        adc #wordlists_offset
001EC4r 3  85 rr                        sta tmp2
001EC6r 3  A5 rr                        lda up+1
001EC8r 3  69 00                        adc #0          ; Adding carry
001ECAr 3  85 rr                        sta tmp2+1
001ECCr 3               
001ECCr 3                               ; Add the wid (in cells) to the base address.
001ECCr 3  B5 00                        lda 0,x
001ECEr 3  0A                           asl             ; Convert wid to offset in cells (x2)
001ECFr 3  65 rr                        adc tmp2
001ED1r 3  85 rr                        sta tmp2
001ED3r 3  90 02                        bcc @1
001ED5r 3  E6 rr                        inc tmp2+1      ; Propagate carry if needed.
001ED7r 3               
001ED7r 3                               ; tmp2 now holds the address of the dictionary pointer
001ED7r 3                               ; for the given wordlist.
001ED7r 3               @1:
001ED7r 3                               ; Remove the wid from the stack.
001ED7r 3  E8                           inx
001ED8r 3  E8                           inx
001ED9r 3               
001ED9r 3                               ; check for special case of an empty string (length zero)
001ED9r 3  B5 00                        lda 0,x
001EDBr 3  15 01                        ora 1,x
001EDDr 3  D0 03                        bne @check_wordlist
001EDFr 3  4C rr rr                     jmp @done
001EE2r 3               
001EE2r 3               @check_wordlist:
001EE2r 3                               ; Check for special case of empty wordlist
001EE2r 3                               ; (dictionary pointer, in tmp2, is 0)
001EE2r 3  A5 rr                        lda tmp2
001EE4r 3  05 rr                        ora tmp2+1
001EE6r 3  D0 03                        bne @have_string
001EE8r 3  4C rr rr                     jmp @done
001EEBr 3               
001EEBr 3               @have_string:
001EEBr 3                               ; set up first loop iteration
001EEBr 3  B2 rr                        lda (tmp2)              ; nt of first word in Dictionary
001EEDr 3  85 rr                        sta tmp1
001EEFr 3               
001EEFr 3  E6 rr                        inc tmp2                ; Move to the upper byte
001EF1r 3  D0 02                        bne @2
001EF3r 3  E6 rr                        inc tmp2+1
001EF5r 3               @2:
001EF5r 3  B2 rr                        lda (tmp2)
001EF7r 3  85 rr                        sta tmp1+1
001EF9r 3               
001EF9r 3                               ; Reuse tmp2 to hold the address of the mystery string.
001EF9r 3  B5 02                        lda 2,x                 ; Address of mystery string
001EFBr 3  85 rr                        sta tmp2
001EFDr 3  B5 03                        lda 3,x
001EFFr 3  85 rr                        sta tmp2+1
001F01r 3               
001F01r 3               @loop:
001F01r 3                               ; first quick test: Are strings the same length?
001F01r 3  B2 rr                        lda (tmp1)
001F03r 3  D5 00                        cmp 0,x
001F05r 3  D0 7B                        bne @next_entry
001F07r 3               
001F07r 3               @compare_string:
001F07r 3                               ; are the same length, so we now have to compare each
001F07r 3                               ; character
001F07r 3               
001F07r 3                               ; second quick test: Is the first character the same?
001F07r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
001F09r 3               
001F09r 3                               ; Lowercase the incoming charcter.
001F09r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
001F0Br 3  B0 07                        bcs @compare_first
001F0Dr 3  C9 41                        cmp #$41        ; ASCII 'A'
001F0Fr 3  90 03                        bcc @compare_first
001F11r 3               
001F11r 3                               ; An uppercase letter has been located.  Make it
001F11r 3                               ; lowercase.
001F11r 3  18                           clc
001F12r 3  69 20                        adc #$20
001F14r 3               
001F14r 3               @compare_first:
001F14r 3  A0 08                        ldy #8          ; Offset in nt to name
001F16r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
001F18r 3  D0 68                        bne @next_entry
001F1Ar 3               
001F1Ar 3                               ; string length are the same and the first character is the
001F1Ar 3                               ; same. If the length of the string is 1, we're already done
001F1Ar 3  B5 00                        lda 0,x
001F1Cr 3  3A                           dec
001F1Dr 3  F0 2C                        beq @success
001F1Fr 3               
001F1Fr 3                               ; No such luck: The strings are the same length and the first
001F1Fr 3                               ; char is the same, but the word is more than one char long.
001F1Fr 3                               ; So we suck it up and compare every single character. We go
001F1Fr 3                               ; from back to front, because words like CELLS and CELL+ would
001F1Fr 3                               ; take longer otherwise. We can also shorten the loop by one
001F1Fr 3                               ; because we've already compared the first char.
001F1Fr 3               
001F1Fr 3                               ; The string of the word we're testing against is 8 bytes down
001F1Fr 3  A5 rr                        lda tmp1
001F21r 3  48                           pha             ; Preserve tmp1 on the return stack.
001F22r 3  18                           clc
001F23r 3  69 08                        adc #8
001F25r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
001F27r 3  A5 rr                        lda tmp1+1
001F29r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
001F2Ar 3  69 00                        adc #0          ; we only need the carry
001F2Cr 3  85 rr                        sta tmp1+1
001F2Er 3               
001F2Er 3  B4 00                        ldy 0,x         ; index is length of string minus 1
001F30r 3  88                           dey
001F31r 3               
001F31r 3               @string_loop:
001F31r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
001F33r 3               
001F33r 3                               ; Lowercase the incoming charcter.
001F33r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
001F35r 3  B0 07                        bcs @check_char
001F37r 3  C9 41                        cmp #$41        ; ASCII 'A'
001F39r 3  90 03                        bcc @check_char
001F3Br 3               
001F3Br 3                               ; An uppercase letter has been located.  Make it
001F3Br 3                               ; lowercase.
001F3Br 3  18                           clc
001F3Cr 3  69 20                        adc #$20
001F3Er 3               @check_char:
001F3Er 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
001F40r 3  D0 3A                        bne @next_entry_tmp1
001F42r 3               
001F42r 3  88                           dey
001F43r 3  D0 EC                        bne @string_loop
001F45r 3               
001F45r 3               @success_tmp1:
001F45r 3  68                           pla             ; Restore tmp1 from the return stack.
001F46r 3  85 rr                        sta tmp1+1
001F48r 3  68                           pla
001F49r 3  85 rr                        sta tmp1
001F4Br 3               
001F4Br 3               @success:
001F4Br 3                               ; The strings match. Drop the count and put correct nt TOS
001F4Br 3  E8                           inx
001F4Cr 3  E8                           inx
001F4Dr 3  A5 rr                        lda tmp1
001F4Fr 3  95 00                        sta 0,x
001F51r 3  A5 rr                        lda tmp1+1
001F53r 3  95 01                        sta 1,x
001F55r 3               
001F55r 3                               ; Change the nt into an xt, but save a copy of the nt
001F55r 3                               ; to look up whether the word is immediate or not.
001F55r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001F58r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001F5Br 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001F5Er 3               
001F5Er 3  A0 00                        ldy #0                  ; Prepare flag
001F60r 3               
001F60r 3                               ; The flags are in the second byte of the header
001F60r 3  F6 00                        inc 0,x
001F62r 3  D0 02                        bne @3
001F64r 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
001F66r 3               @3:
001F66r 3  A1 00                        lda (0,x)               ; ( xt char )
001F68r 3  29 04                        and #IM
001F6Ar 3  D0 08                        bne @immediate          ; bit set, we're immediate
001F6Cr 3               
001F6Cr 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
001F6Er 3  95 00                        sta 0,x
001F70r 3  95 01                        sta 1,x
001F72r 3  80 28                        bra @done_nodrop
001F74r 3               
001F74r 3               @immediate:
001F74r 3  A9 01                        lda #1                  ; We're immediate, return 1
001F76r 3  95 00                        sta 0,x
001F78r 3  74 01                        stz 1,x
001F7Ar 3               
001F7Ar 3  80 20                        bra @done_nodrop
001F7Cr 3               
001F7Cr 3               @next_entry_tmp1:
001F7Cr 3  68                           pla             ; Restore tmp1 from the return stack.
001F7Dr 3  85 rr                        sta tmp1+1
001F7Fr 3  68                           pla
001F80r 3  85 rr                        sta tmp1
001F82r 3               @next_entry:
001F82r 3                               ; Not the same, so we get the next word. Next header
001F82r 3                               ; address is two bytes down
001F82r 3  A0 02                        ldy #2
001F84r 3  B1 rr                        lda (tmp1),y
001F86r 3  48                           pha
001F87r 3  C8                           iny
001F88r 3  B1 rr                        lda (tmp1),y
001F8Ar 3  85 rr                        sta tmp1+1
001F8Cr 3  68                           pla
001F8Dr 3  85 rr                        sta tmp1
001F8Fr 3               
001F8Fr 3                               ; If we got a zero, we've walked the whole Dictionary and
001F8Fr 3                               ; return as a failure, otherwise try again
001F8Fr 3  05 rr                        ora tmp1+1
001F91r 3  F0 03                        beq @fail_done
001F93r 3  4C rr rr                     jmp @loop
001F96r 3               
001F96r 3               @fail_done:
001F96r 3  74 02                        stz 2,x         ; failure flag
001F98r 3  74 03                        stz 3,x
001F9Ar 3               @done:
001F9Ar 3  E8                           inx
001F9Br 3  E8                           inx
001F9Cr 3               @done_nodrop:
001F9Cr 3               z_search_wordlist:
001F9Cr 3  60                           rts
001F9Dr 3               
001F9Dr 3               
001F9Dr 3               
001F9Dr 3               ; ## SEE ( "name" -- ) "Print information about a Forth word"
001F9Dr 3               ; ## "see" tested  ANS tools
001F9Dr 3                       ; """https://forth-standard.org/standard/tools/SEE
001F9Dr 3                       ; SEE takes the name of a word and prints its name token (nt),
001F9Dr 3                       ; execution token (xt), size in bytes, flags used, and then dumps the
001F9Dr 3                       ; code and disassembles it.
001F9Dr 3                       ; """
001F9Dr 3               
001F9Dr 3               xt_see:
001F9Dr 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
001FA0r 3  20 rr rr                     jsr xt_find_name        ; ( nt | 0 )
001FA3r 3               
001FA3r 3                               ; If we got back a zero we don't know that word and so we quit
001FA3r 3                               ; with an error
001FA3r 3  B5 00                        lda 0,x
001FA5r 3  15 01                        ora 1,x
001FA7r 3  D0 05                        bne @1
001FA9r 3               
001FA9r 3  A9 05                        lda #err_noname
001FABr 3  4C rr rr                     jmp error
001FAEr 3               @1:
001FAEr 3  20 rr rr                     jsr xt_cr
001FB1r 3               
001FB1r 3                               ; We have a legal word, so let's get serious. Save the current
001FB1r 3                               ; number base and use hexadecimal instead.
001FB1r 3  A5 rr                        lda base
001FB3r 3  48                           pha
001FB4r 3  20 rr rr                     jsr xt_hex
001FB7r 3               
001FB7r 3  A9 0A                        lda #str_see_nt
001FB9r 3  20 rr rr                     jsr print_string_no_lf
001FBCr 3               
001FBCr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001FBFr 3  20 rr rr                     jsr xt_u_dot
001FC2r 3  20 rr rr                     jsr xt_space            ; ( nt )
001FC5r 3               
001FC5r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001FC8r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001FCBr 3               
001FCBr 3  A9 0B                        lda #str_see_xt
001FCDr 3  20 rr rr                     jsr print_string_no_lf
001FD0r 3               
001FD0r 3  20 rr rr                     jsr xt_dup              ; ( nt xt xt )
001FD3r 3  20 rr rr                     jsr xt_u_dot
001FD6r 3  20 rr rr                     jsr xt_cr               ; ( nt xt )
001FD9r 3               
001FD9r 3                               ; We print letters for flags and then later follow it with 1 or
001FD9r 3                               ; 0 to mark if which flag is set
001FD9r 3  A9 09                        lda #str_see_flags
001FDBr 3  20 rr rr                     jsr print_string_no_lf
001FDEr 3               
001FDEr 3  20 rr rr                     jsr xt_over             ; ( nt xt nt )
001FE1r 3  20 rr rr                     jsr xt_one_plus         ; ( nt xt nt+1 )
001FE4r 3  20 rr rr                     jsr xt_fetch            ; ( nt xt flags )
001FE7r 3               
001FE7r 3  B5 00                        lda 0,x
001FE9r 3               
001FE9r 3                               ; This is crude, but for the moment it is good enough
001FE9r 3  A0 06                        ldy #6                  ; Not all bits are used
001FEBr 3               @flag_loop:
001FEBr 3  48                           pha
001FECr 3  29 01                        and #%00000001
001FEEr 3  18                           clc
001FEFr 3  69 30                        adc #$30                ; ASCII "0"
001FF1r 3  20 rr rr                     jsr emit_a
001FF4r 3  20 rr rr                     jsr xt_space
001FF7r 3               
001FF7r 3  68                           pla
001FF8r 3  6A                           ror                     ; Next flag
001FF9r 3               
001FF9r 3  88                           dey
001FFAr 3  D0 EF                        bne @flag_loop
001FFCr 3               
001FFCr 3  20 rr rr                     jsr xt_cr
001FFFr 3               
001FFFr 3  E8                           inx
002000r 3  E8                           inx                     ; ( nt xt )
002001r 3               
002001r 3                               ; Figure out the size
002001r 3  A9 0C                        lda #str_see_size
002003r 3  20 rr rr                     jsr print_string_no_lf
002006r 3               
002006r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
002009r 3  20 rr rr                     jsr xt_wordsize         ; ( xt u )
00200Cr 3  20 rr rr                     jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
00200Fr 3  20 rr rr                     jsr xt_decimal
002012r 3  20 rr rr                     jsr xt_u_dot            ; ( xt u )
002015r 3  20 rr rr                     jsr xt_hex
002018r 3  20 rr rr                     jsr xt_cr
00201Br 3               
00201Br 3                               ; Dump hex and disassemble
00201Br 3  20 rr rr                     jsr xt_two_dup          ; ( xt u xt u )
00201Er 3  20 rr rr                     jsr xt_dump
002021r 3  20 rr rr                     jsr xt_cr
002024r 3  20 rr rr                     jsr xt_disasm
002027r 3               
002027r 3  68                           pla
002028r 3  85 rr                        sta base
00202Ar 3               
00202Ar 3  60           z_see:          rts
00202Br 3               
00202Br 3               
00202Br 3               
00202Br 3               ; ## SET_CURRENT ( wid -- ) "Set the compilation wordlist"
00202Br 3               ; ## "set-current" auto ANS search
00202Br 3                       ; """https://forth-standard.org/standard/search/SET-CURRENT"""
00202Br 3               
00202Br 3               xt_set_current:
00202Br 3  20 rr rr                     jsr underflow_1
00202Er 3               
00202Er 3                               ; Save the value from the data stack.
00202Er 3  A0 04                        ldy #current_offset
002030r 3  B5 00                        lda 0,x         ; CURRENT is byte variable
002032r 3  91 rr                        sta (up),y      ; so only the LSB is used.
002034r 3               
002034r 3  E8                           inx
002035r 3  E8                           inx
002036r 3               
002036r 3  60           z_set_current:  rts
002037r 3               
002037r 3               
002037r 3               
002037r 3               ; ## SET_ORDER ( wid_n .. wid_1 n -- ) "Set the current search order"
002037r 3               ; ## "set-order" auto ANS search
002037r 3                       ; """https://forth-standard.org/standard/search/SET-ORDER"""
002037r 3               
002037r 3               xt_set_order:
002037r 3                               ; Test for -1 TOS
002037r 3  A9 FF                        lda #$FF
002039r 3  D5 01                        cmp 1,x
00203Br 3  D0 12                        bne @start
00203Dr 3  D5 00                        cmp 0,x
00203Fr 3  D0 0E                        bne @start
002041r 3               
002041r 3                               ; There is a -1 TOS.  Replace it with the default
002041r 3                               ; search order, which is just the FORTH-WORDLIST.
002041r 3  CA                           dex             ; Make room for the count.
002042r 3  CA                           dex
002043r 3  74 03                        stz 3,x         ; ROOT-WORDLIST is 3
002045r 3  A9 03                        lda #3
002047r 3  95 02                        sta 2,x
002049r 3  74 01                        stz 1,x         ; Count is 1.
00204Br 3  A9 01                        lda #1
00204Dr 3  95 00                        sta 0,x
00204Fr 3               
00204Fr 3                               ; Continue processing with ( forth-wordlist 1 -- )
00204Fr 3               @start:
00204Fr 3                               ; Set #ORDER - the number of wordlists in the search order.
00204Fr 3  A0 1E                        ldy #num_order_offset
002051r 3  B5 00                        lda 0,x
002053r 3  91 rr                        sta (up),y      ; #ORDER is a byte variable.
002055r 3  85 rr                        sta tmp1        ; Save a copy for zero check and looping.
002057r 3                                               ; Only the low byte is saved in tmp1 as
002057r 3                                               ; only 8 wordlists are allowed.
002057r 3               
002057r 3  E8                           inx             ; Drop the count off the data stack.
002058r 3  E8                           inx
002059r 3               
002059r 3                               ; Check if there are zero wordlists.
002059r 3  A5 rr                        lda tmp1
00205Br 3  F0 0D                        beq @done       ; If zero, there are no wordlists.
00205Dr 3               
00205Dr 3                               ; Move the wordlist ids from the data stack to the search order.
00205Dr 3  A0 1F                        ldy #search_order_offset
00205Fr 3               @loop:
00205Fr 3                               ; Move one wordlist id over into the search order.
00205Fr 3  B5 00                        lda 0,x         ; The search order is a byte array
002061r 3  91 rr                        sta (up),y      ; so only save the LSB
002063r 3  C8                           iny
002064r 3               
002064r 3                               ; Remove it from the data stack.
002064r 3  E8                           inx
002065r 3  E8                           inx
002066r 3               
002066r 3                               ; See if that was the last one to process (first in the list).
002066r 3  C6 rr                        dec tmp1
002068r 3  D0 F5                        bne @loop
00206Ar 3               
00206Ar 3               @done:
00206Ar 3  60           z_set_order:    rts
00206Br 3               
00206Br 3               
00206Br 3               
00206Br 3               
00206Br 3               ; ## S_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
00206Br 3               ; ## "s""  auto  ANS core
00206Br 3                       ; """https://forth-standard.org/standard/core/Sq
00206Br 3                       ; Store address and length of string given, returning ( addr u ).
00206Br 3                       ; ANS core claims this is compile-only, but the file set expands it
00206Br 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
00206Br 3                       ; are evil. We follow general usage.
00206Br 3                       ;
00206Br 3                       ; Can also be realized as
00206Br 3                       ;     : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE
00206Br 3                       ; but it is used so much we want it in code.
00206Br 3                       ; """
00206Br 3               
00206Br 3               xt_s_quote:
00206Br 3                               ; tmp2 will be used to determine if we are handling
00206Br 3                               ; escaped characters or not.  In this case, we are
00206Br 3                               ; not, so set it to zero.
00206Br 3  64 rr                        stz tmp2
00206Dr 3  64 rr                        stz tmp2+1
00206Fr 3               
00206Fr 3               s_quote_start:
00206Fr 3                               ; Make room on the data stack for the address.
00206Fr 3  CA                           dex
002070r 3  CA                           dex
002071r 3                               ; Make room on the data stack for the count.
002071r 3  CA                           dex
002072r 3  CA                           dex
002073r 3               
002073r 3                               ; Put a jmp over the string data with address to be filled
002073r 3                               ; in later.
002073r 3  A9 4C                        lda #$4C
002075r 3  20 rr rr                     jsr cmpl_a
002078r 3               
002078r 3                               ; Address to be filled in later, just use $4C for the moment
002078r 3  20 rr rr                     jsr cmpl_a
00207Br 3  20 rr rr                     jsr cmpl_a
00207Er 3               
00207Er 3                               ; Save the current value of HERE on the data stack for the
00207Er 3                               ; address of the string.
00207Er 3  A5 rr                        lda cp
002080r 3  95 02                        sta 2,x
002082r 3  A5 rr                        lda cp+1
002084r 3  95 03                        sta 3,x
002086r 3               
002086r 3               @savechars_loop:
002086r 3                               ; Start saving the string into the dictionary up to the
002086r 3                               ; ending double quote. First, check to see if the input
002086r 3                               ; buffer is empty.
002086r 3  A5 rr                        lda toin+1              ; MSB
002088r 3  C5 rr                        cmp ciblen+1
00208Ar 3  90 2A                        bcc @input_fine         ; unsigned comparison
00208Cr 3               
00208Cr 3  A5 rr                        lda toin                ; LSB
00208Er 3  C5 rr                        cmp ciblen
002090r 3  90 24                        bcc @input_fine
002092r 3               
002092r 3                               ; Input buffer is empty. Refill it. Refill calls accept,
002092r 3                               ; which uses tmp2 and tmp3. Save and restore them.
002092r 3  A5 rr                        lda tmp2
002094r 3  48                           pha
002095r 3  A5 rr                        lda tmp2+1
002097r 3  48                           pha
002098r 3  A5 rr                        lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
00209Ar 3  48                           pha
00209Br 3               
00209Br 3  20 rr rr                     jsr xt_refill           ; ( -- f )
00209Er 3               
00209Er 3  68                           pla
00209Fr 3  85 rr                        sta tmp3
0020A1r 3  68                           pla
0020A2r 3  85 rr                        sta tmp2+1
0020A4r 3  68                           pla
0020A5r 3  85 rr                        sta tmp2
0020A7r 3               
0020A7r 3                               ; Check result of refill.
0020A7r 3  B5 00                        lda 0,x
0020A9r 3  15 01                        ora 1,x
0020ABr 3  D0 05                        bne @refill_ok
0020ADr 3               
0020ADr 3                               ; Something when wrong with refill.
0020ADr 3  A9 06                        lda #err_refill
0020AFr 3  4C rr rr                     jmp error
0020B2r 3               
0020B2r 3               @refill_ok:
0020B2r 3                               ; Remove the refill flag from the data stack.
0020B2r 3  E8                           inx
0020B3r 3  E8                           inx
0020B4r 3               
0020B4r 3                               ; For refill success, jump back up to the empty check, just in
0020B4r 3                               ; case refill gave us an empty buffer (eg. empty/blank line of
0020B4r 3                               ; input)
0020B4r 3  80 D0                        bra @savechars_loop
0020B6r 3               
0020B6r 3               @input_fine:
0020B6r 3                               ; There should be at least one valid char to use.
0020B6r 3                               ; Calculate it's address at CIB+TOIN into tmp1
0020B6r 3  A5 rr                        lda cib
0020B8r 3  18                           clc
0020B9r 3  65 rr                        adc toin        ; LSB
0020BBr 3  85 rr                        sta tmp1
0020BDr 3  A5 rr                        lda cib+1
0020BFr 3  65 rr                        adc toin+1      ; MSB
0020C1r 3  85 rr                        sta tmp1+1
0020C3r 3               
0020C3r 3                               ; Get the character
0020C3r 3  B2 rr                        lda (tmp1)
0020C5r 3               
0020C5r 3                               ; Check to see if we are handling escaped characters.
0020C5r 3  24 rr                        bit tmp2
0020C7r 3  30 03                        bmi @handle_escapes    ; Only checking bit 7
0020C9r 3  4C rr rr                     jmp @regular_char
0020CCr 3               
0020CCr 3               @handle_escapes:
0020CCr 3                               ; We are handling escaped characters.  See if we have
0020CCr 3                               ; already seen the backslash.
0020CCr 3  24 rr                        bit tmp2+1
0020CEr 3  30 03                        bmi @escaped
0020D0r 3  4C rr rr                     jmp @not_escaped
0020D3r 3               
0020D3r 3               @escaped:
0020D3r 3               
0020D3r 3                               ; We have seen a backslash (previous character). Check to see if
0020D3r 3                               ; we are in the middle of a \x sequence (bit 6 of tmp2+1 will
0020D3r 3                               ; be clear in that case )
0020D3r 3  70 22                        bvs @check_esc_chars
0020D5r 3               
0020D5r 3                               ; We are in the middle of a \x sequence. Check to see if we
0020D5r 3                               ; are on the first or second digit.
0020D5r 3  A9 01                        lda #1
0020D7r 3  24 rr                        bit tmp2+1
0020D9r 3  D0 10                        bne @esc_x_second_digit
0020DBr 3               
0020DBr 3                               ; First digit.
0020DBr 3  E6 rr                        inc tmp2+1  ; Adjust flag for second digit next time.
0020DDr 3  B2 rr                        lda (tmp1)  ; Get the char again.
0020DFr 3               
0020DFr 3                               ; Convert to hex
0020DFr 3  20 rr rr                     jsr convert_hex_value
0020E2r 3               
0020E2r 3                               ; This is the upper nybble, so move it up.
0020E2r 3  0A                           asl
0020E3r 3  0A                           asl
0020E4r 3  0A                           asl
0020E5r 3  0A                           asl
0020E6r 3  85 rr                        sta tmp3    ; Save it for later.
0020E8r 3  4C rr rr                     jmp @next_character
0020EBr 3               
0020EBr 3               @esc_x_second_digit:
0020EBr 3               
0020EBr 3                               ; We are on the second hex digit of a \x sequence. Clear the
0020EBr 3                               ; escaped character flag (because we are handling it right
0020EBr 3                               ; here)
0020EBr 3  64 rr                        stz tmp2+1
0020EDr 3  B2 rr                        lda (tmp1)
0020EFr 3               
0020EFr 3                               ; Convert to hex, combine with value in tmp3
0020EFr 3  20 rr rr                     jsr convert_hex_value
0020F2r 3  05 rr                        ora tmp3
0020F4r 3               
0020F4r 3  4C rr rr                     jmp @save_character
0020F7r 3               
0020F7r 3               @check_esc_chars:
0020F7r 3                               ; Clear the escaped character flag (because we are
0020F7r 3                               ; handling it right here)
0020F7r 3  64 rr                        stz tmp2+1
0020F9r 3               
0020F9r 3                               ; Process the escaped character
0020F9r 3               @check_esc_a:
0020F9r 3  C9 61                        cmp #'a'
0020FBr 3  D0 05                        bne @check_esc_b
0020FDr 3               
0020FDr 3                               ; BEL (ASCII value 7)
0020FDr 3  A9 07                        lda #7
0020FFr 3  4C rr rr                     jmp @save_character
002102r 3               
002102r 3               @check_esc_b:
002102r 3  C9 62                        cmp #'b'
002104r 3  D0 05                        bne @check_esc_e
002106r 3               
002106r 3                               ; Backspace (ASCII value 8)
002106r 3  A9 08                        lda #8
002108r 3  4C rr rr                     jmp @save_character
00210Br 3               
00210Br 3               @check_esc_e:
00210Br 3  C9 65                        cmp #'e'
00210Dr 3  D0 04                        bne @check_esc_f
00210Fr 3               
00210Fr 3                               ; ESC (ASCII value 27)
00210Fr 3  A9 1B                        lda #27
002111r 3  80 75                        bra @save_character
002113r 3               
002113r 3               @check_esc_f:
002113r 3  C9 66                        cmp #'f'
002115r 3  D0 04                        bne @check_esc_l
002117r 3               
002117r 3                               ; FF (ASCII value 12)
002117r 3  A9 0C                        lda #12
002119r 3  80 6D                        bra @save_character
00211Br 3               
00211Br 3               @check_esc_l:
00211Br 3  C9 6C                        cmp #'l'
00211Dr 3  D0 04                        bne @check_esc_m
00211Fr 3               
00211Fr 3                               ; LF (ASCII value 10)
00211Fr 3  A9 0A                        lda #10
002121r 3  80 65                        bra @save_character
002123r 3               
002123r 3               @check_esc_m:
002123r 3                               ; This one is not like the others because we save two
002123r 3                               ; characters
002123r 3  C9 6D                        cmp #'m'
002125r 3  D0 09                        bne @check_esc_n
002127r 3               
002127r 3                               ; CR/LF pair (ASCII values 13, 10)
002127r 3  A9 0D                        lda #13
002129r 3  20 rr rr                     jsr cmpl_a
00212Cr 3  A9 0A                        lda #10
00212Er 3  80 58                        bra @save_character
002130r 3               
002130r 3               @check_esc_n:
002130r 3  C9 6E                        cmp #'n'
002132r 3  D0 04                        bne @check_esc_q
002134r 3               
002134r 3                               ; newline, impl. dependant, using LF (ASCII values 10)
002134r 3  A9 0A                        lda #10
002136r 3  80 50                        bra @save_character
002138r 3               
002138r 3               @check_esc_q:
002138r 3  C9 71                        cmp #'q'
00213Ar 3  D0 04                        bne @check_esc_r
00213Cr 3               
00213Cr 3                               ; Double quote (ASCII value 34)
00213Cr 3  A9 22                        lda #34
00213Er 3  80 48                        bra @save_character
002140r 3               
002140r 3               @check_esc_r:
002140r 3  C9 72                        cmp #'r'
002142r 3  D0 04                        bne @check_esc_t
002144r 3               
002144r 3                               ; CR (ASCII value 13)
002144r 3  A9 0D                        lda #13
002146r 3  80 40                        bra @save_character
002148r 3               
002148r 3               @check_esc_t:
002148r 3  C9 74                        cmp #'t'
00214Ar 3  D0 04                        bne @check_esc_v
00214Cr 3               
00214Cr 3                               ; Horizontal TAB (ASCII value 9)
00214Cr 3  A9 09                        lda #9
00214Er 3  80 38                        bra @save_character
002150r 3               
002150r 3               @check_esc_v:
002150r 3  C9 76                        cmp #'v'
002152r 3  D0 04                        bne @check_esc_z
002154r 3               
002154r 3                               ; Vertical TAB (ASCII value 11)
002154r 3  A9 0B                        lda #11
002156r 3  80 30                        bra @save_character
002158r 3               
002158r 3               @check_esc_z:
002158r 3  C9 7A                        cmp #'z'
00215Ar 3  D0 04                        bne @check_esc_quote
00215Cr 3               
00215Cr 3                               ; NULL (ASCII value 0)
00215Cr 3  A9 00                        lda #0
00215Er 3  80 28                        bra @save_character
002160r 3               
002160r 3               @check_esc_quote:
002160r 3  C9 22                        cmp #$22
002162r 3  D0 04                        bne @check_esc_x
002164r 3               
002164r 3                               ; Double quote (ASCII value 34)
002164r 3  A9 22                        lda #34
002166r 3  80 20                        bra @save_character
002168r 3               
002168r 3               @check_esc_x:
002168r 3  C9 78                        cmp #'x'
00216Ar 3  D0 06                        bne @check_esc_backslash
00216Cr 3               
00216Cr 3                               ; This one is difficult. We need to get the next TWO
00216Cr 3                               ; characters (which might require a refill in the middle)
00216Cr 3                               ; and combine them as two hex digits. We do this by
00216Cr 3                               ; clearing bit 6 of tmp2+1 to indicate we are in a digit
00216Cr 3                               ; and using bit 0 to keep track of which digit we are on.
00216Cr 3  A9 BE                        lda #$BE        ; Clear bits 6 and 0
00216Er 3  85 rr                        sta tmp2+1
002170r 3  80 19                        bra @next_character
002172r 3               
002172r 3               @check_esc_backslash:
002172r 3  C9 5C                        cmp #$5C
002174r 3  D0 04                        bne @not_escaped
002176r 3               
002176r 3                               ; Backslash (ASCII value 92)
002176r 3  A9 5C                        lda #92
002178r 3  80 0E                        bra @save_character
00217Ar 3               
00217Ar 3               @not_escaped:
00217Ar 3                               ; Check for the backslash to see if we should escape
00217Ar 3                               ; the next char.
00217Ar 3  C9 5C                        cmp #$5C        ; The backslash char
00217Cr 3  D0 06                        bne @regular_char
00217Er 3               
00217Er 3                               ; We found a backslash.  Don't save anyhing, but set
00217Er 3                               ; a flag (in tmp2+1) to handle the next char. We don't
00217Er 3                               ; try to get the next char here as it may require a
00217Er 3                               ; refill of the input buffer.
00217Er 3  A9 FF                        lda #$FF
002180r 3  85 rr                        sta tmp2+1
002182r 3  80 07                        bra @next_character
002184r 3               
002184r 3               @regular_char:
002184r 3                               ; Check if the current character is the end of the string.
002184r 3  C9 22                        cmp #$22        ; ASCII for "
002186r 3  F0 0C                        beq @found_string_end
002188r 3               
002188r 3               @save_character:
002188r 3                               ; If we didn't reach the end of the string, compile this
002188r 3                               ; character into the dictionary
002188r 3  20 rr rr                     jsr cmpl_a
00218Br 3               
00218Br 3               @next_character:
00218Br 3                               ; Move on to the next character.
00218Br 3  E6 rr                        inc toin
00218Dr 3  D0 02                        bne @savechars_loop_longjump
00218Fr 3  E6 rr                        inc toin+1
002191r 3               
002191r 3               @savechars_loop_longjump:
002191r 3  4C rr rr                     jmp @savechars_loop
002194r 3               
002194r 3               @found_string_end:
002194r 3                               ; Use up the delimiter.
002194r 3  E6 rr                        inc toin
002196r 3  D0 02                        bne @1
002198r 3  E6 rr                        inc toin+1
00219Ar 3               @1:
00219Ar 3                               ; Calculate the length of the string, which is the
00219Ar 3                               ; difference between cp and the address of the start
00219Ar 3                               ; of the string (currently saved on the stack).
00219Ar 3  A5 rr                        lda cp
00219Cr 3  38                           sec
00219Dr 3  F5 02                        sbc 2,x
00219Fr 3  95 00                        sta 0,x         ; LSB
0021A1r 3  A5 rr                        lda cp+1
0021A3r 3  F5 03                        sbc 3,x
0021A5r 3  95 01                        sta 1,x         ; MSB
0021A7r 3               
0021A7r 3                               ; Update the address of the jump-over jmp instruction.
0021A7r 3                               ; First determine location of jmp instructions address.
0021A7r 3                               ; It should be 2 bytes before the start of the string.
0021A7r 3                               ; Compute it into tmp1, which is no longer being used.
0021A7r 3  B5 02                        lda 2,x
0021A9r 3  38                           sec
0021AAr 3  E9 02                        sbc #2
0021ACr 3  85 rr                        sta tmp1
0021AEr 3  B5 03                        lda 3,x
0021B0r 3  E9 00                        sbc #0          ; Propagate borrow
0021B2r 3  85 rr                        sta tmp1+1
0021B4r 3               
0021B4r 3                               ; Update the address of the jump to HERE.
0021B4r 3  A5 rr                        lda cp
0021B6r 3  92 rr                        sta (tmp1)
0021B8r 3  A0 01                        ldy #1
0021BAr 3  A5 rr                        lda cp+1
0021BCr 3  91 rr                        sta (tmp1),y
0021BEr 3               
0021BEr 3                               ; What happens next depends on the state (which is bad, but
0021BEr 3                               ; that's the way it works at the moment). If we are
0021BEr 3                               ; interpretating, we save the string to a transient buffer
0021BEr 3                               ; and return that address (used for file calls, see
0021BEr 3                               ; https://forth-standard.org/standard/file/Sq . If we're
0021BEr 3                               ; compiling, we just need SLITERAL
0021BEr 3  A5 rr                        lda state
0021C0r 3  05 rr                        ora state+1             ; paranoid
0021C2r 3  F0 03                        beq @done
0021C4r 3               
0021C4r 3                               ; Jump into the middle of the sliteral word, after the
0021C4r 3                               ; string data has been compiled into the dictionary,
0021C4r 3                               ; because we've already done that step.
0021C4r 3  20 rr rr                     jsr sliteral_const_str         ; ( addr u -- )
0021C7r 3               
0021C7r 3               @done:
0021C7r 3  60           z_s_quote:      rts
0021C8r 3               
0021C8r 3               
0021C8r 3               
0021C8r 3               ; ## S_TO_D ( u -- d ) "Convert single cell number to double cell"
0021C8r 3               ; ## "s>d"  auto  ANS core
0021C8r 3                       ; """https://forth-standard.org/standard/core/StoD"""
0021C8r 3               
0021C8r 3               xt_s_to_d:
0021C8r 3  20 rr rr                     jsr underflow_1
0021CBr 3               
0021CBr 3  CA                           dex
0021CCr 3  CA                           dex
0021CDr 3  74 00                        stz 0,x
0021CFr 3  74 01                        stz 1,x
0021D1r 3               
0021D1r 3  B5 03                        lda 3,x
0021D3r 3  10 04                        bpl @done
0021D5r 3               
0021D5r 3                               ; negative, extend sign
0021D5r 3  D6 00                        dec 0,x
0021D7r 3  D6 01                        dec 1,x
0021D9r 3               @done:
0021D9r 3  60           z_s_to_d:       rts
0021DAr 3               
0021DAr 3               
0021DAr 3               
0021DAr 3               ; ## SAVE_BUFFERS ( -- ) "Save all dirty buffers to storage"
0021DAr 3               ; ## "save-buffers"  tested  ANS block
0021DAr 3                       ; """https://forth-standard.org/standard/block/SAVE-BUFFERS"""
0021DAr 3               
0021DAr 3               xt_save_buffers:
0021DAr 3                               ; Check the buffer status
0021DAr 3  A0 2C                        ldy #buffstatus_offset
0021DCr 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
0021DEr 3  C9 03                        cmp #3          ; LSB is needed.
0021E0r 3  D0 12                        bne @done       ; Either not used or not dirty = done!
0021E2r 3               
0021E2r 3                               ; We need to save the block.
0021E2r 3  20 rr rr                     jsr xt_blkbuffer
0021E5r 3  20 rr rr                     jsr xt_buffblocknum
0021E8r 3  20 rr rr                     jsr xt_fetch
0021EBr 3  20 rr rr                     jsr xt_block_write
0021EEr 3               
0021EEr 3                               ; Mark the buffer as clean now.
0021EEr 3  A9 01                        lda #1
0021F0r 3  A0 2C                        ldy #buffstatus_offset
0021F2r 3  91 rr                        sta (up),y
0021F4r 3               
0021F4r 3               @done:
0021F4r 3  60           z_save_buffers: rts
0021F5r 3               
0021F5r 3               
0021F5r 3               
0021F5r 3               ; ## SCR ( -- addr ) "Push address of variable holding last screen listed"
0021F5r 3               ; ## "scr"  auto  ANS block ext
0021F5r 3                       ; """https://forth-standard.org/standard/block/SCR"""
0021F5r 3               xt_scr:
0021F5r 3                               ; SCR is at UP + scr_offset
0021F5r 3  CA                           dex
0021F6r 3  CA                           dex
0021F7r 3  18                           clc
0021F8r 3  A5 rr                        lda up
0021FAr 3  69 02                        adc #scr_offset ; Add offset
0021FCr 3  95 00                        sta 0,x
0021FEr 3  A5 rr                        lda up+1
002200r 3  69 00                        adc #0          ; Adding carry
002202r 3  95 01                        sta 1,x
002204r 3               
002204r 3  60           z_scr:          rts
002205r 3               
002205r 3               
002205r 3               ; ## SEARCH ( addr1 u1 addr2 u2 -- addr3 u3 flag) "Search for a substring"
002205r 3               ; ## "search"   auto  ANS string
002205r 3                       ; """https://forth-standard.org/standard/string/SEARCH
002205r 3                       ; Search for string2 (denoted by addr2 u2) in string1 (denoted by
002205r 3                       ; addr1 u1). If a match is found the flag will be true and
002205r 3                       ; addr3 will have the address of the start of the match and u3 will have
002205r 3                       ; the number of characters remaining from the match point to the end
002205r 3                       ; of the original string1. If a match is not found, the flag will be
002205r 3                       ; false and addr3 and u3 will be the original string1's addr1 and u1.
002205r 3                       ; """
002205r 3               
002205r 3               xt_search:
002205r 3  20 rr rr                     jsr underflow_4
002208r 3               
002208r 3                               ; ANS says if the second string is a zero-length string it
002208r 3                               ; automatically matches.
002208r 3  B5 00                        lda 0,x
00220Ar 3  15 01                        ora 1,x
00220Cr 3  D0 0B                        bne @start_search
00220Er 3               
00220Er 3                               ; The second string is a zero length string.  Just remove
00220Er 3                               ; the second string and put a true flag.
00220Er 3  E8                           inx             ; Remove u2
00220Fr 3  E8                           inx
002210r 3  A9 FF                        lda #$FF        ; Turn addr2 into a true flag
002212r 3  95 00                        sta 0,x
002214r 3  95 01                        sta 1,x
002216r 3  4C rr rr                     jmp z_search
002219r 3               
002219r 3               @start_search:
002219r 3                               ; Put an offset (starting at zero) on the stack.
002219r 3  20 rr rr                     jsr xt_zero
00221Cr 3               
00221Cr 3               @search_loop:
00221Cr 3                               ; We stop (not found) when u2 + offset > u1
00221Cr 3                               ; Calculate u2+offset into tmp1
00221Cr 3  18                           clc
00221Dr 3  B5 00                        lda 0,x
00221Fr 3  75 02                        adc 2,x
002221r 3  85 rr                        sta tmp1
002223r 3  B5 01                        lda 1,x
002225r 3  75 03                        adc 3,x
002227r 3               
002227r 3               
002227r 3                               ; Compare to u1. Start with the high byte
002227r 3  D5 07                        cmp 7,x
002229r 3  90 12                        bcc @init_comparison ; Obviously less
00222Br 3  D0 06                        bne @not_found
00222Dr 3               
00222Dr 3                               ; The upper address byte matched - check the lower byte
00222Dr 3                               ; Load u1 first so we can use just a carry to check.
00222Dr 3  B5 06                        lda 6,x
00222Fr 3  C5 rr                        cmp tmp1
002231r 3  B0 0A                        bcs @init_comparison
002233r 3               
002233r 3               @not_found:
002233r 3                               ; The substring isn't in the main string.
002233r 3                               ; Return just the main string and a false flag.
002233r 3  E8                           inx             ; Remove offset
002234r 3  E8                           inx
002235r 3  E8                           inx             ; Remove u2
002236r 3  E8                           inx
002237r 3  74 00                        stz 0,x         ; Turn addr2 into a false flag
002239r 3  74 01                        stz 1,x
00223Br 3  80 66                        bra z_search
00223Dr 3               
00223Dr 3               @init_comparison:
00223Dr 3                               ; Use tmp1 to hold address in string 1.
00223Dr 3                               ; Use tmp2 to hold address in string 2.
00223Dr 3                               ; Use tmp3 to hold the number of characters left to check.
00223Dr 3               
00223Dr 3                               ; Compute the starting address in string 1
00223Dr 3                               ; as addr1 + offset
00223Dr 3  18                           clc
00223Er 3  B5 08                        lda 8,x
002240r 3  75 00                        adc 0,x
002242r 3  85 rr                        sta tmp1
002244r 3  B5 09                        lda 9,x
002246r 3  75 01                        adc 1,x
002248r 3  85 rr                        sta tmp1+1
00224Ar 3               
00224Ar 3                               ; The starting address in string 2 is just addr2.
00224Ar 3  B5 04                        lda 4,x
00224Cr 3  85 rr                        sta tmp2
00224Er 3  B5 05                        lda 5,x
002250r 3  85 rr                        sta tmp2+1
002252r 3               
002252r 3                               ; The number of characters to check is u2.
002252r 3  B5 02                        lda 2,x
002254r 3  85 rr                        sta tmp3
002256r 3  B5 03                        lda 3,x
002258r 3  85 rr                        sta tmp3+1
00225Ar 3               
00225Ar 3               @comparison_loop:
00225Ar 3                               ; Check to see if the current characters match.
00225Ar 3  B2 rr                        lda (tmp1)
00225Cr 3  D2 rr                        cmp (tmp2)
00225Er 3  F0 05                        beq @letters_match
002260r 3               
002260r 3                               ; One of the letters didn't match.
002260r 3                               ; Increment the offset and try again.
002260r 3  20 rr rr                     jsr xt_one_plus
002263r 3  80 B7                        bra @search_loop
002265r 3               
002265r 3               @letters_match:
002265r 3                               ; The letters match.  Advance the pointers until the
002265r 3                               ; count reaches zero.
002265r 3  E6 rr                        inc tmp1
002267r 3  D0 02                        bne @1
002269r 3  E6 rr                        inc tmp1+1
00226Br 3               @1:
00226Br 3  E6 rr                        inc tmp2
00226Dr 3  D0 02                        bne @2
00226Fr 3  E6 rr                        inc tmp2+1
002271r 3               @2:
002271r 3                               ; Decrement the count of remaining letters to check.
002271r 3  A5 rr                        lda tmp3
002273r 3  D0 02                        bne @3
002275r 3  C6 rr                        dec tmp3+1
002277r 3               @3:
002277r 3  C6 rr                        dec tmp3
002279r 3               
002279r 3                               ; Check if we've reached zero.
002279r 3  A5 rr                        lda tmp3
00227Br 3  05 rr                        ora tmp3+1
00227Dr 3  D0 DB                        bne @comparison_loop ; Check the next letter
00227Fr 3               
00227Fr 3                               ; We've run out of letters and they all match!
00227Fr 3                               ; Return (addr1+offset) (u1-offset) true
00227Fr 3                               ; Add offset to addr1.
00227Fr 3  18                           clc
002280r 3  B5 00                        lda 0,x
002282r 3  75 08                        adc 8,x
002284r 3  95 08                        sta 8,x
002286r 3  B5 01                        lda 1,x
002288r 3  75 09                        adc 9,x
00228Ar 3  95 09                        sta 9,x
00228Cr 3               
00228Cr 3                               ; Subtract offset from u1.
00228Cr 3  38                           sec
00228Dr 3  B5 06                        lda 6,x
00228Fr 3  F5 00                        sbc 0,x
002291r 3  95 06                        sta 6,x
002293r 3  B5 07                        lda 7,x
002295r 3  F5 01                        sbc 1,x
002297r 3  95 07                        sta 7,x
002299r 3               
002299r 3                               ; Replace addr2, u2, and offset with a true flag.
002299r 3  E8                           inx             ; drop offset
00229Ar 3  E8                           inx
00229Br 3  E8                           inx             ; drop u2
00229Cr 3  E8                           inx
00229Dr 3  A9 FF                        lda #$FF
00229Fr 3  95 00                        sta 0,x         ; Turn addr2 into a true flag.
0022A1r 3  95 01                        sta 1,x
0022A3r 3               
0022A3r 3  60           z_search:       rts
0022A4r 3               
0022A4r 3               
0022A4r 3               
0022A4r 3               ; ## SEMICOLON ( -- ) "End compilation of new word"
0022A4r 3               ; ## ";"  auto  ANS core
0022A4r 3                       ; """https://forth-standard.org/standard/core/Semi
0022A4r 3                       ; End the compilation of a new word into the Dictionary.
0022A4r 3                       ;
0022A4r 3                       ; When we
0022A4r 3                       ; enter this, WORKWORD is pointing to the nt_ of this word in the
0022A4r 3                       ; Dictionary, DP to the previous word, and CP to the next free byte.
0022A4r 3                       ; A Forth definition would be (see "Starting Forth"):
0022A4r 3                       ; : POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE  Following the
0022A4r 3                       ; practice of Gforth, we warn here if a word has been redefined.
0022A4r 3                       ; """
0022A4r 3               
0022A4r 3               xt_semicolon:
0022A4r 3                               ; Check if this is a : word or a :NONAME word.
0022A4r 3  24 rr                        bit status
0022A6r 3  70 11                        bvs @colonword
0022A8r 3               
0022A8r 3                               ; This is a :NONAME word - just put an RTS on the end and
0022A8r 3                               ; the address (held in workword) on the stack.
0022A8r 3  A9 60                        lda #$60                ; opcode for RTS
0022AAr 3  20 rr rr                     jsr cmpl_a
0022ADr 3               
0022ADr 3  CA                           dex
0022AEr 3  CA                           dex
0022AFr 3  A5 rr                        lda workword
0022B1r 3  95 00                        sta 0,x
0022B3r 3  A5 rr                        lda workword+1
0022B5r 3  95 01                        sta 1,x
0022B7r 3  80 45                        bra @semicolon_done
0022B9r 3               
0022B9r 3               @colonword:
0022B9r 3                               ; CP is the byte that will be the address we use in the
0022B9r 3                               ; header as the end-of-compile address (z_word). This is
0022B9r 3                               ; six bytes down from the header
0022B9r 3  A0 06                        ldy #6
0022BBr 3  A5 rr                        lda cp
0022BDr 3  91 rr                        sta (workword),y
0022BFr 3  C8                           iny
0022C0r 3  A5 rr                        lda cp+1
0022C2r 3  91 rr                        sta (workword),y
0022C4r 3               
0022C4r 3                               ; Allocate one further byte and save the RTS instruction
0022C4r 3                               ; there
0022C4r 3  A9 60                        lda #$60                ; opcode for RTS
0022C6r 3  20 rr rr                     jsr cmpl_a
0022C9r 3               
0022C9r 3                               ; Before we formally add the word to the Dictionary, we
0022C9r 3                               ; check to see if it is already present, and if yes, we
0022C9r 3                               ; warn the user.
0022C9r 3               
0022C9r 3                               ; See if word already in Dictionary.
0022C9r 3                               ; (STATUS bit 7 will be high as CREATE already
0022C9r 3                               ;  checked for us.)
0022C9r 3  24 rr                        bit status
0022CBr 3  10 26                        bpl @new_word   ; Bit 7 is clear = new word
0022CDr 3               
0022CDr 3                               ; We start by putting the string of the
0022CDr 3                               ; word we're defining on the stack
0022CDr 3  CA                           dex
0022CEr 3  CA                           dex
0022CFr 3  CA                           dex
0022D0r 3  CA                           dex
0022D1r 3               
0022D1r 3                               ; WORKWORD points to the beginning of the head of our new
0022D1r 3                               ; word, where the first byte is the length of the string
0022D1r 3                               ; We can't use LATESTNT because we haven't added the new
0022D1r 3                               ; word to the Dictionary yet
0022D1r 3  B2 rr                        lda (workword)
0022D3r 3  95 00                        sta 0,x
0022D5r 3  74 01                        stz 1,x
0022D7r 3               
0022D7r 3                               ; Eight bytes below WORKWORD is the actual beginning of
0022D7r 3                               ; the string
0022D7r 3  A5 rr                        lda workword
0022D9r 3  18                           clc
0022DAr 3  69 08                        adc #8
0022DCr 3  95 02                        sta 2,x
0022DEr 3  A5 rr                        lda workword+1
0022E0r 3  69 00                        adc #0                  ; only want carry
0022E2r 3  95 03                        sta 3,x
0022E4r 3               
0022E4r 3                               ; This word is already in the Dictionary, so we print a
0022E4r 3                               ; warning to the user.
0022E4r 3  A9 02                        lda #str_redefined       ; address of string "redefined"
0022E6r 3  20 rr rr                     jsr print_string_no_lf
0022E9r 3               
0022E9r 3                               ; Now we print the offending word.
0022E9r 3  20 rr rr                     jsr xt_type
0022ECr 3  20 rr rr                     jsr xt_space
0022EFr 3               
0022EFr 3                               ; Clear bit 7 of status (so future words will print message
0022EFr 3                               ; by defaut)
0022EFr 3  A9 80                        lda #%10000000
0022F1r 3  14 rr                        trb status
0022F3r 3               
0022F3r 3               @new_word:
0022F3r 3                               ; Let's get this over with. Save beginning of our word
0022F3r 3                               ; as new last word in the Dictionary
0022F3r 3  A5 rr                        lda workword
0022F5r 3  85 rr                        sta dp
0022F7r 3  A5 rr                        lda workword+1
0022F9r 3  85 rr                        sta dp+1
0022FBr 3  20 rr rr                     jsr dp_to_current       ; Save the updated DP to the
0022FEr 3                                                       ; CURRENT wordlist.
0022FEr 3               @semicolon_done:
0022FEr 3                               ; Word definition complete. Return compile flag to zero
0022FEr 3                               ; to return to interpret mode
0022FEr 3  64 rr                        stz state
002300r 3  64 rr                        stz state+1
002302r 3               
002302r 3  60           z_semicolon:    rts
002303r 3               
002303r 3               
002303r 3               
002303r 3               ; ## SIGN ( n -- ) "Add minus to pictured output"
002303r 3               ; ## "sign"  auto  ANS core
002303r 3                       ; """https://forth-standard.org/standard/core/SIGN
002303r 3                       ;
002303r 3                       ; Code based on
002303r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
002303r 3                       ; Original Forth code is   0< IF ASCII - HOLD THEN
002303r 3                       ; """
002303r 3               
002303r 3               xt_sign:
002303r 3  20 rr rr                     jsr underflow_1
002306r 3               
002306r 3  B5 01                        lda 1,x         ; check MSB of TOS
002308r 3  30 04                        bmi @minus
00230Ar 3               
00230Ar 3  E8                           inx
00230Br 3  E8                           inx
00230Cr 3  80 09                        bra @done
00230Er 3               @minus:
00230Er 3  A9 2D                        lda #$2D        ; ASCII for "-"
002310r 3  95 00                        sta 0,x         ; overwrite TOS
002312r 3  74 01                        stz 1,x         ; paranoid
002314r 3               
002314r 3  20 rr rr                     jsr xt_hold
002317r 3               @done:
002317r 3  60           z_sign:         rts
002318r 3               
002318r 3               
002318r 3               
002318r 3               ; ## SLASH ( n1 n2 -- n ) "Divide NOS by TOS"
002318r 3               ; ## "/"  auto  ANS core
002318r 3                       ; """https://forth-standard.org/standard/core/Div
002318r 3                       ;
002318r 3                       ; Forth code is either  >R S>D R> FM/MOD SWAP DROP
002318r 3                       ; or >R S>D R> SM/REM SWAP DROP -- we use SM/REM in Tali Forth.
002318r 3                       ; This code is currently unoptimized. This code without the SLASH
002318r 3                       ; DROP at the end is /MOD, so we share the code as far as possible.
002318r 3                       ; """
002318r 3               
002318r 3               xt_slash:
002318r 3                               ; With all the multiplication going on, it would be hard to
002318r 3                               ; make sure that one of our temporary variables is not
002318r 3                               ; overwritten. We make sure that doesn't happen by taking the
002318r 3                               ; hit of pushing the flag to the 65c02's stack
002318r 3  A9 00                        lda #0
00231Ar 3  48                           pha
00231Br 3  80 03                        bra _common
00231Dr 3               
00231Dr 3               xt_slash_mod:
00231Dr 3                               ; Note that /MOD accesses this code
00231Dr 3  A9 FF                        lda #$FF
00231Fr 3  48                           pha             ; falls through to _common
002320r 3               
002320r 3               _common:
002320r 3  20 rr rr                     jsr xt_to_r             ; >R
002323r 3  20 rr rr                     jsr xt_s_to_d           ; S>D
002326r 3  20 rr rr                     jsr xt_r_from           ; R>
002329r 3  20 rr rr                     jsr xt_sm_slash_rem     ; SM/REM
00232Cr 3               
00232Cr 3                               ; Get the flag back from the 65c02's stack. Zero is SLASH,
00232Cr 3                               ; $FF is SLASH MOD
00232Cr 3  68                           pla
00232Dr 3  D0 05                        bne @done
00232Fr 3               
00232Fr 3                               ; The following code is for SLASH only
00232Fr 3  20 rr rr                     jsr xt_swap
002332r 3  E8                           inx             ; DROP
002333r 3  E8                           inx
002334r 3               @done:
002334r 3               z_slash_mod:
002334r 3  60           z_slash:        rts
002335r 3               
002335r 3               
002335r 3               
002335r 3               ; ## SLASH_MOD ( n1 n2 -- n3 n4 ) "Divide NOS by TOS with a remainder"
002335r 3               ; ## "/mod"  auto  ANS core
002335r 3                       ; """https://forth-standard.org/standard/core/DivMOD
002335r 3                       ;
002335r 3                       ; This is a dummy entry, the actual code is shared with SLASH
002335r 3                       ; """
002335r 3               
002335r 3               
002335r 3               ; ## SLASH_STRING ( addr u n -- addr u ) "Shorten string by n"
002335r 3               ; ## "/string"  auto  ANS string
002335r 3                       ; """https://forth-standard.org/standard/string/DivSTRING
002335r 3                       ;
002335r 3                       ; Forth code is
002335r 3                       ; : /STRING ( ADDR U N -- ADDR U ) ROT OVER + ROT ROT - ;
002335r 3                       ; Put differently, we need to add TOS and 3OS, and subtract
002335r 3                       ; TOS from NOS, and then drop TOS
002335r 3                       ; """
002335r 3               
002335r 3               xt_slash_string:
002335r 3  20 rr rr                     jsr underflow_3
002338r 3               
002338r 3  18                           clc             ; 3OS+TOS
002339r 3  B5 00                        lda 0,x
00233Br 3  75 04                        adc 4,x
00233Dr 3  95 04                        sta 4,x
00233Fr 3               
00233Fr 3  B5 01                        lda 1,x
002341r 3  75 05                        adc 5,x
002343r 3  95 05                        sta 5,x
002345r 3               
002345r 3  38                           sec             ; NOS-TOS
002346r 3  B5 02                        lda 2,x
002348r 3  F5 00                        sbc 0,x
00234Ar 3  95 02                        sta 2,x
00234Cr 3               
00234Cr 3  B5 03                        lda 3,x
00234Er 3  F5 01                        sbc 1,x
002350r 3  95 03                        sta 3,x
002352r 3               
002352r 3  E8                           inx
002353r 3  E8                           inx
002354r 3               
002354r 3  60           z_slash_string: rts
002355r 3               
002355r 3               
002355r 3               
002355r 3               ; ## SLITERAL ( addr u -- )( -- addr u ) "Compile a string for runtime"
002355r 3               ; ## "sliteral" auto  ANS string
002355r 3                       ; """https://forth-standard.org/standard/string/SLITERAL
002355r 3                       ; Add the runtime for an existing string.
002355r 3                       ; """
002355r 3               
002355r 3               xt_sliteral:
002355r 3  20 rr rr                     jsr underflow_2
002358r 3               
002358r 3                               ; We can't assume that ( addr u ) of the current string is in
002358r 3                               ; a stable area (eg. already in the dictionary.) Copy the
002358r 3                               ; string data into the dictionary using move.
002358r 3               
002358r 3                               ; Put a jmp over the string data with address to be filled
002358r 3                               ; in later.
002358r 3  A9 4C                        lda #$4C
00235Ar 3  20 rr rr                     jsr cmpl_a
00235Dr 3               
00235Dr 3                               ; Address to be filled in later.
00235Dr 3  20 rr rr                     jsr cmpl_a
002360r 3  20 rr rr                     jsr cmpl_a
002363r 3               
002363r 3                               ; Turn the data stack from ( addr u ) into
002363r 3                               ; ( here u addr here u ) so move can be called with
002363r 3                               ; the remaining items on the stack ready for processing.
002363r 3                               ; Reserve three extra words on the stack.
002363r 3  8A                           txa
002364r 3  38                           sec
002365r 3  E9 06                        sbc #6
002367r 3  AA                           tax
002368r 3               
002368r 3                               ; Move addr down from TOS-4 to TOS-2
002368r 3  B5 08                        lda 8,x
00236Ar 3  95 04                        sta 4,x
00236Cr 3  B5 09                        lda 9,x
00236Er 3  95 05                        sta 5,x
002370r 3               
002370r 3                               ; Copy u from TOS-3 to TOS
002370r 3  B5 06                        lda 6,x
002372r 3  95 00                        sta 0,x
002374r 3  B5 07                        lda 7,x
002376r 3  95 01                        sta 1,x
002378r 3               
002378r 3                               ; Put HERE into TOS-1 and TOS-4
002378r 3  A5 rr                        lda cp
00237Ar 3  95 08                        sta 8,x
00237Cr 3  95 02                        sta 2,x
00237Er 3  A5 rr                        lda cp+1
002380r 3  95 09                        sta 9,x
002382r 3  95 03                        sta 3,x
002384r 3               
002384r 3                               ; Copy the string into the dictionary.
002384r 3  20 rr rr                     jsr xt_move
002387r 3               
002387r 3                               ; Update cp.
002387r 3  18                           clc
002388r 3  A5 rr                        lda cp
00238Ar 3  75 00                        adc 0,x
00238Cr 3  85 rr                        sta cp
00238Er 3  A5 rr                        lda cp+1
002390r 3  75 01                        adc 1,x
002392r 3  85 rr                        sta cp+1
002394r 3               
002394r 3                               ; Update the address of the jump-over jmp instruction.
002394r 3                               ; First determine location of jmp instructions address.
002394r 3                               ; It should be 2 bytes before the start of the string.
002394r 3               
002394r 3                               ; Compute it into tmp1, which is no longer being used.
002394r 3  B5 02                        lda 2,x
002396r 3  38                           sec
002397r 3  E9 02                        sbc #2
002399r 3  85 rr                        sta tmp1
00239Br 3  B5 03                        lda 3,x
00239Dr 3  E9 00                        sbc #0          ; Propagate borrow
00239Fr 3  85 rr                        sta tmp1+1
0023A1r 3               
0023A1r 3                               ; Update the address of the jump to HERE.
0023A1r 3  A5 rr                        lda cp
0023A3r 3  92 rr                        sta (tmp1)
0023A5r 3  A0 01                        ldy #1
0023A7r 3  A5 rr                        lda cp+1
0023A9r 3  91 rr                        sta (tmp1),y
0023ABr 3               
0023ABr 3                               ; Stack is now ( addr2 u ) where addr2 is the new
0023ABr 3                               ; location in the dictionary.
0023ABr 3               
0023ABr 3               sliteral_const_str:
0023ABr 3                               ; Compile a subroutine jump to the runtime of SLITERAL that
0023ABr 3                               ; pushes the new ( addr u ) pair to the Data Stack.
0023ABr 3                               ; When we're done, the code will look like this:
0023ABr 3               
0023ABr 3                               ; xt -->    jmp a
0023ABr 3                               ;           <string data bytes>
0023ABr 3                               ;  a -->    jsr sliteral_runtime
0023ABr 3                               ;           <string address>
0023ABr 3                               ;           <string length>
0023ABr 3                               ; rts -->
0023ABr 3               
0023ABr 3                               ; This means we'll have to adjust the return address for two
0023ABr 3                               ; cells, not just one
0023ABr 3  A0 rr                        ldy #>sliteral_runtime
0023ADr 3  A9 rr                        lda #<sliteral_runtime
0023AFr 3  20 rr rr                     jsr cmpl_subroutine
0023B2r 3               
0023B2r 3                               ; We want to have the address end up as NOS and the length
0023B2r 3                               ; as TOS, so we store the address first
0023B2r 3  B4 03                        ldy 3,x                ; address MSB
0023B4r 3  B5 02                        lda 2,x                ; address LSB
0023B6r 3  20 rr rr                     jsr cmpl_word
0023B9r 3               
0023B9r 3  B4 01                        ldy 1,x                ; length MSB
0023BBr 3  B5 00                        lda 0,x                ; length LSB
0023BDr 3  20 rr rr                     jsr cmpl_word
0023C0r 3               
0023C0r 3                               ; clean up and leave
0023C0r 3  E8                           inx
0023C1r 3  E8                           inx
0023C2r 3  E8                           inx
0023C3r 3  E8                           inx
0023C4r 3               
0023C4r 3  60           z_sliteral:     rts
0023C5r 3               
0023C5r 3               
0023C5r 3               sliteral_runtime:
0023C5r 3               
0023C5r 3                       ; """Run time behaviour of SLITERAL: Push ( addr u ) of string to
0023C5r 3                       ; the Data Stack. We arrive here with the return address as the
0023C5r 3                       ; top of Return Stack, which points to the address of the string
0023C5r 3                       ; """
0023C5r 3  CA                           dex
0023C6r 3  CA                           dex
0023C7r 3  CA                           dex
0023C8r 3  CA                           dex
0023C9r 3               
0023C9r 3                               ; Get the address of the string address off the stack and
0023C9r 3                               ; increase by one because of the RTS mechanics
0023C9r 3  68                           pla
0023CAr 3  85 rr                        sta tmp1        ; LSB of address
0023CCr 3  68                           pla
0023CDr 3  85 rr                        sta tmp1+1      ; MSB of address
0023CFr 3               
0023CFr 3                               ; Walk through both and save them
0023CFr 3  A0 01                        ldy #1          ; adjust for JSR/RTS mechanics on 65c02
0023D1r 3  B1 rr                        lda (tmp1),y
0023D3r 3  95 02                        sta 2,x         ; LSB of address
0023D5r 3  C8                           iny
0023D6r 3               
0023D6r 3  B1 rr                        lda (tmp1),y
0023D8r 3  95 03                        sta 3,x         ; MSB of address
0023DAr 3  C8                           iny
0023DBr 3               
0023DBr 3  B1 rr                        lda (tmp1),y
0023DDr 3  95 00                        sta 0,x         ; LSB of length
0023DFr 3  C8                           iny
0023E0r 3               
0023E0r 3  B1 rr                        lda (tmp1),y
0023E2r 3  95 01                        sta 1,x         ; MSB of length
0023E4r 3               
0023E4r 3                               ; restore return address
0023E4r 3  18                           clc
0023E5r 3  A5 rr                        lda tmp1
0023E7r 3  69 04                        adc #4
0023E9r 3  A8                           tay             ; LSB
0023EAr 3  A5 rr                        lda tmp1+1
0023ECr 3  69 00                        adc #0          ; we only need carry
0023EEr 3  48                           pha             ; MSB
0023EFr 3  5A                           phy
0023F0r 3               
0023F0r 3  60                           rts
0023F1r 3               
0023F1r 3               
0023F1r 3               
0023F1r 3               ; ## SM_SLASH_REM ( d n1 -- n2 n3 ) "Symmetic signed division"
0023F1r 3               ; ## "sm/rem"  auto  ANS core
0023F1r 3                       ; """https://forth-standard.org/standard/core/SMDivREM
0023F1r 3                       ; Symmetic signed division. Compare FM/MOD. Based on F-PC 3.6
0023F1r 3                       ; by Ulrich Hoffmann. See http://www.xlerb.de/uho/ansi.seq
0023F1r 3                       ;
0023F1r 3                       ; Forth:
0023F1r 3                       ; OVER >R 2DUP XOR 0< >R ABS >R DABS R> UM/MOD R> ?NEGATE SWAP
0023F1r 3                       ; R> ?NEGATE SWAP
0023F1r 3                       ; """
0023F1r 3               
0023F1r 3               xt_sm_slash_rem:
0023F1r 3  20 rr rr                     jsr underflow_3 ; contains double number
0023F4r 3               
0023F4r 3                               ; push MSB of high cell of d to Data Stack so we can check
0023F4r 3                               ; its sign later
0023F4r 3  B5 03                        lda 3,x
0023F6r 3  48                           pha
0023F7r 3               
0023F7r 3                               ; XOR the MSB of the high cell of d and n1 so we figure out
0023F7r 3                               ; its sign later as well
0023F7r 3  B5 01                        lda 1,x
0023F9r 3  55 03                        eor 3,x
0023FBr 3  48                           pha
0023FCr 3               
0023FCr 3                               ; Prepare division by getting absolute of n1 and d
0023FCr 3  20 rr rr                     jsr xt_abs
0023FFr 3  E8                           inx             ; pretend we pushed n1 to R
002400r 3  E8                           inx
002401r 3               
002401r 3  20 rr rr                     jsr xt_dabs
002404r 3  CA                           dex
002405r 3  CA                           dex
002406r 3               
002406r 3  20 rr rr                     jsr xt_um_slash_mod     ; UM/MOD
002409r 3               
002409r 3                               ; if the XOR compiled above is negative, negate the
002409r 3                               ; quotient (n3)
002409r 3  68                           pla
00240Ar 3  10 03                        bpl @1
00240Cr 3  20 rr rr                     jsr xt_negate
00240Fr 3               @1:
00240Fr 3                               ; if d was negative, negate the remainder (n2)
00240Fr 3  68                           pla
002410r 3  10 07                        bpl @done
002412r 3               
002412r 3  E8                           inx             ; pretend we pushed quotient to R
002413r 3  E8                           inx
002414r 3  20 rr rr                     jsr xt_negate
002417r 3  CA                           dex
002418r 3  CA                           dex
002419r 3               
002419r 3               @done:
002419r 3  60           z_sm_slash_rem: rts
00241Ar 3               
00241Ar 3               
00241Ar 3               
00241Ar 3               ; ## SOURCE ( -- addr u ) "Return location and size of input buffer""
00241Ar 3               ; ## "source"  auto  ANS core
00241Ar 3                       ; """https://forth-standard.org/standard/core/SOURCE"""
00241Ar 3               xt_source:
00241Ar 3                               ; add address
00241Ar 3  CA                           dex
00241Br 3  CA                           dex
00241Cr 3  A5 rr                        lda cib
00241Er 3  95 00                        sta 0,x
002420r 3  A5 rr                        lda cib+1
002422r 3  95 01                        sta 1,x
002424r 3               
002424r 3                               ; add size
002424r 3  CA                           dex
002425r 3  CA                           dex
002426r 3  A5 rr                        lda ciblen
002428r 3  95 00                        sta 0,x
00242Ar 3  A5 rr                        lda ciblen+1
00242Cr 3  95 01                        sta 1,x
00242Er 3               
00242Er 3  60           z_source:       rts
00242Fr 3               
00242Fr 3               
00242Fr 3               ; ## SOURCE_ID ( -- n ) "Return source identifier"
00242Fr 3               ; ## "source-id"  tested  ANS core ext
00242Fr 3                       ; """https://forth-standard.org/standard/core/SOURCE-ID Identify the
00242Fr 3                       ; input source unless it is a block (s. Conklin & Rather p. 156). This
00242Fr 3                       ; will give the input source: 0 is keyboard, -1 ($FFFF) is character
00242Fr 3                       ; string, and a text file gives the fileid.
00242Fr 3                       ; """
00242Fr 3               xt_source_id:
00242Fr 3  CA                           dex
002430r 3  CA                           dex
002431r 3               
002431r 3  A5 rr                        lda insrc
002433r 3  95 00                        sta 0,x
002435r 3  A5 rr                        lda insrc+1
002437r 3  95 01                        sta 1,x
002439r 3               
002439r 3  60           z_source_id:    rts
00243Ar 3               
00243Ar 3               
00243Ar 3               ; ## SPACE ( -- ) "Print a single space"
00243Ar 3               ; ## "space"  auto  ANS core
00243Ar 3                       ; """https://forth-standard.org/standard/core/SPACE"""
00243Ar 3               xt_space:
00243Ar 3  A9 20                        lda #AscSP
00243Cr 3  20 rr rr                     jsr emit_a
00243Fr 3               
00243Fr 3  60           z_space:        rts
002440r 3               
002440r 3               
002440r 3               ; ## SPACES ( u -- ) "Print a number of spaces"
002440r 3               ; ## "spaces"  auto  ANS core
002440r 3                       ; """https://forth-standard.org/standard/core/SPACES"""
002440r 3               
002440r 3               xt_spaces:
002440r 3  20 rr rr                     jsr underflow_1
002443r 3               
002443r 3                               ; catch any zero in TOS fast
002443r 3  B5 00                        lda 0,x
002445r 3  15 01                        ora 1,x
002447r 3  F0 2A                        beq @done
002449r 3               
002449r 3                               ; Usually we're only going to print far less than 256 spaces,
002449r 3                               ; so we create a quick loop for that. Short loop could be realized
002449r 3                               ; as a separate subroutine, but unless we're really pressed for
002449r 3                               ; memory at some point, this is faster
002449r 3  B4 01                        ldy 1,x
00244Br 3  D0 0C                        bne @lots_of_spaces
00244Dr 3               
00244Dr 3  B4 00                        ldy 0,x
00244Fr 3               @quick_loop:
00244Fr 3                               ; we reach here knowing that there must be a number that is not
00244Fr 3                               ; zero in the TOS
00244Fr 3  A9 20                        lda #AscSP
002451r 3  20 rr rr                     jsr emit_a
002454r 3  88                           dey
002455r 3  F0 1C                        beq @done
002457r 3  80 F6                        bra @quick_loop
002459r 3               
002459r 3               @lots_of_spaces:
002459r 3                               ; We go through the first loop once to get rid of the lower
002459r 3                               ; counter byte. This could be zero
002459r 3  B4 00                        ldy 0,x
00245Br 3               
00245Br 3               @first_slow_loop:
00245Br 3  F0 08                        beq @slow_outer_loop
00245Dr 3  A9 20                        lda #AscSP
00245Fr 3  20 rr rr                     jsr emit_a
002462r 3  88                           dey
002463r 3  80 F6                        bra @first_slow_loop
002465r 3               
002465r 3               @slow_outer_loop:
002465r 3                               ; we arrive here knowing that the MSB of TOS cannot be a zero
002465r 3  A0 00                        ldy #00
002467r 3               
002467r 3               @slow_inner_loop:
002467r 3  A9 20                        lda #AscSP
002469r 3  20 rr rr                     jsr emit_a
00246Cr 3  88                           dey
00246Dr 3  D0 F8                        bne @slow_inner_loop
00246Fr 3               
00246Fr 3  D6 01                        dec 1,x
002471r 3  D0 F2                        bne @slow_outer_loop
002473r 3               
002473r 3               @done:
002473r 3  E8                           inx             ; drop
002474r 3  E8                           inx
002475r 3               
002475r 3  60           z_spaces:       rts
002476r 3               
002476r 3               
002476r 3               
002476r 3               ; ## STAR ( n n -- n ) "16*16 --> 16 "
002476r 3               ; ## "*"  auto  ANS core
002476r 3                       ; """https://forth-standard.org/standard/core/Times
002476r 3                       ; Multiply two signed 16 bit numbers, returning a 16 bit result.
002476r 3                       ;
002476r 3                       ; This is nothing  more than UM* DROP
002476r 3                       ; """
002476r 3               
002476r 3               xt_star:
002476r 3  20 rr rr                     jsr underflow_2
002479r 3               
002479r 3  20 rr rr                     jsr xt_um_star
00247Cr 3  E8                           inx
00247Dr 3  E8                           inx
00247Er 3               
00247Er 3  60           z_star:         rts
00247Fr 3               
00247Fr 3               
00247Fr 3               
00247Fr 3               ; ## STAR_SLASH  ( n1 n2 n3 -- n4 ) "n1 * n2 / n3 -->  n"
00247Fr 3               ; ## "*/"  auto  ANS core
00247Fr 3                       ; """https://forth-standard.org/standard/core/TimesDiv
00247Fr 3                       ; Multiply n1 by n2 and divide by n3, returning the result
00247Fr 3                       ; without a remainder. This is */MOD without the mod.
00247Fr 3                       ;
00247Fr 3                       ; This word
00247Fr 3                       ; can be defined in Forth as : */  */MOD SWAP DROP ; which is
00247Fr 3                       ; pretty much what we do here
00247Fr 3                       ; """
00247Fr 3               xt_star_slash:
00247Fr 3                               ; We let */MOD check for underflow
00247Fr 3  20 rr rr                     jsr xt_star_slash_mod
002482r 3  20 rr rr                     jsr xt_swap
002485r 3  E8                           inx
002486r 3  E8                           inx
002487r 3               z_star_slash:
002487r 3  60                           rts
002488r 3               
002488r 3               
002488r 3               ; ## STAR_SLASH_MOD  ( n1 n2 n3 -- n4 n5 ) "n1 * n2 / n3 --> n-mod n"
002488r 3               ; ## "*/mod"  auto  ANS core
002488r 3                       ; """https://forth-standard.org/standard/core/TimesDivMOD
002488r 3                       ; Multiply n1 by n2 producing the intermediate double-cell result d.
002488r 3                       ; Divide d by n3 producing the single-cell remainder n4 and the
002488r 3                       ; single-cell quotient n5.
002488r 3                       ;
002488r 3                       ; In Forth, this is
002488r 3                       ; : */MOD  >R M* >R SM/REM ;  Note that */ accesses this routine.
002488r 3                       ; """
002488r 3               xt_star_slash_mod:
002488r 3  20 rr rr                     jsr underflow_3
00248Br 3               
00248Br 3  20 rr rr                     jsr xt_to_r
00248Er 3  20 rr rr                     jsr xt_m_star
002491r 3  20 rr rr                     jsr xt_r_from
002494r 3  20 rr rr                     jsr xt_sm_slash_rem
002497r 3               
002497r 3               z_star_slash_mod:
002497r 3  60                           rts
002498r 3               
002498r 3               
002498r 3               ; ## STATE ( -- addr ) "Return the address of compilation state flag"
002498r 3               ; ## "state"  auto  ANS core
002498r 3                       ; """https://forth-standard.org/standard/core/STATE
002498r 3                       ; STATE is true when in compilation state, false otherwise. Note
002498r 3                       ; we do not return the state itself, but only the address where
002498r 3                       ; it lives. The state should not be changed directly by the user; see
002498r 3                       ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
002498r 3                       ; """
002498r 3               xt_state:
002498r 3  CA                           dex
002499r 3  CA                           dex
00249Ar 3  A9 rr                        lda #<state
00249Cr 3  95 00                        sta 0,x
00249Er 3  A9 rr                        lda #>state
0024A0r 3  95 01                        sta 1,x
0024A2r 3               
0024A2r 3  60           z_state:        rts
0024A3r 3               
0024A3r 3               
0024A3r 3               ; ## STORE ( n addr -- ) "Store TOS in memory"
0024A3r 3               ; ## "!"  auto  ANS core
0024A3r 3                       ; """https://forth-standard.org/standard/core/Store"""
0024A3r 3               xt_store:
0024A3r 3  20 rr rr                     jsr underflow_2
0024A6r 3               
0024A6r 3  B5 02                        lda 2,x         ; LSB
0024A8r 3  81 00                        sta (0,x)
0024AAr 3               
0024AAr 3  F6 00                        inc 0,x
0024ACr 3  D0 02                        bne @1
0024AEr 3  F6 01                        inc 1,x
0024B0r 3               @1:
0024B0r 3  B5 03                        lda 3,x         ; MSB
0024B2r 3  81 00                        sta (0,x)
0024B4r 3               
0024B4r 3  E8                           inx             ; 2DROP
0024B5r 3  E8                           inx
0024B6r 3  E8                           inx
0024B7r 3  E8                           inx
0024B8r 3               
0024B8r 3  60           z_store:        rts
0024B9r 3               
0024B9r 3               
0024B9r 3               ; ## STRIP_UNDERFLOW ( -- addr ) "Return address where underflow status is kept"
0024B9r 3               ; ## "strip-underflow"  tested  Tali Forth
0024B9r 3                       ; """`STRIP-UNDERFLOW` is a flag variable that determines if underflow
0024B9r 3                       ; checking should be removed during the compilation of new words.
0024B9r 3                       ; Default is false.
0024B9r 3                       ; """
0024B9r 3               xt_strip_underflow:
0024B9r 3  CA                           dex
0024BAr 3  CA                           dex
0024BBr 3               
0024BBr 3  A9 rr                        lda #<uf_strip
0024BDr 3  95 00                        sta 0,x
0024BFr 3  A9 rr                        lda #>uf_strip
0024C1r 3  95 01                        sta 1,x
0024C3r 3               
0024C3r 3               z_strip_underflow:
0024C3r 3  60                           rts
0024C4r 3               
0024C4r 3               
0024C4r 3               ; ## SWAP ( b a -- a b ) "Exchange TOS and NOS"
0024C4r 3               ; ## "swap"  auto  ANS core
0024C4r 3                       ; """https://forth-standard.org/standard/core/SWAP"""
0024C4r 3               xt_swap:
0024C4r 3  20 rr rr                     jsr underflow_2
0024C7r 3               
0024C7r 3  B5 00                        lda 0,x         ; LSB
0024C9r 3  B4 02                        ldy 2,x
0024CBr 3  95 02                        sta 2,x
0024CDr 3  94 00                        sty 0,x
0024CFr 3               
0024CFr 3  B5 01                        lda 1,x         ; MSB
0024D1r 3  B4 03                        ldy 3,x
0024D3r 3  95 03                        sta 3,x
0024D5r 3  94 01                        sty 1,x
0024D7r 3               
0024D7r 3  60           z_swap:         rts
0024D8r 3               
0024D8r 3               
0024D8r 3               ; ## THEN (C: orig -- ) ( -- ) "Conditional flow control"
0024D8r 3               ; ## "then"  auto  ANS core
0024D8r 3                       ; """http://forth-standard.org/standard/core/THEN"""
0024D8r 3               xt_then:
0024D8r 3                               ; Get the address to jump to.
0024D8r 3  20 rr rr                     jsr xt_here
0024DBr 3               
0024DBr 3                               ; Stuff HERE in for the branch address back
0024DBr 3                               ; at the IF or ELSE (origination address is on stack).
0024DBr 3  20 rr rr                     jsr xt_swap
0024DEr 3  20 rr rr                     jsr xt_store
0024E1r 3               
0024E1r 3  60           z_then:         rts
0024E2r 3               
0024E2r 3               
0024E2r 3               ; ## THRU ( scr# scr# -- ) "Load screens in the given range"
0024E2r 3               ; ## "thru"  tested  ANS block ext
0024E2r 3                       ; """https://forth-standard.org/standard/block/THRU"""
0024E2r 3               
0024E2r 3               xt_thru:
0024E2r 3  20 rr rr                     jsr underflow_2
0024E5r 3               
0024E5r 3                               ; We need to loop here, and can't use the data stack
0024E5r 3                               ; because the LOADed screens might use it.  We'll
0024E5r 3                               ; need to use the same trick that DO loops use, holding
0024E5r 3                               ; the limit and current index on the return stack.
0024E5r 3               
0024E5r 3                               ; Put the ending screen number on the return stack
0024E5r 3  B5 01                        lda 1,x
0024E7r 3  48                           pha
0024E8r 3  B5 00                        lda 0,x
0024EAr 3  48                           pha
0024EBr 3  E8                           inx
0024ECr 3  E8                           inx
0024EDr 3               @thru_loop:
0024EDr 3                               ; Put the starting screen number on the stack,
0024EDr 3                               ; but keep a copy
0024EDr 3  B5 01                        lda 1,x
0024EFr 3  48                           pha
0024F0r 3  B5 00                        lda 0,x
0024F2r 3  48                           pha
0024F3r 3               
0024F3r 3                               ; Load this screen.
0024F3r 3  20 rr rr                     jsr xt_load
0024F6r 3               
0024F6r 3                               ; Get the number and limit back off the stack.  Rather than
0024F6r 3                               ; waste time making room on the stack, just use tmp1 and tmp2.
0024F6r 3               
0024F6r 3                               ; Get the screen we just loaded.
0024F6r 3  68                           pla
0024F7r 3  85 rr                        sta tmp1
0024F9r 3  68                           pla
0024FAr 3  85 rr                        sta tmp1+1
0024FCr 3               
0024FCr 3                               ; Get the ending screen.
0024FCr 3  68                           pla
0024FDr 3  85 rr                        sta tmp2
0024FFr 3  68                           pla
002500r 3  85 rr                        sta tmp2+1
002502r 3               
002502r 3                               ; See if we just loaded the last screen.
002502r 3                               ; A already has the MSB of the last screen in it.
002502r 3  C5 rr                        cmp tmp1+1
002504r 3  D0 08                        bne @next_screen
002506r 3  A5 rr                        lda tmp2        ; Compare the LSB
002508r 3  C5 rr                        cmp tmp1
00250Ar 3  D0 02                        bne @next_screen
00250Cr 3  80 18                        bra @done       ; We just did the last screen.
00250Er 3               
00250Er 3               @next_screen:
00250Er 3                               ; Put the ending screen back on the data stack.
00250Er 3  A5 rr                        lda tmp2+1
002510r 3  48                           pha
002511r 3  A5 rr                        lda tmp2
002513r 3  48                           pha
002514r 3               
002514r 3                               ; Increment the current screen.
002514r 3  E6 rr                        inc tmp1
002516r 3  D0 02                        bne @1
002518r 3  E6 rr                        inc tmp1+1
00251Ar 3               @1:
00251Ar 3                               ; Put the current screen on the stack to prepare for
00251Ar 3                               ; the next loop.
00251Ar 3  CA                           dex
00251Br 3  CA                           dex
00251Cr 3  A5 rr                        lda tmp1
00251Er 3  95 00                        sta 0,x
002520r 3  A5 rr                        lda tmp1+1
002522r 3  95 01                        sta 1,x
002524r 3  80 C7                        bra @thru_loop
002526r 3               @done:
002526r 3  60           z_thru:         rts
002527r 3               
002527r 3               
002527r 3               
002527r 3               ; ## TICK ( "name" -- xt ) "Return a word's execution token (xt)"
002527r 3               ; ## "'"  auto  ANS core
002527r 3                       ; """https://forth-standard.org/standard/core/Tick"""
002527r 3               
002527r 3               xt_tick:
002527r 3  20 rr rr                     jsr xt_parse_name       ; ( -- addr u )
00252Ar 3               
00252Ar 3                               ; if we got a zero, there was a problem getting the
00252Ar 3                               ; name of the word
00252Ar 3  B5 00                        lda 0,x
00252Cr 3  15 01                        ora 1,x
00252Er 3  D0 05                        bne @1
002530r 3               
002530r 3  A9 05                        lda #err_noname
002532r 3  4C rr rr                     jmp error
002535r 3               @1:
002535r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt )
002538r 3               
002538r 3                               ; If we didn't find the word in the Dictionary, abort
002538r 3  B5 00                        lda 0,x
00253Ar 3  15 01                        ora 1,x
00253Cr 3  D0 05                        bne @2
00253Er 3               
00253Er 3  A9 08                        lda #err_syntax
002540r 3  4C rr rr                     jmp error
002543r 3               @2:
002543r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt -- xt )
002546r 3               
002546r 3  60           z_tick:         rts
002547r 3               
002547r 3               
002547r 3               
002547r 3               ; ## TO ( n "name" -- ) or ( "name") "Change a value"
002547r 3               ; ## "to"  auto  ANS core ext
002547r 3                       ; """https://forth-standard.org/standard/core/TO
002547r 3                       ; Gives a new value to a, uh, VALUE.
002547r 3                       ;
002547r 3                       ; One possible Forth
002547r 3                       ; implementation is  ' >BODY !  but given the problems we have
002547r 3                       ; with >BODY on STC Forths, we do this the hard way. Since
002547r 3                       ; Tali Forth uses the same code for CONSTANTs and VALUEs, you
002547r 3                       ; could use this to redefine a CONSTANT, but that is a no-no.
002547r 3                       ;
002547r 3                       ; Note that the standard has different behaviors for TO depending
002547r 3                       ; on the state (https://forth-standard.org/standard/core/TO).
002547r 3                       ; This makes TO state-dependent (which is bad) and also rather
002547r 3                       ; complex (see the Gforth implementation for comparison). This
002547r 3                       ; word may not be natively compiled and must be immediate. Frankly,
002547r 3                       ; it would have made more sense to have two words for this.
002547r 3                       ; """
002547r 3               
002547r 3               xt_to:
002547r 3                               ; One way or the other, we need the xt of the word after this
002547r 3                               ; one. At this point, we don't know if we are interpreted or
002547r 3                               ; compile, so we don't know if there is a value n on the stack,
002547r 3                               ; so we can't do an underflow check yet
002547r 3  20 rr rr                     jsr xt_tick             ; ( [n] xt )
00254Ar 3               
00254Ar 3                               ; The PFA (DFA in this case) is three bytes down,
00254Ar 3                               ; after the jump to DOCONST
00254Ar 3  B5 00                        lda 0,x                 ; LSB
00254Cr 3  18                           clc
00254Dr 3  69 03                        adc #3
00254Fr 3  85 rr                        sta tmp1
002551r 3  B5 01                        lda 1,x                 ; MSB
002553r 3  69 00                        adc #0                  ; we just want the carry
002555r 3  85 rr                        sta tmp1+1
002557r 3               
002557r 3  E8                           inx
002558r 3  E8                           inx                     ; ( [n] )
002559r 3               
002559r 3                               ; Now it gets ugly. See which state we are in
002559r 3  A5 rr                        lda state
00255Br 3  05 rr                        ora state+1
00255Dr 3  F0 34                        beq @interpret
00255Fr 3               
00255Fr 3                               ; Well, we're compiling. We want to end up with simple
00255Fr 3                               ; code that just takes the number that is TOS and saves
00255Fr 3                               ; it in the address of the xt we were just given. So we
00255Fr 3                               ; want to compile this routine:
00255Fr 3                               ;
00255Fr 3                               ;       lda 0,x                 - B5 00
00255Fr 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
00255Fr 3                               ;       lda 1,x                 - B5 01
00255Fr 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
00255Fr 3                               ;       inx                     - E8
00255Fr 3                               ;       inx                     - E8
00255Fr 3                               ;
00255Fr 3                               ; which at least is nice and short. Other than that, we pretty
00255Fr 3                               ; much have to do this the hard and long way, because with the
00255Fr 3                               ; LSBs and MSBs, we can't really put the numbers in a data
00255Fr 3                               ; range and store them with a loop. Sigh.
00255Fr 3               
00255Fr 3  A0 00                        ldy #$00                ; Code for LDA 0,X
002561r 3  A9 B5                        lda #$B5
002563r 3  20 rr rr                     jsr cmpl_word
002566r 3               
002566r 3  A9 8D                        lda #$8D                ; Code for STA abs
002568r 3  20 rr rr                     jsr cmpl_a
00256Br 3               
00256Br 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
00256Dr 3  A5 rr                        lda tmp1
00256Fr 3  20 rr rr                     jsr cmpl_word
002572r 3               
002572r 3  A0 01                        ldy #$01                ; Code for LDA 1,X
002574r 3  A9 B5                        lda #$B5
002576r 3  20 rr rr                     jsr cmpl_word
002579r 3               
002579r 3  A9 8D                        lda #$8D                ; Code for STA abs
00257Br 3  20 rr rr                     jsr cmpl_a
00257Er 3               
00257Er 3  E6 rr                        inc tmp1                ; Calculate MSB
002580r 3  D0 02                        bne @1
002582r 3  E6 rr                        inc tmp1+1
002584r 3               @1:
002584r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
002586r 3  A5 rr                        lda tmp1
002588r 3  20 rr rr                     jsr cmpl_word
00258Br 3               
00258Br 3  A0 E8                        ldy #$E8                ; Code for INX
00258Dr 3  98                           tya
00258Er 3  20 rr rr                     jsr cmpl_word
002591r 3               
002591r 3  80 0F                        bra @done
002593r 3               
002593r 3               @interpret:
002593r 3                               ; We're interpreting, so we arrive here with n
002593r 3                               ; on the stack. This is an annoying place to put
002593r 3                               ; the underflow check because we can't
002593r 3                               ; automatically strip it out
002593r 3  20 rr rr                     jsr underflow_1
002596r 3               
002596r 3                               ; We skip over the jump to DOCONST and store the number
002596r 3                               ; in the Program Field Area (PDF, in this case more a
002596r 3                               ; Data Field Area
002596r 3  B5 00                        lda 0,x
002598r 3  92 rr                        sta (tmp1)              ; LSB
00259Ar 3               
00259Ar 3  A0 01                        ldy #1
00259Cr 3  B5 01                        lda 1,x                 ; MSB
00259Er 3  91 rr                        sta (tmp1),y            ; fall through to common
0025A0r 3               
0025A0r 3  E8                           inx                     ; DROP
0025A1r 3  E8                           inx
0025A2r 3               @done:
0025A2r 3  60           z_to:           rts
0025A3r 3               
0025A3r 3               
0025A3r 3               
0025A3r 3               ; ## TO_BODY ( xt -- addr ) "Return a word's Code Field Area (CFA)"
0025A3r 3               ; ## ">body"  auto  ANS core
0025A3r 3                       ; """https://forth-standard.org/standard/core/toBODY
0025A3r 3                       ; Given a word's execution token (xt), return the address of the
0025A3r 3                       ; start of that word's parameter field (PFA). This is defined as the
0025A3r 3                       ; address that HERE would return right after CREATE.
0025A3r 3                       ;
0025A3r 3                       ; This is a
0025A3r 3                       ; difficult word for STC Forths, because most words don't actually
0025A3r 3                       ; have a Code Field Area (CFA) to skip. We solve this by having CREATE
0025A3r 3                       ; add a flag, "has CFA" (HC), in the header so >BODY know to skip
0025A3r 3                       ; the subroutine jumps to DOVAR, DOCONST, or DODOES
0025A3r 3                       ; """
0025A3r 3               
0025A3r 3               xt_to_body:
0025A3r 3  20 rr rr                     jsr underflow_1
0025A6r 3               
0025A6r 3                               ; Ideally, xt already points to the CFA. We just need to check
0025A6r 3                               ; the HC flag for special cases
0025A6r 3  20 rr rr                     jsr xt_dup              ; ( xt xt )
0025A9r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt nt )
0025ACr 3               
0025ACr 3                               ; The status byte is nt+1
0025ACr 3  F6 00                        inc 0,x
0025AEr 3  D0 02                        bne @1
0025B0r 3  F6 01                        inc 1,x
0025B2r 3               @1:
0025B2r 3  A1 00                        lda (0,x)               ; get status byte
0025B4r 3  29 20                        and #HC
0025B6r 3  F0 0D                        beq @no_cfa
0025B8r 3               
0025B8r 3                               ; We've got a DOVAR, DOCONST, DODEFER, DODOES or whatever,
0025B8r 3                               ; so we add three to xt, which is NOS
0025B8r 3  18                           clc
0025B9r 3  B5 02                        lda 2,x         ; LSB
0025BBr 3  69 03                        adc #3
0025BDr 3  95 02                        sta 2,x
0025BFr 3  B5 03                        lda 3,x         ; MSB
0025C1r 3  69 00                        adc #0          ; we conly care about the carry
0025C3r 3  95 03                        sta 3,x         ; Fall through to @no_cfa
0025C5r 3               @no_cfa:
0025C5r 3  E8                           inx             ; get rid of the nt
0025C6r 3  E8                           inx
0025C7r 3               @done:
0025C7r 3  60           z_to_body:      rts
0025C8r 3               
0025C8r 3               
0025C8r 3               
0025C8r 3               ; ## TO_IN ( -- addr ) "Return address of the input pointer"
0025C8r 3               ; ## ">in"  auto  ANS core
0025C8r 3               xt_to_in:
0025C8r 3  CA                           dex
0025C9r 3  CA                           dex
0025CAr 3               
0025CAr 3  A9 rr                        lda #<toin
0025CCr 3  95 00                        sta 0,x
0025CEr 3  A9 rr                        lda #>toin      ; paranoid, should be zero
0025D0r 3  95 01                        sta 1,x
0025D2r 3               
0025D2r 3  60           z_to_in:        rts
0025D3r 3               
0025D3r 3               
0025D3r 3               ; ## TO_NUMBER ( ud addr u -- ud addr u ) "Convert a number"
0025D3r 3               ; ## ">number"  auto  ANS core
0025D3r 3                       ; """https://forth-standard.org/standard/core/toNUMBER
0025D3r 3                       ; Convert a string to a double number. Logic here is based on the
0025D3r 3                       ; routine by Phil Burk of the same name in pForth, see
0025D3r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
0025D3r 3                       ; for the original Forth code. We arrive here from NUMBER which has
0025D3r 3                       ; made sure that we don't have to deal with a sign and we don't have
0025D3r 3                       ; to deal with a dot as a last character that signalizes double -
0025D3r 3                       ; this should be a pure number string.
0025D3r 3                       ;
0025D3r 3                       ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we
0025D3r 3                       ; cannot access any of those.
0025D3r 3                       ;
0025D3r 3                       ; For the math routine, we move the inputs to the scratchpad to
0025D3r 3                       ; avoid having to fool around with the Data Stack.
0025D3r 3                       ;
0025D3r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
0025D3r 3                       ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
0025D3r 3                       ;     |           |           |           |           |
0025D3r 3                       ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
0025D3r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
0025D3r 3                       ;
0025D3r 3                       ; The math routine works by converting one character to its
0025D3r 3                       ; numerical value (N) via DIGIT? and storing it in S+4 for
0025D3r 3                       ; the moment. We then multiply the UD-HI value with the radix
0025D3r 3                       ; (from BASE) using UM*, which returns a double-cell result. We
0025D3r 3                       ; discard the high cell of that result (UD-HI-HI) and store the
0025D3r 3                       ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
0025D3r 3                       ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
0025D3r 3                       ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
0025D3r 3                       ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
0025D3r 3                       ; storing the result back in S and S+2, before we start another
0025D3r 3                       ; round with it as the new UD-LO and UD-HI.
0025D3r 3                       ; """
0025D3r 3               
0025D3r 3               
0025D3r 3               xt_to_number:
0025D3r 3  20 rr rr                     jsr underflow_4
0025D6r 3               
0025D6r 3                               ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
0025D6r 3                               ; After this step, the original ud-lo and ud-hi will still be on
0025D6r 3                               ; the Data Stack, but will be ignored and later overwritten
0025D6r 3                               ; If >NUMBER is called by NUMBER, these should be all zeros
0025D6r 3  B5 06                        lda 6,x         ; ud-lo LSB
0025D8r 3  85 rr                        sta scratch
0025DAr 3  B5 07                        lda 7,x         ; ud-lo MSB
0025DCr 3  85 rr                        sta scratch+1
0025DEr 3               
0025DEr 3  B5 04                        lda 4,x         ; ud-hi LSB
0025E0r 3  85 rr                        sta scratch+2
0025E2r 3  B5 05                        lda 5,x         ; ud-hi MSB
0025E4r 3  85 rr                        sta scratch+3
0025E6r 3               
0025E6r 3                               ; Push down one on the Data Stack to use TOS for character
0025E6r 3                               ; conversion ( ud-lo ud-hi addr u x )
0025E6r 3  CA                           dex
0025E7r 3  CA                           dex
0025E8r 3               
0025E8r 3               @loop:
0025E8r 3                               ; Get one character based on address
0025E8r 3  A1 04                        lda (4,x)
0025EAr 3  95 00                        sta 0,x                 ; ( ud-lo ud-hi addr u char )
0025ECr 3  74 01                        stz 1,x                 ; paranoid
0025EEr 3               
0025EEr 3  20 rr rr                     jsr xt_digit_question   ; ( char -- n -1 | char 0 )
0025F1r 3               
0025F1r 3                               ; This gives us ( ud-lo ud-hi addr u char f | n f ), so we
0025F1r 3                               ; check the flag. If it is zero, we return what we have and
0025F1r 3                               ; let the caller (usually NUMBER) complain
0025F1r 3  B5 00                        lda 0,x
0025F3r 3  D0 04                        bne @digit_ok
0025F5r 3               
0025F5r 3  E8                           inx
0025F6r 3  E8                           inx
0025F7r 3  80 67                        bra @done       ; ( ud-lo ud-hi addr u char )
0025F9r 3               
0025F9r 3               @digit_ok:
0025F9r 3                               ; Conversion was successful. We arrive here with
0025F9r 3                               ; ( ud-lo ud-hi addr u n -1 ) and can start the
0025F9r 3                               ; math routine
0025F9r 3               
0025F9r 3                               ; Save n so we don't have to fool around with the
0025F9r 3                               ; Data Stack
0025F9r 3  B5 02                        lda 2,x
0025FBr 3  85 rr                        sta scratch+4
0025FDr 3  B5 03                        lda 3,x
0025FFr 3  85 rr                        sta scratch+5
002601r 3               
002601r 3                               ; Now multiply ud-hi (the one in the scratchpad, not the
002601r 3                               ; original one on the Data Stack) with the radix from BASE.
002601r 3                               ; We can clobber TOS and NOS because we saved n
002601r 3  A5 rr                        lda scratch+2
002603r 3  95 02                        sta 2,x         ; NOS
002605r 3  A5 rr                        lda scratch+3
002607r 3  95 03                        sta 3,x
002609r 3               
002609r 3  A5 rr                        lda base
00260Br 3  95 00                        sta 0,x         ; TOS
00260Dr 3  74 01                        stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
00260Fr 3               
00260Fr 3                               ; UM* returns a double-celled number
00260Fr 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
002612r 3               
002612r 3                               ; Move ud-hi-lo to safety
002612r 3  B5 02                        lda 2,x         ; ud-hi-lo
002614r 3  85 rr                        sta scratch+6
002616r 3  B5 03                        lda 3,x
002618r 3  85 rr                        sta scratch+7
00261Ar 3               
00261Ar 3                               ; Now we multiply ud-lo, overwriting the stack entries
00261Ar 3  A5 rr                        lda scratch
00261Cr 3  95 02                        sta 2,x
00261Er 3  A5 rr                        lda scratch+1
002620r 3  95 03                        sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
002622r 3               
002622r 3  A5 rr                        lda base
002624r 3  95 00                        sta 0,x
002626r 3  74 01                        stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
002628r 3               
002628r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
00262Br 3               
00262Br 3  B5 00                        lda 0,x
00262Dr 3  85 rr                        sta scratch+2
00262Fr 3  B5 01                        lda 1,x
002631r 3  85 rr                        sta scratch+3
002633r 3               
002633r 3  B5 02                        lda 2,x
002635r 3  85 rr                        sta scratch
002637r 3  B5 03                        lda 3,x
002639r 3  85 rr                        sta scratch+1
00263Br 3               
00263Br 3                               ; We add ud-lo and n, as well as ud-hi and ud-hi-lo,
00263Br 3                               ; both in the scratch pad
00263Br 3  18                           clc
00263Cr 3  A5 rr                        lda scratch     ; ud-lo LSB
00263Er 3  65 rr                        adc scratch+4   ; n LSB
002640r 3  85 rr                        sta scratch     ; this is the new ud-lo
002642r 3  A5 rr                        lda scratch+1   ; ud-lo MSB
002644r 3  65 rr                        adc scratch+5   ; n MSB
002646r 3  85 rr                        sta scratch+1
002648r 3               
002648r 3  A5 rr                        lda scratch+2   ; LSB
00264Ar 3  65 rr                        adc scratch+6
00264Cr 3  85 rr                        sta scratch+2   ; this is the new ud-hi
00264Er 3  A5 rr                        lda scratch+3   ; MSB
002650r 3  65 rr                        adc scratch+7
002652r 3  85 rr                        sta scratch+3
002654r 3               
002654r 3                               ; Clean up: Get rid of one of the two top elements on
002654r 3                               ; the Data Stack. We don't really care which one
002654r 3  E8                           inx
002655r 3  E8                           inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
002656r 3               
002656r 3                               ; One character down. Move address up
002656r 3  F6 04                        inc 4,x
002658r 3  D0 02                        bne @1
00265Ar 3  F6 05                        inc 5,x
00265Cr 3               @1:
00265Cr 3                               ; Decrease counter
00265Cr 3  D6 02                        dec 2,x
00265Er 3  D0 88                        bne @loop
002660r 3               
002660r 3               @done:
002660r 3                               ; Counter has reached zero or we have an error. In both
002660r 3                               ; cases, we clean up the Data Stack and return. Error gives
002660r 3                               ; us ( ud-lo ud-hi addr u char ), regular end is
002660r 3                               ; ( ud-lo ud-hi addr u ud-lo )
002660r 3  E8                           inx
002661r 3  E8                           inx             ; ( ud-lo ud-hi addr u )
002662r 3               
002662r 3                               ; The new ud-lo and ud-hi are still on the scratch pad
002662r 3  A5 rr                        lda scratch     ; new ud-lo
002664r 3  95 06                        sta 6,x
002666r 3  A5 rr                        lda scratch+1
002668r 3  95 07                        sta 7,x
00266Ar 3               
00266Ar 3  A5 rr                        lda scratch+2
00266Cr 3  95 04                        sta 4,x
00266Er 3  A5 rr                        lda scratch+3
002670r 3  95 05                        sta 5,x
002672r 3               
002672r 3  60           z_to_number:    rts
002673r 3               
002673r 3               
002673r 3               
002673r 3               ; ## TO_ORDER ( wid -- ) "Add wordlist at beginning of search order"
002673r 3               ; ## ">order"  tested  Gforth search
002673r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html"""
002673r 3               
002673r 3               xt_to_order:
002673r 3                               ; Put the wid on the return stack for now.
002673r 3  20 rr rr                     jsr xt_to_r
002676r 3               
002676r 3                               ; Get the current search order.
002676r 3  20 rr rr                     jsr xt_get_order
002679r 3               
002679r 3                               ; Get back the wid and add it to the list.
002679r 3  20 rr rr                     jsr xt_r_from
00267Cr 3  20 rr rr                     jsr xt_swap
00267Fr 3  20 rr rr                     jsr xt_one_plus
002682r 3               
002682r 3                               ; Set the search order with the new list.
002682r 3  20 rr rr                     jsr xt_set_order
002685r 3               
002685r 3  60           z_to_order:     rts
002686r 3               
002686r 3               
002686r 3               
002686r 3               ; ## TO_R ( n -- )(R: -- n) "Push TOS to the Return Stack"
002686r 3               ; ## ">r"  auto  ANS core
002686r 3                       ; """https://forth-standard.org/standard/core/toR
002686r 3                       ; This word is handled differently for native and for
002686r 3                       ; subroutine coding, see `COMPILE,`. This is a complile-only
002686r 3                       ; word.
002686r 3                       ; """
002686r 3               xt_to_r:
002686r 3                               ; Save the return address. If this word is natively
002686r 3                               ; coded, this is a complete waste of cycles, but
002686r 3                               ; required for subroutine coding
002686r 3  68                           pla             ; LSB
002687r 3  85 rr                        sta tmptos
002689r 3  7A                           ply             ; MSB
00268Ar 3               
00268Ar 3                               ; --- CUT HERE FOR NATIVE CODING ---
00268Ar 3               
00268Ar 3                               ; We check for underflow in the second step, so we can
00268Ar 3                               ; strip off the stack thrashing for native compiling first
00268Ar 3  20 rr rr                     jsr underflow_1
00268Dr 3               
00268Dr 3                               ; now we can do the actual work
00268Dr 3  B5 01                        lda 1,x         ; MSB
00268Fr 3  48                           pha
002690r 3  B5 00                        lda 0,x         ; LSB
002692r 3  48                           pha
002693r 3               
002693r 3  E8                           inx
002694r 3  E8                           inx
002695r 3               
002695r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002695r 3               
002695r 3                               ; restore return address
002695r 3  5A                           phy             ; MSB
002696r 3  A5 rr                        lda tmptos
002698r 3  48                           pha             ; LSB
002699r 3               
002699r 3  60           z_to_r:         rts
00269Ar 3               
00269Ar 3               
00269Ar 3               ; ## TRUE ( -- f ) "Push TRUE flag to Data Stack"
00269Ar 3               ; ## "true"  auto  ANS core ext
00269Ar 3                       ; """https://forth-standard.org/standard/core/TRUE"""
00269Ar 3               xt_true:
00269Ar 3  CA                           dex
00269Br 3  CA                           dex
00269Cr 3  A9 FF                        lda #$FF
00269Er 3  95 00                        sta 0,x
0026A0r 3  95 01                        sta 1,x
0026A2r 3               
0026A2r 3  60           z_true:         rts
0026A3r 3               
0026A3r 3               
0026A3r 3               ; ## TUCK ( b a -- a b a ) "Copy TOS below NOS"
0026A3r 3               ; ## "tuck"  auto  ANS core ext
0026A3r 3                       ; """https://forth-standard.org/standard/core/TUCK"""
0026A3r 3               xt_tuck:
0026A3r 3  20 rr rr                     jsr underflow_2
0026A6r 3               
0026A6r 3  CA                           dex
0026A7r 3  CA                           dex
0026A8r 3               
0026A8r 3  B4 04                        ldy 4,x         ; LSB
0026AAr 3  B5 02                        lda 2,x
0026ACr 3  95 04                        sta 4,x
0026AEr 3  94 02                        sty 2,x
0026B0r 3  95 00                        sta 0,x
0026B2r 3               
0026B2r 3  B4 05                        ldy 5,x         ; MSB
0026B4r 3  B5 03                        lda 3,x
0026B6r 3  95 05                        sta 5,x
0026B8r 3  94 03                        sty 3,x         ; bba
0026BAr 3  95 01                        sta 1,x         ; baa
0026BCr 3               
0026BCr 3  60           z_tuck:         rts
0026BDr 3               
0026BDr 3               
0026BDr 3               ; ## TWO ( -- u ) "Push the number 2 to stack"
0026BDr 3               ; ## "2"  auto  Tali Forth
0026BDr 3                       ;
0026BDr 3                       ; This code is shared with ASSEMBLER-WORDLIST
0026BDr 3               xt_assembler_wordlist:
0026BDr 3               xt_two:
0026BDr 3  CA                           dex
0026BEr 3  CA                           dex
0026BFr 3  A9 02                        lda #2
0026C1r 3  95 00                        sta 0,x
0026C3r 3  74 01                        stz 1,x
0026C5r 3               
0026C5r 3               z_assembler_wordlist:
0026C5r 3  60           z_two:          rts
0026C6r 3               
0026C6r 3               
0026C6r 3               ; ## TWO_DROP ( n n -- ) "Drop TOS and NOS"
0026C6r 3               ; ## "2drop"  auto  ANS core
0026C6r 3                       ; """https://forth-standard.org/standard/core/TwoDROP"""
0026C6r 3               xt_two_drop:
0026C6r 3  20 rr rr                     jsr underflow_2
0026C9r 3               
0026C9r 3  E8                           inx
0026CAr 3  E8                           inx
0026CBr 3  E8                           inx
0026CCr 3  E8                           inx
0026CDr 3               
0026CDr 3  60           z_two_drop:     rts
0026CEr 3               
0026CEr 3               
0026CEr 3               ; ## TWO_DUP ( a b -- a b a b ) "Duplicate first two stack elements"
0026CEr 3               ; ## "2dup"  auto  ANS core
0026CEr 3                       ; """https://forth-standard.org/standard/core/TwoDUP"""
0026CEr 3               xt_two_dup:
0026CEr 3  20 rr rr                     jsr underflow_2
0026D1r 3               
0026D1r 3  CA                           dex
0026D2r 3  CA                           dex
0026D3r 3  CA                           dex
0026D4r 3  CA                           dex
0026D5r 3               
0026D5r 3  B5 04                        lda 4,x         ; TOS
0026D7r 3  95 00                        sta 0,x
0026D9r 3  B5 05                        lda 5,x
0026DBr 3  95 01                        sta 1,x
0026DDr 3               
0026DDr 3  B5 06                        lda 6,x         ; NOS
0026DFr 3  95 02                        sta 2,x
0026E1r 3  B5 07                        lda 7,x
0026E3r 3  95 03                        sta 3,x
0026E5r 3               
0026E5r 3  60           z_two_dup:      rts
0026E6r 3               
0026E6r 3               
0026E6r 3               ; ## TWO_FETCH ( addr -- n1 n2 ) "Fetch the cell pair n1 n2 stored at addr"
0026E6r 3               ; ## "2@"  auto  ANS core
0026E6r 3                       ; """https://forth-standard.org/standard/core/TwoFetch
0026E6r 3                       ; Note n2 stored at addr and n1 in the next cell -- in our case,
0026E6r 3                       ; the next two bytes. This is equvalent to  `DUP CELL+ @ SWAP @`
0026E6r 3                       ; """
0026E6r 3               xt_two_fetch:
0026E6r 3  20 rr rr                     jsr underflow_1
0026E9r 3               
0026E9r 3  B5 00                        lda 0,x
0026EBr 3  85 rr                        sta tmp1
0026EDr 3  B4 01                        ldy 1,x
0026EFr 3  84 rr                        sty tmp1+1
0026F1r 3               
0026F1r 3  CA                           dex             ; reuse one stack element
0026F2r 3  CA                           dex
0026F3r 3               
0026F3r 3  B2 rr                        lda (tmp1)      ; copy LSB
0026F5r 3  95 00                        sta 0,x
0026F7r 3  A0 01                        ldy #1          ; copy next
0026F9r 3  B1 rr                        lda (tmp1),y
0026FBr 3  95 01                        sta 1,x
0026FDr 3  C8                           iny             ; copy next
0026FEr 3  B1 rr                        lda (tmp1),y
002700r 3  95 02                        sta 2,x
002702r 3  C8                           iny             ; copy next
002703r 3  B1 rr                        lda (tmp1),y
002705r 3  95 03                        sta 3,x
002707r 3               
002707r 3  60           z_two_fetch:    rts
002708r 3               
002708r 3               ; ## TWO_OVER ( d1 d2 -- d1 d2 d1 ) "Copy double word NOS to TOS"
002708r 3               ; ## "2over"  auto  ANS core
002708r 3                       ; """https://forth-standard.org/standard/core/TwoOVER"""
002708r 3               xt_two_over:
002708r 3  20 rr rr                     jsr underflow_4
00270Br 3               
00270Br 3  CA                           dex
00270Cr 3  CA                           dex
00270Dr 3  CA                           dex
00270Er 3  CA                           dex
00270Fr 3               
00270Fr 3  B5 08                        lda 8,x
002711r 3  95 00                        sta 0,x
002713r 3               
002713r 3  B5 09                        lda 9,x
002715r 3  95 01                        sta 1,x
002717r 3               
002717r 3  B5 0A                        lda 10,x
002719r 3  95 02                        sta 2,x
00271Br 3               
00271Br 3  B5 0B                        lda 11,x
00271Dr 3  95 03                        sta 3,x
00271Fr 3               
00271Fr 3  60           z_two_over:     rts
002720r 3               
002720r 3               
002720r 3               ; ## TWO_R_FETCH ( -- n n ) "Copy top two entries from Return Stack"
002720r 3               ; ## "2r@"  auto  ANS core ext
002720r 3                       ; """https://forth-standard.org/standard/core/TwoRFetch
002720r 3                       ;
002720r 3                       ; This is R> R> 2DUP >R >R SWAP but we can do it a lot faster in
002720r 3                       ; assembler. We use trickery to access the elements on the Return
002720r 3                       ; Stack instead of pulling the return address first and storing
002720r 3                       ; it somewhere else like for 2R> and 2>R. In this version, we leave
002720r 3                       ; it as Never Native; at some point, we should compare versions to
002720r 3                       ; see if an Always Native version would be better
002720r 3                       ; """
002720r 3               xt_two_r_fetch:
002720r 3               		; make room on the Data Stack
002720r 3  CA                           dex
002721r 3  CA                           dex
002722r 3  CA                           dex
002723r 3  CA                           dex
002724r 3               
002724r 3                               ; Get four bytes off of Return Stack. This assumes that
002724r 3                               ; we took a subroutine jump here so the first two entries
002724r 3                               ; are the return address
002724r 3  8A                           txa
002725r 3  BA                           tsx
002726r 3  DA                           phx             ; 65c02 has no TXY, so do it the hard way
002727r 3  7A                           ply
002728r 3  AA                           tax
002729r 3               
002729r 3                               ; The Return Stack addreses $0101 and $0102 are occupied by
002729r 3                               ; the return address for this word. This is a whole lot
002729r 3                               ; easier on the 65816
002729r 3  B9 03 01                     lda $0103,y     ; LSB of top entry
00272Cr 3  95 00                        sta 0,x
00272Er 3  B9 04 01                     lda $0104,y     ; MSB of top entry
002731r 3  95 01                        sta 1,x
002733r 3  B9 05 01                     lda $0105,y     ; LSB of bottom entry
002736r 3  95 02                        sta 2,x
002738r 3  B9 06 01                     lda $0106,y     ; MSB of top entry
00273Br 3  95 03                        sta 3,x
00273Dr 3               
00273Dr 3  60           z_two_r_fetch:  rts
00273Er 3               
00273Er 3               
00273Er 3               ; ## TWO_R_FROM ( -- n1 n2 ) (R: n1 n2 -- ) "Pull two cells from Return Stack"
00273Er 3               ; ## "2r>"  auto  ANS core ext
00273Er 3               	    ; """https://forth-standard.org/standard/core/TwoRfrom
00273Er 3                       ; Pull top two entries from Return Stack.
00273Er 3                       ;
00273Er 3                       ; Is the same as
00273Er 3                       ; R> R> SWAP. As with R>, the problem with the is word is that
00273Er 3                       ; the top value on the ReturnStack for a STC Forth is the
00273Er 3                       ; return address, which we need to get out of the way first.
00273Er 3                       ; Native compile needs to be handled as a special case.
00273Er 3                       ; """
00273Er 3               xt_two_r_from:
00273Er 3                               ; save the return address
00273Er 3  68                           pla                     ; LSB
00273Fr 3  85 rr                        sta tmp1
002741r 3  68                           pla                     ; MSB
002742r 3  85 rr                        sta tmp1+1
002744r 3               
002744r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002744r 3               
002744r 3               		; make room on stack
002744r 3  CA                           dex
002745r 3  CA                           dex
002746r 3  CA                           dex
002747r 3  CA                           dex
002748r 3               
002748r 3                               ; In theory, we should test for underflow on the Return
002748r 3                               ; Stack. However, given the traffic there with an STC
002748r 3                               ; Forth, that's probably not really useful
002748r 3               
002748r 3                               ; now we can access the data
002748r 3  68                           pla                     ; LSB
002749r 3  95 00                        sta 0,x
00274Br 3  68                           pla                     ; MSB
00274Cr 3  95 01                        sta 1,x
00274Er 3               
00274Er 3  68                           pla                     ; LSB
00274Fr 3  95 02                        sta 2,x
002751r 3  68                           pla                     ; MSB
002752r 3  95 03                        sta 3,x
002754r 3               
002754r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002754r 3               
002754r 3                               ; restore return address
002754r 3  A5 rr                        lda tmp1+1              ; MSB
002756r 3  48                           pha
002757r 3  A5 rr                        lda tmp1                ; LSB
002759r 3  48                           pha
00275Ar 3               
00275Ar 3  60           z_two_r_from:   rts
00275Br 3               
00275Br 3               
00275Br 3               ; ## TWO_SLASH ( n -- n ) "Divide TOS by two"
00275Br 3               ; ## "2/"  auto  ANS core
00275Br 3                       ; """https://forth-standard.org/standard/core/TwoDiv"""
00275Br 3               xt_two_slash:
00275Br 3  20 rr rr                     jsr underflow_1
00275Er 3               
00275Er 3                               ; We can't just LSR the LSB and ROR the MSB because that
00275Er 3                               ; would do bad things to the sign
00275Er 3  B5 01                        lda 1,x
002760r 3  0A                           asl                     ; save the sign
002761r 3  76 01                        ror 1,x
002763r 3  76 00                        ror 0,x
002765r 3               
002765r 3  60           z_two_slash:    rts
002766r 3               
002766r 3               
002766r 3               ; ## TWO_STAR ( n -- n ) "Multiply TOS by two"
002766r 3               ; ## "2*"  auto  ANS core
002766r 3                       ; """https://forth-standard.org/standard/core/TwoTimes
002766r 3                       ;
002766r 3                       ; Also used for CELLS
002766r 3                       ; """
002766r 3               xt_two_star:
002766r 3               xt_cells:
002766r 3  20 rr rr                     jsr underflow_1
002769r 3               
002769r 3  16 00                        asl 0,x
00276Br 3  36 01                        rol 1,x
00276Dr 3               z_cells:
00276Dr 3  60           z_two_star:     rts
00276Er 3               
00276Er 3               
00276Er 3               ; ## TWO_STORE ( n1 n2 addr -- ) "Store two numbers at given address"
00276Er 3               ; ## "2!"  auto  ANS core
00276Er 3                       ; """https://forth-standard.org/standard/core/TwoStore
00276Er 3                       ; Stores so n2 goes to addr and n1 to the next consecutive cell.
00276Er 3                       ; Is equivalent to  `SWAP OVER ! CELL+ !`
00276Er 3                       ; """
00276Er 3               xt_two_store:
00276Er 3  20 rr rr                     jsr underflow_3
002771r 3               
002771r 3  B5 00                        lda 0,x
002773r 3  85 rr                        sta tmp1
002775r 3  B4 01                        ldy 1,x
002777r 3  84 rr                        sty tmp1+1
002779r 3               
002779r 3  E8                           inx
00277Ar 3  E8                           inx
00277Br 3               
00277Br 3  B5 00                        lda 0,x         ; copy MSB
00277Dr 3  92 rr                        sta (tmp1)
00277Fr 3  B5 01                        lda 1,x         ; copy next
002781r 3  A0 01                        ldy #1
002783r 3  91 rr                        sta (tmp1),y
002785r 3  B5 02                        lda 2,x         ; copy next
002787r 3  C8                           iny
002788r 3  91 rr                        sta (tmp1),y
00278Ar 3  B5 03                        lda 3,x         ; copy MSB
00278Cr 3  C8                           iny
00278Dr 3  91 rr                        sta (tmp1),y
00278Fr 3               
00278Fr 3  E8                           inx             ; 2DROP
002790r 3  E8                           inx
002791r 3  E8                           inx
002792r 3  E8                           inx
002793r 3               
002793r 3  60           z_two_store:    rts
002794r 3               
002794r 3               
002794r 3               ; ## TWO_SWAP ( n1 n2 n3 n4 -- n3 n4 n1 n1 ) "Exchange two double words"
002794r 3               ; ## "2swap"  auto  ANS core
002794r 3                       ; """https://forth-standard.org/standard/core/TwoSWAP"""
002794r 3               xt_two_swap:
002794r 3  20 rr rr                     jsr underflow_4
002797r 3               
002797r 3                               ; 0 <-> 4
002797r 3  B5 00                        lda 0,x
002799r 3  B4 04                        ldy 4,x
00279Br 3  95 04                        sta 4,x
00279Dr 3  94 00                        sty 0,x
00279Fr 3               
00279Fr 3                               ; 1 <-> 5
00279Fr 3  B5 01                        lda 1,x
0027A1r 3  B4 05                        ldy 5,x
0027A3r 3  95 05                        sta 5,x
0027A5r 3  94 01                        sty 1,x
0027A7r 3               
0027A7r 3                               ; 2 <-> 6
0027A7r 3  B5 02                        lda 2,x
0027A9r 3  B4 06                        ldy 6,x
0027ABr 3  95 06                        sta 6,x
0027ADr 3  94 02                        sty 2,x
0027AFr 3               
0027AFr 3                               ; 3 <-> 7
0027AFr 3  B5 03                        lda 3,x
0027B1r 3  B4 07                        ldy 7,x
0027B3r 3  95 07                        sta 7,x
0027B5r 3  94 03                        sty 3,x
0027B7r 3               
0027B7r 3  60           z_two_swap:     rts
0027B8r 3               
0027B8r 3               
0027B8r 3               ; ## TWO_TO_R ( n1 n2 -- )(R: -- n1 n2 "Push top two entries to Return Stack"
0027B8r 3               ; ## "2>r"  auto  ANS core ext
0027B8r 3                       ; """https://forth-standard.org/standard/core/TwotoR
0027B8r 3                       ; Push top two entries to Return Stack.
0027B8r 3                       ;
0027B8r 3                       ; The same as SWAP >R >R
0027B8r 3                       ; except that if we jumped here, the return address will be in the
0027B8r 3                       ; way. May not be natively compiled unless we're clever and use
0027B8r 3                       ; special routines.
0027B8r 3                       ; """
0027B8r 3               xt_two_to_r:
0027B8r 3                               ; save the return address
0027B8r 3  68                           pla             ; LSB
0027B9r 3  85 rr                        sta tmp1
0027BBr 3  68                           pla             ; MSB
0027BCr 3  85 rr                        sta tmp1+1
0027BEr 3               
0027BEr 3                               ; --- CUT HERE FOR NATIVE CODING ---
0027BEr 3               
0027BEr 3  20 rr rr                     jsr underflow_2
0027C1r 3               
0027C1r 3                               ; now we can move the data
0027C1r 3  B5 03                        lda 3,x         ; MSB
0027C3r 3  48                           pha
0027C4r 3  B5 02                        lda 2,x         ; LSB
0027C6r 3  48                           pha
0027C7r 3               
0027C7r 3                               ; now we can move the data
0027C7r 3  B5 01                        lda 1,x         ; MSB
0027C9r 3  48                           pha
0027CAr 3  B5 00                        lda 0,x         ; LSB
0027CCr 3  48                           pha
0027CDr 3               
0027CDr 3  E8                           inx
0027CEr 3  E8                           inx
0027CFr 3  E8                           inx
0027D0r 3  E8                           inx
0027D1r 3               
0027D1r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0027D1r 3               
0027D1r 3                               ; restore return address
0027D1r 3  A5 rr                        lda tmp1+1      ; MSB
0027D3r 3  48                           pha
0027D4r 3  A5 rr                        lda tmp1        ; LSB
0027D6r 3  48                           pha
0027D7r 3               
0027D7r 3  60           z_two_to_r:     rts
0027D8r 3               
0027D8r 3               
0027D8r 3               ; ## TWO_CONSTANT (C: d "name" -- ) ( -- d) "Create a constant for a double word"
0027D8r 3               ; ## "2constant"  auto  ANS double
0027D8r 3                       ; """https://forth-standard.org/standard/double/TwoCONSTANT
0027D8r 3                       ;
0027D8r 3                       ; Based on the Forth code
0027D8r 3                       ; : 2CONSTANT ( D -- )  CREATE SWAP , , DOES> DUP @ SWAP CELL+ @ ;
0027D8r 3                       ; """
0027D8r 3               xt_two_constant:
0027D8r 3  20 rr rr                     jsr underflow_2
0027DBr 3               
0027DBr 3  20 rr rr                     jsr xt_create
0027DEr 3  20 rr rr                     jsr xt_swap
0027E1r 3  20 rr rr                     jsr xt_comma
0027E4r 3  20 rr rr                     jsr xt_comma
0027E7r 3               
0027E7r 3  20 rr rr                     jsr does_runtime    ; does> turns into these two routines.
0027EAr 3  20 rr rr                     jsr dodoes
0027EDr 3               
0027EDr 3  20 rr rr                     jsr xt_dup
0027F0r 3  20 rr rr                     jsr xt_fetch
0027F3r 3  20 rr rr                     jsr xt_swap
0027F6r 3  20 rr rr                     jsr xt_cell_plus
0027F9r 3  20 rr rr                     jsr xt_fetch
0027FCr 3               
0027FCr 3  60           z_two_constant: rts
0027FDr 3               
0027FDr 3               
0027FDr 3               ; ## TWO_LITERAL (C: d -- ) ( -- d) "Compile a literal double word"
0027FDr 3               ; ## "2literal"  auto  ANS double
0027FDr 3                       ; """https://forth-standard.org/standard/double/TwoLITERAL"""
0027FDr 3                       ; Based on the Forth code
0027FDr 3                       ; : 2LITERAL ( D -- ) SWAP POSTPONE LITERAL POSTPONE LITERAL ; IMMEDIATE
0027FDr 3                       ; """
0027FDr 3               xt_two_literal:
0027FDr 3  20 rr rr                     jsr underflow_2 ; double number
002800r 3               
002800r 3  20 rr rr                     jsr xt_swap
002803r 3  20 rr rr                     jsr xt_literal
002806r 3  20 rr rr                     jsr xt_literal
002809r 3               
002809r 3  60           z_two_literal:  rts
00280Ar 3               
00280Ar 3               
00280Ar 3               ; ## TWO_VARIABLE ( "name" -- ) "Create a variable for a double word"
00280Ar 3               ; ## "2variable"  auto  ANS double
00280Ar 3                       ; """https://forth-standard.org/standard/double/TwoVARIABLE
00280Ar 3                       ; The variable is not initialized to zero.
00280Ar 3                       ;
00280Ar 3                       ; This can be realized in Forth as either
00280Ar 3                       ; CREATE 2 CELLS ALLOT  or just  CREATE 0 , 0 ,
00280Ar 3                       ; """
00280Ar 3               xt_two_variable:
00280Ar 3                               ; We just let CRATE and ALLOT do the heavy lifting
00280Ar 3  20 rr rr                     jsr xt_create
00280Dr 3               
00280Dr 3  CA                           dex
00280Er 3  CA                           dex
00280Fr 3  A9 04                        lda #4
002811r 3  95 00                        sta 0,x
002813r 3  74 01                        stz 1,x
002815r 3               
002815r 3  20 rr rr                     jsr xt_allot
002818r 3               
002818r 3  60           z_two_variable: rts
002819r 3               
002819r 3               
002819r 3               ; ## TYPE ( addr u -- ) "Print string"
002819r 3               ; ## "type"  auto  ANS core
002819r 3                       ; """https://forth-standard.org/standard/core/TYPE
002819r 3                       ; Works through EMIT to allow OUTPUT revectoring.
002819r 3                       ; """
002819r 3               
002819r 3               xt_type:
002819r 3  20 rr rr                     jsr underflow_2
00281Cr 3               
00281Cr 3                               ; Save the starting address into tmp1
00281Cr 3  B5 02                        lda 2,x
00281Er 3  85 rr                        sta tmp1
002820r 3  B5 03                        lda 3,x
002822r 3  85 rr                        sta tmp1+1
002824r 3               @loop:
002824r 3                               ; done if length is zero
002824r 3  B5 00                        lda 0,x
002826r 3  15 01                        ora 1,x
002828r 3  F0 15                        beq @done
00282Ar 3               
00282Ar 3                               ; Send the current character
00282Ar 3  B2 rr                        lda (tmp1)
00282Cr 3  20 rr rr                     jsr emit_a      ; avoids stack foolery
00282Fr 3               
00282Fr 3                               ; Move the address along (in tmp1)
00282Fr 3  E6 rr                        inc tmp1
002831r 3  D0 02                        bne @1
002833r 3  E6 rr                        inc tmp1+1
002835r 3               @1:
002835r 3                               ; Reduce the count (on the data stack)
002835r 3  B5 00                        lda 0,x
002837r 3  D0 02                        bne @2
002839r 3  D6 01                        dec 1,x
00283Br 3               @2:
00283Br 3  D6 00                        dec 0,x
00283Dr 3               
00283Dr 3  80 E5                        bra @loop
00283Fr 3               @done:
00283Fr 3  E8                           inx
002840r 3  E8                           inx
002841r 3  E8                           inx
002842r 3  E8                           inx
002843r 3               
002843r 3  60           z_type:         rts
002844r 3               
002844r 3               
002844r 3               
002844r 3               ; ## U_DOT ( u -- ) "Print TOS as unsigned number"
002844r 3               ; ## "u."  tested  ANS core
002844r 3                       ; """https://forth-standard.org/standard/core/Ud
002844r 3                       ;
002844r 3                       ; This is : U. 0 <# #S #> TYPE SPACE ; in Forth
002844r 3                       ; We use the internal assembler function print_u followed
002844r 3                       ; by a single space
002844r 3                       ; """
002844r 3               xt_u_dot:
002844r 3  20 rr rr                     jsr underflow_1
002847r 3               
002847r 3  20 rr rr                     jsr print_u
00284Ar 3  A9 20                        lda #AscSP
00284Cr 3  20 rr rr                     jsr emit_a
00284Fr 3               
00284Fr 3  60           z_u_dot:        rts
002850r 3               
002850r 3               
002850r 3               ; ## U_DOT_R ( u u -- ) "Print NOS as unsigned number right-justified with TOS width"
002850r 3               ; ## "u.r"  tested  ANS core ext
002850r 3                       ; """https://forth-standard.org/standard/core/UDotR"""
002850r 3               xt_u_dot_r:
002850r 3  20 rr rr                     jsr underflow_2
002853r 3               
002853r 3  20 rr rr                     jsr xt_to_r
002856r 3  20 rr rr                     jsr xt_zero
002859r 3  20 rr rr                     jsr xt_less_number_sign
00285Cr 3  20 rr rr                     jsr xt_number_sign_s
00285Fr 3  20 rr rr                     jsr xt_number_sign_greater
002862r 3  20 rr rr                     jsr xt_r_from
002865r 3  20 rr rr                     jsr xt_over
002868r 3  20 rr rr                     jsr xt_minus
00286Br 3  20 rr rr                     jsr xt_spaces
00286Er 3  20 rr rr                     jsr xt_type
002871r 3               
002871r 3  60           z_u_dot_r:      rts
002872r 3               
002872r 3               
002872r 3               ; ## U_GREATER_THAN ( n m -- f ) "Return true if NOS > TOS (unsigned)"
002872r 3               ; ## "u>"  auto  ANS core ext
002872r 3                       ; """https://forth-standard.org/standard/core/Umore"""
002872r 3               xt_u_greater_than:
002872r 3  20 rr rr                     jsr underflow_2
002875r 3               
002875r 3  B5 00                        lda 0,x
002877r 3  D5 02                        cmp 2,x
002879r 3  B5 01                        lda 1,x
00287Br 3  F5 03                        sbc 3,x
00287Dr 3  E8                           inx
00287Er 3  E8                           inx
00287Fr 3               
00287Fr 3  A9 00                        lda #0
002881r 3  69 FF                        adc #$ff
002883r 3  95 00                        sta 0,x         ; store flag
002885r 3  95 01                        sta 1,x
002887r 3               
002887r 3  60           z_u_greater_than:    rts
002888r 3               
002888r 3               ; ## U_LESS_THAN ( n m -- f ) "Return true if NOS < TOS (unsigned)"
002888r 3               ; ## "u<"  auto  ANS core
002888r 3                       ; """https://forth-standard.org/standard/core/Uless"""
002888r 3               xt_u_less_than:
002888r 3  20 rr rr                     jsr underflow_2
00288Br 3               
00288Br 3  B5 02                        lda 2,x
00288Dr 3  D5 00                        cmp 0,x
00288Fr 3  B5 03                        lda 3,x
002891r 3  F5 01                        sbc 1,x
002893r 3  E8                           inx
002894r 3  E8                           inx
002895r 3               
002895r 3  A9 00                        lda #0
002897r 3  69 FF                        adc #$ff
002899r 3  95 00                        sta 0,x         ; store flag
00289Br 3  95 01                        sta 1,x
00289Dr 3               
00289Dr 3  60           z_u_less_than:    rts
00289Er 3               
00289Er 3               
00289Er 3               ; ## UD_DOT ( d -- ) "Print double as unsigned"
00289Er 3               ; ## "ud."  auto  Tali double
00289Er 3                       ;
00289Er 3                       ; """Based on the Forth code  : UD. <# #S #> TYPE SPACE ;
00289Er 3                       ; """
00289Er 3               xt_ud_dot:
00289Er 3  20 rr rr                     jsr underflow_2 ; double number
0028A1r 3               
0028A1r 3  20 rr rr                     jsr xt_less_number_sign
0028A4r 3  20 rr rr                     jsr xt_number_sign_s
0028A7r 3  20 rr rr                     jsr xt_number_sign_greater
0028AAr 3  20 rr rr                     jsr xt_type
0028ADr 3  20 rr rr                     jsr xt_space
0028B0r 3               
0028B0r 3  60           z_ud_dot:        rts
0028B1r 3               
0028B1r 3               
0028B1r 3               ; ## UD_DOT_R ( d u -- ) "Print unsigned double right-justified u wide"
0028B1r 3               ; ## "ud.r"  auto  Tali double
0028B1r 3                       ;
0028B1r 3                       ; """Based on the Forth code : UD.R  >R <# #S #> R> OVER - SPACES TYPE ;
0028B1r 3                       ; """
0028B1r 3               xt_ud_dot_r:
0028B1r 3  20 rr rr                     jsr underflow_3
0028B4r 3               
0028B4r 3  20 rr rr                     jsr xt_to_r
0028B7r 3  20 rr rr                     jsr xt_less_number_sign
0028BAr 3  20 rr rr                     jsr xt_number_sign_s
0028BDr 3  20 rr rr                     jsr xt_number_sign_greater
0028C0r 3  20 rr rr                     jsr xt_r_from
0028C3r 3  20 rr rr                     jsr xt_over
0028C6r 3  20 rr rr                     jsr xt_minus
0028C9r 3  20 rr rr                     jsr xt_spaces
0028CCr 3  20 rr rr                     jsr xt_type
0028CFr 3               
0028CFr 3  60           z_ud_dot_r:      rts
0028D0r 3               
0028D0r 3               
0028D0r 3               ; ## UM_SLASH_MOD ( ud u -- ur u ) "32/16 -> 16 division"
0028D0r 3               ; ## "um/mod"  auto  ANS core
0028D0r 3                       ; """https://forth-standard.org/standard/core/UMDivMOD
0028D0r 3                       ; Divide double cell number by single cell number, returning the
0028D0r 3                       ; quotient as TOS and any remainder as NOS. All numbers are unsigned.
0028D0r 3                       ; This is the basic division operation all others use. Based on FIG
0028D0r 3                       ; Forth code, modified by Garth Wilson, see
0028D0r 3                       ; http://6502.org/source/integers/ummodfix/ummodfix.htm
0028D0r 3                       ;
0028D0r 3                       ; This uses tmp1, tmp1+1, and tmptos
0028D0r 3                       ; """
0028D0r 3               
0028D0r 3               xt_um_slash_mod:
0028D0r 3  20 rr rr                     jsr underflow_3
0028D3r 3               
0028D3r 3                               ; catch division by zero
0028D3r 3  B5 00                        lda 0,x
0028D5r 3  15 01                        ora 1,x
0028D7r 3  D0 05                        bne @not_zero
0028D9r 3               
0028D9r 3  A9 04                        lda #err_divzero
0028DBr 3  4C rr rr                     jmp error
0028DEr 3               
0028DEr 3               @not_zero:
0028DEr 3                               ; We loop 17 times
0028DEr 3  A9 11                        lda #17
0028E0r 3  85 rr                        sta tmptos
0028E2r 3               
0028E2r 3               @loop:
0028E2r 3                               ; rotate low cell of dividend one bit left (LSB)
0028E2r 3  36 04                        rol 4,x
0028E4r 3  36 05                        rol 5,x
0028E6r 3               
0028E6r 3                               ; loop control
0028E6r 3  C6 rr                        dec tmptos
0028E8r 3  F0 22                        beq @done
0028EAr 3               
0028EAr 3                               ; rotate high cell of dividend one bit left (MSB)
0028EAr 3  36 02                        rol 2,x
0028ECr 3  36 03                        rol 3,x
0028EEr 3               
0028EEr 3  64 rr                        stz tmp1        ; store the bit we got from hi cell (MSB)
0028F0r 3  26 rr                        rol tmp1
0028F2r 3               
0028F2r 3                               ; subtract dividend hi cell minus divisor
0028F2r 3  38                           sec
0028F3r 3  B5 02                        lda 2,x
0028F5r 3  F5 00                        sbc 0,x
0028F7r 3  85 rr                        sta tmp1+1
0028F9r 3  B5 03                        lda 3,x
0028FBr 3  F5 01                        sbc 1,x
0028FDr 3               
0028FDr 3  A8                           tay
0028FEr 3  A5 rr                        lda tmp1
002900r 3  E9 00                        sbc #0
002902r 3  90 DE                        bcc @loop
002904r 3               
002904r 3                               ; make result new dividend high cell
002904r 3  A5 rr                        lda tmp1+1
002906r 3  95 02                        sta 2,x
002908r 3  94 03                        sty 3,x         ; used as temp storage
00290Ar 3               
00290Ar 3  80 D6                        bra @loop
00290Cr 3               @done:
00290Cr 3  E8                           inx
00290Dr 3  E8                           inx
00290Er 3               
00290Er 3  20 rr rr                     jsr xt_swap
002911r 3               
002911r 3  60           z_um_slash_mod: rts
002912r 3               
002912r 3               
002912r 3               
002912r 3               ; ## UM_STAR ( u u -- ud ) "Multiply 16 x 16 -> 32"
002912r 3               ; ## "um*"  auto  ANS core
002912r 3                       ; """https://forth-standard.org/standard/core/UMTimes
002912r 3                       ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.
002912r 3                       ; Old Forth versions such as FIG Forth call this U*
002912r 3                       ;
002912r 3                       ; This is based on modified FIG Forth code by Dr. Jefyll, see
002912r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed
002912r 3                       ; discussion.
002912r 3                       ;
002912r 3                       ; We don't use the system scratch pad (SYSPAD) for temp
002912r 3                       ; storage because >NUMBER uses it as well, but instead tmp1 to
002912r 3                       ; tmp3 (tmp1 is N in the original code, tmp1+1 is N+1, etc).
002912r 3                       ;
002912r 3                       ; Consider switching to a table-supported version based on
002912r 3                       ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
002912r 3                       ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d>
002912r 3                       ; http://forum.6502.org/viewtopic.php?p=205#p205
002912r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689
002912r 3                       ; """
002912r 3               
002912r 3               xt_um_star:
002912r 3  20 rr rr                     jsr underflow_2
002915r 3               
002915r 3                               ; to eliminate clc inside the loop, the value at
002915r 3                               ; tmp1 is reduced by 1 in advance
002915r 3  18                           clc
002916r 3  B5 00                        lda 0,x         ; copy TOS to tmp2
002918r 3  E9 00                        sbc #0
00291Ar 3  85 rr                        sta tmp2
00291Cr 3               
00291Cr 3  B5 01                        lda 1,x
00291Er 3  E9 00                        sbc #0
002920r 3  90 31                        bcc @zero       ; is TOS zero?
002922r 3  85 rr                        sta tmp2+1
002924r 3               
002924r 3  A9 00                        lda #0
002926r 3  85 rr                        sta tmp1
002928r 3  86 rr                        stx tmp3        ; tested for exit from outer loop
00292Ar 3  CA                           dex
00292Br 3  CA                           dex
00292Cr 3               
00292Cr 3               @outer_loop:
00292Cr 3  A0 08                        ldy #8          ; counter inner loop
00292Er 3  56 04                        lsr 4,x         ; think "2,x" then later "3,x"
002930r 3               
002930r 3               @inner_loop:
002930r 3  90 0C                        bcc @no_add
002932r 3  85 rr                        sta tmp1+1      ; save time, don't CLC
002934r 3  A5 rr                        lda tmp1
002936r 3  65 rr                        adc tmp2
002938r 3  85 rr                        sta tmp1
00293Ar 3  A5 rr                        lda tmp1+1
00293Cr 3  65 rr                        adc tmp2+1
00293Er 3               
00293Er 3               @no_add:
00293Er 3  6A                           ror
00293Fr 3  66 rr                        ror tmp1
002941r 3  76 04                        ror 4,x         ; think "2,x" then later "3,x"
002943r 3               
002943r 3  88                           dey
002944r 3  D0 EA                        bne @inner_loop ; go back for one more shift?
002946r 3               
002946r 3  E8                           inx
002947r 3  E4 rr                        cpx tmp3
002949r 3  D0 E1                        bne @outer_loop ; go back for eight more shifts?
00294Br 3               
00294Br 3                               ; all done, store high word of result
00294Br 3  95 01                        sta 1,x
00294Dr 3  A5 rr                        lda tmp1
00294Fr 3  95 00                        sta 0,x
002951r 3  80 04                        bra @done
002953r 3               
002953r 3               @zero:
002953r 3  74 02                        stz 2,x
002955r 3  74 03                        stz 3,x
002957r 3               @done:
002957r 3  60           z_um_star:      rts
002958r 3               
002958r 3               
002958r 3               
002958r 3               ; ## UNLOOP ( -- )(R: n1 n2 n3 ---) "Drop loop control from Return stack"
002958r 3               ; ## "unloop"  auto  ANS core
002958r 3                       ; """https://forth-standard.org/standard/core/UNLOOP
002958r 3                       ;
002958r 3                       ; Note that 6xPLA uses just as many bytes as a loop would
002958r 3                       ; """
002958r 3               xt_unloop:
002958r 3                               ; Drop fudge number (limit/start from DO/?DO off the
002958r 3                               ; return stack
002958r 3  68                           pla
002959r 3  68                           pla
00295Ar 3  68                           pla
00295Br 3  68                           pla
00295Cr 3               
00295Cr 3                               ; Now drop the LEAVE address that was below them off
00295Cr 3                               ; the Return Stack as well
00295Cr 3  68                           pla
00295Dr 3  68                           pla
00295Er 3               
00295Er 3  60           z_unloop:       rts
00295Fr 3               
00295Fr 3               
00295Fr 3               ; ## UNTIL (C: dest -- ) ( -- ) "Loop flow control"
00295Fr 3               ; ## "until"  auto  ANS core
00295Fr 3                       ; """http://forth-standard.org/standard/core/UNTIL"""
00295Fr 3               xt_until:
00295Fr 3                               ; Compile a 0BRANCH
00295Fr 3  A0 rr                        ldy #>zero_branch_runtime
002961r 3  A9 rr                        lda #<zero_branch_runtime
002963r 3  20 rr rr                     jsr cmpl_subroutine
002966r 3               
002966r 3                               ; The address to loop back to is on the stack.
002966r 3                               ; Just compile it as the destination for the
002966r 3                               ; 0branch.
002966r 3  20 rr rr                     jsr xt_comma
002969r 3               
002969r 3  60           z_until:        rts
00296Ar 3               
00296Ar 3               
00296Ar 3               ; ## UNUSED ( -- u ) "Return size of space available to Dictionary"
00296Ar 3               ; ## "unused"  auto  ANS core ext
00296Ar 3                       ; """https://forth-standard.org/standard/core/UNUSED
00296Ar 3                       ; UNUSED does not include the ACCEPT history buffers. Total RAM
00296Ar 3                       ; should be HERE + UNUSED + <history buffer size>, the last of which
00296Ar 3                       ; defaults to $400
00296Ar 3                       ; """
00296Ar 3               xt_unused:
00296Ar 3  CA                           dex
00296Br 3  CA                           dex
00296Cr 3               
00296Cr 3  A9 FF                        lda #<cp_end
00296Er 3  38                           sec
00296Fr 3  E5 rr                        sbc cp
002971r 3  95 00                        sta 0,x
002973r 3               
002973r 3  A9 7F                        lda #>cp_end
002975r 3  E5 rr                        sbc cp+1
002977r 3  95 01                        sta 1,x
002979r 3               
002979r 3  60           z_unused:       rts
00297Ar 3               
00297Ar 3               
00297Ar 3               ; ## UPDATE ( -- ) "Mark current block as dirty"
00297Ar 3               ; ## "update"  auto  ANS block
00297Ar 3                       ; """https://forth-standard.org/standard/block/UPDATE"""
00297Ar 3               xt_update:
00297Ar 3                               ; Turn on the dirty bit. We can't use TSB here because it only
00297Ar 3                               ; has Absolute and Direct Pages addressing modes
00297Ar 3  A0 2C                        ldy #buffstatus_offset
00297Cr 3  B1 rr                        lda (up),y
00297Er 3  09 02                        ora #2          ; Turn on dirty flag (bit 2)
002980r 3  91 rr                        sta (up),y
002982r 3               
002982r 3  60           z_update:       rts
002983r 3               
002983r 3               
002983r 3               ; ## USERADDR ( -- addr ) "Push address of base address of user variables"
002983r 3               ; ## "useraddr"  tested  Tali Forth
002983r 3               xt_useraddr:
002983r 3  CA                           dex
002984r 3  CA                           dex
002985r 3  A9 rr                        lda #<up
002987r 3  95 00                        sta 0,x
002989r 3  A9 rr                        lda #>up
00298Br 3  95 01                        sta 1,x
00298Dr 3               
00298Dr 3  60           z_useraddr:     rts
00298Er 3               
00298Er 3               
00298Er 3               ; ## VALUE ( n "name" -- ) "Define a value"
00298Er 3               ; ## "value"  auto  ANS core
00298Er 3                       ; """https://forth-standard.org/standard/core/VALUE
00298Er 3                       ;
00298Er 3                       ; This is a dummy header for the WORDLIST. The actual code is
00298Er 3                       ; identical to that of CONSTANT
00298Er 3                       ; """
00298Er 3               
00298Er 3               
00298Er 3               ; ## VARIABLE ( "name" -- ) "Define a variable"
00298Er 3               ; ## "variable"  auto  ANS core
00298Er 3                       ; """https://forth-standard.org/standard/core/VARIABLE
00298Er 3                       ; There are various Forth definitions for this word, such as
00298Er 3                       ; `CREATE 1 CELLS ALLOT`  or  `CREATE 0 ,`  We use a variant of the
00298Er 3                       ; second one so the variable is initialized to zero
00298Er 3                       ; """
00298Er 3               xt_variable:
00298Er 3                               ; we let CREATE do the heavy lifting
00298Er 3  20 rr rr                     jsr xt_create
002991r 3               
002991r 3                               ; there is no "STZ (CP)" so we have to do this the hard
002991r 3                               ; way
002991r 3  A9 00                        lda #0
002993r 3               
002993r 3  92 rr                        sta (cp)
002995r 3  E6 rr                        inc cp
002997r 3  D0 02                        bne @1
002999r 3  E6 rr                        inc cp+1
00299Br 3               @1:
00299Br 3  92 rr                        sta (cp)
00299Dr 3  E6 rr                        inc cp
00299Fr 3  D0 02                        bne @2
0029A1r 3  E6 rr                        inc cp+1
0029A3r 3               @2:
0029A3r 3                               ; Now we need to adjust the length of the complete word by two
0029A3r 3  20 rr rr                     jsr adjust_z
0029A6r 3               
0029A6r 3  60           z_variable:     rts
0029A7r 3               
0029A7r 3               
0029A7r 3               ; ## WHILE ( C: dest -- orig dest ) ( x -- ) "Loop flow control"
0029A7r 3               ; ## "while"  auto  ANS core
0029A7r 3                       ; """http://forth-standard.org/standard/core/WHILE"""
0029A7r 3               xt_while:
0029A7r 3                               ; Compile a 0branch
0029A7r 3  A0 rr                        ldy #>zero_branch_runtime
0029A9r 3  A9 rr                        lda #<zero_branch_runtime
0029ABr 3  20 rr rr                     jsr cmpl_subroutine
0029AEr 3               
0029AEr 3                               ; Put the address (here) where the destination
0029AEr 3                               ; address needs to go so it can be put there later.
0029AEr 3  20 rr rr                     jsr xt_here
0029B1r 3               
0029B1r 3                               ; Fill in the destination address with 0 for now.
0029B1r 3  20 rr rr                     jsr xt_zero
0029B4r 3  20 rr rr                     jsr xt_comma
0029B7r 3               
0029B7r 3                               ; Swap the two addresses on the stack.
0029B7r 3  20 rr rr                     jsr xt_swap
0029BAr 3               
0029BAr 3  60           z_while:        rts
0029BBr 3               
0029BBr 3               
0029BBr 3               ; ## WITHIN ( n1 n2 n3 -- ) "See if within a range"
0029BBr 3               ; ## "within"  auto  ANS core ext
0029BBr 3                       ; """https://forth-standard.org/standard/core/WITHIN
0029BBr 3                       ;
0029BBr 3                       ; This an assembler version of the ANS Forth implementation
0029BBr 3                       ; at https://forth-standard.org/standard/core/WITHIN which is
0029BBr 3                       ; OVER - >R - R> U<  note there is an alternative high-level version
0029BBr 3                       ; ROT TUCK > -ROT > INVERT AND
0029BBr 3                       ; """"
0029BBr 3               xt_within:
0029BBr 3  20 rr rr                     jsr underflow_3
0029BEr 3               
0029BEr 3  20 rr rr                     jsr xt_over
0029C1r 3  20 rr rr                     jsr xt_minus
0029C4r 3  20 rr rr                     jsr xt_to_r
0029C7r 3  20 rr rr                     jsr xt_minus
0029CAr 3  20 rr rr                     jsr xt_r_from
0029CDr 3  20 rr rr                     jsr xt_u_less_than
0029D0r 3               
0029D0r 3  60           z_within:       rts
0029D1r 3               
0029D1r 3               
0029D1r 3               ; ## WORD ( char "name " -- caddr ) "Parse input stream"
0029D1r 3               ; ## "word"  auto  ANS core
0029D1r 3                       ; """https://forth-standard.org/standard/core/WORD
0029D1r 3                       ; Obsolete parsing word included for backwards compatibility only.
0029D1r 3                       ; Do not use this, use `PARSE` or `PARSE-NAME`. Skips leading delimiters
0029D1r 3                       ; and copies word to storage area for a maximum size of 255 bytes.
0029D1r 3                       ; Returns the result as a counted string (requires COUNT to convert
0029D1r 3                       ; to modern format), and inserts a space after the string. See "Forth
0029D1r 3                       ; Programmer's Handbook" 3rd edition p. 159 and
0029D1r 3                       ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
0029D1r 3                       ; for discussions of why you shouldn't be using WORD anymore.
0029D1r 3                       ;
0029D1r 3                       ; Forth
0029D1r 3                       ; would be   PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
0029D1r 3                       ; We only allow input of 255 chars. Seriously, use PARSE-NAME.
0029D1r 3                       ; """
0029D1r 3               
0029D1r 3               xt_word:
0029D1r 3  20 rr rr                     jsr underflow_1
0029D4r 3               
0029D4r 3                               ; Skip over leading delimiters - this is like PARSE-NAME,
0029D4r 3                               ; but unlike PARSE
0029D4r 3  A4 rr                        ldy toin                ; >IN
0029D6r 3               @loop:
0029D6r 3  C4 rr                        cpy ciblen              ; quit if end of input
0029D8r 3  F0 09                        beq @found_char
0029DAr 3  B1 rr                        lda (cib),y
0029DCr 3  D5 00                        cmp 0,x                 ; ASCII of delimiter
0029DEr 3  D0 03                        bne @found_char
0029E0r 3               
0029E0r 3  C8                           iny
0029E1r 3  80 F3                        bra @loop
0029E3r 3               @found_char:
0029E3r 3                               ; Save index of where word starts
0029E3r 3  84 rr                        sty toin
0029E5r 3               
0029E5r 3                               ; The real work is done by parse
0029E5r 3  20 rr rr                     jsr xt_parse            ; Returns ( addr u )
0029E8r 3               
0029E8r 3                               ; Convert the modern ( addr u ) string format to obsolete
0029E8r 3                               ; ( caddr ) format. We just do this in the Dictionary
0029E8r 3  B5 00                        lda 0,x
0029EAr 3  92 rr                        sta (cp)                ; Save length of string
0029ECr 3  48                           pha                     ; Keep copy of length for later
0029EDr 3               
0029EDr 3  20 rr rr                     jsr xt_dup              ; ( addr u u )
0029F0r 3  A5 rr                        lda cp
0029F2r 3  18                           clc
0029F3r 3  69 01                        adc #1
0029F5r 3  95 02                        sta 2,x                 ; LSB of CP
0029F7r 3  A5 rr                        lda cp+1
0029F9r 3  69 00                        adc #0
0029FBr 3  95 03                        sta 3,x                 ; ( addr cp+1 u )
0029FDr 3               
0029FDr 3  20 rr rr                     jsr xt_move
002A00r 3               
002A00r 3                               ; Return caddr
002A00r 3  CA                           dex
002A01r 3  CA                           dex
002A02r 3  A5 rr                        lda cp
002A04r 3  95 00                        sta 0,x
002A06r 3  A5 rr                        lda cp+1
002A08r 3  95 01                        sta 1,x
002A0Ar 3               
002A0Ar 3                               ; Adjust CP
002A0Ar 3  68                           pla                     ; length of string
002A0Br 3  18                           clc
002A0Cr 3  65 rr                        adc cp
002A0Er 3  85 rr                        sta cp
002A10r 3  A5 rr                        lda cp+1
002A12r 3  69 00                        adc #0                  ; we only need the carry
002A14r 3  85 rr                        sta cp+1
002A16r 3  60           z_word:         rts
002A17r 3               
002A17r 3               
002A17r 3               ; ## WORDLIST ( -- wid ) "Create new wordlist (from pool of 8)"
002A17r 3               ; ## "wordlist" auto ANS search
002A17r 3                       ; """https://forth-standard.org/standard/search/WORDLIST
002A17r 3                       ; See the tutorial on Wordlists and the Search Order for
002A17r 3                       ; more information.
002A17r 3                       ; """
002A17r 3               
002A17r 3               xt_wordlist:
002A17r 3                               ; Get the current number of wordlists
002A17r 3  A0 05                        ldy #num_wordlists_offset
002A19r 3  B1 rr                        lda (up),y      ; This is a byte variable, so only
002A1Br 3                                               ; the LSB needs to be checked.
002A1Br 3               
002A1Br 3                               ; See if we are already at the max.
002A1Br 3  C9 0C                        cmp #max_wordlists
002A1Dr 3  D0 05                        bne @ok
002A1Fr 3               
002A1Fr 3                               ; Print an error message if all wordlists used.
002A1Fr 3  A9 0B                        lda #err_wordlist
002A21r 3  4C rr rr                     jmp error
002A24r 3               
002A24r 3               @ok:
002A24r 3  1A                           inc             ; Increment the wordlist#
002A25r 3  91 rr                        sta (up),y      ; Save it into byte variable #wordlists
002A27r 3  CA                           dex             ; and put it on the stack.
002A28r 3  CA                           dex
002A29r 3  95 00                        sta 0,x
002A2Br 3  74 01                        stz 1,x         ; 12 is the max, so upper byte is always zero.
002A2Dr 3               
002A2Dr 3  60           z_wordlist:     rts
002A2Er 3               
002A2Er 3               
002A2Er 3               
002A2Er 3               ; ## WORDS ( -- ) "Print known words from Dictionary"
002A2Er 3               ; ## "words"  tested  ANS tools
002A2Er 3                       ; """https://forth-standard.org/standard/tools/WORDS
002A2Er 3                       ; This is pretty much only used at the command line so we can
002A2Er 3                       ; be slow and try to save space.
002A2Er 3                       ; """
002A2Er 3               
002A2Er 3               xt_words:
002A2Er 3                               ; we follow Gforth by starting on the next
002A2Er 3                               ; line
002A2Er 3  20 rr rr                     jsr xt_cr
002A31r 3               
002A31r 3                               ; We pretty-format the output by inserting a line break
002A31r 3                               ; before the end of the line. We can get away with pushing
002A31r 3                               ; the counter to the stack because this is usually an
002A31r 3                               ; interactive word and speed is not that important
002A31r 3  A9 00                        lda #0
002A33r 3  48                           pha
002A34r 3               
002A34r 3                               ; Set up for traversing the wordlist search order.
002A34r 3  CA                           dex                     ; Make room on the stack for
002A35r 3  CA                           dex                     ; a dictionary pointer.
002A36r 3  64 rr                        stz tmp3                ; Start at the beginning of
002A38r 3                                                       ; the search order.
002A38r 3               @wordlist_loop:
002A38r 3  A0 1E                        ldy #num_order_offset   ; Check against byte variable #ORDER.
002A3Ar 3  A5 rr                        lda tmp3
002A3Cr 3  D1 rr                        cmp (up),y              ; See if we are done.
002A3Er 3  D0 02                        bne @have_wordlist
002A40r 3               
002A40r 3                               ; We ran out of wordlists to search.
002A40r 3  80 44                        bra @words_done
002A42r 3               
002A42r 3               @have_wordlist:
002A42r 3                               ; start with last word in Dictionary
002A42r 3                               ; Get the current wordlist id
002A42r 3  18                           clc                     ; Index into byte array SEARCH-ORDER.
002A43r 3  69 1F                        adc #search_order_offset
002A45r 3  A8                           tay
002A46r 3  B1 rr                        lda (up),y              ; Get the index into array WORDLISTS
002A48r 3               
002A48r 3                               ; Get the DP for that wordlist.
002A48r 3  0A                           asl                     ; Turn offset into cells offset.
002A49r 3  18                           clc
002A4Ar 3  69 06                        adc #wordlists_offset
002A4Cr 3  A8                           tay
002A4Dr 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
002A4Fr 3  95 00                        sta 0,x                 ; on the stack. ( nt )
002A51r 3  C8                           iny
002A52r 3  B1 rr                        lda (up),y
002A54r 3  95 01                        sta 1,x
002A56r 3               
002A56r 3               @loop:
002A56r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002A59r 3  20 rr rr                     jsr xt_name_to_string   ; ( nt addr u )
002A5Cr 3               
002A5Cr 3                               ; Insert line break if we're about to go past the end of the
002A5Cr 3                               ; line
002A5Cr 3  68                           pla
002A5Dr 3  18                           clc
002A5Er 3  75 00                        adc 0,x
002A60r 3  1A                           inc                     ; don't forget the space between words
002A61r 3  C9 4F                        cmp #MAX_LINE_LENGTH    ; usually 79
002A63r 3  90 05                        bcc @1
002A65r 3               
002A65r 3  20 rr rr                     jsr xt_cr
002A68r 3  A9 00                        lda #0
002A6Ar 3               @1:
002A6Ar 3  48                           pha
002A6Br 3  20 rr rr                     jsr xt_type             ; ( nt )
002A6Er 3               
002A6Er 3  A9 20                        lda #AscSP
002A70r 3  20 rr rr                     jsr emit_a
002A73r 3               
002A73r 3                               ; get next word, which begins two down
002A73r 3  20 rr rr                     jsr xt_one_plus         ; 1+
002A76r 3  20 rr rr                     jsr xt_one_plus         ; 1+
002A79r 3  20 rr rr                     jsr xt_fetch            ; @ ( nt+1 )
002A7Cr 3               
002A7Cr 3                               ; if next address is zero, we're done
002A7Cr 3  B5 00                        lda 0,x
002A7Er 3  15 01                        ora 1,x
002A80r 3  D0 D4                        bne @loop
002A82r 3               
002A82r 3                               ; Move on to the next wordlist in the search order.
002A82r 3  E6 rr                        inc tmp3
002A84r 3  80 B2                        bra @wordlist_loop
002A86r 3               
002A86r 3               @words_done:
002A86r 3  68                           pla                     ; dump counter
002A87r 3               
002A87r 3  E8                           inx
002A88r 3  E8                           inx
002A89r 3               
002A89r 3  60           z_words:        rts
002A8Ar 3               
002A8Ar 3               
002A8Ar 3               
002A8Ar 3               ; ## WORDSIZE ( nt -- u ) "Get size of word in bytes"
002A8Ar 3               ; ## "wordsize"  auto  Tali Forth
002A8Ar 3                       ; """Given an word's name token (nt), return the size of the
002A8Ar 3                       ; word's payload size in bytes (CFA plus PFA) in bytes. Does not
002A8Ar 3                       ; count the final RTS.
002A8Ar 3                       ; """
002A8Ar 3               xt_wordsize:
002A8Ar 3  20 rr rr                     jsr underflow_1
002A8Dr 3               
002A8Dr 3                               ; We get the start address of the word from its header entry
002A8Dr 3                               ; for the start of the actual code (execution token, xt)
002A8Dr 3                               ; which is four bytes down, and the pointer to the end of the
002A8Dr 3                               ; code (z_word, six bytes down)
002A8Dr 3  B5 00                        lda 0,x
002A8Fr 3  85 rr                        sta tmp1
002A91r 3  B5 01                        lda 1,x
002A93r 3  85 rr                        sta tmp1+1
002A95r 3               
002A95r 3  A0 06                        ldy #6
002A97r 3  B1 rr                        lda (tmp1),y    ; LSB of z
002A99r 3  88                           dey
002A9Ar 3  88                           dey
002A9Br 3               
002A9Br 3  38                           sec
002A9Cr 3  F1 rr                        sbc (tmp1),y    ; LSB of xt
002A9Er 3  95 00                        sta 0,x
002AA0r 3               
002AA0r 3  A0 07                        ldy #7
002AA2r 3  B1 rr                        lda (tmp1),y    ; MSB of z
002AA4r 3  88                           dey
002AA5r 3  88                           dey
002AA6r 3               
002AA6r 3  F1 rr                        sbc (tmp1),y    ; MSB of xt
002AA8r 3  95 01                        sta 1,x
002AAAr 3               
002AAAr 3  60           z_wordsize:     rts
002AABr 3               
002AABr 3               
002AABr 3               ; ## XOR ( n n -- n ) "Logically XOR TOS and NOS"
002AABr 3               ; ## "xor"  auto  ANS core
002AABr 3                       ; """https://forth-standard.org/standard/core/XOR"""
002AABr 3               xt_xor:
002AABr 3  20 rr rr                     jsr underflow_2
002AAEr 3               
002AAEr 3  B5 00                        lda 0,x
002AB0r 3  55 02                        eor 2,x
002AB2r 3  95 02                        sta 2,x
002AB4r 3               
002AB4r 3  B5 01                        lda 1,x
002AB6r 3  55 03                        eor 3,x
002AB8r 3  95 03                        sta 3,x
002ABAr 3               
002ABAr 3  E8                           inx
002ABBr 3  E8                           inx
002ABCr 3               
002ABCr 3  60           z_xor:          rts
002ABDr 3               
002ABDr 3               
002ABDr 3               ; ## ZERO ( -- 0 ) "Push 0 to Data Stack"
002ABDr 3               ; ## "0"  auto  Tali Forth
002ABDr 3                       ; """The disassembler assumes that this routine does not use Y. Note
002ABDr 3                       ; that CASE and FORTH-WORDLIST use the same routine, as the WD for Forth
002ABDr 3                       ; is 0."""
002ABDr 3               xt_case:
002ABDr 3               xt_forth_wordlist:
002ABDr 3               xt_zero:
002ABDr 3  CA                           dex             ; push
002ABEr 3  CA                           dex
002ABFr 3  74 00                        stz 0,x
002AC1r 3  74 01                        stz 1,x
002AC3r 3               z_case:
002AC3r 3               z_forth_wordlist:
002AC3r 3               z_zero:
002AC3r 3  60                           rts
002AC4r 3               
002AC4r 3               
002AC4r 3               ; ## ZERO_EQUAL ( n -- f ) "Check if TOS is zero"
002AC4r 3               ; ## "0="  auto  ANS core
002AC4r 3                       ; """https://forth-standard.org/standard/core/ZeroEqual"""
002AC4r 3               
002AC4r 3               xt_zero_equal:
002AC4r 3  20 rr rr                     jsr underflow_1
002AC7r 3               
002AC7r 3  B5 00                        lda 0,x
002AC9r 3  15 01                        ora 1,x
002ACBr 3  F0 04                        beq @zero
002ACDr 3               
002ACDr 3                               ; not a zero, so we need a FALSE flag (0)
002ACDr 3  A9 00                        lda #0
002ACFr 3  80 02                        bra @store
002AD1r 3               @zero:
002AD1r 3                               ; We have a zero, so we need a TRUE flag (-1)
002AD1r 3  A9 FF                        lda #$ff
002AD3r 3               @store:
002AD3r 3  95 00                        sta 0,x
002AD5r 3  95 01                        sta 1,x
002AD7r 3               
002AD7r 3  60           z_zero_equal:   rts
002AD8r 3               
002AD8r 3               
002AD8r 3               
002AD8r 3               ; ## ZERO_GREATER ( n -- f ) "Return a TRUE flag if TOS is positive"
002AD8r 3               ; ## "0>"  auto  ANS core ext
002AD8r 3                       ; """https://forth-standard.org/standard/core/Zeromore"""
002AD8r 3               
002AD8r 3               xt_zero_greater:
002AD8r 3  20 rr rr                     jsr underflow_1
002ADBr 3               
002ADBr 3  A0 00                        ldy #0          ; Default is FALSE (TOS is negative)
002ADDr 3               
002ADDr 3  B5 01                        lda 1,x         ; MSB
002ADFr 3  30 05                        bmi @done       ; TOS is negative, keep FLASE
002AE1r 3  15 00                        ora 0,x
002AE3r 3  F0 01                        beq @done       ; TOS is zero, keep FALSE
002AE5r 3               
002AE5r 3  88                           dey             ; TOS is postive, make true
002AE6r 3               @done:
002AE6r 3  98                           tya
002AE7r 3  95 00                        sta 0,x
002AE9r 3  95 01                        sta 1,x
002AEBr 3               
002AEBr 3  60           z_zero_greater: rts
002AECr 3               
002AECr 3               
002AECr 3               
002AECr 3               ; ## ZERO_LESS ( n -- f ) "Return a TRUE flag if TOS negative"
002AECr 3               ; ## "0<"  auto  ANS core
002AECr 3                       ; """https://forth-standard.org/standard/core/Zeroless"""
002AECr 3               
002AECr 3               xt_zero_less:
002AECr 3  20 rr rr                     jsr underflow_1
002AEFr 3               
002AEFr 3  A0 00                        ldy #0          ; Default is FALSE (TOS positive)
002AF1r 3               
002AF1r 3  B5 01                        lda 1,x         ; MSB
002AF3r 3  10 01                        bpl @done       ; TOS is positive, so keep FALSE
002AF5r 3               
002AF5r 3  88                           dey             ; TOS is negative, make TRUE
002AF6r 3               @done:
002AF6r 3  98                           tya
002AF7r 3  95 00                        sta 0,x
002AF9r 3  95 01                        sta 1,x
002AFBr 3               
002AFBr 3  60           z_zero_less:    rts
002AFCr 3               
002AFCr 3               
002AFCr 3               
002AFCr 3               ; ## ZERO_UNEQUAL ( m -- f ) "Return TRUE flag if not zero"
002AFCr 3               ; ## "0<>"  auto  ANS core ext
002AFCr 3                       ; """https://forth-standard.org/standard/core/Zerone"""
002AFCr 3               
002AFCr 3               xt_zero_unequal:
002AFCr 3  20 rr rr                     jsr underflow_1
002AFFr 3               
002AFFr 3  A0 00                        ldy #0          ; default false
002B01r 3               
002B01r 3  B5 00                        lda 0,x
002B03r 3  15 01                        ora 1,x
002B05r 3  F0 01                        beq @got_zero
002B07r 3               
002B07r 3  88                           dey
002B08r 3               @got_zero:
002B08r 3  98                           tya
002B09r 3  95 00                        sta 0,x
002B0Br 3  95 01                        sta 1,x
002B0Dr 3               
002B0Dr 3  60           z_zero_unequal: rts
002B0Er 3               
002B0Er 3               
002B0Er 3               
002B0Er 3               ; ==========================================================
002B0Er 3               ; EDITOR words
002B0Er 3               
002B0Er 3               ; This routine is used by both enter-screen and erase-screen
002B0Er 3               ; to get a buffer for the given screen number and set SCR to
002B0Er 3               ; the given screen number.  This word is not in the dictionary.
002B0Er 3               xt_editor_screen_helper:
002B0Er 3  20 rr rr                     jsr xt_dup
002B11r 3  20 rr rr                     jsr xt_scr
002B14r 3  20 rr rr                     jsr xt_store
002B17r 3  20 rr rr                     jsr xt_buffer
002B1Ar 3               z_editor_screen_helper:
002B1Ar 3  60                           rts
002B1Br 3               
002B1Br 3               
002B1Br 3               ; ## EDITOR_ENTER_SCREEN ( scr# -- ) "Enter all lines for given screen"
002B1Br 3               ; ## "enter-screen"  auto  Tali Editor
002B1Br 3               
002B1Br 3               xt_editor_enter_screen:
002B1Br 3                               ; Set the variable SCR and get a buffer for the
002B1Br 3                               ; given screen number.
002B1Br 3  20 rr rr                     jsr xt_editor_screen_helper
002B1Er 3               
002B1Er 3                               ; Drop the buffer address.
002B1Er 3  20 rr rr                     jsr xt_drop
002B21r 3               
002B21r 3                               ; Overwrite the lines one at a time.
002B21r 3  64 rr                        stz editor1
002B23r 3               @prompt_loop:
002B23r 3                               ; Put the current line number on the stack.
002B23r 3  CA                           dex
002B24r 3  CA                           dex
002B25r 3  A5 rr                        lda editor1
002B27r 3  95 00                        sta 0,x
002B29r 3  74 01                        stz 1,x
002B2Br 3               
002B2Br 3                               ; Use the O word to prompt for overwrite.
002B2Br 3  20 rr rr                     jsr xt_editor_o
002B2Er 3               
002B2Er 3                               ; Move on to the next line.
002B2Er 3  E6 rr                        inc editor1
002B30r 3  A9 10                        lda #16
002B32r 3  C5 rr                        cmp editor1
002B34r 3  D0 ED                        bne @prompt_loop
002B36r 3               
002B36r 3               z_editor_enter_screen:
002B36r 3  60                           rts
002B37r 3               
002B37r 3               
002B37r 3               
002B37r 3               ; ## EDITOR_ERASE_SCREEN ( scr# -- ) "Erase all lines for given screen"
002B37r 3               ; ## "erase-screen"  tested  Tali Editor
002B37r 3               xt_editor_erase_screen:
002B37r 3                               ; Set the variable SCR and get a buffer for the
002B37r 3                               ; given screen number.
002B37r 3  20 rr rr                     jsr xt_editor_screen_helper
002B3Ar 3               
002B3Ar 3                               ; Put 1024 (chars/screen) on stack.
002B3Ar 3  CA                           dex
002B3Br 3  CA                           dex
002B3Cr 3  74 00                        stz 0,x
002B3Er 3  A9 04                        lda #4          ; 4 in MSB makes 1024 ($400).
002B40r 3  95 01                        sta 1,x
002B42r 3               
002B42r 3                               ; Erase the entire block (fill with spaces).
002B42r 3  20 rr rr                     jsr xt_blank
002B45r 3               
002B45r 3                               ; Mark buffer as updated.
002B45r 3  20 rr rr                     jsr xt_update
002B48r 3               
002B48r 3               z_editor_erase_screen:
002B48r 3  60                           rts
002B49r 3               
002B49r 3               
002B49r 3               ; ## EDITOR_EL ( line# -- ) "Erase the given line number"
002B49r 3               ; ## "el"  tested  Tali Editor
002B49r 3               xt_editor_el:
002B49r 3                               ; Turn the line number into buffer offset.
002B49r 3                               ; This also loads the block into the buffer if it's
002B49r 3                               ; not there for some reason.
002B49r 3  20 rr rr                     jsr xt_editor_line
002B4Cr 3               
002B4Cr 3                               ; Put 64 (# of chars/line) on the stack.
002B4Cr 3  CA                           dex
002B4Dr 3  CA                           dex
002B4Er 3  A9 40                        lda #64
002B50r 3  95 00                        sta 0,x
002B52r 3  74 01                        stz 1,x
002B54r 3               
002B54r 3                               ; Fill with spaces.
002B54r 3  20 rr rr                     jsr xt_blank
002B57r 3               
002B57r 3                               ; Mark buffer as updated.
002B57r 3  20 rr rr                     jsr xt_update
002B5Ar 3               
002B5Ar 3  60           z_editor_el:    rts
002B5Br 3               
002B5Br 3               
002B5Br 3               ; ## EDITOR_L ( -- ) "List the current screen"
002B5Br 3               ; ## "l"  tested  Tali Editor
002B5Br 3               
002B5Br 3               xt_editor_l:
002B5Br 3                               ; Load the current screen
002B5Br 3  CA                           dex             ; Put SCR on the stack.
002B5Cr 3  CA                           dex
002B5Dr 3  A0 02                        ldy #scr_offset
002B5Fr 3  B1 rr                        lda (up),y
002B61r 3  95 00                        sta 0,x
002B63r 3  C8                           iny
002B64r 3  B1 rr                        lda (up),y
002B66r 3  95 01                        sta 1,x
002B68r 3  20 rr rr                     jsr xt_block    ; Get the current screen.
002B6Br 3               
002B6Br 3  20 rr rr                     jsr xt_cr
002B6Er 3               
002B6Er 3                               ; Print the screen number.
002B6Er 3                               ; We're using sliteral, so we need to set up the
002B6Er 3                               ; appropriate data structure (see sliteral)
002B6Er 3  80 08                        bra @after_screen_msg
002B70r 3               
002B70r 3               @screen_msg:
002B70r 3  53 63 72 65                  .byte "Screen #"
002B74r 3  65 6E 20 23  
002B78r 3               
002B78r 3               @after_screen_msg:
002B78r 3  20 rr rr                     jsr sliteral_runtime
002B7Br 3  rr rr 08 00                  .word @screen_msg, @after_screen_msg-@screen_msg
002B7Fr 3               
002B7Fr 3  20 rr rr                     jsr xt_type
002B82r 3               
002B82r 3                               ; Put the screen number and printed size for u.r on the stack.
002B82r 3  20 rr rr                     jsr xt_scr
002B85r 3  20 rr rr                     jsr xt_fetch
002B88r 3  CA                           dex
002B89r 3  CA                           dex
002B8Ar 3  A9 04                        lda #4          ; four spaces
002B8Cr 3  95 00                        sta 0,x
002B8Er 3  74 01                        stz 1,x
002B90r 3  20 rr rr                     jsr xt_u_dot_r
002B93r 3               
002B93r 3                               ; The address of the buffer is currently on the stack.
002B93r 3                               ; Print 64 chars at a time. TYPE uses tmp1, so we'll
002B93r 3                               ; keep track of the line number in tmp3.
002B93r 3  64 rr                        stz tmp3
002B95r 3               
002B95r 3               @line_loop:
002B95r 3  20 rr rr                     jsr xt_cr
002B98r 3               
002B98r 3                               ; Print the line number (2-space fixed width)
002B98r 3  CA                           dex
002B99r 3  CA                           dex
002B9Ar 3  CA                           dex
002B9Br 3  CA                           dex
002B9Cr 3  74 03                        stz 3,x
002B9Er 3  A5 rr                        lda tmp3
002BA0r 3  95 02                        sta 2,x
002BA2r 3  74 01                        stz 1,x
002BA4r 3  A9 02                        lda #2
002BA6r 3  95 00                        sta 0,x
002BA8r 3  20 rr rr                     jsr xt_u_dot_r
002BABr 3  20 rr rr                     jsr xt_space
002BAEr 3               
002BAEr 3                               ; Print one line using the address on the stack.
002BAEr 3  20 rr rr                     jsr xt_dup
002BB1r 3  CA                           dex
002BB2r 3  CA                           dex
002BB3r 3  A9 40                        lda #64
002BB5r 3  95 00                        sta 0,x
002BB7r 3  74 01                        stz 1,x
002BB9r 3  20 rr rr                     jsr xt_type
002BBCr 3               
002BBCr 3                               ; Add 64 to the address on the stack to move to the next line.
002BBCr 3  18                           clc
002BBDr 3  A9 40                        lda #64
002BBFr 3  75 00                        adc 0,x
002BC1r 3  95 00                        sta 0,x
002BC3r 3  B5 01                        lda 1,x
002BC5r 3  69 00                        adc #0      ; Add carry
002BC7r 3  95 01                        sta 1,x
002BC9r 3               
002BC9r 3                               ; Increment the line number (held in tmp3)
002BC9r 3  E6 rr                        inc tmp3
002BCBr 3               
002BCBr 3                               ; See if we are done.
002BCBr 3  A5 rr                        lda tmp3
002BCDr 3  C9 10                        cmp #16
002BCFr 3  D0 C4                        bne @line_loop
002BD1r 3               
002BD1r 3  20 rr rr                     jsr xt_cr
002BD4r 3                               ; Drop the address on the stack.
002BD4r 3  E8                           inx
002BD5r 3  E8                           inx
002BD6r 3               
002BD6r 3  60           z_editor_l:            rts
002BD7r 3               
002BD7r 3               
002BD7r 3               
002BD7r 3               ; ## EDITOR_LINE ( line# -- c-addr ) "Turn a line number into address in current screen"
002BD7r 3               ; ## "line"  tested  Tali Editor
002BD7r 3               
002BD7r 3               xt_editor_line:
002BD7r 3  20 rr rr                     jsr underflow_1
002BDAr 3               
002BDAr 3                               ; Multiply the TOS by 64 (chars/line) to compute offset.
002BDAr 3  A0 06                        ldy #6          ; *64 is same as left shift 6 times.
002BDCr 3               @shift_tos_left:
002BDCr 3  16 00                        asl 0,x         ; Shift TOS to the left
002BDEr 3  36 01                        rol 1,x         ; ROL brings MSb from lower byte.
002BE0r 3  88                           dey
002BE1r 3  D0 F9                        bne @shift_tos_left
002BE3r 3                               ; Load the current screen into a buffer
002BE3r 3                               ; and get the buffer address
002BE3r 3  20 rr rr                     jsr xt_scr
002BE6r 3  20 rr rr                     jsr xt_fetch
002BE9r 3  20 rr rr                     jsr xt_block
002BECr 3               
002BECr 3                               ; Add the offset to the buffer base address.
002BECr 3  20 rr rr                     jsr xt_plus
002BEFr 3               
002BEFr 3  60           z_editor_line:  rts
002BF0r 3               
002BF0r 3               
002BF0r 3               
002BF0r 3               ; ## EDITOR_O ( line# -- ) "Overwrite the given line"
002BF0r 3               ; ## "o"  tested  Tali Editor
002BF0r 3               xt_editor_o:
002BF0r 3                               ; Print prompt
002BF0r 3  20 rr rr                     jsr xt_cr
002BF3r 3  20 rr rr                     jsr xt_dup
002BF6r 3  20 rr rr                     jsr xt_two
002BF9r 3  20 rr rr                     jsr xt_u_dot_r
002BFCr 3  20 rr rr                     jsr xt_space
002BFFr 3  A9 2A                        lda #42         ; ASCII for *
002C01r 3  20 rr rr                     jsr emit_a
002C04r 3  20 rr rr                     jsr xt_space
002C07r 3               
002C07r 3                               ; Accept new input (directly into the buffer)
002C07r 3  20 rr rr                     jsr xt_editor_line
002C0Ar 3  20 rr rr                     jsr xt_dup      ; Save a copy of the line address for later.
002C0Dr 3  CA                           dex
002C0Er 3  CA                           dex
002C0Fr 3  A9 40                        lda #64         ; chars/line
002C11r 3  95 00                        sta 0,x
002C13r 3  74 01                        stz 1,x
002C15r 3  20 rr rr                     jsr xt_accept
002C18r 3               
002C18r 3                               ; Fill the rest with spaces.
002C18r 3                               ; Stack is currently ( line_address numchars_from_accept )
002C18r 3  20 rr rr                     jsr xt_dup
002C1Br 3  20 rr rr                     jsr xt_not_rote ; -rot
002C1Er 3  20 rr rr                     jsr xt_plus
002C21r 3  CA                           dex
002C22r 3  CA                           dex
002C23r 3  A9 40                        lda #64         ; chars/line
002C25r 3  95 00                        sta 0,x
002C27r 3  74 01                        stz 1,x
002C29r 3  20 rr rr                     jsr xt_rot
002C2Cr 3  20 rr rr                     jsr xt_minus
002C2Fr 3  20 rr rr                     jsr xt_blank
002C32r 3               
002C32r 3                               ; Mark buffer as updated.
002C32r 3  20 rr rr                     jsr xt_update
002C35r 3               
002C35r 3  60           z_editor_o:     rts
002C36r 3               
002C36r 3               ; ## LCDPUT ( s -- ) "Print single character to LCD"
002C36r 3               ; ## "lcdput" coded Custom
002C36r 3               xt_lcdput:
002C36r 3  20 rr rr                     jsr underflow_1
002C39r 3               
002C39r 3  B5 00                        lda 0,x
002C3Br 3                       .ifdef lcd_print
002C3Br 3                               jsr lcd_print
002C3Br 3                       .endif
002C3Br 3  E8                           inx
002C3Cr 3  E8                           inx
002C3Dr 3  60           z_lcdput: rts
002C3Er 3               
002C3Er 3               
002C3Er 3               ; ## LCDPRINT ( addr u -- ) "Print string to LCD"
002C3Er 3               ; ## "lcdprint"  coded Custom
002C3Er 3               
002C3Er 3               xt_lcdprint:
002C3Er 3  20 rr rr                     jsr underflow_2
002C41r 3               
002C41r 3                               ; Save the starting address into tmp1
002C41r 3  B5 02                        lda 2,x
002C43r 3  85 rr                        sta tmp1
002C45r 3  B5 03                        lda 3,x
002C47r 3  85 rr                        sta tmp1+1
002C49r 3               @loop:
002C49r 3                               ; done if length is zero
002C49r 3  B5 00                        lda 0,x
002C4Br 3  15 01                        ora 1,x
002C4Dr 3  F0 12                        beq @done
002C4Fr 3               
002C4Fr 3                               ; Send the current character
002C4Fr 3  B2 rr                        lda (tmp1)
002C51r 3                       .ifdef lcd_print
002C51r 3                               jsr lcd_print      ; avoids stack foolery
002C51r 3                       .endif
002C51r 3                               ; Move the address along (in tmp1)
002C51r 3  E6 rr                        inc tmp1
002C53r 3  D0 02                        bne @1
002C55r 3  E6 rr                        inc tmp1+1
002C57r 3               @1:
002C57r 3                               ; Reduce the count (on the data stack)
002C57r 3  B5 00                        lda 0,x
002C59r 3  D0 02                        bne @2
002C5Br 3  D6 01                        dec 1,x
002C5Dr 3               @2:
002C5Dr 3  D6 00                        dec 0,x
002C5Fr 3               
002C5Fr 3  80 E8                        bra @loop
002C61r 3               @done:
002C61r 3  E8                           inx
002C62r 3  E8                           inx
002C63r 3  E8                           inx
002C64r 3  E8                           inx
002C65r 3               
002C65r 3  60           z_lcdprint:         rts
002C66r 3               
002C66r 3               
002C66r 3               
002C66r 3               ; ## CLS ( -- ) "clea VGA screen"
002C66r 3               ; ## "cls" coded Custom
002C66r 3               xt_cls:
002C66r 3                       .ifdef vga_clear
002C66r 3                               jsr vga_clear
002C66r 3                       .endif
002C66r 3               
002C66r 3  60           z_cls: rts
002C67r 3               
002C67r 3               
002C67r 3               ; ## SPI_INIT ( -- ) "Init SPI system"
002C67r 3               ; ## "spi_init" coded Custom
002C67r 3               xt_spi_init:
002C67r 3               .ifdef VIA1_BASE
002C67r 3  20 rr rr                     jsr spi_init
002C6Ar 3               .endif
002C6Ar 3  60           z_spi_init: rts
002C6Br 3               
002C6Br 3               
002C6Br 3               ; ## SPI_CLK_TOGGLE ( -- ) "Toggle SPI clock"
002C6Br 3               ; ## "spi_clk_toggle" coded Custom
002C6Br 3               xt_spi_clk_toggle:
002C6Br 3               .ifdef VIA1_BASE
002C6Br 3  20 rr rr                     jsr spi_clk_toggle
002C6Er 3               .endif
002C6Er 3  60           z_spi_clk_toggle: rts
002C6Fr 3               
002C6Fr 3               ; ## SPI_SELECT ( s -- ) "Select SPI slave"
002C6Fr 3               ; ## "spi_select" coded Custom
002C6Fr 3               xt_spi_select:
002C6Fr 3               .ifdef VIA1_BASE
002C6Fr 3  20 rr rr                     jsr underflow_1
002C72r 3               
002C72r 3  B5 00                        lda 0,x
002C74r 3               
002C74r 3  20 rr rr                     jsr spi_select
002C77r 3               
002C77r 3  E8                           inx
002C78r 3  E8                           inx
002C79r 3               .endif
002C79r 3  60           z_spi_select: rts
002C7Ar 3               
002C7Ar 3               ; ## SPI_TRANSCEIVE ( s -- u ) "Send and receive spi data"
002C7Ar 3               ; ## "spi_transceive" coded Custom
002C7Ar 3               xt_spi_transceive:
002C7Ar 3               .ifdef VIA1_BASE
002C7Ar 3  20 rr rr                     jsr underflow_1
002C7Dr 3               
002C7Dr 3  B5 00                        lda 0,x
002C7Fr 3               
002C7Fr 3  20 rr rr                     jsr spi_transceive
002C82r 3               
002C82r 3  95 00                        sta 0,x         ; put return value in TOS
002C84r 3  74 01                        stz 1,X         ;reset value there
002C86r 3               .endif
002C86r 3  60           z_spi_transceive: rts
002C87r 3               
002C87r 3               ; ## SD_INIT ( s -- u ) "Send and receive spi data"
002C87r 3               ; ## "sd_init" coded Custom
002C87r 3               xt_sd_init:
002C87r 3               .ifdef SD
002C87r 3                               jsr underflow_1
002C87r 3               
002C87r 3                               lda 0,x
002C87r 3                               jsr sd_init
002C87r 3                               beq @ok
002C87r 3                               pha
002C87r 3                               printascii sd_init_error_message
002C87r 3                               pla
002C87r 3               @ok:
002C87r 3                               sta 0,x         ; put return value in TOS
002C87r 3                               stz 1,X         ;reset value there
002C87r 3               .endif
002C87r 3  60           z_sd_init: rts
002C88r 3               
002C88r 3               ; ## SD_READSECTOR ( addr d -- u ) "Read SD sector"
002C88r 3               ; ## "sd_readsector" coded Custom
002C88r 3               xt_sd_readsector:
002C88r 3               
002C88r 3               .ifdef SD
002C88r 3                               jsr underflow_2
002C88r 3                               ; get and save sector number (32 bit number, double)
002C88r 3                               ; most significant part is TOS
002C88r 3                               lda 0, x
002C88r 3                               sta IO_SECTOR + 2
002C88r 3                               lda 1, x
002C88r 3                               sta IO_SECTOR + 3
002C88r 3                               ; least significant part is NOS
002C88r 3                               lda 2, x
002C88r 3                               sta IO_SECTOR + 0
002C88r 3                               lda 3, x
002C88r 3                               sta IO_SECTOR + 1
002C88r 3                               lda #1
002C88r 3                               sta SD_CRC
002C88r 3               
002C88r 3                               jsr sd_readsector
002C88r 3                               sta 0,x         ; put return value in TOS
002C88r 3                               stz 1,X         ;reset value there
002C88r 3               
002C88r 3                               inx
002C88r 3                               inx
002C88r 3               .endif
002C88r 3  60           z_sd_readsector: rts
002C89r 3               
002C89r 3               
002C89r 3               ; ## time ( -- addr ) "get time storage address"
002C89r 3               ; ## "time" coded Custom
002C89r 3               xt_time:
002C89r 3                       .ifdef time
002C89r 3  A9 rr                lda #time
002C8Br 3                       .else
002C8Br 3                       lda #0
002C8Br 3                       .endif
002C8Br 3  CA                   dex
002C8Cr 3  CA                   dex
002C8Dr 3  95 00                sta 0,x
002C8Fr 3  74 01                stz 1,x
002C91r 3               
002C91r 3               
002C91r 3  60           z_time: rts
002C92r 3               
002C92r 3               
002C92r 3               xt_cf_info:
002C92r 3               .ifdef CF_ADDRESS
002C92r 3  20 rr rr             jsr cf_info
002C95r 3  20 rr rr             jsr xt_cr
002C98r 3  20 rr rr             jsr cf_print_id
002C9Br 3  20 rr rr             jsr cf_print_capacity
002C9Er 3               .endif
002C9Er 3               z_cf_info:
002C9Er 3  60                   rts
002C9Fr 3               
002C9Fr 3               xt_io_readblock:
002C9Fr 3               .ifdef io_read_sector_address
002C9Fr 3                       ; block-read ( addr blk# -- )
002C9Fr 3  B5 02                lda 2, x
002CA1r 3  85 rr                sta io_buffer_ptr
002CA3r 3  B5 03                lda 3, x
002CA5r 3  85 rr                sta io_buffer_ptr + 1
002CA7r 3  B5 00                lda 0, x
002CA9r 3  8D rr rr             sta IO_SECTOR
002CACr 3  B5 01                lda 1, x
002CAEr 3  8D rr rr             sta IO_SECTOR + 1
002CB1r 3  9C rr rr             stz IO_SECTOR + 2
002CB4r 3  9C rr rr             stz IO_SECTOR + 3
002CB7r 3               
002CB7r 3  0E rr rr             asl IO_SECTOR                   ; multiply by two to get first sector number
002CBAr 3  2E rr rr             rol IO_SECTOR + 1
002CBDr 3  2E rr rr             rol IO_SECTOR + 2
002CC0r 3               
002CC0r 3                       ; lda io_buffer_ptr
002CC0r 3                       ; sta 0, x
002CC0r 3                       ; lda io_buffer_ptr + 1
002CC0r 3                       ; sta 1, x
002CC0r 3                       ; jsr xt_dot
002CC0r 3               
002CC0r 3  20 rr rr             jsr io_read_sector
002CC3r 3  EE rr rr D0          inc32 IO_SECTOR
002CC7r 3  0D EE rr rr  
002CCBr 3  D0 08 EE rr  
002CD5r 3  E6 rr                inc io_buffer_ptr + 1
002CD7r 3  E6 rr                inc io_buffer_ptr + 1
002CD9r 3  20 rr rr             jsr io_read_sector
002CDCr 3                       ; lda io_buffer_ptr
002CDCr 3                       ; sta 0, x
002CDCr 3                       ; lda io_buffer_ptr + 1
002CDCr 3                       ; sta 1, x
002CDCr 3                       ; jsr xt_dot
002CDCr 3               
002CDCr 3  E8                   inx
002CDDr 3  E8                   inx
002CDEr 3               
002CDEr 3               .endif
002CDEr 3               z_io_readblock:
002CDEr 3  60                   rts
002CDFr 3               
002CDFr 3               xt_io_writeblock:
002CDFr 3               .ifdef io_read_sector_address
002CDFr 3                       ; block-write ( addr blk# -- )
002CDFr 3  B5 02                lda 2, x
002CE1r 3  85 rr                sta io_buffer_ptr
002CE3r 3  B5 03                lda 3, x
002CE5r 3  85 rr                sta io_buffer_ptr + 1
002CE7r 3  B5 00                lda 0, x
002CE9r 3  8D rr rr             sta IO_SECTOR
002CECr 3  B5 01                lda 1, x
002CEEr 3  8D rr rr             sta IO_SECTOR + 1
002CF1r 3  9C rr rr             stz IO_SECTOR + 2
002CF4r 3  9C rr rr             stz IO_SECTOR + 3
002CF7r 3               
002CF7r 3  0E rr rr             asl IO_SECTOR                   ; multiply by two to get first sector number
002CFAr 3  2E rr rr             rol IO_SECTOR + 1
002CFDr 3  2E rr rr             rol IO_SECTOR + 2
002D00r 3               
002D00r 3  20 rr rr             jsr io_write_sector
002D03r 3  EE rr rr D0          inc32 IO_SECTOR
002D07r 3  0D EE rr rr  
002D0Br 3  D0 08 EE rr  
002D15r 3  E6 rr                inc io_buffer_ptr + 1
002D17r 3  E6 rr                inc io_buffer_ptr + 1
002D19r 3  20 rr rr             jsr io_write_sector
002D1Cr 3               
002D1Cr 3               
002D1Cr 3                       ; inc io_buffer_ptr + 1           ; jump two pages forward
002D1Cr 3                       ; inc io_buffer_ptr + 1
002D1Cr 3                       ; jsr io_write_sector
002D1Cr 3  E8                   inx
002D1Dr 3  E8                   inx
002D1Er 3                       ; inx
002D1Er 3                       ; inx
002D1Er 3               .endif
002D1Er 3               z_io_writeblock:
002D1Er 3  60                   rts
002D1Fr 3               ; END
002D1Fr 3               
002D1Fr 3               
002D1Fr 2                   .include "headers.s"          ; Headers of native words
002D1Fr 3               ; Dictionary Headers for Tali Forth 2
002D1Fr 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
002D1Fr 3               ; First version: 05. Dec 2016 (Liara Forth)
002D1Fr 3               ; This version: 29. Dec 2018
002D1Fr 3               
002D1Fr 3               ; Dictionary headers are kept separately from the code, which allows various
002D1Fr 3               ; tricks in the code. We roughly follow the Gforth terminology: The Execution
002D1Fr 3               ; Token (xt) is the address of the first byte of a word's code that can be, uh,
002D1Fr 3               ; executed; the Name Token (nt) is a pointer to the beginning of the word's
002D1Fr 3               ; header in the Dictionary. There the link to the next word in the Dictionary
002D1Fr 3               ; is always one cell down from the current word's own nt. In the code itself,
002D1Fr 3               ; we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.
002D1Fr 3               
002D1Fr 3               ; This gives us the following header structure:
002D1Fr 3               
002D1Fr 3               ;              8 bit     8 bit
002D1Fr 3               ;               LSB       MSB
002D1Fr 3               ; nt_word ->  +--------+--------+
002D1Fr 3               ;          +0 | Length | Status |
002D1Fr 3               ;             +--------+--------+
002D1Fr 3               ;          +2 | Next Header     | -> nt_next_word
002D1Fr 3               ;             +-----------------+
002D1Fr 3               ;          +4 | Start of Code   | -> xt_word
002D1Fr 3               ;             +-----------------+
002D1Fr 3               ;          +6 | End of Code     | -> z_word
002D1Fr 3               ;             +--------+--------+
002D1Fr 3               ;          +8 | Name   |        |
002D1Fr 3               ;             +--------+--------+
002D1Fr 3               ;             |        |        |
002D1Fr 3               ;             +--------+--------+
002D1Fr 3               ;             |        |  ...   | (name string does not end with a zero)
002D1Fr 3               ;          +n +--------+--------+
002D1Fr 3               
002D1Fr 3               ; The Status Byte is created by adding the flags defined in definitions.asm,
002D1Fr 3               ; which are:
002D1Fr 3               
002D1Fr 3               ;       CO - Compile Only
002D1Fr 3               ;       IM - Immediate Word
002D1Fr 3               ;       NN - Never Native Compile (must always be called by JSR)
002D1Fr 3               ;       AN - Always Native Compile (may not be called by JSR)
002D1Fr 3               ;       UF - Contains underflow check
002D1Fr 3               ;       HC - Has CFA (words created by CREATE and DOES> only)
002D1Fr 3               
002D1Fr 3               ; Note there are currently two bits unused.
002D1Fr 3               
002D1Fr 3               ; By default, all existing words can be natively compiled (compiled inline) or
002D1Fr 3               ; as a subroutine jump target; the system decides which variant to use based on
002D1Fr 3               ; a threshold the user can set. By default, all user-created words are flagged
002D1Fr 3               ; never-native. The user can override this by using the always-native word
002D1Fr 3               ; just after defining their new word.  The NN flag forbids native compiling,
002D1Fr 3               ; the AN flag forces it.
002D1Fr 3               
002D1Fr 3               ; The last word (top word in code) is always BYE. It is marked as the last word
002D1Fr 3               ; by its value of 0000 in its Next Header field. The words are sorted with the
002D1Fr 3               ; more common ones first (further down in code) so they are found earlier.
002D1Fr 3               ; Anything to do with output comes later (further up) because things will
002D1Fr 3               ; always be slow if there is a human involved.
002D1Fr 3               
002D1Fr 3               ; The initial skeleton of this list was automatically generated by a script
002D1Fr 3               ; in the tools folder and then sorted by hand.
002D1Fr 3               
002D1Fr 3               nt_bye:
002D1Fr 3  03                   .byte 3         ; length of word strings
002D20r 3  00                   .byte 0         ; status byte
002D21r 3  00 00                .word 0000      ; next word in Dictionary, 0000 signals end
002D23r 3  rr rr                .word xt_bye    ; start of code block (xt of this word)
002D25r 3  rr rr                .word z_bye     ; end of code (RTS)
002D27r 3  62 79 65             .byte "bye"     ; word name, always lower case, not zero-terminated
002D2Ar 3               
002D2Ar 3               
002D2Ar 3               nt_cold:
002D2Ar 3  04 00                .byte 4, 0
002D2Cr 3  rr rr rr rr          .word nt_bye, xt_cold, z_cold
002D30r 3  rr rr        
002D32r 3  63 6F 6C 64          .byte "cold"
002D36r 3               
002D36r 3               nt_lcdput:
002D36r 3  06 10                .byte 6, UF
002D38r 3  rr rr rr rr          .word nt_cold, xt_lcdput, z_lcdput
002D3Cr 3  rr rr        
002D3Er 3  6C 63 64 70          .byte "lcdput"
002D42r 3  75 74        
002D44r 3               
002D44r 3               nt_lcdprint:
002D44r 3  08 10                .byte 8, UF
002D46r 3  rr rr rr rr          .word nt_lcdput, xt_lcdprint, z_lcdprint
002D4Ar 3  rr rr        
002D4Cr 3  6C 63 64 70          .byte "lcdprint"
002D50r 3  72 69 6E 74  
002D54r 3               
002D54r 3               nt_cls:
002D54r 3  03 00                .byte 3, 0
002D56r 3  rr rr rr rr          .word nt_lcdprint, xt_cls, z_cls
002D5Ar 3  rr rr        
002D5Cr 3  63 6C 73             .byte "cls"
002D5Fr 3               
002D5Fr 3               .ifdef VIA1_BASE
002D5Fr 3               nt_spi_init:
002D5Fr 3  08 00                .byte 8, 0
002D61r 3  rr rr rr rr          .word nt_cls, xt_spi_init, z_spi_init
002D65r 3  rr rr        
002D67r 3  73 70 69 5F          .byte "spi_init"
002D6Br 3  69 6E 69 74  
002D6Fr 3               
002D6Fr 3               
002D6Fr 3               nt_spi_clk_toggle:
002D6Fr 3  0E 00                .byte 14, 0
002D71r 3  rr rr rr rr          .word nt_spi_init, xt_spi_clk_toggle, z_spi_clk_toggle
002D75r 3  rr rr        
002D77r 3  73 70 69 5F          .byte "spi_clk_toggle"
002D7Br 3  63 6C 6B 5F  
002D7Fr 3  74 6F 67 67  
002D85r 3               
002D85r 3               nt_spi_select:
002D85r 3  0A 00                .byte 10, 0
002D87r 3  rr rr rr rr          .word nt_spi_clk_toggle, xt_spi_select, z_spi_select
002D8Br 3  rr rr        
002D8Dr 3  73 70 69 5F          .byte "spi_select"
002D91r 3  73 65 6C 65  
002D95r 3  63 74        
002D97r 3               
002D97r 3               nt_spi_transceive:
002D97r 3  0E 00                .byte 14, 0
002D99r 3  rr rr rr rr          .word nt_spi_select, xt_spi_transceive, z_spi_transceive
002D9Dr 3  rr rr        
002D9Fr 3  73 70 69 5F          .byte "spi_transceive"
002DA3r 3  74 72 61 6E  
002DA7r 3  73 63 65 69  
002DADr 3               .endif
002DADr 3               
002DADr 3               
002DADr 3               .ifdef CF_ADDRESS
002DADr 3               nt_cf_info:
002DADr 3  04 00                .byte 4, 0
002DAFr 3                       .ifdef VIA1_BASE
002DAFr 3  rr rr rr rr          .word nt_spi_select, xt_cf_info, z_cf_info
002DB3r 3  rr rr        
002DB5r 3                       .else
002DB5r 3                       .word nt_cls, xt_cf_info, z_cf_info
002DB5r 3                       .endif
002DB5r 3  69 6E 66 6F          .byte "info"
002DB9r 3               .endif
002DB9r 3               .ifdef io_read_sector_address
002DB9r 3               nt_io_readblock:
002DB9r 3  02 00                .byte 2, 0
002DBBr 3                       .ifdef CF_ADDRESS
002DBBr 3  rr rr rr rr          .word nt_cf_info, xt_io_readblock, z_io_readblock
002DBFr 3  rr rr        
002DC1r 3                       .elseif .def(VIA1_BASE)
002DC1r 3                       .word nt_spi_transceive, xt_io_readblock, z_io_readblock
002DC1r 3                       .else
002DC1r 3                       .word nt_cls, xt_io_readblock, z_io_readblock
002DC1r 3                       .endif
002DC1r 3  72 62                .byte "rb"
002DC3r 3               nt_io_writeblock:
002DC3r 3  02 00                .byte 2, 0
002DC5r 3  rr rr rr rr          .word nt_io_readblock, xt_io_writeblock, z_io_writeblock
002DC9r 3  rr rr        
002DCBr 3  77 62                .byte "wb"
002DCDr 3               .endif
002DCDr 3               nt_time:
002DCDr 3  04 00                .byte 4, 0
002DCFr 3               .ifdef io_read_sector_address
002DCFr 3  rr rr rr rr          .word nt_io_writeblock, xt_time, z_time
002DD3r 3  rr rr        
002DD5r 3               .elseif .def(CF_ADDRESS)
002DD5r 3                       .word nt_cf_info, xt_time, z_time
002DD5r 3               .elseif .def(VIA1_BASE)
002DD5r 3                       .word nt_spi_transceive, xt_time, z_time
002DD5r 3               .else
002DD5r 3                       .word nt_cls, xt_time, z_time
002DD5r 3               .endif
002DD5r 3  74 69 6D 65          .byte "time"
002DD9r 3               
002DD9r 3               nt_ed:                  ; ed6502
002DD9r 3  02 08                .byte 2, NN
002DDBr 3  rr rr rr rr          .word nt_time, xt_ed, z_ed
002DDFr 3  rr rr        
002DE1r 3  65 64                .byte "ed"
002DE3r 3               
002DE3r 3  03 08        nt_see: .byte 3, NN
002DE5r 3  rr rr rr rr          .word nt_ed, xt_see, z_see
002DE9r 3  rr rr        
002DEBr 3  73 65 65             .byte "see"
002DEEr 3               
002DEEr 3               nt_forth:
002DEEr 3  05 00                .byte 5, 0
002DF0r 3  rr rr rr rr          .word nt_see, xt_forth, z_forth
002DF4r 3  rr rr        
002DF6r 3  66 6F 72 74          .byte "forth"
002DFAr 3  68           
002DFBr 3               
002DFBr 3               nt_order:
002DFBr 3  05 00                .byte 5, 0
002DFDr 3  rr rr rr rr          .word nt_forth, xt_order, z_order
002E01r 3  rr rr        
002E03r 3  6F 72 64 65          .byte "order"
002E07r 3  72           
002E08r 3               
002E08r 3               nt_to_order:
002E08r 3  06 00                .byte 6, 0
002E0Ar 3  rr rr rr rr          .word nt_order, xt_to_order, z_to_order
002E0Er 3  rr rr        
002E10r 3  3E 6F 72 64          .byte ">order"
002E14r 3  65 72        
002E16r 3               
002E16r 3               nt_previous:
002E16r 3  08 00                .byte 8, 0
002E18r 3  rr rr rr rr          .word nt_to_order, xt_previous, z_previous
002E1Cr 3  rr rr        
002E1Er 3  70 72 65 76          .byte "previous"
002E22r 3  69 6F 75 73  
002E26r 3               
002E26r 3               nt_also:
002E26r 3  04 00                .byte 4, 0
002E28r 3  rr rr rr rr          .word nt_previous, xt_also, z_also
002E2Cr 3  rr rr        
002E2Er 3  61 6C 73 6F          .byte "also"
002E32r 3               
002E32r 3               nt_only:
002E32r 3  04 00                .byte 4, 0
002E34r 3  rr rr rr rr          .word nt_also, xt_only, z_only
002E38r 3  rr rr        
002E3Ar 3  6F 6E 6C 79          .byte "only"
002E3Er 3               
002E3Er 3               nt_forth_wordlist:      ; shares code with ZERO
002E3Er 3  0E 00                .byte 14, 0
002E40r 3  rr rr rr rr          .word nt_only, xt_forth_wordlist, z_forth_wordlist
002E44r 3  rr rr        
002E46r 3  66 6F 72 74          .byte "forth-wordlist"
002E4Ar 3  68 2D 77 6F  
002E4Er 3  72 64 6C 69  
002E54r 3               
002E54r 3               nt_editor_wordlist:     ; shares code with ONE
002E54r 3  0F 00                .byte 15, 0
002E56r 3  rr rr rr rr          .word nt_forth_wordlist, xt_editor_wordlist, z_editor_wordlist
002E5Ar 3  rr rr        
002E5Cr 3  65 64 69 74          .byte "editor-wordlist"
002E60r 3  6F 72 2D 77  
002E64r 3  6F 72 64 6C  
002E6Br 3               
002E6Br 3               nt_assembler_wordlist:  ; shares code with TWO
002E6Br 3  12 00                .byte 18, 0
002E6Dr 3  rr rr rr rr          .word nt_editor_wordlist, xt_assembler_wordlist, z_assembler_wordlist
002E71r 3  rr rr        
002E73r 3  61 73 73 65          .byte "assembler-wordlist"
002E77r 3  6D 62 6C 65  
002E7Br 3  72 2D 77 6F  
002E85r 3               
002E85r 3               nt_root_wordlist:
002E85r 3  0D 00                .byte 13, 0
002E87r 3  rr rr rr rr          .word nt_assembler_wordlist, xt_root_wordlist, z_root_wordlist
002E8Br 3  rr rr        
002E8Dr 3  72 6F 6F 74          .byte "root-wordlist"
002E91r 3  2D 77 6F 72  
002E95r 3  64 6C 69 73  
002E9Ar 3               
002E9Ar 3               nt_get_order:
002E9Ar 3  09 00                .byte 9, 0
002E9Cr 3  rr rr rr rr          .word nt_root_wordlist, xt_get_order, z_get_order
002EA0r 3  rr rr        
002EA2r 3  67 65 74 2D          .byte "get-order"
002EA6r 3  6F 72 64 65  
002EAAr 3  72           
002EABr 3               
002EABr 3               nt_set_order:
002EABr 3  09 00                .byte 9, 0
002EADr 3  rr rr rr rr          .word nt_get_order, xt_set_order, z_set_order
002EB1r 3  rr rr        
002EB3r 3  73 65 74 2D          .byte "set-order"
002EB7r 3  6F 72 64 65  
002EBBr 3  72           
002EBCr 3               
002EBCr 3               nt_get_current:
002EBCr 3  0B 00                .byte 11, 0
002EBEr 3  rr rr rr rr          .word nt_set_order, xt_get_current, z_get_current
002EC2r 3  rr rr        
002EC4r 3  67 65 74 2D          .byte "get-current"
002EC8r 3  63 75 72 72  
002ECCr 3  65 6E 74     
002ECFr 3               
002ECFr 3               nt_set_current:
002ECFr 3  0B 10                .byte 11, UF
002ED1r 3  rr rr rr rr          .word nt_get_current, xt_set_current, z_set_current
002ED5r 3  rr rr        
002ED7r 3  73 65 74 2D          .byte "set-current"
002EDBr 3  63 75 72 72  
002EDFr 3  65 6E 74     
002EE2r 3               
002EE2r 3               nt_search_wordlist:
002EE2r 3  0F 10                .byte 15, UF
002EE4r 3  rr rr rr rr          .word nt_set_current, xt_search_wordlist, z_search_wordlist
002EE8r 3  rr rr        
002EEAr 3  73 65 61 72          .byte "search-wordlist"
002EEEr 3  63 68 2D 77  
002EF2r 3  6F 72 64 6C  
002EF9r 3               
002EF9r 3               nt_wordlist:
002EF9r 3  08 00                .byte 8, 0
002EFBr 3  rr rr rr rr          .word nt_search_wordlist, xt_wordlist, z_wordlist
002EFFr 3  rr rr        
002F01r 3  77 6F 72 64          .byte "wordlist"
002F05r 3  6C 69 73 74  
002F09r 3               
002F09r 3               nt_definitions:
002F09r 3  0B 00                .byte 11, 0
002F0Br 3  rr rr rr rr          .word nt_wordlist, xt_definitions, z_definitions
002F0Fr 3  rr rr        
002F11r 3  64 65 66 69          .byte "definitions"
002F15r 3  6E 69 74 69  
002F19r 3  6F 6E 73     
002F1Cr 3               
002F1Cr 3               nt_block_ramdrive_init:
002F1Cr 3  13 10                .byte 19, UF
002F1Er 3  rr rr rr rr          .word nt_definitions, xt_block_ramdrive_init, z_block_ramdrive_init
002F22r 3  rr rr        
002F24r 3  62 6C 6F 63          .byte "block-ramdrive-init"
002F28r 3  6B 2D 72 61  
002F2Cr 3  6D 64 72 69  
002F37r 3               
002F37r 3               nt_list:
002F37r 3  04 10                .byte 4, UF
002F39r 3  rr rr rr rr          .word nt_block_ramdrive_init, xt_list, z_list
002F3Dr 3  rr rr        
002F3Fr 3  6C 69 73 74          .byte "list"
002F43r 3               
002F43r 3               nt_thru:
002F43r 3  04 10                .byte 4, UF
002F45r 3  rr rr rr rr          .word nt_list, xt_thru, z_thru
002F49r 3  rr rr        
002F4Br 3  74 68 72 75          .byte "thru"
002F4Fr 3               
002F4Fr 3               nt_load:
002F4Fr 3  04 10                .byte 4, UF
002F51r 3  rr rr rr rr          .word nt_thru, xt_load, z_load
002F55r 3  rr rr        
002F57r 3  6C 6F 61 64          .byte "load"
002F5Br 3               
002F5Br 3               nt_flush:
002F5Br 3  05 00                .byte 5, 0
002F5Dr 3  rr rr rr rr          .word nt_load, xt_flush, z_flush
002F61r 3  rr rr        
002F63r 3  66 6C 75 73          .byte "flush"
002F67r 3  68           
002F68r 3               
002F68r 3               nt_empty_buffers:
002F68r 3  0D 00                .byte 13, 0
002F6Ar 3  rr rr rr rr          .word nt_flush, xt_empty_buffers, z_empty_buffers
002F6Er 3  rr rr        
002F70r 3  65 6D 70 74          .byte "empty-buffers"
002F74r 3  79 2D 62 75  
002F78r 3  66 66 65 72  
002F7Dr 3               
002F7Dr 3               nt_buffer:
002F7Dr 3  06 00                .byte 6, 0
002F7Fr 3  rr rr rr rr          .word nt_empty_buffers, xt_buffer, z_buffer
002F83r 3  rr rr        
002F85r 3  62 75 66 66          .byte "buffer"
002F89r 3  65 72        
002F8Br 3               
002F8Br 3               nt_update:
002F8Br 3  06 00                .byte 6, 0
002F8Dr 3  rr rr rr rr          .word nt_buffer, xt_update, z_update
002F91r 3  rr rr        
002F93r 3  75 70 64 61          .byte "update"
002F97r 3  74 65        
002F99r 3               
002F99r 3               nt_block:
002F99r 3  05 00                .byte 5, 0
002F9Br 3  rr rr rr rr          .word nt_update, xt_block, z_block
002F9Fr 3  rr rr        
002FA1r 3  62 6C 6F 63          .byte "block"
002FA5r 3  6B           
002FA6r 3               
002FA6r 3               nt_save_buffers:
002FA6r 3  0C 00                .byte 12, 0
002FA8r 3  rr rr rr rr          .word nt_block, xt_save_buffers, z_save_buffers
002FACr 3  rr rr        
002FAEr 3  73 61 76 65          .byte "save-buffers"
002FB2r 3  2D 62 75 66  
002FB6r 3  66 65 72 73  
002FBAr 3               
002FBAr 3               nt_block_read_vector:
002FBAr 3  11 28                .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
002FBCr 3  rr rr rr rr          .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
002FC0r 3  rr rr        
002FC2r 3  62 6C 6F 63          .byte "block-read-vector"
002FC6r 3  6B 2D 72 65  
002FCAr 3  61 64 2D 76  
002FD3r 3               
002FD3r 3               nt_block_read:
002FD3r 3  0A 28                .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
002FD5r 3  rr rr rr rr          .word nt_block_read_vector, xt_block_read, z_block_read
002FD9r 3  rr rr        
002FDBr 3  62 6C 6F 63          .byte "block-read"
002FDFr 3  6B 2D 72 65  
002FE3r 3  61 64        
002FE5r 3               
002FE5r 3               nt_block_write_vector:
002FE5r 3  12 08                .byte 18, NN ; Deferred words need the HC (Code Field) flag.
002FE7r 3  rr rr rr rr          .word nt_block_read, xt_block_write_vector, z_block_write_vector
002FEBr 3  rr rr        
002FEDr 3  62 6C 6F 63          .byte "block-write-vector"
002FF1r 3  6B 2D 77 72  
002FF5r 3  69 74 65 2D  
002FFFr 3               
002FFFr 3               nt_block_write:
002FFFr 3  0B 08                .byte 11, NN ; Deferred words need the HC (Code Field) flag.
003001r 3  rr rr rr rr          .word nt_block_write_vector, xt_block_write, z_block_write
003005r 3  rr rr        
003007r 3  62 6C 6F 63          .byte "block-write"
00300Br 3  6B 2D 77 72  
00300Fr 3  69 74 65     
003012r 3               
003012r 3               nt_blk:
003012r 3  03 00                .byte 3, 0
003014r 3  rr rr rr rr          .word nt_block_write, xt_blk, z_blk
003018r 3  rr rr        
00301Ar 3  62 6C 6B             .byte "blk"
00301Dr 3               
00301Dr 3               nt_scr:
00301Dr 3  03 00                .byte 3, 0
00301Fr 3  rr rr rr rr          .word nt_blk, xt_scr, z_scr
003023r 3  rr rr        
003025r 3  73 63 72             .byte "scr"
003028r 3               
003028r 3               nt_blkbuffer:
003028r 3  09 00                .byte 9, 0
00302Ar 3  rr rr rr rr          .word nt_scr, xt_blkbuffer, z_blkbuffer
00302Er 3  rr rr        
003030r 3  62 6C 6B 62          .byte "blkbuffer"
003034r 3  75 66 66 65  
003038r 3  72           
003039r 3               
003039r 3               nt_buffblocknum:
003039r 3  0C 00                .byte 12, 0
00303Br 3  rr rr rr rr          .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
00303Fr 3  rr rr        
003041r 3  62 75 66 66          .byte "buffblocknum"
003045r 3  62 6C 6F 63  
003049r 3  6B 6E 75 6D  
00304Dr 3               
00304Dr 3               nt_buffstatus:
00304Dr 3  0A 00                .byte 10, 0
00304Fr 3  rr rr rr rr          .word nt_buffblocknum, xt_buffstatus, z_buffstatus
003053r 3  rr rr        
003055r 3  62 75 66 66          .byte "buffstatus"
003059r 3  73 74 61 74  
00305Dr 3  75 73        
00305Fr 3               
00305Fr 3               nt_buffer_colon:
00305Fr 3  07 00                .byte 7, 0
003061r 3  rr rr rr rr          .word nt_buffstatus, xt_buffer_colon, z_buffer_colon
003065r 3  rr rr        
003067r 3  62 75 66 66          .byte "buffer:"
00306Br 3  65 72 3A     
00306Er 3               
00306Er 3               nt_useraddr:
00306Er 3  08 00                .byte 8, 0
003070r 3  rr rr rr rr          .word nt_buffer_colon, xt_useraddr, z_useraddr
003074r 3  rr rr        
003076r 3  75 73 65 72          .byte "useraddr"
00307Ar 3  61 64 64 72  
00307Er 3               
00307Er 3               nt_action_of:
00307Er 3  09 04                .byte 9, IM
003080r 3  rr rr rr rr          .word nt_useraddr, xt_action_of, z_action_of
003084r 3  rr rr        
003086r 3  61 63 74 69          .byte "action-of"
00308Ar 3  6F 6E 2D 6F  
00308Er 3  66           
00308Fr 3               
00308Fr 3               nt_is:
00308Fr 3  02 04                .byte 2, IM
003091r 3  rr rr rr rr          .word nt_action_of, xt_is, z_is
003095r 3  rr rr        
003097r 3  69 73                .byte "is"
003099r 3               
003099r 3               nt_defer_store:
003099r 3  06 00                .byte 6, 0
00309Br 3  rr rr rr rr          .word nt_is, xt_defer_store, z_defer_store
00309Fr 3  rr rr        
0030A1r 3  64 65 66 65          .byte "defer!"
0030A5r 3  72 21        
0030A7r 3               
0030A7r 3               nt_defer_fetch:
0030A7r 3  06 00                .byte 6, 0
0030A9r 3  rr rr rr rr          .word nt_defer_store, xt_defer_fetch, z_defer_fetch
0030ADr 3  rr rr        
0030AFr 3  64 65 66 65          .byte "defer@"
0030B3r 3  72 40        
0030B5r 3               
0030B5r 3               nt_endcase:
0030B5r 3  07 0D                .byte 7, IM+CO+NN
0030B7r 3  rr rr rr rr          .word nt_defer_fetch, xt_endcase, z_endcase
0030BBr 3  rr rr        
0030BDr 3  65 6E 64 63          .byte "endcase"
0030C1r 3  61 73 65     
0030C4r 3               
0030C4r 3               nt_endof:
0030C4r 3  05 0D                .byte 5, IM+CO+NN
0030C6r 3  rr rr rr rr          .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
0030CAr 3  rr rr        
0030CCr 3  65 6E 64 6F          .byte "endof"
0030D0r 3  66           
0030D1r 3               
0030D1r 3               nt_of:
0030D1r 3  02 0D                .byte 2, IM+CO+NN
0030D3r 3  rr rr rr rr          .word nt_endof, xt_of, z_of
0030D7r 3  rr rr        
0030D9r 3  6F 66                .byte "of"
0030DBr 3               
0030DBr 3               nt_case:
0030DBr 3  04 0D                .byte 4, IM+CO+NN
0030DDr 3  rr rr rr rr          .word nt_of, xt_case, z_case    ; shares code with ZERO
0030E1r 3  rr rr        
0030E3r 3  63 61 73 65          .byte "case"
0030E7r 3               
0030E7r 3               nt_while:
0030E7r 3  05 0D                .byte 5, IM+CO+NN
0030E9r 3  rr rr rr rr          .word nt_case, xt_while, z_while
0030EDr 3  rr rr        
0030EFr 3  77 68 69 6C          .byte "while"
0030F3r 3  65           
0030F4r 3               
0030F4r 3               nt_until:
0030F4r 3  05 0D                .byte 5, IM+CO+NN
0030F6r 3  rr rr rr rr          .word nt_while, xt_until, z_until
0030FAr 3  rr rr        
0030FCr 3  75 6E 74 69          .byte "until"
003100r 3  6C           
003101r 3               
003101r 3               nt_repeat:
003101r 3  06 0D                .byte 6, IM+CO+NN
003103r 3  rr rr rr rr          .word nt_until, xt_repeat, z_repeat
003107r 3  rr rr        
003109r 3  72 65 70 65          .byte "repeat"
00310Dr 3  61 74        
00310Fr 3               
00310Fr 3               nt_else:
00310Fr 3  04 0D                .byte 4, IM+CO+NN
003111r 3  rr rr rr rr          .word nt_repeat, xt_else, z_else
003115r 3  rr rr        
003117r 3  65 6C 73 65          .byte "else"
00311Br 3               
00311Br 3               nt_then:
00311Br 3  04 0D                .byte 4, IM+CO+NN
00311Dr 3  rr rr rr rr          .word nt_else, xt_then, z_then
003121r 3  rr rr        
003123r 3  74 68 65 6E          .byte "then"
003127r 3               
003127r 3               nt_if:
003127r 3  02 0D                .byte 2, IM+CO+NN
003129r 3  rr rr rr rr          .word nt_then, xt_if, z_if
00312Dr 3  rr rr        
00312Fr 3  69 66                .byte "if"
003131r 3               
003131r 3               nt_dot_paren:
003131r 3  02 04                .byte 2, IM
003133r 3  rr rr rr rr          .word nt_if, xt_dot_paren, z_dot_paren
003137r 3  rr rr        
003139r 3  2E 28                .byte ".("
00313Br 3               
00313Br 3               nt_paren:
00313Br 3  01 04                .byte 1, IM
00313Dr 3  rr rr rr rr          .word nt_dot_paren, xt_paren, z_paren
003141r 3  rr rr        
003143r 3  28                   .byte "("
003144r 3               
003144r 3               nt_word:
003144r 3  04 10                .byte 4, UF
003146r 3  rr rr rr rr          .word nt_paren, xt_word, z_word
00314Ar 3  rr rr        
00314Cr 3  77 6F 72 64          .byte "word"
003150r 3               
003150r 3               nt_find:
003150r 3  04 10                .byte 4, UF
003152r 3  rr rr rr rr          .word nt_word, xt_find, z_find
003156r 3  rr rr        
003158r 3  66 69 6E 64          .byte "find"
00315Cr 3               
00315Cr 3               nt_environment_q:
00315Cr 3  0C 10                .byte 12, UF
00315Er 3  rr rr rr rr          .word nt_find, xt_environment_q, z_environment_q
003162r 3  rr rr        
003164r 3  65 6E 76 69          .byte "environment?"
003168r 3  72 6F 6E 6D  
00316Cr 3  65 6E 74 3F  
003170r 3               
003170r 3               nt_search:
003170r 3  06 18                .byte 6, UF+NN
003172r 3  rr rr rr rr          .word nt_environment_q, xt_search, z_search
003176r 3  rr rr        
003178r 3  73 65 61 72          .byte "search"
00317Cr 3  63 68        
00317Er 3               
00317Er 3               nt_compare:
00317Er 3  07 10                .byte 7, UF
003180r 3  rr rr rr rr          .word nt_search, xt_compare, z_compare
003184r 3  rr rr        
003186r 3  63 6F 6D 70          .byte "compare"
00318Ar 3  61 72 65     
00318Dr 3               
00318Dr 3               nt_disasm:
00318Dr 3  06 10                .byte 6, UF
00318Fr 3  rr rr rr rr          .word nt_compare, xt_disasm, z_disasm
003193r 3  rr rr        
003195r 3  64 69 73 61          .byte "disasm"
003199r 3  73 6D        
00319Br 3               
00319Br 3               nt_dot_s:
00319Br 3  02 00                .byte 2, 0
00319Dr 3  rr rr rr rr          .word nt_disasm, xt_dot_s, z_dot_s
0031A1r 3  rr rr        
0031A3r 3  2E 73                .byte ".s"
0031A5r 3               
0031A5r 3               nt_dump:
0031A5r 3  04 10                .byte 4, UF
0031A7r 3  rr rr rr rr          .word nt_dot_s, xt_dump, z_dump
0031ABr 3  rr rr        
0031ADr 3  64 75 6D 70          .byte "dump"
0031B1r 3               
0031B1r 3               nt_bell:
0031B1r 3  04 00                .byte 4, 0
0031B3r 3  rr rr rr rr          .word nt_dump, xt_bell, z_bell
0031B7r 3  rr rr        
0031B9r 3  62 65 6C 6C          .byte "bell"
0031BDr 3               
0031BDr 3               nt_align:
0031BDr 3  05 00                .byte 5, 0
0031BFr 3  rr rr rr rr          .word nt_bell, xt_align, z_align
0031C3r 3  rr rr        
0031C5r 3  61 6C 69 67          .byte "align"
0031C9r 3  6E           
0031CAr 3               
0031CAr 3               nt_aligned:             ; same code as ALIGN
0031CAr 3  07 00                .byte 7, 0
0031CCr 3  rr rr rr rr          .word nt_align, xt_align, z_align
0031D0r 3  rr rr        
0031D2r 3  61 6C 69 67          .byte "aligned"
0031D6r 3  6E 65 64     
0031D9r 3               
0031D9r 3               nt_wordsize:
0031D9r 3  08 10                .byte 8, UF
0031DBr 3  rr rr rr rr          .word nt_aligned, xt_wordsize, z_wordsize
0031DFr 3  rr rr        
0031E1r 3  77 6F 72 64          .byte "wordsize"
0031E5r 3  73 69 7A 65  
0031E9r 3               
0031E9r 3               nt_words:
0031E9r 3  05 00                .byte 5, 0
0031EBr 3  rr rr rr rr          .word nt_wordsize, xt_words, z_words
0031EFr 3  rr rr        
0031F1r 3  77 6F 72 64          .byte "words"
0031F5r 3  73           
0031F6r 3               
0031F6r 3               nt_marker:
0031F6r 3  06 04                .byte 6, IM
0031F8r 3  rr rr rr rr          .word nt_words, xt_marker, z_marker
0031FCr 3  rr rr        
0031FEr 3  6D 61 72 6B          .byte "marker"
003202r 3  65 72        
003204r 3               
003204r 3               nt_at_xy:
003204r 3  05 10                .byte 5, UF
003206r 3  rr rr rr rr          .word nt_marker, xt_at_xy, z_at_xy
00320Ar 3  rr rr        
00320Cr 3  61 74 2D 78          .byte "at-xy"
003210r 3  79           
003211r 3               
003211r 3               nt_page:
003211r 3  04 00                .byte 4, 0
003213r 3  rr rr rr rr          .word nt_at_xy, xt_page, z_page
003217r 3  rr rr        
003219r 3  70 61 67 65          .byte "page"
00321Dr 3               
00321Dr 3               nt_cr:
00321Dr 3  02 00                .byte 2, 0
00321Fr 3  rr rr rr rr          .word nt_page, xt_cr, z_cr
003223r 3  rr rr        
003225r 3  63 72                .byte "cr"
003227r 3               
003227r 3               nt_input:
003227r 3  05 00                .byte 5, 0
003229r 3  rr rr rr rr          .word nt_cr, xt_input, z_input
00322Dr 3  rr rr        
00322Fr 3  69 6E 70 75          .byte "input"
003233r 3  74           
003234r 3               
003234r 3               nt_output:
003234r 3  06 00                .byte 6, 0
003236r 3  rr rr rr rr          .word nt_input, xt_output, z_output
00323Ar 3  rr rr        
00323Cr 3  6F 75 74 70          .byte "output"
003240r 3  75 74        
003242r 3               
003242r 3               nt_sign:
003242r 3  04 10                .byte 4, UF
003244r 3  rr rr rr rr          .word nt_output, xt_sign, z_sign
003248r 3  rr rr        
00324Ar 3  73 69 67 6E          .byte "sign"
00324Er 3               
00324Er 3               nt_hold:
00324Er 3  04 10                .byte 4, UF
003250r 3  rr rr rr rr          .word nt_sign, xt_hold, z_hold
003254r 3  rr rr        
003256r 3  68 6F 6C 64          .byte "hold"
00325Ar 3               
00325Ar 3               nt_number_sign_greater:
00325Ar 3  02 10                .byte 2, UF
00325Cr 3  rr rr rr rr          .word nt_hold, xt_number_sign_greater, z_number_sign_greater
003260r 3  rr rr        
003262r 3  23 3E                .byte "#>"
003264r 3               
003264r 3               nt_number_sign_s:
003264r 3  02 10                .byte 2, UF
003266r 3  rr rr rr rr          .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
00326Ar 3  rr rr        
00326Cr 3  23 73                .byte "#s"
00326Er 3               
00326Er 3               nt_number_sign:
00326Er 3  01 10                .byte 1, UF
003270r 3  rr rr rr rr          .word nt_number_sign_s, xt_number_sign, z_number_sign
003274r 3  rr rr        
003276r 3  23                   .byte "#"
003277r 3               
003277r 3               nt_less_number_sign:
003277r 3  02 00                .byte 2, 0
003279r 3  rr rr rr rr          .word nt_number_sign, xt_less_number_sign, z_less_number_sign
00327Dr 3  rr rr        
00327Fr 3  3C 23                .byte "<#"
003281r 3               
003281r 3               nt_to_in:
003281r 3  03 00                .byte 3, 0
003283r 3  rr rr rr rr          .word nt_less_number_sign, xt_to_in, z_to_in
003287r 3  rr rr        
003289r 3  3E 69 6E             .byte ">in"
00328Cr 3               
00328Cr 3               nt_within:
00328Cr 3  06 10                .byte 6, UF
00328Er 3  rr rr rr rr          .word nt_to_in, xt_within, z_within
003292r 3  rr rr        
003294r 3  77 69 74 68          .byte "within"
003298r 3  69 6E        
00329Ar 3               
00329Ar 3               nt_hexstore:
00329Ar 3  08 10                .byte 8, UF
00329Cr 3  rr rr rr rr          .word nt_within, xt_hexstore, z_hexstore
0032A0r 3  rr rr        
0032A2r 3  68 65 78 73          .byte "hexstore"
0032A6r 3  74 6F 72 65  
0032AAr 3               
0032AAr 3               nt_cleave:
0032AAr 3  06 10                .byte 6, UF
0032ACr 3  rr rr rr rr          .word nt_hexstore, xt_cleave, z_cleave
0032B0r 3  rr rr        
0032B2r 3  63 6C 65 61          .byte "cleave"
0032B6r 3  76 65        
0032B8r 3               
0032B8r 3               nt_pad:
0032B8r 3  03 00                .byte 3, 0
0032BAr 3  rr rr rr rr          .word nt_cleave, xt_pad, z_pad
0032BEr 3  rr rr        
0032C0r 3  70 61 64             .byte "pad"
0032C3r 3               
0032C3r 3               nt_cmove:
0032C3r 3  05 10                .byte 5, UF
0032C5r 3  rr rr rr rr          .word nt_pad, xt_cmove, z_cmove
0032C9r 3  rr rr        
0032CBr 3  63 6D 6F 76          .byte "cmove"
0032CFr 3  65           
0032D0r 3               
0032D0r 3               nt_cmove_up:
0032D0r 3  06 10                .byte 6, UF
0032D2r 3  rr rr rr rr          .word nt_cmove, xt_cmove_up, z_cmove_up
0032D6r 3  rr rr        
0032D8r 3  63 6D 6F 76          .byte "cmove>"
0032DCr 3  65 3E        
0032DEr 3               
0032DEr 3               nt_move:
0032DEr 3  04 18                .byte 4, NN+UF
0032E0r 3  rr rr rr rr          .word nt_cmove_up, xt_move, z_move
0032E4r 3  rr rr        
0032E6r 3  6D 6F 76 65          .byte "move"
0032EAr 3               
0032EAr 3               nt_backslash:
0032EAr 3  01 04                .byte 1, IM
0032ECr 3  rr rr rr rr          .word nt_move, xt_backslash, z_backslash
0032F0r 3  rr rr        
0032F2r 3  5C                   .byte $5c
0032F3r 3               
0032F3r 3               nt_star_slash:
0032F3r 3  02 10                .byte 2, UF
0032F5r 3  rr rr rr rr          .word nt_backslash, xt_star_slash, z_star_slash
0032F9r 3  rr rr        
0032FBr 3  2A 2F                .byte "*/"
0032FDr 3               
0032FDr 3               nt_star_slash_mod:
0032FDr 3  05 10                .byte 5, UF
0032FFr 3  rr rr rr rr          .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
003303r 3  rr rr        
003305r 3  2A 2F 6D 6F          .byte "*/mod"
003309r 3  64           
00330Ar 3               
00330Ar 3               nt_mod:
00330Ar 3  03 10                .byte 3, UF
00330Cr 3  rr rr rr rr          .word nt_star_slash_mod, xt_mod, z_mod
003310r 3  rr rr        
003312r 3  6D 6F 64             .byte "mod"
003315r 3               
003315r 3               nt_slash_mod:
003315r 3  04 10                .byte 4, UF
003317r 3  rr rr rr rr          .word nt_mod, xt_slash_mod, z_slash_mod
00331Br 3  rr rr        
00331Dr 3  2F 6D 6F 64          .byte "/mod"
003321r 3               
003321r 3               nt_slash:
003321r 3  01 10                .byte 1, UF
003323r 3  rr rr rr rr          .word nt_slash_mod, xt_slash, z_slash
003327r 3  rr rr        
003329r 3  2F                   .byte "/"
00332Ar 3               
00332Ar 3               nt_fm_slash_mod:
00332Ar 3  06 10                .byte 6, UF
00332Cr 3  rr rr rr rr          .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
003330r 3  rr rr        
003332r 3  66 6D 2F 6D          .byte "fm/mod"
003336r 3  6F 64        
003338r 3               
003338r 3               nt_sm_slash_rem:
003338r 3  06 10                .byte 6, UF
00333Ar 3  rr rr rr rr          .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
00333Er 3  rr rr        
003340r 3  73 6D 2F 72          .byte "sm/rem"
003344r 3  65 6D        
003346r 3               
003346r 3               nt_um_slash_mod:
003346r 3  06 10                .byte 6, UF
003348r 3  rr rr rr rr          .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
00334Cr 3  rr rr        
00334Er 3  75 6D 2F 6D          .byte "um/mod"
003352r 3  6F 64        
003354r 3               
003354r 3               nt_star:
003354r 3  01 10                .byte 1, UF
003356r 3  rr rr rr rr          .word nt_um_slash_mod, xt_star, z_star
00335Ar 3  rr rr        
00335Cr 3  2A                   .byte "*"
00335Dr 3               
00335Dr 3               nt_um_star:
00335Dr 3  03 10                .byte 3, UF
00335Fr 3  rr rr rr rr          .word nt_star, xt_um_star, z_um_star
003363r 3  rr rr        
003365r 3  75 6D 2A             .byte "um*"
003368r 3               
003368r 3               nt_m_star:
003368r 3  02 10                .byte 2, UF
00336Ar 3  rr rr rr rr          .word nt_um_star, xt_m_star, z_m_star
00336Er 3  rr rr        
003370r 3  6D 2A                .byte "m*"
003372r 3               
003372r 3               nt_count:
003372r 3  05 10                .byte 5, UF
003374r 3  rr rr rr rr          .word nt_m_star, xt_count, z_count
003378r 3  rr rr        
00337Ar 3  63 6F 75 6E          .byte "count"
00337Er 3  74           
00337Fr 3               
00337Fr 3               nt_decimal:
00337Fr 3  07 00                .byte 7, 0
003381r 3  rr rr rr rr          .word nt_count, xt_decimal, z_decimal
003385r 3  rr rr        
003387r 3  64 65 63 69          .byte "decimal"
00338Br 3  6D 61 6C     
00338Er 3               
00338Er 3               nt_hex:
00338Er 3  03 00                .byte 3, 0
003390r 3  rr rr rr rr          .word nt_decimal, xt_hex, z_hex
003394r 3  rr rr        
003396r 3  68 65 78             .byte "hex"
003399r 3               
003399r 3               nt_to_number:
003399r 3  07 10                .byte 7, UF
00339Br 3  rr rr rr rr          .word nt_hex, xt_to_number, z_to_number
00339Fr 3  rr rr        
0033A1r 3  3E 6E 75 6D          .byte ">number"
0033A5r 3  62 65 72     
0033A8r 3               
0033A8r 3               nt_number:
0033A8r 3  06 10                .byte 6, UF
0033AAr 3  rr rr rr rr          .word nt_to_number, xt_number, z_number
0033AEr 3  rr rr        
0033B0r 3  6E 75 6D 62          .byte "number"
0033B4r 3  65 72        
0033B6r 3               
0033B6r 3               nt_digit_question:
0033B6r 3  06 10                .byte 6, UF
0033B8r 3  rr rr rr rr          .word nt_number, xt_digit_question, z_digit_question
0033BCr 3  rr rr        
0033BEr 3  64 69 67 69          .byte "digit?"
0033C2r 3  74 3F        
0033C4r 3               
0033C4r 3               nt_base:
0033C4r 3  04 00                .byte 4, 0
0033C6r 3  rr rr rr rr          .word nt_digit_question, xt_base, z_base
0033CAr 3  rr rr        
0033CCr 3  62 61 73 65          .byte "base"
0033D0r 3               
0033D0r 3               nt_evaluate:
0033D0r 3  08 10                .byte 8, UF
0033D2r 3  rr rr rr rr          .word nt_base, xt_evaluate, z_evaluate
0033D6r 3  rr rr        
0033D8r 3  65 76 61 6C          .byte "evaluate"
0033DCr 3  75 61 74 65  
0033E0r 3               
0033E0r 3               nt_state:
0033E0r 3  05 00                .byte 5, 0
0033E2r 3  rr rr rr rr          .word nt_evaluate, xt_state, z_state
0033E6r 3  rr rr        
0033E8r 3  73 74 61 74          .byte "state"
0033ECr 3  65           
0033EDr 3               
0033EDr 3               nt_again:
0033EDr 3  05 17                .byte 5, AN+CO+IM+UF
0033EFr 3  rr rr rr rr          .word nt_state, xt_again, z_again
0033F3r 3  rr rr        
0033F5r 3  61 67 61 69          .byte "again"
0033F9r 3  6E           
0033FAr 3               
0033FAr 3               nt_begin:
0033FAr 3  05 07                .byte 5, AN+CO+IM
0033FCr 3  rr rr rr rr          .word nt_again, xt_begin, z_begin
003400r 3  rr rr        
003402r 3  62 65 67 69          .byte "begin"
003406r 3  6E           
003407r 3               
003407r 3               nt_quit:
003407r 3  04 00                .byte 4, 0
003409r 3  rr rr rr rr          .word nt_begin, xt_quit, z_quit
00340Dr 3  rr rr        
00340Fr 3  71 75 69 74          .byte "quit"
003413r 3               
003413r 3               nt_recurse:
003413r 3  07 0D                .byte 7, CO+IM+NN
003415r 3  rr rr rr rr          .word nt_quit, xt_recurse, z_recurse
003419r 3  rr rr        
00341Br 3  72 65 63 75          .byte "recurse"
00341Fr 3  72 73 65     
003422r 3               
003422r 3               nt_leave:
003422r 3  05 03                .byte 5, AN+CO
003424r 3  rr rr rr rr          .word nt_recurse, xt_leave, z_leave
003428r 3  rr rr        
00342Ar 3  6C 65 61 76          .byte "leave"
00342Er 3  65           
00342Fr 3               
00342Fr 3               nt_unloop:
00342Fr 3  06 03                .byte 6, AN+CO
003431r 3  rr rr rr rr          .word nt_leave, xt_unloop, z_unloop
003435r 3  rr rr        
003437r 3  75 6E 6C 6F          .byte "unloop"
00343Br 3  6F 70        
00343Dr 3               
00343Dr 3               nt_exit:
00343Dr 3  04 03                .byte 4, AN+CO
00343Fr 3  rr rr rr rr          .word nt_unloop, xt_exit, z_exit
003443r 3  rr rr        
003445r 3  65 78 69 74          .byte "exit"
003449r 3               
003449r 3               nt_plus_loop:
003449r 3  05 05                .byte 5, CO+IM
00344Br 3  rr rr rr rr          .word nt_exit, xt_plus_loop, z_plus_loop
00344Fr 3  rr rr        
003451r 3  2B 6C 6F 6F          .byte "+loop"
003455r 3  70           
003456r 3               
003456r 3               nt_loop:
003456r 3  04 05                .byte 4, CO+IM
003458r 3  rr rr rr rr          .word nt_plus_loop, xt_loop, z_loop
00345Cr 3  rr rr        
00345Er 3  6C 6F 6F 70          .byte "loop"
003462r 3               
003462r 3               nt_j:
003462r 3  01 03                .byte 1, AN+CO
003464r 3  rr rr rr rr          .word nt_loop, xt_j, z_j
003468r 3  rr rr        
00346Ar 3  6A                   .byte "j"
00346Br 3               
00346Br 3               nt_i:
00346Br 3  01 03                .byte 1, AN+CO
00346Dr 3  rr rr rr rr          .word nt_j, xt_i, z_i
003471r 3  rr rr        
003473r 3  69                   .byte "i"
003474r 3               
003474r 3               nt_question_do:
003474r 3  03 0D                .byte 3, CO+IM+NN
003476r 3  rr rr rr rr          .word nt_i, xt_question_do, z_question_do
00347Ar 3  rr rr        
00347Cr 3  3F 64 6F             .byte "?do"
00347Fr 3               
00347Fr 3               nt_do:
00347Fr 3  02 0D                .byte 2, CO+IM+NN
003481r 3  rr rr rr rr          .word nt_question_do, xt_do, z_do
003485r 3  rr rr        
003487r 3  64 6F                .byte "do"
003489r 3               
003489r 3               nt_abort_quote:
003489r 3  06 0D                .byte 6, CO+IM+NN
00348Br 3  rr rr rr rr          .word nt_do, xt_abort_quote, z_abort_quote
00348Fr 3  rr rr        
003491r 3  61 62 6F 72          .byte "abort", $22
003495r 3  74 22        
003497r 3               
003497r 3               nt_abort:
003497r 3  05 00                .byte 5, 0
003499r 3  rr rr rr rr          .word nt_abort_quote, xt_abort, z_abort
00349Dr 3  rr rr        
00349Fr 3  61 62 6F 72          .byte "abort"
0034A3r 3  74           
0034A4r 3               
0034A4r 3               nt_strip_underflow:
0034A4r 3  0F 00                .byte 15, 0
0034A6r 3  rr rr rr rr          .word nt_abort, xt_strip_underflow, z_strip_underflow
0034AAr 3  rr rr        
0034ACr 3  73 74 72 69          .byte "strip-underflow"
0034B0r 3  70 2D 75 6E  
0034B4r 3  64 65 72 66  
0034BBr 3               
0034BBr 3               nt_nc_limit:
0034BBr 3  08 00                .byte 8, 0
0034BDr 3  rr rr rr rr          .word nt_strip_underflow, xt_nc_limit, z_nc_limit
0034C1r 3  rr rr        
0034C3r 3  6E 63 2D 6C          .byte "nc-limit"
0034C7r 3  69 6D 69 74  
0034CBr 3               
0034CBr 3               nt_allow_native:
0034CBr 3  0C 00                .byte 12, 0
0034CDr 3  rr rr rr rr          .word nt_nc_limit, xt_allow_native, z_allow_native
0034D1r 3  rr rr        
0034D3r 3  61 6C 6C 6F          .byte "allow-native"
0034D7r 3  77 2D 6E 61  
0034DBr 3  74 69 76 65  
0034DFr 3               
0034DFr 3               nt_always_native:
0034DFr 3  0D 00                .byte 13, 0
0034E1r 3  rr rr rr rr          .word nt_allow_native, xt_always_native, z_always_native
0034E5r 3  rr rr        
0034E7r 3  61 6C 77 61          .byte "always-native"
0034EBr 3  79 73 2D 6E  
0034EFr 3  61 74 69 76  
0034F4r 3               
0034F4r 3               nt_never_native:
0034F4r 3  0C 00                .byte 12, 0
0034F6r 3  rr rr rr rr          .word nt_always_native, xt_never_native, z_never_native
0034FAr 3  rr rr        
0034FCr 3  6E 65 76 65          .byte "never-native"
003500r 3  72 2D 6E 61  
003504r 3  74 69 76 65  
003508r 3               
003508r 3               nt_compile_only:
003508r 3  0C 00                .byte 12, 0
00350Ar 3  rr rr rr rr          .word nt_never_native, xt_compile_only, z_compile_only
00350Er 3  rr rr        
003510r 3  63 6F 6D 70          .byte "compile-only"
003514r 3  69 6C 65 2D  
003518r 3  6F 6E 6C 79  
00351Cr 3               
00351Cr 3               nt_immediate:
00351Cr 3  09 00                .byte 9, 0
00351Er 3  rr rr rr rr          .word nt_compile_only, xt_immediate, z_immediate
003522r 3  rr rr        
003524r 3  69 6D 6D 65          .byte "immediate"
003528r 3  64 69 61 74  
00352Cr 3  65           
00352Dr 3               
00352Dr 3               nt_postpone:
00352Dr 3  08 05                .byte 8, IM+CO
00352Fr 3  rr rr rr rr          .word nt_immediate, xt_postpone, z_postpone
003533r 3  rr rr        
003535r 3  70 6F 73 74          .byte "postpone"
003539r 3  70 6F 6E 65  
00353Dr 3               
00353Dr 3               nt_s_backslash_quote:
00353Dr 3  03 04                .byte 3, IM
00353Fr 3  rr rr rr rr          .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
003543r 3  rr rr        
003545r 3  73 5C 22             .byte "s", $5C, $22
003548r 3               
003548r 3               nt_s_quote:
003548r 3  02 0C                .byte 2, IM+NN
00354Ar 3  rr rr rr rr          .word nt_s_backslash_quote, xt_s_quote, z_s_quote
00354Er 3  rr rr        
003550r 3  73 22                .byte "s", $22
003552r 3               
003552r 3               nt_dot_quote:
003552r 3  02 05                .byte 2, CO+IM
003554r 3  rr rr rr rr          .word nt_s_quote, xt_dot_quote, z_dot_quote
003558r 3  rr rr        
00355Ar 3  2E 22                .byte ".", $22
00355Cr 3               
00355Cr 3               nt_sliteral:
00355Cr 3  08 15                .byte 8, CO+IM+UF
00355Er 3  rr rr rr rr          .word nt_dot_quote, xt_sliteral, z_sliteral
003562r 3  rr rr        
003564r 3  73 6C 69 74          .byte "sliteral"
003568r 3  65 72 61 6C  
00356Cr 3               
00356Cr 3               nt_literal:
00356Cr 3  07 15                .byte 7, IM+CO+UF
00356Er 3  rr rr rr rr          .word nt_sliteral, xt_literal, z_literal
003572r 3  rr rr        
003574r 3  6C 69 74 65          .byte "literal"
003578r 3  72 61 6C     
00357Br 3               
00357Br 3               nt_right_bracket:
00357Br 3  01 04                .byte 1, IM
00357Dr 3  rr rr rr rr          .word nt_literal, xt_right_bracket, z_right_bracket
003581r 3  rr rr        
003583r 3  5D                   .byte "]"
003584r 3               
003584r 3               nt_left_bracket:
003584r 3  01 05                .byte 1, IM+CO
003586r 3  rr rr rr rr          .word nt_right_bracket, xt_left_bracket, z_left_bracket
00358Ar 3  rr rr        
00358Cr 3  5B                   .byte "["
00358Dr 3               
00358Dr 3               nt_compile_comma:
00358Dr 3  08 18                .byte 8, UF+NN
00358Fr 3  rr rr rr rr          .word nt_left_bracket, xt_compile_comma, z_compile_comma
003593r 3  rr rr        
003595r 3  63 6F 6D 70          .byte "compile,"
003599r 3  69 6C 65 2C  
00359Dr 3               
00359Dr 3               nt_colon_noname:
00359Dr 3  07 00                .byte 7, 0
00359Fr 3  rr rr rr rr          .word nt_compile_comma, xt_colon_noname, z_colon_noname
0035A3r 3  rr rr        
0035A5r 3  3A 6E 6F 6E          .byte ":noname"
0035A9r 3  61 6D 65     
0035ACr 3               
0035ACr 3               nt_semicolon:
0035ACr 3  01 05                .byte 1, CO+IM
0035AEr 3  rr rr rr rr          .word nt_colon_noname, xt_semicolon, z_semicolon
0035B2r 3  rr rr        
0035B4r 3  3B                   .byte ";"
0035B5r 3               
0035B5r 3               nt_colon:
0035B5r 3  01 00                .byte 1, 0
0035B7r 3  rr rr rr rr          .word nt_semicolon, xt_colon, z_colon
0035BBr 3  rr rr        
0035BDr 3  3A                   .byte ":"
0035BEr 3               
0035BEr 3               nt_source_id:
0035BEr 3  09 00                .byte 9, 0
0035C0r 3  rr rr rr rr          .word nt_colon, xt_source_id, z_source_id
0035C4r 3  rr rr        
0035C6r 3  73 6F 75 72          .byte "source-id"
0035CAr 3  63 65 2D 69  
0035CEr 3  64           
0035CFr 3               
0035CFr 3               nt_source:
0035CFr 3  06 00                .byte 6, 0
0035D1r 3  rr rr rr rr          .word nt_source_id, xt_source, z_source
0035D5r 3  rr rr        
0035D7r 3  73 6F 75 72          .byte "source"
0035DBr 3  63 65        
0035DDr 3               
0035DDr 3               nt_execute_parsing:
0035DDr 3  0F 10                .byte 15, UF
0035DFr 3  rr rr rr rr          .word nt_source, xt_execute_parsing, z_execute_parsing
0035E3r 3  rr rr        
0035E5r 3  65 78 65 63          .byte "execute-parsing"
0035E9r 3  75 74 65 2D  
0035EDr 3  70 61 72 73  
0035F4r 3               
0035F4r 3               nt_parse:
0035F4r 3  05 10                .byte 5, UF
0035F6r 3  rr rr rr rr          .word nt_execute_parsing, xt_parse, z_parse
0035FAr 3  rr rr        
0035FCr 3  70 61 72 73          .byte "parse"
003600r 3  65           
003601r 3               
003601r 3               nt_parse_name:
003601r 3  0A 08                .byte 10, NN
003603r 3  rr rr rr rr          .word nt_parse, xt_parse_name, z_parse_name
003607r 3  rr rr        
003609r 3  70 61 72 73          .byte "parse-name"
00360Dr 3  65 2D 6E 61  
003611r 3  6D 65        
003613r 3               
003613r 3               nt_latestnt:
003613r 3  08 00                .byte 8, 0
003615r 3  rr rr rr rr          .word nt_parse_name, xt_latestnt, z_latestnt
003619r 3  rr rr        
00361Br 3  6C 61 74 65          .byte "latestnt"
00361Fr 3  73 74 6E 74  
003623r 3               
003623r 3               nt_latestxt:
003623r 3  08 00                .byte 8, 0
003625r 3  rr rr rr rr          .word nt_latestnt, xt_latestxt, z_latestxt
003629r 3  rr rr        
00362Br 3  6C 61 74 65          .byte "latestxt"
00362Fr 3  73 74 78 74  
003633r 3               
003633r 3               nt_defer:
003633r 3  05 00                .byte 5, 0
003635r 3  rr rr rr rr          .word nt_latestxt, xt_defer, z_defer
003639r 3  rr rr        
00363Br 3  64 65 66 65          .byte "defer"
00363Fr 3  72           
003640r 3               
003640r 3               nt_to_body:
003640r 3  05 10                .byte 5, UF
003642r 3  rr rr rr rr          .word nt_defer, xt_to_body, z_to_body
003646r 3  rr rr        
003648r 3  3E 62 6F 64          .byte ">body"
00364Cr 3  79           
00364Dr 3               
00364Dr 3               nt_name_to_string:
00364Dr 3  0B 10                .byte 11, UF
00364Fr 3  rr rr rr rr          .word nt_to_body, xt_name_to_string, z_name_to_string
003653r 3  rr rr        
003655r 3  6E 61 6D 65          .byte "name>string"
003659r 3  3E 73 74 72  
00365Dr 3  69 6E 67     
003660r 3               
003660r 3               nt_int_to_name:
003660r 3  08 10                .byte 8, UF
003662r 3  rr rr rr rr          .word nt_name_to_string, xt_int_to_name, z_int_to_name
003666r 3  rr rr        
003668r 3  69 6E 74 3E          .byte "int>name"
00366Cr 3  6E 61 6D 65  
003670r 3               
003670r 3               nt_name_to_int:
003670r 3  08 10                .byte 8, UF
003672r 3  rr rr rr rr          .word nt_int_to_name, xt_name_to_int, z_name_to_int
003676r 3  rr rr        
003678r 3  6E 61 6D 65          .byte "name>int"
00367Cr 3  3E 69 6E 74  
003680r 3               
003680r 3               nt_bracket_tick:
003680r 3  03 05                .byte 3, CO+IM
003682r 3  rr rr rr rr          .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
003686r 3  rr rr        
003688r 3  5B 27 5D             .byte "[']"
00368Br 3               
00368Br 3               nt_tick:
00368Br 3  01 00                .byte 1, 0
00368Dr 3  rr rr rr rr          .word nt_bracket_tick, xt_tick, z_tick
003691r 3  rr rr        
003693r 3  27                   .byte "'"
003694r 3               
003694r 3               nt_find_name:
003694r 3  09 10                .byte 9, UF
003696r 3  rr rr rr rr          .word nt_tick, xt_find_name, z_find_name
00369Ar 3  rr rr        
00369Cr 3  66 69 6E 64          .byte "find-name"
0036A0r 3  2D 6E 61 6D  
0036A4r 3  65           
0036A5r 3               
0036A5r 3               nt_fill:
0036A5r 3  04 10                .byte 4, UF
0036A7r 3  rr rr rr rr          .word nt_find_name, xt_fill, z_fill
0036ABr 3  rr rr        
0036ADr 3  66 69 6C 6C          .byte "fill"
0036B1r 3               
0036B1r 3               nt_blank:
0036B1r 3  05 00                .byte 5, 0     ; underflow checked by FILL
0036B3r 3  rr rr rr rr          .word nt_fill, xt_blank, z_blank
0036B7r 3  rr rr        
0036B9r 3  62 6C 61 6E          .byte "blank"
0036BDr 3  6B           
0036BEr 3               
0036BEr 3               nt_erase:
0036BEr 3  05 00                .byte 5, 0      ; underflow checked by FILL
0036C0r 3  rr rr rr rr          .word nt_blank, xt_erase, z_erase
0036C4r 3  rr rr        
0036C6r 3  65 72 61 73          .byte "erase"
0036CAr 3  65           
0036CBr 3               
0036CBr 3               nt_d_plus:
0036CBr 3  02 10                .byte 2, UF
0036CDr 3  rr rr rr rr          .word nt_erase, xt_d_plus, z_d_plus
0036D1r 3  rr rr        
0036D3r 3  64 2B                .byte "d+"
0036D5r 3               
0036D5r 3               nt_d_minus:
0036D5r 3  02 10                .byte 2, UF
0036D7r 3  rr rr rr rr          .word nt_d_plus, xt_d_minus, z_d_minus
0036DBr 3  rr rr        
0036DDr 3  64 2D                .byte "d-"
0036DFr 3               
0036DFr 3               nt_d_to_s:
0036DFr 3  03 10                .byte 3, UF
0036E1r 3  rr rr rr rr          .word nt_d_minus, xt_d_to_s, z_d_to_s
0036E5r 3  rr rr        
0036E7r 3  64 3E 73             .byte "d>s"
0036EAr 3               
0036EAr 3               nt_s_to_d:
0036EAr 3  03 10                .byte 3, UF
0036ECr 3  rr rr rr rr          .word nt_d_to_s, xt_s_to_d, z_s_to_d
0036F0r 3  rr rr        
0036F2r 3  73 3E 64             .byte "s>d"
0036F5r 3               
0036F5r 3               nt_to:
0036F5r 3  02 0C                .byte 2, NN+IM
0036F7r 3  rr rr rr rr          .word nt_s_to_d, xt_to, z_to
0036FBr 3  rr rr        
0036FDr 3  74 6F                .byte "to"
0036FFr 3               
0036FFr 3               nt_value:               ; same code as CONSTANT
0036FFr 3  05 10                .byte 5, UF
003701r 3  rr rr rr rr          .word nt_to, xt_constant, z_constant
003705r 3  rr rr        
003707r 3  76 61 6C 75          .byte "value"
00370Br 3  65           
00370Cr 3               
00370Cr 3               nt_constant:
00370Cr 3  08 10                .byte 8, UF
00370Er 3  rr rr rr rr          .word nt_value, xt_constant, z_constant
003712r 3  rr rr        
003714r 3  63 6F 6E 73          .byte "constant"
003718r 3  74 61 6E 74  
00371Cr 3               
00371Cr 3               nt_variable:
00371Cr 3  08 00                .byte 8, 0
00371Er 3  rr rr rr rr          .word nt_constant, xt_variable, z_variable
003722r 3  rr rr        
003724r 3  76 61 72 69          .byte "variable"
003728r 3  61 62 6C 65  
00372Cr 3               
00372Cr 3               nt_does:
00372Cr 3  05 05                .byte 5, CO+IM
00372Er 3  rr rr rr rr          .word nt_variable, xt_does, z_does
003732r 3  rr rr        
003734r 3  64 6F 65 73          .byte "does>"
003738r 3  3E           
003739r 3               
003739r 3               nt_create:
003739r 3  06 00                .byte 6, 0
00373Br 3  rr rr rr rr          .word nt_does, xt_create, z_create
00373Fr 3  rr rr        
003741r 3  63 72 65 61          .byte "create"
003745r 3  74 65        
003747r 3               
003747r 3               nt_allot:
003747r 3  05 10                .byte 5, UF
003749r 3  rr rr rr rr          .word nt_create, xt_allot, z_allot
00374Dr 3  rr rr        
00374Fr 3  61 6C 6C 6F          .byte "allot"
003753r 3  74           
003754r 3               
003754r 3               nt_key:
003754r 3  03 00                .byte 3, 0
003756r 3  rr rr rr rr          .word nt_allot, xt_key, z_key
00375Ar 3  rr rr        
00375Cr 3  6B 65 79             .byte "key"
00375Fr 3               
00375Fr 3               nt_depth:
00375Fr 3  05 00                .byte 5, 0
003761r 3  rr rr rr rr          .word nt_key, xt_depth, z_depth
003765r 3  rr rr        
003767r 3  64 65 70 74          .byte "depth"
00376Br 3  68           
00376Cr 3               
00376Cr 3               nt_unused:
00376Cr 3  06 00                .byte 6, 0
00376Er 3  rr rr rr rr          .word nt_depth, xt_unused, z_unused
003772r 3  rr rr        
003774r 3  75 6E 75 73          .byte "unused"
003778r 3  65 64        
00377Ar 3               
00377Ar 3               nt_r_to_input:
00377Ar 3  07 08                .byte 7, NN
00377Cr 3  rr rr rr rr          .word nt_unused, xt_r_to_input, z_r_to_input
003780r 3  rr rr        
003782r 3  72 3E 69 6E          .byte "r>input"
003786r 3  70 75 74     
003789r 3               
003789r 3               nt_input_to_r:
003789r 3  07 08                .byte 7, NN
00378Br 3  rr rr rr rr          .word nt_r_to_input, xt_input_to_r, z_input_to_r
00378Fr 3  rr rr        
003791r 3  69 6E 70 75          .byte "input>r"
003795r 3  74 3E 72     
003798r 3               
003798r 3               nt_accept:
003798r 3  06 18                .byte 6, UF+NN
00379Ar 3  rr rr rr rr          .word nt_input_to_r, xt_accept, z_accept
00379Er 3  rr rr        
0037A0r 3  61 63 63 65          .byte "accept"
0037A4r 3  70 74        
0037A6r 3               
0037A6r 3               nt_refill:
0037A6r 3  06 00                .byte 6, 0
0037A8r 3  rr rr rr rr          .word nt_accept, xt_refill, z_refill
0037ACr 3  rr rr        
0037AEr 3  72 65 66 69          .byte "refill"
0037B2r 3  6C 6C        
0037B4r 3               
0037B4r 3               nt_slash_string:
0037B4r 3  07 10                .byte 7, UF
0037B6r 3  rr rr rr rr          .word nt_refill, xt_slash_string, z_slash_string
0037BAr 3  rr rr        
0037BCr 3  2F 73 74 72          .byte "/string"
0037C0r 3  69 6E 67     
0037C3r 3               
0037C3r 3               nt_minus_leading:
0037C3r 3  08 10                .byte 8, UF
0037C5r 3  rr rr rr rr          .word nt_slash_string, xt_minus_leading, z_minus_leading
0037C9r 3  rr rr        
0037CBr 3  2D 6C 65 61          .byte "-leading"
0037CFr 3  64 69 6E 67  
0037D3r 3               
0037D3r 3               nt_minus_trailing:
0037D3r 3  09 10                .byte 9, UF
0037D5r 3  rr rr rr rr          .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
0037D9r 3  rr rr        
0037DBr 3  2D 74 72 61          .byte "-trailing"
0037DFr 3  69 6C 69 6E  
0037E3r 3  67           
0037E4r 3               
0037E4r 3               nt_bl:
0037E4r 3  02 00                .byte 2, 0
0037E6r 3  rr rr rr rr          .word nt_minus_trailing, xt_bl, z_bl
0037EAr 3  rr rr        
0037ECr 3  62 6C                .byte "bl"
0037EEr 3               
0037EEr 3               nt_spaces:
0037EEr 3  06 10                .byte 6, UF
0037F0r 3  rr rr rr rr          .word nt_bl, xt_spaces, z_spaces
0037F4r 3  rr rr        
0037F6r 3  73 70 61 63          .byte "spaces"
0037FAr 3  65 73        
0037FCr 3               
0037FCr 3               nt_bounds:
0037FCr 3  06 10                .byte 6, UF
0037FEr 3  rr rr rr rr          .word nt_spaces, xt_bounds, z_bounds
003802r 3  rr rr        
003804r 3  62 6F 75 6E          .byte "bounds"
003808r 3  64 73        
00380Ar 3               
00380Ar 3               nt_c_comma:
00380Ar 3  02 10                .byte 2, UF
00380Cr 3  rr rr rr rr          .word nt_bounds, xt_c_comma, z_c_comma
003810r 3  rr rr        
003812r 3  63 2C                .byte "c,"
003814r 3               
003814r 3               nt_dnegate:
003814r 3  07 10                .byte 7, UF
003816r 3  rr rr rr rr          .word nt_c_comma, xt_dnegate, z_dnegate
00381Ar 3  rr rr        
00381Cr 3  64 6E 65 67          .byte "dnegate"
003820r 3  61 74 65     
003823r 3               
003823r 3               nt_negate:
003823r 3  06 10                .byte 6, UF
003825r 3  rr rr rr rr          .word nt_dnegate, xt_negate, z_negate
003829r 3  rr rr        
00382Br 3  6E 65 67 61          .byte "negate"
00382Fr 3  74 65        
003831r 3               
003831r 3               nt_invert:
003831r 3  06 10                .byte 6, UF
003833r 3  rr rr rr rr          .word nt_negate, xt_invert, z_invert
003837r 3  rr rr        
003839r 3  69 6E 76 65          .byte "invert"
00383Dr 3  72 74        
00383Fr 3               
00383Fr 3               nt_two_to_r:
00383Fr 3  03 11                .byte 3, CO+UF          ; native is special case
003841r 3  rr rr rr rr          .word nt_invert, xt_two_to_r, z_two_to_r
003845r 3  rr rr        
003847r 3  32 3E 72             .byte "2>r"
00384Ar 3               
00384Ar 3               nt_two_r_from:
00384Ar 3  03 01                .byte 3, CO             ; native is special case
00384Cr 3  rr rr rr rr          .word nt_two_to_r, xt_two_r_from, z_two_r_from
003850r 3  rr rr        
003852r 3  32 72 3E             .byte "2r>"
003855r 3               
003855r 3               nt_two_r_fetch:
003855r 3  03 09                .byte 3, CO+NN          ; native is special case, leave NN for now
003857r 3  rr rr rr rr          .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
00385Br 3  rr rr        
00385Dr 3  32 72 40             .byte "2r@"
003860r 3               
003860r 3               nt_two_literal:
003860r 3  08 14                .byte 8, UF+IM
003862r 3  rr rr rr rr          .word nt_two_r_fetch, xt_two_literal, z_two_literal
003866r 3  rr rr        
003868r 3  32 6C 69 74          .byte "2literal"
00386Cr 3  65 72 61 6C  
003870r 3               
003870r 3               nt_two_constant:
003870r 3  09 10                .byte 9, UF
003872r 3  rr rr rr rr          .word nt_two_literal, xt_two_constant, z_two_constant
003876r 3  rr rr        
003878r 3  32 63 6F 6E          .byte "2constant"
00387Cr 3  73 74 61 6E  
003880r 3  74           
003881r 3               
003881r 3               nt_two_variable:
003881r 3  09 00                .byte 9, 0
003883r 3  rr rr rr rr          .word nt_two_constant, xt_two_variable, z_two_variable
003887r 3  rr rr        
003889r 3  32 76 61 72          .byte "2variable"
00388Dr 3  69 61 62 6C  
003891r 3  65           
003892r 3               
003892r 3               nt_two_fetch:
003892r 3  02 10                .byte 2, UF
003894r 3  rr rr rr rr          .word nt_two_variable, xt_two_fetch, z_two_fetch
003898r 3  rr rr        
00389Ar 3  32 40                .byte "2@"
00389Cr 3               
00389Cr 3               nt_two_store:
00389Cr 3  02 10                .byte 2, UF
00389Er 3  rr rr rr rr          .word nt_two_fetch, xt_two_store, z_two_store
0038A2r 3  rr rr        
0038A4r 3  32 21                .byte "2!"
0038A6r 3               
0038A6r 3               nt_two_over:
0038A6r 3  05 10                .byte 5, UF
0038A8r 3  rr rr rr rr          .word nt_two_store, xt_two_over, z_two_over
0038ACr 3  rr rr        
0038AEr 3  32 6F 76 65          .byte "2over"
0038B2r 3  72           
0038B3r 3               
0038B3r 3               nt_two_swap:
0038B3r 3  05 10                .byte 5, UF
0038B5r 3  rr rr rr rr          .word nt_two_over, xt_two_swap, z_two_swap
0038B9r 3  rr rr        
0038BBr 3  32 73 77 61          .byte "2swap"
0038BFr 3  70           
0038C0r 3               
0038C0r 3               nt_two_drop:
0038C0r 3  05 10                .byte 5, UF
0038C2r 3  rr rr rr rr          .word nt_two_swap, xt_two_drop, z_two_drop
0038C6r 3  rr rr        
0038C8r 3  32 64 72 6F          .byte "2drop"
0038CCr 3  70           
0038CDr 3               
0038CDr 3               nt_max:
0038CDr 3  03 10                .byte 3, UF
0038CFr 3  rr rr rr rr          .word nt_two_drop, xt_max, z_max
0038D3r 3  rr rr        
0038D5r 3  6D 61 78             .byte "max"
0038D8r 3               
0038D8r 3               nt_min:
0038D8r 3  03 10                .byte 3, UF
0038DAr 3  rr rr rr rr          .word nt_max, xt_min, z_min
0038DEr 3  rr rr        
0038E0r 3  6D 69 6E             .byte "min"
0038E3r 3               
0038E3r 3               nt_zero_less:
0038E3r 3  02 10                .byte 2, UF
0038E5r 3  rr rr rr rr          .word nt_min, xt_zero_less, z_zero_less
0038E9r 3  rr rr        
0038EBr 3  30 3C                .byte "0<"
0038EDr 3               
0038EDr 3               nt_zero_greater:
0038EDr 3  02 10                .byte 2, UF
0038EFr 3  rr rr rr rr          .word nt_zero_less, xt_zero_greater, z_zero_greater
0038F3r 3  rr rr        
0038F5r 3  30 3E                .byte "0>"
0038F7r 3               
0038F7r 3               nt_zero_unequal:
0038F7r 3  03 10                .byte 3, UF
0038F9r 3  rr rr rr rr          .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
0038FDr 3  rr rr        
0038FFr 3  30 3C 3E             .byte "0<>"
003902r 3               
003902r 3               nt_zero_equal:
003902r 3  02 10                .byte 2, UF
003904r 3  rr rr rr rr          .word nt_zero_unequal, xt_zero_equal, z_zero_equal
003908r 3  rr rr        
00390Ar 3  30 3D                .byte "0="
00390Cr 3               
00390Cr 3               nt_greater_than:
00390Cr 3  01 10                .byte 1, UF
00390Er 3  rr rr rr rr          .word nt_zero_equal, xt_greater_than, z_greater_than
003912r 3  rr rr        
003914r 3  3E                   .byte ">"
003915r 3               
003915r 3               nt_u_greater_than:
003915r 3  02 10                .byte 2, UF
003917r 3  rr rr rr rr          .word nt_greater_than, xt_u_greater_than, z_u_greater_than
00391Br 3  rr rr        
00391Dr 3  75 3E                .byte "u>"
00391Fr 3               
00391Fr 3               nt_u_less_than:
00391Fr 3  02 10                .byte 2, UF
003921r 3  rr rr rr rr          .word nt_u_greater_than, xt_u_less_than, z_u_less_than
003925r 3  rr rr        
003927r 3  75 3C                .byte "u<"
003929r 3               
003929r 3               nt_less_than:
003929r 3  01 10                .byte 1, UF
00392Br 3  rr rr rr rr          .word nt_u_less_than, xt_less_than, z_less_than
00392Fr 3  rr rr        
003931r 3  3C                   .byte "<"
003932r 3               
003932r 3               nt_not_equals:
003932r 3  02 10                .byte 2, UF
003934r 3  rr rr rr rr          .word nt_less_than, xt_not_equals, z_not_equals
003938r 3  rr rr        
00393Ar 3  3C 3E                .byte "<>"
00393Cr 3               
00393Cr 3               nt_equal:
00393Cr 3  01 10                .byte 1, UF
00393Er 3  rr rr rr rr          .word nt_not_equals, xt_equal, z_equal
003942r 3  rr rr        
003944r 3  3D                   .byte "="
003945r 3               
003945r 3               nt_two_slash:
003945r 3  02 10                .byte 2, UF
003947r 3  rr rr rr rr          .word nt_equal, xt_two_slash, z_two_slash
00394Br 3  rr rr        
00394Dr 3  32 2F                .byte "2/"
00394Fr 3               
00394Fr 3               nt_two_star:
00394Fr 3  02 10                .byte 2, UF
003951r 3  rr rr rr rr          .word nt_two_slash, xt_two_star, z_two_star
003955r 3  rr rr        
003957r 3  32 2A                .byte "2*"
003959r 3               
003959r 3               nt_one_plus:
003959r 3  02 10                .byte 2, UF
00395Br 3  rr rr rr rr          .word nt_two_star, xt_one_plus, z_one_plus
00395Fr 3  rr rr        
003961r 3  31 2B                .byte "1+"
003963r 3               
003963r 3               nt_one_minus:
003963r 3  02 10                .byte 2, UF
003965r 3  rr rr rr rr          .word nt_one_plus, xt_one_minus, z_one_minus
003969r 3  rr rr        
00396Br 3  31 2D                .byte "1-"
00396Dr 3               
00396Dr 3               nt_here:
00396Dr 3  04 00                .byte 4, 0
00396Fr 3  rr rr rr rr          .word nt_one_minus, xt_here, z_here
003973r 3  rr rr        
003975r 3  68 65 72 65          .byte "here"
003979r 3               
003979r 3               nt_cell_plus:
003979r 3  05 10                .byte 5, UF
00397Br 3  rr rr rr rr          .word nt_here, xt_cell_plus, z_cell_plus
00397Fr 3  rr rr        
003981r 3  63 65 6C 6C          .byte "cell+"
003985r 3  2B           
003986r 3               
003986r 3               nt_cells:
003986r 3  05 00                .byte 5, 0
003988r 3  rr rr rr rr          .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
00398Cr 3  rr rr        
00398Er 3  63 65 6C 6C          .byte "cells"
003992r 3  73           
003993r 3               
003993r 3               nt_chars:
003993r 3  05 12                .byte 5, AN+UF   ; deleted during compile
003995r 3  rr rr rr rr          .word nt_cells, xt_chars, z_chars
003999r 3  rr rr        
00399Br 3  63 68 61 72          .byte "chars"
00399Fr 3  73           
0039A0r 3               
0039A0r 3               nt_char_plus:
0039A0r 3  05 00                .byte 5, 0
0039A2r 3  rr rr rr rr          .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
0039A6r 3  rr rr        
0039A8r 3  63 68 61 72          .byte "char+"
0039ACr 3  2B           
0039ADr 3               
0039ADr 3               nt_bracket_char:
0039ADr 3  06 05                .byte 6, CO+IM
0039AFr 3  rr rr rr rr          .word nt_char_plus, xt_bracket_char, z_bracket_char
0039B3r 3  rr rr        
0039B5r 3  5B 63 68 61          .byte "[char]"
0039B9r 3  72 5D        
0039BBr 3               
0039BBr 3               nt_char:
0039BBr 3  04 00                .byte 4, 0
0039BDr 3  rr rr rr rr          .word nt_bracket_char, xt_char, z_char
0039C1r 3  rr rr        
0039C3r 3  63 68 61 72          .byte "char"
0039C7r 3               
0039C7r 3               nt_pick:
0039C7r 3  04 00                .byte 4, 0    ; underflow check is complicated, leave off here
0039C9r 3  rr rr rr rr          .word nt_char, xt_pick, z_pick
0039CDr 3  rr rr        
0039CFr 3  70 69 63 6B          .byte "pick"
0039D3r 3               
0039D3r 3               nt_lshift:
0039D3r 3  06 10                .byte 6, UF
0039D5r 3  rr rr rr rr          .word nt_pick, xt_lshift, z_lshift
0039D9r 3  rr rr        
0039DBr 3  6C 73 68 69          .byte "lshift"
0039DFr 3  66 74        
0039E1r 3               
0039E1r 3               nt_rshift:
0039E1r 3  06 10                .byte 6, UF
0039E3r 3  rr rr rr rr          .word nt_lshift, xt_rshift, z_rshift
0039E7r 3  rr rr        
0039E9r 3  72 73 68 69          .byte "rshift"
0039EDr 3  66 74        
0039EFr 3               
0039EFr 3               nt_xor:
0039EFr 3  03 10                .byte 3, UF
0039F1r 3  rr rr rr rr          .word nt_rshift, xt_xor, z_xor
0039F5r 3  rr rr        
0039F7r 3  78 6F 72             .byte "xor"
0039FAr 3               
0039FAr 3               nt_or:
0039FAr 3  02 10                .byte 2, UF
0039FCr 3  rr rr rr rr          .word nt_xor, xt_or, z_or
003A00r 3  rr rr        
003A02r 3  6F 72                .byte "or"
003A04r 3               
003A04r 3               nt_and:
003A04r 3  03 10                .byte 3, UF
003A06r 3  rr rr rr rr          .word nt_or, xt_and, z_and
003A0Ar 3  rr rr        
003A0Cr 3  61 6E 64             .byte "and"
003A0Fr 3               
003A0Fr 3               nt_dabs:
003A0Fr 3  04 10                .byte 4, UF
003A11r 3  rr rr rr rr          .word nt_and, xt_dabs, z_dabs
003A15r 3  rr rr        
003A17r 3  64 61 62 73          .byte "dabs"
003A1Br 3               
003A1Br 3               nt_abs:
003A1Br 3  03 10                .byte 3, UF
003A1Dr 3  rr rr rr rr          .word nt_dabs, xt_abs, z_abs
003A21r 3  rr rr        
003A23r 3  61 62 73             .byte "abs"
003A26r 3               
003A26r 3               nt_minus:
003A26r 3  01 10                .byte 1, UF
003A28r 3  rr rr rr rr          .word nt_abs, xt_minus, z_minus
003A2Cr 3  rr rr        
003A2Er 3  2D                   .byte "-"
003A2Fr 3               
003A2Fr 3               nt_plus:
003A2Fr 3  01 10                .byte 1, UF
003A31r 3  rr rr rr rr          .word nt_minus, xt_plus, z_plus
003A35r 3  rr rr        
003A37r 3  2B                   .byte "+"
003A38r 3               
003A38r 3               nt_question_dup:
003A38r 3  04 10                .byte 4, UF
003A3Ar 3  rr rr rr rr          .word nt_plus, xt_question_dup, z_question_dup
003A3Er 3  rr rr        
003A40r 3  3F 64 75 70          .byte "?dup"
003A44r 3               
003A44r 3               nt_two_dup:
003A44r 3  04 10                .byte 4, UF
003A46r 3  rr rr rr rr          .word nt_question_dup, xt_two_dup, z_two_dup
003A4Ar 3  rr rr        
003A4Cr 3  32 64 75 70          .byte "2dup"
003A50r 3               
003A50r 3               nt_two:
003A50r 3  01 00                .byte 1, 0
003A52r 3  rr rr rr rr          .word nt_two_dup, xt_two, z_two
003A56r 3  rr rr        
003A58r 3  32                   .byte "2"
003A59r 3               
003A59r 3               nt_one:
003A59r 3  01 00                .byte 1, 0
003A5Br 3  rr rr rr rr          .word nt_two, xt_one, z_one
003A5Fr 3  rr rr        
003A61r 3  31                   .byte "1"
003A62r 3               
003A62r 3               nt_zero:
003A62r 3  01 00                .byte 1, 0
003A64r 3  rr rr rr rr          .word nt_one, xt_zero, z_zero
003A68r 3  rr rr        
003A6Ar 3  30                   .byte "0"
003A6Br 3               
003A6Br 3               nt_space:
003A6Br 3  05 00                .byte 5, 0
003A6Dr 3  rr rr rr rr          .word nt_zero, xt_space, z_space
003A71r 3  rr rr        
003A73r 3  73 70 61 63          .byte "space"
003A77r 3  65           
003A78r 3               
003A78r 3               nt_true:
003A78r 3  04 00                .byte 4, 0
003A7Ar 3  rr rr rr rr          .word nt_space, xt_true, z_true
003A7Er 3  rr rr        
003A80r 3  74 72 75 65          .byte "true"
003A84r 3               
003A84r 3               nt_false:
003A84r 3  05 00                .byte 5, 0
003A86r 3  rr rr rr rr          .word nt_true, xt_false, z_false
003A8Ar 3  rr rr        
003A8Cr 3  66 61 6C 73          .byte "false"
003A90r 3  65           
003A91r 3               
003A91r 3               nt_question:
003A91r 3  01 00                .byte 1, 0
003A93r 3  rr rr rr rr          .word nt_false, xt_question, z_question
003A97r 3  rr rr        
003A99r 3  3F                   .byte "?"
003A9Ar 3               
003A9Ar 3               nt_ud_dot_r:
003A9Ar 3  04 10                .byte 4, UF
003A9Cr 3  rr rr rr rr          .word nt_question, xt_ud_dot_r, z_ud_dot_r
003AA0r 3  rr rr        
003AA2r 3  75 64 2E 72          .byte "ud.r"
003AA6r 3               
003AA6r 3               nt_ud_dot:
003AA6r 3  03 10                .byte 3, UF
003AA8r 3  rr rr rr rr          .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
003AACr 3  rr rr        
003AAEr 3  75 64 2E             .byte "ud."
003AB1r 3               
003AB1r 3               nt_d_dot_r:
003AB1r 3  03 10                .byte 3, UF
003AB3r 3  rr rr rr rr          .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
003AB7r 3  rr rr        
003AB9r 3  64 2E 72             .byte "d.r"
003ABCr 3               
003ABCr 3               nt_d_dot:
003ABCr 3  02 10                .byte 2, UF
003ABEr 3  rr rr rr rr          .word nt_d_dot_r, xt_d_dot, z_d_dot
003AC2r 3  rr rr        
003AC4r 3  64 2E                .byte "d."
003AC6r 3               
003AC6r 3               nt_dot_r:
003AC6r 3  02 10                .byte 2, UF
003AC8r 3  rr rr rr rr          .word nt_d_dot, xt_dot_r, z_dot_r
003ACCr 3  rr rr        
003ACEr 3  2E 72                .byte ".r"
003AD0r 3               
003AD0r 3               nt_u_dot_r:
003AD0r 3  03 10                .byte 3, UF
003AD2r 3  rr rr rr rr          .word nt_dot_r, xt_u_dot_r, z_u_dot_r
003AD6r 3  rr rr        
003AD8r 3  75 2E 72             .byte "u.r"
003ADBr 3               
003ADBr 3               nt_u_dot:
003ADBr 3  02 10                .byte 2, UF
003ADDr 3  rr rr rr rr          .word nt_u_dot_r, xt_u_dot, z_u_dot
003AE1r 3  rr rr        
003AE3r 3  75 2E                .byte "u."
003AE5r 3               
003AE5r 3               nt_dot:
003AE5r 3  01 10                .byte 1, UF
003AE7r 3  rr rr rr rr          .word nt_u_dot, xt_dot, z_dot
003AEBr 3  rr rr        
003AEDr 3  2E                   .byte "."
003AEEr 3               
003AEEr 3               nt_type:
003AEEr 3  04 10                .byte 4, UF
003AF0r 3  rr rr rr rr          .word nt_dot, xt_type, z_type
003AF4r 3  rr rr        
003AF6r 3  74 79 70 65          .byte "type"
003AFAr 3               
003AFAr 3               nt_emit:
003AFAr 3  04 18                .byte 4, NN+UF
003AFCr 3  rr rr rr rr          .word nt_type, xt_emit, z_emit
003B00r 3  rr rr        
003B02r 3  65 6D 69 74          .byte "emit"
003B06r 3               
003B06r 3               nt_execute:
003B06r 3  07 10                .byte 7, UF
003B08r 3  rr rr rr rr          .word nt_emit, xt_execute, z_execute
003B0Cr 3  rr rr        
003B0Er 3  65 78 65 63          .byte "execute"
003B12r 3  75 74 65     
003B15r 3               
003B15r 3               nt_plus_store:
003B15r 3  02 10                .byte 2, UF
003B17r 3  rr rr rr rr          .word nt_execute, xt_plus_store, z_plus_store
003B1Br 3  rr rr        
003B1Dr 3  2B 21                .byte "+!"
003B1Fr 3               
003B1Fr 3               nt_c_store:
003B1Fr 3  02 10                .byte 2, UF
003B21r 3  rr rr rr rr          .word nt_plus_store, xt_c_store, z_c_store
003B25r 3  rr rr        
003B27r 3  63 21                .byte "c!"
003B29r 3               
003B29r 3               nt_c_fetch:
003B29r 3  02 10                .byte 2, UF
003B2Br 3  rr rr rr rr          .word nt_c_store, xt_c_fetch, z_c_fetch
003B2Fr 3  rr rr        
003B31r 3  63 40                .byte "c@"
003B33r 3               
003B33r 3               nt_comma:
003B33r 3  01 10                .byte 1, UF
003B35r 3  rr rr rr rr          .word nt_c_fetch, xt_comma, z_comma
003B39r 3  rr rr        
003B3Br 3  2C                   .byte ","
003B3Cr 3               
003B3Cr 3               nt_tuck:
003B3Cr 3  04 10                .byte 4, UF
003B3Er 3  rr rr rr rr          .word nt_comma, xt_tuck, z_tuck
003B42r 3  rr rr        
003B44r 3  74 75 63 6B          .byte "tuck"
003B48r 3               
003B48r 3               nt_not_rote:
003B48r 3  04 10                .byte 4, UF
003B4Ar 3  rr rr rr rr          .word nt_tuck, xt_not_rote, z_not_rote
003B4Er 3  rr rr        
003B50r 3  2D 72 6F 74          .byte "-rot"
003B54r 3               
003B54r 3               nt_rot:
003B54r 3  03 10                .byte 3, UF
003B56r 3  rr rr rr rr          .word nt_not_rote, xt_rot, z_rot
003B5Ar 3  rr rr        
003B5Cr 3  72 6F 74             .byte "rot"
003B5Fr 3               
003B5Fr 3               nt_nip:
003B5Fr 3  03 10                .byte 3, UF
003B61r 3  rr rr rr rr          .word nt_rot, xt_nip, z_nip
003B65r 3  rr rr        
003B67r 3  6E 69 70             .byte "nip"
003B6Ar 3               
003B6Ar 3               nt_r_fetch:
003B6Ar 3  02 01                .byte 2, CO    ; native is special case
003B6Cr 3  rr rr rr rr          .word nt_nip, xt_r_fetch, z_r_fetch
003B70r 3  rr rr        
003B72r 3  72 40                .byte "r@"
003B74r 3               
003B74r 3               nt_r_from:
003B74r 3  02 01                .byte 2, CO    ; native is special case
003B76r 3  rr rr rr rr          .word nt_r_fetch, xt_r_from, z_r_from
003B7Ar 3  rr rr        
003B7Cr 3  72 3E                .byte "r>"
003B7Er 3               
003B7Er 3               nt_to_r:
003B7Er 3  02 11                .byte 2, CO+UF ; native is special case
003B80r 3  rr rr rr rr          .word nt_r_from, xt_to_r, z_to_r
003B84r 3  rr rr        
003B86r 3  3E 72                .byte ">r"
003B88r 3               
003B88r 3               nt_over:
003B88r 3  04 10                .byte 4, UF
003B8Ar 3  rr rr rr rr          .word nt_to_r, xt_over, z_over
003B8Er 3  rr rr        
003B90r 3  6F 76 65 72          .byte "over"
003B94r 3               
003B94r 3               nt_fetch:
003B94r 3  01 10                .byte 1, UF
003B96r 3  rr rr rr rr          .word nt_over, xt_fetch, z_fetch
003B9Ar 3  rr rr        
003B9Cr 3  40                   .byte "@"
003B9Dr 3               
003B9Dr 3               nt_store:
003B9Dr 3  01 10                .byte 1, UF
003B9Fr 3  rr rr rr rr          .word nt_fetch, xt_store, z_store
003BA3r 3  rr rr        
003BA5r 3  21                   .byte "!"
003BA6r 3               
003BA6r 3               nt_swap:
003BA6r 3  04 10                .byte 4, UF
003BA8r 3  rr rr rr rr          .word nt_store, xt_swap, z_swap
003BACr 3  rr rr        
003BAEr 3  73 77 61 70          .byte "swap"
003BB2r 3               
003BB2r 3               nt_dup:
003BB2r 3  03 10                .byte 3, UF
003BB4r 3  rr rr rr rr          .word nt_swap, xt_dup, z_dup
003BB8r 3  rr rr        
003BBAr 3  64 75 70             .byte "dup"
003BBDr 3               
003BBDr 3               ; DROP is always the first native word in the Dictionary
003BBDr 3               dictionary_start:
003BBDr 3               nt_drop:
003BBDr 3  04 10                .byte 4, UF
003BBFr 3  rr rr rr rr          .word nt_dup, xt_drop, z_drop
003BC3r 3  rr rr        
003BC5r 3  64 72 6F 70          .byte "drop"
003BC9r 3               
003BC9r 3               ; END of FORTH-WORDLIST
003BC9r 3               
003BC9r 3               
003BC9r 3               ; ROOT-WORDLIST
003BC9r 3                       ; This is a short wordlist that has just the words needed to
003BC9r 3                       ; set the wordlists. These words are also included in the
003BC9r 3                       ; FORTH-WORDLIST as well.
003BC9r 3               
003BC9r 3               nt_root_words:
003BC9r 3  05 00                .byte 5, 0
003BCBr 3  00 00 rr rr          .word 0000, xt_words, z_words
003BCFr 3  rr rr        
003BD1r 3  77 6F 72 64          .byte "words"
003BD5r 3  73           
003BD6r 3               
003BD6r 3               nt_root_forth_wordlist: ; shares code with ZERO
003BD6r 3  0E 00                .byte 14, 0
003BD8r 3  rr rr rr rr          .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
003BDCr 3  rr rr        
003BDEr 3  66 6F 72 74          .byte "forth-wordlist"
003BE2r 3  68 2D 77 6F  
003BE6r 3  72 64 6C 69  
003BECr 3               
003BECr 3               nt_root_forth:
003BECr 3  05 00                .byte 5, 0
003BEEr 3  rr rr rr rr          .word nt_root_forth_wordlist, xt_forth, z_forth
003BF2r 3  rr rr        
003BF4r 3  66 6F 72 74          .byte "forth"
003BF8r 3  68           
003BF9r 3               
003BF9r 3               root_dictionary_start:
003BF9r 3               nt_root_set_order:
003BF9r 3  09 00                .byte 9, 0
003BFBr 3  rr rr rr rr          .word nt_root_forth, xt_set_order, z_set_order
003BFFr 3  rr rr        
003C01r 3  73 65 74 2D          .byte "set-order"
003C05r 3  6F 72 64 65  
003C09r 3  72           
003C0Ar 3               
003C0Ar 3               ; END of ROOT-WORDLIST
003C0Ar 3               
003C0Ar 3               
003C0Ar 3               ; EDITOR-WORDLIST
003C0Ar 3               
003C0Ar 3               nt_editor_enter_screen:
003C0Ar 3  0C 00                .byte 12, 0
003C0Cr 3  00 00 rr rr          .word 0000, xt_editor_enter_screen, z_editor_enter_screen
003C10r 3  rr rr        
003C12r 3  65 6E 74 65          .byte "enter-screen"
003C16r 3  72 2D 73 63  
003C1Ar 3  72 65 65 6E  
003C1Er 3               
003C1Er 3               nt_editor_erase_screen:
003C1Er 3  0C 00                .byte 12, 0
003C20r 3  rr rr rr rr          .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
003C24r 3  rr rr        
003C26r 3  65 72 61 73          .byte "erase-screen"
003C2Ar 3  65 2D 73 63  
003C2Er 3  72 65 65 6E  
003C32r 3               
003C32r 3               nt_editor_el:
003C32r 3  02 00                .byte 2, 0
003C34r 3  rr rr rr rr          .word nt_editor_erase_screen, xt_editor_el, z_editor_el
003C38r 3  rr rr        
003C3Ar 3  65 6C                .byte "el"
003C3Cr 3               
003C3Cr 3               nt_editor_l:
003C3Cr 3  01 00                .byte 1, 0
003C3Er 3  rr rr rr rr          .word nt_editor_el, xt_editor_l, z_editor_l
003C42r 3  rr rr        
003C44r 3  6C                   .byte "l"
003C45r 3               
003C45r 3               nt_editor_line:
003C45r 3  04 10                .byte 4, UF
003C47r 3  rr rr rr rr          .word nt_editor_l, xt_editor_line, z_editor_line
003C4Br 3  rr rr        
003C4Dr 3  6C 69 6E 65          .byte "line"
003C51r 3               
003C51r 3               editor_dictionary_start:
003C51r 3               nt_editor_o:
003C51r 3  01 00                .byte 1, 0
003C53r 3  rr rr rr rr          .word nt_editor_line, xt_editor_o, z_editor_o
003C57r 3  rr rr        
003C59r 3  6F                   .byte "o"
003C5Ar 3               
003C5Ar 3               ; END of EDITOR-WORDLIST
003C5Ar 3               
003C5Ar 3               
003C5Ar 3               ; ; ASSEMBLER-WORDLIST
003C5Ar 3               
003C5Ar 3               ; ; Labels for the opcodes have the format "nt_asm_<OPC>" where a futher
003C5Ar 3               ; ; underscore replaces any dot present in the SAN mnemonic. The hash sign for
003C5Ar 3               ; ; immediate addressing is replaced by an "h" (for example, the label code for
003C5Ar 3               ; ; "lda.#" is "xt_adm_lda_h"). All opcodes are immediate.
003C5Ar 3               .ifdef TALI_OPTIONAL_ASSEMBLER
003C5Ar 3               assembler_dictionary_start:
003C5Ar 3               nt_asm_adc_h:
003C5Ar 3  05 04        		.byte 5, IM
003C5Cr 3  rr rr                        .word nt_asm_adc_x
003C5Er 3  rr rr rr rr  		.word xt_asm_adc_h, z_asm_adc_h
003C62r 3  61 64 63 2E  		.byte "adc.#"
003C66r 3  23           
003C67r 3               
003C67r 3               nt_asm_adc_x:
003C67r 3  05 04        		.byte 5, IM
003C69r 3  rr rr                        .word nt_asm_adc_y
003C6Br 3  rr rr rr rr  		.word xt_asm_adc_x, z_asm_adc_x
003C6Fr 3  61 64 63 2E  		.byte "adc.x"
003C73r 3  78           
003C74r 3               
003C74r 3               nt_asm_adc_y:
003C74r 3  05 04        		.byte 5, IM
003C76r 3  rr rr                        .word nt_asm_adc_z
003C78r 3  rr rr rr rr  		.word xt_asm_adc_y, z_asm_adc_y
003C7Cr 3  61 64 63 2E  		.byte "adc.y"
003C80r 3  79           
003C81r 3               
003C81r 3               nt_asm_adc_z:
003C81r 3  05 04        		.byte 5, IM
003C83r 3  rr rr                        .word nt_asm_adc_zi
003C85r 3  rr rr rr rr  		.word xt_asm_adc_z, z_asm_adc_z
003C89r 3  61 64 63 2E  		.byte "adc.z"
003C8Dr 3  7A           
003C8Er 3               
003C8Er 3               nt_asm_adc_zi:
003C8Er 3  06 04        		.byte 6, IM
003C90r 3  rr rr                        .word nt_asm_adc_ziy
003C92r 3  rr rr rr rr  		.word xt_asm_adc_zi, z_asm_adc_zi
003C96r 3  61 64 63 2E  		.byte "adc.zi"
003C9Ar 3  7A 69        
003C9Cr 3               
003C9Cr 3               nt_asm_adc_ziy:
003C9Cr 3  07 04        		.byte 7, IM
003C9Er 3  rr rr                        .word nt_asm_adc_zx
003CA0r 3  rr rr rr rr  		.word xt_asm_adc_ziy, z_asm_adc_ziy
003CA4r 3  61 64 63 2E  		.byte "adc.ziy"
003CA8r 3  7A 69 79     
003CABr 3               
003CABr 3               nt_asm_adc_zx:
003CABr 3  06 04        		.byte 6, IM
003CADr 3  rr rr                        .word nt_asm_adc_zxi
003CAFr 3  rr rr rr rr  		.word xt_asm_adc_zx, z_asm_adc_zx
003CB3r 3  61 64 63 2E  		.byte "adc.zx"
003CB7r 3  7A 78        
003CB9r 3               
003CB9r 3               nt_asm_adc_zxi:
003CB9r 3  07 04        		.byte 7, IM
003CBBr 3  rr rr                        .word nt_asm_and
003CBDr 3  rr rr rr rr  		.word xt_asm_adc_zxi, z_asm_adc_zxi
003CC1r 3  61 64 63 2E  		.byte "adc.zxi"
003CC5r 3  7A 78 69     
003CC8r 3               
003CC8r 3               nt_asm_and:     ; not "and" because of conflicts with Forth word
003CC8r 3  04 04        		.byte 4, IM
003CCAr 3  rr rr                        .word nt_asm_and_h
003CCCr 3  rr rr rr rr  		.word xt_asm_and, z_asm_and
003CD0r 3  61 6E 64 2E  		.byte "and."
003CD4r 3               
003CD4r 3               nt_asm_and_h:
003CD4r 3  05 04        		.byte 5, IM
003CD6r 3  rr rr                        .word nt_asm_and_x
003CD8r 3  rr rr rr rr  		.word xt_asm_and_h, z_asm_and_h
003CDCr 3  61 6E 64 2E  		.byte "and.#"
003CE0r 3  23           
003CE1r 3               
003CE1r 3               nt_asm_and_x:
003CE1r 3  05 04        		.byte 5, IM
003CE3r 3  rr rr                        .word nt_asm_and_y
003CE5r 3  rr rr rr rr  		.word xt_asm_and_x, z_asm_and_x
003CE9r 3  61 6E 64 2E  		.byte "and.x"
003CEDr 3  78           
003CEEr 3               
003CEEr 3               nt_asm_and_y:
003CEEr 3  05 04        		.byte 5, IM
003CF0r 3  rr rr                        .word nt_asm_and_z
003CF2r 3  rr rr rr rr  		.word xt_asm_and_y, z_asm_and_y
003CF6r 3  61 6E 64 2E  		.byte "and.y"
003CFAr 3  79           
003CFBr 3               
003CFBr 3               nt_asm_and_z:
003CFBr 3  05 04        		.byte 5, IM
003CFDr 3  rr rr                        .word nt_asm_and_zi
003CFFr 3  rr rr rr rr  		.word xt_asm_and_z, z_asm_and_z
003D03r 3  61 6E 64 2E  		.byte "and.z"
003D07r 3  7A           
003D08r 3               
003D08r 3               nt_asm_and_zi:
003D08r 3  06 04        		.byte 6, IM
003D0Ar 3  rr rr                        .word nt_asm_and_ziy
003D0Cr 3  rr rr rr rr  		.word xt_asm_and_zi, z_asm_and_zi
003D10r 3  61 6E 64 2E  		.byte "and.zi"
003D14r 3  7A 69        
003D16r 3               
003D16r 3               nt_asm_and_ziy:
003D16r 3  07 04        		.byte 7, IM
003D18r 3  rr rr                        .word nt_asm_and_zx
003D1Ar 3  rr rr rr rr  		.word xt_asm_and_ziy, z_asm_and_ziy
003D1Er 3  61 6E 64 2E  		.byte "and.ziy"
003D22r 3  7A 69 79     
003D25r 3               
003D25r 3               nt_asm_and_zx:
003D25r 3  06 04        		.byte 6, IM
003D27r 3  rr rr                        .word nt_asm_and_zxi
003D29r 3  rr rr rr rr  		.word xt_asm_and_zx, z_asm_and_zx
003D2Dr 3  61 6E 64 2E  		.byte "and.zx"
003D31r 3  7A 78        
003D33r 3               
003D33r 3               nt_asm_and_zxi:
003D33r 3  07 04        		.byte 7, IM
003D35r 3  rr rr                        .word nt_asm_asl
003D37r 3  rr rr rr rr  		.word xt_asm_and_zxi, z_asm_and_zxi
003D3Br 3  61 6E 64 2E  		.byte "and.zxi"
003D3Fr 3  7A 78 69     
003D42r 3               
003D42r 3               nt_asm_asl:
003D42r 3  03 04        		.byte 3, IM
003D44r 3  rr rr                        .word nt_asm_asl_a
003D46r 3  rr rr rr rr  		.word xt_asm_asl, z_asm_asl
003D4Ar 3  61 73 6C     		.byte "asl"
003D4Dr 3               
003D4Dr 3               nt_asm_asl_a:
003D4Dr 3  05 04        		.byte 5, IM
003D4Fr 3  rr rr                        .word nt_asm_asl_x
003D51r 3  rr rr rr rr  		.word xt_asm_asl_a, z_asm_asl_a
003D55r 3  61 73 6C 2E  		.byte "asl.a"
003D59r 3  61           
003D5Ar 3               
003D5Ar 3               nt_asm_asl_x:
003D5Ar 3  05 04        		.byte 5, IM
003D5Cr 3  rr rr                        .word nt_asm_asl_z
003D5Er 3  rr rr rr rr  		.word xt_asm_asl_x, z_asm_asl_x
003D62r 3  61 73 6C 2E  		.byte "asl.x"
003D66r 3  78           
003D67r 3               
003D67r 3               nt_asm_asl_z:
003D67r 3  05 04        		.byte 5, IM
003D69r 3  rr rr                        .word nt_asm_asl_zx
003D6Br 3  rr rr rr rr  		.word xt_asm_asl_z, z_asm_asl_z
003D6Fr 3  61 73 6C 2E  		.byte "asl.z"
003D73r 3  7A           
003D74r 3               
003D74r 3               nt_asm_asl_zx:
003D74r 3  06 04        		.byte 6, IM
003D76r 3  rr rr                        .word nt_asm_bcc
003D78r 3  rr rr rr rr  		.word xt_asm_asl_zx, z_asm_asl_zx
003D7Cr 3  61 73 6C 2E  		.byte "asl.zx"
003D80r 3  7A 78        
003D82r 3               
003D82r 3               nt_asm_bcc:
003D82r 3  03 04        		.byte 3, IM
003D84r 3  rr rr                        .word nt_asm_bcs
003D86r 3  rr rr rr rr  		.word xt_asm_bcc, z_asm_bcc
003D8Ar 3  62 63 63     		.byte "bcc"
003D8Dr 3               
003D8Dr 3               nt_asm_bcs:
003D8Dr 3  03 04        		.byte 3, IM
003D8Fr 3  rr rr                        .word nt_asm_beq
003D91r 3  rr rr rr rr  		.word xt_asm_bcs, z_asm_bcs
003D95r 3  62 63 73     		.byte "bcs"
003D98r 3               
003D98r 3               nt_asm_beq:
003D98r 3  03 04        		.byte 3, IM
003D9Ar 3  rr rr                        .word nt_asm_bit
003D9Cr 3  rr rr rr rr  		.word xt_asm_beq, z_asm_beq
003DA0r 3  62 65 71     		.byte "beq"
003DA3r 3               
003DA3r 3               nt_asm_bit:
003DA3r 3  03 04        		.byte 3, IM
003DA5r 3  rr rr                        .word nt_asm_bit_h
003DA7r 3  rr rr rr rr  		.word xt_asm_bit, z_asm_bit
003DABr 3  62 69 74     		.byte "bit"
003DAEr 3               
003DAEr 3               nt_asm_bit_h:
003DAEr 3  05 04        		.byte 5, IM
003DB0r 3  rr rr                        .word nt_asm_bit_x
003DB2r 3  rr rr rr rr  		.word xt_asm_bit_h, z_asm_bit_h
003DB6r 3  62 69 74 2E  		.byte "bit.#"
003DBAr 3  23           
003DBBr 3               
003DBBr 3               nt_asm_bit_x:
003DBBr 3  05 04        		.byte 5, IM
003DBDr 3  rr rr                        .word nt_asm_bit_z
003DBFr 3  rr rr rr rr  		.word xt_asm_bit_x, z_asm_bit_x
003DC3r 3  62 69 74 2E  		.byte "bit.x"
003DC7r 3  78           
003DC8r 3               
003DC8r 3               nt_asm_bit_z:
003DC8r 3  05 04        		.byte 5, IM
003DCAr 3  rr rr                        .word nt_asm_bit_zx
003DCCr 3  rr rr rr rr  		.word xt_asm_bit_z, z_asm_bit_z
003DD0r 3  62 69 74 2E  		.byte "bit.z"
003DD4r 3  7A           
003DD5r 3               
003DD5r 3               nt_asm_bit_zx:
003DD5r 3  06 04        		.byte 6, IM
003DD7r 3  rr rr                        .word nt_asm_bmi
003DD9r 3  rr rr rr rr  		.word xt_asm_bit_zx, z_asm_bit_zx
003DDDr 3  62 69 74 2E  		.byte "bit.zx"
003DE1r 3  7A 78        
003DE3r 3               
003DE3r 3               nt_asm_bmi:
003DE3r 3  03 04        		.byte 3, IM
003DE5r 3  rr rr                        .word nt_asm_bne
003DE7r 3  rr rr rr rr  		.word xt_asm_bmi, z_asm_bmi
003DEBr 3  62 6D 69     		.byte "bmi"
003DEEr 3               
003DEEr 3               nt_asm_bne:
003DEEr 3  03 04        		.byte 3, IM
003DF0r 3  rr rr                        .word nt_asm_bpl
003DF2r 3  rr rr rr rr  		.word xt_asm_bne, z_asm_bne
003DF6r 3  62 6E 65     		.byte "bne"
003DF9r 3               
003DF9r 3               nt_asm_bpl:
003DF9r 3  03 04        		.byte 3, IM
003DFBr 3  rr rr                        .word nt_asm_bra
003DFDr 3  rr rr rr rr  		.word xt_asm_bpl, z_asm_bpl
003E01r 3  62 70 6C     		.byte "bpl"
003E04r 3               
003E04r 3               nt_asm_bra:
003E04r 3  03 04        		.byte 3, IM
003E06r 3  rr rr                        .word nt_asm_brk
003E08r 3  rr rr rr rr  		.word xt_asm_bra, z_asm_bra
003E0Cr 3  62 72 61     		.byte "bra"
003E0Fr 3               
003E0Fr 3               nt_asm_brk:
003E0Fr 3  03 04        		.byte 3, IM
003E11r 3  rr rr                        .word nt_asm_bvc
003E13r 3  rr rr rr rr  		.word xt_asm_brk, z_asm_brk
003E17r 3  62 72 6B     		.byte "brk"
003E1Ar 3               
003E1Ar 3               nt_asm_bvc:
003E1Ar 3  03 04        		.byte 3, IM
003E1Cr 3  rr rr                        .word nt_asm_bvs
003E1Er 3  rr rr rr rr  		.word xt_asm_bvc, z_asm_bvc
003E22r 3  62 76 63     		.byte "bvc"
003E25r 3               
003E25r 3               nt_asm_bvs:
003E25r 3  03 04        		.byte 3, IM
003E27r 3  rr rr                        .word nt_asm_clc
003E29r 3  rr rr rr rr  		.word xt_asm_bvs, z_asm_bvs
003E2Dr 3  62 76 73     		.byte "bvs"
003E30r 3               
003E30r 3               nt_asm_clc:
003E30r 3  03 04        		.byte 3, IM
003E32r 3  rr rr                        .word nt_asm_cld
003E34r 3  rr rr rr rr  		.word xt_asm_clc, z_asm_clc
003E38r 3  63 6C 63     		.byte "clc"
003E3Br 3               
003E3Br 3               nt_asm_cld:
003E3Br 3  03 04        		.byte 3, IM
003E3Dr 3  rr rr                        .word nt_asm_cli
003E3Fr 3  rr rr rr rr  		.word xt_asm_cld, z_asm_cld
003E43r 3  63 6C 64     		.byte "cld"
003E46r 3               
003E46r 3               nt_asm_cli:
003E46r 3  03 04        		.byte 3, IM
003E48r 3  rr rr                        .word nt_asm_clv
003E4Ar 3  rr rr rr rr  		.word xt_asm_cli, z_asm_cli
003E4Er 3  63 6C 69     		.byte "cli"
003E51r 3               
003E51r 3               nt_asm_clv:
003E51r 3  03 04        		.byte 3, IM
003E53r 3  rr rr                        .word nt_asm_cmp
003E55r 3  rr rr rr rr  		.word xt_asm_clv, z_asm_clv
003E59r 3  63 6C 76     		.byte "clv"
003E5Cr 3               
003E5Cr 3               nt_asm_cmp:
003E5Cr 3  03 04        		.byte 3, IM
003E5Er 3  rr rr                        .word nt_asm_cmp_h
003E60r 3  rr rr rr rr  		.word xt_asm_cmp, z_asm_cmp
003E64r 3  63 6D 70     		.byte "cmp"
003E67r 3               
003E67r 3               nt_asm_cmp_h:
003E67r 3  05 04        		.byte 5, IM
003E69r 3  rr rr                        .word nt_asm_cmp_x
003E6Br 3  rr rr rr rr  		.word xt_asm_cmp_h, z_asm_cmp_h
003E6Fr 3  63 6D 70 2E  		.byte "cmp.#"
003E73r 3  23           
003E74r 3               
003E74r 3               nt_asm_cmp_x:
003E74r 3  05 04        		.byte 5, IM
003E76r 3  rr rr                        .word nt_asm_cmp_y
003E78r 3  rr rr rr rr  		.word xt_asm_cmp_x, z_asm_cmp_x
003E7Cr 3  63 6D 70 2E  		.byte "cmp.x"
003E80r 3  78           
003E81r 3               
003E81r 3               nt_asm_cmp_y:
003E81r 3  05 04        		.byte 5, IM
003E83r 3  rr rr                        .word nt_asm_cmp_z
003E85r 3  rr rr rr rr  		.word xt_asm_cmp_y, z_asm_cmp_y
003E89r 3  63 6D 70 2E  		.byte "cmp.y"
003E8Dr 3  79           
003E8Er 3               
003E8Er 3               nt_asm_cmp_z:
003E8Er 3  05 04        		.byte 5, IM
003E90r 3  rr rr                        .word nt_asm_cmp_zi
003E92r 3  rr rr rr rr  		.word xt_asm_cmp_z, z_asm_cmp_z
003E96r 3  63 6D 70 2E  		.byte "cmp.z"
003E9Ar 3  7A           
003E9Br 3               
003E9Br 3               nt_asm_cmp_zi:
003E9Br 3  06 04        		.byte 6, IM
003E9Dr 3  rr rr                        .word nt_asm_cmp_ziy
003E9Fr 3  rr rr rr rr  		.word xt_asm_cmp_zi, z_asm_cmp_zi
003EA3r 3  63 6D 70 2E  		.byte "cmp.zi"
003EA7r 3  7A 69        
003EA9r 3               
003EA9r 3               nt_asm_cmp_ziy:
003EA9r 3  07 04        		.byte 7, IM
003EABr 3  rr rr                        .word nt_asm_cmp_zx
003EADr 3  rr rr rr rr  		.word xt_asm_cmp_ziy, z_asm_cmp_ziy
003EB1r 3  63 6D 70 2E  		.byte "cmp.ziy"
003EB5r 3  7A 69 79     
003EB8r 3               
003EB8r 3               nt_asm_cmp_zx:
003EB8r 3  06 04        		.byte 6, IM
003EBAr 3  rr rr                        .word nt_asm_cmp_zxi
003EBCr 3  rr rr rr rr  		.word xt_asm_cmp_zx, z_asm_cmp_zx
003EC0r 3  63 6D 70 2E  		.byte "cmp.zx"
003EC4r 3  7A 78        
003EC6r 3               
003EC6r 3               nt_asm_cmp_zxi:
003EC6r 3  07 04        		.byte 7, IM
003EC8r 3  rr rr                        .word nt_asm_cpx
003ECAr 3  rr rr rr rr  		.word xt_asm_cmp_zxi, z_asm_cmp_zxi
003ECEr 3  63 6D 70 2E  		.byte "cmp.zxi"
003ED2r 3  7A 78 69     
003ED5r 3               
003ED5r 3               nt_asm_cpx:
003ED5r 3  03 04        		.byte 3, IM
003ED7r 3  rr rr                        .word nt_asm_cpx_h
003ED9r 3  rr rr rr rr  		.word xt_asm_cpx, z_asm_cpx
003EDDr 3  63 70 78     		.byte "cpx"
003EE0r 3               
003EE0r 3               nt_asm_cpx_h:
003EE0r 3  05 04        		.byte 5, IM
003EE2r 3  rr rr                        .word nt_asm_cpx_z
003EE4r 3  rr rr rr rr  		.word xt_asm_cpx_h, z_asm_cpx_h
003EE8r 3  63 70 78 2E  		.byte "cpx.#"
003EECr 3  23           
003EEDr 3               
003EEDr 3               nt_asm_cpx_z:
003EEDr 3  05 04        		.byte 5, IM
003EEFr 3  rr rr                        .word nt_asm_cpy
003EF1r 3  rr rr rr rr  		.word xt_asm_cpx_z, z_asm_cpx_z
003EF5r 3  63 70 78 2E  		.byte "cpx.z"
003EF9r 3  7A           
003EFAr 3               
003EFAr 3               nt_asm_cpy:
003EFAr 3  03 04        		.byte 3, IM
003EFCr 3  rr rr                        .word nt_asm_cpy_h
003EFEr 3  rr rr rr rr  		.word xt_asm_cpy, z_asm_cpy
003F02r 3  63 70 79     		.byte "cpy"
003F05r 3               
003F05r 3               nt_asm_cpy_h:
003F05r 3  05 04        		.byte 5, IM
003F07r 3  rr rr                        .word nt_asm_cpy_z
003F09r 3  rr rr rr rr  		.word xt_asm_cpy_h, z_asm_cpy_h
003F0Dr 3  63 70 79 2E  		.byte "cpy.#"
003F11r 3  23           
003F12r 3               
003F12r 3               nt_asm_cpy_z:
003F12r 3  05 04        		.byte 5, IM
003F14r 3  rr rr                        .word nt_asm_dec
003F16r 3  rr rr rr rr  		.word xt_asm_cpy_z, z_asm_cpy_z
003F1Ar 3  63 70 79 2E  		.byte "cpy.z"
003F1Er 3  7A           
003F1Fr 3               
003F1Fr 3               nt_asm_dec:
003F1Fr 3  03 04        		.byte 3, IM
003F21r 3  rr rr                        .word nt_asm_dec_a
003F23r 3  rr rr rr rr  		.word xt_asm_dec, z_asm_dec
003F27r 3  64 65 63     		.byte "dec"
003F2Ar 3               
003F2Ar 3               nt_asm_dec_a:
003F2Ar 3  05 04        		.byte 5, IM
003F2Cr 3  rr rr                        .word nt_asm_dec_x
003F2Er 3  rr rr rr rr  		.word xt_asm_dec_a, z_asm_dec_a
003F32r 3  64 65 63 2E  		.byte "dec.a"
003F36r 3  61           
003F37r 3               
003F37r 3               nt_asm_dec_x:
003F37r 3  05 04        		.byte 5, IM
003F39r 3  rr rr                        .word nt_asm_dec_z
003F3Br 3  rr rr rr rr  		.word xt_asm_dec_x, z_asm_dec_x
003F3Fr 3  64 65 63 2E  		.byte "dec.x"
003F43r 3  78           
003F44r 3               
003F44r 3               nt_asm_dec_z:
003F44r 3  05 04        		.byte 5, IM
003F46r 3  rr rr                        .word nt_asm_dec_zx
003F48r 3  rr rr rr rr  		.word xt_asm_dec_z, z_asm_dec_z
003F4Cr 3  64 65 63 2E  		.byte "dec.z"
003F50r 3  7A           
003F51r 3               
003F51r 3               nt_asm_dec_zx:
003F51r 3  06 04        		.byte 6, IM
003F53r 3  rr rr                        .word nt_asm_dex
003F55r 3  rr rr rr rr  		.word xt_asm_dec_zx, z_asm_dec_zx
003F59r 3  64 65 63 2E  		.byte "dec.zx"
003F5Dr 3  7A 78        
003F5Fr 3               
003F5Fr 3               nt_asm_dex:
003F5Fr 3  03 04        		.byte 3, IM
003F61r 3  rr rr                        .word nt_asm_dey
003F63r 3  rr rr rr rr  		.word xt_asm_dex, z_asm_dex
003F67r 3  64 65 78     		.byte "dex"
003F6Ar 3               
003F6Ar 3               nt_asm_dey:
003F6Ar 3  03 04        		.byte 3, IM
003F6Cr 3  rr rr                        .word nt_asm_eor
003F6Er 3  rr rr rr rr  		.word xt_asm_dey, z_asm_dey
003F72r 3  64 65 79     		.byte "dey"
003F75r 3               
003F75r 3               nt_asm_eor:
003F75r 3  03 04        		.byte 3, IM
003F77r 3  rr rr                        .word nt_asm_eor_h
003F79r 3  rr rr rr rr  		.word xt_asm_eor, z_asm_eor
003F7Dr 3  65 6F 72     		.byte "eor"
003F80r 3               
003F80r 3               nt_asm_eor_h:
003F80r 3  05 04        		.byte 5, IM
003F82r 3  rr rr                        .word nt_asm_eor_x
003F84r 3  rr rr rr rr  		.word xt_asm_eor_h, z_asm_eor_h
003F88r 3  65 6F 72 2E  		.byte "eor.#"
003F8Cr 3  23           
003F8Dr 3               
003F8Dr 3               nt_asm_eor_x:
003F8Dr 3  05 04        		.byte 5, IM
003F8Fr 3  rr rr                        .word nt_asm_eor_y
003F91r 3  rr rr rr rr  		.word xt_asm_eor_x, z_asm_eor_x
003F95r 3  65 6F 72 2E  		.byte "eor.x"
003F99r 3  78           
003F9Ar 3               
003F9Ar 3               nt_asm_eor_y:
003F9Ar 3  05 04        		.byte 5, IM
003F9Cr 3  rr rr                        .word nt_asm_eor_z
003F9Er 3  rr rr rr rr  		.word xt_asm_eor_y, z_asm_eor_y
003FA2r 3  65 6F 72 2E  		.byte "eor.y"
003FA6r 3  79           
003FA7r 3               
003FA7r 3               nt_asm_eor_z:
003FA7r 3  05 04        		.byte 5, IM
003FA9r 3  rr rr                        .word nt_asm_eor_zi
003FABr 3  rr rr rr rr  		.word xt_asm_eor_z, z_asm_eor_z
003FAFr 3  65 6F 72 2E  		.byte "eor.z"
003FB3r 3  7A           
003FB4r 3               
003FB4r 3               nt_asm_eor_zi:
003FB4r 3  06 04        		.byte 6, IM
003FB6r 3  rr rr                        .word nt_asm_eor_ziy
003FB8r 3  rr rr rr rr  		.word xt_asm_eor_zi, z_asm_eor_zi
003FBCr 3  65 6F 72 2E  		.byte "eor.zi"
003FC0r 3  7A 69        
003FC2r 3               
003FC2r 3               nt_asm_eor_ziy:
003FC2r 3  07 04        		.byte 7, IM
003FC4r 3  rr rr                        .word nt_asm_eor_zx
003FC6r 3  rr rr rr rr  		.word xt_asm_eor_ziy, z_asm_eor_ziy
003FCAr 3  65 6F 72 2E  		.byte "eor.ziy"
003FCEr 3  7A 69 79     
003FD1r 3               
003FD1r 3               nt_asm_eor_zx:
003FD1r 3  06 04        		.byte 6, IM
003FD3r 3  rr rr                        .word nt_asm_eor_zxi
003FD5r 3  rr rr rr rr  		.word xt_asm_eor_zx, z_asm_eor_zx
003FD9r 3  65 6F 72 2E  		.byte "eor.zx"
003FDDr 3  7A 78        
003FDFr 3               
003FDFr 3               nt_asm_eor_zxi:
003FDFr 3  07 04        		.byte 7, IM
003FE1r 3  rr rr                        .word nt_asm_inc
003FE3r 3  rr rr rr rr  		.word xt_asm_eor_zxi, z_asm_eor_zxi
003FE7r 3  65 6F 72 2E  		.byte "eor.zxi"
003FEBr 3  7A 78 69     
003FEEr 3               
003FEEr 3               nt_asm_inc:
003FEEr 3  03 04        		.byte 3, IM
003FF0r 3  rr rr                        .word nt_asm_inc_a
003FF2r 3  rr rr rr rr  		.word xt_asm_inc, z_asm_inc
003FF6r 3  69 6E 63     		.byte "inc"
003FF9r 3               
003FF9r 3               nt_asm_inc_a:
003FF9r 3  05 04        		.byte 5, IM
003FFBr 3  rr rr                        .word nt_asm_inc_x
003FFDr 3  rr rr rr rr  		.word xt_asm_inc_a, z_asm_inc_a
004001r 3  69 6E 63 2E  		.byte "inc.a"
004005r 3  61           
004006r 3               
004006r 3               nt_asm_inc_x:
004006r 3  05 04        		.byte 5, IM
004008r 3  rr rr                        .word nt_asm_inc_z
00400Ar 3  rr rr rr rr  		.word xt_asm_inc_x, z_asm_inc_x
00400Er 3  69 6E 63 2E  		.byte "inc.x"
004012r 3  78           
004013r 3               
004013r 3               nt_asm_inc_z:
004013r 3  05 04        		.byte 5, IM
004015r 3  rr rr                        .word nt_asm_inc_zx
004017r 3  rr rr rr rr  		.word xt_asm_inc_z, z_asm_inc_z
00401Br 3  69 6E 63 2E  		.byte "inc.z"
00401Fr 3  7A           
004020r 3               
004020r 3               nt_asm_inc_zx:
004020r 3  06 04        		.byte 6, IM
004022r 3  rr rr                        .word nt_asm_inx
004024r 3  rr rr rr rr  		.word xt_asm_inc_zx, z_asm_inc_zx
004028r 3  69 6E 63 2E  		.byte "inc.zx"
00402Cr 3  7A 78        
00402Er 3               
00402Er 3               nt_asm_inx:
00402Er 3  03 04        		.byte 3, IM
004030r 3  rr rr                        .word nt_asm_iny
004032r 3  rr rr rr rr  		.word xt_asm_inx, z_asm_inx
004036r 3  69 6E 78     		.byte "inx"
004039r 3               
004039r 3               nt_asm_iny:
004039r 3  03 04        		.byte 3, IM
00403Br 3  rr rr                        .word nt_asm_jmp
00403Dr 3  rr rr rr rr  		.word xt_asm_iny, z_asm_iny
004041r 3  69 6E 79     		.byte "iny"
004044r 3               
004044r 3               nt_asm_jmp:
004044r 3  03 04        		.byte 3, IM
004046r 3  rr rr                        .word nt_asm_jmp_i
004048r 3  rr rr rr rr  		.word xt_asm_jmp, z_asm_jmp
00404Cr 3  6A 6D 70     		.byte "jmp"
00404Fr 3               
00404Fr 3               nt_asm_jmp_i:
00404Fr 3  05 04        		.byte 5, IM
004051r 3  rr rr                        .word nt_asm_jmp_xi
004053r 3  rr rr rr rr  		.word xt_asm_jmp_i, z_asm_jmp_i
004057r 3  6A 6D 70 2E  		.byte "jmp.i"
00405Br 3  69           
00405Cr 3               
00405Cr 3               nt_asm_jmp_xi:
00405Cr 3  06 04        		.byte 6, IM
00405Er 3  rr rr                        .word nt_asm_jsr
004060r 3  rr rr rr rr  		.word xt_asm_jmp_xi, z_asm_jmp_xi
004064r 3  6A 6D 70 2E  		.byte "jmp.xi"
004068r 3  78 69        
00406Ar 3               
00406Ar 3               nt_asm_jsr:
00406Ar 3  03 04        		.byte 3, IM
00406Cr 3  rr rr                        .word nt_asm_lda
00406Er 3  rr rr rr rr  		.word xt_asm_jsr, z_asm_jsr
004072r 3  6A 73 72     		.byte "jsr"
004075r 3               
004075r 3               nt_asm_lda:
004075r 3  03 04        		.byte 3, IM
004077r 3  rr rr                        .word nt_asm_lda_h
004079r 3  rr rr rr rr  		.word xt_asm_lda, z_asm_lda
00407Dr 3  6C 64 61     		.byte "lda"
004080r 3               
004080r 3               nt_asm_lda_h:
004080r 3  05 04        		.byte 5, IM
004082r 3  rr rr                        .word nt_asm_lda_x
004084r 3  rr rr rr rr  		.word xt_asm_lda_h, z_asm_lda_h
004088r 3  6C 64 61 2E  		.byte "lda.#"
00408Cr 3  23           
00408Dr 3               
00408Dr 3               nt_asm_lda_x:
00408Dr 3  05 04        		.byte 5, IM
00408Fr 3  rr rr                        .word nt_asm_lda_y
004091r 3  rr rr rr rr  		.word xt_asm_lda_x, z_asm_lda_x
004095r 3  6C 64 61 2E  		.byte "lda.x"
004099r 3  78           
00409Ar 3               
00409Ar 3               nt_asm_lda_y:
00409Ar 3  05 04        		.byte 5, IM
00409Cr 3  rr rr                        .word nt_asm_lda_z
00409Er 3  rr rr rr rr  		.word xt_asm_lda_y, z_asm_lda_y
0040A2r 3  6C 64 61 2E  		.byte "lda.y"
0040A6r 3  79           
0040A7r 3               
0040A7r 3               nt_asm_lda_z:
0040A7r 3  05 04        		.byte 5, IM
0040A9r 3  rr rr                        .word nt_asm_lda_zi
0040ABr 3  rr rr rr rr  		.word xt_asm_lda_z, z_asm_lda_z
0040AFr 3  6C 64 61 2E  		.byte "lda.z"
0040B3r 3  7A           
0040B4r 3               
0040B4r 3               nt_asm_lda_zi:
0040B4r 3  06 04        		.byte 6, IM
0040B6r 3  rr rr                        .word nt_asm_lda_ziy
0040B8r 3  rr rr rr rr  		.word xt_asm_lda_zi, z_asm_lda_zi
0040BCr 3  6C 64 61 2E  		.byte "lda.zi"
0040C0r 3  7A 69        
0040C2r 3               
0040C2r 3               nt_asm_lda_ziy:
0040C2r 3  07 04        		.byte 7, IM
0040C4r 3  rr rr                        .word nt_asm_lda_zx
0040C6r 3  rr rr rr rr  		.word xt_asm_lda_ziy, z_asm_lda_ziy
0040CAr 3  6C 64 61 2E  		.byte "lda.ziy"
0040CEr 3  7A 69 79     
0040D1r 3               
0040D1r 3               nt_asm_lda_zx:
0040D1r 3  06 04        		.byte 6, IM
0040D3r 3  rr rr                        .word nt_asm_lda_zxi
0040D5r 3  rr rr rr rr  		.word xt_asm_lda_zx, z_asm_lda_zx
0040D9r 3  6C 64 61 2E  		.byte "lda.zx"
0040DDr 3  7A 78        
0040DFr 3               
0040DFr 3               nt_asm_lda_zxi:
0040DFr 3  07 04        		.byte 7, IM
0040E1r 3  rr rr                        .word nt_asm_ldx
0040E3r 3  rr rr rr rr  		.word xt_asm_lda_zxi, z_asm_lda_zxi
0040E7r 3  6C 64 61 2E  		.byte "lda.zxi"
0040EBr 3  7A 78 69     
0040EEr 3               
0040EEr 3               nt_asm_ldx:
0040EEr 3  03 04        		.byte 3, IM
0040F0r 3  rr rr                        .word nt_asm_ldx_h
0040F2r 3  rr rr rr rr  		.word xt_asm_ldx, z_asm_ldx
0040F6r 3  6C 64 78     		.byte "ldx"
0040F9r 3               
0040F9r 3               nt_asm_ldx_h:
0040F9r 3  05 04        		.byte 5, IM
0040FBr 3  rr rr                        .word nt_asm_ldx_y
0040FDr 3  rr rr rr rr  		.word xt_asm_ldx_h, z_asm_ldx_h
004101r 3  6C 64 78 2E  		.byte "ldx.#"
004105r 3  23           
004106r 3               
004106r 3               nt_asm_ldx_y:
004106r 3  05 04        		.byte 5, IM
004108r 3  rr rr                        .word nt_asm_ldx_z
00410Ar 3  rr rr rr rr  		.word xt_asm_ldx_y, z_asm_ldx_y
00410Er 3  6C 64 78 2E  		.byte "ldx.y"
004112r 3  79           
004113r 3               
004113r 3               nt_asm_ldx_z:
004113r 3  05 04        		.byte 5, IM
004115r 3  rr rr                        .word nt_asm_ldx_zy
004117r 3  rr rr rr rr  		.word xt_asm_ldx_z, z_asm_ldx_z
00411Br 3  6C 64 78 2E  		.byte "ldx.z"
00411Fr 3  7A           
004120r 3               
004120r 3               nt_asm_ldx_zy:
004120r 3  06 04        		.byte 6, IM
004122r 3  rr rr                        .word nt_asm_ldy
004124r 3  rr rr rr rr  		.word xt_asm_ldx_zy, z_asm_ldx_zy
004128r 3  6C 64 78 2E  		.byte "ldx.zy"
00412Cr 3  7A 79        
00412Er 3               
00412Er 3               nt_asm_ldy:
00412Er 3  03 04        		.byte 3, IM
004130r 3  rr rr                        .word nt_asm_ldy_h
004132r 3  rr rr rr rr  		.word xt_asm_ldy, z_asm_ldy
004136r 3  6C 64 79     		.byte "ldy"
004139r 3               
004139r 3               nt_asm_ldy_h:
004139r 3  05 04        		.byte 5, IM
00413Br 3  rr rr                        .word nt_asm_ldy_x
00413Dr 3  rr rr rr rr  		.word xt_asm_ldy_h, z_asm_ldy_h
004141r 3  6C 64 79 2E  		.byte "ldy.#"
004145r 3  23           
004146r 3               
004146r 3               nt_asm_ldy_x:
004146r 3  05 04        		.byte 5, IM
004148r 3  rr rr                        .word nt_asm_ldy_z
00414Ar 3  rr rr rr rr  		.word xt_asm_ldy_x, z_asm_ldy_x
00414Er 3  6C 64 79 2E  		.byte "ldy.x"
004152r 3  78           
004153r 3               
004153r 3               nt_asm_ldy_z:
004153r 3  05 04        		.byte 5, IM
004155r 3  rr rr                        .word nt_asm_ldy_zx
004157r 3  rr rr rr rr  		.word xt_asm_ldy_z, z_asm_ldy_z
00415Br 3  6C 64 79 2E  		.byte "ldy.z"
00415Fr 3  7A           
004160r 3               
004160r 3               nt_asm_ldy_zx:
004160r 3  06 04        		.byte 6, IM
004162r 3  rr rr                        .word nt_asm_lsr
004164r 3  rr rr rr rr  		.word xt_asm_ldy_zx, z_asm_ldy_zx
004168r 3  6C 64 79 2E  		.byte "ldy.zx"
00416Cr 3  7A 78        
00416Er 3               
00416Er 3               nt_asm_lsr:
00416Er 3  03 04        		.byte 3, IM
004170r 3  rr rr                        .word nt_asm_lsr_a
004172r 3  rr rr rr rr  		.word xt_asm_lsr, z_asm_lsr
004176r 3  6C 73 72     		.byte "lsr"
004179r 3               
004179r 3               nt_asm_lsr_a:
004179r 3  05 04        		.byte 5, IM
00417Br 3  rr rr                        .word nt_asm_lsr_x
00417Dr 3  rr rr rr rr  		.word xt_asm_lsr_a, z_asm_lsr_a
004181r 3  6C 73 72 2E  		.byte "lsr.a"
004185r 3  61           
004186r 3               
004186r 3               nt_asm_lsr_x:
004186r 3  05 04        		.byte 5, IM
004188r 3  rr rr                        .word nt_asm_lsr_z
00418Ar 3  rr rr rr rr  		.word xt_asm_lsr_x, z_asm_lsr_x
00418Er 3  6C 73 72 2E  		.byte "lsr.x"
004192r 3  78           
004193r 3               
004193r 3               nt_asm_lsr_z:
004193r 3  05 04        		.byte 5, IM
004195r 3  rr rr                        .word nt_asm_lsr_zx
004197r 3  rr rr rr rr  		.word xt_asm_lsr_z, z_asm_lsr_z
00419Br 3  6C 73 72 2E  		.byte "lsr.z"
00419Fr 3  7A           
0041A0r 3               
0041A0r 3               nt_asm_lsr_zx:
0041A0r 3  06 04        		.byte 6, IM
0041A2r 3  rr rr                        .word nt_asm_nop
0041A4r 3  rr rr rr rr  		.word xt_asm_lsr_zx, z_asm_lsr_zx
0041A8r 3  6C 73 72 2E  		.byte "lsr.zx"
0041ACr 3  7A 78        
0041AEr 3               
0041AEr 3               nt_asm_nop:
0041AEr 3  03 04        		.byte 3, IM
0041B0r 3  rr rr                        .word nt_asm_ora
0041B2r 3  rr rr rr rr  		.word xt_asm_nop, z_asm_nop
0041B6r 3  6E 6F 70     		.byte "nop"
0041B9r 3               
0041B9r 3               nt_asm_ora:
0041B9r 3  03 04        		.byte 3, IM
0041BBr 3  rr rr                        .word nt_asm_ora_h
0041BDr 3  rr rr rr rr  		.word xt_asm_ora, z_asm_ora
0041C1r 3  6F 72 61     		.byte "ora"
0041C4r 3               
0041C4r 3               nt_asm_ora_h:
0041C4r 3  05 04        		.byte 5, IM
0041C6r 3  rr rr                        .word nt_asm_ora_x
0041C8r 3  rr rr rr rr  		.word xt_asm_ora_h, z_asm_ora_h
0041CCr 3  6F 72 61 2E  		.byte "ora.#"
0041D0r 3  23           
0041D1r 3               
0041D1r 3               nt_asm_ora_x:
0041D1r 3  05 04        		.byte 5, IM
0041D3r 3  rr rr                        .word nt_asm_ora_y
0041D5r 3  rr rr rr rr  		.word xt_asm_ora_x, z_asm_ora_x
0041D9r 3  6F 72 61 2E  		.byte "ora.x"
0041DDr 3  78           
0041DEr 3               
0041DEr 3               nt_asm_ora_y:
0041DEr 3  05 04        		.byte 5, IM
0041E0r 3  rr rr                        .word nt_asm_ora_z
0041E2r 3  rr rr rr rr  		.word xt_asm_ora_y, z_asm_ora_y
0041E6r 3  6F 72 61 2E  		.byte "ora.y"
0041EAr 3  79           
0041EBr 3               
0041EBr 3               nt_asm_ora_z:
0041EBr 3  05 04        		.byte 5, IM
0041EDr 3  rr rr                        .word nt_asm_ora_zi
0041EFr 3  rr rr rr rr  		.word xt_asm_ora_z, z_asm_ora_z
0041F3r 3  6F 72 61 2E  		.byte "ora.z"
0041F7r 3  7A           
0041F8r 3               
0041F8r 3               nt_asm_ora_zi:
0041F8r 3  06 04        		.byte 6, IM
0041FAr 3  rr rr                        .word nt_asm_ora_ziy
0041FCr 3  rr rr rr rr  		.word xt_asm_ora_zi, z_asm_ora_zi
004200r 3  6F 72 61 2E  		.byte "ora.zi"
004204r 3  7A 69        
004206r 3               
004206r 3               nt_asm_ora_ziy:
004206r 3  07 04        		.byte 7, IM
004208r 3  rr rr                        .word nt_asm_ora_zx
00420Ar 3  rr rr rr rr  		.word xt_asm_ora_ziy, z_asm_ora_ziy
00420Er 3  6F 72 61 2E  		.byte "ora.ziy"
004212r 3  7A 69 79     
004215r 3               
004215r 3               nt_asm_ora_zx:
004215r 3  06 04        		.byte 6, IM
004217r 3  rr rr                        .word nt_asm_ora_zxi
004219r 3  rr rr rr rr  		.word xt_asm_ora_zx, z_asm_ora_zx
00421Dr 3  6F 72 61 2E  		.byte "ora.zx"
004221r 3  7A 78        
004223r 3               
004223r 3               nt_asm_ora_zxi:
004223r 3  07 04        		.byte 7, IM
004225r 3  rr rr                        .word nt_asm_pha
004227r 3  rr rr rr rr  		.word xt_asm_ora_zxi, z_asm_ora_zxi
00422Br 3  6F 72 61 2E  		.byte "ora.zxi"
00422Fr 3  7A 78 69     
004232r 3               
004232r 3               nt_asm_pha:
004232r 3  03 04        		.byte 3, IM
004234r 3  rr rr                        .word nt_asm_php
004236r 3  rr rr rr rr  		.word xt_asm_pha, z_asm_pha
00423Ar 3  70 68 61     		.byte "pha"
00423Dr 3               
00423Dr 3               nt_asm_php:
00423Dr 3  03 04        		.byte 3, IM
00423Fr 3  rr rr                        .word nt_asm_phx
004241r 3  rr rr rr rr  		.word xt_asm_php, z_asm_php
004245r 3  70 68 70     		.byte "php"
004248r 3               
004248r 3               nt_asm_phx:
004248r 3  03 04        		.byte 3, IM
00424Ar 3  rr rr                        .word nt_asm_phy
00424Cr 3  rr rr rr rr  		.word xt_asm_phx, z_asm_phx
004250r 3  70 68 78     		.byte "phx"
004253r 3               
004253r 3               nt_asm_phy:
004253r 3  03 04        		.byte 3, IM
004255r 3  rr rr                        .word nt_asm_pla
004257r 3  rr rr rr rr  		.word xt_asm_phy, z_asm_phy
00425Br 3  70 68 79     		.byte "phy"
00425Er 3               
00425Er 3               nt_asm_pla:
00425Er 3  03 04        		.byte 3, IM
004260r 3  rr rr                        .word nt_asm_plp
004262r 3  rr rr rr rr  		.word xt_asm_pla, z_asm_pla
004266r 3  70 6C 61     		.byte "pla"
004269r 3               
004269r 3               nt_asm_plp:
004269r 3  03 04        		.byte 3, IM
00426Br 3  rr rr                        .word nt_asm_plx
00426Dr 3  rr rr rr rr  		.word xt_asm_plp, z_asm_plp
004271r 3  70 6C 70     		.byte "plp"
004274r 3               
004274r 3               nt_asm_plx:
004274r 3  03 04        		.byte 3, IM
004276r 3  rr rr                        .word nt_asm_ply
004278r 3  rr rr rr rr  		.word xt_asm_plx, z_asm_plx
00427Cr 3  70 6C 78     		.byte "plx"
00427Fr 3               
00427Fr 3               nt_asm_ply:
00427Fr 3  03 04        		.byte 3, IM
004281r 3  rr rr                        .word nt_asm_rol
004283r 3  rr rr rr rr  		.word xt_asm_ply, z_asm_ply
004287r 3  70 6C 79     		.byte "ply"
00428Ar 3               
00428Ar 3               nt_asm_rol:
00428Ar 3  03 04        		.byte 3, IM
00428Cr 3  rr rr                        .word nt_asm_rol_a
00428Er 3  rr rr rr rr  		.word xt_asm_rol, z_asm_rol
004292r 3  72 6F 6C     		.byte "rol"
004295r 3               
004295r 3               nt_asm_rol_a:
004295r 3  05 04        		.byte 5, IM
004297r 3  rr rr                        .word nt_asm_rol_x
004299r 3  rr rr rr rr  		.word xt_asm_rol_a, z_asm_rol_a
00429Dr 3  72 6F 6C 2E  		.byte "rol.a"
0042A1r 3  61           
0042A2r 3               
0042A2r 3               nt_asm_rol_x:
0042A2r 3  05 04        		.byte 5, IM
0042A4r 3  rr rr                        .word nt_asm_rol_z
0042A6r 3  rr rr rr rr  		.word xt_asm_rol_x, z_asm_rol_x
0042AAr 3  72 6F 6C 2E  		.byte "rol.x"
0042AEr 3  78           
0042AFr 3               
0042AFr 3               nt_asm_rol_z:
0042AFr 3  05 04        		.byte 5, IM
0042B1r 3  rr rr                        .word nt_asm_rol_zx
0042B3r 3  rr rr rr rr  		.word xt_asm_rol_z, z_asm_rol_z
0042B7r 3  72 6F 6C 2E  		.byte "rol.z"
0042BBr 3  7A           
0042BCr 3               
0042BCr 3               nt_asm_rol_zx:
0042BCr 3  06 04        		.byte 6, IM
0042BEr 3  rr rr                        .word nt_asm_ror
0042C0r 3  rr rr rr rr  		.word xt_asm_rol_zx, z_asm_rol_zx
0042C4r 3  72 6F 6C 2E  		.byte "rol.zx"
0042C8r 3  7A 78        
0042CAr 3               
0042CAr 3               nt_asm_ror:
0042CAr 3  03 04        		.byte 3, IM
0042CCr 3  rr rr                        .word nt_asm_ror_a
0042CEr 3  rr rr rr rr  		.word xt_asm_ror, z_asm_ror
0042D2r 3  72 6F 72     		.byte "ror"
0042D5r 3               
0042D5r 3               nt_asm_ror_a:
0042D5r 3  05 04        		.byte 5, IM
0042D7r 3  rr rr                        .word nt_asm_ror_x
0042D9r 3  rr rr rr rr  		.word xt_asm_ror_a, z_asm_ror_a
0042DDr 3  72 6F 72 2E  		.byte "ror.a"
0042E1r 3  61           
0042E2r 3               
0042E2r 3               nt_asm_ror_x:
0042E2r 3  05 04        		.byte 5, IM
0042E4r 3  rr rr                        .word nt_asm_ror_z
0042E6r 3  rr rr rr rr  		.word xt_asm_ror_x, z_asm_ror_x
0042EAr 3  72 6F 72 2E  		.byte "ror.x"
0042EEr 3  78           
0042EFr 3               
0042EFr 3               nt_asm_ror_z:
0042EFr 3  05 04        		.byte 5, IM
0042F1r 3  rr rr                        .word nt_asm_ror_zx
0042F3r 3  rr rr rr rr  		.word xt_asm_ror_z, z_asm_ror_z
0042F7r 3  72 6F 72 2E  		.byte "ror.z"
0042FBr 3  7A           
0042FCr 3               
0042FCr 3               nt_asm_ror_zx:
0042FCr 3  06 04        		.byte 6, IM
0042FEr 3  rr rr                        .word nt_asm_rti
004300r 3  rr rr rr rr  		.word xt_asm_ror_zx, z_asm_ror_zx
004304r 3  72 6F 72 2E  		.byte "ror.zx"
004308r 3  7A 78        
00430Ar 3               
00430Ar 3               nt_asm_rti:
00430Ar 3  03 04        		.byte 3, IM
00430Cr 3  rr rr                        .word nt_asm_rts
00430Er 3  rr rr rr rr  		.word xt_asm_rti, z_asm_rti
004312r 3  72 74 69     		.byte "rti"
004315r 3               
004315r 3               nt_asm_rts:
004315r 3  03 04        		.byte 3, IM
004317r 3  rr rr                        .word nt_asm_sbc
004319r 3  rr rr rr rr  		.word xt_asm_rts, z_asm_rts
00431Dr 3  72 74 73     		.byte "rts"
004320r 3               
004320r 3               nt_asm_sbc:
004320r 3  03 04        		.byte 3, IM
004322r 3  rr rr                        .word nt_asm_sbc_h
004324r 3  rr rr rr rr  		.word xt_asm_sbc, z_asm_sbc
004328r 3  73 62 63     		.byte "sbc"
00432Br 3               
00432Br 3               nt_asm_sbc_h:
00432Br 3  05 04        		.byte 5, IM
00432Dr 3  rr rr                        .word nt_asm_sbc_x
00432Fr 3  rr rr rr rr  		.word xt_asm_sbc_h, z_asm_sbc_h
004333r 3  73 62 63 2E  		.byte "sbc.#"
004337r 3  23           
004338r 3               
004338r 3               nt_asm_sbc_x:
004338r 3  05 04        		.byte 5, IM
00433Ar 3  rr rr                        .word nt_asm_sbc_y
00433Cr 3  rr rr rr rr  		.word xt_asm_sbc_x, z_asm_sbc_x
004340r 3  73 62 63 2E  		.byte "sbc.x"
004344r 3  78           
004345r 3               
004345r 3               nt_asm_sbc_y:
004345r 3  05 04        		.byte 5, IM
004347r 3  rr rr                        .word nt_asm_sbc_z
004349r 3  rr rr rr rr  		.word xt_asm_sbc_y, z_asm_sbc_y
00434Dr 3  73 62 63 2E  		.byte "sbc.y"
004351r 3  79           
004352r 3               
004352r 3               nt_asm_sbc_z:
004352r 3  05 04        		.byte 5, IM
004354r 3  rr rr                        .word nt_asm_sbc_zi
004356r 3  rr rr rr rr  		.word xt_asm_sbc_z, z_asm_sbc_z
00435Ar 3  73 62 63 2E  		.byte "sbc.z"
00435Er 3  7A           
00435Fr 3               
00435Fr 3               nt_asm_sbc_zi:
00435Fr 3  06 04        		.byte 6, IM
004361r 3  rr rr                        .word nt_asm_sbc_ziy
004363r 3  rr rr rr rr  		.word xt_asm_sbc_zi, z_asm_sbc_zi
004367r 3  73 62 63 2E  		.byte "sbc.zi"
00436Br 3  7A 69        
00436Dr 3               
00436Dr 3               nt_asm_sbc_ziy:
00436Dr 3  07 04        		.byte 7, IM
00436Fr 3  rr rr                        .word nt_asm_sbc_zx
004371r 3  rr rr rr rr  		.word xt_asm_sbc_ziy, z_asm_sbc_ziy
004375r 3  73 62 63 2E  		.byte "sbc.ziy"
004379r 3  7A 69 79     
00437Cr 3               
00437Cr 3               nt_asm_sbc_zx:
00437Cr 3  06 04        		.byte 6, IM
00437Er 3  rr rr                        .word nt_asm_sbc_zxi
004380r 3  rr rr rr rr  		.word xt_asm_sbc_zx, z_asm_sbc_zx
004384r 3  73 62 63 2E  		.byte "sbc.zx"
004388r 3  7A 78        
00438Ar 3               
00438Ar 3               nt_asm_sbc_zxi:
00438Ar 3  07 04        		.byte 7, IM
00438Cr 3  rr rr                        .word nt_asm_sec
00438Er 3  rr rr rr rr  		.word xt_asm_sbc_zxi, z_asm_sbc_zxi
004392r 3  73 62 63 2E  		.byte "sbc.zxi"
004396r 3  7A 78 69     
004399r 3               
004399r 3               nt_asm_sec:
004399r 3  03 04        		.byte 3, IM
00439Br 3  rr rr                        .word nt_asm_sed
00439Dr 3  rr rr rr rr  		.word xt_asm_sec, z_asm_sec
0043A1r 3  73 65 63     		.byte "sec"
0043A4r 3               
0043A4r 3               nt_asm_sed:
0043A4r 3  03 04        		.byte 3, IM
0043A6r 3  rr rr                        .word nt_asm_sei
0043A8r 3  rr rr rr rr  		.word xt_asm_sed, z_asm_sed
0043ACr 3  73 65 64     		.byte "sed"
0043AFr 3               
0043AFr 3               nt_asm_sei:
0043AFr 3  03 04        		.byte 3, IM
0043B1r 3  rr rr                        .word nt_asm_sta
0043B3r 3  rr rr rr rr  		.word xt_asm_sei, z_asm_sei
0043B7r 3  73 65 69     		.byte "sei"
0043BAr 3               
0043BAr 3               nt_asm_sta:
0043BAr 3  03 04        		.byte 3, IM
0043BCr 3  rr rr                        .word nt_asm_sta_x
0043BEr 3  rr rr rr rr  		.word xt_asm_sta, z_asm_sta
0043C2r 3  73 74 61     		.byte "sta"
0043C5r 3               
0043C5r 3               nt_asm_sta_x:
0043C5r 3  05 04        		.byte 5, IM
0043C7r 3  rr rr                        .word nt_asm_sta_y
0043C9r 3  rr rr rr rr  		.word xt_asm_sta_x, z_asm_sta_x
0043CDr 3  73 74 61 2E  		.byte "sta.x"
0043D1r 3  78           
0043D2r 3               
0043D2r 3               nt_asm_sta_y:
0043D2r 3  05 04        		.byte 5, IM
0043D4r 3  rr rr                        .word nt_asm_sta_z
0043D6r 3  rr rr rr rr  		.word xt_asm_sta_y, z_asm_sta_y
0043DAr 3  73 74 61 2E  		.byte "sta.y"
0043DEr 3  79           
0043DFr 3               
0043DFr 3               nt_asm_sta_z:
0043DFr 3  05 04        		.byte 5, IM
0043E1r 3  rr rr                        .word nt_asm_sta_zi
0043E3r 3  rr rr rr rr  		.word xt_asm_sta_z, z_asm_sta_z
0043E7r 3  73 74 61 2E  		.byte "sta.z"
0043EBr 3  7A           
0043ECr 3               
0043ECr 3               nt_asm_sta_zi:
0043ECr 3  06 04        		.byte 6, IM
0043EEr 3  rr rr                        .word nt_asm_sta_ziy
0043F0r 3  rr rr rr rr  		.word xt_asm_sta_zi, z_asm_sta_zi
0043F4r 3  73 74 61 2E  		.byte "sta.zi"
0043F8r 3  7A 69        
0043FAr 3               
0043FAr 3               nt_asm_sta_ziy:
0043FAr 3  07 04        		.byte 7, IM
0043FCr 3  rr rr                        .word nt_asm_sta_zx
0043FEr 3  rr rr rr rr  		.word xt_asm_sta_ziy, z_asm_sta_ziy
004402r 3  73 74 61 2E  		.byte "sta.ziy"
004406r 3  7A 69 79     
004409r 3               
004409r 3               nt_asm_sta_zx:
004409r 3  06 04        		.byte 6, IM
00440Br 3  rr rr                        .word nt_asm_sta_zxi
00440Dr 3  rr rr rr rr  		.word xt_asm_sta_zx, z_asm_sta_zx
004411r 3  73 74 61 2E  		.byte "sta.zx"
004415r 3  7A 78        
004417r 3               
004417r 3               nt_asm_sta_zxi:
004417r 3  07 04        		.byte 7, IM
004419r 3  rr rr                        .word nt_asm_stx
00441Br 3  rr rr rr rr  		.word xt_asm_sta_zxi, z_asm_sta_zxi
00441Fr 3  73 74 61 2E  		.byte "sta.zxi"
004423r 3  7A 78 69     
004426r 3               
004426r 3               nt_asm_stx:
004426r 3  03 04        		.byte 3, IM
004428r 3  rr rr                        .word nt_asm_stx_z
00442Ar 3  rr rr rr rr  		.word xt_asm_stx, z_asm_stx
00442Er 3  73 74 78     		.byte "stx"
004431r 3               
004431r 3               nt_asm_stx_z:
004431r 3  05 04        		.byte 5, IM
004433r 3  rr rr                        .word nt_asm_stx_zy
004435r 3  rr rr rr rr  		.word xt_asm_stx_z, z_asm_stx_z
004439r 3  73 74 78 2E  		.byte "stx.z"
00443Dr 3  7A           
00443Er 3               
00443Er 3               nt_asm_stx_zy:
00443Er 3  06 04        		.byte 6, IM
004440r 3  rr rr                        .word nt_asm_sty
004442r 3  rr rr rr rr  		.word xt_asm_stx_zy, z_asm_stx_zy
004446r 3  73 74 78 2E  		.byte "stx.zy"
00444Ar 3  7A 79        
00444Cr 3               
00444Cr 3               nt_asm_sty:
00444Cr 3  03 04        		.byte 3, IM
00444Er 3  rr rr                        .word nt_asm_sty_z
004450r 3  rr rr rr rr  		.word xt_asm_sty, z_asm_sty
004454r 3  73 74 79     		.byte "sty"
004457r 3               
004457r 3               nt_asm_sty_z:
004457r 3  05 04        		.byte 5, IM
004459r 3  rr rr                        .word nt_asm_sty_zx
00445Br 3  rr rr rr rr  		.word xt_asm_sty_z, z_asm_sty_z
00445Fr 3  73 74 79 2E  		.byte "sty.z"
004463r 3  7A           
004464r 3               
004464r 3               nt_asm_sty_zx:
004464r 3  06 04        		.byte 6, IM
004466r 3  rr rr                        .word nt_asm_stz
004468r 3  rr rr rr rr  		.word xt_asm_sty_zx, z_asm_sty_zx
00446Cr 3  73 74 79 2E  		.byte "sty.zx"
004470r 3  7A 78        
004472r 3               
004472r 3               nt_asm_stz:
004472r 3  03 04        		.byte 3, IM
004474r 3  rr rr                        .word nt_asm_stz_x
004476r 3  rr rr rr rr  		.word xt_asm_stz, z_asm_stz
00447Ar 3  73 74 7A     		.byte "stz"
00447Dr 3               
00447Dr 3               nt_asm_stz_x:
00447Dr 3  05 04        		.byte 5, IM
00447Fr 3  rr rr                        .word nt_asm_stz_z
004481r 3  rr rr rr rr  		.word xt_asm_stz_x, z_asm_stz_x
004485r 3  73 74 7A 2E  		.byte "stz.x"
004489r 3  78           
00448Ar 3               
00448Ar 3               nt_asm_stz_z:
00448Ar 3  05 04        		.byte 5, IM
00448Cr 3  rr rr                        .word nt_asm_stz_zx
00448Er 3  rr rr rr rr  		.word xt_asm_stz_z, z_asm_stz_z
004492r 3  73 74 7A 2E  		.byte "stz.z"
004496r 3  7A           
004497r 3               
004497r 3               nt_asm_stz_zx:
004497r 3  06 04        		.byte 6, IM
004499r 3  rr rr                        .word nt_asm_tax
00449Br 3  rr rr rr rr  		.word xt_asm_stz_zx, z_asm_stz_zx
00449Fr 3  73 74 7A 2E  		.byte "stz.zx"
0044A3r 3  7A 78        
0044A5r 3               
0044A5r 3               nt_asm_tax:
0044A5r 3  03 04        		.byte 3, IM
0044A7r 3  rr rr                        .word nt_asm_tay
0044A9r 3  rr rr rr rr  		.word xt_asm_tax, z_asm_tax
0044ADr 3  74 61 78     		.byte "tax"
0044B0r 3               
0044B0r 3               nt_asm_tay:
0044B0r 3  03 04        		.byte 3, IM
0044B2r 3  rr rr                        .word nt_asm_trb
0044B4r 3  rr rr rr rr  		.word xt_asm_tay, z_asm_tay
0044B8r 3  74 61 79     		.byte "tay"
0044BBr 3               
0044BBr 3               nt_asm_trb:
0044BBr 3  03 04        		.byte 3, IM
0044BDr 3  rr rr                        .word nt_asm_trb_z
0044BFr 3  rr rr rr rr  		.word xt_asm_trb, z_asm_trb
0044C3r 3  74 72 62     		.byte "trb"
0044C6r 3               
0044C6r 3               nt_asm_trb_z:
0044C6r 3  05 04        		.byte 5, IM
0044C8r 3  rr rr                        .word nt_asm_tsb
0044CAr 3  rr rr rr rr  		.word xt_asm_trb_z, z_asm_trb_z
0044CEr 3  74 72 62 2E  		.byte "trb.z"
0044D2r 3  7A           
0044D3r 3               
0044D3r 3               nt_asm_tsb:
0044D3r 3  03 04        		.byte 3, IM
0044D5r 3  rr rr                        .word nt_asm_tsb_z
0044D7r 3  rr rr rr rr  		.word xt_asm_tsb, z_asm_tsb
0044DBr 3  74 73 62     		.byte "tsb"
0044DEr 3               
0044DEr 3               nt_asm_tsb_z:
0044DEr 3  05 04        		.byte 5, IM
0044E0r 3  rr rr                        .word nt_asm_tsx
0044E2r 3  rr rr rr rr  		.word xt_asm_tsb_z, z_asm_tsb_z
0044E6r 3  74 73 62 2E  		.byte "tsb.z"
0044EAr 3  7A           
0044EBr 3               
0044EBr 3               nt_asm_tsx:
0044EBr 3  03 04        		.byte 3, IM
0044EDr 3  rr rr                        .word nt_asm_txa
0044EFr 3  rr rr rr rr  		.word xt_asm_tsx, z_asm_tsx
0044F3r 3  74 73 78     		.byte "tsx"
0044F6r 3               
0044F6r 3               nt_asm_txa:
0044F6r 3  03 04        		.byte 3, IM
0044F8r 3  rr rr                        .word nt_asm_txs
0044FAr 3  rr rr rr rr  		.word xt_asm_txa, z_asm_txa
0044FEr 3  74 78 61     		.byte "txa"
004501r 3               
004501r 3               nt_asm_txs:
004501r 3  03 04        		.byte 3, IM
004503r 3  rr rr                        .word nt_asm_tya
004505r 3  rr rr rr rr  		.word xt_asm_txs, z_asm_txs
004509r 3  74 78 73     		.byte "txs"
00450Cr 3               
00450Cr 3               nt_asm_tya:
00450Cr 3  03 04        		.byte 3, IM
00450Er 3  rr rr                        .word nt_asm_arrow
004510r 3  rr rr rr rr  		.word xt_asm_tya, z_asm_tya
004514r 3  74 79 61     		.byte "tya"
004517r 3               
004517r 3               ; Assembler pseudo-instructions, directives and macros
004517r 3               
004517r 3               nt_asm_arrow:   ; uses same code as HERE, but immediate
004517r 3  03 04                        .byte 3, IM
004519r 3  rr rr                        .word nt_asm_back_jump
00451Br 3  rr rr rr rr                  .word xt_asm_arrow, z_asm_arrow
00451Fr 3  2D 2D 3E                     .byte "-->"
004522r 3               
004522r 3               
004522r 3               nt_asm_back_jump:  ; syntactic sugar, does nothing
004522r 3  02 04                        .byte 2, IM
004524r 3  rr rr                        .word nt_asm_back_branch
004526r 3  rr rr rr rr                  .word xt_asm_back_jump, z_asm_back_jump
00452Ar 3  3C 6A                        .byte "<j"
00452Cr 3               
00452Cr 3               nt_asm_back_branch:
00452Cr 3  02 04                        .byte 2, IM
00452Er 3  rr rr                        .word nt_asm_push_a
004530r 3  rr rr rr rr                  .word xt_asm_back_branch, z_asm_back_branch
004534r 3  3C 62                        .byte "<b"
004536r 3               
004536r 3               nt_asm_push_a:
004536r 3  06 04                        .byte 6, IM
004538r 3  00 00                        .word 0000
00453Ar 3  rr rr rr rr                  .word xt_asm_push_a, z_asm_push_a
00453Er 3  70 75 73 68                  .byte "push-a"
004542r 3  2D 61        
004544r 3               
004544r 3               .endif
004544r 3               
004544r 3               ; END of ASSEMBLER-WORDLIST
004544r 3               
004544r 3               ; END
004544r 3               
004544r 2                   .include "strings.s"          ; Headers of native words
004544r 3               ; List of Strings for Tali Forth 2
004544r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
004544r 3               ; First version: 01. Apr 2016 (for Liara Forth)
004544r 3               ; This version: 28. Dec 2018
004544r 3               
004544r 3               ; This file is included by taliforth.asm
004544r 3               
004544r 3               ; ## GENERAL STRINGS
004544r 3               
004544r 3               ; All general strings must be zero-terminated, names start with "s_",
004544r 3               ; aliases with "str_"
004544r 3               
004544r 3               str_ok =              0
004544r 3               str_compile =         1
004544r 3               str_redefined =       2
004544r 3               str_wid_forth =       3
004544r 3               str_abc_lower =       4
004544r 3               str_abc_upper =       5
004544r 3               str_wid_editor =      6
004544r 3               str_wid_assembler =   7
004544r 3               str_wid_root =        8
004544r 3               str_see_flags =       9
004544r 3               str_see_nt =         10
004544r 3               str_see_xt =         11
004544r 3               str_see_size =       12
004544r 3               str_disasm_lit     = 13
004544r 3               str_disasm_sdc     = 14
004544r 3               str_disasm_bra     = 15
004544r 3               
004544r 3               ; Since we can't fit a 16-bit address in a register, we use indexes as offsets
004544r 3               ; to tables as error and string numbers.
004544r 3               string_table:
004544r 3  rr rr rr rr          .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
004548r 3  rr rr rr rr  
00454Cr 3  rr rr        
00454Er 3  rr rr rr rr          .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
004552r 3  rr rr rr rr  
004556r 3  rr rr rr rr          .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
00455Ar 3  rr rr rr rr  
00455Er 3               
00455Er 3  20 6F 6B 00  s_ok:         .byte " ok", 0         ; note space at beginning
004562r 3  20 63 6F 6D  s_compiled:   .byte " compiled", 0   ; note space at beginning
004566r 3  70 69 6C 65  
00456Ar 3  64 00        
00456Cr 3  72 65 64 65  s_redefined:  .byte "redefined ", 0  ; note space at end
004570r 3  66 69 6E 65  
004574r 3  64 20 00     
004577r 3               
004577r 3  30 31 32 33  s_abc_lower:  .byte "0123456789abcdefghijklmnopqrstuvwxyz"
00457Br 3  34 35 36 37  
00457Fr 3  38 39 61 62  
00459Br 3  30 31 32 33  s_abc_upper:  .byte "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
00459Fr 3  34 35 36 37  
0045A3r 3  38 39 41 42  
0045BFr 3               
0045BFr 3  41 73 73 65  s_wid_asm:    .byte "Assembler ", 0  ; Wordlist ID 2, note space at end
0045C3r 3  6D 62 6C 65  
0045C7r 3  72 20 00     
0045CAr 3  45 64 69 74  s_wid_editor: .byte "Editor ", 0     ; Wordlist ID 1, note space at end
0045CEr 3  6F 72 20 00  
0045D2r 3  46 6F 72 74  s_wid_forth:  .byte "Forth ", 0      ; Wordlist ID 0, note space at end
0045D6r 3  68 20 00     
0045D9r 3  52 6F 6F 74  s_wid_root:   .byte "Root ", 0       ; Wordlist ID 3, note space at end
0045DDr 3  20 00        
0045DFr 3               
0045DFr 3  66 6C 61 67  s_see_flags:  .byte "flags (CO AN IM NN UF HC): ", 0
0045E3r 3  73 20 28 43  
0045E7r 3  4F 20 41 4E  
0045FBr 3  6E 74 3A 20  s_see_nt:     .byte "nt: ", 0
0045FFr 3  00           
004600r 3  78 74 3A 20  s_see_xt:     .byte "xt: ", 0
004604r 3  00           
004605r 3  73 69 7A 65  s_see_size:   .byte "size (decimal): ", 0
004609r 3  20 28 64 65  
00460Dr 3  63 69 6D 61  
004616r 3  4C 49 54 45  s_disasm_lit: .byte "LITERAL ", 0
00461Ar 3  52 41 4C 20  
00461Er 3  00           
00461Fr 3  53 54 41 43  s_disasm_sdc: .byte "STACK DEPTH CHECK", 0
004623r 3  4B 20 44 45  
004627r 3  50 54 48 20  
004631r 3  42 52 41 4E  s_disasm_bra: .byte "BRANCH ",0
004635r 3  43 48 20 00  
004639r 3               
004639r 3               
004639r 3               ; ## ERROR STRINGS
004639r 3               
004639r 3               ; All error strings must be zero-terminated, all names start with "es_",
004639r 3               ; aliases with "err_". If the string texts are changed, the test suite must be
004639r 3               ; as well
004639r 3               
004639r 3               err_allot =        0
004639r 3               err_badsource =    1
004639r 3               err_compileonly =  2
004639r 3               err_defer =        3
004639r 3               err_divzero =      4
004639r 3               err_noname =       5
004639r 3               err_refill =       6
004639r 3               err_state =        7
004639r 3               err_syntax =       8
004639r 3               err_underflow =    9
004639r 3               err_negallot =     10
004639r 3               err_wordlist =     11
004639r 3               err_blockwords =   12
004639r 3               
004639r 3               error_table:
004639r 3  rr rr rr rr          .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
00463Dr 3  rr rr rr rr  
004641r 3  rr rr rr rr          .word es_divzero, es_noname, es_refill, es_state        ;  4-7
004645r 3  rr rr rr rr  
004649r 3  rr rr rr rr          .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
00464Dr 3  rr rr rr rr  
004651r 3  rr rr                .word es_blockwords                                    ; 12
004653r 3               
004653r 3  41 4C 4C 4F  es_allot:       .byte "ALLOT using all available memory", 0
004657r 3  54 20 75 73  
00465Br 3  69 6E 67 20  
004674r 3  49 6C 6C 65  es_badsource:   .byte "Illegal SOURCE-ID during REFILL", 0
004678r 3  67 61 6C 20  
00467Cr 3  53 4F 55 52  
004694r 3  49 6E 74 65  es_compileonly: .byte "Interpreting a compile-only word", 0
004698r 3  72 70 72 65  
00469Cr 3  74 69 6E 67  
0046B5r 3  44 45 46 45  es_defer:       .byte "DEFERed word not defined yet", 0
0046B9r 3  52 65 64 20  
0046BDr 3  77 6F 72 64  
0046D2r 3  44 69 76 69  es_divzero:     .byte "Division by zero", 0
0046D6r 3  73 69 6F 6E  
0046DAr 3  20 62 79 20  
0046E3r 3  50 61 72 73  es_noname:      .byte "Parsing failure", 0
0046E7r 3  69 6E 67 20  
0046EBr 3  66 61 69 6C  
0046F3r 3  51 55 49 54  es_refill:      .byte "QUIT could not get input (REFILL returned -1)", 0
0046F7r 3  20 63 6F 75  
0046FBr 3  6C 64 20 6E  
004721r 3  41 6C 72 65  es_state:       .byte "Already in compile mode", 0
004725r 3  61 64 79 20  
004729r 3  69 6E 20 63  
004739r 3  55 6E 64 65  es_syntax:      .byte "Undefined word", 0
00473Dr 3  66 69 6E 65  
004741r 3  64 20 77 6F  
004748r 3  53 74 61 63  es_underflow:   .byte "Stack underflow", 0
00474Cr 3  6B 20 75 6E  
004750r 3  64 65 72 66  
004758r 3  4D 61 78 20  es_negallot:    .byte "Max memory freed with ALLOT", 0
00475Cr 3  6D 65 6D 6F  
004760r 3  72 79 20 66  
004774r 3  4E 6F 20 77  es_wordlist:    .byte "No wordlists available", 0
004778r 3  6F 72 64 6C  
00477Cr 3  69 73 74 73  
00478Br 3  50 6C 65 61  es_blockwords:  .byte "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
00478Fr 3  73 65 20 61  
004793r 3  73 73 69 67  
0047CAr 3               
0047CAr 3               ; ## ENVIRONMENT STRINGS
0047CAr 3               
0047CAr 3               ; These are used by the ENVIRONMENT? word and stored in the old string format:
0047CAr 3               ; Length byte first, then the string itself that is not rpt. not
0047CAr 3               ; zero-terminated. Note these are uppercase by ANS defintion. All start with
0047CAr 3               ; "envs_".
0047CAr 3               
0047CAr 3               ; These return a single-cell number
0047CAr 3  0F 2F 43 4F  envs_cs:        .byte 15, "/COUNTED-STRING"
0047CEr 3  55 4E 54 45  
0047D2r 3  44 2D 53 54  
0047DAr 3  05 2F 48 4F  envs_hold:      .byte 5, "/HOLD"
0047DEr 3  4C 44        
0047E0r 3  04 2F 50 41  envs_pad:       .byte 4, "/PAD"
0047E4r 3  44           
0047E5r 3  11 41 44 44  envs_aub:       .byte 17, "ADDRESS-UNIT-BITS"
0047E9r 3  52 45 53 53  
0047EDr 3  2D 55 4E 49  
0047F7r 3  07 46 4C 4F  envs_floored:   .byte 7, "FLOORED"
0047FBr 3  4F 52 45 44  
0047FFr 3  08 4D 41 58  envs_max_char:  .byte 8, "MAX-CHAR"
004803r 3  2D 43 48 41  
004807r 3  52           
004808r 3  05 4D 41 58  envs_max_n:     .byte 5, "MAX-N"
00480Cr 3  2D 4E        
00480Er 3  05 4D 41 58  envs_max_u:     .byte 5, "MAX-U"
004812r 3  2D 55        
004814r 3  12 52 45 54  envs_rsc:       .byte 18, "RETURN-STACK-CELLS"
004818r 3  55 52 4E 2D  
00481Cr 3  53 54 41 43  
004827r 3  0B 53 54 41  envs_sc:        .byte 11, "STACK-CELLS"
00482Br 3  43 4B 2D 43  
00482Fr 3  45 4C 4C 53  
004833r 3  09 57 4F 52  envs_wl:        .byte 9, "WORDLISTS"
004837r 3  44 4C 49 53  
00483Br 3  54 53        
00483Dr 3               
00483Dr 3               ; These return a double-cell number
00483Dr 3  05 4D 41 58  envs_max_d:     .byte 5, "MAX-D"
004841r 3  2D 44        
004843r 3  06 4D 41 58  envs_max_ud:    .byte 6, "MAX-UD"
004847r 3  2D 55 44     
00484Ar 3               
00484Ar 3               ; END
00484Ar 3               
00484Ar 2               
00484Ar 2               ; High-level Forth words, see forth_code/README.md
00484Ar 2               forth_words_start:
00484Ar 2  20 63 72 20  .incbin "forth_code/forth_words.asc"
00484Er 2  2E 28 20 52  
004852r 2  65 61 64 79  
00485Cr 2               forth_words_end:
00485Cr 2               
00485Cr 2               ; User-defined Forth words, see forth_code/README.md
00485Cr 2               user_words_start:
00485Cr 2  20 32 30 20  .incbin "forth_code/user_words.asc"
004860r 2  63 6F 6E 73  
004864r 2  74 61 6E 74  
004EFAr 2               user_words_end:
004EFAr 2               
004EFAr 2               
004EFAr 2               ; =====================================================================
004EFAr 2               ; COMPILE WORDS, JUMPS and SUBROUTINE JUMPS INTO CODE
004EFAr 2               
004EFAr 2               ; These three routines compile instructions such as "jsr xt_words" into a word
004EFAr 2               ; at compile time so they are available at run time. Words that use this
004EFAr 2               ; routine may not be natively compiled. We use "cmpl" as not to confuse these
004EFAr 2               ; routines with the COMPILE, word. Always call this with a subroutine jump.
004EFAr 2               ; This means combining JSR/RTS to JMP in those cases is not going to work. To
004EFAr 2               ; use, load the LSB of the address in A and the MSB in Y. You can remember
004EFAr 2               ; which comes first by thinking of the song "Young Americans" ("YA") by David
004EFAr 2               ; Bowie.
004EFAr 2               
004EFAr 2               ;               ldy #>addr      ; MSB   ; "Young"
004EFAr 2               ;               lda #<addr      ; LSB   ; "Americans"
004EFAr 2               ;               jsr cmpl_subroutine
004EFAr 2               
004EFAr 2               ; Also, we keep a routine here to compile a single byte passed through A.
004EFAr 2               
004EFAr 2               cmpl_subroutine:
004EFAr 2                   ; This is the entry point to compile JSR <ADDR>
004EFAr 2  48               pha             ; save LSB of address
004EFBr 2  A9 20            lda #$20        ; load opcode for JSR
004EFDr 2  80 03            bra cmpl_common
004EFFr 2               cmpl_jump:
004EFFr 2                   ; This is the entry point to compile JMP <ADDR>
004EFFr 2  48               pha             ; save LSB of address
004F00r 2  A9 4C            lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
004F02r 2               cmpl_common:
004F02r 2                   ; At this point, A contains the opcode to be compiled,
004F02r 2                   ; the LSB of the address is on the 65c02 stack, and the MSB of
004F02r 2                   ; the address is in Y
004F02r 2  20 rr rr         jsr cmpl_a      ; compile opcode
004F05r 2  68               pla             ; retrieve address LSB; fall thru to cmpl_word
004F06r 2               cmpl_word:
004F06r 2                   ; This is the entry point to compile a word (little-endian)
004F06r 2  20 rr rr         jsr cmpl_a      ; compile LSB of address
004F09r 2  98               tya             ; fall thru for MSB
004F0Ar 2               cmpl_a:
004F0Ar 2                   ; This is the entry point to compile a single byte which
004F0Ar 2                   ; is passed in A. The built-in assembler assumes that this
004F0Ar 2                   ; routine does not modify Y.
004F0Ar 2  92 rr            sta (cp)
004F0Cr 2  E6 rr            inc cp
004F0Er 2  D0 02            bne _done
004F10r 2  E6 rr            inc cp+1
004F12r 2               _done:
004F12r 2  60               rts
004F13r 2               
004F13r 2               
004F13r 2               
004F13r 2               ; =====================================================================
004F13r 2               ; CODE FIELD ROUTINES
004F13r 2               
004F13r 2               doconst:
004F13r 2               ; """Execute a CONSTANT: Push the data in the first two bytes of
004F13r 2               ; the Data Field onto the Data Stack
004F13r 2               ; """
004F13r 2  CA               dex             ; make room for constant
004F14r 2  CA               dex
004F15r 2               
004F15r 2                   ; The value we need is stored in the two bytes after the
004F15r 2                   ; JSR return address, which in turn is what is on top of
004F15r 2                   ; the Return Stack
004F15r 2  68               pla             ; LSB of return address
004F16r 2  85 rr            sta tmp1
004F18r 2  68               pla             ; MSB of return address
004F19r 2  85 rr            sta tmp1+1
004F1Br 2               
004F1Br 2                   ; Start LDY with 1 instead of 0 because of how JSR stores
004F1Br 2                   ; the return address on the 65c02
004F1Br 2  A0 01            ldy #1
004F1Dr 2  B1 rr            lda (tmp1),y
004F1Fr 2  95 00            sta 0,x
004F21r 2  C8               iny
004F22r 2  B1 rr            lda (tmp1),y
004F24r 2  95 01            sta 1,x
004F26r 2               
004F26r 2                   ; This takes us back to the original caller, not the
004F26r 2                   ; DOCONST caller
004F26r 2  60               rts
004F27r 2               
004F27r 2               
004F27r 2               dodefer:
004F27r 2               ; """Execute a DEFER statement at runtime: Execute the address we
004F27r 2               ; find after the caller in the Data Field
004F27r 2               ; """
004F27r 2                   ; The xt we need is stored in the two bytes after the JSR
004F27r 2                   ; return address, which is what is on top of the Return
004F27r 2                   ; Stack. So all we have to do is replace our return jump
004F27r 2                   ; with what we find there
004F27r 2  68               pla             ; LSB
004F28r 2  85 rr            sta tmp1
004F2Ar 2  68               pla             ; MSB
004F2Br 2  85 rr            sta tmp1+1
004F2Dr 2               
004F2Dr 2  A0 01            ldy #1
004F2Fr 2  B1 rr            lda (tmp1),y
004F31r 2  85 rr            sta tmp2
004F33r 2  C8               iny
004F34r 2  B1 rr            lda (tmp1),y
004F36r 2  85 rr            sta tmp2+1
004F38r 2               
004F38r 2  6C rr rr         jmp (tmp2)      ; This is actually a jump to the new target
004F3Br 2               
004F3Br 2               defer_error:
004F3Br 2                   ; """Error routine for undefined DEFER: Complain and abort"""
004F3Br 2  A9 03            lda #err_defer
004F3Dr 2  4C rr rr         jmp error
004F40r 2               
004F40r 2               dodoes:
004F40r 2               ; """Execute the runtime portion of DOES>. See DOES> and
004F40r 2               ; docs/create-does.txt for details and
004F40r 2               ; http://www.bradrodriguez.com/papers/moving3.htm
004F40r 2               ; """
004F40r 2                   ; Assumes the address of the CFA of the original defining word
004F40r 2                   ; (say, CONSTANT) is on the top of the Return Stack. Save it
004F40r 2                   ; for a later jump, adding one byte because of the way the
004F40r 2                   ; 6502 works
004F40r 2  7A               ply             ; LSB
004F41r 2  68               pla             ; MSB
004F42r 2  C8               iny
004F43r 2  D0 01            bne @1
004F45r 2  1A               inc
004F46r 2               @1:
004F46r 2  84 rr            sty tmp2
004F48r 2  85 rr            sta tmp2+1
004F4Ar 2               
004F4Ar 2                   ; Next on the Return Stack should be the address of the PFA of
004F4Ar 2                   ; the calling defined word (say, the name of whatever constant we
004F4Ar 2                   ; just defined). Move this to the Data Stack, again adding one.
004F4Ar 2  CA               dex
004F4Br 2  CA               dex
004F4Cr 2               
004F4Cr 2  7A               ply
004F4Dr 2  68               pla
004F4Er 2  C8               iny
004F4Fr 2  D0 01            bne @2
004F51r 2  1A               inc
004F52r 2               @2:
004F52r 2  94 00            sty 0,x         ; LSB
004F54r 2  95 01            sta 1,x         ; MSB
004F56r 2               
004F56r 2                   ; This leaves the return address from the original main routine
004F56r 2                   ; on top of the Return Stack. We leave that untouched and jump
004F56r 2                   ; to the special code of the defining word. It's RTS instruction
004F56r 2                   ; will take us back to the main routine
004F56r 2  6C rr rr         jmp (tmp2)
004F59r 2               
004F59r 2               
004F59r 2               dovar:
004F59r 2               ; """Execute a variable: Push the address of the first bytes of
004F59r 2               ; the Data Field onto the stack. This is called with JSR so we
004F59r 2               ; can pick up the address of the calling variable off the 65c02's
004F59r 2               ; stack. The final RTS takes us to the original caller of the
004F59r 2               ; routine that itself called DOVAR. This is the default
004F59r 2               ; routine installed with CREATE.
004F59r 2               ; """
004F59r 2                   ; Pull the return address off the machine's stack, adding
004F59r 2                   ; one because of the way the 65c02 handles subroutines
004F59r 2  7A               ply             ; LSB
004F5Ar 2  68               pla             ; MSB
004F5Br 2  C8               iny
004F5Cr 2  D0 01            bne @1
004F5Er 2  1A               inc
004F5Fr 2               @1:
004F5Fr 2  CA               dex
004F60r 2  CA               dex
004F61r 2               
004F61r 2  95 01            sta 1,x
004F63r 2  98               tya
004F64r 2  95 00            sta 0,x
004F66r 2               
004F66r 2  60               rts
004F67r 2               
004F67r 2               ; =====================================================================
004F67r 2               ; LOW LEVEL HELPER FUNCTIONS
004F67r 2               
004F67r 2               byte_to_ascii:
004F67r 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
004F67r 2               .scope
004F67r 2  48               pha
004F68r 2  4A               lsr             ; convert high nibble first
004F69r 2  4A               lsr
004F6Ar 2  4A               lsr
004F6Br 2  4A               lsr
004F6Cr 2  20 rr rr         jsr _nibble_to_ascii
004F6Fr 2  68               pla
004F70r 2               
004F70r 2                   ; fall through to _nibble_to_ascii
004F70r 2               
004F70r 2               _nibble_to_ascii:
004F70r 2               ; """Private helper function for byte_to_ascii: Print lower nibble
004F70r 2               ; of A and and EMIT it. This does the actual work.
004F70r 2               ; """
004F70r 2  29 0F            and #$0F
004F72r 2  09 30            ora #'0'
004F74r 2  C9 3A            cmp #$3A        ; '9+1
004F76r 2  90 02            bcc @1
004F78r 2  69 06            adc #$06
004F7Ar 2               
004F7Ar 2  4C rr rr     @1:               jmp emit_a
004F7Dr 2               
004F7Dr 2  60               rts
004F7Er 2               .endscope
004F7Er 2               
004F7Er 2               compare_16bit:
004F7Er 2               ; """Compare TOS/NOS and return results in form of the 65c02 flags
004F7Er 2               ; Adapted from Leventhal "6502 Assembly Language Subroutines", see
004F7Er 2               ; also http://www.6502.org/tutorials/compare_beyond.html
004F7Er 2               ; For signed numbers, Z signals equality and N which number is larger:
004F7Er 2               ;       if TOS = NOS: Z=1 and N=0
004F7Er 2               ;       if TOS > NOS: Z=0 and N=0
004F7Er 2               ;       if TOS < NOS: Z=0 and N=1
004F7Er 2               ; For unsigned numbers, Z signals equality and C which number is larger:
004F7Er 2               ;       if TOS = NOS: Z=1 and N=0
004F7Er 2               ;       if TOS > NOS: Z=0 and C=1
004F7Er 2               ;       if TOS < NOS: Z=0 and C=0
004F7Er 2               ; Compared to the book routine, WORD1 (MINUED) is TOS
004F7Er 2               ;                               WORD2 (SUBTRAHEND) is NOS
004F7Er 2               ; """
004F7Er 2               .scope
004F7Er 2                   ; Compare LSB first to set the carry flag
004F7Er 2  B5 00            lda 0,x                 ; LSB of TOS
004F80r 2  D5 02            cmp 2,x                 ; LSB of NOS
004F82r 2  F0 0A            beq _equal
004F84r 2               
004F84r 2                   ; LSBs are not equal, compare MSB
004F84r 2  B5 01            lda 1,x                 ; MSB of TOS
004F86r 2  F5 03            sbc 3,x                 ; MSB of NOS
004F88r 2  09 01            ora #1                  ; Make zero flag 0 because not equal
004F8Ar 2  70 08            bvs _overflow
004F8Cr 2  80 08            bra _not_equal
004F8Er 2               _equal:
004F8Er 2                   ; Low bytes are equal, so we compare high bytes
004F8Er 2  B5 01            lda 1,x                 ; MSB of TOS
004F90r 2  F5 03            sbc 3,x                 ; MSB of NOS
004F92r 2  50 04            bvc _done
004F94r 2               _overflow:
004F94r 2                   ; Handle overflow because we use signed numbers
004F94r 2  49 80            eor #$80                ; complement negative flag
004F96r 2               _not_equal:
004F96r 2  09 01            ora #1                  ; if overflow, we can't be eqal
004F98r 2               _done:
004F98r 2  60               rts
004F99r 2               .endscope
004F99r 2               
004F99r 2               current_to_dp:
004F99r 2               ; """Look up the current (compilation) dictionary pointer
004F99r 2               ; in the wordlist set and put it into the dp zero-page
004F99r 2               ; variable. Uses A and Y.
004F99r 2               ; """
004F99r 2                   ; Determine which wordlist is current
004F99r 2  A0 04            ldy #current_offset
004F9Br 2  B1 rr            lda (up),y      ; current is a byte variable
004F9Dr 2  0A               asl             ; turn it into an offset (in cells)
004F9Er 2               
004F9Er 2                   ; Get the dictionary pointer for that wordlist.
004F9Er 2  18               clc
004F9Fr 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
004FA1r 2  A8               tay
004FA2r 2  B1 rr            lda (up),y              ; get the dp for that wordlist.
004FA4r 2  85 rr            sta dp
004FA6r 2  C8               iny
004FA7r 2  B1 rr            lda (up),y
004FA9r 2  85 rr            sta dp+1
004FABr 2               
004FABr 2  60               rts
004FACr 2               
004FACr 2               
004FACr 2               dp_to_current:
004FACr 2               ; """Look up which wordlist is current and update its pointer
004FACr 2               ; with the value in dp. Uses A and Y.
004FACr 2               ; """
004FACr 2                   ; Determine which wordlist is current
004FACr 2  A0 04            ldy #current_offset
004FAEr 2  B1 rr            lda (up),y      ; current is a byte variable
004FB0r 2  0A               asl             ; turn it into an offset (in cells)
004FB1r 2               
004FB1r 2                   ; Get the dictionary pointer for that wordlist.
004FB1r 2  18               clc
004FB2r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
004FB4r 2  A8               tay
004FB5r 2  A5 rr            lda dp
004FB7r 2  91 rr            sta (up),y              ; get the dp for that wordlist.
004FB9r 2  C8               iny
004FBAr 2  A5 rr            lda dp+1
004FBCr 2  91 rr            sta (up),y
004FBEr 2               
004FBEr 2  60               rts
004FBFr 2               
004FBFr 2               interpret:
004FBFr 2               .scope
004FBFr 2               ; """Core routine for the interpreter called by EVALUATE and QUIT.
004FBFr 2               ; Process one line only. Assumes that the address of name is in
004FBFr 2               ; cib and the length of the whole input line string is in ciblen
004FBFr 2               ; """
004FBFr 2                   ; Normally we would use PARSE here with the SPACE character as
004FBFr 2                   ; a parameter (PARSE replaces WORD in modern Forths). However,
004FBFr 2                   ; Gforth's PARSE-NAME makes more sense as it uses spaces as
004FBFr 2                   ; delimiters per default and skips any leading spaces, which
004FBFr 2                   ; PARSE doesn't
004FBFr 2               _loop:
004FBFr 2  20 rr rr         jsr xt_parse_name       ; ( "string" -- addr u )
004FC2r 2               
004FC2r 2                   ; If PARSE-NAME returns 0 (empty line), no characters were left
004FC2r 2                   ; in the line and we need to go get a new line
004FC2r 2  B5 00            lda 0,x
004FC4r 2  15 01            ora 1,x
004FC6r 2  F0 70            beq _line_done
004FC8r 2               
004FC8r 2                   ; Go to FIND-NAME to see if this is a word we know. We have to
004FC8r 2                   ; make a copy of the address in case it isn't a word we know and
004FC8r 2                   ; we have to go see if it is a number
004FC8r 2  20 rr rr         jsr xt_two_dup          ; ( addr u -- addr u addr u )
004FCBr 2  20 rr rr         jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
004FCEr 2               
004FCEr 2                   ; A zero signals that we didn't find a word in the Dictionary
004FCEr 2  B5 00            lda 0,x
004FD0r 2  15 01            ora 1,x
004FD2r 2  D0 28            bne _got_name_token
004FD4r 2               
004FD4r 2                   ; We didn't get any nt we know of, so let's see if this is
004FD4r 2                   ; a number.
004FD4r 2  E8               inx                     ; ( addr u 0 -- addr u )
004FD5r 2  E8               inx
004FD6r 2               
004FD6r 2                   ; If the number conversion doesn't work, NUMBER will do the
004FD6r 2                   ; complaining for us
004FD6r 2  20 rr rr         jsr xt_number           ; ( addr u -- u|d )
004FD9r 2               
004FD9r 2                   ; Otherweise, if we're interpreting, we're done
004FD9r 2  A5 rr            lda state
004FDBr 2  F0 E2            beq _loop
004FDDr 2               
004FDDr 2                   ; We're compiling, so there is a bit more work.  Check
004FDDr 2                   ; status bit 5 to see if it's a single or double-cell
004FDDr 2                   ; number.
004FDDr 2  A9 20            lda #$20
004FDFr 2  24 rr            bit status
004FE1r 2  F0 0D            beq _single_number
004FE3r 2               
004FE3r 2                   ; It's a double cell number.  If we swap the
004FE3r 2                   ; upper and lower half, we can use the literal_runtime twice
004FE3r 2                   ; to compile it into the dictionary.
004FE3r 2  20 rr rr         jsr xt_swap
004FE6r 2  A0 rr            ldy #>literal_runtime
004FE8r 2  A9 rr            lda #<literal_runtime
004FEAr 2  20 rr rr         jsr cmpl_subroutine
004FEDr 2               
004FEDr 2                   ; compile our number
004FEDr 2  20 rr rr         jsr xt_comma
004FF0r 2               
004FF0r 2                   ; Fall into _single_number to process the other half.
004FF0r 2               _single_number:
004FF0r 2  A0 rr            ldy #>literal_runtime
004FF2r 2  A9 rr            lda #<literal_runtime
004FF4r 2  20 rr rr         jsr cmpl_subroutine
004FF7r 2               
004FF7r 2                   ; compile our number
004FF7r 2  20 rr rr         jsr xt_comma
004FFAr 2               
004FFAr 2                   ; That was so much fun, let's do it again!
004FFAr 2  80 C3            bra _loop
004FFCr 2               
004FFCr 2               _got_name_token:
004FFCr 2                   ; We have a known word's nt TOS. We're going to need its xt
004FFCr 2                   ; though, which is four bytes father down.
004FFCr 2               
004FFCr 2                   ; We arrive here with ( addr u nt ), so we NIP twice
004FFCr 2  B5 00            lda 0,x
004FFEr 2  95 04            sta 4,x
005000r 2  B5 01            lda 1,x
005002r 2  95 05            sta 5,x
005004r 2               
005004r 2  E8               inx
005005r 2  E8               inx
005006r 2  E8               inx
005007r 2  E8               inx                     ; ( nt )
005008r 2               
005008r 2                   ; Save a version of nt for error handling and compilation stuff
005008r 2  B5 00            lda 0,x
00500Ar 2  85 rr            sta tmpbranch
00500Cr 2  B5 01            lda 1,x
00500Er 2  85 rr            sta tmpbranch+1
005010r 2               
005010r 2  20 rr rr         jsr xt_name_to_int      ; ( nt - xt )
005013r 2               
005013r 2                   ; See if we are in interpret or compile mode, 0 is interpret
005013r 2  A5 rr            lda state
005015r 2  D0 13            bne _compile
005017r 2               
005017r 2                   ; We are interpreting, so EXECUTE the xt that is TOS. First,
005017r 2                   ; though, see if this isn't a compile-only word, which would be
005017r 2                   ; illegal. The status byte is the second one of the header.
005017r 2  A0 01            ldy #1
005019r 2  B1 rr            lda (tmpbranch),y
00501Br 2  29 01            and #CO                 ; mask everything but Compile Only bit
00501Dr 2  F0 05            beq _interpret
00501Fr 2               
00501Fr 2  A9 02            lda #err_compileonly
005021r 2  4C rr rr         jmp error
005024r 2               
005024r 2               _interpret:
005024r 2                   ; We JSR to EXECUTE instead of calling the xt directly because
005024r 2                   ; the RTS of the word we're executing will bring us back here,
005024r 2                   ; skipping EXECUTE completely during RTS. If we were to execute
005024r 2                   ; xt directly, we have to fool around with the Return Stack
005024r 2                   ; instead, which is actually slightly slower
005024r 2  20 rr rr         jsr xt_execute
005027r 2               
005027r 2                   ; That's quite enough for this word, let's get the next one
005027r 2  4C rr rr         jmp _loop
00502Ar 2               
00502Ar 2               _compile:
00502Ar 2                   ; We're compiling! However, we need to see if this is an
00502Ar 2                   ; IMMEDIATE word, which would mean we execute it right now even
00502Ar 2                   ; during compilation mode. Fortunately, we saved the nt so life
00502Ar 2                   ; is easier. The flags are in the second byte of the header
00502Ar 2  A0 01            ldy #1
00502Cr 2  B1 rr            lda (tmpbranch),y
00502Er 2  29 04            and #IM                 ; Mask all but IM bit
005030r 2  D0 F2            bne _interpret          ; IMMEDIATE word, execute right now
005032r 2               
005032r 2                   ; Compile the xt into the Dictionary with COMPILE,
005032r 2  20 rr rr         jsr xt_compile_comma
005035r 2  4C rr rr         jmp _loop
005038r 2               
005038r 2               _line_done:
005038r 2                   ; drop stuff from PARSE_NAME
005038r 2  E8               inx
005039r 2  E8               inx
00503Ar 2  E8               inx
00503Br 2  E8               inx
00503Cr 2               
00503Cr 2  60               rts
00503Dr 2               .endscope
00503Dr 2               
00503Dr 2               
00503Dr 2               is_printable:
00503Dr 2               .scope
00503Dr 2               ; """Given a character in A, check if it is a printable ASCII
00503Dr 2               ; character in the range from $20 to $7E inclusive. Returns the
00503Dr 2               ; result in the Carry Flag: 0 (clear) is not printable, 1 (set)
00503Dr 2               ; is printable. Keeps A. See
00503Dr 2               ; http://www.obelisk.me.uk/6502/algorithms.html for a
00503Dr 2               ; discussion of various ways to do this
00503Dr 2  C9 20            cmp #AscSP              ; $20
00503Fr 2  90 08            bcc _done
005041r 2  C9 7F            cmp #'~' + 1             ; $7E
005043r 2  B0 03            bcs _failed
005045r 2               
005045r 2  38               sec
005046r 2  80 01            bra _done
005048r 2               _failed:
005048r 2  18               clc
005049r 2               _done:
005049r 2  60               rts
00504Ar 2               .endscope
00504Ar 2               
00504Ar 2               
00504Ar 2               is_whitespace:
00504Ar 2               .scope
00504Ar 2               ; """Given a character in A, check if it is a whitespace
00504Ar 2               ; character, that is, an ASCII value from 0 to 32 (where
00504Ar 2               ; 32 is SPACE). Returns the result in the Carry Flag:
00504Ar 2               ; 0 (clear) is no, it isn't whitespace, while 1 (set) means
00504Ar 2               ; that it is whitespace. See PARSE and PARSE-NAME for
00504Ar 2               ; a discussion of the uses. Does not change A or Y.
00504Ar 2  C9 00            cmp #00         ; explicit comparison to leave Y untouched
00504Cr 2  90 08            bcc _done
00504Er 2               
00504Er 2  C9 21            cmp #AscSP+1
005050r 2  B0 03            bcs _failed
005052r 2               
005052r 2  38               sec
005053r 2  80 01            bra _done
005055r 2               _failed:
005055r 2  18               clc
005056r 2               _done:
005056r 2  60               rts
005057r 2               .endscope
005057r 2               
005057r 2               
005057r 2               ; Underflow tests. We jump to the label with the number of cells (not: bytes)
005057r 2               ; required for the word. This routine flows into the generic error handling
005057r 2               ; code
005057r 2               underflow_1:
005057r 2               ; """Make sure we have at least one cell on the Data Stack"""
005057r 2  E0 rr            cpx #dsp0-1
005059r 2  10 10            bpl underflow_error
00505Br 2  60               rts
00505Cr 2               underflow_2:
00505Cr 2               ; """Make sure we have at least two cells on the Data Stack"""
00505Cr 2  E0 rr            cpx #dsp0-3
00505Er 2  10 0B            bpl underflow_error
005060r 2  60               rts
005061r 2               underflow_3:
005061r 2               ; """Make sure we have at least three cells on the Data Stack"""
005061r 2  E0 rr            cpx #dsp0-5
005063r 2  10 06            bpl underflow_error
005065r 2  60               rts
005066r 2               underflow_4:
005066r 2               ; """Make sure we have at least four cells on the Data Stack"""
005066r 2  E0 rr            cpx #dsp0-7
005068r 2  10 01            bpl underflow_error
00506Ar 2  60               rts
00506Br 2               
00506Br 2               underflow_error:
00506Br 2                   ; Entry for COLD/ABORT/QUIT
00506Br 2  A9 09            lda #err_underflow      ; fall through to error
00506Dr 2               
00506Dr 2               error:
00506Dr 2               ; """Given the error number in a, print the associated error string and
00506Dr 2               ; call abort. Uses tmp3.
00506Dr 2               ; """
00506Dr 2  0A               asl
00506Er 2  A8               tay
00506Fr 2  B9 rr rr         lda error_table,y
005072r 2  85 rr            sta tmp3                ; LSB
005074r 2  C8               iny
005075r 2  B9 rr rr         lda error_table,y
005078r 2  85 rr            sta tmp3+1              ; MSB
00507Ar 2               
00507Ar 2  20 rr rr         jsr print_common
00507Dr 2  20 rr rr         jsr xt_cr
005080r 2  4C rr rr         jmp xt_abort            ; no jsr, as we clobber return stack
005083r 2               
005083r 2               
005083r 2               ; =====================================================================
005083r 2               ; PRINTING ROUTINES
005083r 2               
005083r 2               ; We distinguish two types of print calls, both of which take the string number
005083r 2               ; (see strings.asm) in A:
005083r 2               
005083r 2               ;       print_string       - with a line feed
005083r 2               ;       print_string_no_lf - without a line feed
005083r 2               
005083r 2               ; In addition, print_common provides a lower-level alternative for error
005083r 2               ; handling and anything else that provides the address of the
005083r 2               ; zero-terminated string directly in tmp3. All of those routines assume that
005083r 2               ; printing should be more concerned with size than speed, because anything to
005083r 2               ; do with humans reading text is going to be slow.
005083r 2               
005083r 2               print_string_no_lf:
005083r 2               ; """Given the number of a zero-terminated string in A, print it to the
005083r 2               ; current output without adding a LF. Uses Y and tmp3 by falling
005083r 2               ; through to print_common
005083r 2               ; """
005083r 2                   ; Get the entry from the string table
005083r 2  0A               asl
005084r 2  A8               tay
005085r 2  B9 rr rr         lda string_table,y
005088r 2  85 rr            sta tmp3                ; LSB
00508Ar 2  C8               iny
00508Br 2  B9 rr rr         lda string_table,y
00508Er 2  85 rr            sta tmp3+1              ; MSB
005090r 2               
005090r 2                   ; fall through to print_common
005090r 2               print_common:
005090r 2               ; """Common print routine used by both the print functions and
005090r 2               ; the error printing routine. Assumes string address is in tmp3. Uses
005090r 2               ; Y.
005090r 2               ; """
005090r 2               .scope
005090r 2  A0 00            ldy #0
005092r 2               _loop:
005092r 2  B1 rr            lda (tmp3),y
005094r 2  F0 06            beq _done               ; strings are zero-terminated
005096r 2               
005096r 2  20 rr rr         jsr emit_a              ; allows vectoring via output
005099r 2  C8               iny
00509Ar 2  80 F6            bra _loop
00509Cr 2               _done:
00509Cr 2  60               rts
00509Dr 2               .endscope
00509Dr 2               
00509Dr 2               print_string:
00509Dr 2               ; """Print a zero-terminated string to the console/screen, adding a LF.
00509Dr 2               ; We do not check to see if the index is out of range. Uses tmp3.
00509Dr 2               ; """
00509Dr 2  20 rr rr         jsr print_string_no_lf
0050A0r 2  4C rr rr         jmp xt_cr               ; JSR/RTS because never compiled
0050A3r 2               
0050A3r 2               
0050A3r 2               print_u:
0050A3r 2               ; """basic printing routine used by higher-level constructs,
0050A3r 2               ; the equivalent of the forth word  0 <# #s #> type  which is
0050A3r 2               ; basically u. without the space at the end. used for various
0050A3r 2               ; outputs
0050A3r 2               ; """
0050A3r 2  20 rr rr         jsr xt_zero                     ; 0
0050A6r 2  20 rr rr         jsr xt_less_number_sign         ; <#
0050A9r 2  20 rr rr         jsr xt_number_sign_s            ; #S
0050ACr 2  20 rr rr         jsr xt_number_sign_greater      ; #>
0050AFr 2  4C rr rr         jmp xt_type                     ; JSR/RTS because never compiled
0050B2r 2               
0050B2r 2               ; END
0050B2r 2               
0050B2r 1               
0050B2r 1               .segment "DATA"
0050B2r 1               
0050B2r 1               .ifdef TALI_OPTIONAL_ASSEMBLER
0050B2r 1               .include "../../assembler.s"
0050B2r 2               ; Assembler for Tali Forth 2
0050B2r 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0050B2r 2               ; First version: 07. Nov 2014 (as tasm65c02)
0050B2r 2               ; This version: 03. Jan 2019
0050B2r 2               
0050B2r 2               ; This is the built-in assembler for Tali Forth 2. Once the assembler wordlist
0050B2r 2               ; is included with
0050B2r 2               
0050B2r 2               ;       assembler-wordlist >order
0050B2r 2               
0050B2r 2               ; the opcodes are available as normal Forth words. The format is Simpler
0050B2r 2               ; Assembler Notation (SAN) which separates the opcode completely from the
0050B2r 2               ; operand (see https://github.com/scotws/SAN). In this case, the operand is
0050B2r 2               ; entered before the opcode in the postfix Forth notation (for example, "2000
0050B2r 2               ; lda.#"). See the assembler documenation in the manual for more detail.
0050B2r 2               
0050B2r 2               ; The code here was originally used in A Typist's Assembler for the 65c02
0050B2r 2               ; (tasm65c02), see https://github.com/scotws/tasm65c02 for the standalone
0050B2r 2               ; version. Tasm65c02 is in the public domain.
0050B2r 2               
0050B2r 2               ; This code makes use of the opcode tables stored as part of the disassembler.
0050B2r 2               
0050B2r 2               ; ==========================================================
0050B2r 2               ; MNEMONICS
0050B2r 2               
0050B2r 2               ; The assembler instructions are realized as individual Forth words with
0050B2r 2               ; entries in the assembler wordlist (see header.asm). We pass the opcode in A.
0050B2r 2               
0050B2r 2               ; An alterantive method would have been along the lines of
0050B2r 2               
0050B2r 2               ;               jsr asm_common
0050B2r 2               ;               .byte $EA
0050B2r 2               
0050B2r 2               ; where the asm_common then uses the address on the Return Stack to pick up the
0050B2r 2               ; opcode and the length. Though this uses fewer resources, the current version
0050B2r 2               ; makes up for this by simplifying the code of asm_common.
0050B2r 2               
0050B2r 2               ; The routines are organized alphabetically by SAN mnemonic, not by opcode. The
0050B2r 2               ; SAN and traditional mnemonics are listed after the opcode load instruction.
0050B2r 2               ; This list was generated by a Python script in the tools folder, see there for
0050B2r 2               ; more detail.
0050B2r 2               
0050B2r 2               assembler:              ; used to calculate size of assembler code
0050B2r 2               .ifdef TALI_OPTIONAL_ASSEMBLER
0050B2r 2               xt_asm_adc_h:   ; adc.# \ ADC #nn
0050B2r 2  A9 69                        lda #$69
0050B4r 2  4C rr rr                     jmp asm_common
0050B7r 2               z_asm_adc_h:
0050B7r 2               
0050B7r 2               xt_asm_adc_x:   ; adc.x \ ADC nnnn,X
0050B7r 2  A9 7D                        lda #$7D
0050B9r 2  4C rr rr                     jmp asm_common
0050BCr 2               z_asm_adc_x:
0050BCr 2               
0050BCr 2               xt_asm_adc_y:   ; adc.y \ ADC nnnn,Y
0050BCr 2  A9 79                        lda #$79
0050BEr 2  4C rr rr                     jmp asm_common
0050C1r 2               z_asm_adc_y:
0050C1r 2               
0050C1r 2               xt_asm_adc_z:   ; adc.z \ ADC nn
0050C1r 2  A9 65                        lda #$65
0050C3r 2  4C rr rr                     jmp asm_common
0050C6r 2               z_asm_adc_z:
0050C6r 2               
0050C6r 2               xt_asm_adc_zi:  ; adc.zi \ ADC (nn)
0050C6r 2  A9 72                        lda #$72
0050C8r 2  4C rr rr                     jmp asm_common
0050CBr 2               z_asm_adc_zi:
0050CBr 2               
0050CBr 2               xt_asm_adc_ziy: ; adc.ziy \ ADC (nn),Y
0050CBr 2  A9 71                        lda #$71
0050CDr 2  4C rr rr                     jmp asm_common
0050D0r 2               z_asm_adc_ziy:
0050D0r 2               
0050D0r 2               xt_asm_adc_zx:  ; adc.zx \ ADC nn,X
0050D0r 2  A9 75                        lda #$75
0050D2r 2  4C rr rr                     jmp asm_common
0050D5r 2               z_asm_adc_zx:
0050D5r 2               
0050D5r 2               xt_asm_adc_zxi: ; adc.zxi \ ADC (nn,X)
0050D5r 2  A9 61                        lda #$61
0050D7r 2  4C rr rr                     jmp asm_common
0050DAr 2               z_asm_adc_zxi:
0050DAr 2               
0050DAr 2               xt_asm_and:     ; and. \ AND nnnn
0050DAr 2  A9 2D                        lda #$2D
0050DCr 2  4C rr rr                     jmp asm_common
0050DFr 2               z_asm_and:
0050DFr 2               
0050DFr 2               xt_asm_and_h:   ; and.# \ AND #nn
0050DFr 2  A9 29                        lda #$29
0050E1r 2  4C rr rr                     jmp asm_common
0050E4r 2               z_asm_and_h:
0050E4r 2               
0050E4r 2               xt_asm_and_x:   ; and.x \ AND nnnn,X
0050E4r 2  A9 3D                        lda #$3D
0050E6r 2  4C rr rr                     jmp asm_common
0050E9r 2               z_asm_and_x:
0050E9r 2               
0050E9r 2               xt_asm_and_y:   ; and.y \ AND nnnn,Y
0050E9r 2  A9 39                        lda #$39
0050EBr 2  4C rr rr                     jmp asm_common
0050EEr 2               z_asm_and_y:
0050EEr 2               
0050EEr 2               xt_asm_and_z:   ; and.z \ AND nn
0050EEr 2  A9 25                        lda #$25
0050F0r 2  4C rr rr                     jmp asm_common
0050F3r 2               z_asm_and_z:
0050F3r 2               
0050F3r 2               xt_asm_and_zi:  ; and.zi \ AND (nn)
0050F3r 2  A9 32                        lda #$32
0050F5r 2  4C rr rr                     jmp asm_common
0050F8r 2               z_asm_and_zi:
0050F8r 2               
0050F8r 2               xt_asm_and_ziy: ; and.ziy \ AND (nn),Y
0050F8r 2  A9 31                        lda #$31
0050FAr 2  4C rr rr                     jmp asm_common
0050FDr 2               z_asm_and_ziy:
0050FDr 2               
0050FDr 2               xt_asm_and_zx:  ; and.zx \ AND nn,X
0050FDr 2  A9 35                        lda #$35
0050FFr 2  4C rr rr                     jmp asm_common
005102r 2               z_asm_and_zx:
005102r 2               
005102r 2               xt_asm_and_zxi: ; and.zxi \ AND (nn,X)
005102r 2  A9 21                        lda #$21
005104r 2  4C rr rr                     jmp asm_common
005107r 2               z_asm_and_zxi:
005107r 2               
005107r 2               xt_asm_asl:     ; asl \ ASL nnnn
005107r 2  A9 0E                        lda #$0E
005109r 2  4C rr rr                     jmp asm_common
00510Cr 2               z_asm_asl:
00510Cr 2               
00510Cr 2               xt_asm_asl_a:   ; asl.a \ ASL
00510Cr 2  A9 0A                        lda #$0A
00510Er 2  4C rr rr                     jmp asm_common
005111r 2               z_asm_asl_a:
005111r 2               
005111r 2               xt_asm_asl_x:   ; asl.x \ ASL nnnn,X
005111r 2  A9 1E                        lda #$1E
005113r 2  4C rr rr                     jmp asm_common
005116r 2               z_asm_asl_x:
005116r 2               
005116r 2               xt_asm_asl_z:   ; asl.z \ ASL nn
005116r 2  A9 06                        lda #$06
005118r 2  4C rr rr                     jmp asm_common
00511Br 2               z_asm_asl_z:
00511Br 2               
00511Br 2               xt_asm_asl_zx:  ; asl.zx \ ASL nn,X
00511Br 2  A9 16                        lda #$16
00511Dr 2  4C rr rr                     jmp asm_common
005120r 2               z_asm_asl_zx:
005120r 2               
005120r 2               xt_asm_bcc:     ; bcc \ BCC
005120r 2  A9 90                        lda #$90
005122r 2  4C rr rr                     jmp asm_common
005125r 2               z_asm_bcc:
005125r 2               
005125r 2               xt_asm_bcs:     ; bcs \ BCS
005125r 2  A9 B0                        lda #$B0
005127r 2  A0 02                        ldy #2
005129r 2  4C rr rr                     jmp asm_common
00512Cr 2               z_asm_bcs:
00512Cr 2               
00512Cr 2               xt_asm_beq:     ; beq \ BEQ
00512Cr 2  A9 F0                        lda #$F0
00512Er 2  4C rr rr                     jmp asm_common
005131r 2               z_asm_beq:
005131r 2               
005131r 2               xt_asm_bit:     ; bit \ BIT nnnn
005131r 2  A9 2C                        lda #$2C
005133r 2  4C rr rr                     jmp asm_common
005136r 2               z_asm_bit:
005136r 2               
005136r 2               xt_asm_bit_h:   ; bit.# \ BIT #nn
005136r 2  A9 89                        lda #$89
005138r 2  4C rr rr                     jmp asm_common
00513Br 2               z_asm_bit_h:
00513Br 2               
00513Br 2               xt_asm_bit_x:   ; bit.x \ BIT nnnn,X
00513Br 2  A9 3C                        lda #$3C
00513Dr 2  4C rr rr                     jmp asm_common
005140r 2               z_asm_bit_x:
005140r 2               
005140r 2               xt_asm_bit_z:   ; bit.z \ BIT nn
005140r 2  A9 24                        lda #$24
005142r 2  4C rr rr                     jmp asm_common
005145r 2               z_asm_bit_z:
005145r 2               
005145r 2               xt_asm_bit_zx:  ; bit.zx \ BIT nn,X
005145r 2  A9 34                        lda #$34
005147r 2  4C rr rr                     jmp asm_common
00514Ar 2               z_asm_bit_zx:
00514Ar 2               
00514Ar 2               xt_asm_bmi:     ; bmi \ BMI
00514Ar 2  A9 30                        lda #$30
00514Cr 2  4C rr rr                     jmp asm_common
00514Fr 2               z_asm_bmi:
00514Fr 2               
00514Fr 2               xt_asm_bne:     ; bne \ BNE
00514Fr 2  A9 D0                        lda #$D0
005151r 2  4C rr rr                     jmp asm_common
005154r 2               z_asm_bne:
005154r 2               
005154r 2               xt_asm_bpl:     ; bpl \ BPL
005154r 2  A9 10                        lda #$10
005156r 2  4C rr rr                     jmp asm_common
005159r 2               z_asm_bpl:
005159r 2               
005159r 2               xt_asm_bra:     ; bra \ BRA
005159r 2  A9 80                        lda #$80
00515Br 2  4C rr rr                     jmp asm_common
00515Er 2               z_asm_bra:
00515Er 2               
00515Er 2               xt_asm_brk:     ; brk \ BRK
00515Er 2  A9 00                        lda #$00
005160r 2  4C rr rr                     jmp asm_common
005163r 2               z_asm_brk:
005163r 2               
005163r 2               xt_asm_bvc:     ; bvc \ BVC
005163r 2  A9 50                        lda #$50
005165r 2  4C rr rr                     jmp asm_common
005168r 2               z_asm_bvc:
005168r 2               
005168r 2               xt_asm_bvs:     ; bvs \ BVS
005168r 2  A9 70                        lda #$70
00516Ar 2  4C rr rr                     jmp asm_common
00516Dr 2               z_asm_bvs:
00516Dr 2               
00516Dr 2               xt_asm_clc:     ; clc \ CLC
00516Dr 2  A9 18                        lda #$18
00516Fr 2  4C rr rr                     jmp asm_common
005172r 2               z_asm_clc:
005172r 2               
005172r 2               xt_asm_cld:     ; cld \ CLD
005172r 2  A9 D8                        lda #$D8
005174r 2  4C rr rr                     jmp asm_common
005177r 2               z_asm_cld:
005177r 2               
005177r 2               xt_asm_cli:     ; cli \ CLI
005177r 2  A9 58                        lda #$58
005179r 2  4C rr rr                     jmp asm_common
00517Cr 2               z_asm_cli:
00517Cr 2               
00517Cr 2               xt_asm_clv:     ; clv \ CLV
00517Cr 2  A9 B8                        lda #$B8
00517Er 2  4C rr rr                     jmp asm_common
005181r 2               z_asm_clv:
005181r 2               
005181r 2               xt_asm_cmp:     ; cmp \ CMP nnnn
005181r 2  A9 CD                        lda #$CD
005183r 2  4C rr rr                     jmp asm_common
005186r 2               z_asm_cmp:
005186r 2               
005186r 2               xt_asm_cmp_h:   ; cmp.# \ CMP #nn
005186r 2  A9 C9                        lda #$C9
005188r 2  4C rr rr                     jmp asm_common
00518Br 2               z_asm_cmp_h:
00518Br 2               
00518Br 2               xt_asm_cmp_x:   ; cmp.x \ CMP nnnn,X
00518Br 2  A9 DD                        lda #$DD
00518Dr 2  4C rr rr                     jmp asm_common
005190r 2               z_asm_cmp_x:
005190r 2               
005190r 2               xt_asm_cmp_y:   ; cmp.y \ CMP nnnn,Y
005190r 2  A9 D9                        lda #$D9
005192r 2  4C rr rr                     jmp asm_common
005195r 2               z_asm_cmp_y:
005195r 2               
005195r 2               xt_asm_cmp_z:   ; cmp.z \ CMP nn
005195r 2  A9 C5                        lda #$C5
005197r 2  4C rr rr                     jmp asm_common
00519Ar 2               z_asm_cmp_z:
00519Ar 2               
00519Ar 2               xt_asm_cmp_zi:  ; cmp.zi \ CMP (nn)
00519Ar 2  A9 D2                        lda #$D2
00519Cr 2  4C rr rr                     jmp asm_common
00519Fr 2               z_asm_cmp_zi:
00519Fr 2               
00519Fr 2               xt_asm_cmp_ziy: ; cmp.ziy \ CMP (nn),Y
00519Fr 2  A9 D1                        lda #$D1
0051A1r 2  4C rr rr                     jmp asm_common
0051A4r 2               z_asm_cmp_ziy:
0051A4r 2               
0051A4r 2               xt_asm_cmp_zx:  ; cmp.zx \ CMP nn,X
0051A4r 2  A9 D5                        lda #$D5
0051A6r 2  4C rr rr                     jmp asm_common
0051A9r 2               z_asm_cmp_zx:
0051A9r 2               
0051A9r 2               xt_asm_cmp_zxi: ; cmp.zxi \ CMP (nn,X)
0051A9r 2  A9 C1                        lda #$C1
0051ABr 2  4C rr rr                     jmp asm_common
0051AEr 2               z_asm_cmp_zxi:
0051AEr 2               
0051AEr 2               xt_asm_cpx:     ; cpx \ CPX nnnn
0051AEr 2  A9 EC                        lda #$EC
0051B0r 2  4C rr rr                     jmp asm_common
0051B3r 2               z_asm_cpx:
0051B3r 2               
0051B3r 2               xt_asm_cpx_h:   ; cpx.# \ CPX #nn
0051B3r 2  A9 E0                        lda #$E0
0051B5r 2  4C rr rr                     jmp asm_common
0051B8r 2               z_asm_cpx_h:
0051B8r 2               
0051B8r 2               xt_asm_cpx_z:   ; cpx.z \ CPX nn
0051B8r 2  A9 E4                        lda #$E4
0051BAr 2  4C rr rr                     jmp asm_common
0051BDr 2               z_asm_cpx_z:
0051BDr 2               
0051BDr 2               xt_asm_cpy:     ; cpy \ CPY
0051BDr 2  A9 CC                        lda #$CC
0051BFr 2  A0 03                        ldy #3
0051C1r 2  4C rr rr                     jmp asm_common
0051C4r 2               z_asm_cpy:
0051C4r 2               
0051C4r 2               xt_asm_cpy_h:   ; cpy.# \ CPY #nn
0051C4r 2  A9 C0                        lda #$C0
0051C6r 2  4C rr rr                     jmp asm_common
0051C9r 2               z_asm_cpy_h:
0051C9r 2               
0051C9r 2               xt_asm_cpy_z:   ; cpy.z \ CPY nn
0051C9r 2  A9 C4                        lda #$C4
0051CBr 2  4C rr rr                     jmp asm_common
0051CEr 2               z_asm_cpy_z:
0051CEr 2               
0051CEr 2               xt_asm_dec:     ; dec \ DEC nnnn
0051CEr 2  A9 CE                        lda #$CE
0051D0r 2  4C rr rr                     jmp asm_common
0051D3r 2               z_asm_dec:
0051D3r 2               
0051D3r 2               xt_asm_dec_a:   ; dec.a \ DEC
0051D3r 2  A9 3A                        lda #$3A
0051D5r 2  4C rr rr                     jmp asm_common
0051D8r 2               z_asm_dec_a:
0051D8r 2               
0051D8r 2               xt_asm_dec_x:   ; dec.x \ DEC nnnn,X
0051D8r 2  A9 DE                        lda #$DE
0051DAr 2  4C rr rr                     jmp asm_common
0051DDr 2               z_asm_dec_x:
0051DDr 2               
0051DDr 2               xt_asm_dec_z:   ; dec.z \ DEC nn
0051DDr 2  A9 C6                        lda #$C6
0051DFr 2  4C rr rr                     jmp asm_common
0051E2r 2               z_asm_dec_z:
0051E2r 2               
0051E2r 2               xt_asm_dec_zx:  ; dec.zx \ DEC nn,X
0051E2r 2  A9 D6                        lda #$D6
0051E4r 2  4C rr rr                     jmp asm_common
0051E7r 2               z_asm_dec_zx:
0051E7r 2               
0051E7r 2               xt_asm_dex:     ; dex \ DEX
0051E7r 2  A9 CA                        lda #$CA
0051E9r 2  4C rr rr                     jmp asm_common
0051ECr 2               z_asm_dex:
0051ECr 2               
0051ECr 2               xt_asm_dey:     ; dey \ DEY
0051ECr 2  A9 88                        lda #$88
0051EEr 2  4C rr rr                     jmp asm_common
0051F1r 2               z_asm_dey:
0051F1r 2               
0051F1r 2               xt_asm_eor:     ; eor \ EOR nnnn
0051F1r 2  A9 4D                        lda #$4D
0051F3r 2  4C rr rr                     jmp asm_common
0051F6r 2               z_asm_eor:
0051F6r 2               
0051F6r 2               xt_asm_eor_h:   ; eor.# \ EOR #nn
0051F6r 2  A9 49                        lda #$49
0051F8r 2  4C rr rr                     jmp asm_common
0051FBr 2               z_asm_eor_h:
0051FBr 2               
0051FBr 2               xt_asm_eor_x:   ; eor.x \ EOR nnnn,X
0051FBr 2  A9 5D                        lda #$5D
0051FDr 2  4C rr rr                     jmp asm_common
005200r 2               z_asm_eor_x:
005200r 2               
005200r 2               xt_asm_eor_y:   ; eor.y \ EOR nnnn,Y
005200r 2  A9 59                        lda #$59
005202r 2  4C rr rr                     jmp asm_common
005205r 2               z_asm_eor_y:
005205r 2               
005205r 2               xt_asm_eor_z:   ; eor.z \ EOR nn
005205r 2  A9 45                        lda #$45
005207r 2  4C rr rr                     jmp asm_common
00520Ar 2               z_asm_eor_z:
00520Ar 2               
00520Ar 2               xt_asm_eor_zi:  ; eor.zi \ EOR (nn)
00520Ar 2  A9 52                        lda #$52
00520Cr 2  4C rr rr                     jmp asm_common
00520Fr 2               z_asm_eor_zi:
00520Fr 2               
00520Fr 2               xt_asm_eor_ziy: ; eor.ziy \ EOR (nn),Y
00520Fr 2  A9 51                        lda #$51
005211r 2  4C rr rr                     jmp asm_common
005214r 2               z_asm_eor_ziy:
005214r 2               
005214r 2               xt_asm_eor_zx:  ; eor.zx \ EOR nn,X
005214r 2  A9 55                        lda #$55
005216r 2  4C rr rr                     jmp asm_common
005219r 2               z_asm_eor_zx:
005219r 2               
005219r 2               xt_asm_eor_zxi: ; eor.zxi \ EOR (nn,X)
005219r 2  A9 41                        lda #$41
00521Br 2  4C rr rr                     jmp asm_common
00521Er 2               z_asm_eor_zxi:
00521Er 2               
00521Er 2               xt_asm_inc:     ; inc \ INC nnnn
00521Er 2  A9 EE                        lda #$EE
005220r 2  4C rr rr                     jmp asm_common
005223r 2               z_asm_inc:
005223r 2               
005223r 2               xt_asm_inc_a:   ; inc.a \ INC
005223r 2  A9 1A                        lda #$1A
005225r 2  4C rr rr                     jmp asm_common
005228r 2               z_asm_inc_a:
005228r 2               
005228r 2               xt_asm_inc_x:   ; inc.x \ INC nnnn,X
005228r 2  A9 FE                        lda #$FE
00522Ar 2  4C rr rr                     jmp asm_common
00522Dr 2               z_asm_inc_x:
00522Dr 2               
00522Dr 2               xt_asm_inc_z:   ; inc.z \ INC nn
00522Dr 2  A9 E6                        lda #$E6
00522Fr 2  4C rr rr                     jmp asm_common
005232r 2               z_asm_inc_z:
005232r 2               
005232r 2               xt_asm_inc_zx:  ; inc.zx \ INC nn,X
005232r 2  A9 F6                        lda #$F6
005234r 2  4C rr rr                     jmp asm_common
005237r 2               z_asm_inc_zx:
005237r 2               
005237r 2               xt_asm_inx:     ; inx \ INX
005237r 2  A9 E8                        lda #$E8
005239r 2  4C rr rr                     jmp asm_common
00523Cr 2               z_asm_inx:
00523Cr 2               
00523Cr 2               xt_asm_iny:     ; iny \ INY
00523Cr 2  A9 C8                        lda #$C8
00523Er 2  4C rr rr                     jmp asm_common
005241r 2               z_asm_iny:
005241r 2               
005241r 2               xt_asm_jmp:     ; jmp \ JMP nnnn
005241r 2  A9 4C                        lda #$4C
005243r 2  4C rr rr                     jmp asm_common
005246r 2               z_asm_jmp:
005246r 2               
005246r 2               xt_asm_jmp_i:   ; jmp.i \ JMP (nnnn)
005246r 2  A9 6C                        lda #$6C
005248r 2  4C rr rr                     jmp asm_common
00524Br 2               z_asm_jmp_i:
00524Br 2               
00524Br 2               xt_asm_jmp_xi:  ; jmp.xi \ JMP (nnnn,X)
00524Br 2  A9 7C                        lda #$7C
00524Dr 2  4C rr rr                     jmp asm_common
005250r 2               z_asm_jmp_xi:
005250r 2               
005250r 2               xt_asm_jsr:     ; jsr \ JSR nnnn
005250r 2  A9 20                        lda #$20
005252r 2  4C rr rr                     jmp asm_common
005255r 2               z_asm_jsr:
005255r 2               
005255r 2               xt_asm_lda:     ; lda \ LDA nnnn
005255r 2  A9 AD                        lda #$AD
005257r 2  4C rr rr                     jmp asm_common
00525Ar 2               z_asm_lda:
00525Ar 2               
00525Ar 2               xt_asm_lda_h:   ; lda.# \ LDA #nn
00525Ar 2  A9 A9                        lda #$A9
00525Cr 2  4C rr rr                     jmp asm_common
00525Fr 2               z_asm_lda_h:
00525Fr 2               
00525Fr 2               xt_asm_lda_x:   ; lda.x \ LDA nnnn,X
00525Fr 2  A9 BD                        lda #$BD
005261r 2  4C rr rr                     jmp asm_common
005264r 2               z_asm_lda_x:
005264r 2               
005264r 2               xt_asm_lda_y:   ; lda.y \ LDA nnnn,Y
005264r 2  A9 B9                        lda #$B9
005266r 2  4C rr rr                     jmp asm_common
005269r 2               z_asm_lda_y:
005269r 2               
005269r 2               xt_asm_lda_z:   ; lda.z \ LDA nn
005269r 2  A9 A5                        lda #$A5
00526Br 2  4C rr rr                     jmp asm_common
00526Er 2               z_asm_lda_z:
00526Er 2               
00526Er 2               xt_asm_lda_zi:  ; lda.zi \ LDA (nn)
00526Er 2  A9 B2                        lda #$B2
005270r 2  4C rr rr                     jmp asm_common
005273r 2               z_asm_lda_zi:
005273r 2               
005273r 2               xt_asm_lda_ziy: ; lda.ziy \ LDA (nn),Y
005273r 2  A9 B1                        lda #$B1
005275r 2  4C rr rr                     jmp asm_common
005278r 2               z_asm_lda_ziy:
005278r 2               
005278r 2               xt_asm_lda_zx:  ; lda.zx \ LDA nn,X
005278r 2  A9 B5                        lda #$B5
00527Ar 2  4C rr rr                     jmp asm_common
00527Dr 2               z_asm_lda_zx:
00527Dr 2               
00527Dr 2               xt_asm_lda_zxi: ; lda.zxi \ LDA (nn,X)
00527Dr 2  A9 A1                        lda #$A1
00527Fr 2  4C rr rr                     jmp asm_common
005282r 2               z_asm_lda_zxi:
005282r 2               
005282r 2               xt_asm_ldx:     ; ldx \ LDX nnnn
005282r 2  A9 AE                        lda #$AE
005284r 2  4C rr rr                     jmp asm_common
005287r 2               z_asm_ldx:
005287r 2               
005287r 2               xt_asm_ldx_h:   ; ldx.# \ LDX #nn
005287r 2  A9 A2                        lda #$A2
005289r 2  4C rr rr                     jmp asm_common
00528Cr 2               z_asm_ldx_h:
00528Cr 2               
00528Cr 2               xt_asm_ldx_y:   ; ldx.y \ LDX nnnn,Y
00528Cr 2  A9 BE                        lda #$BE
00528Er 2  4C rr rr                     jmp asm_common
005291r 2               z_asm_ldx_y:
005291r 2               
005291r 2               xt_asm_ldx_z:   ; ldx.z \ LDX nn
005291r 2  A9 A6                        lda #$A6
005293r 2  4C rr rr                     jmp asm_common
005296r 2               z_asm_ldx_z:
005296r 2               
005296r 2               xt_asm_ldx_zy:  ; ldx.zy \ LDX nn,Y
005296r 2  A9 B6                        lda #$B6
005298r 2  4C rr rr                     jmp asm_common
00529Br 2               z_asm_ldx_zy:
00529Br 2               
00529Br 2               xt_asm_ldy:     ; ldy \ LDY nnnn
00529Br 2  A9 AC                        lda #$AC
00529Dr 2  4C rr rr                     jmp asm_common
0052A0r 2               z_asm_ldy:
0052A0r 2               
0052A0r 2               xt_asm_ldy_h:   ; ldy.# \ LDY #nn
0052A0r 2  A9 A0                        lda #$A0
0052A2r 2  4C rr rr                     jmp asm_common
0052A5r 2               z_asm_ldy_h:
0052A5r 2               
0052A5r 2               xt_asm_ldy_x:   ; ldy.x \ LDY nnnn,X
0052A5r 2  A9 BC                        lda #$BC
0052A7r 2  4C rr rr                     jmp asm_common
0052AAr 2               z_asm_ldy_x:
0052AAr 2               
0052AAr 2               xt_asm_ldy_z:   ; ldy.z \ LDY nn
0052AAr 2  A9 A4                        lda #$A4
0052ACr 2  4C rr rr                     jmp asm_common
0052AFr 2               z_asm_ldy_z:
0052AFr 2               
0052AFr 2               xt_asm_ldy_zx:  ; ldy.zx \ LDY nn,X
0052AFr 2  A9 B4                        lda #$B4
0052B1r 2  4C rr rr                     jmp asm_common
0052B4r 2               z_asm_ldy_zx:
0052B4r 2               
0052B4r 2               xt_asm_lsr:     ; lsr \ LSR nnnn
0052B4r 2  A9 4E                        lda #$4E
0052B6r 2  4C rr rr                     jmp asm_common
0052B9r 2               z_asm_lsr:
0052B9r 2               
0052B9r 2               xt_asm_lsr_a:   ; lsr.a \ LSR
0052B9r 2  A9 4A                        lda #$4A
0052BBr 2  4C rr rr                     jmp asm_common
0052BEr 2               z_asm_lsr_a:
0052BEr 2               
0052BEr 2               xt_asm_lsr_x:   ; lsr.x \ LSR nnnn,X
0052BEr 2  A9 5E                        lda #$5E
0052C0r 2  4C rr rr                     jmp asm_common
0052C3r 2               z_asm_lsr_x:
0052C3r 2               
0052C3r 2               xt_asm_lsr_z:   ; lsr.z \ LSR nn
0052C3r 2  A9 46                        lda #$46
0052C5r 2  4C rr rr                     jmp asm_common
0052C8r 2               z_asm_lsr_z:
0052C8r 2               
0052C8r 2               xt_asm_lsr_zx:  ; lsr.zx \ LSR nn,X
0052C8r 2  A9 56                        lda #$56
0052CAr 2  4C rr rr                     jmp asm_common
0052CDr 2               z_asm_lsr_zx:
0052CDr 2               
0052CDr 2               xt_asm_nop:     ; nop \ NOP
0052CDr 2  A9 EA                        lda #$EA
0052CFr 2  4C rr rr                     jmp asm_common
0052D2r 2               z_asm_nop:
0052D2r 2               
0052D2r 2               xt_asm_ora:     ; ora \ ORA nnnn
0052D2r 2  A9 0D                        lda #$0D
0052D4r 2  4C rr rr                     jmp asm_common
0052D7r 2               z_asm_ora:
0052D7r 2               
0052D7r 2               xt_asm_ora_h:   ; ora.# \ ORA #nn
0052D7r 2  A9 09                        lda #$09
0052D9r 2  4C rr rr                     jmp asm_common
0052DCr 2               z_asm_ora_h:
0052DCr 2               
0052DCr 2               xt_asm_ora_x:   ; ora.x \ ORA nnnn,X
0052DCr 2  A9 1D                        lda #$1D
0052DEr 2  4C rr rr                     jmp asm_common
0052E1r 2               z_asm_ora_x:
0052E1r 2               
0052E1r 2               xt_asm_ora_y:   ; ora.y \ ORA nnnn,Y
0052E1r 2  A9 19                        lda #$19
0052E3r 2  4C rr rr                     jmp asm_common
0052E6r 2               z_asm_ora_y:
0052E6r 2               
0052E6r 2               xt_asm_ora_z:   ; ora.z \ ORA nn
0052E6r 2  A9 05                        lda #$05
0052E8r 2  4C rr rr                     jmp asm_common
0052EBr 2               z_asm_ora_z:
0052EBr 2               
0052EBr 2               xt_asm_ora_zi:  ; ora.zi \ ORA.ZI
0052EBr 2  A9 12                        lda #$12
0052EDr 2  A0 02                        ldy #2
0052EFr 2  4C rr rr                     jmp asm_common
0052F2r 2               z_asm_ora_zi:
0052F2r 2               
0052F2r 2               xt_asm_ora_ziy: ; ora.ziy \ ORA (nn),Y
0052F2r 2  A9 11                        lda #$11
0052F4r 2  4C rr rr                     jmp asm_common
0052F7r 2               z_asm_ora_ziy:
0052F7r 2               
0052F7r 2               xt_asm_ora_zx:  ; ora.zx \ ORA nn,X
0052F7r 2  A9 15                        lda #$15
0052F9r 2  4C rr rr                     jmp asm_common
0052FCr 2               z_asm_ora_zx:
0052FCr 2               
0052FCr 2               xt_asm_ora_zxi: ; ora.zxi \ ORA (nn,X)
0052FCr 2  A9 01                        lda #$01
0052FEr 2  4C rr rr                     jmp asm_common
005301r 2               z_asm_ora_zxi:
005301r 2               
005301r 2               xt_asm_pha:     ; pha \ PHA
005301r 2  A9 48                        lda #$48
005303r 2  4C rr rr                     jmp asm_common
005306r 2               z_asm_pha:
005306r 2               
005306r 2               xt_asm_php:     ; php \ PHP
005306r 2  A9 08                        lda #$08
005308r 2  4C rr rr                     jmp asm_common
00530Br 2               z_asm_php:
00530Br 2               
00530Br 2               xt_asm_phx:     ; phx \ PHX
00530Br 2  A9 DA                        lda #$DA
00530Dr 2  4C rr rr                     jmp asm_common
005310r 2               z_asm_phx:
005310r 2               
005310r 2               xt_asm_phy:     ; phy \ PHY
005310r 2  A9 5A                        lda #$5A
005312r 2  4C rr rr                     jmp asm_common
005315r 2               z_asm_phy:
005315r 2               
005315r 2               xt_asm_pla:     ; pla \ PLA
005315r 2  A9 68                        lda #$68
005317r 2  4C rr rr                     jmp asm_common
00531Ar 2               z_asm_pla:
00531Ar 2               
00531Ar 2               xt_asm_plp:     ; plp \ PLP
00531Ar 2  A9 28                        lda #$28
00531Cr 2  4C rr rr                     jmp asm_common
00531Fr 2               z_asm_plp:
00531Fr 2               
00531Fr 2               xt_asm_plx:     ; plx \ PLX
00531Fr 2  A9 FA                        lda #$FA
005321r 2  4C rr rr                     jmp asm_common
005324r 2               z_asm_plx:
005324r 2               
005324r 2               xt_asm_ply:     ; ply \ PLY
005324r 2  A9 7A                        lda #$7A
005326r 2  4C rr rr                     jmp asm_common
005329r 2               z_asm_ply:
005329r 2               
005329r 2               xt_asm_rol:     ; rol \ ROL nnnn
005329r 2  A9 2E                        lda #$2E
00532Br 2  4C rr rr                     jmp asm_common
00532Er 2               z_asm_rol:
00532Er 2               
00532Er 2               xt_asm_rol_a:   ; rol.a \ ROL
00532Er 2  A9 2A                        lda #$2A
005330r 2  4C rr rr                     jmp asm_common
005333r 2               z_asm_rol_a:
005333r 2               
005333r 2               xt_asm_rol_x:   ; rol.x \ ROL nnnn,X
005333r 2  A9 3E                        lda #$3E
005335r 2  4C rr rr                     jmp asm_common
005338r 2               z_asm_rol_x:
005338r 2               
005338r 2               xt_asm_rol_z:   ; rol.z \ ROL nn
005338r 2  A9 26                        lda #$26
00533Ar 2  4C rr rr                     jmp asm_common
00533Dr 2               z_asm_rol_z:
00533Dr 2               
00533Dr 2               xt_asm_rol_zx:  ; rol.zx \ ROL nn,X
00533Dr 2  A9 36                        lda #$36
00533Fr 2  4C rr rr                     jmp asm_common
005342r 2               z_asm_rol_zx:
005342r 2               
005342r 2               xt_asm_ror:     ; ror \ ROR nnnn
005342r 2  A9 6E                        lda #$6E
005344r 2  4C rr rr                     jmp asm_common
005347r 2               z_asm_ror:
005347r 2               
005347r 2               xt_asm_ror_a:   ; ror.a \ ROR
005347r 2  A9 6A                        lda #$6A
005349r 2  4C rr rr                     jmp asm_common
00534Cr 2               z_asm_ror_a:
00534Cr 2               
00534Cr 2               xt_asm_ror_x:   ; ror.x \ ROR nnnn,X
00534Cr 2  A9 7E                        lda #$7E
00534Er 2  4C rr rr                     jmp asm_common
005351r 2               z_asm_ror_x:
005351r 2               
005351r 2               xt_asm_ror_z:   ; ror.z \ ROR nn
005351r 2  A9 66                        lda #$66
005353r 2  4C rr rr                     jmp asm_common
005356r 2               z_asm_ror_z:
005356r 2               
005356r 2               xt_asm_ror_zx:  ; ror.zx \ ROR nn,X
005356r 2  A9 76                        lda #$76
005358r 2  4C rr rr                     jmp asm_common
00535Br 2               z_asm_ror_zx:
00535Br 2               
00535Br 2               xt_asm_rti:     ; rti \ RTI
00535Br 2  A9 40                        lda #$40
00535Dr 2  4C rr rr                     jmp asm_common
005360r 2               z_asm_rti:
005360r 2               
005360r 2               xt_asm_rts:     ; rts \ RTS
005360r 2  A9 60                        lda #$60
005362r 2  4C rr rr                     jmp asm_common
005365r 2               z_asm_rts:
005365r 2               
005365r 2               xt_asm_sbc:     ; sbc \ SBC nnnn
005365r 2  A9 ED                        lda #$ED
005367r 2  4C rr rr                     jmp asm_common
00536Ar 2               z_asm_sbc:
00536Ar 2               
00536Ar 2               xt_asm_sbc_h:   ; sbc.# \ SBC #nn
00536Ar 2  A9 E9                        lda #$E9
00536Cr 2  4C rr rr                     jmp asm_common
00536Fr 2               z_asm_sbc_h:
00536Fr 2               
00536Fr 2               xt_asm_sbc_x:   ; sbc.x \ SBC nnnn,X
00536Fr 2  A9 FD                        lda #$FD
005371r 2  4C rr rr                     jmp asm_common
005374r 2               z_asm_sbc_x:
005374r 2               
005374r 2               xt_asm_sbc_y:   ; sbc.y \ SBC nnnn,Y
005374r 2  A9 F9                        lda #$F9
005376r 2  4C rr rr                     jmp asm_common
005379r 2               z_asm_sbc_y:
005379r 2               
005379r 2               xt_asm_sbc_z:   ; sbc.z \ SBC nn
005379r 2  A9 E5                        lda #$E5
00537Br 2  4C rr rr                     jmp asm_common
00537Er 2               z_asm_sbc_z:
00537Er 2               
00537Er 2               xt_asm_sbc_zi:  ; sbc.zi \ SBC (nn)
00537Er 2  A9 F2                        lda #$F2
005380r 2  4C rr rr                     jmp asm_common
005383r 2               z_asm_sbc_zi:
005383r 2               
005383r 2               xt_asm_sbc_ziy: ; sbc.ziy \ SBC (nn),Y
005383r 2  A9 F1                        lda #$F1
005385r 2  4C rr rr                     jmp asm_common
005388r 2               z_asm_sbc_ziy:
005388r 2               
005388r 2               xt_asm_sbc_zx:  ; sbc.zx \ SBC nn,X
005388r 2  A9 F5                        lda #$F5
00538Ar 2  4C rr rr                     jmp asm_common
00538Dr 2               z_asm_sbc_zx:
00538Dr 2               
00538Dr 2               xt_asm_sbc_zxi: ; sbc.zxi \ SBC (nn,X)
00538Dr 2  A9 E1                        lda #$E1
00538Fr 2  80 7C                        bra asm_common  ; <-- limit for BRA instead of JMP
005391r 2               z_asm_sbc_zxi:
005391r 2               
005391r 2               xt_asm_sec:     ; sec \ SEC
005391r 2  A9 38                        lda #$38
005393r 2  80 78                        bra asm_common
005395r 2               z_asm_sec:
005395r 2               
005395r 2               xt_asm_sed:     ; sed \ SED
005395r 2  A9 F8                        lda #$F8
005397r 2  80 74                        bra asm_common
005399r 2               z_asm_sed:
005399r 2               
005399r 2               xt_asm_sei:     ; sei \ SEI
005399r 2  A9 78                        lda #$78
00539Br 2  80 70                        bra asm_common
00539Dr 2               z_asm_sei:
00539Dr 2               
00539Dr 2               xt_asm_sta:     ; sta \ STA nnnn
00539Dr 2  A9 8D                        lda #$8D
00539Fr 2  80 6C                        bra asm_common
0053A1r 2               z_asm_sta:
0053A1r 2               
0053A1r 2               xt_asm_sta_x:   ; sta.x \ STA nnnn,X
0053A1r 2  A9 9D                        lda #$9D
0053A3r 2  80 68                        bra asm_common
0053A5r 2               z_asm_sta_x:
0053A5r 2               
0053A5r 2               xt_asm_sta_y:   ; sta.y \ STA nnnn,Y
0053A5r 2  A9 99                        lda #$99
0053A7r 2  80 64                        bra asm_common
0053A9r 2               z_asm_sta_y:
0053A9r 2               
0053A9r 2               xt_asm_sta_z:   ; sta.z \ STA nn
0053A9r 2  A9 85                        lda #$85
0053ABr 2  80 60                        bra asm_common
0053ADr 2               z_asm_sta_z:
0053ADr 2               
0053ADr 2               xt_asm_sta_zi:  ; sta.zi \ STA (nn)
0053ADr 2  A9 92                        lda #$92
0053AFr 2  80 5C                        bra asm_common
0053B1r 2               z_asm_sta_zi:
0053B1r 2               
0053B1r 2               xt_asm_sta_ziy: ; sta.ziy \ STA (nn),Y
0053B1r 2  A9 91                        lda #$91
0053B3r 2  80 58                        bra asm_common
0053B5r 2               z_asm_sta_ziy:
0053B5r 2               
0053B5r 2               xt_asm_sta_zx:  ; sta.zx \ STA nn,X
0053B5r 2  A9 95                        lda #$95
0053B7r 2  80 54                        bra asm_common
0053B9r 2               z_asm_sta_zx:
0053B9r 2               
0053B9r 2               xt_asm_sta_zxi: ; sta.zxi \ STA (nn,X)
0053B9r 2  A9 81                        lda #$81
0053BBr 2  80 50                        bra asm_common
0053BDr 2               z_asm_sta_zxi:
0053BDr 2               
0053BDr 2               xt_asm_stx:     ; stx \ STX nnnn
0053BDr 2  A9 8E                        lda #$8E
0053BFr 2  80 4C                        bra asm_common
0053C1r 2               z_asm_stx:
0053C1r 2               
0053C1r 2               xt_asm_stx_z:   ; stx.z \ STX nn
0053C1r 2  A9 86                        lda #$86
0053C3r 2  80 48                        bra asm_common
0053C5r 2               z_asm_stx_z:
0053C5r 2               
0053C5r 2               xt_asm_stx_zy:  ; stx.zy \ STX nn,Y
0053C5r 2  A9 96                        lda #$96
0053C7r 2  80 44                        bra asm_common
0053C9r 2               z_asm_stx_zy:
0053C9r 2               
0053C9r 2               xt_asm_sty:     ; sty \ STY nnnn
0053C9r 2  A9 8C                        lda #$8C
0053CBr 2  80 40                        bra asm_common
0053CDr 2               z_asm_sty:
0053CDr 2               
0053CDr 2               xt_asm_sty_z:   ; sty.z \ STY nn
0053CDr 2  A9 84                        lda #$84
0053CFr 2  80 3C                        bra asm_common
0053D1r 2               z_asm_sty_z:
0053D1r 2               
0053D1r 2               xt_asm_sty_zx:  ; sty.zx \ STY nn,X
0053D1r 2  A9 94                        lda #$94
0053D3r 2  80 38                        bra asm_common
0053D5r 2               z_asm_sty_zx:
0053D5r 2               
0053D5r 2               xt_asm_stz:     ; stz \ STZ nnnn
0053D5r 2  A9 9C                        lda #$9C
0053D7r 2  80 34                        bra asm_common
0053D9r 2               z_asm_stz:
0053D9r 2               
0053D9r 2               xt_asm_stz_x:   ; stz.x \ STZ nnnn,X
0053D9r 2  A9 9E                        lda #$9E
0053DBr 2  80 30                        bra asm_common
0053DDr 2               z_asm_stz_x:
0053DDr 2               
0053DDr 2               xt_asm_stz_z:   ; stz.z \ STZ nn
0053DDr 2  A9 64                        lda #$64
0053DFr 2  80 2C                        bra asm_common
0053E1r 2               z_asm_stz_z:
0053E1r 2               
0053E1r 2               xt_asm_stz_zx:  ; stz.zx \ STZ nn,X
0053E1r 2  A9 74                        lda #$74
0053E3r 2  80 28                        bra asm_common
0053E5r 2               z_asm_stz_zx:
0053E5r 2               
0053E5r 2               xt_asm_tax:     ; tax \ TAX
0053E5r 2  A9 AA                        lda #$AA
0053E7r 2  80 24                        bra asm_common
0053E9r 2               z_asm_tax:
0053E9r 2               
0053E9r 2               xt_asm_tay:     ; tay \ TAY
0053E9r 2  A9 A8                        lda #$A8
0053EBr 2  80 20                        bra asm_common
0053EDr 2               z_asm_tay:
0053EDr 2               
0053EDr 2               xt_asm_trb:     ; trb \ TRB nnnn
0053EDr 2  A9 1C                        lda #$1C
0053EFr 2  80 1C                        bra asm_common
0053F1r 2               z_asm_trb:
0053F1r 2               
0053F1r 2               xt_asm_trb_z:   ; trb.z \ TRB nn
0053F1r 2  A9 14                        lda #$14
0053F3r 2  80 18                        bra asm_common
0053F5r 2               z_asm_trb_z:
0053F5r 2               
0053F5r 2               xt_asm_tsb:     ; tsb \ TSB nnnn
0053F5r 2  A9 0C                        lda #$0C
0053F7r 2  80 14                        bra asm_common
0053F9r 2               z_asm_tsb:
0053F9r 2               
0053F9r 2               xt_asm_tsb_z:   ; tsb.z \ TSB nn
0053F9r 2  A9 04                        lda #$04
0053FBr 2  80 10                        bra asm_common
0053FDr 2               z_asm_tsb_z:
0053FDr 2               
0053FDr 2               xt_asm_tsx:     ; tsx \ TSX
0053FDr 2  A9 BA                        lda #$BA
0053FFr 2  80 0C                        bra asm_common
005401r 2               z_asm_tsx:
005401r 2               
005401r 2               xt_asm_txa:     ; txa \ TXA
005401r 2  A9 8A                        lda #$8A
005403r 2  80 08                        bra asm_common
005405r 2               z_asm_txa:
005405r 2               
005405r 2               xt_asm_txs:     ; txs \ TXS
005405r 2  A9 9A                        lda #$9A
005407r 2  80 04                        bra asm_common
005409r 2               z_asm_txs:
005409r 2               
005409r 2               xt_asm_tya:     ; tya \ TYA
005409r 2  A9 98                        lda #$98
00540Br 2  80 00                        bra asm_common
00540Dr 2               z_asm_tya:
00540Dr 2               
00540Dr 2               
00540Dr 2               ; ==========================================================
00540Dr 2               ; ASSEMBLER HELPER FUNCTIONS
00540Dr 2               
00540Dr 2               asm_common:
00540Dr 2               
00540Dr 2                       ; """Common routine for all opcodes. We arrive here with the opcode in
00540Dr 2                       ; A. We do not need to check for the correct values because we are
00540Dr 2                       ; coming from the assembler Dictionary and trust our external test
00540Dr 2                       ; suite.
00540Dr 2                       ; """
00540Dr 2                               ; Compile opcode. Note cmpl_a does not use Y
00540Dr 2  A8                           tay
00540Er 2  20 rr rr                     jsr cmpl_a
005411r 2               
005411r 2                               ; We get the length of the opcode from the table included in
005411r 2                               ; the disassembler. We use the opcode value as the offset in
005411r 2                               ; the oc_index_table. We have 256 entries, each two bytes
005411r 2                               ; long, so we can't just use an index with Y. We use tmp2 for
005411r 2                               ; this.
005411r 2  A9 rr                        lda #<oc_index_table
005413r 2  85 rr                        sta tmp2
005415r 2  A9 rr                        lda #>oc_index_table
005417r 2  85 rr                        sta tmp2+1
005419r 2               
005419r 2  98                           tya             ; retrieve opcode
00541Ar 2  0A                           asl             ; times two for offset
00541Br 2  90 02                        bcc @m
00541Dr 2  E6 rr                        inc tmp2+1
00541Fr 2               @m:
00541Fr 2  A8                           tay             ; use Y as the index
005420r 2               
005420r 2                               ; Get address of the entry in the opcode table. We put it in
005420r 2                               ; tmp3 and push a copy of it to the stack to be able to print
005420r 2                               ; the opcode later
005420r 2  B1 rr                        lda (tmp2),y    ; LSB
005422r 2  85 rr                        sta tmp3
005424r 2  C8                           iny
005425r 2  B1 rr                        lda (tmp2),y    ; MSB
005427r 2  85 rr                        sta tmp3+1
005429r 2               
005429r 2  B2 rr                        lda (tmp3)      ; get "lengths byte"
00542Br 2               
00542Br 2                               ; The length of the instruction is stored in bits 7 and 6.
00542Br 2                               ; Rotate them through the carry flag and mask the rest
00542Br 2  2A                           rol
00542Cr 2  2A                           rol
00542Dr 2  2A                           rol             ; Three times because we go through Carry
00542Er 2  29 03                        and #%00000011
005430r 2  A8                           tay
005431r 2               
005431r 2                               ; One byte means no operand, we're done. Use DEY as CPY #1
005431r 2  88                           dey
005432r 2  F0 12                        beq @done
005434r 2               
005434r 2                               ; We have an operand which must be TOS
005434r 2  20 rr rr                     jsr underflow_1
005437r 2               
005437r 2                               ; We compile the LSB of TOS as the operand we definitely have
005437r 2                               ; before we even test if this is a two- or three-byte
005437r 2                               ; instruction. Little endian CPU means we store this byte first
005437r 2  B5 00                        lda 0,x
005439r 2  20 rr rr                     jsr cmpl_a      ; does not use Y
00543Cr 2               
00543Cr 2                               ; If this is a two-byte instruction, we're done. If we landed
00543Cr 2                               ; here, we've already decremented Y by one, so this is
00543Cr 2                               ; the equivalent to CPY #2
00543Cr 2  88                           dey
00543Dr 2  F0 05                        beq @done_drop
00543Fr 2               
00543Fr 2                               ; This must be a three-byte instruction, get the MSB.
00543Fr 2  B5 01                        lda 1,x
005441r 2  20 rr rr                     jsr cmpl_a      ; Fall through to _done_drop
005444r 2               
005444r 2               @done_drop:
005444r 2  E8                           inx
005445r 2  E8                           inx             ; Fall through to _done
005446r 2               @done:
005446r 2  60                           rts             ; Returns to original caller
005447r 2               
005447r 2               
005447r 2               ; ==========================================================
005447r 2               ; PSEUDO-INSTRUCTIONS AND MACROS
005447r 2               
005447r 2               xt_asm_push_a:
005447r 2                       ; """push-a puts the content of the 65c02 Accumulator on the Forth
005447r 2                       ; data stack as the TOS. This is a convience routine that encodes the
005447r 2                       ; instructions  DEX  DEX  STA 0,X  STZ 1,X
005447r 2                       ; """
005447r 2  A0 00                        ldy #0
005449r 2               _loop:
005449r 2  B9 rr rr                     lda asm_push_a_data,y
00544Cr 2  C9 FF                        cmp #$FF
00544Er 2  F0 06                        beq @done
005450r 2               
005450r 2  20 rr rr                     jsr cmpl_a      ; does not change Y
005453r 2  C8                           iny
005454r 2  80 F3                        bra _loop
005456r 2               @done:
005456r 2               z_asm_push_a:
005456r 2  60                           rts
005457r 2               asm_push_a_data:
005457r 2                       ; We can't use 00 as a terminator because STA 0,X assembles to 95 00
005457r 2  CA CA 95 00          .byte $CA, $CA, $95, 00, $74, $01
00545Br 2  74 01        
00545Dr 2  FF                   .byte $FF               ; terminator
00545Er 2               
00545Er 2               
00545Er 2               
00545Er 2               ; ==========================================================
00545Er 2               ; DIRECTIVES
00545Er 2               
00545Er 2               ; The "<J" directive (back jump) is a dummy instruction (syntactic sugar) to
00545Er 2               ; make clear that the JMP or JSR instructions are using the address that had
00545Er 2               ; been placed on the stack by "-->" (the "arrow" directive).
00545Er 2               xt_asm_back_jump:
00545Er 2               z_asm_back_jump:
00545Er 2  60                           rts
00545Fr 2               
00545Fr 2               ; The "<B" directive (back branch) takes an address that was placed on the Data
00545Fr 2               ; Stack by the anonymous label directive "-->" (the "arrow") and the current
00545Fr 2               ; address (via HERE) to calculate a backward branch offset. This is then stored
00545Fr 2               ; by a following branch instruction.
00545Fr 2               xt_asm_back_branch:
00545Fr 2                               ; We arrive here with ( addr-l ) of the label on the stack and
00545Fr 2                               ; then subtract the current address
00545Fr 2  20 rr rr                     jsr xt_here             ; ( addr-l addr-h )
005462r 2  20 rr rr                     jsr xt_minus            ; ( offset )
005465r 2               
005465r 2                               ; We subtract two more because of the branch instruction itself
005465r 2  3A                           dea
005466r 2  3A                           dea
005467r 2               
005467r 2               z_asm_back_branch:
005467r 2  60                           rts
005468r 2               .endif
005468r 2               assembler_end:
005468r 2               
005468r 2               ; END
005468r 2               
005468r 1               .include "../../disassembler.s"
005468r 2               ; Disassembler for Tali Forth 2
005468r 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
005468r 2               ; Updated by Sam Colwell
005468r 2               ; First version: 28. Apr 2018
005468r 2               ; This version: 31. Dec 2022
005468r 2               
005468r 2               ; This is the default disassembler for Tali Forth 2. Use by passing
005468r 2               ; the address and length of the block of memory to be disassembled:
005468r 2               ;
005468r 2               ;       disasm ( addr x -- )
005468r 2               
005468r 2               ; The underflow checking is handled by the word's stub in native_words.asm, see
005468r 2               ; there for more information.
005468r 2               
005468r 2               ; The code is disassembled in Simpler Assembler Notation (SAN), because that
005468r 2               ; is, uh, simpler. See the documentation and https://github.com/scotws/SAN for
005468r 2               ; more information. Because disassemblers are used interactively with slow
005468r 2               ; humans, we don't care that much about speed and put the emphasis at being
005468r 2               ; small.
005468r 2               
005468r 2               ; Uses: tmp3, tmp2, tmp1 (xt_u_dot_r uses xt_type which uses tmp1)
005468r 2               ;       scratch (used for handling literals and JSRs)
005468r 2               
005468r 2               disassembler:
005468r 2  20 rr rr                     jsr xt_cr       ; ( addr u )
00546Br 2               _byte_loop:
00546Br 2                               ; Print address at start of the line. Note we use whatever
00546Br 2                               ; number base the user has
00546Br 2  20 rr rr                     jsr xt_over     ; ( addr u addr )
00546Er 2  20 rr rr                     jsr xt_u_dot    ; ( addr u )
005471r 2  20 rr rr                     jsr xt_space
005474r 2               
005474r 2                               ; We use the opcode value as the offset in the oc_index_table.
005474r 2                               ; We have 256 entries, each two bytes long, so we can't just
005474r 2                               ; use an index with Y. We use tmp2 for this.
005474r 2  A9 rr                        lda #<oc_index_table
005476r 2  85 rr                        sta tmp2
005478r 2  A9 rr                        lda #>oc_index_table
00547Ar 2  85 rr                        sta tmp2+1
00547Cr 2               
00547Cr 2  A1 02                        lda (2,x)       ; get opcode that addr points to
00547Er 2  85 rr                        sta scratch     ; Save opcode
005480r 2               
005480r 2  0A                           asl             ; multiply by two for offset
005481r 2  90 02                        bcc @ok
005483r 2  E6 rr                        inc tmp2+1      ; we're on second page
005485r 2               @ok:
005485r 2  A8                           tay             ; use Y as the index
005486r 2               
005486r 2                               ; Get address of the entry in the opcode table. We put it
005486r 2                               ; in tmp3 and push a copy of it to the stack to be able to
005486r 2                               ; print the opcode later
005486r 2  B1 rr                        lda (tmp2),y    ; LSB
005488r 2  85 rr                        sta tmp3
00548Ar 2  48                           pha
00548Br 2               
00548Br 2  C8                           iny
00548Cr 2               
00548Cr 2  B1 rr                        lda (tmp2),y    ; MSB
00548Er 2  85 rr                        sta tmp3+1
005490r 2  48                           pha
005491r 2               
005491r 2                               ; The first byte is the "lengths byte" which is coded so
005491r 2                               ; that bits 7 to 6 are the length of the instruction (1 to
005491r 2                               ; 3 bytes) and 2 to 0 are the length of the mnemonic.
005491r 2  B2 rr                        lda (tmp3)
005493r 2  A8                           tay                     ; save copy of lengths byte
005494r 2               
005494r 2                               ; Since this is Simpler Assembler Notation (SAN) in a Forth
005494r 2                               ; system, we want to print any operand before we print the
005494r 2                               ; mnemonic ('1000 sta' instead of 'sta 1000'). This allows us
005494r 2                               ; to copy and paste directly from the disassembler to the
005494r 2                               ; assembler.
005494r 2               
005494r 2                               ; What happens next depends on the length of the instruction in
005494r 2                               ; bytes:
005494r 2               
005494r 2                               ;   1 byte:  OPC          -->          OPC  bit sequence: %01
005494r 2                               ;   2 bytes: OPC LSB      -->    0 LSB OPC  bit sequence: %10
005494r 2                               ;   3 bytes: OPC LSB MSB  -->  MSB LSB OPC  bit sequence: %11
005494r 2               
005494r 2                               ; We can distinguish between the first case, where there is
005494r 2                               ; only the mnemonic, and the second and third cases, where we
005494r 2                               ; have an operand. We do this by use of the bit sequence in
005494r 2                               ; bits 7 and 6.
005494r 2  10 3C                        bpl _no_operand         ; bit 7 clear, single-byte instruction
005496r 2               
005496r 2                               ; We have an operand. Prepare the Data Stack
005496r 2  20 rr rr                     jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
005499r 2               
005499r 2                               ; Because of the glory of a little endian CPU, we can start
005499r 2                               ; with the next byte regardless if this is a one or two byte
005499r 2                               ; operand, because we'll need the LSB one way or the other.
005499r 2                               ; We have a copy of the opcode on the stack, so we can now move
005499r 2                               ; to the next byte
005499r 2  F6 04                        inc 4,x
00549Br 2  D0 02                        bne @l1
00549Dr 2  F6 05                        inc 5,x                 ; ( addr+1 u 0 )
00549Fr 2               @l1:
00549Fr 2  B5 02                        lda 2,x
0054A1r 2  D0 02                        bne @l2
0054A3r 2  D6 03                        dec 3,x
0054A5r 2               @l2:
0054A5r 2  D6 02                        dec 2,x                 ; ( addr+1 u-1 0 )
0054A7r 2               
0054A7r 2  A1 04                        lda (4,x)
0054A9r 2  95 00                        sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
0054ABr 2  85 rr                        sta scratch+1           ; Save a copy in the scratch buffer
0054ADr 2               
0054ADr 2                               ; We still have a copy of the lengths byte in Y, which we use
0054ADr 2                               ; to see if we have a one-byte operand (and are done already)
0054ADr 2                               ; or a two-byte operand
0054ADr 2  98                           tya                     ; retrieve copy of lengths byte
0054AEr 2  2A                           rol                     ; shift bit 6 to bit 7
0054AFr 2  10 14                        bpl _print_operand
0054B1r 2               
0054B1r 2                               ; We have a three-byte instruction, so we need to get the MSB
0054B1r 2                               ; of the operand. Move to the next byte
0054B1r 2  F6 04                        inc 4,x
0054B3r 2  D0 02                        bne @l3
0054B5r 2  F6 05                        inc 5,x                 ; ( addr+2 u-1 LSB )
0054B7r 2               @l3:
0054B7r 2  B5 02                        lda 2,x
0054B9r 2  D0 02                        bne @l4
0054BBr 2  D6 03                        dec 3,x
0054BDr 2               @l4:
0054BDr 2  D6 02                        dec 2,x                 ; ( addr+2 u-2 LSB )
0054BFr 2               
0054BFr 2  A1 04                        lda (4,x)
0054C1r 2  95 01                        sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
0054C3r 2  85 rr                        sta scratch+2           ; Save a copy in the scratch buffer
0054C5r 2               
0054C5r 2                               ; fall through to _print_operand
0054C5r 2               
0054C5r 2               _print_operand:
0054C5r 2               
0054C5r 2                               ; We arrive here with the lengths byte in Y, the address of the
0054C5r 2                               ; opcode table entry for the instruction on the stack ( addr+n
0054C5r 2                               ; u-n opr). We want the output to be nicely formatted in
0054C5r 2                               ; columns, so we use U.R. The maximal width of the number in
0054C5r 2                               ; decimal on an 16-bit addressed machine is five characters
0054C5r 2  CA                           dex
0054C6r 2  CA                           dex
0054C7r 2  A9 05                        lda #5
0054C9r 2  95 00                        sta 0,x
0054CBr 2  74 01                        stz 1,x                 ; ( addr+n u-n opr 5 )
0054CDr 2               
0054CDr 2  20 rr rr                     jsr xt_u_dot_r          ; U.R ( addr+n u-n )
0054D0r 2               
0054D0r 2  80 0B                        bra _print_mnemonic
0054D2r 2               
0054D2r 2               _no_operand:
0054D2r 2                               ; We arrive here with the opcode table address on the stack,
0054D2r 2                               ; the lengths byte in Y and ( addr u ). Since we want to have
0054D2r 2                               ; a nicely formatted output, we need to indent the mnemonic by
0054D2r 2                               ; five spaces.
0054D2r 2  CA                           dex
0054D3r 2  CA                           dex
0054D4r 2  A9 05                        lda #5
0054D6r 2  95 00                        sta 0,x
0054D8r 2  74 01                        stz 1,x                 ; ( addr u 5 )
0054DAr 2               
0054DAr 2  20 rr rr                     jsr xt_spaces           ; ( addr u )
0054DDr 2               
0054DDr 2                               ; fall through to _print_mnemonic
0054DDr 2               
0054DDr 2               _print_mnemonic:
0054DDr 2                               ; We arrive here with the opcode table address on the stack and
0054DDr 2                               ; ( addr u | addr+n u-n ). Time to print the mnemonic.
0054DDr 2  20 rr rr                     jsr xt_space
0054E0r 2               
0054E0r 2  CA                           dex
0054E1r 2  CA                           dex                     ; ( addr u ? )
0054E2r 2  68                           pla                     ; MSB
0054E3r 2  95 01                        sta 1,x                 ; ( addr u MSB )
0054E5r 2  68                           pla                     ; LSB
0054E6r 2  95 00                        sta 0,x                 ; ( addr u addr-o )
0054E8r 2               
0054E8r 2  20 rr rr                     jsr xt_count            ; ( addr u addr-o u-o )
0054EBr 2               
0054EBr 2                               ; The length of the mnemnonic string is in bits 2 to 0
0054EBr 2  74 01                        stz 1,x                 ; paranoid
0054EDr 2  B5 00                        lda 0,x
0054EFr 2  29 07                        and #%00000111          ; ( addr u addr-o u-o )
0054F1r 2  95 00                        sta 0,x
0054F3r 2               
0054F3r 2  20 rr rr                     jsr xt_type             ; ( addr u )
0054F6r 2               
0054F6r 2                               ; Handle JSR by printing name of function, if available.
0054F6r 2                               ; scratch has opcode ($20 for JSR)
0054F6r 2                               ; scratch+1 and scratch+2 have address if it's a JSR.
0054F6r 2  A5 rr                        lda scratch
0054F8r 2  C9 20                        cmp #$20
0054FAr 2  D0 59                        bne _not_jsr
0054FCr 2               
0054FCr 2                               ; It's a JSR.  Print 5 spaces as an offset.
0054FCr 2  CA                           dex
0054FDr 2  CA                           dex
0054FEr 2  A9 05                        lda #5
005500r 2  95 00                        sta 0,x
005502r 2  74 01                        stz 1,x
005504r 2  20 rr rr                     jsr xt_spaces
005507r 2               
005507r 2               ; Special handlers
005507r 2                               ; Handle literals specially.
005507r 2  A9 rr                        lda #<literal_runtime
005509r 2  C5 rr                        cmp scratch+1
00550Br 2  D0 0C                        bne _not_literal
00550Dr 2  A9 rr                        lda #>literal_runtime
00550Fr 2  C5 rr                        cmp scratch+2
005511r 2  D0 06                        bne _not_literal
005513r 2                               ; It's a literal.
005513r 2  20 rr rr                     jsr disasm_literal
005516r 2  4C rr rr                     jmp _printing_done
005519r 2               
005519r 2               _not_literal:
005519r 2                               ; Handle string literals specially.
005519r 2  A9 rr                        lda #<sliteral_runtime
00551Br 2  C5 rr                        cmp scratch+1
00551Dr 2  D0 0C                        bne _not_sliteral
00551Fr 2  A9 rr                        lda #>sliteral_runtime
005521r 2  C5 rr                        cmp scratch+2
005523r 2  D0 06                        bne _not_sliteral
005525r 2                               ; It's a literal.
005525r 2  20 rr rr                     jsr disasm_sliteral
005528r 2  4C rr rr                     jmp _printing_done
00552Br 2               _not_sliteral:
00552Br 2                               ; Handle 0branch
00552Br 2  A9 rr                        lda #<zero_branch_runtime
00552Dr 2  C5 rr                        cmp scratch+1
00552Fr 2  D0 0C                        bne _not_0branch
005531r 2  A9 rr                        lda #>zero_branch_runtime
005533r 2  C5 rr                        cmp scratch+2
005535r 2  D0 06                        bne _not_0branch
005537r 2                               ; It's a 0branch.
005537r 2  20 rr rr                     jsr disasm_0branch
00553Ar 2  4C rr rr                     jmp _printing_done
00553Dr 2               _not_0branch:
00553Dr 2                               ; Handle branch
00553Dr 2  A9 rr                        lda #<branch_runtime
00553Fr 2  C5 rr                        cmp scratch+1
005541r 2  D0 0C                        bne _not_branch
005543r 2  A9 rr                        lda #>branch_runtime
005545r 2  C5 rr                        cmp scratch+2
005547r 2  D0 06                        bne _not_branch
005549r 2                               ; It's a branch.
005549r 2  20 rr rr                     jsr disasm_branch
00554Cr 2  4C rr rr                     jmp _printing_done
00554Fr 2               _not_branch:
00554Fr 2                               ; Try the generic JSR handler, which will use the target of the
00554Fr 2                               ; JSR as an XT and print the name if it exists.
00554Fr 2  20 rr rr                     jsr disasm_jsr
005552r 2  4C rr rr                     jmp _printing_done
005555r 2               
005555r 2               _not_jsr:
005555r 2                               ; See if the instruction is a jump (instruction still in A)
005555r 2                               ; (Strings start with a jump over the data.)
005555r 2  C9 4C                        cmp #$4C
005557r 2  D0 29                        bne _printing_done
005559r 2               
005559r 2                               ; We have a branch.  See if it's a string by looking for
005559r 2                               ; a JSR sliteral_runtime at the jump target address.
005559r 2                               ; The target address is in scratch+1 and scratch+2
005559r 2                               ; Use scratch+3 and scratch+4 here as we need to move
005559r 2                               ; the pointer.
005559r 2  A5 rr                        lda scratch+1   ; Copy the pointer.
00555Br 2  85 rr                        sta scratch+3
00555Dr 2  A5 rr                        lda scratch+2
00555Fr 2  85 rr                        sta scratch+4
005561r 2               
005561r 2                               ; Get the first byte at the jmp target address.
005561r 2  B2 rr                        lda (scratch+3)
005563r 2               
005563r 2  C9 20                        cmp #$20 ; check for JSR
005565r 2  D0 1B                        bne _printing_done
005567r 2                               ; Next byte
005567r 2  E6 rr                        inc scratch+3
005569r 2  D0 02                        bne @l1
00556Br 2  E6 rr                        inc scratch+4
00556Dr 2               @l1:
00556Dr 2                               ; Check for string literal runtime
00556Dr 2  B2 rr                        lda (scratch+3)
00556Fr 2               
00556Fr 2  C9 rr                        cmp #<sliteral_runtime
005571r 2  D0 0F                        bne _printing_done
005573r 2                               ; Next byte
005573r 2  E6 rr                        inc scratch+3
005575r 2  D0 02                        bne @l2
005577r 2  E6 rr                        inc scratch+4
005579r 2               @l2:
005579r 2  B2 rr                        lda (scratch+3)
00557Br 2               
00557Br 2  C9 rr                        cmp #>sliteral_runtime
00557Dr 2  D0 03                        bne _printing_done
00557Fr 2               
00557Fr 2                               ; It's a string literal jump.
00557Fr 2  20 rr rr                     jsr disasm_sliteral_jump
005582r 2               _printing_done:
005582r 2  20 rr rr                     jsr xt_cr
005585r 2               
005585r 2                               ; Housekeeping: Next byte
005585r 2  F6 02                        inc 2,x
005587r 2  D0 02                        bne @l3
005589r 2  F6 03                        inc 3,x                 ; ( addr+1 u )
00558Br 2               @l3:
00558Br 2  20 rr rr                     jsr xt_one_minus        ; ( addr+1 u-1 )
00558Er 2               
00558Er 2  B5 00                        lda 0,x                 ; All done?
005590r 2  15 01                        ora 1,x
005592r 2  F0 07                        beq @done
005594r 2               
005594r 2  B5 01                        lda 1,x                 ; Catch mid-instruction ranges
005596r 2  30 03                        bmi @done
005598r 2               
005598r 2  4C rr rr                     jmp _byte_loop          ; out of range for BRA
00559Br 2               @done:
00559Br 2                               ; Clean up and leave
00559Br 2  4C rr rr                     jmp xt_two_drop         ; JSR/RTS
00559Er 2               
00559Er 2               ; Handlers for various special disassembled instructions:
00559Er 2               ; String literal handler (both for inline strings and sliteral)
00559Er 2               disasm_sliteral_jump:
00559Er 2                               ; If we get here, we are at the jump for a constant string.
00559Er 2                               ; Strings are compiled into the dictionary like so:
00559Er 2                               ;           jmp a
00559Er 2                               ;           <string data bytes>
00559Er 2                               ;  a -->    jsr sliteral_runtime
00559Er 2                               ;           <string address>
00559Er 2                               ;           <string length>
00559Er 2                               ;
00559Er 2                               ; We have ( addr n ) on the stack where addr is the last
00559Er 2                               ; byte of the address a in the above jmp instruction.
00559Er 2                               ; Address a is in scratch+1 scratch+2.
00559Er 2               
00559Er 2                               ; Determine the distance of the jump so we end on the byte
00559Er 2                               ; just before the JSR (sets us up for SLITERAL on next loop)
00559Er 2  20 rr rr                     jsr xt_swap
0055A1r 2  CA                           dex
0055A2r 2  CA                           dex
0055A3r 2  A5 rr                        lda scratch+1
0055A5r 2  95 00                        sta 0,x
0055A7r 2  A5 rr                        lda scratch+2
0055A9r 2  95 01                        sta 1,x
0055ABr 2  20 rr rr                     jsr xt_swap
0055AEr 2  20 rr rr                     jsr xt_minus
0055B1r 2  20 rr rr                     jsr xt_one_minus
0055B4r 2                               ; (n jump_distance)
0055B4r 2                               ; Subtract the jump distance from the bytes left.
0055B4r 2  20 rr rr                     jsr xt_minus
0055B7r 2                               ; ( new_n )
0055B7r 2                               ; Move to one byte before the target address
0055B7r 2  CA                           dex
0055B8r 2  CA                           dex
0055B9r 2  A5 rr                        lda scratch+1
0055BBr 2  95 00                        sta 0,x
0055BDr 2  A5 rr                        lda scratch+2
0055BFr 2  95 01                        sta 1,x
0055C1r 2  20 rr rr                     jsr xt_one_minus
0055C4r 2  20 rr rr                     jsr xt_swap ; ( new_addr new_n )
0055C7r 2  60                           rts
0055C8r 2               
0055C8r 2               ; String literal handler
0055C8r 2               disasm_sliteral:
0055C8r 2  A9 53                        lda #'S'
0055CAr 2  20 rr rr                     jsr emit_a ; Print S before LITERAL so it becomes SLITERAL
0055CDr 2  A9 0D                        lda #str_disasm_lit     ; "LITERAL "
0055CFr 2  20 rr rr                     jsr print_string_no_lf
0055D2r 2               
0055D2r 2                               ; ( addr u ) address of last byte of JSR address and bytes left on the stack.
0055D2r 2                               ; We need to print the two values just after addr and move along two bytes
0055D2r 2                               ; for each value.
0055D2r 2  20 rr rr                     jsr xt_swap             ; switch to (u addr)
0055D5r 2  20 rr rr                     jsr xt_one_plus
0055D8r 2               
0055D8r 2  20 rr rr                     jsr xt_dup
0055DBr 2  20 rr rr                     jsr xt_fetch
0055DEr 2  20 rr rr                     jsr xt_u_dot            ; Print the address of the string
0055E1r 2                               ; Move along two bytes (already moved address one) to skip over the constant.
0055E1r 2  20 rr rr                     jsr xt_two
0055E4r 2  20 rr rr                     jsr xt_plus
0055E7r 2               
0055E7r 2  20 rr rr                     jsr xt_dup
0055EAr 2  20 rr rr                     jsr xt_question         ; Print the length of the string
0055EDr 2                               ; Move along to the very last byte of the data.
0055EDr 2  20 rr rr                     jsr xt_one_plus
0055F0r 2               
0055F0r 2                               ; ( u addr+4 )
0055F0r 2                               ; Fix up the number of bytes left.
0055F0r 2  20 rr rr                     jsr xt_swap            ; ( addr+4 u )
0055F3r 2  CA                           dex
0055F4r 2  CA                           dex
0055F5r 2  A9 04                        lda #4
0055F7r 2  95 00                        sta 0,x
0055F9r 2  74 01                        stz 1,x
0055FBr 2  20 rr rr                     jsr xt_minus            ; ( addr+4 u-4 )
0055FEr 2  60                           rts
0055FFr 2               
0055FFr 2               
0055FFr 2               ; 0BRANCH handler
0055FFr 2               disasm_0branch:
0055FFr 2  A9 30                        lda #'0'
005601r 2  20 rr rr                     jsr emit_a ; Print 0 before BRANCH so it becomes 0BRANCH
005604r 2                               ; All other processing is identical, so fall into BRANCH handler
005604r 2               ; BRANCH handler
005604r 2               disasm_branch:
005604r 2  A9 0F                        lda #str_disasm_bra
005606r 2  20 rr rr                     jsr print_string_no_lf ; "BRANCH "
005609r 2                               ; The address after the 0BRANCH is handled the same as a literal.
005609r 2  80 05                        bra disasm_print_literal
00560Br 2               
00560Br 2               ; Literal handler
00560Br 2               disasm_literal:
00560Br 2  A9 0D                        lda #str_disasm_lit
00560Dr 2  20 rr rr                     jsr print_string_no_lf ; "LITERAL "
005610r 2               disasm_print_literal:
005610r 2                               ; ( addr u ) address of last byte of JSR and bytes left on the stack.
005610r 2                               ; We need to print the value just after the address and move along two bytes.
005610r 2  20 rr rr                     jsr xt_swap ; switch to (u addr)
005613r 2  20 rr rr                     jsr xt_one_plus
005616r 2               
005616r 2  20 rr rr                     jsr xt_dup
005619r 2  20 rr rr                     jsr xt_question ; Print the value at the adress
00561Cr 2                               ; Move along two bytes (already moved address one) to skip over the constant.
00561Cr 2  20 rr rr                     jsr xt_one_plus
00561Fr 2  20 rr rr                     jsr xt_swap ; (addr+2 u)
005622r 2  20 rr rr                     jsr xt_one_minus
005625r 2  20 rr rr                     jsr xt_one_minus ; (addr+2 u-2)
005628r 2  60                           rts
005629r 2               
005629r 2               ; JSR handler
005629r 2               disasm_jsr:
005629r 2                               ; The address of the JSR is in scratch+1 and scratch+2.
005629r 2                               ; The current stack is already ( addr u ) where addr is the address of the last byte of
005629r 2                               ; the JSR target address, and we want to leave it like that so moving on to the next byte
005629r 2                               ; works properly.
005629r 2                               ; Put the target address on the stack and see if it's an XT.
005629r 2  CA                           dex
00562Ar 2  CA                           dex
00562Br 2  A5 rr                        lda scratch+1
00562Dr 2  95 00                        sta 0,x
00562Fr 2  A5 rr                        lda scratch+2
005631r 2  95 01                        sta 1,x
005633r 2                               ; ( xt )
005633r 2  20 rr rr                     jsr xt_int_to_name
005636r 2                               ; int>name returns zero if we just don't know.
005636r 2  B5 00                        lda 0,x
005638r 2  15 01                        ora 1,x
00563Ar 2  F0 07                        beq _disasm_no_nt
00563Cr 2                               ; We now have a name token ( nt ) on the stack.
00563Cr 2                               ; Change it into the name and print it.
00563Cr 2  20 rr rr                     jsr xt_name_to_string
00563Fr 2  20 rr rr                     jsr xt_type
005642r 2  60                           rts
005643r 2               
005643r 2               _disasm_no_nt:
005643r 2  20 rr rr                     jsr xt_drop ; the 0 indicating no name token
005646r 2                               ; See if the address is between underflow_1 and underflow_4,
005646r 2                               ; inclusive.
005646r 2  CA                           dex
005647r 2  CA                           dex
005648r 2  A5 rr                        lda scratch+1
00564Ar 2  95 00                        sta 0,x
00564Cr 2  A5 rr                        lda scratch+2
00564Er 2  95 01                        sta 1,x
005650r 2                               ; ( jsr_address )
005650r 2                               ; Compare to lower underflow address
005650r 2  CA                           dex
005651r 2  CA                           dex
005652r 2  A9 rr                        lda #<underflow_1
005654r 2  95 00                        sta 0,x
005656r 2  A9 rr                        lda #>underflow_1
005658r 2  95 01                        sta 1,x
00565Ar 2  20 rr rr                     jsr compare_16bit
00565Dr 2  F0 02                        beq _disasm_jsr_uflow_check_upper
00565Fr 2  B0 14                        bcs _disasm_jsr_unknown
005661r 2               _disasm_jsr_uflow_check_upper:
005661r 2                               ; Compare to upper underflow addresses
005661r 2  A9 rr                        lda #<underflow_4
005663r 2  95 00                        sta 0,x
005665r 2  A9 rr                        lda #>underflow_4
005667r 2  95 01                        sta 1,x
005669r 2  20 rr rr                     jsr compare_16bit
00566Cr 2  F0 02                        beq _disasm_jsr_soc
00566Er 2  90 05                        bcc _disasm_jsr_unknown
005670r 2               _disasm_jsr_soc:
005670r 2                               ; It's an underflow check.
005670r 2  A9 0E                        lda #str_disasm_sdc
005672r 2  20 rr rr                     jsr print_string_no_lf  ; "STACK DEPTH CHECK"
005675r 2               _disasm_jsr_unknown:
005675r 2  20 rr rr                     jsr xt_two_drop
005678r 2  60                           rts
005679r 2               
005679r 2               
005679r 2               ; =========================================================
005679r 2               oc_index_table:
005679r 2                       ; Lookup table for the instruction data (length of instruction in
005679r 2                       ; bytes, length of mnemonic in bytes, mnemonic string). This is used by
005679r 2                       ; the assembler as well.
005679r 2               
005679r 2                       ; Opcodes 00-0F
005679r 2  rr rr rr rr          .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
00567Dr 2  rr rr rr rr  
005681r 2  rr rr rr rr  
005689r 2  rr rr rr rr          .word oc08, oc09, oc0a, oc__, oc0c, oc0d, oc0e, oc0f
00568Dr 2  rr rr rr rr  
005691r 2  rr rr rr rr  
005699r 2               
005699r 2                       ; Opcodes 10-1F
005699r 2  rr rr rr rr          .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
00569Dr 2  rr rr rr rr  
0056A1r 2  rr rr rr rr  
0056A9r 2  rr rr rr rr          .word oc18, oc19, oc1a, oc__, oc1c, oc1d, oc__, oc1f
0056ADr 2  rr rr rr rr  
0056B1r 2  rr rr rr rr  
0056B9r 2               
0056B9r 2                       ; Opcodes 20-2F
0056B9r 2  rr rr rr rr          .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
0056BDr 2  rr rr rr rr  
0056C1r 2  rr rr rr rr  
0056C9r 2  rr rr rr rr          .word oc28, oc29, oc2a, oc__, oc2c, oc2d, oc2e, oc2f
0056CDr 2  rr rr rr rr  
0056D1r 2  rr rr rr rr  
0056D9r 2               
0056D9r 2                       ; Opcodes 30-3F
0056D9r 2  rr rr rr rr          .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
0056DDr 2  rr rr rr rr  
0056E1r 2  rr rr rr rr  
0056E9r 2  rr rr rr rr          .word oc38, oc39, oc3a, oc__, oc3c, oc3d, oc3e, oc0f
0056EDr 2  rr rr rr rr  
0056F1r 2  rr rr rr rr  
0056F9r 2               
0056F9r 2                       ; Opcodes 40-4F
0056F9r 2  rr rr rr rr          .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
0056FDr 2  rr rr rr rr  
005701r 2  rr rr rr rr  
005709r 2  rr rr rr rr          .word oc48, oc49, oc4a, oc__, oc4c, oc4d, oc4e, oc4f
00570Dr 2  rr rr rr rr  
005711r 2  rr rr rr rr  
005719r 2               
005719r 2                       ; Opcodes 50-5F
005719r 2  rr rr rr rr          .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
00571Dr 2  rr rr rr rr  
005721r 2  rr rr rr rr  
005729r 2  rr rr rr rr          .word oc58, oc59, oc5a, oc__, oc__, oc__, oc5e, oc5f
00572Dr 2  rr rr rr rr  
005731r 2  rr rr rr rr  
005739r 2               
005739r 2                       ; Opcodes 60-6F
005739r 2  rr rr rr rr          .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
00573Dr 2  rr rr rr rr  
005741r 2  rr rr rr rr  
005749r 2  rr rr rr rr          .word oc68, oc69, oc6a, oc__, oc6c, oc6d, oc6e, oc6f
00574Dr 2  rr rr rr rr  
005751r 2  rr rr rr rr  
005759r 2               
005759r 2                       ; Opcodes 70-7F
005759r 2  rr rr rr rr          .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
00575Dr 2  rr rr rr rr  
005761r 2  rr rr rr rr  
005769r 2  rr rr rr rr          .word oc78, oc79, oc7a, oc__, oc7c, oc7d, oc7e, oc7f
00576Dr 2  rr rr rr rr  
005771r 2  rr rr rr rr  
005779r 2               
005779r 2                       ; Opcodes 80-8F
005779r 2  rr rr rr rr          .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
00577Dr 2  rr rr rr rr  
005781r 2  rr rr rr rr  
005789r 2  rr rr rr rr          .word oc88, oc89, oc8a, oc__, oc8c, oc8d, oc8e, oc8f
00578Dr 2  rr rr rr rr  
005791r 2  rr rr rr rr  
005799r 2               
005799r 2                       ; Opcodes 90-9F
005799r 2  rr rr rr rr          .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
00579Dr 2  rr rr rr rr  
0057A1r 2  rr rr rr rr  
0057A9r 2  rr rr rr rr          .word oc98, oc99, oc9a, oc__, oc9c, oc9d, oc9e, oc9f
0057ADr 2  rr rr rr rr  
0057B1r 2  rr rr rr rr  
0057B9r 2               
0057B9r 2                       ; Opcodes A0-AF
0057B9r 2  rr rr rr rr          .word oca0, oca1, oca2, oc__, oca4, oca5, oca6, oca7
0057BDr 2  rr rr rr rr  
0057C1r 2  rr rr rr rr  
0057C9r 2  rr rr rr rr          .word oca8, oca9, ocaa, oc__, ocac, ocad, ocae, ocaf
0057CDr 2  rr rr rr rr  
0057D1r 2  rr rr rr rr  
0057D9r 2               
0057D9r 2                       ; Opcodes B0-BF
0057D9r 2  rr rr rr rr          .word ocb0, ocb1, ocb2, oc__, ocb4, ocb5, ocb6, ocb7
0057DDr 2  rr rr rr rr  
0057E1r 2  rr rr rr rr  
0057E9r 2  rr rr rr rr          .word ocb8, ocb9, ocba, oc__, ocbc, ocbd, ocbe, ocbf
0057EDr 2  rr rr rr rr  
0057F1r 2  rr rr rr rr  
0057F9r 2               
0057F9r 2                       ; Opcodes C0-CF
0057F9r 2  rr rr rr rr          .word occ0, occ1, oc__, oc__, occ4, occ5, occ6, occ7
0057FDr 2  rr rr rr rr  
005801r 2  rr rr rr rr  
005809r 2  rr rr rr rr          .word occ8, occ9, occa, oc__, occc, occd, occe, occf
00580Dr 2  rr rr rr rr  
005811r 2  rr rr rr rr  
005819r 2               
005819r 2                       ; Opcodes D0-DF
005819r 2  rr rr rr rr          .word ocd0, ocd1, ocd2, oc__, oc__, ocd5, ocd6, ocd7
00581Dr 2  rr rr rr rr  
005821r 2  rr rr rr rr  
005829r 2  rr rr rr rr          .word ocd8, ocd9, ocda, oc__, oc__, ocdd, ocde, ocdf
00582Dr 2  rr rr rr rr  
005831r 2  rr rr rr rr  
005839r 2               
005839r 2                       ; Opcodes E0-EF
005839r 2  rr rr rr rr          .word oce0, oce1, oc__, oc__, oce4, oce5, oce6, oce7
00583Dr 2  rr rr rr rr  
005841r 2  rr rr rr rr  
005849r 2  rr rr rr rr          .word oce8, oce9, ocea, oc__, ocec, oced, ocee, ocef
00584Dr 2  rr rr rr rr  
005851r 2  rr rr rr rr  
005859r 2               
005859r 2                       ; Opcodes F0-FF
005859r 2  rr rr rr rr          .word ocf0, ocf1, ocf2, oc__, oc__, ocf5, ocf6, ocf7
00585Dr 2  rr rr rr rr  
005861r 2  rr rr rr rr  
005869r 2  rr rr rr rr          .word ocf8, ocf9, ocfa, oc__, oc__, ocfd, ocfe, ocff
00586Dr 2  rr rr rr rr  
005871r 2  rr rr rr rr  
005879r 2               
005879r 2               
005879r 2               ; =========================================================
005879r 2               oc_table:
005879r 2                       ; Opcode data table for the disassember, which is also used by the
005879r 2                       ; assembler. Each entry starts with a "lengths byte":
005879r 2               
005879r 2                       ;       bit 7-6:  Length of instruction in bytes (1 to 3 for the 65c02)
005879r 2                       ;       bit 5-3:  unused
005879r 2                       ;       bit 2-0:  Length of mnemonic in chars (3 to 7)
005879r 2               
005879r 2                       ; To convert a line in this table to a Forth string of the mnemonic,
005879r 2                       ; use the COUNT word on the address of the lengths byte to get
005879r 2                       ; ( addr u ) and then mask all but the bits 2-0 of the TOS.
005879r 2               
005879r 2                       ; To make debugging easier, we keep the raw numbers for the lengths of
005879r 2                       ; the instruction and mnemonicis and let the assembler do the math
005879r 2                       ; required to shift and add. The actual mnemonic string follows after
005879r 2                       ; and is not zero terminated because we have the length in bits 2 to 0.
005879r 2               
005879r 2  83 62 72 6B  	oc00:	.byte 2*64+3, "brk"              ; enforce the signature byte
00587Dr 2  87 6F 72 61  	oc01:	.byte 2*64+7, "ora.zxi"
005881r 2  2E 7A 78 69  
005885r 2               ;      (oc02)
005885r 2               ;      (oc03)
005885r 2  85 74 73 62          oc04:   .byte 2*64+5, "tsb.z"
005889r 2  2E 7A        
00588Br 2  85 6F 72 61  	oc05:	.byte 2*64+5, "ora.z"
00588Fr 2  2E 7A        
005891r 2  85 61 73 6C  	oc06:	.byte 2*64+5, "asl.z"
005895r 2  2E 7A        
005897r 2               ;      (oc07)
005897r 2  43 70 68 70  	oc08:	.byte 1*64+3, "php"
00589Br 2  85 6F 72 61  	oc09:	.byte 2*64+5, "ora.#"
00589Fr 2  2E 23        
0058A1r 2  45 61 73 6C  	oc0a:	.byte 1*64+5, "asl.a"
0058A5r 2  2E 61        
0058A7r 2               ;      (oc0b)
0058A7r 2  C3 74 73 62  	oc0c:	.byte 3*64+3, "tsb"
0058ABr 2  C3 6F 72 61  	oc0d:	.byte 3*64+3, "ora"
0058AFr 2  C3 61 73 6C  	oc0e:	.byte 3*64+3, "asl"
0058B3r 2  C4 62 62 72  	oc0f:	.byte 3*64+4, "bbr0"
0058B7r 2  30           
0058B8r 2               
0058B8r 2  83 62 70 6C  	oc10:	.byte 2*64+3, "bpl"
0058BCr 2  87 6F 72 61  	oc11:	.byte 2*64+7, "ora.ziy"
0058C0r 2  2E 7A 69 79  
0058C4r 2  86 6F 72 61  	oc12:	.byte 2*64+6, "ora.zi"
0058C8r 2  2E 7A 69     
0058CBr 2               ;      (oc13:)
0058CBr 2  85 74 72 62  	oc14:	.byte 2*64+5, "trb.z"
0058CFr 2  2E 7A        
0058D1r 2  86 6F 72 61  	oc15:	.byte 2*64+6, "ora.zx"
0058D5r 2  2E 7A 78     
0058D8r 2  86 61 73 6C  	oc16:	.byte 2*64+6, "asl.zx"
0058DCr 2  2E 7A 78     
0058DFr 2  86 72 6D 62  	oc17:	.byte 2*64+6, "rmb1.z"
0058E3r 2  31 2E 7A     
0058E6r 2  43 63 6C 63  	oc18:	.byte 1*64+3, "clc"
0058EAr 2  C5 6F 72 61  	oc19:	.byte 3*64+5, "ora.y"
0058EEr 2  2E 79        
0058F0r 2  45 69 6E 63  	oc1a:	.byte 1*64+5, "inc.a"
0058F4r 2  2E 61        
0058F6r 2               ;      (oc1b:)
0058F6r 2  C3 74 72 62  	oc1c:	.byte 3*64+3, "trb"
0058FAr 2  C5 6F 72 61  	oc1d:	.byte 3*64+5, "ora.x"
0058FEr 2  2E 78        
005900r 2               ;      (oc1e:)
005900r 2  C5 61 73 6C  	oc1f:	.byte 3*64+5, "asl.x"
005904r 2  2E 78        
005906r 2               
005906r 2  C3 6A 73 72  	oc20:	.byte 3*64+3, "jsr"
00590Ar 2  87 61 6E 64  	oc21:	.byte 2*64+7, "and.zxi"
00590Er 2  2E 7A 78 69  
005912r 2               ;      (oc22:)
005912r 2               ;      (oc23:)
005912r 2  85 62 69 74  	oc24:	.byte 2*64+5, "bit.z"
005916r 2  2E 7A        
005918r 2  85 61 6E 64  	oc25:	.byte 2*64+5, "and.z"
00591Cr 2  2E 7A        
00591Er 2  85 72 6F 6C  	oc26:	.byte 2*64+5, "rol.z"
005922r 2  2E 7A        
005924r 2  86 72 6D 62  	oc27:	.byte 2*64+6, "rmb2.z"
005928r 2  32 2E 7A     
00592Br 2  43 70 6C 70  	oc28:	.byte 1*64+3, "plp"
00592Fr 2  85 61 6E 64  	oc29:	.byte 2*64+5, "and.#"
005933r 2  2E 23        
005935r 2  45 72 6F 6C  	oc2a:	.byte 1*64+5, "rol.a"
005939r 2  2E 61        
00593Br 2               ;      (oc2b:)
00593Br 2  C3 62 69 74  	oc2c:	.byte 3*64+3, "bit"
00593Fr 2  C4 61 6E 64  	oc2d:	.byte 3*64+4, "and."
005943r 2  2E           
005944r 2  C3 72 6F 6C  	oc2e:	.byte 3*64+3, "rol"
005948r 2  C4 62 62 72  	oc2f:	.byte 3*64+4, "bbr2"
00594Cr 2  32           
00594Dr 2               
00594Dr 2  83 62 6D 69  	oc30:	.byte 2*64+3, "bmi"
005951r 2  87 61 6E 64  	oc31:	.byte 2*64+7, "and.ziy"
005955r 2  2E 7A 69 79  
005959r 2  86 61 6E 64  	oc32:	.byte 2*64+6, "and.zi"
00595Dr 2  2E 7A 69     
005960r 2               ;      (oc33:)
005960r 2  87 62 69 74  	oc34:	.byte 2*64+7, "bit.zxi"
005964r 2  2E 7A 78 69  
005968r 2  86 61 6E 64  	oc35:	.byte 2*64+6, "and.zx"
00596Cr 2  2E 7A 78     
00596Fr 2  86 72 6F 6C  	oc36:	.byte 2*64+6, "rol.zx"
005973r 2  2E 7A 78     
005976r 2  86 72 6D 62  	oc37:	.byte 2*64+6, "rmb3.z"
00597Ar 2  33 2E 7A     
00597Dr 2  43 73 65 63  	oc38:	.byte 1*64+3, "sec"
005981r 2  C5 61 6E 64  	oc39:	.byte 3*64+5, "and.y"
005985r 2  2E 79        
005987r 2  45 64 65 63  	oc3a:	.byte 1*64+5, "dec.a"
00598Br 2  2E 61        
00598Dr 2               ;      (oc3b:)
00598Dr 2  C5 62 69 74  	oc3c:	.byte 3*64+5, "bit.x"
005991r 2  2E 78        
005993r 2  C5 61 6E 64  	oc3d:	.byte 3*64+5, "and.x"
005997r 2  2E 78        
005999r 2  C5 72 6F 6C  	oc3e:	.byte 3*64+5, "rol.x"
00599Dr 2  2E 78        
00599Fr 2  C4 62 62 72  	oc3f:	.byte 3*64+4, "bbr3"
0059A3r 2  33           
0059A4r 2               
0059A4r 2  43 72 74 69  	oc40:	.byte 1*64+3, "rti"
0059A8r 2  87 65 6F 72  	oc41:	.byte 2*64+7, "eor.zxi"
0059ACr 2  2E 7A 78 69  
0059B0r 2               ;      (oc42:)
0059B0r 2               ;      (oc43:)
0059B0r 2               ;      (oc44:)
0059B0r 2  85 65 6F 72  	oc45:	.byte 2*64+5, "eor.z"
0059B4r 2  2E 7A        
0059B6r 2  85 6C 73 72  	oc46:	.byte 2*64+5, "lsr.z"
0059BAr 2  2E 7A        
0059BCr 2  86 72 62 6D  	oc47:	.byte 2*64+6, "rbm4.z"
0059C0r 2  34 2E 7A     
0059C3r 2  43 70 68 61  	oc48:	.byte 1*64+3, "pha"
0059C7r 2  85 65 6F 72  	oc49:	.byte 2*64+5, "eor.#"
0059CBr 2  2E 23        
0059CDr 2  45 6C 73 72  	oc4a:	.byte 1*64+5, "lsr.a"
0059D1r 2  2E 61        
0059D3r 2               ;      (oc4b:)
0059D3r 2  C3 6A 6D 70  	oc4c:	.byte 3*64+3, "jmp"
0059D7r 2  C3 65 6F 72  	oc4d:	.byte 3*64+3, "eor"
0059DBr 2  C3 6C 73 72  	oc4e:	.byte 3*64+3, "lsr"
0059DFr 2  C4 62 62 72  	oc4f:	.byte 3*64+4, "bbr4"
0059E3r 2  34           
0059E4r 2               
0059E4r 2  83 62 76 63  	oc50:	.byte 2*64+3, "bvc"
0059E8r 2  87 65 6F 72  	oc51:	.byte 2*64+7, "eor.ziy"
0059ECr 2  2E 7A 69 79  
0059F0r 2  86 65 6F 72  	oc52:	.byte 2*64+6, "eor.zi"
0059F4r 2  2E 7A 69     
0059F7r 2               ;      (oc53:)
0059F7r 2               ;      (oc54:)
0059F7r 2  86 65 6F 72  	oc55:	.byte 2*64+6, "eor.zx"
0059FBr 2  2E 7A 78     
0059FEr 2  86 6C 73 72  	oc56:	.byte 2*64+6, "lsr.zx"
005A02r 2  2E 7A 78     
005A05r 2  86 72 62 6D  	oc57:	.byte 2*64+6, "rbm5.z"
005A09r 2  35 2E 7A     
005A0Cr 2  43 63 6C 69  	oc58:	.byte 1*64+3, "cli"
005A10r 2  C5 65 6F 72  	oc59:	.byte 3*64+5, "eor.y"
005A14r 2  2E 79        
005A16r 2  43 70 68 79  	oc5a:	.byte 1*64+3, "phy"
005A1Ar 2               ;      (oc5b:)
005A1Ar 2               ;      (oc5c:)
005A1Ar 2  C5 65 6F 72  	oc5d:	.byte 3*64+5, "eor.x"
005A1Er 2  2E 78        
005A20r 2  C5 6C 73 72  	oc5e:	.byte 3*64+5, "lsr.x"
005A24r 2  2E 78        
005A26r 2  C4 62 62 72  	oc5f:	.byte 3*64+4, "bbr5"
005A2Ar 2  35           
005A2Br 2               
005A2Br 2  43 72 74 73  	oc60:	.byte 1*64+3, "rts"
005A2Fr 2  87 61 64 63  	oc61:	.byte 2*64+7, "adc.zxi"
005A33r 2  2E 7A 78 69  
005A37r 2               ;      (oc62:)
005A37r 2               ;      (oc63:)
005A37r 2  85 73 74 7A  	oc64:	.byte 2*64+5, "stz.z"
005A3Br 2  2E 7A        
005A3Dr 2  85 61 64 63  	oc65:	.byte 2*64+5, "adc.z"
005A41r 2  2E 7A        
005A43r 2  85 72 6F 72  	oc66:	.byte 2*64+5, "ror.z"
005A47r 2  2E 7A        
005A49r 2  86 72 6D 62  	oc67:	.byte 2*64+6, "rmb6.z"
005A4Dr 2  36 2E 7A     
005A50r 2  43 70 6C 61  	oc68:	.byte 1*64+3, "pla"
005A54r 2  85 61 64 63  	oc69:	.byte 2*64+5, "adc.#"
005A58r 2  2E 23        
005A5Ar 2  45 72 6F 72  	oc6a:	.byte 1*64+5, "ror.a"
005A5Er 2  2E 61        
005A60r 2               ;      (oc6b:)
005A60r 2  C5 6A 6D 70  	oc6c:	.byte 3*64+5, "jmp.i"
005A64r 2  2E 69        
005A66r 2  C3 61 64 63  	oc6d:	.byte 3*64+3, "adc"
005A6Ar 2  C3 72 6F 72  	oc6e:	.byte 3*64+3, "ror"
005A6Er 2  C4 62 62 72  	oc6f:	.byte 3*64+4, "bbr6"
005A72r 2  36           
005A73r 2               
005A73r 2  83 62 76 73  	oc70:	.byte 2*64+3, "bvs"
005A77r 2  87 61 64 63  	oc71:	.byte 2*64+7, "adc.ziy"
005A7Br 2  2E 7A 69 79  
005A7Fr 2  86 61 64 63  	oc72:	.byte 2*64+6, "adc.zi"
005A83r 2  2E 7A 69     
005A86r 2               ;      (oc73:)
005A86r 2  86 73 74 7A  	oc74:	.byte 2*64+6, "stz.zx"
005A8Ar 2  2E 7A 78     
005A8Dr 2  86 61 64 63  	oc75:	.byte 2*64+6, "adc.zx"
005A91r 2  2E 7A 78     
005A94r 2  86 72 6F 72  	oc76:	.byte 2*64+6, "ror.zx"
005A98r 2  2E 7A 78     
005A9Br 2  86 72 6D 62  	oc77:	.byte 2*64+6, "rmb7.z"
005A9Fr 2  37 2E 7A     
005AA2r 2  43 73 65 69  	oc78:	.byte 1*64+3, "sei"
005AA6r 2  C5 61 64 63  	oc79:	.byte 3*64+5, "adc.y"
005AAAr 2  2E 79        
005AACr 2  43 70 6C 79  	oc7a:	.byte 1*64+3, "ply"
005AB0r 2               ;      (oc7b:)
005AB0r 2  C6 6A 6D 70  	oc7c:	.byte 3*64+6, "jmp.xi"
005AB4r 2  2E 78 69     
005AB7r 2  C5 61 64 63  	oc7d:	.byte 3*64+5, "adc.x"
005ABBr 2  2E 78        
005ABDr 2  C5 72 6F 72  	oc7e:	.byte 3*64+5, "ror.x"
005AC1r 2  2E 78        
005AC3r 2  C4 62 62 72  	oc7f:	.byte 3*64+4, "bbr7"
005AC7r 2  37           
005AC8r 2               
005AC8r 2  83 62 72 61  	oc80:	.byte 2*64+3, "bra"
005ACCr 2  87 73 74 61  	oc81:	.byte 2*64+7, "sta.zxi"
005AD0r 2  2E 7A 78 69  
005AD4r 2               ;      (oc82:)
005AD4r 2               ;      (oc83:)
005AD4r 2  85 73 74 79  	oc84:	.byte 2*64+5, "sty.z"
005AD8r 2  2E 7A        
005ADAr 2  85 73 74 61  	oc85:	.byte 2*64+5, "sta.z"
005ADEr 2  2E 7A        
005AE0r 2  85 73 74 78  	oc86:	.byte 2*64+5, "stx.z"
005AE4r 2  2E 7A        
005AE6r 2               ;      (oc87:)
005AE6r 2  43 64 65 79  	oc88:	.byte 1*64+3, "dey"
005AEAr 2  85 62 69 74  	oc89:	.byte 2*64+5, "bit.#"
005AEEr 2  2E 23        
005AF0r 2  43 74 78 61  	oc8a:	.byte 1*64+3, "txa"
005AF4r 2               ;      (oc8b:)
005AF4r 2  C3 73 74 79  	oc8c:	.byte 3*64+3, "sty"
005AF8r 2  C3 73 74 61  	oc8d:	.byte 3*64+3, "sta"
005AFCr 2  C3 73 74 78  	oc8e:	.byte 3*64+3, "stx"
005B00r 2  C4 62 62 73  	oc8f:	.byte 3*64+4, "bbs0"
005B04r 2  30           
005B05r 2               
005B05r 2  83 62 63 63  	oc90:	.byte 2*64+3, "bcc"
005B09r 2  87 73 74 61  	oc91:	.byte 2*64+7, "sta.ziy"
005B0Dr 2  2E 7A 69 79  
005B11r 2  86 73 74 61  	oc92:	.byte 2*64+6, "sta.zi"
005B15r 2  2E 7A 69     
005B18r 2               ;      (oc93:)
005B18r 2  86 73 74 79  	oc94:	.byte 2*64+6, "sty.zx"
005B1Cr 2  2E 7A 78     
005B1Fr 2  86 73 74 61  	oc95:	.byte 2*64+6, "sta.zx"
005B23r 2  2E 7A 78     
005B26r 2  86 73 74 78  	oc96:	.byte 2*64+6, "stx.zy"
005B2Ar 2  2E 7A 79     
005B2Dr 2  86 73 6D 62  	oc97:	.byte 2*64+6, "smb1.z"
005B31r 2  31 2E 7A     
005B34r 2  43 74 79 61  	oc98:	.byte 1*64+3, "tya"
005B38r 2  C5 73 74 61  	oc99:	.byte 3*64+5, "sta.y"
005B3Cr 2  2E 79        
005B3Er 2  43 74 78 73  	oc9a:	.byte 1*64+3, "txs"
005B42r 2               ;      (oc9b:)
005B42r 2  C3 73 74 7A  	oc9c:	.byte 3*64+3, "stz"
005B46r 2  C5 73 74 61  	oc9d:	.byte 3*64+5, "sta.x"
005B4Ar 2  2E 78        
005B4Cr 2  C5 73 74 7A  	oc9e:	.byte 3*64+5, "stz.x"
005B50r 2  2E 78        
005B52r 2  C4 62 62 73  	oc9f:	.byte 3*64+4, "bbs1"
005B56r 2  31           
005B57r 2               
005B57r 2  85 6C 64 79  	oca0:	.byte 2*64+5, "ldy.#"
005B5Br 2  2E 23        
005B5Dr 2  87 6C 64 61  	oca1:	.byte 2*64+7, "lda.zxi"
005B61r 2  2E 7A 78 69  
005B65r 2  85 6C 64 78  	oca2:	.byte 2*64+5, "ldx.#"
005B69r 2  2E 23        
005B6Br 2               ;      (oca3:)
005B6Br 2  85 6C 64 79  	oca4:	.byte 2*64+5, "ldy.z"
005B6Fr 2  2E 7A        
005B71r 2  85 6C 64 61  	oca5:	.byte 2*64+5, "lda.z"
005B75r 2  2E 7A        
005B77r 2  85 6C 64 78  	oca6:	.byte 2*64+5, "ldx.z"
005B7Br 2  2E 7A        
005B7Dr 2  86 73 6D 62  	oca7:	.byte 2*64+6, "smb2.z"
005B81r 2  32 2E 7A     
005B84r 2  43 74 61 79  	oca8:	.byte 1*64+3, "tay"
005B88r 2  85 6C 64 61  	oca9:	.byte 2*64+5, "lda.#"
005B8Cr 2  2E 23        
005B8Er 2  43 74 61 78  	ocaa:	.byte 1*64+3, "tax"
005B92r 2               ;      (ocab:)
005B92r 2  C3 6C 64 79  	ocac:	.byte 3*64+3, "ldy"
005B96r 2  C3 6C 64 61  	ocad:	.byte 3*64+3, "lda"
005B9Ar 2  C3 6C 64 78  	ocae:	.byte 3*64+3, "ldx"
005B9Er 2  C4 62 62 73  	ocaf:	.byte 3*64+4, "bbs2"
005BA2r 2  32           
005BA3r 2               
005BA3r 2  83 62 63 73  	ocb0:	.byte 2*64+3, "bcs"
005BA7r 2  87 6C 64 61  	ocb1:	.byte 2*64+7, "lda.ziy"
005BABr 2  2E 7A 69 79  
005BAFr 2  86 6C 64 61  	ocb2:	.byte 2*64+6, "lda.zi"
005BB3r 2  2E 7A 69     
005BB6r 2               ;      (ocb3:)
005BB6r 2  86 6C 64 79  	ocb4:	.byte 2*64+6, "ldy.zx"
005BBAr 2  2E 7A 78     
005BBDr 2  86 6C 64 61  	ocb5:	.byte 2*64+6, "lda.zx"
005BC1r 2  2E 7A 78     
005BC4r 2  86 6C 64 78  	ocb6:	.byte 2*64+6, "ldx.zy"
005BC8r 2  2E 7A 79     
005BCBr 2  86 73 6D 62  	ocb7:	.byte 2*64+6, "smb3.z"
005BCFr 2  33 2E 7A     
005BD2r 2  43 63 6C 76  	ocb8:	.byte 1*64+3, "clv"
005BD6r 2  C5 6C 64 61  	ocb9:	.byte 3*64+5, "lda.y"
005BDAr 2  2E 79        
005BDCr 2  43 74 73 78  	ocba:	.byte 1*64+3, "tsx"
005BE0r 2               ;      (ocbb:)
005BE0r 2  C5 6C 64 79  	ocbc:	.byte 3*64+5, "ldy.x"
005BE4r 2  2E 78        
005BE6r 2  C5 6C 64 61  	ocbd:	.byte 3*64+5, "lda.x"
005BEAr 2  2E 78        
005BECr 2  C5 6C 64 78  	ocbe:	.byte 3*64+5, "ldx.y"
005BF0r 2  2E 79        
005BF2r 2  C4 62 62 73  	ocbf:	.byte 3*64+4, "bbs4"
005BF6r 2  34           
005BF7r 2               
005BF7r 2  85 63 70 79  	occ0:	.byte 2*64+5, "cpy.#"
005BFBr 2  2E 23        
005BFDr 2  87 63 6D 70  	occ1:	.byte 2*64+7, "cmp.zxi"
005C01r 2  2E 7A 78 69  
005C05r 2               ;      (occ2:)
005C05r 2               ;      (occ3:)
005C05r 2  85 63 70 79  	occ4:	.byte 2*64+5, "cpy.z"
005C09r 2  2E 7A        
005C0Br 2  85 63 6D 70  	occ5:	.byte 2*64+5, "cmp.z"
005C0Fr 2  2E 7A        
005C11r 2  85 64 65 63  	occ6:	.byte 2*64+5, "dec.z"
005C15r 2  2E 7A        
005C17r 2  86 73 6D 62  	occ7:	.byte 2*64+6, "smb4.z"
005C1Br 2  34 2E 7A     
005C1Er 2  43 69 6E 79  	occ8:	.byte 1*64+3, "iny"
005C22r 2  85 63 6D 70  	occ9:	.byte 2*64+5, "cmp.#"
005C26r 2  2E 23        
005C28r 2  43 64 65 78  	occa:	.byte 1*64+3, "dex"
005C2Cr 2               ;      (occb:)
005C2Cr 2  C3 63 70 79  	occc:	.byte 3*64+3, "cpy"
005C30r 2  C3 63 6D 70  	occd:	.byte 3*64+3, "cmp"
005C34r 2  C3 64 65 63  	occe:	.byte 3*64+3, "dec"
005C38r 2  C4 62 62 73  	occf:	.byte 3*64+4, "bbs4"
005C3Cr 2  34           
005C3Dr 2               
005C3Dr 2  83 62 6E 65  	ocd0:	.byte 2*64+3, "bne"
005C41r 2  87 63 6D 70  	ocd1:	.byte 2*64+7, "cmp.ziy"
005C45r 2  2E 7A 69 79  
005C49r 2  86 63 6D 70  	ocd2:	.byte 2*64+6, "cmp.zi"
005C4Dr 2  2E 7A 69     
005C50r 2               ;      (ocd3:)
005C50r 2               ;      (ocd4:)
005C50r 2  86 63 6D 70  	ocd5:	.byte 2*64+6, "cmp.zx"
005C54r 2  2E 7A 78     
005C57r 2  86 64 65 63  	ocd6:	.byte 2*64+6, "dec.zx"
005C5Br 2  2E 7A 78     
005C5Er 2  86 73 6D 62  	ocd7:	.byte 2*64+6, "smb5.z"
005C62r 2  35 2E 7A     
005C65r 2  43 63 6C 64  	ocd8:	.byte 1*64+3, "cld"
005C69r 2  C5 63 6D 70  	ocd9:	.byte 3*64+5, "cmp.y"
005C6Dr 2  2E 79        
005C6Fr 2  43 70 68 78  	ocda:	.byte 1*64+3, "phx"
005C73r 2               ;      (ocdb:)
005C73r 2               ;      (ocdc:)
005C73r 2  C5 63 6D 70  	ocdd:	.byte 3*64+5, "cmp.x"
005C77r 2  2E 78        
005C79r 2  C5 64 65 63  	ocde:	.byte 3*64+5, "dec.x"
005C7Dr 2  2E 78        
005C7Fr 2  C4 62 62 73  	ocdf:	.byte 3*64+4, "bbs5"
005C83r 2  35           
005C84r 2               
005C84r 2  85 63 70 78  	oce0:	.byte 2*64+5, "cpx.#"
005C88r 2  2E 23        
005C8Ar 2  87 73 62 63  	oce1:	.byte 2*64+7, "sbc.zxi"
005C8Er 2  2E 7A 78 69  
005C92r 2               ;      (oce2:)
005C92r 2               ;      (oce3:)
005C92r 2  85 63 70 78  	oce4:	.byte 2*64+5, "cpx.z"
005C96r 2  2E 7A        
005C98r 2  85 73 62 63  	oce5:	.byte 2*64+5, "sbc.z"
005C9Cr 2  2E 7A        
005C9Er 2  85 69 6E 63  	oce6:	.byte 2*64+5, "inc.z"
005CA2r 2  2E 7A        
005CA4r 2  86 73 6D 62  	oce7:	.byte 2*64+6, "smb6.z"
005CA8r 2  36 2E 7A     
005CABr 2  43 69 6E 78  	oce8:	.byte 1*64+3, "inx"
005CAFr 2  85 73 62 63  	oce9:	.byte 2*64+5, "sbc.#"
005CB3r 2  2E 23        
005CB5r 2  43 6E 6F 70  	ocea:	.byte 1*64+3, "nop"
005CB9r 2               ;      (oceb:)
005CB9r 2  C3 63 70 78  	ocec:	.byte 3*64+3, "cpx"
005CBDr 2  C3 73 62 63  	oced:	.byte 3*64+3, "sbc"
005CC1r 2  C3 69 6E 63  	ocee:	.byte 3*64+3, "inc"
005CC5r 2  C4 62 62 73  	ocef:	.byte 3*64+4, "bbs6"
005CC9r 2  36           
005CCAr 2               
005CCAr 2  83 62 65 71  	ocf0:	.byte 2*64+3, "beq"
005CCEr 2  87 73 62 63  	ocf1:	.byte 2*64+7, "sbc.ziy"
005CD2r 2  2E 7A 69 79  
005CD6r 2  86 73 62 63  	ocf2:	.byte 2*64+6, "sbc.zi"
005CDAr 2  2E 7A 69     
005CDDr 2               ;      (ocf3:)
005CDDr 2               ;      (ocf4:)
005CDDr 2  86 73 62 63  	ocf5:	.byte 2*64+6, "sbc.zx"
005CE1r 2  2E 7A 78     
005CE4r 2  86 69 6E 63  	ocf6:	.byte 2*64+6, "inc.zx"
005CE8r 2  2E 7A 78     
005CEBr 2  86 73 6D 62  	ocf7:	.byte 2*64+6, "smb7.z"
005CEFr 2  37 2E 7A     
005CF2r 2  43 73 65 64  	ocf8:	.byte 1*64+3, "sed"
005CF6r 2  C5 73 62 63  	ocf9:	.byte 3*64+5, "sbc.y"
005CFAr 2  2E 79        
005CFCr 2  43 70 6C 78  	ocfa:	.byte 1*64+3, "plx"
005D00r 2               ;      (ocfb:)
005D00r 2               ;      (ocfc:)
005D00r 2  C5 73 62 63  	ocfd:	.byte 3*64+5, "sbc.x"
005D04r 2  2E 78        
005D06r 2  C5 69 6E 63  	ocfe:	.byte 3*64+5, "inc.x"
005D0Ar 2  2E 78        
005D0Cr 2  C4 62 62 73  	ocff:	.byte 3*64+4, "bbs7"
005D10r 2  37           
005D11r 2               
005D11r 2                       ; Common routine for opcodes that are not supported by the 65c02
005D11r 2  01 3F        	oc__:	.byte 1, "?"
005D13r 2               
005D13r 2               ; used to calculate size of assembled disassembler code
005D13r 2               disassembler_end:
005D13r 2               
005D13r 1               .endif
005D13r 1               
005D13r 1               
005D13r 1               platform_bye:
005D13r 1               kernel_init:
005D13r 1               .ifdef VIA1_BASE
005D13r 1  A9 FF            lda #$FF
005D15r 1  8D 82 FF         sta DDRB
005D18r 1  8D 83 FF         sta DDRA
005D1Br 1  A9 01            lda #1
005D1Dr 1  8D 80 FF         sta PORTB
005D20r 1  9C 81 FF         stz PORTA
005D23r 1               .endif
005D23r 1               
005D23r 1  20 rr rr     jsr acia_init
005D26r 1               .ifdef timer_init
005D26r 1  20 rr rr         jsr timer_init
005D29r 1               .endif
005D29r 1               .ifdef video_init
005D29r 1                   jsr video_init
005D29r 1               .endif
005D29r 1               .ifdef ps2_init
005D29r 1                   jsr ps2_init
005D29r 1               .endif
005D29r 1               .ifdef cf_init
005D29r 1  20 rr rr         jsr cf_init
005D2Cr 1               .endif
005D2Cr 1               .ifdef lcd_init
005D2Cr 1                   jsr lcd_init
005D2Cr 1               .endif
005D2Cr 1               .ifdef spi_init
005D2Cr 1  20 rr rr         jsr spi_init
005D2Fr 1               .endif
005D2Fr 1               .ifdef kb_init
005D2Fr 1                   jsr kb_init
005D2Fr 1               .endif
005D2Fr 1               
005D2Fr 1  DA A2 00 BD      printascii welcome_message
005D33r 1  rr rr F0 06  
005D37r 1  20 rr rr E8  
005D3Er 1               
005D3Er 1  A9 rr            lda #<dictionary
005D40r 1  85 rr            sta util_tmp
005D42r 1  A9 rr            lda #>dictionary
005D44r 1  85 rr            sta util_tmp + 1
005D46r 1               
005D46r 1  20 rr rr         jsr calculate_free_mem
005D49r 1  A5 rr            lda tmp_var + 1
005D4Br 1  A6 rr            ldx tmp_var
005D4Dr 1  20 rr rr         jsr print16
005D50r 1               
005D50r 1  DA A2 00 BD      printascii free_message
005D54r 1  rr rr F0 06  
005D58r 1  20 rr rr E8  
005D5Fr 1               
005D5Fr 1               
005D5Fr 1  4C rr rr         jmp forth
005D62r 1               
005D62r 1               v_nmi:
005D62r 1               
005D62r 1                   ; jsr calculate_free_mem
005D62r 1                   ; lda tmp_var + 1
005D62r 1                   ; ldx tmp_var
005D62r 1                   ; jsr print16
005D62r 1               
005D62r 1                   ; printascii free_message
005D62r 1  DA A2 00 BD      printascii ready_message
005D66r 1  rr rr F0 06  
005D6Ar 1  20 rr rr E8  
005D71r 1               
005D71r 1  4C rr rr         jmp xt_abort
005D74r 1               
005D74r 1               
005D74r 1               
005D74r 1               
005D74r 1               io_read_sector:
005D74r 1  4C rr rr         jmp io_read_sector_address        ; jump to read sector routine
005D77r 1               
005D77r 1               io_write_sector:
005D77r 1  4C rr rr         jmp io_write_sector_address        ; jump to read sector routine
005D7Ar 1               
005D7Ar 1               
005D7Ar 1               
005D7Ar 1               kernel_putc:
005D7Ar 1                   ; """Print a single character to the console. """
005D7Ar 1                   ;; Send_Char - send character in A out serial port.
005D7Ar 1                   ;; Uses: A (original value restored)
005D7Ar 1               send_char:
005D7Ar 1  48               pha
005D7Br 1                   .ifdef char_out
005D7Br 1                   jsr char_out
005D7Br 1                   .endif
005D7Br 1                   .ifdef acia_out
005D7Br 1  20 rr rr         jsr acia_out
005D7Er 1                   .endif
005D7Er 1               send_char_exit:
005D7Er 1               .ifdef lcd_print
005D7Er 1                   ; jsr lcd_print
005D7Er 1               .endif
005D7Er 1  68               pla
005D7Fr 1  60               rts
005D80r 1               
005D80r 1               
005D80r 1                       ;; Get_Char - get a character from the serial port into A.
005D80r 1                       ;; Set the carry flag if char is valid.
005D80r 1                       ;; Return immediately with carry flag clear if no char available.
005D80r 1                       ;; Uses: A (return value)
005D80r 1               
005D80r 1               Get_Char:
005D80r 1  20 rr rr         jsr acia_getc
005D83r 1  90 02            bcc get_ps2_char                ; check keyboard buffer if nothing from ACIA
005D85r 1  38               sec                             ; Set Carry to show we got a character
005D86r 1  60               rts                             ; Return
005D87r 1               
005D87r 1               get_ps2_char:                       ; no ACIA char available, try to get from KB buffer
005D87r 1               .ifdef ps2_get_char
005D87r 1                   jsr ps2_get_char
005D87r 1               .endif
005D87r 1  90 02            bcc get_kb_char
005D89r 1  38               sec
005D8Ar 1               
005D8Ar 1  60               rts
005D8Br 1               get_kb_char:
005D8Br 1                   .ifdef kb_get_char
005D8Br 1               
005D8Br 1                   ; ldy #5
005D8Br 1                   ; jsr delay_short
005D8Br 1                   ; ply
005D8Br 1                       jsr kb_get_char
005D8Br 1               
005D8Br 1                   .endif
005D8Br 1               exit:                         ; Indicate no char available.
005D8Br 1  60               rts                             ; return
005D8Cr 1               
005D8Cr 1               kernel_getc:
005D8Cr 1                   ; """Get a single character from the keyboard (waits for key).
005D8Cr 1                   ; """
005D8Cr 1                   ;; Get_Char_Wait - same as Get_Char only blocking.
005D8Cr 1                   ;; Uses: A (return value)
005D8Cr 1               Get_Char_Wait:
005D8Cr 1  20 rr rr         jsr Get_Char
005D8Fr 1  90 FB            bcc Get_Char_Wait
005D91r 1  60               rts
005D92r 1               
005D92r 1               
005D92r 1               v_irq:                          ; IRQ handler
005D92r 1  48                   pha
005D93r 1  5A                   phy
005D94r 1                       ; lda #'.'
005D94r 1                       ; jsr kernel_putc
005D94r 1                       ; check if bit 7 of IFR is set
005D94r 1               .ifdef IFR
005D94r 1  AD 8D FF             lda IFR
005D97r 1  10 0B                bpl irq_not_from_via  ; Interrupt not from VIA, exit
005D99r 1               
005D99r 1  29 08                and #$08        ; ps2 has priority
005D9Br 1  D0 07                bne v_irq_ps2
005D9Dr 1  AD 8D FF             lda IFR
005DA0r 1  29 40                and #$40
005DA2r 1  D0 02                bne v_irq_timer
005DA4r 1               irq_not_from_via:
005DA4r 1               .endif
005DA4r 1               .ifdef KB_IFR
005DA4r 1               v_kb_irq:
005DA4r 1                       lda KB_IFR
005DA4r 1                       bpl v_irq_exit
005DA4r 1                       and #$40
005DA4r 1                       bne v_kb_irq_timer
005DA4r 1                       bra v_irq_exit
005DA4r 1               .endif
005DA4r 1               
005DA4r 1               v_irq_ps2:
005DA4r 1                   .ifdef ps2_irq
005DA4r 1                       lda time
005DA4r 1                       sta last_ps2_time
005DA4r 1                       lda time+1
005DA4r 1                       sta last_ps2_time+1
005DA4r 1                       lda time+2
005DA4r 1                       sta last_ps2_time+2
005DA4r 1                       lda time+3
005DA4r 1                       sta last_ps2_time+3
005DA4r 1               
005DA4r 1                       jsr ps2_irq
005DA4r 1               
005DA4r 1                   .endif
005DA4r 1  80 27                bra v_irq_exit
005DA6r 1               
005DA6r 1               .ifdef T1CL
005DA6r 1               v_irq_timer:
005DA6r 1  AD 84 FF             lda T1CL
005DA9r 1                       ; clear timer interrupt
005DA9r 1                   .ifdef timer_irq
005DA9r 1  20 rr rr             jsr timer_irq
005DACr 1                   .endif
005DACr 1  20 rr rr             jsr Get_Char ; Check if a char is waiting to be able to break on CTRL-C
005DAFr 1                       ; check if there is a char waiting to be printed to the lcd
005DAFr 1                       ; lda lcd_char
005DAFr 1                       ; beq v_exit
005DAFr 1                       ; jsr lcd_print
005DAFr 1                       ; stz lcd_char
005DAFr 1               
005DAFr 1               
005DAFr 1  90 1C                bcc v_irq_exit      ; no character waiting, exit normally
005DB1r 1  C9 03                cmp #$03            ; check if CTRL-C
005DB3r 1  D0 18                bne v_irq_exit      ; not CTRL-C, exit normally
005DB5r 1  DA A2 00 BD          printascii abort_message    ; was a CTRL_C
005DB9r 1  rr rr F0 06  
005DBDr 1  20 rr rr E8  
005DC4r 1  7A                   ply                         ; pull what the ISR pushed
005DC5r 1  68                   pla
005DC6r 1  28                   plp                         ; pull status register
005DC7r 1  68                   pla                         ; pull return address
005DC8r 1  68                   pla
005DC9r 1               
005DC9r 1  58                   cli                         ; clear interrupt diabled bit
005DCAr 1  4C rr rr             jmp xt_abort
005DCDr 1               
005DCDr 1               .endif
005DCDr 1               v_kb_irq_timer:
005DCDr 1               .ifdef kb_time
005DCDr 1                   lda KB_T1CL ; clear timer interrupt
005DCDr 1                   inc kb_time
005DCDr 1                   bne v_irq_exit
005DCDr 1               .endif
005DCDr 1                   ;jsr kb_scan
005DCDr 1               v_irq_exit:
005DCDr 1  7A               ply
005DCEr 1  68               pla
005DCFr 1  40               rti
005DD0r 1               
005DD0r 1  20 62 79 74  free_message: .byte " bytes free", $0D, 0
005DD4r 1  65 73 20 66  
005DD8r 1  72 65 65 0D  
005DDDr 1  52 65 61 64  ready_message: .byte "Ready", $0D, 0
005DE1r 1  79 0D 00     
005DE4r 1  57 65 6C 63  welcome_message: .byte "Welcome to Planck 6502", $0D, "Type 'words' for available words", $0D, 0
005DE8r 1  6F 6D 65 20  
005DECr 1  74 6F 20 50  
005E1Dr 1  0D 0A 00     abort_message: .byte AscCR, AscLF, 0
005E20r 1               
005E20r 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        .word v_nmi
000002r 1  rr rr        .word v_reset
000004r 1  rr rr        .word v_irq
000004r 1               
