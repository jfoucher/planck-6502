ca65 V2.18 - N/A
Main file   : platform/planck/main.s
Current file: platform/planck/main.s

000000r 1               
000000r 1               .include "../../macros.s"
000000r 2               .macro  printascii   addr
000000r 2               .local @loop
000000r 2               .local @done
000000r 2                   phx
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda addr,x
000000r 2                   beq @done
000000r 2                   jsr kernel_putc
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @done:
000000r 2                   plx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               
000000r 2               .macro  cp16   src, dest
000000r 2                   lda src
000000r 2                   sta dest
000000r 2                   lda src + 1
000000r 2                   sta dest + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro printstr addr, len
000000r 2               .repeat len, I
000000r 2               lda addr + I
000000r 2               jsr kernel_putc
000000r 2               .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl16 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl32 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2                   rol src + 2
000000r 2                   rol src + 3
000000r 2               .endmacro
000000r 2               
000000r 2               .macro lsr16 src
000000r 2                   lsr src + 1
000000r 2                   ror src
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc16 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment the MSB if LSB wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc32 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment next byte if LSB wrapped round
000000r 2                   bne @done
000000r 2                   inc src+2       ;Increment the next byte the previous wrapped round
000000r 2                   bne @done
000000r 2                   inc src+3       ;Increment the MSB if previous wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16 src
000000r 2               .local @skip
000000r 2               .local @end
000000r 2                   lda src             ; load low byte
000000r 2                   bne @skip           ; if it's not zero, just decrement it
000000r 2                   dec src + 1         ; if low byte is zero decrement high byte
000000r 2               @skip:
000000r 2                   dec src
000000r 2               @end:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16zero src
000000r 2               .local @skip
000000r 2               .local @end
000000r 2                   lda src             ; load low byte
000000r 2                   bne @skip           ; if it's not zero, decrement it
000000r 2                   dec src + 1         ; if low byte is zero decrement high byte
000000r 2                   beq @end            ; if high byte is also zero, we reached zero, exit now
000000r 2               @skip:
000000r 2                   dec src
000000r 2                   bne @end            ; if low byte is not zero exit now
000000r 2                   lda src + 1         ; if low byte was zero, load high byte to check if it's also zero
000000r 2               @end:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro add16 first, second, result
000000r 2                   CLC             ;Ensure carry is clear
000000r 2                   LDA first+0       ;Add the two least significant bytes
000000r 2                   ADC second+0
000000r 2                   STA result+0       ;... and store the result
000000r 2                   LDA first+1       ;Add the two most significant bytes
000000r 2                   ADC second+1       ;... and any propagated carry bit
000000r 2                   STA result+1       ;... and store the result
000000r 2               .endmacro
000000r 2               
000000r 2               ; compare data at two adresses for defined length
000000r 2               ; On exit, carry is set if there is a match
000000r 2               ; and unset if no match
000000r 2               ; length of data to check is in X
000000r 2               
000000r 2               .macro memcmp first, second
000000r 2               .local @exit
000000r 2               .local @loop
000000r 2               .local @exit_fail
000000r 2               @loop:
000000r 2                   lda first, x
000000r 2                   cmp second, x
000000r 2                   bne @exit_fail
000000r 2                   dex
000000r 2                   bne @loop
000000r 2                   lda first           ; check 0th element
000000r 2                   cmp second
000000r 2                   bne @exit_fail
000000r 2                   sec
000000r 2                   bra @exit
000000r 2               @exit_fail:
000000r 2                   clc
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               ; copy data from one address to another for defined length
000000r 2               ; length of data to copy is in X
000000r 2               .macro memcp first, second
000000r 2               .local @exit
000000r 2               .local @loop
000000r 2               @loop:
000000r 2                   lda first, x
000000r 2                   sta second, x
000000r 2                   dex
000000r 2                   bne @loop
000000r 2                   lda first           ; copy zeroth item
000000r 2                   sta second
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               ; calculates length of zero terminated string
000000r 2               ; result is in x
000000r 2               .macro strlen address
000000r 2               .local @loop
000000r 2               .local @exit
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda address, x
000000r 2                   beq @exit
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_axy
000000r 2               	pha		; push accumulator to stack
000000r 2               	phx
000000r 2                   phy
000000r 2               .endmacro
000000r 2               
000000r 2               .macro pull_axy
000000r 2               	ply		; pull y from stack
000000r 2               	plx		; pull x from stack
000000r 2               	pla		; pull a from stack
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro push_ax
000000r 2               	pha
000000r 2               	phx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ax
000000r 2               	pla
000000r 2               	plx
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_ay
000000r 2               	pha
000000r 2               	phy
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ay
000000r 2               	pla
000000r 2               	ply
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro mov32 SRC, DEST
000000r 2               	lda SRC
000000r 2               	sta DEST
000000r 2               	lda SRC+1
000000r 2               	sta DEST+1
000000r 2               	lda SRC+2
000000r 2               	sta DEST+2
000000r 2               	lda SRC+3
000000r 2               	sta DEST+3
000000r 2               .endmacro
000000r 2               
000000r 1               CLOCK_SPEED = 24000000
000000r 1               TALI_OPTIONAL_ASSEMBLER = 1
000000r 1               
000000r 1               ram_end = $8000
000000r 1               
000000r 1               ; select includes to enable card drivers
000000r 1               
000000r 1               .include "drivers/cf.inc"
000000r 2               
000000r 2               CF_READ_SECTOR_COMMAND = $20
000000r 2               CF_WRITE_SECTOR_COMMAND = $30
000000r 2               CF_ADDRESS = $FFD0
000000r 2               
000000r 1               .include "drivers/acia.inc"
000000r 2               ACIA_BASE   = $FFE0
000000r 2               ACIA_DATA = ACIA_BASE
000000r 2               ACIA_STATUS = ACIA_BASE + 1
000000r 2               ACIA_CMD = ACIA_BASE + 2
000000r 2               ACIA_CTRL = ACIA_BASE + 3
000000r 2               
000000r 2               
000000r 1               .include "drivers/via.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               VIA1_BASE   = $FF80
000000r 2               PORTB = VIA1_BASE
000000r 2               PORTA  = VIA1_BASE+1
000000r 2               DDRB = VIA1_BASE+2
000000r 2               DDRA = VIA1_BASE+3
000000r 2               
000000r 2               
000000r 2               T1CL = VIA1_BASE + 4
000000r 2               T1CH = VIA1_BASE + 5
000000r 2               T1LL = VIA1_BASE + 6
000000r 2               T1LH = VIA1_BASE + 7
000000r 2               ACR = VIA1_BASE + 11
000000r 2               PCR = VIA1_BASE + 12
000000r 2               IFR = VIA1_BASE + 13
000000r 2               IER = VIA1_BASE + 14
000000r 2               
000000r 1               ; .include "drivers/sd.inc"
000000r 1               .include "drivers/ps2.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               DATA = $80   ; Data is in bit 7 of PORTA
000000r 2               ; clock is on CA2
000000r 2               SHIFT = $1
000000r 2               ALT = $2
000000r 2               
000000r 2               KB_STATE_START = $0
000000r 2               KB_STATE_DATA = $1
000000r 2               KB_STATE_PARITY = $2
000000r 2               KB_STATE_STOP = $3
000000r 2               
000000r 2               KB_INIT_STATE_RESET = $0
000000r 2               KB_INIT_STATE_RESET_ACK = $1
000000r 2               KB_INIT_STATE_LEDS = $2
000000r 2               KB_INIT_STATE_LEDS_ACK = $3
000000r 2               KB_INIT_STATE_LEDS_DATA = $4
000000r 2               KB_INIT_STATE_LEDS_DATA_ACK = $5
000000r 2               
000000r 2               LSHIFT_KEY = $12
000000r 2               RSHIFT_KEY = $59
000000r 2               
000000r 2               TIMER_DELAY = $C4
000000r 2               
000000r 2               
000000r 1               ; .include "drivers/4004.inc"
000000r 1               .include "drivers/lcd.inc"
000000r 2               
000000r 2               ; HD 44780 driver
000000r 2               ; all pins on VIA PORTA, 4 bit mode
000000r 2               
000000r 2               ; PORTA0 is free
000000r 2               LCD_BASE = $FFC0
000000r 2               LCD_ADDR_DISABLED = LCD_BASE
000000r 2               LCD_ADDR_ENABLED = LCD_BASE + 1
000000r 2               LCD_DATA_DISABLED = LCD_BASE + 2
000000r 2               LCD_DATA_ENABLED = LCD_BASE + 3
000000r 2               
000000r 2               
000000r 2               ; A0: RS
000000r 2               ; A1: E
000000r 2               
000000r 1               ; .include "drivers/vga.inc"
000000r 1               ; .include "drivers/keyboard.inc"
000000r 1               
000000r 1               .segment "ZEROPAGE": zeropage
000000r 1  xx xx        io_buffer_ptr: .res 2
000002r 1               
000002r 1               .include "drivers/zp.s"
000002r 2               ; Copyright 2020 Jonathan Foucher
000002r 2               
000002r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000002r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000002r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000002r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000002r 2               ; is furnished to do so, subject to the following conditions:
000002r 2               
000002r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000002r 2               ; substantial portions of the Software.
000002r 2               
000002r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000002r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000002r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000002r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000002r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000002r 2               ; DEALINGS IN THE SOFTWARE.
000002r 2               
000002r 2               ; next_addr: .res 1
000002r 2               
000002r 2               
000002r 2  xx xx        tmp_var: .res 2
000004r 2  xx xx        stack_p: .res 2
000006r 2               .ifdef VIA1_BASE
000006r 2  xx xx xx xx  time: .res 4
00000Ar 2               .endif
00000Ar 2               
00000Ar 1               
00000Ar 1               .segment "BSS"
000000r 1               
000000r 1               .ifdef CF_ADDRESS
000000r 1               IO_BUFFER = cp0+256 ; set IO_BUFFER to block buffer
000000r 1  xx xx xx xx  IO_SECTOR: .res 4
000004r 1               .endif
000004r 1               
000004r 1               .segment "STARTUP"
000000r 1               .import    copydata
000000r 1               .import zerobss
000000r 1               zero_ram:
000000r 1  A2 FF            ldx #$FF
000002r 1               zero_zp:
000002r 1  74 00            stz 0, x
000004r 1  CA               dex
000005r 1  D0 FB            bne zero_zp
000007r 1  64 00            stz $00
000009r 1  A9 00            lda #0
00000Br 1  85 01            sta $01
00000Dr 1               
00000Dr 1  A2 80            ldx #$80
00000Fr 1  A0 00            ldy #0
000011r 1  A9 00            lda #0
000013r 1               @loop:
000013r 1  91 00            sta ($0), y
000015r 1  C8               iny
000016r 1  D0 FB            bne @loop
000018r 1  E6 01            inc $1
00001Ar 1  CA               dex
00001Br 1  D0 F6            bne @loop
00001Dr 1               
00001Dr 1  4C rr rr         jmp ram_zeroed
000020r 1               
000020r 1               v_reset:
000020r 1  4C rr rr         jmp zero_ram
000023r 1               ram_zeroed:
000023r 1  20 rr rr         JSR     copydata
000026r 1  20 rr rr         jsr zerobss
000029r 1               
000029r 1  4C rr rr         jmp kernel_init
00002Cr 1               
00002Cr 1               
00002Cr 1               
00002Cr 1               .segment "DATA"
000000r 1               
000000r 1               .include "drivers/delayroutines.s"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               ; this routine delays by 2304 * y + 23 cycles
000000r 2               delay:
000000r 2  DA             phx       ; 3 cycles
000001r 2  5A             phy       ; 3 cycles
000002r 2               two:
000002r 2  A2 FF          ldx #$ff  ; 2 cycles
000004r 2               one:
000004r 2  EA             nop       ; 2 cycles
000005r 2  EA             nop       ; 2 cycles
000006r 2  CA             dex       ; 2 cycles
000007r 2  D0 FB          bne one   ; 3 for all cycles, 2 for last
000009r 2  88             dey       ; 2 cycles
00000Ar 2  D0 F6          bne two   ; 3 for all cycles, 2 for last
00000Cr 2  7A             ply       ; 4 cycles
00000Dr 2  FA             plx       ; 4 cycles
00000Er 2  60             rts       ; 6 cycles
00000Fr 2               
00000Fr 2               ; delay is in Y register
00000Fr 2               delay_long:
00000Fr 2  48             pha
000010r 2  5A             phy
000011r 2  DA             phx
000012r 2  98             tya
000013r 2  AA             tax
000014r 2               delay_long_loop:
000014r 2  A0 FF          ldy #$ff
000016r 2  20 rr rr       jsr delay
000019r 2  CA             dex
00001Ar 2  D0 F8          bne delay_long_loop
00001Cr 2  FA             plx
00001Dr 2  7A             ply
00001Er 2  68             pla
00001Fr 2  60             rts
000020r 2               
000020r 2               delay_short:        ; delay Y * 19 cycles
000020r 2  5A             phy
000021r 2               delay_short_loop:
000021r 2  EA             nop               ; 2 cycles
000022r 2  EA             nop               ; 2 cycles
000023r 2  EA             nop               ; 2 cycles
000024r 2  EA             nop               ; 2 cycles
000025r 2  EA             nop               ; 2 cycles
000026r 2  EA             nop               ; 2 cycles
000027r 2  EA             nop               ; 2 cycles
000028r 2               
000028r 2               
000028r 2  88             dey               ; 2 cycles
000029r 2  D0 F6          bne delay_short_loop   ; 2 or 3 cycles
00002Br 2  7A             ply
00002Cr 2  60             rts
00002Dr 2               
00002Dr 1               
00002Dr 1               .ifdef VIA1_BASE
00002Dr 1               .include "drivers/timer.s"
00002Dr 2               
00002Dr 2               
00002Dr 2               COUNTER = CLOCK_SPEED/400        ; n/s
00002Dr 2               
00002Dr 2               timer_init:
00002Dr 2  AD 8E FF         lda IER
000030r 2  09 C0            ora #$C0        ;enable interrupt on timer1 timeout
000032r 2  8D 8E FF         sta IER
000035r 2  A9 40            lda #$40        ; timer one free run mode
000037r 2  8D 8B FF         sta ACR
00003Ar 2  A9 60            lda #<COUNTER     ; set timer to low byte to calculated value from defined clock speed
00003Cr 2  8D 84 FF         sta T1CL
00003Fr 2  A9 EA            lda #>COUNTER       ; set timer to high byte to calculated value from defined clock speed
000041r 2               
000041r 2  8D 85 FF         sta T1CH
000044r 2  64 rr            stz time
000046r 2  64 rr            stz time+1
000048r 2  64 rr            stz time+2
00004Ar 2  64 rr            stz time+3
00004Cr 2  58               cli
00004Dr 2  60               rts
00004Er 2               
00004Er 2               
00004Er 2               timer_irq:
00004Er 2  E6 rr            inc time
000050r 2  F0 01            beq @inc1
000052r 2               @exit1:
000052r 2                   ; this resets the PS/2 temp variables
000052r 2                   ;jsr reset_ps2
000052r 2  60               rts
000053r 2               @inc1:
000053r 2  E6 rr            inc time+1
000055r 2  F0 02            beq @inc2
000057r 2  80 F9            bra @exit1
000059r 2               @inc2:
000059r 2  E6 rr            inc time+2
00005Br 2  F0 02            beq @inc3
00005Dr 2  80 F3            bra @exit1
00005Fr 2               @inc3:
00005Fr 2  E6 rr            inc time+3
000061r 2  80 EF            bra @exit1
000063r 2  60               rts
000064r 2               
000064r 1               .include "drivers/spi.s"
000064r 2               ; SPI defines
000064r 2               .ifndef DATA
000064r 2               DATA = $80
000064r 2               .endif
000064r 2               SS = $07   ; Slave Select with lowest 3 bits
000064r 2               SCK = $08   ; Clock on bit 3
000064r 2               MISO = $10  ; MISO on bit 4
000064r 2               MOSI = $20  ; MOSI on bit 5
000064r 2               CONF = $40  ; CONF on bit 6
000064r 2               
000064r 2               .segment "BSS"
000004r 2  xx           spi_tmp: .res 1
000005r 2  xx           spi_tmp2: .res 1
000006r 2  xx           spi_slave: .res 1
000007r 2               
000007r 2               .segment "DATA"
000064r 2               
000064r 2               spi_init:
000064r 2  AD 80 FF         lda PORTB               ; load current port B
000067r 2  29 90            and #(DATA | MISO)      ; set everything to zero except for PS2 DATA and MISO
000069r 2  09 40            ora #CONF               ; set CONF high
00006Br 2  8D 80 FF         sta PORTB               ; save to PORTB
00006Er 2  AD 82 FF         lda DDRB                ; get current direction register
000071r 2  09 6F            ora #(MOSI | CONF | SCK | SS) ; set MOSI, CONF, SCK and SS as outputs
000073r 2  29 EF            and #($FF^MISO)                 ; set MISO as input
000075r 2  8D 82 FF         sta DDRB
000078r 2  A9 FF            lda #$FF                ; flash leds to see what is going on
00007Ar 2  8D 83 FF         sta DDRA
00007Dr 2                   ;sta PORTA
00007Dr 2  60               rts
00007Er 2               
00007Er 2               spi_select:
00007Er 2                   ; selected slave in A
00007Er 2  29 07            and #SS                 ; mask slave select bits
000080r 2  8D 80 FF         sta PORTB               ; set everything low except for SS bits
000083r 2  8D rr rr         sta spi_slave
000086r 2  5A               phy
000087r 2  A0 01            ldy #$1
000089r 2  20 rr rr         jsr delay_short         ; slight delay
00008Cr 2  09 40            ora #CONF               ; set CONF high to latch address
00008Er 2  8D 80 FF         sta PORTB               ; save to PORTB
000091r 2  7A               ply                     ; CONF MUST stay high for the duration of the transfer
000092r 2  60               rts
000093r 2               
000093r 2               spi_clk_toggle:
000093r 2  60               rts
000094r 2               
000094r 2               spi_transceive:
000094r 2                   ; send data in A, received data will be in A
000094r 2  5A               phy
000095r 2                   ; save data in RAM
000095r 2  8D rr rr         sta spi_tmp
000098r 2                   ; reset X
000098r 2  DA               phx
000099r 2  A2 08            ldx #8
00009Br 2                   ; reset result
00009Br 2  9C rr rr         stz spi_tmp2
00009Er 2               spi_send_loop:
00009Er 2  0E rr rr         asl spi_tmp
0000A1r 2  90 08            bcc bit_unset
0000A3r 2               bit_set:
0000A3r 2  AD 80 FF         lda PORTB
0000A6r 2  09 60            ora #(MOSI | CONF)
0000A8r 2  4C rr rr         jmp clock_on
0000ABr 2               bit_unset:
0000ABr 2  AD 80 FF         lda PORTB
0000AEr 2  29 DF            and #(($FF^MOSI) | CONF)
0000B0r 2               clock_on:
0000B0r 2                   ; set data bit
0000B0r 2  0D rr rr         ora spi_slave
0000B3r 2  8D 80 FF         sta PORTB
0000B6r 2               
0000B6r 2                   ; set clock on
0000B6r 2  09 48            ora #(SCK | CONF)
0000B8r 2  0D rr rr         ora spi_slave
0000BBr 2  8D 80 FF         sta PORTB
0000BEr 2               
0000BEr 2                   ; read bit from slave, maybe add slight delay here ?
0000BEr 2  AD 80 FF         lda PORTB
0000C1r 2  29 10            and #MISO           ; mask miso bit
0000C3r 2  D0 07            bne spi_bit_set      ; bit is set
0000C5r 2                   ; bit is unset
0000C5r 2  18               clc
0000C6r 2  2E rr rr         rol spi_tmp2
0000C9r 2  4C rr rr         jmp clock_off
0000CCr 2               
0000CCr 2               spi_bit_set:
0000CCr 2  38               sec
0000CDr 2  2E rr rr         rol spi_tmp2
0000D0r 2               
0000D0r 2               
0000D0r 2               clock_off:
0000D0r 2  AD 80 FF         lda PORTB
0000D3r 2  29 F7            and #(($FF^SCK) | CONF)
0000D5r 2  0D rr rr         ora spi_slave
0000D8r 2  8D 80 FF         sta PORTB
0000DBr 2               end_loop:
0000DBr 2  CA               dex
0000DCr 2  D0 C0            bne spi_send_loop
0000DEr 2                   ; set data low
0000DEr 2  A0 01            ldy #$1
0000E0r 2  20 rr rr         jsr delay_short
0000E3r 2  AD 80 FF         lda PORTB
0000E6r 2  0D rr rr         ora spi_slave
0000E9r 2  29 DF            and #(($FF^MOSI) | CONF)
0000EBr 2  8D 80 FF         sta PORTB
0000EEr 2  FA               plx
0000EFr 2  7A               ply
0000F0r 2  AD rr rr         lda spi_tmp2
0000F3r 2  60               rts
0000F4r 2               
0000F4r 1               .endif
0000F4r 1               
0000F4r 1               .ifdef ACIA_BASE
0000F4r 1               .include "drivers/acia.s"
0000F4r 2               ACIA_DELAY = CLOCK_SPEED / 500000
0000F4r 2               .segment "BSS"
000007r 2               
000007r 2  xx           has_acia: .res 1
000008r 2               
000008r 2               .segment "DATA"
0000F4r 2               acia_init:
0000F4r 2  8D E1 FF         sta ACIA_STATUS        ; soft reset (value not important)
0000F7r 2                                           ; set specific modes and functions
0000F7r 2  9C rr rr         stz has_acia
0000FAr 2  A9 0B            lda #$0B                ; no parity, no echo, no Tx interrupt, NO Rx interrupt, enable Tx/Rx
0000FCr 2                   ;lda #$09               ; no parity, no echo, no Tx interrupt, Rx interrupt, enable Tx/Rx
0000FCr 2  8D E2 FF         sta ACIA_CMD        ; store to the command register
0000FFr 2  AD E2 FF         lda ACIA_CMD        ; load command register again
000102r 2  C9 0B            cmp #$0B                ; if not the same
000104r 2  D0 11            bne acia_absent         ; then it means the ACIA is not connected
000106r 2  AD E1 FF         lda ACIA_STATUS         ; Read the ACAI status to
000109r 2  29 60            and #$60                ; check if present or absent
00010Br 2  D0 0A            bne acia_absent
00010Dr 2  A9 01            lda #1
00010Fr 2  8D rr rr         sta has_acia           ; remember that ACIA is here
000112r 2  A9 10            lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 115.200k baud rate
000114r 2                   ;lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 1200 baud rate
000114r 2  8D E3 FF         sta ACIA_CTRL          ; program the ctl register
000117r 2               
000117r 2               acia_absent:
000117r 2  A0 14                ldy #20
000119r 2               aa_loop:
000119r 2  20 rr rr             jsr delay_short
00011Cr 2  AD E1 FF             lda ACIA_STATUS         ; Read ACIA data a few times
00011Fr 2  AD E0 FF             lda ACIA_DATA           ; to try and prevent spurious characters
000122r 2  88                   dey
000123r 2  D0 F4                bne aa_loop
000125r 2               aa_end:
000125r 2  60                   rts
000126r 2               
000126r 2               acia_out:
000126r 2  48               pha
000127r 2  5A               phy
000128r 2  8D E0 FF         sta ACIA_DATA
00012Br 2               .ifndef LCD_BUF                ; if the LCD is in the build, we do not need to delay
00012Br 2  A0 30            ldy #ACIA_DELAY            ;minimal delay is $02
00012Dr 2  20 rr rr         jsr delay_short
000130r 2               .endif
000130r 2  7A               ply
000131r 2  68               pla
000132r 2  60               rts
000133r 2               
000133r 2               acia_getc:
000133r 2  AD E1 FF         lda ACIA_STATUS                 ; Read the ACIA status to
000136r 2  29 08            and #$08                        ; Check if there is character in the receiver
000138r 2  F0 05            beq @no_char      ; Exit now if we don't get one.
00013Ar 2  AD E0 FF         lda ACIA_DATA
00013Dr 2  38               sec
00013Er 2  60               rts
00013Fr 2               @no_char:
00013Fr 2  18               clc
000140r 2  60               rts
000141r 2               
000141r 1               .endif
000141r 1               
000141r 1               .ifdef LCD_BASE
000141r 1               .include "drivers/lcd.s"
000141r 2               .segment "ZEROPAGE": zeropage
00000Ar 2  xx           LCD_BUF_W_PTR: .res 1
00000Br 2  xx           LCD_BUF_R_PTR: .res 1
00000Cr 2  xx           lcd_pos: .res 1
00000Dr 2               
00000Dr 2               .segment "BSS"
000008r 2  xx xx xx xx  LCD_BUF: .res 128
00000Cr 2  xx xx xx xx  
000010r 2  xx xx xx xx  
000088r 2  xx           has_lcd: .res 1
000089r 2               
000089r 2               .segment "CODE"
000000r 2               
000000r 2               ; initialize the LCD in 8 bit mode
000000r 2               lcd_init:
000000r 2  9C rr rr         stz has_lcd
000003r 2  20 rr rr         jsr buf_clr
000006r 2  AD C0 FF         lda LCD_ADDR_DISABLED
000009r 2  6A               ror
00000Ar 2  B0 33            bcs lcd_init_exit
00000Cr 2                   ; sta has_lcd
00000Cr 2                   ; sta PORTA
00000Cr 2               @lcd_ok:
00000Cr 2                   ;sta has_lcd
00000Cr 2                   ; sta PORTA
00000Cr 2  64 rr            stz LCD_BUF_W_PTR
00000Er 2  64 rr            stz LCD_BUF_R_PTR
000010r 2  64 rr            stz lcd_pos
000012r 2               
000012r 2  A0 FF            ldy #$FF
000014r 2  20 rr rr         jsr delay
000017r 2               
000017r 2  A9 38            LDA #$38            ;function set: 8 bit
000019r 2  20 rr rr         jsr lcd_inst
00001Cr 2               
00001Cr 2  A0 FF            ldy #$FF
00001Er 2  20 rr rr         jsr delay
000021r 2               
000021r 2  A9 0F            LDA #$0F            ;display on, cursor on, blink on
000023r 2  20 rr rr         jsr lcd_inst
000026r 2               
000026r 2                   ;entry mode set
000026r 2  A9 06            LDA #$06
000028r 2  20 rr rr         jsr lcd_inst
00002Br 2               
00002Br 2                   ;clear display
00002Br 2  A9 01            LDA #$01
00002Dr 2  20 rr rr         jsr lcd_inst
000030r 2               
000030r 2  A0 FF            ldy #$ff            ; wait a while
000032r 2  20 rr rr         jsr delay
000035r 2                   ;set dram address to start of screen
000035r 2  A9 80            LDA #$80
000037r 2  20 rr rr         jsr lcd_inst
00003Ar 2               
00003Ar 2  A0 FF            ldy #$ff            ; wait a while
00003Cr 2  20 rr rr         jsr delay
00003Fr 2               lcd_init_exit:
00003Fr 2  60               RTS
000040r 2               
000040r 2               ; Send an instruction in 8 bit mode
000040r 2               lcd_inst:
000040r 2  5A               phy
000041r 2  8D C1 FF         sta LCD_ADDR_ENABLED
000044r 2  A0 02            ldy #$2                    ; Delay 38 clock cycles - 3 us at 12.5 MHz
000046r 2  20 rr rr         jsr delay_short
000049r 2  8D C0 FF         sta LCD_ADDR_DISABLED
00004Cr 2  A0 08            ldy #$08                     ; Delay 608 clock cycles - 48 us at 12.5 MHz
00004Er 2  20 rr rr         jsr delay_short
000051r 2  7A               ply
000052r 2  60               rts
000053r 2               
000053r 2               lcd_send:
000053r 2  8D C3 FF         sta LCD_DATA_ENABLED
000056r 2  A0 02            ldy #$2                    ; Delay 38 clock cycles - 3 us at 12.5 MHz
000058r 2  20 rr rr         jsr delay_short
00005Br 2               
00005Br 2  8D C2 FF         sta LCD_DATA_DISABLED
00005Er 2  A0 08            ldy #$08                     ; Delay 608 clock cycles - 48 us at 12.5 MHz
000060r 2  20 rr rr         jsr delay_short
000063r 2  60               rts
000064r 2               
000064r 2               ; Sends the character in A to the display
000064r 2               lcd_print:               ; 8 bit data in A
000064r 2  5A               phy
000065r 2  DA               phx
000066r 2  48               pha
000067r 2  AE rr rr         ldx has_lcd
00006Ar 2  F0 27            beq @continue
00006Cr 2  C9 0A            cmp #$0A
00006Er 2  F0 67            beq @next_line
000070r 2  C9 0D            cmp #$0D
000072r 2  F0 63            beq @next_line
000074r 2  C9 08            cmp #$08            ;backspace
000076r 2  F0 1F            beq @backspace
000078r 2               
000078r 2  20 rr rr         jsr lcd_send
00007Br 2  A6 rr            ldx lcd_pos
00007Dr 2  9D rr rr         sta LCD_BUF, x
000080r 2               
000080r 2  E8               inx
000081r 2                   ; Check at which position we are and change line if necessary
000081r 2  86 rr            stx lcd_pos
000083r 2               
000083r 2  E0 14            cpx #20
000085r 2  F0 2A            beq @line_2
000087r 2  E0 28            cpx #40
000089r 2  F0 31            beq @line_3
00008Br 2  E0 3C            cpx #60
00008Dr 2  F0 38            beq @line_4
00008Fr 2  E0 50            cpx #80
000091r 2  F0 3F            beq @clr
000093r 2               
000093r 2               @continue:
000093r 2  68               pla
000094r 2  FA               plx
000095r 2  7A               ply
000096r 2  60               rts
000097r 2               
000097r 2               ; LCD adressing http://web.alfredstate.edu/faculty/weimandn/lcd/lcd_addressing/lcd_addressing_index.html
000097r 2               @backspace:
000097r 2  A9 10            lda #$10            ; shift cursor left
000099r 2  20 rr rr         jsr lcd_inst
00009Cr 2  A9 20            lda #$20            ; print a space to erase previous char
00009Er 2  20 rr rr         jsr lcd_send
0000A1r 2               
0000A1r 2  A9 10            lda #$10            ; shift cursor left
0000A3r 2  20 rr rr         jsr lcd_inst
0000A6r 2  C6 rr            dec lcd_pos
0000A8r 2  A6 rr            ldx lcd_pos         ; save in buffer
0000AAr 2  A9 20            lda #$20
0000ACr 2  9D rr rr         sta LCD_BUF,x
0000AFr 2  80 E2            bra @continue
0000B1r 2               @line_2:
0000B1r 2  A9 14            lda #20
0000B3r 2  85 rr            sta lcd_pos
0000B5r 2  A9 C0            lda #$C0
0000B7r 2  20 rr rr         jsr lcd_inst
0000BAr 2  80 D7            bra @continue
0000BCr 2               
0000BCr 2               @line_3:
0000BCr 2  A9 28            lda #40
0000BEr 2  85 rr            sta lcd_pos
0000C0r 2  A9 94            lda #$94
0000C2r 2  20 rr rr         jsr lcd_inst
0000C5r 2  80 CC            bra @continue
0000C7r 2               
0000C7r 2               @line_4:
0000C7r 2  A9 3C            lda #60
0000C9r 2  85 rr            sta lcd_pos
0000CBr 2  A9 D4            lda #$D4
0000CDr 2  20 rr rr         jsr lcd_inst
0000D0r 2  80 C1            bra @continue
0000D2r 2               @clr:
0000D2r 2                   ; lda #0
0000D2r 2                   ; sta lcd_pos
0000D2r 2                   ; lda #$80
0000D2r 2                   ; jsr lcd_inst
0000D2r 2  20 rr rr         jsr lcd_scroll_up
0000D5r 2  80 BC            bra @continue
0000D7r 2               
0000D7r 2               @next_line:
0000D7r 2  A6 rr            ldx lcd_pos            ;get current position
0000D9r 2  E0 50            cpx #80
0000DBr 2  F0 F5            beq @clr
0000DDr 2  E0 3C            cpx #60
0000DFr 2  F0 E6            beq @line_4
0000E1r 2  E0 28            cpx #40
0000E3r 2  F0 D7            beq @line_3
0000E5r 2  E0 14            cpx #20
0000E7r 2  F0 C8            beq @line_2
0000E9r 2  E8               inx
0000EAr 2  86 rr            stx lcd_pos
0000ECr 2  A9 20            lda #$20
0000EEr 2  20 rr rr         jsr lcd_send
0000F1r 2  9D rr rr         sta LCD_BUF, x
0000F4r 2  80 E1            bra @next_line
0000F6r 2               
0000F6r 2               lcd_scroll_up:
0000F6r 2  48               pha                     ; save registers
0000F7r 2  5A               phy
0000F8r 2  DA               phx
0000F9r 2  A9 80            lda #$80                ; set LCD address to start
0000FBr 2  20 rr rr         jsr lcd_inst
0000FEr 2               
0000FEr 2  A2 14            ldx #20                 ; start getting characters at the start of the second line
000100r 2               @scroll_loop:
000100r 2  BD rr rr         lda LCD_BUF, X          ; load from buffer
000103r 2  20 rr rr         jsr lcd_send            ; send to display
000106r 2  A8               tay                     ; save current character in Y
000107r 2  E0 4F            cpx #79                 ; update LCD address if necessary
000109r 2  F0 4A            beq @scline_4
00010Br 2  E0 3B            cpx #59
00010Dr 2  F0 3F            beq @scline_3
00010Fr 2  E0 27            cpx #39
000111r 2  F0 34            beq @scline_2
000113r 2               @sccontinue:                ; return from updating LCD address
000113r 2  8A               txa                     ; copy X to A to be able to subtract from it
000114r 2  38               sec                     ; set carry before subtraction
000115r 2  E9 14            sbc #20                 ; subtract 20 to get where to put this character
000117r 2  AA               tax                     ; put the result in X
000118r 2  98               tya                     ; restore character from Y
000119r 2  9D rr rr         sta LCD_BUF, X          ; store char in buffer
00011Cr 2  8A               txa                     ; copy X to A to be able to add to it
00011Dr 2  18               clc
00011Er 2  69 14            adc #20                 ; add 20 to restore X
000120r 2  AA               tax                     ; put the result back in X
000121r 2  E8               inx                     ; increment X to prepare to get next char
000122r 2  E0 50            cpx #80                 ; if not at end of buffer
000124r 2  90 DA            bcc @scroll_loop        ; do next char
000126r 2                   ; fill the last line with spaces
000126r 2  A9 D4            lda #$D4                ; set address to last line
000128r 2  20 rr rr         jsr lcd_inst
00012Br 2  A9 20            lda #$20
00012Dr 2  A2 3C            ldx #60
00012Fr 2               @last_line_loop:
00012Fr 2  9D rr rr         sta LCD_BUF, x
000132r 2  20 rr rr         jsr lcd_send
000135r 2  E8               inx
000136r 2  E0 50            cpx #80                 ; if not at end of buffer
000138r 2  90 F5            bcc @last_line_loop     ; do next char
00013Ar 2               
00013Ar 2                   ;finally, place the cursor at the start of the last line
00013Ar 2  A9 3C            lda #60
00013Cr 2  85 rr            sta lcd_pos
00013Er 2  A9 D4            lda #$D4
000140r 2  20 rr rr         jsr lcd_inst
000143r 2  FA               plx                     ; restore everything as it was
000144r 2  7A               ply
000145r 2  68               pla
000146r 2  60               rts
000147r 2               
000147r 2               @scline_2:
000147r 2  A9 C0            lda #$C0
000149r 2  20 rr rr         jsr lcd_inst
00014Cr 2  80 C5            bra @sccontinue
00014Er 2               
00014Er 2               @scline_3:
00014Er 2  A9 94            lda #$94
000150r 2  20 rr rr         jsr lcd_inst
000153r 2  80 BE            bra @sccontinue
000155r 2               
000155r 2               @scline_4:
000155r 2  A9 D4            lda #$D4
000157r 2  20 rr rr         jsr lcd_inst
00015Ar 2  80 B7            bra @sccontinue
00015Cr 2               
00015Cr 2               lcd_clear:
00015Cr 2  48               PHA
00015Dr 2                   ;clear display
00015Dr 2  A9 01            LDA #$01
00015Fr 2  20 rr rr         jsr lcd_inst
000162r 2                   ;set dram address
000162r 2  A9 80            LDA #$80
000164r 2  20 rr rr         jsr lcd_inst
000167r 2  68               PLA
000168r 2  60               RTS
000169r 2               
000169r 2               
000169r 2               buf_clr:
000169r 2  48               pha
00016Ar 2  DA               phx
00016Br 2  A2 80            ldx #$80
00016Dr 2  A9 20            lda #$20
00016Fr 2               buf_clr_loop:
00016Fr 2  9D rr rr         sta LCD_BUF,X
000172r 2  CA               dex
000173r 2  D0 FA            bne buf_clr_loop
000175r 2  FA               plx
000176r 2  68               pla
000177r 2  60               rts
000178r 2               
000178r 1               .endif
000178r 1               .ifdef KB_VIA_BASE
000178r 1               .include "drivers/keyboard.s"
000178r 1               .endif
000178r 1               .ifdef KB_INIT_STATE_RESET
000178r 1               .include "drivers/ps2.s"
000178r 2               ; Copyright 2020 Jonathan Foucher
000178r 2               
000178r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000178r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000178r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000178r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000178r 2               ; is furnished to do so, subject to the following conditions:
000178r 2               
000178r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000178r 2               ; substantial portions of the Software.
000178r 2               
000178r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000178r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000178r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000178r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000178r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000178r 2               ; DEALINGS IN THE SOFTWARE.
000178r 2               
000178r 2               .segment "ZEROPAGE": zeropage
00000Dr 2               
00000Dr 2  xx xx xx xx  last_ps2_time: .res 4
000011r 2  xx           KB_BUF_W_PTR: .res 1
000012r 2  xx           KB_BUF_R_PTR: .res 1
000013r 2  xx           control_keys: .res 1
000014r 2  xx           character: .res 1
000015r 2               
000015r 2               .segment "BSS"
000089r 2  xx xx xx xx  .align 16
00008Dr 2  xx xx xx     
000090r 2  xx xx xx xx  KB_BUF: .res 128
000094r 2  xx xx xx xx  
000098r 2  xx xx xx xx  
000110r 2  xx           KB_STATE: .res 1
000111r 2  xx           KB_TEMP: .res 1
000112r 2  xx           KB_PARITY: .res 1
000113r 2  xx           KB_BIT: .res 1
000114r 2  xx           KB_INIT_STATE: .res 1
000115r 2  xx           KB_INIT_WAIT: .res 1
000116r 2  xx           ready: .res 1
000117r 2  xx           to_send: .res 1
000118r 2  xx           ignore_next: .res 1
000119r 2               
000119r 2               .segment "RODATA"
000000r 2               
000000r 2               .include "drivers/keycodes.s"
000000r 3               
000000r 3               
000000r 3               ASCIITBL:
000000r 3  00               .byte $00               ; 00 no key pressed
000001r 3  89               .byte $89               ; 01 F9
000002r 3  87               .byte $87               ; 02 relocated F7
000003r 3  85               .byte $85               ; 03 F5
000004r 3  83               .byte $83               ; 04 F3
000005r 3  81               .byte $81               ; 05 F1
000006r 3  82               .byte $82               ; 06 F2
000007r 3  8C               .byte $8C               ; 07 F12
000008r 3  00               .byte $00               ; 08
000009r 3  8A               .byte $8A               ; 09 F10
00000Ar 3  88               .byte $88               ; 0A F8
00000Br 3  86               .byte $86               ; 0B F6
00000Cr 3  84               .byte $84               ; 0C F4
00000Dr 3  09               .byte $09               ; 0D tab
00000Er 3  60               .byte $60               ; 0E `~
00000Fr 3  8F               .byte $8F               ; 0F relocated Print Screen key
000010r 3  03               .byte $03               ; 10 relocated Pause/Break key
000011r 3  A0               .byte $A0               ; 11 left alt (right alt too)
000012r 3  00               .byte $00               ; 12 left shift
000013r 3  E0               .byte $E0               ; 13 relocated Alt release code
000014r 3  00               .byte $00               ; 14 left ctrl (right ctrl too)
000015r 3  71               .byte $71               ; 15 qQ
000016r 3  31               .byte $31               ; 16 1!
000017r 3  00               .byte $00               ; 17
000018r 3  00               .byte $00               ; 18
000019r 3  00               .byte $00               ; 19
00001Ar 3  7A               .byte $7A               ; 1A zZ
00001Br 3  73               .byte $73               ; 1B sS
00001Cr 3  61               .byte $61               ; 1C aA
00001Dr 3  77               .byte $77               ; 1D wW
00001Er 3  32               .byte $32               ; 1E 2@
00001Fr 3  A1               .byte $A1               ; 1F Windows 98 menu key (left side)
000020r 3  02               .byte $02               ; 20 relocated ctrl-break key
000021r 3  63               .byte $63               ; 21 cC
000022r 3  78               .byte $78               ; 22 xX
000023r 3  64               .byte $64               ; 23 dD
000024r 3  65               .byte $65               ; 24 eE
000025r 3  34               .byte $34               ; 25 4$
000026r 3  33               .byte $33               ; 26 3#
000027r 3  A2               .byte $A2               ; 27 Windows 98 menu key (right side)
000028r 3  00               .byte $00               ; 28
000029r 3  20               .byte $20               ; 29 space
00002Ar 3  76               .byte $76               ; 2A vV
00002Br 3  66               .byte $66               ; 2B fF
00002Cr 3  74               .byte $74               ; 2C tT
00002Dr 3  72               .byte $72               ; 2D rR
00002Er 3  35               .byte $35               ; 2E 5%
00002Fr 3  A3               .byte $A3               ; 2F Windows 98 option key (right click, right side)
000030r 3  00               .byte $00               ; 30
000031r 3  6E               .byte $6E               ; 31 nN
000032r 3  62               .byte $62               ; 32 bB
000033r 3  68               .byte $68               ; 33 hH
000034r 3  67               .byte $67               ; 34 gG
000035r 3  79               .byte $79               ; 35 yY
000036r 3  36               .byte $36               ; 36 6^
000037r 3  00               .byte $00               ; 37
000038r 3  00               .byte $00               ; 38
000039r 3  00               .byte $00               ; 39
00003Ar 3  6D               .byte $6D               ; 3A mM
00003Br 3  6A               .byte $6A               ; 3B jJ
00003Cr 3  75               .byte $75               ; 3C uU
00003Dr 3  37               .byte $37               ; 3D 7&
00003Er 3  38               .byte $38               ; 3E 8*
00003Fr 3  00               .byte $00               ; 3F
000040r 3  00               .byte $00               ; 40
000041r 3  2C               .byte $2C               ; 41 ,<
000042r 3  6B               .byte $6B               ; 42 kK
000043r 3  69               .byte $69               ; 43 iI
000044r 3  6F               .byte $6F               ; 44 oO
000045r 3  30               .byte $30               ; 45 0)
000046r 3  39               .byte $39               ; 46 9(
000047r 3  00               .byte $00               ; 47
000048r 3  00               .byte $00               ; 48
000049r 3  2E               .byte $2E               ; 49 .>
00004Ar 3  2F               .byte $2F               ; 4A /?
00004Br 3  6C               .byte $6C               ; 4B lL
00004Cr 3  3B               .byte $3B               ; 4C ;:
00004Dr 3  70               .byte $70               ; 4D pP
00004Er 3  2D               .byte $2D               ; 4E -_
00004Fr 3  00               .byte $00               ; 4F
000050r 3  00               .byte $00               ; 50
000051r 3  00               .byte $00               ; 51
000052r 3  27               .byte $27               ; 52 '"
000053r 3  00               .byte $00               ; 53
000054r 3  5B               .byte $5B               ; 54 [{
000055r 3  3D               .byte $3D               ; 55 =+
000056r 3  00               .byte $00               ; 56
000057r 3  00               .byte $00               ; 57
000058r 3  00               .byte $00               ; 58 caps
000059r 3  00               .byte $00               ; 59 r shift
00005Ar 3  0D               .byte $0D               ; 5A <Enter>
00005Br 3  5D               .byte $5D               ; 5B ]}
00005Cr 3  00               .byte $00               ; 5C
00005Dr 3  5C               .byte $5C               ; 5D \|
00005Er 3  00               .byte $00               ; 5E
00005Fr 3  00               .byte $00               ; 5F
000060r 3  00               .byte $00               ; 60
000061r 3  00               .byte $00               ; 61
000062r 3  00               .byte $00               ; 62
000063r 3  00               .byte $00               ; 63
000064r 3  00               .byte $00               ; 64
000065r 3  00               .byte $00               ; 65
000066r 3  08               .byte $08               ; 66 bkspace
000067r 3  00               .byte $00               ; 67
000068r 3  00               .byte $00               ; 68
000069r 3  31               .byte $31               ; 69 kp 1
00006Ar 3  2F               .byte $2f               ; 6A kp / converted from E04A in code
00006Br 3  34               .byte $34               ; 6B kp 4
00006Cr 3  37               .byte $37               ; 6C kp 7
00006Dr 3  00               .byte $00               ; 6D
00006Er 3  00               .byte $00               ; 6E
00006Fr 3  00               .byte $00               ; 6F
000070r 3  30               .byte $30               ; 70 kp 0
000071r 3  2E               .byte $2E               ; 71 kp .
000072r 3  32               .byte $32               ; 72 kp 2
000073r 3  35               .byte $35               ; 73 kp 5
000074r 3  36               .byte $36               ; 74 kp 6
000075r 3  38               .byte $38               ; 75 kp 8
000076r 3  1B               .byte $1B               ; 76 esc
000077r 3  00               .byte $00               ; 77 num lock
000078r 3  8B               .byte $8B               ; 78 F11
000079r 3  2B               .byte $2B               ; 79 kp +
00007Ar 3  33               .byte $33               ; 7A kp 3
00007Br 3  2D               .byte $2D               ; 7B kp -
00007Cr 3  2A               .byte $2A               ; 7C kp *
00007Dr 3  39               .byte $39               ; 7D kp 9
00007Er 3  8D               .byte $8D               ; 7E scroll lock
00007Fr 3  00               .byte $00               ; 7F
000080r 3                   ;
000080r 3                   ; Table for shifted scancodes
000080r 3                   ;
000080r 3  00               .byte $00               ; 80
000081r 3  C9               .byte $C9               ; 81 F9
000082r 3  C7               .byte $C7               ; 82 relocated F7
000083r 3  C5               .byte $C5               ; 83 F5 (F7 actual scancode=83)
000084r 3  C3               .byte $C3               ; 84 F3
000085r 3  C1               .byte $C1               ; 85 F1
000086r 3  C2               .byte $C2               ; 86 F2
000087r 3  CC               .byte $CC               ; 87 F12
000088r 3  00               .byte $00               ; 88
000089r 3  CA               .byte $CA               ; 89 F10
00008Ar 3  C8               .byte $C8               ; 8A F8
00008Br 3  C6               .byte $C6               ; 8B F6
00008Cr 3  C4               .byte $C4               ; 8C F4
00008Dr 3  09               .byte $09               ; 8D tab
00008Er 3  7E               .byte $7E               ; 8E `~
00008Fr 3  CF               .byte $CF               ; 8F relocated Print Screen key
000090r 3  03               .byte $03               ; 90 relocated Pause/Break key
000091r 3  A0               .byte $A0               ; 91 left alt (right alt)
000092r 3  00               .byte $00               ; 92 left shift
000093r 3  E0               .byte $E0               ; 93 relocated Alt release code
000094r 3  00               .byte $00               ; 94 left ctrl (and right ctrl)
000095r 3  51               .byte $51               ; 95 qQ
000096r 3  21               .byte $21               ; 96 1!
000097r 3  00               .byte $00               ; 97
000098r 3  00               .byte $00               ; 98
000099r 3  00               .byte $00               ; 99
00009Ar 3  5A               .byte $5A               ; 9A zZ
00009Br 3  53               .byte $53               ; 9B sS
00009Cr 3  41               .byte $41               ; 9C aA
00009Dr 3  57               .byte $57               ; 9D wW
00009Er 3  40               .byte $40               ; 9E 2@
00009Fr 3  E1               .byte $E1               ; 9F Windows 98 menu key (left side)
0000A0r 3  02               .byte $02               ; A0 relocated ctrl-break key
0000A1r 3  43               .byte $43               ; A1 cC
0000A2r 3  58               .byte $58               ; A2 xX
0000A3r 3  44               .byte $44               ; A3 dD
0000A4r 3  45               .byte $45               ; A4 eE
0000A5r 3  24               .byte $24               ; A5 4$
0000A6r 3  23               .byte $23               ; A6 3#
0000A7r 3  E2               .byte $E2               ; A7 Windows 98 menu key (right side)
0000A8r 3  00               .byte $00               ; A8
0000A9r 3  20               .byte $20               ; A9 space
0000AAr 3  56               .byte $56               ; AA vV
0000ABr 3  46               .byte $46               ; AB fF
0000ACr 3  54               .byte $54               ; AC tT
0000ADr 3  52               .byte $52               ; AD rR
0000AEr 3  25               .byte $25               ; AE 5%
0000AFr 3  E3               .byte $E3               ; AF Windows 98 option key (right click, right side)
0000B0r 3  00               .byte $00               ; B0
0000B1r 3  4E               .byte $4E               ; B1 nN
0000B2r 3  42               .byte $42               ; B2 bB
0000B3r 3  48               .byte $48               ; B3 hH
0000B4r 3  47               .byte $47               ; B4 gG
0000B5r 3  59               .byte $59               ; B5 yY
0000B6r 3  5E               .byte $5E               ; B6 6^
0000B7r 3  00               .byte $00               ; B7
0000B8r 3  00               .byte $00               ; B8
0000B9r 3  00               .byte $00               ; B9
0000BAr 3  4D               .byte $4D               ; BA mM
0000BBr 3  4A               .byte $4A               ; BB jJ
0000BCr 3  55               .byte $55               ; BC uU
0000BDr 3  26               .byte $26               ; BD 7&
0000BEr 3  2A               .byte $2A               ; BE 8*
0000BFr 3  00               .byte $00               ; BF
0000C0r 3  00               .byte $00               ; C0
0000C1r 3  3C               .byte $3C               ; C1 ,<
0000C2r 3  4B               .byte $4B               ; C2 kK
0000C3r 3  49               .byte $49               ; C3 iI
0000C4r 3  4F               .byte $4F               ; C4 oO
0000C5r 3  29               .byte $29               ; C5 0)
0000C6r 3  28               .byte $28               ; C6 9(
0000C7r 3  00               .byte $00               ; C7
0000C8r 3  00               .byte $00               ; C8
0000C9r 3  3E               .byte $3E               ; C9 .>
0000CAr 3  3F               .byte $3F               ; CA /?
0000CBr 3  4C               .byte $4C               ; CB lL
0000CCr 3  3A               .byte $3A               ; CC ;:
0000CDr 3  50               .byte $50               ; CD pP
0000CEr 3  5F               .byte $5F               ; CE -_
0000CFr 3  00               .byte $00               ; CF
0000D0r 3  00               .byte $00               ; D0
0000D1r 3  00               .byte $00               ; D1
0000D2r 3  22               .byte $22               ; D2 '"
0000D3r 3  00               .byte $00               ; D3
0000D4r 3  7B               .byte $7B               ; D4 [{
0000D5r 3  2B               .byte $2B               ; D5 =+
0000D6r 3  00               .byte $00               ; D6
0000D7r 3  00               .byte $00               ; D7
0000D8r 3  00               .byte $00               ; D8 caps
0000D9r 3  00               .byte $00               ; D9 r shift
0000DAr 3  0D               .byte $0D               ; DA <Enter>
0000DBr 3  7D               .byte $7D               ; DB ]}
0000DCr 3  00               .byte $00               ; DC
0000DDr 3  7C               .byte $7C               ; DD \|
0000DEr 3  00               .byte $00               ; DE
0000DFr 3  00               .byte $00               ; DF
0000E0r 3  00               .byte $00               ; E0
0000E1r 3  00               .byte $00               ; E1
0000E2r 3  00               .byte $00               ; E2
0000E3r 3  00               .byte $00               ; E3
0000E4r 3  00               .byte $00               ; E4
0000E5r 3  00               .byte $00               ; E5
0000E6r 3  08               .byte $08               ; E6 bkspace
0000E7r 3  00               .byte $00               ; E7
0000E8r 3  00               .byte $00               ; E8
0000E9r 3  91               .byte $91               ; E9 kp 1
0000EAr 3  2F               .byte $2f               ; EA kp / converted from E04A in code
0000EBr 3  94               .byte $94               ; EB kp 4
0000ECr 3  97               .byte $97               ; EC kp 7
0000EDr 3  00               .byte $00               ; ED
0000EEr 3  00               .byte $00               ; EE
0000EFr 3  00               .byte $00               ; EF
0000F0r 3  90               .byte $90               ; F0 kp 0
0000F1r 3  7F               .byte $7F               ; F1 kp .
0000F2r 3  92               .byte $92               ; F2 kp 2
0000F3r 3  95               .byte $95               ; F3 kp 5
0000F4r 3  96               .byte $96               ; F4 kp 6
0000F5r 3  98               .byte $98               ; F5 kp 8
0000F6r 3  1B               .byte $1B               ; F6 esc
0000F7r 3  00               .byte $00               ; F7 num lock
0000F8r 3  CB               .byte $CB               ; F8 F11
0000F9r 3  2B               .byte $2B               ; F9 kp +
0000FAr 3  93               .byte $93               ; FA kp 3
0000FBr 3  2D               .byte $2D               ; FB kp -
0000FCr 3  2A               .byte $2A               ; FC kp *
0000FDr 3  99               .byte $99               ; FD kp 9
0000FEr 3  CD               .byte $CD               ; FE scroll lock
0000FFr 3               
0000FFr 3               
0000FFr 3               
0000FFr 3               
0000FFr 2               
0000FFr 2               .segment "DATA"
000141r 2               
000141r 2               ps2_init:
000141r 2  78             sei ; prevent interrupts while initializing
000142r 2               kb_conn_msg:
000142r 2  A2 00          ldx #0
000144r 2               kb_conn_loop:
000144r 2  BD rr rr       lda kb_conn_msg_text,x
000147r 2  F0 1A          beq kb_conn_msg_end
000149r 2  20 rr rr       jsr kernel_putc
00014Cr 2  E8             inx
00014Dr 2  80 F5          bra kb_conn_loop
00014Fr 2  44 65 74 65  kb_conn_msg_text: .byte "Detecting keyboard", $0D, $00
000153r 2  63 74 69 6E  
000157r 2  67 20 6B 65  
000163r 2               kb_conn_msg_end:
000163r 2               
000163r 2  AD 8E FF       lda IER
000166r 2  09 88          ora #$88      ;enable interrupt on neg transition on CB2
000168r 2  8D 8E FF       sta IER
00016Br 2               
00016Br 2  A9 00          lda #0
00016Dr 2  8D 8C FF       sta PCR
000170r 2  8D rr rr       sta KB_TEMP
000173r 2  8D rr rr       sta KB_BIT
000176r 2  8D rr rr       sta KB_STATE
000179r 2  8D rr rr       sta to_send
00017Cr 2  8D rr rr       sta KB_PARITY
00017Fr 2  85 rr          sta KB_BUF_W_PTR
000181r 2  85 rr          sta KB_BUF_R_PTR
000183r 2  8D rr rr       sta KB_INIT_STATE
000186r 2  8D rr rr       sta KB_INIT_WAIT
000189r 2  8D rr rr       sta ready
00018Cr 2  8D rr rr       sta ignore_next
00018Fr 2  85 rr          sta character
000191r 2  20 rr rr       jsr clear_buffer
000194r 2               
000194r 2                 ; jsr kb_reset
000194r 2                 ; jsr kb_leds
000194r 2                 ; jsr kb_leds_data
000194r 2                 ; maybe remove this to make PS2 work ?
000194r 2  4C rr rr       jmp done_init
000197r 2               
000197r 2  A9 00          lda #KB_INIT_STATE_RESET
000199r 2  8D rr rr       sta KB_INIT_STATE
00019Cr 2  58             cli           ;enable interrupts
00019Dr 2               
00019Dr 2               @wait1:
00019Dr 2  A0 0A          ldy #10
00019Fr 2  20 rr rr       jsr delay
0001A2r 2  EE rr rr       inc KB_INIT_WAIT
0001A5r 2  F0 1C          beq done_init     ; nothing to show yet
0001A7r 2  AD rr rr       lda to_send
0001AAr 2  D0 F1          bne @wait1       ; do nothing while sending
0001ACr 2               
0001ACr 2                 ;jsr lcd_print
0001ACr 2               
0001ACr 2  AE rr rr       ldx KB_INIT_STATE
0001AFr 2  E0 00          cpx #KB_INIT_STATE_RESET
0001B1r 2  F0 06          beq @do_reset
0001B3r 2  E0 01          cpx #KB_INIT_STATE_RESET_ACK
0001B5r 2  F0 0C          beq done_init
0001B7r 2                 ; beq @self_test_ok  ; Wait for 256 loops with nothing. if still nothing, reset keyboard
0001B7r 2               
0001B7r 2  80 0A          bra done_init
0001B9r 2                 ;sta PORTA
0001B9r 2                 ; wait for keyboard self test (#$AA)
0001B9r 2               
0001B9r 2               @do_reset:
0001B9r 2  20 rr rr       jsr kb_reset
0001BCr 2  A9 01          lda #KB_INIT_STATE_RESET_ACK  ; next state should be an acknowledgment
0001BEr 2  8D rr rr       sta KB_INIT_STATE
0001C1r 2  80 DA          bra @wait1
0001C3r 2               
0001C3r 2               
0001C3r 2               done_init:
0001C3r 2  A9 00          lda #0
0001C5r 2  8D 82 FF       sta DDRB
0001C8r 2  8D 8C FF       sta PCR
0001CBr 2  8D rr rr       sta ignore_next
0001CEr 2  8D rr rr       sta ready
0001D1r 2  85 rr          sta control_keys
0001D3r 2  8D rr rr       sta to_send
0001D6r 2  8D rr rr       sta ready
0001D9r 2  85 rr          sta character
0001DBr 2  8D rr rr       sta KB_TEMP
0001DEr 2  8D rr rr       sta KB_INIT_STATE
0001E1r 2  8D rr rr       sta KB_BIT
0001E4r 2  8D rr rr       sta KB_STATE
0001E7r 2  85 rr          sta KB_BUF_W_PTR
0001E9r 2  85 rr          sta KB_BUF_R_PTR
0001EBr 2  20 rr rr       jsr clear_buffer
0001EEr 2  58             cli ; enable interrupts again
0001EFr 2  60             rts
0001F0r 2               
0001F0r 2               
0001F0r 2               kb_reset:
0001F0r 2  A9 00          lda #0
0001F2r 2  8D rr rr       sta KB_INIT_WAIT
0001F5r 2  A9 F0          lda #$F0
0001F7r 2                 ;sta PORTA
0001F7r 2  78             sei                   ;disable interrupts
0001F8r 2  20 rr rr       jsr prepare_send
0001FBr 2  A9 FF          lda #$FF
0001FDr 2  8D rr rr       sta to_send
000200r 2  58             cli                   ; enable interrupts
000201r 2  60             rts
000202r 2               
000202r 2               no_kb_msg:
000202r 2  A2 00          ldx #0
000204r 2               no_kb_loop:
000204r 2  BD rr rr       lda no_kb_msg_text,x
000207r 2  F0 BA          beq done_init
000209r 2  20 rr rr       jsr kernel_putc
00020Cr 2  E8             inx
00020Dr 2  80 F5          bra no_kb_loop
00020Fr 2  4E 6F 20 6B  no_kb_msg_text: .byte "No keyboard connected", $0D, $00
000213r 2  65 79 62 6F  
000217r 2  61 72 64 20  
000226r 2               
000226r 2               
000226r 2               prepare_send:
000226r 2  48             pha
000227r 2  5A             phy
000228r 2                 ; ready to send, pull clock low for a while
000228r 2  A9 C0          lda #$C0
00022Ar 2  8D 8C FF       sta PCR       ;set CB2 low
00022Dr 2                 ;delay
00022Dr 2  A0 80          ldy #$80
00022Fr 2  20 rr rr       jsr delay
000232r 2                 ; delay end
000232r 2                 ; pull data low now
000232r 2  AD 80 FF       lda PORTB
000235r 2  29 7F          and #($FF^DATA)
000237r 2  8D 80 FF       sta PORTB
00023Ar 2  AD 82 FF       lda DDRB
00023Dr 2  09 80          ora #DATA   ;data as output to set it low
00023Fr 2  8D 82 FF       sta DDRB
000242r 2  A0 40          ldy #$40
000244r 2  20 rr rr       jsr delay
000247r 2  A9 01          lda #KB_STATE_DATA    ; no start bit when sending
000249r 2  8D rr rr       sta KB_STATE
00024Cr 2                 ; release clock
00024Cr 2  A9 00          lda #0
00024Er 2  8D rr rr       sta to_send
000251r 2  8D rr rr       sta KB_PARITY
000254r 2  8D 8C FF       sta PCR       ;set CB2 to negative edge input
000257r 2               
000257r 2  7A             ply
000258r 2  68             pla
000259r 2  60             rts
00025Ar 2               
00025Ar 2               
00025Ar 2               reset_ps2:          ; routine called during a timer interrupt to check
00025Ar 2  48             pha
00025Br 2                                   ; if the elasped time since the last ps2 interrupt allows us to reset it
00025Br 2  A5 rr          lda time+3
00025Dr 2  C5 rr          cmp last_ps2_time+3
00025Fr 2  90 16          bcc @reset
000261r 2  A5 rr          lda time+2
000263r 2  C5 rr          cmp last_ps2_time+2
000265r 2  90 10          bcc @reset
000267r 2  A5 rr          lda time+1
000269r 2  C5 rr          cmp last_ps2_time+1
00026Br 2  90 0A          bcc @reset
00026Dr 2  A5 rr          lda time
00026Fr 2  69 01          adc #$1
000271r 2  C5 rr          cmp last_ps2_time
000273r 2  90 02          bcc @reset
000275r 2               @exit2:
000275r 2  68             pla
000276r 2  60             rts
000277r 2               @reset:
000277r 2  A9 00          lda #0
000279r 2  8D rr rr       sta KB_TEMP
00027Cr 2  8D rr rr       sta KB_BIT
00027Fr 2  8D rr rr       sta KB_STATE
000282r 2  85 rr          sta KB_BUF_W_PTR
000284r 2  85 rr          sta KB_BUF_R_PTR
000286r 2  F0 ED          beq @exit2
000288r 2               
000288r 2               clear_buffer:
000288r 2  DA             phx
000289r 2  A2 84          ldx #$84
00028Br 2               @clear_loop:
00028Br 2  9E rr rr       stz KB_BUF, x
00028Er 2  CA             dex
00028Fr 2  D0 FA          bne @clear_loop
000291r 2  9C rr rr       stz KB_BUF
000294r 2  FA             plx
000295r 2  60             rts
000296r 2               
000296r 2               
000296r 2               ps2_get_char:
000296r 2  DA               phx                             ; save X
000297r 2  A6 rr            ldx KB_BUF_R_PTR                ; check the keyboard buffer
000299r 2  BD rr rr         lda KB_BUF, x
00029Cr 2                   ; jsr kernel_putc
00029Cr 2                   ; pha
00029Cr 2                   ; txa
00029Cr 2                   ; jsr kernel_putc
00029Cr 2                   ; pla
00029Cr 2  F0 0C            beq no_ps2_char_available       ; exit if nothing found
00029Er 2  9E rr rr         stz KB_BUF, x                   ; if there was a character, reset this buffer cell
0002A1r 2  E6 rr            inc KB_BUF_R_PTR                ; and increment the read pointer
0002A3r 2  10 02            bpl @nomore
0002A5r 2  64 rr            stz KB_BUF_R_PTR
0002A7r 2               @nomore:
0002A7r 2  FA               plx                             ; restore X
0002A8r 2  38               sec                             ; mark character present
0002A9r 2  60               rts                             ; return
0002AAr 2               no_ps2_char_available:                  ; no keyboard char
0002AAr 2  E6 rr            inc KB_BUF_R_PTR                ; increment read pointer for next time
0002ACr 2  10 02            bpl @nomore
0002AEr 2  64 rr            stz KB_BUF_R_PTR
0002B0r 2               @nomore:
0002B0r 2  FA               plx                             ; restore X
0002B1r 2  18               clc
0002B2r 2  60               rts
0002B3r 2                 .include "ps2_irq.s"
0002B3r 3               ; Copyright 2020 Jonathan Foucher
0002B3r 3               
0002B3r 3               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
0002B3r 3               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
0002B3r 3               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
0002B3r 3               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
0002B3r 3               ; is furnished to do so, subject to the following conditions:
0002B3r 3               
0002B3r 3               ; The above copyright notice and this permission notice shall be included in all copies or
0002B3r 3               ; substantial portions of the Software.
0002B3r 3               
0002B3r 3               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
0002B3r 3               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
0002B3r 3               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
0002B3r 3               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
0002B3r 3               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
0002B3r 3               ; DEALINGS IN THE SOFTWARE.
0002B3r 3               
0002B3r 3               
0002B3r 3               
0002B3r 3               
0002B3r 3               ps2_irq:
0002B3r 3  48               pha
0002B4r 3  DA               phx
0002B5r 3  AD rr rr         lda to_send
0002B8r 3  D0 25            bne @willsend
0002BAr 3  AD rr rr         lda KB_STATE            ; which state ?
0002BDr 3  C9 00            cmp #KB_STATE_START
0002BFr 3  F0 0F            beq @start        ; start bit
0002C1r 3               
0002C1r 3  C9 01            cmp #KB_STATE_DATA             ; get data bits
0002C3r 3  F0 1D            beq @data
0002C5r 3               
0002C5r 3  C9 02            cmp #KB_STATE_PARITY             ; this is the parity bit
0002C7r 3  F0 3A            beq @parity
0002C9r 3               
0002C9r 3  C9 03            cmp #KB_STATE_STOP      ; stop bit
0002CBr 3  F0 3D            beq @stop
0002CDr 3  4C rr rr         jmp @exit
0002D0r 3               
0002D0r 3               @start:
0002D0r 3  A9 01            lda #KB_STATE_DATA
0002D2r 3  8D rr rr         sta KB_STATE        ; next state will be to get data
0002D5r 3  A9 00            lda #0
0002D7r 3  8D rr rr         sta KB_TEMP
0002DAr 3  8D rr rr         sta KB_BIT
0002DDr 3  80 65            bra @exit
0002DFr 3               @willsend:
0002DFr 3  4C rr rr         jmp @sending
0002E2r 3               @data:
0002E2r 3  AD 80 FF         lda PORTB       ; get the bit of data from PORTB bit 7
0002E5r 3  29 80            and #$80
0002E7r 3  0D rr rr         ora KB_TEMP     ; OR it with existing temp data
0002EAr 3  8D rr rr         sta KB_TEMP     ; save it
0002EDr 3  EE rr rr         inc KB_BIT      ; prepare for next bit
0002F0r 3  AD rr rr         lda KB_BIT
0002F3r 3  C9 08            cmp #8          ; if this is the last bit, next state is parity
0002F5r 3  F0 05            beq @next_state_parity
0002F7r 3  4E rr rr         lsr KB_TEMP     ; if not last bit, shift KB_TEMP right to prepare for next bit
0002FAr 3               
0002FAr 3  80 48            bra @exit
0002FCr 3               
0002FCr 3               @next_state_parity:
0002FCr 3  A9 02            lda #KB_STATE_PARITY    ;next state is parity
0002FEr 3  8D rr rr         sta KB_STATE
000301r 3  80 41            bra @exit
000303r 3               
000303r 3               @parity:
000303r 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
000305r 3  8D rr rr         sta KB_STATE
000308r 3  80 3A            bra @exit
00030Ar 3               
00030Ar 3               @stop:
00030Ar 3  A9 00            lda #KB_STATE_START
00030Cr 3  8D rr rr         sta KB_STATE
00030Fr 3  AD rr rr         lda ignore_next
000312r 3  D0 45            bne @ignored
000314r 3                   ; Save key to character buffer
000314r 3  AE rr rr         ldx KB_TEMP
000317r 3  E0 AA            cpx #$AA
000319r 3  F0 32            beq @init
00031Br 3  E0 FA            cpx #$FA
00031Dr 3  F0 2E            beq @init
00031Fr 3  E0 F0            cpx #$F0
000321r 3  F0 2F            beq @ignore_next
000323r 3  E0 12            cpx #LSHIFT_KEY
000325r 3  F0 4F            beq @shift_pressed
000327r 3  E0 59            cpx #RSHIFT_KEY
000329r 3  F0 4B            beq @shift_pressed
00032Br 3  A5 rr            lda control_keys
00032Dr 3  29 01            and #SHIFT
00032Fr 3  D0 09            bne @shifted
000331r 3               @unshifted:
000331r 3                   ;stx PORTA
000331r 3  BD rr rr         lda ASCIITBL, x
000334r 3               
000334r 3  C9 1B            cmp #$1B             ; reset if escape pressed
000336r 3  F0 12            beq @esc
000338r 3  80 03            bra @output
00033Ar 3               @shifted:
00033Ar 3  BD rr rr         lda ASCIITBL+128, x
00033Dr 3               @output:
00033Dr 3  A6 rr            ldx KB_BUF_W_PTR
00033Fr 3  9D rr rr         sta KB_BUF, x
000342r 3                   ;sta PORTA
000342r 3  E6 rr            inc KB_BUF_W_PTR
000344r 3               
000344r 3               @exit:
000344r 3  2C 80 FF         bit PORTB
000347r 3  FA               plx
000348r 3  68               pla
000349r 3  60               rts
00034Ar 3               @esc:
00034Ar 3  4C rr rr         jmp v_reset
00034Dr 3               @init:
00034Dr 3  8E rr rr         stx ready
000350r 3  80 F2            bra @exit
000352r 3               
000352r 3               @ignore_next:
000352r 3  A9 01            lda #1
000354r 3  8D rr rr         sta ignore_next
000357r 3  80 EB            bra @exit
000359r 3               
000359r 3               @ignored:
000359r 3  AE rr rr         ldx KB_TEMP
00035Cr 3  E0 12            cpx #LSHIFT_KEY
00035Er 3  F0 0B            beq @shift_released
000360r 3  E0 59            cpx #RSHIFT_KEY
000362r 3  F0 07            beq @shift_released
000364r 3  A9 00            lda #0
000366r 3  8D rr rr         sta ignore_next
000369r 3  80 D9            bra @exit
00036Br 3               
00036Br 3               @shift_released:
00036Br 3  A9 00            lda #0
00036Dr 3  8D rr rr         sta ignore_next
000370r 3  A9 00            lda #0
000372r 3  85 rr            sta control_keys
000374r 3  80 CE            bra @exit
000376r 3               
000376r 3               @shift_pressed:
000376r 3  A5 rr            lda control_keys
000378r 3  09 01            ora #SHIFT
00037Ar 3  85 rr            sta control_keys
00037Cr 3  80 C6            bra @exit
00037Er 3               
00037Er 3               @sending:
00037Er 3                   ; lda #1
00037Er 3                   ; sta PORTA
00037Er 3                   ; data pin of DDRB should be set as output by prepare_send
00037Er 3  AD rr rr         lda KB_STATE                ; which state ?
000381r 3  C9 01            cmp #KB_STATE_DATA          ; send data bits
000383r 3  F0 0A            beq @sending_data
000385r 3  C9 02            cmp #KB_STATE_PARITY        ; this is the parity bit
000387r 3  F0 33            beq @sending_parity
000389r 3  C9 03            cmp #KB_STATE_STOP          ; stop bit
00038Br 3  F0 56            beq @sending_stop
00038Dr 3  80 B5            bra @exit
00038Fr 3               
00038Fr 3               
00038Fr 3               @sending_data:
00038Fr 3                   ; lda #4
00038Fr 3                   ; sta PORTA
00038Fr 3  AD rr rr         lda to_send       ; get the bit of data from memory
000392r 3  29 01            and #$01          ; get only bottom bit
000394r 3  F0 0D            beq @send_zero
000396r 3               
000396r 3               @send_one:
000396r 3  AD 80 FF         lda PORTB
000399r 3  09 80            ora #$80
00039Br 3  8D 80 FF         sta PORTB
00039Er 3  EE rr rr         inc KB_PARITY
0003A1r 3  80 08            bra @sending_done
0003A3r 3               @send_zero:
0003A3r 3  AD 80 FF         lda PORTB
0003A6r 3  29 7F            and #$7F
0003A8r 3  8D 80 FF         sta PORTB
0003ABr 3               @sending_done:
0003ABr 3                   ; lda #2
0003ABr 3                   ; sta PORTA
0003ABr 3  EE rr rr         inc KB_BIT      ; prepare for next bit
0003AEr 3  AD rr rr         lda KB_BIT
0003B1r 3  C9 08            cmp #8          ; if this is the last bit, next state is parity
0003B3r 3  4C rr rr         jmp @next_state_parity
0003B6r 3  4E rr rr         lsr to_send
0003B9r 3  18               clc
0003BAr 3  80 88            bra @exit
0003BCr 3               
0003BCr 3               @sending_parity:
0003BCr 3                   ; lda #5
0003BCr 3                   ; sta PORTA
0003BCr 3  AD rr rr         lda KB_PARITY
0003BFr 3  29 01            and #$01
0003C1r 3  F0 10            beq @odd_parity     ; send zero if odd parity
0003C3r 3  AD 80 FF         lda PORTB
0003C6r 3  09 80            ora #$80            ; send one if even
0003C8r 3  8D 80 FF         sta PORTB
0003CBr 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
0003CDr 3  8D rr rr         sta KB_STATE
0003D0r 3  4C rr rr         jmp @exit
0003D3r 3               @odd_parity:
0003D3r 3  AD 80 FF         lda PORTB
0003D6r 3  29 7F            and #$7F
0003D8r 3  8D 80 FF         sta PORTB
0003DBr 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
0003DDr 3  8D rr rr         sta KB_STATE
0003E0r 3  4C rr rr         jmp @exit
0003E3r 3               
0003E3r 3               @sending_stop:
0003E3r 3                   ; lda #6
0003E3r 3                   ; sta PORTA
0003E3r 3  A9 00            lda #KB_STATE_START     ; set it back to start in case we are receivin next
0003E5r 3  8D rr rr         sta KB_STATE
0003E8r 3  A9 00            lda #0
0003EAr 3  8D rr rr         sta to_send
0003EDr 3  8D rr rr         sta KB_BIT
0003F0r 3  8D rr rr         sta KB_PARITY
0003F3r 3  AD 82 FF         lda DDRB        ; set PORTB back to input
0003F6r 3  29 7F            and #$7F
0003F8r 3  8D 82 FF         sta DDRB
0003FBr 3  4C rr rr         jmp @exit
0003FEr 3               
0003FEr 2               
0003FEr 1               .endif
0003FEr 1               
0003FEr 1               .ifdef LCD2_ENABLED
0003FEr 1               .include "drivers/4004.s"
0003FEr 1               .endif
0003FEr 1               .ifdef CF_ADDRESS
0003FEr 1               .include "drivers/cf.s"
0003FEr 2               .segment "ZEROPAGE": zeropage
000015r 2  xx xx        CF_POINTER: .res 2
000017r 2               
000017r 2               .segment "BSS"
000119r 2  xx xx xx xx  LBA_SIZE: .res 4
00011Dr 2               .segment "DATA"
0003FEr 2               
0003FEr 2               
0003FEr 2               
0003FEr 2               cf_init:
0003FEr 2                   ; phy
0003FEr 2  A9 04            lda #$4
000400r 2                   ; ldy #7
000400r 2                   ; sta (CF_ADDRESS),y
000400r 2  8D D7 FF         sta CF_ADDRESS + 7
000403r 2  20 rr rr         jsr cf_wait
000406r 2  A9 E0            lda #$E0
000408r 2  8D D6 FF         sta CF_ADDRESS + 6
00040Br 2  20 rr rr         jsr cf_wait
00040Er 2  A9 01            lda #$1
000410r 2  8D D1 FF         sta CF_ADDRESS + 1
000413r 2  20 rr rr         jsr cf_wait
000416r 2  A9 EF            lda #$EF
000418r 2  8D D7 FF         sta CF_ADDRESS + 7
00041Br 2  20 rr rr         jsr cf_wait
00041Er 2  20 rr rr         jsr cf_err
000421r 2                   ; ply
000421r 2  60               rts
000422r 2               
000422r 2               
000422r 2               
000422r 2               
000422r 2               cf_read:
000422r 2  5A               phy
000423r 2  A0 00            ldy #0
000425r 2               @loop:
000425r 2  20 rr rr         jsr cf_wait
000428r 2  AD D0 FF         lda CF_ADDRESS
00042Br 2  91 rr            sta (io_buffer_ptr), y
00042Dr 2  C8               iny
00042Er 2  D0 F5            bne @loop
000430r 2  E6 rr            inc io_buffer_ptr + 1
000432r 2                   ; jsr cf_wait
000432r 2               @loop2:
000432r 2  20 rr rr         jsr cf_wait
000435r 2  AD D0 FF         lda CF_ADDRESS
000438r 2  91 rr            sta (io_buffer_ptr), y
00043Ar 2  C8               iny
00043Br 2  D0 F5            bne @loop2
00043Dr 2  C6 rr            dec io_buffer_ptr + 1
00043Fr 2               @loop3:
00043Fr 2  20 rr rr         jsr cf_wait
000442r 2  AD D7 FF         lda CF_ADDRESS + 7
000445r 2  29 08            and #$08
000447r 2  F0 06            beq @exit
000449r 2  AD D0 FF         lda CF_ADDRESS
00044Cr 2  C8               iny
00044Dr 2  D0 F0            bne @loop3
00044Fr 2               @exit:
00044Fr 2  7A               ply
000450r 2  60               rts
000451r 2               
000451r 2               
000451r 2               ; number of sectors to read is in X
000451r 2               cf_read_sector:
000451r 2                   ; sei
000451r 2  20 rr rr         jsr cf_set_lba
000454r 2                   ; ldy #2
000454r 2                   ; sta (CF_ADDRESS), y
000454r 2  A9 01            lda #1
000456r 2  8D D2 FF         sta CF_ADDRESS + 2
000459r 2  20 rr rr         jsr cf_wait
00045Cr 2  A9 20            lda #CF_READ_SECTOR_COMMAND
00045Er 2                   ; ldy #7
00045Er 2                   ; sta (CF_ADDRESS), y
00045Er 2  8D D7 FF         sta CF_ADDRESS + 7
000461r 2  20 rr rr         jsr cf_wait
000464r 2  20 rr rr         jsr cf_read
000467r 2  20 rr rr         jsr cf_err
00046Ar 2                   ; cli
00046Ar 2  60               rts
00046Br 2               
00046Br 2               ; number of sectors to write is in X
00046Br 2               cf_write_sector:
00046Br 2                   ; sei
00046Br 2  20 rr rr         jsr cf_set_lba
00046Er 2  A9 01            lda #1
000470r 2                   ; ldy #2
000470r 2                   ; sta (CF_ADDRESS), y
000470r 2  8D D2 FF         sta CF_ADDRESS + 2
000473r 2  20 rr rr         jsr cf_wait
000476r 2  A9 30            lda #CF_WRITE_SECTOR_COMMAND
000478r 2                   ; ldy #7
000478r 2                   ; sta (CF_ADDRESS), y
000478r 2  8D D7 FF         sta CF_ADDRESS + 7
00047Br 2  20 rr rr         jsr cf_wait
00047Er 2  20 rr rr         jsr cf_write
000481r 2  20 rr rr         jsr cf_err
000484r 2                   ; cli
000484r 2  60               rts
000485r 2               
000485r 2               
000485r 2               cf_write:
000485r 2  5A               phy
000486r 2  A0 00            ldy #0
000488r 2               @loop:
000488r 2  20 rr rr         jsr cf_wait
00048Br 2               
00048Br 2  B1 rr            lda (io_buffer_ptr), y
00048Dr 2  8D D0 FF         sta CF_ADDRESS
000490r 2  C8               iny
000491r 2  D0 F5            bne @loop
000493r 2  E6 rr            inc io_buffer_ptr + 1
000495r 2               @loop2:
000495r 2  20 rr rr         jsr cf_wait
000498r 2  B1 rr            lda (io_buffer_ptr), y
00049Ar 2  8D D0 FF         sta CF_ADDRESS
00049Dr 2  C8               iny
00049Er 2  D0 F5            bne @loop2
0004A0r 2  C6 rr            dec io_buffer_ptr + 1
0004A2r 2               @loop3:
0004A2r 2  20 rr rr         jsr cf_wait
0004A5r 2  AD D7 FF         lda CF_ADDRESS + 7
0004A8r 2  29 08            and #$08
0004AAr 2  F0 06            beq @exit
0004ACr 2  8D D0 FF         sta CF_ADDRESS
0004AFr 2  C8               iny
0004B0r 2  D0 F0            bne @loop3
0004B2r 2               @exit:
0004B2r 2  7A               ply
0004B3r 2  60               rts
0004B4r 2               
0004B4r 2               
0004B4r 2               
0004B4r 2               
0004B4r 2               
0004B4r 2               
0004B4r 2               cf_wait:
0004B4r 2                   ; phy
0004B4r 2                   ; ldy #7
0004B4r 2               @wait_loop:
0004B4r 2                   ; lda (CF_ADDRESS), y
0004B4r 2  AD D7 FF         lda CF_ADDRESS + 7
0004B7r 2  29 80            and #$80
0004B9r 2  D0 F9            bne @wait_loop
0004BBr 2                   ; ply
0004BBr 2  60               rts
0004BCr 2               
0004BCr 2               cf_set_lba:
0004BCr 2  AD rr rr         lda IO_SECTOR
0004BFr 2  8D D3 FF         sta CF_ADDRESS + 3
0004C2r 2  20 rr rr         jsr cf_wait
0004C5r 2  AD rr rr         lda IO_SECTOR + 1
0004C8r 2  8D D4 FF         sta CF_ADDRESS + 4
0004CBr 2  20 rr rr         jsr cf_wait
0004CEr 2  AD rr rr         lda IO_SECTOR + 2
0004D1r 2  8D D5 FF         sta CF_ADDRESS + 5
0004D4r 2  20 rr rr         jsr cf_wait
0004D7r 2  AD rr rr         lda IO_SECTOR + 3
0004DAr 2  29 0F            and #$0F
0004DCr 2  09 E0            ora #$E0
0004DEr 2  8D D6 FF         sta CF_ADDRESS + 6
0004E1r 2  20 rr rr         jsr cf_wait
0004E4r 2  60               rts
0004E5r 2               
0004E5r 2               cf_err:
0004E5r 2                   ; phy
0004E5r 2  20 rr rr         jsr cf_wait
0004E8r 2                   ; ldy #7
0004E8r 2                   ; lda (CF_ADDRESS), y
0004E8r 2  AD D7 FF         lda CF_ADDRESS + 7
0004EBr 2  29 01            and #$01
0004EDr 2  F0 05            beq @exit
0004EFr 2               @exit_fail:
0004EFr 2  A9 21            lda #'!'
0004F1r 2  20 rr rr         jsr kernel_putc
0004F4r 2               @exit:
0004F4r 2                   ; ply
0004F4r 2  60               rts
0004F5r 2               
0004F5r 2               
0004F5r 2  20 62 79 74  bytes_msg: .byte " bytes"
0004F9r 2  65 73        
0004FBr 2               cf_end:
0004FBr 2               
0004FBr 2               
0004FBr 1               io_read_sector_address = cf_read_sector
0004FBr 1               io_write_sector_address = cf_write_sector
0004FBr 1               .endif
0004FBr 1               .ifdef SD
0004FBr 1               
0004FBr 1               .include "drivers/sd.s"
0004FBr 1               io_read_sector_address = sd_read_sector
0004FBr 1               
0004FBr 1               .endif
0004FBr 1               
0004FBr 1               ; .if .def(SD)
0004FBr 1               ; .include "../../fat16.s"
0004FBr 1               ; .elseif .def(CF_ADDRESS)
0004FBr 1               ; .include "../../fat16.s"
0004FBr 1               ; .endif
0004FBr 1               
0004FBr 1               .include "../../utils.s"
0004FBr 2               ;  print a 16-bit integer
0004FBr 2               ; lsb in x, msb in a
0004FBr 2               
0004FBr 2               .segment "ZEROPAGE": zeropage
000017r 2  xx xx        util_tmp: .res 2
000019r 2               
000019r 2               .segment "BSS"
00011Dr 2  xx xx        util_tmp_var: .res 2
00011Fr 2  xx xx xx xx  pad: .res 4
000123r 2               
000123r 2               .segment "DATA"
0004FBr 2               
0004FBr 2               print16:
0004FBr 2  8D rr rr         sta acc+1
0004FEr 2  8E rr rr         stx acc
000501r 2               
000501r 2  A2 04            ldx #4
000503r 2               nextdig:
000503r 2  20 rr rr         jsr div
000506r 2  AD rr rr         lda ext
000509r 2  9D rr rr         sta num,x
00050Cr 2  CA               dex
00050Dr 2  10 F4            bpl nextdig
00050Fr 2               
00050Fr 2               firstdig:
00050Fr 2  E8               inx
000510r 2  E0 05            cpx #5
000512r 2  F0 17            beq print0
000514r 2  BD rr rr         lda num,x
000517r 2  F0 F6            beq firstdig
000519r 2               
000519r 2               ptnxtdig:
000519r 2  18               clc
00051Ar 2  69 30            adc #'0'
00051Cr 2  20 rr rr         jsr kernel_putc
00051Fr 2  E8               inx
000520r 2  E0 05            cpx #5
000522r 2  F0 06            beq pt16done
000524r 2  BD rr rr         lda num,x
000527r 2  4C rr rr         jmp ptnxtdig
00052Ar 2               
00052Ar 2               pt16done:
00052Ar 2  60               rts
00052Br 2               
00052Br 2               print0:
00052Br 2  A9 30            lda #'0'
00052Dr 2  20 rr rr         jsr kernel_putc
000530r 2  60               rts
000531r 2               
000531r 2  00 00 00 00  num: .byte 0,0,0,0,0
000535r 2  00           
000536r 2               
000536r 2               ; 16/16-bit division, from the fridge
000536r 2               ; acc/aux -> acc, remainder in ext
000536r 2               div:
000536r 2  A9 00            lda #0
000538r 2  8D rr rr         sta ext+1
00053Br 2  A0 10            ldy #$10
00053Dr 2               dloop:
00053Dr 2  0E rr rr         asl acc
000540r 2  2E rr rr         rol acc+1
000543r 2  2A               rol
000544r 2  2E rr rr         rol ext+1
000547r 2  48               pha
000548r 2  CD rr rr         cmp aux
00054Br 2  AD rr rr         lda ext+1
00054Er 2  ED rr rr         sbc aux+1
000551r 2  90 0B            bcc div2
000553r 2  8D rr rr         sta ext+1
000556r 2  68               pla
000557r 2  ED rr rr         sbc aux
00055Ar 2  48               pha
00055Br 2  EE rr rr         inc acc
00055Er 2               div2:
00055Er 2  68               pla
00055Fr 2  88               dey
000560r 2  D0 DB            bne dloop
000562r 2  8D rr rr         sta ext
000565r 2  60               rts
000566r 2               
000566r 2  00 00        acc: .word 0
000568r 2  0A 00        aux: .word 10 ; constant
00056Ar 2  00 00        ext: .word 0
00056Cr 2               
00056Cr 2               
00056Cr 2               
00056Cr 2               calculate_free_mem:
00056Cr 2                   ; load dictionary address
00056Cr 2                   ; fill with $55 until ram_end
00056Cr 2                   ; read and check same
00056Cr 2                   ; fill again with zeroes
00056Cr 2               
00056Cr 2  9C rr rr         stz util_tmp_var
00056Fr 2  9C rr rr         stz util_tmp_var + 1
000572r 2               
000572r 2  A0 00            ldy #0
000574r 2               @loop:
000574r 2  A9 55            lda #$55
000576r 2  91 rr            sta (util_tmp), y        ; store to mem address
000578r 2  D1 rr            cmp (util_tmp), y        ; compare to what is now there
00057Ar 2  D0 19            bne @exit               ; no equal, stop couting and exit
00057Cr 2  A9 00            lda #0                  ; zero the memory again
00057Er 2  91 rr            sta (util_tmp), y
000580r 2  EE rr rr         inc util_tmp_var
000583r 2  D0 03            bne @incok
000585r 2  EE rr rr         inc util_tmp_var + 1
000588r 2               @incok:
000588r 2  C8               iny
000589r 2  D0 E9            bne @loop
00058Br 2  A5 rr            lda util_tmp + 1
00058Dr 2  C9 80            cmp #>ram_end
00058Fr 2  B0 04            bcs @exit
000591r 2  E6 rr            inc util_tmp + 1
000593r 2  80 DF            bra @loop
000595r 2               @exit:
000595r 2  60               rts
000596r 2               
000596r 2               
000596r 2               
000596r 2               print_message:
000596r 2  68           	pla					; get return address from stack
000597r 2  85 rr        	sta util_tmp
000599r 2  68           	pla
00059Ar 2  85 rr        	sta util_tmp + 1
00059Cr 2               
00059Cr 2  80 03        	bra @inc
00059Er 2               @print:
00059Er 2  20 rr rr     	jsr kernel_putc
0005A1r 2               
0005A1r 2               @inc:
0005A1r 2  E6 rr        	inc util_tmp
0005A3r 2  D0 02        	bne @inced
0005A5r 2  E6 rr        	inc util_tmp + 1
0005A7r 2               @inced:
0005A7r 2  B2 rr        	lda (util_tmp)
0005A9r 2  D0 F3        	bne @print
0005ABr 2  A5 rr        	lda util_tmp + 1
0005ADr 2  48           	pha
0005AEr 2  A5 rr        	lda util_tmp
0005B0r 2  48           	pha
0005B1r 2               print_message_end:
0005B1r 2  60           	rts
0005B2r 2               
0005B2r 2               
0005B2r 2               print_zp_index_string:
0005B2r 2               @loop:
0005B2r 2  B1 rr            lda (util_tmp), y
0005B4r 2  F0 06            beq @exit
0005B6r 2  20 rr rr         jsr kernel_putc
0005B9r 2  C8               iny
0005BAr 2  D0 F6            bne @loop
0005BCr 2               @exit:
0005BCr 2  60               rts
0005BDr 2               
0005BDr 2               
0005BDr 2               output_ascii:
0005BDr 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
0005BDr 2  48               pha
0005BEr 2  4A               lsr             ; convert high nibble first
0005BFr 2  4A               lsr
0005C0r 2  4A               lsr
0005C1r 2  4A               lsr
0005C2r 2  20 rr rr         jsr output_ascii_nibble_to_ascii
0005C5r 2  68               pla
0005C6r 2               
0005C6r 2                   ; fall through to _nibble_to_ascii
0005C6r 2               
0005C6r 2               output_ascii_nibble_to_ascii:
0005C6r 2               ; """Private helper function for byte_to_ascii: Print lower nibble
0005C6r 2               ; of A and and EMIT it. This does the actual work.
0005C6r 2               ; """
0005C6r 2  29 0F            and #$0F
0005C8r 2  09 30            ora #'0'
0005CAr 2  C9 3A            cmp #$3A        ; '9+1
0005CCr 2  90 02            bcc @1
0005CEr 2  69 06            adc #$06
0005D0r 2               
0005D0r 2               @1:
0005D0r 2  20 rr rr         jsr kernel_putc
0005D3r 2  60               rts
0005D4r 2               
0005D4r 1               
0005D4r 1               ; .include "drivers/spi.s"
0005D4r 1               ; .include "drivers/sd.s"
0005D4r 1               ; .include "drivers/vga.s"
0005D4r 1               ; .include "drivers/fat32.s"
0005D4r 1               
0005D4r 1               ; .include "../../ed.s"
0005D4r 1               
0005D4r 1               .include "../../forth.s"
0005D4r 2               
0005D4r 2               
0005D4r 2               ; Definitions for Tali Forth 2
0005D4r 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0005D4r 2               ; First version: 01. Apr 2016 (Liara Forth)
0005D4r 2               ; This version: 29. Jan 2020
0005D4r 2               
0005D4r 2               ; This file is included by taliforth.asm. These are the general
0005D4r 2               ; definitions; platform-specific definitions such as the
0005D4r 2               ; memory map are kept in the platform folder.
0005D4r 2               
0005D4r 2               stack0 =    $0100   ; location of the stack
0005D4r 2               
0005D4r 2               ; User Variables:
0005D4r 2               ; Block variables
0005D4r 2               blk_offset =  0        ; BLK : UP + 0
0005D4r 2               scr_offset =  2        ; SCR : UP + 2
0005D4r 2               
0005D4r 2               ; Wordlists
0005D4r 2               current_offset =  4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
0005D4r 2               num_wordlists_offset =  5
0005D4r 2                                          ; #WORDLISTS (byte) : UP + 5
0005D4r 2               wordlists_offset =  6  ; WORDLISTS (cells) : UP + 6 to UP + 29
0005D4r 2                                          ;          (FORTH, EDITOR, ASSEMBLER, ROOT, +8 more)
0005D4r 2               num_order_offset =  30 ; #ORDER (byte) : UP + 30
0005D4r 2                                          ;          (Number of wordlists in search order)
0005D4r 2               search_order_offset =  31
0005D4r 2                                          ; SEARCH-ORDER (bytes) : UP + 31 to UP + 39
0005D4r 2                                          ; Allowing for 9 to keep offsets even.
0005D4r 2               max_wordlists =  12    ; Maximum number of wordlists supported
0005D4r 2                                          ; 4 Tali built-ins + 8 user wordlists
0005D4r 2               
0005D4r 2               ; Buffer variables
0005D4r 2               blkbuffer_offset =     40   ; Address of buffer
0005D4r 2               buffblocknum_offset =  42   ; Block number current in buffer
0005D4r 2               buffstatus_offset =    44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
0005D4r 2               
0005D4r 2               ; Block I/O vectors
0005D4r 2               blockread_offset =     46   ; Vector to block reading routine
0005D4r 2               blockwrite_offset =    48   ; Vector to block writing routine
0005D4r 2               
0005D4r 2               
0005D4r 2               ; ASCII CHARACTERS
0005D4r 2               AscCC =   $03  ; break (CTRL-c)
0005D4r 2               AscBELL = $07  ; bell sound
0005D4r 2               AscBS =   $08  ; backspace
0005D4r 2               AscLF =   $0a  ; line feed
0005D4r 2               AscCR =   $0d  ; carriage return
0005D4r 2               AscESC =  $1b  ; escape
0005D4r 2               AscSP =   $20  ; space
0005D4r 2               AscDEL =  $7f  ; delete (CTRL-h)
0005D4r 2               AscCP =   $10  ; CTRL-p (used to recall previous input history)
0005D4r 2               AscCN =   $0e  ; CTRL-n (used to recall next input history)
0005D4r 2               
0005D4r 2               ; DICTIONARY FLAGS
0005D4r 2               ; The first three bits are currently unused
0005D4r 2               CO = 1  ; Compile Only
0005D4r 2               AN = 2  ; Always Native Compile
0005D4r 2               IM = 4  ; Immediate Word
0005D4r 2               NN = 8  ; Never Native Compile
0005D4r 2               UF = 16 ; Includes Underflow Check (RESERVED)
0005D4r 2               HC = 32 ; Word has Code Field Area (CFA)
0005D4r 2               
0005D4r 2               
0005D4r 2               ; VARIOUS
0005D4r 2               MAX_LINE_LENGTH =   79      ; assumes 80 character lines
0005D4r 2               
0005D4r 2               ; END
0005D4r 2               
0005D4r 2               .segment "ZEROPAGE": zeropage
000019r 2               ; ZERO PAGE ADDRESSES/VARIABLES
000019r 2               
000019r 2               ; These are kept at the top of Zero Page, with the most important variables at
000019r 2               ; the top because the Data Stack grows towards this area from dsp0: If there is
000019r 2               ; an overflow, the lower, less important variables will be clobbered first,
000019r 2               ; giving the system a chance to recover. In other words, they are part of the
000019r 2               ; floodplain.
000019r 2               
000019r 2               ; The four variables insrc, cib, ciblen, and toin must stay together in this
000019r 2               ; sequence for the words INPUT>R and R>INPUT to work correctly.
000019r 2               
000019r 2  xx xx        cp: .res 2   ; Compiler Pointer
00001Br 2  xx xx        dp: .res 2   ; Dictionary Pointer
00001Dr 2  xx xx        workword: .res 2   ; nt (not xt!) of word being compiled, except in
00001Fr 2                                          ; a :NONAME declared word (see status)
00001Fr 2  xx xx        insrc: .res 2   ; input Source for SOURCE-ID
000021r 2  xx xx        cib: .res 2   ; address of current input buffer
000023r 2  xx xx        ciblen: .res 2  ; length of current input buffer
000025r 2  xx xx        toin: .res 2  ; pointer to CIB (>IN in Forth)
000027r 2  xx xx        ip: .res 2  ; Instruction Pointer (current xt)
000029r 2  xx xx        output: .res 2  ; vector for EMIT
00002Br 2  xx xx        input: .res 2  ; vector for KEY
00002Dr 2  xx xx        havekey: .res 2  ; vector for KEY?
00002Fr 2  xx xx        state: .res 2  ; STATE: -1 compile, 0 interpret
000031r 2  xx xx        base: .res 2  ; number radix, default decimal
000033r 2  xx xx        nc_limit: .res 2  ; limit for Native Compile size
000035r 2  xx xx        uf_strip: .res 2  ; flag to strip underflow detection code
000037r 2  xx xx        up: .res 2  ; User Pointer (Address of user variables)
000039r 2  xx xx        status: .res 2  ; internal status information
00003Br 2                                          ; (used by : :NONAME ; ACCEPT)
00003Br 2                                          ; Bit 7 = Redefined word message postpone
00003Br 2                                          ;         When set before calling CREATE, it will
00003Br 2                                          ;         not print the "redefined xxxx" message if
00003Br 2                                          ;         the word exists. Instead, this bit will
00003Br 2                                          ;         be reused and after CREATE has run, it will
00003Br 2                                          ;         be set if the word was redefined and 0 if
00003Br 2                                          ;         not. This bit should be 0 when not in use.
00003Br 2                                          ; Bit 6 = 1 for normal ":" definitions
00003Br 2                                          ;         WORKWORD contains nt of word being compiled
00003Br 2                                          ;       = 0 for :NONAME definitions
00003Br 2                                          ;         WORKWORD contains xt of word being compiled
00003Br 2                                          ; Bit 5 = 1 for NUMBER returning a double word
00003Br 2                                          ;       = 0 for NUMBER returning a single word
00003Br 2                                          ; Bit 3 = 1 makes CTRL-n recall current history
00003Br 2                                          ;       = 0 CTRL-n recalls previous history
00003Br 2                                          ; Bit 2 = Current history buffer msb
00003Br 2                                          ; Bit 1 = Current history buffer (0-7, wraps)
00003Br 2                                          ; Bit 0 = Current history buffer lsb
00003Br 2                                          ; status+1 is used by ACCEPT to hold history lengths.
00003Br 2  xx xx        tmpbranch: .res 2  ; temporary storage for 0BRANCH, BRANCH only
00003Dr 2  xx xx        tmp1: .res 2  ; temporary storage
00003Fr 2  xx xx        tmp2: .res 2  ; temporary storage
000041r 2  xx xx        tmp3: .res 2  ; temporary storage (especially for print)
000043r 2  xx xx        tmpdsp: .res 2  ; temporary DSP (X) storage (two bytes)
000045r 2  xx xx        tmptos: .res 2  ; temporary TOS storage
000047r 2  xx xx        editor1: .res 2  ; temporary for editors
000049r 2  xx xx        editor2: .res 2  ; temporary for editors
00004Br 2  xx xx        editor3: .res 2  ; temporary for editors
00004Dr 2  xx xx        tohold: .res 2  ; pointer for formatted output
00004Fr 2  xx xx xx xx  scratch: .res 8  ; 8 byte scratchpad (see UM/MOD)
000053r 2  xx xx xx xx  
000057r 2               
000057r 2               .segment "DATASTACK": zeropage
000000r 2  xx xx xx xx  dsp_start: .res 127 ; reserve 128 bytes for data stack (64 16 bit cells)
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
00007Fr 2               dsp0:          ; first data stack location. Data stack grows down
00007Fr 2               rsp0:     ; starting stack pointer
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               .segment "BSS"
000123r 2  xx xx xx xx  hist_buff: .res $400
000127r 2  xx xx xx xx  
00012Br 2  xx xx xx xx  
000523r 2  xx xx xx xx  buffer0: .res $100
000527r 2  xx xx xx xx  
00052Br 2  xx xx xx xx  
000623r 2               
000623r 2               .segment "DICTIONARY"   ; the dictionary gets its own segment so that it uses all the space left in RAM
000000r 2  xx xx xx xx  dictionary: .res $1000
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
001000r 2               
001000r 2               cp_end = $7FFF          ; the dictionary ends at RAM end (everything else is before)
001000r 2               
001000r 2               cp0 = dictionary
001000r 2               bsize =     $ff
001000r 2               padoffset = $ff
001000r 2               
001000r 2               
001000r 2               
001000r 2               .segment "DATA"
0005D4r 2               
0005D4r 2               
0005D4r 2               
0005D4r 2               forth:
0005D4r 2                   .include "native_words.s"     ; Native Forth words. Starts with COLD
0005D4r 3               ; Low-level Forth word routines
0005D4r 3               ; Tali Forth 2 for the 65c02
0005D4r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0005D4r 3               ; First version: 19. Jan 2014
0005D4r 3               ; This version: 03. Jan 2018
0005D4r 3               
0005D4r 3               ; This list is ordered alphabetically by the names of the words, not their
0005D4r 3               ; strings (so "!" is sorted as "STORE"). However, we start off with COLD,
0005D4r 3               ; ABORT, and QUIT as the natural start sequence. Each word has two special
0005D4r 3               ; status lines that begins with "; ## ", which allows auto-generation of the
0005D4r 3               ; WORDLIST.md file and other entries in the docs folder. Status entries are:
0005D4r 3               
0005D4r 3               ;       TBA --> fragment --> coded --> tested --> auto
0005D4r 3               
0005D4r 3               ; "Auto" means that the word is automatically tested by the test suite (good),
0005D4r 3               ; "tested" means that it was tested by hand in some way (okay), "coded" means
0005D4r 3               ; it hasn't been tested at all (bad). See the test suite for more details.
0005D4r 3               
0005D4r 3               ; ## COLD ( -- ) "Reset the Forth system"
0005D4r 3               ; ## "cold"  tested  Tali Forth
0005D4r 3               ;       """Reset the Forth system. Does not restart the kernel,
0005D4r 3               ;       use the 65c02 reset for that. Flows into ABORT.
0005D4r 3               ;       """
0005D4r 3               xt_cold:
0005D4r 3  D8                           cld
0005D5r 3               
0005D5r 3                               ; Set the OUTPUT vector to the default kernel_putc
0005D5r 3                               ; We do this really early so we can print error messages
0005D5r 3                               ; during debugging
0005D5r 3  A9 rr                        lda #<kernel_putc
0005D7r 3  85 rr                        sta output
0005D9r 3  A9 rr                        lda #>kernel_putc
0005DBr 3  85 rr                        sta output+1
0005DDr 3               
0005DDr 3                               ; Load all of the important zero page variables from ROM
0005DDr 3  A2 21                        ldx #cold_zp_table_end-cold_zp_table-1
0005DFr 3               
0005DFr 3               @load_zp_loop:
0005DFr 3                               ; This loop loads them back to front. We can use X here
0005DFr 3                               ; because Tali hasn't started using the stack yet.
0005DFr 3  BD rr rr                     lda cold_zp_table,x
0005E2r 3  95 rr                        sta cp,x
0005E4r 3  CA                           dex
0005E5r 3  D0 F8                        bne @load_zp_loop
0005E7r 3               
0005E7r 3                               ; Copy the 0th element.
0005E7r 3  AD rr rr                     lda cold_zp_table
0005EAr 3  85 rr                        sta cp
0005ECr 3                               ; Initialize 65c02 stack (Return Stack)
0005ECr 3  A2 rr                        ldx #rsp0
0005EEr 3  9A                           txs
0005EFr 3               
0005EFr 3                               ; Clear Data Stack. This is repeated in ABORT, but this way we
0005EFr 3                               ; can load high-level words with EVALUATE
0005EFr 3  A2 rr                        ldx #dsp0
0005F1r 3               
0005F1r 3               
0005F1r 3                               ; Initialize the user variables.
0005F1r 3  A0 31                        ldy #cold_user_table_end-cold_user_table-1
0005F3r 3  A9 00                        lda #0
0005F5r 3               
0005F5r 3               @load_user_vars_loop:
0005F5r 3                               ; Like the zero page variables, these are initialized
0005F5r 3                               ; back to front.
0005F5r 3  B9 rr rr                     lda cold_user_table,y
0005F8r 3  91 rr                        sta (up),y
0005FAr 3  88                           dey
0005FBr 3  D0 F8                        bne @load_user_vars_loop
0005FDr 3               
0005FDr 3                               ; Copy the 0th element.
0005FDr 3  AD rr rr                     lda cold_user_table
000600r 3  92 rr                        sta (up)
000602r 3  20 rr rr                     jsr xt_cr
000605r 3               
000605r 3                               ; Define high-level words in forth_words.asm via EVALUATE. If
000605r 3                               ; you do not have any high-level words, this part can be
000605r 3                               ; commented out.
000605r 3  CA                           dex
000606r 3  CA                           dex
000607r 3  CA                           dex
000608r 3  CA                           dex
000609r 3               
000609r 3               
000609r 3                               ; start address goes NOS
000609r 3  A9 rr                        lda #<forth_words_start
00060Br 3  95 02                        sta 2,x
00060Dr 3  A9 rr                        lda #>forth_words_start
00060Fr 3  95 03                        sta 3,x
000611r 3               
000611r 3                               ; length goes TOS
000611r 3  A9 rr                        lda #<forth_words_end
000613r 3  38                           sec
000614r 3  E9 rr                        sbc #<forth_words_start
000616r 3  95 00                        sta 0,x
000618r 3               
000618r 3  A9 rr                        lda #>forth_words_end
00061Ar 3  E9 rr                        sbc #>forth_words_start
00061Cr 3  95 01                        sta 1,x
00061Er 3               
00061Er 3               
00061Er 3  20 rr rr                     jsr xt_evaluate
000621r 3               
000621r 3                               ; Now define any user words via EVALUATE. If you do not have
000621r 3                               ; any user-defined words, this part can be commented out as
000621r 3                               ; well.
000621r 3  CA                           dex
000622r 3  CA                           dex
000623r 3  CA                           dex
000624r 3  CA                           dex
000625r 3               
000625r 3               
000625r 3                               ; start address goes NOS
000625r 3  A9 rr                        lda #<user_words_start
000627r 3  95 02                        sta 2,x
000629r 3  A9 rr                        lda #>user_words_start
00062Br 3  95 03                        sta 3,x
00062Dr 3               
00062Dr 3                               ; length goes TOS
00062Dr 3  A9 rr                        lda #<user_words_end
00062Fr 3  38                           sec
000630r 3  E9 rr                        sbc #<user_words_start
000632r 3  95 00                        sta 0,x
000634r 3               
000634r 3  A9 rr                        lda #>user_words_end
000636r 3  E9 rr                        sbc #>user_words_start
000638r 3  95 01                        sta 1,x
00063Ar 3               
00063Ar 3  20 rr rr                     jsr xt_evaluate
00063Dr 3               
00063Dr 3                               ; Initialize all of the history buffers by putting a zero in
00063Dr 3                               ; each length byte.
00063Dr 3  9C rr rr                     stz hist_buff
000640r 3  9C rr rr                     stz hist_buff+$80
000643r 3  9C rr rr                     stz hist_buff+$100
000646r 3  9C rr rr                     stz hist_buff+$180
000649r 3  9C rr rr                     stz hist_buff+$200
00064Cr 3  9C rr rr                     stz hist_buff+$280
00064Fr 3  9C rr rr                     stz hist_buff+$300
000652r 3  9C rr rr                     stz hist_buff+$380
000655r 3               
000655r 3               
000655r 3                               ; fall through to ABORT
000655r 3               
000655r 3               
000655r 3               ; ## ABORT ( -- ) "Reset the Data Stack and restart the CLI"
000655r 3               ; ## "abort"  tested  ANS core
000655r 3                       ; """https://forth-standard.org/standard/core/ABORT
000655r 3                       ; Clear Data Stack and continue into QUIT. We can jump here via
000655r 3                       ; subroutine if we want to because we are going to reset the 65c02's
000655r 3                       ; stack pointer (the Return Stack) anyway during QUIT. Note we don't
000655r 3                       ; actually delete the stuff on the Data Stack.
000655r 3                       ; """
000655r 3               xt_abort:
000655r 3  A2 rr                        ldx #dsp0
000657r 3               
000657r 3                               ; fall through to QUIT
000657r 3               
000657r 3               
000657r 3               ; ## QUIT ( -- ) "Reset the input and get new input"
000657r 3               ; ## "quit"  tested  ANS core
000657r 3                       ; """https://forth-standard.org/standard/core/QUIT
000657r 3                       ; Rest the input and start command loop
000657r 3                       ; """
000657r 3               
000657r 3               xt_quit:
000657r 3                               ; Clear the Return Stack. This is a little screwed up
000657r 3                               ; because the 65c02 can only set the Return Stack via X,
000657r 3                               ; which is our Data Stack pointer. The ANS specification
000657r 3                               ; demands, however, that ABORT reset the Data Stack pointer
000657r 3  8A                           txa             ; Save the DSP that we just defined
000658r 3  A2 rr                        ldx #rsp0
00065Ar 3  9A                           txs
00065Br 3  AA                           tax             ; Restore the DSP. Dude, seriously.
00065Cr 3               
00065Cr 3                               ; make sure instruction pointer is empty
00065Cr 3  64 rr                        stz ip
00065Er 3  64 rr                        stz ip+1
000660r 3               
000660r 3                               ; SOURCE-ID is zero (keyboard input)
000660r 3  64 rr                        stz insrc
000662r 3  64 rr                        stz insrc+1
000664r 3               
000664r 3                               ; STATE is zero (interpret, not compile)
000664r 3  64 rr                        stz state
000666r 3  64 rr                        stz state+1
000668r 3               @get_line:
000668r 3  A9 rr                        lda #<buffer0   ; input buffer, this is paranoid
00066Ar 3  85 rr                        sta cib
00066Cr 3  A9 rr                        lda #>buffer0
00066Er 3  85 rr                        sta cib+1
000670r 3               
000670r 3                               ; Size of current input buffer (CIB) is zero
000670r 3  64 rr                        stz ciblen
000672r 3  64 rr                        stz ciblen+1
000674r 3               
000674r 3                               ; Accept a line from the current import source. This is how
000674r 3                               ; modern Forths to it.
000674r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
000677r 3               
000677r 3                               ; Test flag: LSB of TOS
000677r 3  B5 00                        lda 0,x
000679r 3  D0 05                        bne @success
00067Br 3               
00067Br 3                               ; If REFILL returned a FALSE flag, something went wrong and we
00067Br 3                               ; need to print an error message and reset the machine. We
00067Br 3                               ; don't need to save TOS because we're going to clobber it
00067Br 3                               ; anyway when we go back to ABORT.
00067Br 3  A9 06                        lda #err_refill
00067Dr 3  4C rr rr                     jmp error
000680r 3               
000680r 3               @success:
000680r 3                               ; Assume we have successfully accepted a string of input from
000680r 3                               ; a source, with address cib and length of input in ciblen. We
000680r 3                               ; arrive here still with the TRUE flag from REFILL as TOS
000680r 3  E8                           inx                     ; drop
000681r 3  E8                           inx
000682r 3               
000682r 3                               ; Main compile/execute routine
000682r 3  20 rr rr                     jsr interpret
000685r 3               
000685r 3                               ; Test for Data Stack underflow. Tali Forth does not check for
000685r 3                               ; overflow because it is so rare
000685r 3  E0 rr                        cpx #dsp0
000687r 3  F0 05                        beq @stack_ok
000689r 3  90 03                        bcc @stack_ok           ; DSP must always be smaller than DSP0
00068Br 3               
00068Br 3  4C rr rr                     jmp underflow_error
00068Er 3               
00068Er 3               @stack_ok:
00068Er 3                               ; Display system prompt if all went well. If we're interpreting,
00068Er 3                               ; this is " ok", if we're compiling, it's " compiled". Note
00068Er 3                               ; space at beginning of the string.
00068Er 3  A5 rr                        lda state
000690r 3  F0 02                        beq @print
000692r 3               
000692r 3  A9 01                        lda #1                  ; number for "compile" string
000694r 3               @print:
000694r 3  20 rr rr                     jsr print_string
000697r 3               
000697r 3                               ; Awesome line, everybody! Now get the next one.
000697r 3  80 CF                        bra @get_line
000699r 3               
000699r 3               z_cold:
000699r 3               z_abort:
000699r 3               z_quit:         ; no RTS required
000699r 3               
000699r 3               
000699r 3               
000699r 3               ; This table holds all of the initial values for the variables in zero page.
000699r 3               ; This table is used by COLD.
000699r 3               cold_zp_table:
000699r 3  rr rr                .word cp0+256+1024      ; cp moved to make room for user vars and
00069Br 3                                               ; block buffer
00069Br 3  rr rr                .word dictionary_start  ; dp
00069Dr 3  00 00                .word 0                 ; workword
00069Fr 3  00 00                .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
0006A1r 3  rr rr                .word buffer0           ; cib
0006A3r 3  00 00                .word 0                 ; ciblen
0006A5r 3  00 00                .word 0                 ; toin
0006A7r 3  00 00                .word 0                 ; ip
0006A9r 3  rr rr                .word kernel_putc       ; output
0006ABr 3  rr rr                .word kernel_getc       ; input
0006ADr 3  00 00                .word 0                 ; havekey
0006AFr 3  00 00                .word 0                 ; state (0 = interpret)
0006B1r 3  0A 00                .word 10                ; base
0006B3r 3  14 00                .word 20                ; nc-limit
0006B5r 3  00 00                .word 0                 ; uf_strip (off by default)
0006B7r 3  rr rr                .word cp0               ; up (user vars put right at beginning of
0006B9r 3                                               ; available RAM)
0006B9r 3  00 00                .word 0                 ; status
0006BBr 3               cold_zp_table_end:
0006BBr 3               
0006BBr 3               ; No further ZP variables are initialized. The variables past this point are
0006BBr 3               ; all temporaries.
0006BBr 3               
0006BBr 3               ; This table holds the inital values for the user variables. This table is
0006BBr 3               ; used by COLD.
0006BBr 3               cold_user_table:
0006BBr 3  00 00                .word 0                         ; BLK
0006BDr 3  00 00                .word 0                         ; SCR
0006BFr 3  00                   .byte 0                         ; CURRENT = FORTH-WORDLIST
0006C0r 3  04                   .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
0006C1r 3  rr rr                .word dictionary_start          ; FORTH-WORDLIST
0006C3r 3  rr rr                .word editor_dictionary_start   ; EDITOR-WORDLIST
0006C5r 3               .ifdef TALI_OPTIONAL_ASSEMBLER
0006C5r 3  rr rr                .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
0006C7r 3               .else
0006C7r 3                       .word 0
0006C7r 3               .endif
0006C7r 3  rr rr                .word root_dictionary_start     ; ROOT-WORDLIST
0006C9r 3  00 00 00 00          .word 0,0,0,0,0,0,0,0           ; User wordlists
0006CDr 3  00 00 00 00  
0006D1r 3  00 00 00 00  
0006D9r 3  01                   .byte 1                         ; #ORDER
0006DAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0         ; search-order
0006DEr 3  00 00 00 00  
0006E2r 3  00           
0006E3r 3  rr rr                .word cp0+256                   ; Address of buffer (right after USER vars)
0006E5r 3  00 00                .word 0                         ; block in buffer
0006E7r 3  00 00                .word 0                         ; buffer status (not in use)
0006E9r 3  rr rr                .word xt_block_word_error       ; block-read vector
0006EBr 3  rr rr                .word xt_block_word_error       ; block-write vector
0006EDr 3               cold_user_table_end:
0006EDr 3               
0006EDr 3               
0006EDr 3               ; ## ABORT_QUOTE ( "string" -- ) "If flag TOS is true, ABORT with message"
0006EDr 3               ; ## "abort""  tested  ANS core
0006EDr 3                       ; """https://forth-standard.org/standard/core/ABORTq
0006EDr 3                       ; Abort and print a string.
0006EDr 3                       ; """
0006EDr 3               
0006EDr 3               xt_abort_quote:
0006EDr 3                               ; save the string
0006EDr 3  20 rr rr                     jsr xt_s_quote          ; S"
0006F0r 3               
0006F0r 3                               ; compile run-time part
0006F0r 3  A0 rr                        ldy #>abort_quote_runtime
0006F2r 3  A9 rr                        lda #<abort_quote_runtime
0006F4r 3  20 rr rr                     jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
0006F7r 3               
0006F7r 3  60           z_abort_quote:  rts
0006F8r 3               
0006F8r 3               
0006F8r 3               abort_quote_runtime:
0006F8r 3                       ; """Runtime aspect of ABORT_QUOTE"""
0006F8r 3               
0006F8r 3                               ; We arrive here with ( f addr u )
0006F8r 3  B5 04                        lda 4,x
0006FAr 3  15 05                        ora 5,x
0006FCr 3  F0 09                        beq @done       ; if FALSE, we're done
0006FEr 3               
0006FEr 3                               ; We're true, so print string and ABORT. We follow Gforth
0006FEr 3                               ; in going to a new line after the string
0006FEr 3  20 rr rr                     jsr xt_type
000701r 3  20 rr rr                     jsr xt_cr
000704r 3  4C rr rr                     jmp xt_abort    ; not JSR, so never come back
000707r 3               @done:
000707r 3                               ; Drop three entries from the Data Stack
000707r 3  8A                           txa
000708r 3  18                           clc
000709r 3  69 06                        adc #6
00070Br 3  AA                           tax
00070Cr 3               
00070Cr 3  60                           rts
00070Dr 3               
00070Dr 3               
00070Dr 3               
00070Dr 3               ; ## ABS ( n -- u ) "Return absolute value of a number"
00070Dr 3               ; ## "abs"  auto  ANS core
00070Dr 3                       ; """https://forth-standard.org/standard/core/ABS
00070Dr 3                       ; Return the absolute value of a number.
00070Dr 3                       ; """
00070Dr 3               
00070Dr 3               xt_abs:
00070Dr 3  20 rr rr                     jsr underflow_1
000710r 3               
000710r 3  B5 01                        lda 1,x
000712r 3  10 0D                        bpl @done       ; positive number, easy money!
000714r 3               
000714r 3                               ; negative: calculate 0 - n
000714r 3  38                           sec
000715r 3  A9 00                        lda #0
000717r 3  F5 00                        sbc 0,x         ; LSB
000719r 3  95 00                        sta 0,x
00071Br 3               
00071Br 3  A9 00                        lda #0          ; MSB
00071Dr 3  F5 01                        sbc 1,x
00071Fr 3  95 01                        sta 1,x
000721r 3               
000721r 3               @done:
000721r 3  60           z_abs:          rts
000722r 3               
000722r 3               
000722r 3               
000722r 3               ; ## ACCEPT ( addr n -- n ) "Receive a string of characters from the keyboard"
000722r 3               ; ## "accept"  auto  ANS core
000722r 3                       ; """https://forth-standard.org/standard/core/ACCEPT
000722r 3                       ; Receive a string of at most n1 characters, placing them at
000722r 3                       ; addr. Return the actual number of characters as n2. Characters
000722r 3                       ; are echoed as they are received. ACCEPT is called by REFILL in
000722r 3                       ; modern Forths.
000722r 3                       ; """
000722r 3               
000722r 3               xt_accept:
000722r 3  20 rr rr                     jsr underflow_2
000725r 3               
000725r 3                               ; Abort if we were asked to receive 0 chars
000725r 3  B5 00                        lda 0,x
000727r 3  15 01                        ora 1,x
000729r 3  D0 09                        bne @not_zero
00072Br 3               
00072Br 3  E8                           inx
00072Cr 3  E8                           inx
00072Dr 3  74 00                        stz 0,x
00072Fr 3  74 01                        stz 1,x
000731r 3               
000731r 3  4C rr rr                     jmp accept_done
000734r 3               
000734r 3               @not_zero:
000734r 3  B5 00                        lda 0,x         ; number of chars to get in tmp2 ...
000736r 3  85 rr                        sta tmp2
000738r 3  64 rr                        stz tmp2+1      ; ... but we only accept max 255 chars
00073Ar 3               
00073Ar 3  B5 02                        lda 2,x         ; address of buffer is NOS, to tmp1
00073Cr 3  85 rr                        sta tmp1
00073Er 3  B5 03                        lda 3,x
000740r 3  85 rr                        sta tmp1+1
000742r 3               
000742r 3  E8                           inx
000743r 3  E8                           inx
000744r 3               
000744r 3  A0 00                        ldy #0
000746r 3               
000746r 3                               ; Select the next history buffer. Clear bit 3 first (so overflow
000746r 3                               ; from bit 2 to 3 is OK)
000746r 3  A5 rr                        lda status
000748r 3  29 F7                        and #$f7
00074Ar 3               
00074Ar 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
00074Ar 3  1A                           inc
00074Br 3               
00074Br 3                               ; Set bit 3 for detecting if CTRL-n has been pressed the first
00074Br 3                               ; time. This bit will be cleared on the first CTRL-n or CTRL-p
00074Br 3                               ; received and won't be used to calculate the history buffer
00074Br 3                               ; offset.
00074Br 3  09 08                        ora #$08
00074Dr 3  85 rr                        sta status
00074Fr 3               
00074Fr 3               accept_loop:
00074Fr 3                               ; Out of the box, py65mon catches some CTRL sequences such as
00074Fr 3                               ; CTRL-c. We also don't need to check for CTRL-l because a
00074Fr 3                               ; vt100 terminal clears the screen automatically.
00074Fr 3               
00074Fr 3                               ; This is the internal version of KEY without all the mucking
00074Fr 3                               ; about with the Data Stack while still using the input vector
00074Fr 3  20 rr rr                     jsr key_a
000752r 3               
000752r 3                               ; We quit on both line feed and carriage return
000752r 3  C9 0A                        cmp #AscLF
000754r 3  F0 20                        beq @eol
000756r 3  C9 0D                        cmp #AscCR
000758r 3  F0 1C                        beq @eol
00075Ar 3               
00075Ar 3                               ; BACKSPACE and DEL do the same thing for the moment
00075Ar 3  C9 08                        cmp #AscBS
00075Cr 3  F0 22                        beq @backspace
00075Er 3  C9 7F                        cmp #AscDEL     ; (CTRL-h)
000760r 3  F0 1E                        beq @backspace
000762r 3               
000762r 3                               ; Check for CTRL-p and CTRL-n to recall input history
000762r 3  C9 10                        cmp #AscCP
000764r 3  F0 36                        beq @ctrl_p
000766r 3  C9 0E                        cmp #AscCN
000768r 3  F0 44                        beq @ctrl_n
00076Ar 3               
00076Ar 3                               ; That's enough for now. Save and echo character.
00076Ar 3  91 rr                        sta (tmp1),y
00076Cr 3  C8                           iny
00076Dr 3               
00076Dr 3                               ; EMIT_A sidesteps all the fooling around with the Data Stack
00076Dr 3  20 rr rr                     jsr emit_a
000770r 3               
000770r 3  C4 rr                        cpy tmp2        ; reached character limit?
000772r 3  D0 DB                        bne accept_loop       ; fall through if buffer limit reached
000774r 3  80 03                        bra @buffer_full
000776r 3               
000776r 3               @eol:
000776r 3  20 rr rr                     jsr xt_space    ; print final space
000779r 3               
000779r 3               @buffer_full:
000779r 3                               ; REFILL updates ciblen and toin, we don't need to do it here
000779r 3  94 00                        sty 0,x         ; Y contains number of chars accepted already
00077Br 3  74 01                        stz 1,x         ; we only accept 256 chars
00077Dr 3               
00077Dr 3  4C rr rr                     jmp accept_done
000780r 3               
000780r 3               @backspace:
000780r 3                               ; Handle backspace and delete kex, which currently do the same
000780r 3                               ; thing
000780r 3  C0 00                        cpy #0          ; buffer empty?
000782r 3  D0 06                        bne @1
000784r 3               
000784r 3  A9 07                        lda #AscBELL    ; complain and don't delete beyond the start of line
000786r 3  20 rr rr                     jsr emit_a
000789r 3  C8                           iny
00078Ar 3               @1:
00078Ar 3  88                           dey
00078Br 3  A9 08                        lda #AscBS      ; move back one
00078Dr 3  20 rr rr                     jsr emit_a
000790r 3  A9 20                        lda #AscSP      ; print a space (rubout)
000792r 3  20 rr rr                     jsr emit_a
000795r 3  A9 08                        lda #AscBS      ; move back over space
000797r 3  20 rr rr                     jsr emit_a
00079Ar 3               
00079Ar 3  80 B3                        bra accept_loop
00079Cr 3               
00079Cr 3               @ctrl_p:
00079Cr 3                               ; CTRL-p was pressed. Recall the previous input buffer.
00079Cr 3               
00079Cr 3                               ; Select the previous buffer
00079Cr 3  A5 rr                        lda status
00079Er 3               
00079Er 3                               ; Check for 0 (need to wrap back to 7)
00079Er 3  29 07                        and #7
0007A0r 3  D0 08                        bne @ctrl_p_dec
0007A2r 3               
0007A2r 3                               ; We need to wrap back to 7.
0007A2r 3  A5 rr                        lda status
0007A4r 3  09 07                        ora #7
0007A6r 3  85 rr                        sta status
0007A8r 3  80 11                        bra @recall_history
0007AAr 3               
0007AAr 3               @ctrl_p_dec:
0007AAr 3                               ; It's safe to decrement the buffer index directly.
0007AAr 3  C6 rr                        dec status
0007ACr 3  80 0D                        bra @recall_history
0007AEr 3               
0007AEr 3               @ctrl_n:
0007AEr 3                               ; CTRL-n was pressed. Recall the next input buffer. Select
0007AEr 3                               ; the next buffer Check bit 3. If it's set, this is the first
0007AEr 3                               ; time CTRL-n has been pressed and we should select the CURRENT
0007AEr 3                               ; history buffer.
0007AEr 3  A9 08                        lda #$8
0007B0r 3  24 rr                        bit status
0007B2r 3  D0 07                        bne @recall_history
0007B4r 3               
0007B4r 3                               ; This isn't the first time CTRL-n has been pressed, select the
0007B4r 3                               ; next history buffer. Clear bit 3 first (so overflow is OK)
0007B4r 3  A5 rr                        lda status
0007B6r 3  29 F7                        and #$f7
0007B8r 3               
0007B8r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
0007B8r 3  1A                           inc
0007B9r 3               
0007B9r 3                               ; Bit 3 (if it got set by going from buffer 7 to 0) will
0007B9r 3                               ; be cleared below.
0007B9r 3  85 rr                        sta status
0007BBr 3               
0007BBr 3                               ; Falls through to @recall_history
0007BBr 3               
0007BBr 3               @recall_history:
0007BBr 3                               ; Clear bit 3 (first time ctrl-n recall) bit in status
0007BBr 3  A9 08                        lda #%00001000
0007BDr 3  14 rr                        trb status
0007BFr 3               
0007BFr 3  20 rr rr                     jsr total_recall
0007C2r 3               
0007C2r 3                               ; tmp3 now has the address of the previous history buffer.
0007C2r 3                               ; First byte of buffer is length. Clear the line by sending
0007C2r 3                               ; CR, Y spaces, then CR.
0007C2r 3  A9 0D                        lda #AscCR
0007C4r 3  20 rr rr                     jsr emit_a
0007C7r 3               
0007C7r 3               input_clear:
0007C7r 3  C0 00                        cpy #0
0007C9r 3  F0 08                        beq input_cleared
0007CBr 3               
0007CBr 3  A9 20                        lda #AscSP
0007CDr 3  20 rr rr                     jsr emit_a
0007D0r 3  88                           dey
0007D1r 3  80 F4                        bra input_clear
0007D3r 3               
0007D3r 3               input_cleared:
0007D3r 3  A9 0D                        lda #AscCR
0007D5r 3  20 rr rr                     jsr emit_a
0007D8r 3               
0007D8r 3                               ; Save the history length byte into histinfo+1
0007D8r 3                               ; ldy #0        ; Y is already 0 by clearing the line.
0007D8r 3  B1 rr                        lda (tmp3),y
0007DAr 3  85 rr                        sta status+1
0007DCr 3               
0007DCr 3                               ; Increment the tmp3 pointer so we can use ,y addressing
0007DCr 3                               ; on both tmp1 (the input buffer) and tmp3 (the history
0007DCr 3                               ; buffer)
0007DCr 3  E6 rr                        inc tmp3
0007DEr 3  D0 02                        bne @2           ; Increment the upper byte on carry.
0007E0r 3  E6 rr                        inc tmp3+1
0007E2r 3               @2:
0007E2r 3                               ; Copy the history buffer into the input buffer,
0007E2r 3                               ; sending the characters to the output as we go.
0007E2r 3  A9 0D                        lda #AscCR
0007E4r 3  20 rr rr                     jsr emit_a
0007E7r 3               
0007E7r 3               @history_loop:
0007E7r 3                               ; See if we have reached the end of the history buffer.
0007E7r 3  C4 rr                        cpy status+1
0007E9r 3  D0 03                        bne @3
0007EBr 3  4C rr rr                     jmp accept_loop       ; Needs a long jump
0007EEr 3               @3:
0007EEr 3                               ; See if we have reached the end of the input buffer.
0007EEr 3                               ; (only comparing to lower byte as we currently limit
0007EEr 3                               ; to 255 characters max)
0007EEr 3  C4 rr                        cpy tmp2
0007F0r 3  F0 0A                        beq @hist_filled_buffer
0007F2r 3               
0007F2r 3                               ; Copy a character and echo.
0007F2r 3  B1 rr                        lda (tmp3),y
0007F4r 3  91 rr                        sta (tmp1),y
0007F6r 3  20 rr rr                     jsr emit_a
0007F9r 3               
0007F9r 3                               ; Move to the next character.
0007F9r 3  C8                           iny
0007FAr 3  80 EB                        bra @history_loop
0007FCr 3               
0007FCr 3               @hist_filled_buffer:
0007FCr 3                               ; We don't want a history recall to EOL our buffer,
0007FCr 3                               ; so back up one character and return to editing.
0007FCr 3  88                           dey
0007FDr 3  4C rr rr                     jmp accept_loop
000800r 3               accept_done:
000800r 3               @done:
000800r 3                               ; Copy the input buffer into the currently
000800r 3                               ; selected history buffer.
000800r 3  20 rr rr                     jsr total_recall
000803r 3  85 rr                        sta status+1
000805r 3               
000805r 3                               ; Also save it in the first buffer byte.
000805r 3  A0 00                        ldy #0
000807r 3  91 rr                        sta (tmp3),y
000809r 3               
000809r 3                               ; Move path the count to the data bytes
000809r 3  E6 rr                        inc tmp3
00080Br 3  D0 02                        bne @4           ; Increment the upper byte on carry.
00080Dr 3  E6 rr                        inc tmp3+1
00080Fr 3               @4:
00080Fr 3                               ; Copy the characters from the input buffer to the
00080Fr 3                               ; history buffer.
00080Fr 3               
00080Fr 3               @save_history_loop:
00080Fr 3  C4 rr                        cpy status+1
000811r 3  F0 07                        beq @save_history_done
000813r 3               
000813r 3  B1 rr                        lda (tmp1),y
000815r 3  91 rr                        sta (tmp3),y
000817r 3  C8                           iny
000818r 3  80 F5                        bra @save_history_loop
00081Ar 3               
00081Ar 3               @save_history_done:
00081Ar 3               z_accept:
00081Ar 3  60                           rts
00081Br 3               
00081Br 3               total_recall:
00081Br 3                       ; """Internal subroutine for ACCEPT that recalls history entry"""
00081Br 3               
00081Br 3                               ; Generate the address of the buffer in tmp3. Start with the
00081Br 3                               ; base address.
00081Br 3  A9 rr                        lda #<hist_buff
00081Dr 3  85 rr                        sta tmp3
00081Fr 3  A9 rr                        lda #>hist_buff
000821r 3  85 rr                        sta tmp3+1
000823r 3               
000823r 3                               ; This is a bit annoying as some bits go into each byte.
000823r 3                               ; .....xxx gets put into address like ......xx x.......
000823r 3  A5 rr                        lda status
000825r 3  6A                           ror
000826r 3  29 03                        and #3
000828r 3  18                           clc
000829r 3  65 rr                        adc tmp3+1
00082Br 3  85 rr                        sta tmp3+1
00082Dr 3               
00082Dr 3  A5 rr                        lda status
00082Fr 3  6A                           ror             ; Rotate through carry into msb.
000830r 3  6A                           ror
000831r 3  29 80                        and #$80
000833r 3  18                           clc
000834r 3  65 rr                        adc tmp3
000836r 3  85 rr                        sta tmp3
000838r 3  90 02                        bcc @1           ; Increment the upper byte on carry.
00083Ar 3  E6 rr                        inc tmp3+1
00083Cr 3               @1:
00083Cr 3                               ; Save the current length of the input buffer in
00083Cr 3                               ; histinfo+1 temporarily.  Reduce to 127 if larger.
00083Cr 3  98                           tya
00083Dr 3  C9 80                        cmp #$80
00083Fr 3  90 02                        bcc @2
000841r 3  A9 7F                        lda #$7F
000843r 3               @2:
000843r 3  60                           rts
000844r 3               
000844r 3               
000844r 3               
000844r 3               
000844r 3               
000844r 3               ; ## ACTION_OF ( "name" -- xt ) "Get named deferred word's xt"
000844r 3               ; ## "action-of"  auto  ANS core ext
000844r 3                       ; """http://forth-standard.org/standard/core/ACTION-OF"""
000844r 3               
000844r 3               xt_action_of:
000844r 3                               ; This is a state aware word with differet behavior
000844r 3                               ; when used while compiling vs interpreting.
000844r 3                               ; Check STATE
000844r 3  A5 rr                        lda state
000846r 3  05 rr                        ora state+1
000848r 3  F0 0C                        beq @interpreting
00084Ar 3               
00084Ar 3               @compiling:
00084Ar 3                               ; Run ['] to compile the xt of the next word
00084Ar 3                               ; as a literal.
00084Ar 3  20 rr rr                     jsr xt_bracket_tick
00084Dr 3               
00084Dr 3                               ; Postpone DEFER@ by compiling a JSR to it.
00084Dr 3  A0 rr                        ldy #>xt_defer_fetch
00084Fr 3  A9 rr                        lda #<xt_defer_fetch
000851r 3  20 rr rr                     jsr cmpl_subroutine
000854r 3  80 06                        bra @done
000856r 3               
000856r 3               @interpreting:
000856r 3  20 rr rr                     jsr xt_tick
000859r 3  20 rr rr                     jsr xt_defer_fetch
00085Cr 3               
00085Cr 3               @done:
00085Cr 3  60           z_action_of:           rts
00085Dr 3               
00085Dr 3               
00085Dr 3               
00085Dr 3               ; ## AGAIN ( addr -- ) "Code backwards branch to address left by BEGIN"
00085Dr 3               ; ## "again"  tested  ANS core ext
00085Dr 3                       ; """https://forth-standard.org/standard/core/AGAIN"""
00085Dr 3               
00085Dr 3               xt_again:
00085Dr 3  20 rr rr                     jsr underflow_1
000860r 3               
000860r 3                               ; Add the opcode for a JMP. We use JMP instead of BRA
000860r 3                               ; so we have the range and don't have to calculate the
000860r 3                               ; offset.
000860r 3  A0 00                        ldy #0
000862r 3  A9 4C                        lda #$4C        ; JMP
000864r 3  91 rr                        sta (cp),y
000866r 3  C8                           iny
000867r 3               
000867r 3  B5 00                        lda 0,x         ; LSB of address
000869r 3  91 rr                        sta (cp),y
00086Br 3  C8                           iny
00086Cr 3               
00086Cr 3  B5 01                        lda 1,x         ; MSB of address
00086Er 3  91 rr                        sta (cp),y
000870r 3  C8                           iny
000871r 3               
000871r 3                               ; Allot the space we just used
000871r 3  98                           tya
000872r 3  18                           clc
000873r 3  65 rr                        adc cp
000875r 3  85 rr                        sta cp
000877r 3  90 02                        bcc @done
000879r 3  E6 rr                        inc cp+1
00087Br 3               @done:
00087Br 3  E8                           inx
00087Cr 3  E8                           inx
00087Dr 3               
00087Dr 3  60           z_again:        rts
00087Er 3               
00087Er 3               
00087Er 3               
00087Er 3               ; ## ALIGN ( -- ) "Make sure CP is aligned on word size"
00087Er 3               ; ## "align"  auto  ANS core
00087Er 3                       ; """https://forth-standard.org/standard/core/ALIGN
00087Er 3                       ; On a 8-bit machine, this does nothing. ALIGNED uses this
00087Er 3                       ; routine as well, and also does nothing
00087Er 3                       ; """
00087Er 3               
00087Er 3               ; ## ALIGNED ( addr -- addr ) "Return the first aligned address"
00087Er 3               ; ## "aligned"  auto  ANS core
00087Er 3                       ; """https://forth-standard.org/standard/core/ALIGNED"""
00087Er 3               
00087Er 3               xt_align:
00087Er 3               xt_aligned:
00087Er 3               z_align:
00087Er 3  60           z_aligned:      rts             ; stripped out during native compile
00087Fr 3               
00087Fr 3               
00087Fr 3               
00087Fr 3               ; ## ALLOT ( n -- ) "Reserve or release memory"
00087Fr 3               ; ## "allot"  auto  ANS core
00087Fr 3                       ; """https://forth-standard.org/standard/core/ALLOT
00087Fr 3                       ; Reserve a certain number of bytes (not cells) or release them.
00087Fr 3                       ; If n = 0, do nothing. If n is negative, release n bytes, but only
00087Fr 3                       ; to the beginning of the Dictionary. If n is positive (the most
00087Fr 3                       ; common case), reserve n bytes, but not past the end of the
00087Fr 3                       ; Dictionary. See http://forth-standard.org/standard/core/ALLOT
00087Fr 3                       ; """
00087Fr 3               
00087Fr 3               xt_allot:
00087Fr 3  20 rr rr                     jsr underflow_1
000882r 3               
000882r 3                               ; Releasing memory is going to be a very rare operation,
000882r 3                               ; so we check for it at the beginning and try to make
000882r 3                               ; the most common case as fast as possible
000882r 3  B5 01                        lda 1,x
000884r 3  30 22                        bmi @release
000886r 3               
000886r 3                               ; Common case: We are reserving memory, not releasing it
000886r 3  18                           clc
000887r 3  A5 rr                        lda cp
000889r 3  75 00                        adc 0,x
00088Br 3  85 rr                        sta cp
00088Dr 3               
00088Dr 3  A5 rr                        lda cp+1
00088Fr 3  75 01                        adc 1,x
000891r 3  85 rr                        sta cp+1
000893r 3               
000893r 3                               ; Wait, did we just grant more space than we have? This is
000893r 3                               ; a check we only do here, not for other situations like cmpl_a
000893r 3                               ; where smaller amounts are reserved.
000893r 3  A0 FF                        ldy #<cp_end
000895r 3  C4 rr                        cpy cp
000897r 3  A9 7F                        lda #>cp_end
000899r 3  E5 rr                        sbc cp+1
00089Br 3  B0 48                        bcs @done               ; we're fine.
00089Dr 3               
00089Dr 3                               ; Oops, that was too much, we're beyond the end of
00089Dr 3                               ; legal Dictionary RAM. Reduce to max memory and report
00089Dr 3                               ; an error
00089Dr 3  84 rr                        sty cp                  ; still #<cp_end
00089Fr 3  A9 7F                        lda #>cp_end
0008A1r 3  85 rr                        sta cp+1
0008A3r 3               
0008A3r 3  A9 00                        lda #err_allot
0008A5r 3  4C rr rr                     jmp error
0008A8r 3               
0008A8r 3               @release:
0008A8r 3                  		; The ANS standard doesn't really say what to do if too much
0008A8r 3                               ; memory is freed ("negatively alloted"). In fact, there isn't
0008A8r 3                               ; even an official test. Gforth is little help either. The good
0008A8r 3                               ; news is, this is going to be a rare case. We want to use as
0008A8r 3                               ; few bytes as possible.
0008A8r 3               
0008A8r 3                               ; What we do is let the user free anything up to the beginning
0008A8r 3                               ; of the RAM area assigned to the Dicionary (CP0), but at
0008A8r 3                               ; their own risk. This means that the Dictionary pointer DP
0008A8r 3                               ; might end up pointing to garbage. However, an attempt to
0008A8r 3                               ; free more than RAM than CP0 will lead to CP being set to CP0,
0008A8r 3                               ; the DP pointing to the last word in RAM (should be DROP) and
0008A8r 3                               ; an error message.
0008A8r 3               
0008A8r 3                               ; We arrive here with ( n ) which is negative. First step,
0008A8r 3                               ; subtract the number TOS from the CP for a new CP
0008A8r 3  CA                           dex
0008A9r 3  CA                           dex
0008AAr 3  A5 rr                        lda cp
0008ACr 3  95 00                        sta 0,x
0008AEr 3  A5 rr                        lda cp+1
0008B0r 3  95 01                        sta 1,x
0008B2r 3               
0008B2r 3  20 rr rr                     jsr xt_plus                     ; new CP is now TOS
0008B5r 3               
0008B5r 3                               ; Second step, see if we've gone too far. We compare the new
0008B5r 3                               ; CP on TOS (which, if we've really screwed up, might be
0008B5r 3                               ; negative) with CP0. This is a signed comparison
0008B5r 3  CA                           dex
0008B6r 3  CA                           dex                             ; new CP now NOS
0008B7r 3  A9 rr                        lda #<cp0
0008B9r 3  95 00                        sta 0,x
0008BBr 3  A9 rr                        lda #>cp0
0008BDr 3  95 01                        sta 1,x                         ; CP0 is TOS
0008BFr 3               
0008BFr 3  20 rr rr                     jsr compare_16bit               ; still ( CP CP0 )
0008C2r 3               
0008C2r 3                               ; If CP (NOS) is smaller than CP0 (TOS), we're in trouble.
0008C2r 3                               ; This means we want Z=1 or N=1
0008C2r 3  F0 17                        beq @nega_done
0008C4r 3  30 15                        bmi @nega_done
0008C6r 3               
0008C6r 3                               ; Yep, we're in trouble. Set CP to CP0, set DP to the first
0008C6r 3                               ; word in ROM (should be DROP), and abort with an error
0008C6r 3  A9 rr                        lda #<cp0
0008C8r 3  85 rr                        sta cp
0008CAr 3  A9 rr                        lda #>cp0
0008CCr 3  85 rr                        sta cp+1
0008CEr 3               
0008CEr 3  A9 rr                        lda #<dictionary_start
0008D0r 3  85 rr                        sta dp
0008D2r 3  A9 rr                        lda #>dictionary_start
0008D4r 3  85 rr                        sta dp+1
0008D6r 3               
0008D6r 3  A9 0A                        lda #err_negallot
0008D8r 3  4C rr rr                     jmp error
0008DBr 3               
0008DBr 3               @nega_done:
0008DBr 3                               ; Save new CP, which is NOS
0008DBr 3  B5 02                        lda 2,x
0008DDr 3  85 rr                        sta cp
0008DFr 3  B5 03                        lda 3,x
0008E1r 3  85 rr                        sta cp+1
0008E3r 3               
0008E3r 3  E8                           inx
0008E4r 3  E8                           inx                     ; drop through to @done
0008E5r 3               @done:
0008E5r 3  E8                           inx
0008E6r 3  E8                           inx
0008E7r 3               z_allot:
0008E7r 3  60                           rts
0008E8r 3               
0008E8r 3               
0008E8r 3               
0008E8r 3               ; ## ALLOW_NATIVE ( -- ) "Flag last word to allow native compiling"
0008E8r 3               ; ## "allow-native"  auto  Tali Forth
0008E8r 3               xt_allow_native:
0008E8r 3  20 rr rr                     jsr current_to_dp
0008EBr 3  A0 01                        ldy #1          ; offset for status byte
0008EDr 3  B1 rr                        lda (dp),y
0008EFr 3  29 F5                        and #$ff-NN-AN  ; AN and NN flag is clear.
0008F1r 3  91 rr                        sta (dp),y
0008F3r 3               z_allow_native:
0008F3r 3  60                           rts
0008F4r 3               
0008F4r 3               
0008F4r 3               ; ## ALSO ( -- ) "Make room in the search order for another wordlist"
0008F4r 3               ; ## "also"  auto  ANS search ext
0008F4r 3                       ; """http://forth-standard.org/standard/search/ALSO"""
0008F4r 3               xt_also:
0008F4r 3  20 rr rr                     jsr xt_get_order
0008F7r 3  20 rr rr                     jsr xt_over
0008FAr 3  20 rr rr                     jsr xt_swap
0008FDr 3  20 rr rr                     jsr xt_one_plus
000900r 3  20 rr rr                     jsr xt_set_order
000903r 3               
000903r 3  60           z_also:         rts
000904r 3               
000904r 3               
000904r 3               ; ## ALWAYS_NATIVE ( -- ) "Flag last word as always natively compiled"
000904r 3               ; ## "always-native"  auto  Tali Forth
000904r 3               xt_always_native:
000904r 3  20 rr rr                     jsr current_to_dp
000907r 3  A0 01                        ldy #1          ; offset for status byte
000909r 3  B1 rr                        lda (dp),y
00090Br 3  09 02                        ora #AN         ; Make sure AN flag is set
00090Dr 3  29 F7                        and #$ff-NN     ; and NN flag is clear.
00090Fr 3  91 rr                        sta (dp),y
000911r 3               z_always_native:
000911r 3  60                           rts
000912r 3               
000912r 3               
000912r 3               ; ## AND ( n n -- n ) "Logically AND TOS and NOS"
000912r 3               ; ## "and"  auto  ANS core
000912r 3                       ; """https://forth-standard.org/standard/core/AND"""
000912r 3               xt_and:
000912r 3  20 rr rr                     jsr underflow_2
000915r 3               
000915r 3  B5 00                        lda 0,x
000917r 3  35 02                        and 2,x
000919r 3  95 02                        sta 2,x
00091Br 3               
00091Br 3  B5 01                        lda 1,x
00091Dr 3  35 03                        and 3,x
00091Fr 3  95 03                        sta 3,x
000921r 3               
000921r 3  E8                           inx
000922r 3  E8                           inx
000923r 3               
000923r 3  60           z_and:          rts
000924r 3               
000924r 3               
000924r 3               ; ## ASSEMBLER_WORDLIST ( -- u ) "WID for the Assembler wordlist"
000924r 3               ; ## "assembler-wordlist"  tested  Tali Assembler
000924r 3                       ; """ Commonly used like `assembler-wordlist >order` to add the
000924r 3                       ; assembler words to the search order so they can be used.
000924r 3                       ; See the tutorial on Wordlists and the Search Order for
000924r 3                       ; more information.
000924r 3                       ;
000924r 3                       ; This is a dummy entry, the code is shared with TWO
000924r 3                       ; """
000924r 3               
000924r 3               
000924r 3               ; ## AT_XY ( n m -- ) "Move cursor to position given"
000924r 3               ; ## "at-xy"  tested  ANS facility
000924r 3                       ; """https://forth-standard.org/standard/facility/AT-XY
000924r 3                       ; On an ANSI compatible terminal, place cursor at row n colum m.
000924r 3                       ; ANSI code is ESC[<n>;<m>H
000924r 3                       ;
000924r 3                       ; Do not use U. to print the numbers because the
000924r 3                       ; trailing space will not work with xterm
000924r 3                       ; """
000924r 3               xt_at_xy:
000924r 3  20 rr rr                     jsr underflow_2
000927r 3               
000927r 3  A9 1B                        lda #AscESC
000929r 3  20 rr rr                     jsr emit_a
00092Cr 3  A9 5B                        lda #$5B        ; ASCII for "["
00092Er 3  20 rr rr                     jsr emit_a
000931r 3  20 rr rr                     jsr print_u
000934r 3  A9 3B                        lda #$3B        ; ASCII for ";"
000936r 3  20 rr rr                     jsr emit_a
000939r 3  20 rr rr                     jsr print_u
00093Cr 3  A9 48                        lda #'H'
00093Er 3  20 rr rr                     jsr emit_a
000941r 3               
000941r 3  60           z_at_xy:        rts
000942r 3               
000942r 3               
000942r 3               ; ## BACKSLASH ( -- ) "Ignore rest of line"
000942r 3               ; ## "\"  auto  ANS core ext
000942r 3                       ; """https://forth-standard.org/standard/core/bs"""
000942r 3               xt_backslash:
000942r 3  A5 rr                        lda ciblen
000944r 3  85 rr                        sta toin
000946r 3  A5 rr                        lda ciblen+1
000948r 3  85 rr                        sta toin+1
00094Ar 3               
00094Ar 3  60           z_backslash:    rts
00094Br 3               
00094Br 3               
00094Br 3               ; ## BASE ( -- addr ) "Push address of radix base to stack"
00094Br 3               ; ## "base"  auto  ANS core
00094Br 3                       ; """https://forth-standard.org/standard/core/BASE
00094Br 3                       ; The ANS Forth standard sees the base up to 36, so we can cheat and
00094Br 3                       ; ingore the MSB
00094Br 3                       ; """
00094Br 3               xt_base:
00094Br 3  CA                           dex
00094Cr 3  CA                           dex
00094Dr 3  A9 rr                        lda #<base
00094Fr 3  95 00                        sta 0,x         ; LSB
000951r 3  74 01                        stz 1,x         ; MSB is always 0
000953r 3               
000953r 3  60           z_base:         rts
000954r 3               
000954r 3               
000954r 3               ; ## BEGIN ( -- addr ) "Mark entry point for loop"
000954r 3               ; ## "begin"  auto  ANS core
000954r 3                       ; """https://forth-standard.org/standard/core/BEGIN
000954r 3                       ;
000954r 3                       ; This is just an immediate version of here which could just
000954r 3                       ; as well be coded in Forth as
000954r 3                       ;       : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
000954r 3                       ; Since this is a compiling word, we don't care that much about
000954r 3                       ; about speed
000954r 3                       ; """
000954r 3               
000954r 3               xt_begin:
000954r 3  20 rr rr                     jsr xt_here
000957r 3  60           z_begin:        rts
000958r 3               
000958r 3               
000958r 3               
000958r 3               ; ## BELL ( -- ) "Emit ASCII BELL"
000958r 3               ; ## "bell"  tested  Tali Forth
000958r 3               xt_bell:
000958r 3  A9 07                        lda #7          ; ASCII value for BELl
00095Ar 3  20 rr rr                     jsr emit_a
00095Dr 3               
00095Dr 3  60           z_bell:         rts
00095Er 3               
00095Er 3               
00095Er 3               ; ## BL ( -- c ) "Push ASCII value of SPACE to stack"
00095Er 3               ; ## "bl"  auto  ANS core
00095Er 3                       ; """https://forth-standard.org/standard/core/BL"""
00095Er 3               
00095Er 3               xt_bl:
00095Er 3  CA                           dex
00095Fr 3  CA                           dex
000960r 3  A9 20                        lda #AscSP
000962r 3  95 00                        sta 0,x
000964r 3  74 01                        stz 1,x
000966r 3               
000966r 3  60           z_bl:           rts
000967r 3               
000967r 3               
000967r 3               ; ## BLK ( -- addr ) "Push address of block being interpreted"
000967r 3               ; ## "block"  auto  ANS block
000967r 3                       ; """https://forth-standard.org/standard/block/BLK"""
000967r 3               xt_blk:
000967r 3                               ; BLK is at UP + blk_offset
000967r 3  CA                           dex
000968r 3  CA                           dex
000969r 3  18                           clc
00096Ar 3  A5 rr                        lda up
00096Cr 3  69 00                        adc #blk_offset ; Add offset
00096Er 3  95 00                        sta 0,x
000970r 3  A5 rr                        lda up+1
000972r 3  69 00                        adc #0          ; Adding carry
000974r 3  95 01                        sta 1,x
000976r 3               
000976r 3  60           z_blk:          rts
000977r 3               
000977r 3               
000977r 3               ; ## BLKBUFFER ( -- addr ) "Push address of block buffer"
000977r 3               ; ## "blkbuffer"  auto  Tali block
000977r 3               xt_blkbuffer:
000977r 3                               ; blkbuffer address is at UP + blkbuffer_offset.
000977r 3                               ; Unlike some of the other user variables, we actually
000977r 3                               ; want to push the address stored here, which will
000977r 3                               ; point to somewhere outside of the user variables.
000977r 3  CA                           dex
000978r 3  CA                           dex
000979r 3                               ; Put the address on the stack.
000979r 3  A0 28                        ldy #blkbuffer_offset
00097Br 3  B1 rr                        lda (up),y
00097Dr 3  95 00                        sta 0,x
00097Fr 3  C8                           iny             ; Move along to the next byte
000980r 3  B1 rr                        lda (up),y
000982r 3  95 01                        sta 1,x
000984r 3               
000984r 3  60           z_blkbuffer:    rts
000985r 3               
000985r 3               
000985r 3               ; ## BLOCK ( u -- a-addr ) "Fetch a block into a buffer"
000985r 3               ; ## "block"  auto  ANS block
000985r 3                       ; """https://forth-standard.org/standard/block/BLOCK"""
000985r 3               
000985r 3               xt_block:
000985r 3               
000985r 3                               ; See if the block requested is the same as the one we
000985r 3                               ; currently have in the buffer. Check the LSB.
000985r 3  A0 2A                        ldy #buffblocknum_offset
000987r 3  B1 rr                        lda (up),y
000989r 3  D5 00                        cmp 0,x
00098Br 3  D0 0F                        bne @not_in_buffer
00098Dr 3               
00098Dr 3                               ; Check the MSB.
00098Dr 3  C8                           iny
00098Er 3  B1 rr                        lda (up),y
000990r 3  D5 01                        cmp 1,x
000992r 3  D0 08                        bne @not_in_buffer
000994r 3               
000994r 3                               ; The block is in the buffer. See if the buffer is in use.
000994r 3  A0 2C                        ldy #buffstatus_offset
000996r 3  B1 rr                        lda (up),y
000998r 3  29 01                        and #1          ; Check the in-use flag (bit 0)
00099Ar 3  D0 30                        bne @done       ; It's already in the buffer and in use.
00099Cr 3                                               ; @done will replace the block# with the
00099Cr 3                                               ; buffer address.
00099Cr 3               @not_in_buffer:
00099Cr 3                               ; Check the buffer status
00099Cr 3  A0 2C                        ldy #buffstatus_offset
00099Er 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
0009A0r 3  C9 03                        cmp #3          ; LSB is needed.
0009A2r 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
0009A4r 3               
0009A4r 3                               ; We need to save the block.
0009A4r 3  20 rr rr                     jsr xt_blkbuffer
0009A7r 3  20 rr rr                     jsr xt_buffblocknum
0009AAr 3  20 rr rr                     jsr xt_fetch
0009ADr 3  20 rr rr                     jsr xt_block_write
0009B0r 3               
0009B0r 3               @buffer_available:
0009B0r 3                               ; Save the block number.
0009B0r 3  A0 2A                        ldy #buffblocknum_offset
0009B2r 3  B5 00                        lda 0,x
0009B4r 3  91 rr                        sta (up),y
0009B6r 3  C8                           iny
0009B7r 3  B5 01                        lda 1,x
0009B9r 3  91 rr                        sta (up),y
0009BBr 3               
0009BBr 3                               ; Get the requested block.
0009BBr 3  20 rr rr                     jsr xt_blkbuffer
0009BEr 3  20 rr rr                     jsr xt_swap
0009C1r 3  20 rr rr                     jsr xt_block_read
0009C4r 3               
0009C4r 3                               ; Mark the buffer as clean and in-use.
0009C4r 3  A9 01                        lda #1
0009C6r 3  A0 2C                        ldy #buffstatus_offset
0009C8r 3  91 rr                        sta (up),y
0009CAr 3               
0009CAr 3                               ; Make room on the stack for the return address.
0009CAr 3  CA                           dex
0009CBr 3  CA                           dex
0009CCr 3               
0009CCr 3               @done:
0009CCr 3                               ; It's in the buffer. Return the buffer address.
0009CCr 3  A0 28                        ldy #blkbuffer_offset
0009CEr 3  B1 rr                        lda (up),y
0009D0r 3  95 00                        sta 0,x
0009D2r 3  C8                           iny
0009D3r 3  B1 rr                        lda (up),y
0009D5r 3  95 01                        sta 1,x
0009D7r 3               
0009D7r 3  60           z_block:        rts
0009D8r 3               
0009D8r 3               
0009D8r 3               
0009D8r 3               ; ## BLOCK_RAMDRIVE_INIT ( u -- ) "Create a ramdrive for blocks"
0009D8r 3               ; ## "block-ramdrive-init"  auto  Tali block
0009D8r 3                       ; """Create a RAM drive, with the given number of
0009D8r 3                       ; blocks, in the dictionary along with setting up the block words to
0009D8r 3                       ; use it.  The read/write routines do not provide bounds checking.
0009D8r 3                       ; Expected use: `4 block-ramdrive-init` ( to create blocks 0-3 )
0009D8r 3                       ; """
0009D8r 3               
0009D8r 3               xt_block_ramdrive_init:
0009D8r 3  20 rr rr                     jsr underflow_1
0009DBr 3               
0009DBr 3                               ; Store the string to run here as a string literal.
0009DBr 3                               ; See SLITERAL for the format information. This way, we
0009DBr 3                               ; don't have the words defined below in the Dictionary until
0009DBr 3                               ; we really use them.
0009DBr 3  4C rr rr                     jmp @after_ramdrive_code
0009DEr 3               
0009DEr 3               @ramdrive_code:
0009DEr 3  62 61 73 65          .byte "base @ swap decimal"
0009E2r 3  20 40 20 73  
0009E6r 3  77 61 70 20  
0009F1r 3  20 31 30 32          .byte " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
0009F5r 3  34 20 2A     
0009F8r 3  20 64 75 70          .byte " dup"    ; ( Save a copy for formatting it at the end )
0009FCr 3  20 62 75 66          .byte " buffer: ramdrive" ; ( Create ramdrive )
000A00r 3  66 65 72 3A  
000A04r 3  20 72 61 6D  
000A0Dr 3                       ; ( These routines just copy between the buffer and the ramdrive blocks )
000A0Dr 3  20 3A 20 62          .byte " : block-read-ramdrive"  ; ( addr u -- )
000A11r 3  6C 6F 63 6B  
000A15r 3  2D 72 65 61  
000A23r 3  20 72 61 6D          .byte " ramdrive swap 1024 * + swap 1024 move ;"
000A27r 3  64 72 69 76  
000A2Br 3  65 20 73 77  
000A4Br 3  20 3A 20 62          .byte " : block-write-ramdrive" ; ( addr u -- )
000A4Fr 3  6C 6F 63 6B  
000A53r 3  2D 77 72 69  
000A62r 3  20 72 61 6D          .byte " ramdrive swap 1024 * + 1024 move ;"
000A66r 3  64 72 69 76  
000A6Ar 3  65 20 73 77  
000A85r 3  20 27 20 62          .byte " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
000A89r 3  6C 6F 63 6B  
000A8Dr 3  2D 72 65 61  
000AAFr 3  20 27 20 62          .byte " ' block-write-ramdrive block-write-vector !"
000AB3r 3  6C 6F 63 6B  
000AB7r 3  2D 77 72 69  
000ADBr 3  20 72 61 6D          .byte " ramdrive swap blank base !"
000ADFr 3  64 72 69 76  
000AE3r 3  65 20 73 77  
000AF6r 3               
000AF6r 3               @after_ramdrive_code:
000AF6r 3  20 rr rr                     jsr sliteral_runtime
000AF9r 3               
000AF9r 3  rr rr 18 01  .word @ramdrive_code, @after_ramdrive_code-@ramdrive_code
000AFDr 3               
000AFDr 3                               ; The address and length of the ramdrive code is now on the
000AFDr 3                               ; stack. Call EVALUATE to run it.
000AFDr 3  20 rr rr                     jsr xt_evaluate
000B00r 3               
000B00r 3               z_block_ramdrive_init:
000B00r 3  60                           rts
000B01r 3               
000B01r 3               
000B01r 3               
000B01r 3               ; ## BLOCK_READ ( addr u -- ) "Read a block from storage (deferred word)"
000B01r 3               ; ## "block-read"  auto  Tali block
000B01r 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000B01r 3                       ; with their own version to read a block from storage.
000B01r 3                       ; The stack parameters are ( buffer_address block# -- ).
000B01r 3                       ; """
000B01r 3               xt_block_read:
000B01r 3                               ; Execute the BLOCK-READ-VECTOR
000B01r 3  A0 2E                        ldy #blockread_offset
000B03r 3  B1 rr                        lda (up),y
000B05r 3  85 rr                        sta tmp1
000B07r 3  C8                           iny
000B08r 3  B1 rr                        lda (up),y
000B0Ar 3  85 rr                        sta tmp1+1
000B0Cr 3               
000B0Cr 3  6C rr rr                     jmp (tmp1)
000B0Fr 3               
000B0Fr 3               z_block_read:   ; No RTS needed
000B0Fr 3               
000B0Fr 3               
000B0Fr 3               ; ## BLOCK_READ_VECTOR ( -- addr ) "Address of the block-read vector"
000B0Fr 3               ; ## "block-read-vector"  auto  Tali block
000B0Fr 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000B0Fr 3                       ; with their own version to read a block from storage.
000B0Fr 3                       ; This word gives the address of the vector so it can be replaced.
000B0Fr 3                       ; """
000B0Fr 3               xt_block_read_vector:
000B0Fr 3                               ; Get the BLOCK-READ-VECTOR address
000B0Fr 3  CA                           dex
000B10r 3  CA                           dex
000B11r 3  18                           clc
000B12r 3  A5 rr                        lda up
000B14r 3  69 2E                        adc #blockread_offset
000B16r 3  95 00                        sta 0,x
000B18r 3  A5 rr                        lda up+1
000B1Ar 3  69 00                        adc #0          ; Add carry
000B1Cr 3  95 01                        sta 1,x
000B1Er 3               
000B1Er 3               z_block_read_vector:
000B1Er 3  60                           rts
000B1Fr 3               
000B1Fr 3               
000B1Fr 3               ; This is the default error message the vectored words BLOCK-READ and
000B1Fr 3               ; BLOCK-WRITE start with. This word is not included in the dictionary.
000B1Fr 3               xt_block_word_error:
000B1Fr 3  A9 0C                        lda #err_blockwords
000B21r 3  4C rr rr                     jmp error       ; no RTS needed
000B24r 3               z_block_word_error:
000B24r 3               
000B24r 3               ; ## BLOCK_WRITE ( addr u -- ) "Write a block to storage (deferred word)"
000B24r 3               ; ## "block-write"  auto  Tali block
000B24r 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000B24r 3                       ; with their own version to write a block to storage.
000B24r 3                       ; The stack parameters are ( buffer_address block# -- ).
000B24r 3                       ; """
000B24r 3               xt_block_write:
000B24r 3                               ; Execute the BLOCK-READ-VECTOR
000B24r 3  A0 30                        ldy #blockwrite_offset
000B26r 3  B1 rr                        lda (up),y
000B28r 3  85 rr                        sta tmp1
000B2Ar 3  C8                           iny
000B2Br 3  B1 rr                        lda (up),y
000B2Dr 3  85 rr                        sta tmp1+1
000B2Fr 3  6C rr rr                     jmp (tmp1)
000B32r 3               
000B32r 3               z_block_write:  ; No RTS needed
000B32r 3               
000B32r 3               
000B32r 3               ; ## BLOCK_WRITE_VECTOR ( -- addr ) "Address of the block-write vector"
000B32r 3               ; ## "block-write-vector"  auto  Tali block
000B32r 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000B32r 3                       ; with their own version to write a block to storage.
000B32r 3                       ; This word gives the address of the vector so it can be replaced.
000B32r 3                       ; """
000B32r 3               xt_block_write_vector:
000B32r 3                               ; Get the BLOCK-WRITE-VECTOR address
000B32r 3  CA                           dex
000B33r 3  CA                           dex
000B34r 3  18                           clc
000B35r 3  A5 rr                        lda up
000B37r 3  69 30                        adc #blockwrite_offset
000B39r 3  95 00                        sta 0,x
000B3Br 3  A5 rr                        lda up+1
000B3Dr 3  69 00                        adc #0          ; Add carry
000B3Fr 3  95 01                        sta 1,x
000B41r 3               
000B41r 3               z_block_write_vector:
000B41r 3  60                           rts
000B42r 3               
000B42r 3               
000B42r 3               ; ## BOUNDS ( addr u -- addr+u addr ) "Prepare address for looping"
000B42r 3               ; ## "bounds"  auto  Gforth
000B42r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Memory-Blocks.html
000B42r 3                       ; Given a string, return the correct Data Stack parameters for
000B42r 3                       ; a DO/LOOP loop over its characters. This is realized as
000B42r 3                       ; OVER + SWAP in Forth, but we do it a lot faster in assembler
000B42r 3                       ; """
000B42r 3               xt_bounds:
000B42r 3  20 rr rr                     jsr underflow_2
000B45r 3               
000B45r 3  18                           clc
000B46r 3  B5 00                        lda 0,x                 ; LSB u
000B48r 3  B4 02                        ldy 2,x                 ; LSB addr
000B4Ar 3  75 02                        adc 2,x
000B4Cr 3  95 02                        sta 2,x                 ; LSB addr+u
000B4Er 3  94 00                        sty 0,x
000B50r 3               
000B50r 3  B5 01                        lda 1,x                 ; MSB u
000B52r 3  B4 03                        ldy 3,x                 ; MSB addr
000B54r 3  75 03                        adc 3,x
000B56r 3  95 03                        sta 3,x                 ; MSB addr+u
000B58r 3  94 01                        sty 1,x
000B5Ar 3               
000B5Ar 3  60           z_bounds:       rts
000B5Br 3               
000B5Br 3               
000B5Br 3               ; ## BRACKET_CHAR ( "c" -- ) "Compile character"
000B5Br 3               ; ## "[char]"  auto  ANS core
000B5Br 3                       ; """https://forth-standard.org/standard/core/BracketCHAR
000B5Br 3                       ; Compile the ASCII value of a character as a literal. This is an
000B5Br 3                       ; immediate, compile-only word.
000B5Br 3                       ;
000B5Br 3                       ; A definition given in
000B5Br 3                       ; http://forth-standard.org/standard/implement is
000B5Br 3                       ; : [CHAR]  CHAR POSTPONE LITERAL ; IMMEDIATE
000B5Br 3                       ; """
000B5Br 3               xt_bracket_char:
000B5Br 3  20 rr rr                     jsr xt_char
000B5Er 3  20 rr rr                     jsr xt_literal
000B61r 3  60           z_bracket_char: rts
000B62r 3               
000B62r 3               
000B62r 3               ; ## BRACKET_TICK ( -- ) "Store xt of following word during compilation"
000B62r 3               ; ## "[']"  auto  ANS core
000B62r 3                       ; """https://forth-standard.org/standard/core/BracketTick"""
000B62r 3               xt_bracket_tick:
000B62r 3  20 rr rr                     jsr xt_tick
000B65r 3  20 rr rr                     jsr xt_literal
000B68r 3  60           z_bracket_tick: rts
000B69r 3               
000B69r 3               
000B69r 3               ; ## BUFFBLOCKNUM ( -- addr ) "Push address of variable holding block in buffer"
000B69r 3               ; ## "buffblocknum"  auto  Tali block
000B69r 3               xt_buffblocknum:
000B69r 3                               ; BUFFBLOCKNUM is at UP + buffblocknum_offset
000B69r 3  CA                           dex
000B6Ar 3  CA                           dex
000B6Br 3  18                           clc
000B6Cr 3  A5 rr                        lda up
000B6Er 3  69 2A                        adc #buffblocknum_offset        ; Add offset
000B70r 3  95 00                        sta 0,x
000B72r 3  A5 rr                        lda up+1
000B74r 3  69 00                        adc #0                          ; Adding carry
000B76r 3  95 01                        sta 1,x
000B78r 3               
000B78r 3  60           z_buffblocknum: rts
000B79r 3               
000B79r 3               
000B79r 3               ; ## BUFFER ( u -- a-addr ) "Get a buffer for a block"
000B79r 3               ; ## "buffer"  auto  ANS block
000B79r 3                       ; """https://forth-standard.org/standard/block/BUFFER"""
000B79r 3               
000B79r 3               xt_buffer:
000B79r 3                               ; Check the buffer status
000B79r 3  A0 2C                        ldy #buffstatus_offset
000B7Br 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
000B7Dr 3  C9 03                        cmp #3          ; LSB is needed.
000B7Fr 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
000B81r 3               
000B81r 3                               ; We need to save the block.
000B81r 3  20 rr rr                     jsr xt_blkbuffer
000B84r 3  20 rr rr                     jsr xt_buffblocknum
000B87r 3  20 rr rr                     jsr xt_fetch
000B8Ar 3  20 rr rr                     jsr xt_block_write
000B8Dr 3               
000B8Dr 3               @buffer_available:
000B8Dr 3                               ; Save the block number.
000B8Dr 3  A0 2A                        ldy #buffblocknum_offset
000B8Fr 3  B5 00                        lda 0,x
000B91r 3  91 rr                        sta (up),y
000B93r 3  C8                           iny
000B94r 3  B5 01                        lda 1,x
000B96r 3  91 rr                        sta (up),y
000B98r 3               
000B98r 3                               ; Mark the buffer as clean and in-use.
000B98r 3  A9 01                        lda #1
000B9Ar 3  A0 2C                        ldy #buffstatus_offset
000B9Cr 3  91 rr                        sta (up),y
000B9Er 3               
000B9Er 3               @done:
000B9Er 3                               ; Return the buffer address.
000B9Er 3  A0 28                        ldy #blkbuffer_offset
000BA0r 3  B1 rr                        lda (up),y
000BA2r 3  95 00                        sta 0,x
000BA4r 3  C8                           iny
000BA5r 3  B1 rr                        lda (up),y
000BA7r 3  95 01                        sta 1,x
000BA9r 3               
000BA9r 3  60           z_buffer:       rts
000BAAr 3               
000BAAr 3               
000BAAr 3               
000BAAr 3               ; ## BUFFER_COLON ( u "<name>" -- ; -- addr ) "Create an uninitialized buffer"
000BAAr 3               ; ## "buffer:"  auto  ANS core ext
000BAAr 3                               ; """https://forth-standard.org/standard/core/BUFFERColon
000BAAr 3                               ; Create a buffer of size u that puts its address on the stack
000BAAr 3                               ; when its name is used.
000BAAr 3                               ; """
000BAAr 3               xt_buffer_colon:
000BAAr 3  20 rr rr                     jsr xt_create
000BADr 3  20 rr rr                     jsr xt_allot
000BB0r 3  60           z_buffer_colon: rts
000BB1r 3               
000BB1r 3               
000BB1r 3               ; ## BUFFSTATUS ( -- addr ) "Push address of variable holding buffer status"
000BB1r 3               ; ## "buffstatus"  auto  Tali block
000BB1r 3               xt_buffstatus:
000BB1r 3                               ; BUFFSTATUS is at UP + buffstatus_offset
000BB1r 3  CA                           dex
000BB2r 3  CA                           dex
000BB3r 3  18                           clc
000BB4r 3  A5 rr                        lda up
000BB6r 3  69 2C                        adc #buffstatus_offset  ; Add offset
000BB8r 3  95 00                        sta 0,x
000BBAr 3  A5 rr                        lda up+1
000BBCr 3  69 00                        adc #0                  ; Adding carry
000BBEr 3  95 01                        sta 1,x
000BC0r 3               
000BC0r 3  60           z_buffstatus:   rts
000BC1r 3               
000BC1r 3               
000BC1r 3               ; ## BYE ( -- ) "Break"
000BC1r 3               ; ## "bye"  tested  ANS tools ext
000BC1r 3                       ; """https://forth-standard.org/standard/tools/BYE"""
000BC1r 3               
000BC1r 3               xt_bye:
000BC1r 3                               ;brk
000BC1r 3  4C rr rr                     jmp platform_bye
000BC4r 3               z_bye:          ;rts             ; never reached
000BC4r 3               
000BC4r 3               
000BC4r 3               
000BC4r 3               ; ## C_COMMA ( c -- ) "Store one byte/char in the Dictionary"
000BC4r 3               ; ## "c,"  auto  ANS core
000BC4r 3                       ; """https://forth-standard.org/standard/core/CComma"""
000BC4r 3               
000BC4r 3               xt_c_comma:
000BC4r 3  20 rr rr                     jsr underflow_1
000BC7r 3               
000BC7r 3  B5 00                        lda 0,x
000BC9r 3  20 rr rr                     jsr cmpl_a
000BCCr 3               
000BCCr 3  E8                           inx
000BCDr 3  E8                           inx
000BCEr 3               
000BCEr 3  60           z_c_comma:      rts
000BCFr 3               
000BCFr 3               
000BCFr 3               
000BCFr 3               ; ## C_FETCH ( addr -- c ) "Get a character/byte from given address"
000BCFr 3               ; ## "c@"  auto  ANS core
000BCFr 3                       ; """https://forth-standard.org/standard/core/CFetch"""
000BCFr 3               xt_c_fetch:
000BCFr 3  20 rr rr                     jsr underflow_1
000BD2r 3               
000BD2r 3  A1 00                        lda (0,x)
000BD4r 3  95 00                        sta 0,x
000BD6r 3  74 01                        stz 1,x         ; Ignore LSB
000BD8r 3               
000BD8r 3  60           z_c_fetch:      rts
000BD9r 3               
000BD9r 3               
000BD9r 3               ; ## C_STORE ( c addr -- ) "Store character at address given"
000BD9r 3               ; ## "c!"  auto  ANS core
000BD9r 3                       ; """https://forth-standard.org/standard/core/CStore"""
000BD9r 3               xt_c_store:
000BD9r 3  20 rr rr                     jsr underflow_2
000BDCr 3               
000BDCr 3  B5 02                        lda 2,x
000BDEr 3  81 00                        sta (0,x)
000BE0r 3               
000BE0r 3  E8                           inx
000BE1r 3  E8                           inx
000BE2r 3  E8                           inx
000BE3r 3  E8                           inx
000BE4r 3               
000BE4r 3  60           z_c_store:      rts
000BE5r 3               
000BE5r 3               
000BE5r 3               ; ## CASE (C: -- 0) ( -- ) "Conditional flow control"
000BE5r 3               ; ## "case"  auto  ANS core ext
000BE5r 3                       ; """http://forth-standard.org/standard/core/CASE
000BE5r 3                       ;
000BE5r 3                       ; This is a dummy header, CASE shares the actual code with ZERO.
000BE5r 3                       ; """
000BE5r 3               
000BE5r 3               
000BE5r 3               ; ## CELL_PLUS ( u -- u ) "Add cell size in bytes"
000BE5r 3               ; ## "cell+"  auto  ANS core
000BE5r 3                       ; """https://forth-standard.org/standard/core/CELLPlus
000BE5r 3                       ; Add the number of bytes ("address units") that one cell needs.
000BE5r 3                       ; Since this is an 8 bit machine with 16 bit cells, we add two bytes.
000BE5r 3                       ; """
000BE5r 3               
000BE5r 3               xt_cell_plus:
000BE5r 3  20 rr rr                     jsr underflow_1
000BE8r 3               
000BE8r 3  F6 00                        inc 0,x
000BEAr 3  D0 02                        bne @1
000BECr 3  F6 01                        inc 1,x
000BEEr 3               @1:
000BEEr 3  F6 00                        inc 0,x
000BF0r 3  D0 02                        bne @done
000BF2r 3  F6 01                        inc 1,x
000BF4r 3               @done:
000BF4r 3  60           z_cell_plus:    rts
000BF5r 3               
000BF5r 3               
000BF5r 3               
000BF5r 3               ; ## CELLS ( u -- u ) "Convert cells to size in bytes"
000BF5r 3               ; ## "cells"  auto  ANS core
000BF5r 3                       ; """https://forth-standard.org/standard/core/CELLS
000BF5r 3                       ;
000BF5r 3                       ; Dummy entry for the CELLS word, the code is the same as for
000BF5r 3                       ; 2*, which is where the header directs us to
000BF5r 3                       ; """
000BF5r 3               
000BF5r 3               
000BF5r 3               ; ## CHAR ( "c" -- u ) "Convert character to ASCII value"
000BF5r 3               ; ## "char"  auto  ANS core
000BF5r 3                       ; """https://forth-standard.org/standard/core/CHAR"""
000BF5r 3               
000BF5r 3               xt_char:
000BF5r 3                               ; get character from string, returns ( addr u )
000BF5r 3  20 rr rr                     jsr xt_parse_name
000BF8r 3               
000BF8r 3                               ; if we got back a zero, we have a problem
000BF8r 3  B5 00                        lda 0,x
000BFAr 3  15 01                        ora 1,x
000BFCr 3  D0 05                        bne @not_empty
000BFEr 3               
000BFEr 3  A9 05                        lda #err_noname
000C00r 3  4C rr rr                     jmp error
000C03r 3               
000C03r 3               @not_empty:
000C03r 3  E8                           inx             ; drop number of characters, leave addr
000C04r 3  E8                           inx
000C05r 3  A1 00                        lda (0,x)       ; get character (equivalent to C@)
000C07r 3  95 00                        sta 0,x
000C09r 3  74 01                        stz 1,x         ; MSB is always zero
000C0Br 3               
000C0Br 3  60           z_char:         rts
000C0Cr 3               
000C0Cr 3               
000C0Cr 3               
000C0Cr 3               ; ## CHAR_PLUS ( addr -- addr+1 ) "Add the size of a character unit to address"
000C0Cr 3               ; ## "char+"  auto  ANS core
000C0Cr 3                       ; """https://forth-standard.org/standard/core/CHARPlus
000C0Cr 3                       ;
000C0Cr 3                       ; This is a dummy entry, the code is shared with ONE_PLUS
000C0Cr 3                       ; """
000C0Cr 3               
000C0Cr 3               
000C0Cr 3               ; ## CHARS ( n -- n ) "Number of bytes that n chars need"
000C0Cr 3               ; ## "chars"  auto  ANS core
000C0Cr 3                       ; """https://forth-standard.org/standard/core/CHARS
000C0Cr 3                       ; Return how many address units n chars are. Since this is an 8 bit
000C0Cr 3                       ; machine, this does absolutely nothing and is included for
000C0Cr 3                       ; compatibility with other Forth versions
000C0Cr 3                       ; """
000C0Cr 3               
000C0Cr 3               xt_chars:
000C0Cr 3                               ; Checking for underflow seems a bit stupid because this
000C0Cr 3                               ; routine does nothing on this machine. However, the user
000C0Cr 3                               ; should be warned that there is something wrong with the
000C0Cr 3                               ; code if this occurs.
000C0Cr 3  20 rr rr                     jsr underflow_1
000C0Fr 3               
000C0Fr 3  60           z_chars:        rts
000C10r 3               
000C10r 3               
000C10r 3               ; ## CLEAVE ( addr u -- addr2 u2 addr1 u1 ) "Split off word from string"
000C10r 3               ; ## "cleave"  auto  Tali Forth
000C10r 3               
000C10r 3                       ; """Given a range of memory with words delimited by whitespace,return
000C10r 3                       ; the first word at the top of the stack and the rest of the word
000C10r 3                       ; following it.
000C10r 3                       ;
000C10r 3                       ; Example:
000C10r 3                       ; s" w1 w2 w3" cleave  -> "w2 w3" "w1"
000C10r 3                       ; s" w1" cleave        -> "" "w1"
000C10r 3                       ;
000C10r 3                       ; Since it will be used in loops a lot, we want it to work in pure
000C10r 3                       ; assembler and be as fast as we can make it. Calls PARSE-NAME so we
000C10r 3                       ; strip leading delimiters.
000C10r 3                       ; """
000C10r 3               
000C10r 3               xt_cleave:
000C10r 3  20 rr rr                     jsr underflow_2
000C13r 3               
000C13r 3                               ; We arrive here with ( addr u ). We need to strip any leading
000C13r 3                               ; spaces by hand: PARSE-NAME does do that, but it doesn't
000C13r 3                               ; remember how many spaces were stripped. This means we can't
000C13r 3                               ; calculate the length of the remainder. Fortunately, Tali
000C13r 3                               ; Forth has just the word we need for this:
000C13r 3  20 rr rr                     jsr xt_minus_leading    ; -LEADING ( addr u )
000C16r 3               
000C16r 3                               ; The main part we can turn over to PARSE-NAME, except that we
000C16r 3                               ; have a string ( addr u ) and not stuff in the input buffer.
000C16r 3                               ; We get around this by cheating: We place ( addr u ) in the
000C16r 3                               ; input buffer and then call PARSE-NAME.
000C16r 3  20 rr rr                     jsr xt_input_to_r       ; save old imput state
000C19r 3               
000C19r 3  B5 00                        lda 0,x         ; u is new ciblen
000C1Br 3  85 rr                        sta ciblen
000C1Dr 3  B5 01                        lda 1,x
000C1Fr 3  85 rr                        sta ciblen+1
000C21r 3               
000C21r 3  B5 02                        lda 2,x         ; addr is new cib
000C23r 3  85 rr                        sta cib
000C25r 3  B5 03                        lda 3,x
000C27r 3  85 rr                        sta cib+1
000C29r 3               
000C29r 3  64 rr                        stz toin        ; >IN pointer is zero
000C2Br 3  64 rr                        stz toin+1
000C2Dr 3               
000C2Dr 3                               ; PARSE-NAME gives us back the substring of the first word
000C2Dr 3  20 rr rr                     jsr xt_parse_name       ; ( addr u addr-s u-s )
000C30r 3               
000C30r 3                               ; If we were given an empty string, then we're done. It's the
000C30r 3                               ; resposibility of the user to catch this as a sign to end the
000C30r 3                               ; any loop
000C30r 3  B5 00                        lda 0,x
000C32r 3  15 01                        ora 1,x
000C34r 3  F0 23                        beq @done
000C36r 3               
000C36r 3                               ; Now we have to adjust the original string
000C36r 3  B5 04                        lda 4,x         ; LSB of original u
000C38r 3  38                           sec
000C39r 3  F5 00                        sbc 0,x
000C3Br 3  95 04                        sta 4,x
000C3Dr 3               
000C3Dr 3  B5 05                        lda 5,x         ; MSB of original u
000C3Fr 3  F5 01                        sbc 1,x
000C41r 3  95 05                        sta 5,x
000C43r 3               
000C43r 3  B5 06                        lda 6,x         ; LSB of original addr
000C45r 3  18                           clc
000C46r 3  75 00                        adc 0,x
000C48r 3  95 06                        sta 6,x
000C4Ar 3               
000C4Ar 3  B5 07                        lda 7,x         ; MSB of original addr
000C4Cr 3  75 01                        adc 1,x
000C4Er 3  95 07                        sta 7,x
000C50r 3               
000C50r 3                               ; There is one small problem: PARSE-NAME will probably have
000C50r 3                               ; left the string with the rest of the words with leading
000C50r 3                               ; delimiters. We use our magic -LEADING again
000C50r 3  20 rr rr                     jsr xt_two_swap         ; ( addr-s u-s addr u )
000C53r 3  20 rr rr                     jsr xt_minus_leading
000C56r 3  20 rr rr                     jsr xt_two_swap         ; ( addr u addr-s u-s )
000C59r 3               @done:
000C59r 3                               ; Restore input
000C59r 3  20 rr rr                     jsr xt_r_to_input
000C5Cr 3               
000C5Cr 3  60           z_cleave:       rts
000C5Dr 3               
000C5Dr 3               
000C5Dr 3               
000C5Dr 3               ; ## CMOVE ( addr1 addr2 u -- ) "Copy bytes going from low to high"
000C5Dr 3               ; ## "cmove"  auto  ANS string
000C5Dr 3                       ; """https://forth-standard.org/standard/string/CMOVE
000C5Dr 3                       ; Copy u bytes from addr1 to addr2, going low to high (addr2 is
000C5Dr 3                       ; larger than addr1). Based on code in Leventhal, Lance A.
000C5Dr 3                       ; "6502 Assembly Language Routines", p. 201, where it is called
000C5Dr 3                       ; "move left".
000C5Dr 3                       ;
000C5Dr 3                       ; There are no official tests for this word.
000C5Dr 3                       ; """
000C5Dr 3               
000C5Dr 3               xt_cmove:
000C5Dr 3  20 rr rr                     jsr underflow_3
000C60r 3               
000C60r 3                               ; move destination address to where we can work with it
000C60r 3  B5 02                        lda 2,x
000C62r 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000C64r 3  B5 03                        lda 3,x
000C66r 3  85 rr                        sta tmp2+1
000C68r 3               
000C68r 3                               ; move source address to where we can work with it
000C68r 3  B5 04                        lda 4,x
000C6Ar 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000C6Cr 3  B5 05                        lda 5,x
000C6Er 3  85 rr                        sta tmp1+1
000C70r 3               
000C70r 3  A0 00                        ldy #0
000C72r 3  B5 01                        lda 1,x         ; number of whole pages to move
000C74r 3  F0 0F                        beq @dopartial
000C76r 3               
000C76r 3               @page:
000C76r 3  B1 rr                        lda (tmp1),y
000C78r 3  91 rr                        sta (tmp2),y
000C7Ar 3  C8                           iny
000C7Br 3  D0 F9                        bne @page
000C7Dr 3               
000C7Dr 3  E6 rr                        inc tmp1+1
000C7Fr 3  E6 rr                        inc tmp2+1
000C81r 3  D6 01                        dec 1,x
000C83r 3  D0 F1                        bne @page
000C85r 3               
000C85r 3               @dopartial:
000C85r 3  B5 00                        lda 0,x         ; length of last page
000C87r 3  F0 09                        beq @done
000C89r 3               
000C89r 3               @partial:
000C89r 3  B1 rr                        lda (tmp1),y
000C8Br 3  91 rr                        sta (tmp2),y
000C8Dr 3  C8                           iny
000C8Er 3               
000C8Er 3  D6 00                        dec 0,x
000C90r 3  D0 F7                        bne @partial
000C92r 3               
000C92r 3               @done:          ; clear the stack
000C92r 3  8A                           txa
000C93r 3  18                           clc
000C94r 3  69 06                        adc #6
000C96r 3  AA                           tax
000C97r 3               
000C97r 3  60           z_cmove:        rts
000C98r 3               
000C98r 3               
000C98r 3               
000C98r 3               ; ## CMOVE_UP ( add1 add2 u -- ) "Copy bytes from high to low"
000C98r 3               ; ## "cmove>"  auto  ANS string
000C98r 3                       ; """https://forth-standard.org/standard/string/CMOVEtop
000C98r 3                       ; Based on code in Leventhal, Lance A. "6502 Assembly Language
000C98r 3                       ; Routines", p. 201, where it is called "move right".
000C98r 3                       ;
000C98r 3                       ; There are no official tests for this word.
000C98r 3                       ; """
000C98r 3               
000C98r 3               xt_cmove_up:
000C98r 3  20 rr rr                     jsr underflow_3
000C9Br 3               
000C9Br 3                               ; Move destination address to where we can work with it
000C9Br 3  B5 02                        lda 2,x
000C9Dr 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000C9Fr 3  B5 03                        lda 3,x
000CA1r 3  18                           clc
000CA2r 3  75 01                        adc 1,x
000CA4r 3  85 rr                        sta tmp2+1      ; point to last page of destination
000CA6r 3               
000CA6r 3                               ; Move source address to where we can work with it
000CA6r 3  B5 04                        lda 4,x
000CA8r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000CAAr 3  B5 05                        lda 5,x
000CACr 3  18                           clc
000CADr 3  75 01                        adc 1,x
000CAFr 3  85 rr                        sta tmp1+1      ; point to last page of source
000CB1r 3  F6 01                        inc 1,x         ; allows us to use bne with dec 1,x below
000CB3r 3               
000CB3r 3                               ; Move the last partial page first
000CB3r 3  B4 00                        ldy 0,x         ; length of last page
000CB5r 3  F0 0E                        beq @nopartial
000CB7r 3               
000CB7r 3               @outerloop:
000CB7r 3  88                           dey
000CB8r 3  F0 07                        beq @finishpage
000CBAr 3               
000CBAr 3               @innerloop:
000CBAr 3  B1 rr                        lda (tmp1),y
000CBCr 3  91 rr                        sta (tmp2),y
000CBEr 3  88                           dey
000CBFr 3  D0 F9                        bne @innerloop
000CC1r 3               
000CC1r 3               @finishpage:
000CC1r 3  B2 rr                        lda (tmp1)      ; handle y = 0 separately
000CC3r 3  92 rr                        sta (tmp2)
000CC5r 3               
000CC5r 3               @nopartial:
000CC5r 3  C6 rr                        dec tmp1+1      ; back up to previous pages
000CC7r 3  C6 rr                        dec tmp2+1
000CC9r 3  D6 01                        dec 1,x
000CCBr 3  D0 EA                        bne @outerloop
000CCDr 3               @done:
000CCDr 3                               ; clear up the stack and leave
000CCDr 3  8A                           txa
000CCEr 3  18                           clc
000CCFr 3  69 06                        adc #6
000CD1r 3  AA                           tax
000CD2r 3               
000CD2r 3  60           z_cmove_up:     rts
000CD3r 3               
000CD3r 3               
000CD3r 3               
000CD3r 3               ; ## COLON ( "name" -- ) "Start compilation of a new word"
000CD3r 3               ; ## ":"  auto  ANS core
000CD3r 3                       ; """https://forth-standard.org/standard/core/Colon
000CD3r 3                       ;
000CD3r 3                       ; Use the CREATE routine and fill in the rest by hand.
000CD3r 3                       ; """
000CD3r 3               
000CD3r 3               xt_colon:
000CD3r 3                               ; If we're already in the compile state, complain
000CD3r 3                               ; and quit
000CD3r 3  A5 rr                        lda state
000CD5r 3  05 rr                        ora state+1
000CD7r 3  F0 05                        beq @1
000CD9r 3               
000CD9r 3  A9 07                        lda #err_state
000CDBr 3  4C rr rr                     jmp error
000CDEr 3               @1:
000CDEr 3                               ; switch to compile state
000CDEr 3  C6 rr                        dec state
000CE0r 3  C6 rr                        dec state+1
000CE2r 3               
000CE2r 3                               ; Set bit 6 in status to tell ";" and RECURSE this is a normal
000CE2r 3                               ; word
000CE2r 3  A9 40                        lda #%01000000
000CE4r 3  04 rr                        tsb status
000CE6r 3               
000CE6r 3                               ; CREATE is going to change the DP to point to the new word's
000CE6r 3                               ; header. While this is fine for (say) variables, it would mean
000CE6r 3                               ; that FIND-NAME etc would find a half-finished word when
000CE6r 3                               ; looking in the Dictionary. To prevent this, we save the old
000CE6r 3                               ; version of DP and restore it later. The new DP is placed in
000CE6r 3                               ; the variable WORKWORD until we're finished with a SEMICOLON.
000CE6r 3  20 rr rr                     jsr current_to_dp
000CE9r 3  A5 rr                        lda dp+1            ; CREATE uses a lot of variables
000CEBr 3  48                           pha
000CECr 3  A5 rr                        lda dp
000CEEr 3  48                           pha
000CEFr 3               
000CEFr 3                               ; Tell create not to print warning for duplicate name.
000CEFr 3  A9 80                        lda #%10000000
000CF1r 3  04 rr                        tsb status
000CF3r 3               
000CF3r 3  20 rr rr                     jsr xt_create
000CF6r 3               
000CF6r 3                               ; Get the nt (not the xt!) of the new word as described above.
000CF6r 3                               ; Only COLON, SEMICOLON and RECURSE get to access WORKWORD
000CF6r 3  20 rr rr                     jsr current_to_dp   ; This might be able to be omitted
000CF9r 3  A5 rr                        lda dp
000CFBr 3  85 rr                        sta workword
000CFDr 3  A5 rr                        lda dp+1
000CFFr 3  85 rr                        sta workword+1
000D01r 3               
000D01r 3                               ; Restore original DP
000D01r 3  68                           pla
000D02r 3  85 rr                        sta dp
000D04r 3  68                           pla
000D05r 3  85 rr                        sta dp+1
000D07r 3  20 rr rr                     jsr dp_to_current
000D0Ar 3               
000D0Ar 3                               ; CREATE includes a subroutine jump to DOVAR by default. We
000D0Ar 3                               ; back up three bytes and overwrite that.
000D0Ar 3  A5 rr                        lda cp
000D0Cr 3  38                           sec
000D0Dr 3  E9 03                        sbc #3
000D0Fr 3  85 rr                        sta cp
000D11r 3  B0 02                        bcs @done
000D13r 3  C6 rr                        dec cp+1
000D15r 3               @done:
000D15r 3  60           z_colon:        rts
000D16r 3               
000D16r 3               
000D16r 3               ; ## COLON_NONAME ( -- ) "Start compilation of a new word""
000D16r 3               ; ## ":NONAME"  auto  ANS core
000D16r 3                       ; """https://forth-standard.org/standard/core/ColonNONAME
000D16r 3                       ; Compile a word with no nt.  ";" will put its xt on the stack.
000D16r 3                       ; """
000D16r 3               
000D16r 3               xt_colon_noname:
000D16r 3                               ; If we're already in the compile state, complain
000D16r 3                               ; and quit
000D16r 3  A5 rr                        lda state
000D18r 3  05 rr                        ora state+1
000D1Ar 3  F0 05                        beq @1
000D1Cr 3               
000D1Cr 3  A9 07                        lda #err_state
000D1Er 3  4C rr rr                     jmp error
000D21r 3               @1:
000D21r 3                               ; switch to compile state
000D21r 3  C6 rr                        dec state
000D23r 3  C6 rr                        dec state+1
000D25r 3               
000D25r 3                               ; Clear bit 6 in status to tell ";" and RECURSE this is
000D25r 3                               ; a :NONAME word.
000D25r 3  A9 40                        lda #%01000000
000D27r 3  14 rr                        trb status
000D29r 3               
000D29r 3                               ; Put cp (the xt for this word) in WORKWORD. The flag above
000D29r 3                               ; lets both ";" and RECURSE know that is is an xt instead of an
000D29r 3                               ; nt and they will modify their behavior.
000D29r 3  A5 rr                        lda cp
000D2Br 3  85 rr                        sta workword
000D2Dr 3  A5 rr                        lda cp+1
000D2Fr 3  85 rr                        sta workword+1
000D31r 3               @done:
000D31r 3  60           z_colon_noname:        rts
000D32r 3               
000D32r 3               
000D32r 3               
000D32r 3               ; ## COMMA ( n -- ) "Allot and store one cell in memory"
000D32r 3               ; ## ","  auto  ANS core
000D32r 3                       ; """https://forth-standard.org/standard/core/Comma
000D32r 3                       ; Store TOS at current place in memory.
000D32r 3                       ;
000D32r 3                       ; Since this an eight-bit machine, we can ignore all alignment issues.
000D32r 3                       ; """
000D32r 3               
000D32r 3               xt_comma:
000D32r 3  20 rr rr                     jsr underflow_1
000D35r 3               
000D35r 3  B5 00                        lda 0,x
000D37r 3  92 rr                        sta (cp)
000D39r 3               
000D39r 3  E6 rr                        inc cp
000D3Br 3  D0 02                        bne @1
000D3Dr 3  E6 rr                        inc cp+1
000D3Fr 3               @1:
000D3Fr 3  B5 01                        lda 1,x
000D41r 3  92 rr                        sta (cp)
000D43r 3               
000D43r 3  E6 rr                        inc cp
000D45r 3  D0 02                        bne @done
000D47r 3  E6 rr                        inc cp+1
000D49r 3               @done:
000D49r 3  E8                           inx
000D4Ar 3  E8                           inx
000D4Br 3               
000D4Br 3  60           z_comma:        rts
000D4Cr 3               
000D4Cr 3               
000D4Cr 3               
000D4Cr 3               ; ## COMPARE ( addr1 u1 addr2 u2 -- -1 | 0 | 1) "Compare two strings"
000D4Cr 3               ; ## "compare"   auto  ANS string
000D4Cr 3                       ; """https://forth-standard.org/standard/string/COMPARE
000D4Cr 3                       ; Compare string1 (denoted by addr1 u1) to string2 (denoted by
000D4Cr 3                       ; addr2 u2).  Return -1 if string1 < string2, 0 if string1 = string2
000D4Cr 3                       ; and 1 if string1 > string2 (ASCIIbetical comparison).  A string
000D4Cr 3                       ; that entirely matches the beginning of the other string, but is
000D4Cr 3                       ; shorter, is considered less than the longer string.
000D4Cr 3                       ; """
000D4Cr 3               
000D4Cr 3               xt_compare:
000D4Cr 3  20 rr rr                     jsr underflow_4
000D4Fr 3               
000D4Fr 3                               ; Load the two string addresses into tmp1 and tmp2.
000D4Fr 3  B5 02                        lda 2,x
000D51r 3  85 rr                        sta tmp2
000D53r 3  B5 03                        lda 3,x
000D55r 3  85 rr                        sta tmp2+1
000D57r 3  B5 06                        lda 6,x
000D59r 3  85 rr                        sta tmp1
000D5Br 3  B5 07                        lda 7,x
000D5Dr 3  85 rr                        sta tmp1+1
000D5Fr 3                               ; The counts will be used in-place on the stack.
000D5Fr 3               
000D5Fr 3               @compare_loop:
000D5Fr 3                               ; Check to see if we are out of letters.
000D5Fr 3               
000D5Fr 3                               ; Check string1
000D5Fr 3  B5 04                        lda 4,x
000D61r 3  15 05                        ora 5,x
000D63r 3  F0 2C                        beq @str1_done
000D65r 3               
000D65r 3                               ; Check string2
000D65r 3  B5 00                        lda 0,x
000D67r 3  15 01                        ora 1,x
000D69r 3  F0 3A                        beq @greater    ; Str2 empty first
000D6Br 3               
000D6Br 3               @check_letter:
000D6Br 3                               ; Both strings have at least one letter left.
000D6Br 3                               ; Check the letters against each other.
000D6Br 3  B2 rr                        lda (tmp1)
000D6Dr 3  D2 rr                        cmp (tmp2)
000D6Fr 3  90 26                        bcc @less
000D71r 3  D0 32                        bne @greater
000D73r 3               @next_letter:
000D73r 3                               ; Move both tmp pointers and decrement the counts
000D73r 3                               ; on the stack.
000D73r 3                               ; Increment tmp1
000D73r 3  E6 rr                        inc tmp1
000D75r 3  D0 02                        bne @1
000D77r 3  E6 rr                        inc tmp1+1
000D79r 3               @1:
000D79r 3                               ; Increment tmp2
000D79r 3  E6 rr                        inc tmp2
000D7Br 3  D0 02                        bne @2
000D7Dr 3  E6 rr                        inc tmp2+1
000D7Fr 3               @2:
000D7Fr 3                               ; Decrement count1 on the stack.
000D7Fr 3  B5 04                        lda 4,x
000D81r 3  D0 02                        bne @3
000D83r 3  D6 05                        dec 5,x
000D85r 3               @3:
000D85r 3  D6 04                        dec 4,x
000D87r 3               
000D87r 3                               ; Decrement count2 on the stack.
000D87r 3  B5 00                        lda 0,x
000D89r 3  D0 02                        bne @4
000D8Br 3  D6 01                        dec 1,x
000D8Dr 3               @4:
000D8Dr 3  D6 00                        dec 0,x
000D8Fr 3               
000D8Fr 3                               ; Loop around and check again.
000D8Fr 3  80 CE                        bra @compare_loop
000D91r 3               
000D91r 3               @str1_done:
000D91r 3                               ; String 1 is out of letters. Check string 2.
000D91r 3  B5 00                        lda 0,x
000D93r 3  15 01                        ora 1,x
000D95r 3  F0 08                        beq @equal      ; Both out of letters
000D97r 3               
000D97r 3                               ; Falls into less (str1 is out but str2 has more)
000D97r 3               @less:
000D97r 3                               ; Return -1
000D97r 3  A9 FF                        lda #$FF
000D99r 3  95 06                        sta 6,x
000D9Br 3  95 07                        sta 7,x
000D9Dr 3  80 0C                        bra @done
000D9Fr 3               @equal:
000D9Fr 3                               ; Return 0
000D9Fr 3  74 06                        stz 6,x
000DA1r 3  74 07                        stz 7,x
000DA3r 3  80 06                        bra @done
000DA5r 3               @greater:
000DA5r 3                               ; Return 1
000DA5r 3  A9 01                        lda #1
000DA7r 3  95 06                        sta 6,x
000DA9r 3  74 07                        stz 7,x
000DABr 3                               ; Falls into @done
000DABr 3               @done:
000DABr 3                               ; Remove all but the result from the stack.
000DABr 3  8A                           txa
000DACr 3  18                           clc
000DADr 3  69 06                        adc #6
000DAFr 3  AA                           tax
000DB0r 3               
000DB0r 3  60           z_compare:      rts
000DB1r 3               
000DB1r 3               
000DB1r 3               
000DB1r 3               ; ## COMPILE_COMMA ( xt -- ) "Compile xt"
000DB1r 3               ; ## "compile,"  auto  ANS core ext
000DB1r 3                       ; """https://forth-standard.org/standard/core/COMPILEComma
000DB1r 3                       ; Compile the given xt in the current word definition. It is an
000DB1r 3                       ; error if we are not in the compile state. Because we are using
000DB1r 3                       ; subroutine threading, we can't use , (COMMA) to compile new words
000DB1r 3                       ; the traditional way. By default, native compiled is allowed, unless
000DB1r 3                       ; there is a NN (Never Native) flag associated. If not, we use the
000DB1r 3                       ; value NC_LIMIT (from definitions.tasm) to decide if the code
000DB1r 3                       ; is too large to be natively coded: If the size is larger than
000DB1r 3                       ; NC_LIMIT, we silently use subroutine coding. If the AN (Always
000DB1r 3                       ; Native) flag is set, the word is always natively compiled.
000DB1r 3                       ; """
000DB1r 3               
000DB1r 3               xt_compile_comma:
000DB1r 3  20 rr rr                     jsr underflow_1
000DB4r 3               
000DB4r 3                               ; See if this is an Always Native (AN) word by checking the
000DB4r 3                               ; AN flag. We need nt for this. First, save a copy of xt to
000DB4r 3                               ; the Return Stack
000DB4r 3  B5 01                        lda 1,x                 ; MSB
000DB6r 3  48                           pha
000DB7r 3  B5 00                        lda 0,x
000DB9r 3  48                           pha                     ; LSB
000DBAr 3               
000DBAr 3  20 rr rr                     jsr xt_int_to_name      ; ( xt -- nt )
000DBDr 3               
000DBDr 3                               ; See if this xt even has an nt.
000DBDr 3  B5 00                        lda 0,x
000DBFr 3  15 01                        ora 1,x
000DC1r 3  D0 03                        bne @check_nt
000DC3r 3               
000DC3r 3                               ; No nt in dictionary. Just compile as a JSR.
000DC3r 3  4C rr rr                     jmp @compile_as_jump
000DC6r 3               
000DC6r 3               @check_nt:
000DC6r 3                               ; put nt away for safe keeping
000DC6r 3  B5 00                        lda 0,x
000DC8r 3  85 rr                        sta tmptos
000DCAr 3  B5 01                        lda 1,x
000DCCr 3  85 rr                        sta tmptos+1
000DCEr 3               
000DCEr 3                               ; status byte is one further down
000DCEr 3  F6 00                        inc 0,x
000DD0r 3  D0 02                        bne @1
000DD2r 3  F6 01                        inc 1,x                 ; ( nt -- nt+1 )
000DD4r 3               @1:
000DD4r 3  A1 00                        lda (0,x)
000DD6r 3  85 rr                        sta tmp3                ; keep copy of status byte for NN
000DD8r 3  29 02                        and #AN                 ; mask all but Always Native (AN) bit
000DDAr 3  F0 0D                        beq @compile_check
000DDCr 3               
000DDCr 3                               ; We're natively compiling no matter what. Get length and
000DDCr 3                               ; compile in code. Get the original nt back
000DDCr 3  A5 rr                        lda tmptos
000DDEr 3  95 00                        sta 0,x
000DE0r 3  A5 rr                        lda tmptos+1
000DE2r 3  95 01                        sta 1,x
000DE4r 3               
000DE4r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000DE7r 3               
000DE7r 3  80 27                        bra @compile_as_code
000DE9r 3               
000DE9r 3               @compile_check:
000DE9r 3                               ; See if Native Compile is even alowed by checking the NN
000DE9r 3                               ; flag
000DE9r 3  A5 rr                        lda tmp3
000DEBr 3  29 08                        and #NN
000DEDr 3  F0 03                        beq @check_size_limit
000DEFr 3               
000DEFr 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000DF2r 3               
000DF2r 3               @check_size_limit:
000DF2r 3                               ; Native compile is a legal option, but we need to see what
000DF2r 3                               ; limit the user set for size (in nc_limit)
000DF2r 3  A5 rr                        lda tmptos
000DF4r 3  95 00                        sta 0,x
000DF6r 3  A5 rr                        lda tmptos+1
000DF8r 3  95 01                        sta 1,x
000DFAr 3               
000DFAr 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000DFDr 3               
000DFDr 3                               ; Check the wordsize MSB against the user-defined limit.
000DFDr 3  B5 01                        lda 1,x
000DFFr 3  C5 rr                        cmp nc_limit+1
000E01r 3  90 0D                        bcc @compile_as_code    ; user-defined limit MSB
000E03r 3  D0 08                        bne @jumpto_compile_as_jump
000E05r 3               
000E05r 3                               ; Check the wordsize LSB against the user-defined limit.
000E05r 3  B5 00                        lda 0,x
000E07r 3  C5 rr                        cmp nc_limit            ; user-defined limit LSB
000E09r 3  90 05                        bcc @compile_as_code    ; Allow native compiling for less
000E0Br 3  F0 03                        beq @compile_as_code    ; than or equal to the limit.
000E0Dr 3               
000E0Dr 3               @jumpto_compile_as_jump:
000E0Dr 3                               ; If the wordsize is greater than the user-defined
000E0Dr 3                               ; limit, it will be compiled as a subroutine jump.
000E0Dr 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000E10r 3               
000E10r 3               @compile_as_code:
000E10r 3                               ; We arrive here with the length of the word's code TOS and
000E10r 3                               ; xt on top of the Return Stack. MOVE will need ( xt cp u )
000E10r 3                               ; on the data stack
000E10r 3  CA                           dex
000E11r 3  CA                           dex                     ; ( -- u ? )
000E12r 3  CA                           dex
000E13r 3  CA                           dex                     ; ( -- u ? ? )
000E14r 3               
000E14r 3  B5 04                        lda 4,x
000E16r 3  95 00                        sta 0,x                 ; LSB of u
000E18r 3  B5 05                        lda 5,x
000E1Ar 3  95 01                        sta 1,x                 ; ( -- u ? u )
000E1Cr 3               
000E1Cr 3  68                           pla
000E1Dr 3  95 04                        sta 4,x                 ; LSB of xt
000E1Fr 3  68                           pla
000E20r 3  95 05                        sta 5,x                 ; ( -- xt ? u )
000E22r 3               
000E22r 3  A5 rr                        lda cp                  ; LSB of cp
000E24r 3  95 02                        sta 2,x
000E26r 3  A5 rr                        lda cp+1
000E28r 3  95 03                        sta 3,x                 ; ( -- xt cp u )
000E2Ar 3               
000E2Ar 3                               ; --- SPECIAL CASE 1: PREVENT RETURN STACK THRASHINIG ---
000E2Ar 3               
000E2Ar 3                               ; Native compiling allows us to strip the stack antics off
000E2Ar 3                               ; a number of words that use the Return Stack such as >R, R>,
000E2Ar 3                               ; 2>R and 2R> (but not 2R@ in this version). We compare the
000E2Ar 3                               ; xt with the contents of the table
000E2Ar 3  A0 00                        ldy #0
000E2Cr 3               
000E2Cr 3               @strip_loop:
000E2Cr 3  B9 rr rr                     lda @strip_table,y      ; LSB of first word
000E2Fr 3  D5 04                        cmp 4,x                 ; LSB of xt
000E31r 3  D0 07                        bne @next_entry
000E33r 3               
000E33r 3                               ; LSB is the same, test MSB
000E33r 3  B9 rr rr                     lda @strip_table+1,y
000E36r 3  D5 05                        cmp 5,x
000E38r 3  F0 0C                        beq @found_entry
000E3Ar 3               
000E3Ar 3                               ; MSB is not equal. Pretend though that we've come from LSB
000E3Ar 3                               ; so we can use the next step for both cases
000E3Ar 3               @next_entry:
000E3Ar 3                               ; Not a word that needs stripping, so check next entry in table
000E3Ar 3                               ; Let's see if we're done with the table (marked by zero entry)
000E3Ar 3  B9 rr rr                     lda @strip_table,y      ; pointing to LSB
000E3Dr 3  19 rr rr                     ora @strip_table+1,y    ; get MSB
000E40r 3  F0 22                        beq @underflow_strip    ; table done, let's get out of here
000E42r 3               
000E42r 3  C8                           iny
000E43r 3  C8                           iny
000E44r 3  80 E6                        bra @strip_loop
000E46r 3               @found_entry:
000E46r 3                               ; This word is one of the ones that needs to have its size
000E46r 3                               ; adjusted during native compile. We find the values in the
000E46r 3                               ; next table with the same index, which is Y. However, Y is
000E46r 3                               ; pointing to the MSB, so we need to go back to the LSB and
000E46r 3                               ; halve the index before we can use it.
000E46r 3  98                           tya
000E47r 3  4A                           lsr
000E48r 3  A8                           tay
000E49r 3               
000E49r 3                               ; Get the adjustment out of the size table. We were clever
000E49r 3                               ; enough to make sure the cut on both ends of the code is
000E49r 3                               ; is the same size.
000E49r 3  B9 rr rr                     lda @strip_size,y
000E4Cr 3  85 rr                        sta tmptos              ; save a copy
000E4Er 3               
000E4Er 3                               ; Adjust xt: Start later
000E4Er 3  18                           clc
000E4Fr 3  75 04                        adc 4,x
000E51r 3  95 04                        sta 4,x
000E53r 3  90 02                        bcc @2
000E55r 3  F6 05                        inc 5,x                 ; we just care about the carry
000E57r 3               @2:
000E57r 3               
000E57r 3                               ; Adjust u: Quit earlier. Since we cut off the top and the
000E57r 3                               ; bottom of the code, we have to double the value
000E57r 3  06 rr                        asl tmptos
000E59r 3               
000E59r 3  38                           sec
000E5Ar 3  B5 00                        lda 0,x
000E5Cr 3  E5 rr                        sbc tmptos
000E5Er 3  95 00                        sta 0,x
000E60r 3  B0 02                        bcs @3
000E62r 3  D6 01                        dec 1,x                 ; we just care about the borrow
000E64r 3               @3:
000E64r 3                               ; drop through to underflow check stripping
000E64r 3               
000E64r 3               @underflow_strip:
000E64r 3                               ; --- SPECIAL CASE 2: REMOVE UNDERFLOW CHECKING ---
000E64r 3               
000E64r 3                               ; The user can choose to remove the unterflow testing in those
000E64r 3                               ; words that have the UF flag. This shortens the word by
000E64r 3                               ; 3 bytes if there is no underflow.
000E64r 3               
000E64r 3                               ; See if the user wants underflow stripping turned on
000E64r 3  A5 rr                        lda uf_strip
000E66r 3  05 rr                        ora uf_strip+1
000E68r 3  F0 1C                        beq @specials_done
000E6Ar 3               
000E6Ar 3                               ; See if this word even contains underflow checking
000E6Ar 3  A5 rr                        lda tmp3
000E6Cr 3  29 10                        and #UF
000E6Er 3  F0 16                        beq @specials_done
000E70r 3               
000E70r 3                               ; If we arrived here, underflow has to go. It's always 3 bytes
000E70r 3                               ; long. Note hat PICK is a special case.
000E70r 3               
000E70r 3                               ; Adjust xt: Start later
000E70r 3  18                           clc
000E71r 3  B5 04                        lda 4,x
000E73r 3  69 03                        adc #3
000E75r 3  95 04                        sta 4,x
000E77r 3  90 02                        bcc @4
000E79r 3  F6 05                        inc 5,x                  ; we just care about the carry
000E7Br 3               @4:
000E7Br 3                               ; Adjust u: End earlier
000E7Br 3  38                           sec
000E7Cr 3  B5 00                        lda 0,x
000E7Er 3  E9 03                        sbc #3
000E80r 3  95 00                        sta 0,x
000E82r 3  B0 02                        bcs @5
000E84r 3  D6 01                        dec 1,x                  ; we just care about the borrow
000E86r 3               @5:
000E86r 3               
000E86r 3                               ; --- END OF SPECIAL CASES ---
000E86r 3               @specials_done:
000E86r 3                               ; Store size of area to be copied for calculation of
000E86r 3                               ; new CP. We have to do this after all of the special cases
000E86r 3                               ; because they might change the size
000E86r 3  B5 01                        lda 1,x                 ; MSB
000E88r 3  48                           pha
000E89r 3  B5 00                        lda 0,x                 ; LSB
000E8Br 3  48                           pha
000E8Cr 3               
000E8Cr 3                               ; Enough of this, let's move those bytes already! We have
000E8Cr 3                               ; ( xt cp u ) on the stack at this point
000E8Cr 3  20 rr rr                     jsr xt_move
000E8Fr 3               
000E8Fr 3                               ; Update CP
000E8Fr 3  18                           clc
000E90r 3  68                           pla                     ; LSB
000E91r 3  65 rr                        adc cp
000E93r 3  85 rr                        sta cp
000E95r 3               
000E95r 3  68                           pla                     ; MSB
000E96r 3  65 rr                        adc cp+1
000E98r 3  85 rr                        sta cp+1
000E9Ar 3               
000E9Ar 3  80 2C                        bra @done
000E9Cr 3               
000E9Cr 3               @strip_table:
000E9Cr 3                              ; List of words we strip the Return Stack antics from
000E9Cr 3                              ; during native compile, zero terminated. The index here
000E9Cr 3                              ; must be the same as for the sizes
000E9Cr 3  rr rr rr rr                  .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
000EA0r 3  rr rr        
000EA2r 3  rr rr rr rr                  .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
000EA6r 3  00 00        
000EA8r 3               
000EA8r 3               @strip_size:
000EA8r 3                               ; List of bytes to be stripped from the words that get their
000EA8r 3                               ; Return Stack antics removed during native compile. Index must
000EA8r 3                               ; be the same as for the xts. Zero terminated.
000EA8r 3  04 04 04 06                  .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
000EACr 3  06 00        
000EAEr 3               
000EAEr 3               @compile_as_jump:
000EAEr 3                               ; Compile xt as a subroutine jump
000EAEr 3  A9 20                        lda #$20
000EB0r 3  92 rr                        sta (cp)
000EB2r 3               
000EB2r 3  A0 01                        ldy #1
000EB4r 3  68                           pla             ; LSB
000EB5r 3  91 rr                        sta (cp),y
000EB7r 3  C8                           iny
000EB8r 3  68                           pla             ; MSB
000EB9r 3  91 rr                        sta (cp),y
000EBBr 3               
000EBBr 3                               ; allot space we just used
000EBBr 3  A9 03                        lda #3
000EBDr 3  18                           clc
000EBEr 3  65 rr                        adc cp
000EC0r 3  85 rr                        sta cp
000EC2r 3  90 02                        bcc @6
000EC4r 3  E6 rr                        inc cp+1
000EC6r 3               @6:
000EC6r 3  E8                           inx             ; drop xt
000EC7r 3  E8                           inx
000EC8r 3               @done:
000EC8r 3               z_compile_comma:
000EC8r 3  60                           rts
000EC9r 3               
000EC9r 3               
000EC9r 3               
000EC9r 3               ; ## COMPILE_ONLY ( -- ) "Mark most recent word as COMPILE-ONLY"
000EC9r 3               ; ## "compile-only"  tested  Tali Forth
000EC9r 3                       ; """Set the Compile Only flag (CO) of the most recently defined
000EC9r 3                       ; word.
000EC9r 3                       ;
000EC9r 3                       ; The alternative way to do this is to define a word
000EC9r 3                       ; ?COMPILE that makes sure  we're in compile mode
000EC9r 3                       ; """
000EC9r 3               
000EC9r 3               xt_compile_only:
000EC9r 3  20 rr rr                     jsr current_to_dp
000ECCr 3  A0 01                        ldy #1          ; offset for status byte
000ECEr 3  B1 rr                        lda (dp),y
000ED0r 3  09 01                        ora #CO        ; make sure bit 7 is set
000ED2r 3  91 rr                        sta (dp),y
000ED4r 3               
000ED4r 3  60           z_compile_only: rts
000ED5r 3               
000ED5r 3               
000ED5r 3               
000ED5r 3               ; ## CONSTANT ( n "name" -- ) "Define a constant"
000ED5r 3               ; ## "constant"  auto  ANS core
000ED5r 3                       ; """https://forth-standard.org/standard/core/CONSTANT
000ED5r 3                       ;
000ED5r 3                       ; Forth equivalent is  CREATE , DOES> @  but we do
000ED5r 3                       ; more in assembler and let CREATE do the heavy lifting.
000ED5r 3                       ; See http://www.bradrodriguez.com/papers/moving3.htm for
000ED5r 3                       ; a primer on how this works in various Forths. This is the
000ED5r 3                       ; same code as VALUE in our case.
000ED5r 3                       ; """
000ED5r 3               xt_value:
000ED5r 3               xt_constant:
000ED5r 3  20 rr rr                     jsr underflow_1
000ED8r 3               
000ED8r 3  20 rr rr                     jsr xt_create
000EDBr 3               
000EDBr 3                           	; CREATE by default installs a subroutine jump to DOVAR,
000EDBr 3                               ; but we want DOCONST for constants. Go back two bytes and
000EDBr 3                               ; replace the subroutine jump target
000EDBr 3  38                           sec
000EDCr 3  A5 rr                        lda cp
000EDEr 3  E9 02                        sbc #2
000EE0r 3  85 rr                        sta tmp1
000EE2r 3  A5 rr                        lda cp+1
000EE4r 3  E9 00                        sbc #0
000EE6r 3  85 rr                        sta tmp1+1
000EE8r 3               
000EE8r 3  A9 rr                        lda #<doconst           ; LSB of DOCONST
000EEAr 3  92 rr                        sta (tmp1)
000EECr 3  A0 01                        ldy #1
000EEEr 3  A9 rr                        lda #>doconst           ; MSB of DOCONST
000EF0r 3  91 rr                        sta (tmp1),y
000EF2r 3               
000EF2r 3                               ; Now we save the constant number itself in the next cell
000EF2r 3  20 rr rr                     jsr xt_comma            ; drop through to adjust_z
000EF5r 3               
000EF5r 3               adjust_z:
000EF5r 3                               ; Now the length of the complete word (z_word) has increased by
000EF5r 3                               ; two. We need to update that number or else words such as SEE
000EF5r 3                               ; will ignore the PFA. We use this same routine for VARIABLE,
000EF5r 3                               ; VALUE and DEFER
000EF5r 3  20 rr rr                     jsr xt_latestnt         ; gives us ( -- nt )
000EF8r 3               
000EF8r 3                               ; z_word is six bytes further down
000EF8r 3  B5 00                        lda 0,x
000EFAr 3  85 rr                        sta tmp1
000EFCr 3  B5 01                        lda 1,x
000EFEr 3  85 rr                        sta tmp1+1
000F00r 3               
000F00r 3  A0 06                        ldy #6
000F02r 3  B1 rr                        lda (tmp1),y
000F04r 3  18                           clc
000F05r 3  69 02                        adc #2
000F07r 3  91 rr                        sta (tmp1),y
000F09r 3  C8                           iny
000F0Ar 3  B1 rr                        lda (tmp1),y
000F0Cr 3  69 00                        adc #0                  ; only need carry
000F0Er 3  91 rr                        sta (tmp1),y
000F10r 3               
000F10r 3  E8                           inx
000F11r 3  E8                           inx
000F12r 3               
000F12r 3               z_value:
000F12r 3  60           z_constant:     rts
000F13r 3               
000F13r 3               
000F13r 3               ; ## COUNT ( c-addr -- addr u ) "Convert character string to normal format"
000F13r 3               ; ## "count"  auto  ANS core
000F13r 3                       ; """https://forth-standard.org/standard/core/COUNT
000F13r 3                       ; Convert old-style character string to address-length pair. Note
000F13r 3                       ; that the length of the string c-addr is stored in character length
000F13r 3                       ; (8 bit), not cell length (16 bit). This is rarely used these days,
000F13r 3                       ; though COUNT can also be used to step through a string character by
000F13r 3                       ; character.
000F13r 3                       ; """
000F13r 3               xt_count:
000F13r 3  20 rr rr                     jsr underflow_1
000F16r 3               
000F16r 3  A1 00                        lda (0,x)       ; Get number of characters (255 max)
000F18r 3  A8                           tay
000F19r 3               
000F19r 3                               ; move start address up by one
000F19r 3  F6 00                        inc 0,x         ; LSB
000F1Br 3  D0 02                        bne @1
000F1Dr 3  F6 01                        inc 1,x         ; MSB
000F1Fr 3               
000F1Fr 3                               ; save number of characters to stack
000F1Fr 3               @1:
000F1Fr 3  98                           tya
000F20r 3  CA                           dex
000F21r 3  CA                           dex
000F22r 3  95 00                        sta 0,x         ; LSB
000F24r 3  74 01                        stz 1,x         ; MSB, always zero
000F26r 3               
000F26r 3  60           z_count:        rts
000F27r 3               
000F27r 3               
000F27r 3               ; ## CR ( -- ) "Print a line feed"
000F27r 3               ; ## "cr"  auto  ANS core
000F27r 3                       ; """https://forth-standard.org/standard/core/CR"""
000F27r 3               xt_cr:
000F27r 3  A9 0A                        lda #AscLF
000F29r 3  20 rr rr                     jsr emit_a
000F2Cr 3  60           z_cr:           rts
000F2Dr 3               
000F2Dr 3               
000F2Dr 3               ; ## CREATE ( "name" -- ) "Create Dictionary entry for 'name'"
000F2Dr 3               ; ## "create"  auto  ANS core
000F2Dr 3                       ; """https://forth-standard.org/standard/core/CREATE
000F2Dr 3                       ;
000F2Dr 3                       ; See the drawing in headers.asm for details on the header
000F2Dr 3                       ; """
000F2Dr 3               
000F2Dr 3               xt_create:
000F2Dr 3                               ; get string
000F2Dr 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
000F30r 3               
000F30r 3                               ; if we were given an empty string, we complain and quit
000F30r 3  B5 00                        lda 0,x
000F32r 3  15 01                        ora 1,x
000F34r 3  D0 05                        bne @got_name
000F36r 3               
000F36r 3  A9 05                        lda #err_noname
000F38r 3  4C rr rr                     jmp error
000F3Br 3               
000F3Br 3               @got_name:
000F3Br 3                               ; Enforce maximal length of string by overwriting the MSB of
000F3Br 3                               ; the length. There is a possible error here: If the string
000F3Br 3                               ; is exactly 255 chars long, then a lot of the following
000F3Br 3                               ; additions will fail because of wrapping
000F3Br 3  74 01                        stz 1,x
000F3Dr 3               
000F3Dr 3                               ; Check to see if this name already exists.
000F3Dr 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u )
000F40r 3  20 rr rr                     jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
000F43r 3               
000F43r 3  B5 00                        lda 0,x
000F45r 3  15 01                        ora 1,x
000F47r 3  F0 1E                        beq @new_name           ; We haven't seen this one before.
000F49r 3               
000F49r 3                               ; This name already exists.  See if we are supposed to print
000F49r 3                               ; the message for it.
000F49r 3  E8                           inx                     ; Drop flag (nt) from find-name.
000F4Ar 3  E8                           inx
000F4Br 3               
000F4Br 3                               ; Check bit 7
000F4Br 3  24 rr                        bit status
000F4Dr 3  10 08                        bpl @redefined_name     ; Bit 7 is zero, so print the message.
000F4Fr 3               
000F4Fr 3                               ; We aren't supposed to print the redefined message ourselves,
000F4Fr 3                               ; but we should indicate that it is redefined (for ; to print
000F4Fr 3                               ; later).
000F4Fr 3  A9 80                        lda #$80                ; Set bit 7 to indicate dup
000F51r 3  05 rr                        ora status
000F53r 3  85 rr                        sta status
000F55r 3  80 18                        bra @process_name
000F57r 3               
000F57r 3               @redefined_name:
000F57r 3                               ; Print the message that the name is redefined.
000F57r 3  A9 02                        lda #str_redefined
000F59r 3  20 rr rr                     jsr print_string_no_lf
000F5Cr 3               
000F5Cr 3  20 rr rr                     jsr xt_two_dup           ; ( addr u addr u )
000F5Fr 3  20 rr rr                     jsr xt_type
000F62r 3  20 rr rr                     jsr xt_space
000F65r 3               
000F65r 3  80 08                        bra @process_name
000F67r 3               
000F67r 3               @new_name:
000F67r 3  E8                           inx                     ; Drop flag (0) from find-name.
000F68r 3  E8                           inx
000F69r 3  A9 7F                        lda #$7F                ; Clear bit 0 of status to indicate new word.
000F6Br 3  25 rr                        and status
000F6Dr 3  85 rr                        sta status
000F6Fr 3               
000F6Fr 3               @process_name:
000F6Fr 3  B5 00                        lda 0,x
000F71r 3  85 rr                        sta tmp2                ; store length of string in tmp2
000F73r 3               
000F73r 3                               ; remember the first free byte of memory as the start of
000F73r 3                               ; the new word
000F73r 3  A5 rr                        lda cp
000F75r 3  85 rr                        sta tmp1
000F77r 3  A5 rr                        lda cp+1
000F79r 3  85 rr                        sta tmp1+1
000F7Br 3               
000F7Br 3                               ; We need 8 bytes plus the length of the string for our new header.
000F7Br 3                               ; This is also the offset for the start of the code field (the
000F7Br 3                               ; xt_ label) so we need to remember it. Otherwise, we could
000F7Br 3                               ; just allot the space afterwards
000F7Br 3  B5 00                        lda 0,x
000F7Dr 3  18                           clc
000F7Er 3  69 08                        adc #8
000F80r 3  85 rr                        sta tmp3                ; total header length
000F82r 3               
000F82r 3                               ; We need three more bytes for for the hardcoded code field
000F82r 3                               ; area (CFA), the "payload" of the word which by default will
000F82r 3                               ; be a subroutine jump to DOVAR
000F82r 3  18                           clc
000F83r 3  69 03                        adc #3
000F85r 3               
000F85r 3                               ; We overwrite the length of the string returned by PARSE-NAME
000F85r 3                               ; and then call ALLOT
000F85r 3  95 00                        sta 0,x
000F87r 3  74 01                        stz 1,x         ; max header size is 255 chars
000F89r 3  20 rr rr                     jsr xt_allot    ; ( addr )
000F8Cr 3               
000F8Cr 3                               ; Get the CURRENT dictionary pointer.
000F8Cr 3  20 rr rr                     jsr current_to_dp
000F8Fr 3               
000F8Fr 3                               ; Now we walk through the header with Y as the index, adding
000F8Fr 3                               ; information byte-by-byte
000F8Fr 3  A0 00                        ldy #0
000F91r 3               
000F91r 3                               ; HEADER BYTE 0: Length of string
000F91r 3  A5 rr                        lda tmp2
000F93r 3  91 rr                        sta (tmp1),y
000F95r 3               
000F95r 3                               ; HEADER BYTE 1: Status byte. By default, we set all new words
000F95r 3                               ; to "never native", user will have to decide if they should
000F95r 3                               ; be inlined
000F95r 3  A9 08                        lda #NN
000F97r 3               
000F97r 3                               ; Also, words defined by CREATE are marked in the header has
000F97r 3                               ; having a Code Field Area (CFA), which is a bit tricky for
000F97r 3                               ; Subroutine Threaded Code (STC). We do this so >BODY works
000F97r 3                               ; correctly with DOES> and CREATE. See the discussion at
000F97r 3                               ; http://forum.6502.org/viewtopic.php?f=9&t=5182 for details
000F97r 3  09 20                        ora #HC
000F99r 3  C8                           iny
000F9Ar 3  91 rr                        sta (tmp1),y
000F9Cr 3  C8                           iny
000F9Dr 3               
000F9Dr 3                               ; HEADER BYTE 2,3: Next header. This is the current last word
000F9Dr 3                               ; in the Dictionary
000F9Dr 3  A5 rr                        lda dp
000F9Fr 3  91 rr                        sta (tmp1),y
000FA1r 3  C8                           iny
000FA2r 3  A5 rr                        lda dp+1
000FA4r 3  91 rr                        sta (tmp1),y
000FA6r 3  C8                           iny
000FA7r 3               
000FA7r 3                               ; Interlude: Make old CP new DP (new start of Dictionary)
000FA7r 3  A5 rr                        lda tmp1+1
000FA9r 3  85 rr                        sta dp+1
000FABr 3  A5 rr                        lda tmp1
000FADr 3  85 rr                        sta dp
000FAFr 3               
000FAFr 3                               ; HEADER BYTE 4,5: Start of the code field ("xt_" of this word).
000FAFr 3                               ; This begins after the header so we take the length of the
000FAFr 3                               ; header, which we cleverly saved in tmp3, and use it as an
000FAFr 3                               ; offset to the address of the start of the word. We come here
000FAFr 3                               ; with tmp1 in A
000FAFr 3  18                           clc
000FB0r 3  65 rr                        adc tmp3        ; add total header length
000FB2r 3  91 rr                        sta (tmp1),y
000FB4r 3  48                           pha             ; we need this in the next step
000FB5r 3  C8                           iny
000FB6r 3               
000FB6r 3  A5 rr                        lda tmp1+1
000FB8r 3  69 00                        adc #0          ; only need the carry
000FBAr 3  91 rr                        sta (tmp1),y
000FBCr 3  C8                           iny
000FBDr 3               
000FBDr 3                               ; HEADER BYTE 6,7: End of code ("z_" of this word). By default,
000FBDr 3                               ; we execute a jump to the DOVAR routine, so we need to move three
000FBDr 3                               ; bytes down, and then one more byte so that the z_ label points
000FBDr 3                               ; to the (still fictional) RTS instruction for correct compilation
000FBDr 3  68                           pla             ; LSB of "z_" address
000FBEr 3  18                           clc
000FBFr 3  69 03                        adc #3
000FC1r 3  91 rr                        sta (tmp1),y
000FC3r 3               
000FC3r 3  88                           dey             ; get the MSB of xt back
000FC4r 3  B1 rr                        lda (tmp1),y
000FC6r 3  69 00                        adc #0          ; only need the carry
000FC8r 3  C8                           iny
000FC9r 3  C8                           iny
000FCAr 3  91 rr                        sta (tmp1),y
000FCCr 3  C8                           iny
000FCDr 3               
000FCDr 3                               ; HEADER BYTE 8: Start of name string. The address is TOS, the
000FCDr 3                               ; length in tmp2. We subtract 8 from the address so we can
000FCDr 3                               ; use the same loop index, which is already 8 byte ahead at
000FCDr 3                               ; this point
000FCDr 3  B5 00                        lda 0,x
000FCFr 3  38                           sec
000FD0r 3  E9 08                        sbc #8
000FD2r 3  85 rr                        sta tmptos
000FD4r 3               
000FD4r 3  B5 01                        lda 1,x
000FD6r 3  E9 00                        sbc #0          ; only need carry
000FD8r 3  85 rr                        sta tmptos+1
000FDAr 3               
000FDAr 3               @name_loop:
000FDAr 3  B1 rr                        lda (tmptos),y
000FDCr 3               
000FDCr 3                               ; Make sure it goes into the dictionary in lower case.
000FDCr 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
000FDEr 3  B0 07                        bcs @store_name
000FE0r 3  C9 41                        cmp #$41        ; ASCII 'A'
000FE2r 3  90 03                        bcc @store_name
000FE4r 3               
000FE4r 3                               ; An uppercase letter has been located. Make it
000FE4r 3                               ; lowercase.
000FE4r 3  18                           clc
000FE5r 3  69 20                        adc #$20
000FE7r 3               
000FE7r 3                               ; Fall into @store_name.
000FE7r 3               
000FE7r 3               @store_name:
000FE7r 3  91 rr                        sta (tmp1),y
000FE9r 3  C8                           iny
000FEAr 3  C6 rr                        dec tmp2
000FECr 3  D0 EC                        bne @name_loop
000FEEr 3               
000FEEr 3                               ; After thename string comes the code field, starting at the
000FEEr 3                               ; current xt of this word, which is initially a jump to the
000FEEr 3                               ; subroutine to DOVAR. We code this jump by hand
000FEEr 3  A9 20                        lda #$20        ; opcode of JSR
000FF0r 3  91 rr                        sta (tmp1),y
000FF2r 3  C8                           iny
000FF3r 3  A9 rr                        lda #<dovar
000FF5r 3  91 rr                        sta (tmp1),y
000FF7r 3  C8                           iny
000FF8r 3  A9 rr                        lda #>dovar
000FFAr 3  91 rr                        sta (tmp1),y
000FFCr 3               
000FFCr 3                               ; Update the CURRENT wordlist with the new DP.
000FFCr 3                               ; We do this down here because this routine uses Y.
000FFCr 3  20 rr rr                     jsr dp_to_current
000FFFr 3               
000FFFr 3                               ; And we're done. Restore stack
000FFFr 3  E8                           inx
001000r 3  E8                           inx
001001r 3               
001001r 3  60           z_create:       rts
001002r 3               
001002r 3               
001002r 3               
001002r 3               ; ## D_MINUS ( d d -- d ) "Subtract two double-celled numbers"
001002r 3               ; ## "d-"  auto  ANS double
001002r 3                       ; """https://forth-standard.org/standard/double/DMinus"""
001002r 3               
001002r 3               xt_d_minus:
001002r 3  20 rr rr                     jsr underflow_4 ; two double numbers
001005r 3               
001005r 3  38                           sec
001006r 3               
001006r 3  B5 06                        lda 6,x         ; LSB of lower word
001008r 3  F5 02                        sbc 2,x
00100Ar 3  95 06                        sta 6,x
00100Cr 3               
00100Cr 3  B5 07                        lda 7,x         ; MSB of lower word
00100Er 3  F5 03                        sbc 3,x
001010r 3  95 07                        sta 7,x
001012r 3               
001012r 3  B5 04                        lda 4,x         ; LSB of upper word
001014r 3  F5 00                        sbc 0,x
001016r 3  95 04                        sta 4,x
001018r 3               
001018r 3  B5 05                        lda 5,x         ; MSB of upper word
00101Ar 3  F5 01                        sbc 1,x
00101Cr 3  95 05                        sta 5,x
00101Er 3               
00101Er 3  E8                           inx
00101Fr 3  E8                           inx
001020r 3  E8                           inx
001021r 3  E8                           inx
001022r 3               
001022r 3  60           z_d_minus:      rts
001023r 3               
001023r 3               
001023r 3               
001023r 3               ; ## D_PLUS ( d d -- d ) "Add two double-celled numbers"
001023r 3               ; ## "d+"  auto  ANS double
001023r 3                       ; """https://forth-standard.org/standard/double/DPlus"""
001023r 3               
001023r 3               xt_d_plus:
001023r 3  20 rr rr                     jsr underflow_4 ; two double numbers
001026r 3               
001026r 3  18                           clc
001027r 3  B5 02                        lda 2,x         ; LSB of lower word
001029r 3  75 06                        adc 6,x
00102Br 3  95 06                        sta 6,x
00102Dr 3               
00102Dr 3  B5 03                        lda 3,x         ; MSB of lower word
00102Fr 3  75 07                        adc 7,x
001031r 3  95 07                        sta 7,x
001033r 3               
001033r 3  B5 00                        lda 0,x         ; LSB of upper word
001035r 3  75 04                        adc 4,x
001037r 3  95 04                        sta 4,x
001039r 3               
001039r 3  B5 01                        lda 1,x         ; MSB of upper word
00103Br 3  75 05                        adc 5,x
00103Dr 3  95 05                        sta 5,x
00103Fr 3               
00103Fr 3  E8                           inx
001040r 3  E8                           inx
001041r 3  E8                           inx
001042r 3  E8                           inx
001043r 3               
001043r 3  60           z_d_plus:       rts
001044r 3               
001044r 3               
001044r 3               
001044r 3               ; ## D_TO_S ( d -- n ) "Convert a double number to single"
001044r 3               ; ## "d>s"  auto  ANS double
001044r 3                       ; """https://forth-standard.org/standard/double/DtoS
001044r 3                       ; Though this is basically just DROP, we keep it
001044r 3                       ; separate so we can test for underflow
001044r 3                       ; """
001044r 3               
001044r 3               xt_d_to_s:
001044r 3  20 rr rr                     jsr underflow_2
001047r 3               
001047r 3  E8                           inx
001048r 3  E8                           inx
001049r 3               
001049r 3  60           z_d_to_s:       rts
00104Ar 3               
00104Ar 3               
00104Ar 3               
00104Ar 3               ; ## DABS ( d -- d ) "Return the absolute value of a double"
00104Ar 3               ; ## "dabs"  auto  ANS double
00104Ar 3                       ; """https://forth-standard.org/standard/double/DABS"""
00104Ar 3               
00104Ar 3               xt_dabs:
00104Ar 3  20 rr rr                     jsr underflow_2 ; double number
00104Dr 3               
00104Dr 3  B5 01                        lda 1,x         ; MSB of high cell
00104Fr 3  10 17                        bpl @done       ; positive, we get off light
001051r 3               
001051r 3                               ; negative, calculate 0 - d
001051r 3  A0 00                        ldy #0
001053r 3  38                           sec
001054r 3               
001054r 3  98                           tya
001055r 3  F5 02                        sbc 2,x         ; LSB of low cell
001057r 3  95 02                        sta 2,x
001059r 3               
001059r 3  98                           tya
00105Ar 3  F5 03                        sbc 3,x         ; MSB of low cell
00105Cr 3  95 03                        sta 3,x
00105Er 3               
00105Er 3  98                           tya
00105Fr 3  F5 00                        sbc 0,x         ; LSB of high cell
001061r 3  95 00                        sta 0,x
001063r 3               
001063r 3  98                           tya
001064r 3  F5 01                        sbc 1,x         ; MSB of high cell
001066r 3  95 01                        sta 1,x
001068r 3               @done:
001068r 3  60           z_dabs:         rts
001069r 3               
001069r 3               
001069r 3               
001069r 3               ; ## DECIMAL ( -- ) "Change radix base to decimal"
001069r 3               ; ## "decimal"  auto  ANS core
001069r 3                       ; """https://forth-standard.org/standard/core/DECIMAL"""
001069r 3               xt_decimal:
001069r 3  A9 0A                        lda #10
00106Br 3  85 rr                        sta base
00106Dr 3  64 rr                        stz base+1              ; paranoid
00106Fr 3               
00106Fr 3  60           z_decimal:      rts
001070r 3               
001070r 3               
001070r 3               ; ## DEFER ( "name" -- ) "Create a placeholder for words by name"
001070r 3               ; ## "defer"  auto  ANS core ext
001070r 3                       ; """https://forth-standard.org/standard/core/DEFER
001070r 3                       ; Reserve an name that can be linked to various xt by IS.
001070r 3                       ;
001070r 3                       ; The ANS reference implementation is
001070r 3                       ;       CREATE ['] ABORT , DOES> @ EXECUTE ;
001070r 3                       ; But we use this routine as a low-level word so things go faster
001070r 3               
001070r 3               xt_defer:
001070r 3  20 rr rr                     jsr xt_create
001073r 3               
001073r 3                               ; CREATE by default installs a subroutine jump to DOVAR,
001073r 3                               ; but we actually want DODEFER this time. Go back two
001073r 3                               ; bytes and repace the subroutine jump target
001073r 3  A5 rr                        lda cp          ; LSB
001075r 3  38                           sec
001076r 3  E9 02                        sbc #2
001078r 3  85 rr                        sta tmp1
00107Ar 3               
00107Ar 3  A5 rr                        lda cp+1        ; MSB
00107Cr 3  E9 00                        sbc #0          ; we only care about the borrow
00107Er 3  85 rr                        sta tmp1+1
001080r 3               
001080r 3                               ; Save the target address
001080r 3  A0 00                        ldy #0
001082r 3  A9 rr                        lda #<dodefer   ; LSB
001084r 3  91 rr                        sta (tmp1),y
001086r 3  C8                           iny
001087r 3  A9 rr                        lda #>dodefer   ; MSB
001089r 3  91 rr                        sta (tmp1),y
00108Br 3               
00108Br 3               
00108Br 3                               ; DODEFER executes the next address it finds after
00108Br 3                               ; its call. As default, we include the error
00108Br 3                               ; "Defer not defined"
00108Br 3  A9 rr                        lda #<defer_error
00108Dr 3  92 rr                        sta (cp)
00108Fr 3  E6 rr                        inc cp
001091r 3  D0 02                        bne @1
001093r 3  E6 rr                        inc cp+1
001095r 3               @1:
001095r 3  A9 rr                        lda #>defer_error
001097r 3  92 rr                        sta (cp)
001099r 3  E6 rr                        inc cp
00109Br 3  D0 02                        bne @2
00109Dr 3  E6 rr                        inc cp+1
00109Fr 3               @2:
00109Fr 3  20 rr rr                     jsr adjust_z    ; adjust header to correct length
0010A2r 3               
0010A2r 3  60           z_defer:        rts
0010A3r 3               
0010A3r 3               
0010A3r 3               
0010A3r 3               ; ## DEFER_FETCH ( xt1 -- xt2 ) "Get the current XT for a deferred word"
0010A3r 3               ; ## "defer@"  auto  ANS core ext
0010A3r 3                       ; """http://forth-standard.org/standard/core/DEFERFetch"""
0010A3r 3               
0010A3r 3               xt_defer_fetch:
0010A3r 3                               ; No underflow checking as >BODY does it.
0010A3r 3  20 rr rr                     jsr xt_to_body
0010A6r 3  20 rr rr                     jsr xt_fetch
0010A9r 3  60           z_defer_fetch:  rts
0010AAr 3               
0010AAr 3               
0010AAr 3               
0010AAr 3               ; ## DEFER_STORE ( xt2 x1 -- ) "Set xt1 to execute xt2"
0010AAr 3               ; ## "defer!"  auto  ANS core ext
0010AAr 3                       ; """http://forth-standard.org/standard/core/DEFERStore"""
0010AAr 3               
0010AAr 3               xt_defer_store:
0010AAr 3                               ; No underflow checking as >BODY and ! do it.
0010AAr 3  20 rr rr                     jsr xt_to_body
0010ADr 3  20 rr rr                     jsr xt_store
0010B0r 3  60           z_defer_store:  rts
0010B1r 3               
0010B1r 3               
0010B1r 3               
0010B1r 3               ; ## DEFINITIONS ( -- ) "Make first wordlist in search order the current wordlist"
0010B1r 3               ; ## "definitions" auto ANS search
0010B1r 3               xt_definitions:
0010B1r 3  A0 1F                        ldy #search_order_offset    ; Transfer byte variable
0010B3r 3  B1 rr                        lda (up),y                  ; SEARCH_ORDER[0] to
0010B5r 3  A0 04                        ldy #current_offset         ; byte variable CURRENT.
0010B7r 3  91 rr                        sta (up),y
0010B9r 3  60           z_definitions:  rts
0010BAr 3               
0010BAr 3               
0010BAr 3               ; ## DEPTH ( -- u ) "Get number of cells (not bytes) used by stack"
0010BAr 3               ; ## "depth"  auto  ANS core
0010BAr 3                       ; """https://forth-standard.org/standard/core/DEPTH"""
0010BAr 3               xt_depth:
0010BAr 3  A9 rr                        lda #dsp0
0010BCr 3  86 rr                        stx tmpdsp
0010BEr 3  38                           sec
0010BFr 3  E5 rr                        sbc tmpdsp
0010C1r 3               
0010C1r 3                               ; divide by two because each cell is two bytes
0010C1r 3  4A                           lsr
0010C2r 3               
0010C2r 3  CA                           dex
0010C3r 3  CA                           dex
0010C4r 3  95 00                        sta 0,x
0010C6r 3  74 01                        stz 1,x
0010C8r 3               
0010C8r 3  60           z_depth:        rts
0010C9r 3               
0010C9r 3               
0010C9r 3               ; ## DIGIT_QUESTION ( char -- u f | char f ) "Convert ASCII char to number"
0010C9r 3               ; ## "digit?"  auto  Tali Forth
0010C9r 3                       ; """Inspired by the pForth instruction DIGIT, see
0010C9r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
0010C9r 3                       ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to
0010C9r 3                       ; pForth, we get the base (radix) ourselves instead of having the
0010C9r 3                       ; user provide it. There is no standard name for this routine, which
0010C9r 3                       ; itself is not ANS; we use DIGIT? following pForth and Gforth.
0010C9r 3                       ; """
0010C9r 3               
0010C9r 3               xt_digit_question:
0010C9r 3  20 rr rr                     jsr underflow_1
0010CCr 3               
0010CCr 3                               ; one way or another, we're going to need room for the
0010CCr 3                               ; flag on the stack
0010CCr 3  CA                           dex
0010CDr 3  CA                           dex
0010CEr 3  74 00                        stz 0,x                 ; default flag is failure
0010D0r 3  74 01                        stz 1,x
0010D2r 3  74 03                        stz 3,x                 ; paranoid
0010D4r 3               
0010D4r 3                               ; Check the character, now in the LSB of NOS. First, make
0010D4r 3                               ; sure we're not below the ASCII code for "0"
0010D4r 3  B5 02                        lda 2,x
0010D6r 3  C9 30                        cmp #'0'
0010D8r 3  90 23                        bcc @done               ; failure flag already set
0010DAr 3               
0010DAr 3                               ; Next, see if we are below "9", because that would make
0010DAr 3                               ; this a normal number
0010DAr 3  C9 3A                        cmp #'9'+1               ; this is actually ":"
0010DCr 3  90 12                        bcc @checkbase
0010DEr 3               
0010DEr 3                               ; Well, then let's see if this is the gap between "9" and "A"
0010DEr 3                               ; so we can treat the whole range as a number
0010DEr 3  C9 41                        cmp #'A'
0010E0r 3  90 1B                        bcc @done               ; failure flag is already set
0010E2r 3               
0010E2r 3                               ; probably a letter, so we make sure it is uppercase
0010E2r 3  C9 61                        cmp #'a'
0010E4r 3  90 07                        bcc @case_done          ; not lower case, too low
0010E6r 3  C9 7B                        cmp #'z'+1
0010E8r 3  B0 03                        bcs @case_done          ; not lower case, too high
0010EAr 3               
0010EAr 3  18                           clc                     ; just right
0010EBr 3  69 E0                        adc #$e0                ; offset to upper case (wraps)
0010EDr 3               
0010EDr 3               @case_done:
0010EDr 3                               ; get rid of the gap between "9" and "A" so we can treat
0010EDr 3                               ; the whole range as one number
0010EDr 3  38                           sec
0010EEr 3  E9 07                        sbc #7                  ; fall through to @checkbase
0010F0r 3               
0010F0r 3               @checkbase:
0010F0r 3                               ; we have a number, now see if it falls inside the range
0010F0r 3                               ; provided by BASE
0010F0r 3  38                           sec
0010F1r 3  E9 30                        sbc #'0'                 ; this is also the conversion step
0010F3r 3  C5 rr                        cmp base
0010F5r 3  B0 06                        bcs @done               ; already have false flag
0010F7r 3               
0010F7r 3                               ; Found a legal number
0010F7r 3  95 02                        sta 2,x                 ; put number in NOS
0010F9r 3  D6 00                        dec 0,x                 ; set success flag
0010FBr 3  D6 01                        dec 1,x
0010FDr 3               
0010FDr 3               @done:
0010FDr 3               z_digit_question:
0010FDr 3  60                           rts
0010FEr 3               
0010FEr 3               
0010FEr 3               ; ## DISASM ( addr u -- ) "Disassemble a block of memory"
0010FEr 3               ; ## "disasm"  tested  Tali Forth
0010FEr 3                       ; """Convert a segment of memory to assembler output. This
0010FEr 3                       ; word is vectored so people can add their own disassembler.
0010FEr 3                       ; Natively, this produces Simpler Assembly Notation (SAN)
0010FEr 3                       ; code, see the section on The Disassembler in the manual and
0010FEr 3                       ; the file disassembler.asm for more details.
0010FEr 3                       ; """
0010FEr 3               xt_disasm:
0010FEr 3  20 rr rr                     jsr underflow_2
001101r 3                           .ifdef TALI_OPTIONAL_ASSEMBLER
001101r 3  20 rr rr                     jsr disassembler
001104r 3                           .endif
001104r 3               
001104r 3  60           z_disasm:       rts
001105r 3               
001105r 3               
001105r 3               ; ## DNEGATE ( d -- d ) "Negate double cell number"
001105r 3               ; ## "dnegate"  auto  ANS double
001105r 3                       ; """https://forth-standard.org/standard/double/DNEGATE"""
001105r 3               xt_dnegate:
001105r 3  20 rr rr                     jsr underflow_2 ; double number
001108r 3               
001108r 3  A0 00             		ldy #0
00110Ar 3  38                           sec
00110Br 3               
00110Br 3  98                           tya
00110Cr 3  F5 02                        sbc 2,x         ; LSB of low cell
00110Er 3  95 02                        sta 2,x
001110r 3               
001110r 3  98                           tya
001111r 3  F5 03                        sbc 3,x         ; MSB of low cell
001113r 3  95 03                        sta 3,x
001115r 3               
001115r 3  98                           tya
001116r 3  F5 00                        sbc 0,x         ; LSB of high cell
001118r 3  95 00                        sta 0,x
00111Ar 3               
00111Ar 3  98                           tya
00111Br 3  F5 01                        sbc 1,x         ; MSB of high cell
00111Dr 3  95 01                        sta 1,x
00111Fr 3               
00111Fr 3  60           z_dnegate:      rts
001120r 3               
001120r 3               
001120r 3               ; ## QUESTION_DO ( limit start -- )(R: -- limit start) "Conditional loop start"
001120r 3               ; ## "?do"  auto  ANS core ext
001120r 3                       ; """https://forth-standard.org/standard/core/qDO"""
001120r 3               xt_question_do:
001120r 3                               ; ?DO shares most of its code with DO. We use the tmp1 flag
001120r 3                               ; to mark which is which
001120r 3  A9 FF                        lda #$ff                ; -1 is ?DO, jump to common code
001122r 3  85 rr                        sta tmp1
001124r 3  80 02                        bra do_common           ; skip flag for DO
001126r 3               
001126r 3               ; ## DO ( limit start -- )(R: -- limit start)  "Start a loop"
001126r 3               ; ## "do"  auto  ANS core
001126r 3                       ; """https://forth-standard.org/standard/core/DO
001126r 3                       ;
001126r 3                       ; Compile-time part of DO. Could be realized in Forth as
001126r 3                       ;       : DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY
001126r 3                       ; but we do it in assembler for speed. To work with LEAVE, we compile
001126r 3                       ; a routine that pushes the end address to the Return Stack at run
001126r 3                       ; time. This is based on a suggestion by Garth Wilson, see
001126r 3                       ; the Control Flow section of the manual for details.
001126r 3                       ;
001126r 3                       ; This may not be native compile. Don't check for a stack underflow
001126r 3                       ; """
001126r 3               
001126r 3               xt_do:
001126r 3                               ; DO and ?DO share most of their code, use tmp1 as a flag.
001126r 3  64 rr                        stz tmp1                ; 0 is DO, drop through to DO_COMMON
001128r 3               do_common:
001128r 3                               ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
001128r 3                               ; compile the address we need to LDA at runtime
001128r 3  CA                           dex
001129r 3  CA                           dex
00112Ar 3  A5 rr                        lda cp
00112Cr 3  95 00                        sta 0,x                 ; LSB
00112Er 3  A5 rr                        lda cp+1
001130r 3  95 01                        sta 1,x                 ; MSB   ( limit start here )
001132r 3               
001132r 3                               ; now we compile six dummy bytes that LOOP/+LOOP will
001132r 3                               ; replace by the actual LDA/PHA instructions
001132r 3  A9 05                        lda #5                  ; we don't really care about the value,
001134r 3  A8                           tay                     ; so we use 5 to be tricky
001135r 3               @loop:
001135r 3  91 rr                        sta (cp),y
001137r 3  88                           dey
001138r 3  10 FB                        bpl @loop
00113Ar 3               
00113Ar 3                               ; update CP
00113Ar 3  1A                           inc             ; we used 5 as a dummy value, this is why
00113Br 3  18                           clc
00113Cr 3  65 rr                        adc cp
00113Er 3  85 rr                        sta cp
001140r 3  90 02                        bcc @1
001142r 3  E6 rr                        inc cp+1
001144r 3               @1:
001144r 3                               ; compile the (?DO) portion of ?DO if appropriate
001144r 3  A5 rr                        lda tmp1
001146r 3  F0 17                        beq @compile_do
001148r 3               
001148r 3                               ; We came from ?DO, so compile its runtime first. We do
001148r 3                               ; this with a quick loop because we know it has to be
001148r 3                               ; Always Native anyway
001148r 3  A0 14                        ldy #question_do_runtime_end-question_do_runtime
00114Ar 3  5A                           phy             ; save counter to calculate new CP
00114Br 3               @2:
00114Br 3  B9 rr rr                     lda question_do_runtime,y
00114Er 3  91 rr                        sta (cp),y
001150r 3  88                           dey
001151r 3  10 F8                        bpl @2
001153r 3               
001153r 3                               ; adjust CP
001153r 3  68                           pla             ; retrieve counter
001154r 3  18                           clc
001155r 3  65 rr                        adc cp
001157r 3  85 rr                        sta cp
001159r 3  A5 rr                        lda cp+1
00115Br 3  69 00                        adc #0          ; only care about carry
00115Dr 3  85 rr                        sta cp+1        ; fall through to @compile_do
00115Fr 3               
00115Fr 3               @compile_do:
00115Fr 3                               ; compile runtime part of DO.
00115Fr 3  A0 24                        ldy #do_runtime_end-do_runtime  ; counter
001161r 3  5A                           phy             ; save counter to calculate new CP
001162r 3               @3:
001162r 3  B9 rr rr                     lda do_runtime,y
001165r 3  91 rr                        sta (cp),y
001167r 3  88                           dey
001168r 3  10 F8                        bpl @3
00116Ar 3               
00116Ar 3                               ; adjust CP
00116Ar 3  68                           pla             ; retrieve counter
00116Br 3  18                           clc
00116Cr 3  65 rr                        adc cp
00116Er 3  85 rr                        sta cp
001170r 3  A5 rr                        lda cp+1
001172r 3  69 00                        adc #0          ; only care about carry
001174r 3  85 rr                        sta cp+1
001176r 3               
001176r 3                               ; HERE, hardcoded for speed. We put it on the Data Stack
001176r 3                               ; where LOOP/+LOOP takes it from. Note this has nothing to
001176r 3                               ; do with the HERE we're saving for LEAVE
001176r 3  CA                           dex
001177r 3  CA                           dex
001178r 3  A5 rr                        lda cp          ; LSB
00117Ar 3  95 00                        sta 0,x
00117Cr 3  A5 rr                        lda cp+1        ; MSB
00117Er 3  95 01                        sta 1,x
001180r 3               z_question_do:
001180r 3  60           z_do:           rts
001181r 3               
001181r 3               
001181r 3               do_runtime:
001181r 3                       ; """Runtime routine for DO loop. Note that ANS loops quit when the
001181r 3                       ; boundry of limit-1 and limit is reached, a different mechanism than
001181r 3                       ; the FIG Forth loop (you can see which version you have by running
001181r 3                       ; a loop with start and limit as the same value, for instance
001181r 3                       ; 0 0 DO -- these will walk through the number space). We use a
001181r 3                       ; "fudge factor" for the limit that makes the Overflow Flag trip when
001181r 3                       ; it is reached; see http://forum.6502.org/viewtopic.php?f=9&t=2026
001181r 3                       ; for further discussion of this. The source given there for
001181r 3                       ; this idea is Laxen & Perry F83. -- This routine is called (DO)
001181r 3                       ; in some Forths. Usually, we would define this as a separate word
001181r 3                       ; and compile it with COMPILE, and the Always Native (AN) flag.
001181r 3                       ; However, we can do it faster if we just copy the bytes
001181r 3                       ; of this routine with a simple loop in DO.
001181r 3                       ; """
001181r 3                               ; First step: create fudge factor (FUFA) by subtracting the
001181r 3                               ; limit from $8000, the number that will trip the overflow
001181r 3                               ; flag
001181r 3  38                           sec
001182r 3  A9 00                        lda #0
001184r 3  F5 02                        sbc 2,x         ; LSB of limit
001186r 3  95 02                        sta 2,x         ; save FUFA for later use
001188r 3               
001188r 3  A9 80                        lda #$80
00118Ar 3  F5 03                        sbc 3,x         ; MSB of limit
00118Cr 3  95 03                        sta 3,x         ; save FUFA for later use
00118Er 3  48                           pha             ; FUFA replaces limit on R stack
00118Fr 3  B5 02                        lda 2,x         ; LSB of limit
001191r 3  48                           pha
001192r 3               
001192r 3                               ; Second step: index is FUFA plus original index
001192r 3  18                           clc
001193r 3  B5 00                        lda 0,x         ; LSB of original index
001195r 3  75 02                        adc 2,x         ; add LSB of FUFA
001197r 3  95 00                        sta 0,x
001199r 3  B5 01                        lda 1,x         ; MSB of orginal index
00119Br 3  75 03                        adc 3,x         ; add MSB of FUFA
00119Dr 3  48                           pha
00119Er 3  B5 00                        lda 0,x         ; LSB of index
0011A0r 3  48                           pha
0011A1r 3               
0011A1r 3                               ; we've saved the FUFA on the NOS of the R stack, so we can
0011A1r 3                               ; use it later. Clean the Data Stack
0011A1r 3  E8                           inx
0011A2r 3  E8                           inx
0011A3r 3  E8                           inx
0011A4r 3  E8                           inx             ; no RTS because this is copied into code
0011A5r 3               do_runtime_end:
0011A5r 3               
0011A5r 3               question_do_runtime:
0011A5r 3               
0011A5r 3                       ; """This is called (?DO) in some Forths. See the explanation at
0011A5r 3                       ; do_runtime for the background on this design
0011A5r 3                       ; """
0011A5r 3                               ; see if TOS and NOS are equal. Change this to assembler
0011A5r 3                               ; for speed
0011A5r 3  20 rr rr                     jsr xt_two_dup          ; ( n1 n2 n1 n2 )
0011A8r 3  20 rr rr                     jsr xt_equal            ; ( -- n1 n2 f )
0011ABr 3               
0011ABr 3  B5 00                        lda 0,x
0011ADr 3  15 01                        ora 1,x
0011AFr 3  F0 06                        beq @do_do
0011B1r 3               
0011B1r 3                               ; We're equal, so dump everything and jump beyond the loop.
0011B1r 3                               ; But first, dump six entries off of the Data Stack
0011B1r 3  8A                           txa
0011B2r 3  18                           clc
0011B3r 3  69 06                        adc #6
0011B5r 3  AA                           tax
0011B6r 3               
0011B6r 3                               ; Then abort the whole loop
0011B6r 3  60                           rts
0011B7r 3               @do_do:
0011B7r 3  E8                           inx             ; clear flag from EQUAL off stack
0011B8r 3  E8                           inx             ; no RTS because this is copied into code
0011B9r 3               question_do_runtime_end:
0011B9r 3               
0011B9r 3               
0011B9r 3               
0011B9r 3               ; ## DOES ( -- ) "Add payload when defining new words"
0011B9r 3               ; ## "does>"  auto  ANS core
0011B9r 3                       ; """https://forth-standard.org/standard/core/DOES
0011B9r 3                       ; Create the payload for defining new defining words. See
0011B9r 3                       ; http://www.bradrodriguez.com/papers/moving3.htm and
0011B9r 3                       ; the Developer Guide in the manual for a discussion of
0011B9r 3                       ; DOES>'s internal workings. This uses tmp1 and tmp2.
0011B9r 3                       ; """
0011B9r 3               
0011B9r 3               xt_does:
0011B9r 3                               ; compile a subroutine jump to runtime of DOES>
0011B9r 3  A0 rr                        ldy #>does_runtime
0011BBr 3  A9 rr                        lda #<does_runtime
0011BDr 3  20 rr rr                     jsr cmpl_subroutine
0011C0r 3               
0011C0r 3                               ; compile a subroutine jump to DODOES. In traditional
0011C0r 3                               ; terms, this is the Code Field Area (CFA) of the new
0011C0r 3                               ; word
0011C0r 3  A0 rr                        ldy #>dodoes
0011C2r 3  A9 rr                        lda #<dodoes
0011C4r 3  20 rr rr                     jsr cmpl_subroutine
0011C7r 3               
0011C7r 3  60           z_does:         rts
0011C8r 3               
0011C8r 3               
0011C8r 3               does_runtime:
0011C8r 3                       ; """Runtime portion of DOES>. This replaces the subroutine jump
0011C8r 3                       ; to DOVAR that CREATE automatically encodes by a jump to the
0011C8r 3                       ; address that contains a subroutine jump to DODOES. We don't
0011C8r 3                       ; jump to DODOES directly because we need to work our magic with
0011C8r 3                       ; the return addresses. This routine is also known as "(DOES)" in
0011C8r 3                       ; other Forths
0011C8r 3                       ; """
0011C8r 3               
0011C8r 3  7A                           ply             ; LSB
0011C9r 3  68                           pla             ; MSB
0011CAr 3               
0011CAr 3  C8                           iny
0011CBr 3  D0 01                        bne @1
0011CDr 3  1A                           inc
0011CEr 3               @1:
0011CEr 3  84 rr                        sty tmp1
0011D0r 3  85 rr                        sta tmp1+1
0011D2r 3               
0011D2r 3                               ; CREATE has also already modified the DP to point to the new
0011D2r 3                               ; word. We have no idea which instructions followed the CREATE
0011D2r 3                               ; command if there is a DOES> so the CP could point anywhere
0011D2r 3                               ; by now. The address of the word's xt is four bytes down.
0011D2r 3  20 rr rr                     jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
0011D5r 3  A5 rr                        lda dp
0011D7r 3  18                           clc
0011D8r 3  69 04                        adc #4
0011DAr 3  85 rr                        sta tmp2
0011DCr 3  A5 rr                        lda dp+1
0011DEr 3  69 00                        adc #0          ; we only care about the carry
0011E0r 3  85 rr                        sta tmp2+1
0011E2r 3               
0011E2r 3                               ; Now we get that address and add one byte to skip over the JSR
0011E2r 3                               ; opcode
0011E2r 3  B2 rr                        lda (tmp2)
0011E4r 3  18                           clc
0011E5r 3  69 01                        adc #1
0011E7r 3  85 rr                        sta tmp3
0011E9r 3  A0 01                        ldy #1
0011EBr 3  B1 rr                        lda (tmp2),y
0011EDr 3  69 00                        adc #0          ; we only care about the carry
0011EFr 3  85 rr                        sta tmp3+1
0011F1r 3               
0011F1r 3                               ; Replace the DOVAR address with our own
0011F1r 3  A5 rr                        lda tmp1        ; LSB
0011F3r 3  92 rr                        sta (tmp3)
0011F5r 3  A5 rr                        lda tmp1+1
0011F7r 3  91 rr                        sta (tmp3),y    ; Y is still 1
0011F9r 3               
0011F9r 3                               ; Since we removed the return address that brought us here, we
0011F9r 3                               ; go back to whatever the main routine was. Otherwise, we we
0011F9r 3                               ; smash into the subroutine jump to DODOES.
0011F9r 3  60                           rts
0011FAr 3               
0011FAr 3               
0011FAr 3               
0011FAr 3               ; ## DOT ( u -- ) "Print TOS"
0011FAr 3               ; ## "."  auto  ANS core
0011FAr 3                       ; """https://forth-standard.org/standard/core/d"""
0011FAr 3               
0011FAr 3               xt_dot:
0011FAr 3  20 rr rr                     jsr underflow_1
0011FDr 3               
0011FDr 3  20 rr rr                     jsr xt_dup                      ; ( n n )
001200r 3  20 rr rr                     jsr xt_abs                      ; ( n u )
001203r 3  20 rr rr                     jsr xt_zero                     ; ( n u 0 )
001206r 3  20 rr rr                     jsr xt_less_number_sign         ; ( n u 0 )
001209r 3  20 rr rr                     jsr xt_number_sign_s            ; ( n ud )
00120Cr 3  20 rr rr                     jsr xt_rot                      ; ( ud n )
00120Fr 3  20 rr rr                     jsr xt_sign                     ; ( ud )
001212r 3  20 rr rr                     jsr xt_number_sign_greater      ; ( addr u )
001215r 3  20 rr rr                     jsr xt_type
001218r 3  20 rr rr                     jsr xt_space
00121Br 3               
00121Br 3  60           z_dot:          rts
00121Cr 3               
00121Cr 3               
00121Cr 3               
00121Cr 3               ; ## DOT_PAREN ( -- ) "Print input up to close paren .( comment )"
00121Cr 3               ; ## ".("  auto  ANS core
00121Cr 3                       ; """http://forth-standard.org/standard/core/Dotp"""
00121Cr 3               
00121Cr 3               xt_dot_paren:
00121Cr 3                               ; Put a right paren on the stack.
00121Cr 3  CA                           dex
00121Dr 3  CA                           dex
00121Er 3  A9 29                        lda #41     ; Right parenthesis
001220r 3  95 00                        sta 0,x
001222r 3  74 01                        stz 1,x
001224r 3               
001224r 3  20 rr rr                     jsr xt_parse
001227r 3  20 rr rr                     jsr xt_type
00122Ar 3               
00122Ar 3  60           z_dot_paren:    rts
00122Br 3               
00122Br 3               
00122Br 3               
00122Br 3               ; ## DOT_QUOTE ( "string" -- ) "Print string from compiled word"
00122Br 3               ; ## ".""  auto  ANS core ext
00122Br 3                       ; """https://forth-standard.org/standard/core/Dotq
00122Br 3                       ; Compile string that is printed during run time. ANS Forth wants
00122Br 3                       ; this to be compile-only, even though everybody and their friend
00122Br 3                       ; uses it for everything. We follow the book here, and recommend
00122Br 3                       ; `.(` for general printing.
00122Br 3                       ; """
00122Br 3               
00122Br 3               xt_dot_quote:
00122Br 3                               ; we let S" do the heavy lifting. Since we're in
00122Br 3                               ; compile mode, it will save the string and reproduce it
00122Br 3                               ; during runtime
00122Br 3  20 rr rr                     jsr xt_s_quote
00122Er 3               
00122Er 3                               ; We then let TYPE do the actual printing
00122Er 3  A0 rr                        ldy #>xt_type
001230r 3  A9 rr                        lda #<xt_type
001232r 3  20 rr rr                     jsr cmpl_subroutine
001235r 3               
001235r 3  60           z_dot_quote:    rts
001236r 3               
001236r 3               
001236r 3               
001236r 3               ; ## DOT_R ( n u -- ) "Print NOS as unsigned number with TOS with"
001236r 3               ; ## ".r"  tested  ANS core ext
001236r 3                       ; """https://forth-standard.org/standard/core/DotR
001236r 3                       ;
001236r 3                       ; Based on the Forth code
001236r 3                       ;  : .R  >R DUP ABS 0 <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
001236r 3                       ; """
001236r 3               
001236r 3               xt_dot_r:
001236r 3  20 rr rr                     jsr underflow_2
001239r 3               
001239r 3  20 rr rr                     jsr xt_to_r
00123Cr 3  20 rr rr                     jsr xt_dup
00123Fr 3  20 rr rr                     jsr xt_abs
001242r 3  20 rr rr                     jsr xt_zero
001245r 3  20 rr rr                     jsr xt_less_number_sign
001248r 3  20 rr rr                     jsr xt_number_sign_s
00124Br 3  20 rr rr                     jsr xt_rot
00124Er 3  20 rr rr                     jsr xt_sign
001251r 3  20 rr rr                     jsr xt_number_sign_greater
001254r 3  20 rr rr                     jsr xt_r_from
001257r 3  20 rr rr                     jsr xt_over
00125Ar 3  20 rr rr                     jsr xt_minus
00125Dr 3  20 rr rr                     jsr xt_spaces
001260r 3  20 rr rr                     jsr xt_type
001263r 3               
001263r 3  60           z_dot_r:        rts
001264r 3               
001264r 3               
001264r 3               
001264r 3               ; ## DOT_S ( -- ) "Print content of Data Stack"
001264r 3               ; ## ".s"  tested  ANS tools
001264r 3                       ; """https://forth-standard.org/standard/tools/DotS
001264r 3                       ; Print content of Data Stack non-distructively. We follow the format
001264r 3                       ; of Gforth and print the number of elements first in brackets,
001264r 3                       ; followed by the Data Stack content (if any).
001264r 3                       ;
001264r 3                       ; Since this is for humans, we don't have to worry about speed.
001264r 3                       ; """
001264r 3               
001264r 3               xt_dot_s:
001264r 3  20 rr rr                     jsr xt_depth    ; ( -- u )
001267r 3               
001267r 3                               ; Print stack depth in brackets
001267r 3  A9 3C                        lda #$3c        ; ASCII for "<"
001269r 3  20 rr rr                     jsr emit_a
00126Cr 3               
00126Cr 3                               ; We keep a copy of the number of the things on the stack
00126Cr 3                               ; to use as a counter later down. This assumes that there
00126Cr 3                               ; are less than 255 elements on the stack
00126Cr 3  B5 00                        lda 0,x
00126Er 3  48                           pha
00126Fr 3               
00126Fr 3                               ; print unsigned number without the trailing space
00126Fr 3  CA                           dex             ; DUP
001270r 3  CA                           dex
001271r 3  95 00                        sta 0,x
001273r 3  74 01                        stz 1,x
001275r 3               
001275r 3  20 rr rr                     jsr print_u
001278r 3               
001278r 3  A9 3E                        lda #$3e        ; ASCII for ">"
00127Ar 3  20 rr rr                     jsr emit_a
00127Dr 3  A9 20                        lda #AscSP      ; ASCII for SPACE
00127Fr 3  20 rr rr                     jsr emit_a
001282r 3               
001282r 3  E8                           inx
001283r 3  E8                           inx
001284r 3               
001284r 3                               ; There will be lots of cases where the stack is empty. If that
001284r 3                               ; is so, get out of here quickly
001284r 3  E0 rr                        cpx #dsp0
001286r 3  F0 1E                        beq @done
001288r 3               
001288r 3               @have_stack:
001288r 3                               ; We have at least one element on the stack. The depth of the
001288r 3                               ; stack is on the stack, we can use it as a counter. We go
001288r 3                               ; from bottom to top
001288r 3  7A                           ply
001289r 3               
001289r 3  A9 rr                        lda #dsp0-1     ; go up one to avoid garbage
00128Br 3  85 rr                        sta tmp3
00128Dr 3  64 rr                        stz tmp3+1      ; must be zero page on the 65c02
00128Fr 3               @loop:
00128Fr 3  CA                           dex
001290r 3  CA                           dex
001291r 3               
001291r 3  B2 rr                        lda (tmp3)
001293r 3  95 01                        sta 1,x
001295r 3  C6 rr                        dec tmp3
001297r 3               
001297r 3  B2 rr                        lda (tmp3)
001299r 3  95 00                        sta 0,x
00129Br 3  C6 rr                        dec tmp3
00129Dr 3  5A                           phy
00129Er 3               
00129Er 3  20 rr rr                     jsr xt_dot
0012A1r 3               
0012A1r 3  7A                           ply
0012A2r 3  88                           dey
0012A3r 3  D0 EA                        bne @loop
0012A5r 3               
0012A5r 3  48                           pha             ; dummy to balance stack
0012A6r 3               @done:
0012A6r 3  68                           pla
0012A7r 3  60           z_dot_s:        rts
0012A8r 3               
0012A8r 3               
0012A8r 3               
0012A8r 3               ; ## D_DOT ( d -- ) "Print double"
0012A8r 3               ; ## "d."  tested  ANS double
0012A8r 3                       ; """http://forth-standard.org/standard/double/Dd"""
0012A8r 3                       ;
0012A8r 3                       ; From the Forth code:
0012A8r 3                       ; : D. TUCK DABS <# #S ROT SIGN #> TYPE SPACE ;
0012A8r 3                       ; """
0012A8r 3               
0012A8r 3               xt_d_dot:
0012A8r 3  20 rr rr                     jsr underflow_2
0012ABr 3               
0012ABr 3  20 rr rr                     jsr xt_tuck
0012AEr 3  20 rr rr                     jsr xt_dabs
0012B1r 3  20 rr rr                     jsr xt_less_number_sign
0012B4r 3  20 rr rr                     jsr xt_number_sign_s
0012B7r 3  20 rr rr                     jsr xt_rot
0012BAr 3  20 rr rr                     jsr xt_sign
0012BDr 3  20 rr rr                     jsr xt_number_sign_greater
0012C0r 3  20 rr rr                     jsr xt_type
0012C3r 3  20 rr rr                     jsr xt_space
0012C6r 3               
0012C6r 3  60           z_d_dot:        rts
0012C7r 3               
0012C7r 3               
0012C7r 3               
0012C7r 3               ; ## D_DOT_R ( d u -- ) "Print double right-justified u wide"
0012C7r 3               ; ## "d.r"  tested  ANS double
0012C7r 3                       ; """http://forth-standard.org/standard/double/DDotR"""
0012C7r 3                       ; Based on the Forth code
0012C7r 3                       ;  : D.R >R TUCK DABS <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
0012C7r 3                       ; """
0012C7r 3               
0012C7r 3               xt_d_dot_r:
0012C7r 3  20 rr rr                     jsr underflow_3
0012CAr 3                               ; From the forth code:
0012CAr 3  20 rr rr                     jsr xt_to_r
0012CDr 3  20 rr rr                     jsr xt_tuck
0012D0r 3  20 rr rr                     jsr xt_dabs
0012D3r 3  20 rr rr                     jsr xt_less_number_sign
0012D6r 3  20 rr rr                     jsr xt_number_sign_s
0012D9r 3  20 rr rr                     jsr xt_rot
0012DCr 3  20 rr rr                     jsr xt_sign
0012DFr 3  20 rr rr                     jsr xt_number_sign_greater
0012E2r 3  20 rr rr                     jsr xt_r_from
0012E5r 3  20 rr rr                     jsr xt_over
0012E8r 3  20 rr rr                     jsr xt_minus
0012EBr 3  20 rr rr                     jsr xt_spaces
0012EEr 3  20 rr rr                     jsr xt_type
0012F1r 3               
0012F1r 3  60           z_d_dot_r:      rts
0012F2r 3               
0012F2r 3               
0012F2r 3               
0012F2r 3               ; ## DROP ( u -- ) "Pop top entry on Data Stack"
0012F2r 3               ; ## "drop"  auto  ANS core
0012F2r 3                       ; """https://forth-standard.org/standard/core/DROP"""
0012F2r 3               xt_drop:
0012F2r 3  20 rr rr                     jsr underflow_1
0012F5r 3               
0012F5r 3  E8                           inx
0012F6r 3  E8                           inx
0012F7r 3               
0012F7r 3  60           z_drop:         rts
0012F8r 3               
0012F8r 3               
0012F8r 3               ; ## DUMP ( addr u -- ) "Display a memory region"
0012F8r 3               ; ## "dump"  tested  ANS tools
0012F8r 3                       ; """https://forth-standard.org/standard/tools/DUMP
0012F8r 3                       ;
0012F8r 3                       ; DUMP's exact output is defined as "implementation dependent".
0012F8r 3                       ; This is in assembler because it is
0012F8r 3                       ; useful for testing and development, so we want to have it work
0012F8r 3                       ; as soon as possible. Uses TMP2
0012F8r 3                       ; """
0012F8r 3               
0012F8r 3               xt_dump:
0012F8r 3  20 rr rr                     jsr underflow_2
0012FBr 3               @row:
0012FBr 3                               ; start counter for 16 numbers per row
0012FBr 3  A0 10                        ldy #16
0012FDr 3               
0012FDr 3                               ; We use TMP2 as the index for the ASCII characters
0012FDr 3                               ; that we print at the and of the hex block. We
0012FDr 3                               ; start saving them at HERE (CP)
0012FDr 3  64 rr                        stz tmp2
0012FFr 3               
0012FFr 3  20 rr rr                     jsr xt_cr
001302r 3               
001302r 3                               ; print address number
001302r 3  B5 03                        lda 3,x
001304r 3  20 rr rr                     jsr byte_to_ascii
001307r 3  B5 02                        lda 2,x
001309r 3  20 rr rr                     jsr byte_to_ascii
00130Cr 3               
00130Cr 3  20 rr rr                     jsr xt_space
00130Fr 3  20 rr rr                     jsr xt_space
001312r 3               @loop:
001312r 3                               ; if there are zero bytes left to display, we're done
001312r 3  B5 00                        lda 0,x
001314r 3  15 01                        ora 1,x
001316r 3  F0 39                        beq @all_printed
001318r 3               
001318r 3                               ; dump the contents
001318r 3  A1 02                        lda (2,x)
00131Ar 3  48                           pha                     ; byte_to_ascii destroys A
00131Br 3  20 rr rr                     jsr byte_to_ascii
00131Er 3  20 rr rr                     jsr xt_space
001321r 3  68                           pla
001322r 3               
001322r 3                               ; Handle ASCII printing
001322r 3  20 rr rr                     jsr is_printable
001325r 3  B0 02                        bcs @printable
001327r 3  A9 2E                        lda #'.'                 ; Print dot if not printable
001329r 3               @printable:
001329r 3  5A                           phy                     ; save counter
00132Ar 3  A4 rr                        ldy tmp2
00132Cr 3  91 rr                        sta (cp),y
00132Er 3  E6 rr                        inc tmp2
001330r 3  7A                           ply
001331r 3               
001331r 3                               ; extra space after eight bytes
001331r 3  C0 09                        cpy #9
001333r 3  D0 03                        bne @next_char
001335r 3  20 rr rr                     jsr xt_space
001338r 3               
001338r 3               @next_char:
001338r 3  F6 02                        inc 2,x
00133Ar 3  D0 02                        bne @counter
00133Cr 3  F6 03                        inc 3,x
00133Er 3               
00133Er 3               @counter:
00133Er 3                               ; loop counter
00133Er 3  B5 00                        lda 0,x
001340r 3  D0 02                        bne @1
001342r 3  D6 01                        dec 1,x
001344r 3               @1:
001344r 3  D6 00                        dec 0,x
001346r 3  88                           dey
001347r 3  D0 C9                        bne @loop               ; next byte
001349r 3               
001349r 3                               ; Done with one line, print the ASCII version of these
001349r 3                               ; characters
001349r 3  20 rr rr                     jsr xt_space
00134Cr 3  20 rr rr                     jsr print_ascii
00134Fr 3               
00134Fr 3  80 AA                        bra @row                ; new row
001351r 3               
001351r 3               @all_printed:
001351r 3                               ; See if there are any ASCII characters in the buffer
001351r 3                               ; left to print
001351r 3  A5 rr                        lda tmp2
001353r 3  F0 06                        beq @done
001355r 3               
001355r 3                               ; In theory, we could try to make the ASCII part line
001355r 3                               ; up with the line before it. But that is a hassle (we
001355r 3                               ; use three bytes for each missed hex entry, and
001355r 3                               ; then there is the gap after eight entries) and it
001355r 3                               ; makes it harder to read. We settle for one extra
001355r 3                               ; space instead for the moment
001355r 3  20 rr rr                     jsr xt_space
001358r 3  20 rr rr                     jsr print_ascii
00135Br 3               @done:
00135Br 3  20 rr rr                     jsr xt_two_drop         ; one byte less than 4x INX
00135Er 3  60           z_dump:         rts
00135Fr 3               
00135Fr 3               
00135Fr 3               print_ascii:
00135Fr 3                               ; Print the ASCII characters that we have saved from
00135Fr 3                               ; HERE (CP) to HERE plus whatever is in TMP2. This routine
00135Fr 3                               ; is not compiled (DUMP is probably never compiled anyway)
00135Fr 3                               ; but we keep it inside the scope of DUMP.
00135Fr 3  A0 00                        ldy #0
001361r 3               @ascii_loop:
001361r 3  B1 rr                        lda (cp),y
001363r 3  20 rr rr                     jsr emit_a
001366r 3  C8                           iny
001367r 3               
001367r 3                               ; extra space after eight chars
001367r 3  C0 08                        cpy #8
001369r 3  D0 03                        bne @1
00136Br 3  20 rr rr                     jsr xt_space
00136Er 3               @1:
00136Er 3  C6 rr                        dec tmp2
001370r 3  D0 EF                        bne @ascii_loop
001372r 3               
001372r 3  60                           rts
001373r 3               
001373r 3               
001373r 3               
001373r 3               ; ## DUP ( u -- u u ) "Duplicate TOS"
001373r 3               ; ## "dup"  auto  ANS core
001373r 3                       ; """https://forth-standard.org/standard/core/DUP"""
001373r 3               xt_dup:
001373r 3  20 rr rr                     jsr underflow_1
001376r 3               
001376r 3  CA                           dex
001377r 3  CA                           dex
001378r 3               
001378r 3  B5 02                        lda 2,x         ; LSB
00137Ar 3  95 00                        sta 0,x
00137Cr 3  B5 03                        lda 3,x         ; MSB
00137Er 3  95 01                        sta 1,x
001380r 3               
001380r 3  60           z_dup:          rts
001381r 3               
001381r 3               
001381r 3               ; ## ED ( -- u ) "Line-based editor"
001381r 3               ; ## "ed"  fragment  Tali Forth
001381r 3                       ; """Start the line-based editor ed6502. See separate file
001381r 3                       ; ed.asm or the manual for details.
001381r 3                       ; """
001381r 3               xt_ed:
001381r 3                       .ifdef ed6502
001381r 3                               jsr ed6502      ; kept in separate file
001381r 3                       .endif
001381r 3               
001381r 3  60           z_ed:           rts
001382r 3               
001382r 3               
001382r 3               ; ## EDITOR_WORDLIST ( -- u ) "WID for the Editor wordlist"
001382r 3               ; ## "editor-wordlist"  tested  Tali Editor
001382r 3                       ; """ Commonly used like `editor-wordlist >order` to add the editor
001382r 3                       ; words to the search order so they can be used.  This will need
001382r 3                       ; to be done before any of the words marked "Tali Editor" can be
001382r 3                       ; used.  See the tutorial on Wordlists and the Search Order for
001382r 3                       ; more information.
001382r 3               
001382r 3                       ;
001382r 3                       ; This is a dummy entry, the code is shared with ONE
001382r 3                       ; """
001382r 3               
001382r 3               
001382r 3               ; ## ELSE (C: orig -- orig) ( -- ) "Conditional flow control"
001382r 3               ; ## "else"  auto  ANS core
001382r 3                       ; """http://forth-standard.org/standard/core/ELSE
001382r 3                       ;
001382r 3                       ; The code is shared with ENDOF
001382r 3                       ; """
001382r 3               
001382r 3               xt_else:
001382r 3               xt_endof:
001382r 3                               ; Put an unconditional branch.
001382r 3  A0 rr                        ldy #>branch_runtime
001384r 3  A9 rr                        lda #<branch_runtime
001386r 3  20 rr rr                     jsr cmpl_subroutine
001389r 3               
001389r 3                               ; Put the address of the branch address on the stack.
001389r 3  20 rr rr                     jsr xt_here
00138Cr 3               
00138Cr 3                               ; Use zero for the branch address for now.
00138Cr 3                               ; THEN will fill it in later.
00138Cr 3  20 rr rr                     jsr xt_zero
00138Fr 3  20 rr rr                     jsr xt_comma
001392r 3               
001392r 3                               ; Get the address to jump to (just after the
001392r 3                               ; unconditional branch) for the IF to jump to
001392r 3                               ; when false.
001392r 3  20 rr rr                     jsr xt_here
001395r 3  20 rr rr                     jsr xt_rot
001398r 3               
001398r 3                               ; Update the original if 0branch address.
001398r 3  20 rr rr                     jsr xt_store
00139Br 3               z_else:
00139Br 3               z_endof:
00139Br 3  60                           rts
00139Cr 3               
00139Cr 3               
00139Cr 3               
00139Cr 3               branch_runtime:
00139Cr 3                       ; """Runtime component for a branch. Used by ELSE and ENDOF. This was
00139Cr 3                       ; formally part of a separate word BRANCH which was later removed.
00139Cr 3                       ; """
00139Cr 3               
00139Cr 3                               ; The address on the Return Stack points to the last byte
00139Cr 3                               ; of the JSR address, one byte below the branch literal
00139Cr 3  68                           pla
00139Dr 3  85 rr                        sta tmpbranch
00139Fr 3  68                           pla
0013A0r 3  85 rr                        sta tmpbranch+1
0013A2r 3               
0013A2r 3                               ; Keep in mind: the address we just popped points one byte
0013A2r 3                               ; lower than the branch literal we want to grab
0013A2r 3  A0 01                        ldy #1
0013A4r 3  B1 rr                        lda (tmpbranch),y  ; LSB
0013A6r 3  85 rr                        sta tmp1
0013A8r 3  C8                           iny
0013A9r 3  B1 rr                        lda (tmpbranch),y  ; MSB
0013ABr 3  85 rr                        sta tmp1+1
0013ADr 3               
0013ADr 3  6C rr rr                     jmp (tmp1)
0013B0r 3               
0013B0r 3               
0013B0r 3               
0013B0r 3               ; ## EMIT ( char -- ) "Print character to current output"
0013B0r 3               ; ## "emit"  auto  ANS core
0013B0r 3                       ; """https://forth-standard.org/standard/core/EMIT
0013B0r 3                       ; Run-time default for EMIT. The user can revector this by changing
0013B0r 3                       ; the value of the OUTPUT variable. We ignore the MSB completely, and
0013B0r 3                       ; do not check to see if we have been given a valid ASCII character.
0013B0r 3                       ; Don't make this native compile.
0013B0r 3                       ; """
0013B0r 3               
0013B0r 3               xt_emit:
0013B0r 3  20 rr rr                     jsr underflow_1
0013B3r 3               
0013B3r 3  B5 00                        lda 0,x
0013B5r 3  E8                           inx
0013B6r 3  E8                           inx
0013B7r 3               
0013B7r 3               emit_a:
0013B7r 3                       ; We frequently want to print the character in A without fooling
0013B7r 3                       ; around with the Data Stack. This is emit_a's job, which still
0013B7r 3                       ; allows the output to be vectored. Call it with JSR as you
0013B7r 3                       ; would XT_EMIT
0013B7r 3  6C rr rr                     jmp (output)            ; JSR/RTS
0013BAr 3               
0013BAr 3               z_emit:         ; never reached
0013BAr 3               
0013BAr 3               
0013BAr 3               
0013BAr 3               ; ## EMPTY_BUFFERS ( -- ) "Empty all buffers without saving"
0013BAr 3               ; ## "empty-buffers"  tested  ANS block ext
0013BAr 3                       ; """https://forth-standard.org/standard/block/EMPTY-BUFFERS"""
0013BAr 3               xt_empty_buffers:
0013BAr 3                               ; Set the buffer status to empty.
0013BAr 3  A0 2C                        ldy #buffstatus_offset
0013BCr 3  A9 00                        lda #0
0013BEr 3  91 rr                        sta (up),y      ; Only LSB is used.
0013C0r 3               z_empty_buffers:
0013C0r 3  60                           rts
0013C1r 3               
0013C1r 3               
0013C1r 3               ; ## ENDCASE (C: case-sys -- ) ( x -- ) "Conditional flow control"
0013C1r 3               ; ## "endcase"  auto  ANS core ext
0013C1r 3                       ; """http://forth-standard.org/standard/core/ENDCASE"""
0013C1r 3               
0013C1r 3               xt_endcase:
0013C1r 3                               ; Postpone DROP to remove the item
0013C1r 3                               ; being checked.
0013C1r 3  A0 rr                        ldy #>xt_drop
0013C3r 3  A9 rr                        lda #<xt_drop
0013C5r 3  20 rr rr                     jsr cmpl_subroutine
0013C8r 3               
0013C8r 3                               ; There are a number of address (of branches that need their
0013C8r 3                               ; jump addressed filled in with the address of right here).
0013C8r 3                               ; Keep calling THEN to deal with them until we reach the
0013C8r 3                               ; 0 that CASE put on the stack at the beginning.
0013C8r 3               @endcase_loop:
0013C8r 3                               ; Check for 0 on the stack.
0013C8r 3  B5 00                        lda 0,x
0013CAr 3  15 01                        ora 1,x
0013CCr 3  F0 05                        beq @done
0013CEr 3               
0013CEr 3  20 rr rr                     jsr xt_then
0013D1r 3  80 F5                        bra @endcase_loop
0013D3r 3               @done:
0013D3r 3                               ; Remove the 0 from the stack.
0013D3r 3  E8                           inx
0013D4r 3  E8                           inx
0013D5r 3  60           z_endcase:      rts
0013D6r 3               
0013D6r 3               
0013D6r 3               
0013D6r 3               ; ## ENDOF (C: case-sys1 of-sys1-- case-sys2) ( -- ) "Conditional flow control"
0013D6r 3               ; ## "endof"  auto  ANS core ext
0013D6r 3                       ; """http://forth-standard.org/standard/core/ENDOF
0013D6r 3                       ; This is a dummy entry, the code is shared with ELSE
0013D6r 3                       ; """
0013D6r 3               
0013D6r 3               
0013D6r 3               ; ## ENVIRONMENT_Q  ( addr u -- 0 | i*x true )  "Return system information"
0013D6r 3               ; ## "environment?"  auto  ANS core
0013D6r 3                       ; """https://forth-standard.org/standard/core/ENVIRONMENTq
0013D6r 3                       ;
0013D6r 3                       ; By ANS definition, we use upper-case strings here, see the
0013D6r 3                       ; string file for details. This can be realized as a high-level
0013D6r 3                       ; Forth word as
0013D6r 3                       ;
0013D6r 3                       ; : STRING_OF POSTPONE 2OVER POSTPONE COMPARE POSTPONE 0=
0013D6r 3                       ;    POSTPONE IF POSTPONE 2DROP ; IMMEDIATE COMPILE-ONLY
0013D6r 3                       ; HEX
0013D6r 3                       ; : ENVIRONMENT? ( C-ADDR U -- FALSE | I*X TRUE )
0013D6r 3                       ; CASE
0013D6r 3                       ; S" /COUNTED-STRING"    STRING_OF  7FFF TRUE ENDOF
0013D6r 3                       ; S" /HOLD"              STRING_OF    FF TRUE ENDOF
0013D6r 3                       ; S" /PAD"               STRING_OF    54 TRUE ENDOF ( 84 DECIMAL )
0013D6r 3                       ; S" ADDRESS-UNIT-BITS"  STRING_OF     8 TRUE ENDOF
0013D6r 3                       ; S" FLOORED"            STRING_OF FALSE TRUE ENDOF ( WE HAVE SYMMETRIC )
0013D6r 3                       ; S" MAX-CHAR"           STRING_OF   255 TRUE ENDOF
0013D6r 3                       ; S" MAX-D"              STRING_OF
0013D6r 3                                                    ; 7FFFFFFF. TRUE ENDOF
0013D6r 3                       ; S" MAX-N"              STRING_OF  7FFF TRUE ENDOF
0013D6r 3                       ; S" MAX-U"              STRING_OF  FFFF TRUE ENDOF
0013D6r 3                       ; S" MAX-UD"             STRING_OF
0013D6r 3                                                    ; FFFFFFFF. TRUE ENDOF
0013D6r 3                       ; S" RETURN-STACK-CELLS" STRING_OF    80 TRUE ENDOF
0013D6r 3                       ; S" STACK-CELLS"        STRING_OF    20 TRUE ENDOF ( FROM DEFINITIONS.ASM )
0013D6r 3                       ; ( DEFAULT ) 2DROP FALSE FALSE ( ONE FALSE WILL DROPPED BY ENDCASE )
0013D6r 3                       ; ENDCASE ;
0013D6r 3                       ;
0013D6r 3                       ; but that uses lots of memory and increases the start up time. This
0013D6r 3                       ; word is rarely used so we can try to keep it short at the expense
0013D6r 3                       ; of speed.
0013D6r 3                       ; """
0013D6r 3               
0013D6r 3               xt_environment_q:
0013D6r 3  20 rr rr                     jsr underflow_1
0013D9r 3               
0013D9r 3                               ; This code is table-driven: We walk through the list of
0013D9r 3                               ; strings until we find one that matches, and then we take
0013D9r 3                               ; the equivalent data from the results table. This is made
0013D9r 3                               ; a bit harder by the fact that some of these return a
0013D9r 3                               ; double-cell number and some a single-cell one.
0013D9r 3               
0013D9r 3                               ; We will walk through the table with variables that return
0013D9r 3                               ; a single-cell result
0013D9r 3  A0 00                        ldy #00                 ; counter for table
0013DBr 3               
0013DBr 3                               ; We use a flag on the the stack to signal if we have a single-cell
0013DBr 3                               ; or double-cell number. We use 0 to signal single-cell and 1 for
0013DBr 3                               ; double-cell.
0013DBr 3  5A                           phy
0013DCr 3               @table_loop:
0013DCr 3                               ; We arrived here with the address of the string to be checked
0013DCr 3                               ; on the stack. We make a copy. Index is in Y
0013DCr 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
0013DFr 3               
0013DFr 3                               ; We do our work on the TOS to speed things up
0013DFr 3  CA                           dex
0013E0r 3  CA                           dex                     ; ( addr u addr u ? )
0013E1r 3               
0013E1r 3                               ; Get address of string to check from table
0013E1r 3  B9 rr rr                     lda env_table_single,y
0013E4r 3  95 00                        sta 0,x
0013E6r 3  C8                           iny
0013E7r 3  B9 rr rr                     lda env_table_single,y
0013EAr 3  95 01                        sta 1,x                 ; ( addr u addr u addr-t )
0013ECr 3  C8                           iny
0013EDr 3               
0013EDr 3                               ; See if this is the last entry. The LSB is still in A
0013EDr 3  15 00                        ora 0,x
0013EFr 3  F0 4D                        beq @table_done
0013F1r 3               
0013F1r 3                               ; We have a string entry. The address there is stored in
0013F1r 3                               ; old-style address format, that is, the first byte is the
0013F1r 3                               ; length of the string
0013F1r 3  5A                           phy                     ; save Y, which is used by COUNT
0013F2r 3  20 rr rr                     jsr xt_count            ; ( addr u addr u addr-s u-s )
0013F5r 3  20 rr rr                     jsr xt_compare          ; ( addr u f )
0013F8r 3  7A                           ply
0013F9r 3               
0013F9r 3                               ; If we found a match (flag is zero -- COMPARE is weird
0013F9r 3                               ; that way), return the result
0013F9r 3  B5 00                        lda 0,x
0013FBr 3  15 01                        ora 1,x
0013FDr 3  F0 04                        beq @got_result
0013FFr 3               
0013FFr 3                               ; Flag is not zero, so not a perfect match, so try next
0013FFr 3                               ; word
0013FFr 3  E8                           inx                     ; DROP, now ( addr u )
001400r 3  E8                           inx
001401r 3               
001401r 3  80 D9                        bra @table_loop
001403r 3               
001403r 3               @got_result:
001403r 3                               ; We arrive here with ( addr u -1 ) and know that we've found
001403r 3                               ; a match. The index of the match+2 is in Y.
001403r 3  E8                           inx                     ; drop flag, now ( addr u )
001404r 3  E8                           inx
001405r 3  88                           dey                     ; go back to index we had
001406r 3  88                           dey
001407r 3               
001407r 3                               ; See if this is a single-cell word.
001407r 3  68                           pla
001408r 3  D0 0D                        bne @double_result
00140Ar 3               
00140Ar 3                               ; Single-cell result
00140Ar 3  B9 rr rr                     lda env_results_single,y
00140Dr 3  95 02                        sta 2,x
00140Fr 3  C8                           iny
001410r 3  B9 rr rr                     lda env_results_single,y
001413r 3  95 03                        sta 3,x                 ; ( res u )
001415r 3               
001415r 3  80 1F                        bra @set_flag
001417r 3               
001417r 3               @double_result:
001417r 3                               ; This is a double-celled result, which means we have to
001417r 3                               ; fool around with the index some more. We also need a
001417r 3                               ; further cell on the stack
001417r 3  CA                           dex                     ; ( addr u ? )
001418r 3  CA                           dex
001419r 3               
001419r 3                               ; We have 11 single-cell words we check, plus the 0000 as
001419r 3                               ; a marker for the end of the table, so we arrive here
001419r 3                               ; with Y as 22 or more. To get the index for the double-
001419r 3                               ; cell words, we move the result
001419r 3  98                           tya
00141Ar 3  38                           sec
00141Br 3  E9 18                        sbc #24
00141Dr 3               
00141Dr 3                               ; We have four bytes per entry in the table, but the index
00141Dr 3                               ; keeps increasing by two, so we only have to multiply by
00141Dr 3                               ; two (shift left once) to get the right result
00141Dr 3  0A                           asl
00141Er 3  A8                           tay
00141Fr 3               
00141Fr 3  B9 rr rr                     lda env_results_double,y
001422r 3  95 02                        sta 2,x
001424r 3  C8                           iny
001425r 3  B9 rr rr                     lda env_results_double,y
001428r 3  95 03                        sta 3,x                 ; ( res u ? )
00142Ar 3  C8                           iny
00142Br 3               
00142Br 3  B9 rr rr                     lda env_results_double,y
00142Er 3  95 04                        sta 4,x
001430r 3  C8                           iny
001431r 3  B9 rr rr                     lda env_results_double,y
001434r 3  95 05                        sta 5,x                 ; ( res res ? )
001436r 3               
001436r 3                               ; fall through to @set_flag
001436r 3               @set_flag:
001436r 3  A9 FF                        lda #$ff
001438r 3  95 00                        sta 0,x
00143Ar 3  95 01                        sta 1,x                 ; ( res f )
00143Cr 3               
00143Cr 3  80 14                        bra @done
00143Er 3               @table_done:
00143Er 3                               ; We're done with a table, because the entry was a zero.
00143Er 3                               ; We arrive here with ( addr u addr u 0 )
00143Er 3               
00143Er 3                               ; We take the flag from stack and increase it by one. If the
00143Er 3                               ; flag is zero, we have just completed the single-cell number
00143Er 3                               ; strings, so we in increase the flag and try again. Otherwise,
00143Er 3                               ; we're done with the double-cell table without having found
00143Er 3                               ; a match, and we're done
00143Er 3  68                           pla
00143Fr 3  D0 09                        bne @no_match
001441r 3               
001441r 3                               ; Flag is zero, increase it to one and start over to check
001441r 3                               ; double-cell values
001441r 3  1A                           inc
001442r 3  48                           pha
001443r 3               
001443r 3  8A                           txa
001444r 3  18                           clc
001445r 3  69 06                        adc #6                  ; skip six bytes
001447r 3  AA                           tax                     ; ( addr u )
001448r 3               
001448r 3  80 92                        bra @table_loop
00144Ar 3               @no_match:
00144Ar 3                               ; Bummer, not found. We arrive here with
00144Ar 3                               ; ( addr u addr u 0 ) and need to return just a zero
00144Ar 3  8A                           txa
00144Br 3  18                           clc
00144Cr 3  69 0A                        adc #10
00144Er 3  AA                           tax                     ; ( addr ) - not ( 0 ) !
00144Fr 3               
00144Fr 3  20 rr rr                     jsr xt_false
001452r 3               @done:
001452r 3               z_environment_q:
001452r 3  60                           rts
001453r 3               
001453r 3               
001453r 3               ; Tables for ENVIRONMENT?. We use two separate ones, one for the single-cell
001453r 3               ; results and one for the double-celled results. The zero cell at the
001453r 3               ; end of each table marks its, uh, end. The strings themselves are defined
001453r 3               ; in strings.asm. Note if we add more entries to the single-cell table, we
001453r 3               ; have to adapt the result code for double printout, where we subtract 22
001453r 3               ; (two bytes each single-cell string and two bytes for the end-of-table
001453r 3               ; marker 0000
001453r 3               env_table_single:
001453r 3  rr rr rr rr          .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
001457r 3  rr rr rr rr  
00145Br 3  rr rr        
00145Dr 3  rr rr rr rr          .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
001461r 3  rr rr rr rr  
001465r 3  rr rr rr rr          .word envs_sc, envs_wl, 0000
001469r 3  00 00        
00146Br 3               
00146Br 3               env_table_double:
00146Br 3  rr rr rr rr          .word envs_max_d, envs_max_ud, 0000
00146Fr 3  00 00        
001471r 3               
001471r 3               env_results_single:
001471r 3  FF 7F                .word $7FFF     ; /COUNTED-STRING
001473r 3  FF 00                .word $00FF     ; /HOLD
001475r 3  54 00                .word $0054     ; /PAD (this is 84 decimal)
001477r 3  08 00                .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
001479r 3  00 00                .word 0000      ; FLOORED ("FALSE", we have symmetric)
00147Br 3  FF 00                .word $00FF     ; MAX-CHAR
00147Dr 3  FF 7F                .word $7FFF     ; MAX-N
00147Fr 3  FF FF                .word $FFFF     ; MAX-U
001481r 3  80 00                .word $0080     ; RETURN-STACK-CELLS
001483r 3  20 00                .word $0020     ; STACK-CELLS (from definitions.asm)
001485r 3  09 00                .word $0009     ; WORDLISTS
001487r 3               
001487r 3               env_results_double:
001487r 3  FF 7F FF FF          .word $7FFF, $FFFF      ; MAX-D
00148Br 3  FF FF FF FF          .word $FFFF, $FFFF      ; MAX-UD
00148Fr 3               
00148Fr 3               
00148Fr 3               ; ## EQUAL ( n n -- f ) "See if TOS and NOS are equal"
00148Fr 3               ; ## "="  auto  ANS core
00148Fr 3                       ; """https://forth-standard.org/standard/core/Equal"""
00148Fr 3               
00148Fr 3               xt_equal:
00148Fr 3  20 rr rr                     jsr underflow_2
001492r 3               
001492r 3  B5 00                        lda 0,x                 ; LSB
001494r 3  D5 02                        cmp 2,x
001496r 3  D0 0A                        bne @false
001498r 3               
001498r 3  B5 01                        lda 1,x                 ; MSB
00149Ar 3  D5 03                        cmp 3,x
00149Cr 3  D0 04                        bne @false
00149Er 3               
00149Er 3  A9 FF                        lda #$ff
0014A0r 3  80 02                        bra @done
0014A2r 3               
0014A2r 3  A9 00        @false:         lda #0                  ; drop thru to done
0014A4r 3               
0014A4r 3  95 02        @done:          sta 2,x
0014A6r 3  95 03                        sta 3,x
0014A8r 3               
0014A8r 3  E8                           inx
0014A9r 3  E8                           inx
0014AAr 3               
0014AAr 3  60           z_equal:        rts
0014ABr 3               
0014ABr 3               
0014ABr 3               
0014ABr 3               ; ## BLANK ( addr u -- ) "Fill memory region with spaces"
0014ABr 3               ; ## "blank"  auto  ANS string
0014ABr 3                       ; """https://forth-standard.org/standard/string/BLANK"""
0014ABr 3               xt_blank:
0014ABr 3                               ; We don't check for underflow here because
0014ABr 3                               ; we deal with that in FILL
0014ABr 3  CA                           dex
0014ACr 3  CA                           dex
0014ADr 3  A9 20                        lda #AscSP
0014AFr 3  95 00                        sta 0,x
0014B1r 3  74 01                        stz 1,x
0014B3r 3               
0014B3r 3  80 06                        bra xt_fill     ; skip over code for ERASE
0014B5r 3               
0014B5r 3               
0014B5r 3               ; ## ERASE ( addr u -- ) "Fill memory region with zeros"
0014B5r 3               ; ## "erase"  auto  ANS core ext
0014B5r 3                       ; """https://forth-standard.org/standard/core/ERASE
0014B5r 3                       ; Note that ERASE works with "address" units
0014B5r 3                       ; (bytes), not cells.
0014B5r 3                       ; """
0014B5r 3               
0014B5r 3               xt_erase:
0014B5r 3                               ; We don't check for underflow here because
0014B5r 3                               ; we deal with that in FILL
0014B5r 3  CA                           dex
0014B6r 3  CA                           dex
0014B7r 3  74 00                        stz 0,x
0014B9r 3  74 01                        stz 1,x
0014BBr 3               
0014BBr 3                               ; fall through to FILL
0014BBr 3               
0014BBr 3               ; ## FILL ( addr u char -- ) "Fill a memory region with a character"
0014BBr 3               ; ## "fill"  auto  ANS core
0014BBr 3                       ; """https://forth-standard.org/standard/core/FILL
0014BBr 3                       ; Fill u bytes of memory with char starting at addr. Note that
0014BBr 3                       ; this works on bytes, not on cells. On an 8-bit machine such as the
0014BBr 3                       ; 65c02, this is a serious pain in the rear. It is not defined what
0014BBr 3                       ; happens when we reach the end of the address space
0014BBr 3                       ; """
0014BBr 3               xt_fill:
0014BBr 3  20 rr rr                     jsr underflow_3
0014BEr 3               
0014BEr 3                               ; We use tmp1 to hold the address
0014BEr 3  B5 04                        lda 4,x         ; LSB
0014C0r 3  85 rr                        sta tmp1
0014C2r 3  B5 05                        lda 5,x
0014C4r 3  85 rr                        sta tmp1+1
0014C6r 3               
0014C6r 3                               ; We use tmp2 to hold the counter
0014C6r 3  B5 02                        lda 2,x
0014C8r 3  85 rr                        sta tmp2
0014CAr 3  B5 03                        lda 3,x
0014CCr 3  85 rr                        sta tmp2+1
0014CEr 3               
0014CEr 3                               ; We use Y to hold the character
0014CEr 3  B5 00                        lda 0,x
0014D0r 3  A8                           tay
0014D1r 3               @loop:
0014D1r 3                               ; Unfortunately, we also need to make sure that we don't
0014D1r 3                               ; write further than the end of the RAM. So RAM_END must
0014D1r 3                               ; be larger or equal to the current address
0014D1r 3  A9 80                        lda #>ram_end           ; MSB
0014D3r 3  C5 rr                        cmp tmp1+1
0014D5r 3  90 21                        bcc @done               ; RAM_END < TMP1, so leave
0014D7r 3  D0 06                        bne @check_counter      ; RAM_END is not smaller and not equal
0014D9r 3               
0014D9r 3  A9 00                        lda #<ram_end           ; LSB, because MSBs were equal
0014DBr 3  C5 rr                        cmp tmp1
0014DDr 3  90 19                        bcc @done               ; RAM_END < TMP1, so leave
0014DFr 3               
0014DFr 3               @check_counter:
0014DFr 3                               ; See if our counter has reached zero
0014DFr 3  A5 rr                        lda tmp2
0014E1r 3  05 rr                        ora tmp2+1
0014E3r 3  F0 13                        beq @done
0014E5r 3               
0014E5r 3                               ; We're not in ROM and we still have stuff on the counter, so
0014E5r 3                               ; let's actually do what we came here to do
0014E5r 3  98                           tya
0014E6r 3  92 rr                        sta (tmp1)
0014E8r 3               
0014E8r 3                               ; Adjust the counter
0014E8r 3  A5 rr                        lda tmp2
0014EAr 3  D0 02                        bne @1
0014ECr 3  C6 rr                        dec tmp2+1
0014EEr 3  C6 rr        @1:               dec tmp2
0014F0r 3               
0014F0r 3                               ; Next address
0014F0r 3  E6 rr                        inc tmp1
0014F2r 3  D0 DD                        bne @loop
0014F4r 3  E6 rr                        inc tmp1+1
0014F6r 3               
0014F6r 3  80 D9                        bra @loop
0014F8r 3               
0014F8r 3               @done:
0014F8r 3                               ; Drop three cells off the Data Stack. This uses one byte
0014F8r 3                               ; less than six times INX
0014F8r 3  8A                           txa
0014F9r 3  18                           clc
0014FAr 3  69 06                        adc #6
0014FCr 3  AA                           tax
0014FDr 3               z_blank:
0014FDr 3               z_erase:
0014FDr 3  60           z_fill:         rts
0014FEr 3               
0014FEr 3               
0014FEr 3               
0014FEr 3               ; ## EXECUTE ( xt -- ) "Jump to word based on execution token"
0014FEr 3               ; ## "execute"  auto  ANS core
0014FEr 3                       ; """https://forth-standard.org/standard/core/EXECUTE"""
0014FEr 3               xt_execute:
0014FEr 3  20 rr rr                     jsr underflow_1
001501r 3               
001501r 3  20 rr rr                     jsr doexecute   ; do not combine to JMP (native coding)
001504r 3               
001504r 3  60           z_execute:      rts
001505r 3               
001505r 3               doexecute:
001505r 3  B5 00                        lda 0,x
001507r 3  85 rr                        sta ip
001509r 3  B5 01                        lda 1,x
00150Br 3  85 rr                        sta ip+1
00150Dr 3               
00150Dr 3  E8                           inx
00150Er 3  E8                           inx
00150Fr 3               
00150Fr 3                               ; we don't need a RTS here because we highjack the RTS of
00150Fr 3                               ; the word we're calling to get back to xt_execute
00150Fr 3  6C rr rr                     jmp (ip)
001512r 3               
001512r 3               ; end of doexecute
001512r 3               
001512r 3               
001512r 3               ; ## EXECUTE_PARSING ( addr u xt -- ) "Pass a string to a parsing word"
001512r 3               ; ## "execute-parsing"  auto  Gforth
001512r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001512r 3                       ; Execute the parsing word defined by the execution token (xt) on the
001512r 3                       ; string as if it were passed on the command line. See the file
001512r 3                       ; tests/tali.fs for examples.
001512r 3                       ;
001512r 3                       ; Note that this word is coded completely
001512r 3                       ; different in its Gforth version, see the file execute-parsing.fs
001512r 3                       ; (in /usr/share/gforth/0.7.3/compat/ on Ubuntu 18.04 LTS) for details.
001512r 3                       ; """
001512r 3               xt_execute_parsing:
001512r 3  20 rr rr                     jsr underflow_3
001515r 3               
001515r 3  20 rr rr                     jsr xt_input_to_r       ; save normal input for later
001518r 3  20 rr rr                     jsr xt_not_rote         ; -ROT ( xt addr u )
00151Br 3               
00151Br 3  B5 00                        lda 0,x                 ; TOS is new ciblen
00151Dr 3  85 rr                        sta ciblen
00151Fr 3  B5 01                        lda 1,x
001521r 3  85 rr                        sta ciblen+1
001523r 3               
001523r 3  B5 02                        lda 2,x                 ; NOS is new cib
001525r 3  85 rr                        sta cib
001527r 3  B5 03                        lda 3,x
001529r 3  85 rr                        sta cib+1
00152Br 3               
00152Br 3  64 rr                        stz toin                ; Set >IN to zero
00152Dr 3  64 rr                        stz toin+1
00152Fr 3               
00152Fr 3  20 rr rr                     jsr xt_two_drop         ; 2DROP ( xt )
001532r 3  20 rr rr                     jsr xt_execute
001535r 3               
001535r 3  20 rr rr                     jsr xt_r_to_input
001538r 3               
001538r 3               z_execute_parsing:
001538r 3  60                           rts
001539r 3               
001539r 3               
001539r 3               ; ## EXIT ( -- ) "Return control to the calling word immediately"
001539r 3               ; ## "exit"  auto  ANS core
001539r 3                       ; """https://forth-standard.org/standard/core/EXIT
001539r 3                       ; If we're in a loop, we need to UNLOOP first and get everything
001539r 3                       ; we we might have put on the Return Stack off as well. This should
001539r 3                       ; be natively compiled.
001539r 3                       ; """
001539r 3               
001539r 3               xt_exit:
001539r 3  60                           rts             ; keep before z_exit
00153Ar 3               z_exit:                         ; never reached
00153Ar 3               
00153Ar 3               
00153Ar 3               
00153Ar 3               ; ## FALSE ( -- f ) "Push flag FALSE to Data Stack"
00153Ar 3               ; ## "false"  auto  ANS core ext
00153Ar 3                       ; """https://forth-standard.org/standard/core/FALSE"""
00153Ar 3               xt_false:
00153Ar 3  CA                           dex
00153Br 3  CA                           dex
00153Cr 3  74 00                        stz 0,x
00153Er 3  74 01                        stz 1,x
001540r 3               
001540r 3  60           z_false:        rts
001541r 3               
001541r 3               
001541r 3               ; ## FETCH ( addr -- n ) "Push cell content from memory to stack"
001541r 3               ; ## "@"  auto  ANS core
001541r 3                       ; """https://forth-standard.org/standard/core/Fetch"""
001541r 3               xt_fetch:
001541r 3  20 rr rr                     jsr underflow_1
001544r 3               
001544r 3  A1 00                        lda (0,x)               ; LSB
001546r 3  A8                           tay
001547r 3  F6 00                        inc 0,x
001549r 3  D0 02                        bne @1
00154Br 3  F6 01                        inc 1,x
00154Dr 3               @1:
00154Dr 3  A1 00                        lda (0,x)               ; MSB
00154Fr 3  95 01                        sta 1,x
001551r 3  94 00                        sty 0,x
001553r 3               
001553r 3  60           z_fetch:        rts
001554r 3               
001554r 3               
001554r 3               ; ## FIND ( caddr -- addr 0 | xt 1 | xt -1 ) "Find word in Dictionary"
001554r 3               ; ## "find"  auto  ANS core
001554r 3                       ; """https://forth-standard.org/standard/core/FIND
001554r 3                       ; Included for backwards compatibility only, because it still
001554r 3                       ; can be found in so may examples. It should, however, be replaced
001554r 3                       ; by FIND-NAME. Counted string either returns address with a FALSE
001554r 3                       ; flag if not found in the Dictionary, or the xt with a flag to
001554r 3                       ; indicate if this is immediate or not. FIND is a wrapper around
001554r 3                       ; FIND-NAME, we get this all over with as quickly as possible. See
001554r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
001554r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001554r 3                       ; """
001554r 3               
001554r 3               xt_find:
001554r 3  20 rr rr                     jsr underflow_1
001557r 3               
001557r 3                               ; Save address in case conversion fails. We use the
001557r 3                               ; Return Stack instead of temporary variables like TMP1
001557r 3                               ; because this is shorter and anybody still using FIND
001557r 3                               ; can't be worried about speed anyway
001557r 3  B5 01                        lda 1,x                 ; MSB
001559r 3  48                           pha
00155Ar 3  B5 00                        lda 0,x                 ; LSB
00155Cr 3  48                           pha
00155Dr 3               
00155Dr 3                               ; Convert ancient-type counted string address to
00155Dr 3                               ; modern format
00155Dr 3  20 rr rr                     jsr xt_count            ; ( caddr -- addr u )
001560r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt | 0 )
001563r 3               
001563r 3  B5 00                        lda 0,x
001565r 3  15 01                        ora 1,x
001567r 3  D0 0B                        bne @found_word
001569r 3               
001569r 3                               ; No word found. Return address of the string and a false
001569r 3                               ; flag
001569r 3  20 rr rr                     jsr xt_false            ; ( 0 0 )
00156Cr 3               
00156Cr 3                               ; The address needs to be restored.
00156Cr 3  68                           pla                     ; LSB of address
00156Dr 3  95 02                        sta 2,x
00156Fr 3  68                           pla
001570r 3  95 03                        sta 3,x                 ; MSB of address
001572r 3               
001572r 3  80 27                        bra @done               ; ( addr 0 )
001574r 3               
001574r 3               @found_word:
001574r 3                               ; We don't need the address after all, dump it
001574r 3  68                           pla
001575r 3  68                           pla
001576r 3               
001576r 3                               ; We arrive here with ( nt ) on the TOS. Now we have to
001576r 3                               ; convert the return values to FIND's format
001576r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001579r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
00157Cr 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
00157Fr 3               
00157Fr 3  A0 00                        ldy #0                  ; Prepare flag
001581r 3               
001581r 3                               ; The flags are in the second byte of the header
001581r 3  F6 00                        inc 0,x
001583r 3  D0 02                        bne @1
001585r 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
001587r 3               @1:
001587r 3  A1 00                        lda (0,x)               ; ( xt char )
001589r 3  29 04                        and #IM
00158Br 3  D0 08                        bne @immediate          ; bit set, we're immediate
00158Dr 3               
00158Dr 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
00158Fr 3  95 00                        sta 0,x
001591r 3  95 01                        sta 1,x
001593r 3  80 06                        bra @done
001595r 3               
001595r 3               @immediate:
001595r 3  A9 01                        lda #1                  ; We're immediate, return 1
001597r 3  95 00                        sta 0,x
001599r 3  74 01                        stz 1,x
00159Br 3               @done:
00159Br 3  60           z_find:         rts
00159Cr 3               
00159Cr 3               
00159Cr 3               
00159Cr 3               ; ## FIND_NAME ( addr u -- nt|0 ) "Get the name token of input word"
00159Cr 3               ; ## "find-name"  auto  Gforth
00159Cr 3               
00159Cr 3               xt_find_name:
00159Cr 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
00159Cr 3                       ; Given a string, find the Name Token (nt) of a word or return
00159Cr 3                       ; zero if the word is not in the dictionary. We use this instead of
00159Cr 3                       ; ancient FIND to look up words in the Dictionary passed by
00159Cr 3                       ; PARSE-NAME. Note this returns the nt, not the xt of a word like
00159Cr 3                       ; FIND. To convert, use NAME>INT. This is a Gforth word. See
00159Cr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
00159Cr 3                       ; FIND calls this word
00159Cr 3                       ; """
00159Cr 3  20 rr rr                     jsr underflow_2
00159Fr 3               
00159Fr 3                               ; check for special case of an empty string (length zero)
00159Fr 3  B5 00                        lda 0,x
0015A1r 3  15 01                        ora 1,x
0015A3r 3  D0 03                        bne @nonempty
0015A5r 3               
0015A5r 3  4C rr rr                     jmp @fail_done
0015A8r 3               
0015A8r 3               @nonempty:
0015A8r 3                               ; Set up for traversing the wordlist search order.
0015A8r 3  64 rr                        stz tmp3                ; Start at the beginning
0015AAr 3               
0015AAr 3               @wordlist_loop:
0015AAr 3  A0 1E                        ldy #num_order_offset   ; Compare to byte variable #ORDER
0015ACr 3  A5 rr                        lda tmp3
0015AEr 3  D1 rr                        cmp (up),y              ; Check to see if we are done
0015B0r 3  D0 03                        bne @have_string
0015B2r 3               
0015B2r 3                               ; We ran out of wordlists to search.
0015B2r 3  4C rr rr                     jmp @fail_done
0015B5r 3               
0015B5r 3               @have_string:
0015B5r 3                               ; set up first loop iteration
0015B5r 3               
0015B5r 3                               ; Get the current wordlist id
0015B5r 3  18                           clc             ; SEARCH-ORDER is array of bytes.
0015B6r 3  69 1F                        adc #search_order_offset
0015B8r 3  A8                           tay
0015B9r 3  B1 rr                        lda (up),y      ; Get the id byte, which is the offset
0015BBr 3                                               ; into the cell array WORDLISTS
0015BBr 3               
0015BBr 3                               ; Get the DP for that wordlist.
0015BBr 3  0A                           asl                     ; Turn offset into cells offset.
0015BCr 3  18                           clc
0015BDr 3  69 06                        adc #wordlists_offset
0015BFr 3  A8                           tay
0015C0r 3  B1 rr                        lda (up),y
0015C2r 3  85 rr                        sta tmp1
0015C4r 3  C8                           iny
0015C5r 3  B1 rr                        lda (up),y
0015C7r 3  85 rr                        sta tmp1+1
0015C9r 3               
0015C9r 3  B5 02                        lda 2,x                 ; Address of mystery string
0015CBr 3  85 rr                        sta tmp2
0015CDr 3  B5 03                        lda 3,x
0015CFr 3  85 rr                        sta tmp2+1
0015D1r 3               
0015D1r 3               @loop:
0015D1r 3                               ; first quick test: Are strings the same length?
0015D1r 3  B2 rr                        lda (tmp1)
0015D3r 3  D5 00                        cmp 0,x
0015D5r 3  D0 54                        bne @next_entry
0015D7r 3               
0015D7r 3               @compare_string:
0015D7r 3                               ; are the same length, so we now have to compare each
0015D7r 3                               ; character
0015D7r 3               
0015D7r 3                               ; second quick test: Is the first character the same?
0015D7r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
0015D9r 3               
0015D9r 3                               ; Lowercase the incoming charcter.
0015D9r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
0015DBr 3  B0 07                        bcs @compare_first
0015DDr 3  C9 41                        cmp #$41        ; ASCII 'A'
0015DFr 3  90 03                        bcc @compare_first
0015E1r 3               
0015E1r 3                               ; An uppercase letter has been located.  Make it
0015E1r 3                               ; lowercase.
0015E1r 3  18                           clc
0015E2r 3  69 20                        adc #$20
0015E4r 3               
0015E4r 3               @compare_first:
0015E4r 3  A0 08                        ldy #8          ; Offset in nt to name
0015E6r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
0015E8r 3  D0 41                        bne @next_entry
0015EAr 3               
0015EAr 3                               ; String length is the same and the first character is the
0015EAr 3                               ; same. If the length of the string is 1, we're already done
0015EAr 3  B5 00                        lda 0,x
0015ECr 3  3A                           dec
0015EDr 3  F0 2C                        beq @success
0015EFr 3               
0015EFr 3                               ; No such luck: The strings are the same length and the first
0015EFr 3                               ; char is the same, but the word is more than one char long.
0015EFr 3                               ; So we suck it up and compare every single character. We go
0015EFr 3                               ; from back to front, because words like CELLS and CELL+ would
0015EFr 3                               ; take longer otherwise. We can also shorten the loop by one
0015EFr 3                               ; because we've already compared the first char.
0015EFr 3               
0015EFr 3                               ; The string of the word we're testing against is 8 bytes down
0015EFr 3  A5 rr                        lda tmp1
0015F1r 3  48                           pha             ; Preserve tmp1 on the return stack.
0015F2r 3  18                           clc
0015F3r 3  69 08                        adc #8
0015F5r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
0015F7r 3  A5 rr                        lda tmp1+1
0015F9r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
0015FAr 3  69 00                        adc #0          ; we only need the carry
0015FCr 3  85 rr                        sta tmp1+1
0015FEr 3               
0015FEr 3  B4 00                        ldy 0,x         ; index is length of string minus 1
001600r 3  88                           dey
001601r 3               
001601r 3               @string_loop:
001601r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
001603r 3               
001603r 3                               ; Lowercase the incoming charcter.
001603r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
001605r 3  B0 07                        bcs @check_char
001607r 3  C9 41                        cmp #$41        ; ASCII 'A'
001609r 3  90 03                        bcc @check_char
00160Br 3               
00160Br 3                               ; An uppercase letter has been located.  Make it
00160Br 3                               ; lowercase.
00160Br 3  18                           clc
00160Cr 3  69 20                        adc #$20
00160Er 3               
00160Er 3               @check_char:
00160Er 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
001610r 3  D0 13                        bne @next_entry_tmp1
001612r 3               
001612r 3  88                           dey
001613r 3  D0 EC                        bne @string_loop
001615r 3               
001615r 3               @success_tmp1:
001615r 3  68                           pla             ; Restore tmp1 from the return stack.
001616r 3  85 rr                        sta tmp1+1
001618r 3  68                           pla
001619r 3  85 rr                        sta tmp1
00161Br 3               
00161Br 3               @success:
00161Br 3                               ; The strings match. Put correct nt NOS, because we'll drop
00161Br 3                               ; TOS before we leave
00161Br 3  A5 rr                        lda tmp1
00161Dr 3  95 02                        sta 2,x
00161Fr 3  A5 rr                        lda tmp1+1
001621r 3  95 03                        sta 3,x
001623r 3               
001623r 3  80 20                        bra @done
001625r 3               
001625r 3               @next_entry_tmp1:
001625r 3  68                           pla             ; Restore tmp1 from the return stack.
001626r 3  85 rr                        sta tmp1+1
001628r 3  68                           pla
001629r 3  85 rr                        sta tmp1
00162Br 3               
00162Br 3               @next_entry:
00162Br 3                               ; Not the same, so we get the next word. Next header
00162Br 3                               ; address is two bytes down
00162Br 3  A0 02                        ldy #2
00162Dr 3  B1 rr                        lda (tmp1),y
00162Fr 3  48                           pha
001630r 3  C8                           iny
001631r 3  B1 rr                        lda (tmp1),y
001633r 3  85 rr                        sta tmp1+1
001635r 3  68                           pla
001636r 3  85 rr                        sta tmp1
001638r 3               
001638r 3                               ; If we got a zero, we've walked the whole Dictionary and
001638r 3                               ; return as a failure, otherwise try again
001638r 3  05 rr                        ora tmp1+1
00163Ar 3  D0 95                        bne @loop
00163Cr 3               
00163Cr 3                               ; Move on to the next wordlist in the search order.
00163Cr 3  E6 rr                        inc tmp3
00163Er 3  4C rr rr                     jmp @wordlist_loop
001641r 3               
001641r 3               @fail_done:
001641r 3  74 02                        stz 2,x         ; failure flag
001643r 3  74 03                        stz 3,x
001645r 3               @done:
001645r 3  E8                           inx
001646r 3  E8                           inx
001647r 3               
001647r 3  60           z_find_name:    rts
001648r 3               
001648r 3               
001648r 3               
001648r 3               ; ## FLUSH ( -- ) "Save dirty buffers and empty buffers"
001648r 3               ; ## "flush"  auto  ANS block
001648r 3                       ; """https://forth-standard.org/standard/block/FLUSH"""
001648r 3               xt_flush:
001648r 3  20 rr rr                     jsr xt_save_buffers
00164Br 3               
00164Br 3                               ; Set the buffer status to empty.
00164Br 3  A0 2C                        ldy #buffstatus_offset
00164Dr 3  A9 00                        lda #0
00164Fr 3  91 rr                        sta (up),y      ; Only LSB is used.
001651r 3               z_flush:
001651r 3  60                           rts
001652r 3               
001652r 3               
001652r 3               ; ## FM_SLASH_MOD ( d n1  -- rem n2 ) "Floored signed division"
001652r 3               ; ## "fm/mod"  auto  ANS core
001652r 3                       ; """https://forth-standard.org/standard/core/FMDivMOD
001652r 3                       ; Note that by default, Tali Forth uses SM/REM for most things.
001652r 3                       ;
001652r 3                       ; There are various ways to realize this. We follow EForth with
001652r 3                       ;    DUP 0< DUP >R  IF NEGATE >R DNEGATE R> THEN >R DUP
001652r 3                       ;    0<  IF R@ + THEN  R> UM/MOD R> IF SWAP NEGATE SWAP THEN
001652r 3                       ; See (http://www.forth.org/eforth.html). However you can also
001652r 3                       ; go FM/MOD via SM/REM (http://www.figuk.plus.com/build/arith.htm):
001652r 3                       ;     DUP >R  SM/REM DUP 0< IF SWAP R> + SWAP 1+ ELSE  R> DROP THEN
001652r 3                       ; """
001652r 3               
001652r 3               xt_fm_slash_mod:
001652r 3  20 rr rr                     jsr underflow_3
001655r 3               
001655r 3                               ; if sign of n1 is negative, negate both n1 and d
001655r 3  64 rr                        stz tmp2        ; default: n is positive
001657r 3  B5 01                        lda 1,x         ; MSB of n1
001659r 3  10 0E                        bpl @check_d
00165Br 3               
00165Br 3  E6 rr                        inc tmp2        ; set flag to negative for n1
00165Dr 3  20 rr rr                     jsr xt_negate   ; NEGATE
001660r 3  20 rr rr                     jsr xt_to_r     ; >R
001663r 3  20 rr rr                     jsr xt_dnegate  ; DNEGATE
001666r 3  20 rr rr                     jsr xt_r_from   ; R>
001669r 3               
001669r 3               @check_d:
001669r 3                               ; If d is negative, add n1 to high cell of d
001669r 3  B5 03                        lda 3,x         ; MSB of high word of d
00166Br 3  10 0D                        bpl @multiply
00166Dr 3               
00166Dr 3  18                           clc
00166Er 3  B5 00                        lda 0,x         ; LSB of n1
001670r 3  75 02                        adc 2,x         ; LSB of dh
001672r 3  95 02                        sta 2,x
001674r 3               
001674r 3  B5 01                        lda 1,x         ; MSB of n1
001676r 3  75 03                        adc 3,x         ; MSB of dh
001678r 3  95 03                        sta 3,x
00167Ar 3               
00167Ar 3               @multiply:
00167Ar 3  20 rr rr                     jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
00167Dr 3               
00167Dr 3                               ; if n was negative, negate the result
00167Dr 3  A5 rr                        lda tmp2
00167Fr 3  F0 07                        beq @done
001681r 3               
001681r 3  E8                           inx             ; pretend that we SWAP
001682r 3  E8                           inx
001683r 3  20 rr rr                     jsr xt_negate
001686r 3  CA                           dex
001687r 3  CA                           dex
001688r 3               @done:
001688r 3  60           z_fm_slash_mod: rts
001689r 3               
001689r 3               
001689r 3               
001689r 3               ; ## FORTH ( -- ) "Replace first WID in search order with Forth-Wordlist"
001689r 3               ; ## "forth"  auto  ANS search ext
001689r 3                       ; """https://forth-standard.org/standard/search/FORTH"""
001689r 3               xt_forth:
001689r 3  A0 1F                        ldy #search_order_offset
00168Br 3  A9 00                        lda #0          ; The WID for Forth is 0.
00168Dr 3               
00168Dr 3  91 rr                        sta (up),y
00168Fr 3               z_forth:
00168Fr 3  60                           rts
001690r 3               
001690r 3               
001690r 3               ; This is a special jsr target to skip the zeroing of BLK at the beginning
001690r 3               ; of evaluate.  It's used by LOAD to allow setting BLK while the block is
001690r 3               ; being evaluated.  Evaluate's normal behavior is to zero BLK.
001690r 3               load_evaluate:
001690r 3                               ; Set a flag (using tmp1) to not zero BLK
001690r 3  A9 FF                        lda #$FF
001692r 3  85 rr                        sta tmp1
001694r 3  80 11                        bra load_evaluate_start
001696r 3               
001696r 3               ; ## EVALUATE ( addr u -- ) "Execute a string"
001696r 3               ; ## "evaluate"  auto  ANS core
001696r 3                       ; """https://forth-standard.org/standard/core/EVALUATE
001696r 3                       ; Set SOURCE-ID to -1, make addr u the input source, set >IN to zero.
001696r 3                       ; After processing the line, revert to old input source. We use this
001696r 3                       ; to compile high-level Forth words and user-defined words during
001696r 3                       ; start up and cold boot. In contrast to ACCEPT, we need to, uh,
001696r 3                       ; accept more than 255 characters here, even though it's a pain in
001696r 3                       ; the 8-bit.
001696r 3                       ; """
001696r 3               
001696r 3               xt_evaluate:
001696r 3  20 rr rr                     jsr underflow_2
001699r 3               
001699r 3                               ; Clear the flag to zero BLK.  Only LOAD will set the flag,
001699r 3                               ; and will set the block number.
001699r 3  64 rr                        stz tmp1
00169Br 3               
00169Br 3                               ; If u is zero (which can happen a lot for the user-defined
00169Br 3                               ; words), just leave again
00169Br 3  B5 00                        lda 0,x
00169Dr 3  15 01                        ora 1,x
00169Fr 3  D0 06                        bne _eval_got_work
0016A1r 3               
0016A1r 3  E8                           inx
0016A2r 3  E8                           inx
0016A3r 3  E8                           inx
0016A4r 3  E8                           inx
0016A5r 3               
0016A5r 3  80 42                        bra _eval_done
0016A7r 3               
0016A7r 3               ; Special entry point for LOAD to bypass the zeroing of BLK.
0016A7r 3               load_evaluate_start:
0016A7r 3               _eval_got_work:
0016A7r 3                               ; Save the current value of BLK on the return stack.
0016A7r 3  A0 01                        ldy #blk_offset+1
0016A9r 3  B1 rr                        lda (up),y
0016ABr 3  48                           pha
0016ACr 3  88                           dey
0016ADr 3  B1 rr                        lda (up),y
0016AFr 3  48                           pha
0016B0r 3               
0016B0r 3                               ; See if we should zero BLK.
0016B0r 3  A5 rr                        lda tmp1
0016B2r 3  D0 05                        bne @nozero
0016B4r 3               
0016B4r 3                               ; Set BLK to zero.
0016B4r 3                               ; lda #0        ; A is already zero from loading tmp1
0016B4r 3  91 rr                        sta (up),y
0016B6r 3  C8                           iny
0016B7r 3  91 rr                        sta (up),y
0016B9r 3               
0016B9r 3               @nozero:
0016B9r 3                               ; Save the input state to the Return Stack
0016B9r 3  20 rr rr                     jsr xt_input_to_r
0016BCr 3               
0016BCr 3                               ; set SOURCE-ID to -1
0016BCr 3  A9 FF                        lda #$ff
0016BEr 3  85 rr                        sta insrc
0016C0r 3  85 rr                        sta insrc+1
0016C2r 3               
0016C2r 3                               ; set >IN to zero
0016C2r 3  64 rr                        stz toin
0016C4r 3  64 rr                        stz toin+1
0016C6r 3               
0016C6r 3                               ; move TOS and NOS to input buffers
0016C6r 3  B5 00                        lda 0,x
0016C8r 3  85 rr                        sta ciblen
0016CAr 3  B5 01                        lda 1,x
0016CCr 3  85 rr                        sta ciblen+1
0016CEr 3               
0016CEr 3  B5 02                        lda 2,x
0016D0r 3  85 rr                        sta cib
0016D2r 3  B5 03                        lda 3,x
0016D4r 3  85 rr                        sta cib+1
0016D6r 3               
0016D6r 3  E8                           inx             ; A clean stack is a clean mind
0016D7r 3  E8                           inx
0016D8r 3  E8                           inx
0016D9r 3  E8                           inx
0016DAr 3               
0016DAr 3  20 rr rr                     jsr interpret   ; ( -- )
0016DDr 3               
0016DDr 3                               ; restore variables
0016DDr 3  20 rr rr                     jsr xt_r_to_input
0016E0r 3               
0016E0r 3                               ; Restore BLK from the return stack.
0016E0r 3  A0 00                        ldy #blk_offset
0016E2r 3  68                           pla
0016E3r 3  91 rr                        sta (up),y
0016E5r 3  C8                           iny
0016E6r 3  68                           pla
0016E7r 3  91 rr                        sta (up),y
0016E9r 3               
0016E9r 3               _eval_done:
0016E9r 3  60           z_evaluate:     rts
0016EAr 3               
0016EAr 3               
0016EAr 3               
0016EAr 3               ; ## FORTH_WORDLIST ( -- u ) "WID for the Forth Wordlist"
0016EAr 3               ; ## "forth-wordlist"  auto  ANS search
0016EAr 3                       ; """https://forth-standard.org/standard/search/FORTH-WORDLIST"""
0016EAr 3                       ; This is a dummy entry, the actual code is shared with ZERO.
0016EAr 3               
0016EAr 3               
0016EAr 3               ; ## GET_CURRENT ( -- wid ) "Get the id of the compilation wordlist"
0016EAr 3               ; ## "get-current" auto ANS search
0016EAr 3                       ; """https://forth-standard.org/standard/search/GET-CURRENT"""
0016EAr 3               
0016EAr 3               xt_get_current:
0016EAr 3                               ; This is a little different than some of the variables
0016EAr 3                               ; in the user area as we want the value rather than
0016EAr 3                               ; the address.
0016EAr 3  CA                           dex
0016EBr 3  CA                           dex
0016ECr 3  A0 04                        ldy #current_offset
0016EEr 3  B1 rr                        lda (up),y
0016F0r 3  95 00                        sta 0,x         ; CURRENT is a byte variable
0016F2r 3  74 01                        stz 1,x         ; so the MSB is zero.
0016F4r 3               
0016F4r 3  60           z_get_current:  rts
0016F5r 3               
0016F5r 3               
0016F5r 3               
0016F5r 3               ; ## GET_ORDER ( -- wid_n .. wid_1 n) "Get the current search order"
0016F5r 3               ; ## "get-order" auto ANS search
0016F5r 3                       ; """https://forth-standard.org/standard/search/GET-ORDER"""
0016F5r 3               
0016F5r 3               xt_get_order:
0016F5r 3                               ; Get #ORDER - the number of wordlists in the search order.
0016F5r 3  A0 1E                        ldy #num_order_offset
0016F7r 3  B1 rr                        lda (up),y
0016F9r 3  85 rr                        sta tmp1
0016FBr 3  F0 16                        beq @done       ; If zero, there are no wordlists.
0016FDr 3               
0016FDr 3               @loop:
0016FDr 3                               ; Count down towards the front of the list.
0016FDr 3                               ; By decrementing first, we also turn the length into an offset.
0016FDr 3  C6 rr                        dec tmp1        ; Count down by bytes.
0016FFr 3               
0016FFr 3                               ; Get a pointer to the current wordlist, working back to front.
0016FFr 3  A9 1F                        lda #search_order_offset
001701r 3  18                           clc
001702r 3  65 rr                        adc tmp1
001704r 3  A8                           tay
001705r 3               
001705r 3                               ; Put that wordlist id on the stack.
001705r 3  CA                           dex
001706r 3  CA                           dex
001707r 3  B1 rr                        lda (up),y
001709r 3  95 00                        sta 0,x         ; Search order array is bytes, so
00170Br 3  74 01                        stz 1,x         ; put a zero in the high byte.
00170Dr 3               
00170Dr 3                               ; See if that was the last one to process (first in the list).
00170Dr 3  A9 00                        lda #0
00170Fr 3  C5 rr                        cmp tmp1
001711r 3  D0 EA                        bne @loop
001713r 3               
001713r 3               @done:
001713r 3                               ; Put the number of items on the stack.
001713r 3  CA                           dex
001714r 3  CA                           dex
001715r 3  A0 1E                        ldy #num_order_offset
001717r 3  B1 rr                        lda (up),y
001719r 3  95 00                        sta 0,x
00171Br 3  74 01                        stz 1,x         ; We only support 8 wordlists.
00171Dr 3               
00171Dr 3  60           z_get_order:    rts
00171Er 3               
00171Er 3               
00171Er 3               
00171Er 3               ; ## GREATER_THAN ( n n -- f ) "See if NOS is greater than TOS"
00171Er 3               ; ## ">"  auto  ANS core
00171Er 3                       ; """https://forth-standard.org/standard/core/more"""
00171Er 3               
00171Er 3               xt_greater_than:
00171Er 3  20 rr rr                     jsr underflow_2
001721r 3               
001721r 3  A0 00                        ldy #0          ; default false
001723r 3  20 rr rr                     jsr compare_16bit
001726r 3               
001726r 3                               ; for signed numbers, NOS>TOS gives us Z=0 and N=1
001726r 3  F0 03                        beq @false
001728r 3  10 01                        bpl @false
00172Ar 3               
00172Ar 3                               ; true
00172Ar 3  88                           dey
00172Br 3               @false:
00172Br 3  98                           tya
00172Cr 3               
00172Cr 3  E8                           inx
00172Dr 3  E8                           inx
00172Er 3  95 00                        sta 0,x
001730r 3  95 01                        sta 1,x
001732r 3               
001732r 3  60           z_greater_than: rts
001733r 3               
001733r 3               
001733r 3               
001733r 3               ; ## HERE ( -- addr ) "Put Compiler Pointer on Data Stack"
001733r 3               ; ## "here"  auto  ANS core
001733r 3                       ; """https://forth-standard.org/standard/core/HERE
001733r 3                       ; This code is also used by the assembler directive ARROW
001733r 3                       ; ("->") though as immediate"""
001733r 3               xt_here:
001733r 3               xt_asm_arrow:
001733r 3  CA                           dex
001734r 3  CA                           dex
001735r 3  A5 rr                        lda cp
001737r 3  95 00                        sta 0,x
001739r 3  A5 rr                        lda cp+1
00173Br 3  95 01                        sta 1,x
00173Dr 3               
00173Dr 3               z_asm_arrow:
00173Dr 3  60           z_here:         rts
00173Er 3               
00173Er 3               
00173Er 3               ; ## HEX ( -- ) "Change base radix to hexadecimal"
00173Er 3               ; ## "hex"  auto  ANS core ext
00173Er 3                       ; """https://forth-standard.org/standard/core/HEX"""
00173Er 3               xt_hex:
00173Er 3  A9 10                        lda #16
001740r 3  85 rr                        sta base
001742r 3  64 rr                        stz base+1              ; paranoid
001744r 3               
001744r 3  60           z_hex:          rts
001745r 3               
001745r 3               
001745r 3               ; ## HEXSTORE ( addr1 u1 addr2 -- u2 ) "Store a list of numbers"
001745r 3               ; ## "hexstore"  auto  Tali
001745r 3                       ; """Given a string addr1 u1 with numbers in the current base seperated
001745r 3                       ; by spaces, store the numbers at the address addr2, returning the
001745r 3                       ; number of elements. Non-number elements are skipped, an zero-length
001745r 3                       ; string produces a zero output.
001745r 3                       ; """
001745r 3               
001745r 3               xt_hexstore:
001745r 3  20 rr rr                     jsr underflow_3
001748r 3               
001748r 3  20 rr rr                     jsr xt_dup              ; Save copy of original address
00174Br 3  20 rr rr                     jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
00174Er 3               
00174Er 3               @loop:
00174Er 3                               ; Loop until string is totally consumed
00174Er 3  B5 00                        lda 0,x
001750r 3  15 01                        ora 1,x
001752r 3  F0 36                        beq @done
001754r 3               
001754r 3  20 rr rr                     jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
001757r 3               
001757r 3                               ; Prepare the conversion of the number.
001757r 3  20 rr rr                     jsr xt_two_to_r
00175Ar 3  20 rr rr                     jsr xt_zero
00175Dr 3  20 rr rr                     jsr xt_zero
001760r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
001763r 3  20 rr rr                     jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
001766r 3               
001766r 3                               ; If u4 is not zero, we have leftover chars and have to do
001766r 3                               ; things differently
001766r 3  B5 00                        lda 0,x
001768r 3  15 01                        ora 1,x
00176Ar 3  D0 17                        bne @have_chars_left
00176Cr 3               
00176Cr 3                               ; Normal case, this number is all done
00176Cr 3  20 rr rr                     jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
00176Fr 3  20 rr rr                     jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
001772r 3               
001772r 3                               ; Store the new value
001772r 3  20 rr rr                     jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
001775r 3  20 rr rr                     jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
001778r 3               
001778r 3                               ; Increase counter
001778r 3  20 rr rr                     jsr xt_r_from           ; R>
00177Br 3  20 rr rr                     jsr xt_one_plus         ; 1+
00177Er 3  20 rr rr                     jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
001781r 3  80 CB                        bra @loop
001783r 3               
001783r 3               @have_chars_left:
001783r 3                               ; Pathological case: Drop the rest of this number off the stack
001783r 3                               ; and continue with the next word. Doesn't print a warning. We
001783r 3                               ; need to drop four cells, that is, eight bytes
001783r 3  8A                           txa
001784r 3  18                           clc
001785r 3  69 08                        adc #8
001787r 3  AA                           tax
001788r 3  80 C4                        bra @loop
00178Ar 3               
00178Ar 3               @done:
00178Ar 3                               ; Clean up return stack and calculate number of chars stored
00178Ar 3  E8                           inx
00178Br 3  E8                           inx
00178Cr 3  E8                           inx
00178Dr 3  E8                           inx                     ; 2DROP
00178Er 3               
00178Er 3  20 rr rr                     jsr xt_two_r_from       ; ( addr2+n addr2 )
001791r 3  20 rr rr                     jsr xt_swap
001794r 3  20 rr rr                     jsr xt_minus            ; ( n )
001797r 3               
001797r 3  60           z_hexstore:     rts
001798r 3               
001798r 3               
001798r 3               
001798r 3               ; ## HOLD ( char -- ) "Insert character at current output"
001798r 3               ; ## "hold"  auto  ANS core
001798r 3                       ; """https://forth-standard.org/standard/core/HOLD
001798r 3                       ; Insert a character at the current position of a pictured numeric
001798r 3                       ; output string on
001798r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001798r 3                       ;
001798r 3                       ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal
001798r 3                       ; variable tohold instead of HLD.
001798r 3                       ; """
001798r 3               xt_hold:
001798r 3  20 rr rr                     jsr underflow_1
00179Br 3               
00179Br 3  A5 rr                        lda tohold
00179Dr 3  D0 02                        bne @1
00179Fr 3  C6 rr                        dec tohold+1
0017A1r 3               @1:
0017A1r 3  C6 rr                        dec tohold
0017A3r 3               
0017A3r 3  B5 00                        lda 0,x
0017A5r 3  92 rr                        sta (tohold)
0017A7r 3  E8                           inx
0017A8r 3  E8                           inx
0017A9r 3               
0017A9r 3  60           z_hold:         rts
0017AAr 3               
0017AAr 3               
0017AAr 3               ; ## I ( -- n )(R: n -- n)  "Copy loop counter to stack"
0017AAr 3               ; ## "i"  auto  ANS core
0017AAr 3                       ; """https://forth-standard.org/standard/core/I
0017AAr 3                       ; Note that this is not the same as R@ because we use a fudge
0017AAr 3                       ; factor for loop control; see the Control Flow section of the
0017AAr 3                       ; manual for details.
0017AAr 3                       ;
0017AAr 3                       ; We should make this native compile for speed.
0017AAr 3                       ; """
0017AAr 3               
0017AAr 3               xt_i:
0017AAr 3  CA                           dex
0017ABr 3  CA                           dex
0017ACr 3               
0017ACr 3                               ; Get the fudged index off of the top of the stack. It's
0017ACr 3                               ; easier to do math on the stack directly than to pop and
0017ACr 3                               ; push stuff around
0017ACr 3  86 rr                        stx tmpdsp
0017AEr 3  BA                           tsx
0017AFr 3               
0017AFr 3  38                           sec
0017B0r 3  BD 01 01                     lda $0101,x     ; LSB
0017B3r 3  FD 03 01                     sbc $0103,x
0017B6r 3  A8                           tay
0017B7r 3               
0017B7r 3  BD 02 01                     lda $0102,x     ; MSB
0017BAr 3  FD 04 01                     sbc $0104,x
0017BDr 3               
0017BDr 3  A6 rr                        ldx tmpdsp
0017BFr 3               
0017BFr 3  95 01                        sta 1,x         ; MSB of de-fudged index
0017C1r 3  94 00                        sty 0,x         ; LSB of de-fudged index
0017C3r 3               
0017C3r 3  60           z_i:            rts
0017C4r 3               
0017C4r 3               
0017C4r 3               
0017C4r 3               ; ## IF (C: -- orig) (flag -- ) "Conditional flow control"
0017C4r 3               ; ## "if"  auto  ANS core
0017C4r 3                       ; """http://forth-standard.org/standard/core/IF"""
0017C4r 3               
0017C4r 3               xt_if:
0017C4r 3                               ; Compile a 0BRANCH
0017C4r 3  A0 rr                        ldy #>zero_branch_runtime
0017C6r 3  A9 rr                        lda #<zero_branch_runtime
0017C8r 3  20 rr rr                     jsr cmpl_subroutine
0017CBr 3               
0017CBr 3                               ; Put the origination address on the stack for else/then
0017CBr 3  20 rr rr                     jsr xt_here
0017CEr 3               
0017CEr 3                               ; Stuff zero in for the branch address right now.
0017CEr 3                               ; THEN or ELSE will fix it later.
0017CEr 3  20 rr rr                     jsr xt_zero
0017D1r 3  20 rr rr                     jsr xt_comma
0017D4r 3  60           z_if:           rts
0017D5r 3               
0017D5r 3               
0017D5r 3               zero_branch_runtime:
0017D5r 3                       ; """In some Forths, this is called (0BRANCH). Tali Forth originally
0017D5r 3                       ; included 0BRANCH as a high-level word that inserted this code at
0017D5r 3                       ; runtime.
0017D5r 3                       ; """
0017D5r 3               
0017D5r 3                               ; We use the return value on the 65c02 stack to determine
0017D5r 3                               ; where we want to return to.
0017D5r 3  68                           pla
0017D6r 3  85 rr                        sta tmpbranch
0017D8r 3  68                           pla
0017D9r 3  85 rr                        sta tmpbranch+1
0017DBr 3               
0017DBr 3                               ; See if the flag is zero, which is the whole purpose of
0017DBr 3                               ; this all
0017DBr 3  B5 00                        lda 0,x
0017DDr 3  15 01                        ora 1,x
0017DFr 3  F0 0F                        beq @zero
0017E1r 3               
0017E1r 3                               ; Flag is TRUE, so we skip over the next two bytes. This is
0017E1r 3                               ; the part between IF and THEN
0017E1r 3  A5 rr                        lda tmpbranch   ; LSB
0017E3r 3  18                           clc
0017E4r 3  69 02                        adc #2
0017E6r 3  85 rr                        sta tmp1
0017E8r 3  A5 rr                        lda tmpbranch+1 ; MSB
0017EAr 3  69 00                        adc #0          ; For carry
0017ECr 3  85 rr                        sta tmp1+1
0017EEr 3               
0017EEr 3  80 13                        bra @done
0017F0r 3               
0017F0r 3               @zero:
0017F0r 3                               ; Flag is FALSE (0) so we take the jump to the address given in
0017F0r 3                               ; the next two bytes. However, the address points to the last
0017F0r 3                               ; byte of the JSR instruction, not to the next byte afterwards
0017F0r 3  A0 01                        ldy #1
0017F2r 3  B1 rr                        lda (tmpbranch),y
0017F4r 3  85 rr                        sta tmp1
0017F6r 3  C8                           iny
0017F7r 3  B1 rr                        lda (tmpbranch),y
0017F9r 3  85 rr                        sta tmp1+1
0017FBr 3               
0017FBr 3                               ; Now we have to subtract one byte from the address
0017FBr 3                               ; given because of the way the 6502 calculates RTS
0017FBr 3  A5 rr                        lda tmp1
0017FDr 3  D0 02                        bne @1
0017FFr 3  C6 rr                        dec tmp1+1
001801r 3               @1:
001801r 3  C6 rr                        dec tmp1
001803r 3               
001803r 3               @done:
001803r 3                               ; However we got here, tmp1 has the value we push to jump
001803r 3                               ; to
001803r 3  A5 rr                        lda tmp1+1
001805r 3  48                           pha             ; MSB first
001806r 3  A5 rr                        lda tmp1
001808r 3  48                           pha
001809r 3               
001809r 3                               ; clean up the stack and jump
001809r 3  E8                           inx
00180Ar 3  E8                           inx
00180Br 3               
00180Br 3  60                           rts
00180Cr 3               
00180Cr 3               
00180Cr 3               
00180Cr 3               ; ## IMMEDIATE ( -- ) "Mark most recent word as IMMEDIATE"
00180Cr 3               ; ## "immediate"  auto  ANS core
00180Cr 3                       ; """https://forth-standard.org/standard/core/IMMEDIATE
00180Cr 3                       ; Make sure the most recently defined word is immediate. Will only
00180Cr 3                       ; affect the last word in the dictionary. Note that if the word is
00180Cr 3                       ; defined in ROM, this will have no affect, but will not produce an
00180Cr 3                       ; error message.
00180Cr 3                       ; """
00180Cr 3               xt_immediate:
00180Cr 3  20 rr rr                     jsr current_to_dp
00180Fr 3  A0 01                        ldy #1          ; offset for status byte
001811r 3  B1 rr                        lda (dp),y
001813r 3  09 04                        ora #IM        ; make sure bit 7 is set
001815r 3  91 rr                        sta (dp),y
001817r 3               
001817r 3  60           z_immediate:    rts
001818r 3               
001818r 3               
001818r 3               ; ## INPUT ( -- addr ) "Return address of input vector"
001818r 3               ; ## "input" tested Tali Forth
001818r 3               
001818r 3               xt_input:
001818r 3  CA                           dex
001819r 3  CA                           dex
00181Ar 3  A9 rr                        lda #<input
00181Cr 3  95 00                        sta 0,x
00181Er 3  A9 rr                        lda #>input
001820r 3  95 01                        sta 1,x
001822r 3               
001822r 3  60           z_input:        rts
001823r 3               
001823r 3               
001823r 3               
001823r 3               ; ## INPUT_TO_R ( -- ) ( R: -- n n n n ) "Save input state to the Return Stack"
001823r 3               ; ## "input>r"  tested  Tali Forth
001823r 3                  	; """Save the current input state as defined by insrc, cib, ciblen, and
001823r 3                       ; toin to the Return Stack. Used by EVALUTE.
001823r 3                       ;
001823r 3                       ; The naive way of doing
001823r 3                       ; this is to push each two-byte variable to the stack in the form of
001823r 3                       ;
001823r 3                       ;       lda insrc
001823r 3                       ;       pha
001823r 3                       ;       lda insrc+1
001823r 3                       ;       pha
001823r 3                       ;
001823r 3                       ; for a total of 24 byte of instruction in one direction and later
001823r 3                       ; a further 24 bytes to reverse the process. We shorten this at the
001823r 3                       ; cost of some speed by assuming the four variables are grouped
001823r 3                       ; together on the Zero Page and start with insrc (see definitions.asm
001823r 3                       ; for details). The reverse operation is r_to_input. These words must
001823r 3                       ; be flagged as Never Native. Uses tmp1
001823r 3                       ; """
001823r 3               
001823r 3               xt_input_to_r:
001823r 3                               ; We arrive here with the return address on the top of the
001823r 3                               ; 65c02's stack. We need to move it out of the way first
001823r 3  68                           pla
001824r 3  85 rr                        sta tmp1
001826r 3  68                           pla
001827r 3  85 rr                        sta tmp1+1
001829r 3               
001829r 3                               ; This assumes that insrc is the first of eight bytes and
001829r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001829r 3                               ; Page.
001829r 3  A0 07                        ldy #7
00182Br 3               @loop:
00182Br 3  B9 rr rr                     lda insrc,y     ; insrc+7 is toin+1
00182Er 3  48                           pha
00182Fr 3  88                           dey
001830r 3  10 F9                        bpl @loop
001832r 3               
001832r 3                               ; Restore address for return jump
001832r 3  A5 rr                        lda tmp1+1
001834r 3  48                           pha
001835r 3  A5 rr                        lda tmp1
001837r 3  48                           pha
001838r 3               
001838r 3  60           z_input_to_r: 	rts
001839r 3               
001839r 3               
001839r 3               
001839r 3               ; ## INT_TO_NAME ( xt -- nt ) "Get name token from execution token"
001839r 3               ; ## "int>name"  auto  Tali Forth
001839r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001839r 3                       ; This is called >NAME in Gforth, but we change it to
001839r 3                       ; INT>NAME to match NAME>INT
001839r 3                       ; """
001839r 3               
001839r 3               xt_int_to_name:
001839r 3  20 rr rr                     jsr underflow_1
00183Cr 3               
00183Cr 3                               ; Unfortunately, to find the header, we have to walk through
00183Cr 3                               ; all of the wordlists. We are running out of tmp variables.
00183Cr 3                               ; (I'm assuming there is a reason this is avoiding tmp1) so
00183Cr 3                               ; hold the current wordlist on the data stack. This searches
00183Cr 3                               ; all of the wordlists in id order.
00183Cr 3  CA                           dex
00183Dr 3  CA                           dex
00183Er 3  74 00                        stz 0,x
001840r 3  74 01                        stz 1,x
001842r 3               
001842r 3               @wordlist_loop:
001842r 3                               ; A needs to have the current wordlist id in it at
001842r 3                               ; the top of this loop.
001842r 3  B5 00                        lda 0,x                 ; Get the current wordlist.
001844r 3               
001844r 3                               ; Get the DP for that wordlist.
001844r 3  0A                           asl                     ; Turn offset into cells offset.
001845r 3  18                           clc
001846r 3  69 06                        adc #wordlists_offset
001848r 3  A8                           tay
001849r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
00184Br 3  85 rr                        sta tmp2                ; into tmp2
00184Dr 3  C8                           iny
00184Er 3  B1 rr                        lda (up),y
001850r 3  85 rr                        sta tmp2+1
001852r 3               
001852r 3                               ; Check for an empty wordlist (DP will be 0)
001852r 3  A5 rr                        lda tmp2
001854r 3  05 rr                        ora tmp2+1
001856r 3  F0 38                        beq @next_wordlist
001858r 3               
001858r 3  B5 02                        lda 2,x         ; Target xt is now behind wordlist id.
00185Ar 3  85 rr                        sta tmp3        ; Save target xt in tmp3
00185Cr 3  B5 03                        lda 3,x
00185Er 3  85 rr                        sta tmp3+1
001860r 3               
001860r 3               @loop:
001860r 3  A0 04                        ldy #4          ; xt is four bytes down
001862r 3  B1 rr                        lda (tmp2),y    ; LSB of xt of current nt
001864r 3  C5 rr                        cmp tmp3
001866r 3  D0 07                        bne @no_match
001868r 3               
001868r 3                               ; LSB is the same, now check MSB
001868r 3  C8                           iny
001869r 3  B1 rr                        lda (tmp2),y    ; MSB of xt of current nt
00186Br 3  C5 rr                        cmp tmp3+1
00186Dr 3  F0 32                        beq @match
00186Fr 3               
00186Fr 3               @no_match:
00186Fr 3                               ; no match, so we need to get the next word. Next nt is two
00186Fr 3                               ; bytes down
00186Fr 3  18                           clc
001870r 3  A5 rr                        lda tmp2
001872r 3  69 02                        adc #2
001874r 3  85 rr                        sta tmp2
001876r 3  A5 rr                        lda tmp2+1
001878r 3  69 00                        adc #0          ; only care about carry
00187Ar 3  85 rr                        sta tmp2+1
00187Cr 3               
00187Cr 3  A0 00                        ldy #0
00187Er 3  B1 rr                        lda (tmp2),y
001880r 3  48                           pha
001881r 3  C8                           iny
001882r 3  11 rr                        ora (tmp2),y
001884r 3  F0 09                        beq @zero
001886r 3               
001886r 3                               ; Not zero continue
001886r 3  B1 rr                        lda (tmp2),y
001888r 3  85 rr                        sta tmp2+1
00188Ar 3  68                           pla
00188Br 3  85 rr                        sta tmp2
00188Dr 3  80 D1                        bra @loop
00188Fr 3               
00188Fr 3               @zero:
00188Fr 3                               ; if next word is zero, the xt has no nt in this wordlist
00188Fr 3  68                           pla             ; Leftover from above loop
001890r 3               
001890r 3               @next_wordlist:
001890r 3                               ; Move on to the next wordlist.
001890r 3  B5 00                        lda 0,x
001892r 3  1A                           inc
001893r 3  95 00                        sta 0,x
001895r 3  C9 0C                        cmp #max_wordlists
001897r 3  D0 A9                        bne @wordlist_loop
001899r 3               
001899r 3                               ; We didn't find it in any of the wordlists.
001899r 3                               ; Remove the wordlist id from the stack.
001899r 3  E8                           inx
00189Ar 3  E8                           inx
00189Br 3               
00189Br 3                               ; We return a zero to indicate that we didn't find it.
00189Br 3  74 00                        stz 0,x
00189Dr 3  74 01                        stz 1,x
00189Fr 3  80 0A                        bra z_int_to_name
0018A1r 3               
0018A1r 3               @match:
0018A1r 3                               ; We found it. Remove wordlist id from stack.
0018A1r 3  E8                           inx
0018A2r 3  E8                           inx
0018A3r 3               
0018A3r 3                               ; It's a match! Replace TOS with nt
0018A3r 3  A5 rr                        lda tmp2
0018A5r 3  95 00                        sta 0,x
0018A7r 3  A5 rr                        lda tmp2+1
0018A9r 3  95 01                        sta 1,x
0018ABr 3               
0018ABr 3  60           z_int_to_name:  rts
0018ACr 3               
0018ACr 3               
0018ACr 3               
0018ACr 3               ; ## INVERT ( n -- n ) "Complement of TOS"
0018ACr 3               ; ## "invert"  auto  ANS core
0018ACr 3                       ; """https://forth-standard.org/standard/core/INVERT"""
0018ACr 3               xt_invert:
0018ACr 3  20 rr rr                     jsr underflow_1
0018AFr 3               
0018AFr 3  A9 FF                        lda #$FF
0018B1r 3  55 00                        eor 0,x         ; LSB
0018B3r 3  95 00                        sta 0,x
0018B5r 3               
0018B5r 3  A9 FF                        lda #$FF
0018B7r 3  55 01                        eor 1,x         ; MSB
0018B9r 3  95 01                        sta 1,x
0018BBr 3               
0018BBr 3  60           z_invert:       rts
0018BCr 3               
0018BCr 3               
0018BCr 3               ; ## IS ( xt "name" -- ) "Set named word to execute xt"
0018BCr 3               ; ## "is"  auto  ANS core ext
0018BCr 3                       ; """http://forth-standard.org/standard/core/IS"""
0018BCr 3               
0018BCr 3               xt_is:
0018BCr 3                               ; This is a state aware word with differet behavior
0018BCr 3                               ; when used while compiling vs interpreting.
0018BCr 3                               ; Check STATE
0018BCr 3  A5 rr                        lda state
0018BEr 3  05 rr                        ora state+1
0018C0r 3  F0 0C                        beq @interpreting
0018C2r 3               
0018C2r 3               @compiling:
0018C2r 3                               ; Run ['] to compile the xt of the next word as a literal.
0018C2r 3  20 rr rr                     jsr xt_bracket_tick
0018C5r 3               
0018C5r 3                               ; Postpone DEFER! by compiling a JSR to it.
0018C5r 3  A0 rr                        ldy #>xt_defer_store
0018C7r 3  A9 rr                        lda #<xt_defer_store
0018C9r 3  20 rr rr                     jsr cmpl_subroutine
0018CCr 3               
0018CCr 3  80 06                        bra @done
0018CEr 3               
0018CEr 3               @interpreting:
0018CEr 3  20 rr rr                     jsr xt_tick
0018D1r 3  20 rr rr                     jsr xt_defer_store
0018D4r 3               @done:
0018D4r 3  60           z_is:           rts
0018D5r 3               
0018D5r 3               
0018D5r 3               
0018D5r 3               ; ## J ( -- n ) (R: n -- n ) "Copy second loop counter to stack"
0018D5r 3               ; ## "j"  auto  ANS core
0018D5r 3                       ; """https://forth-standard.org/standard/core/J
0018D5r 3                       ; Copy second loop counter from Return Stack to stack. Note we use
0018D5r 3                       ; a fudge factor for loop control; see the Control Flow section of
0018D5r 3                       ; the manual for more details.
0018D5r 3                       ; At this point, we have the "I" counter/limit and the LEAVE address
0018D5r 3                       ; on the stack above this (three entries), whereas the ideal Forth
0018D5r 3                       ; implementation would just have two.
0018D5r 3                       ;
0018D5r 3                       ; Make this native compiled for speed
0018D5r 3                       ; """
0018D5r 3               
0018D5r 3               xt_j:
0018D5r 3  CA                           dex
0018D6r 3  CA                           dex
0018D7r 3               
0018D7r 3                               ; Get the fudged index off from the stack. It's easier to
0018D7r 3                               ; do math on the stack directly than to pop and push stuff
0018D7r 3                               ; around
0018D7r 3  86 rr                        stx tmpdsp
0018D9r 3  BA                           tsx
0018DAr 3               
0018DAr 3  38                           sec
0018DBr 3  BD 07 01                     lda $0107,x     ; LSB
0018DEr 3  FD 09 01                     sbc $0109,x
0018E1r 3  A8                           tay
0018E2r 3               
0018E2r 3  BD 08 01                     lda $0108,x     ; MSB
0018E5r 3  FD 0A 01                     sbc $010A,x
0018E8r 3               
0018E8r 3  A6 rr                        ldx tmpdsp
0018EAr 3               
0018EAr 3  95 01                        sta 1,x         ; MSB of de-fudged index
0018ECr 3  94 00                        sty 0,x         ; LSB of de-fudged index
0018EEr 3               
0018EEr 3  60           z_j:            rts
0018EFr 3               
0018EFr 3               
0018EFr 3               
0018EFr 3               ; ## KEY ( -- char ) "Get one character from the input"
0018EFr 3               ; ## "key"  tested  ANS core
0018EFr 3               xt_key:
0018EFr 3                       ; """https://forth-standard.org/standard/core/KEY
0018EFr 3                       ; Get a single character of input from the vectored
0018EFr 3                       ; input without echoing.
0018EFr 3                       ; """
0018EFr 3  20 rr rr                     jsr key_a               ; returns char in A
0018F2r 3               
0018F2r 3  CA                           dex
0018F3r 3  CA                           dex
0018F4r 3  95 00                        sta 0,x
0018F6r 3  74 01                        stz 1,x
0018F8r 3               
0018F8r 3  60           z_key:          rts
0018F9r 3               
0018F9r 3               key_a:
0018F9r 3                       ; The 65c02 doesn't have a JSR (ADDR,X) instruction like the
0018F9r 3                       ; 65816, so we have to fake the indirect jump to vector it.
0018F9r 3                       ; This is depressingly slow. We use this routine internally
0018F9r 3                       ; to avoid manipulating the Data Stack when we just want a
0018F9r 3                       ; character
0018F9r 3  6C rr rr                     jmp (input)             ; JSR/RTS
0018FCr 3               
0018FCr 3               
0018FCr 3               ; ## LATESTNT ( -- nt ) "Push most recent nt to the stack"
0018FCr 3               ; ## "latestnt"  auto  Tali Forth
0018FCr 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0018FCr 3                       ; The Gforth version of this word is called LATEST
0018FCr 3                       ; """
0018FCr 3               xt_latestnt:
0018FCr 3  CA                           dex
0018FDr 3  CA                           dex
0018FEr 3               
0018FEr 3  20 rr rr                     jsr current_to_dp
001901r 3               
001901r 3  A5 rr                        lda dp
001903r 3  95 00                        sta 0,x
001905r 3  A5 rr                        lda dp+1
001907r 3  95 01                        sta 1,x
001909r 3               
001909r 3  60           z_latestnt:     rts
00190Ar 3               
00190Ar 3               
00190Ar 3               ; ## LATESTXT ( -- xt ) "Push most recent xt to the stack"
00190Ar 3               ; ## "latestxt"  auto  Gforth
00190Ar 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Anonymous-Definitions.html"""
00190Ar 3               xt_latestxt:
00190Ar 3  20 rr rr                     jsr xt_latestnt         ; ( nt )
00190Dr 3  20 rr rr                     jsr xt_name_to_int      ; ( xt )
001910r 3               
001910r 3  60           z_latestxt:     rts
001911r 3               
001911r 3               
001911r 3               ; ## LEAVE ( -- ) "Leave DO/LOOP construct"
001911r 3               ; ## "leave"  auto  ANS core
001911r 3                       ; """https://forth-standard.org/standard/core/LEAVE
001911r 3                       ; Note that this does not work with anything but a DO/LOOP in
001911r 3                       ; contrast to other versions such as discussed at
001911r 3                       ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
001911r 3                       ;
001911r 3                       ;       : LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY
001911r 3                       ; See the Control Flow section in the manual for details of how this works.
001911r 3                       ; This must be native compile and not IMMEDIATE
001911r 3                       ; """
001911r 3               
001911r 3               xt_leave:
001911r 3                               ; We dump the limit/start entries off the Return Stack
001911r 3                               ; (four bytes)
001911r 3  68                           pla
001912r 3  68                           pla
001913r 3  68                           pla
001914r 3  68                           pla
001915r 3               
001915r 3  60                           rts             ; this must be compiled, so keep before z_leave
001916r 3               z_leave:                        ; not reached, not compiled
001916r 3               
001916r 3               
001916r 3               
001916r 3               ; ## LEFT_BRACKET ( -- ) "Enter interpretation state"
001916r 3               ; ## "["  auto  ANS core
001916r 3                       ; """https://forth-standard.org/standard/core/Bracket
001916r 3                       ; This is an immediate and compile-only word
001916r 3                       ; """
001916r 3               xt_left_bracket:
001916r 3  64 rr                        stz state
001918r 3  64 rr                        stz state+1
00191Ar 3               
00191Ar 3  60           z_left_bracket: rts
00191Br 3               
00191Br 3               
00191Br 3               ; ## LESS_NUMBER_SIGN ( -- ) "Start number conversion"
00191Br 3               ; ## "<#"  auto  ANS core
00191Br 3                       ; """https://forth-standard.org/standard/core/num-start
00191Br 3                       ; Start the process to create pictured numeric output.
00191Br 3                       ;
00191Br 3                       ; The new
00191Br 3                       ; string is constructed from back to front, saving the new character
00191Br 3                       ; at the beginning of the output string. Since we use PAD as a
00191Br 3                       ; starting address and work backward (!), the string is constructed
00191Br 3                       ; in the space between the end of the Dictionary (as defined by CP)
00191Br 3                       ; and the PAD. This allows us to satisfy the ANS Forth condition that
00191Br 3                       ; programs don't fool around with the PAD but still use its address.
00191Br 3                       ; Based on pForth
00191Br 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
00191Br 3                       ; pForth is in the pubic domain. Forth is : <# PAD HLD ! ; we use the
00191Br 3                       ; internal variable tohold instead of HLD.
00191Br 3                       ; """
00191Br 3               xt_less_number_sign:
00191Br 3  20 rr rr                     jsr xt_pad      ; ( addr )
00191Er 3               
00191Er 3  B5 00                        lda 0,x
001920r 3  85 rr                        sta tohold
001922r 3  B5 01                        lda 1,x
001924r 3  85 rr                        sta tohold+1
001926r 3               
001926r 3  E8                           inx
001927r 3  E8                           inx
001928r 3               
001928r 3               z_less_number_sign:
001928r 3  60                           rts
001929r 3               
001929r 3               ; ## LESS_THAN ( n m -- f ) "Return true if NOS < TOS"
001929r 3               ; ## "<"  auto  ANS core
001929r 3                       ; """https://forth-standard.org/standard/core/less"""
001929r 3               
001929r 3               xt_less_than:
001929r 3  20 rr rr                     jsr underflow_2
00192Cr 3               
00192Cr 3  A0 00                        ldy #0          ; default false
00192Er 3  20 rr rr                     jsr compare_16bit
001931r 3               
001931r 3                               ; for signed numbers, NOS < TOS if Z=0 and N=0
001931r 3  F0 03                        beq @false
001933r 3  30 01                        bmi @false
001935r 3               
001935r 3                               ; true
001935r 3  88                           dey
001936r 3               @false:
001936r 3  98                           tya
001937r 3               
001937r 3  E8                           inx
001938r 3  E8                           inx
001939r 3  95 00                        sta 0,x
00193Br 3  95 01                        sta 1,x
00193Dr 3               
00193Dr 3  60           z_less_than:    rts
00193Er 3               
00193Er 3               
00193Er 3               
00193Er 3               ; ## LIST ( scr# -- ) "List the given screen"
00193Er 3               ; ## "list"  tested  ANS block ext
00193Er 3                       ; """https://forth-standard.org/standard/block/LIST"""
00193Er 3               
00193Er 3               xt_list:
00193Er 3  20 rr rr                     jsr underflow_1
001941r 3               
001941r 3                               ; Save the screen number in SCR
001941r 3  20 rr rr                     jsr xt_scr
001944r 3  20 rr rr                     jsr xt_store
001947r 3               
001947r 3                               ; Use L from the editor-wordlist to display the screen.
001947r 3  20 rr rr                     jsr xt_editor_l
00194Ar 3               
00194Ar 3  60           z_list:         rts
00194Br 3               
00194Br 3               
00194Br 3               
00194Br 3               ; ## LITERAL ( n -- ) "Store TOS to be push on stack during runtime"
00194Br 3               ; ## "literal"  auto  ANS core
00194Br 3                       ; """https://forth-standard.org/standard/core/LITERAL
00194Br 3                       ; Compile-only word to store TOS so that it is pushed on stack
00194Br 3                       ; during runtime. This is a immediate, compile-only word. At runtime,
00194Br 3                       ; it works by calling literal_runtime by compling JSR LITERAL_RT.
00194Br 3                       ;
00194Br 3                       ; Note the cmpl_ routines use TMPTOS
00194Br 3                       ; """
00194Br 3               xt_literal:
00194Br 3  20 rr rr                     jsr underflow_1
00194Er 3               
00194Er 3  A0 rr                        ldy #>literal_runtime
001950r 3  A9 rr                        lda #<literal_runtime
001952r 3  20 rr rr                     jsr cmpl_subroutine
001955r 3               
001955r 3                               ; Compile the value that is to be pushed on the Stack during
001955r 3                               ; runtime
001955r 3  20 rr rr                     jsr xt_comma
001958r 3               
001958r 3  60           z_literal:      rts
001959r 3               
001959r 3               literal_runtime:
001959r 3               
001959r 3                               ; During runtime, we push the value following this word back
001959r 3                               ; on the Data Stack. The subroutine jump that brought us
001959r 3                               ; here put the address to return to on the Return Stack -
001959r 3                               ; this points to the data we need to get. This routine is
001959r 3                               ; also called (LITERAL) in some Forths
001959r 3  CA                           dex
00195Ar 3  CA                           dex
00195Br 3               
00195Br 3                           	; The 65c02 stores <RETURN-ADDRESS>-1 on the Return Stack,
00195Br 3                               ; so we are actually popping the address-1 of the literal
00195Br 3  68                           pla             ; LSB
00195Cr 3  85 rr                        sta tmp1
00195Er 3  68                           pla             ; MSB
00195Fr 3  85 rr                        sta tmp1+1
001961r 3               
001961r 3                               ; Fetch the actual literal value and push it on Data stack
001961r 3  A0 01                        ldy #1
001963r 3  B1 rr                        lda (tmp1),y    ; LSB
001965r 3  95 00                        sta 0,x
001967r 3  C8                           iny
001968r 3  B1 rr                        lda (tmp1),y    ; MSB
00196Ar 3  95 01                        sta 1,x
00196Cr 3               
00196Cr 3                               ; Adjust return address and push back on the Return Stack
00196Cr 3  98                           tya
00196Dr 3  18                           clc
00196Er 3  65 rr                        adc tmp1
001970r 3  A8                           tay
001971r 3  A5 rr                        lda tmp1+1
001973r 3  69 00                        adc #0
001975r 3  48                           pha
001976r 3  5A                           phy
001977r 3               
001977r 3  60                           rts
001978r 3               
001978r 3               
001978r 3               
001978r 3               ; ## LOAD ( scr# -- ) "Load the Forth code in a screen/block"
001978r 3               ; ## "load"  auto  ANS block
001978r 3                       ; """https://forth-standard.org/standard/block/LOAD
001978r 3                       ;
001978r 3                       ; Note: LOAD current works because there is only one buffer.
001978r 3                       ; If/when multiple buffers are supported, we'll have to deal
001978r 3                       ; with the fact that it might re-load the old block into a
001978r 3                       ; different buffer.
001978r 3                       ; """
001978r 3               
001978r 3               xt_load:
001978r 3  20 rr rr                     jsr underflow_1
00197Br 3               
00197Br 3                               ; Save the current value of BLK on the return stack.
00197Br 3  A0 01                        ldy #blk_offset+1
00197Dr 3  B1 rr                        lda (up),y
00197Fr 3  48                           pha
001980r 3  88                           dey
001981r 3  B1 rr                        lda (up),y
001983r 3  48                           pha
001984r 3               
001984r 3                               ; Set BLK to the given block/screen number.
001984r 3  B5 00                        lda 0,x
001986r 3  91 rr                        sta (up),y
001988r 3  C8                           iny
001989r 3  B5 01                        lda 1,x
00198Br 3  91 rr                        sta (up),y
00198Dr 3               
00198Dr 3                               ; Load that block into a buffer
00198Dr 3  20 rr rr                     jsr xt_block
001990r 3               
001990r 3                               ; Put 1024 on the stack for the screen length.
001990r 3  CA                           dex
001991r 3  CA                           dex
001992r 3  A9 04                        lda #4
001994r 3  95 01                        sta 1,x
001996r 3  74 00                        stz 0,x
001998r 3               
001998r 3                               ; Jump to a special evluate target. This bypasses the underflow
001998r 3                               ; check and skips the zeroing of BLK.
001998r 3  20 rr rr                     jsr load_evaluate
00199Br 3               
00199Br 3                               ; Restore the value of BLK from before the LOAD command.
00199Br 3  A0 00                        ldy #blk_offset
00199Dr 3  68                           pla
00199Er 3  91 rr                        sta (up),y
0019A0r 3  C8                           iny
0019A1r 3  68                           pla
0019A2r 3  91 rr                        sta (up),y
0019A4r 3               
0019A4r 3                               ; If BLK is not zero, read it back into the buffer.
0019A4r 3                               ; A still has MSB
0019A4r 3  88                           dey
0019A5r 3  11 rr                        ora (up),y
0019A7r 3  F0 12                        beq @done
0019A9r 3               
0019A9r 3                               ; The block needs to be read back into the buffer.
0019A9r 3  CA                           dex
0019AAr 3  CA                           dex
0019ABr 3  A0 00                        ldy #blk_offset
0019ADr 3  B1 rr                        lda (up),y
0019AFr 3  95 00                        sta 0,x
0019B1r 3  C8                           iny
0019B2r 3  B1 rr                        lda (up),y
0019B4r 3  95 01                        sta 1,x
0019B6r 3  20 rr rr                     jsr xt_block
0019B9r 3               
0019B9r 3                               ; Drop the buffer address.
0019B9r 3  E8                           inx
0019BAr 3  E8                           inx
0019BBr 3               
0019BBr 3               @done:
0019BBr 3  60           z_load:         rts
0019BCr 3               
0019BCr 3               
0019BCr 3               
0019BCr 3               ; ## LOOP ( -- ) "Finish loop construct"
0019BCr 3               ; ## "loop"  auto  ANS core
0019BCr 3                       ; """https://forth-standard.org/standard/core/LOOP
0019BCr 3                       ; Compile-time part of LOOP. This does nothing more but push 1 on
0019BCr 3                       ; the stack and then call +LOOP.
0019BCr 3                       ;
0019BCr 3                       ; In Forth, this is
0019BCr 3                       ;       : LOOP  POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ;
0019BCr 3                       ;       IMMEDIATE ; COMPILE-ONLY
0019BCr 3                       ; """
0019BCr 3               xt_loop:
0019BCr 3                               ; Have the finished word push 1 on the stack
0019BCr 3  A0 rr                        ldy #>xt_one
0019BEr 3  A9 rr                        lda #<xt_one
0019C0r 3  20 rr rr                     jsr cmpl_subroutine     ; drop through to +LOOP
0019C3r 3               
0019C3r 3               
0019C3r 3               ; ## PLUS_LOOP ( -- ) "Finish loop construct"
0019C3r 3               ; ## "+loop"  auto  ANS core
0019C3r 3                       ; """https://forth-standard.org/standard/core/PlusLOOP
0019C3r 3                       ;
0019C3r 3                       ; Compile-time part of +LOOP, also used for LOOP. Is usually
0019C3r 3                       ;       : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
0019C3r 3                       ;       COMPILE-ONLY
0019C3r 3                       ; in Forth. LOOP uses this routine as well. We jump here with the
0019C3r 3                       ; address for looping as TOS and the address for aborting the loop
0019C3r 3                       ; (LEAVE) as the second double-byte entry on the Return Stack (see
0019C3r 3                       ; DO and the Control Flow section of the manual for details).
0019C3r 3                       ; """
0019C3r 3               
0019C3r 3               xt_plus_loop:
0019C3r 3                               ; Compile the run-time part. We do this with a short loop
0019C3r 3                               ; and not a call to COMPILE, because it has to be natively
0019C3r 3                               ; coded anyway.
0019C3r 3  A0 11                        ldy #plus_loop_runtime_end-plus_loop_runtime
0019C5r 3  5A                           phy             ; save counter to adjust CP
0019C6r 3               @1:
0019C6r 3  B9 rr rr                     lda plus_loop_runtime,y
0019C9r 3  91 rr                        sta (cp),y
0019CBr 3  88                           dey
0019CCr 3  10 F8                        bpl @1
0019CEr 3               
0019CEr 3                               ; Adjust CP
0019CEr 3  68                           pla
0019CFr 3  18                           clc
0019D0r 3  65 rr                        adc cp
0019D2r 3  85 rr                        sta cp
0019D4r 3  A5 rr                        lda cp+1
0019D6r 3  69 00                        adc #0          ; only need carry
0019D8r 3  85 rr                        sta cp+1
0019DAr 3               
0019DAr 3                               ; The address we need to loop back to is TOS. Store it so
0019DAr 3                               ; the runtime part of +LOOP jumps back up there
0019DAr 3  20 rr rr                     jsr xt_comma
0019DDr 3               
0019DDr 3                               ; Compile an UNLOOP for when we're all done. This is a series
0019DDr 3                               ; of six PLA, so we just do it here instead jumping around
0019DDr 3                               ; all over the place
0019DDr 3  A9 68                        lda #$68                ; opcode for PLA
0019DFr 3  A0 06                        ldy #6
0019E1r 3               @2:
0019E1r 3  91 rr                        sta (cp),y
0019E3r 3  88                           dey
0019E4r 3  10 FB                        bpl @2
0019E6r 3               
0019E6r 3                               ; Adjust CP
0019E6r 3  A9 06                        lda #6
0019E8r 3  18                           clc
0019E9r 3  65 rr                        adc cp
0019EBr 3  85 rr                        sta cp
0019EDr 3  A5 rr                        lda cp+1
0019EFr 3  69 00                        adc #0                  ; only need carry
0019F1r 3  85 rr                        sta cp+1
0019F3r 3               
0019F3r 3                               ; Complete compile of DO/?DO by replacing the six
0019F3r 3                               ; dummy bytes by PHA instructions. The address where
0019F3r 3                               ; they are located is on the Data Stack
0019F3r 3  B5 00                        lda 0,x
0019F5r 3  85 rr                        sta tmp1
0019F7r 3  B5 01                        lda 1,x
0019F9r 3  85 rr                        sta tmp1+1
0019FBr 3  E8                           inx
0019FCr 3  E8                           inx
0019FDr 3               
0019FDr 3                               ; Because of the way that CP works, we don't have to save
0019FDr 3                               ; CP, but CP-1
0019FDr 3  A5 rr                        lda cp
0019FFr 3  38                           sec
001A00r 3  E9 01                        sbc #1
001A02r 3  85 rr                        sta tmp2
001A04r 3  A5 rr                        lda cp+1
001A06r 3  E9 00                        sbc #0
001A08r 3  85 rr                        sta tmp2+1
001A0Ar 3               
001A0Ar 3                               ; now compile this in the DO/?DO routine
001A0Ar 3  A0 00                        ldy #0
001A0Cr 3               
001A0Cr 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001A0Er 3  91 rr                        sta (tmp1),y
001A10r 3  C8                           iny
001A11r 3  A5 rr                        lda tmp2+1      ; MSB
001A13r 3  91 rr                        sta (tmp1),y
001A15r 3  C8                           iny
001A16r 3  A9 48                        lda #$48        ; Opcode for PHA
001A18r 3  91 rr                        sta (tmp1),y
001A1Ar 3  C8                           iny
001A1Br 3               
001A1Br 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001A1Dr 3  91 rr                        sta (tmp1),y
001A1Fr 3  C8                           iny
001A20r 3  A5 rr                        lda tmp2        ; LSB
001A22r 3  91 rr                        sta (tmp1),y
001A24r 3  C8                           iny
001A25r 3  A9 48                        lda #$48        ; Opcode for PHA
001A27r 3  91 rr                        sta (tmp1),y
001A29r 3               z_loop:
001A29r 3  60           z_plus_loop:    rts
001A2Ar 3               
001A2Ar 3               
001A2Ar 3               plus_loop_runtime:
001A2Ar 3                       ; """Runtime compile for loop control. This is used for both +LOOP and
001A2Ar 3                       ; LOOP which are defined at high level. Note we use a fudge factor for
001A2Ar 3                       ; loop control so we can test with the Overflow Flag. See
001A2Ar 3                       ; the Control Flow section of the manual for details.
001A2Ar 3                       ; The step value is TOS in the loop. This
001A2Ar 3                       ; must always be native compiled. In some Forths, this is a separate
001A2Ar 3                       ; word called (+LOOP) or (LOOP)
001A2Ar 3                       ; """
001A2Ar 3               
001A2Ar 3  18                           clc
001A2Br 3  68                           pla             ; LSB of index
001A2Cr 3  75 00                        adc 0,x         ; LSB of step
001A2Er 3  A8                           tay             ; temporary storage of LSB
001A2Fr 3               
001A2Fr 3  B8                           clv
001A30r 3  68                           pla             ; MSB of index
001A31r 3  75 01                        adc 1,x         ; MSB of step
001A33r 3  48                           pha             ; put MSB of index back on stack
001A34r 3               
001A34r 3  98                           tya             ; put LSB of index back on stack
001A35r 3  48                           pha
001A36r 3               
001A36r 3  E8                           inx             ; dump step from TOS
001A37r 3  E8                           inx
001A38r 3               
001A38r 3                               ; If V flag is set, we're done looping and continue
001A38r 3                               ; after the +LOOP instruction
001A38r 3  70 03                        bvs @hack+3     ; skip over JMP instruction
001A3Ar 3               
001A3Ar 3               @hack:          ; This is why this routine must be natively compiled: We
001A3Ar 3                               ; compile the opcode for JMP here without an address to
001A3Ar 3                               ; go to, which is added by the next next instruction of
001A3Ar 3                               ; LOOP/+LOOP during compile time
001A3Ar 3  4C                           .byte $4C
001A3Br 3               
001A3Br 3               plus_loop_runtime_end:
001A3Br 3               
001A3Br 3               
001A3Br 3               ; ## LSHIFT ( x u -- u ) "Shift TOS left"
001A3Br 3               ; ## "lshift"  auto  ANS core
001A3Br 3                       ; """https://forth-standard.org/standard/core/LSHIFT"""
001A3Br 3               
001A3Br 3               xt_lshift:
001A3Br 3  20 rr rr                     jsr underflow_2
001A3Er 3               
001A3Er 3                               ; max shift 16 times
001A3Er 3  B5 00                        lda 0,x
001A40r 3  29 0F                        and #%00001111
001A42r 3  F0 08                        beq @done
001A44r 3               
001A44r 3  A8                           tay
001A45r 3               
001A45r 3               @loop:
001A45r 3  16 02                        asl 2,x
001A47r 3  36 03                        rol 3,x
001A49r 3  88                           dey
001A4Ar 3  D0 F9                        bne @loop
001A4Cr 3               
001A4Cr 3               @done:
001A4Cr 3  E8                           inx
001A4Dr 3  E8                           inx
001A4Er 3               
001A4Er 3  60           z_lshift:       rts
001A4Fr 3               
001A4Fr 3               
001A4Fr 3               
001A4Fr 3               ; ## M_STAR ( n n -- d ) "16 * 16 --> 32"
001A4Fr 3               ; ## "m*"  auto  ANS core
001A4Fr 3                       ; """https://forth-standard.org/standard/core/MTimes
001A4Fr 3                       ; Multiply two 16 bit numbers, producing a 32 bit result. All
001A4Fr 3                       ; values are signed. Adapted from FIG Forth for Tali Forth.
001A4Fr 3                       ;
001A4Fr 3                       ; The original Forth is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;
001A4Fr 3                       ; with  : D+- O< IF DNEGATE THEN ;
001A4Fr 3                       ; """
001A4Fr 3               
001A4Fr 3               xt_m_star:
001A4Fr 3  20 rr rr                     jsr underflow_2
001A52r 3               
001A52r 3                               ; figure out the sign
001A52r 3  B5 01                        lda 1,x         ; MSB of n1
001A54r 3  55 03                        eor 3,x         ; MSB of n2
001A56r 3               
001A56r 3                               ; UM* uses all kinds of temporary variables so we don't
001A56r 3                               ; risk a conflict but just take the cycle hit and push
001A56r 3                               ; this to the stack
001A56r 3  48                           pha
001A57r 3               
001A57r 3                               ; get the absolute value of both numbers so we can feed
001A57r 3                               ; them to UM*, which does the real work
001A57r 3  20 rr rr                     jsr xt_abs
001A5Ar 3  20 rr rr                     jsr xt_swap
001A5Dr 3  20 rr rr                     jsr xt_abs
001A60r 3               
001A60r 3  20 rr rr                     jsr xt_um_star          ; ( d )
001A63r 3               
001A63r 3                               ; handle the sign
001A63r 3  68                           pla
001A64r 3  10 03                        bpl @done
001A66r 3               
001A66r 3  20 rr rr                     jsr xt_dnegate
001A69r 3               @done:
001A69r 3  60           z_m_star:       rts
001A6Ar 3               
001A6Ar 3               
001A6Ar 3               
001A6Ar 3               ; ## MARKER ( "name" -- ) "Create a deletion boundry"
001A6Ar 3               ; ## "marker"  auto  ANS core ext
001A6Ar 3                       ; """https://forth-standard.org/standard/core/MARKER
001A6Ar 3                       ; This word replaces FORGET in earlier Forths. Old entries are not
001A6Ar 3                       ; actually deleted, but merely overwritten by restoring CP and DP.
001A6Ar 3                       ; Run the named word at a later time to restore all of the wordlists
001A6Ar 3                       ; to their state when the word was created with marker.  Any words
001A6Ar 3                       ; created after the marker (including the marker) will be forgotten.
001A6Ar 3                       ;
001A6Ar 3                       ; To do this, we want to end up with something that jumps to a
001A6Ar 3                       ; run-time component with a link to the original CP and DP values:
001A6Ar 3                       ;
001A6Ar 3                       ;       jsr marker_runtime
001A6Ar 3                       ;       <Original CP MSB>
001A6Ar 3                       ;       <Original CP LSB>
001A6Ar 3                       ;       <Original DP MSB> ( for CURRENT wordlist )
001A6Ar 3                       ;       <Original DP LSB>
001A6Ar 3                       ;       < USER variables from offset 4 to 39 >
001A6Ar 3                       ;
001A6Ar 3                       ;       The user variables include:
001A6Ar 3                       ;       CURRENT (byte variable)
001A6Ar 3                       ;       <All wordlists> (currently 12) (cell array)
001A6Ar 3                       ;       <#ORDER> (byte variable)
001A6Ar 3                       ;       <All search order> (currently 9) (byte array)
001A6Ar 3                       ;
001A6Ar 3                       ; This code uses tmp1 and tmp2
001A6Ar 3                       ; """
001A6Ar 3               
001A6Ar 3               xt_marker:
001A6Ar 3                               ; Before we do anything, we need to save CP, which
001A6Ar 3                               ; after all is the whole point of this operation. CREATE
001A6Ar 3                               ; uses tmp1 and tmp2, so we take the speed hit and push stuff
001A6Ar 3                               ; to the stack
001A6Ar 3  20 rr rr                     jsr current_to_dp
001A6Dr 3               
001A6Dr 3  A5 rr                        lda dp
001A6Fr 3  48                           pha
001A70r 3  A5 rr                        lda dp+1
001A72r 3  48                           pha
001A73r 3               
001A73r 3  A5 rr                        lda cp
001A75r 3  48                           pha
001A76r 3  A5 rr                        lda cp+1
001A78r 3  48                           pha
001A79r 3               
001A79r 3  20 rr rr                     jsr xt_create
001A7Cr 3               
001A7Cr 3                               ; By default, CREATE installs a subroutine jump to DOVAR, which
001A7Cr 3                               ; we have to replace by a jump to marker_runtime. We back up
001A7Cr 3                               ; two bytes and then overwrite the address
001A7Cr 3  A5 rr                        lda cp          ; LSB
001A7Er 3  38                           sec
001A7Fr 3  E9 02                        sbc #2
001A81r 3  85 rr                        sta cp
001A83r 3               
001A83r 3  A5 rr                        lda cp+1        ; MSB
001A85r 3  E9 00                        sbc #0          ; we only care about the borrow
001A87r 3  85 rr                        sta cp+1
001A89r 3               
001A89r 3                               ; Add the address of the runtime component
001A89r 3  A0 rr                        ldy #>marker_runtime
001A8Br 3  A9 rr                        lda #<marker_runtime
001A8Dr 3  20 rr rr                     jsr cmpl_word
001A90r 3               
001A90r 3                               ; Add original CP as payload
001A90r 3  7A                           ply                     ; MSB
001A91r 3  68                           pla                     ; LSB
001A92r 3  20 rr rr                     jsr cmpl_word
001A95r 3               
001A95r 3                               ; Add original DP as payload
001A95r 3  7A                           ply                     ; MSB
001A96r 3  68                           pla                     ; LSB
001A97r 3  20 rr rr                     jsr cmpl_word
001A9Ar 3               
001A9Ar 3                               ; Add the user variables for the wordlists and search order.
001A9Ar 3                               ; We're compiling them in byte order.
001A9Ar 3  A0 04                        ldy #4                  ; Start at CURRENT
001A9Cr 3               @marker_loop:
001A9Cr 3  B1 rr                        lda (up),y
001A9Er 3  20 rr rr                     jsr cmpl_a
001AA1r 3  C8                           iny
001AA2r 3  98                           tya
001AA3r 3  C9 28                        cmp #40                 ; One past the end of the search order.
001AA5r 3  D0 F5                        bne @marker_loop
001AA7r 3               
001AA7r 3  60           z_marker:       rts
001AA8r 3               
001AA8r 3               
001AA8r 3               
001AA8r 3               marker_runtime:
001AA8r 3                       ; """Restore Dictionary and memory (DP and CP) to where the were
001AA8r 3                       ; when this marker was defined. We arrive here with the return
001AA8r 3                       ; address on the Return Stack in the usual 65c02 format
001AA8r 3                       ; """
001AA8r 3               
001AA8r 3                               ; Get the address of the string address off the stack and
001AA8r 3                               ; increase by one because of the RTS mechanics
001AA8r 3  68                           pla
001AA9r 3  85 rr                        sta tmp1        ; LSB of address
001AABr 3  68                           pla
001AACr 3  85 rr                        sta tmp1+1      ; MSB of address
001AAEr 3               
001AAEr 3  E6 rr                        inc tmp1
001AB0r 3  D0 02                        bne @1
001AB2r 3  E6 rr                        inc tmp1+1
001AB4r 3               @1:
001AB4r 3  A0 00                        ldy #0
001AB6r 3               
001AB6r 3                               ; CP was stored first
001AB6r 3  B1 rr                        lda (tmp1),y
001AB8r 3  85 rr                        sta cp
001ABAr 3  C8                           iny
001ABBr 3  B1 rr                        lda (tmp1),y
001ABDr 3  85 rr                        sta cp+1
001ABFr 3               
001ABFr 3                               ; Next was DP
001ABFr 3  C8                           iny
001AC0r 3  B1 rr                        lda (tmp1),y
001AC2r 3  85 rr                        sta dp
001AC4r 3  C8                           iny
001AC5r 3  B1 rr                        lda (tmp1),y
001AC7r 3  85 rr                        sta dp+1
001AC9r 3               
001AC9r 3                               ; Conveniently, the offset into both tmp1 and UP is 4
001AC9r 3                               ; to start restoring the wordlists and search order.
001AC9r 3  A0 04                        ldy #4
001ACBr 3               
001ACBr 3               @marker_restore_loop:
001ACBr 3                               ; Copy from the dictionary back on top of the wordlists
001ACBr 3                               ; and search order.
001ACBr 3  B1 rr                        lda (tmp1), y
001ACDr 3  91 rr                        sta (up), y
001ACFr 3  C8                           iny
001AD0r 3  98                           tya
001AD1r 3  C9 28                        cmp #40                 ; One past the end of the search order.
001AD3r 3  D0 F6                        bne @marker_restore_loop
001AD5r 3               
001AD5r 3  20 rr rr                     jsr dp_to_current       ; Move the CURRENT DP back.
001AD8r 3               
001AD8r 3                               ; The return instruction takes us back to the original caller
001AD8r 3  60                           rts
001AD9r 3               
001AD9r 3               
001AD9r 3               
001AD9r 3               ; ## MAX ( n n -- n ) "Keep larger of two numbers"
001AD9r 3               ; ## "max"  auto  ANS core
001AD9r 3                       ; """https://forth-standard.org/standard/core/MAX
001AD9r 3                       ; Compare TOS and NOS and keep which one is larger. Adapted from
001AD9r 3                       ; Lance A. Leventhal "6502 Assembly Language Subroutines". Negative
001AD9r 3                       ; Flag indicates which number is larger. See also
001AD9r 3                       ; http://6502.org/tutorials/compare_instructions.html and
001AD9r 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001AD9r 3                       ; """
001AD9r 3               
001AD9r 3               xt_max:
001AD9r 3  20 rr rr                     jsr underflow_2
001ADCr 3               
001ADCr 3                               ; Compare LSB. We do this first to set the carry flag
001ADCr 3  B5 00                        lda 0,x         ; LSB of TOS
001ADEr 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets the carry
001AE0r 3               
001AE0r 3  B5 01                        lda 1,x         ; MSB of TOS
001AE2r 3  F5 03                        sbc 3,x         ; MSB of NOS
001AE4r 3  50 02                        bvc @no_overflow
001AE6r 3               
001AE6r 3                               ; handle overflow, because we use signed numbers
001AE6r 3  49 80                        eor #$80        ; complement negative flag
001AE8r 3               
001AE8r 3               @no_overflow:
001AE8r 3                               ; if negative, NOS is larger and needs to be kept
001AE8r 3  30 08                        bmi @keep_nos
001AEAr 3               
001AEAr 3                               ; move TOS to NOS
001AEAr 3  B5 00                        lda 0,x
001AECr 3  95 02                        sta 2,x
001AEEr 3  B5 01                        lda 1,x
001AF0r 3  95 03                        sta 3,x
001AF2r 3               
001AF2r 3               @keep_nos:
001AF2r 3  E8                           inx
001AF3r 3  E8                           inx
001AF4r 3               
001AF4r 3  60           z_max:          rts
001AF5r 3               
001AF5r 3               
001AF5r 3               
001AF5r 3               ; ## MIN ( n n -- n ) "Keep smaller of two numbers"
001AF5r 3               ; ## "min"  auto  ANS core
001AF5r 3                       ; """https://forth-standard.org/standard/core/MIN
001AF5r 3                       ; Adapted from Lance A. Leventhal "6502 Assembly Language
001AF5r 3                       ; Subroutines." Negative Flag indicateds which number is larger. See
001AF5r 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001AF5r 3                       ; """
001AF5r 3               
001AF5r 3               xt_min:
001AF5r 3  20 rr rr                     jsr underflow_2
001AF8r 3               
001AF8r 3                               ; compare LSB. We do this first to set the carry flag
001AF8r 3  B5 00                        lda 0,x         ; LSB of TOS
001AFAr 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets carry
001AFCr 3               
001AFCr 3  B5 01                        lda 1,x         ; MSB of TOS
001AFEr 3  F5 03                        sbc 3,x         ; MSB of NOS
001B00r 3  50 02                        bvc @no_overflow
001B02r 3               
001B02r 3                               ; handle overflow because we use signed numbers
001B02r 3  49 80                        eor #$80
001B04r 3               
001B04r 3               @no_overflow:
001B04r 3                               ; if negative, NOS is larger and needs to be dumped
001B04r 3  10 08                        bpl @keep_nos
001B06r 3               
001B06r 3                               ; move TOS to NOS
001B06r 3  B5 00                        lda 0,x
001B08r 3  95 02                        sta 2,x
001B0Ar 3  B5 01                        lda 1,x
001B0Cr 3  95 03                        sta 3,x
001B0Er 3               
001B0Er 3               @keep_nos:
001B0Er 3  E8                           inx
001B0Fr 3  E8                           inx
001B10r 3               
001B10r 3  60           z_min:          rts
001B11r 3               
001B11r 3               
001B11r 3               
001B11r 3               ; ## MINUS ( n n -- n ) "Subtract TOS from NOS"
001B11r 3               ; ## "-"  auto  ANS core
001B11r 3                       ; """https://forth-standard.org/standard/core/Minus"""
001B11r 3               xt_minus:
001B11r 3  20 rr rr                     jsr underflow_2
001B14r 3               
001B14r 3  38                           sec
001B15r 3  B5 02                        lda 2,x         ; LSB
001B17r 3  F5 00                        sbc 0,x
001B19r 3  95 02                        sta 2,x
001B1Br 3               
001B1Br 3  B5 03                        lda 3,x         ; MSB
001B1Dr 3  F5 01                        sbc 1,x
001B1Fr 3  95 03                        sta 3,x
001B21r 3               
001B21r 3  E8                           inx
001B22r 3  E8                           inx
001B23r 3               
001B23r 3  60           z_minus:        rts
001B24r 3               
001B24r 3               
001B24r 3               ; ## MINUS_LEADING ( addr1 u1 -- addr2 u2 ) "Remove leading spaces"
001B24r 3               ; ## "-leading"  auto  Tali String
001B24r 3                       ; """Remove leading whitespace. This is the reverse of -TRAILING
001B24r 3                       ; """
001B24r 3               
001B24r 3               xt_minus_leading:
001B24r 3  20 rr rr                     jsr underflow_2
001B27r 3               
001B27r 3               @loop:
001B27r 3                               ; Quit if we were given an empty string. This also terminates
001B27r 3                               ; the main loop
001B27r 3  B5 00                        lda 0,x
001B29r 3  15 01                        ora 1,x
001B2Br 3  F0 0F                        beq @done
001B2Dr 3               
001B2Dr 3  A1 02                        lda (2,x)               ; get first character
001B2Fr 3  20 rr rr                     jsr is_whitespace
001B32r 3  90 08                        bcc @done
001B34r 3               
001B34r 3                               ; It's whitespace, move one down
001B34r 3  20 rr rr                     jsr xt_one              ; ( addr u 1 )
001B37r 3  20 rr rr                     jsr xt_slash_string     ; ( addr+ u-1 )
001B3Ar 3               
001B3Ar 3  80 EB                        bra @loop
001B3Cr 3               @done:
001B3Cr 3               z_minus_leading:
001B3Cr 3  60                           rts
001B3Dr 3               
001B3Dr 3               
001B3Dr 3               
001B3Dr 3               ; ## MINUS_TRAILING ( addr u1 -- addr u2 ) "Remove trailing spaces"
001B3Dr 3               ; ## "-trailing"  auto  ANS string
001B3Dr 3                       ; """https://forth-standard.org/standard/string/MinusTRAILING
001B3Dr 3                       ; Remove trailing spaces
001B3Dr 3                       ; """
001B3Dr 3               
001B3Dr 3               xt_minus_trailing:
001B3Dr 3  20 rr rr                     jsr underflow_2
001B40r 3               
001B40r 3                               ; if length entry is zero, return a zero and leave the
001B40r 3                               ; address part untouched
001B40r 3  B5 00                        lda 0,x         ; LSB of n
001B42r 3  15 01                        ora 1,x         ; MSB of n
001B44r 3  F0 33                        beq @done
001B46r 3               
001B46r 3                               ; Compute address of last char in tmp1 as
001B46r 3                               ; addr + u1 - 1
001B46r 3               
001B46r 3                               ; addr + u1
001B46r 3  18                           clc
001B47r 3  B5 02                        lda 2,x         ; LSB of addr
001B49r 3  75 00                        adc 0,x
001B4Br 3  85 rr                        sta tmp1
001B4Dr 3  B5 03                        lda 3,x         ; MSB of addr
001B4Fr 3  75 01                        adc 1,x
001B51r 3  85 rr                        sta tmp1+1
001B53r 3               
001B53r 3                               ; - 1
001B53r 3  A5 rr                        lda tmp1
001B55r 3  D0 02                        bne @1
001B57r 3  C6 rr                        dec tmp1+1
001B59r 3               @1:
001B59r 3  C6 rr                        dec tmp1
001B5Br 3               
001B5Br 3               @loop:
001B5Br 3                               ; While spaces are found, move tmp1 backwards and
001B5Br 3                               ; decrease the count on the data stack.
001B5Br 3  B2 rr                        lda (tmp1)
001B5Dr 3  C9 20                        cmp #AscSP
001B5Fr 3  D0 18                        bne @done
001B61r 3               
001B61r 3                               ; Move back one address.
001B61r 3  A5 rr                        lda tmp1
001B63r 3  D0 02                        bne @2
001B65r 3  C6 rr                        dec tmp1+1
001B67r 3               @2:
001B67r 3  C6 rr                        dec tmp1
001B69r 3               
001B69r 3                               ; Decrement count by one.
001B69r 3  B5 00                        lda 0,x
001B6Br 3  D0 02                        bne @3
001B6Dr 3  D6 01                        dec 1,x
001B6Fr 3               @3:
001B6Fr 3  D6 00                        dec 0,x
001B71r 3               
001B71r 3                               ; Check if there are any characters left.
001B71r 3  B5 00                        lda 0,x
001B73r 3  15 01                        ora 1,x
001B75r 3  F0 02                        beq @done       ; Count has reached zero - we're done!
001B77r 3               
001B77r 3  80 E2                        bra @loop
001B79r 3               
001B79r 3               @done:
001B79r 3               z_minus_trailing:
001B79r 3  60                           rts
001B7Ar 3               
001B7Ar 3               
001B7Ar 3               
001B7Ar 3               ; ## MOD ( n1 n2 -- n ) "Divide NOS by TOS and return the remainder"
001B7Ar 3               ; ## "mod"  auto  ANS core
001B7Ar 3                       ; """https://forth-standard.org/standard/core/MOD
001B7Ar 3                       ;
001B7Ar 3                       ; The Forth definition of this word is  : MOD /MOD DROP ;
001B7Ar 3                       ; so we just jump to xt_slash_mod and dump the actual result.
001B7Ar 3                       ; """
001B7Ar 3               xt_mod:
001B7Ar 3  20 rr rr                     jsr underflow_2
001B7Dr 3               
001B7Dr 3  20 rr rr                     jsr xt_slash_mod
001B80r 3               
001B80r 3  E8                           inx             ; DROP
001B81r 3  E8                           inx
001B82r 3               z_mod:
001B82r 3  60                           rts
001B83r 3               
001B83r 3               
001B83r 3               ; ## MOVE ( addr1 addr2 u -- ) "Copy bytes"
001B83r 3               ; ## "move"  auto  ANS core
001B83r 3                       ; """https://forth-standard.org/standard/core/MOVE
001B83r 3                       ; Copy u "address units" from addr1 to addr2. Since our address
001B83r 3                       ; units are bytes, this is just a front-end for CMOVE and CMOVE>. This
001B83r 3                       ; is actually the only one of these three words that is in the CORE
001B83r 3                       ; set.
001B83r 3                       ;
001B83r 3                       ; This word must not be natively compiled.
001B83r 3                       ; """
001B83r 3               
001B83r 3               xt_move:
001B83r 3                               ; We let CMOVE and CMOVE> check if there is underflow or
001B83r 3                               ; we've been told to copy zero bytes
001B83r 3               
001B83r 3                               ; compare MSB first
001B83r 3  B5 03                        lda 3,x                 ; MSB of addr2
001B85r 3  D5 05                        cmp 5,x                 ; MSB of addr1
001B87r 3  F0 05                        beq @lsb                ; wasn't helpful, move to LSB
001B89r 3  B0 0E                        bcs @to_move_up         ; we want CMOVE>
001B8Br 3               
001B8Br 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001B8Er 3               
001B8Er 3               @lsb:
001B8Er 3                               ; MSB were equal, so do the whole thing over with LSB
001B8Er 3  B5 02                        lda 2,x                 ; LSB of addr2
001B90r 3  D5 04                        cmp 4,x                 ; LSB of addr1
001B92r 3  F0 08                        beq @equal              ; LSB is equal as well
001B94r 3  B0 03                        bcs @to_move_up         ; we want CMOVE>
001B96r 3               
001B96r 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001B99r 3               
001B99r 3               @to_move_up:
001B99r 3  4C rr rr                     jmp xt_cmove_up         ; JSR/RTS
001B9Cr 3               @equal:
001B9Cr 3                               ; drop three entries from Data Stack
001B9Cr 3  8A                           txa
001B9Dr 3  18                           clc
001B9Er 3  69 06                        adc #6
001BA0r 3  AA                           tax
001BA1r 3               
001BA1r 3  60           z_move:         rts
001BA2r 3               
001BA2r 3               
001BA2r 3               
001BA2r 3               ; ## NAME_TO_INT ( nt -- xt ) "Convert Name Token to Execute Token"
001BA2r 3               ; ## "name>int"  tested  Gforth
001BA2r 3                       ; """See
001BA2r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001BA2r 3                       ; """
001BA2r 3               
001BA2r 3               xt_name_to_int:
001BA2r 3  20 rr rr                     jsr underflow_1
001BA5r 3               
001BA5r 3                               ; The xt starts four bytes down from the nt
001BA5r 3  B5 00                        lda 0,x
001BA7r 3  18                           clc
001BA8r 3  69 04                        adc #4
001BAAr 3  85 rr                        sta tmp3
001BACr 3               
001BACr 3  B5 01                        lda 1,x
001BAEr 3  90 01                        bcc @done
001BB0r 3  1A                           inc
001BB1r 3               @done:
001BB1r 3  85 rr                        sta tmp3+1
001BB3r 3               
001BB3r 3  A0 00                        ldy #0
001BB5r 3  B1 rr                        lda (tmp3),y
001BB7r 3  95 00                        sta 0,x
001BB9r 3  C8                           iny
001BBAr 3  B1 rr                        lda (tmp3),y
001BBCr 3  95 01                        sta 1,x
001BBEr 3               
001BBEr 3  60           z_name_to_int:  rts
001BBFr 3               
001BBFr 3               
001BBFr 3               
001BBFr 3               ; ## NAME_TO_STRING ( nt -- addr u ) "Given a name token, return string of word"
001BBFr 3               ; ## "name>string"  tested  Gforth
001BBFr 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html"""
001BBFr 3               
001BBFr 3               xt_name_to_string:
001BBFr 3  20 rr rr                     jsr underflow_1
001BC2r 3               
001BC2r 3  CA                           dex
001BC3r 3  CA                           dex
001BC4r 3               
001BC4r 3                               ; the length of the string is the first byte of the
001BC4r 3                               ; header pointed to by nt
001BC4r 3  A1 02                        lda (2,x)
001BC6r 3  95 00                        sta 0,x
001BC8r 3  74 01                        stz 1,x
001BCAr 3               
001BCAr 3                               ; the string itself always starts eight bytes down
001BCAr 3  B5 02                        lda 2,x         ; LSB
001BCCr 3  18                           clc
001BCDr 3  69 08                        adc #8
001BCFr 3  A8                           tay
001BD0r 3  B5 03                        lda 3,x         ; MSB
001BD2r 3  69 00                        adc #0          ; just need carry
001BD4r 3  95 03                        sta 3,x
001BD6r 3  94 02                        sty 2,x
001BD8r 3               
001BD8r 3               z_name_to_string:
001BD8r 3  60                           rts
001BD9r 3               
001BD9r 3               
001BD9r 3               ; ## NC_LIMIT ( -- addr ) "Return address where NC-LIMIT value is kept"
001BD9r 3               ; ## "nc-limit"  tested  Tali Forth
001BD9r 3               
001BD9r 3               xt_nc_limit:
001BD9r 3  CA                           dex
001BDAr 3  CA                           dex
001BDBr 3  A9 rr                        lda #<nc_limit
001BDDr 3  95 00                        sta 0,x
001BDFr 3  A9 rr                        lda #>nc_limit
001BE1r 3  95 01                        sta 1,x
001BE3r 3               
001BE3r 3  60           z_nc_limit:     rts
001BE4r 3               
001BE4r 3               
001BE4r 3               
001BE4r 3               ; ## NEGATE ( n -- n ) "Two's complement"
001BE4r 3               ; ## "negate"  auto  ANS core
001BE4r 3                       ; """https://forth-standard.org/standard/core/NEGATE"""
001BE4r 3               xt_negate:
001BE4r 3  20 rr rr                     jsr underflow_1
001BE7r 3               
001BE7r 3  A9 00                	lda #0
001BE9r 3  38                           sec
001BEAr 3  F5 00                        sbc 0,x         ; LSB
001BECr 3  95 00                        sta 0,x
001BEEr 3               
001BEEr 3  A9 00                        lda #0
001BF0r 3  F5 01                        sbc 1,x         ; MSB
001BF2r 3  95 01                        sta 1,x
001BF4r 3               
001BF4r 3  60           z_negate:       rts
001BF5r 3               
001BF5r 3               
001BF5r 3               ; ## NEVER_NATIVE ( -- ) "Flag last word as never natively compiled"
001BF5r 3               ; ## "never-native"  auto  Tali Forth
001BF5r 3               xt_never_native:
001BF5r 3  20 rr rr                     jsr current_to_dp
001BF8r 3  A0 01                        ldy #1          ; offset for status byte
001BFAr 3  B1 rr                        lda (dp),y
001BFCr 3  09 08                        ora #NN         ; Make sure NN flag is set
001BFEr 3  29 FD                        and #$ff-AN     ; and AN flag is clear.
001C00r 3  91 rr                        sta (dp),y
001C02r 3               z_never_native:
001C02r 3  60                           rts
001C03r 3               
001C03r 3               
001C03r 3               ; ## NIP ( b a -- a ) "Delete NOS"
001C03r 3               ; ## "nip"  auto  ANS core ext
001C03r 3                       ; """https://forth-standard.org/standard/core/NIP"""
001C03r 3               xt_nip:
001C03r 3  20 rr rr                     jsr underflow_2
001C06r 3               
001C06r 3  B5 00                        lda 0,x         ; LSB
001C08r 3  95 02                        sta 2,x
001C0Ar 3  B5 01                        lda 1,x         ; MSB
001C0Cr 3  95 03                        sta 3,x
001C0Er 3               
001C0Er 3  E8                           inx
001C0Fr 3  E8                           inx
001C10r 3               
001C10r 3  60           z_nip:          rts
001C11r 3               
001C11r 3               
001C11r 3               ; ## NOT_EQUALS ( n m -- f ) "Return a true flag if TOS != NOS"
001C11r 3               ; ## "<>"  auto  ANS core ext
001C11r 3                       ; """https://forth-standard.org/standard/core/ne
001C11r 3                       ;
001C11r 3                       ; This is just a variant of EQUAL, we code it separately
001C11r 3                       ; for speed.
001C11r 3                       ; """
001C11r 3               
001C11r 3               xt_not_equals:
001C11r 3  20 rr rr                     jsr underflow_2
001C14r 3               
001C14r 3  A0 00                        ldy #0                  ; default is true
001C16r 3               
001C16r 3  B5 00                        lda 0,x                 ; LSB
001C18r 3  D5 02                        cmp 2,x
001C1Ar 3  D0 0A                        bne @not_equal
001C1Cr 3               
001C1Cr 3                               ; LSB is equal
001C1Cr 3  B5 01                        lda 1,x                 ; MSB
001C1Er 3  D5 03                        cmp 3,x
001C20r 3  D0 04                        bne @not_equal
001C22r 3               
001C22r 3  A9 FF                        lda #$FF
001C24r 3  80 01                        bra @done
001C26r 3               
001C26r 3               @not_equal:
001C26r 3  88                           dey                     ; drop thru to done
001C27r 3               
001C27r 3               @done:
001C27r 3  98                           tya
001C28r 3  E8                           inx
001C29r 3  E8                           inx
001C2Ar 3  95 00                        sta 0,x
001C2Cr 3  95 01                        sta 1,x
001C2Er 3               
001C2Er 3  60           z_not_equals:   rts
001C2Fr 3               
001C2Fr 3               
001C2Fr 3               
001C2Fr 3               ; ## NOT_ROTE ( a b c -- c a b ) "Rotate upwards"
001C2Fr 3               ; ## "-rot"  auto  Gforth
001C2Fr 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Data-stack.html"""
001C2Fr 3               
001C2Fr 3               xt_not_rote:
001C2Fr 3  20 rr rr                     jsr underflow_3
001C32r 3               
001C32r 3  B4 01                        ldy 1,x         ; MSB first
001C34r 3  B5 03                        lda 3,x
001C36r 3  95 01                        sta 1,x
001C38r 3               
001C38r 3  B5 05                        lda 5,x
001C3Ar 3  95 03                        sta 3,x
001C3Cr 3  94 05                        sty 5,x
001C3Er 3               
001C3Er 3  B4 00                        ldy 0,x         ; LSB second
001C40r 3  B5 02                        lda 2,x
001C42r 3  95 00                        sta 0,x
001C44r 3               
001C44r 3  B5 04                        lda 4,x
001C46r 3  95 02                        sta 2,x
001C48r 3  94 04                        sty 4,x
001C4Ar 3               
001C4Ar 3  60           z_not_rote:     rts
001C4Br 3               
001C4Br 3               
001C4Br 3               
001C4Br 3               ; ## NUMBER ( addr u -- u | d ) "Convert a number string"
001C4Br 3               ; ## "number"  auto  Tali Forth
001C4Br 3                       ; """Convert a number string to a double or single cell number. This
001C4Br 3                       ; is a wrapper for >NUMBER and follows the convention set out in the
001C4Br 3                       ; "Forth Programmer's Handbook" (Conklin & Rather) 3rd edition p. 87.
001C4Br 3                       ; Based in part on the "Starting Forth" code
001C4Br 3                       ; https://www.forth.com/starting-forth/10-input-output-operators/
001C4Br 3                       ; Gforth uses S>NUMBER? and S>UNUMBER? which return numbers and a flag
001C4Br 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
001C4Br 3                       ; Another difference to Gforth is that we follow ANS Forth that the
001C4Br 3                       ; dot to signal a double cell number is required to be the last
001C4Br 3                       ; character of the string.
001C4Br 3                       ;
001C4Br 3                       ; Number calls >NUMBER which in turn calls UM*,
001C4Br 3                       ; which uses tmp1, tmp2, and tmp3, so we can't use them here, which is
001C4Br 3                       ; a pain.
001C4Br 3                       ;"""
001C4Br 3               
001C4Br 3               xt_number:
001C4Br 3  20 rr rr                     jsr underflow_2
001C4Er 3               
001C4Er 3                               ; we keep the flags for sign and double in tmpdsp because
001C4Er 3                               ; we've run out of temporary variables
001C4Er 3  64 rr                        stz tmpdsp      ; flag for double
001C50r 3  64 rr                        stz tmpdsp+1    ; flag for minus
001C52r 3               
001C52r 3                               ; If the first character is a minus, strip it off and set
001C52r 3                               ; the flag
001C52r 3  A1 02                        lda (2,x)
001C54r 3  C9 2D                        cmp #$2D        ; ASCII for "-"
001C56r 3  D0 0A                        bne @check_dot
001C58r 3               
001C58r 3                               ; It's a minus
001C58r 3  C6 rr                        dec tmpdsp+1
001C5Ar 3  F6 02                        inc 2,x         ; start one character later
001C5Cr 3  D0 02                        bne @1
001C5Er 3  F6 03                        inc 3,x
001C60r 3               @1:
001C60r 3  D6 00                        dec 0,x         ; decrease string length by one
001C62r 3               
001C62r 3               @check_dot:
001C62r 3                               ; If the last character is a dot, strip it off and set a
001C62r 3                               ; flag. We can use tmptos as a temporary variable
001C62r 3  B5 02                        lda 2,x         ; LSB of address
001C64r 3  18                           clc
001C65r 3  75 00                        adc 0,x         ; length of string
001C67r 3  85 rr                        sta tmptos
001C69r 3  B5 03                        lda 3,x
001C6Br 3  69 00                        adc #0          ; only need carry
001C6Dr 3  85 rr                        sta tmptos+1
001C6Fr 3               
001C6Fr 3                               ; tmptos now points to the first character after the string,
001C6Fr 3                               ; but we need the last character
001C6Fr 3  A5 rr                        lda tmptos
001C71r 3  D0 02                        bne @2
001C73r 3  C6 rr                        dec tmptos+1
001C75r 3               @2:
001C75r 3  C6 rr                        dec tmptos
001C77r 3               
001C77r 3  B2 rr                        lda (tmptos)
001C79r 3  C9 2E                        cmp #'.'
001C7Br 3  D0 04                        bne @main
001C7Dr 3               
001C7Dr 3                               ; We have a dot, which means this is a double number. Flag
001C7Dr 3                               ; the fact and reduce string length by one
001C7Dr 3  C6 rr                        dec tmpdsp
001C7Fr 3  D6 00                        dec 0,x
001C81r 3               
001C81r 3               @main:
001C81r 3                               ; Set up stack for subroutine jump to >NUMBER, which means
001C81r 3                               ; we have to go ( addr u --> ud addr u )
001C81r 3  CA                           dex
001C82r 3  CA                           dex
001C83r 3  CA                           dex
001C84r 3  CA                           dex
001C85r 3               
001C85r 3  B5 04                        lda 4,x         ; LSB of length
001C87r 3  95 00                        sta 0,x
001C89r 3  74 01                        stz 1,x         ; MSB, max length 255 chars
001C8Br 3               
001C8Br 3  B5 06                        lda 6,x         ; LSB of address
001C8Dr 3  95 02                        sta 2,x
001C8Fr 3  B5 07                        lda 7,x         ; MSB of address
001C91r 3  95 03                        sta 3,x
001C93r 3               
001C93r 3  74 04                        stz 4,x         ; clear space for ud
001C95r 3  74 05                        stz 5,x
001C97r 3  74 06                        stz 6,x
001C99r 3  74 07                        stz 7,x
001C9Br 3               
001C9Br 3  20 rr rr                     jsr xt_to_number        ; (ud addr u -- ud addr u )
001C9Er 3               
001C9Er 3                               ; test length of returned string, which should be zero
001C9Er 3  B5 00                        lda 0,x
001CA0r 3  F0 15                        beq @all_converted
001CA2r 3               
001CA2r 3                               ; Something went wrong, we still have characters left over,
001CA2r 3                               ; so we print an error and abort. If the NUMBER was called
001CA2r 3                               ; by INTERPRET, we've already checked for Forth words, so
001CA2r 3                               ; we're in deep trouble one way or another
001CA2r 3  A9 3E                        lda #$3E        ; ASCII for ">"
001CA4r 3  20 rr rr                     jsr emit_a
001CA7r 3  20 rr rr                     jsr xt_type
001CAAr 3  A9 3C                        lda #$3C        ; ASCII for "<"
001CACr 3  20 rr rr                     jsr emit_a
001CAFr 3  20 rr rr                     jsr xt_space
001CB2r 3               
001CB2r 3  A9 08                        lda #err_syntax
001CB4r 3  4C rr rr                     jmp error
001CB7r 3               
001CB7r 3               @all_converted:
001CB7r 3                               ; We can drop the string info
001CB7r 3  E8                           inx
001CB8r 3  E8                           inx
001CB9r 3  E8                           inx
001CBAr 3  E8                           inx
001CBBr 3               
001CBBr 3                               ; We have a double-cell number on the Data Stack that might
001CBBr 3                               ; actually have a minus and might actually be single-cell
001CBBr 3  A5 rr                        lda tmpdsp      ; flag for double
001CBDr 3  F0 0D                        beq @single
001CBFr 3               
001CBFr 3                               ; Set status bit 5 to indicate this is a double number
001CBFr 3  A9 20                        lda #%00100000
001CC1r 3  04 rr                        tsb status
001CC3r 3               
001CC3r 3                               ; This is a double cell number. If it had a minus, we'll have
001CC3r 3                               ; to negate it
001CC3r 3  A5 rr                        lda tmpdsp+1
001CC5r 3  F0 12                        beq @done       ; no minus, all done
001CC7r 3               
001CC7r 3  20 rr rr                     jsr xt_dnegate
001CCAr 3               
001CCAr 3  80 0D                        bra @done
001CCCr 3               
001CCCr 3               @single:
001CCCr 3                               ; This is a single number, so we just drop the top cell
001CCCr 3  E8                           inx
001CCDr 3  E8                           inx
001CCEr 3               
001CCEr 3                               ; Clear status bit 5 to indicate this is a single number
001CCEr 3  A9 20                        lda #%00100000
001CD0r 3  14 rr                        trb status
001CD2r 3               
001CD2r 3                               ; If we had a minus, we'll have to negate it
001CD2r 3  A5 rr                        lda tmpdsp+1
001CD4r 3  F0 03                        beq @done       ; no minus, all done
001CD6r 3               
001CD6r 3  20 rr rr                     jsr xt_negate
001CD9r 3               @done:
001CD9r 3  60           z_number:       rts
001CDAr 3               
001CDAr 3               
001CDAr 3               
001CDAr 3               ; ## NUMBER_SIGN ( ud -- ud ) "Add character to pictured output string"
001CDAr 3               ; ## "#"  auto  ANS core
001CDAr 3                       ; """https://forth-standard.org/standard/core/num
001CDAr 3                       ; Add one char to the beginning of the pictured output string.
001CDAr 3                       ;
001CDAr 3                       ; Based on
001CDAr 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001CDAr 3                       ; Forth code  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
001CDAr 3                       ; """
001CDAr 3               xt_number_sign:
001CDAr 3  20 rr rr                     jsr underflow_2         ; double number
001CDDr 3               
001CDDr 3  20 rr rr                     jsr xt_base
001CE0r 3  20 rr rr                     jsr xt_fetch            ; ( ud1 base )
001CE3r 3               
001CE3r 3                               ; The following code is the ancient Forth word UD/MOD, which in
001CE3r 3                               ; various Forths (including Gforth) lives on under the hood,
001CE3r 3                               ; even though it's not an ANS standard word, it doesn't appear
001CE3r 3                               ; in the docs, it's only used here, and there are no tests for
001CE3r 3                               ; it. This is why we got rid of it. We'll be converting this
001CE3r 3                               ; mess to something more sane in the long run.
001CE3r 3  20 rr rr                     jsr xt_to_r             ; >r
001CE6r 3  20 rr rr                     jsr xt_zero             ; 0
001CE9r 3  20 rr rr                     jsr xt_r_fetch          ; r@
001CECr 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001CEFr 3  20 rr rr                     jsr xt_rot              ; rot
001CF2r 3  20 rr rr                     jsr xt_rot              ; rot
001CF5r 3  20 rr rr                     jsr xt_r_from           ; r>
001CF8r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001CFBr 3  20 rr rr                     jsr xt_rot              ; rot
001CFEr 3                               ; end of UD/MOD ( rem ud )
001CFEr 3               
001CFEr 3  20 rr rr                     jsr xt_rot              ; ( ud rem )
001D01r 3               
001D01r 3                               ; Convert the number that is left over to an ASCII character. We
001D01r 3                               ; use a string lookup for speed. Use either abc_str_lower for
001D01r 3                               ; lower case or abc_str_upper for upper case (prefered)
001D01r 3  B5 00                        lda 0,x
001D03r 3  A8                           tay
001D04r 3  B9 rr rr                     lda s_abc_upper,y
001D07r 3  95 00                        sta 0,x
001D09r 3  74 01                        stz 1,x                 ; paranoid; now ( ud char )
001D0Br 3               
001D0Br 3  20 rr rr                     jsr xt_hold
001D0Er 3               
001D0Er 3               z_number_sign:
001D0Er 3  60                           rts
001D0Fr 3               
001D0Fr 3               
001D0Fr 3               ; ## NUMBER_SIGN_GREATER ( d -- addr u ) "Finish pictured number conversion"
001D0Fr 3               ; ## "#>"  auto  ANS core
001D0Fr 3                       ; """https://forth-standard.org/standard/core/num-end
001D0Fr 3                       ; Finish conversion of pictured number string, putting address and
001D0Fr 3                       ; length on the Data Stack.
001D0Fr 3                       ;
001D0Fr 3                       ; Original Fort is  2DROP HLD @ PAD OVER -
001D0Fr 3                       ; Based on
001D0Fr 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001D0Fr 3                       ; """
001D0Fr 3               xt_number_sign_greater:
001D0Fr 3               
001D0Fr 3  20 rr rr                     jsr underflow_2         ; double number
001D12r 3               
001D12r 3                               ; The start address lives in tohold
001D12r 3  A5 rr                        lda tohold
001D14r 3  95 00                        sta 0,x         ; LSB of tohold
001D16r 3  95 02                        sta 2,x
001D18r 3  A5 rr                        lda tohold+1
001D1Ar 3  95 01                        sta 1,x         ; MSB of addr
001D1Cr 3  95 03                        sta 3,x         ; ( addr addr )
001D1Er 3               
001D1Er 3                               ; The length of the string is pad - addr
001D1Er 3  20 rr rr                     jsr xt_pad      ; ( addr addr pad )
001D21r 3               
001D21r 3  38                           sec
001D22r 3  B5 00                        lda 0,x         ; LSB of pad address
001D24r 3  F5 02                        sbc 2,x
001D26r 3  95 02                        sta 2,x
001D28r 3               
001D28r 3  B5 01                        lda 1,x         ; MSB, which should always be zero
001D2Ar 3  F5 03                        sbc 3,x
001D2Cr 3  95 03                        sta 3,x         ; ( addr u pad )
001D2Er 3               
001D2Er 3  E8                           inx
001D2Fr 3  E8                           inx
001D30r 3               
001D30r 3               z_number_sign_greater:
001D30r 3  60                           rts
001D31r 3               
001D31r 3               
001D31r 3               ; ## NUMBER_SIGN_S ( d -- addr u ) "Completely convert pictured output"
001D31r 3               ; ## "#s"  auto  ANS core
001D31r 3                       ; """https://forth-standard.org/standard/core/numS
001D31r 3                       ; Completely convert number for pictured numerical output.
001D31r 3                       ;
001D31r 3                       ; Based on
001D31r 3                       ; https://github.com/philburk/pforth/blob/master/fth/system.fth
001D31r 3                       ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
001D31r 3                       ; """
001D31r 3               
001D31r 3               xt_number_sign_s:
001D31r 3  20 rr rr                     jsr underflow_2
001D34r 3               @loop:
001D34r 3                               ; convert a single number ("#")
001D34r 3  20 rr rr                     jsr xt_number_sign
001D37r 3               
001D37r 3                               ; stop when double-celled number in TOS is zero:
001D37r 3  B5 00                        lda 0,x
001D39r 3  15 01                        ora 1,x
001D3Br 3  15 02                        ora 2,x
001D3Dr 3  15 03                        ora 3,x
001D3Fr 3  D0 F3                        bne @loop
001D41r 3               
001D41r 3               z_number_sign_s:
001D41r 3  60                           rts
001D42r 3               
001D42r 3               
001D42r 3               
001D42r 3               ; ## OF (C: -- of-sys) (x1 x2 -- |x1) "Conditional flow control"
001D42r 3               ; ## "of"  auto  ANS core ext
001D42r 3                       ; """http://forth-standard.org/standard/core/OF"""
001D42r 3               
001D42r 3               xt_of:
001D42r 3                               ; Check if value is equal to this case.
001D42r 3                               ; Postpone over (eg. compile a jsr to it)
001D42r 3  A0 rr                        ldy #>xt_over
001D44r 3  A9 rr                        lda #<xt_over
001D46r 3  20 rr rr                     jsr cmpl_subroutine
001D49r 3               
001D49r 3                               ; Postpone = (EQUAL), that is, compile a jsr to it
001D49r 3  A0 rr                        ldy #>xt_equal
001D4Br 3  A9 rr                        lda #<xt_equal
001D4Dr 3  20 rr rr                     jsr cmpl_subroutine
001D50r 3               
001D50r 3  20 rr rr                     jsr xt_if
001D53r 3               
001D53r 3                               ; If it's true, consume the original value.
001D53r 3                               ; Postpone DROP (eg. compile a jsr to it)
001D53r 3  A0 rr                        ldy #>xt_drop
001D55r 3  A9 rr                        lda #<xt_drop
001D57r 3  20 rr rr                     jsr cmpl_subroutine
001D5Ar 3               
001D5Ar 3  60           z_of:           rts
001D5Br 3               
001D5Br 3               
001D5Br 3               
001D5Br 3               ; ## ONE ( -- n ) "Push the number 1 to the Data Stack"
001D5Br 3               ; ## "1"  auto  Tali Forth
001D5Br 3                       ; """This is also the code for EDITOR-WORDLIST"""
001D5Br 3               xt_editor_wordlist:
001D5Br 3               xt_one:
001D5Br 3  CA                           dex
001D5Cr 3  CA                           dex
001D5Dr 3  A9 01                        lda #1
001D5Fr 3  95 00                        sta 0,x
001D61r 3  74 01                        stz 1,x
001D63r 3               
001D63r 3               z_editor_wordlist:
001D63r 3               z_one:
001D63r 3  60                           rts
001D64r 3               
001D64r 3               
001D64r 3               ; ## ONE_MINUS ( u -- u-1 ) "Decrease TOS by one"
001D64r 3               ; ## "1-"  auto  ANS core
001D64r 3                       ; """https://forth-standard.org/standard/core/OneMinus"""
001D64r 3               
001D64r 3               xt_one_minus:
001D64r 3  20 rr rr                     jsr underflow_1
001D67r 3               
001D67r 3  B5 00                        lda 0,x
001D69r 3  D0 02                        bne @1
001D6Br 3  D6 01                        dec 1,x
001D6Dr 3               @1:
001D6Dr 3  D6 00                        dec 0,x
001D6Fr 3               
001D6Fr 3  60           z_one_minus:    rts
001D70r 3               
001D70r 3               
001D70r 3               
001D70r 3               ; ## ONE_PLUS ( u -- u+1 ) "Increase TOS by one"
001D70r 3               ; ## "1+"  auto  ANS core
001D70r 3                       ; """https://forth-standard.org/standard/core/OnePlus
001D70r 3                       ;
001D70r 3                       ; Code is shared with CHAR-PLUS
001D70r 3                       ; """
001D70r 3               
001D70r 3               xt_char_plus:
001D70r 3               xt_one_plus:
001D70r 3  20 rr rr                     jsr underflow_1
001D73r 3               
001D73r 3  F6 00                        inc 0,x
001D75r 3  D0 02                        bne @done
001D77r 3  F6 01                        inc 1,x
001D79r 3               
001D79r 3               @done:
001D79r 3               z_char_plus:
001D79r 3  60           z_one_plus:     rts
001D7Ar 3               
001D7Ar 3               
001D7Ar 3               
001D7Ar 3               ; ## ONLY ( -- ) "Set earch order to minimum wordlist"
001D7Ar 3               ; ## "only"  auto  ANS search ext
001D7Ar 3                       ; """https://forth-standard.org/standard/search/ONLY"""
001D7Ar 3               
001D7Ar 3               xt_only:
001D7Ar 3                               ; Put -1 on data stack.
001D7Ar 3  CA                           dex
001D7Br 3  CA                           dex
001D7Cr 3  A9 FF                        lda #$FF
001D7Er 3  95 00                        sta 0,x
001D80r 3  95 01                        sta 1,x
001D82r 3               
001D82r 3                               ; Invoke set-order to set the minimum search order.
001D82r 3  20 rr rr                     jsr xt_set_order
001D85r 3               
001D85r 3  60           z_only:         rts
001D86r 3               
001D86r 3               
001D86r 3               
001D86r 3               ; ## OR ( m n -- n ) "Logically OR TOS and NOS"
001D86r 3               ; ## "or"  auto  ANS core
001D86r 3                       ; """https://forth-standard.org/standard/core/OR"
001D86r 3               xt_or:
001D86r 3  20 rr rr                     jsr underflow_2
001D89r 3               
001D89r 3  B5 00                        lda 0,x
001D8Br 3  15 02                        ora 2,x
001D8Dr 3  95 02                        sta 2,x
001D8Fr 3               
001D8Fr 3  B5 01                        lda 1,x
001D91r 3  15 03                        ora 3,x
001D93r 3  95 03                        sta 3,x
001D95r 3               
001D95r 3  E8                           inx
001D96r 3  E8                           inx
001D97r 3               
001D97r 3  60           z_or:           rts
001D98r 3               
001D98r 3               
001D98r 3               ; ## ORDER ( -- ) "Print current word order list and current WID"
001D98r 3               ; ## "order"  auto  ANS core
001D98r 3                       ; """https://forth-standard.org/standard/search/ORDER
001D98r 3                       ; Note the search order is displayed from first search to last
001D98r 3                       ; searched and is therefore exactly the reverse of the order in which
001D98r 3                       ; Forth stacks are displayed.
001D98r 3                       ;
001D98r 3                       ; A Forth implementation of this word is:
001D98r 3                       ;
001D98r 3                       ; 	: .wid ( wid -- )
001D98r 3                       ; 	dup 0=  if ." Forth "  drop    else
001D98r 3                       ; 	dup 1 = if ." Editor " drop    else
001D98r 3                       ; 	dup 2 = if ." Assembler " drop else
001D98r 3                       ; 	dup 3 = if ." Root " drop      else
001D98r 3                       ; 	           . ( just print the number )
001D98r 3                       ; 	then then then then ;
001D98r 3                       ;
001D98r 3                       ; : ORDER ( -- )
001D98r 3                       ; 	cr get-order 0 ?do .wid loop
001D98r 3                       ; 	space space get-current .wid ;
001D98r 3                       ;
001D98r 3                       ; This is an interactive program, so speed
001D98r 3                       ; is not as important as size. We assume we do not have more than 255
001D98r 3                       ; wordlists.
001D98r 3                       ; """
001D98r 3               
001D98r 3               xt_order:
001D98r 3  20 rr rr                     jsr xt_cr
001D9Br 3  20 rr rr                     jsr xt_get_order        ; ( wid_n ... wid_1 n )
001D9Er 3               
001D9Er 3                               ; Paranoid: Check if there are no wordlists, a rather
001D9Er 3                               ; pathological case. this would mean ( 0 ) on the stack. In
001D9Er 3                               ; that case, we just drop n and run
001D9Er 3  B5 00                        lda 0,x                 ; assumes no more than 255 wordlists
001DA0r 3  F0 1E                        beq @drop_done
001DA2r 3               
001DA2r 3               @have_wordlists:
001DA2r 3                               ; We arrive here with the LSB of TOS in A, the number of WIDs
001DA2r 3                               ; on the stack
001DA2r 3  A8                           tay
001DA3r 3               @loop:
001DA3r 3  E8                           inx
001DA4r 3  E8                           inx                     ; DROP, now ( wid_n ... wid_1 )
001DA5r 3  B5 00                        lda 0,x
001DA7r 3               
001DA7r 3  5A                           phy
001DA8r 3  20 rr rr                     jsr _print_wid_string   ; internal helper function
001DABr 3  7A                           ply
001DACr 3               
001DACr 3  88                           dey
001DADr 3  D0 F4                        bne @loop
001DAFr 3               
001DAFr 3                               ; We've printed the wordlists, now we add the current wordlist.
001DAFr 3                               ; This follows the convention of Gforth
001DAFr 3  20 rr rr                     jsr xt_space
001DB2r 3  20 rr rr                     jsr xt_space
001DB5r 3  20 rr rr                     jsr xt_get_current      ; ( wid )
001DB8r 3               
001DB8r 3  B5 00                        lda 0,x
001DBAr 3  20 rr rr                     jsr _print_wid_string
001DBDr 3  20 rr rr                     jsr xt_cr
001DC0r 3               
001DC0r 3               @drop_done:
001DC0r 3  E8                           inx
001DC1r 3  E8                           inx
001DC2r 3               z_order:
001DC2r 3  60                           rts
001DC3r 3               
001DC3r 3               _print_wid_string:
001DC3r 3                       ; """Helper function for ORDER: Given a WID in A, print the
001DC3r 3                       ; corresponding string. If there is no such word list defined, just
001DC3r 3                       ; print the number. Assumes we will not have more than 256 WIDs; also
001DC3r 3                       ; assumes we have just loaded A so Z reflects status of byte.  In
001DC3r 3                       ; theory, we could speed this up by having the WID be the same as the
001DC3r 3                       ; number of the strings. However, ORDER is used rather infrequently and
001DC3r 3                       ; this would make changes to the strings.asm file very dangerous, so we
001DC3r 3                       ; follow the slightly more complicated route with a translation table.
001DC3r 3                       ; """
001DC3r 3                               ; If the WID is larger than 3, we have no string avaliable and
001DC3r 3                               ; just print the number.
001DC3r 3                               ; See http://6502.org/tutorials/compare_instructions.html
001DC3r 3                               ; for details
001DC3r 3  C9 04                        cmp #4
001DC5r 3  90 09                        bcc @output_string      ; less than 4, print a real string
001DC7r 3               
001DC7r 3                               ; Our WID is not less than 4, that is, 4 or larger. We just
001DC7r 3                               ; print the number
001DC7r 3  CA                           dex
001DC8r 3  CA                           dex
001DC9r 3  95 00                        sta 0,x
001DCBr 3  74 01                        stz 1,x
001DCDr 3  4C rr rr                     jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
001DD0r 3               
001DD0r 3               @output_string:
001DD0r 3                               ; Get the string number based on WID 0 to 3
001DD0r 3  A8                           tay
001DD1r 3  B9 rr rr                     lda @wid_data,y
001DD4r 3               
001DD4r 3                               ; Print without a line feed
001DD4r 3  4C rr rr                     jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
001DD7r 3               
001DD7r 3               @wid_data:
001DD7r 3                       ; Table of string numbers (see strings.asm) indexed by the WID if
001DD7r 3                       ; less than 4.
001DD7r 3  03                   .byte str_wid_forth            ; WID 0: "Forth"
001DD8r 3  06                   .byte str_wid_editor           ; WID 1: "Editor"
001DD9r 3  07                   .byte str_wid_assembler        ; WID 2: "Assembler"
001DDAr 3  08                   .byte str_wid_root             ; WID 3: "Root"
001DDBr 3               
001DDBr 3               
001DDBr 3               
001DDBr 3               ; ## OUTPUT ( -- addr ) "Return the address of the EMIT vector address"
001DDBr 3               ; ## "output"  tested  Tali Forth
001DDBr 3               xt_output:
001DDBr 3                       ; """Return the address where the jump target for EMIT is stored (but
001DDBr 3                       ; not the vector itself). By default, this will hold the value of
001DDBr 3                       ; kernel_putc routine, but this can be changed by the user, hence this
001DDBr 3                       ; routine.
001DDBr 3                       ; """
001DDBr 3  CA                           dex
001DDCr 3  CA                           dex
001DDDr 3  A9 rr                        lda #<output
001DDFr 3  95 00                        sta 0,x
001DE1r 3  A9 rr                        lda #>output
001DE3r 3  95 01                        sta 1,x
001DE5r 3               
001DE5r 3  60           z_output:       rts
001DE6r 3               
001DE6r 3               
001DE6r 3               ; ## OVER ( b a -- b a b ) "Copy NOS to TOS"
001DE6r 3               ; ## "over"  auto  ANS core
001DE6r 3                       ; """https://forth-standard.org/standard/core/OVER"""
001DE6r 3               xt_over:
001DE6r 3  20 rr rr                     jsr underflow_2
001DE9r 3               
001DE9r 3  CA                           dex
001DEAr 3  CA                           dex
001DEBr 3               
001DEBr 3  B5 04                        lda 4,x         ; LSB
001DEDr 3  95 00                        sta 0,x
001DEFr 3  B5 05                        lda 5,x         ; MSB
001DF1r 3  95 01                        sta 1,x
001DF3r 3               
001DF3r 3  60           z_over:         rts
001DF4r 3               
001DF4r 3               
001DF4r 3               ; ## PAD ( -- addr ) "Return address of user scratchpad"
001DF4r 3               ; ## "pad"  auto  ANS core ext
001DF4r 3                       ; """https://forth-standard.org/standard/core/PAD
001DF4r 3                       ; Return address to a temporary area in free memory for user. Must
001DF4r 3                       ; be at least 84 bytes in size (says ANS). It is located relative to
001DF4r 3                       ; the compile area pointer (CP) and therefore varies in position.
001DF4r 3                       ; This area is reserved for the user and not used by the system
001DF4r 3                       ; """
001DF4r 3               xt_pad:
001DF4r 3  CA                           dex
001DF5r 3  CA                           dex
001DF6r 3               
001DF6r 3  A5 rr                        lda cp
001DF8r 3  18                           clc
001DF9r 3  69 FF                        adc #padoffset  ; assumes padoffset one byte in size
001DFBr 3  95 00                        sta 0,x
001DFDr 3               
001DFDr 3  A5 rr                        lda cp+1
001DFFr 3  69 00                        adc #0          ; only need carry
001E01r 3  95 01                        sta 1,x
001E03r 3               
001E03r 3  60           z_pad:          rts
001E04r 3               
001E04r 3               
001E04r 3               ; ## PAGE ( -- ) "Clear the screen"
001E04r 3               ; ## "page"  tested  ANS facility
001E04r 3                       ; """https://forth-standard.org/standard/facility/PAGE
001E04r 3                       ; Clears a page if supported by ANS terminal codes. This is
001E04r 3                       ; Clear Screen ("ESC[2J") plus moving the cursor to the top
001E04r 3                       ; left of the screen
001E04r 3                       ; """
001E04r 3               xt_page:
001E04r 3  A9 1B                        lda #AscESC
001E06r 3  20 rr rr                     jsr emit_a
001E09r 3  A9 5B                        lda #$5B        ; ASCII for "["
001E0Br 3  20 rr rr                     jsr emit_a
001E0Er 3  A9 32                        lda #'2'
001E10r 3  20 rr rr                     jsr emit_a
001E13r 3  A9 4A                        lda #'J'
001E15r 3  20 rr rr                     jsr emit_a
001E18r 3               
001E18r 3                               ; move cursor to top left of screen
001E18r 3  20 rr rr                     jsr xt_zero
001E1Br 3  20 rr rr                     jsr xt_zero
001E1Er 3  20 rr rr                     jsr xt_at_xy
001E21r 3               
001E21r 3  60           z_page:         rts
001E22r 3               
001E22r 3               
001E22r 3               ; ## PAREN ( -- ) "Discard input up to close paren ( comment )"
001E22r 3               ; ## "("  auto  ANS core
001E22r 3                       ; """http://forth-standard.org/standard/core/p"""
001E22r 3               
001E22r 3               xt_paren:
001E22r 3                               ; Put a right paren on the stack.
001E22r 3  CA                           dex
001E23r 3  CA                           dex
001E24r 3  A9 29                        lda #41     ; Right parenthesis
001E26r 3  95 00                        sta 0,x
001E28r 3  74 01                        stz 1,x
001E2Ar 3               
001E2Ar 3                               ; Call parse.
001E2Ar 3  20 rr rr                     jsr xt_parse
001E2Dr 3               
001E2Dr 3                               ; Throw away the result.
001E2Dr 3  E8                           inx
001E2Er 3  E8                           inx
001E2Fr 3  E8                           inx
001E30r 3  E8                           inx
001E31r 3               
001E31r 3  60           z_paren:        rts
001E32r 3               
001E32r 3               
001E32r 3               
001E32r 3               ; ## PARSE_NAME ( "name" -- addr u ) "Parse the input"
001E32r 3               ; ## "parse-name"  auto  ANS core ext
001E32r 3                       ; """https://forth-standard.org/standard/core/PARSE-NAME
001E32r 3                       ; Find next word in input string, skipping leading whitespace. This is
001E32r 3                       ; a special form of PARSE and drops through to that word. See PARSE
001E32r 3                       ; for more detail. We use this word internally for the interpreter
001E32r 3                       ; because it is a lot easier to use. Reference implementations at
001E32r 3                       ; http://forth-standard.org/standard/core/PARSE-NAME and
001E32r 3                       ; http://www.forth200x.org/reference-implementations/parse-name.fs
001E32r 3                       ; Roughly, the word is comparable to BL WORD COUNT. -- Note that
001E32r 3                       ; though the ANS standard talks about skipping "spaces", whitespace
001E32r 3                       ; is actually perfectly legal (see for example
001E32r 3                       ; http://forth-standard.org/standard/usage#subsubsection.3.4.1.1).
001E32r 3                       ; Otherwise, PARSE-NAME chokes on tabs.
001E32r 3                       ; """
001E32r 3               
001E32r 3               xt_parse_name:
001E32r 3                               ; To enable the compilation of the high-level Forth words
001E32r 3                               ; in forth-words.asm and user-words.asm at boot time,
001E32r 3                               ; PARSE-NAME and PARSE must be able to deal with 16-bit string
001E32r 3                               ; lengths. This is a pain on an 8-bit machine. The pointer
001E32r 3                               ; to the current location is in toin (>IN). We need to check,
001E32r 3                               ; worst case, the characters from cib+toin to cib+ciblen, and
001E32r 3                               ; we can't just use Y as an index.
001E32r 3               
001E32r 3                               ; The counter is CIBLEN-TOIN and stored in tmp1
001E32r 3  A5 rr                        lda ciblen              ; LSB of counter
001E34r 3  38                           sec
001E35r 3  E5 rr                        sbc toin
001E37r 3  85 rr                        sta tmp1
001E39r 3  A5 rr                        lda ciblen+1            ; MSB
001E3Br 3  E5 rr                        sbc toin+1
001E3Dr 3  85 rr                        sta tmp1+1
001E3Fr 3               
001E3Fr 3                               ; Check the result for zero (TOIN is equal to CIBLEN)
001E3Fr 3  A5 rr                        lda tmp1
001E41r 3  05 rr                        ora tmp1+1
001E43r 3  F0 28                        beq @empty_line
001E45r 3               
001E45r 3                               ; We walk through the characters starting at CIB+TOIN, so we
001E45r 3                               ; save a temp version of that in tmp2
001E45r 3  A5 rr                        lda cib
001E47r 3  18                           clc
001E48r 3  65 rr                        adc toin
001E4Ar 3  85 rr                        sta tmp2                ; LSB of first character
001E4Cr 3  A5 rr                        lda cib+1
001E4Er 3  65 rr                        adc toin+1
001E50r 3  85 rr                        sta tmp2+1              ; MSB
001E52r 3               
001E52r 3               @skip_loop:
001E52r 3  B2 rr                        lda (tmp2)              ; work copy of cib
001E54r 3  20 rr rr                     jsr is_whitespace
001E57r 3  90 1F                        bcc @char_found
001E59r 3               
001E59r 3                               ; Char is still whitespace, continue
001E59r 3  E6 rr                        inc tmp2
001E5Br 3  D0 02                        bne @2
001E5Dr 3  E6 rr                        inc tmp2+1
001E5Fr 3               @2:
001E5Fr 3                               ; Adjust counter
001E5Fr 3  A5 rr                        lda tmp1
001E61r 3  D0 02                        bne @3
001E63r 3  C6 rr                        dec tmp1+1
001E65r 3               @3:
001E65r 3  C6 rr                        dec tmp1
001E67r 3               
001E67r 3  A5 rr                        lda tmp1
001E69r 3  05 rr                        ora tmp1+1
001E6Br 3  D0 E5                        bne @skip_loop          ; fall through if empty line
001E6Dr 3               
001E6Dr 3               @empty_line:
001E6Dr 3                               ; Neither the ANS Forth nor the Gforth documentation say
001E6Dr 3                               ; what to return as an address if a string with only
001E6Dr 3                               ; spaces is given. For speed reasons, we just return junk
001E6Dr 3                               ; NOS, with the TOS zero as per standard
001E6Dr 3  CA                           dex
001E6Er 3  CA                           dex
001E6Fr 3  CA                           dex
001E70r 3  CA                           dex
001E71r 3               
001E71r 3  74 00                        stz 0,x                 ; TOS is zero
001E73r 3  74 01                        stz 1,x
001E75r 3               
001E75r 3  4C rr rr                     jmp z_parse_name        ; skip over PARSE
001E78r 3               
001E78r 3               @char_found:
001E78r 3                               ; We arrive here with tmp2 pointing to the first non-space
001E78r 3                               ; character. This is where the word really starts, so
001E78r 3                               ; we use it to calculate the new >IN by subtracting
001E78r 3  A5 rr                        lda tmp2
001E7Ar 3  38                           sec
001E7Br 3  E5 rr                        sbc cib
001E7Dr 3  85 rr                        sta toin
001E7Fr 3  A5 rr                        lda tmp2+1
001E81r 3  E5 rr                        sbc cib+1
001E83r 3  85 rr                        sta toin+1
001E85r 3               
001E85r 3                               ; prepare Data Stack for PARSE by adding space
001E85r 3                               ; as the delimiter
001E85r 3  CA                           dex
001E86r 3  CA                           dex
001E87r 3               
001E87r 3  A9 20                        lda #AscSP
001E89r 3  95 00                        sta 0,x
001E8Br 3  74 01                        stz 1,x                 ; paranoid, now ( "name" c )
001E8Dr 3               
001E8Dr 3               
001E8Dr 3               ; ## PARSE ( "name" c -- addr u ) "Parse input with delimiter character"
001E8Dr 3               ; ## "parse"  tested  ANS core ext
001E8Dr 3                       ; """https://forth-standard.org/standard/core/PARSE
001E8Dr 3                       ; Find word in input string delimited by character given. Do not
001E8Dr 3                       ; skip leading delimiters -- this is the main difference to PARSE-NAME.
001E8Dr 3                       ; PARSE and PARSE-NAME replace WORD in modern systems. ANS discussion
001E8Dr 3                       ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
001E8Dr 3                       ;
001E8Dr 3                       ;
001E8Dr 3                       ;     cib  cib+toin   cib+ciblen
001E8Dr 3                       ;      v      v            v
001E8Dr 3                       ;     |###################|
001E8Dr 3                       ;
001E8Dr 3                       ;     |------>|  toin (>IN)
001E8Dr 3                       ;     |------------------->|  ciblen
001E8Dr 3                       ;
001E8Dr 3                       ; The input string is stored starting at the address in the Current
001E8Dr 3                       ; Input Buffer (CIB), the length of which is in CIBLEN. While searching
001E8Dr 3                       ; for the delimiter, TOIN (>IN) points to the where we currently are.
001E8Dr 3                       ; Since PARSE does not skip leading delimiters, we assume we are on a
001E8Dr 3                       ; useful string if there are any characters at all. As with
001E8Dr 3                       ; PARSE-NAME, we must be able to handle strings with a length of
001E8Dr 3                       ; 16-bit for EVALUTE, which is a pain on an 8-bit machine.
001E8Dr 3                       ; """
001E8Dr 3               
001E8Dr 3               xt_parse:
001E8Dr 3  20 rr rr                     jsr underflow_1
001E90r 3               
001E90r 3                               ; If the input buffer is empty, we just return
001E90r 3  A5 rr                        lda ciblen
001E92r 3  05 rr                        ora ciblen+1
001E94r 3  F0 0C                        beq @abort_parse
001E96r 3               
001E96r 3                               ; If the pointer >IN is larger or equal to the length of
001E96r 3                               ; the input buffer (CIBLEN), the line is done. Put
001E96r 3                               ; differently, we only continue if >IN is smaller than
001E96r 3                               ; CIBLEN
001E96r 3  A5 rr                        lda toin+1              ; MSB
001E98r 3  C5 rr                        cmp ciblen+1
001E9Ar 3  90 0E                        bcc @go_parse           ; unsigned comparison
001E9Cr 3               
001E9Cr 3  A5 rr                        lda toin                ; LSB
001E9Er 3  C5 rr                        cmp ciblen
001EA0r 3  90 08                        bcc @go_parse
001EA2r 3               
001EA2r 3               @abort_parse:
001EA2r 3                               ; Sorry, this line is over
001EA2r 3  CA                           dex
001EA3r 3  CA                           dex
001EA4r 3  74 00                        stz 0,x
001EA6r 3  74 01                        stz 1,x
001EA8r 3               
001EA8r 3  80 7A                        bra @done
001EAAr 3               @go_parse:
001EAAr 3                               ; We actually have work to do. Save the delimiter in
001EAAr 3                               ; tmptos.
001EAAr 3  B5 00                        lda 0,x
001EACr 3  85 rr                        sta tmptos
001EAEr 3               
001EAEr 3                               ; We can now prepare the Data Stack for the return value
001EAEr 3  CA                           dex
001EAFr 3  CA                           dex
001EB0r 3               
001EB0r 3                               ; tmp1 is CIB+TOIN, the beginning of the current string
001EB0r 3                               ; tmp2 is initially the same as tmp1, then the work index
001EB0r 3                               ; tmp3 is CIB+CIBLEN, one char past the end of the string
001EB0r 3               
001EB0r 3                               ; Calculate the beginning of the string, which is also the
001EB0r 3                               ; address to return
001EB0r 3  A5 rr                        lda cib
001EB2r 3  18                           clc
001EB3r 3  65 rr                        adc toin        ; LSB
001EB5r 3  85 rr                        sta tmp1
001EB7r 3  85 rr                        sta tmp2
001EB9r 3  95 02                        sta 2,x
001EBBr 3               
001EBBr 3  A5 rr                        lda cib+1
001EBDr 3  65 rr                        adc toin+1      ; MSB
001EBFr 3  85 rr                        sta tmp1+1
001EC1r 3  85 rr                        sta tmp2+1
001EC3r 3  95 03                        sta 3,x
001EC5r 3               
001EC5r 3                               ; Calculate the address where the input buffer ends plus 1, so
001EC5r 3                               ; we can compare it with TOIN, which is an index
001EC5r 3  A5 rr                        lda cib
001EC7r 3  18                           clc
001EC8r 3  65 rr                        adc ciblen
001ECAr 3  85 rr                        sta tmp3
001ECCr 3  A5 rr                        lda cib+1
001ECEr 3  65 rr                        adc ciblen+1
001ED0r 3  85 rr                        sta tmp3+1
001ED2r 3               
001ED2r 3                               ; Initialize the offset we use to adjust EOL or found delimiter
001ED2r 3  64 rr                        stz tmptos+1
001ED4r 3               @loop:
001ED4r 3                               ; If we are at the end of the string, quit
001ED4r 3  A5 rr                        lda tmp2
001ED6r 3  C5 rr                        cmp tmp3
001ED8r 3  D0 06                        bne @not_empty
001EDAr 3               
001EDAr 3  A5 rr                        lda tmp2+1
001EDCr 3  C5 rr                        cmp tmp3+1
001EDEr 3  F0 1D                        beq @eol
001EE0r 3               @not_empty:
001EE0r 3                               ; We have to do this the hard way. In fact, it's really
001EE0r 3                               ; hard since if we are dealing with a SPACE, the standard
001EE0r 3                               ; wants us to skip all whitespace, not just spaces. Otherwise,
001EE0r 3                               ; Tali would choke on tabs between words. For details, see
001EE0r 3                               ; http://forth-standard.org/standard/file#subsection.11.3.5
001EE0r 3                               ; In theory, we could make this faster by defining a delimiter
001EE0r 3                               ; that is 00 as the sign that we skip all whitespace, thereby
001EE0r 3                               ; avoiding having to test every time. However, somebody,
001EE0r 3                               ; somewhere might want to parse a zero-delimited list. Since
001EE0r 3                               ; any byte value could be chosen for that, we just test for
001EE0r 3                               ; a space every single time for the moment.
001EE0r 3  B2 rr                        lda (tmp2)
001EE2r 3               
001EE2r 3  A4 rr                        ldy tmptos
001EE4r 3  C0 20                        cpy #AscSP
001EE6r 3  D0 07                        bne @not_whitespace
001EE8r 3               
001EE8r 3                               ; The delimiter is a space, so we're looking for all
001EE8r 3                               ; whitespace
001EE8r 3  20 rr rr                     jsr is_whitespace
001EEBr 3  90 02                        bcc @not_whitespace
001EEDr 3  80 0C                        bra @found_delimiter
001EEFr 3               
001EEFr 3               @not_whitespace:
001EEFr 3                               ; The delimiter is not a space, so we're looking for
001EEFr 3                               ; whatever it is
001EEFr 3  C5 rr                        cmp tmptos
001EF1r 3  F0 08                        beq @found_delimiter
001EF3r 3               
001EF3r 3                               ; Not a delimiter, next character
001EF3r 3  E6 rr                        inc tmp2
001EF5r 3  D0 DD                        bne @loop
001EF7r 3  E6 rr                        inc tmp2+1
001EF9r 3  80 D9                        bra @loop
001EFBr 3               
001EFBr 3               @found_delimiter:
001EFBr 3                               ; Increase the offset: If we've found a delimiter, we want
001EFBr 3                               ; TOIN to point to the character after it, not the delimiter
001EFBr 3                               ; itself
001EFBr 3  E6 rr                        inc tmptos+1
001EFDr 3               @eol:
001EFDr 3                               ; The length of the new string is tmp2-tmp1
001EFDr 3  A5 rr                        lda tmp2
001EFFr 3  38                           sec
001F00r 3  E5 rr                        sbc tmp1
001F02r 3  95 00                        sta 0,x
001F04r 3               
001F04r 3  A5 rr                        lda tmp2+1
001F06r 3  E5 rr                        sbc tmp1+1
001F08r 3  95 01                        sta 1,x
001F0Ar 3               
001F0Ar 3                               ; The new offset is tmp2-cib
001F0Ar 3  A5 rr                        lda tmp2
001F0Cr 3  38                           sec
001F0Dr 3  E5 rr                        sbc cib
001F0Fr 3  85 rr                        sta toin
001F11r 3  A5 rr                        lda tmp2+1
001F13r 3  E5 rr                        sbc cib+1
001F15r 3  85 rr                        sta toin+1
001F17r 3               
001F17r 3                               ; Add in the delimiter
001F17r 3  A5 rr                        lda toin
001F19r 3  18                           clc
001F1Ar 3  65 rr                        adc tmptos+1
001F1Cr 3  85 rr                        sta toin
001F1Er 3  A5 rr                        lda toin+1
001F20r 3  69 00                        adc #0          ; we only need the carry
001F22r 3  85 rr                        sta toin+1
001F24r 3               @done:
001F24r 3               z_parse_name:
001F24r 3  60           z_parse:        rts
001F25r 3               
001F25r 3               
001F25r 3               
001F25r 3               ; ## PICK ( n n u -- n n n ) "Move element u of the stack to TOS"
001F25r 3               ; ## "pick"  auto  ANS core ext
001F25r 3                       ; """https://forth-standard.org/standard/core/PICK
001F25r 3                       ; Take the u-th element out of the stack and put it on TOS,
001F25r 3                       ; overwriting the original TOS. 0 PICK is equivalent to DUP, 1 PICK to
001F25r 3                       ; OVER. Note that using PICK is considered poor coding form. Also note
001F25r 3                       ; that FIG Forth has a different behavior for PICK than ANS Forth.
001F25r 3                       ; """
001F25r 3               
001F25r 3               xt_pick:
001F25r 3                               ; Checking for underflow is difficult because it depends on
001F25r 3                               ; which element we want to grab. We could probably figure
001F25r 3                               ; something out, but it wouldn't work with underflow stripping
001F25r 3                               ; Since using PICK is considered poor form anyway, we just
001F25r 3                               ; leave it as it is
001F25r 3  16 00                        asl 0,x         ; we assume u < 128 (stack is small)
001F27r 3  8A                           txa
001F28r 3  75 00                        adc 0,x
001F2Ar 3  A8                           tay
001F2Br 3               
001F2Br 3  B9 02 00                     lda 0002,y
001F2Er 3  95 00                        sta 0,x
001F30r 3  B9 03 00                     lda 0003,y
001F33r 3  95 01                        sta 1,x
001F35r 3               
001F35r 3  60           z_pick:         rts
001F36r 3               
001F36r 3               
001F36r 3               
001F36r 3               ; ## PLUS ( n n -- n ) "Add TOS and NOS"
001F36r 3               ; ## "+"  auto  ANS core
001F36r 3                       ; """https://forth-standard.org/standard/core/Plus"""
001F36r 3               xt_plus:
001F36r 3  20 rr rr                     jsr underflow_2
001F39r 3               
001F39r 3  18                           clc
001F3Ar 3  B5 00                        lda 0,x         ; LSB
001F3Cr 3  75 02                        adc 2,x
001F3Er 3  95 02                        sta 2,x
001F40r 3               
001F40r 3  B5 01                        lda 1,x         ; MSB. No CLC, conserve carry bit
001F42r 3  75 03                        adc 3,x
001F44r 3  95 03                        sta 3,x
001F46r 3               
001F46r 3  E8                           inx
001F47r 3  E8                           inx
001F48r 3               
001F48r 3  60           z_plus:         rts
001F49r 3               
001F49r 3               
001F49r 3               ; ## PLUS_STORE ( n addr -- ) "Add number to value at given address"
001F49r 3               ; ## "+!"  auto  ANS core
001F49r 3                       ; """https://forth-standard.org/standard/core/PlusStore"""
001F49r 3               xt_plus_store:
001F49r 3  20 rr rr                     jsr underflow_2
001F4Cr 3               
001F4Cr 3                               ; move address to tmp1 so we can work with it
001F4Cr 3  B5 00                        lda 0,x
001F4Er 3  85 rr                        sta tmp1
001F50r 3  B5 01                        lda 1,x
001F52r 3  85 rr                        sta tmp1+1
001F54r 3               
001F54r 3  A0 00                        ldy #0          ; LSB
001F56r 3  B1 rr                        lda (tmp1),y
001F58r 3  18                           clc
001F59r 3  75 02                        adc 2,x
001F5Br 3  91 rr                        sta (tmp1),y
001F5Dr 3               
001F5Dr 3  C8                           iny             ; MSB
001F5Er 3  B1 rr                        lda (tmp1),y
001F60r 3  75 03                        adc 3,x
001F62r 3  91 rr                        sta (tmp1),y
001F64r 3               
001F64r 3  E8                           inx
001F65r 3  E8                           inx
001F66r 3  E8                           inx
001F67r 3  E8                           inx
001F68r 3               
001F68r 3  60           z_plus_store:   rts
001F69r 3               
001F69r 3               
001F69r 3               ; ## POSTPONE ( -- ) "Change IMMEDIATE status (it's complicated)"
001F69r 3               ; ## "postpone"  auto   ANS core
001F69r 3                       ; """https://forth-standard.org/standard/core/POSTPONE
001F69r 3                       ; Add the compilation behavior of a word to a new word at
001F69r 3                       ; compile time. If the word that follows it is immediate, include
001F69r 3                       ; it so that it will be compiled when the word being defined is
001F69r 3                       ; itself used for a new word. Tricky, but very useful.
001F69r 3                       ;
001F69r 3                       ; Because POSTPONE expects a word (not an xt) in the input stream (not
001F69r 3                       ; on the Data Stack). This means we cannot build words with
001F69r 3                       ; "jsr xt_postpone, jsr <word>" directly.
001F69r 3                       ; """
001F69r 3               
001F69r 3               xt_postpone:
001F69r 3  20 rr rr                     jsr xt_parse_name               ; ( -- addr n )
001F6Cr 3               
001F6Cr 3                               ; if there was no word provided, complain and quit
001F6Cr 3  B5 00                        lda 0,x
001F6Er 3  15 01                        ora 1,x
001F70r 3  D0 05                        bne @1
001F72r 3               
001F72r 3  A9 05                        lda #err_noname
001F74r 3  4C rr rr                     jmp error
001F77r 3               @1:
001F77r 3  20 rr rr                     jsr xt_find_name                ; ( -- nt | 0 )
001F7Ar 3               
001F7Ar 3                               ; if word not in Dictionary, complain and quit
001F7Ar 3  D0 05                        bne @2
001F7Cr 3  A9 05                        lda #err_noname
001F7Er 3  4C rr rr                     jmp error
001F81r 3               
001F81r 3               @2:
001F81r 3                               ; keep a copy of nt for later
001F81r 3  B5 00                        lda 0,x
001F83r 3  85 rr                        sta tmp1
001F85r 3  B5 01                        lda 1,x
001F87r 3  85 rr                        sta tmp1+1
001F89r 3               
001F89r 3                               ; We need the xt instead of the nt
001F89r 3  20 rr rr                     jsr xt_name_to_int              ; ( nt -- xt )
001F8Cr 3               
001F8Cr 3                               ; See if this is an immediate word. This is easier
001F8Cr 3                               ; with nt than with xt. The status byte of the word
001F8Cr 3                               ; is nt+1
001F8Cr 3  E6 rr                        inc tmp1
001F8Er 3  D0 02                        bne @3
001F90r 3  E6 rr                        inc tmp1+1
001F92r 3               @3:
001F92r 3  B2 rr                        lda (tmp1)
001F94r 3  29 04                        and #IM         ; mask all but Intermediate flag
001F96r 3  F0 05                        beq @not_immediate
001F98r 3               
001F98r 3                               ; We're immediate, so instead of executing it right now, we
001F98r 3                               ; compile it. xt is TOS, so this is easy. The RTS at the end
001F98r 3                               ; takes us back to the original caller
001F98r 3  20 rr rr                     jsr xt_compile_comma
001F9Br 3  80 0A                        bra @done
001F9Dr 3               
001F9Dr 3               @not_immediate:
001F9Dr 3                               ; This is not an immediate word, so we enact "deferred
001F9Dr 3                               ; compilation" by including ' <NAME> COMPILE, which we do by
001F9Dr 3                               ; compiling the run-time routine of LITERAL, the xt itself, and
001F9Dr 3                               ; a subroutine jump to COMPILE,
001F9Dr 3  20 rr rr                     jsr xt_literal
001FA0r 3               
001FA0r 3                               ; Last, compile COMPILE,
001FA0r 3  A0 rr                        ldy #>xt_compile_comma
001FA2r 3  A9 rr                        lda #<xt_compile_comma
001FA4r 3  20 rr rr                     jsr cmpl_subroutine
001FA7r 3               @done:
001FA7r 3  60           z_postpone:     rts
001FA8r 3               
001FA8r 3               
001FA8r 3               
001FA8r 3               ; ## PREVIOUS ( -- ) "Remove the first wordlist in the search order"
001FA8r 3               ; ## "previous"  auto  ANS search ext
001FA8r 3                       ; """http://forth-standard.org/standard/search/PREVIOUS"""
001FA8r 3               
001FA8r 3               xt_previous:
001FA8r 3  20 rr rr                     jsr xt_get_order
001FABr 3  20 rr rr                     jsr xt_nip
001FAEr 3  20 rr rr                     jsr xt_one_minus
001FB1r 3  20 rr rr                     jsr xt_set_order
001FB4r 3               
001FB4r 3  60           z_previous:     rts
001FB5r 3               
001FB5r 3               
001FB5r 3               
001FB5r 3               ; ## QUESTION ( addr -- ) "Print content of a variable"
001FB5r 3               ; ## "?"  tested  ANS tools
001FB5r 3                       ; """https://forth-standard.org/standard/tools/q
001FB5r 3                       ;
001FB5r 3                       ; Only used interactively. Since humans are so slow, we
001FB5r 3                       ; save size and just go for the subroutine jumps
001FB5r 3                       ; """
001FB5r 3               xt_question:
001FB5r 3                               ; FETCH takes care of underflow check
001FB5r 3  20 rr rr                     jsr xt_fetch
001FB8r 3  20 rr rr                     jsr xt_dot
001FBBr 3               
001FBBr 3  60           z_question:     rts
001FBCr 3               
001FBCr 3               
001FBCr 3               ; ## QUESTION_DUP ( n -- 0 | n n ) "Duplicate TOS non-zero"
001FBCr 3               ; ## "?dup"  auto  ANS core
001FBCr 3                       ; """https://forth-standard.org/standard/core/qDUP"""
001FBCr 3               
001FBCr 3               xt_question_dup:
001FBCr 3  20 rr rr                     jsr underflow_1
001FBFr 3               
001FBFr 3                               ; Check if TOS is zero
001FBFr 3  B5 00                        lda 0,x
001FC1r 3  15 01                        ora 1,x
001FC3r 3  F0 0A                        beq @done
001FC5r 3               
001FC5r 3                               ; not zero, duplicate
001FC5r 3  CA                           dex
001FC6r 3  CA                           dex
001FC7r 3  B5 02                        lda 2,x
001FC9r 3  95 00                        sta 0,x
001FCBr 3  B5 03                        lda 3,x
001FCDr 3  95 01                        sta 1,x
001FCFr 3               @done:
001FCFr 3  60           z_question_dup: rts
001FD0r 3               
001FD0r 3               
001FD0r 3               
001FD0r 3               ; ## R_FETCH ( -- n ) "Get copy of top of Return Stack"
001FD0r 3               ; ## "r@"  auto  ANS core
001FD0r 3                       ; """https://forth-standard.org/standard/core/RFetch
001FD0r 3                       ; This word is Compile Only in Tali Forth, though Gforth has it
001FD0r 3                       ; work normally as well
001FD0r 3                       ;
001FD0r 3                       ; An alternative way to write this word
001FD0r 3                       ; would be to access the elements on the stack directly like 2R@
001FD0r 3                       ; does, these versions should be compared at some point.
001FD0r 3                       ; """
001FD0r 3               xt_r_fetch:
001FD0r 3                               ; get the return address
001FD0r 3  7A                           ply             ; LSB
001FD1r 3  84 rr                        sty tmp1
001FD3r 3  7A                           ply             ; MSB
001FD4r 3               
001FD4r 3                               ; --- CUT FOR NATIVE COMPILE ---
001FD4r 3               
001FD4r 3                               ; get the actual top of Return Stack
001FD4r 3  CA                           dex
001FD5r 3  CA                           dex
001FD6r 3               
001FD6r 3  68                           pla             ; LSB
001FD7r 3  95 00                        sta 0,x
001FD9r 3  68                           pla             ; MSB
001FDAr 3  95 01                        sta 1,x
001FDCr 3               
001FDCr 3                               ; now we have to put that value back
001FDCr 3  48                           pha
001FDDr 3  B5 00                        lda 0,x
001FDFr 3  48                           pha
001FE0r 3               
001FE0r 3                               ; --- CUT FOR NATIVE COMPILE ---
001FE0r 3               
001FE0r 3                               ; restore return value
001FE0r 3  5A                           phy             ; MSB
001FE1r 3  A4 rr                        ldy tmp1
001FE3r 3  5A                           phy             ; LSB
001FE4r 3               
001FE4r 3  60           z_r_fetch:      rts
001FE5r 3               
001FE5r 3               
001FE5r 3               ; ## R_FROM ( -- n )(R: n --) "Move top of Return Stack to TOS"
001FE5r 3               ; ## "r>"  auto  ANS core
001FE5r 3                       ; """https://forth-standard.org/standard/core/Rfrom
001FE5r 3                       ; Move Top of Return Stack to Top of Data Stack.
001FE5r 3                       ;
001FE5r 3                       ; We have to move
001FE5r 3                       ; the RTS address out of the way first. This word is handled
001FE5r 3                       ; differently for native and and subroutine compilation, see COMPILE,
001FE5r 3                       ; This is a compile-only word
001FE5r 3                       ; """
001FE5r 3               
001FE5r 3               xt_r_from:
001FE5r 3                               ; Rescue the address of the return jump that is currently
001FE5r 3                               ; on top of the Return Stack. If this word is natively
001FE5r 3                               ; compiled, this is a total waste of time
001FE5r 3  68                           pla             ; LSB
001FE6r 3  85 rr                        sta tmptos
001FE8r 3  7A                           ply             ; MSB
001FE9r 3               
001FE9r 3                               ; --- CUT FOR NATIVE CODING ---
001FE9r 3               
001FE9r 3  CA                           dex
001FEAr 3  CA                           dex
001FEBr 3               
001FEBr 3                               ; now we can access the actual data
001FEBr 3               
001FEBr 3  68                           pla             ; LSB
001FECr 3  95 00                        sta 0,x
001FEEr 3  68                           pla             ; MSB
001FEFr 3  95 01                        sta 1,x
001FF1r 3               
001FF1r 3                               ; --- CUT FOR NATIVE CODING ---
001FF1r 3               
001FF1r 3                               ; restore the return address
001FF1r 3  5A                           phy             ; MSB
001FF2r 3  A5 rr                        lda tmptos
001FF4r 3  48                           pha             ; LSB
001FF5r 3               
001FF5r 3  60           z_r_from:       rts
001FF6r 3               
001FF6r 3               
001FF6r 3               ; ## R_TO_INPUT ( -- ) ( R: n n n n -- ) "Restore input state from Return Stack"
001FF6r 3               ; ## "r>input"  tested  Tali Forth
001FF6r 3                       ; """Restore the current input state as defined by insrc, cib, ciblen,
001FF6r 3                       ; and toin from the Return Stack.
001FF6r 3                       ;
001FF6r 3                       ; See INPUT_TO_R for a discussion of this word. Uses tmp1
001FF6r 3                       ; """
001FF6r 3               
001FF6r 3               xt_r_to_input:
001FF6r 3               
001FF6r 3                               ; We arrive here with the return address on the top of the
001FF6r 3                               ; 65c02's stack. We need to move it out of the way first
001FF6r 3  68                           pla
001FF7r 3  85 rr                        sta tmp1
001FF9r 3  68                           pla
001FFAr 3  85 rr                        sta tmp1+1
001FFCr 3               
001FFCr 3                               ; This assumes that insrc is the first of eight bytes and
001FFCr 3                               ; toin+1 the last in the sequence we want to save from the Zero
001FFCr 3                               ; Page. Since we went in reverse order, insrc is now on the top
001FFCr 3                               ; of the Return Stack.
001FFCr 3  A0 00                        ldy #0
001FFEr 3               @loop:
001FFEr 3  68                           pla
001FFFr 3  99 rr rr                     sta insrc,y
002002r 3  C8                           iny
002003r 3  C0 08                        cpy #8
002005r 3  D0 F7                        bne @loop
002007r 3               
002007r 3                               ; Restore address for return jump
002007r 3  A5 rr                        lda tmp1+1
002009r 3  48                           pha
00200Ar 3  A5 rr                        lda tmp1
00200Cr 3  48                           pha
00200Dr 3               
00200Dr 3  60           z_r_to_input: 	rts
00200Er 3               
00200Er 3               
00200Er 3               
00200Er 3               ; ## RECURSE ( -- ) "Copy recursive call to word being defined"
00200Er 3               ; ## "recurse"  auto  ANS core
00200Er 3                       ; """https://forth-standard.org/standard/core/RECURSE
00200Er 3                       ;
00200Er 3                       ; This word may not be natively compiled
00200Er 3                       ; """
00200Er 3               
00200Er 3               xt_recurse:
00200Er 3                               ; The whole routine amounts to compiling a reference to
00200Er 3                               ; the word that is being compiled. First, we save the JSR
00200Er 3                               ; instruction
00200Er 3  A0 00                        ldy #0
002010r 3               
002010r 3  A9 20                        lda #$20        ; opcode for JSR
002012r 3  91 rr                        sta (cp),y
002014r 3  C8                           iny
002015r 3               
002015r 3                               ; Next, we save the LSB and MSB of the xt of the word
002015r 3                               ; we are currently working on. We first need to see if
002015r 3                               ; WORKWORD has the nt (: started the word) or the
002015r 3                               ; xt (:NONAME started the word). Bit 6 in status tells us.
002015r 3  24 rr                        bit status
002017r 3  70 0C                        bvs @nt_in_workword
002019r 3               
002019r 3                               ; This is a special :NONAME word. Just copy the xt
002019r 3                               ; from WORKWORD into the dictionary.
002019r 3  A5 rr                        lda workword
00201Br 3  91 rr                        sta (cp),y
00201Dr 3  C8                           iny
00201Er 3  A5 rr                        lda workword+1
002020r 3  91 rr                        sta (cp),y
002022r 3  C8                           iny
002023r 3  80 1B                        bra @update_cp
002025r 3               
002025r 3               @nt_in_workword:
002025r 3                               ; This is a regular : word, so the xt is four bytes down
002025r 3                               ; from the nt which we saved in WORKWORD. We could probably
002025r 3                               ; use NAME>INT here but this is going to be faster, and
002025r 3                               ; fast counts with recursion
002025r 3  A5 rr                        lda workword            ; LSB
002027r 3  18                           clc
002028r 3  69 04                        adc #4
00202Ar 3  85 rr                        sta tmp1
00202Cr 3  A5 rr                        lda workword+1          ; MSB
00202Er 3  69 00                        adc #0
002030r 3  85 rr                        sta tmp1+1
002032r 3               
002032r 3  B2 rr                        lda (tmp1)
002034r 3  91 rr                        sta (cp),y
002036r 3  5A                           phy
002037r 3  A0 01                        ldy #1
002039r 3  B1 rr                        lda (tmp1),y
00203Br 3  7A                           ply
00203Cr 3  C8                           iny
00203Dr 3  91 rr                        sta (cp),y
00203Fr 3  C8                           iny
002040r 3               
002040r 3               @update_cp:
002040r 3  98                           tya
002041r 3  18                           clc
002042r 3  65 rr                        adc cp
002044r 3  85 rr                        sta cp
002046r 3  90 02                        bcc @done
002048r 3  E6 rr                        inc cp+1
00204Ar 3               @done:
00204Ar 3  60           z_recurse:      rts
00204Br 3               
00204Br 3               
00204Br 3               
00204Br 3               ; ## REFILL ( -- f ) "Refill the input buffer"
00204Br 3               ; ## "refill"  tested  ANS core ext
00204Br 3                       ; """https://forth-standard.org/standard/core/REFILL
00204Br 3                       ; Attempt to fill the input buffer from the input source, returning
00204Br 3                       ; a true flag if successful. When the input source is the user input
00204Br 3                       ; device, attempt to receive input into the terminal input buffer. If
00204Br 3                       ; successful, make the result the input buffer, set >IN to zero, and
00204Br 3                       ; return true. Receipt of a line containing no characters is considered
00204Br 3                       ; successful. If there is no input available from the current input
00204Br 3                       ; source, return false. When the input source is a string from EVALUATE,
00204Br 3                       ; return false and perform no other action." See
00204Br 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
00204Br 3                       ; and Conklin & Rather p. 156. Note we don't have to care about blocks
00204Br 3                       ; because REFILL is never used on blocks - Tali is able to evaluate the
00204Br 3                       ; entire block as a 1024 byte string.
00204Br 3                       ; """"
00204Br 3               
00204Br 3               xt_refill:
00204Br 3                               ; Get input source from SOURCE-ID. This is an
00204Br 3                               ; optimized version of a subroutine jump to SOURCE-ID
00204Br 3  A5 rr                        lda insrc               ; cheat: We only check LSB
00204Dr 3  D0 2D                        bne @src_not_kbd
00204Fr 3               
00204Fr 3                               ; SOURCE-ID of zero means we're getting stuff from the keyboard
00204Fr 3                               ; with ACCEPT, which wants the address of the current input
00204Fr 3                               ; buffer NOS and the max number of characters to accept TOS
00204Fr 3  CA                           dex
002050r 3  CA                           dex
002051r 3  CA                           dex
002052r 3  CA                           dex
002053r 3               
002053r 3  A5 rr                        lda cib                 ; address of CIB is NOS
002055r 3  95 02                        sta 2,x
002057r 3  A5 rr                        lda cib+1
002059r 3  95 03                        sta 3,x
00205Br 3               
00205Br 3  64 rr                        stz ciblen              ; go in with empty buffer
00205Dr 3  64 rr                        stz ciblen+1
00205Fr 3               
00205Fr 3  A9 FF                        lda #bsize              ; max number of chars is TOS
002061r 3  95 00                        sta 0,x
002063r 3  74 01                        stz 1,x                 ; cheat: We only accept max 255
002065r 3               
002065r 3  20 rr rr                     jsr xt_accept           ; ( addr n1 -- n2)
002068r 3               
002068r 3                               ; ACCEPT returns the number of characters accepted, which
002068r 3                               ; belong in CIBLEN
002068r 3  B5 00                        lda 0,x
00206Ar 3  85 rr                        sta ciblen
00206Cr 3  B5 01                        lda 1,x
00206Er 3  85 rr                        sta ciblen+1            ; though we only accept 255 chars
002070r 3               
002070r 3                               ; make >IN point to beginning of buffer
002070r 3  64 rr                        stz toin
002072r 3  64 rr                        stz toin+1
002074r 3               
002074r 3  A9 FF                        lda #$FF                ; overwrite with TRUE flag
002076r 3  95 00                        sta 0,x
002078r 3  95 01                        sta 1,x
00207Ar 3               
00207Ar 3  80 10                        bra @done
00207Cr 3               
00207Cr 3               @src_not_kbd:
00207Cr 3                               ; If SOURCE-ID doesn't return a zero, it must be a string in
00207Cr 3                               ; memory or a file (remember, no blocks in this version).
00207Cr 3                               ; If source is a string, we were given the flag -1 ($FFFF)
00207Cr 3  1A                           inc
00207Dr 3  D0 08                        bne @src_not_string
00207Fr 3               
00207Fr 3                               ; Simply return FALSE flag as per specification
00207Fr 3  CA                           dex
002080r 3  CA                           dex
002081r 3  74 00                        stz 0,x
002083r 3  74 01                        stz 1,x
002085r 3               
002085r 3  80 05                        bra z_refill
002087r 3               
002087r 3               @src_not_string:
002087r 3                               ; Since we don't have blocks, this must mean that we are trying
002087r 3                               ; to read from a file. However, we don't have files yet, so we
002087r 3                               ; report an error and jump to ABORT.
002087r 3  A9 01                        lda #err_badsource
002089r 3  4C rr rr                     jmp error
00208Cr 3               @done:
00208Cr 3  60           z_refill:       rts
00208Dr 3               
00208Dr 3               
00208Dr 3               
00208Dr 3               ; ## REPEAT (C: orig dest -- ) ( -- ) "Loop flow control"
00208Dr 3               ; ## "repeat"  auto  ANS core
00208Dr 3                       ; """http://forth-standard.org/standard/core/REPEAT"""
00208Dr 3               
00208Dr 3               xt_repeat:
00208Dr 3                               ; Run again first
00208Dr 3  20 rr rr                     jsr xt_again
002090r 3               
002090r 3                               ; Stuff HERE in for the branch address
002090r 3                               ; to get out of the loop
002090r 3  20 rr rr                     jsr xt_here
002093r 3  20 rr rr                     jsr xt_swap
002096r 3  20 rr rr                     jsr xt_store
002099r 3               
002099r 3  60           z_repeat:       rts
00209Ar 3               
00209Ar 3               
00209Ar 3               
00209Ar 3               ; ## RIGHT_BRACKET ( -- ) "Enter the compile state"
00209Ar 3               ; ## "]"  auto  ANS core
00209Ar 3                       ; """https://forth-standard.org/standard/right-bracket
00209Ar 3                       ; This is an immediate word.
00209Ar 3                       ; """
00209Ar 3               xt_right_bracket:
00209Ar 3  A9 FF                        lda #$FF
00209Cr 3  85 rr                        sta state
00209Er 3  85 rr                        sta state+1
0020A0r 3               z_right_bracket:
0020A0r 3  60                           rts
0020A1r 3               
0020A1r 3               
0020A1r 3               ; ## ROOT_WORDLIST ( -- u ) "WID for the Root (minimal) wordlist"
0020A1r 3               ; ## "root-wordlist"  tested  Tali Editor
0020A1r 3               xt_root_wordlist:
0020A1r 3  CA                           dex             ; The WID for the Root wordlist is 3.
0020A2r 3  CA                           dex
0020A3r 3  A9 03                        lda #3
0020A5r 3  95 00                        sta 0,x
0020A7r 3  74 01                        stz 1,x
0020A9r 3               
0020A9r 3               z_root_wordlist:
0020A9r 3  60                           rts
0020AAr 3               
0020AAr 3               
0020AAr 3               ; ## ROT ( a b c -- b c a ) "Rotate first three stack entries downwards"
0020AAr 3               ; ## "rot"  auto  ANS core
0020AAr 3                       ; """https://forth-standard.org/standard/core/ROT
0020AAr 3                       ; Remember "R for 'Revolution'" - the bottom entry comes out
0020AAr 3                       ; on top!
0020AAr 3                       ; """
0020AAr 3               
0020AAr 3               xt_rot:
0020AAr 3  20 rr rr                     jsr underflow_3
0020ADr 3               
0020ADr 3  B4 05                        ldy 5,x         ; MSB first
0020AFr 3  B5 03                        lda 3,x
0020B1r 3  95 05                        sta 5,x
0020B3r 3  B5 01                        lda 1,x
0020B5r 3  95 03                        sta 3,x
0020B7r 3  94 01                        sty 1,x
0020B9r 3               
0020B9r 3  B4 04                        ldy 4,x         ; LSB next
0020BBr 3  B5 02                        lda 2,x
0020BDr 3  95 04                        sta 4,x
0020BFr 3  B5 00                        lda 0,x
0020C1r 3  95 02                        sta 2,x
0020C3r 3  94 00                        sty 0,x
0020C5r 3               
0020C5r 3  60           z_rot:          rts
0020C6r 3               
0020C6r 3               
0020C6r 3               
0020C6r 3               ; ## RSHIFT ( x u -- x ) "Shift TOS to the right"
0020C6r 3               ; ## "rshift"  auto  ANS core
0020C6r 3                       ; """https://forth-standard.org/standard/core/RSHIFT"""
0020C6r 3               xt_rshift:
0020C6r 3  20 rr rr                     jsr underflow_2
0020C9r 3               
0020C9r 3                               ; We shift maximal by 16 bits, mask everything else
0020C9r 3  B5 00                        lda 0,x
0020CBr 3  29 0F                        and #%00001111
0020CDr 3  F0 08                        beq @done               ; if 0 shifts, quit
0020CFr 3               
0020CFr 3  A8                           tay
0020D0r 3               @loop:
0020D0r 3  56 03                        lsr 3,x
0020D2r 3  76 02                        ror 2,x
0020D4r 3  88                           dey
0020D5r 3  D0 F9                        bne @loop
0020D7r 3               @done:
0020D7r 3  E8                           inx
0020D8r 3  E8                           inx
0020D9r 3               
0020D9r 3  60           z_rshift:       rts
0020DAr 3               
0020DAr 3               
0020DAr 3               ; ## S_BACKSLASH_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
0020DAr 3               ; ## "s\""  auto  ANS core
0020DAr 3                       ; """https://forth-standard.org/standard/core/Seq
0020DAr 3                       ; Store address and length of string given, returning ( addr u ).
0020DAr 3                       ; ANS core claims this is compile-only, but the file set expands it
0020DAr 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
0020DAr 3                       ; are evil. We follow general usage. This is just like S" except
0020DAr 3                       ; that it allows for some special escaped characters.
0020DAr 3                       ; """
0020DAr 3               
0020DAr 3               xt_s_backslash_quote:
0020DAr 3                               ; tmp2 will be used to determine if we are handling
0020DAr 3                               ; escaped characters or not. In this case, we are,
0020DAr 3                               ; so set it to $FF (the upper byte will be used to
0020DAr 3                               ; determine if we just had a \ and the next character
0020DAr 3                               ; needs to be modifed as an escaped character).
0020DAr 3  A9 FF                        lda #$FF
0020DCr 3  85 rr                        sta tmp2
0020DEr 3  64 rr                        stz tmp2+1
0020E0r 3               
0020E0r 3                               ; Now that the flag is set, jump into s_quote to process
0020E0r 3                               ; the string.
0020E0r 3  20 rr rr                     jsr s_quote_start
0020E3r 3               @done:
0020E3r 3               z_s_backslash_quote:
0020E3r 3  60                           rts
0020E4r 3               
0020E4r 3               
0020E4r 3               ; This is a helper function for s_backslash_quote to convert a character
0020E4r 3               ; from ASCII to the corresponding hex value, eg 'F'->15
0020E4r 3               convert_hex_value:
0020E4r 3               
0020E4r 3  C9 41                cmp #'A'
0020E6r 3  90 07                bcc @digit
0020E8r 3               
0020E8r 3                       ; It's A-F
0020E8r 3  29 DF                and #$DF                ; Make it uppercase.
0020EAr 3  38                   sec
0020EBr 3  E9 37                sbc #'7'                 ; gives value 10 for 'A'
0020EDr 3  80 03                bra @done
0020EFr 3               
0020EFr 3               @digit:
0020EFr 3                       ; It's 0-9
0020EFr 3  38                   sec
0020F0r 3  E9 30                sbc #'0'
0020F2r 3               
0020F2r 3               @done:
0020F2r 3  60                   rts
0020F3r 3               
0020F3r 3               
0020F3r 3               
0020F3r 3               ; ## SEARCH_WORDLIST ( caddr u wid -- 0 | xt 1 | xt -1) "Search for a word in a wordlist"
0020F3r 3               ; ## "search-wordlist" auto ANS search
0020F3r 3                       ; """https://forth-standard.org/standard/search/SEARCH_WORDLIST"""
0020F3r 3               
0020F3r 3               xt_search_wordlist:
0020F3r 3  20 rr rr                     jsr underflow_3
0020F6r 3               
0020F6r 3                               ; Set up tmp1 with the wordlist indicated by wid
0020F6r 3                               ; on the stack. Start by putting the base address
0020F6r 3                               ; of the wordlists in tmp2.
0020F6r 3  A5 rr                        lda up
0020F8r 3  18                           clc
0020F9r 3  69 06                        adc #wordlists_offset
0020FBr 3  85 rr                        sta tmp2
0020FDr 3  A5 rr                        lda up+1
0020FFr 3  69 00                        adc #0          ; Adding carry
002101r 3  85 rr                        sta tmp2+1
002103r 3               
002103r 3                               ; Add the wid (in cells) to the base address.
002103r 3  B5 00                        lda 0,x
002105r 3  0A                           asl             ; Convert wid to offset in cells (x2)
002106r 3  65 rr                        adc tmp2
002108r 3  85 rr                        sta tmp2
00210Ar 3  90 02                        bcc @1
00210Cr 3  E6 rr                        inc tmp2+1      ; Propagate carry if needed.
00210Er 3               
00210Er 3                               ; tmp2 now holds the address of the dictionary pointer
00210Er 3                               ; for the given wordlist.
00210Er 3               @1:
00210Er 3                               ; Remove the wid from the stack.
00210Er 3  E8                           inx
00210Fr 3  E8                           inx
002110r 3               
002110r 3                               ; check for special case of an empty string (length zero)
002110r 3  B5 00                        lda 0,x
002112r 3  15 01                        ora 1,x
002114r 3  D0 03                        bne @check_wordlist
002116r 3  4C rr rr                     jmp @done
002119r 3               
002119r 3               @check_wordlist:
002119r 3                               ; Check for special case of empty wordlist
002119r 3                               ; (dictionary pointer, in tmp2, is 0)
002119r 3  A5 rr                        lda tmp2
00211Br 3  05 rr                        ora tmp2+1
00211Dr 3  D0 03                        bne @have_string
00211Fr 3  4C rr rr                     jmp @done
002122r 3               
002122r 3               @have_string:
002122r 3                               ; set up first loop iteration
002122r 3  B2 rr                        lda (tmp2)              ; nt of first word in Dictionary
002124r 3  85 rr                        sta tmp1
002126r 3               
002126r 3  E6 rr                        inc tmp2                ; Move to the upper byte
002128r 3  D0 02                        bne @2
00212Ar 3  E6 rr                        inc tmp2+1
00212Cr 3               @2:
00212Cr 3  B2 rr                        lda (tmp2)
00212Er 3  85 rr                        sta tmp1+1
002130r 3               
002130r 3                               ; Reuse tmp2 to hold the address of the mystery string.
002130r 3  B5 02                        lda 2,x                 ; Address of mystery string
002132r 3  85 rr                        sta tmp2
002134r 3  B5 03                        lda 3,x
002136r 3  85 rr                        sta tmp2+1
002138r 3               
002138r 3               @loop:
002138r 3                               ; first quick test: Are strings the same length?
002138r 3  B2 rr                        lda (tmp1)
00213Ar 3  D5 00                        cmp 0,x
00213Cr 3  D0 7B                        bne @next_entry
00213Er 3               
00213Er 3               @compare_string:
00213Er 3                               ; are the same length, so we now have to compare each
00213Er 3                               ; character
00213Er 3               
00213Er 3                               ; second quick test: Is the first character the same?
00213Er 3  B2 rr                        lda (tmp2)      ; first character of mystery string
002140r 3               
002140r 3                               ; Lowercase the incoming charcter.
002140r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
002142r 3  B0 07                        bcs @compare_first
002144r 3  C9 41                        cmp #$41        ; ASCII 'A'
002146r 3  90 03                        bcc @compare_first
002148r 3               
002148r 3                               ; An uppercase letter has been located.  Make it
002148r 3                               ; lowercase.
002148r 3  18                           clc
002149r 3  69 20                        adc #$20
00214Br 3               
00214Br 3               @compare_first:
00214Br 3  A0 08                        ldy #8          ; Offset in nt to name
00214Dr 3  D1 rr                        cmp (tmp1),y    ; first character of current word
00214Fr 3  D0 68                        bne @next_entry
002151r 3               
002151r 3                               ; string length are the same and the first character is the
002151r 3                               ; same. If the length of the string is 1, we're already done
002151r 3  B5 00                        lda 0,x
002153r 3  3A                           dec
002154r 3  F0 2C                        beq @success
002156r 3               
002156r 3                               ; No such luck: The strings are the same length and the first
002156r 3                               ; char is the same, but the word is more than one char long.
002156r 3                               ; So we suck it up and compare every single character. We go
002156r 3                               ; from back to front, because words like CELLS and CELL+ would
002156r 3                               ; take longer otherwise. We can also shorten the loop by one
002156r 3                               ; because we've already compared the first char.
002156r 3               
002156r 3                               ; The string of the word we're testing against is 8 bytes down
002156r 3  A5 rr                        lda tmp1
002158r 3  48                           pha             ; Preserve tmp1 on the return stack.
002159r 3  18                           clc
00215Ar 3  69 08                        adc #8
00215Cr 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
00215Er 3  A5 rr                        lda tmp1+1
002160r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
002161r 3  69 00                        adc #0          ; we only need the carry
002163r 3  85 rr                        sta tmp1+1
002165r 3               
002165r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
002167r 3  88                           dey
002168r 3               
002168r 3               @string_loop:
002168r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
00216Ar 3               
00216Ar 3                               ; Lowercase the incoming charcter.
00216Ar 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
00216Cr 3  B0 07                        bcs @check_char
00216Er 3  C9 41                        cmp #$41        ; ASCII 'A'
002170r 3  90 03                        bcc @check_char
002172r 3               
002172r 3                               ; An uppercase letter has been located.  Make it
002172r 3                               ; lowercase.
002172r 3  18                           clc
002173r 3  69 20                        adc #$20
002175r 3               @check_char:
002175r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
002177r 3  D0 3A                        bne @next_entry_tmp1
002179r 3               
002179r 3  88                           dey
00217Ar 3  D0 EC                        bne @string_loop
00217Cr 3               
00217Cr 3               @success_tmp1:
00217Cr 3  68                           pla             ; Restore tmp1 from the return stack.
00217Dr 3  85 rr                        sta tmp1+1
00217Fr 3  68                           pla
002180r 3  85 rr                        sta tmp1
002182r 3               
002182r 3               @success:
002182r 3                               ; The strings match. Drop the count and put correct nt TOS
002182r 3  E8                           inx
002183r 3  E8                           inx
002184r 3  A5 rr                        lda tmp1
002186r 3  95 00                        sta 0,x
002188r 3  A5 rr                        lda tmp1+1
00218Ar 3  95 01                        sta 1,x
00218Cr 3               
00218Cr 3                               ; Change the nt into an xt, but save a copy of the nt
00218Cr 3                               ; to look up whether the word is immediate or not.
00218Cr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
00218Fr 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
002192r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
002195r 3               
002195r 3  A0 00                        ldy #0                  ; Prepare flag
002197r 3               
002197r 3                               ; The flags are in the second byte of the header
002197r 3  F6 00                        inc 0,x
002199r 3  D0 02                        bne @3
00219Br 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
00219Dr 3               @3:
00219Dr 3  A1 00                        lda (0,x)               ; ( xt char )
00219Fr 3  29 04                        and #IM
0021A1r 3  D0 08                        bne @immediate          ; bit set, we're immediate
0021A3r 3               
0021A3r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
0021A5r 3  95 00                        sta 0,x
0021A7r 3  95 01                        sta 1,x
0021A9r 3  80 28                        bra @done_nodrop
0021ABr 3               
0021ABr 3               @immediate:
0021ABr 3  A9 01                        lda #1                  ; We're immediate, return 1
0021ADr 3  95 00                        sta 0,x
0021AFr 3  74 01                        stz 1,x
0021B1r 3               
0021B1r 3  80 20                        bra @done_nodrop
0021B3r 3               
0021B3r 3               @next_entry_tmp1:
0021B3r 3  68                           pla             ; Restore tmp1 from the return stack.
0021B4r 3  85 rr                        sta tmp1+1
0021B6r 3  68                           pla
0021B7r 3  85 rr                        sta tmp1
0021B9r 3               @next_entry:
0021B9r 3                               ; Not the same, so we get the next word. Next header
0021B9r 3                               ; address is two bytes down
0021B9r 3  A0 02                        ldy #2
0021BBr 3  B1 rr                        lda (tmp1),y
0021BDr 3  48                           pha
0021BEr 3  C8                           iny
0021BFr 3  B1 rr                        lda (tmp1),y
0021C1r 3  85 rr                        sta tmp1+1
0021C3r 3  68                           pla
0021C4r 3  85 rr                        sta tmp1
0021C6r 3               
0021C6r 3                               ; If we got a zero, we've walked the whole Dictionary and
0021C6r 3                               ; return as a failure, otherwise try again
0021C6r 3  05 rr                        ora tmp1+1
0021C8r 3  F0 03                        beq @fail_done
0021CAr 3  4C rr rr                     jmp @loop
0021CDr 3               
0021CDr 3               @fail_done:
0021CDr 3  74 02                        stz 2,x         ; failure flag
0021CFr 3  74 03                        stz 3,x
0021D1r 3               @done:
0021D1r 3  E8                           inx
0021D2r 3  E8                           inx
0021D3r 3               @done_nodrop:
0021D3r 3               z_search_wordlist:
0021D3r 3  60                           rts
0021D4r 3               
0021D4r 3               
0021D4r 3               
0021D4r 3               ; ## SEE ( "name" -- ) "Print information about a Forth word"
0021D4r 3               ; ## "see" tested  ANS tools
0021D4r 3                       ; """https://forth-standard.org/standard/tools/SEE
0021D4r 3                       ; SEE takes the name of a word and prints its name token (nt),
0021D4r 3                       ; execution token (xt), size in bytes, flags used, and then dumps the
0021D4r 3                       ; code and disassembles it.
0021D4r 3                       ; """
0021D4r 3               
0021D4r 3               xt_see:
0021D4r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
0021D7r 3  20 rr rr                     jsr xt_find_name        ; ( nt | 0 )
0021DAr 3               
0021DAr 3                               ; If we got back a zero we don't know that word and so we quit
0021DAr 3                               ; with an error
0021DAr 3  B5 00                        lda 0,x
0021DCr 3  15 01                        ora 1,x
0021DEr 3  D0 05                        bne @1
0021E0r 3               
0021E0r 3  A9 05                        lda #err_noname
0021E2r 3  4C rr rr                     jmp error
0021E5r 3               @1:
0021E5r 3  20 rr rr                     jsr xt_cr
0021E8r 3               
0021E8r 3                               ; We have a legal word, so let's get serious. Save the current
0021E8r 3                               ; number base and use hexadecimal instead.
0021E8r 3  A5 rr                        lda base
0021EAr 3  48                           pha
0021EBr 3  20 rr rr                     jsr xt_hex
0021EEr 3               
0021EEr 3  A9 0A                        lda #str_see_nt
0021F0r 3  20 rr rr                     jsr print_string_no_lf
0021F3r 3               
0021F3r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0021F6r 3  20 rr rr                     jsr xt_u_dot
0021F9r 3  20 rr rr                     jsr xt_space            ; ( nt )
0021FCr 3               
0021FCr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0021FFr 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
002202r 3               
002202r 3  A9 0B                        lda #str_see_xt
002204r 3  20 rr rr                     jsr print_string_no_lf
002207r 3               
002207r 3  20 rr rr                     jsr xt_dup              ; ( nt xt xt )
00220Ar 3  20 rr rr                     jsr xt_u_dot
00220Dr 3  20 rr rr                     jsr xt_cr               ; ( nt xt )
002210r 3               
002210r 3                               ; We print letters for flags and then later follow it with 1 or
002210r 3                               ; 0 to mark if which flag is set
002210r 3  A9 09                        lda #str_see_flags
002212r 3  20 rr rr                     jsr print_string_no_lf
002215r 3               
002215r 3  20 rr rr                     jsr xt_over             ; ( nt xt nt )
002218r 3  20 rr rr                     jsr xt_one_plus         ; ( nt xt nt+1 )
00221Br 3  20 rr rr                     jsr xt_fetch            ; ( nt xt flags )
00221Er 3               
00221Er 3  B5 00                        lda 0,x
002220r 3               
002220r 3                               ; This is crude, but for the moment it is good enough
002220r 3  A0 06                        ldy #6                  ; Not all bits are used
002222r 3               @flag_loop:
002222r 3  48                           pha
002223r 3  29 01                        and #%00000001
002225r 3  18                           clc
002226r 3  69 30                        adc #$30                ; ASCII "0"
002228r 3  20 rr rr                     jsr emit_a
00222Br 3  20 rr rr                     jsr xt_space
00222Er 3               
00222Er 3  68                           pla
00222Fr 3  6A                           ror                     ; Next flag
002230r 3               
002230r 3  88                           dey
002231r 3  D0 EF                        bne @flag_loop
002233r 3               
002233r 3  20 rr rr                     jsr xt_cr
002236r 3               
002236r 3  E8                           inx
002237r 3  E8                           inx                     ; ( nt xt )
002238r 3               
002238r 3                               ; Figure out the size
002238r 3  A9 0C                        lda #str_see_size
00223Ar 3  20 rr rr                     jsr print_string_no_lf
00223Dr 3               
00223Dr 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
002240r 3  20 rr rr                     jsr xt_wordsize         ; ( xt u )
002243r 3  20 rr rr                     jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
002246r 3  20 rr rr                     jsr xt_decimal
002249r 3  20 rr rr                     jsr xt_u_dot            ; ( xt u )
00224Cr 3  20 rr rr                     jsr xt_hex
00224Fr 3  20 rr rr                     jsr xt_cr
002252r 3               
002252r 3                               ; Dump hex and disassemble
002252r 3  20 rr rr                     jsr xt_two_dup          ; ( xt u xt u )
002255r 3  20 rr rr                     jsr xt_dump
002258r 3  20 rr rr                     jsr xt_cr
00225Br 3  20 rr rr                     jsr xt_disasm
00225Er 3               
00225Er 3  68                           pla
00225Fr 3  85 rr                        sta base
002261r 3               
002261r 3  60           z_see:          rts
002262r 3               
002262r 3               
002262r 3               
002262r 3               ; ## SET_CURRENT ( wid -- ) "Set the compilation wordlist"
002262r 3               ; ## "set-current" auto ANS search
002262r 3                       ; """https://forth-standard.org/standard/search/SET-CURRENT"""
002262r 3               
002262r 3               xt_set_current:
002262r 3  20 rr rr                     jsr underflow_1
002265r 3               
002265r 3                               ; Save the value from the data stack.
002265r 3  A0 04                        ldy #current_offset
002267r 3  B5 00                        lda 0,x         ; CURRENT is byte variable
002269r 3  91 rr                        sta (up),y      ; so only the LSB is used.
00226Br 3               
00226Br 3  E8                           inx
00226Cr 3  E8                           inx
00226Dr 3               
00226Dr 3  60           z_set_current:  rts
00226Er 3               
00226Er 3               
00226Er 3               
00226Er 3               ; ## SET_ORDER ( wid_n .. wid_1 n -- ) "Set the current search order"
00226Er 3               ; ## "set-order" auto ANS search
00226Er 3                       ; """https://forth-standard.org/standard/search/SET-ORDER"""
00226Er 3               
00226Er 3               xt_set_order:
00226Er 3                               ; Test for -1 TOS
00226Er 3  A9 FF                        lda #$FF
002270r 3  D5 01                        cmp 1,x
002272r 3  D0 12                        bne @start
002274r 3  D5 00                        cmp 0,x
002276r 3  D0 0E                        bne @start
002278r 3               
002278r 3                               ; There is a -1 TOS.  Replace it with the default
002278r 3                               ; search order, which is just the FORTH-WORDLIST.
002278r 3  CA                           dex             ; Make room for the count.
002279r 3  CA                           dex
00227Ar 3  74 03                        stz 3,x         ; ROOT-WORDLIST is 3
00227Cr 3  A9 03                        lda #3
00227Er 3  95 02                        sta 2,x
002280r 3  74 01                        stz 1,x         ; Count is 1.
002282r 3  A9 01                        lda #1
002284r 3  95 00                        sta 0,x
002286r 3               
002286r 3                               ; Continue processing with ( forth-wordlist 1 -- )
002286r 3               @start:
002286r 3                               ; Set #ORDER - the number of wordlists in the search order.
002286r 3  A0 1E                        ldy #num_order_offset
002288r 3  B5 00                        lda 0,x
00228Ar 3  91 rr                        sta (up),y      ; #ORDER is a byte variable.
00228Cr 3  85 rr                        sta tmp1        ; Save a copy for zero check and looping.
00228Er 3                                               ; Only the low byte is saved in tmp1 as
00228Er 3                                               ; only 8 wordlists are allowed.
00228Er 3               
00228Er 3  E8                           inx             ; Drop the count off the data stack.
00228Fr 3  E8                           inx
002290r 3               
002290r 3                               ; Check if there are zero wordlists.
002290r 3  A5 rr                        lda tmp1
002292r 3  F0 0D                        beq @done       ; If zero, there are no wordlists.
002294r 3               
002294r 3                               ; Move the wordlist ids from the data stack to the search order.
002294r 3  A0 1F                        ldy #search_order_offset
002296r 3               @loop:
002296r 3                               ; Move one wordlist id over into the search order.
002296r 3  B5 00                        lda 0,x         ; The search order is a byte array
002298r 3  91 rr                        sta (up),y      ; so only save the LSB
00229Ar 3  C8                           iny
00229Br 3               
00229Br 3                               ; Remove it from the data stack.
00229Br 3  E8                           inx
00229Cr 3  E8                           inx
00229Dr 3               
00229Dr 3                               ; See if that was the last one to process (first in the list).
00229Dr 3  C6 rr                        dec tmp1
00229Fr 3  D0 F5                        bne @loop
0022A1r 3               
0022A1r 3               @done:
0022A1r 3  60           z_set_order:    rts
0022A2r 3               
0022A2r 3               
0022A2r 3               
0022A2r 3               
0022A2r 3               ; ## S_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
0022A2r 3               ; ## "s""  auto  ANS core
0022A2r 3                       ; """https://forth-standard.org/standard/core/Sq
0022A2r 3                       ; Store address and length of string given, returning ( addr u ).
0022A2r 3                       ; ANS core claims this is compile-only, but the file set expands it
0022A2r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
0022A2r 3                       ; are evil. We follow general usage.
0022A2r 3                       ;
0022A2r 3                       ; Can also be realized as
0022A2r 3                       ;     : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE
0022A2r 3                       ; but it is used so much we want it in code.
0022A2r 3                       ; """
0022A2r 3               
0022A2r 3               xt_s_quote:
0022A2r 3                               ; tmp2 will be used to determine if we are handling
0022A2r 3                               ; escaped characters or not.  In this case, we are
0022A2r 3                               ; not, so set it to zero.
0022A2r 3  64 rr                        stz tmp2
0022A4r 3  64 rr                        stz tmp2+1
0022A6r 3               
0022A6r 3               s_quote_start:
0022A6r 3                               ; Make room on the data stack for the address.
0022A6r 3  CA                           dex
0022A7r 3  CA                           dex
0022A8r 3                               ; Make room on the data stack for the count.
0022A8r 3  CA                           dex
0022A9r 3  CA                           dex
0022AAr 3               
0022AAr 3                               ; Put a jmp over the string data with address to be filled
0022AAr 3                               ; in later.
0022AAr 3  A9 4C                        lda #$4C
0022ACr 3  20 rr rr                     jsr cmpl_a
0022AFr 3               
0022AFr 3                               ; Address to be filled in later, just use $4C for the moment
0022AFr 3  20 rr rr                     jsr cmpl_a
0022B2r 3  20 rr rr                     jsr cmpl_a
0022B5r 3               
0022B5r 3                               ; Save the current value of HERE on the data stack for the
0022B5r 3                               ; address of the string.
0022B5r 3  A5 rr                        lda cp
0022B7r 3  95 02                        sta 2,x
0022B9r 3  A5 rr                        lda cp+1
0022BBr 3  95 03                        sta 3,x
0022BDr 3               
0022BDr 3               @savechars_loop:
0022BDr 3                               ; Start saving the string into the dictionary up to the
0022BDr 3                               ; ending double quote. First, check to see if the input
0022BDr 3                               ; buffer is empty.
0022BDr 3  A5 rr                        lda toin+1              ; MSB
0022BFr 3  C5 rr                        cmp ciblen+1
0022C1r 3  90 2A                        bcc @input_fine         ; unsigned comparison
0022C3r 3               
0022C3r 3  A5 rr                        lda toin                ; LSB
0022C5r 3  C5 rr                        cmp ciblen
0022C7r 3  90 24                        bcc @input_fine
0022C9r 3               
0022C9r 3                               ; Input buffer is empty. Refill it. Refill calls accept,
0022C9r 3                               ; which uses tmp2 and tmp3. Save and restore them.
0022C9r 3  A5 rr                        lda tmp2
0022CBr 3  48                           pha
0022CCr 3  A5 rr                        lda tmp2+1
0022CEr 3  48                           pha
0022CFr 3  A5 rr                        lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
0022D1r 3  48                           pha
0022D2r 3               
0022D2r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
0022D5r 3               
0022D5r 3  68                           pla
0022D6r 3  85 rr                        sta tmp3
0022D8r 3  68                           pla
0022D9r 3  85 rr                        sta tmp2+1
0022DBr 3  68                           pla
0022DCr 3  85 rr                        sta tmp2
0022DEr 3               
0022DEr 3                               ; Check result of refill.
0022DEr 3  B5 00                        lda 0,x
0022E0r 3  15 01                        ora 1,x
0022E2r 3  D0 05                        bne @refill_ok
0022E4r 3               
0022E4r 3                               ; Something when wrong with refill.
0022E4r 3  A9 06                        lda #err_refill
0022E6r 3  4C rr rr                     jmp error
0022E9r 3               
0022E9r 3               @refill_ok:
0022E9r 3                               ; Remove the refill flag from the data stack.
0022E9r 3  E8                           inx
0022EAr 3  E8                           inx
0022EBr 3               
0022EBr 3                               ; For refill success, jump back up to the empty check, just in
0022EBr 3                               ; case refill gave us an empty buffer (eg. empty/blank line of
0022EBr 3                               ; input)
0022EBr 3  80 D0                        bra @savechars_loop
0022EDr 3               
0022EDr 3               @input_fine:
0022EDr 3                               ; There should be at least one valid char to use.
0022EDr 3                               ; Calculate it's address at CIB+TOIN into tmp1
0022EDr 3  A5 rr                        lda cib
0022EFr 3  18                           clc
0022F0r 3  65 rr                        adc toin        ; LSB
0022F2r 3  85 rr                        sta tmp1
0022F4r 3  A5 rr                        lda cib+1
0022F6r 3  65 rr                        adc toin+1      ; MSB
0022F8r 3  85 rr                        sta tmp1+1
0022FAr 3               
0022FAr 3                               ; Get the character
0022FAr 3  B2 rr                        lda (tmp1)
0022FCr 3               
0022FCr 3                               ; Check to see if we are handling escaped characters.
0022FCr 3  24 rr                        bit tmp2
0022FEr 3  30 03                        bmi @handle_escapes    ; Only checking bit 7
002300r 3  4C rr rr                     jmp @regular_char
002303r 3               
002303r 3               @handle_escapes:
002303r 3                               ; We are handling escaped characters.  See if we have
002303r 3                               ; already seen the backslash.
002303r 3  24 rr                        bit tmp2+1
002305r 3  30 03                        bmi @escaped
002307r 3  4C rr rr                     jmp @not_escaped
00230Ar 3               
00230Ar 3               @escaped:
00230Ar 3               
00230Ar 3                               ; We have seen a backslash (previous character). Check to see if
00230Ar 3                               ; we are in the middle of a \x sequence (bit 6 of tmp2+1 will
00230Ar 3                               ; be clear in that case )
00230Ar 3  70 22                        bvs @check_esc_chars
00230Cr 3               
00230Cr 3                               ; We are in the middle of a \x sequence. Check to see if we
00230Cr 3                               ; are on the first or second digit.
00230Cr 3  A9 01                        lda #1
00230Er 3  24 rr                        bit tmp2+1
002310r 3  D0 10                        bne @esc_x_second_digit
002312r 3               
002312r 3                               ; First digit.
002312r 3  E6 rr                        inc tmp2+1  ; Adjust flag for second digit next time.
002314r 3  B2 rr                        lda (tmp1)  ; Get the char again.
002316r 3               
002316r 3                               ; Convert to hex
002316r 3  20 rr rr                     jsr convert_hex_value
002319r 3               
002319r 3                               ; This is the upper nybble, so move it up.
002319r 3  0A                           asl
00231Ar 3  0A                           asl
00231Br 3  0A                           asl
00231Cr 3  0A                           asl
00231Dr 3  85 rr                        sta tmp3    ; Save it for later.
00231Fr 3  4C rr rr                     jmp @next_character
002322r 3               
002322r 3               @esc_x_second_digit:
002322r 3               
002322r 3                               ; We are on the second hex digit of a \x sequence. Clear the
002322r 3                               ; escaped character flag (because we are handling it right
002322r 3                               ; here)
002322r 3  64 rr                        stz tmp2+1
002324r 3  B2 rr                        lda (tmp1)
002326r 3               
002326r 3                               ; Convert to hex, combine with value in tmp3
002326r 3  20 rr rr                     jsr convert_hex_value
002329r 3  05 rr                        ora tmp3
00232Br 3               
00232Br 3  4C rr rr                     jmp @save_character
00232Er 3               
00232Er 3               @check_esc_chars:
00232Er 3                               ; Clear the escaped character flag (because we are
00232Er 3                               ; handling it right here)
00232Er 3  64 rr                        stz tmp2+1
002330r 3               
002330r 3                               ; Process the escaped character
002330r 3               @check_esc_a:
002330r 3  C9 61                        cmp #'a'
002332r 3  D0 05                        bne @check_esc_b
002334r 3               
002334r 3                               ; BEL (ASCII value 7)
002334r 3  A9 07                        lda #7
002336r 3  4C rr rr                     jmp @save_character
002339r 3               
002339r 3               @check_esc_b:
002339r 3  C9 62                        cmp #'b'
00233Br 3  D0 05                        bne @check_esc_e
00233Dr 3               
00233Dr 3                               ; Backspace (ASCII value 8)
00233Dr 3  A9 08                        lda #8
00233Fr 3  4C rr rr                     jmp @save_character
002342r 3               
002342r 3               @check_esc_e:
002342r 3  C9 65                        cmp #'e'
002344r 3  D0 04                        bne @check_esc_f
002346r 3               
002346r 3                               ; ESC (ASCII value 27)
002346r 3  A9 1B                        lda #27
002348r 3  80 75                        bra @save_character
00234Ar 3               
00234Ar 3               @check_esc_f:
00234Ar 3  C9 66                        cmp #'f'
00234Cr 3  D0 04                        bne @check_esc_l
00234Er 3               
00234Er 3                               ; FF (ASCII value 12)
00234Er 3  A9 0C                        lda #12
002350r 3  80 6D                        bra @save_character
002352r 3               
002352r 3               @check_esc_l:
002352r 3  C9 6C                        cmp #'l'
002354r 3  D0 04                        bne @check_esc_m
002356r 3               
002356r 3                               ; LF (ASCII value 10)
002356r 3  A9 0A                        lda #10
002358r 3  80 65                        bra @save_character
00235Ar 3               
00235Ar 3               @check_esc_m:
00235Ar 3                               ; This one is not like the others because we save two
00235Ar 3                               ; characters
00235Ar 3  C9 6D                        cmp #'m'
00235Cr 3  D0 09                        bne @check_esc_n
00235Er 3               
00235Er 3                               ; CR/LF pair (ASCII values 13, 10)
00235Er 3  A9 0D                        lda #13
002360r 3  20 rr rr                     jsr cmpl_a
002363r 3  A9 0A                        lda #10
002365r 3  80 58                        bra @save_character
002367r 3               
002367r 3               @check_esc_n:
002367r 3  C9 6E                        cmp #'n'
002369r 3  D0 04                        bne @check_esc_q
00236Br 3               
00236Br 3                               ; newline, impl. dependant, using LF (ASCII values 10)
00236Br 3  A9 0A                        lda #10
00236Dr 3  80 50                        bra @save_character
00236Fr 3               
00236Fr 3               @check_esc_q:
00236Fr 3  C9 71                        cmp #'q'
002371r 3  D0 04                        bne @check_esc_r
002373r 3               
002373r 3                               ; Double quote (ASCII value 34)
002373r 3  A9 22                        lda #34
002375r 3  80 48                        bra @save_character
002377r 3               
002377r 3               @check_esc_r:
002377r 3  C9 72                        cmp #'r'
002379r 3  D0 04                        bne @check_esc_t
00237Br 3               
00237Br 3                               ; CR (ASCII value 13)
00237Br 3  A9 0D                        lda #13
00237Dr 3  80 40                        bra @save_character
00237Fr 3               
00237Fr 3               @check_esc_t:
00237Fr 3  C9 74                        cmp #'t'
002381r 3  D0 04                        bne @check_esc_v
002383r 3               
002383r 3                               ; Horizontal TAB (ASCII value 9)
002383r 3  A9 09                        lda #9
002385r 3  80 38                        bra @save_character
002387r 3               
002387r 3               @check_esc_v:
002387r 3  C9 76                        cmp #'v'
002389r 3  D0 04                        bne @check_esc_z
00238Br 3               
00238Br 3                               ; Vertical TAB (ASCII value 11)
00238Br 3  A9 0B                        lda #11
00238Dr 3  80 30                        bra @save_character
00238Fr 3               
00238Fr 3               @check_esc_z:
00238Fr 3  C9 7A                        cmp #'z'
002391r 3  D0 04                        bne @check_esc_quote
002393r 3               
002393r 3                               ; NULL (ASCII value 0)
002393r 3  A9 00                        lda #0
002395r 3  80 28                        bra @save_character
002397r 3               
002397r 3               @check_esc_quote:
002397r 3  C9 22                        cmp #$22
002399r 3  D0 04                        bne @check_esc_x
00239Br 3               
00239Br 3                               ; Double quote (ASCII value 34)
00239Br 3  A9 22                        lda #34
00239Dr 3  80 20                        bra @save_character
00239Fr 3               
00239Fr 3               @check_esc_x:
00239Fr 3  C9 78                        cmp #'x'
0023A1r 3  D0 06                        bne @check_esc_backslash
0023A3r 3               
0023A3r 3                               ; This one is difficult. We need to get the next TWO
0023A3r 3                               ; characters (which might require a refill in the middle)
0023A3r 3                               ; and combine them as two hex digits. We do this by
0023A3r 3                               ; clearing bit 6 of tmp2+1 to indicate we are in a digit
0023A3r 3                               ; and using bit 0 to keep track of which digit we are on.
0023A3r 3  A9 BE                        lda #$BE        ; Clear bits 6 and 0
0023A5r 3  85 rr                        sta tmp2+1
0023A7r 3  80 19                        bra @next_character
0023A9r 3               
0023A9r 3               @check_esc_backslash:
0023A9r 3  C9 5C                        cmp #$5C
0023ABr 3  D0 04                        bne @not_escaped
0023ADr 3               
0023ADr 3                               ; Backslash (ASCII value 92)
0023ADr 3  A9 5C                        lda #92
0023AFr 3  80 0E                        bra @save_character
0023B1r 3               
0023B1r 3               @not_escaped:
0023B1r 3                               ; Check for the backslash to see if we should escape
0023B1r 3                               ; the next char.
0023B1r 3  C9 5C                        cmp #$5C        ; The backslash char
0023B3r 3  D0 06                        bne @regular_char
0023B5r 3               
0023B5r 3                               ; We found a backslash.  Don't save anyhing, but set
0023B5r 3                               ; a flag (in tmp2+1) to handle the next char. We don't
0023B5r 3                               ; try to get the next char here as it may require a
0023B5r 3                               ; refill of the input buffer.
0023B5r 3  A9 FF                        lda #$FF
0023B7r 3  85 rr                        sta tmp2+1
0023B9r 3  80 07                        bra @next_character
0023BBr 3               
0023BBr 3               @regular_char:
0023BBr 3                               ; Check if the current character is the end of the string.
0023BBr 3  C9 22                        cmp #$22        ; ASCII for "
0023BDr 3  F0 0C                        beq @found_string_end
0023BFr 3               
0023BFr 3               @save_character:
0023BFr 3                               ; If we didn't reach the end of the string, compile this
0023BFr 3                               ; character into the dictionary
0023BFr 3  20 rr rr                     jsr cmpl_a
0023C2r 3               
0023C2r 3               @next_character:
0023C2r 3                               ; Move on to the next character.
0023C2r 3  E6 rr                        inc toin
0023C4r 3  D0 02                        bne @savechars_loop_longjump
0023C6r 3  E6 rr                        inc toin+1
0023C8r 3               
0023C8r 3               @savechars_loop_longjump:
0023C8r 3  4C rr rr                     jmp @savechars_loop
0023CBr 3               
0023CBr 3               @found_string_end:
0023CBr 3                               ; Use up the delimiter.
0023CBr 3  E6 rr                        inc toin
0023CDr 3  D0 02                        bne @1
0023CFr 3  E6 rr                        inc toin+1
0023D1r 3               @1:
0023D1r 3                               ; Calculate the length of the string, which is the
0023D1r 3                               ; difference between cp and the address of the start
0023D1r 3                               ; of the string (currently saved on the stack).
0023D1r 3  A5 rr                        lda cp
0023D3r 3  38                           sec
0023D4r 3  F5 02                        sbc 2,x
0023D6r 3  95 00                        sta 0,x         ; LSB
0023D8r 3  A5 rr                        lda cp+1
0023DAr 3  F5 03                        sbc 3,x
0023DCr 3  95 01                        sta 1,x         ; MSB
0023DEr 3               
0023DEr 3                               ; Update the address of the jump-over jmp instruction.
0023DEr 3                               ; First determine location of jmp instructions address.
0023DEr 3                               ; It should be 2 bytes before the start of the string.
0023DEr 3                               ; Compute it into tmp1, which is no longer being used.
0023DEr 3  B5 02                        lda 2,x
0023E0r 3  38                           sec
0023E1r 3  E9 02                        sbc #2
0023E3r 3  85 rr                        sta tmp1
0023E5r 3  B5 03                        lda 3,x
0023E7r 3  E9 00                        sbc #0          ; Propagate borrow
0023E9r 3  85 rr                        sta tmp1+1
0023EBr 3               
0023EBr 3                               ; Update the address of the jump to HERE.
0023EBr 3  A5 rr                        lda cp
0023EDr 3  92 rr                        sta (tmp1)
0023EFr 3  A0 01                        ldy #1
0023F1r 3  A5 rr                        lda cp+1
0023F3r 3  91 rr                        sta (tmp1),y
0023F5r 3               
0023F5r 3                               ; What happens next depends on the state (which is bad, but
0023F5r 3                               ; that's the way it works at the moment). If we are
0023F5r 3                               ; interpretating, we save the string to a transient buffer
0023F5r 3                               ; and return that address (used for file calls, see
0023F5r 3                               ; https://forth-standard.org/standard/file/Sq . If we're
0023F5r 3                               ; compiling, we just need SLITERAL
0023F5r 3  A5 rr                        lda state
0023F7r 3  05 rr                        ora state+1             ; paranoid
0023F9r 3  F0 03                        beq @done
0023FBr 3               
0023FBr 3                               ; Jump into the middle of the sliteral word, after the
0023FBr 3                               ; string data has been compiled into the dictionary,
0023FBr 3                               ; because we've already done that step.
0023FBr 3  20 rr rr                     jsr sliteral_const_str         ; ( addr u -- )
0023FEr 3               
0023FEr 3               @done:
0023FEr 3  60           z_s_quote:      rts
0023FFr 3               
0023FFr 3               
0023FFr 3               
0023FFr 3               ; ## S_TO_D ( u -- d ) "Convert single cell number to double cell"
0023FFr 3               ; ## "s>d"  auto  ANS core
0023FFr 3                       ; """https://forth-standard.org/standard/core/StoD"""
0023FFr 3               
0023FFr 3               xt_s_to_d:
0023FFr 3  20 rr rr                     jsr underflow_1
002402r 3               
002402r 3  CA                           dex
002403r 3  CA                           dex
002404r 3  74 00                        stz 0,x
002406r 3  74 01                        stz 1,x
002408r 3               
002408r 3  B5 03                        lda 3,x
00240Ar 3  10 04                        bpl @done
00240Cr 3               
00240Cr 3                               ; negative, extend sign
00240Cr 3  D6 00                        dec 0,x
00240Er 3  D6 01                        dec 1,x
002410r 3               @done:
002410r 3  60           z_s_to_d:       rts
002411r 3               
002411r 3               
002411r 3               
002411r 3               ; ## SAVE_BUFFERS ( -- ) "Save all dirty buffers to storage"
002411r 3               ; ## "save-buffers"  tested  ANS block
002411r 3                       ; """https://forth-standard.org/standard/block/SAVE-BUFFERS"""
002411r 3               
002411r 3               xt_save_buffers:
002411r 3                               ; Check the buffer status
002411r 3  A0 2C                        ldy #buffstatus_offset
002413r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
002415r 3  C9 03                        cmp #3          ; LSB is needed.
002417r 3  D0 12                        bne @done       ; Either not used or not dirty = done!
002419r 3               
002419r 3                               ; We need to save the block.
002419r 3  20 rr rr                     jsr xt_blkbuffer
00241Cr 3  20 rr rr                     jsr xt_buffblocknum
00241Fr 3  20 rr rr                     jsr xt_fetch
002422r 3  20 rr rr                     jsr xt_block_write
002425r 3               
002425r 3                               ; Mark the buffer as clean now.
002425r 3  A9 01                        lda #1
002427r 3  A0 2C                        ldy #buffstatus_offset
002429r 3  91 rr                        sta (up),y
00242Br 3               
00242Br 3               @done:
00242Br 3  60           z_save_buffers: rts
00242Cr 3               
00242Cr 3               
00242Cr 3               
00242Cr 3               ; ## SCR ( -- addr ) "Push address of variable holding last screen listed"
00242Cr 3               ; ## "scr"  auto  ANS block ext
00242Cr 3                       ; """https://forth-standard.org/standard/block/SCR"""
00242Cr 3               xt_scr:
00242Cr 3                               ; SCR is at UP + scr_offset
00242Cr 3  CA                           dex
00242Dr 3  CA                           dex
00242Er 3  18                           clc
00242Fr 3  A5 rr                        lda up
002431r 3  69 02                        adc #scr_offset ; Add offset
002433r 3  95 00                        sta 0,x
002435r 3  A5 rr                        lda up+1
002437r 3  69 00                        adc #0          ; Adding carry
002439r 3  95 01                        sta 1,x
00243Br 3               
00243Br 3  60           z_scr:          rts
00243Cr 3               
00243Cr 3               
00243Cr 3               ; ## SEARCH ( addr1 u1 addr2 u2 -- addr3 u3 flag) "Search for a substring"
00243Cr 3               ; ## "search"   auto  ANS string
00243Cr 3                       ; """https://forth-standard.org/standard/string/SEARCH
00243Cr 3                       ; Search for string2 (denoted by addr2 u2) in string1 (denoted by
00243Cr 3                       ; addr1 u1). If a match is found the flag will be true and
00243Cr 3                       ; addr3 will have the address of the start of the match and u3 will have
00243Cr 3                       ; the number of characters remaining from the match point to the end
00243Cr 3                       ; of the original string1. If a match is not found, the flag will be
00243Cr 3                       ; false and addr3 and u3 will be the original string1's addr1 and u1.
00243Cr 3                       ; """
00243Cr 3               
00243Cr 3               xt_search:
00243Cr 3  20 rr rr                     jsr underflow_4
00243Fr 3               
00243Fr 3                               ; ANS says if the second string is a zero-length string it
00243Fr 3                               ; automatically matches.
00243Fr 3  B5 00                        lda 0,x
002441r 3  15 01                        ora 1,x
002443r 3  D0 0B                        bne @start_search
002445r 3               
002445r 3                               ; The second string is a zero length string.  Just remove
002445r 3                               ; the second string and put a true flag.
002445r 3  E8                           inx             ; Remove u2
002446r 3  E8                           inx
002447r 3  A9 FF                        lda #$FF        ; Turn addr2 into a true flag
002449r 3  95 00                        sta 0,x
00244Br 3  95 01                        sta 1,x
00244Dr 3  4C rr rr                     jmp z_search
002450r 3               
002450r 3               @start_search:
002450r 3                               ; Put an offset (starting at zero) on the stack.
002450r 3  20 rr rr                     jsr xt_zero
002453r 3               
002453r 3               @search_loop:
002453r 3                               ; We stop (not found) when u2 + offset > u1
002453r 3                               ; Calculate u2+offset into tmp1
002453r 3  18                           clc
002454r 3  B5 00                        lda 0,x
002456r 3  75 02                        adc 2,x
002458r 3  85 rr                        sta tmp1
00245Ar 3  B5 01                        lda 1,x
00245Cr 3  75 03                        adc 3,x
00245Er 3               
00245Er 3               
00245Er 3                               ; Compare to u1. Start with the high byte
00245Er 3  D5 07                        cmp 7,x
002460r 3  90 12                        bcc @init_comparison ; Obviously less
002462r 3  D0 06                        bne @not_found
002464r 3               
002464r 3                               ; The upper address byte matched - check the lower byte
002464r 3                               ; Load u1 first so we can use just a carry to check.
002464r 3  B5 06                        lda 6,x
002466r 3  C5 rr                        cmp tmp1
002468r 3  B0 0A                        bcs @init_comparison
00246Ar 3               
00246Ar 3               @not_found:
00246Ar 3                               ; The substring isn't in the main string.
00246Ar 3                               ; Return just the main string and a false flag.
00246Ar 3  E8                           inx             ; Remove offset
00246Br 3  E8                           inx
00246Cr 3  E8                           inx             ; Remove u2
00246Dr 3  E8                           inx
00246Er 3  74 00                        stz 0,x         ; Turn addr2 into a false flag
002470r 3  74 01                        stz 1,x
002472r 3  80 66                        bra z_search
002474r 3               
002474r 3               @init_comparison:
002474r 3                               ; Use tmp1 to hold address in string 1.
002474r 3                               ; Use tmp2 to hold address in string 2.
002474r 3                               ; Use tmp3 to hold the number of characters left to check.
002474r 3               
002474r 3                               ; Compute the starting address in string 1
002474r 3                               ; as addr1 + offset
002474r 3  18                           clc
002475r 3  B5 08                        lda 8,x
002477r 3  75 00                        adc 0,x
002479r 3  85 rr                        sta tmp1
00247Br 3  B5 09                        lda 9,x
00247Dr 3  75 01                        adc 1,x
00247Fr 3  85 rr                        sta tmp1+1
002481r 3               
002481r 3                               ; The starting address in string 2 is just addr2.
002481r 3  B5 04                        lda 4,x
002483r 3  85 rr                        sta tmp2
002485r 3  B5 05                        lda 5,x
002487r 3  85 rr                        sta tmp2+1
002489r 3               
002489r 3                               ; The number of characters to check is u2.
002489r 3  B5 02                        lda 2,x
00248Br 3  85 rr                        sta tmp3
00248Dr 3  B5 03                        lda 3,x
00248Fr 3  85 rr                        sta tmp3+1
002491r 3               
002491r 3               @comparison_loop:
002491r 3                               ; Check to see if the current characters match.
002491r 3  B2 rr                        lda (tmp1)
002493r 3  D2 rr                        cmp (tmp2)
002495r 3  F0 05                        beq @letters_match
002497r 3               
002497r 3                               ; One of the letters didn't match.
002497r 3                               ; Increment the offset and try again.
002497r 3  20 rr rr                     jsr xt_one_plus
00249Ar 3  80 B7                        bra @search_loop
00249Cr 3               
00249Cr 3               @letters_match:
00249Cr 3                               ; The letters match.  Advance the pointers until the
00249Cr 3                               ; count reaches zero.
00249Cr 3  E6 rr                        inc tmp1
00249Er 3  D0 02                        bne @1
0024A0r 3  E6 rr                        inc tmp1+1
0024A2r 3               @1:
0024A2r 3  E6 rr                        inc tmp2
0024A4r 3  D0 02                        bne @2
0024A6r 3  E6 rr                        inc tmp2+1
0024A8r 3               @2:
0024A8r 3                               ; Decrement the count of remaining letters to check.
0024A8r 3  A5 rr                        lda tmp3
0024AAr 3  D0 02                        bne @3
0024ACr 3  C6 rr                        dec tmp3+1
0024AEr 3               @3:
0024AEr 3  C6 rr                        dec tmp3
0024B0r 3               
0024B0r 3                               ; Check if we've reached zero.
0024B0r 3  A5 rr                        lda tmp3
0024B2r 3  05 rr                        ora tmp3+1
0024B4r 3  D0 DB                        bne @comparison_loop ; Check the next letter
0024B6r 3               
0024B6r 3                               ; We've run out of letters and they all match!
0024B6r 3                               ; Return (addr1+offset) (u1-offset) true
0024B6r 3                               ; Add offset to addr1.
0024B6r 3  18                           clc
0024B7r 3  B5 00                        lda 0,x
0024B9r 3  75 08                        adc 8,x
0024BBr 3  95 08                        sta 8,x
0024BDr 3  B5 01                        lda 1,x
0024BFr 3  75 09                        adc 9,x
0024C1r 3  95 09                        sta 9,x
0024C3r 3               
0024C3r 3                               ; Subtract offset from u1.
0024C3r 3  38                           sec
0024C4r 3  B5 06                        lda 6,x
0024C6r 3  F5 00                        sbc 0,x
0024C8r 3  95 06                        sta 6,x
0024CAr 3  B5 07                        lda 7,x
0024CCr 3  F5 01                        sbc 1,x
0024CEr 3  95 07                        sta 7,x
0024D0r 3               
0024D0r 3                               ; Replace addr2, u2, and offset with a true flag.
0024D0r 3  E8                           inx             ; drop offset
0024D1r 3  E8                           inx
0024D2r 3  E8                           inx             ; drop u2
0024D3r 3  E8                           inx
0024D4r 3  A9 FF                        lda #$FF
0024D6r 3  95 00                        sta 0,x         ; Turn addr2 into a true flag.
0024D8r 3  95 01                        sta 1,x
0024DAr 3               
0024DAr 3  60           z_search:       rts
0024DBr 3               
0024DBr 3               
0024DBr 3               
0024DBr 3               ; ## SEMICOLON ( -- ) "End compilation of new word"
0024DBr 3               ; ## ";"  auto  ANS core
0024DBr 3                       ; """https://forth-standard.org/standard/core/Semi
0024DBr 3                       ; End the compilation of a new word into the Dictionary.
0024DBr 3                       ;
0024DBr 3                       ; When we
0024DBr 3                       ; enter this, WORKWORD is pointing to the nt_ of this word in the
0024DBr 3                       ; Dictionary, DP to the previous word, and CP to the next free byte.
0024DBr 3                       ; A Forth definition would be (see "Starting Forth"):
0024DBr 3                       ; : POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE  Following the
0024DBr 3                       ; practice of Gforth, we warn here if a word has been redefined.
0024DBr 3                       ; """
0024DBr 3               
0024DBr 3               xt_semicolon:
0024DBr 3                               ; Check if this is a : word or a :NONAME word.
0024DBr 3  24 rr                        bit status
0024DDr 3  70 11                        bvs @colonword
0024DFr 3               
0024DFr 3                               ; This is a :NONAME word - just put an RTS on the end and
0024DFr 3                               ; the address (held in workword) on the stack.
0024DFr 3  A9 60                        lda #$60                ; opcode for RTS
0024E1r 3  20 rr rr                     jsr cmpl_a
0024E4r 3               
0024E4r 3  CA                           dex
0024E5r 3  CA                           dex
0024E6r 3  A5 rr                        lda workword
0024E8r 3  95 00                        sta 0,x
0024EAr 3  A5 rr                        lda workword+1
0024ECr 3  95 01                        sta 1,x
0024EEr 3  80 45                        bra @semicolon_done
0024F0r 3               
0024F0r 3               @colonword:
0024F0r 3                               ; CP is the byte that will be the address we use in the
0024F0r 3                               ; header as the end-of-compile address (z_word). This is
0024F0r 3                               ; six bytes down from the header
0024F0r 3  A0 06                        ldy #6
0024F2r 3  A5 rr                        lda cp
0024F4r 3  91 rr                        sta (workword),y
0024F6r 3  C8                           iny
0024F7r 3  A5 rr                        lda cp+1
0024F9r 3  91 rr                        sta (workword),y
0024FBr 3               
0024FBr 3                               ; Allocate one further byte and save the RTS instruction
0024FBr 3                               ; there
0024FBr 3  A9 60                        lda #$60                ; opcode for RTS
0024FDr 3  20 rr rr                     jsr cmpl_a
002500r 3               
002500r 3                               ; Before we formally add the word to the Dictionary, we
002500r 3                               ; check to see if it is already present, and if yes, we
002500r 3                               ; warn the user.
002500r 3               
002500r 3                               ; See if word already in Dictionary.
002500r 3                               ; (STATUS bit 7 will be high as CREATE already
002500r 3                               ;  checked for us.)
002500r 3  24 rr                        bit status
002502r 3  10 26                        bpl @new_word   ; Bit 7 is clear = new word
002504r 3               
002504r 3                               ; We start by putting the string of the
002504r 3                               ; word we're defining on the stack
002504r 3  CA                           dex
002505r 3  CA                           dex
002506r 3  CA                           dex
002507r 3  CA                           dex
002508r 3               
002508r 3                               ; WORKWORD points to the beginning of the head of our new
002508r 3                               ; word, where the first byte is the length of the string
002508r 3                               ; We can't use LATESTNT because we haven't added the new
002508r 3                               ; word to the Dictionary yet
002508r 3  B2 rr                        lda (workword)
00250Ar 3  95 00                        sta 0,x
00250Cr 3  74 01                        stz 1,x
00250Er 3               
00250Er 3                               ; Eight bytes below WORKWORD is the actual beginning of
00250Er 3                               ; the string
00250Er 3  A5 rr                        lda workword
002510r 3  18                           clc
002511r 3  69 08                        adc #8
002513r 3  95 02                        sta 2,x
002515r 3  A5 rr                        lda workword+1
002517r 3  69 00                        adc #0                  ; only want carry
002519r 3  95 03                        sta 3,x
00251Br 3               
00251Br 3                               ; This word is already in the Dictionary, so we print a
00251Br 3                               ; warning to the user.
00251Br 3  A9 02                        lda #str_redefined       ; address of string "redefined"
00251Dr 3  20 rr rr                     jsr print_string_no_lf
002520r 3               
002520r 3                               ; Now we print the offending word.
002520r 3  20 rr rr                     jsr xt_type
002523r 3  20 rr rr                     jsr xt_space
002526r 3               
002526r 3                               ; Clear bit 7 of status (so future words will print message
002526r 3                               ; by defaut)
002526r 3  A9 80                        lda #%10000000
002528r 3  14 rr                        trb status
00252Ar 3               
00252Ar 3               @new_word:
00252Ar 3                               ; Let's get this over with. Save beginning of our word
00252Ar 3                               ; as new last word in the Dictionary
00252Ar 3  A5 rr                        lda workword
00252Cr 3  85 rr                        sta dp
00252Er 3  A5 rr                        lda workword+1
002530r 3  85 rr                        sta dp+1
002532r 3  20 rr rr                     jsr dp_to_current       ; Save the updated DP to the
002535r 3                                                       ; CURRENT wordlist.
002535r 3               @semicolon_done:
002535r 3                               ; Word definition complete. Return compile flag to zero
002535r 3                               ; to return to interpret mode
002535r 3  64 rr                        stz state
002537r 3  64 rr                        stz state+1
002539r 3               
002539r 3  60           z_semicolon:    rts
00253Ar 3               
00253Ar 3               
00253Ar 3               
00253Ar 3               ; ## SIGN ( n -- ) "Add minus to pictured output"
00253Ar 3               ; ## "sign"  auto  ANS core
00253Ar 3                       ; """https://forth-standard.org/standard/core/SIGN
00253Ar 3                       ;
00253Ar 3                       ; Code based on
00253Ar 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
00253Ar 3                       ; Original Forth code is   0< IF ASCII - HOLD THEN
00253Ar 3                       ; """
00253Ar 3               
00253Ar 3               xt_sign:
00253Ar 3  20 rr rr                     jsr underflow_1
00253Dr 3               
00253Dr 3  B5 01                        lda 1,x         ; check MSB of TOS
00253Fr 3  30 04                        bmi @minus
002541r 3               
002541r 3  E8                           inx
002542r 3  E8                           inx
002543r 3  80 09                        bra @done
002545r 3               @minus:
002545r 3  A9 2D                        lda #$2D        ; ASCII for "-"
002547r 3  95 00                        sta 0,x         ; overwrite TOS
002549r 3  74 01                        stz 1,x         ; paranoid
00254Br 3               
00254Br 3  20 rr rr                     jsr xt_hold
00254Er 3               @done:
00254Er 3  60           z_sign:         rts
00254Fr 3               
00254Fr 3               
00254Fr 3               
00254Fr 3               ; ## SLASH ( n1 n2 -- n ) "Divide NOS by TOS"
00254Fr 3               ; ## "/"  auto  ANS core
00254Fr 3                       ; """https://forth-standard.org/standard/core/Div
00254Fr 3                       ;
00254Fr 3                       ; Forth code is either  >R S>D R> FM/MOD SWAP DROP
00254Fr 3                       ; or >R S>D R> SM/REM SWAP DROP -- we use SM/REM in Tali Forth.
00254Fr 3                       ; This code is currently unoptimized. This code without the SLASH
00254Fr 3                       ; DROP at the end is /MOD, so we share the code as far as possible.
00254Fr 3                       ; """
00254Fr 3               
00254Fr 3               xt_slash:
00254Fr 3                               ; With all the multiplication going on, it would be hard to
00254Fr 3                               ; make sure that one of our temporary variables is not
00254Fr 3                               ; overwritten. We make sure that doesn't happen by taking the
00254Fr 3                               ; hit of pushing the flag to the 65c02's stack
00254Fr 3  A9 00                        lda #0
002551r 3  48                           pha
002552r 3  80 03                        bra _common
002554r 3               
002554r 3               xt_slash_mod:
002554r 3                               ; Note that /MOD accesses this code
002554r 3  A9 FF                        lda #$FF
002556r 3  48                           pha             ; falls through to _common
002557r 3               
002557r 3               _common:
002557r 3  20 rr rr                     jsr xt_to_r             ; >R
00255Ar 3  20 rr rr                     jsr xt_s_to_d           ; S>D
00255Dr 3  20 rr rr                     jsr xt_r_from           ; R>
002560r 3  20 rr rr                     jsr xt_sm_slash_rem     ; SM/REM
002563r 3               
002563r 3                               ; Get the flag back from the 65c02's stack. Zero is SLASH,
002563r 3                               ; $FF is SLASH MOD
002563r 3  68                           pla
002564r 3  D0 05                        bne @done
002566r 3               
002566r 3                               ; The following code is for SLASH only
002566r 3  20 rr rr                     jsr xt_swap
002569r 3  E8                           inx             ; DROP
00256Ar 3  E8                           inx
00256Br 3               @done:
00256Br 3               z_slash_mod:
00256Br 3  60           z_slash:        rts
00256Cr 3               
00256Cr 3               
00256Cr 3               
00256Cr 3               ; ## SLASH_MOD ( n1 n2 -- n3 n4 ) "Divide NOS by TOS with a remainder"
00256Cr 3               ; ## "/mod"  auto  ANS core
00256Cr 3                       ; """https://forth-standard.org/standard/core/DivMOD
00256Cr 3                       ;
00256Cr 3                       ; This is a dummy entry, the actual code is shared with SLASH
00256Cr 3                       ; """
00256Cr 3               
00256Cr 3               
00256Cr 3               ; ## SLASH_STRING ( addr u n -- addr u ) "Shorten string by n"
00256Cr 3               ; ## "/string"  auto  ANS string
00256Cr 3                       ; """https://forth-standard.org/standard/string/DivSTRING
00256Cr 3                       ;
00256Cr 3                       ; Forth code is
00256Cr 3                       ; : /STRING ( ADDR U N -- ADDR U ) ROT OVER + ROT ROT - ;
00256Cr 3                       ; Put differently, we need to add TOS and 3OS, and subtract
00256Cr 3                       ; TOS from NOS, and then drop TOS
00256Cr 3                       ; """
00256Cr 3               
00256Cr 3               xt_slash_string:
00256Cr 3  20 rr rr                     jsr underflow_3
00256Fr 3               
00256Fr 3  18                           clc             ; 3OS+TOS
002570r 3  B5 00                        lda 0,x
002572r 3  75 04                        adc 4,x
002574r 3  95 04                        sta 4,x
002576r 3               
002576r 3  B5 01                        lda 1,x
002578r 3  75 05                        adc 5,x
00257Ar 3  95 05                        sta 5,x
00257Cr 3               
00257Cr 3  38                           sec             ; NOS-TOS
00257Dr 3  B5 02                        lda 2,x
00257Fr 3  F5 00                        sbc 0,x
002581r 3  95 02                        sta 2,x
002583r 3               
002583r 3  B5 03                        lda 3,x
002585r 3  F5 01                        sbc 1,x
002587r 3  95 03                        sta 3,x
002589r 3               
002589r 3  E8                           inx
00258Ar 3  E8                           inx
00258Br 3               
00258Br 3  60           z_slash_string: rts
00258Cr 3               
00258Cr 3               
00258Cr 3               
00258Cr 3               ; ## SLITERAL ( addr u -- )( -- addr u ) "Compile a string for runtime"
00258Cr 3               ; ## "sliteral" auto  ANS string
00258Cr 3                       ; """https://forth-standard.org/standard/string/SLITERAL
00258Cr 3                       ; Add the runtime for an existing string.
00258Cr 3                       ; """
00258Cr 3               
00258Cr 3               xt_sliteral:
00258Cr 3  20 rr rr                     jsr underflow_2
00258Fr 3               
00258Fr 3                               ; We can't assume that ( addr u ) of the current string is in
00258Fr 3                               ; a stable area (eg. already in the dictionary.) Copy the
00258Fr 3                               ; string data into the dictionary using move.
00258Fr 3               
00258Fr 3                               ; Put a jmp over the string data with address to be filled
00258Fr 3                               ; in later.
00258Fr 3  A9 4C                        lda #$4C
002591r 3  20 rr rr                     jsr cmpl_a
002594r 3               
002594r 3                               ; Address to be filled in later.
002594r 3  20 rr rr                     jsr cmpl_a
002597r 3  20 rr rr                     jsr cmpl_a
00259Ar 3               
00259Ar 3                               ; Turn the data stack from ( addr u ) into
00259Ar 3                               ; ( here u addr here u ) so move can be called with
00259Ar 3                               ; the remaining items on the stack ready for processing.
00259Ar 3                               ; Reserve three extra words on the stack.
00259Ar 3  8A                           txa
00259Br 3  38                           sec
00259Cr 3  E9 06                        sbc #6
00259Er 3  AA                           tax
00259Fr 3               
00259Fr 3                               ; Move addr down from TOS-4 to TOS-2
00259Fr 3  B5 08                        lda 8,x
0025A1r 3  95 04                        sta 4,x
0025A3r 3  B5 09                        lda 9,x
0025A5r 3  95 05                        sta 5,x
0025A7r 3               
0025A7r 3                               ; Copy u from TOS-3 to TOS
0025A7r 3  B5 06                        lda 6,x
0025A9r 3  95 00                        sta 0,x
0025ABr 3  B5 07                        lda 7,x
0025ADr 3  95 01                        sta 1,x
0025AFr 3               
0025AFr 3                               ; Put HERE into TOS-1 and TOS-4
0025AFr 3  A5 rr                        lda cp
0025B1r 3  95 08                        sta 8,x
0025B3r 3  95 02                        sta 2,x
0025B5r 3  A5 rr                        lda cp+1
0025B7r 3  95 09                        sta 9,x
0025B9r 3  95 03                        sta 3,x
0025BBr 3               
0025BBr 3                               ; Copy the string into the dictionary.
0025BBr 3  20 rr rr                     jsr xt_move
0025BEr 3               
0025BEr 3                               ; Update cp.
0025BEr 3  18                           clc
0025BFr 3  A5 rr                        lda cp
0025C1r 3  75 00                        adc 0,x
0025C3r 3  85 rr                        sta cp
0025C5r 3  A5 rr                        lda cp+1
0025C7r 3  75 01                        adc 1,x
0025C9r 3  85 rr                        sta cp+1
0025CBr 3               
0025CBr 3                               ; Update the address of the jump-over jmp instruction.
0025CBr 3                               ; First determine location of jmp instructions address.
0025CBr 3                               ; It should be 2 bytes before the start of the string.
0025CBr 3               
0025CBr 3                               ; Compute it into tmp1, which is no longer being used.
0025CBr 3  B5 02                        lda 2,x
0025CDr 3  38                           sec
0025CEr 3  E9 02                        sbc #2
0025D0r 3  85 rr                        sta tmp1
0025D2r 3  B5 03                        lda 3,x
0025D4r 3  E9 00                        sbc #0          ; Propagate borrow
0025D6r 3  85 rr                        sta tmp1+1
0025D8r 3               
0025D8r 3                               ; Update the address of the jump to HERE.
0025D8r 3  A5 rr                        lda cp
0025DAr 3  92 rr                        sta (tmp1)
0025DCr 3  A0 01                        ldy #1
0025DEr 3  A5 rr                        lda cp+1
0025E0r 3  91 rr                        sta (tmp1),y
0025E2r 3               
0025E2r 3                               ; Stack is now ( addr2 u ) where addr2 is the new
0025E2r 3                               ; location in the dictionary.
0025E2r 3               
0025E2r 3               sliteral_const_str:
0025E2r 3                               ; Compile a subroutine jump to the runtime of SLITERAL that
0025E2r 3                               ; pushes the new ( addr u ) pair to the Data Stack.
0025E2r 3                               ; When we're done, the code will look like this:
0025E2r 3               
0025E2r 3                               ; xt -->    jmp a
0025E2r 3                               ;           <string data bytes>
0025E2r 3                               ;  a -->    jsr sliteral_runtime
0025E2r 3                               ;           <string address>
0025E2r 3                               ;           <string length>
0025E2r 3                               ; rts -->
0025E2r 3               
0025E2r 3                               ; This means we'll have to adjust the return address for two
0025E2r 3                               ; cells, not just one
0025E2r 3  A0 rr                        ldy #>sliteral_runtime
0025E4r 3  A9 rr                        lda #<sliteral_runtime
0025E6r 3  20 rr rr                     jsr cmpl_subroutine
0025E9r 3               
0025E9r 3                               ; We want to have the address end up as NOS and the length
0025E9r 3                               ; as TOS, so we store the address first
0025E9r 3  B4 03                        ldy 3,x                ; address MSB
0025EBr 3  B5 02                        lda 2,x                ; address LSB
0025EDr 3  20 rr rr                     jsr cmpl_word
0025F0r 3               
0025F0r 3  B4 01                        ldy 1,x                ; length MSB
0025F2r 3  B5 00                        lda 0,x                ; length LSB
0025F4r 3  20 rr rr                     jsr cmpl_word
0025F7r 3               
0025F7r 3                               ; clean up and leave
0025F7r 3  E8                           inx
0025F8r 3  E8                           inx
0025F9r 3  E8                           inx
0025FAr 3  E8                           inx
0025FBr 3               
0025FBr 3  60           z_sliteral:     rts
0025FCr 3               
0025FCr 3               
0025FCr 3               sliteral_runtime:
0025FCr 3               
0025FCr 3                       ; """Run time behaviour of SLITERAL: Push ( addr u ) of string to
0025FCr 3                       ; the Data Stack. We arrive here with the return address as the
0025FCr 3                       ; top of Return Stack, which points to the address of the string
0025FCr 3                       ; """
0025FCr 3  CA                           dex
0025FDr 3  CA                           dex
0025FEr 3  CA                           dex
0025FFr 3  CA                           dex
002600r 3               
002600r 3                               ; Get the address of the string address off the stack and
002600r 3                               ; increase by one because of the RTS mechanics
002600r 3  68                           pla
002601r 3  85 rr                        sta tmp1        ; LSB of address
002603r 3  68                           pla
002604r 3  85 rr                        sta tmp1+1      ; MSB of address
002606r 3               
002606r 3                               ; Walk through both and save them
002606r 3  A0 01                        ldy #1          ; adjust for JSR/RTS mechanics on 65c02
002608r 3  B1 rr                        lda (tmp1),y
00260Ar 3  95 02                        sta 2,x         ; LSB of address
00260Cr 3  C8                           iny
00260Dr 3               
00260Dr 3  B1 rr                        lda (tmp1),y
00260Fr 3  95 03                        sta 3,x         ; MSB of address
002611r 3  C8                           iny
002612r 3               
002612r 3  B1 rr                        lda (tmp1),y
002614r 3  95 00                        sta 0,x         ; LSB of length
002616r 3  C8                           iny
002617r 3               
002617r 3  B1 rr                        lda (tmp1),y
002619r 3  95 01                        sta 1,x         ; MSB of length
00261Br 3               
00261Br 3                               ; restore return address
00261Br 3  18                           clc
00261Cr 3  A5 rr                        lda tmp1
00261Er 3  69 04                        adc #4
002620r 3  A8                           tay             ; LSB
002621r 3  A5 rr                        lda tmp1+1
002623r 3  69 00                        adc #0          ; we only need carry
002625r 3  48                           pha             ; MSB
002626r 3  5A                           phy
002627r 3               
002627r 3  60                           rts
002628r 3               
002628r 3               
002628r 3               
002628r 3               ; ## SM_SLASH_REM ( d n1 -- n2 n3 ) "Symmetic signed division"
002628r 3               ; ## "sm/rem"  auto  ANS core
002628r 3                       ; """https://forth-standard.org/standard/core/SMDivREM
002628r 3                       ; Symmetic signed division. Compare FM/MOD. Based on F-PC 3.6
002628r 3                       ; by Ulrich Hoffmann. See http://www.xlerb.de/uho/ansi.seq
002628r 3                       ;
002628r 3                       ; Forth:
002628r 3                       ; OVER >R 2DUP XOR 0< >R ABS >R DABS R> UM/MOD R> ?NEGATE SWAP
002628r 3                       ; R> ?NEGATE SWAP
002628r 3                       ; """
002628r 3               
002628r 3               xt_sm_slash_rem:
002628r 3  20 rr rr                     jsr underflow_3 ; contains double number
00262Br 3               
00262Br 3                               ; push MSB of high cell of d to Data Stack so we can check
00262Br 3                               ; its sign later
00262Br 3  B5 03                        lda 3,x
00262Dr 3  48                           pha
00262Er 3               
00262Er 3                               ; XOR the MSB of the high cell of d and n1 so we figure out
00262Er 3                               ; its sign later as well
00262Er 3  B5 01                        lda 1,x
002630r 3  55 03                        eor 3,x
002632r 3  48                           pha
002633r 3               
002633r 3                               ; Prepare division by getting absolute of n1 and d
002633r 3  20 rr rr                     jsr xt_abs
002636r 3  E8                           inx             ; pretend we pushed n1 to R
002637r 3  E8                           inx
002638r 3               
002638r 3  20 rr rr                     jsr xt_dabs
00263Br 3  CA                           dex
00263Cr 3  CA                           dex
00263Dr 3               
00263Dr 3  20 rr rr                     jsr xt_um_slash_mod     ; UM/MOD
002640r 3               
002640r 3                               ; if the XOR compiled above is negative, negate the
002640r 3                               ; quotient (n3)
002640r 3  68                           pla
002641r 3  10 03                        bpl @1
002643r 3  20 rr rr                     jsr xt_negate
002646r 3               @1:
002646r 3                               ; if d was negative, negate the remainder (n2)
002646r 3  68                           pla
002647r 3  10 07                        bpl @done
002649r 3               
002649r 3  E8                           inx             ; pretend we pushed quotient to R
00264Ar 3  E8                           inx
00264Br 3  20 rr rr                     jsr xt_negate
00264Er 3  CA                           dex
00264Fr 3  CA                           dex
002650r 3               
002650r 3               @done:
002650r 3  60           z_sm_slash_rem: rts
002651r 3               
002651r 3               
002651r 3               
002651r 3               ; ## SOURCE ( -- addr u ) "Return location and size of input buffer""
002651r 3               ; ## "source"  auto  ANS core
002651r 3                       ; """https://forth-standard.org/standard/core/SOURCE"""
002651r 3               xt_source:
002651r 3                               ; add address
002651r 3  CA                           dex
002652r 3  CA                           dex
002653r 3  A5 rr                        lda cib
002655r 3  95 00                        sta 0,x
002657r 3  A5 rr                        lda cib+1
002659r 3  95 01                        sta 1,x
00265Br 3               
00265Br 3                               ; add size
00265Br 3  CA                           dex
00265Cr 3  CA                           dex
00265Dr 3  A5 rr                        lda ciblen
00265Fr 3  95 00                        sta 0,x
002661r 3  A5 rr                        lda ciblen+1
002663r 3  95 01                        sta 1,x
002665r 3               
002665r 3  60           z_source:       rts
002666r 3               
002666r 3               
002666r 3               ; ## SOURCE_ID ( -- n ) "Return source identifier"
002666r 3               ; ## "source-id"  tested  ANS core ext
002666r 3                       ; """https://forth-standard.org/standard/core/SOURCE-ID Identify the
002666r 3                       ; input source unless it is a block (s. Conklin & Rather p. 156). This
002666r 3                       ; will give the input source: 0 is keyboard, -1 ($FFFF) is character
002666r 3                       ; string, and a text file gives the fileid.
002666r 3                       ; """
002666r 3               xt_source_id:
002666r 3  CA                           dex
002667r 3  CA                           dex
002668r 3               
002668r 3  A5 rr                        lda insrc
00266Ar 3  95 00                        sta 0,x
00266Cr 3  A5 rr                        lda insrc+1
00266Er 3  95 01                        sta 1,x
002670r 3               
002670r 3  60           z_source_id:    rts
002671r 3               
002671r 3               
002671r 3               ; ## SPACE ( -- ) "Print a single space"
002671r 3               ; ## "space"  auto  ANS core
002671r 3                       ; """https://forth-standard.org/standard/core/SPACE"""
002671r 3               xt_space:
002671r 3  A9 20                        lda #AscSP
002673r 3  20 rr rr                     jsr emit_a
002676r 3               
002676r 3  60           z_space:        rts
002677r 3               
002677r 3               
002677r 3               ; ## SPACES ( u -- ) "Print a number of spaces"
002677r 3               ; ## "spaces"  auto  ANS core
002677r 3                       ; """https://forth-standard.org/standard/core/SPACES"""
002677r 3               
002677r 3               xt_spaces:
002677r 3  20 rr rr                     jsr underflow_1
00267Ar 3               
00267Ar 3                               ; catch any zero in TOS fast
00267Ar 3  B5 00                        lda 0,x
00267Cr 3  15 01                        ora 1,x
00267Er 3  F0 2A                        beq @done
002680r 3               
002680r 3                               ; Usually we're only going to print far less than 256 spaces,
002680r 3                               ; so we create a quick loop for that. Short loop could be realized
002680r 3                               ; as a separate subroutine, but unless we're really pressed for
002680r 3                               ; memory at some point, this is faster
002680r 3  B4 01                        ldy 1,x
002682r 3  D0 0C                        bne @lots_of_spaces
002684r 3               
002684r 3  B4 00                        ldy 0,x
002686r 3               @quick_loop:
002686r 3                               ; we reach here knowing that there must be a number that is not
002686r 3                               ; zero in the TOS
002686r 3  A9 20                        lda #AscSP
002688r 3  20 rr rr                     jsr emit_a
00268Br 3  88                           dey
00268Cr 3  F0 1C                        beq @done
00268Er 3  80 F6                        bra @quick_loop
002690r 3               
002690r 3               @lots_of_spaces:
002690r 3                               ; We go through the first loop once to get rid of the lower
002690r 3                               ; counter byte. This could be zero
002690r 3  B4 00                        ldy 0,x
002692r 3               
002692r 3               @first_slow_loop:
002692r 3  F0 08                        beq @slow_outer_loop
002694r 3  A9 20                        lda #AscSP
002696r 3  20 rr rr                     jsr emit_a
002699r 3  88                           dey
00269Ar 3  80 F6                        bra @first_slow_loop
00269Cr 3               
00269Cr 3               @slow_outer_loop:
00269Cr 3                               ; we arrive here knowing that the MSB of TOS cannot be a zero
00269Cr 3  A0 00                        ldy #00
00269Er 3               
00269Er 3               @slow_inner_loop:
00269Er 3  A9 20                        lda #AscSP
0026A0r 3  20 rr rr                     jsr emit_a
0026A3r 3  88                           dey
0026A4r 3  D0 F8                        bne @slow_inner_loop
0026A6r 3               
0026A6r 3  D6 01                        dec 1,x
0026A8r 3  D0 F2                        bne @slow_outer_loop
0026AAr 3               
0026AAr 3               @done:
0026AAr 3  E8                           inx             ; drop
0026ABr 3  E8                           inx
0026ACr 3               
0026ACr 3  60           z_spaces:       rts
0026ADr 3               
0026ADr 3               
0026ADr 3               
0026ADr 3               ; ## STAR ( n n -- n ) "16*16 --> 16 "
0026ADr 3               ; ## "*"  auto  ANS core
0026ADr 3                       ; """https://forth-standard.org/standard/core/Times
0026ADr 3                       ; Multiply two signed 16 bit numbers, returning a 16 bit result.
0026ADr 3                       ;
0026ADr 3                       ; This is nothing  more than UM* DROP
0026ADr 3                       ; """
0026ADr 3               
0026ADr 3               xt_star:
0026ADr 3  20 rr rr                     jsr underflow_2
0026B0r 3               
0026B0r 3  20 rr rr                     jsr xt_um_star
0026B3r 3  E8                           inx
0026B4r 3  E8                           inx
0026B5r 3               
0026B5r 3  60           z_star:         rts
0026B6r 3               
0026B6r 3               
0026B6r 3               
0026B6r 3               ; ## STAR_SLASH  ( n1 n2 n3 -- n4 ) "n1 * n2 / n3 -->  n"
0026B6r 3               ; ## "*/"  auto  ANS core
0026B6r 3                       ; """https://forth-standard.org/standard/core/TimesDiv
0026B6r 3                       ; Multiply n1 by n2 and divide by n3, returning the result
0026B6r 3                       ; without a remainder. This is */MOD without the mod.
0026B6r 3                       ;
0026B6r 3                       ; This word
0026B6r 3                       ; can be defined in Forth as : */  */MOD SWAP DROP ; which is
0026B6r 3                       ; pretty much what we do here
0026B6r 3                       ; """
0026B6r 3               xt_star_slash:
0026B6r 3                               ; We let */MOD check for underflow
0026B6r 3  20 rr rr                     jsr xt_star_slash_mod
0026B9r 3  20 rr rr                     jsr xt_swap
0026BCr 3  E8                           inx
0026BDr 3  E8                           inx
0026BEr 3               z_star_slash:
0026BEr 3  60                           rts
0026BFr 3               
0026BFr 3               
0026BFr 3               ; ## STAR_SLASH_MOD  ( n1 n2 n3 -- n4 n5 ) "n1 * n2 / n3 --> n-mod n"
0026BFr 3               ; ## "*/mod"  auto  ANS core
0026BFr 3                       ; """https://forth-standard.org/standard/core/TimesDivMOD
0026BFr 3                       ; Multiply n1 by n2 producing the intermediate double-cell result d.
0026BFr 3                       ; Divide d by n3 producing the single-cell remainder n4 and the
0026BFr 3                       ; single-cell quotient n5.
0026BFr 3                       ;
0026BFr 3                       ; In Forth, this is
0026BFr 3                       ; : */MOD  >R M* >R SM/REM ;  Note that */ accesses this routine.
0026BFr 3                       ; """
0026BFr 3               xt_star_slash_mod:
0026BFr 3  20 rr rr                     jsr underflow_3
0026C2r 3               
0026C2r 3  20 rr rr                     jsr xt_to_r
0026C5r 3  20 rr rr                     jsr xt_m_star
0026C8r 3  20 rr rr                     jsr xt_r_from
0026CBr 3  20 rr rr                     jsr xt_sm_slash_rem
0026CEr 3               
0026CEr 3               z_star_slash_mod:
0026CEr 3  60                           rts
0026CFr 3               
0026CFr 3               
0026CFr 3               ; ## STATE ( -- addr ) "Return the address of compilation state flag"
0026CFr 3               ; ## "state"  auto  ANS core
0026CFr 3                       ; """https://forth-standard.org/standard/core/STATE
0026CFr 3                       ; STATE is true when in compilation state, false otherwise. Note
0026CFr 3                       ; we do not return the state itself, but only the address where
0026CFr 3                       ; it lives. The state should not be changed directly by the user; see
0026CFr 3                       ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
0026CFr 3                       ; """
0026CFr 3               xt_state:
0026CFr 3  CA                           dex
0026D0r 3  CA                           dex
0026D1r 3  A9 rr                        lda #<state
0026D3r 3  95 00                        sta 0,x
0026D5r 3  A9 rr                        lda #>state
0026D7r 3  95 01                        sta 1,x
0026D9r 3               
0026D9r 3  60           z_state:        rts
0026DAr 3               
0026DAr 3               
0026DAr 3               ; ## STORE ( n addr -- ) "Store TOS in memory"
0026DAr 3               ; ## "!"  auto  ANS core
0026DAr 3                       ; """https://forth-standard.org/standard/core/Store"""
0026DAr 3               xt_store:
0026DAr 3  20 rr rr                     jsr underflow_2
0026DDr 3               
0026DDr 3  B5 02                        lda 2,x         ; LSB
0026DFr 3  81 00                        sta (0,x)
0026E1r 3               
0026E1r 3  F6 00                        inc 0,x
0026E3r 3  D0 02                        bne @1
0026E5r 3  F6 01                        inc 1,x
0026E7r 3               @1:
0026E7r 3  B5 03                        lda 3,x         ; MSB
0026E9r 3  81 00                        sta (0,x)
0026EBr 3               
0026EBr 3  E8                           inx             ; 2DROP
0026ECr 3  E8                           inx
0026EDr 3  E8                           inx
0026EEr 3  E8                           inx
0026EFr 3               
0026EFr 3  60           z_store:        rts
0026F0r 3               
0026F0r 3               
0026F0r 3               ; ## STRIP_UNDERFLOW ( -- addr ) "Return address where underflow status is kept"
0026F0r 3               ; ## "strip-underflow"  tested  Tali Forth
0026F0r 3                       ; """`STRIP-UNDERFLOW` is a flag variable that determines if underflow
0026F0r 3                       ; checking should be removed during the compilation of new words.
0026F0r 3                       ; Default is false.
0026F0r 3                       ; """
0026F0r 3               xt_strip_underflow:
0026F0r 3  CA                           dex
0026F1r 3  CA                           dex
0026F2r 3               
0026F2r 3  A9 rr                        lda #<uf_strip
0026F4r 3  95 00                        sta 0,x
0026F6r 3  A9 rr                        lda #>uf_strip
0026F8r 3  95 01                        sta 1,x
0026FAr 3               
0026FAr 3               z_strip_underflow:
0026FAr 3  60                           rts
0026FBr 3               
0026FBr 3               
0026FBr 3               ; ## SWAP ( b a -- a b ) "Exchange TOS and NOS"
0026FBr 3               ; ## "swap"  auto  ANS core
0026FBr 3                       ; """https://forth-standard.org/standard/core/SWAP"""
0026FBr 3               xt_swap:
0026FBr 3  20 rr rr                     jsr underflow_2
0026FEr 3               
0026FEr 3  B5 00                        lda 0,x         ; LSB
002700r 3  B4 02                        ldy 2,x
002702r 3  95 02                        sta 2,x
002704r 3  94 00                        sty 0,x
002706r 3               
002706r 3  B5 01                        lda 1,x         ; MSB
002708r 3  B4 03                        ldy 3,x
00270Ar 3  95 03                        sta 3,x
00270Cr 3  94 01                        sty 1,x
00270Er 3               
00270Er 3  60           z_swap:         rts
00270Fr 3               
00270Fr 3               
00270Fr 3               ; ## THEN (C: orig -- ) ( -- ) "Conditional flow control"
00270Fr 3               ; ## "then"  auto  ANS core
00270Fr 3                       ; """http://forth-standard.org/standard/core/THEN"""
00270Fr 3               xt_then:
00270Fr 3                               ; Get the address to jump to.
00270Fr 3  20 rr rr                     jsr xt_here
002712r 3               
002712r 3                               ; Stuff HERE in for the branch address back
002712r 3                               ; at the IF or ELSE (origination address is on stack).
002712r 3  20 rr rr                     jsr xt_swap
002715r 3  20 rr rr                     jsr xt_store
002718r 3               
002718r 3  60           z_then:         rts
002719r 3               
002719r 3               
002719r 3               ; ## THRU ( scr# scr# -- ) "Load screens in the given range"
002719r 3               ; ## "thru"  tested  ANS block ext
002719r 3                       ; """https://forth-standard.org/standard/block/THRU"""
002719r 3               
002719r 3               xt_thru:
002719r 3  20 rr rr                     jsr underflow_2
00271Cr 3               
00271Cr 3                               ; We need to loop here, and can't use the data stack
00271Cr 3                               ; because the LOADed screens might use it.  We'll
00271Cr 3                               ; need to use the same trick that DO loops use, holding
00271Cr 3                               ; the limit and current index on the return stack.
00271Cr 3               
00271Cr 3                               ; Put the ending screen number on the return stack
00271Cr 3  B5 01                        lda 1,x
00271Er 3  48                           pha
00271Fr 3  B5 00                        lda 0,x
002721r 3  48                           pha
002722r 3  E8                           inx
002723r 3  E8                           inx
002724r 3               @thru_loop:
002724r 3                               ; Put the starting screen number on the stack,
002724r 3                               ; but keep a copy
002724r 3  B5 01                        lda 1,x
002726r 3  48                           pha
002727r 3  B5 00                        lda 0,x
002729r 3  48                           pha
00272Ar 3               
00272Ar 3                               ; Load this screen.
00272Ar 3  20 rr rr                     jsr xt_load
00272Dr 3               
00272Dr 3                               ; Get the number and limit back off the stack.  Rather than
00272Dr 3                               ; waste time making room on the stack, just use tmp1 and tmp2.
00272Dr 3               
00272Dr 3                               ; Get the screen we just loaded.
00272Dr 3  68                           pla
00272Er 3  85 rr                        sta tmp1
002730r 3  68                           pla
002731r 3  85 rr                        sta tmp1+1
002733r 3               
002733r 3                               ; Get the ending screen.
002733r 3  68                           pla
002734r 3  85 rr                        sta tmp2
002736r 3  68                           pla
002737r 3  85 rr                        sta tmp2+1
002739r 3               
002739r 3                               ; See if we just loaded the last screen.
002739r 3                               ; A already has the MSB of the last screen in it.
002739r 3  C5 rr                        cmp tmp1+1
00273Br 3  D0 08                        bne @next_screen
00273Dr 3  A5 rr                        lda tmp2        ; Compare the LSB
00273Fr 3  C5 rr                        cmp tmp1
002741r 3  D0 02                        bne @next_screen
002743r 3  80 18                        bra @done       ; We just did the last screen.
002745r 3               
002745r 3               @next_screen:
002745r 3                               ; Put the ending screen back on the data stack.
002745r 3  A5 rr                        lda tmp2+1
002747r 3  48                           pha
002748r 3  A5 rr                        lda tmp2
00274Ar 3  48                           pha
00274Br 3               
00274Br 3                               ; Increment the current screen.
00274Br 3  E6 rr                        inc tmp1
00274Dr 3  D0 02                        bne @1
00274Fr 3  E6 rr                        inc tmp1+1
002751r 3               @1:
002751r 3                               ; Put the current screen on the stack to prepare for
002751r 3                               ; the next loop.
002751r 3  CA                           dex
002752r 3  CA                           dex
002753r 3  A5 rr                        lda tmp1
002755r 3  95 00                        sta 0,x
002757r 3  A5 rr                        lda tmp1+1
002759r 3  95 01                        sta 1,x
00275Br 3  80 C7                        bra @thru_loop
00275Dr 3               @done:
00275Dr 3  60           z_thru:         rts
00275Er 3               
00275Er 3               
00275Er 3               
00275Er 3               ; ## TICK ( "name" -- xt ) "Return a word's execution token (xt)"
00275Er 3               ; ## "'"  auto  ANS core
00275Er 3                       ; """https://forth-standard.org/standard/core/Tick"""
00275Er 3               
00275Er 3               xt_tick:
00275Er 3  20 rr rr                     jsr xt_parse_name       ; ( -- addr u )
002761r 3               
002761r 3                               ; if we got a zero, there was a problem getting the
002761r 3                               ; name of the word
002761r 3  B5 00                        lda 0,x
002763r 3  15 01                        ora 1,x
002765r 3  D0 05                        bne @1
002767r 3               
002767r 3  A9 05                        lda #err_noname
002769r 3  4C rr rr                     jmp error
00276Cr 3               @1:
00276Cr 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt )
00276Fr 3               
00276Fr 3                               ; If we didn't find the word in the Dictionary, abort
00276Fr 3  B5 00                        lda 0,x
002771r 3  15 01                        ora 1,x
002773r 3  D0 05                        bne @2
002775r 3               
002775r 3  A9 08                        lda #err_syntax
002777r 3  4C rr rr                     jmp error
00277Ar 3               @2:
00277Ar 3  20 rr rr                     jsr xt_name_to_int      ; ( nt -- xt )
00277Dr 3               
00277Dr 3  60           z_tick:         rts
00277Er 3               
00277Er 3               
00277Er 3               
00277Er 3               ; ## TO ( n "name" -- ) or ( "name") "Change a value"
00277Er 3               ; ## "to"  auto  ANS core ext
00277Er 3                       ; """https://forth-standard.org/standard/core/TO
00277Er 3                       ; Gives a new value to a, uh, VALUE.
00277Er 3                       ;
00277Er 3                       ; One possible Forth
00277Er 3                       ; implementation is  ' >BODY !  but given the problems we have
00277Er 3                       ; with >BODY on STC Forths, we do this the hard way. Since
00277Er 3                       ; Tali Forth uses the same code for CONSTANTs and VALUEs, you
00277Er 3                       ; could use this to redefine a CONSTANT, but that is a no-no.
00277Er 3                       ;
00277Er 3                       ; Note that the standard has different behaviors for TO depending
00277Er 3                       ; on the state (https://forth-standard.org/standard/core/TO).
00277Er 3                       ; This makes TO state-dependent (which is bad) and also rather
00277Er 3                       ; complex (see the Gforth implementation for comparison). This
00277Er 3                       ; word may not be natively compiled and must be immediate. Frankly,
00277Er 3                       ; it would have made more sense to have two words for this.
00277Er 3                       ; """
00277Er 3               
00277Er 3               xt_to:
00277Er 3                               ; One way or the other, we need the xt of the word after this
00277Er 3                               ; one. At this point, we don't know if we are interpreted or
00277Er 3                               ; compile, so we don't know if there is a value n on the stack,
00277Er 3                               ; so we can't do an underflow check yet
00277Er 3  20 rr rr                     jsr xt_tick             ; ( [n] xt )
002781r 3               
002781r 3                               ; The PFA (DFA in this case) is three bytes down,
002781r 3                               ; after the jump to DOCONST
002781r 3  B5 00                        lda 0,x                 ; LSB
002783r 3  18                           clc
002784r 3  69 03                        adc #3
002786r 3  85 rr                        sta tmp1
002788r 3  B5 01                        lda 1,x                 ; MSB
00278Ar 3  69 00                        adc #0                  ; we just want the carry
00278Cr 3  85 rr                        sta tmp1+1
00278Er 3               
00278Er 3  E8                           inx
00278Fr 3  E8                           inx                     ; ( [n] )
002790r 3               
002790r 3                               ; Now it gets ugly. See which state we are in
002790r 3  A5 rr                        lda state
002792r 3  05 rr                        ora state+1
002794r 3  F0 34                        beq @interpret
002796r 3               
002796r 3                               ; Well, we're compiling. We want to end up with simple
002796r 3                               ; code that just takes the number that is TOS and saves
002796r 3                               ; it in the address of the xt we were just given. So we
002796r 3                               ; want to compile this routine:
002796r 3                               ;
002796r 3                               ;       lda 0,x                 - B5 00
002796r 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
002796r 3                               ;       lda 1,x                 - B5 01
002796r 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
002796r 3                               ;       inx                     - E8
002796r 3                               ;       inx                     - E8
002796r 3                               ;
002796r 3                               ; which at least is nice and short. Other than that, we pretty
002796r 3                               ; much have to do this the hard and long way, because with the
002796r 3                               ; LSBs and MSBs, we can't really put the numbers in a data
002796r 3                               ; range and store them with a loop. Sigh.
002796r 3               
002796r 3  A0 00                        ldy #$00                ; Code for LDA 0,X
002798r 3  A9 B5                        lda #$B5
00279Ar 3  20 rr rr                     jsr cmpl_word
00279Dr 3               
00279Dr 3  A9 8D                        lda #$8D                ; Code for STA abs
00279Fr 3  20 rr rr                     jsr cmpl_a
0027A2r 3               
0027A2r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
0027A4r 3  A5 rr                        lda tmp1
0027A6r 3  20 rr rr                     jsr cmpl_word
0027A9r 3               
0027A9r 3  A0 01                        ldy #$01                ; Code for LDA 1,X
0027ABr 3  A9 B5                        lda #$B5
0027ADr 3  20 rr rr                     jsr cmpl_word
0027B0r 3               
0027B0r 3  A9 8D                        lda #$8D                ; Code for STA abs
0027B2r 3  20 rr rr                     jsr cmpl_a
0027B5r 3               
0027B5r 3  E6 rr                        inc tmp1                ; Calculate MSB
0027B7r 3  D0 02                        bne @1
0027B9r 3  E6 rr                        inc tmp1+1
0027BBr 3               @1:
0027BBr 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
0027BDr 3  A5 rr                        lda tmp1
0027BFr 3  20 rr rr                     jsr cmpl_word
0027C2r 3               
0027C2r 3  A0 E8                        ldy #$E8                ; Code for INX
0027C4r 3  98                           tya
0027C5r 3  20 rr rr                     jsr cmpl_word
0027C8r 3               
0027C8r 3  80 0F                        bra @done
0027CAr 3               
0027CAr 3               @interpret:
0027CAr 3                               ; We're interpreting, so we arrive here with n
0027CAr 3                               ; on the stack. This is an annoying place to put
0027CAr 3                               ; the underflow check because we can't
0027CAr 3                               ; automatically strip it out
0027CAr 3  20 rr rr                     jsr underflow_1
0027CDr 3               
0027CDr 3                               ; We skip over the jump to DOCONST and store the number
0027CDr 3                               ; in the Program Field Area (PDF, in this case more a
0027CDr 3                               ; Data Field Area
0027CDr 3  B5 00                        lda 0,x
0027CFr 3  92 rr                        sta (tmp1)              ; LSB
0027D1r 3               
0027D1r 3  A0 01                        ldy #1
0027D3r 3  B5 01                        lda 1,x                 ; MSB
0027D5r 3  91 rr                        sta (tmp1),y            ; fall through to common
0027D7r 3               
0027D7r 3  E8                           inx                     ; DROP
0027D8r 3  E8                           inx
0027D9r 3               @done:
0027D9r 3  60           z_to:           rts
0027DAr 3               
0027DAr 3               
0027DAr 3               
0027DAr 3               ; ## TO_BODY ( xt -- addr ) "Return a word's Code Field Area (CFA)"
0027DAr 3               ; ## ">body"  auto  ANS core
0027DAr 3                       ; """https://forth-standard.org/standard/core/toBODY
0027DAr 3                       ; Given a word's execution token (xt), return the address of the
0027DAr 3                       ; start of that word's parameter field (PFA). This is defined as the
0027DAr 3                       ; address that HERE would return right after CREATE.
0027DAr 3                       ;
0027DAr 3                       ; This is a
0027DAr 3                       ; difficult word for STC Forths, because most words don't actually
0027DAr 3                       ; have a Code Field Area (CFA) to skip. We solve this by having CREATE
0027DAr 3                       ; add a flag, "has CFA" (HC), in the header so >BODY know to skip
0027DAr 3                       ; the subroutine jumps to DOVAR, DOCONST, or DODOES
0027DAr 3                       ; """
0027DAr 3               
0027DAr 3               xt_to_body:
0027DAr 3  20 rr rr                     jsr underflow_1
0027DDr 3               
0027DDr 3                               ; Ideally, xt already points to the CFA. We just need to check
0027DDr 3                               ; the HC flag for special cases
0027DDr 3  20 rr rr                     jsr xt_dup              ; ( xt xt )
0027E0r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt nt )
0027E3r 3               
0027E3r 3                               ; The status byte is nt+1
0027E3r 3  F6 00                        inc 0,x
0027E5r 3  D0 02                        bne @1
0027E7r 3  F6 01                        inc 1,x
0027E9r 3               @1:
0027E9r 3  A1 00                        lda (0,x)               ; get status byte
0027EBr 3  29 20                        and #HC
0027EDr 3  F0 0D                        beq @no_cfa
0027EFr 3               
0027EFr 3                               ; We've got a DOVAR, DOCONST, DODEFER, DODOES or whatever,
0027EFr 3                               ; so we add three to xt, which is NOS
0027EFr 3  18                           clc
0027F0r 3  B5 02                        lda 2,x         ; LSB
0027F2r 3  69 03                        adc #3
0027F4r 3  95 02                        sta 2,x
0027F6r 3  B5 03                        lda 3,x         ; MSB
0027F8r 3  69 00                        adc #0          ; we conly care about the carry
0027FAr 3  95 03                        sta 3,x         ; Fall through to @no_cfa
0027FCr 3               @no_cfa:
0027FCr 3  E8                           inx             ; get rid of the nt
0027FDr 3  E8                           inx
0027FEr 3               @done:
0027FEr 3  60           z_to_body:      rts
0027FFr 3               
0027FFr 3               
0027FFr 3               
0027FFr 3               ; ## TO_IN ( -- addr ) "Return address of the input pointer"
0027FFr 3               ; ## ">in"  auto  ANS core
0027FFr 3               xt_to_in:
0027FFr 3  CA                           dex
002800r 3  CA                           dex
002801r 3               
002801r 3  A9 rr                        lda #<toin
002803r 3  95 00                        sta 0,x
002805r 3  A9 rr                        lda #>toin      ; paranoid, should be zero
002807r 3  95 01                        sta 1,x
002809r 3               
002809r 3  60           z_to_in:        rts
00280Ar 3               
00280Ar 3               
00280Ar 3               ; ## TO_NUMBER ( ud addr u -- ud addr u ) "Convert a number"
00280Ar 3               ; ## ">number"  auto  ANS core
00280Ar 3                       ; """https://forth-standard.org/standard/core/toNUMBER
00280Ar 3                       ; Convert a string to a double number. Logic here is based on the
00280Ar 3                       ; routine by Phil Burk of the same name in pForth, see
00280Ar 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
00280Ar 3                       ; for the original Forth code. We arrive here from NUMBER which has
00280Ar 3                       ; made sure that we don't have to deal with a sign and we don't have
00280Ar 3                       ; to deal with a dot as a last character that signalizes double -
00280Ar 3                       ; this should be a pure number string.
00280Ar 3                       ;
00280Ar 3                       ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we
00280Ar 3                       ; cannot access any of those.
00280Ar 3                       ;
00280Ar 3                       ; For the math routine, we move the inputs to the scratchpad to
00280Ar 3                       ; avoid having to fool around with the Data Stack.
00280Ar 3                       ;
00280Ar 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
00280Ar 3                       ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
00280Ar 3                       ;     |           |           |           |           |
00280Ar 3                       ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
00280Ar 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
00280Ar 3                       ;
00280Ar 3                       ; The math routine works by converting one character to its
00280Ar 3                       ; numerical value (N) via DIGIT? and storing it in S+4 for
00280Ar 3                       ; the moment. We then multiply the UD-HI value with the radix
00280Ar 3                       ; (from BASE) using UM*, which returns a double-cell result. We
00280Ar 3                       ; discard the high cell of that result (UD-HI-HI) and store the
00280Ar 3                       ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
00280Ar 3                       ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
00280Ar 3                       ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
00280Ar 3                       ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
00280Ar 3                       ; storing the result back in S and S+2, before we start another
00280Ar 3                       ; round with it as the new UD-LO and UD-HI.
00280Ar 3                       ; """
00280Ar 3               
00280Ar 3               
00280Ar 3               xt_to_number:
00280Ar 3  20 rr rr                     jsr underflow_4
00280Dr 3               
00280Dr 3                               ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
00280Dr 3                               ; After this step, the original ud-lo and ud-hi will still be on
00280Dr 3                               ; the Data Stack, but will be ignored and later overwritten
00280Dr 3                               ; If >NUMBER is called by NUMBER, these should be all zeros
00280Dr 3  B5 06                        lda 6,x         ; ud-lo LSB
00280Fr 3  85 rr                        sta scratch
002811r 3  B5 07                        lda 7,x         ; ud-lo MSB
002813r 3  85 rr                        sta scratch+1
002815r 3               
002815r 3  B5 04                        lda 4,x         ; ud-hi LSB
002817r 3  85 rr                        sta scratch+2
002819r 3  B5 05                        lda 5,x         ; ud-hi MSB
00281Br 3  85 rr                        sta scratch+3
00281Dr 3               
00281Dr 3                               ; Push down one on the Data Stack to use TOS for character
00281Dr 3                               ; conversion ( ud-lo ud-hi addr u x )
00281Dr 3  CA                           dex
00281Er 3  CA                           dex
00281Fr 3               
00281Fr 3               @loop:
00281Fr 3                               ; Get one character based on address
00281Fr 3  A1 04                        lda (4,x)
002821r 3  95 00                        sta 0,x                 ; ( ud-lo ud-hi addr u char )
002823r 3  74 01                        stz 1,x                 ; paranoid
002825r 3               
002825r 3  20 rr rr                     jsr xt_digit_question   ; ( char -- n -1 | char 0 )
002828r 3               
002828r 3                               ; This gives us ( ud-lo ud-hi addr u char f | n f ), so we
002828r 3                               ; check the flag. If it is zero, we return what we have and
002828r 3                               ; let the caller (usually NUMBER) complain
002828r 3  B5 00                        lda 0,x
00282Ar 3  D0 04                        bne @digit_ok
00282Cr 3               
00282Cr 3  E8                           inx
00282Dr 3  E8                           inx
00282Er 3  80 67                        bra @done       ; ( ud-lo ud-hi addr u char )
002830r 3               
002830r 3               @digit_ok:
002830r 3                               ; Conversion was successful. We arrive here with
002830r 3                               ; ( ud-lo ud-hi addr u n -1 ) and can start the
002830r 3                               ; math routine
002830r 3               
002830r 3                               ; Save n so we don't have to fool around with the
002830r 3                               ; Data Stack
002830r 3  B5 02                        lda 2,x
002832r 3  85 rr                        sta scratch+4
002834r 3  B5 03                        lda 3,x
002836r 3  85 rr                        sta scratch+5
002838r 3               
002838r 3                               ; Now multiply ud-hi (the one in the scratchpad, not the
002838r 3                               ; original one on the Data Stack) with the radix from BASE.
002838r 3                               ; We can clobber TOS and NOS because we saved n
002838r 3  A5 rr                        lda scratch+2
00283Ar 3  95 02                        sta 2,x         ; NOS
00283Cr 3  A5 rr                        lda scratch+3
00283Er 3  95 03                        sta 3,x
002840r 3               
002840r 3  A5 rr                        lda base
002842r 3  95 00                        sta 0,x         ; TOS
002844r 3  74 01                        stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
002846r 3               
002846r 3                               ; UM* returns a double-celled number
002846r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
002849r 3               
002849r 3                               ; Move ud-hi-lo to safety
002849r 3  B5 02                        lda 2,x         ; ud-hi-lo
00284Br 3  85 rr                        sta scratch+6
00284Dr 3  B5 03                        lda 3,x
00284Fr 3  85 rr                        sta scratch+7
002851r 3               
002851r 3                               ; Now we multiply ud-lo, overwriting the stack entries
002851r 3  A5 rr                        lda scratch
002853r 3  95 02                        sta 2,x
002855r 3  A5 rr                        lda scratch+1
002857r 3  95 03                        sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
002859r 3               
002859r 3  A5 rr                        lda base
00285Br 3  95 00                        sta 0,x
00285Dr 3  74 01                        stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
00285Fr 3               
00285Fr 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
002862r 3               
002862r 3  B5 00                        lda 0,x
002864r 3  85 rr                        sta scratch+2
002866r 3  B5 01                        lda 1,x
002868r 3  85 rr                        sta scratch+3
00286Ar 3               
00286Ar 3  B5 02                        lda 2,x
00286Cr 3  85 rr                        sta scratch
00286Er 3  B5 03                        lda 3,x
002870r 3  85 rr                        sta scratch+1
002872r 3               
002872r 3                               ; We add ud-lo and n, as well as ud-hi and ud-hi-lo,
002872r 3                               ; both in the scratch pad
002872r 3  18                           clc
002873r 3  A5 rr                        lda scratch     ; ud-lo LSB
002875r 3  65 rr                        adc scratch+4   ; n LSB
002877r 3  85 rr                        sta scratch     ; this is the new ud-lo
002879r 3  A5 rr                        lda scratch+1   ; ud-lo MSB
00287Br 3  65 rr                        adc scratch+5   ; n MSB
00287Dr 3  85 rr                        sta scratch+1
00287Fr 3               
00287Fr 3  A5 rr                        lda scratch+2   ; LSB
002881r 3  65 rr                        adc scratch+6
002883r 3  85 rr                        sta scratch+2   ; this is the new ud-hi
002885r 3  A5 rr                        lda scratch+3   ; MSB
002887r 3  65 rr                        adc scratch+7
002889r 3  85 rr                        sta scratch+3
00288Br 3               
00288Br 3                               ; Clean up: Get rid of one of the two top elements on
00288Br 3                               ; the Data Stack. We don't really care which one
00288Br 3  E8                           inx
00288Cr 3  E8                           inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
00288Dr 3               
00288Dr 3                               ; One character down. Move address up
00288Dr 3  F6 04                        inc 4,x
00288Fr 3  D0 02                        bne @1
002891r 3  F6 05                        inc 5,x
002893r 3               @1:
002893r 3                               ; Decrease counter
002893r 3  D6 02                        dec 2,x
002895r 3  D0 88                        bne @loop
002897r 3               
002897r 3               @done:
002897r 3                               ; Counter has reached zero or we have an error. In both
002897r 3                               ; cases, we clean up the Data Stack and return. Error gives
002897r 3                               ; us ( ud-lo ud-hi addr u char ), regular end is
002897r 3                               ; ( ud-lo ud-hi addr u ud-lo )
002897r 3  E8                           inx
002898r 3  E8                           inx             ; ( ud-lo ud-hi addr u )
002899r 3               
002899r 3                               ; The new ud-lo and ud-hi are still on the scratch pad
002899r 3  A5 rr                        lda scratch     ; new ud-lo
00289Br 3  95 06                        sta 6,x
00289Dr 3  A5 rr                        lda scratch+1
00289Fr 3  95 07                        sta 7,x
0028A1r 3               
0028A1r 3  A5 rr                        lda scratch+2
0028A3r 3  95 04                        sta 4,x
0028A5r 3  A5 rr                        lda scratch+3
0028A7r 3  95 05                        sta 5,x
0028A9r 3               
0028A9r 3  60           z_to_number:    rts
0028AAr 3               
0028AAr 3               
0028AAr 3               
0028AAr 3               ; ## TO_ORDER ( wid -- ) "Add wordlist at beginning of search order"
0028AAr 3               ; ## ">order"  tested  Gforth search
0028AAr 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html"""
0028AAr 3               
0028AAr 3               xt_to_order:
0028AAr 3                               ; Put the wid on the return stack for now.
0028AAr 3  20 rr rr                     jsr xt_to_r
0028ADr 3               
0028ADr 3                               ; Get the current search order.
0028ADr 3  20 rr rr                     jsr xt_get_order
0028B0r 3               
0028B0r 3                               ; Get back the wid and add it to the list.
0028B0r 3  20 rr rr                     jsr xt_r_from
0028B3r 3  20 rr rr                     jsr xt_swap
0028B6r 3  20 rr rr                     jsr xt_one_plus
0028B9r 3               
0028B9r 3                               ; Set the search order with the new list.
0028B9r 3  20 rr rr                     jsr xt_set_order
0028BCr 3               
0028BCr 3  60           z_to_order:     rts
0028BDr 3               
0028BDr 3               
0028BDr 3               
0028BDr 3               ; ## TO_R ( n -- )(R: -- n) "Push TOS to the Return Stack"
0028BDr 3               ; ## ">r"  auto  ANS core
0028BDr 3                       ; """https://forth-standard.org/standard/core/toR
0028BDr 3                       ; This word is handled differently for native and for
0028BDr 3                       ; subroutine coding, see `COMPILE,`. This is a complile-only
0028BDr 3                       ; word.
0028BDr 3                       ; """
0028BDr 3               xt_to_r:
0028BDr 3                               ; Save the return address. If this word is natively
0028BDr 3                               ; coded, this is a complete waste of cycles, but
0028BDr 3                               ; required for subroutine coding
0028BDr 3  68                           pla             ; LSB
0028BEr 3  85 rr                        sta tmptos
0028C0r 3  7A                           ply             ; MSB
0028C1r 3               
0028C1r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0028C1r 3               
0028C1r 3                               ; We check for underflow in the second step, so we can
0028C1r 3                               ; strip off the stack thrashing for native compiling first
0028C1r 3  20 rr rr                     jsr underflow_1
0028C4r 3               
0028C4r 3                               ; now we can do the actual work
0028C4r 3  B5 01                        lda 1,x         ; MSB
0028C6r 3  48                           pha
0028C7r 3  B5 00                        lda 0,x         ; LSB
0028C9r 3  48                           pha
0028CAr 3               
0028CAr 3  E8                           inx
0028CBr 3  E8                           inx
0028CCr 3               
0028CCr 3                               ; --- CUT HERE FOR NATIVE CODING ---
0028CCr 3               
0028CCr 3                               ; restore return address
0028CCr 3  5A                           phy             ; MSB
0028CDr 3  A5 rr                        lda tmptos
0028CFr 3  48                           pha             ; LSB
0028D0r 3               
0028D0r 3  60           z_to_r:         rts
0028D1r 3               
0028D1r 3               
0028D1r 3               ; ## TRUE ( -- f ) "Push TRUE flag to Data Stack"
0028D1r 3               ; ## "true"  auto  ANS core ext
0028D1r 3                       ; """https://forth-standard.org/standard/core/TRUE"""
0028D1r 3               xt_true:
0028D1r 3  CA                           dex
0028D2r 3  CA                           dex
0028D3r 3  A9 FF                        lda #$FF
0028D5r 3  95 00                        sta 0,x
0028D7r 3  95 01                        sta 1,x
0028D9r 3               
0028D9r 3  60           z_true:         rts
0028DAr 3               
0028DAr 3               
0028DAr 3               ; ## TUCK ( b a -- a b a ) "Copy TOS below NOS"
0028DAr 3               ; ## "tuck"  auto  ANS core ext
0028DAr 3                       ; """https://forth-standard.org/standard/core/TUCK"""
0028DAr 3               xt_tuck:
0028DAr 3  20 rr rr                     jsr underflow_2
0028DDr 3               
0028DDr 3  CA                           dex
0028DEr 3  CA                           dex
0028DFr 3               
0028DFr 3  B4 04                        ldy 4,x         ; LSB
0028E1r 3  B5 02                        lda 2,x
0028E3r 3  95 04                        sta 4,x
0028E5r 3  94 02                        sty 2,x
0028E7r 3  95 00                        sta 0,x
0028E9r 3               
0028E9r 3  B4 05                        ldy 5,x         ; MSB
0028EBr 3  B5 03                        lda 3,x
0028EDr 3  95 05                        sta 5,x
0028EFr 3  94 03                        sty 3,x         ; bba
0028F1r 3  95 01                        sta 1,x         ; baa
0028F3r 3               
0028F3r 3  60           z_tuck:         rts
0028F4r 3               
0028F4r 3               
0028F4r 3               ; ## TWO ( -- u ) "Push the number 2 to stack"
0028F4r 3               ; ## "2"  auto  Tali Forth
0028F4r 3                       ;
0028F4r 3                       ; This code is shared with ASSEMBLER-WORDLIST
0028F4r 3               xt_assembler_wordlist:
0028F4r 3               xt_two:
0028F4r 3  CA                           dex
0028F5r 3  CA                           dex
0028F6r 3  A9 02                        lda #2
0028F8r 3  95 00                        sta 0,x
0028FAr 3  74 01                        stz 1,x
0028FCr 3               
0028FCr 3               z_assembler_wordlist:
0028FCr 3  60           z_two:          rts
0028FDr 3               
0028FDr 3               
0028FDr 3               ; ## TWO_DROP ( n n -- ) "Drop TOS and NOS"
0028FDr 3               ; ## "2drop"  auto  ANS core
0028FDr 3                       ; """https://forth-standard.org/standard/core/TwoDROP"""
0028FDr 3               xt_two_drop:
0028FDr 3  20 rr rr                     jsr underflow_2
002900r 3               
002900r 3  E8                           inx
002901r 3  E8                           inx
002902r 3  E8                           inx
002903r 3  E8                           inx
002904r 3               
002904r 3  60           z_two_drop:     rts
002905r 3               
002905r 3               
002905r 3               ; ## TWO_DUP ( a b -- a b a b ) "Duplicate first two stack elements"
002905r 3               ; ## "2dup"  auto  ANS core
002905r 3                       ; """https://forth-standard.org/standard/core/TwoDUP"""
002905r 3               xt_two_dup:
002905r 3  20 rr rr                     jsr underflow_2
002908r 3               
002908r 3  CA                           dex
002909r 3  CA                           dex
00290Ar 3  CA                           dex
00290Br 3  CA                           dex
00290Cr 3               
00290Cr 3  B5 04                        lda 4,x         ; TOS
00290Er 3  95 00                        sta 0,x
002910r 3  B5 05                        lda 5,x
002912r 3  95 01                        sta 1,x
002914r 3               
002914r 3  B5 06                        lda 6,x         ; NOS
002916r 3  95 02                        sta 2,x
002918r 3  B5 07                        lda 7,x
00291Ar 3  95 03                        sta 3,x
00291Cr 3               
00291Cr 3  60           z_two_dup:      rts
00291Dr 3               
00291Dr 3               
00291Dr 3               ; ## TWO_FETCH ( addr -- n1 n2 ) "Fetch the cell pair n1 n2 stored at addr"
00291Dr 3               ; ## "2@"  auto  ANS core
00291Dr 3                       ; """https://forth-standard.org/standard/core/TwoFetch
00291Dr 3                       ; Note n2 stored at addr and n1 in the next cell -- in our case,
00291Dr 3                       ; the next two bytes. This is equvalent to  `DUP CELL+ @ SWAP @`
00291Dr 3                       ; """
00291Dr 3               xt_two_fetch:
00291Dr 3  20 rr rr                     jsr underflow_1
002920r 3               
002920r 3  B5 00                        lda 0,x
002922r 3  85 rr                        sta tmp1
002924r 3  B4 01                        ldy 1,x
002926r 3  84 rr                        sty tmp1+1
002928r 3               
002928r 3  CA                           dex             ; reuse one stack element
002929r 3  CA                           dex
00292Ar 3               
00292Ar 3  B2 rr                        lda (tmp1)      ; copy LSB
00292Cr 3  95 00                        sta 0,x
00292Er 3  A0 01                        ldy #1          ; copy next
002930r 3  B1 rr                        lda (tmp1),y
002932r 3  95 01                        sta 1,x
002934r 3  C8                           iny             ; copy next
002935r 3  B1 rr                        lda (tmp1),y
002937r 3  95 02                        sta 2,x
002939r 3  C8                           iny             ; copy next
00293Ar 3  B1 rr                        lda (tmp1),y
00293Cr 3  95 03                        sta 3,x
00293Er 3               
00293Er 3  60           z_two_fetch:    rts
00293Fr 3               
00293Fr 3               ; ## TWO_OVER ( d1 d2 -- d1 d2 d1 ) "Copy double word NOS to TOS"
00293Fr 3               ; ## "2over"  auto  ANS core
00293Fr 3                       ; """https://forth-standard.org/standard/core/TwoOVER"""
00293Fr 3               xt_two_over:
00293Fr 3  20 rr rr                     jsr underflow_4
002942r 3               
002942r 3  CA                           dex
002943r 3  CA                           dex
002944r 3  CA                           dex
002945r 3  CA                           dex
002946r 3               
002946r 3  B5 08                        lda 8,x
002948r 3  95 00                        sta 0,x
00294Ar 3               
00294Ar 3  B5 09                        lda 9,x
00294Cr 3  95 01                        sta 1,x
00294Er 3               
00294Er 3  B5 0A                        lda 10,x
002950r 3  95 02                        sta 2,x
002952r 3               
002952r 3  B5 0B                        lda 11,x
002954r 3  95 03                        sta 3,x
002956r 3               
002956r 3  60           z_two_over:     rts
002957r 3               
002957r 3               
002957r 3               ; ## TWO_R_FETCH ( -- n n ) "Copy top two entries from Return Stack"
002957r 3               ; ## "2r@"  auto  ANS core ext
002957r 3                       ; """https://forth-standard.org/standard/core/TwoRFetch
002957r 3                       ;
002957r 3                       ; This is R> R> 2DUP >R >R SWAP but we can do it a lot faster in
002957r 3                       ; assembler. We use trickery to access the elements on the Return
002957r 3                       ; Stack instead of pulling the return address first and storing
002957r 3                       ; it somewhere else like for 2R> and 2>R. In this version, we leave
002957r 3                       ; it as Never Native; at some point, we should compare versions to
002957r 3                       ; see if an Always Native version would be better
002957r 3                       ; """
002957r 3               xt_two_r_fetch:
002957r 3               		; make room on the Data Stack
002957r 3  CA                           dex
002958r 3  CA                           dex
002959r 3  CA                           dex
00295Ar 3  CA                           dex
00295Br 3               
00295Br 3                               ; Get four bytes off of Return Stack. This assumes that
00295Br 3                               ; we took a subroutine jump here so the first two entries
00295Br 3                               ; are the return address
00295Br 3  8A                           txa
00295Cr 3  BA                           tsx
00295Dr 3  DA                           phx             ; 65c02 has no TXY, so do it the hard way
00295Er 3  7A                           ply
00295Fr 3  AA                           tax
002960r 3               
002960r 3                               ; The Return Stack addreses $0101 and $0102 are occupied by
002960r 3                               ; the return address for this word. This is a whole lot
002960r 3                               ; easier on the 65816
002960r 3  B9 03 01                     lda $0103,y     ; LSB of top entry
002963r 3  95 00                        sta 0,x
002965r 3  B9 04 01                     lda $0104,y     ; MSB of top entry
002968r 3  95 01                        sta 1,x
00296Ar 3  B9 05 01                     lda $0105,y     ; LSB of bottom entry
00296Dr 3  95 02                        sta 2,x
00296Fr 3  B9 06 01                     lda $0106,y     ; MSB of top entry
002972r 3  95 03                        sta 3,x
002974r 3               
002974r 3  60           z_two_r_fetch:  rts
002975r 3               
002975r 3               
002975r 3               ; ## TWO_R_FROM ( -- n1 n2 ) (R: n1 n2 -- ) "Pull two cells from Return Stack"
002975r 3               ; ## "2r>"  auto  ANS core ext
002975r 3               	    ; """https://forth-standard.org/standard/core/TwoRfrom
002975r 3                       ; Pull top two entries from Return Stack.
002975r 3                       ;
002975r 3                       ; Is the same as
002975r 3                       ; R> R> SWAP. As with R>, the problem with the is word is that
002975r 3                       ; the top value on the ReturnStack for a STC Forth is the
002975r 3                       ; return address, which we need to get out of the way first.
002975r 3                       ; Native compile needs to be handled as a special case.
002975r 3                       ; """
002975r 3               xt_two_r_from:
002975r 3                               ; save the return address
002975r 3  68                           pla                     ; LSB
002976r 3  85 rr                        sta tmp1
002978r 3  68                           pla                     ; MSB
002979r 3  85 rr                        sta tmp1+1
00297Br 3               
00297Br 3                               ; --- CUT HERE FOR NATIVE CODING ---
00297Br 3               
00297Br 3               		; make room on stack
00297Br 3  CA                           dex
00297Cr 3  CA                           dex
00297Dr 3  CA                           dex
00297Er 3  CA                           dex
00297Fr 3               
00297Fr 3                               ; In theory, we should test for underflow on the Return
00297Fr 3                               ; Stack. However, given the traffic there with an STC
00297Fr 3                               ; Forth, that's probably not really useful
00297Fr 3               
00297Fr 3                               ; now we can access the data
00297Fr 3  68                           pla                     ; LSB
002980r 3  95 00                        sta 0,x
002982r 3  68                           pla                     ; MSB
002983r 3  95 01                        sta 1,x
002985r 3               
002985r 3  68                           pla                     ; LSB
002986r 3  95 02                        sta 2,x
002988r 3  68                           pla                     ; MSB
002989r 3  95 03                        sta 3,x
00298Br 3               
00298Br 3                               ; --- CUT HERE FOR NATIVE CODING ---
00298Br 3               
00298Br 3                               ; restore return address
00298Br 3  A5 rr                        lda tmp1+1              ; MSB
00298Dr 3  48                           pha
00298Er 3  A5 rr                        lda tmp1                ; LSB
002990r 3  48                           pha
002991r 3               
002991r 3  60           z_two_r_from:   rts
002992r 3               
002992r 3               
002992r 3               ; ## TWO_SLASH ( n -- n ) "Divide TOS by two"
002992r 3               ; ## "2/"  auto  ANS core
002992r 3                       ; """https://forth-standard.org/standard/core/TwoDiv"""
002992r 3               xt_two_slash:
002992r 3  20 rr rr                     jsr underflow_1
002995r 3               
002995r 3                               ; We can't just LSR the LSB and ROR the MSB because that
002995r 3                               ; would do bad things to the sign
002995r 3  B5 01                        lda 1,x
002997r 3  0A                           asl                     ; save the sign
002998r 3  76 01                        ror 1,x
00299Ar 3  76 00                        ror 0,x
00299Cr 3               
00299Cr 3  60           z_two_slash:    rts
00299Dr 3               
00299Dr 3               
00299Dr 3               ; ## TWO_STAR ( n -- n ) "Multiply TOS by two"
00299Dr 3               ; ## "2*"  auto  ANS core
00299Dr 3                       ; """https://forth-standard.org/standard/core/TwoTimes
00299Dr 3                       ;
00299Dr 3                       ; Also used for CELLS
00299Dr 3                       ; """
00299Dr 3               xt_two_star:
00299Dr 3               xt_cells:
00299Dr 3  20 rr rr                     jsr underflow_1
0029A0r 3               
0029A0r 3  16 00                        asl 0,x
0029A2r 3  36 01                        rol 1,x
0029A4r 3               z_cells:
0029A4r 3  60           z_two_star:     rts
0029A5r 3               
0029A5r 3               
0029A5r 3               ; ## TWO_STORE ( n1 n2 addr -- ) "Store two numbers at given address"
0029A5r 3               ; ## "2!"  auto  ANS core
0029A5r 3                       ; """https://forth-standard.org/standard/core/TwoStore
0029A5r 3                       ; Stores so n2 goes to addr and n1 to the next consecutive cell.
0029A5r 3                       ; Is equivalent to  `SWAP OVER ! CELL+ !`
0029A5r 3                       ; """
0029A5r 3               xt_two_store:
0029A5r 3  20 rr rr                     jsr underflow_3
0029A8r 3               
0029A8r 3  B5 00                        lda 0,x
0029AAr 3  85 rr                        sta tmp1
0029ACr 3  B4 01                        ldy 1,x
0029AEr 3  84 rr                        sty tmp1+1
0029B0r 3               
0029B0r 3  E8                           inx
0029B1r 3  E8                           inx
0029B2r 3               
0029B2r 3  B5 00                        lda 0,x         ; copy MSB
0029B4r 3  92 rr                        sta (tmp1)
0029B6r 3  B5 01                        lda 1,x         ; copy next
0029B8r 3  A0 01                        ldy #1
0029BAr 3  91 rr                        sta (tmp1),y
0029BCr 3  B5 02                        lda 2,x         ; copy next
0029BEr 3  C8                           iny
0029BFr 3  91 rr                        sta (tmp1),y
0029C1r 3  B5 03                        lda 3,x         ; copy MSB
0029C3r 3  C8                           iny
0029C4r 3  91 rr                        sta (tmp1),y
0029C6r 3               
0029C6r 3  E8                           inx             ; 2DROP
0029C7r 3  E8                           inx
0029C8r 3  E8                           inx
0029C9r 3  E8                           inx
0029CAr 3               
0029CAr 3  60           z_two_store:    rts
0029CBr 3               
0029CBr 3               
0029CBr 3               ; ## TWO_SWAP ( n1 n2 n3 n4 -- n3 n4 n1 n1 ) "Exchange two double words"
0029CBr 3               ; ## "2swap"  auto  ANS core
0029CBr 3                       ; """https://forth-standard.org/standard/core/TwoSWAP"""
0029CBr 3               xt_two_swap:
0029CBr 3  20 rr rr                     jsr underflow_4
0029CEr 3               
0029CEr 3                               ; 0 <-> 4
0029CEr 3  B5 00                        lda 0,x
0029D0r 3  B4 04                        ldy 4,x
0029D2r 3  95 04                        sta 4,x
0029D4r 3  94 00                        sty 0,x
0029D6r 3               
0029D6r 3                               ; 1 <-> 5
0029D6r 3  B5 01                        lda 1,x
0029D8r 3  B4 05                        ldy 5,x
0029DAr 3  95 05                        sta 5,x
0029DCr 3  94 01                        sty 1,x
0029DEr 3               
0029DEr 3                               ; 2 <-> 6
0029DEr 3  B5 02                        lda 2,x
0029E0r 3  B4 06                        ldy 6,x
0029E2r 3  95 06                        sta 6,x
0029E4r 3  94 02                        sty 2,x
0029E6r 3               
0029E6r 3                               ; 3 <-> 7
0029E6r 3  B5 03                        lda 3,x
0029E8r 3  B4 07                        ldy 7,x
0029EAr 3  95 07                        sta 7,x
0029ECr 3  94 03                        sty 3,x
0029EEr 3               
0029EEr 3  60           z_two_swap:     rts
0029EFr 3               
0029EFr 3               
0029EFr 3               ; ## TWO_TO_R ( n1 n2 -- )(R: -- n1 n2 "Push top two entries to Return Stack"
0029EFr 3               ; ## "2>r"  auto  ANS core ext
0029EFr 3                       ; """https://forth-standard.org/standard/core/TwotoR
0029EFr 3                       ; Push top two entries to Return Stack.
0029EFr 3                       ;
0029EFr 3                       ; The same as SWAP >R >R
0029EFr 3                       ; except that if we jumped here, the return address will be in the
0029EFr 3                       ; way. May not be natively compiled unless we're clever and use
0029EFr 3                       ; special routines.
0029EFr 3                       ; """
0029EFr 3               xt_two_to_r:
0029EFr 3                               ; save the return address
0029EFr 3  68                           pla             ; LSB
0029F0r 3  85 rr                        sta tmp1
0029F2r 3  68                           pla             ; MSB
0029F3r 3  85 rr                        sta tmp1+1
0029F5r 3               
0029F5r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0029F5r 3               
0029F5r 3  20 rr rr                     jsr underflow_2
0029F8r 3               
0029F8r 3                               ; now we can move the data
0029F8r 3  B5 03                        lda 3,x         ; MSB
0029FAr 3  48                           pha
0029FBr 3  B5 02                        lda 2,x         ; LSB
0029FDr 3  48                           pha
0029FEr 3               
0029FEr 3                               ; now we can move the data
0029FEr 3  B5 01                        lda 1,x         ; MSB
002A00r 3  48                           pha
002A01r 3  B5 00                        lda 0,x         ; LSB
002A03r 3  48                           pha
002A04r 3               
002A04r 3  E8                           inx
002A05r 3  E8                           inx
002A06r 3  E8                           inx
002A07r 3  E8                           inx
002A08r 3               
002A08r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002A08r 3               
002A08r 3                               ; restore return address
002A08r 3  A5 rr                        lda tmp1+1      ; MSB
002A0Ar 3  48                           pha
002A0Br 3  A5 rr                        lda tmp1        ; LSB
002A0Dr 3  48                           pha
002A0Er 3               
002A0Er 3  60           z_two_to_r:     rts
002A0Fr 3               
002A0Fr 3               
002A0Fr 3               ; ## TWO_CONSTANT (C: d "name" -- ) ( -- d) "Create a constant for a double word"
002A0Fr 3               ; ## "2constant"  auto  ANS double
002A0Fr 3                       ; """https://forth-standard.org/standard/double/TwoCONSTANT
002A0Fr 3                       ;
002A0Fr 3                       ; Based on the Forth code
002A0Fr 3                       ; : 2CONSTANT ( D -- )  CREATE SWAP , , DOES> DUP @ SWAP CELL+ @ ;
002A0Fr 3                       ; """
002A0Fr 3               xt_two_constant:
002A0Fr 3  20 rr rr                     jsr underflow_2
002A12r 3               
002A12r 3  20 rr rr                     jsr xt_create
002A15r 3  20 rr rr                     jsr xt_swap
002A18r 3  20 rr rr                     jsr xt_comma
002A1Br 3  20 rr rr                     jsr xt_comma
002A1Er 3               
002A1Er 3  20 rr rr                     jsr does_runtime    ; does> turns into these two routines.
002A21r 3  20 rr rr                     jsr dodoes
002A24r 3               
002A24r 3  20 rr rr                     jsr xt_dup
002A27r 3  20 rr rr                     jsr xt_fetch
002A2Ar 3  20 rr rr                     jsr xt_swap
002A2Dr 3  20 rr rr                     jsr xt_cell_plus
002A30r 3  20 rr rr                     jsr xt_fetch
002A33r 3               
002A33r 3  60           z_two_constant: rts
002A34r 3               
002A34r 3               
002A34r 3               ; ## TWO_LITERAL (C: d -- ) ( -- d) "Compile a literal double word"
002A34r 3               ; ## "2literal"  auto  ANS double
002A34r 3                       ; """https://forth-standard.org/standard/double/TwoLITERAL"""
002A34r 3                       ; Based on the Forth code
002A34r 3                       ; : 2LITERAL ( D -- ) SWAP POSTPONE LITERAL POSTPONE LITERAL ; IMMEDIATE
002A34r 3                       ; """
002A34r 3               xt_two_literal:
002A34r 3  20 rr rr                     jsr underflow_2 ; double number
002A37r 3               
002A37r 3  20 rr rr                     jsr xt_swap
002A3Ar 3  20 rr rr                     jsr xt_literal
002A3Dr 3  20 rr rr                     jsr xt_literal
002A40r 3               
002A40r 3  60           z_two_literal:  rts
002A41r 3               
002A41r 3               
002A41r 3               ; ## TWO_VARIABLE ( "name" -- ) "Create a variable for a double word"
002A41r 3               ; ## "2variable"  auto  ANS double
002A41r 3                       ; """https://forth-standard.org/standard/double/TwoVARIABLE
002A41r 3                       ; The variable is not initialized to zero.
002A41r 3                       ;
002A41r 3                       ; This can be realized in Forth as either
002A41r 3                       ; CREATE 2 CELLS ALLOT  or just  CREATE 0 , 0 ,
002A41r 3                       ; """
002A41r 3               xt_two_variable:
002A41r 3                               ; We just let CRATE and ALLOT do the heavy lifting
002A41r 3  20 rr rr                     jsr xt_create
002A44r 3               
002A44r 3  CA                           dex
002A45r 3  CA                           dex
002A46r 3  A9 04                        lda #4
002A48r 3  95 00                        sta 0,x
002A4Ar 3  74 01                        stz 1,x
002A4Cr 3               
002A4Cr 3  20 rr rr                     jsr xt_allot
002A4Fr 3               
002A4Fr 3  60           z_two_variable: rts
002A50r 3               
002A50r 3               
002A50r 3               ; ## TYPE ( addr u -- ) "Print string"
002A50r 3               ; ## "type"  auto  ANS core
002A50r 3                       ; """https://forth-standard.org/standard/core/TYPE
002A50r 3                       ; Works through EMIT to allow OUTPUT revectoring.
002A50r 3                       ; """
002A50r 3               
002A50r 3               xt_type:
002A50r 3  20 rr rr                     jsr underflow_2
002A53r 3               
002A53r 3                               ; Save the starting address into tmp1
002A53r 3  B5 02                        lda 2,x
002A55r 3  85 rr                        sta tmp1
002A57r 3  B5 03                        lda 3,x
002A59r 3  85 rr                        sta tmp1+1
002A5Br 3               @loop:
002A5Br 3                               ; done if length is zero
002A5Br 3  B5 00                        lda 0,x
002A5Dr 3  15 01                        ora 1,x
002A5Fr 3  F0 15                        beq @done
002A61r 3               
002A61r 3                               ; Send the current character
002A61r 3  B2 rr                        lda (tmp1)
002A63r 3  20 rr rr                     jsr emit_a      ; avoids stack foolery
002A66r 3               
002A66r 3                               ; Move the address along (in tmp1)
002A66r 3  E6 rr                        inc tmp1
002A68r 3  D0 02                        bne @1
002A6Ar 3  E6 rr                        inc tmp1+1
002A6Cr 3               @1:
002A6Cr 3                               ; Reduce the count (on the data stack)
002A6Cr 3  B5 00                        lda 0,x
002A6Er 3  D0 02                        bne @2
002A70r 3  D6 01                        dec 1,x
002A72r 3               @2:
002A72r 3  D6 00                        dec 0,x
002A74r 3               
002A74r 3  80 E5                        bra @loop
002A76r 3               @done:
002A76r 3  E8                           inx
002A77r 3  E8                           inx
002A78r 3  E8                           inx
002A79r 3  E8                           inx
002A7Ar 3               
002A7Ar 3  60           z_type:         rts
002A7Br 3               
002A7Br 3               
002A7Br 3               
002A7Br 3               ; ## U_DOT ( u -- ) "Print TOS as unsigned number"
002A7Br 3               ; ## "u."  tested  ANS core
002A7Br 3                       ; """https://forth-standard.org/standard/core/Ud
002A7Br 3                       ;
002A7Br 3                       ; This is : U. 0 <# #S #> TYPE SPACE ; in Forth
002A7Br 3                       ; We use the internal assembler function print_u followed
002A7Br 3                       ; by a single space
002A7Br 3                       ; """
002A7Br 3               xt_u_dot:
002A7Br 3  20 rr rr                     jsr underflow_1
002A7Er 3               
002A7Er 3  20 rr rr                     jsr print_u
002A81r 3  A9 20                        lda #AscSP
002A83r 3  20 rr rr                     jsr emit_a
002A86r 3               
002A86r 3  60           z_u_dot:        rts
002A87r 3               
002A87r 3               
002A87r 3               ; ## U_DOT_R ( u u -- ) "Print NOS as unsigned number right-justified with TOS width"
002A87r 3               ; ## "u.r"  tested  ANS core ext
002A87r 3                       ; """https://forth-standard.org/standard/core/UDotR"""
002A87r 3               xt_u_dot_r:
002A87r 3  20 rr rr                     jsr underflow_2
002A8Ar 3               
002A8Ar 3  20 rr rr                     jsr xt_to_r
002A8Dr 3  20 rr rr                     jsr xt_zero
002A90r 3  20 rr rr                     jsr xt_less_number_sign
002A93r 3  20 rr rr                     jsr xt_number_sign_s
002A96r 3  20 rr rr                     jsr xt_number_sign_greater
002A99r 3  20 rr rr                     jsr xt_r_from
002A9Cr 3  20 rr rr                     jsr xt_over
002A9Fr 3  20 rr rr                     jsr xt_minus
002AA2r 3  20 rr rr                     jsr xt_spaces
002AA5r 3  20 rr rr                     jsr xt_type
002AA8r 3               
002AA8r 3  60           z_u_dot_r:      rts
002AA9r 3               
002AA9r 3               
002AA9r 3               ; ## U_GREATER_THAN ( n m -- f ) "Return true if NOS > TOS (unsigned)"
002AA9r 3               ; ## "u>"  auto  ANS core ext
002AA9r 3                       ; """https://forth-standard.org/standard/core/Umore"""
002AA9r 3               xt_u_greater_than:
002AA9r 3  20 rr rr                     jsr underflow_2
002AACr 3               
002AACr 3  B5 00                        lda 0,x
002AAEr 3  D5 02                        cmp 2,x
002AB0r 3  B5 01                        lda 1,x
002AB2r 3  F5 03                        sbc 3,x
002AB4r 3  E8                           inx
002AB5r 3  E8                           inx
002AB6r 3               
002AB6r 3  A9 00                        lda #0
002AB8r 3  69 FF                        adc #$ff
002ABAr 3  95 00                        sta 0,x         ; store flag
002ABCr 3  95 01                        sta 1,x
002ABEr 3               
002ABEr 3  60           z_u_greater_than:    rts
002ABFr 3               
002ABFr 3               ; ## U_LESS_THAN ( n m -- f ) "Return true if NOS < TOS (unsigned)"
002ABFr 3               ; ## "u<"  auto  ANS core
002ABFr 3                       ; """https://forth-standard.org/standard/core/Uless"""
002ABFr 3               xt_u_less_than:
002ABFr 3  20 rr rr                     jsr underflow_2
002AC2r 3               
002AC2r 3  B5 02                        lda 2,x
002AC4r 3  D5 00                        cmp 0,x
002AC6r 3  B5 03                        lda 3,x
002AC8r 3  F5 01                        sbc 1,x
002ACAr 3  E8                           inx
002ACBr 3  E8                           inx
002ACCr 3               
002ACCr 3  A9 00                        lda #0
002ACEr 3  69 FF                        adc #$ff
002AD0r 3  95 00                        sta 0,x         ; store flag
002AD2r 3  95 01                        sta 1,x
002AD4r 3               
002AD4r 3  60           z_u_less_than:    rts
002AD5r 3               
002AD5r 3               
002AD5r 3               ; ## UD_DOT ( d -- ) "Print double as unsigned"
002AD5r 3               ; ## "ud."  auto  Tali double
002AD5r 3                       ;
002AD5r 3                       ; """Based on the Forth code  : UD. <# #S #> TYPE SPACE ;
002AD5r 3                       ; """
002AD5r 3               xt_ud_dot:
002AD5r 3  20 rr rr                     jsr underflow_2 ; double number
002AD8r 3               
002AD8r 3  20 rr rr                     jsr xt_less_number_sign
002ADBr 3  20 rr rr                     jsr xt_number_sign_s
002ADEr 3  20 rr rr                     jsr xt_number_sign_greater
002AE1r 3  20 rr rr                     jsr xt_type
002AE4r 3  20 rr rr                     jsr xt_space
002AE7r 3               
002AE7r 3  60           z_ud_dot:        rts
002AE8r 3               
002AE8r 3               
002AE8r 3               ; ## UD_DOT_R ( d u -- ) "Print unsigned double right-justified u wide"
002AE8r 3               ; ## "ud.r"  auto  Tali double
002AE8r 3                       ;
002AE8r 3                       ; """Based on the Forth code : UD.R  >R <# #S #> R> OVER - SPACES TYPE ;
002AE8r 3                       ; """
002AE8r 3               xt_ud_dot_r:
002AE8r 3  20 rr rr                     jsr underflow_3
002AEBr 3               
002AEBr 3  20 rr rr                     jsr xt_to_r
002AEEr 3  20 rr rr                     jsr xt_less_number_sign
002AF1r 3  20 rr rr                     jsr xt_number_sign_s
002AF4r 3  20 rr rr                     jsr xt_number_sign_greater
002AF7r 3  20 rr rr                     jsr xt_r_from
002AFAr 3  20 rr rr                     jsr xt_over
002AFDr 3  20 rr rr                     jsr xt_minus
002B00r 3  20 rr rr                     jsr xt_spaces
002B03r 3  20 rr rr                     jsr xt_type
002B06r 3               
002B06r 3  60           z_ud_dot_r:      rts
002B07r 3               
002B07r 3               
002B07r 3               ; ## UM_SLASH_MOD ( ud u -- ur u ) "32/16 -> 16 division"
002B07r 3               ; ## "um/mod"  auto  ANS core
002B07r 3                       ; """https://forth-standard.org/standard/core/UMDivMOD
002B07r 3                       ; Divide double cell number by single cell number, returning the
002B07r 3                       ; quotient as TOS and any remainder as NOS. All numbers are unsigned.
002B07r 3                       ; This is the basic division operation all others use. Based on FIG
002B07r 3                       ; Forth code, modified by Garth Wilson, see
002B07r 3                       ; http://6502.org/source/integers/ummodfix/ummodfix.htm
002B07r 3                       ;
002B07r 3                       ; This uses tmp1, tmp1+1, and tmptos
002B07r 3                       ; """
002B07r 3               
002B07r 3               xt_um_slash_mod:
002B07r 3  20 rr rr                     jsr underflow_3
002B0Ar 3               
002B0Ar 3                               ; catch division by zero
002B0Ar 3  B5 00                        lda 0,x
002B0Cr 3  15 01                        ora 1,x
002B0Er 3  D0 05                        bne @not_zero
002B10r 3               
002B10r 3  A9 04                        lda #err_divzero
002B12r 3  4C rr rr                     jmp error
002B15r 3               
002B15r 3               @not_zero:
002B15r 3                               ; We loop 17 times
002B15r 3  A9 11                        lda #17
002B17r 3  85 rr                        sta tmptos
002B19r 3               
002B19r 3               @loop:
002B19r 3                               ; rotate low cell of dividend one bit left (LSB)
002B19r 3  36 04                        rol 4,x
002B1Br 3  36 05                        rol 5,x
002B1Dr 3               
002B1Dr 3                               ; loop control
002B1Dr 3  C6 rr                        dec tmptos
002B1Fr 3  F0 22                        beq @done
002B21r 3               
002B21r 3                               ; rotate high cell of dividend one bit left (MSB)
002B21r 3  36 02                        rol 2,x
002B23r 3  36 03                        rol 3,x
002B25r 3               
002B25r 3  64 rr                        stz tmp1        ; store the bit we got from hi cell (MSB)
002B27r 3  26 rr                        rol tmp1
002B29r 3               
002B29r 3                               ; subtract dividend hi cell minus divisor
002B29r 3  38                           sec
002B2Ar 3  B5 02                        lda 2,x
002B2Cr 3  F5 00                        sbc 0,x
002B2Er 3  85 rr                        sta tmp1+1
002B30r 3  B5 03                        lda 3,x
002B32r 3  F5 01                        sbc 1,x
002B34r 3               
002B34r 3  A8                           tay
002B35r 3  A5 rr                        lda tmp1
002B37r 3  E9 00                        sbc #0
002B39r 3  90 DE                        bcc @loop
002B3Br 3               
002B3Br 3                               ; make result new dividend high cell
002B3Br 3  A5 rr                        lda tmp1+1
002B3Dr 3  95 02                        sta 2,x
002B3Fr 3  94 03                        sty 3,x         ; used as temp storage
002B41r 3               
002B41r 3  80 D6                        bra @loop
002B43r 3               @done:
002B43r 3  E8                           inx
002B44r 3  E8                           inx
002B45r 3               
002B45r 3  20 rr rr                     jsr xt_swap
002B48r 3               
002B48r 3  60           z_um_slash_mod: rts
002B49r 3               
002B49r 3               
002B49r 3               
002B49r 3               ; ## UM_STAR ( u u -- ud ) "Multiply 16 x 16 -> 32"
002B49r 3               ; ## "um*"  auto  ANS core
002B49r 3                       ; """https://forth-standard.org/standard/core/UMTimes
002B49r 3                       ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.
002B49r 3                       ; Old Forth versions such as FIG Forth call this U*
002B49r 3                       ;
002B49r 3                       ; This is based on modified FIG Forth code by Dr. Jefyll, see
002B49r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed
002B49r 3                       ; discussion.
002B49r 3                       ;
002B49r 3                       ; We don't use the system scratch pad (SYSPAD) for temp
002B49r 3                       ; storage because >NUMBER uses it as well, but instead tmp1 to
002B49r 3                       ; tmp3 (tmp1 is N in the original code, tmp1+1 is N+1, etc).
002B49r 3                       ;
002B49r 3                       ; Consider switching to a table-supported version based on
002B49r 3                       ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
002B49r 3                       ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d>
002B49r 3                       ; http://forum.6502.org/viewtopic.php?p=205#p205
002B49r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689
002B49r 3                       ; """
002B49r 3               
002B49r 3               xt_um_star:
002B49r 3  20 rr rr                     jsr underflow_2
002B4Cr 3               
002B4Cr 3                               ; to eliminate clc inside the loop, the value at
002B4Cr 3                               ; tmp1 is reduced by 1 in advance
002B4Cr 3  18                           clc
002B4Dr 3  B5 00                        lda 0,x         ; copy TOS to tmp2
002B4Fr 3  E9 00                        sbc #0
002B51r 3  85 rr                        sta tmp2
002B53r 3               
002B53r 3  B5 01                        lda 1,x
002B55r 3  E9 00                        sbc #0
002B57r 3  90 31                        bcc @zero       ; is TOS zero?
002B59r 3  85 rr                        sta tmp2+1
002B5Br 3               
002B5Br 3  A9 00                        lda #0
002B5Dr 3  85 rr                        sta tmp1
002B5Fr 3  86 rr                        stx tmp3        ; tested for exit from outer loop
002B61r 3  CA                           dex
002B62r 3  CA                           dex
002B63r 3               
002B63r 3               @outer_loop:
002B63r 3  A0 08                        ldy #8          ; counter inner loop
002B65r 3  56 04                        lsr 4,x         ; think "2,x" then later "3,x"
002B67r 3               
002B67r 3               @inner_loop:
002B67r 3  90 0C                        bcc @no_add
002B69r 3  85 rr                        sta tmp1+1      ; save time, don't CLC
002B6Br 3  A5 rr                        lda tmp1
002B6Dr 3  65 rr                        adc tmp2
002B6Fr 3  85 rr                        sta tmp1
002B71r 3  A5 rr                        lda tmp1+1
002B73r 3  65 rr                        adc tmp2+1
002B75r 3               
002B75r 3               @no_add:
002B75r 3  6A                           ror
002B76r 3  66 rr                        ror tmp1
002B78r 3  76 04                        ror 4,x         ; think "2,x" then later "3,x"
002B7Ar 3               
002B7Ar 3  88                           dey
002B7Br 3  D0 EA                        bne @inner_loop ; go back for one more shift?
002B7Dr 3               
002B7Dr 3  E8                           inx
002B7Er 3  E4 rr                        cpx tmp3
002B80r 3  D0 E1                        bne @outer_loop ; go back for eight more shifts?
002B82r 3               
002B82r 3                               ; all done, store high word of result
002B82r 3  95 01                        sta 1,x
002B84r 3  A5 rr                        lda tmp1
002B86r 3  95 00                        sta 0,x
002B88r 3  80 04                        bra @done
002B8Ar 3               
002B8Ar 3               @zero:
002B8Ar 3  74 02                        stz 2,x
002B8Cr 3  74 03                        stz 3,x
002B8Er 3               @done:
002B8Er 3  60           z_um_star:      rts
002B8Fr 3               
002B8Fr 3               
002B8Fr 3               
002B8Fr 3               ; ## UNLOOP ( -- )(R: n1 n2 n3 ---) "Drop loop control from Return stack"
002B8Fr 3               ; ## "unloop"  auto  ANS core
002B8Fr 3                       ; """https://forth-standard.org/standard/core/UNLOOP
002B8Fr 3                       ;
002B8Fr 3                       ; Note that 6xPLA uses just as many bytes as a loop would
002B8Fr 3                       ; """
002B8Fr 3               xt_unloop:
002B8Fr 3                               ; Drop fudge number (limit/start from DO/?DO off the
002B8Fr 3                               ; return stack
002B8Fr 3  68                           pla
002B90r 3  68                           pla
002B91r 3  68                           pla
002B92r 3  68                           pla
002B93r 3               
002B93r 3                               ; Now drop the LEAVE address that was below them off
002B93r 3                               ; the Return Stack as well
002B93r 3  68                           pla
002B94r 3  68                           pla
002B95r 3               
002B95r 3  60           z_unloop:       rts
002B96r 3               
002B96r 3               
002B96r 3               ; ## UNTIL (C: dest -- ) ( -- ) "Loop flow control"
002B96r 3               ; ## "until"  auto  ANS core
002B96r 3                       ; """http://forth-standard.org/standard/core/UNTIL"""
002B96r 3               xt_until:
002B96r 3                               ; Compile a 0BRANCH
002B96r 3  A0 rr                        ldy #>zero_branch_runtime
002B98r 3  A9 rr                        lda #<zero_branch_runtime
002B9Ar 3  20 rr rr                     jsr cmpl_subroutine
002B9Dr 3               
002B9Dr 3                               ; The address to loop back to is on the stack.
002B9Dr 3                               ; Just compile it as the destination for the
002B9Dr 3                               ; 0branch.
002B9Dr 3  20 rr rr                     jsr xt_comma
002BA0r 3               
002BA0r 3  60           z_until:        rts
002BA1r 3               
002BA1r 3               
002BA1r 3               ; ## UNUSED ( -- u ) "Return size of space available to Dictionary"
002BA1r 3               ; ## "unused"  auto  ANS core ext
002BA1r 3                       ; """https://forth-standard.org/standard/core/UNUSED
002BA1r 3                       ; UNUSED does not include the ACCEPT history buffers. Total RAM
002BA1r 3                       ; should be HERE + UNUSED + <history buffer size>, the last of which
002BA1r 3                       ; defaults to $400
002BA1r 3                       ; """
002BA1r 3               xt_unused:
002BA1r 3  CA                           dex
002BA2r 3  CA                           dex
002BA3r 3               
002BA3r 3  A9 FF                        lda #<cp_end
002BA5r 3  38                           sec
002BA6r 3  E5 rr                        sbc cp
002BA8r 3  95 00                        sta 0,x
002BAAr 3               
002BAAr 3  A9 7F                        lda #>cp_end
002BACr 3  E5 rr                        sbc cp+1
002BAEr 3  95 01                        sta 1,x
002BB0r 3               
002BB0r 3  60           z_unused:       rts
002BB1r 3               
002BB1r 3               
002BB1r 3               ; ## UPDATE ( -- ) "Mark current block as dirty"
002BB1r 3               ; ## "update"  auto  ANS block
002BB1r 3                       ; """https://forth-standard.org/standard/block/UPDATE"""
002BB1r 3               xt_update:
002BB1r 3                               ; Turn on the dirty bit. We can't use TSB here because it only
002BB1r 3                               ; has Absolute and Direct Pages addressing modes
002BB1r 3  A0 2C                        ldy #buffstatus_offset
002BB3r 3  B1 rr                        lda (up),y
002BB5r 3  09 02                        ora #2          ; Turn on dirty flag (bit 2)
002BB7r 3  91 rr                        sta (up),y
002BB9r 3               
002BB9r 3  60           z_update:       rts
002BBAr 3               
002BBAr 3               
002BBAr 3               ; ## USERADDR ( -- addr ) "Push address of base address of user variables"
002BBAr 3               ; ## "useraddr"  tested  Tali Forth
002BBAr 3               xt_useraddr:
002BBAr 3  CA                           dex
002BBBr 3  CA                           dex
002BBCr 3  A9 rr                        lda #<up
002BBEr 3  95 00                        sta 0,x
002BC0r 3  A9 rr                        lda #>up
002BC2r 3  95 01                        sta 1,x
002BC4r 3               
002BC4r 3  60           z_useraddr:     rts
002BC5r 3               
002BC5r 3               
002BC5r 3               ; ## VALUE ( n "name" -- ) "Define a value"
002BC5r 3               ; ## "value"  auto  ANS core
002BC5r 3                       ; """https://forth-standard.org/standard/core/VALUE
002BC5r 3                       ;
002BC5r 3                       ; This is a dummy header for the WORDLIST. The actual code is
002BC5r 3                       ; identical to that of CONSTANT
002BC5r 3                       ; """
002BC5r 3               
002BC5r 3               
002BC5r 3               ; ## VARIABLE ( "name" -- ) "Define a variable"
002BC5r 3               ; ## "variable"  auto  ANS core
002BC5r 3                       ; """https://forth-standard.org/standard/core/VARIABLE
002BC5r 3                       ; There are various Forth definitions for this word, such as
002BC5r 3                       ; `CREATE 1 CELLS ALLOT`  or  `CREATE 0 ,`  We use a variant of the
002BC5r 3                       ; second one so the variable is initialized to zero
002BC5r 3                       ; """
002BC5r 3               xt_variable:
002BC5r 3                               ; we let CREATE do the heavy lifting
002BC5r 3  20 rr rr                     jsr xt_create
002BC8r 3               
002BC8r 3                               ; there is no "STZ (CP)" so we have to do this the hard
002BC8r 3                               ; way
002BC8r 3  A9 00                        lda #0
002BCAr 3               
002BCAr 3  92 rr                        sta (cp)
002BCCr 3  E6 rr                        inc cp
002BCEr 3  D0 02                        bne @1
002BD0r 3  E6 rr                        inc cp+1
002BD2r 3               @1:
002BD2r 3  92 rr                        sta (cp)
002BD4r 3  E6 rr                        inc cp
002BD6r 3  D0 02                        bne @2
002BD8r 3  E6 rr                        inc cp+1
002BDAr 3               @2:
002BDAr 3                               ; Now we need to adjust the length of the complete word by two
002BDAr 3  20 rr rr                     jsr adjust_z
002BDDr 3               
002BDDr 3  60           z_variable:     rts
002BDEr 3               
002BDEr 3               
002BDEr 3               ; ## WHILE ( C: dest -- orig dest ) ( x -- ) "Loop flow control"
002BDEr 3               ; ## "while"  auto  ANS core
002BDEr 3                       ; """http://forth-standard.org/standard/core/WHILE"""
002BDEr 3               xt_while:
002BDEr 3                               ; Compile a 0branch
002BDEr 3  A0 rr                        ldy #>zero_branch_runtime
002BE0r 3  A9 rr                        lda #<zero_branch_runtime
002BE2r 3  20 rr rr                     jsr cmpl_subroutine
002BE5r 3               
002BE5r 3                               ; Put the address (here) where the destination
002BE5r 3                               ; address needs to go so it can be put there later.
002BE5r 3  20 rr rr                     jsr xt_here
002BE8r 3               
002BE8r 3                               ; Fill in the destination address with 0 for now.
002BE8r 3  20 rr rr                     jsr xt_zero
002BEBr 3  20 rr rr                     jsr xt_comma
002BEEr 3               
002BEEr 3                               ; Swap the two addresses on the stack.
002BEEr 3  20 rr rr                     jsr xt_swap
002BF1r 3               
002BF1r 3  60           z_while:        rts
002BF2r 3               
002BF2r 3               
002BF2r 3               ; ## WITHIN ( n1 n2 n3 -- ) "See if within a range"
002BF2r 3               ; ## "within"  auto  ANS core ext
002BF2r 3                       ; """https://forth-standard.org/standard/core/WITHIN
002BF2r 3                       ;
002BF2r 3                       ; This an assembler version of the ANS Forth implementation
002BF2r 3                       ; at https://forth-standard.org/standard/core/WITHIN which is
002BF2r 3                       ; OVER - >R - R> U<  note there is an alternative high-level version
002BF2r 3                       ; ROT TUCK > -ROT > INVERT AND
002BF2r 3                       ; """"
002BF2r 3               xt_within:
002BF2r 3  20 rr rr                     jsr underflow_3
002BF5r 3               
002BF5r 3  20 rr rr                     jsr xt_over
002BF8r 3  20 rr rr                     jsr xt_minus
002BFBr 3  20 rr rr                     jsr xt_to_r
002BFEr 3  20 rr rr                     jsr xt_minus
002C01r 3  20 rr rr                     jsr xt_r_from
002C04r 3  20 rr rr                     jsr xt_u_less_than
002C07r 3               
002C07r 3  60           z_within:       rts
002C08r 3               
002C08r 3               
002C08r 3               ; ## WORD ( char "name " -- caddr ) "Parse input stream"
002C08r 3               ; ## "word"  auto  ANS core
002C08r 3                       ; """https://forth-standard.org/standard/core/WORD
002C08r 3                       ; Obsolete parsing word included for backwards compatibility only.
002C08r 3                       ; Do not use this, use `PARSE` or `PARSE-NAME`. Skips leading delimiters
002C08r 3                       ; and copies word to storage area for a maximum size of 255 bytes.
002C08r 3                       ; Returns the result as a counted string (requires COUNT to convert
002C08r 3                       ; to modern format), and inserts a space after the string. See "Forth
002C08r 3                       ; Programmer's Handbook" 3rd edition p. 159 and
002C08r 3                       ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
002C08r 3                       ; for discussions of why you shouldn't be using WORD anymore.
002C08r 3                       ;
002C08r 3                       ; Forth
002C08r 3                       ; would be   PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
002C08r 3                       ; We only allow input of 255 chars. Seriously, use PARSE-NAME.
002C08r 3                       ; """
002C08r 3               
002C08r 3               xt_word:
002C08r 3  20 rr rr                     jsr underflow_1
002C0Br 3               
002C0Br 3                               ; Skip over leading delimiters - this is like PARSE-NAME,
002C0Br 3                               ; but unlike PARSE
002C0Br 3  A4 rr                        ldy toin                ; >IN
002C0Dr 3               @loop:
002C0Dr 3  C4 rr                        cpy ciblen              ; quit if end of input
002C0Fr 3  F0 09                        beq @found_char
002C11r 3  B1 rr                        lda (cib),y
002C13r 3  D5 00                        cmp 0,x                 ; ASCII of delimiter
002C15r 3  D0 03                        bne @found_char
002C17r 3               
002C17r 3  C8                           iny
002C18r 3  80 F3                        bra @loop
002C1Ar 3               @found_char:
002C1Ar 3                               ; Save index of where word starts
002C1Ar 3  84 rr                        sty toin
002C1Cr 3               
002C1Cr 3                               ; The real work is done by parse
002C1Cr 3  20 rr rr                     jsr xt_parse            ; Returns ( addr u )
002C1Fr 3               
002C1Fr 3                               ; Convert the modern ( addr u ) string format to obsolete
002C1Fr 3                               ; ( caddr ) format. We just do this in the Dictionary
002C1Fr 3  B5 00                        lda 0,x
002C21r 3  92 rr                        sta (cp)                ; Save length of string
002C23r 3  48                           pha                     ; Keep copy of length for later
002C24r 3               
002C24r 3  20 rr rr                     jsr xt_dup              ; ( addr u u )
002C27r 3  A5 rr                        lda cp
002C29r 3  18                           clc
002C2Ar 3  69 01                        adc #1
002C2Cr 3  95 02                        sta 2,x                 ; LSB of CP
002C2Er 3  A5 rr                        lda cp+1
002C30r 3  69 00                        adc #0
002C32r 3  95 03                        sta 3,x                 ; ( addr cp+1 u )
002C34r 3               
002C34r 3  20 rr rr                     jsr xt_move
002C37r 3               
002C37r 3                               ; Return caddr
002C37r 3  CA                           dex
002C38r 3  CA                           dex
002C39r 3  A5 rr                        lda cp
002C3Br 3  95 00                        sta 0,x
002C3Dr 3  A5 rr                        lda cp+1
002C3Fr 3  95 01                        sta 1,x
002C41r 3               
002C41r 3                               ; Adjust CP
002C41r 3  68                           pla                     ; length of string
002C42r 3  18                           clc
002C43r 3  65 rr                        adc cp
002C45r 3  85 rr                        sta cp
002C47r 3  A5 rr                        lda cp+1
002C49r 3  69 00                        adc #0                  ; we only need the carry
002C4Br 3  85 rr                        sta cp+1
002C4Dr 3  60           z_word:         rts
002C4Er 3               
002C4Er 3               
002C4Er 3               ; ## WORDLIST ( -- wid ) "Create new wordlist (from pool of 8)"
002C4Er 3               ; ## "wordlist" auto ANS search
002C4Er 3                       ; """https://forth-standard.org/standard/search/WORDLIST
002C4Er 3                       ; See the tutorial on Wordlists and the Search Order for
002C4Er 3                       ; more information.
002C4Er 3                       ; """
002C4Er 3               
002C4Er 3               xt_wordlist:
002C4Er 3                               ; Get the current number of wordlists
002C4Er 3  A0 05                        ldy #num_wordlists_offset
002C50r 3  B1 rr                        lda (up),y      ; This is a byte variable, so only
002C52r 3                                               ; the LSB needs to be checked.
002C52r 3               
002C52r 3                               ; See if we are already at the max.
002C52r 3  C9 0C                        cmp #max_wordlists
002C54r 3  D0 05                        bne @ok
002C56r 3               
002C56r 3                               ; Print an error message if all wordlists used.
002C56r 3  A9 0B                        lda #err_wordlist
002C58r 3  4C rr rr                     jmp error
002C5Br 3               
002C5Br 3               @ok:
002C5Br 3  1A                           inc             ; Increment the wordlist#
002C5Cr 3  91 rr                        sta (up),y      ; Save it into byte variable #wordlists
002C5Er 3  CA                           dex             ; and put it on the stack.
002C5Fr 3  CA                           dex
002C60r 3  95 00                        sta 0,x
002C62r 3  74 01                        stz 1,x         ; 12 is the max, so upper byte is always zero.
002C64r 3               
002C64r 3  60           z_wordlist:     rts
002C65r 3               
002C65r 3               
002C65r 3               
002C65r 3               ; ## WORDS ( -- ) "Print known words from Dictionary"
002C65r 3               ; ## "words"  tested  ANS tools
002C65r 3                       ; """https://forth-standard.org/standard/tools/WORDS
002C65r 3                       ; This is pretty much only used at the command line so we can
002C65r 3                       ; be slow and try to save space.
002C65r 3                       ; """
002C65r 3               
002C65r 3               xt_words:
002C65r 3                               ; we follow Gforth by starting on the next
002C65r 3                               ; line
002C65r 3  20 rr rr                     jsr xt_cr
002C68r 3               
002C68r 3                               ; We pretty-format the output by inserting a line break
002C68r 3                               ; before the end of the line. We can get away with pushing
002C68r 3                               ; the counter to the stack because this is usually an
002C68r 3                               ; interactive word and speed is not that important
002C68r 3  A9 00                        lda #0
002C6Ar 3  48                           pha
002C6Br 3               
002C6Br 3                               ; Set up for traversing the wordlist search order.
002C6Br 3  CA                           dex                     ; Make room on the stack for
002C6Cr 3  CA                           dex                     ; a dictionary pointer.
002C6Dr 3  64 rr                        stz tmp3                ; Start at the beginning of
002C6Fr 3                                                       ; the search order.
002C6Fr 3               @wordlist_loop:
002C6Fr 3  A0 1E                        ldy #num_order_offset   ; Check against byte variable #ORDER.
002C71r 3  A5 rr                        lda tmp3
002C73r 3  D1 rr                        cmp (up),y              ; See if we are done.
002C75r 3  D0 02                        bne @have_wordlist
002C77r 3               
002C77r 3                               ; We ran out of wordlists to search.
002C77r 3  80 45                        bra @words_done
002C79r 3               
002C79r 3               @have_wordlist:
002C79r 3                               ; start with last word in Dictionary
002C79r 3                               ; Get the current wordlist id
002C79r 3  18                           clc                     ; Index into byte array SEARCH-ORDER.
002C7Ar 3  69 1F                        adc #search_order_offset
002C7Cr 3  A8                           tay
002C7Dr 3  B1 rr                        lda (up),y              ; Get the index into array WORDLISTS
002C7Fr 3               
002C7Fr 3                               ; Get the DP for that wordlist.
002C7Fr 3  0A                           asl                     ; Turn offset into cells offset.
002C80r 3  18                           clc
002C81r 3  69 06                        adc #wordlists_offset
002C83r 3  A8                           tay
002C84r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
002C86r 3  95 00                        sta 0,x                 ; on the stack. ( nt )
002C88r 3  C8                           iny
002C89r 3  B1 rr                        lda (up),y
002C8Br 3  95 01                        sta 1,x
002C8Dr 3               
002C8Dr 3               @loop:
002C8Dr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002C90r 3  20 rr rr                     jsr xt_name_to_string   ; ( nt addr u )
002C93r 3               
002C93r 3                               ; Insert line break if we're about to go past the end of the
002C93r 3                               ; line
002C93r 3  68                           pla
002C94r 3  18                           clc
002C95r 3  75 00                        adc 0,x
002C97r 3  1A                           inc                     ; don't forget the space between words
002C98r 3  C9 4F                        cmp #MAX_LINE_LENGTH    ; usually 79
002C9Ar 3  90 06                        bcc @1
002C9Cr 3               
002C9Cr 3  20 rr rr                     jsr xt_cr
002C9Fr 3  B5 00                        lda 0, x
002CA1r 3  1A                           inc
002CA2r 3               @1:
002CA2r 3  48                           pha
002CA3r 3  20 rr rr                     jsr xt_type             ; ( nt )
002CA6r 3               
002CA6r 3  A9 20                        lda #AscSP
002CA8r 3  20 rr rr                     jsr emit_a
002CABr 3               
002CABr 3                               ; get next word, which begins two down
002CABr 3  20 rr rr                     jsr xt_one_plus         ; 1+
002CAEr 3  20 rr rr                     jsr xt_one_plus         ; 1+
002CB1r 3  20 rr rr                     jsr xt_fetch            ; @ ( nt+1 )
002CB4r 3               
002CB4r 3                               ; if next address is zero, we're done
002CB4r 3  B5 00                        lda 0,x
002CB6r 3  15 01                        ora 1,x
002CB8r 3  D0 D3                        bne @loop
002CBAr 3               
002CBAr 3                               ; Move on to the next wordlist in the search order.
002CBAr 3  E6 rr                        inc tmp3
002CBCr 3  80 B1                        bra @wordlist_loop
002CBEr 3               
002CBEr 3               @words_done:
002CBEr 3  68                           pla                     ; dump counter
002CBFr 3               
002CBFr 3  E8                           inx
002CC0r 3  E8                           inx
002CC1r 3               
002CC1r 3  60           z_words:        rts
002CC2r 3               
002CC2r 3               
002CC2r 3               
002CC2r 3               ; ## WORDSIZE ( nt -- u ) "Get size of word in bytes"
002CC2r 3               ; ## "wordsize"  auto  Tali Forth
002CC2r 3                       ; """Given an word's name token (nt), return the size of the
002CC2r 3                       ; word's payload size in bytes (CFA plus PFA) in bytes. Does not
002CC2r 3                       ; count the final RTS.
002CC2r 3                       ; """
002CC2r 3               xt_wordsize:
002CC2r 3  20 rr rr                     jsr underflow_1
002CC5r 3               
002CC5r 3                               ; We get the start address of the word from its header entry
002CC5r 3                               ; for the start of the actual code (execution token, xt)
002CC5r 3                               ; which is four bytes down, and the pointer to the end of the
002CC5r 3                               ; code (z_word, six bytes down)
002CC5r 3  B5 00                        lda 0,x
002CC7r 3  85 rr                        sta tmp1
002CC9r 3  B5 01                        lda 1,x
002CCBr 3  85 rr                        sta tmp1+1
002CCDr 3               
002CCDr 3  A0 06                        ldy #6
002CCFr 3  B1 rr                        lda (tmp1),y    ; LSB of z
002CD1r 3  88                           dey
002CD2r 3  88                           dey
002CD3r 3               
002CD3r 3  38                           sec
002CD4r 3  F1 rr                        sbc (tmp1),y    ; LSB of xt
002CD6r 3  95 00                        sta 0,x
002CD8r 3               
002CD8r 3  A0 07                        ldy #7
002CDAr 3  B1 rr                        lda (tmp1),y    ; MSB of z
002CDCr 3  88                           dey
002CDDr 3  88                           dey
002CDEr 3               
002CDEr 3  F1 rr                        sbc (tmp1),y    ; MSB of xt
002CE0r 3  95 01                        sta 1,x
002CE2r 3               
002CE2r 3  60           z_wordsize:     rts
002CE3r 3               
002CE3r 3               
002CE3r 3               ; ## XOR ( n n -- n ) "Logically XOR TOS and NOS"
002CE3r 3               ; ## "xor"  auto  ANS core
002CE3r 3                       ; """https://forth-standard.org/standard/core/XOR"""
002CE3r 3               xt_xor:
002CE3r 3  20 rr rr                     jsr underflow_2
002CE6r 3               
002CE6r 3  B5 00                        lda 0,x
002CE8r 3  55 02                        eor 2,x
002CEAr 3  95 02                        sta 2,x
002CECr 3               
002CECr 3  B5 01                        lda 1,x
002CEEr 3  55 03                        eor 3,x
002CF0r 3  95 03                        sta 3,x
002CF2r 3               
002CF2r 3  E8                           inx
002CF3r 3  E8                           inx
002CF4r 3               
002CF4r 3  60           z_xor:          rts
002CF5r 3               
002CF5r 3               
002CF5r 3               ; ## ZERO ( -- 0 ) "Push 0 to Data Stack"
002CF5r 3               ; ## "0"  auto  Tali Forth
002CF5r 3                       ; """The disassembler assumes that this routine does not use Y. Note
002CF5r 3                       ; that CASE and FORTH-WORDLIST use the same routine, as the WD for Forth
002CF5r 3                       ; is 0."""
002CF5r 3               xt_case:
002CF5r 3               xt_forth_wordlist:
002CF5r 3               xt_zero:
002CF5r 3  CA                           dex             ; push
002CF6r 3  CA                           dex
002CF7r 3  74 00                        stz 0,x
002CF9r 3  74 01                        stz 1,x
002CFBr 3               z_case:
002CFBr 3               z_forth_wordlist:
002CFBr 3               z_zero:
002CFBr 3  60                           rts
002CFCr 3               
002CFCr 3               
002CFCr 3               ; ## ZERO_EQUAL ( n -- f ) "Check if TOS is zero"
002CFCr 3               ; ## "0="  auto  ANS core
002CFCr 3                       ; """https://forth-standard.org/standard/core/ZeroEqual"""
002CFCr 3               
002CFCr 3               xt_zero_equal:
002CFCr 3  20 rr rr                     jsr underflow_1
002CFFr 3               
002CFFr 3  B5 00                        lda 0,x
002D01r 3  15 01                        ora 1,x
002D03r 3  F0 04                        beq @zero
002D05r 3               
002D05r 3                               ; not a zero, so we need a FALSE flag (0)
002D05r 3  A9 00                        lda #0
002D07r 3  80 02                        bra @store
002D09r 3               @zero:
002D09r 3                               ; We have a zero, so we need a TRUE flag (-1)
002D09r 3  A9 FF                        lda #$ff
002D0Br 3               @store:
002D0Br 3  95 00                        sta 0,x
002D0Dr 3  95 01                        sta 1,x
002D0Fr 3               
002D0Fr 3  60           z_zero_equal:   rts
002D10r 3               
002D10r 3               
002D10r 3               
002D10r 3               ; ## ZERO_GREATER ( n -- f ) "Return a TRUE flag if TOS is positive"
002D10r 3               ; ## "0>"  auto  ANS core ext
002D10r 3                       ; """https://forth-standard.org/standard/core/Zeromore"""
002D10r 3               
002D10r 3               xt_zero_greater:
002D10r 3  20 rr rr                     jsr underflow_1
002D13r 3               
002D13r 3  A0 00                        ldy #0          ; Default is FALSE (TOS is negative)
002D15r 3               
002D15r 3  B5 01                        lda 1,x         ; MSB
002D17r 3  30 05                        bmi @done       ; TOS is negative, keep FLASE
002D19r 3  15 00                        ora 0,x
002D1Br 3  F0 01                        beq @done       ; TOS is zero, keep FALSE
002D1Dr 3               
002D1Dr 3  88                           dey             ; TOS is postive, make true
002D1Er 3               @done:
002D1Er 3  98                           tya
002D1Fr 3  95 00                        sta 0,x
002D21r 3  95 01                        sta 1,x
002D23r 3               
002D23r 3  60           z_zero_greater: rts
002D24r 3               
002D24r 3               
002D24r 3               
002D24r 3               ; ## ZERO_LESS ( n -- f ) "Return a TRUE flag if TOS negative"
002D24r 3               ; ## "0<"  auto  ANS core
002D24r 3                       ; """https://forth-standard.org/standard/core/Zeroless"""
002D24r 3               
002D24r 3               xt_zero_less:
002D24r 3  20 rr rr                     jsr underflow_1
002D27r 3               
002D27r 3  A0 00                        ldy #0          ; Default is FALSE (TOS positive)
002D29r 3               
002D29r 3  B5 01                        lda 1,x         ; MSB
002D2Br 3  10 01                        bpl @done       ; TOS is positive, so keep FALSE
002D2Dr 3               
002D2Dr 3  88                           dey             ; TOS is negative, make TRUE
002D2Er 3               @done:
002D2Er 3  98                           tya
002D2Fr 3  95 00                        sta 0,x
002D31r 3  95 01                        sta 1,x
002D33r 3               
002D33r 3  60           z_zero_less:    rts
002D34r 3               
002D34r 3               
002D34r 3               
002D34r 3               ; ## ZERO_UNEQUAL ( m -- f ) "Return TRUE flag if not zero"
002D34r 3               ; ## "0<>"  auto  ANS core ext
002D34r 3                       ; """https://forth-standard.org/standard/core/Zerone"""
002D34r 3               
002D34r 3               xt_zero_unequal:
002D34r 3  20 rr rr                     jsr underflow_1
002D37r 3               
002D37r 3  A0 00                        ldy #0          ; default false
002D39r 3               
002D39r 3  B5 00                        lda 0,x
002D3Br 3  15 01                        ora 1,x
002D3Dr 3  F0 01                        beq @got_zero
002D3Fr 3               
002D3Fr 3  88                           dey
002D40r 3               @got_zero:
002D40r 3  98                           tya
002D41r 3  95 00                        sta 0,x
002D43r 3  95 01                        sta 1,x
002D45r 3               
002D45r 3  60           z_zero_unequal: rts
002D46r 3               
002D46r 3               
002D46r 3               
002D46r 3               ; ==========================================================
002D46r 3               ; EDITOR words
002D46r 3               
002D46r 3               ; This routine is used by both enter-screen and erase-screen
002D46r 3               ; to get a buffer for the given screen number and set SCR to
002D46r 3               ; the given screen number.  This word is not in the dictionary.
002D46r 3               xt_editor_screen_helper:
002D46r 3  20 rr rr                     jsr xt_dup
002D49r 3  20 rr rr                     jsr xt_scr
002D4Cr 3  20 rr rr                     jsr xt_store
002D4Fr 3  20 rr rr                     jsr xt_buffer
002D52r 3               z_editor_screen_helper:
002D52r 3  60                           rts
002D53r 3               
002D53r 3               
002D53r 3               ; ## EDITOR_ENTER_SCREEN ( scr# -- ) "Enter all lines for given screen"
002D53r 3               ; ## "enter-screen"  auto  Tali Editor
002D53r 3               
002D53r 3               xt_editor_enter_screen:
002D53r 3                               ; Set the variable SCR and get a buffer for the
002D53r 3                               ; given screen number.
002D53r 3  20 rr rr                     jsr xt_editor_screen_helper
002D56r 3               
002D56r 3                               ; Drop the buffer address.
002D56r 3  20 rr rr                     jsr xt_drop
002D59r 3               
002D59r 3                               ; Overwrite the lines one at a time.
002D59r 3  64 rr                        stz editor1
002D5Br 3               @prompt_loop:
002D5Br 3                               ; Put the current line number on the stack.
002D5Br 3  CA                           dex
002D5Cr 3  CA                           dex
002D5Dr 3  A5 rr                        lda editor1
002D5Fr 3  95 00                        sta 0,x
002D61r 3  74 01                        stz 1,x
002D63r 3               
002D63r 3                               ; Use the O word to prompt for overwrite.
002D63r 3  20 rr rr                     jsr xt_editor_o
002D66r 3               
002D66r 3                               ; Move on to the next line.
002D66r 3  E6 rr                        inc editor1
002D68r 3  A9 10                        lda #16
002D6Ar 3  C5 rr                        cmp editor1
002D6Cr 3  D0 ED                        bne @prompt_loop
002D6Er 3               
002D6Er 3               z_editor_enter_screen:
002D6Er 3  60                           rts
002D6Fr 3               
002D6Fr 3               
002D6Fr 3               
002D6Fr 3               ; ## EDITOR_ERASE_SCREEN ( scr# -- ) "Erase all lines for given screen"
002D6Fr 3               ; ## "erase-screen"  tested  Tali Editor
002D6Fr 3               xt_editor_erase_screen:
002D6Fr 3                               ; Set the variable SCR and get a buffer for the
002D6Fr 3                               ; given screen number.
002D6Fr 3  20 rr rr                     jsr xt_editor_screen_helper
002D72r 3               
002D72r 3                               ; Put 1024 (chars/screen) on stack.
002D72r 3  CA                           dex
002D73r 3  CA                           dex
002D74r 3  74 00                        stz 0,x
002D76r 3  A9 04                        lda #4          ; 4 in MSB makes 1024 ($400).
002D78r 3  95 01                        sta 1,x
002D7Ar 3               
002D7Ar 3                               ; Erase the entire block (fill with spaces).
002D7Ar 3  20 rr rr                     jsr xt_blank
002D7Dr 3               
002D7Dr 3                               ; Mark buffer as updated.
002D7Dr 3  20 rr rr                     jsr xt_update
002D80r 3               
002D80r 3               z_editor_erase_screen:
002D80r 3  60                           rts
002D81r 3               
002D81r 3               
002D81r 3               ; ## EDITOR_EL ( line# -- ) "Erase the given line number"
002D81r 3               ; ## "el"  tested  Tali Editor
002D81r 3               xt_editor_el:
002D81r 3                               ; Turn the line number into buffer offset.
002D81r 3                               ; This also loads the block into the buffer if it's
002D81r 3                               ; not there for some reason.
002D81r 3  20 rr rr                     jsr xt_editor_line
002D84r 3               
002D84r 3                               ; Put 64 (# of chars/line) on the stack.
002D84r 3  CA                           dex
002D85r 3  CA                           dex
002D86r 3  A9 40                        lda #64
002D88r 3  95 00                        sta 0,x
002D8Ar 3  74 01                        stz 1,x
002D8Cr 3               
002D8Cr 3                               ; Fill with spaces.
002D8Cr 3  20 rr rr                     jsr xt_blank
002D8Fr 3               
002D8Fr 3                               ; Mark buffer as updated.
002D8Fr 3  20 rr rr                     jsr xt_update
002D92r 3               
002D92r 3  60           z_editor_el:    rts
002D93r 3               
002D93r 3               
002D93r 3               ; ## EDITOR_L ( -- ) "List the current screen"
002D93r 3               ; ## "l"  tested  Tali Editor
002D93r 3               
002D93r 3               xt_editor_l:
002D93r 3                               ; Load the current screen
002D93r 3  CA                           dex             ; Put SCR on the stack.
002D94r 3  CA                           dex
002D95r 3  A0 02                        ldy #scr_offset
002D97r 3  B1 rr                        lda (up),y
002D99r 3  95 00                        sta 0,x
002D9Br 3  C8                           iny
002D9Cr 3  B1 rr                        lda (up),y
002D9Er 3  95 01                        sta 1,x
002DA0r 3  20 rr rr                     jsr xt_block    ; Get the current screen.
002DA3r 3               
002DA3r 3  20 rr rr                     jsr xt_cr
002DA6r 3               
002DA6r 3                               ; Print the screen number.
002DA6r 3                               ; We're using sliteral, so we need to set up the
002DA6r 3                               ; appropriate data structure (see sliteral)
002DA6r 3  80 08                        bra @after_screen_msg
002DA8r 3               
002DA8r 3               @screen_msg:
002DA8r 3  53 63 72 65                  .byte "Screen #"
002DACr 3  65 6E 20 23  
002DB0r 3               
002DB0r 3               @after_screen_msg:
002DB0r 3  20 rr rr                     jsr sliteral_runtime
002DB3r 3  rr rr 08 00                  .word @screen_msg, @after_screen_msg-@screen_msg
002DB7r 3               
002DB7r 3  20 rr rr                     jsr xt_type
002DBAr 3               
002DBAr 3                               ; Put the screen number and printed size for u.r on the stack.
002DBAr 3  20 rr rr                     jsr xt_scr
002DBDr 3  20 rr rr                     jsr xt_fetch
002DC0r 3  CA                           dex
002DC1r 3  CA                           dex
002DC2r 3  A9 04                        lda #4          ; four spaces
002DC4r 3  95 00                        sta 0,x
002DC6r 3  74 01                        stz 1,x
002DC8r 3  20 rr rr                     jsr xt_u_dot_r
002DCBr 3               
002DCBr 3                               ; The address of the buffer is currently on the stack.
002DCBr 3                               ; Print 64 chars at a time. TYPE uses tmp1, so we'll
002DCBr 3                               ; keep track of the line number in tmp3.
002DCBr 3  64 rr                        stz tmp3
002DCDr 3               
002DCDr 3               @line_loop:
002DCDr 3  20 rr rr                     jsr xt_cr
002DD0r 3               
002DD0r 3                               ; Print the line number (2-space fixed width)
002DD0r 3  CA                           dex
002DD1r 3  CA                           dex
002DD2r 3  CA                           dex
002DD3r 3  CA                           dex
002DD4r 3  74 03                        stz 3,x
002DD6r 3  A5 rr                        lda tmp3
002DD8r 3  95 02                        sta 2,x
002DDAr 3  74 01                        stz 1,x
002DDCr 3  A9 02                        lda #2
002DDEr 3  95 00                        sta 0,x
002DE0r 3  20 rr rr                     jsr xt_u_dot_r
002DE3r 3  20 rr rr                     jsr xt_space
002DE6r 3               
002DE6r 3                               ; Print one line using the address on the stack.
002DE6r 3  20 rr rr                     jsr xt_dup
002DE9r 3  CA                           dex
002DEAr 3  CA                           dex
002DEBr 3  A9 40                        lda #64
002DEDr 3  95 00                        sta 0,x
002DEFr 3  74 01                        stz 1,x
002DF1r 3  20 rr rr                     jsr xt_type
002DF4r 3               
002DF4r 3                               ; Add 64 to the address on the stack to move to the next line.
002DF4r 3  18                           clc
002DF5r 3  A9 40                        lda #64
002DF7r 3  75 00                        adc 0,x
002DF9r 3  95 00                        sta 0,x
002DFBr 3  B5 01                        lda 1,x
002DFDr 3  69 00                        adc #0      ; Add carry
002DFFr 3  95 01                        sta 1,x
002E01r 3               
002E01r 3                               ; Increment the line number (held in tmp3)
002E01r 3  E6 rr                        inc tmp3
002E03r 3               
002E03r 3                               ; See if we are done.
002E03r 3  A5 rr                        lda tmp3
002E05r 3  C9 10                        cmp #16
002E07r 3  D0 C4                        bne @line_loop
002E09r 3               
002E09r 3  20 rr rr                     jsr xt_cr
002E0Cr 3                               ; Drop the address on the stack.
002E0Cr 3  E8                           inx
002E0Dr 3  E8                           inx
002E0Er 3               
002E0Er 3  60           z_editor_l:            rts
002E0Fr 3               
002E0Fr 3               
002E0Fr 3               
002E0Fr 3               ; ## EDITOR_LINE ( line# -- c-addr ) "Turn a line number into address in current screen"
002E0Fr 3               ; ## "line"  tested  Tali Editor
002E0Fr 3               
002E0Fr 3               xt_editor_line:
002E0Fr 3  20 rr rr                     jsr underflow_1
002E12r 3               
002E12r 3                               ; Multiply the TOS by 64 (chars/line) to compute offset.
002E12r 3  A0 06                        ldy #6          ; *64 is same as left shift 6 times.
002E14r 3               @shift_tos_left:
002E14r 3  16 00                        asl 0,x         ; Shift TOS to the left
002E16r 3  36 01                        rol 1,x         ; ROL brings MSb from lower byte.
002E18r 3  88                           dey
002E19r 3  D0 F9                        bne @shift_tos_left
002E1Br 3                               ; Load the current screen into a buffer
002E1Br 3                               ; and get the buffer address
002E1Br 3  20 rr rr                     jsr xt_scr
002E1Er 3  20 rr rr                     jsr xt_fetch
002E21r 3  20 rr rr                     jsr xt_block
002E24r 3               
002E24r 3                               ; Add the offset to the buffer base address.
002E24r 3  20 rr rr                     jsr xt_plus
002E27r 3               
002E27r 3  60           z_editor_line:  rts
002E28r 3               
002E28r 3               
002E28r 3               
002E28r 3               ; ## EDITOR_O ( line# -- ) "Overwrite the given line"
002E28r 3               ; ## "o"  tested  Tali Editor
002E28r 3               xt_editor_o:
002E28r 3                               ; Print prompt
002E28r 3  20 rr rr                     jsr xt_cr
002E2Br 3  20 rr rr                     jsr xt_dup
002E2Er 3  20 rr rr                     jsr xt_two
002E31r 3  20 rr rr                     jsr xt_u_dot_r
002E34r 3  20 rr rr                     jsr xt_space
002E37r 3  A9 2A                        lda #42         ; ASCII for *
002E39r 3  20 rr rr                     jsr emit_a
002E3Cr 3  20 rr rr                     jsr xt_space
002E3Fr 3               
002E3Fr 3                               ; Accept new input (directly into the buffer)
002E3Fr 3  20 rr rr                     jsr xt_editor_line
002E42r 3  20 rr rr                     jsr xt_dup      ; Save a copy of the line address for later.
002E45r 3  CA                           dex
002E46r 3  CA                           dex
002E47r 3  A9 40                        lda #64         ; chars/line
002E49r 3  95 00                        sta 0,x
002E4Br 3  74 01                        stz 1,x
002E4Dr 3  20 rr rr                     jsr xt_accept
002E50r 3               
002E50r 3                               ; Fill the rest with spaces.
002E50r 3                               ; Stack is currently ( line_address numchars_from_accept )
002E50r 3  20 rr rr                     jsr xt_dup
002E53r 3  20 rr rr                     jsr xt_not_rote ; -rot
002E56r 3  20 rr rr                     jsr xt_plus
002E59r 3  CA                           dex
002E5Ar 3  CA                           dex
002E5Br 3  A9 40                        lda #64         ; chars/line
002E5Dr 3  95 00                        sta 0,x
002E5Fr 3  74 01                        stz 1,x
002E61r 3  20 rr rr                     jsr xt_rot
002E64r 3  20 rr rr                     jsr xt_minus
002E67r 3  20 rr rr                     jsr xt_blank
002E6Ar 3               
002E6Ar 3                               ; Mark buffer as updated.
002E6Ar 3  20 rr rr                     jsr xt_update
002E6Dr 3               
002E6Dr 3  60           z_editor_o:     rts
002E6Er 3               
002E6Er 3               .ifdef LCD_BUF
002E6Er 3               xt_haslcd:
002E6Er 3  CA                   dex
002E6Fr 3  CA                   dex
002E70r 3  A9 rr                lda #<has_lcd
002E72r 3  95 00                sta 0, x
002E74r 3  A9 rr                lda #>has_lcd
002E76r 3  95 01                sta 1, x
002E78r 3               z_haslcd:
002E78r 3  60                   rts
002E79r 3               
002E79r 3               
002E79r 3               ; ## LCDPUT ( s -- ) "Print single character to LCD"
002E79r 3               ; ## "lcdput" coded Custom
002E79r 3               xt_lcdput:
002E79r 3  20 rr rr                     jsr underflow_1
002E7Cr 3               
002E7Cr 3  B5 00                        lda 0,x
002E7Er 3                       .ifdef lcd_print
002E7Er 3  20 rr rr                     jsr lcd_print
002E81r 3                       .endif
002E81r 3  E8                           inx
002E82r 3  E8                           inx
002E83r 3  60           z_lcdput: rts
002E84r 3               
002E84r 3               
002E84r 3               ; ## LCDPRINT ( addr u -- ) "Print string to LCD"
002E84r 3               ; ## "lcdprint"  coded Custom
002E84r 3               
002E84r 3               xt_lcdprint:
002E84r 3  20 rr rr                     jsr underflow_2
002E87r 3               
002E87r 3                               ; Save the starting address into tmp1
002E87r 3  B5 02                        lda 2,x
002E89r 3  85 rr                        sta tmp1
002E8Br 3  B5 03                        lda 3,x
002E8Dr 3  85 rr                        sta tmp1+1
002E8Fr 3               @loop:
002E8Fr 3                               ; done if length is zero
002E8Fr 3  B5 00                        lda 0,x
002E91r 3  15 01                        ora 1,x
002E93r 3  F0 15                        beq @done
002E95r 3               
002E95r 3                               ; Send the current character
002E95r 3  B2 rr                        lda (tmp1)
002E97r 3                       .ifdef lcd_print
002E97r 3  20 rr rr                     jsr lcd_print      ; avoids stack foolery
002E9Ar 3                       .endif
002E9Ar 3                               ; Move the address along (in tmp1)
002E9Ar 3  E6 rr                        inc tmp1
002E9Cr 3  D0 02                        bne @1
002E9Er 3  E6 rr                        inc tmp1+1
002EA0r 3               @1:
002EA0r 3                               ; Reduce the count (on the data stack)
002EA0r 3  B5 00                        lda 0,x
002EA2r 3  D0 02                        bne @2
002EA4r 3  D6 01                        dec 1,x
002EA6r 3               @2:
002EA6r 3  D6 00                        dec 0,x
002EA8r 3               
002EA8r 3  80 E5                        bra @loop
002EAAr 3               @done:
002EAAr 3  E8                           inx
002EABr 3  E8                           inx
002EACr 3  E8                           inx
002EADr 3  E8                           inx
002EAEr 3               
002EAEr 3  60           z_lcdprint:         rts
002EAFr 3               
002EAFr 3               .endif
002EAFr 3               
002EAFr 3               ; ## CLS ( -- ) "clea VGA screen"
002EAFr 3               ; ## "cls" coded Custom
002EAFr 3               xt_cls:
002EAFr 3                       .ifdef vga_clear
002EAFr 3                               jsr vga_clear
002EAFr 3                       .endif
002EAFr 3               
002EAFr 3  60           z_cls: rts
002EB0r 3               
002EB0r 3               
002EB0r 3               ; ## SPI_INIT ( -- ) "Init SPI system"
002EB0r 3               ; ## "spi_init" coded Custom
002EB0r 3               xt_spi_init:
002EB0r 3               .ifdef VIA1_BASE
002EB0r 3  20 rr rr                     jsr spi_init
002EB3r 3               .endif
002EB3r 3  60           z_spi_init: rts
002EB4r 3               
002EB4r 3               
002EB4r 3               ; ## SPI_CLK_TOGGLE ( -- ) "Toggle SPI clock"
002EB4r 3               ; ## "spi_clk_toggle" coded Custom
002EB4r 3               xt_spi_clk_toggle:
002EB4r 3               .ifdef VIA1_BASE
002EB4r 3  20 rr rr                     jsr spi_clk_toggle
002EB7r 3               .endif
002EB7r 3  60           z_spi_clk_toggle: rts
002EB8r 3               
002EB8r 3               ; ## SPI_SELECT ( s -- ) "Select SPI slave"
002EB8r 3               ; ## "spi_select" coded Custom
002EB8r 3               xt_spi_select:
002EB8r 3               .ifdef VIA1_BASE
002EB8r 3  20 rr rr                     jsr underflow_1
002EBBr 3               
002EBBr 3  B5 00                        lda 0,x
002EBDr 3               
002EBDr 3  20 rr rr                     jsr spi_select
002EC0r 3               
002EC0r 3  E8                           inx
002EC1r 3  E8                           inx
002EC2r 3               .endif
002EC2r 3  60           z_spi_select: rts
002EC3r 3               
002EC3r 3               ; ## SPI_TRANSCEIVE ( s -- u ) "Send and receive spi data"
002EC3r 3               ; ## "spi_transceive" coded Custom
002EC3r 3               xt_spi_transceive:
002EC3r 3               .ifdef VIA1_BASE
002EC3r 3  20 rr rr                     jsr underflow_1
002EC6r 3               
002EC6r 3  B5 00                        lda 0,x
002EC8r 3               
002EC8r 3  20 rr rr                     jsr spi_transceive
002ECBr 3               
002ECBr 3  95 00                        sta 0,x         ; put return value in TOS
002ECDr 3  74 01                        stz 1,X         ;reset value there
002ECFr 3               .endif
002ECFr 3  60           z_spi_transceive: rts
002ED0r 3               
002ED0r 3               ; ## SD_INIT ( s -- u ) "Send and receive spi data"
002ED0r 3               ; ## "sd_init" coded Custom
002ED0r 3               xt_sd_init:
002ED0r 3               .ifdef SD
002ED0r 3                               jsr underflow_1
002ED0r 3               
002ED0r 3                               lda 0,x
002ED0r 3                               jsr sd_init
002ED0r 3                               beq @ok
002ED0r 3                               pha
002ED0r 3                               printascii sd_init_error_message
002ED0r 3                               pla
002ED0r 3               @ok:
002ED0r 3                               sta 0,x         ; put return value in TOS
002ED0r 3                               stz 1,X         ;reset value there
002ED0r 3               .endif
002ED0r 3  60           z_sd_init: rts
002ED1r 3               
002ED1r 3               ; ## SD_READSECTOR ( addr d -- u ) "Read SD sector"
002ED1r 3               ; ## "sd_readsector" coded Custom
002ED1r 3               xt_sd_readsector:
002ED1r 3               
002ED1r 3               .ifdef SD
002ED1r 3                               jsr underflow_2
002ED1r 3                               ; get and save sector number (32 bit number, double)
002ED1r 3                               ; most significant part is TOS
002ED1r 3                               lda 0, x
002ED1r 3                               sta IO_SECTOR + 2
002ED1r 3                               lda 1, x
002ED1r 3                               sta IO_SECTOR + 3
002ED1r 3                               ; least significant part is NOS
002ED1r 3                               lda 2, x
002ED1r 3                               sta IO_SECTOR + 0
002ED1r 3                               lda 3, x
002ED1r 3                               sta IO_SECTOR + 1
002ED1r 3                               lda #1
002ED1r 3                               sta SD_CRC
002ED1r 3               
002ED1r 3                               jsr sd_readsector
002ED1r 3                               sta 0,x         ; put return value in TOS
002ED1r 3                               stz 1,X         ;reset value there
002ED1r 3               
002ED1r 3                               inx
002ED1r 3                               inx
002ED1r 3               .endif
002ED1r 3  60           z_sd_readsector: rts
002ED2r 3               
002ED2r 3               
002ED2r 3               ; ## time ( -- addr ) "get time storage address"
002ED2r 3               ; ## "time" coded Custom
002ED2r 3               xt_time:
002ED2r 3                       .ifdef time
002ED2r 3  A9 rr                lda #time
002ED4r 3                       .else
002ED4r 3                       lda #0
002ED4r 3                       .endif
002ED4r 3  CA                   dex
002ED5r 3  CA                   dex
002ED6r 3  95 00                sta 0,x
002ED8r 3  74 01                stz 1,x
002EDAr 3               
002EDAr 3               
002EDAr 3  60           z_time: rts
002EDBr 3               
002EDBr 3               
002EDBr 3               xt_cf_info:
002EDBr 3               .ifdef CF_ADDRESS
002EDBr 3  20 rr rr             jsr cf_info
002EDEr 3  20 rr rr             jsr xt_cr
002EE1r 3  20 rr rr             jsr cf_print_id
002EE4r 3  20 rr rr             jsr cf_print_capacity
002EE7r 3               .endif
002EE7r 3               z_cf_info:
002EE7r 3  60                   rts
002EE8r 3               
002EE8r 3               cf_print_capacity:
002EE8r 3  5A               phy
002EE9r 3               
002EE9r 3  20 rr rr         jsr xt_cr
002EECr 3               
002EECr 3  A0 78            ldy #120
002EEEr 3                   ; print lba size
002EEEr 3  B1 rr            lda (io_buffer_ptr), y
002EF0r 3  8D rr rr         sta LBA_SIZE
002EF3r 3  C8               iny
002EF4r 3  B1 rr            lda (io_buffer_ptr), y
002EF6r 3  8D rr rr         sta LBA_SIZE + 1
002EF9r 3               
002EF9r 3  C8               iny
002EFAr 3  B1 rr            lda (io_buffer_ptr), y
002EFCr 3  8D rr rr         sta LBA_SIZE + 2
002EFFr 3               
002EFFr 3  C8               iny
002F00r 3  B1 rr            lda (io_buffer_ptr), y
002F02r 3  8D rr rr         sta LBA_SIZE + 3
002F05r 3               
002F05r 3  A0 09            ldy #9
002F07r 3               @loop:
002F07r 3  0E rr rr 2E      asl32 LBA_SIZE
002F0Br 3  rr rr 2E rr  
002F0Fr 3  rr 2E rr rr  
002F13r 3  88               dey
002F14r 3  D0 F1            bne @loop
002F16r 3               
002F16r 3  CA               dex
002F17r 3  CA               dex
002F18r 3  CA               dex
002F19r 3  CA               dex
002F1Ar 3               
002F1Ar 3  AD rr rr         lda LBA_SIZE
002F1Dr 3  95 02            sta 2, x
002F1Fr 3  AD rr rr         lda LBA_SIZE + 1
002F22r 3  95 03            sta 3, x
002F24r 3  AD rr rr         lda LBA_SIZE + 2
002F27r 3  95 00            sta 0, x
002F29r 3  AD rr rr         lda LBA_SIZE + 3
002F2Cr 3  95 01            sta 1, x
002F2Er 3               
002F2Er 3  20 rr rr         jsr xt_ud_dot
002F31r 3               
002F31r 3  CA               dex
002F32r 3  CA               dex
002F33r 3  CA               dex
002F34r 3  CA               dex
002F35r 3  A9 06            lda #6
002F37r 3  95 00            sta 0, x
002F39r 3  74 01            stz 1, x
002F3Br 3  A9 rr            lda #<bytes_msg
002F3Dr 3  95 02            sta 2, x
002F3Fr 3  A9 rr            lda #>bytes_msg
002F41r 3  95 03            sta 3, x
002F43r 3  20 rr rr         jsr xt_type
002F46r 3  20 rr rr         jsr xt_cr
002F49r 3  7A               ply
002F4Ar 3  60               rts
002F4Br 3               
002F4Br 3               
002F4Br 3               cf_info:
002F4Br 3  20 rr rr         jsr cf_init
002F4Er 3  20 rr rr         jsr cf_wait
002F51r 3  A9 EC            lda #$EC
002F53r 3  8D D7 FF         sta CF_ADDRESS + 7
002F56r 3  A9 rr            lda #<IO_BUFFER
002F58r 3  85 rr            sta io_buffer_ptr
002F5Ar 3  A9 rr            lda #>IO_BUFFER
002F5Cr 3  85 rr            sta io_buffer_ptr + 1
002F5Er 3  20 rr rr         jsr cf_read
002F61r 3  60               rts
002F62r 3               
002F62r 3               cf_print_id:
002F62r 3                   ; print model number
002F62r 3  5A               phy
002F63r 3  A0 37            ldy #55
002F65r 3               @loop:
002F65r 3  B1 rr            lda (io_buffer_ptr), y
002F67r 3  20 rr rr         jsr kernel_putc
002F6Ar 3  88               dey
002F6Br 3  B1 rr            lda (io_buffer_ptr), y
002F6Dr 3  20 rr rr         jsr kernel_putc
002F70r 3  C8               iny
002F71r 3  C8               iny
002F72r 3  C8               iny
002F73r 3  C0 5F            cpy #(40+55)
002F75r 3  90 EE            bcc @loop
002F77r 3  7A               ply
002F78r 3  60               rts
002F79r 3               
002F79r 3               
002F79r 3               xt_io_readblock:
002F79r 3               .ifdef io_read_sector_address
002F79r 3                       ; block-read ( addr blk# -- )
002F79r 3  B5 02                lda 2, x
002F7Br 3  85 rr                sta io_buffer_ptr
002F7Dr 3  B5 03                lda 3, x
002F7Fr 3  85 rr                sta io_buffer_ptr + 1
002F81r 3  B5 00                lda 0, x
002F83r 3  8D rr rr             sta IO_SECTOR
002F86r 3  B5 01                lda 1, x
002F88r 3  8D rr rr             sta IO_SECTOR + 1
002F8Br 3  9C rr rr             stz IO_SECTOR + 2
002F8Er 3  9C rr rr             stz IO_SECTOR + 3
002F91r 3               
002F91r 3  0E rr rr             asl IO_SECTOR                   ; multiply by two to get first sector number
002F94r 3  2E rr rr             rol IO_SECTOR + 1
002F97r 3  2E rr rr             rol IO_SECTOR + 2
002F9Ar 3               
002F9Ar 3                       ; lda io_buffer_ptr
002F9Ar 3                       ; sta 0, x
002F9Ar 3                       ; lda io_buffer_ptr + 1
002F9Ar 3                       ; sta 1, x
002F9Ar 3                       ; jsr xt_dot
002F9Ar 3               
002F9Ar 3  20 rr rr             jsr io_read_sector
002F9Dr 3  EE rr rr D0          inc32 IO_SECTOR
002FA1r 3  0D EE rr rr  
002FA5r 3  D0 08 EE rr  
002FAFr 3  E6 rr                inc io_buffer_ptr + 1
002FB1r 3  E6 rr                inc io_buffer_ptr + 1
002FB3r 3  20 rr rr             jsr io_read_sector
002FB6r 3                       ; lda io_buffer_ptr
002FB6r 3                       ; sta 0, x
002FB6r 3                       ; lda io_buffer_ptr + 1
002FB6r 3                       ; sta 1, x
002FB6r 3                       ; jsr xt_dot
002FB6r 3               
002FB6r 3  E8                   inx
002FB7r 3  E8                   inx
002FB8r 3               
002FB8r 3               .endif
002FB8r 3               z_io_readblock:
002FB8r 3  60                   rts
002FB9r 3               
002FB9r 3               xt_io_writeblock:
002FB9r 3               .ifdef io_read_sector_address
002FB9r 3                       ; block-write ( addr blk# -- )
002FB9r 3  B5 02                lda 2, x
002FBBr 3  85 rr                sta io_buffer_ptr
002FBDr 3  B5 03                lda 3, x
002FBFr 3  85 rr                sta io_buffer_ptr + 1
002FC1r 3  B5 00                lda 0, x
002FC3r 3  8D rr rr             sta IO_SECTOR
002FC6r 3  B5 01                lda 1, x
002FC8r 3  8D rr rr             sta IO_SECTOR + 1
002FCBr 3  9C rr rr             stz IO_SECTOR + 2
002FCEr 3  9C rr rr             stz IO_SECTOR + 3
002FD1r 3               
002FD1r 3  0E rr rr             asl IO_SECTOR                   ; multiply by two to get first sector number
002FD4r 3  2E rr rr             rol IO_SECTOR + 1
002FD7r 3  2E rr rr             rol IO_SECTOR + 2
002FDAr 3               
002FDAr 3  20 rr rr             jsr io_write_sector
002FDDr 3  EE rr rr D0          inc32 IO_SECTOR
002FE1r 3  0D EE rr rr  
002FE5r 3  D0 08 EE rr  
002FEFr 3  E6 rr                inc io_buffer_ptr + 1
002FF1r 3  E6 rr                inc io_buffer_ptr + 1
002FF3r 3  20 rr rr             jsr io_write_sector
002FF6r 3               
002FF6r 3               
002FF6r 3                       ; inc io_buffer_ptr + 1           ; jump two pages forward
002FF6r 3                       ; inc io_buffer_ptr + 1
002FF6r 3                       ; jsr io_write_sector
002FF6r 3  E8                   inx
002FF7r 3  E8                   inx
002FF8r 3                       ; inx
002FF8r 3                       ; inx
002FF8r 3               .endif
002FF8r 3               z_io_writeblock:
002FF8r 3  60                   rts
002FF9r 3               ; END
002FF9r 3               
002FF9r 3               
002FF9r 2                   .include "headers.s"          ; Headers of native words
002FF9r 3               ; Dictionary Headers for Tali Forth 2
002FF9r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
002FF9r 3               ; First version: 05. Dec 2016 (Liara Forth)
002FF9r 3               ; This version: 29. Dec 2018
002FF9r 3               
002FF9r 3               ; Dictionary headers are kept separately from the code, which allows various
002FF9r 3               ; tricks in the code. We roughly follow the Gforth terminology: The Execution
002FF9r 3               ; Token (xt) is the address of the first byte of a word's code that can be, uh,
002FF9r 3               ; executed; the Name Token (nt) is a pointer to the beginning of the word's
002FF9r 3               ; header in the Dictionary. There the link to the next word in the Dictionary
002FF9r 3               ; is always one cell down from the current word's own nt. In the code itself,
002FF9r 3               ; we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.
002FF9r 3               
002FF9r 3               ; This gives us the following header structure:
002FF9r 3               
002FF9r 3               ;              8 bit     8 bit
002FF9r 3               ;               LSB       MSB
002FF9r 3               ; nt_word ->  +--------+--------+
002FF9r 3               ;          +0 | Length | Status |
002FF9r 3               ;             +--------+--------+
002FF9r 3               ;          +2 | Next Header     | -> nt_next_word
002FF9r 3               ;             +-----------------+
002FF9r 3               ;          +4 | Start of Code   | -> xt_word
002FF9r 3               ;             +-----------------+
002FF9r 3               ;          +6 | End of Code     | -> z_word
002FF9r 3               ;             +--------+--------+
002FF9r 3               ;          +8 | Name   |        |
002FF9r 3               ;             +--------+--------+
002FF9r 3               ;             |        |        |
002FF9r 3               ;             +--------+--------+
002FF9r 3               ;             |        |  ...   | (name string does not end with a zero)
002FF9r 3               ;          +n +--------+--------+
002FF9r 3               
002FF9r 3               ; The Status Byte is created by adding the flags defined in definitions.asm,
002FF9r 3               ; which are:
002FF9r 3               
002FF9r 3               ;       CO - Compile Only
002FF9r 3               ;       IM - Immediate Word
002FF9r 3               ;       NN - Never Native Compile (must always be called by JSR)
002FF9r 3               ;       AN - Always Native Compile (may not be called by JSR)
002FF9r 3               ;       UF - Contains underflow check
002FF9r 3               ;       HC - Has CFA (words created by CREATE and DOES> only)
002FF9r 3               
002FF9r 3               ; Note there are currently two bits unused.
002FF9r 3               
002FF9r 3               ; By default, all existing words can be natively compiled (compiled inline) or
002FF9r 3               ; as a subroutine jump target; the system decides which variant to use based on
002FF9r 3               ; a threshold the user can set. By default, all user-created words are flagged
002FF9r 3               ; never-native. The user can override this by using the always-native word
002FF9r 3               ; just after defining their new word.  The NN flag forbids native compiling,
002FF9r 3               ; the AN flag forces it.
002FF9r 3               
002FF9r 3               ; The last word (top word in code) is always BYE. It is marked as the last word
002FF9r 3               ; by its value of 0000 in its Next Header field. The words are sorted with the
002FF9r 3               ; more common ones first (further down in code) so they are found earlier.
002FF9r 3               ; Anything to do with output comes later (further up) because things will
002FF9r 3               ; always be slow if there is a human involved.
002FF9r 3               
002FF9r 3               ; The initial skeleton of this list was automatically generated by a script
002FF9r 3               ; in the tools folder and then sorted by hand.
002FF9r 3               
002FF9r 3               nt_bye:
002FF9r 3  03                   .byte 3         ; length of word strings
002FFAr 3  00                   .byte 0         ; status byte
002FFBr 3  00 00                .word 0000      ; next word in Dictionary, 0000 signals end
002FFDr 3  rr rr                .word xt_bye    ; start of code block (xt of this word)
002FFFr 3  rr rr                .word z_bye     ; end of code (RTS)
003001r 3  62 79 65             .byte "bye"     ; word name, always lower case, not zero-terminated
003004r 3               
003004r 3               
003004r 3               nt_cold:
003004r 3  04 00                .byte 4, 0
003006r 3  rr rr rr rr          .word nt_bye, xt_cold, z_cold
00300Ar 3  rr rr        
00300Cr 3  63 6F 6C 64          .byte "cold"
003010r 3               .ifdef LCD_BUF
003010r 3               nt_lcdput:
003010r 3  06 10                .byte 6, UF
003012r 3  rr rr rr rr          .word nt_cold, xt_lcdput, z_lcdput
003016r 3  rr rr        
003018r 3  6C 63 64 70          .byte "lcdput"
00301Cr 3  75 74        
00301Er 3               nt_haslcd:
00301Er 3  06 00                .byte 6, 0
003020r 3  rr rr rr rr          .word nt_lcdput, xt_haslcd, z_haslcd
003024r 3  rr rr        
003026r 3  68 61 73 6C          .byte "haslcd"
00302Ar 3  63 64        
00302Cr 3               nt_lcdprint:
00302Cr 3  08 10                .byte 8, UF
00302Er 3  rr rr rr rr          .word nt_haslcd, xt_lcdprint, z_lcdprint
003032r 3  rr rr        
003034r 3  6C 63 64 70          .byte "lcdprint"
003038r 3  72 69 6E 74  
00303Cr 3               .endif
00303Cr 3               nt_cls:
00303Cr 3  03 00                .byte 3, 0
00303Er 3               .ifdef LCD_BUF
00303Er 3  rr rr rr rr          .word nt_lcdprint, xt_cls, z_cls
003042r 3  rr rr        
003044r 3               .else
003044r 3                       .word nt_cold, xt_cls, z_cls
003044r 3               .endif
003044r 3  63 6C 73             .byte "cls"
003047r 3               
003047r 3               .ifdef VIA1_BASE
003047r 3               nt_spi_init:
003047r 3  08 00                .byte 8, 0
003049r 3  rr rr rr rr          .word nt_cls, xt_spi_init, z_spi_init
00304Dr 3  rr rr        
00304Fr 3  73 70 69 5F          .byte "spi_init"
003053r 3  69 6E 69 74  
003057r 3               
003057r 3               
003057r 3               nt_spi_clk_toggle:
003057r 3  0E 00                .byte 14, 0
003059r 3  rr rr rr rr          .word nt_spi_init, xt_spi_clk_toggle, z_spi_clk_toggle
00305Dr 3  rr rr        
00305Fr 3  73 70 69 5F          .byte "spi_clk_toggle"
003063r 3  63 6C 6B 5F  
003067r 3  74 6F 67 67  
00306Dr 3               
00306Dr 3               nt_spi_select:
00306Dr 3  0A 00                .byte 10, 0
00306Fr 3  rr rr rr rr          .word nt_spi_clk_toggle, xt_spi_select, z_spi_select
003073r 3  rr rr        
003075r 3  73 70 69 5F          .byte "spi_select"
003079r 3  73 65 6C 65  
00307Dr 3  63 74        
00307Fr 3               
00307Fr 3               nt_spi_transceive:
00307Fr 3  0E 00                .byte 14, 0
003081r 3  rr rr rr rr          .word nt_spi_select, xt_spi_transceive, z_spi_transceive
003085r 3  rr rr        
003087r 3  73 70 69 5F          .byte "spi_transceive"
00308Br 3  74 72 61 6E  
00308Fr 3  73 63 65 69  
003095r 3               .endif
003095r 3               
003095r 3               
003095r 3               .ifdef CF_ADDRESS
003095r 3               nt_cf_info:
003095r 3  04 00                .byte 4, 0
003097r 3                       .ifdef VIA1_BASE
003097r 3  rr rr rr rr          .word nt_spi_select, xt_cf_info, z_cf_info
00309Br 3  rr rr        
00309Dr 3                       .else
00309Dr 3                       .word nt_cls, xt_cf_info, z_cf_info
00309Dr 3                       .endif
00309Dr 3  69 6E 66 6F          .byte "info"
0030A1r 3               .endif
0030A1r 3               .ifdef io_read_sector_address
0030A1r 3               nt_io_readblock:
0030A1r 3  02 10                .byte 2, UF
0030A3r 3                       .ifdef CF_ADDRESS
0030A3r 3  rr rr rr rr          .word nt_cf_info, xt_io_readblock, z_io_readblock
0030A7r 3  rr rr        
0030A9r 3                       .elseif .def(VIA1_BASE)
0030A9r 3                       .word nt_spi_transceive, xt_io_readblock, z_io_readblock
0030A9r 3                       .else
0030A9r 3                       .word nt_cls, xt_io_readblock, z_io_readblock
0030A9r 3                       .endif
0030A9r 3  72 62                .byte "rb"
0030ABr 3               nt_io_writeblock:
0030ABr 3  02 10                .byte 2, UF
0030ADr 3  rr rr rr rr          .word nt_io_readblock, xt_io_writeblock, z_io_writeblock
0030B1r 3  rr rr        
0030B3r 3  77 62                .byte "wb"
0030B5r 3               .endif
0030B5r 3               nt_time:
0030B5r 3  04 00                .byte 4, 0
0030B7r 3               .ifdef io_read_sector_address
0030B7r 3  rr rr rr rr          .word nt_io_writeblock, xt_time, z_time
0030BBr 3  rr rr        
0030BDr 3               .elseif .def(CF_ADDRESS)
0030BDr 3                       .word nt_cf_info, xt_time, z_time
0030BDr 3               .elseif .def(VIA1_BASE)
0030BDr 3                       .word nt_spi_transceive, xt_time, z_time
0030BDr 3               .else
0030BDr 3                       .word nt_cls, xt_time, z_time
0030BDr 3               .endif
0030BDr 3  74 69 6D 65          .byte "time"
0030C1r 3               
0030C1r 3               nt_ed:                  ; ed6502
0030C1r 3  02 08                .byte 2, NN
0030C3r 3  rr rr rr rr          .word nt_time, xt_ed, z_ed
0030C7r 3  rr rr        
0030C9r 3  65 64                .byte "ed"
0030CBr 3               
0030CBr 3  03 08        nt_see: .byte 3, NN
0030CDr 3  rr rr rr rr          .word nt_ed, xt_see, z_see
0030D1r 3  rr rr        
0030D3r 3  73 65 65             .byte "see"
0030D6r 3               
0030D6r 3               nt_forth:
0030D6r 3  05 00                .byte 5, 0
0030D8r 3  rr rr rr rr          .word nt_see, xt_forth, z_forth
0030DCr 3  rr rr        
0030DEr 3  66 6F 72 74          .byte "forth"
0030E2r 3  68           
0030E3r 3               
0030E3r 3               nt_order:
0030E3r 3  05 00                .byte 5, 0
0030E5r 3  rr rr rr rr          .word nt_forth, xt_order, z_order
0030E9r 3  rr rr        
0030EBr 3  6F 72 64 65          .byte "order"
0030EFr 3  72           
0030F0r 3               
0030F0r 3               nt_to_order:
0030F0r 3  06 00                .byte 6, 0
0030F2r 3  rr rr rr rr          .word nt_order, xt_to_order, z_to_order
0030F6r 3  rr rr        
0030F8r 3  3E 6F 72 64          .byte ">order"
0030FCr 3  65 72        
0030FEr 3               
0030FEr 3               nt_previous:
0030FEr 3  08 00                .byte 8, 0
003100r 3  rr rr rr rr          .word nt_to_order, xt_previous, z_previous
003104r 3  rr rr        
003106r 3  70 72 65 76          .byte "previous"
00310Ar 3  69 6F 75 73  
00310Er 3               
00310Er 3               nt_also:
00310Er 3  04 00                .byte 4, 0
003110r 3  rr rr rr rr          .word nt_previous, xt_also, z_also
003114r 3  rr rr        
003116r 3  61 6C 73 6F          .byte "also"
00311Ar 3               
00311Ar 3               nt_only:
00311Ar 3  04 00                .byte 4, 0
00311Cr 3  rr rr rr rr          .word nt_also, xt_only, z_only
003120r 3  rr rr        
003122r 3  6F 6E 6C 79          .byte "only"
003126r 3               
003126r 3               nt_forth_wordlist:      ; shares code with ZERO
003126r 3  0E 00                .byte 14, 0
003128r 3  rr rr rr rr          .word nt_only, xt_forth_wordlist, z_forth_wordlist
00312Cr 3  rr rr        
00312Er 3  66 6F 72 74          .byte "forth-wordlist"
003132r 3  68 2D 77 6F  
003136r 3  72 64 6C 69  
00313Cr 3               
00313Cr 3               nt_editor_wordlist:     ; shares code with ONE
00313Cr 3  0F 00                .byte 15, 0
00313Er 3  rr rr rr rr          .word nt_forth_wordlist, xt_editor_wordlist, z_editor_wordlist
003142r 3  rr rr        
003144r 3  65 64 69 74          .byte "editor-wordlist"
003148r 3  6F 72 2D 77  
00314Cr 3  6F 72 64 6C  
003153r 3               
003153r 3               nt_assembler_wordlist:  ; shares code with TWO
003153r 3  12 00                .byte 18, 0
003155r 3  rr rr rr rr          .word nt_editor_wordlist, xt_assembler_wordlist, z_assembler_wordlist
003159r 3  rr rr        
00315Br 3  61 73 73 65          .byte "assembler-wordlist"
00315Fr 3  6D 62 6C 65  
003163r 3  72 2D 77 6F  
00316Dr 3               
00316Dr 3               nt_root_wordlist:
00316Dr 3  0D 00                .byte 13, 0
00316Fr 3  rr rr rr rr          .word nt_assembler_wordlist, xt_root_wordlist, z_root_wordlist
003173r 3  rr rr        
003175r 3  72 6F 6F 74          .byte "root-wordlist"
003179r 3  2D 77 6F 72  
00317Dr 3  64 6C 69 73  
003182r 3               
003182r 3               nt_get_order:
003182r 3  09 00                .byte 9, 0
003184r 3  rr rr rr rr          .word nt_root_wordlist, xt_get_order, z_get_order
003188r 3  rr rr        
00318Ar 3  67 65 74 2D          .byte "get-order"
00318Er 3  6F 72 64 65  
003192r 3  72           
003193r 3               
003193r 3               nt_set_order:
003193r 3  09 00                .byte 9, 0
003195r 3  rr rr rr rr          .word nt_get_order, xt_set_order, z_set_order
003199r 3  rr rr        
00319Br 3  73 65 74 2D          .byte "set-order"
00319Fr 3  6F 72 64 65  
0031A3r 3  72           
0031A4r 3               
0031A4r 3               nt_get_current:
0031A4r 3  0B 00                .byte 11, 0
0031A6r 3  rr rr rr rr          .word nt_set_order, xt_get_current, z_get_current
0031AAr 3  rr rr        
0031ACr 3  67 65 74 2D          .byte "get-current"
0031B0r 3  63 75 72 72  
0031B4r 3  65 6E 74     
0031B7r 3               
0031B7r 3               nt_set_current:
0031B7r 3  0B 10                .byte 11, UF
0031B9r 3  rr rr rr rr          .word nt_get_current, xt_set_current, z_set_current
0031BDr 3  rr rr        
0031BFr 3  73 65 74 2D          .byte "set-current"
0031C3r 3  63 75 72 72  
0031C7r 3  65 6E 74     
0031CAr 3               
0031CAr 3               nt_search_wordlist:
0031CAr 3  0F 10                .byte 15, UF
0031CCr 3  rr rr rr rr          .word nt_set_current, xt_search_wordlist, z_search_wordlist
0031D0r 3  rr rr        
0031D2r 3  73 65 61 72          .byte "search-wordlist"
0031D6r 3  63 68 2D 77  
0031DAr 3  6F 72 64 6C  
0031E1r 3               
0031E1r 3               nt_wordlist:
0031E1r 3  08 00                .byte 8, 0
0031E3r 3  rr rr rr rr          .word nt_search_wordlist, xt_wordlist, z_wordlist
0031E7r 3  rr rr        
0031E9r 3  77 6F 72 64          .byte "wordlist"
0031EDr 3  6C 69 73 74  
0031F1r 3               
0031F1r 3               nt_definitions:
0031F1r 3  0B 00                .byte 11, 0
0031F3r 3  rr rr rr rr          .word nt_wordlist, xt_definitions, z_definitions
0031F7r 3  rr rr        
0031F9r 3  64 65 66 69          .byte "definitions"
0031FDr 3  6E 69 74 69  
003201r 3  6F 6E 73     
003204r 3               
003204r 3               nt_block_ramdrive_init:
003204r 3  13 10                .byte 19, UF
003206r 3  rr rr rr rr          .word nt_definitions, xt_block_ramdrive_init, z_block_ramdrive_init
00320Ar 3  rr rr        
00320Cr 3  62 6C 6F 63          .byte "block-ramdrive-init"
003210r 3  6B 2D 72 61  
003214r 3  6D 64 72 69  
00321Fr 3               
00321Fr 3               nt_list:
00321Fr 3  04 10                .byte 4, UF
003221r 3  rr rr rr rr          .word nt_block_ramdrive_init, xt_list, z_list
003225r 3  rr rr        
003227r 3  6C 69 73 74          .byte "list"
00322Br 3               
00322Br 3               nt_thru:
00322Br 3  04 10                .byte 4, UF
00322Dr 3  rr rr rr rr          .word nt_list, xt_thru, z_thru
003231r 3  rr rr        
003233r 3  74 68 72 75          .byte "thru"
003237r 3               
003237r 3               nt_load:
003237r 3  04 10                .byte 4, UF
003239r 3  rr rr rr rr          .word nt_thru, xt_load, z_load
00323Dr 3  rr rr        
00323Fr 3  6C 6F 61 64          .byte "load"
003243r 3               
003243r 3               nt_flush:
003243r 3  05 00                .byte 5, 0
003245r 3  rr rr rr rr          .word nt_load, xt_flush, z_flush
003249r 3  rr rr        
00324Br 3  66 6C 75 73          .byte "flush"
00324Fr 3  68           
003250r 3               
003250r 3               nt_empty_buffers:
003250r 3  0D 00                .byte 13, 0
003252r 3  rr rr rr rr          .word nt_flush, xt_empty_buffers, z_empty_buffers
003256r 3  rr rr        
003258r 3  65 6D 70 74          .byte "empty-buffers"
00325Cr 3  79 2D 62 75  
003260r 3  66 66 65 72  
003265r 3               
003265r 3               nt_buffer:
003265r 3  06 00                .byte 6, 0
003267r 3  rr rr rr rr          .word nt_empty_buffers, xt_buffer, z_buffer
00326Br 3  rr rr        
00326Dr 3  62 75 66 66          .byte "buffer"
003271r 3  65 72        
003273r 3               
003273r 3               nt_update:
003273r 3  06 00                .byte 6, 0
003275r 3  rr rr rr rr          .word nt_buffer, xt_update, z_update
003279r 3  rr rr        
00327Br 3  75 70 64 61          .byte "update"
00327Fr 3  74 65        
003281r 3               
003281r 3               nt_block:
003281r 3  05 00                .byte 5, 0
003283r 3  rr rr rr rr          .word nt_update, xt_block, z_block
003287r 3  rr rr        
003289r 3  62 6C 6F 63          .byte "block"
00328Dr 3  6B           
00328Er 3               
00328Er 3               nt_save_buffers:
00328Er 3  0C 00                .byte 12, 0
003290r 3  rr rr rr rr          .word nt_block, xt_save_buffers, z_save_buffers
003294r 3  rr rr        
003296r 3  73 61 76 65          .byte "save-buffers"
00329Ar 3  2D 62 75 66  
00329Er 3  66 65 72 73  
0032A2r 3               
0032A2r 3               nt_block_read_vector:
0032A2r 3  11 28                .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
0032A4r 3  rr rr rr rr          .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
0032A8r 3  rr rr        
0032AAr 3  62 6C 6F 63          .byte "block-read-vector"
0032AEr 3  6B 2D 72 65  
0032B2r 3  61 64 2D 76  
0032BBr 3               
0032BBr 3               nt_block_read:
0032BBr 3  0A 28                .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
0032BDr 3  rr rr rr rr          .word nt_block_read_vector, xt_block_read, z_block_read
0032C1r 3  rr rr        
0032C3r 3  62 6C 6F 63          .byte "block-read"
0032C7r 3  6B 2D 72 65  
0032CBr 3  61 64        
0032CDr 3               
0032CDr 3               nt_block_write_vector:
0032CDr 3  12 08                .byte 18, NN ; Deferred words need the HC (Code Field) flag.
0032CFr 3  rr rr rr rr          .word nt_block_read, xt_block_write_vector, z_block_write_vector
0032D3r 3  rr rr        
0032D5r 3  62 6C 6F 63          .byte "block-write-vector"
0032D9r 3  6B 2D 77 72  
0032DDr 3  69 74 65 2D  
0032E7r 3               
0032E7r 3               nt_block_write:
0032E7r 3  0B 08                .byte 11, NN ; Deferred words need the HC (Code Field) flag.
0032E9r 3  rr rr rr rr          .word nt_block_write_vector, xt_block_write, z_block_write
0032EDr 3  rr rr        
0032EFr 3  62 6C 6F 63          .byte "block-write"
0032F3r 3  6B 2D 77 72  
0032F7r 3  69 74 65     
0032FAr 3               
0032FAr 3               nt_blk:
0032FAr 3  03 00                .byte 3, 0
0032FCr 3  rr rr rr rr          .word nt_block_write, xt_blk, z_blk
003300r 3  rr rr        
003302r 3  62 6C 6B             .byte "blk"
003305r 3               
003305r 3               nt_scr:
003305r 3  03 00                .byte 3, 0
003307r 3  rr rr rr rr          .word nt_blk, xt_scr, z_scr
00330Br 3  rr rr        
00330Dr 3  73 63 72             .byte "scr"
003310r 3               
003310r 3               nt_blkbuffer:
003310r 3  09 00                .byte 9, 0
003312r 3  rr rr rr rr          .word nt_scr, xt_blkbuffer, z_blkbuffer
003316r 3  rr rr        
003318r 3  62 6C 6B 62          .byte "blkbuffer"
00331Cr 3  75 66 66 65  
003320r 3  72           
003321r 3               
003321r 3               nt_buffblocknum:
003321r 3  0C 00                .byte 12, 0
003323r 3  rr rr rr rr          .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
003327r 3  rr rr        
003329r 3  62 75 66 66          .byte "buffblocknum"
00332Dr 3  62 6C 6F 63  
003331r 3  6B 6E 75 6D  
003335r 3               
003335r 3               nt_buffstatus:
003335r 3  0A 00                .byte 10, 0
003337r 3  rr rr rr rr          .word nt_buffblocknum, xt_buffstatus, z_buffstatus
00333Br 3  rr rr        
00333Dr 3  62 75 66 66          .byte "buffstatus"
003341r 3  73 74 61 74  
003345r 3  75 73        
003347r 3               
003347r 3               nt_buffer_colon:
003347r 3  07 00                .byte 7, 0
003349r 3  rr rr rr rr          .word nt_buffstatus, xt_buffer_colon, z_buffer_colon
00334Dr 3  rr rr        
00334Fr 3  62 75 66 66          .byte "buffer:"
003353r 3  65 72 3A     
003356r 3               
003356r 3               nt_useraddr:
003356r 3  08 00                .byte 8, 0
003358r 3  rr rr rr rr          .word nt_buffer_colon, xt_useraddr, z_useraddr
00335Cr 3  rr rr        
00335Er 3  75 73 65 72          .byte "useraddr"
003362r 3  61 64 64 72  
003366r 3               
003366r 3               nt_action_of:
003366r 3  09 04                .byte 9, IM
003368r 3  rr rr rr rr          .word nt_useraddr, xt_action_of, z_action_of
00336Cr 3  rr rr        
00336Er 3  61 63 74 69          .byte "action-of"
003372r 3  6F 6E 2D 6F  
003376r 3  66           
003377r 3               
003377r 3               nt_is:
003377r 3  02 04                .byte 2, IM
003379r 3  rr rr rr rr          .word nt_action_of, xt_is, z_is
00337Dr 3  rr rr        
00337Fr 3  69 73                .byte "is"
003381r 3               
003381r 3               nt_defer_store:
003381r 3  06 00                .byte 6, 0
003383r 3  rr rr rr rr          .word nt_is, xt_defer_store, z_defer_store
003387r 3  rr rr        
003389r 3  64 65 66 65          .byte "defer!"
00338Dr 3  72 21        
00338Fr 3               
00338Fr 3               nt_defer_fetch:
00338Fr 3  06 00                .byte 6, 0
003391r 3  rr rr rr rr          .word nt_defer_store, xt_defer_fetch, z_defer_fetch
003395r 3  rr rr        
003397r 3  64 65 66 65          .byte "defer@"
00339Br 3  72 40        
00339Dr 3               
00339Dr 3               nt_endcase:
00339Dr 3  07 0D                .byte 7, IM+CO+NN
00339Fr 3  rr rr rr rr          .word nt_defer_fetch, xt_endcase, z_endcase
0033A3r 3  rr rr        
0033A5r 3  65 6E 64 63          .byte "endcase"
0033A9r 3  61 73 65     
0033ACr 3               
0033ACr 3               nt_endof:
0033ACr 3  05 0D                .byte 5, IM+CO+NN
0033AEr 3  rr rr rr rr          .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
0033B2r 3  rr rr        
0033B4r 3  65 6E 64 6F          .byte "endof"
0033B8r 3  66           
0033B9r 3               
0033B9r 3               nt_of:
0033B9r 3  02 0D                .byte 2, IM+CO+NN
0033BBr 3  rr rr rr rr          .word nt_endof, xt_of, z_of
0033BFr 3  rr rr        
0033C1r 3  6F 66                .byte "of"
0033C3r 3               
0033C3r 3               nt_case:
0033C3r 3  04 0D                .byte 4, IM+CO+NN
0033C5r 3  rr rr rr rr          .word nt_of, xt_case, z_case    ; shares code with ZERO
0033C9r 3  rr rr        
0033CBr 3  63 61 73 65          .byte "case"
0033CFr 3               
0033CFr 3               nt_while:
0033CFr 3  05 0D                .byte 5, IM+CO+NN
0033D1r 3  rr rr rr rr          .word nt_case, xt_while, z_while
0033D5r 3  rr rr        
0033D7r 3  77 68 69 6C          .byte "while"
0033DBr 3  65           
0033DCr 3               
0033DCr 3               nt_until:
0033DCr 3  05 0D                .byte 5, IM+CO+NN
0033DEr 3  rr rr rr rr          .word nt_while, xt_until, z_until
0033E2r 3  rr rr        
0033E4r 3  75 6E 74 69          .byte "until"
0033E8r 3  6C           
0033E9r 3               
0033E9r 3               nt_repeat:
0033E9r 3  06 0D                .byte 6, IM+CO+NN
0033EBr 3  rr rr rr rr          .word nt_until, xt_repeat, z_repeat
0033EFr 3  rr rr        
0033F1r 3  72 65 70 65          .byte "repeat"
0033F5r 3  61 74        
0033F7r 3               
0033F7r 3               nt_else:
0033F7r 3  04 0D                .byte 4, IM+CO+NN
0033F9r 3  rr rr rr rr          .word nt_repeat, xt_else, z_else
0033FDr 3  rr rr        
0033FFr 3  65 6C 73 65          .byte "else"
003403r 3               
003403r 3               nt_then:
003403r 3  04 0D                .byte 4, IM+CO+NN
003405r 3  rr rr rr rr          .word nt_else, xt_then, z_then
003409r 3  rr rr        
00340Br 3  74 68 65 6E          .byte "then"
00340Fr 3               
00340Fr 3               nt_if:
00340Fr 3  02 0D                .byte 2, IM+CO+NN
003411r 3  rr rr rr rr          .word nt_then, xt_if, z_if
003415r 3  rr rr        
003417r 3  69 66                .byte "if"
003419r 3               
003419r 3               nt_dot_paren:
003419r 3  02 04                .byte 2, IM
00341Br 3  rr rr rr rr          .word nt_if, xt_dot_paren, z_dot_paren
00341Fr 3  rr rr        
003421r 3  2E 28                .byte ".("
003423r 3               
003423r 3               nt_paren:
003423r 3  01 04                .byte 1, IM
003425r 3  rr rr rr rr          .word nt_dot_paren, xt_paren, z_paren
003429r 3  rr rr        
00342Br 3  28                   .byte "("
00342Cr 3               
00342Cr 3               nt_word:
00342Cr 3  04 10                .byte 4, UF
00342Er 3  rr rr rr rr          .word nt_paren, xt_word, z_word
003432r 3  rr rr        
003434r 3  77 6F 72 64          .byte "word"
003438r 3               
003438r 3               nt_find:
003438r 3  04 10                .byte 4, UF
00343Ar 3  rr rr rr rr          .word nt_word, xt_find, z_find
00343Er 3  rr rr        
003440r 3  66 69 6E 64          .byte "find"
003444r 3               
003444r 3               nt_environment_q:
003444r 3  0C 10                .byte 12, UF
003446r 3  rr rr rr rr          .word nt_find, xt_environment_q, z_environment_q
00344Ar 3  rr rr        
00344Cr 3  65 6E 76 69          .byte "environment?"
003450r 3  72 6F 6E 6D  
003454r 3  65 6E 74 3F  
003458r 3               
003458r 3               nt_search:
003458r 3  06 18                .byte 6, UF+NN
00345Ar 3  rr rr rr rr          .word nt_environment_q, xt_search, z_search
00345Er 3  rr rr        
003460r 3  73 65 61 72          .byte "search"
003464r 3  63 68        
003466r 3               
003466r 3               nt_compare:
003466r 3  07 10                .byte 7, UF
003468r 3  rr rr rr rr          .word nt_search, xt_compare, z_compare
00346Cr 3  rr rr        
00346Er 3  63 6F 6D 70          .byte "compare"
003472r 3  61 72 65     
003475r 3               
003475r 3               nt_disasm:
003475r 3  06 10                .byte 6, UF
003477r 3  rr rr rr rr          .word nt_compare, xt_disasm, z_disasm
00347Br 3  rr rr        
00347Dr 3  64 69 73 61          .byte "disasm"
003481r 3  73 6D        
003483r 3               
003483r 3               nt_dot_s:
003483r 3  02 00                .byte 2, 0
003485r 3  rr rr rr rr          .word nt_disasm, xt_dot_s, z_dot_s
003489r 3  rr rr        
00348Br 3  2E 73                .byte ".s"
00348Dr 3               
00348Dr 3               nt_dump:
00348Dr 3  04 10                .byte 4, UF
00348Fr 3  rr rr rr rr          .word nt_dot_s, xt_dump, z_dump
003493r 3  rr rr        
003495r 3  64 75 6D 70          .byte "dump"
003499r 3               
003499r 3               nt_bell:
003499r 3  04 00                .byte 4, 0
00349Br 3  rr rr rr rr          .word nt_dump, xt_bell, z_bell
00349Fr 3  rr rr        
0034A1r 3  62 65 6C 6C          .byte "bell"
0034A5r 3               
0034A5r 3               nt_align:
0034A5r 3  05 00                .byte 5, 0
0034A7r 3  rr rr rr rr          .word nt_bell, xt_align, z_align
0034ABr 3  rr rr        
0034ADr 3  61 6C 69 67          .byte "align"
0034B1r 3  6E           
0034B2r 3               
0034B2r 3               nt_aligned:             ; same code as ALIGN
0034B2r 3  07 00                .byte 7, 0
0034B4r 3  rr rr rr rr          .word nt_align, xt_align, z_align
0034B8r 3  rr rr        
0034BAr 3  61 6C 69 67          .byte "aligned"
0034BEr 3  6E 65 64     
0034C1r 3               
0034C1r 3               nt_wordsize:
0034C1r 3  08 10                .byte 8, UF
0034C3r 3  rr rr rr rr          .word nt_aligned, xt_wordsize, z_wordsize
0034C7r 3  rr rr        
0034C9r 3  77 6F 72 64          .byte "wordsize"
0034CDr 3  73 69 7A 65  
0034D1r 3               
0034D1r 3               nt_words:
0034D1r 3  05 00                .byte 5, 0
0034D3r 3  rr rr rr rr          .word nt_wordsize, xt_words, z_words
0034D7r 3  rr rr        
0034D9r 3  77 6F 72 64          .byte "words"
0034DDr 3  73           
0034DEr 3               
0034DEr 3               nt_marker:
0034DEr 3  06 04                .byte 6, IM
0034E0r 3  rr rr rr rr          .word nt_words, xt_marker, z_marker
0034E4r 3  rr rr        
0034E6r 3  6D 61 72 6B          .byte "marker"
0034EAr 3  65 72        
0034ECr 3               
0034ECr 3               nt_at_xy:
0034ECr 3  05 10                .byte 5, UF
0034EEr 3  rr rr rr rr          .word nt_marker, xt_at_xy, z_at_xy
0034F2r 3  rr rr        
0034F4r 3  61 74 2D 78          .byte "at-xy"
0034F8r 3  79           
0034F9r 3               
0034F9r 3               nt_page:
0034F9r 3  04 00                .byte 4, 0
0034FBr 3  rr rr rr rr          .word nt_at_xy, xt_page, z_page
0034FFr 3  rr rr        
003501r 3  70 61 67 65          .byte "page"
003505r 3               
003505r 3               nt_cr:
003505r 3  02 00                .byte 2, 0
003507r 3  rr rr rr rr          .word nt_page, xt_cr, z_cr
00350Br 3  rr rr        
00350Dr 3  63 72                .byte "cr"
00350Fr 3               
00350Fr 3               nt_input:
00350Fr 3  05 00                .byte 5, 0
003511r 3  rr rr rr rr          .word nt_cr, xt_input, z_input
003515r 3  rr rr        
003517r 3  69 6E 70 75          .byte "input"
00351Br 3  74           
00351Cr 3               
00351Cr 3               nt_output:
00351Cr 3  06 00                .byte 6, 0
00351Er 3  rr rr rr rr          .word nt_input, xt_output, z_output
003522r 3  rr rr        
003524r 3  6F 75 74 70          .byte "output"
003528r 3  75 74        
00352Ar 3               
00352Ar 3               nt_sign:
00352Ar 3  04 10                .byte 4, UF
00352Cr 3  rr rr rr rr          .word nt_output, xt_sign, z_sign
003530r 3  rr rr        
003532r 3  73 69 67 6E          .byte "sign"
003536r 3               
003536r 3               nt_hold:
003536r 3  04 10                .byte 4, UF
003538r 3  rr rr rr rr          .word nt_sign, xt_hold, z_hold
00353Cr 3  rr rr        
00353Er 3  68 6F 6C 64          .byte "hold"
003542r 3               
003542r 3               nt_number_sign_greater:
003542r 3  02 10                .byte 2, UF
003544r 3  rr rr rr rr          .word nt_hold, xt_number_sign_greater, z_number_sign_greater
003548r 3  rr rr        
00354Ar 3  23 3E                .byte "#>"
00354Cr 3               
00354Cr 3               nt_number_sign_s:
00354Cr 3  02 10                .byte 2, UF
00354Er 3  rr rr rr rr          .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
003552r 3  rr rr        
003554r 3  23 73                .byte "#s"
003556r 3               
003556r 3               nt_number_sign:
003556r 3  01 10                .byte 1, UF
003558r 3  rr rr rr rr          .word nt_number_sign_s, xt_number_sign, z_number_sign
00355Cr 3  rr rr        
00355Er 3  23                   .byte "#"
00355Fr 3               
00355Fr 3               nt_less_number_sign:
00355Fr 3  02 00                .byte 2, 0
003561r 3  rr rr rr rr          .word nt_number_sign, xt_less_number_sign, z_less_number_sign
003565r 3  rr rr        
003567r 3  3C 23                .byte "<#"
003569r 3               
003569r 3               nt_to_in:
003569r 3  03 00                .byte 3, 0
00356Br 3  rr rr rr rr          .word nt_less_number_sign, xt_to_in, z_to_in
00356Fr 3  rr rr        
003571r 3  3E 69 6E             .byte ">in"
003574r 3               
003574r 3               nt_within:
003574r 3  06 10                .byte 6, UF
003576r 3  rr rr rr rr          .word nt_to_in, xt_within, z_within
00357Ar 3  rr rr        
00357Cr 3  77 69 74 68          .byte "within"
003580r 3  69 6E        
003582r 3               
003582r 3               nt_hexstore:
003582r 3  08 10                .byte 8, UF
003584r 3  rr rr rr rr          .word nt_within, xt_hexstore, z_hexstore
003588r 3  rr rr        
00358Ar 3  68 65 78 73          .byte "hexstore"
00358Er 3  74 6F 72 65  
003592r 3               
003592r 3               nt_cleave:
003592r 3  06 10                .byte 6, UF
003594r 3  rr rr rr rr          .word nt_hexstore, xt_cleave, z_cleave
003598r 3  rr rr        
00359Ar 3  63 6C 65 61          .byte "cleave"
00359Er 3  76 65        
0035A0r 3               
0035A0r 3               nt_pad:
0035A0r 3  03 00                .byte 3, 0
0035A2r 3  rr rr rr rr          .word nt_cleave, xt_pad, z_pad
0035A6r 3  rr rr        
0035A8r 3  70 61 64             .byte "pad"
0035ABr 3               
0035ABr 3               nt_cmove:
0035ABr 3  05 10                .byte 5, UF
0035ADr 3  rr rr rr rr          .word nt_pad, xt_cmove, z_cmove
0035B1r 3  rr rr        
0035B3r 3  63 6D 6F 76          .byte "cmove"
0035B7r 3  65           
0035B8r 3               
0035B8r 3               nt_cmove_up:
0035B8r 3  06 10                .byte 6, UF
0035BAr 3  rr rr rr rr          .word nt_cmove, xt_cmove_up, z_cmove_up
0035BEr 3  rr rr        
0035C0r 3  63 6D 6F 76          .byte "cmove>"
0035C4r 3  65 3E        
0035C6r 3               
0035C6r 3               nt_move:
0035C6r 3  04 18                .byte 4, NN+UF
0035C8r 3  rr rr rr rr          .word nt_cmove_up, xt_move, z_move
0035CCr 3  rr rr        
0035CEr 3  6D 6F 76 65          .byte "move"
0035D2r 3               
0035D2r 3               nt_backslash:
0035D2r 3  01 04                .byte 1, IM
0035D4r 3  rr rr rr rr          .word nt_move, xt_backslash, z_backslash
0035D8r 3  rr rr        
0035DAr 3  5C                   .byte $5c
0035DBr 3               
0035DBr 3               nt_star_slash:
0035DBr 3  02 10                .byte 2, UF
0035DDr 3  rr rr rr rr          .word nt_backslash, xt_star_slash, z_star_slash
0035E1r 3  rr rr        
0035E3r 3  2A 2F                .byte "*/"
0035E5r 3               
0035E5r 3               nt_star_slash_mod:
0035E5r 3  05 10                .byte 5, UF
0035E7r 3  rr rr rr rr          .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
0035EBr 3  rr rr        
0035EDr 3  2A 2F 6D 6F          .byte "*/mod"
0035F1r 3  64           
0035F2r 3               
0035F2r 3               nt_mod:
0035F2r 3  03 10                .byte 3, UF
0035F4r 3  rr rr rr rr          .word nt_star_slash_mod, xt_mod, z_mod
0035F8r 3  rr rr        
0035FAr 3  6D 6F 64             .byte "mod"
0035FDr 3               
0035FDr 3               nt_slash_mod:
0035FDr 3  04 10                .byte 4, UF
0035FFr 3  rr rr rr rr          .word nt_mod, xt_slash_mod, z_slash_mod
003603r 3  rr rr        
003605r 3  2F 6D 6F 64          .byte "/mod"
003609r 3               
003609r 3               nt_slash:
003609r 3  01 10                .byte 1, UF
00360Br 3  rr rr rr rr          .word nt_slash_mod, xt_slash, z_slash
00360Fr 3  rr rr        
003611r 3  2F                   .byte "/"
003612r 3               
003612r 3               nt_fm_slash_mod:
003612r 3  06 10                .byte 6, UF
003614r 3  rr rr rr rr          .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
003618r 3  rr rr        
00361Ar 3  66 6D 2F 6D          .byte "fm/mod"
00361Er 3  6F 64        
003620r 3               
003620r 3               nt_sm_slash_rem:
003620r 3  06 10                .byte 6, UF
003622r 3  rr rr rr rr          .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
003626r 3  rr rr        
003628r 3  73 6D 2F 72          .byte "sm/rem"
00362Cr 3  65 6D        
00362Er 3               
00362Er 3               nt_um_slash_mod:
00362Er 3  06 10                .byte 6, UF
003630r 3  rr rr rr rr          .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
003634r 3  rr rr        
003636r 3  75 6D 2F 6D          .byte "um/mod"
00363Ar 3  6F 64        
00363Cr 3               
00363Cr 3               nt_star:
00363Cr 3  01 10                .byte 1, UF
00363Er 3  rr rr rr rr          .word nt_um_slash_mod, xt_star, z_star
003642r 3  rr rr        
003644r 3  2A                   .byte "*"
003645r 3               
003645r 3               nt_um_star:
003645r 3  03 10                .byte 3, UF
003647r 3  rr rr rr rr          .word nt_star, xt_um_star, z_um_star
00364Br 3  rr rr        
00364Dr 3  75 6D 2A             .byte "um*"
003650r 3               
003650r 3               nt_m_star:
003650r 3  02 10                .byte 2, UF
003652r 3  rr rr rr rr          .word nt_um_star, xt_m_star, z_m_star
003656r 3  rr rr        
003658r 3  6D 2A                .byte "m*"
00365Ar 3               
00365Ar 3               nt_count:
00365Ar 3  05 10                .byte 5, UF
00365Cr 3  rr rr rr rr          .word nt_m_star, xt_count, z_count
003660r 3  rr rr        
003662r 3  63 6F 75 6E          .byte "count"
003666r 3  74           
003667r 3               
003667r 3               nt_decimal:
003667r 3  07 00                .byte 7, 0
003669r 3  rr rr rr rr          .word nt_count, xt_decimal, z_decimal
00366Dr 3  rr rr        
00366Fr 3  64 65 63 69          .byte "decimal"
003673r 3  6D 61 6C     
003676r 3               
003676r 3               nt_hex:
003676r 3  03 00                .byte 3, 0
003678r 3  rr rr rr rr          .word nt_decimal, xt_hex, z_hex
00367Cr 3  rr rr        
00367Er 3  68 65 78             .byte "hex"
003681r 3               
003681r 3               nt_to_number:
003681r 3  07 10                .byte 7, UF
003683r 3  rr rr rr rr          .word nt_hex, xt_to_number, z_to_number
003687r 3  rr rr        
003689r 3  3E 6E 75 6D          .byte ">number"
00368Dr 3  62 65 72     
003690r 3               
003690r 3               nt_number:
003690r 3  06 10                .byte 6, UF
003692r 3  rr rr rr rr          .word nt_to_number, xt_number, z_number
003696r 3  rr rr        
003698r 3  6E 75 6D 62          .byte "number"
00369Cr 3  65 72        
00369Er 3               
00369Er 3               nt_digit_question:
00369Er 3  06 10                .byte 6, UF
0036A0r 3  rr rr rr rr          .word nt_number, xt_digit_question, z_digit_question
0036A4r 3  rr rr        
0036A6r 3  64 69 67 69          .byte "digit?"
0036AAr 3  74 3F        
0036ACr 3               
0036ACr 3               nt_base:
0036ACr 3  04 00                .byte 4, 0
0036AEr 3  rr rr rr rr          .word nt_digit_question, xt_base, z_base
0036B2r 3  rr rr        
0036B4r 3  62 61 73 65          .byte "base"
0036B8r 3               
0036B8r 3               nt_evaluate:
0036B8r 3  08 10                .byte 8, UF
0036BAr 3  rr rr rr rr          .word nt_base, xt_evaluate, z_evaluate
0036BEr 3  rr rr        
0036C0r 3  65 76 61 6C          .byte "evaluate"
0036C4r 3  75 61 74 65  
0036C8r 3               
0036C8r 3               nt_state:
0036C8r 3  05 00                .byte 5, 0
0036CAr 3  rr rr rr rr          .word nt_evaluate, xt_state, z_state
0036CEr 3  rr rr        
0036D0r 3  73 74 61 74          .byte "state"
0036D4r 3  65           
0036D5r 3               
0036D5r 3               nt_again:
0036D5r 3  05 17                .byte 5, AN+CO+IM+UF
0036D7r 3  rr rr rr rr          .word nt_state, xt_again, z_again
0036DBr 3  rr rr        
0036DDr 3  61 67 61 69          .byte "again"
0036E1r 3  6E           
0036E2r 3               
0036E2r 3               nt_begin:
0036E2r 3  05 07                .byte 5, AN+CO+IM
0036E4r 3  rr rr rr rr          .word nt_again, xt_begin, z_begin
0036E8r 3  rr rr        
0036EAr 3  62 65 67 69          .byte "begin"
0036EEr 3  6E           
0036EFr 3               
0036EFr 3               nt_quit:
0036EFr 3  04 00                .byte 4, 0
0036F1r 3  rr rr rr rr          .word nt_begin, xt_quit, z_quit
0036F5r 3  rr rr        
0036F7r 3  71 75 69 74          .byte "quit"
0036FBr 3               
0036FBr 3               nt_recurse:
0036FBr 3  07 0D                .byte 7, CO+IM+NN
0036FDr 3  rr rr rr rr          .word nt_quit, xt_recurse, z_recurse
003701r 3  rr rr        
003703r 3  72 65 63 75          .byte "recurse"
003707r 3  72 73 65     
00370Ar 3               
00370Ar 3               nt_leave:
00370Ar 3  05 03                .byte 5, AN+CO
00370Cr 3  rr rr rr rr          .word nt_recurse, xt_leave, z_leave
003710r 3  rr rr        
003712r 3  6C 65 61 76          .byte "leave"
003716r 3  65           
003717r 3               
003717r 3               nt_unloop:
003717r 3  06 03                .byte 6, AN+CO
003719r 3  rr rr rr rr          .word nt_leave, xt_unloop, z_unloop
00371Dr 3  rr rr        
00371Fr 3  75 6E 6C 6F          .byte "unloop"
003723r 3  6F 70        
003725r 3               
003725r 3               nt_exit:
003725r 3  04 03                .byte 4, AN+CO
003727r 3  rr rr rr rr          .word nt_unloop, xt_exit, z_exit
00372Br 3  rr rr        
00372Dr 3  65 78 69 74          .byte "exit"
003731r 3               
003731r 3               nt_plus_loop:
003731r 3  05 05                .byte 5, CO+IM
003733r 3  rr rr rr rr          .word nt_exit, xt_plus_loop, z_plus_loop
003737r 3  rr rr        
003739r 3  2B 6C 6F 6F          .byte "+loop"
00373Dr 3  70           
00373Er 3               
00373Er 3               nt_loop:
00373Er 3  04 05                .byte 4, CO+IM
003740r 3  rr rr rr rr          .word nt_plus_loop, xt_loop, z_loop
003744r 3  rr rr        
003746r 3  6C 6F 6F 70          .byte "loop"
00374Ar 3               
00374Ar 3               nt_j:
00374Ar 3  01 03                .byte 1, AN+CO
00374Cr 3  rr rr rr rr          .word nt_loop, xt_j, z_j
003750r 3  rr rr        
003752r 3  6A                   .byte "j"
003753r 3               
003753r 3               nt_i:
003753r 3  01 03                .byte 1, AN+CO
003755r 3  rr rr rr rr          .word nt_j, xt_i, z_i
003759r 3  rr rr        
00375Br 3  69                   .byte "i"
00375Cr 3               
00375Cr 3               nt_question_do:
00375Cr 3  03 0D                .byte 3, CO+IM+NN
00375Er 3  rr rr rr rr          .word nt_i, xt_question_do, z_question_do
003762r 3  rr rr        
003764r 3  3F 64 6F             .byte "?do"
003767r 3               
003767r 3               nt_do:
003767r 3  02 0D                .byte 2, CO+IM+NN
003769r 3  rr rr rr rr          .word nt_question_do, xt_do, z_do
00376Dr 3  rr rr        
00376Fr 3  64 6F                .byte "do"
003771r 3               
003771r 3               nt_abort_quote:
003771r 3  06 0D                .byte 6, CO+IM+NN
003773r 3  rr rr rr rr          .word nt_do, xt_abort_quote, z_abort_quote
003777r 3  rr rr        
003779r 3  61 62 6F 72          .byte "abort", $22
00377Dr 3  74 22        
00377Fr 3               
00377Fr 3               nt_abort:
00377Fr 3  05 00                .byte 5, 0
003781r 3  rr rr rr rr          .word nt_abort_quote, xt_abort, z_abort
003785r 3  rr rr        
003787r 3  61 62 6F 72          .byte "abort"
00378Br 3  74           
00378Cr 3               
00378Cr 3               nt_strip_underflow:
00378Cr 3  0F 00                .byte 15, 0
00378Er 3  rr rr rr rr          .word nt_abort, xt_strip_underflow, z_strip_underflow
003792r 3  rr rr        
003794r 3  73 74 72 69          .byte "strip-underflow"
003798r 3  70 2D 75 6E  
00379Cr 3  64 65 72 66  
0037A3r 3               
0037A3r 3               nt_nc_limit:
0037A3r 3  08 00                .byte 8, 0
0037A5r 3  rr rr rr rr          .word nt_strip_underflow, xt_nc_limit, z_nc_limit
0037A9r 3  rr rr        
0037ABr 3  6E 63 2D 6C          .byte "nc-limit"
0037AFr 3  69 6D 69 74  
0037B3r 3               
0037B3r 3               nt_allow_native:
0037B3r 3  0C 00                .byte 12, 0
0037B5r 3  rr rr rr rr          .word nt_nc_limit, xt_allow_native, z_allow_native
0037B9r 3  rr rr        
0037BBr 3  61 6C 6C 6F          .byte "allow-native"
0037BFr 3  77 2D 6E 61  
0037C3r 3  74 69 76 65  
0037C7r 3               
0037C7r 3               nt_always_native:
0037C7r 3  0D 00                .byte 13, 0
0037C9r 3  rr rr rr rr          .word nt_allow_native, xt_always_native, z_always_native
0037CDr 3  rr rr        
0037CFr 3  61 6C 77 61          .byte "always-native"
0037D3r 3  79 73 2D 6E  
0037D7r 3  61 74 69 76  
0037DCr 3               
0037DCr 3               nt_never_native:
0037DCr 3  0C 00                .byte 12, 0
0037DEr 3  rr rr rr rr          .word nt_always_native, xt_never_native, z_never_native
0037E2r 3  rr rr        
0037E4r 3  6E 65 76 65          .byte "never-native"
0037E8r 3  72 2D 6E 61  
0037ECr 3  74 69 76 65  
0037F0r 3               
0037F0r 3               nt_compile_only:
0037F0r 3  0C 00                .byte 12, 0
0037F2r 3  rr rr rr rr          .word nt_never_native, xt_compile_only, z_compile_only
0037F6r 3  rr rr        
0037F8r 3  63 6F 6D 70          .byte "compile-only"
0037FCr 3  69 6C 65 2D  
003800r 3  6F 6E 6C 79  
003804r 3               
003804r 3               nt_immediate:
003804r 3  09 00                .byte 9, 0
003806r 3  rr rr rr rr          .word nt_compile_only, xt_immediate, z_immediate
00380Ar 3  rr rr        
00380Cr 3  69 6D 6D 65          .byte "immediate"
003810r 3  64 69 61 74  
003814r 3  65           
003815r 3               
003815r 3               nt_postpone:
003815r 3  08 05                .byte 8, IM+CO
003817r 3  rr rr rr rr          .word nt_immediate, xt_postpone, z_postpone
00381Br 3  rr rr        
00381Dr 3  70 6F 73 74          .byte "postpone"
003821r 3  70 6F 6E 65  
003825r 3               
003825r 3               nt_s_backslash_quote:
003825r 3  03 04                .byte 3, IM
003827r 3  rr rr rr rr          .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
00382Br 3  rr rr        
00382Dr 3  73 5C 22             .byte "s", $5C, $22
003830r 3               
003830r 3               nt_s_quote:
003830r 3  02 0C                .byte 2, IM+NN
003832r 3  rr rr rr rr          .word nt_s_backslash_quote, xt_s_quote, z_s_quote
003836r 3  rr rr        
003838r 3  73 22                .byte "s", $22
00383Ar 3               
00383Ar 3               nt_dot_quote:
00383Ar 3  02 05                .byte 2, CO+IM
00383Cr 3  rr rr rr rr          .word nt_s_quote, xt_dot_quote, z_dot_quote
003840r 3  rr rr        
003842r 3  2E 22                .byte ".", $22
003844r 3               
003844r 3               nt_sliteral:
003844r 3  08 15                .byte 8, CO+IM+UF
003846r 3  rr rr rr rr          .word nt_dot_quote, xt_sliteral, z_sliteral
00384Ar 3  rr rr        
00384Cr 3  73 6C 69 74          .byte "sliteral"
003850r 3  65 72 61 6C  
003854r 3               
003854r 3               nt_literal:
003854r 3  07 15                .byte 7, IM+CO+UF
003856r 3  rr rr rr rr          .word nt_sliteral, xt_literal, z_literal
00385Ar 3  rr rr        
00385Cr 3  6C 69 74 65          .byte "literal"
003860r 3  72 61 6C     
003863r 3               
003863r 3               nt_right_bracket:
003863r 3  01 04                .byte 1, IM
003865r 3  rr rr rr rr          .word nt_literal, xt_right_bracket, z_right_bracket
003869r 3  rr rr        
00386Br 3  5D                   .byte "]"
00386Cr 3               
00386Cr 3               nt_left_bracket:
00386Cr 3  01 05                .byte 1, IM+CO
00386Er 3  rr rr rr rr          .word nt_right_bracket, xt_left_bracket, z_left_bracket
003872r 3  rr rr        
003874r 3  5B                   .byte "["
003875r 3               
003875r 3               nt_compile_comma:
003875r 3  08 18                .byte 8, UF+NN
003877r 3  rr rr rr rr          .word nt_left_bracket, xt_compile_comma, z_compile_comma
00387Br 3  rr rr        
00387Dr 3  63 6F 6D 70          .byte "compile,"
003881r 3  69 6C 65 2C  
003885r 3               
003885r 3               nt_colon_noname:
003885r 3  07 00                .byte 7, 0
003887r 3  rr rr rr rr          .word nt_compile_comma, xt_colon_noname, z_colon_noname
00388Br 3  rr rr        
00388Dr 3  3A 6E 6F 6E          .byte ":noname"
003891r 3  61 6D 65     
003894r 3               
003894r 3               nt_semicolon:
003894r 3  01 05                .byte 1, CO+IM
003896r 3  rr rr rr rr          .word nt_colon_noname, xt_semicolon, z_semicolon
00389Ar 3  rr rr        
00389Cr 3  3B                   .byte ";"
00389Dr 3               
00389Dr 3               nt_colon:
00389Dr 3  01 00                .byte 1, 0
00389Fr 3  rr rr rr rr          .word nt_semicolon, xt_colon, z_colon
0038A3r 3  rr rr        
0038A5r 3  3A                   .byte ":"
0038A6r 3               
0038A6r 3               nt_source_id:
0038A6r 3  09 00                .byte 9, 0
0038A8r 3  rr rr rr rr          .word nt_colon, xt_source_id, z_source_id
0038ACr 3  rr rr        
0038AEr 3  73 6F 75 72          .byte "source-id"
0038B2r 3  63 65 2D 69  
0038B6r 3  64           
0038B7r 3               
0038B7r 3               nt_source:
0038B7r 3  06 00                .byte 6, 0
0038B9r 3  rr rr rr rr          .word nt_source_id, xt_source, z_source
0038BDr 3  rr rr        
0038BFr 3  73 6F 75 72          .byte "source"
0038C3r 3  63 65        
0038C5r 3               
0038C5r 3               nt_execute_parsing:
0038C5r 3  0F 10                .byte 15, UF
0038C7r 3  rr rr rr rr          .word nt_source, xt_execute_parsing, z_execute_parsing
0038CBr 3  rr rr        
0038CDr 3  65 78 65 63          .byte "execute-parsing"
0038D1r 3  75 74 65 2D  
0038D5r 3  70 61 72 73  
0038DCr 3               
0038DCr 3               nt_parse:
0038DCr 3  05 10                .byte 5, UF
0038DEr 3  rr rr rr rr          .word nt_execute_parsing, xt_parse, z_parse
0038E2r 3  rr rr        
0038E4r 3  70 61 72 73          .byte "parse"
0038E8r 3  65           
0038E9r 3               
0038E9r 3               nt_parse_name:
0038E9r 3  0A 08                .byte 10, NN
0038EBr 3  rr rr rr rr          .word nt_parse, xt_parse_name, z_parse_name
0038EFr 3  rr rr        
0038F1r 3  70 61 72 73          .byte "parse-name"
0038F5r 3  65 2D 6E 61  
0038F9r 3  6D 65        
0038FBr 3               
0038FBr 3               nt_latestnt:
0038FBr 3  08 00                .byte 8, 0
0038FDr 3  rr rr rr rr          .word nt_parse_name, xt_latestnt, z_latestnt
003901r 3  rr rr        
003903r 3  6C 61 74 65          .byte "latestnt"
003907r 3  73 74 6E 74  
00390Br 3               
00390Br 3               nt_latestxt:
00390Br 3  08 00                .byte 8, 0
00390Dr 3  rr rr rr rr          .word nt_latestnt, xt_latestxt, z_latestxt
003911r 3  rr rr        
003913r 3  6C 61 74 65          .byte "latestxt"
003917r 3  73 74 78 74  
00391Br 3               
00391Br 3               nt_defer:
00391Br 3  05 00                .byte 5, 0
00391Dr 3  rr rr rr rr          .word nt_latestxt, xt_defer, z_defer
003921r 3  rr rr        
003923r 3  64 65 66 65          .byte "defer"
003927r 3  72           
003928r 3               
003928r 3               nt_to_body:
003928r 3  05 10                .byte 5, UF
00392Ar 3  rr rr rr rr          .word nt_defer, xt_to_body, z_to_body
00392Er 3  rr rr        
003930r 3  3E 62 6F 64          .byte ">body"
003934r 3  79           
003935r 3               
003935r 3               nt_name_to_string:
003935r 3  0B 10                .byte 11, UF
003937r 3  rr rr rr rr          .word nt_to_body, xt_name_to_string, z_name_to_string
00393Br 3  rr rr        
00393Dr 3  6E 61 6D 65          .byte "name>string"
003941r 3  3E 73 74 72  
003945r 3  69 6E 67     
003948r 3               
003948r 3               nt_int_to_name:
003948r 3  08 10                .byte 8, UF
00394Ar 3  rr rr rr rr          .word nt_name_to_string, xt_int_to_name, z_int_to_name
00394Er 3  rr rr        
003950r 3  69 6E 74 3E          .byte "int>name"
003954r 3  6E 61 6D 65  
003958r 3               
003958r 3               nt_name_to_int:
003958r 3  08 10                .byte 8, UF
00395Ar 3  rr rr rr rr          .word nt_int_to_name, xt_name_to_int, z_name_to_int
00395Er 3  rr rr        
003960r 3  6E 61 6D 65          .byte "name>int"
003964r 3  3E 69 6E 74  
003968r 3               
003968r 3               nt_bracket_tick:
003968r 3  03 05                .byte 3, CO+IM
00396Ar 3  rr rr rr rr          .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
00396Er 3  rr rr        
003970r 3  5B 27 5D             .byte "[']"
003973r 3               
003973r 3               nt_tick:
003973r 3  01 00                .byte 1, 0
003975r 3  rr rr rr rr          .word nt_bracket_tick, xt_tick, z_tick
003979r 3  rr rr        
00397Br 3  27                   .byte "'"
00397Cr 3               
00397Cr 3               nt_find_name:
00397Cr 3  09 10                .byte 9, UF
00397Er 3  rr rr rr rr          .word nt_tick, xt_find_name, z_find_name
003982r 3  rr rr        
003984r 3  66 69 6E 64          .byte "find-name"
003988r 3  2D 6E 61 6D  
00398Cr 3  65           
00398Dr 3               
00398Dr 3               nt_fill:
00398Dr 3  04 10                .byte 4, UF
00398Fr 3  rr rr rr rr          .word nt_find_name, xt_fill, z_fill
003993r 3  rr rr        
003995r 3  66 69 6C 6C          .byte "fill"
003999r 3               
003999r 3               nt_blank:
003999r 3  05 00                .byte 5, 0     ; underflow checked by FILL
00399Br 3  rr rr rr rr          .word nt_fill, xt_blank, z_blank
00399Fr 3  rr rr        
0039A1r 3  62 6C 61 6E          .byte "blank"
0039A5r 3  6B           
0039A6r 3               
0039A6r 3               nt_erase:
0039A6r 3  05 00                .byte 5, 0      ; underflow checked by FILL
0039A8r 3  rr rr rr rr          .word nt_blank, xt_erase, z_erase
0039ACr 3  rr rr        
0039AEr 3  65 72 61 73          .byte "erase"
0039B2r 3  65           
0039B3r 3               
0039B3r 3               nt_d_plus:
0039B3r 3  02 10                .byte 2, UF
0039B5r 3  rr rr rr rr          .word nt_erase, xt_d_plus, z_d_plus
0039B9r 3  rr rr        
0039BBr 3  64 2B                .byte "d+"
0039BDr 3               
0039BDr 3               nt_d_minus:
0039BDr 3  02 10                .byte 2, UF
0039BFr 3  rr rr rr rr          .word nt_d_plus, xt_d_minus, z_d_minus
0039C3r 3  rr rr        
0039C5r 3  64 2D                .byte "d-"
0039C7r 3               
0039C7r 3               nt_d_to_s:
0039C7r 3  03 10                .byte 3, UF
0039C9r 3  rr rr rr rr          .word nt_d_minus, xt_d_to_s, z_d_to_s
0039CDr 3  rr rr        
0039CFr 3  64 3E 73             .byte "d>s"
0039D2r 3               
0039D2r 3               nt_s_to_d:
0039D2r 3  03 10                .byte 3, UF
0039D4r 3  rr rr rr rr          .word nt_d_to_s, xt_s_to_d, z_s_to_d
0039D8r 3  rr rr        
0039DAr 3  73 3E 64             .byte "s>d"
0039DDr 3               
0039DDr 3               nt_to:
0039DDr 3  02 0C                .byte 2, NN+IM
0039DFr 3  rr rr rr rr          .word nt_s_to_d, xt_to, z_to
0039E3r 3  rr rr        
0039E5r 3  74 6F                .byte "to"
0039E7r 3               
0039E7r 3               nt_value:               ; same code as CONSTANT
0039E7r 3  05 10                .byte 5, UF
0039E9r 3  rr rr rr rr          .word nt_to, xt_constant, z_constant
0039EDr 3  rr rr        
0039EFr 3  76 61 6C 75          .byte "value"
0039F3r 3  65           
0039F4r 3               
0039F4r 3               nt_constant:
0039F4r 3  08 10                .byte 8, UF
0039F6r 3  rr rr rr rr          .word nt_value, xt_constant, z_constant
0039FAr 3  rr rr        
0039FCr 3  63 6F 6E 73          .byte "constant"
003A00r 3  74 61 6E 74  
003A04r 3               
003A04r 3               nt_variable:
003A04r 3  08 00                .byte 8, 0
003A06r 3  rr rr rr rr          .word nt_constant, xt_variable, z_variable
003A0Ar 3  rr rr        
003A0Cr 3  76 61 72 69          .byte "variable"
003A10r 3  61 62 6C 65  
003A14r 3               
003A14r 3               nt_does:
003A14r 3  05 05                .byte 5, CO+IM
003A16r 3  rr rr rr rr          .word nt_variable, xt_does, z_does
003A1Ar 3  rr rr        
003A1Cr 3  64 6F 65 73          .byte "does>"
003A20r 3  3E           
003A21r 3               
003A21r 3               nt_create:
003A21r 3  06 00                .byte 6, 0
003A23r 3  rr rr rr rr          .word nt_does, xt_create, z_create
003A27r 3  rr rr        
003A29r 3  63 72 65 61          .byte "create"
003A2Dr 3  74 65        
003A2Fr 3               
003A2Fr 3               nt_allot:
003A2Fr 3  05 10                .byte 5, UF
003A31r 3  rr rr rr rr          .word nt_create, xt_allot, z_allot
003A35r 3  rr rr        
003A37r 3  61 6C 6C 6F          .byte "allot"
003A3Br 3  74           
003A3Cr 3               
003A3Cr 3               nt_key:
003A3Cr 3  03 00                .byte 3, 0
003A3Er 3  rr rr rr rr          .word nt_allot, xt_key, z_key
003A42r 3  rr rr        
003A44r 3  6B 65 79             .byte "key"
003A47r 3               
003A47r 3               nt_depth:
003A47r 3  05 00                .byte 5, 0
003A49r 3  rr rr rr rr          .word nt_key, xt_depth, z_depth
003A4Dr 3  rr rr        
003A4Fr 3  64 65 70 74          .byte "depth"
003A53r 3  68           
003A54r 3               
003A54r 3               nt_unused:
003A54r 3  06 00                .byte 6, 0
003A56r 3  rr rr rr rr          .word nt_depth, xt_unused, z_unused
003A5Ar 3  rr rr        
003A5Cr 3  75 6E 75 73          .byte "unused"
003A60r 3  65 64        
003A62r 3               
003A62r 3               nt_r_to_input:
003A62r 3  07 08                .byte 7, NN
003A64r 3  rr rr rr rr          .word nt_unused, xt_r_to_input, z_r_to_input
003A68r 3  rr rr        
003A6Ar 3  72 3E 69 6E          .byte "r>input"
003A6Er 3  70 75 74     
003A71r 3               
003A71r 3               nt_input_to_r:
003A71r 3  07 08                .byte 7, NN
003A73r 3  rr rr rr rr          .word nt_r_to_input, xt_input_to_r, z_input_to_r
003A77r 3  rr rr        
003A79r 3  69 6E 70 75          .byte "input>r"
003A7Dr 3  74 3E 72     
003A80r 3               
003A80r 3               nt_accept:
003A80r 3  06 18                .byte 6, UF+NN
003A82r 3  rr rr rr rr          .word nt_input_to_r, xt_accept, z_accept
003A86r 3  rr rr        
003A88r 3  61 63 63 65          .byte "accept"
003A8Cr 3  70 74        
003A8Er 3               
003A8Er 3               nt_refill:
003A8Er 3  06 00                .byte 6, 0
003A90r 3  rr rr rr rr          .word nt_accept, xt_refill, z_refill
003A94r 3  rr rr        
003A96r 3  72 65 66 69          .byte "refill"
003A9Ar 3  6C 6C        
003A9Cr 3               
003A9Cr 3               nt_slash_string:
003A9Cr 3  07 10                .byte 7, UF
003A9Er 3  rr rr rr rr          .word nt_refill, xt_slash_string, z_slash_string
003AA2r 3  rr rr        
003AA4r 3  2F 73 74 72          .byte "/string"
003AA8r 3  69 6E 67     
003AABr 3               
003AABr 3               nt_minus_leading:
003AABr 3  08 10                .byte 8, UF
003AADr 3  rr rr rr rr          .word nt_slash_string, xt_minus_leading, z_minus_leading
003AB1r 3  rr rr        
003AB3r 3  2D 6C 65 61          .byte "-leading"
003AB7r 3  64 69 6E 67  
003ABBr 3               
003ABBr 3               nt_minus_trailing:
003ABBr 3  09 10                .byte 9, UF
003ABDr 3  rr rr rr rr          .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
003AC1r 3  rr rr        
003AC3r 3  2D 74 72 61          .byte "-trailing"
003AC7r 3  69 6C 69 6E  
003ACBr 3  67           
003ACCr 3               
003ACCr 3               nt_bl:
003ACCr 3  02 00                .byte 2, 0
003ACEr 3  rr rr rr rr          .word nt_minus_trailing, xt_bl, z_bl
003AD2r 3  rr rr        
003AD4r 3  62 6C                .byte "bl"
003AD6r 3               
003AD6r 3               nt_spaces:
003AD6r 3  06 10                .byte 6, UF
003AD8r 3  rr rr rr rr          .word nt_bl, xt_spaces, z_spaces
003ADCr 3  rr rr        
003ADEr 3  73 70 61 63          .byte "spaces"
003AE2r 3  65 73        
003AE4r 3               
003AE4r 3               nt_bounds:
003AE4r 3  06 10                .byte 6, UF
003AE6r 3  rr rr rr rr          .word nt_spaces, xt_bounds, z_bounds
003AEAr 3  rr rr        
003AECr 3  62 6F 75 6E          .byte "bounds"
003AF0r 3  64 73        
003AF2r 3               
003AF2r 3               nt_c_comma:
003AF2r 3  02 10                .byte 2, UF
003AF4r 3  rr rr rr rr          .word nt_bounds, xt_c_comma, z_c_comma
003AF8r 3  rr rr        
003AFAr 3  63 2C                .byte "c,"
003AFCr 3               
003AFCr 3               nt_dnegate:
003AFCr 3  07 10                .byte 7, UF
003AFEr 3  rr rr rr rr          .word nt_c_comma, xt_dnegate, z_dnegate
003B02r 3  rr rr        
003B04r 3  64 6E 65 67          .byte "dnegate"
003B08r 3  61 74 65     
003B0Br 3               
003B0Br 3               nt_negate:
003B0Br 3  06 10                .byte 6, UF
003B0Dr 3  rr rr rr rr          .word nt_dnegate, xt_negate, z_negate
003B11r 3  rr rr        
003B13r 3  6E 65 67 61          .byte "negate"
003B17r 3  74 65        
003B19r 3               
003B19r 3               nt_invert:
003B19r 3  06 10                .byte 6, UF
003B1Br 3  rr rr rr rr          .word nt_negate, xt_invert, z_invert
003B1Fr 3  rr rr        
003B21r 3  69 6E 76 65          .byte "invert"
003B25r 3  72 74        
003B27r 3               
003B27r 3               nt_two_to_r:
003B27r 3  03 11                .byte 3, CO+UF          ; native is special case
003B29r 3  rr rr rr rr          .word nt_invert, xt_two_to_r, z_two_to_r
003B2Dr 3  rr rr        
003B2Fr 3  32 3E 72             .byte "2>r"
003B32r 3               
003B32r 3               nt_two_r_from:
003B32r 3  03 01                .byte 3, CO             ; native is special case
003B34r 3  rr rr rr rr          .word nt_two_to_r, xt_two_r_from, z_two_r_from
003B38r 3  rr rr        
003B3Ar 3  32 72 3E             .byte "2r>"
003B3Dr 3               
003B3Dr 3               nt_two_r_fetch:
003B3Dr 3  03 09                .byte 3, CO+NN          ; native is special case, leave NN for now
003B3Fr 3  rr rr rr rr          .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
003B43r 3  rr rr        
003B45r 3  32 72 40             .byte "2r@"
003B48r 3               
003B48r 3               nt_two_literal:
003B48r 3  08 14                .byte 8, UF+IM
003B4Ar 3  rr rr rr rr          .word nt_two_r_fetch, xt_two_literal, z_two_literal
003B4Er 3  rr rr        
003B50r 3  32 6C 69 74          .byte "2literal"
003B54r 3  65 72 61 6C  
003B58r 3               
003B58r 3               nt_two_constant:
003B58r 3  09 10                .byte 9, UF
003B5Ar 3  rr rr rr rr          .word nt_two_literal, xt_two_constant, z_two_constant
003B5Er 3  rr rr        
003B60r 3  32 63 6F 6E          .byte "2constant"
003B64r 3  73 74 61 6E  
003B68r 3  74           
003B69r 3               
003B69r 3               nt_two_variable:
003B69r 3  09 00                .byte 9, 0
003B6Br 3  rr rr rr rr          .word nt_two_constant, xt_two_variable, z_two_variable
003B6Fr 3  rr rr        
003B71r 3  32 76 61 72          .byte "2variable"
003B75r 3  69 61 62 6C  
003B79r 3  65           
003B7Ar 3               
003B7Ar 3               nt_two_fetch:
003B7Ar 3  02 10                .byte 2, UF
003B7Cr 3  rr rr rr rr          .word nt_two_variable, xt_two_fetch, z_two_fetch
003B80r 3  rr rr        
003B82r 3  32 40                .byte "2@"
003B84r 3               
003B84r 3               nt_two_store:
003B84r 3  02 10                .byte 2, UF
003B86r 3  rr rr rr rr          .word nt_two_fetch, xt_two_store, z_two_store
003B8Ar 3  rr rr        
003B8Cr 3  32 21                .byte "2!"
003B8Er 3               
003B8Er 3               nt_two_over:
003B8Er 3  05 10                .byte 5, UF
003B90r 3  rr rr rr rr          .word nt_two_store, xt_two_over, z_two_over
003B94r 3  rr rr        
003B96r 3  32 6F 76 65          .byte "2over"
003B9Ar 3  72           
003B9Br 3               
003B9Br 3               nt_two_swap:
003B9Br 3  05 10                .byte 5, UF
003B9Dr 3  rr rr rr rr          .word nt_two_over, xt_two_swap, z_two_swap
003BA1r 3  rr rr        
003BA3r 3  32 73 77 61          .byte "2swap"
003BA7r 3  70           
003BA8r 3               
003BA8r 3               nt_two_drop:
003BA8r 3  05 10                .byte 5, UF
003BAAr 3  rr rr rr rr          .word nt_two_swap, xt_two_drop, z_two_drop
003BAEr 3  rr rr        
003BB0r 3  32 64 72 6F          .byte "2drop"
003BB4r 3  70           
003BB5r 3               
003BB5r 3               nt_max:
003BB5r 3  03 10                .byte 3, UF
003BB7r 3  rr rr rr rr          .word nt_two_drop, xt_max, z_max
003BBBr 3  rr rr        
003BBDr 3  6D 61 78             .byte "max"
003BC0r 3               
003BC0r 3               nt_min:
003BC0r 3  03 10                .byte 3, UF
003BC2r 3  rr rr rr rr          .word nt_max, xt_min, z_min
003BC6r 3  rr rr        
003BC8r 3  6D 69 6E             .byte "min"
003BCBr 3               
003BCBr 3               nt_zero_less:
003BCBr 3  02 10                .byte 2, UF
003BCDr 3  rr rr rr rr          .word nt_min, xt_zero_less, z_zero_less
003BD1r 3  rr rr        
003BD3r 3  30 3C                .byte "0<"
003BD5r 3               
003BD5r 3               nt_zero_greater:
003BD5r 3  02 10                .byte 2, UF
003BD7r 3  rr rr rr rr          .word nt_zero_less, xt_zero_greater, z_zero_greater
003BDBr 3  rr rr        
003BDDr 3  30 3E                .byte "0>"
003BDFr 3               
003BDFr 3               nt_zero_unequal:
003BDFr 3  03 10                .byte 3, UF
003BE1r 3  rr rr rr rr          .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
003BE5r 3  rr rr        
003BE7r 3  30 3C 3E             .byte "0<>"
003BEAr 3               
003BEAr 3               nt_zero_equal:
003BEAr 3  02 10                .byte 2, UF
003BECr 3  rr rr rr rr          .word nt_zero_unequal, xt_zero_equal, z_zero_equal
003BF0r 3  rr rr        
003BF2r 3  30 3D                .byte "0="
003BF4r 3               
003BF4r 3               nt_greater_than:
003BF4r 3  01 10                .byte 1, UF
003BF6r 3  rr rr rr rr          .word nt_zero_equal, xt_greater_than, z_greater_than
003BFAr 3  rr rr        
003BFCr 3  3E                   .byte ">"
003BFDr 3               
003BFDr 3               nt_u_greater_than:
003BFDr 3  02 10                .byte 2, UF
003BFFr 3  rr rr rr rr          .word nt_greater_than, xt_u_greater_than, z_u_greater_than
003C03r 3  rr rr        
003C05r 3  75 3E                .byte "u>"
003C07r 3               
003C07r 3               nt_u_less_than:
003C07r 3  02 10                .byte 2, UF
003C09r 3  rr rr rr rr          .word nt_u_greater_than, xt_u_less_than, z_u_less_than
003C0Dr 3  rr rr        
003C0Fr 3  75 3C                .byte "u<"
003C11r 3               
003C11r 3               nt_less_than:
003C11r 3  01 10                .byte 1, UF
003C13r 3  rr rr rr rr          .word nt_u_less_than, xt_less_than, z_less_than
003C17r 3  rr rr        
003C19r 3  3C                   .byte "<"
003C1Ar 3               
003C1Ar 3               nt_not_equals:
003C1Ar 3  02 10                .byte 2, UF
003C1Cr 3  rr rr rr rr          .word nt_less_than, xt_not_equals, z_not_equals
003C20r 3  rr rr        
003C22r 3  3C 3E                .byte "<>"
003C24r 3               
003C24r 3               nt_equal:
003C24r 3  01 10                .byte 1, UF
003C26r 3  rr rr rr rr          .word nt_not_equals, xt_equal, z_equal
003C2Ar 3  rr rr        
003C2Cr 3  3D                   .byte "="
003C2Dr 3               
003C2Dr 3               nt_two_slash:
003C2Dr 3  02 10                .byte 2, UF
003C2Fr 3  rr rr rr rr          .word nt_equal, xt_two_slash, z_two_slash
003C33r 3  rr rr        
003C35r 3  32 2F                .byte "2/"
003C37r 3               
003C37r 3               nt_two_star:
003C37r 3  02 10                .byte 2, UF
003C39r 3  rr rr rr rr          .word nt_two_slash, xt_two_star, z_two_star
003C3Dr 3  rr rr        
003C3Fr 3  32 2A                .byte "2*"
003C41r 3               
003C41r 3               nt_one_plus:
003C41r 3  02 10                .byte 2, UF
003C43r 3  rr rr rr rr          .word nt_two_star, xt_one_plus, z_one_plus
003C47r 3  rr rr        
003C49r 3  31 2B                .byte "1+"
003C4Br 3               
003C4Br 3               nt_one_minus:
003C4Br 3  02 10                .byte 2, UF
003C4Dr 3  rr rr rr rr          .word nt_one_plus, xt_one_minus, z_one_minus
003C51r 3  rr rr        
003C53r 3  31 2D                .byte "1-"
003C55r 3               
003C55r 3               nt_here:
003C55r 3  04 00                .byte 4, 0
003C57r 3  rr rr rr rr          .word nt_one_minus, xt_here, z_here
003C5Br 3  rr rr        
003C5Dr 3  68 65 72 65          .byte "here"
003C61r 3               
003C61r 3               nt_cell_plus:
003C61r 3  05 10                .byte 5, UF
003C63r 3  rr rr rr rr          .word nt_here, xt_cell_plus, z_cell_plus
003C67r 3  rr rr        
003C69r 3  63 65 6C 6C          .byte "cell+"
003C6Dr 3  2B           
003C6Er 3               
003C6Er 3               nt_cells:
003C6Er 3  05 00                .byte 5, 0
003C70r 3  rr rr rr rr          .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
003C74r 3  rr rr        
003C76r 3  63 65 6C 6C          .byte "cells"
003C7Ar 3  73           
003C7Br 3               
003C7Br 3               nt_chars:
003C7Br 3  05 12                .byte 5, AN+UF   ; deleted during compile
003C7Dr 3  rr rr rr rr          .word nt_cells, xt_chars, z_chars
003C81r 3  rr rr        
003C83r 3  63 68 61 72          .byte "chars"
003C87r 3  73           
003C88r 3               
003C88r 3               nt_char_plus:
003C88r 3  05 00                .byte 5, 0
003C8Ar 3  rr rr rr rr          .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
003C8Er 3  rr rr        
003C90r 3  63 68 61 72          .byte "char+"
003C94r 3  2B           
003C95r 3               
003C95r 3               nt_bracket_char:
003C95r 3  06 05                .byte 6, CO+IM
003C97r 3  rr rr rr rr          .word nt_char_plus, xt_bracket_char, z_bracket_char
003C9Br 3  rr rr        
003C9Dr 3  5B 63 68 61          .byte "[char]"
003CA1r 3  72 5D        
003CA3r 3               
003CA3r 3               nt_char:
003CA3r 3  04 00                .byte 4, 0
003CA5r 3  rr rr rr rr          .word nt_bracket_char, xt_char, z_char
003CA9r 3  rr rr        
003CABr 3  63 68 61 72          .byte "char"
003CAFr 3               
003CAFr 3               nt_pick:
003CAFr 3  04 00                .byte 4, 0    ; underflow check is complicated, leave off here
003CB1r 3  rr rr rr rr          .word nt_char, xt_pick, z_pick
003CB5r 3  rr rr        
003CB7r 3  70 69 63 6B          .byte "pick"
003CBBr 3               
003CBBr 3               nt_lshift:
003CBBr 3  06 10                .byte 6, UF
003CBDr 3  rr rr rr rr          .word nt_pick, xt_lshift, z_lshift
003CC1r 3  rr rr        
003CC3r 3  6C 73 68 69          .byte "lshift"
003CC7r 3  66 74        
003CC9r 3               
003CC9r 3               nt_rshift:
003CC9r 3  06 10                .byte 6, UF
003CCBr 3  rr rr rr rr          .word nt_lshift, xt_rshift, z_rshift
003CCFr 3  rr rr        
003CD1r 3  72 73 68 69          .byte "rshift"
003CD5r 3  66 74        
003CD7r 3               
003CD7r 3               nt_xor:
003CD7r 3  03 10                .byte 3, UF
003CD9r 3  rr rr rr rr          .word nt_rshift, xt_xor, z_xor
003CDDr 3  rr rr        
003CDFr 3  78 6F 72             .byte "xor"
003CE2r 3               
003CE2r 3               nt_or:
003CE2r 3  02 10                .byte 2, UF
003CE4r 3  rr rr rr rr          .word nt_xor, xt_or, z_or
003CE8r 3  rr rr        
003CEAr 3  6F 72                .byte "or"
003CECr 3               
003CECr 3               nt_and:
003CECr 3  03 10                .byte 3, UF
003CEEr 3  rr rr rr rr          .word nt_or, xt_and, z_and
003CF2r 3  rr rr        
003CF4r 3  61 6E 64             .byte "and"
003CF7r 3               
003CF7r 3               nt_dabs:
003CF7r 3  04 10                .byte 4, UF
003CF9r 3  rr rr rr rr          .word nt_and, xt_dabs, z_dabs
003CFDr 3  rr rr        
003CFFr 3  64 61 62 73          .byte "dabs"
003D03r 3               
003D03r 3               nt_abs:
003D03r 3  03 10                .byte 3, UF
003D05r 3  rr rr rr rr          .word nt_dabs, xt_abs, z_abs
003D09r 3  rr rr        
003D0Br 3  61 62 73             .byte "abs"
003D0Er 3               
003D0Er 3               nt_minus:
003D0Er 3  01 10                .byte 1, UF
003D10r 3  rr rr rr rr          .word nt_abs, xt_minus, z_minus
003D14r 3  rr rr        
003D16r 3  2D                   .byte "-"
003D17r 3               
003D17r 3               nt_plus:
003D17r 3  01 10                .byte 1, UF
003D19r 3  rr rr rr rr          .word nt_minus, xt_plus, z_plus
003D1Dr 3  rr rr        
003D1Fr 3  2B                   .byte "+"
003D20r 3               
003D20r 3               nt_question_dup:
003D20r 3  04 10                .byte 4, UF
003D22r 3  rr rr rr rr          .word nt_plus, xt_question_dup, z_question_dup
003D26r 3  rr rr        
003D28r 3  3F 64 75 70          .byte "?dup"
003D2Cr 3               
003D2Cr 3               nt_two_dup:
003D2Cr 3  04 10                .byte 4, UF
003D2Er 3  rr rr rr rr          .word nt_question_dup, xt_two_dup, z_two_dup
003D32r 3  rr rr        
003D34r 3  32 64 75 70          .byte "2dup"
003D38r 3               
003D38r 3               nt_two:
003D38r 3  01 00                .byte 1, 0
003D3Ar 3  rr rr rr rr          .word nt_two_dup, xt_two, z_two
003D3Er 3  rr rr        
003D40r 3  32                   .byte "2"
003D41r 3               
003D41r 3               nt_one:
003D41r 3  01 00                .byte 1, 0
003D43r 3  rr rr rr rr          .word nt_two, xt_one, z_one
003D47r 3  rr rr        
003D49r 3  31                   .byte "1"
003D4Ar 3               
003D4Ar 3               nt_zero:
003D4Ar 3  01 00                .byte 1, 0
003D4Cr 3  rr rr rr rr          .word nt_one, xt_zero, z_zero
003D50r 3  rr rr        
003D52r 3  30                   .byte "0"
003D53r 3               
003D53r 3               nt_space:
003D53r 3  05 00                .byte 5, 0
003D55r 3  rr rr rr rr          .word nt_zero, xt_space, z_space
003D59r 3  rr rr        
003D5Br 3  73 70 61 63          .byte "space"
003D5Fr 3  65           
003D60r 3               
003D60r 3               nt_true:
003D60r 3  04 00                .byte 4, 0
003D62r 3  rr rr rr rr          .word nt_space, xt_true, z_true
003D66r 3  rr rr        
003D68r 3  74 72 75 65          .byte "true"
003D6Cr 3               
003D6Cr 3               nt_false:
003D6Cr 3  05 00                .byte 5, 0
003D6Er 3  rr rr rr rr          .word nt_true, xt_false, z_false
003D72r 3  rr rr        
003D74r 3  66 61 6C 73          .byte "false"
003D78r 3  65           
003D79r 3               
003D79r 3               nt_question:
003D79r 3  01 00                .byte 1, 0
003D7Br 3  rr rr rr rr          .word nt_false, xt_question, z_question
003D7Fr 3  rr rr        
003D81r 3  3F                   .byte "?"
003D82r 3               
003D82r 3               nt_ud_dot_r:
003D82r 3  04 10                .byte 4, UF
003D84r 3  rr rr rr rr          .word nt_question, xt_ud_dot_r, z_ud_dot_r
003D88r 3  rr rr        
003D8Ar 3  75 64 2E 72          .byte "ud.r"
003D8Er 3               
003D8Er 3               nt_ud_dot:
003D8Er 3  03 10                .byte 3, UF
003D90r 3  rr rr rr rr          .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
003D94r 3  rr rr        
003D96r 3  75 64 2E             .byte "ud."
003D99r 3               
003D99r 3               nt_d_dot_r:
003D99r 3  03 10                .byte 3, UF
003D9Br 3  rr rr rr rr          .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
003D9Fr 3  rr rr        
003DA1r 3  64 2E 72             .byte "d.r"
003DA4r 3               
003DA4r 3               nt_d_dot:
003DA4r 3  02 10                .byte 2, UF
003DA6r 3  rr rr rr rr          .word nt_d_dot_r, xt_d_dot, z_d_dot
003DAAr 3  rr rr        
003DACr 3  64 2E                .byte "d."
003DAEr 3               
003DAEr 3               nt_dot_r:
003DAEr 3  02 10                .byte 2, UF
003DB0r 3  rr rr rr rr          .word nt_d_dot, xt_dot_r, z_dot_r
003DB4r 3  rr rr        
003DB6r 3  2E 72                .byte ".r"
003DB8r 3               
003DB8r 3               nt_u_dot_r:
003DB8r 3  03 10                .byte 3, UF
003DBAr 3  rr rr rr rr          .word nt_dot_r, xt_u_dot_r, z_u_dot_r
003DBEr 3  rr rr        
003DC0r 3  75 2E 72             .byte "u.r"
003DC3r 3               
003DC3r 3               nt_u_dot:
003DC3r 3  02 10                .byte 2, UF
003DC5r 3  rr rr rr rr          .word nt_u_dot_r, xt_u_dot, z_u_dot
003DC9r 3  rr rr        
003DCBr 3  75 2E                .byte "u."
003DCDr 3               
003DCDr 3               nt_dot:
003DCDr 3  01 10                .byte 1, UF
003DCFr 3  rr rr rr rr          .word nt_u_dot, xt_dot, z_dot
003DD3r 3  rr rr        
003DD5r 3  2E                   .byte "."
003DD6r 3               
003DD6r 3               nt_type:
003DD6r 3  04 10                .byte 4, UF
003DD8r 3  rr rr rr rr          .word nt_dot, xt_type, z_type
003DDCr 3  rr rr        
003DDEr 3  74 79 70 65          .byte "type"
003DE2r 3               
003DE2r 3               nt_emit:
003DE2r 3  04 18                .byte 4, NN+UF
003DE4r 3  rr rr rr rr          .word nt_type, xt_emit, z_emit
003DE8r 3  rr rr        
003DEAr 3  65 6D 69 74          .byte "emit"
003DEEr 3               
003DEEr 3               nt_execute:
003DEEr 3  07 10                .byte 7, UF
003DF0r 3  rr rr rr rr          .word nt_emit, xt_execute, z_execute
003DF4r 3  rr rr        
003DF6r 3  65 78 65 63          .byte "execute"
003DFAr 3  75 74 65     
003DFDr 3               
003DFDr 3               nt_plus_store:
003DFDr 3  02 10                .byte 2, UF
003DFFr 3  rr rr rr rr          .word nt_execute, xt_plus_store, z_plus_store
003E03r 3  rr rr        
003E05r 3  2B 21                .byte "+!"
003E07r 3               
003E07r 3               nt_c_store:
003E07r 3  02 10                .byte 2, UF
003E09r 3  rr rr rr rr          .word nt_plus_store, xt_c_store, z_c_store
003E0Dr 3  rr rr        
003E0Fr 3  63 21                .byte "c!"
003E11r 3               
003E11r 3               nt_c_fetch:
003E11r 3  02 10                .byte 2, UF
003E13r 3  rr rr rr rr          .word nt_c_store, xt_c_fetch, z_c_fetch
003E17r 3  rr rr        
003E19r 3  63 40                .byte "c@"
003E1Br 3               
003E1Br 3               nt_comma:
003E1Br 3  01 10                .byte 1, UF
003E1Dr 3  rr rr rr rr          .word nt_c_fetch, xt_comma, z_comma
003E21r 3  rr rr        
003E23r 3  2C                   .byte ","
003E24r 3               
003E24r 3               nt_tuck:
003E24r 3  04 10                .byte 4, UF
003E26r 3  rr rr rr rr          .word nt_comma, xt_tuck, z_tuck
003E2Ar 3  rr rr        
003E2Cr 3  74 75 63 6B          .byte "tuck"
003E30r 3               
003E30r 3               nt_not_rote:
003E30r 3  04 10                .byte 4, UF
003E32r 3  rr rr rr rr          .word nt_tuck, xt_not_rote, z_not_rote
003E36r 3  rr rr        
003E38r 3  2D 72 6F 74          .byte "-rot"
003E3Cr 3               
003E3Cr 3               nt_rot:
003E3Cr 3  03 10                .byte 3, UF
003E3Er 3  rr rr rr rr          .word nt_not_rote, xt_rot, z_rot
003E42r 3  rr rr        
003E44r 3  72 6F 74             .byte "rot"
003E47r 3               
003E47r 3               nt_nip:
003E47r 3  03 10                .byte 3, UF
003E49r 3  rr rr rr rr          .word nt_rot, xt_nip, z_nip
003E4Dr 3  rr rr        
003E4Fr 3  6E 69 70             .byte "nip"
003E52r 3               
003E52r 3               nt_r_fetch:
003E52r 3  02 01                .byte 2, CO    ; native is special case
003E54r 3  rr rr rr rr          .word nt_nip, xt_r_fetch, z_r_fetch
003E58r 3  rr rr        
003E5Ar 3  72 40                .byte "r@"
003E5Cr 3               
003E5Cr 3               nt_r_from:
003E5Cr 3  02 01                .byte 2, CO    ; native is special case
003E5Er 3  rr rr rr rr          .word nt_r_fetch, xt_r_from, z_r_from
003E62r 3  rr rr        
003E64r 3  72 3E                .byte "r>"
003E66r 3               
003E66r 3               nt_to_r:
003E66r 3  02 11                .byte 2, CO+UF ; native is special case
003E68r 3  rr rr rr rr          .word nt_r_from, xt_to_r, z_to_r
003E6Cr 3  rr rr        
003E6Er 3  3E 72                .byte ">r"
003E70r 3               
003E70r 3               nt_over:
003E70r 3  04 10                .byte 4, UF
003E72r 3  rr rr rr rr          .word nt_to_r, xt_over, z_over
003E76r 3  rr rr        
003E78r 3  6F 76 65 72          .byte "over"
003E7Cr 3               
003E7Cr 3               nt_fetch:
003E7Cr 3  01 10                .byte 1, UF
003E7Er 3  rr rr rr rr          .word nt_over, xt_fetch, z_fetch
003E82r 3  rr rr        
003E84r 3  40                   .byte "@"
003E85r 3               
003E85r 3               nt_store:
003E85r 3  01 10                .byte 1, UF
003E87r 3  rr rr rr rr          .word nt_fetch, xt_store, z_store
003E8Br 3  rr rr        
003E8Dr 3  21                   .byte "!"
003E8Er 3               
003E8Er 3               nt_swap:
003E8Er 3  04 10                .byte 4, UF
003E90r 3  rr rr rr rr          .word nt_store, xt_swap, z_swap
003E94r 3  rr rr        
003E96r 3  73 77 61 70          .byte "swap"
003E9Ar 3               
003E9Ar 3               nt_dup:
003E9Ar 3  03 10                .byte 3, UF
003E9Cr 3  rr rr rr rr          .word nt_swap, xt_dup, z_dup
003EA0r 3  rr rr        
003EA2r 3  64 75 70             .byte "dup"
003EA5r 3               
003EA5r 3               ; DROP is always the first native word in the Dictionary
003EA5r 3               dictionary_start:
003EA5r 3               nt_drop:
003EA5r 3  04 10                .byte 4, UF
003EA7r 3  rr rr rr rr          .word nt_dup, xt_drop, z_drop
003EABr 3  rr rr        
003EADr 3  64 72 6F 70          .byte "drop"
003EB1r 3               
003EB1r 3               ; END of FORTH-WORDLIST
003EB1r 3               
003EB1r 3               
003EB1r 3               ; ROOT-WORDLIST
003EB1r 3                       ; This is a short wordlist that has just the words needed to
003EB1r 3                       ; set the wordlists. These words are also included in the
003EB1r 3                       ; FORTH-WORDLIST as well.
003EB1r 3               
003EB1r 3               nt_root_words:
003EB1r 3  05 00                .byte 5, 0
003EB3r 3  00 00 rr rr          .word 0000, xt_words, z_words
003EB7r 3  rr rr        
003EB9r 3  77 6F 72 64          .byte "words"
003EBDr 3  73           
003EBEr 3               
003EBEr 3               nt_root_forth_wordlist: ; shares code with ZERO
003EBEr 3  0E 00                .byte 14, 0
003EC0r 3  rr rr rr rr          .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
003EC4r 3  rr rr        
003EC6r 3  66 6F 72 74          .byte "forth-wordlist"
003ECAr 3  68 2D 77 6F  
003ECEr 3  72 64 6C 69  
003ED4r 3               
003ED4r 3               nt_root_forth:
003ED4r 3  05 00                .byte 5, 0
003ED6r 3  rr rr rr rr          .word nt_root_forth_wordlist, xt_forth, z_forth
003EDAr 3  rr rr        
003EDCr 3  66 6F 72 74          .byte "forth"
003EE0r 3  68           
003EE1r 3               
003EE1r 3               root_dictionary_start:
003EE1r 3               nt_root_set_order:
003EE1r 3  09 00                .byte 9, 0
003EE3r 3  rr rr rr rr          .word nt_root_forth, xt_set_order, z_set_order
003EE7r 3  rr rr        
003EE9r 3  73 65 74 2D          .byte "set-order"
003EEDr 3  6F 72 64 65  
003EF1r 3  72           
003EF2r 3               
003EF2r 3               ; END of ROOT-WORDLIST
003EF2r 3               
003EF2r 3               
003EF2r 3               ; EDITOR-WORDLIST
003EF2r 3               
003EF2r 3               nt_editor_enter_screen:
003EF2r 3  0C 00                .byte 12, 0
003EF4r 3  00 00 rr rr          .word 0000, xt_editor_enter_screen, z_editor_enter_screen
003EF8r 3  rr rr        
003EFAr 3  65 6E 74 65          .byte "enter-screen"
003EFEr 3  72 2D 73 63  
003F02r 3  72 65 65 6E  
003F06r 3               
003F06r 3               nt_editor_erase_screen:
003F06r 3  0C 00                .byte 12, 0
003F08r 3  rr rr rr rr          .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
003F0Cr 3  rr rr        
003F0Er 3  65 72 61 73          .byte "erase-screen"
003F12r 3  65 2D 73 63  
003F16r 3  72 65 65 6E  
003F1Ar 3               
003F1Ar 3               nt_editor_el:
003F1Ar 3  02 00                .byte 2, 0
003F1Cr 3  rr rr rr rr          .word nt_editor_erase_screen, xt_editor_el, z_editor_el
003F20r 3  rr rr        
003F22r 3  65 6C                .byte "el"
003F24r 3               
003F24r 3               nt_editor_l:
003F24r 3  01 00                .byte 1, 0
003F26r 3  rr rr rr rr          .word nt_editor_el, xt_editor_l, z_editor_l
003F2Ar 3  rr rr        
003F2Cr 3  6C                   .byte "l"
003F2Dr 3               
003F2Dr 3               nt_editor_line:
003F2Dr 3  04 10                .byte 4, UF
003F2Fr 3  rr rr rr rr          .word nt_editor_l, xt_editor_line, z_editor_line
003F33r 3  rr rr        
003F35r 3  6C 69 6E 65          .byte "line"
003F39r 3               
003F39r 3               editor_dictionary_start:
003F39r 3               nt_editor_o:
003F39r 3  01 00                .byte 1, 0
003F3Br 3  rr rr rr rr          .word nt_editor_line, xt_editor_o, z_editor_o
003F3Fr 3  rr rr        
003F41r 3  6F                   .byte "o"
003F42r 3               
003F42r 3               ; END of EDITOR-WORDLIST
003F42r 3               
003F42r 3               
003F42r 3               ; ; ASSEMBLER-WORDLIST
003F42r 3               
003F42r 3               ; ; Labels for the opcodes have the format "nt_asm_<OPC>" where a futher
003F42r 3               ; ; underscore replaces any dot present in the SAN mnemonic. The hash sign for
003F42r 3               ; ; immediate addressing is replaced by an "h" (for example, the label code for
003F42r 3               ; ; "lda.#" is "xt_adm_lda_h"). All opcodes are immediate.
003F42r 3               .ifdef TALI_OPTIONAL_ASSEMBLER
003F42r 3               assembler_dictionary_start:
003F42r 3               nt_asm_adc_h:
003F42r 3  05 04        		.byte 5, IM
003F44r 3  rr rr                        .word nt_asm_adc_x
003F46r 3  rr rr rr rr  		.word xt_asm_adc_h, z_asm_adc_h
003F4Ar 3  61 64 63 2E  		.byte "adc.#"
003F4Er 3  23           
003F4Fr 3               
003F4Fr 3               nt_asm_adc_x:
003F4Fr 3  05 04        		.byte 5, IM
003F51r 3  rr rr                        .word nt_asm_adc_y
003F53r 3  rr rr rr rr  		.word xt_asm_adc_x, z_asm_adc_x
003F57r 3  61 64 63 2E  		.byte "adc.x"
003F5Br 3  78           
003F5Cr 3               
003F5Cr 3               nt_asm_adc_y:
003F5Cr 3  05 04        		.byte 5, IM
003F5Er 3  rr rr                        .word nt_asm_adc_z
003F60r 3  rr rr rr rr  		.word xt_asm_adc_y, z_asm_adc_y
003F64r 3  61 64 63 2E  		.byte "adc.y"
003F68r 3  79           
003F69r 3               
003F69r 3               nt_asm_adc_z:
003F69r 3  05 04        		.byte 5, IM
003F6Br 3  rr rr                        .word nt_asm_adc_zi
003F6Dr 3  rr rr rr rr  		.word xt_asm_adc_z, z_asm_adc_z
003F71r 3  61 64 63 2E  		.byte "adc.z"
003F75r 3  7A           
003F76r 3               
003F76r 3               nt_asm_adc_zi:
003F76r 3  06 04        		.byte 6, IM
003F78r 3  rr rr                        .word nt_asm_adc_ziy
003F7Ar 3  rr rr rr rr  		.word xt_asm_adc_zi, z_asm_adc_zi
003F7Er 3  61 64 63 2E  		.byte "adc.zi"
003F82r 3  7A 69        
003F84r 3               
003F84r 3               nt_asm_adc_ziy:
003F84r 3  07 04        		.byte 7, IM
003F86r 3  rr rr                        .word nt_asm_adc_zx
003F88r 3  rr rr rr rr  		.word xt_asm_adc_ziy, z_asm_adc_ziy
003F8Cr 3  61 64 63 2E  		.byte "adc.ziy"
003F90r 3  7A 69 79     
003F93r 3               
003F93r 3               nt_asm_adc_zx:
003F93r 3  06 04        		.byte 6, IM
003F95r 3  rr rr                        .word nt_asm_adc_zxi
003F97r 3  rr rr rr rr  		.word xt_asm_adc_zx, z_asm_adc_zx
003F9Br 3  61 64 63 2E  		.byte "adc.zx"
003F9Fr 3  7A 78        
003FA1r 3               
003FA1r 3               nt_asm_adc_zxi:
003FA1r 3  07 04        		.byte 7, IM
003FA3r 3  rr rr                        .word nt_asm_and
003FA5r 3  rr rr rr rr  		.word xt_asm_adc_zxi, z_asm_adc_zxi
003FA9r 3  61 64 63 2E  		.byte "adc.zxi"
003FADr 3  7A 78 69     
003FB0r 3               
003FB0r 3               nt_asm_and:     ; not "and" because of conflicts with Forth word
003FB0r 3  04 04        		.byte 4, IM
003FB2r 3  rr rr                        .word nt_asm_and_h
003FB4r 3  rr rr rr rr  		.word xt_asm_and, z_asm_and
003FB8r 3  61 6E 64 2E  		.byte "and."
003FBCr 3               
003FBCr 3               nt_asm_and_h:
003FBCr 3  05 04        		.byte 5, IM
003FBEr 3  rr rr                        .word nt_asm_and_x
003FC0r 3  rr rr rr rr  		.word xt_asm_and_h, z_asm_and_h
003FC4r 3  61 6E 64 2E  		.byte "and.#"
003FC8r 3  23           
003FC9r 3               
003FC9r 3               nt_asm_and_x:
003FC9r 3  05 04        		.byte 5, IM
003FCBr 3  rr rr                        .word nt_asm_and_y
003FCDr 3  rr rr rr rr  		.word xt_asm_and_x, z_asm_and_x
003FD1r 3  61 6E 64 2E  		.byte "and.x"
003FD5r 3  78           
003FD6r 3               
003FD6r 3               nt_asm_and_y:
003FD6r 3  05 04        		.byte 5, IM
003FD8r 3  rr rr                        .word nt_asm_and_z
003FDAr 3  rr rr rr rr  		.word xt_asm_and_y, z_asm_and_y
003FDEr 3  61 6E 64 2E  		.byte "and.y"
003FE2r 3  79           
003FE3r 3               
003FE3r 3               nt_asm_and_z:
003FE3r 3  05 04        		.byte 5, IM
003FE5r 3  rr rr                        .word nt_asm_and_zi
003FE7r 3  rr rr rr rr  		.word xt_asm_and_z, z_asm_and_z
003FEBr 3  61 6E 64 2E  		.byte "and.z"
003FEFr 3  7A           
003FF0r 3               
003FF0r 3               nt_asm_and_zi:
003FF0r 3  06 04        		.byte 6, IM
003FF2r 3  rr rr                        .word nt_asm_and_ziy
003FF4r 3  rr rr rr rr  		.word xt_asm_and_zi, z_asm_and_zi
003FF8r 3  61 6E 64 2E  		.byte "and.zi"
003FFCr 3  7A 69        
003FFEr 3               
003FFEr 3               nt_asm_and_ziy:
003FFEr 3  07 04        		.byte 7, IM
004000r 3  rr rr                        .word nt_asm_and_zx
004002r 3  rr rr rr rr  		.word xt_asm_and_ziy, z_asm_and_ziy
004006r 3  61 6E 64 2E  		.byte "and.ziy"
00400Ar 3  7A 69 79     
00400Dr 3               
00400Dr 3               nt_asm_and_zx:
00400Dr 3  06 04        		.byte 6, IM
00400Fr 3  rr rr                        .word nt_asm_and_zxi
004011r 3  rr rr rr rr  		.word xt_asm_and_zx, z_asm_and_zx
004015r 3  61 6E 64 2E  		.byte "and.zx"
004019r 3  7A 78        
00401Br 3               
00401Br 3               nt_asm_and_zxi:
00401Br 3  07 04        		.byte 7, IM
00401Dr 3  rr rr                        .word nt_asm_asl
00401Fr 3  rr rr rr rr  		.word xt_asm_and_zxi, z_asm_and_zxi
004023r 3  61 6E 64 2E  		.byte "and.zxi"
004027r 3  7A 78 69     
00402Ar 3               
00402Ar 3               nt_asm_asl:
00402Ar 3  03 04        		.byte 3, IM
00402Cr 3  rr rr                        .word nt_asm_asl_a
00402Er 3  rr rr rr rr  		.word xt_asm_asl, z_asm_asl
004032r 3  61 73 6C     		.byte "asl"
004035r 3               
004035r 3               nt_asm_asl_a:
004035r 3  05 04        		.byte 5, IM
004037r 3  rr rr                        .word nt_asm_asl_x
004039r 3  rr rr rr rr  		.word xt_asm_asl_a, z_asm_asl_a
00403Dr 3  61 73 6C 2E  		.byte "asl.a"
004041r 3  61           
004042r 3               
004042r 3               nt_asm_asl_x:
004042r 3  05 04        		.byte 5, IM
004044r 3  rr rr                        .word nt_asm_asl_z
004046r 3  rr rr rr rr  		.word xt_asm_asl_x, z_asm_asl_x
00404Ar 3  61 73 6C 2E  		.byte "asl.x"
00404Er 3  78           
00404Fr 3               
00404Fr 3               nt_asm_asl_z:
00404Fr 3  05 04        		.byte 5, IM
004051r 3  rr rr                        .word nt_asm_asl_zx
004053r 3  rr rr rr rr  		.word xt_asm_asl_z, z_asm_asl_z
004057r 3  61 73 6C 2E  		.byte "asl.z"
00405Br 3  7A           
00405Cr 3               
00405Cr 3               nt_asm_asl_zx:
00405Cr 3  06 04        		.byte 6, IM
00405Er 3  rr rr                        .word nt_asm_bcc
004060r 3  rr rr rr rr  		.word xt_asm_asl_zx, z_asm_asl_zx
004064r 3  61 73 6C 2E  		.byte "asl.zx"
004068r 3  7A 78        
00406Ar 3               
00406Ar 3               nt_asm_bcc:
00406Ar 3  03 04        		.byte 3, IM
00406Cr 3  rr rr                        .word nt_asm_bcs
00406Er 3  rr rr rr rr  		.word xt_asm_bcc, z_asm_bcc
004072r 3  62 63 63     		.byte "bcc"
004075r 3               
004075r 3               nt_asm_bcs:
004075r 3  03 04        		.byte 3, IM
004077r 3  rr rr                        .word nt_asm_beq
004079r 3  rr rr rr rr  		.word xt_asm_bcs, z_asm_bcs
00407Dr 3  62 63 73     		.byte "bcs"
004080r 3               
004080r 3               nt_asm_beq:
004080r 3  03 04        		.byte 3, IM
004082r 3  rr rr                        .word nt_asm_bit
004084r 3  rr rr rr rr  		.word xt_asm_beq, z_asm_beq
004088r 3  62 65 71     		.byte "beq"
00408Br 3               
00408Br 3               nt_asm_bit:
00408Br 3  03 04        		.byte 3, IM
00408Dr 3  rr rr                        .word nt_asm_bit_h
00408Fr 3  rr rr rr rr  		.word xt_asm_bit, z_asm_bit
004093r 3  62 69 74     		.byte "bit"
004096r 3               
004096r 3               nt_asm_bit_h:
004096r 3  05 04        		.byte 5, IM
004098r 3  rr rr                        .word nt_asm_bit_x
00409Ar 3  rr rr rr rr  		.word xt_asm_bit_h, z_asm_bit_h
00409Er 3  62 69 74 2E  		.byte "bit.#"
0040A2r 3  23           
0040A3r 3               
0040A3r 3               nt_asm_bit_x:
0040A3r 3  05 04        		.byte 5, IM
0040A5r 3  rr rr                        .word nt_asm_bit_z
0040A7r 3  rr rr rr rr  		.word xt_asm_bit_x, z_asm_bit_x
0040ABr 3  62 69 74 2E  		.byte "bit.x"
0040AFr 3  78           
0040B0r 3               
0040B0r 3               nt_asm_bit_z:
0040B0r 3  05 04        		.byte 5, IM
0040B2r 3  rr rr                        .word nt_asm_bit_zx
0040B4r 3  rr rr rr rr  		.word xt_asm_bit_z, z_asm_bit_z
0040B8r 3  62 69 74 2E  		.byte "bit.z"
0040BCr 3  7A           
0040BDr 3               
0040BDr 3               nt_asm_bit_zx:
0040BDr 3  06 04        		.byte 6, IM
0040BFr 3  rr rr                        .word nt_asm_bmi
0040C1r 3  rr rr rr rr  		.word xt_asm_bit_zx, z_asm_bit_zx
0040C5r 3  62 69 74 2E  		.byte "bit.zx"
0040C9r 3  7A 78        
0040CBr 3               
0040CBr 3               nt_asm_bmi:
0040CBr 3  03 04        		.byte 3, IM
0040CDr 3  rr rr                        .word nt_asm_bne
0040CFr 3  rr rr rr rr  		.word xt_asm_bmi, z_asm_bmi
0040D3r 3  62 6D 69     		.byte "bmi"
0040D6r 3               
0040D6r 3               nt_asm_bne:
0040D6r 3  03 04        		.byte 3, IM
0040D8r 3  rr rr                        .word nt_asm_bpl
0040DAr 3  rr rr rr rr  		.word xt_asm_bne, z_asm_bne
0040DEr 3  62 6E 65     		.byte "bne"
0040E1r 3               
0040E1r 3               nt_asm_bpl:
0040E1r 3  03 04        		.byte 3, IM
0040E3r 3  rr rr                        .word nt_asm_bra
0040E5r 3  rr rr rr rr  		.word xt_asm_bpl, z_asm_bpl
0040E9r 3  62 70 6C     		.byte "bpl"
0040ECr 3               
0040ECr 3               nt_asm_bra:
0040ECr 3  03 04        		.byte 3, IM
0040EEr 3  rr rr                        .word nt_asm_brk
0040F0r 3  rr rr rr rr  		.word xt_asm_bra, z_asm_bra
0040F4r 3  62 72 61     		.byte "bra"
0040F7r 3               
0040F7r 3               nt_asm_brk:
0040F7r 3  03 04        		.byte 3, IM
0040F9r 3  rr rr                        .word nt_asm_bvc
0040FBr 3  rr rr rr rr  		.word xt_asm_brk, z_asm_brk
0040FFr 3  62 72 6B     		.byte "brk"
004102r 3               
004102r 3               nt_asm_bvc:
004102r 3  03 04        		.byte 3, IM
004104r 3  rr rr                        .word nt_asm_bvs
004106r 3  rr rr rr rr  		.word xt_asm_bvc, z_asm_bvc
00410Ar 3  62 76 63     		.byte "bvc"
00410Dr 3               
00410Dr 3               nt_asm_bvs:
00410Dr 3  03 04        		.byte 3, IM
00410Fr 3  rr rr                        .word nt_asm_clc
004111r 3  rr rr rr rr  		.word xt_asm_bvs, z_asm_bvs
004115r 3  62 76 73     		.byte "bvs"
004118r 3               
004118r 3               nt_asm_clc:
004118r 3  03 04        		.byte 3, IM
00411Ar 3  rr rr                        .word nt_asm_cld
00411Cr 3  rr rr rr rr  		.word xt_asm_clc, z_asm_clc
004120r 3  63 6C 63     		.byte "clc"
004123r 3               
004123r 3               nt_asm_cld:
004123r 3  03 04        		.byte 3, IM
004125r 3  rr rr                        .word nt_asm_cli
004127r 3  rr rr rr rr  		.word xt_asm_cld, z_asm_cld
00412Br 3  63 6C 64     		.byte "cld"
00412Er 3               
00412Er 3               nt_asm_cli:
00412Er 3  03 04        		.byte 3, IM
004130r 3  rr rr                        .word nt_asm_clv
004132r 3  rr rr rr rr  		.word xt_asm_cli, z_asm_cli
004136r 3  63 6C 69     		.byte "cli"
004139r 3               
004139r 3               nt_asm_clv:
004139r 3  03 04        		.byte 3, IM
00413Br 3  rr rr                        .word nt_asm_cmp
00413Dr 3  rr rr rr rr  		.word xt_asm_clv, z_asm_clv
004141r 3  63 6C 76     		.byte "clv"
004144r 3               
004144r 3               nt_asm_cmp:
004144r 3  03 04        		.byte 3, IM
004146r 3  rr rr                        .word nt_asm_cmp_h
004148r 3  rr rr rr rr  		.word xt_asm_cmp, z_asm_cmp
00414Cr 3  63 6D 70     		.byte "cmp"
00414Fr 3               
00414Fr 3               nt_asm_cmp_h:
00414Fr 3  05 04        		.byte 5, IM
004151r 3  rr rr                        .word nt_asm_cmp_x
004153r 3  rr rr rr rr  		.word xt_asm_cmp_h, z_asm_cmp_h
004157r 3  63 6D 70 2E  		.byte "cmp.#"
00415Br 3  23           
00415Cr 3               
00415Cr 3               nt_asm_cmp_x:
00415Cr 3  05 04        		.byte 5, IM
00415Er 3  rr rr                        .word nt_asm_cmp_y
004160r 3  rr rr rr rr  		.word xt_asm_cmp_x, z_asm_cmp_x
004164r 3  63 6D 70 2E  		.byte "cmp.x"
004168r 3  78           
004169r 3               
004169r 3               nt_asm_cmp_y:
004169r 3  05 04        		.byte 5, IM
00416Br 3  rr rr                        .word nt_asm_cmp_z
00416Dr 3  rr rr rr rr  		.word xt_asm_cmp_y, z_asm_cmp_y
004171r 3  63 6D 70 2E  		.byte "cmp.y"
004175r 3  79           
004176r 3               
004176r 3               nt_asm_cmp_z:
004176r 3  05 04        		.byte 5, IM
004178r 3  rr rr                        .word nt_asm_cmp_zi
00417Ar 3  rr rr rr rr  		.word xt_asm_cmp_z, z_asm_cmp_z
00417Er 3  63 6D 70 2E  		.byte "cmp.z"
004182r 3  7A           
004183r 3               
004183r 3               nt_asm_cmp_zi:
004183r 3  06 04        		.byte 6, IM
004185r 3  rr rr                        .word nt_asm_cmp_ziy
004187r 3  rr rr rr rr  		.word xt_asm_cmp_zi, z_asm_cmp_zi
00418Br 3  63 6D 70 2E  		.byte "cmp.zi"
00418Fr 3  7A 69        
004191r 3               
004191r 3               nt_asm_cmp_ziy:
004191r 3  07 04        		.byte 7, IM
004193r 3  rr rr                        .word nt_asm_cmp_zx
004195r 3  rr rr rr rr  		.word xt_asm_cmp_ziy, z_asm_cmp_ziy
004199r 3  63 6D 70 2E  		.byte "cmp.ziy"
00419Dr 3  7A 69 79     
0041A0r 3               
0041A0r 3               nt_asm_cmp_zx:
0041A0r 3  06 04        		.byte 6, IM
0041A2r 3  rr rr                        .word nt_asm_cmp_zxi
0041A4r 3  rr rr rr rr  		.word xt_asm_cmp_zx, z_asm_cmp_zx
0041A8r 3  63 6D 70 2E  		.byte "cmp.zx"
0041ACr 3  7A 78        
0041AEr 3               
0041AEr 3               nt_asm_cmp_zxi:
0041AEr 3  07 04        		.byte 7, IM
0041B0r 3  rr rr                        .word nt_asm_cpx
0041B2r 3  rr rr rr rr  		.word xt_asm_cmp_zxi, z_asm_cmp_zxi
0041B6r 3  63 6D 70 2E  		.byte "cmp.zxi"
0041BAr 3  7A 78 69     
0041BDr 3               
0041BDr 3               nt_asm_cpx:
0041BDr 3  03 04        		.byte 3, IM
0041BFr 3  rr rr                        .word nt_asm_cpx_h
0041C1r 3  rr rr rr rr  		.word xt_asm_cpx, z_asm_cpx
0041C5r 3  63 70 78     		.byte "cpx"
0041C8r 3               
0041C8r 3               nt_asm_cpx_h:
0041C8r 3  05 04        		.byte 5, IM
0041CAr 3  rr rr                        .word nt_asm_cpx_z
0041CCr 3  rr rr rr rr  		.word xt_asm_cpx_h, z_asm_cpx_h
0041D0r 3  63 70 78 2E  		.byte "cpx.#"
0041D4r 3  23           
0041D5r 3               
0041D5r 3               nt_asm_cpx_z:
0041D5r 3  05 04        		.byte 5, IM
0041D7r 3  rr rr                        .word nt_asm_cpy
0041D9r 3  rr rr rr rr  		.word xt_asm_cpx_z, z_asm_cpx_z
0041DDr 3  63 70 78 2E  		.byte "cpx.z"
0041E1r 3  7A           
0041E2r 3               
0041E2r 3               nt_asm_cpy:
0041E2r 3  03 04        		.byte 3, IM
0041E4r 3  rr rr                        .word nt_asm_cpy_h
0041E6r 3  rr rr rr rr  		.word xt_asm_cpy, z_asm_cpy
0041EAr 3  63 70 79     		.byte "cpy"
0041EDr 3               
0041EDr 3               nt_asm_cpy_h:
0041EDr 3  05 04        		.byte 5, IM
0041EFr 3  rr rr                        .word nt_asm_cpy_z
0041F1r 3  rr rr rr rr  		.word xt_asm_cpy_h, z_asm_cpy_h
0041F5r 3  63 70 79 2E  		.byte "cpy.#"
0041F9r 3  23           
0041FAr 3               
0041FAr 3               nt_asm_cpy_z:
0041FAr 3  05 04        		.byte 5, IM
0041FCr 3  rr rr                        .word nt_asm_dec
0041FEr 3  rr rr rr rr  		.word xt_asm_cpy_z, z_asm_cpy_z
004202r 3  63 70 79 2E  		.byte "cpy.z"
004206r 3  7A           
004207r 3               
004207r 3               nt_asm_dec:
004207r 3  03 04        		.byte 3, IM
004209r 3  rr rr                        .word nt_asm_dec_a
00420Br 3  rr rr rr rr  		.word xt_asm_dec, z_asm_dec
00420Fr 3  64 65 63     		.byte "dec"
004212r 3               
004212r 3               nt_asm_dec_a:
004212r 3  05 04        		.byte 5, IM
004214r 3  rr rr                        .word nt_asm_dec_x
004216r 3  rr rr rr rr  		.word xt_asm_dec_a, z_asm_dec_a
00421Ar 3  64 65 63 2E  		.byte "dec.a"
00421Er 3  61           
00421Fr 3               
00421Fr 3               nt_asm_dec_x:
00421Fr 3  05 04        		.byte 5, IM
004221r 3  rr rr                        .word nt_asm_dec_z
004223r 3  rr rr rr rr  		.word xt_asm_dec_x, z_asm_dec_x
004227r 3  64 65 63 2E  		.byte "dec.x"
00422Br 3  78           
00422Cr 3               
00422Cr 3               nt_asm_dec_z:
00422Cr 3  05 04        		.byte 5, IM
00422Er 3  rr rr                        .word nt_asm_dec_zx
004230r 3  rr rr rr rr  		.word xt_asm_dec_z, z_asm_dec_z
004234r 3  64 65 63 2E  		.byte "dec.z"
004238r 3  7A           
004239r 3               
004239r 3               nt_asm_dec_zx:
004239r 3  06 04        		.byte 6, IM
00423Br 3  rr rr                        .word nt_asm_dex
00423Dr 3  rr rr rr rr  		.word xt_asm_dec_zx, z_asm_dec_zx
004241r 3  64 65 63 2E  		.byte "dec.zx"
004245r 3  7A 78        
004247r 3               
004247r 3               nt_asm_dex:
004247r 3  03 04        		.byte 3, IM
004249r 3  rr rr                        .word nt_asm_dey
00424Br 3  rr rr rr rr  		.word xt_asm_dex, z_asm_dex
00424Fr 3  64 65 78     		.byte "dex"
004252r 3               
004252r 3               nt_asm_dey:
004252r 3  03 04        		.byte 3, IM
004254r 3  rr rr                        .word nt_asm_eor
004256r 3  rr rr rr rr  		.word xt_asm_dey, z_asm_dey
00425Ar 3  64 65 79     		.byte "dey"
00425Dr 3               
00425Dr 3               nt_asm_eor:
00425Dr 3  03 04        		.byte 3, IM
00425Fr 3  rr rr                        .word nt_asm_eor_h
004261r 3  rr rr rr rr  		.word xt_asm_eor, z_asm_eor
004265r 3  65 6F 72     		.byte "eor"
004268r 3               
004268r 3               nt_asm_eor_h:
004268r 3  05 04        		.byte 5, IM
00426Ar 3  rr rr                        .word nt_asm_eor_x
00426Cr 3  rr rr rr rr  		.word xt_asm_eor_h, z_asm_eor_h
004270r 3  65 6F 72 2E  		.byte "eor.#"
004274r 3  23           
004275r 3               
004275r 3               nt_asm_eor_x:
004275r 3  05 04        		.byte 5, IM
004277r 3  rr rr                        .word nt_asm_eor_y
004279r 3  rr rr rr rr  		.word xt_asm_eor_x, z_asm_eor_x
00427Dr 3  65 6F 72 2E  		.byte "eor.x"
004281r 3  78           
004282r 3               
004282r 3               nt_asm_eor_y:
004282r 3  05 04        		.byte 5, IM
004284r 3  rr rr                        .word nt_asm_eor_z
004286r 3  rr rr rr rr  		.word xt_asm_eor_y, z_asm_eor_y
00428Ar 3  65 6F 72 2E  		.byte "eor.y"
00428Er 3  79           
00428Fr 3               
00428Fr 3               nt_asm_eor_z:
00428Fr 3  05 04        		.byte 5, IM
004291r 3  rr rr                        .word nt_asm_eor_zi
004293r 3  rr rr rr rr  		.word xt_asm_eor_z, z_asm_eor_z
004297r 3  65 6F 72 2E  		.byte "eor.z"
00429Br 3  7A           
00429Cr 3               
00429Cr 3               nt_asm_eor_zi:
00429Cr 3  06 04        		.byte 6, IM
00429Er 3  rr rr                        .word nt_asm_eor_ziy
0042A0r 3  rr rr rr rr  		.word xt_asm_eor_zi, z_asm_eor_zi
0042A4r 3  65 6F 72 2E  		.byte "eor.zi"
0042A8r 3  7A 69        
0042AAr 3               
0042AAr 3               nt_asm_eor_ziy:
0042AAr 3  07 04        		.byte 7, IM
0042ACr 3  rr rr                        .word nt_asm_eor_zx
0042AEr 3  rr rr rr rr  		.word xt_asm_eor_ziy, z_asm_eor_ziy
0042B2r 3  65 6F 72 2E  		.byte "eor.ziy"
0042B6r 3  7A 69 79     
0042B9r 3               
0042B9r 3               nt_asm_eor_zx:
0042B9r 3  06 04        		.byte 6, IM
0042BBr 3  rr rr                        .word nt_asm_eor_zxi
0042BDr 3  rr rr rr rr  		.word xt_asm_eor_zx, z_asm_eor_zx
0042C1r 3  65 6F 72 2E  		.byte "eor.zx"
0042C5r 3  7A 78        
0042C7r 3               
0042C7r 3               nt_asm_eor_zxi:
0042C7r 3  07 04        		.byte 7, IM
0042C9r 3  rr rr                        .word nt_asm_inc
0042CBr 3  rr rr rr rr  		.word xt_asm_eor_zxi, z_asm_eor_zxi
0042CFr 3  65 6F 72 2E  		.byte "eor.zxi"
0042D3r 3  7A 78 69     
0042D6r 3               
0042D6r 3               nt_asm_inc:
0042D6r 3  03 04        		.byte 3, IM
0042D8r 3  rr rr                        .word nt_asm_inc_a
0042DAr 3  rr rr rr rr  		.word xt_asm_inc, z_asm_inc
0042DEr 3  69 6E 63     		.byte "inc"
0042E1r 3               
0042E1r 3               nt_asm_inc_a:
0042E1r 3  05 04        		.byte 5, IM
0042E3r 3  rr rr                        .word nt_asm_inc_x
0042E5r 3  rr rr rr rr  		.word xt_asm_inc_a, z_asm_inc_a
0042E9r 3  69 6E 63 2E  		.byte "inc.a"
0042EDr 3  61           
0042EEr 3               
0042EEr 3               nt_asm_inc_x:
0042EEr 3  05 04        		.byte 5, IM
0042F0r 3  rr rr                        .word nt_asm_inc_z
0042F2r 3  rr rr rr rr  		.word xt_asm_inc_x, z_asm_inc_x
0042F6r 3  69 6E 63 2E  		.byte "inc.x"
0042FAr 3  78           
0042FBr 3               
0042FBr 3               nt_asm_inc_z:
0042FBr 3  05 04        		.byte 5, IM
0042FDr 3  rr rr                        .word nt_asm_inc_zx
0042FFr 3  rr rr rr rr  		.word xt_asm_inc_z, z_asm_inc_z
004303r 3  69 6E 63 2E  		.byte "inc.z"
004307r 3  7A           
004308r 3               
004308r 3               nt_asm_inc_zx:
004308r 3  06 04        		.byte 6, IM
00430Ar 3  rr rr                        .word nt_asm_inx
00430Cr 3  rr rr rr rr  		.word xt_asm_inc_zx, z_asm_inc_zx
004310r 3  69 6E 63 2E  		.byte "inc.zx"
004314r 3  7A 78        
004316r 3               
004316r 3               nt_asm_inx:
004316r 3  03 04        		.byte 3, IM
004318r 3  rr rr                        .word nt_asm_iny
00431Ar 3  rr rr rr rr  		.word xt_asm_inx, z_asm_inx
00431Er 3  69 6E 78     		.byte "inx"
004321r 3               
004321r 3               nt_asm_iny:
004321r 3  03 04        		.byte 3, IM
004323r 3  rr rr                        .word nt_asm_jmp
004325r 3  rr rr rr rr  		.word xt_asm_iny, z_asm_iny
004329r 3  69 6E 79     		.byte "iny"
00432Cr 3               
00432Cr 3               nt_asm_jmp:
00432Cr 3  03 04        		.byte 3, IM
00432Er 3  rr rr                        .word nt_asm_jmp_i
004330r 3  rr rr rr rr  		.word xt_asm_jmp, z_asm_jmp
004334r 3  6A 6D 70     		.byte "jmp"
004337r 3               
004337r 3               nt_asm_jmp_i:
004337r 3  05 04        		.byte 5, IM
004339r 3  rr rr                        .word nt_asm_jmp_xi
00433Br 3  rr rr rr rr  		.word xt_asm_jmp_i, z_asm_jmp_i
00433Fr 3  6A 6D 70 2E  		.byte "jmp.i"
004343r 3  69           
004344r 3               
004344r 3               nt_asm_jmp_xi:
004344r 3  06 04        		.byte 6, IM
004346r 3  rr rr                        .word nt_asm_jsr
004348r 3  rr rr rr rr  		.word xt_asm_jmp_xi, z_asm_jmp_xi
00434Cr 3  6A 6D 70 2E  		.byte "jmp.xi"
004350r 3  78 69        
004352r 3               
004352r 3               nt_asm_jsr:
004352r 3  03 04        		.byte 3, IM
004354r 3  rr rr                        .word nt_asm_lda
004356r 3  rr rr rr rr  		.word xt_asm_jsr, z_asm_jsr
00435Ar 3  6A 73 72     		.byte "jsr"
00435Dr 3               
00435Dr 3               nt_asm_lda:
00435Dr 3  03 04        		.byte 3, IM
00435Fr 3  rr rr                        .word nt_asm_lda_h
004361r 3  rr rr rr rr  		.word xt_asm_lda, z_asm_lda
004365r 3  6C 64 61     		.byte "lda"
004368r 3               
004368r 3               nt_asm_lda_h:
004368r 3  05 04        		.byte 5, IM
00436Ar 3  rr rr                        .word nt_asm_lda_x
00436Cr 3  rr rr rr rr  		.word xt_asm_lda_h, z_asm_lda_h
004370r 3  6C 64 61 2E  		.byte "lda.#"
004374r 3  23           
004375r 3               
004375r 3               nt_asm_lda_x:
004375r 3  05 04        		.byte 5, IM
004377r 3  rr rr                        .word nt_asm_lda_y
004379r 3  rr rr rr rr  		.word xt_asm_lda_x, z_asm_lda_x
00437Dr 3  6C 64 61 2E  		.byte "lda.x"
004381r 3  78           
004382r 3               
004382r 3               nt_asm_lda_y:
004382r 3  05 04        		.byte 5, IM
004384r 3  rr rr                        .word nt_asm_lda_z
004386r 3  rr rr rr rr  		.word xt_asm_lda_y, z_asm_lda_y
00438Ar 3  6C 64 61 2E  		.byte "lda.y"
00438Er 3  79           
00438Fr 3               
00438Fr 3               nt_asm_lda_z:
00438Fr 3  05 04        		.byte 5, IM
004391r 3  rr rr                        .word nt_asm_lda_zi
004393r 3  rr rr rr rr  		.word xt_asm_lda_z, z_asm_lda_z
004397r 3  6C 64 61 2E  		.byte "lda.z"
00439Br 3  7A           
00439Cr 3               
00439Cr 3               nt_asm_lda_zi:
00439Cr 3  06 04        		.byte 6, IM
00439Er 3  rr rr                        .word nt_asm_lda_ziy
0043A0r 3  rr rr rr rr  		.word xt_asm_lda_zi, z_asm_lda_zi
0043A4r 3  6C 64 61 2E  		.byte "lda.zi"
0043A8r 3  7A 69        
0043AAr 3               
0043AAr 3               nt_asm_lda_ziy:
0043AAr 3  07 04        		.byte 7, IM
0043ACr 3  rr rr                        .word nt_asm_lda_zx
0043AEr 3  rr rr rr rr  		.word xt_asm_lda_ziy, z_asm_lda_ziy
0043B2r 3  6C 64 61 2E  		.byte "lda.ziy"
0043B6r 3  7A 69 79     
0043B9r 3               
0043B9r 3               nt_asm_lda_zx:
0043B9r 3  06 04        		.byte 6, IM
0043BBr 3  rr rr                        .word nt_asm_lda_zxi
0043BDr 3  rr rr rr rr  		.word xt_asm_lda_zx, z_asm_lda_zx
0043C1r 3  6C 64 61 2E  		.byte "lda.zx"
0043C5r 3  7A 78        
0043C7r 3               
0043C7r 3               nt_asm_lda_zxi:
0043C7r 3  07 04        		.byte 7, IM
0043C9r 3  rr rr                        .word nt_asm_ldx
0043CBr 3  rr rr rr rr  		.word xt_asm_lda_zxi, z_asm_lda_zxi
0043CFr 3  6C 64 61 2E  		.byte "lda.zxi"
0043D3r 3  7A 78 69     
0043D6r 3               
0043D6r 3               nt_asm_ldx:
0043D6r 3  03 04        		.byte 3, IM
0043D8r 3  rr rr                        .word nt_asm_ldx_h
0043DAr 3  rr rr rr rr  		.word xt_asm_ldx, z_asm_ldx
0043DEr 3  6C 64 78     		.byte "ldx"
0043E1r 3               
0043E1r 3               nt_asm_ldx_h:
0043E1r 3  05 04        		.byte 5, IM
0043E3r 3  rr rr                        .word nt_asm_ldx_y
0043E5r 3  rr rr rr rr  		.word xt_asm_ldx_h, z_asm_ldx_h
0043E9r 3  6C 64 78 2E  		.byte "ldx.#"
0043EDr 3  23           
0043EEr 3               
0043EEr 3               nt_asm_ldx_y:
0043EEr 3  05 04        		.byte 5, IM
0043F0r 3  rr rr                        .word nt_asm_ldx_z
0043F2r 3  rr rr rr rr  		.word xt_asm_ldx_y, z_asm_ldx_y
0043F6r 3  6C 64 78 2E  		.byte "ldx.y"
0043FAr 3  79           
0043FBr 3               
0043FBr 3               nt_asm_ldx_z:
0043FBr 3  05 04        		.byte 5, IM
0043FDr 3  rr rr                        .word nt_asm_ldx_zy
0043FFr 3  rr rr rr rr  		.word xt_asm_ldx_z, z_asm_ldx_z
004403r 3  6C 64 78 2E  		.byte "ldx.z"
004407r 3  7A           
004408r 3               
004408r 3               nt_asm_ldx_zy:
004408r 3  06 04        		.byte 6, IM
00440Ar 3  rr rr                        .word nt_asm_ldy
00440Cr 3  rr rr rr rr  		.word xt_asm_ldx_zy, z_asm_ldx_zy
004410r 3  6C 64 78 2E  		.byte "ldx.zy"
004414r 3  7A 79        
004416r 3               
004416r 3               nt_asm_ldy:
004416r 3  03 04        		.byte 3, IM
004418r 3  rr rr                        .word nt_asm_ldy_h
00441Ar 3  rr rr rr rr  		.word xt_asm_ldy, z_asm_ldy
00441Er 3  6C 64 79     		.byte "ldy"
004421r 3               
004421r 3               nt_asm_ldy_h:
004421r 3  05 04        		.byte 5, IM
004423r 3  rr rr                        .word nt_asm_ldy_x
004425r 3  rr rr rr rr  		.word xt_asm_ldy_h, z_asm_ldy_h
004429r 3  6C 64 79 2E  		.byte "ldy.#"
00442Dr 3  23           
00442Er 3               
00442Er 3               nt_asm_ldy_x:
00442Er 3  05 04        		.byte 5, IM
004430r 3  rr rr                        .word nt_asm_ldy_z
004432r 3  rr rr rr rr  		.word xt_asm_ldy_x, z_asm_ldy_x
004436r 3  6C 64 79 2E  		.byte "ldy.x"
00443Ar 3  78           
00443Br 3               
00443Br 3               nt_asm_ldy_z:
00443Br 3  05 04        		.byte 5, IM
00443Dr 3  rr rr                        .word nt_asm_ldy_zx
00443Fr 3  rr rr rr rr  		.word xt_asm_ldy_z, z_asm_ldy_z
004443r 3  6C 64 79 2E  		.byte "ldy.z"
004447r 3  7A           
004448r 3               
004448r 3               nt_asm_ldy_zx:
004448r 3  06 04        		.byte 6, IM
00444Ar 3  rr rr                        .word nt_asm_lsr
00444Cr 3  rr rr rr rr  		.word xt_asm_ldy_zx, z_asm_ldy_zx
004450r 3  6C 64 79 2E  		.byte "ldy.zx"
004454r 3  7A 78        
004456r 3               
004456r 3               nt_asm_lsr:
004456r 3  03 04        		.byte 3, IM
004458r 3  rr rr                        .word nt_asm_lsr_a
00445Ar 3  rr rr rr rr  		.word xt_asm_lsr, z_asm_lsr
00445Er 3  6C 73 72     		.byte "lsr"
004461r 3               
004461r 3               nt_asm_lsr_a:
004461r 3  05 04        		.byte 5, IM
004463r 3  rr rr                        .word nt_asm_lsr_x
004465r 3  rr rr rr rr  		.word xt_asm_lsr_a, z_asm_lsr_a
004469r 3  6C 73 72 2E  		.byte "lsr.a"
00446Dr 3  61           
00446Er 3               
00446Er 3               nt_asm_lsr_x:
00446Er 3  05 04        		.byte 5, IM
004470r 3  rr rr                        .word nt_asm_lsr_z
004472r 3  rr rr rr rr  		.word xt_asm_lsr_x, z_asm_lsr_x
004476r 3  6C 73 72 2E  		.byte "lsr.x"
00447Ar 3  78           
00447Br 3               
00447Br 3               nt_asm_lsr_z:
00447Br 3  05 04        		.byte 5, IM
00447Dr 3  rr rr                        .word nt_asm_lsr_zx
00447Fr 3  rr rr rr rr  		.word xt_asm_lsr_z, z_asm_lsr_z
004483r 3  6C 73 72 2E  		.byte "lsr.z"
004487r 3  7A           
004488r 3               
004488r 3               nt_asm_lsr_zx:
004488r 3  06 04        		.byte 6, IM
00448Ar 3  rr rr                        .word nt_asm_nop
00448Cr 3  rr rr rr rr  		.word xt_asm_lsr_zx, z_asm_lsr_zx
004490r 3  6C 73 72 2E  		.byte "lsr.zx"
004494r 3  7A 78        
004496r 3               
004496r 3               nt_asm_nop:
004496r 3  03 04        		.byte 3, IM
004498r 3  rr rr                        .word nt_asm_ora
00449Ar 3  rr rr rr rr  		.word xt_asm_nop, z_asm_nop
00449Er 3  6E 6F 70     		.byte "nop"
0044A1r 3               
0044A1r 3               nt_asm_ora:
0044A1r 3  03 04        		.byte 3, IM
0044A3r 3  rr rr                        .word nt_asm_ora_h
0044A5r 3  rr rr rr rr  		.word xt_asm_ora, z_asm_ora
0044A9r 3  6F 72 61     		.byte "ora"
0044ACr 3               
0044ACr 3               nt_asm_ora_h:
0044ACr 3  05 04        		.byte 5, IM
0044AEr 3  rr rr                        .word nt_asm_ora_x
0044B0r 3  rr rr rr rr  		.word xt_asm_ora_h, z_asm_ora_h
0044B4r 3  6F 72 61 2E  		.byte "ora.#"
0044B8r 3  23           
0044B9r 3               
0044B9r 3               nt_asm_ora_x:
0044B9r 3  05 04        		.byte 5, IM
0044BBr 3  rr rr                        .word nt_asm_ora_y
0044BDr 3  rr rr rr rr  		.word xt_asm_ora_x, z_asm_ora_x
0044C1r 3  6F 72 61 2E  		.byte "ora.x"
0044C5r 3  78           
0044C6r 3               
0044C6r 3               nt_asm_ora_y:
0044C6r 3  05 04        		.byte 5, IM
0044C8r 3  rr rr                        .word nt_asm_ora_z
0044CAr 3  rr rr rr rr  		.word xt_asm_ora_y, z_asm_ora_y
0044CEr 3  6F 72 61 2E  		.byte "ora.y"
0044D2r 3  79           
0044D3r 3               
0044D3r 3               nt_asm_ora_z:
0044D3r 3  05 04        		.byte 5, IM
0044D5r 3  rr rr                        .word nt_asm_ora_zi
0044D7r 3  rr rr rr rr  		.word xt_asm_ora_z, z_asm_ora_z
0044DBr 3  6F 72 61 2E  		.byte "ora.z"
0044DFr 3  7A           
0044E0r 3               
0044E0r 3               nt_asm_ora_zi:
0044E0r 3  06 04        		.byte 6, IM
0044E2r 3  rr rr                        .word nt_asm_ora_ziy
0044E4r 3  rr rr rr rr  		.word xt_asm_ora_zi, z_asm_ora_zi
0044E8r 3  6F 72 61 2E  		.byte "ora.zi"
0044ECr 3  7A 69        
0044EEr 3               
0044EEr 3               nt_asm_ora_ziy:
0044EEr 3  07 04        		.byte 7, IM
0044F0r 3  rr rr                        .word nt_asm_ora_zx
0044F2r 3  rr rr rr rr  		.word xt_asm_ora_ziy, z_asm_ora_ziy
0044F6r 3  6F 72 61 2E  		.byte "ora.ziy"
0044FAr 3  7A 69 79     
0044FDr 3               
0044FDr 3               nt_asm_ora_zx:
0044FDr 3  06 04        		.byte 6, IM
0044FFr 3  rr rr                        .word nt_asm_ora_zxi
004501r 3  rr rr rr rr  		.word xt_asm_ora_zx, z_asm_ora_zx
004505r 3  6F 72 61 2E  		.byte "ora.zx"
004509r 3  7A 78        
00450Br 3               
00450Br 3               nt_asm_ora_zxi:
00450Br 3  07 04        		.byte 7, IM
00450Dr 3  rr rr                        .word nt_asm_pha
00450Fr 3  rr rr rr rr  		.word xt_asm_ora_zxi, z_asm_ora_zxi
004513r 3  6F 72 61 2E  		.byte "ora.zxi"
004517r 3  7A 78 69     
00451Ar 3               
00451Ar 3               nt_asm_pha:
00451Ar 3  03 04        		.byte 3, IM
00451Cr 3  rr rr                        .word nt_asm_php
00451Er 3  rr rr rr rr  		.word xt_asm_pha, z_asm_pha
004522r 3  70 68 61     		.byte "pha"
004525r 3               
004525r 3               nt_asm_php:
004525r 3  03 04        		.byte 3, IM
004527r 3  rr rr                        .word nt_asm_phx
004529r 3  rr rr rr rr  		.word xt_asm_php, z_asm_php
00452Dr 3  70 68 70     		.byte "php"
004530r 3               
004530r 3               nt_asm_phx:
004530r 3  03 04        		.byte 3, IM
004532r 3  rr rr                        .word nt_asm_phy
004534r 3  rr rr rr rr  		.word xt_asm_phx, z_asm_phx
004538r 3  70 68 78     		.byte "phx"
00453Br 3               
00453Br 3               nt_asm_phy:
00453Br 3  03 04        		.byte 3, IM
00453Dr 3  rr rr                        .word nt_asm_pla
00453Fr 3  rr rr rr rr  		.word xt_asm_phy, z_asm_phy
004543r 3  70 68 79     		.byte "phy"
004546r 3               
004546r 3               nt_asm_pla:
004546r 3  03 04        		.byte 3, IM
004548r 3  rr rr                        .word nt_asm_plp
00454Ar 3  rr rr rr rr  		.word xt_asm_pla, z_asm_pla
00454Er 3  70 6C 61     		.byte "pla"
004551r 3               
004551r 3               nt_asm_plp:
004551r 3  03 04        		.byte 3, IM
004553r 3  rr rr                        .word nt_asm_plx
004555r 3  rr rr rr rr  		.word xt_asm_plp, z_asm_plp
004559r 3  70 6C 70     		.byte "plp"
00455Cr 3               
00455Cr 3               nt_asm_plx:
00455Cr 3  03 04        		.byte 3, IM
00455Er 3  rr rr                        .word nt_asm_ply
004560r 3  rr rr rr rr  		.word xt_asm_plx, z_asm_plx
004564r 3  70 6C 78     		.byte "plx"
004567r 3               
004567r 3               nt_asm_ply:
004567r 3  03 04        		.byte 3, IM
004569r 3  rr rr                        .word nt_asm_rol
00456Br 3  rr rr rr rr  		.word xt_asm_ply, z_asm_ply
00456Fr 3  70 6C 79     		.byte "ply"
004572r 3               
004572r 3               nt_asm_rol:
004572r 3  03 04        		.byte 3, IM
004574r 3  rr rr                        .word nt_asm_rol_a
004576r 3  rr rr rr rr  		.word xt_asm_rol, z_asm_rol
00457Ar 3  72 6F 6C     		.byte "rol"
00457Dr 3               
00457Dr 3               nt_asm_rol_a:
00457Dr 3  05 04        		.byte 5, IM
00457Fr 3  rr rr                        .word nt_asm_rol_x
004581r 3  rr rr rr rr  		.word xt_asm_rol_a, z_asm_rol_a
004585r 3  72 6F 6C 2E  		.byte "rol.a"
004589r 3  61           
00458Ar 3               
00458Ar 3               nt_asm_rol_x:
00458Ar 3  05 04        		.byte 5, IM
00458Cr 3  rr rr                        .word nt_asm_rol_z
00458Er 3  rr rr rr rr  		.word xt_asm_rol_x, z_asm_rol_x
004592r 3  72 6F 6C 2E  		.byte "rol.x"
004596r 3  78           
004597r 3               
004597r 3               nt_asm_rol_z:
004597r 3  05 04        		.byte 5, IM
004599r 3  rr rr                        .word nt_asm_rol_zx
00459Br 3  rr rr rr rr  		.word xt_asm_rol_z, z_asm_rol_z
00459Fr 3  72 6F 6C 2E  		.byte "rol.z"
0045A3r 3  7A           
0045A4r 3               
0045A4r 3               nt_asm_rol_zx:
0045A4r 3  06 04        		.byte 6, IM
0045A6r 3  rr rr                        .word nt_asm_ror
0045A8r 3  rr rr rr rr  		.word xt_asm_rol_zx, z_asm_rol_zx
0045ACr 3  72 6F 6C 2E  		.byte "rol.zx"
0045B0r 3  7A 78        
0045B2r 3               
0045B2r 3               nt_asm_ror:
0045B2r 3  03 04        		.byte 3, IM
0045B4r 3  rr rr                        .word nt_asm_ror_a
0045B6r 3  rr rr rr rr  		.word xt_asm_ror, z_asm_ror
0045BAr 3  72 6F 72     		.byte "ror"
0045BDr 3               
0045BDr 3               nt_asm_ror_a:
0045BDr 3  05 04        		.byte 5, IM
0045BFr 3  rr rr                        .word nt_asm_ror_x
0045C1r 3  rr rr rr rr  		.word xt_asm_ror_a, z_asm_ror_a
0045C5r 3  72 6F 72 2E  		.byte "ror.a"
0045C9r 3  61           
0045CAr 3               
0045CAr 3               nt_asm_ror_x:
0045CAr 3  05 04        		.byte 5, IM
0045CCr 3  rr rr                        .word nt_asm_ror_z
0045CEr 3  rr rr rr rr  		.word xt_asm_ror_x, z_asm_ror_x
0045D2r 3  72 6F 72 2E  		.byte "ror.x"
0045D6r 3  78           
0045D7r 3               
0045D7r 3               nt_asm_ror_z:
0045D7r 3  05 04        		.byte 5, IM
0045D9r 3  rr rr                        .word nt_asm_ror_zx
0045DBr 3  rr rr rr rr  		.word xt_asm_ror_z, z_asm_ror_z
0045DFr 3  72 6F 72 2E  		.byte "ror.z"
0045E3r 3  7A           
0045E4r 3               
0045E4r 3               nt_asm_ror_zx:
0045E4r 3  06 04        		.byte 6, IM
0045E6r 3  rr rr                        .word nt_asm_rti
0045E8r 3  rr rr rr rr  		.word xt_asm_ror_zx, z_asm_ror_zx
0045ECr 3  72 6F 72 2E  		.byte "ror.zx"
0045F0r 3  7A 78        
0045F2r 3               
0045F2r 3               nt_asm_rti:
0045F2r 3  03 04        		.byte 3, IM
0045F4r 3  rr rr                        .word nt_asm_rts
0045F6r 3  rr rr rr rr  		.word xt_asm_rti, z_asm_rti
0045FAr 3  72 74 69     		.byte "rti"
0045FDr 3               
0045FDr 3               nt_asm_rts:
0045FDr 3  03 04        		.byte 3, IM
0045FFr 3  rr rr                        .word nt_asm_sbc
004601r 3  rr rr rr rr  		.word xt_asm_rts, z_asm_rts
004605r 3  72 74 73     		.byte "rts"
004608r 3               
004608r 3               nt_asm_sbc:
004608r 3  03 04        		.byte 3, IM
00460Ar 3  rr rr                        .word nt_asm_sbc_h
00460Cr 3  rr rr rr rr  		.word xt_asm_sbc, z_asm_sbc
004610r 3  73 62 63     		.byte "sbc"
004613r 3               
004613r 3               nt_asm_sbc_h:
004613r 3  05 04        		.byte 5, IM
004615r 3  rr rr                        .word nt_asm_sbc_x
004617r 3  rr rr rr rr  		.word xt_asm_sbc_h, z_asm_sbc_h
00461Br 3  73 62 63 2E  		.byte "sbc.#"
00461Fr 3  23           
004620r 3               
004620r 3               nt_asm_sbc_x:
004620r 3  05 04        		.byte 5, IM
004622r 3  rr rr                        .word nt_asm_sbc_y
004624r 3  rr rr rr rr  		.word xt_asm_sbc_x, z_asm_sbc_x
004628r 3  73 62 63 2E  		.byte "sbc.x"
00462Cr 3  78           
00462Dr 3               
00462Dr 3               nt_asm_sbc_y:
00462Dr 3  05 04        		.byte 5, IM
00462Fr 3  rr rr                        .word nt_asm_sbc_z
004631r 3  rr rr rr rr  		.word xt_asm_sbc_y, z_asm_sbc_y
004635r 3  73 62 63 2E  		.byte "sbc.y"
004639r 3  79           
00463Ar 3               
00463Ar 3               nt_asm_sbc_z:
00463Ar 3  05 04        		.byte 5, IM
00463Cr 3  rr rr                        .word nt_asm_sbc_zi
00463Er 3  rr rr rr rr  		.word xt_asm_sbc_z, z_asm_sbc_z
004642r 3  73 62 63 2E  		.byte "sbc.z"
004646r 3  7A           
004647r 3               
004647r 3               nt_asm_sbc_zi:
004647r 3  06 04        		.byte 6, IM
004649r 3  rr rr                        .word nt_asm_sbc_ziy
00464Br 3  rr rr rr rr  		.word xt_asm_sbc_zi, z_asm_sbc_zi
00464Fr 3  73 62 63 2E  		.byte "sbc.zi"
004653r 3  7A 69        
004655r 3               
004655r 3               nt_asm_sbc_ziy:
004655r 3  07 04        		.byte 7, IM
004657r 3  rr rr                        .word nt_asm_sbc_zx
004659r 3  rr rr rr rr  		.word xt_asm_sbc_ziy, z_asm_sbc_ziy
00465Dr 3  73 62 63 2E  		.byte "sbc.ziy"
004661r 3  7A 69 79     
004664r 3               
004664r 3               nt_asm_sbc_zx:
004664r 3  06 04        		.byte 6, IM
004666r 3  rr rr                        .word nt_asm_sbc_zxi
004668r 3  rr rr rr rr  		.word xt_asm_sbc_zx, z_asm_sbc_zx
00466Cr 3  73 62 63 2E  		.byte "sbc.zx"
004670r 3  7A 78        
004672r 3               
004672r 3               nt_asm_sbc_zxi:
004672r 3  07 04        		.byte 7, IM
004674r 3  rr rr                        .word nt_asm_sec
004676r 3  rr rr rr rr  		.word xt_asm_sbc_zxi, z_asm_sbc_zxi
00467Ar 3  73 62 63 2E  		.byte "sbc.zxi"
00467Er 3  7A 78 69     
004681r 3               
004681r 3               nt_asm_sec:
004681r 3  03 04        		.byte 3, IM
004683r 3  rr rr                        .word nt_asm_sed
004685r 3  rr rr rr rr  		.word xt_asm_sec, z_asm_sec
004689r 3  73 65 63     		.byte "sec"
00468Cr 3               
00468Cr 3               nt_asm_sed:
00468Cr 3  03 04        		.byte 3, IM
00468Er 3  rr rr                        .word nt_asm_sei
004690r 3  rr rr rr rr  		.word xt_asm_sed, z_asm_sed
004694r 3  73 65 64     		.byte "sed"
004697r 3               
004697r 3               nt_asm_sei:
004697r 3  03 04        		.byte 3, IM
004699r 3  rr rr                        .word nt_asm_sta
00469Br 3  rr rr rr rr  		.word xt_asm_sei, z_asm_sei
00469Fr 3  73 65 69     		.byte "sei"
0046A2r 3               
0046A2r 3               nt_asm_sta:
0046A2r 3  03 04        		.byte 3, IM
0046A4r 3  rr rr                        .word nt_asm_sta_x
0046A6r 3  rr rr rr rr  		.word xt_asm_sta, z_asm_sta
0046AAr 3  73 74 61     		.byte "sta"
0046ADr 3               
0046ADr 3               nt_asm_sta_x:
0046ADr 3  05 04        		.byte 5, IM
0046AFr 3  rr rr                        .word nt_asm_sta_y
0046B1r 3  rr rr rr rr  		.word xt_asm_sta_x, z_asm_sta_x
0046B5r 3  73 74 61 2E  		.byte "sta.x"
0046B9r 3  78           
0046BAr 3               
0046BAr 3               nt_asm_sta_y:
0046BAr 3  05 04        		.byte 5, IM
0046BCr 3  rr rr                        .word nt_asm_sta_z
0046BEr 3  rr rr rr rr  		.word xt_asm_sta_y, z_asm_sta_y
0046C2r 3  73 74 61 2E  		.byte "sta.y"
0046C6r 3  79           
0046C7r 3               
0046C7r 3               nt_asm_sta_z:
0046C7r 3  05 04        		.byte 5, IM
0046C9r 3  rr rr                        .word nt_asm_sta_zi
0046CBr 3  rr rr rr rr  		.word xt_asm_sta_z, z_asm_sta_z
0046CFr 3  73 74 61 2E  		.byte "sta.z"
0046D3r 3  7A           
0046D4r 3               
0046D4r 3               nt_asm_sta_zi:
0046D4r 3  06 04        		.byte 6, IM
0046D6r 3  rr rr                        .word nt_asm_sta_ziy
0046D8r 3  rr rr rr rr  		.word xt_asm_sta_zi, z_asm_sta_zi
0046DCr 3  73 74 61 2E  		.byte "sta.zi"
0046E0r 3  7A 69        
0046E2r 3               
0046E2r 3               nt_asm_sta_ziy:
0046E2r 3  07 04        		.byte 7, IM
0046E4r 3  rr rr                        .word nt_asm_sta_zx
0046E6r 3  rr rr rr rr  		.word xt_asm_sta_ziy, z_asm_sta_ziy
0046EAr 3  73 74 61 2E  		.byte "sta.ziy"
0046EEr 3  7A 69 79     
0046F1r 3               
0046F1r 3               nt_asm_sta_zx:
0046F1r 3  06 04        		.byte 6, IM
0046F3r 3  rr rr                        .word nt_asm_sta_zxi
0046F5r 3  rr rr rr rr  		.word xt_asm_sta_zx, z_asm_sta_zx
0046F9r 3  73 74 61 2E  		.byte "sta.zx"
0046FDr 3  7A 78        
0046FFr 3               
0046FFr 3               nt_asm_sta_zxi:
0046FFr 3  07 04        		.byte 7, IM
004701r 3  rr rr                        .word nt_asm_stx
004703r 3  rr rr rr rr  		.word xt_asm_sta_zxi, z_asm_sta_zxi
004707r 3  73 74 61 2E  		.byte "sta.zxi"
00470Br 3  7A 78 69     
00470Er 3               
00470Er 3               nt_asm_stx:
00470Er 3  03 04        		.byte 3, IM
004710r 3  rr rr                        .word nt_asm_stx_z
004712r 3  rr rr rr rr  		.word xt_asm_stx, z_asm_stx
004716r 3  73 74 78     		.byte "stx"
004719r 3               
004719r 3               nt_asm_stx_z:
004719r 3  05 04        		.byte 5, IM
00471Br 3  rr rr                        .word nt_asm_stx_zy
00471Dr 3  rr rr rr rr  		.word xt_asm_stx_z, z_asm_stx_z
004721r 3  73 74 78 2E  		.byte "stx.z"
004725r 3  7A           
004726r 3               
004726r 3               nt_asm_stx_zy:
004726r 3  06 04        		.byte 6, IM
004728r 3  rr rr                        .word nt_asm_sty
00472Ar 3  rr rr rr rr  		.word xt_asm_stx_zy, z_asm_stx_zy
00472Er 3  73 74 78 2E  		.byte "stx.zy"
004732r 3  7A 79        
004734r 3               
004734r 3               nt_asm_sty:
004734r 3  03 04        		.byte 3, IM
004736r 3  rr rr                        .word nt_asm_sty_z
004738r 3  rr rr rr rr  		.word xt_asm_sty, z_asm_sty
00473Cr 3  73 74 79     		.byte "sty"
00473Fr 3               
00473Fr 3               nt_asm_sty_z:
00473Fr 3  05 04        		.byte 5, IM
004741r 3  rr rr                        .word nt_asm_sty_zx
004743r 3  rr rr rr rr  		.word xt_asm_sty_z, z_asm_sty_z
004747r 3  73 74 79 2E  		.byte "sty.z"
00474Br 3  7A           
00474Cr 3               
00474Cr 3               nt_asm_sty_zx:
00474Cr 3  06 04        		.byte 6, IM
00474Er 3  rr rr                        .word nt_asm_stz
004750r 3  rr rr rr rr  		.word xt_asm_sty_zx, z_asm_sty_zx
004754r 3  73 74 79 2E  		.byte "sty.zx"
004758r 3  7A 78        
00475Ar 3               
00475Ar 3               nt_asm_stz:
00475Ar 3  03 04        		.byte 3, IM
00475Cr 3  rr rr                        .word nt_asm_stz_x
00475Er 3  rr rr rr rr  		.word xt_asm_stz, z_asm_stz
004762r 3  73 74 7A     		.byte "stz"
004765r 3               
004765r 3               nt_asm_stz_x:
004765r 3  05 04        		.byte 5, IM
004767r 3  rr rr                        .word nt_asm_stz_z
004769r 3  rr rr rr rr  		.word xt_asm_stz_x, z_asm_stz_x
00476Dr 3  73 74 7A 2E  		.byte "stz.x"
004771r 3  78           
004772r 3               
004772r 3               nt_asm_stz_z:
004772r 3  05 04        		.byte 5, IM
004774r 3  rr rr                        .word nt_asm_stz_zx
004776r 3  rr rr rr rr  		.word xt_asm_stz_z, z_asm_stz_z
00477Ar 3  73 74 7A 2E  		.byte "stz.z"
00477Er 3  7A           
00477Fr 3               
00477Fr 3               nt_asm_stz_zx:
00477Fr 3  06 04        		.byte 6, IM
004781r 3  rr rr                        .word nt_asm_tax
004783r 3  rr rr rr rr  		.word xt_asm_stz_zx, z_asm_stz_zx
004787r 3  73 74 7A 2E  		.byte "stz.zx"
00478Br 3  7A 78        
00478Dr 3               
00478Dr 3               nt_asm_tax:
00478Dr 3  03 04        		.byte 3, IM
00478Fr 3  rr rr                        .word nt_asm_tay
004791r 3  rr rr rr rr  		.word xt_asm_tax, z_asm_tax
004795r 3  74 61 78     		.byte "tax"
004798r 3               
004798r 3               nt_asm_tay:
004798r 3  03 04        		.byte 3, IM
00479Ar 3  rr rr                        .word nt_asm_trb
00479Cr 3  rr rr rr rr  		.word xt_asm_tay, z_asm_tay
0047A0r 3  74 61 79     		.byte "tay"
0047A3r 3               
0047A3r 3               nt_asm_trb:
0047A3r 3  03 04        		.byte 3, IM
0047A5r 3  rr rr                        .word nt_asm_trb_z
0047A7r 3  rr rr rr rr  		.word xt_asm_trb, z_asm_trb
0047ABr 3  74 72 62     		.byte "trb"
0047AEr 3               
0047AEr 3               nt_asm_trb_z:
0047AEr 3  05 04        		.byte 5, IM
0047B0r 3  rr rr                        .word nt_asm_tsb
0047B2r 3  rr rr rr rr  		.word xt_asm_trb_z, z_asm_trb_z
0047B6r 3  74 72 62 2E  		.byte "trb.z"
0047BAr 3  7A           
0047BBr 3               
0047BBr 3               nt_asm_tsb:
0047BBr 3  03 04        		.byte 3, IM
0047BDr 3  rr rr                        .word nt_asm_tsb_z
0047BFr 3  rr rr rr rr  		.word xt_asm_tsb, z_asm_tsb
0047C3r 3  74 73 62     		.byte "tsb"
0047C6r 3               
0047C6r 3               nt_asm_tsb_z:
0047C6r 3  05 04        		.byte 5, IM
0047C8r 3  rr rr                        .word nt_asm_tsx
0047CAr 3  rr rr rr rr  		.word xt_asm_tsb_z, z_asm_tsb_z
0047CEr 3  74 73 62 2E  		.byte "tsb.z"
0047D2r 3  7A           
0047D3r 3               
0047D3r 3               nt_asm_tsx:
0047D3r 3  03 04        		.byte 3, IM
0047D5r 3  rr rr                        .word nt_asm_txa
0047D7r 3  rr rr rr rr  		.word xt_asm_tsx, z_asm_tsx
0047DBr 3  74 73 78     		.byte "tsx"
0047DEr 3               
0047DEr 3               nt_asm_txa:
0047DEr 3  03 04        		.byte 3, IM
0047E0r 3  rr rr                        .word nt_asm_txs
0047E2r 3  rr rr rr rr  		.word xt_asm_txa, z_asm_txa
0047E6r 3  74 78 61     		.byte "txa"
0047E9r 3               
0047E9r 3               nt_asm_txs:
0047E9r 3  03 04        		.byte 3, IM
0047EBr 3  rr rr                        .word nt_asm_tya
0047EDr 3  rr rr rr rr  		.word xt_asm_txs, z_asm_txs
0047F1r 3  74 78 73     		.byte "txs"
0047F4r 3               
0047F4r 3               nt_asm_tya:
0047F4r 3  03 04        		.byte 3, IM
0047F6r 3  rr rr                        .word nt_asm_arrow
0047F8r 3  rr rr rr rr  		.word xt_asm_tya, z_asm_tya
0047FCr 3  74 79 61     		.byte "tya"
0047FFr 3               
0047FFr 3               ; Assembler pseudo-instructions, directives and macros
0047FFr 3               
0047FFr 3               nt_asm_arrow:   ; uses same code as HERE, but immediate
0047FFr 3  03 04                        .byte 3, IM
004801r 3  rr rr                        .word nt_asm_back_jump
004803r 3  rr rr rr rr                  .word xt_asm_arrow, z_asm_arrow
004807r 3  2D 2D 3E                     .byte "-->"
00480Ar 3               
00480Ar 3               
00480Ar 3               nt_asm_back_jump:  ; syntactic sugar, does nothing
00480Ar 3  02 04                        .byte 2, IM
00480Cr 3  rr rr                        .word nt_asm_back_branch
00480Er 3  rr rr rr rr                  .word xt_asm_back_jump, z_asm_back_jump
004812r 3  3C 6A                        .byte "<j"
004814r 3               
004814r 3               nt_asm_back_branch:
004814r 3  02 04                        .byte 2, IM
004816r 3  rr rr                        .word nt_asm_push_a
004818r 3  rr rr rr rr                  .word xt_asm_back_branch, z_asm_back_branch
00481Cr 3  3C 62                        .byte "<b"
00481Er 3               
00481Er 3               nt_asm_push_a:
00481Er 3  06 04                        .byte 6, IM
004820r 3  00 00                        .word 0000
004822r 3  rr rr rr rr                  .word xt_asm_push_a, z_asm_push_a
004826r 3  70 75 73 68                  .byte "push-a"
00482Ar 3  2D 61        
00482Cr 3               
00482Cr 3               .endif
00482Cr 3               
00482Cr 3               ; END of ASSEMBLER-WORDLIST
00482Cr 3               
00482Cr 3               ; END
00482Cr 3               
00482Cr 2                   .include "strings.s"          ; Headers of native words
00482Cr 3               ; List of Strings for Tali Forth 2
00482Cr 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00482Cr 3               ; First version: 01. Apr 2016 (for Liara Forth)
00482Cr 3               ; This version: 28. Dec 2018
00482Cr 3               
00482Cr 3               ; This file is included by taliforth.asm
00482Cr 3               
00482Cr 3               ; ## GENERAL STRINGS
00482Cr 3               
00482Cr 3               ; All general strings must be zero-terminated, names start with "s_",
00482Cr 3               ; aliases with "str_"
00482Cr 3               
00482Cr 3               str_ok =              0
00482Cr 3               str_compile =         1
00482Cr 3               str_redefined =       2
00482Cr 3               str_wid_forth =       3
00482Cr 3               str_abc_lower =       4
00482Cr 3               str_abc_upper =       5
00482Cr 3               str_wid_editor =      6
00482Cr 3               str_wid_assembler =   7
00482Cr 3               str_wid_root =        8
00482Cr 3               str_see_flags =       9
00482Cr 3               str_see_nt =         10
00482Cr 3               str_see_xt =         11
00482Cr 3               str_see_size =       12
00482Cr 3               str_disasm_lit     = 13
00482Cr 3               str_disasm_sdc     = 14
00482Cr 3               str_disasm_bra     = 15
00482Cr 3               
00482Cr 3               ; Since we can't fit a 16-bit address in a register, we use indexes as offsets
00482Cr 3               ; to tables as error and string numbers.
00482Cr 3               string_table:
00482Cr 3  rr rr rr rr          .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
004830r 3  rr rr rr rr  
004834r 3  rr rr        
004836r 3  rr rr rr rr          .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
00483Ar 3  rr rr rr rr  
00483Er 3  rr rr rr rr          .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
004842r 3  rr rr rr rr  
004846r 3               
004846r 3  20 6F 6B 00  s_ok:         .byte " ok", 0         ; note space at beginning
00484Ar 3  20 63 6F 6D  s_compiled:   .byte " compiled", 0   ; note space at beginning
00484Er 3  70 69 6C 65  
004852r 3  64 00        
004854r 3  72 65 64 65  s_redefined:  .byte "redefined ", 0  ; note space at end
004858r 3  66 69 6E 65  
00485Cr 3  64 20 00     
00485Fr 3               
00485Fr 3  30 31 32 33  s_abc_lower:  .byte "0123456789abcdefghijklmnopqrstuvwxyz"
004863r 3  34 35 36 37  
004867r 3  38 39 61 62  
004883r 3  30 31 32 33  s_abc_upper:  .byte "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
004887r 3  34 35 36 37  
00488Br 3  38 39 41 42  
0048A7r 3               
0048A7r 3  41 73 73 65  s_wid_asm:    .byte "Assembler ", 0  ; Wordlist ID 2, note space at end
0048ABr 3  6D 62 6C 65  
0048AFr 3  72 20 00     
0048B2r 3  45 64 69 74  s_wid_editor: .byte "Editor ", 0     ; Wordlist ID 1, note space at end
0048B6r 3  6F 72 20 00  
0048BAr 3  46 6F 72 74  s_wid_forth:  .byte "Forth ", 0      ; Wordlist ID 0, note space at end
0048BEr 3  68 20 00     
0048C1r 3  52 6F 6F 74  s_wid_root:   .byte "Root ", 0       ; Wordlist ID 3, note space at end
0048C5r 3  20 00        
0048C7r 3               
0048C7r 3  66 6C 61 67  s_see_flags:  .byte "flags (CO AN IM NN UF HC): ", 0
0048CBr 3  73 20 28 43  
0048CFr 3  4F 20 41 4E  
0048E3r 3  6E 74 3A 20  s_see_nt:     .byte "nt: ", 0
0048E7r 3  00           
0048E8r 3  78 74 3A 20  s_see_xt:     .byte "xt: ", 0
0048ECr 3  00           
0048EDr 3  73 69 7A 65  s_see_size:   .byte "size (decimal): ", 0
0048F1r 3  20 28 64 65  
0048F5r 3  63 69 6D 61  
0048FEr 3  4C 49 54 45  s_disasm_lit: .byte "LITERAL ", 0
004902r 3  52 41 4C 20  
004906r 3  00           
004907r 3  53 54 41 43  s_disasm_sdc: .byte "STACK DEPTH CHECK", 0
00490Br 3  4B 20 44 45  
00490Fr 3  50 54 48 20  
004919r 3  42 52 41 4E  s_disasm_bra: .byte "BRANCH ",0
00491Dr 3  43 48 20 00  
004921r 3               
004921r 3               
004921r 3               ; ## ERROR STRINGS
004921r 3               
004921r 3               ; All error strings must be zero-terminated, all names start with "es_",
004921r 3               ; aliases with "err_". If the string texts are changed, the test suite must be
004921r 3               ; as well
004921r 3               
004921r 3               err_allot =        0
004921r 3               err_badsource =    1
004921r 3               err_compileonly =  2
004921r 3               err_defer =        3
004921r 3               err_divzero =      4
004921r 3               err_noname =       5
004921r 3               err_refill =       6
004921r 3               err_state =        7
004921r 3               err_syntax =       8
004921r 3               err_underflow =    9
004921r 3               err_negallot =     10
004921r 3               err_wordlist =     11
004921r 3               err_blockwords =   12
004921r 3               
004921r 3               error_table:
004921r 3  rr rr rr rr          .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
004925r 3  rr rr rr rr  
004929r 3  rr rr rr rr          .word es_divzero, es_noname, es_refill, es_state        ;  4-7
00492Dr 3  rr rr rr rr  
004931r 3  rr rr rr rr          .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
004935r 3  rr rr rr rr  
004939r 3  rr rr                .word es_blockwords                                    ; 12
00493Br 3               
00493Br 3  41 4C 4C 4F  es_allot:       .byte "ALLOT using all available memory", 0
00493Fr 3  54 20 75 73  
004943r 3  69 6E 67 20  
00495Cr 3  49 6C 6C 65  es_badsource:   .byte "Illegal SOURCE-ID during REFILL", 0
004960r 3  67 61 6C 20  
004964r 3  53 4F 55 52  
00497Cr 3  49 6E 74 65  es_compileonly: .byte "Interpreting a compile-only word", 0
004980r 3  72 70 72 65  
004984r 3  74 69 6E 67  
00499Dr 3  44 45 46 45  es_defer:       .byte "DEFERed word not defined yet", 0
0049A1r 3  52 65 64 20  
0049A5r 3  77 6F 72 64  
0049BAr 3  44 69 76 69  es_divzero:     .byte "Division by zero", 0
0049BEr 3  73 69 6F 6E  
0049C2r 3  20 62 79 20  
0049CBr 3  50 61 72 73  es_noname:      .byte "Parsing failure", 0
0049CFr 3  69 6E 67 20  
0049D3r 3  66 61 69 6C  
0049DBr 3  51 55 49 54  es_refill:      .byte "QUIT could not get input (REFILL returned -1)", 0
0049DFr 3  20 63 6F 75  
0049E3r 3  6C 64 20 6E  
004A09r 3  41 6C 72 65  es_state:       .byte "Already in compile mode", 0
004A0Dr 3  61 64 79 20  
004A11r 3  69 6E 20 63  
004A21r 3  55 6E 64 65  es_syntax:      .byte "Undefined word", 0
004A25r 3  66 69 6E 65  
004A29r 3  64 20 77 6F  
004A30r 3  53 74 61 63  es_underflow:   .byte "Stack underflow", 0
004A34r 3  6B 20 75 6E  
004A38r 3  64 65 72 66  
004A40r 3  4D 61 78 20  es_negallot:    .byte "Max memory freed with ALLOT", 0
004A44r 3  6D 65 6D 6F  
004A48r 3  72 79 20 66  
004A5Cr 3  4E 6F 20 77  es_wordlist:    .byte "No wordlists available", 0
004A60r 3  6F 72 64 6C  
004A64r 3  69 73 74 73  
004A73r 3  50 6C 65 61  es_blockwords:  .byte "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
004A77r 3  73 65 20 61  
004A7Br 3  73 73 69 67  
004AB2r 3               
004AB2r 3               ; ## ENVIRONMENT STRINGS
004AB2r 3               
004AB2r 3               ; These are used by the ENVIRONMENT? word and stored in the old string format:
004AB2r 3               ; Length byte first, then the string itself that is not rpt. not
004AB2r 3               ; zero-terminated. Note these are uppercase by ANS defintion. All start with
004AB2r 3               ; "envs_".
004AB2r 3               
004AB2r 3               ; These return a single-cell number
004AB2r 3  0F 2F 43 4F  envs_cs:        .byte 15, "/COUNTED-STRING"
004AB6r 3  55 4E 54 45  
004ABAr 3  44 2D 53 54  
004AC2r 3  05 2F 48 4F  envs_hold:      .byte 5, "/HOLD"
004AC6r 3  4C 44        
004AC8r 3  04 2F 50 41  envs_pad:       .byte 4, "/PAD"
004ACCr 3  44           
004ACDr 3  11 41 44 44  envs_aub:       .byte 17, "ADDRESS-UNIT-BITS"
004AD1r 3  52 45 53 53  
004AD5r 3  2D 55 4E 49  
004ADFr 3  07 46 4C 4F  envs_floored:   .byte 7, "FLOORED"
004AE3r 3  4F 52 45 44  
004AE7r 3  08 4D 41 58  envs_max_char:  .byte 8, "MAX-CHAR"
004AEBr 3  2D 43 48 41  
004AEFr 3  52           
004AF0r 3  05 4D 41 58  envs_max_n:     .byte 5, "MAX-N"
004AF4r 3  2D 4E        
004AF6r 3  05 4D 41 58  envs_max_u:     .byte 5, "MAX-U"
004AFAr 3  2D 55        
004AFCr 3  12 52 45 54  envs_rsc:       .byte 18, "RETURN-STACK-CELLS"
004B00r 3  55 52 4E 2D  
004B04r 3  53 54 41 43  
004B0Fr 3  0B 53 54 41  envs_sc:        .byte 11, "STACK-CELLS"
004B13r 3  43 4B 2D 43  
004B17r 3  45 4C 4C 53  
004B1Br 3  09 57 4F 52  envs_wl:        .byte 9, "WORDLISTS"
004B1Fr 3  44 4C 49 53  
004B23r 3  54 53        
004B25r 3               
004B25r 3               ; These return a double-cell number
004B25r 3  05 4D 41 58  envs_max_d:     .byte 5, "MAX-D"
004B29r 3  2D 44        
004B2Br 3  06 4D 41 58  envs_max_ud:    .byte 6, "MAX-UD"
004B2Fr 3  2D 55 44     
004B32r 3               
004B32r 3               ; END
004B32r 3               
004B32r 2               
004B32r 2               ; High-level Forth words, see forth_code/README.md
004B32r 2               forth_words_start:
004B32r 2  20 63 72 20  .incbin "forth_code/forth_words.asc"
004B36r 2  2E 28 20 52  
004B3Ar 2  65 61 64 79  
004B44r 2               forth_words_end:
004B44r 2               
004B44r 2               ; User-defined Forth words, see forth_code/README.md
004B44r 2               user_words_start:
004B44r 2  20 32 30 20  .incbin "forth_code/user_words.asc"
004B48r 2  63 6F 6E 73  
004B4Cr 2  74 61 6E 74  
0051E2r 2               user_words_end:
0051E2r 2               
0051E2r 2               
0051E2r 2               ; =====================================================================
0051E2r 2               ; COMPILE WORDS, JUMPS and SUBROUTINE JUMPS INTO CODE
0051E2r 2               
0051E2r 2               ; These three routines compile instructions such as "jsr xt_words" into a word
0051E2r 2               ; at compile time so they are available at run time. Words that use this
0051E2r 2               ; routine may not be natively compiled. We use "cmpl" as not to confuse these
0051E2r 2               ; routines with the COMPILE, word. Always call this with a subroutine jump.
0051E2r 2               ; This means combining JSR/RTS to JMP in those cases is not going to work. To
0051E2r 2               ; use, load the LSB of the address in A and the MSB in Y. You can remember
0051E2r 2               ; which comes first by thinking of the song "Young Americans" ("YA") by David
0051E2r 2               ; Bowie.
0051E2r 2               
0051E2r 2               ;               ldy #>addr      ; MSB   ; "Young"
0051E2r 2               ;               lda #<addr      ; LSB   ; "Americans"
0051E2r 2               ;               jsr cmpl_subroutine
0051E2r 2               
0051E2r 2               ; Also, we keep a routine here to compile a single byte passed through A.
0051E2r 2               
0051E2r 2               cmpl_subroutine:
0051E2r 2                   ; This is the entry point to compile JSR <ADDR>
0051E2r 2  48               pha             ; save LSB of address
0051E3r 2  A9 20            lda #$20        ; load opcode for JSR
0051E5r 2  80 03            bra cmpl_common
0051E7r 2               cmpl_jump:
0051E7r 2                   ; This is the entry point to compile JMP <ADDR>
0051E7r 2  48               pha             ; save LSB of address
0051E8r 2  A9 4C            lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
0051EAr 2               cmpl_common:
0051EAr 2                   ; At this point, A contains the opcode to be compiled,
0051EAr 2                   ; the LSB of the address is on the 65c02 stack, and the MSB of
0051EAr 2                   ; the address is in Y
0051EAr 2  20 rr rr         jsr cmpl_a      ; compile opcode
0051EDr 2  68               pla             ; retrieve address LSB; fall thru to cmpl_word
0051EEr 2               cmpl_word:
0051EEr 2                   ; This is the entry point to compile a word (little-endian)
0051EEr 2  20 rr rr         jsr cmpl_a      ; compile LSB of address
0051F1r 2  98               tya             ; fall thru for MSB
0051F2r 2               cmpl_a:
0051F2r 2                   ; This is the entry point to compile a single byte which
0051F2r 2                   ; is passed in A. The built-in assembler assumes that this
0051F2r 2                   ; routine does not modify Y.
0051F2r 2  92 rr            sta (cp)
0051F4r 2  E6 rr            inc cp
0051F6r 2  D0 02            bne _done
0051F8r 2  E6 rr            inc cp+1
0051FAr 2               _done:
0051FAr 2  60               rts
0051FBr 2               
0051FBr 2               
0051FBr 2               
0051FBr 2               ; =====================================================================
0051FBr 2               ; CODE FIELD ROUTINES
0051FBr 2               
0051FBr 2               doconst:
0051FBr 2               ; """Execute a CONSTANT: Push the data in the first two bytes of
0051FBr 2               ; the Data Field onto the Data Stack
0051FBr 2               ; """
0051FBr 2  CA               dex             ; make room for constant
0051FCr 2  CA               dex
0051FDr 2               
0051FDr 2                   ; The value we need is stored in the two bytes after the
0051FDr 2                   ; JSR return address, which in turn is what is on top of
0051FDr 2                   ; the Return Stack
0051FDr 2  68               pla             ; LSB of return address
0051FEr 2  85 rr            sta tmp1
005200r 2  68               pla             ; MSB of return address
005201r 2  85 rr            sta tmp1+1
005203r 2               
005203r 2                   ; Start LDY with 1 instead of 0 because of how JSR stores
005203r 2                   ; the return address on the 65c02
005203r 2  A0 01            ldy #1
005205r 2  B1 rr            lda (tmp1),y
005207r 2  95 00            sta 0,x
005209r 2  C8               iny
00520Ar 2  B1 rr            lda (tmp1),y
00520Cr 2  95 01            sta 1,x
00520Er 2               
00520Er 2                   ; This takes us back to the original caller, not the
00520Er 2                   ; DOCONST caller
00520Er 2  60               rts
00520Fr 2               
00520Fr 2               
00520Fr 2               dodefer:
00520Fr 2               ; """Execute a DEFER statement at runtime: Execute the address we
00520Fr 2               ; find after the caller in the Data Field
00520Fr 2               ; """
00520Fr 2                   ; The xt we need is stored in the two bytes after the JSR
00520Fr 2                   ; return address, which is what is on top of the Return
00520Fr 2                   ; Stack. So all we have to do is replace our return jump
00520Fr 2                   ; with what we find there
00520Fr 2  68               pla             ; LSB
005210r 2  85 rr            sta tmp1
005212r 2  68               pla             ; MSB
005213r 2  85 rr            sta tmp1+1
005215r 2               
005215r 2  A0 01            ldy #1
005217r 2  B1 rr            lda (tmp1),y
005219r 2  85 rr            sta tmp2
00521Br 2  C8               iny
00521Cr 2  B1 rr            lda (tmp1),y
00521Er 2  85 rr            sta tmp2+1
005220r 2               
005220r 2  6C rr rr         jmp (tmp2)      ; This is actually a jump to the new target
005223r 2               
005223r 2               defer_error:
005223r 2                   ; """Error routine for undefined DEFER: Complain and abort"""
005223r 2  A9 03            lda #err_defer
005225r 2  4C rr rr         jmp error
005228r 2               
005228r 2               dodoes:
005228r 2               ; """Execute the runtime portion of DOES>. See DOES> and
005228r 2               ; docs/create-does.txt for details and
005228r 2               ; http://www.bradrodriguez.com/papers/moving3.htm
005228r 2               ; """
005228r 2                   ; Assumes the address of the CFA of the original defining word
005228r 2                   ; (say, CONSTANT) is on the top of the Return Stack. Save it
005228r 2                   ; for a later jump, adding one byte because of the way the
005228r 2                   ; 6502 works
005228r 2  7A               ply             ; LSB
005229r 2  68               pla             ; MSB
00522Ar 2  C8               iny
00522Br 2  D0 01            bne @1
00522Dr 2  1A               inc
00522Er 2               @1:
00522Er 2  84 rr            sty tmp2
005230r 2  85 rr            sta tmp2+1
005232r 2               
005232r 2                   ; Next on the Return Stack should be the address of the PFA of
005232r 2                   ; the calling defined word (say, the name of whatever constant we
005232r 2                   ; just defined). Move this to the Data Stack, again adding one.
005232r 2  CA               dex
005233r 2  CA               dex
005234r 2               
005234r 2  7A               ply
005235r 2  68               pla
005236r 2  C8               iny
005237r 2  D0 01            bne @2
005239r 2  1A               inc
00523Ar 2               @2:
00523Ar 2  94 00            sty 0,x         ; LSB
00523Cr 2  95 01            sta 1,x         ; MSB
00523Er 2               
00523Er 2                   ; This leaves the return address from the original main routine
00523Er 2                   ; on top of the Return Stack. We leave that untouched and jump
00523Er 2                   ; to the special code of the defining word. It's RTS instruction
00523Er 2                   ; will take us back to the main routine
00523Er 2  6C rr rr         jmp (tmp2)
005241r 2               
005241r 2               
005241r 2               dovar:
005241r 2               ; """Execute a variable: Push the address of the first bytes of
005241r 2               ; the Data Field onto the stack. This is called with JSR so we
005241r 2               ; can pick up the address of the calling variable off the 65c02's
005241r 2               ; stack. The final RTS takes us to the original caller of the
005241r 2               ; routine that itself called DOVAR. This is the default
005241r 2               ; routine installed with CREATE.
005241r 2               ; """
005241r 2                   ; Pull the return address off the machine's stack, adding
005241r 2                   ; one because of the way the 65c02 handles subroutines
005241r 2  7A               ply             ; LSB
005242r 2  68               pla             ; MSB
005243r 2  C8               iny
005244r 2  D0 01            bne @1
005246r 2  1A               inc
005247r 2               @1:
005247r 2  CA               dex
005248r 2  CA               dex
005249r 2               
005249r 2  95 01            sta 1,x
00524Br 2  98               tya
00524Cr 2  95 00            sta 0,x
00524Er 2               
00524Er 2  60               rts
00524Fr 2               
00524Fr 2               ; =====================================================================
00524Fr 2               ; LOW LEVEL HELPER FUNCTIONS
00524Fr 2               
00524Fr 2               byte_to_ascii:
00524Fr 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
00524Fr 2               .scope
00524Fr 2  48               pha
005250r 2  4A               lsr             ; convert high nibble first
005251r 2  4A               lsr
005252r 2  4A               lsr
005253r 2  4A               lsr
005254r 2  20 rr rr         jsr _nibble_to_ascii
005257r 2  68               pla
005258r 2               
005258r 2                   ; fall through to _nibble_to_ascii
005258r 2               
005258r 2               _nibble_to_ascii:
005258r 2               ; """Private helper function for byte_to_ascii: Print lower nibble
005258r 2               ; of A and and EMIT it. This does the actual work.
005258r 2               ; """
005258r 2  29 0F            and #$0F
00525Ar 2  09 30            ora #'0'
00525Cr 2  C9 3A            cmp #$3A        ; '9+1
00525Er 2  90 02            bcc @1
005260r 2  69 06            adc #$06
005262r 2               
005262r 2  4C rr rr     @1:               jmp emit_a
005265r 2               
005265r 2  60               rts
005266r 2               .endscope
005266r 2               
005266r 2               compare_16bit:
005266r 2               ; """Compare TOS/NOS and return results in form of the 65c02 flags
005266r 2               ; Adapted from Leventhal "6502 Assembly Language Subroutines", see
005266r 2               ; also http://www.6502.org/tutorials/compare_beyond.html
005266r 2               ; For signed numbers, Z signals equality and N which number is larger:
005266r 2               ;       if TOS = NOS: Z=1 and N=0
005266r 2               ;       if TOS > NOS: Z=0 and N=0
005266r 2               ;       if TOS < NOS: Z=0 and N=1
005266r 2               ; For unsigned numbers, Z signals equality and C which number is larger:
005266r 2               ;       if TOS = NOS: Z=1 and N=0
005266r 2               ;       if TOS > NOS: Z=0 and C=1
005266r 2               ;       if TOS < NOS: Z=0 and C=0
005266r 2               ; Compared to the book routine, WORD1 (MINUED) is TOS
005266r 2               ;                               WORD2 (SUBTRAHEND) is NOS
005266r 2               ; """
005266r 2               .scope
005266r 2                   ; Compare LSB first to set the carry flag
005266r 2  B5 00            lda 0,x                 ; LSB of TOS
005268r 2  D5 02            cmp 2,x                 ; LSB of NOS
00526Ar 2  F0 0A            beq _equal
00526Cr 2               
00526Cr 2                   ; LSBs are not equal, compare MSB
00526Cr 2  B5 01            lda 1,x                 ; MSB of TOS
00526Er 2  F5 03            sbc 3,x                 ; MSB of NOS
005270r 2  09 01            ora #1                  ; Make zero flag 0 because not equal
005272r 2  70 08            bvs _overflow
005274r 2  80 08            bra _not_equal
005276r 2               _equal:
005276r 2                   ; Low bytes are equal, so we compare high bytes
005276r 2  B5 01            lda 1,x                 ; MSB of TOS
005278r 2  F5 03            sbc 3,x                 ; MSB of NOS
00527Ar 2  50 04            bvc _done
00527Cr 2               _overflow:
00527Cr 2                   ; Handle overflow because we use signed numbers
00527Cr 2  49 80            eor #$80                ; complement negative flag
00527Er 2               _not_equal:
00527Er 2  09 01            ora #1                  ; if overflow, we can't be eqal
005280r 2               _done:
005280r 2  60               rts
005281r 2               .endscope
005281r 2               
005281r 2               current_to_dp:
005281r 2               ; """Look up the current (compilation) dictionary pointer
005281r 2               ; in the wordlist set and put it into the dp zero-page
005281r 2               ; variable. Uses A and Y.
005281r 2               ; """
005281r 2                   ; Determine which wordlist is current
005281r 2  A0 04            ldy #current_offset
005283r 2  B1 rr            lda (up),y      ; current is a byte variable
005285r 2  0A               asl             ; turn it into an offset (in cells)
005286r 2               
005286r 2                   ; Get the dictionary pointer for that wordlist.
005286r 2  18               clc
005287r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
005289r 2  A8               tay
00528Ar 2  B1 rr            lda (up),y              ; get the dp for that wordlist.
00528Cr 2  85 rr            sta dp
00528Er 2  C8               iny
00528Fr 2  B1 rr            lda (up),y
005291r 2  85 rr            sta dp+1
005293r 2               
005293r 2  60               rts
005294r 2               
005294r 2               
005294r 2               dp_to_current:
005294r 2               ; """Look up which wordlist is current and update its pointer
005294r 2               ; with the value in dp. Uses A and Y.
005294r 2               ; """
005294r 2                   ; Determine which wordlist is current
005294r 2  A0 04            ldy #current_offset
005296r 2  B1 rr            lda (up),y      ; current is a byte variable
005298r 2  0A               asl             ; turn it into an offset (in cells)
005299r 2               
005299r 2                   ; Get the dictionary pointer for that wordlist.
005299r 2  18               clc
00529Ar 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
00529Cr 2  A8               tay
00529Dr 2  A5 rr            lda dp
00529Fr 2  91 rr            sta (up),y              ; get the dp for that wordlist.
0052A1r 2  C8               iny
0052A2r 2  A5 rr            lda dp+1
0052A4r 2  91 rr            sta (up),y
0052A6r 2               
0052A6r 2  60               rts
0052A7r 2               
0052A7r 2               interpret:
0052A7r 2               .scope
0052A7r 2               ; """Core routine for the interpreter called by EVALUATE and QUIT.
0052A7r 2               ; Process one line only. Assumes that the address of name is in
0052A7r 2               ; cib and the length of the whole input line string is in ciblen
0052A7r 2               ; """
0052A7r 2                   ; Normally we would use PARSE here with the SPACE character as
0052A7r 2                   ; a parameter (PARSE replaces WORD in modern Forths). However,
0052A7r 2                   ; Gforth's PARSE-NAME makes more sense as it uses spaces as
0052A7r 2                   ; delimiters per default and skips any leading spaces, which
0052A7r 2                   ; PARSE doesn't
0052A7r 2               _loop:
0052A7r 2  20 rr rr         jsr xt_parse_name       ; ( "string" -- addr u )
0052AAr 2               
0052AAr 2                   ; If PARSE-NAME returns 0 (empty line), no characters were left
0052AAr 2                   ; in the line and we need to go get a new line
0052AAr 2  B5 00            lda 0,x
0052ACr 2  15 01            ora 1,x
0052AEr 2  F0 70            beq _line_done
0052B0r 2               
0052B0r 2                   ; Go to FIND-NAME to see if this is a word we know. We have to
0052B0r 2                   ; make a copy of the address in case it isn't a word we know and
0052B0r 2                   ; we have to go see if it is a number
0052B0r 2  20 rr rr         jsr xt_two_dup          ; ( addr u -- addr u addr u )
0052B3r 2  20 rr rr         jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
0052B6r 2               
0052B6r 2                   ; A zero signals that we didn't find a word in the Dictionary
0052B6r 2  B5 00            lda 0,x
0052B8r 2  15 01            ora 1,x
0052BAr 2  D0 28            bne _got_name_token
0052BCr 2               
0052BCr 2                   ; We didn't get any nt we know of, so let's see if this is
0052BCr 2                   ; a number.
0052BCr 2  E8               inx                     ; ( addr u 0 -- addr u )
0052BDr 2  E8               inx
0052BEr 2               
0052BEr 2                   ; If the number conversion doesn't work, NUMBER will do the
0052BEr 2                   ; complaining for us
0052BEr 2  20 rr rr         jsr xt_number           ; ( addr u -- u|d )
0052C1r 2               
0052C1r 2                   ; Otherweise, if we're interpreting, we're done
0052C1r 2  A5 rr            lda state
0052C3r 2  F0 E2            beq _loop
0052C5r 2               
0052C5r 2                   ; We're compiling, so there is a bit more work.  Check
0052C5r 2                   ; status bit 5 to see if it's a single or double-cell
0052C5r 2                   ; number.
0052C5r 2  A9 20            lda #$20
0052C7r 2  24 rr            bit status
0052C9r 2  F0 0D            beq _single_number
0052CBr 2               
0052CBr 2                   ; It's a double cell number.  If we swap the
0052CBr 2                   ; upper and lower half, we can use the literal_runtime twice
0052CBr 2                   ; to compile it into the dictionary.
0052CBr 2  20 rr rr         jsr xt_swap
0052CEr 2  A0 rr            ldy #>literal_runtime
0052D0r 2  A9 rr            lda #<literal_runtime
0052D2r 2  20 rr rr         jsr cmpl_subroutine
0052D5r 2               
0052D5r 2                   ; compile our number
0052D5r 2  20 rr rr         jsr xt_comma
0052D8r 2               
0052D8r 2                   ; Fall into _single_number to process the other half.
0052D8r 2               _single_number:
0052D8r 2  A0 rr            ldy #>literal_runtime
0052DAr 2  A9 rr            lda #<literal_runtime
0052DCr 2  20 rr rr         jsr cmpl_subroutine
0052DFr 2               
0052DFr 2                   ; compile our number
0052DFr 2  20 rr rr         jsr xt_comma
0052E2r 2               
0052E2r 2                   ; That was so much fun, let's do it again!
0052E2r 2  80 C3            bra _loop
0052E4r 2               
0052E4r 2               _got_name_token:
0052E4r 2                   ; We have a known word's nt TOS. We're going to need its xt
0052E4r 2                   ; though, which is four bytes father down.
0052E4r 2               
0052E4r 2                   ; We arrive here with ( addr u nt ), so we NIP twice
0052E4r 2  B5 00            lda 0,x
0052E6r 2  95 04            sta 4,x
0052E8r 2  B5 01            lda 1,x
0052EAr 2  95 05            sta 5,x
0052ECr 2               
0052ECr 2  E8               inx
0052EDr 2  E8               inx
0052EEr 2  E8               inx
0052EFr 2  E8               inx                     ; ( nt )
0052F0r 2               
0052F0r 2                   ; Save a version of nt for error handling and compilation stuff
0052F0r 2  B5 00            lda 0,x
0052F2r 2  85 rr            sta tmpbranch
0052F4r 2  B5 01            lda 1,x
0052F6r 2  85 rr            sta tmpbranch+1
0052F8r 2               
0052F8r 2  20 rr rr         jsr xt_name_to_int      ; ( nt - xt )
0052FBr 2               
0052FBr 2                   ; See if we are in interpret or compile mode, 0 is interpret
0052FBr 2  A5 rr            lda state
0052FDr 2  D0 13            bne _compile
0052FFr 2               
0052FFr 2                   ; We are interpreting, so EXECUTE the xt that is TOS. First,
0052FFr 2                   ; though, see if this isn't a compile-only word, which would be
0052FFr 2                   ; illegal. The status byte is the second one of the header.
0052FFr 2  A0 01            ldy #1
005301r 2  B1 rr            lda (tmpbranch),y
005303r 2  29 01            and #CO                 ; mask everything but Compile Only bit
005305r 2  F0 05            beq _interpret
005307r 2               
005307r 2  A9 02            lda #err_compileonly
005309r 2  4C rr rr         jmp error
00530Cr 2               
00530Cr 2               _interpret:
00530Cr 2                   ; We JSR to EXECUTE instead of calling the xt directly because
00530Cr 2                   ; the RTS of the word we're executing will bring us back here,
00530Cr 2                   ; skipping EXECUTE completely during RTS. If we were to execute
00530Cr 2                   ; xt directly, we have to fool around with the Return Stack
00530Cr 2                   ; instead, which is actually slightly slower
00530Cr 2  20 rr rr         jsr xt_execute
00530Fr 2               
00530Fr 2                   ; That's quite enough for this word, let's get the next one
00530Fr 2  4C rr rr         jmp _loop
005312r 2               
005312r 2               _compile:
005312r 2                   ; We're compiling! However, we need to see if this is an
005312r 2                   ; IMMEDIATE word, which would mean we execute it right now even
005312r 2                   ; during compilation mode. Fortunately, we saved the nt so life
005312r 2                   ; is easier. The flags are in the second byte of the header
005312r 2  A0 01            ldy #1
005314r 2  B1 rr            lda (tmpbranch),y
005316r 2  29 04            and #IM                 ; Mask all but IM bit
005318r 2  D0 F2            bne _interpret          ; IMMEDIATE word, execute right now
00531Ar 2               
00531Ar 2                   ; Compile the xt into the Dictionary with COMPILE,
00531Ar 2  20 rr rr         jsr xt_compile_comma
00531Dr 2  4C rr rr         jmp _loop
005320r 2               
005320r 2               _line_done:
005320r 2                   ; drop stuff from PARSE_NAME
005320r 2  E8               inx
005321r 2  E8               inx
005322r 2  E8               inx
005323r 2  E8               inx
005324r 2               
005324r 2  60               rts
005325r 2               .endscope
005325r 2               
005325r 2               
005325r 2               is_printable:
005325r 2               .scope
005325r 2               ; """Given a character in A, check if it is a printable ASCII
005325r 2               ; character in the range from $20 to $7E inclusive. Returns the
005325r 2               ; result in the Carry Flag: 0 (clear) is not printable, 1 (set)
005325r 2               ; is printable. Keeps A. See
005325r 2               ; http://www.obelisk.me.uk/6502/algorithms.html for a
005325r 2               ; discussion of various ways to do this
005325r 2  C9 20            cmp #AscSP              ; $20
005327r 2  90 08            bcc _done
005329r 2  C9 7F            cmp #'~' + 1             ; $7E
00532Br 2  B0 03            bcs _failed
00532Dr 2               
00532Dr 2  38               sec
00532Er 2  80 01            bra _done
005330r 2               _failed:
005330r 2  18               clc
005331r 2               _done:
005331r 2  60               rts
005332r 2               .endscope
005332r 2               
005332r 2               
005332r 2               is_whitespace:
005332r 2               .scope
005332r 2               ; """Given a character in A, check if it is a whitespace
005332r 2               ; character, that is, an ASCII value from 0 to 32 (where
005332r 2               ; 32 is SPACE). Returns the result in the Carry Flag:
005332r 2               ; 0 (clear) is no, it isn't whitespace, while 1 (set) means
005332r 2               ; that it is whitespace. See PARSE and PARSE-NAME for
005332r 2               ; a discussion of the uses. Does not change A or Y.
005332r 2  C9 00            cmp #00         ; explicit comparison to leave Y untouched
005334r 2  90 08            bcc _done
005336r 2               
005336r 2  C9 21            cmp #AscSP+1
005338r 2  B0 03            bcs _failed
00533Ar 2               
00533Ar 2  38               sec
00533Br 2  80 01            bra _done
00533Dr 2               _failed:
00533Dr 2  18               clc
00533Er 2               _done:
00533Er 2  60               rts
00533Fr 2               .endscope
00533Fr 2               
00533Fr 2               
00533Fr 2               ; Underflow tests. We jump to the label with the number of cells (not: bytes)
00533Fr 2               ; required for the word. This routine flows into the generic error handling
00533Fr 2               ; code
00533Fr 2               underflow_1:
00533Fr 2               ; """Make sure we have at least one cell on the Data Stack"""
00533Fr 2  E0 rr            cpx #dsp0-1
005341r 2  10 10            bpl underflow_error
005343r 2  60               rts
005344r 2               underflow_2:
005344r 2               ; """Make sure we have at least two cells on the Data Stack"""
005344r 2  E0 rr            cpx #dsp0-3
005346r 2  10 0B            bpl underflow_error
005348r 2  60               rts
005349r 2               underflow_3:
005349r 2               ; """Make sure we have at least three cells on the Data Stack"""
005349r 2  E0 rr            cpx #dsp0-5
00534Br 2  10 06            bpl underflow_error
00534Dr 2  60               rts
00534Er 2               underflow_4:
00534Er 2               ; """Make sure we have at least four cells on the Data Stack"""
00534Er 2  E0 rr            cpx #dsp0-7
005350r 2  10 01            bpl underflow_error
005352r 2  60               rts
005353r 2               
005353r 2               underflow_error:
005353r 2                   ; Entry for COLD/ABORT/QUIT
005353r 2  A9 09            lda #err_underflow      ; fall through to error
005355r 2               
005355r 2               error:
005355r 2               ; """Given the error number in a, print the associated error string and
005355r 2               ; call abort. Uses tmp3.
005355r 2               ; """
005355r 2  0A               asl
005356r 2  A8               tay
005357r 2  B9 rr rr         lda error_table,y
00535Ar 2  85 rr            sta tmp3                ; LSB
00535Cr 2  C8               iny
00535Dr 2  B9 rr rr         lda error_table,y
005360r 2  85 rr            sta tmp3+1              ; MSB
005362r 2               
005362r 2  20 rr rr         jsr print_common
005365r 2  20 rr rr         jsr xt_cr
005368r 2  4C rr rr         jmp xt_abort            ; no jsr, as we clobber return stack
00536Br 2               
00536Br 2               
00536Br 2               ; =====================================================================
00536Br 2               ; PRINTING ROUTINES
00536Br 2               
00536Br 2               ; We distinguish two types of print calls, both of which take the string number
00536Br 2               ; (see strings.asm) in A:
00536Br 2               
00536Br 2               ;       print_string       - with a line feed
00536Br 2               ;       print_string_no_lf - without a line feed
00536Br 2               
00536Br 2               ; In addition, print_common provides a lower-level alternative for error
00536Br 2               ; handling and anything else that provides the address of the
00536Br 2               ; zero-terminated string directly in tmp3. All of those routines assume that
00536Br 2               ; printing should be more concerned with size than speed, because anything to
00536Br 2               ; do with humans reading text is going to be slow.
00536Br 2               
00536Br 2               print_string_no_lf:
00536Br 2               ; """Given the number of a zero-terminated string in A, print it to the
00536Br 2               ; current output without adding a LF. Uses Y and tmp3 by falling
00536Br 2               ; through to print_common
00536Br 2               ; """
00536Br 2                   ; Get the entry from the string table
00536Br 2  0A               asl
00536Cr 2  A8               tay
00536Dr 2  B9 rr rr         lda string_table,y
005370r 2  85 rr            sta tmp3                ; LSB
005372r 2  C8               iny
005373r 2  B9 rr rr         lda string_table,y
005376r 2  85 rr            sta tmp3+1              ; MSB
005378r 2               
005378r 2                   ; fall through to print_common
005378r 2               print_common:
005378r 2               ; """Common print routine used by both the print functions and
005378r 2               ; the error printing routine. Assumes string address is in tmp3. Uses
005378r 2               ; Y.
005378r 2               ; """
005378r 2               .scope
005378r 2  A0 00            ldy #0
00537Ar 2               _loop:
00537Ar 2  B1 rr            lda (tmp3),y
00537Cr 2  F0 06            beq _done               ; strings are zero-terminated
00537Er 2               
00537Er 2  20 rr rr         jsr emit_a              ; allows vectoring via output
005381r 2  C8               iny
005382r 2  80 F6            bra _loop
005384r 2               _done:
005384r 2  60               rts
005385r 2               .endscope
005385r 2               
005385r 2               print_string:
005385r 2               ; """Print a zero-terminated string to the console/screen, adding a LF.
005385r 2               ; We do not check to see if the index is out of range. Uses tmp3.
005385r 2               ; """
005385r 2  20 rr rr         jsr print_string_no_lf
005388r 2  4C rr rr         jmp xt_cr               ; JSR/RTS because never compiled
00538Br 2               
00538Br 2               
00538Br 2               print_u:
00538Br 2               ; """basic printing routine used by higher-level constructs,
00538Br 2               ; the equivalent of the forth word  0 <# #s #> type  which is
00538Br 2               ; basically u. without the space at the end. used for various
00538Br 2               ; outputs
00538Br 2               ; """
00538Br 2  20 rr rr         jsr xt_zero                     ; 0
00538Er 2  20 rr rr         jsr xt_less_number_sign         ; <#
005391r 2  20 rr rr         jsr xt_number_sign_s            ; #S
005394r 2  20 rr rr         jsr xt_number_sign_greater      ; #>
005397r 2  4C rr rr         jmp xt_type                     ; JSR/RTS because never compiled
00539Ar 2               
00539Ar 2               ; END
00539Ar 2               
00539Ar 1               
00539Ar 1               .segment "DATA"
00539Ar 1               
00539Ar 1               .ifdef TALI_OPTIONAL_ASSEMBLER
00539Ar 1               .include "../../assembler.s"
00539Ar 2               ; Assembler for Tali Forth 2
00539Ar 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00539Ar 2               ; First version: 07. Nov 2014 (as tasm65c02)
00539Ar 2               ; This version: 03. Jan 2019
00539Ar 2               
00539Ar 2               ; This is the built-in assembler for Tali Forth 2. Once the assembler wordlist
00539Ar 2               ; is included with
00539Ar 2               
00539Ar 2               ;       assembler-wordlist >order
00539Ar 2               
00539Ar 2               ; the opcodes are available as normal Forth words. The format is Simpler
00539Ar 2               ; Assembler Notation (SAN) which separates the opcode completely from the
00539Ar 2               ; operand (see https://github.com/scotws/SAN). In this case, the operand is
00539Ar 2               ; entered before the opcode in the postfix Forth notation (for example, "2000
00539Ar 2               ; lda.#"). See the assembler documenation in the manual for more detail.
00539Ar 2               
00539Ar 2               ; The code here was originally used in A Typist's Assembler for the 65c02
00539Ar 2               ; (tasm65c02), see https://github.com/scotws/tasm65c02 for the standalone
00539Ar 2               ; version. Tasm65c02 is in the public domain.
00539Ar 2               
00539Ar 2               ; This code makes use of the opcode tables stored as part of the disassembler.
00539Ar 2               
00539Ar 2               ; ==========================================================
00539Ar 2               ; MNEMONICS
00539Ar 2               
00539Ar 2               ; The assembler instructions are realized as individual Forth words with
00539Ar 2               ; entries in the assembler wordlist (see header.asm). We pass the opcode in A.
00539Ar 2               
00539Ar 2               ; An alterantive method would have been along the lines of
00539Ar 2               
00539Ar 2               ;               jsr asm_common
00539Ar 2               ;               .byte $EA
00539Ar 2               
00539Ar 2               ; where the asm_common then uses the address on the Return Stack to pick up the
00539Ar 2               ; opcode and the length. Though this uses fewer resources, the current version
00539Ar 2               ; makes up for this by simplifying the code of asm_common.
00539Ar 2               
00539Ar 2               ; The routines are organized alphabetically by SAN mnemonic, not by opcode. The
00539Ar 2               ; SAN and traditional mnemonics are listed after the opcode load instruction.
00539Ar 2               ; This list was generated by a Python script in the tools folder, see there for
00539Ar 2               ; more detail.
00539Ar 2               
00539Ar 2               assembler:              ; used to calculate size of assembler code
00539Ar 2               .ifdef TALI_OPTIONAL_ASSEMBLER
00539Ar 2               xt_asm_adc_h:   ; adc.# \ ADC #nn
00539Ar 2  A9 69                        lda #$69
00539Cr 2  4C rr rr                     jmp asm_common
00539Fr 2               z_asm_adc_h:
00539Fr 2               
00539Fr 2               xt_asm_adc_x:   ; adc.x \ ADC nnnn,X
00539Fr 2  A9 7D                        lda #$7D
0053A1r 2  4C rr rr                     jmp asm_common
0053A4r 2               z_asm_adc_x:
0053A4r 2               
0053A4r 2               xt_asm_adc_y:   ; adc.y \ ADC nnnn,Y
0053A4r 2  A9 79                        lda #$79
0053A6r 2  4C rr rr                     jmp asm_common
0053A9r 2               z_asm_adc_y:
0053A9r 2               
0053A9r 2               xt_asm_adc_z:   ; adc.z \ ADC nn
0053A9r 2  A9 65                        lda #$65
0053ABr 2  4C rr rr                     jmp asm_common
0053AEr 2               z_asm_adc_z:
0053AEr 2               
0053AEr 2               xt_asm_adc_zi:  ; adc.zi \ ADC (nn)
0053AEr 2  A9 72                        lda #$72
0053B0r 2  4C rr rr                     jmp asm_common
0053B3r 2               z_asm_adc_zi:
0053B3r 2               
0053B3r 2               xt_asm_adc_ziy: ; adc.ziy \ ADC (nn),Y
0053B3r 2  A9 71                        lda #$71
0053B5r 2  4C rr rr                     jmp asm_common
0053B8r 2               z_asm_adc_ziy:
0053B8r 2               
0053B8r 2               xt_asm_adc_zx:  ; adc.zx \ ADC nn,X
0053B8r 2  A9 75                        lda #$75
0053BAr 2  4C rr rr                     jmp asm_common
0053BDr 2               z_asm_adc_zx:
0053BDr 2               
0053BDr 2               xt_asm_adc_zxi: ; adc.zxi \ ADC (nn,X)
0053BDr 2  A9 61                        lda #$61
0053BFr 2  4C rr rr                     jmp asm_common
0053C2r 2               z_asm_adc_zxi:
0053C2r 2               
0053C2r 2               xt_asm_and:     ; and. \ AND nnnn
0053C2r 2  A9 2D                        lda #$2D
0053C4r 2  4C rr rr                     jmp asm_common
0053C7r 2               z_asm_and:
0053C7r 2               
0053C7r 2               xt_asm_and_h:   ; and.# \ AND #nn
0053C7r 2  A9 29                        lda #$29
0053C9r 2  4C rr rr                     jmp asm_common
0053CCr 2               z_asm_and_h:
0053CCr 2               
0053CCr 2               xt_asm_and_x:   ; and.x \ AND nnnn,X
0053CCr 2  A9 3D                        lda #$3D
0053CEr 2  4C rr rr                     jmp asm_common
0053D1r 2               z_asm_and_x:
0053D1r 2               
0053D1r 2               xt_asm_and_y:   ; and.y \ AND nnnn,Y
0053D1r 2  A9 39                        lda #$39
0053D3r 2  4C rr rr                     jmp asm_common
0053D6r 2               z_asm_and_y:
0053D6r 2               
0053D6r 2               xt_asm_and_z:   ; and.z \ AND nn
0053D6r 2  A9 25                        lda #$25
0053D8r 2  4C rr rr                     jmp asm_common
0053DBr 2               z_asm_and_z:
0053DBr 2               
0053DBr 2               xt_asm_and_zi:  ; and.zi \ AND (nn)
0053DBr 2  A9 32                        lda #$32
0053DDr 2  4C rr rr                     jmp asm_common
0053E0r 2               z_asm_and_zi:
0053E0r 2               
0053E0r 2               xt_asm_and_ziy: ; and.ziy \ AND (nn),Y
0053E0r 2  A9 31                        lda #$31
0053E2r 2  4C rr rr                     jmp asm_common
0053E5r 2               z_asm_and_ziy:
0053E5r 2               
0053E5r 2               xt_asm_and_zx:  ; and.zx \ AND nn,X
0053E5r 2  A9 35                        lda #$35
0053E7r 2  4C rr rr                     jmp asm_common
0053EAr 2               z_asm_and_zx:
0053EAr 2               
0053EAr 2               xt_asm_and_zxi: ; and.zxi \ AND (nn,X)
0053EAr 2  A9 21                        lda #$21
0053ECr 2  4C rr rr                     jmp asm_common
0053EFr 2               z_asm_and_zxi:
0053EFr 2               
0053EFr 2               xt_asm_asl:     ; asl \ ASL nnnn
0053EFr 2  A9 0E                        lda #$0E
0053F1r 2  4C rr rr                     jmp asm_common
0053F4r 2               z_asm_asl:
0053F4r 2               
0053F4r 2               xt_asm_asl_a:   ; asl.a \ ASL
0053F4r 2  A9 0A                        lda #$0A
0053F6r 2  4C rr rr                     jmp asm_common
0053F9r 2               z_asm_asl_a:
0053F9r 2               
0053F9r 2               xt_asm_asl_x:   ; asl.x \ ASL nnnn,X
0053F9r 2  A9 1E                        lda #$1E
0053FBr 2  4C rr rr                     jmp asm_common
0053FEr 2               z_asm_asl_x:
0053FEr 2               
0053FEr 2               xt_asm_asl_z:   ; asl.z \ ASL nn
0053FEr 2  A9 06                        lda #$06
005400r 2  4C rr rr                     jmp asm_common
005403r 2               z_asm_asl_z:
005403r 2               
005403r 2               xt_asm_asl_zx:  ; asl.zx \ ASL nn,X
005403r 2  A9 16                        lda #$16
005405r 2  4C rr rr                     jmp asm_common
005408r 2               z_asm_asl_zx:
005408r 2               
005408r 2               xt_asm_bcc:     ; bcc \ BCC
005408r 2  A9 90                        lda #$90
00540Ar 2  4C rr rr                     jmp asm_common
00540Dr 2               z_asm_bcc:
00540Dr 2               
00540Dr 2               xt_asm_bcs:     ; bcs \ BCS
00540Dr 2  A9 B0                        lda #$B0
00540Fr 2  A0 02                        ldy #2
005411r 2  4C rr rr                     jmp asm_common
005414r 2               z_asm_bcs:
005414r 2               
005414r 2               xt_asm_beq:     ; beq \ BEQ
005414r 2  A9 F0                        lda #$F0
005416r 2  4C rr rr                     jmp asm_common
005419r 2               z_asm_beq:
005419r 2               
005419r 2               xt_asm_bit:     ; bit \ BIT nnnn
005419r 2  A9 2C                        lda #$2C
00541Br 2  4C rr rr                     jmp asm_common
00541Er 2               z_asm_bit:
00541Er 2               
00541Er 2               xt_asm_bit_h:   ; bit.# \ BIT #nn
00541Er 2  A9 89                        lda #$89
005420r 2  4C rr rr                     jmp asm_common
005423r 2               z_asm_bit_h:
005423r 2               
005423r 2               xt_asm_bit_x:   ; bit.x \ BIT nnnn,X
005423r 2  A9 3C                        lda #$3C
005425r 2  4C rr rr                     jmp asm_common
005428r 2               z_asm_bit_x:
005428r 2               
005428r 2               xt_asm_bit_z:   ; bit.z \ BIT nn
005428r 2  A9 24                        lda #$24
00542Ar 2  4C rr rr                     jmp asm_common
00542Dr 2               z_asm_bit_z:
00542Dr 2               
00542Dr 2               xt_asm_bit_zx:  ; bit.zx \ BIT nn,X
00542Dr 2  A9 34                        lda #$34
00542Fr 2  4C rr rr                     jmp asm_common
005432r 2               z_asm_bit_zx:
005432r 2               
005432r 2               xt_asm_bmi:     ; bmi \ BMI
005432r 2  A9 30                        lda #$30
005434r 2  4C rr rr                     jmp asm_common
005437r 2               z_asm_bmi:
005437r 2               
005437r 2               xt_asm_bne:     ; bne \ BNE
005437r 2  A9 D0                        lda #$D0
005439r 2  4C rr rr                     jmp asm_common
00543Cr 2               z_asm_bne:
00543Cr 2               
00543Cr 2               xt_asm_bpl:     ; bpl \ BPL
00543Cr 2  A9 10                        lda #$10
00543Er 2  4C rr rr                     jmp asm_common
005441r 2               z_asm_bpl:
005441r 2               
005441r 2               xt_asm_bra:     ; bra \ BRA
005441r 2  A9 80                        lda #$80
005443r 2  4C rr rr                     jmp asm_common
005446r 2               z_asm_bra:
005446r 2               
005446r 2               xt_asm_brk:     ; brk \ BRK
005446r 2  A9 00                        lda #$00
005448r 2  4C rr rr                     jmp asm_common
00544Br 2               z_asm_brk:
00544Br 2               
00544Br 2               xt_asm_bvc:     ; bvc \ BVC
00544Br 2  A9 50                        lda #$50
00544Dr 2  4C rr rr                     jmp asm_common
005450r 2               z_asm_bvc:
005450r 2               
005450r 2               xt_asm_bvs:     ; bvs \ BVS
005450r 2  A9 70                        lda #$70
005452r 2  4C rr rr                     jmp asm_common
005455r 2               z_asm_bvs:
005455r 2               
005455r 2               xt_asm_clc:     ; clc \ CLC
005455r 2  A9 18                        lda #$18
005457r 2  4C rr rr                     jmp asm_common
00545Ar 2               z_asm_clc:
00545Ar 2               
00545Ar 2               xt_asm_cld:     ; cld \ CLD
00545Ar 2  A9 D8                        lda #$D8
00545Cr 2  4C rr rr                     jmp asm_common
00545Fr 2               z_asm_cld:
00545Fr 2               
00545Fr 2               xt_asm_cli:     ; cli \ CLI
00545Fr 2  A9 58                        lda #$58
005461r 2  4C rr rr                     jmp asm_common
005464r 2               z_asm_cli:
005464r 2               
005464r 2               xt_asm_clv:     ; clv \ CLV
005464r 2  A9 B8                        lda #$B8
005466r 2  4C rr rr                     jmp asm_common
005469r 2               z_asm_clv:
005469r 2               
005469r 2               xt_asm_cmp:     ; cmp \ CMP nnnn
005469r 2  A9 CD                        lda #$CD
00546Br 2  4C rr rr                     jmp asm_common
00546Er 2               z_asm_cmp:
00546Er 2               
00546Er 2               xt_asm_cmp_h:   ; cmp.# \ CMP #nn
00546Er 2  A9 C9                        lda #$C9
005470r 2  4C rr rr                     jmp asm_common
005473r 2               z_asm_cmp_h:
005473r 2               
005473r 2               xt_asm_cmp_x:   ; cmp.x \ CMP nnnn,X
005473r 2  A9 DD                        lda #$DD
005475r 2  4C rr rr                     jmp asm_common
005478r 2               z_asm_cmp_x:
005478r 2               
005478r 2               xt_asm_cmp_y:   ; cmp.y \ CMP nnnn,Y
005478r 2  A9 D9                        lda #$D9
00547Ar 2  4C rr rr                     jmp asm_common
00547Dr 2               z_asm_cmp_y:
00547Dr 2               
00547Dr 2               xt_asm_cmp_z:   ; cmp.z \ CMP nn
00547Dr 2  A9 C5                        lda #$C5
00547Fr 2  4C rr rr                     jmp asm_common
005482r 2               z_asm_cmp_z:
005482r 2               
005482r 2               xt_asm_cmp_zi:  ; cmp.zi \ CMP (nn)
005482r 2  A9 D2                        lda #$D2
005484r 2  4C rr rr                     jmp asm_common
005487r 2               z_asm_cmp_zi:
005487r 2               
005487r 2               xt_asm_cmp_ziy: ; cmp.ziy \ CMP (nn),Y
005487r 2  A9 D1                        lda #$D1
005489r 2  4C rr rr                     jmp asm_common
00548Cr 2               z_asm_cmp_ziy:
00548Cr 2               
00548Cr 2               xt_asm_cmp_zx:  ; cmp.zx \ CMP nn,X
00548Cr 2  A9 D5                        lda #$D5
00548Er 2  4C rr rr                     jmp asm_common
005491r 2               z_asm_cmp_zx:
005491r 2               
005491r 2               xt_asm_cmp_zxi: ; cmp.zxi \ CMP (nn,X)
005491r 2  A9 C1                        lda #$C1
005493r 2  4C rr rr                     jmp asm_common
005496r 2               z_asm_cmp_zxi:
005496r 2               
005496r 2               xt_asm_cpx:     ; cpx \ CPX nnnn
005496r 2  A9 EC                        lda #$EC
005498r 2  4C rr rr                     jmp asm_common
00549Br 2               z_asm_cpx:
00549Br 2               
00549Br 2               xt_asm_cpx_h:   ; cpx.# \ CPX #nn
00549Br 2  A9 E0                        lda #$E0
00549Dr 2  4C rr rr                     jmp asm_common
0054A0r 2               z_asm_cpx_h:
0054A0r 2               
0054A0r 2               xt_asm_cpx_z:   ; cpx.z \ CPX nn
0054A0r 2  A9 E4                        lda #$E4
0054A2r 2  4C rr rr                     jmp asm_common
0054A5r 2               z_asm_cpx_z:
0054A5r 2               
0054A5r 2               xt_asm_cpy:     ; cpy \ CPY
0054A5r 2  A9 CC                        lda #$CC
0054A7r 2  A0 03                        ldy #3
0054A9r 2  4C rr rr                     jmp asm_common
0054ACr 2               z_asm_cpy:
0054ACr 2               
0054ACr 2               xt_asm_cpy_h:   ; cpy.# \ CPY #nn
0054ACr 2  A9 C0                        lda #$C0
0054AEr 2  4C rr rr                     jmp asm_common
0054B1r 2               z_asm_cpy_h:
0054B1r 2               
0054B1r 2               xt_asm_cpy_z:   ; cpy.z \ CPY nn
0054B1r 2  A9 C4                        lda #$C4
0054B3r 2  4C rr rr                     jmp asm_common
0054B6r 2               z_asm_cpy_z:
0054B6r 2               
0054B6r 2               xt_asm_dec:     ; dec \ DEC nnnn
0054B6r 2  A9 CE                        lda #$CE
0054B8r 2  4C rr rr                     jmp asm_common
0054BBr 2               z_asm_dec:
0054BBr 2               
0054BBr 2               xt_asm_dec_a:   ; dec.a \ DEC
0054BBr 2  A9 3A                        lda #$3A
0054BDr 2  4C rr rr                     jmp asm_common
0054C0r 2               z_asm_dec_a:
0054C0r 2               
0054C0r 2               xt_asm_dec_x:   ; dec.x \ DEC nnnn,X
0054C0r 2  A9 DE                        lda #$DE
0054C2r 2  4C rr rr                     jmp asm_common
0054C5r 2               z_asm_dec_x:
0054C5r 2               
0054C5r 2               xt_asm_dec_z:   ; dec.z \ DEC nn
0054C5r 2  A9 C6                        lda #$C6
0054C7r 2  4C rr rr                     jmp asm_common
0054CAr 2               z_asm_dec_z:
0054CAr 2               
0054CAr 2               xt_asm_dec_zx:  ; dec.zx \ DEC nn,X
0054CAr 2  A9 D6                        lda #$D6
0054CCr 2  4C rr rr                     jmp asm_common
0054CFr 2               z_asm_dec_zx:
0054CFr 2               
0054CFr 2               xt_asm_dex:     ; dex \ DEX
0054CFr 2  A9 CA                        lda #$CA
0054D1r 2  4C rr rr                     jmp asm_common
0054D4r 2               z_asm_dex:
0054D4r 2               
0054D4r 2               xt_asm_dey:     ; dey \ DEY
0054D4r 2  A9 88                        lda #$88
0054D6r 2  4C rr rr                     jmp asm_common
0054D9r 2               z_asm_dey:
0054D9r 2               
0054D9r 2               xt_asm_eor:     ; eor \ EOR nnnn
0054D9r 2  A9 4D                        lda #$4D
0054DBr 2  4C rr rr                     jmp asm_common
0054DEr 2               z_asm_eor:
0054DEr 2               
0054DEr 2               xt_asm_eor_h:   ; eor.# \ EOR #nn
0054DEr 2  A9 49                        lda #$49
0054E0r 2  4C rr rr                     jmp asm_common
0054E3r 2               z_asm_eor_h:
0054E3r 2               
0054E3r 2               xt_asm_eor_x:   ; eor.x \ EOR nnnn,X
0054E3r 2  A9 5D                        lda #$5D
0054E5r 2  4C rr rr                     jmp asm_common
0054E8r 2               z_asm_eor_x:
0054E8r 2               
0054E8r 2               xt_asm_eor_y:   ; eor.y \ EOR nnnn,Y
0054E8r 2  A9 59                        lda #$59
0054EAr 2  4C rr rr                     jmp asm_common
0054EDr 2               z_asm_eor_y:
0054EDr 2               
0054EDr 2               xt_asm_eor_z:   ; eor.z \ EOR nn
0054EDr 2  A9 45                        lda #$45
0054EFr 2  4C rr rr                     jmp asm_common
0054F2r 2               z_asm_eor_z:
0054F2r 2               
0054F2r 2               xt_asm_eor_zi:  ; eor.zi \ EOR (nn)
0054F2r 2  A9 52                        lda #$52
0054F4r 2  4C rr rr                     jmp asm_common
0054F7r 2               z_asm_eor_zi:
0054F7r 2               
0054F7r 2               xt_asm_eor_ziy: ; eor.ziy \ EOR (nn),Y
0054F7r 2  A9 51                        lda #$51
0054F9r 2  4C rr rr                     jmp asm_common
0054FCr 2               z_asm_eor_ziy:
0054FCr 2               
0054FCr 2               xt_asm_eor_zx:  ; eor.zx \ EOR nn,X
0054FCr 2  A9 55                        lda #$55
0054FEr 2  4C rr rr                     jmp asm_common
005501r 2               z_asm_eor_zx:
005501r 2               
005501r 2               xt_asm_eor_zxi: ; eor.zxi \ EOR (nn,X)
005501r 2  A9 41                        lda #$41
005503r 2  4C rr rr                     jmp asm_common
005506r 2               z_asm_eor_zxi:
005506r 2               
005506r 2               xt_asm_inc:     ; inc \ INC nnnn
005506r 2  A9 EE                        lda #$EE
005508r 2  4C rr rr                     jmp asm_common
00550Br 2               z_asm_inc:
00550Br 2               
00550Br 2               xt_asm_inc_a:   ; inc.a \ INC
00550Br 2  A9 1A                        lda #$1A
00550Dr 2  4C rr rr                     jmp asm_common
005510r 2               z_asm_inc_a:
005510r 2               
005510r 2               xt_asm_inc_x:   ; inc.x \ INC nnnn,X
005510r 2  A9 FE                        lda #$FE
005512r 2  4C rr rr                     jmp asm_common
005515r 2               z_asm_inc_x:
005515r 2               
005515r 2               xt_asm_inc_z:   ; inc.z \ INC nn
005515r 2  A9 E6                        lda #$E6
005517r 2  4C rr rr                     jmp asm_common
00551Ar 2               z_asm_inc_z:
00551Ar 2               
00551Ar 2               xt_asm_inc_zx:  ; inc.zx \ INC nn,X
00551Ar 2  A9 F6                        lda #$F6
00551Cr 2  4C rr rr                     jmp asm_common
00551Fr 2               z_asm_inc_zx:
00551Fr 2               
00551Fr 2               xt_asm_inx:     ; inx \ INX
00551Fr 2  A9 E8                        lda #$E8
005521r 2  4C rr rr                     jmp asm_common
005524r 2               z_asm_inx:
005524r 2               
005524r 2               xt_asm_iny:     ; iny \ INY
005524r 2  A9 C8                        lda #$C8
005526r 2  4C rr rr                     jmp asm_common
005529r 2               z_asm_iny:
005529r 2               
005529r 2               xt_asm_jmp:     ; jmp \ JMP nnnn
005529r 2  A9 4C                        lda #$4C
00552Br 2  4C rr rr                     jmp asm_common
00552Er 2               z_asm_jmp:
00552Er 2               
00552Er 2               xt_asm_jmp_i:   ; jmp.i \ JMP (nnnn)
00552Er 2  A9 6C                        lda #$6C
005530r 2  4C rr rr                     jmp asm_common
005533r 2               z_asm_jmp_i:
005533r 2               
005533r 2               xt_asm_jmp_xi:  ; jmp.xi \ JMP (nnnn,X)
005533r 2  A9 7C                        lda #$7C
005535r 2  4C rr rr                     jmp asm_common
005538r 2               z_asm_jmp_xi:
005538r 2               
005538r 2               xt_asm_jsr:     ; jsr \ JSR nnnn
005538r 2  A9 20                        lda #$20
00553Ar 2  4C rr rr                     jmp asm_common
00553Dr 2               z_asm_jsr:
00553Dr 2               
00553Dr 2               xt_asm_lda:     ; lda \ LDA nnnn
00553Dr 2  A9 AD                        lda #$AD
00553Fr 2  4C rr rr                     jmp asm_common
005542r 2               z_asm_lda:
005542r 2               
005542r 2               xt_asm_lda_h:   ; lda.# \ LDA #nn
005542r 2  A9 A9                        lda #$A9
005544r 2  4C rr rr                     jmp asm_common
005547r 2               z_asm_lda_h:
005547r 2               
005547r 2               xt_asm_lda_x:   ; lda.x \ LDA nnnn,X
005547r 2  A9 BD                        lda #$BD
005549r 2  4C rr rr                     jmp asm_common
00554Cr 2               z_asm_lda_x:
00554Cr 2               
00554Cr 2               xt_asm_lda_y:   ; lda.y \ LDA nnnn,Y
00554Cr 2  A9 B9                        lda #$B9
00554Er 2  4C rr rr                     jmp asm_common
005551r 2               z_asm_lda_y:
005551r 2               
005551r 2               xt_asm_lda_z:   ; lda.z \ LDA nn
005551r 2  A9 A5                        lda #$A5
005553r 2  4C rr rr                     jmp asm_common
005556r 2               z_asm_lda_z:
005556r 2               
005556r 2               xt_asm_lda_zi:  ; lda.zi \ LDA (nn)
005556r 2  A9 B2                        lda #$B2
005558r 2  4C rr rr                     jmp asm_common
00555Br 2               z_asm_lda_zi:
00555Br 2               
00555Br 2               xt_asm_lda_ziy: ; lda.ziy \ LDA (nn),Y
00555Br 2  A9 B1                        lda #$B1
00555Dr 2  4C rr rr                     jmp asm_common
005560r 2               z_asm_lda_ziy:
005560r 2               
005560r 2               xt_asm_lda_zx:  ; lda.zx \ LDA nn,X
005560r 2  A9 B5                        lda #$B5
005562r 2  4C rr rr                     jmp asm_common
005565r 2               z_asm_lda_zx:
005565r 2               
005565r 2               xt_asm_lda_zxi: ; lda.zxi \ LDA (nn,X)
005565r 2  A9 A1                        lda #$A1
005567r 2  4C rr rr                     jmp asm_common
00556Ar 2               z_asm_lda_zxi:
00556Ar 2               
00556Ar 2               xt_asm_ldx:     ; ldx \ LDX nnnn
00556Ar 2  A9 AE                        lda #$AE
00556Cr 2  4C rr rr                     jmp asm_common
00556Fr 2               z_asm_ldx:
00556Fr 2               
00556Fr 2               xt_asm_ldx_h:   ; ldx.# \ LDX #nn
00556Fr 2  A9 A2                        lda #$A2
005571r 2  4C rr rr                     jmp asm_common
005574r 2               z_asm_ldx_h:
005574r 2               
005574r 2               xt_asm_ldx_y:   ; ldx.y \ LDX nnnn,Y
005574r 2  A9 BE                        lda #$BE
005576r 2  4C rr rr                     jmp asm_common
005579r 2               z_asm_ldx_y:
005579r 2               
005579r 2               xt_asm_ldx_z:   ; ldx.z \ LDX nn
005579r 2  A9 A6                        lda #$A6
00557Br 2  4C rr rr                     jmp asm_common
00557Er 2               z_asm_ldx_z:
00557Er 2               
00557Er 2               xt_asm_ldx_zy:  ; ldx.zy \ LDX nn,Y
00557Er 2  A9 B6                        lda #$B6
005580r 2  4C rr rr                     jmp asm_common
005583r 2               z_asm_ldx_zy:
005583r 2               
005583r 2               xt_asm_ldy:     ; ldy \ LDY nnnn
005583r 2  A9 AC                        lda #$AC
005585r 2  4C rr rr                     jmp asm_common
005588r 2               z_asm_ldy:
005588r 2               
005588r 2               xt_asm_ldy_h:   ; ldy.# \ LDY #nn
005588r 2  A9 A0                        lda #$A0
00558Ar 2  4C rr rr                     jmp asm_common
00558Dr 2               z_asm_ldy_h:
00558Dr 2               
00558Dr 2               xt_asm_ldy_x:   ; ldy.x \ LDY nnnn,X
00558Dr 2  A9 BC                        lda #$BC
00558Fr 2  4C rr rr                     jmp asm_common
005592r 2               z_asm_ldy_x:
005592r 2               
005592r 2               xt_asm_ldy_z:   ; ldy.z \ LDY nn
005592r 2  A9 A4                        lda #$A4
005594r 2  4C rr rr                     jmp asm_common
005597r 2               z_asm_ldy_z:
005597r 2               
005597r 2               xt_asm_ldy_zx:  ; ldy.zx \ LDY nn,X
005597r 2  A9 B4                        lda #$B4
005599r 2  4C rr rr                     jmp asm_common
00559Cr 2               z_asm_ldy_zx:
00559Cr 2               
00559Cr 2               xt_asm_lsr:     ; lsr \ LSR nnnn
00559Cr 2  A9 4E                        lda #$4E
00559Er 2  4C rr rr                     jmp asm_common
0055A1r 2               z_asm_lsr:
0055A1r 2               
0055A1r 2               xt_asm_lsr_a:   ; lsr.a \ LSR
0055A1r 2  A9 4A                        lda #$4A
0055A3r 2  4C rr rr                     jmp asm_common
0055A6r 2               z_asm_lsr_a:
0055A6r 2               
0055A6r 2               xt_asm_lsr_x:   ; lsr.x \ LSR nnnn,X
0055A6r 2  A9 5E                        lda #$5E
0055A8r 2  4C rr rr                     jmp asm_common
0055ABr 2               z_asm_lsr_x:
0055ABr 2               
0055ABr 2               xt_asm_lsr_z:   ; lsr.z \ LSR nn
0055ABr 2  A9 46                        lda #$46
0055ADr 2  4C rr rr                     jmp asm_common
0055B0r 2               z_asm_lsr_z:
0055B0r 2               
0055B0r 2               xt_asm_lsr_zx:  ; lsr.zx \ LSR nn,X
0055B0r 2  A9 56                        lda #$56
0055B2r 2  4C rr rr                     jmp asm_common
0055B5r 2               z_asm_lsr_zx:
0055B5r 2               
0055B5r 2               xt_asm_nop:     ; nop \ NOP
0055B5r 2  A9 EA                        lda #$EA
0055B7r 2  4C rr rr                     jmp asm_common
0055BAr 2               z_asm_nop:
0055BAr 2               
0055BAr 2               xt_asm_ora:     ; ora \ ORA nnnn
0055BAr 2  A9 0D                        lda #$0D
0055BCr 2  4C rr rr                     jmp asm_common
0055BFr 2               z_asm_ora:
0055BFr 2               
0055BFr 2               xt_asm_ora_h:   ; ora.# \ ORA #nn
0055BFr 2  A9 09                        lda #$09
0055C1r 2  4C rr rr                     jmp asm_common
0055C4r 2               z_asm_ora_h:
0055C4r 2               
0055C4r 2               xt_asm_ora_x:   ; ora.x \ ORA nnnn,X
0055C4r 2  A9 1D                        lda #$1D
0055C6r 2  4C rr rr                     jmp asm_common
0055C9r 2               z_asm_ora_x:
0055C9r 2               
0055C9r 2               xt_asm_ora_y:   ; ora.y \ ORA nnnn,Y
0055C9r 2  A9 19                        lda #$19
0055CBr 2  4C rr rr                     jmp asm_common
0055CEr 2               z_asm_ora_y:
0055CEr 2               
0055CEr 2               xt_asm_ora_z:   ; ora.z \ ORA nn
0055CEr 2  A9 05                        lda #$05
0055D0r 2  4C rr rr                     jmp asm_common
0055D3r 2               z_asm_ora_z:
0055D3r 2               
0055D3r 2               xt_asm_ora_zi:  ; ora.zi \ ORA.ZI
0055D3r 2  A9 12                        lda #$12
0055D5r 2  A0 02                        ldy #2
0055D7r 2  4C rr rr                     jmp asm_common
0055DAr 2               z_asm_ora_zi:
0055DAr 2               
0055DAr 2               xt_asm_ora_ziy: ; ora.ziy \ ORA (nn),Y
0055DAr 2  A9 11                        lda #$11
0055DCr 2  4C rr rr                     jmp asm_common
0055DFr 2               z_asm_ora_ziy:
0055DFr 2               
0055DFr 2               xt_asm_ora_zx:  ; ora.zx \ ORA nn,X
0055DFr 2  A9 15                        lda #$15
0055E1r 2  4C rr rr                     jmp asm_common
0055E4r 2               z_asm_ora_zx:
0055E4r 2               
0055E4r 2               xt_asm_ora_zxi: ; ora.zxi \ ORA (nn,X)
0055E4r 2  A9 01                        lda #$01
0055E6r 2  4C rr rr                     jmp asm_common
0055E9r 2               z_asm_ora_zxi:
0055E9r 2               
0055E9r 2               xt_asm_pha:     ; pha \ PHA
0055E9r 2  A9 48                        lda #$48
0055EBr 2  4C rr rr                     jmp asm_common
0055EEr 2               z_asm_pha:
0055EEr 2               
0055EEr 2               xt_asm_php:     ; php \ PHP
0055EEr 2  A9 08                        lda #$08
0055F0r 2  4C rr rr                     jmp asm_common
0055F3r 2               z_asm_php:
0055F3r 2               
0055F3r 2               xt_asm_phx:     ; phx \ PHX
0055F3r 2  A9 DA                        lda #$DA
0055F5r 2  4C rr rr                     jmp asm_common
0055F8r 2               z_asm_phx:
0055F8r 2               
0055F8r 2               xt_asm_phy:     ; phy \ PHY
0055F8r 2  A9 5A                        lda #$5A
0055FAr 2  4C rr rr                     jmp asm_common
0055FDr 2               z_asm_phy:
0055FDr 2               
0055FDr 2               xt_asm_pla:     ; pla \ PLA
0055FDr 2  A9 68                        lda #$68
0055FFr 2  4C rr rr                     jmp asm_common
005602r 2               z_asm_pla:
005602r 2               
005602r 2               xt_asm_plp:     ; plp \ PLP
005602r 2  A9 28                        lda #$28
005604r 2  4C rr rr                     jmp asm_common
005607r 2               z_asm_plp:
005607r 2               
005607r 2               xt_asm_plx:     ; plx \ PLX
005607r 2  A9 FA                        lda #$FA
005609r 2  4C rr rr                     jmp asm_common
00560Cr 2               z_asm_plx:
00560Cr 2               
00560Cr 2               xt_asm_ply:     ; ply \ PLY
00560Cr 2  A9 7A                        lda #$7A
00560Er 2  4C rr rr                     jmp asm_common
005611r 2               z_asm_ply:
005611r 2               
005611r 2               xt_asm_rol:     ; rol \ ROL nnnn
005611r 2  A9 2E                        lda #$2E
005613r 2  4C rr rr                     jmp asm_common
005616r 2               z_asm_rol:
005616r 2               
005616r 2               xt_asm_rol_a:   ; rol.a \ ROL
005616r 2  A9 2A                        lda #$2A
005618r 2  4C rr rr                     jmp asm_common
00561Br 2               z_asm_rol_a:
00561Br 2               
00561Br 2               xt_asm_rol_x:   ; rol.x \ ROL nnnn,X
00561Br 2  A9 3E                        lda #$3E
00561Dr 2  4C rr rr                     jmp asm_common
005620r 2               z_asm_rol_x:
005620r 2               
005620r 2               xt_asm_rol_z:   ; rol.z \ ROL nn
005620r 2  A9 26                        lda #$26
005622r 2  4C rr rr                     jmp asm_common
005625r 2               z_asm_rol_z:
005625r 2               
005625r 2               xt_asm_rol_zx:  ; rol.zx \ ROL nn,X
005625r 2  A9 36                        lda #$36
005627r 2  4C rr rr                     jmp asm_common
00562Ar 2               z_asm_rol_zx:
00562Ar 2               
00562Ar 2               xt_asm_ror:     ; ror \ ROR nnnn
00562Ar 2  A9 6E                        lda #$6E
00562Cr 2  4C rr rr                     jmp asm_common
00562Fr 2               z_asm_ror:
00562Fr 2               
00562Fr 2               xt_asm_ror_a:   ; ror.a \ ROR
00562Fr 2  A9 6A                        lda #$6A
005631r 2  4C rr rr                     jmp asm_common
005634r 2               z_asm_ror_a:
005634r 2               
005634r 2               xt_asm_ror_x:   ; ror.x \ ROR nnnn,X
005634r 2  A9 7E                        lda #$7E
005636r 2  4C rr rr                     jmp asm_common
005639r 2               z_asm_ror_x:
005639r 2               
005639r 2               xt_asm_ror_z:   ; ror.z \ ROR nn
005639r 2  A9 66                        lda #$66
00563Br 2  4C rr rr                     jmp asm_common
00563Er 2               z_asm_ror_z:
00563Er 2               
00563Er 2               xt_asm_ror_zx:  ; ror.zx \ ROR nn,X
00563Er 2  A9 76                        lda #$76
005640r 2  4C rr rr                     jmp asm_common
005643r 2               z_asm_ror_zx:
005643r 2               
005643r 2               xt_asm_rti:     ; rti \ RTI
005643r 2  A9 40                        lda #$40
005645r 2  4C rr rr                     jmp asm_common
005648r 2               z_asm_rti:
005648r 2               
005648r 2               xt_asm_rts:     ; rts \ RTS
005648r 2  A9 60                        lda #$60
00564Ar 2  4C rr rr                     jmp asm_common
00564Dr 2               z_asm_rts:
00564Dr 2               
00564Dr 2               xt_asm_sbc:     ; sbc \ SBC nnnn
00564Dr 2  A9 ED                        lda #$ED
00564Fr 2  4C rr rr                     jmp asm_common
005652r 2               z_asm_sbc:
005652r 2               
005652r 2               xt_asm_sbc_h:   ; sbc.# \ SBC #nn
005652r 2  A9 E9                        lda #$E9
005654r 2  4C rr rr                     jmp asm_common
005657r 2               z_asm_sbc_h:
005657r 2               
005657r 2               xt_asm_sbc_x:   ; sbc.x \ SBC nnnn,X
005657r 2  A9 FD                        lda #$FD
005659r 2  4C rr rr                     jmp asm_common
00565Cr 2               z_asm_sbc_x:
00565Cr 2               
00565Cr 2               xt_asm_sbc_y:   ; sbc.y \ SBC nnnn,Y
00565Cr 2  A9 F9                        lda #$F9
00565Er 2  4C rr rr                     jmp asm_common
005661r 2               z_asm_sbc_y:
005661r 2               
005661r 2               xt_asm_sbc_z:   ; sbc.z \ SBC nn
005661r 2  A9 E5                        lda #$E5
005663r 2  4C rr rr                     jmp asm_common
005666r 2               z_asm_sbc_z:
005666r 2               
005666r 2               xt_asm_sbc_zi:  ; sbc.zi \ SBC (nn)
005666r 2  A9 F2                        lda #$F2
005668r 2  4C rr rr                     jmp asm_common
00566Br 2               z_asm_sbc_zi:
00566Br 2               
00566Br 2               xt_asm_sbc_ziy: ; sbc.ziy \ SBC (nn),Y
00566Br 2  A9 F1                        lda #$F1
00566Dr 2  4C rr rr                     jmp asm_common
005670r 2               z_asm_sbc_ziy:
005670r 2               
005670r 2               xt_asm_sbc_zx:  ; sbc.zx \ SBC nn,X
005670r 2  A9 F5                        lda #$F5
005672r 2  4C rr rr                     jmp asm_common
005675r 2               z_asm_sbc_zx:
005675r 2               
005675r 2               xt_asm_sbc_zxi: ; sbc.zxi \ SBC (nn,X)
005675r 2  A9 E1                        lda #$E1
005677r 2  80 7C                        bra asm_common  ; <-- limit for BRA instead of JMP
005679r 2               z_asm_sbc_zxi:
005679r 2               
005679r 2               xt_asm_sec:     ; sec \ SEC
005679r 2  A9 38                        lda #$38
00567Br 2  80 78                        bra asm_common
00567Dr 2               z_asm_sec:
00567Dr 2               
00567Dr 2               xt_asm_sed:     ; sed \ SED
00567Dr 2  A9 F8                        lda #$F8
00567Fr 2  80 74                        bra asm_common
005681r 2               z_asm_sed:
005681r 2               
005681r 2               xt_asm_sei:     ; sei \ SEI
005681r 2  A9 78                        lda #$78
005683r 2  80 70                        bra asm_common
005685r 2               z_asm_sei:
005685r 2               
005685r 2               xt_asm_sta:     ; sta \ STA nnnn
005685r 2  A9 8D                        lda #$8D
005687r 2  80 6C                        bra asm_common
005689r 2               z_asm_sta:
005689r 2               
005689r 2               xt_asm_sta_x:   ; sta.x \ STA nnnn,X
005689r 2  A9 9D                        lda #$9D
00568Br 2  80 68                        bra asm_common
00568Dr 2               z_asm_sta_x:
00568Dr 2               
00568Dr 2               xt_asm_sta_y:   ; sta.y \ STA nnnn,Y
00568Dr 2  A9 99                        lda #$99
00568Fr 2  80 64                        bra asm_common
005691r 2               z_asm_sta_y:
005691r 2               
005691r 2               xt_asm_sta_z:   ; sta.z \ STA nn
005691r 2  A9 85                        lda #$85
005693r 2  80 60                        bra asm_common
005695r 2               z_asm_sta_z:
005695r 2               
005695r 2               xt_asm_sta_zi:  ; sta.zi \ STA (nn)
005695r 2  A9 92                        lda #$92
005697r 2  80 5C                        bra asm_common
005699r 2               z_asm_sta_zi:
005699r 2               
005699r 2               xt_asm_sta_ziy: ; sta.ziy \ STA (nn),Y
005699r 2  A9 91                        lda #$91
00569Br 2  80 58                        bra asm_common
00569Dr 2               z_asm_sta_ziy:
00569Dr 2               
00569Dr 2               xt_asm_sta_zx:  ; sta.zx \ STA nn,X
00569Dr 2  A9 95                        lda #$95
00569Fr 2  80 54                        bra asm_common
0056A1r 2               z_asm_sta_zx:
0056A1r 2               
0056A1r 2               xt_asm_sta_zxi: ; sta.zxi \ STA (nn,X)
0056A1r 2  A9 81                        lda #$81
0056A3r 2  80 50                        bra asm_common
0056A5r 2               z_asm_sta_zxi:
0056A5r 2               
0056A5r 2               xt_asm_stx:     ; stx \ STX nnnn
0056A5r 2  A9 8E                        lda #$8E
0056A7r 2  80 4C                        bra asm_common
0056A9r 2               z_asm_stx:
0056A9r 2               
0056A9r 2               xt_asm_stx_z:   ; stx.z \ STX nn
0056A9r 2  A9 86                        lda #$86
0056ABr 2  80 48                        bra asm_common
0056ADr 2               z_asm_stx_z:
0056ADr 2               
0056ADr 2               xt_asm_stx_zy:  ; stx.zy \ STX nn,Y
0056ADr 2  A9 96                        lda #$96
0056AFr 2  80 44                        bra asm_common
0056B1r 2               z_asm_stx_zy:
0056B1r 2               
0056B1r 2               xt_asm_sty:     ; sty \ STY nnnn
0056B1r 2  A9 8C                        lda #$8C
0056B3r 2  80 40                        bra asm_common
0056B5r 2               z_asm_sty:
0056B5r 2               
0056B5r 2               xt_asm_sty_z:   ; sty.z \ STY nn
0056B5r 2  A9 84                        lda #$84
0056B7r 2  80 3C                        bra asm_common
0056B9r 2               z_asm_sty_z:
0056B9r 2               
0056B9r 2               xt_asm_sty_zx:  ; sty.zx \ STY nn,X
0056B9r 2  A9 94                        lda #$94
0056BBr 2  80 38                        bra asm_common
0056BDr 2               z_asm_sty_zx:
0056BDr 2               
0056BDr 2               xt_asm_stz:     ; stz \ STZ nnnn
0056BDr 2  A9 9C                        lda #$9C
0056BFr 2  80 34                        bra asm_common
0056C1r 2               z_asm_stz:
0056C1r 2               
0056C1r 2               xt_asm_stz_x:   ; stz.x \ STZ nnnn,X
0056C1r 2  A9 9E                        lda #$9E
0056C3r 2  80 30                        bra asm_common
0056C5r 2               z_asm_stz_x:
0056C5r 2               
0056C5r 2               xt_asm_stz_z:   ; stz.z \ STZ nn
0056C5r 2  A9 64                        lda #$64
0056C7r 2  80 2C                        bra asm_common
0056C9r 2               z_asm_stz_z:
0056C9r 2               
0056C9r 2               xt_asm_stz_zx:  ; stz.zx \ STZ nn,X
0056C9r 2  A9 74                        lda #$74
0056CBr 2  80 28                        bra asm_common
0056CDr 2               z_asm_stz_zx:
0056CDr 2               
0056CDr 2               xt_asm_tax:     ; tax \ TAX
0056CDr 2  A9 AA                        lda #$AA
0056CFr 2  80 24                        bra asm_common
0056D1r 2               z_asm_tax:
0056D1r 2               
0056D1r 2               xt_asm_tay:     ; tay \ TAY
0056D1r 2  A9 A8                        lda #$A8
0056D3r 2  80 20                        bra asm_common
0056D5r 2               z_asm_tay:
0056D5r 2               
0056D5r 2               xt_asm_trb:     ; trb \ TRB nnnn
0056D5r 2  A9 1C                        lda #$1C
0056D7r 2  80 1C                        bra asm_common
0056D9r 2               z_asm_trb:
0056D9r 2               
0056D9r 2               xt_asm_trb_z:   ; trb.z \ TRB nn
0056D9r 2  A9 14                        lda #$14
0056DBr 2  80 18                        bra asm_common
0056DDr 2               z_asm_trb_z:
0056DDr 2               
0056DDr 2               xt_asm_tsb:     ; tsb \ TSB nnnn
0056DDr 2  A9 0C                        lda #$0C
0056DFr 2  80 14                        bra asm_common
0056E1r 2               z_asm_tsb:
0056E1r 2               
0056E1r 2               xt_asm_tsb_z:   ; tsb.z \ TSB nn
0056E1r 2  A9 04                        lda #$04
0056E3r 2  80 10                        bra asm_common
0056E5r 2               z_asm_tsb_z:
0056E5r 2               
0056E5r 2               xt_asm_tsx:     ; tsx \ TSX
0056E5r 2  A9 BA                        lda #$BA
0056E7r 2  80 0C                        bra asm_common
0056E9r 2               z_asm_tsx:
0056E9r 2               
0056E9r 2               xt_asm_txa:     ; txa \ TXA
0056E9r 2  A9 8A                        lda #$8A
0056EBr 2  80 08                        bra asm_common
0056EDr 2               z_asm_txa:
0056EDr 2               
0056EDr 2               xt_asm_txs:     ; txs \ TXS
0056EDr 2  A9 9A                        lda #$9A
0056EFr 2  80 04                        bra asm_common
0056F1r 2               z_asm_txs:
0056F1r 2               
0056F1r 2               xt_asm_tya:     ; tya \ TYA
0056F1r 2  A9 98                        lda #$98
0056F3r 2  80 00                        bra asm_common
0056F5r 2               z_asm_tya:
0056F5r 2               
0056F5r 2               
0056F5r 2               ; ==========================================================
0056F5r 2               ; ASSEMBLER HELPER FUNCTIONS
0056F5r 2               
0056F5r 2               asm_common:
0056F5r 2               
0056F5r 2                       ; """Common routine for all opcodes. We arrive here with the opcode in
0056F5r 2                       ; A. We do not need to check for the correct values because we are
0056F5r 2                       ; coming from the assembler Dictionary and trust our external test
0056F5r 2                       ; suite.
0056F5r 2                       ; """
0056F5r 2                               ; Compile opcode. Note cmpl_a does not use Y
0056F5r 2  A8                           tay
0056F6r 2  20 rr rr                     jsr cmpl_a
0056F9r 2               
0056F9r 2                               ; We get the length of the opcode from the table included in
0056F9r 2                               ; the disassembler. We use the opcode value as the offset in
0056F9r 2                               ; the oc_index_table. We have 256 entries, each two bytes
0056F9r 2                               ; long, so we can't just use an index with Y. We use tmp2 for
0056F9r 2                               ; this.
0056F9r 2  A9 rr                        lda #<oc_index_table
0056FBr 2  85 rr                        sta tmp2
0056FDr 2  A9 rr                        lda #>oc_index_table
0056FFr 2  85 rr                        sta tmp2+1
005701r 2               
005701r 2  98                           tya             ; retrieve opcode
005702r 2  0A                           asl             ; times two for offset
005703r 2  90 02                        bcc @m
005705r 2  E6 rr                        inc tmp2+1
005707r 2               @m:
005707r 2  A8                           tay             ; use Y as the index
005708r 2               
005708r 2                               ; Get address of the entry in the opcode table. We put it in
005708r 2                               ; tmp3 and push a copy of it to the stack to be able to print
005708r 2                               ; the opcode later
005708r 2  B1 rr                        lda (tmp2),y    ; LSB
00570Ar 2  85 rr                        sta tmp3
00570Cr 2  C8                           iny
00570Dr 2  B1 rr                        lda (tmp2),y    ; MSB
00570Fr 2  85 rr                        sta tmp3+1
005711r 2               
005711r 2  B2 rr                        lda (tmp3)      ; get "lengths byte"
005713r 2               
005713r 2                               ; The length of the instruction is stored in bits 7 and 6.
005713r 2                               ; Rotate them through the carry flag and mask the rest
005713r 2  2A                           rol
005714r 2  2A                           rol
005715r 2  2A                           rol             ; Three times because we go through Carry
005716r 2  29 03                        and #%00000011
005718r 2  A8                           tay
005719r 2               
005719r 2                               ; One byte means no operand, we're done. Use DEY as CPY #1
005719r 2  88                           dey
00571Ar 2  F0 12                        beq @done
00571Cr 2               
00571Cr 2                               ; We have an operand which must be TOS
00571Cr 2  20 rr rr                     jsr underflow_1
00571Fr 2               
00571Fr 2                               ; We compile the LSB of TOS as the operand we definitely have
00571Fr 2                               ; before we even test if this is a two- or three-byte
00571Fr 2                               ; instruction. Little endian CPU means we store this byte first
00571Fr 2  B5 00                        lda 0,x
005721r 2  20 rr rr                     jsr cmpl_a      ; does not use Y
005724r 2               
005724r 2                               ; If this is a two-byte instruction, we're done. If we landed
005724r 2                               ; here, we've already decremented Y by one, so this is
005724r 2                               ; the equivalent to CPY #2
005724r 2  88                           dey
005725r 2  F0 05                        beq @done_drop
005727r 2               
005727r 2                               ; This must be a three-byte instruction, get the MSB.
005727r 2  B5 01                        lda 1,x
005729r 2  20 rr rr                     jsr cmpl_a      ; Fall through to _done_drop
00572Cr 2               
00572Cr 2               @done_drop:
00572Cr 2  E8                           inx
00572Dr 2  E8                           inx             ; Fall through to _done
00572Er 2               @done:
00572Er 2  60                           rts             ; Returns to original caller
00572Fr 2               
00572Fr 2               
00572Fr 2               ; ==========================================================
00572Fr 2               ; PSEUDO-INSTRUCTIONS AND MACROS
00572Fr 2               
00572Fr 2               xt_asm_push_a:
00572Fr 2                       ; """push-a puts the content of the 65c02 Accumulator on the Forth
00572Fr 2                       ; data stack as the TOS. This is a convience routine that encodes the
00572Fr 2                       ; instructions  DEX  DEX  STA 0,X  STZ 1,X
00572Fr 2                       ; """
00572Fr 2  A0 00                        ldy #0
005731r 2               _loop:
005731r 2  B9 rr rr                     lda asm_push_a_data,y
005734r 2  C9 FF                        cmp #$FF
005736r 2  F0 06                        beq @done
005738r 2               
005738r 2  20 rr rr                     jsr cmpl_a      ; does not change Y
00573Br 2  C8                           iny
00573Cr 2  80 F3                        bra _loop
00573Er 2               @done:
00573Er 2               z_asm_push_a:
00573Er 2  60                           rts
00573Fr 2               asm_push_a_data:
00573Fr 2                       ; We can't use 00 as a terminator because STA 0,X assembles to 95 00
00573Fr 2  CA CA 95 00          .byte $CA, $CA, $95, 00, $74, $01
005743r 2  74 01        
005745r 2  FF                   .byte $FF               ; terminator
005746r 2               
005746r 2               
005746r 2               
005746r 2               ; ==========================================================
005746r 2               ; DIRECTIVES
005746r 2               
005746r 2               ; The "<J" directive (back jump) is a dummy instruction (syntactic sugar) to
005746r 2               ; make clear that the JMP or JSR instructions are using the address that had
005746r 2               ; been placed on the stack by "-->" (the "arrow" directive).
005746r 2               xt_asm_back_jump:
005746r 2               z_asm_back_jump:
005746r 2  60                           rts
005747r 2               
005747r 2               ; The "<B" directive (back branch) takes an address that was placed on the Data
005747r 2               ; Stack by the anonymous label directive "-->" (the "arrow") and the current
005747r 2               ; address (via HERE) to calculate a backward branch offset. This is then stored
005747r 2               ; by a following branch instruction.
005747r 2               xt_asm_back_branch:
005747r 2                               ; We arrive here with ( addr-l ) of the label on the stack and
005747r 2                               ; then subtract the current address
005747r 2  20 rr rr                     jsr xt_here             ; ( addr-l addr-h )
00574Ar 2  20 rr rr                     jsr xt_minus            ; ( offset )
00574Dr 2               
00574Dr 2                               ; We subtract two more because of the branch instruction itself
00574Dr 2  3A                           dea
00574Er 2  3A                           dea
00574Fr 2               
00574Fr 2               z_asm_back_branch:
00574Fr 2  60                           rts
005750r 2               .endif
005750r 2               assembler_end:
005750r 2               
005750r 2               ; END
005750r 2               
005750r 1               .include "../../disassembler.s"
005750r 2               ; Disassembler for Tali Forth 2
005750r 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
005750r 2               ; Updated by Sam Colwell
005750r 2               ; First version: 28. Apr 2018
005750r 2               ; This version: 31. Dec 2022
005750r 2               
005750r 2               ; This is the default disassembler for Tali Forth 2. Use by passing
005750r 2               ; the address and length of the block of memory to be disassembled:
005750r 2               ;
005750r 2               ;       disasm ( addr x -- )
005750r 2               
005750r 2               ; The underflow checking is handled by the word's stub in native_words.asm, see
005750r 2               ; there for more information.
005750r 2               
005750r 2               ; The code is disassembled in Simpler Assembler Notation (SAN), because that
005750r 2               ; is, uh, simpler. See the documentation and https://github.com/scotws/SAN for
005750r 2               ; more information. Because disassemblers are used interactively with slow
005750r 2               ; humans, we don't care that much about speed and put the emphasis at being
005750r 2               ; small.
005750r 2               
005750r 2               ; Uses: tmp3, tmp2, tmp1 (xt_u_dot_r uses xt_type which uses tmp1)
005750r 2               ;       scratch (used for handling literals and JSRs)
005750r 2               
005750r 2               disassembler:
005750r 2  20 rr rr                     jsr xt_cr       ; ( addr u )
005753r 2               _byte_loop:
005753r 2                               ; Print address at start of the line. Note we use whatever
005753r 2                               ; number base the user has
005753r 2  20 rr rr                     jsr xt_over     ; ( addr u addr )
005756r 2  20 rr rr                     jsr xt_u_dot    ; ( addr u )
005759r 2  20 rr rr                     jsr xt_space
00575Cr 2               
00575Cr 2                               ; We use the opcode value as the offset in the oc_index_table.
00575Cr 2                               ; We have 256 entries, each two bytes long, so we can't just
00575Cr 2                               ; use an index with Y. We use tmp2 for this.
00575Cr 2  A9 rr                        lda #<oc_index_table
00575Er 2  85 rr                        sta tmp2
005760r 2  A9 rr                        lda #>oc_index_table
005762r 2  85 rr                        sta tmp2+1
005764r 2               
005764r 2  A1 02                        lda (2,x)       ; get opcode that addr points to
005766r 2  85 rr                        sta scratch     ; Save opcode
005768r 2               
005768r 2  0A                           asl             ; multiply by two for offset
005769r 2  90 02                        bcc @ok
00576Br 2  E6 rr                        inc tmp2+1      ; we're on second page
00576Dr 2               @ok:
00576Dr 2  A8                           tay             ; use Y as the index
00576Er 2               
00576Er 2                               ; Get address of the entry in the opcode table. We put it
00576Er 2                               ; in tmp3 and push a copy of it to the stack to be able to
00576Er 2                               ; print the opcode later
00576Er 2  B1 rr                        lda (tmp2),y    ; LSB
005770r 2  85 rr                        sta tmp3
005772r 2  48                           pha
005773r 2               
005773r 2  C8                           iny
005774r 2               
005774r 2  B1 rr                        lda (tmp2),y    ; MSB
005776r 2  85 rr                        sta tmp3+1
005778r 2  48                           pha
005779r 2               
005779r 2                               ; The first byte is the "lengths byte" which is coded so
005779r 2                               ; that bits 7 to 6 are the length of the instruction (1 to
005779r 2                               ; 3 bytes) and 2 to 0 are the length of the mnemonic.
005779r 2  B2 rr                        lda (tmp3)
00577Br 2  A8                           tay                     ; save copy of lengths byte
00577Cr 2               
00577Cr 2                               ; Since this is Simpler Assembler Notation (SAN) in a Forth
00577Cr 2                               ; system, we want to print any operand before we print the
00577Cr 2                               ; mnemonic ('1000 sta' instead of 'sta 1000'). This allows us
00577Cr 2                               ; to copy and paste directly from the disassembler to the
00577Cr 2                               ; assembler.
00577Cr 2               
00577Cr 2                               ; What happens next depends on the length of the instruction in
00577Cr 2                               ; bytes:
00577Cr 2               
00577Cr 2                               ;   1 byte:  OPC          -->          OPC  bit sequence: %01
00577Cr 2                               ;   2 bytes: OPC LSB      -->    0 LSB OPC  bit sequence: %10
00577Cr 2                               ;   3 bytes: OPC LSB MSB  -->  MSB LSB OPC  bit sequence: %11
00577Cr 2               
00577Cr 2                               ; We can distinguish between the first case, where there is
00577Cr 2                               ; only the mnemonic, and the second and third cases, where we
00577Cr 2                               ; have an operand. We do this by use of the bit sequence in
00577Cr 2                               ; bits 7 and 6.
00577Cr 2  10 3C                        bpl _no_operand         ; bit 7 clear, single-byte instruction
00577Er 2               
00577Er 2                               ; We have an operand. Prepare the Data Stack
00577Er 2  20 rr rr                     jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
005781r 2               
005781r 2                               ; Because of the glory of a little endian CPU, we can start
005781r 2                               ; with the next byte regardless if this is a one or two byte
005781r 2                               ; operand, because we'll need the LSB one way or the other.
005781r 2                               ; We have a copy of the opcode on the stack, so we can now move
005781r 2                               ; to the next byte
005781r 2  F6 04                        inc 4,x
005783r 2  D0 02                        bne @l1
005785r 2  F6 05                        inc 5,x                 ; ( addr+1 u 0 )
005787r 2               @l1:
005787r 2  B5 02                        lda 2,x
005789r 2  D0 02                        bne @l2
00578Br 2  D6 03                        dec 3,x
00578Dr 2               @l2:
00578Dr 2  D6 02                        dec 2,x                 ; ( addr+1 u-1 0 )
00578Fr 2               
00578Fr 2  A1 04                        lda (4,x)
005791r 2  95 00                        sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
005793r 2  85 rr                        sta scratch+1           ; Save a copy in the scratch buffer
005795r 2               
005795r 2                               ; We still have a copy of the lengths byte in Y, which we use
005795r 2                               ; to see if we have a one-byte operand (and are done already)
005795r 2                               ; or a two-byte operand
005795r 2  98                           tya                     ; retrieve copy of lengths byte
005796r 2  2A                           rol                     ; shift bit 6 to bit 7
005797r 2  10 14                        bpl _print_operand
005799r 2               
005799r 2                               ; We have a three-byte instruction, so we need to get the MSB
005799r 2                               ; of the operand. Move to the next byte
005799r 2  F6 04                        inc 4,x
00579Br 2  D0 02                        bne @l3
00579Dr 2  F6 05                        inc 5,x                 ; ( addr+2 u-1 LSB )
00579Fr 2               @l3:
00579Fr 2  B5 02                        lda 2,x
0057A1r 2  D0 02                        bne @l4
0057A3r 2  D6 03                        dec 3,x
0057A5r 2               @l4:
0057A5r 2  D6 02                        dec 2,x                 ; ( addr+2 u-2 LSB )
0057A7r 2               
0057A7r 2  A1 04                        lda (4,x)
0057A9r 2  95 01                        sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
0057ABr 2  85 rr                        sta scratch+2           ; Save a copy in the scratch buffer
0057ADr 2               
0057ADr 2                               ; fall through to _print_operand
0057ADr 2               
0057ADr 2               _print_operand:
0057ADr 2               
0057ADr 2                               ; We arrive here with the lengths byte in Y, the address of the
0057ADr 2                               ; opcode table entry for the instruction on the stack ( addr+n
0057ADr 2                               ; u-n opr). We want the output to be nicely formatted in
0057ADr 2                               ; columns, so we use U.R. The maximal width of the number in
0057ADr 2                               ; decimal on an 16-bit addressed machine is five characters
0057ADr 2  CA                           dex
0057AEr 2  CA                           dex
0057AFr 2  A9 05                        lda #5
0057B1r 2  95 00                        sta 0,x
0057B3r 2  74 01                        stz 1,x                 ; ( addr+n u-n opr 5 )
0057B5r 2               
0057B5r 2  20 rr rr                     jsr xt_u_dot_r          ; U.R ( addr+n u-n )
0057B8r 2               
0057B8r 2  80 0B                        bra _print_mnemonic
0057BAr 2               
0057BAr 2               _no_operand:
0057BAr 2                               ; We arrive here with the opcode table address on the stack,
0057BAr 2                               ; the lengths byte in Y and ( addr u ). Since we want to have
0057BAr 2                               ; a nicely formatted output, we need to indent the mnemonic by
0057BAr 2                               ; five spaces.
0057BAr 2  CA                           dex
0057BBr 2  CA                           dex
0057BCr 2  A9 05                        lda #5
0057BEr 2  95 00                        sta 0,x
0057C0r 2  74 01                        stz 1,x                 ; ( addr u 5 )
0057C2r 2               
0057C2r 2  20 rr rr                     jsr xt_spaces           ; ( addr u )
0057C5r 2               
0057C5r 2                               ; fall through to _print_mnemonic
0057C5r 2               
0057C5r 2               _print_mnemonic:
0057C5r 2                               ; We arrive here with the opcode table address on the stack and
0057C5r 2                               ; ( addr u | addr+n u-n ). Time to print the mnemonic.
0057C5r 2  20 rr rr                     jsr xt_space
0057C8r 2               
0057C8r 2  CA                           dex
0057C9r 2  CA                           dex                     ; ( addr u ? )
0057CAr 2  68                           pla                     ; MSB
0057CBr 2  95 01                        sta 1,x                 ; ( addr u MSB )
0057CDr 2  68                           pla                     ; LSB
0057CEr 2  95 00                        sta 0,x                 ; ( addr u addr-o )
0057D0r 2               
0057D0r 2  20 rr rr                     jsr xt_count            ; ( addr u addr-o u-o )
0057D3r 2               
0057D3r 2                               ; The length of the mnemnonic string is in bits 2 to 0
0057D3r 2  74 01                        stz 1,x                 ; paranoid
0057D5r 2  B5 00                        lda 0,x
0057D7r 2  29 07                        and #%00000111          ; ( addr u addr-o u-o )
0057D9r 2  95 00                        sta 0,x
0057DBr 2               
0057DBr 2  20 rr rr                     jsr xt_type             ; ( addr u )
0057DEr 2               
0057DEr 2                               ; Handle JSR by printing name of function, if available.
0057DEr 2                               ; scratch has opcode ($20 for JSR)
0057DEr 2                               ; scratch+1 and scratch+2 have address if it's a JSR.
0057DEr 2  A5 rr                        lda scratch
0057E0r 2  C9 20                        cmp #$20
0057E2r 2  D0 59                        bne _not_jsr
0057E4r 2               
0057E4r 2                               ; It's a JSR.  Print 5 spaces as an offset.
0057E4r 2  CA                           dex
0057E5r 2  CA                           dex
0057E6r 2  A9 05                        lda #5
0057E8r 2  95 00                        sta 0,x
0057EAr 2  74 01                        stz 1,x
0057ECr 2  20 rr rr                     jsr xt_spaces
0057EFr 2               
0057EFr 2               ; Special handlers
0057EFr 2                               ; Handle literals specially.
0057EFr 2  A9 rr                        lda #<literal_runtime
0057F1r 2  C5 rr                        cmp scratch+1
0057F3r 2  D0 0C                        bne _not_literal
0057F5r 2  A9 rr                        lda #>literal_runtime
0057F7r 2  C5 rr                        cmp scratch+2
0057F9r 2  D0 06                        bne _not_literal
0057FBr 2                               ; It's a literal.
0057FBr 2  20 rr rr                     jsr disasm_literal
0057FEr 2  4C rr rr                     jmp _printing_done
005801r 2               
005801r 2               _not_literal:
005801r 2                               ; Handle string literals specially.
005801r 2  A9 rr                        lda #<sliteral_runtime
005803r 2  C5 rr                        cmp scratch+1
005805r 2  D0 0C                        bne _not_sliteral
005807r 2  A9 rr                        lda #>sliteral_runtime
005809r 2  C5 rr                        cmp scratch+2
00580Br 2  D0 06                        bne _not_sliteral
00580Dr 2                               ; It's a literal.
00580Dr 2  20 rr rr                     jsr disasm_sliteral
005810r 2  4C rr rr                     jmp _printing_done
005813r 2               _not_sliteral:
005813r 2                               ; Handle 0branch
005813r 2  A9 rr                        lda #<zero_branch_runtime
005815r 2  C5 rr                        cmp scratch+1
005817r 2  D0 0C                        bne _not_0branch
005819r 2  A9 rr                        lda #>zero_branch_runtime
00581Br 2  C5 rr                        cmp scratch+2
00581Dr 2  D0 06                        bne _not_0branch
00581Fr 2                               ; It's a 0branch.
00581Fr 2  20 rr rr                     jsr disasm_0branch
005822r 2  4C rr rr                     jmp _printing_done
005825r 2               _not_0branch:
005825r 2                               ; Handle branch
005825r 2  A9 rr                        lda #<branch_runtime
005827r 2  C5 rr                        cmp scratch+1
005829r 2  D0 0C                        bne _not_branch
00582Br 2  A9 rr                        lda #>branch_runtime
00582Dr 2  C5 rr                        cmp scratch+2
00582Fr 2  D0 06                        bne _not_branch
005831r 2                               ; It's a branch.
005831r 2  20 rr rr                     jsr disasm_branch
005834r 2  4C rr rr                     jmp _printing_done
005837r 2               _not_branch:
005837r 2                               ; Try the generic JSR handler, which will use the target of the
005837r 2                               ; JSR as an XT and print the name if it exists.
005837r 2  20 rr rr                     jsr disasm_jsr
00583Ar 2  4C rr rr                     jmp _printing_done
00583Dr 2               
00583Dr 2               _not_jsr:
00583Dr 2                               ; See if the instruction is a jump (instruction still in A)
00583Dr 2                               ; (Strings start with a jump over the data.)
00583Dr 2  C9 4C                        cmp #$4C
00583Fr 2  D0 29                        bne _printing_done
005841r 2               
005841r 2                               ; We have a branch.  See if it's a string by looking for
005841r 2                               ; a JSR sliteral_runtime at the jump target address.
005841r 2                               ; The target address is in scratch+1 and scratch+2
005841r 2                               ; Use scratch+3 and scratch+4 here as we need to move
005841r 2                               ; the pointer.
005841r 2  A5 rr                        lda scratch+1   ; Copy the pointer.
005843r 2  85 rr                        sta scratch+3
005845r 2  A5 rr                        lda scratch+2
005847r 2  85 rr                        sta scratch+4
005849r 2               
005849r 2                               ; Get the first byte at the jmp target address.
005849r 2  B2 rr                        lda (scratch+3)
00584Br 2               
00584Br 2  C9 20                        cmp #$20 ; check for JSR
00584Dr 2  D0 1B                        bne _printing_done
00584Fr 2                               ; Next byte
00584Fr 2  E6 rr                        inc scratch+3
005851r 2  D0 02                        bne @l1
005853r 2  E6 rr                        inc scratch+4
005855r 2               @l1:
005855r 2                               ; Check for string literal runtime
005855r 2  B2 rr                        lda (scratch+3)
005857r 2               
005857r 2  C9 rr                        cmp #<sliteral_runtime
005859r 2  D0 0F                        bne _printing_done
00585Br 2                               ; Next byte
00585Br 2  E6 rr                        inc scratch+3
00585Dr 2  D0 02                        bne @l2
00585Fr 2  E6 rr                        inc scratch+4
005861r 2               @l2:
005861r 2  B2 rr                        lda (scratch+3)
005863r 2               
005863r 2  C9 rr                        cmp #>sliteral_runtime
005865r 2  D0 03                        bne _printing_done
005867r 2               
005867r 2                               ; It's a string literal jump.
005867r 2  20 rr rr                     jsr disasm_sliteral_jump
00586Ar 2               _printing_done:
00586Ar 2  20 rr rr                     jsr xt_cr
00586Dr 2               
00586Dr 2                               ; Housekeeping: Next byte
00586Dr 2  F6 02                        inc 2,x
00586Fr 2  D0 02                        bne @l3
005871r 2  F6 03                        inc 3,x                 ; ( addr+1 u )
005873r 2               @l3:
005873r 2  20 rr rr                     jsr xt_one_minus        ; ( addr+1 u-1 )
005876r 2               
005876r 2  B5 00                        lda 0,x                 ; All done?
005878r 2  15 01                        ora 1,x
00587Ar 2  F0 07                        beq @done
00587Cr 2               
00587Cr 2  B5 01                        lda 1,x                 ; Catch mid-instruction ranges
00587Er 2  30 03                        bmi @done
005880r 2               
005880r 2  4C rr rr                     jmp _byte_loop          ; out of range for BRA
005883r 2               @done:
005883r 2                               ; Clean up and leave
005883r 2  4C rr rr                     jmp xt_two_drop         ; JSR/RTS
005886r 2               
005886r 2               ; Handlers for various special disassembled instructions:
005886r 2               ; String literal handler (both for inline strings and sliteral)
005886r 2               disasm_sliteral_jump:
005886r 2                               ; If we get here, we are at the jump for a constant string.
005886r 2                               ; Strings are compiled into the dictionary like so:
005886r 2                               ;           jmp a
005886r 2                               ;           <string data bytes>
005886r 2                               ;  a -->    jsr sliteral_runtime
005886r 2                               ;           <string address>
005886r 2                               ;           <string length>
005886r 2                               ;
005886r 2                               ; We have ( addr n ) on the stack where addr is the last
005886r 2                               ; byte of the address a in the above jmp instruction.
005886r 2                               ; Address a is in scratch+1 scratch+2.
005886r 2               
005886r 2                               ; Determine the distance of the jump so we end on the byte
005886r 2                               ; just before the JSR (sets us up for SLITERAL on next loop)
005886r 2  20 rr rr                     jsr xt_swap
005889r 2  CA                           dex
00588Ar 2  CA                           dex
00588Br 2  A5 rr                        lda scratch+1
00588Dr 2  95 00                        sta 0,x
00588Fr 2  A5 rr                        lda scratch+2
005891r 2  95 01                        sta 1,x
005893r 2  20 rr rr                     jsr xt_swap
005896r 2  20 rr rr                     jsr xt_minus
005899r 2  20 rr rr                     jsr xt_one_minus
00589Cr 2                               ; (n jump_distance)
00589Cr 2                               ; Subtract the jump distance from the bytes left.
00589Cr 2  20 rr rr                     jsr xt_minus
00589Fr 2                               ; ( new_n )
00589Fr 2                               ; Move to one byte before the target address
00589Fr 2  CA                           dex
0058A0r 2  CA                           dex
0058A1r 2  A5 rr                        lda scratch+1
0058A3r 2  95 00                        sta 0,x
0058A5r 2  A5 rr                        lda scratch+2
0058A7r 2  95 01                        sta 1,x
0058A9r 2  20 rr rr                     jsr xt_one_minus
0058ACr 2  20 rr rr                     jsr xt_swap ; ( new_addr new_n )
0058AFr 2  60                           rts
0058B0r 2               
0058B0r 2               ; String literal handler
0058B0r 2               disasm_sliteral:
0058B0r 2  A9 53                        lda #'S'
0058B2r 2  20 rr rr                     jsr emit_a ; Print S before LITERAL so it becomes SLITERAL
0058B5r 2  A9 0D                        lda #str_disasm_lit     ; "LITERAL "
0058B7r 2  20 rr rr                     jsr print_string_no_lf
0058BAr 2               
0058BAr 2                               ; ( addr u ) address of last byte of JSR address and bytes left on the stack.
0058BAr 2                               ; We need to print the two values just after addr and move along two bytes
0058BAr 2                               ; for each value.
0058BAr 2  20 rr rr                     jsr xt_swap             ; switch to (u addr)
0058BDr 2  20 rr rr                     jsr xt_one_plus
0058C0r 2               
0058C0r 2  20 rr rr                     jsr xt_dup
0058C3r 2  20 rr rr                     jsr xt_fetch
0058C6r 2  20 rr rr                     jsr xt_u_dot            ; Print the address of the string
0058C9r 2                               ; Move along two bytes (already moved address one) to skip over the constant.
0058C9r 2  20 rr rr                     jsr xt_two
0058CCr 2  20 rr rr                     jsr xt_plus
0058CFr 2               
0058CFr 2  20 rr rr                     jsr xt_dup
0058D2r 2  20 rr rr                     jsr xt_question         ; Print the length of the string
0058D5r 2                               ; Move along to the very last byte of the data.
0058D5r 2  20 rr rr                     jsr xt_one_plus
0058D8r 2               
0058D8r 2                               ; ( u addr+4 )
0058D8r 2                               ; Fix up the number of bytes left.
0058D8r 2  20 rr rr                     jsr xt_swap            ; ( addr+4 u )
0058DBr 2  CA                           dex
0058DCr 2  CA                           dex
0058DDr 2  A9 04                        lda #4
0058DFr 2  95 00                        sta 0,x
0058E1r 2  74 01                        stz 1,x
0058E3r 2  20 rr rr                     jsr xt_minus            ; ( addr+4 u-4 )
0058E6r 2  60                           rts
0058E7r 2               
0058E7r 2               
0058E7r 2               ; 0BRANCH handler
0058E7r 2               disasm_0branch:
0058E7r 2  A9 30                        lda #'0'
0058E9r 2  20 rr rr                     jsr emit_a ; Print 0 before BRANCH so it becomes 0BRANCH
0058ECr 2                               ; All other processing is identical, so fall into BRANCH handler
0058ECr 2               ; BRANCH handler
0058ECr 2               disasm_branch:
0058ECr 2  A9 0F                        lda #str_disasm_bra
0058EEr 2  20 rr rr                     jsr print_string_no_lf ; "BRANCH "
0058F1r 2                               ; The address after the 0BRANCH is handled the same as a literal.
0058F1r 2  80 05                        bra disasm_print_literal
0058F3r 2               
0058F3r 2               ; Literal handler
0058F3r 2               disasm_literal:
0058F3r 2  A9 0D                        lda #str_disasm_lit
0058F5r 2  20 rr rr                     jsr print_string_no_lf ; "LITERAL "
0058F8r 2               disasm_print_literal:
0058F8r 2                               ; ( addr u ) address of last byte of JSR and bytes left on the stack.
0058F8r 2                               ; We need to print the value just after the address and move along two bytes.
0058F8r 2  20 rr rr                     jsr xt_swap ; switch to (u addr)
0058FBr 2  20 rr rr                     jsr xt_one_plus
0058FEr 2               
0058FEr 2  20 rr rr                     jsr xt_dup
005901r 2  20 rr rr                     jsr xt_question ; Print the value at the adress
005904r 2                               ; Move along two bytes (already moved address one) to skip over the constant.
005904r 2  20 rr rr                     jsr xt_one_plus
005907r 2  20 rr rr                     jsr xt_swap ; (addr+2 u)
00590Ar 2  20 rr rr                     jsr xt_one_minus
00590Dr 2  20 rr rr                     jsr xt_one_minus ; (addr+2 u-2)
005910r 2  60                           rts
005911r 2               
005911r 2               ; JSR handler
005911r 2               disasm_jsr:
005911r 2                               ; The address of the JSR is in scratch+1 and scratch+2.
005911r 2                               ; The current stack is already ( addr u ) where addr is the address of the last byte of
005911r 2                               ; the JSR target address, and we want to leave it like that so moving on to the next byte
005911r 2                               ; works properly.
005911r 2                               ; Put the target address on the stack and see if it's an XT.
005911r 2  CA                           dex
005912r 2  CA                           dex
005913r 2  A5 rr                        lda scratch+1
005915r 2  95 00                        sta 0,x
005917r 2  A5 rr                        lda scratch+2
005919r 2  95 01                        sta 1,x
00591Br 2                               ; ( xt )
00591Br 2  20 rr rr                     jsr xt_int_to_name
00591Er 2                               ; int>name returns zero if we just don't know.
00591Er 2  B5 00                        lda 0,x
005920r 2  15 01                        ora 1,x
005922r 2  F0 07                        beq _disasm_no_nt
005924r 2                               ; We now have a name token ( nt ) on the stack.
005924r 2                               ; Change it into the name and print it.
005924r 2  20 rr rr                     jsr xt_name_to_string
005927r 2  20 rr rr                     jsr xt_type
00592Ar 2  60                           rts
00592Br 2               
00592Br 2               _disasm_no_nt:
00592Br 2  20 rr rr                     jsr xt_drop ; the 0 indicating no name token
00592Er 2                               ; See if the address is between underflow_1 and underflow_4,
00592Er 2                               ; inclusive.
00592Er 2  CA                           dex
00592Fr 2  CA                           dex
005930r 2  A5 rr                        lda scratch+1
005932r 2  95 00                        sta 0,x
005934r 2  A5 rr                        lda scratch+2
005936r 2  95 01                        sta 1,x
005938r 2                               ; ( jsr_address )
005938r 2                               ; Compare to lower underflow address
005938r 2  CA                           dex
005939r 2  CA                           dex
00593Ar 2  A9 rr                        lda #<underflow_1
00593Cr 2  95 00                        sta 0,x
00593Er 2  A9 rr                        lda #>underflow_1
005940r 2  95 01                        sta 1,x
005942r 2  20 rr rr                     jsr compare_16bit
005945r 2  F0 02                        beq _disasm_jsr_uflow_check_upper
005947r 2  B0 14                        bcs _disasm_jsr_unknown
005949r 2               _disasm_jsr_uflow_check_upper:
005949r 2                               ; Compare to upper underflow addresses
005949r 2  A9 rr                        lda #<underflow_4
00594Br 2  95 00                        sta 0,x
00594Dr 2  A9 rr                        lda #>underflow_4
00594Fr 2  95 01                        sta 1,x
005951r 2  20 rr rr                     jsr compare_16bit
005954r 2  F0 02                        beq _disasm_jsr_soc
005956r 2  90 05                        bcc _disasm_jsr_unknown
005958r 2               _disasm_jsr_soc:
005958r 2                               ; It's an underflow check.
005958r 2  A9 0E                        lda #str_disasm_sdc
00595Ar 2  20 rr rr                     jsr print_string_no_lf  ; "STACK DEPTH CHECK"
00595Dr 2               _disasm_jsr_unknown:
00595Dr 2  20 rr rr                     jsr xt_two_drop
005960r 2  60                           rts
005961r 2               
005961r 2               
005961r 2               ; =========================================================
005961r 2               oc_index_table:
005961r 2                       ; Lookup table for the instruction data (length of instruction in
005961r 2                       ; bytes, length of mnemonic in bytes, mnemonic string). This is used by
005961r 2                       ; the assembler as well.
005961r 2               
005961r 2                       ; Opcodes 00-0F
005961r 2  rr rr rr rr          .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
005965r 2  rr rr rr rr  
005969r 2  rr rr rr rr  
005971r 2  rr rr rr rr          .word oc08, oc09, oc0a, oc__, oc0c, oc0d, oc0e, oc0f
005975r 2  rr rr rr rr  
005979r 2  rr rr rr rr  
005981r 2               
005981r 2                       ; Opcodes 10-1F
005981r 2  rr rr rr rr          .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
005985r 2  rr rr rr rr  
005989r 2  rr rr rr rr  
005991r 2  rr rr rr rr          .word oc18, oc19, oc1a, oc__, oc1c, oc1d, oc__, oc1f
005995r 2  rr rr rr rr  
005999r 2  rr rr rr rr  
0059A1r 2               
0059A1r 2                       ; Opcodes 20-2F
0059A1r 2  rr rr rr rr          .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
0059A5r 2  rr rr rr rr  
0059A9r 2  rr rr rr rr  
0059B1r 2  rr rr rr rr          .word oc28, oc29, oc2a, oc__, oc2c, oc2d, oc2e, oc2f
0059B5r 2  rr rr rr rr  
0059B9r 2  rr rr rr rr  
0059C1r 2               
0059C1r 2                       ; Opcodes 30-3F
0059C1r 2  rr rr rr rr          .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
0059C5r 2  rr rr rr rr  
0059C9r 2  rr rr rr rr  
0059D1r 2  rr rr rr rr          .word oc38, oc39, oc3a, oc__, oc3c, oc3d, oc3e, oc0f
0059D5r 2  rr rr rr rr  
0059D9r 2  rr rr rr rr  
0059E1r 2               
0059E1r 2                       ; Opcodes 40-4F
0059E1r 2  rr rr rr rr          .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
0059E5r 2  rr rr rr rr  
0059E9r 2  rr rr rr rr  
0059F1r 2  rr rr rr rr          .word oc48, oc49, oc4a, oc__, oc4c, oc4d, oc4e, oc4f
0059F5r 2  rr rr rr rr  
0059F9r 2  rr rr rr rr  
005A01r 2               
005A01r 2                       ; Opcodes 50-5F
005A01r 2  rr rr rr rr          .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
005A05r 2  rr rr rr rr  
005A09r 2  rr rr rr rr  
005A11r 2  rr rr rr rr          .word oc58, oc59, oc5a, oc__, oc__, oc__, oc5e, oc5f
005A15r 2  rr rr rr rr  
005A19r 2  rr rr rr rr  
005A21r 2               
005A21r 2                       ; Opcodes 60-6F
005A21r 2  rr rr rr rr          .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
005A25r 2  rr rr rr rr  
005A29r 2  rr rr rr rr  
005A31r 2  rr rr rr rr          .word oc68, oc69, oc6a, oc__, oc6c, oc6d, oc6e, oc6f
005A35r 2  rr rr rr rr  
005A39r 2  rr rr rr rr  
005A41r 2               
005A41r 2                       ; Opcodes 70-7F
005A41r 2  rr rr rr rr          .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
005A45r 2  rr rr rr rr  
005A49r 2  rr rr rr rr  
005A51r 2  rr rr rr rr          .word oc78, oc79, oc7a, oc__, oc7c, oc7d, oc7e, oc7f
005A55r 2  rr rr rr rr  
005A59r 2  rr rr rr rr  
005A61r 2               
005A61r 2                       ; Opcodes 80-8F
005A61r 2  rr rr rr rr          .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
005A65r 2  rr rr rr rr  
005A69r 2  rr rr rr rr  
005A71r 2  rr rr rr rr          .word oc88, oc89, oc8a, oc__, oc8c, oc8d, oc8e, oc8f
005A75r 2  rr rr rr rr  
005A79r 2  rr rr rr rr  
005A81r 2               
005A81r 2                       ; Opcodes 90-9F
005A81r 2  rr rr rr rr          .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
005A85r 2  rr rr rr rr  
005A89r 2  rr rr rr rr  
005A91r 2  rr rr rr rr          .word oc98, oc99, oc9a, oc__, oc9c, oc9d, oc9e, oc9f
005A95r 2  rr rr rr rr  
005A99r 2  rr rr rr rr  
005AA1r 2               
005AA1r 2                       ; Opcodes A0-AF
005AA1r 2  rr rr rr rr          .word oca0, oca1, oca2, oc__, oca4, oca5, oca6, oca7
005AA5r 2  rr rr rr rr  
005AA9r 2  rr rr rr rr  
005AB1r 2  rr rr rr rr          .word oca8, oca9, ocaa, oc__, ocac, ocad, ocae, ocaf
005AB5r 2  rr rr rr rr  
005AB9r 2  rr rr rr rr  
005AC1r 2               
005AC1r 2                       ; Opcodes B0-BF
005AC1r 2  rr rr rr rr          .word ocb0, ocb1, ocb2, oc__, ocb4, ocb5, ocb6, ocb7
005AC5r 2  rr rr rr rr  
005AC9r 2  rr rr rr rr  
005AD1r 2  rr rr rr rr          .word ocb8, ocb9, ocba, oc__, ocbc, ocbd, ocbe, ocbf
005AD5r 2  rr rr rr rr  
005AD9r 2  rr rr rr rr  
005AE1r 2               
005AE1r 2                       ; Opcodes C0-CF
005AE1r 2  rr rr rr rr          .word occ0, occ1, oc__, oc__, occ4, occ5, occ6, occ7
005AE5r 2  rr rr rr rr  
005AE9r 2  rr rr rr rr  
005AF1r 2  rr rr rr rr          .word occ8, occ9, occa, oc__, occc, occd, occe, occf
005AF5r 2  rr rr rr rr  
005AF9r 2  rr rr rr rr  
005B01r 2               
005B01r 2                       ; Opcodes D0-DF
005B01r 2  rr rr rr rr          .word ocd0, ocd1, ocd2, oc__, oc__, ocd5, ocd6, ocd7
005B05r 2  rr rr rr rr  
005B09r 2  rr rr rr rr  
005B11r 2  rr rr rr rr          .word ocd8, ocd9, ocda, oc__, oc__, ocdd, ocde, ocdf
005B15r 2  rr rr rr rr  
005B19r 2  rr rr rr rr  
005B21r 2               
005B21r 2                       ; Opcodes E0-EF
005B21r 2  rr rr rr rr          .word oce0, oce1, oc__, oc__, oce4, oce5, oce6, oce7
005B25r 2  rr rr rr rr  
005B29r 2  rr rr rr rr  
005B31r 2  rr rr rr rr          .word oce8, oce9, ocea, oc__, ocec, oced, ocee, ocef
005B35r 2  rr rr rr rr  
005B39r 2  rr rr rr rr  
005B41r 2               
005B41r 2                       ; Opcodes F0-FF
005B41r 2  rr rr rr rr          .word ocf0, ocf1, ocf2, oc__, oc__, ocf5, ocf6, ocf7
005B45r 2  rr rr rr rr  
005B49r 2  rr rr rr rr  
005B51r 2  rr rr rr rr          .word ocf8, ocf9, ocfa, oc__, oc__, ocfd, ocfe, ocff
005B55r 2  rr rr rr rr  
005B59r 2  rr rr rr rr  
005B61r 2               
005B61r 2               
005B61r 2               ; =========================================================
005B61r 2               oc_table:
005B61r 2                       ; Opcode data table for the disassember, which is also used by the
005B61r 2                       ; assembler. Each entry starts with a "lengths byte":
005B61r 2               
005B61r 2                       ;       bit 7-6:  Length of instruction in bytes (1 to 3 for the 65c02)
005B61r 2                       ;       bit 5-3:  unused
005B61r 2                       ;       bit 2-0:  Length of mnemonic in chars (3 to 7)
005B61r 2               
005B61r 2                       ; To convert a line in this table to a Forth string of the mnemonic,
005B61r 2                       ; use the COUNT word on the address of the lengths byte to get
005B61r 2                       ; ( addr u ) and then mask all but the bits 2-0 of the TOS.
005B61r 2               
005B61r 2                       ; To make debugging easier, we keep the raw numbers for the lengths of
005B61r 2                       ; the instruction and mnemonicis and let the assembler do the math
005B61r 2                       ; required to shift and add. The actual mnemonic string follows after
005B61r 2                       ; and is not zero terminated because we have the length in bits 2 to 0.
005B61r 2               
005B61r 2  83 62 72 6B  	oc00:	.byte 2*64+3, "brk"              ; enforce the signature byte
005B65r 2  87 6F 72 61  	oc01:	.byte 2*64+7, "ora.zxi"
005B69r 2  2E 7A 78 69  
005B6Dr 2               ;      (oc02)
005B6Dr 2               ;      (oc03)
005B6Dr 2  85 74 73 62          oc04:   .byte 2*64+5, "tsb.z"
005B71r 2  2E 7A        
005B73r 2  85 6F 72 61  	oc05:	.byte 2*64+5, "ora.z"
005B77r 2  2E 7A        
005B79r 2  85 61 73 6C  	oc06:	.byte 2*64+5, "asl.z"
005B7Dr 2  2E 7A        
005B7Fr 2               ;      (oc07)
005B7Fr 2  43 70 68 70  	oc08:	.byte 1*64+3, "php"
005B83r 2  85 6F 72 61  	oc09:	.byte 2*64+5, "ora.#"
005B87r 2  2E 23        
005B89r 2  45 61 73 6C  	oc0a:	.byte 1*64+5, "asl.a"
005B8Dr 2  2E 61        
005B8Fr 2               ;      (oc0b)
005B8Fr 2  C3 74 73 62  	oc0c:	.byte 3*64+3, "tsb"
005B93r 2  C3 6F 72 61  	oc0d:	.byte 3*64+3, "ora"
005B97r 2  C3 61 73 6C  	oc0e:	.byte 3*64+3, "asl"
005B9Br 2  C4 62 62 72  	oc0f:	.byte 3*64+4, "bbr0"
005B9Fr 2  30           
005BA0r 2               
005BA0r 2  83 62 70 6C  	oc10:	.byte 2*64+3, "bpl"
005BA4r 2  87 6F 72 61  	oc11:	.byte 2*64+7, "ora.ziy"
005BA8r 2  2E 7A 69 79  
005BACr 2  86 6F 72 61  	oc12:	.byte 2*64+6, "ora.zi"
005BB0r 2  2E 7A 69     
005BB3r 2               ;      (oc13:)
005BB3r 2  85 74 72 62  	oc14:	.byte 2*64+5, "trb.z"
005BB7r 2  2E 7A        
005BB9r 2  86 6F 72 61  	oc15:	.byte 2*64+6, "ora.zx"
005BBDr 2  2E 7A 78     
005BC0r 2  86 61 73 6C  	oc16:	.byte 2*64+6, "asl.zx"
005BC4r 2  2E 7A 78     
005BC7r 2  86 72 6D 62  	oc17:	.byte 2*64+6, "rmb1.z"
005BCBr 2  31 2E 7A     
005BCEr 2  43 63 6C 63  	oc18:	.byte 1*64+3, "clc"
005BD2r 2  C5 6F 72 61  	oc19:	.byte 3*64+5, "ora.y"
005BD6r 2  2E 79        
005BD8r 2  45 69 6E 63  	oc1a:	.byte 1*64+5, "inc.a"
005BDCr 2  2E 61        
005BDEr 2               ;      (oc1b:)
005BDEr 2  C3 74 72 62  	oc1c:	.byte 3*64+3, "trb"
005BE2r 2  C5 6F 72 61  	oc1d:	.byte 3*64+5, "ora.x"
005BE6r 2  2E 78        
005BE8r 2               ;      (oc1e:)
005BE8r 2  C5 61 73 6C  	oc1f:	.byte 3*64+5, "asl.x"
005BECr 2  2E 78        
005BEEr 2               
005BEEr 2  C3 6A 73 72  	oc20:	.byte 3*64+3, "jsr"
005BF2r 2  87 61 6E 64  	oc21:	.byte 2*64+7, "and.zxi"
005BF6r 2  2E 7A 78 69  
005BFAr 2               ;      (oc22:)
005BFAr 2               ;      (oc23:)
005BFAr 2  85 62 69 74  	oc24:	.byte 2*64+5, "bit.z"
005BFEr 2  2E 7A        
005C00r 2  85 61 6E 64  	oc25:	.byte 2*64+5, "and.z"
005C04r 2  2E 7A        
005C06r 2  85 72 6F 6C  	oc26:	.byte 2*64+5, "rol.z"
005C0Ar 2  2E 7A        
005C0Cr 2  86 72 6D 62  	oc27:	.byte 2*64+6, "rmb2.z"
005C10r 2  32 2E 7A     
005C13r 2  43 70 6C 70  	oc28:	.byte 1*64+3, "plp"
005C17r 2  85 61 6E 64  	oc29:	.byte 2*64+5, "and.#"
005C1Br 2  2E 23        
005C1Dr 2  45 72 6F 6C  	oc2a:	.byte 1*64+5, "rol.a"
005C21r 2  2E 61        
005C23r 2               ;      (oc2b:)
005C23r 2  C3 62 69 74  	oc2c:	.byte 3*64+3, "bit"
005C27r 2  C4 61 6E 64  	oc2d:	.byte 3*64+4, "and."
005C2Br 2  2E           
005C2Cr 2  C3 72 6F 6C  	oc2e:	.byte 3*64+3, "rol"
005C30r 2  C4 62 62 72  	oc2f:	.byte 3*64+4, "bbr2"
005C34r 2  32           
005C35r 2               
005C35r 2  83 62 6D 69  	oc30:	.byte 2*64+3, "bmi"
005C39r 2  87 61 6E 64  	oc31:	.byte 2*64+7, "and.ziy"
005C3Dr 2  2E 7A 69 79  
005C41r 2  86 61 6E 64  	oc32:	.byte 2*64+6, "and.zi"
005C45r 2  2E 7A 69     
005C48r 2               ;      (oc33:)
005C48r 2  87 62 69 74  	oc34:	.byte 2*64+7, "bit.zxi"
005C4Cr 2  2E 7A 78 69  
005C50r 2  86 61 6E 64  	oc35:	.byte 2*64+6, "and.zx"
005C54r 2  2E 7A 78     
005C57r 2  86 72 6F 6C  	oc36:	.byte 2*64+6, "rol.zx"
005C5Br 2  2E 7A 78     
005C5Er 2  86 72 6D 62  	oc37:	.byte 2*64+6, "rmb3.z"
005C62r 2  33 2E 7A     
005C65r 2  43 73 65 63  	oc38:	.byte 1*64+3, "sec"
005C69r 2  C5 61 6E 64  	oc39:	.byte 3*64+5, "and.y"
005C6Dr 2  2E 79        
005C6Fr 2  45 64 65 63  	oc3a:	.byte 1*64+5, "dec.a"
005C73r 2  2E 61        
005C75r 2               ;      (oc3b:)
005C75r 2  C5 62 69 74  	oc3c:	.byte 3*64+5, "bit.x"
005C79r 2  2E 78        
005C7Br 2  C5 61 6E 64  	oc3d:	.byte 3*64+5, "and.x"
005C7Fr 2  2E 78        
005C81r 2  C5 72 6F 6C  	oc3e:	.byte 3*64+5, "rol.x"
005C85r 2  2E 78        
005C87r 2  C4 62 62 72  	oc3f:	.byte 3*64+4, "bbr3"
005C8Br 2  33           
005C8Cr 2               
005C8Cr 2  43 72 74 69  	oc40:	.byte 1*64+3, "rti"
005C90r 2  87 65 6F 72  	oc41:	.byte 2*64+7, "eor.zxi"
005C94r 2  2E 7A 78 69  
005C98r 2               ;      (oc42:)
005C98r 2               ;      (oc43:)
005C98r 2               ;      (oc44:)
005C98r 2  85 65 6F 72  	oc45:	.byte 2*64+5, "eor.z"
005C9Cr 2  2E 7A        
005C9Er 2  85 6C 73 72  	oc46:	.byte 2*64+5, "lsr.z"
005CA2r 2  2E 7A        
005CA4r 2  86 72 62 6D  	oc47:	.byte 2*64+6, "rbm4.z"
005CA8r 2  34 2E 7A     
005CABr 2  43 70 68 61  	oc48:	.byte 1*64+3, "pha"
005CAFr 2  85 65 6F 72  	oc49:	.byte 2*64+5, "eor.#"
005CB3r 2  2E 23        
005CB5r 2  45 6C 73 72  	oc4a:	.byte 1*64+5, "lsr.a"
005CB9r 2  2E 61        
005CBBr 2               ;      (oc4b:)
005CBBr 2  C3 6A 6D 70  	oc4c:	.byte 3*64+3, "jmp"
005CBFr 2  C3 65 6F 72  	oc4d:	.byte 3*64+3, "eor"
005CC3r 2  C3 6C 73 72  	oc4e:	.byte 3*64+3, "lsr"
005CC7r 2  C4 62 62 72  	oc4f:	.byte 3*64+4, "bbr4"
005CCBr 2  34           
005CCCr 2               
005CCCr 2  83 62 76 63  	oc50:	.byte 2*64+3, "bvc"
005CD0r 2  87 65 6F 72  	oc51:	.byte 2*64+7, "eor.ziy"
005CD4r 2  2E 7A 69 79  
005CD8r 2  86 65 6F 72  	oc52:	.byte 2*64+6, "eor.zi"
005CDCr 2  2E 7A 69     
005CDFr 2               ;      (oc53:)
005CDFr 2               ;      (oc54:)
005CDFr 2  86 65 6F 72  	oc55:	.byte 2*64+6, "eor.zx"
005CE3r 2  2E 7A 78     
005CE6r 2  86 6C 73 72  	oc56:	.byte 2*64+6, "lsr.zx"
005CEAr 2  2E 7A 78     
005CEDr 2  86 72 62 6D  	oc57:	.byte 2*64+6, "rbm5.z"
005CF1r 2  35 2E 7A     
005CF4r 2  43 63 6C 69  	oc58:	.byte 1*64+3, "cli"
005CF8r 2  C5 65 6F 72  	oc59:	.byte 3*64+5, "eor.y"
005CFCr 2  2E 79        
005CFEr 2  43 70 68 79  	oc5a:	.byte 1*64+3, "phy"
005D02r 2               ;      (oc5b:)
005D02r 2               ;      (oc5c:)
005D02r 2  C5 65 6F 72  	oc5d:	.byte 3*64+5, "eor.x"
005D06r 2  2E 78        
005D08r 2  C5 6C 73 72  	oc5e:	.byte 3*64+5, "lsr.x"
005D0Cr 2  2E 78        
005D0Er 2  C4 62 62 72  	oc5f:	.byte 3*64+4, "bbr5"
005D12r 2  35           
005D13r 2               
005D13r 2  43 72 74 73  	oc60:	.byte 1*64+3, "rts"
005D17r 2  87 61 64 63  	oc61:	.byte 2*64+7, "adc.zxi"
005D1Br 2  2E 7A 78 69  
005D1Fr 2               ;      (oc62:)
005D1Fr 2               ;      (oc63:)
005D1Fr 2  85 73 74 7A  	oc64:	.byte 2*64+5, "stz.z"
005D23r 2  2E 7A        
005D25r 2  85 61 64 63  	oc65:	.byte 2*64+5, "adc.z"
005D29r 2  2E 7A        
005D2Br 2  85 72 6F 72  	oc66:	.byte 2*64+5, "ror.z"
005D2Fr 2  2E 7A        
005D31r 2  86 72 6D 62  	oc67:	.byte 2*64+6, "rmb6.z"
005D35r 2  36 2E 7A     
005D38r 2  43 70 6C 61  	oc68:	.byte 1*64+3, "pla"
005D3Cr 2  85 61 64 63  	oc69:	.byte 2*64+5, "adc.#"
005D40r 2  2E 23        
005D42r 2  45 72 6F 72  	oc6a:	.byte 1*64+5, "ror.a"
005D46r 2  2E 61        
005D48r 2               ;      (oc6b:)
005D48r 2  C5 6A 6D 70  	oc6c:	.byte 3*64+5, "jmp.i"
005D4Cr 2  2E 69        
005D4Er 2  C3 61 64 63  	oc6d:	.byte 3*64+3, "adc"
005D52r 2  C3 72 6F 72  	oc6e:	.byte 3*64+3, "ror"
005D56r 2  C4 62 62 72  	oc6f:	.byte 3*64+4, "bbr6"
005D5Ar 2  36           
005D5Br 2               
005D5Br 2  83 62 76 73  	oc70:	.byte 2*64+3, "bvs"
005D5Fr 2  87 61 64 63  	oc71:	.byte 2*64+7, "adc.ziy"
005D63r 2  2E 7A 69 79  
005D67r 2  86 61 64 63  	oc72:	.byte 2*64+6, "adc.zi"
005D6Br 2  2E 7A 69     
005D6Er 2               ;      (oc73:)
005D6Er 2  86 73 74 7A  	oc74:	.byte 2*64+6, "stz.zx"
005D72r 2  2E 7A 78     
005D75r 2  86 61 64 63  	oc75:	.byte 2*64+6, "adc.zx"
005D79r 2  2E 7A 78     
005D7Cr 2  86 72 6F 72  	oc76:	.byte 2*64+6, "ror.zx"
005D80r 2  2E 7A 78     
005D83r 2  86 72 6D 62  	oc77:	.byte 2*64+6, "rmb7.z"
005D87r 2  37 2E 7A     
005D8Ar 2  43 73 65 69  	oc78:	.byte 1*64+3, "sei"
005D8Er 2  C5 61 64 63  	oc79:	.byte 3*64+5, "adc.y"
005D92r 2  2E 79        
005D94r 2  43 70 6C 79  	oc7a:	.byte 1*64+3, "ply"
005D98r 2               ;      (oc7b:)
005D98r 2  C6 6A 6D 70  	oc7c:	.byte 3*64+6, "jmp.xi"
005D9Cr 2  2E 78 69     
005D9Fr 2  C5 61 64 63  	oc7d:	.byte 3*64+5, "adc.x"
005DA3r 2  2E 78        
005DA5r 2  C5 72 6F 72  	oc7e:	.byte 3*64+5, "ror.x"
005DA9r 2  2E 78        
005DABr 2  C4 62 62 72  	oc7f:	.byte 3*64+4, "bbr7"
005DAFr 2  37           
005DB0r 2               
005DB0r 2  83 62 72 61  	oc80:	.byte 2*64+3, "bra"
005DB4r 2  87 73 74 61  	oc81:	.byte 2*64+7, "sta.zxi"
005DB8r 2  2E 7A 78 69  
005DBCr 2               ;      (oc82:)
005DBCr 2               ;      (oc83:)
005DBCr 2  85 73 74 79  	oc84:	.byte 2*64+5, "sty.z"
005DC0r 2  2E 7A        
005DC2r 2  85 73 74 61  	oc85:	.byte 2*64+5, "sta.z"
005DC6r 2  2E 7A        
005DC8r 2  85 73 74 78  	oc86:	.byte 2*64+5, "stx.z"
005DCCr 2  2E 7A        
005DCEr 2               ;      (oc87:)
005DCEr 2  43 64 65 79  	oc88:	.byte 1*64+3, "dey"
005DD2r 2  85 62 69 74  	oc89:	.byte 2*64+5, "bit.#"
005DD6r 2  2E 23        
005DD8r 2  43 74 78 61  	oc8a:	.byte 1*64+3, "txa"
005DDCr 2               ;      (oc8b:)
005DDCr 2  C3 73 74 79  	oc8c:	.byte 3*64+3, "sty"
005DE0r 2  C3 73 74 61  	oc8d:	.byte 3*64+3, "sta"
005DE4r 2  C3 73 74 78  	oc8e:	.byte 3*64+3, "stx"
005DE8r 2  C4 62 62 73  	oc8f:	.byte 3*64+4, "bbs0"
005DECr 2  30           
005DEDr 2               
005DEDr 2  83 62 63 63  	oc90:	.byte 2*64+3, "bcc"
005DF1r 2  87 73 74 61  	oc91:	.byte 2*64+7, "sta.ziy"
005DF5r 2  2E 7A 69 79  
005DF9r 2  86 73 74 61  	oc92:	.byte 2*64+6, "sta.zi"
005DFDr 2  2E 7A 69     
005E00r 2               ;      (oc93:)
005E00r 2  86 73 74 79  	oc94:	.byte 2*64+6, "sty.zx"
005E04r 2  2E 7A 78     
005E07r 2  86 73 74 61  	oc95:	.byte 2*64+6, "sta.zx"
005E0Br 2  2E 7A 78     
005E0Er 2  86 73 74 78  	oc96:	.byte 2*64+6, "stx.zy"
005E12r 2  2E 7A 79     
005E15r 2  86 73 6D 62  	oc97:	.byte 2*64+6, "smb1.z"
005E19r 2  31 2E 7A     
005E1Cr 2  43 74 79 61  	oc98:	.byte 1*64+3, "tya"
005E20r 2  C5 73 74 61  	oc99:	.byte 3*64+5, "sta.y"
005E24r 2  2E 79        
005E26r 2  43 74 78 73  	oc9a:	.byte 1*64+3, "txs"
005E2Ar 2               ;      (oc9b:)
005E2Ar 2  C3 73 74 7A  	oc9c:	.byte 3*64+3, "stz"
005E2Er 2  C5 73 74 61  	oc9d:	.byte 3*64+5, "sta.x"
005E32r 2  2E 78        
005E34r 2  C5 73 74 7A  	oc9e:	.byte 3*64+5, "stz.x"
005E38r 2  2E 78        
005E3Ar 2  C4 62 62 73  	oc9f:	.byte 3*64+4, "bbs1"
005E3Er 2  31           
005E3Fr 2               
005E3Fr 2  85 6C 64 79  	oca0:	.byte 2*64+5, "ldy.#"
005E43r 2  2E 23        
005E45r 2  87 6C 64 61  	oca1:	.byte 2*64+7, "lda.zxi"
005E49r 2  2E 7A 78 69  
005E4Dr 2  85 6C 64 78  	oca2:	.byte 2*64+5, "ldx.#"
005E51r 2  2E 23        
005E53r 2               ;      (oca3:)
005E53r 2  85 6C 64 79  	oca4:	.byte 2*64+5, "ldy.z"
005E57r 2  2E 7A        
005E59r 2  85 6C 64 61  	oca5:	.byte 2*64+5, "lda.z"
005E5Dr 2  2E 7A        
005E5Fr 2  85 6C 64 78  	oca6:	.byte 2*64+5, "ldx.z"
005E63r 2  2E 7A        
005E65r 2  86 73 6D 62  	oca7:	.byte 2*64+6, "smb2.z"
005E69r 2  32 2E 7A     
005E6Cr 2  43 74 61 79  	oca8:	.byte 1*64+3, "tay"
005E70r 2  85 6C 64 61  	oca9:	.byte 2*64+5, "lda.#"
005E74r 2  2E 23        
005E76r 2  43 74 61 78  	ocaa:	.byte 1*64+3, "tax"
005E7Ar 2               ;      (ocab:)
005E7Ar 2  C3 6C 64 79  	ocac:	.byte 3*64+3, "ldy"
005E7Er 2  C3 6C 64 61  	ocad:	.byte 3*64+3, "lda"
005E82r 2  C3 6C 64 78  	ocae:	.byte 3*64+3, "ldx"
005E86r 2  C4 62 62 73  	ocaf:	.byte 3*64+4, "bbs2"
005E8Ar 2  32           
005E8Br 2               
005E8Br 2  83 62 63 73  	ocb0:	.byte 2*64+3, "bcs"
005E8Fr 2  87 6C 64 61  	ocb1:	.byte 2*64+7, "lda.ziy"
005E93r 2  2E 7A 69 79  
005E97r 2  86 6C 64 61  	ocb2:	.byte 2*64+6, "lda.zi"
005E9Br 2  2E 7A 69     
005E9Er 2               ;      (ocb3:)
005E9Er 2  86 6C 64 79  	ocb4:	.byte 2*64+6, "ldy.zx"
005EA2r 2  2E 7A 78     
005EA5r 2  86 6C 64 61  	ocb5:	.byte 2*64+6, "lda.zx"
005EA9r 2  2E 7A 78     
005EACr 2  86 6C 64 78  	ocb6:	.byte 2*64+6, "ldx.zy"
005EB0r 2  2E 7A 79     
005EB3r 2  86 73 6D 62  	ocb7:	.byte 2*64+6, "smb3.z"
005EB7r 2  33 2E 7A     
005EBAr 2  43 63 6C 76  	ocb8:	.byte 1*64+3, "clv"
005EBEr 2  C5 6C 64 61  	ocb9:	.byte 3*64+5, "lda.y"
005EC2r 2  2E 79        
005EC4r 2  43 74 73 78  	ocba:	.byte 1*64+3, "tsx"
005EC8r 2               ;      (ocbb:)
005EC8r 2  C5 6C 64 79  	ocbc:	.byte 3*64+5, "ldy.x"
005ECCr 2  2E 78        
005ECEr 2  C5 6C 64 61  	ocbd:	.byte 3*64+5, "lda.x"
005ED2r 2  2E 78        
005ED4r 2  C5 6C 64 78  	ocbe:	.byte 3*64+5, "ldx.y"
005ED8r 2  2E 79        
005EDAr 2  C4 62 62 73  	ocbf:	.byte 3*64+4, "bbs4"
005EDEr 2  34           
005EDFr 2               
005EDFr 2  85 63 70 79  	occ0:	.byte 2*64+5, "cpy.#"
005EE3r 2  2E 23        
005EE5r 2  87 63 6D 70  	occ1:	.byte 2*64+7, "cmp.zxi"
005EE9r 2  2E 7A 78 69  
005EEDr 2               ;      (occ2:)
005EEDr 2               ;      (occ3:)
005EEDr 2  85 63 70 79  	occ4:	.byte 2*64+5, "cpy.z"
005EF1r 2  2E 7A        
005EF3r 2  85 63 6D 70  	occ5:	.byte 2*64+5, "cmp.z"
005EF7r 2  2E 7A        
005EF9r 2  85 64 65 63  	occ6:	.byte 2*64+5, "dec.z"
005EFDr 2  2E 7A        
005EFFr 2  86 73 6D 62  	occ7:	.byte 2*64+6, "smb4.z"
005F03r 2  34 2E 7A     
005F06r 2  43 69 6E 79  	occ8:	.byte 1*64+3, "iny"
005F0Ar 2  85 63 6D 70  	occ9:	.byte 2*64+5, "cmp.#"
005F0Er 2  2E 23        
005F10r 2  43 64 65 78  	occa:	.byte 1*64+3, "dex"
005F14r 2               ;      (occb:)
005F14r 2  C3 63 70 79  	occc:	.byte 3*64+3, "cpy"
005F18r 2  C3 63 6D 70  	occd:	.byte 3*64+3, "cmp"
005F1Cr 2  C3 64 65 63  	occe:	.byte 3*64+3, "dec"
005F20r 2  C4 62 62 73  	occf:	.byte 3*64+4, "bbs4"
005F24r 2  34           
005F25r 2               
005F25r 2  83 62 6E 65  	ocd0:	.byte 2*64+3, "bne"
005F29r 2  87 63 6D 70  	ocd1:	.byte 2*64+7, "cmp.ziy"
005F2Dr 2  2E 7A 69 79  
005F31r 2  86 63 6D 70  	ocd2:	.byte 2*64+6, "cmp.zi"
005F35r 2  2E 7A 69     
005F38r 2               ;      (ocd3:)
005F38r 2               ;      (ocd4:)
005F38r 2  86 63 6D 70  	ocd5:	.byte 2*64+6, "cmp.zx"
005F3Cr 2  2E 7A 78     
005F3Fr 2  86 64 65 63  	ocd6:	.byte 2*64+6, "dec.zx"
005F43r 2  2E 7A 78     
005F46r 2  86 73 6D 62  	ocd7:	.byte 2*64+6, "smb5.z"
005F4Ar 2  35 2E 7A     
005F4Dr 2  43 63 6C 64  	ocd8:	.byte 1*64+3, "cld"
005F51r 2  C5 63 6D 70  	ocd9:	.byte 3*64+5, "cmp.y"
005F55r 2  2E 79        
005F57r 2  43 70 68 78  	ocda:	.byte 1*64+3, "phx"
005F5Br 2               ;      (ocdb:)
005F5Br 2               ;      (ocdc:)
005F5Br 2  C5 63 6D 70  	ocdd:	.byte 3*64+5, "cmp.x"
005F5Fr 2  2E 78        
005F61r 2  C5 64 65 63  	ocde:	.byte 3*64+5, "dec.x"
005F65r 2  2E 78        
005F67r 2  C4 62 62 73  	ocdf:	.byte 3*64+4, "bbs5"
005F6Br 2  35           
005F6Cr 2               
005F6Cr 2  85 63 70 78  	oce0:	.byte 2*64+5, "cpx.#"
005F70r 2  2E 23        
005F72r 2  87 73 62 63  	oce1:	.byte 2*64+7, "sbc.zxi"
005F76r 2  2E 7A 78 69  
005F7Ar 2               ;      (oce2:)
005F7Ar 2               ;      (oce3:)
005F7Ar 2  85 63 70 78  	oce4:	.byte 2*64+5, "cpx.z"
005F7Er 2  2E 7A        
005F80r 2  85 73 62 63  	oce5:	.byte 2*64+5, "sbc.z"
005F84r 2  2E 7A        
005F86r 2  85 69 6E 63  	oce6:	.byte 2*64+5, "inc.z"
005F8Ar 2  2E 7A        
005F8Cr 2  86 73 6D 62  	oce7:	.byte 2*64+6, "smb6.z"
005F90r 2  36 2E 7A     
005F93r 2  43 69 6E 78  	oce8:	.byte 1*64+3, "inx"
005F97r 2  85 73 62 63  	oce9:	.byte 2*64+5, "sbc.#"
005F9Br 2  2E 23        
005F9Dr 2  43 6E 6F 70  	ocea:	.byte 1*64+3, "nop"
005FA1r 2               ;      (oceb:)
005FA1r 2  C3 63 70 78  	ocec:	.byte 3*64+3, "cpx"
005FA5r 2  C3 73 62 63  	oced:	.byte 3*64+3, "sbc"
005FA9r 2  C3 69 6E 63  	ocee:	.byte 3*64+3, "inc"
005FADr 2  C4 62 62 73  	ocef:	.byte 3*64+4, "bbs6"
005FB1r 2  36           
005FB2r 2               
005FB2r 2  83 62 65 71  	ocf0:	.byte 2*64+3, "beq"
005FB6r 2  87 73 62 63  	ocf1:	.byte 2*64+7, "sbc.ziy"
005FBAr 2  2E 7A 69 79  
005FBEr 2  86 73 62 63  	ocf2:	.byte 2*64+6, "sbc.zi"
005FC2r 2  2E 7A 69     
005FC5r 2               ;      (ocf3:)
005FC5r 2               ;      (ocf4:)
005FC5r 2  86 73 62 63  	ocf5:	.byte 2*64+6, "sbc.zx"
005FC9r 2  2E 7A 78     
005FCCr 2  86 69 6E 63  	ocf6:	.byte 2*64+6, "inc.zx"
005FD0r 2  2E 7A 78     
005FD3r 2  86 73 6D 62  	ocf7:	.byte 2*64+6, "smb7.z"
005FD7r 2  37 2E 7A     
005FDAr 2  43 73 65 64  	ocf8:	.byte 1*64+3, "sed"
005FDEr 2  C5 73 62 63  	ocf9:	.byte 3*64+5, "sbc.y"
005FE2r 2  2E 79        
005FE4r 2  43 70 6C 78  	ocfa:	.byte 1*64+3, "plx"
005FE8r 2               ;      (ocfb:)
005FE8r 2               ;      (ocfc:)
005FE8r 2  C5 73 62 63  	ocfd:	.byte 3*64+5, "sbc.x"
005FECr 2  2E 78        
005FEEr 2  C5 69 6E 63  	ocfe:	.byte 3*64+5, "inc.x"
005FF2r 2  2E 78        
005FF4r 2  C4 62 62 73  	ocff:	.byte 3*64+4, "bbs7"
005FF8r 2  37           
005FF9r 2               
005FF9r 2                       ; Common routine for opcodes that are not supported by the 65c02
005FF9r 2  01 3F        	oc__:	.byte 1, "?"
005FFBr 2               
005FFBr 2               ; used to calculate size of assembled disassembler code
005FFBr 2               disassembler_end:
005FFBr 2               
005FFBr 1               .endif
005FFBr 1               
005FFBr 1               
005FFBr 1               platform_bye:
005FFBr 1               kernel_init:
005FFBr 1               .ifdef VIA1_BASE
005FFBr 1  A9 FF            lda #$FF
005FFDr 1  8D 82 FF         sta DDRB
006000r 1  8D 83 FF         sta DDRA
006003r 1  A9 01            lda #1
006005r 1  8D 80 FF         sta PORTB
006008r 1  9C 81 FF         stz PORTA
00600Br 1               .endif
00600Br 1               
00600Br 1  20 rr rr     jsr acia_init
00600Er 1               .ifdef timer_init
00600Er 1  20 rr rr         jsr timer_init
006011r 1               .endif
006011r 1               .ifdef video_init
006011r 1                   jsr video_init
006011r 1               .endif
006011r 1               .ifdef ps2_init
006011r 1  20 rr rr         jsr ps2_init
006014r 1               .endif
006014r 1               .ifdef cf_init
006014r 1  20 rr rr         jsr cf_init
006017r 1               .endif
006017r 1               .ifdef lcd_init
006017r 1  20 rr rr         jsr lcd_init
00601Ar 1               .endif
00601Ar 1               .ifdef spi_init
00601Ar 1  20 rr rr         jsr spi_init
00601Dr 1               .endif
00601Dr 1               .ifdef kb_init
00601Dr 1                   jsr kb_init
00601Dr 1               .endif
00601Dr 1               
00601Dr 1  DA A2 00 BD      printascii welcome_message
006021r 1  rr rr F0 06  
006025r 1  20 rr rr E8  
00602Cr 1               
00602Cr 1  A9 rr            lda #<dictionary
00602Er 1  85 rr            sta util_tmp
006030r 1  A9 rr            lda #>dictionary
006032r 1  85 rr            sta util_tmp + 1
006034r 1               
006034r 1  20 rr rr         jsr calculate_free_mem
006037r 1  A5 rr            lda tmp_var + 1
006039r 1  A6 rr            ldx tmp_var
00603Br 1  20 rr rr         jsr print16
00603Er 1               
00603Er 1  DA A2 00 BD      printascii free_message
006042r 1  rr rr F0 06  
006046r 1  20 rr rr E8  
00604Dr 1               
00604Dr 1               
00604Dr 1  4C rr rr         jmp forth
006050r 1               
006050r 1               v_nmi:
006050r 1               
006050r 1                   ; jsr calculate_free_mem
006050r 1                   ; lda tmp_var + 1
006050r 1                   ; ldx tmp_var
006050r 1                   ; jsr print16
006050r 1               
006050r 1                   ; printascii free_message
006050r 1  DA A2 00 BD      printascii ready_message
006054r 1  rr rr F0 06  
006058r 1  20 rr rr E8  
00605Fr 1               
00605Fr 1  4C rr rr         jmp xt_abort
006062r 1               
006062r 1               
006062r 1               
006062r 1               
006062r 1               io_read_sector:
006062r 1  4C rr rr         jmp io_read_sector_address        ; jump to read sector routine
006065r 1               
006065r 1               io_write_sector:
006065r 1  4C rr rr         jmp io_write_sector_address        ; jump to read sector routine
006068r 1               
006068r 1               
006068r 1               
006068r 1               kernel_putc:
006068r 1                   ; """Print a single character to the console. """
006068r 1                   ;; Send_Char - send character in A out serial port.
006068r 1                   ;; Uses: A (original value restored)
006068r 1               send_char:
006068r 1  48               pha
006069r 1                   .ifdef char_out
006069r 1                   jsr char_out
006069r 1                   .endif
006069r 1                   .ifdef acia_out
006069r 1  20 rr rr         jsr acia_out
00606Cr 1                   .endif
00606Cr 1               send_char_exit:
00606Cr 1               .ifdef lcd_print
00606Cr 1  20 rr rr         jsr lcd_print
00606Fr 1               .endif
00606Fr 1  68               pla
006070r 1  60               rts
006071r 1               
006071r 1               
006071r 1                       ;; Get_Char - get a character from the serial port into A.
006071r 1                       ;; Set the carry flag if char is valid.
006071r 1                       ;; Return immediately with carry flag clear if no char available.
006071r 1                       ;; Uses: A (return value)
006071r 1               
006071r 1               Get_Char:
006071r 1  20 rr rr         jsr acia_getc
006074r 1  90 01            bcc get_ps2_char                ; check keyboard buffer if nothing from ACIA
006076r 1                                                   ; Carry is set to show we got a character
006076r 1  60               rts                             ; Return
006077r 1               
006077r 1               get_ps2_char:                       ; no ACIA char available, try to get from KB buffer
006077r 1               .ifdef ps2_get_char
006077r 1  20 rr rr         jsr ps2_get_char
00607Ar 1               .endif
00607Ar 1  90 01            bcc get_kb_char
00607Cr 1  60               rts
00607Dr 1               get_kb_char:
00607Dr 1               .ifdef kb_get_char
00607Dr 1                   jsr kb_get_char
00607Dr 1               .endif
00607Dr 1               exit:                         ; Indicate no char available.
00607Dr 1  60               rts                             ; return
00607Er 1               
00607Er 1               kernel_getc:
00607Er 1                   ; """Get a single character from the keyboard (waits for key).
00607Er 1                   ; """
00607Er 1                   ;; Get_Char_Wait - same as Get_Char only blocking.
00607Er 1                   ;; Uses: A (return value)
00607Er 1               Get_Char_Wait:
00607Er 1  20 rr rr         jsr Get_Char
006081r 1  90 FB            bcc Get_Char_Wait
006083r 1  60               rts
006084r 1               
006084r 1               
006084r 1               v_irq:                          ; IRQ handler
006084r 1  48                   pha
006085r 1  5A                   phy
006086r 1                       ; lda #'.'
006086r 1                       ; jsr kernel_putc
006086r 1                       ; check if bit 7 of IFR is set
006086r 1               .ifdef IFR
006086r 1  AD 8D FF             lda IFR
006089r 1  10 0B                bpl irq_not_from_via  ; Interrupt not from VIA, exit
00608Br 1               
00608Br 1  29 08                and #$08        ; ps2 has priority
00608Dr 1  D0 07                bne v_irq_ps2
00608Fr 1  AD 8D FF             lda IFR
006092r 1  29 40                and #$40
006094r 1  D0 15                bne v_irq_timer
006096r 1               irq_not_from_via:
006096r 1               .endif
006096r 1               .ifdef KB_IFR
006096r 1               v_kb_irq:
006096r 1                       lda KB_IFR
006096r 1                       bpl v_irq_exit
006096r 1                       and #$40
006096r 1                       bne v_kb_irq_timer
006096r 1                       bra v_irq_exit
006096r 1               .endif
006096r 1               
006096r 1               v_irq_ps2:
006096r 1                   .ifdef ps2_irq
006096r 1  A5 rr                lda time
006098r 1  85 rr                sta last_ps2_time
00609Ar 1  A5 rr                lda time+1
00609Cr 1  85 rr                sta last_ps2_time+1
00609Er 1  A5 rr                lda time+2
0060A0r 1  85 rr                sta last_ps2_time+2
0060A2r 1  A5 rr                lda time+3
0060A4r 1  85 rr                sta last_ps2_time+3
0060A6r 1               
0060A6r 1  20 rr rr             jsr ps2_irq
0060A9r 1               
0060A9r 1                   .endif
0060A9r 1  80 27                bra v_irq_exit
0060ABr 1               
0060ABr 1               .ifdef T1CL
0060ABr 1               v_irq_timer:
0060ABr 1  AD 84 FF             lda T1CL
0060AEr 1                       ; clear timer interrupt
0060AEr 1                   .ifdef timer_irq
0060AEr 1  20 rr rr             jsr timer_irq
0060B1r 1                   .endif
0060B1r 1  20 rr rr             jsr Get_Char ; Check if a char is waiting to be able to break on CTRL-C
0060B4r 1                       ; check if there is a char waiting to be printed to the lcd
0060B4r 1                       ; lda lcd_char
0060B4r 1                       ; beq v_exit
0060B4r 1                       ; jsr lcd_print
0060B4r 1                       ; stz lcd_char
0060B4r 1               
0060B4r 1               
0060B4r 1  90 1C                bcc v_irq_exit      ; no character waiting, exit normally
0060B6r 1  C9 03                cmp #$03            ; check if CTRL-C
0060B8r 1  D0 18                bne v_irq_exit      ; not CTRL-C, exit normally
0060BAr 1  DA A2 00 BD          printascii abort_message    ; was a CTRL_C
0060BEr 1  rr rr F0 06  
0060C2r 1  20 rr rr E8  
0060C9r 1  7A                   ply                         ; pull what the ISR pushed
0060CAr 1  68                   pla
0060CBr 1  28                   plp                         ; pull status register
0060CCr 1  68                   pla                         ; pull return address
0060CDr 1  68                   pla
0060CEr 1               
0060CEr 1  58                   cli                         ; clear interrupt disabled bit
0060CFr 1  4C rr rr             jmp xt_abort
0060D2r 1               
0060D2r 1               .endif
0060D2r 1               v_kb_irq_timer:
0060D2r 1               .ifdef kb_time
0060D2r 1                   lda KB_T1CL ; clear timer interrupt
0060D2r 1                   inc kb_time
0060D2r 1                   bne v_irq_exit
0060D2r 1               
0060D2r 1               .endif
0060D2r 1                   ;jsr kb_scan
0060D2r 1               v_irq_exit:
0060D2r 1  7A               ply
0060D3r 1  68               pla
0060D4r 1  40               rti
0060D5r 1               
0060D5r 1  20 62 79 74  free_message: .byte " bytes free", $0D, 0
0060D9r 1  65 73 20 66  
0060DDr 1  72 65 65 0D  
0060E2r 1  52 65 61 64  ready_message: .byte "Ready", $0D, 0
0060E6r 1  79 0D 00     
0060E9r 1  57 65 6C 63  welcome_message: .byte "Welcome to Planck 6502", $0D, "Type 'words' for available words", $0D, 0
0060EDr 1  6F 6D 65 20  
0060F1r 1  74 6F 20 50  
006122r 1  0D 0A 00     abort_message: .byte AscCR, AscLF, 0
006125r 1               
006125r 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        .word v_nmi
000002r 1  rr rr        .word v_reset
000004r 1  rr rr        .word v_irq
000004r 1               
