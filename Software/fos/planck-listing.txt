ca65 V2.18 - N/A
Main file   : platform/planck/main.s
Current file: platform/planck/main.s

000000r 1               
000000r 1               .include "../../macros.s"
000000r 2               .macro  printascii   addr
000000r 2               .local @loop
000000r 2               .local @done
000000r 2                   phx
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda addr,x
000000r 2                   beq @done
000000r 2                   jsr kernel_putc
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @done:
000000r 2                   plx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               
000000r 2               .macro  cp16   src, dest
000000r 2                   lda src
000000r 2                   sta dest
000000r 2                   lda src + 1
000000r 2                   sta dest + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro printstr addr, len
000000r 2               .repeat len, I
000000r 2               lda addr + I
000000r 2               jsr kernel_putc
000000r 2               .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl16 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro asl32 src
000000r 2                   asl src
000000r 2                   rol src + 1
000000r 2                   rol src + 2
000000r 2                   rol src + 3
000000r 2               .endmacro
000000r 2               
000000r 2               .macro lsr16 src
000000r 2                   lsr src + 1
000000r 2                   ror src
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc16 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment the MSB if LSB wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inc32 src
000000r 2               .local @done
000000r 2                   inc src       ;Increment the LSB
000000r 2                   bne @done       ;If the result was not zero we're done
000000r 2                   inc src+1       ;Increment next byte if LSB wrapped round
000000r 2                   bne @done
000000r 2                   inc src+2       ;Increment the next byte the previous wrapped round
000000r 2                   bne @done
000000r 2                   inc src+3       ;Increment the MSB if previous wrapped round
000000r 2               @done:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16 src
000000r 2               .local @skip
000000r 2               .local @end
000000r 2                   lda src             ; load low byte
000000r 2                   bne @skip           ; if it's not zero, just decrement it
000000r 2                   dec src + 1         ; if low byte is zero decrement high byte
000000r 2               @skip:
000000r 2                   dec src
000000r 2               @end:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro dec16zero src
000000r 2               .local @skip
000000r 2               .local @end
000000r 2                   lda src             ; load low byte
000000r 2                   bne @skip           ; if it's not zero, decrement it
000000r 2                   dec src + 1         ; if low byte is zero decrement high byte
000000r 2                   beq @end            ; if high byte is also zero, we reached zero, exit now
000000r 2               @skip:
000000r 2                   dec src
000000r 2                   bne @end            ; if low byte is not zero exit now
000000r 2                   lda src + 1         ; if low byte was zero, load high byte to check if it's also zero
000000r 2               @end:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro add16 first, second, result
000000r 2                   CLC             ;Ensure carry is clear
000000r 2                   LDA first+0       ;Add the two least significant bytes
000000r 2                   ADC second+0
000000r 2                   STA result+0       ;... and store the result
000000r 2                   LDA first+1       ;Add the two most significant bytes
000000r 2                   ADC second+1       ;... and any propagated carry bit
000000r 2                   STA result+1       ;... and store the result
000000r 2               .endmacro
000000r 2               
000000r 2               ; compare data at two adresses for defined length
000000r 2               ; On exit, carry is set if there is a match
000000r 2               ; and unset if no match
000000r 2               ; length of data to check is in X
000000r 2               
000000r 2               .macro memcmp first, second
000000r 2               .local @exit
000000r 2               .local @loop
000000r 2               .local @exit_fail
000000r 2               @loop:
000000r 2                   lda first, x
000000r 2                   cmp second, x
000000r 2                   bne @exit_fail
000000r 2                   dex
000000r 2                   bne @loop
000000r 2                   lda first           ; check 0th element
000000r 2                   cmp second
000000r 2                   bne @exit_fail
000000r 2                   sec
000000r 2                   bra @exit
000000r 2               @exit_fail:
000000r 2                   clc
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               ; copy data from one address to another for defined length
000000r 2               ; length of data to copy is in X
000000r 2               .macro memcp first, second
000000r 2               .local @exit
000000r 2               .local @loop
000000r 2               @loop:
000000r 2                   lda first, x
000000r 2                   sta second, x
000000r 2                   dex
000000r 2                   bne @loop
000000r 2                   lda first           ; copy zeroth item
000000r 2                   sta second
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               ; calculates length of zero terminated string
000000r 2               ; result is in x
000000r 2               .macro strlen address
000000r 2               .local @loop
000000r 2               .local @exit
000000r 2                   ldx #0
000000r 2               @loop:
000000r 2                   lda address, x
000000r 2                   beq @exit
000000r 2                   inx
000000r 2                   bra @loop
000000r 2               @exit:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_axy
000000r 2               	pha		; push accumulator to stack
000000r 2               	phx
000000r 2                   phy
000000r 2               .endmacro
000000r 2               
000000r 2               .macro pull_axy
000000r 2               	ply		; pull y from stack
000000r 2               	plx		; pull x from stack
000000r 2               	pla		; pull a from stack
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro push_ax
000000r 2               	pha
000000r 2               	phx
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ax
000000r 2               	pla
000000r 2               	plx
000000r 2               .endmacro
000000r 2               
000000r 2               .macro push_ay
000000r 2               	pha
000000r 2               	phy
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro pull_ay
000000r 2               	pla
000000r 2               	ply
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro mov32 SRC, DEST
000000r 2               	lda SRC
000000r 2               	sta DEST
000000r 2               	lda SRC+1
000000r 2               	sta DEST+1
000000r 2               	lda SRC+2
000000r 2               	sta DEST+2
000000r 2               	lda SRC+3
000000r 2               	sta DEST+3
000000r 2               .endmacro
000000r 2               
000000r 1               ; The clock speed after it is divided by two by the counter
000000r 1               CLOCK_SPEED = 12000000
000000r 1               TALI_OPTIONAL_ASSEMBLER = 1
000000r 1               
000000r 1               ram_end = $8000
000000r 1               
000000r 1               ; select includes to enable card drivers
000000r 1               ; NOT ALL OF THEM WORK
000000r 1               
000000r 1               .include "drivers/cf.inc"
000000r 2               
000000r 2               CF_READ_SECTOR_COMMAND = $20
000000r 2               CF_WRITE_SECTOR_COMMAND = $30
000000r 2               CF_ADDRESS = $FFD0
000000r 2               
000000r 1               .include "drivers/acia.inc"
000000r 2               ACIA_BASE   = $FFE0
000000r 2               ACIA_DATA = ACIA_BASE
000000r 2               ACIA_STATUS = ACIA_BASE + 1
000000r 2               ACIA_CMD = ACIA_BASE + 2
000000r 2               ACIA_CTRL = ACIA_BASE + 3
000000r 2               
000000r 2               
000000r 1               .include "drivers/via.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               VIA1_BASE   = $FF80
000000r 2               PORTB = VIA1_BASE
000000r 2               PORTA  = VIA1_BASE+1
000000r 2               DDRB = VIA1_BASE+2
000000r 2               DDRA = VIA1_BASE+3
000000r 2               
000000r 2               
000000r 2               T1CL = VIA1_BASE + 4
000000r 2               T1CH = VIA1_BASE + 5
000000r 2               T1LL = VIA1_BASE + 6
000000r 2               T1LH = VIA1_BASE + 7
000000r 2               ACR = VIA1_BASE + 11
000000r 2               PCR = VIA1_BASE + 12
000000r 2               IFR = VIA1_BASE + 13
000000r 2               IER = VIA1_BASE + 14
000000r 2               
000000r 1               ; .include "drivers/sd.inc"
000000r 1               ; .include "drivers/ps2.inc"
000000r 1               ; .include "drivers/4004.inc"
000000r 1               .include "drivers/lcd.inc"
000000r 2               
000000r 2               ; HD 44780 driver
000000r 2               ; all pins on VIA PORTA, 4 bit mode
000000r 2               
000000r 2               ; PORTA0 is free
000000r 2               LCD_BASE = $FFC0
000000r 2               LCD_ADDR_DISABLED = LCD_BASE
000000r 2               LCD_ADDR_ENABLED = LCD_BASE + 1
000000r 2               LCD_DATA_DISABLED = LCD_BASE + 2
000000r 2               LCD_DATA_ENABLED = LCD_BASE + 3
000000r 2               
000000r 2               
000000r 2               ; A0: RS
000000r 2               ; A1: E
000000r 2               
000000r 1               ; .include "drivers/vga.inc"
000000r 1               ; .include "drivers/keyboard.inc"
000000r 1               
000000r 1               .segment "ZEROPAGE": zeropage
000000r 1               .ifdef CF_ADDRESS
000000r 1  xx xx        io_buffer_ptr: .res 2
000002r 1               .endif
000002r 1               
000002r 1               .include "drivers/zp.s"
000002r 2               ; Copyright 2020 Jonathan Foucher
000002r 2               
000002r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000002r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000002r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000002r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000002r 2               ; is furnished to do so, subject to the following conditions:
000002r 2               
000002r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000002r 2               ; substantial portions of the Software.
000002r 2               
000002r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000002r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000002r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000002r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000002r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000002r 2               ; DEALINGS IN THE SOFTWARE.
000002r 2               
000002r 2               ; next_addr: .res 1
000002r 2               
000002r 2               
000002r 2  xx xx        tmp_var: .res 2
000004r 2               
000004r 2               
000004r 2               
000004r 1               
000004r 1               .segment "BSS"
000000r 1               
000000r 1               .ifdef CF_ADDRESS
000000r 1               IO_BUFFER = cp0+256 ; set IO_BUFFER to block buffer
000000r 1  xx xx xx xx  IO_SECTOR: .res 4
000004r 1               .endif
000004r 1               
000004r 1               .segment "STARTUP"
000000r 1               .import    copydata
000000r 1               .import zerobss
000000r 1               
000000r 1               v_reset:
000000r 1  20 rr rr         JSR     copydata
000003r 1  20 rr rr         jsr zerobss
000006r 1               
000006r 1  4C rr rr         jmp kernel_init
000009r 1               
000009r 1               
000009r 1               
000009r 1               .segment "DATA"
000000r 1               
000000r 1               .include "drivers/delayroutines.s"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               ; this routine delays by 2304 * y + 23 cycles
000000r 2               delay:
000000r 2  DA             phx       ; 3 cycles
000001r 2  5A             phy       ; 3 cycles
000002r 2               two:
000002r 2  A2 FF          ldx #$ff  ; 2 cycles
000004r 2               one:
000004r 2  EA             nop       ; 2 cycles
000005r 2  EA             nop       ; 2 cycles
000006r 2  CA             dex       ; 2 cycles
000007r 2  D0 FB          bne one   ; 3 for all cycles, 2 for last
000009r 2  88             dey       ; 2 cycles
00000Ar 2  D0 F6          bne two   ; 3 for all cycles, 2 for last
00000Cr 2  7A             ply       ; 4 cycles
00000Dr 2  FA             plx       ; 4 cycles
00000Er 2  60             rts       ; 6 cycles
00000Fr 2               
00000Fr 2               ; delay is in Y register
00000Fr 2               delay_long:
00000Fr 2  48             pha
000010r 2  5A             phy
000011r 2  DA             phx
000012r 2  98             tya
000013r 2  AA             tax
000014r 2               delay_long_loop:
000014r 2  A0 FF          ldy #$ff
000016r 2  20 rr rr       jsr delay
000019r 2  CA             dex
00001Ar 2  D0 F8          bne delay_long_loop
00001Cr 2  FA             plx
00001Dr 2  7A             ply
00001Er 2  68             pla
00001Fr 2  60             rts
000020r 2               
000020r 2               delay_short:        ; delay Y * 19 cycles
000020r 2  5A             phy
000021r 2               delay_short_loop:
000021r 2  EA             nop               ; 2 cycles
000022r 2  EA             nop               ; 2 cycles
000023r 2  EA             nop               ; 2 cycles
000024r 2  EA             nop               ; 2 cycles
000025r 2  EA             nop               ; 2 cycles
000026r 2  EA             nop               ; 2 cycles
000027r 2  EA             nop               ; 2 cycles
000028r 2               
000028r 2               
000028r 2  88             dey               ; 2 cycles
000029r 2  D0 F6          bne delay_short_loop   ; 2 or 3 cycles
00002Br 2  7A             ply
00002Cr 2  60             rts
00002Dr 2               
00002Dr 1               
00002Dr 1               .ifdef VIA1_BASE
00002Dr 1               .include "drivers/timer.s"
00002Dr 2               .segment "ZEROPAGE"
000004r 2  xx xx xx xx  time: .res 4
000008r 2               
000008r 2               .segment "DATA"
00002Dr 2               
00002Dr 2               COUNTER = CLOCK_SPEED/200        ; n/s
00002Dr 2               ; 200 ticks per second, or 5ms per tick
00002Dr 2               timer_init:
00002Dr 2  AD 8E FF         lda IER
000030r 2  09 C0            ora #$C0        ;enable interrupt on timer1 timeout
000032r 2  8D 8E FF         sta IER
000035r 2  A9 40            lda #$40        ; timer one free run mode
000037r 2  8D 8B FF         sta ACR
00003Ar 2  A9 60            lda #<COUNTER     ; set timer to low byte to calculated value from defined clock speed
00003Cr 2  8D 84 FF         sta T1CL
00003Fr 2  A9 EA            lda #>COUNTER       ; set timer to high byte to calculated value from defined clock speed
000041r 2  8D 85 FF         sta T1CH
000044r 2  64 rr            stz time
000046r 2  64 rr            stz time+1
000048r 2  64 rr            stz time+2
00004Ar 2  64 rr            stz time+3
00004Cr 2  58               cli
00004Dr 2  60               rts
00004Er 2               
00004Er 2               
00004Er 2               timer_irq:
00004Er 2  E6 rr            inc time
000050r 2  F0 01            beq @inc1
000052r 2               @exit1:
000052r 2                   ; this resets the PS/2 temp variables
000052r 2                   ;jsr reset_ps2
000052r 2  60               rts
000053r 2               @inc1:
000053r 2  E6 rr            inc time+1
000055r 2  F0 02            beq @inc2
000057r 2  80 F9            bra @exit1
000059r 2               @inc2:
000059r 2  E6 rr            inc time+2
00005Br 2  F0 02            beq @inc3
00005Dr 2  80 F3            bra @exit1
00005Fr 2               @inc3:
00005Fr 2  E6 rr            inc time+3
000061r 2  80 EF            bra @exit1
000063r 2  60               rts
000064r 2               
000064r 1               .include "drivers/spi.s"
000064r 2               ; SPI defines
000064r 2               .ifndef DATA
000064r 2               DATA = $80
000064r 2               .endif
000064r 2               SS = $07   ; Slave Select with lowest 3 bits
000064r 2               SCK = $08   ; Clock on bit 3
000064r 2               MISO = $10  ; MISO on bit 4
000064r 2               MOSI = $20  ; MOSI on bit 5
000064r 2               CONF = $40  ; CONF on bit 6
000064r 2               
000064r 2               .segment "BSS"
000004r 2  xx           spi_tmp: .res 1
000005r 2  xx           spi_tmp2: .res 1
000006r 2  xx           spi_slave: .res 1
000007r 2               
000007r 2               .segment "DATA"
000064r 2               
000064r 2               spi_init:
000064r 2  AD 80 FF         lda PORTB               ; load current port B
000067r 2  29 90            and #(DATA | MISO)      ; set everything to zero except for PS2 DATA and MISO
000069r 2  09 40            ora #CONF               ; set CONF high
00006Br 2  8D 80 FF         sta PORTB               ; save to PORTB
00006Er 2  AD 82 FF         lda DDRB                ; get current direction register
000071r 2  09 6F            ora #(MOSI | CONF | SCK | SS) ; set MOSI, CONF, SCK and SS as outputs
000073r 2  29 EF            and #($FF^MISO)                 ; set MISO as input
000075r 2  8D 82 FF         sta DDRB
000078r 2  A9 FF            lda #$FF                ; flash leds to see what is going on
00007Ar 2  8D 83 FF         sta DDRA
00007Dr 2                   ;sta PORTA
00007Dr 2  60               rts
00007Er 2               
00007Er 2               spi_select:
00007Er 2                   ; selected slave in A
00007Er 2  29 07            and #SS                 ; mask slave select bits
000080r 2  8D 80 FF         sta PORTB               ; set everything low except for SS bits
000083r 2  8D rr rr         sta spi_slave
000086r 2  5A               phy
000087r 2  A0 01            ldy #$1
000089r 2  20 rr rr         jsr delay_short         ; slight delay
00008Cr 2  09 40            ora #CONF               ; set CONF high to latch address
00008Er 2  8D 80 FF         sta PORTB               ; save to PORTB
000091r 2  7A               ply                     ; CONF MUST stay high for the duration of the transfer
000092r 2  60               rts
000093r 2               
000093r 2               spi_clk_toggle:
000093r 2  60               rts
000094r 2               
000094r 2               spi_transceive:
000094r 2                   ; send data in A, received data will be in A
000094r 2  5A               phy
000095r 2                   ; save data in RAM
000095r 2  8D rr rr         sta spi_tmp
000098r 2                   ; reset X
000098r 2  DA               phx
000099r 2  A2 08            ldx #8
00009Br 2                   ; reset result
00009Br 2  9C rr rr         stz spi_tmp2
00009Er 2               spi_send_loop:
00009Er 2  0E rr rr         asl spi_tmp
0000A1r 2  90 08            bcc bit_unset
0000A3r 2               bit_set:
0000A3r 2  AD 80 FF         lda PORTB
0000A6r 2  09 60            ora #(MOSI | CONF)
0000A8r 2  4C rr rr         jmp clock_on
0000ABr 2               bit_unset:
0000ABr 2  AD 80 FF         lda PORTB
0000AEr 2  29 DF            and #(($FF^MOSI) | CONF)
0000B0r 2               clock_on:
0000B0r 2                   ; set data bit
0000B0r 2  0D rr rr         ora spi_slave
0000B3r 2  8D 80 FF         sta PORTB
0000B6r 2               
0000B6r 2                   ; set clock on
0000B6r 2  09 48            ora #(SCK | CONF)
0000B8r 2  0D rr rr         ora spi_slave
0000BBr 2  8D 80 FF         sta PORTB
0000BEr 2               
0000BEr 2                   ; read bit from slave, maybe add slight delay here ?
0000BEr 2  AD 80 FF         lda PORTB
0000C1r 2  29 10            and #MISO           ; mask miso bit
0000C3r 2  D0 07            bne spi_bit_set      ; bit is set
0000C5r 2                   ; bit is unset
0000C5r 2  18               clc
0000C6r 2  2E rr rr         rol spi_tmp2
0000C9r 2  4C rr rr         jmp clock_off
0000CCr 2               
0000CCr 2               spi_bit_set:
0000CCr 2  38               sec
0000CDr 2  2E rr rr         rol spi_tmp2
0000D0r 2               
0000D0r 2               
0000D0r 2               clock_off:
0000D0r 2  AD 80 FF         lda PORTB
0000D3r 2  29 F7            and #(($FF^SCK) | CONF)
0000D5r 2  0D rr rr         ora spi_slave
0000D8r 2  8D 80 FF         sta PORTB
0000DBr 2               end_loop:
0000DBr 2  CA               dex
0000DCr 2  D0 C0            bne spi_send_loop
0000DEr 2                   ; set data low
0000DEr 2  A0 01            ldy #$1
0000E0r 2  20 rr rr         jsr delay_short
0000E3r 2  AD 80 FF         lda PORTB
0000E6r 2  0D rr rr         ora spi_slave
0000E9r 2  29 DF            and #(($FF^MOSI) | CONF)
0000EBr 2  8D 80 FF         sta PORTB
0000EEr 2  FA               plx
0000EFr 2  7A               ply
0000F0r 2  AD rr rr         lda spi_tmp2
0000F3r 2  60               rts
0000F4r 2               
0000F4r 1               .endif
0000F4r 1               
0000F4r 1               .ifdef ACIA_BASE
0000F4r 1               .include "drivers/acia.s"
0000F4r 2               ACIA_DELAY = CLOCK_SPEED / 250000
0000F4r 2               
0000F4r 2               acia_init:
0000F4r 2  8D E1 FF         sta ACIA_STATUS        ; soft reset (value not important)
0000F7r 2                                           ; set specific modes and functions
0000F7r 2  A9 0B            lda #$0B                ; no parity, no echo, no Tx interrupt, NO Rx interrupt, enable Tx/Rx
0000F9r 2  8D E2 FF         sta ACIA_CMD        ; store to the command register
0000FCr 2  A9 10            lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 115.200k baud rate
0000FEr 2                   ;lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 1200 baud rate
0000FEr 2  8D E3 FF         sta ACIA_CTRL          ; program the ctl register
000101r 2               aa_end:
000101r 2  60               rts
000102r 2               
000102r 2               acia_out:
000102r 2  48               pha
000103r 2  5A               phy
000104r 2  8D E0 FF         sta ACIA_DATA
000107r 2               .ifndef LCD_BUF                ; if the LCD is in the build, we do not need to delay
000107r 2  A0 30            ldy #ACIA_DELAY            ;minimal delay is $02
000109r 2  20 rr rr         jsr delay_short
00010Cr 2               .endif
00010Cr 2  7A               ply
00010Dr 2  68               pla
00010Er 2  60               rts
00010Fr 2               
00010Fr 2               acia_getc:
00010Fr 2  AD E1 FF         lda ACIA_STATUS                 ; Read the ACIA status to
000112r 2  29 08            and #$08                        ; Check if there is character in the receiver
000114r 2  F0 05            beq @no_char      ; Exit now if we don't get one.
000116r 2  AD E0 FF         lda ACIA_DATA
000119r 2  38               sec
00011Ar 2  60               rts
00011Br 2               @no_char:
00011Br 2  18               clc
00011Cr 2  60               rts
00011Dr 2               
00011Dr 1               .endif
00011Dr 1               
00011Dr 1               .ifdef LCD_BASE
00011Dr 1               .include "drivers/lcd.s"
00011Dr 2               .segment "ZEROPAGE": zeropage
000008r 2  xx           LCD_BUF_W_PTR: .res 1
000009r 2  xx           LCD_BUF_R_PTR: .res 1
00000Ar 2  xx           lcd_pos: .res 1
00000Br 2               
00000Br 2               .segment "BSS"
000007r 2  xx xx xx xx  LCD_BUF: .res 128
00000Br 2  xx xx xx xx  
00000Fr 2  xx xx xx xx  
000087r 2  xx           has_lcd: .res 1
000088r 2               
000088r 2               .segment "CODE"
000000r 2               
000000r 2               ; initialize the LCD in 8 bit mode
000000r 2               lcd_init:
000000r 2  9C rr rr         stz has_lcd
000003r 2  20 rr rr         jsr buf_clr
000006r 2  AD C0 FF         lda LCD_ADDR_DISABLED
000009r 2  6A               ror
00000Ar 2  B0 36            bcs lcd_init_exit
00000Cr 2  8D rr rr         sta has_lcd
00000Fr 2               
00000Fr 2  64 rr            stz LCD_BUF_W_PTR
000011r 2  64 rr            stz LCD_BUF_R_PTR
000013r 2  64 rr            stz lcd_pos
000015r 2               
000015r 2  A0 FF            ldy #$FF
000017r 2  20 rr rr         jsr delay
00001Ar 2               
00001Ar 2  A9 38            LDA #$38            ;function set: 8 bit
00001Cr 2  20 rr rr         jsr lcd_inst
00001Fr 2               
00001Fr 2  A0 FF            ldy #$FF
000021r 2  20 rr rr         jsr delay
000024r 2               
000024r 2  A9 0F            LDA #$0F            ;display on, cursor on, blink on
000026r 2  20 rr rr         jsr lcd_inst
000029r 2               
000029r 2                   ;entry mode set
000029r 2  A9 06            LDA #$06
00002Br 2  20 rr rr         jsr lcd_inst
00002Er 2               
00002Er 2                   ;clear display
00002Er 2  A9 01            LDA #$01
000030r 2  20 rr rr         jsr lcd_inst
000033r 2               
000033r 2  A0 FF            ldy #$ff            ; wait a while
000035r 2  20 rr rr         jsr delay
000038r 2                   ;set dram address to start of screen
000038r 2  A9 80            LDA #$80
00003Ar 2  20 rr rr         jsr lcd_inst
00003Dr 2               
00003Dr 2  A0 FF            ldy #$ff            ; wait a while
00003Fr 2  20 rr rr         jsr delay
000042r 2               lcd_init_exit:
000042r 2  60               RTS
000043r 2               
000043r 2               ; Send an instruction in 8 bit mode
000043r 2               lcd_inst:
000043r 2  5A               phy
000044r 2  8D C1 FF         sta LCD_ADDR_ENABLED
000047r 2  A0 02            ldy #$2                    ; Delay 38 clock cycles - 3 us at 12.5 MHz
000049r 2  20 rr rr         jsr delay_short
00004Cr 2  8D C0 FF         sta LCD_ADDR_DISABLED
00004Fr 2  A0 08            ldy #$08                     ; Delay 608 clock cycles - 48 us at 12.5 MHz
000051r 2  20 rr rr         jsr delay_short
000054r 2  7A               ply
000055r 2  60               rts
000056r 2               
000056r 2               lcd_send:
000056r 2  8D C3 FF         sta LCD_DATA_ENABLED
000059r 2  A0 02            ldy #$2                    ; Delay 38 clock cycles - 3 us at 12.5 MHz
00005Br 2  20 rr rr         jsr delay_short
00005Er 2               
00005Er 2  8D C2 FF         sta LCD_DATA_DISABLED
000061r 2  A0 08            ldy #$08                     ; Delay 608 clock cycles - 48 us at 12.5 MHz
000063r 2  20 rr rr         jsr delay_short
000066r 2  60               rts
000067r 2               
000067r 2               ; Sends the character in A to the display
000067r 2               lcd_print:               ; 8 bit data in A
000067r 2  5A               phy
000068r 2  DA               phx
000069r 2  48               pha
00006Ar 2  AE rr rr         ldx has_lcd
00006Dr 2  F0 27            beq @continue
00006Fr 2  C9 0A            cmp #$0A
000071r 2  F0 67            beq @next_line
000073r 2  C9 0D            cmp #$0D
000075r 2  F0 63            beq @next_line
000077r 2  C9 08            cmp #$08            ;backspace
000079r 2  F0 1F            beq @backspace
00007Br 2               
00007Br 2  20 rr rr         jsr lcd_send
00007Er 2  A6 rr            ldx lcd_pos
000080r 2  9D rr rr         sta LCD_BUF, x
000083r 2               
000083r 2  E8               inx
000084r 2                   ; Check at which position we are and change line if necessary
000084r 2  86 rr            stx lcd_pos
000086r 2               
000086r 2  E0 14            cpx #20
000088r 2  F0 2A            beq @line_2
00008Ar 2  E0 28            cpx #40
00008Cr 2  F0 31            beq @line_3
00008Er 2  E0 3C            cpx #60
000090r 2  F0 38            beq @line_4
000092r 2  E0 50            cpx #80
000094r 2  F0 3F            beq @clr
000096r 2               
000096r 2               @continue:
000096r 2  68               pla
000097r 2  FA               plx
000098r 2  7A               ply
000099r 2  60               rts
00009Ar 2               
00009Ar 2               ; LCD adressing http://web.alfredstate.edu/faculty/weimandn/lcd/lcd_addressing/lcd_addressing_index.html
00009Ar 2               @backspace:
00009Ar 2  A9 10            lda #$10            ; shift cursor left
00009Cr 2  20 rr rr         jsr lcd_inst
00009Fr 2  A9 20            lda #$20            ; print a space to erase previous char
0000A1r 2  20 rr rr         jsr lcd_send
0000A4r 2               
0000A4r 2  A9 10            lda #$10            ; shift cursor left
0000A6r 2  20 rr rr         jsr lcd_inst
0000A9r 2  C6 rr            dec lcd_pos
0000ABr 2  A6 rr            ldx lcd_pos         ; save in buffer
0000ADr 2  A9 20            lda #$20
0000AFr 2  9D rr rr         sta LCD_BUF,x
0000B2r 2  80 E2            bra @continue
0000B4r 2               @line_2:
0000B4r 2  A9 14            lda #20
0000B6r 2  85 rr            sta lcd_pos
0000B8r 2  A9 C0            lda #$C0
0000BAr 2  20 rr rr         jsr lcd_inst
0000BDr 2  80 D7            bra @continue
0000BFr 2               
0000BFr 2               @line_3:
0000BFr 2  A9 28            lda #40
0000C1r 2  85 rr            sta lcd_pos
0000C3r 2  A9 94            lda #$94
0000C5r 2  20 rr rr         jsr lcd_inst
0000C8r 2  80 CC            bra @continue
0000CAr 2               
0000CAr 2               @line_4:
0000CAr 2  A9 3C            lda #60
0000CCr 2  85 rr            sta lcd_pos
0000CEr 2  A9 D4            lda #$D4
0000D0r 2  20 rr rr         jsr lcd_inst
0000D3r 2  80 C1            bra @continue
0000D5r 2               @clr:
0000D5r 2                   ; lda #0
0000D5r 2                   ; sta lcd_pos
0000D5r 2                   ; lda #$80
0000D5r 2                   ; jsr lcd_inst
0000D5r 2  20 rr rr         jsr lcd_scroll_up
0000D8r 2  80 BC            bra @continue
0000DAr 2               
0000DAr 2               @next_line:
0000DAr 2  A6 rr            ldx lcd_pos            ;get current position
0000DCr 2  E0 50            cpx #80
0000DEr 2  F0 F5            beq @clr
0000E0r 2  E0 3C            cpx #60
0000E2r 2  F0 E6            beq @line_4
0000E4r 2  E0 28            cpx #40
0000E6r 2  F0 D7            beq @line_3
0000E8r 2  E0 14            cpx #20
0000EAr 2  F0 C8            beq @line_2
0000ECr 2  E8               inx
0000EDr 2  86 rr            stx lcd_pos
0000EFr 2  A9 20            lda #$20
0000F1r 2  20 rr rr         jsr lcd_send
0000F4r 2  9D rr rr         sta LCD_BUF, x
0000F7r 2  80 E1            bra @next_line
0000F9r 2               
0000F9r 2               lcd_scroll_up:
0000F9r 2  48               pha                     ; save registers
0000FAr 2  5A               phy
0000FBr 2  DA               phx
0000FCr 2  A9 80            lda #$80                ; set LCD address to start
0000FEr 2  20 rr rr         jsr lcd_inst
000101r 2               
000101r 2  A2 14            ldx #20                 ; start getting characters at the start of the second line
000103r 2               @scroll_loop:
000103r 2  BD rr rr         lda LCD_BUF, X          ; load from buffer
000106r 2  20 rr rr         jsr lcd_send            ; send to display
000109r 2  A8               tay                     ; save current character in Y
00010Ar 2  E0 4F            cpx #79                 ; update LCD address if necessary
00010Cr 2  F0 4A            beq @scline_4
00010Er 2  E0 3B            cpx #59
000110r 2  F0 3F            beq @scline_3
000112r 2  E0 27            cpx #39
000114r 2  F0 34            beq @scline_2
000116r 2               @sccontinue:                ; return from updating LCD address
000116r 2  8A               txa                     ; copy X to A to be able to subtract from it
000117r 2  38               sec                     ; set carry before subtraction
000118r 2  E9 14            sbc #20                 ; subtract 20 to get where to put this character
00011Ar 2  AA               tax                     ; put the result in X
00011Br 2  98               tya                     ; restore character from Y
00011Cr 2  9D rr rr         sta LCD_BUF, X          ; store char in buffer
00011Fr 2  8A               txa                     ; copy X to A to be able to add to it
000120r 2  18               clc
000121r 2  69 14            adc #20                 ; add 20 to restore X
000123r 2  AA               tax                     ; put the result back in X
000124r 2  E8               inx                     ; increment X to prepare to get next char
000125r 2  E0 50            cpx #80                 ; if not at end of buffer
000127r 2  90 DA            bcc @scroll_loop        ; do next char
000129r 2                   ; fill the last line with spaces
000129r 2  A9 D4            lda #$D4                ; set address to last line
00012Br 2  20 rr rr         jsr lcd_inst
00012Er 2  A9 20            lda #$20
000130r 2  A2 3C            ldx #60
000132r 2               @last_line_loop:
000132r 2  9D rr rr         sta LCD_BUF, x
000135r 2  20 rr rr         jsr lcd_send
000138r 2  E8               inx
000139r 2  E0 50            cpx #80                 ; if not at end of buffer
00013Br 2  90 F5            bcc @last_line_loop     ; do next char
00013Dr 2               
00013Dr 2                   ;finally, place the cursor at the start of the last line
00013Dr 2  A9 3C            lda #60
00013Fr 2  85 rr            sta lcd_pos
000141r 2  A9 D4            lda #$D4
000143r 2  20 rr rr         jsr lcd_inst
000146r 2  FA               plx                     ; restore everything as it was
000147r 2  7A               ply
000148r 2  68               pla
000149r 2  60               rts
00014Ar 2               
00014Ar 2               @scline_2:
00014Ar 2  A9 C0            lda #$C0
00014Cr 2  20 rr rr         jsr lcd_inst
00014Fr 2  80 C5            bra @sccontinue
000151r 2               
000151r 2               @scline_3:
000151r 2  A9 94            lda #$94
000153r 2  20 rr rr         jsr lcd_inst
000156r 2  80 BE            bra @sccontinue
000158r 2               
000158r 2               @scline_4:
000158r 2  A9 D4            lda #$D4
00015Ar 2  20 rr rr         jsr lcd_inst
00015Dr 2  80 B7            bra @sccontinue
00015Fr 2               
00015Fr 2               lcd_clear:
00015Fr 2  48               PHA
000160r 2                   ;clear display
000160r 2  A9 01            LDA #$01
000162r 2  20 rr rr         jsr lcd_inst
000165r 2                   ;set dram address
000165r 2  A9 80            LDA #$80
000167r 2  20 rr rr         jsr lcd_inst
00016Ar 2  68               PLA
00016Br 2  60               RTS
00016Cr 2               
00016Cr 2               
00016Cr 2               buf_clr:
00016Cr 2  48               pha
00016Dr 2  DA               phx
00016Er 2  A2 80            ldx #$80
000170r 2  A9 20            lda #$20
000172r 2               buf_clr_loop:
000172r 2  9D rr rr         sta LCD_BUF,X
000175r 2  CA               dex
000176r 2  D0 FA            bne buf_clr_loop
000178r 2  FA               plx
000179r 2  68               pla
00017Ar 2  60               rts
00017Br 2               
00017Br 1               .endif
00017Br 1               .ifdef KB_VIA_BASE
00017Br 1               .include "drivers/keyboard.s"
00017Br 1               .endif
00017Br 1               .ifdef KB_INIT_STATE_RESET
00017Br 1               .include "drivers/ps2.s"
00017Br 1               .endif
00017Br 1               
00017Br 1               .ifdef LCD2_ENABLED
00017Br 1               .include "drivers/4004.s"
00017Br 1               .endif
00017Br 1               .ifdef CF_ADDRESS
00017Br 1               .include "drivers/cf.s"
00017Br 2               
00017Br 2               .segment "BSS"
000088r 2  xx xx xx xx  LBA_SIZE: .res 4
00008Cr 2               
00008Cr 2               .segment "DATA"
00011Dr 2               cf_init:
00011Dr 2                   ; phy
00011Dr 2  A9 04            lda #$4
00011Fr 2                   ; ldy #7
00011Fr 2                   ; sta (CF_ADDRESS),y
00011Fr 2  8D D7 FF         sta CF_ADDRESS + 7
000122r 2  20 rr rr         jsr cf_wait
000125r 2  A9 E0            lda #$E0
000127r 2  8D D6 FF         sta CF_ADDRESS + 6
00012Ar 2  20 rr rr         jsr cf_wait
00012Dr 2  A9 01            lda #$1
00012Fr 2  8D D1 FF         sta CF_ADDRESS + 1
000132r 2  20 rr rr         jsr cf_wait
000135r 2  A9 EF            lda #$EF
000137r 2  8D D7 FF         sta CF_ADDRESS + 7
00013Ar 2  20 rr rr         jsr cf_wait
00013Dr 2  20 rr rr         jsr cf_err
000140r 2                   ; ply
000140r 2  60               rts
000141r 2               
000141r 2               
000141r 2               
000141r 2               
000141r 2               cf_read:
000141r 2  5A               phy
000142r 2  A0 00            ldy #0
000144r 2               @loop:
000144r 2  20 rr rr         jsr cf_wait
000147r 2  AD D0 FF         lda CF_ADDRESS
00014Ar 2  91 rr            sta (io_buffer_ptr), y
00014Cr 2  C8               iny
00014Dr 2  D0 F5            bne @loop
00014Fr 2  E6 rr            inc io_buffer_ptr + 1
000151r 2                   ; jsr cf_wait
000151r 2               @loop2:
000151r 2  20 rr rr         jsr cf_wait
000154r 2  AD D0 FF         lda CF_ADDRESS
000157r 2  91 rr            sta (io_buffer_ptr), y
000159r 2  C8               iny
00015Ar 2  D0 F5            bne @loop2
00015Cr 2  C6 rr            dec io_buffer_ptr + 1
00015Er 2               @loop3:
00015Er 2  20 rr rr         jsr cf_wait
000161r 2  AD D7 FF         lda CF_ADDRESS + 7
000164r 2  29 08            and #$08
000166r 2  F0 06            beq @exit
000168r 2  AD D0 FF         lda CF_ADDRESS
00016Br 2  C8               iny
00016Cr 2  D0 F0            bne @loop3
00016Er 2               @exit:
00016Er 2  7A               ply
00016Fr 2  60               rts
000170r 2               
000170r 2               
000170r 2               ; number of sectors to read is in X
000170r 2               cf_read_sector:
000170r 2                   ; sei
000170r 2  20 rr rr         jsr cf_set_lba
000173r 2                   ; ldy #2
000173r 2                   ; sta (CF_ADDRESS), y
000173r 2  A9 01            lda #1
000175r 2  8D D2 FF         sta CF_ADDRESS + 2
000178r 2  20 rr rr         jsr cf_wait
00017Br 2  A9 20            lda #CF_READ_SECTOR_COMMAND
00017Dr 2                   ; ldy #7
00017Dr 2                   ; sta (CF_ADDRESS), y
00017Dr 2  8D D7 FF         sta CF_ADDRESS + 7
000180r 2  20 rr rr         jsr cf_wait
000183r 2  20 rr rr         jsr cf_read
000186r 2  20 rr rr         jsr cf_err
000189r 2                   ; cli
000189r 2  60               rts
00018Ar 2               
00018Ar 2               ; number of sectors to write is in X
00018Ar 2               cf_write_sector:
00018Ar 2                   ; sei
00018Ar 2  20 rr rr         jsr cf_set_lba
00018Dr 2  A9 01            lda #1
00018Fr 2                   ; ldy #2
00018Fr 2                   ; sta (CF_ADDRESS), y
00018Fr 2  8D D2 FF         sta CF_ADDRESS + 2
000192r 2  20 rr rr         jsr cf_wait
000195r 2  A9 30            lda #CF_WRITE_SECTOR_COMMAND
000197r 2                   ; ldy #7
000197r 2                   ; sta (CF_ADDRESS), y
000197r 2  8D D7 FF         sta CF_ADDRESS + 7
00019Ar 2  20 rr rr         jsr cf_wait
00019Dr 2  20 rr rr         jsr cf_write
0001A0r 2  20 rr rr         jsr cf_err
0001A3r 2                   ; cli
0001A3r 2  60               rts
0001A4r 2               
0001A4r 2               
0001A4r 2               cf_write:
0001A4r 2  5A               phy
0001A5r 2  A0 00            ldy #0
0001A7r 2               @loop:
0001A7r 2  20 rr rr         jsr cf_wait
0001AAr 2               
0001AAr 2  B1 rr            lda (io_buffer_ptr), y
0001ACr 2  8D D0 FF         sta CF_ADDRESS
0001AFr 2  C8               iny
0001B0r 2  D0 F5            bne @loop
0001B2r 2  E6 rr            inc io_buffer_ptr + 1
0001B4r 2               @loop2:
0001B4r 2  20 rr rr         jsr cf_wait
0001B7r 2  B1 rr            lda (io_buffer_ptr), y
0001B9r 2  8D D0 FF         sta CF_ADDRESS
0001BCr 2  C8               iny
0001BDr 2  D0 F5            bne @loop2
0001BFr 2  C6 rr            dec io_buffer_ptr + 1
0001C1r 2               @loop3:
0001C1r 2  20 rr rr         jsr cf_wait
0001C4r 2  AD D7 FF         lda CF_ADDRESS + 7
0001C7r 2  29 08            and #$08
0001C9r 2  F0 06            beq @exit
0001CBr 2  8D D0 FF         sta CF_ADDRESS
0001CEr 2  C8               iny
0001CFr 2  D0 F0            bne @loop3
0001D1r 2               @exit:
0001D1r 2  7A               ply
0001D2r 2  60               rts
0001D3r 2               
0001D3r 2               
0001D3r 2               
0001D3r 2               
0001D3r 2               
0001D3r 2               
0001D3r 2               cf_wait:
0001D3r 2                   ; phy
0001D3r 2                   ; ldy #7
0001D3r 2               @wait_loop:
0001D3r 2                   ; lda (CF_ADDRESS), y
0001D3r 2  AD D7 FF         lda CF_ADDRESS + 7
0001D6r 2  29 80            and #$80
0001D8r 2  D0 F9            bne @wait_loop
0001DAr 2                   ; ply
0001DAr 2  60               rts
0001DBr 2               
0001DBr 2               cf_set_lba:
0001DBr 2  AD rr rr         lda IO_SECTOR
0001DEr 2  8D D3 FF         sta CF_ADDRESS + 3
0001E1r 2  20 rr rr         jsr cf_wait
0001E4r 2  AD rr rr         lda IO_SECTOR + 1
0001E7r 2  8D D4 FF         sta CF_ADDRESS + 4
0001EAr 2  20 rr rr         jsr cf_wait
0001EDr 2  AD rr rr         lda IO_SECTOR + 2
0001F0r 2  8D D5 FF         sta CF_ADDRESS + 5
0001F3r 2  20 rr rr         jsr cf_wait
0001F6r 2  AD rr rr         lda IO_SECTOR + 3
0001F9r 2  29 0F            and #$0F
0001FBr 2  09 E0            ora #$E0
0001FDr 2  8D D6 FF         sta CF_ADDRESS + 6
000200r 2  20 rr rr         jsr cf_wait
000203r 2  60               rts
000204r 2               
000204r 2               cf_err:
000204r 2                   ; phy
000204r 2  20 rr rr         jsr cf_wait
000207r 2                   ; ldy #7
000207r 2                   ; lda (CF_ADDRESS), y
000207r 2  AD D7 FF         lda CF_ADDRESS + 7
00020Ar 2  29 01            and #$01
00020Cr 2  F0 05            beq @exit
00020Er 2               @exit_fail:
00020Er 2  A9 21            lda #'!'
000210r 2  20 rr rr         jsr kernel_putc
000213r 2               @exit:
000213r 2                   ; ply
000213r 2  60               rts
000214r 2               
000214r 2               
000214r 2  20 62 79 74  bytes_msg: .byte " bytes"
000218r 2  65 73        
00021Ar 2               cf_end:
00021Ar 2               
00021Ar 2               
00021Ar 1               io_read_sector_address = cf_read_sector
00021Ar 1               io_write_sector_address = cf_write_sector
00021Ar 1               .endif
00021Ar 1               .ifdef SD
00021Ar 1               
00021Ar 1               .include "drivers/sd.s"
00021Ar 1               io_read_sector_address = sd_read_sector
00021Ar 1               
00021Ar 1               .endif
00021Ar 1               
00021Ar 1               ; .if .def(SD)
00021Ar 1               ; .include "../../fat16.s"
00021Ar 1               ; .elseif .def(CF_ADDRESS)
00021Ar 1               ; .include "../../fat16.s"
00021Ar 1               ; .endif
00021Ar 1               
00021Ar 1               .include "../../utils.s"
00021Ar 2               ;  print a 16-bit integer
00021Ar 2               ; lsb in x, msb in a
00021Ar 2               
00021Ar 2               .segment "ZEROPAGE": zeropage
00000Br 2  xx xx        util_tmp: .res 2
00000Dr 2               
00000Dr 2               .segment "BSS"
00008Cr 2  xx xx        util_tmp_var: .res 2
00008Er 2  xx xx xx xx  pad: .res 4
000092r 2               
000092r 2               .segment "DATA"
00021Ar 2               
00021Ar 2               print16:
00021Ar 2  8D rr rr         sta acc+1
00021Dr 2  8E rr rr         stx acc
000220r 2               
000220r 2  A2 04            ldx #4
000222r 2               nextdig:
000222r 2  20 rr rr         jsr div
000225r 2  AD rr rr         lda ext
000228r 2  9D rr rr         sta num,x
00022Br 2  CA               dex
00022Cr 2  10 F4            bpl nextdig
00022Er 2               
00022Er 2               firstdig:
00022Er 2  E8               inx
00022Fr 2  E0 05            cpx #5
000231r 2  F0 17            beq print0
000233r 2  BD rr rr         lda num,x
000236r 2  F0 F6            beq firstdig
000238r 2               
000238r 2               ptnxtdig:
000238r 2  18               clc
000239r 2  69 30            adc #'0'
00023Br 2  20 rr rr         jsr kernel_putc
00023Er 2  E8               inx
00023Fr 2  E0 05            cpx #5
000241r 2  F0 06            beq pt16done
000243r 2  BD rr rr         lda num,x
000246r 2  4C rr rr         jmp ptnxtdig
000249r 2               
000249r 2               pt16done:
000249r 2  60               rts
00024Ar 2               
00024Ar 2               print0:
00024Ar 2  A9 30            lda #'0'
00024Cr 2  20 rr rr         jsr kernel_putc
00024Fr 2  60               rts
000250r 2               
000250r 2  00 00 00 00  num: .byte 0,0,0,0,0
000254r 2  00           
000255r 2               
000255r 2               ; 16/16-bit division, from the fridge
000255r 2               ; acc/aux -> acc, remainder in ext
000255r 2               div:
000255r 2  A9 00            lda #0
000257r 2  8D rr rr         sta ext+1
00025Ar 2  A0 10            ldy #$10
00025Cr 2               dloop:
00025Cr 2  0E rr rr         asl acc
00025Fr 2  2E rr rr         rol acc+1
000262r 2  2A               rol
000263r 2  2E rr rr         rol ext+1
000266r 2  48               pha
000267r 2  CD rr rr         cmp aux
00026Ar 2  AD rr rr         lda ext+1
00026Dr 2  ED rr rr         sbc aux+1
000270r 2  90 0B            bcc div2
000272r 2  8D rr rr         sta ext+1
000275r 2  68               pla
000276r 2  ED rr rr         sbc aux
000279r 2  48               pha
00027Ar 2  EE rr rr         inc acc
00027Dr 2               div2:
00027Dr 2  68               pla
00027Er 2  88               dey
00027Fr 2  D0 DB            bne dloop
000281r 2  8D rr rr         sta ext
000284r 2  60               rts
000285r 2               
000285r 2  00 00        acc: .word 0
000287r 2  0A 00        aux: .word 10 ; constant
000289r 2  00 00        ext: .word 0
00028Br 2               
00028Br 2               
00028Br 2               
00028Br 2               calculate_free_mem:
00028Br 2                   ; load dictionary address
00028Br 2                   ; fill with $55 until ram_end
00028Br 2                   ; read and check same
00028Br 2                   ; fill again with zeroes
00028Br 2               
00028Br 2  9C rr rr         stz util_tmp_var
00028Er 2  9C rr rr         stz util_tmp_var + 1
000291r 2               
000291r 2  A0 00            ldy #0
000293r 2               @loop:
000293r 2  A9 55            lda #$55
000295r 2  91 rr            sta (util_tmp), y        ; store to mem address
000297r 2  D1 rr            cmp (util_tmp), y        ; compare to what is now there
000299r 2  D0 19            bne @exit               ; no equal, stop couting and exit
00029Br 2  A9 00            lda #0                  ; zero the memory again
00029Dr 2  91 rr            sta (util_tmp), y
00029Fr 2  EE rr rr         inc util_tmp_var
0002A2r 2  D0 03            bne @incok
0002A4r 2  EE rr rr         inc util_tmp_var + 1
0002A7r 2               @incok:
0002A7r 2  C8               iny
0002A8r 2  D0 E9            bne @loop
0002AAr 2  A5 rr            lda util_tmp + 1
0002ACr 2  C9 80            cmp #>ram_end
0002AEr 2  B0 04            bcs @exit
0002B0r 2  E6 rr            inc util_tmp + 1
0002B2r 2  80 DF            bra @loop
0002B4r 2               @exit:
0002B4r 2  60               rts
0002B5r 2               
0002B5r 2               
0002B5r 2               
0002B5r 2               print_message:
0002B5r 2  68           	pla					; get return address from stack
0002B6r 2  85 rr        	sta util_tmp
0002B8r 2  68           	pla
0002B9r 2  85 rr        	sta util_tmp + 1
0002BBr 2               
0002BBr 2  80 03        	bra @inc
0002BDr 2               @print:
0002BDr 2  20 rr rr     	jsr kernel_putc
0002C0r 2               
0002C0r 2               @inc:
0002C0r 2  E6 rr        	inc util_tmp
0002C2r 2  D0 02        	bne @inced
0002C4r 2  E6 rr        	inc util_tmp + 1
0002C6r 2               @inced:
0002C6r 2  B2 rr        	lda (util_tmp)
0002C8r 2  D0 F3        	bne @print
0002CAr 2  A5 rr        	lda util_tmp + 1
0002CCr 2  48           	pha
0002CDr 2  A5 rr        	lda util_tmp
0002CFr 2  48           	pha
0002D0r 2               print_message_end:
0002D0r 2  60           	rts
0002D1r 2               
0002D1r 2               
0002D1r 2               print_zp_index_string:
0002D1r 2               @loop:
0002D1r 2  B1 rr            lda (util_tmp), y
0002D3r 2  F0 06            beq @exit
0002D5r 2  20 rr rr         jsr kernel_putc
0002D8r 2  C8               iny
0002D9r 2  D0 F6            bne @loop
0002DBr 2               @exit:
0002DBr 2  60               rts
0002DCr 2               
0002DCr 2               
0002DCr 2               output_ascii:
0002DCr 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
0002DCr 2  48               pha
0002DDr 2  4A               lsr             ; convert high nibble first
0002DEr 2  4A               lsr
0002DFr 2  4A               lsr
0002E0r 2  4A               lsr
0002E1r 2  20 rr rr         jsr output_ascii_nibble_to_ascii
0002E4r 2  68               pla
0002E5r 2               
0002E5r 2                   ; fall through to _nibble_to_ascii
0002E5r 2               
0002E5r 2               output_ascii_nibble_to_ascii:
0002E5r 2               ; """Private helper function for byte_to_ascii: Print lower nibble
0002E5r 2               ; of A and and EMIT it. This does the actual work.
0002E5r 2               ; """
0002E5r 2  29 0F            and #$0F
0002E7r 2  09 30            ora #'0'
0002E9r 2  C9 3A            cmp #$3A        ; '9+1
0002EBr 2  90 02            bcc @1
0002EDr 2  69 06            adc #$06
0002EFr 2               
0002EFr 2               @1:
0002EFr 2  20 rr rr         jsr kernel_putc
0002F2r 2  60               rts
0002F3r 2               
0002F3r 1               
0002F3r 1               ; .include "drivers/spi.s"
0002F3r 1               ; .include "drivers/sd.s"
0002F3r 1               ; .include "drivers/vga.s"
0002F3r 1               ; .include "drivers/fat32.s"
0002F3r 1               
0002F3r 1               ; .include "../../ed.s"
0002F3r 1               
0002F3r 1               .include "../../forth.s"
0002F3r 2               
0002F3r 2               
0002F3r 2               ; Definitions for Tali Forth 2
0002F3r 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0002F3r 2               ; First version: 01. Apr 2016 (Liara Forth)
0002F3r 2               ; This version: 29. Jan 2020
0002F3r 2               
0002F3r 2               ; This file is included by taliforth.asm. These are the general
0002F3r 2               ; definitions; platform-specific definitions such as the
0002F3r 2               ; memory map are kept in the platform folder.
0002F3r 2               
0002F3r 2               stack0 =    $0100   ; location of the stack
0002F3r 2               
0002F3r 2               ; User Variables:
0002F3r 2               ; Block variables
0002F3r 2               blk_offset =  0        ; BLK : UP + 0
0002F3r 2               scr_offset =  2        ; SCR : UP + 2
0002F3r 2               
0002F3r 2               ; Wordlists
0002F3r 2               current_offset =  4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
0002F3r 2               num_wordlists_offset =  5
0002F3r 2                                          ; #WORDLISTS (byte) : UP + 5
0002F3r 2               wordlists_offset =  6  ; WORDLISTS (cells) : UP + 6 to UP + 29
0002F3r 2                                          ;          (FORTH, EDITOR, ASSEMBLER, ROOT, +8 more)
0002F3r 2               num_order_offset =  30 ; #ORDER (byte) : UP + 30
0002F3r 2                                          ;          (Number of wordlists in search order)
0002F3r 2               search_order_offset =  31
0002F3r 2                                          ; SEARCH-ORDER (bytes) : UP + 31 to UP + 39
0002F3r 2                                          ; Allowing for 9 to keep offsets even.
0002F3r 2               max_wordlists =  12    ; Maximum number of wordlists supported
0002F3r 2                                          ; 4 Tali built-ins + 8 user wordlists
0002F3r 2               
0002F3r 2               ; Buffer variables
0002F3r 2               blkbuffer_offset =     40   ; Address of buffer
0002F3r 2               buffblocknum_offset =  42   ; Block number current in buffer
0002F3r 2               buffstatus_offset =    44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
0002F3r 2               
0002F3r 2               ; Block I/O vectors
0002F3r 2               blockread_offset =     46   ; Vector to block reading routine
0002F3r 2               blockwrite_offset =    48   ; Vector to block writing routine
0002F3r 2               
0002F3r 2               
0002F3r 2               ; ASCII CHARACTERS
0002F3r 2               AscCC =   $03  ; break (CTRL-c)
0002F3r 2               AscBELL = $07  ; bell sound
0002F3r 2               AscBS =   $08  ; backspace
0002F3r 2               AscLF =   $0a  ; line feed
0002F3r 2               AscCR =   $0d  ; carriage return
0002F3r 2               AscESC =  $1b  ; escape
0002F3r 2               AscSP =   $20  ; space
0002F3r 2               AscDEL =  $7f  ; delete (CTRL-h)
0002F3r 2               AscCP =   $10  ; CTRL-p (used to recall previous input history)
0002F3r 2               AscCN =   $0e  ; CTRL-n (used to recall next input history)
0002F3r 2               
0002F3r 2               ; DICTIONARY FLAGS
0002F3r 2               ; The first three bits are currently unused
0002F3r 2               CO = 1  ; Compile Only
0002F3r 2               AN = 2  ; Always Native Compile
0002F3r 2               IM = 4  ; Immediate Word
0002F3r 2               NN = 8  ; Never Native Compile
0002F3r 2               UF = 16 ; Includes Underflow Check (RESERVED)
0002F3r 2               HC = 32 ; Word has Code Field Area (CFA)
0002F3r 2               
0002F3r 2               
0002F3r 2               ; VARIOUS
0002F3r 2               MAX_LINE_LENGTH =   79      ; assumes 80 character lines
0002F3r 2               
0002F3r 2               ; END
0002F3r 2               
0002F3r 2               .segment "ZEROPAGE": zeropage
00000Dr 2               ; ZERO PAGE ADDRESSES/VARIABLES
00000Dr 2               
00000Dr 2               ; These are kept at the top of Zero Page, with the most important variables at
00000Dr 2               ; the top because the Data Stack grows towards this area from dsp0: If there is
00000Dr 2               ; an overflow, the lower, less important variables will be clobbered first,
00000Dr 2               ; giving the system a chance to recover. In other words, they are part of the
00000Dr 2               ; floodplain.
00000Dr 2               
00000Dr 2               ; The four variables insrc, cib, ciblen, and toin must stay together in this
00000Dr 2               ; sequence for the words INPUT>R and R>INPUT to work correctly.
00000Dr 2               
00000Dr 2  xx xx        cp: .res 2   ; Compiler Pointer
00000Fr 2  xx xx        dp: .res 2   ; Dictionary Pointer
000011r 2  xx xx        workword: .res 2   ; nt (not xt!) of word being compiled, except in
000013r 2                                          ; a :NONAME declared word (see status)
000013r 2  xx xx        insrc: .res 2   ; input Source for SOURCE-ID
000015r 2  xx xx        cib: .res 2   ; address of current input buffer
000017r 2  xx xx        ciblen: .res 2  ; length of current input buffer
000019r 2  xx xx        toin: .res 2  ; pointer to CIB (>IN in Forth)
00001Br 2  xx xx        ip: .res 2  ; Instruction Pointer (current xt)
00001Dr 2  xx xx        output: .res 2  ; vector for EMIT
00001Fr 2  xx xx        input: .res 2  ; vector for KEY
000021r 2  xx xx        havekey: .res 2  ; vector for KEY?
000023r 2  xx xx        state: .res 2  ; STATE: -1 compile, 0 interpret
000025r 2  xx xx        base: .res 2  ; number radix, default decimal
000027r 2  xx xx        nc_limit: .res 2  ; limit for Native Compile size
000029r 2  xx xx        uf_strip: .res 2  ; flag to strip underflow detection code
00002Br 2  xx xx        up: .res 2  ; User Pointer (Address of user variables)
00002Dr 2  xx xx        status: .res 2  ; internal status information
00002Fr 2                                          ; (used by : :NONAME ; ACCEPT)
00002Fr 2                                          ; Bit 7 = Redefined word message postpone
00002Fr 2                                          ;         When set before calling CREATE, it will
00002Fr 2                                          ;         not print the "redefined xxxx" message if
00002Fr 2                                          ;         the word exists. Instead, this bit will
00002Fr 2                                          ;         be reused and after CREATE has run, it will
00002Fr 2                                          ;         be set if the word was redefined and 0 if
00002Fr 2                                          ;         not. This bit should be 0 when not in use.
00002Fr 2                                          ; Bit 6 = 1 for normal ":" definitions
00002Fr 2                                          ;         WORKWORD contains nt of word being compiled
00002Fr 2                                          ;       = 0 for :NONAME definitions
00002Fr 2                                          ;         WORKWORD contains xt of word being compiled
00002Fr 2                                          ; Bit 5 = 1 for NUMBER returning a double word
00002Fr 2                                          ;       = 0 for NUMBER returning a single word
00002Fr 2                                          ; Bit 3 = 1 makes CTRL-n recall current history
00002Fr 2                                          ;       = 0 CTRL-n recalls previous history
00002Fr 2                                          ; Bit 2 = Current history buffer msb
00002Fr 2                                          ; Bit 1 = Current history buffer (0-7, wraps)
00002Fr 2                                          ; Bit 0 = Current history buffer lsb
00002Fr 2                                          ; status+1 is used by ACCEPT to hold history lengths.
00002Fr 2  xx xx        tmpbranch: .res 2  ; temporary storage for 0BRANCH, BRANCH only
000031r 2  xx xx        tmp1: .res 2  ; temporary storage
000033r 2  xx xx        tmp2: .res 2  ; temporary storage
000035r 2  xx xx        tmp3: .res 2  ; temporary storage (especially for print)
000037r 2  xx xx        tmpdsp: .res 2  ; temporary DSP (X) storage (two bytes)
000039r 2  xx xx        tmptos: .res 2  ; temporary TOS storage
00003Br 2  xx xx        editor1: .res 2  ; temporary for editors
00003Dr 2  xx xx        editor2: .res 2  ; temporary for editors
00003Fr 2  xx xx        editor3: .res 2  ; temporary for editors
000041r 2  xx xx        tohold: .res 2  ; pointer for formatted output
000043r 2  xx xx xx xx  scratch: .res 8  ; 8 byte scratchpad (see UM/MOD)
000047r 2  xx xx xx xx  
00004Br 2               
00004Br 2               .segment "DATASTACK": zeropage
000000r 2  xx xx xx xx  dsp_start: .res 127 ; reserve 128 bytes for data stack (64 16 bit cells)
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
00007Fr 2               dsp0:          ; first data stack location. Data stack grows down
00007Fr 2               rsp0:     ; starting stack pointer
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               
00007Fr 2               .segment "BSS"
000092r 2  xx xx xx xx  hist_buff: .res $400
000096r 2  xx xx xx xx  
00009Ar 2  xx xx xx xx  
000492r 2  xx xx xx xx  buffer0: .res $100
000496r 2  xx xx xx xx  
00049Ar 2  xx xx xx xx  
000592r 2               
000592r 2               .segment "DICTIONARY"   ; the dictionary gets its own segment so that it uses all the space left in RAM
000000r 2  xx xx xx xx  dictionary: .res $1000
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
001000r 2               
001000r 2               cp_end = $7FFF          ; the dictionary ends at RAM end (everything else is before)
001000r 2               
001000r 2               cp0 = dictionary
001000r 2               bsize =     $ff
001000r 2               padoffset = $ff
001000r 2               
001000r 2               
001000r 2               
001000r 2               .segment "DATA"
0002F3r 2               
0002F3r 2               
0002F3r 2               
0002F3r 2               forth:
0002F3r 2                   .include "native_words.s"     ; Native Forth words. Starts with COLD
0002F3r 3               ; Low-level Forth word routines
0002F3r 3               ; Tali Forth 2 for the 65c02
0002F3r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0002F3r 3               ; First version: 19. Jan 2014
0002F3r 3               ; This version: 03. Jan 2018
0002F3r 3               
0002F3r 3               ; This list is ordered alphabetically by the names of the words, not their
0002F3r 3               ; strings (so "!" is sorted as "STORE"). However, we start off with COLD,
0002F3r 3               ; ABORT, and QUIT as the natural start sequence. Each word has two special
0002F3r 3               ; status lines that begins with "; ## ", which allows auto-generation of the
0002F3r 3               ; WORDLIST.md file and other entries in the docs folder. Status entries are:
0002F3r 3               
0002F3r 3               ;       TBA --> fragment --> coded --> tested --> auto
0002F3r 3               
0002F3r 3               ; "Auto" means that the word is automatically tested by the test suite (good),
0002F3r 3               ; "tested" means that it was tested by hand in some way (okay), "coded" means
0002F3r 3               ; it hasn't been tested at all (bad). See the test suite for more details.
0002F3r 3               
0002F3r 3               ; ## COLD ( -- ) "Reset the Forth system"
0002F3r 3               ; ## "cold"  tested  Tali Forth
0002F3r 3               ;       """Reset the Forth system. Does not restart the kernel,
0002F3r 3               ;       use the 65c02 reset for that. Flows into ABORT.
0002F3r 3               ;       """
0002F3r 3               xt_cold:
0002F3r 3  D8                           cld
0002F4r 3               
0002F4r 3                               ; Set the OUTPUT vector to the default kernel_putc
0002F4r 3                               ; We do this really early so we can print error messages
0002F4r 3                               ; during debugging
0002F4r 3  A9 rr                        lda #<kernel_putc
0002F6r 3  85 rr                        sta output
0002F8r 3  A9 rr                        lda #>kernel_putc
0002FAr 3  85 rr                        sta output+1
0002FCr 3               
0002FCr 3                               ; Load all of the important zero page variables from ROM
0002FCr 3  A2 21                        ldx #cold_zp_table_end-cold_zp_table-1
0002FEr 3               
0002FEr 3               @load_zp_loop:
0002FEr 3                               ; This loop loads them back to front. We can use X here
0002FEr 3                               ; because Tali hasn't started using the stack yet.
0002FEr 3  BD rr rr                     lda cold_zp_table,x
000301r 3  95 rr                        sta cp,x
000303r 3  CA                           dex
000304r 3  D0 F8                        bne @load_zp_loop
000306r 3               
000306r 3                               ; Copy the 0th element.
000306r 3  AD rr rr                     lda cold_zp_table
000309r 3  85 rr                        sta cp
00030Br 3                               ; Initialize 65c02 stack (Return Stack)
00030Br 3  A2 rr                        ldx #rsp0
00030Dr 3  9A                           txs
00030Er 3               
00030Er 3                               ; Clear Data Stack. This is repeated in ABORT, but this way we
00030Er 3                               ; can load high-level words with EVALUATE
00030Er 3  A2 rr                        ldx #dsp0
000310r 3               
000310r 3               
000310r 3                               ; Initialize the user variables.
000310r 3  A0 31                        ldy #cold_user_table_end-cold_user_table-1
000312r 3  A9 00                        lda #0
000314r 3               
000314r 3               @load_user_vars_loop:
000314r 3                               ; Like the zero page variables, these are initialized
000314r 3                               ; back to front.
000314r 3  B9 rr rr                     lda cold_user_table,y
000317r 3  91 rr                        sta (up),y
000319r 3  88                           dey
00031Ar 3  D0 F8                        bne @load_user_vars_loop
00031Cr 3               
00031Cr 3                               ; Copy the 0th element.
00031Cr 3  AD rr rr                     lda cold_user_table
00031Fr 3  92 rr                        sta (up)
000321r 3  20 rr rr                     jsr xt_cr
000324r 3               
000324r 3                               ; Define high-level words in forth_words.asm via EVALUATE. If
000324r 3                               ; you do not have any high-level words, this part can be
000324r 3                               ; commented out.
000324r 3  CA                           dex
000325r 3  CA                           dex
000326r 3  CA                           dex
000327r 3  CA                           dex
000328r 3               
000328r 3               
000328r 3                               ; start address goes NOS
000328r 3  A9 rr                        lda #<forth_words_start
00032Ar 3  95 02                        sta 2,x
00032Cr 3  A9 rr                        lda #>forth_words_start
00032Er 3  95 03                        sta 3,x
000330r 3               
000330r 3                               ; length goes TOS
000330r 3  A9 rr                        lda #<forth_words_end
000332r 3  38                           sec
000333r 3  E9 rr                        sbc #<forth_words_start
000335r 3  95 00                        sta 0,x
000337r 3               
000337r 3  A9 rr                        lda #>forth_words_end
000339r 3  E9 rr                        sbc #>forth_words_start
00033Br 3  95 01                        sta 1,x
00033Dr 3               
00033Dr 3               
00033Dr 3  20 rr rr                     jsr xt_evaluate
000340r 3               
000340r 3                               ; Now define any user words via EVALUATE. If you do not have
000340r 3                               ; any user-defined words, this part can be commented out as
000340r 3                               ; well.
000340r 3  CA                           dex
000341r 3  CA                           dex
000342r 3  CA                           dex
000343r 3  CA                           dex
000344r 3               
000344r 3               
000344r 3                               ; start address goes NOS
000344r 3  A9 rr                        lda #<user_words_start
000346r 3  95 02                        sta 2,x
000348r 3  A9 rr                        lda #>user_words_start
00034Ar 3  95 03                        sta 3,x
00034Cr 3               
00034Cr 3                               ; length goes TOS
00034Cr 3  A9 rr                        lda #<user_words_end
00034Er 3  38                           sec
00034Fr 3  E9 rr                        sbc #<user_words_start
000351r 3  95 00                        sta 0,x
000353r 3               
000353r 3  A9 rr                        lda #>user_words_end
000355r 3  E9 rr                        sbc #>user_words_start
000357r 3  95 01                        sta 1,x
000359r 3               
000359r 3  20 rr rr                     jsr xt_evaluate
00035Cr 3               
00035Cr 3                               ; Initialize all of the history buffers by putting a zero in
00035Cr 3                               ; each length byte.
00035Cr 3  9C rr rr                     stz hist_buff
00035Fr 3  9C rr rr                     stz hist_buff+$80
000362r 3  9C rr rr                     stz hist_buff+$100
000365r 3  9C rr rr                     stz hist_buff+$180
000368r 3  9C rr rr                     stz hist_buff+$200
00036Br 3  9C rr rr                     stz hist_buff+$280
00036Er 3  9C rr rr                     stz hist_buff+$300
000371r 3  9C rr rr                     stz hist_buff+$380
000374r 3               
000374r 3               
000374r 3                               ; fall through to ABORT
000374r 3               
000374r 3               
000374r 3               ; ## ABORT ( -- ) "Reset the Data Stack and restart the CLI"
000374r 3               ; ## "abort"  tested  ANS core
000374r 3                       ; """https://forth-standard.org/standard/core/ABORT
000374r 3                       ; Clear Data Stack and continue into QUIT. We can jump here via
000374r 3                       ; subroutine if we want to because we are going to reset the 65c02's
000374r 3                       ; stack pointer (the Return Stack) anyway during QUIT. Note we don't
000374r 3                       ; actually delete the stuff on the Data Stack.
000374r 3                       ; """
000374r 3               xt_abort:
000374r 3  A2 rr                        ldx #dsp0
000376r 3               
000376r 3                               ; fall through to QUIT
000376r 3               
000376r 3               
000376r 3               ; ## QUIT ( -- ) "Reset the input and get new input"
000376r 3               ; ## "quit"  tested  ANS core
000376r 3                       ; """https://forth-standard.org/standard/core/QUIT
000376r 3                       ; Rest the input and start command loop
000376r 3                       ; """
000376r 3               
000376r 3               xt_quit:
000376r 3                               ; Clear the Return Stack. This is a little screwed up
000376r 3                               ; because the 65c02 can only set the Return Stack via X,
000376r 3                               ; which is our Data Stack pointer. The ANS specification
000376r 3                               ; demands, however, that ABORT reset the Data Stack pointer
000376r 3  8A                           txa             ; Save the DSP that we just defined
000377r 3  A2 rr                        ldx #rsp0
000379r 3  9A                           txs
00037Ar 3  AA                           tax             ; Restore the DSP. Dude, seriously.
00037Br 3               
00037Br 3                               ; make sure instruction pointer is empty
00037Br 3  64 rr                        stz ip
00037Dr 3  64 rr                        stz ip+1
00037Fr 3               
00037Fr 3                               ; SOURCE-ID is zero (keyboard input)
00037Fr 3  64 rr                        stz insrc
000381r 3  64 rr                        stz insrc+1
000383r 3               
000383r 3                               ; STATE is zero (interpret, not compile)
000383r 3  64 rr                        stz state
000385r 3  64 rr                        stz state+1
000387r 3               @get_line:
000387r 3  A9 rr                        lda #<buffer0   ; input buffer, this is paranoid
000389r 3  85 rr                        sta cib
00038Br 3  A9 rr                        lda #>buffer0
00038Dr 3  85 rr                        sta cib+1
00038Fr 3               
00038Fr 3                               ; Size of current input buffer (CIB) is zero
00038Fr 3  64 rr                        stz ciblen
000391r 3  64 rr                        stz ciblen+1
000393r 3               
000393r 3                               ; Accept a line from the current import source. This is how
000393r 3                               ; modern Forths to it.
000393r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
000396r 3               
000396r 3                               ; Test flag: LSB of TOS
000396r 3  B5 00                        lda 0,x
000398r 3  D0 05                        bne @success
00039Ar 3               
00039Ar 3                               ; If REFILL returned a FALSE flag, something went wrong and we
00039Ar 3                               ; need to print an error message and reset the machine. We
00039Ar 3                               ; don't need to save TOS because we're going to clobber it
00039Ar 3                               ; anyway when we go back to ABORT.
00039Ar 3  A9 06                        lda #err_refill
00039Cr 3  4C rr rr                     jmp error
00039Fr 3               
00039Fr 3               @success:
00039Fr 3                               ; Assume we have successfully accepted a string of input from
00039Fr 3                               ; a source, with address cib and length of input in ciblen. We
00039Fr 3                               ; arrive here still with the TRUE flag from REFILL as TOS
00039Fr 3  E8                           inx                     ; drop
0003A0r 3  E8                           inx
0003A1r 3               
0003A1r 3                               ; Main compile/execute routine
0003A1r 3  20 rr rr                     jsr interpret
0003A4r 3               
0003A4r 3                               ; Test for Data Stack underflow. Tali Forth does not check for
0003A4r 3                               ; overflow because it is so rare
0003A4r 3  E0 rr                        cpx #dsp0
0003A6r 3  F0 05                        beq @stack_ok
0003A8r 3  90 03                        bcc @stack_ok           ; DSP must always be smaller than DSP0
0003AAr 3               
0003AAr 3  4C rr rr                     jmp underflow_error
0003ADr 3               
0003ADr 3               @stack_ok:
0003ADr 3                               ; Display system prompt if all went well. If we're interpreting,
0003ADr 3                               ; this is " ok", if we're compiling, it's " compiled". Note
0003ADr 3                               ; space at beginning of the string.
0003ADr 3  A5 rr                        lda state
0003AFr 3  F0 02                        beq @print
0003B1r 3               
0003B1r 3  A9 01                        lda #1                  ; number for "compile" string
0003B3r 3               @print:
0003B3r 3  20 rr rr                     jsr print_string
0003B6r 3               
0003B6r 3                               ; Awesome line, everybody! Now get the next one.
0003B6r 3  80 CF                        bra @get_line
0003B8r 3               
0003B8r 3               z_cold:
0003B8r 3               z_abort:
0003B8r 3               z_quit:         ; no RTS required
0003B8r 3               
0003B8r 3               
0003B8r 3               
0003B8r 3               ; This table holds all of the initial values for the variables in zero page.
0003B8r 3               ; This table is used by COLD.
0003B8r 3               cold_zp_table:
0003B8r 3  rr rr                .word cp0+256+1024      ; cp moved to make room for user vars and
0003BAr 3                                               ; block buffer
0003BAr 3  rr rr                .word dictionary_start  ; dp
0003BCr 3  00 00                .word 0                 ; workword
0003BEr 3  00 00                .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
0003C0r 3  rr rr                .word buffer0           ; cib
0003C2r 3  00 00                .word 0                 ; ciblen
0003C4r 3  00 00                .word 0                 ; toin
0003C6r 3  00 00                .word 0                 ; ip
0003C8r 3  rr rr                .word kernel_putc       ; output
0003CAr 3  rr rr                .word kernel_getc       ; input
0003CCr 3  00 00                .word 0                 ; havekey
0003CEr 3  00 00                .word 0                 ; state (0 = interpret)
0003D0r 3  0A 00                .word 10                ; base
0003D2r 3  14 00                .word 20                ; nc-limit
0003D4r 3  00 00                .word 0                 ; uf_strip (off by default)
0003D6r 3  rr rr                .word cp0               ; up (user vars put right at beginning of
0003D8r 3                                               ; available RAM)
0003D8r 3  00 00                .word 0                 ; status
0003DAr 3               cold_zp_table_end:
0003DAr 3               
0003DAr 3               ; No further ZP variables are initialized. The variables past this point are
0003DAr 3               ; all temporaries.
0003DAr 3               
0003DAr 3               ; This table holds the inital values for the user variables. This table is
0003DAr 3               ; used by COLD.
0003DAr 3               cold_user_table:
0003DAr 3  00 00                .word 0                         ; BLK
0003DCr 3  00 00                .word 0                         ; SCR
0003DEr 3  00                   .byte 0                         ; CURRENT = FORTH-WORDLIST
0003DFr 3  04                   .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
0003E0r 3  rr rr                .word dictionary_start          ; FORTH-WORDLIST
0003E2r 3  rr rr                .word editor_dictionary_start   ; EDITOR-WORDLIST
0003E4r 3               .ifdef TALI_OPTIONAL_ASSEMBLER
0003E4r 3  rr rr                .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
0003E6r 3               .else
0003E6r 3                       .word 0
0003E6r 3               .endif
0003E6r 3  rr rr                .word root_dictionary_start     ; ROOT-WORDLIST
0003E8r 3  00 00 00 00          .word 0,0,0,0,0,0,0,0           ; User wordlists
0003ECr 3  00 00 00 00  
0003F0r 3  00 00 00 00  
0003F8r 3  01                   .byte 1                         ; #ORDER
0003F9r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0         ; search-order
0003FDr 3  00 00 00 00  
000401r 3  00           
000402r 3  rr rr                .word cp0+256                   ; Address of buffer (right after USER vars)
000404r 3  00 00                .word 0                         ; block in buffer
000406r 3  00 00                .word 0                         ; buffer status (not in use)
000408r 3  rr rr                .word xt_block_word_error       ; block-read vector
00040Ar 3  rr rr                .word xt_block_word_error       ; block-write vector
00040Cr 3               cold_user_table_end:
00040Cr 3               
00040Cr 3               
00040Cr 3               ; ## ABORT_QUOTE ( "string" -- ) "If flag TOS is true, ABORT with message"
00040Cr 3               ; ## "abort""  tested  ANS core
00040Cr 3                       ; """https://forth-standard.org/standard/core/ABORTq
00040Cr 3                       ; Abort and print a string.
00040Cr 3                       ; """
00040Cr 3               
00040Cr 3               xt_abort_quote:
00040Cr 3                               ; save the string
00040Cr 3  20 rr rr                     jsr xt_s_quote          ; S"
00040Fr 3               
00040Fr 3                               ; compile run-time part
00040Fr 3  A0 rr                        ldy #>abort_quote_runtime
000411r 3  A9 rr                        lda #<abort_quote_runtime
000413r 3  20 rr rr                     jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
000416r 3               
000416r 3  60           z_abort_quote:  rts
000417r 3               
000417r 3               
000417r 3               abort_quote_runtime:
000417r 3                       ; """Runtime aspect of ABORT_QUOTE"""
000417r 3               
000417r 3                               ; We arrive here with ( f addr u )
000417r 3  B5 04                        lda 4,x
000419r 3  15 05                        ora 5,x
00041Br 3  F0 09                        beq @done       ; if FALSE, we're done
00041Dr 3               
00041Dr 3                               ; We're true, so print string and ABORT. We follow Gforth
00041Dr 3                               ; in going to a new line after the string
00041Dr 3  20 rr rr                     jsr xt_type
000420r 3  20 rr rr                     jsr xt_cr
000423r 3  4C rr rr                     jmp xt_abort    ; not JSR, so never come back
000426r 3               @done:
000426r 3                               ; Drop three entries from the Data Stack
000426r 3  8A                           txa
000427r 3  18                           clc
000428r 3  69 06                        adc #6
00042Ar 3  AA                           tax
00042Br 3               
00042Br 3  60                           rts
00042Cr 3               
00042Cr 3               
00042Cr 3               
00042Cr 3               ; ## ABS ( n -- u ) "Return absolute value of a number"
00042Cr 3               ; ## "abs"  auto  ANS core
00042Cr 3                       ; """https://forth-standard.org/standard/core/ABS
00042Cr 3                       ; Return the absolute value of a number.
00042Cr 3                       ; """
00042Cr 3               
00042Cr 3               xt_abs:
00042Cr 3  20 rr rr                     jsr underflow_1
00042Fr 3               
00042Fr 3  B5 01                        lda 1,x
000431r 3  10 0D                        bpl @done       ; positive number, easy money!
000433r 3               
000433r 3                               ; negative: calculate 0 - n
000433r 3  38                           sec
000434r 3  A9 00                        lda #0
000436r 3  F5 00                        sbc 0,x         ; LSB
000438r 3  95 00                        sta 0,x
00043Ar 3               
00043Ar 3  A9 00                        lda #0          ; MSB
00043Cr 3  F5 01                        sbc 1,x
00043Er 3  95 01                        sta 1,x
000440r 3               
000440r 3               @done:
000440r 3  60           z_abs:          rts
000441r 3               
000441r 3               
000441r 3               
000441r 3               ; ## ACCEPT ( addr n -- n ) "Receive a string of characters from the keyboard"
000441r 3               ; ## "accept"  auto  ANS core
000441r 3                       ; """https://forth-standard.org/standard/core/ACCEPT
000441r 3                       ; Receive a string of at most n1 characters, placing them at
000441r 3                       ; addr. Return the actual number of characters as n2. Characters
000441r 3                       ; are echoed as they are received. ACCEPT is called by REFILL in
000441r 3                       ; modern Forths.
000441r 3                       ; """
000441r 3               
000441r 3               xt_accept:
000441r 3  20 rr rr                     jsr underflow_2
000444r 3               
000444r 3                               ; Abort if we were asked to receive 0 chars
000444r 3  B5 00                        lda 0,x
000446r 3  15 01                        ora 1,x
000448r 3  D0 09                        bne @not_zero
00044Ar 3               
00044Ar 3  E8                           inx
00044Br 3  E8                           inx
00044Cr 3  74 00                        stz 0,x
00044Er 3  74 01                        stz 1,x
000450r 3               
000450r 3  4C rr rr                     jmp accept_done
000453r 3               
000453r 3               @not_zero:
000453r 3  B5 00                        lda 0,x         ; number of chars to get in tmp2 ...
000455r 3  85 rr                        sta tmp2
000457r 3  64 rr                        stz tmp2+1      ; ... but we only accept max 255 chars
000459r 3               
000459r 3  B5 02                        lda 2,x         ; address of buffer is NOS, to tmp1
00045Br 3  85 rr                        sta tmp1
00045Dr 3  B5 03                        lda 3,x
00045Fr 3  85 rr                        sta tmp1+1
000461r 3               
000461r 3  E8                           inx
000462r 3  E8                           inx
000463r 3               
000463r 3  A0 00                        ldy #0
000465r 3               
000465r 3                               ; Select the next history buffer. Clear bit 3 first (so overflow
000465r 3                               ; from bit 2 to 3 is OK)
000465r 3  A5 rr                        lda status
000467r 3  29 F7                        and #$f7
000469r 3               
000469r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
000469r 3  1A                           inc
00046Ar 3               
00046Ar 3                               ; Set bit 3 for detecting if CTRL-n has been pressed the first
00046Ar 3                               ; time. This bit will be cleared on the first CTRL-n or CTRL-p
00046Ar 3                               ; received and won't be used to calculate the history buffer
00046Ar 3                               ; offset.
00046Ar 3  09 08                        ora #$08
00046Cr 3  85 rr                        sta status
00046Er 3               
00046Er 3               accept_loop:
00046Er 3                               ; Out of the box, py65mon catches some CTRL sequences such as
00046Er 3                               ; CTRL-c. We also don't need to check for CTRL-l because a
00046Er 3                               ; vt100 terminal clears the screen automatically.
00046Er 3               
00046Er 3                               ; This is the internal version of KEY without all the mucking
00046Er 3                               ; about with the Data Stack while still using the input vector
00046Er 3  20 rr rr                     jsr key_a
000471r 3               
000471r 3                               ; We quit on both line feed and carriage return
000471r 3  C9 0A                        cmp #AscLF
000473r 3  F0 20                        beq @eol
000475r 3  C9 0D                        cmp #AscCR
000477r 3  F0 1C                        beq @eol
000479r 3               
000479r 3                               ; BACKSPACE and DEL do the same thing for the moment
000479r 3  C9 08                        cmp #AscBS
00047Br 3  F0 22                        beq @backspace
00047Dr 3  C9 7F                        cmp #AscDEL     ; (CTRL-h)
00047Fr 3  F0 1E                        beq @backspace
000481r 3               
000481r 3                               ; Check for CTRL-p and CTRL-n to recall input history
000481r 3  C9 10                        cmp #AscCP
000483r 3  F0 36                        beq @ctrl_p
000485r 3  C9 0E                        cmp #AscCN
000487r 3  F0 44                        beq @ctrl_n
000489r 3               
000489r 3                               ; That's enough for now. Save and echo character.
000489r 3  91 rr                        sta (tmp1),y
00048Br 3  C8                           iny
00048Cr 3               
00048Cr 3                               ; EMIT_A sidesteps all the fooling around with the Data Stack
00048Cr 3  20 rr rr                     jsr emit_a
00048Fr 3               
00048Fr 3  C4 rr                        cpy tmp2        ; reached character limit?
000491r 3  D0 DB                        bne accept_loop       ; fall through if buffer limit reached
000493r 3  80 03                        bra @buffer_full
000495r 3               
000495r 3               @eol:
000495r 3  20 rr rr                     jsr xt_space    ; print final space
000498r 3               
000498r 3               @buffer_full:
000498r 3                               ; REFILL updates ciblen and toin, we don't need to do it here
000498r 3  94 00                        sty 0,x         ; Y contains number of chars accepted already
00049Ar 3  74 01                        stz 1,x         ; we only accept 256 chars
00049Cr 3               
00049Cr 3  4C rr rr                     jmp accept_done
00049Fr 3               
00049Fr 3               @backspace:
00049Fr 3                               ; Handle backspace and delete kex, which currently do the same
00049Fr 3                               ; thing
00049Fr 3  C0 00                        cpy #0          ; buffer empty?
0004A1r 3  D0 06                        bne @1
0004A3r 3               
0004A3r 3  A9 07                        lda #AscBELL    ; complain and don't delete beyond the start of line
0004A5r 3  20 rr rr                     jsr emit_a
0004A8r 3  C8                           iny
0004A9r 3               @1:
0004A9r 3  88                           dey
0004AAr 3  A9 08                        lda #AscBS      ; move back one
0004ACr 3  20 rr rr                     jsr emit_a
0004AFr 3  A9 20                        lda #AscSP      ; print a space (rubout)
0004B1r 3  20 rr rr                     jsr emit_a
0004B4r 3  A9 08                        lda #AscBS      ; move back over space
0004B6r 3  20 rr rr                     jsr emit_a
0004B9r 3               
0004B9r 3  80 B3                        bra accept_loop
0004BBr 3               
0004BBr 3               @ctrl_p:
0004BBr 3                               ; CTRL-p was pressed. Recall the previous input buffer.
0004BBr 3               
0004BBr 3                               ; Select the previous buffer
0004BBr 3  A5 rr                        lda status
0004BDr 3               
0004BDr 3                               ; Check for 0 (need to wrap back to 7)
0004BDr 3  29 07                        and #7
0004BFr 3  D0 08                        bne @ctrl_p_dec
0004C1r 3               
0004C1r 3                               ; We need to wrap back to 7.
0004C1r 3  A5 rr                        lda status
0004C3r 3  09 07                        ora #7
0004C5r 3  85 rr                        sta status
0004C7r 3  80 11                        bra @recall_history
0004C9r 3               
0004C9r 3               @ctrl_p_dec:
0004C9r 3                               ; It's safe to decrement the buffer index directly.
0004C9r 3  C6 rr                        dec status
0004CBr 3  80 0D                        bra @recall_history
0004CDr 3               
0004CDr 3               @ctrl_n:
0004CDr 3                               ; CTRL-n was pressed. Recall the next input buffer. Select
0004CDr 3                               ; the next buffer Check bit 3. If it's set, this is the first
0004CDr 3                               ; time CTRL-n has been pressed and we should select the CURRENT
0004CDr 3                               ; history buffer.
0004CDr 3  A9 08                        lda #$8
0004CFr 3  24 rr                        bit status
0004D1r 3  D0 07                        bne @recall_history
0004D3r 3               
0004D3r 3                               ; This isn't the first time CTRL-n has been pressed, select the
0004D3r 3                               ; next history buffer. Clear bit 3 first (so overflow is OK)
0004D3r 3  A5 rr                        lda status
0004D5r 3  29 F7                        and #$f7
0004D7r 3               
0004D7r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
0004D7r 3  1A                           inc
0004D8r 3               
0004D8r 3                               ; Bit 3 (if it got set by going from buffer 7 to 0) will
0004D8r 3                               ; be cleared below.
0004D8r 3  85 rr                        sta status
0004DAr 3               
0004DAr 3                               ; Falls through to @recall_history
0004DAr 3               
0004DAr 3               @recall_history:
0004DAr 3                               ; Clear bit 3 (first time ctrl-n recall) bit in status
0004DAr 3  A9 08                        lda #%00001000
0004DCr 3  14 rr                        trb status
0004DEr 3               
0004DEr 3  20 rr rr                     jsr total_recall
0004E1r 3               
0004E1r 3                               ; tmp3 now has the address of the previous history buffer.
0004E1r 3                               ; First byte of buffer is length. Clear the line by sending
0004E1r 3                               ; CR, Y spaces, then CR.
0004E1r 3  A9 0D                        lda #AscCR
0004E3r 3  20 rr rr                     jsr emit_a
0004E6r 3               
0004E6r 3               input_clear:
0004E6r 3  C0 00                        cpy #0
0004E8r 3  F0 08                        beq input_cleared
0004EAr 3               
0004EAr 3  A9 20                        lda #AscSP
0004ECr 3  20 rr rr                     jsr emit_a
0004EFr 3  88                           dey
0004F0r 3  80 F4                        bra input_clear
0004F2r 3               
0004F2r 3               input_cleared:
0004F2r 3  A9 0D                        lda #AscCR
0004F4r 3  20 rr rr                     jsr emit_a
0004F7r 3               
0004F7r 3                               ; Save the history length byte into histinfo+1
0004F7r 3                               ; ldy #0        ; Y is already 0 by clearing the line.
0004F7r 3  B1 rr                        lda (tmp3),y
0004F9r 3  85 rr                        sta status+1
0004FBr 3               
0004FBr 3                               ; Increment the tmp3 pointer so we can use ,y addressing
0004FBr 3                               ; on both tmp1 (the input buffer) and tmp3 (the history
0004FBr 3                               ; buffer)
0004FBr 3  E6 rr                        inc tmp3
0004FDr 3  D0 02                        bne @2           ; Increment the upper byte on carry.
0004FFr 3  E6 rr                        inc tmp3+1
000501r 3               @2:
000501r 3                               ; Copy the history buffer into the input buffer,
000501r 3                               ; sending the characters to the output as we go.
000501r 3  A9 0D                        lda #AscCR
000503r 3  20 rr rr                     jsr emit_a
000506r 3               
000506r 3               @history_loop:
000506r 3                               ; See if we have reached the end of the history buffer.
000506r 3  C4 rr                        cpy status+1
000508r 3  D0 03                        bne @3
00050Ar 3  4C rr rr                     jmp accept_loop       ; Needs a long jump
00050Dr 3               @3:
00050Dr 3                               ; See if we have reached the end of the input buffer.
00050Dr 3                               ; (only comparing to lower byte as we currently limit
00050Dr 3                               ; to 255 characters max)
00050Dr 3  C4 rr                        cpy tmp2
00050Fr 3  F0 0A                        beq @hist_filled_buffer
000511r 3               
000511r 3                               ; Copy a character and echo.
000511r 3  B1 rr                        lda (tmp3),y
000513r 3  91 rr                        sta (tmp1),y
000515r 3  20 rr rr                     jsr emit_a
000518r 3               
000518r 3                               ; Move to the next character.
000518r 3  C8                           iny
000519r 3  80 EB                        bra @history_loop
00051Br 3               
00051Br 3               @hist_filled_buffer:
00051Br 3                               ; We don't want a history recall to EOL our buffer,
00051Br 3                               ; so back up one character and return to editing.
00051Br 3  88                           dey
00051Cr 3  4C rr rr                     jmp accept_loop
00051Fr 3               accept_done:
00051Fr 3               @done:
00051Fr 3                               ; Copy the input buffer into the currently
00051Fr 3                               ; selected history buffer.
00051Fr 3  20 rr rr                     jsr total_recall
000522r 3  85 rr                        sta status+1
000524r 3               
000524r 3                               ; Also save it in the first buffer byte.
000524r 3  A0 00                        ldy #0
000526r 3  91 rr                        sta (tmp3),y
000528r 3               
000528r 3                               ; Move path the count to the data bytes
000528r 3  E6 rr                        inc tmp3
00052Ar 3  D0 02                        bne @4           ; Increment the upper byte on carry.
00052Cr 3  E6 rr                        inc tmp3+1
00052Er 3               @4:
00052Er 3                               ; Copy the characters from the input buffer to the
00052Er 3                               ; history buffer.
00052Er 3               
00052Er 3               @save_history_loop:
00052Er 3  C4 rr                        cpy status+1
000530r 3  F0 07                        beq @save_history_done
000532r 3               
000532r 3  B1 rr                        lda (tmp1),y
000534r 3  91 rr                        sta (tmp3),y
000536r 3  C8                           iny
000537r 3  80 F5                        bra @save_history_loop
000539r 3               
000539r 3               @save_history_done:
000539r 3               z_accept:
000539r 3  60                           rts
00053Ar 3               
00053Ar 3               total_recall:
00053Ar 3                       ; """Internal subroutine for ACCEPT that recalls history entry"""
00053Ar 3               
00053Ar 3                               ; Generate the address of the buffer in tmp3. Start with the
00053Ar 3                               ; base address.
00053Ar 3  A9 rr                        lda #<hist_buff
00053Cr 3  85 rr                        sta tmp3
00053Er 3  A9 rr                        lda #>hist_buff
000540r 3  85 rr                        sta tmp3+1
000542r 3               
000542r 3                               ; This is a bit annoying as some bits go into each byte.
000542r 3                               ; .....xxx gets put into address like ......xx x.......
000542r 3  A5 rr                        lda status
000544r 3  6A                           ror
000545r 3  29 03                        and #3
000547r 3  18                           clc
000548r 3  65 rr                        adc tmp3+1
00054Ar 3  85 rr                        sta tmp3+1
00054Cr 3               
00054Cr 3  A5 rr                        lda status
00054Er 3  6A                           ror             ; Rotate through carry into msb.
00054Fr 3  6A                           ror
000550r 3  29 80                        and #$80
000552r 3  18                           clc
000553r 3  65 rr                        adc tmp3
000555r 3  85 rr                        sta tmp3
000557r 3  90 02                        bcc @1           ; Increment the upper byte on carry.
000559r 3  E6 rr                        inc tmp3+1
00055Br 3               @1:
00055Br 3                               ; Save the current length of the input buffer in
00055Br 3                               ; histinfo+1 temporarily.  Reduce to 127 if larger.
00055Br 3  98                           tya
00055Cr 3  C9 80                        cmp #$80
00055Er 3  90 02                        bcc @2
000560r 3  A9 7F                        lda #$7F
000562r 3               @2:
000562r 3  60                           rts
000563r 3               
000563r 3               
000563r 3               
000563r 3               
000563r 3               
000563r 3               ; ## ACTION_OF ( "name" -- xt ) "Get named deferred word's xt"
000563r 3               ; ## "action-of"  auto  ANS core ext
000563r 3                       ; """http://forth-standard.org/standard/core/ACTION-OF"""
000563r 3               
000563r 3               xt_action_of:
000563r 3                               ; This is a state aware word with differet behavior
000563r 3                               ; when used while compiling vs interpreting.
000563r 3                               ; Check STATE
000563r 3  A5 rr                        lda state
000565r 3  05 rr                        ora state+1
000567r 3  F0 0C                        beq @interpreting
000569r 3               
000569r 3               @compiling:
000569r 3                               ; Run ['] to compile the xt of the next word
000569r 3                               ; as a literal.
000569r 3  20 rr rr                     jsr xt_bracket_tick
00056Cr 3               
00056Cr 3                               ; Postpone DEFER@ by compiling a JSR to it.
00056Cr 3  A0 rr                        ldy #>xt_defer_fetch
00056Er 3  A9 rr                        lda #<xt_defer_fetch
000570r 3  20 rr rr                     jsr cmpl_subroutine
000573r 3  80 06                        bra @done
000575r 3               
000575r 3               @interpreting:
000575r 3  20 rr rr                     jsr xt_tick
000578r 3  20 rr rr                     jsr xt_defer_fetch
00057Br 3               
00057Br 3               @done:
00057Br 3  60           z_action_of:           rts
00057Cr 3               
00057Cr 3               
00057Cr 3               
00057Cr 3               ; ## AGAIN ( addr -- ) "Code backwards branch to address left by BEGIN"
00057Cr 3               ; ## "again"  tested  ANS core ext
00057Cr 3                       ; """https://forth-standard.org/standard/core/AGAIN"""
00057Cr 3               
00057Cr 3               xt_again:
00057Cr 3  20 rr rr                     jsr underflow_1
00057Fr 3               
00057Fr 3                               ; Add the opcode for a JMP. We use JMP instead of BRA
00057Fr 3                               ; so we have the range and don't have to calculate the
00057Fr 3                               ; offset.
00057Fr 3  A0 00                        ldy #0
000581r 3  A9 4C                        lda #$4C        ; JMP
000583r 3  91 rr                        sta (cp),y
000585r 3  C8                           iny
000586r 3               
000586r 3  B5 00                        lda 0,x         ; LSB of address
000588r 3  91 rr                        sta (cp),y
00058Ar 3  C8                           iny
00058Br 3               
00058Br 3  B5 01                        lda 1,x         ; MSB of address
00058Dr 3  91 rr                        sta (cp),y
00058Fr 3  C8                           iny
000590r 3               
000590r 3                               ; Allot the space we just used
000590r 3  98                           tya
000591r 3  18                           clc
000592r 3  65 rr                        adc cp
000594r 3  85 rr                        sta cp
000596r 3  90 02                        bcc @done
000598r 3  E6 rr                        inc cp+1
00059Ar 3               @done:
00059Ar 3  E8                           inx
00059Br 3  E8                           inx
00059Cr 3               
00059Cr 3  60           z_again:        rts
00059Dr 3               
00059Dr 3               
00059Dr 3               
00059Dr 3               ; ## ALIGN ( -- ) "Make sure CP is aligned on word size"
00059Dr 3               ; ## "align"  auto  ANS core
00059Dr 3                       ; """https://forth-standard.org/standard/core/ALIGN
00059Dr 3                       ; On a 8-bit machine, this does nothing. ALIGNED uses this
00059Dr 3                       ; routine as well, and also does nothing
00059Dr 3                       ; """
00059Dr 3               
00059Dr 3               ; ## ALIGNED ( addr -- addr ) "Return the first aligned address"
00059Dr 3               ; ## "aligned"  auto  ANS core
00059Dr 3                       ; """https://forth-standard.org/standard/core/ALIGNED"""
00059Dr 3               
00059Dr 3               xt_align:
00059Dr 3               xt_aligned:
00059Dr 3               z_align:
00059Dr 3  60           z_aligned:      rts             ; stripped out during native compile
00059Er 3               
00059Er 3               
00059Er 3               
00059Er 3               ; ## ALLOT ( n -- ) "Reserve or release memory"
00059Er 3               ; ## "allot"  auto  ANS core
00059Er 3                       ; """https://forth-standard.org/standard/core/ALLOT
00059Er 3                       ; Reserve a certain number of bytes (not cells) or release them.
00059Er 3                       ; If n = 0, do nothing. If n is negative, release n bytes, but only
00059Er 3                       ; to the beginning of the Dictionary. If n is positive (the most
00059Er 3                       ; common case), reserve n bytes, but not past the end of the
00059Er 3                       ; Dictionary. See http://forth-standard.org/standard/core/ALLOT
00059Er 3                       ; """
00059Er 3               
00059Er 3               xt_allot:
00059Er 3  20 rr rr                     jsr underflow_1
0005A1r 3               
0005A1r 3                               ; Releasing memory is going to be a very rare operation,
0005A1r 3                               ; so we check for it at the beginning and try to make
0005A1r 3                               ; the most common case as fast as possible
0005A1r 3  B5 01                        lda 1,x
0005A3r 3  30 22                        bmi @release
0005A5r 3               
0005A5r 3                               ; Common case: We are reserving memory, not releasing it
0005A5r 3  18                           clc
0005A6r 3  A5 rr                        lda cp
0005A8r 3  75 00                        adc 0,x
0005AAr 3  85 rr                        sta cp
0005ACr 3               
0005ACr 3  A5 rr                        lda cp+1
0005AEr 3  75 01                        adc 1,x
0005B0r 3  85 rr                        sta cp+1
0005B2r 3               
0005B2r 3                               ; Wait, did we just grant more space than we have? This is
0005B2r 3                               ; a check we only do here, not for other situations like cmpl_a
0005B2r 3                               ; where smaller amounts are reserved.
0005B2r 3  A0 FF                        ldy #<cp_end
0005B4r 3  C4 rr                        cpy cp
0005B6r 3  A9 7F                        lda #>cp_end
0005B8r 3  E5 rr                        sbc cp+1
0005BAr 3  B0 48                        bcs @done               ; we're fine.
0005BCr 3               
0005BCr 3                               ; Oops, that was too much, we're beyond the end of
0005BCr 3                               ; legal Dictionary RAM. Reduce to max memory and report
0005BCr 3                               ; an error
0005BCr 3  84 rr                        sty cp                  ; still #<cp_end
0005BEr 3  A9 7F                        lda #>cp_end
0005C0r 3  85 rr                        sta cp+1
0005C2r 3               
0005C2r 3  A9 00                        lda #err_allot
0005C4r 3  4C rr rr                     jmp error
0005C7r 3               
0005C7r 3               @release:
0005C7r 3                  		; The ANS standard doesn't really say what to do if too much
0005C7r 3                               ; memory is freed ("negatively alloted"). In fact, there isn't
0005C7r 3                               ; even an official test. Gforth is little help either. The good
0005C7r 3                               ; news is, this is going to be a rare case. We want to use as
0005C7r 3                               ; few bytes as possible.
0005C7r 3               
0005C7r 3                               ; What we do is let the user free anything up to the beginning
0005C7r 3                               ; of the RAM area assigned to the Dicionary (CP0), but at
0005C7r 3                               ; their own risk. This means that the Dictionary pointer DP
0005C7r 3                               ; might end up pointing to garbage. However, an attempt to
0005C7r 3                               ; free more than RAM than CP0 will lead to CP being set to CP0,
0005C7r 3                               ; the DP pointing to the last word in RAM (should be DROP) and
0005C7r 3                               ; an error message.
0005C7r 3               
0005C7r 3                               ; We arrive here with ( n ) which is negative. First step,
0005C7r 3                               ; subtract the number TOS from the CP for a new CP
0005C7r 3  CA                           dex
0005C8r 3  CA                           dex
0005C9r 3  A5 rr                        lda cp
0005CBr 3  95 00                        sta 0,x
0005CDr 3  A5 rr                        lda cp+1
0005CFr 3  95 01                        sta 1,x
0005D1r 3               
0005D1r 3  20 rr rr                     jsr xt_plus                     ; new CP is now TOS
0005D4r 3               
0005D4r 3                               ; Second step, see if we've gone too far. We compare the new
0005D4r 3                               ; CP on TOS (which, if we've really screwed up, might be
0005D4r 3                               ; negative) with CP0. This is a signed comparison
0005D4r 3  CA                           dex
0005D5r 3  CA                           dex                             ; new CP now NOS
0005D6r 3  A9 rr                        lda #<cp0
0005D8r 3  95 00                        sta 0,x
0005DAr 3  A9 rr                        lda #>cp0
0005DCr 3  95 01                        sta 1,x                         ; CP0 is TOS
0005DEr 3               
0005DEr 3  20 rr rr                     jsr compare_16bit               ; still ( CP CP0 )
0005E1r 3               
0005E1r 3                               ; If CP (NOS) is smaller than CP0 (TOS), we're in trouble.
0005E1r 3                               ; This means we want Z=1 or N=1
0005E1r 3  F0 17                        beq @nega_done
0005E3r 3  30 15                        bmi @nega_done
0005E5r 3               
0005E5r 3                               ; Yep, we're in trouble. Set CP to CP0, set DP to the first
0005E5r 3                               ; word in ROM (should be DROP), and abort with an error
0005E5r 3  A9 rr                        lda #<cp0
0005E7r 3  85 rr                        sta cp
0005E9r 3  A9 rr                        lda #>cp0
0005EBr 3  85 rr                        sta cp+1
0005EDr 3               
0005EDr 3  A9 rr                        lda #<dictionary_start
0005EFr 3  85 rr                        sta dp
0005F1r 3  A9 rr                        lda #>dictionary_start
0005F3r 3  85 rr                        sta dp+1
0005F5r 3               
0005F5r 3  A9 0A                        lda #err_negallot
0005F7r 3  4C rr rr                     jmp error
0005FAr 3               
0005FAr 3               @nega_done:
0005FAr 3                               ; Save new CP, which is NOS
0005FAr 3  B5 02                        lda 2,x
0005FCr 3  85 rr                        sta cp
0005FEr 3  B5 03                        lda 3,x
000600r 3  85 rr                        sta cp+1
000602r 3               
000602r 3  E8                           inx
000603r 3  E8                           inx                     ; drop through to @done
000604r 3               @done:
000604r 3  E8                           inx
000605r 3  E8                           inx
000606r 3               z_allot:
000606r 3  60                           rts
000607r 3               
000607r 3               
000607r 3               
000607r 3               ; ## ALLOW_NATIVE ( -- ) "Flag last word to allow native compiling"
000607r 3               ; ## "allow-native"  auto  Tali Forth
000607r 3               xt_allow_native:
000607r 3  20 rr rr                     jsr current_to_dp
00060Ar 3  A0 01                        ldy #1          ; offset for status byte
00060Cr 3  B1 rr                        lda (dp),y
00060Er 3  29 F5                        and #$ff-NN-AN  ; AN and NN flag is clear.
000610r 3  91 rr                        sta (dp),y
000612r 3               z_allow_native:
000612r 3  60                           rts
000613r 3               
000613r 3               
000613r 3               ; ## ALSO ( -- ) "Make room in the search order for another wordlist"
000613r 3               ; ## "also"  auto  ANS search ext
000613r 3                       ; """http://forth-standard.org/standard/search/ALSO"""
000613r 3               xt_also:
000613r 3  20 rr rr                     jsr xt_get_order
000616r 3  20 rr rr                     jsr xt_over
000619r 3  20 rr rr                     jsr xt_swap
00061Cr 3  20 rr rr                     jsr xt_one_plus
00061Fr 3  20 rr rr                     jsr xt_set_order
000622r 3               
000622r 3  60           z_also:         rts
000623r 3               
000623r 3               
000623r 3               ; ## ALWAYS_NATIVE ( -- ) "Flag last word as always natively compiled"
000623r 3               ; ## "always-native"  auto  Tali Forth
000623r 3               xt_always_native:
000623r 3  20 rr rr                     jsr current_to_dp
000626r 3  A0 01                        ldy #1          ; offset for status byte
000628r 3  B1 rr                        lda (dp),y
00062Ar 3  09 02                        ora #AN         ; Make sure AN flag is set
00062Cr 3  29 F7                        and #$ff-NN     ; and NN flag is clear.
00062Er 3  91 rr                        sta (dp),y
000630r 3               z_always_native:
000630r 3  60                           rts
000631r 3               
000631r 3               
000631r 3               ; ## AND ( n n -- n ) "Logically AND TOS and NOS"
000631r 3               ; ## "and"  auto  ANS core
000631r 3                       ; """https://forth-standard.org/standard/core/AND"""
000631r 3               xt_and:
000631r 3  20 rr rr                     jsr underflow_2
000634r 3               
000634r 3  B5 00                        lda 0,x
000636r 3  35 02                        and 2,x
000638r 3  95 02                        sta 2,x
00063Ar 3               
00063Ar 3  B5 01                        lda 1,x
00063Cr 3  35 03                        and 3,x
00063Er 3  95 03                        sta 3,x
000640r 3               
000640r 3  E8                           inx
000641r 3  E8                           inx
000642r 3               
000642r 3  60           z_and:          rts
000643r 3               
000643r 3               
000643r 3               ; ## ASSEMBLER_WORDLIST ( -- u ) "WID for the Assembler wordlist"
000643r 3               ; ## "assembler-wordlist"  tested  Tali Assembler
000643r 3                       ; """ Commonly used like `assembler-wordlist >order` to add the
000643r 3                       ; assembler words to the search order so they can be used.
000643r 3                       ; See the tutorial on Wordlists and the Search Order for
000643r 3                       ; more information.
000643r 3                       ;
000643r 3                       ; This is a dummy entry, the code is shared with TWO
000643r 3                       ; """
000643r 3               
000643r 3               
000643r 3               ; ## AT_XY ( n m -- ) "Move cursor to position given"
000643r 3               ; ## "at-xy"  tested  ANS facility
000643r 3                       ; """https://forth-standard.org/standard/facility/AT-XY
000643r 3                       ; On an ANSI compatible terminal, place cursor at row n colum m.
000643r 3                       ; ANSI code is ESC[<n>;<m>H
000643r 3                       ;
000643r 3                       ; Do not use U. to print the numbers because the
000643r 3                       ; trailing space will not work with xterm
000643r 3                       ; """
000643r 3               xt_at_xy:
000643r 3  20 rr rr                     jsr underflow_2
000646r 3               
000646r 3  A9 1B                        lda #AscESC
000648r 3  20 rr rr                     jsr emit_a
00064Br 3  A9 5B                        lda #$5B        ; ASCII for "["
00064Dr 3  20 rr rr                     jsr emit_a
000650r 3  20 rr rr                     jsr print_u
000653r 3  A9 3B                        lda #$3B        ; ASCII for ";"
000655r 3  20 rr rr                     jsr emit_a
000658r 3  20 rr rr                     jsr print_u
00065Br 3  A9 48                        lda #'H'
00065Dr 3  20 rr rr                     jsr emit_a
000660r 3               
000660r 3  60           z_at_xy:        rts
000661r 3               
000661r 3               
000661r 3               ; ## BACKSLASH ( -- ) "Ignore rest of line"
000661r 3               ; ## "\"  auto  ANS core ext
000661r 3                       ; """https://forth-standard.org/standard/core/bs"""
000661r 3               xt_backslash:
000661r 3  A5 rr                        lda ciblen
000663r 3  85 rr                        sta toin
000665r 3  A5 rr                        lda ciblen+1
000667r 3  85 rr                        sta toin+1
000669r 3               
000669r 3  60           z_backslash:    rts
00066Ar 3               
00066Ar 3               
00066Ar 3               ; ## BASE ( -- addr ) "Push address of radix base to stack"
00066Ar 3               ; ## "base"  auto  ANS core
00066Ar 3                       ; """https://forth-standard.org/standard/core/BASE
00066Ar 3                       ; The ANS Forth standard sees the base up to 36, so we can cheat and
00066Ar 3                       ; ingore the MSB
00066Ar 3                       ; """
00066Ar 3               xt_base:
00066Ar 3  CA                           dex
00066Br 3  CA                           dex
00066Cr 3  A9 rr                        lda #<base
00066Er 3  95 00                        sta 0,x         ; LSB
000670r 3  74 01                        stz 1,x         ; MSB is always 0
000672r 3               
000672r 3  60           z_base:         rts
000673r 3               
000673r 3               
000673r 3               ; ## BEGIN ( -- addr ) "Mark entry point for loop"
000673r 3               ; ## "begin"  auto  ANS core
000673r 3                       ; """https://forth-standard.org/standard/core/BEGIN
000673r 3                       ;
000673r 3                       ; This is just an immediate version of here which could just
000673r 3                       ; as well be coded in Forth as
000673r 3                       ;       : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
000673r 3                       ; Since this is a compiling word, we don't care that much about
000673r 3                       ; about speed
000673r 3                       ; """
000673r 3               
000673r 3               xt_begin:
000673r 3  20 rr rr                     jsr xt_here
000676r 3  60           z_begin:        rts
000677r 3               
000677r 3               
000677r 3               
000677r 3               ; ## BELL ( -- ) "Emit ASCII BELL"
000677r 3               ; ## "bell"  tested  Tali Forth
000677r 3               xt_bell:
000677r 3  A9 07                        lda #7          ; ASCII value for BELl
000679r 3  20 rr rr                     jsr emit_a
00067Cr 3               
00067Cr 3  60           z_bell:         rts
00067Dr 3               
00067Dr 3               
00067Dr 3               ; ## BL ( -- c ) "Push ASCII value of SPACE to stack"
00067Dr 3               ; ## "bl"  auto  ANS core
00067Dr 3                       ; """https://forth-standard.org/standard/core/BL"""
00067Dr 3               
00067Dr 3               xt_bl:
00067Dr 3  CA                           dex
00067Er 3  CA                           dex
00067Fr 3  A9 20                        lda #AscSP
000681r 3  95 00                        sta 0,x
000683r 3  74 01                        stz 1,x
000685r 3               
000685r 3  60           z_bl:           rts
000686r 3               
000686r 3               
000686r 3               ; ## BLK ( -- addr ) "Push address of block being interpreted"
000686r 3               ; ## "block"  auto  ANS block
000686r 3                       ; """https://forth-standard.org/standard/block/BLK"""
000686r 3               xt_blk:
000686r 3                               ; BLK is at UP + blk_offset
000686r 3  CA                           dex
000687r 3  CA                           dex
000688r 3  18                           clc
000689r 3  A5 rr                        lda up
00068Br 3  69 00                        adc #blk_offset ; Add offset
00068Dr 3  95 00                        sta 0,x
00068Fr 3  A5 rr                        lda up+1
000691r 3  69 00                        adc #0          ; Adding carry
000693r 3  95 01                        sta 1,x
000695r 3               
000695r 3  60           z_blk:          rts
000696r 3               
000696r 3               
000696r 3               ; ## BLKBUFFER ( -- addr ) "Push address of block buffer"
000696r 3               ; ## "blkbuffer"  auto  Tali block
000696r 3               xt_blkbuffer:
000696r 3                               ; blkbuffer address is at UP + blkbuffer_offset.
000696r 3                               ; Unlike some of the other user variables, we actually
000696r 3                               ; want to push the address stored here, which will
000696r 3                               ; point to somewhere outside of the user variables.
000696r 3  CA                           dex
000697r 3  CA                           dex
000698r 3                               ; Put the address on the stack.
000698r 3  A0 28                        ldy #blkbuffer_offset
00069Ar 3  B1 rr                        lda (up),y
00069Cr 3  95 00                        sta 0,x
00069Er 3  C8                           iny             ; Move along to the next byte
00069Fr 3  B1 rr                        lda (up),y
0006A1r 3  95 01                        sta 1,x
0006A3r 3               
0006A3r 3  60           z_blkbuffer:    rts
0006A4r 3               
0006A4r 3               
0006A4r 3               ; ## BLOCK ( u -- a-addr ) "Fetch a block into a buffer"
0006A4r 3               ; ## "block"  auto  ANS block
0006A4r 3                       ; """https://forth-standard.org/standard/block/BLOCK"""
0006A4r 3               
0006A4r 3               xt_block:
0006A4r 3               
0006A4r 3                               ; See if the block requested is the same as the one we
0006A4r 3                               ; currently have in the buffer. Check the LSB.
0006A4r 3  A0 2A                        ldy #buffblocknum_offset
0006A6r 3  B1 rr                        lda (up),y
0006A8r 3  D5 00                        cmp 0,x
0006AAr 3  D0 0F                        bne @not_in_buffer
0006ACr 3               
0006ACr 3                               ; Check the MSB.
0006ACr 3  C8                           iny
0006ADr 3  B1 rr                        lda (up),y
0006AFr 3  D5 01                        cmp 1,x
0006B1r 3  D0 08                        bne @not_in_buffer
0006B3r 3               
0006B3r 3                               ; The block is in the buffer. See if the buffer is in use.
0006B3r 3  A0 2C                        ldy #buffstatus_offset
0006B5r 3  B1 rr                        lda (up),y
0006B7r 3  29 01                        and #1          ; Check the in-use flag (bit 0)
0006B9r 3  D0 30                        bne @done       ; It's already in the buffer and in use.
0006BBr 3                                               ; @done will replace the block# with the
0006BBr 3                                               ; buffer address.
0006BBr 3               @not_in_buffer:
0006BBr 3                               ; Check the buffer status
0006BBr 3  A0 2C                        ldy #buffstatus_offset
0006BDr 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
0006BFr 3  C9 03                        cmp #3          ; LSB is needed.
0006C1r 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
0006C3r 3               
0006C3r 3                               ; We need to save the block.
0006C3r 3  20 rr rr                     jsr xt_blkbuffer
0006C6r 3  20 rr rr                     jsr xt_buffblocknum
0006C9r 3  20 rr rr                     jsr xt_fetch
0006CCr 3  20 rr rr                     jsr xt_block_write
0006CFr 3               
0006CFr 3               @buffer_available:
0006CFr 3                               ; Save the block number.
0006CFr 3  A0 2A                        ldy #buffblocknum_offset
0006D1r 3  B5 00                        lda 0,x
0006D3r 3  91 rr                        sta (up),y
0006D5r 3  C8                           iny
0006D6r 3  B5 01                        lda 1,x
0006D8r 3  91 rr                        sta (up),y
0006DAr 3               
0006DAr 3                               ; Get the requested block.
0006DAr 3  20 rr rr                     jsr xt_blkbuffer
0006DDr 3  20 rr rr                     jsr xt_swap
0006E0r 3  20 rr rr                     jsr xt_block_read
0006E3r 3               
0006E3r 3                               ; Mark the buffer as clean and in-use.
0006E3r 3  A9 01                        lda #1
0006E5r 3  A0 2C                        ldy #buffstatus_offset
0006E7r 3  91 rr                        sta (up),y
0006E9r 3               
0006E9r 3                               ; Make room on the stack for the return address.
0006E9r 3  CA                           dex
0006EAr 3  CA                           dex
0006EBr 3               
0006EBr 3               @done:
0006EBr 3                               ; It's in the buffer. Return the buffer address.
0006EBr 3  A0 28                        ldy #blkbuffer_offset
0006EDr 3  B1 rr                        lda (up),y
0006EFr 3  95 00                        sta 0,x
0006F1r 3  C8                           iny
0006F2r 3  B1 rr                        lda (up),y
0006F4r 3  95 01                        sta 1,x
0006F6r 3               
0006F6r 3  60           z_block:        rts
0006F7r 3               
0006F7r 3               
0006F7r 3               
0006F7r 3               ; ## BLOCK_RAMDRIVE_INIT ( u -- ) "Create a ramdrive for blocks"
0006F7r 3               ; ## "block-ramdrive-init"  auto  Tali block
0006F7r 3                       ; """Create a RAM drive, with the given number of
0006F7r 3                       ; blocks, in the dictionary along with setting up the block words to
0006F7r 3                       ; use it.  The read/write routines do not provide bounds checking.
0006F7r 3                       ; Expected use: `4 block-ramdrive-init` ( to create blocks 0-3 )
0006F7r 3                       ; """
0006F7r 3               
0006F7r 3               xt_block_ramdrive_init:
0006F7r 3  20 rr rr                     jsr underflow_1
0006FAr 3               
0006FAr 3                               ; Store the string to run here as a string literal.
0006FAr 3                               ; See SLITERAL for the format information. This way, we
0006FAr 3                               ; don't have the words defined below in the Dictionary until
0006FAr 3                               ; we really use them.
0006FAr 3  4C rr rr                     jmp @after_ramdrive_code
0006FDr 3               
0006FDr 3               @ramdrive_code:
0006FDr 3  62 61 73 65          .byte "base @ swap decimal"
000701r 3  20 40 20 73  
000705r 3  77 61 70 20  
000710r 3  20 31 30 32          .byte " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
000714r 3  34 20 2A     
000717r 3  20 64 75 70          .byte " dup"    ; ( Save a copy for formatting it at the end )
00071Br 3  20 62 75 66          .byte " buffer: ramdrive" ; ( Create ramdrive )
00071Fr 3  66 65 72 3A  
000723r 3  20 72 61 6D  
00072Cr 3                       ; ( These routines just copy between the buffer and the ramdrive blocks )
00072Cr 3  20 3A 20 62          .byte " : block-read-ramdrive"  ; ( addr u -- )
000730r 3  6C 6F 63 6B  
000734r 3  2D 72 65 61  
000742r 3  20 72 61 6D          .byte " ramdrive swap 1024 * + swap 1024 move ;"
000746r 3  64 72 69 76  
00074Ar 3  65 20 73 77  
00076Ar 3  20 3A 20 62          .byte " : block-write-ramdrive" ; ( addr u -- )
00076Er 3  6C 6F 63 6B  
000772r 3  2D 77 72 69  
000781r 3  20 72 61 6D          .byte " ramdrive swap 1024 * + 1024 move ;"
000785r 3  64 72 69 76  
000789r 3  65 20 73 77  
0007A4r 3  20 27 20 62          .byte " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
0007A8r 3  6C 6F 63 6B  
0007ACr 3  2D 72 65 61  
0007CEr 3  20 27 20 62          .byte " ' block-write-ramdrive block-write-vector !"
0007D2r 3  6C 6F 63 6B  
0007D6r 3  2D 77 72 69  
0007FAr 3  20 72 61 6D          .byte " ramdrive swap blank base !"
0007FEr 3  64 72 69 76  
000802r 3  65 20 73 77  
000815r 3               
000815r 3               @after_ramdrive_code:
000815r 3  20 rr rr                     jsr sliteral_runtime
000818r 3               
000818r 3  rr rr 18 01  .word @ramdrive_code, @after_ramdrive_code-@ramdrive_code
00081Cr 3               
00081Cr 3                               ; The address and length of the ramdrive code is now on the
00081Cr 3                               ; stack. Call EVALUATE to run it.
00081Cr 3  20 rr rr                     jsr xt_evaluate
00081Fr 3               
00081Fr 3               z_block_ramdrive_init:
00081Fr 3  60                           rts
000820r 3               
000820r 3               
000820r 3               
000820r 3               ; ## BLOCK_READ ( addr u -- ) "Read a block from storage (deferred word)"
000820r 3               ; ## "block-read"  auto  Tali block
000820r 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000820r 3                       ; with their own version to read a block from storage.
000820r 3                       ; The stack parameters are ( buffer_address block# -- ).
000820r 3                       ; """
000820r 3               xt_block_read:
000820r 3                               ; Execute the BLOCK-READ-VECTOR
000820r 3  A0 2E                        ldy #blockread_offset
000822r 3  B1 rr                        lda (up),y
000824r 3  85 rr                        sta tmp1
000826r 3  C8                           iny
000827r 3  B1 rr                        lda (up),y
000829r 3  85 rr                        sta tmp1+1
00082Br 3               
00082Br 3  6C rr rr                     jmp (tmp1)
00082Er 3               
00082Er 3               z_block_read:   ; No RTS needed
00082Er 3               
00082Er 3               
00082Er 3               ; ## BLOCK_READ_VECTOR ( -- addr ) "Address of the block-read vector"
00082Er 3               ; ## "block-read-vector"  auto  Tali block
00082Er 3                       ; """BLOCK-READ is a vectored word that the user needs to override
00082Er 3                       ; with their own version to read a block from storage.
00082Er 3                       ; This word gives the address of the vector so it can be replaced.
00082Er 3                       ; """
00082Er 3               xt_block_read_vector:
00082Er 3                               ; Get the BLOCK-READ-VECTOR address
00082Er 3  CA                           dex
00082Fr 3  CA                           dex
000830r 3  18                           clc
000831r 3  A5 rr                        lda up
000833r 3  69 2E                        adc #blockread_offset
000835r 3  95 00                        sta 0,x
000837r 3  A5 rr                        lda up+1
000839r 3  69 00                        adc #0          ; Add carry
00083Br 3  95 01                        sta 1,x
00083Dr 3               
00083Dr 3               z_block_read_vector:
00083Dr 3  60                           rts
00083Er 3               
00083Er 3               
00083Er 3               ; This is the default error message the vectored words BLOCK-READ and
00083Er 3               ; BLOCK-WRITE start with. This word is not included in the dictionary.
00083Er 3               xt_block_word_error:
00083Er 3  A9 0C                        lda #err_blockwords
000840r 3  4C rr rr                     jmp error       ; no RTS needed
000843r 3               z_block_word_error:
000843r 3               
000843r 3               ; ## BLOCK_WRITE ( addr u -- ) "Write a block to storage (deferred word)"
000843r 3               ; ## "block-write"  auto  Tali block
000843r 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000843r 3                       ; with their own version to write a block to storage.
000843r 3                       ; The stack parameters are ( buffer_address block# -- ).
000843r 3                       ; """
000843r 3               xt_block_write:
000843r 3                               ; Execute the BLOCK-READ-VECTOR
000843r 3  A0 30                        ldy #blockwrite_offset
000845r 3  B1 rr                        lda (up),y
000847r 3  85 rr                        sta tmp1
000849r 3  C8                           iny
00084Ar 3  B1 rr                        lda (up),y
00084Cr 3  85 rr                        sta tmp1+1
00084Er 3  6C rr rr                     jmp (tmp1)
000851r 3               
000851r 3               z_block_write:  ; No RTS needed
000851r 3               
000851r 3               
000851r 3               ; ## BLOCK_WRITE_VECTOR ( -- addr ) "Address of the block-write vector"
000851r 3               ; ## "block-write-vector"  auto  Tali block
000851r 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000851r 3                       ; with their own version to write a block to storage.
000851r 3                       ; This word gives the address of the vector so it can be replaced.
000851r 3                       ; """
000851r 3               xt_block_write_vector:
000851r 3                               ; Get the BLOCK-WRITE-VECTOR address
000851r 3  CA                           dex
000852r 3  CA                           dex
000853r 3  18                           clc
000854r 3  A5 rr                        lda up
000856r 3  69 30                        adc #blockwrite_offset
000858r 3  95 00                        sta 0,x
00085Ar 3  A5 rr                        lda up+1
00085Cr 3  69 00                        adc #0          ; Add carry
00085Er 3  95 01                        sta 1,x
000860r 3               
000860r 3               z_block_write_vector:
000860r 3  60                           rts
000861r 3               
000861r 3               
000861r 3               ; ## BOUNDS ( addr u -- addr+u addr ) "Prepare address for looping"
000861r 3               ; ## "bounds"  auto  Gforth
000861r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Memory-Blocks.html
000861r 3                       ; Given a string, return the correct Data Stack parameters for
000861r 3                       ; a DO/LOOP loop over its characters. This is realized as
000861r 3                       ; OVER + SWAP in Forth, but we do it a lot faster in assembler
000861r 3                       ; """
000861r 3               xt_bounds:
000861r 3  20 rr rr                     jsr underflow_2
000864r 3               
000864r 3  18                           clc
000865r 3  B5 00                        lda 0,x                 ; LSB u
000867r 3  B4 02                        ldy 2,x                 ; LSB addr
000869r 3  75 02                        adc 2,x
00086Br 3  95 02                        sta 2,x                 ; LSB addr+u
00086Dr 3  94 00                        sty 0,x
00086Fr 3               
00086Fr 3  B5 01                        lda 1,x                 ; MSB u
000871r 3  B4 03                        ldy 3,x                 ; MSB addr
000873r 3  75 03                        adc 3,x
000875r 3  95 03                        sta 3,x                 ; MSB addr+u
000877r 3  94 01                        sty 1,x
000879r 3               
000879r 3  60           z_bounds:       rts
00087Ar 3               
00087Ar 3               
00087Ar 3               ; ## BRACKET_CHAR ( "c" -- ) "Compile character"
00087Ar 3               ; ## "[char]"  auto  ANS core
00087Ar 3                       ; """https://forth-standard.org/standard/core/BracketCHAR
00087Ar 3                       ; Compile the ASCII value of a character as a literal. This is an
00087Ar 3                       ; immediate, compile-only word.
00087Ar 3                       ;
00087Ar 3                       ; A definition given in
00087Ar 3                       ; http://forth-standard.org/standard/implement is
00087Ar 3                       ; : [CHAR]  CHAR POSTPONE LITERAL ; IMMEDIATE
00087Ar 3                       ; """
00087Ar 3               xt_bracket_char:
00087Ar 3  20 rr rr                     jsr xt_char
00087Dr 3  20 rr rr                     jsr xt_literal
000880r 3  60           z_bracket_char: rts
000881r 3               
000881r 3               
000881r 3               ; ## BRACKET_TICK ( -- ) "Store xt of following word during compilation"
000881r 3               ; ## "[']"  auto  ANS core
000881r 3                       ; """https://forth-standard.org/standard/core/BracketTick"""
000881r 3               xt_bracket_tick:
000881r 3  20 rr rr                     jsr xt_tick
000884r 3  20 rr rr                     jsr xt_literal
000887r 3  60           z_bracket_tick: rts
000888r 3               
000888r 3               
000888r 3               ; ## BUFFBLOCKNUM ( -- addr ) "Push address of variable holding block in buffer"
000888r 3               ; ## "buffblocknum"  auto  Tali block
000888r 3               xt_buffblocknum:
000888r 3                               ; BUFFBLOCKNUM is at UP + buffblocknum_offset
000888r 3  CA                           dex
000889r 3  CA                           dex
00088Ar 3  18                           clc
00088Br 3  A5 rr                        lda up
00088Dr 3  69 2A                        adc #buffblocknum_offset        ; Add offset
00088Fr 3  95 00                        sta 0,x
000891r 3  A5 rr                        lda up+1
000893r 3  69 00                        adc #0                          ; Adding carry
000895r 3  95 01                        sta 1,x
000897r 3               
000897r 3  60           z_buffblocknum: rts
000898r 3               
000898r 3               
000898r 3               ; ## BUFFER ( u -- a-addr ) "Get a buffer for a block"
000898r 3               ; ## "buffer"  auto  ANS block
000898r 3                       ; """https://forth-standard.org/standard/block/BUFFER"""
000898r 3               
000898r 3               xt_buffer:
000898r 3                               ; Check the buffer status
000898r 3  A0 2C                        ldy #buffstatus_offset
00089Ar 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
00089Cr 3  C9 03                        cmp #3          ; LSB is needed.
00089Er 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
0008A0r 3               
0008A0r 3                               ; We need to save the block.
0008A0r 3  20 rr rr                     jsr xt_blkbuffer
0008A3r 3  20 rr rr                     jsr xt_buffblocknum
0008A6r 3  20 rr rr                     jsr xt_fetch
0008A9r 3  20 rr rr                     jsr xt_block_write
0008ACr 3               
0008ACr 3               @buffer_available:
0008ACr 3                               ; Save the block number.
0008ACr 3  A0 2A                        ldy #buffblocknum_offset
0008AEr 3  B5 00                        lda 0,x
0008B0r 3  91 rr                        sta (up),y
0008B2r 3  C8                           iny
0008B3r 3  B5 01                        lda 1,x
0008B5r 3  91 rr                        sta (up),y
0008B7r 3               
0008B7r 3                               ; Mark the buffer as clean and in-use.
0008B7r 3  A9 01                        lda #1
0008B9r 3  A0 2C                        ldy #buffstatus_offset
0008BBr 3  91 rr                        sta (up),y
0008BDr 3               
0008BDr 3               @done:
0008BDr 3                               ; Return the buffer address.
0008BDr 3  A0 28                        ldy #blkbuffer_offset
0008BFr 3  B1 rr                        lda (up),y
0008C1r 3  95 00                        sta 0,x
0008C3r 3  C8                           iny
0008C4r 3  B1 rr                        lda (up),y
0008C6r 3  95 01                        sta 1,x
0008C8r 3               
0008C8r 3  60           z_buffer:       rts
0008C9r 3               
0008C9r 3               
0008C9r 3               
0008C9r 3               ; ## BUFFER_COLON ( u "<name>" -- ; -- addr ) "Create an uninitialized buffer"
0008C9r 3               ; ## "buffer:"  auto  ANS core ext
0008C9r 3                               ; """https://forth-standard.org/standard/core/BUFFERColon
0008C9r 3                               ; Create a buffer of size u that puts its address on the stack
0008C9r 3                               ; when its name is used.
0008C9r 3                               ; """
0008C9r 3               xt_buffer_colon:
0008C9r 3  20 rr rr                     jsr xt_create
0008CCr 3  20 rr rr                     jsr xt_allot
0008CFr 3  60           z_buffer_colon: rts
0008D0r 3               
0008D0r 3               
0008D0r 3               ; ## BUFFSTATUS ( -- addr ) "Push address of variable holding buffer status"
0008D0r 3               ; ## "buffstatus"  auto  Tali block
0008D0r 3               xt_buffstatus:
0008D0r 3                               ; BUFFSTATUS is at UP + buffstatus_offset
0008D0r 3  CA                           dex
0008D1r 3  CA                           dex
0008D2r 3  18                           clc
0008D3r 3  A5 rr                        lda up
0008D5r 3  69 2C                        adc #buffstatus_offset  ; Add offset
0008D7r 3  95 00                        sta 0,x
0008D9r 3  A5 rr                        lda up+1
0008DBr 3  69 00                        adc #0                  ; Adding carry
0008DDr 3  95 01                        sta 1,x
0008DFr 3               
0008DFr 3  60           z_buffstatus:   rts
0008E0r 3               
0008E0r 3               
0008E0r 3               ; ## BYE ( -- ) "Break"
0008E0r 3               ; ## "bye"  tested  ANS tools ext
0008E0r 3                       ; """https://forth-standard.org/standard/tools/BYE"""
0008E0r 3               
0008E0r 3               xt_bye:
0008E0r 3                               ;brk
0008E0r 3  4C rr rr                     jmp platform_bye
0008E3r 3               z_bye:          ;rts             ; never reached
0008E3r 3               
0008E3r 3               
0008E3r 3               
0008E3r 3               ; ## C_COMMA ( c -- ) "Store one byte/char in the Dictionary"
0008E3r 3               ; ## "c,"  auto  ANS core
0008E3r 3                       ; """https://forth-standard.org/standard/core/CComma"""
0008E3r 3               
0008E3r 3               xt_c_comma:
0008E3r 3  20 rr rr                     jsr underflow_1
0008E6r 3               
0008E6r 3  B5 00                        lda 0,x
0008E8r 3  20 rr rr                     jsr cmpl_a
0008EBr 3               
0008EBr 3  E8                           inx
0008ECr 3  E8                           inx
0008EDr 3               
0008EDr 3  60           z_c_comma:      rts
0008EEr 3               
0008EEr 3               
0008EEr 3               
0008EEr 3               ; ## C_FETCH ( addr -- c ) "Get a character/byte from given address"
0008EEr 3               ; ## "c@"  auto  ANS core
0008EEr 3                       ; """https://forth-standard.org/standard/core/CFetch"""
0008EEr 3               xt_c_fetch:
0008EEr 3  20 rr rr                     jsr underflow_1
0008F1r 3               
0008F1r 3  A1 00                        lda (0,x)
0008F3r 3  95 00                        sta 0,x
0008F5r 3  74 01                        stz 1,x         ; Ignore LSB
0008F7r 3               
0008F7r 3  60           z_c_fetch:      rts
0008F8r 3               
0008F8r 3               
0008F8r 3               ; ## C_STORE ( c addr -- ) "Store character at address given"
0008F8r 3               ; ## "c!"  auto  ANS core
0008F8r 3                       ; """https://forth-standard.org/standard/core/CStore"""
0008F8r 3               xt_c_store:
0008F8r 3  20 rr rr                     jsr underflow_2
0008FBr 3               
0008FBr 3  B5 02                        lda 2,x
0008FDr 3  81 00                        sta (0,x)
0008FFr 3               
0008FFr 3  E8                           inx
000900r 3  E8                           inx
000901r 3  E8                           inx
000902r 3  E8                           inx
000903r 3               
000903r 3  60           z_c_store:      rts
000904r 3               
000904r 3               
000904r 3               ; ## CASE (C: -- 0) ( -- ) "Conditional flow control"
000904r 3               ; ## "case"  auto  ANS core ext
000904r 3                       ; """http://forth-standard.org/standard/core/CASE
000904r 3                       ;
000904r 3                       ; This is a dummy header, CASE shares the actual code with ZERO.
000904r 3                       ; """
000904r 3               
000904r 3               
000904r 3               ; ## CELL_PLUS ( u -- u ) "Add cell size in bytes"
000904r 3               ; ## "cell+"  auto  ANS core
000904r 3                       ; """https://forth-standard.org/standard/core/CELLPlus
000904r 3                       ; Add the number of bytes ("address units") that one cell needs.
000904r 3                       ; Since this is an 8 bit machine with 16 bit cells, we add two bytes.
000904r 3                       ; """
000904r 3               
000904r 3               xt_cell_plus:
000904r 3  20 rr rr                     jsr underflow_1
000907r 3               
000907r 3  F6 00                        inc 0,x
000909r 3  D0 02                        bne @1
00090Br 3  F6 01                        inc 1,x
00090Dr 3               @1:
00090Dr 3  F6 00                        inc 0,x
00090Fr 3  D0 02                        bne @done
000911r 3  F6 01                        inc 1,x
000913r 3               @done:
000913r 3  60           z_cell_plus:    rts
000914r 3               
000914r 3               
000914r 3               
000914r 3               ; ## CELLS ( u -- u ) "Convert cells to size in bytes"
000914r 3               ; ## "cells"  auto  ANS core
000914r 3                       ; """https://forth-standard.org/standard/core/CELLS
000914r 3                       ;
000914r 3                       ; Dummy entry for the CELLS word, the code is the same as for
000914r 3                       ; 2*, which is where the header directs us to
000914r 3                       ; """
000914r 3               
000914r 3               
000914r 3               ; ## CHAR ( "c" -- u ) "Convert character to ASCII value"
000914r 3               ; ## "char"  auto  ANS core
000914r 3                       ; """https://forth-standard.org/standard/core/CHAR"""
000914r 3               
000914r 3               xt_char:
000914r 3                               ; get character from string, returns ( addr u )
000914r 3  20 rr rr                     jsr xt_parse_name
000917r 3               
000917r 3                               ; if we got back a zero, we have a problem
000917r 3  B5 00                        lda 0,x
000919r 3  15 01                        ora 1,x
00091Br 3  D0 05                        bne @not_empty
00091Dr 3               
00091Dr 3  A9 05                        lda #err_noname
00091Fr 3  4C rr rr                     jmp error
000922r 3               
000922r 3               @not_empty:
000922r 3  E8                           inx             ; drop number of characters, leave addr
000923r 3  E8                           inx
000924r 3  A1 00                        lda (0,x)       ; get character (equivalent to C@)
000926r 3  95 00                        sta 0,x
000928r 3  74 01                        stz 1,x         ; MSB is always zero
00092Ar 3               
00092Ar 3  60           z_char:         rts
00092Br 3               
00092Br 3               
00092Br 3               
00092Br 3               ; ## CHAR_PLUS ( addr -- addr+1 ) "Add the size of a character unit to address"
00092Br 3               ; ## "char+"  auto  ANS core
00092Br 3                       ; """https://forth-standard.org/standard/core/CHARPlus
00092Br 3                       ;
00092Br 3                       ; This is a dummy entry, the code is shared with ONE_PLUS
00092Br 3                       ; """
00092Br 3               
00092Br 3               
00092Br 3               ; ## CHARS ( n -- n ) "Number of bytes that n chars need"
00092Br 3               ; ## "chars"  auto  ANS core
00092Br 3                       ; """https://forth-standard.org/standard/core/CHARS
00092Br 3                       ; Return how many address units n chars are. Since this is an 8 bit
00092Br 3                       ; machine, this does absolutely nothing and is included for
00092Br 3                       ; compatibility with other Forth versions
00092Br 3                       ; """
00092Br 3               
00092Br 3               xt_chars:
00092Br 3                               ; Checking for underflow seems a bit stupid because this
00092Br 3                               ; routine does nothing on this machine. However, the user
00092Br 3                               ; should be warned that there is something wrong with the
00092Br 3                               ; code if this occurs.
00092Br 3  20 rr rr                     jsr underflow_1
00092Er 3               
00092Er 3  60           z_chars:        rts
00092Fr 3               
00092Fr 3               
00092Fr 3               ; ## CLEAVE ( addr u -- addr2 u2 addr1 u1 ) "Split off word from string"
00092Fr 3               ; ## "cleave"  auto  Tali Forth
00092Fr 3               
00092Fr 3                       ; """Given a range of memory with words delimited by whitespace,return
00092Fr 3                       ; the first word at the top of the stack and the rest of the word
00092Fr 3                       ; following it.
00092Fr 3                       ;
00092Fr 3                       ; Example:
00092Fr 3                       ; s" w1 w2 w3" cleave  -> "w2 w3" "w1"
00092Fr 3                       ; s" w1" cleave        -> "" "w1"
00092Fr 3                       ;
00092Fr 3                       ; Since it will be used in loops a lot, we want it to work in pure
00092Fr 3                       ; assembler and be as fast as we can make it. Calls PARSE-NAME so we
00092Fr 3                       ; strip leading delimiters.
00092Fr 3                       ; """
00092Fr 3               
00092Fr 3               xt_cleave:
00092Fr 3  20 rr rr                     jsr underflow_2
000932r 3               
000932r 3                               ; We arrive here with ( addr u ). We need to strip any leading
000932r 3                               ; spaces by hand: PARSE-NAME does do that, but it doesn't
000932r 3                               ; remember how many spaces were stripped. This means we can't
000932r 3                               ; calculate the length of the remainder. Fortunately, Tali
000932r 3                               ; Forth has just the word we need for this:
000932r 3  20 rr rr                     jsr xt_minus_leading    ; -LEADING ( addr u )
000935r 3               
000935r 3                               ; The main part we can turn over to PARSE-NAME, except that we
000935r 3                               ; have a string ( addr u ) and not stuff in the input buffer.
000935r 3                               ; We get around this by cheating: We place ( addr u ) in the
000935r 3                               ; input buffer and then call PARSE-NAME.
000935r 3  20 rr rr                     jsr xt_input_to_r       ; save old imput state
000938r 3               
000938r 3  B5 00                        lda 0,x         ; u is new ciblen
00093Ar 3  85 rr                        sta ciblen
00093Cr 3  B5 01                        lda 1,x
00093Er 3  85 rr                        sta ciblen+1
000940r 3               
000940r 3  B5 02                        lda 2,x         ; addr is new cib
000942r 3  85 rr                        sta cib
000944r 3  B5 03                        lda 3,x
000946r 3  85 rr                        sta cib+1
000948r 3               
000948r 3  64 rr                        stz toin        ; >IN pointer is zero
00094Ar 3  64 rr                        stz toin+1
00094Cr 3               
00094Cr 3                               ; PARSE-NAME gives us back the substring of the first word
00094Cr 3  20 rr rr                     jsr xt_parse_name       ; ( addr u addr-s u-s )
00094Fr 3               
00094Fr 3                               ; If we were given an empty string, then we're done. It's the
00094Fr 3                               ; resposibility of the user to catch this as a sign to end the
00094Fr 3                               ; any loop
00094Fr 3  B5 00                        lda 0,x
000951r 3  15 01                        ora 1,x
000953r 3  F0 23                        beq @done
000955r 3               
000955r 3                               ; Now we have to adjust the original string
000955r 3  B5 04                        lda 4,x         ; LSB of original u
000957r 3  38                           sec
000958r 3  F5 00                        sbc 0,x
00095Ar 3  95 04                        sta 4,x
00095Cr 3               
00095Cr 3  B5 05                        lda 5,x         ; MSB of original u
00095Er 3  F5 01                        sbc 1,x
000960r 3  95 05                        sta 5,x
000962r 3               
000962r 3  B5 06                        lda 6,x         ; LSB of original addr
000964r 3  18                           clc
000965r 3  75 00                        adc 0,x
000967r 3  95 06                        sta 6,x
000969r 3               
000969r 3  B5 07                        lda 7,x         ; MSB of original addr
00096Br 3  75 01                        adc 1,x
00096Dr 3  95 07                        sta 7,x
00096Fr 3               
00096Fr 3                               ; There is one small problem: PARSE-NAME will probably have
00096Fr 3                               ; left the string with the rest of the words with leading
00096Fr 3                               ; delimiters. We use our magic -LEADING again
00096Fr 3  20 rr rr                     jsr xt_two_swap         ; ( addr-s u-s addr u )
000972r 3  20 rr rr                     jsr xt_minus_leading
000975r 3  20 rr rr                     jsr xt_two_swap         ; ( addr u addr-s u-s )
000978r 3               @done:
000978r 3                               ; Restore input
000978r 3  20 rr rr                     jsr xt_r_to_input
00097Br 3               
00097Br 3  60           z_cleave:       rts
00097Cr 3               
00097Cr 3               
00097Cr 3               
00097Cr 3               ; ## CMOVE ( addr1 addr2 u -- ) "Copy bytes going from low to high"
00097Cr 3               ; ## "cmove"  auto  ANS string
00097Cr 3                       ; """https://forth-standard.org/standard/string/CMOVE
00097Cr 3                       ; Copy u bytes from addr1 to addr2, going low to high (addr2 is
00097Cr 3                       ; larger than addr1). Based on code in Leventhal, Lance A.
00097Cr 3                       ; "6502 Assembly Language Routines", p. 201, where it is called
00097Cr 3                       ; "move left".
00097Cr 3                       ;
00097Cr 3                       ; There are no official tests for this word.
00097Cr 3                       ; """
00097Cr 3               
00097Cr 3               xt_cmove:
00097Cr 3  20 rr rr                     jsr underflow_3
00097Fr 3               
00097Fr 3                               ; move destination address to where we can work with it
00097Fr 3  B5 02                        lda 2,x
000981r 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000983r 3  B5 03                        lda 3,x
000985r 3  85 rr                        sta tmp2+1
000987r 3               
000987r 3                               ; move source address to where we can work with it
000987r 3  B5 04                        lda 4,x
000989r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
00098Br 3  B5 05                        lda 5,x
00098Dr 3  85 rr                        sta tmp1+1
00098Fr 3               
00098Fr 3  A0 00                        ldy #0
000991r 3  B5 01                        lda 1,x         ; number of whole pages to move
000993r 3  F0 0F                        beq @dopartial
000995r 3               
000995r 3               @page:
000995r 3  B1 rr                        lda (tmp1),y
000997r 3  91 rr                        sta (tmp2),y
000999r 3  C8                           iny
00099Ar 3  D0 F9                        bne @page
00099Cr 3               
00099Cr 3  E6 rr                        inc tmp1+1
00099Er 3  E6 rr                        inc tmp2+1
0009A0r 3  D6 01                        dec 1,x
0009A2r 3  D0 F1                        bne @page
0009A4r 3               
0009A4r 3               @dopartial:
0009A4r 3  B5 00                        lda 0,x         ; length of last page
0009A6r 3  F0 09                        beq @done
0009A8r 3               
0009A8r 3               @partial:
0009A8r 3  B1 rr                        lda (tmp1),y
0009AAr 3  91 rr                        sta (tmp2),y
0009ACr 3  C8                           iny
0009ADr 3               
0009ADr 3  D6 00                        dec 0,x
0009AFr 3  D0 F7                        bne @partial
0009B1r 3               
0009B1r 3               @done:          ; clear the stack
0009B1r 3  8A                           txa
0009B2r 3  18                           clc
0009B3r 3  69 06                        adc #6
0009B5r 3  AA                           tax
0009B6r 3               
0009B6r 3  60           z_cmove:        rts
0009B7r 3               
0009B7r 3               
0009B7r 3               
0009B7r 3               ; ## CMOVE_UP ( add1 add2 u -- ) "Copy bytes from high to low"
0009B7r 3               ; ## "cmove>"  auto  ANS string
0009B7r 3                       ; """https://forth-standard.org/standard/string/CMOVEtop
0009B7r 3                       ; Based on code in Leventhal, Lance A. "6502 Assembly Language
0009B7r 3                       ; Routines", p. 201, where it is called "move right".
0009B7r 3                       ;
0009B7r 3                       ; There are no official tests for this word.
0009B7r 3                       ; """
0009B7r 3               
0009B7r 3               xt_cmove_up:
0009B7r 3  20 rr rr                     jsr underflow_3
0009BAr 3               
0009BAr 3                               ; Move destination address to where we can work with it
0009BAr 3  B5 02                        lda 2,x
0009BCr 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
0009BEr 3  B5 03                        lda 3,x
0009C0r 3  18                           clc
0009C1r 3  75 01                        adc 1,x
0009C3r 3  85 rr                        sta tmp2+1      ; point to last page of destination
0009C5r 3               
0009C5r 3                               ; Move source address to where we can work with it
0009C5r 3  B5 04                        lda 4,x
0009C7r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
0009C9r 3  B5 05                        lda 5,x
0009CBr 3  18                           clc
0009CCr 3  75 01                        adc 1,x
0009CEr 3  85 rr                        sta tmp1+1      ; point to last page of source
0009D0r 3  F6 01                        inc 1,x         ; allows us to use bne with dec 1,x below
0009D2r 3               
0009D2r 3                               ; Move the last partial page first
0009D2r 3  B4 00                        ldy 0,x         ; length of last page
0009D4r 3  F0 0E                        beq @nopartial
0009D6r 3               
0009D6r 3               @outerloop:
0009D6r 3  88                           dey
0009D7r 3  F0 07                        beq @finishpage
0009D9r 3               
0009D9r 3               @innerloop:
0009D9r 3  B1 rr                        lda (tmp1),y
0009DBr 3  91 rr                        sta (tmp2),y
0009DDr 3  88                           dey
0009DEr 3  D0 F9                        bne @innerloop
0009E0r 3               
0009E0r 3               @finishpage:
0009E0r 3  B2 rr                        lda (tmp1)      ; handle y = 0 separately
0009E2r 3  92 rr                        sta (tmp2)
0009E4r 3               
0009E4r 3               @nopartial:
0009E4r 3  C6 rr                        dec tmp1+1      ; back up to previous pages
0009E6r 3  C6 rr                        dec tmp2+1
0009E8r 3  D6 01                        dec 1,x
0009EAr 3  D0 EA                        bne @outerloop
0009ECr 3               @done:
0009ECr 3                               ; clear up the stack and leave
0009ECr 3  8A                           txa
0009EDr 3  18                           clc
0009EEr 3  69 06                        adc #6
0009F0r 3  AA                           tax
0009F1r 3               
0009F1r 3  60           z_cmove_up:     rts
0009F2r 3               
0009F2r 3               
0009F2r 3               
0009F2r 3               ; ## COLON ( "name" -- ) "Start compilation of a new word"
0009F2r 3               ; ## ":"  auto  ANS core
0009F2r 3                       ; """https://forth-standard.org/standard/core/Colon
0009F2r 3                       ;
0009F2r 3                       ; Use the CREATE routine and fill in the rest by hand.
0009F2r 3                       ; """
0009F2r 3               
0009F2r 3               xt_colon:
0009F2r 3                               ; If we're already in the compile state, complain
0009F2r 3                               ; and quit
0009F2r 3  A5 rr                        lda state
0009F4r 3  05 rr                        ora state+1
0009F6r 3  F0 05                        beq @1
0009F8r 3               
0009F8r 3  A9 07                        lda #err_state
0009FAr 3  4C rr rr                     jmp error
0009FDr 3               @1:
0009FDr 3                               ; switch to compile state
0009FDr 3  C6 rr                        dec state
0009FFr 3  C6 rr                        dec state+1
000A01r 3               
000A01r 3                               ; Set bit 6 in status to tell ";" and RECURSE this is a normal
000A01r 3                               ; word
000A01r 3  A9 40                        lda #%01000000
000A03r 3  04 rr                        tsb status
000A05r 3               
000A05r 3                               ; CREATE is going to change the DP to point to the new word's
000A05r 3                               ; header. While this is fine for (say) variables, it would mean
000A05r 3                               ; that FIND-NAME etc would find a half-finished word when
000A05r 3                               ; looking in the Dictionary. To prevent this, we save the old
000A05r 3                               ; version of DP and restore it later. The new DP is placed in
000A05r 3                               ; the variable WORKWORD until we're finished with a SEMICOLON.
000A05r 3  20 rr rr                     jsr current_to_dp
000A08r 3  A5 rr                        lda dp+1            ; CREATE uses a lot of variables
000A0Ar 3  48                           pha
000A0Br 3  A5 rr                        lda dp
000A0Dr 3  48                           pha
000A0Er 3               
000A0Er 3                               ; Tell create not to print warning for duplicate name.
000A0Er 3  A9 80                        lda #%10000000
000A10r 3  04 rr                        tsb status
000A12r 3               
000A12r 3  20 rr rr                     jsr xt_create
000A15r 3               
000A15r 3                               ; Get the nt (not the xt!) of the new word as described above.
000A15r 3                               ; Only COLON, SEMICOLON and RECURSE get to access WORKWORD
000A15r 3  20 rr rr                     jsr current_to_dp   ; This might be able to be omitted
000A18r 3  A5 rr                        lda dp
000A1Ar 3  85 rr                        sta workword
000A1Cr 3  A5 rr                        lda dp+1
000A1Er 3  85 rr                        sta workword+1
000A20r 3               
000A20r 3                               ; Restore original DP
000A20r 3  68                           pla
000A21r 3  85 rr                        sta dp
000A23r 3  68                           pla
000A24r 3  85 rr                        sta dp+1
000A26r 3  20 rr rr                     jsr dp_to_current
000A29r 3               
000A29r 3                               ; CREATE includes a subroutine jump to DOVAR by default. We
000A29r 3                               ; back up three bytes and overwrite that.
000A29r 3  A5 rr                        lda cp
000A2Br 3  38                           sec
000A2Cr 3  E9 03                        sbc #3
000A2Er 3  85 rr                        sta cp
000A30r 3  B0 02                        bcs @done
000A32r 3  C6 rr                        dec cp+1
000A34r 3               @done:
000A34r 3  60           z_colon:        rts
000A35r 3               
000A35r 3               
000A35r 3               ; ## COLON_NONAME ( -- ) "Start compilation of a new word""
000A35r 3               ; ## ":NONAME"  auto  ANS core
000A35r 3                       ; """https://forth-standard.org/standard/core/ColonNONAME
000A35r 3                       ; Compile a word with no nt.  ";" will put its xt on the stack.
000A35r 3                       ; """
000A35r 3               
000A35r 3               xt_colon_noname:
000A35r 3                               ; If we're already in the compile state, complain
000A35r 3                               ; and quit
000A35r 3  A5 rr                        lda state
000A37r 3  05 rr                        ora state+1
000A39r 3  F0 05                        beq @1
000A3Br 3               
000A3Br 3  A9 07                        lda #err_state
000A3Dr 3  4C rr rr                     jmp error
000A40r 3               @1:
000A40r 3                               ; switch to compile state
000A40r 3  C6 rr                        dec state
000A42r 3  C6 rr                        dec state+1
000A44r 3               
000A44r 3                               ; Clear bit 6 in status to tell ";" and RECURSE this is
000A44r 3                               ; a :NONAME word.
000A44r 3  A9 40                        lda #%01000000
000A46r 3  14 rr                        trb status
000A48r 3               
000A48r 3                               ; Put cp (the xt for this word) in WORKWORD. The flag above
000A48r 3                               ; lets both ";" and RECURSE know that is is an xt instead of an
000A48r 3                               ; nt and they will modify their behavior.
000A48r 3  A5 rr                        lda cp
000A4Ar 3  85 rr                        sta workword
000A4Cr 3  A5 rr                        lda cp+1
000A4Er 3  85 rr                        sta workword+1
000A50r 3               @done:
000A50r 3  60           z_colon_noname:        rts
000A51r 3               
000A51r 3               
000A51r 3               
000A51r 3               ; ## COMMA ( n -- ) "Allot and store one cell in memory"
000A51r 3               ; ## ","  auto  ANS core
000A51r 3                       ; """https://forth-standard.org/standard/core/Comma
000A51r 3                       ; Store TOS at current place in memory.
000A51r 3                       ;
000A51r 3                       ; Since this an eight-bit machine, we can ignore all alignment issues.
000A51r 3                       ; """
000A51r 3               
000A51r 3               xt_comma:
000A51r 3  20 rr rr                     jsr underflow_1
000A54r 3               
000A54r 3  B5 00                        lda 0,x
000A56r 3  92 rr                        sta (cp)
000A58r 3               
000A58r 3  E6 rr                        inc cp
000A5Ar 3  D0 02                        bne @1
000A5Cr 3  E6 rr                        inc cp+1
000A5Er 3               @1:
000A5Er 3  B5 01                        lda 1,x
000A60r 3  92 rr                        sta (cp)
000A62r 3               
000A62r 3  E6 rr                        inc cp
000A64r 3  D0 02                        bne @done
000A66r 3  E6 rr                        inc cp+1
000A68r 3               @done:
000A68r 3  E8                           inx
000A69r 3  E8                           inx
000A6Ar 3               
000A6Ar 3  60           z_comma:        rts
000A6Br 3               
000A6Br 3               
000A6Br 3               
000A6Br 3               ; ## COMPARE ( addr1 u1 addr2 u2 -- -1 | 0 | 1) "Compare two strings"
000A6Br 3               ; ## "compare"   auto  ANS string
000A6Br 3                       ; """https://forth-standard.org/standard/string/COMPARE
000A6Br 3                       ; Compare string1 (denoted by addr1 u1) to string2 (denoted by
000A6Br 3                       ; addr2 u2).  Return -1 if string1 < string2, 0 if string1 = string2
000A6Br 3                       ; and 1 if string1 > string2 (ASCIIbetical comparison).  A string
000A6Br 3                       ; that entirely matches the beginning of the other string, but is
000A6Br 3                       ; shorter, is considered less than the longer string.
000A6Br 3                       ; """
000A6Br 3               
000A6Br 3               xt_compare:
000A6Br 3  20 rr rr                     jsr underflow_4
000A6Er 3               
000A6Er 3                               ; Load the two string addresses into tmp1 and tmp2.
000A6Er 3  B5 02                        lda 2,x
000A70r 3  85 rr                        sta tmp2
000A72r 3  B5 03                        lda 3,x
000A74r 3  85 rr                        sta tmp2+1
000A76r 3  B5 06                        lda 6,x
000A78r 3  85 rr                        sta tmp1
000A7Ar 3  B5 07                        lda 7,x
000A7Cr 3  85 rr                        sta tmp1+1
000A7Er 3                               ; The counts will be used in-place on the stack.
000A7Er 3               
000A7Er 3               @compare_loop:
000A7Er 3                               ; Check to see if we are out of letters.
000A7Er 3               
000A7Er 3                               ; Check string1
000A7Er 3  B5 04                        lda 4,x
000A80r 3  15 05                        ora 5,x
000A82r 3  F0 2C                        beq @str1_done
000A84r 3               
000A84r 3                               ; Check string2
000A84r 3  B5 00                        lda 0,x
000A86r 3  15 01                        ora 1,x
000A88r 3  F0 3A                        beq @greater    ; Str2 empty first
000A8Ar 3               
000A8Ar 3               @check_letter:
000A8Ar 3                               ; Both strings have at least one letter left.
000A8Ar 3                               ; Check the letters against each other.
000A8Ar 3  B2 rr                        lda (tmp1)
000A8Cr 3  D2 rr                        cmp (tmp2)
000A8Er 3  90 26                        bcc @less
000A90r 3  D0 32                        bne @greater
000A92r 3               @next_letter:
000A92r 3                               ; Move both tmp pointers and decrement the counts
000A92r 3                               ; on the stack.
000A92r 3                               ; Increment tmp1
000A92r 3  E6 rr                        inc tmp1
000A94r 3  D0 02                        bne @1
000A96r 3  E6 rr                        inc tmp1+1
000A98r 3               @1:
000A98r 3                               ; Increment tmp2
000A98r 3  E6 rr                        inc tmp2
000A9Ar 3  D0 02                        bne @2
000A9Cr 3  E6 rr                        inc tmp2+1
000A9Er 3               @2:
000A9Er 3                               ; Decrement count1 on the stack.
000A9Er 3  B5 04                        lda 4,x
000AA0r 3  D0 02                        bne @3
000AA2r 3  D6 05                        dec 5,x
000AA4r 3               @3:
000AA4r 3  D6 04                        dec 4,x
000AA6r 3               
000AA6r 3                               ; Decrement count2 on the stack.
000AA6r 3  B5 00                        lda 0,x
000AA8r 3  D0 02                        bne @4
000AAAr 3  D6 01                        dec 1,x
000AACr 3               @4:
000AACr 3  D6 00                        dec 0,x
000AAEr 3               
000AAEr 3                               ; Loop around and check again.
000AAEr 3  80 CE                        bra @compare_loop
000AB0r 3               
000AB0r 3               @str1_done:
000AB0r 3                               ; String 1 is out of letters. Check string 2.
000AB0r 3  B5 00                        lda 0,x
000AB2r 3  15 01                        ora 1,x
000AB4r 3  F0 08                        beq @equal      ; Both out of letters
000AB6r 3               
000AB6r 3                               ; Falls into less (str1 is out but str2 has more)
000AB6r 3               @less:
000AB6r 3                               ; Return -1
000AB6r 3  A9 FF                        lda #$FF
000AB8r 3  95 06                        sta 6,x
000ABAr 3  95 07                        sta 7,x
000ABCr 3  80 0C                        bra @done
000ABEr 3               @equal:
000ABEr 3                               ; Return 0
000ABEr 3  74 06                        stz 6,x
000AC0r 3  74 07                        stz 7,x
000AC2r 3  80 06                        bra @done
000AC4r 3               @greater:
000AC4r 3                               ; Return 1
000AC4r 3  A9 01                        lda #1
000AC6r 3  95 06                        sta 6,x
000AC8r 3  74 07                        stz 7,x
000ACAr 3                               ; Falls into @done
000ACAr 3               @done:
000ACAr 3                               ; Remove all but the result from the stack.
000ACAr 3  8A                           txa
000ACBr 3  18                           clc
000ACCr 3  69 06                        adc #6
000ACEr 3  AA                           tax
000ACFr 3               
000ACFr 3  60           z_compare:      rts
000AD0r 3               
000AD0r 3               
000AD0r 3               
000AD0r 3               ; ## COMPILE_COMMA ( xt -- ) "Compile xt"
000AD0r 3               ; ## "compile,"  auto  ANS core ext
000AD0r 3                       ; """https://forth-standard.org/standard/core/COMPILEComma
000AD0r 3                       ; Compile the given xt in the current word definition. It is an
000AD0r 3                       ; error if we are not in the compile state. Because we are using
000AD0r 3                       ; subroutine threading, we can't use , (COMMA) to compile new words
000AD0r 3                       ; the traditional way. By default, native compiled is allowed, unless
000AD0r 3                       ; there is a NN (Never Native) flag associated. If not, we use the
000AD0r 3                       ; value NC_LIMIT (from definitions.tasm) to decide if the code
000AD0r 3                       ; is too large to be natively coded: If the size is larger than
000AD0r 3                       ; NC_LIMIT, we silently use subroutine coding. If the AN (Always
000AD0r 3                       ; Native) flag is set, the word is always natively compiled.
000AD0r 3                       ; """
000AD0r 3               
000AD0r 3               xt_compile_comma:
000AD0r 3  20 rr rr                     jsr underflow_1
000AD3r 3               
000AD3r 3                               ; See if this is an Always Native (AN) word by checking the
000AD3r 3                               ; AN flag. We need nt for this. First, save a copy of xt to
000AD3r 3                               ; the Return Stack
000AD3r 3  B5 01                        lda 1,x                 ; MSB
000AD5r 3  48                           pha
000AD6r 3  B5 00                        lda 0,x
000AD8r 3  48                           pha                     ; LSB
000AD9r 3               
000AD9r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt -- nt )
000ADCr 3               
000ADCr 3                               ; See if this xt even has an nt.
000ADCr 3  B5 00                        lda 0,x
000ADEr 3  15 01                        ora 1,x
000AE0r 3  D0 03                        bne @check_nt
000AE2r 3               
000AE2r 3                               ; No nt in dictionary. Just compile as a JSR.
000AE2r 3  4C rr rr                     jmp @compile_as_jump
000AE5r 3               
000AE5r 3               @check_nt:
000AE5r 3                               ; put nt away for safe keeping
000AE5r 3  B5 00                        lda 0,x
000AE7r 3  85 rr                        sta tmptos
000AE9r 3  B5 01                        lda 1,x
000AEBr 3  85 rr                        sta tmptos+1
000AEDr 3               
000AEDr 3                               ; status byte is one further down
000AEDr 3  F6 00                        inc 0,x
000AEFr 3  D0 02                        bne @1
000AF1r 3  F6 01                        inc 1,x                 ; ( nt -- nt+1 )
000AF3r 3               @1:
000AF3r 3  A1 00                        lda (0,x)
000AF5r 3  85 rr                        sta tmp3                ; keep copy of status byte for NN
000AF7r 3  29 02                        and #AN                 ; mask all but Always Native (AN) bit
000AF9r 3  F0 0D                        beq @compile_check
000AFBr 3               
000AFBr 3                               ; We're natively compiling no matter what. Get length and
000AFBr 3                               ; compile in code. Get the original nt back
000AFBr 3  A5 rr                        lda tmptos
000AFDr 3  95 00                        sta 0,x
000AFFr 3  A5 rr                        lda tmptos+1
000B01r 3  95 01                        sta 1,x
000B03r 3               
000B03r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000B06r 3               
000B06r 3  80 27                        bra @compile_as_code
000B08r 3               
000B08r 3               @compile_check:
000B08r 3                               ; See if Native Compile is even alowed by checking the NN
000B08r 3                               ; flag
000B08r 3  A5 rr                        lda tmp3
000B0Ar 3  29 08                        and #NN
000B0Cr 3  F0 03                        beq @check_size_limit
000B0Er 3               
000B0Er 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000B11r 3               
000B11r 3               @check_size_limit:
000B11r 3                               ; Native compile is a legal option, but we need to see what
000B11r 3                               ; limit the user set for size (in nc_limit)
000B11r 3  A5 rr                        lda tmptos
000B13r 3  95 00                        sta 0,x
000B15r 3  A5 rr                        lda tmptos+1
000B17r 3  95 01                        sta 1,x
000B19r 3               
000B19r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000B1Cr 3               
000B1Cr 3                               ; Check the wordsize MSB against the user-defined limit.
000B1Cr 3  B5 01                        lda 1,x
000B1Er 3  C5 rr                        cmp nc_limit+1
000B20r 3  90 0D                        bcc @compile_as_code    ; user-defined limit MSB
000B22r 3  D0 08                        bne @jumpto_compile_as_jump
000B24r 3               
000B24r 3                               ; Check the wordsize LSB against the user-defined limit.
000B24r 3  B5 00                        lda 0,x
000B26r 3  C5 rr                        cmp nc_limit            ; user-defined limit LSB
000B28r 3  90 05                        bcc @compile_as_code    ; Allow native compiling for less
000B2Ar 3  F0 03                        beq @compile_as_code    ; than or equal to the limit.
000B2Cr 3               
000B2Cr 3               @jumpto_compile_as_jump:
000B2Cr 3                               ; If the wordsize is greater than the user-defined
000B2Cr 3                               ; limit, it will be compiled as a subroutine jump.
000B2Cr 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000B2Fr 3               
000B2Fr 3               @compile_as_code:
000B2Fr 3                               ; We arrive here with the length of the word's code TOS and
000B2Fr 3                               ; xt on top of the Return Stack. MOVE will need ( xt cp u )
000B2Fr 3                               ; on the data stack
000B2Fr 3  CA                           dex
000B30r 3  CA                           dex                     ; ( -- u ? )
000B31r 3  CA                           dex
000B32r 3  CA                           dex                     ; ( -- u ? ? )
000B33r 3               
000B33r 3  B5 04                        lda 4,x
000B35r 3  95 00                        sta 0,x                 ; LSB of u
000B37r 3  B5 05                        lda 5,x
000B39r 3  95 01                        sta 1,x                 ; ( -- u ? u )
000B3Br 3               
000B3Br 3  68                           pla
000B3Cr 3  95 04                        sta 4,x                 ; LSB of xt
000B3Er 3  68                           pla
000B3Fr 3  95 05                        sta 5,x                 ; ( -- xt ? u )
000B41r 3               
000B41r 3  A5 rr                        lda cp                  ; LSB of cp
000B43r 3  95 02                        sta 2,x
000B45r 3  A5 rr                        lda cp+1
000B47r 3  95 03                        sta 3,x                 ; ( -- xt cp u )
000B49r 3               
000B49r 3                               ; --- SPECIAL CASE 1: PREVENT RETURN STACK THRASHINIG ---
000B49r 3               
000B49r 3                               ; Native compiling allows us to strip the stack antics off
000B49r 3                               ; a number of words that use the Return Stack such as >R, R>,
000B49r 3                               ; 2>R and 2R> (but not 2R@ in this version). We compare the
000B49r 3                               ; xt with the contents of the table
000B49r 3  A0 00                        ldy #0
000B4Br 3               
000B4Br 3               @strip_loop:
000B4Br 3  B9 rr rr                     lda @strip_table,y      ; LSB of first word
000B4Er 3  D5 04                        cmp 4,x                 ; LSB of xt
000B50r 3  D0 07                        bne @next_entry
000B52r 3               
000B52r 3                               ; LSB is the same, test MSB
000B52r 3  B9 rr rr                     lda @strip_table+1,y
000B55r 3  D5 05                        cmp 5,x
000B57r 3  F0 0C                        beq @found_entry
000B59r 3               
000B59r 3                               ; MSB is not equal. Pretend though that we've come from LSB
000B59r 3                               ; so we can use the next step for both cases
000B59r 3               @next_entry:
000B59r 3                               ; Not a word that needs stripping, so check next entry in table
000B59r 3                               ; Let's see if we're done with the table (marked by zero entry)
000B59r 3  B9 rr rr                     lda @strip_table,y      ; pointing to LSB
000B5Cr 3  19 rr rr                     ora @strip_table+1,y    ; get MSB
000B5Fr 3  F0 22                        beq @underflow_strip    ; table done, let's get out of here
000B61r 3               
000B61r 3  C8                           iny
000B62r 3  C8                           iny
000B63r 3  80 E6                        bra @strip_loop
000B65r 3               @found_entry:
000B65r 3                               ; This word is one of the ones that needs to have its size
000B65r 3                               ; adjusted during native compile. We find the values in the
000B65r 3                               ; next table with the same index, which is Y. However, Y is
000B65r 3                               ; pointing to the MSB, so we need to go back to the LSB and
000B65r 3                               ; halve the index before we can use it.
000B65r 3  98                           tya
000B66r 3  4A                           lsr
000B67r 3  A8                           tay
000B68r 3               
000B68r 3                               ; Get the adjustment out of the size table. We were clever
000B68r 3                               ; enough to make sure the cut on both ends of the code is
000B68r 3                               ; is the same size.
000B68r 3  B9 rr rr                     lda @strip_size,y
000B6Br 3  85 rr                        sta tmptos              ; save a copy
000B6Dr 3               
000B6Dr 3                               ; Adjust xt: Start later
000B6Dr 3  18                           clc
000B6Er 3  75 04                        adc 4,x
000B70r 3  95 04                        sta 4,x
000B72r 3  90 02                        bcc @2
000B74r 3  F6 05                        inc 5,x                 ; we just care about the carry
000B76r 3               @2:
000B76r 3               
000B76r 3                               ; Adjust u: Quit earlier. Since we cut off the top and the
000B76r 3                               ; bottom of the code, we have to double the value
000B76r 3  06 rr                        asl tmptos
000B78r 3               
000B78r 3  38                           sec
000B79r 3  B5 00                        lda 0,x
000B7Br 3  E5 rr                        sbc tmptos
000B7Dr 3  95 00                        sta 0,x
000B7Fr 3  B0 02                        bcs @3
000B81r 3  D6 01                        dec 1,x                 ; we just care about the borrow
000B83r 3               @3:
000B83r 3                               ; drop through to underflow check stripping
000B83r 3               
000B83r 3               @underflow_strip:
000B83r 3                               ; --- SPECIAL CASE 2: REMOVE UNDERFLOW CHECKING ---
000B83r 3               
000B83r 3                               ; The user can choose to remove the unterflow testing in those
000B83r 3                               ; words that have the UF flag. This shortens the word by
000B83r 3                               ; 3 bytes if there is no underflow.
000B83r 3               
000B83r 3                               ; See if the user wants underflow stripping turned on
000B83r 3  A5 rr                        lda uf_strip
000B85r 3  05 rr                        ora uf_strip+1
000B87r 3  F0 1C                        beq @specials_done
000B89r 3               
000B89r 3                               ; See if this word even contains underflow checking
000B89r 3  A5 rr                        lda tmp3
000B8Br 3  29 10                        and #UF
000B8Dr 3  F0 16                        beq @specials_done
000B8Fr 3               
000B8Fr 3                               ; If we arrived here, underflow has to go. It's always 3 bytes
000B8Fr 3                               ; long. Note hat PICK is a special case.
000B8Fr 3               
000B8Fr 3                               ; Adjust xt: Start later
000B8Fr 3  18                           clc
000B90r 3  B5 04                        lda 4,x
000B92r 3  69 03                        adc #3
000B94r 3  95 04                        sta 4,x
000B96r 3  90 02                        bcc @4
000B98r 3  F6 05                        inc 5,x                  ; we just care about the carry
000B9Ar 3               @4:
000B9Ar 3                               ; Adjust u: End earlier
000B9Ar 3  38                           sec
000B9Br 3  B5 00                        lda 0,x
000B9Dr 3  E9 03                        sbc #3
000B9Fr 3  95 00                        sta 0,x
000BA1r 3  B0 02                        bcs @5
000BA3r 3  D6 01                        dec 1,x                  ; we just care about the borrow
000BA5r 3               @5:
000BA5r 3               
000BA5r 3                               ; --- END OF SPECIAL CASES ---
000BA5r 3               @specials_done:
000BA5r 3                               ; Store size of area to be copied for calculation of
000BA5r 3                               ; new CP. We have to do this after all of the special cases
000BA5r 3                               ; because they might change the size
000BA5r 3  B5 01                        lda 1,x                 ; MSB
000BA7r 3  48                           pha
000BA8r 3  B5 00                        lda 0,x                 ; LSB
000BAAr 3  48                           pha
000BABr 3               
000BABr 3                               ; Enough of this, let's move those bytes already! We have
000BABr 3                               ; ( xt cp u ) on the stack at this point
000BABr 3  20 rr rr                     jsr xt_move
000BAEr 3               
000BAEr 3                               ; Update CP
000BAEr 3  18                           clc
000BAFr 3  68                           pla                     ; LSB
000BB0r 3  65 rr                        adc cp
000BB2r 3  85 rr                        sta cp
000BB4r 3               
000BB4r 3  68                           pla                     ; MSB
000BB5r 3  65 rr                        adc cp+1
000BB7r 3  85 rr                        sta cp+1
000BB9r 3               
000BB9r 3  80 2C                        bra @done
000BBBr 3               
000BBBr 3               @strip_table:
000BBBr 3                              ; List of words we strip the Return Stack antics from
000BBBr 3                              ; during native compile, zero terminated. The index here
000BBBr 3                              ; must be the same as for the sizes
000BBBr 3  rr rr rr rr                  .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
000BBFr 3  rr rr        
000BC1r 3  rr rr rr rr                  .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
000BC5r 3  00 00        
000BC7r 3               
000BC7r 3               @strip_size:
000BC7r 3                               ; List of bytes to be stripped from the words that get their
000BC7r 3                               ; Return Stack antics removed during native compile. Index must
000BC7r 3                               ; be the same as for the xts. Zero terminated.
000BC7r 3  04 04 04 06                  .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
000BCBr 3  06 00        
000BCDr 3               
000BCDr 3               @compile_as_jump:
000BCDr 3                               ; Compile xt as a subroutine jump
000BCDr 3  A9 20                        lda #$20
000BCFr 3  92 rr                        sta (cp)
000BD1r 3               
000BD1r 3  A0 01                        ldy #1
000BD3r 3  68                           pla             ; LSB
000BD4r 3  91 rr                        sta (cp),y
000BD6r 3  C8                           iny
000BD7r 3  68                           pla             ; MSB
000BD8r 3  91 rr                        sta (cp),y
000BDAr 3               
000BDAr 3                               ; allot space we just used
000BDAr 3  A9 03                        lda #3
000BDCr 3  18                           clc
000BDDr 3  65 rr                        adc cp
000BDFr 3  85 rr                        sta cp
000BE1r 3  90 02                        bcc @6
000BE3r 3  E6 rr                        inc cp+1
000BE5r 3               @6:
000BE5r 3  E8                           inx             ; drop xt
000BE6r 3  E8                           inx
000BE7r 3               @done:
000BE7r 3               z_compile_comma:
000BE7r 3  60                           rts
000BE8r 3               
000BE8r 3               
000BE8r 3               
000BE8r 3               ; ## COMPILE_ONLY ( -- ) "Mark most recent word as COMPILE-ONLY"
000BE8r 3               ; ## "compile-only"  tested  Tali Forth
000BE8r 3                       ; """Set the Compile Only flag (CO) of the most recently defined
000BE8r 3                       ; word.
000BE8r 3                       ;
000BE8r 3                       ; The alternative way to do this is to define a word
000BE8r 3                       ; ?COMPILE that makes sure  we're in compile mode
000BE8r 3                       ; """
000BE8r 3               
000BE8r 3               xt_compile_only:
000BE8r 3  20 rr rr                     jsr current_to_dp
000BEBr 3  A0 01                        ldy #1          ; offset for status byte
000BEDr 3  B1 rr                        lda (dp),y
000BEFr 3  09 01                        ora #CO        ; make sure bit 7 is set
000BF1r 3  91 rr                        sta (dp),y
000BF3r 3               
000BF3r 3  60           z_compile_only: rts
000BF4r 3               
000BF4r 3               
000BF4r 3               
000BF4r 3               ; ## CONSTANT ( n "name" -- ) "Define a constant"
000BF4r 3               ; ## "constant"  auto  ANS core
000BF4r 3                       ; """https://forth-standard.org/standard/core/CONSTANT
000BF4r 3                       ;
000BF4r 3                       ; Forth equivalent is  CREATE , DOES> @  but we do
000BF4r 3                       ; more in assembler and let CREATE do the heavy lifting.
000BF4r 3                       ; See http://www.bradrodriguez.com/papers/moving3.htm for
000BF4r 3                       ; a primer on how this works in various Forths. This is the
000BF4r 3                       ; same code as VALUE in our case.
000BF4r 3                       ; """
000BF4r 3               xt_value:
000BF4r 3               xt_constant:
000BF4r 3  20 rr rr                     jsr underflow_1
000BF7r 3               
000BF7r 3  20 rr rr                     jsr xt_create
000BFAr 3               
000BFAr 3                           	; CREATE by default installs a subroutine jump to DOVAR,
000BFAr 3                               ; but we want DOCONST for constants. Go back two bytes and
000BFAr 3                               ; replace the subroutine jump target
000BFAr 3  38                           sec
000BFBr 3  A5 rr                        lda cp
000BFDr 3  E9 02                        sbc #2
000BFFr 3  85 rr                        sta tmp1
000C01r 3  A5 rr                        lda cp+1
000C03r 3  E9 00                        sbc #0
000C05r 3  85 rr                        sta tmp1+1
000C07r 3               
000C07r 3  A9 rr                        lda #<doconst           ; LSB of DOCONST
000C09r 3  92 rr                        sta (tmp1)
000C0Br 3  A0 01                        ldy #1
000C0Dr 3  A9 rr                        lda #>doconst           ; MSB of DOCONST
000C0Fr 3  91 rr                        sta (tmp1),y
000C11r 3               
000C11r 3                               ; Now we save the constant number itself in the next cell
000C11r 3  20 rr rr                     jsr xt_comma            ; drop through to adjust_z
000C14r 3               
000C14r 3               adjust_z:
000C14r 3                               ; Now the length of the complete word (z_word) has increased by
000C14r 3                               ; two. We need to update that number or else words such as SEE
000C14r 3                               ; will ignore the PFA. We use this same routine for VARIABLE,
000C14r 3                               ; VALUE and DEFER
000C14r 3  20 rr rr                     jsr xt_latestnt         ; gives us ( -- nt )
000C17r 3               
000C17r 3                               ; z_word is six bytes further down
000C17r 3  B5 00                        lda 0,x
000C19r 3  85 rr                        sta tmp1
000C1Br 3  B5 01                        lda 1,x
000C1Dr 3  85 rr                        sta tmp1+1
000C1Fr 3               
000C1Fr 3  A0 06                        ldy #6
000C21r 3  B1 rr                        lda (tmp1),y
000C23r 3  18                           clc
000C24r 3  69 02                        adc #2
000C26r 3  91 rr                        sta (tmp1),y
000C28r 3  C8                           iny
000C29r 3  B1 rr                        lda (tmp1),y
000C2Br 3  69 00                        adc #0                  ; only need carry
000C2Dr 3  91 rr                        sta (tmp1),y
000C2Fr 3               
000C2Fr 3  E8                           inx
000C30r 3  E8                           inx
000C31r 3               
000C31r 3               z_value:
000C31r 3  60           z_constant:     rts
000C32r 3               
000C32r 3               
000C32r 3               ; ## COUNT ( c-addr -- addr u ) "Convert character string to normal format"
000C32r 3               ; ## "count"  auto  ANS core
000C32r 3                       ; """https://forth-standard.org/standard/core/COUNT
000C32r 3                       ; Convert old-style character string to address-length pair. Note
000C32r 3                       ; that the length of the string c-addr is stored in character length
000C32r 3                       ; (8 bit), not cell length (16 bit). This is rarely used these days,
000C32r 3                       ; though COUNT can also be used to step through a string character by
000C32r 3                       ; character.
000C32r 3                       ; """
000C32r 3               xt_count:
000C32r 3  20 rr rr                     jsr underflow_1
000C35r 3               
000C35r 3  A1 00                        lda (0,x)       ; Get number of characters (255 max)
000C37r 3  A8                           tay
000C38r 3               
000C38r 3                               ; move start address up by one
000C38r 3  F6 00                        inc 0,x         ; LSB
000C3Ar 3  D0 02                        bne @1
000C3Cr 3  F6 01                        inc 1,x         ; MSB
000C3Er 3               
000C3Er 3                               ; save number of characters to stack
000C3Er 3               @1:
000C3Er 3  98                           tya
000C3Fr 3  CA                           dex
000C40r 3  CA                           dex
000C41r 3  95 00                        sta 0,x         ; LSB
000C43r 3  74 01                        stz 1,x         ; MSB, always zero
000C45r 3               
000C45r 3  60           z_count:        rts
000C46r 3               
000C46r 3               
000C46r 3               ; ## CR ( -- ) "Print a line feed"
000C46r 3               ; ## "cr"  auto  ANS core
000C46r 3                       ; """https://forth-standard.org/standard/core/CR"""
000C46r 3               xt_cr:
000C46r 3  A9 0A                        lda #AscLF
000C48r 3  20 rr rr                     jsr emit_a
000C4Br 3  60           z_cr:           rts
000C4Cr 3               
000C4Cr 3               
000C4Cr 3               ; ## CREATE ( "name" -- ) "Create Dictionary entry for 'name'"
000C4Cr 3               ; ## "create"  auto  ANS core
000C4Cr 3                       ; """https://forth-standard.org/standard/core/CREATE
000C4Cr 3                       ;
000C4Cr 3                       ; See the drawing in headers.asm for details on the header
000C4Cr 3                       ; """
000C4Cr 3               
000C4Cr 3               xt_create:
000C4Cr 3                               ; get string
000C4Cr 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
000C4Fr 3               
000C4Fr 3                               ; if we were given an empty string, we complain and quit
000C4Fr 3  B5 00                        lda 0,x
000C51r 3  15 01                        ora 1,x
000C53r 3  D0 05                        bne @got_name
000C55r 3               
000C55r 3  A9 05                        lda #err_noname
000C57r 3  4C rr rr                     jmp error
000C5Ar 3               
000C5Ar 3               @got_name:
000C5Ar 3                               ; Enforce maximal length of string by overwriting the MSB of
000C5Ar 3                               ; the length. There is a possible error here: If the string
000C5Ar 3                               ; is exactly 255 chars long, then a lot of the following
000C5Ar 3                               ; additions will fail because of wrapping
000C5Ar 3  74 01                        stz 1,x
000C5Cr 3               
000C5Cr 3                               ; Check to see if this name already exists.
000C5Cr 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u )
000C5Fr 3  20 rr rr                     jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
000C62r 3               
000C62r 3  B5 00                        lda 0,x
000C64r 3  15 01                        ora 1,x
000C66r 3  F0 1E                        beq @new_name           ; We haven't seen this one before.
000C68r 3               
000C68r 3                               ; This name already exists.  See if we are supposed to print
000C68r 3                               ; the message for it.
000C68r 3  E8                           inx                     ; Drop flag (nt) from find-name.
000C69r 3  E8                           inx
000C6Ar 3               
000C6Ar 3                               ; Check bit 7
000C6Ar 3  24 rr                        bit status
000C6Cr 3  10 08                        bpl @redefined_name     ; Bit 7 is zero, so print the message.
000C6Er 3               
000C6Er 3                               ; We aren't supposed to print the redefined message ourselves,
000C6Er 3                               ; but we should indicate that it is redefined (for ; to print
000C6Er 3                               ; later).
000C6Er 3  A9 80                        lda #$80                ; Set bit 7 to indicate dup
000C70r 3  05 rr                        ora status
000C72r 3  85 rr                        sta status
000C74r 3  80 18                        bra @process_name
000C76r 3               
000C76r 3               @redefined_name:
000C76r 3                               ; Print the message that the name is redefined.
000C76r 3  A9 02                        lda #str_redefined
000C78r 3  20 rr rr                     jsr print_string_no_lf
000C7Br 3               
000C7Br 3  20 rr rr                     jsr xt_two_dup           ; ( addr u addr u )
000C7Er 3  20 rr rr                     jsr xt_type
000C81r 3  20 rr rr                     jsr xt_space
000C84r 3               
000C84r 3  80 08                        bra @process_name
000C86r 3               
000C86r 3               @new_name:
000C86r 3  E8                           inx                     ; Drop flag (0) from find-name.
000C87r 3  E8                           inx
000C88r 3  A9 7F                        lda #$7F                ; Clear bit 0 of status to indicate new word.
000C8Ar 3  25 rr                        and status
000C8Cr 3  85 rr                        sta status
000C8Er 3               
000C8Er 3               @process_name:
000C8Er 3  B5 00                        lda 0,x
000C90r 3  85 rr                        sta tmp2                ; store length of string in tmp2
000C92r 3               
000C92r 3                               ; remember the first free byte of memory as the start of
000C92r 3                               ; the new word
000C92r 3  A5 rr                        lda cp
000C94r 3  85 rr                        sta tmp1
000C96r 3  A5 rr                        lda cp+1
000C98r 3  85 rr                        sta tmp1+1
000C9Ar 3               
000C9Ar 3                               ; We need 8 bytes plus the length of the string for our new header.
000C9Ar 3                               ; This is also the offset for the start of the code field (the
000C9Ar 3                               ; xt_ label) so we need to remember it. Otherwise, we could
000C9Ar 3                               ; just allot the space afterwards
000C9Ar 3  B5 00                        lda 0,x
000C9Cr 3  18                           clc
000C9Dr 3  69 08                        adc #8
000C9Fr 3  85 rr                        sta tmp3                ; total header length
000CA1r 3               
000CA1r 3                               ; We need three more bytes for for the hardcoded code field
000CA1r 3                               ; area (CFA), the "payload" of the word which by default will
000CA1r 3                               ; be a subroutine jump to DOVAR
000CA1r 3  18                           clc
000CA2r 3  69 03                        adc #3
000CA4r 3               
000CA4r 3                               ; We overwrite the length of the string returned by PARSE-NAME
000CA4r 3                               ; and then call ALLOT
000CA4r 3  95 00                        sta 0,x
000CA6r 3  74 01                        stz 1,x         ; max header size is 255 chars
000CA8r 3  20 rr rr                     jsr xt_allot    ; ( addr )
000CABr 3               
000CABr 3                               ; Get the CURRENT dictionary pointer.
000CABr 3  20 rr rr                     jsr current_to_dp
000CAEr 3               
000CAEr 3                               ; Now we walk through the header with Y as the index, adding
000CAEr 3                               ; information byte-by-byte
000CAEr 3  A0 00                        ldy #0
000CB0r 3               
000CB0r 3                               ; HEADER BYTE 0: Length of string
000CB0r 3  A5 rr                        lda tmp2
000CB2r 3  91 rr                        sta (tmp1),y
000CB4r 3               
000CB4r 3                               ; HEADER BYTE 1: Status byte. By default, we set all new words
000CB4r 3                               ; to "never native", user will have to decide if they should
000CB4r 3                               ; be inlined
000CB4r 3  A9 08                        lda #NN
000CB6r 3               
000CB6r 3                               ; Also, words defined by CREATE are marked in the header has
000CB6r 3                               ; having a Code Field Area (CFA), which is a bit tricky for
000CB6r 3                               ; Subroutine Threaded Code (STC). We do this so >BODY works
000CB6r 3                               ; correctly with DOES> and CREATE. See the discussion at
000CB6r 3                               ; http://forum.6502.org/viewtopic.php?f=9&t=5182 for details
000CB6r 3  09 20                        ora #HC
000CB8r 3  C8                           iny
000CB9r 3  91 rr                        sta (tmp1),y
000CBBr 3  C8                           iny
000CBCr 3               
000CBCr 3                               ; HEADER BYTE 2,3: Next header. This is the current last word
000CBCr 3                               ; in the Dictionary
000CBCr 3  A5 rr                        lda dp
000CBEr 3  91 rr                        sta (tmp1),y
000CC0r 3  C8                           iny
000CC1r 3  A5 rr                        lda dp+1
000CC3r 3  91 rr                        sta (tmp1),y
000CC5r 3  C8                           iny
000CC6r 3               
000CC6r 3                               ; Interlude: Make old CP new DP (new start of Dictionary)
000CC6r 3  A5 rr                        lda tmp1+1
000CC8r 3  85 rr                        sta dp+1
000CCAr 3  A5 rr                        lda tmp1
000CCCr 3  85 rr                        sta dp
000CCEr 3               
000CCEr 3                               ; HEADER BYTE 4,5: Start of the code field ("xt_" of this word).
000CCEr 3                               ; This begins after the header so we take the length of the
000CCEr 3                               ; header, which we cleverly saved in tmp3, and use it as an
000CCEr 3                               ; offset to the address of the start of the word. We come here
000CCEr 3                               ; with tmp1 in A
000CCEr 3  18                           clc
000CCFr 3  65 rr                        adc tmp3        ; add total header length
000CD1r 3  91 rr                        sta (tmp1),y
000CD3r 3  48                           pha             ; we need this in the next step
000CD4r 3  C8                           iny
000CD5r 3               
000CD5r 3  A5 rr                        lda tmp1+1
000CD7r 3  69 00                        adc #0          ; only need the carry
000CD9r 3  91 rr                        sta (tmp1),y
000CDBr 3  C8                           iny
000CDCr 3               
000CDCr 3                               ; HEADER BYTE 6,7: End of code ("z_" of this word). By default,
000CDCr 3                               ; we execute a jump to the DOVAR routine, so we need to move three
000CDCr 3                               ; bytes down, and then one more byte so that the z_ label points
000CDCr 3                               ; to the (still fictional) RTS instruction for correct compilation
000CDCr 3  68                           pla             ; LSB of "z_" address
000CDDr 3  18                           clc
000CDEr 3  69 03                        adc #3
000CE0r 3  91 rr                        sta (tmp1),y
000CE2r 3               
000CE2r 3  88                           dey             ; get the MSB of xt back
000CE3r 3  B1 rr                        lda (tmp1),y
000CE5r 3  69 00                        adc #0          ; only need the carry
000CE7r 3  C8                           iny
000CE8r 3  C8                           iny
000CE9r 3  91 rr                        sta (tmp1),y
000CEBr 3  C8                           iny
000CECr 3               
000CECr 3                               ; HEADER BYTE 8: Start of name string. The address is TOS, the
000CECr 3                               ; length in tmp2. We subtract 8 from the address so we can
000CECr 3                               ; use the same loop index, which is already 8 byte ahead at
000CECr 3                               ; this point
000CECr 3  B5 00                        lda 0,x
000CEEr 3  38                           sec
000CEFr 3  E9 08                        sbc #8
000CF1r 3  85 rr                        sta tmptos
000CF3r 3               
000CF3r 3  B5 01                        lda 1,x
000CF5r 3  E9 00                        sbc #0          ; only need carry
000CF7r 3  85 rr                        sta tmptos+1
000CF9r 3               
000CF9r 3               @name_loop:
000CF9r 3  B1 rr                        lda (tmptos),y
000CFBr 3               
000CFBr 3                               ; Make sure it goes into the dictionary in lower case.
000CFBr 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
000CFDr 3  B0 07                        bcs @store_name
000CFFr 3  C9 41                        cmp #$41        ; ASCII 'A'
000D01r 3  90 03                        bcc @store_name
000D03r 3               
000D03r 3                               ; An uppercase letter has been located. Make it
000D03r 3                               ; lowercase.
000D03r 3  18                           clc
000D04r 3  69 20                        adc #$20
000D06r 3               
000D06r 3                               ; Fall into @store_name.
000D06r 3               
000D06r 3               @store_name:
000D06r 3  91 rr                        sta (tmp1),y
000D08r 3  C8                           iny
000D09r 3  C6 rr                        dec tmp2
000D0Br 3  D0 EC                        bne @name_loop
000D0Dr 3               
000D0Dr 3                               ; After thename string comes the code field, starting at the
000D0Dr 3                               ; current xt of this word, which is initially a jump to the
000D0Dr 3                               ; subroutine to DOVAR. We code this jump by hand
000D0Dr 3  A9 20                        lda #$20        ; opcode of JSR
000D0Fr 3  91 rr                        sta (tmp1),y
000D11r 3  C8                           iny
000D12r 3  A9 rr                        lda #<dovar
000D14r 3  91 rr                        sta (tmp1),y
000D16r 3  C8                           iny
000D17r 3  A9 rr                        lda #>dovar
000D19r 3  91 rr                        sta (tmp1),y
000D1Br 3               
000D1Br 3                               ; Update the CURRENT wordlist with the new DP.
000D1Br 3                               ; We do this down here because this routine uses Y.
000D1Br 3  20 rr rr                     jsr dp_to_current
000D1Er 3               
000D1Er 3                               ; And we're done. Restore stack
000D1Er 3  E8                           inx
000D1Fr 3  E8                           inx
000D20r 3               
000D20r 3  60           z_create:       rts
000D21r 3               
000D21r 3               
000D21r 3               
000D21r 3               ; ## D_MINUS ( d d -- d ) "Subtract two double-celled numbers"
000D21r 3               ; ## "d-"  auto  ANS double
000D21r 3                       ; """https://forth-standard.org/standard/double/DMinus"""
000D21r 3               
000D21r 3               xt_d_minus:
000D21r 3  20 rr rr                     jsr underflow_4 ; two double numbers
000D24r 3               
000D24r 3  38                           sec
000D25r 3               
000D25r 3  B5 06                        lda 6,x         ; LSB of lower word
000D27r 3  F5 02                        sbc 2,x
000D29r 3  95 06                        sta 6,x
000D2Br 3               
000D2Br 3  B5 07                        lda 7,x         ; MSB of lower word
000D2Dr 3  F5 03                        sbc 3,x
000D2Fr 3  95 07                        sta 7,x
000D31r 3               
000D31r 3  B5 04                        lda 4,x         ; LSB of upper word
000D33r 3  F5 00                        sbc 0,x
000D35r 3  95 04                        sta 4,x
000D37r 3               
000D37r 3  B5 05                        lda 5,x         ; MSB of upper word
000D39r 3  F5 01                        sbc 1,x
000D3Br 3  95 05                        sta 5,x
000D3Dr 3               
000D3Dr 3  E8                           inx
000D3Er 3  E8                           inx
000D3Fr 3  E8                           inx
000D40r 3  E8                           inx
000D41r 3               
000D41r 3  60           z_d_minus:      rts
000D42r 3               
000D42r 3               
000D42r 3               
000D42r 3               ; ## D_PLUS ( d d -- d ) "Add two double-celled numbers"
000D42r 3               ; ## "d+"  auto  ANS double
000D42r 3                       ; """https://forth-standard.org/standard/double/DPlus"""
000D42r 3               
000D42r 3               xt_d_plus:
000D42r 3  20 rr rr                     jsr underflow_4 ; two double numbers
000D45r 3               
000D45r 3  18                           clc
000D46r 3  B5 02                        lda 2,x         ; LSB of lower word
000D48r 3  75 06                        adc 6,x
000D4Ar 3  95 06                        sta 6,x
000D4Cr 3               
000D4Cr 3  B5 03                        lda 3,x         ; MSB of lower word
000D4Er 3  75 07                        adc 7,x
000D50r 3  95 07                        sta 7,x
000D52r 3               
000D52r 3  B5 00                        lda 0,x         ; LSB of upper word
000D54r 3  75 04                        adc 4,x
000D56r 3  95 04                        sta 4,x
000D58r 3               
000D58r 3  B5 01                        lda 1,x         ; MSB of upper word
000D5Ar 3  75 05                        adc 5,x
000D5Cr 3  95 05                        sta 5,x
000D5Er 3               
000D5Er 3  E8                           inx
000D5Fr 3  E8                           inx
000D60r 3  E8                           inx
000D61r 3  E8                           inx
000D62r 3               
000D62r 3  60           z_d_plus:       rts
000D63r 3               
000D63r 3               
000D63r 3               
000D63r 3               ; ## D_TO_S ( d -- n ) "Convert a double number to single"
000D63r 3               ; ## "d>s"  auto  ANS double
000D63r 3                       ; """https://forth-standard.org/standard/double/DtoS
000D63r 3                       ; Though this is basically just DROP, we keep it
000D63r 3                       ; separate so we can test for underflow
000D63r 3                       ; """
000D63r 3               
000D63r 3               xt_d_to_s:
000D63r 3  20 rr rr                     jsr underflow_2
000D66r 3               
000D66r 3  E8                           inx
000D67r 3  E8                           inx
000D68r 3               
000D68r 3  60           z_d_to_s:       rts
000D69r 3               
000D69r 3               
000D69r 3               
000D69r 3               ; ## DABS ( d -- d ) "Return the absolute value of a double"
000D69r 3               ; ## "dabs"  auto  ANS double
000D69r 3                       ; """https://forth-standard.org/standard/double/DABS"""
000D69r 3               
000D69r 3               xt_dabs:
000D69r 3  20 rr rr                     jsr underflow_2 ; double number
000D6Cr 3               
000D6Cr 3  B5 01                        lda 1,x         ; MSB of high cell
000D6Er 3  10 17                        bpl @done       ; positive, we get off light
000D70r 3               
000D70r 3                               ; negative, calculate 0 - d
000D70r 3  A0 00                        ldy #0
000D72r 3  38                           sec
000D73r 3               
000D73r 3  98                           tya
000D74r 3  F5 02                        sbc 2,x         ; LSB of low cell
000D76r 3  95 02                        sta 2,x
000D78r 3               
000D78r 3  98                           tya
000D79r 3  F5 03                        sbc 3,x         ; MSB of low cell
000D7Br 3  95 03                        sta 3,x
000D7Dr 3               
000D7Dr 3  98                           tya
000D7Er 3  F5 00                        sbc 0,x         ; LSB of high cell
000D80r 3  95 00                        sta 0,x
000D82r 3               
000D82r 3  98                           tya
000D83r 3  F5 01                        sbc 1,x         ; MSB of high cell
000D85r 3  95 01                        sta 1,x
000D87r 3               @done:
000D87r 3  60           z_dabs:         rts
000D88r 3               
000D88r 3               
000D88r 3               
000D88r 3               ; ## DECIMAL ( -- ) "Change radix base to decimal"
000D88r 3               ; ## "decimal"  auto  ANS core
000D88r 3                       ; """https://forth-standard.org/standard/core/DECIMAL"""
000D88r 3               xt_decimal:
000D88r 3  A9 0A                        lda #10
000D8Ar 3  85 rr                        sta base
000D8Cr 3  64 rr                        stz base+1              ; paranoid
000D8Er 3               
000D8Er 3  60           z_decimal:      rts
000D8Fr 3               
000D8Fr 3               
000D8Fr 3               ; ## DEFER ( "name" -- ) "Create a placeholder for words by name"
000D8Fr 3               ; ## "defer"  auto  ANS core ext
000D8Fr 3                       ; """https://forth-standard.org/standard/core/DEFER
000D8Fr 3                       ; Reserve an name that can be linked to various xt by IS.
000D8Fr 3                       ;
000D8Fr 3                       ; The ANS reference implementation is
000D8Fr 3                       ;       CREATE ['] ABORT , DOES> @ EXECUTE ;
000D8Fr 3                       ; But we use this routine as a low-level word so things go faster
000D8Fr 3               
000D8Fr 3               xt_defer:
000D8Fr 3  20 rr rr                     jsr xt_create
000D92r 3               
000D92r 3                               ; CREATE by default installs a subroutine jump to DOVAR,
000D92r 3                               ; but we actually want DODEFER this time. Go back two
000D92r 3                               ; bytes and repace the subroutine jump target
000D92r 3  A5 rr                        lda cp          ; LSB
000D94r 3  38                           sec
000D95r 3  E9 02                        sbc #2
000D97r 3  85 rr                        sta tmp1
000D99r 3               
000D99r 3  A5 rr                        lda cp+1        ; MSB
000D9Br 3  E9 00                        sbc #0          ; we only care about the borrow
000D9Dr 3  85 rr                        sta tmp1+1
000D9Fr 3               
000D9Fr 3                               ; Save the target address
000D9Fr 3  A0 00                        ldy #0
000DA1r 3  A9 rr                        lda #<dodefer   ; LSB
000DA3r 3  91 rr                        sta (tmp1),y
000DA5r 3  C8                           iny
000DA6r 3  A9 rr                        lda #>dodefer   ; MSB
000DA8r 3  91 rr                        sta (tmp1),y
000DAAr 3               
000DAAr 3               
000DAAr 3                               ; DODEFER executes the next address it finds after
000DAAr 3                               ; its call. As default, we include the error
000DAAr 3                               ; "Defer not defined"
000DAAr 3  A9 rr                        lda #<defer_error
000DACr 3  92 rr                        sta (cp)
000DAEr 3  E6 rr                        inc cp
000DB0r 3  D0 02                        bne @1
000DB2r 3  E6 rr                        inc cp+1
000DB4r 3               @1:
000DB4r 3  A9 rr                        lda #>defer_error
000DB6r 3  92 rr                        sta (cp)
000DB8r 3  E6 rr                        inc cp
000DBAr 3  D0 02                        bne @2
000DBCr 3  E6 rr                        inc cp+1
000DBEr 3               @2:
000DBEr 3  20 rr rr                     jsr adjust_z    ; adjust header to correct length
000DC1r 3               
000DC1r 3  60           z_defer:        rts
000DC2r 3               
000DC2r 3               
000DC2r 3               
000DC2r 3               ; ## DEFER_FETCH ( xt1 -- xt2 ) "Get the current XT for a deferred word"
000DC2r 3               ; ## "defer@"  auto  ANS core ext
000DC2r 3                       ; """http://forth-standard.org/standard/core/DEFERFetch"""
000DC2r 3               
000DC2r 3               xt_defer_fetch:
000DC2r 3                               ; No underflow checking as >BODY does it.
000DC2r 3  20 rr rr                     jsr xt_to_body
000DC5r 3  20 rr rr                     jsr xt_fetch
000DC8r 3  60           z_defer_fetch:  rts
000DC9r 3               
000DC9r 3               
000DC9r 3               
000DC9r 3               ; ## DEFER_STORE ( xt2 x1 -- ) "Set xt1 to execute xt2"
000DC9r 3               ; ## "defer!"  auto  ANS core ext
000DC9r 3                       ; """http://forth-standard.org/standard/core/DEFERStore"""
000DC9r 3               
000DC9r 3               xt_defer_store:
000DC9r 3                               ; No underflow checking as >BODY and ! do it.
000DC9r 3  20 rr rr                     jsr xt_to_body
000DCCr 3  20 rr rr                     jsr xt_store
000DCFr 3  60           z_defer_store:  rts
000DD0r 3               
000DD0r 3               
000DD0r 3               
000DD0r 3               ; ## DEFINITIONS ( -- ) "Make first wordlist in search order the current wordlist"
000DD0r 3               ; ## "definitions" auto ANS search
000DD0r 3               xt_definitions:
000DD0r 3  A0 1F                        ldy #search_order_offset    ; Transfer byte variable
000DD2r 3  B1 rr                        lda (up),y                  ; SEARCH_ORDER[0] to
000DD4r 3  A0 04                        ldy #current_offset         ; byte variable CURRENT.
000DD6r 3  91 rr                        sta (up),y
000DD8r 3  60           z_definitions:  rts
000DD9r 3               
000DD9r 3               
000DD9r 3               ; ## DEPTH ( -- u ) "Get number of cells (not bytes) used by stack"
000DD9r 3               ; ## "depth"  auto  ANS core
000DD9r 3                       ; """https://forth-standard.org/standard/core/DEPTH"""
000DD9r 3               xt_depth:
000DD9r 3  A9 rr                        lda #dsp0
000DDBr 3  86 rr                        stx tmpdsp
000DDDr 3  38                           sec
000DDEr 3  E5 rr                        sbc tmpdsp
000DE0r 3               
000DE0r 3                               ; divide by two because each cell is two bytes
000DE0r 3  4A                           lsr
000DE1r 3               
000DE1r 3  CA                           dex
000DE2r 3  CA                           dex
000DE3r 3  95 00                        sta 0,x
000DE5r 3  74 01                        stz 1,x
000DE7r 3               
000DE7r 3  60           z_depth:        rts
000DE8r 3               
000DE8r 3               
000DE8r 3               ; ## DIGIT_QUESTION ( char -- u f | char f ) "Convert ASCII char to number"
000DE8r 3               ; ## "digit?"  auto  Tali Forth
000DE8r 3                       ; """Inspired by the pForth instruction DIGIT, see
000DE8r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
000DE8r 3                       ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to
000DE8r 3                       ; pForth, we get the base (radix) ourselves instead of having the
000DE8r 3                       ; user provide it. There is no standard name for this routine, which
000DE8r 3                       ; itself is not ANS; we use DIGIT? following pForth and Gforth.
000DE8r 3                       ; """
000DE8r 3               
000DE8r 3               xt_digit_question:
000DE8r 3  20 rr rr                     jsr underflow_1
000DEBr 3               
000DEBr 3                               ; one way or another, we're going to need room for the
000DEBr 3                               ; flag on the stack
000DEBr 3  CA                           dex
000DECr 3  CA                           dex
000DEDr 3  74 00                        stz 0,x                 ; default flag is failure
000DEFr 3  74 01                        stz 1,x
000DF1r 3  74 03                        stz 3,x                 ; paranoid
000DF3r 3               
000DF3r 3                               ; Check the character, now in the LSB of NOS. First, make
000DF3r 3                               ; sure we're not below the ASCII code for "0"
000DF3r 3  B5 02                        lda 2,x
000DF5r 3  C9 30                        cmp #'0'
000DF7r 3  90 23                        bcc @done               ; failure flag already set
000DF9r 3               
000DF9r 3                               ; Next, see if we are below "9", because that would make
000DF9r 3                               ; this a normal number
000DF9r 3  C9 3A                        cmp #'9'+1               ; this is actually ":"
000DFBr 3  90 12                        bcc @checkbase
000DFDr 3               
000DFDr 3                               ; Well, then let's see if this is the gap between "9" and "A"
000DFDr 3                               ; so we can treat the whole range as a number
000DFDr 3  C9 41                        cmp #'A'
000DFFr 3  90 1B                        bcc @done               ; failure flag is already set
000E01r 3               
000E01r 3                               ; probably a letter, so we make sure it is uppercase
000E01r 3  C9 61                        cmp #'a'
000E03r 3  90 07                        bcc @case_done          ; not lower case, too low
000E05r 3  C9 7B                        cmp #'z'+1
000E07r 3  B0 03                        bcs @case_done          ; not lower case, too high
000E09r 3               
000E09r 3  18                           clc                     ; just right
000E0Ar 3  69 E0                        adc #$e0                ; offset to upper case (wraps)
000E0Cr 3               
000E0Cr 3               @case_done:
000E0Cr 3                               ; get rid of the gap between "9" and "A" so we can treat
000E0Cr 3                               ; the whole range as one number
000E0Cr 3  38                           sec
000E0Dr 3  E9 07                        sbc #7                  ; fall through to @checkbase
000E0Fr 3               
000E0Fr 3               @checkbase:
000E0Fr 3                               ; we have a number, now see if it falls inside the range
000E0Fr 3                               ; provided by BASE
000E0Fr 3  38                           sec
000E10r 3  E9 30                        sbc #'0'                 ; this is also the conversion step
000E12r 3  C5 rr                        cmp base
000E14r 3  B0 06                        bcs @done               ; already have false flag
000E16r 3               
000E16r 3                               ; Found a legal number
000E16r 3  95 02                        sta 2,x                 ; put number in NOS
000E18r 3  D6 00                        dec 0,x                 ; set success flag
000E1Ar 3  D6 01                        dec 1,x
000E1Cr 3               
000E1Cr 3               @done:
000E1Cr 3               z_digit_question:
000E1Cr 3  60                           rts
000E1Dr 3               
000E1Dr 3               
000E1Dr 3               ; ## DISASM ( addr u -- ) "Disassemble a block of memory"
000E1Dr 3               ; ## "disasm"  tested  Tali Forth
000E1Dr 3                       ; """Convert a segment of memory to assembler output. This
000E1Dr 3                       ; word is vectored so people can add their own disassembler.
000E1Dr 3                       ; Natively, this produces Simpler Assembly Notation (SAN)
000E1Dr 3                       ; code, see the section on The Disassembler in the manual and
000E1Dr 3                       ; the file disassembler.asm for more details.
000E1Dr 3                       ; """
000E1Dr 3               xt_disasm:
000E1Dr 3  20 rr rr                     jsr underflow_2
000E20r 3                           .ifdef TALI_OPTIONAL_ASSEMBLER
000E20r 3  20 rr rr                     jsr disassembler
000E23r 3                           .endif
000E23r 3               
000E23r 3  60           z_disasm:       rts
000E24r 3               
000E24r 3               
000E24r 3               ; ## DNEGATE ( d -- d ) "Negate double cell number"
000E24r 3               ; ## "dnegate"  auto  ANS double
000E24r 3                       ; """https://forth-standard.org/standard/double/DNEGATE"""
000E24r 3               xt_dnegate:
000E24r 3  20 rr rr                     jsr underflow_2 ; double number
000E27r 3               
000E27r 3  A0 00             		ldy #0
000E29r 3  38                           sec
000E2Ar 3               
000E2Ar 3  98                           tya
000E2Br 3  F5 02                        sbc 2,x         ; LSB of low cell
000E2Dr 3  95 02                        sta 2,x
000E2Fr 3               
000E2Fr 3  98                           tya
000E30r 3  F5 03                        sbc 3,x         ; MSB of low cell
000E32r 3  95 03                        sta 3,x
000E34r 3               
000E34r 3  98                           tya
000E35r 3  F5 00                        sbc 0,x         ; LSB of high cell
000E37r 3  95 00                        sta 0,x
000E39r 3               
000E39r 3  98                           tya
000E3Ar 3  F5 01                        sbc 1,x         ; MSB of high cell
000E3Cr 3  95 01                        sta 1,x
000E3Er 3               
000E3Er 3  60           z_dnegate:      rts
000E3Fr 3               
000E3Fr 3               
000E3Fr 3               ; ## QUESTION_DO ( limit start -- )(R: -- limit start) "Conditional loop start"
000E3Fr 3               ; ## "?do"  auto  ANS core ext
000E3Fr 3                       ; """https://forth-standard.org/standard/core/qDO"""
000E3Fr 3               xt_question_do:
000E3Fr 3                               ; ?DO shares most of its code with DO. We use the tmp1 flag
000E3Fr 3                               ; to mark which is which
000E3Fr 3  A9 FF                        lda #$ff                ; -1 is ?DO, jump to common code
000E41r 3  85 rr                        sta tmp1
000E43r 3  80 02                        bra do_common           ; skip flag for DO
000E45r 3               
000E45r 3               ; ## DO ( limit start -- )(R: -- limit start)  "Start a loop"
000E45r 3               ; ## "do"  auto  ANS core
000E45r 3                       ; """https://forth-standard.org/standard/core/DO
000E45r 3                       ;
000E45r 3                       ; Compile-time part of DO. Could be realized in Forth as
000E45r 3                       ;       : DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY
000E45r 3                       ; but we do it in assembler for speed. To work with LEAVE, we compile
000E45r 3                       ; a routine that pushes the end address to the Return Stack at run
000E45r 3                       ; time. This is based on a suggestion by Garth Wilson, see
000E45r 3                       ; the Control Flow section of the manual for details.
000E45r 3                       ;
000E45r 3                       ; This may not be native compile. Don't check for a stack underflow
000E45r 3                       ; """
000E45r 3               
000E45r 3               xt_do:
000E45r 3                               ; DO and ?DO share most of their code, use tmp1 as a flag.
000E45r 3  64 rr                        stz tmp1                ; 0 is DO, drop through to DO_COMMON
000E47r 3               do_common:
000E47r 3                               ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
000E47r 3                               ; compile the address we need to LDA at runtime
000E47r 3  CA                           dex
000E48r 3  CA                           dex
000E49r 3  A5 rr                        lda cp
000E4Br 3  95 00                        sta 0,x                 ; LSB
000E4Dr 3  A5 rr                        lda cp+1
000E4Fr 3  95 01                        sta 1,x                 ; MSB   ( limit start here )
000E51r 3               
000E51r 3                               ; now we compile six dummy bytes that LOOP/+LOOP will
000E51r 3                               ; replace by the actual LDA/PHA instructions
000E51r 3  A9 05                        lda #5                  ; we don't really care about the value,
000E53r 3  A8                           tay                     ; so we use 5 to be tricky
000E54r 3               @loop:
000E54r 3  91 rr                        sta (cp),y
000E56r 3  88                           dey
000E57r 3  10 FB                        bpl @loop
000E59r 3               
000E59r 3                               ; update CP
000E59r 3  1A                           inc             ; we used 5 as a dummy value, this is why
000E5Ar 3  18                           clc
000E5Br 3  65 rr                        adc cp
000E5Dr 3  85 rr                        sta cp
000E5Fr 3  90 02                        bcc @1
000E61r 3  E6 rr                        inc cp+1
000E63r 3               @1:
000E63r 3                               ; compile the (?DO) portion of ?DO if appropriate
000E63r 3  A5 rr                        lda tmp1
000E65r 3  F0 17                        beq @compile_do
000E67r 3               
000E67r 3                               ; We came from ?DO, so compile its runtime first. We do
000E67r 3                               ; this with a quick loop because we know it has to be
000E67r 3                               ; Always Native anyway
000E67r 3  A0 14                        ldy #question_do_runtime_end-question_do_runtime
000E69r 3  5A                           phy             ; save counter to calculate new CP
000E6Ar 3               @2:
000E6Ar 3  B9 rr rr                     lda question_do_runtime,y
000E6Dr 3  91 rr                        sta (cp),y
000E6Fr 3  88                           dey
000E70r 3  10 F8                        bpl @2
000E72r 3               
000E72r 3                               ; adjust CP
000E72r 3  68                           pla             ; retrieve counter
000E73r 3  18                           clc
000E74r 3  65 rr                        adc cp
000E76r 3  85 rr                        sta cp
000E78r 3  A5 rr                        lda cp+1
000E7Ar 3  69 00                        adc #0          ; only care about carry
000E7Cr 3  85 rr                        sta cp+1        ; fall through to @compile_do
000E7Er 3               
000E7Er 3               @compile_do:
000E7Er 3                               ; compile runtime part of DO.
000E7Er 3  A0 24                        ldy #do_runtime_end-do_runtime  ; counter
000E80r 3  5A                           phy             ; save counter to calculate new CP
000E81r 3               @3:
000E81r 3  B9 rr rr                     lda do_runtime,y
000E84r 3  91 rr                        sta (cp),y
000E86r 3  88                           dey
000E87r 3  10 F8                        bpl @3
000E89r 3               
000E89r 3                               ; adjust CP
000E89r 3  68                           pla             ; retrieve counter
000E8Ar 3  18                           clc
000E8Br 3  65 rr                        adc cp
000E8Dr 3  85 rr                        sta cp
000E8Fr 3  A5 rr                        lda cp+1
000E91r 3  69 00                        adc #0          ; only care about carry
000E93r 3  85 rr                        sta cp+1
000E95r 3               
000E95r 3                               ; HERE, hardcoded for speed. We put it on the Data Stack
000E95r 3                               ; where LOOP/+LOOP takes it from. Note this has nothing to
000E95r 3                               ; do with the HERE we're saving for LEAVE
000E95r 3  CA                           dex
000E96r 3  CA                           dex
000E97r 3  A5 rr                        lda cp          ; LSB
000E99r 3  95 00                        sta 0,x
000E9Br 3  A5 rr                        lda cp+1        ; MSB
000E9Dr 3  95 01                        sta 1,x
000E9Fr 3               z_question_do:
000E9Fr 3  60           z_do:           rts
000EA0r 3               
000EA0r 3               
000EA0r 3               do_runtime:
000EA0r 3                       ; """Runtime routine for DO loop. Note that ANS loops quit when the
000EA0r 3                       ; boundry of limit-1 and limit is reached, a different mechanism than
000EA0r 3                       ; the FIG Forth loop (you can see which version you have by running
000EA0r 3                       ; a loop with start and limit as the same value, for instance
000EA0r 3                       ; 0 0 DO -- these will walk through the number space). We use a
000EA0r 3                       ; "fudge factor" for the limit that makes the Overflow Flag trip when
000EA0r 3                       ; it is reached; see http://forum.6502.org/viewtopic.php?f=9&t=2026
000EA0r 3                       ; for further discussion of this. The source given there for
000EA0r 3                       ; this idea is Laxen & Perry F83. -- This routine is called (DO)
000EA0r 3                       ; in some Forths. Usually, we would define this as a separate word
000EA0r 3                       ; and compile it with COMPILE, and the Always Native (AN) flag.
000EA0r 3                       ; However, we can do it faster if we just copy the bytes
000EA0r 3                       ; of this routine with a simple loop in DO.
000EA0r 3                       ; """
000EA0r 3                               ; First step: create fudge factor (FUFA) by subtracting the
000EA0r 3                               ; limit from $8000, the number that will trip the overflow
000EA0r 3                               ; flag
000EA0r 3  38                           sec
000EA1r 3  A9 00                        lda #0
000EA3r 3  F5 02                        sbc 2,x         ; LSB of limit
000EA5r 3  95 02                        sta 2,x         ; save FUFA for later use
000EA7r 3               
000EA7r 3  A9 80                        lda #$80
000EA9r 3  F5 03                        sbc 3,x         ; MSB of limit
000EABr 3  95 03                        sta 3,x         ; save FUFA for later use
000EADr 3  48                           pha             ; FUFA replaces limit on R stack
000EAEr 3  B5 02                        lda 2,x         ; LSB of limit
000EB0r 3  48                           pha
000EB1r 3               
000EB1r 3                               ; Second step: index is FUFA plus original index
000EB1r 3  18                           clc
000EB2r 3  B5 00                        lda 0,x         ; LSB of original index
000EB4r 3  75 02                        adc 2,x         ; add LSB of FUFA
000EB6r 3  95 00                        sta 0,x
000EB8r 3  B5 01                        lda 1,x         ; MSB of orginal index
000EBAr 3  75 03                        adc 3,x         ; add MSB of FUFA
000EBCr 3  48                           pha
000EBDr 3  B5 00                        lda 0,x         ; LSB of index
000EBFr 3  48                           pha
000EC0r 3               
000EC0r 3                               ; we've saved the FUFA on the NOS of the R stack, so we can
000EC0r 3                               ; use it later. Clean the Data Stack
000EC0r 3  E8                           inx
000EC1r 3  E8                           inx
000EC2r 3  E8                           inx
000EC3r 3  E8                           inx             ; no RTS because this is copied into code
000EC4r 3               do_runtime_end:
000EC4r 3               
000EC4r 3               question_do_runtime:
000EC4r 3               
000EC4r 3                       ; """This is called (?DO) in some Forths. See the explanation at
000EC4r 3                       ; do_runtime for the background on this design
000EC4r 3                       ; """
000EC4r 3                               ; see if TOS and NOS are equal. Change this to assembler
000EC4r 3                               ; for speed
000EC4r 3  20 rr rr                     jsr xt_two_dup          ; ( n1 n2 n1 n2 )
000EC7r 3  20 rr rr                     jsr xt_equal            ; ( -- n1 n2 f )
000ECAr 3               
000ECAr 3  B5 00                        lda 0,x
000ECCr 3  15 01                        ora 1,x
000ECEr 3  F0 06                        beq @do_do
000ED0r 3               
000ED0r 3                               ; We're equal, so dump everything and jump beyond the loop.
000ED0r 3                               ; But first, dump six entries off of the Data Stack
000ED0r 3  8A                           txa
000ED1r 3  18                           clc
000ED2r 3  69 06                        adc #6
000ED4r 3  AA                           tax
000ED5r 3               
000ED5r 3                               ; Then abort the whole loop
000ED5r 3  60                           rts
000ED6r 3               @do_do:
000ED6r 3  E8                           inx             ; clear flag from EQUAL off stack
000ED7r 3  E8                           inx             ; no RTS because this is copied into code
000ED8r 3               question_do_runtime_end:
000ED8r 3               
000ED8r 3               
000ED8r 3               
000ED8r 3               ; ## DOES ( -- ) "Add payload when defining new words"
000ED8r 3               ; ## "does>"  auto  ANS core
000ED8r 3                       ; """https://forth-standard.org/standard/core/DOES
000ED8r 3                       ; Create the payload for defining new defining words. See
000ED8r 3                       ; http://www.bradrodriguez.com/papers/moving3.htm and
000ED8r 3                       ; the Developer Guide in the manual for a discussion of
000ED8r 3                       ; DOES>'s internal workings. This uses tmp1 and tmp2.
000ED8r 3                       ; """
000ED8r 3               
000ED8r 3               xt_does:
000ED8r 3                               ; compile a subroutine jump to runtime of DOES>
000ED8r 3  A0 rr                        ldy #>does_runtime
000EDAr 3  A9 rr                        lda #<does_runtime
000EDCr 3  20 rr rr                     jsr cmpl_subroutine
000EDFr 3               
000EDFr 3                               ; compile a subroutine jump to DODOES. In traditional
000EDFr 3                               ; terms, this is the Code Field Area (CFA) of the new
000EDFr 3                               ; word
000EDFr 3  A0 rr                        ldy #>dodoes
000EE1r 3  A9 rr                        lda #<dodoes
000EE3r 3  20 rr rr                     jsr cmpl_subroutine
000EE6r 3               
000EE6r 3  60           z_does:         rts
000EE7r 3               
000EE7r 3               
000EE7r 3               does_runtime:
000EE7r 3                       ; """Runtime portion of DOES>. This replaces the subroutine jump
000EE7r 3                       ; to DOVAR that CREATE automatically encodes by a jump to the
000EE7r 3                       ; address that contains a subroutine jump to DODOES. We don't
000EE7r 3                       ; jump to DODOES directly because we need to work our magic with
000EE7r 3                       ; the return addresses. This routine is also known as "(DOES)" in
000EE7r 3                       ; other Forths
000EE7r 3                       ; """
000EE7r 3               
000EE7r 3  7A                           ply             ; LSB
000EE8r 3  68                           pla             ; MSB
000EE9r 3               
000EE9r 3  C8                           iny
000EEAr 3  D0 01                        bne @1
000EECr 3  1A                           inc
000EEDr 3               @1:
000EEDr 3  84 rr                        sty tmp1
000EEFr 3  85 rr                        sta tmp1+1
000EF1r 3               
000EF1r 3                               ; CREATE has also already modified the DP to point to the new
000EF1r 3                               ; word. We have no idea which instructions followed the CREATE
000EF1r 3                               ; command if there is a DOES> so the CP could point anywhere
000EF1r 3                               ; by now. The address of the word's xt is four bytes down.
000EF1r 3  20 rr rr                     jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
000EF4r 3  A5 rr                        lda dp
000EF6r 3  18                           clc
000EF7r 3  69 04                        adc #4
000EF9r 3  85 rr                        sta tmp2
000EFBr 3  A5 rr                        lda dp+1
000EFDr 3  69 00                        adc #0          ; we only care about the carry
000EFFr 3  85 rr                        sta tmp2+1
000F01r 3               
000F01r 3                               ; Now we get that address and add one byte to skip over the JSR
000F01r 3                               ; opcode
000F01r 3  B2 rr                        lda (tmp2)
000F03r 3  18                           clc
000F04r 3  69 01                        adc #1
000F06r 3  85 rr                        sta tmp3
000F08r 3  A0 01                        ldy #1
000F0Ar 3  B1 rr                        lda (tmp2),y
000F0Cr 3  69 00                        adc #0          ; we only care about the carry
000F0Er 3  85 rr                        sta tmp3+1
000F10r 3               
000F10r 3                               ; Replace the DOVAR address with our own
000F10r 3  A5 rr                        lda tmp1        ; LSB
000F12r 3  92 rr                        sta (tmp3)
000F14r 3  A5 rr                        lda tmp1+1
000F16r 3  91 rr                        sta (tmp3),y    ; Y is still 1
000F18r 3               
000F18r 3                               ; Since we removed the return address that brought us here, we
000F18r 3                               ; go back to whatever the main routine was. Otherwise, we we
000F18r 3                               ; smash into the subroutine jump to DODOES.
000F18r 3  60                           rts
000F19r 3               
000F19r 3               
000F19r 3               
000F19r 3               ; ## DOT ( u -- ) "Print TOS"
000F19r 3               ; ## "."  auto  ANS core
000F19r 3                       ; """https://forth-standard.org/standard/core/d"""
000F19r 3               
000F19r 3               xt_dot:
000F19r 3  20 rr rr                     jsr underflow_1
000F1Cr 3               
000F1Cr 3  20 rr rr                     jsr xt_dup                      ; ( n n )
000F1Fr 3  20 rr rr                     jsr xt_abs                      ; ( n u )
000F22r 3  20 rr rr                     jsr xt_zero                     ; ( n u 0 )
000F25r 3  20 rr rr                     jsr xt_less_number_sign         ; ( n u 0 )
000F28r 3  20 rr rr                     jsr xt_number_sign_s            ; ( n ud )
000F2Br 3  20 rr rr                     jsr xt_rot                      ; ( ud n )
000F2Er 3  20 rr rr                     jsr xt_sign                     ; ( ud )
000F31r 3  20 rr rr                     jsr xt_number_sign_greater      ; ( addr u )
000F34r 3  20 rr rr                     jsr xt_type
000F37r 3  20 rr rr                     jsr xt_space
000F3Ar 3               
000F3Ar 3  60           z_dot:          rts
000F3Br 3               
000F3Br 3               
000F3Br 3               
000F3Br 3               ; ## DOT_PAREN ( -- ) "Print input up to close paren .( comment )"
000F3Br 3               ; ## ".("  auto  ANS core
000F3Br 3                       ; """http://forth-standard.org/standard/core/Dotp"""
000F3Br 3               
000F3Br 3               xt_dot_paren:
000F3Br 3                               ; Put a right paren on the stack.
000F3Br 3  CA                           dex
000F3Cr 3  CA                           dex
000F3Dr 3  A9 29                        lda #41     ; Right parenthesis
000F3Fr 3  95 00                        sta 0,x
000F41r 3  74 01                        stz 1,x
000F43r 3               
000F43r 3  20 rr rr                     jsr xt_parse
000F46r 3  20 rr rr                     jsr xt_type
000F49r 3               
000F49r 3  60           z_dot_paren:    rts
000F4Ar 3               
000F4Ar 3               
000F4Ar 3               
000F4Ar 3               ; ## DOT_QUOTE ( "string" -- ) "Print string from compiled word"
000F4Ar 3               ; ## ".""  auto  ANS core ext
000F4Ar 3                       ; """https://forth-standard.org/standard/core/Dotq
000F4Ar 3                       ; Compile string that is printed during run time. ANS Forth wants
000F4Ar 3                       ; this to be compile-only, even though everybody and their friend
000F4Ar 3                       ; uses it for everything. We follow the book here, and recommend
000F4Ar 3                       ; `.(` for general printing.
000F4Ar 3                       ; """
000F4Ar 3               
000F4Ar 3               xt_dot_quote:
000F4Ar 3                               ; we let S" do the heavy lifting. Since we're in
000F4Ar 3                               ; compile mode, it will save the string and reproduce it
000F4Ar 3                               ; during runtime
000F4Ar 3  20 rr rr                     jsr xt_s_quote
000F4Dr 3               
000F4Dr 3                               ; We then let TYPE do the actual printing
000F4Dr 3  A0 rr                        ldy #>xt_type
000F4Fr 3  A9 rr                        lda #<xt_type
000F51r 3  20 rr rr                     jsr cmpl_subroutine
000F54r 3               
000F54r 3  60           z_dot_quote:    rts
000F55r 3               
000F55r 3               
000F55r 3               
000F55r 3               ; ## DOT_R ( n u -- ) "Print NOS as unsigned number with TOS with"
000F55r 3               ; ## ".r"  tested  ANS core ext
000F55r 3                       ; """https://forth-standard.org/standard/core/DotR
000F55r 3                       ;
000F55r 3                       ; Based on the Forth code
000F55r 3                       ;  : .R  >R DUP ABS 0 <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
000F55r 3                       ; """
000F55r 3               
000F55r 3               xt_dot_r:
000F55r 3  20 rr rr                     jsr underflow_2
000F58r 3               
000F58r 3  20 rr rr                     jsr xt_to_r
000F5Br 3  20 rr rr                     jsr xt_dup
000F5Er 3  20 rr rr                     jsr xt_abs
000F61r 3  20 rr rr                     jsr xt_zero
000F64r 3  20 rr rr                     jsr xt_less_number_sign
000F67r 3  20 rr rr                     jsr xt_number_sign_s
000F6Ar 3  20 rr rr                     jsr xt_rot
000F6Dr 3  20 rr rr                     jsr xt_sign
000F70r 3  20 rr rr                     jsr xt_number_sign_greater
000F73r 3  20 rr rr                     jsr xt_r_from
000F76r 3  20 rr rr                     jsr xt_over
000F79r 3  20 rr rr                     jsr xt_minus
000F7Cr 3  20 rr rr                     jsr xt_spaces
000F7Fr 3  20 rr rr                     jsr xt_type
000F82r 3               
000F82r 3  60           z_dot_r:        rts
000F83r 3               
000F83r 3               
000F83r 3               
000F83r 3               ; ## DOT_S ( -- ) "Print content of Data Stack"
000F83r 3               ; ## ".s"  tested  ANS tools
000F83r 3                       ; """https://forth-standard.org/standard/tools/DotS
000F83r 3                       ; Print content of Data Stack non-distructively. We follow the format
000F83r 3                       ; of Gforth and print the number of elements first in brackets,
000F83r 3                       ; followed by the Data Stack content (if any).
000F83r 3                       ;
000F83r 3                       ; Since this is for humans, we don't have to worry about speed.
000F83r 3                       ; """
000F83r 3               
000F83r 3               xt_dot_s:
000F83r 3  20 rr rr                     jsr xt_depth    ; ( -- u )
000F86r 3               
000F86r 3                               ; Print stack depth in brackets
000F86r 3  A9 3C                        lda #$3c        ; ASCII for "<"
000F88r 3  20 rr rr                     jsr emit_a
000F8Br 3               
000F8Br 3                               ; We keep a copy of the number of the things on the stack
000F8Br 3                               ; to use as a counter later down. This assumes that there
000F8Br 3                               ; are less than 255 elements on the stack
000F8Br 3  B5 00                        lda 0,x
000F8Dr 3  48                           pha
000F8Er 3               
000F8Er 3                               ; print unsigned number without the trailing space
000F8Er 3  CA                           dex             ; DUP
000F8Fr 3  CA                           dex
000F90r 3  95 00                        sta 0,x
000F92r 3  74 01                        stz 1,x
000F94r 3               
000F94r 3  20 rr rr                     jsr print_u
000F97r 3               
000F97r 3  A9 3E                        lda #$3e        ; ASCII for ">"
000F99r 3  20 rr rr                     jsr emit_a
000F9Cr 3  A9 20                        lda #AscSP      ; ASCII for SPACE
000F9Er 3  20 rr rr                     jsr emit_a
000FA1r 3               
000FA1r 3  E8                           inx
000FA2r 3  E8                           inx
000FA3r 3               
000FA3r 3                               ; There will be lots of cases where the stack is empty. If that
000FA3r 3                               ; is so, get out of here quickly
000FA3r 3  E0 rr                        cpx #dsp0
000FA5r 3  F0 1E                        beq @done
000FA7r 3               
000FA7r 3               @have_stack:
000FA7r 3                               ; We have at least one element on the stack. The depth of the
000FA7r 3                               ; stack is on the stack, we can use it as a counter. We go
000FA7r 3                               ; from bottom to top
000FA7r 3  7A                           ply
000FA8r 3               
000FA8r 3  A9 rr                        lda #dsp0-1     ; go up one to avoid garbage
000FAAr 3  85 rr                        sta tmp3
000FACr 3  64 rr                        stz tmp3+1      ; must be zero page on the 65c02
000FAEr 3               @loop:
000FAEr 3  CA                           dex
000FAFr 3  CA                           dex
000FB0r 3               
000FB0r 3  B2 rr                        lda (tmp3)
000FB2r 3  95 01                        sta 1,x
000FB4r 3  C6 rr                        dec tmp3
000FB6r 3               
000FB6r 3  B2 rr                        lda (tmp3)
000FB8r 3  95 00                        sta 0,x
000FBAr 3  C6 rr                        dec tmp3
000FBCr 3  5A                           phy
000FBDr 3               
000FBDr 3  20 rr rr                     jsr xt_dot
000FC0r 3               
000FC0r 3  7A                           ply
000FC1r 3  88                           dey
000FC2r 3  D0 EA                        bne @loop
000FC4r 3               
000FC4r 3  48                           pha             ; dummy to balance stack
000FC5r 3               @done:
000FC5r 3  68                           pla
000FC6r 3  60           z_dot_s:        rts
000FC7r 3               
000FC7r 3               
000FC7r 3               
000FC7r 3               ; ## D_DOT ( d -- ) "Print double"
000FC7r 3               ; ## "d."  tested  ANS double
000FC7r 3                       ; """http://forth-standard.org/standard/double/Dd"""
000FC7r 3                       ;
000FC7r 3                       ; From the Forth code:
000FC7r 3                       ; : D. TUCK DABS <# #S ROT SIGN #> TYPE SPACE ;
000FC7r 3                       ; """
000FC7r 3               
000FC7r 3               xt_d_dot:
000FC7r 3  20 rr rr                     jsr underflow_2
000FCAr 3               
000FCAr 3  20 rr rr                     jsr xt_tuck
000FCDr 3  20 rr rr                     jsr xt_dabs
000FD0r 3  20 rr rr                     jsr xt_less_number_sign
000FD3r 3  20 rr rr                     jsr xt_number_sign_s
000FD6r 3  20 rr rr                     jsr xt_rot
000FD9r 3  20 rr rr                     jsr xt_sign
000FDCr 3  20 rr rr                     jsr xt_number_sign_greater
000FDFr 3  20 rr rr                     jsr xt_type
000FE2r 3  20 rr rr                     jsr xt_space
000FE5r 3               
000FE5r 3  60           z_d_dot:        rts
000FE6r 3               
000FE6r 3               
000FE6r 3               
000FE6r 3               ; ## D_DOT_R ( d u -- ) "Print double right-justified u wide"
000FE6r 3               ; ## "d.r"  tested  ANS double
000FE6r 3                       ; """http://forth-standard.org/standard/double/DDotR"""
000FE6r 3                       ; Based on the Forth code
000FE6r 3                       ;  : D.R >R TUCK DABS <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
000FE6r 3                       ; """
000FE6r 3               
000FE6r 3               xt_d_dot_r:
000FE6r 3  20 rr rr                     jsr underflow_3
000FE9r 3                               ; From the forth code:
000FE9r 3  20 rr rr                     jsr xt_to_r
000FECr 3  20 rr rr                     jsr xt_tuck
000FEFr 3  20 rr rr                     jsr xt_dabs
000FF2r 3  20 rr rr                     jsr xt_less_number_sign
000FF5r 3  20 rr rr                     jsr xt_number_sign_s
000FF8r 3  20 rr rr                     jsr xt_rot
000FFBr 3  20 rr rr                     jsr xt_sign
000FFEr 3  20 rr rr                     jsr xt_number_sign_greater
001001r 3  20 rr rr                     jsr xt_r_from
001004r 3  20 rr rr                     jsr xt_over
001007r 3  20 rr rr                     jsr xt_minus
00100Ar 3  20 rr rr                     jsr xt_spaces
00100Dr 3  20 rr rr                     jsr xt_type
001010r 3               
001010r 3  60           z_d_dot_r:      rts
001011r 3               
001011r 3               
001011r 3               
001011r 3               ; ## DROP ( u -- ) "Pop top entry on Data Stack"
001011r 3               ; ## "drop"  auto  ANS core
001011r 3                       ; """https://forth-standard.org/standard/core/DROP"""
001011r 3               xt_drop:
001011r 3  20 rr rr                     jsr underflow_1
001014r 3               
001014r 3  E8                           inx
001015r 3  E8                           inx
001016r 3               
001016r 3  60           z_drop:         rts
001017r 3               
001017r 3               
001017r 3               ; ## DUMP ( addr u -- ) "Display a memory region"
001017r 3               ; ## "dump"  tested  ANS tools
001017r 3                       ; """https://forth-standard.org/standard/tools/DUMP
001017r 3                       ;
001017r 3                       ; DUMP's exact output is defined as "implementation dependent".
001017r 3                       ; This is in assembler because it is
001017r 3                       ; useful for testing and development, so we want to have it work
001017r 3                       ; as soon as possible. Uses TMP2
001017r 3                       ; """
001017r 3               
001017r 3               xt_dump:
001017r 3  20 rr rr                     jsr underflow_2
00101Ar 3               @row:
00101Ar 3                               ; start counter for 16 numbers per row
00101Ar 3  A0 10                        ldy #16
00101Cr 3               
00101Cr 3                               ; We use TMP2 as the index for the ASCII characters
00101Cr 3                               ; that we print at the and of the hex block. We
00101Cr 3                               ; start saving them at HERE (CP)
00101Cr 3  64 rr                        stz tmp2
00101Er 3               
00101Er 3  20 rr rr                     jsr xt_cr
001021r 3               
001021r 3                               ; print address number
001021r 3  B5 03                        lda 3,x
001023r 3  20 rr rr                     jsr byte_to_ascii
001026r 3  B5 02                        lda 2,x
001028r 3  20 rr rr                     jsr byte_to_ascii
00102Br 3               
00102Br 3  20 rr rr                     jsr xt_space
00102Er 3  20 rr rr                     jsr xt_space
001031r 3               @loop:
001031r 3                               ; if there are zero bytes left to display, we're done
001031r 3  B5 00                        lda 0,x
001033r 3  15 01                        ora 1,x
001035r 3  F0 39                        beq @all_printed
001037r 3               
001037r 3                               ; dump the contents
001037r 3  A1 02                        lda (2,x)
001039r 3  48                           pha                     ; byte_to_ascii destroys A
00103Ar 3  20 rr rr                     jsr byte_to_ascii
00103Dr 3  20 rr rr                     jsr xt_space
001040r 3  68                           pla
001041r 3               
001041r 3                               ; Handle ASCII printing
001041r 3  20 rr rr                     jsr is_printable
001044r 3  B0 02                        bcs @printable
001046r 3  A9 2E                        lda #'.'                 ; Print dot if not printable
001048r 3               @printable:
001048r 3  5A                           phy                     ; save counter
001049r 3  A4 rr                        ldy tmp2
00104Br 3  91 rr                        sta (cp),y
00104Dr 3  E6 rr                        inc tmp2
00104Fr 3  7A                           ply
001050r 3               
001050r 3                               ; extra space after eight bytes
001050r 3  C0 09                        cpy #9
001052r 3  D0 03                        bne @next_char
001054r 3  20 rr rr                     jsr xt_space
001057r 3               
001057r 3               @next_char:
001057r 3  F6 02                        inc 2,x
001059r 3  D0 02                        bne @counter
00105Br 3  F6 03                        inc 3,x
00105Dr 3               
00105Dr 3               @counter:
00105Dr 3                               ; loop counter
00105Dr 3  B5 00                        lda 0,x
00105Fr 3  D0 02                        bne @1
001061r 3  D6 01                        dec 1,x
001063r 3               @1:
001063r 3  D6 00                        dec 0,x
001065r 3  88                           dey
001066r 3  D0 C9                        bne @loop               ; next byte
001068r 3               
001068r 3                               ; Done with one line, print the ASCII version of these
001068r 3                               ; characters
001068r 3  20 rr rr                     jsr xt_space
00106Br 3  20 rr rr                     jsr print_ascii
00106Er 3               
00106Er 3  80 AA                        bra @row                ; new row
001070r 3               
001070r 3               @all_printed:
001070r 3                               ; See if there are any ASCII characters in the buffer
001070r 3                               ; left to print
001070r 3  A5 rr                        lda tmp2
001072r 3  F0 06                        beq @done
001074r 3               
001074r 3                               ; In theory, we could try to make the ASCII part line
001074r 3                               ; up with the line before it. But that is a hassle (we
001074r 3                               ; use three bytes for each missed hex entry, and
001074r 3                               ; then there is the gap after eight entries) and it
001074r 3                               ; makes it harder to read. We settle for one extra
001074r 3                               ; space instead for the moment
001074r 3  20 rr rr                     jsr xt_space
001077r 3  20 rr rr                     jsr print_ascii
00107Ar 3               @done:
00107Ar 3  20 rr rr                     jsr xt_two_drop         ; one byte less than 4x INX
00107Dr 3  60           z_dump:         rts
00107Er 3               
00107Er 3               
00107Er 3               print_ascii:
00107Er 3                               ; Print the ASCII characters that we have saved from
00107Er 3                               ; HERE (CP) to HERE plus whatever is in TMP2. This routine
00107Er 3                               ; is not compiled (DUMP is probably never compiled anyway)
00107Er 3                               ; but we keep it inside the scope of DUMP.
00107Er 3  A0 00                        ldy #0
001080r 3               @ascii_loop:
001080r 3  B1 rr                        lda (cp),y
001082r 3  20 rr rr                     jsr emit_a
001085r 3  C8                           iny
001086r 3               
001086r 3                               ; extra space after eight chars
001086r 3  C0 08                        cpy #8
001088r 3  D0 03                        bne @1
00108Ar 3  20 rr rr                     jsr xt_space
00108Dr 3               @1:
00108Dr 3  C6 rr                        dec tmp2
00108Fr 3  D0 EF                        bne @ascii_loop
001091r 3               
001091r 3  60                           rts
001092r 3               
001092r 3               
001092r 3               
001092r 3               ; ## DUP ( u -- u u ) "Duplicate TOS"
001092r 3               ; ## "dup"  auto  ANS core
001092r 3                       ; """https://forth-standard.org/standard/core/DUP"""
001092r 3               xt_dup:
001092r 3  20 rr rr                     jsr underflow_1
001095r 3               
001095r 3  CA                           dex
001096r 3  CA                           dex
001097r 3               
001097r 3  B5 02                        lda 2,x         ; LSB
001099r 3  95 00                        sta 0,x
00109Br 3  B5 03                        lda 3,x         ; MSB
00109Dr 3  95 01                        sta 1,x
00109Fr 3               
00109Fr 3  60           z_dup:          rts
0010A0r 3               
0010A0r 3               
0010A0r 3               ; ## ED ( -- u ) "Line-based editor"
0010A0r 3               ; ## "ed"  fragment  Tali Forth
0010A0r 3                       ; """Start the line-based editor ed6502. See separate file
0010A0r 3                       ; ed.asm or the manual for details.
0010A0r 3                       ; """
0010A0r 3               xt_ed:
0010A0r 3                       .ifdef ed6502
0010A0r 3                               jsr ed6502      ; kept in separate file
0010A0r 3                       .endif
0010A0r 3               
0010A0r 3  60           z_ed:           rts
0010A1r 3               
0010A1r 3               
0010A1r 3               ; ## EDITOR_WORDLIST ( -- u ) "WID for the Editor wordlist"
0010A1r 3               ; ## "editor-wordlist"  tested  Tali Editor
0010A1r 3                       ; """ Commonly used like `editor-wordlist >order` to add the editor
0010A1r 3                       ; words to the search order so they can be used.  This will need
0010A1r 3                       ; to be done before any of the words marked "Tali Editor" can be
0010A1r 3                       ; used.  See the tutorial on Wordlists and the Search Order for
0010A1r 3                       ; more information.
0010A1r 3               
0010A1r 3                       ;
0010A1r 3                       ; This is a dummy entry, the code is shared with ONE
0010A1r 3                       ; """
0010A1r 3               
0010A1r 3               
0010A1r 3               ; ## ELSE (C: orig -- orig) ( -- ) "Conditional flow control"
0010A1r 3               ; ## "else"  auto  ANS core
0010A1r 3                       ; """http://forth-standard.org/standard/core/ELSE
0010A1r 3                       ;
0010A1r 3                       ; The code is shared with ENDOF
0010A1r 3                       ; """
0010A1r 3               
0010A1r 3               xt_else:
0010A1r 3               xt_endof:
0010A1r 3                               ; Put an unconditional branch.
0010A1r 3  A0 rr                        ldy #>branch_runtime
0010A3r 3  A9 rr                        lda #<branch_runtime
0010A5r 3  20 rr rr                     jsr cmpl_subroutine
0010A8r 3               
0010A8r 3                               ; Put the address of the branch address on the stack.
0010A8r 3  20 rr rr                     jsr xt_here
0010ABr 3               
0010ABr 3                               ; Use zero for the branch address for now.
0010ABr 3                               ; THEN will fill it in later.
0010ABr 3  20 rr rr                     jsr xt_zero
0010AEr 3  20 rr rr                     jsr xt_comma
0010B1r 3               
0010B1r 3                               ; Get the address to jump to (just after the
0010B1r 3                               ; unconditional branch) for the IF to jump to
0010B1r 3                               ; when false.
0010B1r 3  20 rr rr                     jsr xt_here
0010B4r 3  20 rr rr                     jsr xt_rot
0010B7r 3               
0010B7r 3                               ; Update the original if 0branch address.
0010B7r 3  20 rr rr                     jsr xt_store
0010BAr 3               z_else:
0010BAr 3               z_endof:
0010BAr 3  60                           rts
0010BBr 3               
0010BBr 3               
0010BBr 3               
0010BBr 3               branch_runtime:
0010BBr 3                       ; """Runtime component for a branch. Used by ELSE and ENDOF. This was
0010BBr 3                       ; formally part of a separate word BRANCH which was later removed.
0010BBr 3                       ; """
0010BBr 3               
0010BBr 3                               ; The address on the Return Stack points to the last byte
0010BBr 3                               ; of the JSR address, one byte below the branch literal
0010BBr 3  68                           pla
0010BCr 3  85 rr                        sta tmpbranch
0010BEr 3  68                           pla
0010BFr 3  85 rr                        sta tmpbranch+1
0010C1r 3               
0010C1r 3                               ; Keep in mind: the address we just popped points one byte
0010C1r 3                               ; lower than the branch literal we want to grab
0010C1r 3  A0 01                        ldy #1
0010C3r 3  B1 rr                        lda (tmpbranch),y  ; LSB
0010C5r 3  85 rr                        sta tmp1
0010C7r 3  C8                           iny
0010C8r 3  B1 rr                        lda (tmpbranch),y  ; MSB
0010CAr 3  85 rr                        sta tmp1+1
0010CCr 3               
0010CCr 3  6C rr rr                     jmp (tmp1)
0010CFr 3               
0010CFr 3               
0010CFr 3               
0010CFr 3               ; ## EMIT ( char -- ) "Print character to current output"
0010CFr 3               ; ## "emit"  auto  ANS core
0010CFr 3                       ; """https://forth-standard.org/standard/core/EMIT
0010CFr 3                       ; Run-time default for EMIT. The user can revector this by changing
0010CFr 3                       ; the value of the OUTPUT variable. We ignore the MSB completely, and
0010CFr 3                       ; do not check to see if we have been given a valid ASCII character.
0010CFr 3                       ; Don't make this native compile.
0010CFr 3                       ; """
0010CFr 3               
0010CFr 3               xt_emit:
0010CFr 3  20 rr rr                     jsr underflow_1
0010D2r 3               
0010D2r 3  B5 00                        lda 0,x
0010D4r 3  E8                           inx
0010D5r 3  E8                           inx
0010D6r 3               
0010D6r 3               emit_a:
0010D6r 3                       ; We frequently want to print the character in A without fooling
0010D6r 3                       ; around with the Data Stack. This is emit_a's job, which still
0010D6r 3                       ; allows the output to be vectored. Call it with JSR as you
0010D6r 3                       ; would XT_EMIT
0010D6r 3  6C rr rr                     jmp (output)            ; JSR/RTS
0010D9r 3               
0010D9r 3               z_emit:         ; never reached
0010D9r 3               
0010D9r 3               
0010D9r 3               
0010D9r 3               ; ## EMPTY_BUFFERS ( -- ) "Empty all buffers without saving"
0010D9r 3               ; ## "empty-buffers"  tested  ANS block ext
0010D9r 3                       ; """https://forth-standard.org/standard/block/EMPTY-BUFFERS"""
0010D9r 3               xt_empty_buffers:
0010D9r 3                               ; Set the buffer status to empty.
0010D9r 3  A0 2C                        ldy #buffstatus_offset
0010DBr 3  A9 00                        lda #0
0010DDr 3  91 rr                        sta (up),y      ; Only LSB is used.
0010DFr 3               z_empty_buffers:
0010DFr 3  60                           rts
0010E0r 3               
0010E0r 3               
0010E0r 3               ; ## ENDCASE (C: case-sys -- ) ( x -- ) "Conditional flow control"
0010E0r 3               ; ## "endcase"  auto  ANS core ext
0010E0r 3                       ; """http://forth-standard.org/standard/core/ENDCASE"""
0010E0r 3               
0010E0r 3               xt_endcase:
0010E0r 3                               ; Postpone DROP to remove the item
0010E0r 3                               ; being checked.
0010E0r 3  A0 rr                        ldy #>xt_drop
0010E2r 3  A9 rr                        lda #<xt_drop
0010E4r 3  20 rr rr                     jsr cmpl_subroutine
0010E7r 3               
0010E7r 3                               ; There are a number of address (of branches that need their
0010E7r 3                               ; jump addressed filled in with the address of right here).
0010E7r 3                               ; Keep calling THEN to deal with them until we reach the
0010E7r 3                               ; 0 that CASE put on the stack at the beginning.
0010E7r 3               @endcase_loop:
0010E7r 3                               ; Check for 0 on the stack.
0010E7r 3  B5 00                        lda 0,x
0010E9r 3  15 01                        ora 1,x
0010EBr 3  F0 05                        beq @done
0010EDr 3               
0010EDr 3  20 rr rr                     jsr xt_then
0010F0r 3  80 F5                        bra @endcase_loop
0010F2r 3               @done:
0010F2r 3                               ; Remove the 0 from the stack.
0010F2r 3  E8                           inx
0010F3r 3  E8                           inx
0010F4r 3  60           z_endcase:      rts
0010F5r 3               
0010F5r 3               
0010F5r 3               
0010F5r 3               ; ## ENDOF (C: case-sys1 of-sys1-- case-sys2) ( -- ) "Conditional flow control"
0010F5r 3               ; ## "endof"  auto  ANS core ext
0010F5r 3                       ; """http://forth-standard.org/standard/core/ENDOF
0010F5r 3                       ; This is a dummy entry, the code is shared with ELSE
0010F5r 3                       ; """
0010F5r 3               
0010F5r 3               
0010F5r 3               ; ## ENVIRONMENT_Q  ( addr u -- 0 | i*x true )  "Return system information"
0010F5r 3               ; ## "environment?"  auto  ANS core
0010F5r 3                       ; """https://forth-standard.org/standard/core/ENVIRONMENTq
0010F5r 3                       ;
0010F5r 3                       ; By ANS definition, we use upper-case strings here, see the
0010F5r 3                       ; string file for details. This can be realized as a high-level
0010F5r 3                       ; Forth word as
0010F5r 3                       ;
0010F5r 3                       ; : STRING_OF POSTPONE 2OVER POSTPONE COMPARE POSTPONE 0=
0010F5r 3                       ;    POSTPONE IF POSTPONE 2DROP ; IMMEDIATE COMPILE-ONLY
0010F5r 3                       ; HEX
0010F5r 3                       ; : ENVIRONMENT? ( C-ADDR U -- FALSE | I*X TRUE )
0010F5r 3                       ; CASE
0010F5r 3                       ; S" /COUNTED-STRING"    STRING_OF  7FFF TRUE ENDOF
0010F5r 3                       ; S" /HOLD"              STRING_OF    FF TRUE ENDOF
0010F5r 3                       ; S" /PAD"               STRING_OF    54 TRUE ENDOF ( 84 DECIMAL )
0010F5r 3                       ; S" ADDRESS-UNIT-BITS"  STRING_OF     8 TRUE ENDOF
0010F5r 3                       ; S" FLOORED"            STRING_OF FALSE TRUE ENDOF ( WE HAVE SYMMETRIC )
0010F5r 3                       ; S" MAX-CHAR"           STRING_OF   255 TRUE ENDOF
0010F5r 3                       ; S" MAX-D"              STRING_OF
0010F5r 3                                                    ; 7FFFFFFF. TRUE ENDOF
0010F5r 3                       ; S" MAX-N"              STRING_OF  7FFF TRUE ENDOF
0010F5r 3                       ; S" MAX-U"              STRING_OF  FFFF TRUE ENDOF
0010F5r 3                       ; S" MAX-UD"             STRING_OF
0010F5r 3                                                    ; FFFFFFFF. TRUE ENDOF
0010F5r 3                       ; S" RETURN-STACK-CELLS" STRING_OF    80 TRUE ENDOF
0010F5r 3                       ; S" STACK-CELLS"        STRING_OF    20 TRUE ENDOF ( FROM DEFINITIONS.ASM )
0010F5r 3                       ; ( DEFAULT ) 2DROP FALSE FALSE ( ONE FALSE WILL DROPPED BY ENDCASE )
0010F5r 3                       ; ENDCASE ;
0010F5r 3                       ;
0010F5r 3                       ; but that uses lots of memory and increases the start up time. This
0010F5r 3                       ; word is rarely used so we can try to keep it short at the expense
0010F5r 3                       ; of speed.
0010F5r 3                       ; """
0010F5r 3               
0010F5r 3               xt_environment_q:
0010F5r 3  20 rr rr                     jsr underflow_1
0010F8r 3               
0010F8r 3                               ; This code is table-driven: We walk through the list of
0010F8r 3                               ; strings until we find one that matches, and then we take
0010F8r 3                               ; the equivalent data from the results table. This is made
0010F8r 3                               ; a bit harder by the fact that some of these return a
0010F8r 3                               ; double-cell number and some a single-cell one.
0010F8r 3               
0010F8r 3                               ; We will walk through the table with variables that return
0010F8r 3                               ; a single-cell result
0010F8r 3  A0 00                        ldy #00                 ; counter for table
0010FAr 3               
0010FAr 3                               ; We use a flag on the the stack to signal if we have a single-cell
0010FAr 3                               ; or double-cell number. We use 0 to signal single-cell and 1 for
0010FAr 3                               ; double-cell.
0010FAr 3  5A                           phy
0010FBr 3               @table_loop:
0010FBr 3                               ; We arrived here with the address of the string to be checked
0010FBr 3                               ; on the stack. We make a copy. Index is in Y
0010FBr 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
0010FEr 3               
0010FEr 3                               ; We do our work on the TOS to speed things up
0010FEr 3  CA                           dex
0010FFr 3  CA                           dex                     ; ( addr u addr u ? )
001100r 3               
001100r 3                               ; Get address of string to check from table
001100r 3  B9 rr rr                     lda env_table_single,y
001103r 3  95 00                        sta 0,x
001105r 3  C8                           iny
001106r 3  B9 rr rr                     lda env_table_single,y
001109r 3  95 01                        sta 1,x                 ; ( addr u addr u addr-t )
00110Br 3  C8                           iny
00110Cr 3               
00110Cr 3                               ; See if this is the last entry. The LSB is still in A
00110Cr 3  15 00                        ora 0,x
00110Er 3  F0 4D                        beq @table_done
001110r 3               
001110r 3                               ; We have a string entry. The address there is stored in
001110r 3                               ; old-style address format, that is, the first byte is the
001110r 3                               ; length of the string
001110r 3  5A                           phy                     ; save Y, which is used by COUNT
001111r 3  20 rr rr                     jsr xt_count            ; ( addr u addr u addr-s u-s )
001114r 3  20 rr rr                     jsr xt_compare          ; ( addr u f )
001117r 3  7A                           ply
001118r 3               
001118r 3                               ; If we found a match (flag is zero -- COMPARE is weird
001118r 3                               ; that way), return the result
001118r 3  B5 00                        lda 0,x
00111Ar 3  15 01                        ora 1,x
00111Cr 3  F0 04                        beq @got_result
00111Er 3               
00111Er 3                               ; Flag is not zero, so not a perfect match, so try next
00111Er 3                               ; word
00111Er 3  E8                           inx                     ; DROP, now ( addr u )
00111Fr 3  E8                           inx
001120r 3               
001120r 3  80 D9                        bra @table_loop
001122r 3               
001122r 3               @got_result:
001122r 3                               ; We arrive here with ( addr u -1 ) and know that we've found
001122r 3                               ; a match. The index of the match+2 is in Y.
001122r 3  E8                           inx                     ; drop flag, now ( addr u )
001123r 3  E8                           inx
001124r 3  88                           dey                     ; go back to index we had
001125r 3  88                           dey
001126r 3               
001126r 3                               ; See if this is a single-cell word.
001126r 3  68                           pla
001127r 3  D0 0D                        bne @double_result
001129r 3               
001129r 3                               ; Single-cell result
001129r 3  B9 rr rr                     lda env_results_single,y
00112Cr 3  95 02                        sta 2,x
00112Er 3  C8                           iny
00112Fr 3  B9 rr rr                     lda env_results_single,y
001132r 3  95 03                        sta 3,x                 ; ( res u )
001134r 3               
001134r 3  80 1F                        bra @set_flag
001136r 3               
001136r 3               @double_result:
001136r 3                               ; This is a double-celled result, which means we have to
001136r 3                               ; fool around with the index some more. We also need a
001136r 3                               ; further cell on the stack
001136r 3  CA                           dex                     ; ( addr u ? )
001137r 3  CA                           dex
001138r 3               
001138r 3                               ; We have 11 single-cell words we check, plus the 0000 as
001138r 3                               ; a marker for the end of the table, so we arrive here
001138r 3                               ; with Y as 22 or more. To get the index for the double-
001138r 3                               ; cell words, we move the result
001138r 3  98                           tya
001139r 3  38                           sec
00113Ar 3  E9 18                        sbc #24
00113Cr 3               
00113Cr 3                               ; We have four bytes per entry in the table, but the index
00113Cr 3                               ; keeps increasing by two, so we only have to multiply by
00113Cr 3                               ; two (shift left once) to get the right result
00113Cr 3  0A                           asl
00113Dr 3  A8                           tay
00113Er 3               
00113Er 3  B9 rr rr                     lda env_results_double,y
001141r 3  95 02                        sta 2,x
001143r 3  C8                           iny
001144r 3  B9 rr rr                     lda env_results_double,y
001147r 3  95 03                        sta 3,x                 ; ( res u ? )
001149r 3  C8                           iny
00114Ar 3               
00114Ar 3  B9 rr rr                     lda env_results_double,y
00114Dr 3  95 04                        sta 4,x
00114Fr 3  C8                           iny
001150r 3  B9 rr rr                     lda env_results_double,y
001153r 3  95 05                        sta 5,x                 ; ( res res ? )
001155r 3               
001155r 3                               ; fall through to @set_flag
001155r 3               @set_flag:
001155r 3  A9 FF                        lda #$ff
001157r 3  95 00                        sta 0,x
001159r 3  95 01                        sta 1,x                 ; ( res f )
00115Br 3               
00115Br 3  80 14                        bra @done
00115Dr 3               @table_done:
00115Dr 3                               ; We're done with a table, because the entry was a zero.
00115Dr 3                               ; We arrive here with ( addr u addr u 0 )
00115Dr 3               
00115Dr 3                               ; We take the flag from stack and increase it by one. If the
00115Dr 3                               ; flag is zero, we have just completed the single-cell number
00115Dr 3                               ; strings, so we in increase the flag and try again. Otherwise,
00115Dr 3                               ; we're done with the double-cell table without having found
00115Dr 3                               ; a match, and we're done
00115Dr 3  68                           pla
00115Er 3  D0 09                        bne @no_match
001160r 3               
001160r 3                               ; Flag is zero, increase it to one and start over to check
001160r 3                               ; double-cell values
001160r 3  1A                           inc
001161r 3  48                           pha
001162r 3               
001162r 3  8A                           txa
001163r 3  18                           clc
001164r 3  69 06                        adc #6                  ; skip six bytes
001166r 3  AA                           tax                     ; ( addr u )
001167r 3               
001167r 3  80 92                        bra @table_loop
001169r 3               @no_match:
001169r 3                               ; Bummer, not found. We arrive here with
001169r 3                               ; ( addr u addr u 0 ) and need to return just a zero
001169r 3  8A                           txa
00116Ar 3  18                           clc
00116Br 3  69 0A                        adc #10
00116Dr 3  AA                           tax                     ; ( addr ) - not ( 0 ) !
00116Er 3               
00116Er 3  20 rr rr                     jsr xt_false
001171r 3               @done:
001171r 3               z_environment_q:
001171r 3  60                           rts
001172r 3               
001172r 3               
001172r 3               ; Tables for ENVIRONMENT?. We use two separate ones, one for the single-cell
001172r 3               ; results and one for the double-celled results. The zero cell at the
001172r 3               ; end of each table marks its, uh, end. The strings themselves are defined
001172r 3               ; in strings.asm. Note if we add more entries to the single-cell table, we
001172r 3               ; have to adapt the result code for double printout, where we subtract 22
001172r 3               ; (two bytes each single-cell string and two bytes for the end-of-table
001172r 3               ; marker 0000
001172r 3               env_table_single:
001172r 3  rr rr rr rr          .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
001176r 3  rr rr rr rr  
00117Ar 3  rr rr        
00117Cr 3  rr rr rr rr          .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
001180r 3  rr rr rr rr  
001184r 3  rr rr rr rr          .word envs_sc, envs_wl, 0000
001188r 3  00 00        
00118Ar 3               
00118Ar 3               env_table_double:
00118Ar 3  rr rr rr rr          .word envs_max_d, envs_max_ud, 0000
00118Er 3  00 00        
001190r 3               
001190r 3               env_results_single:
001190r 3  FF 7F                .word $7FFF     ; /COUNTED-STRING
001192r 3  FF 00                .word $00FF     ; /HOLD
001194r 3  54 00                .word $0054     ; /PAD (this is 84 decimal)
001196r 3  08 00                .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
001198r 3  00 00                .word 0000      ; FLOORED ("FALSE", we have symmetric)
00119Ar 3  FF 00                .word $00FF     ; MAX-CHAR
00119Cr 3  FF 7F                .word $7FFF     ; MAX-N
00119Er 3  FF FF                .word $FFFF     ; MAX-U
0011A0r 3  80 00                .word $0080     ; RETURN-STACK-CELLS
0011A2r 3  20 00                .word $0020     ; STACK-CELLS (from definitions.asm)
0011A4r 3  09 00                .word $0009     ; WORDLISTS
0011A6r 3               
0011A6r 3               env_results_double:
0011A6r 3  FF 7F FF FF          .word $7FFF, $FFFF      ; MAX-D
0011AAr 3  FF FF FF FF          .word $FFFF, $FFFF      ; MAX-UD
0011AEr 3               
0011AEr 3               
0011AEr 3               ; ## EQUAL ( n n -- f ) "See if TOS and NOS are equal"
0011AEr 3               ; ## "="  auto  ANS core
0011AEr 3                       ; """https://forth-standard.org/standard/core/Equal"""
0011AEr 3               
0011AEr 3               xt_equal:
0011AEr 3  20 rr rr                     jsr underflow_2
0011B1r 3               
0011B1r 3  B5 00                        lda 0,x                 ; LSB
0011B3r 3  D5 02                        cmp 2,x
0011B5r 3  D0 0A                        bne @false
0011B7r 3               
0011B7r 3  B5 01                        lda 1,x                 ; MSB
0011B9r 3  D5 03                        cmp 3,x
0011BBr 3  D0 04                        bne @false
0011BDr 3               
0011BDr 3  A9 FF                        lda #$ff
0011BFr 3  80 02                        bra @done
0011C1r 3               
0011C1r 3  A9 00        @false:         lda #0                  ; drop thru to done
0011C3r 3               
0011C3r 3  95 02        @done:          sta 2,x
0011C5r 3  95 03                        sta 3,x
0011C7r 3               
0011C7r 3  E8                           inx
0011C8r 3  E8                           inx
0011C9r 3               
0011C9r 3  60           z_equal:        rts
0011CAr 3               
0011CAr 3               
0011CAr 3               
0011CAr 3               ; ## BLANK ( addr u -- ) "Fill memory region with spaces"
0011CAr 3               ; ## "blank"  auto  ANS string
0011CAr 3                       ; """https://forth-standard.org/standard/string/BLANK"""
0011CAr 3               xt_blank:
0011CAr 3                               ; We don't check for underflow here because
0011CAr 3                               ; we deal with that in FILL
0011CAr 3  CA                           dex
0011CBr 3  CA                           dex
0011CCr 3  A9 20                        lda #AscSP
0011CEr 3  95 00                        sta 0,x
0011D0r 3  74 01                        stz 1,x
0011D2r 3               
0011D2r 3  80 06                        bra xt_fill     ; skip over code for ERASE
0011D4r 3               
0011D4r 3               
0011D4r 3               ; ## ERASE ( addr u -- ) "Fill memory region with zeros"
0011D4r 3               ; ## "erase"  auto  ANS core ext
0011D4r 3                       ; """https://forth-standard.org/standard/core/ERASE
0011D4r 3                       ; Note that ERASE works with "address" units
0011D4r 3                       ; (bytes), not cells.
0011D4r 3                       ; """
0011D4r 3               
0011D4r 3               xt_erase:
0011D4r 3                               ; We don't check for underflow here because
0011D4r 3                               ; we deal with that in FILL
0011D4r 3  CA                           dex
0011D5r 3  CA                           dex
0011D6r 3  74 00                        stz 0,x
0011D8r 3  74 01                        stz 1,x
0011DAr 3               
0011DAr 3                               ; fall through to FILL
0011DAr 3               
0011DAr 3               ; ## FILL ( addr u char -- ) "Fill a memory region with a character"
0011DAr 3               ; ## "fill"  auto  ANS core
0011DAr 3                       ; """https://forth-standard.org/standard/core/FILL
0011DAr 3                       ; Fill u bytes of memory with char starting at addr. Note that
0011DAr 3                       ; this works on bytes, not on cells. On an 8-bit machine such as the
0011DAr 3                       ; 65c02, this is a serious pain in the rear. It is not defined what
0011DAr 3                       ; happens when we reach the end of the address space
0011DAr 3                       ; """
0011DAr 3               xt_fill:
0011DAr 3  20 rr rr                     jsr underflow_3
0011DDr 3               
0011DDr 3                               ; We use tmp1 to hold the address
0011DDr 3  B5 04                        lda 4,x         ; LSB
0011DFr 3  85 rr                        sta tmp1
0011E1r 3  B5 05                        lda 5,x
0011E3r 3  85 rr                        sta tmp1+1
0011E5r 3               
0011E5r 3                               ; We use tmp2 to hold the counter
0011E5r 3  B5 02                        lda 2,x
0011E7r 3  85 rr                        sta tmp2
0011E9r 3  B5 03                        lda 3,x
0011EBr 3  85 rr                        sta tmp2+1
0011EDr 3               
0011EDr 3                               ; We use Y to hold the character
0011EDr 3  B5 00                        lda 0,x
0011EFr 3  A8                           tay
0011F0r 3               @loop:
0011F0r 3                               ; Unfortunately, we also need to make sure that we don't
0011F0r 3                               ; write further than the end of the RAM. So RAM_END must
0011F0r 3                               ; be larger or equal to the current address
0011F0r 3  A9 80                        lda #>ram_end           ; MSB
0011F2r 3  C5 rr                        cmp tmp1+1
0011F4r 3  90 21                        bcc @done               ; RAM_END < TMP1, so leave
0011F6r 3  D0 06                        bne @check_counter      ; RAM_END is not smaller and not equal
0011F8r 3               
0011F8r 3  A9 00                        lda #<ram_end           ; LSB, because MSBs were equal
0011FAr 3  C5 rr                        cmp tmp1
0011FCr 3  90 19                        bcc @done               ; RAM_END < TMP1, so leave
0011FEr 3               
0011FEr 3               @check_counter:
0011FEr 3                               ; See if our counter has reached zero
0011FEr 3  A5 rr                        lda tmp2
001200r 3  05 rr                        ora tmp2+1
001202r 3  F0 13                        beq @done
001204r 3               
001204r 3                               ; We're not in ROM and we still have stuff on the counter, so
001204r 3                               ; let's actually do what we came here to do
001204r 3  98                           tya
001205r 3  92 rr                        sta (tmp1)
001207r 3               
001207r 3                               ; Adjust the counter
001207r 3  A5 rr                        lda tmp2
001209r 3  D0 02                        bne @1
00120Br 3  C6 rr                        dec tmp2+1
00120Dr 3  C6 rr        @1:               dec tmp2
00120Fr 3               
00120Fr 3                               ; Next address
00120Fr 3  E6 rr                        inc tmp1
001211r 3  D0 DD                        bne @loop
001213r 3  E6 rr                        inc tmp1+1
001215r 3               
001215r 3  80 D9                        bra @loop
001217r 3               
001217r 3               @done:
001217r 3                               ; Drop three cells off the Data Stack. This uses one byte
001217r 3                               ; less than six times INX
001217r 3  8A                           txa
001218r 3  18                           clc
001219r 3  69 06                        adc #6
00121Br 3  AA                           tax
00121Cr 3               z_blank:
00121Cr 3               z_erase:
00121Cr 3  60           z_fill:         rts
00121Dr 3               
00121Dr 3               
00121Dr 3               
00121Dr 3               ; ## EXECUTE ( xt -- ) "Jump to word based on execution token"
00121Dr 3               ; ## "execute"  auto  ANS core
00121Dr 3                       ; """https://forth-standard.org/standard/core/EXECUTE"""
00121Dr 3               xt_execute:
00121Dr 3  20 rr rr                     jsr underflow_1
001220r 3               
001220r 3  20 rr rr                     jsr doexecute   ; do not combine to JMP (native coding)
001223r 3               
001223r 3  60           z_execute:      rts
001224r 3               
001224r 3               doexecute:
001224r 3  B5 00                        lda 0,x
001226r 3  85 rr                        sta ip
001228r 3  B5 01                        lda 1,x
00122Ar 3  85 rr                        sta ip+1
00122Cr 3               
00122Cr 3  E8                           inx
00122Dr 3  E8                           inx
00122Er 3               
00122Er 3                               ; we don't need a RTS here because we highjack the RTS of
00122Er 3                               ; the word we're calling to get back to xt_execute
00122Er 3  6C rr rr                     jmp (ip)
001231r 3               
001231r 3               ; end of doexecute
001231r 3               
001231r 3               
001231r 3               ; ## EXECUTE_PARSING ( addr u xt -- ) "Pass a string to a parsing word"
001231r 3               ; ## "execute-parsing"  auto  Gforth
001231r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001231r 3                       ; Execute the parsing word defined by the execution token (xt) on the
001231r 3                       ; string as if it were passed on the command line. See the file
001231r 3                       ; tests/tali.fs for examples.
001231r 3                       ;
001231r 3                       ; Note that this word is coded completely
001231r 3                       ; different in its Gforth version, see the file execute-parsing.fs
001231r 3                       ; (in /usr/share/gforth/0.7.3/compat/ on Ubuntu 18.04 LTS) for details.
001231r 3                       ; """
001231r 3               xt_execute_parsing:
001231r 3  20 rr rr                     jsr underflow_3
001234r 3               
001234r 3  20 rr rr                     jsr xt_input_to_r       ; save normal input for later
001237r 3  20 rr rr                     jsr xt_not_rote         ; -ROT ( xt addr u )
00123Ar 3               
00123Ar 3  B5 00                        lda 0,x                 ; TOS is new ciblen
00123Cr 3  85 rr                        sta ciblen
00123Er 3  B5 01                        lda 1,x
001240r 3  85 rr                        sta ciblen+1
001242r 3               
001242r 3  B5 02                        lda 2,x                 ; NOS is new cib
001244r 3  85 rr                        sta cib
001246r 3  B5 03                        lda 3,x
001248r 3  85 rr                        sta cib+1
00124Ar 3               
00124Ar 3  64 rr                        stz toin                ; Set >IN to zero
00124Cr 3  64 rr                        stz toin+1
00124Er 3               
00124Er 3  20 rr rr                     jsr xt_two_drop         ; 2DROP ( xt )
001251r 3  20 rr rr                     jsr xt_execute
001254r 3               
001254r 3  20 rr rr                     jsr xt_r_to_input
001257r 3               
001257r 3               z_execute_parsing:
001257r 3  60                           rts
001258r 3               
001258r 3               
001258r 3               ; ## EXIT ( -- ) "Return control to the calling word immediately"
001258r 3               ; ## "exit"  auto  ANS core
001258r 3                       ; """https://forth-standard.org/standard/core/EXIT
001258r 3                       ; If we're in a loop, we need to UNLOOP first and get everything
001258r 3                       ; we we might have put on the Return Stack off as well. This should
001258r 3                       ; be natively compiled.
001258r 3                       ; """
001258r 3               
001258r 3               xt_exit:
001258r 3  60                           rts             ; keep before z_exit
001259r 3               z_exit:                         ; never reached
001259r 3               
001259r 3               
001259r 3               
001259r 3               ; ## FALSE ( -- f ) "Push flag FALSE to Data Stack"
001259r 3               ; ## "false"  auto  ANS core ext
001259r 3                       ; """https://forth-standard.org/standard/core/FALSE"""
001259r 3               xt_false:
001259r 3  CA                           dex
00125Ar 3  CA                           dex
00125Br 3  74 00                        stz 0,x
00125Dr 3  74 01                        stz 1,x
00125Fr 3               
00125Fr 3  60           z_false:        rts
001260r 3               
001260r 3               
001260r 3               ; ## FETCH ( addr -- n ) "Push cell content from memory to stack"
001260r 3               ; ## "@"  auto  ANS core
001260r 3                       ; """https://forth-standard.org/standard/core/Fetch"""
001260r 3               xt_fetch:
001260r 3  20 rr rr                     jsr underflow_1
001263r 3               
001263r 3  A1 00                        lda (0,x)               ; LSB
001265r 3  A8                           tay
001266r 3  F6 00                        inc 0,x
001268r 3  D0 02                        bne @1
00126Ar 3  F6 01                        inc 1,x
00126Cr 3               @1:
00126Cr 3  A1 00                        lda (0,x)               ; MSB
00126Er 3  95 01                        sta 1,x
001270r 3  94 00                        sty 0,x
001272r 3               
001272r 3  60           z_fetch:        rts
001273r 3               
001273r 3               
001273r 3               ; ## FIND ( caddr -- addr 0 | xt 1 | xt -1 ) "Find word in Dictionary"
001273r 3               ; ## "find"  auto  ANS core
001273r 3                       ; """https://forth-standard.org/standard/core/FIND
001273r 3                       ; Included for backwards compatibility only, because it still
001273r 3                       ; can be found in so may examples. It should, however, be replaced
001273r 3                       ; by FIND-NAME. Counted string either returns address with a FALSE
001273r 3                       ; flag if not found in the Dictionary, or the xt with a flag to
001273r 3                       ; indicate if this is immediate or not. FIND is a wrapper around
001273r 3                       ; FIND-NAME, we get this all over with as quickly as possible. See
001273r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
001273r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001273r 3                       ; """
001273r 3               
001273r 3               xt_find:
001273r 3  20 rr rr                     jsr underflow_1
001276r 3               
001276r 3                               ; Save address in case conversion fails. We use the
001276r 3                               ; Return Stack instead of temporary variables like TMP1
001276r 3                               ; because this is shorter and anybody still using FIND
001276r 3                               ; can't be worried about speed anyway
001276r 3  B5 01                        lda 1,x                 ; MSB
001278r 3  48                           pha
001279r 3  B5 00                        lda 0,x                 ; LSB
00127Br 3  48                           pha
00127Cr 3               
00127Cr 3                               ; Convert ancient-type counted string address to
00127Cr 3                               ; modern format
00127Cr 3  20 rr rr                     jsr xt_count            ; ( caddr -- addr u )
00127Fr 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt | 0 )
001282r 3               
001282r 3  B5 00                        lda 0,x
001284r 3  15 01                        ora 1,x
001286r 3  D0 0B                        bne @found_word
001288r 3               
001288r 3                               ; No word found. Return address of the string and a false
001288r 3                               ; flag
001288r 3  20 rr rr                     jsr xt_false            ; ( 0 0 )
00128Br 3               
00128Br 3                               ; The address needs to be restored.
00128Br 3  68                           pla                     ; LSB of address
00128Cr 3  95 02                        sta 2,x
00128Er 3  68                           pla
00128Fr 3  95 03                        sta 3,x                 ; MSB of address
001291r 3               
001291r 3  80 27                        bra @done               ; ( addr 0 )
001293r 3               
001293r 3               @found_word:
001293r 3                               ; We don't need the address after all, dump it
001293r 3  68                           pla
001294r 3  68                           pla
001295r 3               
001295r 3                               ; We arrive here with ( nt ) on the TOS. Now we have to
001295r 3                               ; convert the return values to FIND's format
001295r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001298r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
00129Br 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
00129Er 3               
00129Er 3  A0 00                        ldy #0                  ; Prepare flag
0012A0r 3               
0012A0r 3                               ; The flags are in the second byte of the header
0012A0r 3  F6 00                        inc 0,x
0012A2r 3  D0 02                        bne @1
0012A4r 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
0012A6r 3               @1:
0012A6r 3  A1 00                        lda (0,x)               ; ( xt char )
0012A8r 3  29 04                        and #IM
0012AAr 3  D0 08                        bne @immediate          ; bit set, we're immediate
0012ACr 3               
0012ACr 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
0012AEr 3  95 00                        sta 0,x
0012B0r 3  95 01                        sta 1,x
0012B2r 3  80 06                        bra @done
0012B4r 3               
0012B4r 3               @immediate:
0012B4r 3  A9 01                        lda #1                  ; We're immediate, return 1
0012B6r 3  95 00                        sta 0,x
0012B8r 3  74 01                        stz 1,x
0012BAr 3               @done:
0012BAr 3  60           z_find:         rts
0012BBr 3               
0012BBr 3               
0012BBr 3               
0012BBr 3               ; ## FIND_NAME ( addr u -- nt|0 ) "Get the name token of input word"
0012BBr 3               ; ## "find-name"  auto  Gforth
0012BBr 3               
0012BBr 3               xt_find_name:
0012BBr 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0012BBr 3                       ; Given a string, find the Name Token (nt) of a word or return
0012BBr 3                       ; zero if the word is not in the dictionary. We use this instead of
0012BBr 3                       ; ancient FIND to look up words in the Dictionary passed by
0012BBr 3                       ; PARSE-NAME. Note this returns the nt, not the xt of a word like
0012BBr 3                       ; FIND. To convert, use NAME>INT. This is a Gforth word. See
0012BBr 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0012BBr 3                       ; FIND calls this word
0012BBr 3                       ; """
0012BBr 3  20 rr rr                     jsr underflow_2
0012BEr 3               
0012BEr 3                               ; check for special case of an empty string (length zero)
0012BEr 3  B5 00                        lda 0,x
0012C0r 3  15 01                        ora 1,x
0012C2r 3  D0 03                        bne @nonempty
0012C4r 3               
0012C4r 3  4C rr rr                     jmp @fail_done
0012C7r 3               
0012C7r 3               @nonempty:
0012C7r 3                               ; Set up for traversing the wordlist search order.
0012C7r 3  64 rr                        stz tmp3                ; Start at the beginning
0012C9r 3               
0012C9r 3               @wordlist_loop:
0012C9r 3  A0 1E                        ldy #num_order_offset   ; Compare to byte variable #ORDER
0012CBr 3  A5 rr                        lda tmp3
0012CDr 3  D1 rr                        cmp (up),y              ; Check to see if we are done
0012CFr 3  D0 03                        bne @have_string
0012D1r 3               
0012D1r 3                               ; We ran out of wordlists to search.
0012D1r 3  4C rr rr                     jmp @fail_done
0012D4r 3               
0012D4r 3               @have_string:
0012D4r 3                               ; set up first loop iteration
0012D4r 3               
0012D4r 3                               ; Get the current wordlist id
0012D4r 3  18                           clc             ; SEARCH-ORDER is array of bytes.
0012D5r 3  69 1F                        adc #search_order_offset
0012D7r 3  A8                           tay
0012D8r 3  B1 rr                        lda (up),y      ; Get the id byte, which is the offset
0012DAr 3                                               ; into the cell array WORDLISTS
0012DAr 3               
0012DAr 3                               ; Get the DP for that wordlist.
0012DAr 3  0A                           asl                     ; Turn offset into cells offset.
0012DBr 3  18                           clc
0012DCr 3  69 06                        adc #wordlists_offset
0012DEr 3  A8                           tay
0012DFr 3  B1 rr                        lda (up),y
0012E1r 3  85 rr                        sta tmp1
0012E3r 3  C8                           iny
0012E4r 3  B1 rr                        lda (up),y
0012E6r 3  85 rr                        sta tmp1+1
0012E8r 3               
0012E8r 3  B5 02                        lda 2,x                 ; Address of mystery string
0012EAr 3  85 rr                        sta tmp2
0012ECr 3  B5 03                        lda 3,x
0012EEr 3  85 rr                        sta tmp2+1
0012F0r 3               
0012F0r 3               @loop:
0012F0r 3                               ; first quick test: Are strings the same length?
0012F0r 3  B2 rr                        lda (tmp1)
0012F2r 3  D5 00                        cmp 0,x
0012F4r 3  D0 54                        bne @next_entry
0012F6r 3               
0012F6r 3               @compare_string:
0012F6r 3                               ; are the same length, so we now have to compare each
0012F6r 3                               ; character
0012F6r 3               
0012F6r 3                               ; second quick test: Is the first character the same?
0012F6r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
0012F8r 3               
0012F8r 3                               ; Lowercase the incoming charcter.
0012F8r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
0012FAr 3  B0 07                        bcs @compare_first
0012FCr 3  C9 41                        cmp #$41        ; ASCII 'A'
0012FEr 3  90 03                        bcc @compare_first
001300r 3               
001300r 3                               ; An uppercase letter has been located.  Make it
001300r 3                               ; lowercase.
001300r 3  18                           clc
001301r 3  69 20                        adc #$20
001303r 3               
001303r 3               @compare_first:
001303r 3  A0 08                        ldy #8          ; Offset in nt to name
001305r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
001307r 3  D0 41                        bne @next_entry
001309r 3               
001309r 3                               ; String length is the same and the first character is the
001309r 3                               ; same. If the length of the string is 1, we're already done
001309r 3  B5 00                        lda 0,x
00130Br 3  3A                           dec
00130Cr 3  F0 2C                        beq @success
00130Er 3               
00130Er 3                               ; No such luck: The strings are the same length and the first
00130Er 3                               ; char is the same, but the word is more than one char long.
00130Er 3                               ; So we suck it up and compare every single character. We go
00130Er 3                               ; from back to front, because words like CELLS and CELL+ would
00130Er 3                               ; take longer otherwise. We can also shorten the loop by one
00130Er 3                               ; because we've already compared the first char.
00130Er 3               
00130Er 3                               ; The string of the word we're testing against is 8 bytes down
00130Er 3  A5 rr                        lda tmp1
001310r 3  48                           pha             ; Preserve tmp1 on the return stack.
001311r 3  18                           clc
001312r 3  69 08                        adc #8
001314r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
001316r 3  A5 rr                        lda tmp1+1
001318r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
001319r 3  69 00                        adc #0          ; we only need the carry
00131Br 3  85 rr                        sta tmp1+1
00131Dr 3               
00131Dr 3  B4 00                        ldy 0,x         ; index is length of string minus 1
00131Fr 3  88                           dey
001320r 3               
001320r 3               @string_loop:
001320r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
001322r 3               
001322r 3                               ; Lowercase the incoming charcter.
001322r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
001324r 3  B0 07                        bcs @check_char
001326r 3  C9 41                        cmp #$41        ; ASCII 'A'
001328r 3  90 03                        bcc @check_char
00132Ar 3               
00132Ar 3                               ; An uppercase letter has been located.  Make it
00132Ar 3                               ; lowercase.
00132Ar 3  18                           clc
00132Br 3  69 20                        adc #$20
00132Dr 3               
00132Dr 3               @check_char:
00132Dr 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
00132Fr 3  D0 13                        bne @next_entry_tmp1
001331r 3               
001331r 3  88                           dey
001332r 3  D0 EC                        bne @string_loop
001334r 3               
001334r 3               @success_tmp1:
001334r 3  68                           pla             ; Restore tmp1 from the return stack.
001335r 3  85 rr                        sta tmp1+1
001337r 3  68                           pla
001338r 3  85 rr                        sta tmp1
00133Ar 3               
00133Ar 3               @success:
00133Ar 3                               ; The strings match. Put correct nt NOS, because we'll drop
00133Ar 3                               ; TOS before we leave
00133Ar 3  A5 rr                        lda tmp1
00133Cr 3  95 02                        sta 2,x
00133Er 3  A5 rr                        lda tmp1+1
001340r 3  95 03                        sta 3,x
001342r 3               
001342r 3  80 20                        bra @done
001344r 3               
001344r 3               @next_entry_tmp1:
001344r 3  68                           pla             ; Restore tmp1 from the return stack.
001345r 3  85 rr                        sta tmp1+1
001347r 3  68                           pla
001348r 3  85 rr                        sta tmp1
00134Ar 3               
00134Ar 3               @next_entry:
00134Ar 3                               ; Not the same, so we get the next word. Next header
00134Ar 3                               ; address is two bytes down
00134Ar 3  A0 02                        ldy #2
00134Cr 3  B1 rr                        lda (tmp1),y
00134Er 3  48                           pha
00134Fr 3  C8                           iny
001350r 3  B1 rr                        lda (tmp1),y
001352r 3  85 rr                        sta tmp1+1
001354r 3  68                           pla
001355r 3  85 rr                        sta tmp1
001357r 3               
001357r 3                               ; If we got a zero, we've walked the whole Dictionary and
001357r 3                               ; return as a failure, otherwise try again
001357r 3  05 rr                        ora tmp1+1
001359r 3  D0 95                        bne @loop
00135Br 3               
00135Br 3                               ; Move on to the next wordlist in the search order.
00135Br 3  E6 rr                        inc tmp3
00135Dr 3  4C rr rr                     jmp @wordlist_loop
001360r 3               
001360r 3               @fail_done:
001360r 3  74 02                        stz 2,x         ; failure flag
001362r 3  74 03                        stz 3,x
001364r 3               @done:
001364r 3  E8                           inx
001365r 3  E8                           inx
001366r 3               
001366r 3  60           z_find_name:    rts
001367r 3               
001367r 3               
001367r 3               
001367r 3               ; ## FLUSH ( -- ) "Save dirty buffers and empty buffers"
001367r 3               ; ## "flush"  auto  ANS block
001367r 3                       ; """https://forth-standard.org/standard/block/FLUSH"""
001367r 3               xt_flush:
001367r 3  20 rr rr                     jsr xt_save_buffers
00136Ar 3               
00136Ar 3                               ; Set the buffer status to empty.
00136Ar 3  A0 2C                        ldy #buffstatus_offset
00136Cr 3  A9 00                        lda #0
00136Er 3  91 rr                        sta (up),y      ; Only LSB is used.
001370r 3               z_flush:
001370r 3  60                           rts
001371r 3               
001371r 3               
001371r 3               ; ## FM_SLASH_MOD ( d n1  -- rem n2 ) "Floored signed division"
001371r 3               ; ## "fm/mod"  auto  ANS core
001371r 3                       ; """https://forth-standard.org/standard/core/FMDivMOD
001371r 3                       ; Note that by default, Tali Forth uses SM/REM for most things.
001371r 3                       ;
001371r 3                       ; There are various ways to realize this. We follow EForth with
001371r 3                       ;    DUP 0< DUP >R  IF NEGATE >R DNEGATE R> THEN >R DUP
001371r 3                       ;    0<  IF R@ + THEN  R> UM/MOD R> IF SWAP NEGATE SWAP THEN
001371r 3                       ; See (http://www.forth.org/eforth.html). However you can also
001371r 3                       ; go FM/MOD via SM/REM (http://www.figuk.plus.com/build/arith.htm):
001371r 3                       ;     DUP >R  SM/REM DUP 0< IF SWAP R> + SWAP 1+ ELSE  R> DROP THEN
001371r 3                       ; """
001371r 3               
001371r 3               xt_fm_slash_mod:
001371r 3  20 rr rr                     jsr underflow_3
001374r 3               
001374r 3                               ; if sign of n1 is negative, negate both n1 and d
001374r 3  64 rr                        stz tmp2        ; default: n is positive
001376r 3  B5 01                        lda 1,x         ; MSB of n1
001378r 3  10 0E                        bpl @check_d
00137Ar 3               
00137Ar 3  E6 rr                        inc tmp2        ; set flag to negative for n1
00137Cr 3  20 rr rr                     jsr xt_negate   ; NEGATE
00137Fr 3  20 rr rr                     jsr xt_to_r     ; >R
001382r 3  20 rr rr                     jsr xt_dnegate  ; DNEGATE
001385r 3  20 rr rr                     jsr xt_r_from   ; R>
001388r 3               
001388r 3               @check_d:
001388r 3                               ; If d is negative, add n1 to high cell of d
001388r 3  B5 03                        lda 3,x         ; MSB of high word of d
00138Ar 3  10 0D                        bpl @multiply
00138Cr 3               
00138Cr 3  18                           clc
00138Dr 3  B5 00                        lda 0,x         ; LSB of n1
00138Fr 3  75 02                        adc 2,x         ; LSB of dh
001391r 3  95 02                        sta 2,x
001393r 3               
001393r 3  B5 01                        lda 1,x         ; MSB of n1
001395r 3  75 03                        adc 3,x         ; MSB of dh
001397r 3  95 03                        sta 3,x
001399r 3               
001399r 3               @multiply:
001399r 3  20 rr rr                     jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
00139Cr 3               
00139Cr 3                               ; if n was negative, negate the result
00139Cr 3  A5 rr                        lda tmp2
00139Er 3  F0 07                        beq @done
0013A0r 3               
0013A0r 3  E8                           inx             ; pretend that we SWAP
0013A1r 3  E8                           inx
0013A2r 3  20 rr rr                     jsr xt_negate
0013A5r 3  CA                           dex
0013A6r 3  CA                           dex
0013A7r 3               @done:
0013A7r 3  60           z_fm_slash_mod: rts
0013A8r 3               
0013A8r 3               
0013A8r 3               
0013A8r 3               ; ## FORTH ( -- ) "Replace first WID in search order with Forth-Wordlist"
0013A8r 3               ; ## "forth"  auto  ANS search ext
0013A8r 3                       ; """https://forth-standard.org/standard/search/FORTH"""
0013A8r 3               xt_forth:
0013A8r 3  A0 1F                        ldy #search_order_offset
0013AAr 3  A9 00                        lda #0          ; The WID for Forth is 0.
0013ACr 3               
0013ACr 3  91 rr                        sta (up),y
0013AEr 3               z_forth:
0013AEr 3  60                           rts
0013AFr 3               
0013AFr 3               
0013AFr 3               ; This is a special jsr target to skip the zeroing of BLK at the beginning
0013AFr 3               ; of evaluate.  It's used by LOAD to allow setting BLK while the block is
0013AFr 3               ; being evaluated.  Evaluate's normal behavior is to zero BLK.
0013AFr 3               load_evaluate:
0013AFr 3                               ; Set a flag (using tmp1) to not zero BLK
0013AFr 3  A9 FF                        lda #$FF
0013B1r 3  85 rr                        sta tmp1
0013B3r 3  80 11                        bra load_evaluate_start
0013B5r 3               
0013B5r 3               ; ## EVALUATE ( addr u -- ) "Execute a string"
0013B5r 3               ; ## "evaluate"  auto  ANS core
0013B5r 3                       ; """https://forth-standard.org/standard/core/EVALUATE
0013B5r 3                       ; Set SOURCE-ID to -1, make addr u the input source, set >IN to zero.
0013B5r 3                       ; After processing the line, revert to old input source. We use this
0013B5r 3                       ; to compile high-level Forth words and user-defined words during
0013B5r 3                       ; start up and cold boot. In contrast to ACCEPT, we need to, uh,
0013B5r 3                       ; accept more than 255 characters here, even though it's a pain in
0013B5r 3                       ; the 8-bit.
0013B5r 3                       ; """
0013B5r 3               
0013B5r 3               xt_evaluate:
0013B5r 3  20 rr rr                     jsr underflow_2
0013B8r 3               
0013B8r 3                               ; Clear the flag to zero BLK.  Only LOAD will set the flag,
0013B8r 3                               ; and will set the block number.
0013B8r 3  64 rr                        stz tmp1
0013BAr 3               
0013BAr 3                               ; If u is zero (which can happen a lot for the user-defined
0013BAr 3                               ; words), just leave again
0013BAr 3  B5 00                        lda 0,x
0013BCr 3  15 01                        ora 1,x
0013BEr 3  D0 06                        bne _eval_got_work
0013C0r 3               
0013C0r 3  E8                           inx
0013C1r 3  E8                           inx
0013C2r 3  E8                           inx
0013C3r 3  E8                           inx
0013C4r 3               
0013C4r 3  80 42                        bra _eval_done
0013C6r 3               
0013C6r 3               ; Special entry point for LOAD to bypass the zeroing of BLK.
0013C6r 3               load_evaluate_start:
0013C6r 3               _eval_got_work:
0013C6r 3                               ; Save the current value of BLK on the return stack.
0013C6r 3  A0 01                        ldy #blk_offset+1
0013C8r 3  B1 rr                        lda (up),y
0013CAr 3  48                           pha
0013CBr 3  88                           dey
0013CCr 3  B1 rr                        lda (up),y
0013CEr 3  48                           pha
0013CFr 3               
0013CFr 3                               ; See if we should zero BLK.
0013CFr 3  A5 rr                        lda tmp1
0013D1r 3  D0 05                        bne @nozero
0013D3r 3               
0013D3r 3                               ; Set BLK to zero.
0013D3r 3                               ; lda #0        ; A is already zero from loading tmp1
0013D3r 3  91 rr                        sta (up),y
0013D5r 3  C8                           iny
0013D6r 3  91 rr                        sta (up),y
0013D8r 3               
0013D8r 3               @nozero:
0013D8r 3                               ; Save the input state to the Return Stack
0013D8r 3  20 rr rr                     jsr xt_input_to_r
0013DBr 3               
0013DBr 3                               ; set SOURCE-ID to -1
0013DBr 3  A9 FF                        lda #$ff
0013DDr 3  85 rr                        sta insrc
0013DFr 3  85 rr                        sta insrc+1
0013E1r 3               
0013E1r 3                               ; set >IN to zero
0013E1r 3  64 rr                        stz toin
0013E3r 3  64 rr                        stz toin+1
0013E5r 3               
0013E5r 3                               ; move TOS and NOS to input buffers
0013E5r 3  B5 00                        lda 0,x
0013E7r 3  85 rr                        sta ciblen
0013E9r 3  B5 01                        lda 1,x
0013EBr 3  85 rr                        sta ciblen+1
0013EDr 3               
0013EDr 3  B5 02                        lda 2,x
0013EFr 3  85 rr                        sta cib
0013F1r 3  B5 03                        lda 3,x
0013F3r 3  85 rr                        sta cib+1
0013F5r 3               
0013F5r 3  E8                           inx             ; A clean stack is a clean mind
0013F6r 3  E8                           inx
0013F7r 3  E8                           inx
0013F8r 3  E8                           inx
0013F9r 3               
0013F9r 3  20 rr rr                     jsr interpret   ; ( -- )
0013FCr 3               
0013FCr 3                               ; restore variables
0013FCr 3  20 rr rr                     jsr xt_r_to_input
0013FFr 3               
0013FFr 3                               ; Restore BLK from the return stack.
0013FFr 3  A0 00                        ldy #blk_offset
001401r 3  68                           pla
001402r 3  91 rr                        sta (up),y
001404r 3  C8                           iny
001405r 3  68                           pla
001406r 3  91 rr                        sta (up),y
001408r 3               
001408r 3               _eval_done:
001408r 3  60           z_evaluate:     rts
001409r 3               
001409r 3               
001409r 3               
001409r 3               ; ## FORTH_WORDLIST ( -- u ) "WID for the Forth Wordlist"
001409r 3               ; ## "forth-wordlist"  auto  ANS search
001409r 3                       ; """https://forth-standard.org/standard/search/FORTH-WORDLIST"""
001409r 3                       ; This is a dummy entry, the actual code is shared with ZERO.
001409r 3               
001409r 3               
001409r 3               ; ## GET_CURRENT ( -- wid ) "Get the id of the compilation wordlist"
001409r 3               ; ## "get-current" auto ANS search
001409r 3                       ; """https://forth-standard.org/standard/search/GET-CURRENT"""
001409r 3               
001409r 3               xt_get_current:
001409r 3                               ; This is a little different than some of the variables
001409r 3                               ; in the user area as we want the value rather than
001409r 3                               ; the address.
001409r 3  CA                           dex
00140Ar 3  CA                           dex
00140Br 3  A0 04                        ldy #current_offset
00140Dr 3  B1 rr                        lda (up),y
00140Fr 3  95 00                        sta 0,x         ; CURRENT is a byte variable
001411r 3  74 01                        stz 1,x         ; so the MSB is zero.
001413r 3               
001413r 3  60           z_get_current:  rts
001414r 3               
001414r 3               
001414r 3               
001414r 3               ; ## GET_ORDER ( -- wid_n .. wid_1 n) "Get the current search order"
001414r 3               ; ## "get-order" auto ANS search
001414r 3                       ; """https://forth-standard.org/standard/search/GET-ORDER"""
001414r 3               
001414r 3               xt_get_order:
001414r 3                               ; Get #ORDER - the number of wordlists in the search order.
001414r 3  A0 1E                        ldy #num_order_offset
001416r 3  B1 rr                        lda (up),y
001418r 3  85 rr                        sta tmp1
00141Ar 3  F0 16                        beq @done       ; If zero, there are no wordlists.
00141Cr 3               
00141Cr 3               @loop:
00141Cr 3                               ; Count down towards the front of the list.
00141Cr 3                               ; By decrementing first, we also turn the length into an offset.
00141Cr 3  C6 rr                        dec tmp1        ; Count down by bytes.
00141Er 3               
00141Er 3                               ; Get a pointer to the current wordlist, working back to front.
00141Er 3  A9 1F                        lda #search_order_offset
001420r 3  18                           clc
001421r 3  65 rr                        adc tmp1
001423r 3  A8                           tay
001424r 3               
001424r 3                               ; Put that wordlist id on the stack.
001424r 3  CA                           dex
001425r 3  CA                           dex
001426r 3  B1 rr                        lda (up),y
001428r 3  95 00                        sta 0,x         ; Search order array is bytes, so
00142Ar 3  74 01                        stz 1,x         ; put a zero in the high byte.
00142Cr 3               
00142Cr 3                               ; See if that was the last one to process (first in the list).
00142Cr 3  A9 00                        lda #0
00142Er 3  C5 rr                        cmp tmp1
001430r 3  D0 EA                        bne @loop
001432r 3               
001432r 3               @done:
001432r 3                               ; Put the number of items on the stack.
001432r 3  CA                           dex
001433r 3  CA                           dex
001434r 3  A0 1E                        ldy #num_order_offset
001436r 3  B1 rr                        lda (up),y
001438r 3  95 00                        sta 0,x
00143Ar 3  74 01                        stz 1,x         ; We only support 8 wordlists.
00143Cr 3               
00143Cr 3  60           z_get_order:    rts
00143Dr 3               
00143Dr 3               
00143Dr 3               
00143Dr 3               ; ## GREATER_THAN ( n n -- f ) "See if NOS is greater than TOS"
00143Dr 3               ; ## ">"  auto  ANS core
00143Dr 3                       ; """https://forth-standard.org/standard/core/more"""
00143Dr 3               
00143Dr 3               xt_greater_than:
00143Dr 3  20 rr rr                     jsr underflow_2
001440r 3               
001440r 3  A0 00                        ldy #0          ; default false
001442r 3  20 rr rr                     jsr compare_16bit
001445r 3               
001445r 3                               ; for signed numbers, NOS>TOS gives us Z=0 and N=1
001445r 3  F0 03                        beq @false
001447r 3  10 01                        bpl @false
001449r 3               
001449r 3                               ; true
001449r 3  88                           dey
00144Ar 3               @false:
00144Ar 3  98                           tya
00144Br 3               
00144Br 3  E8                           inx
00144Cr 3  E8                           inx
00144Dr 3  95 00                        sta 0,x
00144Fr 3  95 01                        sta 1,x
001451r 3               
001451r 3  60           z_greater_than: rts
001452r 3               
001452r 3               
001452r 3               
001452r 3               ; ## HERE ( -- addr ) "Put Compiler Pointer on Data Stack"
001452r 3               ; ## "here"  auto  ANS core
001452r 3                       ; """https://forth-standard.org/standard/core/HERE
001452r 3                       ; This code is also used by the assembler directive ARROW
001452r 3                       ; ("->") though as immediate"""
001452r 3               xt_here:
001452r 3               xt_asm_arrow:
001452r 3  CA                           dex
001453r 3  CA                           dex
001454r 3  A5 rr                        lda cp
001456r 3  95 00                        sta 0,x
001458r 3  A5 rr                        lda cp+1
00145Ar 3  95 01                        sta 1,x
00145Cr 3               
00145Cr 3               z_asm_arrow:
00145Cr 3  60           z_here:         rts
00145Dr 3               
00145Dr 3               
00145Dr 3               ; ## HEX ( -- ) "Change base radix to hexadecimal"
00145Dr 3               ; ## "hex"  auto  ANS core ext
00145Dr 3                       ; """https://forth-standard.org/standard/core/HEX"""
00145Dr 3               xt_hex:
00145Dr 3  A9 10                        lda #16
00145Fr 3  85 rr                        sta base
001461r 3  64 rr                        stz base+1              ; paranoid
001463r 3               
001463r 3  60           z_hex:          rts
001464r 3               
001464r 3               
001464r 3               ; ## HEXSTORE ( addr1 u1 addr2 -- u2 ) "Store a list of numbers"
001464r 3               ; ## "hexstore"  auto  Tali
001464r 3                       ; """Given a string addr1 u1 with numbers in the current base seperated
001464r 3                       ; by spaces, store the numbers at the address addr2, returning the
001464r 3                       ; number of elements. Non-number elements are skipped, an zero-length
001464r 3                       ; string produces a zero output.
001464r 3                       ; """
001464r 3               
001464r 3               xt_hexstore:
001464r 3  20 rr rr                     jsr underflow_3
001467r 3               
001467r 3  20 rr rr                     jsr xt_dup              ; Save copy of original address
00146Ar 3  20 rr rr                     jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
00146Dr 3               
00146Dr 3               @loop:
00146Dr 3                               ; Loop until string is totally consumed
00146Dr 3  B5 00                        lda 0,x
00146Fr 3  15 01                        ora 1,x
001471r 3  F0 36                        beq @done
001473r 3               
001473r 3  20 rr rr                     jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
001476r 3               
001476r 3                               ; Prepare the conversion of the number.
001476r 3  20 rr rr                     jsr xt_two_to_r
001479r 3  20 rr rr                     jsr xt_zero
00147Cr 3  20 rr rr                     jsr xt_zero
00147Fr 3  20 rr rr                     jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
001482r 3  20 rr rr                     jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
001485r 3               
001485r 3                               ; If u4 is not zero, we have leftover chars and have to do
001485r 3                               ; things differently
001485r 3  B5 00                        lda 0,x
001487r 3  15 01                        ora 1,x
001489r 3  D0 17                        bne @have_chars_left
00148Br 3               
00148Br 3                               ; Normal case, this number is all done
00148Br 3  20 rr rr                     jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
00148Er 3  20 rr rr                     jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
001491r 3               
001491r 3                               ; Store the new value
001491r 3  20 rr rr                     jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
001494r 3  20 rr rr                     jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
001497r 3               
001497r 3                               ; Increase counter
001497r 3  20 rr rr                     jsr xt_r_from           ; R>
00149Ar 3  20 rr rr                     jsr xt_one_plus         ; 1+
00149Dr 3  20 rr rr                     jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
0014A0r 3  80 CB                        bra @loop
0014A2r 3               
0014A2r 3               @have_chars_left:
0014A2r 3                               ; Pathological case: Drop the rest of this number off the stack
0014A2r 3                               ; and continue with the next word. Doesn't print a warning. We
0014A2r 3                               ; need to drop four cells, that is, eight bytes
0014A2r 3  8A                           txa
0014A3r 3  18                           clc
0014A4r 3  69 08                        adc #8
0014A6r 3  AA                           tax
0014A7r 3  80 C4                        bra @loop
0014A9r 3               
0014A9r 3               @done:
0014A9r 3                               ; Clean up return stack and calculate number of chars stored
0014A9r 3  E8                           inx
0014AAr 3  E8                           inx
0014ABr 3  E8                           inx
0014ACr 3  E8                           inx                     ; 2DROP
0014ADr 3               
0014ADr 3  20 rr rr                     jsr xt_two_r_from       ; ( addr2+n addr2 )
0014B0r 3  20 rr rr                     jsr xt_swap
0014B3r 3  20 rr rr                     jsr xt_minus            ; ( n )
0014B6r 3               
0014B6r 3  60           z_hexstore:     rts
0014B7r 3               
0014B7r 3               
0014B7r 3               
0014B7r 3               ; ## HOLD ( char -- ) "Insert character at current output"
0014B7r 3               ; ## "hold"  auto  ANS core
0014B7r 3                       ; """https://forth-standard.org/standard/core/HOLD
0014B7r 3                       ; Insert a character at the current position of a pictured numeric
0014B7r 3                       ; output string on
0014B7r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
0014B7r 3                       ;
0014B7r 3                       ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal
0014B7r 3                       ; variable tohold instead of HLD.
0014B7r 3                       ; """
0014B7r 3               xt_hold:
0014B7r 3  20 rr rr                     jsr underflow_1
0014BAr 3               
0014BAr 3  A5 rr                        lda tohold
0014BCr 3  D0 02                        bne @1
0014BEr 3  C6 rr                        dec tohold+1
0014C0r 3               @1:
0014C0r 3  C6 rr                        dec tohold
0014C2r 3               
0014C2r 3  B5 00                        lda 0,x
0014C4r 3  92 rr                        sta (tohold)
0014C6r 3  E8                           inx
0014C7r 3  E8                           inx
0014C8r 3               
0014C8r 3  60           z_hold:         rts
0014C9r 3               
0014C9r 3               
0014C9r 3               ; ## I ( -- n )(R: n -- n)  "Copy loop counter to stack"
0014C9r 3               ; ## "i"  auto  ANS core
0014C9r 3                       ; """https://forth-standard.org/standard/core/I
0014C9r 3                       ; Note that this is not the same as R@ because we use a fudge
0014C9r 3                       ; factor for loop control; see the Control Flow section of the
0014C9r 3                       ; manual for details.
0014C9r 3                       ;
0014C9r 3                       ; We should make this native compile for speed.
0014C9r 3                       ; """
0014C9r 3               
0014C9r 3               xt_i:
0014C9r 3  CA                           dex
0014CAr 3  CA                           dex
0014CBr 3               
0014CBr 3                               ; Get the fudged index off of the top of the stack. It's
0014CBr 3                               ; easier to do math on the stack directly than to pop and
0014CBr 3                               ; push stuff around
0014CBr 3  86 rr                        stx tmpdsp
0014CDr 3  BA                           tsx
0014CEr 3               
0014CEr 3  38                           sec
0014CFr 3  BD 01 01                     lda $0101,x     ; LSB
0014D2r 3  FD 03 01                     sbc $0103,x
0014D5r 3  A8                           tay
0014D6r 3               
0014D6r 3  BD 02 01                     lda $0102,x     ; MSB
0014D9r 3  FD 04 01                     sbc $0104,x
0014DCr 3               
0014DCr 3  A6 rr                        ldx tmpdsp
0014DEr 3               
0014DEr 3  95 01                        sta 1,x         ; MSB of de-fudged index
0014E0r 3  94 00                        sty 0,x         ; LSB of de-fudged index
0014E2r 3               
0014E2r 3  60           z_i:            rts
0014E3r 3               
0014E3r 3               
0014E3r 3               
0014E3r 3               ; ## IF (C: -- orig) (flag -- ) "Conditional flow control"
0014E3r 3               ; ## "if"  auto  ANS core
0014E3r 3                       ; """http://forth-standard.org/standard/core/IF"""
0014E3r 3               
0014E3r 3               xt_if:
0014E3r 3                               ; Compile a 0BRANCH
0014E3r 3  A0 rr                        ldy #>zero_branch_runtime
0014E5r 3  A9 rr                        lda #<zero_branch_runtime
0014E7r 3  20 rr rr                     jsr cmpl_subroutine
0014EAr 3               
0014EAr 3                               ; Put the origination address on the stack for else/then
0014EAr 3  20 rr rr                     jsr xt_here
0014EDr 3               
0014EDr 3                               ; Stuff zero in for the branch address right now.
0014EDr 3                               ; THEN or ELSE will fix it later.
0014EDr 3  20 rr rr                     jsr xt_zero
0014F0r 3  20 rr rr                     jsr xt_comma
0014F3r 3  60           z_if:           rts
0014F4r 3               
0014F4r 3               
0014F4r 3               zero_branch_runtime:
0014F4r 3                       ; """In some Forths, this is called (0BRANCH). Tali Forth originally
0014F4r 3                       ; included 0BRANCH as a high-level word that inserted this code at
0014F4r 3                       ; runtime.
0014F4r 3                       ; """
0014F4r 3               
0014F4r 3                               ; We use the return value on the 65c02 stack to determine
0014F4r 3                               ; where we want to return to.
0014F4r 3  68                           pla
0014F5r 3  85 rr                        sta tmpbranch
0014F7r 3  68                           pla
0014F8r 3  85 rr                        sta tmpbranch+1
0014FAr 3               
0014FAr 3                               ; See if the flag is zero, which is the whole purpose of
0014FAr 3                               ; this all
0014FAr 3  B5 00                        lda 0,x
0014FCr 3  15 01                        ora 1,x
0014FEr 3  F0 0F                        beq @zero
001500r 3               
001500r 3                               ; Flag is TRUE, so we skip over the next two bytes. This is
001500r 3                               ; the part between IF and THEN
001500r 3  A5 rr                        lda tmpbranch   ; LSB
001502r 3  18                           clc
001503r 3  69 02                        adc #2
001505r 3  85 rr                        sta tmp1
001507r 3  A5 rr                        lda tmpbranch+1 ; MSB
001509r 3  69 00                        adc #0          ; For carry
00150Br 3  85 rr                        sta tmp1+1
00150Dr 3               
00150Dr 3  80 13                        bra @done
00150Fr 3               
00150Fr 3               @zero:
00150Fr 3                               ; Flag is FALSE (0) so we take the jump to the address given in
00150Fr 3                               ; the next two bytes. However, the address points to the last
00150Fr 3                               ; byte of the JSR instruction, not to the next byte afterwards
00150Fr 3  A0 01                        ldy #1
001511r 3  B1 rr                        lda (tmpbranch),y
001513r 3  85 rr                        sta tmp1
001515r 3  C8                           iny
001516r 3  B1 rr                        lda (tmpbranch),y
001518r 3  85 rr                        sta tmp1+1
00151Ar 3               
00151Ar 3                               ; Now we have to subtract one byte from the address
00151Ar 3                               ; given because of the way the 6502 calculates RTS
00151Ar 3  A5 rr                        lda tmp1
00151Cr 3  D0 02                        bne @1
00151Er 3  C6 rr                        dec tmp1+1
001520r 3               @1:
001520r 3  C6 rr                        dec tmp1
001522r 3               
001522r 3               @done:
001522r 3                               ; However we got here, tmp1 has the value we push to jump
001522r 3                               ; to
001522r 3  A5 rr                        lda tmp1+1
001524r 3  48                           pha             ; MSB first
001525r 3  A5 rr                        lda tmp1
001527r 3  48                           pha
001528r 3               
001528r 3                               ; clean up the stack and jump
001528r 3  E8                           inx
001529r 3  E8                           inx
00152Ar 3               
00152Ar 3  60                           rts
00152Br 3               
00152Br 3               
00152Br 3               
00152Br 3               ; ## IMMEDIATE ( -- ) "Mark most recent word as IMMEDIATE"
00152Br 3               ; ## "immediate"  auto  ANS core
00152Br 3                       ; """https://forth-standard.org/standard/core/IMMEDIATE
00152Br 3                       ; Make sure the most recently defined word is immediate. Will only
00152Br 3                       ; affect the last word in the dictionary. Note that if the word is
00152Br 3                       ; defined in ROM, this will have no affect, but will not produce an
00152Br 3                       ; error message.
00152Br 3                       ; """
00152Br 3               xt_immediate:
00152Br 3  20 rr rr                     jsr current_to_dp
00152Er 3  A0 01                        ldy #1          ; offset for status byte
001530r 3  B1 rr                        lda (dp),y
001532r 3  09 04                        ora #IM        ; make sure bit 7 is set
001534r 3  91 rr                        sta (dp),y
001536r 3               
001536r 3  60           z_immediate:    rts
001537r 3               
001537r 3               
001537r 3               ; ## INPUT ( -- addr ) "Return address of input vector"
001537r 3               ; ## "input" tested Tali Forth
001537r 3               
001537r 3               xt_input:
001537r 3  CA                           dex
001538r 3  CA                           dex
001539r 3  A9 rr                        lda #<input
00153Br 3  95 00                        sta 0,x
00153Dr 3  A9 rr                        lda #>input
00153Fr 3  95 01                        sta 1,x
001541r 3               
001541r 3  60           z_input:        rts
001542r 3               
001542r 3               
001542r 3               
001542r 3               ; ## INPUT_TO_R ( -- ) ( R: -- n n n n ) "Save input state to the Return Stack"
001542r 3               ; ## "input>r"  tested  Tali Forth
001542r 3                  	; """Save the current input state as defined by insrc, cib, ciblen, and
001542r 3                       ; toin to the Return Stack. Used by EVALUTE.
001542r 3                       ;
001542r 3                       ; The naive way of doing
001542r 3                       ; this is to push each two-byte variable to the stack in the form of
001542r 3                       ;
001542r 3                       ;       lda insrc
001542r 3                       ;       pha
001542r 3                       ;       lda insrc+1
001542r 3                       ;       pha
001542r 3                       ;
001542r 3                       ; for a total of 24 byte of instruction in one direction and later
001542r 3                       ; a further 24 bytes to reverse the process. We shorten this at the
001542r 3                       ; cost of some speed by assuming the four variables are grouped
001542r 3                       ; together on the Zero Page and start with insrc (see definitions.asm
001542r 3                       ; for details). The reverse operation is r_to_input. These words must
001542r 3                       ; be flagged as Never Native. Uses tmp1
001542r 3                       ; """
001542r 3               
001542r 3               xt_input_to_r:
001542r 3                               ; We arrive here with the return address on the top of the
001542r 3                               ; 65c02's stack. We need to move it out of the way first
001542r 3  68                           pla
001543r 3  85 rr                        sta tmp1
001545r 3  68                           pla
001546r 3  85 rr                        sta tmp1+1
001548r 3               
001548r 3                               ; This assumes that insrc is the first of eight bytes and
001548r 3                               ; toin+1 the last in the sequence we want to save from the Zero
001548r 3                               ; Page.
001548r 3  A0 07                        ldy #7
00154Ar 3               @loop:
00154Ar 3  B9 rr rr                     lda insrc,y     ; insrc+7 is toin+1
00154Dr 3  48                           pha
00154Er 3  88                           dey
00154Fr 3  10 F9                        bpl @loop
001551r 3               
001551r 3                               ; Restore address for return jump
001551r 3  A5 rr                        lda tmp1+1
001553r 3  48                           pha
001554r 3  A5 rr                        lda tmp1
001556r 3  48                           pha
001557r 3               
001557r 3  60           z_input_to_r: 	rts
001558r 3               
001558r 3               
001558r 3               
001558r 3               ; ## INT_TO_NAME ( xt -- nt ) "Get name token from execution token"
001558r 3               ; ## "int>name"  auto  Tali Forth
001558r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001558r 3                       ; This is called >NAME in Gforth, but we change it to
001558r 3                       ; INT>NAME to match NAME>INT
001558r 3                       ; """
001558r 3               
001558r 3               xt_int_to_name:
001558r 3  20 rr rr                     jsr underflow_1
00155Br 3               
00155Br 3                               ; Unfortunately, to find the header, we have to walk through
00155Br 3                               ; all of the wordlists. We are running out of tmp variables.
00155Br 3                               ; (I'm assuming there is a reason this is avoiding tmp1) so
00155Br 3                               ; hold the current wordlist on the data stack. This searches
00155Br 3                               ; all of the wordlists in id order.
00155Br 3  CA                           dex
00155Cr 3  CA                           dex
00155Dr 3  74 00                        stz 0,x
00155Fr 3  74 01                        stz 1,x
001561r 3               
001561r 3               @wordlist_loop:
001561r 3                               ; A needs to have the current wordlist id in it at
001561r 3                               ; the top of this loop.
001561r 3  B5 00                        lda 0,x                 ; Get the current wordlist.
001563r 3               
001563r 3                               ; Get the DP for that wordlist.
001563r 3  0A                           asl                     ; Turn offset into cells offset.
001564r 3  18                           clc
001565r 3  69 06                        adc #wordlists_offset
001567r 3  A8                           tay
001568r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
00156Ar 3  85 rr                        sta tmp2                ; into tmp2
00156Cr 3  C8                           iny
00156Dr 3  B1 rr                        lda (up),y
00156Fr 3  85 rr                        sta tmp2+1
001571r 3               
001571r 3                               ; Check for an empty wordlist (DP will be 0)
001571r 3  A5 rr                        lda tmp2
001573r 3  05 rr                        ora tmp2+1
001575r 3  F0 38                        beq @next_wordlist
001577r 3               
001577r 3  B5 02                        lda 2,x         ; Target xt is now behind wordlist id.
001579r 3  85 rr                        sta tmp3        ; Save target xt in tmp3
00157Br 3  B5 03                        lda 3,x
00157Dr 3  85 rr                        sta tmp3+1
00157Fr 3               
00157Fr 3               @loop:
00157Fr 3  A0 04                        ldy #4          ; xt is four bytes down
001581r 3  B1 rr                        lda (tmp2),y    ; LSB of xt of current nt
001583r 3  C5 rr                        cmp tmp3
001585r 3  D0 07                        bne @no_match
001587r 3               
001587r 3                               ; LSB is the same, now check MSB
001587r 3  C8                           iny
001588r 3  B1 rr                        lda (tmp2),y    ; MSB of xt of current nt
00158Ar 3  C5 rr                        cmp tmp3+1
00158Cr 3  F0 32                        beq @match
00158Er 3               
00158Er 3               @no_match:
00158Er 3                               ; no match, so we need to get the next word. Next nt is two
00158Er 3                               ; bytes down
00158Er 3  18                           clc
00158Fr 3  A5 rr                        lda tmp2
001591r 3  69 02                        adc #2
001593r 3  85 rr                        sta tmp2
001595r 3  A5 rr                        lda tmp2+1
001597r 3  69 00                        adc #0          ; only care about carry
001599r 3  85 rr                        sta tmp2+1
00159Br 3               
00159Br 3  A0 00                        ldy #0
00159Dr 3  B1 rr                        lda (tmp2),y
00159Fr 3  48                           pha
0015A0r 3  C8                           iny
0015A1r 3  11 rr                        ora (tmp2),y
0015A3r 3  F0 09                        beq @zero
0015A5r 3               
0015A5r 3                               ; Not zero continue
0015A5r 3  B1 rr                        lda (tmp2),y
0015A7r 3  85 rr                        sta tmp2+1
0015A9r 3  68                           pla
0015AAr 3  85 rr                        sta tmp2
0015ACr 3  80 D1                        bra @loop
0015AEr 3               
0015AEr 3               @zero:
0015AEr 3                               ; if next word is zero, the xt has no nt in this wordlist
0015AEr 3  68                           pla             ; Leftover from above loop
0015AFr 3               
0015AFr 3               @next_wordlist:
0015AFr 3                               ; Move on to the next wordlist.
0015AFr 3  B5 00                        lda 0,x
0015B1r 3  1A                           inc
0015B2r 3  95 00                        sta 0,x
0015B4r 3  C9 0C                        cmp #max_wordlists
0015B6r 3  D0 A9                        bne @wordlist_loop
0015B8r 3               
0015B8r 3                               ; We didn't find it in any of the wordlists.
0015B8r 3                               ; Remove the wordlist id from the stack.
0015B8r 3  E8                           inx
0015B9r 3  E8                           inx
0015BAr 3               
0015BAr 3                               ; We return a zero to indicate that we didn't find it.
0015BAr 3  74 00                        stz 0,x
0015BCr 3  74 01                        stz 1,x
0015BEr 3  80 0A                        bra z_int_to_name
0015C0r 3               
0015C0r 3               @match:
0015C0r 3                               ; We found it. Remove wordlist id from stack.
0015C0r 3  E8                           inx
0015C1r 3  E8                           inx
0015C2r 3               
0015C2r 3                               ; It's a match! Replace TOS with nt
0015C2r 3  A5 rr                        lda tmp2
0015C4r 3  95 00                        sta 0,x
0015C6r 3  A5 rr                        lda tmp2+1
0015C8r 3  95 01                        sta 1,x
0015CAr 3               
0015CAr 3  60           z_int_to_name:  rts
0015CBr 3               
0015CBr 3               
0015CBr 3               
0015CBr 3               ; ## INVERT ( n -- n ) "Complement of TOS"
0015CBr 3               ; ## "invert"  auto  ANS core
0015CBr 3                       ; """https://forth-standard.org/standard/core/INVERT"""
0015CBr 3               xt_invert:
0015CBr 3  20 rr rr                     jsr underflow_1
0015CEr 3               
0015CEr 3  A9 FF                        lda #$FF
0015D0r 3  55 00                        eor 0,x         ; LSB
0015D2r 3  95 00                        sta 0,x
0015D4r 3               
0015D4r 3  A9 FF                        lda #$FF
0015D6r 3  55 01                        eor 1,x         ; MSB
0015D8r 3  95 01                        sta 1,x
0015DAr 3               
0015DAr 3  60           z_invert:       rts
0015DBr 3               
0015DBr 3               
0015DBr 3               ; ## IS ( xt "name" -- ) "Set named word to execute xt"
0015DBr 3               ; ## "is"  auto  ANS core ext
0015DBr 3                       ; """http://forth-standard.org/standard/core/IS"""
0015DBr 3               
0015DBr 3               xt_is:
0015DBr 3                               ; This is a state aware word with differet behavior
0015DBr 3                               ; when used while compiling vs interpreting.
0015DBr 3                               ; Check STATE
0015DBr 3  A5 rr                        lda state
0015DDr 3  05 rr                        ora state+1
0015DFr 3  F0 0C                        beq @interpreting
0015E1r 3               
0015E1r 3               @compiling:
0015E1r 3                               ; Run ['] to compile the xt of the next word as a literal.
0015E1r 3  20 rr rr                     jsr xt_bracket_tick
0015E4r 3               
0015E4r 3                               ; Postpone DEFER! by compiling a JSR to it.
0015E4r 3  A0 rr                        ldy #>xt_defer_store
0015E6r 3  A9 rr                        lda #<xt_defer_store
0015E8r 3  20 rr rr                     jsr cmpl_subroutine
0015EBr 3               
0015EBr 3  80 06                        bra @done
0015EDr 3               
0015EDr 3               @interpreting:
0015EDr 3  20 rr rr                     jsr xt_tick
0015F0r 3  20 rr rr                     jsr xt_defer_store
0015F3r 3               @done:
0015F3r 3  60           z_is:           rts
0015F4r 3               
0015F4r 3               
0015F4r 3               
0015F4r 3               ; ## J ( -- n ) (R: n -- n ) "Copy second loop counter to stack"
0015F4r 3               ; ## "j"  auto  ANS core
0015F4r 3                       ; """https://forth-standard.org/standard/core/J
0015F4r 3                       ; Copy second loop counter from Return Stack to stack. Note we use
0015F4r 3                       ; a fudge factor for loop control; see the Control Flow section of
0015F4r 3                       ; the manual for more details.
0015F4r 3                       ; At this point, we have the "I" counter/limit and the LEAVE address
0015F4r 3                       ; on the stack above this (three entries), whereas the ideal Forth
0015F4r 3                       ; implementation would just have two.
0015F4r 3                       ;
0015F4r 3                       ; Make this native compiled for speed
0015F4r 3                       ; """
0015F4r 3               
0015F4r 3               xt_j:
0015F4r 3  CA                           dex
0015F5r 3  CA                           dex
0015F6r 3               
0015F6r 3                               ; Get the fudged index off from the stack. It's easier to
0015F6r 3                               ; do math on the stack directly than to pop and push stuff
0015F6r 3                               ; around
0015F6r 3  86 rr                        stx tmpdsp
0015F8r 3  BA                           tsx
0015F9r 3               
0015F9r 3  38                           sec
0015FAr 3  BD 07 01                     lda $0107,x     ; LSB
0015FDr 3  FD 09 01                     sbc $0109,x
001600r 3  A8                           tay
001601r 3               
001601r 3  BD 08 01                     lda $0108,x     ; MSB
001604r 3  FD 0A 01                     sbc $010A,x
001607r 3               
001607r 3  A6 rr                        ldx tmpdsp
001609r 3               
001609r 3  95 01                        sta 1,x         ; MSB of de-fudged index
00160Br 3  94 00                        sty 0,x         ; LSB of de-fudged index
00160Dr 3               
00160Dr 3  60           z_j:            rts
00160Er 3               
00160Er 3               
00160Er 3               
00160Er 3               ; ## KEY ( -- char ) "Get one character from the input"
00160Er 3               ; ## "key"  tested  ANS core
00160Er 3               xt_key:
00160Er 3                       ; """https://forth-standard.org/standard/core/KEY
00160Er 3                       ; Get a single character of input from the vectored
00160Er 3                       ; input without echoing.
00160Er 3                       ; """
00160Er 3  20 rr rr                     jsr key_a               ; returns char in A
001611r 3               
001611r 3  CA                           dex
001612r 3  CA                           dex
001613r 3  95 00                        sta 0,x
001615r 3  74 01                        stz 1,x
001617r 3               
001617r 3  60           z_key:          rts
001618r 3               
001618r 3               key_a:
001618r 3                       ; The 65c02 doesn't have a JSR (ADDR,X) instruction like the
001618r 3                       ; 65816, so we have to fake the indirect jump to vector it.
001618r 3                       ; This is depressingly slow. We use this routine internally
001618r 3                       ; to avoid manipulating the Data Stack when we just want a
001618r 3                       ; character
001618r 3  6C rr rr                     jmp (input)             ; JSR/RTS
00161Br 3               
00161Br 3               
00161Br 3               ; ## LATESTNT ( -- nt ) "Push most recent nt to the stack"
00161Br 3               ; ## "latestnt"  auto  Tali Forth
00161Br 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
00161Br 3                       ; The Gforth version of this word is called LATEST
00161Br 3                       ; """
00161Br 3               xt_latestnt:
00161Br 3  CA                           dex
00161Cr 3  CA                           dex
00161Dr 3               
00161Dr 3  20 rr rr                     jsr current_to_dp
001620r 3               
001620r 3  A5 rr                        lda dp
001622r 3  95 00                        sta 0,x
001624r 3  A5 rr                        lda dp+1
001626r 3  95 01                        sta 1,x
001628r 3               
001628r 3  60           z_latestnt:     rts
001629r 3               
001629r 3               
001629r 3               ; ## LATESTXT ( -- xt ) "Push most recent xt to the stack"
001629r 3               ; ## "latestxt"  auto  Gforth
001629r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Anonymous-Definitions.html"""
001629r 3               xt_latestxt:
001629r 3  20 rr rr                     jsr xt_latestnt         ; ( nt )
00162Cr 3  20 rr rr                     jsr xt_name_to_int      ; ( xt )
00162Fr 3               
00162Fr 3  60           z_latestxt:     rts
001630r 3               
001630r 3               
001630r 3               ; ## LEAVE ( -- ) "Leave DO/LOOP construct"
001630r 3               ; ## "leave"  auto  ANS core
001630r 3                       ; """https://forth-standard.org/standard/core/LEAVE
001630r 3                       ; Note that this does not work with anything but a DO/LOOP in
001630r 3                       ; contrast to other versions such as discussed at
001630r 3                       ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
001630r 3                       ;
001630r 3                       ;       : LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY
001630r 3                       ; See the Control Flow section in the manual for details of how this works.
001630r 3                       ; This must be native compile and not IMMEDIATE
001630r 3                       ; """
001630r 3               
001630r 3               xt_leave:
001630r 3                               ; We dump the limit/start entries off the Return Stack
001630r 3                               ; (four bytes)
001630r 3  68                           pla
001631r 3  68                           pla
001632r 3  68                           pla
001633r 3  68                           pla
001634r 3               
001634r 3  60                           rts             ; this must be compiled, so keep before z_leave
001635r 3               z_leave:                        ; not reached, not compiled
001635r 3               
001635r 3               
001635r 3               
001635r 3               ; ## LEFT_BRACKET ( -- ) "Enter interpretation state"
001635r 3               ; ## "["  auto  ANS core
001635r 3                       ; """https://forth-standard.org/standard/core/Bracket
001635r 3                       ; This is an immediate and compile-only word
001635r 3                       ; """
001635r 3               xt_left_bracket:
001635r 3  64 rr                        stz state
001637r 3  64 rr                        stz state+1
001639r 3               
001639r 3  60           z_left_bracket: rts
00163Ar 3               
00163Ar 3               
00163Ar 3               ; ## LESS_NUMBER_SIGN ( -- ) "Start number conversion"
00163Ar 3               ; ## "<#"  auto  ANS core
00163Ar 3                       ; """https://forth-standard.org/standard/core/num-start
00163Ar 3                       ; Start the process to create pictured numeric output.
00163Ar 3                       ;
00163Ar 3                       ; The new
00163Ar 3                       ; string is constructed from back to front, saving the new character
00163Ar 3                       ; at the beginning of the output string. Since we use PAD as a
00163Ar 3                       ; starting address and work backward (!), the string is constructed
00163Ar 3                       ; in the space between the end of the Dictionary (as defined by CP)
00163Ar 3                       ; and the PAD. This allows us to satisfy the ANS Forth condition that
00163Ar 3                       ; programs don't fool around with the PAD but still use its address.
00163Ar 3                       ; Based on pForth
00163Ar 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
00163Ar 3                       ; pForth is in the pubic domain. Forth is : <# PAD HLD ! ; we use the
00163Ar 3                       ; internal variable tohold instead of HLD.
00163Ar 3                       ; """
00163Ar 3               xt_less_number_sign:
00163Ar 3  20 rr rr                     jsr xt_pad      ; ( addr )
00163Dr 3               
00163Dr 3  B5 00                        lda 0,x
00163Fr 3  85 rr                        sta tohold
001641r 3  B5 01                        lda 1,x
001643r 3  85 rr                        sta tohold+1
001645r 3               
001645r 3  E8                           inx
001646r 3  E8                           inx
001647r 3               
001647r 3               z_less_number_sign:
001647r 3  60                           rts
001648r 3               
001648r 3               ; ## LESS_THAN ( n m -- f ) "Return true if NOS < TOS"
001648r 3               ; ## "<"  auto  ANS core
001648r 3                       ; """https://forth-standard.org/standard/core/less"""
001648r 3               
001648r 3               xt_less_than:
001648r 3  20 rr rr                     jsr underflow_2
00164Br 3               
00164Br 3  A0 00                        ldy #0          ; default false
00164Dr 3  20 rr rr                     jsr compare_16bit
001650r 3               
001650r 3                               ; for signed numbers, NOS < TOS if Z=0 and N=0
001650r 3  F0 03                        beq @false
001652r 3  30 01                        bmi @false
001654r 3               
001654r 3                               ; true
001654r 3  88                           dey
001655r 3               @false:
001655r 3  98                           tya
001656r 3               
001656r 3  E8                           inx
001657r 3  E8                           inx
001658r 3  95 00                        sta 0,x
00165Ar 3  95 01                        sta 1,x
00165Cr 3               
00165Cr 3  60           z_less_than:    rts
00165Dr 3               
00165Dr 3               
00165Dr 3               
00165Dr 3               ; ## LIST ( scr# -- ) "List the given screen"
00165Dr 3               ; ## "list"  tested  ANS block ext
00165Dr 3                       ; """https://forth-standard.org/standard/block/LIST"""
00165Dr 3               
00165Dr 3               xt_list:
00165Dr 3  20 rr rr                     jsr underflow_1
001660r 3               
001660r 3                               ; Save the screen number in SCR
001660r 3  20 rr rr                     jsr xt_scr
001663r 3  20 rr rr                     jsr xt_store
001666r 3               
001666r 3                               ; Use L from the editor-wordlist to display the screen.
001666r 3  20 rr rr                     jsr xt_editor_l
001669r 3               
001669r 3  60           z_list:         rts
00166Ar 3               
00166Ar 3               
00166Ar 3               
00166Ar 3               ; ## LITERAL ( n -- ) "Store TOS to be push on stack during runtime"
00166Ar 3               ; ## "literal"  auto  ANS core
00166Ar 3                       ; """https://forth-standard.org/standard/core/LITERAL
00166Ar 3                       ; Compile-only word to store TOS so that it is pushed on stack
00166Ar 3                       ; during runtime. This is a immediate, compile-only word. At runtime,
00166Ar 3                       ; it works by calling literal_runtime by compling JSR LITERAL_RT.
00166Ar 3                       ;
00166Ar 3                       ; Note the cmpl_ routines use TMPTOS
00166Ar 3                       ; """
00166Ar 3               xt_literal:
00166Ar 3  20 rr rr                     jsr underflow_1
00166Dr 3               
00166Dr 3  A0 rr                        ldy #>literal_runtime
00166Fr 3  A9 rr                        lda #<literal_runtime
001671r 3  20 rr rr                     jsr cmpl_subroutine
001674r 3               
001674r 3                               ; Compile the value that is to be pushed on the Stack during
001674r 3                               ; runtime
001674r 3  20 rr rr                     jsr xt_comma
001677r 3               
001677r 3  60           z_literal:      rts
001678r 3               
001678r 3               literal_runtime:
001678r 3               
001678r 3                               ; During runtime, we push the value following this word back
001678r 3                               ; on the Data Stack. The subroutine jump that brought us
001678r 3                               ; here put the address to return to on the Return Stack -
001678r 3                               ; this points to the data we need to get. This routine is
001678r 3                               ; also called (LITERAL) in some Forths
001678r 3  CA                           dex
001679r 3  CA                           dex
00167Ar 3               
00167Ar 3                           	; The 65c02 stores <RETURN-ADDRESS>-1 on the Return Stack,
00167Ar 3                               ; so we are actually popping the address-1 of the literal
00167Ar 3  68                           pla             ; LSB
00167Br 3  85 rr                        sta tmp1
00167Dr 3  68                           pla             ; MSB
00167Er 3  85 rr                        sta tmp1+1
001680r 3               
001680r 3                               ; Fetch the actual literal value and push it on Data stack
001680r 3  A0 01                        ldy #1
001682r 3  B1 rr                        lda (tmp1),y    ; LSB
001684r 3  95 00                        sta 0,x
001686r 3  C8                           iny
001687r 3  B1 rr                        lda (tmp1),y    ; MSB
001689r 3  95 01                        sta 1,x
00168Br 3               
00168Br 3                               ; Adjust return address and push back on the Return Stack
00168Br 3  98                           tya
00168Cr 3  18                           clc
00168Dr 3  65 rr                        adc tmp1
00168Fr 3  A8                           tay
001690r 3  A5 rr                        lda tmp1+1
001692r 3  69 00                        adc #0
001694r 3  48                           pha
001695r 3  5A                           phy
001696r 3               
001696r 3  60                           rts
001697r 3               
001697r 3               
001697r 3               
001697r 3               ; ## LOAD ( scr# -- ) "Load the Forth code in a screen/block"
001697r 3               ; ## "load"  auto  ANS block
001697r 3                       ; """https://forth-standard.org/standard/block/LOAD
001697r 3                       ;
001697r 3                       ; Note: LOAD current works because there is only one buffer.
001697r 3                       ; If/when multiple buffers are supported, we'll have to deal
001697r 3                       ; with the fact that it might re-load the old block into a
001697r 3                       ; different buffer.
001697r 3                       ; """
001697r 3               
001697r 3               xt_load:
001697r 3  20 rr rr                     jsr underflow_1
00169Ar 3               
00169Ar 3                               ; Save the current value of BLK on the return stack.
00169Ar 3  A0 01                        ldy #blk_offset+1
00169Cr 3  B1 rr                        lda (up),y
00169Er 3  48                           pha
00169Fr 3  88                           dey
0016A0r 3  B1 rr                        lda (up),y
0016A2r 3  48                           pha
0016A3r 3               
0016A3r 3                               ; Set BLK to the given block/screen number.
0016A3r 3  B5 00                        lda 0,x
0016A5r 3  91 rr                        sta (up),y
0016A7r 3  C8                           iny
0016A8r 3  B5 01                        lda 1,x
0016AAr 3  91 rr                        sta (up),y
0016ACr 3               
0016ACr 3                               ; Load that block into a buffer
0016ACr 3  20 rr rr                     jsr xt_block
0016AFr 3               
0016AFr 3                               ; Put 1024 on the stack for the screen length.
0016AFr 3  CA                           dex
0016B0r 3  CA                           dex
0016B1r 3  A9 04                        lda #4
0016B3r 3  95 01                        sta 1,x
0016B5r 3  74 00                        stz 0,x
0016B7r 3               
0016B7r 3                               ; Jump to a special evluate target. This bypasses the underflow
0016B7r 3                               ; check and skips the zeroing of BLK.
0016B7r 3  20 rr rr                     jsr load_evaluate
0016BAr 3               
0016BAr 3                               ; Restore the value of BLK from before the LOAD command.
0016BAr 3  A0 00                        ldy #blk_offset
0016BCr 3  68                           pla
0016BDr 3  91 rr                        sta (up),y
0016BFr 3  C8                           iny
0016C0r 3  68                           pla
0016C1r 3  91 rr                        sta (up),y
0016C3r 3               
0016C3r 3                               ; If BLK is not zero, read it back into the buffer.
0016C3r 3                               ; A still has MSB
0016C3r 3  88                           dey
0016C4r 3  11 rr                        ora (up),y
0016C6r 3  F0 12                        beq @done
0016C8r 3               
0016C8r 3                               ; The block needs to be read back into the buffer.
0016C8r 3  CA                           dex
0016C9r 3  CA                           dex
0016CAr 3  A0 00                        ldy #blk_offset
0016CCr 3  B1 rr                        lda (up),y
0016CEr 3  95 00                        sta 0,x
0016D0r 3  C8                           iny
0016D1r 3  B1 rr                        lda (up),y
0016D3r 3  95 01                        sta 1,x
0016D5r 3  20 rr rr                     jsr xt_block
0016D8r 3               
0016D8r 3                               ; Drop the buffer address.
0016D8r 3  E8                           inx
0016D9r 3  E8                           inx
0016DAr 3               
0016DAr 3               @done:
0016DAr 3  60           z_load:         rts
0016DBr 3               
0016DBr 3               
0016DBr 3               
0016DBr 3               ; ## LOOP ( -- ) "Finish loop construct"
0016DBr 3               ; ## "loop"  auto  ANS core
0016DBr 3                       ; """https://forth-standard.org/standard/core/LOOP
0016DBr 3                       ; Compile-time part of LOOP. This does nothing more but push 1 on
0016DBr 3                       ; the stack and then call +LOOP.
0016DBr 3                       ;
0016DBr 3                       ; In Forth, this is
0016DBr 3                       ;       : LOOP  POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ;
0016DBr 3                       ;       IMMEDIATE ; COMPILE-ONLY
0016DBr 3                       ; """
0016DBr 3               xt_loop:
0016DBr 3                               ; Have the finished word push 1 on the stack
0016DBr 3  A0 rr                        ldy #>xt_one
0016DDr 3  A9 rr                        lda #<xt_one
0016DFr 3  20 rr rr                     jsr cmpl_subroutine     ; drop through to +LOOP
0016E2r 3               
0016E2r 3               
0016E2r 3               ; ## PLUS_LOOP ( -- ) "Finish loop construct"
0016E2r 3               ; ## "+loop"  auto  ANS core
0016E2r 3                       ; """https://forth-standard.org/standard/core/PlusLOOP
0016E2r 3                       ;
0016E2r 3                       ; Compile-time part of +LOOP, also used for LOOP. Is usually
0016E2r 3                       ;       : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
0016E2r 3                       ;       COMPILE-ONLY
0016E2r 3                       ; in Forth. LOOP uses this routine as well. We jump here with the
0016E2r 3                       ; address for looping as TOS and the address for aborting the loop
0016E2r 3                       ; (LEAVE) as the second double-byte entry on the Return Stack (see
0016E2r 3                       ; DO and the Control Flow section of the manual for details).
0016E2r 3                       ; """
0016E2r 3               
0016E2r 3               xt_plus_loop:
0016E2r 3                               ; Compile the run-time part. We do this with a short loop
0016E2r 3                               ; and not a call to COMPILE, because it has to be natively
0016E2r 3                               ; coded anyway.
0016E2r 3  A0 11                        ldy #plus_loop_runtime_end-plus_loop_runtime
0016E4r 3  5A                           phy             ; save counter to adjust CP
0016E5r 3               @1:
0016E5r 3  B9 rr rr                     lda plus_loop_runtime,y
0016E8r 3  91 rr                        sta (cp),y
0016EAr 3  88                           dey
0016EBr 3  10 F8                        bpl @1
0016EDr 3               
0016EDr 3                               ; Adjust CP
0016EDr 3  68                           pla
0016EEr 3  18                           clc
0016EFr 3  65 rr                        adc cp
0016F1r 3  85 rr                        sta cp
0016F3r 3  A5 rr                        lda cp+1
0016F5r 3  69 00                        adc #0          ; only need carry
0016F7r 3  85 rr                        sta cp+1
0016F9r 3               
0016F9r 3                               ; The address we need to loop back to is TOS. Store it so
0016F9r 3                               ; the runtime part of +LOOP jumps back up there
0016F9r 3  20 rr rr                     jsr xt_comma
0016FCr 3               
0016FCr 3                               ; Compile an UNLOOP for when we're all done. This is a series
0016FCr 3                               ; of six PLA, so we just do it here instead jumping around
0016FCr 3                               ; all over the place
0016FCr 3  A9 68                        lda #$68                ; opcode for PLA
0016FEr 3  A0 06                        ldy #6
001700r 3               @2:
001700r 3  91 rr                        sta (cp),y
001702r 3  88                           dey
001703r 3  10 FB                        bpl @2
001705r 3               
001705r 3                               ; Adjust CP
001705r 3  A9 06                        lda #6
001707r 3  18                           clc
001708r 3  65 rr                        adc cp
00170Ar 3  85 rr                        sta cp
00170Cr 3  A5 rr                        lda cp+1
00170Er 3  69 00                        adc #0                  ; only need carry
001710r 3  85 rr                        sta cp+1
001712r 3               
001712r 3                               ; Complete compile of DO/?DO by replacing the six
001712r 3                               ; dummy bytes by PHA instructions. The address where
001712r 3                               ; they are located is on the Data Stack
001712r 3  B5 00                        lda 0,x
001714r 3  85 rr                        sta tmp1
001716r 3  B5 01                        lda 1,x
001718r 3  85 rr                        sta tmp1+1
00171Ar 3  E8                           inx
00171Br 3  E8                           inx
00171Cr 3               
00171Cr 3                               ; Because of the way that CP works, we don't have to save
00171Cr 3                               ; CP, but CP-1
00171Cr 3  A5 rr                        lda cp
00171Er 3  38                           sec
00171Fr 3  E9 01                        sbc #1
001721r 3  85 rr                        sta tmp2
001723r 3  A5 rr                        lda cp+1
001725r 3  E9 00                        sbc #0
001727r 3  85 rr                        sta tmp2+1
001729r 3               
001729r 3                               ; now compile this in the DO/?DO routine
001729r 3  A0 00                        ldy #0
00172Br 3               
00172Br 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
00172Dr 3  91 rr                        sta (tmp1),y
00172Fr 3  C8                           iny
001730r 3  A5 rr                        lda tmp2+1      ; MSB
001732r 3  91 rr                        sta (tmp1),y
001734r 3  C8                           iny
001735r 3  A9 48                        lda #$48        ; Opcode for PHA
001737r 3  91 rr                        sta (tmp1),y
001739r 3  C8                           iny
00173Ar 3               
00173Ar 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
00173Cr 3  91 rr                        sta (tmp1),y
00173Er 3  C8                           iny
00173Fr 3  A5 rr                        lda tmp2        ; LSB
001741r 3  91 rr                        sta (tmp1),y
001743r 3  C8                           iny
001744r 3  A9 48                        lda #$48        ; Opcode for PHA
001746r 3  91 rr                        sta (tmp1),y
001748r 3               z_loop:
001748r 3  60           z_plus_loop:    rts
001749r 3               
001749r 3               
001749r 3               plus_loop_runtime:
001749r 3                       ; """Runtime compile for loop control. This is used for both +LOOP and
001749r 3                       ; LOOP which are defined at high level. Note we use a fudge factor for
001749r 3                       ; loop control so we can test with the Overflow Flag. See
001749r 3                       ; the Control Flow section of the manual for details.
001749r 3                       ; The step value is TOS in the loop. This
001749r 3                       ; must always be native compiled. In some Forths, this is a separate
001749r 3                       ; word called (+LOOP) or (LOOP)
001749r 3                       ; """
001749r 3               
001749r 3  18                           clc
00174Ar 3  68                           pla             ; LSB of index
00174Br 3  75 00                        adc 0,x         ; LSB of step
00174Dr 3  A8                           tay             ; temporary storage of LSB
00174Er 3               
00174Er 3  B8                           clv
00174Fr 3  68                           pla             ; MSB of index
001750r 3  75 01                        adc 1,x         ; MSB of step
001752r 3  48                           pha             ; put MSB of index back on stack
001753r 3               
001753r 3  98                           tya             ; put LSB of index back on stack
001754r 3  48                           pha
001755r 3               
001755r 3  E8                           inx             ; dump step from TOS
001756r 3  E8                           inx
001757r 3               
001757r 3                               ; If V flag is set, we're done looping and continue
001757r 3                               ; after the +LOOP instruction
001757r 3  70 03                        bvs @hack+3     ; skip over JMP instruction
001759r 3               
001759r 3               @hack:          ; This is why this routine must be natively compiled: We
001759r 3                               ; compile the opcode for JMP here without an address to
001759r 3                               ; go to, which is added by the next next instruction of
001759r 3                               ; LOOP/+LOOP during compile time
001759r 3  4C                           .byte $4C
00175Ar 3               
00175Ar 3               plus_loop_runtime_end:
00175Ar 3               
00175Ar 3               
00175Ar 3               ; ## LSHIFT ( x u -- u ) "Shift TOS left"
00175Ar 3               ; ## "lshift"  auto  ANS core
00175Ar 3                       ; """https://forth-standard.org/standard/core/LSHIFT"""
00175Ar 3               
00175Ar 3               xt_lshift:
00175Ar 3  20 rr rr                     jsr underflow_2
00175Dr 3               
00175Dr 3                               ; max shift 16 times
00175Dr 3  B5 00                        lda 0,x
00175Fr 3  29 0F                        and #%00001111
001761r 3  F0 08                        beq @done
001763r 3               
001763r 3  A8                           tay
001764r 3               
001764r 3               @loop:
001764r 3  16 02                        asl 2,x
001766r 3  36 03                        rol 3,x
001768r 3  88                           dey
001769r 3  D0 F9                        bne @loop
00176Br 3               
00176Br 3               @done:
00176Br 3  E8                           inx
00176Cr 3  E8                           inx
00176Dr 3               
00176Dr 3  60           z_lshift:       rts
00176Er 3               
00176Er 3               
00176Er 3               
00176Er 3               ; ## M_STAR ( n n -- d ) "16 * 16 --> 32"
00176Er 3               ; ## "m*"  auto  ANS core
00176Er 3                       ; """https://forth-standard.org/standard/core/MTimes
00176Er 3                       ; Multiply two 16 bit numbers, producing a 32 bit result. All
00176Er 3                       ; values are signed. Adapted from FIG Forth for Tali Forth.
00176Er 3                       ;
00176Er 3                       ; The original Forth is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;
00176Er 3                       ; with  : D+- O< IF DNEGATE THEN ;
00176Er 3                       ; """
00176Er 3               
00176Er 3               xt_m_star:
00176Er 3  20 rr rr                     jsr underflow_2
001771r 3               
001771r 3                               ; figure out the sign
001771r 3  B5 01                        lda 1,x         ; MSB of n1
001773r 3  55 03                        eor 3,x         ; MSB of n2
001775r 3               
001775r 3                               ; UM* uses all kinds of temporary variables so we don't
001775r 3                               ; risk a conflict but just take the cycle hit and push
001775r 3                               ; this to the stack
001775r 3  48                           pha
001776r 3               
001776r 3                               ; get the absolute value of both numbers so we can feed
001776r 3                               ; them to UM*, which does the real work
001776r 3  20 rr rr                     jsr xt_abs
001779r 3  20 rr rr                     jsr xt_swap
00177Cr 3  20 rr rr                     jsr xt_abs
00177Fr 3               
00177Fr 3  20 rr rr                     jsr xt_um_star          ; ( d )
001782r 3               
001782r 3                               ; handle the sign
001782r 3  68                           pla
001783r 3  10 03                        bpl @done
001785r 3               
001785r 3  20 rr rr                     jsr xt_dnegate
001788r 3               @done:
001788r 3  60           z_m_star:       rts
001789r 3               
001789r 3               
001789r 3               
001789r 3               ; ## MARKER ( "name" -- ) "Create a deletion boundry"
001789r 3               ; ## "marker"  auto  ANS core ext
001789r 3                       ; """https://forth-standard.org/standard/core/MARKER
001789r 3                       ; This word replaces FORGET in earlier Forths. Old entries are not
001789r 3                       ; actually deleted, but merely overwritten by restoring CP and DP.
001789r 3                       ; Run the named word at a later time to restore all of the wordlists
001789r 3                       ; to their state when the word was created with marker.  Any words
001789r 3                       ; created after the marker (including the marker) will be forgotten.
001789r 3                       ;
001789r 3                       ; To do this, we want to end up with something that jumps to a
001789r 3                       ; run-time component with a link to the original CP and DP values:
001789r 3                       ;
001789r 3                       ;       jsr marker_runtime
001789r 3                       ;       <Original CP MSB>
001789r 3                       ;       <Original CP LSB>
001789r 3                       ;       <Original DP MSB> ( for CURRENT wordlist )
001789r 3                       ;       <Original DP LSB>
001789r 3                       ;       < USER variables from offset 4 to 39 >
001789r 3                       ;
001789r 3                       ;       The user variables include:
001789r 3                       ;       CURRENT (byte variable)
001789r 3                       ;       <All wordlists> (currently 12) (cell array)
001789r 3                       ;       <#ORDER> (byte variable)
001789r 3                       ;       <All search order> (currently 9) (byte array)
001789r 3                       ;
001789r 3                       ; This code uses tmp1 and tmp2
001789r 3                       ; """
001789r 3               
001789r 3               xt_marker:
001789r 3                               ; Before we do anything, we need to save CP, which
001789r 3                               ; after all is the whole point of this operation. CREATE
001789r 3                               ; uses tmp1 and tmp2, so we take the speed hit and push stuff
001789r 3                               ; to the stack
001789r 3  20 rr rr                     jsr current_to_dp
00178Cr 3               
00178Cr 3  A5 rr                        lda dp
00178Er 3  48                           pha
00178Fr 3  A5 rr                        lda dp+1
001791r 3  48                           pha
001792r 3               
001792r 3  A5 rr                        lda cp
001794r 3  48                           pha
001795r 3  A5 rr                        lda cp+1
001797r 3  48                           pha
001798r 3               
001798r 3  20 rr rr                     jsr xt_create
00179Br 3               
00179Br 3                               ; By default, CREATE installs a subroutine jump to DOVAR, which
00179Br 3                               ; we have to replace by a jump to marker_runtime. We back up
00179Br 3                               ; two bytes and then overwrite the address
00179Br 3  A5 rr                        lda cp          ; LSB
00179Dr 3  38                           sec
00179Er 3  E9 02                        sbc #2
0017A0r 3  85 rr                        sta cp
0017A2r 3               
0017A2r 3  A5 rr                        lda cp+1        ; MSB
0017A4r 3  E9 00                        sbc #0          ; we only care about the borrow
0017A6r 3  85 rr                        sta cp+1
0017A8r 3               
0017A8r 3                               ; Add the address of the runtime component
0017A8r 3  A0 rr                        ldy #>marker_runtime
0017AAr 3  A9 rr                        lda #<marker_runtime
0017ACr 3  20 rr rr                     jsr cmpl_word
0017AFr 3               
0017AFr 3                               ; Add original CP as payload
0017AFr 3  7A                           ply                     ; MSB
0017B0r 3  68                           pla                     ; LSB
0017B1r 3  20 rr rr                     jsr cmpl_word
0017B4r 3               
0017B4r 3                               ; Add original DP as payload
0017B4r 3  7A                           ply                     ; MSB
0017B5r 3  68                           pla                     ; LSB
0017B6r 3  20 rr rr                     jsr cmpl_word
0017B9r 3               
0017B9r 3                               ; Add the user variables for the wordlists and search order.
0017B9r 3                               ; We're compiling them in byte order.
0017B9r 3  A0 04                        ldy #4                  ; Start at CURRENT
0017BBr 3               @marker_loop:
0017BBr 3  B1 rr                        lda (up),y
0017BDr 3  20 rr rr                     jsr cmpl_a
0017C0r 3  C8                           iny
0017C1r 3  98                           tya
0017C2r 3  C9 28                        cmp #40                 ; One past the end of the search order.
0017C4r 3  D0 F5                        bne @marker_loop
0017C6r 3               
0017C6r 3  60           z_marker:       rts
0017C7r 3               
0017C7r 3               
0017C7r 3               
0017C7r 3               marker_runtime:
0017C7r 3                       ; """Restore Dictionary and memory (DP and CP) to where the were
0017C7r 3                       ; when this marker was defined. We arrive here with the return
0017C7r 3                       ; address on the Return Stack in the usual 65c02 format
0017C7r 3                       ; """
0017C7r 3               
0017C7r 3                               ; Get the address of the string address off the stack and
0017C7r 3                               ; increase by one because of the RTS mechanics
0017C7r 3  68                           pla
0017C8r 3  85 rr                        sta tmp1        ; LSB of address
0017CAr 3  68                           pla
0017CBr 3  85 rr                        sta tmp1+1      ; MSB of address
0017CDr 3               
0017CDr 3  E6 rr                        inc tmp1
0017CFr 3  D0 02                        bne @1
0017D1r 3  E6 rr                        inc tmp1+1
0017D3r 3               @1:
0017D3r 3  A0 00                        ldy #0
0017D5r 3               
0017D5r 3                               ; CP was stored first
0017D5r 3  B1 rr                        lda (tmp1),y
0017D7r 3  85 rr                        sta cp
0017D9r 3  C8                           iny
0017DAr 3  B1 rr                        lda (tmp1),y
0017DCr 3  85 rr                        sta cp+1
0017DEr 3               
0017DEr 3                               ; Next was DP
0017DEr 3  C8                           iny
0017DFr 3  B1 rr                        lda (tmp1),y
0017E1r 3  85 rr                        sta dp
0017E3r 3  C8                           iny
0017E4r 3  B1 rr                        lda (tmp1),y
0017E6r 3  85 rr                        sta dp+1
0017E8r 3               
0017E8r 3                               ; Conveniently, the offset into both tmp1 and UP is 4
0017E8r 3                               ; to start restoring the wordlists and search order.
0017E8r 3  A0 04                        ldy #4
0017EAr 3               
0017EAr 3               @marker_restore_loop:
0017EAr 3                               ; Copy from the dictionary back on top of the wordlists
0017EAr 3                               ; and search order.
0017EAr 3  B1 rr                        lda (tmp1), y
0017ECr 3  91 rr                        sta (up), y
0017EEr 3  C8                           iny
0017EFr 3  98                           tya
0017F0r 3  C9 28                        cmp #40                 ; One past the end of the search order.
0017F2r 3  D0 F6                        bne @marker_restore_loop
0017F4r 3               
0017F4r 3  20 rr rr                     jsr dp_to_current       ; Move the CURRENT DP back.
0017F7r 3               
0017F7r 3                               ; The return instruction takes us back to the original caller
0017F7r 3  60                           rts
0017F8r 3               
0017F8r 3               
0017F8r 3               
0017F8r 3               ; ## MAX ( n n -- n ) "Keep larger of two numbers"
0017F8r 3               ; ## "max"  auto  ANS core
0017F8r 3                       ; """https://forth-standard.org/standard/core/MAX
0017F8r 3                       ; Compare TOS and NOS and keep which one is larger. Adapted from
0017F8r 3                       ; Lance A. Leventhal "6502 Assembly Language Subroutines". Negative
0017F8r 3                       ; Flag indicates which number is larger. See also
0017F8r 3                       ; http://6502.org/tutorials/compare_instructions.html and
0017F8r 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
0017F8r 3                       ; """
0017F8r 3               
0017F8r 3               xt_max:
0017F8r 3  20 rr rr                     jsr underflow_2
0017FBr 3               
0017FBr 3                               ; Compare LSB. We do this first to set the carry flag
0017FBr 3  B5 00                        lda 0,x         ; LSB of TOS
0017FDr 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets the carry
0017FFr 3               
0017FFr 3  B5 01                        lda 1,x         ; MSB of TOS
001801r 3  F5 03                        sbc 3,x         ; MSB of NOS
001803r 3  50 02                        bvc @no_overflow
001805r 3               
001805r 3                               ; handle overflow, because we use signed numbers
001805r 3  49 80                        eor #$80        ; complement negative flag
001807r 3               
001807r 3               @no_overflow:
001807r 3                               ; if negative, NOS is larger and needs to be kept
001807r 3  30 08                        bmi @keep_nos
001809r 3               
001809r 3                               ; move TOS to NOS
001809r 3  B5 00                        lda 0,x
00180Br 3  95 02                        sta 2,x
00180Dr 3  B5 01                        lda 1,x
00180Fr 3  95 03                        sta 3,x
001811r 3               
001811r 3               @keep_nos:
001811r 3  E8                           inx
001812r 3  E8                           inx
001813r 3               
001813r 3  60           z_max:          rts
001814r 3               
001814r 3               
001814r 3               
001814r 3               ; ## MIN ( n n -- n ) "Keep smaller of two numbers"
001814r 3               ; ## "min"  auto  ANS core
001814r 3                       ; """https://forth-standard.org/standard/core/MIN
001814r 3                       ; Adapted from Lance A. Leventhal "6502 Assembly Language
001814r 3                       ; Subroutines." Negative Flag indicateds which number is larger. See
001814r 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001814r 3                       ; """
001814r 3               
001814r 3               xt_min:
001814r 3  20 rr rr                     jsr underflow_2
001817r 3               
001817r 3                               ; compare LSB. We do this first to set the carry flag
001817r 3  B5 00                        lda 0,x         ; LSB of TOS
001819r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets carry
00181Br 3               
00181Br 3  B5 01                        lda 1,x         ; MSB of TOS
00181Dr 3  F5 03                        sbc 3,x         ; MSB of NOS
00181Fr 3  50 02                        bvc @no_overflow
001821r 3               
001821r 3                               ; handle overflow because we use signed numbers
001821r 3  49 80                        eor #$80
001823r 3               
001823r 3               @no_overflow:
001823r 3                               ; if negative, NOS is larger and needs to be dumped
001823r 3  10 08                        bpl @keep_nos
001825r 3               
001825r 3                               ; move TOS to NOS
001825r 3  B5 00                        lda 0,x
001827r 3  95 02                        sta 2,x
001829r 3  B5 01                        lda 1,x
00182Br 3  95 03                        sta 3,x
00182Dr 3               
00182Dr 3               @keep_nos:
00182Dr 3  E8                           inx
00182Er 3  E8                           inx
00182Fr 3               
00182Fr 3  60           z_min:          rts
001830r 3               
001830r 3               
001830r 3               
001830r 3               ; ## MINUS ( n n -- n ) "Subtract TOS from NOS"
001830r 3               ; ## "-"  auto  ANS core
001830r 3                       ; """https://forth-standard.org/standard/core/Minus"""
001830r 3               xt_minus:
001830r 3  20 rr rr                     jsr underflow_2
001833r 3               
001833r 3  38                           sec
001834r 3  B5 02                        lda 2,x         ; LSB
001836r 3  F5 00                        sbc 0,x
001838r 3  95 02                        sta 2,x
00183Ar 3               
00183Ar 3  B5 03                        lda 3,x         ; MSB
00183Cr 3  F5 01                        sbc 1,x
00183Er 3  95 03                        sta 3,x
001840r 3               
001840r 3  E8                           inx
001841r 3  E8                           inx
001842r 3               
001842r 3  60           z_minus:        rts
001843r 3               
001843r 3               
001843r 3               ; ## MINUS_LEADING ( addr1 u1 -- addr2 u2 ) "Remove leading spaces"
001843r 3               ; ## "-leading"  auto  Tali String
001843r 3                       ; """Remove leading whitespace. This is the reverse of -TRAILING
001843r 3                       ; """
001843r 3               
001843r 3               xt_minus_leading:
001843r 3  20 rr rr                     jsr underflow_2
001846r 3               
001846r 3               @loop:
001846r 3                               ; Quit if we were given an empty string. This also terminates
001846r 3                               ; the main loop
001846r 3  B5 00                        lda 0,x
001848r 3  15 01                        ora 1,x
00184Ar 3  F0 0F                        beq @done
00184Cr 3               
00184Cr 3  A1 02                        lda (2,x)               ; get first character
00184Er 3  20 rr rr                     jsr is_whitespace
001851r 3  90 08                        bcc @done
001853r 3               
001853r 3                               ; It's whitespace, move one down
001853r 3  20 rr rr                     jsr xt_one              ; ( addr u 1 )
001856r 3  20 rr rr                     jsr xt_slash_string     ; ( addr+ u-1 )
001859r 3               
001859r 3  80 EB                        bra @loop
00185Br 3               @done:
00185Br 3               z_minus_leading:
00185Br 3  60                           rts
00185Cr 3               
00185Cr 3               
00185Cr 3               
00185Cr 3               ; ## MINUS_TRAILING ( addr u1 -- addr u2 ) "Remove trailing spaces"
00185Cr 3               ; ## "-trailing"  auto  ANS string
00185Cr 3                       ; """https://forth-standard.org/standard/string/MinusTRAILING
00185Cr 3                       ; Remove trailing spaces
00185Cr 3                       ; """
00185Cr 3               
00185Cr 3               xt_minus_trailing:
00185Cr 3  20 rr rr                     jsr underflow_2
00185Fr 3               
00185Fr 3                               ; if length entry is zero, return a zero and leave the
00185Fr 3                               ; address part untouched
00185Fr 3  B5 00                        lda 0,x         ; LSB of n
001861r 3  15 01                        ora 1,x         ; MSB of n
001863r 3  F0 33                        beq @done
001865r 3               
001865r 3                               ; Compute address of last char in tmp1 as
001865r 3                               ; addr + u1 - 1
001865r 3               
001865r 3                               ; addr + u1
001865r 3  18                           clc
001866r 3  B5 02                        lda 2,x         ; LSB of addr
001868r 3  75 00                        adc 0,x
00186Ar 3  85 rr                        sta tmp1
00186Cr 3  B5 03                        lda 3,x         ; MSB of addr
00186Er 3  75 01                        adc 1,x
001870r 3  85 rr                        sta tmp1+1
001872r 3               
001872r 3                               ; - 1
001872r 3  A5 rr                        lda tmp1
001874r 3  D0 02                        bne @1
001876r 3  C6 rr                        dec tmp1+1
001878r 3               @1:
001878r 3  C6 rr                        dec tmp1
00187Ar 3               
00187Ar 3               @loop:
00187Ar 3                               ; While spaces are found, move tmp1 backwards and
00187Ar 3                               ; decrease the count on the data stack.
00187Ar 3  B2 rr                        lda (tmp1)
00187Cr 3  C9 20                        cmp #AscSP
00187Er 3  D0 18                        bne @done
001880r 3               
001880r 3                               ; Move back one address.
001880r 3  A5 rr                        lda tmp1
001882r 3  D0 02                        bne @2
001884r 3  C6 rr                        dec tmp1+1
001886r 3               @2:
001886r 3  C6 rr                        dec tmp1
001888r 3               
001888r 3                               ; Decrement count by one.
001888r 3  B5 00                        lda 0,x
00188Ar 3  D0 02                        bne @3
00188Cr 3  D6 01                        dec 1,x
00188Er 3               @3:
00188Er 3  D6 00                        dec 0,x
001890r 3               
001890r 3                               ; Check if there are any characters left.
001890r 3  B5 00                        lda 0,x
001892r 3  15 01                        ora 1,x
001894r 3  F0 02                        beq @done       ; Count has reached zero - we're done!
001896r 3               
001896r 3  80 E2                        bra @loop
001898r 3               
001898r 3               @done:
001898r 3               z_minus_trailing:
001898r 3  60                           rts
001899r 3               
001899r 3               
001899r 3               
001899r 3               ; ## MOD ( n1 n2 -- n ) "Divide NOS by TOS and return the remainder"
001899r 3               ; ## "mod"  auto  ANS core
001899r 3                       ; """https://forth-standard.org/standard/core/MOD
001899r 3                       ;
001899r 3                       ; The Forth definition of this word is  : MOD /MOD DROP ;
001899r 3                       ; so we just jump to xt_slash_mod and dump the actual result.
001899r 3                       ; """
001899r 3               xt_mod:
001899r 3  20 rr rr                     jsr underflow_2
00189Cr 3               
00189Cr 3  20 rr rr                     jsr xt_slash_mod
00189Fr 3               
00189Fr 3  E8                           inx             ; DROP
0018A0r 3  E8                           inx
0018A1r 3               z_mod:
0018A1r 3  60                           rts
0018A2r 3               
0018A2r 3               
0018A2r 3               ; ## MOVE ( addr1 addr2 u -- ) "Copy bytes"
0018A2r 3               ; ## "move"  auto  ANS core
0018A2r 3                       ; """https://forth-standard.org/standard/core/MOVE
0018A2r 3                       ; Copy u "address units" from addr1 to addr2. Since our address
0018A2r 3                       ; units are bytes, this is just a front-end for CMOVE and CMOVE>. This
0018A2r 3                       ; is actually the only one of these three words that is in the CORE
0018A2r 3                       ; set.
0018A2r 3                       ;
0018A2r 3                       ; This word must not be natively compiled.
0018A2r 3                       ; """
0018A2r 3               
0018A2r 3               xt_move:
0018A2r 3                               ; We let CMOVE and CMOVE> check if there is underflow or
0018A2r 3                               ; we've been told to copy zero bytes
0018A2r 3               
0018A2r 3                               ; compare MSB first
0018A2r 3  B5 03                        lda 3,x                 ; MSB of addr2
0018A4r 3  D5 05                        cmp 5,x                 ; MSB of addr1
0018A6r 3  F0 05                        beq @lsb                ; wasn't helpful, move to LSB
0018A8r 3  B0 0E                        bcs @to_move_up         ; we want CMOVE>
0018AAr 3               
0018AAr 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
0018ADr 3               
0018ADr 3               @lsb:
0018ADr 3                               ; MSB were equal, so do the whole thing over with LSB
0018ADr 3  B5 02                        lda 2,x                 ; LSB of addr2
0018AFr 3  D5 04                        cmp 4,x                 ; LSB of addr1
0018B1r 3  F0 08                        beq @equal              ; LSB is equal as well
0018B3r 3  B0 03                        bcs @to_move_up         ; we want CMOVE>
0018B5r 3               
0018B5r 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
0018B8r 3               
0018B8r 3               @to_move_up:
0018B8r 3  4C rr rr                     jmp xt_cmove_up         ; JSR/RTS
0018BBr 3               @equal:
0018BBr 3                               ; drop three entries from Data Stack
0018BBr 3  8A                           txa
0018BCr 3  18                           clc
0018BDr 3  69 06                        adc #6
0018BFr 3  AA                           tax
0018C0r 3               
0018C0r 3  60           z_move:         rts
0018C1r 3               
0018C1r 3               
0018C1r 3               
0018C1r 3               ; ## NAME_TO_INT ( nt -- xt ) "Convert Name Token to Execute Token"
0018C1r 3               ; ## "name>int"  tested  Gforth
0018C1r 3                       ; """See
0018C1r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0018C1r 3                       ; """
0018C1r 3               
0018C1r 3               xt_name_to_int:
0018C1r 3  20 rr rr                     jsr underflow_1
0018C4r 3               
0018C4r 3                               ; The xt starts four bytes down from the nt
0018C4r 3  B5 00                        lda 0,x
0018C6r 3  18                           clc
0018C7r 3  69 04                        adc #4
0018C9r 3  85 rr                        sta tmp3
0018CBr 3               
0018CBr 3  B5 01                        lda 1,x
0018CDr 3  90 01                        bcc @done
0018CFr 3  1A                           inc
0018D0r 3               @done:
0018D0r 3  85 rr                        sta tmp3+1
0018D2r 3               
0018D2r 3  A0 00                        ldy #0
0018D4r 3  B1 rr                        lda (tmp3),y
0018D6r 3  95 00                        sta 0,x
0018D8r 3  C8                           iny
0018D9r 3  B1 rr                        lda (tmp3),y
0018DBr 3  95 01                        sta 1,x
0018DDr 3               
0018DDr 3  60           z_name_to_int:  rts
0018DEr 3               
0018DEr 3               
0018DEr 3               
0018DEr 3               ; ## NAME_TO_STRING ( nt -- addr u ) "Given a name token, return string of word"
0018DEr 3               ; ## "name>string"  tested  Gforth
0018DEr 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html"""
0018DEr 3               
0018DEr 3               xt_name_to_string:
0018DEr 3  20 rr rr                     jsr underflow_1
0018E1r 3               
0018E1r 3  CA                           dex
0018E2r 3  CA                           dex
0018E3r 3               
0018E3r 3                               ; the length of the string is the first byte of the
0018E3r 3                               ; header pointed to by nt
0018E3r 3  A1 02                        lda (2,x)
0018E5r 3  95 00                        sta 0,x
0018E7r 3  74 01                        stz 1,x
0018E9r 3               
0018E9r 3                               ; the string itself always starts eight bytes down
0018E9r 3  B5 02                        lda 2,x         ; LSB
0018EBr 3  18                           clc
0018ECr 3  69 08                        adc #8
0018EEr 3  A8                           tay
0018EFr 3  B5 03                        lda 3,x         ; MSB
0018F1r 3  69 00                        adc #0          ; just need carry
0018F3r 3  95 03                        sta 3,x
0018F5r 3  94 02                        sty 2,x
0018F7r 3               
0018F7r 3               z_name_to_string:
0018F7r 3  60                           rts
0018F8r 3               
0018F8r 3               
0018F8r 3               ; ## NC_LIMIT ( -- addr ) "Return address where NC-LIMIT value is kept"
0018F8r 3               ; ## "nc-limit"  tested  Tali Forth
0018F8r 3               
0018F8r 3               xt_nc_limit:
0018F8r 3  CA                           dex
0018F9r 3  CA                           dex
0018FAr 3  A9 rr                        lda #<nc_limit
0018FCr 3  95 00                        sta 0,x
0018FEr 3  A9 rr                        lda #>nc_limit
001900r 3  95 01                        sta 1,x
001902r 3               
001902r 3  60           z_nc_limit:     rts
001903r 3               
001903r 3               
001903r 3               
001903r 3               ; ## NEGATE ( n -- n ) "Two's complement"
001903r 3               ; ## "negate"  auto  ANS core
001903r 3                       ; """https://forth-standard.org/standard/core/NEGATE"""
001903r 3               xt_negate:
001903r 3  20 rr rr                     jsr underflow_1
001906r 3               
001906r 3  A9 00                	lda #0
001908r 3  38                           sec
001909r 3  F5 00                        sbc 0,x         ; LSB
00190Br 3  95 00                        sta 0,x
00190Dr 3               
00190Dr 3  A9 00                        lda #0
00190Fr 3  F5 01                        sbc 1,x         ; MSB
001911r 3  95 01                        sta 1,x
001913r 3               
001913r 3  60           z_negate:       rts
001914r 3               
001914r 3               
001914r 3               ; ## NEVER_NATIVE ( -- ) "Flag last word as never natively compiled"
001914r 3               ; ## "never-native"  auto  Tali Forth
001914r 3               xt_never_native:
001914r 3  20 rr rr                     jsr current_to_dp
001917r 3  A0 01                        ldy #1          ; offset for status byte
001919r 3  B1 rr                        lda (dp),y
00191Br 3  09 08                        ora #NN         ; Make sure NN flag is set
00191Dr 3  29 FD                        and #$ff-AN     ; and AN flag is clear.
00191Fr 3  91 rr                        sta (dp),y
001921r 3               z_never_native:
001921r 3  60                           rts
001922r 3               
001922r 3               
001922r 3               ; ## NIP ( b a -- a ) "Delete NOS"
001922r 3               ; ## "nip"  auto  ANS core ext
001922r 3                       ; """https://forth-standard.org/standard/core/NIP"""
001922r 3               xt_nip:
001922r 3  20 rr rr                     jsr underflow_2
001925r 3               
001925r 3  B5 00                        lda 0,x         ; LSB
001927r 3  95 02                        sta 2,x
001929r 3  B5 01                        lda 1,x         ; MSB
00192Br 3  95 03                        sta 3,x
00192Dr 3               
00192Dr 3  E8                           inx
00192Er 3  E8                           inx
00192Fr 3               
00192Fr 3  60           z_nip:          rts
001930r 3               
001930r 3               
001930r 3               ; ## NOT_EQUALS ( n m -- f ) "Return a true flag if TOS != NOS"
001930r 3               ; ## "<>"  auto  ANS core ext
001930r 3                       ; """https://forth-standard.org/standard/core/ne
001930r 3                       ;
001930r 3                       ; This is just a variant of EQUAL, we code it separately
001930r 3                       ; for speed.
001930r 3                       ; """
001930r 3               
001930r 3               xt_not_equals:
001930r 3  20 rr rr                     jsr underflow_2
001933r 3               
001933r 3  A0 00                        ldy #0                  ; default is true
001935r 3               
001935r 3  B5 00                        lda 0,x                 ; LSB
001937r 3  D5 02                        cmp 2,x
001939r 3  D0 0A                        bne @not_equal
00193Br 3               
00193Br 3                               ; LSB is equal
00193Br 3  B5 01                        lda 1,x                 ; MSB
00193Dr 3  D5 03                        cmp 3,x
00193Fr 3  D0 04                        bne @not_equal
001941r 3               
001941r 3  A9 FF                        lda #$FF
001943r 3  80 01                        bra @done
001945r 3               
001945r 3               @not_equal:
001945r 3  88                           dey                     ; drop thru to done
001946r 3               
001946r 3               @done:
001946r 3  98                           tya
001947r 3  E8                           inx
001948r 3  E8                           inx
001949r 3  95 00                        sta 0,x
00194Br 3  95 01                        sta 1,x
00194Dr 3               
00194Dr 3  60           z_not_equals:   rts
00194Er 3               
00194Er 3               
00194Er 3               
00194Er 3               ; ## NOT_ROTE ( a b c -- c a b ) "Rotate upwards"
00194Er 3               ; ## "-rot"  auto  Gforth
00194Er 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Data-stack.html"""
00194Er 3               
00194Er 3               xt_not_rote:
00194Er 3  20 rr rr                     jsr underflow_3
001951r 3               
001951r 3  B4 01                        ldy 1,x         ; MSB first
001953r 3  B5 03                        lda 3,x
001955r 3  95 01                        sta 1,x
001957r 3               
001957r 3  B5 05                        lda 5,x
001959r 3  95 03                        sta 3,x
00195Br 3  94 05                        sty 5,x
00195Dr 3               
00195Dr 3  B4 00                        ldy 0,x         ; LSB second
00195Fr 3  B5 02                        lda 2,x
001961r 3  95 00                        sta 0,x
001963r 3               
001963r 3  B5 04                        lda 4,x
001965r 3  95 02                        sta 2,x
001967r 3  94 04                        sty 4,x
001969r 3               
001969r 3  60           z_not_rote:     rts
00196Ar 3               
00196Ar 3               
00196Ar 3               
00196Ar 3               ; ## NUMBER ( addr u -- u | d ) "Convert a number string"
00196Ar 3               ; ## "number"  auto  Tali Forth
00196Ar 3                       ; """Convert a number string to a double or single cell number. This
00196Ar 3                       ; is a wrapper for >NUMBER and follows the convention set out in the
00196Ar 3                       ; "Forth Programmer's Handbook" (Conklin & Rather) 3rd edition p. 87.
00196Ar 3                       ; Based in part on the "Starting Forth" code
00196Ar 3                       ; https://www.forth.com/starting-forth/10-input-output-operators/
00196Ar 3                       ; Gforth uses S>NUMBER? and S>UNUMBER? which return numbers and a flag
00196Ar 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
00196Ar 3                       ; Another difference to Gforth is that we follow ANS Forth that the
00196Ar 3                       ; dot to signal a double cell number is required to be the last
00196Ar 3                       ; character of the string.
00196Ar 3                       ;
00196Ar 3                       ; Number calls >NUMBER which in turn calls UM*,
00196Ar 3                       ; which uses tmp1, tmp2, and tmp3, so we can't use them here, which is
00196Ar 3                       ; a pain.
00196Ar 3                       ;"""
00196Ar 3               
00196Ar 3               xt_number:
00196Ar 3  20 rr rr                     jsr underflow_2
00196Dr 3               
00196Dr 3                               ; we keep the flags for sign and double in tmpdsp because
00196Dr 3                               ; we've run out of temporary variables
00196Dr 3  64 rr                        stz tmpdsp      ; flag for double
00196Fr 3  64 rr                        stz tmpdsp+1    ; flag for minus
001971r 3               
001971r 3                               ; If the first character is a minus, strip it off and set
001971r 3                               ; the flag
001971r 3  A1 02                        lda (2,x)
001973r 3  C9 2D                        cmp #$2D        ; ASCII for "-"
001975r 3  D0 0A                        bne @check_dot
001977r 3               
001977r 3                               ; It's a minus
001977r 3  C6 rr                        dec tmpdsp+1
001979r 3  F6 02                        inc 2,x         ; start one character later
00197Br 3  D0 02                        bne @1
00197Dr 3  F6 03                        inc 3,x
00197Fr 3               @1:
00197Fr 3  D6 00                        dec 0,x         ; decrease string length by one
001981r 3               
001981r 3               @check_dot:
001981r 3                               ; If the last character is a dot, strip it off and set a
001981r 3                               ; flag. We can use tmptos as a temporary variable
001981r 3  B5 02                        lda 2,x         ; LSB of address
001983r 3  18                           clc
001984r 3  75 00                        adc 0,x         ; length of string
001986r 3  85 rr                        sta tmptos
001988r 3  B5 03                        lda 3,x
00198Ar 3  69 00                        adc #0          ; only need carry
00198Cr 3  85 rr                        sta tmptos+1
00198Er 3               
00198Er 3                               ; tmptos now points to the first character after the string,
00198Er 3                               ; but we need the last character
00198Er 3  A5 rr                        lda tmptos
001990r 3  D0 02                        bne @2
001992r 3  C6 rr                        dec tmptos+1
001994r 3               @2:
001994r 3  C6 rr                        dec tmptos
001996r 3               
001996r 3  B2 rr                        lda (tmptos)
001998r 3  C9 2E                        cmp #'.'
00199Ar 3  D0 04                        bne @main
00199Cr 3               
00199Cr 3                               ; We have a dot, which means this is a double number. Flag
00199Cr 3                               ; the fact and reduce string length by one
00199Cr 3  C6 rr                        dec tmpdsp
00199Er 3  D6 00                        dec 0,x
0019A0r 3               
0019A0r 3               @main:
0019A0r 3                               ; Set up stack for subroutine jump to >NUMBER, which means
0019A0r 3                               ; we have to go ( addr u --> ud addr u )
0019A0r 3  CA                           dex
0019A1r 3  CA                           dex
0019A2r 3  CA                           dex
0019A3r 3  CA                           dex
0019A4r 3               
0019A4r 3  B5 04                        lda 4,x         ; LSB of length
0019A6r 3  95 00                        sta 0,x
0019A8r 3  74 01                        stz 1,x         ; MSB, max length 255 chars
0019AAr 3               
0019AAr 3  B5 06                        lda 6,x         ; LSB of address
0019ACr 3  95 02                        sta 2,x
0019AEr 3  B5 07                        lda 7,x         ; MSB of address
0019B0r 3  95 03                        sta 3,x
0019B2r 3               
0019B2r 3  74 04                        stz 4,x         ; clear space for ud
0019B4r 3  74 05                        stz 5,x
0019B6r 3  74 06                        stz 6,x
0019B8r 3  74 07                        stz 7,x
0019BAr 3               
0019BAr 3  20 rr rr                     jsr xt_to_number        ; (ud addr u -- ud addr u )
0019BDr 3               
0019BDr 3                               ; test length of returned string, which should be zero
0019BDr 3  B5 00                        lda 0,x
0019BFr 3  F0 15                        beq @all_converted
0019C1r 3               
0019C1r 3                               ; Something went wrong, we still have characters left over,
0019C1r 3                               ; so we print an error and abort. If the NUMBER was called
0019C1r 3                               ; by INTERPRET, we've already checked for Forth words, so
0019C1r 3                               ; we're in deep trouble one way or another
0019C1r 3  A9 3E                        lda #$3E        ; ASCII for ">"
0019C3r 3  20 rr rr                     jsr emit_a
0019C6r 3  20 rr rr                     jsr xt_type
0019C9r 3  A9 3C                        lda #$3C        ; ASCII for "<"
0019CBr 3  20 rr rr                     jsr emit_a
0019CEr 3  20 rr rr                     jsr xt_space
0019D1r 3               
0019D1r 3  A9 08                        lda #err_syntax
0019D3r 3  4C rr rr                     jmp error
0019D6r 3               
0019D6r 3               @all_converted:
0019D6r 3                               ; We can drop the string info
0019D6r 3  E8                           inx
0019D7r 3  E8                           inx
0019D8r 3  E8                           inx
0019D9r 3  E8                           inx
0019DAr 3               
0019DAr 3                               ; We have a double-cell number on the Data Stack that might
0019DAr 3                               ; actually have a minus and might actually be single-cell
0019DAr 3  A5 rr                        lda tmpdsp      ; flag for double
0019DCr 3  F0 0D                        beq @single
0019DEr 3               
0019DEr 3                               ; Set status bit 5 to indicate this is a double number
0019DEr 3  A9 20                        lda #%00100000
0019E0r 3  04 rr                        tsb status
0019E2r 3               
0019E2r 3                               ; This is a double cell number. If it had a minus, we'll have
0019E2r 3                               ; to negate it
0019E2r 3  A5 rr                        lda tmpdsp+1
0019E4r 3  F0 12                        beq @done       ; no minus, all done
0019E6r 3               
0019E6r 3  20 rr rr                     jsr xt_dnegate
0019E9r 3               
0019E9r 3  80 0D                        bra @done
0019EBr 3               
0019EBr 3               @single:
0019EBr 3                               ; This is a single number, so we just drop the top cell
0019EBr 3  E8                           inx
0019ECr 3  E8                           inx
0019EDr 3               
0019EDr 3                               ; Clear status bit 5 to indicate this is a single number
0019EDr 3  A9 20                        lda #%00100000
0019EFr 3  14 rr                        trb status
0019F1r 3               
0019F1r 3                               ; If we had a minus, we'll have to negate it
0019F1r 3  A5 rr                        lda tmpdsp+1
0019F3r 3  F0 03                        beq @done       ; no minus, all done
0019F5r 3               
0019F5r 3  20 rr rr                     jsr xt_negate
0019F8r 3               @done:
0019F8r 3  60           z_number:       rts
0019F9r 3               
0019F9r 3               
0019F9r 3               
0019F9r 3               ; ## NUMBER_SIGN ( ud -- ud ) "Add character to pictured output string"
0019F9r 3               ; ## "#"  auto  ANS core
0019F9r 3                       ; """https://forth-standard.org/standard/core/num
0019F9r 3                       ; Add one char to the beginning of the pictured output string.
0019F9r 3                       ;
0019F9r 3                       ; Based on
0019F9r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
0019F9r 3                       ; Forth code  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
0019F9r 3                       ; """
0019F9r 3               xt_number_sign:
0019F9r 3  20 rr rr                     jsr underflow_2         ; double number
0019FCr 3               
0019FCr 3  20 rr rr                     jsr xt_base
0019FFr 3  20 rr rr                     jsr xt_fetch            ; ( ud1 base )
001A02r 3               
001A02r 3                               ; The following code is the ancient Forth word UD/MOD, which in
001A02r 3                               ; various Forths (including Gforth) lives on under the hood,
001A02r 3                               ; even though it's not an ANS standard word, it doesn't appear
001A02r 3                               ; in the docs, it's only used here, and there are no tests for
001A02r 3                               ; it. This is why we got rid of it. We'll be converting this
001A02r 3                               ; mess to something more sane in the long run.
001A02r 3  20 rr rr                     jsr xt_to_r             ; >r
001A05r 3  20 rr rr                     jsr xt_zero             ; 0
001A08r 3  20 rr rr                     jsr xt_r_fetch          ; r@
001A0Br 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001A0Er 3  20 rr rr                     jsr xt_rot              ; rot
001A11r 3  20 rr rr                     jsr xt_rot              ; rot
001A14r 3  20 rr rr                     jsr xt_r_from           ; r>
001A17r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001A1Ar 3  20 rr rr                     jsr xt_rot              ; rot
001A1Dr 3                               ; end of UD/MOD ( rem ud )
001A1Dr 3               
001A1Dr 3  20 rr rr                     jsr xt_rot              ; ( ud rem )
001A20r 3               
001A20r 3                               ; Convert the number that is left over to an ASCII character. We
001A20r 3                               ; use a string lookup for speed. Use either abc_str_lower for
001A20r 3                               ; lower case or abc_str_upper for upper case (prefered)
001A20r 3  B5 00                        lda 0,x
001A22r 3  A8                           tay
001A23r 3  B9 rr rr                     lda s_abc_upper,y
001A26r 3  95 00                        sta 0,x
001A28r 3  74 01                        stz 1,x                 ; paranoid; now ( ud char )
001A2Ar 3               
001A2Ar 3  20 rr rr                     jsr xt_hold
001A2Dr 3               
001A2Dr 3               z_number_sign:
001A2Dr 3  60                           rts
001A2Er 3               
001A2Er 3               
001A2Er 3               ; ## NUMBER_SIGN_GREATER ( d -- addr u ) "Finish pictured number conversion"
001A2Er 3               ; ## "#>"  auto  ANS core
001A2Er 3                       ; """https://forth-standard.org/standard/core/num-end
001A2Er 3                       ; Finish conversion of pictured number string, putting address and
001A2Er 3                       ; length on the Data Stack.
001A2Er 3                       ;
001A2Er 3                       ; Original Fort is  2DROP HLD @ PAD OVER -
001A2Er 3                       ; Based on
001A2Er 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001A2Er 3                       ; """
001A2Er 3               xt_number_sign_greater:
001A2Er 3               
001A2Er 3  20 rr rr                     jsr underflow_2         ; double number
001A31r 3               
001A31r 3                               ; The start address lives in tohold
001A31r 3  A5 rr                        lda tohold
001A33r 3  95 00                        sta 0,x         ; LSB of tohold
001A35r 3  95 02                        sta 2,x
001A37r 3  A5 rr                        lda tohold+1
001A39r 3  95 01                        sta 1,x         ; MSB of addr
001A3Br 3  95 03                        sta 3,x         ; ( addr addr )
001A3Dr 3               
001A3Dr 3                               ; The length of the string is pad - addr
001A3Dr 3  20 rr rr                     jsr xt_pad      ; ( addr addr pad )
001A40r 3               
001A40r 3  38                           sec
001A41r 3  B5 00                        lda 0,x         ; LSB of pad address
001A43r 3  F5 02                        sbc 2,x
001A45r 3  95 02                        sta 2,x
001A47r 3               
001A47r 3  B5 01                        lda 1,x         ; MSB, which should always be zero
001A49r 3  F5 03                        sbc 3,x
001A4Br 3  95 03                        sta 3,x         ; ( addr u pad )
001A4Dr 3               
001A4Dr 3  E8                           inx
001A4Er 3  E8                           inx
001A4Fr 3               
001A4Fr 3               z_number_sign_greater:
001A4Fr 3  60                           rts
001A50r 3               
001A50r 3               
001A50r 3               ; ## NUMBER_SIGN_S ( d -- addr u ) "Completely convert pictured output"
001A50r 3               ; ## "#s"  auto  ANS core
001A50r 3                       ; """https://forth-standard.org/standard/core/numS
001A50r 3                       ; Completely convert number for pictured numerical output.
001A50r 3                       ;
001A50r 3                       ; Based on
001A50r 3                       ; https://github.com/philburk/pforth/blob/master/fth/system.fth
001A50r 3                       ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
001A50r 3                       ; """
001A50r 3               
001A50r 3               xt_number_sign_s:
001A50r 3  20 rr rr                     jsr underflow_2
001A53r 3               @loop:
001A53r 3                               ; convert a single number ("#")
001A53r 3  20 rr rr                     jsr xt_number_sign
001A56r 3               
001A56r 3                               ; stop when double-celled number in TOS is zero:
001A56r 3  B5 00                        lda 0,x
001A58r 3  15 01                        ora 1,x
001A5Ar 3  15 02                        ora 2,x
001A5Cr 3  15 03                        ora 3,x
001A5Er 3  D0 F3                        bne @loop
001A60r 3               
001A60r 3               z_number_sign_s:
001A60r 3  60                           rts
001A61r 3               
001A61r 3               
001A61r 3               
001A61r 3               ; ## OF (C: -- of-sys) (x1 x2 -- |x1) "Conditional flow control"
001A61r 3               ; ## "of"  auto  ANS core ext
001A61r 3                       ; """http://forth-standard.org/standard/core/OF"""
001A61r 3               
001A61r 3               xt_of:
001A61r 3                               ; Check if value is equal to this case.
001A61r 3                               ; Postpone over (eg. compile a jsr to it)
001A61r 3  A0 rr                        ldy #>xt_over
001A63r 3  A9 rr                        lda #<xt_over
001A65r 3  20 rr rr                     jsr cmpl_subroutine
001A68r 3               
001A68r 3                               ; Postpone = (EQUAL), that is, compile a jsr to it
001A68r 3  A0 rr                        ldy #>xt_equal
001A6Ar 3  A9 rr                        lda #<xt_equal
001A6Cr 3  20 rr rr                     jsr cmpl_subroutine
001A6Fr 3               
001A6Fr 3  20 rr rr                     jsr xt_if
001A72r 3               
001A72r 3                               ; If it's true, consume the original value.
001A72r 3                               ; Postpone DROP (eg. compile a jsr to it)
001A72r 3  A0 rr                        ldy #>xt_drop
001A74r 3  A9 rr                        lda #<xt_drop
001A76r 3  20 rr rr                     jsr cmpl_subroutine
001A79r 3               
001A79r 3  60           z_of:           rts
001A7Ar 3               
001A7Ar 3               
001A7Ar 3               
001A7Ar 3               ; ## ONE ( -- n ) "Push the number 1 to the Data Stack"
001A7Ar 3               ; ## "1"  auto  Tali Forth
001A7Ar 3                       ; """This is also the code for EDITOR-WORDLIST"""
001A7Ar 3               xt_editor_wordlist:
001A7Ar 3               xt_one:
001A7Ar 3  CA                           dex
001A7Br 3  CA                           dex
001A7Cr 3  A9 01                        lda #1
001A7Er 3  95 00                        sta 0,x
001A80r 3  74 01                        stz 1,x
001A82r 3               
001A82r 3               z_editor_wordlist:
001A82r 3               z_one:
001A82r 3  60                           rts
001A83r 3               
001A83r 3               
001A83r 3               ; ## ONE_MINUS ( u -- u-1 ) "Decrease TOS by one"
001A83r 3               ; ## "1-"  auto  ANS core
001A83r 3                       ; """https://forth-standard.org/standard/core/OneMinus"""
001A83r 3               
001A83r 3               xt_one_minus:
001A83r 3  20 rr rr                     jsr underflow_1
001A86r 3               
001A86r 3  B5 00                        lda 0,x
001A88r 3  D0 02                        bne @1
001A8Ar 3  D6 01                        dec 1,x
001A8Cr 3               @1:
001A8Cr 3  D6 00                        dec 0,x
001A8Er 3               
001A8Er 3  60           z_one_minus:    rts
001A8Fr 3               
001A8Fr 3               
001A8Fr 3               
001A8Fr 3               ; ## ONE_PLUS ( u -- u+1 ) "Increase TOS by one"
001A8Fr 3               ; ## "1+"  auto  ANS core
001A8Fr 3                       ; """https://forth-standard.org/standard/core/OnePlus
001A8Fr 3                       ;
001A8Fr 3                       ; Code is shared with CHAR-PLUS
001A8Fr 3                       ; """
001A8Fr 3               
001A8Fr 3               xt_char_plus:
001A8Fr 3               xt_one_plus:
001A8Fr 3  20 rr rr                     jsr underflow_1
001A92r 3               
001A92r 3  F6 00                        inc 0,x
001A94r 3  D0 02                        bne @done
001A96r 3  F6 01                        inc 1,x
001A98r 3               
001A98r 3               @done:
001A98r 3               z_char_plus:
001A98r 3  60           z_one_plus:     rts
001A99r 3               
001A99r 3               
001A99r 3               
001A99r 3               ; ## ONLY ( -- ) "Set earch order to minimum wordlist"
001A99r 3               ; ## "only"  auto  ANS search ext
001A99r 3                       ; """https://forth-standard.org/standard/search/ONLY"""
001A99r 3               
001A99r 3               xt_only:
001A99r 3                               ; Put -1 on data stack.
001A99r 3  CA                           dex
001A9Ar 3  CA                           dex
001A9Br 3  A9 FF                        lda #$FF
001A9Dr 3  95 00                        sta 0,x
001A9Fr 3  95 01                        sta 1,x
001AA1r 3               
001AA1r 3                               ; Invoke set-order to set the minimum search order.
001AA1r 3  20 rr rr                     jsr xt_set_order
001AA4r 3               
001AA4r 3  60           z_only:         rts
001AA5r 3               
001AA5r 3               
001AA5r 3               
001AA5r 3               ; ## OR ( m n -- n ) "Logically OR TOS and NOS"
001AA5r 3               ; ## "or"  auto  ANS core
001AA5r 3                       ; """https://forth-standard.org/standard/core/OR"
001AA5r 3               xt_or:
001AA5r 3  20 rr rr                     jsr underflow_2
001AA8r 3               
001AA8r 3  B5 00                        lda 0,x
001AAAr 3  15 02                        ora 2,x
001AACr 3  95 02                        sta 2,x
001AAEr 3               
001AAEr 3  B5 01                        lda 1,x
001AB0r 3  15 03                        ora 3,x
001AB2r 3  95 03                        sta 3,x
001AB4r 3               
001AB4r 3  E8                           inx
001AB5r 3  E8                           inx
001AB6r 3               
001AB6r 3  60           z_or:           rts
001AB7r 3               
001AB7r 3               
001AB7r 3               ; ## ORDER ( -- ) "Print current word order list and current WID"
001AB7r 3               ; ## "order"  auto  ANS core
001AB7r 3                       ; """https://forth-standard.org/standard/search/ORDER
001AB7r 3                       ; Note the search order is displayed from first search to last
001AB7r 3                       ; searched and is therefore exactly the reverse of the order in which
001AB7r 3                       ; Forth stacks are displayed.
001AB7r 3                       ;
001AB7r 3                       ; A Forth implementation of this word is:
001AB7r 3                       ;
001AB7r 3                       ; 	: .wid ( wid -- )
001AB7r 3                       ; 	dup 0=  if ." Forth "  drop    else
001AB7r 3                       ; 	dup 1 = if ." Editor " drop    else
001AB7r 3                       ; 	dup 2 = if ." Assembler " drop else
001AB7r 3                       ; 	dup 3 = if ." Root " drop      else
001AB7r 3                       ; 	           . ( just print the number )
001AB7r 3                       ; 	then then then then ;
001AB7r 3                       ;
001AB7r 3                       ; : ORDER ( -- )
001AB7r 3                       ; 	cr get-order 0 ?do .wid loop
001AB7r 3                       ; 	space space get-current .wid ;
001AB7r 3                       ;
001AB7r 3                       ; This is an interactive program, so speed
001AB7r 3                       ; is not as important as size. We assume we do not have more than 255
001AB7r 3                       ; wordlists.
001AB7r 3                       ; """
001AB7r 3               
001AB7r 3               xt_order:
001AB7r 3  20 rr rr                     jsr xt_cr
001ABAr 3  20 rr rr                     jsr xt_get_order        ; ( wid_n ... wid_1 n )
001ABDr 3               
001ABDr 3                               ; Paranoid: Check if there are no wordlists, a rather
001ABDr 3                               ; pathological case. this would mean ( 0 ) on the stack. In
001ABDr 3                               ; that case, we just drop n and run
001ABDr 3  B5 00                        lda 0,x                 ; assumes no more than 255 wordlists
001ABFr 3  F0 1E                        beq @drop_done
001AC1r 3               
001AC1r 3               @have_wordlists:
001AC1r 3                               ; We arrive here with the LSB of TOS in A, the number of WIDs
001AC1r 3                               ; on the stack
001AC1r 3  A8                           tay
001AC2r 3               @loop:
001AC2r 3  E8                           inx
001AC3r 3  E8                           inx                     ; DROP, now ( wid_n ... wid_1 )
001AC4r 3  B5 00                        lda 0,x
001AC6r 3               
001AC6r 3  5A                           phy
001AC7r 3  20 rr rr                     jsr _print_wid_string   ; internal helper function
001ACAr 3  7A                           ply
001ACBr 3               
001ACBr 3  88                           dey
001ACCr 3  D0 F4                        bne @loop
001ACEr 3               
001ACEr 3                               ; We've printed the wordlists, now we add the current wordlist.
001ACEr 3                               ; This follows the convention of Gforth
001ACEr 3  20 rr rr                     jsr xt_space
001AD1r 3  20 rr rr                     jsr xt_space
001AD4r 3  20 rr rr                     jsr xt_get_current      ; ( wid )
001AD7r 3               
001AD7r 3  B5 00                        lda 0,x
001AD9r 3  20 rr rr                     jsr _print_wid_string
001ADCr 3  20 rr rr                     jsr xt_cr
001ADFr 3               
001ADFr 3               @drop_done:
001ADFr 3  E8                           inx
001AE0r 3  E8                           inx
001AE1r 3               z_order:
001AE1r 3  60                           rts
001AE2r 3               
001AE2r 3               _print_wid_string:
001AE2r 3                       ; """Helper function for ORDER: Given a WID in A, print the
001AE2r 3                       ; corresponding string. If there is no such word list defined, just
001AE2r 3                       ; print the number. Assumes we will not have more than 256 WIDs; also
001AE2r 3                       ; assumes we have just loaded A so Z reflects status of byte.  In
001AE2r 3                       ; theory, we could speed this up by having the WID be the same as the
001AE2r 3                       ; number of the strings. However, ORDER is used rather infrequently and
001AE2r 3                       ; this would make changes to the strings.asm file very dangerous, so we
001AE2r 3                       ; follow the slightly more complicated route with a translation table.
001AE2r 3                       ; """
001AE2r 3                               ; If the WID is larger than 3, we have no string avaliable and
001AE2r 3                               ; just print the number.
001AE2r 3                               ; See http://6502.org/tutorials/compare_instructions.html
001AE2r 3                               ; for details
001AE2r 3  C9 04                        cmp #4
001AE4r 3  90 09                        bcc @output_string      ; less than 4, print a real string
001AE6r 3               
001AE6r 3                               ; Our WID is not less than 4, that is, 4 or larger. We just
001AE6r 3                               ; print the number
001AE6r 3  CA                           dex
001AE7r 3  CA                           dex
001AE8r 3  95 00                        sta 0,x
001AEAr 3  74 01                        stz 1,x
001AECr 3  4C rr rr                     jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
001AEFr 3               
001AEFr 3               @output_string:
001AEFr 3                               ; Get the string number based on WID 0 to 3
001AEFr 3  A8                           tay
001AF0r 3  B9 rr rr                     lda @wid_data,y
001AF3r 3               
001AF3r 3                               ; Print without a line feed
001AF3r 3  4C rr rr                     jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
001AF6r 3               
001AF6r 3               @wid_data:
001AF6r 3                       ; Table of string numbers (see strings.asm) indexed by the WID if
001AF6r 3                       ; less than 4.
001AF6r 3  03                   .byte str_wid_forth            ; WID 0: "Forth"
001AF7r 3  06                   .byte str_wid_editor           ; WID 1: "Editor"
001AF8r 3  07                   .byte str_wid_assembler        ; WID 2: "Assembler"
001AF9r 3  08                   .byte str_wid_root             ; WID 3: "Root"
001AFAr 3               
001AFAr 3               
001AFAr 3               
001AFAr 3               ; ## OUTPUT ( -- addr ) "Return the address of the EMIT vector address"
001AFAr 3               ; ## "output"  tested  Tali Forth
001AFAr 3               xt_output:
001AFAr 3                       ; """Return the address where the jump target for EMIT is stored (but
001AFAr 3                       ; not the vector itself). By default, this will hold the value of
001AFAr 3                       ; kernel_putc routine, but this can be changed by the user, hence this
001AFAr 3                       ; routine.
001AFAr 3                       ; """
001AFAr 3  CA                           dex
001AFBr 3  CA                           dex
001AFCr 3  A9 rr                        lda #<output
001AFEr 3  95 00                        sta 0,x
001B00r 3  A9 rr                        lda #>output
001B02r 3  95 01                        sta 1,x
001B04r 3               
001B04r 3  60           z_output:       rts
001B05r 3               
001B05r 3               
001B05r 3               ; ## OVER ( b a -- b a b ) "Copy NOS to TOS"
001B05r 3               ; ## "over"  auto  ANS core
001B05r 3                       ; """https://forth-standard.org/standard/core/OVER"""
001B05r 3               xt_over:
001B05r 3  20 rr rr                     jsr underflow_2
001B08r 3               
001B08r 3  CA                           dex
001B09r 3  CA                           dex
001B0Ar 3               
001B0Ar 3  B5 04                        lda 4,x         ; LSB
001B0Cr 3  95 00                        sta 0,x
001B0Er 3  B5 05                        lda 5,x         ; MSB
001B10r 3  95 01                        sta 1,x
001B12r 3               
001B12r 3  60           z_over:         rts
001B13r 3               
001B13r 3               
001B13r 3               ; ## PAD ( -- addr ) "Return address of user scratchpad"
001B13r 3               ; ## "pad"  auto  ANS core ext
001B13r 3                       ; """https://forth-standard.org/standard/core/PAD
001B13r 3                       ; Return address to a temporary area in free memory for user. Must
001B13r 3                       ; be at least 84 bytes in size (says ANS). It is located relative to
001B13r 3                       ; the compile area pointer (CP) and therefore varies in position.
001B13r 3                       ; This area is reserved for the user and not used by the system
001B13r 3                       ; """
001B13r 3               xt_pad:
001B13r 3  CA                           dex
001B14r 3  CA                           dex
001B15r 3               
001B15r 3  A5 rr                        lda cp
001B17r 3  18                           clc
001B18r 3  69 FF                        adc #padoffset  ; assumes padoffset one byte in size
001B1Ar 3  95 00                        sta 0,x
001B1Cr 3               
001B1Cr 3  A5 rr                        lda cp+1
001B1Er 3  69 00                        adc #0          ; only need carry
001B20r 3  95 01                        sta 1,x
001B22r 3               
001B22r 3  60           z_pad:          rts
001B23r 3               
001B23r 3               
001B23r 3               ; ## PAGE ( -- ) "Clear the screen"
001B23r 3               ; ## "page"  tested  ANS facility
001B23r 3                       ; """https://forth-standard.org/standard/facility/PAGE
001B23r 3                       ; Clears a page if supported by ANS terminal codes. This is
001B23r 3                       ; Clear Screen ("ESC[2J") plus moving the cursor to the top
001B23r 3                       ; left of the screen
001B23r 3                       ; """
001B23r 3               xt_page:
001B23r 3  A9 1B                        lda #AscESC
001B25r 3  20 rr rr                     jsr emit_a
001B28r 3  A9 5B                        lda #$5B        ; ASCII for "["
001B2Ar 3  20 rr rr                     jsr emit_a
001B2Dr 3  A9 32                        lda #'2'
001B2Fr 3  20 rr rr                     jsr emit_a
001B32r 3  A9 4A                        lda #'J'
001B34r 3  20 rr rr                     jsr emit_a
001B37r 3               
001B37r 3                               ; move cursor to top left of screen
001B37r 3  20 rr rr                     jsr xt_zero
001B3Ar 3  20 rr rr                     jsr xt_zero
001B3Dr 3  20 rr rr                     jsr xt_at_xy
001B40r 3               
001B40r 3  60           z_page:         rts
001B41r 3               
001B41r 3               
001B41r 3               ; ## PAREN ( -- ) "Discard input up to close paren ( comment )"
001B41r 3               ; ## "("  auto  ANS core
001B41r 3                       ; """http://forth-standard.org/standard/core/p"""
001B41r 3               
001B41r 3               xt_paren:
001B41r 3                               ; Put a right paren on the stack.
001B41r 3  CA                           dex
001B42r 3  CA                           dex
001B43r 3  A9 29                        lda #41     ; Right parenthesis
001B45r 3  95 00                        sta 0,x
001B47r 3  74 01                        stz 1,x
001B49r 3               
001B49r 3                               ; Call parse.
001B49r 3  20 rr rr                     jsr xt_parse
001B4Cr 3               
001B4Cr 3                               ; Throw away the result.
001B4Cr 3  E8                           inx
001B4Dr 3  E8                           inx
001B4Er 3  E8                           inx
001B4Fr 3  E8                           inx
001B50r 3               
001B50r 3  60           z_paren:        rts
001B51r 3               
001B51r 3               
001B51r 3               
001B51r 3               ; ## PARSE_NAME ( "name" -- addr u ) "Parse the input"
001B51r 3               ; ## "parse-name"  auto  ANS core ext
001B51r 3                       ; """https://forth-standard.org/standard/core/PARSE-NAME
001B51r 3                       ; Find next word in input string, skipping leading whitespace. This is
001B51r 3                       ; a special form of PARSE and drops through to that word. See PARSE
001B51r 3                       ; for more detail. We use this word internally for the interpreter
001B51r 3                       ; because it is a lot easier to use. Reference implementations at
001B51r 3                       ; http://forth-standard.org/standard/core/PARSE-NAME and
001B51r 3                       ; http://www.forth200x.org/reference-implementations/parse-name.fs
001B51r 3                       ; Roughly, the word is comparable to BL WORD COUNT. -- Note that
001B51r 3                       ; though the ANS standard talks about skipping "spaces", whitespace
001B51r 3                       ; is actually perfectly legal (see for example
001B51r 3                       ; http://forth-standard.org/standard/usage#subsubsection.3.4.1.1).
001B51r 3                       ; Otherwise, PARSE-NAME chokes on tabs.
001B51r 3                       ; """
001B51r 3               
001B51r 3               xt_parse_name:
001B51r 3                               ; To enable the compilation of the high-level Forth words
001B51r 3                               ; in forth-words.asm and user-words.asm at boot time,
001B51r 3                               ; PARSE-NAME and PARSE must be able to deal with 16-bit string
001B51r 3                               ; lengths. This is a pain on an 8-bit machine. The pointer
001B51r 3                               ; to the current location is in toin (>IN). We need to check,
001B51r 3                               ; worst case, the characters from cib+toin to cib+ciblen, and
001B51r 3                               ; we can't just use Y as an index.
001B51r 3               
001B51r 3                               ; The counter is CIBLEN-TOIN and stored in tmp1
001B51r 3  A5 rr                        lda ciblen              ; LSB of counter
001B53r 3  38                           sec
001B54r 3  E5 rr                        sbc toin
001B56r 3  85 rr                        sta tmp1
001B58r 3  A5 rr                        lda ciblen+1            ; MSB
001B5Ar 3  E5 rr                        sbc toin+1
001B5Cr 3  85 rr                        sta tmp1+1
001B5Er 3               
001B5Er 3                               ; Check the result for zero (TOIN is equal to CIBLEN)
001B5Er 3  A5 rr                        lda tmp1
001B60r 3  05 rr                        ora tmp1+1
001B62r 3  F0 28                        beq @empty_line
001B64r 3               
001B64r 3                               ; We walk through the characters starting at CIB+TOIN, so we
001B64r 3                               ; save a temp version of that in tmp2
001B64r 3  A5 rr                        lda cib
001B66r 3  18                           clc
001B67r 3  65 rr                        adc toin
001B69r 3  85 rr                        sta tmp2                ; LSB of first character
001B6Br 3  A5 rr                        lda cib+1
001B6Dr 3  65 rr                        adc toin+1
001B6Fr 3  85 rr                        sta tmp2+1              ; MSB
001B71r 3               
001B71r 3               @skip_loop:
001B71r 3  B2 rr                        lda (tmp2)              ; work copy of cib
001B73r 3  20 rr rr                     jsr is_whitespace
001B76r 3  90 1F                        bcc @char_found
001B78r 3               
001B78r 3                               ; Char is still whitespace, continue
001B78r 3  E6 rr                        inc tmp2
001B7Ar 3  D0 02                        bne @2
001B7Cr 3  E6 rr                        inc tmp2+1
001B7Er 3               @2:
001B7Er 3                               ; Adjust counter
001B7Er 3  A5 rr                        lda tmp1
001B80r 3  D0 02                        bne @3
001B82r 3  C6 rr                        dec tmp1+1
001B84r 3               @3:
001B84r 3  C6 rr                        dec tmp1
001B86r 3               
001B86r 3  A5 rr                        lda tmp1
001B88r 3  05 rr                        ora tmp1+1
001B8Ar 3  D0 E5                        bne @skip_loop          ; fall through if empty line
001B8Cr 3               
001B8Cr 3               @empty_line:
001B8Cr 3                               ; Neither the ANS Forth nor the Gforth documentation say
001B8Cr 3                               ; what to return as an address if a string with only
001B8Cr 3                               ; spaces is given. For speed reasons, we just return junk
001B8Cr 3                               ; NOS, with the TOS zero as per standard
001B8Cr 3  CA                           dex
001B8Dr 3  CA                           dex
001B8Er 3  CA                           dex
001B8Fr 3  CA                           dex
001B90r 3               
001B90r 3  74 00                        stz 0,x                 ; TOS is zero
001B92r 3  74 01                        stz 1,x
001B94r 3               
001B94r 3  4C rr rr                     jmp z_parse_name        ; skip over PARSE
001B97r 3               
001B97r 3               @char_found:
001B97r 3                               ; We arrive here with tmp2 pointing to the first non-space
001B97r 3                               ; character. This is where the word really starts, so
001B97r 3                               ; we use it to calculate the new >IN by subtracting
001B97r 3  A5 rr                        lda tmp2
001B99r 3  38                           sec
001B9Ar 3  E5 rr                        sbc cib
001B9Cr 3  85 rr                        sta toin
001B9Er 3  A5 rr                        lda tmp2+1
001BA0r 3  E5 rr                        sbc cib+1
001BA2r 3  85 rr                        sta toin+1
001BA4r 3               
001BA4r 3                               ; prepare Data Stack for PARSE by adding space
001BA4r 3                               ; as the delimiter
001BA4r 3  CA                           dex
001BA5r 3  CA                           dex
001BA6r 3               
001BA6r 3  A9 20                        lda #AscSP
001BA8r 3  95 00                        sta 0,x
001BAAr 3  74 01                        stz 1,x                 ; paranoid, now ( "name" c )
001BACr 3               
001BACr 3               
001BACr 3               ; ## PARSE ( "name" c -- addr u ) "Parse input with delimiter character"
001BACr 3               ; ## "parse"  tested  ANS core ext
001BACr 3                       ; """https://forth-standard.org/standard/core/PARSE
001BACr 3                       ; Find word in input string delimited by character given. Do not
001BACr 3                       ; skip leading delimiters -- this is the main difference to PARSE-NAME.
001BACr 3                       ; PARSE and PARSE-NAME replace WORD in modern systems. ANS discussion
001BACr 3                       ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
001BACr 3                       ;
001BACr 3                       ;
001BACr 3                       ;     cib  cib+toin   cib+ciblen
001BACr 3                       ;      v      v            v
001BACr 3                       ;     |###################|
001BACr 3                       ;
001BACr 3                       ;     |------>|  toin (>IN)
001BACr 3                       ;     |------------------->|  ciblen
001BACr 3                       ;
001BACr 3                       ; The input string is stored starting at the address in the Current
001BACr 3                       ; Input Buffer (CIB), the length of which is in CIBLEN. While searching
001BACr 3                       ; for the delimiter, TOIN (>IN) points to the where we currently are.
001BACr 3                       ; Since PARSE does not skip leading delimiters, we assume we are on a
001BACr 3                       ; useful string if there are any characters at all. As with
001BACr 3                       ; PARSE-NAME, we must be able to handle strings with a length of
001BACr 3                       ; 16-bit for EVALUTE, which is a pain on an 8-bit machine.
001BACr 3                       ; """
001BACr 3               
001BACr 3               xt_parse:
001BACr 3  20 rr rr                     jsr underflow_1
001BAFr 3               
001BAFr 3                               ; If the input buffer is empty, we just return
001BAFr 3  A5 rr                        lda ciblen
001BB1r 3  05 rr                        ora ciblen+1
001BB3r 3  F0 0C                        beq @abort_parse
001BB5r 3               
001BB5r 3                               ; If the pointer >IN is larger or equal to the length of
001BB5r 3                               ; the input buffer (CIBLEN), the line is done. Put
001BB5r 3                               ; differently, we only continue if >IN is smaller than
001BB5r 3                               ; CIBLEN
001BB5r 3  A5 rr                        lda toin+1              ; MSB
001BB7r 3  C5 rr                        cmp ciblen+1
001BB9r 3  90 0E                        bcc @go_parse           ; unsigned comparison
001BBBr 3               
001BBBr 3  A5 rr                        lda toin                ; LSB
001BBDr 3  C5 rr                        cmp ciblen
001BBFr 3  90 08                        bcc @go_parse
001BC1r 3               
001BC1r 3               @abort_parse:
001BC1r 3                               ; Sorry, this line is over
001BC1r 3  CA                           dex
001BC2r 3  CA                           dex
001BC3r 3  74 00                        stz 0,x
001BC5r 3  74 01                        stz 1,x
001BC7r 3               
001BC7r 3  80 7A                        bra @done
001BC9r 3               @go_parse:
001BC9r 3                               ; We actually have work to do. Save the delimiter in
001BC9r 3                               ; tmptos.
001BC9r 3  B5 00                        lda 0,x
001BCBr 3  85 rr                        sta tmptos
001BCDr 3               
001BCDr 3                               ; We can now prepare the Data Stack for the return value
001BCDr 3  CA                           dex
001BCEr 3  CA                           dex
001BCFr 3               
001BCFr 3                               ; tmp1 is CIB+TOIN, the beginning of the current string
001BCFr 3                               ; tmp2 is initially the same as tmp1, then the work index
001BCFr 3                               ; tmp3 is CIB+CIBLEN, one char past the end of the string
001BCFr 3               
001BCFr 3                               ; Calculate the beginning of the string, which is also the
001BCFr 3                               ; address to return
001BCFr 3  A5 rr                        lda cib
001BD1r 3  18                           clc
001BD2r 3  65 rr                        adc toin        ; LSB
001BD4r 3  85 rr                        sta tmp1
001BD6r 3  85 rr                        sta tmp2
001BD8r 3  95 02                        sta 2,x
001BDAr 3               
001BDAr 3  A5 rr                        lda cib+1
001BDCr 3  65 rr                        adc toin+1      ; MSB
001BDEr 3  85 rr                        sta tmp1+1
001BE0r 3  85 rr                        sta tmp2+1
001BE2r 3  95 03                        sta 3,x
001BE4r 3               
001BE4r 3                               ; Calculate the address where the input buffer ends plus 1, so
001BE4r 3                               ; we can compare it with TOIN, which is an index
001BE4r 3  A5 rr                        lda cib
001BE6r 3  18                           clc
001BE7r 3  65 rr                        adc ciblen
001BE9r 3  85 rr                        sta tmp3
001BEBr 3  A5 rr                        lda cib+1
001BEDr 3  65 rr                        adc ciblen+1
001BEFr 3  85 rr                        sta tmp3+1
001BF1r 3               
001BF1r 3                               ; Initialize the offset we use to adjust EOL or found delimiter
001BF1r 3  64 rr                        stz tmptos+1
001BF3r 3               @loop:
001BF3r 3                               ; If we are at the end of the string, quit
001BF3r 3  A5 rr                        lda tmp2
001BF5r 3  C5 rr                        cmp tmp3
001BF7r 3  D0 06                        bne @not_empty
001BF9r 3               
001BF9r 3  A5 rr                        lda tmp2+1
001BFBr 3  C5 rr                        cmp tmp3+1
001BFDr 3  F0 1D                        beq @eol
001BFFr 3               @not_empty:
001BFFr 3                               ; We have to do this the hard way. In fact, it's really
001BFFr 3                               ; hard since if we are dealing with a SPACE, the standard
001BFFr 3                               ; wants us to skip all whitespace, not just spaces. Otherwise,
001BFFr 3                               ; Tali would choke on tabs between words. For details, see
001BFFr 3                               ; http://forth-standard.org/standard/file#subsection.11.3.5
001BFFr 3                               ; In theory, we could make this faster by defining a delimiter
001BFFr 3                               ; that is 00 as the sign that we skip all whitespace, thereby
001BFFr 3                               ; avoiding having to test every time. However, somebody,
001BFFr 3                               ; somewhere might want to parse a zero-delimited list. Since
001BFFr 3                               ; any byte value could be chosen for that, we just test for
001BFFr 3                               ; a space every single time for the moment.
001BFFr 3  B2 rr                        lda (tmp2)
001C01r 3               
001C01r 3  A4 rr                        ldy tmptos
001C03r 3  C0 20                        cpy #AscSP
001C05r 3  D0 07                        bne @not_whitespace
001C07r 3               
001C07r 3                               ; The delimiter is a space, so we're looking for all
001C07r 3                               ; whitespace
001C07r 3  20 rr rr                     jsr is_whitespace
001C0Ar 3  90 02                        bcc @not_whitespace
001C0Cr 3  80 0C                        bra @found_delimiter
001C0Er 3               
001C0Er 3               @not_whitespace:
001C0Er 3                               ; The delimiter is not a space, so we're looking for
001C0Er 3                               ; whatever it is
001C0Er 3  C5 rr                        cmp tmptos
001C10r 3  F0 08                        beq @found_delimiter
001C12r 3               
001C12r 3                               ; Not a delimiter, next character
001C12r 3  E6 rr                        inc tmp2
001C14r 3  D0 DD                        bne @loop
001C16r 3  E6 rr                        inc tmp2+1
001C18r 3  80 D9                        bra @loop
001C1Ar 3               
001C1Ar 3               @found_delimiter:
001C1Ar 3                               ; Increase the offset: If we've found a delimiter, we want
001C1Ar 3                               ; TOIN to point to the character after it, not the delimiter
001C1Ar 3                               ; itself
001C1Ar 3  E6 rr                        inc tmptos+1
001C1Cr 3               @eol:
001C1Cr 3                               ; The length of the new string is tmp2-tmp1
001C1Cr 3  A5 rr                        lda tmp2
001C1Er 3  38                           sec
001C1Fr 3  E5 rr                        sbc tmp1
001C21r 3  95 00                        sta 0,x
001C23r 3               
001C23r 3  A5 rr                        lda tmp2+1
001C25r 3  E5 rr                        sbc tmp1+1
001C27r 3  95 01                        sta 1,x
001C29r 3               
001C29r 3                               ; The new offset is tmp2-cib
001C29r 3  A5 rr                        lda tmp2
001C2Br 3  38                           sec
001C2Cr 3  E5 rr                        sbc cib
001C2Er 3  85 rr                        sta toin
001C30r 3  A5 rr                        lda tmp2+1
001C32r 3  E5 rr                        sbc cib+1
001C34r 3  85 rr                        sta toin+1
001C36r 3               
001C36r 3                               ; Add in the delimiter
001C36r 3  A5 rr                        lda toin
001C38r 3  18                           clc
001C39r 3  65 rr                        adc tmptos+1
001C3Br 3  85 rr                        sta toin
001C3Dr 3  A5 rr                        lda toin+1
001C3Fr 3  69 00                        adc #0          ; we only need the carry
001C41r 3  85 rr                        sta toin+1
001C43r 3               @done:
001C43r 3               z_parse_name:
001C43r 3  60           z_parse:        rts
001C44r 3               
001C44r 3               
001C44r 3               
001C44r 3               ; ## PICK ( n n u -- n n n ) "Move element u of the stack to TOS"
001C44r 3               ; ## "pick"  auto  ANS core ext
001C44r 3                       ; """https://forth-standard.org/standard/core/PICK
001C44r 3                       ; Take the u-th element out of the stack and put it on TOS,
001C44r 3                       ; overwriting the original TOS. 0 PICK is equivalent to DUP, 1 PICK to
001C44r 3                       ; OVER. Note that using PICK is considered poor coding form. Also note
001C44r 3                       ; that FIG Forth has a different behavior for PICK than ANS Forth.
001C44r 3                       ; """
001C44r 3               
001C44r 3               xt_pick:
001C44r 3                               ; Checking for underflow is difficult because it depends on
001C44r 3                               ; which element we want to grab. We could probably figure
001C44r 3                               ; something out, but it wouldn't work with underflow stripping
001C44r 3                               ; Since using PICK is considered poor form anyway, we just
001C44r 3                               ; leave it as it is
001C44r 3  16 00                        asl 0,x         ; we assume u < 128 (stack is small)
001C46r 3  8A                           txa
001C47r 3  75 00                        adc 0,x
001C49r 3  A8                           tay
001C4Ar 3               
001C4Ar 3  B9 02 00                     lda 0002,y
001C4Dr 3  95 00                        sta 0,x
001C4Fr 3  B9 03 00                     lda 0003,y
001C52r 3  95 01                        sta 1,x
001C54r 3               
001C54r 3  60           z_pick:         rts
001C55r 3               
001C55r 3               
001C55r 3               
001C55r 3               ; ## PLUS ( n n -- n ) "Add TOS and NOS"
001C55r 3               ; ## "+"  auto  ANS core
001C55r 3                       ; """https://forth-standard.org/standard/core/Plus"""
001C55r 3               xt_plus:
001C55r 3  20 rr rr                     jsr underflow_2
001C58r 3               
001C58r 3  18                           clc
001C59r 3  B5 00                        lda 0,x         ; LSB
001C5Br 3  75 02                        adc 2,x
001C5Dr 3  95 02                        sta 2,x
001C5Fr 3               
001C5Fr 3  B5 01                        lda 1,x         ; MSB. No CLC, conserve carry bit
001C61r 3  75 03                        adc 3,x
001C63r 3  95 03                        sta 3,x
001C65r 3               
001C65r 3  E8                           inx
001C66r 3  E8                           inx
001C67r 3               
001C67r 3  60           z_plus:         rts
001C68r 3               
001C68r 3               
001C68r 3               ; ## PLUS_STORE ( n addr -- ) "Add number to value at given address"
001C68r 3               ; ## "+!"  auto  ANS core
001C68r 3                       ; """https://forth-standard.org/standard/core/PlusStore"""
001C68r 3               xt_plus_store:
001C68r 3  20 rr rr                     jsr underflow_2
001C6Br 3               
001C6Br 3                               ; move address to tmp1 so we can work with it
001C6Br 3  B5 00                        lda 0,x
001C6Dr 3  85 rr                        sta tmp1
001C6Fr 3  B5 01                        lda 1,x
001C71r 3  85 rr                        sta tmp1+1
001C73r 3               
001C73r 3  A0 00                        ldy #0          ; LSB
001C75r 3  B1 rr                        lda (tmp1),y
001C77r 3  18                           clc
001C78r 3  75 02                        adc 2,x
001C7Ar 3  91 rr                        sta (tmp1),y
001C7Cr 3               
001C7Cr 3  C8                           iny             ; MSB
001C7Dr 3  B1 rr                        lda (tmp1),y
001C7Fr 3  75 03                        adc 3,x
001C81r 3  91 rr                        sta (tmp1),y
001C83r 3               
001C83r 3  E8                           inx
001C84r 3  E8                           inx
001C85r 3  E8                           inx
001C86r 3  E8                           inx
001C87r 3               
001C87r 3  60           z_plus_store:   rts
001C88r 3               
001C88r 3               
001C88r 3               ; ## POSTPONE ( -- ) "Change IMMEDIATE status (it's complicated)"
001C88r 3               ; ## "postpone"  auto   ANS core
001C88r 3                       ; """https://forth-standard.org/standard/core/POSTPONE
001C88r 3                       ; Add the compilation behavior of a word to a new word at
001C88r 3                       ; compile time. If the word that follows it is immediate, include
001C88r 3                       ; it so that it will be compiled when the word being defined is
001C88r 3                       ; itself used for a new word. Tricky, but very useful.
001C88r 3                       ;
001C88r 3                       ; Because POSTPONE expects a word (not an xt) in the input stream (not
001C88r 3                       ; on the Data Stack). This means we cannot build words with
001C88r 3                       ; "jsr xt_postpone, jsr <word>" directly.
001C88r 3                       ; """
001C88r 3               
001C88r 3               xt_postpone:
001C88r 3  20 rr rr                     jsr xt_parse_name               ; ( -- addr n )
001C8Br 3               
001C8Br 3                               ; if there was no word provided, complain and quit
001C8Br 3  B5 00                        lda 0,x
001C8Dr 3  15 01                        ora 1,x
001C8Fr 3  D0 05                        bne @1
001C91r 3               
001C91r 3  A9 05                        lda #err_noname
001C93r 3  4C rr rr                     jmp error
001C96r 3               @1:
001C96r 3  20 rr rr                     jsr xt_find_name                ; ( -- nt | 0 )
001C99r 3               
001C99r 3                               ; if word not in Dictionary, complain and quit
001C99r 3  D0 05                        bne @2
001C9Br 3  A9 05                        lda #err_noname
001C9Dr 3  4C rr rr                     jmp error
001CA0r 3               
001CA0r 3               @2:
001CA0r 3                               ; keep a copy of nt for later
001CA0r 3  B5 00                        lda 0,x
001CA2r 3  85 rr                        sta tmp1
001CA4r 3  B5 01                        lda 1,x
001CA6r 3  85 rr                        sta tmp1+1
001CA8r 3               
001CA8r 3                               ; We need the xt instead of the nt
001CA8r 3  20 rr rr                     jsr xt_name_to_int              ; ( nt -- xt )
001CABr 3               
001CABr 3                               ; See if this is an immediate word. This is easier
001CABr 3                               ; with nt than with xt. The status byte of the word
001CABr 3                               ; is nt+1
001CABr 3  E6 rr                        inc tmp1
001CADr 3  D0 02                        bne @3
001CAFr 3  E6 rr                        inc tmp1+1
001CB1r 3               @3:
001CB1r 3  B2 rr                        lda (tmp1)
001CB3r 3  29 04                        and #IM         ; mask all but Intermediate flag
001CB5r 3  F0 05                        beq @not_immediate
001CB7r 3               
001CB7r 3                               ; We're immediate, so instead of executing it right now, we
001CB7r 3                               ; compile it. xt is TOS, so this is easy. The RTS at the end
001CB7r 3                               ; takes us back to the original caller
001CB7r 3  20 rr rr                     jsr xt_compile_comma
001CBAr 3  80 0A                        bra @done
001CBCr 3               
001CBCr 3               @not_immediate:
001CBCr 3                               ; This is not an immediate word, so we enact "deferred
001CBCr 3                               ; compilation" by including ' <NAME> COMPILE, which we do by
001CBCr 3                               ; compiling the run-time routine of LITERAL, the xt itself, and
001CBCr 3                               ; a subroutine jump to COMPILE,
001CBCr 3  20 rr rr                     jsr xt_literal
001CBFr 3               
001CBFr 3                               ; Last, compile COMPILE,
001CBFr 3  A0 rr                        ldy #>xt_compile_comma
001CC1r 3  A9 rr                        lda #<xt_compile_comma
001CC3r 3  20 rr rr                     jsr cmpl_subroutine
001CC6r 3               @done:
001CC6r 3  60           z_postpone:     rts
001CC7r 3               
001CC7r 3               
001CC7r 3               
001CC7r 3               ; ## PREVIOUS ( -- ) "Remove the first wordlist in the search order"
001CC7r 3               ; ## "previous"  auto  ANS search ext
001CC7r 3                       ; """http://forth-standard.org/standard/search/PREVIOUS"""
001CC7r 3               
001CC7r 3               xt_previous:
001CC7r 3  20 rr rr                     jsr xt_get_order
001CCAr 3  20 rr rr                     jsr xt_nip
001CCDr 3  20 rr rr                     jsr xt_one_minus
001CD0r 3  20 rr rr                     jsr xt_set_order
001CD3r 3               
001CD3r 3  60           z_previous:     rts
001CD4r 3               
001CD4r 3               
001CD4r 3               
001CD4r 3               ; ## QUESTION ( addr -- ) "Print content of a variable"
001CD4r 3               ; ## "?"  tested  ANS tools
001CD4r 3                       ; """https://forth-standard.org/standard/tools/q
001CD4r 3                       ;
001CD4r 3                       ; Only used interactively. Since humans are so slow, we
001CD4r 3                       ; save size and just go for the subroutine jumps
001CD4r 3                       ; """
001CD4r 3               xt_question:
001CD4r 3                               ; FETCH takes care of underflow check
001CD4r 3  20 rr rr                     jsr xt_fetch
001CD7r 3  20 rr rr                     jsr xt_dot
001CDAr 3               
001CDAr 3  60           z_question:     rts
001CDBr 3               
001CDBr 3               
001CDBr 3               ; ## QUESTION_DUP ( n -- 0 | n n ) "Duplicate TOS non-zero"
001CDBr 3               ; ## "?dup"  auto  ANS core
001CDBr 3                       ; """https://forth-standard.org/standard/core/qDUP"""
001CDBr 3               
001CDBr 3               xt_question_dup:
001CDBr 3  20 rr rr                     jsr underflow_1
001CDEr 3               
001CDEr 3                               ; Check if TOS is zero
001CDEr 3  B5 00                        lda 0,x
001CE0r 3  15 01                        ora 1,x
001CE2r 3  F0 0A                        beq @done
001CE4r 3               
001CE4r 3                               ; not zero, duplicate
001CE4r 3  CA                           dex
001CE5r 3  CA                           dex
001CE6r 3  B5 02                        lda 2,x
001CE8r 3  95 00                        sta 0,x
001CEAr 3  B5 03                        lda 3,x
001CECr 3  95 01                        sta 1,x
001CEEr 3               @done:
001CEEr 3  60           z_question_dup: rts
001CEFr 3               
001CEFr 3               
001CEFr 3               
001CEFr 3               ; ## R_FETCH ( -- n ) "Get copy of top of Return Stack"
001CEFr 3               ; ## "r@"  auto  ANS core
001CEFr 3                       ; """https://forth-standard.org/standard/core/RFetch
001CEFr 3                       ; This word is Compile Only in Tali Forth, though Gforth has it
001CEFr 3                       ; work normally as well
001CEFr 3                       ;
001CEFr 3                       ; An alternative way to write this word
001CEFr 3                       ; would be to access the elements on the stack directly like 2R@
001CEFr 3                       ; does, these versions should be compared at some point.
001CEFr 3                       ; """
001CEFr 3               xt_r_fetch:
001CEFr 3                               ; get the return address
001CEFr 3  7A                           ply             ; LSB
001CF0r 3  84 rr                        sty tmp1
001CF2r 3  7A                           ply             ; MSB
001CF3r 3               
001CF3r 3                               ; --- CUT FOR NATIVE COMPILE ---
001CF3r 3               
001CF3r 3                               ; get the actual top of Return Stack
001CF3r 3  CA                           dex
001CF4r 3  CA                           dex
001CF5r 3               
001CF5r 3  68                           pla             ; LSB
001CF6r 3  95 00                        sta 0,x
001CF8r 3  68                           pla             ; MSB
001CF9r 3  95 01                        sta 1,x
001CFBr 3               
001CFBr 3                               ; now we have to put that value back
001CFBr 3  48                           pha
001CFCr 3  B5 00                        lda 0,x
001CFEr 3  48                           pha
001CFFr 3               
001CFFr 3                               ; --- CUT FOR NATIVE COMPILE ---
001CFFr 3               
001CFFr 3                               ; restore return value
001CFFr 3  5A                           phy             ; MSB
001D00r 3  A4 rr                        ldy tmp1
001D02r 3  5A                           phy             ; LSB
001D03r 3               
001D03r 3  60           z_r_fetch:      rts
001D04r 3               
001D04r 3               
001D04r 3               ; ## R_FROM ( -- n )(R: n --) "Move top of Return Stack to TOS"
001D04r 3               ; ## "r>"  auto  ANS core
001D04r 3                       ; """https://forth-standard.org/standard/core/Rfrom
001D04r 3                       ; Move Top of Return Stack to Top of Data Stack.
001D04r 3                       ;
001D04r 3                       ; We have to move
001D04r 3                       ; the RTS address out of the way first. This word is handled
001D04r 3                       ; differently for native and and subroutine compilation, see COMPILE,
001D04r 3                       ; This is a compile-only word
001D04r 3                       ; """
001D04r 3               
001D04r 3               xt_r_from:
001D04r 3                               ; Rescue the address of the return jump that is currently
001D04r 3                               ; on top of the Return Stack. If this word is natively
001D04r 3                               ; compiled, this is a total waste of time
001D04r 3  68                           pla             ; LSB
001D05r 3  85 rr                        sta tmptos
001D07r 3  7A                           ply             ; MSB
001D08r 3               
001D08r 3                               ; --- CUT FOR NATIVE CODING ---
001D08r 3               
001D08r 3  CA                           dex
001D09r 3  CA                           dex
001D0Ar 3               
001D0Ar 3                               ; now we can access the actual data
001D0Ar 3               
001D0Ar 3  68                           pla             ; LSB
001D0Br 3  95 00                        sta 0,x
001D0Dr 3  68                           pla             ; MSB
001D0Er 3  95 01                        sta 1,x
001D10r 3               
001D10r 3                               ; --- CUT FOR NATIVE CODING ---
001D10r 3               
001D10r 3                               ; restore the return address
001D10r 3  5A                           phy             ; MSB
001D11r 3  A5 rr                        lda tmptos
001D13r 3  48                           pha             ; LSB
001D14r 3               
001D14r 3  60           z_r_from:       rts
001D15r 3               
001D15r 3               
001D15r 3               ; ## R_TO_INPUT ( -- ) ( R: n n n n -- ) "Restore input state from Return Stack"
001D15r 3               ; ## "r>input"  tested  Tali Forth
001D15r 3                       ; """Restore the current input state as defined by insrc, cib, ciblen,
001D15r 3                       ; and toin from the Return Stack.
001D15r 3                       ;
001D15r 3                       ; See INPUT_TO_R for a discussion of this word. Uses tmp1
001D15r 3                       ; """
001D15r 3               
001D15r 3               xt_r_to_input:
001D15r 3               
001D15r 3                               ; We arrive here with the return address on the top of the
001D15r 3                               ; 65c02's stack. We need to move it out of the way first
001D15r 3  68                           pla
001D16r 3  85 rr                        sta tmp1
001D18r 3  68                           pla
001D19r 3  85 rr                        sta tmp1+1
001D1Br 3               
001D1Br 3                               ; This assumes that insrc is the first of eight bytes and
001D1Br 3                               ; toin+1 the last in the sequence we want to save from the Zero
001D1Br 3                               ; Page. Since we went in reverse order, insrc is now on the top
001D1Br 3                               ; of the Return Stack.
001D1Br 3  A0 00                        ldy #0
001D1Dr 3               @loop:
001D1Dr 3  68                           pla
001D1Er 3  99 rr rr                     sta insrc,y
001D21r 3  C8                           iny
001D22r 3  C0 08                        cpy #8
001D24r 3  D0 F7                        bne @loop
001D26r 3               
001D26r 3                               ; Restore address for return jump
001D26r 3  A5 rr                        lda tmp1+1
001D28r 3  48                           pha
001D29r 3  A5 rr                        lda tmp1
001D2Br 3  48                           pha
001D2Cr 3               
001D2Cr 3  60           z_r_to_input: 	rts
001D2Dr 3               
001D2Dr 3               
001D2Dr 3               
001D2Dr 3               ; ## RECURSE ( -- ) "Copy recursive call to word being defined"
001D2Dr 3               ; ## "recurse"  auto  ANS core
001D2Dr 3                       ; """https://forth-standard.org/standard/core/RECURSE
001D2Dr 3                       ;
001D2Dr 3                       ; This word may not be natively compiled
001D2Dr 3                       ; """
001D2Dr 3               
001D2Dr 3               xt_recurse:
001D2Dr 3                               ; The whole routine amounts to compiling a reference to
001D2Dr 3                               ; the word that is being compiled. First, we save the JSR
001D2Dr 3                               ; instruction
001D2Dr 3  A0 00                        ldy #0
001D2Fr 3               
001D2Fr 3  A9 20                        lda #$20        ; opcode for JSR
001D31r 3  91 rr                        sta (cp),y
001D33r 3  C8                           iny
001D34r 3               
001D34r 3                               ; Next, we save the LSB and MSB of the xt of the word
001D34r 3                               ; we are currently working on. We first need to see if
001D34r 3                               ; WORKWORD has the nt (: started the word) or the
001D34r 3                               ; xt (:NONAME started the word). Bit 6 in status tells us.
001D34r 3  24 rr                        bit status
001D36r 3  70 0C                        bvs @nt_in_workword
001D38r 3               
001D38r 3                               ; This is a special :NONAME word. Just copy the xt
001D38r 3                               ; from WORKWORD into the dictionary.
001D38r 3  A5 rr                        lda workword
001D3Ar 3  91 rr                        sta (cp),y
001D3Cr 3  C8                           iny
001D3Dr 3  A5 rr                        lda workword+1
001D3Fr 3  91 rr                        sta (cp),y
001D41r 3  C8                           iny
001D42r 3  80 1B                        bra @update_cp
001D44r 3               
001D44r 3               @nt_in_workword:
001D44r 3                               ; This is a regular : word, so the xt is four bytes down
001D44r 3                               ; from the nt which we saved in WORKWORD. We could probably
001D44r 3                               ; use NAME>INT here but this is going to be faster, and
001D44r 3                               ; fast counts with recursion
001D44r 3  A5 rr                        lda workword            ; LSB
001D46r 3  18                           clc
001D47r 3  69 04                        adc #4
001D49r 3  85 rr                        sta tmp1
001D4Br 3  A5 rr                        lda workword+1          ; MSB
001D4Dr 3  69 00                        adc #0
001D4Fr 3  85 rr                        sta tmp1+1
001D51r 3               
001D51r 3  B2 rr                        lda (tmp1)
001D53r 3  91 rr                        sta (cp),y
001D55r 3  5A                           phy
001D56r 3  A0 01                        ldy #1
001D58r 3  B1 rr                        lda (tmp1),y
001D5Ar 3  7A                           ply
001D5Br 3  C8                           iny
001D5Cr 3  91 rr                        sta (cp),y
001D5Er 3  C8                           iny
001D5Fr 3               
001D5Fr 3               @update_cp:
001D5Fr 3  98                           tya
001D60r 3  18                           clc
001D61r 3  65 rr                        adc cp
001D63r 3  85 rr                        sta cp
001D65r 3  90 02                        bcc @done
001D67r 3  E6 rr                        inc cp+1
001D69r 3               @done:
001D69r 3  60           z_recurse:      rts
001D6Ar 3               
001D6Ar 3               
001D6Ar 3               
001D6Ar 3               ; ## REFILL ( -- f ) "Refill the input buffer"
001D6Ar 3               ; ## "refill"  tested  ANS core ext
001D6Ar 3                       ; """https://forth-standard.org/standard/core/REFILL
001D6Ar 3                       ; Attempt to fill the input buffer from the input source, returning
001D6Ar 3                       ; a true flag if successful. When the input source is the user input
001D6Ar 3                       ; device, attempt to receive input into the terminal input buffer. If
001D6Ar 3                       ; successful, make the result the input buffer, set >IN to zero, and
001D6Ar 3                       ; return true. Receipt of a line containing no characters is considered
001D6Ar 3                       ; successful. If there is no input available from the current input
001D6Ar 3                       ; source, return false. When the input source is a string from EVALUATE,
001D6Ar 3                       ; return false and perform no other action." See
001D6Ar 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001D6Ar 3                       ; and Conklin & Rather p. 156. Note we don't have to care about blocks
001D6Ar 3                       ; because REFILL is never used on blocks - Tali is able to evaluate the
001D6Ar 3                       ; entire block as a 1024 byte string.
001D6Ar 3                       ; """"
001D6Ar 3               
001D6Ar 3               xt_refill:
001D6Ar 3                               ; Get input source from SOURCE-ID. This is an
001D6Ar 3                               ; optimized version of a subroutine jump to SOURCE-ID
001D6Ar 3  A5 rr                        lda insrc               ; cheat: We only check LSB
001D6Cr 3  D0 2D                        bne @src_not_kbd
001D6Er 3               
001D6Er 3                               ; SOURCE-ID of zero means we're getting stuff from the keyboard
001D6Er 3                               ; with ACCEPT, which wants the address of the current input
001D6Er 3                               ; buffer NOS and the max number of characters to accept TOS
001D6Er 3  CA                           dex
001D6Fr 3  CA                           dex
001D70r 3  CA                           dex
001D71r 3  CA                           dex
001D72r 3               
001D72r 3  A5 rr                        lda cib                 ; address of CIB is NOS
001D74r 3  95 02                        sta 2,x
001D76r 3  A5 rr                        lda cib+1
001D78r 3  95 03                        sta 3,x
001D7Ar 3               
001D7Ar 3  64 rr                        stz ciblen              ; go in with empty buffer
001D7Cr 3  64 rr                        stz ciblen+1
001D7Er 3               
001D7Er 3  A9 FF                        lda #bsize              ; max number of chars is TOS
001D80r 3  95 00                        sta 0,x
001D82r 3  74 01                        stz 1,x                 ; cheat: We only accept max 255
001D84r 3               
001D84r 3  20 rr rr                     jsr xt_accept           ; ( addr n1 -- n2)
001D87r 3               
001D87r 3                               ; ACCEPT returns the number of characters accepted, which
001D87r 3                               ; belong in CIBLEN
001D87r 3  B5 00                        lda 0,x
001D89r 3  85 rr                        sta ciblen
001D8Br 3  B5 01                        lda 1,x
001D8Dr 3  85 rr                        sta ciblen+1            ; though we only accept 255 chars
001D8Fr 3               
001D8Fr 3                               ; make >IN point to beginning of buffer
001D8Fr 3  64 rr                        stz toin
001D91r 3  64 rr                        stz toin+1
001D93r 3               
001D93r 3  A9 FF                        lda #$FF                ; overwrite with TRUE flag
001D95r 3  95 00                        sta 0,x
001D97r 3  95 01                        sta 1,x
001D99r 3               
001D99r 3  80 10                        bra @done
001D9Br 3               
001D9Br 3               @src_not_kbd:
001D9Br 3                               ; If SOURCE-ID doesn't return a zero, it must be a string in
001D9Br 3                               ; memory or a file (remember, no blocks in this version).
001D9Br 3                               ; If source is a string, we were given the flag -1 ($FFFF)
001D9Br 3  1A                           inc
001D9Cr 3  D0 08                        bne @src_not_string
001D9Er 3               
001D9Er 3                               ; Simply return FALSE flag as per specification
001D9Er 3  CA                           dex
001D9Fr 3  CA                           dex
001DA0r 3  74 00                        stz 0,x
001DA2r 3  74 01                        stz 1,x
001DA4r 3               
001DA4r 3  80 05                        bra z_refill
001DA6r 3               
001DA6r 3               @src_not_string:
001DA6r 3                               ; Since we don't have blocks, this must mean that we are trying
001DA6r 3                               ; to read from a file. However, we don't have files yet, so we
001DA6r 3                               ; report an error and jump to ABORT.
001DA6r 3  A9 01                        lda #err_badsource
001DA8r 3  4C rr rr                     jmp error
001DABr 3               @done:
001DABr 3  60           z_refill:       rts
001DACr 3               
001DACr 3               
001DACr 3               
001DACr 3               ; ## REPEAT (C: orig dest -- ) ( -- ) "Loop flow control"
001DACr 3               ; ## "repeat"  auto  ANS core
001DACr 3                       ; """http://forth-standard.org/standard/core/REPEAT"""
001DACr 3               
001DACr 3               xt_repeat:
001DACr 3                               ; Run again first
001DACr 3  20 rr rr                     jsr xt_again
001DAFr 3               
001DAFr 3                               ; Stuff HERE in for the branch address
001DAFr 3                               ; to get out of the loop
001DAFr 3  20 rr rr                     jsr xt_here
001DB2r 3  20 rr rr                     jsr xt_swap
001DB5r 3  20 rr rr                     jsr xt_store
001DB8r 3               
001DB8r 3  60           z_repeat:       rts
001DB9r 3               
001DB9r 3               
001DB9r 3               
001DB9r 3               ; ## RIGHT_BRACKET ( -- ) "Enter the compile state"
001DB9r 3               ; ## "]"  auto  ANS core
001DB9r 3                       ; """https://forth-standard.org/standard/right-bracket
001DB9r 3                       ; This is an immediate word.
001DB9r 3                       ; """
001DB9r 3               xt_right_bracket:
001DB9r 3  A9 FF                        lda #$FF
001DBBr 3  85 rr                        sta state
001DBDr 3  85 rr                        sta state+1
001DBFr 3               z_right_bracket:
001DBFr 3  60                           rts
001DC0r 3               
001DC0r 3               
001DC0r 3               ; ## ROOT_WORDLIST ( -- u ) "WID for the Root (minimal) wordlist"
001DC0r 3               ; ## "root-wordlist"  tested  Tali Editor
001DC0r 3               xt_root_wordlist:
001DC0r 3  CA                           dex             ; The WID for the Root wordlist is 3.
001DC1r 3  CA                           dex
001DC2r 3  A9 03                        lda #3
001DC4r 3  95 00                        sta 0,x
001DC6r 3  74 01                        stz 1,x
001DC8r 3               
001DC8r 3               z_root_wordlist:
001DC8r 3  60                           rts
001DC9r 3               
001DC9r 3               
001DC9r 3               ; ## ROT ( a b c -- b c a ) "Rotate first three stack entries downwards"
001DC9r 3               ; ## "rot"  auto  ANS core
001DC9r 3                       ; """https://forth-standard.org/standard/core/ROT
001DC9r 3                       ; Remember "R for 'Revolution'" - the bottom entry comes out
001DC9r 3                       ; on top!
001DC9r 3                       ; """
001DC9r 3               
001DC9r 3               xt_rot:
001DC9r 3  20 rr rr                     jsr underflow_3
001DCCr 3               
001DCCr 3  B4 05                        ldy 5,x         ; MSB first
001DCEr 3  B5 03                        lda 3,x
001DD0r 3  95 05                        sta 5,x
001DD2r 3  B5 01                        lda 1,x
001DD4r 3  95 03                        sta 3,x
001DD6r 3  94 01                        sty 1,x
001DD8r 3               
001DD8r 3  B4 04                        ldy 4,x         ; LSB next
001DDAr 3  B5 02                        lda 2,x
001DDCr 3  95 04                        sta 4,x
001DDEr 3  B5 00                        lda 0,x
001DE0r 3  95 02                        sta 2,x
001DE2r 3  94 00                        sty 0,x
001DE4r 3               
001DE4r 3  60           z_rot:          rts
001DE5r 3               
001DE5r 3               
001DE5r 3               
001DE5r 3               ; ## RSHIFT ( x u -- x ) "Shift TOS to the right"
001DE5r 3               ; ## "rshift"  auto  ANS core
001DE5r 3                       ; """https://forth-standard.org/standard/core/RSHIFT"""
001DE5r 3               xt_rshift:
001DE5r 3  20 rr rr                     jsr underflow_2
001DE8r 3               
001DE8r 3                               ; We shift maximal by 16 bits, mask everything else
001DE8r 3  B5 00                        lda 0,x
001DEAr 3  29 0F                        and #%00001111
001DECr 3  F0 08                        beq @done               ; if 0 shifts, quit
001DEEr 3               
001DEEr 3  A8                           tay
001DEFr 3               @loop:
001DEFr 3  56 03                        lsr 3,x
001DF1r 3  76 02                        ror 2,x
001DF3r 3  88                           dey
001DF4r 3  D0 F9                        bne @loop
001DF6r 3               @done:
001DF6r 3  E8                           inx
001DF7r 3  E8                           inx
001DF8r 3               
001DF8r 3  60           z_rshift:       rts
001DF9r 3               
001DF9r 3               
001DF9r 3               ; ## S_BACKSLASH_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
001DF9r 3               ; ## "s\""  auto  ANS core
001DF9r 3                       ; """https://forth-standard.org/standard/core/Seq
001DF9r 3                       ; Store address and length of string given, returning ( addr u ).
001DF9r 3                       ; ANS core claims this is compile-only, but the file set expands it
001DF9r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
001DF9r 3                       ; are evil. We follow general usage. This is just like S" except
001DF9r 3                       ; that it allows for some special escaped characters.
001DF9r 3                       ; """
001DF9r 3               
001DF9r 3               xt_s_backslash_quote:
001DF9r 3                               ; tmp2 will be used to determine if we are handling
001DF9r 3                               ; escaped characters or not. In this case, we are,
001DF9r 3                               ; so set it to $FF (the upper byte will be used to
001DF9r 3                               ; determine if we just had a \ and the next character
001DF9r 3                               ; needs to be modifed as an escaped character).
001DF9r 3  A9 FF                        lda #$FF
001DFBr 3  85 rr                        sta tmp2
001DFDr 3  64 rr                        stz tmp2+1
001DFFr 3               
001DFFr 3                               ; Now that the flag is set, jump into s_quote to process
001DFFr 3                               ; the string.
001DFFr 3  20 rr rr                     jsr s_quote_start
001E02r 3               @done:
001E02r 3               z_s_backslash_quote:
001E02r 3  60                           rts
001E03r 3               
001E03r 3               
001E03r 3               ; This is a helper function for s_backslash_quote to convert a character
001E03r 3               ; from ASCII to the corresponding hex value, eg 'F'->15
001E03r 3               convert_hex_value:
001E03r 3               
001E03r 3  C9 41                cmp #'A'
001E05r 3  90 07                bcc @digit
001E07r 3               
001E07r 3                       ; It's A-F
001E07r 3  29 DF                and #$DF                ; Make it uppercase.
001E09r 3  38                   sec
001E0Ar 3  E9 37                sbc #'7'                 ; gives value 10 for 'A'
001E0Cr 3  80 03                bra @done
001E0Er 3               
001E0Er 3               @digit:
001E0Er 3                       ; It's 0-9
001E0Er 3  38                   sec
001E0Fr 3  E9 30                sbc #'0'
001E11r 3               
001E11r 3               @done:
001E11r 3  60                   rts
001E12r 3               
001E12r 3               
001E12r 3               
001E12r 3               ; ## SEARCH_WORDLIST ( caddr u wid -- 0 | xt 1 | xt -1) "Search for a word in a wordlist"
001E12r 3               ; ## "search-wordlist" auto ANS search
001E12r 3                       ; """https://forth-standard.org/standard/search/SEARCH_WORDLIST"""
001E12r 3               
001E12r 3               xt_search_wordlist:
001E12r 3  20 rr rr                     jsr underflow_3
001E15r 3               
001E15r 3                               ; Set up tmp1 with the wordlist indicated by wid
001E15r 3                               ; on the stack. Start by putting the base address
001E15r 3                               ; of the wordlists in tmp2.
001E15r 3  A5 rr                        lda up
001E17r 3  18                           clc
001E18r 3  69 06                        adc #wordlists_offset
001E1Ar 3  85 rr                        sta tmp2
001E1Cr 3  A5 rr                        lda up+1
001E1Er 3  69 00                        adc #0          ; Adding carry
001E20r 3  85 rr                        sta tmp2+1
001E22r 3               
001E22r 3                               ; Add the wid (in cells) to the base address.
001E22r 3  B5 00                        lda 0,x
001E24r 3  0A                           asl             ; Convert wid to offset in cells (x2)
001E25r 3  65 rr                        adc tmp2
001E27r 3  85 rr                        sta tmp2
001E29r 3  90 02                        bcc @1
001E2Br 3  E6 rr                        inc tmp2+1      ; Propagate carry if needed.
001E2Dr 3               
001E2Dr 3                               ; tmp2 now holds the address of the dictionary pointer
001E2Dr 3                               ; for the given wordlist.
001E2Dr 3               @1:
001E2Dr 3                               ; Remove the wid from the stack.
001E2Dr 3  E8                           inx
001E2Er 3  E8                           inx
001E2Fr 3               
001E2Fr 3                               ; check for special case of an empty string (length zero)
001E2Fr 3  B5 00                        lda 0,x
001E31r 3  15 01                        ora 1,x
001E33r 3  D0 03                        bne @check_wordlist
001E35r 3  4C rr rr                     jmp @done
001E38r 3               
001E38r 3               @check_wordlist:
001E38r 3                               ; Check for special case of empty wordlist
001E38r 3                               ; (dictionary pointer, in tmp2, is 0)
001E38r 3  A5 rr                        lda tmp2
001E3Ar 3  05 rr                        ora tmp2+1
001E3Cr 3  D0 03                        bne @have_string
001E3Er 3  4C rr rr                     jmp @done
001E41r 3               
001E41r 3               @have_string:
001E41r 3                               ; set up first loop iteration
001E41r 3  B2 rr                        lda (tmp2)              ; nt of first word in Dictionary
001E43r 3  85 rr                        sta tmp1
001E45r 3               
001E45r 3  E6 rr                        inc tmp2                ; Move to the upper byte
001E47r 3  D0 02                        bne @2
001E49r 3  E6 rr                        inc tmp2+1
001E4Br 3               @2:
001E4Br 3  B2 rr                        lda (tmp2)
001E4Dr 3  85 rr                        sta tmp1+1
001E4Fr 3               
001E4Fr 3                               ; Reuse tmp2 to hold the address of the mystery string.
001E4Fr 3  B5 02                        lda 2,x                 ; Address of mystery string
001E51r 3  85 rr                        sta tmp2
001E53r 3  B5 03                        lda 3,x
001E55r 3  85 rr                        sta tmp2+1
001E57r 3               
001E57r 3               @loop:
001E57r 3                               ; first quick test: Are strings the same length?
001E57r 3  B2 rr                        lda (tmp1)
001E59r 3  D5 00                        cmp 0,x
001E5Br 3  D0 7B                        bne @next_entry
001E5Dr 3               
001E5Dr 3               @compare_string:
001E5Dr 3                               ; are the same length, so we now have to compare each
001E5Dr 3                               ; character
001E5Dr 3               
001E5Dr 3                               ; second quick test: Is the first character the same?
001E5Dr 3  B2 rr                        lda (tmp2)      ; first character of mystery string
001E5Fr 3               
001E5Fr 3                               ; Lowercase the incoming charcter.
001E5Fr 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
001E61r 3  B0 07                        bcs @compare_first
001E63r 3  C9 41                        cmp #$41        ; ASCII 'A'
001E65r 3  90 03                        bcc @compare_first
001E67r 3               
001E67r 3                               ; An uppercase letter has been located.  Make it
001E67r 3                               ; lowercase.
001E67r 3  18                           clc
001E68r 3  69 20                        adc #$20
001E6Ar 3               
001E6Ar 3               @compare_first:
001E6Ar 3  A0 08                        ldy #8          ; Offset in nt to name
001E6Cr 3  D1 rr                        cmp (tmp1),y    ; first character of current word
001E6Er 3  D0 68                        bne @next_entry
001E70r 3               
001E70r 3                               ; string length are the same and the first character is the
001E70r 3                               ; same. If the length of the string is 1, we're already done
001E70r 3  B5 00                        lda 0,x
001E72r 3  3A                           dec
001E73r 3  F0 2C                        beq @success
001E75r 3               
001E75r 3                               ; No such luck: The strings are the same length and the first
001E75r 3                               ; char is the same, but the word is more than one char long.
001E75r 3                               ; So we suck it up and compare every single character. We go
001E75r 3                               ; from back to front, because words like CELLS and CELL+ would
001E75r 3                               ; take longer otherwise. We can also shorten the loop by one
001E75r 3                               ; because we've already compared the first char.
001E75r 3               
001E75r 3                               ; The string of the word we're testing against is 8 bytes down
001E75r 3  A5 rr                        lda tmp1
001E77r 3  48                           pha             ; Preserve tmp1 on the return stack.
001E78r 3  18                           clc
001E79r 3  69 08                        adc #8
001E7Br 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
001E7Dr 3  A5 rr                        lda tmp1+1
001E7Fr 3  48                           pha             ; Preserve tmp1+1 on the return stack.
001E80r 3  69 00                        adc #0          ; we only need the carry
001E82r 3  85 rr                        sta tmp1+1
001E84r 3               
001E84r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
001E86r 3  88                           dey
001E87r 3               
001E87r 3               @string_loop:
001E87r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
001E89r 3               
001E89r 3                               ; Lowercase the incoming charcter.
001E89r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
001E8Br 3  B0 07                        bcs @check_char
001E8Dr 3  C9 41                        cmp #$41        ; ASCII 'A'
001E8Fr 3  90 03                        bcc @check_char
001E91r 3               
001E91r 3                               ; An uppercase letter has been located.  Make it
001E91r 3                               ; lowercase.
001E91r 3  18                           clc
001E92r 3  69 20                        adc #$20
001E94r 3               @check_char:
001E94r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
001E96r 3  D0 3A                        bne @next_entry_tmp1
001E98r 3               
001E98r 3  88                           dey
001E99r 3  D0 EC                        bne @string_loop
001E9Br 3               
001E9Br 3               @success_tmp1:
001E9Br 3  68                           pla             ; Restore tmp1 from the return stack.
001E9Cr 3  85 rr                        sta tmp1+1
001E9Er 3  68                           pla
001E9Fr 3  85 rr                        sta tmp1
001EA1r 3               
001EA1r 3               @success:
001EA1r 3                               ; The strings match. Drop the count and put correct nt TOS
001EA1r 3  E8                           inx
001EA2r 3  E8                           inx
001EA3r 3  A5 rr                        lda tmp1
001EA5r 3  95 00                        sta 0,x
001EA7r 3  A5 rr                        lda tmp1+1
001EA9r 3  95 01                        sta 1,x
001EABr 3               
001EABr 3                               ; Change the nt into an xt, but save a copy of the nt
001EABr 3                               ; to look up whether the word is immediate or not.
001EABr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001EAEr 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001EB1r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001EB4r 3               
001EB4r 3  A0 00                        ldy #0                  ; Prepare flag
001EB6r 3               
001EB6r 3                               ; The flags are in the second byte of the header
001EB6r 3  F6 00                        inc 0,x
001EB8r 3  D0 02                        bne @3
001EBAr 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
001EBCr 3               @3:
001EBCr 3  A1 00                        lda (0,x)               ; ( xt char )
001EBEr 3  29 04                        and #IM
001EC0r 3  D0 08                        bne @immediate          ; bit set, we're immediate
001EC2r 3               
001EC2r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
001EC4r 3  95 00                        sta 0,x
001EC6r 3  95 01                        sta 1,x
001EC8r 3  80 28                        bra @done_nodrop
001ECAr 3               
001ECAr 3               @immediate:
001ECAr 3  A9 01                        lda #1                  ; We're immediate, return 1
001ECCr 3  95 00                        sta 0,x
001ECEr 3  74 01                        stz 1,x
001ED0r 3               
001ED0r 3  80 20                        bra @done_nodrop
001ED2r 3               
001ED2r 3               @next_entry_tmp1:
001ED2r 3  68                           pla             ; Restore tmp1 from the return stack.
001ED3r 3  85 rr                        sta tmp1+1
001ED5r 3  68                           pla
001ED6r 3  85 rr                        sta tmp1
001ED8r 3               @next_entry:
001ED8r 3                               ; Not the same, so we get the next word. Next header
001ED8r 3                               ; address is two bytes down
001ED8r 3  A0 02                        ldy #2
001EDAr 3  B1 rr                        lda (tmp1),y
001EDCr 3  48                           pha
001EDDr 3  C8                           iny
001EDEr 3  B1 rr                        lda (tmp1),y
001EE0r 3  85 rr                        sta tmp1+1
001EE2r 3  68                           pla
001EE3r 3  85 rr                        sta tmp1
001EE5r 3               
001EE5r 3                               ; If we got a zero, we've walked the whole Dictionary and
001EE5r 3                               ; return as a failure, otherwise try again
001EE5r 3  05 rr                        ora tmp1+1
001EE7r 3  F0 03                        beq @fail_done
001EE9r 3  4C rr rr                     jmp @loop
001EECr 3               
001EECr 3               @fail_done:
001EECr 3  74 02                        stz 2,x         ; failure flag
001EEEr 3  74 03                        stz 3,x
001EF0r 3               @done:
001EF0r 3  E8                           inx
001EF1r 3  E8                           inx
001EF2r 3               @done_nodrop:
001EF2r 3               z_search_wordlist:
001EF2r 3  60                           rts
001EF3r 3               
001EF3r 3               
001EF3r 3               
001EF3r 3               ; ## SEE ( "name" -- ) "Print information about a Forth word"
001EF3r 3               ; ## "see" tested  ANS tools
001EF3r 3                       ; """https://forth-standard.org/standard/tools/SEE
001EF3r 3                       ; SEE takes the name of a word and prints its name token (nt),
001EF3r 3                       ; execution token (xt), size in bytes, flags used, and then dumps the
001EF3r 3                       ; code and disassembles it.
001EF3r 3                       ; """
001EF3r 3               
001EF3r 3               xt_see:
001EF3r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
001EF6r 3  20 rr rr                     jsr xt_find_name        ; ( nt | 0 )
001EF9r 3               
001EF9r 3                               ; If we got back a zero we don't know that word and so we quit
001EF9r 3                               ; with an error
001EF9r 3  B5 00                        lda 0,x
001EFBr 3  15 01                        ora 1,x
001EFDr 3  D0 05                        bne @1
001EFFr 3               
001EFFr 3  A9 05                        lda #err_noname
001F01r 3  4C rr rr                     jmp error
001F04r 3               @1:
001F04r 3  20 rr rr                     jsr xt_cr
001F07r 3               
001F07r 3                               ; We have a legal word, so let's get serious. Save the current
001F07r 3                               ; number base and use hexadecimal instead.
001F07r 3  A5 rr                        lda base
001F09r 3  48                           pha
001F0Ar 3  20 rr rr                     jsr xt_hex
001F0Dr 3               
001F0Dr 3  A9 0A                        lda #str_see_nt
001F0Fr 3  20 rr rr                     jsr print_string_no_lf
001F12r 3               
001F12r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001F15r 3  20 rr rr                     jsr xt_u_dot
001F18r 3  20 rr rr                     jsr xt_space            ; ( nt )
001F1Br 3               
001F1Br 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
001F1Er 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001F21r 3               
001F21r 3  A9 0B                        lda #str_see_xt
001F23r 3  20 rr rr                     jsr print_string_no_lf
001F26r 3               
001F26r 3  20 rr rr                     jsr xt_dup              ; ( nt xt xt )
001F29r 3  20 rr rr                     jsr xt_u_dot
001F2Cr 3  20 rr rr                     jsr xt_cr               ; ( nt xt )
001F2Fr 3               
001F2Fr 3                               ; We print letters for flags and then later follow it with 1 or
001F2Fr 3                               ; 0 to mark if which flag is set
001F2Fr 3  A9 09                        lda #str_see_flags
001F31r 3  20 rr rr                     jsr print_string_no_lf
001F34r 3               
001F34r 3  20 rr rr                     jsr xt_over             ; ( nt xt nt )
001F37r 3  20 rr rr                     jsr xt_one_plus         ; ( nt xt nt+1 )
001F3Ar 3  20 rr rr                     jsr xt_fetch            ; ( nt xt flags )
001F3Dr 3               
001F3Dr 3  B5 00                        lda 0,x
001F3Fr 3               
001F3Fr 3                               ; This is crude, but for the moment it is good enough
001F3Fr 3  A0 06                        ldy #6                  ; Not all bits are used
001F41r 3               @flag_loop:
001F41r 3  48                           pha
001F42r 3  29 01                        and #%00000001
001F44r 3  18                           clc
001F45r 3  69 30                        adc #$30                ; ASCII "0"
001F47r 3  20 rr rr                     jsr emit_a
001F4Ar 3  20 rr rr                     jsr xt_space
001F4Dr 3               
001F4Dr 3  68                           pla
001F4Er 3  6A                           ror                     ; Next flag
001F4Fr 3               
001F4Fr 3  88                           dey
001F50r 3  D0 EF                        bne @flag_loop
001F52r 3               
001F52r 3  20 rr rr                     jsr xt_cr
001F55r 3               
001F55r 3  E8                           inx
001F56r 3  E8                           inx                     ; ( nt xt )
001F57r 3               
001F57r 3                               ; Figure out the size
001F57r 3  A9 0C                        lda #str_see_size
001F59r 3  20 rr rr                     jsr print_string_no_lf
001F5Cr 3               
001F5Cr 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001F5Fr 3  20 rr rr                     jsr xt_wordsize         ; ( xt u )
001F62r 3  20 rr rr                     jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
001F65r 3  20 rr rr                     jsr xt_decimal
001F68r 3  20 rr rr                     jsr xt_u_dot            ; ( xt u )
001F6Br 3  20 rr rr                     jsr xt_hex
001F6Er 3  20 rr rr                     jsr xt_cr
001F71r 3               
001F71r 3                               ; Dump hex and disassemble
001F71r 3  20 rr rr                     jsr xt_two_dup          ; ( xt u xt u )
001F74r 3  20 rr rr                     jsr xt_dump
001F77r 3  20 rr rr                     jsr xt_cr
001F7Ar 3  20 rr rr                     jsr xt_disasm
001F7Dr 3               
001F7Dr 3  68                           pla
001F7Er 3  85 rr                        sta base
001F80r 3               
001F80r 3  60           z_see:          rts
001F81r 3               
001F81r 3               
001F81r 3               
001F81r 3               ; ## SET_CURRENT ( wid -- ) "Set the compilation wordlist"
001F81r 3               ; ## "set-current" auto ANS search
001F81r 3                       ; """https://forth-standard.org/standard/search/SET-CURRENT"""
001F81r 3               
001F81r 3               xt_set_current:
001F81r 3  20 rr rr                     jsr underflow_1
001F84r 3               
001F84r 3                               ; Save the value from the data stack.
001F84r 3  A0 04                        ldy #current_offset
001F86r 3  B5 00                        lda 0,x         ; CURRENT is byte variable
001F88r 3  91 rr                        sta (up),y      ; so only the LSB is used.
001F8Ar 3               
001F8Ar 3  E8                           inx
001F8Br 3  E8                           inx
001F8Cr 3               
001F8Cr 3  60           z_set_current:  rts
001F8Dr 3               
001F8Dr 3               
001F8Dr 3               
001F8Dr 3               ; ## SET_ORDER ( wid_n .. wid_1 n -- ) "Set the current search order"
001F8Dr 3               ; ## "set-order" auto ANS search
001F8Dr 3                       ; """https://forth-standard.org/standard/search/SET-ORDER"""
001F8Dr 3               
001F8Dr 3               xt_set_order:
001F8Dr 3                               ; Test for -1 TOS
001F8Dr 3  A9 FF                        lda #$FF
001F8Fr 3  D5 01                        cmp 1,x
001F91r 3  D0 12                        bne @start
001F93r 3  D5 00                        cmp 0,x
001F95r 3  D0 0E                        bne @start
001F97r 3               
001F97r 3                               ; There is a -1 TOS.  Replace it with the default
001F97r 3                               ; search order, which is just the FORTH-WORDLIST.
001F97r 3  CA                           dex             ; Make room for the count.
001F98r 3  CA                           dex
001F99r 3  74 03                        stz 3,x         ; ROOT-WORDLIST is 3
001F9Br 3  A9 03                        lda #3
001F9Dr 3  95 02                        sta 2,x
001F9Fr 3  74 01                        stz 1,x         ; Count is 1.
001FA1r 3  A9 01                        lda #1
001FA3r 3  95 00                        sta 0,x
001FA5r 3               
001FA5r 3                               ; Continue processing with ( forth-wordlist 1 -- )
001FA5r 3               @start:
001FA5r 3                               ; Set #ORDER - the number of wordlists in the search order.
001FA5r 3  A0 1E                        ldy #num_order_offset
001FA7r 3  B5 00                        lda 0,x
001FA9r 3  91 rr                        sta (up),y      ; #ORDER is a byte variable.
001FABr 3  85 rr                        sta tmp1        ; Save a copy for zero check and looping.
001FADr 3                                               ; Only the low byte is saved in tmp1 as
001FADr 3                                               ; only 8 wordlists are allowed.
001FADr 3               
001FADr 3  E8                           inx             ; Drop the count off the data stack.
001FAEr 3  E8                           inx
001FAFr 3               
001FAFr 3                               ; Check if there are zero wordlists.
001FAFr 3  A5 rr                        lda tmp1
001FB1r 3  F0 0D                        beq @done       ; If zero, there are no wordlists.
001FB3r 3               
001FB3r 3                               ; Move the wordlist ids from the data stack to the search order.
001FB3r 3  A0 1F                        ldy #search_order_offset
001FB5r 3               @loop:
001FB5r 3                               ; Move one wordlist id over into the search order.
001FB5r 3  B5 00                        lda 0,x         ; The search order is a byte array
001FB7r 3  91 rr                        sta (up),y      ; so only save the LSB
001FB9r 3  C8                           iny
001FBAr 3               
001FBAr 3                               ; Remove it from the data stack.
001FBAr 3  E8                           inx
001FBBr 3  E8                           inx
001FBCr 3               
001FBCr 3                               ; See if that was the last one to process (first in the list).
001FBCr 3  C6 rr                        dec tmp1
001FBEr 3  D0 F5                        bne @loop
001FC0r 3               
001FC0r 3               @done:
001FC0r 3  60           z_set_order:    rts
001FC1r 3               
001FC1r 3               
001FC1r 3               
001FC1r 3               
001FC1r 3               ; ## S_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
001FC1r 3               ; ## "s""  auto  ANS core
001FC1r 3                       ; """https://forth-standard.org/standard/core/Sq
001FC1r 3                       ; Store address and length of string given, returning ( addr u ).
001FC1r 3                       ; ANS core claims this is compile-only, but the file set expands it
001FC1r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
001FC1r 3                       ; are evil. We follow general usage.
001FC1r 3                       ;
001FC1r 3                       ; Can also be realized as
001FC1r 3                       ;     : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE
001FC1r 3                       ; but it is used so much we want it in code.
001FC1r 3                       ; """
001FC1r 3               
001FC1r 3               xt_s_quote:
001FC1r 3                               ; tmp2 will be used to determine if we are handling
001FC1r 3                               ; escaped characters or not.  In this case, we are
001FC1r 3                               ; not, so set it to zero.
001FC1r 3  64 rr                        stz tmp2
001FC3r 3  64 rr                        stz tmp2+1
001FC5r 3               
001FC5r 3               s_quote_start:
001FC5r 3                               ; Make room on the data stack for the address.
001FC5r 3  CA                           dex
001FC6r 3  CA                           dex
001FC7r 3                               ; Make room on the data stack for the count.
001FC7r 3  CA                           dex
001FC8r 3  CA                           dex
001FC9r 3               
001FC9r 3                               ; Put a jmp over the string data with address to be filled
001FC9r 3                               ; in later.
001FC9r 3  A9 4C                        lda #$4C
001FCBr 3  20 rr rr                     jsr cmpl_a
001FCEr 3               
001FCEr 3                               ; Address to be filled in later, just use $4C for the moment
001FCEr 3  20 rr rr                     jsr cmpl_a
001FD1r 3  20 rr rr                     jsr cmpl_a
001FD4r 3               
001FD4r 3                               ; Save the current value of HERE on the data stack for the
001FD4r 3                               ; address of the string.
001FD4r 3  A5 rr                        lda cp
001FD6r 3  95 02                        sta 2,x
001FD8r 3  A5 rr                        lda cp+1
001FDAr 3  95 03                        sta 3,x
001FDCr 3               
001FDCr 3               @savechars_loop:
001FDCr 3                               ; Start saving the string into the dictionary up to the
001FDCr 3                               ; ending double quote. First, check to see if the input
001FDCr 3                               ; buffer is empty.
001FDCr 3  A5 rr                        lda toin+1              ; MSB
001FDEr 3  C5 rr                        cmp ciblen+1
001FE0r 3  90 2A                        bcc @input_fine         ; unsigned comparison
001FE2r 3               
001FE2r 3  A5 rr                        lda toin                ; LSB
001FE4r 3  C5 rr                        cmp ciblen
001FE6r 3  90 24                        bcc @input_fine
001FE8r 3               
001FE8r 3                               ; Input buffer is empty. Refill it. Refill calls accept,
001FE8r 3                               ; which uses tmp2 and tmp3. Save and restore them.
001FE8r 3  A5 rr                        lda tmp2
001FEAr 3  48                           pha
001FEBr 3  A5 rr                        lda tmp2+1
001FEDr 3  48                           pha
001FEEr 3  A5 rr                        lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
001FF0r 3  48                           pha
001FF1r 3               
001FF1r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
001FF4r 3               
001FF4r 3  68                           pla
001FF5r 3  85 rr                        sta tmp3
001FF7r 3  68                           pla
001FF8r 3  85 rr                        sta tmp2+1
001FFAr 3  68                           pla
001FFBr 3  85 rr                        sta tmp2
001FFDr 3               
001FFDr 3                               ; Check result of refill.
001FFDr 3  B5 00                        lda 0,x
001FFFr 3  15 01                        ora 1,x
002001r 3  D0 05                        bne @refill_ok
002003r 3               
002003r 3                               ; Something when wrong with refill.
002003r 3  A9 06                        lda #err_refill
002005r 3  4C rr rr                     jmp error
002008r 3               
002008r 3               @refill_ok:
002008r 3                               ; Remove the refill flag from the data stack.
002008r 3  E8                           inx
002009r 3  E8                           inx
00200Ar 3               
00200Ar 3                               ; For refill success, jump back up to the empty check, just in
00200Ar 3                               ; case refill gave us an empty buffer (eg. empty/blank line of
00200Ar 3                               ; input)
00200Ar 3  80 D0                        bra @savechars_loop
00200Cr 3               
00200Cr 3               @input_fine:
00200Cr 3                               ; There should be at least one valid char to use.
00200Cr 3                               ; Calculate it's address at CIB+TOIN into tmp1
00200Cr 3  A5 rr                        lda cib
00200Er 3  18                           clc
00200Fr 3  65 rr                        adc toin        ; LSB
002011r 3  85 rr                        sta tmp1
002013r 3  A5 rr                        lda cib+1
002015r 3  65 rr                        adc toin+1      ; MSB
002017r 3  85 rr                        sta tmp1+1
002019r 3               
002019r 3                               ; Get the character
002019r 3  B2 rr                        lda (tmp1)
00201Br 3               
00201Br 3                               ; Check to see if we are handling escaped characters.
00201Br 3  24 rr                        bit tmp2
00201Dr 3  30 03                        bmi @handle_escapes    ; Only checking bit 7
00201Fr 3  4C rr rr                     jmp @regular_char
002022r 3               
002022r 3               @handle_escapes:
002022r 3                               ; We are handling escaped characters.  See if we have
002022r 3                               ; already seen the backslash.
002022r 3  24 rr                        bit tmp2+1
002024r 3  30 03                        bmi @escaped
002026r 3  4C rr rr                     jmp @not_escaped
002029r 3               
002029r 3               @escaped:
002029r 3               
002029r 3                               ; We have seen a backslash (previous character). Check to see if
002029r 3                               ; we are in the middle of a \x sequence (bit 6 of tmp2+1 will
002029r 3                               ; be clear in that case )
002029r 3  70 22                        bvs @check_esc_chars
00202Br 3               
00202Br 3                               ; We are in the middle of a \x sequence. Check to see if we
00202Br 3                               ; are on the first or second digit.
00202Br 3  A9 01                        lda #1
00202Dr 3  24 rr                        bit tmp2+1
00202Fr 3  D0 10                        bne @esc_x_second_digit
002031r 3               
002031r 3                               ; First digit.
002031r 3  E6 rr                        inc tmp2+1  ; Adjust flag for second digit next time.
002033r 3  B2 rr                        lda (tmp1)  ; Get the char again.
002035r 3               
002035r 3                               ; Convert to hex
002035r 3  20 rr rr                     jsr convert_hex_value
002038r 3               
002038r 3                               ; This is the upper nybble, so move it up.
002038r 3  0A                           asl
002039r 3  0A                           asl
00203Ar 3  0A                           asl
00203Br 3  0A                           asl
00203Cr 3  85 rr                        sta tmp3    ; Save it for later.
00203Er 3  4C rr rr                     jmp @next_character
002041r 3               
002041r 3               @esc_x_second_digit:
002041r 3               
002041r 3                               ; We are on the second hex digit of a \x sequence. Clear the
002041r 3                               ; escaped character flag (because we are handling it right
002041r 3                               ; here)
002041r 3  64 rr                        stz tmp2+1
002043r 3  B2 rr                        lda (tmp1)
002045r 3               
002045r 3                               ; Convert to hex, combine with value in tmp3
002045r 3  20 rr rr                     jsr convert_hex_value
002048r 3  05 rr                        ora tmp3
00204Ar 3               
00204Ar 3  4C rr rr                     jmp @save_character
00204Dr 3               
00204Dr 3               @check_esc_chars:
00204Dr 3                               ; Clear the escaped character flag (because we are
00204Dr 3                               ; handling it right here)
00204Dr 3  64 rr                        stz tmp2+1
00204Fr 3               
00204Fr 3                               ; Process the escaped character
00204Fr 3               @check_esc_a:
00204Fr 3  C9 61                        cmp #'a'
002051r 3  D0 05                        bne @check_esc_b
002053r 3               
002053r 3                               ; BEL (ASCII value 7)
002053r 3  A9 07                        lda #7
002055r 3  4C rr rr                     jmp @save_character
002058r 3               
002058r 3               @check_esc_b:
002058r 3  C9 62                        cmp #'b'
00205Ar 3  D0 05                        bne @check_esc_e
00205Cr 3               
00205Cr 3                               ; Backspace (ASCII value 8)
00205Cr 3  A9 08                        lda #8
00205Er 3  4C rr rr                     jmp @save_character
002061r 3               
002061r 3               @check_esc_e:
002061r 3  C9 65                        cmp #'e'
002063r 3  D0 04                        bne @check_esc_f
002065r 3               
002065r 3                               ; ESC (ASCII value 27)
002065r 3  A9 1B                        lda #27
002067r 3  80 75                        bra @save_character
002069r 3               
002069r 3               @check_esc_f:
002069r 3  C9 66                        cmp #'f'
00206Br 3  D0 04                        bne @check_esc_l
00206Dr 3               
00206Dr 3                               ; FF (ASCII value 12)
00206Dr 3  A9 0C                        lda #12
00206Fr 3  80 6D                        bra @save_character
002071r 3               
002071r 3               @check_esc_l:
002071r 3  C9 6C                        cmp #'l'
002073r 3  D0 04                        bne @check_esc_m
002075r 3               
002075r 3                               ; LF (ASCII value 10)
002075r 3  A9 0A                        lda #10
002077r 3  80 65                        bra @save_character
002079r 3               
002079r 3               @check_esc_m:
002079r 3                               ; This one is not like the others because we save two
002079r 3                               ; characters
002079r 3  C9 6D                        cmp #'m'
00207Br 3  D0 09                        bne @check_esc_n
00207Dr 3               
00207Dr 3                               ; CR/LF pair (ASCII values 13, 10)
00207Dr 3  A9 0D                        lda #13
00207Fr 3  20 rr rr                     jsr cmpl_a
002082r 3  A9 0A                        lda #10
002084r 3  80 58                        bra @save_character
002086r 3               
002086r 3               @check_esc_n:
002086r 3  C9 6E                        cmp #'n'
002088r 3  D0 04                        bne @check_esc_q
00208Ar 3               
00208Ar 3                               ; newline, impl. dependant, using LF (ASCII values 10)
00208Ar 3  A9 0A                        lda #10
00208Cr 3  80 50                        bra @save_character
00208Er 3               
00208Er 3               @check_esc_q:
00208Er 3  C9 71                        cmp #'q'
002090r 3  D0 04                        bne @check_esc_r
002092r 3               
002092r 3                               ; Double quote (ASCII value 34)
002092r 3  A9 22                        lda #34
002094r 3  80 48                        bra @save_character
002096r 3               
002096r 3               @check_esc_r:
002096r 3  C9 72                        cmp #'r'
002098r 3  D0 04                        bne @check_esc_t
00209Ar 3               
00209Ar 3                               ; CR (ASCII value 13)
00209Ar 3  A9 0D                        lda #13
00209Cr 3  80 40                        bra @save_character
00209Er 3               
00209Er 3               @check_esc_t:
00209Er 3  C9 74                        cmp #'t'
0020A0r 3  D0 04                        bne @check_esc_v
0020A2r 3               
0020A2r 3                               ; Horizontal TAB (ASCII value 9)
0020A2r 3  A9 09                        lda #9
0020A4r 3  80 38                        bra @save_character
0020A6r 3               
0020A6r 3               @check_esc_v:
0020A6r 3  C9 76                        cmp #'v'
0020A8r 3  D0 04                        bne @check_esc_z
0020AAr 3               
0020AAr 3                               ; Vertical TAB (ASCII value 11)
0020AAr 3  A9 0B                        lda #11
0020ACr 3  80 30                        bra @save_character
0020AEr 3               
0020AEr 3               @check_esc_z:
0020AEr 3  C9 7A                        cmp #'z'
0020B0r 3  D0 04                        bne @check_esc_quote
0020B2r 3               
0020B2r 3                               ; NULL (ASCII value 0)
0020B2r 3  A9 00                        lda #0
0020B4r 3  80 28                        bra @save_character
0020B6r 3               
0020B6r 3               @check_esc_quote:
0020B6r 3  C9 22                        cmp #$22
0020B8r 3  D0 04                        bne @check_esc_x
0020BAr 3               
0020BAr 3                               ; Double quote (ASCII value 34)
0020BAr 3  A9 22                        lda #34
0020BCr 3  80 20                        bra @save_character
0020BEr 3               
0020BEr 3               @check_esc_x:
0020BEr 3  C9 78                        cmp #'x'
0020C0r 3  D0 06                        bne @check_esc_backslash
0020C2r 3               
0020C2r 3                               ; This one is difficult. We need to get the next TWO
0020C2r 3                               ; characters (which might require a refill in the middle)
0020C2r 3                               ; and combine them as two hex digits. We do this by
0020C2r 3                               ; clearing bit 6 of tmp2+1 to indicate we are in a digit
0020C2r 3                               ; and using bit 0 to keep track of which digit we are on.
0020C2r 3  A9 BE                        lda #$BE        ; Clear bits 6 and 0
0020C4r 3  85 rr                        sta tmp2+1
0020C6r 3  80 19                        bra @next_character
0020C8r 3               
0020C8r 3               @check_esc_backslash:
0020C8r 3  C9 5C                        cmp #$5C
0020CAr 3  D0 04                        bne @not_escaped
0020CCr 3               
0020CCr 3                               ; Backslash (ASCII value 92)
0020CCr 3  A9 5C                        lda #92
0020CEr 3  80 0E                        bra @save_character
0020D0r 3               
0020D0r 3               @not_escaped:
0020D0r 3                               ; Check for the backslash to see if we should escape
0020D0r 3                               ; the next char.
0020D0r 3  C9 5C                        cmp #$5C        ; The backslash char
0020D2r 3  D0 06                        bne @regular_char
0020D4r 3               
0020D4r 3                               ; We found a backslash.  Don't save anyhing, but set
0020D4r 3                               ; a flag (in tmp2+1) to handle the next char. We don't
0020D4r 3                               ; try to get the next char here as it may require a
0020D4r 3                               ; refill of the input buffer.
0020D4r 3  A9 FF                        lda #$FF
0020D6r 3  85 rr                        sta tmp2+1
0020D8r 3  80 07                        bra @next_character
0020DAr 3               
0020DAr 3               @regular_char:
0020DAr 3                               ; Check if the current character is the end of the string.
0020DAr 3  C9 22                        cmp #$22        ; ASCII for "
0020DCr 3  F0 0C                        beq @found_string_end
0020DEr 3               
0020DEr 3               @save_character:
0020DEr 3                               ; If we didn't reach the end of the string, compile this
0020DEr 3                               ; character into the dictionary
0020DEr 3  20 rr rr                     jsr cmpl_a
0020E1r 3               
0020E1r 3               @next_character:
0020E1r 3                               ; Move on to the next character.
0020E1r 3  E6 rr                        inc toin
0020E3r 3  D0 02                        bne @savechars_loop_longjump
0020E5r 3  E6 rr                        inc toin+1
0020E7r 3               
0020E7r 3               @savechars_loop_longjump:
0020E7r 3  4C rr rr                     jmp @savechars_loop
0020EAr 3               
0020EAr 3               @found_string_end:
0020EAr 3                               ; Use up the delimiter.
0020EAr 3  E6 rr                        inc toin
0020ECr 3  D0 02                        bne @1
0020EEr 3  E6 rr                        inc toin+1
0020F0r 3               @1:
0020F0r 3                               ; Calculate the length of the string, which is the
0020F0r 3                               ; difference between cp and the address of the start
0020F0r 3                               ; of the string (currently saved on the stack).
0020F0r 3  A5 rr                        lda cp
0020F2r 3  38                           sec
0020F3r 3  F5 02                        sbc 2,x
0020F5r 3  95 00                        sta 0,x         ; LSB
0020F7r 3  A5 rr                        lda cp+1
0020F9r 3  F5 03                        sbc 3,x
0020FBr 3  95 01                        sta 1,x         ; MSB
0020FDr 3               
0020FDr 3                               ; Update the address of the jump-over jmp instruction.
0020FDr 3                               ; First determine location of jmp instructions address.
0020FDr 3                               ; It should be 2 bytes before the start of the string.
0020FDr 3                               ; Compute it into tmp1, which is no longer being used.
0020FDr 3  B5 02                        lda 2,x
0020FFr 3  38                           sec
002100r 3  E9 02                        sbc #2
002102r 3  85 rr                        sta tmp1
002104r 3  B5 03                        lda 3,x
002106r 3  E9 00                        sbc #0          ; Propagate borrow
002108r 3  85 rr                        sta tmp1+1
00210Ar 3               
00210Ar 3                               ; Update the address of the jump to HERE.
00210Ar 3  A5 rr                        lda cp
00210Cr 3  92 rr                        sta (tmp1)
00210Er 3  A0 01                        ldy #1
002110r 3  A5 rr                        lda cp+1
002112r 3  91 rr                        sta (tmp1),y
002114r 3               
002114r 3                               ; What happens next depends on the state (which is bad, but
002114r 3                               ; that's the way it works at the moment). If we are
002114r 3                               ; interpretating, we save the string to a transient buffer
002114r 3                               ; and return that address (used for file calls, see
002114r 3                               ; https://forth-standard.org/standard/file/Sq . If we're
002114r 3                               ; compiling, we just need SLITERAL
002114r 3  A5 rr                        lda state
002116r 3  05 rr                        ora state+1             ; paranoid
002118r 3  F0 03                        beq @done
00211Ar 3               
00211Ar 3                               ; Jump into the middle of the sliteral word, after the
00211Ar 3                               ; string data has been compiled into the dictionary,
00211Ar 3                               ; because we've already done that step.
00211Ar 3  20 rr rr                     jsr sliteral_const_str         ; ( addr u -- )
00211Dr 3               
00211Dr 3               @done:
00211Dr 3  60           z_s_quote:      rts
00211Er 3               
00211Er 3               
00211Er 3               
00211Er 3               ; ## S_TO_D ( u -- d ) "Convert single cell number to double cell"
00211Er 3               ; ## "s>d"  auto  ANS core
00211Er 3                       ; """https://forth-standard.org/standard/core/StoD"""
00211Er 3               
00211Er 3               xt_s_to_d:
00211Er 3  20 rr rr                     jsr underflow_1
002121r 3               
002121r 3  CA                           dex
002122r 3  CA                           dex
002123r 3  74 00                        stz 0,x
002125r 3  74 01                        stz 1,x
002127r 3               
002127r 3  B5 03                        lda 3,x
002129r 3  10 04                        bpl @done
00212Br 3               
00212Br 3                               ; negative, extend sign
00212Br 3  D6 00                        dec 0,x
00212Dr 3  D6 01                        dec 1,x
00212Fr 3               @done:
00212Fr 3  60           z_s_to_d:       rts
002130r 3               
002130r 3               
002130r 3               
002130r 3               ; ## SAVE_BUFFERS ( -- ) "Save all dirty buffers to storage"
002130r 3               ; ## "save-buffers"  tested  ANS block
002130r 3                       ; """https://forth-standard.org/standard/block/SAVE-BUFFERS"""
002130r 3               
002130r 3               xt_save_buffers:
002130r 3                               ; Check the buffer status
002130r 3  A0 2C                        ldy #buffstatus_offset
002132r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
002134r 3  C9 03                        cmp #3          ; LSB is needed.
002136r 3  D0 12                        bne @done       ; Either not used or not dirty = done!
002138r 3               
002138r 3                               ; We need to save the block.
002138r 3  20 rr rr                     jsr xt_blkbuffer
00213Br 3  20 rr rr                     jsr xt_buffblocknum
00213Er 3  20 rr rr                     jsr xt_fetch
002141r 3  20 rr rr                     jsr xt_block_write
002144r 3               
002144r 3                               ; Mark the buffer as clean now.
002144r 3  A9 01                        lda #1
002146r 3  A0 2C                        ldy #buffstatus_offset
002148r 3  91 rr                        sta (up),y
00214Ar 3               
00214Ar 3               @done:
00214Ar 3  60           z_save_buffers: rts
00214Br 3               
00214Br 3               
00214Br 3               
00214Br 3               ; ## SCR ( -- addr ) "Push address of variable holding last screen listed"
00214Br 3               ; ## "scr"  auto  ANS block ext
00214Br 3                       ; """https://forth-standard.org/standard/block/SCR"""
00214Br 3               xt_scr:
00214Br 3                               ; SCR is at UP + scr_offset
00214Br 3  CA                           dex
00214Cr 3  CA                           dex
00214Dr 3  18                           clc
00214Er 3  A5 rr                        lda up
002150r 3  69 02                        adc #scr_offset ; Add offset
002152r 3  95 00                        sta 0,x
002154r 3  A5 rr                        lda up+1
002156r 3  69 00                        adc #0          ; Adding carry
002158r 3  95 01                        sta 1,x
00215Ar 3               
00215Ar 3  60           z_scr:          rts
00215Br 3               
00215Br 3               
00215Br 3               ; ## SEARCH ( addr1 u1 addr2 u2 -- addr3 u3 flag) "Search for a substring"
00215Br 3               ; ## "search"   auto  ANS string
00215Br 3                       ; """https://forth-standard.org/standard/string/SEARCH
00215Br 3                       ; Search for string2 (denoted by addr2 u2) in string1 (denoted by
00215Br 3                       ; addr1 u1). If a match is found the flag will be true and
00215Br 3                       ; addr3 will have the address of the start of the match and u3 will have
00215Br 3                       ; the number of characters remaining from the match point to the end
00215Br 3                       ; of the original string1. If a match is not found, the flag will be
00215Br 3                       ; false and addr3 and u3 will be the original string1's addr1 and u1.
00215Br 3                       ; """
00215Br 3               
00215Br 3               xt_search:
00215Br 3  20 rr rr                     jsr underflow_4
00215Er 3               
00215Er 3                               ; ANS says if the second string is a zero-length string it
00215Er 3                               ; automatically matches.
00215Er 3  B5 00                        lda 0,x
002160r 3  15 01                        ora 1,x
002162r 3  D0 0B                        bne @start_search
002164r 3               
002164r 3                               ; The second string is a zero length string.  Just remove
002164r 3                               ; the second string and put a true flag.
002164r 3  E8                           inx             ; Remove u2
002165r 3  E8                           inx
002166r 3  A9 FF                        lda #$FF        ; Turn addr2 into a true flag
002168r 3  95 00                        sta 0,x
00216Ar 3  95 01                        sta 1,x
00216Cr 3  4C rr rr                     jmp z_search
00216Fr 3               
00216Fr 3               @start_search:
00216Fr 3                               ; Put an offset (starting at zero) on the stack.
00216Fr 3  20 rr rr                     jsr xt_zero
002172r 3               
002172r 3               @search_loop:
002172r 3                               ; We stop (not found) when u2 + offset > u1
002172r 3                               ; Calculate u2+offset into tmp1
002172r 3  18                           clc
002173r 3  B5 00                        lda 0,x
002175r 3  75 02                        adc 2,x
002177r 3  85 rr                        sta tmp1
002179r 3  B5 01                        lda 1,x
00217Br 3  75 03                        adc 3,x
00217Dr 3               
00217Dr 3               
00217Dr 3                               ; Compare to u1. Start with the high byte
00217Dr 3  D5 07                        cmp 7,x
00217Fr 3  90 12                        bcc @init_comparison ; Obviously less
002181r 3  D0 06                        bne @not_found
002183r 3               
002183r 3                               ; The upper address byte matched - check the lower byte
002183r 3                               ; Load u1 first so we can use just a carry to check.
002183r 3  B5 06                        lda 6,x
002185r 3  C5 rr                        cmp tmp1
002187r 3  B0 0A                        bcs @init_comparison
002189r 3               
002189r 3               @not_found:
002189r 3                               ; The substring isn't in the main string.
002189r 3                               ; Return just the main string and a false flag.
002189r 3  E8                           inx             ; Remove offset
00218Ar 3  E8                           inx
00218Br 3  E8                           inx             ; Remove u2
00218Cr 3  E8                           inx
00218Dr 3  74 00                        stz 0,x         ; Turn addr2 into a false flag
00218Fr 3  74 01                        stz 1,x
002191r 3  80 66                        bra z_search
002193r 3               
002193r 3               @init_comparison:
002193r 3                               ; Use tmp1 to hold address in string 1.
002193r 3                               ; Use tmp2 to hold address in string 2.
002193r 3                               ; Use tmp3 to hold the number of characters left to check.
002193r 3               
002193r 3                               ; Compute the starting address in string 1
002193r 3                               ; as addr1 + offset
002193r 3  18                           clc
002194r 3  B5 08                        lda 8,x
002196r 3  75 00                        adc 0,x
002198r 3  85 rr                        sta tmp1
00219Ar 3  B5 09                        lda 9,x
00219Cr 3  75 01                        adc 1,x
00219Er 3  85 rr                        sta tmp1+1
0021A0r 3               
0021A0r 3                               ; The starting address in string 2 is just addr2.
0021A0r 3  B5 04                        lda 4,x
0021A2r 3  85 rr                        sta tmp2
0021A4r 3  B5 05                        lda 5,x
0021A6r 3  85 rr                        sta tmp2+1
0021A8r 3               
0021A8r 3                               ; The number of characters to check is u2.
0021A8r 3  B5 02                        lda 2,x
0021AAr 3  85 rr                        sta tmp3
0021ACr 3  B5 03                        lda 3,x
0021AEr 3  85 rr                        sta tmp3+1
0021B0r 3               
0021B0r 3               @comparison_loop:
0021B0r 3                               ; Check to see if the current characters match.
0021B0r 3  B2 rr                        lda (tmp1)
0021B2r 3  D2 rr                        cmp (tmp2)
0021B4r 3  F0 05                        beq @letters_match
0021B6r 3               
0021B6r 3                               ; One of the letters didn't match.
0021B6r 3                               ; Increment the offset and try again.
0021B6r 3  20 rr rr                     jsr xt_one_plus
0021B9r 3  80 B7                        bra @search_loop
0021BBr 3               
0021BBr 3               @letters_match:
0021BBr 3                               ; The letters match.  Advance the pointers until the
0021BBr 3                               ; count reaches zero.
0021BBr 3  E6 rr                        inc tmp1
0021BDr 3  D0 02                        bne @1
0021BFr 3  E6 rr                        inc tmp1+1
0021C1r 3               @1:
0021C1r 3  E6 rr                        inc tmp2
0021C3r 3  D0 02                        bne @2
0021C5r 3  E6 rr                        inc tmp2+1
0021C7r 3               @2:
0021C7r 3                               ; Decrement the count of remaining letters to check.
0021C7r 3  A5 rr                        lda tmp3
0021C9r 3  D0 02                        bne @3
0021CBr 3  C6 rr                        dec tmp3+1
0021CDr 3               @3:
0021CDr 3  C6 rr                        dec tmp3
0021CFr 3               
0021CFr 3                               ; Check if we've reached zero.
0021CFr 3  A5 rr                        lda tmp3
0021D1r 3  05 rr                        ora tmp3+1
0021D3r 3  D0 DB                        bne @comparison_loop ; Check the next letter
0021D5r 3               
0021D5r 3                               ; We've run out of letters and they all match!
0021D5r 3                               ; Return (addr1+offset) (u1-offset) true
0021D5r 3                               ; Add offset to addr1.
0021D5r 3  18                           clc
0021D6r 3  B5 00                        lda 0,x
0021D8r 3  75 08                        adc 8,x
0021DAr 3  95 08                        sta 8,x
0021DCr 3  B5 01                        lda 1,x
0021DEr 3  75 09                        adc 9,x
0021E0r 3  95 09                        sta 9,x
0021E2r 3               
0021E2r 3                               ; Subtract offset from u1.
0021E2r 3  38                           sec
0021E3r 3  B5 06                        lda 6,x
0021E5r 3  F5 00                        sbc 0,x
0021E7r 3  95 06                        sta 6,x
0021E9r 3  B5 07                        lda 7,x
0021EBr 3  F5 01                        sbc 1,x
0021EDr 3  95 07                        sta 7,x
0021EFr 3               
0021EFr 3                               ; Replace addr2, u2, and offset with a true flag.
0021EFr 3  E8                           inx             ; drop offset
0021F0r 3  E8                           inx
0021F1r 3  E8                           inx             ; drop u2
0021F2r 3  E8                           inx
0021F3r 3  A9 FF                        lda #$FF
0021F5r 3  95 00                        sta 0,x         ; Turn addr2 into a true flag.
0021F7r 3  95 01                        sta 1,x
0021F9r 3               
0021F9r 3  60           z_search:       rts
0021FAr 3               
0021FAr 3               
0021FAr 3               
0021FAr 3               ; ## SEMICOLON ( -- ) "End compilation of new word"
0021FAr 3               ; ## ";"  auto  ANS core
0021FAr 3                       ; """https://forth-standard.org/standard/core/Semi
0021FAr 3                       ; End the compilation of a new word into the Dictionary.
0021FAr 3                       ;
0021FAr 3                       ; When we
0021FAr 3                       ; enter this, WORKWORD is pointing to the nt_ of this word in the
0021FAr 3                       ; Dictionary, DP to the previous word, and CP to the next free byte.
0021FAr 3                       ; A Forth definition would be (see "Starting Forth"):
0021FAr 3                       ; : POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE  Following the
0021FAr 3                       ; practice of Gforth, we warn here if a word has been redefined.
0021FAr 3                       ; """
0021FAr 3               
0021FAr 3               xt_semicolon:
0021FAr 3                               ; Check if this is a : word or a :NONAME word.
0021FAr 3  24 rr                        bit status
0021FCr 3  70 11                        bvs @colonword
0021FEr 3               
0021FEr 3                               ; This is a :NONAME word - just put an RTS on the end and
0021FEr 3                               ; the address (held in workword) on the stack.
0021FEr 3  A9 60                        lda #$60                ; opcode for RTS
002200r 3  20 rr rr                     jsr cmpl_a
002203r 3               
002203r 3  CA                           dex
002204r 3  CA                           dex
002205r 3  A5 rr                        lda workword
002207r 3  95 00                        sta 0,x
002209r 3  A5 rr                        lda workword+1
00220Br 3  95 01                        sta 1,x
00220Dr 3  80 45                        bra @semicolon_done
00220Fr 3               
00220Fr 3               @colonword:
00220Fr 3                               ; CP is the byte that will be the address we use in the
00220Fr 3                               ; header as the end-of-compile address (z_word). This is
00220Fr 3                               ; six bytes down from the header
00220Fr 3  A0 06                        ldy #6
002211r 3  A5 rr                        lda cp
002213r 3  91 rr                        sta (workword),y
002215r 3  C8                           iny
002216r 3  A5 rr                        lda cp+1
002218r 3  91 rr                        sta (workword),y
00221Ar 3               
00221Ar 3                               ; Allocate one further byte and save the RTS instruction
00221Ar 3                               ; there
00221Ar 3  A9 60                        lda #$60                ; opcode for RTS
00221Cr 3  20 rr rr                     jsr cmpl_a
00221Fr 3               
00221Fr 3                               ; Before we formally add the word to the Dictionary, we
00221Fr 3                               ; check to see if it is already present, and if yes, we
00221Fr 3                               ; warn the user.
00221Fr 3               
00221Fr 3                               ; See if word already in Dictionary.
00221Fr 3                               ; (STATUS bit 7 will be high as CREATE already
00221Fr 3                               ;  checked for us.)
00221Fr 3  24 rr                        bit status
002221r 3  10 26                        bpl @new_word   ; Bit 7 is clear = new word
002223r 3               
002223r 3                               ; We start by putting the string of the
002223r 3                               ; word we're defining on the stack
002223r 3  CA                           dex
002224r 3  CA                           dex
002225r 3  CA                           dex
002226r 3  CA                           dex
002227r 3               
002227r 3                               ; WORKWORD points to the beginning of the head of our new
002227r 3                               ; word, where the first byte is the length of the string
002227r 3                               ; We can't use LATESTNT because we haven't added the new
002227r 3                               ; word to the Dictionary yet
002227r 3  B2 rr                        lda (workword)
002229r 3  95 00                        sta 0,x
00222Br 3  74 01                        stz 1,x
00222Dr 3               
00222Dr 3                               ; Eight bytes below WORKWORD is the actual beginning of
00222Dr 3                               ; the string
00222Dr 3  A5 rr                        lda workword
00222Fr 3  18                           clc
002230r 3  69 08                        adc #8
002232r 3  95 02                        sta 2,x
002234r 3  A5 rr                        lda workword+1
002236r 3  69 00                        adc #0                  ; only want carry
002238r 3  95 03                        sta 3,x
00223Ar 3               
00223Ar 3                               ; This word is already in the Dictionary, so we print a
00223Ar 3                               ; warning to the user.
00223Ar 3  A9 02                        lda #str_redefined       ; address of string "redefined"
00223Cr 3  20 rr rr                     jsr print_string_no_lf
00223Fr 3               
00223Fr 3                               ; Now we print the offending word.
00223Fr 3  20 rr rr                     jsr xt_type
002242r 3  20 rr rr                     jsr xt_space
002245r 3               
002245r 3                               ; Clear bit 7 of status (so future words will print message
002245r 3                               ; by defaut)
002245r 3  A9 80                        lda #%10000000
002247r 3  14 rr                        trb status
002249r 3               
002249r 3               @new_word:
002249r 3                               ; Let's get this over with. Save beginning of our word
002249r 3                               ; as new last word in the Dictionary
002249r 3  A5 rr                        lda workword
00224Br 3  85 rr                        sta dp
00224Dr 3  A5 rr                        lda workword+1
00224Fr 3  85 rr                        sta dp+1
002251r 3  20 rr rr                     jsr dp_to_current       ; Save the updated DP to the
002254r 3                                                       ; CURRENT wordlist.
002254r 3               @semicolon_done:
002254r 3                               ; Word definition complete. Return compile flag to zero
002254r 3                               ; to return to interpret mode
002254r 3  64 rr                        stz state
002256r 3  64 rr                        stz state+1
002258r 3               
002258r 3  60           z_semicolon:    rts
002259r 3               
002259r 3               
002259r 3               
002259r 3               ; ## SIGN ( n -- ) "Add minus to pictured output"
002259r 3               ; ## "sign"  auto  ANS core
002259r 3                       ; """https://forth-standard.org/standard/core/SIGN
002259r 3                       ;
002259r 3                       ; Code based on
002259r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
002259r 3                       ; Original Forth code is   0< IF ASCII - HOLD THEN
002259r 3                       ; """
002259r 3               
002259r 3               xt_sign:
002259r 3  20 rr rr                     jsr underflow_1
00225Cr 3               
00225Cr 3  B5 01                        lda 1,x         ; check MSB of TOS
00225Er 3  30 04                        bmi @minus
002260r 3               
002260r 3  E8                           inx
002261r 3  E8                           inx
002262r 3  80 09                        bra @done
002264r 3               @minus:
002264r 3  A9 2D                        lda #$2D        ; ASCII for "-"
002266r 3  95 00                        sta 0,x         ; overwrite TOS
002268r 3  74 01                        stz 1,x         ; paranoid
00226Ar 3               
00226Ar 3  20 rr rr                     jsr xt_hold
00226Dr 3               @done:
00226Dr 3  60           z_sign:         rts
00226Er 3               
00226Er 3               
00226Er 3               
00226Er 3               ; ## SLASH ( n1 n2 -- n ) "Divide NOS by TOS"
00226Er 3               ; ## "/"  auto  ANS core
00226Er 3                       ; """https://forth-standard.org/standard/core/Div
00226Er 3                       ;
00226Er 3                       ; Forth code is either  >R S>D R> FM/MOD SWAP DROP
00226Er 3                       ; or >R S>D R> SM/REM SWAP DROP -- we use SM/REM in Tali Forth.
00226Er 3                       ; This code is currently unoptimized. This code without the SLASH
00226Er 3                       ; DROP at the end is /MOD, so we share the code as far as possible.
00226Er 3                       ; """
00226Er 3               
00226Er 3               xt_slash:
00226Er 3                               ; With all the multiplication going on, it would be hard to
00226Er 3                               ; make sure that one of our temporary variables is not
00226Er 3                               ; overwritten. We make sure that doesn't happen by taking the
00226Er 3                               ; hit of pushing the flag to the 65c02's stack
00226Er 3  A9 00                        lda #0
002270r 3  48                           pha
002271r 3  80 03                        bra _common
002273r 3               
002273r 3               xt_slash_mod:
002273r 3                               ; Note that /MOD accesses this code
002273r 3  A9 FF                        lda #$FF
002275r 3  48                           pha             ; falls through to _common
002276r 3               
002276r 3               _common:
002276r 3  20 rr rr                     jsr xt_to_r             ; >R
002279r 3  20 rr rr                     jsr xt_s_to_d           ; S>D
00227Cr 3  20 rr rr                     jsr xt_r_from           ; R>
00227Fr 3  20 rr rr                     jsr xt_sm_slash_rem     ; SM/REM
002282r 3               
002282r 3                               ; Get the flag back from the 65c02's stack. Zero is SLASH,
002282r 3                               ; $FF is SLASH MOD
002282r 3  68                           pla
002283r 3  D0 05                        bne @done
002285r 3               
002285r 3                               ; The following code is for SLASH only
002285r 3  20 rr rr                     jsr xt_swap
002288r 3  E8                           inx             ; DROP
002289r 3  E8                           inx
00228Ar 3               @done:
00228Ar 3               z_slash_mod:
00228Ar 3  60           z_slash:        rts
00228Br 3               
00228Br 3               
00228Br 3               
00228Br 3               ; ## SLASH_MOD ( n1 n2 -- n3 n4 ) "Divide NOS by TOS with a remainder"
00228Br 3               ; ## "/mod"  auto  ANS core
00228Br 3                       ; """https://forth-standard.org/standard/core/DivMOD
00228Br 3                       ;
00228Br 3                       ; This is a dummy entry, the actual code is shared with SLASH
00228Br 3                       ; """
00228Br 3               
00228Br 3               
00228Br 3               ; ## SLASH_STRING ( addr u n -- addr u ) "Shorten string by n"
00228Br 3               ; ## "/string"  auto  ANS string
00228Br 3                       ; """https://forth-standard.org/standard/string/DivSTRING
00228Br 3                       ;
00228Br 3                       ; Forth code is
00228Br 3                       ; : /STRING ( ADDR U N -- ADDR U ) ROT OVER + ROT ROT - ;
00228Br 3                       ; Put differently, we need to add TOS and 3OS, and subtract
00228Br 3                       ; TOS from NOS, and then drop TOS
00228Br 3                       ; """
00228Br 3               
00228Br 3               xt_slash_string:
00228Br 3  20 rr rr                     jsr underflow_3
00228Er 3               
00228Er 3  18                           clc             ; 3OS+TOS
00228Fr 3  B5 00                        lda 0,x
002291r 3  75 04                        adc 4,x
002293r 3  95 04                        sta 4,x
002295r 3               
002295r 3  B5 01                        lda 1,x
002297r 3  75 05                        adc 5,x
002299r 3  95 05                        sta 5,x
00229Br 3               
00229Br 3  38                           sec             ; NOS-TOS
00229Cr 3  B5 02                        lda 2,x
00229Er 3  F5 00                        sbc 0,x
0022A0r 3  95 02                        sta 2,x
0022A2r 3               
0022A2r 3  B5 03                        lda 3,x
0022A4r 3  F5 01                        sbc 1,x
0022A6r 3  95 03                        sta 3,x
0022A8r 3               
0022A8r 3  E8                           inx
0022A9r 3  E8                           inx
0022AAr 3               
0022AAr 3  60           z_slash_string: rts
0022ABr 3               
0022ABr 3               
0022ABr 3               
0022ABr 3               ; ## SLITERAL ( addr u -- )( -- addr u ) "Compile a string for runtime"
0022ABr 3               ; ## "sliteral" auto  ANS string
0022ABr 3                       ; """https://forth-standard.org/standard/string/SLITERAL
0022ABr 3                       ; Add the runtime for an existing string.
0022ABr 3                       ; """
0022ABr 3               
0022ABr 3               xt_sliteral:
0022ABr 3  20 rr rr                     jsr underflow_2
0022AEr 3               
0022AEr 3                               ; We can't assume that ( addr u ) of the current string is in
0022AEr 3                               ; a stable area (eg. already in the dictionary.) Copy the
0022AEr 3                               ; string data into the dictionary using move.
0022AEr 3               
0022AEr 3                               ; Put a jmp over the string data with address to be filled
0022AEr 3                               ; in later.
0022AEr 3  A9 4C                        lda #$4C
0022B0r 3  20 rr rr                     jsr cmpl_a
0022B3r 3               
0022B3r 3                               ; Address to be filled in later.
0022B3r 3  20 rr rr                     jsr cmpl_a
0022B6r 3  20 rr rr                     jsr cmpl_a
0022B9r 3               
0022B9r 3                               ; Turn the data stack from ( addr u ) into
0022B9r 3                               ; ( here u addr here u ) so move can be called with
0022B9r 3                               ; the remaining items on the stack ready for processing.
0022B9r 3                               ; Reserve three extra words on the stack.
0022B9r 3  8A                           txa
0022BAr 3  38                           sec
0022BBr 3  E9 06                        sbc #6
0022BDr 3  AA                           tax
0022BEr 3               
0022BEr 3                               ; Move addr down from TOS-4 to TOS-2
0022BEr 3  B5 08                        lda 8,x
0022C0r 3  95 04                        sta 4,x
0022C2r 3  B5 09                        lda 9,x
0022C4r 3  95 05                        sta 5,x
0022C6r 3               
0022C6r 3                               ; Copy u from TOS-3 to TOS
0022C6r 3  B5 06                        lda 6,x
0022C8r 3  95 00                        sta 0,x
0022CAr 3  B5 07                        lda 7,x
0022CCr 3  95 01                        sta 1,x
0022CEr 3               
0022CEr 3                               ; Put HERE into TOS-1 and TOS-4
0022CEr 3  A5 rr                        lda cp
0022D0r 3  95 08                        sta 8,x
0022D2r 3  95 02                        sta 2,x
0022D4r 3  A5 rr                        lda cp+1
0022D6r 3  95 09                        sta 9,x
0022D8r 3  95 03                        sta 3,x
0022DAr 3               
0022DAr 3                               ; Copy the string into the dictionary.
0022DAr 3  20 rr rr                     jsr xt_move
0022DDr 3               
0022DDr 3                               ; Update cp.
0022DDr 3  18                           clc
0022DEr 3  A5 rr                        lda cp
0022E0r 3  75 00                        adc 0,x
0022E2r 3  85 rr                        sta cp
0022E4r 3  A5 rr                        lda cp+1
0022E6r 3  75 01                        adc 1,x
0022E8r 3  85 rr                        sta cp+1
0022EAr 3               
0022EAr 3                               ; Update the address of the jump-over jmp instruction.
0022EAr 3                               ; First determine location of jmp instructions address.
0022EAr 3                               ; It should be 2 bytes before the start of the string.
0022EAr 3               
0022EAr 3                               ; Compute it into tmp1, which is no longer being used.
0022EAr 3  B5 02                        lda 2,x
0022ECr 3  38                           sec
0022EDr 3  E9 02                        sbc #2
0022EFr 3  85 rr                        sta tmp1
0022F1r 3  B5 03                        lda 3,x
0022F3r 3  E9 00                        sbc #0          ; Propagate borrow
0022F5r 3  85 rr                        sta tmp1+1
0022F7r 3               
0022F7r 3                               ; Update the address of the jump to HERE.
0022F7r 3  A5 rr                        lda cp
0022F9r 3  92 rr                        sta (tmp1)
0022FBr 3  A0 01                        ldy #1
0022FDr 3  A5 rr                        lda cp+1
0022FFr 3  91 rr                        sta (tmp1),y
002301r 3               
002301r 3                               ; Stack is now ( addr2 u ) where addr2 is the new
002301r 3                               ; location in the dictionary.
002301r 3               
002301r 3               sliteral_const_str:
002301r 3                               ; Compile a subroutine jump to the runtime of SLITERAL that
002301r 3                               ; pushes the new ( addr u ) pair to the Data Stack.
002301r 3                               ; When we're done, the code will look like this:
002301r 3               
002301r 3                               ; xt -->    jmp a
002301r 3                               ;           <string data bytes>
002301r 3                               ;  a -->    jsr sliteral_runtime
002301r 3                               ;           <string address>
002301r 3                               ;           <string length>
002301r 3                               ; rts -->
002301r 3               
002301r 3                               ; This means we'll have to adjust the return address for two
002301r 3                               ; cells, not just one
002301r 3  A0 rr                        ldy #>sliteral_runtime
002303r 3  A9 rr                        lda #<sliteral_runtime
002305r 3  20 rr rr                     jsr cmpl_subroutine
002308r 3               
002308r 3                               ; We want to have the address end up as NOS and the length
002308r 3                               ; as TOS, so we store the address first
002308r 3  B4 03                        ldy 3,x                ; address MSB
00230Ar 3  B5 02                        lda 2,x                ; address LSB
00230Cr 3  20 rr rr                     jsr cmpl_word
00230Fr 3               
00230Fr 3  B4 01                        ldy 1,x                ; length MSB
002311r 3  B5 00                        lda 0,x                ; length LSB
002313r 3  20 rr rr                     jsr cmpl_word
002316r 3               
002316r 3                               ; clean up and leave
002316r 3  E8                           inx
002317r 3  E8                           inx
002318r 3  E8                           inx
002319r 3  E8                           inx
00231Ar 3               
00231Ar 3  60           z_sliteral:     rts
00231Br 3               
00231Br 3               
00231Br 3               sliteral_runtime:
00231Br 3               
00231Br 3                       ; """Run time behaviour of SLITERAL: Push ( addr u ) of string to
00231Br 3                       ; the Data Stack. We arrive here with the return address as the
00231Br 3                       ; top of Return Stack, which points to the address of the string
00231Br 3                       ; """
00231Br 3  CA                           dex
00231Cr 3  CA                           dex
00231Dr 3  CA                           dex
00231Er 3  CA                           dex
00231Fr 3               
00231Fr 3                               ; Get the address of the string address off the stack and
00231Fr 3                               ; increase by one because of the RTS mechanics
00231Fr 3  68                           pla
002320r 3  85 rr                        sta tmp1        ; LSB of address
002322r 3  68                           pla
002323r 3  85 rr                        sta tmp1+1      ; MSB of address
002325r 3               
002325r 3                               ; Walk through both and save them
002325r 3  A0 01                        ldy #1          ; adjust for JSR/RTS mechanics on 65c02
002327r 3  B1 rr                        lda (tmp1),y
002329r 3  95 02                        sta 2,x         ; LSB of address
00232Br 3  C8                           iny
00232Cr 3               
00232Cr 3  B1 rr                        lda (tmp1),y
00232Er 3  95 03                        sta 3,x         ; MSB of address
002330r 3  C8                           iny
002331r 3               
002331r 3  B1 rr                        lda (tmp1),y
002333r 3  95 00                        sta 0,x         ; LSB of length
002335r 3  C8                           iny
002336r 3               
002336r 3  B1 rr                        lda (tmp1),y
002338r 3  95 01                        sta 1,x         ; MSB of length
00233Ar 3               
00233Ar 3                               ; restore return address
00233Ar 3  18                           clc
00233Br 3  A5 rr                        lda tmp1
00233Dr 3  69 04                        adc #4
00233Fr 3  A8                           tay             ; LSB
002340r 3  A5 rr                        lda tmp1+1
002342r 3  69 00                        adc #0          ; we only need carry
002344r 3  48                           pha             ; MSB
002345r 3  5A                           phy
002346r 3               
002346r 3  60                           rts
002347r 3               
002347r 3               
002347r 3               
002347r 3               ; ## SM_SLASH_REM ( d n1 -- n2 n3 ) "Symmetic signed division"
002347r 3               ; ## "sm/rem"  auto  ANS core
002347r 3                       ; """https://forth-standard.org/standard/core/SMDivREM
002347r 3                       ; Symmetic signed division. Compare FM/MOD. Based on F-PC 3.6
002347r 3                       ; by Ulrich Hoffmann. See http://www.xlerb.de/uho/ansi.seq
002347r 3                       ;
002347r 3                       ; Forth:
002347r 3                       ; OVER >R 2DUP XOR 0< >R ABS >R DABS R> UM/MOD R> ?NEGATE SWAP
002347r 3                       ; R> ?NEGATE SWAP
002347r 3                       ; """
002347r 3               
002347r 3               xt_sm_slash_rem:
002347r 3  20 rr rr                     jsr underflow_3 ; contains double number
00234Ar 3               
00234Ar 3                               ; push MSB of high cell of d to Data Stack so we can check
00234Ar 3                               ; its sign later
00234Ar 3  B5 03                        lda 3,x
00234Cr 3  48                           pha
00234Dr 3               
00234Dr 3                               ; XOR the MSB of the high cell of d and n1 so we figure out
00234Dr 3                               ; its sign later as well
00234Dr 3  B5 01                        lda 1,x
00234Fr 3  55 03                        eor 3,x
002351r 3  48                           pha
002352r 3               
002352r 3                               ; Prepare division by getting absolute of n1 and d
002352r 3  20 rr rr                     jsr xt_abs
002355r 3  E8                           inx             ; pretend we pushed n1 to R
002356r 3  E8                           inx
002357r 3               
002357r 3  20 rr rr                     jsr xt_dabs
00235Ar 3  CA                           dex
00235Br 3  CA                           dex
00235Cr 3               
00235Cr 3  20 rr rr                     jsr xt_um_slash_mod     ; UM/MOD
00235Fr 3               
00235Fr 3                               ; if the XOR compiled above is negative, negate the
00235Fr 3                               ; quotient (n3)
00235Fr 3  68                           pla
002360r 3  10 03                        bpl @1
002362r 3  20 rr rr                     jsr xt_negate
002365r 3               @1:
002365r 3                               ; if d was negative, negate the remainder (n2)
002365r 3  68                           pla
002366r 3  10 07                        bpl @done
002368r 3               
002368r 3  E8                           inx             ; pretend we pushed quotient to R
002369r 3  E8                           inx
00236Ar 3  20 rr rr                     jsr xt_negate
00236Dr 3  CA                           dex
00236Er 3  CA                           dex
00236Fr 3               
00236Fr 3               @done:
00236Fr 3  60           z_sm_slash_rem: rts
002370r 3               
002370r 3               
002370r 3               
002370r 3               ; ## SOURCE ( -- addr u ) "Return location and size of input buffer""
002370r 3               ; ## "source"  auto  ANS core
002370r 3                       ; """https://forth-standard.org/standard/core/SOURCE"""
002370r 3               xt_source:
002370r 3                               ; add address
002370r 3  CA                           dex
002371r 3  CA                           dex
002372r 3  A5 rr                        lda cib
002374r 3  95 00                        sta 0,x
002376r 3  A5 rr                        lda cib+1
002378r 3  95 01                        sta 1,x
00237Ar 3               
00237Ar 3                               ; add size
00237Ar 3  CA                           dex
00237Br 3  CA                           dex
00237Cr 3  A5 rr                        lda ciblen
00237Er 3  95 00                        sta 0,x
002380r 3  A5 rr                        lda ciblen+1
002382r 3  95 01                        sta 1,x
002384r 3               
002384r 3  60           z_source:       rts
002385r 3               
002385r 3               
002385r 3               ; ## SOURCE_ID ( -- n ) "Return source identifier"
002385r 3               ; ## "source-id"  tested  ANS core ext
002385r 3                       ; """https://forth-standard.org/standard/core/SOURCE-ID Identify the
002385r 3                       ; input source unless it is a block (s. Conklin & Rather p. 156). This
002385r 3                       ; will give the input source: 0 is keyboard, -1 ($FFFF) is character
002385r 3                       ; string, and a text file gives the fileid.
002385r 3                       ; """
002385r 3               xt_source_id:
002385r 3  CA                           dex
002386r 3  CA                           dex
002387r 3               
002387r 3  A5 rr                        lda insrc
002389r 3  95 00                        sta 0,x
00238Br 3  A5 rr                        lda insrc+1
00238Dr 3  95 01                        sta 1,x
00238Fr 3               
00238Fr 3  60           z_source_id:    rts
002390r 3               
002390r 3               
002390r 3               ; ## SPACE ( -- ) "Print a single space"
002390r 3               ; ## "space"  auto  ANS core
002390r 3                       ; """https://forth-standard.org/standard/core/SPACE"""
002390r 3               xt_space:
002390r 3  A9 20                        lda #AscSP
002392r 3  20 rr rr                     jsr emit_a
002395r 3               
002395r 3  60           z_space:        rts
002396r 3               
002396r 3               
002396r 3               ; ## SPACES ( u -- ) "Print a number of spaces"
002396r 3               ; ## "spaces"  auto  ANS core
002396r 3                       ; """https://forth-standard.org/standard/core/SPACES"""
002396r 3               
002396r 3               xt_spaces:
002396r 3  20 rr rr                     jsr underflow_1
002399r 3               
002399r 3                               ; catch any zero in TOS fast
002399r 3  B5 00                        lda 0,x
00239Br 3  15 01                        ora 1,x
00239Dr 3  F0 2A                        beq @done
00239Fr 3               
00239Fr 3                               ; Usually we're only going to print far less than 256 spaces,
00239Fr 3                               ; so we create a quick loop for that. Short loop could be realized
00239Fr 3                               ; as a separate subroutine, but unless we're really pressed for
00239Fr 3                               ; memory at some point, this is faster
00239Fr 3  B4 01                        ldy 1,x
0023A1r 3  D0 0C                        bne @lots_of_spaces
0023A3r 3               
0023A3r 3  B4 00                        ldy 0,x
0023A5r 3               @quick_loop:
0023A5r 3                               ; we reach here knowing that there must be a number that is not
0023A5r 3                               ; zero in the TOS
0023A5r 3  A9 20                        lda #AscSP
0023A7r 3  20 rr rr                     jsr emit_a
0023AAr 3  88                           dey
0023ABr 3  F0 1C                        beq @done
0023ADr 3  80 F6                        bra @quick_loop
0023AFr 3               
0023AFr 3               @lots_of_spaces:
0023AFr 3                               ; We go through the first loop once to get rid of the lower
0023AFr 3                               ; counter byte. This could be zero
0023AFr 3  B4 00                        ldy 0,x
0023B1r 3               
0023B1r 3               @first_slow_loop:
0023B1r 3  F0 08                        beq @slow_outer_loop
0023B3r 3  A9 20                        lda #AscSP
0023B5r 3  20 rr rr                     jsr emit_a
0023B8r 3  88                           dey
0023B9r 3  80 F6                        bra @first_slow_loop
0023BBr 3               
0023BBr 3               @slow_outer_loop:
0023BBr 3                               ; we arrive here knowing that the MSB of TOS cannot be a zero
0023BBr 3  A0 00                        ldy #00
0023BDr 3               
0023BDr 3               @slow_inner_loop:
0023BDr 3  A9 20                        lda #AscSP
0023BFr 3  20 rr rr                     jsr emit_a
0023C2r 3  88                           dey
0023C3r 3  D0 F8                        bne @slow_inner_loop
0023C5r 3               
0023C5r 3  D6 01                        dec 1,x
0023C7r 3  D0 F2                        bne @slow_outer_loop
0023C9r 3               
0023C9r 3               @done:
0023C9r 3  E8                           inx             ; drop
0023CAr 3  E8                           inx
0023CBr 3               
0023CBr 3  60           z_spaces:       rts
0023CCr 3               
0023CCr 3               
0023CCr 3               
0023CCr 3               ; ## STAR ( n n -- n ) "16*16 --> 16 "
0023CCr 3               ; ## "*"  auto  ANS core
0023CCr 3                       ; """https://forth-standard.org/standard/core/Times
0023CCr 3                       ; Multiply two signed 16 bit numbers, returning a 16 bit result.
0023CCr 3                       ;
0023CCr 3                       ; This is nothing  more than UM* DROP
0023CCr 3                       ; """
0023CCr 3               
0023CCr 3               xt_star:
0023CCr 3  20 rr rr                     jsr underflow_2
0023CFr 3               
0023CFr 3  20 rr rr                     jsr xt_um_star
0023D2r 3  E8                           inx
0023D3r 3  E8                           inx
0023D4r 3               
0023D4r 3  60           z_star:         rts
0023D5r 3               
0023D5r 3               
0023D5r 3               
0023D5r 3               ; ## STAR_SLASH  ( n1 n2 n3 -- n4 ) "n1 * n2 / n3 -->  n"
0023D5r 3               ; ## "*/"  auto  ANS core
0023D5r 3                       ; """https://forth-standard.org/standard/core/TimesDiv
0023D5r 3                       ; Multiply n1 by n2 and divide by n3, returning the result
0023D5r 3                       ; without a remainder. This is */MOD without the mod.
0023D5r 3                       ;
0023D5r 3                       ; This word
0023D5r 3                       ; can be defined in Forth as : */  */MOD SWAP DROP ; which is
0023D5r 3                       ; pretty much what we do here
0023D5r 3                       ; """
0023D5r 3               xt_star_slash:
0023D5r 3                               ; We let */MOD check for underflow
0023D5r 3  20 rr rr                     jsr xt_star_slash_mod
0023D8r 3  20 rr rr                     jsr xt_swap
0023DBr 3  E8                           inx
0023DCr 3  E8                           inx
0023DDr 3               z_star_slash:
0023DDr 3  60                           rts
0023DEr 3               
0023DEr 3               
0023DEr 3               ; ## STAR_SLASH_MOD  ( n1 n2 n3 -- n4 n5 ) "n1 * n2 / n3 --> n-mod n"
0023DEr 3               ; ## "*/mod"  auto  ANS core
0023DEr 3                       ; """https://forth-standard.org/standard/core/TimesDivMOD
0023DEr 3                       ; Multiply n1 by n2 producing the intermediate double-cell result d.
0023DEr 3                       ; Divide d by n3 producing the single-cell remainder n4 and the
0023DEr 3                       ; single-cell quotient n5.
0023DEr 3                       ;
0023DEr 3                       ; In Forth, this is
0023DEr 3                       ; : */MOD  >R M* >R SM/REM ;  Note that */ accesses this routine.
0023DEr 3                       ; """
0023DEr 3               xt_star_slash_mod:
0023DEr 3  20 rr rr                     jsr underflow_3
0023E1r 3               
0023E1r 3  20 rr rr                     jsr xt_to_r
0023E4r 3  20 rr rr                     jsr xt_m_star
0023E7r 3  20 rr rr                     jsr xt_r_from
0023EAr 3  20 rr rr                     jsr xt_sm_slash_rem
0023EDr 3               
0023EDr 3               z_star_slash_mod:
0023EDr 3  60                           rts
0023EEr 3               
0023EEr 3               
0023EEr 3               ; ## STATE ( -- addr ) "Return the address of compilation state flag"
0023EEr 3               ; ## "state"  auto  ANS core
0023EEr 3                       ; """https://forth-standard.org/standard/core/STATE
0023EEr 3                       ; STATE is true when in compilation state, false otherwise. Note
0023EEr 3                       ; we do not return the state itself, but only the address where
0023EEr 3                       ; it lives. The state should not be changed directly by the user; see
0023EEr 3                       ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
0023EEr 3                       ; """
0023EEr 3               xt_state:
0023EEr 3  CA                           dex
0023EFr 3  CA                           dex
0023F0r 3  A9 rr                        lda #<state
0023F2r 3  95 00                        sta 0,x
0023F4r 3  A9 rr                        lda #>state
0023F6r 3  95 01                        sta 1,x
0023F8r 3               
0023F8r 3  60           z_state:        rts
0023F9r 3               
0023F9r 3               
0023F9r 3               ; ## STORE ( n addr -- ) "Store TOS in memory"
0023F9r 3               ; ## "!"  auto  ANS core
0023F9r 3                       ; """https://forth-standard.org/standard/core/Store"""
0023F9r 3               xt_store:
0023F9r 3  20 rr rr                     jsr underflow_2
0023FCr 3               
0023FCr 3  B5 02                        lda 2,x         ; LSB
0023FEr 3  81 00                        sta (0,x)
002400r 3               
002400r 3  F6 00                        inc 0,x
002402r 3  D0 02                        bne @1
002404r 3  F6 01                        inc 1,x
002406r 3               @1:
002406r 3  B5 03                        lda 3,x         ; MSB
002408r 3  81 00                        sta (0,x)
00240Ar 3               
00240Ar 3  E8                           inx             ; 2DROP
00240Br 3  E8                           inx
00240Cr 3  E8                           inx
00240Dr 3  E8                           inx
00240Er 3               
00240Er 3  60           z_store:        rts
00240Fr 3               
00240Fr 3               
00240Fr 3               ; ## STRIP_UNDERFLOW ( -- addr ) "Return address where underflow status is kept"
00240Fr 3               ; ## "strip-underflow"  tested  Tali Forth
00240Fr 3                       ; """`STRIP-UNDERFLOW` is a flag variable that determines if underflow
00240Fr 3                       ; checking should be removed during the compilation of new words.
00240Fr 3                       ; Default is false.
00240Fr 3                       ; """
00240Fr 3               xt_strip_underflow:
00240Fr 3  CA                           dex
002410r 3  CA                           dex
002411r 3               
002411r 3  A9 rr                        lda #<uf_strip
002413r 3  95 00                        sta 0,x
002415r 3  A9 rr                        lda #>uf_strip
002417r 3  95 01                        sta 1,x
002419r 3               
002419r 3               z_strip_underflow:
002419r 3  60                           rts
00241Ar 3               
00241Ar 3               
00241Ar 3               ; ## SWAP ( b a -- a b ) "Exchange TOS and NOS"
00241Ar 3               ; ## "swap"  auto  ANS core
00241Ar 3                       ; """https://forth-standard.org/standard/core/SWAP"""
00241Ar 3               xt_swap:
00241Ar 3  20 rr rr                     jsr underflow_2
00241Dr 3               
00241Dr 3  B5 00                        lda 0,x         ; LSB
00241Fr 3  B4 02                        ldy 2,x
002421r 3  95 02                        sta 2,x
002423r 3  94 00                        sty 0,x
002425r 3               
002425r 3  B5 01                        lda 1,x         ; MSB
002427r 3  B4 03                        ldy 3,x
002429r 3  95 03                        sta 3,x
00242Br 3  94 01                        sty 1,x
00242Dr 3               
00242Dr 3  60           z_swap:         rts
00242Er 3               
00242Er 3               
00242Er 3               ; ## THEN (C: orig -- ) ( -- ) "Conditional flow control"
00242Er 3               ; ## "then"  auto  ANS core
00242Er 3                       ; """http://forth-standard.org/standard/core/THEN"""
00242Er 3               xt_then:
00242Er 3                               ; Get the address to jump to.
00242Er 3  20 rr rr                     jsr xt_here
002431r 3               
002431r 3                               ; Stuff HERE in for the branch address back
002431r 3                               ; at the IF or ELSE (origination address is on stack).
002431r 3  20 rr rr                     jsr xt_swap
002434r 3  20 rr rr                     jsr xt_store
002437r 3               
002437r 3  60           z_then:         rts
002438r 3               
002438r 3               
002438r 3               ; ## THRU ( scr# scr# -- ) "Load screens in the given range"
002438r 3               ; ## "thru"  tested  ANS block ext
002438r 3                       ; """https://forth-standard.org/standard/block/THRU"""
002438r 3               
002438r 3               xt_thru:
002438r 3  20 rr rr                     jsr underflow_2
00243Br 3               
00243Br 3                               ; We need to loop here, and can't use the data stack
00243Br 3                               ; because the LOADed screens might use it.  We'll
00243Br 3                               ; need to use the same trick that DO loops use, holding
00243Br 3                               ; the limit and current index on the return stack.
00243Br 3               
00243Br 3                               ; Put the ending screen number on the return stack
00243Br 3  B5 01                        lda 1,x
00243Dr 3  48                           pha
00243Er 3  B5 00                        lda 0,x
002440r 3  48                           pha
002441r 3  E8                           inx
002442r 3  E8                           inx
002443r 3               @thru_loop:
002443r 3                               ; Put the starting screen number on the stack,
002443r 3                               ; but keep a copy
002443r 3  B5 01                        lda 1,x
002445r 3  48                           pha
002446r 3  B5 00                        lda 0,x
002448r 3  48                           pha
002449r 3               
002449r 3                               ; Load this screen.
002449r 3  20 rr rr                     jsr xt_load
00244Cr 3               
00244Cr 3                               ; Get the number and limit back off the stack.  Rather than
00244Cr 3                               ; waste time making room on the stack, just use tmp1 and tmp2.
00244Cr 3               
00244Cr 3                               ; Get the screen we just loaded.
00244Cr 3  68                           pla
00244Dr 3  85 rr                        sta tmp1
00244Fr 3  68                           pla
002450r 3  85 rr                        sta tmp1+1
002452r 3               
002452r 3                               ; Get the ending screen.
002452r 3  68                           pla
002453r 3  85 rr                        sta tmp2
002455r 3  68                           pla
002456r 3  85 rr                        sta tmp2+1
002458r 3               
002458r 3                               ; See if we just loaded the last screen.
002458r 3                               ; A already has the MSB of the last screen in it.
002458r 3  C5 rr                        cmp tmp1+1
00245Ar 3  D0 08                        bne @next_screen
00245Cr 3  A5 rr                        lda tmp2        ; Compare the LSB
00245Er 3  C5 rr                        cmp tmp1
002460r 3  D0 02                        bne @next_screen
002462r 3  80 18                        bra @done       ; We just did the last screen.
002464r 3               
002464r 3               @next_screen:
002464r 3                               ; Put the ending screen back on the data stack.
002464r 3  A5 rr                        lda tmp2+1
002466r 3  48                           pha
002467r 3  A5 rr                        lda tmp2
002469r 3  48                           pha
00246Ar 3               
00246Ar 3                               ; Increment the current screen.
00246Ar 3  E6 rr                        inc tmp1
00246Cr 3  D0 02                        bne @1
00246Er 3  E6 rr                        inc tmp1+1
002470r 3               @1:
002470r 3                               ; Put the current screen on the stack to prepare for
002470r 3                               ; the next loop.
002470r 3  CA                           dex
002471r 3  CA                           dex
002472r 3  A5 rr                        lda tmp1
002474r 3  95 00                        sta 0,x
002476r 3  A5 rr                        lda tmp1+1
002478r 3  95 01                        sta 1,x
00247Ar 3  80 C7                        bra @thru_loop
00247Cr 3               @done:
00247Cr 3  60           z_thru:         rts
00247Dr 3               
00247Dr 3               
00247Dr 3               
00247Dr 3               ; ## TICK ( "name" -- xt ) "Return a word's execution token (xt)"
00247Dr 3               ; ## "'"  auto  ANS core
00247Dr 3                       ; """https://forth-standard.org/standard/core/Tick"""
00247Dr 3               
00247Dr 3               xt_tick:
00247Dr 3  20 rr rr                     jsr xt_parse_name       ; ( -- addr u )
002480r 3               
002480r 3                               ; if we got a zero, there was a problem getting the
002480r 3                               ; name of the word
002480r 3  B5 00                        lda 0,x
002482r 3  15 01                        ora 1,x
002484r 3  D0 05                        bne @1
002486r 3               
002486r 3  A9 05                        lda #err_noname
002488r 3  4C rr rr                     jmp error
00248Br 3               @1:
00248Br 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt )
00248Er 3               
00248Er 3                               ; If we didn't find the word in the Dictionary, abort
00248Er 3  B5 00                        lda 0,x
002490r 3  15 01                        ora 1,x
002492r 3  D0 05                        bne @2
002494r 3               
002494r 3  A9 08                        lda #err_syntax
002496r 3  4C rr rr                     jmp error
002499r 3               @2:
002499r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt -- xt )
00249Cr 3               
00249Cr 3  60           z_tick:         rts
00249Dr 3               
00249Dr 3               
00249Dr 3               
00249Dr 3               ; ## TO ( n "name" -- ) or ( "name") "Change a value"
00249Dr 3               ; ## "to"  auto  ANS core ext
00249Dr 3                       ; """https://forth-standard.org/standard/core/TO
00249Dr 3                       ; Gives a new value to a, uh, VALUE.
00249Dr 3                       ;
00249Dr 3                       ; One possible Forth
00249Dr 3                       ; implementation is  ' >BODY !  but given the problems we have
00249Dr 3                       ; with >BODY on STC Forths, we do this the hard way. Since
00249Dr 3                       ; Tali Forth uses the same code for CONSTANTs and VALUEs, you
00249Dr 3                       ; could use this to redefine a CONSTANT, but that is a no-no.
00249Dr 3                       ;
00249Dr 3                       ; Note that the standard has different behaviors for TO depending
00249Dr 3                       ; on the state (https://forth-standard.org/standard/core/TO).
00249Dr 3                       ; This makes TO state-dependent (which is bad) and also rather
00249Dr 3                       ; complex (see the Gforth implementation for comparison). This
00249Dr 3                       ; word may not be natively compiled and must be immediate. Frankly,
00249Dr 3                       ; it would have made more sense to have two words for this.
00249Dr 3                       ; """
00249Dr 3               
00249Dr 3               xt_to:
00249Dr 3                               ; One way or the other, we need the xt of the word after this
00249Dr 3                               ; one. At this point, we don't know if we are interpreted or
00249Dr 3                               ; compile, so we don't know if there is a value n on the stack,
00249Dr 3                               ; so we can't do an underflow check yet
00249Dr 3  20 rr rr                     jsr xt_tick             ; ( [n] xt )
0024A0r 3               
0024A0r 3                               ; The PFA (DFA in this case) is three bytes down,
0024A0r 3                               ; after the jump to DOCONST
0024A0r 3  B5 00                        lda 0,x                 ; LSB
0024A2r 3  18                           clc
0024A3r 3  69 03                        adc #3
0024A5r 3  85 rr                        sta tmp1
0024A7r 3  B5 01                        lda 1,x                 ; MSB
0024A9r 3  69 00                        adc #0                  ; we just want the carry
0024ABr 3  85 rr                        sta tmp1+1
0024ADr 3               
0024ADr 3  E8                           inx
0024AEr 3  E8                           inx                     ; ( [n] )
0024AFr 3               
0024AFr 3                               ; Now it gets ugly. See which state we are in
0024AFr 3  A5 rr                        lda state
0024B1r 3  05 rr                        ora state+1
0024B3r 3  F0 34                        beq @interpret
0024B5r 3               
0024B5r 3                               ; Well, we're compiling. We want to end up with simple
0024B5r 3                               ; code that just takes the number that is TOS and saves
0024B5r 3                               ; it in the address of the xt we were just given. So we
0024B5r 3                               ; want to compile this routine:
0024B5r 3                               ;
0024B5r 3                               ;       lda 0,x                 - B5 00
0024B5r 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
0024B5r 3                               ;       lda 1,x                 - B5 01
0024B5r 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
0024B5r 3                               ;       inx                     - E8
0024B5r 3                               ;       inx                     - E8
0024B5r 3                               ;
0024B5r 3                               ; which at least is nice and short. Other than that, we pretty
0024B5r 3                               ; much have to do this the hard and long way, because with the
0024B5r 3                               ; LSBs and MSBs, we can't really put the numbers in a data
0024B5r 3                               ; range and store them with a loop. Sigh.
0024B5r 3               
0024B5r 3  A0 00                        ldy #$00                ; Code for LDA 0,X
0024B7r 3  A9 B5                        lda #$B5
0024B9r 3  20 rr rr                     jsr cmpl_word
0024BCr 3               
0024BCr 3  A9 8D                        lda #$8D                ; Code for STA abs
0024BEr 3  20 rr rr                     jsr cmpl_a
0024C1r 3               
0024C1r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
0024C3r 3  A5 rr                        lda tmp1
0024C5r 3  20 rr rr                     jsr cmpl_word
0024C8r 3               
0024C8r 3  A0 01                        ldy #$01                ; Code for LDA 1,X
0024CAr 3  A9 B5                        lda #$B5
0024CCr 3  20 rr rr                     jsr cmpl_word
0024CFr 3               
0024CFr 3  A9 8D                        lda #$8D                ; Code for STA abs
0024D1r 3  20 rr rr                     jsr cmpl_a
0024D4r 3               
0024D4r 3  E6 rr                        inc tmp1                ; Calculate MSB
0024D6r 3  D0 02                        bne @1
0024D8r 3  E6 rr                        inc tmp1+1
0024DAr 3               @1:
0024DAr 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
0024DCr 3  A5 rr                        lda tmp1
0024DEr 3  20 rr rr                     jsr cmpl_word
0024E1r 3               
0024E1r 3  A0 E8                        ldy #$E8                ; Code for INX
0024E3r 3  98                           tya
0024E4r 3  20 rr rr                     jsr cmpl_word
0024E7r 3               
0024E7r 3  80 0F                        bra @done
0024E9r 3               
0024E9r 3               @interpret:
0024E9r 3                               ; We're interpreting, so we arrive here with n
0024E9r 3                               ; on the stack. This is an annoying place to put
0024E9r 3                               ; the underflow check because we can't
0024E9r 3                               ; automatically strip it out
0024E9r 3  20 rr rr                     jsr underflow_1
0024ECr 3               
0024ECr 3                               ; We skip over the jump to DOCONST and store the number
0024ECr 3                               ; in the Program Field Area (PDF, in this case more a
0024ECr 3                               ; Data Field Area
0024ECr 3  B5 00                        lda 0,x
0024EEr 3  92 rr                        sta (tmp1)              ; LSB
0024F0r 3               
0024F0r 3  A0 01                        ldy #1
0024F2r 3  B5 01                        lda 1,x                 ; MSB
0024F4r 3  91 rr                        sta (tmp1),y            ; fall through to common
0024F6r 3               
0024F6r 3  E8                           inx                     ; DROP
0024F7r 3  E8                           inx
0024F8r 3               @done:
0024F8r 3  60           z_to:           rts
0024F9r 3               
0024F9r 3               
0024F9r 3               
0024F9r 3               ; ## TO_BODY ( xt -- addr ) "Return a word's Code Field Area (CFA)"
0024F9r 3               ; ## ">body"  auto  ANS core
0024F9r 3                       ; """https://forth-standard.org/standard/core/toBODY
0024F9r 3                       ; Given a word's execution token (xt), return the address of the
0024F9r 3                       ; start of that word's parameter field (PFA). This is defined as the
0024F9r 3                       ; address that HERE would return right after CREATE.
0024F9r 3                       ;
0024F9r 3                       ; This is a
0024F9r 3                       ; difficult word for STC Forths, because most words don't actually
0024F9r 3                       ; have a Code Field Area (CFA) to skip. We solve this by having CREATE
0024F9r 3                       ; add a flag, "has CFA" (HC), in the header so >BODY know to skip
0024F9r 3                       ; the subroutine jumps to DOVAR, DOCONST, or DODOES
0024F9r 3                       ; """
0024F9r 3               
0024F9r 3               xt_to_body:
0024F9r 3  20 rr rr                     jsr underflow_1
0024FCr 3               
0024FCr 3                               ; Ideally, xt already points to the CFA. We just need to check
0024FCr 3                               ; the HC flag for special cases
0024FCr 3  20 rr rr                     jsr xt_dup              ; ( xt xt )
0024FFr 3  20 rr rr                     jsr xt_int_to_name      ; ( xt nt )
002502r 3               
002502r 3                               ; The status byte is nt+1
002502r 3  F6 00                        inc 0,x
002504r 3  D0 02                        bne @1
002506r 3  F6 01                        inc 1,x
002508r 3               @1:
002508r 3  A1 00                        lda (0,x)               ; get status byte
00250Ar 3  29 20                        and #HC
00250Cr 3  F0 0D                        beq @no_cfa
00250Er 3               
00250Er 3                               ; We've got a DOVAR, DOCONST, DODEFER, DODOES or whatever,
00250Er 3                               ; so we add three to xt, which is NOS
00250Er 3  18                           clc
00250Fr 3  B5 02                        lda 2,x         ; LSB
002511r 3  69 03                        adc #3
002513r 3  95 02                        sta 2,x
002515r 3  B5 03                        lda 3,x         ; MSB
002517r 3  69 00                        adc #0          ; we conly care about the carry
002519r 3  95 03                        sta 3,x         ; Fall through to @no_cfa
00251Br 3               @no_cfa:
00251Br 3  E8                           inx             ; get rid of the nt
00251Cr 3  E8                           inx
00251Dr 3               @done:
00251Dr 3  60           z_to_body:      rts
00251Er 3               
00251Er 3               
00251Er 3               
00251Er 3               ; ## TO_IN ( -- addr ) "Return address of the input pointer"
00251Er 3               ; ## ">in"  auto  ANS core
00251Er 3               xt_to_in:
00251Er 3  CA                           dex
00251Fr 3  CA                           dex
002520r 3               
002520r 3  A9 rr                        lda #<toin
002522r 3  95 00                        sta 0,x
002524r 3  A9 rr                        lda #>toin      ; paranoid, should be zero
002526r 3  95 01                        sta 1,x
002528r 3               
002528r 3  60           z_to_in:        rts
002529r 3               
002529r 3               
002529r 3               ; ## TO_NUMBER ( ud addr u -- ud addr u ) "Convert a number"
002529r 3               ; ## ">number"  auto  ANS core
002529r 3                       ; """https://forth-standard.org/standard/core/toNUMBER
002529r 3                       ; Convert a string to a double number. Logic here is based on the
002529r 3                       ; routine by Phil Burk of the same name in pForth, see
002529r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
002529r 3                       ; for the original Forth code. We arrive here from NUMBER which has
002529r 3                       ; made sure that we don't have to deal with a sign and we don't have
002529r 3                       ; to deal with a dot as a last character that signalizes double -
002529r 3                       ; this should be a pure number string.
002529r 3                       ;
002529r 3                       ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we
002529r 3                       ; cannot access any of those.
002529r 3                       ;
002529r 3                       ; For the math routine, we move the inputs to the scratchpad to
002529r 3                       ; avoid having to fool around with the Data Stack.
002529r 3                       ;
002529r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
002529r 3                       ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
002529r 3                       ;     |           |           |           |           |
002529r 3                       ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
002529r 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
002529r 3                       ;
002529r 3                       ; The math routine works by converting one character to its
002529r 3                       ; numerical value (N) via DIGIT? and storing it in S+4 for
002529r 3                       ; the moment. We then multiply the UD-HI value with the radix
002529r 3                       ; (from BASE) using UM*, which returns a double-cell result. We
002529r 3                       ; discard the high cell of that result (UD-HI-HI) and store the
002529r 3                       ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
002529r 3                       ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
002529r 3                       ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
002529r 3                       ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
002529r 3                       ; storing the result back in S and S+2, before we start another
002529r 3                       ; round with it as the new UD-LO and UD-HI.
002529r 3                       ; """
002529r 3               
002529r 3               
002529r 3               xt_to_number:
002529r 3  20 rr rr                     jsr underflow_4
00252Cr 3               
00252Cr 3                               ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
00252Cr 3                               ; After this step, the original ud-lo and ud-hi will still be on
00252Cr 3                               ; the Data Stack, but will be ignored and later overwritten
00252Cr 3                               ; If >NUMBER is called by NUMBER, these should be all zeros
00252Cr 3  B5 06                        lda 6,x         ; ud-lo LSB
00252Er 3  85 rr                        sta scratch
002530r 3  B5 07                        lda 7,x         ; ud-lo MSB
002532r 3  85 rr                        sta scratch+1
002534r 3               
002534r 3  B5 04                        lda 4,x         ; ud-hi LSB
002536r 3  85 rr                        sta scratch+2
002538r 3  B5 05                        lda 5,x         ; ud-hi MSB
00253Ar 3  85 rr                        sta scratch+3
00253Cr 3               
00253Cr 3                               ; Push down one on the Data Stack to use TOS for character
00253Cr 3                               ; conversion ( ud-lo ud-hi addr u x )
00253Cr 3  CA                           dex
00253Dr 3  CA                           dex
00253Er 3               
00253Er 3               @loop:
00253Er 3                               ; Get one character based on address
00253Er 3  A1 04                        lda (4,x)
002540r 3  95 00                        sta 0,x                 ; ( ud-lo ud-hi addr u char )
002542r 3  74 01                        stz 1,x                 ; paranoid
002544r 3               
002544r 3  20 rr rr                     jsr xt_digit_question   ; ( char -- n -1 | char 0 )
002547r 3               
002547r 3                               ; This gives us ( ud-lo ud-hi addr u char f | n f ), so we
002547r 3                               ; check the flag. If it is zero, we return what we have and
002547r 3                               ; let the caller (usually NUMBER) complain
002547r 3  B5 00                        lda 0,x
002549r 3  D0 04                        bne @digit_ok
00254Br 3               
00254Br 3  E8                           inx
00254Cr 3  E8                           inx
00254Dr 3  80 67                        bra @done       ; ( ud-lo ud-hi addr u char )
00254Fr 3               
00254Fr 3               @digit_ok:
00254Fr 3                               ; Conversion was successful. We arrive here with
00254Fr 3                               ; ( ud-lo ud-hi addr u n -1 ) and can start the
00254Fr 3                               ; math routine
00254Fr 3               
00254Fr 3                               ; Save n so we don't have to fool around with the
00254Fr 3                               ; Data Stack
00254Fr 3  B5 02                        lda 2,x
002551r 3  85 rr                        sta scratch+4
002553r 3  B5 03                        lda 3,x
002555r 3  85 rr                        sta scratch+5
002557r 3               
002557r 3                               ; Now multiply ud-hi (the one in the scratchpad, not the
002557r 3                               ; original one on the Data Stack) with the radix from BASE.
002557r 3                               ; We can clobber TOS and NOS because we saved n
002557r 3  A5 rr                        lda scratch+2
002559r 3  95 02                        sta 2,x         ; NOS
00255Br 3  A5 rr                        lda scratch+3
00255Dr 3  95 03                        sta 3,x
00255Fr 3               
00255Fr 3  A5 rr                        lda base
002561r 3  95 00                        sta 0,x         ; TOS
002563r 3  74 01                        stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
002565r 3               
002565r 3                               ; UM* returns a double-celled number
002565r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
002568r 3               
002568r 3                               ; Move ud-hi-lo to safety
002568r 3  B5 02                        lda 2,x         ; ud-hi-lo
00256Ar 3  85 rr                        sta scratch+6
00256Cr 3  B5 03                        lda 3,x
00256Er 3  85 rr                        sta scratch+7
002570r 3               
002570r 3                               ; Now we multiply ud-lo, overwriting the stack entries
002570r 3  A5 rr                        lda scratch
002572r 3  95 02                        sta 2,x
002574r 3  A5 rr                        lda scratch+1
002576r 3  95 03                        sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
002578r 3               
002578r 3  A5 rr                        lda base
00257Ar 3  95 00                        sta 0,x
00257Cr 3  74 01                        stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
00257Er 3               
00257Er 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
002581r 3               
002581r 3  B5 00                        lda 0,x
002583r 3  85 rr                        sta scratch+2
002585r 3  B5 01                        lda 1,x
002587r 3  85 rr                        sta scratch+3
002589r 3               
002589r 3  B5 02                        lda 2,x
00258Br 3  85 rr                        sta scratch
00258Dr 3  B5 03                        lda 3,x
00258Fr 3  85 rr                        sta scratch+1
002591r 3               
002591r 3                               ; We add ud-lo and n, as well as ud-hi and ud-hi-lo,
002591r 3                               ; both in the scratch pad
002591r 3  18                           clc
002592r 3  A5 rr                        lda scratch     ; ud-lo LSB
002594r 3  65 rr                        adc scratch+4   ; n LSB
002596r 3  85 rr                        sta scratch     ; this is the new ud-lo
002598r 3  A5 rr                        lda scratch+1   ; ud-lo MSB
00259Ar 3  65 rr                        adc scratch+5   ; n MSB
00259Cr 3  85 rr                        sta scratch+1
00259Er 3               
00259Er 3  A5 rr                        lda scratch+2   ; LSB
0025A0r 3  65 rr                        adc scratch+6
0025A2r 3  85 rr                        sta scratch+2   ; this is the new ud-hi
0025A4r 3  A5 rr                        lda scratch+3   ; MSB
0025A6r 3  65 rr                        adc scratch+7
0025A8r 3  85 rr                        sta scratch+3
0025AAr 3               
0025AAr 3                               ; Clean up: Get rid of one of the two top elements on
0025AAr 3                               ; the Data Stack. We don't really care which one
0025AAr 3  E8                           inx
0025ABr 3  E8                           inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
0025ACr 3               
0025ACr 3                               ; One character down. Move address up
0025ACr 3  F6 04                        inc 4,x
0025AEr 3  D0 02                        bne @1
0025B0r 3  F6 05                        inc 5,x
0025B2r 3               @1:
0025B2r 3                               ; Decrease counter
0025B2r 3  D6 02                        dec 2,x
0025B4r 3  D0 88                        bne @loop
0025B6r 3               
0025B6r 3               @done:
0025B6r 3                               ; Counter has reached zero or we have an error. In both
0025B6r 3                               ; cases, we clean up the Data Stack and return. Error gives
0025B6r 3                               ; us ( ud-lo ud-hi addr u char ), regular end is
0025B6r 3                               ; ( ud-lo ud-hi addr u ud-lo )
0025B6r 3  E8                           inx
0025B7r 3  E8                           inx             ; ( ud-lo ud-hi addr u )
0025B8r 3               
0025B8r 3                               ; The new ud-lo and ud-hi are still on the scratch pad
0025B8r 3  A5 rr                        lda scratch     ; new ud-lo
0025BAr 3  95 06                        sta 6,x
0025BCr 3  A5 rr                        lda scratch+1
0025BEr 3  95 07                        sta 7,x
0025C0r 3               
0025C0r 3  A5 rr                        lda scratch+2
0025C2r 3  95 04                        sta 4,x
0025C4r 3  A5 rr                        lda scratch+3
0025C6r 3  95 05                        sta 5,x
0025C8r 3               
0025C8r 3  60           z_to_number:    rts
0025C9r 3               
0025C9r 3               
0025C9r 3               
0025C9r 3               ; ## TO_ORDER ( wid -- ) "Add wordlist at beginning of search order"
0025C9r 3               ; ## ">order"  tested  Gforth search
0025C9r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html"""
0025C9r 3               
0025C9r 3               xt_to_order:
0025C9r 3                               ; Put the wid on the return stack for now.
0025C9r 3  20 rr rr                     jsr xt_to_r
0025CCr 3               
0025CCr 3                               ; Get the current search order.
0025CCr 3  20 rr rr                     jsr xt_get_order
0025CFr 3               
0025CFr 3                               ; Get back the wid and add it to the list.
0025CFr 3  20 rr rr                     jsr xt_r_from
0025D2r 3  20 rr rr                     jsr xt_swap
0025D5r 3  20 rr rr                     jsr xt_one_plus
0025D8r 3               
0025D8r 3                               ; Set the search order with the new list.
0025D8r 3  20 rr rr                     jsr xt_set_order
0025DBr 3               
0025DBr 3  60           z_to_order:     rts
0025DCr 3               
0025DCr 3               
0025DCr 3               
0025DCr 3               ; ## TO_R ( n -- )(R: -- n) "Push TOS to the Return Stack"
0025DCr 3               ; ## ">r"  auto  ANS core
0025DCr 3                       ; """https://forth-standard.org/standard/core/toR
0025DCr 3                       ; This word is handled differently for native and for
0025DCr 3                       ; subroutine coding, see `COMPILE,`. This is a complile-only
0025DCr 3                       ; word.
0025DCr 3                       ; """
0025DCr 3               xt_to_r:
0025DCr 3                               ; Save the return address. If this word is natively
0025DCr 3                               ; coded, this is a complete waste of cycles, but
0025DCr 3                               ; required for subroutine coding
0025DCr 3  68                           pla             ; LSB
0025DDr 3  85 rr                        sta tmptos
0025DFr 3  7A                           ply             ; MSB
0025E0r 3               
0025E0r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0025E0r 3               
0025E0r 3                               ; We check for underflow in the second step, so we can
0025E0r 3                               ; strip off the stack thrashing for native compiling first
0025E0r 3  20 rr rr                     jsr underflow_1
0025E3r 3               
0025E3r 3                               ; now we can do the actual work
0025E3r 3  B5 01                        lda 1,x         ; MSB
0025E5r 3  48                           pha
0025E6r 3  B5 00                        lda 0,x         ; LSB
0025E8r 3  48                           pha
0025E9r 3               
0025E9r 3  E8                           inx
0025EAr 3  E8                           inx
0025EBr 3               
0025EBr 3                               ; --- CUT HERE FOR NATIVE CODING ---
0025EBr 3               
0025EBr 3                               ; restore return address
0025EBr 3  5A                           phy             ; MSB
0025ECr 3  A5 rr                        lda tmptos
0025EEr 3  48                           pha             ; LSB
0025EFr 3               
0025EFr 3  60           z_to_r:         rts
0025F0r 3               
0025F0r 3               
0025F0r 3               ; ## TRUE ( -- f ) "Push TRUE flag to Data Stack"
0025F0r 3               ; ## "true"  auto  ANS core ext
0025F0r 3                       ; """https://forth-standard.org/standard/core/TRUE"""
0025F0r 3               xt_true:
0025F0r 3  CA                           dex
0025F1r 3  CA                           dex
0025F2r 3  A9 FF                        lda #$FF
0025F4r 3  95 00                        sta 0,x
0025F6r 3  95 01                        sta 1,x
0025F8r 3               
0025F8r 3  60           z_true:         rts
0025F9r 3               
0025F9r 3               
0025F9r 3               ; ## TUCK ( b a -- a b a ) "Copy TOS below NOS"
0025F9r 3               ; ## "tuck"  auto  ANS core ext
0025F9r 3                       ; """https://forth-standard.org/standard/core/TUCK"""
0025F9r 3               xt_tuck:
0025F9r 3  20 rr rr                     jsr underflow_2
0025FCr 3               
0025FCr 3  CA                           dex
0025FDr 3  CA                           dex
0025FEr 3               
0025FEr 3  B4 04                        ldy 4,x         ; LSB
002600r 3  B5 02                        lda 2,x
002602r 3  95 04                        sta 4,x
002604r 3  94 02                        sty 2,x
002606r 3  95 00                        sta 0,x
002608r 3               
002608r 3  B4 05                        ldy 5,x         ; MSB
00260Ar 3  B5 03                        lda 3,x
00260Cr 3  95 05                        sta 5,x
00260Er 3  94 03                        sty 3,x         ; bba
002610r 3  95 01                        sta 1,x         ; baa
002612r 3               
002612r 3  60           z_tuck:         rts
002613r 3               
002613r 3               
002613r 3               ; ## TWO ( -- u ) "Push the number 2 to stack"
002613r 3               ; ## "2"  auto  Tali Forth
002613r 3                       ;
002613r 3                       ; This code is shared with ASSEMBLER-WORDLIST
002613r 3               xt_assembler_wordlist:
002613r 3               xt_two:
002613r 3  CA                           dex
002614r 3  CA                           dex
002615r 3  A9 02                        lda #2
002617r 3  95 00                        sta 0,x
002619r 3  74 01                        stz 1,x
00261Br 3               
00261Br 3               z_assembler_wordlist:
00261Br 3  60           z_two:          rts
00261Cr 3               
00261Cr 3               
00261Cr 3               ; ## TWO_DROP ( n n -- ) "Drop TOS and NOS"
00261Cr 3               ; ## "2drop"  auto  ANS core
00261Cr 3                       ; """https://forth-standard.org/standard/core/TwoDROP"""
00261Cr 3               xt_two_drop:
00261Cr 3  20 rr rr                     jsr underflow_2
00261Fr 3               
00261Fr 3  E8                           inx
002620r 3  E8                           inx
002621r 3  E8                           inx
002622r 3  E8                           inx
002623r 3               
002623r 3  60           z_two_drop:     rts
002624r 3               
002624r 3               
002624r 3               ; ## TWO_DUP ( a b -- a b a b ) "Duplicate first two stack elements"
002624r 3               ; ## "2dup"  auto  ANS core
002624r 3                       ; """https://forth-standard.org/standard/core/TwoDUP"""
002624r 3               xt_two_dup:
002624r 3  20 rr rr                     jsr underflow_2
002627r 3               
002627r 3  CA                           dex
002628r 3  CA                           dex
002629r 3  CA                           dex
00262Ar 3  CA                           dex
00262Br 3               
00262Br 3  B5 04                        lda 4,x         ; TOS
00262Dr 3  95 00                        sta 0,x
00262Fr 3  B5 05                        lda 5,x
002631r 3  95 01                        sta 1,x
002633r 3               
002633r 3  B5 06                        lda 6,x         ; NOS
002635r 3  95 02                        sta 2,x
002637r 3  B5 07                        lda 7,x
002639r 3  95 03                        sta 3,x
00263Br 3               
00263Br 3  60           z_two_dup:      rts
00263Cr 3               
00263Cr 3               
00263Cr 3               ; ## TWO_FETCH ( addr -- n1 n2 ) "Fetch the cell pair n1 n2 stored at addr"
00263Cr 3               ; ## "2@"  auto  ANS core
00263Cr 3                       ; """https://forth-standard.org/standard/core/TwoFetch
00263Cr 3                       ; Note n2 stored at addr and n1 in the next cell -- in our case,
00263Cr 3                       ; the next two bytes. This is equvalent to  `DUP CELL+ @ SWAP @`
00263Cr 3                       ; """
00263Cr 3               xt_two_fetch:
00263Cr 3  20 rr rr                     jsr underflow_1
00263Fr 3               
00263Fr 3  B5 00                        lda 0,x
002641r 3  85 rr                        sta tmp1
002643r 3  B4 01                        ldy 1,x
002645r 3  84 rr                        sty tmp1+1
002647r 3               
002647r 3  CA                           dex             ; reuse one stack element
002648r 3  CA                           dex
002649r 3               
002649r 3  B2 rr                        lda (tmp1)      ; copy LSB
00264Br 3  95 00                        sta 0,x
00264Dr 3  A0 01                        ldy #1          ; copy next
00264Fr 3  B1 rr                        lda (tmp1),y
002651r 3  95 01                        sta 1,x
002653r 3  C8                           iny             ; copy next
002654r 3  B1 rr                        lda (tmp1),y
002656r 3  95 02                        sta 2,x
002658r 3  C8                           iny             ; copy next
002659r 3  B1 rr                        lda (tmp1),y
00265Br 3  95 03                        sta 3,x
00265Dr 3               
00265Dr 3  60           z_two_fetch:    rts
00265Er 3               
00265Er 3               ; ## TWO_OVER ( d1 d2 -- d1 d2 d1 ) "Copy double word NOS to TOS"
00265Er 3               ; ## "2over"  auto  ANS core
00265Er 3                       ; """https://forth-standard.org/standard/core/TwoOVER"""
00265Er 3               xt_two_over:
00265Er 3  20 rr rr                     jsr underflow_4
002661r 3               
002661r 3  CA                           dex
002662r 3  CA                           dex
002663r 3  CA                           dex
002664r 3  CA                           dex
002665r 3               
002665r 3  B5 08                        lda 8,x
002667r 3  95 00                        sta 0,x
002669r 3               
002669r 3  B5 09                        lda 9,x
00266Br 3  95 01                        sta 1,x
00266Dr 3               
00266Dr 3  B5 0A                        lda 10,x
00266Fr 3  95 02                        sta 2,x
002671r 3               
002671r 3  B5 0B                        lda 11,x
002673r 3  95 03                        sta 3,x
002675r 3               
002675r 3  60           z_two_over:     rts
002676r 3               
002676r 3               
002676r 3               ; ## TWO_R_FETCH ( -- n n ) "Copy top two entries from Return Stack"
002676r 3               ; ## "2r@"  auto  ANS core ext
002676r 3                       ; """https://forth-standard.org/standard/core/TwoRFetch
002676r 3                       ;
002676r 3                       ; This is R> R> 2DUP >R >R SWAP but we can do it a lot faster in
002676r 3                       ; assembler. We use trickery to access the elements on the Return
002676r 3                       ; Stack instead of pulling the return address first and storing
002676r 3                       ; it somewhere else like for 2R> and 2>R. In this version, we leave
002676r 3                       ; it as Never Native; at some point, we should compare versions to
002676r 3                       ; see if an Always Native version would be better
002676r 3                       ; """
002676r 3               xt_two_r_fetch:
002676r 3               		; make room on the Data Stack
002676r 3  CA                           dex
002677r 3  CA                           dex
002678r 3  CA                           dex
002679r 3  CA                           dex
00267Ar 3               
00267Ar 3                               ; Get four bytes off of Return Stack. This assumes that
00267Ar 3                               ; we took a subroutine jump here so the first two entries
00267Ar 3                               ; are the return address
00267Ar 3  8A                           txa
00267Br 3  BA                           tsx
00267Cr 3  DA                           phx             ; 65c02 has no TXY, so do it the hard way
00267Dr 3  7A                           ply
00267Er 3  AA                           tax
00267Fr 3               
00267Fr 3                               ; The Return Stack addreses $0101 and $0102 are occupied by
00267Fr 3                               ; the return address for this word. This is a whole lot
00267Fr 3                               ; easier on the 65816
00267Fr 3  B9 03 01                     lda $0103,y     ; LSB of top entry
002682r 3  95 00                        sta 0,x
002684r 3  B9 04 01                     lda $0104,y     ; MSB of top entry
002687r 3  95 01                        sta 1,x
002689r 3  B9 05 01                     lda $0105,y     ; LSB of bottom entry
00268Cr 3  95 02                        sta 2,x
00268Er 3  B9 06 01                     lda $0106,y     ; MSB of top entry
002691r 3  95 03                        sta 3,x
002693r 3               
002693r 3  60           z_two_r_fetch:  rts
002694r 3               
002694r 3               
002694r 3               ; ## TWO_R_FROM ( -- n1 n2 ) (R: n1 n2 -- ) "Pull two cells from Return Stack"
002694r 3               ; ## "2r>"  auto  ANS core ext
002694r 3               	    ; """https://forth-standard.org/standard/core/TwoRfrom
002694r 3                       ; Pull top two entries from Return Stack.
002694r 3                       ;
002694r 3                       ; Is the same as
002694r 3                       ; R> R> SWAP. As with R>, the problem with the is word is that
002694r 3                       ; the top value on the ReturnStack for a STC Forth is the
002694r 3                       ; return address, which we need to get out of the way first.
002694r 3                       ; Native compile needs to be handled as a special case.
002694r 3                       ; """
002694r 3               xt_two_r_from:
002694r 3                               ; save the return address
002694r 3  68                           pla                     ; LSB
002695r 3  85 rr                        sta tmp1
002697r 3  68                           pla                     ; MSB
002698r 3  85 rr                        sta tmp1+1
00269Ar 3               
00269Ar 3                               ; --- CUT HERE FOR NATIVE CODING ---
00269Ar 3               
00269Ar 3               		; make room on stack
00269Ar 3  CA                           dex
00269Br 3  CA                           dex
00269Cr 3  CA                           dex
00269Dr 3  CA                           dex
00269Er 3               
00269Er 3                               ; In theory, we should test for underflow on the Return
00269Er 3                               ; Stack. However, given the traffic there with an STC
00269Er 3                               ; Forth, that's probably not really useful
00269Er 3               
00269Er 3                               ; now we can access the data
00269Er 3  68                           pla                     ; LSB
00269Fr 3  95 00                        sta 0,x
0026A1r 3  68                           pla                     ; MSB
0026A2r 3  95 01                        sta 1,x
0026A4r 3               
0026A4r 3  68                           pla                     ; LSB
0026A5r 3  95 02                        sta 2,x
0026A7r 3  68                           pla                     ; MSB
0026A8r 3  95 03                        sta 3,x
0026AAr 3               
0026AAr 3                               ; --- CUT HERE FOR NATIVE CODING ---
0026AAr 3               
0026AAr 3                               ; restore return address
0026AAr 3  A5 rr                        lda tmp1+1              ; MSB
0026ACr 3  48                           pha
0026ADr 3  A5 rr                        lda tmp1                ; LSB
0026AFr 3  48                           pha
0026B0r 3               
0026B0r 3  60           z_two_r_from:   rts
0026B1r 3               
0026B1r 3               
0026B1r 3               ; ## TWO_SLASH ( n -- n ) "Divide TOS by two"
0026B1r 3               ; ## "2/"  auto  ANS core
0026B1r 3                       ; """https://forth-standard.org/standard/core/TwoDiv"""
0026B1r 3               xt_two_slash:
0026B1r 3  20 rr rr                     jsr underflow_1
0026B4r 3               
0026B4r 3                               ; We can't just LSR the LSB and ROR the MSB because that
0026B4r 3                               ; would do bad things to the sign
0026B4r 3  B5 01                        lda 1,x
0026B6r 3  0A                           asl                     ; save the sign
0026B7r 3  76 01                        ror 1,x
0026B9r 3  76 00                        ror 0,x
0026BBr 3               
0026BBr 3  60           z_two_slash:    rts
0026BCr 3               
0026BCr 3               
0026BCr 3               ; ## TWO_STAR ( n -- n ) "Multiply TOS by two"
0026BCr 3               ; ## "2*"  auto  ANS core
0026BCr 3                       ; """https://forth-standard.org/standard/core/TwoTimes
0026BCr 3                       ;
0026BCr 3                       ; Also used for CELLS
0026BCr 3                       ; """
0026BCr 3               xt_two_star:
0026BCr 3               xt_cells:
0026BCr 3  20 rr rr                     jsr underflow_1
0026BFr 3               
0026BFr 3  16 00                        asl 0,x
0026C1r 3  36 01                        rol 1,x
0026C3r 3               z_cells:
0026C3r 3  60           z_two_star:     rts
0026C4r 3               
0026C4r 3               
0026C4r 3               ; ## TWO_STORE ( n1 n2 addr -- ) "Store two numbers at given address"
0026C4r 3               ; ## "2!"  auto  ANS core
0026C4r 3                       ; """https://forth-standard.org/standard/core/TwoStore
0026C4r 3                       ; Stores so n2 goes to addr and n1 to the next consecutive cell.
0026C4r 3                       ; Is equivalent to  `SWAP OVER ! CELL+ !`
0026C4r 3                       ; """
0026C4r 3               xt_two_store:
0026C4r 3  20 rr rr                     jsr underflow_3
0026C7r 3               
0026C7r 3  B5 00                        lda 0,x
0026C9r 3  85 rr                        sta tmp1
0026CBr 3  B4 01                        ldy 1,x
0026CDr 3  84 rr                        sty tmp1+1
0026CFr 3               
0026CFr 3  E8                           inx
0026D0r 3  E8                           inx
0026D1r 3               
0026D1r 3  B5 00                        lda 0,x         ; copy MSB
0026D3r 3  92 rr                        sta (tmp1)
0026D5r 3  B5 01                        lda 1,x         ; copy next
0026D7r 3  A0 01                        ldy #1
0026D9r 3  91 rr                        sta (tmp1),y
0026DBr 3  B5 02                        lda 2,x         ; copy next
0026DDr 3  C8                           iny
0026DEr 3  91 rr                        sta (tmp1),y
0026E0r 3  B5 03                        lda 3,x         ; copy MSB
0026E2r 3  C8                           iny
0026E3r 3  91 rr                        sta (tmp1),y
0026E5r 3               
0026E5r 3  E8                           inx             ; 2DROP
0026E6r 3  E8                           inx
0026E7r 3  E8                           inx
0026E8r 3  E8                           inx
0026E9r 3               
0026E9r 3  60           z_two_store:    rts
0026EAr 3               
0026EAr 3               
0026EAr 3               ; ## TWO_SWAP ( n1 n2 n3 n4 -- n3 n4 n1 n1 ) "Exchange two double words"
0026EAr 3               ; ## "2swap"  auto  ANS core
0026EAr 3                       ; """https://forth-standard.org/standard/core/TwoSWAP"""
0026EAr 3               xt_two_swap:
0026EAr 3  20 rr rr                     jsr underflow_4
0026EDr 3               
0026EDr 3                               ; 0 <-> 4
0026EDr 3  B5 00                        lda 0,x
0026EFr 3  B4 04                        ldy 4,x
0026F1r 3  95 04                        sta 4,x
0026F3r 3  94 00                        sty 0,x
0026F5r 3               
0026F5r 3                               ; 1 <-> 5
0026F5r 3  B5 01                        lda 1,x
0026F7r 3  B4 05                        ldy 5,x
0026F9r 3  95 05                        sta 5,x
0026FBr 3  94 01                        sty 1,x
0026FDr 3               
0026FDr 3                               ; 2 <-> 6
0026FDr 3  B5 02                        lda 2,x
0026FFr 3  B4 06                        ldy 6,x
002701r 3  95 06                        sta 6,x
002703r 3  94 02                        sty 2,x
002705r 3               
002705r 3                               ; 3 <-> 7
002705r 3  B5 03                        lda 3,x
002707r 3  B4 07                        ldy 7,x
002709r 3  95 07                        sta 7,x
00270Br 3  94 03                        sty 3,x
00270Dr 3               
00270Dr 3  60           z_two_swap:     rts
00270Er 3               
00270Er 3               
00270Er 3               ; ## TWO_TO_R ( n1 n2 -- )(R: -- n1 n2 "Push top two entries to Return Stack"
00270Er 3               ; ## "2>r"  auto  ANS core ext
00270Er 3                       ; """https://forth-standard.org/standard/core/TwotoR
00270Er 3                       ; Push top two entries to Return Stack.
00270Er 3                       ;
00270Er 3                       ; The same as SWAP >R >R
00270Er 3                       ; except that if we jumped here, the return address will be in the
00270Er 3                       ; way. May not be natively compiled unless we're clever and use
00270Er 3                       ; special routines.
00270Er 3                       ; """
00270Er 3               xt_two_to_r:
00270Er 3                               ; save the return address
00270Er 3  68                           pla             ; LSB
00270Fr 3  85 rr                        sta tmp1
002711r 3  68                           pla             ; MSB
002712r 3  85 rr                        sta tmp1+1
002714r 3               
002714r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002714r 3               
002714r 3  20 rr rr                     jsr underflow_2
002717r 3               
002717r 3                               ; now we can move the data
002717r 3  B5 03                        lda 3,x         ; MSB
002719r 3  48                           pha
00271Ar 3  B5 02                        lda 2,x         ; LSB
00271Cr 3  48                           pha
00271Dr 3               
00271Dr 3                               ; now we can move the data
00271Dr 3  B5 01                        lda 1,x         ; MSB
00271Fr 3  48                           pha
002720r 3  B5 00                        lda 0,x         ; LSB
002722r 3  48                           pha
002723r 3               
002723r 3  E8                           inx
002724r 3  E8                           inx
002725r 3  E8                           inx
002726r 3  E8                           inx
002727r 3               
002727r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002727r 3               
002727r 3                               ; restore return address
002727r 3  A5 rr                        lda tmp1+1      ; MSB
002729r 3  48                           pha
00272Ar 3  A5 rr                        lda tmp1        ; LSB
00272Cr 3  48                           pha
00272Dr 3               
00272Dr 3  60           z_two_to_r:     rts
00272Er 3               
00272Er 3               
00272Er 3               ; ## TWO_CONSTANT (C: d "name" -- ) ( -- d) "Create a constant for a double word"
00272Er 3               ; ## "2constant"  auto  ANS double
00272Er 3                       ; """https://forth-standard.org/standard/double/TwoCONSTANT
00272Er 3                       ;
00272Er 3                       ; Based on the Forth code
00272Er 3                       ; : 2CONSTANT ( D -- )  CREATE SWAP , , DOES> DUP @ SWAP CELL+ @ ;
00272Er 3                       ; """
00272Er 3               xt_two_constant:
00272Er 3  20 rr rr                     jsr underflow_2
002731r 3               
002731r 3  20 rr rr                     jsr xt_create
002734r 3  20 rr rr                     jsr xt_swap
002737r 3  20 rr rr                     jsr xt_comma
00273Ar 3  20 rr rr                     jsr xt_comma
00273Dr 3               
00273Dr 3  20 rr rr                     jsr does_runtime    ; does> turns into these two routines.
002740r 3  20 rr rr                     jsr dodoes
002743r 3               
002743r 3  20 rr rr                     jsr xt_dup
002746r 3  20 rr rr                     jsr xt_fetch
002749r 3  20 rr rr                     jsr xt_swap
00274Cr 3  20 rr rr                     jsr xt_cell_plus
00274Fr 3  20 rr rr                     jsr xt_fetch
002752r 3               
002752r 3  60           z_two_constant: rts
002753r 3               
002753r 3               
002753r 3               ; ## TWO_LITERAL (C: d -- ) ( -- d) "Compile a literal double word"
002753r 3               ; ## "2literal"  auto  ANS double
002753r 3                       ; """https://forth-standard.org/standard/double/TwoLITERAL"""
002753r 3                       ; Based on the Forth code
002753r 3                       ; : 2LITERAL ( D -- ) SWAP POSTPONE LITERAL POSTPONE LITERAL ; IMMEDIATE
002753r 3                       ; """
002753r 3               xt_two_literal:
002753r 3  20 rr rr                     jsr underflow_2 ; double number
002756r 3               
002756r 3  20 rr rr                     jsr xt_swap
002759r 3  20 rr rr                     jsr xt_literal
00275Cr 3  20 rr rr                     jsr xt_literal
00275Fr 3               
00275Fr 3  60           z_two_literal:  rts
002760r 3               
002760r 3               
002760r 3               ; ## TWO_VARIABLE ( "name" -- ) "Create a variable for a double word"
002760r 3               ; ## "2variable"  auto  ANS double
002760r 3                       ; """https://forth-standard.org/standard/double/TwoVARIABLE
002760r 3                       ; The variable is not initialized to zero.
002760r 3                       ;
002760r 3                       ; This can be realized in Forth as either
002760r 3                       ; CREATE 2 CELLS ALLOT  or just  CREATE 0 , 0 ,
002760r 3                       ; """
002760r 3               xt_two_variable:
002760r 3                               ; We just let CRATE and ALLOT do the heavy lifting
002760r 3  20 rr rr                     jsr xt_create
002763r 3               
002763r 3  CA                           dex
002764r 3  CA                           dex
002765r 3  A9 04                        lda #4
002767r 3  95 00                        sta 0,x
002769r 3  74 01                        stz 1,x
00276Br 3               
00276Br 3  20 rr rr                     jsr xt_allot
00276Er 3               
00276Er 3  60           z_two_variable: rts
00276Fr 3               
00276Fr 3               
00276Fr 3               ; ## TYPE ( addr u -- ) "Print string"
00276Fr 3               ; ## "type"  auto  ANS core
00276Fr 3                       ; """https://forth-standard.org/standard/core/TYPE
00276Fr 3                       ; Works through EMIT to allow OUTPUT revectoring.
00276Fr 3                       ; """
00276Fr 3               
00276Fr 3               xt_type:
00276Fr 3  20 rr rr                     jsr underflow_2
002772r 3               
002772r 3                               ; Save the starting address into tmp1
002772r 3  B5 02                        lda 2,x
002774r 3  85 rr                        sta tmp1
002776r 3  B5 03                        lda 3,x
002778r 3  85 rr                        sta tmp1+1
00277Ar 3               @loop:
00277Ar 3                               ; done if length is zero
00277Ar 3  B5 00                        lda 0,x
00277Cr 3  15 01                        ora 1,x
00277Er 3  F0 15                        beq @done
002780r 3               
002780r 3                               ; Send the current character
002780r 3  B2 rr                        lda (tmp1)
002782r 3  20 rr rr                     jsr emit_a      ; avoids stack foolery
002785r 3               
002785r 3                               ; Move the address along (in tmp1)
002785r 3  E6 rr                        inc tmp1
002787r 3  D0 02                        bne @1
002789r 3  E6 rr                        inc tmp1+1
00278Br 3               @1:
00278Br 3                               ; Reduce the count (on the data stack)
00278Br 3  B5 00                        lda 0,x
00278Dr 3  D0 02                        bne @2
00278Fr 3  D6 01                        dec 1,x
002791r 3               @2:
002791r 3  D6 00                        dec 0,x
002793r 3               
002793r 3  80 E5                        bra @loop
002795r 3               @done:
002795r 3  E8                           inx
002796r 3  E8                           inx
002797r 3  E8                           inx
002798r 3  E8                           inx
002799r 3               
002799r 3  60           z_type:         rts
00279Ar 3               
00279Ar 3               
00279Ar 3               
00279Ar 3               ; ## U_DOT ( u -- ) "Print TOS as unsigned number"
00279Ar 3               ; ## "u."  tested  ANS core
00279Ar 3                       ; """https://forth-standard.org/standard/core/Ud
00279Ar 3                       ;
00279Ar 3                       ; This is : U. 0 <# #S #> TYPE SPACE ; in Forth
00279Ar 3                       ; We use the internal assembler function print_u followed
00279Ar 3                       ; by a single space
00279Ar 3                       ; """
00279Ar 3               xt_u_dot:
00279Ar 3  20 rr rr                     jsr underflow_1
00279Dr 3               
00279Dr 3  20 rr rr                     jsr print_u
0027A0r 3  A9 20                        lda #AscSP
0027A2r 3  20 rr rr                     jsr emit_a
0027A5r 3               
0027A5r 3  60           z_u_dot:        rts
0027A6r 3               
0027A6r 3               
0027A6r 3               ; ## U_DOT_R ( u u -- ) "Print NOS as unsigned number right-justified with TOS width"
0027A6r 3               ; ## "u.r"  tested  ANS core ext
0027A6r 3                       ; """https://forth-standard.org/standard/core/UDotR"""
0027A6r 3               xt_u_dot_r:
0027A6r 3  20 rr rr                     jsr underflow_2
0027A9r 3               
0027A9r 3  20 rr rr                     jsr xt_to_r
0027ACr 3  20 rr rr                     jsr xt_zero
0027AFr 3  20 rr rr                     jsr xt_less_number_sign
0027B2r 3  20 rr rr                     jsr xt_number_sign_s
0027B5r 3  20 rr rr                     jsr xt_number_sign_greater
0027B8r 3  20 rr rr                     jsr xt_r_from
0027BBr 3  20 rr rr                     jsr xt_over
0027BEr 3  20 rr rr                     jsr xt_minus
0027C1r 3  20 rr rr                     jsr xt_spaces
0027C4r 3  20 rr rr                     jsr xt_type
0027C7r 3               
0027C7r 3  60           z_u_dot_r:      rts
0027C8r 3               
0027C8r 3               
0027C8r 3               ; ## U_GREATER_THAN ( n m -- f ) "Return true if NOS > TOS (unsigned)"
0027C8r 3               ; ## "u>"  auto  ANS core ext
0027C8r 3                       ; """https://forth-standard.org/standard/core/Umore"""
0027C8r 3               xt_u_greater_than:
0027C8r 3  20 rr rr                     jsr underflow_2
0027CBr 3               
0027CBr 3  B5 00                        lda 0,x
0027CDr 3  D5 02                        cmp 2,x
0027CFr 3  B5 01                        lda 1,x
0027D1r 3  F5 03                        sbc 3,x
0027D3r 3  E8                           inx
0027D4r 3  E8                           inx
0027D5r 3               
0027D5r 3  A9 00                        lda #0
0027D7r 3  69 FF                        adc #$ff
0027D9r 3  95 00                        sta 0,x         ; store flag
0027DBr 3  95 01                        sta 1,x
0027DDr 3               
0027DDr 3  60           z_u_greater_than:    rts
0027DEr 3               
0027DEr 3               ; ## U_LESS_THAN ( n m -- f ) "Return true if NOS < TOS (unsigned)"
0027DEr 3               ; ## "u<"  auto  ANS core
0027DEr 3                       ; """https://forth-standard.org/standard/core/Uless"""
0027DEr 3               xt_u_less_than:
0027DEr 3  20 rr rr                     jsr underflow_2
0027E1r 3               
0027E1r 3  B5 02                        lda 2,x
0027E3r 3  D5 00                        cmp 0,x
0027E5r 3  B5 03                        lda 3,x
0027E7r 3  F5 01                        sbc 1,x
0027E9r 3  E8                           inx
0027EAr 3  E8                           inx
0027EBr 3               
0027EBr 3  A9 00                        lda #0
0027EDr 3  69 FF                        adc #$ff
0027EFr 3  95 00                        sta 0,x         ; store flag
0027F1r 3  95 01                        sta 1,x
0027F3r 3               
0027F3r 3  60           z_u_less_than:    rts
0027F4r 3               
0027F4r 3               
0027F4r 3               ; ## UD_DOT ( d -- ) "Print double as unsigned"
0027F4r 3               ; ## "ud."  auto  Tali double
0027F4r 3                       ;
0027F4r 3                       ; """Based on the Forth code  : UD. <# #S #> TYPE SPACE ;
0027F4r 3                       ; """
0027F4r 3               xt_ud_dot:
0027F4r 3  20 rr rr                     jsr underflow_2 ; double number
0027F7r 3               
0027F7r 3  20 rr rr                     jsr xt_less_number_sign
0027FAr 3  20 rr rr                     jsr xt_number_sign_s
0027FDr 3  20 rr rr                     jsr xt_number_sign_greater
002800r 3  20 rr rr                     jsr xt_type
002803r 3  20 rr rr                     jsr xt_space
002806r 3               
002806r 3  60           z_ud_dot:        rts
002807r 3               
002807r 3               
002807r 3               ; ## UD_DOT_R ( d u -- ) "Print unsigned double right-justified u wide"
002807r 3               ; ## "ud.r"  auto  Tali double
002807r 3                       ;
002807r 3                       ; """Based on the Forth code : UD.R  >R <# #S #> R> OVER - SPACES TYPE ;
002807r 3                       ; """
002807r 3               xt_ud_dot_r:
002807r 3  20 rr rr                     jsr underflow_3
00280Ar 3               
00280Ar 3  20 rr rr                     jsr xt_to_r
00280Dr 3  20 rr rr                     jsr xt_less_number_sign
002810r 3  20 rr rr                     jsr xt_number_sign_s
002813r 3  20 rr rr                     jsr xt_number_sign_greater
002816r 3  20 rr rr                     jsr xt_r_from
002819r 3  20 rr rr                     jsr xt_over
00281Cr 3  20 rr rr                     jsr xt_minus
00281Fr 3  20 rr rr                     jsr xt_spaces
002822r 3  20 rr rr                     jsr xt_type
002825r 3               
002825r 3  60           z_ud_dot_r:      rts
002826r 3               
002826r 3               
002826r 3               ; ## UM_SLASH_MOD ( ud u -- ur u ) "32/16 -> 16 division"
002826r 3               ; ## "um/mod"  auto  ANS core
002826r 3                       ; """https://forth-standard.org/standard/core/UMDivMOD
002826r 3                       ; Divide double cell number by single cell number, returning the
002826r 3                       ; quotient as TOS and any remainder as NOS. All numbers are unsigned.
002826r 3                       ; This is the basic division operation all others use. Based on FIG
002826r 3                       ; Forth code, modified by Garth Wilson, see
002826r 3                       ; http://6502.org/source/integers/ummodfix/ummodfix.htm
002826r 3                       ;
002826r 3                       ; This uses tmp1, tmp1+1, and tmptos
002826r 3                       ; """
002826r 3               
002826r 3               xt_um_slash_mod:
002826r 3  20 rr rr                     jsr underflow_3
002829r 3               
002829r 3                               ; catch division by zero
002829r 3  B5 00                        lda 0,x
00282Br 3  15 01                        ora 1,x
00282Dr 3  D0 05                        bne @not_zero
00282Fr 3               
00282Fr 3  A9 04                        lda #err_divzero
002831r 3  4C rr rr                     jmp error
002834r 3               
002834r 3               @not_zero:
002834r 3                               ; We loop 17 times
002834r 3  A9 11                        lda #17
002836r 3  85 rr                        sta tmptos
002838r 3               
002838r 3               @loop:
002838r 3                               ; rotate low cell of dividend one bit left (LSB)
002838r 3  36 04                        rol 4,x
00283Ar 3  36 05                        rol 5,x
00283Cr 3               
00283Cr 3                               ; loop control
00283Cr 3  C6 rr                        dec tmptos
00283Er 3  F0 22                        beq @done
002840r 3               
002840r 3                               ; rotate high cell of dividend one bit left (MSB)
002840r 3  36 02                        rol 2,x
002842r 3  36 03                        rol 3,x
002844r 3               
002844r 3  64 rr                        stz tmp1        ; store the bit we got from hi cell (MSB)
002846r 3  26 rr                        rol tmp1
002848r 3               
002848r 3                               ; subtract dividend hi cell minus divisor
002848r 3  38                           sec
002849r 3  B5 02                        lda 2,x
00284Br 3  F5 00                        sbc 0,x
00284Dr 3  85 rr                        sta tmp1+1
00284Fr 3  B5 03                        lda 3,x
002851r 3  F5 01                        sbc 1,x
002853r 3               
002853r 3  A8                           tay
002854r 3  A5 rr                        lda tmp1
002856r 3  E9 00                        sbc #0
002858r 3  90 DE                        bcc @loop
00285Ar 3               
00285Ar 3                               ; make result new dividend high cell
00285Ar 3  A5 rr                        lda tmp1+1
00285Cr 3  95 02                        sta 2,x
00285Er 3  94 03                        sty 3,x         ; used as temp storage
002860r 3               
002860r 3  80 D6                        bra @loop
002862r 3               @done:
002862r 3  E8                           inx
002863r 3  E8                           inx
002864r 3               
002864r 3  20 rr rr                     jsr xt_swap
002867r 3               
002867r 3  60           z_um_slash_mod: rts
002868r 3               
002868r 3               
002868r 3               
002868r 3               ; ## UM_STAR ( u u -- ud ) "Multiply 16 x 16 -> 32"
002868r 3               ; ## "um*"  auto  ANS core
002868r 3                       ; """https://forth-standard.org/standard/core/UMTimes
002868r 3                       ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.
002868r 3                       ; Old Forth versions such as FIG Forth call this U*
002868r 3                       ;
002868r 3                       ; This is based on modified FIG Forth code by Dr. Jefyll, see
002868r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed
002868r 3                       ; discussion.
002868r 3                       ;
002868r 3                       ; We don't use the system scratch pad (SYSPAD) for temp
002868r 3                       ; storage because >NUMBER uses it as well, but instead tmp1 to
002868r 3                       ; tmp3 (tmp1 is N in the original code, tmp1+1 is N+1, etc).
002868r 3                       ;
002868r 3                       ; Consider switching to a table-supported version based on
002868r 3                       ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
002868r 3                       ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d>
002868r 3                       ; http://forum.6502.org/viewtopic.php?p=205#p205
002868r 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689
002868r 3                       ; """
002868r 3               
002868r 3               xt_um_star:
002868r 3  20 rr rr                     jsr underflow_2
00286Br 3               
00286Br 3                               ; to eliminate clc inside the loop, the value at
00286Br 3                               ; tmp1 is reduced by 1 in advance
00286Br 3  18                           clc
00286Cr 3  B5 00                        lda 0,x         ; copy TOS to tmp2
00286Er 3  E9 00                        sbc #0
002870r 3  85 rr                        sta tmp2
002872r 3               
002872r 3  B5 01                        lda 1,x
002874r 3  E9 00                        sbc #0
002876r 3  90 31                        bcc @zero       ; is TOS zero?
002878r 3  85 rr                        sta tmp2+1
00287Ar 3               
00287Ar 3  A9 00                        lda #0
00287Cr 3  85 rr                        sta tmp1
00287Er 3  86 rr                        stx tmp3        ; tested for exit from outer loop
002880r 3  CA                           dex
002881r 3  CA                           dex
002882r 3               
002882r 3               @outer_loop:
002882r 3  A0 08                        ldy #8          ; counter inner loop
002884r 3  56 04                        lsr 4,x         ; think "2,x" then later "3,x"
002886r 3               
002886r 3               @inner_loop:
002886r 3  90 0C                        bcc @no_add
002888r 3  85 rr                        sta tmp1+1      ; save time, don't CLC
00288Ar 3  A5 rr                        lda tmp1
00288Cr 3  65 rr                        adc tmp2
00288Er 3  85 rr                        sta tmp1
002890r 3  A5 rr                        lda tmp1+1
002892r 3  65 rr                        adc tmp2+1
002894r 3               
002894r 3               @no_add:
002894r 3  6A                           ror
002895r 3  66 rr                        ror tmp1
002897r 3  76 04                        ror 4,x         ; think "2,x" then later "3,x"
002899r 3               
002899r 3  88                           dey
00289Ar 3  D0 EA                        bne @inner_loop ; go back for one more shift?
00289Cr 3               
00289Cr 3  E8                           inx
00289Dr 3  E4 rr                        cpx tmp3
00289Fr 3  D0 E1                        bne @outer_loop ; go back for eight more shifts?
0028A1r 3               
0028A1r 3                               ; all done, store high word of result
0028A1r 3  95 01                        sta 1,x
0028A3r 3  A5 rr                        lda tmp1
0028A5r 3  95 00                        sta 0,x
0028A7r 3  80 04                        bra @done
0028A9r 3               
0028A9r 3               @zero:
0028A9r 3  74 02                        stz 2,x
0028ABr 3  74 03                        stz 3,x
0028ADr 3               @done:
0028ADr 3  60           z_um_star:      rts
0028AEr 3               
0028AEr 3               
0028AEr 3               
0028AEr 3               ; ## UNLOOP ( -- )(R: n1 n2 n3 ---) "Drop loop control from Return stack"
0028AEr 3               ; ## "unloop"  auto  ANS core
0028AEr 3                       ; """https://forth-standard.org/standard/core/UNLOOP
0028AEr 3                       ;
0028AEr 3                       ; Note that 6xPLA uses just as many bytes as a loop would
0028AEr 3                       ; """
0028AEr 3               xt_unloop:
0028AEr 3                               ; Drop fudge number (limit/start from DO/?DO off the
0028AEr 3                               ; return stack
0028AEr 3  68                           pla
0028AFr 3  68                           pla
0028B0r 3  68                           pla
0028B1r 3  68                           pla
0028B2r 3               
0028B2r 3                               ; Now drop the LEAVE address that was below them off
0028B2r 3                               ; the Return Stack as well
0028B2r 3  68                           pla
0028B3r 3  68                           pla
0028B4r 3               
0028B4r 3  60           z_unloop:       rts
0028B5r 3               
0028B5r 3               
0028B5r 3               ; ## UNTIL (C: dest -- ) ( -- ) "Loop flow control"
0028B5r 3               ; ## "until"  auto  ANS core
0028B5r 3                       ; """http://forth-standard.org/standard/core/UNTIL"""
0028B5r 3               xt_until:
0028B5r 3                               ; Compile a 0BRANCH
0028B5r 3  A0 rr                        ldy #>zero_branch_runtime
0028B7r 3  A9 rr                        lda #<zero_branch_runtime
0028B9r 3  20 rr rr                     jsr cmpl_subroutine
0028BCr 3               
0028BCr 3                               ; The address to loop back to is on the stack.
0028BCr 3                               ; Just compile it as the destination for the
0028BCr 3                               ; 0branch.
0028BCr 3  20 rr rr                     jsr xt_comma
0028BFr 3               
0028BFr 3  60           z_until:        rts
0028C0r 3               
0028C0r 3               
0028C0r 3               ; ## UNUSED ( -- u ) "Return size of space available to Dictionary"
0028C0r 3               ; ## "unused"  auto  ANS core ext
0028C0r 3                       ; """https://forth-standard.org/standard/core/UNUSED
0028C0r 3                       ; UNUSED does not include the ACCEPT history buffers. Total RAM
0028C0r 3                       ; should be HERE + UNUSED + <history buffer size>, the last of which
0028C0r 3                       ; defaults to $400
0028C0r 3                       ; """
0028C0r 3               xt_unused:
0028C0r 3  CA                           dex
0028C1r 3  CA                           dex
0028C2r 3               
0028C2r 3  A9 FF                        lda #<cp_end
0028C4r 3  38                           sec
0028C5r 3  E5 rr                        sbc cp
0028C7r 3  95 00                        sta 0,x
0028C9r 3               
0028C9r 3  A9 7F                        lda #>cp_end
0028CBr 3  E5 rr                        sbc cp+1
0028CDr 3  95 01                        sta 1,x
0028CFr 3               
0028CFr 3  60           z_unused:       rts
0028D0r 3               
0028D0r 3               
0028D0r 3               ; ## UPDATE ( -- ) "Mark current block as dirty"
0028D0r 3               ; ## "update"  auto  ANS block
0028D0r 3                       ; """https://forth-standard.org/standard/block/UPDATE"""
0028D0r 3               xt_update:
0028D0r 3                               ; Turn on the dirty bit. We can't use TSB here because it only
0028D0r 3                               ; has Absolute and Direct Pages addressing modes
0028D0r 3  A0 2C                        ldy #buffstatus_offset
0028D2r 3  B1 rr                        lda (up),y
0028D4r 3  09 02                        ora #2          ; Turn on dirty flag (bit 2)
0028D6r 3  91 rr                        sta (up),y
0028D8r 3               
0028D8r 3  60           z_update:       rts
0028D9r 3               
0028D9r 3               
0028D9r 3               ; ## USERADDR ( -- addr ) "Push address of base address of user variables"
0028D9r 3               ; ## "useraddr"  tested  Tali Forth
0028D9r 3               xt_useraddr:
0028D9r 3  CA                           dex
0028DAr 3  CA                           dex
0028DBr 3  A9 rr                        lda #<up
0028DDr 3  95 00                        sta 0,x
0028DFr 3  A9 rr                        lda #>up
0028E1r 3  95 01                        sta 1,x
0028E3r 3               
0028E3r 3  60           z_useraddr:     rts
0028E4r 3               
0028E4r 3               
0028E4r 3               ; ## VALUE ( n "name" -- ) "Define a value"
0028E4r 3               ; ## "value"  auto  ANS core
0028E4r 3                       ; """https://forth-standard.org/standard/core/VALUE
0028E4r 3                       ;
0028E4r 3                       ; This is a dummy header for the WORDLIST. The actual code is
0028E4r 3                       ; identical to that of CONSTANT
0028E4r 3                       ; """
0028E4r 3               
0028E4r 3               
0028E4r 3               ; ## VARIABLE ( "name" -- ) "Define a variable"
0028E4r 3               ; ## "variable"  auto  ANS core
0028E4r 3                       ; """https://forth-standard.org/standard/core/VARIABLE
0028E4r 3                       ; There are various Forth definitions for this word, such as
0028E4r 3                       ; `CREATE 1 CELLS ALLOT`  or  `CREATE 0 ,`  We use a variant of the
0028E4r 3                       ; second one so the variable is initialized to zero
0028E4r 3                       ; """
0028E4r 3               xt_variable:
0028E4r 3                               ; we let CREATE do the heavy lifting
0028E4r 3  20 rr rr                     jsr xt_create
0028E7r 3               
0028E7r 3                               ; there is no "STZ (CP)" so we have to do this the hard
0028E7r 3                               ; way
0028E7r 3  A9 00                        lda #0
0028E9r 3               
0028E9r 3  92 rr                        sta (cp)
0028EBr 3  E6 rr                        inc cp
0028EDr 3  D0 02                        bne @1
0028EFr 3  E6 rr                        inc cp+1
0028F1r 3               @1:
0028F1r 3  92 rr                        sta (cp)
0028F3r 3  E6 rr                        inc cp
0028F5r 3  D0 02                        bne @2
0028F7r 3  E6 rr                        inc cp+1
0028F9r 3               @2:
0028F9r 3                               ; Now we need to adjust the length of the complete word by two
0028F9r 3  20 rr rr                     jsr adjust_z
0028FCr 3               
0028FCr 3  60           z_variable:     rts
0028FDr 3               
0028FDr 3               
0028FDr 3               ; ## WHILE ( C: dest -- orig dest ) ( x -- ) "Loop flow control"
0028FDr 3               ; ## "while"  auto  ANS core
0028FDr 3                       ; """http://forth-standard.org/standard/core/WHILE"""
0028FDr 3               xt_while:
0028FDr 3                               ; Compile a 0branch
0028FDr 3  A0 rr                        ldy #>zero_branch_runtime
0028FFr 3  A9 rr                        lda #<zero_branch_runtime
002901r 3  20 rr rr                     jsr cmpl_subroutine
002904r 3               
002904r 3                               ; Put the address (here) where the destination
002904r 3                               ; address needs to go so it can be put there later.
002904r 3  20 rr rr                     jsr xt_here
002907r 3               
002907r 3                               ; Fill in the destination address with 0 for now.
002907r 3  20 rr rr                     jsr xt_zero
00290Ar 3  20 rr rr                     jsr xt_comma
00290Dr 3               
00290Dr 3                               ; Swap the two addresses on the stack.
00290Dr 3  20 rr rr                     jsr xt_swap
002910r 3               
002910r 3  60           z_while:        rts
002911r 3               
002911r 3               
002911r 3               ; ## WITHIN ( n1 n2 n3 -- ) "See if within a range"
002911r 3               ; ## "within"  auto  ANS core ext
002911r 3                       ; """https://forth-standard.org/standard/core/WITHIN
002911r 3                       ;
002911r 3                       ; This an assembler version of the ANS Forth implementation
002911r 3                       ; at https://forth-standard.org/standard/core/WITHIN which is
002911r 3                       ; OVER - >R - R> U<  note there is an alternative high-level version
002911r 3                       ; ROT TUCK > -ROT > INVERT AND
002911r 3                       ; """"
002911r 3               xt_within:
002911r 3  20 rr rr                     jsr underflow_3
002914r 3               
002914r 3  20 rr rr                     jsr xt_over
002917r 3  20 rr rr                     jsr xt_minus
00291Ar 3  20 rr rr                     jsr xt_to_r
00291Dr 3  20 rr rr                     jsr xt_minus
002920r 3  20 rr rr                     jsr xt_r_from
002923r 3  20 rr rr                     jsr xt_u_less_than
002926r 3               
002926r 3  60           z_within:       rts
002927r 3               
002927r 3               
002927r 3               ; ## WORD ( char "name " -- caddr ) "Parse input stream"
002927r 3               ; ## "word"  auto  ANS core
002927r 3                       ; """https://forth-standard.org/standard/core/WORD
002927r 3                       ; Obsolete parsing word included for backwards compatibility only.
002927r 3                       ; Do not use this, use `PARSE` or `PARSE-NAME`. Skips leading delimiters
002927r 3                       ; and copies word to storage area for a maximum size of 255 bytes.
002927r 3                       ; Returns the result as a counted string (requires COUNT to convert
002927r 3                       ; to modern format), and inserts a space after the string. See "Forth
002927r 3                       ; Programmer's Handbook" 3rd edition p. 159 and
002927r 3                       ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
002927r 3                       ; for discussions of why you shouldn't be using WORD anymore.
002927r 3                       ;
002927r 3                       ; Forth
002927r 3                       ; would be   PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
002927r 3                       ; We only allow input of 255 chars. Seriously, use PARSE-NAME.
002927r 3                       ; """
002927r 3               
002927r 3               xt_word:
002927r 3  20 rr rr                     jsr underflow_1
00292Ar 3               
00292Ar 3                               ; Skip over leading delimiters - this is like PARSE-NAME,
00292Ar 3                               ; but unlike PARSE
00292Ar 3  A4 rr                        ldy toin                ; >IN
00292Cr 3               @loop:
00292Cr 3  C4 rr                        cpy ciblen              ; quit if end of input
00292Er 3  F0 09                        beq @found_char
002930r 3  B1 rr                        lda (cib),y
002932r 3  D5 00                        cmp 0,x                 ; ASCII of delimiter
002934r 3  D0 03                        bne @found_char
002936r 3               
002936r 3  C8                           iny
002937r 3  80 F3                        bra @loop
002939r 3               @found_char:
002939r 3                               ; Save index of where word starts
002939r 3  84 rr                        sty toin
00293Br 3               
00293Br 3                               ; The real work is done by parse
00293Br 3  20 rr rr                     jsr xt_parse            ; Returns ( addr u )
00293Er 3               
00293Er 3                               ; Convert the modern ( addr u ) string format to obsolete
00293Er 3                               ; ( caddr ) format. We just do this in the Dictionary
00293Er 3  B5 00                        lda 0,x
002940r 3  92 rr                        sta (cp)                ; Save length of string
002942r 3  48                           pha                     ; Keep copy of length for later
002943r 3               
002943r 3  20 rr rr                     jsr xt_dup              ; ( addr u u )
002946r 3  A5 rr                        lda cp
002948r 3  18                           clc
002949r 3  69 01                        adc #1
00294Br 3  95 02                        sta 2,x                 ; LSB of CP
00294Dr 3  A5 rr                        lda cp+1
00294Fr 3  69 00                        adc #0
002951r 3  95 03                        sta 3,x                 ; ( addr cp+1 u )
002953r 3               
002953r 3  20 rr rr                     jsr xt_move
002956r 3               
002956r 3                               ; Return caddr
002956r 3  CA                           dex
002957r 3  CA                           dex
002958r 3  A5 rr                        lda cp
00295Ar 3  95 00                        sta 0,x
00295Cr 3  A5 rr                        lda cp+1
00295Er 3  95 01                        sta 1,x
002960r 3               
002960r 3                               ; Adjust CP
002960r 3  68                           pla                     ; length of string
002961r 3  18                           clc
002962r 3  65 rr                        adc cp
002964r 3  85 rr                        sta cp
002966r 3  A5 rr                        lda cp+1
002968r 3  69 00                        adc #0                  ; we only need the carry
00296Ar 3  85 rr                        sta cp+1
00296Cr 3  60           z_word:         rts
00296Dr 3               
00296Dr 3               
00296Dr 3               ; ## WORDLIST ( -- wid ) "Create new wordlist (from pool of 8)"
00296Dr 3               ; ## "wordlist" auto ANS search
00296Dr 3                       ; """https://forth-standard.org/standard/search/WORDLIST
00296Dr 3                       ; See the tutorial on Wordlists and the Search Order for
00296Dr 3                       ; more information.
00296Dr 3                       ; """
00296Dr 3               
00296Dr 3               xt_wordlist:
00296Dr 3                               ; Get the current number of wordlists
00296Dr 3  A0 05                        ldy #num_wordlists_offset
00296Fr 3  B1 rr                        lda (up),y      ; This is a byte variable, so only
002971r 3                                               ; the LSB needs to be checked.
002971r 3               
002971r 3                               ; See if we are already at the max.
002971r 3  C9 0C                        cmp #max_wordlists
002973r 3  D0 05                        bne @ok
002975r 3               
002975r 3                               ; Print an error message if all wordlists used.
002975r 3  A9 0B                        lda #err_wordlist
002977r 3  4C rr rr                     jmp error
00297Ar 3               
00297Ar 3               @ok:
00297Ar 3  1A                           inc             ; Increment the wordlist#
00297Br 3  91 rr                        sta (up),y      ; Save it into byte variable #wordlists
00297Dr 3  CA                           dex             ; and put it on the stack.
00297Er 3  CA                           dex
00297Fr 3  95 00                        sta 0,x
002981r 3  74 01                        stz 1,x         ; 12 is the max, so upper byte is always zero.
002983r 3               
002983r 3  60           z_wordlist:     rts
002984r 3               
002984r 3               
002984r 3               
002984r 3               ; ## WORDS ( -- ) "Print known words from Dictionary"
002984r 3               ; ## "words"  tested  ANS tools
002984r 3                       ; """https://forth-standard.org/standard/tools/WORDS
002984r 3                       ; This is pretty much only used at the command line so we can
002984r 3                       ; be slow and try to save space.
002984r 3                       ; """
002984r 3               
002984r 3               xt_words:
002984r 3                               ; we follow Gforth by starting on the next
002984r 3                               ; line
002984r 3  20 rr rr                     jsr xt_cr
002987r 3               
002987r 3                               ; We pretty-format the output by inserting a line break
002987r 3                               ; before the end of the line. We can get away with pushing
002987r 3                               ; the counter to the stack because this is usually an
002987r 3                               ; interactive word and speed is not that important
002987r 3  A9 00                        lda #0
002989r 3  48                           pha
00298Ar 3               
00298Ar 3                               ; Set up for traversing the wordlist search order.
00298Ar 3  CA                           dex                     ; Make room on the stack for
00298Br 3  CA                           dex                     ; a dictionary pointer.
00298Cr 3  64 rr                        stz tmp3                ; Start at the beginning of
00298Er 3                                                       ; the search order.
00298Er 3               @wordlist_loop:
00298Er 3  A0 1E                        ldy #num_order_offset   ; Check against byte variable #ORDER.
002990r 3  A5 rr                        lda tmp3
002992r 3  D1 rr                        cmp (up),y              ; See if we are done.
002994r 3  D0 02                        bne @have_wordlist
002996r 3               
002996r 3                               ; We ran out of wordlists to search.
002996r 3  80 45                        bra @words_done
002998r 3               
002998r 3               @have_wordlist:
002998r 3                               ; start with last word in Dictionary
002998r 3                               ; Get the current wordlist id
002998r 3  18                           clc                     ; Index into byte array SEARCH-ORDER.
002999r 3  69 1F                        adc #search_order_offset
00299Br 3  A8                           tay
00299Cr 3  B1 rr                        lda (up),y              ; Get the index into array WORDLISTS
00299Er 3               
00299Er 3                               ; Get the DP for that wordlist.
00299Er 3  0A                           asl                     ; Turn offset into cells offset.
00299Fr 3  18                           clc
0029A0r 3  69 06                        adc #wordlists_offset
0029A2r 3  A8                           tay
0029A3r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
0029A5r 3  95 00                        sta 0,x                 ; on the stack. ( nt )
0029A7r 3  C8                           iny
0029A8r 3  B1 rr                        lda (up),y
0029AAr 3  95 01                        sta 1,x
0029ACr 3               
0029ACr 3               @loop:
0029ACr 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0029AFr 3  20 rr rr                     jsr xt_name_to_string   ; ( nt addr u )
0029B2r 3               
0029B2r 3                               ; Insert line break if we're about to go past the end of the
0029B2r 3                               ; line
0029B2r 3  68                           pla
0029B3r 3  18                           clc
0029B4r 3  75 00                        adc 0,x
0029B6r 3  1A                           inc                     ; don't forget the space between words
0029B7r 3  C9 4F                        cmp #MAX_LINE_LENGTH    ; usually 79
0029B9r 3  90 06                        bcc @1
0029BBr 3               
0029BBr 3  20 rr rr                     jsr xt_cr
0029BEr 3  B5 00                        lda 0, x
0029C0r 3  1A                           inc
0029C1r 3               @1:
0029C1r 3  48                           pha
0029C2r 3  20 rr rr                     jsr xt_type             ; ( nt )
0029C5r 3               
0029C5r 3  A9 20                        lda #AscSP
0029C7r 3  20 rr rr                     jsr emit_a
0029CAr 3               
0029CAr 3                               ; get next word, which begins two down
0029CAr 3  20 rr rr                     jsr xt_one_plus         ; 1+
0029CDr 3  20 rr rr                     jsr xt_one_plus         ; 1+
0029D0r 3  20 rr rr                     jsr xt_fetch            ; @ ( nt+1 )
0029D3r 3               
0029D3r 3                               ; if next address is zero, we're done
0029D3r 3  B5 00                        lda 0,x
0029D5r 3  15 01                        ora 1,x
0029D7r 3  D0 D3                        bne @loop
0029D9r 3               
0029D9r 3                               ; Move on to the next wordlist in the search order.
0029D9r 3  E6 rr                        inc tmp3
0029DBr 3  80 B1                        bra @wordlist_loop
0029DDr 3               
0029DDr 3               @words_done:
0029DDr 3  68                           pla                     ; dump counter
0029DEr 3               
0029DEr 3  E8                           inx
0029DFr 3  E8                           inx
0029E0r 3               
0029E0r 3  60           z_words:        rts
0029E1r 3               
0029E1r 3               
0029E1r 3               
0029E1r 3               ; ## WORDSIZE ( nt -- u ) "Get size of word in bytes"
0029E1r 3               ; ## "wordsize"  auto  Tali Forth
0029E1r 3                       ; """Given an word's name token (nt), return the size of the
0029E1r 3                       ; word's payload size in bytes (CFA plus PFA) in bytes. Does not
0029E1r 3                       ; count the final RTS.
0029E1r 3                       ; """
0029E1r 3               xt_wordsize:
0029E1r 3  20 rr rr                     jsr underflow_1
0029E4r 3               
0029E4r 3                               ; We get the start address of the word from its header entry
0029E4r 3                               ; for the start of the actual code (execution token, xt)
0029E4r 3                               ; which is four bytes down, and the pointer to the end of the
0029E4r 3                               ; code (z_word, six bytes down)
0029E4r 3  B5 00                        lda 0,x
0029E6r 3  85 rr                        sta tmp1
0029E8r 3  B5 01                        lda 1,x
0029EAr 3  85 rr                        sta tmp1+1
0029ECr 3               
0029ECr 3  A0 06                        ldy #6
0029EEr 3  B1 rr                        lda (tmp1),y    ; LSB of z
0029F0r 3  88                           dey
0029F1r 3  88                           dey
0029F2r 3               
0029F2r 3  38                           sec
0029F3r 3  F1 rr                        sbc (tmp1),y    ; LSB of xt
0029F5r 3  95 00                        sta 0,x
0029F7r 3               
0029F7r 3  A0 07                        ldy #7
0029F9r 3  B1 rr                        lda (tmp1),y    ; MSB of z
0029FBr 3  88                           dey
0029FCr 3  88                           dey
0029FDr 3               
0029FDr 3  F1 rr                        sbc (tmp1),y    ; MSB of xt
0029FFr 3  95 01                        sta 1,x
002A01r 3               
002A01r 3  60           z_wordsize:     rts
002A02r 3               
002A02r 3               
002A02r 3               ; ## XOR ( n n -- n ) "Logically XOR TOS and NOS"
002A02r 3               ; ## "xor"  auto  ANS core
002A02r 3                       ; """https://forth-standard.org/standard/core/XOR"""
002A02r 3               xt_xor:
002A02r 3  20 rr rr                     jsr underflow_2
002A05r 3               
002A05r 3  B5 00                        lda 0,x
002A07r 3  55 02                        eor 2,x
002A09r 3  95 02                        sta 2,x
002A0Br 3               
002A0Br 3  B5 01                        lda 1,x
002A0Dr 3  55 03                        eor 3,x
002A0Fr 3  95 03                        sta 3,x
002A11r 3               
002A11r 3  E8                           inx
002A12r 3  E8                           inx
002A13r 3               
002A13r 3  60           z_xor:          rts
002A14r 3               
002A14r 3               
002A14r 3               ; ## ZERO ( -- 0 ) "Push 0 to Data Stack"
002A14r 3               ; ## "0"  auto  Tali Forth
002A14r 3                       ; """The disassembler assumes that this routine does not use Y. Note
002A14r 3                       ; that CASE and FORTH-WORDLIST use the same routine, as the WD for Forth
002A14r 3                       ; is 0."""
002A14r 3               xt_case:
002A14r 3               xt_forth_wordlist:
002A14r 3               xt_zero:
002A14r 3  CA                           dex             ; push
002A15r 3  CA                           dex
002A16r 3  74 00                        stz 0,x
002A18r 3  74 01                        stz 1,x
002A1Ar 3               z_case:
002A1Ar 3               z_forth_wordlist:
002A1Ar 3               z_zero:
002A1Ar 3  60                           rts
002A1Br 3               
002A1Br 3               
002A1Br 3               ; ## ZERO_EQUAL ( n -- f ) "Check if TOS is zero"
002A1Br 3               ; ## "0="  auto  ANS core
002A1Br 3                       ; """https://forth-standard.org/standard/core/ZeroEqual"""
002A1Br 3               
002A1Br 3               xt_zero_equal:
002A1Br 3  20 rr rr                     jsr underflow_1
002A1Er 3               
002A1Er 3  B5 00                        lda 0,x
002A20r 3  15 01                        ora 1,x
002A22r 3  F0 04                        beq @zero
002A24r 3               
002A24r 3                               ; not a zero, so we need a FALSE flag (0)
002A24r 3  A9 00                        lda #0
002A26r 3  80 02                        bra @store
002A28r 3               @zero:
002A28r 3                               ; We have a zero, so we need a TRUE flag (-1)
002A28r 3  A9 FF                        lda #$ff
002A2Ar 3               @store:
002A2Ar 3  95 00                        sta 0,x
002A2Cr 3  95 01                        sta 1,x
002A2Er 3               
002A2Er 3  60           z_zero_equal:   rts
002A2Fr 3               
002A2Fr 3               
002A2Fr 3               
002A2Fr 3               ; ## ZERO_GREATER ( n -- f ) "Return a TRUE flag if TOS is positive"
002A2Fr 3               ; ## "0>"  auto  ANS core ext
002A2Fr 3                       ; """https://forth-standard.org/standard/core/Zeromore"""
002A2Fr 3               
002A2Fr 3               xt_zero_greater:
002A2Fr 3  20 rr rr                     jsr underflow_1
002A32r 3               
002A32r 3  A0 00                        ldy #0          ; Default is FALSE (TOS is negative)
002A34r 3               
002A34r 3  B5 01                        lda 1,x         ; MSB
002A36r 3  30 05                        bmi @done       ; TOS is negative, keep FLASE
002A38r 3  15 00                        ora 0,x
002A3Ar 3  F0 01                        beq @done       ; TOS is zero, keep FALSE
002A3Cr 3               
002A3Cr 3  88                           dey             ; TOS is postive, make true
002A3Dr 3               @done:
002A3Dr 3  98                           tya
002A3Er 3  95 00                        sta 0,x
002A40r 3  95 01                        sta 1,x
002A42r 3               
002A42r 3  60           z_zero_greater: rts
002A43r 3               
002A43r 3               
002A43r 3               
002A43r 3               ; ## ZERO_LESS ( n -- f ) "Return a TRUE flag if TOS negative"
002A43r 3               ; ## "0<"  auto  ANS core
002A43r 3                       ; """https://forth-standard.org/standard/core/Zeroless"""
002A43r 3               
002A43r 3               xt_zero_less:
002A43r 3  20 rr rr                     jsr underflow_1
002A46r 3               
002A46r 3  A0 00                        ldy #0          ; Default is FALSE (TOS positive)
002A48r 3               
002A48r 3  B5 01                        lda 1,x         ; MSB
002A4Ar 3  10 01                        bpl @done       ; TOS is positive, so keep FALSE
002A4Cr 3               
002A4Cr 3  88                           dey             ; TOS is negative, make TRUE
002A4Dr 3               @done:
002A4Dr 3  98                           tya
002A4Er 3  95 00                        sta 0,x
002A50r 3  95 01                        sta 1,x
002A52r 3               
002A52r 3  60           z_zero_less:    rts
002A53r 3               
002A53r 3               
002A53r 3               
002A53r 3               ; ## ZERO_UNEQUAL ( m -- f ) "Return TRUE flag if not zero"
002A53r 3               ; ## "0<>"  auto  ANS core ext
002A53r 3                       ; """https://forth-standard.org/standard/core/Zerone"""
002A53r 3               
002A53r 3               xt_zero_unequal:
002A53r 3  20 rr rr                     jsr underflow_1
002A56r 3               
002A56r 3  A0 00                        ldy #0          ; default false
002A58r 3               
002A58r 3  B5 00                        lda 0,x
002A5Ar 3  15 01                        ora 1,x
002A5Cr 3  F0 01                        beq @got_zero
002A5Er 3               
002A5Er 3  88                           dey
002A5Fr 3               @got_zero:
002A5Fr 3  98                           tya
002A60r 3  95 00                        sta 0,x
002A62r 3  95 01                        sta 1,x
002A64r 3               
002A64r 3  60           z_zero_unequal: rts
002A65r 3               
002A65r 3               
002A65r 3               
002A65r 3               ; ==========================================================
002A65r 3               ; EDITOR words
002A65r 3               
002A65r 3               ; This routine is used by both enter-screen and erase-screen
002A65r 3               ; to get a buffer for the given screen number and set SCR to
002A65r 3               ; the given screen number.  This word is not in the dictionary.
002A65r 3               xt_editor_screen_helper:
002A65r 3  20 rr rr                     jsr xt_dup
002A68r 3  20 rr rr                     jsr xt_scr
002A6Br 3  20 rr rr                     jsr xt_store
002A6Er 3  20 rr rr                     jsr xt_buffer
002A71r 3               z_editor_screen_helper:
002A71r 3  60                           rts
002A72r 3               
002A72r 3               
002A72r 3               ; ## EDITOR_ENTER_SCREEN ( scr# -- ) "Enter all lines for given screen"
002A72r 3               ; ## "enter-screen"  auto  Tali Editor
002A72r 3               
002A72r 3               xt_editor_enter_screen:
002A72r 3                               ; Set the variable SCR and get a buffer for the
002A72r 3                               ; given screen number.
002A72r 3  20 rr rr                     jsr xt_editor_screen_helper
002A75r 3               
002A75r 3                               ; Drop the buffer address.
002A75r 3  20 rr rr                     jsr xt_drop
002A78r 3               
002A78r 3                               ; Overwrite the lines one at a time.
002A78r 3  64 rr                        stz editor1
002A7Ar 3               @prompt_loop:
002A7Ar 3                               ; Put the current line number on the stack.
002A7Ar 3  CA                           dex
002A7Br 3  CA                           dex
002A7Cr 3  A5 rr                        lda editor1
002A7Er 3  95 00                        sta 0,x
002A80r 3  74 01                        stz 1,x
002A82r 3               
002A82r 3                               ; Use the O word to prompt for overwrite.
002A82r 3  20 rr rr                     jsr xt_editor_o
002A85r 3               
002A85r 3                               ; Move on to the next line.
002A85r 3  E6 rr                        inc editor1
002A87r 3  A9 10                        lda #16
002A89r 3  C5 rr                        cmp editor1
002A8Br 3  D0 ED                        bne @prompt_loop
002A8Dr 3               
002A8Dr 3               z_editor_enter_screen:
002A8Dr 3  60                           rts
002A8Er 3               
002A8Er 3               
002A8Er 3               
002A8Er 3               ; ## EDITOR_ERASE_SCREEN ( scr# -- ) "Erase all lines for given screen"
002A8Er 3               ; ## "erase-screen"  tested  Tali Editor
002A8Er 3               xt_editor_erase_screen:
002A8Er 3                               ; Set the variable SCR and get a buffer for the
002A8Er 3                               ; given screen number.
002A8Er 3  20 rr rr                     jsr xt_editor_screen_helper
002A91r 3               
002A91r 3                               ; Put 1024 (chars/screen) on stack.
002A91r 3  CA                           dex
002A92r 3  CA                           dex
002A93r 3  74 00                        stz 0,x
002A95r 3  A9 04                        lda #4          ; 4 in MSB makes 1024 ($400).
002A97r 3  95 01                        sta 1,x
002A99r 3               
002A99r 3                               ; Erase the entire block (fill with spaces).
002A99r 3  20 rr rr                     jsr xt_blank
002A9Cr 3               
002A9Cr 3                               ; Mark buffer as updated.
002A9Cr 3  20 rr rr                     jsr xt_update
002A9Fr 3               
002A9Fr 3               z_editor_erase_screen:
002A9Fr 3  60                           rts
002AA0r 3               
002AA0r 3               
002AA0r 3               ; ## EDITOR_EL ( line# -- ) "Erase the given line number"
002AA0r 3               ; ## "el"  tested  Tali Editor
002AA0r 3               xt_editor_el:
002AA0r 3                               ; Turn the line number into buffer offset.
002AA0r 3                               ; This also loads the block into the buffer if it's
002AA0r 3                               ; not there for some reason.
002AA0r 3  20 rr rr                     jsr xt_editor_line
002AA3r 3               
002AA3r 3                               ; Put 64 (# of chars/line) on the stack.
002AA3r 3  CA                           dex
002AA4r 3  CA                           dex
002AA5r 3  A9 40                        lda #64
002AA7r 3  95 00                        sta 0,x
002AA9r 3  74 01                        stz 1,x
002AABr 3               
002AABr 3                               ; Fill with spaces.
002AABr 3  20 rr rr                     jsr xt_blank
002AAEr 3               
002AAEr 3                               ; Mark buffer as updated.
002AAEr 3  20 rr rr                     jsr xt_update
002AB1r 3               
002AB1r 3  60           z_editor_el:    rts
002AB2r 3               
002AB2r 3               
002AB2r 3               ; ## EDITOR_L ( -- ) "List the current screen"
002AB2r 3               ; ## "l"  tested  Tali Editor
002AB2r 3               
002AB2r 3               xt_editor_l:
002AB2r 3                               ; Load the current screen
002AB2r 3  CA                           dex             ; Put SCR on the stack.
002AB3r 3  CA                           dex
002AB4r 3  A0 02                        ldy #scr_offset
002AB6r 3  B1 rr                        lda (up),y
002AB8r 3  95 00                        sta 0,x
002ABAr 3  C8                           iny
002ABBr 3  B1 rr                        lda (up),y
002ABDr 3  95 01                        sta 1,x
002ABFr 3  20 rr rr                     jsr xt_block    ; Get the current screen.
002AC2r 3               
002AC2r 3  20 rr rr                     jsr xt_cr
002AC5r 3               
002AC5r 3                               ; Print the screen number.
002AC5r 3                               ; We're using sliteral, so we need to set up the
002AC5r 3                               ; appropriate data structure (see sliteral)
002AC5r 3  80 08                        bra @after_screen_msg
002AC7r 3               
002AC7r 3               @screen_msg:
002AC7r 3  53 63 72 65                  .byte "Screen #"
002ACBr 3  65 6E 20 23  
002ACFr 3               
002ACFr 3               @after_screen_msg:
002ACFr 3  20 rr rr                     jsr sliteral_runtime
002AD2r 3  rr rr 08 00                  .word @screen_msg, @after_screen_msg-@screen_msg
002AD6r 3               
002AD6r 3  20 rr rr                     jsr xt_type
002AD9r 3               
002AD9r 3                               ; Put the screen number and printed size for u.r on the stack.
002AD9r 3  20 rr rr                     jsr xt_scr
002ADCr 3  20 rr rr                     jsr xt_fetch
002ADFr 3  CA                           dex
002AE0r 3  CA                           dex
002AE1r 3  A9 04                        lda #4          ; four spaces
002AE3r 3  95 00                        sta 0,x
002AE5r 3  74 01                        stz 1,x
002AE7r 3  20 rr rr                     jsr xt_u_dot_r
002AEAr 3               
002AEAr 3                               ; The address of the buffer is currently on the stack.
002AEAr 3                               ; Print 64 chars at a time. TYPE uses tmp1, so we'll
002AEAr 3                               ; keep track of the line number in tmp3.
002AEAr 3  64 rr                        stz tmp3
002AECr 3               
002AECr 3               @line_loop:
002AECr 3  20 rr rr                     jsr xt_cr
002AEFr 3               
002AEFr 3                               ; Print the line number (2-space fixed width)
002AEFr 3  CA                           dex
002AF0r 3  CA                           dex
002AF1r 3  CA                           dex
002AF2r 3  CA                           dex
002AF3r 3  74 03                        stz 3,x
002AF5r 3  A5 rr                        lda tmp3
002AF7r 3  95 02                        sta 2,x
002AF9r 3  74 01                        stz 1,x
002AFBr 3  A9 02                        lda #2
002AFDr 3  95 00                        sta 0,x
002AFFr 3  20 rr rr                     jsr xt_u_dot_r
002B02r 3  20 rr rr                     jsr xt_space
002B05r 3               
002B05r 3                               ; Print one line using the address on the stack.
002B05r 3  20 rr rr                     jsr xt_dup
002B08r 3  CA                           dex
002B09r 3  CA                           dex
002B0Ar 3  A9 40                        lda #64
002B0Cr 3  95 00                        sta 0,x
002B0Er 3  74 01                        stz 1,x
002B10r 3  20 rr rr                     jsr xt_type
002B13r 3               
002B13r 3                               ; Add 64 to the address on the stack to move to the next line.
002B13r 3  18                           clc
002B14r 3  A9 40                        lda #64
002B16r 3  75 00                        adc 0,x
002B18r 3  95 00                        sta 0,x
002B1Ar 3  B5 01                        lda 1,x
002B1Cr 3  69 00                        adc #0      ; Add carry
002B1Er 3  95 01                        sta 1,x
002B20r 3               
002B20r 3                               ; Increment the line number (held in tmp3)
002B20r 3  E6 rr                        inc tmp3
002B22r 3               
002B22r 3                               ; See if we are done.
002B22r 3  A5 rr                        lda tmp3
002B24r 3  C9 10                        cmp #16
002B26r 3  D0 C4                        bne @line_loop
002B28r 3               
002B28r 3  20 rr rr                     jsr xt_cr
002B2Br 3                               ; Drop the address on the stack.
002B2Br 3  E8                           inx
002B2Cr 3  E8                           inx
002B2Dr 3               
002B2Dr 3  60           z_editor_l:            rts
002B2Er 3               
002B2Er 3               
002B2Er 3               
002B2Er 3               ; ## EDITOR_LINE ( line# -- c-addr ) "Turn a line number into address in current screen"
002B2Er 3               ; ## "line"  tested  Tali Editor
002B2Er 3               
002B2Er 3               xt_editor_line:
002B2Er 3  20 rr rr                     jsr underflow_1
002B31r 3               
002B31r 3                               ; Multiply the TOS by 64 (chars/line) to compute offset.
002B31r 3  A0 06                        ldy #6          ; *64 is same as left shift 6 times.
002B33r 3               @shift_tos_left:
002B33r 3  16 00                        asl 0,x         ; Shift TOS to the left
002B35r 3  36 01                        rol 1,x         ; ROL brings MSb from lower byte.
002B37r 3  88                           dey
002B38r 3  D0 F9                        bne @shift_tos_left
002B3Ar 3                               ; Load the current screen into a buffer
002B3Ar 3                               ; and get the buffer address
002B3Ar 3  20 rr rr                     jsr xt_scr
002B3Dr 3  20 rr rr                     jsr xt_fetch
002B40r 3  20 rr rr                     jsr xt_block
002B43r 3               
002B43r 3                               ; Add the offset to the buffer base address.
002B43r 3  20 rr rr                     jsr xt_plus
002B46r 3               
002B46r 3  60           z_editor_line:  rts
002B47r 3               
002B47r 3               
002B47r 3               
002B47r 3               ; ## EDITOR_O ( line# -- ) "Overwrite the given line"
002B47r 3               ; ## "o"  tested  Tali Editor
002B47r 3               xt_editor_o:
002B47r 3                               ; Print prompt
002B47r 3  20 rr rr                     jsr xt_cr
002B4Ar 3  20 rr rr                     jsr xt_dup
002B4Dr 3  20 rr rr                     jsr xt_two
002B50r 3  20 rr rr                     jsr xt_u_dot_r
002B53r 3  20 rr rr                     jsr xt_space
002B56r 3  A9 2A                        lda #42         ; ASCII for *
002B58r 3  20 rr rr                     jsr emit_a
002B5Br 3  20 rr rr                     jsr xt_space
002B5Er 3               
002B5Er 3                               ; Accept new input (directly into the buffer)
002B5Er 3  20 rr rr                     jsr xt_editor_line
002B61r 3  20 rr rr                     jsr xt_dup      ; Save a copy of the line address for later.
002B64r 3  CA                           dex
002B65r 3  CA                           dex
002B66r 3  A9 40                        lda #64         ; chars/line
002B68r 3  95 00                        sta 0,x
002B6Ar 3  74 01                        stz 1,x
002B6Cr 3  20 rr rr                     jsr xt_accept
002B6Fr 3               
002B6Fr 3                               ; Fill the rest with spaces.
002B6Fr 3                               ; Stack is currently ( line_address numchars_from_accept )
002B6Fr 3  20 rr rr                     jsr xt_dup
002B72r 3  20 rr rr                     jsr xt_not_rote ; -rot
002B75r 3  20 rr rr                     jsr xt_plus
002B78r 3  CA                           dex
002B79r 3  CA                           dex
002B7Ar 3  A9 40                        lda #64         ; chars/line
002B7Cr 3  95 00                        sta 0,x
002B7Er 3  74 01                        stz 1,x
002B80r 3  20 rr rr                     jsr xt_rot
002B83r 3  20 rr rr                     jsr xt_minus
002B86r 3  20 rr rr                     jsr xt_blank
002B89r 3               
002B89r 3                               ; Mark buffer as updated.
002B89r 3  20 rr rr                     jsr xt_update
002B8Cr 3               
002B8Cr 3  60           z_editor_o:     rts
002B8Dr 3               
002B8Dr 3               .ifdef LCD_BUF
002B8Dr 3               xt_haslcd:
002B8Dr 3  CA                   dex
002B8Er 3  CA                   dex
002B8Fr 3  A9 rr                lda #<has_lcd
002B91r 3  95 00                sta 0, x
002B93r 3  A9 rr                lda #>has_lcd
002B95r 3  95 01                sta 1, x
002B97r 3               z_haslcd:
002B97r 3  60                   rts
002B98r 3               
002B98r 3               
002B98r 3               ; ## LCDPUT ( s -- ) "Print single character to LCD"
002B98r 3               ; ## "lcdput" coded Custom
002B98r 3               xt_lcdput:
002B98r 3  20 rr rr                     jsr underflow_1
002B9Br 3               
002B9Br 3  B5 00                        lda 0,x
002B9Dr 3                       .ifdef lcd_print
002B9Dr 3  20 rr rr                     jsr lcd_print
002BA0r 3                       .endif
002BA0r 3  E8                           inx
002BA1r 3  E8                           inx
002BA2r 3  60           z_lcdput: rts
002BA3r 3               
002BA3r 3               
002BA3r 3               ; ## LCDPRINT ( addr u -- ) "Print string to LCD"
002BA3r 3               ; ## "lcdprint"  coded Custom
002BA3r 3               
002BA3r 3               xt_lcdprint:
002BA3r 3  20 rr rr                     jsr underflow_2
002BA6r 3               
002BA6r 3                               ; Save the starting address into tmp1
002BA6r 3  B5 02                        lda 2,x
002BA8r 3  85 rr                        sta tmp1
002BAAr 3  B5 03                        lda 3,x
002BACr 3  85 rr                        sta tmp1+1
002BAEr 3               @loop:
002BAEr 3                               ; done if length is zero
002BAEr 3  B5 00                        lda 0,x
002BB0r 3  15 01                        ora 1,x
002BB2r 3  F0 15                        beq @done
002BB4r 3               
002BB4r 3                               ; Send the current character
002BB4r 3  B2 rr                        lda (tmp1)
002BB6r 3                       .ifdef lcd_print
002BB6r 3  20 rr rr                     jsr lcd_print      ; avoids stack foolery
002BB9r 3                       .endif
002BB9r 3                               ; Move the address along (in tmp1)
002BB9r 3  E6 rr                        inc tmp1
002BBBr 3  D0 02                        bne @1
002BBDr 3  E6 rr                        inc tmp1+1
002BBFr 3               @1:
002BBFr 3                               ; Reduce the count (on the data stack)
002BBFr 3  B5 00                        lda 0,x
002BC1r 3  D0 02                        bne @2
002BC3r 3  D6 01                        dec 1,x
002BC5r 3               @2:
002BC5r 3  D6 00                        dec 0,x
002BC7r 3               
002BC7r 3  80 E5                        bra @loop
002BC9r 3               @done:
002BC9r 3  E8                           inx
002BCAr 3  E8                           inx
002BCBr 3  E8                           inx
002BCCr 3  E8                           inx
002BCDr 3               
002BCDr 3  60           z_lcdprint:         rts
002BCEr 3               
002BCEr 3               .endif
002BCEr 3               
002BCEr 3               ; ## CLS ( -- ) "clea VGA screen"
002BCEr 3               ; ## "cls" coded Custom
002BCEr 3               xt_cls:
002BCEr 3                       .ifdef vga_clear
002BCEr 3                               jsr vga_clear
002BCEr 3                       .endif
002BCEr 3               
002BCEr 3  60           z_cls: rts
002BCFr 3               
002BCFr 3               
002BCFr 3               ; ## SPI_INIT ( -- ) "Init SPI system"
002BCFr 3               ; ## "spi_init" coded Custom
002BCFr 3               xt_spi_init:
002BCFr 3               .ifdef VIA1_BASE
002BCFr 3  20 rr rr                     jsr spi_init
002BD2r 3               .endif
002BD2r 3  60           z_spi_init: rts
002BD3r 3               
002BD3r 3               
002BD3r 3               ; ## SPI_CLK_TOGGLE ( -- ) "Toggle SPI clock"
002BD3r 3               ; ## "spi_clk_toggle" coded Custom
002BD3r 3               xt_spi_clk_toggle:
002BD3r 3               .ifdef VIA1_BASE
002BD3r 3  20 rr rr                     jsr spi_clk_toggle
002BD6r 3               .endif
002BD6r 3  60           z_spi_clk_toggle: rts
002BD7r 3               
002BD7r 3               ; ## SPI_SELECT ( s -- ) "Select SPI slave"
002BD7r 3               ; ## "spi_select" coded Custom
002BD7r 3               xt_spi_select:
002BD7r 3               .ifdef VIA1_BASE
002BD7r 3  20 rr rr                     jsr underflow_1
002BDAr 3               
002BDAr 3  B5 00                        lda 0,x
002BDCr 3               
002BDCr 3  20 rr rr                     jsr spi_select
002BDFr 3               
002BDFr 3  E8                           inx
002BE0r 3  E8                           inx
002BE1r 3               .endif
002BE1r 3  60           z_spi_select: rts
002BE2r 3               
002BE2r 3               ; ## SPI_TRANSCEIVE ( s -- u ) "Send and receive spi data"
002BE2r 3               ; ## "spi_transceive" coded Custom
002BE2r 3               xt_spi_transceive:
002BE2r 3               .ifdef VIA1_BASE
002BE2r 3  20 rr rr                     jsr underflow_1
002BE5r 3               
002BE5r 3  B5 00                        lda 0,x
002BE7r 3               
002BE7r 3  20 rr rr                     jsr spi_transceive
002BEAr 3               
002BEAr 3  95 00                        sta 0,x         ; put return value in TOS
002BECr 3  74 01                        stz 1,X         ;reset value there
002BEEr 3               .endif
002BEEr 3  60           z_spi_transceive: rts
002BEFr 3               
002BEFr 3               ; ## SD_INIT ( s -- u ) "Send and receive spi data"
002BEFr 3               ; ## "sd_init" coded Custom
002BEFr 3               xt_sd_init:
002BEFr 3               .ifdef SD
002BEFr 3                               jsr underflow_1
002BEFr 3               
002BEFr 3                               lda 0,x
002BEFr 3                               jsr sd_init
002BEFr 3                               beq @ok
002BEFr 3                               pha
002BEFr 3                               printascii sd_init_error_message
002BEFr 3                               pla
002BEFr 3               @ok:
002BEFr 3                               sta 0,x         ; put return value in TOS
002BEFr 3                               stz 1,X         ;reset value there
002BEFr 3               .endif
002BEFr 3  60           z_sd_init: rts
002BF0r 3               
002BF0r 3               ; ## SD_READSECTOR ( addr d -- u ) "Read SD sector"
002BF0r 3               ; ## "sd_readsector" coded Custom
002BF0r 3               xt_sd_readsector:
002BF0r 3               
002BF0r 3               .ifdef SD
002BF0r 3                               jsr underflow_2
002BF0r 3                               ; get and save sector number (32 bit number, double)
002BF0r 3                               ; most significant part is TOS
002BF0r 3                               lda 0, x
002BF0r 3                               sta IO_SECTOR + 2
002BF0r 3                               lda 1, x
002BF0r 3                               sta IO_SECTOR + 3
002BF0r 3                               ; least significant part is NOS
002BF0r 3                               lda 2, x
002BF0r 3                               sta IO_SECTOR + 0
002BF0r 3                               lda 3, x
002BF0r 3                               sta IO_SECTOR + 1
002BF0r 3                               lda #1
002BF0r 3                               sta SD_CRC
002BF0r 3               
002BF0r 3                               jsr sd_readsector
002BF0r 3                               sta 0,x         ; put return value in TOS
002BF0r 3                               stz 1,X         ;reset value there
002BF0r 3               
002BF0r 3                               inx
002BF0r 3                               inx
002BF0r 3               .endif
002BF0r 3  60           z_sd_readsector: rts
002BF1r 3               
002BF1r 3               
002BF1r 3               ; ## time ( -- addr ) "get time storage address"
002BF1r 3               ; ## "time" coded Custom
002BF1r 3               xt_time:
002BF1r 3                       .ifdef time
002BF1r 3  A9 rr                lda #time
002BF3r 3                       .else
002BF3r 3                       lda #0
002BF3r 3                       .endif
002BF3r 3  CA                   dex
002BF4r 3  CA                   dex
002BF5r 3  95 00                sta 0,x
002BF7r 3  74 01                stz 1,x
002BF9r 3               
002BF9r 3               
002BF9r 3  60           z_time: rts
002BFAr 3               
002BFAr 3               
002BFAr 3               xt_cf_info:
002BFAr 3               .ifdef CF_ADDRESS
002BFAr 3  20 rr rr             jsr cf_info
002BFDr 3  20 rr rr             jsr xt_cr
002C00r 3  20 rr rr             jsr cf_print_id
002C03r 3  20 rr rr             jsr cf_print_capacity
002C06r 3               .endif
002C06r 3               z_cf_info:
002C06r 3  60                   rts
002C07r 3               .ifdef CF_ADDRESS
002C07r 3               cf_print_capacity:
002C07r 3  5A               phy
002C08r 3               
002C08r 3  20 rr rr         jsr xt_cr
002C0Br 3               
002C0Br 3  A0 78            ldy #120
002C0Dr 3                   ; print lba size
002C0Dr 3  B1 rr            lda (io_buffer_ptr), y
002C0Fr 3  8D rr rr         sta LBA_SIZE
002C12r 3  C8               iny
002C13r 3  B1 rr            lda (io_buffer_ptr), y
002C15r 3  8D rr rr         sta LBA_SIZE + 1
002C18r 3               
002C18r 3  C8               iny
002C19r 3  B1 rr            lda (io_buffer_ptr), y
002C1Br 3  8D rr rr         sta LBA_SIZE + 2
002C1Er 3               
002C1Er 3  C8               iny
002C1Fr 3  B1 rr            lda (io_buffer_ptr), y
002C21r 3  8D rr rr         sta LBA_SIZE + 3
002C24r 3               
002C24r 3  A0 09            ldy #9
002C26r 3               @loop:
002C26r 3  0E rr rr 2E      asl32 LBA_SIZE
002C2Ar 3  rr rr 2E rr  
002C2Er 3  rr 2E rr rr  
002C32r 3  88               dey
002C33r 3  D0 F1            bne @loop
002C35r 3               
002C35r 3  CA               dex
002C36r 3  CA               dex
002C37r 3  CA               dex
002C38r 3  CA               dex
002C39r 3               
002C39r 3  AD rr rr         lda LBA_SIZE
002C3Cr 3  95 02            sta 2, x
002C3Er 3  AD rr rr         lda LBA_SIZE + 1
002C41r 3  95 03            sta 3, x
002C43r 3  AD rr rr         lda LBA_SIZE + 2
002C46r 3  95 00            sta 0, x
002C48r 3  AD rr rr         lda LBA_SIZE + 3
002C4Br 3  95 01            sta 1, x
002C4Dr 3               
002C4Dr 3  20 rr rr         jsr xt_ud_dot
002C50r 3               
002C50r 3  CA               dex
002C51r 3  CA               dex
002C52r 3  CA               dex
002C53r 3  CA               dex
002C54r 3  A9 06            lda #6
002C56r 3  95 00            sta 0, x
002C58r 3  74 01            stz 1, x
002C5Ar 3  A9 rr            lda #<bytes_msg
002C5Cr 3  95 02            sta 2, x
002C5Er 3  A9 rr            lda #>bytes_msg
002C60r 3  95 03            sta 3, x
002C62r 3  20 rr rr         jsr xt_type
002C65r 3  20 rr rr         jsr xt_cr
002C68r 3  7A               ply
002C69r 3  60               rts
002C6Ar 3               
002C6Ar 3               
002C6Ar 3               cf_info:
002C6Ar 3  20 rr rr         jsr cf_init
002C6Dr 3  20 rr rr         jsr cf_wait
002C70r 3  A9 EC            lda #$EC
002C72r 3  8D D7 FF         sta CF_ADDRESS + 7
002C75r 3  A9 rr            lda #<IO_BUFFER
002C77r 3  85 rr            sta io_buffer_ptr
002C79r 3  A9 rr            lda #>IO_BUFFER
002C7Br 3  85 rr            sta io_buffer_ptr + 1
002C7Dr 3  20 rr rr         jsr cf_read
002C80r 3  60               rts
002C81r 3               
002C81r 3               cf_print_id:
002C81r 3                   ; print model number
002C81r 3  5A               phy
002C82r 3  A0 37            ldy #55
002C84r 3               @loop:
002C84r 3  B1 rr            lda (io_buffer_ptr), y
002C86r 3  20 rr rr         jsr kernel_putc
002C89r 3  88               dey
002C8Ar 3  B1 rr            lda (io_buffer_ptr), y
002C8Cr 3  20 rr rr         jsr kernel_putc
002C8Fr 3  C8               iny
002C90r 3  C8               iny
002C91r 3  C8               iny
002C92r 3  C0 5F            cpy #(40+55)
002C94r 3  90 EE            bcc @loop
002C96r 3  7A               ply
002C97r 3  60               rts
002C98r 3               
002C98r 3               .endif
002C98r 3               xt_io_readblock:
002C98r 3               .ifdef io_read_sector_address
002C98r 3                       ; block-read ( addr blk# -- )
002C98r 3  B5 02                lda 2, x
002C9Ar 3  85 rr                sta io_buffer_ptr
002C9Cr 3  B5 03                lda 3, x
002C9Er 3  85 rr                sta io_buffer_ptr + 1
002CA0r 3  B5 00                lda 0, x
002CA2r 3  8D rr rr             sta IO_SECTOR
002CA5r 3  B5 01                lda 1, x
002CA7r 3  8D rr rr             sta IO_SECTOR + 1
002CAAr 3  9C rr rr             stz IO_SECTOR + 2
002CADr 3  9C rr rr             stz IO_SECTOR + 3
002CB0r 3               
002CB0r 3  0E rr rr             asl IO_SECTOR                   ; multiply by two to get first sector number
002CB3r 3  2E rr rr             rol IO_SECTOR + 1
002CB6r 3  2E rr rr             rol IO_SECTOR + 2
002CB9r 3               
002CB9r 3                       ; lda io_buffer_ptr
002CB9r 3                       ; sta 0, x
002CB9r 3                       ; lda io_buffer_ptr + 1
002CB9r 3                       ; sta 1, x
002CB9r 3                       ; jsr xt_dot
002CB9r 3               
002CB9r 3  20 rr rr             jsr io_read_sector
002CBCr 3  EE rr rr D0          inc32 IO_SECTOR
002CC0r 3  0D EE rr rr  
002CC4r 3  D0 08 EE rr  
002CCEr 3  E6 rr                inc io_buffer_ptr + 1
002CD0r 3  E6 rr                inc io_buffer_ptr + 1
002CD2r 3  20 rr rr             jsr io_read_sector
002CD5r 3                       ; lda io_buffer_ptr
002CD5r 3                       ; sta 0, x
002CD5r 3                       ; lda io_buffer_ptr + 1
002CD5r 3                       ; sta 1, x
002CD5r 3                       ; jsr xt_dot
002CD5r 3               
002CD5r 3  E8                   inx
002CD6r 3  E8                   inx
002CD7r 3               
002CD7r 3               .endif
002CD7r 3               z_io_readblock:
002CD7r 3  60                   rts
002CD8r 3               
002CD8r 3               xt_io_writeblock:
002CD8r 3               .ifdef io_read_sector_address
002CD8r 3                       ; block-write ( addr blk# -- )
002CD8r 3  B5 02                lda 2, x
002CDAr 3  85 rr                sta io_buffer_ptr
002CDCr 3  B5 03                lda 3, x
002CDEr 3  85 rr                sta io_buffer_ptr + 1
002CE0r 3  B5 00                lda 0, x
002CE2r 3  8D rr rr             sta IO_SECTOR
002CE5r 3  B5 01                lda 1, x
002CE7r 3  8D rr rr             sta IO_SECTOR + 1
002CEAr 3  9C rr rr             stz IO_SECTOR + 2
002CEDr 3  9C rr rr             stz IO_SECTOR + 3
002CF0r 3               
002CF0r 3  0E rr rr             asl IO_SECTOR                   ; multiply by two to get first sector number
002CF3r 3  2E rr rr             rol IO_SECTOR + 1
002CF6r 3  2E rr rr             rol IO_SECTOR + 2
002CF9r 3               
002CF9r 3  20 rr rr             jsr io_write_sector
002CFCr 3  EE rr rr D0          inc32 IO_SECTOR
002D00r 3  0D EE rr rr  
002D04r 3  D0 08 EE rr  
002D0Er 3  E6 rr                inc io_buffer_ptr + 1
002D10r 3  E6 rr                inc io_buffer_ptr + 1
002D12r 3  20 rr rr             jsr io_write_sector
002D15r 3               
002D15r 3               
002D15r 3                       ; inc io_buffer_ptr + 1           ; jump two pages forward
002D15r 3                       ; inc io_buffer_ptr + 1
002D15r 3                       ; jsr io_write_sector
002D15r 3  E8                   inx
002D16r 3  E8                   inx
002D17r 3                       ; inx
002D17r 3                       ; inx
002D17r 3               .endif
002D17r 3               z_io_writeblock:
002D17r 3  60                   rts
002D18r 3               ; END
002D18r 3               
002D18r 3               
002D18r 2                   .include "headers.s"          ; Headers of native words
002D18r 3               ; Dictionary Headers for Tali Forth 2
002D18r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
002D18r 3               ; First version: 05. Dec 2016 (Liara Forth)
002D18r 3               ; This version: 29. Dec 2018
002D18r 3               
002D18r 3               ; Dictionary headers are kept separately from the code, which allows various
002D18r 3               ; tricks in the code. We roughly follow the Gforth terminology: The Execution
002D18r 3               ; Token (xt) is the address of the first byte of a word's code that can be, uh,
002D18r 3               ; executed; the Name Token (nt) is a pointer to the beginning of the word's
002D18r 3               ; header in the Dictionary. There the link to the next word in the Dictionary
002D18r 3               ; is always one cell down from the current word's own nt. In the code itself,
002D18r 3               ; we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.
002D18r 3               
002D18r 3               ; This gives us the following header structure:
002D18r 3               
002D18r 3               ;              8 bit     8 bit
002D18r 3               ;               LSB       MSB
002D18r 3               ; nt_word ->  +--------+--------+
002D18r 3               ;          +0 | Length | Status |
002D18r 3               ;             +--------+--------+
002D18r 3               ;          +2 | Next Header     | -> nt_next_word
002D18r 3               ;             +-----------------+
002D18r 3               ;          +4 | Start of Code   | -> xt_word
002D18r 3               ;             +-----------------+
002D18r 3               ;          +6 | End of Code     | -> z_word
002D18r 3               ;             +--------+--------+
002D18r 3               ;          +8 | Name   |        |
002D18r 3               ;             +--------+--------+
002D18r 3               ;             |        |        |
002D18r 3               ;             +--------+--------+
002D18r 3               ;             |        |  ...   | (name string does not end with a zero)
002D18r 3               ;          +n +--------+--------+
002D18r 3               
002D18r 3               ; The Status Byte is created by adding the flags defined in definitions.asm,
002D18r 3               ; which are:
002D18r 3               
002D18r 3               ;       CO - Compile Only
002D18r 3               ;       IM - Immediate Word
002D18r 3               ;       NN - Never Native Compile (must always be called by JSR)
002D18r 3               ;       AN - Always Native Compile (may not be called by JSR)
002D18r 3               ;       UF - Contains underflow check
002D18r 3               ;       HC - Has CFA (words created by CREATE and DOES> only)
002D18r 3               
002D18r 3               ; Note there are currently two bits unused.
002D18r 3               
002D18r 3               ; By default, all existing words can be natively compiled (compiled inline) or
002D18r 3               ; as a subroutine jump target; the system decides which variant to use based on
002D18r 3               ; a threshold the user can set. By default, all user-created words are flagged
002D18r 3               ; never-native. The user can override this by using the always-native word
002D18r 3               ; just after defining their new word.  The NN flag forbids native compiling,
002D18r 3               ; the AN flag forces it.
002D18r 3               
002D18r 3               ; The last word (top word in code) is always BYE. It is marked as the last word
002D18r 3               ; by its value of 0000 in its Next Header field. The words are sorted with the
002D18r 3               ; more common ones first (further down in code) so they are found earlier.
002D18r 3               ; Anything to do with output comes later (further up) because things will
002D18r 3               ; always be slow if there is a human involved.
002D18r 3               
002D18r 3               ; The initial skeleton of this list was automatically generated by a script
002D18r 3               ; in the tools folder and then sorted by hand.
002D18r 3               
002D18r 3               nt_bye:
002D18r 3  03                   .byte 3         ; length of word strings
002D19r 3  00                   .byte 0         ; status byte
002D1Ar 3  00 00                .word 0000      ; next word in Dictionary, 0000 signals end
002D1Cr 3  rr rr                .word xt_bye    ; start of code block (xt of this word)
002D1Er 3  rr rr                .word z_bye     ; end of code (RTS)
002D20r 3  62 79 65             .byte "bye"     ; word name, always lower case, not zero-terminated
002D23r 3               
002D23r 3               
002D23r 3               nt_cold:
002D23r 3  04 00                .byte 4, 0
002D25r 3  rr rr rr rr          .word nt_bye, xt_cold, z_cold
002D29r 3  rr rr        
002D2Br 3  63 6F 6C 64          .byte "cold"
002D2Fr 3               .ifdef LCD_BUF
002D2Fr 3               nt_lcdput:
002D2Fr 3  06 10                .byte 6, UF
002D31r 3  rr rr rr rr          .word nt_cold, xt_lcdput, z_lcdput
002D35r 3  rr rr        
002D37r 3  6C 63 64 70          .byte "lcdput"
002D3Br 3  75 74        
002D3Dr 3               nt_haslcd:
002D3Dr 3  06 00                .byte 6, 0
002D3Fr 3  rr rr rr rr          .word nt_lcdput, xt_haslcd, z_haslcd
002D43r 3  rr rr        
002D45r 3  68 61 73 6C          .byte "haslcd"
002D49r 3  63 64        
002D4Br 3               nt_lcdprint:
002D4Br 3  08 10                .byte 8, UF
002D4Dr 3  rr rr rr rr          .word nt_haslcd, xt_lcdprint, z_lcdprint
002D51r 3  rr rr        
002D53r 3  6C 63 64 70          .byte "lcdprint"
002D57r 3  72 69 6E 74  
002D5Br 3               .endif
002D5Br 3               nt_cls:
002D5Br 3  03 00                .byte 3, 0
002D5Dr 3               .ifdef LCD_BUF
002D5Dr 3  rr rr rr rr          .word nt_lcdprint, xt_cls, z_cls
002D61r 3  rr rr        
002D63r 3               .else
002D63r 3                       .word nt_cold, xt_cls, z_cls
002D63r 3               .endif
002D63r 3  63 6C 73             .byte "cls"
002D66r 3               
002D66r 3               .ifdef VIA1_BASE
002D66r 3               nt_spi_init:
002D66r 3  08 00                .byte 8, 0
002D68r 3  rr rr rr rr          .word nt_cls, xt_spi_init, z_spi_init
002D6Cr 3  rr rr        
002D6Er 3  73 70 69 5F          .byte "spi_init"
002D72r 3  69 6E 69 74  
002D76r 3               
002D76r 3               
002D76r 3               nt_spi_clk_toggle:
002D76r 3  0E 00                .byte 14, 0
002D78r 3  rr rr rr rr          .word nt_spi_init, xt_spi_clk_toggle, z_spi_clk_toggle
002D7Cr 3  rr rr        
002D7Er 3  73 70 69 5F          .byte "spi_clk_toggle"
002D82r 3  63 6C 6B 5F  
002D86r 3  74 6F 67 67  
002D8Cr 3               
002D8Cr 3               nt_spi_select:
002D8Cr 3  0A 00                .byte 10, 0
002D8Er 3  rr rr rr rr          .word nt_spi_clk_toggle, xt_spi_select, z_spi_select
002D92r 3  rr rr        
002D94r 3  73 70 69 5F          .byte "spi_select"
002D98r 3  73 65 6C 65  
002D9Cr 3  63 74        
002D9Er 3               
002D9Er 3               nt_spi_transceive:
002D9Er 3  0E 00                .byte 14, 0
002DA0r 3  rr rr rr rr          .word nt_spi_select, xt_spi_transceive, z_spi_transceive
002DA4r 3  rr rr        
002DA6r 3  73 70 69 5F          .byte "spi_transceive"
002DAAr 3  74 72 61 6E  
002DAEr 3  73 63 65 69  
002DB4r 3               .endif
002DB4r 3               
002DB4r 3               
002DB4r 3               .ifdef CF_ADDRESS
002DB4r 3               nt_cf_info:
002DB4r 3  04 00                .byte 4, 0
002DB6r 3                       .ifdef VIA1_BASE
002DB6r 3  rr rr rr rr          .word nt_spi_select, xt_cf_info, z_cf_info
002DBAr 3  rr rr        
002DBCr 3                       .else
002DBCr 3                       .word nt_cls, xt_cf_info, z_cf_info
002DBCr 3                       .endif
002DBCr 3  69 6E 66 6F          .byte "info"
002DC0r 3               .endif
002DC0r 3               .ifdef io_read_sector_address
002DC0r 3               nt_io_readblock:
002DC0r 3  02 10                .byte 2, UF
002DC2r 3                       .ifdef CF_ADDRESS
002DC2r 3  rr rr rr rr          .word nt_cf_info, xt_io_readblock, z_io_readblock
002DC6r 3  rr rr        
002DC8r 3                       .elseif .def(VIA1_BASE)
002DC8r 3                       .word nt_spi_transceive, xt_io_readblock, z_io_readblock
002DC8r 3                       .else
002DC8r 3                       .word nt_cls, xt_io_readblock, z_io_readblock
002DC8r 3                       .endif
002DC8r 3  72 62                .byte "rb"
002DCAr 3               nt_io_writeblock:
002DCAr 3  02 10                .byte 2, UF
002DCCr 3  rr rr rr rr          .word nt_io_readblock, xt_io_writeblock, z_io_writeblock
002DD0r 3  rr rr        
002DD2r 3  77 62                .byte "wb"
002DD4r 3               .endif
002DD4r 3               nt_time:
002DD4r 3  04 00                .byte 4, 0
002DD6r 3               .ifdef io_read_sector_address
002DD6r 3  rr rr rr rr          .word nt_io_writeblock, xt_time, z_time
002DDAr 3  rr rr        
002DDCr 3               .elseif .def(CF_ADDRESS)
002DDCr 3                       .word nt_cf_info, xt_time, z_time
002DDCr 3               .elseif .def(VIA1_BASE)
002DDCr 3                       .word nt_spi_transceive, xt_time, z_time
002DDCr 3               .else
002DDCr 3                       .word nt_cls, xt_time, z_time
002DDCr 3               .endif
002DDCr 3  74 69 6D 65          .byte "time"
002DE0r 3               
002DE0r 3               nt_ed:                  ; ed6502
002DE0r 3  02 08                .byte 2, NN
002DE2r 3  rr rr rr rr          .word nt_time, xt_ed, z_ed
002DE6r 3  rr rr        
002DE8r 3  65 64                .byte "ed"
002DEAr 3               
002DEAr 3  03 08        nt_see: .byte 3, NN
002DECr 3  rr rr rr rr          .word nt_ed, xt_see, z_see
002DF0r 3  rr rr        
002DF2r 3  73 65 65             .byte "see"
002DF5r 3               
002DF5r 3               nt_forth:
002DF5r 3  05 00                .byte 5, 0
002DF7r 3  rr rr rr rr          .word nt_see, xt_forth, z_forth
002DFBr 3  rr rr        
002DFDr 3  66 6F 72 74          .byte "forth"
002E01r 3  68           
002E02r 3               
002E02r 3               nt_order:
002E02r 3  05 00                .byte 5, 0
002E04r 3  rr rr rr rr          .word nt_forth, xt_order, z_order
002E08r 3  rr rr        
002E0Ar 3  6F 72 64 65          .byte "order"
002E0Er 3  72           
002E0Fr 3               
002E0Fr 3               nt_to_order:
002E0Fr 3  06 00                .byte 6, 0
002E11r 3  rr rr rr rr          .word nt_order, xt_to_order, z_to_order
002E15r 3  rr rr        
002E17r 3  3E 6F 72 64          .byte ">order"
002E1Br 3  65 72        
002E1Dr 3               
002E1Dr 3               nt_previous:
002E1Dr 3  08 00                .byte 8, 0
002E1Fr 3  rr rr rr rr          .word nt_to_order, xt_previous, z_previous
002E23r 3  rr rr        
002E25r 3  70 72 65 76          .byte "previous"
002E29r 3  69 6F 75 73  
002E2Dr 3               
002E2Dr 3               nt_also:
002E2Dr 3  04 00                .byte 4, 0
002E2Fr 3  rr rr rr rr          .word nt_previous, xt_also, z_also
002E33r 3  rr rr        
002E35r 3  61 6C 73 6F          .byte "also"
002E39r 3               
002E39r 3               nt_only:
002E39r 3  04 00                .byte 4, 0
002E3Br 3  rr rr rr rr          .word nt_also, xt_only, z_only
002E3Fr 3  rr rr        
002E41r 3  6F 6E 6C 79          .byte "only"
002E45r 3               
002E45r 3               nt_forth_wordlist:      ; shares code with ZERO
002E45r 3  0E 00                .byte 14, 0
002E47r 3  rr rr rr rr          .word nt_only, xt_forth_wordlist, z_forth_wordlist
002E4Br 3  rr rr        
002E4Dr 3  66 6F 72 74          .byte "forth-wordlist"
002E51r 3  68 2D 77 6F  
002E55r 3  72 64 6C 69  
002E5Br 3               
002E5Br 3               nt_editor_wordlist:     ; shares code with ONE
002E5Br 3  0F 00                .byte 15, 0
002E5Dr 3  rr rr rr rr          .word nt_forth_wordlist, xt_editor_wordlist, z_editor_wordlist
002E61r 3  rr rr        
002E63r 3  65 64 69 74          .byte "editor-wordlist"
002E67r 3  6F 72 2D 77  
002E6Br 3  6F 72 64 6C  
002E72r 3               
002E72r 3               nt_assembler_wordlist:  ; shares code with TWO
002E72r 3  12 00                .byte 18, 0
002E74r 3  rr rr rr rr          .word nt_editor_wordlist, xt_assembler_wordlist, z_assembler_wordlist
002E78r 3  rr rr        
002E7Ar 3  61 73 73 65          .byte "assembler-wordlist"
002E7Er 3  6D 62 6C 65  
002E82r 3  72 2D 77 6F  
002E8Cr 3               
002E8Cr 3               nt_root_wordlist:
002E8Cr 3  0D 00                .byte 13, 0
002E8Er 3  rr rr rr rr          .word nt_assembler_wordlist, xt_root_wordlist, z_root_wordlist
002E92r 3  rr rr        
002E94r 3  72 6F 6F 74          .byte "root-wordlist"
002E98r 3  2D 77 6F 72  
002E9Cr 3  64 6C 69 73  
002EA1r 3               
002EA1r 3               nt_get_order:
002EA1r 3  09 00                .byte 9, 0
002EA3r 3  rr rr rr rr          .word nt_root_wordlist, xt_get_order, z_get_order
002EA7r 3  rr rr        
002EA9r 3  67 65 74 2D          .byte "get-order"
002EADr 3  6F 72 64 65  
002EB1r 3  72           
002EB2r 3               
002EB2r 3               nt_set_order:
002EB2r 3  09 00                .byte 9, 0
002EB4r 3  rr rr rr rr          .word nt_get_order, xt_set_order, z_set_order
002EB8r 3  rr rr        
002EBAr 3  73 65 74 2D          .byte "set-order"
002EBEr 3  6F 72 64 65  
002EC2r 3  72           
002EC3r 3               
002EC3r 3               nt_get_current:
002EC3r 3  0B 00                .byte 11, 0
002EC5r 3  rr rr rr rr          .word nt_set_order, xt_get_current, z_get_current
002EC9r 3  rr rr        
002ECBr 3  67 65 74 2D          .byte "get-current"
002ECFr 3  63 75 72 72  
002ED3r 3  65 6E 74     
002ED6r 3               
002ED6r 3               nt_set_current:
002ED6r 3  0B 10                .byte 11, UF
002ED8r 3  rr rr rr rr          .word nt_get_current, xt_set_current, z_set_current
002EDCr 3  rr rr        
002EDEr 3  73 65 74 2D          .byte "set-current"
002EE2r 3  63 75 72 72  
002EE6r 3  65 6E 74     
002EE9r 3               
002EE9r 3               nt_search_wordlist:
002EE9r 3  0F 10                .byte 15, UF
002EEBr 3  rr rr rr rr          .word nt_set_current, xt_search_wordlist, z_search_wordlist
002EEFr 3  rr rr        
002EF1r 3  73 65 61 72          .byte "search-wordlist"
002EF5r 3  63 68 2D 77  
002EF9r 3  6F 72 64 6C  
002F00r 3               
002F00r 3               nt_wordlist:
002F00r 3  08 00                .byte 8, 0
002F02r 3  rr rr rr rr          .word nt_search_wordlist, xt_wordlist, z_wordlist
002F06r 3  rr rr        
002F08r 3  77 6F 72 64          .byte "wordlist"
002F0Cr 3  6C 69 73 74  
002F10r 3               
002F10r 3               nt_definitions:
002F10r 3  0B 00                .byte 11, 0
002F12r 3  rr rr rr rr          .word nt_wordlist, xt_definitions, z_definitions
002F16r 3  rr rr        
002F18r 3  64 65 66 69          .byte "definitions"
002F1Cr 3  6E 69 74 69  
002F20r 3  6F 6E 73     
002F23r 3               
002F23r 3               nt_block_ramdrive_init:
002F23r 3  13 10                .byte 19, UF
002F25r 3  rr rr rr rr          .word nt_definitions, xt_block_ramdrive_init, z_block_ramdrive_init
002F29r 3  rr rr        
002F2Br 3  62 6C 6F 63          .byte "block-ramdrive-init"
002F2Fr 3  6B 2D 72 61  
002F33r 3  6D 64 72 69  
002F3Er 3               
002F3Er 3               nt_list:
002F3Er 3  04 10                .byte 4, UF
002F40r 3  rr rr rr rr          .word nt_block_ramdrive_init, xt_list, z_list
002F44r 3  rr rr        
002F46r 3  6C 69 73 74          .byte "list"
002F4Ar 3               
002F4Ar 3               nt_thru:
002F4Ar 3  04 10                .byte 4, UF
002F4Cr 3  rr rr rr rr          .word nt_list, xt_thru, z_thru
002F50r 3  rr rr        
002F52r 3  74 68 72 75          .byte "thru"
002F56r 3               
002F56r 3               nt_load:
002F56r 3  04 10                .byte 4, UF
002F58r 3  rr rr rr rr          .word nt_thru, xt_load, z_load
002F5Cr 3  rr rr        
002F5Er 3  6C 6F 61 64          .byte "load"
002F62r 3               
002F62r 3               nt_flush:
002F62r 3  05 00                .byte 5, 0
002F64r 3  rr rr rr rr          .word nt_load, xt_flush, z_flush
002F68r 3  rr rr        
002F6Ar 3  66 6C 75 73          .byte "flush"
002F6Er 3  68           
002F6Fr 3               
002F6Fr 3               nt_empty_buffers:
002F6Fr 3  0D 00                .byte 13, 0
002F71r 3  rr rr rr rr          .word nt_flush, xt_empty_buffers, z_empty_buffers
002F75r 3  rr rr        
002F77r 3  65 6D 70 74          .byte "empty-buffers"
002F7Br 3  79 2D 62 75  
002F7Fr 3  66 66 65 72  
002F84r 3               
002F84r 3               nt_buffer:
002F84r 3  06 00                .byte 6, 0
002F86r 3  rr rr rr rr          .word nt_empty_buffers, xt_buffer, z_buffer
002F8Ar 3  rr rr        
002F8Cr 3  62 75 66 66          .byte "buffer"
002F90r 3  65 72        
002F92r 3               
002F92r 3               nt_update:
002F92r 3  06 00                .byte 6, 0
002F94r 3  rr rr rr rr          .word nt_buffer, xt_update, z_update
002F98r 3  rr rr        
002F9Ar 3  75 70 64 61          .byte "update"
002F9Er 3  74 65        
002FA0r 3               
002FA0r 3               nt_block:
002FA0r 3  05 00                .byte 5, 0
002FA2r 3  rr rr rr rr          .word nt_update, xt_block, z_block
002FA6r 3  rr rr        
002FA8r 3  62 6C 6F 63          .byte "block"
002FACr 3  6B           
002FADr 3               
002FADr 3               nt_save_buffers:
002FADr 3  0C 00                .byte 12, 0
002FAFr 3  rr rr rr rr          .word nt_block, xt_save_buffers, z_save_buffers
002FB3r 3  rr rr        
002FB5r 3  73 61 76 65          .byte "save-buffers"
002FB9r 3  2D 62 75 66  
002FBDr 3  66 65 72 73  
002FC1r 3               
002FC1r 3               nt_block_read_vector:
002FC1r 3  11 28                .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
002FC3r 3  rr rr rr rr          .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
002FC7r 3  rr rr        
002FC9r 3  62 6C 6F 63          .byte "block-read-vector"
002FCDr 3  6B 2D 72 65  
002FD1r 3  61 64 2D 76  
002FDAr 3               
002FDAr 3               nt_block_read:
002FDAr 3  0A 28                .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
002FDCr 3  rr rr rr rr          .word nt_block_read_vector, xt_block_read, z_block_read
002FE0r 3  rr rr        
002FE2r 3  62 6C 6F 63          .byte "block-read"
002FE6r 3  6B 2D 72 65  
002FEAr 3  61 64        
002FECr 3               
002FECr 3               nt_block_write_vector:
002FECr 3  12 08                .byte 18, NN ; Deferred words need the HC (Code Field) flag.
002FEEr 3  rr rr rr rr          .word nt_block_read, xt_block_write_vector, z_block_write_vector
002FF2r 3  rr rr        
002FF4r 3  62 6C 6F 63          .byte "block-write-vector"
002FF8r 3  6B 2D 77 72  
002FFCr 3  69 74 65 2D  
003006r 3               
003006r 3               nt_block_write:
003006r 3  0B 08                .byte 11, NN ; Deferred words need the HC (Code Field) flag.
003008r 3  rr rr rr rr          .word nt_block_write_vector, xt_block_write, z_block_write
00300Cr 3  rr rr        
00300Er 3  62 6C 6F 63          .byte "block-write"
003012r 3  6B 2D 77 72  
003016r 3  69 74 65     
003019r 3               
003019r 3               nt_blk:
003019r 3  03 00                .byte 3, 0
00301Br 3  rr rr rr rr          .word nt_block_write, xt_blk, z_blk
00301Fr 3  rr rr        
003021r 3  62 6C 6B             .byte "blk"
003024r 3               
003024r 3               nt_scr:
003024r 3  03 00                .byte 3, 0
003026r 3  rr rr rr rr          .word nt_blk, xt_scr, z_scr
00302Ar 3  rr rr        
00302Cr 3  73 63 72             .byte "scr"
00302Fr 3               
00302Fr 3               nt_blkbuffer:
00302Fr 3  09 00                .byte 9, 0
003031r 3  rr rr rr rr          .word nt_scr, xt_blkbuffer, z_blkbuffer
003035r 3  rr rr        
003037r 3  62 6C 6B 62          .byte "blkbuffer"
00303Br 3  75 66 66 65  
00303Fr 3  72           
003040r 3               
003040r 3               nt_buffblocknum:
003040r 3  0C 00                .byte 12, 0
003042r 3  rr rr rr rr          .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
003046r 3  rr rr        
003048r 3  62 75 66 66          .byte "buffblocknum"
00304Cr 3  62 6C 6F 63  
003050r 3  6B 6E 75 6D  
003054r 3               
003054r 3               nt_buffstatus:
003054r 3  0A 00                .byte 10, 0
003056r 3  rr rr rr rr          .word nt_buffblocknum, xt_buffstatus, z_buffstatus
00305Ar 3  rr rr        
00305Cr 3  62 75 66 66          .byte "buffstatus"
003060r 3  73 74 61 74  
003064r 3  75 73        
003066r 3               
003066r 3               nt_buffer_colon:
003066r 3  07 00                .byte 7, 0
003068r 3  rr rr rr rr          .word nt_buffstatus, xt_buffer_colon, z_buffer_colon
00306Cr 3  rr rr        
00306Er 3  62 75 66 66          .byte "buffer:"
003072r 3  65 72 3A     
003075r 3               
003075r 3               nt_useraddr:
003075r 3  08 00                .byte 8, 0
003077r 3  rr rr rr rr          .word nt_buffer_colon, xt_useraddr, z_useraddr
00307Br 3  rr rr        
00307Dr 3  75 73 65 72          .byte "useraddr"
003081r 3  61 64 64 72  
003085r 3               
003085r 3               nt_action_of:
003085r 3  09 04                .byte 9, IM
003087r 3  rr rr rr rr          .word nt_useraddr, xt_action_of, z_action_of
00308Br 3  rr rr        
00308Dr 3  61 63 74 69          .byte "action-of"
003091r 3  6F 6E 2D 6F  
003095r 3  66           
003096r 3               
003096r 3               nt_is:
003096r 3  02 04                .byte 2, IM
003098r 3  rr rr rr rr          .word nt_action_of, xt_is, z_is
00309Cr 3  rr rr        
00309Er 3  69 73                .byte "is"
0030A0r 3               
0030A0r 3               nt_defer_store:
0030A0r 3  06 00                .byte 6, 0
0030A2r 3  rr rr rr rr          .word nt_is, xt_defer_store, z_defer_store
0030A6r 3  rr rr        
0030A8r 3  64 65 66 65          .byte "defer!"
0030ACr 3  72 21        
0030AEr 3               
0030AEr 3               nt_defer_fetch:
0030AEr 3  06 00                .byte 6, 0
0030B0r 3  rr rr rr rr          .word nt_defer_store, xt_defer_fetch, z_defer_fetch
0030B4r 3  rr rr        
0030B6r 3  64 65 66 65          .byte "defer@"
0030BAr 3  72 40        
0030BCr 3               
0030BCr 3               nt_endcase:
0030BCr 3  07 0D                .byte 7, IM+CO+NN
0030BEr 3  rr rr rr rr          .word nt_defer_fetch, xt_endcase, z_endcase
0030C2r 3  rr rr        
0030C4r 3  65 6E 64 63          .byte "endcase"
0030C8r 3  61 73 65     
0030CBr 3               
0030CBr 3               nt_endof:
0030CBr 3  05 0D                .byte 5, IM+CO+NN
0030CDr 3  rr rr rr rr          .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
0030D1r 3  rr rr        
0030D3r 3  65 6E 64 6F          .byte "endof"
0030D7r 3  66           
0030D8r 3               
0030D8r 3               nt_of:
0030D8r 3  02 0D                .byte 2, IM+CO+NN
0030DAr 3  rr rr rr rr          .word nt_endof, xt_of, z_of
0030DEr 3  rr rr        
0030E0r 3  6F 66                .byte "of"
0030E2r 3               
0030E2r 3               nt_case:
0030E2r 3  04 0D                .byte 4, IM+CO+NN
0030E4r 3  rr rr rr rr          .word nt_of, xt_case, z_case    ; shares code with ZERO
0030E8r 3  rr rr        
0030EAr 3  63 61 73 65          .byte "case"
0030EEr 3               
0030EEr 3               nt_while:
0030EEr 3  05 0D                .byte 5, IM+CO+NN
0030F0r 3  rr rr rr rr          .word nt_case, xt_while, z_while
0030F4r 3  rr rr        
0030F6r 3  77 68 69 6C          .byte "while"
0030FAr 3  65           
0030FBr 3               
0030FBr 3               nt_until:
0030FBr 3  05 0D                .byte 5, IM+CO+NN
0030FDr 3  rr rr rr rr          .word nt_while, xt_until, z_until
003101r 3  rr rr        
003103r 3  75 6E 74 69          .byte "until"
003107r 3  6C           
003108r 3               
003108r 3               nt_repeat:
003108r 3  06 0D                .byte 6, IM+CO+NN
00310Ar 3  rr rr rr rr          .word nt_until, xt_repeat, z_repeat
00310Er 3  rr rr        
003110r 3  72 65 70 65          .byte "repeat"
003114r 3  61 74        
003116r 3               
003116r 3               nt_else:
003116r 3  04 0D                .byte 4, IM+CO+NN
003118r 3  rr rr rr rr          .word nt_repeat, xt_else, z_else
00311Cr 3  rr rr        
00311Er 3  65 6C 73 65          .byte "else"
003122r 3               
003122r 3               nt_then:
003122r 3  04 0D                .byte 4, IM+CO+NN
003124r 3  rr rr rr rr          .word nt_else, xt_then, z_then
003128r 3  rr rr        
00312Ar 3  74 68 65 6E          .byte "then"
00312Er 3               
00312Er 3               nt_if:
00312Er 3  02 0D                .byte 2, IM+CO+NN
003130r 3  rr rr rr rr          .word nt_then, xt_if, z_if
003134r 3  rr rr        
003136r 3  69 66                .byte "if"
003138r 3               
003138r 3               nt_dot_paren:
003138r 3  02 04                .byte 2, IM
00313Ar 3  rr rr rr rr          .word nt_if, xt_dot_paren, z_dot_paren
00313Er 3  rr rr        
003140r 3  2E 28                .byte ".("
003142r 3               
003142r 3               nt_paren:
003142r 3  01 04                .byte 1, IM
003144r 3  rr rr rr rr          .word nt_dot_paren, xt_paren, z_paren
003148r 3  rr rr        
00314Ar 3  28                   .byte "("
00314Br 3               
00314Br 3               nt_word:
00314Br 3  04 10                .byte 4, UF
00314Dr 3  rr rr rr rr          .word nt_paren, xt_word, z_word
003151r 3  rr rr        
003153r 3  77 6F 72 64          .byte "word"
003157r 3               
003157r 3               nt_find:
003157r 3  04 10                .byte 4, UF
003159r 3  rr rr rr rr          .word nt_word, xt_find, z_find
00315Dr 3  rr rr        
00315Fr 3  66 69 6E 64          .byte "find"
003163r 3               
003163r 3               nt_environment_q:
003163r 3  0C 10                .byte 12, UF
003165r 3  rr rr rr rr          .word nt_find, xt_environment_q, z_environment_q
003169r 3  rr rr        
00316Br 3  65 6E 76 69          .byte "environment?"
00316Fr 3  72 6F 6E 6D  
003173r 3  65 6E 74 3F  
003177r 3               
003177r 3               nt_search:
003177r 3  06 18                .byte 6, UF+NN
003179r 3  rr rr rr rr          .word nt_environment_q, xt_search, z_search
00317Dr 3  rr rr        
00317Fr 3  73 65 61 72          .byte "search"
003183r 3  63 68        
003185r 3               
003185r 3               nt_compare:
003185r 3  07 10                .byte 7, UF
003187r 3  rr rr rr rr          .word nt_search, xt_compare, z_compare
00318Br 3  rr rr        
00318Dr 3  63 6F 6D 70          .byte "compare"
003191r 3  61 72 65     
003194r 3               
003194r 3               nt_disasm:
003194r 3  06 10                .byte 6, UF
003196r 3  rr rr rr rr          .word nt_compare, xt_disasm, z_disasm
00319Ar 3  rr rr        
00319Cr 3  64 69 73 61          .byte "disasm"
0031A0r 3  73 6D        
0031A2r 3               
0031A2r 3               nt_dot_s:
0031A2r 3  02 00                .byte 2, 0
0031A4r 3  rr rr rr rr          .word nt_disasm, xt_dot_s, z_dot_s
0031A8r 3  rr rr        
0031AAr 3  2E 73                .byte ".s"
0031ACr 3               
0031ACr 3               nt_dump:
0031ACr 3  04 10                .byte 4, UF
0031AEr 3  rr rr rr rr          .word nt_dot_s, xt_dump, z_dump
0031B2r 3  rr rr        
0031B4r 3  64 75 6D 70          .byte "dump"
0031B8r 3               
0031B8r 3               nt_bell:
0031B8r 3  04 00                .byte 4, 0
0031BAr 3  rr rr rr rr          .word nt_dump, xt_bell, z_bell
0031BEr 3  rr rr        
0031C0r 3  62 65 6C 6C          .byte "bell"
0031C4r 3               
0031C4r 3               nt_align:
0031C4r 3  05 00                .byte 5, 0
0031C6r 3  rr rr rr rr          .word nt_bell, xt_align, z_align
0031CAr 3  rr rr        
0031CCr 3  61 6C 69 67          .byte "align"
0031D0r 3  6E           
0031D1r 3               
0031D1r 3               nt_aligned:             ; same code as ALIGN
0031D1r 3  07 00                .byte 7, 0
0031D3r 3  rr rr rr rr          .word nt_align, xt_align, z_align
0031D7r 3  rr rr        
0031D9r 3  61 6C 69 67          .byte "aligned"
0031DDr 3  6E 65 64     
0031E0r 3               
0031E0r 3               nt_wordsize:
0031E0r 3  08 10                .byte 8, UF
0031E2r 3  rr rr rr rr          .word nt_aligned, xt_wordsize, z_wordsize
0031E6r 3  rr rr        
0031E8r 3  77 6F 72 64          .byte "wordsize"
0031ECr 3  73 69 7A 65  
0031F0r 3               
0031F0r 3               nt_words:
0031F0r 3  05 00                .byte 5, 0
0031F2r 3  rr rr rr rr          .word nt_wordsize, xt_words, z_words
0031F6r 3  rr rr        
0031F8r 3  77 6F 72 64          .byte "words"
0031FCr 3  73           
0031FDr 3               
0031FDr 3               nt_marker:
0031FDr 3  06 04                .byte 6, IM
0031FFr 3  rr rr rr rr          .word nt_words, xt_marker, z_marker
003203r 3  rr rr        
003205r 3  6D 61 72 6B          .byte "marker"
003209r 3  65 72        
00320Br 3               
00320Br 3               nt_at_xy:
00320Br 3  05 10                .byte 5, UF
00320Dr 3  rr rr rr rr          .word nt_marker, xt_at_xy, z_at_xy
003211r 3  rr rr        
003213r 3  61 74 2D 78          .byte "at-xy"
003217r 3  79           
003218r 3               
003218r 3               nt_page:
003218r 3  04 00                .byte 4, 0
00321Ar 3  rr rr rr rr          .word nt_at_xy, xt_page, z_page
00321Er 3  rr rr        
003220r 3  70 61 67 65          .byte "page"
003224r 3               
003224r 3               nt_cr:
003224r 3  02 00                .byte 2, 0
003226r 3  rr rr rr rr          .word nt_page, xt_cr, z_cr
00322Ar 3  rr rr        
00322Cr 3  63 72                .byte "cr"
00322Er 3               
00322Er 3               nt_input:
00322Er 3  05 00                .byte 5, 0
003230r 3  rr rr rr rr          .word nt_cr, xt_input, z_input
003234r 3  rr rr        
003236r 3  69 6E 70 75          .byte "input"
00323Ar 3  74           
00323Br 3               
00323Br 3               nt_output:
00323Br 3  06 00                .byte 6, 0
00323Dr 3  rr rr rr rr          .word nt_input, xt_output, z_output
003241r 3  rr rr        
003243r 3  6F 75 74 70          .byte "output"
003247r 3  75 74        
003249r 3               
003249r 3               nt_sign:
003249r 3  04 10                .byte 4, UF
00324Br 3  rr rr rr rr          .word nt_output, xt_sign, z_sign
00324Fr 3  rr rr        
003251r 3  73 69 67 6E          .byte "sign"
003255r 3               
003255r 3               nt_hold:
003255r 3  04 10                .byte 4, UF
003257r 3  rr rr rr rr          .word nt_sign, xt_hold, z_hold
00325Br 3  rr rr        
00325Dr 3  68 6F 6C 64          .byte "hold"
003261r 3               
003261r 3               nt_number_sign_greater:
003261r 3  02 10                .byte 2, UF
003263r 3  rr rr rr rr          .word nt_hold, xt_number_sign_greater, z_number_sign_greater
003267r 3  rr rr        
003269r 3  23 3E                .byte "#>"
00326Br 3               
00326Br 3               nt_number_sign_s:
00326Br 3  02 10                .byte 2, UF
00326Dr 3  rr rr rr rr          .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
003271r 3  rr rr        
003273r 3  23 73                .byte "#s"
003275r 3               
003275r 3               nt_number_sign:
003275r 3  01 10                .byte 1, UF
003277r 3  rr rr rr rr          .word nt_number_sign_s, xt_number_sign, z_number_sign
00327Br 3  rr rr        
00327Dr 3  23                   .byte "#"
00327Er 3               
00327Er 3               nt_less_number_sign:
00327Er 3  02 00                .byte 2, 0
003280r 3  rr rr rr rr          .word nt_number_sign, xt_less_number_sign, z_less_number_sign
003284r 3  rr rr        
003286r 3  3C 23                .byte "<#"
003288r 3               
003288r 3               nt_to_in:
003288r 3  03 00                .byte 3, 0
00328Ar 3  rr rr rr rr          .word nt_less_number_sign, xt_to_in, z_to_in
00328Er 3  rr rr        
003290r 3  3E 69 6E             .byte ">in"
003293r 3               
003293r 3               nt_within:
003293r 3  06 10                .byte 6, UF
003295r 3  rr rr rr rr          .word nt_to_in, xt_within, z_within
003299r 3  rr rr        
00329Br 3  77 69 74 68          .byte "within"
00329Fr 3  69 6E        
0032A1r 3               
0032A1r 3               nt_hexstore:
0032A1r 3  08 10                .byte 8, UF
0032A3r 3  rr rr rr rr          .word nt_within, xt_hexstore, z_hexstore
0032A7r 3  rr rr        
0032A9r 3  68 65 78 73          .byte "hexstore"
0032ADr 3  74 6F 72 65  
0032B1r 3               
0032B1r 3               nt_cleave:
0032B1r 3  06 10                .byte 6, UF
0032B3r 3  rr rr rr rr          .word nt_hexstore, xt_cleave, z_cleave
0032B7r 3  rr rr        
0032B9r 3  63 6C 65 61          .byte "cleave"
0032BDr 3  76 65        
0032BFr 3               
0032BFr 3               nt_pad:
0032BFr 3  03 00                .byte 3, 0
0032C1r 3  rr rr rr rr          .word nt_cleave, xt_pad, z_pad
0032C5r 3  rr rr        
0032C7r 3  70 61 64             .byte "pad"
0032CAr 3               
0032CAr 3               nt_cmove:
0032CAr 3  05 10                .byte 5, UF
0032CCr 3  rr rr rr rr          .word nt_pad, xt_cmove, z_cmove
0032D0r 3  rr rr        
0032D2r 3  63 6D 6F 76          .byte "cmove"
0032D6r 3  65           
0032D7r 3               
0032D7r 3               nt_cmove_up:
0032D7r 3  06 10                .byte 6, UF
0032D9r 3  rr rr rr rr          .word nt_cmove, xt_cmove_up, z_cmove_up
0032DDr 3  rr rr        
0032DFr 3  63 6D 6F 76          .byte "cmove>"
0032E3r 3  65 3E        
0032E5r 3               
0032E5r 3               nt_move:
0032E5r 3  04 18                .byte 4, NN+UF
0032E7r 3  rr rr rr rr          .word nt_cmove_up, xt_move, z_move
0032EBr 3  rr rr        
0032EDr 3  6D 6F 76 65          .byte "move"
0032F1r 3               
0032F1r 3               nt_backslash:
0032F1r 3  01 04                .byte 1, IM
0032F3r 3  rr rr rr rr          .word nt_move, xt_backslash, z_backslash
0032F7r 3  rr rr        
0032F9r 3  5C                   .byte $5c
0032FAr 3               
0032FAr 3               nt_star_slash:
0032FAr 3  02 10                .byte 2, UF
0032FCr 3  rr rr rr rr          .word nt_backslash, xt_star_slash, z_star_slash
003300r 3  rr rr        
003302r 3  2A 2F                .byte "*/"
003304r 3               
003304r 3               nt_star_slash_mod:
003304r 3  05 10                .byte 5, UF
003306r 3  rr rr rr rr          .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
00330Ar 3  rr rr        
00330Cr 3  2A 2F 6D 6F          .byte "*/mod"
003310r 3  64           
003311r 3               
003311r 3               nt_mod:
003311r 3  03 10                .byte 3, UF
003313r 3  rr rr rr rr          .word nt_star_slash_mod, xt_mod, z_mod
003317r 3  rr rr        
003319r 3  6D 6F 64             .byte "mod"
00331Cr 3               
00331Cr 3               nt_slash_mod:
00331Cr 3  04 10                .byte 4, UF
00331Er 3  rr rr rr rr          .word nt_mod, xt_slash_mod, z_slash_mod
003322r 3  rr rr        
003324r 3  2F 6D 6F 64          .byte "/mod"
003328r 3               
003328r 3               nt_slash:
003328r 3  01 10                .byte 1, UF
00332Ar 3  rr rr rr rr          .word nt_slash_mod, xt_slash, z_slash
00332Er 3  rr rr        
003330r 3  2F                   .byte "/"
003331r 3               
003331r 3               nt_fm_slash_mod:
003331r 3  06 10                .byte 6, UF
003333r 3  rr rr rr rr          .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
003337r 3  rr rr        
003339r 3  66 6D 2F 6D          .byte "fm/mod"
00333Dr 3  6F 64        
00333Fr 3               
00333Fr 3               nt_sm_slash_rem:
00333Fr 3  06 10                .byte 6, UF
003341r 3  rr rr rr rr          .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
003345r 3  rr rr        
003347r 3  73 6D 2F 72          .byte "sm/rem"
00334Br 3  65 6D        
00334Dr 3               
00334Dr 3               nt_um_slash_mod:
00334Dr 3  06 10                .byte 6, UF
00334Fr 3  rr rr rr rr          .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
003353r 3  rr rr        
003355r 3  75 6D 2F 6D          .byte "um/mod"
003359r 3  6F 64        
00335Br 3               
00335Br 3               nt_star:
00335Br 3  01 10                .byte 1, UF
00335Dr 3  rr rr rr rr          .word nt_um_slash_mod, xt_star, z_star
003361r 3  rr rr        
003363r 3  2A                   .byte "*"
003364r 3               
003364r 3               nt_um_star:
003364r 3  03 10                .byte 3, UF
003366r 3  rr rr rr rr          .word nt_star, xt_um_star, z_um_star
00336Ar 3  rr rr        
00336Cr 3  75 6D 2A             .byte "um*"
00336Fr 3               
00336Fr 3               nt_m_star:
00336Fr 3  02 10                .byte 2, UF
003371r 3  rr rr rr rr          .word nt_um_star, xt_m_star, z_m_star
003375r 3  rr rr        
003377r 3  6D 2A                .byte "m*"
003379r 3               
003379r 3               nt_count:
003379r 3  05 10                .byte 5, UF
00337Br 3  rr rr rr rr          .word nt_m_star, xt_count, z_count
00337Fr 3  rr rr        
003381r 3  63 6F 75 6E          .byte "count"
003385r 3  74           
003386r 3               
003386r 3               nt_decimal:
003386r 3  07 00                .byte 7, 0
003388r 3  rr rr rr rr          .word nt_count, xt_decimal, z_decimal
00338Cr 3  rr rr        
00338Er 3  64 65 63 69          .byte "decimal"
003392r 3  6D 61 6C     
003395r 3               
003395r 3               nt_hex:
003395r 3  03 00                .byte 3, 0
003397r 3  rr rr rr rr          .word nt_decimal, xt_hex, z_hex
00339Br 3  rr rr        
00339Dr 3  68 65 78             .byte "hex"
0033A0r 3               
0033A0r 3               nt_to_number:
0033A0r 3  07 10                .byte 7, UF
0033A2r 3  rr rr rr rr          .word nt_hex, xt_to_number, z_to_number
0033A6r 3  rr rr        
0033A8r 3  3E 6E 75 6D          .byte ">number"
0033ACr 3  62 65 72     
0033AFr 3               
0033AFr 3               nt_number:
0033AFr 3  06 10                .byte 6, UF
0033B1r 3  rr rr rr rr          .word nt_to_number, xt_number, z_number
0033B5r 3  rr rr        
0033B7r 3  6E 75 6D 62          .byte "number"
0033BBr 3  65 72        
0033BDr 3               
0033BDr 3               nt_digit_question:
0033BDr 3  06 10                .byte 6, UF
0033BFr 3  rr rr rr rr          .word nt_number, xt_digit_question, z_digit_question
0033C3r 3  rr rr        
0033C5r 3  64 69 67 69          .byte "digit?"
0033C9r 3  74 3F        
0033CBr 3               
0033CBr 3               nt_base:
0033CBr 3  04 00                .byte 4, 0
0033CDr 3  rr rr rr rr          .word nt_digit_question, xt_base, z_base
0033D1r 3  rr rr        
0033D3r 3  62 61 73 65          .byte "base"
0033D7r 3               
0033D7r 3               nt_evaluate:
0033D7r 3  08 10                .byte 8, UF
0033D9r 3  rr rr rr rr          .word nt_base, xt_evaluate, z_evaluate
0033DDr 3  rr rr        
0033DFr 3  65 76 61 6C          .byte "evaluate"
0033E3r 3  75 61 74 65  
0033E7r 3               
0033E7r 3               nt_state:
0033E7r 3  05 00                .byte 5, 0
0033E9r 3  rr rr rr rr          .word nt_evaluate, xt_state, z_state
0033EDr 3  rr rr        
0033EFr 3  73 74 61 74          .byte "state"
0033F3r 3  65           
0033F4r 3               
0033F4r 3               nt_again:
0033F4r 3  05 17                .byte 5, AN+CO+IM+UF
0033F6r 3  rr rr rr rr          .word nt_state, xt_again, z_again
0033FAr 3  rr rr        
0033FCr 3  61 67 61 69          .byte "again"
003400r 3  6E           
003401r 3               
003401r 3               nt_begin:
003401r 3  05 07                .byte 5, AN+CO+IM
003403r 3  rr rr rr rr          .word nt_again, xt_begin, z_begin
003407r 3  rr rr        
003409r 3  62 65 67 69          .byte "begin"
00340Dr 3  6E           
00340Er 3               
00340Er 3               nt_quit:
00340Er 3  04 00                .byte 4, 0
003410r 3  rr rr rr rr          .word nt_begin, xt_quit, z_quit
003414r 3  rr rr        
003416r 3  71 75 69 74          .byte "quit"
00341Ar 3               
00341Ar 3               nt_recurse:
00341Ar 3  07 0D                .byte 7, CO+IM+NN
00341Cr 3  rr rr rr rr          .word nt_quit, xt_recurse, z_recurse
003420r 3  rr rr        
003422r 3  72 65 63 75          .byte "recurse"
003426r 3  72 73 65     
003429r 3               
003429r 3               nt_leave:
003429r 3  05 03                .byte 5, AN+CO
00342Br 3  rr rr rr rr          .word nt_recurse, xt_leave, z_leave
00342Fr 3  rr rr        
003431r 3  6C 65 61 76          .byte "leave"
003435r 3  65           
003436r 3               
003436r 3               nt_unloop:
003436r 3  06 03                .byte 6, AN+CO
003438r 3  rr rr rr rr          .word nt_leave, xt_unloop, z_unloop
00343Cr 3  rr rr        
00343Er 3  75 6E 6C 6F          .byte "unloop"
003442r 3  6F 70        
003444r 3               
003444r 3               nt_exit:
003444r 3  04 03                .byte 4, AN+CO
003446r 3  rr rr rr rr          .word nt_unloop, xt_exit, z_exit
00344Ar 3  rr rr        
00344Cr 3  65 78 69 74          .byte "exit"
003450r 3               
003450r 3               nt_plus_loop:
003450r 3  05 05                .byte 5, CO+IM
003452r 3  rr rr rr rr          .word nt_exit, xt_plus_loop, z_plus_loop
003456r 3  rr rr        
003458r 3  2B 6C 6F 6F          .byte "+loop"
00345Cr 3  70           
00345Dr 3               
00345Dr 3               nt_loop:
00345Dr 3  04 05                .byte 4, CO+IM
00345Fr 3  rr rr rr rr          .word nt_plus_loop, xt_loop, z_loop
003463r 3  rr rr        
003465r 3  6C 6F 6F 70          .byte "loop"
003469r 3               
003469r 3               nt_j:
003469r 3  01 03                .byte 1, AN+CO
00346Br 3  rr rr rr rr          .word nt_loop, xt_j, z_j
00346Fr 3  rr rr        
003471r 3  6A                   .byte "j"
003472r 3               
003472r 3               nt_i:
003472r 3  01 03                .byte 1, AN+CO
003474r 3  rr rr rr rr          .word nt_j, xt_i, z_i
003478r 3  rr rr        
00347Ar 3  69                   .byte "i"
00347Br 3               
00347Br 3               nt_question_do:
00347Br 3  03 0D                .byte 3, CO+IM+NN
00347Dr 3  rr rr rr rr          .word nt_i, xt_question_do, z_question_do
003481r 3  rr rr        
003483r 3  3F 64 6F             .byte "?do"
003486r 3               
003486r 3               nt_do:
003486r 3  02 0D                .byte 2, CO+IM+NN
003488r 3  rr rr rr rr          .word nt_question_do, xt_do, z_do
00348Cr 3  rr rr        
00348Er 3  64 6F                .byte "do"
003490r 3               
003490r 3               nt_abort_quote:
003490r 3  06 0D                .byte 6, CO+IM+NN
003492r 3  rr rr rr rr          .word nt_do, xt_abort_quote, z_abort_quote
003496r 3  rr rr        
003498r 3  61 62 6F 72          .byte "abort", $22
00349Cr 3  74 22        
00349Er 3               
00349Er 3               nt_abort:
00349Er 3  05 00                .byte 5, 0
0034A0r 3  rr rr rr rr          .word nt_abort_quote, xt_abort, z_abort
0034A4r 3  rr rr        
0034A6r 3  61 62 6F 72          .byte "abort"
0034AAr 3  74           
0034ABr 3               
0034ABr 3               nt_strip_underflow:
0034ABr 3  0F 00                .byte 15, 0
0034ADr 3  rr rr rr rr          .word nt_abort, xt_strip_underflow, z_strip_underflow
0034B1r 3  rr rr        
0034B3r 3  73 74 72 69          .byte "strip-underflow"
0034B7r 3  70 2D 75 6E  
0034BBr 3  64 65 72 66  
0034C2r 3               
0034C2r 3               nt_nc_limit:
0034C2r 3  08 00                .byte 8, 0
0034C4r 3  rr rr rr rr          .word nt_strip_underflow, xt_nc_limit, z_nc_limit
0034C8r 3  rr rr        
0034CAr 3  6E 63 2D 6C          .byte "nc-limit"
0034CEr 3  69 6D 69 74  
0034D2r 3               
0034D2r 3               nt_allow_native:
0034D2r 3  0C 00                .byte 12, 0
0034D4r 3  rr rr rr rr          .word nt_nc_limit, xt_allow_native, z_allow_native
0034D8r 3  rr rr        
0034DAr 3  61 6C 6C 6F          .byte "allow-native"
0034DEr 3  77 2D 6E 61  
0034E2r 3  74 69 76 65  
0034E6r 3               
0034E6r 3               nt_always_native:
0034E6r 3  0D 00                .byte 13, 0
0034E8r 3  rr rr rr rr          .word nt_allow_native, xt_always_native, z_always_native
0034ECr 3  rr rr        
0034EEr 3  61 6C 77 61          .byte "always-native"
0034F2r 3  79 73 2D 6E  
0034F6r 3  61 74 69 76  
0034FBr 3               
0034FBr 3               nt_never_native:
0034FBr 3  0C 00                .byte 12, 0
0034FDr 3  rr rr rr rr          .word nt_always_native, xt_never_native, z_never_native
003501r 3  rr rr        
003503r 3  6E 65 76 65          .byte "never-native"
003507r 3  72 2D 6E 61  
00350Br 3  74 69 76 65  
00350Fr 3               
00350Fr 3               nt_compile_only:
00350Fr 3  0C 00                .byte 12, 0
003511r 3  rr rr rr rr          .word nt_never_native, xt_compile_only, z_compile_only
003515r 3  rr rr        
003517r 3  63 6F 6D 70          .byte "compile-only"
00351Br 3  69 6C 65 2D  
00351Fr 3  6F 6E 6C 79  
003523r 3               
003523r 3               nt_immediate:
003523r 3  09 00                .byte 9, 0
003525r 3  rr rr rr rr          .word nt_compile_only, xt_immediate, z_immediate
003529r 3  rr rr        
00352Br 3  69 6D 6D 65          .byte "immediate"
00352Fr 3  64 69 61 74  
003533r 3  65           
003534r 3               
003534r 3               nt_postpone:
003534r 3  08 05                .byte 8, IM+CO
003536r 3  rr rr rr rr          .word nt_immediate, xt_postpone, z_postpone
00353Ar 3  rr rr        
00353Cr 3  70 6F 73 74          .byte "postpone"
003540r 3  70 6F 6E 65  
003544r 3               
003544r 3               nt_s_backslash_quote:
003544r 3  03 04                .byte 3, IM
003546r 3  rr rr rr rr          .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
00354Ar 3  rr rr        
00354Cr 3  73 5C 22             .byte "s", $5C, $22
00354Fr 3               
00354Fr 3               nt_s_quote:
00354Fr 3  02 0C                .byte 2, IM+NN
003551r 3  rr rr rr rr          .word nt_s_backslash_quote, xt_s_quote, z_s_quote
003555r 3  rr rr        
003557r 3  73 22                .byte "s", $22
003559r 3               
003559r 3               nt_dot_quote:
003559r 3  02 05                .byte 2, CO+IM
00355Br 3  rr rr rr rr          .word nt_s_quote, xt_dot_quote, z_dot_quote
00355Fr 3  rr rr        
003561r 3  2E 22                .byte ".", $22
003563r 3               
003563r 3               nt_sliteral:
003563r 3  08 15                .byte 8, CO+IM+UF
003565r 3  rr rr rr rr          .word nt_dot_quote, xt_sliteral, z_sliteral
003569r 3  rr rr        
00356Br 3  73 6C 69 74          .byte "sliteral"
00356Fr 3  65 72 61 6C  
003573r 3               
003573r 3               nt_literal:
003573r 3  07 15                .byte 7, IM+CO+UF
003575r 3  rr rr rr rr          .word nt_sliteral, xt_literal, z_literal
003579r 3  rr rr        
00357Br 3  6C 69 74 65          .byte "literal"
00357Fr 3  72 61 6C     
003582r 3               
003582r 3               nt_right_bracket:
003582r 3  01 04                .byte 1, IM
003584r 3  rr rr rr rr          .word nt_literal, xt_right_bracket, z_right_bracket
003588r 3  rr rr        
00358Ar 3  5D                   .byte "]"
00358Br 3               
00358Br 3               nt_left_bracket:
00358Br 3  01 05                .byte 1, IM+CO
00358Dr 3  rr rr rr rr          .word nt_right_bracket, xt_left_bracket, z_left_bracket
003591r 3  rr rr        
003593r 3  5B                   .byte "["
003594r 3               
003594r 3               nt_compile_comma:
003594r 3  08 18                .byte 8, UF+NN
003596r 3  rr rr rr rr          .word nt_left_bracket, xt_compile_comma, z_compile_comma
00359Ar 3  rr rr        
00359Cr 3  63 6F 6D 70          .byte "compile,"
0035A0r 3  69 6C 65 2C  
0035A4r 3               
0035A4r 3               nt_colon_noname:
0035A4r 3  07 00                .byte 7, 0
0035A6r 3  rr rr rr rr          .word nt_compile_comma, xt_colon_noname, z_colon_noname
0035AAr 3  rr rr        
0035ACr 3  3A 6E 6F 6E          .byte ":noname"
0035B0r 3  61 6D 65     
0035B3r 3               
0035B3r 3               nt_semicolon:
0035B3r 3  01 05                .byte 1, CO+IM
0035B5r 3  rr rr rr rr          .word nt_colon_noname, xt_semicolon, z_semicolon
0035B9r 3  rr rr        
0035BBr 3  3B                   .byte ";"
0035BCr 3               
0035BCr 3               nt_colon:
0035BCr 3  01 00                .byte 1, 0
0035BEr 3  rr rr rr rr          .word nt_semicolon, xt_colon, z_colon
0035C2r 3  rr rr        
0035C4r 3  3A                   .byte ":"
0035C5r 3               
0035C5r 3               nt_source_id:
0035C5r 3  09 00                .byte 9, 0
0035C7r 3  rr rr rr rr          .word nt_colon, xt_source_id, z_source_id
0035CBr 3  rr rr        
0035CDr 3  73 6F 75 72          .byte "source-id"
0035D1r 3  63 65 2D 69  
0035D5r 3  64           
0035D6r 3               
0035D6r 3               nt_source:
0035D6r 3  06 00                .byte 6, 0
0035D8r 3  rr rr rr rr          .word nt_source_id, xt_source, z_source
0035DCr 3  rr rr        
0035DEr 3  73 6F 75 72          .byte "source"
0035E2r 3  63 65        
0035E4r 3               
0035E4r 3               nt_execute_parsing:
0035E4r 3  0F 10                .byte 15, UF
0035E6r 3  rr rr rr rr          .word nt_source, xt_execute_parsing, z_execute_parsing
0035EAr 3  rr rr        
0035ECr 3  65 78 65 63          .byte "execute-parsing"
0035F0r 3  75 74 65 2D  
0035F4r 3  70 61 72 73  
0035FBr 3               
0035FBr 3               nt_parse:
0035FBr 3  05 10                .byte 5, UF
0035FDr 3  rr rr rr rr          .word nt_execute_parsing, xt_parse, z_parse
003601r 3  rr rr        
003603r 3  70 61 72 73          .byte "parse"
003607r 3  65           
003608r 3               
003608r 3               nt_parse_name:
003608r 3  0A 08                .byte 10, NN
00360Ar 3  rr rr rr rr          .word nt_parse, xt_parse_name, z_parse_name
00360Er 3  rr rr        
003610r 3  70 61 72 73          .byte "parse-name"
003614r 3  65 2D 6E 61  
003618r 3  6D 65        
00361Ar 3               
00361Ar 3               nt_latestnt:
00361Ar 3  08 00                .byte 8, 0
00361Cr 3  rr rr rr rr          .word nt_parse_name, xt_latestnt, z_latestnt
003620r 3  rr rr        
003622r 3  6C 61 74 65          .byte "latestnt"
003626r 3  73 74 6E 74  
00362Ar 3               
00362Ar 3               nt_latestxt:
00362Ar 3  08 00                .byte 8, 0
00362Cr 3  rr rr rr rr          .word nt_latestnt, xt_latestxt, z_latestxt
003630r 3  rr rr        
003632r 3  6C 61 74 65          .byte "latestxt"
003636r 3  73 74 78 74  
00363Ar 3               
00363Ar 3               nt_defer:
00363Ar 3  05 00                .byte 5, 0
00363Cr 3  rr rr rr rr          .word nt_latestxt, xt_defer, z_defer
003640r 3  rr rr        
003642r 3  64 65 66 65          .byte "defer"
003646r 3  72           
003647r 3               
003647r 3               nt_to_body:
003647r 3  05 10                .byte 5, UF
003649r 3  rr rr rr rr          .word nt_defer, xt_to_body, z_to_body
00364Dr 3  rr rr        
00364Fr 3  3E 62 6F 64          .byte ">body"
003653r 3  79           
003654r 3               
003654r 3               nt_name_to_string:
003654r 3  0B 10                .byte 11, UF
003656r 3  rr rr rr rr          .word nt_to_body, xt_name_to_string, z_name_to_string
00365Ar 3  rr rr        
00365Cr 3  6E 61 6D 65          .byte "name>string"
003660r 3  3E 73 74 72  
003664r 3  69 6E 67     
003667r 3               
003667r 3               nt_int_to_name:
003667r 3  08 10                .byte 8, UF
003669r 3  rr rr rr rr          .word nt_name_to_string, xt_int_to_name, z_int_to_name
00366Dr 3  rr rr        
00366Fr 3  69 6E 74 3E          .byte "int>name"
003673r 3  6E 61 6D 65  
003677r 3               
003677r 3               nt_name_to_int:
003677r 3  08 10                .byte 8, UF
003679r 3  rr rr rr rr          .word nt_int_to_name, xt_name_to_int, z_name_to_int
00367Dr 3  rr rr        
00367Fr 3  6E 61 6D 65          .byte "name>int"
003683r 3  3E 69 6E 74  
003687r 3               
003687r 3               nt_bracket_tick:
003687r 3  03 05                .byte 3, CO+IM
003689r 3  rr rr rr rr          .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
00368Dr 3  rr rr        
00368Fr 3  5B 27 5D             .byte "[']"
003692r 3               
003692r 3               nt_tick:
003692r 3  01 00                .byte 1, 0
003694r 3  rr rr rr rr          .word nt_bracket_tick, xt_tick, z_tick
003698r 3  rr rr        
00369Ar 3  27                   .byte "'"
00369Br 3               
00369Br 3               nt_find_name:
00369Br 3  09 10                .byte 9, UF
00369Dr 3  rr rr rr rr          .word nt_tick, xt_find_name, z_find_name
0036A1r 3  rr rr        
0036A3r 3  66 69 6E 64          .byte "find-name"
0036A7r 3  2D 6E 61 6D  
0036ABr 3  65           
0036ACr 3               
0036ACr 3               nt_fill:
0036ACr 3  04 10                .byte 4, UF
0036AEr 3  rr rr rr rr          .word nt_find_name, xt_fill, z_fill
0036B2r 3  rr rr        
0036B4r 3  66 69 6C 6C          .byte "fill"
0036B8r 3               
0036B8r 3               nt_blank:
0036B8r 3  05 00                .byte 5, 0     ; underflow checked by FILL
0036BAr 3  rr rr rr rr          .word nt_fill, xt_blank, z_blank
0036BEr 3  rr rr        
0036C0r 3  62 6C 61 6E          .byte "blank"
0036C4r 3  6B           
0036C5r 3               
0036C5r 3               nt_erase:
0036C5r 3  05 00                .byte 5, 0      ; underflow checked by FILL
0036C7r 3  rr rr rr rr          .word nt_blank, xt_erase, z_erase
0036CBr 3  rr rr        
0036CDr 3  65 72 61 73          .byte "erase"
0036D1r 3  65           
0036D2r 3               
0036D2r 3               nt_d_plus:
0036D2r 3  02 10                .byte 2, UF
0036D4r 3  rr rr rr rr          .word nt_erase, xt_d_plus, z_d_plus
0036D8r 3  rr rr        
0036DAr 3  64 2B                .byte "d+"
0036DCr 3               
0036DCr 3               nt_d_minus:
0036DCr 3  02 10                .byte 2, UF
0036DEr 3  rr rr rr rr          .word nt_d_plus, xt_d_minus, z_d_minus
0036E2r 3  rr rr        
0036E4r 3  64 2D                .byte "d-"
0036E6r 3               
0036E6r 3               nt_d_to_s:
0036E6r 3  03 10                .byte 3, UF
0036E8r 3  rr rr rr rr          .word nt_d_minus, xt_d_to_s, z_d_to_s
0036ECr 3  rr rr        
0036EEr 3  64 3E 73             .byte "d>s"
0036F1r 3               
0036F1r 3               nt_s_to_d:
0036F1r 3  03 10                .byte 3, UF
0036F3r 3  rr rr rr rr          .word nt_d_to_s, xt_s_to_d, z_s_to_d
0036F7r 3  rr rr        
0036F9r 3  73 3E 64             .byte "s>d"
0036FCr 3               
0036FCr 3               nt_to:
0036FCr 3  02 0C                .byte 2, NN+IM
0036FEr 3  rr rr rr rr          .word nt_s_to_d, xt_to, z_to
003702r 3  rr rr        
003704r 3  74 6F                .byte "to"
003706r 3               
003706r 3               nt_value:               ; same code as CONSTANT
003706r 3  05 10                .byte 5, UF
003708r 3  rr rr rr rr          .word nt_to, xt_constant, z_constant
00370Cr 3  rr rr        
00370Er 3  76 61 6C 75          .byte "value"
003712r 3  65           
003713r 3               
003713r 3               nt_constant:
003713r 3  08 10                .byte 8, UF
003715r 3  rr rr rr rr          .word nt_value, xt_constant, z_constant
003719r 3  rr rr        
00371Br 3  63 6F 6E 73          .byte "constant"
00371Fr 3  74 61 6E 74  
003723r 3               
003723r 3               nt_variable:
003723r 3  08 00                .byte 8, 0
003725r 3  rr rr rr rr          .word nt_constant, xt_variable, z_variable
003729r 3  rr rr        
00372Br 3  76 61 72 69          .byte "variable"
00372Fr 3  61 62 6C 65  
003733r 3               
003733r 3               nt_does:
003733r 3  05 05                .byte 5, CO+IM
003735r 3  rr rr rr rr          .word nt_variable, xt_does, z_does
003739r 3  rr rr        
00373Br 3  64 6F 65 73          .byte "does>"
00373Fr 3  3E           
003740r 3               
003740r 3               nt_create:
003740r 3  06 00                .byte 6, 0
003742r 3  rr rr rr rr          .word nt_does, xt_create, z_create
003746r 3  rr rr        
003748r 3  63 72 65 61          .byte "create"
00374Cr 3  74 65        
00374Er 3               
00374Er 3               nt_allot:
00374Er 3  05 10                .byte 5, UF
003750r 3  rr rr rr rr          .word nt_create, xt_allot, z_allot
003754r 3  rr rr        
003756r 3  61 6C 6C 6F          .byte "allot"
00375Ar 3  74           
00375Br 3               
00375Br 3               nt_key:
00375Br 3  03 00                .byte 3, 0
00375Dr 3  rr rr rr rr          .word nt_allot, xt_key, z_key
003761r 3  rr rr        
003763r 3  6B 65 79             .byte "key"
003766r 3               
003766r 3               nt_depth:
003766r 3  05 00                .byte 5, 0
003768r 3  rr rr rr rr          .word nt_key, xt_depth, z_depth
00376Cr 3  rr rr        
00376Er 3  64 65 70 74          .byte "depth"
003772r 3  68           
003773r 3               
003773r 3               nt_unused:
003773r 3  06 00                .byte 6, 0
003775r 3  rr rr rr rr          .word nt_depth, xt_unused, z_unused
003779r 3  rr rr        
00377Br 3  75 6E 75 73          .byte "unused"
00377Fr 3  65 64        
003781r 3               
003781r 3               nt_r_to_input:
003781r 3  07 08                .byte 7, NN
003783r 3  rr rr rr rr          .word nt_unused, xt_r_to_input, z_r_to_input
003787r 3  rr rr        
003789r 3  72 3E 69 6E          .byte "r>input"
00378Dr 3  70 75 74     
003790r 3               
003790r 3               nt_input_to_r:
003790r 3  07 08                .byte 7, NN
003792r 3  rr rr rr rr          .word nt_r_to_input, xt_input_to_r, z_input_to_r
003796r 3  rr rr        
003798r 3  69 6E 70 75          .byte "input>r"
00379Cr 3  74 3E 72     
00379Fr 3               
00379Fr 3               nt_accept:
00379Fr 3  06 18                .byte 6, UF+NN
0037A1r 3  rr rr rr rr          .word nt_input_to_r, xt_accept, z_accept
0037A5r 3  rr rr        
0037A7r 3  61 63 63 65          .byte "accept"
0037ABr 3  70 74        
0037ADr 3               
0037ADr 3               nt_refill:
0037ADr 3  06 00                .byte 6, 0
0037AFr 3  rr rr rr rr          .word nt_accept, xt_refill, z_refill
0037B3r 3  rr rr        
0037B5r 3  72 65 66 69          .byte "refill"
0037B9r 3  6C 6C        
0037BBr 3               
0037BBr 3               nt_slash_string:
0037BBr 3  07 10                .byte 7, UF
0037BDr 3  rr rr rr rr          .word nt_refill, xt_slash_string, z_slash_string
0037C1r 3  rr rr        
0037C3r 3  2F 73 74 72          .byte "/string"
0037C7r 3  69 6E 67     
0037CAr 3               
0037CAr 3               nt_minus_leading:
0037CAr 3  08 10                .byte 8, UF
0037CCr 3  rr rr rr rr          .word nt_slash_string, xt_minus_leading, z_minus_leading
0037D0r 3  rr rr        
0037D2r 3  2D 6C 65 61          .byte "-leading"
0037D6r 3  64 69 6E 67  
0037DAr 3               
0037DAr 3               nt_minus_trailing:
0037DAr 3  09 10                .byte 9, UF
0037DCr 3  rr rr rr rr          .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
0037E0r 3  rr rr        
0037E2r 3  2D 74 72 61          .byte "-trailing"
0037E6r 3  69 6C 69 6E  
0037EAr 3  67           
0037EBr 3               
0037EBr 3               nt_bl:
0037EBr 3  02 00                .byte 2, 0
0037EDr 3  rr rr rr rr          .word nt_minus_trailing, xt_bl, z_bl
0037F1r 3  rr rr        
0037F3r 3  62 6C                .byte "bl"
0037F5r 3               
0037F5r 3               nt_spaces:
0037F5r 3  06 10                .byte 6, UF
0037F7r 3  rr rr rr rr          .word nt_bl, xt_spaces, z_spaces
0037FBr 3  rr rr        
0037FDr 3  73 70 61 63          .byte "spaces"
003801r 3  65 73        
003803r 3               
003803r 3               nt_bounds:
003803r 3  06 10                .byte 6, UF
003805r 3  rr rr rr rr          .word nt_spaces, xt_bounds, z_bounds
003809r 3  rr rr        
00380Br 3  62 6F 75 6E          .byte "bounds"
00380Fr 3  64 73        
003811r 3               
003811r 3               nt_c_comma:
003811r 3  02 10                .byte 2, UF
003813r 3  rr rr rr rr          .word nt_bounds, xt_c_comma, z_c_comma
003817r 3  rr rr        
003819r 3  63 2C                .byte "c,"
00381Br 3               
00381Br 3               nt_dnegate:
00381Br 3  07 10                .byte 7, UF
00381Dr 3  rr rr rr rr          .word nt_c_comma, xt_dnegate, z_dnegate
003821r 3  rr rr        
003823r 3  64 6E 65 67          .byte "dnegate"
003827r 3  61 74 65     
00382Ar 3               
00382Ar 3               nt_negate:
00382Ar 3  06 10                .byte 6, UF
00382Cr 3  rr rr rr rr          .word nt_dnegate, xt_negate, z_negate
003830r 3  rr rr        
003832r 3  6E 65 67 61          .byte "negate"
003836r 3  74 65        
003838r 3               
003838r 3               nt_invert:
003838r 3  06 10                .byte 6, UF
00383Ar 3  rr rr rr rr          .word nt_negate, xt_invert, z_invert
00383Er 3  rr rr        
003840r 3  69 6E 76 65          .byte "invert"
003844r 3  72 74        
003846r 3               
003846r 3               nt_two_to_r:
003846r 3  03 11                .byte 3, CO+UF          ; native is special case
003848r 3  rr rr rr rr          .word nt_invert, xt_two_to_r, z_two_to_r
00384Cr 3  rr rr        
00384Er 3  32 3E 72             .byte "2>r"
003851r 3               
003851r 3               nt_two_r_from:
003851r 3  03 01                .byte 3, CO             ; native is special case
003853r 3  rr rr rr rr          .word nt_two_to_r, xt_two_r_from, z_two_r_from
003857r 3  rr rr        
003859r 3  32 72 3E             .byte "2r>"
00385Cr 3               
00385Cr 3               nt_two_r_fetch:
00385Cr 3  03 09                .byte 3, CO+NN          ; native is special case, leave NN for now
00385Er 3  rr rr rr rr          .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
003862r 3  rr rr        
003864r 3  32 72 40             .byte "2r@"
003867r 3               
003867r 3               nt_two_literal:
003867r 3  08 14                .byte 8, UF+IM
003869r 3  rr rr rr rr          .word nt_two_r_fetch, xt_two_literal, z_two_literal
00386Dr 3  rr rr        
00386Fr 3  32 6C 69 74          .byte "2literal"
003873r 3  65 72 61 6C  
003877r 3               
003877r 3               nt_two_constant:
003877r 3  09 10                .byte 9, UF
003879r 3  rr rr rr rr          .word nt_two_literal, xt_two_constant, z_two_constant
00387Dr 3  rr rr        
00387Fr 3  32 63 6F 6E          .byte "2constant"
003883r 3  73 74 61 6E  
003887r 3  74           
003888r 3               
003888r 3               nt_two_variable:
003888r 3  09 00                .byte 9, 0
00388Ar 3  rr rr rr rr          .word nt_two_constant, xt_two_variable, z_two_variable
00388Er 3  rr rr        
003890r 3  32 76 61 72          .byte "2variable"
003894r 3  69 61 62 6C  
003898r 3  65           
003899r 3               
003899r 3               nt_two_fetch:
003899r 3  02 10                .byte 2, UF
00389Br 3  rr rr rr rr          .word nt_two_variable, xt_two_fetch, z_two_fetch
00389Fr 3  rr rr        
0038A1r 3  32 40                .byte "2@"
0038A3r 3               
0038A3r 3               nt_two_store:
0038A3r 3  02 10                .byte 2, UF
0038A5r 3  rr rr rr rr          .word nt_two_fetch, xt_two_store, z_two_store
0038A9r 3  rr rr        
0038ABr 3  32 21                .byte "2!"
0038ADr 3               
0038ADr 3               nt_two_over:
0038ADr 3  05 10                .byte 5, UF
0038AFr 3  rr rr rr rr          .word nt_two_store, xt_two_over, z_two_over
0038B3r 3  rr rr        
0038B5r 3  32 6F 76 65          .byte "2over"
0038B9r 3  72           
0038BAr 3               
0038BAr 3               nt_two_swap:
0038BAr 3  05 10                .byte 5, UF
0038BCr 3  rr rr rr rr          .word nt_two_over, xt_two_swap, z_two_swap
0038C0r 3  rr rr        
0038C2r 3  32 73 77 61          .byte "2swap"
0038C6r 3  70           
0038C7r 3               
0038C7r 3               nt_two_drop:
0038C7r 3  05 10                .byte 5, UF
0038C9r 3  rr rr rr rr          .word nt_two_swap, xt_two_drop, z_two_drop
0038CDr 3  rr rr        
0038CFr 3  32 64 72 6F          .byte "2drop"
0038D3r 3  70           
0038D4r 3               
0038D4r 3               nt_max:
0038D4r 3  03 10                .byte 3, UF
0038D6r 3  rr rr rr rr          .word nt_two_drop, xt_max, z_max
0038DAr 3  rr rr        
0038DCr 3  6D 61 78             .byte "max"
0038DFr 3               
0038DFr 3               nt_min:
0038DFr 3  03 10                .byte 3, UF
0038E1r 3  rr rr rr rr          .word nt_max, xt_min, z_min
0038E5r 3  rr rr        
0038E7r 3  6D 69 6E             .byte "min"
0038EAr 3               
0038EAr 3               nt_zero_less:
0038EAr 3  02 10                .byte 2, UF
0038ECr 3  rr rr rr rr          .word nt_min, xt_zero_less, z_zero_less
0038F0r 3  rr rr        
0038F2r 3  30 3C                .byte "0<"
0038F4r 3               
0038F4r 3               nt_zero_greater:
0038F4r 3  02 10                .byte 2, UF
0038F6r 3  rr rr rr rr          .word nt_zero_less, xt_zero_greater, z_zero_greater
0038FAr 3  rr rr        
0038FCr 3  30 3E                .byte "0>"
0038FEr 3               
0038FEr 3               nt_zero_unequal:
0038FEr 3  03 10                .byte 3, UF
003900r 3  rr rr rr rr          .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
003904r 3  rr rr        
003906r 3  30 3C 3E             .byte "0<>"
003909r 3               
003909r 3               nt_zero_equal:
003909r 3  02 10                .byte 2, UF
00390Br 3  rr rr rr rr          .word nt_zero_unequal, xt_zero_equal, z_zero_equal
00390Fr 3  rr rr        
003911r 3  30 3D                .byte "0="
003913r 3               
003913r 3               nt_greater_than:
003913r 3  01 10                .byte 1, UF
003915r 3  rr rr rr rr          .word nt_zero_equal, xt_greater_than, z_greater_than
003919r 3  rr rr        
00391Br 3  3E                   .byte ">"
00391Cr 3               
00391Cr 3               nt_u_greater_than:
00391Cr 3  02 10                .byte 2, UF
00391Er 3  rr rr rr rr          .word nt_greater_than, xt_u_greater_than, z_u_greater_than
003922r 3  rr rr        
003924r 3  75 3E                .byte "u>"
003926r 3               
003926r 3               nt_u_less_than:
003926r 3  02 10                .byte 2, UF
003928r 3  rr rr rr rr          .word nt_u_greater_than, xt_u_less_than, z_u_less_than
00392Cr 3  rr rr        
00392Er 3  75 3C                .byte "u<"
003930r 3               
003930r 3               nt_less_than:
003930r 3  01 10                .byte 1, UF
003932r 3  rr rr rr rr          .word nt_u_less_than, xt_less_than, z_less_than
003936r 3  rr rr        
003938r 3  3C                   .byte "<"
003939r 3               
003939r 3               nt_not_equals:
003939r 3  02 10                .byte 2, UF
00393Br 3  rr rr rr rr          .word nt_less_than, xt_not_equals, z_not_equals
00393Fr 3  rr rr        
003941r 3  3C 3E                .byte "<>"
003943r 3               
003943r 3               nt_equal:
003943r 3  01 10                .byte 1, UF
003945r 3  rr rr rr rr          .word nt_not_equals, xt_equal, z_equal
003949r 3  rr rr        
00394Br 3  3D                   .byte "="
00394Cr 3               
00394Cr 3               nt_two_slash:
00394Cr 3  02 10                .byte 2, UF
00394Er 3  rr rr rr rr          .word nt_equal, xt_two_slash, z_two_slash
003952r 3  rr rr        
003954r 3  32 2F                .byte "2/"
003956r 3               
003956r 3               nt_two_star:
003956r 3  02 10                .byte 2, UF
003958r 3  rr rr rr rr          .word nt_two_slash, xt_two_star, z_two_star
00395Cr 3  rr rr        
00395Er 3  32 2A                .byte "2*"
003960r 3               
003960r 3               nt_one_plus:
003960r 3  02 10                .byte 2, UF
003962r 3  rr rr rr rr          .word nt_two_star, xt_one_plus, z_one_plus
003966r 3  rr rr        
003968r 3  31 2B                .byte "1+"
00396Ar 3               
00396Ar 3               nt_one_minus:
00396Ar 3  02 10                .byte 2, UF
00396Cr 3  rr rr rr rr          .word nt_one_plus, xt_one_minus, z_one_minus
003970r 3  rr rr        
003972r 3  31 2D                .byte "1-"
003974r 3               
003974r 3               nt_here:
003974r 3  04 00                .byte 4, 0
003976r 3  rr rr rr rr          .word nt_one_minus, xt_here, z_here
00397Ar 3  rr rr        
00397Cr 3  68 65 72 65          .byte "here"
003980r 3               
003980r 3               nt_cell_plus:
003980r 3  05 10                .byte 5, UF
003982r 3  rr rr rr rr          .word nt_here, xt_cell_plus, z_cell_plus
003986r 3  rr rr        
003988r 3  63 65 6C 6C          .byte "cell+"
00398Cr 3  2B           
00398Dr 3               
00398Dr 3               nt_cells:
00398Dr 3  05 00                .byte 5, 0
00398Fr 3  rr rr rr rr          .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
003993r 3  rr rr        
003995r 3  63 65 6C 6C          .byte "cells"
003999r 3  73           
00399Ar 3               
00399Ar 3               nt_chars:
00399Ar 3  05 12                .byte 5, AN+UF   ; deleted during compile
00399Cr 3  rr rr rr rr          .word nt_cells, xt_chars, z_chars
0039A0r 3  rr rr        
0039A2r 3  63 68 61 72          .byte "chars"
0039A6r 3  73           
0039A7r 3               
0039A7r 3               nt_char_plus:
0039A7r 3  05 00                .byte 5, 0
0039A9r 3  rr rr rr rr          .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
0039ADr 3  rr rr        
0039AFr 3  63 68 61 72          .byte "char+"
0039B3r 3  2B           
0039B4r 3               
0039B4r 3               nt_bracket_char:
0039B4r 3  06 05                .byte 6, CO+IM
0039B6r 3  rr rr rr rr          .word nt_char_plus, xt_bracket_char, z_bracket_char
0039BAr 3  rr rr        
0039BCr 3  5B 63 68 61          .byte "[char]"
0039C0r 3  72 5D        
0039C2r 3               
0039C2r 3               nt_char:
0039C2r 3  04 00                .byte 4, 0
0039C4r 3  rr rr rr rr          .word nt_bracket_char, xt_char, z_char
0039C8r 3  rr rr        
0039CAr 3  63 68 61 72          .byte "char"
0039CEr 3               
0039CEr 3               nt_pick:
0039CEr 3  04 00                .byte 4, 0    ; underflow check is complicated, leave off here
0039D0r 3  rr rr rr rr          .word nt_char, xt_pick, z_pick
0039D4r 3  rr rr        
0039D6r 3  70 69 63 6B          .byte "pick"
0039DAr 3               
0039DAr 3               nt_lshift:
0039DAr 3  06 10                .byte 6, UF
0039DCr 3  rr rr rr rr          .word nt_pick, xt_lshift, z_lshift
0039E0r 3  rr rr        
0039E2r 3  6C 73 68 69          .byte "lshift"
0039E6r 3  66 74        
0039E8r 3               
0039E8r 3               nt_rshift:
0039E8r 3  06 10                .byte 6, UF
0039EAr 3  rr rr rr rr          .word nt_lshift, xt_rshift, z_rshift
0039EEr 3  rr rr        
0039F0r 3  72 73 68 69          .byte "rshift"
0039F4r 3  66 74        
0039F6r 3               
0039F6r 3               nt_xor:
0039F6r 3  03 10                .byte 3, UF
0039F8r 3  rr rr rr rr          .word nt_rshift, xt_xor, z_xor
0039FCr 3  rr rr        
0039FEr 3  78 6F 72             .byte "xor"
003A01r 3               
003A01r 3               nt_or:
003A01r 3  02 10                .byte 2, UF
003A03r 3  rr rr rr rr          .word nt_xor, xt_or, z_or
003A07r 3  rr rr        
003A09r 3  6F 72                .byte "or"
003A0Br 3               
003A0Br 3               nt_and:
003A0Br 3  03 10                .byte 3, UF
003A0Dr 3  rr rr rr rr          .word nt_or, xt_and, z_and
003A11r 3  rr rr        
003A13r 3  61 6E 64             .byte "and"
003A16r 3               
003A16r 3               nt_dabs:
003A16r 3  04 10                .byte 4, UF
003A18r 3  rr rr rr rr          .word nt_and, xt_dabs, z_dabs
003A1Cr 3  rr rr        
003A1Er 3  64 61 62 73          .byte "dabs"
003A22r 3               
003A22r 3               nt_abs:
003A22r 3  03 10                .byte 3, UF
003A24r 3  rr rr rr rr          .word nt_dabs, xt_abs, z_abs
003A28r 3  rr rr        
003A2Ar 3  61 62 73             .byte "abs"
003A2Dr 3               
003A2Dr 3               nt_minus:
003A2Dr 3  01 10                .byte 1, UF
003A2Fr 3  rr rr rr rr          .word nt_abs, xt_minus, z_minus
003A33r 3  rr rr        
003A35r 3  2D                   .byte "-"
003A36r 3               
003A36r 3               nt_plus:
003A36r 3  01 10                .byte 1, UF
003A38r 3  rr rr rr rr          .word nt_minus, xt_plus, z_plus
003A3Cr 3  rr rr        
003A3Er 3  2B                   .byte "+"
003A3Fr 3               
003A3Fr 3               nt_question_dup:
003A3Fr 3  04 10                .byte 4, UF
003A41r 3  rr rr rr rr          .word nt_plus, xt_question_dup, z_question_dup
003A45r 3  rr rr        
003A47r 3  3F 64 75 70          .byte "?dup"
003A4Br 3               
003A4Br 3               nt_two_dup:
003A4Br 3  04 10                .byte 4, UF
003A4Dr 3  rr rr rr rr          .word nt_question_dup, xt_two_dup, z_two_dup
003A51r 3  rr rr        
003A53r 3  32 64 75 70          .byte "2dup"
003A57r 3               
003A57r 3               nt_two:
003A57r 3  01 00                .byte 1, 0
003A59r 3  rr rr rr rr          .word nt_two_dup, xt_two, z_two
003A5Dr 3  rr rr        
003A5Fr 3  32                   .byte "2"
003A60r 3               
003A60r 3               nt_one:
003A60r 3  01 00                .byte 1, 0
003A62r 3  rr rr rr rr          .word nt_two, xt_one, z_one
003A66r 3  rr rr        
003A68r 3  31                   .byte "1"
003A69r 3               
003A69r 3               nt_zero:
003A69r 3  01 00                .byte 1, 0
003A6Br 3  rr rr rr rr          .word nt_one, xt_zero, z_zero
003A6Fr 3  rr rr        
003A71r 3  30                   .byte "0"
003A72r 3               
003A72r 3               nt_space:
003A72r 3  05 00                .byte 5, 0
003A74r 3  rr rr rr rr          .word nt_zero, xt_space, z_space
003A78r 3  rr rr        
003A7Ar 3  73 70 61 63          .byte "space"
003A7Er 3  65           
003A7Fr 3               
003A7Fr 3               nt_true:
003A7Fr 3  04 00                .byte 4, 0
003A81r 3  rr rr rr rr          .word nt_space, xt_true, z_true
003A85r 3  rr rr        
003A87r 3  74 72 75 65          .byte "true"
003A8Br 3               
003A8Br 3               nt_false:
003A8Br 3  05 00                .byte 5, 0
003A8Dr 3  rr rr rr rr          .word nt_true, xt_false, z_false
003A91r 3  rr rr        
003A93r 3  66 61 6C 73          .byte "false"
003A97r 3  65           
003A98r 3               
003A98r 3               nt_question:
003A98r 3  01 00                .byte 1, 0
003A9Ar 3  rr rr rr rr          .word nt_false, xt_question, z_question
003A9Er 3  rr rr        
003AA0r 3  3F                   .byte "?"
003AA1r 3               
003AA1r 3               nt_ud_dot_r:
003AA1r 3  04 10                .byte 4, UF
003AA3r 3  rr rr rr rr          .word nt_question, xt_ud_dot_r, z_ud_dot_r
003AA7r 3  rr rr        
003AA9r 3  75 64 2E 72          .byte "ud.r"
003AADr 3               
003AADr 3               nt_ud_dot:
003AADr 3  03 10                .byte 3, UF
003AAFr 3  rr rr rr rr          .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
003AB3r 3  rr rr        
003AB5r 3  75 64 2E             .byte "ud."
003AB8r 3               
003AB8r 3               nt_d_dot_r:
003AB8r 3  03 10                .byte 3, UF
003ABAr 3  rr rr rr rr          .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
003ABEr 3  rr rr        
003AC0r 3  64 2E 72             .byte "d.r"
003AC3r 3               
003AC3r 3               nt_d_dot:
003AC3r 3  02 10                .byte 2, UF
003AC5r 3  rr rr rr rr          .word nt_d_dot_r, xt_d_dot, z_d_dot
003AC9r 3  rr rr        
003ACBr 3  64 2E                .byte "d."
003ACDr 3               
003ACDr 3               nt_dot_r:
003ACDr 3  02 10                .byte 2, UF
003ACFr 3  rr rr rr rr          .word nt_d_dot, xt_dot_r, z_dot_r
003AD3r 3  rr rr        
003AD5r 3  2E 72                .byte ".r"
003AD7r 3               
003AD7r 3               nt_u_dot_r:
003AD7r 3  03 10                .byte 3, UF
003AD9r 3  rr rr rr rr          .word nt_dot_r, xt_u_dot_r, z_u_dot_r
003ADDr 3  rr rr        
003ADFr 3  75 2E 72             .byte "u.r"
003AE2r 3               
003AE2r 3               nt_u_dot:
003AE2r 3  02 10                .byte 2, UF
003AE4r 3  rr rr rr rr          .word nt_u_dot_r, xt_u_dot, z_u_dot
003AE8r 3  rr rr        
003AEAr 3  75 2E                .byte "u."
003AECr 3               
003AECr 3               nt_dot:
003AECr 3  01 10                .byte 1, UF
003AEEr 3  rr rr rr rr          .word nt_u_dot, xt_dot, z_dot
003AF2r 3  rr rr        
003AF4r 3  2E                   .byte "."
003AF5r 3               
003AF5r 3               nt_type:
003AF5r 3  04 10                .byte 4, UF
003AF7r 3  rr rr rr rr          .word nt_dot, xt_type, z_type
003AFBr 3  rr rr        
003AFDr 3  74 79 70 65          .byte "type"
003B01r 3               
003B01r 3               nt_emit:
003B01r 3  04 18                .byte 4, NN+UF
003B03r 3  rr rr rr rr          .word nt_type, xt_emit, z_emit
003B07r 3  rr rr        
003B09r 3  65 6D 69 74          .byte "emit"
003B0Dr 3               
003B0Dr 3               nt_execute:
003B0Dr 3  07 10                .byte 7, UF
003B0Fr 3  rr rr rr rr          .word nt_emit, xt_execute, z_execute
003B13r 3  rr rr        
003B15r 3  65 78 65 63          .byte "execute"
003B19r 3  75 74 65     
003B1Cr 3               
003B1Cr 3               nt_plus_store:
003B1Cr 3  02 10                .byte 2, UF
003B1Er 3  rr rr rr rr          .word nt_execute, xt_plus_store, z_plus_store
003B22r 3  rr rr        
003B24r 3  2B 21                .byte "+!"
003B26r 3               
003B26r 3               nt_c_store:
003B26r 3  02 10                .byte 2, UF
003B28r 3  rr rr rr rr          .word nt_plus_store, xt_c_store, z_c_store
003B2Cr 3  rr rr        
003B2Er 3  63 21                .byte "c!"
003B30r 3               
003B30r 3               nt_c_fetch:
003B30r 3  02 10                .byte 2, UF
003B32r 3  rr rr rr rr          .word nt_c_store, xt_c_fetch, z_c_fetch
003B36r 3  rr rr        
003B38r 3  63 40                .byte "c@"
003B3Ar 3               
003B3Ar 3               nt_comma:
003B3Ar 3  01 10                .byte 1, UF
003B3Cr 3  rr rr rr rr          .word nt_c_fetch, xt_comma, z_comma
003B40r 3  rr rr        
003B42r 3  2C                   .byte ","
003B43r 3               
003B43r 3               nt_tuck:
003B43r 3  04 10                .byte 4, UF
003B45r 3  rr rr rr rr          .word nt_comma, xt_tuck, z_tuck
003B49r 3  rr rr        
003B4Br 3  74 75 63 6B          .byte "tuck"
003B4Fr 3               
003B4Fr 3               nt_not_rote:
003B4Fr 3  04 10                .byte 4, UF
003B51r 3  rr rr rr rr          .word nt_tuck, xt_not_rote, z_not_rote
003B55r 3  rr rr        
003B57r 3  2D 72 6F 74          .byte "-rot"
003B5Br 3               
003B5Br 3               nt_rot:
003B5Br 3  03 10                .byte 3, UF
003B5Dr 3  rr rr rr rr          .word nt_not_rote, xt_rot, z_rot
003B61r 3  rr rr        
003B63r 3  72 6F 74             .byte "rot"
003B66r 3               
003B66r 3               nt_nip:
003B66r 3  03 10                .byte 3, UF
003B68r 3  rr rr rr rr          .word nt_rot, xt_nip, z_nip
003B6Cr 3  rr rr        
003B6Er 3  6E 69 70             .byte "nip"
003B71r 3               
003B71r 3               nt_r_fetch:
003B71r 3  02 01                .byte 2, CO    ; native is special case
003B73r 3  rr rr rr rr          .word nt_nip, xt_r_fetch, z_r_fetch
003B77r 3  rr rr        
003B79r 3  72 40                .byte "r@"
003B7Br 3               
003B7Br 3               nt_r_from:
003B7Br 3  02 01                .byte 2, CO    ; native is special case
003B7Dr 3  rr rr rr rr          .word nt_r_fetch, xt_r_from, z_r_from
003B81r 3  rr rr        
003B83r 3  72 3E                .byte "r>"
003B85r 3               
003B85r 3               nt_to_r:
003B85r 3  02 11                .byte 2, CO+UF ; native is special case
003B87r 3  rr rr rr rr          .word nt_r_from, xt_to_r, z_to_r
003B8Br 3  rr rr        
003B8Dr 3  3E 72                .byte ">r"
003B8Fr 3               
003B8Fr 3               nt_over:
003B8Fr 3  04 10                .byte 4, UF
003B91r 3  rr rr rr rr          .word nt_to_r, xt_over, z_over
003B95r 3  rr rr        
003B97r 3  6F 76 65 72          .byte "over"
003B9Br 3               
003B9Br 3               nt_fetch:
003B9Br 3  01 10                .byte 1, UF
003B9Dr 3  rr rr rr rr          .word nt_over, xt_fetch, z_fetch
003BA1r 3  rr rr        
003BA3r 3  40                   .byte "@"
003BA4r 3               
003BA4r 3               nt_store:
003BA4r 3  01 10                .byte 1, UF
003BA6r 3  rr rr rr rr          .word nt_fetch, xt_store, z_store
003BAAr 3  rr rr        
003BACr 3  21                   .byte "!"
003BADr 3               
003BADr 3               nt_swap:
003BADr 3  04 10                .byte 4, UF
003BAFr 3  rr rr rr rr          .word nt_store, xt_swap, z_swap
003BB3r 3  rr rr        
003BB5r 3  73 77 61 70          .byte "swap"
003BB9r 3               
003BB9r 3               nt_dup:
003BB9r 3  03 10                .byte 3, UF
003BBBr 3  rr rr rr rr          .word nt_swap, xt_dup, z_dup
003BBFr 3  rr rr        
003BC1r 3  64 75 70             .byte "dup"
003BC4r 3               
003BC4r 3               ; DROP is always the first native word in the Dictionary
003BC4r 3               dictionary_start:
003BC4r 3               nt_drop:
003BC4r 3  04 10                .byte 4, UF
003BC6r 3  rr rr rr rr          .word nt_dup, xt_drop, z_drop
003BCAr 3  rr rr        
003BCCr 3  64 72 6F 70          .byte "drop"
003BD0r 3               
003BD0r 3               ; END of FORTH-WORDLIST
003BD0r 3               
003BD0r 3               
003BD0r 3               ; ROOT-WORDLIST
003BD0r 3                       ; This is a short wordlist that has just the words needed to
003BD0r 3                       ; set the wordlists. These words are also included in the
003BD0r 3                       ; FORTH-WORDLIST as well.
003BD0r 3               
003BD0r 3               nt_root_words:
003BD0r 3  05 00                .byte 5, 0
003BD2r 3  00 00 rr rr          .word 0000, xt_words, z_words
003BD6r 3  rr rr        
003BD8r 3  77 6F 72 64          .byte "words"
003BDCr 3  73           
003BDDr 3               
003BDDr 3               nt_root_forth_wordlist: ; shares code with ZERO
003BDDr 3  0E 00                .byte 14, 0
003BDFr 3  rr rr rr rr          .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
003BE3r 3  rr rr        
003BE5r 3  66 6F 72 74          .byte "forth-wordlist"
003BE9r 3  68 2D 77 6F  
003BEDr 3  72 64 6C 69  
003BF3r 3               
003BF3r 3               nt_root_forth:
003BF3r 3  05 00                .byte 5, 0
003BF5r 3  rr rr rr rr          .word nt_root_forth_wordlist, xt_forth, z_forth
003BF9r 3  rr rr        
003BFBr 3  66 6F 72 74          .byte "forth"
003BFFr 3  68           
003C00r 3               
003C00r 3               root_dictionary_start:
003C00r 3               nt_root_set_order:
003C00r 3  09 00                .byte 9, 0
003C02r 3  rr rr rr rr          .word nt_root_forth, xt_set_order, z_set_order
003C06r 3  rr rr        
003C08r 3  73 65 74 2D          .byte "set-order"
003C0Cr 3  6F 72 64 65  
003C10r 3  72           
003C11r 3               
003C11r 3               ; END of ROOT-WORDLIST
003C11r 3               
003C11r 3               
003C11r 3               ; EDITOR-WORDLIST
003C11r 3               
003C11r 3               nt_editor_enter_screen:
003C11r 3  0C 00                .byte 12, 0
003C13r 3  00 00 rr rr          .word 0000, xt_editor_enter_screen, z_editor_enter_screen
003C17r 3  rr rr        
003C19r 3  65 6E 74 65          .byte "enter-screen"
003C1Dr 3  72 2D 73 63  
003C21r 3  72 65 65 6E  
003C25r 3               
003C25r 3               nt_editor_erase_screen:
003C25r 3  0C 00                .byte 12, 0
003C27r 3  rr rr rr rr          .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
003C2Br 3  rr rr        
003C2Dr 3  65 72 61 73          .byte "erase-screen"
003C31r 3  65 2D 73 63  
003C35r 3  72 65 65 6E  
003C39r 3               
003C39r 3               nt_editor_el:
003C39r 3  02 00                .byte 2, 0
003C3Br 3  rr rr rr rr          .word nt_editor_erase_screen, xt_editor_el, z_editor_el
003C3Fr 3  rr rr        
003C41r 3  65 6C                .byte "el"
003C43r 3               
003C43r 3               nt_editor_l:
003C43r 3  01 00                .byte 1, 0
003C45r 3  rr rr rr rr          .word nt_editor_el, xt_editor_l, z_editor_l
003C49r 3  rr rr        
003C4Br 3  6C                   .byte "l"
003C4Cr 3               
003C4Cr 3               nt_editor_line:
003C4Cr 3  04 10                .byte 4, UF
003C4Er 3  rr rr rr rr          .word nt_editor_l, xt_editor_line, z_editor_line
003C52r 3  rr rr        
003C54r 3  6C 69 6E 65          .byte "line"
003C58r 3               
003C58r 3               editor_dictionary_start:
003C58r 3               nt_editor_o:
003C58r 3  01 00                .byte 1, 0
003C5Ar 3  rr rr rr rr          .word nt_editor_line, xt_editor_o, z_editor_o
003C5Er 3  rr rr        
003C60r 3  6F                   .byte "o"
003C61r 3               
003C61r 3               ; END of EDITOR-WORDLIST
003C61r 3               
003C61r 3               
003C61r 3               ; ; ASSEMBLER-WORDLIST
003C61r 3               
003C61r 3               ; ; Labels for the opcodes have the format "nt_asm_<OPC>" where a futher
003C61r 3               ; ; underscore replaces any dot present in the SAN mnemonic. The hash sign for
003C61r 3               ; ; immediate addressing is replaced by an "h" (for example, the label code for
003C61r 3               ; ; "lda.#" is "xt_adm_lda_h"). All opcodes are immediate.
003C61r 3               .ifdef TALI_OPTIONAL_ASSEMBLER
003C61r 3               assembler_dictionary_start:
003C61r 3               nt_asm_adc_h:
003C61r 3  05 04        		.byte 5, IM
003C63r 3  rr rr                        .word nt_asm_adc_x
003C65r 3  rr rr rr rr  		.word xt_asm_adc_h, z_asm_adc_h
003C69r 3  61 64 63 2E  		.byte "adc.#"
003C6Dr 3  23           
003C6Er 3               
003C6Er 3               nt_asm_adc_x:
003C6Er 3  05 04        		.byte 5, IM
003C70r 3  rr rr                        .word nt_asm_adc_y
003C72r 3  rr rr rr rr  		.word xt_asm_adc_x, z_asm_adc_x
003C76r 3  61 64 63 2E  		.byte "adc.x"
003C7Ar 3  78           
003C7Br 3               
003C7Br 3               nt_asm_adc_y:
003C7Br 3  05 04        		.byte 5, IM
003C7Dr 3  rr rr                        .word nt_asm_adc_z
003C7Fr 3  rr rr rr rr  		.word xt_asm_adc_y, z_asm_adc_y
003C83r 3  61 64 63 2E  		.byte "adc.y"
003C87r 3  79           
003C88r 3               
003C88r 3               nt_asm_adc_z:
003C88r 3  05 04        		.byte 5, IM
003C8Ar 3  rr rr                        .word nt_asm_adc_zi
003C8Cr 3  rr rr rr rr  		.word xt_asm_adc_z, z_asm_adc_z
003C90r 3  61 64 63 2E  		.byte "adc.z"
003C94r 3  7A           
003C95r 3               
003C95r 3               nt_asm_adc_zi:
003C95r 3  06 04        		.byte 6, IM
003C97r 3  rr rr                        .word nt_asm_adc_ziy
003C99r 3  rr rr rr rr  		.word xt_asm_adc_zi, z_asm_adc_zi
003C9Dr 3  61 64 63 2E  		.byte "adc.zi"
003CA1r 3  7A 69        
003CA3r 3               
003CA3r 3               nt_asm_adc_ziy:
003CA3r 3  07 04        		.byte 7, IM
003CA5r 3  rr rr                        .word nt_asm_adc_zx
003CA7r 3  rr rr rr rr  		.word xt_asm_adc_ziy, z_asm_adc_ziy
003CABr 3  61 64 63 2E  		.byte "adc.ziy"
003CAFr 3  7A 69 79     
003CB2r 3               
003CB2r 3               nt_asm_adc_zx:
003CB2r 3  06 04        		.byte 6, IM
003CB4r 3  rr rr                        .word nt_asm_adc_zxi
003CB6r 3  rr rr rr rr  		.word xt_asm_adc_zx, z_asm_adc_zx
003CBAr 3  61 64 63 2E  		.byte "adc.zx"
003CBEr 3  7A 78        
003CC0r 3               
003CC0r 3               nt_asm_adc_zxi:
003CC0r 3  07 04        		.byte 7, IM
003CC2r 3  rr rr                        .word nt_asm_and
003CC4r 3  rr rr rr rr  		.word xt_asm_adc_zxi, z_asm_adc_zxi
003CC8r 3  61 64 63 2E  		.byte "adc.zxi"
003CCCr 3  7A 78 69     
003CCFr 3               
003CCFr 3               nt_asm_and:     ; not "and" because of conflicts with Forth word
003CCFr 3  04 04        		.byte 4, IM
003CD1r 3  rr rr                        .word nt_asm_and_h
003CD3r 3  rr rr rr rr  		.word xt_asm_and, z_asm_and
003CD7r 3  61 6E 64 2E  		.byte "and."
003CDBr 3               
003CDBr 3               nt_asm_and_h:
003CDBr 3  05 04        		.byte 5, IM
003CDDr 3  rr rr                        .word nt_asm_and_x
003CDFr 3  rr rr rr rr  		.word xt_asm_and_h, z_asm_and_h
003CE3r 3  61 6E 64 2E  		.byte "and.#"
003CE7r 3  23           
003CE8r 3               
003CE8r 3               nt_asm_and_x:
003CE8r 3  05 04        		.byte 5, IM
003CEAr 3  rr rr                        .word nt_asm_and_y
003CECr 3  rr rr rr rr  		.word xt_asm_and_x, z_asm_and_x
003CF0r 3  61 6E 64 2E  		.byte "and.x"
003CF4r 3  78           
003CF5r 3               
003CF5r 3               nt_asm_and_y:
003CF5r 3  05 04        		.byte 5, IM
003CF7r 3  rr rr                        .word nt_asm_and_z
003CF9r 3  rr rr rr rr  		.word xt_asm_and_y, z_asm_and_y
003CFDr 3  61 6E 64 2E  		.byte "and.y"
003D01r 3  79           
003D02r 3               
003D02r 3               nt_asm_and_z:
003D02r 3  05 04        		.byte 5, IM
003D04r 3  rr rr                        .word nt_asm_and_zi
003D06r 3  rr rr rr rr  		.word xt_asm_and_z, z_asm_and_z
003D0Ar 3  61 6E 64 2E  		.byte "and.z"
003D0Er 3  7A           
003D0Fr 3               
003D0Fr 3               nt_asm_and_zi:
003D0Fr 3  06 04        		.byte 6, IM
003D11r 3  rr rr                        .word nt_asm_and_ziy
003D13r 3  rr rr rr rr  		.word xt_asm_and_zi, z_asm_and_zi
003D17r 3  61 6E 64 2E  		.byte "and.zi"
003D1Br 3  7A 69        
003D1Dr 3               
003D1Dr 3               nt_asm_and_ziy:
003D1Dr 3  07 04        		.byte 7, IM
003D1Fr 3  rr rr                        .word nt_asm_and_zx
003D21r 3  rr rr rr rr  		.word xt_asm_and_ziy, z_asm_and_ziy
003D25r 3  61 6E 64 2E  		.byte "and.ziy"
003D29r 3  7A 69 79     
003D2Cr 3               
003D2Cr 3               nt_asm_and_zx:
003D2Cr 3  06 04        		.byte 6, IM
003D2Er 3  rr rr                        .word nt_asm_and_zxi
003D30r 3  rr rr rr rr  		.word xt_asm_and_zx, z_asm_and_zx
003D34r 3  61 6E 64 2E  		.byte "and.zx"
003D38r 3  7A 78        
003D3Ar 3               
003D3Ar 3               nt_asm_and_zxi:
003D3Ar 3  07 04        		.byte 7, IM
003D3Cr 3  rr rr                        .word nt_asm_asl
003D3Er 3  rr rr rr rr  		.word xt_asm_and_zxi, z_asm_and_zxi
003D42r 3  61 6E 64 2E  		.byte "and.zxi"
003D46r 3  7A 78 69     
003D49r 3               
003D49r 3               nt_asm_asl:
003D49r 3  03 04        		.byte 3, IM
003D4Br 3  rr rr                        .word nt_asm_asl_a
003D4Dr 3  rr rr rr rr  		.word xt_asm_asl, z_asm_asl
003D51r 3  61 73 6C     		.byte "asl"
003D54r 3               
003D54r 3               nt_asm_asl_a:
003D54r 3  05 04        		.byte 5, IM
003D56r 3  rr rr                        .word nt_asm_asl_x
003D58r 3  rr rr rr rr  		.word xt_asm_asl_a, z_asm_asl_a
003D5Cr 3  61 73 6C 2E  		.byte "asl.a"
003D60r 3  61           
003D61r 3               
003D61r 3               nt_asm_asl_x:
003D61r 3  05 04        		.byte 5, IM
003D63r 3  rr rr                        .word nt_asm_asl_z
003D65r 3  rr rr rr rr  		.word xt_asm_asl_x, z_asm_asl_x
003D69r 3  61 73 6C 2E  		.byte "asl.x"
003D6Dr 3  78           
003D6Er 3               
003D6Er 3               nt_asm_asl_z:
003D6Er 3  05 04        		.byte 5, IM
003D70r 3  rr rr                        .word nt_asm_asl_zx
003D72r 3  rr rr rr rr  		.word xt_asm_asl_z, z_asm_asl_z
003D76r 3  61 73 6C 2E  		.byte "asl.z"
003D7Ar 3  7A           
003D7Br 3               
003D7Br 3               nt_asm_asl_zx:
003D7Br 3  06 04        		.byte 6, IM
003D7Dr 3  rr rr                        .word nt_asm_bcc
003D7Fr 3  rr rr rr rr  		.word xt_asm_asl_zx, z_asm_asl_zx
003D83r 3  61 73 6C 2E  		.byte "asl.zx"
003D87r 3  7A 78        
003D89r 3               
003D89r 3               nt_asm_bcc:
003D89r 3  03 04        		.byte 3, IM
003D8Br 3  rr rr                        .word nt_asm_bcs
003D8Dr 3  rr rr rr rr  		.word xt_asm_bcc, z_asm_bcc
003D91r 3  62 63 63     		.byte "bcc"
003D94r 3               
003D94r 3               nt_asm_bcs:
003D94r 3  03 04        		.byte 3, IM
003D96r 3  rr rr                        .word nt_asm_beq
003D98r 3  rr rr rr rr  		.word xt_asm_bcs, z_asm_bcs
003D9Cr 3  62 63 73     		.byte "bcs"
003D9Fr 3               
003D9Fr 3               nt_asm_beq:
003D9Fr 3  03 04        		.byte 3, IM
003DA1r 3  rr rr                        .word nt_asm_bit
003DA3r 3  rr rr rr rr  		.word xt_asm_beq, z_asm_beq
003DA7r 3  62 65 71     		.byte "beq"
003DAAr 3               
003DAAr 3               nt_asm_bit:
003DAAr 3  03 04        		.byte 3, IM
003DACr 3  rr rr                        .word nt_asm_bit_h
003DAEr 3  rr rr rr rr  		.word xt_asm_bit, z_asm_bit
003DB2r 3  62 69 74     		.byte "bit"
003DB5r 3               
003DB5r 3               nt_asm_bit_h:
003DB5r 3  05 04        		.byte 5, IM
003DB7r 3  rr rr                        .word nt_asm_bit_x
003DB9r 3  rr rr rr rr  		.word xt_asm_bit_h, z_asm_bit_h
003DBDr 3  62 69 74 2E  		.byte "bit.#"
003DC1r 3  23           
003DC2r 3               
003DC2r 3               nt_asm_bit_x:
003DC2r 3  05 04        		.byte 5, IM
003DC4r 3  rr rr                        .word nt_asm_bit_z
003DC6r 3  rr rr rr rr  		.word xt_asm_bit_x, z_asm_bit_x
003DCAr 3  62 69 74 2E  		.byte "bit.x"
003DCEr 3  78           
003DCFr 3               
003DCFr 3               nt_asm_bit_z:
003DCFr 3  05 04        		.byte 5, IM
003DD1r 3  rr rr                        .word nt_asm_bit_zx
003DD3r 3  rr rr rr rr  		.word xt_asm_bit_z, z_asm_bit_z
003DD7r 3  62 69 74 2E  		.byte "bit.z"
003DDBr 3  7A           
003DDCr 3               
003DDCr 3               nt_asm_bit_zx:
003DDCr 3  06 04        		.byte 6, IM
003DDEr 3  rr rr                        .word nt_asm_bmi
003DE0r 3  rr rr rr rr  		.word xt_asm_bit_zx, z_asm_bit_zx
003DE4r 3  62 69 74 2E  		.byte "bit.zx"
003DE8r 3  7A 78        
003DEAr 3               
003DEAr 3               nt_asm_bmi:
003DEAr 3  03 04        		.byte 3, IM
003DECr 3  rr rr                        .word nt_asm_bne
003DEEr 3  rr rr rr rr  		.word xt_asm_bmi, z_asm_bmi
003DF2r 3  62 6D 69     		.byte "bmi"
003DF5r 3               
003DF5r 3               nt_asm_bne:
003DF5r 3  03 04        		.byte 3, IM
003DF7r 3  rr rr                        .word nt_asm_bpl
003DF9r 3  rr rr rr rr  		.word xt_asm_bne, z_asm_bne
003DFDr 3  62 6E 65     		.byte "bne"
003E00r 3               
003E00r 3               nt_asm_bpl:
003E00r 3  03 04        		.byte 3, IM
003E02r 3  rr rr                        .word nt_asm_bra
003E04r 3  rr rr rr rr  		.word xt_asm_bpl, z_asm_bpl
003E08r 3  62 70 6C     		.byte "bpl"
003E0Br 3               
003E0Br 3               nt_asm_bra:
003E0Br 3  03 04        		.byte 3, IM
003E0Dr 3  rr rr                        .word nt_asm_brk
003E0Fr 3  rr rr rr rr  		.word xt_asm_bra, z_asm_bra
003E13r 3  62 72 61     		.byte "bra"
003E16r 3               
003E16r 3               nt_asm_brk:
003E16r 3  03 04        		.byte 3, IM
003E18r 3  rr rr                        .word nt_asm_bvc
003E1Ar 3  rr rr rr rr  		.word xt_asm_brk, z_asm_brk
003E1Er 3  62 72 6B     		.byte "brk"
003E21r 3               
003E21r 3               nt_asm_bvc:
003E21r 3  03 04        		.byte 3, IM
003E23r 3  rr rr                        .word nt_asm_bvs
003E25r 3  rr rr rr rr  		.word xt_asm_bvc, z_asm_bvc
003E29r 3  62 76 63     		.byte "bvc"
003E2Cr 3               
003E2Cr 3               nt_asm_bvs:
003E2Cr 3  03 04        		.byte 3, IM
003E2Er 3  rr rr                        .word nt_asm_clc
003E30r 3  rr rr rr rr  		.word xt_asm_bvs, z_asm_bvs
003E34r 3  62 76 73     		.byte "bvs"
003E37r 3               
003E37r 3               nt_asm_clc:
003E37r 3  03 04        		.byte 3, IM
003E39r 3  rr rr                        .word nt_asm_cld
003E3Br 3  rr rr rr rr  		.word xt_asm_clc, z_asm_clc
003E3Fr 3  63 6C 63     		.byte "clc"
003E42r 3               
003E42r 3               nt_asm_cld:
003E42r 3  03 04        		.byte 3, IM
003E44r 3  rr rr                        .word nt_asm_cli
003E46r 3  rr rr rr rr  		.word xt_asm_cld, z_asm_cld
003E4Ar 3  63 6C 64     		.byte "cld"
003E4Dr 3               
003E4Dr 3               nt_asm_cli:
003E4Dr 3  03 04        		.byte 3, IM
003E4Fr 3  rr rr                        .word nt_asm_clv
003E51r 3  rr rr rr rr  		.word xt_asm_cli, z_asm_cli
003E55r 3  63 6C 69     		.byte "cli"
003E58r 3               
003E58r 3               nt_asm_clv:
003E58r 3  03 04        		.byte 3, IM
003E5Ar 3  rr rr                        .word nt_asm_cmp
003E5Cr 3  rr rr rr rr  		.word xt_asm_clv, z_asm_clv
003E60r 3  63 6C 76     		.byte "clv"
003E63r 3               
003E63r 3               nt_asm_cmp:
003E63r 3  03 04        		.byte 3, IM
003E65r 3  rr rr                        .word nt_asm_cmp_h
003E67r 3  rr rr rr rr  		.word xt_asm_cmp, z_asm_cmp
003E6Br 3  63 6D 70     		.byte "cmp"
003E6Er 3               
003E6Er 3               nt_asm_cmp_h:
003E6Er 3  05 04        		.byte 5, IM
003E70r 3  rr rr                        .word nt_asm_cmp_x
003E72r 3  rr rr rr rr  		.word xt_asm_cmp_h, z_asm_cmp_h
003E76r 3  63 6D 70 2E  		.byte "cmp.#"
003E7Ar 3  23           
003E7Br 3               
003E7Br 3               nt_asm_cmp_x:
003E7Br 3  05 04        		.byte 5, IM
003E7Dr 3  rr rr                        .word nt_asm_cmp_y
003E7Fr 3  rr rr rr rr  		.word xt_asm_cmp_x, z_asm_cmp_x
003E83r 3  63 6D 70 2E  		.byte "cmp.x"
003E87r 3  78           
003E88r 3               
003E88r 3               nt_asm_cmp_y:
003E88r 3  05 04        		.byte 5, IM
003E8Ar 3  rr rr                        .word nt_asm_cmp_z
003E8Cr 3  rr rr rr rr  		.word xt_asm_cmp_y, z_asm_cmp_y
003E90r 3  63 6D 70 2E  		.byte "cmp.y"
003E94r 3  79           
003E95r 3               
003E95r 3               nt_asm_cmp_z:
003E95r 3  05 04        		.byte 5, IM
003E97r 3  rr rr                        .word nt_asm_cmp_zi
003E99r 3  rr rr rr rr  		.word xt_asm_cmp_z, z_asm_cmp_z
003E9Dr 3  63 6D 70 2E  		.byte "cmp.z"
003EA1r 3  7A           
003EA2r 3               
003EA2r 3               nt_asm_cmp_zi:
003EA2r 3  06 04        		.byte 6, IM
003EA4r 3  rr rr                        .word nt_asm_cmp_ziy
003EA6r 3  rr rr rr rr  		.word xt_asm_cmp_zi, z_asm_cmp_zi
003EAAr 3  63 6D 70 2E  		.byte "cmp.zi"
003EAEr 3  7A 69        
003EB0r 3               
003EB0r 3               nt_asm_cmp_ziy:
003EB0r 3  07 04        		.byte 7, IM
003EB2r 3  rr rr                        .word nt_asm_cmp_zx
003EB4r 3  rr rr rr rr  		.word xt_asm_cmp_ziy, z_asm_cmp_ziy
003EB8r 3  63 6D 70 2E  		.byte "cmp.ziy"
003EBCr 3  7A 69 79     
003EBFr 3               
003EBFr 3               nt_asm_cmp_zx:
003EBFr 3  06 04        		.byte 6, IM
003EC1r 3  rr rr                        .word nt_asm_cmp_zxi
003EC3r 3  rr rr rr rr  		.word xt_asm_cmp_zx, z_asm_cmp_zx
003EC7r 3  63 6D 70 2E  		.byte "cmp.zx"
003ECBr 3  7A 78        
003ECDr 3               
003ECDr 3               nt_asm_cmp_zxi:
003ECDr 3  07 04        		.byte 7, IM
003ECFr 3  rr rr                        .word nt_asm_cpx
003ED1r 3  rr rr rr rr  		.word xt_asm_cmp_zxi, z_asm_cmp_zxi
003ED5r 3  63 6D 70 2E  		.byte "cmp.zxi"
003ED9r 3  7A 78 69     
003EDCr 3               
003EDCr 3               nt_asm_cpx:
003EDCr 3  03 04        		.byte 3, IM
003EDEr 3  rr rr                        .word nt_asm_cpx_h
003EE0r 3  rr rr rr rr  		.word xt_asm_cpx, z_asm_cpx
003EE4r 3  63 70 78     		.byte "cpx"
003EE7r 3               
003EE7r 3               nt_asm_cpx_h:
003EE7r 3  05 04        		.byte 5, IM
003EE9r 3  rr rr                        .word nt_asm_cpx_z
003EEBr 3  rr rr rr rr  		.word xt_asm_cpx_h, z_asm_cpx_h
003EEFr 3  63 70 78 2E  		.byte "cpx.#"
003EF3r 3  23           
003EF4r 3               
003EF4r 3               nt_asm_cpx_z:
003EF4r 3  05 04        		.byte 5, IM
003EF6r 3  rr rr                        .word nt_asm_cpy
003EF8r 3  rr rr rr rr  		.word xt_asm_cpx_z, z_asm_cpx_z
003EFCr 3  63 70 78 2E  		.byte "cpx.z"
003F00r 3  7A           
003F01r 3               
003F01r 3               nt_asm_cpy:
003F01r 3  03 04        		.byte 3, IM
003F03r 3  rr rr                        .word nt_asm_cpy_h
003F05r 3  rr rr rr rr  		.word xt_asm_cpy, z_asm_cpy
003F09r 3  63 70 79     		.byte "cpy"
003F0Cr 3               
003F0Cr 3               nt_asm_cpy_h:
003F0Cr 3  05 04        		.byte 5, IM
003F0Er 3  rr rr                        .word nt_asm_cpy_z
003F10r 3  rr rr rr rr  		.word xt_asm_cpy_h, z_asm_cpy_h
003F14r 3  63 70 79 2E  		.byte "cpy.#"
003F18r 3  23           
003F19r 3               
003F19r 3               nt_asm_cpy_z:
003F19r 3  05 04        		.byte 5, IM
003F1Br 3  rr rr                        .word nt_asm_dec
003F1Dr 3  rr rr rr rr  		.word xt_asm_cpy_z, z_asm_cpy_z
003F21r 3  63 70 79 2E  		.byte "cpy.z"
003F25r 3  7A           
003F26r 3               
003F26r 3               nt_asm_dec:
003F26r 3  03 04        		.byte 3, IM
003F28r 3  rr rr                        .word nt_asm_dec_a
003F2Ar 3  rr rr rr rr  		.word xt_asm_dec, z_asm_dec
003F2Er 3  64 65 63     		.byte "dec"
003F31r 3               
003F31r 3               nt_asm_dec_a:
003F31r 3  05 04        		.byte 5, IM
003F33r 3  rr rr                        .word nt_asm_dec_x
003F35r 3  rr rr rr rr  		.word xt_asm_dec_a, z_asm_dec_a
003F39r 3  64 65 63 2E  		.byte "dec.a"
003F3Dr 3  61           
003F3Er 3               
003F3Er 3               nt_asm_dec_x:
003F3Er 3  05 04        		.byte 5, IM
003F40r 3  rr rr                        .word nt_asm_dec_z
003F42r 3  rr rr rr rr  		.word xt_asm_dec_x, z_asm_dec_x
003F46r 3  64 65 63 2E  		.byte "dec.x"
003F4Ar 3  78           
003F4Br 3               
003F4Br 3               nt_asm_dec_z:
003F4Br 3  05 04        		.byte 5, IM
003F4Dr 3  rr rr                        .word nt_asm_dec_zx
003F4Fr 3  rr rr rr rr  		.word xt_asm_dec_z, z_asm_dec_z
003F53r 3  64 65 63 2E  		.byte "dec.z"
003F57r 3  7A           
003F58r 3               
003F58r 3               nt_asm_dec_zx:
003F58r 3  06 04        		.byte 6, IM
003F5Ar 3  rr rr                        .word nt_asm_dex
003F5Cr 3  rr rr rr rr  		.word xt_asm_dec_zx, z_asm_dec_zx
003F60r 3  64 65 63 2E  		.byte "dec.zx"
003F64r 3  7A 78        
003F66r 3               
003F66r 3               nt_asm_dex:
003F66r 3  03 04        		.byte 3, IM
003F68r 3  rr rr                        .word nt_asm_dey
003F6Ar 3  rr rr rr rr  		.word xt_asm_dex, z_asm_dex
003F6Er 3  64 65 78     		.byte "dex"
003F71r 3               
003F71r 3               nt_asm_dey:
003F71r 3  03 04        		.byte 3, IM
003F73r 3  rr rr                        .word nt_asm_eor
003F75r 3  rr rr rr rr  		.word xt_asm_dey, z_asm_dey
003F79r 3  64 65 79     		.byte "dey"
003F7Cr 3               
003F7Cr 3               nt_asm_eor:
003F7Cr 3  03 04        		.byte 3, IM
003F7Er 3  rr rr                        .word nt_asm_eor_h
003F80r 3  rr rr rr rr  		.word xt_asm_eor, z_asm_eor
003F84r 3  65 6F 72     		.byte "eor"
003F87r 3               
003F87r 3               nt_asm_eor_h:
003F87r 3  05 04        		.byte 5, IM
003F89r 3  rr rr                        .word nt_asm_eor_x
003F8Br 3  rr rr rr rr  		.word xt_asm_eor_h, z_asm_eor_h
003F8Fr 3  65 6F 72 2E  		.byte "eor.#"
003F93r 3  23           
003F94r 3               
003F94r 3               nt_asm_eor_x:
003F94r 3  05 04        		.byte 5, IM
003F96r 3  rr rr                        .word nt_asm_eor_y
003F98r 3  rr rr rr rr  		.word xt_asm_eor_x, z_asm_eor_x
003F9Cr 3  65 6F 72 2E  		.byte "eor.x"
003FA0r 3  78           
003FA1r 3               
003FA1r 3               nt_asm_eor_y:
003FA1r 3  05 04        		.byte 5, IM
003FA3r 3  rr rr                        .word nt_asm_eor_z
003FA5r 3  rr rr rr rr  		.word xt_asm_eor_y, z_asm_eor_y
003FA9r 3  65 6F 72 2E  		.byte "eor.y"
003FADr 3  79           
003FAEr 3               
003FAEr 3               nt_asm_eor_z:
003FAEr 3  05 04        		.byte 5, IM
003FB0r 3  rr rr                        .word nt_asm_eor_zi
003FB2r 3  rr rr rr rr  		.word xt_asm_eor_z, z_asm_eor_z
003FB6r 3  65 6F 72 2E  		.byte "eor.z"
003FBAr 3  7A           
003FBBr 3               
003FBBr 3               nt_asm_eor_zi:
003FBBr 3  06 04        		.byte 6, IM
003FBDr 3  rr rr                        .word nt_asm_eor_ziy
003FBFr 3  rr rr rr rr  		.word xt_asm_eor_zi, z_asm_eor_zi
003FC3r 3  65 6F 72 2E  		.byte "eor.zi"
003FC7r 3  7A 69        
003FC9r 3               
003FC9r 3               nt_asm_eor_ziy:
003FC9r 3  07 04        		.byte 7, IM
003FCBr 3  rr rr                        .word nt_asm_eor_zx
003FCDr 3  rr rr rr rr  		.word xt_asm_eor_ziy, z_asm_eor_ziy
003FD1r 3  65 6F 72 2E  		.byte "eor.ziy"
003FD5r 3  7A 69 79     
003FD8r 3               
003FD8r 3               nt_asm_eor_zx:
003FD8r 3  06 04        		.byte 6, IM
003FDAr 3  rr rr                        .word nt_asm_eor_zxi
003FDCr 3  rr rr rr rr  		.word xt_asm_eor_zx, z_asm_eor_zx
003FE0r 3  65 6F 72 2E  		.byte "eor.zx"
003FE4r 3  7A 78        
003FE6r 3               
003FE6r 3               nt_asm_eor_zxi:
003FE6r 3  07 04        		.byte 7, IM
003FE8r 3  rr rr                        .word nt_asm_inc
003FEAr 3  rr rr rr rr  		.word xt_asm_eor_zxi, z_asm_eor_zxi
003FEEr 3  65 6F 72 2E  		.byte "eor.zxi"
003FF2r 3  7A 78 69     
003FF5r 3               
003FF5r 3               nt_asm_inc:
003FF5r 3  03 04        		.byte 3, IM
003FF7r 3  rr rr                        .word nt_asm_inc_a
003FF9r 3  rr rr rr rr  		.word xt_asm_inc, z_asm_inc
003FFDr 3  69 6E 63     		.byte "inc"
004000r 3               
004000r 3               nt_asm_inc_a:
004000r 3  05 04        		.byte 5, IM
004002r 3  rr rr                        .word nt_asm_inc_x
004004r 3  rr rr rr rr  		.word xt_asm_inc_a, z_asm_inc_a
004008r 3  69 6E 63 2E  		.byte "inc.a"
00400Cr 3  61           
00400Dr 3               
00400Dr 3               nt_asm_inc_x:
00400Dr 3  05 04        		.byte 5, IM
00400Fr 3  rr rr                        .word nt_asm_inc_z
004011r 3  rr rr rr rr  		.word xt_asm_inc_x, z_asm_inc_x
004015r 3  69 6E 63 2E  		.byte "inc.x"
004019r 3  78           
00401Ar 3               
00401Ar 3               nt_asm_inc_z:
00401Ar 3  05 04        		.byte 5, IM
00401Cr 3  rr rr                        .word nt_asm_inc_zx
00401Er 3  rr rr rr rr  		.word xt_asm_inc_z, z_asm_inc_z
004022r 3  69 6E 63 2E  		.byte "inc.z"
004026r 3  7A           
004027r 3               
004027r 3               nt_asm_inc_zx:
004027r 3  06 04        		.byte 6, IM
004029r 3  rr rr                        .word nt_asm_inx
00402Br 3  rr rr rr rr  		.word xt_asm_inc_zx, z_asm_inc_zx
00402Fr 3  69 6E 63 2E  		.byte "inc.zx"
004033r 3  7A 78        
004035r 3               
004035r 3               nt_asm_inx:
004035r 3  03 04        		.byte 3, IM
004037r 3  rr rr                        .word nt_asm_iny
004039r 3  rr rr rr rr  		.word xt_asm_inx, z_asm_inx
00403Dr 3  69 6E 78     		.byte "inx"
004040r 3               
004040r 3               nt_asm_iny:
004040r 3  03 04        		.byte 3, IM
004042r 3  rr rr                        .word nt_asm_jmp
004044r 3  rr rr rr rr  		.word xt_asm_iny, z_asm_iny
004048r 3  69 6E 79     		.byte "iny"
00404Br 3               
00404Br 3               nt_asm_jmp:
00404Br 3  03 04        		.byte 3, IM
00404Dr 3  rr rr                        .word nt_asm_jmp_i
00404Fr 3  rr rr rr rr  		.word xt_asm_jmp, z_asm_jmp
004053r 3  6A 6D 70     		.byte "jmp"
004056r 3               
004056r 3               nt_asm_jmp_i:
004056r 3  05 04        		.byte 5, IM
004058r 3  rr rr                        .word nt_asm_jmp_xi
00405Ar 3  rr rr rr rr  		.word xt_asm_jmp_i, z_asm_jmp_i
00405Er 3  6A 6D 70 2E  		.byte "jmp.i"
004062r 3  69           
004063r 3               
004063r 3               nt_asm_jmp_xi:
004063r 3  06 04        		.byte 6, IM
004065r 3  rr rr                        .word nt_asm_jsr
004067r 3  rr rr rr rr  		.word xt_asm_jmp_xi, z_asm_jmp_xi
00406Br 3  6A 6D 70 2E  		.byte "jmp.xi"
00406Fr 3  78 69        
004071r 3               
004071r 3               nt_asm_jsr:
004071r 3  03 04        		.byte 3, IM
004073r 3  rr rr                        .word nt_asm_lda
004075r 3  rr rr rr rr  		.word xt_asm_jsr, z_asm_jsr
004079r 3  6A 73 72     		.byte "jsr"
00407Cr 3               
00407Cr 3               nt_asm_lda:
00407Cr 3  03 04        		.byte 3, IM
00407Er 3  rr rr                        .word nt_asm_lda_h
004080r 3  rr rr rr rr  		.word xt_asm_lda, z_asm_lda
004084r 3  6C 64 61     		.byte "lda"
004087r 3               
004087r 3               nt_asm_lda_h:
004087r 3  05 04        		.byte 5, IM
004089r 3  rr rr                        .word nt_asm_lda_x
00408Br 3  rr rr rr rr  		.word xt_asm_lda_h, z_asm_lda_h
00408Fr 3  6C 64 61 2E  		.byte "lda.#"
004093r 3  23           
004094r 3               
004094r 3               nt_asm_lda_x:
004094r 3  05 04        		.byte 5, IM
004096r 3  rr rr                        .word nt_asm_lda_y
004098r 3  rr rr rr rr  		.word xt_asm_lda_x, z_asm_lda_x
00409Cr 3  6C 64 61 2E  		.byte "lda.x"
0040A0r 3  78           
0040A1r 3               
0040A1r 3               nt_asm_lda_y:
0040A1r 3  05 04        		.byte 5, IM
0040A3r 3  rr rr                        .word nt_asm_lda_z
0040A5r 3  rr rr rr rr  		.word xt_asm_lda_y, z_asm_lda_y
0040A9r 3  6C 64 61 2E  		.byte "lda.y"
0040ADr 3  79           
0040AEr 3               
0040AEr 3               nt_asm_lda_z:
0040AEr 3  05 04        		.byte 5, IM
0040B0r 3  rr rr                        .word nt_asm_lda_zi
0040B2r 3  rr rr rr rr  		.word xt_asm_lda_z, z_asm_lda_z
0040B6r 3  6C 64 61 2E  		.byte "lda.z"
0040BAr 3  7A           
0040BBr 3               
0040BBr 3               nt_asm_lda_zi:
0040BBr 3  06 04        		.byte 6, IM
0040BDr 3  rr rr                        .word nt_asm_lda_ziy
0040BFr 3  rr rr rr rr  		.word xt_asm_lda_zi, z_asm_lda_zi
0040C3r 3  6C 64 61 2E  		.byte "lda.zi"
0040C7r 3  7A 69        
0040C9r 3               
0040C9r 3               nt_asm_lda_ziy:
0040C9r 3  07 04        		.byte 7, IM
0040CBr 3  rr rr                        .word nt_asm_lda_zx
0040CDr 3  rr rr rr rr  		.word xt_asm_lda_ziy, z_asm_lda_ziy
0040D1r 3  6C 64 61 2E  		.byte "lda.ziy"
0040D5r 3  7A 69 79     
0040D8r 3               
0040D8r 3               nt_asm_lda_zx:
0040D8r 3  06 04        		.byte 6, IM
0040DAr 3  rr rr                        .word nt_asm_lda_zxi
0040DCr 3  rr rr rr rr  		.word xt_asm_lda_zx, z_asm_lda_zx
0040E0r 3  6C 64 61 2E  		.byte "lda.zx"
0040E4r 3  7A 78        
0040E6r 3               
0040E6r 3               nt_asm_lda_zxi:
0040E6r 3  07 04        		.byte 7, IM
0040E8r 3  rr rr                        .word nt_asm_ldx
0040EAr 3  rr rr rr rr  		.word xt_asm_lda_zxi, z_asm_lda_zxi
0040EEr 3  6C 64 61 2E  		.byte "lda.zxi"
0040F2r 3  7A 78 69     
0040F5r 3               
0040F5r 3               nt_asm_ldx:
0040F5r 3  03 04        		.byte 3, IM
0040F7r 3  rr rr                        .word nt_asm_ldx_h
0040F9r 3  rr rr rr rr  		.word xt_asm_ldx, z_asm_ldx
0040FDr 3  6C 64 78     		.byte "ldx"
004100r 3               
004100r 3               nt_asm_ldx_h:
004100r 3  05 04        		.byte 5, IM
004102r 3  rr rr                        .word nt_asm_ldx_y
004104r 3  rr rr rr rr  		.word xt_asm_ldx_h, z_asm_ldx_h
004108r 3  6C 64 78 2E  		.byte "ldx.#"
00410Cr 3  23           
00410Dr 3               
00410Dr 3               nt_asm_ldx_y:
00410Dr 3  05 04        		.byte 5, IM
00410Fr 3  rr rr                        .word nt_asm_ldx_z
004111r 3  rr rr rr rr  		.word xt_asm_ldx_y, z_asm_ldx_y
004115r 3  6C 64 78 2E  		.byte "ldx.y"
004119r 3  79           
00411Ar 3               
00411Ar 3               nt_asm_ldx_z:
00411Ar 3  05 04        		.byte 5, IM
00411Cr 3  rr rr                        .word nt_asm_ldx_zy
00411Er 3  rr rr rr rr  		.word xt_asm_ldx_z, z_asm_ldx_z
004122r 3  6C 64 78 2E  		.byte "ldx.z"
004126r 3  7A           
004127r 3               
004127r 3               nt_asm_ldx_zy:
004127r 3  06 04        		.byte 6, IM
004129r 3  rr rr                        .word nt_asm_ldy
00412Br 3  rr rr rr rr  		.word xt_asm_ldx_zy, z_asm_ldx_zy
00412Fr 3  6C 64 78 2E  		.byte "ldx.zy"
004133r 3  7A 79        
004135r 3               
004135r 3               nt_asm_ldy:
004135r 3  03 04        		.byte 3, IM
004137r 3  rr rr                        .word nt_asm_ldy_h
004139r 3  rr rr rr rr  		.word xt_asm_ldy, z_asm_ldy
00413Dr 3  6C 64 79     		.byte "ldy"
004140r 3               
004140r 3               nt_asm_ldy_h:
004140r 3  05 04        		.byte 5, IM
004142r 3  rr rr                        .word nt_asm_ldy_x
004144r 3  rr rr rr rr  		.word xt_asm_ldy_h, z_asm_ldy_h
004148r 3  6C 64 79 2E  		.byte "ldy.#"
00414Cr 3  23           
00414Dr 3               
00414Dr 3               nt_asm_ldy_x:
00414Dr 3  05 04        		.byte 5, IM
00414Fr 3  rr rr                        .word nt_asm_ldy_z
004151r 3  rr rr rr rr  		.word xt_asm_ldy_x, z_asm_ldy_x
004155r 3  6C 64 79 2E  		.byte "ldy.x"
004159r 3  78           
00415Ar 3               
00415Ar 3               nt_asm_ldy_z:
00415Ar 3  05 04        		.byte 5, IM
00415Cr 3  rr rr                        .word nt_asm_ldy_zx
00415Er 3  rr rr rr rr  		.word xt_asm_ldy_z, z_asm_ldy_z
004162r 3  6C 64 79 2E  		.byte "ldy.z"
004166r 3  7A           
004167r 3               
004167r 3               nt_asm_ldy_zx:
004167r 3  06 04        		.byte 6, IM
004169r 3  rr rr                        .word nt_asm_lsr
00416Br 3  rr rr rr rr  		.word xt_asm_ldy_zx, z_asm_ldy_zx
00416Fr 3  6C 64 79 2E  		.byte "ldy.zx"
004173r 3  7A 78        
004175r 3               
004175r 3               nt_asm_lsr:
004175r 3  03 04        		.byte 3, IM
004177r 3  rr rr                        .word nt_asm_lsr_a
004179r 3  rr rr rr rr  		.word xt_asm_lsr, z_asm_lsr
00417Dr 3  6C 73 72     		.byte "lsr"
004180r 3               
004180r 3               nt_asm_lsr_a:
004180r 3  05 04        		.byte 5, IM
004182r 3  rr rr                        .word nt_asm_lsr_x
004184r 3  rr rr rr rr  		.word xt_asm_lsr_a, z_asm_lsr_a
004188r 3  6C 73 72 2E  		.byte "lsr.a"
00418Cr 3  61           
00418Dr 3               
00418Dr 3               nt_asm_lsr_x:
00418Dr 3  05 04        		.byte 5, IM
00418Fr 3  rr rr                        .word nt_asm_lsr_z
004191r 3  rr rr rr rr  		.word xt_asm_lsr_x, z_asm_lsr_x
004195r 3  6C 73 72 2E  		.byte "lsr.x"
004199r 3  78           
00419Ar 3               
00419Ar 3               nt_asm_lsr_z:
00419Ar 3  05 04        		.byte 5, IM
00419Cr 3  rr rr                        .word nt_asm_lsr_zx
00419Er 3  rr rr rr rr  		.word xt_asm_lsr_z, z_asm_lsr_z
0041A2r 3  6C 73 72 2E  		.byte "lsr.z"
0041A6r 3  7A           
0041A7r 3               
0041A7r 3               nt_asm_lsr_zx:
0041A7r 3  06 04        		.byte 6, IM
0041A9r 3  rr rr                        .word nt_asm_nop
0041ABr 3  rr rr rr rr  		.word xt_asm_lsr_zx, z_asm_lsr_zx
0041AFr 3  6C 73 72 2E  		.byte "lsr.zx"
0041B3r 3  7A 78        
0041B5r 3               
0041B5r 3               nt_asm_nop:
0041B5r 3  03 04        		.byte 3, IM
0041B7r 3  rr rr                        .word nt_asm_ora
0041B9r 3  rr rr rr rr  		.word xt_asm_nop, z_asm_nop
0041BDr 3  6E 6F 70     		.byte "nop"
0041C0r 3               
0041C0r 3               nt_asm_ora:
0041C0r 3  03 04        		.byte 3, IM
0041C2r 3  rr rr                        .word nt_asm_ora_h
0041C4r 3  rr rr rr rr  		.word xt_asm_ora, z_asm_ora
0041C8r 3  6F 72 61     		.byte "ora"
0041CBr 3               
0041CBr 3               nt_asm_ora_h:
0041CBr 3  05 04        		.byte 5, IM
0041CDr 3  rr rr                        .word nt_asm_ora_x
0041CFr 3  rr rr rr rr  		.word xt_asm_ora_h, z_asm_ora_h
0041D3r 3  6F 72 61 2E  		.byte "ora.#"
0041D7r 3  23           
0041D8r 3               
0041D8r 3               nt_asm_ora_x:
0041D8r 3  05 04        		.byte 5, IM
0041DAr 3  rr rr                        .word nt_asm_ora_y
0041DCr 3  rr rr rr rr  		.word xt_asm_ora_x, z_asm_ora_x
0041E0r 3  6F 72 61 2E  		.byte "ora.x"
0041E4r 3  78           
0041E5r 3               
0041E5r 3               nt_asm_ora_y:
0041E5r 3  05 04        		.byte 5, IM
0041E7r 3  rr rr                        .word nt_asm_ora_z
0041E9r 3  rr rr rr rr  		.word xt_asm_ora_y, z_asm_ora_y
0041EDr 3  6F 72 61 2E  		.byte "ora.y"
0041F1r 3  79           
0041F2r 3               
0041F2r 3               nt_asm_ora_z:
0041F2r 3  05 04        		.byte 5, IM
0041F4r 3  rr rr                        .word nt_asm_ora_zi
0041F6r 3  rr rr rr rr  		.word xt_asm_ora_z, z_asm_ora_z
0041FAr 3  6F 72 61 2E  		.byte "ora.z"
0041FEr 3  7A           
0041FFr 3               
0041FFr 3               nt_asm_ora_zi:
0041FFr 3  06 04        		.byte 6, IM
004201r 3  rr rr                        .word nt_asm_ora_ziy
004203r 3  rr rr rr rr  		.word xt_asm_ora_zi, z_asm_ora_zi
004207r 3  6F 72 61 2E  		.byte "ora.zi"
00420Br 3  7A 69        
00420Dr 3               
00420Dr 3               nt_asm_ora_ziy:
00420Dr 3  07 04        		.byte 7, IM
00420Fr 3  rr rr                        .word nt_asm_ora_zx
004211r 3  rr rr rr rr  		.word xt_asm_ora_ziy, z_asm_ora_ziy
004215r 3  6F 72 61 2E  		.byte "ora.ziy"
004219r 3  7A 69 79     
00421Cr 3               
00421Cr 3               nt_asm_ora_zx:
00421Cr 3  06 04        		.byte 6, IM
00421Er 3  rr rr                        .word nt_asm_ora_zxi
004220r 3  rr rr rr rr  		.word xt_asm_ora_zx, z_asm_ora_zx
004224r 3  6F 72 61 2E  		.byte "ora.zx"
004228r 3  7A 78        
00422Ar 3               
00422Ar 3               nt_asm_ora_zxi:
00422Ar 3  07 04        		.byte 7, IM
00422Cr 3  rr rr                        .word nt_asm_pha
00422Er 3  rr rr rr rr  		.word xt_asm_ora_zxi, z_asm_ora_zxi
004232r 3  6F 72 61 2E  		.byte "ora.zxi"
004236r 3  7A 78 69     
004239r 3               
004239r 3               nt_asm_pha:
004239r 3  03 04        		.byte 3, IM
00423Br 3  rr rr                        .word nt_asm_php
00423Dr 3  rr rr rr rr  		.word xt_asm_pha, z_asm_pha
004241r 3  70 68 61     		.byte "pha"
004244r 3               
004244r 3               nt_asm_php:
004244r 3  03 04        		.byte 3, IM
004246r 3  rr rr                        .word nt_asm_phx
004248r 3  rr rr rr rr  		.word xt_asm_php, z_asm_php
00424Cr 3  70 68 70     		.byte "php"
00424Fr 3               
00424Fr 3               nt_asm_phx:
00424Fr 3  03 04        		.byte 3, IM
004251r 3  rr rr                        .word nt_asm_phy
004253r 3  rr rr rr rr  		.word xt_asm_phx, z_asm_phx
004257r 3  70 68 78     		.byte "phx"
00425Ar 3               
00425Ar 3               nt_asm_phy:
00425Ar 3  03 04        		.byte 3, IM
00425Cr 3  rr rr                        .word nt_asm_pla
00425Er 3  rr rr rr rr  		.word xt_asm_phy, z_asm_phy
004262r 3  70 68 79     		.byte "phy"
004265r 3               
004265r 3               nt_asm_pla:
004265r 3  03 04        		.byte 3, IM
004267r 3  rr rr                        .word nt_asm_plp
004269r 3  rr rr rr rr  		.word xt_asm_pla, z_asm_pla
00426Dr 3  70 6C 61     		.byte "pla"
004270r 3               
004270r 3               nt_asm_plp:
004270r 3  03 04        		.byte 3, IM
004272r 3  rr rr                        .word nt_asm_plx
004274r 3  rr rr rr rr  		.word xt_asm_plp, z_asm_plp
004278r 3  70 6C 70     		.byte "plp"
00427Br 3               
00427Br 3               nt_asm_plx:
00427Br 3  03 04        		.byte 3, IM
00427Dr 3  rr rr                        .word nt_asm_ply
00427Fr 3  rr rr rr rr  		.word xt_asm_plx, z_asm_plx
004283r 3  70 6C 78     		.byte "plx"
004286r 3               
004286r 3               nt_asm_ply:
004286r 3  03 04        		.byte 3, IM
004288r 3  rr rr                        .word nt_asm_rol
00428Ar 3  rr rr rr rr  		.word xt_asm_ply, z_asm_ply
00428Er 3  70 6C 79     		.byte "ply"
004291r 3               
004291r 3               nt_asm_rol:
004291r 3  03 04        		.byte 3, IM
004293r 3  rr rr                        .word nt_asm_rol_a
004295r 3  rr rr rr rr  		.word xt_asm_rol, z_asm_rol
004299r 3  72 6F 6C     		.byte "rol"
00429Cr 3               
00429Cr 3               nt_asm_rol_a:
00429Cr 3  05 04        		.byte 5, IM
00429Er 3  rr rr                        .word nt_asm_rol_x
0042A0r 3  rr rr rr rr  		.word xt_asm_rol_a, z_asm_rol_a
0042A4r 3  72 6F 6C 2E  		.byte "rol.a"
0042A8r 3  61           
0042A9r 3               
0042A9r 3               nt_asm_rol_x:
0042A9r 3  05 04        		.byte 5, IM
0042ABr 3  rr rr                        .word nt_asm_rol_z
0042ADr 3  rr rr rr rr  		.word xt_asm_rol_x, z_asm_rol_x
0042B1r 3  72 6F 6C 2E  		.byte "rol.x"
0042B5r 3  78           
0042B6r 3               
0042B6r 3               nt_asm_rol_z:
0042B6r 3  05 04        		.byte 5, IM
0042B8r 3  rr rr                        .word nt_asm_rol_zx
0042BAr 3  rr rr rr rr  		.word xt_asm_rol_z, z_asm_rol_z
0042BEr 3  72 6F 6C 2E  		.byte "rol.z"
0042C2r 3  7A           
0042C3r 3               
0042C3r 3               nt_asm_rol_zx:
0042C3r 3  06 04        		.byte 6, IM
0042C5r 3  rr rr                        .word nt_asm_ror
0042C7r 3  rr rr rr rr  		.word xt_asm_rol_zx, z_asm_rol_zx
0042CBr 3  72 6F 6C 2E  		.byte "rol.zx"
0042CFr 3  7A 78        
0042D1r 3               
0042D1r 3               nt_asm_ror:
0042D1r 3  03 04        		.byte 3, IM
0042D3r 3  rr rr                        .word nt_asm_ror_a
0042D5r 3  rr rr rr rr  		.word xt_asm_ror, z_asm_ror
0042D9r 3  72 6F 72     		.byte "ror"
0042DCr 3               
0042DCr 3               nt_asm_ror_a:
0042DCr 3  05 04        		.byte 5, IM
0042DEr 3  rr rr                        .word nt_asm_ror_x
0042E0r 3  rr rr rr rr  		.word xt_asm_ror_a, z_asm_ror_a
0042E4r 3  72 6F 72 2E  		.byte "ror.a"
0042E8r 3  61           
0042E9r 3               
0042E9r 3               nt_asm_ror_x:
0042E9r 3  05 04        		.byte 5, IM
0042EBr 3  rr rr                        .word nt_asm_ror_z
0042EDr 3  rr rr rr rr  		.word xt_asm_ror_x, z_asm_ror_x
0042F1r 3  72 6F 72 2E  		.byte "ror.x"
0042F5r 3  78           
0042F6r 3               
0042F6r 3               nt_asm_ror_z:
0042F6r 3  05 04        		.byte 5, IM
0042F8r 3  rr rr                        .word nt_asm_ror_zx
0042FAr 3  rr rr rr rr  		.word xt_asm_ror_z, z_asm_ror_z
0042FEr 3  72 6F 72 2E  		.byte "ror.z"
004302r 3  7A           
004303r 3               
004303r 3               nt_asm_ror_zx:
004303r 3  06 04        		.byte 6, IM
004305r 3  rr rr                        .word nt_asm_rti
004307r 3  rr rr rr rr  		.word xt_asm_ror_zx, z_asm_ror_zx
00430Br 3  72 6F 72 2E  		.byte "ror.zx"
00430Fr 3  7A 78        
004311r 3               
004311r 3               nt_asm_rti:
004311r 3  03 04        		.byte 3, IM
004313r 3  rr rr                        .word nt_asm_rts
004315r 3  rr rr rr rr  		.word xt_asm_rti, z_asm_rti
004319r 3  72 74 69     		.byte "rti"
00431Cr 3               
00431Cr 3               nt_asm_rts:
00431Cr 3  03 04        		.byte 3, IM
00431Er 3  rr rr                        .word nt_asm_sbc
004320r 3  rr rr rr rr  		.word xt_asm_rts, z_asm_rts
004324r 3  72 74 73     		.byte "rts"
004327r 3               
004327r 3               nt_asm_sbc:
004327r 3  03 04        		.byte 3, IM
004329r 3  rr rr                        .word nt_asm_sbc_h
00432Br 3  rr rr rr rr  		.word xt_asm_sbc, z_asm_sbc
00432Fr 3  73 62 63     		.byte "sbc"
004332r 3               
004332r 3               nt_asm_sbc_h:
004332r 3  05 04        		.byte 5, IM
004334r 3  rr rr                        .word nt_asm_sbc_x
004336r 3  rr rr rr rr  		.word xt_asm_sbc_h, z_asm_sbc_h
00433Ar 3  73 62 63 2E  		.byte "sbc.#"
00433Er 3  23           
00433Fr 3               
00433Fr 3               nt_asm_sbc_x:
00433Fr 3  05 04        		.byte 5, IM
004341r 3  rr rr                        .word nt_asm_sbc_y
004343r 3  rr rr rr rr  		.word xt_asm_sbc_x, z_asm_sbc_x
004347r 3  73 62 63 2E  		.byte "sbc.x"
00434Br 3  78           
00434Cr 3               
00434Cr 3               nt_asm_sbc_y:
00434Cr 3  05 04        		.byte 5, IM
00434Er 3  rr rr                        .word nt_asm_sbc_z
004350r 3  rr rr rr rr  		.word xt_asm_sbc_y, z_asm_sbc_y
004354r 3  73 62 63 2E  		.byte "sbc.y"
004358r 3  79           
004359r 3               
004359r 3               nt_asm_sbc_z:
004359r 3  05 04        		.byte 5, IM
00435Br 3  rr rr                        .word nt_asm_sbc_zi
00435Dr 3  rr rr rr rr  		.word xt_asm_sbc_z, z_asm_sbc_z
004361r 3  73 62 63 2E  		.byte "sbc.z"
004365r 3  7A           
004366r 3               
004366r 3               nt_asm_sbc_zi:
004366r 3  06 04        		.byte 6, IM
004368r 3  rr rr                        .word nt_asm_sbc_ziy
00436Ar 3  rr rr rr rr  		.word xt_asm_sbc_zi, z_asm_sbc_zi
00436Er 3  73 62 63 2E  		.byte "sbc.zi"
004372r 3  7A 69        
004374r 3               
004374r 3               nt_asm_sbc_ziy:
004374r 3  07 04        		.byte 7, IM
004376r 3  rr rr                        .word nt_asm_sbc_zx
004378r 3  rr rr rr rr  		.word xt_asm_sbc_ziy, z_asm_sbc_ziy
00437Cr 3  73 62 63 2E  		.byte "sbc.ziy"
004380r 3  7A 69 79     
004383r 3               
004383r 3               nt_asm_sbc_zx:
004383r 3  06 04        		.byte 6, IM
004385r 3  rr rr                        .word nt_asm_sbc_zxi
004387r 3  rr rr rr rr  		.word xt_asm_sbc_zx, z_asm_sbc_zx
00438Br 3  73 62 63 2E  		.byte "sbc.zx"
00438Fr 3  7A 78        
004391r 3               
004391r 3               nt_asm_sbc_zxi:
004391r 3  07 04        		.byte 7, IM
004393r 3  rr rr                        .word nt_asm_sec
004395r 3  rr rr rr rr  		.word xt_asm_sbc_zxi, z_asm_sbc_zxi
004399r 3  73 62 63 2E  		.byte "sbc.zxi"
00439Dr 3  7A 78 69     
0043A0r 3               
0043A0r 3               nt_asm_sec:
0043A0r 3  03 04        		.byte 3, IM
0043A2r 3  rr rr                        .word nt_asm_sed
0043A4r 3  rr rr rr rr  		.word xt_asm_sec, z_asm_sec
0043A8r 3  73 65 63     		.byte "sec"
0043ABr 3               
0043ABr 3               nt_asm_sed:
0043ABr 3  03 04        		.byte 3, IM
0043ADr 3  rr rr                        .word nt_asm_sei
0043AFr 3  rr rr rr rr  		.word xt_asm_sed, z_asm_sed
0043B3r 3  73 65 64     		.byte "sed"
0043B6r 3               
0043B6r 3               nt_asm_sei:
0043B6r 3  03 04        		.byte 3, IM
0043B8r 3  rr rr                        .word nt_asm_sta
0043BAr 3  rr rr rr rr  		.word xt_asm_sei, z_asm_sei
0043BEr 3  73 65 69     		.byte "sei"
0043C1r 3               
0043C1r 3               nt_asm_sta:
0043C1r 3  03 04        		.byte 3, IM
0043C3r 3  rr rr                        .word nt_asm_sta_x
0043C5r 3  rr rr rr rr  		.word xt_asm_sta, z_asm_sta
0043C9r 3  73 74 61     		.byte "sta"
0043CCr 3               
0043CCr 3               nt_asm_sta_x:
0043CCr 3  05 04        		.byte 5, IM
0043CEr 3  rr rr                        .word nt_asm_sta_y
0043D0r 3  rr rr rr rr  		.word xt_asm_sta_x, z_asm_sta_x
0043D4r 3  73 74 61 2E  		.byte "sta.x"
0043D8r 3  78           
0043D9r 3               
0043D9r 3               nt_asm_sta_y:
0043D9r 3  05 04        		.byte 5, IM
0043DBr 3  rr rr                        .word nt_asm_sta_z
0043DDr 3  rr rr rr rr  		.word xt_asm_sta_y, z_asm_sta_y
0043E1r 3  73 74 61 2E  		.byte "sta.y"
0043E5r 3  79           
0043E6r 3               
0043E6r 3               nt_asm_sta_z:
0043E6r 3  05 04        		.byte 5, IM
0043E8r 3  rr rr                        .word nt_asm_sta_zi
0043EAr 3  rr rr rr rr  		.word xt_asm_sta_z, z_asm_sta_z
0043EEr 3  73 74 61 2E  		.byte "sta.z"
0043F2r 3  7A           
0043F3r 3               
0043F3r 3               nt_asm_sta_zi:
0043F3r 3  06 04        		.byte 6, IM
0043F5r 3  rr rr                        .word nt_asm_sta_ziy
0043F7r 3  rr rr rr rr  		.word xt_asm_sta_zi, z_asm_sta_zi
0043FBr 3  73 74 61 2E  		.byte "sta.zi"
0043FFr 3  7A 69        
004401r 3               
004401r 3               nt_asm_sta_ziy:
004401r 3  07 04        		.byte 7, IM
004403r 3  rr rr                        .word nt_asm_sta_zx
004405r 3  rr rr rr rr  		.word xt_asm_sta_ziy, z_asm_sta_ziy
004409r 3  73 74 61 2E  		.byte "sta.ziy"
00440Dr 3  7A 69 79     
004410r 3               
004410r 3               nt_asm_sta_zx:
004410r 3  06 04        		.byte 6, IM
004412r 3  rr rr                        .word nt_asm_sta_zxi
004414r 3  rr rr rr rr  		.word xt_asm_sta_zx, z_asm_sta_zx
004418r 3  73 74 61 2E  		.byte "sta.zx"
00441Cr 3  7A 78        
00441Er 3               
00441Er 3               nt_asm_sta_zxi:
00441Er 3  07 04        		.byte 7, IM
004420r 3  rr rr                        .word nt_asm_stx
004422r 3  rr rr rr rr  		.word xt_asm_sta_zxi, z_asm_sta_zxi
004426r 3  73 74 61 2E  		.byte "sta.zxi"
00442Ar 3  7A 78 69     
00442Dr 3               
00442Dr 3               nt_asm_stx:
00442Dr 3  03 04        		.byte 3, IM
00442Fr 3  rr rr                        .word nt_asm_stx_z
004431r 3  rr rr rr rr  		.word xt_asm_stx, z_asm_stx
004435r 3  73 74 78     		.byte "stx"
004438r 3               
004438r 3               nt_asm_stx_z:
004438r 3  05 04        		.byte 5, IM
00443Ar 3  rr rr                        .word nt_asm_stx_zy
00443Cr 3  rr rr rr rr  		.word xt_asm_stx_z, z_asm_stx_z
004440r 3  73 74 78 2E  		.byte "stx.z"
004444r 3  7A           
004445r 3               
004445r 3               nt_asm_stx_zy:
004445r 3  06 04        		.byte 6, IM
004447r 3  rr rr                        .word nt_asm_sty
004449r 3  rr rr rr rr  		.word xt_asm_stx_zy, z_asm_stx_zy
00444Dr 3  73 74 78 2E  		.byte "stx.zy"
004451r 3  7A 79        
004453r 3               
004453r 3               nt_asm_sty:
004453r 3  03 04        		.byte 3, IM
004455r 3  rr rr                        .word nt_asm_sty_z
004457r 3  rr rr rr rr  		.word xt_asm_sty, z_asm_sty
00445Br 3  73 74 79     		.byte "sty"
00445Er 3               
00445Er 3               nt_asm_sty_z:
00445Er 3  05 04        		.byte 5, IM
004460r 3  rr rr                        .word nt_asm_sty_zx
004462r 3  rr rr rr rr  		.word xt_asm_sty_z, z_asm_sty_z
004466r 3  73 74 79 2E  		.byte "sty.z"
00446Ar 3  7A           
00446Br 3               
00446Br 3               nt_asm_sty_zx:
00446Br 3  06 04        		.byte 6, IM
00446Dr 3  rr rr                        .word nt_asm_stz
00446Fr 3  rr rr rr rr  		.word xt_asm_sty_zx, z_asm_sty_zx
004473r 3  73 74 79 2E  		.byte "sty.zx"
004477r 3  7A 78        
004479r 3               
004479r 3               nt_asm_stz:
004479r 3  03 04        		.byte 3, IM
00447Br 3  rr rr                        .word nt_asm_stz_x
00447Dr 3  rr rr rr rr  		.word xt_asm_stz, z_asm_stz
004481r 3  73 74 7A     		.byte "stz"
004484r 3               
004484r 3               nt_asm_stz_x:
004484r 3  05 04        		.byte 5, IM
004486r 3  rr rr                        .word nt_asm_stz_z
004488r 3  rr rr rr rr  		.word xt_asm_stz_x, z_asm_stz_x
00448Cr 3  73 74 7A 2E  		.byte "stz.x"
004490r 3  78           
004491r 3               
004491r 3               nt_asm_stz_z:
004491r 3  05 04        		.byte 5, IM
004493r 3  rr rr                        .word nt_asm_stz_zx
004495r 3  rr rr rr rr  		.word xt_asm_stz_z, z_asm_stz_z
004499r 3  73 74 7A 2E  		.byte "stz.z"
00449Dr 3  7A           
00449Er 3               
00449Er 3               nt_asm_stz_zx:
00449Er 3  06 04        		.byte 6, IM
0044A0r 3  rr rr                        .word nt_asm_tax
0044A2r 3  rr rr rr rr  		.word xt_asm_stz_zx, z_asm_stz_zx
0044A6r 3  73 74 7A 2E  		.byte "stz.zx"
0044AAr 3  7A 78        
0044ACr 3               
0044ACr 3               nt_asm_tax:
0044ACr 3  03 04        		.byte 3, IM
0044AEr 3  rr rr                        .word nt_asm_tay
0044B0r 3  rr rr rr rr  		.word xt_asm_tax, z_asm_tax
0044B4r 3  74 61 78     		.byte "tax"
0044B7r 3               
0044B7r 3               nt_asm_tay:
0044B7r 3  03 04        		.byte 3, IM
0044B9r 3  rr rr                        .word nt_asm_trb
0044BBr 3  rr rr rr rr  		.word xt_asm_tay, z_asm_tay
0044BFr 3  74 61 79     		.byte "tay"
0044C2r 3               
0044C2r 3               nt_asm_trb:
0044C2r 3  03 04        		.byte 3, IM
0044C4r 3  rr rr                        .word nt_asm_trb_z
0044C6r 3  rr rr rr rr  		.word xt_asm_trb, z_asm_trb
0044CAr 3  74 72 62     		.byte "trb"
0044CDr 3               
0044CDr 3               nt_asm_trb_z:
0044CDr 3  05 04        		.byte 5, IM
0044CFr 3  rr rr                        .word nt_asm_tsb
0044D1r 3  rr rr rr rr  		.word xt_asm_trb_z, z_asm_trb_z
0044D5r 3  74 72 62 2E  		.byte "trb.z"
0044D9r 3  7A           
0044DAr 3               
0044DAr 3               nt_asm_tsb:
0044DAr 3  03 04        		.byte 3, IM
0044DCr 3  rr rr                        .word nt_asm_tsb_z
0044DEr 3  rr rr rr rr  		.word xt_asm_tsb, z_asm_tsb
0044E2r 3  74 73 62     		.byte "tsb"
0044E5r 3               
0044E5r 3               nt_asm_tsb_z:
0044E5r 3  05 04        		.byte 5, IM
0044E7r 3  rr rr                        .word nt_asm_tsx
0044E9r 3  rr rr rr rr  		.word xt_asm_tsb_z, z_asm_tsb_z
0044EDr 3  74 73 62 2E  		.byte "tsb.z"
0044F1r 3  7A           
0044F2r 3               
0044F2r 3               nt_asm_tsx:
0044F2r 3  03 04        		.byte 3, IM
0044F4r 3  rr rr                        .word nt_asm_txa
0044F6r 3  rr rr rr rr  		.word xt_asm_tsx, z_asm_tsx
0044FAr 3  74 73 78     		.byte "tsx"
0044FDr 3               
0044FDr 3               nt_asm_txa:
0044FDr 3  03 04        		.byte 3, IM
0044FFr 3  rr rr                        .word nt_asm_txs
004501r 3  rr rr rr rr  		.word xt_asm_txa, z_asm_txa
004505r 3  74 78 61     		.byte "txa"
004508r 3               
004508r 3               nt_asm_txs:
004508r 3  03 04        		.byte 3, IM
00450Ar 3  rr rr                        .word nt_asm_tya
00450Cr 3  rr rr rr rr  		.word xt_asm_txs, z_asm_txs
004510r 3  74 78 73     		.byte "txs"
004513r 3               
004513r 3               nt_asm_tya:
004513r 3  03 04        		.byte 3, IM
004515r 3  rr rr                        .word nt_asm_arrow
004517r 3  rr rr rr rr  		.word xt_asm_tya, z_asm_tya
00451Br 3  74 79 61     		.byte "tya"
00451Er 3               
00451Er 3               ; Assembler pseudo-instructions, directives and macros
00451Er 3               
00451Er 3               nt_asm_arrow:   ; uses same code as HERE, but immediate
00451Er 3  03 04                        .byte 3, IM
004520r 3  rr rr                        .word nt_asm_back_jump
004522r 3  rr rr rr rr                  .word xt_asm_arrow, z_asm_arrow
004526r 3  2D 2D 3E                     .byte "-->"
004529r 3               
004529r 3               
004529r 3               nt_asm_back_jump:  ; syntactic sugar, does nothing
004529r 3  02 04                        .byte 2, IM
00452Br 3  rr rr                        .word nt_asm_back_branch
00452Dr 3  rr rr rr rr                  .word xt_asm_back_jump, z_asm_back_jump
004531r 3  3C 6A                        .byte "<j"
004533r 3               
004533r 3               nt_asm_back_branch:
004533r 3  02 04                        .byte 2, IM
004535r 3  rr rr                        .word nt_asm_push_a
004537r 3  rr rr rr rr                  .word xt_asm_back_branch, z_asm_back_branch
00453Br 3  3C 62                        .byte "<b"
00453Dr 3               
00453Dr 3               nt_asm_push_a:
00453Dr 3  06 04                        .byte 6, IM
00453Fr 3  00 00                        .word 0000
004541r 3  rr rr rr rr                  .word xt_asm_push_a, z_asm_push_a
004545r 3  70 75 73 68                  .byte "push-a"
004549r 3  2D 61        
00454Br 3               
00454Br 3               .endif
00454Br 3               
00454Br 3               ; END of ASSEMBLER-WORDLIST
00454Br 3               
00454Br 3               ; END
00454Br 3               
00454Br 2                   .include "strings.s"          ; Headers of native words
00454Br 3               ; List of Strings for Tali Forth 2
00454Br 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00454Br 3               ; First version: 01. Apr 2016 (for Liara Forth)
00454Br 3               ; This version: 28. Dec 2018
00454Br 3               
00454Br 3               ; This file is included by taliforth.asm
00454Br 3               
00454Br 3               ; ## GENERAL STRINGS
00454Br 3               
00454Br 3               ; All general strings must be zero-terminated, names start with "s_",
00454Br 3               ; aliases with "str_"
00454Br 3               
00454Br 3               str_ok =              0
00454Br 3               str_compile =         1
00454Br 3               str_redefined =       2
00454Br 3               str_wid_forth =       3
00454Br 3               str_abc_lower =       4
00454Br 3               str_abc_upper =       5
00454Br 3               str_wid_editor =      6
00454Br 3               str_wid_assembler =   7
00454Br 3               str_wid_root =        8
00454Br 3               str_see_flags =       9
00454Br 3               str_see_nt =         10
00454Br 3               str_see_xt =         11
00454Br 3               str_see_size =       12
00454Br 3               str_disasm_lit     = 13
00454Br 3               str_disasm_sdc     = 14
00454Br 3               str_disasm_bra     = 15
00454Br 3               
00454Br 3               ; Since we can't fit a 16-bit address in a register, we use indexes as offsets
00454Br 3               ; to tables as error and string numbers.
00454Br 3               string_table:
00454Br 3  rr rr rr rr          .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
00454Fr 3  rr rr rr rr  
004553r 3  rr rr        
004555r 3  rr rr rr rr          .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
004559r 3  rr rr rr rr  
00455Dr 3  rr rr rr rr          .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
004561r 3  rr rr rr rr  
004565r 3               
004565r 3  20 6F 6B 00  s_ok:         .byte " ok", 0         ; note space at beginning
004569r 3  20 63 6F 6D  s_compiled:   .byte " compiled", 0   ; note space at beginning
00456Dr 3  70 69 6C 65  
004571r 3  64 00        
004573r 3  72 65 64 65  s_redefined:  .byte "redefined ", 0  ; note space at end
004577r 3  66 69 6E 65  
00457Br 3  64 20 00     
00457Er 3               
00457Er 3  30 31 32 33  s_abc_lower:  .byte "0123456789abcdefghijklmnopqrstuvwxyz"
004582r 3  34 35 36 37  
004586r 3  38 39 61 62  
0045A2r 3  30 31 32 33  s_abc_upper:  .byte "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
0045A6r 3  34 35 36 37  
0045AAr 3  38 39 41 42  
0045C6r 3               
0045C6r 3  41 73 73 65  s_wid_asm:    .byte "Assembler ", 0  ; Wordlist ID 2, note space at end
0045CAr 3  6D 62 6C 65  
0045CEr 3  72 20 00     
0045D1r 3  45 64 69 74  s_wid_editor: .byte "Editor ", 0     ; Wordlist ID 1, note space at end
0045D5r 3  6F 72 20 00  
0045D9r 3  46 6F 72 74  s_wid_forth:  .byte "Forth ", 0      ; Wordlist ID 0, note space at end
0045DDr 3  68 20 00     
0045E0r 3  52 6F 6F 74  s_wid_root:   .byte "Root ", 0       ; Wordlist ID 3, note space at end
0045E4r 3  20 00        
0045E6r 3               
0045E6r 3  66 6C 61 67  s_see_flags:  .byte "flags (CO AN IM NN UF HC): ", 0
0045EAr 3  73 20 28 43  
0045EEr 3  4F 20 41 4E  
004602r 3  6E 74 3A 20  s_see_nt:     .byte "nt: ", 0
004606r 3  00           
004607r 3  78 74 3A 20  s_see_xt:     .byte "xt: ", 0
00460Br 3  00           
00460Cr 3  73 69 7A 65  s_see_size:   .byte "size (decimal): ", 0
004610r 3  20 28 64 65  
004614r 3  63 69 6D 61  
00461Dr 3  4C 49 54 45  s_disasm_lit: .byte "LITERAL ", 0
004621r 3  52 41 4C 20  
004625r 3  00           
004626r 3  53 54 41 43  s_disasm_sdc: .byte "STACK DEPTH CHECK", 0
00462Ar 3  4B 20 44 45  
00462Er 3  50 54 48 20  
004638r 3  42 52 41 4E  s_disasm_bra: .byte "BRANCH ",0
00463Cr 3  43 48 20 00  
004640r 3               
004640r 3               
004640r 3               ; ## ERROR STRINGS
004640r 3               
004640r 3               ; All error strings must be zero-terminated, all names start with "es_",
004640r 3               ; aliases with "err_". If the string texts are changed, the test suite must be
004640r 3               ; as well
004640r 3               
004640r 3               err_allot =        0
004640r 3               err_badsource =    1
004640r 3               err_compileonly =  2
004640r 3               err_defer =        3
004640r 3               err_divzero =      4
004640r 3               err_noname =       5
004640r 3               err_refill =       6
004640r 3               err_state =        7
004640r 3               err_syntax =       8
004640r 3               err_underflow =    9
004640r 3               err_negallot =     10
004640r 3               err_wordlist =     11
004640r 3               err_blockwords =   12
004640r 3               
004640r 3               error_table:
004640r 3  rr rr rr rr          .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
004644r 3  rr rr rr rr  
004648r 3  rr rr rr rr          .word es_divzero, es_noname, es_refill, es_state        ;  4-7
00464Cr 3  rr rr rr rr  
004650r 3  rr rr rr rr          .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
004654r 3  rr rr rr rr  
004658r 3  rr rr                .word es_blockwords                                    ; 12
00465Ar 3               
00465Ar 3  41 4C 4C 4F  es_allot:       .byte "ALLOT using all available memory", 0
00465Er 3  54 20 75 73  
004662r 3  69 6E 67 20  
00467Br 3  49 6C 6C 65  es_badsource:   .byte "Illegal SOURCE-ID during REFILL", 0
00467Fr 3  67 61 6C 20  
004683r 3  53 4F 55 52  
00469Br 3  49 6E 74 65  es_compileonly: .byte "Interpreting a compile-only word", 0
00469Fr 3  72 70 72 65  
0046A3r 3  74 69 6E 67  
0046BCr 3  44 45 46 45  es_defer:       .byte "DEFERed word not defined yet", 0
0046C0r 3  52 65 64 20  
0046C4r 3  77 6F 72 64  
0046D9r 3  44 69 76 69  es_divzero:     .byte "Division by zero", 0
0046DDr 3  73 69 6F 6E  
0046E1r 3  20 62 79 20  
0046EAr 3  50 61 72 73  es_noname:      .byte "Parsing failure", 0
0046EEr 3  69 6E 67 20  
0046F2r 3  66 61 69 6C  
0046FAr 3  51 55 49 54  es_refill:      .byte "QUIT could not get input (REFILL returned -1)", 0
0046FEr 3  20 63 6F 75  
004702r 3  6C 64 20 6E  
004728r 3  41 6C 72 65  es_state:       .byte "Already in compile mode", 0
00472Cr 3  61 64 79 20  
004730r 3  69 6E 20 63  
004740r 3  55 6E 64 65  es_syntax:      .byte "Undefined word", 0
004744r 3  66 69 6E 65  
004748r 3  64 20 77 6F  
00474Fr 3  53 74 61 63  es_underflow:   .byte "Stack underflow", 0
004753r 3  6B 20 75 6E  
004757r 3  64 65 72 66  
00475Fr 3  4D 61 78 20  es_negallot:    .byte "Max memory freed with ALLOT", 0
004763r 3  6D 65 6D 6F  
004767r 3  72 79 20 66  
00477Br 3  4E 6F 20 77  es_wordlist:    .byte "No wordlists available", 0
00477Fr 3  6F 72 64 6C  
004783r 3  69 73 74 73  
004792r 3  50 6C 65 61  es_blockwords:  .byte "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
004796r 3  73 65 20 61  
00479Ar 3  73 73 69 67  
0047D1r 3               
0047D1r 3               ; ## ENVIRONMENT STRINGS
0047D1r 3               
0047D1r 3               ; These are used by the ENVIRONMENT? word and stored in the old string format:
0047D1r 3               ; Length byte first, then the string itself that is not rpt. not
0047D1r 3               ; zero-terminated. Note these are uppercase by ANS defintion. All start with
0047D1r 3               ; "envs_".
0047D1r 3               
0047D1r 3               ; These return a single-cell number
0047D1r 3  0F 2F 43 4F  envs_cs:        .byte 15, "/COUNTED-STRING"
0047D5r 3  55 4E 54 45  
0047D9r 3  44 2D 53 54  
0047E1r 3  05 2F 48 4F  envs_hold:      .byte 5, "/HOLD"
0047E5r 3  4C 44        
0047E7r 3  04 2F 50 41  envs_pad:       .byte 4, "/PAD"
0047EBr 3  44           
0047ECr 3  11 41 44 44  envs_aub:       .byte 17, "ADDRESS-UNIT-BITS"
0047F0r 3  52 45 53 53  
0047F4r 3  2D 55 4E 49  
0047FEr 3  07 46 4C 4F  envs_floored:   .byte 7, "FLOORED"
004802r 3  4F 52 45 44  
004806r 3  08 4D 41 58  envs_max_char:  .byte 8, "MAX-CHAR"
00480Ar 3  2D 43 48 41  
00480Er 3  52           
00480Fr 3  05 4D 41 58  envs_max_n:     .byte 5, "MAX-N"
004813r 3  2D 4E        
004815r 3  05 4D 41 58  envs_max_u:     .byte 5, "MAX-U"
004819r 3  2D 55        
00481Br 3  12 52 45 54  envs_rsc:       .byte 18, "RETURN-STACK-CELLS"
00481Fr 3  55 52 4E 2D  
004823r 3  53 54 41 43  
00482Er 3  0B 53 54 41  envs_sc:        .byte 11, "STACK-CELLS"
004832r 3  43 4B 2D 43  
004836r 3  45 4C 4C 53  
00483Ar 3  09 57 4F 52  envs_wl:        .byte 9, "WORDLISTS"
00483Er 3  44 4C 49 53  
004842r 3  54 53        
004844r 3               
004844r 3               ; These return a double-cell number
004844r 3  05 4D 41 58  envs_max_d:     .byte 5, "MAX-D"
004848r 3  2D 44        
00484Ar 3  06 4D 41 58  envs_max_ud:    .byte 6, "MAX-UD"
00484Er 3  2D 55 44     
004851r 3               
004851r 3               ; END
004851r 3               
004851r 2               
004851r 2               ; High-level Forth words, see forth_code/README.md
004851r 2               forth_words_start:
004851r 2  20 63 72 20  .incbin "forth_code/forth_words.asc"
004855r 2  2E 28 20 52  
004859r 2  65 61 64 79  
004863r 2               forth_words_end:
004863r 2               
004863r 2               ; User-defined Forth words, see forth_code/README.md
004863r 2               user_words_start:
004863r 2  20 32 30 20  .incbin "forth_code/user_words.asc"
004867r 2  63 6F 6E 73  
00486Br 2  74 61 6E 74  
004F01r 2               user_words_end:
004F01r 2               
004F01r 2               
004F01r 2               ; =====================================================================
004F01r 2               ; COMPILE WORDS, JUMPS and SUBROUTINE JUMPS INTO CODE
004F01r 2               
004F01r 2               ; These three routines compile instructions such as "jsr xt_words" into a word
004F01r 2               ; at compile time so they are available at run time. Words that use this
004F01r 2               ; routine may not be natively compiled. We use "cmpl" as not to confuse these
004F01r 2               ; routines with the COMPILE, word. Always call this with a subroutine jump.
004F01r 2               ; This means combining JSR/RTS to JMP in those cases is not going to work. To
004F01r 2               ; use, load the LSB of the address in A and the MSB in Y. You can remember
004F01r 2               ; which comes first by thinking of the song "Young Americans" ("YA") by David
004F01r 2               ; Bowie.
004F01r 2               
004F01r 2               ;               ldy #>addr      ; MSB   ; "Young"
004F01r 2               ;               lda #<addr      ; LSB   ; "Americans"
004F01r 2               ;               jsr cmpl_subroutine
004F01r 2               
004F01r 2               ; Also, we keep a routine here to compile a single byte passed through A.
004F01r 2               
004F01r 2               cmpl_subroutine:
004F01r 2                   ; This is the entry point to compile JSR <ADDR>
004F01r 2  48               pha             ; save LSB of address
004F02r 2  A9 20            lda #$20        ; load opcode for JSR
004F04r 2  80 03            bra cmpl_common
004F06r 2               cmpl_jump:
004F06r 2                   ; This is the entry point to compile JMP <ADDR>
004F06r 2  48               pha             ; save LSB of address
004F07r 2  A9 4C            lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
004F09r 2               cmpl_common:
004F09r 2                   ; At this point, A contains the opcode to be compiled,
004F09r 2                   ; the LSB of the address is on the 65c02 stack, and the MSB of
004F09r 2                   ; the address is in Y
004F09r 2  20 rr rr         jsr cmpl_a      ; compile opcode
004F0Cr 2  68               pla             ; retrieve address LSB; fall thru to cmpl_word
004F0Dr 2               cmpl_word:
004F0Dr 2                   ; This is the entry point to compile a word (little-endian)
004F0Dr 2  20 rr rr         jsr cmpl_a      ; compile LSB of address
004F10r 2  98               tya             ; fall thru for MSB
004F11r 2               cmpl_a:
004F11r 2                   ; This is the entry point to compile a single byte which
004F11r 2                   ; is passed in A. The built-in assembler assumes that this
004F11r 2                   ; routine does not modify Y.
004F11r 2  92 rr            sta (cp)
004F13r 2  E6 rr            inc cp
004F15r 2  D0 02            bne _done
004F17r 2  E6 rr            inc cp+1
004F19r 2               _done:
004F19r 2  60               rts
004F1Ar 2               
004F1Ar 2               
004F1Ar 2               
004F1Ar 2               ; =====================================================================
004F1Ar 2               ; CODE FIELD ROUTINES
004F1Ar 2               
004F1Ar 2               doconst:
004F1Ar 2               ; """Execute a CONSTANT: Push the data in the first two bytes of
004F1Ar 2               ; the Data Field onto the Data Stack
004F1Ar 2               ; """
004F1Ar 2  CA               dex             ; make room for constant
004F1Br 2  CA               dex
004F1Cr 2               
004F1Cr 2                   ; The value we need is stored in the two bytes after the
004F1Cr 2                   ; JSR return address, which in turn is what is on top of
004F1Cr 2                   ; the Return Stack
004F1Cr 2  68               pla             ; LSB of return address
004F1Dr 2  85 rr            sta tmp1
004F1Fr 2  68               pla             ; MSB of return address
004F20r 2  85 rr            sta tmp1+1
004F22r 2               
004F22r 2                   ; Start LDY with 1 instead of 0 because of how JSR stores
004F22r 2                   ; the return address on the 65c02
004F22r 2  A0 01            ldy #1
004F24r 2  B1 rr            lda (tmp1),y
004F26r 2  95 00            sta 0,x
004F28r 2  C8               iny
004F29r 2  B1 rr            lda (tmp1),y
004F2Br 2  95 01            sta 1,x
004F2Dr 2               
004F2Dr 2                   ; This takes us back to the original caller, not the
004F2Dr 2                   ; DOCONST caller
004F2Dr 2  60               rts
004F2Er 2               
004F2Er 2               
004F2Er 2               dodefer:
004F2Er 2               ; """Execute a DEFER statement at runtime: Execute the address we
004F2Er 2               ; find after the caller in the Data Field
004F2Er 2               ; """
004F2Er 2                   ; The xt we need is stored in the two bytes after the JSR
004F2Er 2                   ; return address, which is what is on top of the Return
004F2Er 2                   ; Stack. So all we have to do is replace our return jump
004F2Er 2                   ; with what we find there
004F2Er 2  68               pla             ; LSB
004F2Fr 2  85 rr            sta tmp1
004F31r 2  68               pla             ; MSB
004F32r 2  85 rr            sta tmp1+1
004F34r 2               
004F34r 2  A0 01            ldy #1
004F36r 2  B1 rr            lda (tmp1),y
004F38r 2  85 rr            sta tmp2
004F3Ar 2  C8               iny
004F3Br 2  B1 rr            lda (tmp1),y
004F3Dr 2  85 rr            sta tmp2+1
004F3Fr 2               
004F3Fr 2  6C rr rr         jmp (tmp2)      ; This is actually a jump to the new target
004F42r 2               
004F42r 2               defer_error:
004F42r 2                   ; """Error routine for undefined DEFER: Complain and abort"""
004F42r 2  A9 03            lda #err_defer
004F44r 2  4C rr rr         jmp error
004F47r 2               
004F47r 2               dodoes:
004F47r 2               ; """Execute the runtime portion of DOES>. See DOES> and
004F47r 2               ; docs/create-does.txt for details and
004F47r 2               ; http://www.bradrodriguez.com/papers/moving3.htm
004F47r 2               ; """
004F47r 2                   ; Assumes the address of the CFA of the original defining word
004F47r 2                   ; (say, CONSTANT) is on the top of the Return Stack. Save it
004F47r 2                   ; for a later jump, adding one byte because of the way the
004F47r 2                   ; 6502 works
004F47r 2  7A               ply             ; LSB
004F48r 2  68               pla             ; MSB
004F49r 2  C8               iny
004F4Ar 2  D0 01            bne @1
004F4Cr 2  1A               inc
004F4Dr 2               @1:
004F4Dr 2  84 rr            sty tmp2
004F4Fr 2  85 rr            sta tmp2+1
004F51r 2               
004F51r 2                   ; Next on the Return Stack should be the address of the PFA of
004F51r 2                   ; the calling defined word (say, the name of whatever constant we
004F51r 2                   ; just defined). Move this to the Data Stack, again adding one.
004F51r 2  CA               dex
004F52r 2  CA               dex
004F53r 2               
004F53r 2  7A               ply
004F54r 2  68               pla
004F55r 2  C8               iny
004F56r 2  D0 01            bne @2
004F58r 2  1A               inc
004F59r 2               @2:
004F59r 2  94 00            sty 0,x         ; LSB
004F5Br 2  95 01            sta 1,x         ; MSB
004F5Dr 2               
004F5Dr 2                   ; This leaves the return address from the original main routine
004F5Dr 2                   ; on top of the Return Stack. We leave that untouched and jump
004F5Dr 2                   ; to the special code of the defining word. It's RTS instruction
004F5Dr 2                   ; will take us back to the main routine
004F5Dr 2  6C rr rr         jmp (tmp2)
004F60r 2               
004F60r 2               
004F60r 2               dovar:
004F60r 2               ; """Execute a variable: Push the address of the first bytes of
004F60r 2               ; the Data Field onto the stack. This is called with JSR so we
004F60r 2               ; can pick up the address of the calling variable off the 65c02's
004F60r 2               ; stack. The final RTS takes us to the original caller of the
004F60r 2               ; routine that itself called DOVAR. This is the default
004F60r 2               ; routine installed with CREATE.
004F60r 2               ; """
004F60r 2                   ; Pull the return address off the machine's stack, adding
004F60r 2                   ; one because of the way the 65c02 handles subroutines
004F60r 2  7A               ply             ; LSB
004F61r 2  68               pla             ; MSB
004F62r 2  C8               iny
004F63r 2  D0 01            bne @1
004F65r 2  1A               inc
004F66r 2               @1:
004F66r 2  CA               dex
004F67r 2  CA               dex
004F68r 2               
004F68r 2  95 01            sta 1,x
004F6Ar 2  98               tya
004F6Br 2  95 00            sta 0,x
004F6Dr 2               
004F6Dr 2  60               rts
004F6Er 2               
004F6Er 2               ; =====================================================================
004F6Er 2               ; LOW LEVEL HELPER FUNCTIONS
004F6Er 2               
004F6Er 2               byte_to_ascii:
004F6Er 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
004F6Er 2               .scope
004F6Er 2  48               pha
004F6Fr 2  4A               lsr             ; convert high nibble first
004F70r 2  4A               lsr
004F71r 2  4A               lsr
004F72r 2  4A               lsr
004F73r 2  20 rr rr         jsr _nibble_to_ascii
004F76r 2  68               pla
004F77r 2               
004F77r 2                   ; fall through to _nibble_to_ascii
004F77r 2               
004F77r 2               _nibble_to_ascii:
004F77r 2               ; """Private helper function for byte_to_ascii: Print lower nibble
004F77r 2               ; of A and and EMIT it. This does the actual work.
004F77r 2               ; """
004F77r 2  29 0F            and #$0F
004F79r 2  09 30            ora #'0'
004F7Br 2  C9 3A            cmp #$3A        ; '9+1
004F7Dr 2  90 02            bcc @1
004F7Fr 2  69 06            adc #$06
004F81r 2               
004F81r 2  4C rr rr     @1:               jmp emit_a
004F84r 2               
004F84r 2  60               rts
004F85r 2               .endscope
004F85r 2               
004F85r 2               compare_16bit:
004F85r 2               ; """Compare TOS/NOS and return results in form of the 65c02 flags
004F85r 2               ; Adapted from Leventhal "6502 Assembly Language Subroutines", see
004F85r 2               ; also http://www.6502.org/tutorials/compare_beyond.html
004F85r 2               ; For signed numbers, Z signals equality and N which number is larger:
004F85r 2               ;       if TOS = NOS: Z=1 and N=0
004F85r 2               ;       if TOS > NOS: Z=0 and N=0
004F85r 2               ;       if TOS < NOS: Z=0 and N=1
004F85r 2               ; For unsigned numbers, Z signals equality and C which number is larger:
004F85r 2               ;       if TOS = NOS: Z=1 and N=0
004F85r 2               ;       if TOS > NOS: Z=0 and C=1
004F85r 2               ;       if TOS < NOS: Z=0 and C=0
004F85r 2               ; Compared to the book routine, WORD1 (MINUED) is TOS
004F85r 2               ;                               WORD2 (SUBTRAHEND) is NOS
004F85r 2               ; """
004F85r 2               .scope
004F85r 2                   ; Compare LSB first to set the carry flag
004F85r 2  B5 00            lda 0,x                 ; LSB of TOS
004F87r 2  D5 02            cmp 2,x                 ; LSB of NOS
004F89r 2  F0 0A            beq _equal
004F8Br 2               
004F8Br 2                   ; LSBs are not equal, compare MSB
004F8Br 2  B5 01            lda 1,x                 ; MSB of TOS
004F8Dr 2  F5 03            sbc 3,x                 ; MSB of NOS
004F8Fr 2  09 01            ora #1                  ; Make zero flag 0 because not equal
004F91r 2  70 08            bvs _overflow
004F93r 2  80 08            bra _not_equal
004F95r 2               _equal:
004F95r 2                   ; Low bytes are equal, so we compare high bytes
004F95r 2  B5 01            lda 1,x                 ; MSB of TOS
004F97r 2  F5 03            sbc 3,x                 ; MSB of NOS
004F99r 2  50 04            bvc _done
004F9Br 2               _overflow:
004F9Br 2                   ; Handle overflow because we use signed numbers
004F9Br 2  49 80            eor #$80                ; complement negative flag
004F9Dr 2               _not_equal:
004F9Dr 2  09 01            ora #1                  ; if overflow, we can't be eqal
004F9Fr 2               _done:
004F9Fr 2  60               rts
004FA0r 2               .endscope
004FA0r 2               
004FA0r 2               current_to_dp:
004FA0r 2               ; """Look up the current (compilation) dictionary pointer
004FA0r 2               ; in the wordlist set and put it into the dp zero-page
004FA0r 2               ; variable. Uses A and Y.
004FA0r 2               ; """
004FA0r 2                   ; Determine which wordlist is current
004FA0r 2  A0 04            ldy #current_offset
004FA2r 2  B1 rr            lda (up),y      ; current is a byte variable
004FA4r 2  0A               asl             ; turn it into an offset (in cells)
004FA5r 2               
004FA5r 2                   ; Get the dictionary pointer for that wordlist.
004FA5r 2  18               clc
004FA6r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
004FA8r 2  A8               tay
004FA9r 2  B1 rr            lda (up),y              ; get the dp for that wordlist.
004FABr 2  85 rr            sta dp
004FADr 2  C8               iny
004FAEr 2  B1 rr            lda (up),y
004FB0r 2  85 rr            sta dp+1
004FB2r 2               
004FB2r 2  60               rts
004FB3r 2               
004FB3r 2               
004FB3r 2               dp_to_current:
004FB3r 2               ; """Look up which wordlist is current and update its pointer
004FB3r 2               ; with the value in dp. Uses A and Y.
004FB3r 2               ; """
004FB3r 2                   ; Determine which wordlist is current
004FB3r 2  A0 04            ldy #current_offset
004FB5r 2  B1 rr            lda (up),y      ; current is a byte variable
004FB7r 2  0A               asl             ; turn it into an offset (in cells)
004FB8r 2               
004FB8r 2                   ; Get the dictionary pointer for that wordlist.
004FB8r 2  18               clc
004FB9r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
004FBBr 2  A8               tay
004FBCr 2  A5 rr            lda dp
004FBEr 2  91 rr            sta (up),y              ; get the dp for that wordlist.
004FC0r 2  C8               iny
004FC1r 2  A5 rr            lda dp+1
004FC3r 2  91 rr            sta (up),y
004FC5r 2               
004FC5r 2  60               rts
004FC6r 2               
004FC6r 2               interpret:
004FC6r 2               .scope
004FC6r 2               ; """Core routine for the interpreter called by EVALUATE and QUIT.
004FC6r 2               ; Process one line only. Assumes that the address of name is in
004FC6r 2               ; cib and the length of the whole input line string is in ciblen
004FC6r 2               ; """
004FC6r 2                   ; Normally we would use PARSE here with the SPACE character as
004FC6r 2                   ; a parameter (PARSE replaces WORD in modern Forths). However,
004FC6r 2                   ; Gforth's PARSE-NAME makes more sense as it uses spaces as
004FC6r 2                   ; delimiters per default and skips any leading spaces, which
004FC6r 2                   ; PARSE doesn't
004FC6r 2               _loop:
004FC6r 2  20 rr rr         jsr xt_parse_name       ; ( "string" -- addr u )
004FC9r 2               
004FC9r 2                   ; If PARSE-NAME returns 0 (empty line), no characters were left
004FC9r 2                   ; in the line and we need to go get a new line
004FC9r 2  B5 00            lda 0,x
004FCBr 2  15 01            ora 1,x
004FCDr 2  F0 70            beq _line_done
004FCFr 2               
004FCFr 2                   ; Go to FIND-NAME to see if this is a word we know. We have to
004FCFr 2                   ; make a copy of the address in case it isn't a word we know and
004FCFr 2                   ; we have to go see if it is a number
004FCFr 2  20 rr rr         jsr xt_two_dup          ; ( addr u -- addr u addr u )
004FD2r 2  20 rr rr         jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
004FD5r 2               
004FD5r 2                   ; A zero signals that we didn't find a word in the Dictionary
004FD5r 2  B5 00            lda 0,x
004FD7r 2  15 01            ora 1,x
004FD9r 2  D0 28            bne _got_name_token
004FDBr 2               
004FDBr 2                   ; We didn't get any nt we know of, so let's see if this is
004FDBr 2                   ; a number.
004FDBr 2  E8               inx                     ; ( addr u 0 -- addr u )
004FDCr 2  E8               inx
004FDDr 2               
004FDDr 2                   ; If the number conversion doesn't work, NUMBER will do the
004FDDr 2                   ; complaining for us
004FDDr 2  20 rr rr         jsr xt_number           ; ( addr u -- u|d )
004FE0r 2               
004FE0r 2                   ; Otherweise, if we're interpreting, we're done
004FE0r 2  A5 rr            lda state
004FE2r 2  F0 E2            beq _loop
004FE4r 2               
004FE4r 2                   ; We're compiling, so there is a bit more work.  Check
004FE4r 2                   ; status bit 5 to see if it's a single or double-cell
004FE4r 2                   ; number.
004FE4r 2  A9 20            lda #$20
004FE6r 2  24 rr            bit status
004FE8r 2  F0 0D            beq _single_number
004FEAr 2               
004FEAr 2                   ; It's a double cell number.  If we swap the
004FEAr 2                   ; upper and lower half, we can use the literal_runtime twice
004FEAr 2                   ; to compile it into the dictionary.
004FEAr 2  20 rr rr         jsr xt_swap
004FEDr 2  A0 rr            ldy #>literal_runtime
004FEFr 2  A9 rr            lda #<literal_runtime
004FF1r 2  20 rr rr         jsr cmpl_subroutine
004FF4r 2               
004FF4r 2                   ; compile our number
004FF4r 2  20 rr rr         jsr xt_comma
004FF7r 2               
004FF7r 2                   ; Fall into _single_number to process the other half.
004FF7r 2               _single_number:
004FF7r 2  A0 rr            ldy #>literal_runtime
004FF9r 2  A9 rr            lda #<literal_runtime
004FFBr 2  20 rr rr         jsr cmpl_subroutine
004FFEr 2               
004FFEr 2                   ; compile our number
004FFEr 2  20 rr rr         jsr xt_comma
005001r 2               
005001r 2                   ; That was so much fun, let's do it again!
005001r 2  80 C3            bra _loop
005003r 2               
005003r 2               _got_name_token:
005003r 2                   ; We have a known word's nt TOS. We're going to need its xt
005003r 2                   ; though, which is four bytes father down.
005003r 2               
005003r 2                   ; We arrive here with ( addr u nt ), so we NIP twice
005003r 2  B5 00            lda 0,x
005005r 2  95 04            sta 4,x
005007r 2  B5 01            lda 1,x
005009r 2  95 05            sta 5,x
00500Br 2               
00500Br 2  E8               inx
00500Cr 2  E8               inx
00500Dr 2  E8               inx
00500Er 2  E8               inx                     ; ( nt )
00500Fr 2               
00500Fr 2                   ; Save a version of nt for error handling and compilation stuff
00500Fr 2  B5 00            lda 0,x
005011r 2  85 rr            sta tmpbranch
005013r 2  B5 01            lda 1,x
005015r 2  85 rr            sta tmpbranch+1
005017r 2               
005017r 2  20 rr rr         jsr xt_name_to_int      ; ( nt - xt )
00501Ar 2               
00501Ar 2                   ; See if we are in interpret or compile mode, 0 is interpret
00501Ar 2  A5 rr            lda state
00501Cr 2  D0 13            bne _compile
00501Er 2               
00501Er 2                   ; We are interpreting, so EXECUTE the xt that is TOS. First,
00501Er 2                   ; though, see if this isn't a compile-only word, which would be
00501Er 2                   ; illegal. The status byte is the second one of the header.
00501Er 2  A0 01            ldy #1
005020r 2  B1 rr            lda (tmpbranch),y
005022r 2  29 01            and #CO                 ; mask everything but Compile Only bit
005024r 2  F0 05            beq _interpret
005026r 2               
005026r 2  A9 02            lda #err_compileonly
005028r 2  4C rr rr         jmp error
00502Br 2               
00502Br 2               _interpret:
00502Br 2                   ; We JSR to EXECUTE instead of calling the xt directly because
00502Br 2                   ; the RTS of the word we're executing will bring us back here,
00502Br 2                   ; skipping EXECUTE completely during RTS. If we were to execute
00502Br 2                   ; xt directly, we have to fool around with the Return Stack
00502Br 2                   ; instead, which is actually slightly slower
00502Br 2  20 rr rr         jsr xt_execute
00502Er 2               
00502Er 2                   ; That's quite enough for this word, let's get the next one
00502Er 2  4C rr rr         jmp _loop
005031r 2               
005031r 2               _compile:
005031r 2                   ; We're compiling! However, we need to see if this is an
005031r 2                   ; IMMEDIATE word, which would mean we execute it right now even
005031r 2                   ; during compilation mode. Fortunately, we saved the nt so life
005031r 2                   ; is easier. The flags are in the second byte of the header
005031r 2  A0 01            ldy #1
005033r 2  B1 rr            lda (tmpbranch),y
005035r 2  29 04            and #IM                 ; Mask all but IM bit
005037r 2  D0 F2            bne _interpret          ; IMMEDIATE word, execute right now
005039r 2               
005039r 2                   ; Compile the xt into the Dictionary with COMPILE,
005039r 2  20 rr rr         jsr xt_compile_comma
00503Cr 2  4C rr rr         jmp _loop
00503Fr 2               
00503Fr 2               _line_done:
00503Fr 2                   ; drop stuff from PARSE_NAME
00503Fr 2  E8               inx
005040r 2  E8               inx
005041r 2  E8               inx
005042r 2  E8               inx
005043r 2               
005043r 2  60               rts
005044r 2               .endscope
005044r 2               
005044r 2               
005044r 2               is_printable:
005044r 2               .scope
005044r 2               ; """Given a character in A, check if it is a printable ASCII
005044r 2               ; character in the range from $20 to $7E inclusive. Returns the
005044r 2               ; result in the Carry Flag: 0 (clear) is not printable, 1 (set)
005044r 2               ; is printable. Keeps A. See
005044r 2               ; http://www.obelisk.me.uk/6502/algorithms.html for a
005044r 2               ; discussion of various ways to do this
005044r 2  C9 20            cmp #AscSP              ; $20
005046r 2  90 08            bcc _done
005048r 2  C9 7F            cmp #'~' + 1             ; $7E
00504Ar 2  B0 03            bcs _failed
00504Cr 2               
00504Cr 2  38               sec
00504Dr 2  80 01            bra _done
00504Fr 2               _failed:
00504Fr 2  18               clc
005050r 2               _done:
005050r 2  60               rts
005051r 2               .endscope
005051r 2               
005051r 2               
005051r 2               is_whitespace:
005051r 2               .scope
005051r 2               ; """Given a character in A, check if it is a whitespace
005051r 2               ; character, that is, an ASCII value from 0 to 32 (where
005051r 2               ; 32 is SPACE). Returns the result in the Carry Flag:
005051r 2               ; 0 (clear) is no, it isn't whitespace, while 1 (set) means
005051r 2               ; that it is whitespace. See PARSE and PARSE-NAME for
005051r 2               ; a discussion of the uses. Does not change A or Y.
005051r 2  C9 00            cmp #00         ; explicit comparison to leave Y untouched
005053r 2  90 08            bcc _done
005055r 2               
005055r 2  C9 21            cmp #AscSP+1
005057r 2  B0 03            bcs _failed
005059r 2               
005059r 2  38               sec
00505Ar 2  80 01            bra _done
00505Cr 2               _failed:
00505Cr 2  18               clc
00505Dr 2               _done:
00505Dr 2  60               rts
00505Er 2               .endscope
00505Er 2               
00505Er 2               
00505Er 2               ; Underflow tests. We jump to the label with the number of cells (not: bytes)
00505Er 2               ; required for the word. This routine flows into the generic error handling
00505Er 2               ; code
00505Er 2               underflow_1:
00505Er 2               ; """Make sure we have at least one cell on the Data Stack"""
00505Er 2  E0 rr            cpx #dsp0-1
005060r 2  10 10            bpl underflow_error
005062r 2  60               rts
005063r 2               underflow_2:
005063r 2               ; """Make sure we have at least two cells on the Data Stack"""
005063r 2  E0 rr            cpx #dsp0-3
005065r 2  10 0B            bpl underflow_error
005067r 2  60               rts
005068r 2               underflow_3:
005068r 2               ; """Make sure we have at least three cells on the Data Stack"""
005068r 2  E0 rr            cpx #dsp0-5
00506Ar 2  10 06            bpl underflow_error
00506Cr 2  60               rts
00506Dr 2               underflow_4:
00506Dr 2               ; """Make sure we have at least four cells on the Data Stack"""
00506Dr 2  E0 rr            cpx #dsp0-7
00506Fr 2  10 01            bpl underflow_error
005071r 2  60               rts
005072r 2               
005072r 2               underflow_error:
005072r 2                   ; Entry for COLD/ABORT/QUIT
005072r 2  A9 09            lda #err_underflow      ; fall through to error
005074r 2               
005074r 2               error:
005074r 2               ; """Given the error number in a, print the associated error string and
005074r 2               ; call abort. Uses tmp3.
005074r 2               ; """
005074r 2  0A               asl
005075r 2  A8               tay
005076r 2  B9 rr rr         lda error_table,y
005079r 2  85 rr            sta tmp3                ; LSB
00507Br 2  C8               iny
00507Cr 2  B9 rr rr         lda error_table,y
00507Fr 2  85 rr            sta tmp3+1              ; MSB
005081r 2               
005081r 2  20 rr rr         jsr print_common
005084r 2  20 rr rr         jsr xt_cr
005087r 2  4C rr rr         jmp xt_abort            ; no jsr, as we clobber return stack
00508Ar 2               
00508Ar 2               
00508Ar 2               ; =====================================================================
00508Ar 2               ; PRINTING ROUTINES
00508Ar 2               
00508Ar 2               ; We distinguish two types of print calls, both of which take the string number
00508Ar 2               ; (see strings.asm) in A:
00508Ar 2               
00508Ar 2               ;       print_string       - with a line feed
00508Ar 2               ;       print_string_no_lf - without a line feed
00508Ar 2               
00508Ar 2               ; In addition, print_common provides a lower-level alternative for error
00508Ar 2               ; handling and anything else that provides the address of the
00508Ar 2               ; zero-terminated string directly in tmp3. All of those routines assume that
00508Ar 2               ; printing should be more concerned with size than speed, because anything to
00508Ar 2               ; do with humans reading text is going to be slow.
00508Ar 2               
00508Ar 2               print_string_no_lf:
00508Ar 2               ; """Given the number of a zero-terminated string in A, print it to the
00508Ar 2               ; current output without adding a LF. Uses Y and tmp3 by falling
00508Ar 2               ; through to print_common
00508Ar 2               ; """
00508Ar 2                   ; Get the entry from the string table
00508Ar 2  0A               asl
00508Br 2  A8               tay
00508Cr 2  B9 rr rr         lda string_table,y
00508Fr 2  85 rr            sta tmp3                ; LSB
005091r 2  C8               iny
005092r 2  B9 rr rr         lda string_table,y
005095r 2  85 rr            sta tmp3+1              ; MSB
005097r 2               
005097r 2                   ; fall through to print_common
005097r 2               print_common:
005097r 2               ; """Common print routine used by both the print functions and
005097r 2               ; the error printing routine. Assumes string address is in tmp3. Uses
005097r 2               ; Y.
005097r 2               ; """
005097r 2               .scope
005097r 2  A0 00            ldy #0
005099r 2               _loop:
005099r 2  B1 rr            lda (tmp3),y
00509Br 2  F0 06            beq _done               ; strings are zero-terminated
00509Dr 2               
00509Dr 2  20 rr rr         jsr emit_a              ; allows vectoring via output
0050A0r 2  C8               iny
0050A1r 2  80 F6            bra _loop
0050A3r 2               _done:
0050A3r 2  60               rts
0050A4r 2               .endscope
0050A4r 2               
0050A4r 2               print_string:
0050A4r 2               ; """Print a zero-terminated string to the console/screen, adding a LF.
0050A4r 2               ; We do not check to see if the index is out of range. Uses tmp3.
0050A4r 2               ; """
0050A4r 2  20 rr rr         jsr print_string_no_lf
0050A7r 2  4C rr rr         jmp xt_cr               ; JSR/RTS because never compiled
0050AAr 2               
0050AAr 2               
0050AAr 2               print_u:
0050AAr 2               ; """basic printing routine used by higher-level constructs,
0050AAr 2               ; the equivalent of the forth word  0 <# #s #> type  which is
0050AAr 2               ; basically u. without the space at the end. used for various
0050AAr 2               ; outputs
0050AAr 2               ; """
0050AAr 2  20 rr rr         jsr xt_zero                     ; 0
0050ADr 2  20 rr rr         jsr xt_less_number_sign         ; <#
0050B0r 2  20 rr rr         jsr xt_number_sign_s            ; #S
0050B3r 2  20 rr rr         jsr xt_number_sign_greater      ; #>
0050B6r 2  4C rr rr         jmp xt_type                     ; JSR/RTS because never compiled
0050B9r 2               
0050B9r 2               ; END
0050B9r 2               
0050B9r 1               
0050B9r 1               .segment "DATA"
0050B9r 1               
0050B9r 1               .ifdef TALI_OPTIONAL_ASSEMBLER
0050B9r 1               .include "../../assembler.s"
0050B9r 2               ; Assembler for Tali Forth 2
0050B9r 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0050B9r 2               ; First version: 07. Nov 2014 (as tasm65c02)
0050B9r 2               ; This version: 03. Jan 2019
0050B9r 2               
0050B9r 2               ; This is the built-in assembler for Tali Forth 2. Once the assembler wordlist
0050B9r 2               ; is included with
0050B9r 2               
0050B9r 2               ;       assembler-wordlist >order
0050B9r 2               
0050B9r 2               ; the opcodes are available as normal Forth words. The format is Simpler
0050B9r 2               ; Assembler Notation (SAN) which separates the opcode completely from the
0050B9r 2               ; operand (see https://github.com/scotws/SAN). In this case, the operand is
0050B9r 2               ; entered before the opcode in the postfix Forth notation (for example, "2000
0050B9r 2               ; lda.#"). See the assembler documenation in the manual for more detail.
0050B9r 2               
0050B9r 2               ; The code here was originally used in A Typist's Assembler for the 65c02
0050B9r 2               ; (tasm65c02), see https://github.com/scotws/tasm65c02 for the standalone
0050B9r 2               ; version. Tasm65c02 is in the public domain.
0050B9r 2               
0050B9r 2               ; This code makes use of the opcode tables stored as part of the disassembler.
0050B9r 2               
0050B9r 2               ; ==========================================================
0050B9r 2               ; MNEMONICS
0050B9r 2               
0050B9r 2               ; The assembler instructions are realized as individual Forth words with
0050B9r 2               ; entries in the assembler wordlist (see header.asm). We pass the opcode in A.
0050B9r 2               
0050B9r 2               ; An alterantive method would have been along the lines of
0050B9r 2               
0050B9r 2               ;               jsr asm_common
0050B9r 2               ;               .byte $EA
0050B9r 2               
0050B9r 2               ; where the asm_common then uses the address on the Return Stack to pick up the
0050B9r 2               ; opcode and the length. Though this uses fewer resources, the current version
0050B9r 2               ; makes up for this by simplifying the code of asm_common.
0050B9r 2               
0050B9r 2               ; The routines are organized alphabetically by SAN mnemonic, not by opcode. The
0050B9r 2               ; SAN and traditional mnemonics are listed after the opcode load instruction.
0050B9r 2               ; This list was generated by a Python script in the tools folder, see there for
0050B9r 2               ; more detail.
0050B9r 2               
0050B9r 2               assembler:              ; used to calculate size of assembler code
0050B9r 2               .ifdef TALI_OPTIONAL_ASSEMBLER
0050B9r 2               xt_asm_adc_h:   ; adc.# \ ADC #nn
0050B9r 2  A9 69                        lda #$69
0050BBr 2  4C rr rr                     jmp asm_common
0050BEr 2               z_asm_adc_h:
0050BEr 2               
0050BEr 2               xt_asm_adc_x:   ; adc.x \ ADC nnnn,X
0050BEr 2  A9 7D                        lda #$7D
0050C0r 2  4C rr rr                     jmp asm_common
0050C3r 2               z_asm_adc_x:
0050C3r 2               
0050C3r 2               xt_asm_adc_y:   ; adc.y \ ADC nnnn,Y
0050C3r 2  A9 79                        lda #$79
0050C5r 2  4C rr rr                     jmp asm_common
0050C8r 2               z_asm_adc_y:
0050C8r 2               
0050C8r 2               xt_asm_adc_z:   ; adc.z \ ADC nn
0050C8r 2  A9 65                        lda #$65
0050CAr 2  4C rr rr                     jmp asm_common
0050CDr 2               z_asm_adc_z:
0050CDr 2               
0050CDr 2               xt_asm_adc_zi:  ; adc.zi \ ADC (nn)
0050CDr 2  A9 72                        lda #$72
0050CFr 2  4C rr rr                     jmp asm_common
0050D2r 2               z_asm_adc_zi:
0050D2r 2               
0050D2r 2               xt_asm_adc_ziy: ; adc.ziy \ ADC (nn),Y
0050D2r 2  A9 71                        lda #$71
0050D4r 2  4C rr rr                     jmp asm_common
0050D7r 2               z_asm_adc_ziy:
0050D7r 2               
0050D7r 2               xt_asm_adc_zx:  ; adc.zx \ ADC nn,X
0050D7r 2  A9 75                        lda #$75
0050D9r 2  4C rr rr                     jmp asm_common
0050DCr 2               z_asm_adc_zx:
0050DCr 2               
0050DCr 2               xt_asm_adc_zxi: ; adc.zxi \ ADC (nn,X)
0050DCr 2  A9 61                        lda #$61
0050DEr 2  4C rr rr                     jmp asm_common
0050E1r 2               z_asm_adc_zxi:
0050E1r 2               
0050E1r 2               xt_asm_and:     ; and. \ AND nnnn
0050E1r 2  A9 2D                        lda #$2D
0050E3r 2  4C rr rr                     jmp asm_common
0050E6r 2               z_asm_and:
0050E6r 2               
0050E6r 2               xt_asm_and_h:   ; and.# \ AND #nn
0050E6r 2  A9 29                        lda #$29
0050E8r 2  4C rr rr                     jmp asm_common
0050EBr 2               z_asm_and_h:
0050EBr 2               
0050EBr 2               xt_asm_and_x:   ; and.x \ AND nnnn,X
0050EBr 2  A9 3D                        lda #$3D
0050EDr 2  4C rr rr                     jmp asm_common
0050F0r 2               z_asm_and_x:
0050F0r 2               
0050F0r 2               xt_asm_and_y:   ; and.y \ AND nnnn,Y
0050F0r 2  A9 39                        lda #$39
0050F2r 2  4C rr rr                     jmp asm_common
0050F5r 2               z_asm_and_y:
0050F5r 2               
0050F5r 2               xt_asm_and_z:   ; and.z \ AND nn
0050F5r 2  A9 25                        lda #$25
0050F7r 2  4C rr rr                     jmp asm_common
0050FAr 2               z_asm_and_z:
0050FAr 2               
0050FAr 2               xt_asm_and_zi:  ; and.zi \ AND (nn)
0050FAr 2  A9 32                        lda #$32
0050FCr 2  4C rr rr                     jmp asm_common
0050FFr 2               z_asm_and_zi:
0050FFr 2               
0050FFr 2               xt_asm_and_ziy: ; and.ziy \ AND (nn),Y
0050FFr 2  A9 31                        lda #$31
005101r 2  4C rr rr                     jmp asm_common
005104r 2               z_asm_and_ziy:
005104r 2               
005104r 2               xt_asm_and_zx:  ; and.zx \ AND nn,X
005104r 2  A9 35                        lda #$35
005106r 2  4C rr rr                     jmp asm_common
005109r 2               z_asm_and_zx:
005109r 2               
005109r 2               xt_asm_and_zxi: ; and.zxi \ AND (nn,X)
005109r 2  A9 21                        lda #$21
00510Br 2  4C rr rr                     jmp asm_common
00510Er 2               z_asm_and_zxi:
00510Er 2               
00510Er 2               xt_asm_asl:     ; asl \ ASL nnnn
00510Er 2  A9 0E                        lda #$0E
005110r 2  4C rr rr                     jmp asm_common
005113r 2               z_asm_asl:
005113r 2               
005113r 2               xt_asm_asl_a:   ; asl.a \ ASL
005113r 2  A9 0A                        lda #$0A
005115r 2  4C rr rr                     jmp asm_common
005118r 2               z_asm_asl_a:
005118r 2               
005118r 2               xt_asm_asl_x:   ; asl.x \ ASL nnnn,X
005118r 2  A9 1E                        lda #$1E
00511Ar 2  4C rr rr                     jmp asm_common
00511Dr 2               z_asm_asl_x:
00511Dr 2               
00511Dr 2               xt_asm_asl_z:   ; asl.z \ ASL nn
00511Dr 2  A9 06                        lda #$06
00511Fr 2  4C rr rr                     jmp asm_common
005122r 2               z_asm_asl_z:
005122r 2               
005122r 2               xt_asm_asl_zx:  ; asl.zx \ ASL nn,X
005122r 2  A9 16                        lda #$16
005124r 2  4C rr rr                     jmp asm_common
005127r 2               z_asm_asl_zx:
005127r 2               
005127r 2               xt_asm_bcc:     ; bcc \ BCC
005127r 2  A9 90                        lda #$90
005129r 2  4C rr rr                     jmp asm_common
00512Cr 2               z_asm_bcc:
00512Cr 2               
00512Cr 2               xt_asm_bcs:     ; bcs \ BCS
00512Cr 2  A9 B0                        lda #$B0
00512Er 2  A0 02                        ldy #2
005130r 2  4C rr rr                     jmp asm_common
005133r 2               z_asm_bcs:
005133r 2               
005133r 2               xt_asm_beq:     ; beq \ BEQ
005133r 2  A9 F0                        lda #$F0
005135r 2  4C rr rr                     jmp asm_common
005138r 2               z_asm_beq:
005138r 2               
005138r 2               xt_asm_bit:     ; bit \ BIT nnnn
005138r 2  A9 2C                        lda #$2C
00513Ar 2  4C rr rr                     jmp asm_common
00513Dr 2               z_asm_bit:
00513Dr 2               
00513Dr 2               xt_asm_bit_h:   ; bit.# \ BIT #nn
00513Dr 2  A9 89                        lda #$89
00513Fr 2  4C rr rr                     jmp asm_common
005142r 2               z_asm_bit_h:
005142r 2               
005142r 2               xt_asm_bit_x:   ; bit.x \ BIT nnnn,X
005142r 2  A9 3C                        lda #$3C
005144r 2  4C rr rr                     jmp asm_common
005147r 2               z_asm_bit_x:
005147r 2               
005147r 2               xt_asm_bit_z:   ; bit.z \ BIT nn
005147r 2  A9 24                        lda #$24
005149r 2  4C rr rr                     jmp asm_common
00514Cr 2               z_asm_bit_z:
00514Cr 2               
00514Cr 2               xt_asm_bit_zx:  ; bit.zx \ BIT nn,X
00514Cr 2  A9 34                        lda #$34
00514Er 2  4C rr rr                     jmp asm_common
005151r 2               z_asm_bit_zx:
005151r 2               
005151r 2               xt_asm_bmi:     ; bmi \ BMI
005151r 2  A9 30                        lda #$30
005153r 2  4C rr rr                     jmp asm_common
005156r 2               z_asm_bmi:
005156r 2               
005156r 2               xt_asm_bne:     ; bne \ BNE
005156r 2  A9 D0                        lda #$D0
005158r 2  4C rr rr                     jmp asm_common
00515Br 2               z_asm_bne:
00515Br 2               
00515Br 2               xt_asm_bpl:     ; bpl \ BPL
00515Br 2  A9 10                        lda #$10
00515Dr 2  4C rr rr                     jmp asm_common
005160r 2               z_asm_bpl:
005160r 2               
005160r 2               xt_asm_bra:     ; bra \ BRA
005160r 2  A9 80                        lda #$80
005162r 2  4C rr rr                     jmp asm_common
005165r 2               z_asm_bra:
005165r 2               
005165r 2               xt_asm_brk:     ; brk \ BRK
005165r 2  A9 00                        lda #$00
005167r 2  4C rr rr                     jmp asm_common
00516Ar 2               z_asm_brk:
00516Ar 2               
00516Ar 2               xt_asm_bvc:     ; bvc \ BVC
00516Ar 2  A9 50                        lda #$50
00516Cr 2  4C rr rr                     jmp asm_common
00516Fr 2               z_asm_bvc:
00516Fr 2               
00516Fr 2               xt_asm_bvs:     ; bvs \ BVS
00516Fr 2  A9 70                        lda #$70
005171r 2  4C rr rr                     jmp asm_common
005174r 2               z_asm_bvs:
005174r 2               
005174r 2               xt_asm_clc:     ; clc \ CLC
005174r 2  A9 18                        lda #$18
005176r 2  4C rr rr                     jmp asm_common
005179r 2               z_asm_clc:
005179r 2               
005179r 2               xt_asm_cld:     ; cld \ CLD
005179r 2  A9 D8                        lda #$D8
00517Br 2  4C rr rr                     jmp asm_common
00517Er 2               z_asm_cld:
00517Er 2               
00517Er 2               xt_asm_cli:     ; cli \ CLI
00517Er 2  A9 58                        lda #$58
005180r 2  4C rr rr                     jmp asm_common
005183r 2               z_asm_cli:
005183r 2               
005183r 2               xt_asm_clv:     ; clv \ CLV
005183r 2  A9 B8                        lda #$B8
005185r 2  4C rr rr                     jmp asm_common
005188r 2               z_asm_clv:
005188r 2               
005188r 2               xt_asm_cmp:     ; cmp \ CMP nnnn
005188r 2  A9 CD                        lda #$CD
00518Ar 2  4C rr rr                     jmp asm_common
00518Dr 2               z_asm_cmp:
00518Dr 2               
00518Dr 2               xt_asm_cmp_h:   ; cmp.# \ CMP #nn
00518Dr 2  A9 C9                        lda #$C9
00518Fr 2  4C rr rr                     jmp asm_common
005192r 2               z_asm_cmp_h:
005192r 2               
005192r 2               xt_asm_cmp_x:   ; cmp.x \ CMP nnnn,X
005192r 2  A9 DD                        lda #$DD
005194r 2  4C rr rr                     jmp asm_common
005197r 2               z_asm_cmp_x:
005197r 2               
005197r 2               xt_asm_cmp_y:   ; cmp.y \ CMP nnnn,Y
005197r 2  A9 D9                        lda #$D9
005199r 2  4C rr rr                     jmp asm_common
00519Cr 2               z_asm_cmp_y:
00519Cr 2               
00519Cr 2               xt_asm_cmp_z:   ; cmp.z \ CMP nn
00519Cr 2  A9 C5                        lda #$C5
00519Er 2  4C rr rr                     jmp asm_common
0051A1r 2               z_asm_cmp_z:
0051A1r 2               
0051A1r 2               xt_asm_cmp_zi:  ; cmp.zi \ CMP (nn)
0051A1r 2  A9 D2                        lda #$D2
0051A3r 2  4C rr rr                     jmp asm_common
0051A6r 2               z_asm_cmp_zi:
0051A6r 2               
0051A6r 2               xt_asm_cmp_ziy: ; cmp.ziy \ CMP (nn),Y
0051A6r 2  A9 D1                        lda #$D1
0051A8r 2  4C rr rr                     jmp asm_common
0051ABr 2               z_asm_cmp_ziy:
0051ABr 2               
0051ABr 2               xt_asm_cmp_zx:  ; cmp.zx \ CMP nn,X
0051ABr 2  A9 D5                        lda #$D5
0051ADr 2  4C rr rr                     jmp asm_common
0051B0r 2               z_asm_cmp_zx:
0051B0r 2               
0051B0r 2               xt_asm_cmp_zxi: ; cmp.zxi \ CMP (nn,X)
0051B0r 2  A9 C1                        lda #$C1
0051B2r 2  4C rr rr                     jmp asm_common
0051B5r 2               z_asm_cmp_zxi:
0051B5r 2               
0051B5r 2               xt_asm_cpx:     ; cpx \ CPX nnnn
0051B5r 2  A9 EC                        lda #$EC
0051B7r 2  4C rr rr                     jmp asm_common
0051BAr 2               z_asm_cpx:
0051BAr 2               
0051BAr 2               xt_asm_cpx_h:   ; cpx.# \ CPX #nn
0051BAr 2  A9 E0                        lda #$E0
0051BCr 2  4C rr rr                     jmp asm_common
0051BFr 2               z_asm_cpx_h:
0051BFr 2               
0051BFr 2               xt_asm_cpx_z:   ; cpx.z \ CPX nn
0051BFr 2  A9 E4                        lda #$E4
0051C1r 2  4C rr rr                     jmp asm_common
0051C4r 2               z_asm_cpx_z:
0051C4r 2               
0051C4r 2               xt_asm_cpy:     ; cpy \ CPY
0051C4r 2  A9 CC                        lda #$CC
0051C6r 2  A0 03                        ldy #3
0051C8r 2  4C rr rr                     jmp asm_common
0051CBr 2               z_asm_cpy:
0051CBr 2               
0051CBr 2               xt_asm_cpy_h:   ; cpy.# \ CPY #nn
0051CBr 2  A9 C0                        lda #$C0
0051CDr 2  4C rr rr                     jmp asm_common
0051D0r 2               z_asm_cpy_h:
0051D0r 2               
0051D0r 2               xt_asm_cpy_z:   ; cpy.z \ CPY nn
0051D0r 2  A9 C4                        lda #$C4
0051D2r 2  4C rr rr                     jmp asm_common
0051D5r 2               z_asm_cpy_z:
0051D5r 2               
0051D5r 2               xt_asm_dec:     ; dec \ DEC nnnn
0051D5r 2  A9 CE                        lda #$CE
0051D7r 2  4C rr rr                     jmp asm_common
0051DAr 2               z_asm_dec:
0051DAr 2               
0051DAr 2               xt_asm_dec_a:   ; dec.a \ DEC
0051DAr 2  A9 3A                        lda #$3A
0051DCr 2  4C rr rr                     jmp asm_common
0051DFr 2               z_asm_dec_a:
0051DFr 2               
0051DFr 2               xt_asm_dec_x:   ; dec.x \ DEC nnnn,X
0051DFr 2  A9 DE                        lda #$DE
0051E1r 2  4C rr rr                     jmp asm_common
0051E4r 2               z_asm_dec_x:
0051E4r 2               
0051E4r 2               xt_asm_dec_z:   ; dec.z \ DEC nn
0051E4r 2  A9 C6                        lda #$C6
0051E6r 2  4C rr rr                     jmp asm_common
0051E9r 2               z_asm_dec_z:
0051E9r 2               
0051E9r 2               xt_asm_dec_zx:  ; dec.zx \ DEC nn,X
0051E9r 2  A9 D6                        lda #$D6
0051EBr 2  4C rr rr                     jmp asm_common
0051EEr 2               z_asm_dec_zx:
0051EEr 2               
0051EEr 2               xt_asm_dex:     ; dex \ DEX
0051EEr 2  A9 CA                        lda #$CA
0051F0r 2  4C rr rr                     jmp asm_common
0051F3r 2               z_asm_dex:
0051F3r 2               
0051F3r 2               xt_asm_dey:     ; dey \ DEY
0051F3r 2  A9 88                        lda #$88
0051F5r 2  4C rr rr                     jmp asm_common
0051F8r 2               z_asm_dey:
0051F8r 2               
0051F8r 2               xt_asm_eor:     ; eor \ EOR nnnn
0051F8r 2  A9 4D                        lda #$4D
0051FAr 2  4C rr rr                     jmp asm_common
0051FDr 2               z_asm_eor:
0051FDr 2               
0051FDr 2               xt_asm_eor_h:   ; eor.# \ EOR #nn
0051FDr 2  A9 49                        lda #$49
0051FFr 2  4C rr rr                     jmp asm_common
005202r 2               z_asm_eor_h:
005202r 2               
005202r 2               xt_asm_eor_x:   ; eor.x \ EOR nnnn,X
005202r 2  A9 5D                        lda #$5D
005204r 2  4C rr rr                     jmp asm_common
005207r 2               z_asm_eor_x:
005207r 2               
005207r 2               xt_asm_eor_y:   ; eor.y \ EOR nnnn,Y
005207r 2  A9 59                        lda #$59
005209r 2  4C rr rr                     jmp asm_common
00520Cr 2               z_asm_eor_y:
00520Cr 2               
00520Cr 2               xt_asm_eor_z:   ; eor.z \ EOR nn
00520Cr 2  A9 45                        lda #$45
00520Er 2  4C rr rr                     jmp asm_common
005211r 2               z_asm_eor_z:
005211r 2               
005211r 2               xt_asm_eor_zi:  ; eor.zi \ EOR (nn)
005211r 2  A9 52                        lda #$52
005213r 2  4C rr rr                     jmp asm_common
005216r 2               z_asm_eor_zi:
005216r 2               
005216r 2               xt_asm_eor_ziy: ; eor.ziy \ EOR (nn),Y
005216r 2  A9 51                        lda #$51
005218r 2  4C rr rr                     jmp asm_common
00521Br 2               z_asm_eor_ziy:
00521Br 2               
00521Br 2               xt_asm_eor_zx:  ; eor.zx \ EOR nn,X
00521Br 2  A9 55                        lda #$55
00521Dr 2  4C rr rr                     jmp asm_common
005220r 2               z_asm_eor_zx:
005220r 2               
005220r 2               xt_asm_eor_zxi: ; eor.zxi \ EOR (nn,X)
005220r 2  A9 41                        lda #$41
005222r 2  4C rr rr                     jmp asm_common
005225r 2               z_asm_eor_zxi:
005225r 2               
005225r 2               xt_asm_inc:     ; inc \ INC nnnn
005225r 2  A9 EE                        lda #$EE
005227r 2  4C rr rr                     jmp asm_common
00522Ar 2               z_asm_inc:
00522Ar 2               
00522Ar 2               xt_asm_inc_a:   ; inc.a \ INC
00522Ar 2  A9 1A                        lda #$1A
00522Cr 2  4C rr rr                     jmp asm_common
00522Fr 2               z_asm_inc_a:
00522Fr 2               
00522Fr 2               xt_asm_inc_x:   ; inc.x \ INC nnnn,X
00522Fr 2  A9 FE                        lda #$FE
005231r 2  4C rr rr                     jmp asm_common
005234r 2               z_asm_inc_x:
005234r 2               
005234r 2               xt_asm_inc_z:   ; inc.z \ INC nn
005234r 2  A9 E6                        lda #$E6
005236r 2  4C rr rr                     jmp asm_common
005239r 2               z_asm_inc_z:
005239r 2               
005239r 2               xt_asm_inc_zx:  ; inc.zx \ INC nn,X
005239r 2  A9 F6                        lda #$F6
00523Br 2  4C rr rr                     jmp asm_common
00523Er 2               z_asm_inc_zx:
00523Er 2               
00523Er 2               xt_asm_inx:     ; inx \ INX
00523Er 2  A9 E8                        lda #$E8
005240r 2  4C rr rr                     jmp asm_common
005243r 2               z_asm_inx:
005243r 2               
005243r 2               xt_asm_iny:     ; iny \ INY
005243r 2  A9 C8                        lda #$C8
005245r 2  4C rr rr                     jmp asm_common
005248r 2               z_asm_iny:
005248r 2               
005248r 2               xt_asm_jmp:     ; jmp \ JMP nnnn
005248r 2  A9 4C                        lda #$4C
00524Ar 2  4C rr rr                     jmp asm_common
00524Dr 2               z_asm_jmp:
00524Dr 2               
00524Dr 2               xt_asm_jmp_i:   ; jmp.i \ JMP (nnnn)
00524Dr 2  A9 6C                        lda #$6C
00524Fr 2  4C rr rr                     jmp asm_common
005252r 2               z_asm_jmp_i:
005252r 2               
005252r 2               xt_asm_jmp_xi:  ; jmp.xi \ JMP (nnnn,X)
005252r 2  A9 7C                        lda #$7C
005254r 2  4C rr rr                     jmp asm_common
005257r 2               z_asm_jmp_xi:
005257r 2               
005257r 2               xt_asm_jsr:     ; jsr \ JSR nnnn
005257r 2  A9 20                        lda #$20
005259r 2  4C rr rr                     jmp asm_common
00525Cr 2               z_asm_jsr:
00525Cr 2               
00525Cr 2               xt_asm_lda:     ; lda \ LDA nnnn
00525Cr 2  A9 AD                        lda #$AD
00525Er 2  4C rr rr                     jmp asm_common
005261r 2               z_asm_lda:
005261r 2               
005261r 2               xt_asm_lda_h:   ; lda.# \ LDA #nn
005261r 2  A9 A9                        lda #$A9
005263r 2  4C rr rr                     jmp asm_common
005266r 2               z_asm_lda_h:
005266r 2               
005266r 2               xt_asm_lda_x:   ; lda.x \ LDA nnnn,X
005266r 2  A9 BD                        lda #$BD
005268r 2  4C rr rr                     jmp asm_common
00526Br 2               z_asm_lda_x:
00526Br 2               
00526Br 2               xt_asm_lda_y:   ; lda.y \ LDA nnnn,Y
00526Br 2  A9 B9                        lda #$B9
00526Dr 2  4C rr rr                     jmp asm_common
005270r 2               z_asm_lda_y:
005270r 2               
005270r 2               xt_asm_lda_z:   ; lda.z \ LDA nn
005270r 2  A9 A5                        lda #$A5
005272r 2  4C rr rr                     jmp asm_common
005275r 2               z_asm_lda_z:
005275r 2               
005275r 2               xt_asm_lda_zi:  ; lda.zi \ LDA (nn)
005275r 2  A9 B2                        lda #$B2
005277r 2  4C rr rr                     jmp asm_common
00527Ar 2               z_asm_lda_zi:
00527Ar 2               
00527Ar 2               xt_asm_lda_ziy: ; lda.ziy \ LDA (nn),Y
00527Ar 2  A9 B1                        lda #$B1
00527Cr 2  4C rr rr                     jmp asm_common
00527Fr 2               z_asm_lda_ziy:
00527Fr 2               
00527Fr 2               xt_asm_lda_zx:  ; lda.zx \ LDA nn,X
00527Fr 2  A9 B5                        lda #$B5
005281r 2  4C rr rr                     jmp asm_common
005284r 2               z_asm_lda_zx:
005284r 2               
005284r 2               xt_asm_lda_zxi: ; lda.zxi \ LDA (nn,X)
005284r 2  A9 A1                        lda #$A1
005286r 2  4C rr rr                     jmp asm_common
005289r 2               z_asm_lda_zxi:
005289r 2               
005289r 2               xt_asm_ldx:     ; ldx \ LDX nnnn
005289r 2  A9 AE                        lda #$AE
00528Br 2  4C rr rr                     jmp asm_common
00528Er 2               z_asm_ldx:
00528Er 2               
00528Er 2               xt_asm_ldx_h:   ; ldx.# \ LDX #nn
00528Er 2  A9 A2                        lda #$A2
005290r 2  4C rr rr                     jmp asm_common
005293r 2               z_asm_ldx_h:
005293r 2               
005293r 2               xt_asm_ldx_y:   ; ldx.y \ LDX nnnn,Y
005293r 2  A9 BE                        lda #$BE
005295r 2  4C rr rr                     jmp asm_common
005298r 2               z_asm_ldx_y:
005298r 2               
005298r 2               xt_asm_ldx_z:   ; ldx.z \ LDX nn
005298r 2  A9 A6                        lda #$A6
00529Ar 2  4C rr rr                     jmp asm_common
00529Dr 2               z_asm_ldx_z:
00529Dr 2               
00529Dr 2               xt_asm_ldx_zy:  ; ldx.zy \ LDX nn,Y
00529Dr 2  A9 B6                        lda #$B6
00529Fr 2  4C rr rr                     jmp asm_common
0052A2r 2               z_asm_ldx_zy:
0052A2r 2               
0052A2r 2               xt_asm_ldy:     ; ldy \ LDY nnnn
0052A2r 2  A9 AC                        lda #$AC
0052A4r 2  4C rr rr                     jmp asm_common
0052A7r 2               z_asm_ldy:
0052A7r 2               
0052A7r 2               xt_asm_ldy_h:   ; ldy.# \ LDY #nn
0052A7r 2  A9 A0                        lda #$A0
0052A9r 2  4C rr rr                     jmp asm_common
0052ACr 2               z_asm_ldy_h:
0052ACr 2               
0052ACr 2               xt_asm_ldy_x:   ; ldy.x \ LDY nnnn,X
0052ACr 2  A9 BC                        lda #$BC
0052AEr 2  4C rr rr                     jmp asm_common
0052B1r 2               z_asm_ldy_x:
0052B1r 2               
0052B1r 2               xt_asm_ldy_z:   ; ldy.z \ LDY nn
0052B1r 2  A9 A4                        lda #$A4
0052B3r 2  4C rr rr                     jmp asm_common
0052B6r 2               z_asm_ldy_z:
0052B6r 2               
0052B6r 2               xt_asm_ldy_zx:  ; ldy.zx \ LDY nn,X
0052B6r 2  A9 B4                        lda #$B4
0052B8r 2  4C rr rr                     jmp asm_common
0052BBr 2               z_asm_ldy_zx:
0052BBr 2               
0052BBr 2               xt_asm_lsr:     ; lsr \ LSR nnnn
0052BBr 2  A9 4E                        lda #$4E
0052BDr 2  4C rr rr                     jmp asm_common
0052C0r 2               z_asm_lsr:
0052C0r 2               
0052C0r 2               xt_asm_lsr_a:   ; lsr.a \ LSR
0052C0r 2  A9 4A                        lda #$4A
0052C2r 2  4C rr rr                     jmp asm_common
0052C5r 2               z_asm_lsr_a:
0052C5r 2               
0052C5r 2               xt_asm_lsr_x:   ; lsr.x \ LSR nnnn,X
0052C5r 2  A9 5E                        lda #$5E
0052C7r 2  4C rr rr                     jmp asm_common
0052CAr 2               z_asm_lsr_x:
0052CAr 2               
0052CAr 2               xt_asm_lsr_z:   ; lsr.z \ LSR nn
0052CAr 2  A9 46                        lda #$46
0052CCr 2  4C rr rr                     jmp asm_common
0052CFr 2               z_asm_lsr_z:
0052CFr 2               
0052CFr 2               xt_asm_lsr_zx:  ; lsr.zx \ LSR nn,X
0052CFr 2  A9 56                        lda #$56
0052D1r 2  4C rr rr                     jmp asm_common
0052D4r 2               z_asm_lsr_zx:
0052D4r 2               
0052D4r 2               xt_asm_nop:     ; nop \ NOP
0052D4r 2  A9 EA                        lda #$EA
0052D6r 2  4C rr rr                     jmp asm_common
0052D9r 2               z_asm_nop:
0052D9r 2               
0052D9r 2               xt_asm_ora:     ; ora \ ORA nnnn
0052D9r 2  A9 0D                        lda #$0D
0052DBr 2  4C rr rr                     jmp asm_common
0052DEr 2               z_asm_ora:
0052DEr 2               
0052DEr 2               xt_asm_ora_h:   ; ora.# \ ORA #nn
0052DEr 2  A9 09                        lda #$09
0052E0r 2  4C rr rr                     jmp asm_common
0052E3r 2               z_asm_ora_h:
0052E3r 2               
0052E3r 2               xt_asm_ora_x:   ; ora.x \ ORA nnnn,X
0052E3r 2  A9 1D                        lda #$1D
0052E5r 2  4C rr rr                     jmp asm_common
0052E8r 2               z_asm_ora_x:
0052E8r 2               
0052E8r 2               xt_asm_ora_y:   ; ora.y \ ORA nnnn,Y
0052E8r 2  A9 19                        lda #$19
0052EAr 2  4C rr rr                     jmp asm_common
0052EDr 2               z_asm_ora_y:
0052EDr 2               
0052EDr 2               xt_asm_ora_z:   ; ora.z \ ORA nn
0052EDr 2  A9 05                        lda #$05
0052EFr 2  4C rr rr                     jmp asm_common
0052F2r 2               z_asm_ora_z:
0052F2r 2               
0052F2r 2               xt_asm_ora_zi:  ; ora.zi \ ORA.ZI
0052F2r 2  A9 12                        lda #$12
0052F4r 2  A0 02                        ldy #2
0052F6r 2  4C rr rr                     jmp asm_common
0052F9r 2               z_asm_ora_zi:
0052F9r 2               
0052F9r 2               xt_asm_ora_ziy: ; ora.ziy \ ORA (nn),Y
0052F9r 2  A9 11                        lda #$11
0052FBr 2  4C rr rr                     jmp asm_common
0052FEr 2               z_asm_ora_ziy:
0052FEr 2               
0052FEr 2               xt_asm_ora_zx:  ; ora.zx \ ORA nn,X
0052FEr 2  A9 15                        lda #$15
005300r 2  4C rr rr                     jmp asm_common
005303r 2               z_asm_ora_zx:
005303r 2               
005303r 2               xt_asm_ora_zxi: ; ora.zxi \ ORA (nn,X)
005303r 2  A9 01                        lda #$01
005305r 2  4C rr rr                     jmp asm_common
005308r 2               z_asm_ora_zxi:
005308r 2               
005308r 2               xt_asm_pha:     ; pha \ PHA
005308r 2  A9 48                        lda #$48
00530Ar 2  4C rr rr                     jmp asm_common
00530Dr 2               z_asm_pha:
00530Dr 2               
00530Dr 2               xt_asm_php:     ; php \ PHP
00530Dr 2  A9 08                        lda #$08
00530Fr 2  4C rr rr                     jmp asm_common
005312r 2               z_asm_php:
005312r 2               
005312r 2               xt_asm_phx:     ; phx \ PHX
005312r 2  A9 DA                        lda #$DA
005314r 2  4C rr rr                     jmp asm_common
005317r 2               z_asm_phx:
005317r 2               
005317r 2               xt_asm_phy:     ; phy \ PHY
005317r 2  A9 5A                        lda #$5A
005319r 2  4C rr rr                     jmp asm_common
00531Cr 2               z_asm_phy:
00531Cr 2               
00531Cr 2               xt_asm_pla:     ; pla \ PLA
00531Cr 2  A9 68                        lda #$68
00531Er 2  4C rr rr                     jmp asm_common
005321r 2               z_asm_pla:
005321r 2               
005321r 2               xt_asm_plp:     ; plp \ PLP
005321r 2  A9 28                        lda #$28
005323r 2  4C rr rr                     jmp asm_common
005326r 2               z_asm_plp:
005326r 2               
005326r 2               xt_asm_plx:     ; plx \ PLX
005326r 2  A9 FA                        lda #$FA
005328r 2  4C rr rr                     jmp asm_common
00532Br 2               z_asm_plx:
00532Br 2               
00532Br 2               xt_asm_ply:     ; ply \ PLY
00532Br 2  A9 7A                        lda #$7A
00532Dr 2  4C rr rr                     jmp asm_common
005330r 2               z_asm_ply:
005330r 2               
005330r 2               xt_asm_rol:     ; rol \ ROL nnnn
005330r 2  A9 2E                        lda #$2E
005332r 2  4C rr rr                     jmp asm_common
005335r 2               z_asm_rol:
005335r 2               
005335r 2               xt_asm_rol_a:   ; rol.a \ ROL
005335r 2  A9 2A                        lda #$2A
005337r 2  4C rr rr                     jmp asm_common
00533Ar 2               z_asm_rol_a:
00533Ar 2               
00533Ar 2               xt_asm_rol_x:   ; rol.x \ ROL nnnn,X
00533Ar 2  A9 3E                        lda #$3E
00533Cr 2  4C rr rr                     jmp asm_common
00533Fr 2               z_asm_rol_x:
00533Fr 2               
00533Fr 2               xt_asm_rol_z:   ; rol.z \ ROL nn
00533Fr 2  A9 26                        lda #$26
005341r 2  4C rr rr                     jmp asm_common
005344r 2               z_asm_rol_z:
005344r 2               
005344r 2               xt_asm_rol_zx:  ; rol.zx \ ROL nn,X
005344r 2  A9 36                        lda #$36
005346r 2  4C rr rr                     jmp asm_common
005349r 2               z_asm_rol_zx:
005349r 2               
005349r 2               xt_asm_ror:     ; ror \ ROR nnnn
005349r 2  A9 6E                        lda #$6E
00534Br 2  4C rr rr                     jmp asm_common
00534Er 2               z_asm_ror:
00534Er 2               
00534Er 2               xt_asm_ror_a:   ; ror.a \ ROR
00534Er 2  A9 6A                        lda #$6A
005350r 2  4C rr rr                     jmp asm_common
005353r 2               z_asm_ror_a:
005353r 2               
005353r 2               xt_asm_ror_x:   ; ror.x \ ROR nnnn,X
005353r 2  A9 7E                        lda #$7E
005355r 2  4C rr rr                     jmp asm_common
005358r 2               z_asm_ror_x:
005358r 2               
005358r 2               xt_asm_ror_z:   ; ror.z \ ROR nn
005358r 2  A9 66                        lda #$66
00535Ar 2  4C rr rr                     jmp asm_common
00535Dr 2               z_asm_ror_z:
00535Dr 2               
00535Dr 2               xt_asm_ror_zx:  ; ror.zx \ ROR nn,X
00535Dr 2  A9 76                        lda #$76
00535Fr 2  4C rr rr                     jmp asm_common
005362r 2               z_asm_ror_zx:
005362r 2               
005362r 2               xt_asm_rti:     ; rti \ RTI
005362r 2  A9 40                        lda #$40
005364r 2  4C rr rr                     jmp asm_common
005367r 2               z_asm_rti:
005367r 2               
005367r 2               xt_asm_rts:     ; rts \ RTS
005367r 2  A9 60                        lda #$60
005369r 2  4C rr rr                     jmp asm_common
00536Cr 2               z_asm_rts:
00536Cr 2               
00536Cr 2               xt_asm_sbc:     ; sbc \ SBC nnnn
00536Cr 2  A9 ED                        lda #$ED
00536Er 2  4C rr rr                     jmp asm_common
005371r 2               z_asm_sbc:
005371r 2               
005371r 2               xt_asm_sbc_h:   ; sbc.# \ SBC #nn
005371r 2  A9 E9                        lda #$E9
005373r 2  4C rr rr                     jmp asm_common
005376r 2               z_asm_sbc_h:
005376r 2               
005376r 2               xt_asm_sbc_x:   ; sbc.x \ SBC nnnn,X
005376r 2  A9 FD                        lda #$FD
005378r 2  4C rr rr                     jmp asm_common
00537Br 2               z_asm_sbc_x:
00537Br 2               
00537Br 2               xt_asm_sbc_y:   ; sbc.y \ SBC nnnn,Y
00537Br 2  A9 F9                        lda #$F9
00537Dr 2  4C rr rr                     jmp asm_common
005380r 2               z_asm_sbc_y:
005380r 2               
005380r 2               xt_asm_sbc_z:   ; sbc.z \ SBC nn
005380r 2  A9 E5                        lda #$E5
005382r 2  4C rr rr                     jmp asm_common
005385r 2               z_asm_sbc_z:
005385r 2               
005385r 2               xt_asm_sbc_zi:  ; sbc.zi \ SBC (nn)
005385r 2  A9 F2                        lda #$F2
005387r 2  4C rr rr                     jmp asm_common
00538Ar 2               z_asm_sbc_zi:
00538Ar 2               
00538Ar 2               xt_asm_sbc_ziy: ; sbc.ziy \ SBC (nn),Y
00538Ar 2  A9 F1                        lda #$F1
00538Cr 2  4C rr rr                     jmp asm_common
00538Fr 2               z_asm_sbc_ziy:
00538Fr 2               
00538Fr 2               xt_asm_sbc_zx:  ; sbc.zx \ SBC nn,X
00538Fr 2  A9 F5                        lda #$F5
005391r 2  4C rr rr                     jmp asm_common
005394r 2               z_asm_sbc_zx:
005394r 2               
005394r 2               xt_asm_sbc_zxi: ; sbc.zxi \ SBC (nn,X)
005394r 2  A9 E1                        lda #$E1
005396r 2  80 7C                        bra asm_common  ; <-- limit for BRA instead of JMP
005398r 2               z_asm_sbc_zxi:
005398r 2               
005398r 2               xt_asm_sec:     ; sec \ SEC
005398r 2  A9 38                        lda #$38
00539Ar 2  80 78                        bra asm_common
00539Cr 2               z_asm_sec:
00539Cr 2               
00539Cr 2               xt_asm_sed:     ; sed \ SED
00539Cr 2  A9 F8                        lda #$F8
00539Er 2  80 74                        bra asm_common
0053A0r 2               z_asm_sed:
0053A0r 2               
0053A0r 2               xt_asm_sei:     ; sei \ SEI
0053A0r 2  A9 78                        lda #$78
0053A2r 2  80 70                        bra asm_common
0053A4r 2               z_asm_sei:
0053A4r 2               
0053A4r 2               xt_asm_sta:     ; sta \ STA nnnn
0053A4r 2  A9 8D                        lda #$8D
0053A6r 2  80 6C                        bra asm_common
0053A8r 2               z_asm_sta:
0053A8r 2               
0053A8r 2               xt_asm_sta_x:   ; sta.x \ STA nnnn,X
0053A8r 2  A9 9D                        lda #$9D
0053AAr 2  80 68                        bra asm_common
0053ACr 2               z_asm_sta_x:
0053ACr 2               
0053ACr 2               xt_asm_sta_y:   ; sta.y \ STA nnnn,Y
0053ACr 2  A9 99                        lda #$99
0053AEr 2  80 64                        bra asm_common
0053B0r 2               z_asm_sta_y:
0053B0r 2               
0053B0r 2               xt_asm_sta_z:   ; sta.z \ STA nn
0053B0r 2  A9 85                        lda #$85
0053B2r 2  80 60                        bra asm_common
0053B4r 2               z_asm_sta_z:
0053B4r 2               
0053B4r 2               xt_asm_sta_zi:  ; sta.zi \ STA (nn)
0053B4r 2  A9 92                        lda #$92
0053B6r 2  80 5C                        bra asm_common
0053B8r 2               z_asm_sta_zi:
0053B8r 2               
0053B8r 2               xt_asm_sta_ziy: ; sta.ziy \ STA (nn),Y
0053B8r 2  A9 91                        lda #$91
0053BAr 2  80 58                        bra asm_common
0053BCr 2               z_asm_sta_ziy:
0053BCr 2               
0053BCr 2               xt_asm_sta_zx:  ; sta.zx \ STA nn,X
0053BCr 2  A9 95                        lda #$95
0053BEr 2  80 54                        bra asm_common
0053C0r 2               z_asm_sta_zx:
0053C0r 2               
0053C0r 2               xt_asm_sta_zxi: ; sta.zxi \ STA (nn,X)
0053C0r 2  A9 81                        lda #$81
0053C2r 2  80 50                        bra asm_common
0053C4r 2               z_asm_sta_zxi:
0053C4r 2               
0053C4r 2               xt_asm_stx:     ; stx \ STX nnnn
0053C4r 2  A9 8E                        lda #$8E
0053C6r 2  80 4C                        bra asm_common
0053C8r 2               z_asm_stx:
0053C8r 2               
0053C8r 2               xt_asm_stx_z:   ; stx.z \ STX nn
0053C8r 2  A9 86                        lda #$86
0053CAr 2  80 48                        bra asm_common
0053CCr 2               z_asm_stx_z:
0053CCr 2               
0053CCr 2               xt_asm_stx_zy:  ; stx.zy \ STX nn,Y
0053CCr 2  A9 96                        lda #$96
0053CEr 2  80 44                        bra asm_common
0053D0r 2               z_asm_stx_zy:
0053D0r 2               
0053D0r 2               xt_asm_sty:     ; sty \ STY nnnn
0053D0r 2  A9 8C                        lda #$8C
0053D2r 2  80 40                        bra asm_common
0053D4r 2               z_asm_sty:
0053D4r 2               
0053D4r 2               xt_asm_sty_z:   ; sty.z \ STY nn
0053D4r 2  A9 84                        lda #$84
0053D6r 2  80 3C                        bra asm_common
0053D8r 2               z_asm_sty_z:
0053D8r 2               
0053D8r 2               xt_asm_sty_zx:  ; sty.zx \ STY nn,X
0053D8r 2  A9 94                        lda #$94
0053DAr 2  80 38                        bra asm_common
0053DCr 2               z_asm_sty_zx:
0053DCr 2               
0053DCr 2               xt_asm_stz:     ; stz \ STZ nnnn
0053DCr 2  A9 9C                        lda #$9C
0053DEr 2  80 34                        bra asm_common
0053E0r 2               z_asm_stz:
0053E0r 2               
0053E0r 2               xt_asm_stz_x:   ; stz.x \ STZ nnnn,X
0053E0r 2  A9 9E                        lda #$9E
0053E2r 2  80 30                        bra asm_common
0053E4r 2               z_asm_stz_x:
0053E4r 2               
0053E4r 2               xt_asm_stz_z:   ; stz.z \ STZ nn
0053E4r 2  A9 64                        lda #$64
0053E6r 2  80 2C                        bra asm_common
0053E8r 2               z_asm_stz_z:
0053E8r 2               
0053E8r 2               xt_asm_stz_zx:  ; stz.zx \ STZ nn,X
0053E8r 2  A9 74                        lda #$74
0053EAr 2  80 28                        bra asm_common
0053ECr 2               z_asm_stz_zx:
0053ECr 2               
0053ECr 2               xt_asm_tax:     ; tax \ TAX
0053ECr 2  A9 AA                        lda #$AA
0053EEr 2  80 24                        bra asm_common
0053F0r 2               z_asm_tax:
0053F0r 2               
0053F0r 2               xt_asm_tay:     ; tay \ TAY
0053F0r 2  A9 A8                        lda #$A8
0053F2r 2  80 20                        bra asm_common
0053F4r 2               z_asm_tay:
0053F4r 2               
0053F4r 2               xt_asm_trb:     ; trb \ TRB nnnn
0053F4r 2  A9 1C                        lda #$1C
0053F6r 2  80 1C                        bra asm_common
0053F8r 2               z_asm_trb:
0053F8r 2               
0053F8r 2               xt_asm_trb_z:   ; trb.z \ TRB nn
0053F8r 2  A9 14                        lda #$14
0053FAr 2  80 18                        bra asm_common
0053FCr 2               z_asm_trb_z:
0053FCr 2               
0053FCr 2               xt_asm_tsb:     ; tsb \ TSB nnnn
0053FCr 2  A9 0C                        lda #$0C
0053FEr 2  80 14                        bra asm_common
005400r 2               z_asm_tsb:
005400r 2               
005400r 2               xt_asm_tsb_z:   ; tsb.z \ TSB nn
005400r 2  A9 04                        lda #$04
005402r 2  80 10                        bra asm_common
005404r 2               z_asm_tsb_z:
005404r 2               
005404r 2               xt_asm_tsx:     ; tsx \ TSX
005404r 2  A9 BA                        lda #$BA
005406r 2  80 0C                        bra asm_common
005408r 2               z_asm_tsx:
005408r 2               
005408r 2               xt_asm_txa:     ; txa \ TXA
005408r 2  A9 8A                        lda #$8A
00540Ar 2  80 08                        bra asm_common
00540Cr 2               z_asm_txa:
00540Cr 2               
00540Cr 2               xt_asm_txs:     ; txs \ TXS
00540Cr 2  A9 9A                        lda #$9A
00540Er 2  80 04                        bra asm_common
005410r 2               z_asm_txs:
005410r 2               
005410r 2               xt_asm_tya:     ; tya \ TYA
005410r 2  A9 98                        lda #$98
005412r 2  80 00                        bra asm_common
005414r 2               z_asm_tya:
005414r 2               
005414r 2               
005414r 2               ; ==========================================================
005414r 2               ; ASSEMBLER HELPER FUNCTIONS
005414r 2               
005414r 2               asm_common:
005414r 2               
005414r 2                       ; """Common routine for all opcodes. We arrive here with the opcode in
005414r 2                       ; A. We do not need to check for the correct values because we are
005414r 2                       ; coming from the assembler Dictionary and trust our external test
005414r 2                       ; suite.
005414r 2                       ; """
005414r 2                               ; Compile opcode. Note cmpl_a does not use Y
005414r 2  A8                           tay
005415r 2  20 rr rr                     jsr cmpl_a
005418r 2               
005418r 2                               ; We get the length of the opcode from the table included in
005418r 2                               ; the disassembler. We use the opcode value as the offset in
005418r 2                               ; the oc_index_table. We have 256 entries, each two bytes
005418r 2                               ; long, so we can't just use an index with Y. We use tmp2 for
005418r 2                               ; this.
005418r 2  A9 rr                        lda #<oc_index_table
00541Ar 2  85 rr                        sta tmp2
00541Cr 2  A9 rr                        lda #>oc_index_table
00541Er 2  85 rr                        sta tmp2+1
005420r 2               
005420r 2  98                           tya             ; retrieve opcode
005421r 2  0A                           asl             ; times two for offset
005422r 2  90 02                        bcc @m
005424r 2  E6 rr                        inc tmp2+1
005426r 2               @m:
005426r 2  A8                           tay             ; use Y as the index
005427r 2               
005427r 2                               ; Get address of the entry in the opcode table. We put it in
005427r 2                               ; tmp3 and push a copy of it to the stack to be able to print
005427r 2                               ; the opcode later
005427r 2  B1 rr                        lda (tmp2),y    ; LSB
005429r 2  85 rr                        sta tmp3
00542Br 2  C8                           iny
00542Cr 2  B1 rr                        lda (tmp2),y    ; MSB
00542Er 2  85 rr                        sta tmp3+1
005430r 2               
005430r 2  B2 rr                        lda (tmp3)      ; get "lengths byte"
005432r 2               
005432r 2                               ; The length of the instruction is stored in bits 7 and 6.
005432r 2                               ; Rotate them through the carry flag and mask the rest
005432r 2  2A                           rol
005433r 2  2A                           rol
005434r 2  2A                           rol             ; Three times because we go through Carry
005435r 2  29 03                        and #%00000011
005437r 2  A8                           tay
005438r 2               
005438r 2                               ; One byte means no operand, we're done. Use DEY as CPY #1
005438r 2  88                           dey
005439r 2  F0 12                        beq @done
00543Br 2               
00543Br 2                               ; We have an operand which must be TOS
00543Br 2  20 rr rr                     jsr underflow_1
00543Er 2               
00543Er 2                               ; We compile the LSB of TOS as the operand we definitely have
00543Er 2                               ; before we even test if this is a two- or three-byte
00543Er 2                               ; instruction. Little endian CPU means we store this byte first
00543Er 2  B5 00                        lda 0,x
005440r 2  20 rr rr                     jsr cmpl_a      ; does not use Y
005443r 2               
005443r 2                               ; If this is a two-byte instruction, we're done. If we landed
005443r 2                               ; here, we've already decremented Y by one, so this is
005443r 2                               ; the equivalent to CPY #2
005443r 2  88                           dey
005444r 2  F0 05                        beq @done_drop
005446r 2               
005446r 2                               ; This must be a three-byte instruction, get the MSB.
005446r 2  B5 01                        lda 1,x
005448r 2  20 rr rr                     jsr cmpl_a      ; Fall through to _done_drop
00544Br 2               
00544Br 2               @done_drop:
00544Br 2  E8                           inx
00544Cr 2  E8                           inx             ; Fall through to _done
00544Dr 2               @done:
00544Dr 2  60                           rts             ; Returns to original caller
00544Er 2               
00544Er 2               
00544Er 2               ; ==========================================================
00544Er 2               ; PSEUDO-INSTRUCTIONS AND MACROS
00544Er 2               
00544Er 2               xt_asm_push_a:
00544Er 2                       ; """push-a puts the content of the 65c02 Accumulator on the Forth
00544Er 2                       ; data stack as the TOS. This is a convience routine that encodes the
00544Er 2                       ; instructions  DEX  DEX  STA 0,X  STZ 1,X
00544Er 2                       ; """
00544Er 2  A0 00                        ldy #0
005450r 2               _loop:
005450r 2  B9 rr rr                     lda asm_push_a_data,y
005453r 2  C9 FF                        cmp #$FF
005455r 2  F0 06                        beq @done
005457r 2               
005457r 2  20 rr rr                     jsr cmpl_a      ; does not change Y
00545Ar 2  C8                           iny
00545Br 2  80 F3                        bra _loop
00545Dr 2               @done:
00545Dr 2               z_asm_push_a:
00545Dr 2  60                           rts
00545Er 2               asm_push_a_data:
00545Er 2                       ; We can't use 00 as a terminator because STA 0,X assembles to 95 00
00545Er 2  CA CA 95 00          .byte $CA, $CA, $95, 00, $74, $01
005462r 2  74 01        
005464r 2  FF                   .byte $FF               ; terminator
005465r 2               
005465r 2               
005465r 2               
005465r 2               ; ==========================================================
005465r 2               ; DIRECTIVES
005465r 2               
005465r 2               ; The "<J" directive (back jump) is a dummy instruction (syntactic sugar) to
005465r 2               ; make clear that the JMP or JSR instructions are using the address that had
005465r 2               ; been placed on the stack by "-->" (the "arrow" directive).
005465r 2               xt_asm_back_jump:
005465r 2               z_asm_back_jump:
005465r 2  60                           rts
005466r 2               
005466r 2               ; The "<B" directive (back branch) takes an address that was placed on the Data
005466r 2               ; Stack by the anonymous label directive "-->" (the "arrow") and the current
005466r 2               ; address (via HERE) to calculate a backward branch offset. This is then stored
005466r 2               ; by a following branch instruction.
005466r 2               xt_asm_back_branch:
005466r 2                               ; We arrive here with ( addr-l ) of the label on the stack and
005466r 2                               ; then subtract the current address
005466r 2  20 rr rr                     jsr xt_here             ; ( addr-l addr-h )
005469r 2  20 rr rr                     jsr xt_minus            ; ( offset )
00546Cr 2               
00546Cr 2                               ; We subtract two more because of the branch instruction itself
00546Cr 2  3A                           dea
00546Dr 2  3A                           dea
00546Er 2               
00546Er 2               z_asm_back_branch:
00546Er 2  60                           rts
00546Fr 2               .endif
00546Fr 2               assembler_end:
00546Fr 2               
00546Fr 2               ; END
00546Fr 2               
00546Fr 1               .include "../../disassembler.s"
00546Fr 2               ; Disassembler for Tali Forth 2
00546Fr 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
00546Fr 2               ; Updated by Sam Colwell
00546Fr 2               ; First version: 28. Apr 2018
00546Fr 2               ; This version: 31. Dec 2022
00546Fr 2               
00546Fr 2               ; This is the default disassembler for Tali Forth 2. Use by passing
00546Fr 2               ; the address and length of the block of memory to be disassembled:
00546Fr 2               ;
00546Fr 2               ;       disasm ( addr x -- )
00546Fr 2               
00546Fr 2               ; The underflow checking is handled by the word's stub in native_words.asm, see
00546Fr 2               ; there for more information.
00546Fr 2               
00546Fr 2               ; The code is disassembled in Simpler Assembler Notation (SAN), because that
00546Fr 2               ; is, uh, simpler. See the documentation and https://github.com/scotws/SAN for
00546Fr 2               ; more information. Because disassemblers are used interactively with slow
00546Fr 2               ; humans, we don't care that much about speed and put the emphasis at being
00546Fr 2               ; small.
00546Fr 2               
00546Fr 2               ; Uses: tmp3, tmp2, tmp1 (xt_u_dot_r uses xt_type which uses tmp1)
00546Fr 2               ;       scratch (used for handling literals and JSRs)
00546Fr 2               
00546Fr 2               disassembler:
00546Fr 2  20 rr rr                     jsr xt_cr       ; ( addr u )
005472r 2               _byte_loop:
005472r 2                               ; Print address at start of the line. Note we use whatever
005472r 2                               ; number base the user has
005472r 2  20 rr rr                     jsr xt_over     ; ( addr u addr )
005475r 2  20 rr rr                     jsr xt_u_dot    ; ( addr u )
005478r 2  20 rr rr                     jsr xt_space
00547Br 2               
00547Br 2                               ; We use the opcode value as the offset in the oc_index_table.
00547Br 2                               ; We have 256 entries, each two bytes long, so we can't just
00547Br 2                               ; use an index with Y. We use tmp2 for this.
00547Br 2  A9 rr                        lda #<oc_index_table
00547Dr 2  85 rr                        sta tmp2
00547Fr 2  A9 rr                        lda #>oc_index_table
005481r 2  85 rr                        sta tmp2+1
005483r 2               
005483r 2  A1 02                        lda (2,x)       ; get opcode that addr points to
005485r 2  85 rr                        sta scratch     ; Save opcode
005487r 2               
005487r 2  0A                           asl             ; multiply by two for offset
005488r 2  90 02                        bcc @ok
00548Ar 2  E6 rr                        inc tmp2+1      ; we're on second page
00548Cr 2               @ok:
00548Cr 2  A8                           tay             ; use Y as the index
00548Dr 2               
00548Dr 2                               ; Get address of the entry in the opcode table. We put it
00548Dr 2                               ; in tmp3 and push a copy of it to the stack to be able to
00548Dr 2                               ; print the opcode later
00548Dr 2  B1 rr                        lda (tmp2),y    ; LSB
00548Fr 2  85 rr                        sta tmp3
005491r 2  48                           pha
005492r 2               
005492r 2  C8                           iny
005493r 2               
005493r 2  B1 rr                        lda (tmp2),y    ; MSB
005495r 2  85 rr                        sta tmp3+1
005497r 2  48                           pha
005498r 2               
005498r 2                               ; The first byte is the "lengths byte" which is coded so
005498r 2                               ; that bits 7 to 6 are the length of the instruction (1 to
005498r 2                               ; 3 bytes) and 2 to 0 are the length of the mnemonic.
005498r 2  B2 rr                        lda (tmp3)
00549Ar 2  A8                           tay                     ; save copy of lengths byte
00549Br 2               
00549Br 2                               ; Since this is Simpler Assembler Notation (SAN) in a Forth
00549Br 2                               ; system, we want to print any operand before we print the
00549Br 2                               ; mnemonic ('1000 sta' instead of 'sta 1000'). This allows us
00549Br 2                               ; to copy and paste directly from the disassembler to the
00549Br 2                               ; assembler.
00549Br 2               
00549Br 2                               ; What happens next depends on the length of the instruction in
00549Br 2                               ; bytes:
00549Br 2               
00549Br 2                               ;   1 byte:  OPC          -->          OPC  bit sequence: %01
00549Br 2                               ;   2 bytes: OPC LSB      -->    0 LSB OPC  bit sequence: %10
00549Br 2                               ;   3 bytes: OPC LSB MSB  -->  MSB LSB OPC  bit sequence: %11
00549Br 2               
00549Br 2                               ; We can distinguish between the first case, where there is
00549Br 2                               ; only the mnemonic, and the second and third cases, where we
00549Br 2                               ; have an operand. We do this by use of the bit sequence in
00549Br 2                               ; bits 7 and 6.
00549Br 2  10 3C                        bpl _no_operand         ; bit 7 clear, single-byte instruction
00549Dr 2               
00549Dr 2                               ; We have an operand. Prepare the Data Stack
00549Dr 2  20 rr rr                     jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
0054A0r 2               
0054A0r 2                               ; Because of the glory of a little endian CPU, we can start
0054A0r 2                               ; with the next byte regardless if this is a one or two byte
0054A0r 2                               ; operand, because we'll need the LSB one way or the other.
0054A0r 2                               ; We have a copy of the opcode on the stack, so we can now move
0054A0r 2                               ; to the next byte
0054A0r 2  F6 04                        inc 4,x
0054A2r 2  D0 02                        bne @l1
0054A4r 2  F6 05                        inc 5,x                 ; ( addr+1 u 0 )
0054A6r 2               @l1:
0054A6r 2  B5 02                        lda 2,x
0054A8r 2  D0 02                        bne @l2
0054AAr 2  D6 03                        dec 3,x
0054ACr 2               @l2:
0054ACr 2  D6 02                        dec 2,x                 ; ( addr+1 u-1 0 )
0054AEr 2               
0054AEr 2  A1 04                        lda (4,x)
0054B0r 2  95 00                        sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
0054B2r 2  85 rr                        sta scratch+1           ; Save a copy in the scratch buffer
0054B4r 2               
0054B4r 2                               ; We still have a copy of the lengths byte in Y, which we use
0054B4r 2                               ; to see if we have a one-byte operand (and are done already)
0054B4r 2                               ; or a two-byte operand
0054B4r 2  98                           tya                     ; retrieve copy of lengths byte
0054B5r 2  2A                           rol                     ; shift bit 6 to bit 7
0054B6r 2  10 14                        bpl _print_operand
0054B8r 2               
0054B8r 2                               ; We have a three-byte instruction, so we need to get the MSB
0054B8r 2                               ; of the operand. Move to the next byte
0054B8r 2  F6 04                        inc 4,x
0054BAr 2  D0 02                        bne @l3
0054BCr 2  F6 05                        inc 5,x                 ; ( addr+2 u-1 LSB )
0054BEr 2               @l3:
0054BEr 2  B5 02                        lda 2,x
0054C0r 2  D0 02                        bne @l4
0054C2r 2  D6 03                        dec 3,x
0054C4r 2               @l4:
0054C4r 2  D6 02                        dec 2,x                 ; ( addr+2 u-2 LSB )
0054C6r 2               
0054C6r 2  A1 04                        lda (4,x)
0054C8r 2  95 01                        sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
0054CAr 2  85 rr                        sta scratch+2           ; Save a copy in the scratch buffer
0054CCr 2               
0054CCr 2                               ; fall through to _print_operand
0054CCr 2               
0054CCr 2               _print_operand:
0054CCr 2               
0054CCr 2                               ; We arrive here with the lengths byte in Y, the address of the
0054CCr 2                               ; opcode table entry for the instruction on the stack ( addr+n
0054CCr 2                               ; u-n opr). We want the output to be nicely formatted in
0054CCr 2                               ; columns, so we use U.R. The maximal width of the number in
0054CCr 2                               ; decimal on an 16-bit addressed machine is five characters
0054CCr 2  CA                           dex
0054CDr 2  CA                           dex
0054CEr 2  A9 05                        lda #5
0054D0r 2  95 00                        sta 0,x
0054D2r 2  74 01                        stz 1,x                 ; ( addr+n u-n opr 5 )
0054D4r 2               
0054D4r 2  20 rr rr                     jsr xt_u_dot_r          ; U.R ( addr+n u-n )
0054D7r 2               
0054D7r 2  80 0B                        bra _print_mnemonic
0054D9r 2               
0054D9r 2               _no_operand:
0054D9r 2                               ; We arrive here with the opcode table address on the stack,
0054D9r 2                               ; the lengths byte in Y and ( addr u ). Since we want to have
0054D9r 2                               ; a nicely formatted output, we need to indent the mnemonic by
0054D9r 2                               ; five spaces.
0054D9r 2  CA                           dex
0054DAr 2  CA                           dex
0054DBr 2  A9 05                        lda #5
0054DDr 2  95 00                        sta 0,x
0054DFr 2  74 01                        stz 1,x                 ; ( addr u 5 )
0054E1r 2               
0054E1r 2  20 rr rr                     jsr xt_spaces           ; ( addr u )
0054E4r 2               
0054E4r 2                               ; fall through to _print_mnemonic
0054E4r 2               
0054E4r 2               _print_mnemonic:
0054E4r 2                               ; We arrive here with the opcode table address on the stack and
0054E4r 2                               ; ( addr u | addr+n u-n ). Time to print the mnemonic.
0054E4r 2  20 rr rr                     jsr xt_space
0054E7r 2               
0054E7r 2  CA                           dex
0054E8r 2  CA                           dex                     ; ( addr u ? )
0054E9r 2  68                           pla                     ; MSB
0054EAr 2  95 01                        sta 1,x                 ; ( addr u MSB )
0054ECr 2  68                           pla                     ; LSB
0054EDr 2  95 00                        sta 0,x                 ; ( addr u addr-o )
0054EFr 2               
0054EFr 2  20 rr rr                     jsr xt_count            ; ( addr u addr-o u-o )
0054F2r 2               
0054F2r 2                               ; The length of the mnemnonic string is in bits 2 to 0
0054F2r 2  74 01                        stz 1,x                 ; paranoid
0054F4r 2  B5 00                        lda 0,x
0054F6r 2  29 07                        and #%00000111          ; ( addr u addr-o u-o )
0054F8r 2  95 00                        sta 0,x
0054FAr 2               
0054FAr 2  20 rr rr                     jsr xt_type             ; ( addr u )
0054FDr 2               
0054FDr 2                               ; Handle JSR by printing name of function, if available.
0054FDr 2                               ; scratch has opcode ($20 for JSR)
0054FDr 2                               ; scratch+1 and scratch+2 have address if it's a JSR.
0054FDr 2  A5 rr                        lda scratch
0054FFr 2  C9 20                        cmp #$20
005501r 2  D0 59                        bne _not_jsr
005503r 2               
005503r 2                               ; It's a JSR.  Print 5 spaces as an offset.
005503r 2  CA                           dex
005504r 2  CA                           dex
005505r 2  A9 05                        lda #5
005507r 2  95 00                        sta 0,x
005509r 2  74 01                        stz 1,x
00550Br 2  20 rr rr                     jsr xt_spaces
00550Er 2               
00550Er 2               ; Special handlers
00550Er 2                               ; Handle literals specially.
00550Er 2  A9 rr                        lda #<literal_runtime
005510r 2  C5 rr                        cmp scratch+1
005512r 2  D0 0C                        bne _not_literal
005514r 2  A9 rr                        lda #>literal_runtime
005516r 2  C5 rr                        cmp scratch+2
005518r 2  D0 06                        bne _not_literal
00551Ar 2                               ; It's a literal.
00551Ar 2  20 rr rr                     jsr disasm_literal
00551Dr 2  4C rr rr                     jmp _printing_done
005520r 2               
005520r 2               _not_literal:
005520r 2                               ; Handle string literals specially.
005520r 2  A9 rr                        lda #<sliteral_runtime
005522r 2  C5 rr                        cmp scratch+1
005524r 2  D0 0C                        bne _not_sliteral
005526r 2  A9 rr                        lda #>sliteral_runtime
005528r 2  C5 rr                        cmp scratch+2
00552Ar 2  D0 06                        bne _not_sliteral
00552Cr 2                               ; It's a literal.
00552Cr 2  20 rr rr                     jsr disasm_sliteral
00552Fr 2  4C rr rr                     jmp _printing_done
005532r 2               _not_sliteral:
005532r 2                               ; Handle 0branch
005532r 2  A9 rr                        lda #<zero_branch_runtime
005534r 2  C5 rr                        cmp scratch+1
005536r 2  D0 0C                        bne _not_0branch
005538r 2  A9 rr                        lda #>zero_branch_runtime
00553Ar 2  C5 rr                        cmp scratch+2
00553Cr 2  D0 06                        bne _not_0branch
00553Er 2                               ; It's a 0branch.
00553Er 2  20 rr rr                     jsr disasm_0branch
005541r 2  4C rr rr                     jmp _printing_done
005544r 2               _not_0branch:
005544r 2                               ; Handle branch
005544r 2  A9 rr                        lda #<branch_runtime
005546r 2  C5 rr                        cmp scratch+1
005548r 2  D0 0C                        bne _not_branch
00554Ar 2  A9 rr                        lda #>branch_runtime
00554Cr 2  C5 rr                        cmp scratch+2
00554Er 2  D0 06                        bne _not_branch
005550r 2                               ; It's a branch.
005550r 2  20 rr rr                     jsr disasm_branch
005553r 2  4C rr rr                     jmp _printing_done
005556r 2               _not_branch:
005556r 2                               ; Try the generic JSR handler, which will use the target of the
005556r 2                               ; JSR as an XT and print the name if it exists.
005556r 2  20 rr rr                     jsr disasm_jsr
005559r 2  4C rr rr                     jmp _printing_done
00555Cr 2               
00555Cr 2               _not_jsr:
00555Cr 2                               ; See if the instruction is a jump (instruction still in A)
00555Cr 2                               ; (Strings start with a jump over the data.)
00555Cr 2  C9 4C                        cmp #$4C
00555Er 2  D0 29                        bne _printing_done
005560r 2               
005560r 2                               ; We have a branch.  See if it's a string by looking for
005560r 2                               ; a JSR sliteral_runtime at the jump target address.
005560r 2                               ; The target address is in scratch+1 and scratch+2
005560r 2                               ; Use scratch+3 and scratch+4 here as we need to move
005560r 2                               ; the pointer.
005560r 2  A5 rr                        lda scratch+1   ; Copy the pointer.
005562r 2  85 rr                        sta scratch+3
005564r 2  A5 rr                        lda scratch+2
005566r 2  85 rr                        sta scratch+4
005568r 2               
005568r 2                               ; Get the first byte at the jmp target address.
005568r 2  B2 rr                        lda (scratch+3)
00556Ar 2               
00556Ar 2  C9 20                        cmp #$20 ; check for JSR
00556Cr 2  D0 1B                        bne _printing_done
00556Er 2                               ; Next byte
00556Er 2  E6 rr                        inc scratch+3
005570r 2  D0 02                        bne @l1
005572r 2  E6 rr                        inc scratch+4
005574r 2               @l1:
005574r 2                               ; Check for string literal runtime
005574r 2  B2 rr                        lda (scratch+3)
005576r 2               
005576r 2  C9 rr                        cmp #<sliteral_runtime
005578r 2  D0 0F                        bne _printing_done
00557Ar 2                               ; Next byte
00557Ar 2  E6 rr                        inc scratch+3
00557Cr 2  D0 02                        bne @l2
00557Er 2  E6 rr                        inc scratch+4
005580r 2               @l2:
005580r 2  B2 rr                        lda (scratch+3)
005582r 2               
005582r 2  C9 rr                        cmp #>sliteral_runtime
005584r 2  D0 03                        bne _printing_done
005586r 2               
005586r 2                               ; It's a string literal jump.
005586r 2  20 rr rr                     jsr disasm_sliteral_jump
005589r 2               _printing_done:
005589r 2  20 rr rr                     jsr xt_cr
00558Cr 2               
00558Cr 2                               ; Housekeeping: Next byte
00558Cr 2  F6 02                        inc 2,x
00558Er 2  D0 02                        bne @l3
005590r 2  F6 03                        inc 3,x                 ; ( addr+1 u )
005592r 2               @l3:
005592r 2  20 rr rr                     jsr xt_one_minus        ; ( addr+1 u-1 )
005595r 2               
005595r 2  B5 00                        lda 0,x                 ; All done?
005597r 2  15 01                        ora 1,x
005599r 2  F0 07                        beq @done
00559Br 2               
00559Br 2  B5 01                        lda 1,x                 ; Catch mid-instruction ranges
00559Dr 2  30 03                        bmi @done
00559Fr 2               
00559Fr 2  4C rr rr                     jmp _byte_loop          ; out of range for BRA
0055A2r 2               @done:
0055A2r 2                               ; Clean up and leave
0055A2r 2  4C rr rr                     jmp xt_two_drop         ; JSR/RTS
0055A5r 2               
0055A5r 2               ; Handlers for various special disassembled instructions:
0055A5r 2               ; String literal handler (both for inline strings and sliteral)
0055A5r 2               disasm_sliteral_jump:
0055A5r 2                               ; If we get here, we are at the jump for a constant string.
0055A5r 2                               ; Strings are compiled into the dictionary like so:
0055A5r 2                               ;           jmp a
0055A5r 2                               ;           <string data bytes>
0055A5r 2                               ;  a -->    jsr sliteral_runtime
0055A5r 2                               ;           <string address>
0055A5r 2                               ;           <string length>
0055A5r 2                               ;
0055A5r 2                               ; We have ( addr n ) on the stack where addr is the last
0055A5r 2                               ; byte of the address a in the above jmp instruction.
0055A5r 2                               ; Address a is in scratch+1 scratch+2.
0055A5r 2               
0055A5r 2                               ; Determine the distance of the jump so we end on the byte
0055A5r 2                               ; just before the JSR (sets us up for SLITERAL on next loop)
0055A5r 2  20 rr rr                     jsr xt_swap
0055A8r 2  CA                           dex
0055A9r 2  CA                           dex
0055AAr 2  A5 rr                        lda scratch+1
0055ACr 2  95 00                        sta 0,x
0055AEr 2  A5 rr                        lda scratch+2
0055B0r 2  95 01                        sta 1,x
0055B2r 2  20 rr rr                     jsr xt_swap
0055B5r 2  20 rr rr                     jsr xt_minus
0055B8r 2  20 rr rr                     jsr xt_one_minus
0055BBr 2                               ; (n jump_distance)
0055BBr 2                               ; Subtract the jump distance from the bytes left.
0055BBr 2  20 rr rr                     jsr xt_minus
0055BEr 2                               ; ( new_n )
0055BEr 2                               ; Move to one byte before the target address
0055BEr 2  CA                           dex
0055BFr 2  CA                           dex
0055C0r 2  A5 rr                        lda scratch+1
0055C2r 2  95 00                        sta 0,x
0055C4r 2  A5 rr                        lda scratch+2
0055C6r 2  95 01                        sta 1,x
0055C8r 2  20 rr rr                     jsr xt_one_minus
0055CBr 2  20 rr rr                     jsr xt_swap ; ( new_addr new_n )
0055CEr 2  60                           rts
0055CFr 2               
0055CFr 2               ; String literal handler
0055CFr 2               disasm_sliteral:
0055CFr 2  A9 53                        lda #'S'
0055D1r 2  20 rr rr                     jsr emit_a ; Print S before LITERAL so it becomes SLITERAL
0055D4r 2  A9 0D                        lda #str_disasm_lit     ; "LITERAL "
0055D6r 2  20 rr rr                     jsr print_string_no_lf
0055D9r 2               
0055D9r 2                               ; ( addr u ) address of last byte of JSR address and bytes left on the stack.
0055D9r 2                               ; We need to print the two values just after addr and move along two bytes
0055D9r 2                               ; for each value.
0055D9r 2  20 rr rr                     jsr xt_swap             ; switch to (u addr)
0055DCr 2  20 rr rr                     jsr xt_one_plus
0055DFr 2               
0055DFr 2  20 rr rr                     jsr xt_dup
0055E2r 2  20 rr rr                     jsr xt_fetch
0055E5r 2  20 rr rr                     jsr xt_u_dot            ; Print the address of the string
0055E8r 2                               ; Move along two bytes (already moved address one) to skip over the constant.
0055E8r 2  20 rr rr                     jsr xt_two
0055EBr 2  20 rr rr                     jsr xt_plus
0055EEr 2               
0055EEr 2  20 rr rr                     jsr xt_dup
0055F1r 2  20 rr rr                     jsr xt_question         ; Print the length of the string
0055F4r 2                               ; Move along to the very last byte of the data.
0055F4r 2  20 rr rr                     jsr xt_one_plus
0055F7r 2               
0055F7r 2                               ; ( u addr+4 )
0055F7r 2                               ; Fix up the number of bytes left.
0055F7r 2  20 rr rr                     jsr xt_swap            ; ( addr+4 u )
0055FAr 2  CA                           dex
0055FBr 2  CA                           dex
0055FCr 2  A9 04                        lda #4
0055FEr 2  95 00                        sta 0,x
005600r 2  74 01                        stz 1,x
005602r 2  20 rr rr                     jsr xt_minus            ; ( addr+4 u-4 )
005605r 2  60                           rts
005606r 2               
005606r 2               
005606r 2               ; 0BRANCH handler
005606r 2               disasm_0branch:
005606r 2  A9 30                        lda #'0'
005608r 2  20 rr rr                     jsr emit_a ; Print 0 before BRANCH so it becomes 0BRANCH
00560Br 2                               ; All other processing is identical, so fall into BRANCH handler
00560Br 2               ; BRANCH handler
00560Br 2               disasm_branch:
00560Br 2  A9 0F                        lda #str_disasm_bra
00560Dr 2  20 rr rr                     jsr print_string_no_lf ; "BRANCH "
005610r 2                               ; The address after the 0BRANCH is handled the same as a literal.
005610r 2  80 05                        bra disasm_print_literal
005612r 2               
005612r 2               ; Literal handler
005612r 2               disasm_literal:
005612r 2  A9 0D                        lda #str_disasm_lit
005614r 2  20 rr rr                     jsr print_string_no_lf ; "LITERAL "
005617r 2               disasm_print_literal:
005617r 2                               ; ( addr u ) address of last byte of JSR and bytes left on the stack.
005617r 2                               ; We need to print the value just after the address and move along two bytes.
005617r 2  20 rr rr                     jsr xt_swap ; switch to (u addr)
00561Ar 2  20 rr rr                     jsr xt_one_plus
00561Dr 2               
00561Dr 2  20 rr rr                     jsr xt_dup
005620r 2  20 rr rr                     jsr xt_question ; Print the value at the adress
005623r 2                               ; Move along two bytes (already moved address one) to skip over the constant.
005623r 2  20 rr rr                     jsr xt_one_plus
005626r 2  20 rr rr                     jsr xt_swap ; (addr+2 u)
005629r 2  20 rr rr                     jsr xt_one_minus
00562Cr 2  20 rr rr                     jsr xt_one_minus ; (addr+2 u-2)
00562Fr 2  60                           rts
005630r 2               
005630r 2               ; JSR handler
005630r 2               disasm_jsr:
005630r 2                               ; The address of the JSR is in scratch+1 and scratch+2.
005630r 2                               ; The current stack is already ( addr u ) where addr is the address of the last byte of
005630r 2                               ; the JSR target address, and we want to leave it like that so moving on to the next byte
005630r 2                               ; works properly.
005630r 2                               ; Put the target address on the stack and see if it's an XT.
005630r 2  CA                           dex
005631r 2  CA                           dex
005632r 2  A5 rr                        lda scratch+1
005634r 2  95 00                        sta 0,x
005636r 2  A5 rr                        lda scratch+2
005638r 2  95 01                        sta 1,x
00563Ar 2                               ; ( xt )
00563Ar 2  20 rr rr                     jsr xt_int_to_name
00563Dr 2                               ; int>name returns zero if we just don't know.
00563Dr 2  B5 00                        lda 0,x
00563Fr 2  15 01                        ora 1,x
005641r 2  F0 07                        beq _disasm_no_nt
005643r 2                               ; We now have a name token ( nt ) on the stack.
005643r 2                               ; Change it into the name and print it.
005643r 2  20 rr rr                     jsr xt_name_to_string
005646r 2  20 rr rr                     jsr xt_type
005649r 2  60                           rts
00564Ar 2               
00564Ar 2               _disasm_no_nt:
00564Ar 2  20 rr rr                     jsr xt_drop ; the 0 indicating no name token
00564Dr 2                               ; See if the address is between underflow_1 and underflow_4,
00564Dr 2                               ; inclusive.
00564Dr 2  CA                           dex
00564Er 2  CA                           dex
00564Fr 2  A5 rr                        lda scratch+1
005651r 2  95 00                        sta 0,x
005653r 2  A5 rr                        lda scratch+2
005655r 2  95 01                        sta 1,x
005657r 2                               ; ( jsr_address )
005657r 2                               ; Compare to lower underflow address
005657r 2  CA                           dex
005658r 2  CA                           dex
005659r 2  A9 rr                        lda #<underflow_1
00565Br 2  95 00                        sta 0,x
00565Dr 2  A9 rr                        lda #>underflow_1
00565Fr 2  95 01                        sta 1,x
005661r 2  20 rr rr                     jsr compare_16bit
005664r 2  F0 02                        beq _disasm_jsr_uflow_check_upper
005666r 2  B0 14                        bcs _disasm_jsr_unknown
005668r 2               _disasm_jsr_uflow_check_upper:
005668r 2                               ; Compare to upper underflow addresses
005668r 2  A9 rr                        lda #<underflow_4
00566Ar 2  95 00                        sta 0,x
00566Cr 2  A9 rr                        lda #>underflow_4
00566Er 2  95 01                        sta 1,x
005670r 2  20 rr rr                     jsr compare_16bit
005673r 2  F0 02                        beq _disasm_jsr_soc
005675r 2  90 05                        bcc _disasm_jsr_unknown
005677r 2               _disasm_jsr_soc:
005677r 2                               ; It's an underflow check.
005677r 2  A9 0E                        lda #str_disasm_sdc
005679r 2  20 rr rr                     jsr print_string_no_lf  ; "STACK DEPTH CHECK"
00567Cr 2               _disasm_jsr_unknown:
00567Cr 2  20 rr rr                     jsr xt_two_drop
00567Fr 2  60                           rts
005680r 2               
005680r 2               
005680r 2               ; =========================================================
005680r 2               oc_index_table:
005680r 2                       ; Lookup table for the instruction data (length of instruction in
005680r 2                       ; bytes, length of mnemonic in bytes, mnemonic string). This is used by
005680r 2                       ; the assembler as well.
005680r 2               
005680r 2                       ; Opcodes 00-0F
005680r 2  rr rr rr rr          .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
005684r 2  rr rr rr rr  
005688r 2  rr rr rr rr  
005690r 2  rr rr rr rr          .word oc08, oc09, oc0a, oc__, oc0c, oc0d, oc0e, oc0f
005694r 2  rr rr rr rr  
005698r 2  rr rr rr rr  
0056A0r 2               
0056A0r 2                       ; Opcodes 10-1F
0056A0r 2  rr rr rr rr          .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
0056A4r 2  rr rr rr rr  
0056A8r 2  rr rr rr rr  
0056B0r 2  rr rr rr rr          .word oc18, oc19, oc1a, oc__, oc1c, oc1d, oc__, oc1f
0056B4r 2  rr rr rr rr  
0056B8r 2  rr rr rr rr  
0056C0r 2               
0056C0r 2                       ; Opcodes 20-2F
0056C0r 2  rr rr rr rr          .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
0056C4r 2  rr rr rr rr  
0056C8r 2  rr rr rr rr  
0056D0r 2  rr rr rr rr          .word oc28, oc29, oc2a, oc__, oc2c, oc2d, oc2e, oc2f
0056D4r 2  rr rr rr rr  
0056D8r 2  rr rr rr rr  
0056E0r 2               
0056E0r 2                       ; Opcodes 30-3F
0056E0r 2  rr rr rr rr          .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
0056E4r 2  rr rr rr rr  
0056E8r 2  rr rr rr rr  
0056F0r 2  rr rr rr rr          .word oc38, oc39, oc3a, oc__, oc3c, oc3d, oc3e, oc0f
0056F4r 2  rr rr rr rr  
0056F8r 2  rr rr rr rr  
005700r 2               
005700r 2                       ; Opcodes 40-4F
005700r 2  rr rr rr rr          .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
005704r 2  rr rr rr rr  
005708r 2  rr rr rr rr  
005710r 2  rr rr rr rr          .word oc48, oc49, oc4a, oc__, oc4c, oc4d, oc4e, oc4f
005714r 2  rr rr rr rr  
005718r 2  rr rr rr rr  
005720r 2               
005720r 2                       ; Opcodes 50-5F
005720r 2  rr rr rr rr          .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
005724r 2  rr rr rr rr  
005728r 2  rr rr rr rr  
005730r 2  rr rr rr rr          .word oc58, oc59, oc5a, oc__, oc__, oc__, oc5e, oc5f
005734r 2  rr rr rr rr  
005738r 2  rr rr rr rr  
005740r 2               
005740r 2                       ; Opcodes 60-6F
005740r 2  rr rr rr rr          .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
005744r 2  rr rr rr rr  
005748r 2  rr rr rr rr  
005750r 2  rr rr rr rr          .word oc68, oc69, oc6a, oc__, oc6c, oc6d, oc6e, oc6f
005754r 2  rr rr rr rr  
005758r 2  rr rr rr rr  
005760r 2               
005760r 2                       ; Opcodes 70-7F
005760r 2  rr rr rr rr          .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
005764r 2  rr rr rr rr  
005768r 2  rr rr rr rr  
005770r 2  rr rr rr rr          .word oc78, oc79, oc7a, oc__, oc7c, oc7d, oc7e, oc7f
005774r 2  rr rr rr rr  
005778r 2  rr rr rr rr  
005780r 2               
005780r 2                       ; Opcodes 80-8F
005780r 2  rr rr rr rr          .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
005784r 2  rr rr rr rr  
005788r 2  rr rr rr rr  
005790r 2  rr rr rr rr          .word oc88, oc89, oc8a, oc__, oc8c, oc8d, oc8e, oc8f
005794r 2  rr rr rr rr  
005798r 2  rr rr rr rr  
0057A0r 2               
0057A0r 2                       ; Opcodes 90-9F
0057A0r 2  rr rr rr rr          .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
0057A4r 2  rr rr rr rr  
0057A8r 2  rr rr rr rr  
0057B0r 2  rr rr rr rr          .word oc98, oc99, oc9a, oc__, oc9c, oc9d, oc9e, oc9f
0057B4r 2  rr rr rr rr  
0057B8r 2  rr rr rr rr  
0057C0r 2               
0057C0r 2                       ; Opcodes A0-AF
0057C0r 2  rr rr rr rr          .word oca0, oca1, oca2, oc__, oca4, oca5, oca6, oca7
0057C4r 2  rr rr rr rr  
0057C8r 2  rr rr rr rr  
0057D0r 2  rr rr rr rr          .word oca8, oca9, ocaa, oc__, ocac, ocad, ocae, ocaf
0057D4r 2  rr rr rr rr  
0057D8r 2  rr rr rr rr  
0057E0r 2               
0057E0r 2                       ; Opcodes B0-BF
0057E0r 2  rr rr rr rr          .word ocb0, ocb1, ocb2, oc__, ocb4, ocb5, ocb6, ocb7
0057E4r 2  rr rr rr rr  
0057E8r 2  rr rr rr rr  
0057F0r 2  rr rr rr rr          .word ocb8, ocb9, ocba, oc__, ocbc, ocbd, ocbe, ocbf
0057F4r 2  rr rr rr rr  
0057F8r 2  rr rr rr rr  
005800r 2               
005800r 2                       ; Opcodes C0-CF
005800r 2  rr rr rr rr          .word occ0, occ1, oc__, oc__, occ4, occ5, occ6, occ7
005804r 2  rr rr rr rr  
005808r 2  rr rr rr rr  
005810r 2  rr rr rr rr          .word occ8, occ9, occa, oc__, occc, occd, occe, occf
005814r 2  rr rr rr rr  
005818r 2  rr rr rr rr  
005820r 2               
005820r 2                       ; Opcodes D0-DF
005820r 2  rr rr rr rr          .word ocd0, ocd1, ocd2, oc__, oc__, ocd5, ocd6, ocd7
005824r 2  rr rr rr rr  
005828r 2  rr rr rr rr  
005830r 2  rr rr rr rr          .word ocd8, ocd9, ocda, oc__, oc__, ocdd, ocde, ocdf
005834r 2  rr rr rr rr  
005838r 2  rr rr rr rr  
005840r 2               
005840r 2                       ; Opcodes E0-EF
005840r 2  rr rr rr rr          .word oce0, oce1, oc__, oc__, oce4, oce5, oce6, oce7
005844r 2  rr rr rr rr  
005848r 2  rr rr rr rr  
005850r 2  rr rr rr rr          .word oce8, oce9, ocea, oc__, ocec, oced, ocee, ocef
005854r 2  rr rr rr rr  
005858r 2  rr rr rr rr  
005860r 2               
005860r 2                       ; Opcodes F0-FF
005860r 2  rr rr rr rr          .word ocf0, ocf1, ocf2, oc__, oc__, ocf5, ocf6, ocf7
005864r 2  rr rr rr rr  
005868r 2  rr rr rr rr  
005870r 2  rr rr rr rr          .word ocf8, ocf9, ocfa, oc__, oc__, ocfd, ocfe, ocff
005874r 2  rr rr rr rr  
005878r 2  rr rr rr rr  
005880r 2               
005880r 2               
005880r 2               ; =========================================================
005880r 2               oc_table:
005880r 2                       ; Opcode data table for the disassember, which is also used by the
005880r 2                       ; assembler. Each entry starts with a "lengths byte":
005880r 2               
005880r 2                       ;       bit 7-6:  Length of instruction in bytes (1 to 3 for the 65c02)
005880r 2                       ;       bit 5-3:  unused
005880r 2                       ;       bit 2-0:  Length of mnemonic in chars (3 to 7)
005880r 2               
005880r 2                       ; To convert a line in this table to a Forth string of the mnemonic,
005880r 2                       ; use the COUNT word on the address of the lengths byte to get
005880r 2                       ; ( addr u ) and then mask all but the bits 2-0 of the TOS.
005880r 2               
005880r 2                       ; To make debugging easier, we keep the raw numbers for the lengths of
005880r 2                       ; the instruction and mnemonicis and let the assembler do the math
005880r 2                       ; required to shift and add. The actual mnemonic string follows after
005880r 2                       ; and is not zero terminated because we have the length in bits 2 to 0.
005880r 2               
005880r 2  83 62 72 6B  	oc00:	.byte 2*64+3, "brk"              ; enforce the signature byte
005884r 2  87 6F 72 61  	oc01:	.byte 2*64+7, "ora.zxi"
005888r 2  2E 7A 78 69  
00588Cr 2               ;      (oc02)
00588Cr 2               ;      (oc03)
00588Cr 2  85 74 73 62          oc04:   .byte 2*64+5, "tsb.z"
005890r 2  2E 7A        
005892r 2  85 6F 72 61  	oc05:	.byte 2*64+5, "ora.z"
005896r 2  2E 7A        
005898r 2  85 61 73 6C  	oc06:	.byte 2*64+5, "asl.z"
00589Cr 2  2E 7A        
00589Er 2               ;      (oc07)
00589Er 2  43 70 68 70  	oc08:	.byte 1*64+3, "php"
0058A2r 2  85 6F 72 61  	oc09:	.byte 2*64+5, "ora.#"
0058A6r 2  2E 23        
0058A8r 2  45 61 73 6C  	oc0a:	.byte 1*64+5, "asl.a"
0058ACr 2  2E 61        
0058AEr 2               ;      (oc0b)
0058AEr 2  C3 74 73 62  	oc0c:	.byte 3*64+3, "tsb"
0058B2r 2  C3 6F 72 61  	oc0d:	.byte 3*64+3, "ora"
0058B6r 2  C3 61 73 6C  	oc0e:	.byte 3*64+3, "asl"
0058BAr 2  C4 62 62 72  	oc0f:	.byte 3*64+4, "bbr0"
0058BEr 2  30           
0058BFr 2               
0058BFr 2  83 62 70 6C  	oc10:	.byte 2*64+3, "bpl"
0058C3r 2  87 6F 72 61  	oc11:	.byte 2*64+7, "ora.ziy"
0058C7r 2  2E 7A 69 79  
0058CBr 2  86 6F 72 61  	oc12:	.byte 2*64+6, "ora.zi"
0058CFr 2  2E 7A 69     
0058D2r 2               ;      (oc13:)
0058D2r 2  85 74 72 62  	oc14:	.byte 2*64+5, "trb.z"
0058D6r 2  2E 7A        
0058D8r 2  86 6F 72 61  	oc15:	.byte 2*64+6, "ora.zx"
0058DCr 2  2E 7A 78     
0058DFr 2  86 61 73 6C  	oc16:	.byte 2*64+6, "asl.zx"
0058E3r 2  2E 7A 78     
0058E6r 2  86 72 6D 62  	oc17:	.byte 2*64+6, "rmb1.z"
0058EAr 2  31 2E 7A     
0058EDr 2  43 63 6C 63  	oc18:	.byte 1*64+3, "clc"
0058F1r 2  C5 6F 72 61  	oc19:	.byte 3*64+5, "ora.y"
0058F5r 2  2E 79        
0058F7r 2  45 69 6E 63  	oc1a:	.byte 1*64+5, "inc.a"
0058FBr 2  2E 61        
0058FDr 2               ;      (oc1b:)
0058FDr 2  C3 74 72 62  	oc1c:	.byte 3*64+3, "trb"
005901r 2  C5 6F 72 61  	oc1d:	.byte 3*64+5, "ora.x"
005905r 2  2E 78        
005907r 2               ;      (oc1e:)
005907r 2  C5 61 73 6C  	oc1f:	.byte 3*64+5, "asl.x"
00590Br 2  2E 78        
00590Dr 2               
00590Dr 2  C3 6A 73 72  	oc20:	.byte 3*64+3, "jsr"
005911r 2  87 61 6E 64  	oc21:	.byte 2*64+7, "and.zxi"
005915r 2  2E 7A 78 69  
005919r 2               ;      (oc22:)
005919r 2               ;      (oc23:)
005919r 2  85 62 69 74  	oc24:	.byte 2*64+5, "bit.z"
00591Dr 2  2E 7A        
00591Fr 2  85 61 6E 64  	oc25:	.byte 2*64+5, "and.z"
005923r 2  2E 7A        
005925r 2  85 72 6F 6C  	oc26:	.byte 2*64+5, "rol.z"
005929r 2  2E 7A        
00592Br 2  86 72 6D 62  	oc27:	.byte 2*64+6, "rmb2.z"
00592Fr 2  32 2E 7A     
005932r 2  43 70 6C 70  	oc28:	.byte 1*64+3, "plp"
005936r 2  85 61 6E 64  	oc29:	.byte 2*64+5, "and.#"
00593Ar 2  2E 23        
00593Cr 2  45 72 6F 6C  	oc2a:	.byte 1*64+5, "rol.a"
005940r 2  2E 61        
005942r 2               ;      (oc2b:)
005942r 2  C3 62 69 74  	oc2c:	.byte 3*64+3, "bit"
005946r 2  C4 61 6E 64  	oc2d:	.byte 3*64+4, "and."
00594Ar 2  2E           
00594Br 2  C3 72 6F 6C  	oc2e:	.byte 3*64+3, "rol"
00594Fr 2  C4 62 62 72  	oc2f:	.byte 3*64+4, "bbr2"
005953r 2  32           
005954r 2               
005954r 2  83 62 6D 69  	oc30:	.byte 2*64+3, "bmi"
005958r 2  87 61 6E 64  	oc31:	.byte 2*64+7, "and.ziy"
00595Cr 2  2E 7A 69 79  
005960r 2  86 61 6E 64  	oc32:	.byte 2*64+6, "and.zi"
005964r 2  2E 7A 69     
005967r 2               ;      (oc33:)
005967r 2  87 62 69 74  	oc34:	.byte 2*64+7, "bit.zxi"
00596Br 2  2E 7A 78 69  
00596Fr 2  86 61 6E 64  	oc35:	.byte 2*64+6, "and.zx"
005973r 2  2E 7A 78     
005976r 2  86 72 6F 6C  	oc36:	.byte 2*64+6, "rol.zx"
00597Ar 2  2E 7A 78     
00597Dr 2  86 72 6D 62  	oc37:	.byte 2*64+6, "rmb3.z"
005981r 2  33 2E 7A     
005984r 2  43 73 65 63  	oc38:	.byte 1*64+3, "sec"
005988r 2  C5 61 6E 64  	oc39:	.byte 3*64+5, "and.y"
00598Cr 2  2E 79        
00598Er 2  45 64 65 63  	oc3a:	.byte 1*64+5, "dec.a"
005992r 2  2E 61        
005994r 2               ;      (oc3b:)
005994r 2  C5 62 69 74  	oc3c:	.byte 3*64+5, "bit.x"
005998r 2  2E 78        
00599Ar 2  C5 61 6E 64  	oc3d:	.byte 3*64+5, "and.x"
00599Er 2  2E 78        
0059A0r 2  C5 72 6F 6C  	oc3e:	.byte 3*64+5, "rol.x"
0059A4r 2  2E 78        
0059A6r 2  C4 62 62 72  	oc3f:	.byte 3*64+4, "bbr3"
0059AAr 2  33           
0059ABr 2               
0059ABr 2  43 72 74 69  	oc40:	.byte 1*64+3, "rti"
0059AFr 2  87 65 6F 72  	oc41:	.byte 2*64+7, "eor.zxi"
0059B3r 2  2E 7A 78 69  
0059B7r 2               ;      (oc42:)
0059B7r 2               ;      (oc43:)
0059B7r 2               ;      (oc44:)
0059B7r 2  85 65 6F 72  	oc45:	.byte 2*64+5, "eor.z"
0059BBr 2  2E 7A        
0059BDr 2  85 6C 73 72  	oc46:	.byte 2*64+5, "lsr.z"
0059C1r 2  2E 7A        
0059C3r 2  86 72 62 6D  	oc47:	.byte 2*64+6, "rbm4.z"
0059C7r 2  34 2E 7A     
0059CAr 2  43 70 68 61  	oc48:	.byte 1*64+3, "pha"
0059CEr 2  85 65 6F 72  	oc49:	.byte 2*64+5, "eor.#"
0059D2r 2  2E 23        
0059D4r 2  45 6C 73 72  	oc4a:	.byte 1*64+5, "lsr.a"
0059D8r 2  2E 61        
0059DAr 2               ;      (oc4b:)
0059DAr 2  C3 6A 6D 70  	oc4c:	.byte 3*64+3, "jmp"
0059DEr 2  C3 65 6F 72  	oc4d:	.byte 3*64+3, "eor"
0059E2r 2  C3 6C 73 72  	oc4e:	.byte 3*64+3, "lsr"
0059E6r 2  C4 62 62 72  	oc4f:	.byte 3*64+4, "bbr4"
0059EAr 2  34           
0059EBr 2               
0059EBr 2  83 62 76 63  	oc50:	.byte 2*64+3, "bvc"
0059EFr 2  87 65 6F 72  	oc51:	.byte 2*64+7, "eor.ziy"
0059F3r 2  2E 7A 69 79  
0059F7r 2  86 65 6F 72  	oc52:	.byte 2*64+6, "eor.zi"
0059FBr 2  2E 7A 69     
0059FEr 2               ;      (oc53:)
0059FEr 2               ;      (oc54:)
0059FEr 2  86 65 6F 72  	oc55:	.byte 2*64+6, "eor.zx"
005A02r 2  2E 7A 78     
005A05r 2  86 6C 73 72  	oc56:	.byte 2*64+6, "lsr.zx"
005A09r 2  2E 7A 78     
005A0Cr 2  86 72 62 6D  	oc57:	.byte 2*64+6, "rbm5.z"
005A10r 2  35 2E 7A     
005A13r 2  43 63 6C 69  	oc58:	.byte 1*64+3, "cli"
005A17r 2  C5 65 6F 72  	oc59:	.byte 3*64+5, "eor.y"
005A1Br 2  2E 79        
005A1Dr 2  43 70 68 79  	oc5a:	.byte 1*64+3, "phy"
005A21r 2               ;      (oc5b:)
005A21r 2               ;      (oc5c:)
005A21r 2  C5 65 6F 72  	oc5d:	.byte 3*64+5, "eor.x"
005A25r 2  2E 78        
005A27r 2  C5 6C 73 72  	oc5e:	.byte 3*64+5, "lsr.x"
005A2Br 2  2E 78        
005A2Dr 2  C4 62 62 72  	oc5f:	.byte 3*64+4, "bbr5"
005A31r 2  35           
005A32r 2               
005A32r 2  43 72 74 73  	oc60:	.byte 1*64+3, "rts"
005A36r 2  87 61 64 63  	oc61:	.byte 2*64+7, "adc.zxi"
005A3Ar 2  2E 7A 78 69  
005A3Er 2               ;      (oc62:)
005A3Er 2               ;      (oc63:)
005A3Er 2  85 73 74 7A  	oc64:	.byte 2*64+5, "stz.z"
005A42r 2  2E 7A        
005A44r 2  85 61 64 63  	oc65:	.byte 2*64+5, "adc.z"
005A48r 2  2E 7A        
005A4Ar 2  85 72 6F 72  	oc66:	.byte 2*64+5, "ror.z"
005A4Er 2  2E 7A        
005A50r 2  86 72 6D 62  	oc67:	.byte 2*64+6, "rmb6.z"
005A54r 2  36 2E 7A     
005A57r 2  43 70 6C 61  	oc68:	.byte 1*64+3, "pla"
005A5Br 2  85 61 64 63  	oc69:	.byte 2*64+5, "adc.#"
005A5Fr 2  2E 23        
005A61r 2  45 72 6F 72  	oc6a:	.byte 1*64+5, "ror.a"
005A65r 2  2E 61        
005A67r 2               ;      (oc6b:)
005A67r 2  C5 6A 6D 70  	oc6c:	.byte 3*64+5, "jmp.i"
005A6Br 2  2E 69        
005A6Dr 2  C3 61 64 63  	oc6d:	.byte 3*64+3, "adc"
005A71r 2  C3 72 6F 72  	oc6e:	.byte 3*64+3, "ror"
005A75r 2  C4 62 62 72  	oc6f:	.byte 3*64+4, "bbr6"
005A79r 2  36           
005A7Ar 2               
005A7Ar 2  83 62 76 73  	oc70:	.byte 2*64+3, "bvs"
005A7Er 2  87 61 64 63  	oc71:	.byte 2*64+7, "adc.ziy"
005A82r 2  2E 7A 69 79  
005A86r 2  86 61 64 63  	oc72:	.byte 2*64+6, "adc.zi"
005A8Ar 2  2E 7A 69     
005A8Dr 2               ;      (oc73:)
005A8Dr 2  86 73 74 7A  	oc74:	.byte 2*64+6, "stz.zx"
005A91r 2  2E 7A 78     
005A94r 2  86 61 64 63  	oc75:	.byte 2*64+6, "adc.zx"
005A98r 2  2E 7A 78     
005A9Br 2  86 72 6F 72  	oc76:	.byte 2*64+6, "ror.zx"
005A9Fr 2  2E 7A 78     
005AA2r 2  86 72 6D 62  	oc77:	.byte 2*64+6, "rmb7.z"
005AA6r 2  37 2E 7A     
005AA9r 2  43 73 65 69  	oc78:	.byte 1*64+3, "sei"
005AADr 2  C5 61 64 63  	oc79:	.byte 3*64+5, "adc.y"
005AB1r 2  2E 79        
005AB3r 2  43 70 6C 79  	oc7a:	.byte 1*64+3, "ply"
005AB7r 2               ;      (oc7b:)
005AB7r 2  C6 6A 6D 70  	oc7c:	.byte 3*64+6, "jmp.xi"
005ABBr 2  2E 78 69     
005ABEr 2  C5 61 64 63  	oc7d:	.byte 3*64+5, "adc.x"
005AC2r 2  2E 78        
005AC4r 2  C5 72 6F 72  	oc7e:	.byte 3*64+5, "ror.x"
005AC8r 2  2E 78        
005ACAr 2  C4 62 62 72  	oc7f:	.byte 3*64+4, "bbr7"
005ACEr 2  37           
005ACFr 2               
005ACFr 2  83 62 72 61  	oc80:	.byte 2*64+3, "bra"
005AD3r 2  87 73 74 61  	oc81:	.byte 2*64+7, "sta.zxi"
005AD7r 2  2E 7A 78 69  
005ADBr 2               ;      (oc82:)
005ADBr 2               ;      (oc83:)
005ADBr 2  85 73 74 79  	oc84:	.byte 2*64+5, "sty.z"
005ADFr 2  2E 7A        
005AE1r 2  85 73 74 61  	oc85:	.byte 2*64+5, "sta.z"
005AE5r 2  2E 7A        
005AE7r 2  85 73 74 78  	oc86:	.byte 2*64+5, "stx.z"
005AEBr 2  2E 7A        
005AEDr 2               ;      (oc87:)
005AEDr 2  43 64 65 79  	oc88:	.byte 1*64+3, "dey"
005AF1r 2  85 62 69 74  	oc89:	.byte 2*64+5, "bit.#"
005AF5r 2  2E 23        
005AF7r 2  43 74 78 61  	oc8a:	.byte 1*64+3, "txa"
005AFBr 2               ;      (oc8b:)
005AFBr 2  C3 73 74 79  	oc8c:	.byte 3*64+3, "sty"
005AFFr 2  C3 73 74 61  	oc8d:	.byte 3*64+3, "sta"
005B03r 2  C3 73 74 78  	oc8e:	.byte 3*64+3, "stx"
005B07r 2  C4 62 62 73  	oc8f:	.byte 3*64+4, "bbs0"
005B0Br 2  30           
005B0Cr 2               
005B0Cr 2  83 62 63 63  	oc90:	.byte 2*64+3, "bcc"
005B10r 2  87 73 74 61  	oc91:	.byte 2*64+7, "sta.ziy"
005B14r 2  2E 7A 69 79  
005B18r 2  86 73 74 61  	oc92:	.byte 2*64+6, "sta.zi"
005B1Cr 2  2E 7A 69     
005B1Fr 2               ;      (oc93:)
005B1Fr 2  86 73 74 79  	oc94:	.byte 2*64+6, "sty.zx"
005B23r 2  2E 7A 78     
005B26r 2  86 73 74 61  	oc95:	.byte 2*64+6, "sta.zx"
005B2Ar 2  2E 7A 78     
005B2Dr 2  86 73 74 78  	oc96:	.byte 2*64+6, "stx.zy"
005B31r 2  2E 7A 79     
005B34r 2  86 73 6D 62  	oc97:	.byte 2*64+6, "smb1.z"
005B38r 2  31 2E 7A     
005B3Br 2  43 74 79 61  	oc98:	.byte 1*64+3, "tya"
005B3Fr 2  C5 73 74 61  	oc99:	.byte 3*64+5, "sta.y"
005B43r 2  2E 79        
005B45r 2  43 74 78 73  	oc9a:	.byte 1*64+3, "txs"
005B49r 2               ;      (oc9b:)
005B49r 2  C3 73 74 7A  	oc9c:	.byte 3*64+3, "stz"
005B4Dr 2  C5 73 74 61  	oc9d:	.byte 3*64+5, "sta.x"
005B51r 2  2E 78        
005B53r 2  C5 73 74 7A  	oc9e:	.byte 3*64+5, "stz.x"
005B57r 2  2E 78        
005B59r 2  C4 62 62 73  	oc9f:	.byte 3*64+4, "bbs1"
005B5Dr 2  31           
005B5Er 2               
005B5Er 2  85 6C 64 79  	oca0:	.byte 2*64+5, "ldy.#"
005B62r 2  2E 23        
005B64r 2  87 6C 64 61  	oca1:	.byte 2*64+7, "lda.zxi"
005B68r 2  2E 7A 78 69  
005B6Cr 2  85 6C 64 78  	oca2:	.byte 2*64+5, "ldx.#"
005B70r 2  2E 23        
005B72r 2               ;      (oca3:)
005B72r 2  85 6C 64 79  	oca4:	.byte 2*64+5, "ldy.z"
005B76r 2  2E 7A        
005B78r 2  85 6C 64 61  	oca5:	.byte 2*64+5, "lda.z"
005B7Cr 2  2E 7A        
005B7Er 2  85 6C 64 78  	oca6:	.byte 2*64+5, "ldx.z"
005B82r 2  2E 7A        
005B84r 2  86 73 6D 62  	oca7:	.byte 2*64+6, "smb2.z"
005B88r 2  32 2E 7A     
005B8Br 2  43 74 61 79  	oca8:	.byte 1*64+3, "tay"
005B8Fr 2  85 6C 64 61  	oca9:	.byte 2*64+5, "lda.#"
005B93r 2  2E 23        
005B95r 2  43 74 61 78  	ocaa:	.byte 1*64+3, "tax"
005B99r 2               ;      (ocab:)
005B99r 2  C3 6C 64 79  	ocac:	.byte 3*64+3, "ldy"
005B9Dr 2  C3 6C 64 61  	ocad:	.byte 3*64+3, "lda"
005BA1r 2  C3 6C 64 78  	ocae:	.byte 3*64+3, "ldx"
005BA5r 2  C4 62 62 73  	ocaf:	.byte 3*64+4, "bbs2"
005BA9r 2  32           
005BAAr 2               
005BAAr 2  83 62 63 73  	ocb0:	.byte 2*64+3, "bcs"
005BAEr 2  87 6C 64 61  	ocb1:	.byte 2*64+7, "lda.ziy"
005BB2r 2  2E 7A 69 79  
005BB6r 2  86 6C 64 61  	ocb2:	.byte 2*64+6, "lda.zi"
005BBAr 2  2E 7A 69     
005BBDr 2               ;      (ocb3:)
005BBDr 2  86 6C 64 79  	ocb4:	.byte 2*64+6, "ldy.zx"
005BC1r 2  2E 7A 78     
005BC4r 2  86 6C 64 61  	ocb5:	.byte 2*64+6, "lda.zx"
005BC8r 2  2E 7A 78     
005BCBr 2  86 6C 64 78  	ocb6:	.byte 2*64+6, "ldx.zy"
005BCFr 2  2E 7A 79     
005BD2r 2  86 73 6D 62  	ocb7:	.byte 2*64+6, "smb3.z"
005BD6r 2  33 2E 7A     
005BD9r 2  43 63 6C 76  	ocb8:	.byte 1*64+3, "clv"
005BDDr 2  C5 6C 64 61  	ocb9:	.byte 3*64+5, "lda.y"
005BE1r 2  2E 79        
005BE3r 2  43 74 73 78  	ocba:	.byte 1*64+3, "tsx"
005BE7r 2               ;      (ocbb:)
005BE7r 2  C5 6C 64 79  	ocbc:	.byte 3*64+5, "ldy.x"
005BEBr 2  2E 78        
005BEDr 2  C5 6C 64 61  	ocbd:	.byte 3*64+5, "lda.x"
005BF1r 2  2E 78        
005BF3r 2  C5 6C 64 78  	ocbe:	.byte 3*64+5, "ldx.y"
005BF7r 2  2E 79        
005BF9r 2  C4 62 62 73  	ocbf:	.byte 3*64+4, "bbs4"
005BFDr 2  34           
005BFEr 2               
005BFEr 2  85 63 70 79  	occ0:	.byte 2*64+5, "cpy.#"
005C02r 2  2E 23        
005C04r 2  87 63 6D 70  	occ1:	.byte 2*64+7, "cmp.zxi"
005C08r 2  2E 7A 78 69  
005C0Cr 2               ;      (occ2:)
005C0Cr 2               ;      (occ3:)
005C0Cr 2  85 63 70 79  	occ4:	.byte 2*64+5, "cpy.z"
005C10r 2  2E 7A        
005C12r 2  85 63 6D 70  	occ5:	.byte 2*64+5, "cmp.z"
005C16r 2  2E 7A        
005C18r 2  85 64 65 63  	occ6:	.byte 2*64+5, "dec.z"
005C1Cr 2  2E 7A        
005C1Er 2  86 73 6D 62  	occ7:	.byte 2*64+6, "smb4.z"
005C22r 2  34 2E 7A     
005C25r 2  43 69 6E 79  	occ8:	.byte 1*64+3, "iny"
005C29r 2  85 63 6D 70  	occ9:	.byte 2*64+5, "cmp.#"
005C2Dr 2  2E 23        
005C2Fr 2  43 64 65 78  	occa:	.byte 1*64+3, "dex"
005C33r 2               ;      (occb:)
005C33r 2  C3 63 70 79  	occc:	.byte 3*64+3, "cpy"
005C37r 2  C3 63 6D 70  	occd:	.byte 3*64+3, "cmp"
005C3Br 2  C3 64 65 63  	occe:	.byte 3*64+3, "dec"
005C3Fr 2  C4 62 62 73  	occf:	.byte 3*64+4, "bbs4"
005C43r 2  34           
005C44r 2               
005C44r 2  83 62 6E 65  	ocd0:	.byte 2*64+3, "bne"
005C48r 2  87 63 6D 70  	ocd1:	.byte 2*64+7, "cmp.ziy"
005C4Cr 2  2E 7A 69 79  
005C50r 2  86 63 6D 70  	ocd2:	.byte 2*64+6, "cmp.zi"
005C54r 2  2E 7A 69     
005C57r 2               ;      (ocd3:)
005C57r 2               ;      (ocd4:)
005C57r 2  86 63 6D 70  	ocd5:	.byte 2*64+6, "cmp.zx"
005C5Br 2  2E 7A 78     
005C5Er 2  86 64 65 63  	ocd6:	.byte 2*64+6, "dec.zx"
005C62r 2  2E 7A 78     
005C65r 2  86 73 6D 62  	ocd7:	.byte 2*64+6, "smb5.z"
005C69r 2  35 2E 7A     
005C6Cr 2  43 63 6C 64  	ocd8:	.byte 1*64+3, "cld"
005C70r 2  C5 63 6D 70  	ocd9:	.byte 3*64+5, "cmp.y"
005C74r 2  2E 79        
005C76r 2  43 70 68 78  	ocda:	.byte 1*64+3, "phx"
005C7Ar 2               ;      (ocdb:)
005C7Ar 2               ;      (ocdc:)
005C7Ar 2  C5 63 6D 70  	ocdd:	.byte 3*64+5, "cmp.x"
005C7Er 2  2E 78        
005C80r 2  C5 64 65 63  	ocde:	.byte 3*64+5, "dec.x"
005C84r 2  2E 78        
005C86r 2  C4 62 62 73  	ocdf:	.byte 3*64+4, "bbs5"
005C8Ar 2  35           
005C8Br 2               
005C8Br 2  85 63 70 78  	oce0:	.byte 2*64+5, "cpx.#"
005C8Fr 2  2E 23        
005C91r 2  87 73 62 63  	oce1:	.byte 2*64+7, "sbc.zxi"
005C95r 2  2E 7A 78 69  
005C99r 2               ;      (oce2:)
005C99r 2               ;      (oce3:)
005C99r 2  85 63 70 78  	oce4:	.byte 2*64+5, "cpx.z"
005C9Dr 2  2E 7A        
005C9Fr 2  85 73 62 63  	oce5:	.byte 2*64+5, "sbc.z"
005CA3r 2  2E 7A        
005CA5r 2  85 69 6E 63  	oce6:	.byte 2*64+5, "inc.z"
005CA9r 2  2E 7A        
005CABr 2  86 73 6D 62  	oce7:	.byte 2*64+6, "smb6.z"
005CAFr 2  36 2E 7A     
005CB2r 2  43 69 6E 78  	oce8:	.byte 1*64+3, "inx"
005CB6r 2  85 73 62 63  	oce9:	.byte 2*64+5, "sbc.#"
005CBAr 2  2E 23        
005CBCr 2  43 6E 6F 70  	ocea:	.byte 1*64+3, "nop"
005CC0r 2               ;      (oceb:)
005CC0r 2  C3 63 70 78  	ocec:	.byte 3*64+3, "cpx"
005CC4r 2  C3 73 62 63  	oced:	.byte 3*64+3, "sbc"
005CC8r 2  C3 69 6E 63  	ocee:	.byte 3*64+3, "inc"
005CCCr 2  C4 62 62 73  	ocef:	.byte 3*64+4, "bbs6"
005CD0r 2  36           
005CD1r 2               
005CD1r 2  83 62 65 71  	ocf0:	.byte 2*64+3, "beq"
005CD5r 2  87 73 62 63  	ocf1:	.byte 2*64+7, "sbc.ziy"
005CD9r 2  2E 7A 69 79  
005CDDr 2  86 73 62 63  	ocf2:	.byte 2*64+6, "sbc.zi"
005CE1r 2  2E 7A 69     
005CE4r 2               ;      (ocf3:)
005CE4r 2               ;      (ocf4:)
005CE4r 2  86 73 62 63  	ocf5:	.byte 2*64+6, "sbc.zx"
005CE8r 2  2E 7A 78     
005CEBr 2  86 69 6E 63  	ocf6:	.byte 2*64+6, "inc.zx"
005CEFr 2  2E 7A 78     
005CF2r 2  86 73 6D 62  	ocf7:	.byte 2*64+6, "smb7.z"
005CF6r 2  37 2E 7A     
005CF9r 2  43 73 65 64  	ocf8:	.byte 1*64+3, "sed"
005CFDr 2  C5 73 62 63  	ocf9:	.byte 3*64+5, "sbc.y"
005D01r 2  2E 79        
005D03r 2  43 70 6C 78  	ocfa:	.byte 1*64+3, "plx"
005D07r 2               ;      (ocfb:)
005D07r 2               ;      (ocfc:)
005D07r 2  C5 73 62 63  	ocfd:	.byte 3*64+5, "sbc.x"
005D0Br 2  2E 78        
005D0Dr 2  C5 69 6E 63  	ocfe:	.byte 3*64+5, "inc.x"
005D11r 2  2E 78        
005D13r 2  C4 62 62 73  	ocff:	.byte 3*64+4, "bbs7"
005D17r 2  37           
005D18r 2               
005D18r 2                       ; Common routine for opcodes that are not supported by the 65c02
005D18r 2  01 3F        	oc__:	.byte 1, "?"
005D1Ar 2               
005D1Ar 2               ; used to calculate size of assembled disassembler code
005D1Ar 2               disassembler_end:
005D1Ar 2               
005D1Ar 1               .endif
005D1Ar 1               
005D1Ar 1               platform_bye:
005D1Ar 1               kernel_init:
005D1Ar 1               .ifdef VIA1_BASE
005D1Ar 1  A9 FF            lda #$FF
005D1Cr 1  8D 82 FF         sta DDRB
005D1Fr 1  8D 83 FF         sta DDRA
005D22r 1  A9 01            lda #1
005D24r 1  8D 80 FF         sta PORTB
005D27r 1  9C 81 FF         stz PORTA
005D2Ar 1               .endif
005D2Ar 1               
005D2Ar 1  20 rr rr     jsr acia_init
005D2Dr 1               .ifdef timer_init
005D2Dr 1  20 rr rr         jsr timer_init
005D30r 1               .endif
005D30r 1               .ifdef video_init
005D30r 1                   jsr video_init
005D30r 1               .endif
005D30r 1               .ifdef ps2_init
005D30r 1                   jsr ps2_init
005D30r 1               .endif
005D30r 1               .ifdef cf_init
005D30r 1  20 rr rr         jsr cf_init
005D33r 1               .endif
005D33r 1               .ifdef lcd_init
005D33r 1  20 rr rr         jsr lcd_init
005D36r 1               .endif
005D36r 1               .ifdef spi_init
005D36r 1  20 rr rr         jsr spi_init
005D39r 1               .endif
005D39r 1               .ifdef kb_init
005D39r 1                   jsr kb_init
005D39r 1               .endif
005D39r 1               
005D39r 1  DA A2 00 BD      printascii welcome_message
005D3Dr 1  rr rr F0 06  
005D41r 1  20 rr rr E8  
005D48r 1               
005D48r 1                   ; lda #<dictionary
005D48r 1                   ; sta util_tmp
005D48r 1                   ; lda #>dictionary
005D48r 1                   ; sta util_tmp + 1
005D48r 1               
005D48r 1                   ; jsr calculate_free_mem
005D48r 1                   ; lda tmp_var + 1
005D48r 1                   ; ldx tmp_var
005D48r 1                   ; jsr print16
005D48r 1               
005D48r 1                   ; printascii free_message
005D48r 1               
005D48r 1               
005D48r 1  4C rr rr         jmp forth
005D4Br 1               
005D4Br 1               v_nmi:
005D4Br 1               
005D4Br 1                   ; jsr calculate_free_mem
005D4Br 1                   ; lda tmp_var + 1
005D4Br 1                   ; ldx tmp_var
005D4Br 1                   ; jsr print16
005D4Br 1               
005D4Br 1                   ; printascii free_message
005D4Br 1  DA A2 00 BD      printascii ready_message
005D4Fr 1  rr rr F0 06  
005D53r 1  20 rr rr E8  
005D5Ar 1               
005D5Ar 1  4C rr rr         jmp xt_abort
005D5Dr 1               
005D5Dr 1               
005D5Dr 1               
005D5Dr 1               .ifdef io_read_sector_address
005D5Dr 1               io_read_sector:
005D5Dr 1  4C rr rr         jmp io_read_sector_address        ; jump to read sector routine
005D60r 1               
005D60r 1               io_write_sector:
005D60r 1  4C rr rr         jmp io_write_sector_address        ; jump to read sector routine
005D63r 1               .endif
005D63r 1               
005D63r 1               
005D63r 1               kernel_putc:
005D63r 1                   ; """Print a single character to the console. """
005D63r 1                   ;; Send_Char - send character in A out serial port.
005D63r 1                   ;; Uses: A (original value restored)
005D63r 1               send_char:
005D63r 1  48               pha
005D64r 1                   .ifdef char_out
005D64r 1                   jsr char_out
005D64r 1                   .endif
005D64r 1                   .ifdef acia_out
005D64r 1  20 rr rr         jsr acia_out
005D67r 1                   .endif
005D67r 1               send_char_exit:
005D67r 1               .ifdef lcd_print
005D67r 1  20 rr rr         jsr lcd_print
005D6Ar 1               .endif
005D6Ar 1  68               pla
005D6Br 1  60               rts
005D6Cr 1               
005D6Cr 1               
005D6Cr 1                       ;; Get_Char - get a character from the serial port into A.
005D6Cr 1                       ;; Set the carry flag if char is valid.
005D6Cr 1                       ;; Return immediately with carry flag clear if no char available.
005D6Cr 1                       ;; Uses: A (return value)
005D6Cr 1               
005D6Cr 1               Get_Char:
005D6Cr 1  20 rr rr         jsr acia_getc
005D6Fr 1  90 01            bcc get_ps2_char                ; check keyboard buffer if nothing from ACIA
005D71r 1                                                   ; Carry is set to show we got a character
005D71r 1  60               rts                             ; Return
005D72r 1               
005D72r 1               get_ps2_char:                       ; no ACIA char available, try to get from KB buffer
005D72r 1               .ifdef ps2_get_char
005D72r 1                   jsr ps2_get_char
005D72r 1               .endif
005D72r 1  90 01            bcc get_kb_char
005D74r 1  60               rts
005D75r 1               get_kb_char:
005D75r 1               .ifdef kb_get_char
005D75r 1                   jsr kb_get_char
005D75r 1               .endif
005D75r 1               exit:                         ; Indicate no char available.
005D75r 1  60               rts                             ; return
005D76r 1               
005D76r 1               kernel_getc:
005D76r 1                   ; """Get a single character from the keyboard (waits for key).
005D76r 1                   ; """
005D76r 1                   ;; Get_Char_Wait - same as Get_Char only blocking.
005D76r 1                   ;; Uses: A (return value)
005D76r 1               Get_Char_Wait:
005D76r 1  20 rr rr         jsr Get_Char
005D79r 1  90 FB            bcc Get_Char_Wait
005D7Br 1  60               rts
005D7Cr 1               
005D7Cr 1               
005D7Cr 1               v_irq:                          ; IRQ handler
005D7Cr 1  48                   pha
005D7Dr 1  5A                   phy
005D7Er 1                       ; lda #'.'
005D7Er 1                       ; jsr kernel_putc
005D7Er 1                       ; check if bit 7 of IFR is set
005D7Er 1               .ifdef IFR
005D7Er 1  AD 8D FF             lda IFR
005D81r 1  10 0B                bpl irq_not_from_via  ; Interrupt not from VIA, exit
005D83r 1               
005D83r 1  29 08                and #$08        ; ps2 has priority
005D85r 1  D0 07                bne v_irq_ps2
005D87r 1  AD 8D FF             lda IFR
005D8Ar 1  29 40                and #$40
005D8Cr 1  D0 02                bne v_irq_timer
005D8Er 1               irq_not_from_via:
005D8Er 1               .endif
005D8Er 1               .ifdef KB_IFR
005D8Er 1               v_kb_irq:
005D8Er 1                       lda KB_IFR
005D8Er 1                       bpl v_irq_exit
005D8Er 1                       and #$40
005D8Er 1                       bne v_kb_irq_timer
005D8Er 1                       bra v_irq_exit
005D8Er 1               .endif
005D8Er 1               
005D8Er 1               v_irq_ps2:
005D8Er 1                   .ifdef ps2_irq
005D8Er 1                       lda time
005D8Er 1                       sta last_ps2_time
005D8Er 1                       lda time+1
005D8Er 1                       sta last_ps2_time+1
005D8Er 1                       lda time+2
005D8Er 1                       sta last_ps2_time+2
005D8Er 1                       lda time+3
005D8Er 1                       sta last_ps2_time+3
005D8Er 1               
005D8Er 1                       jsr ps2_irq
005D8Er 1               
005D8Er 1                   .endif
005D8Er 1  80 27                bra v_irq_exit
005D90r 1               
005D90r 1               .ifdef T1CL
005D90r 1               v_irq_timer:
005D90r 1  AD 84 FF             lda T1CL
005D93r 1                       ; clear timer interrupt
005D93r 1                   .ifdef timer_irq
005D93r 1  20 rr rr             jsr timer_irq
005D96r 1                   .endif
005D96r 1  20 rr rr             jsr Get_Char ; Check if a char is waiting to be able to break on CTRL-C
005D99r 1                       ; check if there is a char waiting to be printed to the lcd
005D99r 1                       ; lda lcd_char
005D99r 1                       ; beq v_exit
005D99r 1                       ; jsr lcd_print
005D99r 1                       ; stz lcd_char
005D99r 1               
005D99r 1               
005D99r 1  90 1C                bcc v_irq_exit      ; no character waiting, exit normally
005D9Br 1  C9 03                cmp #$03            ; check if CTRL-C
005D9Dr 1  D0 18                bne v_irq_exit      ; not CTRL-C, exit normally
005D9Fr 1  DA A2 00 BD          printascii abort_message    ; was a CTRL_C
005DA3r 1  rr rr F0 06  
005DA7r 1  20 rr rr E8  
005DAEr 1  7A                   ply                         ; pull what the ISR pushed
005DAFr 1  68                   pla
005DB0r 1  28                   plp                         ; pull status register
005DB1r 1  68                   pla                         ; pull return address
005DB2r 1  68                   pla
005DB3r 1               
005DB3r 1  58                   cli                         ; clear interrupt disabled bit
005DB4r 1  4C rr rr             jmp xt_abort
005DB7r 1               
005DB7r 1               .endif
005DB7r 1               v_kb_irq_timer:
005DB7r 1               .ifdef kb_time
005DB7r 1                   lda KB_T1CL ; clear timer interrupt
005DB7r 1                   inc kb_time
005DB7r 1                   bne v_irq_exit
005DB7r 1               
005DB7r 1               .endif
005DB7r 1                   ;jsr kb_scan
005DB7r 1               v_irq_exit:
005DB7r 1  7A               ply
005DB8r 1  68               pla
005DB9r 1  40               rti
005DBAr 1               
005DBAr 1  20 62 79 74  free_message: .byte " bytes free", $0D, 0
005DBEr 1  65 73 20 66  
005DC2r 1  72 65 65 0D  
005DC7r 1  52 65 61 64  ready_message: .byte "Ready", $0D, 0
005DCBr 1  79 0D 00     
005DCEr 1  57 65 6C 63  welcome_message: .byte "Welcome to Planck 6502", $0D, "Type 'words' for available words", $0D, 0
005DD2r 1  6F 6D 65 20  
005DD6r 1  74 6F 20 50  
005E07r 1  0D 0A 00     abort_message: .byte AscCR, AscLF, 0
005E0Ar 1               
005E0Ar 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        .word v_nmi
000002r 1  rr rr        .word v_reset
000004r 1  rr rr        .word v_irq
000004r 1               
