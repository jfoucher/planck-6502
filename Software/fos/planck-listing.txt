ca65 V2.18 - N/A
Main file   : platform/planck/main.s
Current file: platform/planck/main.s

000000r 1               CLOCK_SPEED = 24000000
000000r 1               
000000r 1               ram_end = $8000
000000r 1               
000000r 1               .include "drivers/acia.inc"
000000r 2               ACIA_BASE   = $FFE0
000000r 2               ACIA_DATA = ACIA_BASE
000000r 2               ACIA_STATUS = ACIA_BASE + 1
000000r 2               ACIA_CMD = ACIA_BASE + 2
000000r 2               ACIA_CTRL = ACIA_BASE + 3
000000r 2               
000000r 2               
000000r 1               .include "drivers/via.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               VIA1_BASE   = $FF80
000000r 2               PORTB = VIA1_BASE
000000r 2               PORTA  = VIA1_BASE+1
000000r 2               DDRB = VIA1_BASE+2
000000r 2               DDRA = VIA1_BASE+3
000000r 2               
000000r 2               
000000r 2               T1CL = VIA1_BASE + 4
000000r 2               T1CH = VIA1_BASE + 5
000000r 2               T1LL = VIA1_BASE + 6
000000r 2               T1LH = VIA1_BASE + 7
000000r 2               ACR = VIA1_BASE + 11
000000r 2               PCR = VIA1_BASE + 12
000000r 2               IFR = VIA1_BASE + 13
000000r 2               IER = VIA1_BASE + 14
000000r 2               
000000r 1               .include "drivers/ps2.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               DATA = $80   ; Data is in bit 7 of PORTA
000000r 2               ; clock is on CA2
000000r 2               SHIFT = $1
000000r 2               ALT = $2
000000r 2               
000000r 2               KB_STATE_START = $0
000000r 2               KB_STATE_DATA = $1
000000r 2               KB_STATE_PARITY = $2
000000r 2               KB_STATE_STOP = $3
000000r 2               
000000r 2               KB_INIT_STATE_RESET = $0
000000r 2               KB_INIT_STATE_RESET_ACK = $1
000000r 2               KB_INIT_STATE_LEDS = $2
000000r 2               KB_INIT_STATE_LEDS_ACK = $3
000000r 2               KB_INIT_STATE_LEDS_DATA = $4
000000r 2               KB_INIT_STATE_LEDS_DATA_ACK = $5
000000r 2               
000000r 2               LSHIFT_KEY = $12
000000r 2               RSHIFT_KEY = $59
000000r 2               
000000r 2               TIMER_DELAY = $C4
000000r 2               
000000r 2               
000000r 1               .include "drivers/4004.inc"
000000r 2               
000000r 2               ; HD 44780 driver
000000r 2               ; all pins on VIA PORTA, 4 bit mode
000000r 2               
000000r 2               ; PORTA0 is free
000000r 2               LCD_BASE = $FFC0
000000r 2               LCD_RS = 1
000000r 2               LCD_E1 = 2
000000r 2               LCD_E2 = 4
000000r 2               
000000r 2               LCD_DATA = LCD_BASE | LCD_RS
000000r 2               LCD_ADDR = LCD_BASE & ($FF ^ LCD_RS)
000000r 2               LCD1_ENABLED = (LCD_BASE | LCD_E1)
000000r 2               LCD2_ENABLED = (LCD_BASE | LCD_E2)
000000r 2               LCD_DISABLED = LCD_BASE
000000r 2               ; A0: RS
000000r 2               ; A1: E1
000000r 2               ; A2: E2
000000r 2               
000000r 1               ; .include "drivers/lcd.inc"
000000r 1               .include "drivers/vga.inc"
000000r 2               VIDEO_BASE = $FFB0
000000r 2               
000000r 2               VIDEO_CTRL = VIDEO_BASE       ;// Formatted as follows |INCR_5|INCR_4|INCR_3|INCR_2|INCR_1|INCR_0|MODE_1|MODE_0|  default to LORES
000000r 2               VIDEO_ADDR_LOW = VIDEO_BASE + 1   ;// also contains the increment ||||ADDR4|ADDR_3|ADDR_2|ADDR_1|ADDR_0|
000000r 2               VIDEO_ADDR_HIGH = VIDEO_BASE + 2
000000r 2               VIDEO_DATA = VIDEO_BASE + 3
000000r 2               VIDEO_IEN = VIDEO_BASE + 4    ;// formatted as follows |VSYNC| | | | | | |HSYNC|
000000r 2               VIDEO_INTR = VIDEO_BASE + 5   ;// formatted as follows |VSYNC| | | | | | |HSYNC|
000000r 2               VIDEO_HSCROLL = VIDEO_BASE + 6
000000r 2               VIDEO_VSCROLL = VIDEO_BASE + 7
000000r 2               
000000r 2               VIDEO_HIRES_HCHARS = 80
000000r 2               VIDEO_HIRES_VCHARS = 60
000000r 2               
000000r 1               .include "drivers/keyboard.inc"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               
000000r 2               KB_VIA_BASE   = $FF90
000000r 2               KB_PORTB = KB_VIA_BASE
000000r 2               KB_PORTA  = KB_VIA_BASE+1
000000r 2               KB_DDRB = KB_VIA_BASE+2
000000r 2               KB_DDRA = KB_VIA_BASE+3
000000r 2               
000000r 2               
000000r 2               KB_T1CL = KB_VIA_BASE + 4
000000r 2               KB_T1CH = KB_VIA_BASE + 5
000000r 2               KB_T1LL = KB_VIA_BASE + 6
000000r 2               KB_T1LH = KB_VIA_BASE + 7
000000r 2               KB_ACR = KB_VIA_BASE + 11
000000r 2               KB_PCR = KB_VIA_BASE + 12
000000r 2               KB_IFR = KB_VIA_BASE + 13
000000r 2               KB_IER = KB_VIA_BASE + 14
000000r 2               
000000r 1               
000000r 1               .include "drivers/cf.inc"
000000r 2               
000000r 2               CF_BASE = $FFD0
000000r 2               CF_REG_0 = CF_BASE
000000r 2               CF_REG_1 = CF_BASE + 1
000000r 2               CF_REG_2 = CF_BASE + 2
000000r 2               CF_REG_3 = CF_BASE + 3
000000r 2               CF_REG_4 = CF_BASE + 4
000000r 2               CF_REG_5 = CF_BASE + 5
000000r 2               CF_REG_6 = CF_BASE + 6
000000r 2               CF_REG_7 = CF_BASE + 7
000000r 2               
000000r 2               CF_READ_SECTOR_COMMAND = $20
000000r 2               
000000r 1               
000000r 1               .include "drivers/zp.s"
000000r 2               ; Copyright 2020 Jonathan Foucher
000000r 2               
000000r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000000r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000000r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000000r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000000r 2               ; is furnished to do so, subject to the following conditions:
000000r 2               
000000r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000000r 2               ; substantial portions of the Software.
000000r 2               
000000r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000000r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000000r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000000r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000000r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000000r 2               ; DEALINGS IN THE SOFTWARE.
000000r 2               
000000r 2               ; next_addr: .res 1
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 2               .segment "ZEROPAGE": zeropage
000000r 2               
000000r 2  xx xx        stack_p: .res 2
000002r 2               
000002r 2               
000002r 1               
000002r 1               .segment "BSS"
000000r 1               
000000r 1  xx           lcd_absent: .res 1
000001r 1               
000001r 1  xx           has_acia: .res 1
000002r 1               
000002r 1               
000002r 1               .segment "RODATA"
000000r 1               
000000r 1               .import    copydata
000000r 1               .import zerobss
000000r 1               
000000r 1               .segment "STARTUP"
000000r 1               
000000r 1               v_reset:
000000r 1  20 rr rr         JSR     copydata
000003r 1  20 rr rr         jsr zerobss
000006r 1  4C rr rr         jmp kernel_init
000009r 1               
000009r 1               
000009r 1               .include "drivers/acia.s"
000009r 2               .segment "DATA"
000000r 2               
000000r 2               acia_init:
000000r 2  8D E1 FF         sta ACIA_STATUS        ; soft reset (value not important)
000003r 2                                           ; set specific modes and functions
000003r 2  9C rr rr         stz has_acia
000006r 2  A9 0B            lda #$0B                ; no parity, no echo, no Tx interrupt, NO Rx interrupt, enable Tx/Rx
000008r 2                   ;lda #$09               ; no parity, no echo, no Tx interrupt, Rx interrupt, enable Tx/Rx
000008r 2  8D E2 FF         sta ACIA_CMD        ; store to the command register
00000Br 2  AD E2 FF         lda ACIA_CMD        ; load command register again
00000Er 2  C9 0B            cmp #$0B                ; if not the same
000010r 2  D0 11            bne acia_absent         ; then it means the ACIA is not connected
000012r 2  AD E1 FF         lda ACIA_STATUS         ; Read the ACAI status to
000015r 2  29 60            and #$60                ; check if present or absent
000017r 2  D0 0A            bne acia_absent
000019r 2  A9 01            lda #1
00001Br 2  8D rr rr         sta has_acia           ; remember that ACIA is here
00001Er 2  A9 10            lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 115.200k baud rate
000020r 2                   ;lda #$10               ; 1 stop bits, 8 bit word length, internal clock, 1200 baud rate
000020r 2  8D E3 FF         sta ACIA_CTRL          ; program the ctl register
000023r 2               
000023r 2               acia_absent:
000023r 2  A0 14                ldy #20
000025r 2               aa_loop:
000025r 2  20 rr rr             jsr delay_short
000028r 2  AD E1 FF             lda ACIA_STATUS         ; Read ACIA data a few times
00002Br 2  AD E0 FF             lda ACIA_DATA           ; to try and prevent spurious characters
00002Er 2  88                   dey
00002Fr 2  D0 F4                bne aa_loop
000031r 2               aa_end:
000031r 2  60                   rts
000032r 2               
000032r 2               acia_out:
000032r 2  48               pha
000033r 2  5A               phy
000034r 2  8D E0 FF         sta ACIA_DATA
000037r 2  A0 40            ldy #$40            ;minimal delay is $02
000039r 2  20 rr rr         jsr delay_short
00003Cr 2  7A               ply
00003Dr 2  68               pla
00003Er 2  60               rts
00003Fr 2               
00003Fr 2               acia_getc:
00003Fr 2  AD E1 FF         lda ACIA_STATUS                 ; Read the ACIA status to
000042r 2  29 08            and #$08                        ; Check if there is character in the receiver
000044r 2  F0 05            beq @no_char      ; Exit now if we don't get one.
000046r 2  AD E0 FF         lda ACIA_DATA
000049r 2  38               sec
00004Ar 2  60               rts
00004Br 2               @no_char:
00004Br 2  18               clc
00004Cr 2  60               rts
00004Dr 2               
00004Dr 1               .include "drivers/timer.s"
00004Dr 2               
00004Dr 2               
00004Dr 2               COUNTER = CLOCK_SPEED/400        ; n/s
00004Dr 2               
00004Dr 2               .segment "ZEROPAGE": zeropage
000002r 2  xx xx xx xx  time: .res 4
000006r 2               
000006r 2               .segment "DATA"
00004Dr 2               
00004Dr 2               timer_init:
00004Dr 2  AD 8E FF         lda IER
000050r 2  09 C0            ora #$C0        ;enable interrupt on timer1 timeout
000052r 2  8D 8E FF         sta IER
000055r 2  A9 40            lda #$40        ; timer one free run mode
000057r 2  8D 8B FF         sta ACR
00005Ar 2  A9 60            lda #<COUNTER     ; set timer to low byte to calculated value from defined clock speed
00005Cr 2  8D 84 FF         sta T1CL
00005Fr 2  A9 EA            lda #>COUNTER       ; set timer to high byte to calculated value from defined clock speed
000061r 2               
000061r 2  8D 85 FF         sta T1CH
000064r 2  A9 00            lda #0              ; reset time variable
000066r 2  85 rr            sta time
000068r 2  85 rr            sta time+1
00006Ar 2  85 rr            sta time+2
00006Cr 2  85 rr            sta time+3
00006Er 2  58               cli
00006Fr 2  60               rts
000070r 2               
000070r 2               
000070r 2               timer_irq:
000070r 2  E6 rr            inc time
000072r 2  F0 01            beq @inc1
000074r 2               @exit1:
000074r 2                   ; this resets the PS/2 temp variables
000074r 2                   ;jsr reset_ps2
000074r 2  60               rts
000075r 2               @inc1:
000075r 2  E6 rr            inc time+1
000077r 2  F0 02            beq @inc2
000079r 2  80 F9            bra @exit1
00007Br 2               @inc2:
00007Br 2  E6 rr            inc time+2
00007Dr 2  F0 02            beq @inc3
00007Fr 2  80 F3            bra @exit1
000081r 2               @inc3:
000081r 2  E6 rr            inc time+3
000083r 2  80 EF            bra @exit1
000085r 2  60               rts
000086r 2               
000086r 1               ; .include "drivers/keyboard.s"
000086r 1               .include "drivers/ps2.s"
000086r 2               ; Copyright 2020 Jonathan Foucher
000086r 2               
000086r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000086r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000086r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000086r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000086r 2               ; is furnished to do so, subject to the following conditions:
000086r 2               
000086r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000086r 2               ; substantial portions of the Software.
000086r 2               
000086r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000086r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000086r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000086r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000086r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000086r 2               ; DEALINGS IN THE SOFTWARE.
000086r 2               
000086r 2               .segment "ZEROPAGE": zeropage
000006r 2               
000006r 2  xx xx xx xx  last_ps2_time: .res 4
00000Ar 2  xx           KB_BUF_W_PTR: .res 1
00000Br 2  xx           KB_BUF_R_PTR: .res 1
00000Cr 2  xx           control_keys: .res 1
00000Dr 2  xx           character: .res 1
00000Er 2               
00000Er 2               .segment "BSS"
000002r 2  xx xx xx xx  KB_BUF: .res 128
000006r 2  xx xx xx xx  
00000Ar 2  xx xx xx xx  
000082r 2  xx           KB_STATE: .res 1
000083r 2  xx           KB_TEMP: .res 1
000084r 2  xx           KB_PARITY: .res 1
000085r 2  xx           KB_BIT: .res 1
000086r 2  xx           KB_INIT_STATE: .res 1
000087r 2  xx           KB_INIT_WAIT: .res 1
000088r 2  xx           ready: .res 1
000089r 2  xx           to_send: .res 1
00008Ar 2  xx           ignore_next: .res 1
00008Br 2               
00008Br 2               .segment "RODATA"
000000r 2               
000000r 2               .include "drivers/keycodes.s"
000000r 3               
000000r 3               
000000r 3               ASCIITBL:
000000r 3  00               .byte $00               ; 00 no key pressed
000001r 3  89               .byte $89               ; 01 F9
000002r 3  87               .byte $87               ; 02 relocated F7
000003r 3  85               .byte $85               ; 03 F5
000004r 3  83               .byte $83               ; 04 F3
000005r 3  81               .byte $81               ; 05 F1
000006r 3  82               .byte $82               ; 06 F2
000007r 3  8C               .byte $8C               ; 07 F12
000008r 3  00               .byte $00               ; 08
000009r 3  8A               .byte $8A               ; 09 F10
00000Ar 3  88               .byte $88               ; 0A F8
00000Br 3  86               .byte $86               ; 0B F6
00000Cr 3  84               .byte $84               ; 0C F4
00000Dr 3  09               .byte $09               ; 0D tab
00000Er 3  60               .byte $60               ; 0E `~
00000Fr 3  8F               .byte $8F               ; 0F relocated Print Screen key
000010r 3  03               .byte $03               ; 10 relocated Pause/Break key
000011r 3  A0               .byte $A0               ; 11 left alt (right alt too)
000012r 3  00               .byte $00               ; 12 left shift
000013r 3  E0               .byte $E0               ; 13 relocated Alt release code
000014r 3  00               .byte $00               ; 14 left ctrl (right ctrl too)
000015r 3  71               .byte $71               ; 15 qQ
000016r 3  31               .byte $31               ; 16 1!
000017r 3  00               .byte $00               ; 17
000018r 3  00               .byte $00               ; 18
000019r 3  00               .byte $00               ; 19
00001Ar 3  7A               .byte $7A               ; 1A zZ
00001Br 3  73               .byte $73               ; 1B sS
00001Cr 3  61               .byte $61               ; 1C aA
00001Dr 3  77               .byte $77               ; 1D wW
00001Er 3  32               .byte $32               ; 1E 2@
00001Fr 3  A1               .byte $A1               ; 1F Windows 98 menu key (left side)
000020r 3  02               .byte $02               ; 20 relocated ctrl-break key
000021r 3  63               .byte $63               ; 21 cC
000022r 3  78               .byte $78               ; 22 xX
000023r 3  64               .byte $64               ; 23 dD
000024r 3  65               .byte $65               ; 24 eE
000025r 3  34               .byte $34               ; 25 4$
000026r 3  33               .byte $33               ; 26 3#
000027r 3  A2               .byte $A2               ; 27 Windows 98 menu key (right side)
000028r 3  00               .byte $00               ; 28
000029r 3  20               .byte $20               ; 29 space
00002Ar 3  76               .byte $76               ; 2A vV
00002Br 3  66               .byte $66               ; 2B fF
00002Cr 3  74               .byte $74               ; 2C tT
00002Dr 3  72               .byte $72               ; 2D rR
00002Er 3  35               .byte $35               ; 2E 5%
00002Fr 3  A3               .byte $A3               ; 2F Windows 98 option key (right click, right side)
000030r 3  00               .byte $00               ; 30
000031r 3  6E               .byte $6E               ; 31 nN
000032r 3  62               .byte $62               ; 32 bB
000033r 3  68               .byte $68               ; 33 hH
000034r 3  67               .byte $67               ; 34 gG
000035r 3  79               .byte $79               ; 35 yY
000036r 3  36               .byte $36               ; 36 6^
000037r 3  00               .byte $00               ; 37
000038r 3  00               .byte $00               ; 38
000039r 3  00               .byte $00               ; 39
00003Ar 3  6D               .byte $6D               ; 3A mM
00003Br 3  6A               .byte $6A               ; 3B jJ
00003Cr 3  75               .byte $75               ; 3C uU
00003Dr 3  37               .byte $37               ; 3D 7&
00003Er 3  38               .byte $38               ; 3E 8*
00003Fr 3  00               .byte $00               ; 3F
000040r 3  00               .byte $00               ; 40
000041r 3  2C               .byte $2C               ; 41 ,<
000042r 3  6B               .byte $6B               ; 42 kK
000043r 3  69               .byte $69               ; 43 iI
000044r 3  6F               .byte $6F               ; 44 oO
000045r 3  30               .byte $30               ; 45 0)
000046r 3  39               .byte $39               ; 46 9(
000047r 3  00               .byte $00               ; 47
000048r 3  00               .byte $00               ; 48
000049r 3  2E               .byte $2E               ; 49 .>
00004Ar 3  2F               .byte $2F               ; 4A /?
00004Br 3  6C               .byte $6C               ; 4B lL
00004Cr 3  3B               .byte $3B               ; 4C ;:
00004Dr 3  70               .byte $70               ; 4D pP
00004Er 3  2D               .byte $2D               ; 4E -_
00004Fr 3  00               .byte $00               ; 4F
000050r 3  00               .byte $00               ; 50
000051r 3  00               .byte $00               ; 51
000052r 3  27               .byte $27               ; 52 '"
000053r 3  00               .byte $00               ; 53
000054r 3  5B               .byte $5B               ; 54 [{
000055r 3  3D               .byte $3D               ; 55 =+
000056r 3  00               .byte $00               ; 56
000057r 3  00               .byte $00               ; 57
000058r 3  00               .byte $00               ; 58 caps
000059r 3  00               .byte $00               ; 59 r shift
00005Ar 3  0D               .byte $0D               ; 5A <Enter>
00005Br 3  5D               .byte $5D               ; 5B ]}
00005Cr 3  00               .byte $00               ; 5C
00005Dr 3  5C               .byte $5C               ; 5D \|
00005Er 3  00               .byte $00               ; 5E
00005Fr 3  00               .byte $00               ; 5F
000060r 3  00               .byte $00               ; 60
000061r 3  00               .byte $00               ; 61
000062r 3  00               .byte $00               ; 62
000063r 3  00               .byte $00               ; 63
000064r 3  00               .byte $00               ; 64
000065r 3  00               .byte $00               ; 65
000066r 3  08               .byte $08               ; 66 bkspace
000067r 3  00               .byte $00               ; 67
000068r 3  00               .byte $00               ; 68
000069r 3  31               .byte $31               ; 69 kp 1
00006Ar 3  2F               .byte $2f               ; 6A kp / converted from E04A in code
00006Br 3  34               .byte $34               ; 6B kp 4
00006Cr 3  37               .byte $37               ; 6C kp 7
00006Dr 3  00               .byte $00               ; 6D
00006Er 3  00               .byte $00               ; 6E
00006Fr 3  00               .byte $00               ; 6F
000070r 3  30               .byte $30               ; 70 kp 0
000071r 3  2E               .byte $2E               ; 71 kp .
000072r 3  32               .byte $32               ; 72 kp 2
000073r 3  35               .byte $35               ; 73 kp 5
000074r 3  36               .byte $36               ; 74 kp 6
000075r 3  38               .byte $38               ; 75 kp 8
000076r 3  1B               .byte $1B               ; 76 esc
000077r 3  00               .byte $00               ; 77 num lock
000078r 3  8B               .byte $8B               ; 78 F11
000079r 3  2B               .byte $2B               ; 79 kp +
00007Ar 3  33               .byte $33               ; 7A kp 3
00007Br 3  2D               .byte $2D               ; 7B kp -
00007Cr 3  2A               .byte $2A               ; 7C kp *
00007Dr 3  39               .byte $39               ; 7D kp 9
00007Er 3  8D               .byte $8D               ; 7E scroll lock
00007Fr 3  00               .byte $00               ; 7F
000080r 3                   ;
000080r 3                   ; Table for shifted scancodes
000080r 3                   ;
000080r 3  00               .byte $00               ; 80
000081r 3  C9               .byte $C9               ; 81 F9
000082r 3  C7               .byte $C7               ; 82 relocated F7
000083r 3  C5               .byte $C5               ; 83 F5 (F7 actual scancode=83)
000084r 3  C3               .byte $C3               ; 84 F3
000085r 3  C1               .byte $C1               ; 85 F1
000086r 3  C2               .byte $C2               ; 86 F2
000087r 3  CC               .byte $CC               ; 87 F12
000088r 3  00               .byte $00               ; 88
000089r 3  CA               .byte $CA               ; 89 F10
00008Ar 3  C8               .byte $C8               ; 8A F8
00008Br 3  C6               .byte $C6               ; 8B F6
00008Cr 3  C4               .byte $C4               ; 8C F4
00008Dr 3  09               .byte $09               ; 8D tab
00008Er 3  7E               .byte $7E               ; 8E `~
00008Fr 3  CF               .byte $CF               ; 8F relocated Print Screen key
000090r 3  03               .byte $03               ; 90 relocated Pause/Break key
000091r 3  A0               .byte $A0               ; 91 left alt (right alt)
000092r 3  00               .byte $00               ; 92 left shift
000093r 3  E0               .byte $E0               ; 93 relocated Alt release code
000094r 3  00               .byte $00               ; 94 left ctrl (and right ctrl)
000095r 3  51               .byte $51               ; 95 qQ
000096r 3  21               .byte $21               ; 96 1!
000097r 3  00               .byte $00               ; 97
000098r 3  00               .byte $00               ; 98
000099r 3  00               .byte $00               ; 99
00009Ar 3  5A               .byte $5A               ; 9A zZ
00009Br 3  53               .byte $53               ; 9B sS
00009Cr 3  41               .byte $41               ; 9C aA
00009Dr 3  57               .byte $57               ; 9D wW
00009Er 3  40               .byte $40               ; 9E 2@
00009Fr 3  E1               .byte $E1               ; 9F Windows 98 menu key (left side)
0000A0r 3  02               .byte $02               ; A0 relocated ctrl-break key
0000A1r 3  43               .byte $43               ; A1 cC
0000A2r 3  58               .byte $58               ; A2 xX
0000A3r 3  44               .byte $44               ; A3 dD
0000A4r 3  45               .byte $45               ; A4 eE
0000A5r 3  24               .byte $24               ; A5 4$
0000A6r 3  23               .byte $23               ; A6 3#
0000A7r 3  E2               .byte $E2               ; A7 Windows 98 menu key (right side)
0000A8r 3  00               .byte $00               ; A8
0000A9r 3  20               .byte $20               ; A9 space
0000AAr 3  56               .byte $56               ; AA vV
0000ABr 3  46               .byte $46               ; AB fF
0000ACr 3  54               .byte $54               ; AC tT
0000ADr 3  52               .byte $52               ; AD rR
0000AEr 3  25               .byte $25               ; AE 5%
0000AFr 3  E3               .byte $E3               ; AF Windows 98 option key (right click, right side)
0000B0r 3  00               .byte $00               ; B0
0000B1r 3  4E               .byte $4E               ; B1 nN
0000B2r 3  42               .byte $42               ; B2 bB
0000B3r 3  48               .byte $48               ; B3 hH
0000B4r 3  47               .byte $47               ; B4 gG
0000B5r 3  59               .byte $59               ; B5 yY
0000B6r 3  5E               .byte $5E               ; B6 6^
0000B7r 3  00               .byte $00               ; B7
0000B8r 3  00               .byte $00               ; B8
0000B9r 3  00               .byte $00               ; B9
0000BAr 3  4D               .byte $4D               ; BA mM
0000BBr 3  4A               .byte $4A               ; BB jJ
0000BCr 3  55               .byte $55               ; BC uU
0000BDr 3  26               .byte $26               ; BD 7&
0000BEr 3  2A               .byte $2A               ; BE 8*
0000BFr 3  00               .byte $00               ; BF
0000C0r 3  00               .byte $00               ; C0
0000C1r 3  3C               .byte $3C               ; C1 ,<
0000C2r 3  4B               .byte $4B               ; C2 kK
0000C3r 3  49               .byte $49               ; C3 iI
0000C4r 3  4F               .byte $4F               ; C4 oO
0000C5r 3  29               .byte $29               ; C5 0)
0000C6r 3  28               .byte $28               ; C6 9(
0000C7r 3  00               .byte $00               ; C7
0000C8r 3  00               .byte $00               ; C8
0000C9r 3  3E               .byte $3E               ; C9 .>
0000CAr 3  3F               .byte $3F               ; CA /?
0000CBr 3  4C               .byte $4C               ; CB lL
0000CCr 3  3A               .byte $3A               ; CC ;:
0000CDr 3  50               .byte $50               ; CD pP
0000CEr 3  5F               .byte $5F               ; CE -_
0000CFr 3  00               .byte $00               ; CF
0000D0r 3  00               .byte $00               ; D0
0000D1r 3  00               .byte $00               ; D1
0000D2r 3  22               .byte $22               ; D2 '"
0000D3r 3  00               .byte $00               ; D3
0000D4r 3  7B               .byte $7B               ; D4 [{
0000D5r 3  2B               .byte $2B               ; D5 =+
0000D6r 3  00               .byte $00               ; D6
0000D7r 3  00               .byte $00               ; D7
0000D8r 3  00               .byte $00               ; D8 caps
0000D9r 3  00               .byte $00               ; D9 r shift
0000DAr 3  0D               .byte $0D               ; DA <Enter>
0000DBr 3  7D               .byte $7D               ; DB ]}
0000DCr 3  00               .byte $00               ; DC
0000DDr 3  7C               .byte $7C               ; DD \|
0000DEr 3  00               .byte $00               ; DE
0000DFr 3  00               .byte $00               ; DF
0000E0r 3  00               .byte $00               ; E0
0000E1r 3  00               .byte $00               ; E1
0000E2r 3  00               .byte $00               ; E2
0000E3r 3  00               .byte $00               ; E3
0000E4r 3  00               .byte $00               ; E4
0000E5r 3  00               .byte $00               ; E5
0000E6r 3  08               .byte $08               ; E6 bkspace
0000E7r 3  00               .byte $00               ; E7
0000E8r 3  00               .byte $00               ; E8
0000E9r 3  91               .byte $91               ; E9 kp 1
0000EAr 3  2F               .byte $2f               ; EA kp / converted from E04A in code
0000EBr 3  94               .byte $94               ; EB kp 4
0000ECr 3  97               .byte $97               ; EC kp 7
0000EDr 3  00               .byte $00               ; ED
0000EEr 3  00               .byte $00               ; EE
0000EFr 3  00               .byte $00               ; EF
0000F0r 3  90               .byte $90               ; F0 kp 0
0000F1r 3  7F               .byte $7F               ; F1 kp .
0000F2r 3  92               .byte $92               ; F2 kp 2
0000F3r 3  95               .byte $95               ; F3 kp 5
0000F4r 3  96               .byte $96               ; F4 kp 6
0000F5r 3  98               .byte $98               ; F5 kp 8
0000F6r 3  1B               .byte $1B               ; F6 esc
0000F7r 3  00               .byte $00               ; F7 num lock
0000F8r 3  CB               .byte $CB               ; F8 F11
0000F9r 3  2B               .byte $2B               ; F9 kp +
0000FAr 3  93               .byte $93               ; FA kp 3
0000FBr 3  2D               .byte $2D               ; FB kp -
0000FCr 3  2A               .byte $2A               ; FC kp *
0000FDr 3  99               .byte $99               ; FD kp 9
0000FEr 3  CD               .byte $CD               ; FE scroll lock
0000FFr 3               
0000FFr 3               
0000FFr 3               
0000FFr 3               
0000FFr 2               
0000FFr 2               .segment "DATA"
000086r 2               
000086r 2               ps2_init:
000086r 2  78             sei ; prevent interrupts while initializing
000087r 2               kb_conn_msg:
000087r 2  A2 00          ldx #0
000089r 2               kb_conn_loop:
000089r 2  BD rr rr       lda kb_conn_msg_text,x
00008Cr 2  F0 1A          beq kb_conn_msg_end
00008Er 2  20 rr rr       jsr kernel_putc
000091r 2  E8             inx
000092r 2  80 F5          bra kb_conn_loop
000094r 2  44 65 74 65  kb_conn_msg_text: .byte "Detecting keyboard", $0D, $00
000098r 2  63 74 69 6E  
00009Cr 2  67 20 6B 65  
0000A8r 2               kb_conn_msg_end:
0000A8r 2               
0000A8r 2  AD 8E FF       lda IER
0000ABr 2  09 88          ora #$88      ;enable interrupt on neg transition on CB2
0000ADr 2  8D 8E FF       sta IER
0000B0r 2               
0000B0r 2  A9 00          lda #0
0000B2r 2  8D 8C FF       sta PCR
0000B5r 2  8D rr rr       sta KB_TEMP
0000B8r 2  8D rr rr       sta KB_BIT
0000BBr 2  8D rr rr       sta KB_STATE
0000BEr 2  8D rr rr       sta to_send
0000C1r 2  8D rr rr       sta KB_PARITY
0000C4r 2  85 rr          sta KB_BUF_W_PTR
0000C6r 2  85 rr          sta KB_BUF_R_PTR
0000C8r 2  8D rr rr       sta KB_INIT_STATE
0000CBr 2  8D rr rr       sta KB_INIT_WAIT
0000CEr 2  8D rr rr       sta ready
0000D1r 2  8D rr rr       sta ignore_next
0000D4r 2  85 rr          sta character
0000D6r 2  20 rr rr       jsr clear_buffer
0000D9r 2               
0000D9r 2                 ; jsr kb_reset
0000D9r 2                 ; jsr kb_leds
0000D9r 2                 ; jsr kb_leds_data
0000D9r 2               
0000D9r 2                 ; jmp done_init
0000D9r 2               
0000D9r 2  A9 00          lda #KB_INIT_STATE_RESET
0000DBr 2  8D rr rr       sta KB_INIT_STATE
0000DEr 2  58             cli           ;enable interrupts
0000DFr 2               
0000DFr 2               @wait1:
0000DFr 2  A0 0A          ldy #10
0000E1r 2  20 rr rr       jsr delay
0000E4r 2  EE rr rr       inc KB_INIT_WAIT
0000E7r 2  F0 1C          beq done_init     ; nothing to show yet
0000E9r 2  AD rr rr       lda to_send
0000ECr 2  D0 F1          bne @wait1       ; do nothing while sending
0000EEr 2               
0000EEr 2                 ;jsr lcd_print
0000EEr 2               
0000EEr 2  AE rr rr       ldx KB_INIT_STATE
0000F1r 2  E0 00          cpx #KB_INIT_STATE_RESET
0000F3r 2  F0 06          beq @do_reset
0000F5r 2  E0 01          cpx #KB_INIT_STATE_RESET_ACK
0000F7r 2  F0 0C          beq done_init
0000F9r 2                 ; beq @self_test_ok  ; Wait for 256 loops with nothing. if still nothing, reset keyboard
0000F9r 2               
0000F9r 2  80 0A          bra done_init
0000FBr 2                 ;sta PORTA
0000FBr 2                 ; wait for keyboard self test (#$AA)
0000FBr 2               
0000FBr 2               @do_reset:
0000FBr 2  20 rr rr       jsr kb_reset
0000FEr 2  A9 01          lda #KB_INIT_STATE_RESET_ACK  ; next state should be an acknowledgment
000100r 2  8D rr rr       sta KB_INIT_STATE
000103r 2  80 DA          bra @wait1
000105r 2               
000105r 2               
000105r 2               done_init:
000105r 2  A9 00          lda #0
000107r 2  8D 82 FF       sta DDRB
00010Ar 2  8D 8C FF       sta PCR
00010Dr 2  8D rr rr       sta ignore_next
000110r 2  8D rr rr       sta ready
000113r 2  85 rr          sta control_keys
000115r 2  8D rr rr       sta to_send
000118r 2  8D rr rr       sta ready
00011Br 2  85 rr          sta character
00011Dr 2  8D rr rr       sta KB_TEMP
000120r 2  8D rr rr       sta KB_INIT_STATE
000123r 2  8D rr rr       sta KB_BIT
000126r 2  8D rr rr       sta KB_STATE
000129r 2  85 rr          sta KB_BUF_W_PTR
00012Br 2  85 rr          sta KB_BUF_R_PTR
00012Dr 2  58             cli ; enable interrupts again
00012Er 2  60             rts
00012Fr 2               
00012Fr 2               
00012Fr 2               kb_reset:
00012Fr 2  A9 00          lda #0
000131r 2  8D rr rr       sta KB_INIT_WAIT
000134r 2  A9 F0          lda #$F0
000136r 2  8D 81 FF       sta PORTA
000139r 2  78             sei                   ;disable interrupts
00013Ar 2  20 rr rr       jsr prepare_send
00013Dr 2  A9 FF          lda #$FF
00013Fr 2  8D rr rr       sta to_send
000142r 2  58             cli                   ; enable interrupts
000143r 2  60             rts
000144r 2               
000144r 2               no_kb_msg:
000144r 2  A2 00          ldx #0
000146r 2               no_kb_loop:
000146r 2  BD rr rr       lda no_kb_msg_text,x
000149r 2  F0 BA          beq done_init
00014Br 2  20 rr rr       jsr kernel_putc
00014Er 2  E8             inx
00014Fr 2  80 F5          bra no_kb_loop
000151r 2  4E 6F 20 6B  no_kb_msg_text: .byte "No keyboard connected", $0D, $00
000155r 2  65 79 62 6F  
000159r 2  61 72 64 20  
000168r 2               
000168r 2               
000168r 2               prepare_send:
000168r 2  48             pha
000169r 2  5A             phy
00016Ar 2                 ; ready to send, pull clock low for a while
00016Ar 2  A9 C0          lda #$C0
00016Cr 2  8D 8C FF       sta PCR       ;set CB2 low
00016Fr 2                 ;delay
00016Fr 2  A0 80          ldy #$80
000171r 2  20 rr rr       jsr delay
000174r 2                 ; delay end
000174r 2                 ; pull data low now
000174r 2  AD 80 FF       lda PORTB
000177r 2  29 7F          and #($FF^DATA)
000179r 2  8D 80 FF       sta PORTB
00017Cr 2  AD 82 FF       lda DDRB
00017Fr 2  09 80          ora #DATA   ;data as output to set it low
000181r 2  8D 82 FF       sta DDRB
000184r 2  A0 40          ldy #$40
000186r 2  20 rr rr       jsr delay
000189r 2  A9 01          lda #KB_STATE_DATA    ; no start bit when sending
00018Br 2  8D rr rr       sta KB_STATE
00018Er 2                 ; release clock
00018Er 2  A9 00          lda #0
000190r 2  8D rr rr       sta to_send
000193r 2  8D rr rr       sta KB_PARITY
000196r 2  8D 8C FF       sta PCR       ;set CB2 to negative edge input
000199r 2               
000199r 2  7A             ply
00019Ar 2  68             pla
00019Br 2  60             rts
00019Cr 2               
00019Cr 2               
00019Cr 2               reset_ps2:          ; routine called during a timer interrupt to check
00019Cr 2  48             pha
00019Dr 2                                   ; if the elasped time since the last ps2 interrupt allows us to reset it
00019Dr 2  A5 rr          lda time+3
00019Fr 2  C5 rr          cmp last_ps2_time+3
0001A1r 2  90 16          bcc @reset
0001A3r 2  A5 rr          lda time+2
0001A5r 2  C5 rr          cmp last_ps2_time+2
0001A7r 2  90 10          bcc @reset
0001A9r 2  A5 rr          lda time+1
0001ABr 2  C5 rr          cmp last_ps2_time+1
0001ADr 2  90 0A          bcc @reset
0001AFr 2  A5 rr          lda time
0001B1r 2  69 01          adc #$1
0001B3r 2  C5 rr          cmp last_ps2_time
0001B5r 2  90 02          bcc @reset
0001B7r 2               @exit2:
0001B7r 2  68             pla
0001B8r 2  60             rts
0001B9r 2               @reset:
0001B9r 2  A9 00          lda #0
0001BBr 2  8D rr rr       sta KB_TEMP
0001BEr 2  8D rr rr       sta KB_BIT
0001C1r 2  8D rr rr       sta KB_STATE
0001C4r 2  85 rr          sta KB_BUF_W_PTR
0001C6r 2  85 rr          sta KB_BUF_R_PTR
0001C8r 2  F0 ED          beq @exit2
0001CAr 2               
0001CAr 2               clear_buffer:
0001CAr 2  DA             phx
0001CBr 2  A2 FF          ldx #$ff
0001CDr 2               @clear_loop:
0001CDr 2  9E rr rr       stz KB_BUF, x
0001D0r 2  CA             dex
0001D1r 2  D0 FA          bne @clear_loop
0001D3r 2  FA             plx
0001D4r 2  60             rts
0001D5r 2               
0001D5r 2               
0001D5r 2               ps2_get_char:
0001D5r 2               
0001D5r 2  DA               phx                             ; save X
0001D6r 2  A6 rr            ldx KB_BUF_R_PTR                ; check the keyboard buffer
0001D8r 2  BD rr rr         lda KB_BUF, x
0001DBr 2  F0 0B            beq no_ps2_char_available       ; exit if nothing found
0001DDr 2  9E rr rr         stz KB_BUF, x                   ; if there was a character, reset this buffer cell
0001E0r 2  E6 rr            inc KB_BUF_R_PTR                ; and increment the read pointer
0001E2r 2               
0001E2r 2  38               sec                             ; mark character present
0001E3r 2  FA               plx                             ; restore X
0001E4r 2  20 rr rr         jsr check_ctrl_c
0001E7r 2  60               rts                             ; return
0001E8r 2               no_ps2_char_available:                  ; no keyboard char
0001E8r 2  E6 rr            inc KB_BUF_R_PTR                ; increment read pointer for next time
0001EAr 2  FA               plx                             ; restore X
0001EBr 2  18               clc
0001ECr 2  60               rts
0001EDr 2                 .include "ps2_irq.s"
0001EDr 3               ; Copyright 2020 Jonathan Foucher
0001EDr 3               
0001EDr 3               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
0001EDr 3               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
0001EDr 3               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
0001EDr 3               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
0001EDr 3               ; is furnished to do so, subject to the following conditions:
0001EDr 3               
0001EDr 3               ; The above copyright notice and this permission notice shall be included in all copies or
0001EDr 3               ; substantial portions of the Software.
0001EDr 3               
0001EDr 3               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
0001EDr 3               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
0001EDr 3               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
0001EDr 3               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
0001EDr 3               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
0001EDr 3               ; DEALINGS IN THE SOFTWARE.
0001EDr 3               
0001EDr 3               
0001EDr 3               
0001EDr 3               
0001EDr 3               ps2_irq:
0001EDr 3  48               pha
0001EEr 3  DA               phx
0001EFr 3  AD rr rr         lda to_send
0001F2r 3  D0 25            bne @willsend
0001F4r 3  AD rr rr         lda KB_STATE            ; which state ?
0001F7r 3  C9 00            cmp #KB_STATE_START
0001F9r 3  F0 0F            beq @start        ; start bit
0001FBr 3               
0001FBr 3  C9 01            cmp #KB_STATE_DATA             ; get data bits
0001FDr 3  F0 1D            beq @data
0001FFr 3               
0001FFr 3  C9 02            cmp #KB_STATE_PARITY             ; this is the parity bit
000201r 3  F0 3A            beq @parity
000203r 3               
000203r 3  C9 03            cmp #KB_STATE_STOP      ; stop bit
000205r 3  F0 3D            beq @stop
000207r 3  4C rr rr         jmp @exit
00020Ar 3               
00020Ar 3               @start:
00020Ar 3  A9 01            lda #KB_STATE_DATA
00020Cr 3  8D rr rr         sta KB_STATE        ; next state will be to get data
00020Fr 3  A9 00            lda #0
000211r 3  8D rr rr         sta KB_TEMP
000214r 3  8D rr rr         sta KB_BIT
000217r 3  80 65            bra @exit
000219r 3               @willsend:
000219r 3  4C rr rr         jmp @sending
00021Cr 3               @data:
00021Cr 3  AD 80 FF         lda PORTB       ; get the bit of data from PORTB bit 7
00021Fr 3  29 80            and #$80
000221r 3  0D rr rr         ora KB_TEMP     ; OR it with existing temp data
000224r 3  8D rr rr         sta KB_TEMP     ; save it
000227r 3  EE rr rr         inc KB_BIT      ; prepare for next bit
00022Ar 3  AD rr rr         lda KB_BIT
00022Dr 3  C9 08            cmp #8          ; if this is the last bit, next state is parity
00022Fr 3  F0 05            beq @next_state_parity
000231r 3  4E rr rr         lsr KB_TEMP     ; if not last bit, shift KB_TEMP right to prepare for next bit
000234r 3               
000234r 3  80 48            bra @exit
000236r 3               
000236r 3               @next_state_parity:
000236r 3  A9 02            lda #KB_STATE_PARITY    ;next state is parity
000238r 3  8D rr rr         sta KB_STATE
00023Br 3  80 41            bra @exit
00023Dr 3               
00023Dr 3               @parity:
00023Dr 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
00023Fr 3  8D rr rr         sta KB_STATE
000242r 3  80 3A            bra @exit
000244r 3               
000244r 3               @stop:
000244r 3  A9 00            lda #KB_STATE_START
000246r 3  8D rr rr         sta KB_STATE
000249r 3  AD rr rr         lda ignore_next
00024Cr 3  D0 45            bne @ignored
00024Er 3                   ; Save key to character buffer
00024Er 3  AE rr rr         ldx KB_TEMP
000251r 3  E0 AA            cpx #$AA
000253r 3  F0 32            beq @init
000255r 3  E0 FA            cpx #$FA
000257r 3  F0 2E            beq @init
000259r 3  E0 F0            cpx #$F0
00025Br 3  F0 2F            beq @ignore_next
00025Dr 3  E0 12            cpx #LSHIFT_KEY
00025Fr 3  F0 4F            beq @shift_pressed
000261r 3  E0 59            cpx #RSHIFT_KEY
000263r 3  F0 4B            beq @shift_pressed
000265r 3  A5 rr            lda control_keys
000267r 3  29 01            and #SHIFT
000269r 3  D0 09            bne @shifted
00026Br 3               @unshifted:
00026Br 3                   ;stx PORTA
00026Br 3  BD rr rr         lda ASCIITBL, x
00026Er 3               
00026Er 3  C9 1B            cmp #$1B             ; reset if escape pressed
000270r 3  F0 12            beq @esc
000272r 3  80 03            bra @output
000274r 3               @shifted:
000274r 3  BD rr rr         lda ASCIITBL+128, x
000277r 3               @output:
000277r 3  A6 rr            ldx KB_BUF_W_PTR
000279r 3  9D rr rr         sta KB_BUF, x
00027Cr 3                   ;sta PORTA
00027Cr 3  E6 rr            inc KB_BUF_W_PTR
00027Er 3               
00027Er 3               @exit:
00027Er 3  2C 80 FF         bit PORTB
000281r 3  FA               plx
000282r 3  68               pla
000283r 3  60               rts
000284r 3               @esc:
000284r 3  4C rr rr         jmp v_reset
000287r 3               @init:
000287r 3  8E rr rr         stx ready
00028Ar 3  80 F2            bra @exit
00028Cr 3               
00028Cr 3               @ignore_next:
00028Cr 3  A9 01            lda #1
00028Er 3  8D rr rr         sta ignore_next
000291r 3  80 EB            bra @exit
000293r 3               
000293r 3               @ignored:
000293r 3  AE rr rr         ldx KB_TEMP
000296r 3  E0 12            cpx #LSHIFT_KEY
000298r 3  F0 0B            beq @shift_released
00029Ar 3  E0 59            cpx #RSHIFT_KEY
00029Cr 3  F0 07            beq @shift_released
00029Er 3  A9 00            lda #0
0002A0r 3  8D rr rr         sta ignore_next
0002A3r 3  80 D9            bra @exit
0002A5r 3               
0002A5r 3               @shift_released:
0002A5r 3  A9 00            lda #0
0002A7r 3  8D rr rr         sta ignore_next
0002AAr 3  A9 00            lda #0
0002ACr 3  85 rr            sta control_keys
0002AEr 3  80 CE            bra @exit
0002B0r 3               
0002B0r 3               @shift_pressed:
0002B0r 3  A5 rr            lda control_keys
0002B2r 3  09 01            ora #SHIFT
0002B4r 3  85 rr            sta control_keys
0002B6r 3  80 C6            bra @exit
0002B8r 3               
0002B8r 3               @sending:
0002B8r 3                   ; lda #1
0002B8r 3                   ; sta PORTA
0002B8r 3                   ; data pin of DDRB should be set as output by prepare_send
0002B8r 3  AD rr rr         lda KB_STATE                ; which state ?
0002BBr 3  C9 01            cmp #KB_STATE_DATA          ; send data bits
0002BDr 3  F0 0A            beq @sending_data
0002BFr 3  C9 02            cmp #KB_STATE_PARITY        ; this is the parity bit
0002C1r 3  F0 33            beq @sending_parity
0002C3r 3  C9 03            cmp #KB_STATE_STOP          ; stop bit
0002C5r 3  F0 56            beq @sending_stop
0002C7r 3  80 B5            bra @exit
0002C9r 3               
0002C9r 3               
0002C9r 3               @sending_data:
0002C9r 3                   ; lda #4
0002C9r 3                   ; sta PORTA
0002C9r 3  AD rr rr         lda to_send       ; get the bit of data from memory
0002CCr 3  29 01            and #$01          ; get only bottom bit
0002CEr 3  F0 0D            beq @send_zero
0002D0r 3               
0002D0r 3               @send_one:
0002D0r 3  AD 80 FF         lda PORTB
0002D3r 3  09 80            ora #$80
0002D5r 3  8D 80 FF         sta PORTB
0002D8r 3  EE rr rr         inc KB_PARITY
0002DBr 3  80 08            bra @sending_done
0002DDr 3               @send_zero:
0002DDr 3  AD 80 FF         lda PORTB
0002E0r 3  29 7F            and #$7F
0002E2r 3  8D 80 FF         sta PORTB
0002E5r 3               @sending_done:
0002E5r 3                   ; lda #2
0002E5r 3                   ; sta PORTA
0002E5r 3  EE rr rr         inc KB_BIT      ; prepare for next bit
0002E8r 3  AD rr rr         lda KB_BIT
0002EBr 3  C9 08            cmp #8          ; if this is the last bit, next state is parity
0002EDr 3  4C rr rr         jmp @next_state_parity
0002F0r 3  4E rr rr         lsr to_send
0002F3r 3  18               clc
0002F4r 3  80 88            bra @exit
0002F6r 3               
0002F6r 3               @sending_parity:
0002F6r 3                   ; lda #5
0002F6r 3                   ; sta PORTA
0002F6r 3  AD rr rr         lda KB_PARITY
0002F9r 3  29 01            and #$01
0002FBr 3  F0 10            beq @odd_parity     ; send zero if odd parity
0002FDr 3  AD 80 FF         lda PORTB
000300r 3  09 80            ora #$80            ; send one if even
000302r 3  8D 80 FF         sta PORTB
000305r 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
000307r 3  8D rr rr         sta KB_STATE
00030Ar 3  4C rr rr         jmp @exit
00030Dr 3               @odd_parity:
00030Dr 3  AD 80 FF         lda PORTB
000310r 3  29 7F            and #$7F
000312r 3  8D 80 FF         sta PORTB
000315r 3  A9 03            lda #KB_STATE_STOP      ;next state is stop
000317r 3  8D rr rr         sta KB_STATE
00031Ar 3  4C rr rr         jmp @exit
00031Dr 3               
00031Dr 3               @sending_stop:
00031Dr 3                   ; lda #6
00031Dr 3                   ; sta PORTA
00031Dr 3  A9 00            lda #KB_STATE_START     ; set it back to start in case we are receivin next
00031Fr 3  8D rr rr         sta KB_STATE
000322r 3  A9 00            lda #0
000324r 3  8D rr rr         sta to_send
000327r 3  8D rr rr         sta KB_BIT
00032Ar 3  8D rr rr         sta KB_PARITY
00032Dr 3  AD 82 FF         lda DDRB        ; set PORTB back to input
000330r 3  29 7F            and #$7F
000332r 3  8D 82 FF         sta DDRB
000335r 3  4C rr rr         jmp @exit
000338r 3               
000338r 2               
000338r 1               .include "drivers/delayroutines.s"
000338r 2               ; Copyright 2020 Jonathan Foucher
000338r 2               
000338r 2               ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software
000338r 2               ; and associated documentation files (the "Software"), to deal in the Software without restriction,
000338r 2               ; including without limitation the rights to use, copy, modify, merge, publish, distribute,
000338r 2               ; sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
000338r 2               ; is furnished to do so, subject to the following conditions:
000338r 2               
000338r 2               ; The above copyright notice and this permission notice shall be included in all copies or
000338r 2               ; substantial portions of the Software.
000338r 2               
000338r 2               ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
000338r 2               ; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
000338r 2               ; PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
000338r 2               ; FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
000338r 2               ; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
000338r 2               ; DEALINGS IN THE SOFTWARE.
000338r 2               
000338r 2               .segment "CODE"
000000r 2               ; this routine delays by 2304 * y + 23 cycles
000000r 2               delay:
000000r 2  DA             phx       ; 3 cycles
000001r 2  5A             phy       ; 3 cycles
000002r 2               two:
000002r 2  A2 FF          ldx #$ff  ; 2 cycles
000004r 2               one:
000004r 2  EA             nop       ; 2 cycles
000005r 2  EA             nop       ; 2 cycles
000006r 2  CA             dex       ; 2 cycles
000007r 2  D0 FB          bne one   ; 3 for all cycles, 2 for last
000009r 2  88             dey       ; 2 cycles
00000Ar 2  D0 F6          bne two   ; 3 for all cycles, 2 for last
00000Cr 2  7A             ply       ; 4 cycles
00000Dr 2  FA             plx       ; 4 cycles
00000Er 2  60             rts       ; 6 cycles
00000Fr 2               
00000Fr 2               ; delay is in Y register
00000Fr 2               delay_long:
00000Fr 2  48             pha
000010r 2  5A             phy
000011r 2  DA             phx
000012r 2  98             tya
000013r 2  AA             tax
000014r 2               delay_long_loop:
000014r 2  A0 FF          ldy #$ff
000016r 2  20 rr rr       jsr delay
000019r 2  CA             dex
00001Ar 2  D0 F8          bne delay_long_loop
00001Cr 2  FA             plx
00001Dr 2  7A             ply
00001Er 2  68             pla
00001Fr 2  60             rts
000020r 2               
000020r 2               delay_short:        ; delay Y * 19 cycles
000020r 2  5A             phy
000021r 2               delay_short_loop:
000021r 2  EA             nop               ; 2 cycles
000022r 2  EA             nop               ; 2 cycles
000023r 2  EA             nop               ; 2 cycles
000024r 2  EA             nop               ; 2 cycles
000025r 2  EA             nop               ; 2 cycles
000026r 2  EA             nop               ; 2 cycles
000027r 2  EA             nop               ; 2 cycles
000028r 2               
000028r 2               
000028r 2  88             dey               ; 2 cycles
000029r 2  D0 F6          bne delay_short_loop   ; 2 or 3 cycles
00002Br 2  7A             ply
00002Cr 2  60             rts
00002Dr 2               
00002Dr 1               ; .include "drivers/4004.s"
00002Dr 1               .include "drivers/cf.s"
00002Dr 2               
00002Dr 2               
00002Dr 2               
00002Dr 2               .segment "ZEROPAGE"
00000Er 2  xx xx        CF_BUF_PTR: .res 2
000010r 2               
000010r 2               .segment "DATA"
000338r 2  xx xx xx xx  CF_BUF: .res $200
00033Cr 2  xx xx xx xx  
000340r 2  xx xx xx xx  
000538r 2               
000538r 2  xx xx xx xx  CF_LBA: .res 4
00053Cr 2  xx xx xx xx  CF_PART_START: .res 4
000540r 2               
000540r 2               cf_wait:
000540r 2  5A               phy
000541r 2               @wait_loop:
000541r 2  A0 10            ldy #$10
000543r 2  20 rr rr         jsr delay_short
000546r 2  A9 2E            lda #'.'
000548r 2  20 rr rr         jsr kernel_putc
00054Br 2  AD D7 FF         lda CF_REG_7
00054Er 2  29 80            and #$80
000550r 2  D0 EF            bne @wait_loop
000552r 2  7A               ply
000553r 2  60               rts
000554r 2               
000554r 2               cf_init:
000554r 2  A9 04            lda #$4
000556r 2  8D D7 FF         sta CF_REG_7
000559r 2  20 rr rr         jsr cf_wait
00055Cr 2  A9 E0            lda #$E0
00055Er 2  8D D6 FF         sta CF_REG_6
000561r 2  A9 01            lda #$1
000563r 2  8D D1 FF         sta CF_REG_1
000566r 2  A9 EF            lda #$EF
000568r 2  8D D7 FF         sta CF_REG_7
00056Br 2  20 rr rr         jsr cf_wait
00056Er 2  20 rr rr         jsr cf_err
000571r 2  60               rts
000572r 2               
000572r 2               cf_read:
000572r 2  5A               phy
000573r 2  A0 00            ldy #0
000575r 2               @readloop1:
000575r 2  20 rr rr         jsr cf_wait
000578r 2  AD D7 FF         lda CF_REG_7
00057Br 2  29 08            and #$08
00057Dr 2  F0 0B            beq @exit
00057Fr 2               
00057Fr 2  AD D0 FF         lda CF_REG_0
000582r 2  91 rr            sta (CF_BUF_PTR), y
000584r 2  E6 rr            inc CF_BUF_PTR
000586r 2  F0 04            beq @incptr
000588r 2  80 EB            bra @readloop1
00058Ar 2               @exit:
00058Ar 2  7A               ply
00058Br 2  60               rts
00058Cr 2               @incptr:
00058Cr 2  E6 rr            inc CF_BUF_PTR+1
00058Er 2  80 E5            bra @readloop1
000590r 2               
000590r 2               cf_set_lba:
000590r 2  AD rr rr         lda CF_LBA
000593r 2  8D D3 FF         sta CF_REG_3
000596r 2  AD rr rr         lda CF_LBA + 1
000599r 2  8D D4 FF         sta CF_REG_4
00059Cr 2  AD rr rr         lda CF_LBA + 2
00059Fr 2  8D D5 FF         sta CF_REG_5
0005A2r 2  AD rr rr         lda CF_LBA + 3
0005A5r 2  29 0F            and #$0F
0005A7r 2  09 E0            ora #$E0
0005A9r 2  8D D6 FF         sta CF_REG_6
0005ACr 2  60               rts
0005ADr 2               
0005ADr 2               cf_read_sector:
0005ADr 2  A9 rr            lda #<CF_BUF
0005AFr 2  85 rr            sta CF_BUF_PTR
0005B1r 2  A9 rr            lda #>CF_BUF
0005B3r 2  85 rr            sta CF_BUF_PTR+1
0005B5r 2  20 rr rr         jsr cf_set_lba
0005B8r 2  A9 01            lda #1
0005BAr 2  8D D2 FF         sta CF_REG_2
0005BDr 2  20 rr rr         jsr cf_wait
0005C0r 2  A9 20            lda #CF_READ_SECTOR_COMMAND
0005C2r 2  8D D7 FF         sta CF_REG_7
0005C5r 2  20 rr rr         jsr cf_read
0005C8r 2  20 rr rr         jsr cf_err
0005CBr 2  60               rts
0005CCr 2               
0005CCr 2               cf_err:
0005CCr 2  20 rr rr         jsr cf_wait
0005CFr 2  AD D7 FF         lda CF_REG_7
0005D2r 2  29 01            and #$01
0005D4r 2  F0 05            beq @exit
0005D6r 2               @exit_fail:
0005D6r 2  A9 21            lda #'!'
0005D8r 2  20 rr rr         jsr kernel_putc
0005DBr 2               @exit:
0005DBr 2  60               rts
0005DCr 2               
0005DCr 2               cf_end:
0005DCr 2               
0005DCr 2               
0005DCr 1               ; .include "drivers/lcd.s"
0005DCr 1               ; .include "drivers/spi.s"
0005DCr 1               ; .include "drivers/sd.s"
0005DCr 1               ; .include "drivers/vga.s"
0005DCr 1               ; .include "drivers/fat32.s"
0005DCr 1               
0005DCr 1               .include "../../forth.s"
0005DCr 2               .include "../../macros.s"
0005DCr 3               .macro  printascii   addr
0005DCr 3                   ldx #0
0005DCr 3               @loop:
0005DCr 3                   lda addr,x
0005DCr 3                   beq @done
0005DCr 3                   jsr kernel_putc
0005DCr 3                   inx
0005DCr 3                   bra @loop
0005DCr 3               @done:
0005DCr 3               .endmacro
0005DCr 3               
0005DCr 3               
0005DCr 2               
0005DCr 2               
0005DCr 2               ; Definitions for Tali Forth 2
0005DCr 2               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0005DCr 2               ; First version: 01. Apr 2016 (Liara Forth)
0005DCr 2               ; This version: 29. Jan 2020
0005DCr 2               
0005DCr 2               ; This file is included by taliforth.asm. These are the general
0005DCr 2               ; definitions; platform-specific definitions such as the
0005DCr 2               ; memory map are kept in the platform folder.
0005DCr 2               
0005DCr 2               
0005DCr 2               ; User Variables:
0005DCr 2               ; Block variables
0005DCr 2               blk_offset =  0        ; BLK : UP + 0
0005DCr 2               scr_offset =  2        ; SCR : UP + 2
0005DCr 2               
0005DCr 2               ; Wordlists
0005DCr 2               current_offset =  4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
0005DCr 2               num_wordlists_offset =  5
0005DCr 2                                          ; #WORDLISTS (byte) : UP + 5
0005DCr 2               wordlists_offset =  6  ; WORDLISTS (cells) : UP + 6 to UP + 29
0005DCr 2                                          ;          (FORTH, EDITOR, ASSEMBLER, ROOT, +8 more)
0005DCr 2               num_order_offset =  30 ; #ORDER (byte) : UP + 30
0005DCr 2                                          ;          (Number of wordlists in search order)
0005DCr 2               search_order_offset =  31
0005DCr 2                                          ; SEARCH-ORDER (bytes) : UP + 31 to UP + 39
0005DCr 2                                          ; Allowing for 9 to keep offsets even.
0005DCr 2               max_wordlists =  12    ; Maximum number of wordlists supported
0005DCr 2                                          ; 4 Tali built-ins + 8 user wordlists
0005DCr 2               
0005DCr 2               ; Buffer variables
0005DCr 2               blkbuffer_offset =     40   ; Address of buffer
0005DCr 2               buffblocknum_offset =  42   ; Block number current in buffer
0005DCr 2               buffstatus_offset =    44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
0005DCr 2               
0005DCr 2               ; Block I/O vectors
0005DCr 2               blockread_offset =     46   ; Vector to block reading routine
0005DCr 2               blockwrite_offset =    48   ; Vector to block writing routine
0005DCr 2               
0005DCr 2               
0005DCr 2               ; ASCII CHARACTERS
0005DCr 2               AscCC =   $03  ; break (CTRL-c)
0005DCr 2               AscBELL = $07  ; bell sound
0005DCr 2               AscBS =   $08  ; backspace
0005DCr 2               AscLF =   $0a  ; line feed
0005DCr 2               AscCR =   $0d  ; carriage return
0005DCr 2               AscESC =  $1b  ; escape
0005DCr 2               AscSP =   $20  ; space
0005DCr 2               AscDEL =  $7f  ; delete (CTRL-h)
0005DCr 2               AscCP =   $10  ; CTRL-p (used to recall previous input history)
0005DCr 2               AscCN =   $0e  ; CTRL-n (used to recall next input history)
0005DCr 2               
0005DCr 2               ; DICTIONARY FLAGS
0005DCr 2               ; The first three bits are currently unused
0005DCr 2               CO = 1  ; Compile Only
0005DCr 2               AN = 2  ; Always Native Compile
0005DCr 2               IM = 4  ; Immediate Word
0005DCr 2               NN = 8  ; Never Native Compile
0005DCr 2               UF = 16 ; Includes Underflow Check (RESERVED)
0005DCr 2               HC = 32 ; Word has Code Field Area (CFA)
0005DCr 2               
0005DCr 2               
0005DCr 2               ; VARIOUS
0005DCr 2               MAX_LINE_LENGTH =   79      ; assumes 80 character lines
0005DCr 2               
0005DCr 2               ; END
0005DCr 2               
0005DCr 2               .segment "ZEROPAGE": zeropage
000010r 2               ; ZERO PAGE ADDRESSES/VARIABLES
000010r 2               
000010r 2               ; These are kept at the top of Zero Page, with the most important variables at
000010r 2               ; the top because the Data Stack grows towards this area from dsp0: If there is
000010r 2               ; an overflow, the lower, less important variables will be clobbered first,
000010r 2               ; giving the system a chance to recover. In other words, they are part of the
000010r 2               ; floodplain.
000010r 2               
000010r 2               ; The four variables insrc, cib, ciblen, and toin must stay together in this
000010r 2               ; sequence for the words INPUT>R and R>INPUT to work correctly.
000010r 2               
000010r 2  xx xx        cp: .res 2   ; Compiler Pointer
000012r 2  xx xx        dp: .res 2   ; Dictionary Pointer
000014r 2  xx xx        workword: .res 2   ; nt (not xt!) of word being compiled, except in
000016r 2                                          ; a :NONAME declared word (see status)
000016r 2  xx xx        insrc: .res 2   ; input Source for SOURCE-ID
000018r 2  xx xx        cib: .res 2   ; address of current input buffer
00001Ar 2  xx xx        ciblen: .res 2  ; length of current input buffer
00001Cr 2  xx xx        toin: .res 2  ; pointer to CIB (>IN in Forth)
00001Er 2  xx xx        ip: .res 2  ; Instruction Pointer (current xt)
000020r 2  xx xx        output: .res 2  ; vector for EMIT
000022r 2  xx xx        input: .res 2  ; vector for KEY
000024r 2  xx xx        havekey: .res 2  ; vector for KEY?
000026r 2  xx xx        state: .res 2  ; STATE: -1 compile, 0 interpret
000028r 2  xx xx        base: .res 2  ; number radix, default decimal
00002Ar 2  xx xx        nc_limit: .res 2  ; limit for Native Compile size
00002Cr 2  xx xx        uf_strip: .res 2  ; flag to strip underflow detection code
00002Er 2  xx xx        up: .res 2  ; User Pointer (Address of user variables)
000030r 2  xx xx        status: .res 2  ; internal status information
000032r 2                                          ; (used by : :NONAME ; ACCEPT)
000032r 2                                          ; Bit 7 = Redefined word message postpone
000032r 2                                          ;         When set before calling CREATE, it will
000032r 2                                          ;         not print the "redefined xxxx" message if
000032r 2                                          ;         the word exists. Instead, this bit will
000032r 2                                          ;         be reused and after CREATE has run, it will
000032r 2                                          ;         be set if the word was redefined and 0 if
000032r 2                                          ;         not. This bit should be 0 when not in use.
000032r 2                                          ; Bit 6 = 1 for normal ":" definitions
000032r 2                                          ;         WORKWORD contains nt of word being compiled
000032r 2                                          ;       = 0 for :NONAME definitions
000032r 2                                          ;         WORKWORD contains xt of word being compiled
000032r 2                                          ; Bit 5 = 1 for NUMBER returning a double word
000032r 2                                          ;       = 0 for NUMBER returning a single word
000032r 2                                          ; Bit 3 = 1 makes CTRL-n recall current history
000032r 2                                          ;       = 0 CTRL-n recalls previous history
000032r 2                                          ; Bit 2 = Current history buffer msb
000032r 2                                          ; Bit 1 = Current history buffer (0-7, wraps)
000032r 2                                          ; Bit 0 = Current history buffer lsb
000032r 2                                          ; status+1 is used by ACCEPT to hold history lengths.
000032r 2  xx xx        tmpbranch: .res 2  ; temporary storage for 0BRANCH, BRANCH only
000034r 2  xx xx        tmp1: .res 2  ; temporary storage
000036r 2  xx xx        tmp2: .res 2  ; temporary storage
000038r 2  xx xx        tmp3: .res 2  ; temporary storage (especially for print)
00003Ar 2  xx xx        tmpdsp: .res 2  ; temporary DSP (X) storage (two bytes)
00003Cr 2  xx xx        tmptos: .res 2  ; temporary TOS storage
00003Er 2  xx xx        editor1: .res 2  ; temporary for editors
000040r 2  xx xx        editor2: .res 2  ; temporary for editors
000042r 2  xx xx        editor3: .res 2  ; temporary for editors
000044r 2  xx xx        tohold: .res 2  ; pointer for formatted output
000046r 2  xx xx xx xx  scratch: .res 8  ; 8 byte scratchpad (see UM/MOD)
00004Ar 2  xx xx xx xx  
00004Er 2  xx xx xx xx  dsp_start: .res 128 ; reserve 128 bytes for data stack (64 16 bit cells)
000052r 2  xx xx xx xx  
000056r 2  xx xx xx xx  
0000CEr 2               dsp0 = $FF          ; first data stack location. Data stack grows down
0000CEr 2               rsp0 =      $FF     ; starting stack pointer
0000CEr 2               stack0 =    $0100   ; location of the stack
0000CEr 2               
0000CEr 2               
0000CEr 2               .segment "BSS"
00008Br 2  xx xx xx xx  hist_buff: .res $400
00008Fr 2  xx xx xx xx  
000093r 2  xx xx xx xx  
00048Br 2  xx xx xx xx  buffer0: .res $100
00048Fr 2  xx xx xx xx  
000493r 2  xx xx xx xx  
00058Br 2               
00058Br 2               .segment "DICTIONARY"   ; the dictionary gets its own segment so that it uses all the space left in RAM
000000r 2  xx xx xx xx  dictionary: .res $1000
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
001000r 2               
001000r 2               cp_end = $7FFF          ; the dictionary ends at RAM end (everything else is before)
001000r 2               
001000r 2               cp0 = dictionary
001000r 2               bsize =     $ff
001000r 2               padoffset = $ff
001000r 2               
001000r 2               
001000r 2               .segment "DATA"
0005DCr 2               
0005DCr 2               forth:
0005DCr 2                   .include "native_words.s"     ; Native Forth words. Starts with COLD
0005DCr 3               ; Low-level Forth word routines
0005DCr 3               ; Tali Forth 2 for the 65c02
0005DCr 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
0005DCr 3               ; First version: 19. Jan 2014
0005DCr 3               ; This version: 03. Jan 2018
0005DCr 3               
0005DCr 3               ; This list is ordered alphabetically by the names of the words, not their
0005DCr 3               ; strings (so "!" is sorted as "STORE"). However, we start off with COLD,
0005DCr 3               ; ABORT, and QUIT as the natural start sequence. Each word has two special
0005DCr 3               ; status lines that begins with "; ## ", which allows auto-generation of the
0005DCr 3               ; WORDLIST.md file and other entries in the docs folder. Status entries are:
0005DCr 3               
0005DCr 3               ;       TBA --> fragment --> coded --> tested --> auto
0005DCr 3               
0005DCr 3               ; "Auto" means that the word is automatically tested by the test suite (good),
0005DCr 3               ; "tested" means that it was tested by hand in some way (okay), "coded" means
0005DCr 3               ; it hasn't been tested at all (bad). See the test suite for more details.
0005DCr 3               
0005DCr 3               ; ## COLD ( -- ) "Reset the Forth system"
0005DCr 3               ; ## "cold"  tested  Tali Forth
0005DCr 3               ;       """Reset the Forth system. Does not restart the kernel,
0005DCr 3               ;       use the 65c02 reset for that. Flows into ABORT.
0005DCr 3               ;       """
0005DCr 3               xt_cold:
0005DCr 3  D8                           cld
0005DDr 3               
0005DDr 3                               ; Set the OUTPUT vector to the default kernel_putc
0005DDr 3                               ; We do this really early so we can print error messages
0005DDr 3                               ; during debugging
0005DDr 3  A9 rr                        lda #<kernel_putc
0005DFr 3  85 rr                        sta output
0005E1r 3  A9 rr                        lda #>kernel_putc
0005E3r 3  85 rr                        sta output+1
0005E5r 3               
0005E5r 3                               ; Load all of the important zero page variables from ROM
0005E5r 3  A2 21                        ldx #cold_zp_table_end-cold_zp_table-1
0005E7r 3               
0005E7r 3               @load_zp_loop:
0005E7r 3                               ; This loop loads them back to front. We can use X here
0005E7r 3                               ; because Tali hasn't started using the stack yet.
0005E7r 3  BD rr rr                     lda cold_zp_table,x
0005EAr 3  95 rr                        sta cp,x
0005ECr 3  CA                           dex
0005EDr 3  D0 F8                        bne @load_zp_loop
0005EFr 3               
0005EFr 3                               ; Copy the 0th element.
0005EFr 3  AD rr rr                     lda cold_zp_table
0005F2r 3  85 rr                        sta cp
0005F4r 3                               ; Initialize 65c02 stack (Return Stack)
0005F4r 3  A2 FF                        ldx #rsp0
0005F6r 3  9A                           txs
0005F7r 3               
0005F7r 3                               ; Clear Data Stack. This is repeated in ABORT, but this way we
0005F7r 3                               ; can load high-level words with EVALUATE
0005F7r 3  A2 FF                        ldx #dsp0
0005F9r 3               
0005F9r 3               
0005F9r 3                               ; Initialize the user variables.
0005F9r 3  A0 31                        ldy #cold_user_table_end-cold_user_table-1
0005FBr 3  A9 00                        lda #0
0005FDr 3               
0005FDr 3               @load_user_vars_loop:
0005FDr 3                               ; Like the zero page variables, these are initialized
0005FDr 3                               ; back to front.
0005FDr 3  B9 rr rr                     lda cold_user_table,y
000600r 3  91 rr                        sta (up),y
000602r 3  88                           dey
000603r 3  D0 F8                        bne @load_user_vars_loop
000605r 3               
000605r 3                               ; Copy the 0th element.
000605r 3  AD rr rr                     lda cold_user_table
000608r 3  92 rr                        sta (up)
00060Ar 3  20 rr rr                     jsr xt_cr
00060Dr 3               
00060Dr 3                               ; Define high-level words in forth_words.asm via EVALUATE. If
00060Dr 3                               ; you do not have any high-level words, this part can be
00060Dr 3                               ; commented out.
00060Dr 3  CA                           dex
00060Er 3  CA                           dex
00060Fr 3  CA                           dex
000610r 3  CA                           dex
000611r 3               
000611r 3               
000611r 3                               ; start address goes NOS
000611r 3  A9 rr                        lda #<forth_words_start
000613r 3  95 02                        sta 2,x
000615r 3  A9 rr                        lda #>forth_words_start
000617r 3  95 03                        sta 3,x
000619r 3               
000619r 3                               ; length goes TOS
000619r 3  A9 rr                        lda #<forth_words_end
00061Br 3  38                           sec
00061Cr 3  E9 rr                        sbc #<forth_words_start
00061Er 3  95 00                        sta 0,x
000620r 3               
000620r 3  A9 rr                        lda #>forth_words_end
000622r 3  E9 rr                        sbc #>forth_words_start
000624r 3  95 01                        sta 1,x
000626r 3               
000626r 3               
000626r 3  20 rr rr                     jsr xt_evaluate
000629r 3               
000629r 3                               ; Now define any user words via EVALUATE. If you do not have
000629r 3                               ; any user-defined words, this part can be commented out as
000629r 3                               ; well.
000629r 3  CA                           dex
00062Ar 3  CA                           dex
00062Br 3  CA                           dex
00062Cr 3  CA                           dex
00062Dr 3               
00062Dr 3               
00062Dr 3                               ; start address goes NOS
00062Dr 3  A9 rr                        lda #<user_words_start
00062Fr 3  95 02                        sta 2,x
000631r 3  A9 rr                        lda #>user_words_start
000633r 3  95 03                        sta 3,x
000635r 3               
000635r 3                               ; length goes TOS
000635r 3  A9 rr                        lda #<user_words_end
000637r 3  38                           sec
000638r 3  E9 rr                        sbc #<user_words_start
00063Ar 3  95 00                        sta 0,x
00063Cr 3               
00063Cr 3  A9 rr                        lda #>user_words_end
00063Er 3  E9 rr                        sbc #>user_words_start
000640r 3  95 01                        sta 1,x
000642r 3               
000642r 3  20 rr rr                     jsr xt_evaluate
000645r 3               
000645r 3                               ; Initialize all of the history buffers by putting a zero in
000645r 3                               ; each length byte.
000645r 3  9C rr rr                     stz hist_buff
000648r 3  9C rr rr                     stz hist_buff+$80
00064Br 3  9C rr rr                     stz hist_buff+$100
00064Er 3  9C rr rr                     stz hist_buff+$180
000651r 3  9C rr rr                     stz hist_buff+$200
000654r 3  9C rr rr                     stz hist_buff+$280
000657r 3  9C rr rr                     stz hist_buff+$300
00065Ar 3  9C rr rr                     stz hist_buff+$380
00065Dr 3               
00065Dr 3               
00065Dr 3                               ; fall through to ABORT
00065Dr 3               
00065Dr 3               
00065Dr 3               ; ## ABORT ( -- ) "Reset the Data Stack and restart the CLI"
00065Dr 3               ; ## "abort"  tested  ANS core
00065Dr 3                       ; """https://forth-standard.org/standard/core/ABORT
00065Dr 3                       ; Clear Data Stack and continue into QUIT. We can jump here via
00065Dr 3                       ; subroutine if we want to because we are going to reset the 65c02's
00065Dr 3                       ; stack pointer (the Return Stack) anyway during QUIT. Note we don't
00065Dr 3                       ; actually delete the stuff on the Data Stack.
00065Dr 3                       ; """
00065Dr 3               xt_abort:
00065Dr 3  A2 FF                        ldx #dsp0
00065Fr 3               
00065Fr 3                               ; fall through to QUIT
00065Fr 3               
00065Fr 3               
00065Fr 3               ; ## QUIT ( -- ) "Reset the input and get new input"
00065Fr 3               ; ## "quit"  tested  ANS core
00065Fr 3                       ; """https://forth-standard.org/standard/core/QUIT
00065Fr 3                       ; Rest the input and start command loop
00065Fr 3                       ; """
00065Fr 3               
00065Fr 3               xt_quit:
00065Fr 3                               ; Clear the Return Stack. This is a little screwed up
00065Fr 3                               ; because the 65c02 can only set the Return Stack via X,
00065Fr 3                               ; which is our Data Stack pointer. The ANS specification
00065Fr 3                               ; demands, however, that ABORT reset the Data Stack pointer
00065Fr 3  8A                           txa             ; Save the DSP that we just defined
000660r 3  A2 FF                        ldx #rsp0
000662r 3  9A                           txs
000663r 3  AA                           tax             ; Restore the DSP. Dude, seriously.
000664r 3               
000664r 3                               ; make sure instruction pointer is empty
000664r 3  64 rr                        stz ip
000666r 3  64 rr                        stz ip+1
000668r 3               
000668r 3                               ; SOURCE-ID is zero (keyboard input)
000668r 3  64 rr                        stz insrc
00066Ar 3  64 rr                        stz insrc+1
00066Cr 3               
00066Cr 3                               ; STATE is zero (interpret, not compile)
00066Cr 3  64 rr                        stz state
00066Er 3  64 rr                        stz state+1
000670r 3               @get_line:
000670r 3  A9 rr                        lda #<buffer0   ; input buffer, this is paranoid
000672r 3  85 rr                        sta cib
000674r 3  A9 rr                        lda #>buffer0
000676r 3  85 rr                        sta cib+1
000678r 3               
000678r 3                               ; Size of current input buffer (CIB) is zero
000678r 3  64 rr                        stz ciblen
00067Ar 3  64 rr                        stz ciblen+1
00067Cr 3               
00067Cr 3                               ; Accept a line from the current import source. This is how
00067Cr 3                               ; modern Forths to it.
00067Cr 3  20 rr rr                     jsr xt_refill           ; ( -- f )
00067Fr 3               
00067Fr 3                               ; Test flag: LSB of TOS
00067Fr 3  B5 00                        lda 0,x
000681r 3  D0 05                        bne @success
000683r 3               
000683r 3                               ; If REFILL returned a FALSE flag, something went wrong and we
000683r 3                               ; need to print an error message and reset the machine. We
000683r 3                               ; don't need to save TOS because we're going to clobber it
000683r 3                               ; anyway when we go back to ABORT.
000683r 3  A9 06                        lda #err_refill
000685r 3  4C rr rr                     jmp error
000688r 3               
000688r 3               @success:
000688r 3                               ; Assume we have successfully accepted a string of input from
000688r 3                               ; a source, with address cib and length of input in ciblen. We
000688r 3                               ; arrive here still with the TRUE flag from REFILL as TOS
000688r 3  E8                           inx                     ; drop
000689r 3  E8                           inx
00068Ar 3               
00068Ar 3                               ; Main compile/execute routine
00068Ar 3  20 rr rr                     jsr interpret
00068Dr 3               
00068Dr 3                               ; Test for Data Stack underflow. Tali Forth does not check for
00068Dr 3                               ; overflow because it is so rare
00068Dr 3  E0 FF                        cpx #dsp0
00068Fr 3  F0 05                        beq @stack_ok
000691r 3  90 03                        bcc @stack_ok           ; DSP must always be smaller than DSP0
000693r 3               
000693r 3  4C rr rr                     jmp underflow_error
000696r 3               
000696r 3               @stack_ok:
000696r 3                               ; Display system prompt if all went well. If we're interpreting,
000696r 3                               ; this is " ok", if we're compiling, it's " compiled". Note
000696r 3                               ; space at beginning of the string.
000696r 3  A5 rr                        lda state
000698r 3  F0 02                        beq @print
00069Ar 3               
00069Ar 3  A9 01                        lda #1                  ; number for "compile" string
00069Cr 3               @print:
00069Cr 3  20 rr rr                     jsr print_string
00069Fr 3               
00069Fr 3                               ; Awesome line, everybody! Now get the next one.
00069Fr 3  80 CF                        bra @get_line
0006A1r 3               
0006A1r 3               z_cold:
0006A1r 3               z_abort:
0006A1r 3               z_quit:         ; no RTS required
0006A1r 3               
0006A1r 3               
0006A1r 3               
0006A1r 3               ; This table holds all of the initial values for the variables in zero page.
0006A1r 3               ; This table is used by COLD.
0006A1r 3               cold_zp_table:
0006A1r 3  rr rr                .word cp0+256+1024      ; cp moved to make room for user vars and
0006A3r 3                                               ; block buffer
0006A3r 3  rr rr                .word dictionary_start  ; dp
0006A5r 3  00 00                .word 0                 ; workword
0006A7r 3  00 00                .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
0006A9r 3  rr rr                .word buffer0           ; cib
0006ABr 3  00 00                .word 0                 ; ciblen
0006ADr 3  00 00                .word 0                 ; toin
0006AFr 3  00 00                .word 0                 ; ip
0006B1r 3  rr rr                .word kernel_putc       ; output
0006B3r 3  rr rr                .word kernel_getc       ; input
0006B5r 3  00 00                .word 0                 ; havekey
0006B7r 3  00 00                .word 0                 ; state (0 = interpret)
0006B9r 3  0A 00                .word 10                ; base
0006BBr 3  14 00                .word 20                ; nc-limit
0006BDr 3  00 00                .word 0                 ; uf_strip (off by default)
0006BFr 3  rr rr                .word cp0               ; up (user vars put right at beginning of
0006C1r 3                                               ; available RAM)
0006C1r 3  00 00                .word 0                 ; status
0006C3r 3               cold_zp_table_end:
0006C3r 3               
0006C3r 3               ; No further ZP variables are initialized. The variables past this point are
0006C3r 3               ; all temporaries.
0006C3r 3               
0006C3r 3               ; This table holds the inital values for the user variables. This table is
0006C3r 3               ; used by COLD.
0006C3r 3               cold_user_table:
0006C3r 3  00 00                .word 0                         ; BLK
0006C5r 3  00 00                .word 0                         ; SCR
0006C7r 3  00                   .byte 0                         ; CURRENT = FORTH-WORDLIST
0006C8r 3  04                   .byte 4                         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
0006C9r 3  rr rr                .word dictionary_start          ; FORTH-WORDLIST
0006CBr 3  rr rr                .word editor_dictionary_start   ; EDITOR-WORDLIST
0006CDr 3  rr rr                .word assembler_dictionary_start ; ASSEMBLER-WORDLIST
0006CFr 3  rr rr                .word root_dictionary_start     ; ROOT-WORDLIST
0006D1r 3  00 00 00 00          .word 0,0,0,0,0,0,0,0           ; User wordlists
0006D5r 3  00 00 00 00  
0006D9r 3  00 00 00 00  
0006E1r 3  01                   .byte 1                         ; #ORDER
0006E2r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0         ; search-order
0006E6r 3  00 00 00 00  
0006EAr 3  00           
0006EBr 3  rr rr                .word cp0+256                   ; Address of buffer (right after USER vars)
0006EDr 3  00 00                .word 0                         ; block in buffer
0006EFr 3  00 00                .word 0                         ; buffer status (not in use)
0006F1r 3  rr rr                .word xt_block_word_error       ; block-read vector
0006F3r 3  rr rr                .word xt_block_word_error       ; block-write vector
0006F5r 3               cold_user_table_end:
0006F5r 3               
0006F5r 3               
0006F5r 3               ; ## ABORT_QUOTE ( "string" -- ) "If flag TOS is true, ABORT with message"
0006F5r 3               ; ## "abort""  tested  ANS core
0006F5r 3                       ; """https://forth-standard.org/standard/core/ABORTq
0006F5r 3                       ; Abort and print a string.
0006F5r 3                       ; """
0006F5r 3               
0006F5r 3               xt_abort_quote:
0006F5r 3                               ; save the string
0006F5r 3  20 rr rr                     jsr xt_s_quote          ; S"
0006F8r 3               
0006F8r 3                               ; compile run-time part
0006F8r 3  A0 rr                        ldy #>abort_quote_runtime
0006FAr 3  A9 rr                        lda #<abort_quote_runtime
0006FCr 3  20 rr rr                     jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
0006FFr 3               
0006FFr 3  60           z_abort_quote:  rts
000700r 3               
000700r 3               
000700r 3               abort_quote_runtime:
000700r 3                       ; """Runtime aspect of ABORT_QUOTE"""
000700r 3               
000700r 3                               ; We arrive here with ( f addr u )
000700r 3  B5 04                        lda 4,x
000702r 3  15 05                        ora 5,x
000704r 3  F0 09                        beq @done       ; if FALSE, we're done
000706r 3               
000706r 3                               ; We're true, so print string and ABORT. We follow Gforth
000706r 3                               ; in going to a new line after the string
000706r 3  20 rr rr                     jsr xt_type
000709r 3  20 rr rr                     jsr xt_cr
00070Cr 3  4C rr rr                     jmp xt_abort    ; not JSR, so never come back
00070Fr 3               @done:
00070Fr 3                               ; Drop three entries from the Data Stack
00070Fr 3  8A                           txa
000710r 3  18                           clc
000711r 3  69 06                        adc #6
000713r 3  AA                           tax
000714r 3               
000714r 3  60                           rts
000715r 3               
000715r 3               
000715r 3               
000715r 3               ; ## ABS ( n -- u ) "Return absolute value of a number"
000715r 3               ; ## "abs"  auto  ANS core
000715r 3                       ; """https://forth-standard.org/standard/core/ABS
000715r 3                       ; Return the absolute value of a number.
000715r 3                       ; """
000715r 3               
000715r 3               xt_abs:
000715r 3  20 rr rr                     jsr underflow_1
000718r 3               
000718r 3  B5 01                        lda 1,x
00071Ar 3  10 0D                        bpl @done       ; positive number, easy money!
00071Cr 3               
00071Cr 3                               ; negative: calculate 0 - n
00071Cr 3  38                           sec
00071Dr 3  A9 00                        lda #0
00071Fr 3  F5 00                        sbc 0,x         ; LSB
000721r 3  95 00                        sta 0,x
000723r 3               
000723r 3  A9 00                        lda #0          ; MSB
000725r 3  F5 01                        sbc 1,x
000727r 3  95 01                        sta 1,x
000729r 3               
000729r 3               @done:
000729r 3  60           z_abs:          rts
00072Ar 3               
00072Ar 3               
00072Ar 3               
00072Ar 3               ; ## ACCEPT ( addr n -- n ) "Receive a string of characters from the keyboard"
00072Ar 3               ; ## "accept"  auto  ANS core
00072Ar 3                       ; """https://forth-standard.org/standard/core/ACCEPT
00072Ar 3                       ; Receive a string of at most n1 characters, placing them at
00072Ar 3                       ; addr. Return the actual number of characters as n2. Characters
00072Ar 3                       ; are echoed as they are received. ACCEPT is called by REFILL in
00072Ar 3                       ; modern Forths.
00072Ar 3                       ; """
00072Ar 3               
00072Ar 3               xt_accept:
00072Ar 3  20 rr rr                     jsr underflow_2
00072Dr 3               
00072Dr 3                               ; Abort if we were asked to receive 0 chars
00072Dr 3  B5 00                        lda 0,x
00072Fr 3  15 01                        ora 1,x
000731r 3  D0 09                        bne @not_zero
000733r 3               
000733r 3  E8                           inx
000734r 3  E8                           inx
000735r 3  74 00                        stz 0,x
000737r 3  74 01                        stz 1,x
000739r 3               
000739r 3  4C rr rr                     jmp accept_done
00073Cr 3               
00073Cr 3               @not_zero:
00073Cr 3  B5 00                        lda 0,x         ; number of chars to get in tmp2 ...
00073Er 3  85 rr                        sta tmp2
000740r 3  64 rr                        stz tmp2+1      ; ... but we only accept max 255 chars
000742r 3               
000742r 3  B5 02                        lda 2,x         ; address of buffer is NOS, to tmp1
000744r 3  85 rr                        sta tmp1
000746r 3  B5 03                        lda 3,x
000748r 3  85 rr                        sta tmp1+1
00074Ar 3               
00074Ar 3  E8                           inx
00074Br 3  E8                           inx
00074Cr 3               
00074Cr 3  A0 00                        ldy #0
00074Er 3               
00074Er 3                               ; Select the next history buffer. Clear bit 3 first (so overflow
00074Er 3                               ; from bit 2 to 3 is OK)
00074Er 3  A5 rr                        lda status
000750r 3  29 F7                        and #$f7
000752r 3               
000752r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
000752r 3  1A                           inc
000753r 3               
000753r 3                               ; Set bit 3 for detecting if CTRL-n has been pressed the first
000753r 3                               ; time. This bit will be cleared on the first CTRL-n or CTRL-p
000753r 3                               ; received and won't be used to calculate the history buffer
000753r 3                               ; offset.
000753r 3  09 08                        ora #$08
000755r 3  85 rr                        sta status
000757r 3               
000757r 3               accept_loop:
000757r 3                               ; Out of the box, py65mon catches some CTRL sequences such as
000757r 3                               ; CTRL-c. We also don't need to check for CTRL-l because a
000757r 3                               ; vt100 terminal clears the screen automatically.
000757r 3               
000757r 3                               ; This is the internal version of KEY without all the mucking
000757r 3                               ; about with the Data Stack while still using the input vector
000757r 3  20 rr rr                     jsr key_a
00075Ar 3               
00075Ar 3                               ; We quit on both line feed and carriage return
00075Ar 3  C9 0A                        cmp #AscLF
00075Cr 3  F0 20                        beq @eol
00075Er 3  C9 0D                        cmp #AscCR
000760r 3  F0 1C                        beq @eol
000762r 3               
000762r 3                               ; BACKSPACE and DEL do the same thing for the moment
000762r 3  C9 08                        cmp #AscBS
000764r 3  F0 22                        beq @backspace
000766r 3  C9 7F                        cmp #AscDEL     ; (CTRL-h)
000768r 3  F0 1E                        beq @backspace
00076Ar 3               
00076Ar 3                               ; Check for CTRL-p and CTRL-n to recall input history
00076Ar 3  C9 10                        cmp #AscCP
00076Cr 3  F0 36                        beq @ctrl_p
00076Er 3  C9 0E                        cmp #AscCN
000770r 3  F0 44                        beq @ctrl_n
000772r 3               
000772r 3                               ; That's enough for now. Save and echo character.
000772r 3  91 rr                        sta (tmp1),y
000774r 3  C8                           iny
000775r 3               
000775r 3                               ; EMIT_A sidesteps all the fooling around with the Data Stack
000775r 3  20 rr rr                     jsr emit_a
000778r 3               
000778r 3  C4 rr                        cpy tmp2        ; reached character limit?
00077Ar 3  D0 DB                        bne accept_loop       ; fall through if buffer limit reached
00077Cr 3  80 03                        bra @buffer_full
00077Er 3               
00077Er 3               @eol:
00077Er 3  20 rr rr                     jsr xt_space    ; print final space
000781r 3               
000781r 3               @buffer_full:
000781r 3                               ; REFILL updates ciblen and toin, we don't need to do it here
000781r 3  94 00                        sty 0,x         ; Y contains number of chars accepted already
000783r 3  74 01                        stz 1,x         ; we only accept 256 chars
000785r 3               
000785r 3  4C rr rr                     jmp accept_done
000788r 3               
000788r 3               @backspace:
000788r 3                               ; Handle backspace and delete kex, which currently do the same
000788r 3                               ; thing
000788r 3  C0 00                        cpy #0          ; buffer empty?
00078Ar 3  D0 06                        bne @1
00078Cr 3               
00078Cr 3  A9 07                        lda #AscBELL    ; complain and don't delete beyond the start of line
00078Er 3  20 rr rr                     jsr emit_a
000791r 3  C8                           iny
000792r 3               @1:
000792r 3  88                           dey
000793r 3  A9 08                        lda #AscBS      ; move back one
000795r 3  20 rr rr                     jsr emit_a
000798r 3  A9 20                        lda #AscSP      ; print a space (rubout)
00079Ar 3  20 rr rr                     jsr emit_a
00079Dr 3  A9 08                        lda #AscBS      ; move back over space
00079Fr 3  20 rr rr                     jsr emit_a
0007A2r 3               
0007A2r 3  80 B3                        bra accept_loop
0007A4r 3               
0007A4r 3               @ctrl_p:
0007A4r 3                               ; CTRL-p was pressed. Recall the previous input buffer.
0007A4r 3               
0007A4r 3                               ; Select the previous buffer
0007A4r 3  A5 rr                        lda status
0007A6r 3               
0007A6r 3                               ; Check for 0 (need to wrap back to 7)
0007A6r 3  29 07                        and #7
0007A8r 3  D0 08                        bne @ctrl_p_dec
0007AAr 3               
0007AAr 3                               ; We need to wrap back to 7.
0007AAr 3  A5 rr                        lda status
0007ACr 3  09 07                        ora #7
0007AEr 3  85 rr                        sta status
0007B0r 3  80 11                        bra @recall_history
0007B2r 3               
0007B2r 3               @ctrl_p_dec:
0007B2r 3                               ; It's safe to decrement the buffer index directly.
0007B2r 3  C6 rr                        dec status
0007B4r 3  80 0D                        bra @recall_history
0007B6r 3               
0007B6r 3               @ctrl_n:
0007B6r 3                               ; CTRL-n was pressed. Recall the next input buffer. Select
0007B6r 3                               ; the next buffer Check bit 3. If it's set, this is the first
0007B6r 3                               ; time CTRL-n has been pressed and we should select the CURRENT
0007B6r 3                               ; history buffer.
0007B6r 3  A9 08                        lda #$8
0007B8r 3  24 rr                        bit status
0007BAr 3  D0 07                        bne @recall_history
0007BCr 3               
0007BCr 3                               ; This isn't the first time CTRL-n has been pressed, select the
0007BCr 3                               ; next history buffer. Clear bit 3 first (so overflow is OK)
0007BCr 3  A5 rr                        lda status
0007BEr 3  29 F7                        and #$f7
0007C0r 3               
0007C0r 3                               ; Increment the buffer number (overflow from 7 to 0 OK)
0007C0r 3  1A                           inc
0007C1r 3               
0007C1r 3                               ; Bit 3 (if it got set by going from buffer 7 to 0) will
0007C1r 3                               ; be cleared below.
0007C1r 3  85 rr                        sta status
0007C3r 3               
0007C3r 3                               ; Falls through to @recall_history
0007C3r 3               
0007C3r 3               @recall_history:
0007C3r 3                               ; Clear bit 3 (first time ctrl-n recall) bit in status
0007C3r 3  A9 08                        lda #%00001000
0007C5r 3  14 rr                        trb status
0007C7r 3               
0007C7r 3  20 rr rr                     jsr total_recall
0007CAr 3               
0007CAr 3                               ; tmp3 now has the address of the previous history buffer.
0007CAr 3                               ; First byte of buffer is length. Clear the line by sending
0007CAr 3                               ; CR, Y spaces, then CR.
0007CAr 3  A9 0D                        lda #AscCR
0007CCr 3  20 rr rr                     jsr emit_a
0007CFr 3               
0007CFr 3               input_clear:
0007CFr 3  C0 00                        cpy #0
0007D1r 3  F0 08                        beq input_cleared
0007D3r 3               
0007D3r 3  A9 20                        lda #AscSP
0007D5r 3  20 rr rr                     jsr emit_a
0007D8r 3  88                           dey
0007D9r 3  80 F4                        bra input_clear
0007DBr 3               
0007DBr 3               input_cleared:
0007DBr 3  A9 0D                        lda #AscCR
0007DDr 3  20 rr rr                     jsr emit_a
0007E0r 3               
0007E0r 3                               ; Save the history length byte into histinfo+1
0007E0r 3                               ; ldy #0        ; Y is already 0 by clearing the line.
0007E0r 3  B1 rr                        lda (tmp3),y
0007E2r 3  85 rr                        sta status+1
0007E4r 3               
0007E4r 3                               ; Increment the tmp3 pointer so we can use ,y addressing
0007E4r 3                               ; on both tmp1 (the input buffer) and tmp3 (the history
0007E4r 3                               ; buffer)
0007E4r 3  E6 rr                        inc tmp3
0007E6r 3  D0 02                        bne @2           ; Increment the upper byte on carry.
0007E8r 3  E6 rr                        inc tmp3+1
0007EAr 3               @2:
0007EAr 3                               ; Copy the history buffer into the input buffer,
0007EAr 3                               ; sending the characters to the output as we go.
0007EAr 3  A9 0D                        lda #AscCR
0007ECr 3  20 rr rr                     jsr emit_a
0007EFr 3               
0007EFr 3               @history_loop:
0007EFr 3                               ; See if we have reached the end of the history buffer.
0007EFr 3  C4 rr                        cpy status+1
0007F1r 3  D0 03                        bne @3
0007F3r 3  4C rr rr                     jmp accept_loop       ; Needs a long jump
0007F6r 3               @3:
0007F6r 3                               ; See if we have reached the end of the input buffer.
0007F6r 3                               ; (only comparing to lower byte as we currently limit
0007F6r 3                               ; to 255 characters max)
0007F6r 3  C4 rr                        cpy tmp2
0007F8r 3  F0 0A                        beq @hist_filled_buffer
0007FAr 3               
0007FAr 3                               ; Copy a character and echo.
0007FAr 3  B1 rr                        lda (tmp3),y
0007FCr 3  91 rr                        sta (tmp1),y
0007FEr 3  20 rr rr                     jsr emit_a
000801r 3               
000801r 3                               ; Move to the next character.
000801r 3  C8                           iny
000802r 3  80 EB                        bra @history_loop
000804r 3               
000804r 3               @hist_filled_buffer:
000804r 3                               ; We don't want a history recall to EOL our buffer,
000804r 3                               ; so back up one character and return to editing.
000804r 3  88                           dey
000805r 3  4C rr rr                     jmp accept_loop
000808r 3               accept_done:
000808r 3               @done:
000808r 3                               ; Copy the input buffer into the currently
000808r 3                               ; selected history buffer.
000808r 3  20 rr rr                     jsr total_recall
00080Br 3  85 rr                        sta status+1
00080Dr 3               
00080Dr 3                               ; Also save it in the first buffer byte.
00080Dr 3  A0 00                        ldy #0
00080Fr 3  91 rr                        sta (tmp3),y
000811r 3               
000811r 3                               ; Move path the count to the data bytes
000811r 3  E6 rr                        inc tmp3
000813r 3  D0 02                        bne @4           ; Increment the upper byte on carry.
000815r 3  E6 rr                        inc tmp3+1
000817r 3               @4:
000817r 3                               ; Copy the characters from the input buffer to the
000817r 3                               ; history buffer.
000817r 3               
000817r 3               @save_history_loop:
000817r 3  C4 rr                        cpy status+1
000819r 3  F0 07                        beq @save_history_done
00081Br 3               
00081Br 3  B1 rr                        lda (tmp1),y
00081Dr 3  91 rr                        sta (tmp3),y
00081Fr 3  C8                           iny
000820r 3  80 F5                        bra @save_history_loop
000822r 3               
000822r 3               @save_history_done:
000822r 3               z_accept:
000822r 3  60                           rts
000823r 3               
000823r 3               total_recall:
000823r 3                       ; """Internal subroutine for ACCEPT that recalls history entry"""
000823r 3               
000823r 3                               ; Generate the address of the buffer in tmp3. Start with the
000823r 3                               ; base address.
000823r 3  A9 rr                        lda #<hist_buff
000825r 3  85 rr                        sta tmp3
000827r 3  A9 rr                        lda #>hist_buff
000829r 3  85 rr                        sta tmp3+1
00082Br 3               
00082Br 3                               ; This is a bit annoying as some bits go into each byte.
00082Br 3                               ; .....xxx gets put into address like ......xx x.......
00082Br 3  A5 rr                        lda status
00082Dr 3  6A                           ror
00082Er 3  29 03                        and #3
000830r 3  18                           clc
000831r 3  65 rr                        adc tmp3+1
000833r 3  85 rr                        sta tmp3+1
000835r 3               
000835r 3  A5 rr                        lda status
000837r 3  6A                           ror             ; Rotate through carry into msb.
000838r 3  6A                           ror
000839r 3  29 80                        and #$80
00083Br 3  18                           clc
00083Cr 3  65 rr                        adc tmp3
00083Er 3  85 rr                        sta tmp3
000840r 3  90 02                        bcc @1           ; Increment the upper byte on carry.
000842r 3  E6 rr                        inc tmp3+1
000844r 3               @1:
000844r 3                               ; Save the current length of the input buffer in
000844r 3                               ; histinfo+1 temporarily.  Reduce to 127 if larger.
000844r 3  98                           tya
000845r 3  C9 80                        cmp #$80
000847r 3  90 02                        bcc @2
000849r 3  A9 7F                        lda #$7F
00084Br 3               @2:
00084Br 3  60                           rts
00084Cr 3               
00084Cr 3               
00084Cr 3               
00084Cr 3               
00084Cr 3               
00084Cr 3               ; ## ACTION_OF ( "name" -- xt ) "Get named deferred word's xt"
00084Cr 3               ; ## "action-of"  auto  ANS core ext
00084Cr 3                       ; """http://forth-standard.org/standard/core/ACTION-OF"""
00084Cr 3               
00084Cr 3               xt_action_of:
00084Cr 3                               ; This is a state aware word with differet behavior
00084Cr 3                               ; when used while compiling vs interpreting.
00084Cr 3                               ; Check STATE
00084Cr 3  A5 rr                        lda state
00084Er 3  05 rr                        ora state+1
000850r 3  F0 0C                        beq @interpreting
000852r 3               
000852r 3               @compiling:
000852r 3                               ; Run ['] to compile the xt of the next word
000852r 3                               ; as a literal.
000852r 3  20 rr rr                     jsr xt_bracket_tick
000855r 3               
000855r 3                               ; Postpone DEFER@ by compiling a JSR to it.
000855r 3  A0 rr                        ldy #>xt_defer_fetch
000857r 3  A9 rr                        lda #<xt_defer_fetch
000859r 3  20 rr rr                     jsr cmpl_subroutine
00085Cr 3  80 06                        bra @done
00085Er 3               
00085Er 3               @interpreting:
00085Er 3  20 rr rr                     jsr xt_tick
000861r 3  20 rr rr                     jsr xt_defer_fetch
000864r 3               
000864r 3               @done:
000864r 3  60           z_action_of:           rts
000865r 3               
000865r 3               
000865r 3               
000865r 3               ; ## AGAIN ( addr -- ) "Code backwards branch to address left by BEGIN"
000865r 3               ; ## "again"  tested  ANS core ext
000865r 3                       ; """https://forth-standard.org/standard/core/AGAIN"""
000865r 3               
000865r 3               xt_again:
000865r 3  20 rr rr                     jsr underflow_1
000868r 3               
000868r 3                               ; Add the opcode for a JMP. We use JMP instead of BRA
000868r 3                               ; so we have the range and don't have to calculate the
000868r 3                               ; offset.
000868r 3  A0 00                        ldy #0
00086Ar 3  A9 4C                        lda #$4C        ; JMP
00086Cr 3  91 rr                        sta (cp),y
00086Er 3  C8                           iny
00086Fr 3               
00086Fr 3  B5 00                        lda 0,x         ; LSB of address
000871r 3  91 rr                        sta (cp),y
000873r 3  C8                           iny
000874r 3               
000874r 3  B5 01                        lda 1,x         ; MSB of address
000876r 3  91 rr                        sta (cp),y
000878r 3  C8                           iny
000879r 3               
000879r 3                               ; Allot the space we just used
000879r 3  98                           tya
00087Ar 3  18                           clc
00087Br 3  65 rr                        adc cp
00087Dr 3  85 rr                        sta cp
00087Fr 3  90 02                        bcc @done
000881r 3  E6 rr                        inc cp+1
000883r 3               @done:
000883r 3  E8                           inx
000884r 3  E8                           inx
000885r 3               
000885r 3  60           z_again:        rts
000886r 3               
000886r 3               
000886r 3               
000886r 3               ; ## ALIGN ( -- ) "Make sure CP is aligned on word size"
000886r 3               ; ## "align"  auto  ANS core
000886r 3                       ; """https://forth-standard.org/standard/core/ALIGN
000886r 3                       ; On a 8-bit machine, this does nothing. ALIGNED uses this
000886r 3                       ; routine as well, and also does nothing
000886r 3                       ; """
000886r 3               
000886r 3               ; ## ALIGNED ( addr -- addr ) "Return the first aligned address"
000886r 3               ; ## "aligned"  auto  ANS core
000886r 3                       ; """https://forth-standard.org/standard/core/ALIGNED"""
000886r 3               
000886r 3               xt_align:
000886r 3               xt_aligned:
000886r 3               z_align:
000886r 3  60           z_aligned:      rts             ; stripped out during native compile
000887r 3               
000887r 3               
000887r 3               
000887r 3               ; ## ALLOT ( n -- ) "Reserve or release memory"
000887r 3               ; ## "allot"  auto  ANS core
000887r 3                       ; """https://forth-standard.org/standard/core/ALLOT
000887r 3                       ; Reserve a certain number of bytes (not cells) or release them.
000887r 3                       ; If n = 0, do nothing. If n is negative, release n bytes, but only
000887r 3                       ; to the beginning of the Dictionary. If n is positive (the most
000887r 3                       ; common case), reserve n bytes, but not past the end of the
000887r 3                       ; Dictionary. See http://forth-standard.org/standard/core/ALLOT
000887r 3                       ; """
000887r 3               
000887r 3               xt_allot:
000887r 3  20 rr rr                     jsr underflow_1
00088Ar 3               
00088Ar 3                               ; Releasing memory is going to be a very rare operation,
00088Ar 3                               ; so we check for it at the beginning and try to make
00088Ar 3                               ; the most common case as fast as possible
00088Ar 3  B5 01                        lda 1,x
00088Cr 3  30 22                        bmi @release
00088Er 3               
00088Er 3                               ; Common case: We are reserving memory, not releasing it
00088Er 3  18                           clc
00088Fr 3  A5 rr                        lda cp
000891r 3  75 00                        adc 0,x
000893r 3  85 rr                        sta cp
000895r 3               
000895r 3  A5 rr                        lda cp+1
000897r 3  75 01                        adc 1,x
000899r 3  85 rr                        sta cp+1
00089Br 3               
00089Br 3                               ; Wait, did we just grant more space than we have? This is
00089Br 3                               ; a check we only do here, not for other situations like cmpl_a
00089Br 3                               ; where smaller amounts are reserved.
00089Br 3  A0 FF                        ldy #<cp_end
00089Dr 3  C4 rr                        cpy cp
00089Fr 3  A9 7F                        lda #>cp_end
0008A1r 3  E5 rr                        sbc cp+1
0008A3r 3  B0 48                        bcs @done               ; we're fine.
0008A5r 3               
0008A5r 3                               ; Oops, that was too much, we're beyond the end of
0008A5r 3                               ; legal Dictionary RAM. Reduce to max memory and report
0008A5r 3                               ; an error
0008A5r 3  84 rr                        sty cp                  ; still #<cp_end
0008A7r 3  A9 7F                        lda #>cp_end
0008A9r 3  85 rr                        sta cp+1
0008ABr 3               
0008ABr 3  A9 00                        lda #err_allot
0008ADr 3  4C rr rr                     jmp error
0008B0r 3               
0008B0r 3               @release:
0008B0r 3                  		; The ANS standard doesn't really say what to do if too much
0008B0r 3                               ; memory is freed ("negatively alloted"). In fact, there isn't
0008B0r 3                               ; even an official test. Gforth is little help either. The good
0008B0r 3                               ; news is, this is going to be a rare case. We want to use as
0008B0r 3                               ; few bytes as possible.
0008B0r 3               
0008B0r 3                               ; What we do is let the user free anything up to the beginning
0008B0r 3                               ; of the RAM area assigned to the Dicionary (CP0), but at
0008B0r 3                               ; their own risk. This means that the Dictionary pointer DP
0008B0r 3                               ; might end up pointing to garbage. However, an attempt to
0008B0r 3                               ; free more than RAM than CP0 will lead to CP being set to CP0,
0008B0r 3                               ; the DP pointing to the last word in RAM (should be DROP) and
0008B0r 3                               ; an error message.
0008B0r 3               
0008B0r 3                               ; We arrive here with ( n ) which is negative. First step,
0008B0r 3                               ; subtract the number TOS from the CP for a new CP
0008B0r 3  CA                           dex
0008B1r 3  CA                           dex
0008B2r 3  A5 rr                        lda cp
0008B4r 3  95 00                        sta 0,x
0008B6r 3  A5 rr                        lda cp+1
0008B8r 3  95 01                        sta 1,x
0008BAr 3               
0008BAr 3  20 rr rr                     jsr xt_plus                     ; new CP is now TOS
0008BDr 3               
0008BDr 3                               ; Second step, see if we've gone too far. We compare the new
0008BDr 3                               ; CP on TOS (which, if we've really screwed up, might be
0008BDr 3                               ; negative) with CP0. This is a signed comparison
0008BDr 3  CA                           dex
0008BEr 3  CA                           dex                             ; new CP now NOS
0008BFr 3  A9 rr                        lda #<cp0
0008C1r 3  95 00                        sta 0,x
0008C3r 3  A9 rr                        lda #>cp0
0008C5r 3  95 01                        sta 1,x                         ; CP0 is TOS
0008C7r 3               
0008C7r 3  20 rr rr                     jsr compare_16bit               ; still ( CP CP0 )
0008CAr 3               
0008CAr 3                               ; If CP (NOS) is smaller than CP0 (TOS), we're in trouble.
0008CAr 3                               ; This means we want Z=1 or N=1
0008CAr 3  F0 17                        beq @nega_done
0008CCr 3  30 15                        bmi @nega_done
0008CEr 3               
0008CEr 3                               ; Yep, we're in trouble. Set CP to CP0, set DP to the first
0008CEr 3                               ; word in ROM (should be DROP), and abort with an error
0008CEr 3  A9 rr                        lda #<cp0
0008D0r 3  85 rr                        sta cp
0008D2r 3  A9 rr                        lda #>cp0
0008D4r 3  85 rr                        sta cp+1
0008D6r 3               
0008D6r 3  A9 rr                        lda #<dictionary_start
0008D8r 3  85 rr                        sta dp
0008DAr 3  A9 rr                        lda #>dictionary_start
0008DCr 3  85 rr                        sta dp+1
0008DEr 3               
0008DEr 3  A9 0A                        lda #err_negallot
0008E0r 3  4C rr rr                     jmp error
0008E3r 3               
0008E3r 3               @nega_done:
0008E3r 3                               ; Save new CP, which is NOS
0008E3r 3  B5 02                        lda 2,x
0008E5r 3  85 rr                        sta cp
0008E7r 3  B5 03                        lda 3,x
0008E9r 3  85 rr                        sta cp+1
0008EBr 3               
0008EBr 3  E8                           inx
0008ECr 3  E8                           inx                     ; drop through to @done
0008EDr 3               @done:
0008EDr 3  E8                           inx
0008EEr 3  E8                           inx
0008EFr 3               z_allot:
0008EFr 3  60                           rts
0008F0r 3               
0008F0r 3               
0008F0r 3               
0008F0r 3               ; ## ALLOW_NATIVE ( -- ) "Flag last word to allow native compiling"
0008F0r 3               ; ## "allow-native"  auto  Tali Forth
0008F0r 3               xt_allow_native:
0008F0r 3  20 rr rr                     jsr current_to_dp
0008F3r 3  A0 01                        ldy #1          ; offset for status byte
0008F5r 3  B1 rr                        lda (dp),y
0008F7r 3  29 F5                        and #$ff-NN-AN  ; AN and NN flag is clear.
0008F9r 3  91 rr                        sta (dp),y
0008FBr 3               z_allow_native:
0008FBr 3  60                           rts
0008FCr 3               
0008FCr 3               
0008FCr 3               ; ## ALSO ( -- ) "Make room in the search order for another wordlist"
0008FCr 3               ; ## "also"  auto  ANS search ext
0008FCr 3                       ; """http://forth-standard.org/standard/search/ALSO"""
0008FCr 3               xt_also:
0008FCr 3  20 rr rr                     jsr xt_get_order
0008FFr 3  20 rr rr                     jsr xt_over
000902r 3  20 rr rr                     jsr xt_swap
000905r 3  20 rr rr                     jsr xt_one_plus
000908r 3  20 rr rr                     jsr xt_set_order
00090Br 3               
00090Br 3  60           z_also:         rts
00090Cr 3               
00090Cr 3               
00090Cr 3               ; ## ALWAYS_NATIVE ( -- ) "Flag last word as always natively compiled"
00090Cr 3               ; ## "always-native"  auto  Tali Forth
00090Cr 3               xt_always_native:
00090Cr 3  20 rr rr                     jsr current_to_dp
00090Fr 3  A0 01                        ldy #1          ; offset for status byte
000911r 3  B1 rr                        lda (dp),y
000913r 3  09 02                        ora #AN         ; Make sure AN flag is set
000915r 3  29 F7                        and #$ff-NN     ; and NN flag is clear.
000917r 3  91 rr                        sta (dp),y
000919r 3               z_always_native:
000919r 3  60                           rts
00091Ar 3               
00091Ar 3               
00091Ar 3               ; ## AND ( n n -- n ) "Logically AND TOS and NOS"
00091Ar 3               ; ## "and"  auto  ANS core
00091Ar 3                       ; """https://forth-standard.org/standard/core/AND"""
00091Ar 3               xt_and:
00091Ar 3  20 rr rr                     jsr underflow_2
00091Dr 3               
00091Dr 3  B5 00                        lda 0,x
00091Fr 3  35 02                        and 2,x
000921r 3  95 02                        sta 2,x
000923r 3               
000923r 3  B5 01                        lda 1,x
000925r 3  35 03                        and 3,x
000927r 3  95 03                        sta 3,x
000929r 3               
000929r 3  E8                           inx
00092Ar 3  E8                           inx
00092Br 3               
00092Br 3  60           z_and:          rts
00092Cr 3               
00092Cr 3               
00092Cr 3               ; ## ASSEMBLER_WORDLIST ( -- u ) "WID for the Assembler wordlist"
00092Cr 3               ; ## "assembler-wordlist"  tested  Tali Assembler
00092Cr 3                       ; """ Commonly used like `assembler-wordlist >order` to add the
00092Cr 3                       ; assembler words to the search order so they can be used.
00092Cr 3                       ; See the tutorial on Wordlists and the Search Order for
00092Cr 3                       ; more information.
00092Cr 3                       ;
00092Cr 3                       ; This is a dummy entry, the code is shared with TWO
00092Cr 3                       ; """
00092Cr 3               
00092Cr 3               
00092Cr 3               ; ## AT_XY ( n m -- ) "Move cursor to position given"
00092Cr 3               ; ## "at-xy"  tested  ANS facility
00092Cr 3                       ; """https://forth-standard.org/standard/facility/AT-XY
00092Cr 3                       ; On an ANSI compatible terminal, place cursor at row n colum m.
00092Cr 3                       ; ANSI code is ESC[<n>;<m>H
00092Cr 3                       ;
00092Cr 3                       ; Do not use U. to print the numbers because the
00092Cr 3                       ; trailing space will not work with xterm
00092Cr 3                       ; """
00092Cr 3               xt_at_xy:
00092Cr 3  20 rr rr                     jsr underflow_2
00092Fr 3               
00092Fr 3  A9 1B                        lda #AscESC
000931r 3  20 rr rr                     jsr emit_a
000934r 3  A9 5B                        lda #$5B        ; ASCII for "["
000936r 3  20 rr rr                     jsr emit_a
000939r 3  20 rr rr                     jsr print_u
00093Cr 3  A9 3B                        lda #$3B        ; ASCII for ";"
00093Er 3  20 rr rr                     jsr emit_a
000941r 3  20 rr rr                     jsr print_u
000944r 3  A9 48                        lda #'H'
000946r 3  20 rr rr                     jsr emit_a
000949r 3               
000949r 3  60           z_at_xy:        rts
00094Ar 3               
00094Ar 3               
00094Ar 3               ; ## BACKSLASH ( -- ) "Ignore rest of line"
00094Ar 3               ; ## "\"  auto  ANS core ext
00094Ar 3                       ; """https://forth-standard.org/standard/core/bs"""
00094Ar 3               xt_backslash:
00094Ar 3  A5 rr                        lda ciblen
00094Cr 3  85 rr                        sta toin
00094Er 3  A5 rr                        lda ciblen+1
000950r 3  85 rr                        sta toin+1
000952r 3               
000952r 3  60           z_backslash:    rts
000953r 3               
000953r 3               
000953r 3               ; ## BASE ( -- addr ) "Push address of radix base to stack"
000953r 3               ; ## "base"  auto  ANS core
000953r 3                       ; """https://forth-standard.org/standard/core/BASE
000953r 3                       ; The ANS Forth standard sees the base up to 36, so we can cheat and
000953r 3                       ; ingore the MSB
000953r 3                       ; """
000953r 3               xt_base:
000953r 3  CA                           dex
000954r 3  CA                           dex
000955r 3  A9 rr                        lda #<base
000957r 3  95 00                        sta 0,x         ; LSB
000959r 3  74 01                        stz 1,x         ; MSB is always 0
00095Br 3               
00095Br 3  60           z_base:         rts
00095Cr 3               
00095Cr 3               
00095Cr 3               ; ## BEGIN ( -- addr ) "Mark entry point for loop"
00095Cr 3               ; ## "begin"  auto  ANS core
00095Cr 3                       ; """https://forth-standard.org/standard/core/BEGIN
00095Cr 3                       ;
00095Cr 3                       ; This is just an immediate version of here which could just
00095Cr 3                       ; as well be coded in Forth as
00095Cr 3                       ;       : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
00095Cr 3                       ; Since this is a compiling word, we don't care that much about
00095Cr 3                       ; about speed
00095Cr 3                       ; """
00095Cr 3               
00095Cr 3               xt_begin:
00095Cr 3  20 rr rr                     jsr xt_here
00095Fr 3  60           z_begin:        rts
000960r 3               
000960r 3               
000960r 3               
000960r 3               ; ## BELL ( -- ) "Emit ASCII BELL"
000960r 3               ; ## "bell"  tested  Tali Forth
000960r 3               xt_bell:
000960r 3  A9 07                        lda #7          ; ASCII value for BELl
000962r 3  20 rr rr                     jsr emit_a
000965r 3               
000965r 3  60           z_bell:         rts
000966r 3               
000966r 3               
000966r 3               ; ## BL ( -- c ) "Push ASCII value of SPACE to stack"
000966r 3               ; ## "bl"  auto  ANS core
000966r 3                       ; """https://forth-standard.org/standard/core/BL"""
000966r 3               
000966r 3               xt_bl:
000966r 3  CA                           dex
000967r 3  CA                           dex
000968r 3  A9 20                        lda #AscSP
00096Ar 3  95 00                        sta 0,x
00096Cr 3  74 01                        stz 1,x
00096Er 3               
00096Er 3  60           z_bl:           rts
00096Fr 3               
00096Fr 3               
00096Fr 3               ; ## BLK ( -- addr ) "Push address of block being interpreted"
00096Fr 3               ; ## "block"  auto  ANS block
00096Fr 3                       ; """https://forth-standard.org/standard/block/BLK"""
00096Fr 3               xt_blk:
00096Fr 3                               ; BLK is at UP + blk_offset
00096Fr 3  CA                           dex
000970r 3  CA                           dex
000971r 3  18                           clc
000972r 3  A5 rr                        lda up
000974r 3  69 00                        adc #blk_offset ; Add offset
000976r 3  95 00                        sta 0,x
000978r 3  A5 rr                        lda up+1
00097Ar 3  69 00                        adc #0          ; Adding carry
00097Cr 3  95 01                        sta 1,x
00097Er 3               
00097Er 3  60           z_blk:          rts
00097Fr 3               
00097Fr 3               
00097Fr 3               ; ## BLKBUFFER ( -- addr ) "Push address of block buffer"
00097Fr 3               ; ## "blkbuffer"  auto  Tali block
00097Fr 3               xt_blkbuffer:
00097Fr 3                               ; blkbuffer address is at UP + blkbuffer_offset.
00097Fr 3                               ; Unlike some of the other user variables, we actually
00097Fr 3                               ; want to push the address stored here, which will
00097Fr 3                               ; point to somewhere outside of the user variables.
00097Fr 3  CA                           dex
000980r 3  CA                           dex
000981r 3                               ; Put the address on the stack.
000981r 3  A0 28                        ldy #blkbuffer_offset
000983r 3  B1 rr                        lda (up),y
000985r 3  95 00                        sta 0,x
000987r 3  C8                           iny             ; Move along to the next byte
000988r 3  B1 rr                        lda (up),y
00098Ar 3  95 01                        sta 1,x
00098Cr 3               
00098Cr 3  60           z_blkbuffer:    rts
00098Dr 3               
00098Dr 3               
00098Dr 3               ; ## BLOCK ( u -- a-addr ) "Fetch a block into a buffer"
00098Dr 3               ; ## "block"  auto  ANS block
00098Dr 3                       ; """https://forth-standard.org/standard/block/BLOCK"""
00098Dr 3               
00098Dr 3               xt_block:
00098Dr 3               
00098Dr 3                               ; See if the block requested is the same as the one we
00098Dr 3                               ; currently have in the buffer. Check the LSB.
00098Dr 3  A0 2A                        ldy #buffblocknum_offset
00098Fr 3  B1 rr                        lda (up),y
000991r 3  D5 00                        cmp 0,x
000993r 3  D0 0F                        bne @not_in_buffer
000995r 3               
000995r 3                               ; Check the MSB.
000995r 3  C8                           iny
000996r 3  B1 rr                        lda (up),y
000998r 3  D5 01                        cmp 1,x
00099Ar 3  D0 08                        bne @not_in_buffer
00099Cr 3               
00099Cr 3                               ; The block is in the buffer. See if the buffer is in use.
00099Cr 3  A0 2C                        ldy #buffstatus_offset
00099Er 3  B1 rr                        lda (up),y
0009A0r 3  29 01                        and #1          ; Check the in-use flag (bit 0)
0009A2r 3  D0 30                        bne @done       ; It's already in the buffer and in use.
0009A4r 3                                               ; @done will replace the block# with the
0009A4r 3                                               ; buffer address.
0009A4r 3               @not_in_buffer:
0009A4r 3                               ; Check the buffer status
0009A4r 3  A0 2C                        ldy #buffstatus_offset
0009A6r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
0009A8r 3  C9 03                        cmp #3          ; LSB is needed.
0009AAr 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
0009ACr 3               
0009ACr 3                               ; We need to save the block.
0009ACr 3  20 rr rr                     jsr xt_blkbuffer
0009AFr 3  20 rr rr                     jsr xt_buffblocknum
0009B2r 3  20 rr rr                     jsr xt_fetch
0009B5r 3  20 rr rr                     jsr xt_block_write
0009B8r 3               
0009B8r 3               @buffer_available:
0009B8r 3                               ; Save the block number.
0009B8r 3  A0 2A                        ldy #buffblocknum_offset
0009BAr 3  B5 00                        lda 0,x
0009BCr 3  91 rr                        sta (up),y
0009BEr 3  C8                           iny
0009BFr 3  B5 01                        lda 1,x
0009C1r 3  91 rr                        sta (up),y
0009C3r 3               
0009C3r 3                               ; Get the requested block.
0009C3r 3  20 rr rr                     jsr xt_blkbuffer
0009C6r 3  20 rr rr                     jsr xt_swap
0009C9r 3  20 rr rr                     jsr xt_block_read
0009CCr 3               
0009CCr 3                               ; Mark the buffer as clean and in-use.
0009CCr 3  A9 01                        lda #1
0009CEr 3  A0 2C                        ldy #buffstatus_offset
0009D0r 3  91 rr                        sta (up),y
0009D2r 3               
0009D2r 3                               ; Make room on the stack for the return address.
0009D2r 3  CA                           dex
0009D3r 3  CA                           dex
0009D4r 3               
0009D4r 3               @done:
0009D4r 3                               ; It's in the buffer. Return the buffer address.
0009D4r 3  A0 28                        ldy #blkbuffer_offset
0009D6r 3  B1 rr                        lda (up),y
0009D8r 3  95 00                        sta 0,x
0009DAr 3  C8                           iny
0009DBr 3  B1 rr                        lda (up),y
0009DDr 3  95 01                        sta 1,x
0009DFr 3               
0009DFr 3  60           z_block:        rts
0009E0r 3               
0009E0r 3               
0009E0r 3               
0009E0r 3               ; ## BLOCK_RAMDRIVE_INIT ( u -- ) "Create a ramdrive for blocks"
0009E0r 3               ; ## "block-ramdrive-init"  auto  Tali block
0009E0r 3                       ; """Create a RAM drive, with the given number of
0009E0r 3                       ; blocks, in the dictionary along with setting up the block words to
0009E0r 3                       ; use it.  The read/write routines do not provide bounds checking.
0009E0r 3                       ; Expected use: `4 block-ramdrive-init` ( to create blocks 0-3 )
0009E0r 3                       ; """
0009E0r 3               
0009E0r 3               xt_block_ramdrive_init:
0009E0r 3  20 rr rr                     jsr underflow_1
0009E3r 3               
0009E3r 3                               ; Store the string to run here as a string literal.
0009E3r 3                               ; See SLITERAL for the format information. This way, we
0009E3r 3                               ; don't have the words defined below in the Dictionary until
0009E3r 3                               ; we really use them.
0009E3r 3  4C rr rr                     jmp @after_ramdrive_code
0009E6r 3               
0009E6r 3               @ramdrive_code:
0009E6r 3  62 61 73 65          .byte "base @ swap decimal"
0009EAr 3  20 40 20 73  
0009EEr 3  77 61 70 20  
0009F9r 3  20 31 30 32          .byte " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
0009FDr 3  34 20 2A     
000A00r 3  20 64 75 70          .byte " dup"    ; ( Save a copy for formatting it at the end )
000A04r 3  20 62 75 66          .byte " buffer: ramdrive" ; ( Create ramdrive )
000A08r 3  66 65 72 3A  
000A0Cr 3  20 72 61 6D  
000A15r 3                       ; ( These routines just copy between the buffer and the ramdrive blocks )
000A15r 3  20 3A 20 62          .byte " : block-read-ramdrive"  ; ( addr u -- )
000A19r 3  6C 6F 63 6B  
000A1Dr 3  2D 72 65 61  
000A2Br 3  20 72 61 6D          .byte " ramdrive swap 1024 * + swap 1024 move ;"
000A2Fr 3  64 72 69 76  
000A33r 3  65 20 73 77  
000A53r 3  20 3A 20 62          .byte " : block-write-ramdrive" ; ( addr u -- )
000A57r 3  6C 6F 63 6B  
000A5Br 3  2D 77 72 69  
000A6Ar 3  20 72 61 6D          .byte " ramdrive swap 1024 * + 1024 move ;"
000A6Er 3  64 72 69 76  
000A72r 3  65 20 73 77  
000A8Dr 3  20 27 20 62          .byte " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
000A91r 3  6C 6F 63 6B  
000A95r 3  2D 72 65 61  
000AB7r 3  20 27 20 62          .byte " ' block-write-ramdrive block-write-vector !"
000ABBr 3  6C 6F 63 6B  
000ABFr 3  2D 77 72 69  
000AE3r 3  20 72 61 6D          .byte " ramdrive swap blank base !"
000AE7r 3  64 72 69 76  
000AEBr 3  65 20 73 77  
000AFEr 3               
000AFEr 3               @after_ramdrive_code:
000AFEr 3  20 rr rr                     jsr sliteral_runtime
000B01r 3               
000B01r 3  rr rr 18 01  .word @ramdrive_code, @after_ramdrive_code-@ramdrive_code
000B05r 3               
000B05r 3                               ; The address and length of the ramdrive code is now on the
000B05r 3                               ; stack. Call EVALUATE to run it.
000B05r 3  20 rr rr                     jsr xt_evaluate
000B08r 3               
000B08r 3               z_block_ramdrive_init:
000B08r 3  60                           rts
000B09r 3               
000B09r 3               
000B09r 3               
000B09r 3               ; ## BLOCK_READ ( addr u -- ) "Read a block from storage (deferred word)"
000B09r 3               ; ## "block-read"  auto  Tali block
000B09r 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000B09r 3                       ; with their own version to read a block from storage.
000B09r 3                       ; The stack parameters are ( buffer_address block# -- ).
000B09r 3                       ; """
000B09r 3               xt_block_read:
000B09r 3                               ; Execute the BLOCK-READ-VECTOR
000B09r 3  A0 2E                        ldy #blockread_offset
000B0Br 3  B1 rr                        lda (up),y
000B0Dr 3  85 rr                        sta tmp1
000B0Fr 3  C8                           iny
000B10r 3  B1 rr                        lda (up),y
000B12r 3  85 rr                        sta tmp1+1
000B14r 3               
000B14r 3  6C rr rr                     jmp (tmp1)
000B17r 3               
000B17r 3               z_block_read:   ; No RTS needed
000B17r 3               
000B17r 3               
000B17r 3               ; ## BLOCK_READ_VECTOR ( -- addr ) "Address of the block-read vector"
000B17r 3               ; ## "block-read-vector"  auto  Tali block
000B17r 3                       ; """BLOCK-READ is a vectored word that the user needs to override
000B17r 3                       ; with their own version to read a block from storage.
000B17r 3                       ; This word gives the address of the vector so it can be replaced.
000B17r 3                       ; """
000B17r 3               xt_block_read_vector:
000B17r 3                               ; Get the BLOCK-READ-VECTOR address
000B17r 3  CA                           dex
000B18r 3  CA                           dex
000B19r 3  18                           clc
000B1Ar 3  A5 rr                        lda up
000B1Cr 3  69 2E                        adc #blockread_offset
000B1Er 3  95 00                        sta 0,x
000B20r 3  A5 rr                        lda up+1
000B22r 3  69 00                        adc #0          ; Add carry
000B24r 3  95 01                        sta 1,x
000B26r 3               
000B26r 3               z_block_read_vector:
000B26r 3  60                           rts
000B27r 3               
000B27r 3               
000B27r 3               ; This is the default error message the vectored words BLOCK-READ and
000B27r 3               ; BLOCK-WRITE start with. This word is not included in the dictionary.
000B27r 3               xt_block_word_error:
000B27r 3  A9 0C                        lda #err_blockwords
000B29r 3  4C rr rr                     jmp error       ; no RTS needed
000B2Cr 3               z_block_word_error:
000B2Cr 3               
000B2Cr 3               ; ## BLOCK_WRITE ( addr u -- ) "Write a block to storage (deferred word)"
000B2Cr 3               ; ## "block-write"  auto  Tali block
000B2Cr 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000B2Cr 3                       ; with their own version to write a block to storage.
000B2Cr 3                       ; The stack parameters are ( buffer_address block# -- ).
000B2Cr 3                       ; """
000B2Cr 3               xt_block_write:
000B2Cr 3                               ; Execute the BLOCK-READ-VECTOR
000B2Cr 3  A0 30                        ldy #blockwrite_offset
000B2Er 3  B1 rr                        lda (up),y
000B30r 3  85 rr                        sta tmp1
000B32r 3  C8                           iny
000B33r 3  B1 rr                        lda (up),y
000B35r 3  85 rr                        sta tmp1+1
000B37r 3  6C rr rr                     jmp (tmp1)
000B3Ar 3               
000B3Ar 3               z_block_write:  ; No RTS needed
000B3Ar 3               
000B3Ar 3               
000B3Ar 3               ; ## BLOCK_WRITE_VECTOR ( -- addr ) "Address of the block-write vector"
000B3Ar 3               ; ## "block-write-vector"  auto  Tali block
000B3Ar 3                       ; """BLOCK-WRITE is a vectored word that the user needs to override
000B3Ar 3                       ; with their own version to write a block to storage.
000B3Ar 3                       ; This word gives the address of the vector so it can be replaced.
000B3Ar 3                       ; """
000B3Ar 3               xt_block_write_vector:
000B3Ar 3                               ; Get the BLOCK-WRITE-VECTOR address
000B3Ar 3  CA                           dex
000B3Br 3  CA                           dex
000B3Cr 3  18                           clc
000B3Dr 3  A5 rr                        lda up
000B3Fr 3  69 30                        adc #blockwrite_offset
000B41r 3  95 00                        sta 0,x
000B43r 3  A5 rr                        lda up+1
000B45r 3  69 00                        adc #0          ; Add carry
000B47r 3  95 01                        sta 1,x
000B49r 3               
000B49r 3               z_block_write_vector:
000B49r 3  60                           rts
000B4Ar 3               
000B4Ar 3               
000B4Ar 3               ; ## BOUNDS ( addr u -- addr+u addr ) "Prepare address for looping"
000B4Ar 3               ; ## "bounds"  auto  Gforth
000B4Ar 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Memory-Blocks.html
000B4Ar 3                       ; Given a string, return the correct Data Stack parameters for
000B4Ar 3                       ; a DO/LOOP loop over its characters. This is realized as
000B4Ar 3                       ; OVER + SWAP in Forth, but we do it a lot faster in assembler
000B4Ar 3                       ; """
000B4Ar 3               xt_bounds:
000B4Ar 3  20 rr rr                     jsr underflow_2
000B4Dr 3               
000B4Dr 3  18                           clc
000B4Er 3  B5 00                        lda 0,x                 ; LSB u
000B50r 3  B4 02                        ldy 2,x                 ; LSB addr
000B52r 3  75 02                        adc 2,x
000B54r 3  95 02                        sta 2,x                 ; LSB addr+u
000B56r 3  94 00                        sty 0,x
000B58r 3               
000B58r 3  B5 01                        lda 1,x                 ; MSB u
000B5Ar 3  B4 03                        ldy 3,x                 ; MSB addr
000B5Cr 3  75 03                        adc 3,x
000B5Er 3  95 03                        sta 3,x                 ; MSB addr+u
000B60r 3  94 01                        sty 1,x
000B62r 3               
000B62r 3  60           z_bounds:       rts
000B63r 3               
000B63r 3               
000B63r 3               ; ## BRACKET_CHAR ( "c" -- ) "Compile character"
000B63r 3               ; ## "[char]"  auto  ANS core
000B63r 3                       ; """https://forth-standard.org/standard/core/BracketCHAR
000B63r 3                       ; Compile the ASCII value of a character as a literal. This is an
000B63r 3                       ; immediate, compile-only word.
000B63r 3                       ;
000B63r 3                       ; A definition given in
000B63r 3                       ; http://forth-standard.org/standard/implement is
000B63r 3                       ; : [CHAR]  CHAR POSTPONE LITERAL ; IMMEDIATE
000B63r 3                       ; """
000B63r 3               xt_bracket_char:
000B63r 3  20 rr rr                     jsr xt_char
000B66r 3  20 rr rr                     jsr xt_literal
000B69r 3  60           z_bracket_char: rts
000B6Ar 3               
000B6Ar 3               
000B6Ar 3               ; ## BRACKET_TICK ( -- ) "Store xt of following word during compilation"
000B6Ar 3               ; ## "[']"  auto  ANS core
000B6Ar 3                       ; """https://forth-standard.org/standard/core/BracketTick"""
000B6Ar 3               xt_bracket_tick:
000B6Ar 3  20 rr rr                     jsr xt_tick
000B6Dr 3  20 rr rr                     jsr xt_literal
000B70r 3  60           z_bracket_tick: rts
000B71r 3               
000B71r 3               
000B71r 3               ; ## BUFFBLOCKNUM ( -- addr ) "Push address of variable holding block in buffer"
000B71r 3               ; ## "buffblocknum"  auto  Tali block
000B71r 3               xt_buffblocknum:
000B71r 3                               ; BUFFBLOCKNUM is at UP + buffblocknum_offset
000B71r 3  CA                           dex
000B72r 3  CA                           dex
000B73r 3  18                           clc
000B74r 3  A5 rr                        lda up
000B76r 3  69 2A                        adc #buffblocknum_offset        ; Add offset
000B78r 3  95 00                        sta 0,x
000B7Ar 3  A5 rr                        lda up+1
000B7Cr 3  69 00                        adc #0                          ; Adding carry
000B7Er 3  95 01                        sta 1,x
000B80r 3               
000B80r 3  60           z_buffblocknum: rts
000B81r 3               
000B81r 3               
000B81r 3               ; ## BUFFER ( u -- a-addr ) "Get a buffer for a block"
000B81r 3               ; ## "buffer"  auto  ANS block
000B81r 3                       ; """https://forth-standard.org/standard/block/BUFFER"""
000B81r 3               
000B81r 3               xt_buffer:
000B81r 3                               ; Check the buffer status
000B81r 3  A0 2C                        ldy #buffstatus_offset
000B83r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
000B85r 3  C9 03                        cmp #3          ; LSB is needed.
000B87r 3  D0 0C                        bne @buffer_available ; Unused or not dirty = available
000B89r 3               
000B89r 3                               ; We need to save the block.
000B89r 3  20 rr rr                     jsr xt_blkbuffer
000B8Cr 3  20 rr rr                     jsr xt_buffblocknum
000B8Fr 3  20 rr rr                     jsr xt_fetch
000B92r 3  20 rr rr                     jsr xt_block_write
000B95r 3               
000B95r 3               @buffer_available:
000B95r 3                               ; Save the block number.
000B95r 3  A0 2A                        ldy #buffblocknum_offset
000B97r 3  B5 00                        lda 0,x
000B99r 3  91 rr                        sta (up),y
000B9Br 3  C8                           iny
000B9Cr 3  B5 01                        lda 1,x
000B9Er 3  91 rr                        sta (up),y
000BA0r 3               
000BA0r 3                               ; Mark the buffer as clean and in-use.
000BA0r 3  A9 01                        lda #1
000BA2r 3  A0 2C                        ldy #buffstatus_offset
000BA4r 3  91 rr                        sta (up),y
000BA6r 3               
000BA6r 3               @done:
000BA6r 3                               ; Return the buffer address.
000BA6r 3  A0 28                        ldy #blkbuffer_offset
000BA8r 3  B1 rr                        lda (up),y
000BAAr 3  95 00                        sta 0,x
000BACr 3  C8                           iny
000BADr 3  B1 rr                        lda (up),y
000BAFr 3  95 01                        sta 1,x
000BB1r 3               
000BB1r 3  60           z_buffer:       rts
000BB2r 3               
000BB2r 3               
000BB2r 3               
000BB2r 3               ; ## BUFFER_COLON ( u "<name>" -- ; -- addr ) "Create an uninitialized buffer"
000BB2r 3               ; ## "buffer:"  auto  ANS core ext
000BB2r 3                               ; """https://forth-standard.org/standard/core/BUFFERColon
000BB2r 3                               ; Create a buffer of size u that puts its address on the stack
000BB2r 3                               ; when its name is used.
000BB2r 3                               ; """
000BB2r 3               xt_buffer_colon:
000BB2r 3  20 rr rr                     jsr xt_create
000BB5r 3  20 rr rr                     jsr xt_allot
000BB8r 3  60           z_buffer_colon: rts
000BB9r 3               
000BB9r 3               
000BB9r 3               ; ## BUFFSTATUS ( -- addr ) "Push address of variable holding buffer status"
000BB9r 3               ; ## "buffstatus"  auto  Tali block
000BB9r 3               xt_buffstatus:
000BB9r 3                               ; BUFFSTATUS is at UP + buffstatus_offset
000BB9r 3  CA                           dex
000BBAr 3  CA                           dex
000BBBr 3  18                           clc
000BBCr 3  A5 rr                        lda up
000BBEr 3  69 2C                        adc #buffstatus_offset  ; Add offset
000BC0r 3  95 00                        sta 0,x
000BC2r 3  A5 rr                        lda up+1
000BC4r 3  69 00                        adc #0                  ; Adding carry
000BC6r 3  95 01                        sta 1,x
000BC8r 3               
000BC8r 3  60           z_buffstatus:   rts
000BC9r 3               
000BC9r 3               
000BC9r 3               ; ## BYE ( -- ) "Break"
000BC9r 3               ; ## "bye"  tested  ANS tools ext
000BC9r 3                       ; """https://forth-standard.org/standard/tools/BYE"""
000BC9r 3               
000BC9r 3               xt_bye:
000BC9r 3                               ;brk
000BC9r 3  4C rr rr                     jmp platform_bye
000BCCr 3               z_bye:          ;rts             ; never reached
000BCCr 3               
000BCCr 3               
000BCCr 3               
000BCCr 3               ; ## C_COMMA ( c -- ) "Store one byte/char in the Dictionary"
000BCCr 3               ; ## "c,"  auto  ANS core
000BCCr 3                       ; """https://forth-standard.org/standard/core/CComma"""
000BCCr 3               
000BCCr 3               xt_c_comma:
000BCCr 3  20 rr rr                     jsr underflow_1
000BCFr 3               
000BCFr 3  B5 00                        lda 0,x
000BD1r 3  20 rr rr                     jsr cmpl_a
000BD4r 3               
000BD4r 3  E8                           inx
000BD5r 3  E8                           inx
000BD6r 3               
000BD6r 3  60           z_c_comma:      rts
000BD7r 3               
000BD7r 3               
000BD7r 3               
000BD7r 3               ; ## C_FETCH ( addr -- c ) "Get a character/byte from given address"
000BD7r 3               ; ## "c@"  auto  ANS core
000BD7r 3                       ; """https://forth-standard.org/standard/core/CFetch"""
000BD7r 3               xt_c_fetch:
000BD7r 3  20 rr rr                     jsr underflow_1
000BDAr 3               
000BDAr 3  A1 00                        lda (0,x)
000BDCr 3  95 00                        sta 0,x
000BDEr 3  74 01                        stz 1,x         ; Ignore LSB
000BE0r 3               
000BE0r 3  60           z_c_fetch:      rts
000BE1r 3               
000BE1r 3               
000BE1r 3               ; ## C_STORE ( c addr -- ) "Store character at address given"
000BE1r 3               ; ## "c!"  auto  ANS core
000BE1r 3                       ; """https://forth-standard.org/standard/core/CStore"""
000BE1r 3               xt_c_store:
000BE1r 3  20 rr rr                     jsr underflow_2
000BE4r 3               
000BE4r 3  B5 02                        lda 2,x
000BE6r 3  81 00                        sta (0,x)
000BE8r 3               
000BE8r 3  E8                           inx
000BE9r 3  E8                           inx
000BEAr 3  E8                           inx
000BEBr 3  E8                           inx
000BECr 3               
000BECr 3  60           z_c_store:      rts
000BEDr 3               
000BEDr 3               
000BEDr 3               ; ## CASE (C: -- 0) ( -- ) "Conditional flow control"
000BEDr 3               ; ## "case"  auto  ANS core ext
000BEDr 3                       ; """http://forth-standard.org/standard/core/CASE
000BEDr 3                       ;
000BEDr 3                       ; This is a dummy header, CASE shares the actual code with ZERO.
000BEDr 3                       ; """
000BEDr 3               
000BEDr 3               
000BEDr 3               ; ## CELL_PLUS ( u -- u ) "Add cell size in bytes"
000BEDr 3               ; ## "cell+"  auto  ANS core
000BEDr 3                       ; """https://forth-standard.org/standard/core/CELLPlus
000BEDr 3                       ; Add the number of bytes ("address units") that one cell needs.
000BEDr 3                       ; Since this is an 8 bit machine with 16 bit cells, we add two bytes.
000BEDr 3                       ; """
000BEDr 3               
000BEDr 3               xt_cell_plus:
000BEDr 3  20 rr rr                     jsr underflow_1
000BF0r 3               
000BF0r 3  F6 00                        inc 0,x
000BF2r 3  D0 02                        bne @1
000BF4r 3  F6 01                        inc 1,x
000BF6r 3               @1:
000BF6r 3  F6 00                        inc 0,x
000BF8r 3  D0 02                        bne @done
000BFAr 3  F6 01                        inc 1,x
000BFCr 3               @done:
000BFCr 3  60           z_cell_plus:    rts
000BFDr 3               
000BFDr 3               
000BFDr 3               
000BFDr 3               ; ## CELLS ( u -- u ) "Convert cells to size in bytes"
000BFDr 3               ; ## "cells"  auto  ANS core
000BFDr 3                       ; """https://forth-standard.org/standard/core/CELLS
000BFDr 3                       ;
000BFDr 3                       ; Dummy entry for the CELLS word, the code is the same as for
000BFDr 3                       ; 2*, which is where the header directs us to
000BFDr 3                       ; """
000BFDr 3               
000BFDr 3               
000BFDr 3               ; ## CHAR ( "c" -- u ) "Convert character to ASCII value"
000BFDr 3               ; ## "char"  auto  ANS core
000BFDr 3                       ; """https://forth-standard.org/standard/core/CHAR"""
000BFDr 3               
000BFDr 3               xt_char:
000BFDr 3                               ; get character from string, returns ( addr u )
000BFDr 3  20 rr rr                     jsr xt_parse_name
000C00r 3               
000C00r 3                               ; if we got back a zero, we have a problem
000C00r 3  B5 00                        lda 0,x
000C02r 3  15 01                        ora 1,x
000C04r 3  D0 05                        bne @not_empty
000C06r 3               
000C06r 3  A9 05                        lda #err_noname
000C08r 3  4C rr rr                     jmp error
000C0Br 3               
000C0Br 3               @not_empty:
000C0Br 3  E8                           inx             ; drop number of characters, leave addr
000C0Cr 3  E8                           inx
000C0Dr 3  A1 00                        lda (0,x)       ; get character (equivalent to C@)
000C0Fr 3  95 00                        sta 0,x
000C11r 3  74 01                        stz 1,x         ; MSB is always zero
000C13r 3               
000C13r 3  60           z_char:         rts
000C14r 3               
000C14r 3               
000C14r 3               
000C14r 3               ; ## CHAR_PLUS ( addr -- addr+1 ) "Add the size of a character unit to address"
000C14r 3               ; ## "char+"  auto  ANS core
000C14r 3                       ; """https://forth-standard.org/standard/core/CHARPlus
000C14r 3                       ;
000C14r 3                       ; This is a dummy entry, the code is shared with ONE_PLUS
000C14r 3                       ; """
000C14r 3               
000C14r 3               
000C14r 3               ; ## CHARS ( n -- n ) "Number of bytes that n chars need"
000C14r 3               ; ## "chars"  auto  ANS core
000C14r 3                       ; """https://forth-standard.org/standard/core/CHARS
000C14r 3                       ; Return how many address units n chars are. Since this is an 8 bit
000C14r 3                       ; machine, this does absolutely nothing and is included for
000C14r 3                       ; compatibility with other Forth versions
000C14r 3                       ; """
000C14r 3               
000C14r 3               xt_chars:
000C14r 3                               ; Checking for underflow seems a bit stupid because this
000C14r 3                               ; routine does nothing on this machine. However, the user
000C14r 3                               ; should be warned that there is something wrong with the
000C14r 3                               ; code if this occurs.
000C14r 3  20 rr rr                     jsr underflow_1
000C17r 3               
000C17r 3  60           z_chars:        rts
000C18r 3               
000C18r 3               
000C18r 3               ; ## CLEAVE ( addr u -- addr2 u2 addr1 u1 ) "Split off word from string"
000C18r 3               ; ## "cleave"  auto  Tali Forth
000C18r 3               
000C18r 3                       ; """Given a range of memory with words delimited by whitespace,return
000C18r 3                       ; the first word at the top of the stack and the rest of the word
000C18r 3                       ; following it.
000C18r 3                       ;
000C18r 3                       ; Example:
000C18r 3                       ; s" w1 w2 w3" cleave  -> "w2 w3" "w1"
000C18r 3                       ; s" w1" cleave        -> "" "w1"
000C18r 3                       ;
000C18r 3                       ; Since it will be used in loops a lot, we want it to work in pure
000C18r 3                       ; assembler and be as fast as we can make it. Calls PARSE-NAME so we
000C18r 3                       ; strip leading delimiters.
000C18r 3                       ; """
000C18r 3               
000C18r 3               xt_cleave:
000C18r 3  20 rr rr                     jsr underflow_2
000C1Br 3               
000C1Br 3                               ; We arrive here with ( addr u ). We need to strip any leading
000C1Br 3                               ; spaces by hand: PARSE-NAME does do that, but it doesn't
000C1Br 3                               ; remember how many spaces were stripped. This means we can't
000C1Br 3                               ; calculate the length of the remainder. Fortunately, Tali
000C1Br 3                               ; Forth has just the word we need for this:
000C1Br 3  20 rr rr                     jsr xt_minus_leading    ; -LEADING ( addr u )
000C1Er 3               
000C1Er 3                               ; The main part we can turn over to PARSE-NAME, except that we
000C1Er 3                               ; have a string ( addr u ) and not stuff in the input buffer.
000C1Er 3                               ; We get around this by cheating: We place ( addr u ) in the
000C1Er 3                               ; input buffer and then call PARSE-NAME.
000C1Er 3  20 rr rr                     jsr xt_input_to_r       ; save old imput state
000C21r 3               
000C21r 3  B5 00                        lda 0,x         ; u is new ciblen
000C23r 3  85 rr                        sta ciblen
000C25r 3  B5 01                        lda 1,x
000C27r 3  85 rr                        sta ciblen+1
000C29r 3               
000C29r 3  B5 02                        lda 2,x         ; addr is new cib
000C2Br 3  85 rr                        sta cib
000C2Dr 3  B5 03                        lda 3,x
000C2Fr 3  85 rr                        sta cib+1
000C31r 3               
000C31r 3  64 rr                        stz toin        ; >IN pointer is zero
000C33r 3  64 rr                        stz toin+1
000C35r 3               
000C35r 3                               ; PARSE-NAME gives us back the substring of the first word
000C35r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u addr-s u-s )
000C38r 3               
000C38r 3                               ; If we were given an empty string, then we're done. It's the
000C38r 3                               ; resposibility of the user to catch this as a sign to end the
000C38r 3                               ; any loop
000C38r 3  B5 00                        lda 0,x
000C3Ar 3  15 01                        ora 1,x
000C3Cr 3  F0 23                        beq @done
000C3Er 3               
000C3Er 3                               ; Now we have to adjust the original string
000C3Er 3  B5 04                        lda 4,x         ; LSB of original u
000C40r 3  38                           sec
000C41r 3  F5 00                        sbc 0,x
000C43r 3  95 04                        sta 4,x
000C45r 3               
000C45r 3  B5 05                        lda 5,x         ; MSB of original u
000C47r 3  F5 01                        sbc 1,x
000C49r 3  95 05                        sta 5,x
000C4Br 3               
000C4Br 3  B5 06                        lda 6,x         ; LSB of original addr
000C4Dr 3  18                           clc
000C4Er 3  75 00                        adc 0,x
000C50r 3  95 06                        sta 6,x
000C52r 3               
000C52r 3  B5 07                        lda 7,x         ; MSB of original addr
000C54r 3  75 01                        adc 1,x
000C56r 3  95 07                        sta 7,x
000C58r 3               
000C58r 3                               ; There is one small problem: PARSE-NAME will probably have
000C58r 3                               ; left the string with the rest of the words with leading
000C58r 3                               ; delimiters. We use our magic -LEADING again
000C58r 3  20 rr rr                     jsr xt_two_swap         ; ( addr-s u-s addr u )
000C5Br 3  20 rr rr                     jsr xt_minus_leading
000C5Er 3  20 rr rr                     jsr xt_two_swap         ; ( addr u addr-s u-s )
000C61r 3               @done:
000C61r 3                               ; Restore input
000C61r 3  20 rr rr                     jsr xt_r_to_input
000C64r 3               
000C64r 3  60           z_cleave:       rts
000C65r 3               
000C65r 3               
000C65r 3               
000C65r 3               ; ## CMOVE ( addr1 addr2 u -- ) "Copy bytes going from low to high"
000C65r 3               ; ## "cmove"  auto  ANS string
000C65r 3                       ; """https://forth-standard.org/standard/string/CMOVE
000C65r 3                       ; Copy u bytes from addr1 to addr2, going low to high (addr2 is
000C65r 3                       ; larger than addr1). Based on code in Leventhal, Lance A.
000C65r 3                       ; "6502 Assembly Language Routines", p. 201, where it is called
000C65r 3                       ; "move left".
000C65r 3                       ;
000C65r 3                       ; There are no official tests for this word.
000C65r 3                       ; """
000C65r 3               
000C65r 3               xt_cmove:
000C65r 3  20 rr rr                     jsr underflow_3
000C68r 3               
000C68r 3                               ; move destination address to where we can work with it
000C68r 3  B5 02                        lda 2,x
000C6Ar 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000C6Cr 3  B5 03                        lda 3,x
000C6Er 3  85 rr                        sta tmp2+1
000C70r 3               
000C70r 3                               ; move source address to where we can work with it
000C70r 3  B5 04                        lda 4,x
000C72r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000C74r 3  B5 05                        lda 5,x
000C76r 3  85 rr                        sta tmp1+1
000C78r 3               
000C78r 3  A0 00                        ldy #0
000C7Ar 3  B5 01                        lda 1,x         ; number of whole pages to move
000C7Cr 3  F0 0F                        beq @dopartial
000C7Er 3               
000C7Er 3               @page:
000C7Er 3  B1 rr                        lda (tmp1),y
000C80r 3  91 rr                        sta (tmp2),y
000C82r 3  C8                           iny
000C83r 3  D0 F9                        bne @page
000C85r 3               
000C85r 3  E6 rr                        inc tmp1+1
000C87r 3  E6 rr                        inc tmp2+1
000C89r 3  D6 01                        dec 1,x
000C8Br 3  D0 F1                        bne @page
000C8Dr 3               
000C8Dr 3               @dopartial:
000C8Dr 3  B5 00                        lda 0,x         ; length of last page
000C8Fr 3  F0 09                        beq @done
000C91r 3               
000C91r 3               @partial:
000C91r 3  B1 rr                        lda (tmp1),y
000C93r 3  91 rr                        sta (tmp2),y
000C95r 3  C8                           iny
000C96r 3               
000C96r 3  D6 00                        dec 0,x
000C98r 3  D0 F7                        bne @partial
000C9Ar 3               
000C9Ar 3               @done:          ; clear the stack
000C9Ar 3  8A                           txa
000C9Br 3  18                           clc
000C9Cr 3  69 06                        adc #6
000C9Er 3  AA                           tax
000C9Fr 3               
000C9Fr 3  60           z_cmove:        rts
000CA0r 3               
000CA0r 3               
000CA0r 3               
000CA0r 3               ; ## CMOVE_UP ( add1 add2 u -- ) "Copy bytes from high to low"
000CA0r 3               ; ## "cmove>"  auto  ANS string
000CA0r 3                       ; """https://forth-standard.org/standard/string/CMOVEtop
000CA0r 3                       ; Based on code in Leventhal, Lance A. "6502 Assembly Language
000CA0r 3                       ; Routines", p. 201, where it is called "move right".
000CA0r 3                       ;
000CA0r 3                       ; There are no official tests for this word.
000CA0r 3                       ; """
000CA0r 3               
000CA0r 3               xt_cmove_up:
000CA0r 3  20 rr rr                     jsr underflow_3
000CA3r 3               
000CA3r 3                               ; Move destination address to where we can work with it
000CA3r 3  B5 02                        lda 2,x
000CA5r 3  85 rr                        sta tmp2        ; use tmp2 because easier to remember
000CA7r 3  B5 03                        lda 3,x
000CA9r 3  18                           clc
000CAAr 3  75 01                        adc 1,x
000CACr 3  85 rr                        sta tmp2+1      ; point to last page of destination
000CAEr 3               
000CAEr 3                               ; Move source address to where we can work with it
000CAEr 3  B5 04                        lda 4,x
000CB0r 3  85 rr                        sta tmp1        ; use tmp1 because easier to remember
000CB2r 3  B5 05                        lda 5,x
000CB4r 3  18                           clc
000CB5r 3  75 01                        adc 1,x
000CB7r 3  85 rr                        sta tmp1+1      ; point to last page of source
000CB9r 3  F6 01                        inc 1,x         ; allows us to use bne with dec 1,x below
000CBBr 3               
000CBBr 3                               ; Move the last partial page first
000CBBr 3  B4 00                        ldy 0,x         ; length of last page
000CBDr 3  F0 0E                        beq @nopartial
000CBFr 3               
000CBFr 3               @outerloop:
000CBFr 3  88                           dey
000CC0r 3  F0 07                        beq @finishpage
000CC2r 3               
000CC2r 3               @innerloop:
000CC2r 3  B1 rr                        lda (tmp1),y
000CC4r 3  91 rr                        sta (tmp2),y
000CC6r 3  88                           dey
000CC7r 3  D0 F9                        bne @innerloop
000CC9r 3               
000CC9r 3               @finishpage:
000CC9r 3  B2 rr                        lda (tmp1)      ; handle y = 0 separately
000CCBr 3  92 rr                        sta (tmp2)
000CCDr 3               
000CCDr 3               @nopartial:
000CCDr 3  C6 rr                        dec tmp1+1      ; back up to previous pages
000CCFr 3  C6 rr                        dec tmp2+1
000CD1r 3  D6 01                        dec 1,x
000CD3r 3  D0 EA                        bne @outerloop
000CD5r 3               @done:
000CD5r 3                               ; clear up the stack and leave
000CD5r 3  8A                           txa
000CD6r 3  18                           clc
000CD7r 3  69 06                        adc #6
000CD9r 3  AA                           tax
000CDAr 3               
000CDAr 3  60           z_cmove_up:     rts
000CDBr 3               
000CDBr 3               
000CDBr 3               
000CDBr 3               ; ## COLON ( "name" -- ) "Start compilation of a new word"
000CDBr 3               ; ## ":"  auto  ANS core
000CDBr 3                       ; """https://forth-standard.org/standard/core/Colon
000CDBr 3                       ;
000CDBr 3                       ; Use the CREATE routine and fill in the rest by hand.
000CDBr 3                       ; """
000CDBr 3               
000CDBr 3               xt_colon:
000CDBr 3                               ; If we're already in the compile state, complain
000CDBr 3                               ; and quit
000CDBr 3  A5 rr                        lda state
000CDDr 3  05 rr                        ora state+1
000CDFr 3  F0 05                        beq @1
000CE1r 3               
000CE1r 3  A9 07                        lda #err_state
000CE3r 3  4C rr rr                     jmp error
000CE6r 3               @1:
000CE6r 3                               ; switch to compile state
000CE6r 3  C6 rr                        dec state
000CE8r 3  C6 rr                        dec state+1
000CEAr 3               
000CEAr 3                               ; Set bit 6 in status to tell ";" and RECURSE this is a normal
000CEAr 3                               ; word
000CEAr 3  A9 40                        lda #%01000000
000CECr 3  04 rr                        tsb status
000CEEr 3               
000CEEr 3                               ; CREATE is going to change the DP to point to the new word's
000CEEr 3                               ; header. While this is fine for (say) variables, it would mean
000CEEr 3                               ; that FIND-NAME etc would find a half-finished word when
000CEEr 3                               ; looking in the Dictionary. To prevent this, we save the old
000CEEr 3                               ; version of DP and restore it later. The new DP is placed in
000CEEr 3                               ; the variable WORKWORD until we're finished with a SEMICOLON.
000CEEr 3  20 rr rr                     jsr current_to_dp
000CF1r 3  A5 rr                        lda dp+1            ; CREATE uses a lot of variables
000CF3r 3  48                           pha
000CF4r 3  A5 rr                        lda dp
000CF6r 3  48                           pha
000CF7r 3               
000CF7r 3                               ; Tell create not to print warning for duplicate name.
000CF7r 3  A9 80                        lda #%10000000
000CF9r 3  04 rr                        tsb status
000CFBr 3               
000CFBr 3  20 rr rr                     jsr xt_create
000CFEr 3               
000CFEr 3                               ; Get the nt (not the xt!) of the new word as described above.
000CFEr 3                               ; Only COLON, SEMICOLON and RECURSE get to access WORKWORD
000CFEr 3  20 rr rr                     jsr current_to_dp   ; This might be able to be omitted
000D01r 3  A5 rr                        lda dp
000D03r 3  85 rr                        sta workword
000D05r 3  A5 rr                        lda dp+1
000D07r 3  85 rr                        sta workword+1
000D09r 3               
000D09r 3                               ; Restore original DP
000D09r 3  68                           pla
000D0Ar 3  85 rr                        sta dp
000D0Cr 3  68                           pla
000D0Dr 3  85 rr                        sta dp+1
000D0Fr 3  20 rr rr                     jsr dp_to_current
000D12r 3               
000D12r 3                               ; CREATE includes a subroutine jump to DOVAR by default. We
000D12r 3                               ; back up three bytes and overwrite that.
000D12r 3  A5 rr                        lda cp
000D14r 3  38                           sec
000D15r 3  E9 03                        sbc #3
000D17r 3  85 rr                        sta cp
000D19r 3  B0 02                        bcs @done
000D1Br 3  C6 rr                        dec cp+1
000D1Dr 3               @done:
000D1Dr 3  60           z_colon:        rts
000D1Er 3               
000D1Er 3               
000D1Er 3               ; ## COLON_NONAME ( -- ) "Start compilation of a new word""
000D1Er 3               ; ## ":NONAME"  auto  ANS core
000D1Er 3                       ; """https://forth-standard.org/standard/core/ColonNONAME
000D1Er 3                       ; Compile a word with no nt.  ";" will put its xt on the stack.
000D1Er 3                       ; """
000D1Er 3               
000D1Er 3               xt_colon_noname:
000D1Er 3                               ; If we're already in the compile state, complain
000D1Er 3                               ; and quit
000D1Er 3  A5 rr                        lda state
000D20r 3  05 rr                        ora state+1
000D22r 3  F0 05                        beq @1
000D24r 3               
000D24r 3  A9 07                        lda #err_state
000D26r 3  4C rr rr                     jmp error
000D29r 3               @1:
000D29r 3                               ; switch to compile state
000D29r 3  C6 rr                        dec state
000D2Br 3  C6 rr                        dec state+1
000D2Dr 3               
000D2Dr 3                               ; Clear bit 6 in status to tell ";" and RECURSE this is
000D2Dr 3                               ; a :NONAME word.
000D2Dr 3  A9 40                        lda #%01000000
000D2Fr 3  14 rr                        trb status
000D31r 3               
000D31r 3                               ; Put cp (the xt for this word) in WORKWORD. The flag above
000D31r 3                               ; lets both ";" and RECURSE know that is is an xt instead of an
000D31r 3                               ; nt and they will modify their behavior.
000D31r 3  A5 rr                        lda cp
000D33r 3  85 rr                        sta workword
000D35r 3  A5 rr                        lda cp+1
000D37r 3  85 rr                        sta workword+1
000D39r 3               @done:
000D39r 3  60           z_colon_noname:        rts
000D3Ar 3               
000D3Ar 3               
000D3Ar 3               
000D3Ar 3               ; ## COMMA ( n -- ) "Allot and store one cell in memory"
000D3Ar 3               ; ## ","  auto  ANS core
000D3Ar 3                       ; """https://forth-standard.org/standard/core/Comma
000D3Ar 3                       ; Store TOS at current place in memory.
000D3Ar 3                       ;
000D3Ar 3                       ; Since this an eight-bit machine, we can ignore all alignment issues.
000D3Ar 3                       ; """
000D3Ar 3               
000D3Ar 3               xt_comma:
000D3Ar 3  20 rr rr                     jsr underflow_1
000D3Dr 3               
000D3Dr 3  B5 00                        lda 0,x
000D3Fr 3  92 rr                        sta (cp)
000D41r 3               
000D41r 3  E6 rr                        inc cp
000D43r 3  D0 02                        bne @1
000D45r 3  E6 rr                        inc cp+1
000D47r 3               @1:
000D47r 3  B5 01                        lda 1,x
000D49r 3  92 rr                        sta (cp)
000D4Br 3               
000D4Br 3  E6 rr                        inc cp
000D4Dr 3  D0 02                        bne @done
000D4Fr 3  E6 rr                        inc cp+1
000D51r 3               @done:
000D51r 3  E8                           inx
000D52r 3  E8                           inx
000D53r 3               
000D53r 3  60           z_comma:        rts
000D54r 3               
000D54r 3               
000D54r 3               
000D54r 3               ; ## COMPARE ( addr1 u1 addr2 u2 -- -1 | 0 | 1) "Compare two strings"
000D54r 3               ; ## "compare"   auto  ANS string
000D54r 3                       ; """https://forth-standard.org/standard/string/COMPARE
000D54r 3                       ; Compare string1 (denoted by addr1 u1) to string2 (denoted by
000D54r 3                       ; addr2 u2).  Return -1 if string1 < string2, 0 if string1 = string2
000D54r 3                       ; and 1 if string1 > string2 (ASCIIbetical comparison).  A string
000D54r 3                       ; that entirely matches the beginning of the other string, but is
000D54r 3                       ; shorter, is considered less than the longer string.
000D54r 3                       ; """
000D54r 3               
000D54r 3               xt_compare:
000D54r 3  20 rr rr                     jsr underflow_4
000D57r 3               
000D57r 3                               ; Load the two string addresses into tmp1 and tmp2.
000D57r 3  B5 02                        lda 2,x
000D59r 3  85 rr                        sta tmp2
000D5Br 3  B5 03                        lda 3,x
000D5Dr 3  85 rr                        sta tmp2+1
000D5Fr 3  B5 06                        lda 6,x
000D61r 3  85 rr                        sta tmp1
000D63r 3  B5 07                        lda 7,x
000D65r 3  85 rr                        sta tmp1+1
000D67r 3                               ; The counts will be used in-place on the stack.
000D67r 3               
000D67r 3               @compare_loop:
000D67r 3                               ; Check to see if we are out of letters.
000D67r 3               
000D67r 3                               ; Check string1
000D67r 3  B5 04                        lda 4,x
000D69r 3  15 05                        ora 5,x
000D6Br 3  F0 2C                        beq @str1_done
000D6Dr 3               
000D6Dr 3                               ; Check string2
000D6Dr 3  B5 00                        lda 0,x
000D6Fr 3  15 01                        ora 1,x
000D71r 3  F0 3A                        beq @greater    ; Str2 empty first
000D73r 3               
000D73r 3               @check_letter:
000D73r 3                               ; Both strings have at least one letter left.
000D73r 3                               ; Check the letters against each other.
000D73r 3  B2 rr                        lda (tmp1)
000D75r 3  D2 rr                        cmp (tmp2)
000D77r 3  90 26                        bcc @less
000D79r 3  D0 32                        bne @greater
000D7Br 3               @next_letter:
000D7Br 3                               ; Move both tmp pointers and decrement the counts
000D7Br 3                               ; on the stack.
000D7Br 3                               ; Increment tmp1
000D7Br 3  E6 rr                        inc tmp1
000D7Dr 3  D0 02                        bne @1
000D7Fr 3  E6 rr                        inc tmp1+1
000D81r 3               @1:
000D81r 3                               ; Increment tmp2
000D81r 3  E6 rr                        inc tmp2
000D83r 3  D0 02                        bne @2
000D85r 3  E6 rr                        inc tmp2+1
000D87r 3               @2:
000D87r 3                               ; Decrement count1 on the stack.
000D87r 3  B5 04                        lda 4,x
000D89r 3  D0 02                        bne @3
000D8Br 3  D6 05                        dec 5,x
000D8Dr 3               @3:
000D8Dr 3  D6 04                        dec 4,x
000D8Fr 3               
000D8Fr 3                               ; Decrement count2 on the stack.
000D8Fr 3  B5 00                        lda 0,x
000D91r 3  D0 02                        bne @4
000D93r 3  D6 01                        dec 1,x
000D95r 3               @4:
000D95r 3  D6 00                        dec 0,x
000D97r 3               
000D97r 3                               ; Loop around and check again.
000D97r 3  80 CE                        bra @compare_loop
000D99r 3               
000D99r 3               @str1_done:
000D99r 3                               ; String 1 is out of letters. Check string 2.
000D99r 3  B5 00                        lda 0,x
000D9Br 3  15 01                        ora 1,x
000D9Dr 3  F0 08                        beq @equal      ; Both out of letters
000D9Fr 3               
000D9Fr 3                               ; Falls into less (str1 is out but str2 has more)
000D9Fr 3               @less:
000D9Fr 3                               ; Return -1
000D9Fr 3  A9 FF                        lda #$FF
000DA1r 3  95 06                        sta 6,x
000DA3r 3  95 07                        sta 7,x
000DA5r 3  80 0C                        bra @done
000DA7r 3               @equal:
000DA7r 3                               ; Return 0
000DA7r 3  74 06                        stz 6,x
000DA9r 3  74 07                        stz 7,x
000DABr 3  80 06                        bra @done
000DADr 3               @greater:
000DADr 3                               ; Return 1
000DADr 3  A9 01                        lda #1
000DAFr 3  95 06                        sta 6,x
000DB1r 3  74 07                        stz 7,x
000DB3r 3                               ; Falls into @done
000DB3r 3               @done:
000DB3r 3                               ; Remove all but the result from the stack.
000DB3r 3  8A                           txa
000DB4r 3  18                           clc
000DB5r 3  69 06                        adc #6
000DB7r 3  AA                           tax
000DB8r 3               
000DB8r 3  60           z_compare:      rts
000DB9r 3               
000DB9r 3               
000DB9r 3               
000DB9r 3               ; ## COMPILE_COMMA ( xt -- ) "Compile xt"
000DB9r 3               ; ## "compile,"  auto  ANS core ext
000DB9r 3                       ; """https://forth-standard.org/standard/core/COMPILEComma
000DB9r 3                       ; Compile the given xt in the current word definition. It is an
000DB9r 3                       ; error if we are not in the compile state. Because we are using
000DB9r 3                       ; subroutine threading, we can't use , (COMMA) to compile new words
000DB9r 3                       ; the traditional way. By default, native compiled is allowed, unless
000DB9r 3                       ; there is a NN (Never Native) flag associated. If not, we use the
000DB9r 3                       ; value NC_LIMIT (from definitions.tasm) to decide if the code
000DB9r 3                       ; is too large to be natively coded: If the size is larger than
000DB9r 3                       ; NC_LIMIT, we silently use subroutine coding. If the AN (Always
000DB9r 3                       ; Native) flag is set, the word is always natively compiled.
000DB9r 3                       ; """
000DB9r 3               
000DB9r 3               xt_compile_comma:
000DB9r 3  20 rr rr                     jsr underflow_1
000DBCr 3               
000DBCr 3                               ; See if this is an Always Native (AN) word by checking the
000DBCr 3                               ; AN flag. We need nt for this. First, save a copy of xt to
000DBCr 3                               ; the Return Stack
000DBCr 3  B5 01                        lda 1,x                 ; MSB
000DBEr 3  48                           pha
000DBFr 3  B5 00                        lda 0,x
000DC1r 3  48                           pha                     ; LSB
000DC2r 3               
000DC2r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt -- nt )
000DC5r 3               
000DC5r 3                               ; See if this xt even has an nt.
000DC5r 3  B5 00                        lda 0,x
000DC7r 3  15 01                        ora 1,x
000DC9r 3  D0 03                        bne @check_nt
000DCBr 3               
000DCBr 3                               ; No nt in dictionary. Just compile as a JSR.
000DCBr 3  4C rr rr                     jmp @compile_as_jump
000DCEr 3               
000DCEr 3               @check_nt:
000DCEr 3                               ; put nt away for safe keeping
000DCEr 3  B5 00                        lda 0,x
000DD0r 3  85 rr                        sta tmptos
000DD2r 3  B5 01                        lda 1,x
000DD4r 3  85 rr                        sta tmptos+1
000DD6r 3               
000DD6r 3                               ; status byte is one further down
000DD6r 3  F6 00                        inc 0,x
000DD8r 3  D0 02                        bne @1
000DDAr 3  F6 01                        inc 1,x                 ; ( nt -- nt+1 )
000DDCr 3               @1:
000DDCr 3  A1 00                        lda (0,x)
000DDEr 3  85 rr                        sta tmp3                ; keep copy of status byte for NN
000DE0r 3  29 02                        and #AN                 ; mask all but Always Native (AN) bit
000DE2r 3  F0 0D                        beq @compile_check
000DE4r 3               
000DE4r 3                               ; We're natively compiling no matter what. Get length and
000DE4r 3                               ; compile in code. Get the original nt back
000DE4r 3  A5 rr                        lda tmptos
000DE6r 3  95 00                        sta 0,x
000DE8r 3  A5 rr                        lda tmptos+1
000DEAr 3  95 01                        sta 1,x
000DECr 3               
000DECr 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000DEFr 3               
000DEFr 3  80 27                        bra @compile_as_code
000DF1r 3               
000DF1r 3               @compile_check:
000DF1r 3                               ; See if Native Compile is even alowed by checking the NN
000DF1r 3                               ; flag
000DF1r 3  A5 rr                        lda tmp3
000DF3r 3  29 08                        and #NN
000DF5r 3  F0 03                        beq @check_size_limit
000DF7r 3               
000DF7r 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000DFAr 3               
000DFAr 3               @check_size_limit:
000DFAr 3                               ; Native compile is a legal option, but we need to see what
000DFAr 3                               ; limit the user set for size (in nc_limit)
000DFAr 3  A5 rr                        lda tmptos
000DFCr 3  95 00                        sta 0,x
000DFEr 3  A5 rr                        lda tmptos+1
000E00r 3  95 01                        sta 1,x
000E02r 3               
000E02r 3  20 rr rr                     jsr xt_wordsize         ; ( nt -- u )
000E05r 3               
000E05r 3                               ; Check the wordsize MSB against the user-defined limit.
000E05r 3  B5 01                        lda 1,x
000E07r 3  C5 rr                        cmp nc_limit+1
000E09r 3  90 0D                        bcc @compile_as_code    ; user-defined limit MSB
000E0Br 3  D0 08                        bne @jumpto_compile_as_jump
000E0Dr 3               
000E0Dr 3                               ; Check the wordsize LSB against the user-defined limit.
000E0Dr 3  B5 00                        lda 0,x
000E0Fr 3  C5 rr                        cmp nc_limit            ; user-defined limit LSB
000E11r 3  90 05                        bcc @compile_as_code    ; Allow native compiling for less
000E13r 3  F0 03                        beq @compile_as_code    ; than or equal to the limit.
000E15r 3               
000E15r 3               @jumpto_compile_as_jump:
000E15r 3                               ; If the wordsize is greater than the user-defined
000E15r 3                               ; limit, it will be compiled as a subroutine jump.
000E15r 3  4C rr rr                     jmp @compile_as_jump    ; too far for BRA
000E18r 3               
000E18r 3               @compile_as_code:
000E18r 3                               ; We arrive here with the length of the word's code TOS and
000E18r 3                               ; xt on top of the Return Stack. MOVE will need ( xt cp u )
000E18r 3                               ; on the data stack
000E18r 3  CA                           dex
000E19r 3  CA                           dex                     ; ( -- u ? )
000E1Ar 3  CA                           dex
000E1Br 3  CA                           dex                     ; ( -- u ? ? )
000E1Cr 3               
000E1Cr 3  B5 04                        lda 4,x
000E1Er 3  95 00                        sta 0,x                 ; LSB of u
000E20r 3  B5 05                        lda 5,x
000E22r 3  95 01                        sta 1,x                 ; ( -- u ? u )
000E24r 3               
000E24r 3  68                           pla
000E25r 3  95 04                        sta 4,x                 ; LSB of xt
000E27r 3  68                           pla
000E28r 3  95 05                        sta 5,x                 ; ( -- xt ? u )
000E2Ar 3               
000E2Ar 3  A5 rr                        lda cp                  ; LSB of cp
000E2Cr 3  95 02                        sta 2,x
000E2Er 3  A5 rr                        lda cp+1
000E30r 3  95 03                        sta 3,x                 ; ( -- xt cp u )
000E32r 3               
000E32r 3                               ; --- SPECIAL CASE 1: PREVENT RETURN STACK THRASHINIG ---
000E32r 3               
000E32r 3                               ; Native compiling allows us to strip the stack antics off
000E32r 3                               ; a number of words that use the Return Stack such as >R, R>,
000E32r 3                               ; 2>R and 2R> (but not 2R@ in this version). We compare the
000E32r 3                               ; xt with the contents of the table
000E32r 3  A0 00                        ldy #0
000E34r 3               
000E34r 3               @strip_loop:
000E34r 3  B9 rr rr                     lda @strip_table,y      ; LSB of first word
000E37r 3  D5 04                        cmp 4,x                 ; LSB of xt
000E39r 3  D0 07                        bne @next_entry
000E3Br 3               
000E3Br 3                               ; LSB is the same, test MSB
000E3Br 3  B9 rr rr                     lda @strip_table+1,y
000E3Er 3  D5 05                        cmp 5,x
000E40r 3  F0 0C                        beq @found_entry
000E42r 3               
000E42r 3                               ; MSB is not equal. Pretend though that we've come from LSB
000E42r 3                               ; so we can use the next step for both cases
000E42r 3               @next_entry:
000E42r 3                               ; Not a word that needs stripping, so check next entry in table
000E42r 3                               ; Let's see if we're done with the table (marked by zero entry)
000E42r 3  B9 rr rr                     lda @strip_table,y      ; pointing to LSB
000E45r 3  19 rr rr                     ora @strip_table+1,y    ; get MSB
000E48r 3  F0 22                        beq @underflow_strip    ; table done, let's get out of here
000E4Ar 3               
000E4Ar 3  C8                           iny
000E4Br 3  C8                           iny
000E4Cr 3  80 E6                        bra @strip_loop
000E4Er 3               @found_entry:
000E4Er 3                               ; This word is one of the ones that needs to have its size
000E4Er 3                               ; adjusted during native compile. We find the values in the
000E4Er 3                               ; next table with the same index, which is Y. However, Y is
000E4Er 3                               ; pointing to the MSB, so we need to go back to the LSB and
000E4Er 3                               ; halve the index before we can use it.
000E4Er 3  98                           tya
000E4Fr 3  4A                           lsr
000E50r 3  A8                           tay
000E51r 3               
000E51r 3                               ; Get the adjustment out of the size table. We were clever
000E51r 3                               ; enough to make sure the cut on both ends of the code is
000E51r 3                               ; is the same size.
000E51r 3  B9 rr rr                     lda @strip_size,y
000E54r 3  85 rr                        sta tmptos              ; save a copy
000E56r 3               
000E56r 3                               ; Adjust xt: Start later
000E56r 3  18                           clc
000E57r 3  75 04                        adc 4,x
000E59r 3  95 04                        sta 4,x
000E5Br 3  90 02                        bcc @2
000E5Dr 3  F6 05                        inc 5,x                 ; we just care about the carry
000E5Fr 3               @2:
000E5Fr 3               
000E5Fr 3                               ; Adjust u: Quit earlier. Since we cut off the top and the
000E5Fr 3                               ; bottom of the code, we have to double the value
000E5Fr 3  06 rr                        asl tmptos
000E61r 3               
000E61r 3  38                           sec
000E62r 3  B5 00                        lda 0,x
000E64r 3  E5 rr                        sbc tmptos
000E66r 3  95 00                        sta 0,x
000E68r 3  B0 02                        bcs @3
000E6Ar 3  D6 01                        dec 1,x                 ; we just care about the borrow
000E6Cr 3               @3:
000E6Cr 3                               ; drop through to underflow check stripping
000E6Cr 3               
000E6Cr 3               @underflow_strip:
000E6Cr 3                               ; --- SPECIAL CASE 2: REMOVE UNDERFLOW CHECKING ---
000E6Cr 3               
000E6Cr 3                               ; The user can choose to remove the unterflow testing in those
000E6Cr 3                               ; words that have the UF flag. This shortens the word by
000E6Cr 3                               ; 3 bytes if there is no underflow.
000E6Cr 3               
000E6Cr 3                               ; See if the user wants underflow stripping turned on
000E6Cr 3  A5 rr                        lda uf_strip
000E6Er 3  05 rr                        ora uf_strip+1
000E70r 3  F0 1C                        beq @specials_done
000E72r 3               
000E72r 3                               ; See if this word even contains underflow checking
000E72r 3  A5 rr                        lda tmp3
000E74r 3  29 10                        and #UF
000E76r 3  F0 16                        beq @specials_done
000E78r 3               
000E78r 3                               ; If we arrived here, underflow has to go. It's always 3 bytes
000E78r 3                               ; long. Note hat PICK is a special case.
000E78r 3               
000E78r 3                               ; Adjust xt: Start later
000E78r 3  18                           clc
000E79r 3  B5 04                        lda 4,x
000E7Br 3  69 03                        adc #3
000E7Dr 3  95 04                        sta 4,x
000E7Fr 3  90 02                        bcc @4
000E81r 3  F6 05                        inc 5,x                  ; we just care about the carry
000E83r 3               @4:
000E83r 3                               ; Adjust u: End earlier
000E83r 3  38                           sec
000E84r 3  B5 00                        lda 0,x
000E86r 3  E9 03                        sbc #3
000E88r 3  95 00                        sta 0,x
000E8Ar 3  B0 02                        bcs @5
000E8Cr 3  D6 01                        dec 1,x                  ; we just care about the borrow
000E8Er 3               @5:
000E8Er 3               
000E8Er 3                               ; --- END OF SPECIAL CASES ---
000E8Er 3               @specials_done:
000E8Er 3                               ; Store size of area to be copied for calculation of
000E8Er 3                               ; new CP. We have to do this after all of the special cases
000E8Er 3                               ; because they might change the size
000E8Er 3  B5 01                        lda 1,x                 ; MSB
000E90r 3  48                           pha
000E91r 3  B5 00                        lda 0,x                 ; LSB
000E93r 3  48                           pha
000E94r 3               
000E94r 3                               ; Enough of this, let's move those bytes already! We have
000E94r 3                               ; ( xt cp u ) on the stack at this point
000E94r 3  20 rr rr                     jsr xt_move
000E97r 3               
000E97r 3                               ; Update CP
000E97r 3  18                           clc
000E98r 3  68                           pla                     ; LSB
000E99r 3  65 rr                        adc cp
000E9Br 3  85 rr                        sta cp
000E9Dr 3               
000E9Dr 3  68                           pla                     ; MSB
000E9Er 3  65 rr                        adc cp+1
000EA0r 3  85 rr                        sta cp+1
000EA2r 3               
000EA2r 3  80 2C                        bra @done
000EA4r 3               
000EA4r 3               @strip_table:
000EA4r 3                              ; List of words we strip the Return Stack antics from
000EA4r 3                              ; during native compile, zero terminated. The index here
000EA4r 3                              ; must be the same as for the sizes
000EA4r 3  rr rr rr rr                  .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
000EA8r 3  rr rr        
000EAAr 3  rr rr rr rr                  .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
000EAEr 3  00 00        
000EB0r 3               
000EB0r 3               @strip_size:
000EB0r 3                               ; List of bytes to be stripped from the words that get their
000EB0r 3                               ; Return Stack antics removed during native compile. Index must
000EB0r 3                               ; be the same as for the xts. Zero terminated.
000EB0r 3  04 04 04 06                  .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
000EB4r 3  06 00        
000EB6r 3               
000EB6r 3               @compile_as_jump:
000EB6r 3                               ; Compile xt as a subroutine jump
000EB6r 3  A9 20                        lda #$20
000EB8r 3  92 rr                        sta (cp)
000EBAr 3               
000EBAr 3  A0 01                        ldy #1
000EBCr 3  68                           pla             ; LSB
000EBDr 3  91 rr                        sta (cp),y
000EBFr 3  C8                           iny
000EC0r 3  68                           pla             ; MSB
000EC1r 3  91 rr                        sta (cp),y
000EC3r 3               
000EC3r 3                               ; allot space we just used
000EC3r 3  A9 03                        lda #3
000EC5r 3  18                           clc
000EC6r 3  65 rr                        adc cp
000EC8r 3  85 rr                        sta cp
000ECAr 3  90 02                        bcc @6
000ECCr 3  E6 rr                        inc cp+1
000ECEr 3               @6:
000ECEr 3  E8                           inx             ; drop xt
000ECFr 3  E8                           inx
000ED0r 3               @done:
000ED0r 3               z_compile_comma:
000ED0r 3  60                           rts
000ED1r 3               
000ED1r 3               
000ED1r 3               
000ED1r 3               ; ## COMPILE_ONLY ( -- ) "Mark most recent word as COMPILE-ONLY"
000ED1r 3               ; ## "compile-only"  tested  Tali Forth
000ED1r 3                       ; """Set the Compile Only flag (CO) of the most recently defined
000ED1r 3                       ; word.
000ED1r 3                       ;
000ED1r 3                       ; The alternative way to do this is to define a word
000ED1r 3                       ; ?COMPILE that makes sure  we're in compile mode
000ED1r 3                       ; """
000ED1r 3               
000ED1r 3               xt_compile_only:
000ED1r 3  20 rr rr                     jsr current_to_dp
000ED4r 3  A0 01                        ldy #1          ; offset for status byte
000ED6r 3  B1 rr                        lda (dp),y
000ED8r 3  09 01                        ora #CO        ; make sure bit 7 is set
000EDAr 3  91 rr                        sta (dp),y
000EDCr 3               
000EDCr 3  60           z_compile_only: rts
000EDDr 3               
000EDDr 3               
000EDDr 3               
000EDDr 3               ; ## CONSTANT ( n "name" -- ) "Define a constant"
000EDDr 3               ; ## "constant"  auto  ANS core
000EDDr 3                       ; """https://forth-standard.org/standard/core/CONSTANT
000EDDr 3                       ;
000EDDr 3                       ; Forth equivalent is  CREATE , DOES> @  but we do
000EDDr 3                       ; more in assembler and let CREATE do the heavy lifting.
000EDDr 3                       ; See http://www.bradrodriguez.com/papers/moving3.htm for
000EDDr 3                       ; a primer on how this works in various Forths. This is the
000EDDr 3                       ; same code as VALUE in our case.
000EDDr 3                       ; """
000EDDr 3               xt_value:
000EDDr 3               xt_constant:
000EDDr 3  20 rr rr                     jsr underflow_1
000EE0r 3               
000EE0r 3  20 rr rr                     jsr xt_create
000EE3r 3               
000EE3r 3                           	; CREATE by default installs a subroutine jump to DOVAR,
000EE3r 3                               ; but we want DOCONST for constants. Go back two bytes and
000EE3r 3                               ; replace the subroutine jump target
000EE3r 3  38                           sec
000EE4r 3  A5 rr                        lda cp
000EE6r 3  E9 02                        sbc #2
000EE8r 3  85 rr                        sta tmp1
000EEAr 3  A5 rr                        lda cp+1
000EECr 3  E9 00                        sbc #0
000EEEr 3  85 rr                        sta tmp1+1
000EF0r 3               
000EF0r 3  A9 rr                        lda #<doconst           ; LSB of DOCONST
000EF2r 3  92 rr                        sta (tmp1)
000EF4r 3  A0 01                        ldy #1
000EF6r 3  A9 rr                        lda #>doconst           ; MSB of DOCONST
000EF8r 3  91 rr                        sta (tmp1),y
000EFAr 3               
000EFAr 3                               ; Now we save the constant number itself in the next cell
000EFAr 3  20 rr rr                     jsr xt_comma            ; drop through to adjust_z
000EFDr 3               
000EFDr 3               adjust_z:
000EFDr 3                               ; Now the length of the complete word (z_word) has increased by
000EFDr 3                               ; two. We need to update that number or else words such as SEE
000EFDr 3                               ; will ignore the PFA. We use this same routine for VARIABLE,
000EFDr 3                               ; VALUE and DEFER
000EFDr 3  20 rr rr                     jsr xt_latestnt         ; gives us ( -- nt )
000F00r 3               
000F00r 3                               ; z_word is six bytes further down
000F00r 3  B5 00                        lda 0,x
000F02r 3  85 rr                        sta tmp1
000F04r 3  B5 01                        lda 1,x
000F06r 3  85 rr                        sta tmp1+1
000F08r 3               
000F08r 3  A0 06                        ldy #6
000F0Ar 3  B1 rr                        lda (tmp1),y
000F0Cr 3  18                           clc
000F0Dr 3  69 02                        adc #2
000F0Fr 3  91 rr                        sta (tmp1),y
000F11r 3  C8                           iny
000F12r 3  B1 rr                        lda (tmp1),y
000F14r 3  69 00                        adc #0                  ; only need carry
000F16r 3  91 rr                        sta (tmp1),y
000F18r 3               
000F18r 3  E8                           inx
000F19r 3  E8                           inx
000F1Ar 3               
000F1Ar 3               z_value:
000F1Ar 3  60           z_constant:     rts
000F1Br 3               
000F1Br 3               
000F1Br 3               ; ## COUNT ( c-addr -- addr u ) "Convert character string to normal format"
000F1Br 3               ; ## "count"  auto  ANS core
000F1Br 3                       ; """https://forth-standard.org/standard/core/COUNT
000F1Br 3                       ; Convert old-style character string to address-length pair. Note
000F1Br 3                       ; that the length of the string c-addr is stored in character length
000F1Br 3                       ; (8 bit), not cell length (16 bit). This is rarely used these days,
000F1Br 3                       ; though COUNT can also be used to step through a string character by
000F1Br 3                       ; character.
000F1Br 3                       ; """
000F1Br 3               xt_count:
000F1Br 3  20 rr rr                     jsr underflow_1
000F1Er 3               
000F1Er 3  A1 00                        lda (0,x)       ; Get number of characters (255 max)
000F20r 3  A8                           tay
000F21r 3               
000F21r 3                               ; move start address up by one
000F21r 3  F6 00                        inc 0,x         ; LSB
000F23r 3  D0 02                        bne @1
000F25r 3  F6 01                        inc 1,x         ; MSB
000F27r 3               
000F27r 3                               ; save number of characters to stack
000F27r 3               @1:
000F27r 3  98                           tya
000F28r 3  CA                           dex
000F29r 3  CA                           dex
000F2Ar 3  95 00                        sta 0,x         ; LSB
000F2Cr 3  74 01                        stz 1,x         ; MSB, always zero
000F2Er 3               
000F2Er 3  60           z_count:        rts
000F2Fr 3               
000F2Fr 3               
000F2Fr 3               ; ## CR ( -- ) "Print a line feed"
000F2Fr 3               ; ## "cr"  auto  ANS core
000F2Fr 3                       ; """https://forth-standard.org/standard/core/CR"""
000F2Fr 3               xt_cr:
000F2Fr 3  A9 0A                        lda #AscLF
000F31r 3  20 rr rr                     jsr emit_a
000F34r 3  60           z_cr:           rts
000F35r 3               
000F35r 3               
000F35r 3               ; ## CREATE ( "name" -- ) "Create Dictionary entry for 'name'"
000F35r 3               ; ## "create"  auto  ANS core
000F35r 3                       ; """https://forth-standard.org/standard/core/CREATE
000F35r 3                       ;
000F35r 3                       ; See the drawing in headers.asm for details on the header
000F35r 3                       ; """
000F35r 3               
000F35r 3               xt_create:
000F35r 3                               ; get string
000F35r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
000F38r 3               
000F38r 3                               ; if we were given an empty string, we complain and quit
000F38r 3  B5 00                        lda 0,x
000F3Ar 3  15 01                        ora 1,x
000F3Cr 3  D0 05                        bne @got_name
000F3Er 3               
000F3Er 3  A9 05                        lda #err_noname
000F40r 3  4C rr rr                     jmp error
000F43r 3               
000F43r 3               @got_name:
000F43r 3                               ; Enforce maximal length of string by overwriting the MSB of
000F43r 3                               ; the length. There is a possible error here: If the string
000F43r 3                               ; is exactly 255 chars long, then a lot of the following
000F43r 3                               ; additions will fail because of wrapping
000F43r 3  74 01                        stz 1,x
000F45r 3               
000F45r 3                               ; Check to see if this name already exists.
000F45r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u )
000F48r 3  20 rr rr                     jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
000F4Br 3               
000F4Br 3  B5 00                        lda 0,x
000F4Dr 3  15 01                        ora 1,x
000F4Fr 3  F0 1E                        beq @new_name           ; We haven't seen this one before.
000F51r 3               
000F51r 3                               ; This name already exists.  See if we are supposed to print
000F51r 3                               ; the message for it.
000F51r 3  E8                           inx                     ; Drop flag (nt) from find-name.
000F52r 3  E8                           inx
000F53r 3               
000F53r 3                               ; Check bit 7
000F53r 3  24 rr                        bit status
000F55r 3  10 08                        bpl @redefined_name     ; Bit 7 is zero, so print the message.
000F57r 3               
000F57r 3                               ; We aren't supposed to print the redefined message ourselves,
000F57r 3                               ; but we should indicate that it is redefined (for ; to print
000F57r 3                               ; later).
000F57r 3  A9 80                        lda #$80                ; Set bit 7 to indicate dup
000F59r 3  05 rr                        ora status
000F5Br 3  85 rr                        sta status
000F5Dr 3  80 18                        bra @process_name
000F5Fr 3               
000F5Fr 3               @redefined_name:
000F5Fr 3                               ; Print the message that the name is redefined.
000F5Fr 3  A9 02                        lda #str_redefined
000F61r 3  20 rr rr                     jsr print_string_no_lf
000F64r 3               
000F64r 3  20 rr rr                     jsr xt_two_dup           ; ( addr u addr u )
000F67r 3  20 rr rr                     jsr xt_type
000F6Ar 3  20 rr rr                     jsr xt_space
000F6Dr 3               
000F6Dr 3  80 08                        bra @process_name
000F6Fr 3               
000F6Fr 3               @new_name:
000F6Fr 3  E8                           inx                     ; Drop flag (0) from find-name.
000F70r 3  E8                           inx
000F71r 3  A9 7F                        lda #$7F                ; Clear bit 0 of status to indicate new word.
000F73r 3  25 rr                        and status
000F75r 3  85 rr                        sta status
000F77r 3               
000F77r 3               @process_name:
000F77r 3  B5 00                        lda 0,x
000F79r 3  85 rr                        sta tmp2                ; store length of string in tmp2
000F7Br 3               
000F7Br 3                               ; remember the first free byte of memory as the start of
000F7Br 3                               ; the new word
000F7Br 3  A5 rr                        lda cp
000F7Dr 3  85 rr                        sta tmp1
000F7Fr 3  A5 rr                        lda cp+1
000F81r 3  85 rr                        sta tmp1+1
000F83r 3               
000F83r 3                               ; We need 8 bytes plus the length of the string for our new header.
000F83r 3                               ; This is also the offset for the start of the code field (the
000F83r 3                               ; xt_ label) so we need to remember it. Otherwise, we could
000F83r 3                               ; just allot the space afterwards
000F83r 3  B5 00                        lda 0,x
000F85r 3  18                           clc
000F86r 3  69 08                        adc #8
000F88r 3  85 rr                        sta tmp3                ; total header length
000F8Ar 3               
000F8Ar 3                               ; We need three more bytes for for the hardcoded code field
000F8Ar 3                               ; area (CFA), the "payload" of the word which by default will
000F8Ar 3                               ; be a subroutine jump to DOVAR
000F8Ar 3  18                           clc
000F8Br 3  69 03                        adc #3
000F8Dr 3               
000F8Dr 3                               ; We overwrite the length of the string returned by PARSE-NAME
000F8Dr 3                               ; and then call ALLOT
000F8Dr 3  95 00                        sta 0,x
000F8Fr 3  74 01                        stz 1,x         ; max header size is 255 chars
000F91r 3  20 rr rr                     jsr xt_allot    ; ( addr )
000F94r 3               
000F94r 3                               ; Get the CURRENT dictionary pointer.
000F94r 3  20 rr rr                     jsr current_to_dp
000F97r 3               
000F97r 3                               ; Now we walk through the header with Y as the index, adding
000F97r 3                               ; information byte-by-byte
000F97r 3  A0 00                        ldy #0
000F99r 3               
000F99r 3                               ; HEADER BYTE 0: Length of string
000F99r 3  A5 rr                        lda tmp2
000F9Br 3  91 rr                        sta (tmp1),y
000F9Dr 3               
000F9Dr 3                               ; HEADER BYTE 1: Status byte. By default, we set all new words
000F9Dr 3                               ; to "never native", user will have to decide if they should
000F9Dr 3                               ; be inlined
000F9Dr 3  A9 08                        lda #NN
000F9Fr 3               
000F9Fr 3                               ; Also, words defined by CREATE are marked in the header has
000F9Fr 3                               ; having a Code Field Area (CFA), which is a bit tricky for
000F9Fr 3                               ; Subroutine Threaded Code (STC). We do this so >BODY works
000F9Fr 3                               ; correctly with DOES> and CREATE. See the discussion at
000F9Fr 3                               ; http://forum.6502.org/viewtopic.php?f=9&t=5182 for details
000F9Fr 3  09 20                        ora #HC
000FA1r 3  C8                           iny
000FA2r 3  91 rr                        sta (tmp1),y
000FA4r 3  C8                           iny
000FA5r 3               
000FA5r 3                               ; HEADER BYTE 2,3: Next header. This is the current last word
000FA5r 3                               ; in the Dictionary
000FA5r 3  A5 rr                        lda dp
000FA7r 3  91 rr                        sta (tmp1),y
000FA9r 3  C8                           iny
000FAAr 3  A5 rr                        lda dp+1
000FACr 3  91 rr                        sta (tmp1),y
000FAEr 3  C8                           iny
000FAFr 3               
000FAFr 3                               ; Interlude: Make old CP new DP (new start of Dictionary)
000FAFr 3  A5 rr                        lda tmp1+1
000FB1r 3  85 rr                        sta dp+1
000FB3r 3  A5 rr                        lda tmp1
000FB5r 3  85 rr                        sta dp
000FB7r 3               
000FB7r 3                               ; HEADER BYTE 4,5: Start of the code field ("xt_" of this word).
000FB7r 3                               ; This begins after the header so we take the length of the
000FB7r 3                               ; header, which we cleverly saved in tmp3, and use it as an
000FB7r 3                               ; offset to the address of the start of the word. We come here
000FB7r 3                               ; with tmp1 in A
000FB7r 3  18                           clc
000FB8r 3  65 rr                        adc tmp3        ; add total header length
000FBAr 3  91 rr                        sta (tmp1),y
000FBCr 3  48                           pha             ; we need this in the next step
000FBDr 3  C8                           iny
000FBEr 3               
000FBEr 3  A5 rr                        lda tmp1+1
000FC0r 3  69 00                        adc #0          ; only need the carry
000FC2r 3  91 rr                        sta (tmp1),y
000FC4r 3  C8                           iny
000FC5r 3               
000FC5r 3                               ; HEADER BYTE 6,7: End of code ("z_" of this word). By default,
000FC5r 3                               ; we execute a jump to the DOVAR routine, so we need to move three
000FC5r 3                               ; bytes down, and then one more byte so that the z_ label points
000FC5r 3                               ; to the (still fictional) RTS instruction for correct compilation
000FC5r 3  68                           pla             ; LSB of "z_" address
000FC6r 3  18                           clc
000FC7r 3  69 03                        adc #3
000FC9r 3  91 rr                        sta (tmp1),y
000FCBr 3               
000FCBr 3  88                           dey             ; get the MSB of xt back
000FCCr 3  B1 rr                        lda (tmp1),y
000FCEr 3  69 00                        adc #0          ; only need the carry
000FD0r 3  C8                           iny
000FD1r 3  C8                           iny
000FD2r 3  91 rr                        sta (tmp1),y
000FD4r 3  C8                           iny
000FD5r 3               
000FD5r 3                               ; HEADER BYTE 8: Start of name string. The address is TOS, the
000FD5r 3                               ; length in tmp2. We subtract 8 from the address so we can
000FD5r 3                               ; use the same loop index, which is already 8 byte ahead at
000FD5r 3                               ; this point
000FD5r 3  B5 00                        lda 0,x
000FD7r 3  38                           sec
000FD8r 3  E9 08                        sbc #8
000FDAr 3  85 rr                        sta tmptos
000FDCr 3               
000FDCr 3  B5 01                        lda 1,x
000FDEr 3  E9 00                        sbc #0          ; only need carry
000FE0r 3  85 rr                        sta tmptos+1
000FE2r 3               
000FE2r 3               @name_loop:
000FE2r 3  B1 rr                        lda (tmptos),y
000FE4r 3               
000FE4r 3                               ; Make sure it goes into the dictionary in lower case.
000FE4r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
000FE6r 3  B0 07                        bcs @store_name
000FE8r 3  C9 41                        cmp #$41        ; ASCII 'A'
000FEAr 3  90 03                        bcc @store_name
000FECr 3               
000FECr 3                               ; An uppercase letter has been located. Make it
000FECr 3                               ; lowercase.
000FECr 3  18                           clc
000FEDr 3  69 20                        adc #$20
000FEFr 3               
000FEFr 3                               ; Fall into @store_name.
000FEFr 3               
000FEFr 3               @store_name:
000FEFr 3  91 rr                        sta (tmp1),y
000FF1r 3  C8                           iny
000FF2r 3  C6 rr                        dec tmp2
000FF4r 3  D0 EC                        bne @name_loop
000FF6r 3               
000FF6r 3                               ; After thename string comes the code field, starting at the
000FF6r 3                               ; current xt of this word, which is initially a jump to the
000FF6r 3                               ; subroutine to DOVAR. We code this jump by hand
000FF6r 3  A9 20                        lda #$20        ; opcode of JSR
000FF8r 3  91 rr                        sta (tmp1),y
000FFAr 3  C8                           iny
000FFBr 3  A9 rr                        lda #<dovar
000FFDr 3  91 rr                        sta (tmp1),y
000FFFr 3  C8                           iny
001000r 3  A9 rr                        lda #>dovar
001002r 3  91 rr                        sta (tmp1),y
001004r 3               
001004r 3                               ; Update the CURRENT wordlist with the new DP.
001004r 3                               ; We do this down here because this routine uses Y.
001004r 3  20 rr rr                     jsr dp_to_current
001007r 3               
001007r 3                               ; And we're done. Restore stack
001007r 3  E8                           inx
001008r 3  E8                           inx
001009r 3               
001009r 3  60           z_create:       rts
00100Ar 3               
00100Ar 3               
00100Ar 3               
00100Ar 3               ; ## D_MINUS ( d d -- d ) "Subtract two double-celled numbers"
00100Ar 3               ; ## "d-"  auto  ANS double
00100Ar 3                       ; """https://forth-standard.org/standard/double/DMinus"""
00100Ar 3               
00100Ar 3               xt_d_minus:
00100Ar 3  20 rr rr                     jsr underflow_4 ; two double numbers
00100Dr 3               
00100Dr 3  38                           sec
00100Er 3               
00100Er 3  B5 06                        lda 6,x         ; LSB of lower word
001010r 3  F5 02                        sbc 2,x
001012r 3  95 06                        sta 6,x
001014r 3               
001014r 3  B5 07                        lda 7,x         ; MSB of lower word
001016r 3  F5 03                        sbc 3,x
001018r 3  95 07                        sta 7,x
00101Ar 3               
00101Ar 3  B5 04                        lda 4,x         ; LSB of upper word
00101Cr 3  F5 00                        sbc 0,x
00101Er 3  95 04                        sta 4,x
001020r 3               
001020r 3  B5 05                        lda 5,x         ; MSB of upper word
001022r 3  F5 01                        sbc 1,x
001024r 3  95 05                        sta 5,x
001026r 3               
001026r 3  E8                           inx
001027r 3  E8                           inx
001028r 3  E8                           inx
001029r 3  E8                           inx
00102Ar 3               
00102Ar 3  60           z_d_minus:      rts
00102Br 3               
00102Br 3               
00102Br 3               
00102Br 3               ; ## D_PLUS ( d d -- d ) "Add two double-celled numbers"
00102Br 3               ; ## "d+"  auto  ANS double
00102Br 3                       ; """https://forth-standard.org/standard/double/DPlus"""
00102Br 3               
00102Br 3               xt_d_plus:
00102Br 3  20 rr rr                     jsr underflow_4 ; two double numbers
00102Er 3               
00102Er 3  18                           clc
00102Fr 3  B5 02                        lda 2,x         ; LSB of lower word
001031r 3  75 06                        adc 6,x
001033r 3  95 06                        sta 6,x
001035r 3               
001035r 3  B5 03                        lda 3,x         ; MSB of lower word
001037r 3  75 07                        adc 7,x
001039r 3  95 07                        sta 7,x
00103Br 3               
00103Br 3  B5 00                        lda 0,x         ; LSB of upper word
00103Dr 3  75 04                        adc 4,x
00103Fr 3  95 04                        sta 4,x
001041r 3               
001041r 3  B5 01                        lda 1,x         ; MSB of upper word
001043r 3  75 05                        adc 5,x
001045r 3  95 05                        sta 5,x
001047r 3               
001047r 3  E8                           inx
001048r 3  E8                           inx
001049r 3  E8                           inx
00104Ar 3  E8                           inx
00104Br 3               
00104Br 3  60           z_d_plus:       rts
00104Cr 3               
00104Cr 3               
00104Cr 3               
00104Cr 3               ; ## D_TO_S ( d -- n ) "Convert a double number to single"
00104Cr 3               ; ## "d>s"  auto  ANS double
00104Cr 3                       ; """https://forth-standard.org/standard/double/DtoS
00104Cr 3                       ; Though this is basically just DROP, we keep it
00104Cr 3                       ; separate so we can test for underflow
00104Cr 3                       ; """
00104Cr 3               
00104Cr 3               xt_d_to_s:
00104Cr 3  20 rr rr                     jsr underflow_2
00104Fr 3               
00104Fr 3  E8                           inx
001050r 3  E8                           inx
001051r 3               
001051r 3  60           z_d_to_s:       rts
001052r 3               
001052r 3               
001052r 3               
001052r 3               ; ## DABS ( d -- d ) "Return the absolute value of a double"
001052r 3               ; ## "dabs"  auto  ANS double
001052r 3                       ; """https://forth-standard.org/standard/double/DABS"""
001052r 3               
001052r 3               xt_dabs:
001052r 3  20 rr rr                     jsr underflow_2 ; double number
001055r 3               
001055r 3  B5 01                        lda 1,x         ; MSB of high cell
001057r 3  10 17                        bpl @done       ; positive, we get off light
001059r 3               
001059r 3                               ; negative, calculate 0 - d
001059r 3  A0 00                        ldy #0
00105Br 3  38                           sec
00105Cr 3               
00105Cr 3  98                           tya
00105Dr 3  F5 02                        sbc 2,x         ; LSB of low cell
00105Fr 3  95 02                        sta 2,x
001061r 3               
001061r 3  98                           tya
001062r 3  F5 03                        sbc 3,x         ; MSB of low cell
001064r 3  95 03                        sta 3,x
001066r 3               
001066r 3  98                           tya
001067r 3  F5 00                        sbc 0,x         ; LSB of high cell
001069r 3  95 00                        sta 0,x
00106Br 3               
00106Br 3  98                           tya
00106Cr 3  F5 01                        sbc 1,x         ; MSB of high cell
00106Er 3  95 01                        sta 1,x
001070r 3               @done:
001070r 3  60           z_dabs:         rts
001071r 3               
001071r 3               
001071r 3               
001071r 3               ; ## DECIMAL ( -- ) "Change radix base to decimal"
001071r 3               ; ## "decimal"  auto  ANS core
001071r 3                       ; """https://forth-standard.org/standard/core/DECIMAL"""
001071r 3               xt_decimal:
001071r 3  A9 0A                        lda #10
001073r 3  85 rr                        sta base
001075r 3  64 rr                        stz base+1              ; paranoid
001077r 3               
001077r 3  60           z_decimal:      rts
001078r 3               
001078r 3               
001078r 3               ; ## DEFER ( "name" -- ) "Create a placeholder for words by name"
001078r 3               ; ## "defer"  auto  ANS core ext
001078r 3                       ; """https://forth-standard.org/standard/core/DEFER
001078r 3                       ; Reserve an name that can be linked to various xt by IS.
001078r 3                       ;
001078r 3                       ; The ANS reference implementation is
001078r 3                       ;       CREATE ['] ABORT , DOES> @ EXECUTE ;
001078r 3                       ; But we use this routine as a low-level word so things go faster
001078r 3               
001078r 3               xt_defer:
001078r 3  20 rr rr                     jsr xt_create
00107Br 3               
00107Br 3                               ; CREATE by default installs a subroutine jump to DOVAR,
00107Br 3                               ; but we actually want DODEFER this time. Go back two
00107Br 3                               ; bytes and repace the subroutine jump target
00107Br 3  A5 rr                        lda cp          ; LSB
00107Dr 3  38                           sec
00107Er 3  E9 02                        sbc #2
001080r 3  85 rr                        sta tmp1
001082r 3               
001082r 3  A5 rr                        lda cp+1        ; MSB
001084r 3  E9 00                        sbc #0          ; we only care about the borrow
001086r 3  85 rr                        sta tmp1+1
001088r 3               
001088r 3                               ; Save the target address
001088r 3  A0 00                        ldy #0
00108Ar 3  A9 rr                        lda #<dodefer   ; LSB
00108Cr 3  91 rr                        sta (tmp1),y
00108Er 3  C8                           iny
00108Fr 3  A9 rr                        lda #>dodefer   ; MSB
001091r 3  91 rr                        sta (tmp1),y
001093r 3               
001093r 3               
001093r 3                               ; DODEFER executes the next address it finds after
001093r 3                               ; its call. As default, we include the error
001093r 3                               ; "Defer not defined"
001093r 3  A9 rr                        lda #<defer_error
001095r 3  92 rr                        sta (cp)
001097r 3  E6 rr                        inc cp
001099r 3  D0 02                        bne @1
00109Br 3  E6 rr                        inc cp+1
00109Dr 3               @1:
00109Dr 3  A9 rr                        lda #>defer_error
00109Fr 3  92 rr                        sta (cp)
0010A1r 3  E6 rr                        inc cp
0010A3r 3  D0 02                        bne @2
0010A5r 3  E6 rr                        inc cp+1
0010A7r 3               @2:
0010A7r 3  20 rr rr                     jsr adjust_z    ; adjust header to correct length
0010AAr 3               
0010AAr 3  60           z_defer:        rts
0010ABr 3               
0010ABr 3               
0010ABr 3               
0010ABr 3               ; ## DEFER_FETCH ( xt1 -- xt2 ) "Get the current XT for a deferred word"
0010ABr 3               ; ## "defer@"  auto  ANS core ext
0010ABr 3                       ; """http://forth-standard.org/standard/core/DEFERFetch"""
0010ABr 3               
0010ABr 3               xt_defer_fetch:
0010ABr 3                               ; No underflow checking as >BODY does it.
0010ABr 3  20 rr rr                     jsr xt_to_body
0010AEr 3  20 rr rr                     jsr xt_fetch
0010B1r 3  60           z_defer_fetch:  rts
0010B2r 3               
0010B2r 3               
0010B2r 3               
0010B2r 3               ; ## DEFER_STORE ( xt2 x1 -- ) "Set xt1 to execute xt2"
0010B2r 3               ; ## "defer!"  auto  ANS core ext
0010B2r 3                       ; """http://forth-standard.org/standard/core/DEFERStore"""
0010B2r 3               
0010B2r 3               xt_defer_store:
0010B2r 3                               ; No underflow checking as >BODY and ! do it.
0010B2r 3  20 rr rr                     jsr xt_to_body
0010B5r 3  20 rr rr                     jsr xt_store
0010B8r 3  60           z_defer_store:  rts
0010B9r 3               
0010B9r 3               
0010B9r 3               
0010B9r 3               ; ## DEFINITIONS ( -- ) "Make first wordlist in search order the current wordlist"
0010B9r 3               ; ## "definitions" auto ANS search
0010B9r 3               xt_definitions:
0010B9r 3  A0 1F                        ldy #search_order_offset    ; Transfer byte variable
0010BBr 3  B1 rr                        lda (up),y                  ; SEARCH_ORDER[0] to
0010BDr 3  A0 04                        ldy #current_offset         ; byte variable CURRENT.
0010BFr 3  91 rr                        sta (up),y
0010C1r 3  60           z_definitions:  rts
0010C2r 3               
0010C2r 3               
0010C2r 3               ; ## DEPTH ( -- u ) "Get number of cells (not bytes) used by stack"
0010C2r 3               ; ## "depth"  auto  ANS core
0010C2r 3                       ; """https://forth-standard.org/standard/core/DEPTH"""
0010C2r 3               xt_depth:
0010C2r 3  A9 FF                        lda #dsp0
0010C4r 3  86 rr                        stx tmpdsp
0010C6r 3  38                           sec
0010C7r 3  E5 rr                        sbc tmpdsp
0010C9r 3               
0010C9r 3                               ; divide by two because each cell is two bytes
0010C9r 3  4A                           lsr
0010CAr 3               
0010CAr 3  CA                           dex
0010CBr 3  CA                           dex
0010CCr 3  95 00                        sta 0,x
0010CEr 3  74 01                        stz 1,x
0010D0r 3               
0010D0r 3  60           z_depth:        rts
0010D1r 3               
0010D1r 3               
0010D1r 3               ; ## DIGIT_QUESTION ( char -- u f | char f ) "Convert ASCII char to number"
0010D1r 3               ; ## "digit?"  auto  Tali Forth
0010D1r 3                       ; """Inspired by the pForth instruction DIGIT, see
0010D1r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
0010D1r 3                       ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to
0010D1r 3                       ; pForth, we get the base (radix) ourselves instead of having the
0010D1r 3                       ; user provide it. There is no standard name for this routine, which
0010D1r 3                       ; itself is not ANS; we use DIGIT? following pForth and Gforth.
0010D1r 3                       ; """
0010D1r 3               
0010D1r 3               xt_digit_question:
0010D1r 3  20 rr rr                     jsr underflow_1
0010D4r 3               
0010D4r 3                               ; one way or another, we're going to need room for the
0010D4r 3                               ; flag on the stack
0010D4r 3  CA                           dex
0010D5r 3  CA                           dex
0010D6r 3  74 00                        stz 0,x                 ; default flag is failure
0010D8r 3  74 01                        stz 1,x
0010DAr 3  74 03                        stz 3,x                 ; paranoid
0010DCr 3               
0010DCr 3                               ; Check the character, now in the LSB of NOS. First, make
0010DCr 3                               ; sure we're not below the ASCII code for "0"
0010DCr 3  B5 02                        lda 2,x
0010DEr 3  C9 30                        cmp #'0'
0010E0r 3  90 23                        bcc @done               ; failure flag already set
0010E2r 3               
0010E2r 3                               ; Next, see if we are below "9", because that would make
0010E2r 3                               ; this a normal number
0010E2r 3  C9 3A                        cmp #'9'+1               ; this is actually ":"
0010E4r 3  90 12                        bcc @checkbase
0010E6r 3               
0010E6r 3                               ; Well, then let's see if this is the gap between "9" and "A"
0010E6r 3                               ; so we can treat the whole range as a number
0010E6r 3  C9 41                        cmp #'A'
0010E8r 3  90 1B                        bcc @done               ; failure flag is already set
0010EAr 3               
0010EAr 3                               ; probably a letter, so we make sure it is uppercase
0010EAr 3  C9 61                        cmp #'a'
0010ECr 3  90 07                        bcc @case_done          ; not lower case, too low
0010EEr 3  C9 7B                        cmp #'z'+1
0010F0r 3  B0 03                        bcs @case_done          ; not lower case, too high
0010F2r 3               
0010F2r 3  18                           clc                     ; just right
0010F3r 3  69 E0                        adc #$e0                ; offset to upper case (wraps)
0010F5r 3               
0010F5r 3               @case_done:
0010F5r 3                               ; get rid of the gap between "9" and "A" so we can treat
0010F5r 3                               ; the whole range as one number
0010F5r 3  38                           sec
0010F6r 3  E9 07                        sbc #7                  ; fall through to @checkbase
0010F8r 3               
0010F8r 3               @checkbase:
0010F8r 3                               ; we have a number, now see if it falls inside the range
0010F8r 3                               ; provided by BASE
0010F8r 3  38                           sec
0010F9r 3  E9 30                        sbc #'0'                 ; this is also the conversion step
0010FBr 3  C5 rr                        cmp base
0010FDr 3  B0 06                        bcs @done               ; already have false flag
0010FFr 3               
0010FFr 3                               ; Found a legal number
0010FFr 3  95 02                        sta 2,x                 ; put number in NOS
001101r 3  D6 00                        dec 0,x                 ; set success flag
001103r 3  D6 01                        dec 1,x
001105r 3               
001105r 3               @done:
001105r 3               z_digit_question:
001105r 3  60                           rts
001106r 3               
001106r 3               
001106r 3               ; ## DISASM ( addr u -- ) "Disassemble a block of memory"
001106r 3               ; ## "disasm"  tested  Tali Forth
001106r 3                       ; """Convert a segment of memory to assembler output. This
001106r 3                       ; word is vectored so people can add their own disassembler.
001106r 3                       ; Natively, this produces Simpler Assembly Notation (SAN)
001106r 3                       ; code, see the section on The Disassembler in the manual and
001106r 3                       ; the file disassembler.asm for more details.
001106r 3                       ; """
001106r 3               xt_disasm:
001106r 3  20 rr rr                     jsr underflow_2
001109r 3                           .ifdef disassembler
001109r 3                               jsr disassembler
001109r 3                           .endif
001109r 3               
001109r 3  60           z_disasm:       rts
00110Ar 3               
00110Ar 3               
00110Ar 3               ; ## DNEGATE ( d -- d ) "Negate double cell number"
00110Ar 3               ; ## "dnegate"  auto  ANS double
00110Ar 3                       ; """https://forth-standard.org/standard/double/DNEGATE"""
00110Ar 3               xt_dnegate:
00110Ar 3  20 rr rr                     jsr underflow_2 ; double number
00110Dr 3               
00110Dr 3  A0 00             		ldy #0
00110Fr 3  38                           sec
001110r 3               
001110r 3  98                           tya
001111r 3  F5 02                        sbc 2,x         ; LSB of low cell
001113r 3  95 02                        sta 2,x
001115r 3               
001115r 3  98                           tya
001116r 3  F5 03                        sbc 3,x         ; MSB of low cell
001118r 3  95 03                        sta 3,x
00111Ar 3               
00111Ar 3  98                           tya
00111Br 3  F5 00                        sbc 0,x         ; LSB of high cell
00111Dr 3  95 00                        sta 0,x
00111Fr 3               
00111Fr 3  98                           tya
001120r 3  F5 01                        sbc 1,x         ; MSB of high cell
001122r 3  95 01                        sta 1,x
001124r 3               
001124r 3  60           z_dnegate:      rts
001125r 3               
001125r 3               
001125r 3               ; ## QUESTION_DO ( limit start -- )(R: -- limit start) "Conditional loop start"
001125r 3               ; ## "?do"  auto  ANS core ext
001125r 3                       ; """https://forth-standard.org/standard/core/qDO"""
001125r 3               xt_question_do:
001125r 3                               ; ?DO shares most of its code with DO. We use the tmp1 flag
001125r 3                               ; to mark which is which
001125r 3  A9 FF                        lda #$ff                ; -1 is ?DO, jump to common code
001127r 3  85 rr                        sta tmp1
001129r 3  80 02                        bra do_common           ; skip flag for DO
00112Br 3               
00112Br 3               ; ## DO ( limit start -- )(R: -- limit start)  "Start a loop"
00112Br 3               ; ## "do"  auto  ANS core
00112Br 3                       ; """https://forth-standard.org/standard/core/DO
00112Br 3                       ;
00112Br 3                       ; Compile-time part of DO. Could be realized in Forth as
00112Br 3                       ;       : DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY
00112Br 3                       ; but we do it in assembler for speed. To work with LEAVE, we compile
00112Br 3                       ; a routine that pushes the end address to the Return Stack at run
00112Br 3                       ; time. This is based on a suggestion by Garth Wilson, see
00112Br 3                       ; the Control Flow section of the manual for details.
00112Br 3                       ;
00112Br 3                       ; This may not be native compile. Don't check for a stack underflow
00112Br 3                       ; """
00112Br 3               
00112Br 3               xt_do:
00112Br 3                               ; DO and ?DO share most of their code, use tmp1 as a flag.
00112Br 3  64 rr                        stz tmp1                ; 0 is DO, drop through to DO_COMMON
00112Dr 3               do_common:
00112Dr 3                               ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
00112Dr 3                               ; compile the address we need to LDA at runtime
00112Dr 3  CA                           dex
00112Er 3  CA                           dex
00112Fr 3  A5 rr                        lda cp
001131r 3  95 00                        sta 0,x                 ; LSB
001133r 3  A5 rr                        lda cp+1
001135r 3  95 01                        sta 1,x                 ; MSB   ( limit start here )
001137r 3               
001137r 3                               ; now we compile six dummy bytes that LOOP/+LOOP will
001137r 3                               ; replace by the actual LDA/PHA instructions
001137r 3  A9 05                        lda #5                  ; we don't really care about the value,
001139r 3  A8                           tay                     ; so we use 5 to be tricky
00113Ar 3               @loop:
00113Ar 3  91 rr                        sta (cp),y
00113Cr 3  88                           dey
00113Dr 3  10 FB                        bpl @loop
00113Fr 3               
00113Fr 3                               ; update CP
00113Fr 3  1A                           inc             ; we used 5 as a dummy value, this is why
001140r 3  18                           clc
001141r 3  65 rr                        adc cp
001143r 3  85 rr                        sta cp
001145r 3  90 02                        bcc @1
001147r 3  E6 rr                        inc cp+1
001149r 3               @1:
001149r 3                               ; compile the (?DO) portion of ?DO if appropriate
001149r 3  A5 rr                        lda tmp1
00114Br 3  F0 17                        beq @compile_do
00114Dr 3               
00114Dr 3                               ; We came from ?DO, so compile its runtime first. We do
00114Dr 3                               ; this with a quick loop because we know it has to be
00114Dr 3                               ; Always Native anyway
00114Dr 3  A0 14                        ldy #question_do_runtime_end-question_do_runtime
00114Fr 3  5A                           phy             ; save counter to calculate new CP
001150r 3               @2:
001150r 3  B9 rr rr                     lda question_do_runtime,y
001153r 3  91 rr                        sta (cp),y
001155r 3  88                           dey
001156r 3  10 F8                        bpl @2
001158r 3               
001158r 3                               ; adjust CP
001158r 3  68                           pla             ; retrieve counter
001159r 3  18                           clc
00115Ar 3  65 rr                        adc cp
00115Cr 3  85 rr                        sta cp
00115Er 3  A5 rr                        lda cp+1
001160r 3  69 00                        adc #0          ; only care about carry
001162r 3  85 rr                        sta cp+1        ; fall through to @compile_do
001164r 3               
001164r 3               @compile_do:
001164r 3                               ; compile runtime part of DO.
001164r 3  A0 24                        ldy #do_runtime_end-do_runtime  ; counter
001166r 3  5A                           phy             ; save counter to calculate new CP
001167r 3               @3:
001167r 3  B9 rr rr                     lda do_runtime,y
00116Ar 3  91 rr                        sta (cp),y
00116Cr 3  88                           dey
00116Dr 3  10 F8                        bpl @3
00116Fr 3               
00116Fr 3                               ; adjust CP
00116Fr 3  68                           pla             ; retrieve counter
001170r 3  18                           clc
001171r 3  65 rr                        adc cp
001173r 3  85 rr                        sta cp
001175r 3  A5 rr                        lda cp+1
001177r 3  69 00                        adc #0          ; only care about carry
001179r 3  85 rr                        sta cp+1
00117Br 3               
00117Br 3                               ; HERE, hardcoded for speed. We put it on the Data Stack
00117Br 3                               ; where LOOP/+LOOP takes it from. Note this has nothing to
00117Br 3                               ; do with the HERE we're saving for LEAVE
00117Br 3  CA                           dex
00117Cr 3  CA                           dex
00117Dr 3  A5 rr                        lda cp          ; LSB
00117Fr 3  95 00                        sta 0,x
001181r 3  A5 rr                        lda cp+1        ; MSB
001183r 3  95 01                        sta 1,x
001185r 3               z_question_do:
001185r 3  60           z_do:           rts
001186r 3               
001186r 3               
001186r 3               do_runtime:
001186r 3                       ; """Runtime routine for DO loop. Note that ANS loops quit when the
001186r 3                       ; boundry of limit-1 and limit is reached, a different mechanism than
001186r 3                       ; the FIG Forth loop (you can see which version you have by running
001186r 3                       ; a loop with start and limit as the same value, for instance
001186r 3                       ; 0 0 DO -- these will walk through the number space). We use a
001186r 3                       ; "fudge factor" for the limit that makes the Overflow Flag trip when
001186r 3                       ; it is reached; see http://forum.6502.org/viewtopic.php?f=9&t=2026
001186r 3                       ; for further discussion of this. The source given there for
001186r 3                       ; this idea is Laxen & Perry F83. -- This routine is called (DO)
001186r 3                       ; in some Forths. Usually, we would define this as a separate word
001186r 3                       ; and compile it with COMPILE, and the Always Native (AN) flag.
001186r 3                       ; However, we can do it faster if we just copy the bytes
001186r 3                       ; of this routine with a simple loop in DO.
001186r 3                       ; """
001186r 3                               ; First step: create fudge factor (FUFA) by subtracting the
001186r 3                               ; limit from $8000, the number that will trip the overflow
001186r 3                               ; flag
001186r 3  38                           sec
001187r 3  A9 00                        lda #0
001189r 3  F5 02                        sbc 2,x         ; LSB of limit
00118Br 3  95 02                        sta 2,x         ; save FUFA for later use
00118Dr 3               
00118Dr 3  A9 80                        lda #$80
00118Fr 3  F5 03                        sbc 3,x         ; MSB of limit
001191r 3  95 03                        sta 3,x         ; save FUFA for later use
001193r 3  48                           pha             ; FUFA replaces limit on R stack
001194r 3  B5 02                        lda 2,x         ; LSB of limit
001196r 3  48                           pha
001197r 3               
001197r 3                               ; Second step: index is FUFA plus original index
001197r 3  18                           clc
001198r 3  B5 00                        lda 0,x         ; LSB of original index
00119Ar 3  75 02                        adc 2,x         ; add LSB of FUFA
00119Cr 3  95 00                        sta 0,x
00119Er 3  B5 01                        lda 1,x         ; MSB of orginal index
0011A0r 3  75 03                        adc 3,x         ; add MSB of FUFA
0011A2r 3  48                           pha
0011A3r 3  B5 00                        lda 0,x         ; LSB of index
0011A5r 3  48                           pha
0011A6r 3               
0011A6r 3                               ; we've saved the FUFA on the NOS of the R stack, so we can
0011A6r 3                               ; use it later. Clean the Data Stack
0011A6r 3  E8                           inx
0011A7r 3  E8                           inx
0011A8r 3  E8                           inx
0011A9r 3  E8                           inx             ; no RTS because this is copied into code
0011AAr 3               do_runtime_end:
0011AAr 3               
0011AAr 3               question_do_runtime:
0011AAr 3               
0011AAr 3                       ; """This is called (?DO) in some Forths. See the explanation at
0011AAr 3                       ; do_runtime for the background on this design
0011AAr 3                       ; """
0011AAr 3                               ; see if TOS and NOS are equal. Change this to assembler
0011AAr 3                               ; for speed
0011AAr 3  20 rr rr                     jsr xt_two_dup          ; ( n1 n2 n1 n2 )
0011ADr 3  20 rr rr                     jsr xt_equal            ; ( -- n1 n2 f )
0011B0r 3               
0011B0r 3  B5 00                        lda 0,x
0011B2r 3  15 01                        ora 1,x
0011B4r 3  F0 06                        beq @do_do
0011B6r 3               
0011B6r 3                               ; We're equal, so dump everything and jump beyond the loop.
0011B6r 3                               ; But first, dump six entries off of the Data Stack
0011B6r 3  8A                           txa
0011B7r 3  18                           clc
0011B8r 3  69 06                        adc #6
0011BAr 3  AA                           tax
0011BBr 3               
0011BBr 3                               ; Then abort the whole loop
0011BBr 3  60                           rts
0011BCr 3               @do_do:
0011BCr 3  E8                           inx             ; clear flag from EQUAL off stack
0011BDr 3  E8                           inx             ; no RTS because this is copied into code
0011BEr 3               question_do_runtime_end:
0011BEr 3               
0011BEr 3               
0011BEr 3               
0011BEr 3               ; ## DOES ( -- ) "Add payload when defining new words"
0011BEr 3               ; ## "does>"  auto  ANS core
0011BEr 3                       ; """https://forth-standard.org/standard/core/DOES
0011BEr 3                       ; Create the payload for defining new defining words. See
0011BEr 3                       ; http://www.bradrodriguez.com/papers/moving3.htm and
0011BEr 3                       ; the Developer Guide in the manual for a discussion of
0011BEr 3                       ; DOES>'s internal workings. This uses tmp1 and tmp2.
0011BEr 3                       ; """
0011BEr 3               
0011BEr 3               xt_does:
0011BEr 3                               ; compile a subroutine jump to runtime of DOES>
0011BEr 3  A0 rr                        ldy #>does_runtime
0011C0r 3  A9 rr                        lda #<does_runtime
0011C2r 3  20 rr rr                     jsr cmpl_subroutine
0011C5r 3               
0011C5r 3                               ; compile a subroutine jump to DODOES. In traditional
0011C5r 3                               ; terms, this is the Code Field Area (CFA) of the new
0011C5r 3                               ; word
0011C5r 3  A0 rr                        ldy #>dodoes
0011C7r 3  A9 rr                        lda #<dodoes
0011C9r 3  20 rr rr                     jsr cmpl_subroutine
0011CCr 3               
0011CCr 3  60           z_does:         rts
0011CDr 3               
0011CDr 3               
0011CDr 3               does_runtime:
0011CDr 3                       ; """Runtime portion of DOES>. This replaces the subroutine jump
0011CDr 3                       ; to DOVAR that CREATE automatically encodes by a jump to the
0011CDr 3                       ; address that contains a subroutine jump to DODOES. We don't
0011CDr 3                       ; jump to DODOES directly because we need to work our magic with
0011CDr 3                       ; the return addresses. This routine is also known as "(DOES)" in
0011CDr 3                       ; other Forths
0011CDr 3                       ; """
0011CDr 3               
0011CDr 3  7A                           ply             ; LSB
0011CEr 3  68                           pla             ; MSB
0011CFr 3               
0011CFr 3  C8                           iny
0011D0r 3  D0 01                        bne @1
0011D2r 3  1A                           inc
0011D3r 3               @1:
0011D3r 3  84 rr                        sty tmp1
0011D5r 3  85 rr                        sta tmp1+1
0011D7r 3               
0011D7r 3                               ; CREATE has also already modified the DP to point to the new
0011D7r 3                               ; word. We have no idea which instructions followed the CREATE
0011D7r 3                               ; command if there is a DOES> so the CP could point anywhere
0011D7r 3                               ; by now. The address of the word's xt is four bytes down.
0011D7r 3  20 rr rr                     jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
0011DAr 3  A5 rr                        lda dp
0011DCr 3  18                           clc
0011DDr 3  69 04                        adc #4
0011DFr 3  85 rr                        sta tmp2
0011E1r 3  A5 rr                        lda dp+1
0011E3r 3  69 00                        adc #0          ; we only care about the carry
0011E5r 3  85 rr                        sta tmp2+1
0011E7r 3               
0011E7r 3                               ; Now we get that address and add one byte to skip over the JSR
0011E7r 3                               ; opcode
0011E7r 3  B2 rr                        lda (tmp2)
0011E9r 3  18                           clc
0011EAr 3  69 01                        adc #1
0011ECr 3  85 rr                        sta tmp3
0011EEr 3  A0 01                        ldy #1
0011F0r 3  B1 rr                        lda (tmp2),y
0011F2r 3  69 00                        adc #0          ; we only care about the carry
0011F4r 3  85 rr                        sta tmp3+1
0011F6r 3               
0011F6r 3                               ; Replace the DOVAR address with our own
0011F6r 3  A5 rr                        lda tmp1        ; LSB
0011F8r 3  92 rr                        sta (tmp3)
0011FAr 3  A5 rr                        lda tmp1+1
0011FCr 3  91 rr                        sta (tmp3),y    ; Y is still 1
0011FEr 3               
0011FEr 3                               ; Since we removed the return address that brought us here, we
0011FEr 3                               ; go back to whatever the main routine was. Otherwise, we we
0011FEr 3                               ; smash into the subroutine jump to DODOES.
0011FEr 3  60                           rts
0011FFr 3               
0011FFr 3               
0011FFr 3               
0011FFr 3               ; ## DOT ( u -- ) "Print TOS"
0011FFr 3               ; ## "."  auto  ANS core
0011FFr 3                       ; """https://forth-standard.org/standard/core/d"""
0011FFr 3               
0011FFr 3               xt_dot:
0011FFr 3  20 rr rr                     jsr underflow_1
001202r 3               
001202r 3  20 rr rr                     jsr xt_dup                      ; ( n n )
001205r 3  20 rr rr                     jsr xt_abs                      ; ( n u )
001208r 3  20 rr rr                     jsr xt_zero                     ; ( n u 0 )
00120Br 3  20 rr rr                     jsr xt_less_number_sign         ; ( n u 0 )
00120Er 3  20 rr rr                     jsr xt_number_sign_s            ; ( n ud )
001211r 3  20 rr rr                     jsr xt_rot                      ; ( ud n )
001214r 3  20 rr rr                     jsr xt_sign                     ; ( ud )
001217r 3  20 rr rr                     jsr xt_number_sign_greater      ; ( addr u )
00121Ar 3  20 rr rr                     jsr xt_type
00121Dr 3  20 rr rr                     jsr xt_space
001220r 3               
001220r 3  60           z_dot:          rts
001221r 3               
001221r 3               
001221r 3               
001221r 3               ; ## DOT_PAREN ( -- ) "Print input up to close paren .( comment )"
001221r 3               ; ## ".("  auto  ANS core
001221r 3                       ; """http://forth-standard.org/standard/core/Dotp"""
001221r 3               
001221r 3               xt_dot_paren:
001221r 3                               ; Put a right paren on the stack.
001221r 3  CA                           dex
001222r 3  CA                           dex
001223r 3  A9 29                        lda #41     ; Right parenthesis
001225r 3  95 00                        sta 0,x
001227r 3  74 01                        stz 1,x
001229r 3               
001229r 3  20 rr rr                     jsr xt_parse
00122Cr 3  20 rr rr                     jsr xt_type
00122Fr 3               
00122Fr 3  60           z_dot_paren:    rts
001230r 3               
001230r 3               
001230r 3               
001230r 3               ; ## DOT_QUOTE ( "string" -- ) "Print string from compiled word"
001230r 3               ; ## ".""  auto  ANS core ext
001230r 3                       ; """https://forth-standard.org/standard/core/Dotq
001230r 3                       ; Compile string that is printed during run time. ANS Forth wants
001230r 3                       ; this to be compile-only, even though everybody and their friend
001230r 3                       ; uses it for everything. We follow the book here, and recommend
001230r 3                       ; `.(` for general printing.
001230r 3                       ; """
001230r 3               
001230r 3               xt_dot_quote:
001230r 3                               ; we let S" do the heavy lifting. Since we're in
001230r 3                               ; compile mode, it will save the string and reproduce it
001230r 3                               ; during runtime
001230r 3  20 rr rr                     jsr xt_s_quote
001233r 3               
001233r 3                               ; We then let TYPE do the actual printing
001233r 3  A0 rr                        ldy #>xt_type
001235r 3  A9 rr                        lda #<xt_type
001237r 3  20 rr rr                     jsr cmpl_subroutine
00123Ar 3               
00123Ar 3  60           z_dot_quote:    rts
00123Br 3               
00123Br 3               
00123Br 3               
00123Br 3               ; ## DOT_R ( n u -- ) "Print NOS as unsigned number with TOS with"
00123Br 3               ; ## ".r"  tested  ANS core ext
00123Br 3                       ; """https://forth-standard.org/standard/core/DotR
00123Br 3                       ;
00123Br 3                       ; Based on the Forth code
00123Br 3                       ;  : .R  >R DUP ABS 0 <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
00123Br 3                       ; """
00123Br 3               
00123Br 3               xt_dot_r:
00123Br 3  20 rr rr                     jsr underflow_2
00123Er 3               
00123Er 3  20 rr rr                     jsr xt_to_r
001241r 3  20 rr rr                     jsr xt_dup
001244r 3  20 rr rr                     jsr xt_abs
001247r 3  20 rr rr                     jsr xt_zero
00124Ar 3  20 rr rr                     jsr xt_less_number_sign
00124Dr 3  20 rr rr                     jsr xt_number_sign_s
001250r 3  20 rr rr                     jsr xt_rot
001253r 3  20 rr rr                     jsr xt_sign
001256r 3  20 rr rr                     jsr xt_number_sign_greater
001259r 3  20 rr rr                     jsr xt_r_from
00125Cr 3  20 rr rr                     jsr xt_over
00125Fr 3  20 rr rr                     jsr xt_minus
001262r 3  20 rr rr                     jsr xt_spaces
001265r 3  20 rr rr                     jsr xt_type
001268r 3               
001268r 3  60           z_dot_r:        rts
001269r 3               
001269r 3               
001269r 3               
001269r 3               ; ## DOT_S ( -- ) "Print content of Data Stack"
001269r 3               ; ## ".s"  tested  ANS tools
001269r 3                       ; """https://forth-standard.org/standard/tools/DotS
001269r 3                       ; Print content of Data Stack non-distructively. We follow the format
001269r 3                       ; of Gforth and print the number of elements first in brackets,
001269r 3                       ; followed by the Data Stack content (if any).
001269r 3                       ;
001269r 3                       ; Since this is for humans, we don't have to worry about speed.
001269r 3                       ; """
001269r 3               
001269r 3               xt_dot_s:
001269r 3  20 rr rr                     jsr xt_depth    ; ( -- u )
00126Cr 3               
00126Cr 3                               ; Print stack depth in brackets
00126Cr 3  A9 3C                        lda #$3c        ; ASCII for "<"
00126Er 3  20 rr rr                     jsr emit_a
001271r 3               
001271r 3                               ; We keep a copy of the number of the things on the stack
001271r 3                               ; to use as a counter later down. This assumes that there
001271r 3                               ; are less than 255 elements on the stack
001271r 3  B5 00                        lda 0,x
001273r 3  48                           pha
001274r 3               
001274r 3                               ; print unsigned number without the trailing space
001274r 3  CA                           dex             ; DUP
001275r 3  CA                           dex
001276r 3  95 00                        sta 0,x
001278r 3  74 01                        stz 1,x
00127Ar 3               
00127Ar 3  20 rr rr                     jsr print_u
00127Dr 3               
00127Dr 3  A9 3E                        lda #$3e        ; ASCII for ">"
00127Fr 3  20 rr rr                     jsr emit_a
001282r 3  A9 20                        lda #AscSP      ; ASCII for SPACE
001284r 3  20 rr rr                     jsr emit_a
001287r 3               
001287r 3  E8                           inx
001288r 3  E8                           inx
001289r 3               
001289r 3                               ; There will be lots of cases where the stack is empty. If that
001289r 3                               ; is so, get out of here quickly
001289r 3  E0 FF                        cpx #dsp0
00128Br 3  F0 1E                        beq @done
00128Dr 3               
00128Dr 3               @have_stack:
00128Dr 3                               ; We have at least one element on the stack. The depth of the
00128Dr 3                               ; stack is on the stack, we can use it as a counter. We go
00128Dr 3                               ; from bottom to top
00128Dr 3  7A                           ply
00128Er 3               
00128Er 3  A9 FE                        lda #dsp0-1     ; go up one to avoid garbage
001290r 3  85 rr                        sta tmp3
001292r 3  64 rr                        stz tmp3+1      ; must be zero page on the 65c02
001294r 3               @loop:
001294r 3  CA                           dex
001295r 3  CA                           dex
001296r 3               
001296r 3  B2 rr                        lda (tmp3)
001298r 3  95 01                        sta 1,x
00129Ar 3  C6 rr                        dec tmp3
00129Cr 3               
00129Cr 3  B2 rr                        lda (tmp3)
00129Er 3  95 00                        sta 0,x
0012A0r 3  C6 rr                        dec tmp3
0012A2r 3  5A                           phy
0012A3r 3               
0012A3r 3  20 rr rr                     jsr xt_dot
0012A6r 3               
0012A6r 3  7A                           ply
0012A7r 3  88                           dey
0012A8r 3  D0 EA                        bne @loop
0012AAr 3               
0012AAr 3  48                           pha             ; dummy to balance stack
0012ABr 3               @done:
0012ABr 3  68                           pla
0012ACr 3  60           z_dot_s:        rts
0012ADr 3               
0012ADr 3               
0012ADr 3               
0012ADr 3               ; ## D_DOT ( d -- ) "Print double"
0012ADr 3               ; ## "d."  tested  ANS double
0012ADr 3                       ; """http://forth-standard.org/standard/double/Dd"""
0012ADr 3                       ;
0012ADr 3                       ; From the Forth code:
0012ADr 3                       ; : D. TUCK DABS <# #S ROT SIGN #> TYPE SPACE ;
0012ADr 3                       ; """
0012ADr 3               
0012ADr 3               xt_d_dot:
0012ADr 3  20 rr rr                     jsr underflow_2
0012B0r 3               
0012B0r 3  20 rr rr                     jsr xt_tuck
0012B3r 3  20 rr rr                     jsr xt_dabs
0012B6r 3  20 rr rr                     jsr xt_less_number_sign
0012B9r 3  20 rr rr                     jsr xt_number_sign_s
0012BCr 3  20 rr rr                     jsr xt_rot
0012BFr 3  20 rr rr                     jsr xt_sign
0012C2r 3  20 rr rr                     jsr xt_number_sign_greater
0012C5r 3  20 rr rr                     jsr xt_type
0012C8r 3  20 rr rr                     jsr xt_space
0012CBr 3               
0012CBr 3  60           z_d_dot:        rts
0012CCr 3               
0012CCr 3               
0012CCr 3               
0012CCr 3               ; ## D_DOT_R ( d u -- ) "Print double right-justified u wide"
0012CCr 3               ; ## "d.r"  tested  ANS double
0012CCr 3                       ; """http://forth-standard.org/standard/double/DDotR"""
0012CCr 3                       ; Based on the Forth code
0012CCr 3                       ;  : D.R >R TUCK DABS <# #S ROT SIGN #> R> OVER - SPACES TYPE ;
0012CCr 3                       ; """
0012CCr 3               
0012CCr 3               xt_d_dot_r:
0012CCr 3  20 rr rr                     jsr underflow_3
0012CFr 3                               ; From the forth code:
0012CFr 3  20 rr rr                     jsr xt_to_r
0012D2r 3  20 rr rr                     jsr xt_tuck
0012D5r 3  20 rr rr                     jsr xt_dabs
0012D8r 3  20 rr rr                     jsr xt_less_number_sign
0012DBr 3  20 rr rr                     jsr xt_number_sign_s
0012DEr 3  20 rr rr                     jsr xt_rot
0012E1r 3  20 rr rr                     jsr xt_sign
0012E4r 3  20 rr rr                     jsr xt_number_sign_greater
0012E7r 3  20 rr rr                     jsr xt_r_from
0012EAr 3  20 rr rr                     jsr xt_over
0012EDr 3  20 rr rr                     jsr xt_minus
0012F0r 3  20 rr rr                     jsr xt_spaces
0012F3r 3  20 rr rr                     jsr xt_type
0012F6r 3               
0012F6r 3  60           z_d_dot_r:      rts
0012F7r 3               
0012F7r 3               
0012F7r 3               
0012F7r 3               ; ## DROP ( u -- ) "Pop top entry on Data Stack"
0012F7r 3               ; ## "drop"  auto  ANS core
0012F7r 3                       ; """https://forth-standard.org/standard/core/DROP"""
0012F7r 3               xt_drop:
0012F7r 3  20 rr rr                     jsr underflow_1
0012FAr 3               
0012FAr 3  E8                           inx
0012FBr 3  E8                           inx
0012FCr 3               
0012FCr 3  60           z_drop:         rts
0012FDr 3               
0012FDr 3               
0012FDr 3               ; ## DUMP ( addr u -- ) "Display a memory region"
0012FDr 3               ; ## "dump"  tested  ANS tools
0012FDr 3                       ; """https://forth-standard.org/standard/tools/DUMP
0012FDr 3                       ;
0012FDr 3                       ; DUMP's exact output is defined as "implementation dependent".
0012FDr 3                       ; This is in assembler because it is
0012FDr 3                       ; useful for testing and development, so we want to have it work
0012FDr 3                       ; as soon as possible. Uses TMP2
0012FDr 3                       ; """
0012FDr 3               
0012FDr 3               xt_dump:
0012FDr 3  20 rr rr                     jsr underflow_2
001300r 3               @row:
001300r 3                               ; start counter for 16 numbers per row
001300r 3  A0 10                        ldy #16
001302r 3               
001302r 3                               ; We use TMP2 as the index for the ASCII characters
001302r 3                               ; that we print at the and of the hex block. We
001302r 3                               ; start saving them at HERE (CP)
001302r 3  64 rr                        stz tmp2
001304r 3               
001304r 3  20 rr rr                     jsr xt_cr
001307r 3               
001307r 3                               ; print address number
001307r 3  B5 03                        lda 3,x
001309r 3  20 rr rr                     jsr byte_to_ascii
00130Cr 3  B5 02                        lda 2,x
00130Er 3  20 rr rr                     jsr byte_to_ascii
001311r 3               
001311r 3  20 rr rr                     jsr xt_space
001314r 3  20 rr rr                     jsr xt_space
001317r 3               @loop:
001317r 3                               ; if there are zero bytes left to display, we're done
001317r 3  B5 00                        lda 0,x
001319r 3  15 01                        ora 1,x
00131Br 3  F0 39                        beq @all_printed
00131Dr 3               
00131Dr 3                               ; dump the contents
00131Dr 3  A1 02                        lda (2,x)
00131Fr 3  48                           pha                     ; byte_to_ascii destroys A
001320r 3  20 rr rr                     jsr byte_to_ascii
001323r 3  20 rr rr                     jsr xt_space
001326r 3  68                           pla
001327r 3               
001327r 3                               ; Handle ASCII printing
001327r 3  20 rr rr                     jsr is_printable
00132Ar 3  B0 02                        bcs @printable
00132Cr 3  A9 2E                        lda #'.'                 ; Print dot if not printable
00132Er 3               @printable:
00132Er 3  5A                           phy                     ; save counter
00132Fr 3  A4 rr                        ldy tmp2
001331r 3  91 rr                        sta (cp),y
001333r 3  E6 rr                        inc tmp2
001335r 3  7A                           ply
001336r 3               
001336r 3                               ; extra space after eight bytes
001336r 3  C0 09                        cpy #9
001338r 3  D0 03                        bne @next_char
00133Ar 3  20 rr rr                     jsr xt_space
00133Dr 3               
00133Dr 3               @next_char:
00133Dr 3  F6 02                        inc 2,x
00133Fr 3  D0 02                        bne @counter
001341r 3  F6 03                        inc 3,x
001343r 3               
001343r 3               @counter:
001343r 3                               ; loop counter
001343r 3  B5 00                        lda 0,x
001345r 3  D0 02                        bne @1
001347r 3  D6 01                        dec 1,x
001349r 3               @1:
001349r 3  D6 00                        dec 0,x
00134Br 3  88                           dey
00134Cr 3  D0 C9                        bne @loop               ; next byte
00134Er 3               
00134Er 3                               ; Done with one line, print the ASCII version of these
00134Er 3                               ; characters
00134Er 3  20 rr rr                     jsr xt_space
001351r 3  20 rr rr                     jsr print_ascii
001354r 3               
001354r 3  80 AA                        bra @row                ; new row
001356r 3               
001356r 3               @all_printed:
001356r 3                               ; See if there are any ASCII characters in the buffer
001356r 3                               ; left to print
001356r 3  A5 rr                        lda tmp2
001358r 3  F0 06                        beq @done
00135Ar 3               
00135Ar 3                               ; In theory, we could try to make the ASCII part line
00135Ar 3                               ; up with the line before it. But that is a hassle (we
00135Ar 3                               ; use three bytes for each missed hex entry, and
00135Ar 3                               ; then there is the gap after eight entries) and it
00135Ar 3                               ; makes it harder to read. We settle for one extra
00135Ar 3                               ; space instead for the moment
00135Ar 3  20 rr rr                     jsr xt_space
00135Dr 3  20 rr rr                     jsr print_ascii
001360r 3               @done:
001360r 3  20 rr rr                     jsr xt_two_drop         ; one byte less than 4x INX
001363r 3  60           z_dump:         rts
001364r 3               
001364r 3               
001364r 3               print_ascii:
001364r 3                               ; Print the ASCII characters that we have saved from
001364r 3                               ; HERE (CP) to HERE plus whatever is in TMP2. This routine
001364r 3                               ; is not compiled (DUMP is probably never compiled anyway)
001364r 3                               ; but we keep it inside the scope of DUMP.
001364r 3  A0 00                        ldy #0
001366r 3               @ascii_loop:
001366r 3  B1 rr                        lda (cp),y
001368r 3  20 rr rr                     jsr emit_a
00136Br 3  C8                           iny
00136Cr 3               
00136Cr 3                               ; extra space after eight chars
00136Cr 3  C0 08                        cpy #8
00136Er 3  D0 03                        bne @1
001370r 3  20 rr rr                     jsr xt_space
001373r 3               @1:
001373r 3  C6 rr                        dec tmp2
001375r 3  D0 EF                        bne @ascii_loop
001377r 3               
001377r 3  60                           rts
001378r 3               
001378r 3               
001378r 3               
001378r 3               ; ## DUP ( u -- u u ) "Duplicate TOS"
001378r 3               ; ## "dup"  auto  ANS core
001378r 3                       ; """https://forth-standard.org/standard/core/DUP"""
001378r 3               xt_dup:
001378r 3  20 rr rr                     jsr underflow_1
00137Br 3               
00137Br 3  CA                           dex
00137Cr 3  CA                           dex
00137Dr 3               
00137Dr 3  B5 02                        lda 2,x         ; LSB
00137Fr 3  95 00                        sta 0,x
001381r 3  B5 03                        lda 3,x         ; MSB
001383r 3  95 01                        sta 1,x
001385r 3               
001385r 3  60           z_dup:          rts
001386r 3               
001386r 3               
001386r 3               ; ## ED ( -- u ) "Line-based editor"
001386r 3               ; ## "ed"  fragment  Tali Forth
001386r 3                       ; """Start the line-based editor ed6502. See separate file
001386r 3                       ; ed.asm or the manual for details.
001386r 3                       ; """
001386r 3               xt_ed:
001386r 3                           .ifdef ed6502
001386r 3                               jsr ed6502      ; kept in separate file
001386r 3                           .endif
001386r 3               
001386r 3  60           z_ed:           rts
001387r 3               
001387r 3               
001387r 3               ; ## EDITOR_WORDLIST ( -- u ) "WID for the Editor wordlist"
001387r 3               ; ## "editor-wordlist"  tested  Tali Editor
001387r 3                       ; """ Commonly used like `editor-wordlist >order` to add the editor
001387r 3                       ; words to the search order so they can be used.  This will need
001387r 3                       ; to be done before any of the words marked "Tali Editor" can be
001387r 3                       ; used.  See the tutorial on Wordlists and the Search Order for
001387r 3                       ; more information.
001387r 3               
001387r 3                       ;
001387r 3                       ; This is a dummy entry, the code is shared with ONE
001387r 3                       ; """
001387r 3               
001387r 3               
001387r 3               ; ## ELSE (C: orig -- orig) ( -- ) "Conditional flow control"
001387r 3               ; ## "else"  auto  ANS core
001387r 3                       ; """http://forth-standard.org/standard/core/ELSE
001387r 3                       ;
001387r 3                       ; The code is shared with ENDOF
001387r 3                       ; """
001387r 3               
001387r 3               xt_else:
001387r 3               xt_endof:
001387r 3                               ; Put an unconditional branch.
001387r 3  A0 rr                        ldy #>branch_runtime
001389r 3  A9 rr                        lda #<branch_runtime
00138Br 3  20 rr rr                     jsr cmpl_subroutine
00138Er 3               
00138Er 3                               ; Put the address of the branch address on the stack.
00138Er 3  20 rr rr                     jsr xt_here
001391r 3               
001391r 3                               ; Use zero for the branch address for now.
001391r 3                               ; THEN will fill it in later.
001391r 3  20 rr rr                     jsr xt_zero
001394r 3  20 rr rr                     jsr xt_comma
001397r 3               
001397r 3                               ; Get the address to jump to (just after the
001397r 3                               ; unconditional branch) for the IF to jump to
001397r 3                               ; when false.
001397r 3  20 rr rr                     jsr xt_here
00139Ar 3  20 rr rr                     jsr xt_rot
00139Dr 3               
00139Dr 3                               ; Update the original if 0branch address.
00139Dr 3  20 rr rr                     jsr xt_store
0013A0r 3               z_else:
0013A0r 3               z_endof:
0013A0r 3  60                           rts
0013A1r 3               
0013A1r 3               
0013A1r 3               
0013A1r 3               branch_runtime:
0013A1r 3                       ; """Runtime component for a branch. Used by ELSE and ENDOF. This was
0013A1r 3                       ; formally part of a separate word BRANCH which was later removed.
0013A1r 3                       ; """
0013A1r 3               
0013A1r 3                               ; The address on the Return Stack points to the last byte
0013A1r 3                               ; of the JSR address, one byte below the branch literal
0013A1r 3  68                           pla
0013A2r 3  85 rr                        sta tmpbranch
0013A4r 3  68                           pla
0013A5r 3  85 rr                        sta tmpbranch+1
0013A7r 3               
0013A7r 3                               ; Keep in mind: the address we just popped points one byte
0013A7r 3                               ; lower than the branch literal we want to grab
0013A7r 3  A0 01                        ldy #1
0013A9r 3  B1 rr                        lda (tmpbranch),y  ; LSB
0013ABr 3  85 rr                        sta tmp1
0013ADr 3  C8                           iny
0013AEr 3  B1 rr                        lda (tmpbranch),y  ; MSB
0013B0r 3  85 rr                        sta tmp1+1
0013B2r 3               
0013B2r 3  6C rr rr                     jmp (tmp1)
0013B5r 3               
0013B5r 3               
0013B5r 3               
0013B5r 3               ; ## EMIT ( char -- ) "Print character to current output"
0013B5r 3               ; ## "emit"  auto  ANS core
0013B5r 3                       ; """https://forth-standard.org/standard/core/EMIT
0013B5r 3                       ; Run-time default for EMIT. The user can revector this by changing
0013B5r 3                       ; the value of the OUTPUT variable. We ignore the MSB completely, and
0013B5r 3                       ; do not check to see if we have been given a valid ASCII character.
0013B5r 3                       ; Don't make this native compile.
0013B5r 3                       ; """
0013B5r 3               
0013B5r 3               xt_emit:
0013B5r 3  20 rr rr                     jsr underflow_1
0013B8r 3               
0013B8r 3  B5 00                        lda 0,x
0013BAr 3  E8                           inx
0013BBr 3  E8                           inx
0013BCr 3               
0013BCr 3               emit_a:
0013BCr 3                       ; We frequently want to print the character in A without fooling
0013BCr 3                       ; around with the Data Stack. This is emit_a's job, which still
0013BCr 3                       ; allows the output to be vectored. Call it with JSR as you
0013BCr 3                       ; would XT_EMIT
0013BCr 3  6C rr rr                     jmp (output)            ; JSR/RTS
0013BFr 3               
0013BFr 3               z_emit:         ; never reached
0013BFr 3               
0013BFr 3               
0013BFr 3               
0013BFr 3               ; ## EMPTY_BUFFERS ( -- ) "Empty all buffers without saving"
0013BFr 3               ; ## "empty-buffers"  tested  ANS block ext
0013BFr 3                       ; """https://forth-standard.org/standard/block/EMPTY-BUFFERS"""
0013BFr 3               xt_empty_buffers:
0013BFr 3                               ; Set the buffer status to empty.
0013BFr 3  A0 2C                        ldy #buffstatus_offset
0013C1r 3  A9 00                        lda #0
0013C3r 3  91 rr                        sta (up),y      ; Only LSB is used.
0013C5r 3               z_empty_buffers:
0013C5r 3  60                           rts
0013C6r 3               
0013C6r 3               
0013C6r 3               ; ## ENDCASE (C: case-sys -- ) ( x -- ) "Conditional flow control"
0013C6r 3               ; ## "endcase"  auto  ANS core ext
0013C6r 3                       ; """http://forth-standard.org/standard/core/ENDCASE"""
0013C6r 3               
0013C6r 3               xt_endcase:
0013C6r 3                               ; Postpone DROP to remove the item
0013C6r 3                               ; being checked.
0013C6r 3  A0 rr                        ldy #>xt_drop
0013C8r 3  A9 rr                        lda #<xt_drop
0013CAr 3  20 rr rr                     jsr cmpl_subroutine
0013CDr 3               
0013CDr 3                               ; There are a number of address (of branches that need their
0013CDr 3                               ; jump addressed filled in with the address of right here).
0013CDr 3                               ; Keep calling THEN to deal with them until we reach the
0013CDr 3                               ; 0 that CASE put on the stack at the beginning.
0013CDr 3               @endcase_loop:
0013CDr 3                               ; Check for 0 on the stack.
0013CDr 3  B5 00                        lda 0,x
0013CFr 3  15 01                        ora 1,x
0013D1r 3  F0 05                        beq @done
0013D3r 3               
0013D3r 3  20 rr rr                     jsr xt_then
0013D6r 3  80 F5                        bra @endcase_loop
0013D8r 3               @done:
0013D8r 3                               ; Remove the 0 from the stack.
0013D8r 3  E8                           inx
0013D9r 3  E8                           inx
0013DAr 3  60           z_endcase:      rts
0013DBr 3               
0013DBr 3               
0013DBr 3               
0013DBr 3               ; ## ENDOF (C: case-sys1 of-sys1-- case-sys2) ( -- ) "Conditional flow control"
0013DBr 3               ; ## "endof"  auto  ANS core ext
0013DBr 3                       ; """http://forth-standard.org/standard/core/ENDOF
0013DBr 3                       ; This is a dummy entry, the code is shared with ELSE
0013DBr 3                       ; """
0013DBr 3               
0013DBr 3               
0013DBr 3               ; ## ENVIRONMENT_Q  ( addr u -- 0 | i*x true )  "Return system information"
0013DBr 3               ; ## "environment?"  auto  ANS core
0013DBr 3                       ; """https://forth-standard.org/standard/core/ENVIRONMENTq
0013DBr 3                       ;
0013DBr 3                       ; By ANS definition, we use upper-case strings here, see the
0013DBr 3                       ; string file for details. This can be realized as a high-level
0013DBr 3                       ; Forth word as
0013DBr 3                       ;
0013DBr 3                       ; : STRING_OF POSTPONE 2OVER POSTPONE COMPARE POSTPONE 0=
0013DBr 3                       ;    POSTPONE IF POSTPONE 2DROP ; IMMEDIATE COMPILE-ONLY
0013DBr 3                       ; HEX
0013DBr 3                       ; : ENVIRONMENT? ( C-ADDR U -- FALSE | I*X TRUE )
0013DBr 3                       ; CASE
0013DBr 3                       ; S" /COUNTED-STRING"    STRING_OF  7FFF TRUE ENDOF
0013DBr 3                       ; S" /HOLD"              STRING_OF    FF TRUE ENDOF
0013DBr 3                       ; S" /PAD"               STRING_OF    54 TRUE ENDOF ( 84 DECIMAL )
0013DBr 3                       ; S" ADDRESS-UNIT-BITS"  STRING_OF     8 TRUE ENDOF
0013DBr 3                       ; S" FLOORED"            STRING_OF FALSE TRUE ENDOF ( WE HAVE SYMMETRIC )
0013DBr 3                       ; S" MAX-CHAR"           STRING_OF   255 TRUE ENDOF
0013DBr 3                       ; S" MAX-D"              STRING_OF
0013DBr 3                                                    ; 7FFFFFFF. TRUE ENDOF
0013DBr 3                       ; S" MAX-N"              STRING_OF  7FFF TRUE ENDOF
0013DBr 3                       ; S" MAX-U"              STRING_OF  FFFF TRUE ENDOF
0013DBr 3                       ; S" MAX-UD"             STRING_OF
0013DBr 3                                                    ; FFFFFFFF. TRUE ENDOF
0013DBr 3                       ; S" RETURN-STACK-CELLS" STRING_OF    80 TRUE ENDOF
0013DBr 3                       ; S" STACK-CELLS"        STRING_OF    20 TRUE ENDOF ( FROM DEFINITIONS.ASM )
0013DBr 3                       ; ( DEFAULT ) 2DROP FALSE FALSE ( ONE FALSE WILL DROPPED BY ENDCASE )
0013DBr 3                       ; ENDCASE ;
0013DBr 3                       ;
0013DBr 3                       ; but that uses lots of memory and increases the start up time. This
0013DBr 3                       ; word is rarely used so we can try to keep it short at the expense
0013DBr 3                       ; of speed.
0013DBr 3                       ; """
0013DBr 3               
0013DBr 3               xt_environment_q:
0013DBr 3  20 rr rr                     jsr underflow_1
0013DEr 3               
0013DEr 3                               ; This code is table-driven: We walk through the list of
0013DEr 3                               ; strings until we find one that matches, and then we take
0013DEr 3                               ; the equivalent data from the results table. This is made
0013DEr 3                               ; a bit harder by the fact that some of these return a
0013DEr 3                               ; double-cell number and some a single-cell one.
0013DEr 3               
0013DEr 3                               ; We will walk through the table with variables that return
0013DEr 3                               ; a single-cell result
0013DEr 3  A0 00                        ldy #00                 ; counter for table
0013E0r 3               
0013E0r 3                               ; We use a flag on the the stack to signal if we have a single-cell
0013E0r 3                               ; or double-cell number. We use 0 to signal single-cell and 1 for
0013E0r 3                               ; double-cell.
0013E0r 3  5A                           phy
0013E1r 3               @table_loop:
0013E1r 3                               ; We arrived here with the address of the string to be checked
0013E1r 3                               ; on the stack. We make a copy. Index is in Y
0013E1r 3  20 rr rr                     jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
0013E4r 3               
0013E4r 3                               ; We do our work on the TOS to speed things up
0013E4r 3  CA                           dex
0013E5r 3  CA                           dex                     ; ( addr u addr u ? )
0013E6r 3               
0013E6r 3                               ; Get address of string to check from table
0013E6r 3  B9 rr rr                     lda env_table_single,y
0013E9r 3  95 00                        sta 0,x
0013EBr 3  C8                           iny
0013ECr 3  B9 rr rr                     lda env_table_single,y
0013EFr 3  95 01                        sta 1,x                 ; ( addr u addr u addr-t )
0013F1r 3  C8                           iny
0013F2r 3               
0013F2r 3                               ; See if this is the last entry. The LSB is still in A
0013F2r 3  15 00                        ora 0,x
0013F4r 3  F0 4D                        beq @table_done
0013F6r 3               
0013F6r 3                               ; We have a string entry. The address there is stored in
0013F6r 3                               ; old-style address format, that is, the first byte is the
0013F6r 3                               ; length of the string
0013F6r 3  5A                           phy                     ; save Y, which is used by COUNT
0013F7r 3  20 rr rr                     jsr xt_count            ; ( addr u addr u addr-s u-s )
0013FAr 3  20 rr rr                     jsr xt_compare          ; ( addr u f )
0013FDr 3  7A                           ply
0013FEr 3               
0013FEr 3                               ; If we found a match (flag is zero -- COMPARE is weird
0013FEr 3                               ; that way), return the result
0013FEr 3  B5 00                        lda 0,x
001400r 3  15 01                        ora 1,x
001402r 3  F0 04                        beq @got_result
001404r 3               
001404r 3                               ; Flag is not zero, so not a perfect match, so try next
001404r 3                               ; word
001404r 3  E8                           inx                     ; DROP, now ( addr u )
001405r 3  E8                           inx
001406r 3               
001406r 3  80 D9                        bra @table_loop
001408r 3               
001408r 3               @got_result:
001408r 3                               ; We arrive here with ( addr u -1 ) and know that we've found
001408r 3                               ; a match. The index of the match+2 is in Y.
001408r 3  E8                           inx                     ; drop flag, now ( addr u )
001409r 3  E8                           inx
00140Ar 3  88                           dey                     ; go back to index we had
00140Br 3  88                           dey
00140Cr 3               
00140Cr 3                               ; See if this is a single-cell word.
00140Cr 3  68                           pla
00140Dr 3  D0 0D                        bne @double_result
00140Fr 3               
00140Fr 3                               ; Single-cell result
00140Fr 3  B9 rr rr                     lda env_results_single,y
001412r 3  95 02                        sta 2,x
001414r 3  C8                           iny
001415r 3  B9 rr rr                     lda env_results_single,y
001418r 3  95 03                        sta 3,x                 ; ( res u )
00141Ar 3               
00141Ar 3  80 1F                        bra @set_flag
00141Cr 3               
00141Cr 3               @double_result:
00141Cr 3                               ; This is a double-celled result, which means we have to
00141Cr 3                               ; fool around with the index some more. We also need a
00141Cr 3                               ; further cell on the stack
00141Cr 3  CA                           dex                     ; ( addr u ? )
00141Dr 3  CA                           dex
00141Er 3               
00141Er 3                               ; We have 11 single-cell words we check, plus the 0000 as
00141Er 3                               ; a marker for the end of the table, so we arrive here
00141Er 3                               ; with Y as 22 or more. To get the index for the double-
00141Er 3                               ; cell words, we move the result
00141Er 3  98                           tya
00141Fr 3  38                           sec
001420r 3  E9 18                        sbc #24
001422r 3               
001422r 3                               ; We have four bytes per entry in the table, but the index
001422r 3                               ; keeps increasing by two, so we only have to multiply by
001422r 3                               ; two (shift left once) to get the right result
001422r 3  0A                           asl
001423r 3  A8                           tay
001424r 3               
001424r 3  B9 rr rr                     lda env_results_double,y
001427r 3  95 02                        sta 2,x
001429r 3  C8                           iny
00142Ar 3  B9 rr rr                     lda env_results_double,y
00142Dr 3  95 03                        sta 3,x                 ; ( res u ? )
00142Fr 3  C8                           iny
001430r 3               
001430r 3  B9 rr rr                     lda env_results_double,y
001433r 3  95 04                        sta 4,x
001435r 3  C8                           iny
001436r 3  B9 rr rr                     lda env_results_double,y
001439r 3  95 05                        sta 5,x                 ; ( res res ? )
00143Br 3               
00143Br 3                               ; fall through to @set_flag
00143Br 3               @set_flag:
00143Br 3  A9 FF                        lda #$ff
00143Dr 3  95 00                        sta 0,x
00143Fr 3  95 01                        sta 1,x                 ; ( res f )
001441r 3               
001441r 3  80 14                        bra @done
001443r 3               @table_done:
001443r 3                               ; We're done with a table, because the entry was a zero.
001443r 3                               ; We arrive here with ( addr u addr u 0 )
001443r 3               
001443r 3                               ; We take the flag from stack and increase it by one. If the
001443r 3                               ; flag is zero, we have just completed the single-cell number
001443r 3                               ; strings, so we in increase the flag and try again. Otherwise,
001443r 3                               ; we're done with the double-cell table without having found
001443r 3                               ; a match, and we're done
001443r 3  68                           pla
001444r 3  D0 09                        bne @no_match
001446r 3               
001446r 3                               ; Flag is zero, increase it to one and start over to check
001446r 3                               ; double-cell values
001446r 3  1A                           inc
001447r 3  48                           pha
001448r 3               
001448r 3  8A                           txa
001449r 3  18                           clc
00144Ar 3  69 06                        adc #6                  ; skip six bytes
00144Cr 3  AA                           tax                     ; ( addr u )
00144Dr 3               
00144Dr 3  80 92                        bra @table_loop
00144Fr 3               @no_match:
00144Fr 3                               ; Bummer, not found. We arrive here with
00144Fr 3                               ; ( addr u addr u 0 ) and need to return just a zero
00144Fr 3  8A                           txa
001450r 3  18                           clc
001451r 3  69 0A                        adc #10
001453r 3  AA                           tax                     ; ( addr ) - not ( 0 ) !
001454r 3               
001454r 3  20 rr rr                     jsr xt_false
001457r 3               @done:
001457r 3               z_environment_q:
001457r 3  60                           rts
001458r 3               
001458r 3               
001458r 3               ; Tables for ENVIRONMENT?. We use two separate ones, one for the single-cell
001458r 3               ; results and one for the double-celled results. The zero cell at the
001458r 3               ; end of each table marks its, uh, end. The strings themselves are defined
001458r 3               ; in strings.asm. Note if we add more entries to the single-cell table, we
001458r 3               ; have to adapt the result code for double printout, where we subtract 22
001458r 3               ; (two bytes each single-cell string and two bytes for the end-of-table
001458r 3               ; marker 0000
001458r 3               env_table_single:
001458r 3  rr rr rr rr          .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
00145Cr 3  rr rr rr rr  
001460r 3  rr rr        
001462r 3  rr rr rr rr          .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
001466r 3  rr rr rr rr  
00146Ar 3  rr rr rr rr          .word envs_sc, envs_wl, 0000
00146Er 3  00 00        
001470r 3               
001470r 3               env_table_double:
001470r 3  rr rr rr rr          .word envs_max_d, envs_max_ud, 0000
001474r 3  00 00        
001476r 3               
001476r 3               env_results_single:
001476r 3  FF 7F                .word $7FFF     ; /COUNTED-STRING
001478r 3  FF 00                .word $00FF     ; /HOLD
00147Ar 3  54 00                .word $0054     ; /PAD (this is 84 decimal)
00147Cr 3  08 00                .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
00147Er 3  00 00                .word 0000      ; FLOORED ("FALSE", we have symmetric)
001480r 3  FF 00                .word $00FF     ; MAX-CHAR
001482r 3  FF 7F                .word $7FFF     ; MAX-N
001484r 3  FF FF                .word $FFFF     ; MAX-U
001486r 3  80 00                .word $0080     ; RETURN-STACK-CELLS
001488r 3  20 00                .word $0020     ; STACK-CELLS (from definitions.asm)
00148Ar 3  09 00                .word $0009     ; WORDLISTS
00148Cr 3               
00148Cr 3               env_results_double:
00148Cr 3  FF 7F FF FF          .word $7FFF, $FFFF      ; MAX-D
001490r 3  FF FF FF FF          .word $FFFF, $FFFF      ; MAX-UD
001494r 3               
001494r 3               
001494r 3               ; ## EQUAL ( n n -- f ) "See if TOS and NOS are equal"
001494r 3               ; ## "="  auto  ANS core
001494r 3                       ; """https://forth-standard.org/standard/core/Equal"""
001494r 3               
001494r 3               xt_equal:
001494r 3  20 rr rr                     jsr underflow_2
001497r 3               
001497r 3  B5 00                        lda 0,x                 ; LSB
001499r 3  D5 02                        cmp 2,x
00149Br 3  D0 0A                        bne @false
00149Dr 3               
00149Dr 3  B5 01                        lda 1,x                 ; MSB
00149Fr 3  D5 03                        cmp 3,x
0014A1r 3  D0 04                        bne @false
0014A3r 3               
0014A3r 3  A9 FF                        lda #$ff
0014A5r 3  80 02                        bra @done
0014A7r 3               
0014A7r 3  A9 00        @false:         lda #0                  ; drop thru to done
0014A9r 3               
0014A9r 3  95 02        @done:          sta 2,x
0014ABr 3  95 03                        sta 3,x
0014ADr 3               
0014ADr 3  E8                           inx
0014AEr 3  E8                           inx
0014AFr 3               
0014AFr 3  60           z_equal:        rts
0014B0r 3               
0014B0r 3               
0014B0r 3               
0014B0r 3               ; ## BLANK ( addr u -- ) "Fill memory region with spaces"
0014B0r 3               ; ## "blank"  auto  ANS string
0014B0r 3                       ; """https://forth-standard.org/standard/string/BLANK"""
0014B0r 3               xt_blank:
0014B0r 3                               ; We don't check for underflow here because
0014B0r 3                               ; we deal with that in FILL
0014B0r 3  CA                           dex
0014B1r 3  CA                           dex
0014B2r 3  A9 20                        lda #AscSP
0014B4r 3  95 00                        sta 0,x
0014B6r 3  74 01                        stz 1,x
0014B8r 3               
0014B8r 3  80 06                        bra xt_fill     ; skip over code for ERASE
0014BAr 3               
0014BAr 3               
0014BAr 3               ; ## ERASE ( addr u -- ) "Fill memory region with zeros"
0014BAr 3               ; ## "erase"  auto  ANS core ext
0014BAr 3                       ; """https://forth-standard.org/standard/core/ERASE
0014BAr 3                       ; Note that ERASE works with "address" units
0014BAr 3                       ; (bytes), not cells.
0014BAr 3                       ; """
0014BAr 3               
0014BAr 3               xt_erase:
0014BAr 3                               ; We don't check for underflow here because
0014BAr 3                               ; we deal with that in FILL
0014BAr 3  CA                           dex
0014BBr 3  CA                           dex
0014BCr 3  74 00                        stz 0,x
0014BEr 3  74 01                        stz 1,x
0014C0r 3               
0014C0r 3                               ; fall through to FILL
0014C0r 3               
0014C0r 3               ; ## FILL ( addr u char -- ) "Fill a memory region with a character"
0014C0r 3               ; ## "fill"  auto  ANS core
0014C0r 3                       ; """https://forth-standard.org/standard/core/FILL
0014C0r 3                       ; Fill u bytes of memory with char starting at addr. Note that
0014C0r 3                       ; this works on bytes, not on cells. On an 8-bit machine such as the
0014C0r 3                       ; 65c02, this is a serious pain in the rear. It is not defined what
0014C0r 3                       ; happens when we reach the end of the address space
0014C0r 3                       ; """
0014C0r 3               xt_fill:
0014C0r 3  20 rr rr                     jsr underflow_3
0014C3r 3               
0014C3r 3                               ; We use tmp1 to hold the address
0014C3r 3  B5 04                        lda 4,x         ; LSB
0014C5r 3  85 rr                        sta tmp1
0014C7r 3  B5 05                        lda 5,x
0014C9r 3  85 rr                        sta tmp1+1
0014CBr 3               
0014CBr 3                               ; We use tmp2 to hold the counter
0014CBr 3  B5 02                        lda 2,x
0014CDr 3  85 rr                        sta tmp2
0014CFr 3  B5 03                        lda 3,x
0014D1r 3  85 rr                        sta tmp2+1
0014D3r 3               
0014D3r 3                               ; We use Y to hold the character
0014D3r 3  B5 00                        lda 0,x
0014D5r 3  A8                           tay
0014D6r 3               @loop:
0014D6r 3                               ; Unfortunately, we also need to make sure that we don't
0014D6r 3                               ; write further than the end of the RAM. So RAM_END must
0014D6r 3                               ; be larger or equal to the current address
0014D6r 3  A9 80                        lda #>ram_end           ; MSB
0014D8r 3  C5 rr                        cmp tmp1+1
0014DAr 3  90 21                        bcc @done               ; RAM_END < TMP1, so leave
0014DCr 3  D0 06                        bne @check_counter      ; RAM_END is not smaller and not equal
0014DEr 3               
0014DEr 3  A9 00                        lda #<ram_end           ; LSB, because MSBs were equal
0014E0r 3  C5 rr                        cmp tmp1
0014E2r 3  90 19                        bcc @done               ; RAM_END < TMP1, so leave
0014E4r 3               
0014E4r 3               @check_counter:
0014E4r 3                               ; See if our counter has reached zero
0014E4r 3  A5 rr                        lda tmp2
0014E6r 3  05 rr                        ora tmp2+1
0014E8r 3  F0 13                        beq @done
0014EAr 3               
0014EAr 3                               ; We're not in ROM and we still have stuff on the counter, so
0014EAr 3                               ; let's actually do what we came here to do
0014EAr 3  98                           tya
0014EBr 3  92 rr                        sta (tmp1)
0014EDr 3               
0014EDr 3                               ; Adjust the counter
0014EDr 3  A5 rr                        lda tmp2
0014EFr 3  D0 02                        bne @1
0014F1r 3  C6 rr                        dec tmp2+1
0014F3r 3  C6 rr        @1:               dec tmp2
0014F5r 3               
0014F5r 3                               ; Next address
0014F5r 3  E6 rr                        inc tmp1
0014F7r 3  D0 DD                        bne @loop
0014F9r 3  E6 rr                        inc tmp1+1
0014FBr 3               
0014FBr 3  80 D9                        bra @loop
0014FDr 3               
0014FDr 3               @done:
0014FDr 3                               ; Drop three cells off the Data Stack. This uses one byte
0014FDr 3                               ; less than six times INX
0014FDr 3  8A                           txa
0014FEr 3  18                           clc
0014FFr 3  69 06                        adc #6
001501r 3  AA                           tax
001502r 3               z_blank:
001502r 3               z_erase:
001502r 3  60           z_fill:         rts
001503r 3               
001503r 3               
001503r 3               
001503r 3               ; ## EXECUTE ( xt -- ) "Jump to word based on execution token"
001503r 3               ; ## "execute"  auto  ANS core
001503r 3                       ; """https://forth-standard.org/standard/core/EXECUTE"""
001503r 3               xt_execute:
001503r 3  20 rr rr                     jsr underflow_1
001506r 3               
001506r 3  20 rr rr                     jsr doexecute   ; do not combine to JMP (native coding)
001509r 3               
001509r 3  60           z_execute:      rts
00150Ar 3               
00150Ar 3               doexecute:
00150Ar 3  B5 00                        lda 0,x
00150Cr 3  85 rr                        sta ip
00150Er 3  B5 01                        lda 1,x
001510r 3  85 rr                        sta ip+1
001512r 3               
001512r 3  E8                           inx
001513r 3  E8                           inx
001514r 3               
001514r 3                               ; we don't need a RTS here because we highjack the RTS of
001514r 3                               ; the word we're calling to get back to xt_execute
001514r 3  6C rr rr                     jmp (ip)
001517r 3               
001517r 3               ; end of doexecute
001517r 3               
001517r 3               
001517r 3               ; ## EXECUTE_PARSING ( addr u xt -- ) "Pass a string to a parsing word"
001517r 3               ; ## "execute-parsing"  auto  Gforth
001517r 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
001517r 3                       ; Execute the parsing word defined by the execution token (xt) on the
001517r 3                       ; string as if it were passed on the command line. See the file
001517r 3                       ; tests/tali.fs for examples.
001517r 3                       ;
001517r 3                       ; Note that this word is coded completely
001517r 3                       ; different in its Gforth version, see the file execute-parsing.fs
001517r 3                       ; (in /usr/share/gforth/0.7.3/compat/ on Ubuntu 18.04 LTS) for details.
001517r 3                       ; """
001517r 3               xt_execute_parsing:
001517r 3  20 rr rr                     jsr underflow_3
00151Ar 3               
00151Ar 3  20 rr rr                     jsr xt_input_to_r       ; save normal input for later
00151Dr 3  20 rr rr                     jsr xt_not_rote         ; -ROT ( xt addr u )
001520r 3               
001520r 3  B5 00                        lda 0,x                 ; TOS is new ciblen
001522r 3  85 rr                        sta ciblen
001524r 3  B5 01                        lda 1,x
001526r 3  85 rr                        sta ciblen+1
001528r 3               
001528r 3  B5 02                        lda 2,x                 ; NOS is new cib
00152Ar 3  85 rr                        sta cib
00152Cr 3  B5 03                        lda 3,x
00152Er 3  85 rr                        sta cib+1
001530r 3               
001530r 3  64 rr                        stz toin                ; Set >IN to zero
001532r 3  64 rr                        stz toin+1
001534r 3               
001534r 3  20 rr rr                     jsr xt_two_drop         ; 2DROP ( xt )
001537r 3  20 rr rr                     jsr xt_execute
00153Ar 3               
00153Ar 3  20 rr rr                     jsr xt_r_to_input
00153Dr 3               
00153Dr 3               z_execute_parsing:
00153Dr 3  60                           rts
00153Er 3               
00153Er 3               
00153Er 3               ; ## EXIT ( -- ) "Return control to the calling word immediately"
00153Er 3               ; ## "exit"  auto  ANS core
00153Er 3                       ; """https://forth-standard.org/standard/core/EXIT
00153Er 3                       ; If we're in a loop, we need to UNLOOP first and get everything
00153Er 3                       ; we we might have put on the Return Stack off as well. This should
00153Er 3                       ; be natively compiled.
00153Er 3                       ; """
00153Er 3               
00153Er 3               xt_exit:
00153Er 3  60                           rts             ; keep before z_exit
00153Fr 3               z_exit:                         ; never reached
00153Fr 3               
00153Fr 3               
00153Fr 3               
00153Fr 3               ; ## FALSE ( -- f ) "Push flag FALSE to Data Stack"
00153Fr 3               ; ## "false"  auto  ANS core ext
00153Fr 3                       ; """https://forth-standard.org/standard/core/FALSE"""
00153Fr 3               xt_false:
00153Fr 3  CA                           dex
001540r 3  CA                           dex
001541r 3  74 00                        stz 0,x
001543r 3  74 01                        stz 1,x
001545r 3               
001545r 3  60           z_false:        rts
001546r 3               
001546r 3               
001546r 3               ; ## FETCH ( addr -- n ) "Push cell content from memory to stack"
001546r 3               ; ## "@"  auto  ANS core
001546r 3                       ; """https://forth-standard.org/standard/core/Fetch"""
001546r 3               xt_fetch:
001546r 3  20 rr rr                     jsr underflow_1
001549r 3               
001549r 3  A1 00                        lda (0,x)               ; LSB
00154Br 3  A8                           tay
00154Cr 3  F6 00                        inc 0,x
00154Er 3  D0 02                        bne @1
001550r 3  F6 01                        inc 1,x
001552r 3               @1:
001552r 3  A1 00                        lda (0,x)               ; MSB
001554r 3  95 01                        sta 1,x
001556r 3  94 00                        sty 0,x
001558r 3               
001558r 3  60           z_fetch:        rts
001559r 3               
001559r 3               
001559r 3               ; ## FIND ( caddr -- addr 0 | xt 1 | xt -1 ) "Find word in Dictionary"
001559r 3               ; ## "find"  auto  ANS core
001559r 3                       ; """https://forth-standard.org/standard/core/FIND
001559r 3                       ; Included for backwards compatibility only, because it still
001559r 3                       ; can be found in so may examples. It should, however, be replaced
001559r 3                       ; by FIND-NAME. Counted string either returns address with a FALSE
001559r 3                       ; flag if not found in the Dictionary, or the xt with a flag to
001559r 3                       ; indicate if this is immediate or not. FIND is a wrapper around
001559r 3                       ; FIND-NAME, we get this all over with as quickly as possible. See
001559r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
001559r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001559r 3                       ; """
001559r 3               
001559r 3               xt_find:
001559r 3  20 rr rr                     jsr underflow_1
00155Cr 3               
00155Cr 3                               ; Save address in case conversion fails. We use the
00155Cr 3                               ; Return Stack instead of temporary variables like TMP1
00155Cr 3                               ; because this is shorter and anybody still using FIND
00155Cr 3                               ; can't be worried about speed anyway
00155Cr 3  B5 01                        lda 1,x                 ; MSB
00155Er 3  48                           pha
00155Fr 3  B5 00                        lda 0,x                 ; LSB
001561r 3  48                           pha
001562r 3               
001562r 3                               ; Convert ancient-type counted string address to
001562r 3                               ; modern format
001562r 3  20 rr rr                     jsr xt_count            ; ( caddr -- addr u )
001565r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt | 0 )
001568r 3               
001568r 3  B5 00                        lda 0,x
00156Ar 3  15 01                        ora 1,x
00156Cr 3  D0 0B                        bne @found_word
00156Er 3               
00156Er 3                               ; No word found. Return address of the string and a false
00156Er 3                               ; flag
00156Er 3  20 rr rr                     jsr xt_false            ; ( 0 0 )
001571r 3               
001571r 3                               ; The address needs to be restored.
001571r 3  68                           pla                     ; LSB of address
001572r 3  95 02                        sta 2,x
001574r 3  68                           pla
001575r 3  95 03                        sta 3,x                 ; MSB of address
001577r 3               
001577r 3  80 27                        bra @done               ; ( addr 0 )
001579r 3               
001579r 3               @found_word:
001579r 3                               ; We don't need the address after all, dump it
001579r 3  68                           pla
00157Ar 3  68                           pla
00157Br 3               
00157Br 3                               ; We arrive here with ( nt ) on the TOS. Now we have to
00157Br 3                               ; convert the return values to FIND's format
00157Br 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
00157Er 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
001581r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
001584r 3               
001584r 3  A0 00                        ldy #0                  ; Prepare flag
001586r 3               
001586r 3                               ; The flags are in the second byte of the header
001586r 3  F6 00                        inc 0,x
001588r 3  D0 02                        bne @1
00158Ar 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
00158Cr 3               @1:
00158Cr 3  A1 00                        lda (0,x)               ; ( xt char )
00158Er 3  29 04                        and #IM
001590r 3  D0 08                        bne @immediate          ; bit set, we're immediate
001592r 3               
001592r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
001594r 3  95 00                        sta 0,x
001596r 3  95 01                        sta 1,x
001598r 3  80 06                        bra @done
00159Ar 3               
00159Ar 3               @immediate:
00159Ar 3  A9 01                        lda #1                  ; We're immediate, return 1
00159Cr 3  95 00                        sta 0,x
00159Er 3  74 01                        stz 1,x
0015A0r 3               @done:
0015A0r 3  60           z_find:         rts
0015A1r 3               
0015A1r 3               
0015A1r 3               
0015A1r 3               ; ## FIND_NAME ( addr u -- nt|0 ) "Get the name token of input word"
0015A1r 3               ; ## "find-name"  auto  Gforth
0015A1r 3               
0015A1r 3               xt_find_name:
0015A1r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0015A1r 3                       ; Given a string, find the Name Token (nt) of a word or return
0015A1r 3                       ; zero if the word is not in the dictionary. We use this instead of
0015A1r 3                       ; ancient FIND to look up words in the Dictionary passed by
0015A1r 3                       ; PARSE-NAME. Note this returns the nt, not the xt of a word like
0015A1r 3                       ; FIND. To convert, use NAME>INT. This is a Gforth word. See
0015A1r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
0015A1r 3                       ; FIND calls this word
0015A1r 3                       ; """
0015A1r 3  20 rr rr                     jsr underflow_2
0015A4r 3               
0015A4r 3                               ; check for special case of an empty string (length zero)
0015A4r 3  B5 00                        lda 0,x
0015A6r 3  15 01                        ora 1,x
0015A8r 3  D0 03                        bne @nonempty
0015AAr 3               
0015AAr 3  4C rr rr                     jmp @fail_done
0015ADr 3               
0015ADr 3               @nonempty:
0015ADr 3                               ; Set up for traversing the wordlist search order.
0015ADr 3  64 rr                        stz tmp3                ; Start at the beginning
0015AFr 3               
0015AFr 3               @wordlist_loop:
0015AFr 3  A0 1E                        ldy #num_order_offset   ; Compare to byte variable #ORDER
0015B1r 3  A5 rr                        lda tmp3
0015B3r 3  D1 rr                        cmp (up),y              ; Check to see if we are done
0015B5r 3  D0 03                        bne @have_string
0015B7r 3               
0015B7r 3                               ; We ran out of wordlists to search.
0015B7r 3  4C rr rr                     jmp @fail_done
0015BAr 3               
0015BAr 3               @have_string:
0015BAr 3                               ; set up first loop iteration
0015BAr 3               
0015BAr 3                               ; Get the current wordlist id
0015BAr 3  18                           clc             ; SEARCH-ORDER is array of bytes.
0015BBr 3  69 1F                        adc #search_order_offset
0015BDr 3  A8                           tay
0015BEr 3  B1 rr                        lda (up),y      ; Get the id byte, which is the offset
0015C0r 3                                               ; into the cell array WORDLISTS
0015C0r 3               
0015C0r 3                               ; Get the DP for that wordlist.
0015C0r 3  0A                           asl                     ; Turn offset into cells offset.
0015C1r 3  18                           clc
0015C2r 3  69 06                        adc #wordlists_offset
0015C4r 3  A8                           tay
0015C5r 3  B1 rr                        lda (up),y
0015C7r 3  85 rr                        sta tmp1
0015C9r 3  C8                           iny
0015CAr 3  B1 rr                        lda (up),y
0015CCr 3  85 rr                        sta tmp1+1
0015CEr 3               
0015CEr 3  B5 02                        lda 2,x                 ; Address of mystery string
0015D0r 3  85 rr                        sta tmp2
0015D2r 3  B5 03                        lda 3,x
0015D4r 3  85 rr                        sta tmp2+1
0015D6r 3               
0015D6r 3               @loop:
0015D6r 3                               ; first quick test: Are strings the same length?
0015D6r 3  B2 rr                        lda (tmp1)
0015D8r 3  D5 00                        cmp 0,x
0015DAr 3  D0 54                        bne @next_entry
0015DCr 3               
0015DCr 3               @compare_string:
0015DCr 3                               ; are the same length, so we now have to compare each
0015DCr 3                               ; character
0015DCr 3               
0015DCr 3                               ; second quick test: Is the first character the same?
0015DCr 3  B2 rr                        lda (tmp2)      ; first character of mystery string
0015DEr 3               
0015DEr 3                               ; Lowercase the incoming charcter.
0015DEr 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
0015E0r 3  B0 07                        bcs @compare_first
0015E2r 3  C9 41                        cmp #$41        ; ASCII 'A'
0015E4r 3  90 03                        bcc @compare_first
0015E6r 3               
0015E6r 3                               ; An uppercase letter has been located.  Make it
0015E6r 3                               ; lowercase.
0015E6r 3  18                           clc
0015E7r 3  69 20                        adc #$20
0015E9r 3               
0015E9r 3               @compare_first:
0015E9r 3  A0 08                        ldy #8          ; Offset in nt to name
0015EBr 3  D1 rr                        cmp (tmp1),y    ; first character of current word
0015EDr 3  D0 41                        bne @next_entry
0015EFr 3               
0015EFr 3                               ; String length is the same and the first character is the
0015EFr 3                               ; same. If the length of the string is 1, we're already done
0015EFr 3  B5 00                        lda 0,x
0015F1r 3  3A                           dec
0015F2r 3  F0 2C                        beq @success
0015F4r 3               
0015F4r 3                               ; No such luck: The strings are the same length and the first
0015F4r 3                               ; char is the same, but the word is more than one char long.
0015F4r 3                               ; So we suck it up and compare every single character. We go
0015F4r 3                               ; from back to front, because words like CELLS and CELL+ would
0015F4r 3                               ; take longer otherwise. We can also shorten the loop by one
0015F4r 3                               ; because we've already compared the first char.
0015F4r 3               
0015F4r 3                               ; The string of the word we're testing against is 8 bytes down
0015F4r 3  A5 rr                        lda tmp1
0015F6r 3  48                           pha             ; Preserve tmp1 on the return stack.
0015F7r 3  18                           clc
0015F8r 3  69 08                        adc #8
0015FAr 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
0015FCr 3  A5 rr                        lda tmp1+1
0015FEr 3  48                           pha             ; Preserve tmp1+1 on the return stack.
0015FFr 3  69 00                        adc #0          ; we only need the carry
001601r 3  85 rr                        sta tmp1+1
001603r 3               
001603r 3  B4 00                        ldy 0,x         ; index is length of string minus 1
001605r 3  88                           dey
001606r 3               
001606r 3               @string_loop:
001606r 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
001608r 3               
001608r 3                               ; Lowercase the incoming charcter.
001608r 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
00160Ar 3  B0 07                        bcs @check_char
00160Cr 3  C9 41                        cmp #$41        ; ASCII 'A'
00160Er 3  90 03                        bcc @check_char
001610r 3               
001610r 3                               ; An uppercase letter has been located.  Make it
001610r 3                               ; lowercase.
001610r 3  18                           clc
001611r 3  69 20                        adc #$20
001613r 3               
001613r 3               @check_char:
001613r 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
001615r 3  D0 13                        bne @next_entry_tmp1
001617r 3               
001617r 3  88                           dey
001618r 3  D0 EC                        bne @string_loop
00161Ar 3               
00161Ar 3               @success_tmp1:
00161Ar 3  68                           pla             ; Restore tmp1 from the return stack.
00161Br 3  85 rr                        sta tmp1+1
00161Dr 3  68                           pla
00161Er 3  85 rr                        sta tmp1
001620r 3               
001620r 3               @success:
001620r 3                               ; The strings match. Put correct nt NOS, because we'll drop
001620r 3                               ; TOS before we leave
001620r 3  A5 rr                        lda tmp1
001622r 3  95 02                        sta 2,x
001624r 3  A5 rr                        lda tmp1+1
001626r 3  95 03                        sta 3,x
001628r 3               
001628r 3  80 20                        bra @done
00162Ar 3               
00162Ar 3               @next_entry_tmp1:
00162Ar 3  68                           pla             ; Restore tmp1 from the return stack.
00162Br 3  85 rr                        sta tmp1+1
00162Dr 3  68                           pla
00162Er 3  85 rr                        sta tmp1
001630r 3               
001630r 3               @next_entry:
001630r 3                               ; Not the same, so we get the next word. Next header
001630r 3                               ; address is two bytes down
001630r 3  A0 02                        ldy #2
001632r 3  B1 rr                        lda (tmp1),y
001634r 3  48                           pha
001635r 3  C8                           iny
001636r 3  B1 rr                        lda (tmp1),y
001638r 3  85 rr                        sta tmp1+1
00163Ar 3  68                           pla
00163Br 3  85 rr                        sta tmp1
00163Dr 3               
00163Dr 3                               ; If we got a zero, we've walked the whole Dictionary and
00163Dr 3                               ; return as a failure, otherwise try again
00163Dr 3  05 rr                        ora tmp1+1
00163Fr 3  D0 95                        bne @loop
001641r 3               
001641r 3                               ; Move on to the next wordlist in the search order.
001641r 3  E6 rr                        inc tmp3
001643r 3  4C rr rr                     jmp @wordlist_loop
001646r 3               
001646r 3               @fail_done:
001646r 3  74 02                        stz 2,x         ; failure flag
001648r 3  74 03                        stz 3,x
00164Ar 3               @done:
00164Ar 3  E8                           inx
00164Br 3  E8                           inx
00164Cr 3               
00164Cr 3  60           z_find_name:    rts
00164Dr 3               
00164Dr 3               
00164Dr 3               
00164Dr 3               ; ## FLUSH ( -- ) "Save dirty buffers and empty buffers"
00164Dr 3               ; ## "flush"  auto  ANS block
00164Dr 3                       ; """https://forth-standard.org/standard/block/FLUSH"""
00164Dr 3               xt_flush:
00164Dr 3  20 rr rr                     jsr xt_save_buffers
001650r 3               
001650r 3                               ; Set the buffer status to empty.
001650r 3  A0 2C                        ldy #buffstatus_offset
001652r 3  A9 00                        lda #0
001654r 3  91 rr                        sta (up),y      ; Only LSB is used.
001656r 3               z_flush:
001656r 3  60                           rts
001657r 3               
001657r 3               
001657r 3               ; ## FM_SLASH_MOD ( d n1  -- rem n2 ) "Floored signed division"
001657r 3               ; ## "fm/mod"  auto  ANS core
001657r 3                       ; """https://forth-standard.org/standard/core/FMDivMOD
001657r 3                       ; Note that by default, Tali Forth uses SM/REM for most things.
001657r 3                       ;
001657r 3                       ; There are various ways to realize this. We follow EForth with
001657r 3                       ;    DUP 0< DUP >R  IF NEGATE >R DNEGATE R> THEN >R DUP
001657r 3                       ;    0<  IF R@ + THEN  R> UM/MOD R> IF SWAP NEGATE SWAP THEN
001657r 3                       ; See (http://www.forth.org/eforth.html). However you can also
001657r 3                       ; go FM/MOD via SM/REM (http://www.figuk.plus.com/build/arith.htm):
001657r 3                       ;     DUP >R  SM/REM DUP 0< IF SWAP R> + SWAP 1+ ELSE  R> DROP THEN
001657r 3                       ; """
001657r 3               
001657r 3               xt_fm_slash_mod:
001657r 3  20 rr rr                     jsr underflow_3
00165Ar 3               
00165Ar 3                               ; if sign of n1 is negative, negate both n1 and d
00165Ar 3  64 rr                        stz tmp2        ; default: n is positive
00165Cr 3  B5 01                        lda 1,x         ; MSB of n1
00165Er 3  10 0E                        bpl @check_d
001660r 3               
001660r 3  E6 rr                        inc tmp2        ; set flag to negative for n1
001662r 3  20 rr rr                     jsr xt_negate   ; NEGATE
001665r 3  20 rr rr                     jsr xt_to_r     ; >R
001668r 3  20 rr rr                     jsr xt_dnegate  ; DNEGATE
00166Br 3  20 rr rr                     jsr xt_r_from   ; R>
00166Er 3               
00166Er 3               @check_d:
00166Er 3                               ; If d is negative, add n1 to high cell of d
00166Er 3  B5 03                        lda 3,x         ; MSB of high word of d
001670r 3  10 0D                        bpl @multiply
001672r 3               
001672r 3  18                           clc
001673r 3  B5 00                        lda 0,x         ; LSB of n1
001675r 3  75 02                        adc 2,x         ; LSB of dh
001677r 3  95 02                        sta 2,x
001679r 3               
001679r 3  B5 01                        lda 1,x         ; MSB of n1
00167Br 3  75 03                        adc 3,x         ; MSB of dh
00167Dr 3  95 03                        sta 3,x
00167Fr 3               
00167Fr 3               @multiply:
00167Fr 3  20 rr rr                     jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
001682r 3               
001682r 3                               ; if n was negative, negate the result
001682r 3  A5 rr                        lda tmp2
001684r 3  F0 07                        beq @done
001686r 3               
001686r 3  E8                           inx             ; pretend that we SWAP
001687r 3  E8                           inx
001688r 3  20 rr rr                     jsr xt_negate
00168Br 3  CA                           dex
00168Cr 3  CA                           dex
00168Dr 3               @done:
00168Dr 3  60           z_fm_slash_mod: rts
00168Er 3               
00168Er 3               
00168Er 3               
00168Er 3               ; ## FORTH ( -- ) "Replace first WID in search order with Forth-Wordlist"
00168Er 3               ; ## "forth"  auto  ANS search ext
00168Er 3                       ; """https://forth-standard.org/standard/search/FORTH"""
00168Er 3               xt_forth:
00168Er 3  A0 1F                        ldy #search_order_offset
001690r 3  A9 00                        lda #0          ; The WID for Forth is 0.
001692r 3               
001692r 3  91 rr                        sta (up),y
001694r 3               z_forth:
001694r 3  60                           rts
001695r 3               
001695r 3               
001695r 3               ; This is a special jsr target to skip the zeroing of BLK at the beginning
001695r 3               ; of evaluate.  It's used by LOAD to allow setting BLK while the block is
001695r 3               ; being evaluated.  Evaluate's normal behavior is to zero BLK.
001695r 3               load_evaluate:
001695r 3                               ; Set a flag (using tmp1) to not zero BLK
001695r 3  A9 FF                        lda #$FF
001697r 3  85 rr                        sta tmp1
001699r 3  80 11                        bra load_evaluate_start
00169Br 3               
00169Br 3               ; ## EVALUATE ( addr u -- ) "Execute a string"
00169Br 3               ; ## "evaluate"  auto  ANS core
00169Br 3                       ; """https://forth-standard.org/standard/core/EVALUATE
00169Br 3                       ; Set SOURCE-ID to -1, make addr u the input source, set >IN to zero.
00169Br 3                       ; After processing the line, revert to old input source. We use this
00169Br 3                       ; to compile high-level Forth words and user-defined words during
00169Br 3                       ; start up and cold boot. In contrast to ACCEPT, we need to, uh,
00169Br 3                       ; accept more than 255 characters here, even though it's a pain in
00169Br 3                       ; the 8-bit.
00169Br 3                       ; """
00169Br 3               
00169Br 3               xt_evaluate:
00169Br 3  20 rr rr                     jsr underflow_2
00169Er 3               
00169Er 3                               ; Clear the flag to zero BLK.  Only LOAD will set the flag,
00169Er 3                               ; and will set the block number.
00169Er 3  64 rr                        stz tmp1
0016A0r 3               
0016A0r 3                               ; If u is zero (which can happen a lot for the user-defined
0016A0r 3                               ; words), just leave again
0016A0r 3  B5 00                        lda 0,x
0016A2r 3  15 01                        ora 1,x
0016A4r 3  D0 06                        bne _eval_got_work
0016A6r 3               
0016A6r 3  E8                           inx
0016A7r 3  E8                           inx
0016A8r 3  E8                           inx
0016A9r 3  E8                           inx
0016AAr 3               
0016AAr 3  80 42                        bra _eval_done
0016ACr 3               
0016ACr 3               ; Special entry point for LOAD to bypass the zeroing of BLK.
0016ACr 3               load_evaluate_start:
0016ACr 3               _eval_got_work:
0016ACr 3                               ; Save the current value of BLK on the return stack.
0016ACr 3  A0 01                        ldy #blk_offset+1
0016AEr 3  B1 rr                        lda (up),y
0016B0r 3  48                           pha
0016B1r 3  88                           dey
0016B2r 3  B1 rr                        lda (up),y
0016B4r 3  48                           pha
0016B5r 3               
0016B5r 3                               ; See if we should zero BLK.
0016B5r 3  A5 rr                        lda tmp1
0016B7r 3  D0 05                        bne @nozero
0016B9r 3               
0016B9r 3                               ; Set BLK to zero.
0016B9r 3                               ; lda #0        ; A is already zero from loading tmp1
0016B9r 3  91 rr                        sta (up),y
0016BBr 3  C8                           iny
0016BCr 3  91 rr                        sta (up),y
0016BEr 3               
0016BEr 3               @nozero:
0016BEr 3                               ; Save the input state to the Return Stack
0016BEr 3  20 rr rr                     jsr xt_input_to_r
0016C1r 3               
0016C1r 3                               ; set SOURCE-ID to -1
0016C1r 3  A9 FF                        lda #$ff
0016C3r 3  85 rr                        sta insrc
0016C5r 3  85 rr                        sta insrc+1
0016C7r 3               
0016C7r 3                               ; set >IN to zero
0016C7r 3  64 rr                        stz toin
0016C9r 3  64 rr                        stz toin+1
0016CBr 3               
0016CBr 3                               ; move TOS and NOS to input buffers
0016CBr 3  B5 00                        lda 0,x
0016CDr 3  85 rr                        sta ciblen
0016CFr 3  B5 01                        lda 1,x
0016D1r 3  85 rr                        sta ciblen+1
0016D3r 3               
0016D3r 3  B5 02                        lda 2,x
0016D5r 3  85 rr                        sta cib
0016D7r 3  B5 03                        lda 3,x
0016D9r 3  85 rr                        sta cib+1
0016DBr 3               
0016DBr 3  E8                           inx             ; A clean stack is a clean mind
0016DCr 3  E8                           inx
0016DDr 3  E8                           inx
0016DEr 3  E8                           inx
0016DFr 3               
0016DFr 3  20 rr rr                     jsr interpret   ; ( -- )
0016E2r 3               
0016E2r 3                               ; restore variables
0016E2r 3  20 rr rr                     jsr xt_r_to_input
0016E5r 3               
0016E5r 3                               ; Restore BLK from the return stack.
0016E5r 3  A0 00                        ldy #blk_offset
0016E7r 3  68                           pla
0016E8r 3  91 rr                        sta (up),y
0016EAr 3  C8                           iny
0016EBr 3  68                           pla
0016ECr 3  91 rr                        sta (up),y
0016EEr 3               
0016EEr 3               _eval_done:
0016EEr 3  60           z_evaluate:     rts
0016EFr 3               
0016EFr 3               
0016EFr 3               
0016EFr 3               ; ## FORTH_WORDLIST ( -- u ) "WID for the Forth Wordlist"
0016EFr 3               ; ## "forth-wordlist"  auto  ANS search
0016EFr 3                       ; """https://forth-standard.org/standard/search/FORTH-WORDLIST"""
0016EFr 3                       ; This is a dummy entry, the actual code is shared with ZERO.
0016EFr 3               
0016EFr 3               
0016EFr 3               ; ## GET_CURRENT ( -- wid ) "Get the id of the compilation wordlist"
0016EFr 3               ; ## "get-current" auto ANS search
0016EFr 3                       ; """https://forth-standard.org/standard/search/GET-CURRENT"""
0016EFr 3               
0016EFr 3               xt_get_current:
0016EFr 3                               ; This is a little different than some of the variables
0016EFr 3                               ; in the user area as we want the value rather than
0016EFr 3                               ; the address.
0016EFr 3  CA                           dex
0016F0r 3  CA                           dex
0016F1r 3  A0 04                        ldy #current_offset
0016F3r 3  B1 rr                        lda (up),y
0016F5r 3  95 00                        sta 0,x         ; CURRENT is a byte variable
0016F7r 3  74 01                        stz 1,x         ; so the MSB is zero.
0016F9r 3               
0016F9r 3  60           z_get_current:  rts
0016FAr 3               
0016FAr 3               
0016FAr 3               
0016FAr 3               ; ## GET_ORDER ( -- wid_n .. wid_1 n) "Get the current search order"
0016FAr 3               ; ## "get-order" auto ANS search
0016FAr 3                       ; """https://forth-standard.org/standard/search/GET-ORDER"""
0016FAr 3               
0016FAr 3               xt_get_order:
0016FAr 3                               ; Get #ORDER - the number of wordlists in the search order.
0016FAr 3  A0 1E                        ldy #num_order_offset
0016FCr 3  B1 rr                        lda (up),y
0016FEr 3  85 rr                        sta tmp1
001700r 3  F0 16                        beq @done       ; If zero, there are no wordlists.
001702r 3               
001702r 3               @loop:
001702r 3                               ; Count down towards the front of the list.
001702r 3                               ; By decrementing first, we also turn the length into an offset.
001702r 3  C6 rr                        dec tmp1        ; Count down by bytes.
001704r 3               
001704r 3                               ; Get a pointer to the current wordlist, working back to front.
001704r 3  A9 1F                        lda #search_order_offset
001706r 3  18                           clc
001707r 3  65 rr                        adc tmp1
001709r 3  A8                           tay
00170Ar 3               
00170Ar 3                               ; Put that wordlist id on the stack.
00170Ar 3  CA                           dex
00170Br 3  CA                           dex
00170Cr 3  B1 rr                        lda (up),y
00170Er 3  95 00                        sta 0,x         ; Search order array is bytes, so
001710r 3  74 01                        stz 1,x         ; put a zero in the high byte.
001712r 3               
001712r 3                               ; See if that was the last one to process (first in the list).
001712r 3  A9 00                        lda #0
001714r 3  C5 rr                        cmp tmp1
001716r 3  D0 EA                        bne @loop
001718r 3               
001718r 3               @done:
001718r 3                               ; Put the number of items on the stack.
001718r 3  CA                           dex
001719r 3  CA                           dex
00171Ar 3  A0 1E                        ldy #num_order_offset
00171Cr 3  B1 rr                        lda (up),y
00171Er 3  95 00                        sta 0,x
001720r 3  74 01                        stz 1,x         ; We only support 8 wordlists.
001722r 3               
001722r 3  60           z_get_order:    rts
001723r 3               
001723r 3               
001723r 3               
001723r 3               ; ## GREATER_THAN ( n n -- f ) "See if NOS is greater than TOS"
001723r 3               ; ## ">"  auto  ANS core
001723r 3                       ; """https://forth-standard.org/standard/core/more"""
001723r 3               
001723r 3               xt_greater_than:
001723r 3  20 rr rr                     jsr underflow_2
001726r 3               
001726r 3  A0 00                        ldy #0          ; default false
001728r 3  20 rr rr                     jsr compare_16bit
00172Br 3               
00172Br 3                               ; for signed numbers, NOS>TOS gives us Z=0 and N=1
00172Br 3  F0 03                        beq @false
00172Dr 3  10 01                        bpl @false
00172Fr 3               
00172Fr 3                               ; true
00172Fr 3  88                           dey
001730r 3               @false:
001730r 3  98                           tya
001731r 3               
001731r 3  E8                           inx
001732r 3  E8                           inx
001733r 3  95 00                        sta 0,x
001735r 3  95 01                        sta 1,x
001737r 3               
001737r 3  60           z_greater_than: rts
001738r 3               
001738r 3               
001738r 3               
001738r 3               ; ## HERE ( -- addr ) "Put Compiler Pointer on Data Stack"
001738r 3               ; ## "here"  auto  ANS core
001738r 3                       ; """https://forth-standard.org/standard/core/HERE
001738r 3                       ; This code is also used by the assembler directive ARROW
001738r 3                       ; ("->") though as immediate"""
001738r 3               xt_here:
001738r 3               xt_asm_arrow:
001738r 3  CA                           dex
001739r 3  CA                           dex
00173Ar 3  A5 rr                        lda cp
00173Cr 3  95 00                        sta 0,x
00173Er 3  A5 rr                        lda cp+1
001740r 3  95 01                        sta 1,x
001742r 3               
001742r 3               z_asm_arrow:
001742r 3  60           z_here:         rts
001743r 3               
001743r 3               
001743r 3               ; ## HEX ( -- ) "Change base radix to hexadecimal"
001743r 3               ; ## "hex"  auto  ANS core ext
001743r 3                       ; """https://forth-standard.org/standard/core/HEX"""
001743r 3               xt_hex:
001743r 3  A9 10                        lda #16
001745r 3  85 rr                        sta base
001747r 3  64 rr                        stz base+1              ; paranoid
001749r 3               
001749r 3  60           z_hex:          rts
00174Ar 3               
00174Ar 3               
00174Ar 3               ; ## HEXSTORE ( addr1 u1 addr2 -- u2 ) "Store a list of numbers"
00174Ar 3               ; ## "hexstore"  auto  Tali
00174Ar 3                       ; """Given a string addr1 u1 with numbers in the current base seperated
00174Ar 3                       ; by spaces, store the numbers at the address addr2, returning the
00174Ar 3                       ; number of elements. Non-number elements are skipped, an zero-length
00174Ar 3                       ; string produces a zero output.
00174Ar 3                       ; """
00174Ar 3               
00174Ar 3               xt_hexstore:
00174Ar 3  20 rr rr                     jsr underflow_3
00174Dr 3               
00174Dr 3  20 rr rr                     jsr xt_dup              ; Save copy of original address
001750r 3  20 rr rr                     jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
001753r 3               
001753r 3               @loop:
001753r 3                               ; Loop until string is totally consumed
001753r 3  B5 00                        lda 0,x
001755r 3  15 01                        ora 1,x
001757r 3  F0 36                        beq @done
001759r 3               
001759r 3  20 rr rr                     jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
00175Cr 3               
00175Cr 3                               ; Prepare the conversion of the number.
00175Cr 3  20 rr rr                     jsr xt_two_to_r
00175Fr 3  20 rr rr                     jsr xt_zero
001762r 3  20 rr rr                     jsr xt_zero
001765r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
001768r 3  20 rr rr                     jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
00176Br 3               
00176Br 3                               ; If u4 is not zero, we have leftover chars and have to do
00176Br 3                               ; things differently
00176Br 3  B5 00                        lda 0,x
00176Dr 3  15 01                        ora 1,x
00176Fr 3  D0 17                        bne @have_chars_left
001771r 3               
001771r 3                               ; Normal case, this number is all done
001771r 3  20 rr rr                     jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
001774r 3  20 rr rr                     jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
001777r 3               
001777r 3                               ; Store the new value
001777r 3  20 rr rr                     jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
00177Ar 3  20 rr rr                     jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
00177Dr 3               
00177Dr 3                               ; Increase counter
00177Dr 3  20 rr rr                     jsr xt_r_from           ; R>
001780r 3  20 rr rr                     jsr xt_one_plus         ; 1+
001783r 3  20 rr rr                     jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
001786r 3  80 CB                        bra @loop
001788r 3               
001788r 3               @have_chars_left:
001788r 3                               ; Pathological case: Drop the rest of this number off the stack
001788r 3                               ; and continue with the next word. Doesn't print a warning. We
001788r 3                               ; need to drop four cells, that is, eight bytes
001788r 3  8A                           txa
001789r 3  18                           clc
00178Ar 3  69 08                        adc #8
00178Cr 3  AA                           tax
00178Dr 3  80 C4                        bra @loop
00178Fr 3               
00178Fr 3               @done:
00178Fr 3                               ; Clean up return stack and calculate number of chars stored
00178Fr 3  E8                           inx
001790r 3  E8                           inx
001791r 3  E8                           inx
001792r 3  E8                           inx                     ; 2DROP
001793r 3               
001793r 3  20 rr rr                     jsr xt_two_r_from       ; ( addr2+n addr2 )
001796r 3  20 rr rr                     jsr xt_swap
001799r 3  20 rr rr                     jsr xt_minus            ; ( n )
00179Cr 3               
00179Cr 3  60           z_hexstore:     rts
00179Dr 3               
00179Dr 3               
00179Dr 3               
00179Dr 3               ; ## HOLD ( char -- ) "Insert character at current output"
00179Dr 3               ; ## "hold"  auto  ANS core
00179Dr 3                       ; """https://forth-standard.org/standard/core/HOLD
00179Dr 3                       ; Insert a character at the current position of a pictured numeric
00179Dr 3                       ; output string on
00179Dr 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
00179Dr 3                       ;
00179Dr 3                       ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal
00179Dr 3                       ; variable tohold instead of HLD.
00179Dr 3                       ; """
00179Dr 3               xt_hold:
00179Dr 3  20 rr rr                     jsr underflow_1
0017A0r 3               
0017A0r 3  A5 rr                        lda tohold
0017A2r 3  D0 02                        bne @1
0017A4r 3  C6 rr                        dec tohold+1
0017A6r 3               @1:
0017A6r 3  C6 rr                        dec tohold
0017A8r 3               
0017A8r 3  B5 00                        lda 0,x
0017AAr 3  92 rr                        sta (tohold)
0017ACr 3  E8                           inx
0017ADr 3  E8                           inx
0017AEr 3               
0017AEr 3  60           z_hold:         rts
0017AFr 3               
0017AFr 3               
0017AFr 3               ; ## I ( -- n )(R: n -- n)  "Copy loop counter to stack"
0017AFr 3               ; ## "i"  auto  ANS core
0017AFr 3                       ; """https://forth-standard.org/standard/core/I
0017AFr 3                       ; Note that this is not the same as R@ because we use a fudge
0017AFr 3                       ; factor for loop control; see the Control Flow section of the
0017AFr 3                       ; manual for details.
0017AFr 3                       ;
0017AFr 3                       ; We should make this native compile for speed.
0017AFr 3                       ; """
0017AFr 3               
0017AFr 3               xt_i:
0017AFr 3  CA                           dex
0017B0r 3  CA                           dex
0017B1r 3               
0017B1r 3                               ; Get the fudged index off of the top of the stack. It's
0017B1r 3                               ; easier to do math on the stack directly than to pop and
0017B1r 3                               ; push stuff around
0017B1r 3  86 rr                        stx tmpdsp
0017B3r 3  BA                           tsx
0017B4r 3               
0017B4r 3  38                           sec
0017B5r 3  BD 01 01                     lda $0101,x     ; LSB
0017B8r 3  FD 03 01                     sbc $0103,x
0017BBr 3  A8                           tay
0017BCr 3               
0017BCr 3  BD 02 01                     lda $0102,x     ; MSB
0017BFr 3  FD 04 01                     sbc $0104,x
0017C2r 3               
0017C2r 3  A6 rr                        ldx tmpdsp
0017C4r 3               
0017C4r 3  95 01                        sta 1,x         ; MSB of de-fudged index
0017C6r 3  94 00                        sty 0,x         ; LSB of de-fudged index
0017C8r 3               
0017C8r 3  60           z_i:            rts
0017C9r 3               
0017C9r 3               
0017C9r 3               
0017C9r 3               ; ## IF (C: -- orig) (flag -- ) "Conditional flow control"
0017C9r 3               ; ## "if"  auto  ANS core
0017C9r 3                       ; """http://forth-standard.org/standard/core/IF"""
0017C9r 3               
0017C9r 3               xt_if:
0017C9r 3                               ; Compile a 0BRANCH
0017C9r 3  A0 rr                        ldy #>zero_branch_runtime
0017CBr 3  A9 rr                        lda #<zero_branch_runtime
0017CDr 3  20 rr rr                     jsr cmpl_subroutine
0017D0r 3               
0017D0r 3                               ; Put the origination address on the stack for else/then
0017D0r 3  20 rr rr                     jsr xt_here
0017D3r 3               
0017D3r 3                               ; Stuff zero in for the branch address right now.
0017D3r 3                               ; THEN or ELSE will fix it later.
0017D3r 3  20 rr rr                     jsr xt_zero
0017D6r 3  20 rr rr                     jsr xt_comma
0017D9r 3  60           z_if:           rts
0017DAr 3               
0017DAr 3               
0017DAr 3               zero_branch_runtime:
0017DAr 3                       ; """In some Forths, this is called (0BRANCH). Tali Forth originally
0017DAr 3                       ; included 0BRANCH as a high-level word that inserted this code at
0017DAr 3                       ; runtime.
0017DAr 3                       ; """
0017DAr 3               
0017DAr 3                               ; We use the return value on the 65c02 stack to determine
0017DAr 3                               ; where we want to return to.
0017DAr 3  68                           pla
0017DBr 3  85 rr                        sta tmpbranch
0017DDr 3  68                           pla
0017DEr 3  85 rr                        sta tmpbranch+1
0017E0r 3               
0017E0r 3                               ; See if the flag is zero, which is the whole purpose of
0017E0r 3                               ; this all
0017E0r 3  B5 00                        lda 0,x
0017E2r 3  15 01                        ora 1,x
0017E4r 3  F0 0F                        beq @zero
0017E6r 3               
0017E6r 3                               ; Flag is TRUE, so we skip over the next two bytes. This is
0017E6r 3                               ; the part between IF and THEN
0017E6r 3  A5 rr                        lda tmpbranch   ; LSB
0017E8r 3  18                           clc
0017E9r 3  69 02                        adc #2
0017EBr 3  85 rr                        sta tmp1
0017EDr 3  A5 rr                        lda tmpbranch+1 ; MSB
0017EFr 3  69 00                        adc #0          ; For carry
0017F1r 3  85 rr                        sta tmp1+1
0017F3r 3               
0017F3r 3  80 13                        bra @done
0017F5r 3               
0017F5r 3               @zero:
0017F5r 3                               ; Flag is FALSE (0) so we take the jump to the address given in
0017F5r 3                               ; the next two bytes. However, the address points to the last
0017F5r 3                               ; byte of the JSR instruction, not to the next byte afterwards
0017F5r 3  A0 01                        ldy #1
0017F7r 3  B1 rr                        lda (tmpbranch),y
0017F9r 3  85 rr                        sta tmp1
0017FBr 3  C8                           iny
0017FCr 3  B1 rr                        lda (tmpbranch),y
0017FEr 3  85 rr                        sta tmp1+1
001800r 3               
001800r 3                               ; Now we have to subtract one byte from the address
001800r 3                               ; given because of the way the 6502 calculates RTS
001800r 3  A5 rr                        lda tmp1
001802r 3  D0 02                        bne @1
001804r 3  C6 rr                        dec tmp1+1
001806r 3               @1:
001806r 3  C6 rr                        dec tmp1
001808r 3               
001808r 3               @done:
001808r 3                               ; However we got here, tmp1 has the value we push to jump
001808r 3                               ; to
001808r 3  A5 rr                        lda tmp1+1
00180Ar 3  48                           pha             ; MSB first
00180Br 3  A5 rr                        lda tmp1
00180Dr 3  48                           pha
00180Er 3               
00180Er 3                               ; clean up the stack and jump
00180Er 3  E8                           inx
00180Fr 3  E8                           inx
001810r 3               
001810r 3  60                           rts
001811r 3               
001811r 3               
001811r 3               
001811r 3               ; ## IMMEDIATE ( -- ) "Mark most recent word as IMMEDIATE"
001811r 3               ; ## "immediate"  auto  ANS core
001811r 3                       ; """https://forth-standard.org/standard/core/IMMEDIATE
001811r 3                       ; Make sure the most recently defined word is immediate. Will only
001811r 3                       ; affect the last word in the dictionary. Note that if the word is
001811r 3                       ; defined in ROM, this will have no affect, but will not produce an
001811r 3                       ; error message.
001811r 3                       ; """
001811r 3               xt_immediate:
001811r 3  20 rr rr                     jsr current_to_dp
001814r 3  A0 01                        ldy #1          ; offset for status byte
001816r 3  B1 rr                        lda (dp),y
001818r 3  09 04                        ora #IM        ; make sure bit 7 is set
00181Ar 3  91 rr                        sta (dp),y
00181Cr 3               
00181Cr 3  60           z_immediate:    rts
00181Dr 3               
00181Dr 3               
00181Dr 3               ; ## INPUT ( -- addr ) "Return address of input vector"
00181Dr 3               ; ## "input" tested Tali Forth
00181Dr 3               
00181Dr 3               xt_input:
00181Dr 3  CA                           dex
00181Er 3  CA                           dex
00181Fr 3  A9 rr                        lda #<input
001821r 3  95 00                        sta 0,x
001823r 3  A9 rr                        lda #>input
001825r 3  95 01                        sta 1,x
001827r 3               
001827r 3  60           z_input:        rts
001828r 3               
001828r 3               
001828r 3               
001828r 3               ; ## INPUT_TO_R ( -- ) ( R: -- n n n n ) "Save input state to the Return Stack"
001828r 3               ; ## "input>r"  tested  Tali Forth
001828r 3                  	; """Save the current input state as defined by insrc, cib, ciblen, and
001828r 3                       ; toin to the Return Stack. Used by EVALUTE.
001828r 3                       ;
001828r 3                       ; The naive way of doing
001828r 3                       ; this is to push each two-byte variable to the stack in the form of
001828r 3                       ;
001828r 3                       ;       lda insrc
001828r 3                       ;       pha
001828r 3                       ;       lda insrc+1
001828r 3                       ;       pha
001828r 3                       ;
001828r 3                       ; for a total of 24 byte of instruction in one direction and later
001828r 3                       ; a further 24 bytes to reverse the process. We shorten this at the
001828r 3                       ; cost of some speed by assuming the four variables are grouped
001828r 3                       ; together on the Zero Page and start with insrc (see definitions.asm
001828r 3                       ; for details). The reverse operation is r_to_input. These words must
001828r 3                       ; be flagged as Never Native. Uses tmp1
001828r 3                       ; """
001828r 3               
001828r 3               xt_input_to_r:
001828r 3                               ; We arrive here with the return address on the top of the
001828r 3                               ; 65c02's stack. We need to move it out of the way first
001828r 3  68                           pla
001829r 3  85 rr                        sta tmp1
00182Br 3  68                           pla
00182Cr 3  85 rr                        sta tmp1+1
00182Er 3               
00182Er 3                               ; This assumes that insrc is the first of eight bytes and
00182Er 3                               ; toin+1 the last in the sequence we want to save from the Zero
00182Er 3                               ; Page.
00182Er 3  A0 07                        ldy #7
001830r 3               @loop:
001830r 3  B9 rr rr                     lda insrc,y     ; insrc+7 is toin+1
001833r 3  48                           pha
001834r 3  88                           dey
001835r 3  10 F9                        bpl @loop
001837r 3               
001837r 3                               ; Restore address for return jump
001837r 3  A5 rr                        lda tmp1+1
001839r 3  48                           pha
00183Ar 3  A5 rr                        lda tmp1
00183Cr 3  48                           pha
00183Dr 3               
00183Dr 3  60           z_input_to_r: 	rts
00183Er 3               
00183Er 3               
00183Er 3               
00183Er 3               ; ## INT_TO_NAME ( xt -- nt ) "Get name token from execution token"
00183Er 3               ; ## "int>name"  auto  Tali Forth
00183Er 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
00183Er 3                       ; This is called >NAME in Gforth, but we change it to
00183Er 3                       ; INT>NAME to match NAME>INT
00183Er 3                       ; """
00183Er 3               
00183Er 3               xt_int_to_name:
00183Er 3  20 rr rr                     jsr underflow_1
001841r 3               
001841r 3                               ; Unfortunately, to find the header, we have to walk through
001841r 3                               ; all of the wordlists. We are running out of tmp variables.
001841r 3                               ; (I'm assuming there is a reason this is avoiding tmp1) so
001841r 3                               ; hold the current wordlist on the data stack. This searches
001841r 3                               ; all of the wordlists in id order.
001841r 3  CA                           dex
001842r 3  CA                           dex
001843r 3  74 00                        stz 0,x
001845r 3  74 01                        stz 1,x
001847r 3               
001847r 3               @wordlist_loop:
001847r 3                               ; A needs to have the current wordlist id in it at
001847r 3                               ; the top of this loop.
001847r 3  B5 00                        lda 0,x                 ; Get the current wordlist.
001849r 3               
001849r 3                               ; Get the DP for that wordlist.
001849r 3  0A                           asl                     ; Turn offset into cells offset.
00184Ar 3  18                           clc
00184Br 3  69 06                        adc #wordlists_offset
00184Dr 3  A8                           tay
00184Er 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
001850r 3  85 rr                        sta tmp2                ; into tmp2
001852r 3  C8                           iny
001853r 3  B1 rr                        lda (up),y
001855r 3  85 rr                        sta tmp2+1
001857r 3               
001857r 3                               ; Check for an empty wordlist (DP will be 0)
001857r 3  A5 rr                        lda tmp2
001859r 3  05 rr                        ora tmp2+1
00185Br 3  F0 38                        beq @next_wordlist
00185Dr 3               
00185Dr 3  B5 02                        lda 2,x         ; Target xt is now behind wordlist id.
00185Fr 3  85 rr                        sta tmp3        ; Save target xt in tmp3
001861r 3  B5 03                        lda 3,x
001863r 3  85 rr                        sta tmp3+1
001865r 3               
001865r 3               @loop:
001865r 3  A0 04                        ldy #4          ; xt is four bytes down
001867r 3  B1 rr                        lda (tmp2),y    ; LSB of xt of current nt
001869r 3  C5 rr                        cmp tmp3
00186Br 3  D0 07                        bne @no_match
00186Dr 3               
00186Dr 3                               ; LSB is the same, now check MSB
00186Dr 3  C8                           iny
00186Er 3  B1 rr                        lda (tmp2),y    ; MSB of xt of current nt
001870r 3  C5 rr                        cmp tmp3+1
001872r 3  F0 32                        beq @match
001874r 3               
001874r 3               @no_match:
001874r 3                               ; no match, so we need to get the next word. Next nt is two
001874r 3                               ; bytes down
001874r 3  18                           clc
001875r 3  A5 rr                        lda tmp2
001877r 3  69 02                        adc #2
001879r 3  85 rr                        sta tmp2
00187Br 3  A5 rr                        lda tmp2+1
00187Dr 3  69 00                        adc #0          ; only care about carry
00187Fr 3  85 rr                        sta tmp2+1
001881r 3               
001881r 3  A0 00                        ldy #0
001883r 3  B1 rr                        lda (tmp2),y
001885r 3  48                           pha
001886r 3  C8                           iny
001887r 3  11 rr                        ora (tmp2),y
001889r 3  F0 09                        beq @zero
00188Br 3               
00188Br 3                               ; Not zero continue
00188Br 3  B1 rr                        lda (tmp2),y
00188Dr 3  85 rr                        sta tmp2+1
00188Fr 3  68                           pla
001890r 3  85 rr                        sta tmp2
001892r 3  80 D1                        bra @loop
001894r 3               
001894r 3               @zero:
001894r 3                               ; if next word is zero, the xt has no nt in this wordlist
001894r 3  68                           pla             ; Leftover from above loop
001895r 3               
001895r 3               @next_wordlist:
001895r 3                               ; Move on to the next wordlist.
001895r 3  B5 00                        lda 0,x
001897r 3  1A                           inc
001898r 3  95 00                        sta 0,x
00189Ar 3  C9 0C                        cmp #max_wordlists
00189Cr 3  D0 A9                        bne @wordlist_loop
00189Er 3               
00189Er 3                               ; We didn't find it in any of the wordlists.
00189Er 3                               ; Remove the wordlist id from the stack.
00189Er 3  E8                           inx
00189Fr 3  E8                           inx
0018A0r 3               
0018A0r 3                               ; We return a zero to indicate that we didn't find it.
0018A0r 3  74 00                        stz 0,x
0018A2r 3  74 01                        stz 1,x
0018A4r 3  80 0A                        bra z_int_to_name
0018A6r 3               
0018A6r 3               @match:
0018A6r 3                               ; We found it. Remove wordlist id from stack.
0018A6r 3  E8                           inx
0018A7r 3  E8                           inx
0018A8r 3               
0018A8r 3                               ; It's a match! Replace TOS with nt
0018A8r 3  A5 rr                        lda tmp2
0018AAr 3  95 00                        sta 0,x
0018ACr 3  A5 rr                        lda tmp2+1
0018AEr 3  95 01                        sta 1,x
0018B0r 3               
0018B0r 3  60           z_int_to_name:  rts
0018B1r 3               
0018B1r 3               
0018B1r 3               
0018B1r 3               ; ## INVERT ( n -- n ) "Complement of TOS"
0018B1r 3               ; ## "invert"  auto  ANS core
0018B1r 3                       ; """https://forth-standard.org/standard/core/INVERT"""
0018B1r 3               xt_invert:
0018B1r 3  20 rr rr                     jsr underflow_1
0018B4r 3               
0018B4r 3  A9 FF                        lda #$FF
0018B6r 3  55 00                        eor 0,x         ; LSB
0018B8r 3  95 00                        sta 0,x
0018BAr 3               
0018BAr 3  A9 FF                        lda #$FF
0018BCr 3  55 01                        eor 1,x         ; MSB
0018BEr 3  95 01                        sta 1,x
0018C0r 3               
0018C0r 3  60           z_invert:       rts
0018C1r 3               
0018C1r 3               
0018C1r 3               ; ## IS ( xt "name" -- ) "Set named word to execute xt"
0018C1r 3               ; ## "is"  auto  ANS core ext
0018C1r 3                       ; """http://forth-standard.org/standard/core/IS"""
0018C1r 3               
0018C1r 3               xt_is:
0018C1r 3                               ; This is a state aware word with differet behavior
0018C1r 3                               ; when used while compiling vs interpreting.
0018C1r 3                               ; Check STATE
0018C1r 3  A5 rr                        lda state
0018C3r 3  05 rr                        ora state+1
0018C5r 3  F0 0C                        beq @interpreting
0018C7r 3               
0018C7r 3               @compiling:
0018C7r 3                               ; Run ['] to compile the xt of the next word as a literal.
0018C7r 3  20 rr rr                     jsr xt_bracket_tick
0018CAr 3               
0018CAr 3                               ; Postpone DEFER! by compiling a JSR to it.
0018CAr 3  A0 rr                        ldy #>xt_defer_store
0018CCr 3  A9 rr                        lda #<xt_defer_store
0018CEr 3  20 rr rr                     jsr cmpl_subroutine
0018D1r 3               
0018D1r 3  80 06                        bra @done
0018D3r 3               
0018D3r 3               @interpreting:
0018D3r 3  20 rr rr                     jsr xt_tick
0018D6r 3  20 rr rr                     jsr xt_defer_store
0018D9r 3               @done:
0018D9r 3  60           z_is:           rts
0018DAr 3               
0018DAr 3               
0018DAr 3               
0018DAr 3               ; ## J ( -- n ) (R: n -- n ) "Copy second loop counter to stack"
0018DAr 3               ; ## "j"  auto  ANS core
0018DAr 3                       ; """https://forth-standard.org/standard/core/J
0018DAr 3                       ; Copy second loop counter from Return Stack to stack. Note we use
0018DAr 3                       ; a fudge factor for loop control; see the Control Flow section of
0018DAr 3                       ; the manual for more details.
0018DAr 3                       ; At this point, we have the "I" counter/limit and the LEAVE address
0018DAr 3                       ; on the stack above this (three entries), whereas the ideal Forth
0018DAr 3                       ; implementation would just have two.
0018DAr 3                       ;
0018DAr 3                       ; Make this native compiled for speed
0018DAr 3                       ; """
0018DAr 3               
0018DAr 3               xt_j:
0018DAr 3  CA                           dex
0018DBr 3  CA                           dex
0018DCr 3               
0018DCr 3                               ; Get the fudged index off from the stack. It's easier to
0018DCr 3                               ; do math on the stack directly than to pop and push stuff
0018DCr 3                               ; around
0018DCr 3  86 rr                        stx tmpdsp
0018DEr 3  BA                           tsx
0018DFr 3               
0018DFr 3  38                           sec
0018E0r 3  BD 07 01                     lda $0107,x     ; LSB
0018E3r 3  FD 09 01                     sbc $0109,x
0018E6r 3  A8                           tay
0018E7r 3               
0018E7r 3  BD 08 01                     lda $0108,x     ; MSB
0018EAr 3  FD 0A 01                     sbc $010A,x
0018EDr 3               
0018EDr 3  A6 rr                        ldx tmpdsp
0018EFr 3               
0018EFr 3  95 01                        sta 1,x         ; MSB of de-fudged index
0018F1r 3  94 00                        sty 0,x         ; LSB of de-fudged index
0018F3r 3               
0018F3r 3  60           z_j:            rts
0018F4r 3               
0018F4r 3               
0018F4r 3               
0018F4r 3               ; ## KEY ( -- char ) "Get one character from the input"
0018F4r 3               ; ## "key"  tested  ANS core
0018F4r 3               xt_key:
0018F4r 3                       ; """https://forth-standard.org/standard/core/KEY
0018F4r 3                       ; Get a single character of input from the vectored
0018F4r 3                       ; input without echoing.
0018F4r 3                       ; """
0018F4r 3  20 rr rr                     jsr key_a               ; returns char in A
0018F7r 3               
0018F7r 3  CA                           dex
0018F8r 3  CA                           dex
0018F9r 3  95 00                        sta 0,x
0018FBr 3  74 01                        stz 1,x
0018FDr 3               
0018FDr 3  60           z_key:          rts
0018FEr 3               
0018FEr 3               key_a:
0018FEr 3                       ; The 65c02 doesn't have a JSR (ADDR,X) instruction like the
0018FEr 3                       ; 65816, so we have to fake the indirect jump to vector it.
0018FEr 3                       ; This is depressingly slow. We use this routine internally
0018FEr 3                       ; to avoid manipulating the Data Stack when we just want a
0018FEr 3                       ; character
0018FEr 3  6C rr rr                     jmp (input)             ; JSR/RTS
001901r 3               
001901r 3               
001901r 3               ; ## LATESTNT ( -- nt ) "Push most recent nt to the stack"
001901r 3               ; ## "latestnt"  auto  Tali Forth
001901r 3                       ; """www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001901r 3                       ; The Gforth version of this word is called LATEST
001901r 3                       ; """
001901r 3               xt_latestnt:
001901r 3  CA                           dex
001902r 3  CA                           dex
001903r 3               
001903r 3  20 rr rr                     jsr current_to_dp
001906r 3               
001906r 3  A5 rr                        lda dp
001908r 3  95 00                        sta 0,x
00190Ar 3  A5 rr                        lda dp+1
00190Cr 3  95 01                        sta 1,x
00190Er 3               
00190Er 3  60           z_latestnt:     rts
00190Fr 3               
00190Fr 3               
00190Fr 3               ; ## LATESTXT ( -- xt ) "Push most recent xt to the stack"
00190Fr 3               ; ## "latestxt"  auto  Gforth
00190Fr 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Anonymous-Definitions.html"""
00190Fr 3               xt_latestxt:
00190Fr 3  20 rr rr                     jsr xt_latestnt         ; ( nt )
001912r 3  20 rr rr                     jsr xt_name_to_int      ; ( xt )
001915r 3               
001915r 3  60           z_latestxt:     rts
001916r 3               
001916r 3               
001916r 3               ; ## LEAVE ( -- ) "Leave DO/LOOP construct"
001916r 3               ; ## "leave"  auto  ANS core
001916r 3                       ; """https://forth-standard.org/standard/core/LEAVE
001916r 3                       ; Note that this does not work with anything but a DO/LOOP in
001916r 3                       ; contrast to other versions such as discussed at
001916r 3                       ; http://blogs.msdn.com/b/ashleyf/archive/2011/02/06/loopty-do-i-loop.aspx
001916r 3                       ;
001916r 3                       ;       : LEAVE POSTPONE BRANCH HERE SWAP 0 , ; IMMEDIATE COMPILE-ONLY
001916r 3                       ; See the Control Flow section in the manual for details of how this works.
001916r 3                       ; This must be native compile and not IMMEDIATE
001916r 3                       ; """
001916r 3               
001916r 3               xt_leave:
001916r 3                               ; We dump the limit/start entries off the Return Stack
001916r 3                               ; (four bytes)
001916r 3  68                           pla
001917r 3  68                           pla
001918r 3  68                           pla
001919r 3  68                           pla
00191Ar 3               
00191Ar 3  60                           rts             ; this must be compiled, so keep before z_leave
00191Br 3               z_leave:                        ; not reached, not compiled
00191Br 3               
00191Br 3               
00191Br 3               
00191Br 3               ; ## LEFT_BRACKET ( -- ) "Enter interpretation state"
00191Br 3               ; ## "["  auto  ANS core
00191Br 3                       ; """https://forth-standard.org/standard/core/Bracket
00191Br 3                       ; This is an immediate and compile-only word
00191Br 3                       ; """
00191Br 3               xt_left_bracket:
00191Br 3  64 rr                        stz state
00191Dr 3  64 rr                        stz state+1
00191Fr 3               
00191Fr 3  60           z_left_bracket: rts
001920r 3               
001920r 3               
001920r 3               ; ## LESS_NUMBER_SIGN ( -- ) "Start number conversion"
001920r 3               ; ## "<#"  auto  ANS core
001920r 3                       ; """https://forth-standard.org/standard/core/num-start
001920r 3                       ; Start the process to create pictured numeric output.
001920r 3                       ;
001920r 3                       ; The new
001920r 3                       ; string is constructed from back to front, saving the new character
001920r 3                       ; at the beginning of the output string. Since we use PAD as a
001920r 3                       ; starting address and work backward (!), the string is constructed
001920r 3                       ; in the space between the end of the Dictionary (as defined by CP)
001920r 3                       ; and the PAD. This allows us to satisfy the ANS Forth condition that
001920r 3                       ; programs don't fool around with the PAD but still use its address.
001920r 3                       ; Based on pForth
001920r 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
001920r 3                       ; pForth is in the pubic domain. Forth is : <# PAD HLD ! ; we use the
001920r 3                       ; internal variable tohold instead of HLD.
001920r 3                       ; """
001920r 3               xt_less_number_sign:
001920r 3  20 rr rr                     jsr xt_pad      ; ( addr )
001923r 3               
001923r 3  B5 00                        lda 0,x
001925r 3  85 rr                        sta tohold
001927r 3  B5 01                        lda 1,x
001929r 3  85 rr                        sta tohold+1
00192Br 3               
00192Br 3  E8                           inx
00192Cr 3  E8                           inx
00192Dr 3               
00192Dr 3               z_less_number_sign:
00192Dr 3  60                           rts
00192Er 3               
00192Er 3               ; ## LESS_THAN ( n m -- f ) "Return true if NOS < TOS"
00192Er 3               ; ## "<"  auto  ANS core
00192Er 3                       ; """https://forth-standard.org/standard/core/less"""
00192Er 3               
00192Er 3               xt_less_than:
00192Er 3  20 rr rr                     jsr underflow_2
001931r 3               
001931r 3  A0 00                        ldy #0          ; default false
001933r 3  20 rr rr                     jsr compare_16bit
001936r 3               
001936r 3                               ; for signed numbers, NOS < TOS if Z=0 and N=0
001936r 3  F0 03                        beq @false
001938r 3  30 01                        bmi @false
00193Ar 3               
00193Ar 3                               ; true
00193Ar 3  88                           dey
00193Br 3               @false:
00193Br 3  98                           tya
00193Cr 3               
00193Cr 3  E8                           inx
00193Dr 3  E8                           inx
00193Er 3  95 00                        sta 0,x
001940r 3  95 01                        sta 1,x
001942r 3               
001942r 3  60           z_less_than:    rts
001943r 3               
001943r 3               
001943r 3               
001943r 3               ; ## LIST ( scr# -- ) "List the given screen"
001943r 3               ; ## "list"  tested  ANS block ext
001943r 3                       ; """https://forth-standard.org/standard/block/LIST"""
001943r 3               
001943r 3               xt_list:
001943r 3  20 rr rr                     jsr underflow_1
001946r 3               
001946r 3                               ; Save the screen number in SCR
001946r 3  20 rr rr                     jsr xt_scr
001949r 3  20 rr rr                     jsr xt_store
00194Cr 3               
00194Cr 3                               ; Use L from the editor-wordlist to display the screen.
00194Cr 3  20 rr rr                     jsr xt_editor_l
00194Fr 3               
00194Fr 3  60           z_list:         rts
001950r 3               
001950r 3               
001950r 3               
001950r 3               ; ## LITERAL ( n -- ) "Store TOS to be push on stack during runtime"
001950r 3               ; ## "literal"  auto  ANS core
001950r 3                       ; """https://forth-standard.org/standard/core/LITERAL
001950r 3                       ; Compile-only word to store TOS so that it is pushed on stack
001950r 3                       ; during runtime. This is a immediate, compile-only word. At runtime,
001950r 3                       ; it works by calling literal_runtime by compling JSR LITERAL_RT.
001950r 3                       ;
001950r 3                       ; Note the cmpl_ routines use TMPTOS
001950r 3                       ; """
001950r 3               xt_literal:
001950r 3  20 rr rr                     jsr underflow_1
001953r 3               
001953r 3  A0 rr                        ldy #>literal_runtime
001955r 3  A9 rr                        lda #<literal_runtime
001957r 3  20 rr rr                     jsr cmpl_subroutine
00195Ar 3               
00195Ar 3                               ; Compile the value that is to be pushed on the Stack during
00195Ar 3                               ; runtime
00195Ar 3  20 rr rr                     jsr xt_comma
00195Dr 3               
00195Dr 3  60           z_literal:      rts
00195Er 3               
00195Er 3               literal_runtime:
00195Er 3               
00195Er 3                               ; During runtime, we push the value following this word back
00195Er 3                               ; on the Data Stack. The subroutine jump that brought us
00195Er 3                               ; here put the address to return to on the Return Stack -
00195Er 3                               ; this points to the data we need to get. This routine is
00195Er 3                               ; also called (LITERAL) in some Forths
00195Er 3  CA                           dex
00195Fr 3  CA                           dex
001960r 3               
001960r 3                           	; The 65c02 stores <RETURN-ADDRESS>-1 on the Return Stack,
001960r 3                               ; so we are actually popping the address-1 of the literal
001960r 3  68                           pla             ; LSB
001961r 3  85 rr                        sta tmp1
001963r 3  68                           pla             ; MSB
001964r 3  85 rr                        sta tmp1+1
001966r 3               
001966r 3                               ; Fetch the actual literal value and push it on Data stack
001966r 3  A0 01                        ldy #1
001968r 3  B1 rr                        lda (tmp1),y    ; LSB
00196Ar 3  95 00                        sta 0,x
00196Cr 3  C8                           iny
00196Dr 3  B1 rr                        lda (tmp1),y    ; MSB
00196Fr 3  95 01                        sta 1,x
001971r 3               
001971r 3                               ; Adjust return address and push back on the Return Stack
001971r 3  98                           tya
001972r 3  18                           clc
001973r 3  65 rr                        adc tmp1
001975r 3  A8                           tay
001976r 3  A5 rr                        lda tmp1+1
001978r 3  69 00                        adc #0
00197Ar 3  48                           pha
00197Br 3  5A                           phy
00197Cr 3               
00197Cr 3  60                           rts
00197Dr 3               
00197Dr 3               
00197Dr 3               
00197Dr 3               ; ## LOAD ( scr# -- ) "Load the Forth code in a screen/block"
00197Dr 3               ; ## "load"  auto  ANS block
00197Dr 3                       ; """https://forth-standard.org/standard/block/LOAD
00197Dr 3                       ;
00197Dr 3                       ; Note: LOAD current works because there is only one buffer.
00197Dr 3                       ; If/when multiple buffers are supported, we'll have to deal
00197Dr 3                       ; with the fact that it might re-load the old block into a
00197Dr 3                       ; different buffer.
00197Dr 3                       ; """
00197Dr 3               
00197Dr 3               xt_load:
00197Dr 3  20 rr rr                     jsr underflow_1
001980r 3               
001980r 3                               ; Save the current value of BLK on the return stack.
001980r 3  A0 01                        ldy #blk_offset+1
001982r 3  B1 rr                        lda (up),y
001984r 3  48                           pha
001985r 3  88                           dey
001986r 3  B1 rr                        lda (up),y
001988r 3  48                           pha
001989r 3               
001989r 3                               ; Set BLK to the given block/screen number.
001989r 3  B5 00                        lda 0,x
00198Br 3  91 rr                        sta (up),y
00198Dr 3  C8                           iny
00198Er 3  B5 01                        lda 1,x
001990r 3  91 rr                        sta (up),y
001992r 3               
001992r 3                               ; Load that block into a buffer
001992r 3  20 rr rr                     jsr xt_block
001995r 3               
001995r 3                               ; Put 1024 on the stack for the screen length.
001995r 3  CA                           dex
001996r 3  CA                           dex
001997r 3  A9 04                        lda #4
001999r 3  95 01                        sta 1,x
00199Br 3  74 00                        stz 0,x
00199Dr 3               
00199Dr 3                               ; Jump to a special evluate target. This bypasses the underflow
00199Dr 3                               ; check and skips the zeroing of BLK.
00199Dr 3  20 rr rr                     jsr load_evaluate
0019A0r 3               
0019A0r 3                               ; Restore the value of BLK from before the LOAD command.
0019A0r 3  A0 00                        ldy #blk_offset
0019A2r 3  68                           pla
0019A3r 3  91 rr                        sta (up),y
0019A5r 3  C8                           iny
0019A6r 3  68                           pla
0019A7r 3  91 rr                        sta (up),y
0019A9r 3               
0019A9r 3                               ; If BLK is not zero, read it back into the buffer.
0019A9r 3                               ; A still has MSB
0019A9r 3  88                           dey
0019AAr 3  11 rr                        ora (up),y
0019ACr 3  F0 12                        beq @done
0019AEr 3               
0019AEr 3                               ; The block needs to be read back into the buffer.
0019AEr 3  CA                           dex
0019AFr 3  CA                           dex
0019B0r 3  A0 00                        ldy #blk_offset
0019B2r 3  B1 rr                        lda (up),y
0019B4r 3  95 00                        sta 0,x
0019B6r 3  C8                           iny
0019B7r 3  B1 rr                        lda (up),y
0019B9r 3  95 01                        sta 1,x
0019BBr 3  20 rr rr                     jsr xt_block
0019BEr 3               
0019BEr 3                               ; Drop the buffer address.
0019BEr 3  E8                           inx
0019BFr 3  E8                           inx
0019C0r 3               
0019C0r 3               @done:
0019C0r 3  60           z_load:         rts
0019C1r 3               
0019C1r 3               
0019C1r 3               
0019C1r 3               ; ## LOOP ( -- ) "Finish loop construct"
0019C1r 3               ; ## "loop"  auto  ANS core
0019C1r 3                       ; """https://forth-standard.org/standard/core/LOOP
0019C1r 3                       ; Compile-time part of LOOP. This does nothing more but push 1 on
0019C1r 3                       ; the stack and then call +LOOP.
0019C1r 3                       ;
0019C1r 3                       ; In Forth, this is
0019C1r 3                       ;       : LOOP  POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ;
0019C1r 3                       ;       IMMEDIATE ; COMPILE-ONLY
0019C1r 3                       ; """
0019C1r 3               xt_loop:
0019C1r 3                               ; Have the finished word push 1 on the stack
0019C1r 3  A0 rr                        ldy #>xt_one
0019C3r 3  A9 rr                        lda #<xt_one
0019C5r 3  20 rr rr                     jsr cmpl_subroutine     ; drop through to +LOOP
0019C8r 3               
0019C8r 3               
0019C8r 3               ; ## PLUS_LOOP ( -- ) "Finish loop construct"
0019C8r 3               ; ## "+loop"  auto  ANS core
0019C8r 3                       ; """https://forth-standard.org/standard/core/PlusLOOP
0019C8r 3                       ;
0019C8r 3                       ; Compile-time part of +LOOP, also used for LOOP. Is usually
0019C8r 3                       ;       : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
0019C8r 3                       ;       COMPILE-ONLY
0019C8r 3                       ; in Forth. LOOP uses this routine as well. We jump here with the
0019C8r 3                       ; address for looping as TOS and the address for aborting the loop
0019C8r 3                       ; (LEAVE) as the second double-byte entry on the Return Stack (see
0019C8r 3                       ; DO and the Control Flow section of the manual for details).
0019C8r 3                       ; """
0019C8r 3               
0019C8r 3               xt_plus_loop:
0019C8r 3                               ; Compile the run-time part. We do this with a short loop
0019C8r 3                               ; and not a call to COMPILE, because it has to be natively
0019C8r 3                               ; coded anyway.
0019C8r 3  A0 11                        ldy #plus_loop_runtime_end-plus_loop_runtime
0019CAr 3  5A                           phy             ; save counter to adjust CP
0019CBr 3               @1:
0019CBr 3  B9 rr rr                     lda plus_loop_runtime,y
0019CEr 3  91 rr                        sta (cp),y
0019D0r 3  88                           dey
0019D1r 3  10 F8                        bpl @1
0019D3r 3               
0019D3r 3                               ; Adjust CP
0019D3r 3  68                           pla
0019D4r 3  18                           clc
0019D5r 3  65 rr                        adc cp
0019D7r 3  85 rr                        sta cp
0019D9r 3  A5 rr                        lda cp+1
0019DBr 3  69 00                        adc #0          ; only need carry
0019DDr 3  85 rr                        sta cp+1
0019DFr 3               
0019DFr 3                               ; The address we need to loop back to is TOS. Store it so
0019DFr 3                               ; the runtime part of +LOOP jumps back up there
0019DFr 3  20 rr rr                     jsr xt_comma
0019E2r 3               
0019E2r 3                               ; Compile an UNLOOP for when we're all done. This is a series
0019E2r 3                               ; of six PLA, so we just do it here instead jumping around
0019E2r 3                               ; all over the place
0019E2r 3  A9 68                        lda #$68                ; opcode for PLA
0019E4r 3  A0 06                        ldy #6
0019E6r 3               @2:
0019E6r 3  91 rr                        sta (cp),y
0019E8r 3  88                           dey
0019E9r 3  10 FB                        bpl @2
0019EBr 3               
0019EBr 3                               ; Adjust CP
0019EBr 3  A9 06                        lda #6
0019EDr 3  18                           clc
0019EEr 3  65 rr                        adc cp
0019F0r 3  85 rr                        sta cp
0019F2r 3  A5 rr                        lda cp+1
0019F4r 3  69 00                        adc #0                  ; only need carry
0019F6r 3  85 rr                        sta cp+1
0019F8r 3               
0019F8r 3                               ; Complete compile of DO/?DO by replacing the six
0019F8r 3                               ; dummy bytes by PHA instructions. The address where
0019F8r 3                               ; they are located is on the Data Stack
0019F8r 3  B5 00                        lda 0,x
0019FAr 3  85 rr                        sta tmp1
0019FCr 3  B5 01                        lda 1,x
0019FEr 3  85 rr                        sta tmp1+1
001A00r 3  E8                           inx
001A01r 3  E8                           inx
001A02r 3               
001A02r 3                               ; Because of the way that CP works, we don't have to save
001A02r 3                               ; CP, but CP-1
001A02r 3  A5 rr                        lda cp
001A04r 3  38                           sec
001A05r 3  E9 01                        sbc #1
001A07r 3  85 rr                        sta tmp2
001A09r 3  A5 rr                        lda cp+1
001A0Br 3  E9 00                        sbc #0
001A0Dr 3  85 rr                        sta tmp2+1
001A0Fr 3               
001A0Fr 3                               ; now compile this in the DO/?DO routine
001A0Fr 3  A0 00                        ldy #0
001A11r 3               
001A11r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001A13r 3  91 rr                        sta (tmp1),y
001A15r 3  C8                           iny
001A16r 3  A5 rr                        lda tmp2+1      ; MSB
001A18r 3  91 rr                        sta (tmp1),y
001A1Ar 3  C8                           iny
001A1Br 3  A9 48                        lda #$48        ; Opcode for PHA
001A1Dr 3  91 rr                        sta (tmp1),y
001A1Fr 3  C8                           iny
001A20r 3               
001A20r 3  A9 A9                        lda #$A9        ; opcode for LDA immediate
001A22r 3  91 rr                        sta (tmp1),y
001A24r 3  C8                           iny
001A25r 3  A5 rr                        lda tmp2        ; LSB
001A27r 3  91 rr                        sta (tmp1),y
001A29r 3  C8                           iny
001A2Ar 3  A9 48                        lda #$48        ; Opcode for PHA
001A2Cr 3  91 rr                        sta (tmp1),y
001A2Er 3               z_loop:
001A2Er 3  60           z_plus_loop:    rts
001A2Fr 3               
001A2Fr 3               
001A2Fr 3               plus_loop_runtime:
001A2Fr 3                       ; """Runtime compile for loop control. This is used for both +LOOP and
001A2Fr 3                       ; LOOP which are defined at high level. Note we use a fudge factor for
001A2Fr 3                       ; loop control so we can test with the Overflow Flag. See
001A2Fr 3                       ; the Control Flow section of the manual for details.
001A2Fr 3                       ; The step value is TOS in the loop. This
001A2Fr 3                       ; must always be native compiled. In some Forths, this is a separate
001A2Fr 3                       ; word called (+LOOP) or (LOOP)
001A2Fr 3                       ; """
001A2Fr 3               
001A2Fr 3  18                           clc
001A30r 3  68                           pla             ; LSB of index
001A31r 3  75 00                        adc 0,x         ; LSB of step
001A33r 3  A8                           tay             ; temporary storage of LSB
001A34r 3               
001A34r 3  B8                           clv
001A35r 3  68                           pla             ; MSB of index
001A36r 3  75 01                        adc 1,x         ; MSB of step
001A38r 3  48                           pha             ; put MSB of index back on stack
001A39r 3               
001A39r 3  98                           tya             ; put LSB of index back on stack
001A3Ar 3  48                           pha
001A3Br 3               
001A3Br 3  E8                           inx             ; dump step from TOS
001A3Cr 3  E8                           inx
001A3Dr 3               
001A3Dr 3                               ; If V flag is set, we're done looping and continue
001A3Dr 3                               ; after the +LOOP instruction
001A3Dr 3  70 03                        bvs @hack+3     ; skip over JMP instruction
001A3Fr 3               
001A3Fr 3               @hack:          ; This is why this routine must be natively compiled: We
001A3Fr 3                               ; compile the opcode for JMP here without an address to
001A3Fr 3                               ; go to, which is added by the next next instruction of
001A3Fr 3                               ; LOOP/+LOOP during compile time
001A3Fr 3  4C                           .byte $4C
001A40r 3               
001A40r 3               plus_loop_runtime_end:
001A40r 3               
001A40r 3               
001A40r 3               ; ## LSHIFT ( x u -- u ) "Shift TOS left"
001A40r 3               ; ## "lshift"  auto  ANS core
001A40r 3                       ; """https://forth-standard.org/standard/core/LSHIFT"""
001A40r 3               
001A40r 3               xt_lshift:
001A40r 3  20 rr rr                     jsr underflow_2
001A43r 3               
001A43r 3                               ; max shift 16 times
001A43r 3  B5 00                        lda 0,x
001A45r 3  29 0F                        and #%00001111
001A47r 3  F0 08                        beq @done
001A49r 3               
001A49r 3  A8                           tay
001A4Ar 3               
001A4Ar 3               @loop:
001A4Ar 3  16 02                        asl 2,x
001A4Cr 3  36 03                        rol 3,x
001A4Er 3  88                           dey
001A4Fr 3  D0 F9                        bne @loop
001A51r 3               
001A51r 3               @done:
001A51r 3  E8                           inx
001A52r 3  E8                           inx
001A53r 3               
001A53r 3  60           z_lshift:       rts
001A54r 3               
001A54r 3               
001A54r 3               
001A54r 3               ; ## M_STAR ( n n -- d ) "16 * 16 --> 32"
001A54r 3               ; ## "m*"  auto  ANS core
001A54r 3                       ; """https://forth-standard.org/standard/core/MTimes
001A54r 3                       ; Multiply two 16 bit numbers, producing a 32 bit result. All
001A54r 3                       ; values are signed. Adapted from FIG Forth for Tali Forth.
001A54r 3                       ;
001A54r 3                       ; The original Forth is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;
001A54r 3                       ; with  : D+- O< IF DNEGATE THEN ;
001A54r 3                       ; """
001A54r 3               
001A54r 3               xt_m_star:
001A54r 3  20 rr rr                     jsr underflow_2
001A57r 3               
001A57r 3                               ; figure out the sign
001A57r 3  B5 01                        lda 1,x         ; MSB of n1
001A59r 3  55 03                        eor 3,x         ; MSB of n2
001A5Br 3               
001A5Br 3                               ; UM* uses all kinds of temporary variables so we don't
001A5Br 3                               ; risk a conflict but just take the cycle hit and push
001A5Br 3                               ; this to the stack
001A5Br 3  48                           pha
001A5Cr 3               
001A5Cr 3                               ; get the absolute value of both numbers so we can feed
001A5Cr 3                               ; them to UM*, which does the real work
001A5Cr 3  20 rr rr                     jsr xt_abs
001A5Fr 3  20 rr rr                     jsr xt_swap
001A62r 3  20 rr rr                     jsr xt_abs
001A65r 3               
001A65r 3  20 rr rr                     jsr xt_um_star          ; ( d )
001A68r 3               
001A68r 3                               ; handle the sign
001A68r 3  68                           pla
001A69r 3  10 03                        bpl @done
001A6Br 3               
001A6Br 3  20 rr rr                     jsr xt_dnegate
001A6Er 3               @done:
001A6Er 3  60           z_m_star:       rts
001A6Fr 3               
001A6Fr 3               
001A6Fr 3               
001A6Fr 3               ; ## MARKER ( "name" -- ) "Create a deletion boundry"
001A6Fr 3               ; ## "marker"  auto  ANS core ext
001A6Fr 3                       ; """https://forth-standard.org/standard/core/MARKER
001A6Fr 3                       ; This word replaces FORGET in earlier Forths. Old entries are not
001A6Fr 3                       ; actually deleted, but merely overwritten by restoring CP and DP.
001A6Fr 3                       ; Run the named word at a later time to restore all of the wordlists
001A6Fr 3                       ; to their state when the word was created with marker.  Any words
001A6Fr 3                       ; created after the marker (including the marker) will be forgotten.
001A6Fr 3                       ;
001A6Fr 3                       ; To do this, we want to end up with something that jumps to a
001A6Fr 3                       ; run-time component with a link to the original CP and DP values:
001A6Fr 3                       ;
001A6Fr 3                       ;       jsr marker_runtime
001A6Fr 3                       ;       <Original CP MSB>
001A6Fr 3                       ;       <Original CP LSB>
001A6Fr 3                       ;       <Original DP MSB> ( for CURRENT wordlist )
001A6Fr 3                       ;       <Original DP LSB>
001A6Fr 3                       ;       < USER variables from offset 4 to 39 >
001A6Fr 3                       ;
001A6Fr 3                       ;       The user variables include:
001A6Fr 3                       ;       CURRENT (byte variable)
001A6Fr 3                       ;       <All wordlists> (currently 12) (cell array)
001A6Fr 3                       ;       <#ORDER> (byte variable)
001A6Fr 3                       ;       <All search order> (currently 9) (byte array)
001A6Fr 3                       ;
001A6Fr 3                       ; This code uses tmp1 and tmp2
001A6Fr 3                       ; """
001A6Fr 3               
001A6Fr 3               xt_marker:
001A6Fr 3                               ; Before we do anything, we need to save CP, which
001A6Fr 3                               ; after all is the whole point of this operation. CREATE
001A6Fr 3                               ; uses tmp1 and tmp2, so we take the speed hit and push stuff
001A6Fr 3                               ; to the stack
001A6Fr 3  20 rr rr                     jsr current_to_dp
001A72r 3               
001A72r 3  A5 rr                        lda dp
001A74r 3  48                           pha
001A75r 3  A5 rr                        lda dp+1
001A77r 3  48                           pha
001A78r 3               
001A78r 3  A5 rr                        lda cp
001A7Ar 3  48                           pha
001A7Br 3  A5 rr                        lda cp+1
001A7Dr 3  48                           pha
001A7Er 3               
001A7Er 3  20 rr rr                     jsr xt_create
001A81r 3               
001A81r 3                               ; By default, CREATE installs a subroutine jump to DOVAR, which
001A81r 3                               ; we have to replace by a jump to marker_runtime. We back up
001A81r 3                               ; two bytes and then overwrite the address
001A81r 3  A5 rr                        lda cp          ; LSB
001A83r 3  38                           sec
001A84r 3  E9 02                        sbc #2
001A86r 3  85 rr                        sta cp
001A88r 3               
001A88r 3  A5 rr                        lda cp+1        ; MSB
001A8Ar 3  E9 00                        sbc #0          ; we only care about the borrow
001A8Cr 3  85 rr                        sta cp+1
001A8Er 3               
001A8Er 3                               ; Add the address of the runtime component
001A8Er 3  A0 rr                        ldy #>marker_runtime
001A90r 3  A9 rr                        lda #<marker_runtime
001A92r 3  20 rr rr                     jsr cmpl_word
001A95r 3               
001A95r 3                               ; Add original CP as payload
001A95r 3  7A                           ply                     ; MSB
001A96r 3  68                           pla                     ; LSB
001A97r 3  20 rr rr                     jsr cmpl_word
001A9Ar 3               
001A9Ar 3                               ; Add original DP as payload
001A9Ar 3  7A                           ply                     ; MSB
001A9Br 3  68                           pla                     ; LSB
001A9Cr 3  20 rr rr                     jsr cmpl_word
001A9Fr 3               
001A9Fr 3                               ; Add the user variables for the wordlists and search order.
001A9Fr 3                               ; We're compiling them in byte order.
001A9Fr 3  A0 04                        ldy #4                  ; Start at CURRENT
001AA1r 3               @marker_loop:
001AA1r 3  B1 rr                        lda (up),y
001AA3r 3  20 rr rr                     jsr cmpl_a
001AA6r 3  C8                           iny
001AA7r 3  98                           tya
001AA8r 3  C9 28                        cmp #40                 ; One past the end of the search order.
001AAAr 3  D0 F5                        bne @marker_loop
001AACr 3               
001AACr 3  60           z_marker:       rts
001AADr 3               
001AADr 3               
001AADr 3               
001AADr 3               marker_runtime:
001AADr 3                       ; """Restore Dictionary and memory (DP and CP) to where the were
001AADr 3                       ; when this marker was defined. We arrive here with the return
001AADr 3                       ; address on the Return Stack in the usual 65c02 format
001AADr 3                       ; """
001AADr 3               
001AADr 3                               ; Get the address of the string address off the stack and
001AADr 3                               ; increase by one because of the RTS mechanics
001AADr 3  68                           pla
001AAEr 3  85 rr                        sta tmp1        ; LSB of address
001AB0r 3  68                           pla
001AB1r 3  85 rr                        sta tmp1+1      ; MSB of address
001AB3r 3               
001AB3r 3  E6 rr                        inc tmp1
001AB5r 3  D0 02                        bne @1
001AB7r 3  E6 rr                        inc tmp1+1
001AB9r 3               @1:
001AB9r 3  A0 00                        ldy #0
001ABBr 3               
001ABBr 3                               ; CP was stored first
001ABBr 3  B1 rr                        lda (tmp1),y
001ABDr 3  85 rr                        sta cp
001ABFr 3  C8                           iny
001AC0r 3  B1 rr                        lda (tmp1),y
001AC2r 3  85 rr                        sta cp+1
001AC4r 3               
001AC4r 3                               ; Next was DP
001AC4r 3  C8                           iny
001AC5r 3  B1 rr                        lda (tmp1),y
001AC7r 3  85 rr                        sta dp
001AC9r 3  C8                           iny
001ACAr 3  B1 rr                        lda (tmp1),y
001ACCr 3  85 rr                        sta dp+1
001ACEr 3               
001ACEr 3                               ; Conveniently, the offset into both tmp1 and UP is 4
001ACEr 3                               ; to start restoring the wordlists and search order.
001ACEr 3  A0 04                        ldy #4
001AD0r 3               
001AD0r 3               @marker_restore_loop:
001AD0r 3                               ; Copy from the dictionary back on top of the wordlists
001AD0r 3                               ; and search order.
001AD0r 3  B1 rr                        lda (tmp1), y
001AD2r 3  91 rr                        sta (up), y
001AD4r 3  C8                           iny
001AD5r 3  98                           tya
001AD6r 3  C9 28                        cmp #40                 ; One past the end of the search order.
001AD8r 3  D0 F6                        bne @marker_restore_loop
001ADAr 3               
001ADAr 3  20 rr rr                     jsr dp_to_current       ; Move the CURRENT DP back.
001ADDr 3               
001ADDr 3                               ; The return instruction takes us back to the original caller
001ADDr 3  60                           rts
001ADEr 3               
001ADEr 3               
001ADEr 3               
001ADEr 3               ; ## MAX ( n n -- n ) "Keep larger of two numbers"
001ADEr 3               ; ## "max"  auto  ANS core
001ADEr 3                       ; """https://forth-standard.org/standard/core/MAX
001ADEr 3                       ; Compare TOS and NOS and keep which one is larger. Adapted from
001ADEr 3                       ; Lance A. Leventhal "6502 Assembly Language Subroutines". Negative
001ADEr 3                       ; Flag indicates which number is larger. See also
001ADEr 3                       ; http://6502.org/tutorials/compare_instructions.html and
001ADEr 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001ADEr 3                       ; """
001ADEr 3               
001ADEr 3               xt_max:
001ADEr 3  20 rr rr                     jsr underflow_2
001AE1r 3               
001AE1r 3                               ; Compare LSB. We do this first to set the carry flag
001AE1r 3  B5 00                        lda 0,x         ; LSB of TOS
001AE3r 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets the carry
001AE5r 3               
001AE5r 3  B5 01                        lda 1,x         ; MSB of TOS
001AE7r 3  F5 03                        sbc 3,x         ; MSB of NOS
001AE9r 3  50 02                        bvc @no_overflow
001AEBr 3               
001AEBr 3                               ; handle overflow, because we use signed numbers
001AEBr 3  49 80                        eor #$80        ; complement negative flag
001AEDr 3               
001AEDr 3               @no_overflow:
001AEDr 3                               ; if negative, NOS is larger and needs to be kept
001AEDr 3  30 08                        bmi @keep_nos
001AEFr 3               
001AEFr 3                               ; move TOS to NOS
001AEFr 3  B5 00                        lda 0,x
001AF1r 3  95 02                        sta 2,x
001AF3r 3  B5 01                        lda 1,x
001AF5r 3  95 03                        sta 3,x
001AF7r 3               
001AF7r 3               @keep_nos:
001AF7r 3  E8                           inx
001AF8r 3  E8                           inx
001AF9r 3               
001AF9r 3  60           z_max:          rts
001AFAr 3               
001AFAr 3               
001AFAr 3               
001AFAr 3               ; ## MIN ( n n -- n ) "Keep smaller of two numbers"
001AFAr 3               ; ## "min"  auto  ANS core
001AFAr 3                       ; """https://forth-standard.org/standard/core/MIN
001AFAr 3                       ; Adapted from Lance A. Leventhal "6502 Assembly Language
001AFAr 3                       ; Subroutines." Negative Flag indicateds which number is larger. See
001AFAr 3                       ; http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
001AFAr 3                       ; """
001AFAr 3               
001AFAr 3               xt_min:
001AFAr 3  20 rr rr                     jsr underflow_2
001AFDr 3               
001AFDr 3                               ; compare LSB. We do this first to set the carry flag
001AFDr 3  B5 00                        lda 0,x         ; LSB of TOS
001AFFr 3  D5 02                        cmp 2,x         ; LSB of NOS, this sets carry
001B01r 3               
001B01r 3  B5 01                        lda 1,x         ; MSB of TOS
001B03r 3  F5 03                        sbc 3,x         ; MSB of NOS
001B05r 3  50 02                        bvc @no_overflow
001B07r 3               
001B07r 3                               ; handle overflow because we use signed numbers
001B07r 3  49 80                        eor #$80
001B09r 3               
001B09r 3               @no_overflow:
001B09r 3                               ; if negative, NOS is larger and needs to be dumped
001B09r 3  10 08                        bpl @keep_nos
001B0Br 3               
001B0Br 3                               ; move TOS to NOS
001B0Br 3  B5 00                        lda 0,x
001B0Dr 3  95 02                        sta 2,x
001B0Fr 3  B5 01                        lda 1,x
001B11r 3  95 03                        sta 3,x
001B13r 3               
001B13r 3               @keep_nos:
001B13r 3  E8                           inx
001B14r 3  E8                           inx
001B15r 3               
001B15r 3  60           z_min:          rts
001B16r 3               
001B16r 3               
001B16r 3               
001B16r 3               ; ## MINUS ( n n -- n ) "Subtract TOS from NOS"
001B16r 3               ; ## "-"  auto  ANS core
001B16r 3                       ; """https://forth-standard.org/standard/core/Minus"""
001B16r 3               xt_minus:
001B16r 3  20 rr rr                     jsr underflow_2
001B19r 3               
001B19r 3  38                           sec
001B1Ar 3  B5 02                        lda 2,x         ; LSB
001B1Cr 3  F5 00                        sbc 0,x
001B1Er 3  95 02                        sta 2,x
001B20r 3               
001B20r 3  B5 03                        lda 3,x         ; MSB
001B22r 3  F5 01                        sbc 1,x
001B24r 3  95 03                        sta 3,x
001B26r 3               
001B26r 3  E8                           inx
001B27r 3  E8                           inx
001B28r 3               
001B28r 3  60           z_minus:        rts
001B29r 3               
001B29r 3               
001B29r 3               ; ## MINUS_LEADING ( addr1 u1 -- addr2 u2 ) "Remove leading spaces"
001B29r 3               ; ## "-leading"  auto  Tali String
001B29r 3                       ; """Remove leading whitespace. This is the reverse of -TRAILING
001B29r 3                       ; """
001B29r 3               
001B29r 3               xt_minus_leading:
001B29r 3  20 rr rr                     jsr underflow_2
001B2Cr 3               
001B2Cr 3               @loop:
001B2Cr 3                               ; Quit if we were given an empty string. This also terminates
001B2Cr 3                               ; the main loop
001B2Cr 3  B5 00                        lda 0,x
001B2Er 3  15 01                        ora 1,x
001B30r 3  F0 0F                        beq @done
001B32r 3               
001B32r 3  A1 02                        lda (2,x)               ; get first character
001B34r 3  20 rr rr                     jsr is_whitespace
001B37r 3  90 08                        bcc @done
001B39r 3               
001B39r 3                               ; It's whitespace, move one down
001B39r 3  20 rr rr                     jsr xt_one              ; ( addr u 1 )
001B3Cr 3  20 rr rr                     jsr xt_slash_string     ; ( addr+ u-1 )
001B3Fr 3               
001B3Fr 3  80 EB                        bra @loop
001B41r 3               @done:
001B41r 3               z_minus_leading:
001B41r 3  60                           rts
001B42r 3               
001B42r 3               
001B42r 3               
001B42r 3               ; ## MINUS_TRAILING ( addr u1 -- addr u2 ) "Remove trailing spaces"
001B42r 3               ; ## "-trailing"  auto  ANS string
001B42r 3                       ; """https://forth-standard.org/standard/string/MinusTRAILING
001B42r 3                       ; Remove trailing spaces
001B42r 3                       ; """
001B42r 3               
001B42r 3               xt_minus_trailing:
001B42r 3  20 rr rr                     jsr underflow_2
001B45r 3               
001B45r 3                               ; if length entry is zero, return a zero and leave the
001B45r 3                               ; address part untouched
001B45r 3  B5 00                        lda 0,x         ; LSB of n
001B47r 3  15 01                        ora 1,x         ; MSB of n
001B49r 3  F0 33                        beq @done
001B4Br 3               
001B4Br 3                               ; Compute address of last char in tmp1 as
001B4Br 3                               ; addr + u1 - 1
001B4Br 3               
001B4Br 3                               ; addr + u1
001B4Br 3  18                           clc
001B4Cr 3  B5 02                        lda 2,x         ; LSB of addr
001B4Er 3  75 00                        adc 0,x
001B50r 3  85 rr                        sta tmp1
001B52r 3  B5 03                        lda 3,x         ; MSB of addr
001B54r 3  75 01                        adc 1,x
001B56r 3  85 rr                        sta tmp1+1
001B58r 3               
001B58r 3                               ; - 1
001B58r 3  A5 rr                        lda tmp1
001B5Ar 3  D0 02                        bne @1
001B5Cr 3  C6 rr                        dec tmp1+1
001B5Er 3               @1:
001B5Er 3  C6 rr                        dec tmp1
001B60r 3               
001B60r 3               @loop:
001B60r 3                               ; While spaces are found, move tmp1 backwards and
001B60r 3                               ; decrease the count on the data stack.
001B60r 3  B2 rr                        lda (tmp1)
001B62r 3  C9 20                        cmp #AscSP
001B64r 3  D0 18                        bne @done
001B66r 3               
001B66r 3                               ; Move back one address.
001B66r 3  A5 rr                        lda tmp1
001B68r 3  D0 02                        bne @2
001B6Ar 3  C6 rr                        dec tmp1+1
001B6Cr 3               @2:
001B6Cr 3  C6 rr                        dec tmp1
001B6Er 3               
001B6Er 3                               ; Decrement count by one.
001B6Er 3  B5 00                        lda 0,x
001B70r 3  D0 02                        bne @3
001B72r 3  D6 01                        dec 1,x
001B74r 3               @3:
001B74r 3  D6 00                        dec 0,x
001B76r 3               
001B76r 3                               ; Check if there are any characters left.
001B76r 3  B5 00                        lda 0,x
001B78r 3  15 01                        ora 1,x
001B7Ar 3  F0 02                        beq @done       ; Count has reached zero - we're done!
001B7Cr 3               
001B7Cr 3  80 E2                        bra @loop
001B7Er 3               
001B7Er 3               @done:
001B7Er 3               z_minus_trailing:
001B7Er 3  60                           rts
001B7Fr 3               
001B7Fr 3               
001B7Fr 3               
001B7Fr 3               ; ## MOD ( n1 n2 -- n ) "Divide NOS by TOS and return the remainder"
001B7Fr 3               ; ## "mod"  auto  ANS core
001B7Fr 3                       ; """https://forth-standard.org/standard/core/MOD
001B7Fr 3                       ;
001B7Fr 3                       ; The Forth definition of this word is  : MOD /MOD DROP ;
001B7Fr 3                       ; so we just jump to xt_slash_mod and dump the actual result.
001B7Fr 3                       ; """
001B7Fr 3               xt_mod:
001B7Fr 3  20 rr rr                     jsr underflow_2
001B82r 3               
001B82r 3  20 rr rr                     jsr xt_slash_mod
001B85r 3               
001B85r 3  E8                           inx             ; DROP
001B86r 3  E8                           inx
001B87r 3               z_mod:
001B87r 3  60                           rts
001B88r 3               
001B88r 3               
001B88r 3               ; ## MOVE ( addr1 addr2 u -- ) "Copy bytes"
001B88r 3               ; ## "move"  auto  ANS core
001B88r 3                       ; """https://forth-standard.org/standard/core/MOVE
001B88r 3                       ; Copy u "address units" from addr1 to addr2. Since our address
001B88r 3                       ; units are bytes, this is just a front-end for CMOVE and CMOVE>. This
001B88r 3                       ; is actually the only one of these three words that is in the CORE
001B88r 3                       ; set.
001B88r 3                       ;
001B88r 3                       ; This word must not be natively compiled.
001B88r 3                       ; """
001B88r 3               
001B88r 3               xt_move:
001B88r 3                               ; We let CMOVE and CMOVE> check if there is underflow or
001B88r 3                               ; we've been told to copy zero bytes
001B88r 3               
001B88r 3                               ; compare MSB first
001B88r 3  B5 03                        lda 3,x                 ; MSB of addr2
001B8Ar 3  D5 05                        cmp 5,x                 ; MSB of addr1
001B8Cr 3  F0 05                        beq @lsb                ; wasn't helpful, move to LSB
001B8Er 3  B0 0E                        bcs @to_move_up         ; we want CMOVE>
001B90r 3               
001B90r 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001B93r 3               
001B93r 3               @lsb:
001B93r 3                               ; MSB were equal, so do the whole thing over with LSB
001B93r 3  B5 02                        lda 2,x                 ; LSB of addr2
001B95r 3  D5 04                        cmp 4,x                 ; LSB of addr1
001B97r 3  F0 08                        beq @equal              ; LSB is equal as well
001B99r 3  B0 03                        bcs @to_move_up         ; we want CMOVE>
001B9Br 3               
001B9Br 3  4C rr rr                     jmp xt_cmove            ; JSR/RTS
001B9Er 3               
001B9Er 3               @to_move_up:
001B9Er 3  4C rr rr                     jmp xt_cmove_up         ; JSR/RTS
001BA1r 3               @equal:
001BA1r 3                               ; drop three entries from Data Stack
001BA1r 3  8A                           txa
001BA2r 3  18                           clc
001BA3r 3  69 06                        adc #6
001BA5r 3  AA                           tax
001BA6r 3               
001BA6r 3  60           z_move:         rts
001BA7r 3               
001BA7r 3               
001BA7r 3               
001BA7r 3               ; ## NAME_TO_INT ( nt -- xt ) "Convert Name Token to Execute Token"
001BA7r 3               ; ## "name>int"  tested  Gforth
001BA7r 3                       ; """See
001BA7r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
001BA7r 3                       ; """
001BA7r 3               
001BA7r 3               xt_name_to_int:
001BA7r 3  20 rr rr                     jsr underflow_1
001BAAr 3               
001BAAr 3                               ; The xt starts four bytes down from the nt
001BAAr 3  B5 00                        lda 0,x
001BACr 3  18                           clc
001BADr 3  69 04                        adc #4
001BAFr 3  85 rr                        sta tmp3
001BB1r 3               
001BB1r 3  B5 01                        lda 1,x
001BB3r 3  90 01                        bcc @done
001BB5r 3  1A                           inc
001BB6r 3               @done:
001BB6r 3  85 rr                        sta tmp3+1
001BB8r 3               
001BB8r 3  A0 00                        ldy #0
001BBAr 3  B1 rr                        lda (tmp3),y
001BBCr 3  95 00                        sta 0,x
001BBEr 3  C8                           iny
001BBFr 3  B1 rr                        lda (tmp3),y
001BC1r 3  95 01                        sta 1,x
001BC3r 3               
001BC3r 3  60           z_name_to_int:  rts
001BC4r 3               
001BC4r 3               
001BC4r 3               
001BC4r 3               ; ## NAME_TO_STRING ( nt -- addr u ) "Given a name token, return string of word"
001BC4r 3               ; ## "name>string"  tested  Gforth
001BC4r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html"""
001BC4r 3               
001BC4r 3               xt_name_to_string:
001BC4r 3  20 rr rr                     jsr underflow_1
001BC7r 3               
001BC7r 3  CA                           dex
001BC8r 3  CA                           dex
001BC9r 3               
001BC9r 3                               ; the length of the string is the first byte of the
001BC9r 3                               ; header pointed to by nt
001BC9r 3  A1 02                        lda (2,x)
001BCBr 3  95 00                        sta 0,x
001BCDr 3  74 01                        stz 1,x
001BCFr 3               
001BCFr 3                               ; the string itself always starts eight bytes down
001BCFr 3  B5 02                        lda 2,x         ; LSB
001BD1r 3  18                           clc
001BD2r 3  69 08                        adc #8
001BD4r 3  A8                           tay
001BD5r 3  B5 03                        lda 3,x         ; MSB
001BD7r 3  69 00                        adc #0          ; just need carry
001BD9r 3  95 03                        sta 3,x
001BDBr 3  94 02                        sty 2,x
001BDDr 3               
001BDDr 3               z_name_to_string:
001BDDr 3  60                           rts
001BDEr 3               
001BDEr 3               
001BDEr 3               ; ## NC_LIMIT ( -- addr ) "Return address where NC-LIMIT value is kept"
001BDEr 3               ; ## "nc-limit"  tested  Tali Forth
001BDEr 3               
001BDEr 3               xt_nc_limit:
001BDEr 3  CA                           dex
001BDFr 3  CA                           dex
001BE0r 3  A9 rr                        lda #<nc_limit
001BE2r 3  95 00                        sta 0,x
001BE4r 3  A9 rr                        lda #>nc_limit
001BE6r 3  95 01                        sta 1,x
001BE8r 3               
001BE8r 3  60           z_nc_limit:     rts
001BE9r 3               
001BE9r 3               
001BE9r 3               
001BE9r 3               ; ## NEGATE ( n -- n ) "Two's complement"
001BE9r 3               ; ## "negate"  auto  ANS core
001BE9r 3                       ; """https://forth-standard.org/standard/core/NEGATE"""
001BE9r 3               xt_negate:
001BE9r 3  20 rr rr                     jsr underflow_1
001BECr 3               
001BECr 3  A9 00                	lda #0
001BEEr 3  38                           sec
001BEFr 3  F5 00                        sbc 0,x         ; LSB
001BF1r 3  95 00                        sta 0,x
001BF3r 3               
001BF3r 3  A9 00                        lda #0
001BF5r 3  F5 01                        sbc 1,x         ; MSB
001BF7r 3  95 01                        sta 1,x
001BF9r 3               
001BF9r 3  60           z_negate:       rts
001BFAr 3               
001BFAr 3               
001BFAr 3               ; ## NEVER_NATIVE ( -- ) "Flag last word as never natively compiled"
001BFAr 3               ; ## "never-native"  auto  Tali Forth
001BFAr 3               xt_never_native:
001BFAr 3  20 rr rr                     jsr current_to_dp
001BFDr 3  A0 01                        ldy #1          ; offset for status byte
001BFFr 3  B1 rr                        lda (dp),y
001C01r 3  09 08                        ora #NN         ; Make sure NN flag is set
001C03r 3  29 FD                        and #$ff-AN     ; and AN flag is clear.
001C05r 3  91 rr                        sta (dp),y
001C07r 3               z_never_native:
001C07r 3  60                           rts
001C08r 3               
001C08r 3               
001C08r 3               ; ## NIP ( b a -- a ) "Delete NOS"
001C08r 3               ; ## "nip"  auto  ANS core ext
001C08r 3                       ; """https://forth-standard.org/standard/core/NIP"""
001C08r 3               xt_nip:
001C08r 3  20 rr rr                     jsr underflow_2
001C0Br 3               
001C0Br 3  B5 00                        lda 0,x         ; LSB
001C0Dr 3  95 02                        sta 2,x
001C0Fr 3  B5 01                        lda 1,x         ; MSB
001C11r 3  95 03                        sta 3,x
001C13r 3               
001C13r 3  E8                           inx
001C14r 3  E8                           inx
001C15r 3               
001C15r 3  60           z_nip:          rts
001C16r 3               
001C16r 3               
001C16r 3               ; ## NOT_EQUALS ( n m -- f ) "Return a true flag if TOS != NOS"
001C16r 3               ; ## "<>"  auto  ANS core ext
001C16r 3                       ; """https://forth-standard.org/standard/core/ne
001C16r 3                       ;
001C16r 3                       ; This is just a variant of EQUAL, we code it separately
001C16r 3                       ; for speed.
001C16r 3                       ; """
001C16r 3               
001C16r 3               xt_not_equals:
001C16r 3  20 rr rr                     jsr underflow_2
001C19r 3               
001C19r 3  A0 00                        ldy #0                  ; default is true
001C1Br 3               
001C1Br 3  B5 00                        lda 0,x                 ; LSB
001C1Dr 3  D5 02                        cmp 2,x
001C1Fr 3  D0 0A                        bne @not_equal
001C21r 3               
001C21r 3                               ; LSB is equal
001C21r 3  B5 01                        lda 1,x                 ; MSB
001C23r 3  D5 03                        cmp 3,x
001C25r 3  D0 04                        bne @not_equal
001C27r 3               
001C27r 3  A9 FF                        lda #$FF
001C29r 3  80 01                        bra @done
001C2Br 3               
001C2Br 3               @not_equal:
001C2Br 3  88                           dey                     ; drop thru to done
001C2Cr 3               
001C2Cr 3               @done:
001C2Cr 3  98                           tya
001C2Dr 3  E8                           inx
001C2Er 3  E8                           inx
001C2Fr 3  95 00                        sta 0,x
001C31r 3  95 01                        sta 1,x
001C33r 3               
001C33r 3  60           z_not_equals:   rts
001C34r 3               
001C34r 3               
001C34r 3               
001C34r 3               ; ## NOT_ROTE ( a b c -- c a b ) "Rotate upwards"
001C34r 3               ; ## "-rot"  auto  Gforth
001C34r 3                       ; """http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Data-stack.html"""
001C34r 3               
001C34r 3               xt_not_rote:
001C34r 3  20 rr rr                     jsr underflow_3
001C37r 3               
001C37r 3  B4 01                        ldy 1,x         ; MSB first
001C39r 3  B5 03                        lda 3,x
001C3Br 3  95 01                        sta 1,x
001C3Dr 3               
001C3Dr 3  B5 05                        lda 5,x
001C3Fr 3  95 03                        sta 3,x
001C41r 3  94 05                        sty 5,x
001C43r 3               
001C43r 3  B4 00                        ldy 0,x         ; LSB second
001C45r 3  B5 02                        lda 2,x
001C47r 3  95 00                        sta 0,x
001C49r 3               
001C49r 3  B5 04                        lda 4,x
001C4Br 3  95 02                        sta 2,x
001C4Dr 3  94 04                        sty 4,x
001C4Fr 3               
001C4Fr 3  60           z_not_rote:     rts
001C50r 3               
001C50r 3               
001C50r 3               
001C50r 3               ; ## NUMBER ( addr u -- u | d ) "Convert a number string"
001C50r 3               ; ## "number"  auto  Tali Forth
001C50r 3                       ; """Convert a number string to a double or single cell number. This
001C50r 3                       ; is a wrapper for >NUMBER and follows the convention set out in the
001C50r 3                       ; "Forth Programmer's Handbook" (Conklin & Rather) 3rd edition p. 87.
001C50r 3                       ; Based in part on the "Starting Forth" code
001C50r 3                       ; https://www.forth.com/starting-forth/10-input-output-operators/
001C50r 3                       ; Gforth uses S>NUMBER? and S>UNUMBER? which return numbers and a flag
001C50r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
001C50r 3                       ; Another difference to Gforth is that we follow ANS Forth that the
001C50r 3                       ; dot to signal a double cell number is required to be the last
001C50r 3                       ; character of the string.
001C50r 3                       ;
001C50r 3                       ; Number calls >NUMBER which in turn calls UM*,
001C50r 3                       ; which uses tmp1, tmp2, and tmp3, so we can't use them here, which is
001C50r 3                       ; a pain.
001C50r 3                       ;"""
001C50r 3               
001C50r 3               xt_number:
001C50r 3  20 rr rr                     jsr underflow_2
001C53r 3               
001C53r 3                               ; we keep the flags for sign and double in tmpdsp because
001C53r 3                               ; we've run out of temporary variables
001C53r 3  64 rr                        stz tmpdsp      ; flag for double
001C55r 3  64 rr                        stz tmpdsp+1    ; flag for minus
001C57r 3               
001C57r 3                               ; If the first character is a minus, strip it off and set
001C57r 3                               ; the flag
001C57r 3  A1 02                        lda (2,x)
001C59r 3  C9 2D                        cmp #$2D        ; ASCII for "-"
001C5Br 3  D0 0A                        bne @check_dot
001C5Dr 3               
001C5Dr 3                               ; It's a minus
001C5Dr 3  C6 rr                        dec tmpdsp+1
001C5Fr 3  F6 02                        inc 2,x         ; start one character later
001C61r 3  D0 02                        bne @1
001C63r 3  F6 03                        inc 3,x
001C65r 3               @1:
001C65r 3  D6 00                        dec 0,x         ; decrease string length by one
001C67r 3               
001C67r 3               @check_dot:
001C67r 3                               ; If the last character is a dot, strip it off and set a
001C67r 3                               ; flag. We can use tmptos as a temporary variable
001C67r 3  B5 02                        lda 2,x         ; LSB of address
001C69r 3  18                           clc
001C6Ar 3  75 00                        adc 0,x         ; length of string
001C6Cr 3  85 rr                        sta tmptos
001C6Er 3  B5 03                        lda 3,x
001C70r 3  69 00                        adc #0          ; only need carry
001C72r 3  85 rr                        sta tmptos+1
001C74r 3               
001C74r 3                               ; tmptos now points to the first character after the string,
001C74r 3                               ; but we need the last character
001C74r 3  A5 rr                        lda tmptos
001C76r 3  D0 02                        bne @2
001C78r 3  C6 rr                        dec tmptos+1
001C7Ar 3               @2:
001C7Ar 3  C6 rr                        dec tmptos
001C7Cr 3               
001C7Cr 3  B2 rr                        lda (tmptos)
001C7Er 3  C9 2E                        cmp #'.'
001C80r 3  D0 04                        bne @main
001C82r 3               
001C82r 3                               ; We have a dot, which means this is a double number. Flag
001C82r 3                               ; the fact and reduce string length by one
001C82r 3  C6 rr                        dec tmpdsp
001C84r 3  D6 00                        dec 0,x
001C86r 3               
001C86r 3               @main:
001C86r 3                               ; Set up stack for subroutine jump to >NUMBER, which means
001C86r 3                               ; we have to go ( addr u --> ud addr u )
001C86r 3  CA                           dex
001C87r 3  CA                           dex
001C88r 3  CA                           dex
001C89r 3  CA                           dex
001C8Ar 3               
001C8Ar 3  B5 04                        lda 4,x         ; LSB of length
001C8Cr 3  95 00                        sta 0,x
001C8Er 3  74 01                        stz 1,x         ; MSB, max length 255 chars
001C90r 3               
001C90r 3  B5 06                        lda 6,x         ; LSB of address
001C92r 3  95 02                        sta 2,x
001C94r 3  B5 07                        lda 7,x         ; MSB of address
001C96r 3  95 03                        sta 3,x
001C98r 3               
001C98r 3  74 04                        stz 4,x         ; clear space for ud
001C9Ar 3  74 05                        stz 5,x
001C9Cr 3  74 06                        stz 6,x
001C9Er 3  74 07                        stz 7,x
001CA0r 3               
001CA0r 3  20 rr rr                     jsr xt_to_number        ; (ud addr u -- ud addr u )
001CA3r 3               
001CA3r 3                               ; test length of returned string, which should be zero
001CA3r 3  B5 00                        lda 0,x
001CA5r 3  F0 15                        beq @all_converted
001CA7r 3               
001CA7r 3                               ; Something went wrong, we still have characters left over,
001CA7r 3                               ; so we print an error and abort. If the NUMBER was called
001CA7r 3                               ; by INTERPRET, we've already checked for Forth words, so
001CA7r 3                               ; we're in deep trouble one way or another
001CA7r 3  A9 3E                        lda #$3E        ; ASCII for ">"
001CA9r 3  20 rr rr                     jsr emit_a
001CACr 3  20 rr rr                     jsr xt_type
001CAFr 3  A9 3C                        lda #$3C        ; ASCII for "<"
001CB1r 3  20 rr rr                     jsr emit_a
001CB4r 3  20 rr rr                     jsr xt_space
001CB7r 3               
001CB7r 3  A9 08                        lda #err_syntax
001CB9r 3  4C rr rr                     jmp error
001CBCr 3               
001CBCr 3               @all_converted:
001CBCr 3                               ; We can drop the string info
001CBCr 3  E8                           inx
001CBDr 3  E8                           inx
001CBEr 3  E8                           inx
001CBFr 3  E8                           inx
001CC0r 3               
001CC0r 3                               ; We have a double-cell number on the Data Stack that might
001CC0r 3                               ; actually have a minus and might actually be single-cell
001CC0r 3  A5 rr                        lda tmpdsp      ; flag for double
001CC2r 3  F0 0D                        beq @single
001CC4r 3               
001CC4r 3                               ; Set status bit 5 to indicate this is a double number
001CC4r 3  A9 20                        lda #%00100000
001CC6r 3  04 rr                        tsb status
001CC8r 3               
001CC8r 3                               ; This is a double cell number. If it had a minus, we'll have
001CC8r 3                               ; to negate it
001CC8r 3  A5 rr                        lda tmpdsp+1
001CCAr 3  F0 12                        beq @done       ; no minus, all done
001CCCr 3               
001CCCr 3  20 rr rr                     jsr xt_dnegate
001CCFr 3               
001CCFr 3  80 0D                        bra @done
001CD1r 3               
001CD1r 3               @single:
001CD1r 3                               ; This is a single number, so we just drop the top cell
001CD1r 3  E8                           inx
001CD2r 3  E8                           inx
001CD3r 3               
001CD3r 3                               ; Clear status bit 5 to indicate this is a single number
001CD3r 3  A9 20                        lda #%00100000
001CD5r 3  14 rr                        trb status
001CD7r 3               
001CD7r 3                               ; If we had a minus, we'll have to negate it
001CD7r 3  A5 rr                        lda tmpdsp+1
001CD9r 3  F0 03                        beq @done       ; no minus, all done
001CDBr 3               
001CDBr 3  20 rr rr                     jsr xt_negate
001CDEr 3               @done:
001CDEr 3  60           z_number:       rts
001CDFr 3               
001CDFr 3               
001CDFr 3               
001CDFr 3               ; ## NUMBER_SIGN ( ud -- ud ) "Add character to pictured output string"
001CDFr 3               ; ## "#"  auto  ANS core
001CDFr 3                       ; """https://forth-standard.org/standard/core/num
001CDFr 3                       ; Add one char to the beginning of the pictured output string.
001CDFr 3                       ;
001CDFr 3                       ; Based on
001CDFr 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001CDFr 3                       ; Forth code  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
001CDFr 3                       ; """
001CDFr 3               xt_number_sign:
001CDFr 3  20 rr rr                     jsr underflow_2         ; double number
001CE2r 3               
001CE2r 3  20 rr rr                     jsr xt_base
001CE5r 3  20 rr rr                     jsr xt_fetch            ; ( ud1 base )
001CE8r 3               
001CE8r 3                               ; The following code is the ancient Forth word UD/MOD, which in
001CE8r 3                               ; various Forths (including Gforth) lives on under the hood,
001CE8r 3                               ; even though it's not an ANS standard word, it doesn't appear
001CE8r 3                               ; in the docs, it's only used here, and there are no tests for
001CE8r 3                               ; it. This is why we got rid of it. We'll be converting this
001CE8r 3                               ; mess to something more sane in the long run.
001CE8r 3  20 rr rr                     jsr xt_to_r             ; >r
001CEBr 3  20 rr rr                     jsr xt_zero             ; 0
001CEEr 3  20 rr rr                     jsr xt_r_fetch          ; r@
001CF1r 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001CF4r 3  20 rr rr                     jsr xt_rot              ; rot
001CF7r 3  20 rr rr                     jsr xt_rot              ; rot
001CFAr 3  20 rr rr                     jsr xt_r_from           ; r>
001CFDr 3  20 rr rr                     jsr xt_um_slash_mod     ; um/mod
001D00r 3  20 rr rr                     jsr xt_rot              ; rot
001D03r 3                               ; end of UD/MOD ( rem ud )
001D03r 3               
001D03r 3  20 rr rr                     jsr xt_rot              ; ( ud rem )
001D06r 3               
001D06r 3                               ; Convert the number that is left over to an ASCII character. We
001D06r 3                               ; use a string lookup for speed. Use either abc_str_lower for
001D06r 3                               ; lower case or abc_str_upper for upper case (prefered)
001D06r 3  B5 00                        lda 0,x
001D08r 3  A8                           tay
001D09r 3  B9 rr rr                     lda s_abc_upper,y
001D0Cr 3  95 00                        sta 0,x
001D0Er 3  74 01                        stz 1,x                 ; paranoid; now ( ud char )
001D10r 3               
001D10r 3  20 rr rr                     jsr xt_hold
001D13r 3               
001D13r 3               z_number_sign:
001D13r 3  60                           rts
001D14r 3               
001D14r 3               
001D14r 3               ; ## NUMBER_SIGN_GREATER ( d -- addr u ) "Finish pictured number conversion"
001D14r 3               ; ## "#>"  auto  ANS core
001D14r 3                       ; """https://forth-standard.org/standard/core/num-end
001D14r 3                       ; Finish conversion of pictured number string, putting address and
001D14r 3                       ; length on the Data Stack.
001D14r 3                       ;
001D14r 3                       ; Original Fort is  2DROP HLD @ PAD OVER -
001D14r 3                       ; Based on
001D14r 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
001D14r 3                       ; """
001D14r 3               xt_number_sign_greater:
001D14r 3               
001D14r 3  20 rr rr                     jsr underflow_2         ; double number
001D17r 3               
001D17r 3                               ; The start address lives in tohold
001D17r 3  A5 rr                        lda tohold
001D19r 3  95 00                        sta 0,x         ; LSB of tohold
001D1Br 3  95 02                        sta 2,x
001D1Dr 3  A5 rr                        lda tohold+1
001D1Fr 3  95 01                        sta 1,x         ; MSB of addr
001D21r 3  95 03                        sta 3,x         ; ( addr addr )
001D23r 3               
001D23r 3                               ; The length of the string is pad - addr
001D23r 3  20 rr rr                     jsr xt_pad      ; ( addr addr pad )
001D26r 3               
001D26r 3  38                           sec
001D27r 3  B5 00                        lda 0,x         ; LSB of pad address
001D29r 3  F5 02                        sbc 2,x
001D2Br 3  95 02                        sta 2,x
001D2Dr 3               
001D2Dr 3  B5 01                        lda 1,x         ; MSB, which should always be zero
001D2Fr 3  F5 03                        sbc 3,x
001D31r 3  95 03                        sta 3,x         ; ( addr u pad )
001D33r 3               
001D33r 3  E8                           inx
001D34r 3  E8                           inx
001D35r 3               
001D35r 3               z_number_sign_greater:
001D35r 3  60                           rts
001D36r 3               
001D36r 3               
001D36r 3               ; ## NUMBER_SIGN_S ( d -- addr u ) "Completely convert pictured output"
001D36r 3               ; ## "#s"  auto  ANS core
001D36r 3                       ; """https://forth-standard.org/standard/core/numS
001D36r 3                       ; Completely convert number for pictured numerical output.
001D36r 3                       ;
001D36r 3                       ; Based on
001D36r 3                       ; https://github.com/philburk/pforth/blob/master/fth/system.fth
001D36r 3                       ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
001D36r 3                       ; """
001D36r 3               
001D36r 3               xt_number_sign_s:
001D36r 3  20 rr rr                     jsr underflow_2
001D39r 3               @loop:
001D39r 3                               ; convert a single number ("#")
001D39r 3  20 rr rr                     jsr xt_number_sign
001D3Cr 3               
001D3Cr 3                               ; stop when double-celled number in TOS is zero:
001D3Cr 3  B5 00                        lda 0,x
001D3Er 3  15 01                        ora 1,x
001D40r 3  15 02                        ora 2,x
001D42r 3  15 03                        ora 3,x
001D44r 3  D0 F3                        bne @loop
001D46r 3               
001D46r 3               z_number_sign_s:
001D46r 3  60                           rts
001D47r 3               
001D47r 3               
001D47r 3               
001D47r 3               ; ## OF (C: -- of-sys) (x1 x2 -- |x1) "Conditional flow control"
001D47r 3               ; ## "of"  auto  ANS core ext
001D47r 3                       ; """http://forth-standard.org/standard/core/OF"""
001D47r 3               
001D47r 3               xt_of:
001D47r 3                               ; Check if value is equal to this case.
001D47r 3                               ; Postpone over (eg. compile a jsr to it)
001D47r 3  A0 rr                        ldy #>xt_over
001D49r 3  A9 rr                        lda #<xt_over
001D4Br 3  20 rr rr                     jsr cmpl_subroutine
001D4Er 3               
001D4Er 3                               ; Postpone = (EQUAL), that is, compile a jsr to it
001D4Er 3  A0 rr                        ldy #>xt_equal
001D50r 3  A9 rr                        lda #<xt_equal
001D52r 3  20 rr rr                     jsr cmpl_subroutine
001D55r 3               
001D55r 3  20 rr rr                     jsr xt_if
001D58r 3               
001D58r 3                               ; If it's true, consume the original value.
001D58r 3                               ; Postpone DROP (eg. compile a jsr to it)
001D58r 3  A0 rr                        ldy #>xt_drop
001D5Ar 3  A9 rr                        lda #<xt_drop
001D5Cr 3  20 rr rr                     jsr cmpl_subroutine
001D5Fr 3               
001D5Fr 3  60           z_of:           rts
001D60r 3               
001D60r 3               
001D60r 3               
001D60r 3               ; ## ONE ( -- n ) "Push the number 1 to the Data Stack"
001D60r 3               ; ## "1"  auto  Tali Forth
001D60r 3                       ; """This is also the code for EDITOR-WORDLIST"""
001D60r 3               xt_editor_wordlist:
001D60r 3               xt_one:
001D60r 3  CA                           dex
001D61r 3  CA                           dex
001D62r 3  A9 01                        lda #1
001D64r 3  95 00                        sta 0,x
001D66r 3  74 01                        stz 1,x
001D68r 3               
001D68r 3               z_editor_wordlist:
001D68r 3               z_one:
001D68r 3  60                           rts
001D69r 3               
001D69r 3               
001D69r 3               ; ## ONE_MINUS ( u -- u-1 ) "Decrease TOS by one"
001D69r 3               ; ## "1-"  auto  ANS core
001D69r 3                       ; """https://forth-standard.org/standard/core/OneMinus"""
001D69r 3               
001D69r 3               xt_one_minus:
001D69r 3  20 rr rr                     jsr underflow_1
001D6Cr 3               
001D6Cr 3  B5 00                        lda 0,x
001D6Er 3  D0 02                        bne @1
001D70r 3  D6 01                        dec 1,x
001D72r 3               @1:
001D72r 3  D6 00                        dec 0,x
001D74r 3               
001D74r 3  60           z_one_minus:    rts
001D75r 3               
001D75r 3               
001D75r 3               
001D75r 3               ; ## ONE_PLUS ( u -- u+1 ) "Increase TOS by one"
001D75r 3               ; ## "1+"  auto  ANS core
001D75r 3                       ; """https://forth-standard.org/standard/core/OnePlus
001D75r 3                       ;
001D75r 3                       ; Code is shared with CHAR-PLUS
001D75r 3                       ; """
001D75r 3               
001D75r 3               xt_char_plus:
001D75r 3               xt_one_plus:
001D75r 3  20 rr rr                     jsr underflow_1
001D78r 3               
001D78r 3  F6 00                        inc 0,x
001D7Ar 3  D0 02                        bne @done
001D7Cr 3  F6 01                        inc 1,x
001D7Er 3               
001D7Er 3               @done:
001D7Er 3               z_char_plus:
001D7Er 3  60           z_one_plus:     rts
001D7Fr 3               
001D7Fr 3               
001D7Fr 3               
001D7Fr 3               ; ## ONLY ( -- ) "Set earch order to minimum wordlist"
001D7Fr 3               ; ## "only"  auto  ANS search ext
001D7Fr 3                       ; """https://forth-standard.org/standard/search/ONLY"""
001D7Fr 3               
001D7Fr 3               xt_only:
001D7Fr 3                               ; Put -1 on data stack.
001D7Fr 3  CA                           dex
001D80r 3  CA                           dex
001D81r 3  A9 FF                        lda #$FF
001D83r 3  95 00                        sta 0,x
001D85r 3  95 01                        sta 1,x
001D87r 3               
001D87r 3                               ; Invoke set-order to set the minimum search order.
001D87r 3  20 rr rr                     jsr xt_set_order
001D8Ar 3               
001D8Ar 3  60           z_only:         rts
001D8Br 3               
001D8Br 3               
001D8Br 3               
001D8Br 3               ; ## OR ( m n -- n ) "Logically OR TOS and NOS"
001D8Br 3               ; ## "or"  auto  ANS core
001D8Br 3                       ; """https://forth-standard.org/standard/core/OR"
001D8Br 3               xt_or:
001D8Br 3  20 rr rr                     jsr underflow_2
001D8Er 3               
001D8Er 3  B5 00                        lda 0,x
001D90r 3  15 02                        ora 2,x
001D92r 3  95 02                        sta 2,x
001D94r 3               
001D94r 3  B5 01                        lda 1,x
001D96r 3  15 03                        ora 3,x
001D98r 3  95 03                        sta 3,x
001D9Ar 3               
001D9Ar 3  E8                           inx
001D9Br 3  E8                           inx
001D9Cr 3               
001D9Cr 3  60           z_or:           rts
001D9Dr 3               
001D9Dr 3               
001D9Dr 3               ; ## ORDER ( -- ) "Print current word order list and current WID"
001D9Dr 3               ; ## "order"  auto  ANS core
001D9Dr 3                       ; """https://forth-standard.org/standard/search/ORDER
001D9Dr 3                       ; Note the search order is displayed from first search to last
001D9Dr 3                       ; searched and is therefore exactly the reverse of the order in which
001D9Dr 3                       ; Forth stacks are displayed.
001D9Dr 3                       ;
001D9Dr 3                       ; A Forth implementation of this word is:
001D9Dr 3                       ;
001D9Dr 3                       ; 	: .wid ( wid -- )
001D9Dr 3                       ; 	dup 0=  if ." Forth "  drop    else
001D9Dr 3                       ; 	dup 1 = if ." Editor " drop    else
001D9Dr 3                       ; 	dup 2 = if ." Assembler " drop else
001D9Dr 3                       ; 	dup 3 = if ." Root " drop      else
001D9Dr 3                       ; 	           . ( just print the number )
001D9Dr 3                       ; 	then then then then ;
001D9Dr 3                       ;
001D9Dr 3                       ; : ORDER ( -- )
001D9Dr 3                       ; 	cr get-order 0 ?do .wid loop
001D9Dr 3                       ; 	space space get-current .wid ;
001D9Dr 3                       ;
001D9Dr 3                       ; This is an interactive program, so speed
001D9Dr 3                       ; is not as important as size. We assume we do not have more than 255
001D9Dr 3                       ; wordlists.
001D9Dr 3                       ; """
001D9Dr 3               
001D9Dr 3               xt_order:
001D9Dr 3  20 rr rr                     jsr xt_cr
001DA0r 3  20 rr rr                     jsr xt_get_order        ; ( wid_n ... wid_1 n )
001DA3r 3               
001DA3r 3                               ; Paranoid: Check if there are no wordlists, a rather
001DA3r 3                               ; pathological case. this would mean ( 0 ) on the stack. In
001DA3r 3                               ; that case, we just drop n and run
001DA3r 3  B5 00                        lda 0,x                 ; assumes no more than 255 wordlists
001DA5r 3  F0 1E                        beq @drop_done
001DA7r 3               
001DA7r 3               @have_wordlists:
001DA7r 3                               ; We arrive here with the LSB of TOS in A, the number of WIDs
001DA7r 3                               ; on the stack
001DA7r 3  A8                           tay
001DA8r 3               @loop:
001DA8r 3  E8                           inx
001DA9r 3  E8                           inx                     ; DROP, now ( wid_n ... wid_1 )
001DAAr 3  B5 00                        lda 0,x
001DACr 3               
001DACr 3  5A                           phy
001DADr 3  20 rr rr                     jsr _print_wid_string   ; internal helper function
001DB0r 3  7A                           ply
001DB1r 3               
001DB1r 3  88                           dey
001DB2r 3  D0 F4                        bne @loop
001DB4r 3               
001DB4r 3                               ; We've printed the wordlists, now we add the current wordlist.
001DB4r 3                               ; This follows the convention of Gforth
001DB4r 3  20 rr rr                     jsr xt_space
001DB7r 3  20 rr rr                     jsr xt_space
001DBAr 3  20 rr rr                     jsr xt_get_current      ; ( wid )
001DBDr 3               
001DBDr 3  B5 00                        lda 0,x
001DBFr 3  20 rr rr                     jsr _print_wid_string
001DC2r 3  20 rr rr                     jsr xt_cr
001DC5r 3               
001DC5r 3               @drop_done:
001DC5r 3  E8                           inx
001DC6r 3  E8                           inx
001DC7r 3               z_order:
001DC7r 3  60                           rts
001DC8r 3               
001DC8r 3               _print_wid_string:
001DC8r 3                       ; """Helper function for ORDER: Given a WID in A, print the
001DC8r 3                       ; corresponding string. If there is no such word list defined, just
001DC8r 3                       ; print the number. Assumes we will not have more than 256 WIDs; also
001DC8r 3                       ; assumes we have just loaded A so Z reflects status of byte.  In
001DC8r 3                       ; theory, we could speed this up by having the WID be the same as the
001DC8r 3                       ; number of the strings. However, ORDER is used rather infrequently and
001DC8r 3                       ; this would make changes to the strings.asm file very dangerous, so we
001DC8r 3                       ; follow the slightly more complicated route with a translation table.
001DC8r 3                       ; """
001DC8r 3                               ; If the WID is larger than 3, we have no string avaliable and
001DC8r 3                               ; just print the number.
001DC8r 3                               ; See http://6502.org/tutorials/compare_instructions.html
001DC8r 3                               ; for details
001DC8r 3  C9 04                        cmp #4
001DCAr 3  90 09                        bcc @output_string      ; less than 4, print a real string
001DCCr 3               
001DCCr 3                               ; Our WID is not less than 4, that is, 4 or larger. We just
001DCCr 3                               ; print the number
001DCCr 3  CA                           dex
001DCDr 3  CA                           dex
001DCEr 3  95 00                        sta 0,x
001DD0r 3  74 01                        stz 1,x
001DD2r 3  4C rr rr                     jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
001DD5r 3               
001DD5r 3               @output_string:
001DD5r 3                               ; Get the string number based on WID 0 to 3
001DD5r 3  A8                           tay
001DD6r 3  B9 rr rr                     lda @wid_data,y
001DD9r 3               
001DD9r 3                               ; Print without a line feed
001DD9r 3  4C rr rr                     jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
001DDCr 3               
001DDCr 3               @wid_data:
001DDCr 3                       ; Table of string numbers (see strings.asm) indexed by the WID if
001DDCr 3                       ; less than 4.
001DDCr 3  03                   .byte str_wid_forth            ; WID 0: "Forth"
001DDDr 3  06                   .byte str_wid_editor           ; WID 1: "Editor"
001DDEr 3  07                   .byte str_wid_assembler        ; WID 2: "Assembler"
001DDFr 3  08                   .byte str_wid_root             ; WID 3: "Root"
001DE0r 3               
001DE0r 3               
001DE0r 3               
001DE0r 3               ; ## OUTPUT ( -- addr ) "Return the address of the EMIT vector address"
001DE0r 3               ; ## "output"  tested  Tali Forth
001DE0r 3               xt_output:
001DE0r 3                       ; """Return the address where the jump target for EMIT is stored (but
001DE0r 3                       ; not the vector itself). By default, this will hold the value of
001DE0r 3                       ; kernel_putc routine, but this can be changed by the user, hence this
001DE0r 3                       ; routine.
001DE0r 3                       ; """
001DE0r 3  CA                           dex
001DE1r 3  CA                           dex
001DE2r 3  A9 rr                        lda #<output
001DE4r 3  95 00                        sta 0,x
001DE6r 3  A9 rr                        lda #>output
001DE8r 3  95 01                        sta 1,x
001DEAr 3               
001DEAr 3  60           z_output:       rts
001DEBr 3               
001DEBr 3               
001DEBr 3               ; ## OVER ( b a -- b a b ) "Copy NOS to TOS"
001DEBr 3               ; ## "over"  auto  ANS core
001DEBr 3                       ; """https://forth-standard.org/standard/core/OVER"""
001DEBr 3               xt_over:
001DEBr 3  20 rr rr                     jsr underflow_2
001DEEr 3               
001DEEr 3  CA                           dex
001DEFr 3  CA                           dex
001DF0r 3               
001DF0r 3  B5 04                        lda 4,x         ; LSB
001DF2r 3  95 00                        sta 0,x
001DF4r 3  B5 05                        lda 5,x         ; MSB
001DF6r 3  95 01                        sta 1,x
001DF8r 3               
001DF8r 3  60           z_over:         rts
001DF9r 3               
001DF9r 3               
001DF9r 3               ; ## PAD ( -- addr ) "Return address of user scratchpad"
001DF9r 3               ; ## "pad"  auto  ANS core ext
001DF9r 3                       ; """https://forth-standard.org/standard/core/PAD
001DF9r 3                       ; Return address to a temporary area in free memory for user. Must
001DF9r 3                       ; be at least 84 bytes in size (says ANS). It is located relative to
001DF9r 3                       ; the compile area pointer (CP) and therefore varies in position.
001DF9r 3                       ; This area is reserved for the user and not used by the system
001DF9r 3                       ; """
001DF9r 3               xt_pad:
001DF9r 3  CA                           dex
001DFAr 3  CA                           dex
001DFBr 3               
001DFBr 3  A5 rr                        lda cp
001DFDr 3  18                           clc
001DFEr 3  69 FF                        adc #padoffset  ; assumes padoffset one byte in size
001E00r 3  95 00                        sta 0,x
001E02r 3               
001E02r 3  A5 rr                        lda cp+1
001E04r 3  69 00                        adc #0          ; only need carry
001E06r 3  95 01                        sta 1,x
001E08r 3               
001E08r 3  60           z_pad:          rts
001E09r 3               
001E09r 3               
001E09r 3               ; ## PAGE ( -- ) "Clear the screen"
001E09r 3               ; ## "page"  tested  ANS facility
001E09r 3                       ; """https://forth-standard.org/standard/facility/PAGE
001E09r 3                       ; Clears a page if supported by ANS terminal codes. This is
001E09r 3                       ; Clear Screen ("ESC[2J") plus moving the cursor to the top
001E09r 3                       ; left of the screen
001E09r 3                       ; """
001E09r 3               xt_page:
001E09r 3  A9 1B                        lda #AscESC
001E0Br 3  20 rr rr                     jsr emit_a
001E0Er 3  A9 5B                        lda #$5B        ; ASCII for "["
001E10r 3  20 rr rr                     jsr emit_a
001E13r 3  A9 32                        lda #'2'
001E15r 3  20 rr rr                     jsr emit_a
001E18r 3  A9 4A                        lda #'J'
001E1Ar 3  20 rr rr                     jsr emit_a
001E1Dr 3               
001E1Dr 3                               ; move cursor to top left of screen
001E1Dr 3  20 rr rr                     jsr xt_zero
001E20r 3  20 rr rr                     jsr xt_zero
001E23r 3  20 rr rr                     jsr xt_at_xy
001E26r 3               
001E26r 3  60           z_page:         rts
001E27r 3               
001E27r 3               
001E27r 3               ; ## PAREN ( -- ) "Discard input up to close paren ( comment )"
001E27r 3               ; ## "("  auto  ANS core
001E27r 3                       ; """http://forth-standard.org/standard/core/p"""
001E27r 3               
001E27r 3               xt_paren:
001E27r 3                               ; Put a right paren on the stack.
001E27r 3  CA                           dex
001E28r 3  CA                           dex
001E29r 3  A9 29                        lda #41     ; Right parenthesis
001E2Br 3  95 00                        sta 0,x
001E2Dr 3  74 01                        stz 1,x
001E2Fr 3               
001E2Fr 3                               ; Call parse.
001E2Fr 3  20 rr rr                     jsr xt_parse
001E32r 3               
001E32r 3                               ; Throw away the result.
001E32r 3  E8                           inx
001E33r 3  E8                           inx
001E34r 3  E8                           inx
001E35r 3  E8                           inx
001E36r 3               
001E36r 3  60           z_paren:        rts
001E37r 3               
001E37r 3               
001E37r 3               
001E37r 3               ; ## PARSE_NAME ( "name" -- addr u ) "Parse the input"
001E37r 3               ; ## "parse-name"  auto  ANS core ext
001E37r 3                       ; """https://forth-standard.org/standard/core/PARSE-NAME
001E37r 3                       ; Find next word in input string, skipping leading whitespace. This is
001E37r 3                       ; a special form of PARSE and drops through to that word. See PARSE
001E37r 3                       ; for more detail. We use this word internally for the interpreter
001E37r 3                       ; because it is a lot easier to use. Reference implementations at
001E37r 3                       ; http://forth-standard.org/standard/core/PARSE-NAME and
001E37r 3                       ; http://www.forth200x.org/reference-implementations/parse-name.fs
001E37r 3                       ; Roughly, the word is comparable to BL WORD COUNT. -- Note that
001E37r 3                       ; though the ANS standard talks about skipping "spaces", whitespace
001E37r 3                       ; is actually perfectly legal (see for example
001E37r 3                       ; http://forth-standard.org/standard/usage#subsubsection.3.4.1.1).
001E37r 3                       ; Otherwise, PARSE-NAME chokes on tabs.
001E37r 3                       ; """
001E37r 3               
001E37r 3               xt_parse_name:
001E37r 3                               ; To enable the compilation of the high-level Forth words
001E37r 3                               ; in forth-words.asm and user-words.asm at boot time,
001E37r 3                               ; PARSE-NAME and PARSE must be able to deal with 16-bit string
001E37r 3                               ; lengths. This is a pain on an 8-bit machine. The pointer
001E37r 3                               ; to the current location is in toin (>IN). We need to check,
001E37r 3                               ; worst case, the characters from cib+toin to cib+ciblen, and
001E37r 3                               ; we can't just use Y as an index.
001E37r 3               
001E37r 3                               ; The counter is CIBLEN-TOIN and stored in tmp1
001E37r 3  A5 rr                        lda ciblen              ; LSB of counter
001E39r 3  38                           sec
001E3Ar 3  E5 rr                        sbc toin
001E3Cr 3  85 rr                        sta tmp1
001E3Er 3  A5 rr                        lda ciblen+1            ; MSB
001E40r 3  E5 rr                        sbc toin+1
001E42r 3  85 rr                        sta tmp1+1
001E44r 3               
001E44r 3                               ; Check the result for zero (TOIN is equal to CIBLEN)
001E44r 3  A5 rr                        lda tmp1
001E46r 3  05 rr                        ora tmp1+1
001E48r 3  F0 28                        beq @empty_line
001E4Ar 3               
001E4Ar 3                               ; We walk through the characters starting at CIB+TOIN, so we
001E4Ar 3                               ; save a temp version of that in tmp2
001E4Ar 3  A5 rr                        lda cib
001E4Cr 3  18                           clc
001E4Dr 3  65 rr                        adc toin
001E4Fr 3  85 rr                        sta tmp2                ; LSB of first character
001E51r 3  A5 rr                        lda cib+1
001E53r 3  65 rr                        adc toin+1
001E55r 3  85 rr                        sta tmp2+1              ; MSB
001E57r 3               
001E57r 3               @skip_loop:
001E57r 3  B2 rr                        lda (tmp2)              ; work copy of cib
001E59r 3  20 rr rr                     jsr is_whitespace
001E5Cr 3  90 1F                        bcc @char_found
001E5Er 3               
001E5Er 3                               ; Char is still whitespace, continue
001E5Er 3  E6 rr                        inc tmp2
001E60r 3  D0 02                        bne @2
001E62r 3  E6 rr                        inc tmp2+1
001E64r 3               @2:
001E64r 3                               ; Adjust counter
001E64r 3  A5 rr                        lda tmp1
001E66r 3  D0 02                        bne @3
001E68r 3  C6 rr                        dec tmp1+1
001E6Ar 3               @3:
001E6Ar 3  C6 rr                        dec tmp1
001E6Cr 3               
001E6Cr 3  A5 rr                        lda tmp1
001E6Er 3  05 rr                        ora tmp1+1
001E70r 3  D0 E5                        bne @skip_loop          ; fall through if empty line
001E72r 3               
001E72r 3               @empty_line:
001E72r 3                               ; Neither the ANS Forth nor the Gforth documentation say
001E72r 3                               ; what to return as an address if a string with only
001E72r 3                               ; spaces is given. For speed reasons, we just return junk
001E72r 3                               ; NOS, with the TOS zero as per standard
001E72r 3  CA                           dex
001E73r 3  CA                           dex
001E74r 3  CA                           dex
001E75r 3  CA                           dex
001E76r 3               
001E76r 3  74 00                        stz 0,x                 ; TOS is zero
001E78r 3  74 01                        stz 1,x
001E7Ar 3               
001E7Ar 3  4C rr rr                     jmp z_parse_name        ; skip over PARSE
001E7Dr 3               
001E7Dr 3               @char_found:
001E7Dr 3                               ; We arrive here with tmp2 pointing to the first non-space
001E7Dr 3                               ; character. This is where the word really starts, so
001E7Dr 3                               ; we use it to calculate the new >IN by subtracting
001E7Dr 3  A5 rr                        lda tmp2
001E7Fr 3  38                           sec
001E80r 3  E5 rr                        sbc cib
001E82r 3  85 rr                        sta toin
001E84r 3  A5 rr                        lda tmp2+1
001E86r 3  E5 rr                        sbc cib+1
001E88r 3  85 rr                        sta toin+1
001E8Ar 3               
001E8Ar 3                               ; prepare Data Stack for PARSE by adding space
001E8Ar 3                               ; as the delimiter
001E8Ar 3  CA                           dex
001E8Br 3  CA                           dex
001E8Cr 3               
001E8Cr 3  A9 20                        lda #AscSP
001E8Er 3  95 00                        sta 0,x
001E90r 3  74 01                        stz 1,x                 ; paranoid, now ( "name" c )
001E92r 3               
001E92r 3               
001E92r 3               ; ## PARSE ( "name" c -- addr u ) "Parse input with delimiter character"
001E92r 3               ; ## "parse"  tested  ANS core ext
001E92r 3                       ; """https://forth-standard.org/standard/core/PARSE
001E92r 3                       ; Find word in input string delimited by character given. Do not
001E92r 3                       ; skip leading delimiters -- this is the main difference to PARSE-NAME.
001E92r 3                       ; PARSE and PARSE-NAME replace WORD in modern systems. ANS discussion
001E92r 3                       ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
001E92r 3                       ;
001E92r 3                       ;
001E92r 3                       ;     cib  cib+toin   cib+ciblen
001E92r 3                       ;      v      v            v
001E92r 3                       ;     |###################|
001E92r 3                       ;
001E92r 3                       ;     |------>|  toin (>IN)
001E92r 3                       ;     |------------------->|  ciblen
001E92r 3                       ;
001E92r 3                       ; The input string is stored starting at the address in the Current
001E92r 3                       ; Input Buffer (CIB), the length of which is in CIBLEN. While searching
001E92r 3                       ; for the delimiter, TOIN (>IN) points to the where we currently are.
001E92r 3                       ; Since PARSE does not skip leading delimiters, we assume we are on a
001E92r 3                       ; useful string if there are any characters at all. As with
001E92r 3                       ; PARSE-NAME, we must be able to handle strings with a length of
001E92r 3                       ; 16-bit for EVALUTE, which is a pain on an 8-bit machine.
001E92r 3                       ; """
001E92r 3               
001E92r 3               xt_parse:
001E92r 3  20 rr rr                     jsr underflow_1
001E95r 3               
001E95r 3                               ; If the input buffer is empty, we just return
001E95r 3  A5 rr                        lda ciblen
001E97r 3  05 rr                        ora ciblen+1
001E99r 3  F0 0C                        beq @abort_parse
001E9Br 3               
001E9Br 3                               ; If the pointer >IN is larger or equal to the length of
001E9Br 3                               ; the input buffer (CIBLEN), the line is done. Put
001E9Br 3                               ; differently, we only continue if >IN is smaller than
001E9Br 3                               ; CIBLEN
001E9Br 3  A5 rr                        lda toin+1              ; MSB
001E9Dr 3  C5 rr                        cmp ciblen+1
001E9Fr 3  90 0E                        bcc @go_parse           ; unsigned comparison
001EA1r 3               
001EA1r 3  A5 rr                        lda toin                ; LSB
001EA3r 3  C5 rr                        cmp ciblen
001EA5r 3  90 08                        bcc @go_parse
001EA7r 3               
001EA7r 3               @abort_parse:
001EA7r 3                               ; Sorry, this line is over
001EA7r 3  CA                           dex
001EA8r 3  CA                           dex
001EA9r 3  74 00                        stz 0,x
001EABr 3  74 01                        stz 1,x
001EADr 3               
001EADr 3  80 7A                        bra @done
001EAFr 3               @go_parse:
001EAFr 3                               ; We actually have work to do. Save the delimiter in
001EAFr 3                               ; tmptos.
001EAFr 3  B5 00                        lda 0,x
001EB1r 3  85 rr                        sta tmptos
001EB3r 3               
001EB3r 3                               ; We can now prepare the Data Stack for the return value
001EB3r 3  CA                           dex
001EB4r 3  CA                           dex
001EB5r 3               
001EB5r 3                               ; tmp1 is CIB+TOIN, the beginning of the current string
001EB5r 3                               ; tmp2 is initially the same as tmp1, then the work index
001EB5r 3                               ; tmp3 is CIB+CIBLEN, one char past the end of the string
001EB5r 3               
001EB5r 3                               ; Calculate the beginning of the string, which is also the
001EB5r 3                               ; address to return
001EB5r 3  A5 rr                        lda cib
001EB7r 3  18                           clc
001EB8r 3  65 rr                        adc toin        ; LSB
001EBAr 3  85 rr                        sta tmp1
001EBCr 3  85 rr                        sta tmp2
001EBEr 3  95 02                        sta 2,x
001EC0r 3               
001EC0r 3  A5 rr                        lda cib+1
001EC2r 3  65 rr                        adc toin+1      ; MSB
001EC4r 3  85 rr                        sta tmp1+1
001EC6r 3  85 rr                        sta tmp2+1
001EC8r 3  95 03                        sta 3,x
001ECAr 3               
001ECAr 3                               ; Calculate the address where the input buffer ends plus 1, so
001ECAr 3                               ; we can compare it with TOIN, which is an index
001ECAr 3  A5 rr                        lda cib
001ECCr 3  18                           clc
001ECDr 3  65 rr                        adc ciblen
001ECFr 3  85 rr                        sta tmp3
001ED1r 3  A5 rr                        lda cib+1
001ED3r 3  65 rr                        adc ciblen+1
001ED5r 3  85 rr                        sta tmp3+1
001ED7r 3               
001ED7r 3                               ; Initialize the offset we use to adjust EOL or found delimiter
001ED7r 3  64 rr                        stz tmptos+1
001ED9r 3               @loop:
001ED9r 3                               ; If we are at the end of the string, quit
001ED9r 3  A5 rr                        lda tmp2
001EDBr 3  C5 rr                        cmp tmp3
001EDDr 3  D0 06                        bne @not_empty
001EDFr 3               
001EDFr 3  A5 rr                        lda tmp2+1
001EE1r 3  C5 rr                        cmp tmp3+1
001EE3r 3  F0 1D                        beq @eol
001EE5r 3               @not_empty:
001EE5r 3                               ; We have to do this the hard way. In fact, it's really
001EE5r 3                               ; hard since if we are dealing with a SPACE, the standard
001EE5r 3                               ; wants us to skip all whitespace, not just spaces. Otherwise,
001EE5r 3                               ; Tali would choke on tabs between words. For details, see
001EE5r 3                               ; http://forth-standard.org/standard/file#subsection.11.3.5
001EE5r 3                               ; In theory, we could make this faster by defining a delimiter
001EE5r 3                               ; that is 00 as the sign that we skip all whitespace, thereby
001EE5r 3                               ; avoiding having to test every time. However, somebody,
001EE5r 3                               ; somewhere might want to parse a zero-delimited list. Since
001EE5r 3                               ; any byte value could be chosen for that, we just test for
001EE5r 3                               ; a space every single time for the moment.
001EE5r 3  B2 rr                        lda (tmp2)
001EE7r 3               
001EE7r 3  A4 rr                        ldy tmptos
001EE9r 3  C0 20                        cpy #AscSP
001EEBr 3  D0 07                        bne @not_whitespace
001EEDr 3               
001EEDr 3                               ; The delimiter is a space, so we're looking for all
001EEDr 3                               ; whitespace
001EEDr 3  20 rr rr                     jsr is_whitespace
001EF0r 3  90 02                        bcc @not_whitespace
001EF2r 3  80 0C                        bra @found_delimiter
001EF4r 3               
001EF4r 3               @not_whitespace:
001EF4r 3                               ; The delimiter is not a space, so we're looking for
001EF4r 3                               ; whatever it is
001EF4r 3  C5 rr                        cmp tmptos
001EF6r 3  F0 08                        beq @found_delimiter
001EF8r 3               
001EF8r 3                               ; Not a delimiter, next character
001EF8r 3  E6 rr                        inc tmp2
001EFAr 3  D0 DD                        bne @loop
001EFCr 3  E6 rr                        inc tmp2+1
001EFEr 3  80 D9                        bra @loop
001F00r 3               
001F00r 3               @found_delimiter:
001F00r 3                               ; Increase the offset: If we've found a delimiter, we want
001F00r 3                               ; TOIN to point to the character after it, not the delimiter
001F00r 3                               ; itself
001F00r 3  E6 rr                        inc tmptos+1
001F02r 3               @eol:
001F02r 3                               ; The length of the new string is tmp2-tmp1
001F02r 3  A5 rr                        lda tmp2
001F04r 3  38                           sec
001F05r 3  E5 rr                        sbc tmp1
001F07r 3  95 00                        sta 0,x
001F09r 3               
001F09r 3  A5 rr                        lda tmp2+1
001F0Br 3  E5 rr                        sbc tmp1+1
001F0Dr 3  95 01                        sta 1,x
001F0Fr 3               
001F0Fr 3                               ; The new offset is tmp2-cib
001F0Fr 3  A5 rr                        lda tmp2
001F11r 3  38                           sec
001F12r 3  E5 rr                        sbc cib
001F14r 3  85 rr                        sta toin
001F16r 3  A5 rr                        lda tmp2+1
001F18r 3  E5 rr                        sbc cib+1
001F1Ar 3  85 rr                        sta toin+1
001F1Cr 3               
001F1Cr 3                               ; Add in the delimiter
001F1Cr 3  A5 rr                        lda toin
001F1Er 3  18                           clc
001F1Fr 3  65 rr                        adc tmptos+1
001F21r 3  85 rr                        sta toin
001F23r 3  A5 rr                        lda toin+1
001F25r 3  69 00                        adc #0          ; we only need the carry
001F27r 3  85 rr                        sta toin+1
001F29r 3               @done:
001F29r 3               z_parse_name:
001F29r 3  60           z_parse:        rts
001F2Ar 3               
001F2Ar 3               
001F2Ar 3               
001F2Ar 3               ; ## PICK ( n n u -- n n n ) "Move element u of the stack to TOS"
001F2Ar 3               ; ## "pick"  auto  ANS core ext
001F2Ar 3                       ; """https://forth-standard.org/standard/core/PICK
001F2Ar 3                       ; Take the u-th element out of the stack and put it on TOS,
001F2Ar 3                       ; overwriting the original TOS. 0 PICK is equivalent to DUP, 1 PICK to
001F2Ar 3                       ; OVER. Note that using PICK is considered poor coding form. Also note
001F2Ar 3                       ; that FIG Forth has a different behavior for PICK than ANS Forth.
001F2Ar 3                       ; """
001F2Ar 3               
001F2Ar 3               xt_pick:
001F2Ar 3                               ; Checking for underflow is difficult because it depends on
001F2Ar 3                               ; which element we want to grab. We could probably figure
001F2Ar 3                               ; something out, but it wouldn't work with underflow stripping
001F2Ar 3                               ; Since using PICK is considered poor form anyway, we just
001F2Ar 3                               ; leave it as it is
001F2Ar 3  16 00                        asl 0,x         ; we assume u < 128 (stack is small)
001F2Cr 3  8A                           txa
001F2Dr 3  75 00                        adc 0,x
001F2Fr 3  A8                           tay
001F30r 3               
001F30r 3  B9 02 00                     lda 0002,y
001F33r 3  95 00                        sta 0,x
001F35r 3  B9 03 00                     lda 0003,y
001F38r 3  95 01                        sta 1,x
001F3Ar 3               
001F3Ar 3  60           z_pick:         rts
001F3Br 3               
001F3Br 3               
001F3Br 3               
001F3Br 3               ; ## PLUS ( n n -- n ) "Add TOS and NOS"
001F3Br 3               ; ## "+"  auto  ANS core
001F3Br 3                       ; """https://forth-standard.org/standard/core/Plus"""
001F3Br 3               xt_plus:
001F3Br 3  20 rr rr                     jsr underflow_2
001F3Er 3               
001F3Er 3  18                           clc
001F3Fr 3  B5 00                        lda 0,x         ; LSB
001F41r 3  75 02                        adc 2,x
001F43r 3  95 02                        sta 2,x
001F45r 3               
001F45r 3  B5 01                        lda 1,x         ; MSB. No CLC, conserve carry bit
001F47r 3  75 03                        adc 3,x
001F49r 3  95 03                        sta 3,x
001F4Br 3               
001F4Br 3  E8                           inx
001F4Cr 3  E8                           inx
001F4Dr 3               
001F4Dr 3  60           z_plus:         rts
001F4Er 3               
001F4Er 3               
001F4Er 3               ; ## PLUS_STORE ( n addr -- ) "Add number to value at given address"
001F4Er 3               ; ## "+!"  auto  ANS core
001F4Er 3                       ; """https://forth-standard.org/standard/core/PlusStore"""
001F4Er 3               xt_plus_store:
001F4Er 3  20 rr rr                     jsr underflow_2
001F51r 3               
001F51r 3                               ; move address to tmp1 so we can work with it
001F51r 3  B5 00                        lda 0,x
001F53r 3  85 rr                        sta tmp1
001F55r 3  B5 01                        lda 1,x
001F57r 3  85 rr                        sta tmp1+1
001F59r 3               
001F59r 3  A0 00                        ldy #0          ; LSB
001F5Br 3  B1 rr                        lda (tmp1),y
001F5Dr 3  18                           clc
001F5Er 3  75 02                        adc 2,x
001F60r 3  91 rr                        sta (tmp1),y
001F62r 3               
001F62r 3  C8                           iny             ; MSB
001F63r 3  B1 rr                        lda (tmp1),y
001F65r 3  75 03                        adc 3,x
001F67r 3  91 rr                        sta (tmp1),y
001F69r 3               
001F69r 3  E8                           inx
001F6Ar 3  E8                           inx
001F6Br 3  E8                           inx
001F6Cr 3  E8                           inx
001F6Dr 3               
001F6Dr 3  60           z_plus_store:   rts
001F6Er 3               
001F6Er 3               
001F6Er 3               ; ## POSTPONE ( -- ) "Change IMMEDIATE status (it's complicated)"
001F6Er 3               ; ## "postpone"  auto   ANS core
001F6Er 3                       ; """https://forth-standard.org/standard/core/POSTPONE
001F6Er 3                       ; Add the compilation behavior of a word to a new word at
001F6Er 3                       ; compile time. If the word that follows it is immediate, include
001F6Er 3                       ; it so that it will be compiled when the word being defined is
001F6Er 3                       ; itself used for a new word. Tricky, but very useful.
001F6Er 3                       ;
001F6Er 3                       ; Because POSTPONE expects a word (not an xt) in the input stream (not
001F6Er 3                       ; on the Data Stack). This means we cannot build words with
001F6Er 3                       ; "jsr xt_postpone, jsr <word>" directly.
001F6Er 3                       ; """
001F6Er 3               
001F6Er 3               xt_postpone:
001F6Er 3  20 rr rr                     jsr xt_parse_name               ; ( -- addr n )
001F71r 3               
001F71r 3                               ; if there was no word provided, complain and quit
001F71r 3  B5 00                        lda 0,x
001F73r 3  15 01                        ora 1,x
001F75r 3  D0 05                        bne @1
001F77r 3               
001F77r 3  A9 05                        lda #err_noname
001F79r 3  4C rr rr                     jmp error
001F7Cr 3               @1:
001F7Cr 3  20 rr rr                     jsr xt_find_name                ; ( -- nt | 0 )
001F7Fr 3               
001F7Fr 3                               ; if word not in Dictionary, complain and quit
001F7Fr 3  D0 05                        bne @2
001F81r 3  A9 05                        lda #err_noname
001F83r 3  4C rr rr                     jmp error
001F86r 3               
001F86r 3               @2:
001F86r 3                               ; keep a copy of nt for later
001F86r 3  B5 00                        lda 0,x
001F88r 3  85 rr                        sta tmp1
001F8Ar 3  B5 01                        lda 1,x
001F8Cr 3  85 rr                        sta tmp1+1
001F8Er 3               
001F8Er 3                               ; We need the xt instead of the nt
001F8Er 3  20 rr rr                     jsr xt_name_to_int              ; ( nt -- xt )
001F91r 3               
001F91r 3                               ; See if this is an immediate word. This is easier
001F91r 3                               ; with nt than with xt. The status byte of the word
001F91r 3                               ; is nt+1
001F91r 3  E6 rr                        inc tmp1
001F93r 3  D0 02                        bne @3
001F95r 3  E6 rr                        inc tmp1+1
001F97r 3               @3:
001F97r 3  B2 rr                        lda (tmp1)
001F99r 3  29 04                        and #IM         ; mask all but Intermediate flag
001F9Br 3  F0 05                        beq @not_immediate
001F9Dr 3               
001F9Dr 3                               ; We're immediate, so instead of executing it right now, we
001F9Dr 3                               ; compile it. xt is TOS, so this is easy. The RTS at the end
001F9Dr 3                               ; takes us back to the original caller
001F9Dr 3  20 rr rr                     jsr xt_compile_comma
001FA0r 3  80 0A                        bra @done
001FA2r 3               
001FA2r 3               @not_immediate:
001FA2r 3                               ; This is not an immediate word, so we enact "deferred
001FA2r 3                               ; compilation" by including ' <NAME> COMPILE, which we do by
001FA2r 3                               ; compiling the run-time routine of LITERAL, the xt itself, and
001FA2r 3                               ; a subroutine jump to COMPILE,
001FA2r 3  20 rr rr                     jsr xt_literal
001FA5r 3               
001FA5r 3                               ; Last, compile COMPILE,
001FA5r 3  A0 rr                        ldy #>xt_compile_comma
001FA7r 3  A9 rr                        lda #<xt_compile_comma
001FA9r 3  20 rr rr                     jsr cmpl_subroutine
001FACr 3               @done:
001FACr 3  60           z_postpone:     rts
001FADr 3               
001FADr 3               
001FADr 3               
001FADr 3               ; ## PREVIOUS ( -- ) "Remove the first wordlist in the search order"
001FADr 3               ; ## "previous"  auto  ANS search ext
001FADr 3                       ; """http://forth-standard.org/standard/search/PREVIOUS"""
001FADr 3               
001FADr 3               xt_previous:
001FADr 3  20 rr rr                     jsr xt_get_order
001FB0r 3  20 rr rr                     jsr xt_nip
001FB3r 3  20 rr rr                     jsr xt_one_minus
001FB6r 3  20 rr rr                     jsr xt_set_order
001FB9r 3               
001FB9r 3  60           z_previous:     rts
001FBAr 3               
001FBAr 3               
001FBAr 3               
001FBAr 3               ; ## QUESTION ( addr -- ) "Print content of a variable"
001FBAr 3               ; ## "?"  tested  ANS tools
001FBAr 3                       ; """https://forth-standard.org/standard/tools/q
001FBAr 3                       ;
001FBAr 3                       ; Only used interactively. Since humans are so slow, we
001FBAr 3                       ; save size and just go for the subroutine jumps
001FBAr 3                       ; """
001FBAr 3               xt_question:
001FBAr 3                               ; FETCH takes care of underflow check
001FBAr 3  20 rr rr                     jsr xt_fetch
001FBDr 3  20 rr rr                     jsr xt_dot
001FC0r 3               
001FC0r 3  60           z_question:     rts
001FC1r 3               
001FC1r 3               
001FC1r 3               ; ## QUESTION_DUP ( n -- 0 | n n ) "Duplicate TOS non-zero"
001FC1r 3               ; ## "?dup"  auto  ANS core
001FC1r 3                       ; """https://forth-standard.org/standard/core/qDUP"""
001FC1r 3               
001FC1r 3               xt_question_dup:
001FC1r 3  20 rr rr                     jsr underflow_1
001FC4r 3               
001FC4r 3                               ; Check if TOS is zero
001FC4r 3  B5 00                        lda 0,x
001FC6r 3  15 01                        ora 1,x
001FC8r 3  F0 0A                        beq @done
001FCAr 3               
001FCAr 3                               ; not zero, duplicate
001FCAr 3  CA                           dex
001FCBr 3  CA                           dex
001FCCr 3  B5 02                        lda 2,x
001FCEr 3  95 00                        sta 0,x
001FD0r 3  B5 03                        lda 3,x
001FD2r 3  95 01                        sta 1,x
001FD4r 3               @done:
001FD4r 3  60           z_question_dup: rts
001FD5r 3               
001FD5r 3               
001FD5r 3               
001FD5r 3               ; ## R_FETCH ( -- n ) "Get copy of top of Return Stack"
001FD5r 3               ; ## "r@"  auto  ANS core
001FD5r 3                       ; """https://forth-standard.org/standard/core/RFetch
001FD5r 3                       ; This word is Compile Only in Tali Forth, though Gforth has it
001FD5r 3                       ; work normally as well
001FD5r 3                       ;
001FD5r 3                       ; An alternative way to write this word
001FD5r 3                       ; would be to access the elements on the stack directly like 2R@
001FD5r 3                       ; does, these versions should be compared at some point.
001FD5r 3                       ; """
001FD5r 3               xt_r_fetch:
001FD5r 3                               ; get the return address
001FD5r 3  7A                           ply             ; LSB
001FD6r 3  84 rr                        sty tmp1
001FD8r 3  7A                           ply             ; MSB
001FD9r 3               
001FD9r 3                               ; --- CUT FOR NATIVE COMPILE ---
001FD9r 3               
001FD9r 3                               ; get the actual top of Return Stack
001FD9r 3  CA                           dex
001FDAr 3  CA                           dex
001FDBr 3               
001FDBr 3  68                           pla             ; LSB
001FDCr 3  95 00                        sta 0,x
001FDEr 3  68                           pla             ; MSB
001FDFr 3  95 01                        sta 1,x
001FE1r 3               
001FE1r 3                               ; now we have to put that value back
001FE1r 3  48                           pha
001FE2r 3  B5 00                        lda 0,x
001FE4r 3  48                           pha
001FE5r 3               
001FE5r 3                               ; --- CUT FOR NATIVE COMPILE ---
001FE5r 3               
001FE5r 3                               ; restore return value
001FE5r 3  5A                           phy             ; MSB
001FE6r 3  A4 rr                        ldy tmp1
001FE8r 3  5A                           phy             ; LSB
001FE9r 3               
001FE9r 3  60           z_r_fetch:      rts
001FEAr 3               
001FEAr 3               
001FEAr 3               ; ## R_FROM ( -- n )(R: n --) "Move top of Return Stack to TOS"
001FEAr 3               ; ## "r>"  auto  ANS core
001FEAr 3                       ; """https://forth-standard.org/standard/core/Rfrom
001FEAr 3                       ; Move Top of Return Stack to Top of Data Stack.
001FEAr 3                       ;
001FEAr 3                       ; We have to move
001FEAr 3                       ; the RTS address out of the way first. This word is handled
001FEAr 3                       ; differently for native and and subroutine compilation, see COMPILE,
001FEAr 3                       ; This is a compile-only word
001FEAr 3                       ; """
001FEAr 3               
001FEAr 3               xt_r_from:
001FEAr 3                               ; Rescue the address of the return jump that is currently
001FEAr 3                               ; on top of the Return Stack. If this word is natively
001FEAr 3                               ; compiled, this is a total waste of time
001FEAr 3  68                           pla             ; LSB
001FEBr 3  85 rr                        sta tmptos
001FEDr 3  7A                           ply             ; MSB
001FEEr 3               
001FEEr 3                               ; --- CUT FOR NATIVE CODING ---
001FEEr 3               
001FEEr 3  CA                           dex
001FEFr 3  CA                           dex
001FF0r 3               
001FF0r 3                               ; now we can access the actual data
001FF0r 3               
001FF0r 3  68                           pla             ; LSB
001FF1r 3  95 00                        sta 0,x
001FF3r 3  68                           pla             ; MSB
001FF4r 3  95 01                        sta 1,x
001FF6r 3               
001FF6r 3                               ; --- CUT FOR NATIVE CODING ---
001FF6r 3               
001FF6r 3                               ; restore the return address
001FF6r 3  5A                           phy             ; MSB
001FF7r 3  A5 rr                        lda tmptos
001FF9r 3  48                           pha             ; LSB
001FFAr 3               
001FFAr 3  60           z_r_from:       rts
001FFBr 3               
001FFBr 3               
001FFBr 3               ; ## R_TO_INPUT ( -- ) ( R: n n n n -- ) "Restore input state from Return Stack"
001FFBr 3               ; ## "r>input"  tested  Tali Forth
001FFBr 3                       ; """Restore the current input state as defined by insrc, cib, ciblen,
001FFBr 3                       ; and toin from the Return Stack.
001FFBr 3                       ;
001FFBr 3                       ; See INPUT_TO_R for a discussion of this word. Uses tmp1
001FFBr 3                       ; """
001FFBr 3               
001FFBr 3               xt_r_to_input:
001FFBr 3               
001FFBr 3                               ; We arrive here with the return address on the top of the
001FFBr 3                               ; 65c02's stack. We need to move it out of the way first
001FFBr 3  68                           pla
001FFCr 3  85 rr                        sta tmp1
001FFEr 3  68                           pla
001FFFr 3  85 rr                        sta tmp1+1
002001r 3               
002001r 3                               ; This assumes that insrc is the first of eight bytes and
002001r 3                               ; toin+1 the last in the sequence we want to save from the Zero
002001r 3                               ; Page. Since we went in reverse order, insrc is now on the top
002001r 3                               ; of the Return Stack.
002001r 3  A0 00                        ldy #0
002003r 3               @loop:
002003r 3  68                           pla
002004r 3  99 rr rr                     sta insrc,y
002007r 3  C8                           iny
002008r 3  C0 08                        cpy #8
00200Ar 3  D0 F7                        bne @loop
00200Cr 3               
00200Cr 3                               ; Restore address for return jump
00200Cr 3  A5 rr                        lda tmp1+1
00200Er 3  48                           pha
00200Fr 3  A5 rr                        lda tmp1
002011r 3  48                           pha
002012r 3               
002012r 3  60           z_r_to_input: 	rts
002013r 3               
002013r 3               
002013r 3               
002013r 3               ; ## RECURSE ( -- ) "Copy recursive call to word being defined"
002013r 3               ; ## "recurse"  auto  ANS core
002013r 3                       ; """https://forth-standard.org/standard/core/RECURSE
002013r 3                       ;
002013r 3                       ; This word may not be natively compiled
002013r 3                       ; """
002013r 3               
002013r 3               xt_recurse:
002013r 3                               ; The whole routine amounts to compiling a reference to
002013r 3                               ; the word that is being compiled. First, we save the JSR
002013r 3                               ; instruction
002013r 3  A0 00                        ldy #0
002015r 3               
002015r 3  A9 20                        lda #$20        ; opcode for JSR
002017r 3  91 rr                        sta (cp),y
002019r 3  C8                           iny
00201Ar 3               
00201Ar 3                               ; Next, we save the LSB and MSB of the xt of the word
00201Ar 3                               ; we are currently working on. We first need to see if
00201Ar 3                               ; WORKWORD has the nt (: started the word) or the
00201Ar 3                               ; xt (:NONAME started the word). Bit 6 in status tells us.
00201Ar 3  24 rr                        bit status
00201Cr 3  70 0C                        bvs @nt_in_workword
00201Er 3               
00201Er 3                               ; This is a special :NONAME word. Just copy the xt
00201Er 3                               ; from WORKWORD into the dictionary.
00201Er 3  A5 rr                        lda workword
002020r 3  91 rr                        sta (cp),y
002022r 3  C8                           iny
002023r 3  A5 rr                        lda workword+1
002025r 3  91 rr                        sta (cp),y
002027r 3  C8                           iny
002028r 3  80 1B                        bra @update_cp
00202Ar 3               
00202Ar 3               @nt_in_workword:
00202Ar 3                               ; This is a regular : word, so the xt is four bytes down
00202Ar 3                               ; from the nt which we saved in WORKWORD. We could probably
00202Ar 3                               ; use NAME>INT here but this is going to be faster, and
00202Ar 3                               ; fast counts with recursion
00202Ar 3  A5 rr                        lda workword            ; LSB
00202Cr 3  18                           clc
00202Dr 3  69 04                        adc #4
00202Fr 3  85 rr                        sta tmp1
002031r 3  A5 rr                        lda workword+1          ; MSB
002033r 3  69 00                        adc #0
002035r 3  85 rr                        sta tmp1+1
002037r 3               
002037r 3  B2 rr                        lda (tmp1)
002039r 3  91 rr                        sta (cp),y
00203Br 3  5A                           phy
00203Cr 3  A0 01                        ldy #1
00203Er 3  B1 rr                        lda (tmp1),y
002040r 3  7A                           ply
002041r 3  C8                           iny
002042r 3  91 rr                        sta (cp),y
002044r 3  C8                           iny
002045r 3               
002045r 3               @update_cp:
002045r 3  98                           tya
002046r 3  18                           clc
002047r 3  65 rr                        adc cp
002049r 3  85 rr                        sta cp
00204Br 3  90 02                        bcc @done
00204Dr 3  E6 rr                        inc cp+1
00204Fr 3               @done:
00204Fr 3  60           z_recurse:      rts
002050r 3               
002050r 3               
002050r 3               
002050r 3               ; ## REFILL ( -- f ) "Refill the input buffer"
002050r 3               ; ## "refill"  tested  ANS core ext
002050r 3                       ; """https://forth-standard.org/standard/core/REFILL
002050r 3                       ; Attempt to fill the input buffer from the input source, returning
002050r 3                       ; a true flag if successful. When the input source is the user input
002050r 3                       ; device, attempt to receive input into the terminal input buffer. If
002050r 3                       ; successful, make the result the input buffer, set >IN to zero, and
002050r 3                       ; return true. Receipt of a line containing no characters is considered
002050r 3                       ; successful. If there is no input available from the current input
002050r 3                       ; source, return false. When the input source is a string from EVALUATE,
002050r 3                       ; return false and perform no other action." See
002050r 3                       ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
002050r 3                       ; and Conklin & Rather p. 156. Note we don't have to care about blocks
002050r 3                       ; because REFILL is never used on blocks - Tali is able to evaluate the
002050r 3                       ; entire block as a 1024 byte string.
002050r 3                       ; """"
002050r 3               
002050r 3               xt_refill:
002050r 3                               ; Get input source from SOURCE-ID. This is an
002050r 3                               ; optimized version of a subroutine jump to SOURCE-ID
002050r 3  A5 rr                        lda insrc               ; cheat: We only check LSB
002052r 3  D0 2D                        bne @src_not_kbd
002054r 3               
002054r 3                               ; SOURCE-ID of zero means we're getting stuff from the keyboard
002054r 3                               ; with ACCEPT, which wants the address of the current input
002054r 3                               ; buffer NOS and the max number of characters to accept TOS
002054r 3  CA                           dex
002055r 3  CA                           dex
002056r 3  CA                           dex
002057r 3  CA                           dex
002058r 3               
002058r 3  A5 rr                        lda cib                 ; address of CIB is NOS
00205Ar 3  95 02                        sta 2,x
00205Cr 3  A5 rr                        lda cib+1
00205Er 3  95 03                        sta 3,x
002060r 3               
002060r 3  64 rr                        stz ciblen              ; go in with empty buffer
002062r 3  64 rr                        stz ciblen+1
002064r 3               
002064r 3  A9 FF                        lda #bsize              ; max number of chars is TOS
002066r 3  95 00                        sta 0,x
002068r 3  74 01                        stz 1,x                 ; cheat: We only accept max 255
00206Ar 3               
00206Ar 3  20 rr rr                     jsr xt_accept           ; ( addr n1 -- n2)
00206Dr 3               
00206Dr 3                               ; ACCEPT returns the number of characters accepted, which
00206Dr 3                               ; belong in CIBLEN
00206Dr 3  B5 00                        lda 0,x
00206Fr 3  85 rr                        sta ciblen
002071r 3  B5 01                        lda 1,x
002073r 3  85 rr                        sta ciblen+1            ; though we only accept 255 chars
002075r 3               
002075r 3                               ; make >IN point to beginning of buffer
002075r 3  64 rr                        stz toin
002077r 3  64 rr                        stz toin+1
002079r 3               
002079r 3  A9 FF                        lda #$FF                ; overwrite with TRUE flag
00207Br 3  95 00                        sta 0,x
00207Dr 3  95 01                        sta 1,x
00207Fr 3               
00207Fr 3  80 10                        bra @done
002081r 3               
002081r 3               @src_not_kbd:
002081r 3                               ; If SOURCE-ID doesn't return a zero, it must be a string in
002081r 3                               ; memory or a file (remember, no blocks in this version).
002081r 3                               ; If source is a string, we were given the flag -1 ($FFFF)
002081r 3  1A                           inc
002082r 3  D0 08                        bne @src_not_string
002084r 3               
002084r 3                               ; Simply return FALSE flag as per specification
002084r 3  CA                           dex
002085r 3  CA                           dex
002086r 3  74 00                        stz 0,x
002088r 3  74 01                        stz 1,x
00208Ar 3               
00208Ar 3  80 05                        bra z_refill
00208Cr 3               
00208Cr 3               @src_not_string:
00208Cr 3                               ; Since we don't have blocks, this must mean that we are trying
00208Cr 3                               ; to read from a file. However, we don't have files yet, so we
00208Cr 3                               ; report an error and jump to ABORT.
00208Cr 3  A9 01                        lda #err_badsource
00208Er 3  4C rr rr                     jmp error
002091r 3               @done:
002091r 3  60           z_refill:       rts
002092r 3               
002092r 3               
002092r 3               
002092r 3               ; ## REPEAT (C: orig dest -- ) ( -- ) "Loop flow control"
002092r 3               ; ## "repeat"  auto  ANS core
002092r 3                       ; """http://forth-standard.org/standard/core/REPEAT"""
002092r 3               
002092r 3               xt_repeat:
002092r 3                               ; Run again first
002092r 3  20 rr rr                     jsr xt_again
002095r 3               
002095r 3                               ; Stuff HERE in for the branch address
002095r 3                               ; to get out of the loop
002095r 3  20 rr rr                     jsr xt_here
002098r 3  20 rr rr                     jsr xt_swap
00209Br 3  20 rr rr                     jsr xt_store
00209Er 3               
00209Er 3  60           z_repeat:       rts
00209Fr 3               
00209Fr 3               
00209Fr 3               
00209Fr 3               ; ## RIGHT_BRACKET ( -- ) "Enter the compile state"
00209Fr 3               ; ## "]"  auto  ANS core
00209Fr 3                       ; """https://forth-standard.org/standard/right-bracket
00209Fr 3                       ; This is an immediate word.
00209Fr 3                       ; """
00209Fr 3               xt_right_bracket:
00209Fr 3  A9 FF                        lda #$FF
0020A1r 3  85 rr                        sta state
0020A3r 3  85 rr                        sta state+1
0020A5r 3               z_right_bracket:
0020A5r 3  60                           rts
0020A6r 3               
0020A6r 3               
0020A6r 3               ; ## ROOT_WORDLIST ( -- u ) "WID for the Root (minimal) wordlist"
0020A6r 3               ; ## "root-wordlist"  tested  Tali Editor
0020A6r 3               xt_root_wordlist:
0020A6r 3  CA                           dex             ; The WID for the Root wordlist is 3.
0020A7r 3  CA                           dex
0020A8r 3  A9 03                        lda #3
0020AAr 3  95 00                        sta 0,x
0020ACr 3  74 01                        stz 1,x
0020AEr 3               
0020AEr 3               z_root_wordlist:
0020AEr 3  60                           rts
0020AFr 3               
0020AFr 3               
0020AFr 3               ; ## ROT ( a b c -- b c a ) "Rotate first three stack entries downwards"
0020AFr 3               ; ## "rot"  auto  ANS core
0020AFr 3                       ; """https://forth-standard.org/standard/core/ROT
0020AFr 3                       ; Remember "R for 'Revolution'" - the bottom entry comes out
0020AFr 3                       ; on top!
0020AFr 3                       ; """
0020AFr 3               
0020AFr 3               xt_rot:
0020AFr 3  20 rr rr                     jsr underflow_3
0020B2r 3               
0020B2r 3  B4 05                        ldy 5,x         ; MSB first
0020B4r 3  B5 03                        lda 3,x
0020B6r 3  95 05                        sta 5,x
0020B8r 3  B5 01                        lda 1,x
0020BAr 3  95 03                        sta 3,x
0020BCr 3  94 01                        sty 1,x
0020BEr 3               
0020BEr 3  B4 04                        ldy 4,x         ; LSB next
0020C0r 3  B5 02                        lda 2,x
0020C2r 3  95 04                        sta 4,x
0020C4r 3  B5 00                        lda 0,x
0020C6r 3  95 02                        sta 2,x
0020C8r 3  94 00                        sty 0,x
0020CAr 3               
0020CAr 3  60           z_rot:          rts
0020CBr 3               
0020CBr 3               
0020CBr 3               
0020CBr 3               ; ## RSHIFT ( x u -- x ) "Shift TOS to the right"
0020CBr 3               ; ## "rshift"  auto  ANS core
0020CBr 3                       ; """https://forth-standard.org/standard/core/RSHIFT"""
0020CBr 3               xt_rshift:
0020CBr 3  20 rr rr                     jsr underflow_2
0020CEr 3               
0020CEr 3                               ; We shift maximal by 16 bits, mask everything else
0020CEr 3  B5 00                        lda 0,x
0020D0r 3  29 0F                        and #%00001111
0020D2r 3  F0 08                        beq @done               ; if 0 shifts, quit
0020D4r 3               
0020D4r 3  A8                           tay
0020D5r 3               @loop:
0020D5r 3  56 03                        lsr 3,x
0020D7r 3  76 02                        ror 2,x
0020D9r 3  88                           dey
0020DAr 3  D0 F9                        bne @loop
0020DCr 3               @done:
0020DCr 3  E8                           inx
0020DDr 3  E8                           inx
0020DEr 3               
0020DEr 3  60           z_rshift:       rts
0020DFr 3               
0020DFr 3               
0020DFr 3               ; ## S_BACKSLASH_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
0020DFr 3               ; ## "s\""  auto  ANS core
0020DFr 3                       ; """https://forth-standard.org/standard/core/Seq
0020DFr 3                       ; Store address and length of string given, returning ( addr u ).
0020DFr 3                       ; ANS core claims this is compile-only, but the file set expands it
0020DFr 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
0020DFr 3                       ; are evil. We follow general usage. This is just like S" except
0020DFr 3                       ; that it allows for some special escaped characters.
0020DFr 3                       ; """
0020DFr 3               
0020DFr 3               xt_s_backslash_quote:
0020DFr 3                               ; tmp2 will be used to determine if we are handling
0020DFr 3                               ; escaped characters or not. In this case, we are,
0020DFr 3                               ; so set it to $FF (the upper byte will be used to
0020DFr 3                               ; determine if we just had a \ and the next character
0020DFr 3                               ; needs to be modifed as an escaped character).
0020DFr 3  A9 FF                        lda #$FF
0020E1r 3  85 rr                        sta tmp2
0020E3r 3  64 rr                        stz tmp2+1
0020E5r 3               
0020E5r 3                               ; Now that the flag is set, jump into s_quote to process
0020E5r 3                               ; the string.
0020E5r 3  20 rr rr                     jsr s_quote_start
0020E8r 3               @done:
0020E8r 3               z_s_backslash_quote:
0020E8r 3  60                           rts
0020E9r 3               
0020E9r 3               
0020E9r 3               ; This is a helper function for s_backslash_quote to convert a character
0020E9r 3               ; from ASCII to the corresponding hex value, eg 'F'->15
0020E9r 3               convert_hex_value:
0020E9r 3               
0020E9r 3  C9 41                cmp #'A'
0020EBr 3  90 07                bcc @digit
0020EDr 3               
0020EDr 3                       ; It's A-F
0020EDr 3  29 DF                and #$DF                ; Make it uppercase.
0020EFr 3  38                   sec
0020F0r 3  E9 37                sbc #'7'                 ; gives value 10 for 'A'
0020F2r 3  80 03                bra @done
0020F4r 3               
0020F4r 3               @digit:
0020F4r 3                       ; It's 0-9
0020F4r 3  38                   sec
0020F5r 3  E9 30                sbc #'0'
0020F7r 3               
0020F7r 3               @done:
0020F7r 3  60                   rts
0020F8r 3               
0020F8r 3               
0020F8r 3               
0020F8r 3               ; ## SEARCH_WORDLIST ( caddr u wid -- 0 | xt 1 | xt -1) "Search for a word in a wordlist"
0020F8r 3               ; ## "search-wordlist" auto ANS search
0020F8r 3                       ; """https://forth-standard.org/standard/search/SEARCH_WORDLIST"""
0020F8r 3               
0020F8r 3               xt_search_wordlist:
0020F8r 3  20 rr rr                     jsr underflow_3
0020FBr 3               
0020FBr 3                               ; Set up tmp1 with the wordlist indicated by wid
0020FBr 3                               ; on the stack. Start by putting the base address
0020FBr 3                               ; of the wordlists in tmp2.
0020FBr 3  A5 rr                        lda up
0020FDr 3  18                           clc
0020FEr 3  69 06                        adc #wordlists_offset
002100r 3  85 rr                        sta tmp2
002102r 3  A5 rr                        lda up+1
002104r 3  69 00                        adc #0          ; Adding carry
002106r 3  85 rr                        sta tmp2+1
002108r 3               
002108r 3                               ; Add the wid (in cells) to the base address.
002108r 3  B5 00                        lda 0,x
00210Ar 3  0A                           asl             ; Convert wid to offset in cells (x2)
00210Br 3  65 rr                        adc tmp2
00210Dr 3  85 rr                        sta tmp2
00210Fr 3  90 02                        bcc @1
002111r 3  E6 rr                        inc tmp2+1      ; Propagate carry if needed.
002113r 3               
002113r 3                               ; tmp2 now holds the address of the dictionary pointer
002113r 3                               ; for the given wordlist.
002113r 3               @1:
002113r 3                               ; Remove the wid from the stack.
002113r 3  E8                           inx
002114r 3  E8                           inx
002115r 3               
002115r 3                               ; check for special case of an empty string (length zero)
002115r 3  B5 00                        lda 0,x
002117r 3  15 01                        ora 1,x
002119r 3  D0 03                        bne @check_wordlist
00211Br 3  4C rr rr                     jmp @done
00211Er 3               
00211Er 3               @check_wordlist:
00211Er 3                               ; Check for special case of empty wordlist
00211Er 3                               ; (dictionary pointer, in tmp2, is 0)
00211Er 3  A5 rr                        lda tmp2
002120r 3  05 rr                        ora tmp2+1
002122r 3  D0 03                        bne @have_string
002124r 3  4C rr rr                     jmp @done
002127r 3               
002127r 3               @have_string:
002127r 3                               ; set up first loop iteration
002127r 3  B2 rr                        lda (tmp2)              ; nt of first word in Dictionary
002129r 3  85 rr                        sta tmp1
00212Br 3               
00212Br 3  E6 rr                        inc tmp2                ; Move to the upper byte
00212Dr 3  D0 02                        bne @2
00212Fr 3  E6 rr                        inc tmp2+1
002131r 3               @2:
002131r 3  B2 rr                        lda (tmp2)
002133r 3  85 rr                        sta tmp1+1
002135r 3               
002135r 3                               ; Reuse tmp2 to hold the address of the mystery string.
002135r 3  B5 02                        lda 2,x                 ; Address of mystery string
002137r 3  85 rr                        sta tmp2
002139r 3  B5 03                        lda 3,x
00213Br 3  85 rr                        sta tmp2+1
00213Dr 3               
00213Dr 3               @loop:
00213Dr 3                               ; first quick test: Are strings the same length?
00213Dr 3  B2 rr                        lda (tmp1)
00213Fr 3  D5 00                        cmp 0,x
002141r 3  D0 7B                        bne @next_entry
002143r 3               
002143r 3               @compare_string:
002143r 3                               ; are the same length, so we now have to compare each
002143r 3                               ; character
002143r 3               
002143r 3                               ; second quick test: Is the first character the same?
002143r 3  B2 rr                        lda (tmp2)      ; first character of mystery string
002145r 3               
002145r 3                               ; Lowercase the incoming charcter.
002145r 3  C9 5B                        cmp #$5B        ; ASCII '[' (one past Z)
002147r 3  B0 07                        bcs @compare_first
002149r 3  C9 41                        cmp #$41        ; ASCII 'A'
00214Br 3  90 03                        bcc @compare_first
00214Dr 3               
00214Dr 3                               ; An uppercase letter has been located.  Make it
00214Dr 3                               ; lowercase.
00214Dr 3  18                           clc
00214Er 3  69 20                        adc #$20
002150r 3               
002150r 3               @compare_first:
002150r 3  A0 08                        ldy #8          ; Offset in nt to name
002152r 3  D1 rr                        cmp (tmp1),y    ; first character of current word
002154r 3  D0 68                        bne @next_entry
002156r 3               
002156r 3                               ; string length are the same and the first character is the
002156r 3                               ; same. If the length of the string is 1, we're already done
002156r 3  B5 00                        lda 0,x
002158r 3  3A                           dec
002159r 3  F0 2C                        beq @success
00215Br 3               
00215Br 3                               ; No such luck: The strings are the same length and the first
00215Br 3                               ; char is the same, but the word is more than one char long.
00215Br 3                               ; So we suck it up and compare every single character. We go
00215Br 3                               ; from back to front, because words like CELLS and CELL+ would
00215Br 3                               ; take longer otherwise. We can also shorten the loop by one
00215Br 3                               ; because we've already compared the first char.
00215Br 3               
00215Br 3                               ; The string of the word we're testing against is 8 bytes down
00215Br 3  A5 rr                        lda tmp1
00215Dr 3  48                           pha             ; Preserve tmp1 on the return stack.
00215Er 3  18                           clc
00215Fr 3  69 08                        adc #8
002161r 3  85 rr                        sta tmp1        ; Reusing tmp1 temporarily for string check.
002163r 3  A5 rr                        lda tmp1+1
002165r 3  48                           pha             ; Preserve tmp1+1 on the return stack.
002166r 3  69 00                        adc #0          ; we only need the carry
002168r 3  85 rr                        sta tmp1+1
00216Ar 3               
00216Ar 3  B4 00                        ldy 0,x         ; index is length of string minus 1
00216Cr 3  88                           dey
00216Dr 3               
00216Dr 3               @string_loop:
00216Dr 3  B1 rr                        lda (tmp2),y    ; last char of mystery string
00216Fr 3               
00216Fr 3                               ; Lowercase the incoming charcter.
00216Fr 3  C9 5B                        cmp #$5B         ; ASCII '[' (one past Z)
002171r 3  B0 07                        bcs @check_char
002173r 3  C9 41                        cmp #$41        ; ASCII 'A'
002175r 3  90 03                        bcc @check_char
002177r 3               
002177r 3                               ; An uppercase letter has been located.  Make it
002177r 3                               ; lowercase.
002177r 3  18                           clc
002178r 3  69 20                        adc #$20
00217Ar 3               @check_char:
00217Ar 3  D1 rr                        cmp (tmp1),y    ; last char of word we're testing against
00217Cr 3  D0 3A                        bne @next_entry_tmp1
00217Er 3               
00217Er 3  88                           dey
00217Fr 3  D0 EC                        bne @string_loop
002181r 3               
002181r 3               @success_tmp1:
002181r 3  68                           pla             ; Restore tmp1 from the return stack.
002182r 3  85 rr                        sta tmp1+1
002184r 3  68                           pla
002185r 3  85 rr                        sta tmp1
002187r 3               
002187r 3               @success:
002187r 3                               ; The strings match. Drop the count and put correct nt TOS
002187r 3  E8                           inx
002188r 3  E8                           inx
002189r 3  A5 rr                        lda tmp1
00218Br 3  95 00                        sta 0,x
00218Dr 3  A5 rr                        lda tmp1+1
00218Fr 3  95 01                        sta 1,x
002191r 3               
002191r 3                               ; Change the nt into an xt, but save a copy of the nt
002191r 3                               ; to look up whether the word is immediate or not.
002191r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002194r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
002197r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
00219Ar 3               
00219Ar 3  A0 00                        ldy #0                  ; Prepare flag
00219Cr 3               
00219Cr 3                               ; The flags are in the second byte of the header
00219Cr 3  F6 00                        inc 0,x
00219Er 3  D0 02                        bne @3
0021A0r 3  F6 01                        inc 1,x                 ; ( xt nt+1 )
0021A2r 3               @3:
0021A2r 3  A1 00                        lda (0,x)               ; ( xt char )
0021A4r 3  29 04                        and #IM
0021A6r 3  D0 08                        bne @immediate          ; bit set, we're immediate
0021A8r 3               
0021A8r 3  A9 FF                        lda #$FF                ; We're not immediate, return -1
0021AAr 3  95 00                        sta 0,x
0021ACr 3  95 01                        sta 1,x
0021AEr 3  80 28                        bra @done_nodrop
0021B0r 3               
0021B0r 3               @immediate:
0021B0r 3  A9 01                        lda #1                  ; We're immediate, return 1
0021B2r 3  95 00                        sta 0,x
0021B4r 3  74 01                        stz 1,x
0021B6r 3               
0021B6r 3  80 20                        bra @done_nodrop
0021B8r 3               
0021B8r 3               @next_entry_tmp1:
0021B8r 3  68                           pla             ; Restore tmp1 from the return stack.
0021B9r 3  85 rr                        sta tmp1+1
0021BBr 3  68                           pla
0021BCr 3  85 rr                        sta tmp1
0021BEr 3               @next_entry:
0021BEr 3                               ; Not the same, so we get the next word. Next header
0021BEr 3                               ; address is two bytes down
0021BEr 3  A0 02                        ldy #2
0021C0r 3  B1 rr                        lda (tmp1),y
0021C2r 3  48                           pha
0021C3r 3  C8                           iny
0021C4r 3  B1 rr                        lda (tmp1),y
0021C6r 3  85 rr                        sta tmp1+1
0021C8r 3  68                           pla
0021C9r 3  85 rr                        sta tmp1
0021CBr 3               
0021CBr 3                               ; If we got a zero, we've walked the whole Dictionary and
0021CBr 3                               ; return as a failure, otherwise try again
0021CBr 3  05 rr                        ora tmp1+1
0021CDr 3  F0 03                        beq @fail_done
0021CFr 3  4C rr rr                     jmp @loop
0021D2r 3               
0021D2r 3               @fail_done:
0021D2r 3  74 02                        stz 2,x         ; failure flag
0021D4r 3  74 03                        stz 3,x
0021D6r 3               @done:
0021D6r 3  E8                           inx
0021D7r 3  E8                           inx
0021D8r 3               @done_nodrop:
0021D8r 3               z_search_wordlist:
0021D8r 3  60                           rts
0021D9r 3               
0021D9r 3               
0021D9r 3               
0021D9r 3               ; ## SEE ( "name" -- ) "Print information about a Forth word"
0021D9r 3               ; ## "see" tested  ANS tools
0021D9r 3                       ; """https://forth-standard.org/standard/tools/SEE
0021D9r 3                       ; SEE takes the name of a word and prints its name token (nt),
0021D9r 3                       ; execution token (xt), size in bytes, flags used, and then dumps the
0021D9r 3                       ; code and disassembles it.
0021D9r 3                       ; """
0021D9r 3               
0021D9r 3               xt_see:
0021D9r 3  20 rr rr                     jsr xt_parse_name       ; ( addr u )
0021DCr 3  20 rr rr                     jsr xt_find_name        ; ( nt | 0 )
0021DFr 3               
0021DFr 3                               ; If we got back a zero we don't know that word and so we quit
0021DFr 3                               ; with an error
0021DFr 3  B5 00                        lda 0,x
0021E1r 3  15 01                        ora 1,x
0021E3r 3  D0 05                        bne @1
0021E5r 3               
0021E5r 3  A9 05                        lda #err_noname
0021E7r 3  4C rr rr                     jmp error
0021EAr 3               @1:
0021EAr 3  20 rr rr                     jsr xt_cr
0021EDr 3               
0021EDr 3                               ; We have a legal word, so let's get serious. Save the current
0021EDr 3                               ; number base and use hexadecimal instead.
0021EDr 3  A5 rr                        lda base
0021EFr 3  48                           pha
0021F0r 3  20 rr rr                     jsr xt_hex
0021F3r 3               
0021F3r 3  A9 0A                        lda #str_see_nt
0021F5r 3  20 rr rr                     jsr print_string_no_lf
0021F8r 3               
0021F8r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
0021FBr 3  20 rr rr                     jsr xt_u_dot
0021FEr 3  20 rr rr                     jsr xt_space            ; ( nt )
002201r 3               
002201r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002204r 3  20 rr rr                     jsr xt_name_to_int      ; ( nt xt )
002207r 3               
002207r 3  A9 0B                        lda #str_see_xt
002209r 3  20 rr rr                     jsr print_string_no_lf
00220Cr 3               
00220Cr 3  20 rr rr                     jsr xt_dup              ; ( nt xt xt )
00220Fr 3  20 rr rr                     jsr xt_u_dot
002212r 3  20 rr rr                     jsr xt_cr               ; ( nt xt )
002215r 3               
002215r 3                               ; We print letters for flags and then later follow it with 1 or
002215r 3                               ; 0 to mark if which flag is set
002215r 3  A9 09                        lda #str_see_flags
002217r 3  20 rr rr                     jsr print_string_no_lf
00221Ar 3               
00221Ar 3  20 rr rr                     jsr xt_over             ; ( nt xt nt )
00221Dr 3  20 rr rr                     jsr xt_one_plus         ; ( nt xt nt+1 )
002220r 3  20 rr rr                     jsr xt_fetch            ; ( nt xt flags )
002223r 3               
002223r 3  B5 00                        lda 0,x
002225r 3               
002225r 3                               ; This is crude, but for the moment it is good enough
002225r 3  A0 06                        ldy #6                  ; Not all bits are used
002227r 3               @flag_loop:
002227r 3  48                           pha
002228r 3  29 01                        and #%00000001
00222Ar 3  18                           clc
00222Br 3  69 30                        adc #$30                ; ASCII "0"
00222Dr 3  20 rr rr                     jsr emit_a
002230r 3  20 rr rr                     jsr xt_space
002233r 3               
002233r 3  68                           pla
002234r 3  6A                           ror                     ; Next flag
002235r 3               
002235r 3  88                           dey
002236r 3  D0 EF                        bne @flag_loop
002238r 3               
002238r 3  20 rr rr                     jsr xt_cr
00223Br 3               
00223Br 3  E8                           inx
00223Cr 3  E8                           inx                     ; ( nt xt )
00223Dr 3               
00223Dr 3                               ; Figure out the size
00223Dr 3  A9 0C                        lda #str_see_size
00223Fr 3  20 rr rr                     jsr print_string_no_lf
002242r 3               
002242r 3  20 rr rr                     jsr xt_swap             ; ( xt nt )
002245r 3  20 rr rr                     jsr xt_wordsize         ; ( xt u )
002248r 3  20 rr rr                     jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
00224Br 3  20 rr rr                     jsr xt_decimal
00224Er 3  20 rr rr                     jsr xt_u_dot            ; ( xt u )
002251r 3  20 rr rr                     jsr xt_hex
002254r 3  20 rr rr                     jsr xt_cr
002257r 3               
002257r 3                               ; Dump hex and disassemble
002257r 3  20 rr rr                     jsr xt_two_dup          ; ( xt u xt u )
00225Ar 3  20 rr rr                     jsr xt_dump
00225Dr 3  20 rr rr                     jsr xt_cr
002260r 3  20 rr rr                     jsr xt_disasm
002263r 3               
002263r 3  68                           pla
002264r 3  85 rr                        sta base
002266r 3               
002266r 3  60           z_see:          rts
002267r 3               
002267r 3               
002267r 3               
002267r 3               ; ## SET_CURRENT ( wid -- ) "Set the compilation wordlist"
002267r 3               ; ## "set-current" auto ANS search
002267r 3                       ; """https://forth-standard.org/standard/search/SET-CURRENT"""
002267r 3               
002267r 3               xt_set_current:
002267r 3  20 rr rr                     jsr underflow_1
00226Ar 3               
00226Ar 3                               ; Save the value from the data stack.
00226Ar 3  A0 04                        ldy #current_offset
00226Cr 3  B5 00                        lda 0,x         ; CURRENT is byte variable
00226Er 3  91 rr                        sta (up),y      ; so only the LSB is used.
002270r 3               
002270r 3  E8                           inx
002271r 3  E8                           inx
002272r 3               
002272r 3  60           z_set_current:  rts
002273r 3               
002273r 3               
002273r 3               
002273r 3               ; ## SET_ORDER ( wid_n .. wid_1 n -- ) "Set the current search order"
002273r 3               ; ## "set-order" auto ANS search
002273r 3                       ; """https://forth-standard.org/standard/search/SET-ORDER"""
002273r 3               
002273r 3               xt_set_order:
002273r 3                               ; Test for -1 TOS
002273r 3  A9 FF                        lda #$FF
002275r 3  D5 01                        cmp 1,x
002277r 3  D0 12                        bne @start
002279r 3  D5 00                        cmp 0,x
00227Br 3  D0 0E                        bne @start
00227Dr 3               
00227Dr 3                               ; There is a -1 TOS.  Replace it with the default
00227Dr 3                               ; search order, which is just the FORTH-WORDLIST.
00227Dr 3  CA                           dex             ; Make room for the count.
00227Er 3  CA                           dex
00227Fr 3  74 03                        stz 3,x         ; ROOT-WORDLIST is 3
002281r 3  A9 03                        lda #3
002283r 3  95 02                        sta 2,x
002285r 3  74 01                        stz 1,x         ; Count is 1.
002287r 3  A9 01                        lda #1
002289r 3  95 00                        sta 0,x
00228Br 3               
00228Br 3                               ; Continue processing with ( forth-wordlist 1 -- )
00228Br 3               @start:
00228Br 3                               ; Set #ORDER - the number of wordlists in the search order.
00228Br 3  A0 1E                        ldy #num_order_offset
00228Dr 3  B5 00                        lda 0,x
00228Fr 3  91 rr                        sta (up),y      ; #ORDER is a byte variable.
002291r 3  85 rr                        sta tmp1        ; Save a copy for zero check and looping.
002293r 3                                               ; Only the low byte is saved in tmp1 as
002293r 3                                               ; only 8 wordlists are allowed.
002293r 3               
002293r 3  E8                           inx             ; Drop the count off the data stack.
002294r 3  E8                           inx
002295r 3               
002295r 3                               ; Check if there are zero wordlists.
002295r 3  A5 rr                        lda tmp1
002297r 3  F0 0D                        beq @done       ; If zero, there are no wordlists.
002299r 3               
002299r 3                               ; Move the wordlist ids from the data stack to the search order.
002299r 3  A0 1F                        ldy #search_order_offset
00229Br 3               @loop:
00229Br 3                               ; Move one wordlist id over into the search order.
00229Br 3  B5 00                        lda 0,x         ; The search order is a byte array
00229Dr 3  91 rr                        sta (up),y      ; so only save the LSB
00229Fr 3  C8                           iny
0022A0r 3               
0022A0r 3                               ; Remove it from the data stack.
0022A0r 3  E8                           inx
0022A1r 3  E8                           inx
0022A2r 3               
0022A2r 3                               ; See if that was the last one to process (first in the list).
0022A2r 3  C6 rr                        dec tmp1
0022A4r 3  D0 F5                        bne @loop
0022A6r 3               
0022A6r 3               @done:
0022A6r 3  60           z_set_order:    rts
0022A7r 3               
0022A7r 3               
0022A7r 3               
0022A7r 3               
0022A7r 3               ; ## S_QUOTE ( "string" -- )( -- addr u ) "Store string in memory"
0022A7r 3               ; ## "s""  auto  ANS core
0022A7r 3                       ; """https://forth-standard.org/standard/core/Sq
0022A7r 3                       ; Store address and length of string given, returning ( addr u ).
0022A7r 3                       ; ANS core claims this is compile-only, but the file set expands it
0022A7r 3                       ; to be interpreted, so it is a state-sensitive word, which in theory
0022A7r 3                       ; are evil. We follow general usage.
0022A7r 3                       ;
0022A7r 3                       ; Can also be realized as
0022A7r 3                       ;     : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE
0022A7r 3                       ; but it is used so much we want it in code.
0022A7r 3                       ; """
0022A7r 3               
0022A7r 3               xt_s_quote:
0022A7r 3                               ; tmp2 will be used to determine if we are handling
0022A7r 3                               ; escaped characters or not.  In this case, we are
0022A7r 3                               ; not, so set it to zero.
0022A7r 3  64 rr                        stz tmp2
0022A9r 3  64 rr                        stz tmp2+1
0022ABr 3               
0022ABr 3               s_quote_start:
0022ABr 3                               ; Make room on the data stack for the address.
0022ABr 3  CA                           dex
0022ACr 3  CA                           dex
0022ADr 3                               ; Make room on the data stack for the count.
0022ADr 3  CA                           dex
0022AEr 3  CA                           dex
0022AFr 3               
0022AFr 3                               ; Put a jmp over the string data with address to be filled
0022AFr 3                               ; in later.
0022AFr 3  A9 4C                        lda #$4C
0022B1r 3  20 rr rr                     jsr cmpl_a
0022B4r 3               
0022B4r 3                               ; Address to be filled in later, just use $4C for the moment
0022B4r 3  20 rr rr                     jsr cmpl_a
0022B7r 3  20 rr rr                     jsr cmpl_a
0022BAr 3               
0022BAr 3                               ; Save the current value of HERE on the data stack for the
0022BAr 3                               ; address of the string.
0022BAr 3  A5 rr                        lda cp
0022BCr 3  95 02                        sta 2,x
0022BEr 3  A5 rr                        lda cp+1
0022C0r 3  95 03                        sta 3,x
0022C2r 3               
0022C2r 3               @savechars_loop:
0022C2r 3                               ; Start saving the string into the dictionary up to the
0022C2r 3                               ; ending double quote. First, check to see if the input
0022C2r 3                               ; buffer is empty.
0022C2r 3  A5 rr                        lda toin+1              ; MSB
0022C4r 3  C5 rr                        cmp ciblen+1
0022C6r 3  90 2A                        bcc @input_fine         ; unsigned comparison
0022C8r 3               
0022C8r 3  A5 rr                        lda toin                ; LSB
0022CAr 3  C5 rr                        cmp ciblen
0022CCr 3  90 24                        bcc @input_fine
0022CEr 3               
0022CEr 3                               ; Input buffer is empty. Refill it. Refill calls accept,
0022CEr 3                               ; which uses tmp2 and tmp3. Save and restore them.
0022CEr 3  A5 rr                        lda tmp2
0022D0r 3  48                           pha
0022D1r 3  A5 rr                        lda tmp2+1
0022D3r 3  48                           pha
0022D4r 3  A5 rr                        lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
0022D6r 3  48                           pha
0022D7r 3               
0022D7r 3  20 rr rr                     jsr xt_refill           ; ( -- f )
0022DAr 3               
0022DAr 3  68                           pla
0022DBr 3  85 rr                        sta tmp3
0022DDr 3  68                           pla
0022DEr 3  85 rr                        sta tmp2+1
0022E0r 3  68                           pla
0022E1r 3  85 rr                        sta tmp2
0022E3r 3               
0022E3r 3                               ; Check result of refill.
0022E3r 3  B5 00                        lda 0,x
0022E5r 3  15 01                        ora 1,x
0022E7r 3  D0 05                        bne @refill_ok
0022E9r 3               
0022E9r 3                               ; Something when wrong with refill.
0022E9r 3  A9 06                        lda #err_refill
0022EBr 3  4C rr rr                     jmp error
0022EEr 3               
0022EEr 3               @refill_ok:
0022EEr 3                               ; Remove the refill flag from the data stack.
0022EEr 3  E8                           inx
0022EFr 3  E8                           inx
0022F0r 3               
0022F0r 3                               ; For refill success, jump back up to the empty check, just in
0022F0r 3                               ; case refill gave us an empty buffer (eg. empty/blank line of
0022F0r 3                               ; input)
0022F0r 3  80 D0                        bra @savechars_loop
0022F2r 3               
0022F2r 3               @input_fine:
0022F2r 3                               ; There should be at least one valid char to use.
0022F2r 3                               ; Calculate it's address at CIB+TOIN into tmp1
0022F2r 3  A5 rr                        lda cib
0022F4r 3  18                           clc
0022F5r 3  65 rr                        adc toin        ; LSB
0022F7r 3  85 rr                        sta tmp1
0022F9r 3  A5 rr                        lda cib+1
0022FBr 3  65 rr                        adc toin+1      ; MSB
0022FDr 3  85 rr                        sta tmp1+1
0022FFr 3               
0022FFr 3                               ; Get the character
0022FFr 3  B2 rr                        lda (tmp1)
002301r 3               
002301r 3                               ; Check to see if we are handling escaped characters.
002301r 3  24 rr                        bit tmp2
002303r 3  30 03                        bmi @handle_escapes    ; Only checking bit 7
002305r 3  4C rr rr                     jmp @regular_char
002308r 3               
002308r 3               @handle_escapes:
002308r 3                               ; We are handling escaped characters.  See if we have
002308r 3                               ; already seen the backslash.
002308r 3  24 rr                        bit tmp2+1
00230Ar 3  30 03                        bmi @escaped
00230Cr 3  4C rr rr                     jmp @not_escaped
00230Fr 3               
00230Fr 3               @escaped:
00230Fr 3               
00230Fr 3                               ; We have seen a backslash (previous character). Check to see if
00230Fr 3                               ; we are in the middle of a \x sequence (bit 6 of tmp2+1 will
00230Fr 3                               ; be clear in that case )
00230Fr 3  70 22                        bvs @check_esc_chars
002311r 3               
002311r 3                               ; We are in the middle of a \x sequence. Check to see if we
002311r 3                               ; are on the first or second digit.
002311r 3  A9 01                        lda #1
002313r 3  24 rr                        bit tmp2+1
002315r 3  D0 10                        bne @esc_x_second_digit
002317r 3               
002317r 3                               ; First digit.
002317r 3  E6 rr                        inc tmp2+1  ; Adjust flag for second digit next time.
002319r 3  B2 rr                        lda (tmp1)  ; Get the char again.
00231Br 3               
00231Br 3                               ; Convert to hex
00231Br 3  20 rr rr                     jsr convert_hex_value
00231Er 3               
00231Er 3                               ; This is the upper nybble, so move it up.
00231Er 3  0A                           asl
00231Fr 3  0A                           asl
002320r 3  0A                           asl
002321r 3  0A                           asl
002322r 3  85 rr                        sta tmp3    ; Save it for later.
002324r 3  4C rr rr                     jmp @next_character
002327r 3               
002327r 3               @esc_x_second_digit:
002327r 3               
002327r 3                               ; We are on the second hex digit of a \x sequence. Clear the
002327r 3                               ; escaped character flag (because we are handling it right
002327r 3                               ; here)
002327r 3  64 rr                        stz tmp2+1
002329r 3  B2 rr                        lda (tmp1)
00232Br 3               
00232Br 3                               ; Convert to hex, combine with value in tmp3
00232Br 3  20 rr rr                     jsr convert_hex_value
00232Er 3  05 rr                        ora tmp3
002330r 3               
002330r 3  4C rr rr                     jmp @save_character
002333r 3               
002333r 3               @check_esc_chars:
002333r 3                               ; Clear the escaped character flag (because we are
002333r 3                               ; handling it right here)
002333r 3  64 rr                        stz tmp2+1
002335r 3               
002335r 3                               ; Process the escaped character
002335r 3               @check_esc_a:
002335r 3  C9 61                        cmp #'a'
002337r 3  D0 05                        bne @check_esc_b
002339r 3               
002339r 3                               ; BEL (ASCII value 7)
002339r 3  A9 07                        lda #7
00233Br 3  4C rr rr                     jmp @save_character
00233Er 3               
00233Er 3               @check_esc_b:
00233Er 3  C9 62                        cmp #'b'
002340r 3  D0 05                        bne @check_esc_e
002342r 3               
002342r 3                               ; Backspace (ASCII value 8)
002342r 3  A9 08                        lda #8
002344r 3  4C rr rr                     jmp @save_character
002347r 3               
002347r 3               @check_esc_e:
002347r 3  C9 65                        cmp #'e'
002349r 3  D0 04                        bne @check_esc_f
00234Br 3               
00234Br 3                               ; ESC (ASCII value 27)
00234Br 3  A9 1B                        lda #27
00234Dr 3  80 75                        bra @save_character
00234Fr 3               
00234Fr 3               @check_esc_f:
00234Fr 3  C9 66                        cmp #'f'
002351r 3  D0 04                        bne @check_esc_l
002353r 3               
002353r 3                               ; FF (ASCII value 12)
002353r 3  A9 0C                        lda #12
002355r 3  80 6D                        bra @save_character
002357r 3               
002357r 3               @check_esc_l:
002357r 3  C9 6C                        cmp #'l'
002359r 3  D0 04                        bne @check_esc_m
00235Br 3               
00235Br 3                               ; LF (ASCII value 10)
00235Br 3  A9 0A                        lda #10
00235Dr 3  80 65                        bra @save_character
00235Fr 3               
00235Fr 3               @check_esc_m:
00235Fr 3                               ; This one is not like the others because we save two
00235Fr 3                               ; characters
00235Fr 3  C9 6D                        cmp #'m'
002361r 3  D0 09                        bne @check_esc_n
002363r 3               
002363r 3                               ; CR/LF pair (ASCII values 13, 10)
002363r 3  A9 0D                        lda #13
002365r 3  20 rr rr                     jsr cmpl_a
002368r 3  A9 0A                        lda #10
00236Ar 3  80 58                        bra @save_character
00236Cr 3               
00236Cr 3               @check_esc_n:
00236Cr 3  C9 6E                        cmp #'n'
00236Er 3  D0 04                        bne @check_esc_q
002370r 3               
002370r 3                               ; newline, impl. dependant, using LF (ASCII values 10)
002370r 3  A9 0A                        lda #10
002372r 3  80 50                        bra @save_character
002374r 3               
002374r 3               @check_esc_q:
002374r 3  C9 71                        cmp #'q'
002376r 3  D0 04                        bne @check_esc_r
002378r 3               
002378r 3                               ; Double quote (ASCII value 34)
002378r 3  A9 22                        lda #34
00237Ar 3  80 48                        bra @save_character
00237Cr 3               
00237Cr 3               @check_esc_r:
00237Cr 3  C9 72                        cmp #'r'
00237Er 3  D0 04                        bne @check_esc_t
002380r 3               
002380r 3                               ; CR (ASCII value 13)
002380r 3  A9 0D                        lda #13
002382r 3  80 40                        bra @save_character
002384r 3               
002384r 3               @check_esc_t:
002384r 3  C9 74                        cmp #'t'
002386r 3  D0 04                        bne @check_esc_v
002388r 3               
002388r 3                               ; Horizontal TAB (ASCII value 9)
002388r 3  A9 09                        lda #9
00238Ar 3  80 38                        bra @save_character
00238Cr 3               
00238Cr 3               @check_esc_v:
00238Cr 3  C9 76                        cmp #'v'
00238Er 3  D0 04                        bne @check_esc_z
002390r 3               
002390r 3                               ; Vertical TAB (ASCII value 11)
002390r 3  A9 0B                        lda #11
002392r 3  80 30                        bra @save_character
002394r 3               
002394r 3               @check_esc_z:
002394r 3  C9 7A                        cmp #'z'
002396r 3  D0 04                        bne @check_esc_quote
002398r 3               
002398r 3                               ; NULL (ASCII value 0)
002398r 3  A9 00                        lda #0
00239Ar 3  80 28                        bra @save_character
00239Cr 3               
00239Cr 3               @check_esc_quote:
00239Cr 3  C9 22                        cmp #$22
00239Er 3  D0 04                        bne @check_esc_x
0023A0r 3               
0023A0r 3                               ; Double quote (ASCII value 34)
0023A0r 3  A9 22                        lda #34
0023A2r 3  80 20                        bra @save_character
0023A4r 3               
0023A4r 3               @check_esc_x:
0023A4r 3  C9 78                        cmp #'x'
0023A6r 3  D0 06                        bne @check_esc_backslash
0023A8r 3               
0023A8r 3                               ; This one is difficult. We need to get the next TWO
0023A8r 3                               ; characters (which might require a refill in the middle)
0023A8r 3                               ; and combine them as two hex digits. We do this by
0023A8r 3                               ; clearing bit 6 of tmp2+1 to indicate we are in a digit
0023A8r 3                               ; and using bit 0 to keep track of which digit we are on.
0023A8r 3  A9 BE                        lda #$BE        ; Clear bits 6 and 0
0023AAr 3  85 rr                        sta tmp2+1
0023ACr 3  80 19                        bra @next_character
0023AEr 3               
0023AEr 3               @check_esc_backslash:
0023AEr 3  C9 5C                        cmp #$5C
0023B0r 3  D0 04                        bne @not_escaped
0023B2r 3               
0023B2r 3                               ; Backslash (ASCII value 92)
0023B2r 3  A9 5C                        lda #92
0023B4r 3  80 0E                        bra @save_character
0023B6r 3               
0023B6r 3               @not_escaped:
0023B6r 3                               ; Check for the backslash to see if we should escape
0023B6r 3                               ; the next char.
0023B6r 3  C9 5C                        cmp #$5C        ; The backslash char
0023B8r 3  D0 06                        bne @regular_char
0023BAr 3               
0023BAr 3                               ; We found a backslash.  Don't save anyhing, but set
0023BAr 3                               ; a flag (in tmp2+1) to handle the next char. We don't
0023BAr 3                               ; try to get the next char here as it may require a
0023BAr 3                               ; refill of the input buffer.
0023BAr 3  A9 FF                        lda #$FF
0023BCr 3  85 rr                        sta tmp2+1
0023BEr 3  80 07                        bra @next_character
0023C0r 3               
0023C0r 3               @regular_char:
0023C0r 3                               ; Check if the current character is the end of the string.
0023C0r 3  C9 22                        cmp #$22        ; ASCII for "
0023C2r 3  F0 0C                        beq @found_string_end
0023C4r 3               
0023C4r 3               @save_character:
0023C4r 3                               ; If we didn't reach the end of the string, compile this
0023C4r 3                               ; character into the dictionary
0023C4r 3  20 rr rr                     jsr cmpl_a
0023C7r 3               
0023C7r 3               @next_character:
0023C7r 3                               ; Move on to the next character.
0023C7r 3  E6 rr                        inc toin
0023C9r 3  D0 02                        bne @savechars_loop_longjump
0023CBr 3  E6 rr                        inc toin+1
0023CDr 3               
0023CDr 3               @savechars_loop_longjump:
0023CDr 3  4C rr rr                     jmp @savechars_loop
0023D0r 3               
0023D0r 3               @found_string_end:
0023D0r 3                               ; Use up the delimiter.
0023D0r 3  E6 rr                        inc toin
0023D2r 3  D0 02                        bne @1
0023D4r 3  E6 rr                        inc toin+1
0023D6r 3               @1:
0023D6r 3                               ; Calculate the length of the string, which is the
0023D6r 3                               ; difference between cp and the address of the start
0023D6r 3                               ; of the string (currently saved on the stack).
0023D6r 3  A5 rr                        lda cp
0023D8r 3  38                           sec
0023D9r 3  F5 02                        sbc 2,x
0023DBr 3  95 00                        sta 0,x         ; LSB
0023DDr 3  A5 rr                        lda cp+1
0023DFr 3  F5 03                        sbc 3,x
0023E1r 3  95 01                        sta 1,x         ; MSB
0023E3r 3               
0023E3r 3                               ; Update the address of the jump-over jmp instruction.
0023E3r 3                               ; First determine location of jmp instructions address.
0023E3r 3                               ; It should be 2 bytes before the start of the string.
0023E3r 3                               ; Compute it into tmp1, which is no longer being used.
0023E3r 3  B5 02                        lda 2,x
0023E5r 3  38                           sec
0023E6r 3  E9 02                        sbc #2
0023E8r 3  85 rr                        sta tmp1
0023EAr 3  B5 03                        lda 3,x
0023ECr 3  E9 00                        sbc #0          ; Propagate borrow
0023EEr 3  85 rr                        sta tmp1+1
0023F0r 3               
0023F0r 3                               ; Update the address of the jump to HERE.
0023F0r 3  A5 rr                        lda cp
0023F2r 3  92 rr                        sta (tmp1)
0023F4r 3  A0 01                        ldy #1
0023F6r 3  A5 rr                        lda cp+1
0023F8r 3  91 rr                        sta (tmp1),y
0023FAr 3               
0023FAr 3                               ; What happens next depends on the state (which is bad, but
0023FAr 3                               ; that's the way it works at the moment). If we are
0023FAr 3                               ; interpretating, we save the string to a transient buffer
0023FAr 3                               ; and return that address (used for file calls, see
0023FAr 3                               ; https://forth-standard.org/standard/file/Sq . If we're
0023FAr 3                               ; compiling, we just need SLITERAL
0023FAr 3  A5 rr                        lda state
0023FCr 3  05 rr                        ora state+1             ; paranoid
0023FEr 3  F0 03                        beq @done
002400r 3               
002400r 3                               ; Jump into the middle of the sliteral word, after the
002400r 3                               ; string data has been compiled into the dictionary,
002400r 3                               ; because we've already done that step.
002400r 3  20 rr rr                     jsr sliteral_const_str         ; ( addr u -- )
002403r 3               
002403r 3               @done:
002403r 3  60           z_s_quote:      rts
002404r 3               
002404r 3               
002404r 3               
002404r 3               ; ## S_TO_D ( u -- d ) "Convert single cell number to double cell"
002404r 3               ; ## "s>d"  auto  ANS core
002404r 3                       ; """https://forth-standard.org/standard/core/StoD"""
002404r 3               
002404r 3               xt_s_to_d:
002404r 3  20 rr rr                     jsr underflow_1
002407r 3               
002407r 3  CA                           dex
002408r 3  CA                           dex
002409r 3  74 00                        stz 0,x
00240Br 3  74 01                        stz 1,x
00240Dr 3               
00240Dr 3  B5 03                        lda 3,x
00240Fr 3  10 04                        bpl @done
002411r 3               
002411r 3                               ; negative, extend sign
002411r 3  D6 00                        dec 0,x
002413r 3  D6 01                        dec 1,x
002415r 3               @done:
002415r 3  60           z_s_to_d:       rts
002416r 3               
002416r 3               
002416r 3               
002416r 3               ; ## SAVE_BUFFERS ( -- ) "Save all dirty buffers to storage"
002416r 3               ; ## "save-buffers"  tested  ANS block
002416r 3                       ; """https://forth-standard.org/standard/block/SAVE-BUFFERS"""
002416r 3               
002416r 3               xt_save_buffers:
002416r 3                               ; Check the buffer status
002416r 3  A0 2C                        ldy #buffstatus_offset
002418r 3  B1 rr                        lda (up),y      ; Only bits 0 and 1 are used, so only
00241Ar 3  C9 03                        cmp #3          ; LSB is needed.
00241Cr 3  D0 12                        bne @done       ; Either not used or not dirty = done!
00241Er 3               
00241Er 3                               ; We need to save the block.
00241Er 3  20 rr rr                     jsr xt_blkbuffer
002421r 3  20 rr rr                     jsr xt_buffblocknum
002424r 3  20 rr rr                     jsr xt_fetch
002427r 3  20 rr rr                     jsr xt_block_write
00242Ar 3               
00242Ar 3                               ; Mark the buffer as clean now.
00242Ar 3  A9 01                        lda #1
00242Cr 3  A0 2C                        ldy #buffstatus_offset
00242Er 3  91 rr                        sta (up),y
002430r 3               
002430r 3               @done:
002430r 3  60           z_save_buffers: rts
002431r 3               
002431r 3               
002431r 3               
002431r 3               ; ## SCR ( -- addr ) "Push address of variable holding last screen listed"
002431r 3               ; ## "scr"  auto  ANS block ext
002431r 3                       ; """https://forth-standard.org/standard/block/SCR"""
002431r 3               xt_scr:
002431r 3                               ; SCR is at UP + scr_offset
002431r 3  CA                           dex
002432r 3  CA                           dex
002433r 3  18                           clc
002434r 3  A5 rr                        lda up
002436r 3  69 02                        adc #scr_offset ; Add offset
002438r 3  95 00                        sta 0,x
00243Ar 3  A5 rr                        lda up+1
00243Cr 3  69 00                        adc #0          ; Adding carry
00243Er 3  95 01                        sta 1,x
002440r 3               
002440r 3  60           z_scr:          rts
002441r 3               
002441r 3               
002441r 3               ; ## SEARCH ( addr1 u1 addr2 u2 -- addr3 u3 flag) "Search for a substring"
002441r 3               ; ## "search"   auto  ANS string
002441r 3                       ; """https://forth-standard.org/standard/string/SEARCH
002441r 3                       ; Search for string2 (denoted by addr2 u2) in string1 (denoted by
002441r 3                       ; addr1 u1). If a match is found the flag will be true and
002441r 3                       ; addr3 will have the address of the start of the match and u3 will have
002441r 3                       ; the number of characters remaining from the match point to the end
002441r 3                       ; of the original string1. If a match is not found, the flag will be
002441r 3                       ; false and addr3 and u3 will be the original string1's addr1 and u1.
002441r 3                       ; """
002441r 3               
002441r 3               xt_search:
002441r 3  20 rr rr                     jsr underflow_4
002444r 3               
002444r 3                               ; ANS says if the second string is a zero-length string it
002444r 3                               ; automatically matches.
002444r 3  B5 00                        lda 0,x
002446r 3  15 01                        ora 1,x
002448r 3  D0 0B                        bne @start_search
00244Ar 3               
00244Ar 3                               ; The second string is a zero length string.  Just remove
00244Ar 3                               ; the second string and put a true flag.
00244Ar 3  E8                           inx             ; Remove u2
00244Br 3  E8                           inx
00244Cr 3  A9 FF                        lda #$FF        ; Turn addr2 into a true flag
00244Er 3  95 00                        sta 0,x
002450r 3  95 01                        sta 1,x
002452r 3  4C rr rr                     jmp z_search
002455r 3               
002455r 3               @start_search:
002455r 3                               ; Put an offset (starting at zero) on the stack.
002455r 3  20 rr rr                     jsr xt_zero
002458r 3               
002458r 3               @search_loop:
002458r 3                               ; We stop (not found) when u2 + offset > u1
002458r 3                               ; Calculate u2+offset into tmp1
002458r 3  18                           clc
002459r 3  B5 00                        lda 0,x
00245Br 3  75 02                        adc 2,x
00245Dr 3  85 rr                        sta tmp1
00245Fr 3  B5 01                        lda 1,x
002461r 3  75 03                        adc 3,x
002463r 3               
002463r 3               
002463r 3                               ; Compare to u1. Start with the high byte
002463r 3  D5 07                        cmp 7,x
002465r 3  90 12                        bcc @init_comparison ; Obviously less
002467r 3  D0 06                        bne @not_found
002469r 3               
002469r 3                               ; The upper address byte matched - check the lower byte
002469r 3                               ; Load u1 first so we can use just a carry to check.
002469r 3  B5 06                        lda 6,x
00246Br 3  C5 rr                        cmp tmp1
00246Dr 3  B0 0A                        bcs @init_comparison
00246Fr 3               
00246Fr 3               @not_found:
00246Fr 3                               ; The substring isn't in the main string.
00246Fr 3                               ; Return just the main string and a false flag.
00246Fr 3  E8                           inx             ; Remove offset
002470r 3  E8                           inx
002471r 3  E8                           inx             ; Remove u2
002472r 3  E8                           inx
002473r 3  74 00                        stz 0,x         ; Turn addr2 into a false flag
002475r 3  74 01                        stz 1,x
002477r 3  80 66                        bra z_search
002479r 3               
002479r 3               @init_comparison:
002479r 3                               ; Use tmp1 to hold address in string 1.
002479r 3                               ; Use tmp2 to hold address in string 2.
002479r 3                               ; Use tmp3 to hold the number of characters left to check.
002479r 3               
002479r 3                               ; Compute the starting address in string 1
002479r 3                               ; as addr1 + offset
002479r 3  18                           clc
00247Ar 3  B5 08                        lda 8,x
00247Cr 3  75 00                        adc 0,x
00247Er 3  85 rr                        sta tmp1
002480r 3  B5 09                        lda 9,x
002482r 3  75 01                        adc 1,x
002484r 3  85 rr                        sta tmp1+1
002486r 3               
002486r 3                               ; The starting address in string 2 is just addr2.
002486r 3  B5 04                        lda 4,x
002488r 3  85 rr                        sta tmp2
00248Ar 3  B5 05                        lda 5,x
00248Cr 3  85 rr                        sta tmp2+1
00248Er 3               
00248Er 3                               ; The number of characters to check is u2.
00248Er 3  B5 02                        lda 2,x
002490r 3  85 rr                        sta tmp3
002492r 3  B5 03                        lda 3,x
002494r 3  85 rr                        sta tmp3+1
002496r 3               
002496r 3               @comparison_loop:
002496r 3                               ; Check to see if the current characters match.
002496r 3  B2 rr                        lda (tmp1)
002498r 3  D2 rr                        cmp (tmp2)
00249Ar 3  F0 05                        beq @letters_match
00249Cr 3               
00249Cr 3                               ; One of the letters didn't match.
00249Cr 3                               ; Increment the offset and try again.
00249Cr 3  20 rr rr                     jsr xt_one_plus
00249Fr 3  80 B7                        bra @search_loop
0024A1r 3               
0024A1r 3               @letters_match:
0024A1r 3                               ; The letters match.  Advance the pointers until the
0024A1r 3                               ; count reaches zero.
0024A1r 3  E6 rr                        inc tmp1
0024A3r 3  D0 02                        bne @1
0024A5r 3  E6 rr                        inc tmp1+1
0024A7r 3               @1:
0024A7r 3  E6 rr                        inc tmp2
0024A9r 3  D0 02                        bne @2
0024ABr 3  E6 rr                        inc tmp2+1
0024ADr 3               @2:
0024ADr 3                               ; Decrement the count of remaining letters to check.
0024ADr 3  A5 rr                        lda tmp3
0024AFr 3  D0 02                        bne @3
0024B1r 3  C6 rr                        dec tmp3+1
0024B3r 3               @3:
0024B3r 3  C6 rr                        dec tmp3
0024B5r 3               
0024B5r 3                               ; Check if we've reached zero.
0024B5r 3  A5 rr                        lda tmp3
0024B7r 3  05 rr                        ora tmp3+1
0024B9r 3  D0 DB                        bne @comparison_loop ; Check the next letter
0024BBr 3               
0024BBr 3                               ; We've run out of letters and they all match!
0024BBr 3                               ; Return (addr1+offset) (u1-offset) true
0024BBr 3                               ; Add offset to addr1.
0024BBr 3  18                           clc
0024BCr 3  B5 00                        lda 0,x
0024BEr 3  75 08                        adc 8,x
0024C0r 3  95 08                        sta 8,x
0024C2r 3  B5 01                        lda 1,x
0024C4r 3  75 09                        adc 9,x
0024C6r 3  95 09                        sta 9,x
0024C8r 3               
0024C8r 3                               ; Subtract offset from u1.
0024C8r 3  38                           sec
0024C9r 3  B5 06                        lda 6,x
0024CBr 3  F5 00                        sbc 0,x
0024CDr 3  95 06                        sta 6,x
0024CFr 3  B5 07                        lda 7,x
0024D1r 3  F5 01                        sbc 1,x
0024D3r 3  95 07                        sta 7,x
0024D5r 3               
0024D5r 3                               ; Replace addr2, u2, and offset with a true flag.
0024D5r 3  E8                           inx             ; drop offset
0024D6r 3  E8                           inx
0024D7r 3  E8                           inx             ; drop u2
0024D8r 3  E8                           inx
0024D9r 3  A9 FF                        lda #$FF
0024DBr 3  95 00                        sta 0,x         ; Turn addr2 into a true flag.
0024DDr 3  95 01                        sta 1,x
0024DFr 3               
0024DFr 3  60           z_search:       rts
0024E0r 3               
0024E0r 3               
0024E0r 3               
0024E0r 3               ; ## SEMICOLON ( -- ) "End compilation of new word"
0024E0r 3               ; ## ";"  auto  ANS core
0024E0r 3                       ; """https://forth-standard.org/standard/core/Semi
0024E0r 3                       ; End the compilation of a new word into the Dictionary.
0024E0r 3                       ;
0024E0r 3                       ; When we
0024E0r 3                       ; enter this, WORKWORD is pointing to the nt_ of this word in the
0024E0r 3                       ; Dictionary, DP to the previous word, and CP to the next free byte.
0024E0r 3                       ; A Forth definition would be (see "Starting Forth"):
0024E0r 3                       ; : POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE  Following the
0024E0r 3                       ; practice of Gforth, we warn here if a word has been redefined.
0024E0r 3                       ; """
0024E0r 3               
0024E0r 3               xt_semicolon:
0024E0r 3                               ; Check if this is a : word or a :NONAME word.
0024E0r 3  24 rr                        bit status
0024E2r 3  70 11                        bvs @colonword
0024E4r 3               
0024E4r 3                               ; This is a :NONAME word - just put an RTS on the end and
0024E4r 3                               ; the address (held in workword) on the stack.
0024E4r 3  A9 60                        lda #$60                ; opcode for RTS
0024E6r 3  20 rr rr                     jsr cmpl_a
0024E9r 3               
0024E9r 3  CA                           dex
0024EAr 3  CA                           dex
0024EBr 3  A5 rr                        lda workword
0024EDr 3  95 00                        sta 0,x
0024EFr 3  A5 rr                        lda workword+1
0024F1r 3  95 01                        sta 1,x
0024F3r 3  80 45                        bra @semicolon_done
0024F5r 3               
0024F5r 3               @colonword:
0024F5r 3                               ; CP is the byte that will be the address we use in the
0024F5r 3                               ; header as the end-of-compile address (z_word). This is
0024F5r 3                               ; six bytes down from the header
0024F5r 3  A0 06                        ldy #6
0024F7r 3  A5 rr                        lda cp
0024F9r 3  91 rr                        sta (workword),y
0024FBr 3  C8                           iny
0024FCr 3  A5 rr                        lda cp+1
0024FEr 3  91 rr                        sta (workword),y
002500r 3               
002500r 3                               ; Allocate one further byte and save the RTS instruction
002500r 3                               ; there
002500r 3  A9 60                        lda #$60                ; opcode for RTS
002502r 3  20 rr rr                     jsr cmpl_a
002505r 3               
002505r 3                               ; Before we formally add the word to the Dictionary, we
002505r 3                               ; check to see if it is already present, and if yes, we
002505r 3                               ; warn the user.
002505r 3               
002505r 3                               ; See if word already in Dictionary.
002505r 3                               ; (STATUS bit 7 will be high as CREATE already
002505r 3                               ;  checked for us.)
002505r 3  24 rr                        bit status
002507r 3  10 26                        bpl @new_word   ; Bit 7 is clear = new word
002509r 3               
002509r 3                               ; We start by putting the string of the
002509r 3                               ; word we're defining on the stack
002509r 3  CA                           dex
00250Ar 3  CA                           dex
00250Br 3  CA                           dex
00250Cr 3  CA                           dex
00250Dr 3               
00250Dr 3                               ; WORKWORD points to the beginning of the head of our new
00250Dr 3                               ; word, where the first byte is the length of the string
00250Dr 3                               ; We can't use LATESTNT because we haven't added the new
00250Dr 3                               ; word to the Dictionary yet
00250Dr 3  B2 rr                        lda (workword)
00250Fr 3  95 00                        sta 0,x
002511r 3  74 01                        stz 1,x
002513r 3               
002513r 3                               ; Eight bytes below WORKWORD is the actual beginning of
002513r 3                               ; the string
002513r 3  A5 rr                        lda workword
002515r 3  18                           clc
002516r 3  69 08                        adc #8
002518r 3  95 02                        sta 2,x
00251Ar 3  A5 rr                        lda workword+1
00251Cr 3  69 00                        adc #0                  ; only want carry
00251Er 3  95 03                        sta 3,x
002520r 3               
002520r 3                               ; This word is already in the Dictionary, so we print a
002520r 3                               ; warning to the user.
002520r 3  A9 02                        lda #str_redefined       ; address of string "redefined"
002522r 3  20 rr rr                     jsr print_string_no_lf
002525r 3               
002525r 3                               ; Now we print the offending word.
002525r 3  20 rr rr                     jsr xt_type
002528r 3  20 rr rr                     jsr xt_space
00252Br 3               
00252Br 3                               ; Clear bit 7 of status (so future words will print message
00252Br 3                               ; by defaut)
00252Br 3  A9 80                        lda #%10000000
00252Dr 3  14 rr                        trb status
00252Fr 3               
00252Fr 3               @new_word:
00252Fr 3                               ; Let's get this over with. Save beginning of our word
00252Fr 3                               ; as new last word in the Dictionary
00252Fr 3  A5 rr                        lda workword
002531r 3  85 rr                        sta dp
002533r 3  A5 rr                        lda workword+1
002535r 3  85 rr                        sta dp+1
002537r 3  20 rr rr                     jsr dp_to_current       ; Save the updated DP to the
00253Ar 3                                                       ; CURRENT wordlist.
00253Ar 3               @semicolon_done:
00253Ar 3                               ; Word definition complete. Return compile flag to zero
00253Ar 3                               ; to return to interpret mode
00253Ar 3  64 rr                        stz state
00253Cr 3  64 rr                        stz state+1
00253Er 3               
00253Er 3  60           z_semicolon:    rts
00253Fr 3               
00253Fr 3               
00253Fr 3               
00253Fr 3               ; ## SIGN ( n -- ) "Add minus to pictured output"
00253Fr 3               ; ## "sign"  auto  ANS core
00253Fr 3                       ; """https://forth-standard.org/standard/core/SIGN
00253Fr 3                       ;
00253Fr 3                       ; Code based on
00253Fr 3                       ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth
00253Fr 3                       ; Original Forth code is   0< IF ASCII - HOLD THEN
00253Fr 3                       ; """
00253Fr 3               
00253Fr 3               xt_sign:
00253Fr 3  20 rr rr                     jsr underflow_1
002542r 3               
002542r 3  B5 01                        lda 1,x         ; check MSB of TOS
002544r 3  30 04                        bmi @minus
002546r 3               
002546r 3  E8                           inx
002547r 3  E8                           inx
002548r 3  80 09                        bra @done
00254Ar 3               @minus:
00254Ar 3  A9 2D                        lda #$2D        ; ASCII for "-"
00254Cr 3  95 00                        sta 0,x         ; overwrite TOS
00254Er 3  74 01                        stz 1,x         ; paranoid
002550r 3               
002550r 3  20 rr rr                     jsr xt_hold
002553r 3               @done:
002553r 3  60           z_sign:         rts
002554r 3               
002554r 3               
002554r 3               
002554r 3               ; ## SLASH ( n1 n2 -- n ) "Divide NOS by TOS"
002554r 3               ; ## "/"  auto  ANS core
002554r 3                       ; """https://forth-standard.org/standard/core/Div
002554r 3                       ;
002554r 3                       ; Forth code is either  >R S>D R> FM/MOD SWAP DROP
002554r 3                       ; or >R S>D R> SM/REM SWAP DROP -- we use SM/REM in Tali Forth.
002554r 3                       ; This code is currently unoptimized. This code without the SLASH
002554r 3                       ; DROP at the end is /MOD, so we share the code as far as possible.
002554r 3                       ; """
002554r 3               
002554r 3               xt_slash:
002554r 3                               ; With all the multiplication going on, it would be hard to
002554r 3                               ; make sure that one of our temporary variables is not
002554r 3                               ; overwritten. We make sure that doesn't happen by taking the
002554r 3                               ; hit of pushing the flag to the 65c02's stack
002554r 3  A9 00                        lda #0
002556r 3  48                           pha
002557r 3  80 03                        bra _common
002559r 3               
002559r 3               xt_slash_mod:
002559r 3                               ; Note that /MOD accesses this code
002559r 3  A9 FF                        lda #$FF
00255Br 3  48                           pha             ; falls through to _common
00255Cr 3               
00255Cr 3               _common:
00255Cr 3  20 rr rr                     jsr xt_to_r             ; >R
00255Fr 3  20 rr rr                     jsr xt_s_to_d           ; S>D
002562r 3  20 rr rr                     jsr xt_r_from           ; R>
002565r 3  20 rr rr                     jsr xt_sm_slash_rem     ; SM/REM
002568r 3               
002568r 3                               ; Get the flag back from the 65c02's stack. Zero is SLASH,
002568r 3                               ; $FF is SLASH MOD
002568r 3  68                           pla
002569r 3  D0 05                        bne @done
00256Br 3               
00256Br 3                               ; The following code is for SLASH only
00256Br 3  20 rr rr                     jsr xt_swap
00256Er 3  E8                           inx             ; DROP
00256Fr 3  E8                           inx
002570r 3               @done:
002570r 3               z_slash_mod:
002570r 3  60           z_slash:        rts
002571r 3               
002571r 3               
002571r 3               
002571r 3               ; ## SLASH_MOD ( n1 n2 -- n3 n4 ) "Divide NOS by TOS with a remainder"
002571r 3               ; ## "/mod"  auto  ANS core
002571r 3                       ; """https://forth-standard.org/standard/core/DivMOD
002571r 3                       ;
002571r 3                       ; This is a dummy entry, the actual code is shared with SLASH
002571r 3                       ; """
002571r 3               
002571r 3               
002571r 3               ; ## SLASH_STRING ( addr u n -- addr u ) "Shorten string by n"
002571r 3               ; ## "/string"  auto  ANS string
002571r 3                       ; """https://forth-standard.org/standard/string/DivSTRING
002571r 3                       ;
002571r 3                       ; Forth code is
002571r 3                       ; : /STRING ( ADDR U N -- ADDR U ) ROT OVER + ROT ROT - ;
002571r 3                       ; Put differently, we need to add TOS and 3OS, and subtract
002571r 3                       ; TOS from NOS, and then drop TOS
002571r 3                       ; """
002571r 3               
002571r 3               xt_slash_string:
002571r 3  20 rr rr                     jsr underflow_3
002574r 3               
002574r 3  18                           clc             ; 3OS+TOS
002575r 3  B5 00                        lda 0,x
002577r 3  75 04                        adc 4,x
002579r 3  95 04                        sta 4,x
00257Br 3               
00257Br 3  B5 01                        lda 1,x
00257Dr 3  75 05                        adc 5,x
00257Fr 3  95 05                        sta 5,x
002581r 3               
002581r 3  38                           sec             ; NOS-TOS
002582r 3  B5 02                        lda 2,x
002584r 3  F5 00                        sbc 0,x
002586r 3  95 02                        sta 2,x
002588r 3               
002588r 3  B5 03                        lda 3,x
00258Ar 3  F5 01                        sbc 1,x
00258Cr 3  95 03                        sta 3,x
00258Er 3               
00258Er 3  E8                           inx
00258Fr 3  E8                           inx
002590r 3               
002590r 3  60           z_slash_string: rts
002591r 3               
002591r 3               
002591r 3               
002591r 3               ; ## SLITERAL ( addr u -- )( -- addr u ) "Compile a string for runtime"
002591r 3               ; ## "sliteral" auto  ANS string
002591r 3                       ; """https://forth-standard.org/standard/string/SLITERAL
002591r 3                       ; Add the runtime for an existing string.
002591r 3                       ; """
002591r 3               
002591r 3               xt_sliteral:
002591r 3  20 rr rr                     jsr underflow_2
002594r 3               
002594r 3                               ; We can't assume that ( addr u ) of the current string is in
002594r 3                               ; a stable area (eg. already in the dictionary.) Copy the
002594r 3                               ; string data into the dictionary using move.
002594r 3               
002594r 3                               ; Put a jmp over the string data with address to be filled
002594r 3                               ; in later.
002594r 3  A9 4C                        lda #$4C
002596r 3  20 rr rr                     jsr cmpl_a
002599r 3               
002599r 3                               ; Address to be filled in later.
002599r 3  20 rr rr                     jsr cmpl_a
00259Cr 3  20 rr rr                     jsr cmpl_a
00259Fr 3               
00259Fr 3                               ; Turn the data stack from ( addr u ) into
00259Fr 3                               ; ( here u addr here u ) so move can be called with
00259Fr 3                               ; the remaining items on the stack ready for processing.
00259Fr 3                               ; Reserve three extra words on the stack.
00259Fr 3  8A                           txa
0025A0r 3  38                           sec
0025A1r 3  E9 06                        sbc #6
0025A3r 3  AA                           tax
0025A4r 3               
0025A4r 3                               ; Move addr down from TOS-4 to TOS-2
0025A4r 3  B5 08                        lda 8,x
0025A6r 3  95 04                        sta 4,x
0025A8r 3  B5 09                        lda 9,x
0025AAr 3  95 05                        sta 5,x
0025ACr 3               
0025ACr 3                               ; Copy u from TOS-3 to TOS
0025ACr 3  B5 06                        lda 6,x
0025AEr 3  95 00                        sta 0,x
0025B0r 3  B5 07                        lda 7,x
0025B2r 3  95 01                        sta 1,x
0025B4r 3               
0025B4r 3                               ; Put HERE into TOS-1 and TOS-4
0025B4r 3  A5 rr                        lda cp
0025B6r 3  95 08                        sta 8,x
0025B8r 3  95 02                        sta 2,x
0025BAr 3  A5 rr                        lda cp+1
0025BCr 3  95 09                        sta 9,x
0025BEr 3  95 03                        sta 3,x
0025C0r 3               
0025C0r 3                               ; Copy the string into the dictionary.
0025C0r 3  20 rr rr                     jsr xt_move
0025C3r 3               
0025C3r 3                               ; Update cp.
0025C3r 3  18                           clc
0025C4r 3  A5 rr                        lda cp
0025C6r 3  75 00                        adc 0,x
0025C8r 3  85 rr                        sta cp
0025CAr 3  A5 rr                        lda cp+1
0025CCr 3  75 01                        adc 1,x
0025CEr 3  85 rr                        sta cp+1
0025D0r 3               
0025D0r 3                               ; Update the address of the jump-over jmp instruction.
0025D0r 3                               ; First determine location of jmp instructions address.
0025D0r 3                               ; It should be 2 bytes before the start of the string.
0025D0r 3               
0025D0r 3                               ; Compute it into tmp1, which is no longer being used.
0025D0r 3  B5 02                        lda 2,x
0025D2r 3  38                           sec
0025D3r 3  E9 02                        sbc #2
0025D5r 3  85 rr                        sta tmp1
0025D7r 3  B5 03                        lda 3,x
0025D9r 3  E9 00                        sbc #0          ; Propagate borrow
0025DBr 3  85 rr                        sta tmp1+1
0025DDr 3               
0025DDr 3                               ; Update the address of the jump to HERE.
0025DDr 3  A5 rr                        lda cp
0025DFr 3  92 rr                        sta (tmp1)
0025E1r 3  A0 01                        ldy #1
0025E3r 3  A5 rr                        lda cp+1
0025E5r 3  91 rr                        sta (tmp1),y
0025E7r 3               
0025E7r 3                               ; Stack is now ( addr2 u ) where addr2 is the new
0025E7r 3                               ; location in the dictionary.
0025E7r 3               
0025E7r 3               sliteral_const_str:
0025E7r 3                               ; Compile a subroutine jump to the runtime of SLITERAL that
0025E7r 3                               ; pushes the new ( addr u ) pair to the Data Stack.
0025E7r 3                               ; When we're done, the code will look like this:
0025E7r 3               
0025E7r 3                               ; xt -->    jmp a
0025E7r 3                               ;           <string data bytes>
0025E7r 3                               ;  a -->    jsr sliteral_runtime
0025E7r 3                               ;           <string address>
0025E7r 3                               ;           <string length>
0025E7r 3                               ; rts -->
0025E7r 3               
0025E7r 3                               ; This means we'll have to adjust the return address for two
0025E7r 3                               ; cells, not just one
0025E7r 3  A0 rr                        ldy #>sliteral_runtime
0025E9r 3  A9 rr                        lda #<sliteral_runtime
0025EBr 3  20 rr rr                     jsr cmpl_subroutine
0025EEr 3               
0025EEr 3                               ; We want to have the address end up as NOS and the length
0025EEr 3                               ; as TOS, so we store the address first
0025EEr 3  B4 03                        ldy 3,x                ; address MSB
0025F0r 3  B5 02                        lda 2,x                ; address LSB
0025F2r 3  20 rr rr                     jsr cmpl_word
0025F5r 3               
0025F5r 3  B4 01                        ldy 1,x                ; length MSB
0025F7r 3  B5 00                        lda 0,x                ; length LSB
0025F9r 3  20 rr rr                     jsr cmpl_word
0025FCr 3               
0025FCr 3                               ; clean up and leave
0025FCr 3  E8                           inx
0025FDr 3  E8                           inx
0025FEr 3  E8                           inx
0025FFr 3  E8                           inx
002600r 3               
002600r 3  60           z_sliteral:     rts
002601r 3               
002601r 3               
002601r 3               sliteral_runtime:
002601r 3               
002601r 3                       ; """Run time behaviour of SLITERAL: Push ( addr u ) of string to
002601r 3                       ; the Data Stack. We arrive here with the return address as the
002601r 3                       ; top of Return Stack, which points to the address of the string
002601r 3                       ; """
002601r 3  CA                           dex
002602r 3  CA                           dex
002603r 3  CA                           dex
002604r 3  CA                           dex
002605r 3               
002605r 3                               ; Get the address of the string address off the stack and
002605r 3                               ; increase by one because of the RTS mechanics
002605r 3  68                           pla
002606r 3  85 rr                        sta tmp1        ; LSB of address
002608r 3  68                           pla
002609r 3  85 rr                        sta tmp1+1      ; MSB of address
00260Br 3               
00260Br 3                               ; Walk through both and save them
00260Br 3  A0 01                        ldy #1          ; adjust for JSR/RTS mechanics on 65c02
00260Dr 3  B1 rr                        lda (tmp1),y
00260Fr 3  95 02                        sta 2,x         ; LSB of address
002611r 3  C8                           iny
002612r 3               
002612r 3  B1 rr                        lda (tmp1),y
002614r 3  95 03                        sta 3,x         ; MSB of address
002616r 3  C8                           iny
002617r 3               
002617r 3  B1 rr                        lda (tmp1),y
002619r 3  95 00                        sta 0,x         ; LSB of length
00261Br 3  C8                           iny
00261Cr 3               
00261Cr 3  B1 rr                        lda (tmp1),y
00261Er 3  95 01                        sta 1,x         ; MSB of length
002620r 3               
002620r 3                               ; restore return address
002620r 3  18                           clc
002621r 3  A5 rr                        lda tmp1
002623r 3  69 04                        adc #4
002625r 3  A8                           tay             ; LSB
002626r 3  A5 rr                        lda tmp1+1
002628r 3  69 00                        adc #0          ; we only need carry
00262Ar 3  48                           pha             ; MSB
00262Br 3  5A                           phy
00262Cr 3               
00262Cr 3  60                           rts
00262Dr 3               
00262Dr 3               
00262Dr 3               
00262Dr 3               ; ## SM_SLASH_REM ( d n1 -- n2 n3 ) "Symmetic signed division"
00262Dr 3               ; ## "sm/rem"  auto  ANS core
00262Dr 3                       ; """https://forth-standard.org/standard/core/SMDivREM
00262Dr 3                       ; Symmetic signed division. Compare FM/MOD. Based on F-PC 3.6
00262Dr 3                       ; by Ulrich Hoffmann. See http://www.xlerb.de/uho/ansi.seq
00262Dr 3                       ;
00262Dr 3                       ; Forth:
00262Dr 3                       ; OVER >R 2DUP XOR 0< >R ABS >R DABS R> UM/MOD R> ?NEGATE SWAP
00262Dr 3                       ; R> ?NEGATE SWAP
00262Dr 3                       ; """
00262Dr 3               
00262Dr 3               xt_sm_slash_rem:
00262Dr 3  20 rr rr                     jsr underflow_3 ; contains double number
002630r 3               
002630r 3                               ; push MSB of high cell of d to Data Stack so we can check
002630r 3                               ; its sign later
002630r 3  B5 03                        lda 3,x
002632r 3  48                           pha
002633r 3               
002633r 3                               ; XOR the MSB of the high cell of d and n1 so we figure out
002633r 3                               ; its sign later as well
002633r 3  B5 01                        lda 1,x
002635r 3  55 03                        eor 3,x
002637r 3  48                           pha
002638r 3               
002638r 3                               ; Prepare division by getting absolute of n1 and d
002638r 3  20 rr rr                     jsr xt_abs
00263Br 3  E8                           inx             ; pretend we pushed n1 to R
00263Cr 3  E8                           inx
00263Dr 3               
00263Dr 3  20 rr rr                     jsr xt_dabs
002640r 3  CA                           dex
002641r 3  CA                           dex
002642r 3               
002642r 3  20 rr rr                     jsr xt_um_slash_mod     ; UM/MOD
002645r 3               
002645r 3                               ; if the XOR compiled above is negative, negate the
002645r 3                               ; quotient (n3)
002645r 3  68                           pla
002646r 3  10 03                        bpl @1
002648r 3  20 rr rr                     jsr xt_negate
00264Br 3               @1:
00264Br 3                               ; if d was negative, negate the remainder (n2)
00264Br 3  68                           pla
00264Cr 3  10 07                        bpl @done
00264Er 3               
00264Er 3  E8                           inx             ; pretend we pushed quotient to R
00264Fr 3  E8                           inx
002650r 3  20 rr rr                     jsr xt_negate
002653r 3  CA                           dex
002654r 3  CA                           dex
002655r 3               
002655r 3               @done:
002655r 3  60           z_sm_slash_rem: rts
002656r 3               
002656r 3               
002656r 3               
002656r 3               ; ## SOURCE ( -- addr u ) "Return location and size of input buffer""
002656r 3               ; ## "source"  auto  ANS core
002656r 3                       ; """https://forth-standard.org/standard/core/SOURCE"""
002656r 3               xt_source:
002656r 3                               ; add address
002656r 3  CA                           dex
002657r 3  CA                           dex
002658r 3  A5 rr                        lda cib
00265Ar 3  95 00                        sta 0,x
00265Cr 3  A5 rr                        lda cib+1
00265Er 3  95 01                        sta 1,x
002660r 3               
002660r 3                               ; add size
002660r 3  CA                           dex
002661r 3  CA                           dex
002662r 3  A5 rr                        lda ciblen
002664r 3  95 00                        sta 0,x
002666r 3  A5 rr                        lda ciblen+1
002668r 3  95 01                        sta 1,x
00266Ar 3               
00266Ar 3  60           z_source:       rts
00266Br 3               
00266Br 3               
00266Br 3               ; ## SOURCE_ID ( -- n ) "Return source identifier"
00266Br 3               ; ## "source-id"  tested  ANS core ext
00266Br 3                       ; """https://forth-standard.org/standard/core/SOURCE-ID Identify the
00266Br 3                       ; input source unless it is a block (s. Conklin & Rather p. 156). This
00266Br 3                       ; will give the input source: 0 is keyboard, -1 ($FFFF) is character
00266Br 3                       ; string, and a text file gives the fileid.
00266Br 3                       ; """
00266Br 3               xt_source_id:
00266Br 3  CA                           dex
00266Cr 3  CA                           dex
00266Dr 3               
00266Dr 3  A5 rr                        lda insrc
00266Fr 3  95 00                        sta 0,x
002671r 3  A5 rr                        lda insrc+1
002673r 3  95 01                        sta 1,x
002675r 3               
002675r 3  60           z_source_id:    rts
002676r 3               
002676r 3               
002676r 3               ; ## SPACE ( -- ) "Print a single space"
002676r 3               ; ## "space"  auto  ANS core
002676r 3                       ; """https://forth-standard.org/standard/core/SPACE"""
002676r 3               xt_space:
002676r 3  A9 20                        lda #AscSP
002678r 3  20 rr rr                     jsr emit_a
00267Br 3               
00267Br 3  60           z_space:        rts
00267Cr 3               
00267Cr 3               
00267Cr 3               ; ## SPACES ( u -- ) "Print a number of spaces"
00267Cr 3               ; ## "spaces"  auto  ANS core
00267Cr 3                       ; """https://forth-standard.org/standard/core/SPACES"""
00267Cr 3               
00267Cr 3               xt_spaces:
00267Cr 3  20 rr rr                     jsr underflow_1
00267Fr 3               
00267Fr 3                               ; catch any zero in TOS fast
00267Fr 3  B5 00                        lda 0,x
002681r 3  15 01                        ora 1,x
002683r 3  F0 2A                        beq @done
002685r 3               
002685r 3                               ; Usually we're only going to print far less than 256 spaces,
002685r 3                               ; so we create a quick loop for that. Short loop could be realized
002685r 3                               ; as a separate subroutine, but unless we're really pressed for
002685r 3                               ; memory at some point, this is faster
002685r 3  B4 01                        ldy 1,x
002687r 3  D0 0C                        bne @lots_of_spaces
002689r 3               
002689r 3  B4 00                        ldy 0,x
00268Br 3               @quick_loop:
00268Br 3                               ; we reach here knowing that there must be a number that is not
00268Br 3                               ; zero in the TOS
00268Br 3  A9 20                        lda #AscSP
00268Dr 3  20 rr rr                     jsr emit_a
002690r 3  88                           dey
002691r 3  F0 1C                        beq @done
002693r 3  80 F6                        bra @quick_loop
002695r 3               
002695r 3               @lots_of_spaces:
002695r 3                               ; We go through the first loop once to get rid of the lower
002695r 3                               ; counter byte. This could be zero
002695r 3  B4 00                        ldy 0,x
002697r 3               
002697r 3               @first_slow_loop:
002697r 3  F0 08                        beq @slow_outer_loop
002699r 3  A9 20                        lda #AscSP
00269Br 3  20 rr rr                     jsr emit_a
00269Er 3  88                           dey
00269Fr 3  80 F6                        bra @first_slow_loop
0026A1r 3               
0026A1r 3               @slow_outer_loop:
0026A1r 3                               ; we arrive here knowing that the MSB of TOS cannot be a zero
0026A1r 3  A0 00                        ldy #00
0026A3r 3               
0026A3r 3               @slow_inner_loop:
0026A3r 3  A9 20                        lda #AscSP
0026A5r 3  20 rr rr                     jsr emit_a
0026A8r 3  88                           dey
0026A9r 3  D0 F8                        bne @slow_inner_loop
0026ABr 3               
0026ABr 3  D6 01                        dec 1,x
0026ADr 3  D0 F2                        bne @slow_outer_loop
0026AFr 3               
0026AFr 3               @done:
0026AFr 3  E8                           inx             ; drop
0026B0r 3  E8                           inx
0026B1r 3               
0026B1r 3  60           z_spaces:       rts
0026B2r 3               
0026B2r 3               
0026B2r 3               
0026B2r 3               ; ## STAR ( n n -- n ) "16*16 --> 16 "
0026B2r 3               ; ## "*"  auto  ANS core
0026B2r 3                       ; """https://forth-standard.org/standard/core/Times
0026B2r 3                       ; Multiply two signed 16 bit numbers, returning a 16 bit result.
0026B2r 3                       ;
0026B2r 3                       ; This is nothing  more than UM* DROP
0026B2r 3                       ; """
0026B2r 3               
0026B2r 3               xt_star:
0026B2r 3  20 rr rr                     jsr underflow_2
0026B5r 3               
0026B5r 3  20 rr rr                     jsr xt_um_star
0026B8r 3  E8                           inx
0026B9r 3  E8                           inx
0026BAr 3               
0026BAr 3  60           z_star:         rts
0026BBr 3               
0026BBr 3               
0026BBr 3               
0026BBr 3               ; ## STAR_SLASH  ( n1 n2 n3 -- n4 ) "n1 * n2 / n3 -->  n"
0026BBr 3               ; ## "*/"  auto  ANS core
0026BBr 3                       ; """https://forth-standard.org/standard/core/TimesDiv
0026BBr 3                       ; Multiply n1 by n2 and divide by n3, returning the result
0026BBr 3                       ; without a remainder. This is */MOD without the mod.
0026BBr 3                       ;
0026BBr 3                       ; This word
0026BBr 3                       ; can be defined in Forth as : */  */MOD SWAP DROP ; which is
0026BBr 3                       ; pretty much what we do here
0026BBr 3                       ; """
0026BBr 3               xt_star_slash:
0026BBr 3                               ; We let */MOD check for underflow
0026BBr 3  20 rr rr                     jsr xt_star_slash_mod
0026BEr 3  20 rr rr                     jsr xt_swap
0026C1r 3  E8                           inx
0026C2r 3  E8                           inx
0026C3r 3               z_star_slash:
0026C3r 3  60                           rts
0026C4r 3               
0026C4r 3               
0026C4r 3               ; ## STAR_SLASH_MOD  ( n1 n2 n3 -- n4 n5 ) "n1 * n2 / n3 --> n-mod n"
0026C4r 3               ; ## "*/mod"  auto  ANS core
0026C4r 3                       ; """https://forth-standard.org/standard/core/TimesDivMOD
0026C4r 3                       ; Multiply n1 by n2 producing the intermediate double-cell result d.
0026C4r 3                       ; Divide d by n3 producing the single-cell remainder n4 and the
0026C4r 3                       ; single-cell quotient n5.
0026C4r 3                       ;
0026C4r 3                       ; In Forth, this is
0026C4r 3                       ; : */MOD  >R M* >R SM/REM ;  Note that */ accesses this routine.
0026C4r 3                       ; """
0026C4r 3               xt_star_slash_mod:
0026C4r 3  20 rr rr                     jsr underflow_3
0026C7r 3               
0026C7r 3  20 rr rr                     jsr xt_to_r
0026CAr 3  20 rr rr                     jsr xt_m_star
0026CDr 3  20 rr rr                     jsr xt_r_from
0026D0r 3  20 rr rr                     jsr xt_sm_slash_rem
0026D3r 3               
0026D3r 3               z_star_slash_mod:
0026D3r 3  60                           rts
0026D4r 3               
0026D4r 3               
0026D4r 3               ; ## STATE ( -- addr ) "Return the address of compilation state flag"
0026D4r 3               ; ## "state"  auto  ANS core
0026D4r 3                       ; """https://forth-standard.org/standard/core/STATE
0026D4r 3                       ; STATE is true when in compilation state, false otherwise. Note
0026D4r 3                       ; we do not return the state itself, but only the address where
0026D4r 3                       ; it lives. The state should not be changed directly by the user; see
0026D4r 3                       ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
0026D4r 3                       ; """
0026D4r 3               xt_state:
0026D4r 3  CA                           dex
0026D5r 3  CA                           dex
0026D6r 3  A9 rr                        lda #<state
0026D8r 3  95 00                        sta 0,x
0026DAr 3  A9 rr                        lda #>state
0026DCr 3  95 01                        sta 1,x
0026DEr 3               
0026DEr 3  60           z_state:        rts
0026DFr 3               
0026DFr 3               
0026DFr 3               ; ## STORE ( n addr -- ) "Store TOS in memory"
0026DFr 3               ; ## "!"  auto  ANS core
0026DFr 3                       ; """https://forth-standard.org/standard/core/Store"""
0026DFr 3               xt_store:
0026DFr 3  20 rr rr                     jsr underflow_2
0026E2r 3               
0026E2r 3  B5 02                        lda 2,x         ; LSB
0026E4r 3  81 00                        sta (0,x)
0026E6r 3               
0026E6r 3  F6 00                        inc 0,x
0026E8r 3  D0 02                        bne @1
0026EAr 3  F6 01                        inc 1,x
0026ECr 3               @1:
0026ECr 3  B5 03                        lda 3,x         ; MSB
0026EEr 3  81 00                        sta (0,x)
0026F0r 3               
0026F0r 3  E8                           inx             ; 2DROP
0026F1r 3  E8                           inx
0026F2r 3  E8                           inx
0026F3r 3  E8                           inx
0026F4r 3               
0026F4r 3  60           z_store:        rts
0026F5r 3               
0026F5r 3               
0026F5r 3               ; ## STRIP_UNDERFLOW ( -- addr ) "Return address where underflow status is kept"
0026F5r 3               ; ## "strip-underflow"  tested  Tali Forth
0026F5r 3                       ; """`STRIP-UNDERFLOW` is a flag variable that determines if underflow
0026F5r 3                       ; checking should be removed during the compilation of new words.
0026F5r 3                       ; Default is false.
0026F5r 3                       ; """
0026F5r 3               xt_strip_underflow:
0026F5r 3  CA                           dex
0026F6r 3  CA                           dex
0026F7r 3               
0026F7r 3  A9 rr                        lda #<uf_strip
0026F9r 3  95 00                        sta 0,x
0026FBr 3  A9 rr                        lda #>uf_strip
0026FDr 3  95 01                        sta 1,x
0026FFr 3               
0026FFr 3               z_strip_underflow:
0026FFr 3  60                           rts
002700r 3               
002700r 3               
002700r 3               ; ## SWAP ( b a -- a b ) "Exchange TOS and NOS"
002700r 3               ; ## "swap"  auto  ANS core
002700r 3                       ; """https://forth-standard.org/standard/core/SWAP"""
002700r 3               xt_swap:
002700r 3  20 rr rr                     jsr underflow_2
002703r 3               
002703r 3  B5 00                        lda 0,x         ; LSB
002705r 3  B4 02                        ldy 2,x
002707r 3  95 02                        sta 2,x
002709r 3  94 00                        sty 0,x
00270Br 3               
00270Br 3  B5 01                        lda 1,x         ; MSB
00270Dr 3  B4 03                        ldy 3,x
00270Fr 3  95 03                        sta 3,x
002711r 3  94 01                        sty 1,x
002713r 3               
002713r 3  60           z_swap:         rts
002714r 3               
002714r 3               
002714r 3               ; ## THEN (C: orig -- ) ( -- ) "Conditional flow control"
002714r 3               ; ## "then"  auto  ANS core
002714r 3                       ; """http://forth-standard.org/standard/core/THEN"""
002714r 3               xt_then:
002714r 3                               ; Get the address to jump to.
002714r 3  20 rr rr                     jsr xt_here
002717r 3               
002717r 3                               ; Stuff HERE in for the branch address back
002717r 3                               ; at the IF or ELSE (origination address is on stack).
002717r 3  20 rr rr                     jsr xt_swap
00271Ar 3  20 rr rr                     jsr xt_store
00271Dr 3               
00271Dr 3  60           z_then:         rts
00271Er 3               
00271Er 3               
00271Er 3               ; ## THRU ( scr# scr# -- ) "Load screens in the given range"
00271Er 3               ; ## "thru"  tested  ANS block ext
00271Er 3                       ; """https://forth-standard.org/standard/block/THRU"""
00271Er 3               
00271Er 3               xt_thru:
00271Er 3  20 rr rr                     jsr underflow_2
002721r 3               
002721r 3                               ; We need to loop here, and can't use the data stack
002721r 3                               ; because the LOADed screens might use it.  We'll
002721r 3                               ; need to use the same trick that DO loops use, holding
002721r 3                               ; the limit and current index on the return stack.
002721r 3               
002721r 3                               ; Put the ending screen number on the return stack
002721r 3  B5 01                        lda 1,x
002723r 3  48                           pha
002724r 3  B5 00                        lda 0,x
002726r 3  48                           pha
002727r 3  E8                           inx
002728r 3  E8                           inx
002729r 3               @thru_loop:
002729r 3                               ; Put the starting screen number on the stack,
002729r 3                               ; but keep a copy
002729r 3  B5 01                        lda 1,x
00272Br 3  48                           pha
00272Cr 3  B5 00                        lda 0,x
00272Er 3  48                           pha
00272Fr 3               
00272Fr 3                               ; Load this screen.
00272Fr 3  20 rr rr                     jsr xt_load
002732r 3               
002732r 3                               ; Get the number and limit back off the stack.  Rather than
002732r 3                               ; waste time making room on the stack, just use tmp1 and tmp2.
002732r 3               
002732r 3                               ; Get the screen we just loaded.
002732r 3  68                           pla
002733r 3  85 rr                        sta tmp1
002735r 3  68                           pla
002736r 3  85 rr                        sta tmp1+1
002738r 3               
002738r 3                               ; Get the ending screen.
002738r 3  68                           pla
002739r 3  85 rr                        sta tmp2
00273Br 3  68                           pla
00273Cr 3  85 rr                        sta tmp2+1
00273Er 3               
00273Er 3                               ; See if we just loaded the last screen.
00273Er 3                               ; A already has the MSB of the last screen in it.
00273Er 3  C5 rr                        cmp tmp1+1
002740r 3  D0 08                        bne @next_screen
002742r 3  A5 rr                        lda tmp2        ; Compare the LSB
002744r 3  C5 rr                        cmp tmp1
002746r 3  D0 02                        bne @next_screen
002748r 3  80 18                        bra @done       ; We just did the last screen.
00274Ar 3               
00274Ar 3               @next_screen:
00274Ar 3                               ; Put the ending screen back on the data stack.
00274Ar 3  A5 rr                        lda tmp2+1
00274Cr 3  48                           pha
00274Dr 3  A5 rr                        lda tmp2
00274Fr 3  48                           pha
002750r 3               
002750r 3                               ; Increment the current screen.
002750r 3  E6 rr                        inc tmp1
002752r 3  D0 02                        bne @1
002754r 3  E6 rr                        inc tmp1+1
002756r 3               @1:
002756r 3                               ; Put the current screen on the stack to prepare for
002756r 3                               ; the next loop.
002756r 3  CA                           dex
002757r 3  CA                           dex
002758r 3  A5 rr                        lda tmp1
00275Ar 3  95 00                        sta 0,x
00275Cr 3  A5 rr                        lda tmp1+1
00275Er 3  95 01                        sta 1,x
002760r 3  80 C7                        bra @thru_loop
002762r 3               @done:
002762r 3  60           z_thru:         rts
002763r 3               
002763r 3               
002763r 3               
002763r 3               ; ## TICK ( "name" -- xt ) "Return a word's execution token (xt)"
002763r 3               ; ## "'"  auto  ANS core
002763r 3                       ; """https://forth-standard.org/standard/core/Tick"""
002763r 3               
002763r 3               xt_tick:
002763r 3  20 rr rr                     jsr xt_parse_name       ; ( -- addr u )
002766r 3               
002766r 3                               ; if we got a zero, there was a problem getting the
002766r 3                               ; name of the word
002766r 3  B5 00                        lda 0,x
002768r 3  15 01                        ora 1,x
00276Ar 3  D0 05                        bne @1
00276Cr 3               
00276Cr 3  A9 05                        lda #err_noname
00276Er 3  4C rr rr                     jmp error
002771r 3               @1:
002771r 3  20 rr rr                     jsr xt_find_name        ; ( addr u -- nt )
002774r 3               
002774r 3                               ; If we didn't find the word in the Dictionary, abort
002774r 3  B5 00                        lda 0,x
002776r 3  15 01                        ora 1,x
002778r 3  D0 05                        bne @2
00277Ar 3               
00277Ar 3  A9 08                        lda #err_syntax
00277Cr 3  4C rr rr                     jmp error
00277Fr 3               @2:
00277Fr 3  20 rr rr                     jsr xt_name_to_int      ; ( nt -- xt )
002782r 3               
002782r 3  60           z_tick:         rts
002783r 3               
002783r 3               
002783r 3               
002783r 3               ; ## TO ( n "name" -- ) or ( "name") "Change a value"
002783r 3               ; ## "to"  auto  ANS core ext
002783r 3                       ; """https://forth-standard.org/standard/core/TO
002783r 3                       ; Gives a new value to a, uh, VALUE.
002783r 3                       ;
002783r 3                       ; One possible Forth
002783r 3                       ; implementation is  ' >BODY !  but given the problems we have
002783r 3                       ; with >BODY on STC Forths, we do this the hard way. Since
002783r 3                       ; Tali Forth uses the same code for CONSTANTs and VALUEs, you
002783r 3                       ; could use this to redefine a CONSTANT, but that is a no-no.
002783r 3                       ;
002783r 3                       ; Note that the standard has different behaviors for TO depending
002783r 3                       ; on the state (https://forth-standard.org/standard/core/TO).
002783r 3                       ; This makes TO state-dependent (which is bad) and also rather
002783r 3                       ; complex (see the Gforth implementation for comparison). This
002783r 3                       ; word may not be natively compiled and must be immediate. Frankly,
002783r 3                       ; it would have made more sense to have two words for this.
002783r 3                       ; """
002783r 3               
002783r 3               xt_to:
002783r 3                               ; One way or the other, we need the xt of the word after this
002783r 3                               ; one. At this point, we don't know if we are interpreted or
002783r 3                               ; compile, so we don't know if there is a value n on the stack,
002783r 3                               ; so we can't do an underflow check yet
002783r 3  20 rr rr                     jsr xt_tick             ; ( [n] xt )
002786r 3               
002786r 3                               ; The PFA (DFA in this case) is three bytes down,
002786r 3                               ; after the jump to DOCONST
002786r 3  B5 00                        lda 0,x                 ; LSB
002788r 3  18                           clc
002789r 3  69 03                        adc #3
00278Br 3  85 rr                        sta tmp1
00278Dr 3  B5 01                        lda 1,x                 ; MSB
00278Fr 3  69 00                        adc #0                  ; we just want the carry
002791r 3  85 rr                        sta tmp1+1
002793r 3               
002793r 3  E8                           inx
002794r 3  E8                           inx                     ; ( [n] )
002795r 3               
002795r 3                               ; Now it gets ugly. See which state we are in
002795r 3  A5 rr                        lda state
002797r 3  05 rr                        ora state+1
002799r 3  F0 34                        beq @interpret
00279Br 3               
00279Br 3                               ; Well, we're compiling. We want to end up with simple
00279Br 3                               ; code that just takes the number that is TOS and saves
00279Br 3                               ; it in the address of the xt we were just given. So we
00279Br 3                               ; want to compile this routine:
00279Br 3                               ;
00279Br 3                               ;       lda 0,x                 - B5 00
00279Br 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
00279Br 3                               ;       lda 1,x                 - B5 01
00279Br 3                               ;       sta <ADDR_LSB>          - 8D LSB MSB
00279Br 3                               ;       inx                     - E8
00279Br 3                               ;       inx                     - E8
00279Br 3                               ;
00279Br 3                               ; which at least is nice and short. Other than that, we pretty
00279Br 3                               ; much have to do this the hard and long way, because with the
00279Br 3                               ; LSBs and MSBs, we can't really put the numbers in a data
00279Br 3                               ; range and store them with a loop. Sigh.
00279Br 3               
00279Br 3  A0 00                        ldy #$00                ; Code for LDA 0,X
00279Dr 3  A9 B5                        lda #$B5
00279Fr 3  20 rr rr                     jsr cmpl_word
0027A2r 3               
0027A2r 3  A9 8D                        lda #$8D                ; Code for STA abs
0027A4r 3  20 rr rr                     jsr cmpl_a
0027A7r 3               
0027A7r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
0027A9r 3  A5 rr                        lda tmp1
0027ABr 3  20 rr rr                     jsr cmpl_word
0027AEr 3               
0027AEr 3  A0 01                        ldy #$01                ; Code for LDA 1,X
0027B0r 3  A9 B5                        lda #$B5
0027B2r 3  20 rr rr                     jsr cmpl_word
0027B5r 3               
0027B5r 3  A9 8D                        lda #$8D                ; Code for STA abs
0027B7r 3  20 rr rr                     jsr cmpl_a
0027BAr 3               
0027BAr 3  E6 rr                        inc tmp1                ; Calculate MSB
0027BCr 3  D0 02                        bne @1
0027BEr 3  E6 rr                        inc tmp1+1
0027C0r 3               @1:
0027C0r 3  A4 rr                        ldy tmp1+1              ; MSB goes in Y
0027C2r 3  A5 rr                        lda tmp1
0027C4r 3  20 rr rr                     jsr cmpl_word
0027C7r 3               
0027C7r 3  A0 E8                        ldy #$E8                ; Code for INX
0027C9r 3  98                           tya
0027CAr 3  20 rr rr                     jsr cmpl_word
0027CDr 3               
0027CDr 3  80 0F                        bra @done
0027CFr 3               
0027CFr 3               @interpret:
0027CFr 3                               ; We're interpreting, so we arrive here with n
0027CFr 3                               ; on the stack. This is an annoying place to put
0027CFr 3                               ; the underflow check because we can't
0027CFr 3                               ; automatically strip it out
0027CFr 3  20 rr rr                     jsr underflow_1
0027D2r 3               
0027D2r 3                               ; We skip over the jump to DOCONST and store the number
0027D2r 3                               ; in the Program Field Area (PDF, in this case more a
0027D2r 3                               ; Data Field Area
0027D2r 3  B5 00                        lda 0,x
0027D4r 3  92 rr                        sta (tmp1)              ; LSB
0027D6r 3               
0027D6r 3  A0 01                        ldy #1
0027D8r 3  B5 01                        lda 1,x                 ; MSB
0027DAr 3  91 rr                        sta (tmp1),y            ; fall through to common
0027DCr 3               
0027DCr 3  E8                           inx                     ; DROP
0027DDr 3  E8                           inx
0027DEr 3               @done:
0027DEr 3  60           z_to:           rts
0027DFr 3               
0027DFr 3               
0027DFr 3               
0027DFr 3               ; ## TO_BODY ( xt -- addr ) "Return a word's Code Field Area (CFA)"
0027DFr 3               ; ## ">body"  auto  ANS core
0027DFr 3                       ; """https://forth-standard.org/standard/core/toBODY
0027DFr 3                       ; Given a word's execution token (xt), return the address of the
0027DFr 3                       ; start of that word's parameter field (PFA). This is defined as the
0027DFr 3                       ; address that HERE would return right after CREATE.
0027DFr 3                       ;
0027DFr 3                       ; This is a
0027DFr 3                       ; difficult word for STC Forths, because most words don't actually
0027DFr 3                       ; have a Code Field Area (CFA) to skip. We solve this by having CREATE
0027DFr 3                       ; add a flag, "has CFA" (HC), in the header so >BODY know to skip
0027DFr 3                       ; the subroutine jumps to DOVAR, DOCONST, or DODOES
0027DFr 3                       ; """
0027DFr 3               
0027DFr 3               xt_to_body:
0027DFr 3  20 rr rr                     jsr underflow_1
0027E2r 3               
0027E2r 3                               ; Ideally, xt already points to the CFA. We just need to check
0027E2r 3                               ; the HC flag for special cases
0027E2r 3  20 rr rr                     jsr xt_dup              ; ( xt xt )
0027E5r 3  20 rr rr                     jsr xt_int_to_name      ; ( xt nt )
0027E8r 3               
0027E8r 3                               ; The status byte is nt+1
0027E8r 3  F6 00                        inc 0,x
0027EAr 3  D0 02                        bne @1
0027ECr 3  F6 01                        inc 1,x
0027EEr 3               @1:
0027EEr 3  A1 00                        lda (0,x)               ; get status byte
0027F0r 3  29 20                        and #HC
0027F2r 3  F0 0D                        beq @no_cfa
0027F4r 3               
0027F4r 3                               ; We've got a DOVAR, DOCONST, DODEFER, DODOES or whatever,
0027F4r 3                               ; so we add three to xt, which is NOS
0027F4r 3  18                           clc
0027F5r 3  B5 02                        lda 2,x         ; LSB
0027F7r 3  69 03                        adc #3
0027F9r 3  95 02                        sta 2,x
0027FBr 3  B5 03                        lda 3,x         ; MSB
0027FDr 3  69 00                        adc #0          ; we conly care about the carry
0027FFr 3  95 03                        sta 3,x         ; Fall through to @no_cfa
002801r 3               @no_cfa:
002801r 3  E8                           inx             ; get rid of the nt
002802r 3  E8                           inx
002803r 3               @done:
002803r 3  60           z_to_body:      rts
002804r 3               
002804r 3               
002804r 3               
002804r 3               ; ## TO_IN ( -- addr ) "Return address of the input pointer"
002804r 3               ; ## ">in"  auto  ANS core
002804r 3               xt_to_in:
002804r 3  CA                           dex
002805r 3  CA                           dex
002806r 3               
002806r 3  A9 rr                        lda #<toin
002808r 3  95 00                        sta 0,x
00280Ar 3  A9 rr                        lda #>toin      ; paranoid, should be zero
00280Cr 3  95 01                        sta 1,x
00280Er 3               
00280Er 3  60           z_to_in:        rts
00280Fr 3               
00280Fr 3               
00280Fr 3               ; ## TO_NUMBER ( ud addr u -- ud addr u ) "Convert a number"
00280Fr 3               ; ## ">number"  auto  ANS core
00280Fr 3                       ; """https://forth-standard.org/standard/core/toNUMBER
00280Fr 3                       ; Convert a string to a double number. Logic here is based on the
00280Fr 3                       ; routine by Phil Burk of the same name in pForth, see
00280Fr 3                       ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
00280Fr 3                       ; for the original Forth code. We arrive here from NUMBER which has
00280Fr 3                       ; made sure that we don't have to deal with a sign and we don't have
00280Fr 3                       ; to deal with a dot as a last character that signalizes double -
00280Fr 3                       ; this should be a pure number string.
00280Fr 3                       ;
00280Fr 3                       ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we
00280Fr 3                       ; cannot access any of those.
00280Fr 3                       ;
00280Fr 3                       ; For the math routine, we move the inputs to the scratchpad to
00280Fr 3                       ; avoid having to fool around with the Data Stack.
00280Fr 3                       ;
00280Fr 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
00280Fr 3                       ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
00280Fr 3                       ;     |           |           |           |           |
00280Fr 3                       ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
00280Fr 3                       ;     +-----+-----+-----+-----+-----+-----+-----+-----+
00280Fr 3                       ;
00280Fr 3                       ; The math routine works by converting one character to its
00280Fr 3                       ; numerical value (N) via DIGIT? and storing it in S+4 for
00280Fr 3                       ; the moment. We then multiply the UD-HI value with the radix
00280Fr 3                       ; (from BASE) using UM*, which returns a double-cell result. We
00280Fr 3                       ; discard the high cell of that result (UD-HI-HI) and store the
00280Fr 3                       ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
00280Fr 3                       ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
00280Fr 3                       ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
00280Fr 3                       ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
00280Fr 3                       ; storing the result back in S and S+2, before we start another
00280Fr 3                       ; round with it as the new UD-LO and UD-HI.
00280Fr 3                       ; """
00280Fr 3               
00280Fr 3               
00280Fr 3               xt_to_number:
00280Fr 3  20 rr rr                     jsr underflow_4
002812r 3               
002812r 3                               ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
002812r 3                               ; After this step, the original ud-lo and ud-hi will still be on
002812r 3                               ; the Data Stack, but will be ignored and later overwritten
002812r 3                               ; If >NUMBER is called by NUMBER, these should be all zeros
002812r 3  B5 06                        lda 6,x         ; ud-lo LSB
002814r 3  85 rr                        sta scratch
002816r 3  B5 07                        lda 7,x         ; ud-lo MSB
002818r 3  85 rr                        sta scratch+1
00281Ar 3               
00281Ar 3  B5 04                        lda 4,x         ; ud-hi LSB
00281Cr 3  85 rr                        sta scratch+2
00281Er 3  B5 05                        lda 5,x         ; ud-hi MSB
002820r 3  85 rr                        sta scratch+3
002822r 3               
002822r 3                               ; Push down one on the Data Stack to use TOS for character
002822r 3                               ; conversion ( ud-lo ud-hi addr u x )
002822r 3  CA                           dex
002823r 3  CA                           dex
002824r 3               
002824r 3               @loop:
002824r 3                               ; Get one character based on address
002824r 3  A1 04                        lda (4,x)
002826r 3  95 00                        sta 0,x                 ; ( ud-lo ud-hi addr u char )
002828r 3  74 01                        stz 1,x                 ; paranoid
00282Ar 3               
00282Ar 3  20 rr rr                     jsr xt_digit_question   ; ( char -- n -1 | char 0 )
00282Dr 3               
00282Dr 3                               ; This gives us ( ud-lo ud-hi addr u char f | n f ), so we
00282Dr 3                               ; check the flag. If it is zero, we return what we have and
00282Dr 3                               ; let the caller (usually NUMBER) complain
00282Dr 3  B5 00                        lda 0,x
00282Fr 3  D0 04                        bne @digit_ok
002831r 3               
002831r 3  E8                           inx
002832r 3  E8                           inx
002833r 3  80 67                        bra @done       ; ( ud-lo ud-hi addr u char )
002835r 3               
002835r 3               @digit_ok:
002835r 3                               ; Conversion was successful. We arrive here with
002835r 3                               ; ( ud-lo ud-hi addr u n -1 ) and can start the
002835r 3                               ; math routine
002835r 3               
002835r 3                               ; Save n so we don't have to fool around with the
002835r 3                               ; Data Stack
002835r 3  B5 02                        lda 2,x
002837r 3  85 rr                        sta scratch+4
002839r 3  B5 03                        lda 3,x
00283Br 3  85 rr                        sta scratch+5
00283Dr 3               
00283Dr 3                               ; Now multiply ud-hi (the one in the scratchpad, not the
00283Dr 3                               ; original one on the Data Stack) with the radix from BASE.
00283Dr 3                               ; We can clobber TOS and NOS because we saved n
00283Dr 3  A5 rr                        lda scratch+2
00283Fr 3  95 02                        sta 2,x         ; NOS
002841r 3  A5 rr                        lda scratch+3
002843r 3  95 03                        sta 3,x
002845r 3               
002845r 3  A5 rr                        lda base
002847r 3  95 00                        sta 0,x         ; TOS
002849r 3  74 01                        stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
00284Br 3               
00284Br 3                               ; UM* returns a double-celled number
00284Br 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
00284Er 3               
00284Er 3                               ; Move ud-hi-lo to safety
00284Er 3  B5 02                        lda 2,x         ; ud-hi-lo
002850r 3  85 rr                        sta scratch+6
002852r 3  B5 03                        lda 3,x
002854r 3  85 rr                        sta scratch+7
002856r 3               
002856r 3                               ; Now we multiply ud-lo, overwriting the stack entries
002856r 3  A5 rr                        lda scratch
002858r 3  95 02                        sta 2,x
00285Ar 3  A5 rr                        lda scratch+1
00285Cr 3  95 03                        sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
00285Er 3               
00285Er 3  A5 rr                        lda base
002860r 3  95 00                        sta 0,x
002862r 3  74 01                        stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
002864r 3               
002864r 3  20 rr rr                     jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
002867r 3               
002867r 3  B5 00                        lda 0,x
002869r 3  85 rr                        sta scratch+2
00286Br 3  B5 01                        lda 1,x
00286Dr 3  85 rr                        sta scratch+3
00286Fr 3               
00286Fr 3  B5 02                        lda 2,x
002871r 3  85 rr                        sta scratch
002873r 3  B5 03                        lda 3,x
002875r 3  85 rr                        sta scratch+1
002877r 3               
002877r 3                               ; We add ud-lo and n, as well as ud-hi and ud-hi-lo,
002877r 3                               ; both in the scratch pad
002877r 3  18                           clc
002878r 3  A5 rr                        lda scratch     ; ud-lo LSB
00287Ar 3  65 rr                        adc scratch+4   ; n LSB
00287Cr 3  85 rr                        sta scratch     ; this is the new ud-lo
00287Er 3  A5 rr                        lda scratch+1   ; ud-lo MSB
002880r 3  65 rr                        adc scratch+5   ; n MSB
002882r 3  85 rr                        sta scratch+1
002884r 3               
002884r 3  A5 rr                        lda scratch+2   ; LSB
002886r 3  65 rr                        adc scratch+6
002888r 3  85 rr                        sta scratch+2   ; this is the new ud-hi
00288Ar 3  A5 rr                        lda scratch+3   ; MSB
00288Cr 3  65 rr                        adc scratch+7
00288Er 3  85 rr                        sta scratch+3
002890r 3               
002890r 3                               ; Clean up: Get rid of one of the two top elements on
002890r 3                               ; the Data Stack. We don't really care which one
002890r 3  E8                           inx
002891r 3  E8                           inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
002892r 3               
002892r 3                               ; One character down. Move address up
002892r 3  F6 04                        inc 4,x
002894r 3  D0 02                        bne @1
002896r 3  F6 05                        inc 5,x
002898r 3               @1:
002898r 3                               ; Decrease counter
002898r 3  D6 02                        dec 2,x
00289Ar 3  D0 88                        bne @loop
00289Cr 3               
00289Cr 3               @done:
00289Cr 3                               ; Counter has reached zero or we have an error. In both
00289Cr 3                               ; cases, we clean up the Data Stack and return. Error gives
00289Cr 3                               ; us ( ud-lo ud-hi addr u char ), regular end is
00289Cr 3                               ; ( ud-lo ud-hi addr u ud-lo )
00289Cr 3  E8                           inx
00289Dr 3  E8                           inx             ; ( ud-lo ud-hi addr u )
00289Er 3               
00289Er 3                               ; The new ud-lo and ud-hi are still on the scratch pad
00289Er 3  A5 rr                        lda scratch     ; new ud-lo
0028A0r 3  95 06                        sta 6,x
0028A2r 3  A5 rr                        lda scratch+1
0028A4r 3  95 07                        sta 7,x
0028A6r 3               
0028A6r 3  A5 rr                        lda scratch+2
0028A8r 3  95 04                        sta 4,x
0028AAr 3  A5 rr                        lda scratch+3
0028ACr 3  95 05                        sta 5,x
0028AEr 3               
0028AEr 3  60           z_to_number:    rts
0028AFr 3               
0028AFr 3               
0028AFr 3               
0028AFr 3               ; ## TO_ORDER ( wid -- ) "Add wordlist at beginning of search order"
0028AFr 3               ; ## ">order"  tested  Gforth search
0028AFr 3                       ; """https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html"""
0028AFr 3               
0028AFr 3               xt_to_order:
0028AFr 3                               ; Put the wid on the return stack for now.
0028AFr 3  20 rr rr                     jsr xt_to_r
0028B2r 3               
0028B2r 3                               ; Get the current search order.
0028B2r 3  20 rr rr                     jsr xt_get_order
0028B5r 3               
0028B5r 3                               ; Get back the wid and add it to the list.
0028B5r 3  20 rr rr                     jsr xt_r_from
0028B8r 3  20 rr rr                     jsr xt_swap
0028BBr 3  20 rr rr                     jsr xt_one_plus
0028BEr 3               
0028BEr 3                               ; Set the search order with the new list.
0028BEr 3  20 rr rr                     jsr xt_set_order
0028C1r 3               
0028C1r 3  60           z_to_order:     rts
0028C2r 3               
0028C2r 3               
0028C2r 3               
0028C2r 3               ; ## TO_R ( n -- )(R: -- n) "Push TOS to the Return Stack"
0028C2r 3               ; ## ">r"  auto  ANS core
0028C2r 3                       ; """https://forth-standard.org/standard/core/toR
0028C2r 3                       ; This word is handled differently for native and for
0028C2r 3                       ; subroutine coding, see `COMPILE,`. This is a complile-only
0028C2r 3                       ; word.
0028C2r 3                       ; """
0028C2r 3               xt_to_r:
0028C2r 3                               ; Save the return address. If this word is natively
0028C2r 3                               ; coded, this is a complete waste of cycles, but
0028C2r 3                               ; required for subroutine coding
0028C2r 3  68                           pla             ; LSB
0028C3r 3  85 rr                        sta tmptos
0028C5r 3  7A                           ply             ; MSB
0028C6r 3               
0028C6r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0028C6r 3               
0028C6r 3                               ; We check for underflow in the second step, so we can
0028C6r 3                               ; strip off the stack thrashing for native compiling first
0028C6r 3  20 rr rr                     jsr underflow_1
0028C9r 3               
0028C9r 3                               ; now we can do the actual work
0028C9r 3  B5 01                        lda 1,x         ; MSB
0028CBr 3  48                           pha
0028CCr 3  B5 00                        lda 0,x         ; LSB
0028CEr 3  48                           pha
0028CFr 3               
0028CFr 3  E8                           inx
0028D0r 3  E8                           inx
0028D1r 3               
0028D1r 3                               ; --- CUT HERE FOR NATIVE CODING ---
0028D1r 3               
0028D1r 3                               ; restore return address
0028D1r 3  5A                           phy             ; MSB
0028D2r 3  A5 rr                        lda tmptos
0028D4r 3  48                           pha             ; LSB
0028D5r 3               
0028D5r 3  60           z_to_r:         rts
0028D6r 3               
0028D6r 3               
0028D6r 3               ; ## TRUE ( -- f ) "Push TRUE flag to Data Stack"
0028D6r 3               ; ## "true"  auto  ANS core ext
0028D6r 3                       ; """https://forth-standard.org/standard/core/TRUE"""
0028D6r 3               xt_true:
0028D6r 3  CA                           dex
0028D7r 3  CA                           dex
0028D8r 3  A9 FF                        lda #$FF
0028DAr 3  95 00                        sta 0,x
0028DCr 3  95 01                        sta 1,x
0028DEr 3               
0028DEr 3  60           z_true:         rts
0028DFr 3               
0028DFr 3               
0028DFr 3               ; ## TUCK ( b a -- a b a ) "Copy TOS below NOS"
0028DFr 3               ; ## "tuck"  auto  ANS core ext
0028DFr 3                       ; """https://forth-standard.org/standard/core/TUCK"""
0028DFr 3               xt_tuck:
0028DFr 3  20 rr rr                     jsr underflow_2
0028E2r 3               
0028E2r 3  CA                           dex
0028E3r 3  CA                           dex
0028E4r 3               
0028E4r 3  B4 04                        ldy 4,x         ; LSB
0028E6r 3  B5 02                        lda 2,x
0028E8r 3  95 04                        sta 4,x
0028EAr 3  94 02                        sty 2,x
0028ECr 3  95 00                        sta 0,x
0028EEr 3               
0028EEr 3  B4 05                        ldy 5,x         ; MSB
0028F0r 3  B5 03                        lda 3,x
0028F2r 3  95 05                        sta 5,x
0028F4r 3  94 03                        sty 3,x         ; bba
0028F6r 3  95 01                        sta 1,x         ; baa
0028F8r 3               
0028F8r 3  60           z_tuck:         rts
0028F9r 3               
0028F9r 3               
0028F9r 3               ; ## TWO ( -- u ) "Push the number 2 to stack"
0028F9r 3               ; ## "2"  auto  Tali Forth
0028F9r 3                       ;
0028F9r 3                       ; This code is shared with ASSEMBLER-WORDLIST
0028F9r 3               xt_assembler_wordlist:
0028F9r 3               xt_two:
0028F9r 3  CA                           dex
0028FAr 3  CA                           dex
0028FBr 3  A9 02                        lda #2
0028FDr 3  95 00                        sta 0,x
0028FFr 3  74 01                        stz 1,x
002901r 3               
002901r 3               z_assembler_wordlist:
002901r 3  60           z_two:          rts
002902r 3               
002902r 3               
002902r 3               ; ## TWO_DROP ( n n -- ) "Drop TOS and NOS"
002902r 3               ; ## "2drop"  auto  ANS core
002902r 3                       ; """https://forth-standard.org/standard/core/TwoDROP"""
002902r 3               xt_two_drop:
002902r 3  20 rr rr                     jsr underflow_2
002905r 3               
002905r 3  E8                           inx
002906r 3  E8                           inx
002907r 3  E8                           inx
002908r 3  E8                           inx
002909r 3               
002909r 3  60           z_two_drop:     rts
00290Ar 3               
00290Ar 3               
00290Ar 3               ; ## TWO_DUP ( a b -- a b a b ) "Duplicate first two stack elements"
00290Ar 3               ; ## "2dup"  auto  ANS core
00290Ar 3                       ; """https://forth-standard.org/standard/core/TwoDUP"""
00290Ar 3               xt_two_dup:
00290Ar 3  20 rr rr                     jsr underflow_2
00290Dr 3               
00290Dr 3  CA                           dex
00290Er 3  CA                           dex
00290Fr 3  CA                           dex
002910r 3  CA                           dex
002911r 3               
002911r 3  B5 04                        lda 4,x         ; TOS
002913r 3  95 00                        sta 0,x
002915r 3  B5 05                        lda 5,x
002917r 3  95 01                        sta 1,x
002919r 3               
002919r 3  B5 06                        lda 6,x         ; NOS
00291Br 3  95 02                        sta 2,x
00291Dr 3  B5 07                        lda 7,x
00291Fr 3  95 03                        sta 3,x
002921r 3               
002921r 3  60           z_two_dup:      rts
002922r 3               
002922r 3               
002922r 3               ; ## TWO_FETCH ( addr -- n1 n2 ) "Fetch the cell pair n1 n2 stored at addr"
002922r 3               ; ## "2@"  auto  ANS core
002922r 3                       ; """https://forth-standard.org/standard/core/TwoFetch
002922r 3                       ; Note n2 stored at addr and n1 in the next cell -- in our case,
002922r 3                       ; the next two bytes. This is equvalent to  `DUP CELL+ @ SWAP @`
002922r 3                       ; """
002922r 3               xt_two_fetch:
002922r 3  20 rr rr                     jsr underflow_1
002925r 3               
002925r 3  B5 00                        lda 0,x
002927r 3  85 rr                        sta tmp1
002929r 3  B4 01                        ldy 1,x
00292Br 3  84 rr                        sty tmp1+1
00292Dr 3               
00292Dr 3  CA                           dex             ; reuse one stack element
00292Er 3  CA                           dex
00292Fr 3               
00292Fr 3  B2 rr                        lda (tmp1)      ; copy LSB
002931r 3  95 00                        sta 0,x
002933r 3  A0 01                        ldy #1          ; copy next
002935r 3  B1 rr                        lda (tmp1),y
002937r 3  95 01                        sta 1,x
002939r 3  C8                           iny             ; copy next
00293Ar 3  B1 rr                        lda (tmp1),y
00293Cr 3  95 02                        sta 2,x
00293Er 3  C8                           iny             ; copy next
00293Fr 3  B1 rr                        lda (tmp1),y
002941r 3  95 03                        sta 3,x
002943r 3               
002943r 3  60           z_two_fetch:    rts
002944r 3               
002944r 3               ; ## TWO_OVER ( d1 d2 -- d1 d2 d1 ) "Copy double word NOS to TOS"
002944r 3               ; ## "2over"  auto  ANS core
002944r 3                       ; """https://forth-standard.org/standard/core/TwoOVER"""
002944r 3               xt_two_over:
002944r 3  20 rr rr                     jsr underflow_4
002947r 3               
002947r 3  CA                           dex
002948r 3  CA                           dex
002949r 3  CA                           dex
00294Ar 3  CA                           dex
00294Br 3               
00294Br 3  B5 08                        lda 8,x
00294Dr 3  95 00                        sta 0,x
00294Fr 3               
00294Fr 3  B5 09                        lda 9,x
002951r 3  95 01                        sta 1,x
002953r 3               
002953r 3  B5 0A                        lda 10,x
002955r 3  95 02                        sta 2,x
002957r 3               
002957r 3  B5 0B                        lda 11,x
002959r 3  95 03                        sta 3,x
00295Br 3               
00295Br 3  60           z_two_over:     rts
00295Cr 3               
00295Cr 3               
00295Cr 3               ; ## TWO_R_FETCH ( -- n n ) "Copy top two entries from Return Stack"
00295Cr 3               ; ## "2r@"  auto  ANS core ext
00295Cr 3                       ; """https://forth-standard.org/standard/core/TwoRFetch
00295Cr 3                       ;
00295Cr 3                       ; This is R> R> 2DUP >R >R SWAP but we can do it a lot faster in
00295Cr 3                       ; assembler. We use trickery to access the elements on the Return
00295Cr 3                       ; Stack instead of pulling the return address first and storing
00295Cr 3                       ; it somewhere else like for 2R> and 2>R. In this version, we leave
00295Cr 3                       ; it as Never Native; at some point, we should compare versions to
00295Cr 3                       ; see if an Always Native version would be better
00295Cr 3                       ; """
00295Cr 3               xt_two_r_fetch:
00295Cr 3               		; make room on the Data Stack
00295Cr 3  CA                           dex
00295Dr 3  CA                           dex
00295Er 3  CA                           dex
00295Fr 3  CA                           dex
002960r 3               
002960r 3                               ; Get four bytes off of Return Stack. This assumes that
002960r 3                               ; we took a subroutine jump here so the first two entries
002960r 3                               ; are the return address
002960r 3  8A                           txa
002961r 3  BA                           tsx
002962r 3  DA                           phx             ; 65c02 has no TXY, so do it the hard way
002963r 3  7A                           ply
002964r 3  AA                           tax
002965r 3               
002965r 3                               ; The Return Stack addreses $0101 and $0102 are occupied by
002965r 3                               ; the return address for this word. This is a whole lot
002965r 3                               ; easier on the 65816
002965r 3  B9 03 01                     lda $0103,y     ; LSB of top entry
002968r 3  95 00                        sta 0,x
00296Ar 3  B9 04 01                     lda $0104,y     ; MSB of top entry
00296Dr 3  95 01                        sta 1,x
00296Fr 3  B9 05 01                     lda $0105,y     ; LSB of bottom entry
002972r 3  95 02                        sta 2,x
002974r 3  B9 06 01                     lda $0106,y     ; MSB of top entry
002977r 3  95 03                        sta 3,x
002979r 3               
002979r 3  60           z_two_r_fetch:  rts
00297Ar 3               
00297Ar 3               
00297Ar 3               ; ## TWO_R_FROM ( -- n1 n2 ) (R: n1 n2 -- ) "Pull two cells from Return Stack"
00297Ar 3               ; ## "2r>"  auto  ANS core ext
00297Ar 3               	    ; """https://forth-standard.org/standard/core/TwoRfrom
00297Ar 3                       ; Pull top two entries from Return Stack.
00297Ar 3                       ;
00297Ar 3                       ; Is the same as
00297Ar 3                       ; R> R> SWAP. As with R>, the problem with the is word is that
00297Ar 3                       ; the top value on the ReturnStack for a STC Forth is the
00297Ar 3                       ; return address, which we need to get out of the way first.
00297Ar 3                       ; Native compile needs to be handled as a special case.
00297Ar 3                       ; """
00297Ar 3               xt_two_r_from:
00297Ar 3                               ; save the return address
00297Ar 3  68                           pla                     ; LSB
00297Br 3  85 rr                        sta tmp1
00297Dr 3  68                           pla                     ; MSB
00297Er 3  85 rr                        sta tmp1+1
002980r 3               
002980r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002980r 3               
002980r 3               		; make room on stack
002980r 3  CA                           dex
002981r 3  CA                           dex
002982r 3  CA                           dex
002983r 3  CA                           dex
002984r 3               
002984r 3                               ; In theory, we should test for underflow on the Return
002984r 3                               ; Stack. However, given the traffic there with an STC
002984r 3                               ; Forth, that's probably not really useful
002984r 3               
002984r 3                               ; now we can access the data
002984r 3  68                           pla                     ; LSB
002985r 3  95 00                        sta 0,x
002987r 3  68                           pla                     ; MSB
002988r 3  95 01                        sta 1,x
00298Ar 3               
00298Ar 3  68                           pla                     ; LSB
00298Br 3  95 02                        sta 2,x
00298Dr 3  68                           pla                     ; MSB
00298Er 3  95 03                        sta 3,x
002990r 3               
002990r 3                               ; --- CUT HERE FOR NATIVE CODING ---
002990r 3               
002990r 3                               ; restore return address
002990r 3  A5 rr                        lda tmp1+1              ; MSB
002992r 3  48                           pha
002993r 3  A5 rr                        lda tmp1                ; LSB
002995r 3  48                           pha
002996r 3               
002996r 3  60           z_two_r_from:   rts
002997r 3               
002997r 3               
002997r 3               ; ## TWO_SLASH ( n -- n ) "Divide TOS by two"
002997r 3               ; ## "2/"  auto  ANS core
002997r 3                       ; """https://forth-standard.org/standard/core/TwoDiv"""
002997r 3               xt_two_slash:
002997r 3  20 rr rr                     jsr underflow_1
00299Ar 3               
00299Ar 3                               ; We can't just LSR the LSB and ROR the MSB because that
00299Ar 3                               ; would do bad things to the sign
00299Ar 3  B5 01                        lda 1,x
00299Cr 3  0A                           asl                     ; save the sign
00299Dr 3  76 01                        ror 1,x
00299Fr 3  76 00                        ror 0,x
0029A1r 3               
0029A1r 3  60           z_two_slash:    rts
0029A2r 3               
0029A2r 3               
0029A2r 3               ; ## TWO_STAR ( n -- n ) "Multiply TOS by two"
0029A2r 3               ; ## "2*"  auto  ANS core
0029A2r 3                       ; """https://forth-standard.org/standard/core/TwoTimes
0029A2r 3                       ;
0029A2r 3                       ; Also used for CELLS
0029A2r 3                       ; """
0029A2r 3               xt_two_star:
0029A2r 3               xt_cells:
0029A2r 3  20 rr rr                     jsr underflow_1
0029A5r 3               
0029A5r 3  16 00                        asl 0,x
0029A7r 3  36 01                        rol 1,x
0029A9r 3               z_cells:
0029A9r 3  60           z_two_star:     rts
0029AAr 3               
0029AAr 3               
0029AAr 3               ; ## TWO_STORE ( n1 n2 addr -- ) "Store two numbers at given address"
0029AAr 3               ; ## "2!"  auto  ANS core
0029AAr 3                       ; """https://forth-standard.org/standard/core/TwoStore
0029AAr 3                       ; Stores so n2 goes to addr and n1 to the next consecutive cell.
0029AAr 3                       ; Is equivalent to  `SWAP OVER ! CELL+ !`
0029AAr 3                       ; """
0029AAr 3               xt_two_store:
0029AAr 3  20 rr rr                     jsr underflow_3
0029ADr 3               
0029ADr 3  B5 00                        lda 0,x
0029AFr 3  85 rr                        sta tmp1
0029B1r 3  B4 01                        ldy 1,x
0029B3r 3  84 rr                        sty tmp1+1
0029B5r 3               
0029B5r 3  E8                           inx
0029B6r 3  E8                           inx
0029B7r 3               
0029B7r 3  B5 00                        lda 0,x         ; copy MSB
0029B9r 3  92 rr                        sta (tmp1)
0029BBr 3  B5 01                        lda 1,x         ; copy next
0029BDr 3  A0 01                        ldy #1
0029BFr 3  91 rr                        sta (tmp1),y
0029C1r 3  B5 02                        lda 2,x         ; copy next
0029C3r 3  C8                           iny
0029C4r 3  91 rr                        sta (tmp1),y
0029C6r 3  B5 03                        lda 3,x         ; copy MSB
0029C8r 3  C8                           iny
0029C9r 3  91 rr                        sta (tmp1),y
0029CBr 3               
0029CBr 3  E8                           inx             ; 2DROP
0029CCr 3  E8                           inx
0029CDr 3  E8                           inx
0029CEr 3  E8                           inx
0029CFr 3               
0029CFr 3  60           z_two_store:    rts
0029D0r 3               
0029D0r 3               
0029D0r 3               ; ## TWO_SWAP ( n1 n2 n3 n4 -- n3 n4 n1 n1 ) "Exchange two double words"
0029D0r 3               ; ## "2swap"  auto  ANS core
0029D0r 3                       ; """https://forth-standard.org/standard/core/TwoSWAP"""
0029D0r 3               xt_two_swap:
0029D0r 3  20 rr rr                     jsr underflow_4
0029D3r 3               
0029D3r 3                               ; 0 <-> 4
0029D3r 3  B5 00                        lda 0,x
0029D5r 3  B4 04                        ldy 4,x
0029D7r 3  95 04                        sta 4,x
0029D9r 3  94 00                        sty 0,x
0029DBr 3               
0029DBr 3                               ; 1 <-> 5
0029DBr 3  B5 01                        lda 1,x
0029DDr 3  B4 05                        ldy 5,x
0029DFr 3  95 05                        sta 5,x
0029E1r 3  94 01                        sty 1,x
0029E3r 3               
0029E3r 3                               ; 2 <-> 6
0029E3r 3  B5 02                        lda 2,x
0029E5r 3  B4 06                        ldy 6,x
0029E7r 3  95 06                        sta 6,x
0029E9r 3  94 02                        sty 2,x
0029EBr 3               
0029EBr 3                               ; 3 <-> 7
0029EBr 3  B5 03                        lda 3,x
0029EDr 3  B4 07                        ldy 7,x
0029EFr 3  95 07                        sta 7,x
0029F1r 3  94 03                        sty 3,x
0029F3r 3               
0029F3r 3  60           z_two_swap:     rts
0029F4r 3               
0029F4r 3               
0029F4r 3               ; ## TWO_TO_R ( n1 n2 -- )(R: -- n1 n2 "Push top two entries to Return Stack"
0029F4r 3               ; ## "2>r"  auto  ANS core ext
0029F4r 3                       ; """https://forth-standard.org/standard/core/TwotoR
0029F4r 3                       ; Push top two entries to Return Stack.
0029F4r 3                       ;
0029F4r 3                       ; The same as SWAP >R >R
0029F4r 3                       ; except that if we jumped here, the return address will be in the
0029F4r 3                       ; way. May not be natively compiled unless we're clever and use
0029F4r 3                       ; special routines.
0029F4r 3                       ; """
0029F4r 3               xt_two_to_r:
0029F4r 3                               ; save the return address
0029F4r 3  68                           pla             ; LSB
0029F5r 3  85 rr                        sta tmp1
0029F7r 3  68                           pla             ; MSB
0029F8r 3  85 rr                        sta tmp1+1
0029FAr 3               
0029FAr 3                               ; --- CUT HERE FOR NATIVE CODING ---
0029FAr 3               
0029FAr 3  20 rr rr                     jsr underflow_2
0029FDr 3               
0029FDr 3                               ; now we can move the data
0029FDr 3  B5 03                        lda 3,x         ; MSB
0029FFr 3  48                           pha
002A00r 3  B5 02                        lda 2,x         ; LSB
002A02r 3  48                           pha
002A03r 3               
002A03r 3                               ; now we can move the data
002A03r 3  B5 01                        lda 1,x         ; MSB
002A05r 3  48                           pha
002A06r 3  B5 00                        lda 0,x         ; LSB
002A08r 3  48                           pha
002A09r 3               
002A09r 3  E8                           inx
002A0Ar 3  E8                           inx
002A0Br 3  E8                           inx
002A0Cr 3  E8                           inx
002A0Dr 3               
002A0Dr 3                               ; --- CUT HERE FOR NATIVE CODING ---
002A0Dr 3               
002A0Dr 3                               ; restore return address
002A0Dr 3  A5 rr                        lda tmp1+1      ; MSB
002A0Fr 3  48                           pha
002A10r 3  A5 rr                        lda tmp1        ; LSB
002A12r 3  48                           pha
002A13r 3               
002A13r 3  60           z_two_to_r:     rts
002A14r 3               
002A14r 3               
002A14r 3               ; ## TWO_CONSTANT (C: d "name" -- ) ( -- d) "Create a constant for a double word"
002A14r 3               ; ## "2constant"  auto  ANS double
002A14r 3                       ; """https://forth-standard.org/standard/double/TwoCONSTANT
002A14r 3                       ;
002A14r 3                       ; Based on the Forth code
002A14r 3                       ; : 2CONSTANT ( D -- )  CREATE SWAP , , DOES> DUP @ SWAP CELL+ @ ;
002A14r 3                       ; """
002A14r 3               xt_two_constant:
002A14r 3  20 rr rr                     jsr underflow_2
002A17r 3               
002A17r 3  20 rr rr                     jsr xt_create
002A1Ar 3  20 rr rr                     jsr xt_swap
002A1Dr 3  20 rr rr                     jsr xt_comma
002A20r 3  20 rr rr                     jsr xt_comma
002A23r 3               
002A23r 3  20 rr rr                     jsr does_runtime    ; does> turns into these two routines.
002A26r 3  20 rr rr                     jsr dodoes
002A29r 3               
002A29r 3  20 rr rr                     jsr xt_dup
002A2Cr 3  20 rr rr                     jsr xt_fetch
002A2Fr 3  20 rr rr                     jsr xt_swap
002A32r 3  20 rr rr                     jsr xt_cell_plus
002A35r 3  20 rr rr                     jsr xt_fetch
002A38r 3               
002A38r 3  60           z_two_constant: rts
002A39r 3               
002A39r 3               
002A39r 3               ; ## TWO_LITERAL (C: d -- ) ( -- d) "Compile a literal double word"
002A39r 3               ; ## "2literal"  auto  ANS double
002A39r 3                       ; """https://forth-standard.org/standard/double/TwoLITERAL"""
002A39r 3                       ; Based on the Forth code
002A39r 3                       ; : 2LITERAL ( D -- ) SWAP POSTPONE LITERAL POSTPONE LITERAL ; IMMEDIATE
002A39r 3                       ; """
002A39r 3               xt_two_literal:
002A39r 3  20 rr rr                     jsr underflow_2 ; double number
002A3Cr 3               
002A3Cr 3  20 rr rr                     jsr xt_swap
002A3Fr 3  20 rr rr                     jsr xt_literal
002A42r 3  20 rr rr                     jsr xt_literal
002A45r 3               
002A45r 3  60           z_two_literal:  rts
002A46r 3               
002A46r 3               
002A46r 3               ; ## TWO_VARIABLE ( "name" -- ) "Create a variable for a double word"
002A46r 3               ; ## "2variable"  auto  ANS double
002A46r 3                       ; """https://forth-standard.org/standard/double/TwoVARIABLE
002A46r 3                       ; The variable is not initialized to zero.
002A46r 3                       ;
002A46r 3                       ; This can be realized in Forth as either
002A46r 3                       ; CREATE 2 CELLS ALLOT  or just  CREATE 0 , 0 ,
002A46r 3                       ; """
002A46r 3               xt_two_variable:
002A46r 3                               ; We just let CRATE and ALLOT do the heavy lifting
002A46r 3  20 rr rr                     jsr xt_create
002A49r 3               
002A49r 3  CA                           dex
002A4Ar 3  CA                           dex
002A4Br 3  A9 04                        lda #4
002A4Dr 3  95 00                        sta 0,x
002A4Fr 3  74 01                        stz 1,x
002A51r 3               
002A51r 3  20 rr rr                     jsr xt_allot
002A54r 3               
002A54r 3  60           z_two_variable: rts
002A55r 3               
002A55r 3               
002A55r 3               ; ## TYPE ( addr u -- ) "Print string"
002A55r 3               ; ## "type"  auto  ANS core
002A55r 3                       ; """https://forth-standard.org/standard/core/TYPE
002A55r 3                       ; Works through EMIT to allow OUTPUT revectoring.
002A55r 3                       ; """
002A55r 3               
002A55r 3               xt_type:
002A55r 3  20 rr rr                     jsr underflow_2
002A58r 3               
002A58r 3                               ; Save the starting address into tmp1
002A58r 3  B5 02                        lda 2,x
002A5Ar 3  85 rr                        sta tmp1
002A5Cr 3  B5 03                        lda 3,x
002A5Er 3  85 rr                        sta tmp1+1
002A60r 3               @loop:
002A60r 3                               ; done if length is zero
002A60r 3  B5 00                        lda 0,x
002A62r 3  15 01                        ora 1,x
002A64r 3  F0 15                        beq @done
002A66r 3               
002A66r 3                               ; Send the current character
002A66r 3  B2 rr                        lda (tmp1)
002A68r 3  20 rr rr                     jsr emit_a      ; avoids stack foolery
002A6Br 3               
002A6Br 3                               ; Move the address along (in tmp1)
002A6Br 3  E6 rr                        inc tmp1
002A6Dr 3  D0 02                        bne @1
002A6Fr 3  E6 rr                        inc tmp1+1
002A71r 3               @1:
002A71r 3                               ; Reduce the count (on the data stack)
002A71r 3  B5 00                        lda 0,x
002A73r 3  D0 02                        bne @2
002A75r 3  D6 01                        dec 1,x
002A77r 3               @2:
002A77r 3  D6 00                        dec 0,x
002A79r 3               
002A79r 3  80 E5                        bra @loop
002A7Br 3               @done:
002A7Br 3  E8                           inx
002A7Cr 3  E8                           inx
002A7Dr 3  E8                           inx
002A7Er 3  E8                           inx
002A7Fr 3               
002A7Fr 3  60           z_type:         rts
002A80r 3               
002A80r 3               
002A80r 3               
002A80r 3               ; ## U_DOT ( u -- ) "Print TOS as unsigned number"
002A80r 3               ; ## "u."  tested  ANS core
002A80r 3                       ; """https://forth-standard.org/standard/core/Ud
002A80r 3                       ;
002A80r 3                       ; This is : U. 0 <# #S #> TYPE SPACE ; in Forth
002A80r 3                       ; We use the internal assembler function print_u followed
002A80r 3                       ; by a single space
002A80r 3                       ; """
002A80r 3               xt_u_dot:
002A80r 3  20 rr rr                     jsr underflow_1
002A83r 3               
002A83r 3  20 rr rr                     jsr print_u
002A86r 3  A9 20                        lda #AscSP
002A88r 3  20 rr rr                     jsr emit_a
002A8Br 3               
002A8Br 3  60           z_u_dot:        rts
002A8Cr 3               
002A8Cr 3               
002A8Cr 3               ; ## U_DOT_R ( u u -- ) "Print NOS as unsigned number right-justified with TOS width"
002A8Cr 3               ; ## "u.r"  tested  ANS core ext
002A8Cr 3                       ; """https://forth-standard.org/standard/core/UDotR"""
002A8Cr 3               xt_u_dot_r:
002A8Cr 3  20 rr rr                     jsr underflow_2
002A8Fr 3               
002A8Fr 3  20 rr rr                     jsr xt_to_r
002A92r 3  20 rr rr                     jsr xt_zero
002A95r 3  20 rr rr                     jsr xt_less_number_sign
002A98r 3  20 rr rr                     jsr xt_number_sign_s
002A9Br 3  20 rr rr                     jsr xt_number_sign_greater
002A9Er 3  20 rr rr                     jsr xt_r_from
002AA1r 3  20 rr rr                     jsr xt_over
002AA4r 3  20 rr rr                     jsr xt_minus
002AA7r 3  20 rr rr                     jsr xt_spaces
002AAAr 3  20 rr rr                     jsr xt_type
002AADr 3               
002AADr 3  60           z_u_dot_r:      rts
002AAEr 3               
002AAEr 3               
002AAEr 3               ; ## U_GREATER_THAN ( n m -- f ) "Return true if NOS > TOS (unsigned)"
002AAEr 3               ; ## "u>"  auto  ANS core ext
002AAEr 3                       ; """https://forth-standard.org/standard/core/Umore"""
002AAEr 3               xt_u_greater_than:
002AAEr 3  20 rr rr                     jsr underflow_2
002AB1r 3               
002AB1r 3  B5 00                        lda 0,x
002AB3r 3  D5 02                        cmp 2,x
002AB5r 3  B5 01                        lda 1,x
002AB7r 3  F5 03                        sbc 3,x
002AB9r 3  E8                           inx
002ABAr 3  E8                           inx
002ABBr 3               
002ABBr 3  A9 00                        lda #0
002ABDr 3  69 FF                        adc #$ff
002ABFr 3  95 00                        sta 0,x         ; store flag
002AC1r 3  95 01                        sta 1,x
002AC3r 3               
002AC3r 3  60           z_u_greater_than:    rts
002AC4r 3               
002AC4r 3               ; ## U_LESS_THAN ( n m -- f ) "Return true if NOS < TOS (unsigned)"
002AC4r 3               ; ## "u<"  auto  ANS core
002AC4r 3                       ; """https://forth-standard.org/standard/core/Uless"""
002AC4r 3               xt_u_less_than:
002AC4r 3  20 rr rr                     jsr underflow_2
002AC7r 3               
002AC7r 3  B5 02                        lda 2,x
002AC9r 3  D5 00                        cmp 0,x
002ACBr 3  B5 03                        lda 3,x
002ACDr 3  F5 01                        sbc 1,x
002ACFr 3  E8                           inx
002AD0r 3  E8                           inx
002AD1r 3               
002AD1r 3  A9 00                        lda #0
002AD3r 3  69 FF                        adc #$ff
002AD5r 3  95 00                        sta 0,x         ; store flag
002AD7r 3  95 01                        sta 1,x
002AD9r 3               
002AD9r 3  60           z_u_less_than:    rts
002ADAr 3               
002ADAr 3               
002ADAr 3               ; ## UD_DOT ( d -- ) "Print double as unsigned"
002ADAr 3               ; ## "ud."  auto  Tali double
002ADAr 3                       ;
002ADAr 3                       ; """Based on the Forth code  : UD. <# #S #> TYPE SPACE ;
002ADAr 3                       ; """
002ADAr 3               xt_ud_dot:
002ADAr 3  20 rr rr                     jsr underflow_2 ; double number
002ADDr 3               
002ADDr 3  20 rr rr                     jsr xt_less_number_sign
002AE0r 3  20 rr rr                     jsr xt_number_sign_s
002AE3r 3  20 rr rr                     jsr xt_number_sign_greater
002AE6r 3  20 rr rr                     jsr xt_type
002AE9r 3  20 rr rr                     jsr xt_space
002AECr 3               
002AECr 3  60           z_ud_dot:        rts
002AEDr 3               
002AEDr 3               
002AEDr 3               ; ## UD_DOT_R ( d u -- ) "Print unsigned double right-justified u wide"
002AEDr 3               ; ## "ud.r"  auto  Tali double
002AEDr 3                       ;
002AEDr 3                       ; """Based on the Forth code : UD.R  >R <# #S #> R> OVER - SPACES TYPE ;
002AEDr 3                       ; """
002AEDr 3               xt_ud_dot_r:
002AEDr 3  20 rr rr                     jsr underflow_3
002AF0r 3               
002AF0r 3  20 rr rr                     jsr xt_to_r
002AF3r 3  20 rr rr                     jsr xt_less_number_sign
002AF6r 3  20 rr rr                     jsr xt_number_sign_s
002AF9r 3  20 rr rr                     jsr xt_number_sign_greater
002AFCr 3  20 rr rr                     jsr xt_r_from
002AFFr 3  20 rr rr                     jsr xt_over
002B02r 3  20 rr rr                     jsr xt_minus
002B05r 3  20 rr rr                     jsr xt_spaces
002B08r 3  20 rr rr                     jsr xt_type
002B0Br 3               
002B0Br 3  60           z_ud_dot_r:      rts
002B0Cr 3               
002B0Cr 3               
002B0Cr 3               ; ## UM_SLASH_MOD ( ud u -- ur u ) "32/16 -> 16 division"
002B0Cr 3               ; ## "um/mod"  auto  ANS core
002B0Cr 3                       ; """https://forth-standard.org/standard/core/UMDivMOD
002B0Cr 3                       ; Divide double cell number by single cell number, returning the
002B0Cr 3                       ; quotient as TOS and any remainder as NOS. All numbers are unsigned.
002B0Cr 3                       ; This is the basic division operation all others use. Based on FIG
002B0Cr 3                       ; Forth code, modified by Garth Wilson, see
002B0Cr 3                       ; http://6502.org/source/integers/ummodfix/ummodfix.htm
002B0Cr 3                       ;
002B0Cr 3                       ; This uses tmp1, tmp1+1, and tmptos
002B0Cr 3                       ; """
002B0Cr 3               
002B0Cr 3               xt_um_slash_mod:
002B0Cr 3  20 rr rr                     jsr underflow_3
002B0Fr 3               
002B0Fr 3                               ; catch division by zero
002B0Fr 3  B5 00                        lda 0,x
002B11r 3  15 01                        ora 1,x
002B13r 3  D0 05                        bne @not_zero
002B15r 3               
002B15r 3  A9 04                        lda #err_divzero
002B17r 3  4C rr rr                     jmp error
002B1Ar 3               
002B1Ar 3               @not_zero:
002B1Ar 3                               ; We loop 17 times
002B1Ar 3  A9 11                        lda #17
002B1Cr 3  85 rr                        sta tmptos
002B1Er 3               
002B1Er 3               @loop:
002B1Er 3                               ; rotate low cell of dividend one bit left (LSB)
002B1Er 3  36 04                        rol 4,x
002B20r 3  36 05                        rol 5,x
002B22r 3               
002B22r 3                               ; loop control
002B22r 3  C6 rr                        dec tmptos
002B24r 3  F0 22                        beq @done
002B26r 3               
002B26r 3                               ; rotate high cell of dividend one bit left (MSB)
002B26r 3  36 02                        rol 2,x
002B28r 3  36 03                        rol 3,x
002B2Ar 3               
002B2Ar 3  64 rr                        stz tmp1        ; store the bit we got from hi cell (MSB)
002B2Cr 3  26 rr                        rol tmp1
002B2Er 3               
002B2Er 3                               ; subtract dividend hi cell minus divisor
002B2Er 3  38                           sec
002B2Fr 3  B5 02                        lda 2,x
002B31r 3  F5 00                        sbc 0,x
002B33r 3  85 rr                        sta tmp1+1
002B35r 3  B5 03                        lda 3,x
002B37r 3  F5 01                        sbc 1,x
002B39r 3               
002B39r 3  A8                           tay
002B3Ar 3  A5 rr                        lda tmp1
002B3Cr 3  E9 00                        sbc #0
002B3Er 3  90 DE                        bcc @loop
002B40r 3               
002B40r 3                               ; make result new dividend high cell
002B40r 3  A5 rr                        lda tmp1+1
002B42r 3  95 02                        sta 2,x
002B44r 3  94 03                        sty 3,x         ; used as temp storage
002B46r 3               
002B46r 3  80 D6                        bra @loop
002B48r 3               @done:
002B48r 3  E8                           inx
002B49r 3  E8                           inx
002B4Ar 3               
002B4Ar 3  20 rr rr                     jsr xt_swap
002B4Dr 3               
002B4Dr 3  60           z_um_slash_mod: rts
002B4Er 3               
002B4Er 3               
002B4Er 3               
002B4Er 3               ; ## UM_STAR ( u u -- ud ) "Multiply 16 x 16 -> 32"
002B4Er 3               ; ## "um*"  auto  ANS core
002B4Er 3                       ; """https://forth-standard.org/standard/core/UMTimes
002B4Er 3                       ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.
002B4Er 3                       ; Old Forth versions such as FIG Forth call this U*
002B4Er 3                       ;
002B4Er 3                       ; This is based on modified FIG Forth code by Dr. Jefyll, see
002B4Er 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed
002B4Er 3                       ; discussion.
002B4Er 3                       ;
002B4Er 3                       ; We don't use the system scratch pad (SYSPAD) for temp
002B4Er 3                       ; storage because >NUMBER uses it as well, but instead tmp1 to
002B4Er 3                       ; tmp3 (tmp1 is N in the original code, tmp1+1 is N+1, etc).
002B4Er 3                       ;
002B4Er 3                       ; Consider switching to a table-supported version based on
002B4Er 3                       ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
002B4Er 3                       ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d>
002B4Er 3                       ; http://forum.6502.org/viewtopic.php?p=205#p205
002B4Er 3                       ; http://forum.6502.org/viewtopic.php?f=9&t=689
002B4Er 3                       ; """
002B4Er 3               
002B4Er 3               xt_um_star:
002B4Er 3  20 rr rr                     jsr underflow_2
002B51r 3               
002B51r 3                               ; to eliminate clc inside the loop, the value at
002B51r 3                               ; tmp1 is reduced by 1 in advance
002B51r 3  18                           clc
002B52r 3  B5 00                        lda 0,x         ; copy TOS to tmp2
002B54r 3  E9 00                        sbc #0
002B56r 3  85 rr                        sta tmp2
002B58r 3               
002B58r 3  B5 01                        lda 1,x
002B5Ar 3  E9 00                        sbc #0
002B5Cr 3  90 31                        bcc @zero       ; is TOS zero?
002B5Er 3  85 rr                        sta tmp2+1
002B60r 3               
002B60r 3  A9 00                        lda #0
002B62r 3  85 rr                        sta tmp1
002B64r 3  86 rr                        stx tmp3        ; tested for exit from outer loop
002B66r 3  CA                           dex
002B67r 3  CA                           dex
002B68r 3               
002B68r 3               @outer_loop:
002B68r 3  A0 08                        ldy #8          ; counter inner loop
002B6Ar 3  56 04                        lsr 4,x         ; think "2,x" then later "3,x"
002B6Cr 3               
002B6Cr 3               @inner_loop:
002B6Cr 3  90 0C                        bcc @no_add
002B6Er 3  85 rr                        sta tmp1+1      ; save time, don't CLC
002B70r 3  A5 rr                        lda tmp1
002B72r 3  65 rr                        adc tmp2
002B74r 3  85 rr                        sta tmp1
002B76r 3  A5 rr                        lda tmp1+1
002B78r 3  65 rr                        adc tmp2+1
002B7Ar 3               
002B7Ar 3               @no_add:
002B7Ar 3  6A                           ror
002B7Br 3  66 rr                        ror tmp1
002B7Dr 3  76 04                        ror 4,x         ; think "2,x" then later "3,x"
002B7Fr 3               
002B7Fr 3  88                           dey
002B80r 3  D0 EA                        bne @inner_loop ; go back for one more shift?
002B82r 3               
002B82r 3  E8                           inx
002B83r 3  E4 rr                        cpx tmp3
002B85r 3  D0 E1                        bne @outer_loop ; go back for eight more shifts?
002B87r 3               
002B87r 3                               ; all done, store high word of result
002B87r 3  95 01                        sta 1,x
002B89r 3  A5 rr                        lda tmp1
002B8Br 3  95 00                        sta 0,x
002B8Dr 3  80 04                        bra @done
002B8Fr 3               
002B8Fr 3               @zero:
002B8Fr 3  74 02                        stz 2,x
002B91r 3  74 03                        stz 3,x
002B93r 3               @done:
002B93r 3  60           z_um_star:      rts
002B94r 3               
002B94r 3               
002B94r 3               
002B94r 3               ; ## UNLOOP ( -- )(R: n1 n2 n3 ---) "Drop loop control from Return stack"
002B94r 3               ; ## "unloop"  auto  ANS core
002B94r 3                       ; """https://forth-standard.org/standard/core/UNLOOP
002B94r 3                       ;
002B94r 3                       ; Note that 6xPLA uses just as many bytes as a loop would
002B94r 3                       ; """
002B94r 3               xt_unloop:
002B94r 3                               ; Drop fudge number (limit/start from DO/?DO off the
002B94r 3                               ; return stack
002B94r 3  68                           pla
002B95r 3  68                           pla
002B96r 3  68                           pla
002B97r 3  68                           pla
002B98r 3               
002B98r 3                               ; Now drop the LEAVE address that was below them off
002B98r 3                               ; the Return Stack as well
002B98r 3  68                           pla
002B99r 3  68                           pla
002B9Ar 3               
002B9Ar 3  60           z_unloop:       rts
002B9Br 3               
002B9Br 3               
002B9Br 3               ; ## UNTIL (C: dest -- ) ( -- ) "Loop flow control"
002B9Br 3               ; ## "until"  auto  ANS core
002B9Br 3                       ; """http://forth-standard.org/standard/core/UNTIL"""
002B9Br 3               xt_until:
002B9Br 3                               ; Compile a 0BRANCH
002B9Br 3  A0 rr                        ldy #>zero_branch_runtime
002B9Dr 3  A9 rr                        lda #<zero_branch_runtime
002B9Fr 3  20 rr rr                     jsr cmpl_subroutine
002BA2r 3               
002BA2r 3                               ; The address to loop back to is on the stack.
002BA2r 3                               ; Just compile it as the destination for the
002BA2r 3                               ; 0branch.
002BA2r 3  20 rr rr                     jsr xt_comma
002BA5r 3               
002BA5r 3  60           z_until:        rts
002BA6r 3               
002BA6r 3               
002BA6r 3               ; ## UNUSED ( -- u ) "Return size of space available to Dictionary"
002BA6r 3               ; ## "unused"  auto  ANS core ext
002BA6r 3                       ; """https://forth-standard.org/standard/core/UNUSED
002BA6r 3                       ; UNUSED does not include the ACCEPT history buffers. Total RAM
002BA6r 3                       ; should be HERE + UNUSED + <history buffer size>, the last of which
002BA6r 3                       ; defaults to $400
002BA6r 3                       ; """
002BA6r 3               xt_unused:
002BA6r 3  CA                           dex
002BA7r 3  CA                           dex
002BA8r 3               
002BA8r 3  A9 FF                        lda #<cp_end
002BAAr 3  38                           sec
002BABr 3  E5 rr                        sbc cp
002BADr 3  95 00                        sta 0,x
002BAFr 3               
002BAFr 3  A9 7F                        lda #>cp_end
002BB1r 3  E5 rr                        sbc cp+1
002BB3r 3  95 01                        sta 1,x
002BB5r 3               
002BB5r 3  60           z_unused:       rts
002BB6r 3               
002BB6r 3               
002BB6r 3               ; ## UPDATE ( -- ) "Mark current block as dirty"
002BB6r 3               ; ## "update"  auto  ANS block
002BB6r 3                       ; """https://forth-standard.org/standard/block/UPDATE"""
002BB6r 3               xt_update:
002BB6r 3                               ; Turn on the dirty bit. We can't use TSB here because it only
002BB6r 3                               ; has Absolute and Direct Pages addressing modes
002BB6r 3  A0 2C                        ldy #buffstatus_offset
002BB8r 3  B1 rr                        lda (up),y
002BBAr 3  09 02                        ora #2          ; Turn on dirty flag (bit 2)
002BBCr 3  91 rr                        sta (up),y
002BBEr 3               
002BBEr 3  60           z_update:       rts
002BBFr 3               
002BBFr 3               
002BBFr 3               ; ## USERADDR ( -- addr ) "Push address of base address of user variables"
002BBFr 3               ; ## "useraddr"  tested  Tali Forth
002BBFr 3               xt_useraddr:
002BBFr 3  CA                           dex
002BC0r 3  CA                           dex
002BC1r 3  A9 rr                        lda #<up
002BC3r 3  95 00                        sta 0,x
002BC5r 3  A9 rr                        lda #>up
002BC7r 3  95 01                        sta 1,x
002BC9r 3               
002BC9r 3  60           z_useraddr:     rts
002BCAr 3               
002BCAr 3               
002BCAr 3               ; ## VALUE ( n "name" -- ) "Define a value"
002BCAr 3               ; ## "value"  auto  ANS core
002BCAr 3                       ; """https://forth-standard.org/standard/core/VALUE
002BCAr 3                       ;
002BCAr 3                       ; This is a dummy header for the WORDLIST. The actual code is
002BCAr 3                       ; identical to that of CONSTANT
002BCAr 3                       ; """
002BCAr 3               
002BCAr 3               
002BCAr 3               ; ## VARIABLE ( "name" -- ) "Define a variable"
002BCAr 3               ; ## "variable"  auto  ANS core
002BCAr 3                       ; """https://forth-standard.org/standard/core/VARIABLE
002BCAr 3                       ; There are various Forth definitions for this word, such as
002BCAr 3                       ; `CREATE 1 CELLS ALLOT`  or  `CREATE 0 ,`  We use a variant of the
002BCAr 3                       ; second one so the variable is initialized to zero
002BCAr 3                       ; """
002BCAr 3               xt_variable:
002BCAr 3                               ; we let CREATE do the heavy lifting
002BCAr 3  20 rr rr                     jsr xt_create
002BCDr 3               
002BCDr 3                               ; there is no "STZ (CP)" so we have to do this the hard
002BCDr 3                               ; way
002BCDr 3  A9 00                        lda #0
002BCFr 3               
002BCFr 3  92 rr                        sta (cp)
002BD1r 3  E6 rr                        inc cp
002BD3r 3  D0 02                        bne @1
002BD5r 3  E6 rr                        inc cp+1
002BD7r 3               @1:
002BD7r 3  92 rr                        sta (cp)
002BD9r 3  E6 rr                        inc cp
002BDBr 3  D0 02                        bne @2
002BDDr 3  E6 rr                        inc cp+1
002BDFr 3               @2:
002BDFr 3                               ; Now we need to adjust the length of the complete word by two
002BDFr 3  20 rr rr                     jsr adjust_z
002BE2r 3               
002BE2r 3  60           z_variable:     rts
002BE3r 3               
002BE3r 3               
002BE3r 3               ; ## WHILE ( C: dest -- orig dest ) ( x -- ) "Loop flow control"
002BE3r 3               ; ## "while"  auto  ANS core
002BE3r 3                       ; """http://forth-standard.org/standard/core/WHILE"""
002BE3r 3               xt_while:
002BE3r 3                               ; Compile a 0branch
002BE3r 3  A0 rr                        ldy #>zero_branch_runtime
002BE5r 3  A9 rr                        lda #<zero_branch_runtime
002BE7r 3  20 rr rr                     jsr cmpl_subroutine
002BEAr 3               
002BEAr 3                               ; Put the address (here) where the destination
002BEAr 3                               ; address needs to go so it can be put there later.
002BEAr 3  20 rr rr                     jsr xt_here
002BEDr 3               
002BEDr 3                               ; Fill in the destination address with 0 for now.
002BEDr 3  20 rr rr                     jsr xt_zero
002BF0r 3  20 rr rr                     jsr xt_comma
002BF3r 3               
002BF3r 3                               ; Swap the two addresses on the stack.
002BF3r 3  20 rr rr                     jsr xt_swap
002BF6r 3               
002BF6r 3  60           z_while:        rts
002BF7r 3               
002BF7r 3               
002BF7r 3               ; ## WITHIN ( n1 n2 n3 -- ) "See if within a range"
002BF7r 3               ; ## "within"  auto  ANS core ext
002BF7r 3                       ; """https://forth-standard.org/standard/core/WITHIN
002BF7r 3                       ;
002BF7r 3                       ; This an assembler version of the ANS Forth implementation
002BF7r 3                       ; at https://forth-standard.org/standard/core/WITHIN which is
002BF7r 3                       ; OVER - >R - R> U<  note there is an alternative high-level version
002BF7r 3                       ; ROT TUCK > -ROT > INVERT AND
002BF7r 3                       ; """"
002BF7r 3               xt_within:
002BF7r 3  20 rr rr                     jsr underflow_3
002BFAr 3               
002BFAr 3  20 rr rr                     jsr xt_over
002BFDr 3  20 rr rr                     jsr xt_minus
002C00r 3  20 rr rr                     jsr xt_to_r
002C03r 3  20 rr rr                     jsr xt_minus
002C06r 3  20 rr rr                     jsr xt_r_from
002C09r 3  20 rr rr                     jsr xt_u_less_than
002C0Cr 3               
002C0Cr 3  60           z_within:       rts
002C0Dr 3               
002C0Dr 3               
002C0Dr 3               ; ## WORD ( char "name " -- caddr ) "Parse input stream"
002C0Dr 3               ; ## "word"  auto  ANS core
002C0Dr 3                       ; """https://forth-standard.org/standard/core/WORD
002C0Dr 3                       ; Obsolete parsing word included for backwards compatibility only.
002C0Dr 3                       ; Do not use this, use `PARSE` or `PARSE-NAME`. Skips leading delimiters
002C0Dr 3                       ; and copies word to storage area for a maximum size of 255 bytes.
002C0Dr 3                       ; Returns the result as a counted string (requires COUNT to convert
002C0Dr 3                       ; to modern format), and inserts a space after the string. See "Forth
002C0Dr 3                       ; Programmer's Handbook" 3rd edition p. 159 and
002C0Dr 3                       ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
002C0Dr 3                       ; for discussions of why you shouldn't be using WORD anymore.
002C0Dr 3                       ;
002C0Dr 3                       ; Forth
002C0Dr 3                       ; would be   PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
002C0Dr 3                       ; We only allow input of 255 chars. Seriously, use PARSE-NAME.
002C0Dr 3                       ; """
002C0Dr 3               
002C0Dr 3               xt_word:
002C0Dr 3  20 rr rr                     jsr underflow_1
002C10r 3               
002C10r 3                               ; Skip over leading delimiters - this is like PARSE-NAME,
002C10r 3                               ; but unlike PARSE
002C10r 3  A4 rr                        ldy toin                ; >IN
002C12r 3               @loop:
002C12r 3  C4 rr                        cpy ciblen              ; quit if end of input
002C14r 3  F0 09                        beq @found_char
002C16r 3  B1 rr                        lda (cib),y
002C18r 3  D5 00                        cmp 0,x                 ; ASCII of delimiter
002C1Ar 3  D0 03                        bne @found_char
002C1Cr 3               
002C1Cr 3  C8                           iny
002C1Dr 3  80 F3                        bra @loop
002C1Fr 3               @found_char:
002C1Fr 3                               ; Save index of where word starts
002C1Fr 3  84 rr                        sty toin
002C21r 3               
002C21r 3                               ; The real work is done by parse
002C21r 3  20 rr rr                     jsr xt_parse            ; Returns ( addr u )
002C24r 3               
002C24r 3                               ; Convert the modern ( addr u ) string format to obsolete
002C24r 3                               ; ( caddr ) format. We just do this in the Dictionary
002C24r 3  B5 00                        lda 0,x
002C26r 3  92 rr                        sta (cp)                ; Save length of string
002C28r 3  48                           pha                     ; Keep copy of length for later
002C29r 3               
002C29r 3  20 rr rr                     jsr xt_dup              ; ( addr u u )
002C2Cr 3  A5 rr                        lda cp
002C2Er 3  18                           clc
002C2Fr 3  69 01                        adc #1
002C31r 3  95 02                        sta 2,x                 ; LSB of CP
002C33r 3  A5 rr                        lda cp+1
002C35r 3  69 00                        adc #0
002C37r 3  95 03                        sta 3,x                 ; ( addr cp+1 u )
002C39r 3               
002C39r 3  20 rr rr                     jsr xt_move
002C3Cr 3               
002C3Cr 3                               ; Return caddr
002C3Cr 3  CA                           dex
002C3Dr 3  CA                           dex
002C3Er 3  A5 rr                        lda cp
002C40r 3  95 00                        sta 0,x
002C42r 3  A5 rr                        lda cp+1
002C44r 3  95 01                        sta 1,x
002C46r 3               
002C46r 3                               ; Adjust CP
002C46r 3  68                           pla                     ; length of string
002C47r 3  18                           clc
002C48r 3  65 rr                        adc cp
002C4Ar 3  85 rr                        sta cp
002C4Cr 3  A5 rr                        lda cp+1
002C4Er 3  69 00                        adc #0                  ; we only need the carry
002C50r 3  85 rr                        sta cp+1
002C52r 3  60           z_word:         rts
002C53r 3               
002C53r 3               
002C53r 3               ; ## WORDLIST ( -- wid ) "Create new wordlist (from pool of 8)"
002C53r 3               ; ## "wordlist" auto ANS search
002C53r 3                       ; """https://forth-standard.org/standard/search/WORDLIST
002C53r 3                       ; See the tutorial on Wordlists and the Search Order for
002C53r 3                       ; more information.
002C53r 3                       ; """
002C53r 3               
002C53r 3               xt_wordlist:
002C53r 3                               ; Get the current number of wordlists
002C53r 3  A0 05                        ldy #num_wordlists_offset
002C55r 3  B1 rr                        lda (up),y      ; This is a byte variable, so only
002C57r 3                                               ; the LSB needs to be checked.
002C57r 3               
002C57r 3                               ; See if we are already at the max.
002C57r 3  C9 0C                        cmp #max_wordlists
002C59r 3  D0 05                        bne @ok
002C5Br 3               
002C5Br 3                               ; Print an error message if all wordlists used.
002C5Br 3  A9 0B                        lda #err_wordlist
002C5Dr 3  4C rr rr                     jmp error
002C60r 3               
002C60r 3               @ok:
002C60r 3  1A                           inc             ; Increment the wordlist#
002C61r 3  91 rr                        sta (up),y      ; Save it into byte variable #wordlists
002C63r 3  CA                           dex             ; and put it on the stack.
002C64r 3  CA                           dex
002C65r 3  95 00                        sta 0,x
002C67r 3  74 01                        stz 1,x         ; 12 is the max, so upper byte is always zero.
002C69r 3               
002C69r 3  60           z_wordlist:     rts
002C6Ar 3               
002C6Ar 3               
002C6Ar 3               
002C6Ar 3               ; ## WORDS ( -- ) "Print known words from Dictionary"
002C6Ar 3               ; ## "words"  tested  ANS tools
002C6Ar 3                       ; """https://forth-standard.org/standard/tools/WORDS
002C6Ar 3                       ; This is pretty much only used at the command line so we can
002C6Ar 3                       ; be slow and try to save space.
002C6Ar 3                       ; """
002C6Ar 3               
002C6Ar 3               xt_words:
002C6Ar 3                               ; we follow Gforth by starting on the next
002C6Ar 3                               ; line
002C6Ar 3  20 rr rr                     jsr xt_cr
002C6Dr 3               
002C6Dr 3                               ; We pretty-format the output by inserting a line break
002C6Dr 3                               ; before the end of the line. We can get away with pushing
002C6Dr 3                               ; the counter to the stack because this is usually an
002C6Dr 3                               ; interactive word and speed is not that important
002C6Dr 3  A9 00                        lda #0
002C6Fr 3  48                           pha
002C70r 3               
002C70r 3                               ; Set up for traversing the wordlist search order.
002C70r 3  CA                           dex                     ; Make room on the stack for
002C71r 3  CA                           dex                     ; a dictionary pointer.
002C72r 3  64 rr                        stz tmp3                ; Start at the beginning of
002C74r 3                                                       ; the search order.
002C74r 3               @wordlist_loop:
002C74r 3  A0 1E                        ldy #num_order_offset   ; Check against byte variable #ORDER.
002C76r 3  A5 rr                        lda tmp3
002C78r 3  D1 rr                        cmp (up),y              ; See if we are done.
002C7Ar 3  D0 02                        bne @have_wordlist
002C7Cr 3               
002C7Cr 3                               ; We ran out of wordlists to search.
002C7Cr 3  80 44                        bra @words_done
002C7Er 3               
002C7Er 3               @have_wordlist:
002C7Er 3                               ; start with last word in Dictionary
002C7Er 3                               ; Get the current wordlist id
002C7Er 3  18                           clc                     ; Index into byte array SEARCH-ORDER.
002C7Fr 3  69 1F                        adc #search_order_offset
002C81r 3  A8                           tay
002C82r 3  B1 rr                        lda (up),y              ; Get the index into array WORDLISTS
002C84r 3               
002C84r 3                               ; Get the DP for that wordlist.
002C84r 3  0A                           asl                     ; Turn offset into cells offset.
002C85r 3  18                           clc
002C86r 3  69 06                        adc #wordlists_offset
002C88r 3  A8                           tay
002C89r 3  B1 rr                        lda (up),y              ; Save the DP for this wordlist
002C8Br 3  95 00                        sta 0,x                 ; on the stack. ( nt )
002C8Dr 3  C8                           iny
002C8Er 3  B1 rr                        lda (up),y
002C90r 3  95 01                        sta 1,x
002C92r 3               
002C92r 3               @loop:
002C92r 3  20 rr rr                     jsr xt_dup              ; ( nt nt )
002C95r 3  20 rr rr                     jsr xt_name_to_string   ; ( nt addr u )
002C98r 3               
002C98r 3                               ; Insert line break if we're about to go past the end of the
002C98r 3                               ; line
002C98r 3  68                           pla
002C99r 3  18                           clc
002C9Ar 3  75 00                        adc 0,x
002C9Cr 3  1A                           inc                     ; don't forget the space between words
002C9Dr 3  C9 4F                        cmp #MAX_LINE_LENGTH    ; usually 79
002C9Fr 3  90 05                        bcc @1
002CA1r 3               
002CA1r 3  20 rr rr                     jsr xt_cr
002CA4r 3  A9 00                        lda #0
002CA6r 3               @1:
002CA6r 3  48                           pha
002CA7r 3  20 rr rr                     jsr xt_type             ; ( nt )
002CAAr 3               
002CAAr 3  A9 20                        lda #AscSP
002CACr 3  20 rr rr                     jsr emit_a
002CAFr 3               
002CAFr 3                               ; get next word, which begins two down
002CAFr 3  20 rr rr                     jsr xt_one_plus         ; 1+
002CB2r 3  20 rr rr                     jsr xt_one_plus         ; 1+
002CB5r 3  20 rr rr                     jsr xt_fetch            ; @ ( nt+1 )
002CB8r 3               
002CB8r 3                               ; if next address is zero, we're done
002CB8r 3  B5 00                        lda 0,x
002CBAr 3  15 01                        ora 1,x
002CBCr 3  D0 D4                        bne @loop
002CBEr 3               
002CBEr 3                               ; Move on to the next wordlist in the search order.
002CBEr 3  E6 rr                        inc tmp3
002CC0r 3  80 B2                        bra @wordlist_loop
002CC2r 3               
002CC2r 3               @words_done:
002CC2r 3  68                           pla                     ; dump counter
002CC3r 3               
002CC3r 3  E8                           inx
002CC4r 3  E8                           inx
002CC5r 3               
002CC5r 3  60           z_words:        rts
002CC6r 3               
002CC6r 3               
002CC6r 3               
002CC6r 3               ; ## WORDSIZE ( nt -- u ) "Get size of word in bytes"
002CC6r 3               ; ## "wordsize"  auto  Tali Forth
002CC6r 3                       ; """Given an word's name token (nt), return the size of the
002CC6r 3                       ; word's payload size in bytes (CFA plus PFA) in bytes. Does not
002CC6r 3                       ; count the final RTS.
002CC6r 3                       ; """
002CC6r 3               xt_wordsize:
002CC6r 3  20 rr rr                     jsr underflow_1
002CC9r 3               
002CC9r 3                               ; We get the start address of the word from its header entry
002CC9r 3                               ; for the start of the actual code (execution token, xt)
002CC9r 3                               ; which is four bytes down, and the pointer to the end of the
002CC9r 3                               ; code (z_word, six bytes down)
002CC9r 3  B5 00                        lda 0,x
002CCBr 3  85 rr                        sta tmp1
002CCDr 3  B5 01                        lda 1,x
002CCFr 3  85 rr                        sta tmp1+1
002CD1r 3               
002CD1r 3  A0 06                        ldy #6
002CD3r 3  B1 rr                        lda (tmp1),y    ; LSB of z
002CD5r 3  88                           dey
002CD6r 3  88                           dey
002CD7r 3               
002CD7r 3  38                           sec
002CD8r 3  F1 rr                        sbc (tmp1),y    ; LSB of xt
002CDAr 3  95 00                        sta 0,x
002CDCr 3               
002CDCr 3  A0 07                        ldy #7
002CDEr 3  B1 rr                        lda (tmp1),y    ; MSB of z
002CE0r 3  88                           dey
002CE1r 3  88                           dey
002CE2r 3               
002CE2r 3  F1 rr                        sbc (tmp1),y    ; MSB of xt
002CE4r 3  95 01                        sta 1,x
002CE6r 3               
002CE6r 3  60           z_wordsize:     rts
002CE7r 3               
002CE7r 3               
002CE7r 3               ; ## XOR ( n n -- n ) "Logically XOR TOS and NOS"
002CE7r 3               ; ## "xor"  auto  ANS core
002CE7r 3                       ; """https://forth-standard.org/standard/core/XOR"""
002CE7r 3               xt_xor:
002CE7r 3  20 rr rr                     jsr underflow_2
002CEAr 3               
002CEAr 3  B5 00                        lda 0,x
002CECr 3  55 02                        eor 2,x
002CEEr 3  95 02                        sta 2,x
002CF0r 3               
002CF0r 3  B5 01                        lda 1,x
002CF2r 3  55 03                        eor 3,x
002CF4r 3  95 03                        sta 3,x
002CF6r 3               
002CF6r 3  E8                           inx
002CF7r 3  E8                           inx
002CF8r 3               
002CF8r 3  60           z_xor:          rts
002CF9r 3               
002CF9r 3               
002CF9r 3               ; ## ZERO ( -- 0 ) "Push 0 to Data Stack"
002CF9r 3               ; ## "0"  auto  Tali Forth
002CF9r 3                       ; """The disassembler assumes that this routine does not use Y. Note
002CF9r 3                       ; that CASE and FORTH-WORDLIST use the same routine, as the WD for Forth
002CF9r 3                       ; is 0."""
002CF9r 3               xt_case:
002CF9r 3               xt_forth_wordlist:
002CF9r 3               xt_zero:
002CF9r 3  CA                           dex             ; push
002CFAr 3  CA                           dex
002CFBr 3  74 00                        stz 0,x
002CFDr 3  74 01                        stz 1,x
002CFFr 3               z_case:
002CFFr 3               z_forth_wordlist:
002CFFr 3               z_zero:
002CFFr 3  60                           rts
002D00r 3               
002D00r 3               
002D00r 3               ; ## ZERO_EQUAL ( n -- f ) "Check if TOS is zero"
002D00r 3               ; ## "0="  auto  ANS core
002D00r 3                       ; """https://forth-standard.org/standard/core/ZeroEqual"""
002D00r 3               
002D00r 3               xt_zero_equal:
002D00r 3  20 rr rr                     jsr underflow_1
002D03r 3               
002D03r 3  B5 00                        lda 0,x
002D05r 3  15 01                        ora 1,x
002D07r 3  F0 04                        beq @zero
002D09r 3               
002D09r 3                               ; not a zero, so we need a FALSE flag (0)
002D09r 3  A9 00                        lda #0
002D0Br 3  80 02                        bra @store
002D0Dr 3               @zero:
002D0Dr 3                               ; We have a zero, so we need a TRUE flag (-1)
002D0Dr 3  A9 FF                        lda #$ff
002D0Fr 3               @store:
002D0Fr 3  95 00                        sta 0,x
002D11r 3  95 01                        sta 1,x
002D13r 3               
002D13r 3  60           z_zero_equal:   rts
002D14r 3               
002D14r 3               
002D14r 3               
002D14r 3               ; ## ZERO_GREATER ( n -- f ) "Return a TRUE flag if TOS is positive"
002D14r 3               ; ## "0>"  auto  ANS core ext
002D14r 3                       ; """https://forth-standard.org/standard/core/Zeromore"""
002D14r 3               
002D14r 3               xt_zero_greater:
002D14r 3  20 rr rr                     jsr underflow_1
002D17r 3               
002D17r 3  A0 00                        ldy #0          ; Default is FALSE (TOS is negative)
002D19r 3               
002D19r 3  B5 01                        lda 1,x         ; MSB
002D1Br 3  30 05                        bmi @done       ; TOS is negative, keep FLASE
002D1Dr 3  15 00                        ora 0,x
002D1Fr 3  F0 01                        beq @done       ; TOS is zero, keep FALSE
002D21r 3               
002D21r 3  88                           dey             ; TOS is postive, make true
002D22r 3               @done:
002D22r 3  98                           tya
002D23r 3  95 00                        sta 0,x
002D25r 3  95 01                        sta 1,x
002D27r 3               
002D27r 3  60           z_zero_greater: rts
002D28r 3               
002D28r 3               
002D28r 3               
002D28r 3               ; ## ZERO_LESS ( n -- f ) "Return a TRUE flag if TOS negative"
002D28r 3               ; ## "0<"  auto  ANS core
002D28r 3                       ; """https://forth-standard.org/standard/core/Zeroless"""
002D28r 3               
002D28r 3               xt_zero_less:
002D28r 3  20 rr rr                     jsr underflow_1
002D2Br 3               
002D2Br 3  A0 00                        ldy #0          ; Default is FALSE (TOS positive)
002D2Dr 3               
002D2Dr 3  B5 01                        lda 1,x         ; MSB
002D2Fr 3  10 01                        bpl @done       ; TOS is positive, so keep FALSE
002D31r 3               
002D31r 3  88                           dey             ; TOS is negative, make TRUE
002D32r 3               @done:
002D32r 3  98                           tya
002D33r 3  95 00                        sta 0,x
002D35r 3  95 01                        sta 1,x
002D37r 3               
002D37r 3  60           z_zero_less:    rts
002D38r 3               
002D38r 3               
002D38r 3               
002D38r 3               ; ## ZERO_UNEQUAL ( m -- f ) "Return TRUE flag if not zero"
002D38r 3               ; ## "0<>"  auto  ANS core ext
002D38r 3                       ; """https://forth-standard.org/standard/core/Zerone"""
002D38r 3               
002D38r 3               xt_zero_unequal:
002D38r 3  20 rr rr                     jsr underflow_1
002D3Br 3               
002D3Br 3  A0 00                        ldy #0          ; default false
002D3Dr 3               
002D3Dr 3  B5 00                        lda 0,x
002D3Fr 3  15 01                        ora 1,x
002D41r 3  F0 01                        beq @got_zero
002D43r 3               
002D43r 3  88                           dey
002D44r 3               @got_zero:
002D44r 3  98                           tya
002D45r 3  95 00                        sta 0,x
002D47r 3  95 01                        sta 1,x
002D49r 3               
002D49r 3  60           z_zero_unequal: rts
002D4Ar 3               
002D4Ar 3               
002D4Ar 3               
002D4Ar 3               ; ==========================================================
002D4Ar 3               ; EDITOR words
002D4Ar 3               
002D4Ar 3               ; This routine is used by both enter-screen and erase-screen
002D4Ar 3               ; to get a buffer for the given screen number and set SCR to
002D4Ar 3               ; the given screen number.  This word is not in the dictionary.
002D4Ar 3               xt_editor_screen_helper:
002D4Ar 3  20 rr rr                     jsr xt_dup
002D4Dr 3  20 rr rr                     jsr xt_scr
002D50r 3  20 rr rr                     jsr xt_store
002D53r 3  20 rr rr                     jsr xt_buffer
002D56r 3               z_editor_screen_helper:
002D56r 3  60                           rts
002D57r 3               
002D57r 3               
002D57r 3               ; ## EDITOR_ENTER_SCREEN ( scr# -- ) "Enter all lines for given screen"
002D57r 3               ; ## "enter-screen"  auto  Tali Editor
002D57r 3               
002D57r 3               xt_editor_enter_screen:
002D57r 3                               ; Set the variable SCR and get a buffer for the
002D57r 3                               ; given screen number.
002D57r 3  20 rr rr                     jsr xt_editor_screen_helper
002D5Ar 3               
002D5Ar 3                               ; Drop the buffer address.
002D5Ar 3  20 rr rr                     jsr xt_drop
002D5Dr 3               
002D5Dr 3                               ; Overwrite the lines one at a time.
002D5Dr 3  64 rr                        stz editor1
002D5Fr 3               @prompt_loop:
002D5Fr 3                               ; Put the current line number on the stack.
002D5Fr 3  CA                           dex
002D60r 3  CA                           dex
002D61r 3  A5 rr                        lda editor1
002D63r 3  95 00                        sta 0,x
002D65r 3  74 01                        stz 1,x
002D67r 3               
002D67r 3                               ; Use the O word to prompt for overwrite.
002D67r 3  20 rr rr                     jsr xt_editor_o
002D6Ar 3               
002D6Ar 3                               ; Move on to the next line.
002D6Ar 3  E6 rr                        inc editor1
002D6Cr 3  A9 10                        lda #16
002D6Er 3  C5 rr                        cmp editor1
002D70r 3  D0 ED                        bne @prompt_loop
002D72r 3               
002D72r 3               z_editor_enter_screen:
002D72r 3  60                           rts
002D73r 3               
002D73r 3               
002D73r 3               
002D73r 3               ; ## EDITOR_ERASE_SCREEN ( scr# -- ) "Erase all lines for given screen"
002D73r 3               ; ## "erase-screen"  tested  Tali Editor
002D73r 3               xt_editor_erase_screen:
002D73r 3                               ; Set the variable SCR and get a buffer for the
002D73r 3                               ; given screen number.
002D73r 3  20 rr rr                     jsr xt_editor_screen_helper
002D76r 3               
002D76r 3                               ; Put 1024 (chars/screen) on stack.
002D76r 3  CA                           dex
002D77r 3  CA                           dex
002D78r 3  74 00                        stz 0,x
002D7Ar 3  A9 04                        lda #4          ; 4 in MSB makes 1024 ($400).
002D7Cr 3  95 01                        sta 1,x
002D7Er 3               
002D7Er 3                               ; Erase the entire block (fill with spaces).
002D7Er 3  20 rr rr                     jsr xt_blank
002D81r 3               
002D81r 3                               ; Mark buffer as updated.
002D81r 3  20 rr rr                     jsr xt_update
002D84r 3               
002D84r 3               z_editor_erase_screen:
002D84r 3  60                           rts
002D85r 3               
002D85r 3               
002D85r 3               ; ## EDITOR_EL ( line# -- ) "Erase the given line number"
002D85r 3               ; ## "el"  tested  Tali Editor
002D85r 3               xt_editor_el:
002D85r 3                               ; Turn the line number into buffer offset.
002D85r 3                               ; This also loads the block into the buffer if it's
002D85r 3                               ; not there for some reason.
002D85r 3  20 rr rr                     jsr xt_editor_line
002D88r 3               
002D88r 3                               ; Put 64 (# of chars/line) on the stack.
002D88r 3  CA                           dex
002D89r 3  CA                           dex
002D8Ar 3  A9 40                        lda #64
002D8Cr 3  95 00                        sta 0,x
002D8Er 3  74 01                        stz 1,x
002D90r 3               
002D90r 3                               ; Fill with spaces.
002D90r 3  20 rr rr                     jsr xt_blank
002D93r 3               
002D93r 3                               ; Mark buffer as updated.
002D93r 3  20 rr rr                     jsr xt_update
002D96r 3               
002D96r 3  60           z_editor_el:    rts
002D97r 3               
002D97r 3               
002D97r 3               ; ## EDITOR_L ( -- ) "List the current screen"
002D97r 3               ; ## "l"  tested  Tali Editor
002D97r 3               
002D97r 3               xt_editor_l:
002D97r 3                               ; Load the current screen
002D97r 3  CA                           dex             ; Put SCR on the stack.
002D98r 3  CA                           dex
002D99r 3  A0 02                        ldy #scr_offset
002D9Br 3  B1 rr                        lda (up),y
002D9Dr 3  95 00                        sta 0,x
002D9Fr 3  C8                           iny
002DA0r 3  B1 rr                        lda (up),y
002DA2r 3  95 01                        sta 1,x
002DA4r 3  20 rr rr                     jsr xt_block    ; Get the current screen.
002DA7r 3               
002DA7r 3  20 rr rr                     jsr xt_cr
002DAAr 3               
002DAAr 3                               ; Print the screen number.
002DAAr 3                               ; We're using sliteral, so we need to set up the
002DAAr 3                               ; appropriate data structure (see sliteral)
002DAAr 3  80 08                        bra @after_screen_msg
002DACr 3               
002DACr 3               @screen_msg:
002DACr 3  53 63 72 65                  .byte "Screen #"
002DB0r 3  65 6E 20 23  
002DB4r 3               
002DB4r 3               @after_screen_msg:
002DB4r 3  20 rr rr                     jsr sliteral_runtime
002DB7r 3  rr rr 08 00                  .word @screen_msg, @after_screen_msg-@screen_msg
002DBBr 3               
002DBBr 3  20 rr rr                     jsr xt_type
002DBEr 3               
002DBEr 3                               ; Put the screen number and printed size for u.r on the stack.
002DBEr 3  20 rr rr                     jsr xt_scr
002DC1r 3  20 rr rr                     jsr xt_fetch
002DC4r 3  CA                           dex
002DC5r 3  CA                           dex
002DC6r 3  A9 04                        lda #4          ; four spaces
002DC8r 3  95 00                        sta 0,x
002DCAr 3  74 01                        stz 1,x
002DCCr 3  20 rr rr                     jsr xt_u_dot_r
002DCFr 3               
002DCFr 3                               ; The address of the buffer is currently on the stack.
002DCFr 3                               ; Print 64 chars at a time. TYPE uses tmp1, so we'll
002DCFr 3                               ; keep track of the line number in tmp3.
002DCFr 3  64 rr                        stz tmp3
002DD1r 3               
002DD1r 3               @line_loop:
002DD1r 3  20 rr rr                     jsr xt_cr
002DD4r 3               
002DD4r 3                               ; Print the line number (2-space fixed width)
002DD4r 3  CA                           dex
002DD5r 3  CA                           dex
002DD6r 3  CA                           dex
002DD7r 3  CA                           dex
002DD8r 3  74 03                        stz 3,x
002DDAr 3  A5 rr                        lda tmp3
002DDCr 3  95 02                        sta 2,x
002DDEr 3  74 01                        stz 1,x
002DE0r 3  A9 02                        lda #2
002DE2r 3  95 00                        sta 0,x
002DE4r 3  20 rr rr                     jsr xt_u_dot_r
002DE7r 3  20 rr rr                     jsr xt_space
002DEAr 3               
002DEAr 3                               ; Print one line using the address on the stack.
002DEAr 3  20 rr rr                     jsr xt_dup
002DEDr 3  CA                           dex
002DEEr 3  CA                           dex
002DEFr 3  A9 40                        lda #64
002DF1r 3  95 00                        sta 0,x
002DF3r 3  74 01                        stz 1,x
002DF5r 3  20 rr rr                     jsr xt_type
002DF8r 3               
002DF8r 3                               ; Add 64 to the address on the stack to move to the next line.
002DF8r 3  18                           clc
002DF9r 3  A9 40                        lda #64
002DFBr 3  75 00                        adc 0,x
002DFDr 3  95 00                        sta 0,x
002DFFr 3  B5 01                        lda 1,x
002E01r 3  69 00                        adc #0      ; Add carry
002E03r 3  95 01                        sta 1,x
002E05r 3               
002E05r 3                               ; Increment the line number (held in tmp3)
002E05r 3  E6 rr                        inc tmp3
002E07r 3               
002E07r 3                               ; See if we are done.
002E07r 3  A5 rr                        lda tmp3
002E09r 3  C9 10                        cmp #16
002E0Br 3  D0 C4                        bne @line_loop
002E0Dr 3               
002E0Dr 3  20 rr rr                     jsr xt_cr
002E10r 3                               ; Drop the address on the stack.
002E10r 3  E8                           inx
002E11r 3  E8                           inx
002E12r 3               
002E12r 3  60           z_editor_l:            rts
002E13r 3               
002E13r 3               
002E13r 3               
002E13r 3               ; ## EDITOR_LINE ( line# -- c-addr ) "Turn a line number into address in current screen"
002E13r 3               ; ## "line"  tested  Tali Editor
002E13r 3               
002E13r 3               xt_editor_line:
002E13r 3  20 rr rr                     jsr underflow_1
002E16r 3               
002E16r 3                               ; Multiply the TOS by 64 (chars/line) to compute offset.
002E16r 3  A0 06                        ldy #6          ; *64 is same as left shift 6 times.
002E18r 3               @shift_tos_left:
002E18r 3  16 00                        asl 0,x         ; Shift TOS to the left
002E1Ar 3  36 01                        rol 1,x         ; ROL brings MSb from lower byte.
002E1Cr 3  88                           dey
002E1Dr 3  D0 F9                        bne @shift_tos_left
002E1Fr 3                               ; Load the current screen into a buffer
002E1Fr 3                               ; and get the buffer address
002E1Fr 3  20 rr rr                     jsr xt_scr
002E22r 3  20 rr rr                     jsr xt_fetch
002E25r 3  20 rr rr                     jsr xt_block
002E28r 3               
002E28r 3                               ; Add the offset to the buffer base address.
002E28r 3  20 rr rr                     jsr xt_plus
002E2Br 3               
002E2Br 3  60           z_editor_line:  rts
002E2Cr 3               
002E2Cr 3               
002E2Cr 3               
002E2Cr 3               ; ## EDITOR_O ( line# -- ) "Overwrite the given line"
002E2Cr 3               ; ## "o"  tested  Tali Editor
002E2Cr 3               xt_editor_o:
002E2Cr 3                               ; Print prompt
002E2Cr 3  20 rr rr                     jsr xt_cr
002E2Fr 3  20 rr rr                     jsr xt_dup
002E32r 3  20 rr rr                     jsr xt_two
002E35r 3  20 rr rr                     jsr xt_u_dot_r
002E38r 3  20 rr rr                     jsr xt_space
002E3Br 3  A9 2A                        lda #42         ; ASCII for *
002E3Dr 3  20 rr rr                     jsr emit_a
002E40r 3  20 rr rr                     jsr xt_space
002E43r 3               
002E43r 3                               ; Accept new input (directly into the buffer)
002E43r 3  20 rr rr                     jsr xt_editor_line
002E46r 3  20 rr rr                     jsr xt_dup      ; Save a copy of the line address for later.
002E49r 3  CA                           dex
002E4Ar 3  CA                           dex
002E4Br 3  A9 40                        lda #64         ; chars/line
002E4Dr 3  95 00                        sta 0,x
002E4Fr 3  74 01                        stz 1,x
002E51r 3  20 rr rr                     jsr xt_accept
002E54r 3               
002E54r 3                               ; Fill the rest with spaces.
002E54r 3                               ; Stack is currently ( line_address numchars_from_accept )
002E54r 3  20 rr rr                     jsr xt_dup
002E57r 3  20 rr rr                     jsr xt_not_rote ; -rot
002E5Ar 3  20 rr rr                     jsr xt_plus
002E5Dr 3  CA                           dex
002E5Er 3  CA                           dex
002E5Fr 3  A9 40                        lda #64         ; chars/line
002E61r 3  95 00                        sta 0,x
002E63r 3  74 01                        stz 1,x
002E65r 3  20 rr rr                     jsr xt_rot
002E68r 3  20 rr rr                     jsr xt_minus
002E6Br 3  20 rr rr                     jsr xt_blank
002E6Er 3               
002E6Er 3                               ; Mark buffer as updated.
002E6Er 3  20 rr rr                     jsr xt_update
002E71r 3               
002E71r 3  60           z_editor_o:     rts
002E72r 3               
002E72r 3               ; ## LCDPUT ( s -- ) "Print single character to LCD"
002E72r 3               ; ## "lcdput" coded Custom
002E72r 3               xt_lcdput:
002E72r 3  20 rr rr                     jsr underflow_1
002E75r 3               
002E75r 3  B5 00                        lda 0,x
002E77r 3                       .ifdef lcd_print
002E77r 3                               jsr lcd_print
002E77r 3                       .endif
002E77r 3  E8                           inx
002E78r 3  E8                           inx
002E79r 3  60           z_lcdput: rts
002E7Ar 3               
002E7Ar 3               
002E7Ar 3               ; ## LCDPRINT ( addr u -- ) "Print string to LCD"
002E7Ar 3               ; ## "lcdprint"  coded Custom
002E7Ar 3               
002E7Ar 3               xt_lcdprint:
002E7Ar 3  20 rr rr                     jsr underflow_2
002E7Dr 3               
002E7Dr 3                               ; Save the starting address into tmp1
002E7Dr 3  B5 02                        lda 2,x
002E7Fr 3  85 rr                        sta tmp1
002E81r 3  B5 03                        lda 3,x
002E83r 3  85 rr                        sta tmp1+1
002E85r 3               @loop:
002E85r 3                               ; done if length is zero
002E85r 3  B5 00                        lda 0,x
002E87r 3  15 01                        ora 1,x
002E89r 3  F0 12                        beq @done
002E8Br 3               
002E8Br 3                               ; Send the current character
002E8Br 3  B2 rr                        lda (tmp1)
002E8Dr 3                       .ifdef lcd_print
002E8Dr 3                               jsr lcd_print      ; avoids stack foolery
002E8Dr 3                       .endif
002E8Dr 3                               ; Move the address along (in tmp1)
002E8Dr 3  E6 rr                        inc tmp1
002E8Fr 3  D0 02                        bne @1
002E91r 3  E6 rr                        inc tmp1+1
002E93r 3               @1:
002E93r 3                               ; Reduce the count (on the data stack)
002E93r 3  B5 00                        lda 0,x
002E95r 3  D0 02                        bne @2
002E97r 3  D6 01                        dec 1,x
002E99r 3               @2:
002E99r 3  D6 00                        dec 0,x
002E9Br 3               
002E9Br 3  80 E8                        bra @loop
002E9Dr 3               @done:
002E9Dr 3  E8                           inx
002E9Er 3  E8                           inx
002E9Fr 3  E8                           inx
002EA0r 3  E8                           inx
002EA1r 3               
002EA1r 3  60           z_lcdprint:         rts
002EA2r 3               
002EA2r 3               
002EA2r 3               
002EA2r 3               ; ## CLS ( -- ) "clea VGA screen"
002EA2r 3               ; ## "cls" coded Custom
002EA2r 3               xt_cls:
002EA2r 3                       .ifdef vga_clear
002EA2r 3                               jsr vga_clear
002EA2r 3                       .endif
002EA2r 3               
002EA2r 3  60           z_cls: rts
002EA3r 3               
002EA3r 3               
002EA3r 3               ; ## SPI_INIT ( -- ) "Init SPI system"
002EA3r 3               ; ## "spi_init" coded Custom
002EA3r 3               xt_spi_init:
002EA3r 3                       .ifdef spi_init
002EA3r 3                               jsr spi_init
002EA3r 3                       .endif
002EA3r 3  60           z_spi_init: rts
002EA4r 3               
002EA4r 3               
002EA4r 3               ; ## SPI_CLK_TOGGLE ( -- ) "Toggle SPI clock"
002EA4r 3               ; ## "spi_clk_toggle" coded Custom
002EA4r 3               xt_spi_clk_toggle:
002EA4r 3                       .ifdef spi_clk_toggle
002EA4r 3                               jsr spi_clk_toggle
002EA4r 3                       .endif
002EA4r 3  60           z_spi_clk_toggle: rts
002EA5r 3               
002EA5r 3               ; ## SPI_SELECT ( s -- ) "Select SPI slave"
002EA5r 3               ; ## "spi_select" coded Custom
002EA5r 3               xt_spi_select:
002EA5r 3  20 rr rr                     jsr underflow_1
002EA8r 3               
002EA8r 3  B5 00                        lda 0,x
002EAAr 3                       .ifdef spi_select
002EAAr 3                               jsr spi_select
002EAAr 3                       .endif
002EAAr 3  E8                           inx
002EABr 3  E8                           inx
002EACr 3  60           z_spi_select: rts
002EADr 3               
002EADr 3               ; ## SPI_TRANSCEIVE ( s -- u ) "Send and receive spi data"
002EADr 3               ; ## "spi_transceive" coded Custom
002EADr 3               xt_spi_transceive:
002EADr 3  20 rr rr                     jsr underflow_1
002EB0r 3               
002EB0r 3  B5 00                        lda 0,x
002EB2r 3                       .ifdef spi_transceive
002EB2r 3                               jsr spi_transceive
002EB2r 3                       .endif
002EB2r 3  95 00                        sta 0,x         ; put return value in TOS
002EB4r 3  74 01                        stz 1,X         ;reset value there
002EB6r 3  60           z_spi_transceive: rts
002EB7r 3               
002EB7r 3               ; ## SD_INIT ( s -- u ) "Send and receive spi data"
002EB7r 3               ; ## "spi_transceive" coded Custom
002EB7r 3               xt_sd_init:
002EB7r 3  20 rr rr                     jsr underflow_1
002EBAr 3               
002EBAr 3  B5 00                        lda 0,x
002EBCr 3                       .ifdef sd_init
002EBCr 3                               jsr sd_init
002EBCr 3                       .endif
002EBCr 3  95 00                        sta 0,x         ; put return value in TOS
002EBEr 3  74 01                        stz 1,X         ;reset value there
002EC0r 3  60           z_sd_init: rts
002EC1r 3               
002EC1r 3               ; ## SD_READSECTOR ( addr d -- u ) "Read SD sector"
002EC1r 3               ; ## "sd_readsector" coded Custom
002EC1r 3               xt_sd_readsector:
002EC1r 3  20 rr rr                     jsr underflow_3
002EC4r 3                       .ifdef sd_readsector
002EC4r 3                               ; get and save storage address
002EC4r 3                               lda 0,x
002EC4r 3                               sta sd_buffer_address
002EC4r 3                               lda 1, x
002EC4r 3                               sta sd_buffer_address + 1
002EC4r 3                               ; get and save sector number (32 bit number, double)
002EC4r 3                               lda 2, X
002EC4r 3                               sta SD_ARG + 3
002EC4r 3                               lda 3, X
002EC4r 3                               sta SD_ARG + 2
002EC4r 3                               lda 4, X
002EC4r 3                               sta SD_ARG + 1
002EC4r 3                               lda 5, X
002EC4r 3                               sta SD_ARG
002EC4r 3                               lda #1
002EC4r 3                               sta SD_CRC
002EC4r 3               
002EC4r 3                               jsr sd_readsector
002EC4r 3                       .endif
002EC4r 3  95 00                        sta 0,x         ; put return value in TOS
002EC6r 3  74 01                        stz 1,X         ;reset value there
002EC8r 3               
002EC8r 3  E8                           inx
002EC9r 3  E8                           inx
002ECAr 3  E8                           inx
002ECBr 3  E8                           inx
002ECCr 3               
002ECCr 3  60           z_sd_readsector: rts
002ECDr 3               
002ECDr 3               
002ECDr 3               ; ## FAT32_INIT ( u -- u ) "initialize FAT32 file system on passed spi drive address"
002ECDr 3               ; ## "fat32_init" coded Custom
002ECDr 3               xt_fat32_init:
002ECDr 3  20 rr rr                     jsr underflow_1
002ED0r 3               
002ED0r 3  B5 00                        lda 0,x
002ED2r 3                       .ifdef sd_init
002ED2r 3                               jsr sd_init
002ED2r 3                               bne @error
002ED2r 3                       .endif
002ED2r 3                       .ifdef fat32_init
002ED2r 3                               jsr fat32_init
002ED2r 3                               beq @end
002ED2r 3                       .endif
002ED2r 3                       .ifdef fat32_openroot
002ED2r 3                               ; jsr fat32_openroot
002ED2r 3                               ; beq @end
002ED2r 3                       .endif
002ED2r 3               @error:
002ED2r 3  A9 01                        lda #1
002ED4r 3               @end:
002ED4r 3  95 00                        sta 0,x         ; put return value in TOS
002ED6r 3  74 01                        stz 1,X         ;reset value there
002ED8r 3  60           z_fat32_init: rts
002ED9r 3               
002ED9r 3               
002ED9r 3               ; ## FAT32_ROOT ( -- u ) "initialize FAT32 file system on passed spi drive address"
002ED9r 3               ; ## "fat32_root" coded Custom
002ED9r 3               xt_fat32_root:
002ED9r 3               
002ED9r 3  CA                   dex
002EDAr 3  CA                   dex
002EDBr 3                       .ifdef fat32_openroot
002EDBr 3                               jsr fat32_openroot
002EDBr 3                               beq @end
002EDBr 3                       .endif
002EDBr 3                       ; .ifdef fat32_readdirent
002EDBr 3                       ;         jsr fat32_readdirent
002EDBr 3                       ;         bcc @end
002EDBr 3                       ; .endif
002EDBr 3               
002EDBr 3               @error:
002EDBr 3  A9 01                lda #1
002EDDr 3               @end:
002EDDr 3               
002EDDr 3  95 00                sta 0,x         ; put return value in TOS
002EDFr 3  74 01                stz 1,X         ;reset value there
002EE1r 3  60           z_fat32_root: rts
002EE2r 3               
002EE2r 3               ; ## FAT32_FIND ( addr u -- u ) "Open file from initialized fat32 FS"
002EE2r 3               ; ## "fat32_find" coded Custom
002EE2r 3               xt_fat32_find:
002EE2r 3               .ifdef fat32_finddirent
002EE2r 3               textfile:  .byte "FILE.TXT   ", 0
002EE2r 3                               lda #<textfile
002EE2r 3                               sta fat32_filenamepointer
002EE2r 3                               lda #>textfile
002EE2r 3                               sta fat32_filenamepointer+1
002EE2r 3               
002EE2r 3                               jsr fat32_finddirent    ; find the file from its name
002EE2r 3                               bne @error
002EE2r 3               
002EE2r 3                               jsr fat32_file_read
002EE2r 3                               bne @error
002EE2r 3                               dex
002EE2r 3                               dex
002EE2r 3                               lda sd_buffer_address
002EE2r 3                               sta 0,x
002EE2r 3                               lda sd_buffer_address+1
002EE2r 3                               sta 1, x
002EE2r 3               ;                 phy
002EE2r 3               ;         ldy #0
002EE2r 3               ; @printloop:
002EE2r 3               ;         lda (sd_buffer_address),y
002EE2r 3               ;         beq @ex
002EE2r 3               ;         jsr kernel_putc
002EE2r 3               ; @ex:
002EE2r 3               ;         ply
002EE2r 3                       jmp @end
002EE2r 3               
002EE2r 3                               jmp @end
002EE2r 3               
002EE2r 3                               jsr underflow_2
002EE2r 3                               phy
002EE2r 3                               ldy 0,x ; length of string
002EE2r 3                               lda #0
002EE2r 3               @reset_loop:
002EE2r 3                           .ifdef fat32_finddirent
002EE2r 3                               sta (fat32_filenamepointer),y
002EE2r 3                               iny
002EE2r 3                               cpy #11
002EE2r 3                               bcc @reset_loop
002EE2r 3                           .endif
002EE2r 3                               inx     ; get address
002EE2r 3                               inx
002EE2r 3                           .ifdef fat32_finddirent
002EE2r 3                               lda 0,x
002EE2r 3                               sta fat32_filenamepointer
002EE2r 3                               lda 1,x
002EE2r 3                               sta fat32_filenamepointer+1
002EE2r 3                           .endif
002EE2r 3               
002EE2r 3                               ply
002EE2r 3                           .ifdef fat32_finddirent
002EE2r 3                               jsr fat32_finddirent    ; find the file from its name
002EE2r 3                               beq @end
002EE2r 3                           .endif
002EE2r 3               .endif
002EE2r 3               @error:
002EE2r 3  A9 01                        lda #1
002EE4r 3               @end:
002EE4r 3  95 00                        sta 0,x         ; put return value in TOS
002EE6r 3  74 01                        stz 1,X         ;reset value there
002EE8r 3  60           z_fat32_find: rts
002EE9r 3               
002EE9r 3               ; ## time ( -- addr ) "get time storage address"
002EE9r 3               ; ## "time" coded Custom
002EE9r 3               xt_time:
002EE9r 3                       .ifdef time
002EE9r 3  A9 rr                lda #time
002EEBr 3                       .else
002EEBr 3                       lda #0
002EEBr 3                       .endif
002EEBr 3  CA                   dex
002EECr 3  CA                   dex
002EEDr 3  95 00                sta 0,x
002EEFr 3  74 01                stz 1,x
002EF1r 3               
002EF1r 3               
002EF1r 3  60           z_time: rts
002EF2r 3               
002EF2r 3               ; ## cf_readsector ( u u -- addr ) "Set LBA block and read to buffer"
002EF2r 3               ; ## "cf_readsector" coded Custom
002EF2r 3               
002EF2r 3               xt_cf_readsector:
002EF2r 3  20 rr rr             jsr underflow_2
002EF5r 3  B5 00                lda 0, x
002EF7r 3  8D rr rr             sta CF_LBA
002EFAr 3  B5 01                lda 1, x
002EFCr 3  8D rr rr             sta CF_LBA + 1
002EFFr 3  B5 02                lda 2, x
002F01r 3  8D rr rr             sta CF_LBA + 2
002F04r 3  B5 03                lda 3, x
002F06r 3  8D rr rr             sta CF_LBA + 3
002F09r 3                       ; LBA is set, now read sector
002F09r 3  20 rr rr             jsr cf_init
002F0Cr 3               
002F0Cr 3  20 rr rr             jsr cf_read_sector
002F0Fr 3                       ; jsr cf_read
002F0Fr 3               
002F0Fr 3                       ; return buffer address
002F0Fr 3  A9 rr                lda #<CF_BUF
002F11r 3  95 02                sta 2, x
002F13r 3  A9 rr                lda #>CF_BUF
002F15r 3  95 03                sta 3, x
002F17r 3  E8                   inx
002F18r 3  E8                   inx
002F19r 3               
002F19r 3               z_cf_readsector:
002F19r 3  60                   rts
002F1Ar 3               
002F1Ar 3               ; TODO add routine to send a block of data in memory via SPI
002F1Ar 3               ; similar to lcdprint
002F1Ar 3               
002F1Ar 3               ; END
002F1Ar 3               
002F1Ar 3               
002F1Ar 2                   .include "headers.s"          ; Headers of native words
002F1Ar 3               ; Dictionary Headers for Tali Forth 2
002F1Ar 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
002F1Ar 3               ; First version: 05. Dec 2016 (Liara Forth)
002F1Ar 3               ; This version: 29. Dec 2018
002F1Ar 3               
002F1Ar 3               ; Dictionary headers are kept separately from the code, which allows various
002F1Ar 3               ; tricks in the code. We roughly follow the Gforth terminology: The Execution
002F1Ar 3               ; Token (xt) is the address of the first byte of a word's code that can be, uh,
002F1Ar 3               ; executed; the Name Token (nt) is a pointer to the beginning of the word's
002F1Ar 3               ; header in the Dictionary. There the link to the next word in the Dictionary
002F1Ar 3               ; is always one cell down from the current word's own nt. In the code itself,
002F1Ar 3               ; we use "nt_<WORD>" for the nt and "xt_<WORD>" for the xt.
002F1Ar 3               
002F1Ar 3               ; This gives us the following header structure:
002F1Ar 3               
002F1Ar 3               ;              8 bit     8 bit
002F1Ar 3               ;               LSB       MSB
002F1Ar 3               ; nt_word ->  +--------+--------+
002F1Ar 3               ;          +0 | Length | Status |
002F1Ar 3               ;             +--------+--------+
002F1Ar 3               ;          +2 | Next Header     | -> nt_next_word
002F1Ar 3               ;             +-----------------+
002F1Ar 3               ;          +4 | Start of Code   | -> xt_word
002F1Ar 3               ;             +-----------------+
002F1Ar 3               ;          +6 | End of Code     | -> z_word
002F1Ar 3               ;             +--------+--------+
002F1Ar 3               ;          +8 | Name   |        |
002F1Ar 3               ;             +--------+--------+
002F1Ar 3               ;             |        |        |
002F1Ar 3               ;             +--------+--------+
002F1Ar 3               ;             |        |  ...   | (name string does not end with a zero)
002F1Ar 3               ;          +n +--------+--------+
002F1Ar 3               
002F1Ar 3               ; The Status Byte is created by adding the flags defined in definitions.asm,
002F1Ar 3               ; which are:
002F1Ar 3               
002F1Ar 3               ;       CO - Compile Only
002F1Ar 3               ;       IM - Immediate Word
002F1Ar 3               ;       NN - Never Native Compile (must always be called by JSR)
002F1Ar 3               ;       AN - Always Native Compile (may not be called by JSR)
002F1Ar 3               ;       UF - Contains underflow check
002F1Ar 3               ;       HC - Has CFA (words created by CREATE and DOES> only)
002F1Ar 3               
002F1Ar 3               ; Note there are currently two bits unused.
002F1Ar 3               
002F1Ar 3               ; By default, all existing words can be natively compiled (compiled inline) or
002F1Ar 3               ; as a subroutine jump target; the system decides which variant to use based on
002F1Ar 3               ; a threshold the user can set. By default, all user-created words are flagged
002F1Ar 3               ; never-native. The user can override this by using the always-native word
002F1Ar 3               ; just after defining their new word.  The NN flag forbids native compiling,
002F1Ar 3               ; the AN flag forces it.
002F1Ar 3               
002F1Ar 3               ; The last word (top word in code) is always BYE. It is marked as the last word
002F1Ar 3               ; by its value of 0000 in its Next Header field. The words are sorted with the
002F1Ar 3               ; more common ones first (further down in code) so they are found earlier.
002F1Ar 3               ; Anything to do with output comes later (further up) because things will
002F1Ar 3               ; always be slow if there is a human involved.
002F1Ar 3               
002F1Ar 3               ; The initial skeleton of this list was automatically generated by a script
002F1Ar 3               ; in the tools folder and then sorted by hand.
002F1Ar 3               
002F1Ar 3               nt_bye:
002F1Ar 3  03                   .byte 3         ; length of word strings
002F1Br 3  00                   .byte 0         ; status byte
002F1Cr 3  00 00                .word 0000      ; next word in Dictionary, 0000 signals end
002F1Er 3  rr rr                .word xt_bye    ; start of code block (xt of this word)
002F20r 3  rr rr                .word z_bye     ; end of code (RTS)
002F22r 3  62 79 65             .byte "bye"     ; word name, always lower case, not zero-terminated
002F25r 3               
002F25r 3               
002F25r 3               nt_cold:
002F25r 3  04 00                .byte 4, 0
002F27r 3  rr rr rr rr          .word nt_bye, xt_cold, z_cold
002F2Br 3  rr rr        
002F2Dr 3  63 6F 6C 64          .byte "cold"
002F31r 3               
002F31r 3               nt_lcdput:
002F31r 3  06 10                .byte 6, UF
002F33r 3  rr rr rr rr          .word nt_cold, xt_lcdput, z_lcdput
002F37r 3  rr rr        
002F39r 3  6C 63 64 70          .byte "lcdput"
002F3Dr 3  75 74        
002F3Fr 3               
002F3Fr 3               nt_lcdprint:
002F3Fr 3  08 10                .byte 8, UF
002F41r 3  rr rr rr rr          .word nt_lcdput, xt_lcdprint, z_lcdprint
002F45r 3  rr rr        
002F47r 3  6C 63 64 70          .byte "lcdprint"
002F4Br 3  72 69 6E 74  
002F4Fr 3               
002F4Fr 3               nt_cls:
002F4Fr 3  03 00                .byte 3, 0
002F51r 3  rr rr rr rr          .word nt_lcdprint, xt_cls, z_cls
002F55r 3  rr rr        
002F57r 3  63 6C 73             .byte "cls"
002F5Ar 3               
002F5Ar 3               .ifdef spi_init
002F5Ar 3               nt_spi_init:
002F5Ar 3                       .byte 8, 0
002F5Ar 3                       .word nt_cls, xt_spi_init, z_spi_init
002F5Ar 3                       .byte "spi_init"
002F5Ar 3               
002F5Ar 3               
002F5Ar 3               nt_spi_clk_toggle:
002F5Ar 3                       .byte 14, 0
002F5Ar 3                       .word nt_spi_init, xt_spi_clk_toggle, z_spi_clk_toggle
002F5Ar 3                       .byte "spi_clk_toggle"
002F5Ar 3               
002F5Ar 3               nt_spi_select:
002F5Ar 3                       .byte 10, 0
002F5Ar 3                       .word nt_spi_clk_toggle, xt_spi_select, z_spi_select
002F5Ar 3                       .byte "spi_select"
002F5Ar 3               
002F5Ar 3               nt_spi_transceive:
002F5Ar 3                       .byte 14, 0
002F5Ar 3                       .word nt_spi_select, xt_spi_transceive, z_spi_transceive
002F5Ar 3                       .byte "spi_transceive"
002F5Ar 3               
002F5Ar 3               nt_sd_init:
002F5Ar 3                       .byte 7, 0
002F5Ar 3                       .word nt_spi_transceive, xt_sd_init, z_sd_init
002F5Ar 3                       .byte "sd_init"
002F5Ar 3               
002F5Ar 3               .else
002F5Ar 3               nt_sd_init:
002F5Ar 3  07 00                .byte 7, 0
002F5Cr 3  rr rr rr rr          .word nt_cls, xt_sd_init, z_sd_init
002F60r 3  rr rr        
002F62r 3  73 64 5F 69          .byte "sd_init"
002F66r 3  6E 69 74     
002F69r 3               .endif
002F69r 3               
002F69r 3               
002F69r 3               
002F69r 3               nt_cf_readsector:
002F69r 3  0D 00                .byte 13, 0
002F6Br 3  rr rr rr rr          .word nt_sd_init, xt_cf_readsector, z_cf_readsector
002F6Fr 3  rr rr        
002F71r 3  63 66 5F 72          .byte "cf_readsector"
002F75r 3  65 61 64 73  
002F79r 3  65 63 74 6F  
002F7Er 3               
002F7Er 3               nt_sd_readsector:
002F7Er 3  0D 00                .byte 13, 0
002F80r 3  rr rr rr rr          .word nt_cf_readsector, xt_sd_readsector, z_sd_readsector
002F84r 3  rr rr        
002F86r 3  73 64 5F 72          .byte "sd_readsector"
002F8Ar 3  65 61 64 73  
002F8Er 3  65 63 74 6F  
002F93r 3               
002F93r 3               
002F93r 3               nt_fat32_init:
002F93r 3  0A 00                .byte 10, 0
002F95r 3  rr rr rr rr          .word nt_sd_readsector, xt_fat32_init, z_fat32_init
002F99r 3  rr rr        
002F9Br 3  66 61 74 33          .byte "fat32_init"
002F9Fr 3  32 5F 69 6E  
002FA3r 3  69 74        
002FA5r 3               
002FA5r 3               nt_fat32_root:
002FA5r 3  0A 00                .byte 10, 0
002FA7r 3  rr rr rr rr          .word nt_fat32_init, xt_fat32_root, z_fat32_root
002FABr 3  rr rr        
002FADr 3  66 61 74 33          .byte "fat32_root"
002FB1r 3  32 5F 72 6F  
002FB5r 3  6F 74        
002FB7r 3               
002FB7r 3               nt_fat32_find:
002FB7r 3  0A 00                .byte 10, 0
002FB9r 3  rr rr rr rr          .word nt_fat32_root, xt_fat32_find, z_fat32_find
002FBDr 3  rr rr        
002FBFr 3  66 61 74 33          .byte "fat32_find"
002FC3r 3  32 5F 66 69  
002FC7r 3  6E 64        
002FC9r 3               
002FC9r 3               nt_time:
002FC9r 3  04 00                .byte 4, 0
002FCBr 3  rr rr rr rr          .word nt_fat32_find, xt_time, z_time
002FCFr 3  rr rr        
002FD1r 3  74 69 6D 65          .byte "time"
002FD5r 3               
002FD5r 3               nt_ed:                  ; ed6502
002FD5r 3  02 08                .byte 2, NN
002FD7r 3  rr rr rr rr          .word nt_time, xt_ed, z_ed
002FDBr 3  rr rr        
002FDDr 3  65 64                .byte "ed"
002FDFr 3               
002FDFr 3  03 08        nt_see: .byte 3, NN
002FE1r 3  rr rr rr rr          .word nt_ed, xt_see, z_see
002FE5r 3  rr rr        
002FE7r 3  73 65 65             .byte "see"
002FEAr 3               
002FEAr 3               nt_forth:
002FEAr 3  05 00                .byte 5, 0
002FECr 3  rr rr rr rr          .word nt_see, xt_forth, z_forth
002FF0r 3  rr rr        
002FF2r 3  66 6F 72 74          .byte "forth"
002FF6r 3  68           
002FF7r 3               
002FF7r 3               nt_order:
002FF7r 3  05 00                .byte 5, 0
002FF9r 3  rr rr rr rr          .word nt_forth, xt_order, z_order
002FFDr 3  rr rr        
002FFFr 3  6F 72 64 65          .byte "order"
003003r 3  72           
003004r 3               
003004r 3               nt_to_order:
003004r 3  06 00                .byte 6, 0
003006r 3  rr rr rr rr          .word nt_order, xt_to_order, z_to_order
00300Ar 3  rr rr        
00300Cr 3  3E 6F 72 64          .byte ">order"
003010r 3  65 72        
003012r 3               
003012r 3               nt_previous:
003012r 3  08 00                .byte 8, 0
003014r 3  rr rr rr rr          .word nt_to_order, xt_previous, z_previous
003018r 3  rr rr        
00301Ar 3  70 72 65 76          .byte "previous"
00301Er 3  69 6F 75 73  
003022r 3               
003022r 3               nt_also:
003022r 3  04 00                .byte 4, 0
003024r 3  rr rr rr rr          .word nt_previous, xt_also, z_also
003028r 3  rr rr        
00302Ar 3  61 6C 73 6F          .byte "also"
00302Er 3               
00302Er 3               nt_only:
00302Er 3  04 00                .byte 4, 0
003030r 3  rr rr rr rr          .word nt_also, xt_only, z_only
003034r 3  rr rr        
003036r 3  6F 6E 6C 79          .byte "only"
00303Ar 3               
00303Ar 3               nt_forth_wordlist:      ; shares code with ZERO
00303Ar 3  0E 00                .byte 14, 0
00303Cr 3  rr rr rr rr          .word nt_only, xt_forth_wordlist, z_forth_wordlist
003040r 3  rr rr        
003042r 3  66 6F 72 74          .byte "forth-wordlist"
003046r 3  68 2D 77 6F  
00304Ar 3  72 64 6C 69  
003050r 3               
003050r 3               nt_editor_wordlist:     ; shares code with ONE
003050r 3  0F 00                .byte 15, 0
003052r 3  rr rr rr rr          .word nt_forth_wordlist, xt_editor_wordlist, z_editor_wordlist
003056r 3  rr rr        
003058r 3  65 64 69 74          .byte "editor-wordlist"
00305Cr 3  6F 72 2D 77  
003060r 3  6F 72 64 6C  
003067r 3               
003067r 3               nt_assembler_wordlist:  ; shares code with TWO
003067r 3  12 00                .byte 18, 0
003069r 3  rr rr rr rr          .word nt_editor_wordlist, xt_assembler_wordlist, z_assembler_wordlist
00306Dr 3  rr rr        
00306Fr 3  61 73 73 65          .byte "assembler-wordlist"
003073r 3  6D 62 6C 65  
003077r 3  72 2D 77 6F  
003081r 3               
003081r 3               nt_root_wordlist:
003081r 3  0D 00                .byte 13, 0
003083r 3  rr rr rr rr          .word nt_assembler_wordlist, xt_root_wordlist, z_root_wordlist
003087r 3  rr rr        
003089r 3  72 6F 6F 74          .byte "root-wordlist"
00308Dr 3  2D 77 6F 72  
003091r 3  64 6C 69 73  
003096r 3               
003096r 3               nt_get_order:
003096r 3  09 00                .byte 9, 0
003098r 3  rr rr rr rr          .word nt_root_wordlist, xt_get_order, z_get_order
00309Cr 3  rr rr        
00309Er 3  67 65 74 2D          .byte "get-order"
0030A2r 3  6F 72 64 65  
0030A6r 3  72           
0030A7r 3               
0030A7r 3               nt_set_order:
0030A7r 3  09 00                .byte 9, 0
0030A9r 3  rr rr rr rr          .word nt_get_order, xt_set_order, z_set_order
0030ADr 3  rr rr        
0030AFr 3  73 65 74 2D          .byte "set-order"
0030B3r 3  6F 72 64 65  
0030B7r 3  72           
0030B8r 3               
0030B8r 3               nt_get_current:
0030B8r 3  0B 00                .byte 11, 0
0030BAr 3  rr rr rr rr          .word nt_set_order, xt_get_current, z_get_current
0030BEr 3  rr rr        
0030C0r 3  67 65 74 2D          .byte "get-current"
0030C4r 3  63 75 72 72  
0030C8r 3  65 6E 74     
0030CBr 3               
0030CBr 3               nt_set_current:
0030CBr 3  0B 10                .byte 11, UF
0030CDr 3  rr rr rr rr          .word nt_get_current, xt_set_current, z_set_current
0030D1r 3  rr rr        
0030D3r 3  73 65 74 2D          .byte "set-current"
0030D7r 3  63 75 72 72  
0030DBr 3  65 6E 74     
0030DEr 3               
0030DEr 3               nt_search_wordlist:
0030DEr 3  0F 10                .byte 15, UF
0030E0r 3  rr rr rr rr          .word nt_set_current, xt_search_wordlist, z_search_wordlist
0030E4r 3  rr rr        
0030E6r 3  73 65 61 72          .byte "search-wordlist"
0030EAr 3  63 68 2D 77  
0030EEr 3  6F 72 64 6C  
0030F5r 3               
0030F5r 3               nt_wordlist:
0030F5r 3  08 00                .byte 8, 0
0030F7r 3  rr rr rr rr          .word nt_search_wordlist, xt_wordlist, z_wordlist
0030FBr 3  rr rr        
0030FDr 3  77 6F 72 64          .byte "wordlist"
003101r 3  6C 69 73 74  
003105r 3               
003105r 3               nt_definitions:
003105r 3  0B 00                .byte 11, 0
003107r 3  rr rr rr rr          .word nt_wordlist, xt_definitions, z_definitions
00310Br 3  rr rr        
00310Dr 3  64 65 66 69          .byte "definitions"
003111r 3  6E 69 74 69  
003115r 3  6F 6E 73     
003118r 3               
003118r 3               nt_block_ramdrive_init:
003118r 3  13 10                .byte 19, UF
00311Ar 3  rr rr rr rr          .word nt_definitions, xt_block_ramdrive_init, z_block_ramdrive_init
00311Er 3  rr rr        
003120r 3  62 6C 6F 63          .byte "block-ramdrive-init"
003124r 3  6B 2D 72 61  
003128r 3  6D 64 72 69  
003133r 3               
003133r 3               nt_list:
003133r 3  04 10                .byte 4, UF
003135r 3  rr rr rr rr          .word nt_block_ramdrive_init, xt_list, z_list
003139r 3  rr rr        
00313Br 3  6C 69 73 74          .byte "list"
00313Fr 3               
00313Fr 3               nt_thru:
00313Fr 3  04 10                .byte 4, UF
003141r 3  rr rr rr rr          .word nt_list, xt_thru, z_thru
003145r 3  rr rr        
003147r 3  74 68 72 75          .byte "thru"
00314Br 3               
00314Br 3               nt_load:
00314Br 3  04 10                .byte 4, UF
00314Dr 3  rr rr rr rr          .word nt_thru, xt_load, z_load
003151r 3  rr rr        
003153r 3  6C 6F 61 64          .byte "load"
003157r 3               
003157r 3               nt_flush:
003157r 3  05 00                .byte 5, 0
003159r 3  rr rr rr rr          .word nt_load, xt_flush, z_flush
00315Dr 3  rr rr        
00315Fr 3  66 6C 75 73          .byte "flush"
003163r 3  68           
003164r 3               
003164r 3               nt_empty_buffers:
003164r 3  0D 00                .byte 13, 0
003166r 3  rr rr rr rr          .word nt_flush, xt_empty_buffers, z_empty_buffers
00316Ar 3  rr rr        
00316Cr 3  65 6D 70 74          .byte "empty-buffers"
003170r 3  79 2D 62 75  
003174r 3  66 66 65 72  
003179r 3               
003179r 3               nt_buffer:
003179r 3  06 00                .byte 6, 0
00317Br 3  rr rr rr rr          .word nt_empty_buffers, xt_buffer, z_buffer
00317Fr 3  rr rr        
003181r 3  62 75 66 66          .byte "buffer"
003185r 3  65 72        
003187r 3               
003187r 3               nt_update:
003187r 3  06 00                .byte 6, 0
003189r 3  rr rr rr rr          .word nt_buffer, xt_update, z_update
00318Dr 3  rr rr        
00318Fr 3  75 70 64 61          .byte "update"
003193r 3  74 65        
003195r 3               
003195r 3               nt_block:
003195r 3  05 00                .byte 5, 0
003197r 3  rr rr rr rr          .word nt_update, xt_block, z_block
00319Br 3  rr rr        
00319Dr 3  62 6C 6F 63          .byte "block"
0031A1r 3  6B           
0031A2r 3               
0031A2r 3               nt_save_buffers:
0031A2r 3  0C 00                .byte 12, 0
0031A4r 3  rr rr rr rr          .word nt_block, xt_save_buffers, z_save_buffers
0031A8r 3  rr rr        
0031AAr 3  73 61 76 65          .byte "save-buffers"
0031AEr 3  2D 62 75 66  
0031B2r 3  66 65 72 73  
0031B6r 3               
0031B6r 3               nt_block_read_vector:
0031B6r 3  11 28                .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
0031B8r 3  rr rr rr rr          .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
0031BCr 3  rr rr        
0031BEr 3  62 6C 6F 63          .byte "block-read-vector"
0031C2r 3  6B 2D 72 65  
0031C6r 3  61 64 2D 76  
0031CFr 3               
0031CFr 3               nt_block_read:
0031CFr 3  0A 28                .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
0031D1r 3  rr rr rr rr          .word nt_block_read_vector, xt_block_read, z_block_read
0031D5r 3  rr rr        
0031D7r 3  62 6C 6F 63          .byte "block-read"
0031DBr 3  6B 2D 72 65  
0031DFr 3  61 64        
0031E1r 3               
0031E1r 3               nt_block_write_vector:
0031E1r 3  12 08                .byte 18, NN ; Deferred words need the HC (Code Field) flag.
0031E3r 3  rr rr rr rr          .word nt_block_read, xt_block_write_vector, z_block_write_vector
0031E7r 3  rr rr        
0031E9r 3  62 6C 6F 63          .byte "block-write-vector"
0031EDr 3  6B 2D 77 72  
0031F1r 3  69 74 65 2D  
0031FBr 3               
0031FBr 3               nt_block_write:
0031FBr 3  0B 08                .byte 11, NN ; Deferred words need the HC (Code Field) flag.
0031FDr 3  rr rr rr rr          .word nt_block_write_vector, xt_block_write, z_block_write
003201r 3  rr rr        
003203r 3  62 6C 6F 63          .byte "block-write"
003207r 3  6B 2D 77 72  
00320Br 3  69 74 65     
00320Er 3               
00320Er 3               nt_blk:
00320Er 3  03 00                .byte 3, 0
003210r 3  rr rr rr rr          .word nt_block_write, xt_blk, z_blk
003214r 3  rr rr        
003216r 3  62 6C 6B             .byte "blk"
003219r 3               
003219r 3               nt_scr:
003219r 3  03 00                .byte 3, 0
00321Br 3  rr rr rr rr          .word nt_blk, xt_scr, z_scr
00321Fr 3  rr rr        
003221r 3  73 63 72             .byte "scr"
003224r 3               
003224r 3               nt_blkbuffer:
003224r 3  09 00                .byte 9, 0
003226r 3  rr rr rr rr          .word nt_scr, xt_blkbuffer, z_blkbuffer
00322Ar 3  rr rr        
00322Cr 3  62 6C 6B 62          .byte "blkbuffer"
003230r 3  75 66 66 65  
003234r 3  72           
003235r 3               
003235r 3               nt_buffblocknum:
003235r 3  0C 00                .byte 12, 0
003237r 3  rr rr rr rr          .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
00323Br 3  rr rr        
00323Dr 3  62 75 66 66          .byte "buffblocknum"
003241r 3  62 6C 6F 63  
003245r 3  6B 6E 75 6D  
003249r 3               
003249r 3               nt_buffstatus:
003249r 3  0A 00                .byte 10, 0
00324Br 3  rr rr rr rr          .word nt_buffblocknum, xt_buffstatus, z_buffstatus
00324Fr 3  rr rr        
003251r 3  62 75 66 66          .byte "buffstatus"
003255r 3  73 74 61 74  
003259r 3  75 73        
00325Br 3               
00325Br 3               nt_buffer_colon:
00325Br 3  07 00                .byte 7, 0
00325Dr 3  rr rr rr rr          .word nt_buffstatus, xt_buffer_colon, z_buffer_colon
003261r 3  rr rr        
003263r 3  62 75 66 66          .byte "buffer:"
003267r 3  65 72 3A     
00326Ar 3               
00326Ar 3               nt_useraddr:
00326Ar 3  08 00                .byte 8, 0
00326Cr 3  rr rr rr rr          .word nt_buffer_colon, xt_useraddr, z_useraddr
003270r 3  rr rr        
003272r 3  75 73 65 72          .byte "useraddr"
003276r 3  61 64 64 72  
00327Ar 3               
00327Ar 3               nt_action_of:
00327Ar 3  09 04                .byte 9, IM
00327Cr 3  rr rr rr rr          .word nt_useraddr, xt_action_of, z_action_of
003280r 3  rr rr        
003282r 3  61 63 74 69          .byte "action-of"
003286r 3  6F 6E 2D 6F  
00328Ar 3  66           
00328Br 3               
00328Br 3               nt_is:
00328Br 3  02 04                .byte 2, IM
00328Dr 3  rr rr rr rr          .word nt_action_of, xt_is, z_is
003291r 3  rr rr        
003293r 3  69 73                .byte "is"
003295r 3               
003295r 3               nt_defer_store:
003295r 3  06 00                .byte 6, 0
003297r 3  rr rr rr rr          .word nt_is, xt_defer_store, z_defer_store
00329Br 3  rr rr        
00329Dr 3  64 65 66 65          .byte "defer!"
0032A1r 3  72 21        
0032A3r 3               
0032A3r 3               nt_defer_fetch:
0032A3r 3  06 00                .byte 6, 0
0032A5r 3  rr rr rr rr          .word nt_defer_store, xt_defer_fetch, z_defer_fetch
0032A9r 3  rr rr        
0032ABr 3  64 65 66 65          .byte "defer@"
0032AFr 3  72 40        
0032B1r 3               
0032B1r 3               nt_endcase:
0032B1r 3  07 0D                .byte 7, IM+CO+NN
0032B3r 3  rr rr rr rr          .word nt_defer_fetch, xt_endcase, z_endcase
0032B7r 3  rr rr        
0032B9r 3  65 6E 64 63          .byte "endcase"
0032BDr 3  61 73 65     
0032C0r 3               
0032C0r 3               nt_endof:
0032C0r 3  05 0D                .byte 5, IM+CO+NN
0032C2r 3  rr rr rr rr          .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
0032C6r 3  rr rr        
0032C8r 3  65 6E 64 6F          .byte "endof"
0032CCr 3  66           
0032CDr 3               
0032CDr 3               nt_of:
0032CDr 3  02 0D                .byte 2, IM+CO+NN
0032CFr 3  rr rr rr rr          .word nt_endof, xt_of, z_of
0032D3r 3  rr rr        
0032D5r 3  6F 66                .byte "of"
0032D7r 3               
0032D7r 3               nt_case:
0032D7r 3  04 0D                .byte 4, IM+CO+NN
0032D9r 3  rr rr rr rr          .word nt_of, xt_case, z_case    ; shares code with ZERO
0032DDr 3  rr rr        
0032DFr 3  63 61 73 65          .byte "case"
0032E3r 3               
0032E3r 3               nt_while:
0032E3r 3  05 0D                .byte 5, IM+CO+NN
0032E5r 3  rr rr rr rr          .word nt_case, xt_while, z_while
0032E9r 3  rr rr        
0032EBr 3  77 68 69 6C          .byte "while"
0032EFr 3  65           
0032F0r 3               
0032F0r 3               nt_until:
0032F0r 3  05 0D                .byte 5, IM+CO+NN
0032F2r 3  rr rr rr rr          .word nt_while, xt_until, z_until
0032F6r 3  rr rr        
0032F8r 3  75 6E 74 69          .byte "until"
0032FCr 3  6C           
0032FDr 3               
0032FDr 3               nt_repeat:
0032FDr 3  06 0D                .byte 6, IM+CO+NN
0032FFr 3  rr rr rr rr          .word nt_until, xt_repeat, z_repeat
003303r 3  rr rr        
003305r 3  72 65 70 65          .byte "repeat"
003309r 3  61 74        
00330Br 3               
00330Br 3               nt_else:
00330Br 3  04 0D                .byte 4, IM+CO+NN
00330Dr 3  rr rr rr rr          .word nt_repeat, xt_else, z_else
003311r 3  rr rr        
003313r 3  65 6C 73 65          .byte "else"
003317r 3               
003317r 3               nt_then:
003317r 3  04 0D                .byte 4, IM+CO+NN
003319r 3  rr rr rr rr          .word nt_else, xt_then, z_then
00331Dr 3  rr rr        
00331Fr 3  74 68 65 6E          .byte "then"
003323r 3               
003323r 3               nt_if:
003323r 3  02 0D                .byte 2, IM+CO+NN
003325r 3  rr rr rr rr          .word nt_then, xt_if, z_if
003329r 3  rr rr        
00332Br 3  69 66                .byte "if"
00332Dr 3               
00332Dr 3               nt_dot_paren:
00332Dr 3  02 04                .byte 2, IM
00332Fr 3  rr rr rr rr          .word nt_if, xt_dot_paren, z_dot_paren
003333r 3  rr rr        
003335r 3  2E 28                .byte ".("
003337r 3               
003337r 3               nt_paren:
003337r 3  01 04                .byte 1, IM
003339r 3  rr rr rr rr          .word nt_dot_paren, xt_paren, z_paren
00333Dr 3  rr rr        
00333Fr 3  28                   .byte "("
003340r 3               
003340r 3               nt_word:
003340r 3  04 10                .byte 4, UF
003342r 3  rr rr rr rr          .word nt_paren, xt_word, z_word
003346r 3  rr rr        
003348r 3  77 6F 72 64          .byte "word"
00334Cr 3               
00334Cr 3               nt_find:
00334Cr 3  04 10                .byte 4, UF
00334Er 3  rr rr rr rr          .word nt_word, xt_find, z_find
003352r 3  rr rr        
003354r 3  66 69 6E 64          .byte "find"
003358r 3               
003358r 3               nt_environment_q:
003358r 3  0C 10                .byte 12, UF
00335Ar 3  rr rr rr rr          .word nt_find, xt_environment_q, z_environment_q
00335Er 3  rr rr        
003360r 3  65 6E 76 69          .byte "environment?"
003364r 3  72 6F 6E 6D  
003368r 3  65 6E 74 3F  
00336Cr 3               
00336Cr 3               nt_search:
00336Cr 3  06 18                .byte 6, UF+NN
00336Er 3  rr rr rr rr          .word nt_environment_q, xt_search, z_search
003372r 3  rr rr        
003374r 3  73 65 61 72          .byte "search"
003378r 3  63 68        
00337Ar 3               
00337Ar 3               nt_compare:
00337Ar 3  07 10                .byte 7, UF
00337Cr 3  rr rr rr rr          .word nt_search, xt_compare, z_compare
003380r 3  rr rr        
003382r 3  63 6F 6D 70          .byte "compare"
003386r 3  61 72 65     
003389r 3               
003389r 3               nt_disasm:
003389r 3  06 10                .byte 6, UF
00338Br 3  rr rr rr rr          .word nt_compare, xt_disasm, z_disasm
00338Fr 3  rr rr        
003391r 3  64 69 73 61          .byte "disasm"
003395r 3  73 6D        
003397r 3               
003397r 3               nt_dot_s:
003397r 3  02 00                .byte 2, 0
003399r 3  rr rr rr rr          .word nt_disasm, xt_dot_s, z_dot_s
00339Dr 3  rr rr        
00339Fr 3  2E 73                .byte ".s"
0033A1r 3               
0033A1r 3               nt_dump:
0033A1r 3  04 10                .byte 4, UF
0033A3r 3  rr rr rr rr          .word nt_dot_s, xt_dump, z_dump
0033A7r 3  rr rr        
0033A9r 3  64 75 6D 70          .byte "dump"
0033ADr 3               
0033ADr 3               nt_bell:
0033ADr 3  04 00                .byte 4, 0
0033AFr 3  rr rr rr rr          .word nt_dump, xt_bell, z_bell
0033B3r 3  rr rr        
0033B5r 3  62 65 6C 6C          .byte "bell"
0033B9r 3               
0033B9r 3               nt_align:
0033B9r 3  05 00                .byte 5, 0
0033BBr 3  rr rr rr rr          .word nt_bell, xt_align, z_align
0033BFr 3  rr rr        
0033C1r 3  61 6C 69 67          .byte "align"
0033C5r 3  6E           
0033C6r 3               
0033C6r 3               nt_aligned:             ; same code as ALIGN
0033C6r 3  07 00                .byte 7, 0
0033C8r 3  rr rr rr rr          .word nt_align, xt_align, z_align
0033CCr 3  rr rr        
0033CEr 3  61 6C 69 67          .byte "aligned"
0033D2r 3  6E 65 64     
0033D5r 3               
0033D5r 3               nt_wordsize:
0033D5r 3  08 10                .byte 8, UF
0033D7r 3  rr rr rr rr          .word nt_aligned, xt_wordsize, z_wordsize
0033DBr 3  rr rr        
0033DDr 3  77 6F 72 64          .byte "wordsize"
0033E1r 3  73 69 7A 65  
0033E5r 3               
0033E5r 3               nt_words:
0033E5r 3  05 00                .byte 5, 0
0033E7r 3  rr rr rr rr          .word nt_wordsize, xt_words, z_words
0033EBr 3  rr rr        
0033EDr 3  77 6F 72 64          .byte "words"
0033F1r 3  73           
0033F2r 3               
0033F2r 3               nt_marker:
0033F2r 3  06 04                .byte 6, IM
0033F4r 3  rr rr rr rr          .word nt_words, xt_marker, z_marker
0033F8r 3  rr rr        
0033FAr 3  6D 61 72 6B          .byte "marker"
0033FEr 3  65 72        
003400r 3               
003400r 3               nt_at_xy:
003400r 3  05 10                .byte 5, UF
003402r 3  rr rr rr rr          .word nt_marker, xt_at_xy, z_at_xy
003406r 3  rr rr        
003408r 3  61 74 2D 78          .byte "at-xy"
00340Cr 3  79           
00340Dr 3               
00340Dr 3               nt_page:
00340Dr 3  04 00                .byte 4, 0
00340Fr 3  rr rr rr rr          .word nt_at_xy, xt_page, z_page
003413r 3  rr rr        
003415r 3  70 61 67 65          .byte "page"
003419r 3               
003419r 3               nt_cr:
003419r 3  02 00                .byte 2, 0
00341Br 3  rr rr rr rr          .word nt_page, xt_cr, z_cr
00341Fr 3  rr rr        
003421r 3  63 72                .byte "cr"
003423r 3               
003423r 3               nt_input:
003423r 3  05 00                .byte 5, 0
003425r 3  rr rr rr rr          .word nt_cr, xt_input, z_input
003429r 3  rr rr        
00342Br 3  69 6E 70 75          .byte "input"
00342Fr 3  74           
003430r 3               
003430r 3               nt_output:
003430r 3  06 00                .byte 6, 0
003432r 3  rr rr rr rr          .word nt_input, xt_output, z_output
003436r 3  rr rr        
003438r 3  6F 75 74 70          .byte "output"
00343Cr 3  75 74        
00343Er 3               
00343Er 3               nt_sign:
00343Er 3  04 10                .byte 4, UF
003440r 3  rr rr rr rr          .word nt_output, xt_sign, z_sign
003444r 3  rr rr        
003446r 3  73 69 67 6E          .byte "sign"
00344Ar 3               
00344Ar 3               nt_hold:
00344Ar 3  04 10                .byte 4, UF
00344Cr 3  rr rr rr rr          .word nt_sign, xt_hold, z_hold
003450r 3  rr rr        
003452r 3  68 6F 6C 64          .byte "hold"
003456r 3               
003456r 3               nt_number_sign_greater:
003456r 3  02 10                .byte 2, UF
003458r 3  rr rr rr rr          .word nt_hold, xt_number_sign_greater, z_number_sign_greater
00345Cr 3  rr rr        
00345Er 3  23 3E                .byte "#>"
003460r 3               
003460r 3               nt_number_sign_s:
003460r 3  02 10                .byte 2, UF
003462r 3  rr rr rr rr          .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
003466r 3  rr rr        
003468r 3  23 73                .byte "#s"
00346Ar 3               
00346Ar 3               nt_number_sign:
00346Ar 3  01 10                .byte 1, UF
00346Cr 3  rr rr rr rr          .word nt_number_sign_s, xt_number_sign, z_number_sign
003470r 3  rr rr        
003472r 3  23                   .byte "#"
003473r 3               
003473r 3               nt_less_number_sign:
003473r 3  02 00                .byte 2, 0
003475r 3  rr rr rr rr          .word nt_number_sign, xt_less_number_sign, z_less_number_sign
003479r 3  rr rr        
00347Br 3  3C 23                .byte "<#"
00347Dr 3               
00347Dr 3               nt_to_in:
00347Dr 3  03 00                .byte 3, 0
00347Fr 3  rr rr rr rr          .word nt_less_number_sign, xt_to_in, z_to_in
003483r 3  rr rr        
003485r 3  3E 69 6E             .byte ">in"
003488r 3               
003488r 3               nt_within:
003488r 3  06 10                .byte 6, UF
00348Ar 3  rr rr rr rr          .word nt_to_in, xt_within, z_within
00348Er 3  rr rr        
003490r 3  77 69 74 68          .byte "within"
003494r 3  69 6E        
003496r 3               
003496r 3               nt_hexstore:
003496r 3  08 10                .byte 8, UF
003498r 3  rr rr rr rr          .word nt_within, xt_hexstore, z_hexstore
00349Cr 3  rr rr        
00349Er 3  68 65 78 73          .byte "hexstore"
0034A2r 3  74 6F 72 65  
0034A6r 3               
0034A6r 3               nt_cleave:
0034A6r 3  06 10                .byte 6, UF
0034A8r 3  rr rr rr rr          .word nt_hexstore, xt_cleave, z_cleave
0034ACr 3  rr rr        
0034AEr 3  63 6C 65 61          .byte "cleave"
0034B2r 3  76 65        
0034B4r 3               
0034B4r 3               nt_pad:
0034B4r 3  03 00                .byte 3, 0
0034B6r 3  rr rr rr rr          .word nt_cleave, xt_pad, z_pad
0034BAr 3  rr rr        
0034BCr 3  70 61 64             .byte "pad"
0034BFr 3               
0034BFr 3               nt_cmove:
0034BFr 3  05 10                .byte 5, UF
0034C1r 3  rr rr rr rr          .word nt_pad, xt_cmove, z_cmove
0034C5r 3  rr rr        
0034C7r 3  63 6D 6F 76          .byte "cmove"
0034CBr 3  65           
0034CCr 3               
0034CCr 3               nt_cmove_up:
0034CCr 3  06 10                .byte 6, UF
0034CEr 3  rr rr rr rr          .word nt_cmove, xt_cmove_up, z_cmove_up
0034D2r 3  rr rr        
0034D4r 3  63 6D 6F 76          .byte "cmove>"
0034D8r 3  65 3E        
0034DAr 3               
0034DAr 3               nt_move:
0034DAr 3  04 18                .byte 4, NN+UF
0034DCr 3  rr rr rr rr          .word nt_cmove_up, xt_move, z_move
0034E0r 3  rr rr        
0034E2r 3  6D 6F 76 65          .byte "move"
0034E6r 3               
0034E6r 3               nt_backslash:
0034E6r 3  01 04                .byte 1, IM
0034E8r 3  rr rr rr rr          .word nt_move, xt_backslash, z_backslash
0034ECr 3  rr rr        
0034EEr 3  5C                   .byte $5c
0034EFr 3               
0034EFr 3               nt_star_slash:
0034EFr 3  02 10                .byte 2, UF
0034F1r 3  rr rr rr rr          .word nt_backslash, xt_star_slash, z_star_slash
0034F5r 3  rr rr        
0034F7r 3  2A 2F                .byte "*/"
0034F9r 3               
0034F9r 3               nt_star_slash_mod:
0034F9r 3  05 10                .byte 5, UF
0034FBr 3  rr rr rr rr          .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
0034FFr 3  rr rr        
003501r 3  2A 2F 6D 6F          .byte "*/mod"
003505r 3  64           
003506r 3               
003506r 3               nt_mod:
003506r 3  03 10                .byte 3, UF
003508r 3  rr rr rr rr          .word nt_star_slash_mod, xt_mod, z_mod
00350Cr 3  rr rr        
00350Er 3  6D 6F 64             .byte "mod"
003511r 3               
003511r 3               nt_slash_mod:
003511r 3  04 10                .byte 4, UF
003513r 3  rr rr rr rr          .word nt_mod, xt_slash_mod, z_slash_mod
003517r 3  rr rr        
003519r 3  2F 6D 6F 64          .byte "/mod"
00351Dr 3               
00351Dr 3               nt_slash:
00351Dr 3  01 10                .byte 1, UF
00351Fr 3  rr rr rr rr          .word nt_slash_mod, xt_slash, z_slash
003523r 3  rr rr        
003525r 3  2F                   .byte "/"
003526r 3               
003526r 3               nt_fm_slash_mod:
003526r 3  06 10                .byte 6, UF
003528r 3  rr rr rr rr          .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
00352Cr 3  rr rr        
00352Er 3  66 6D 2F 6D          .byte "fm/mod"
003532r 3  6F 64        
003534r 3               
003534r 3               nt_sm_slash_rem:
003534r 3  06 10                .byte 6, UF
003536r 3  rr rr rr rr          .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
00353Ar 3  rr rr        
00353Cr 3  73 6D 2F 72          .byte "sm/rem"
003540r 3  65 6D        
003542r 3               
003542r 3               nt_um_slash_mod:
003542r 3  06 10                .byte 6, UF
003544r 3  rr rr rr rr          .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
003548r 3  rr rr        
00354Ar 3  75 6D 2F 6D          .byte "um/mod"
00354Er 3  6F 64        
003550r 3               
003550r 3               nt_star:
003550r 3  01 10                .byte 1, UF
003552r 3  rr rr rr rr          .word nt_um_slash_mod, xt_star, z_star
003556r 3  rr rr        
003558r 3  2A                   .byte "*"
003559r 3               
003559r 3               nt_um_star:
003559r 3  03 10                .byte 3, UF
00355Br 3  rr rr rr rr          .word nt_star, xt_um_star, z_um_star
00355Fr 3  rr rr        
003561r 3  75 6D 2A             .byte "um*"
003564r 3               
003564r 3               nt_m_star:
003564r 3  02 10                .byte 2, UF
003566r 3  rr rr rr rr          .word nt_um_star, xt_m_star, z_m_star
00356Ar 3  rr rr        
00356Cr 3  6D 2A                .byte "m*"
00356Er 3               
00356Er 3               nt_count:
00356Er 3  05 10                .byte 5, UF
003570r 3  rr rr rr rr          .word nt_m_star, xt_count, z_count
003574r 3  rr rr        
003576r 3  63 6F 75 6E          .byte "count"
00357Ar 3  74           
00357Br 3               
00357Br 3               nt_decimal:
00357Br 3  07 00                .byte 7, 0
00357Dr 3  rr rr rr rr          .word nt_count, xt_decimal, z_decimal
003581r 3  rr rr        
003583r 3  64 65 63 69          .byte "decimal"
003587r 3  6D 61 6C     
00358Ar 3               
00358Ar 3               nt_hex:
00358Ar 3  03 00                .byte 3, 0
00358Cr 3  rr rr rr rr          .word nt_decimal, xt_hex, z_hex
003590r 3  rr rr        
003592r 3  68 65 78             .byte "hex"
003595r 3               
003595r 3               nt_to_number:
003595r 3  07 10                .byte 7, UF
003597r 3  rr rr rr rr          .word nt_hex, xt_to_number, z_to_number
00359Br 3  rr rr        
00359Dr 3  3E 6E 75 6D          .byte ">number"
0035A1r 3  62 65 72     
0035A4r 3               
0035A4r 3               nt_number:
0035A4r 3  06 10                .byte 6, UF
0035A6r 3  rr rr rr rr          .word nt_to_number, xt_number, z_number
0035AAr 3  rr rr        
0035ACr 3  6E 75 6D 62          .byte "number"
0035B0r 3  65 72        
0035B2r 3               
0035B2r 3               nt_digit_question:
0035B2r 3  06 10                .byte 6, UF
0035B4r 3  rr rr rr rr          .word nt_number, xt_digit_question, z_digit_question
0035B8r 3  rr rr        
0035BAr 3  64 69 67 69          .byte "digit?"
0035BEr 3  74 3F        
0035C0r 3               
0035C0r 3               nt_base:
0035C0r 3  04 00                .byte 4, 0
0035C2r 3  rr rr rr rr          .word nt_digit_question, xt_base, z_base
0035C6r 3  rr rr        
0035C8r 3  62 61 73 65          .byte "base"
0035CCr 3               
0035CCr 3               nt_evaluate:
0035CCr 3  08 10                .byte 8, UF
0035CEr 3  rr rr rr rr          .word nt_base, xt_evaluate, z_evaluate
0035D2r 3  rr rr        
0035D4r 3  65 76 61 6C          .byte "evaluate"
0035D8r 3  75 61 74 65  
0035DCr 3               
0035DCr 3               nt_state:
0035DCr 3  05 00                .byte 5, 0
0035DEr 3  rr rr rr rr          .word nt_evaluate, xt_state, z_state
0035E2r 3  rr rr        
0035E4r 3  73 74 61 74          .byte "state"
0035E8r 3  65           
0035E9r 3               
0035E9r 3               nt_again:
0035E9r 3  05 17                .byte 5, AN+CO+IM+UF
0035EBr 3  rr rr rr rr          .word nt_state, xt_again, z_again
0035EFr 3  rr rr        
0035F1r 3  61 67 61 69          .byte "again"
0035F5r 3  6E           
0035F6r 3               
0035F6r 3               nt_begin:
0035F6r 3  05 07                .byte 5, AN+CO+IM
0035F8r 3  rr rr rr rr          .word nt_again, xt_begin, z_begin
0035FCr 3  rr rr        
0035FEr 3  62 65 67 69          .byte "begin"
003602r 3  6E           
003603r 3               
003603r 3               nt_quit:
003603r 3  04 00                .byte 4, 0
003605r 3  rr rr rr rr          .word nt_begin, xt_quit, z_quit
003609r 3  rr rr        
00360Br 3  71 75 69 74          .byte "quit"
00360Fr 3               
00360Fr 3               nt_recurse:
00360Fr 3  07 0D                .byte 7, CO+IM+NN
003611r 3  rr rr rr rr          .word nt_quit, xt_recurse, z_recurse
003615r 3  rr rr        
003617r 3  72 65 63 75          .byte "recurse"
00361Br 3  72 73 65     
00361Er 3               
00361Er 3               nt_leave:
00361Er 3  05 03                .byte 5, AN+CO
003620r 3  rr rr rr rr          .word nt_recurse, xt_leave, z_leave
003624r 3  rr rr        
003626r 3  6C 65 61 76          .byte "leave"
00362Ar 3  65           
00362Br 3               
00362Br 3               nt_unloop:
00362Br 3  06 03                .byte 6, AN+CO
00362Dr 3  rr rr rr rr          .word nt_leave, xt_unloop, z_unloop
003631r 3  rr rr        
003633r 3  75 6E 6C 6F          .byte "unloop"
003637r 3  6F 70        
003639r 3               
003639r 3               nt_exit:
003639r 3  04 03                .byte 4, AN+CO
00363Br 3  rr rr rr rr          .word nt_unloop, xt_exit, z_exit
00363Fr 3  rr rr        
003641r 3  65 78 69 74          .byte "exit"
003645r 3               
003645r 3               nt_plus_loop:
003645r 3  05 05                .byte 5, CO+IM
003647r 3  rr rr rr rr          .word nt_exit, xt_plus_loop, z_plus_loop
00364Br 3  rr rr        
00364Dr 3  2B 6C 6F 6F          .byte "+loop"
003651r 3  70           
003652r 3               
003652r 3               nt_loop:
003652r 3  04 05                .byte 4, CO+IM
003654r 3  rr rr rr rr          .word nt_plus_loop, xt_loop, z_loop
003658r 3  rr rr        
00365Ar 3  6C 6F 6F 70          .byte "loop"
00365Er 3               
00365Er 3               nt_j:
00365Er 3  01 03                .byte 1, AN+CO
003660r 3  rr rr rr rr          .word nt_loop, xt_j, z_j
003664r 3  rr rr        
003666r 3  6A                   .byte "j"
003667r 3               
003667r 3               nt_i:
003667r 3  01 03                .byte 1, AN+CO
003669r 3  rr rr rr rr          .word nt_j, xt_i, z_i
00366Dr 3  rr rr        
00366Fr 3  69                   .byte "i"
003670r 3               
003670r 3               nt_question_do:
003670r 3  03 0D                .byte 3, CO+IM+NN
003672r 3  rr rr rr rr          .word nt_i, xt_question_do, z_question_do
003676r 3  rr rr        
003678r 3  3F 64 6F             .byte "?do"
00367Br 3               
00367Br 3               nt_do:
00367Br 3  02 0D                .byte 2, CO+IM+NN
00367Dr 3  rr rr rr rr          .word nt_question_do, xt_do, z_do
003681r 3  rr rr        
003683r 3  64 6F                .byte "do"
003685r 3               
003685r 3               nt_abort_quote:
003685r 3  06 0D                .byte 6, CO+IM+NN
003687r 3  rr rr rr rr          .word nt_do, xt_abort_quote, z_abort_quote
00368Br 3  rr rr        
00368Dr 3  61 62 6F 72          .byte "abort", $22
003691r 3  74 22        
003693r 3               
003693r 3               nt_abort:
003693r 3  05 00                .byte 5, 0
003695r 3  rr rr rr rr          .word nt_abort_quote, xt_abort, z_abort
003699r 3  rr rr        
00369Br 3  61 62 6F 72          .byte "abort"
00369Fr 3  74           
0036A0r 3               
0036A0r 3               nt_strip_underflow:
0036A0r 3  0F 00                .byte 15, 0
0036A2r 3  rr rr rr rr          .word nt_abort, xt_strip_underflow, z_strip_underflow
0036A6r 3  rr rr        
0036A8r 3  73 74 72 69          .byte "strip-underflow"
0036ACr 3  70 2D 75 6E  
0036B0r 3  64 65 72 66  
0036B7r 3               
0036B7r 3               nt_nc_limit:
0036B7r 3  08 00                .byte 8, 0
0036B9r 3  rr rr rr rr          .word nt_strip_underflow, xt_nc_limit, z_nc_limit
0036BDr 3  rr rr        
0036BFr 3  6E 63 2D 6C          .byte "nc-limit"
0036C3r 3  69 6D 69 74  
0036C7r 3               
0036C7r 3               nt_allow_native:
0036C7r 3  0C 00                .byte 12, 0
0036C9r 3  rr rr rr rr          .word nt_nc_limit, xt_allow_native, z_allow_native
0036CDr 3  rr rr        
0036CFr 3  61 6C 6C 6F          .byte "allow-native"
0036D3r 3  77 2D 6E 61  
0036D7r 3  74 69 76 65  
0036DBr 3               
0036DBr 3               nt_always_native:
0036DBr 3  0D 00                .byte 13, 0
0036DDr 3  rr rr rr rr          .word nt_allow_native, xt_always_native, z_always_native
0036E1r 3  rr rr        
0036E3r 3  61 6C 77 61          .byte "always-native"
0036E7r 3  79 73 2D 6E  
0036EBr 3  61 74 69 76  
0036F0r 3               
0036F0r 3               nt_never_native:
0036F0r 3  0C 00                .byte 12, 0
0036F2r 3  rr rr rr rr          .word nt_always_native, xt_never_native, z_never_native
0036F6r 3  rr rr        
0036F8r 3  6E 65 76 65          .byte "never-native"
0036FCr 3  72 2D 6E 61  
003700r 3  74 69 76 65  
003704r 3               
003704r 3               nt_compile_only:
003704r 3  0C 00                .byte 12, 0
003706r 3  rr rr rr rr          .word nt_never_native, xt_compile_only, z_compile_only
00370Ar 3  rr rr        
00370Cr 3  63 6F 6D 70          .byte "compile-only"
003710r 3  69 6C 65 2D  
003714r 3  6F 6E 6C 79  
003718r 3               
003718r 3               nt_immediate:
003718r 3  09 00                .byte 9, 0
00371Ar 3  rr rr rr rr          .word nt_compile_only, xt_immediate, z_immediate
00371Er 3  rr rr        
003720r 3  69 6D 6D 65          .byte "immediate"
003724r 3  64 69 61 74  
003728r 3  65           
003729r 3               
003729r 3               nt_postpone:
003729r 3  08 05                .byte 8, IM+CO
00372Br 3  rr rr rr rr          .word nt_immediate, xt_postpone, z_postpone
00372Fr 3  rr rr        
003731r 3  70 6F 73 74          .byte "postpone"
003735r 3  70 6F 6E 65  
003739r 3               
003739r 3               nt_s_backslash_quote:
003739r 3  03 04                .byte 3, IM
00373Br 3  rr rr rr rr          .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
00373Fr 3  rr rr        
003741r 3  73 5C 22             .byte "s", $5C, $22
003744r 3               
003744r 3               nt_s_quote:
003744r 3  02 0C                .byte 2, IM+NN
003746r 3  rr rr rr rr          .word nt_s_backslash_quote, xt_s_quote, z_s_quote
00374Ar 3  rr rr        
00374Cr 3  73 22                .byte "s", $22
00374Er 3               
00374Er 3               nt_dot_quote:
00374Er 3  02 05                .byte 2, CO+IM
003750r 3  rr rr rr rr          .word nt_s_quote, xt_dot_quote, z_dot_quote
003754r 3  rr rr        
003756r 3  2E 22                .byte ".", $22
003758r 3               
003758r 3               nt_sliteral:
003758r 3  08 15                .byte 8, CO+IM+UF
00375Ar 3  rr rr rr rr          .word nt_dot_quote, xt_sliteral, z_sliteral
00375Er 3  rr rr        
003760r 3  73 6C 69 74          .byte "sliteral"
003764r 3  65 72 61 6C  
003768r 3               
003768r 3               nt_literal:
003768r 3  07 15                .byte 7, IM+CO+UF
00376Ar 3  rr rr rr rr          .word nt_sliteral, xt_literal, z_literal
00376Er 3  rr rr        
003770r 3  6C 69 74 65          .byte "literal"
003774r 3  72 61 6C     
003777r 3               
003777r 3               nt_right_bracket:
003777r 3  01 04                .byte 1, IM
003779r 3  rr rr rr rr          .word nt_literal, xt_right_bracket, z_right_bracket
00377Dr 3  rr rr        
00377Fr 3  5D                   .byte "]"
003780r 3               
003780r 3               nt_left_bracket:
003780r 3  01 05                .byte 1, IM+CO
003782r 3  rr rr rr rr          .word nt_right_bracket, xt_left_bracket, z_left_bracket
003786r 3  rr rr        
003788r 3  5B                   .byte "["
003789r 3               
003789r 3               nt_compile_comma:
003789r 3  08 18                .byte 8, UF+NN
00378Br 3  rr rr rr rr          .word nt_left_bracket, xt_compile_comma, z_compile_comma
00378Fr 3  rr rr        
003791r 3  63 6F 6D 70          .byte "compile,"
003795r 3  69 6C 65 2C  
003799r 3               
003799r 3               nt_colon_noname:
003799r 3  07 00                .byte 7, 0
00379Br 3  rr rr rr rr          .word nt_compile_comma, xt_colon_noname, z_colon_noname
00379Fr 3  rr rr        
0037A1r 3  3A 6E 6F 6E          .byte ":noname"
0037A5r 3  61 6D 65     
0037A8r 3               
0037A8r 3               nt_semicolon:
0037A8r 3  01 05                .byte 1, CO+IM
0037AAr 3  rr rr rr rr          .word nt_colon_noname, xt_semicolon, z_semicolon
0037AEr 3  rr rr        
0037B0r 3  3B                   .byte ";"
0037B1r 3               
0037B1r 3               nt_colon:
0037B1r 3  01 00                .byte 1, 0
0037B3r 3  rr rr rr rr          .word nt_semicolon, xt_colon, z_colon
0037B7r 3  rr rr        
0037B9r 3  3A                   .byte ":"
0037BAr 3               
0037BAr 3               nt_source_id:
0037BAr 3  09 00                .byte 9, 0
0037BCr 3  rr rr rr rr          .word nt_colon, xt_source_id, z_source_id
0037C0r 3  rr rr        
0037C2r 3  73 6F 75 72          .byte "source-id"
0037C6r 3  63 65 2D 69  
0037CAr 3  64           
0037CBr 3               
0037CBr 3               nt_source:
0037CBr 3  06 00                .byte 6, 0
0037CDr 3  rr rr rr rr          .word nt_source_id, xt_source, z_source
0037D1r 3  rr rr        
0037D3r 3  73 6F 75 72          .byte "source"
0037D7r 3  63 65        
0037D9r 3               
0037D9r 3               nt_execute_parsing:
0037D9r 3  0F 10                .byte 15, UF
0037DBr 3  rr rr rr rr          .word nt_source, xt_execute_parsing, z_execute_parsing
0037DFr 3  rr rr        
0037E1r 3  65 78 65 63          .byte "execute-parsing"
0037E5r 3  75 74 65 2D  
0037E9r 3  70 61 72 73  
0037F0r 3               
0037F0r 3               nt_parse:
0037F0r 3  05 10                .byte 5, UF
0037F2r 3  rr rr rr rr          .word nt_execute_parsing, xt_parse, z_parse
0037F6r 3  rr rr        
0037F8r 3  70 61 72 73          .byte "parse"
0037FCr 3  65           
0037FDr 3               
0037FDr 3               nt_parse_name:
0037FDr 3  0A 08                .byte 10, NN
0037FFr 3  rr rr rr rr          .word nt_parse, xt_parse_name, z_parse_name
003803r 3  rr rr        
003805r 3  70 61 72 73          .byte "parse-name"
003809r 3  65 2D 6E 61  
00380Dr 3  6D 65        
00380Fr 3               
00380Fr 3               nt_latestnt:
00380Fr 3  08 00                .byte 8, 0
003811r 3  rr rr rr rr          .word nt_parse_name, xt_latestnt, z_latestnt
003815r 3  rr rr        
003817r 3  6C 61 74 65          .byte "latestnt"
00381Br 3  73 74 6E 74  
00381Fr 3               
00381Fr 3               nt_latestxt:
00381Fr 3  08 00                .byte 8, 0
003821r 3  rr rr rr rr          .word nt_latestnt, xt_latestxt, z_latestxt
003825r 3  rr rr        
003827r 3  6C 61 74 65          .byte "latestxt"
00382Br 3  73 74 78 74  
00382Fr 3               
00382Fr 3               nt_defer:
00382Fr 3  05 00                .byte 5, 0
003831r 3  rr rr rr rr          .word nt_latestxt, xt_defer, z_defer
003835r 3  rr rr        
003837r 3  64 65 66 65          .byte "defer"
00383Br 3  72           
00383Cr 3               
00383Cr 3               nt_to_body:
00383Cr 3  05 10                .byte 5, UF
00383Er 3  rr rr rr rr          .word nt_defer, xt_to_body, z_to_body
003842r 3  rr rr        
003844r 3  3E 62 6F 64          .byte ">body"
003848r 3  79           
003849r 3               
003849r 3               nt_name_to_string:
003849r 3  0B 10                .byte 11, UF
00384Br 3  rr rr rr rr          .word nt_to_body, xt_name_to_string, z_name_to_string
00384Fr 3  rr rr        
003851r 3  6E 61 6D 65          .byte "name>string"
003855r 3  3E 73 74 72  
003859r 3  69 6E 67     
00385Cr 3               
00385Cr 3               nt_int_to_name:
00385Cr 3  08 10                .byte 8, UF
00385Er 3  rr rr rr rr          .word nt_name_to_string, xt_int_to_name, z_int_to_name
003862r 3  rr rr        
003864r 3  69 6E 74 3E          .byte "int>name"
003868r 3  6E 61 6D 65  
00386Cr 3               
00386Cr 3               nt_name_to_int:
00386Cr 3  08 10                .byte 8, UF
00386Er 3  rr rr rr rr          .word nt_int_to_name, xt_name_to_int, z_name_to_int
003872r 3  rr rr        
003874r 3  6E 61 6D 65          .byte "name>int"
003878r 3  3E 69 6E 74  
00387Cr 3               
00387Cr 3               nt_bracket_tick:
00387Cr 3  03 05                .byte 3, CO+IM
00387Er 3  rr rr rr rr          .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
003882r 3  rr rr        
003884r 3  5B 27 5D             .byte "[']"
003887r 3               
003887r 3               nt_tick:
003887r 3  01 00                .byte 1, 0
003889r 3  rr rr rr rr          .word nt_bracket_tick, xt_tick, z_tick
00388Dr 3  rr rr        
00388Fr 3  27                   .byte "'"
003890r 3               
003890r 3               nt_find_name:
003890r 3  09 10                .byte 9, UF
003892r 3  rr rr rr rr          .word nt_tick, xt_find_name, z_find_name
003896r 3  rr rr        
003898r 3  66 69 6E 64          .byte "find-name"
00389Cr 3  2D 6E 61 6D  
0038A0r 3  65           
0038A1r 3               
0038A1r 3               nt_fill:
0038A1r 3  04 10                .byte 4, UF
0038A3r 3  rr rr rr rr          .word nt_find_name, xt_fill, z_fill
0038A7r 3  rr rr        
0038A9r 3  66 69 6C 6C          .byte "fill"
0038ADr 3               
0038ADr 3               nt_blank:
0038ADr 3  05 00                .byte 5, 0     ; underflow checked by FILL
0038AFr 3  rr rr rr rr          .word nt_fill, xt_blank, z_blank
0038B3r 3  rr rr        
0038B5r 3  62 6C 61 6E          .byte "blank"
0038B9r 3  6B           
0038BAr 3               
0038BAr 3               nt_erase:
0038BAr 3  05 00                .byte 5, 0      ; underflow checked by FILL
0038BCr 3  rr rr rr rr          .word nt_blank, xt_erase, z_erase
0038C0r 3  rr rr        
0038C2r 3  65 72 61 73          .byte "erase"
0038C6r 3  65           
0038C7r 3               
0038C7r 3               nt_d_plus:
0038C7r 3  02 10                .byte 2, UF
0038C9r 3  rr rr rr rr          .word nt_erase, xt_d_plus, z_d_plus
0038CDr 3  rr rr        
0038CFr 3  64 2B                .byte "d+"
0038D1r 3               
0038D1r 3               nt_d_minus:
0038D1r 3  02 10                .byte 2, UF
0038D3r 3  rr rr rr rr          .word nt_d_plus, xt_d_minus, z_d_minus
0038D7r 3  rr rr        
0038D9r 3  64 2D                .byte "d-"
0038DBr 3               
0038DBr 3               nt_d_to_s:
0038DBr 3  03 10                .byte 3, UF
0038DDr 3  rr rr rr rr          .word nt_d_minus, xt_d_to_s, z_d_to_s
0038E1r 3  rr rr        
0038E3r 3  64 3E 73             .byte "d>s"
0038E6r 3               
0038E6r 3               nt_s_to_d:
0038E6r 3  03 10                .byte 3, UF
0038E8r 3  rr rr rr rr          .word nt_d_to_s, xt_s_to_d, z_s_to_d
0038ECr 3  rr rr        
0038EEr 3  73 3E 64             .byte "s>d"
0038F1r 3               
0038F1r 3               nt_to:
0038F1r 3  02 0C                .byte 2, NN+IM
0038F3r 3  rr rr rr rr          .word nt_s_to_d, xt_to, z_to
0038F7r 3  rr rr        
0038F9r 3  74 6F                .byte "to"
0038FBr 3               
0038FBr 3               nt_value:               ; same code as CONSTANT
0038FBr 3  05 10                .byte 5, UF
0038FDr 3  rr rr rr rr          .word nt_to, xt_constant, z_constant
003901r 3  rr rr        
003903r 3  76 61 6C 75          .byte "value"
003907r 3  65           
003908r 3               
003908r 3               nt_constant:
003908r 3  08 10                .byte 8, UF
00390Ar 3  rr rr rr rr          .word nt_value, xt_constant, z_constant
00390Er 3  rr rr        
003910r 3  63 6F 6E 73          .byte "constant"
003914r 3  74 61 6E 74  
003918r 3               
003918r 3               nt_variable:
003918r 3  08 00                .byte 8, 0
00391Ar 3  rr rr rr rr          .word nt_constant, xt_variable, z_variable
00391Er 3  rr rr        
003920r 3  76 61 72 69          .byte "variable"
003924r 3  61 62 6C 65  
003928r 3               
003928r 3               nt_does:
003928r 3  05 05                .byte 5, CO+IM
00392Ar 3  rr rr rr rr          .word nt_variable, xt_does, z_does
00392Er 3  rr rr        
003930r 3  64 6F 65 73          .byte "does>"
003934r 3  3E           
003935r 3               
003935r 3               nt_create:
003935r 3  06 00                .byte 6, 0
003937r 3  rr rr rr rr          .word nt_does, xt_create, z_create
00393Br 3  rr rr        
00393Dr 3  63 72 65 61          .byte "create"
003941r 3  74 65        
003943r 3               
003943r 3               nt_allot:
003943r 3  05 10                .byte 5, UF
003945r 3  rr rr rr rr          .word nt_create, xt_allot, z_allot
003949r 3  rr rr        
00394Br 3  61 6C 6C 6F          .byte "allot"
00394Fr 3  74           
003950r 3               
003950r 3               nt_key:
003950r 3  03 00                .byte 3, 0
003952r 3  rr rr rr rr          .word nt_allot, xt_key, z_key
003956r 3  rr rr        
003958r 3  6B 65 79             .byte "key"
00395Br 3               
00395Br 3               nt_depth:
00395Br 3  05 00                .byte 5, 0
00395Dr 3  rr rr rr rr          .word nt_key, xt_depth, z_depth
003961r 3  rr rr        
003963r 3  64 65 70 74          .byte "depth"
003967r 3  68           
003968r 3               
003968r 3               nt_unused:
003968r 3  06 00                .byte 6, 0
00396Ar 3  rr rr rr rr          .word nt_depth, xt_unused, z_unused
00396Er 3  rr rr        
003970r 3  75 6E 75 73          .byte "unused"
003974r 3  65 64        
003976r 3               
003976r 3               nt_r_to_input:
003976r 3  07 08                .byte 7, NN
003978r 3  rr rr rr rr          .word nt_unused, xt_r_to_input, z_r_to_input
00397Cr 3  rr rr        
00397Er 3  72 3E 69 6E          .byte "r>input"
003982r 3  70 75 74     
003985r 3               
003985r 3               nt_input_to_r:
003985r 3  07 08                .byte 7, NN
003987r 3  rr rr rr rr          .word nt_r_to_input, xt_input_to_r, z_input_to_r
00398Br 3  rr rr        
00398Dr 3  69 6E 70 75          .byte "input>r"
003991r 3  74 3E 72     
003994r 3               
003994r 3               nt_accept:
003994r 3  06 18                .byte 6, UF+NN
003996r 3  rr rr rr rr          .word nt_input_to_r, xt_accept, z_accept
00399Ar 3  rr rr        
00399Cr 3  61 63 63 65          .byte "accept"
0039A0r 3  70 74        
0039A2r 3               
0039A2r 3               nt_refill:
0039A2r 3  06 00                .byte 6, 0
0039A4r 3  rr rr rr rr          .word nt_accept, xt_refill, z_refill
0039A8r 3  rr rr        
0039AAr 3  72 65 66 69          .byte "refill"
0039AEr 3  6C 6C        
0039B0r 3               
0039B0r 3               nt_slash_string:
0039B0r 3  07 10                .byte 7, UF
0039B2r 3  rr rr rr rr          .word nt_refill, xt_slash_string, z_slash_string
0039B6r 3  rr rr        
0039B8r 3  2F 73 74 72          .byte "/string"
0039BCr 3  69 6E 67     
0039BFr 3               
0039BFr 3               nt_minus_leading:
0039BFr 3  08 10                .byte 8, UF
0039C1r 3  rr rr rr rr          .word nt_slash_string, xt_minus_leading, z_minus_leading
0039C5r 3  rr rr        
0039C7r 3  2D 6C 65 61          .byte "-leading"
0039CBr 3  64 69 6E 67  
0039CFr 3               
0039CFr 3               nt_minus_trailing:
0039CFr 3  09 10                .byte 9, UF
0039D1r 3  rr rr rr rr          .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
0039D5r 3  rr rr        
0039D7r 3  2D 74 72 61          .byte "-trailing"
0039DBr 3  69 6C 69 6E  
0039DFr 3  67           
0039E0r 3               
0039E0r 3               nt_bl:
0039E0r 3  02 00                .byte 2, 0
0039E2r 3  rr rr rr rr          .word nt_minus_trailing, xt_bl, z_bl
0039E6r 3  rr rr        
0039E8r 3  62 6C                .byte "bl"
0039EAr 3               
0039EAr 3               nt_spaces:
0039EAr 3  06 10                .byte 6, UF
0039ECr 3  rr rr rr rr          .word nt_bl, xt_spaces, z_spaces
0039F0r 3  rr rr        
0039F2r 3  73 70 61 63          .byte "spaces"
0039F6r 3  65 73        
0039F8r 3               
0039F8r 3               nt_bounds:
0039F8r 3  06 10                .byte 6, UF
0039FAr 3  rr rr rr rr          .word nt_spaces, xt_bounds, z_bounds
0039FEr 3  rr rr        
003A00r 3  62 6F 75 6E          .byte "bounds"
003A04r 3  64 73        
003A06r 3               
003A06r 3               nt_c_comma:
003A06r 3  02 10                .byte 2, UF
003A08r 3  rr rr rr rr          .word nt_bounds, xt_c_comma, z_c_comma
003A0Cr 3  rr rr        
003A0Er 3  63 2C                .byte "c,"
003A10r 3               
003A10r 3               nt_dnegate:
003A10r 3  07 10                .byte 7, UF
003A12r 3  rr rr rr rr          .word nt_c_comma, xt_dnegate, z_dnegate
003A16r 3  rr rr        
003A18r 3  64 6E 65 67          .byte "dnegate"
003A1Cr 3  61 74 65     
003A1Fr 3               
003A1Fr 3               nt_negate:
003A1Fr 3  06 10                .byte 6, UF
003A21r 3  rr rr rr rr          .word nt_dnegate, xt_negate, z_negate
003A25r 3  rr rr        
003A27r 3  6E 65 67 61          .byte "negate"
003A2Br 3  74 65        
003A2Dr 3               
003A2Dr 3               nt_invert:
003A2Dr 3  06 10                .byte 6, UF
003A2Fr 3  rr rr rr rr          .word nt_negate, xt_invert, z_invert
003A33r 3  rr rr        
003A35r 3  69 6E 76 65          .byte "invert"
003A39r 3  72 74        
003A3Br 3               
003A3Br 3               nt_two_to_r:
003A3Br 3  03 11                .byte 3, CO+UF          ; native is special case
003A3Dr 3  rr rr rr rr          .word nt_invert, xt_two_to_r, z_two_to_r
003A41r 3  rr rr        
003A43r 3  32 3E 72             .byte "2>r"
003A46r 3               
003A46r 3               nt_two_r_from:
003A46r 3  03 01                .byte 3, CO             ; native is special case
003A48r 3  rr rr rr rr          .word nt_two_to_r, xt_two_r_from, z_two_r_from
003A4Cr 3  rr rr        
003A4Er 3  32 72 3E             .byte "2r>"
003A51r 3               
003A51r 3               nt_two_r_fetch:
003A51r 3  03 09                .byte 3, CO+NN          ; native is special case, leave NN for now
003A53r 3  rr rr rr rr          .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
003A57r 3  rr rr        
003A59r 3  32 72 40             .byte "2r@"
003A5Cr 3               
003A5Cr 3               nt_two_literal:
003A5Cr 3  08 14                .byte 8, UF+IM
003A5Er 3  rr rr rr rr          .word nt_two_r_fetch, xt_two_literal, z_two_literal
003A62r 3  rr rr        
003A64r 3  32 6C 69 74          .byte "2literal"
003A68r 3  65 72 61 6C  
003A6Cr 3               
003A6Cr 3               nt_two_constant:
003A6Cr 3  09 10                .byte 9, UF
003A6Er 3  rr rr rr rr          .word nt_two_literal, xt_two_constant, z_two_constant
003A72r 3  rr rr        
003A74r 3  32 63 6F 6E          .byte "2constant"
003A78r 3  73 74 61 6E  
003A7Cr 3  74           
003A7Dr 3               
003A7Dr 3               nt_two_variable:
003A7Dr 3  09 00                .byte 9, 0
003A7Fr 3  rr rr rr rr          .word nt_two_constant, xt_two_variable, z_two_variable
003A83r 3  rr rr        
003A85r 3  32 76 61 72          .byte "2variable"
003A89r 3  69 61 62 6C  
003A8Dr 3  65           
003A8Er 3               
003A8Er 3               nt_two_fetch:
003A8Er 3  02 10                .byte 2, UF
003A90r 3  rr rr rr rr          .word nt_two_variable, xt_two_fetch, z_two_fetch
003A94r 3  rr rr        
003A96r 3  32 40                .byte "2@"
003A98r 3               
003A98r 3               nt_two_store:
003A98r 3  02 10                .byte 2, UF
003A9Ar 3  rr rr rr rr          .word nt_two_fetch, xt_two_store, z_two_store
003A9Er 3  rr rr        
003AA0r 3  32 21                .byte "2!"
003AA2r 3               
003AA2r 3               nt_two_over:
003AA2r 3  05 10                .byte 5, UF
003AA4r 3  rr rr rr rr          .word nt_two_store, xt_two_over, z_two_over
003AA8r 3  rr rr        
003AAAr 3  32 6F 76 65          .byte "2over"
003AAEr 3  72           
003AAFr 3               
003AAFr 3               nt_two_swap:
003AAFr 3  05 10                .byte 5, UF
003AB1r 3  rr rr rr rr          .word nt_two_over, xt_two_swap, z_two_swap
003AB5r 3  rr rr        
003AB7r 3  32 73 77 61          .byte "2swap"
003ABBr 3  70           
003ABCr 3               
003ABCr 3               nt_two_drop:
003ABCr 3  05 10                .byte 5, UF
003ABEr 3  rr rr rr rr          .word nt_two_swap, xt_two_drop, z_two_drop
003AC2r 3  rr rr        
003AC4r 3  32 64 72 6F          .byte "2drop"
003AC8r 3  70           
003AC9r 3               
003AC9r 3               nt_max:
003AC9r 3  03 10                .byte 3, UF
003ACBr 3  rr rr rr rr          .word nt_two_drop, xt_max, z_max
003ACFr 3  rr rr        
003AD1r 3  6D 61 78             .byte "max"
003AD4r 3               
003AD4r 3               nt_min:
003AD4r 3  03 10                .byte 3, UF
003AD6r 3  rr rr rr rr          .word nt_max, xt_min, z_min
003ADAr 3  rr rr        
003ADCr 3  6D 69 6E             .byte "min"
003ADFr 3               
003ADFr 3               nt_zero_less:
003ADFr 3  02 10                .byte 2, UF
003AE1r 3  rr rr rr rr          .word nt_min, xt_zero_less, z_zero_less
003AE5r 3  rr rr        
003AE7r 3  30 3C                .byte "0<"
003AE9r 3               
003AE9r 3               nt_zero_greater:
003AE9r 3  02 10                .byte 2, UF
003AEBr 3  rr rr rr rr          .word nt_zero_less, xt_zero_greater, z_zero_greater
003AEFr 3  rr rr        
003AF1r 3  30 3E                .byte "0>"
003AF3r 3               
003AF3r 3               nt_zero_unequal:
003AF3r 3  03 10                .byte 3, UF
003AF5r 3  rr rr rr rr          .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
003AF9r 3  rr rr        
003AFBr 3  30 3C 3E             .byte "0<>"
003AFEr 3               
003AFEr 3               nt_zero_equal:
003AFEr 3  02 10                .byte 2, UF
003B00r 3  rr rr rr rr          .word nt_zero_unequal, xt_zero_equal, z_zero_equal
003B04r 3  rr rr        
003B06r 3  30 3D                .byte "0="
003B08r 3               
003B08r 3               nt_greater_than:
003B08r 3  01 10                .byte 1, UF
003B0Ar 3  rr rr rr rr          .word nt_zero_equal, xt_greater_than, z_greater_than
003B0Er 3  rr rr        
003B10r 3  3E                   .byte ">"
003B11r 3               
003B11r 3               nt_u_greater_than:
003B11r 3  02 10                .byte 2, UF
003B13r 3  rr rr rr rr          .word nt_greater_than, xt_u_greater_than, z_u_greater_than
003B17r 3  rr rr        
003B19r 3  75 3E                .byte "u>"
003B1Br 3               
003B1Br 3               nt_u_less_than:
003B1Br 3  02 10                .byte 2, UF
003B1Dr 3  rr rr rr rr          .word nt_u_greater_than, xt_u_less_than, z_u_less_than
003B21r 3  rr rr        
003B23r 3  75 3C                .byte "u<"
003B25r 3               
003B25r 3               nt_less_than:
003B25r 3  01 10                .byte 1, UF
003B27r 3  rr rr rr rr          .word nt_u_less_than, xt_less_than, z_less_than
003B2Br 3  rr rr        
003B2Dr 3  3C                   .byte "<"
003B2Er 3               
003B2Er 3               nt_not_equals:
003B2Er 3  02 10                .byte 2, UF
003B30r 3  rr rr rr rr          .word nt_less_than, xt_not_equals, z_not_equals
003B34r 3  rr rr        
003B36r 3  3C 3E                .byte "<>"
003B38r 3               
003B38r 3               nt_equal:
003B38r 3  01 10                .byte 1, UF
003B3Ar 3  rr rr rr rr          .word nt_not_equals, xt_equal, z_equal
003B3Er 3  rr rr        
003B40r 3  3D                   .byte "="
003B41r 3               
003B41r 3               nt_two_slash:
003B41r 3  02 10                .byte 2, UF
003B43r 3  rr rr rr rr          .word nt_equal, xt_two_slash, z_two_slash
003B47r 3  rr rr        
003B49r 3  32 2F                .byte "2/"
003B4Br 3               
003B4Br 3               nt_two_star:
003B4Br 3  02 10                .byte 2, UF
003B4Dr 3  rr rr rr rr          .word nt_two_slash, xt_two_star, z_two_star
003B51r 3  rr rr        
003B53r 3  32 2A                .byte "2*"
003B55r 3               
003B55r 3               nt_one_plus:
003B55r 3  02 10                .byte 2, UF
003B57r 3  rr rr rr rr          .word nt_two_star, xt_one_plus, z_one_plus
003B5Br 3  rr rr        
003B5Dr 3  31 2B                .byte "1+"
003B5Fr 3               
003B5Fr 3               nt_one_minus:
003B5Fr 3  02 10                .byte 2, UF
003B61r 3  rr rr rr rr          .word nt_one_plus, xt_one_minus, z_one_minus
003B65r 3  rr rr        
003B67r 3  31 2D                .byte "1-"
003B69r 3               
003B69r 3               nt_here:
003B69r 3  04 00                .byte 4, 0
003B6Br 3  rr rr rr rr          .word nt_one_minus, xt_here, z_here
003B6Fr 3  rr rr        
003B71r 3  68 65 72 65          .byte "here"
003B75r 3               
003B75r 3               nt_cell_plus:
003B75r 3  05 10                .byte 5, UF
003B77r 3  rr rr rr rr          .word nt_here, xt_cell_plus, z_cell_plus
003B7Br 3  rr rr        
003B7Dr 3  63 65 6C 6C          .byte "cell+"
003B81r 3  2B           
003B82r 3               
003B82r 3               nt_cells:
003B82r 3  05 00                .byte 5, 0
003B84r 3  rr rr rr rr          .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
003B88r 3  rr rr        
003B8Ar 3  63 65 6C 6C          .byte "cells"
003B8Er 3  73           
003B8Fr 3               
003B8Fr 3               nt_chars:
003B8Fr 3  05 12                .byte 5, AN+UF   ; deleted during compile
003B91r 3  rr rr rr rr          .word nt_cells, xt_chars, z_chars
003B95r 3  rr rr        
003B97r 3  63 68 61 72          .byte "chars"
003B9Br 3  73           
003B9Cr 3               
003B9Cr 3               nt_char_plus:
003B9Cr 3  05 00                .byte 5, 0
003B9Er 3  rr rr rr rr          .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
003BA2r 3  rr rr        
003BA4r 3  63 68 61 72          .byte "char+"
003BA8r 3  2B           
003BA9r 3               
003BA9r 3               nt_bracket_char:
003BA9r 3  06 05                .byte 6, CO+IM
003BABr 3  rr rr rr rr          .word nt_char_plus, xt_bracket_char, z_bracket_char
003BAFr 3  rr rr        
003BB1r 3  5B 63 68 61          .byte "[char]"
003BB5r 3  72 5D        
003BB7r 3               
003BB7r 3               nt_char:
003BB7r 3  04 00                .byte 4, 0
003BB9r 3  rr rr rr rr          .word nt_bracket_char, xt_char, z_char
003BBDr 3  rr rr        
003BBFr 3  63 68 61 72          .byte "char"
003BC3r 3               
003BC3r 3               nt_pick:
003BC3r 3  04 00                .byte 4, 0    ; underflow check is complicated, leave off here
003BC5r 3  rr rr rr rr          .word nt_char, xt_pick, z_pick
003BC9r 3  rr rr        
003BCBr 3  70 69 63 6B          .byte "pick"
003BCFr 3               
003BCFr 3               nt_lshift:
003BCFr 3  06 10                .byte 6, UF
003BD1r 3  rr rr rr rr          .word nt_pick, xt_lshift, z_lshift
003BD5r 3  rr rr        
003BD7r 3  6C 73 68 69          .byte "lshift"
003BDBr 3  66 74        
003BDDr 3               
003BDDr 3               nt_rshift:
003BDDr 3  06 10                .byte 6, UF
003BDFr 3  rr rr rr rr          .word nt_lshift, xt_rshift, z_rshift
003BE3r 3  rr rr        
003BE5r 3  72 73 68 69          .byte "rshift"
003BE9r 3  66 74        
003BEBr 3               
003BEBr 3               nt_xor:
003BEBr 3  03 10                .byte 3, UF
003BEDr 3  rr rr rr rr          .word nt_rshift, xt_xor, z_xor
003BF1r 3  rr rr        
003BF3r 3  78 6F 72             .byte "xor"
003BF6r 3               
003BF6r 3               nt_or:
003BF6r 3  02 10                .byte 2, UF
003BF8r 3  rr rr rr rr          .word nt_xor, xt_or, z_or
003BFCr 3  rr rr        
003BFEr 3  6F 72                .byte "or"
003C00r 3               
003C00r 3               nt_and:
003C00r 3  03 10                .byte 3, UF
003C02r 3  rr rr rr rr          .word nt_or, xt_and, z_and
003C06r 3  rr rr        
003C08r 3  61 6E 64             .byte "and"
003C0Br 3               
003C0Br 3               nt_dabs:
003C0Br 3  04 10                .byte 4, UF
003C0Dr 3  rr rr rr rr          .word nt_and, xt_dabs, z_dabs
003C11r 3  rr rr        
003C13r 3  64 61 62 73          .byte "dabs"
003C17r 3               
003C17r 3               nt_abs:
003C17r 3  03 10                .byte 3, UF
003C19r 3  rr rr rr rr          .word nt_dabs, xt_abs, z_abs
003C1Dr 3  rr rr        
003C1Fr 3  61 62 73             .byte "abs"
003C22r 3               
003C22r 3               nt_minus:
003C22r 3  01 10                .byte 1, UF
003C24r 3  rr rr rr rr          .word nt_abs, xt_minus, z_minus
003C28r 3  rr rr        
003C2Ar 3  2D                   .byte "-"
003C2Br 3               
003C2Br 3               nt_plus:
003C2Br 3  01 10                .byte 1, UF
003C2Dr 3  rr rr rr rr          .word nt_minus, xt_plus, z_plus
003C31r 3  rr rr        
003C33r 3  2B                   .byte "+"
003C34r 3               
003C34r 3               nt_question_dup:
003C34r 3  04 10                .byte 4, UF
003C36r 3  rr rr rr rr          .word nt_plus, xt_question_dup, z_question_dup
003C3Ar 3  rr rr        
003C3Cr 3  3F 64 75 70          .byte "?dup"
003C40r 3               
003C40r 3               nt_two_dup:
003C40r 3  04 10                .byte 4, UF
003C42r 3  rr rr rr rr          .word nt_question_dup, xt_two_dup, z_two_dup
003C46r 3  rr rr        
003C48r 3  32 64 75 70          .byte "2dup"
003C4Cr 3               
003C4Cr 3               nt_two:
003C4Cr 3  01 00                .byte 1, 0
003C4Er 3  rr rr rr rr          .word nt_two_dup, xt_two, z_two
003C52r 3  rr rr        
003C54r 3  32                   .byte "2"
003C55r 3               
003C55r 3               nt_one:
003C55r 3  01 00                .byte 1, 0
003C57r 3  rr rr rr rr          .word nt_two, xt_one, z_one
003C5Br 3  rr rr        
003C5Dr 3  31                   .byte "1"
003C5Er 3               
003C5Er 3               nt_zero:
003C5Er 3  01 00                .byte 1, 0
003C60r 3  rr rr rr rr          .word nt_one, xt_zero, z_zero
003C64r 3  rr rr        
003C66r 3  30                   .byte "0"
003C67r 3               
003C67r 3               nt_space:
003C67r 3  05 00                .byte 5, 0
003C69r 3  rr rr rr rr          .word nt_zero, xt_space, z_space
003C6Dr 3  rr rr        
003C6Fr 3  73 70 61 63          .byte "space"
003C73r 3  65           
003C74r 3               
003C74r 3               nt_true:
003C74r 3  04 00                .byte 4, 0
003C76r 3  rr rr rr rr          .word nt_space, xt_true, z_true
003C7Ar 3  rr rr        
003C7Cr 3  74 72 75 65          .byte "true"
003C80r 3               
003C80r 3               nt_false:
003C80r 3  05 00                .byte 5, 0
003C82r 3  rr rr rr rr          .word nt_true, xt_false, z_false
003C86r 3  rr rr        
003C88r 3  66 61 6C 73          .byte "false"
003C8Cr 3  65           
003C8Dr 3               
003C8Dr 3               nt_question:
003C8Dr 3  01 00                .byte 1, 0
003C8Fr 3  rr rr rr rr          .word nt_false, xt_question, z_question
003C93r 3  rr rr        
003C95r 3  3F                   .byte "?"
003C96r 3               
003C96r 3               nt_ud_dot_r:
003C96r 3  04 10                .byte 4, UF
003C98r 3  rr rr rr rr          .word nt_question, xt_ud_dot_r, z_ud_dot_r
003C9Cr 3  rr rr        
003C9Er 3  75 64 2E 72          .byte "ud.r"
003CA2r 3               
003CA2r 3               nt_ud_dot:
003CA2r 3  03 10                .byte 3, UF
003CA4r 3  rr rr rr rr          .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
003CA8r 3  rr rr        
003CAAr 3  75 64 2E             .byte "ud."
003CADr 3               
003CADr 3               nt_d_dot_r:
003CADr 3  03 10                .byte 3, UF
003CAFr 3  rr rr rr rr          .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
003CB3r 3  rr rr        
003CB5r 3  64 2E 72             .byte "d.r"
003CB8r 3               
003CB8r 3               nt_d_dot:
003CB8r 3  02 10                .byte 2, UF
003CBAr 3  rr rr rr rr          .word nt_d_dot_r, xt_d_dot, z_d_dot
003CBEr 3  rr rr        
003CC0r 3  64 2E                .byte "d."
003CC2r 3               
003CC2r 3               nt_dot_r:
003CC2r 3  02 10                .byte 2, UF
003CC4r 3  rr rr rr rr          .word nt_d_dot, xt_dot_r, z_dot_r
003CC8r 3  rr rr        
003CCAr 3  2E 72                .byte ".r"
003CCCr 3               
003CCCr 3               nt_u_dot_r:
003CCCr 3  03 10                .byte 3, UF
003CCEr 3  rr rr rr rr          .word nt_dot_r, xt_u_dot_r, z_u_dot_r
003CD2r 3  rr rr        
003CD4r 3  75 2E 72             .byte "u.r"
003CD7r 3               
003CD7r 3               nt_u_dot:
003CD7r 3  02 10                .byte 2, UF
003CD9r 3  rr rr rr rr          .word nt_u_dot_r, xt_u_dot, z_u_dot
003CDDr 3  rr rr        
003CDFr 3  75 2E                .byte "u."
003CE1r 3               
003CE1r 3               nt_dot:
003CE1r 3  01 10                .byte 1, UF
003CE3r 3  rr rr rr rr          .word nt_u_dot, xt_dot, z_dot
003CE7r 3  rr rr        
003CE9r 3  2E                   .byte "."
003CEAr 3               
003CEAr 3               nt_type:
003CEAr 3  04 10                .byte 4, UF
003CECr 3  rr rr rr rr          .word nt_dot, xt_type, z_type
003CF0r 3  rr rr        
003CF2r 3  74 79 70 65          .byte "type"
003CF6r 3               
003CF6r 3               nt_emit:
003CF6r 3  04 18                .byte 4, NN+UF
003CF8r 3  rr rr rr rr          .word nt_type, xt_emit, z_emit
003CFCr 3  rr rr        
003CFEr 3  65 6D 69 74          .byte "emit"
003D02r 3               
003D02r 3               nt_execute:
003D02r 3  07 10                .byte 7, UF
003D04r 3  rr rr rr rr          .word nt_emit, xt_execute, z_execute
003D08r 3  rr rr        
003D0Ar 3  65 78 65 63          .byte "execute"
003D0Er 3  75 74 65     
003D11r 3               
003D11r 3               nt_plus_store:
003D11r 3  02 10                .byte 2, UF
003D13r 3  rr rr rr rr          .word nt_execute, xt_plus_store, z_plus_store
003D17r 3  rr rr        
003D19r 3  2B 21                .byte "+!"
003D1Br 3               
003D1Br 3               nt_c_store:
003D1Br 3  02 10                .byte 2, UF
003D1Dr 3  rr rr rr rr          .word nt_plus_store, xt_c_store, z_c_store
003D21r 3  rr rr        
003D23r 3  63 21                .byte "c!"
003D25r 3               
003D25r 3               nt_c_fetch:
003D25r 3  02 10                .byte 2, UF
003D27r 3  rr rr rr rr          .word nt_c_store, xt_c_fetch, z_c_fetch
003D2Br 3  rr rr        
003D2Dr 3  63 40                .byte "c@"
003D2Fr 3               
003D2Fr 3               nt_comma:
003D2Fr 3  01 10                .byte 1, UF
003D31r 3  rr rr rr rr          .word nt_c_fetch, xt_comma, z_comma
003D35r 3  rr rr        
003D37r 3  2C                   .byte ","
003D38r 3               
003D38r 3               nt_tuck:
003D38r 3  04 10                .byte 4, UF
003D3Ar 3  rr rr rr rr          .word nt_comma, xt_tuck, z_tuck
003D3Er 3  rr rr        
003D40r 3  74 75 63 6B          .byte "tuck"
003D44r 3               
003D44r 3               nt_not_rote:
003D44r 3  04 10                .byte 4, UF
003D46r 3  rr rr rr rr          .word nt_tuck, xt_not_rote, z_not_rote
003D4Ar 3  rr rr        
003D4Cr 3  2D 72 6F 74          .byte "-rot"
003D50r 3               
003D50r 3               nt_rot:
003D50r 3  03 10                .byte 3, UF
003D52r 3  rr rr rr rr          .word nt_not_rote, xt_rot, z_rot
003D56r 3  rr rr        
003D58r 3  72 6F 74             .byte "rot"
003D5Br 3               
003D5Br 3               nt_nip:
003D5Br 3  03 10                .byte 3, UF
003D5Dr 3  rr rr rr rr          .word nt_rot, xt_nip, z_nip
003D61r 3  rr rr        
003D63r 3  6E 69 70             .byte "nip"
003D66r 3               
003D66r 3               nt_r_fetch:
003D66r 3  02 01                .byte 2, CO    ; native is special case
003D68r 3  rr rr rr rr          .word nt_nip, xt_r_fetch, z_r_fetch
003D6Cr 3  rr rr        
003D6Er 3  72 40                .byte "r@"
003D70r 3               
003D70r 3               nt_r_from:
003D70r 3  02 01                .byte 2, CO    ; native is special case
003D72r 3  rr rr rr rr          .word nt_r_fetch, xt_r_from, z_r_from
003D76r 3  rr rr        
003D78r 3  72 3E                .byte "r>"
003D7Ar 3               
003D7Ar 3               nt_to_r:
003D7Ar 3  02 11                .byte 2, CO+UF ; native is special case
003D7Cr 3  rr rr rr rr          .word nt_r_from, xt_to_r, z_to_r
003D80r 3  rr rr        
003D82r 3  3E 72                .byte ">r"
003D84r 3               
003D84r 3               nt_over:
003D84r 3  04 10                .byte 4, UF
003D86r 3  rr rr rr rr          .word nt_to_r, xt_over, z_over
003D8Ar 3  rr rr        
003D8Cr 3  6F 76 65 72          .byte "over"
003D90r 3               
003D90r 3               nt_fetch:
003D90r 3  01 10                .byte 1, UF
003D92r 3  rr rr rr rr          .word nt_over, xt_fetch, z_fetch
003D96r 3  rr rr        
003D98r 3  40                   .byte "@"
003D99r 3               
003D99r 3               nt_store:
003D99r 3  01 10                .byte 1, UF
003D9Br 3  rr rr rr rr          .word nt_fetch, xt_store, z_store
003D9Fr 3  rr rr        
003DA1r 3  21                   .byte "!"
003DA2r 3               
003DA2r 3               nt_swap:
003DA2r 3  04 10                .byte 4, UF
003DA4r 3  rr rr rr rr          .word nt_store, xt_swap, z_swap
003DA8r 3  rr rr        
003DAAr 3  73 77 61 70          .byte "swap"
003DAEr 3               
003DAEr 3               nt_dup:
003DAEr 3  03 10                .byte 3, UF
003DB0r 3  rr rr rr rr          .word nt_swap, xt_dup, z_dup
003DB4r 3  rr rr        
003DB6r 3  64 75 70             .byte "dup"
003DB9r 3               
003DB9r 3               ; DROP is always the first native word in the Dictionary
003DB9r 3               dictionary_start:
003DB9r 3               nt_drop:
003DB9r 3  04 10                .byte 4, UF
003DBBr 3  rr rr rr rr          .word nt_dup, xt_drop, z_drop
003DBFr 3  rr rr        
003DC1r 3  64 72 6F 70          .byte "drop"
003DC5r 3               
003DC5r 3               ; END of FORTH-WORDLIST
003DC5r 3               
003DC5r 3               
003DC5r 3               ; ROOT-WORDLIST
003DC5r 3                       ; This is a short wordlist that has just the words needed to
003DC5r 3                       ; set the wordlists. These words are also included in the
003DC5r 3                       ; FORTH-WORDLIST as well.
003DC5r 3               
003DC5r 3               nt_root_words:
003DC5r 3  05 00                .byte 5, 0
003DC7r 3  00 00 rr rr          .word 0000, xt_words, z_words
003DCBr 3  rr rr        
003DCDr 3  77 6F 72 64          .byte "words"
003DD1r 3  73           
003DD2r 3               
003DD2r 3               nt_root_forth_wordlist: ; shares code with ZERO
003DD2r 3  0E 00                .byte 14, 0
003DD4r 3  rr rr rr rr          .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
003DD8r 3  rr rr        
003DDAr 3  66 6F 72 74          .byte "forth-wordlist"
003DDEr 3  68 2D 77 6F  
003DE2r 3  72 64 6C 69  
003DE8r 3               
003DE8r 3               nt_root_forth:
003DE8r 3  05 00                .byte 5, 0
003DEAr 3  rr rr rr rr          .word nt_root_forth_wordlist, xt_forth, z_forth
003DEEr 3  rr rr        
003DF0r 3  66 6F 72 74          .byte "forth"
003DF4r 3  68           
003DF5r 3               
003DF5r 3               root_dictionary_start:
003DF5r 3               nt_root_set_order:
003DF5r 3  09 00                .byte 9, 0
003DF7r 3  rr rr rr rr          .word nt_root_forth, xt_set_order, z_set_order
003DFBr 3  rr rr        
003DFDr 3  73 65 74 2D          .byte "set-order"
003E01r 3  6F 72 64 65  
003E05r 3  72           
003E06r 3               
003E06r 3               ; END of ROOT-WORDLIST
003E06r 3               
003E06r 3               
003E06r 3               ; ; EDITOR-WORDLIST
003E06r 3               
003E06r 3               ; nt_editor_enter_screen:
003E06r 3               ;         .byte 12, 0
003E06r 3               ;         .word 0000, xt_editor_enter_screen, z_editor_enter_screen
003E06r 3               ;         .byte "enter-screen"
003E06r 3               
003E06r 3               ; nt_editor_erase_screen:
003E06r 3               ;         .byte 12, 0
003E06r 3               ;         .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
003E06r 3               ;         .byte "erase-screen"
003E06r 3               
003E06r 3               ; nt_editor_el:
003E06r 3               ;         .byte 2, 0
003E06r 3               ;         .word nt_editor_erase_screen, xt_editor_el, z_editor_el
003E06r 3               ;         .byte "el"
003E06r 3               
003E06r 3               ; nt_editor_l:
003E06r 3               ;         .byte 1, 0
003E06r 3               ;         .word nt_editor_el, xt_editor_l, z_editor_l
003E06r 3               ;         .byte "l"
003E06r 3               
003E06r 3               ; nt_editor_line:
003E06r 3               ;         .byte 4, UF
003E06r 3               ;         .word nt_editor_l, xt_editor_line, z_editor_line
003E06r 3               ;         .byte "line"
003E06r 3               
003E06r 3               editor_dictionary_start:
003E06r 3               ; nt_editor_o:
003E06r 3               ;         .byte 1, 0
003E06r 3               ;         .word nt_editor_line, xt_editor_o, z_editor_o
003E06r 3               ;         .byte "o"
003E06r 3               
003E06r 3               ; ; END of EDITOR-WORDLIST
003E06r 3               
003E06r 3               
003E06r 3               ; ; ASSEMBLER-WORDLIST
003E06r 3               
003E06r 3               ; ; Labels for the opcodes have the format "nt_asm_<OPC>" where a futher
003E06r 3               ; ; underscore replaces any dot present in the SAN mnemonic. The hash sign for
003E06r 3               ; ; immediate addressing is replaced by an "h" (for example, the label code for
003E06r 3               ; ; "lda.#" is "xt_adm_lda_h"). All opcodes are immediate.
003E06r 3               assembler_dictionary_start:
003E06r 3               ; nt_asm_adc_h:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_adc_x
003E06r 3               ; 		.word xt_asm_adc_h, z_asm_adc_h
003E06r 3               ; 		.byte "adc.#"
003E06r 3               
003E06r 3               ; nt_asm_adc_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_adc_y
003E06r 3               ; 		.word xt_asm_adc_x, z_asm_adc_x
003E06r 3               ; 		.byte "adc.x"
003E06r 3               
003E06r 3               ; nt_asm_adc_y:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_adc_z
003E06r 3               ; 		.word xt_asm_adc_y, z_asm_adc_y
003E06r 3               ; 		.byte "adc.y"
003E06r 3               
003E06r 3               ; nt_asm_adc_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_adc_zi
003E06r 3               ; 		.word xt_asm_adc_z, z_asm_adc_z
003E06r 3               ; 		.byte "adc.z"
003E06r 3               
003E06r 3               ; nt_asm_adc_zi:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_adc_ziy
003E06r 3               ; 		.word xt_asm_adc_zi, z_asm_adc_zi
003E06r 3               ; 		.byte "adc.zi"
003E06r 3               
003E06r 3               ; nt_asm_adc_ziy:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_adc_zx
003E06r 3               ; 		.word xt_asm_adc_ziy, z_asm_adc_ziy
003E06r 3               ; 		.byte "adc.ziy"
003E06r 3               
003E06r 3               ; nt_asm_adc_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_adc_zxi
003E06r 3               ; 		.word xt_asm_adc_zx, z_asm_adc_zx
003E06r 3               ; 		.byte "adc.zx"
003E06r 3               
003E06r 3               ; nt_asm_adc_zxi:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_and
003E06r 3               ; 		.word xt_asm_adc_zxi, z_asm_adc_zxi
003E06r 3               ; 		.byte "adc.zxi"
003E06r 3               
003E06r 3               ; nt_asm_and:     ; not "and" because of conflicts with Forth word
003E06r 3               ; 		.byte 4, IM
003E06r 3               ;                 .word nt_asm_and_h
003E06r 3               ; 		.word xt_asm_and, z_asm_and
003E06r 3               ; 		.byte "and."
003E06r 3               
003E06r 3               ; nt_asm_and_h:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_and_x
003E06r 3               ; 		.word xt_asm_and_h, z_asm_and_h
003E06r 3               ; 		.byte "and.#"
003E06r 3               
003E06r 3               ; nt_asm_and_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_and_y
003E06r 3               ; 		.word xt_asm_and_x, z_asm_and_x
003E06r 3               ; 		.byte "and.x"
003E06r 3               
003E06r 3               ; nt_asm_and_y:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_and_z
003E06r 3               ; 		.word xt_asm_and_y, z_asm_and_y
003E06r 3               ; 		.byte "and.y"
003E06r 3               
003E06r 3               ; nt_asm_and_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_and_zi
003E06r 3               ; 		.word xt_asm_and_z, z_asm_and_z
003E06r 3               ; 		.byte "and.z"
003E06r 3               
003E06r 3               ; nt_asm_and_zi:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_and_ziy
003E06r 3               ; 		.word xt_asm_and_zi, z_asm_and_zi
003E06r 3               ; 		.byte "and.zi"
003E06r 3               
003E06r 3               ; nt_asm_and_ziy:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_and_zx
003E06r 3               ; 		.word xt_asm_and_ziy, z_asm_and_ziy
003E06r 3               ; 		.byte "and.ziy"
003E06r 3               
003E06r 3               ; nt_asm_and_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_and_zxi
003E06r 3               ; 		.word xt_asm_and_zx, z_asm_and_zx
003E06r 3               ; 		.byte "and.zx"
003E06r 3               
003E06r 3               ; nt_asm_and_zxi:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_asl
003E06r 3               ; 		.word xt_asm_and_zxi, z_asm_and_zxi
003E06r 3               ; 		.byte "and.zxi"
003E06r 3               
003E06r 3               ; nt_asm_asl:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_asl_a
003E06r 3               ; 		.word xt_asm_asl, z_asm_asl
003E06r 3               ; 		.byte "asl"
003E06r 3               
003E06r 3               ; nt_asm_asl_a:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_asl_x
003E06r 3               ; 		.word xt_asm_asl_a, z_asm_asl_a
003E06r 3               ; 		.byte "asl.a"
003E06r 3               
003E06r 3               ; nt_asm_asl_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_asl_z
003E06r 3               ; 		.word xt_asm_asl_x, z_asm_asl_x
003E06r 3               ; 		.byte "asl.x"
003E06r 3               
003E06r 3               ; nt_asm_asl_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_asl_zx
003E06r 3               ; 		.word xt_asm_asl_z, z_asm_asl_z
003E06r 3               ; 		.byte "asl.z"
003E06r 3               
003E06r 3               ; nt_asm_asl_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_bcc
003E06r 3               ; 		.word xt_asm_asl_zx, z_asm_asl_zx
003E06r 3               ; 		.byte "asl.zx"
003E06r 3               
003E06r 3               ; nt_asm_bcc:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_bcs
003E06r 3               ; 		.word xt_asm_bcc, z_asm_bcc
003E06r 3               ; 		.byte "bcc"
003E06r 3               
003E06r 3               ; nt_asm_bcs:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_beq
003E06r 3               ; 		.word xt_asm_bcs, z_asm_bcs
003E06r 3               ; 		.byte "bcs"
003E06r 3               
003E06r 3               ; nt_asm_beq:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_bit
003E06r 3               ; 		.word xt_asm_beq, z_asm_beq
003E06r 3               ; 		.byte "beq"
003E06r 3               
003E06r 3               ; nt_asm_bit:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_bit_h
003E06r 3               ; 		.word xt_asm_bit, z_asm_bit
003E06r 3               ; 		.byte "bit"
003E06r 3               
003E06r 3               ; nt_asm_bit_h:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_bit_x
003E06r 3               ; 		.word xt_asm_bit_h, z_asm_bit_h
003E06r 3               ; 		.byte "bit.#"
003E06r 3               
003E06r 3               ; nt_asm_bit_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_bit_z
003E06r 3               ; 		.word xt_asm_bit_x, z_asm_bit_x
003E06r 3               ; 		.byte "bit.x"
003E06r 3               
003E06r 3               ; nt_asm_bit_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_bit_zx
003E06r 3               ; 		.word xt_asm_bit_z, z_asm_bit_z
003E06r 3               ; 		.byte "bit.z"
003E06r 3               
003E06r 3               ; nt_asm_bit_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_bmi
003E06r 3               ; 		.word xt_asm_bit_zx, z_asm_bit_zx
003E06r 3               ; 		.byte "bit.zx"
003E06r 3               
003E06r 3               ; nt_asm_bmi:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_bne
003E06r 3               ; 		.word xt_asm_bmi, z_asm_bmi
003E06r 3               ; 		.byte "bmi"
003E06r 3               
003E06r 3               ; nt_asm_bne:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_bpl
003E06r 3               ; 		.word xt_asm_bne, z_asm_bne
003E06r 3               ; 		.byte "bne"
003E06r 3               
003E06r 3               ; nt_asm_bpl:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_bra
003E06r 3               ; 		.word xt_asm_bpl, z_asm_bpl
003E06r 3               ; 		.byte "bpl"
003E06r 3               
003E06r 3               ; nt_asm_bra:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_brk
003E06r 3               ; 		.word xt_asm_bra, z_asm_bra
003E06r 3               ; 		.byte "bra"
003E06r 3               
003E06r 3               ; nt_asm_brk:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_bvc
003E06r 3               ; 		.word xt_asm_brk, z_asm_brk
003E06r 3               ; 		.byte "brk"
003E06r 3               
003E06r 3               ; nt_asm_bvc:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_bvs
003E06r 3               ; 		.word xt_asm_bvc, z_asm_bvc
003E06r 3               ; 		.byte "bvc"
003E06r 3               
003E06r 3               ; nt_asm_bvs:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_clc
003E06r 3               ; 		.word xt_asm_bvs, z_asm_bvs
003E06r 3               ; 		.byte "bvs"
003E06r 3               
003E06r 3               ; nt_asm_clc:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_cld
003E06r 3               ; 		.word xt_asm_clc, z_asm_clc
003E06r 3               ; 		.byte "clc"
003E06r 3               
003E06r 3               ; nt_asm_cld:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_cli
003E06r 3               ; 		.word xt_asm_cld, z_asm_cld
003E06r 3               ; 		.byte "cld"
003E06r 3               
003E06r 3               ; nt_asm_cli:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_clv
003E06r 3               ; 		.word xt_asm_cli, z_asm_cli
003E06r 3               ; 		.byte "cli"
003E06r 3               
003E06r 3               ; nt_asm_clv:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_cmp
003E06r 3               ; 		.word xt_asm_clv, z_asm_clv
003E06r 3               ; 		.byte "clv"
003E06r 3               
003E06r 3               ; nt_asm_cmp:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_cmp_h
003E06r 3               ; 		.word xt_asm_cmp, z_asm_cmp
003E06r 3               ; 		.byte "cmp"
003E06r 3               
003E06r 3               ; nt_asm_cmp_h:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_cmp_x
003E06r 3               ; 		.word xt_asm_cmp_h, z_asm_cmp_h
003E06r 3               ; 		.byte "cmp.#"
003E06r 3               
003E06r 3               ; nt_asm_cmp_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_cmp_y
003E06r 3               ; 		.word xt_asm_cmp_x, z_asm_cmp_x
003E06r 3               ; 		.byte "cmp.x"
003E06r 3               
003E06r 3               ; nt_asm_cmp_y:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_cmp_z
003E06r 3               ; 		.word xt_asm_cmp_y, z_asm_cmp_y
003E06r 3               ; 		.byte "cmp.y"
003E06r 3               
003E06r 3               ; nt_asm_cmp_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_cmp_zi
003E06r 3               ; 		.word xt_asm_cmp_z, z_asm_cmp_z
003E06r 3               ; 		.byte "cmp.z"
003E06r 3               
003E06r 3               ; nt_asm_cmp_zi:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_cmp_ziy
003E06r 3               ; 		.word xt_asm_cmp_zi, z_asm_cmp_zi
003E06r 3               ; 		.byte "cmp.zi"
003E06r 3               
003E06r 3               ; nt_asm_cmp_ziy:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_cmp_zx
003E06r 3               ; 		.word xt_asm_cmp_ziy, z_asm_cmp_ziy
003E06r 3               ; 		.byte "cmp.ziy"
003E06r 3               
003E06r 3               ; nt_asm_cmp_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_cmp_zxi
003E06r 3               ; 		.word xt_asm_cmp_zx, z_asm_cmp_zx
003E06r 3               ; 		.byte "cmp.zx"
003E06r 3               
003E06r 3               ; nt_asm_cmp_zxi:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_cpx
003E06r 3               ; 		.word xt_asm_cmp_zxi, z_asm_cmp_zxi
003E06r 3               ; 		.byte "cmp.zxi"
003E06r 3               
003E06r 3               ; nt_asm_cpx:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_cpx_h
003E06r 3               ; 		.word xt_asm_cpx, z_asm_cpx
003E06r 3               ; 		.byte "cpx"
003E06r 3               
003E06r 3               ; nt_asm_cpx_h:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_cpx_z
003E06r 3               ; 		.word xt_asm_cpx_h, z_asm_cpx_h
003E06r 3               ; 		.byte "cpx.#"
003E06r 3               
003E06r 3               ; nt_asm_cpx_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_cpy
003E06r 3               ; 		.word xt_asm_cpx_z, z_asm_cpx_z
003E06r 3               ; 		.byte "cpx.z"
003E06r 3               
003E06r 3               ; nt_asm_cpy:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_cpy_h
003E06r 3               ; 		.word xt_asm_cpy, z_asm_cpy
003E06r 3               ; 		.byte "cpy"
003E06r 3               
003E06r 3               ; nt_asm_cpy_h:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_cpy_z
003E06r 3               ; 		.word xt_asm_cpy_h, z_asm_cpy_h
003E06r 3               ; 		.byte "cpy.#"
003E06r 3               
003E06r 3               ; nt_asm_cpy_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_dec
003E06r 3               ; 		.word xt_asm_cpy_z, z_asm_cpy_z
003E06r 3               ; 		.byte "cpy.z"
003E06r 3               
003E06r 3               ; nt_asm_dec:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_dec_a
003E06r 3               ; 		.word xt_asm_dec, z_asm_dec
003E06r 3               ; 		.byte "dec"
003E06r 3               
003E06r 3               ; nt_asm_dec_a:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_dec_x
003E06r 3               ; 		.word xt_asm_dec_a, z_asm_dec_a
003E06r 3               ; 		.byte "dec.a"
003E06r 3               
003E06r 3               ; nt_asm_dec_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_dec_z
003E06r 3               ; 		.word xt_asm_dec_x, z_asm_dec_x
003E06r 3               ; 		.byte "dec.x"
003E06r 3               
003E06r 3               ; nt_asm_dec_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_dec_zx
003E06r 3               ; 		.word xt_asm_dec_z, z_asm_dec_z
003E06r 3               ; 		.byte "dec.z"
003E06r 3               
003E06r 3               ; nt_asm_dec_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_dex
003E06r 3               ; 		.word xt_asm_dec_zx, z_asm_dec_zx
003E06r 3               ; 		.byte "dec.zx"
003E06r 3               
003E06r 3               ; nt_asm_dex:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_dey
003E06r 3               ; 		.word xt_asm_dex, z_asm_dex
003E06r 3               ; 		.byte "dex"
003E06r 3               
003E06r 3               ; nt_asm_dey:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_eor
003E06r 3               ; 		.word xt_asm_dey, z_asm_dey
003E06r 3               ; 		.byte "dey"
003E06r 3               
003E06r 3               ; nt_asm_eor:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_eor_h
003E06r 3               ; 		.word xt_asm_eor, z_asm_eor
003E06r 3               ; 		.byte "eor"
003E06r 3               
003E06r 3               ; nt_asm_eor_h:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_eor_x
003E06r 3               ; 		.word xt_asm_eor_h, z_asm_eor_h
003E06r 3               ; 		.byte "eor.#"
003E06r 3               
003E06r 3               ; nt_asm_eor_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_eor_y
003E06r 3               ; 		.word xt_asm_eor_x, z_asm_eor_x
003E06r 3               ; 		.byte "eor.x"
003E06r 3               
003E06r 3               ; nt_asm_eor_y:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_eor_z
003E06r 3               ; 		.word xt_asm_eor_y, z_asm_eor_y
003E06r 3               ; 		.byte "eor.y"
003E06r 3               
003E06r 3               ; nt_asm_eor_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_eor_zi
003E06r 3               ; 		.word xt_asm_eor_z, z_asm_eor_z
003E06r 3               ; 		.byte "eor.z"
003E06r 3               
003E06r 3               ; nt_asm_eor_zi:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_eor_ziy
003E06r 3               ; 		.word xt_asm_eor_zi, z_asm_eor_zi
003E06r 3               ; 		.byte "eor.zi"
003E06r 3               
003E06r 3               ; nt_asm_eor_ziy:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_eor_zx
003E06r 3               ; 		.word xt_asm_eor_ziy, z_asm_eor_ziy
003E06r 3               ; 		.byte "eor.ziy"
003E06r 3               
003E06r 3               ; nt_asm_eor_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_eor_zxi
003E06r 3               ; 		.word xt_asm_eor_zx, z_asm_eor_zx
003E06r 3               ; 		.byte "eor.zx"
003E06r 3               
003E06r 3               ; nt_asm_eor_zxi:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_inc
003E06r 3               ; 		.word xt_asm_eor_zxi, z_asm_eor_zxi
003E06r 3               ; 		.byte "eor.zxi"
003E06r 3               
003E06r 3               ; nt_asm_inc:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_inc_a
003E06r 3               ; 		.word xt_asm_inc, z_asm_inc
003E06r 3               ; 		.byte "inc"
003E06r 3               
003E06r 3               ; nt_asm_inc_a:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_inc_x
003E06r 3               ; 		.word xt_asm_inc_a, z_asm_inc_a
003E06r 3               ; 		.byte "inc.a"
003E06r 3               
003E06r 3               ; nt_asm_inc_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_inc_z
003E06r 3               ; 		.word xt_asm_inc_x, z_asm_inc_x
003E06r 3               ; 		.byte "inc.x"
003E06r 3               
003E06r 3               ; nt_asm_inc_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_inc_zx
003E06r 3               ; 		.word xt_asm_inc_z, z_asm_inc_z
003E06r 3               ; 		.byte "inc.z"
003E06r 3               
003E06r 3               ; nt_asm_inc_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_inx
003E06r 3               ; 		.word xt_asm_inc_zx, z_asm_inc_zx
003E06r 3               ; 		.byte "inc.zx"
003E06r 3               
003E06r 3               ; nt_asm_inx:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_iny
003E06r 3               ; 		.word xt_asm_inx, z_asm_inx
003E06r 3               ; 		.byte "inx"
003E06r 3               
003E06r 3               ; nt_asm_iny:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_jmp
003E06r 3               ; 		.word xt_asm_iny, z_asm_iny
003E06r 3               ; 		.byte "iny"
003E06r 3               
003E06r 3               ; nt_asm_jmp:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_jmp_i
003E06r 3               ; 		.word xt_asm_jmp, z_asm_jmp
003E06r 3               ; 		.byte "jmp"
003E06r 3               
003E06r 3               ; nt_asm_jmp_i:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_jmp_xi
003E06r 3               ; 		.word xt_asm_jmp_i, z_asm_jmp_i
003E06r 3               ; 		.byte "jmp.i"
003E06r 3               
003E06r 3               ; nt_asm_jmp_xi:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_jsr
003E06r 3               ; 		.word xt_asm_jmp_xi, z_asm_jmp_xi
003E06r 3               ; 		.byte "jmp.xi"
003E06r 3               
003E06r 3               ; nt_asm_jsr:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_lda
003E06r 3               ; 		.word xt_asm_jsr, z_asm_jsr
003E06r 3               ; 		.byte "jsr"
003E06r 3               
003E06r 3               ; nt_asm_lda:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_lda_h
003E06r 3               ; 		.word xt_asm_lda, z_asm_lda
003E06r 3               ; 		.byte "lda"
003E06r 3               
003E06r 3               ; nt_asm_lda_h:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_lda_x
003E06r 3               ; 		.word xt_asm_lda_h, z_asm_lda_h
003E06r 3               ; 		.byte "lda.#"
003E06r 3               
003E06r 3               ; nt_asm_lda_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_lda_y
003E06r 3               ; 		.word xt_asm_lda_x, z_asm_lda_x
003E06r 3               ; 		.byte "lda.x"
003E06r 3               
003E06r 3               ; nt_asm_lda_y:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_lda_z
003E06r 3               ; 		.word xt_asm_lda_y, z_asm_lda_y
003E06r 3               ; 		.byte "lda.y"
003E06r 3               
003E06r 3               ; nt_asm_lda_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_lda_zi
003E06r 3               ; 		.word xt_asm_lda_z, z_asm_lda_z
003E06r 3               ; 		.byte "lda.z"
003E06r 3               
003E06r 3               ; nt_asm_lda_zi:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_lda_ziy
003E06r 3               ; 		.word xt_asm_lda_zi, z_asm_lda_zi
003E06r 3               ; 		.byte "lda.zi"
003E06r 3               
003E06r 3               ; nt_asm_lda_ziy:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_lda_zx
003E06r 3               ; 		.word xt_asm_lda_ziy, z_asm_lda_ziy
003E06r 3               ; 		.byte "lda.ziy"
003E06r 3               
003E06r 3               ; nt_asm_lda_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_lda_zxi
003E06r 3               ; 		.word xt_asm_lda_zx, z_asm_lda_zx
003E06r 3               ; 		.byte "lda.zx"
003E06r 3               
003E06r 3               ; nt_asm_lda_zxi:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_ldx
003E06r 3               ; 		.word xt_asm_lda_zxi, z_asm_lda_zxi
003E06r 3               ; 		.byte "lda.zxi"
003E06r 3               
003E06r 3               ; nt_asm_ldx:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_ldx_h
003E06r 3               ; 		.word xt_asm_ldx, z_asm_ldx
003E06r 3               ; 		.byte "ldx"
003E06r 3               
003E06r 3               ; nt_asm_ldx_h:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_ldx_y
003E06r 3               ; 		.word xt_asm_ldx_h, z_asm_ldx_h
003E06r 3               ; 		.byte "ldx.#"
003E06r 3               
003E06r 3               ; nt_asm_ldx_y:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_ldx_z
003E06r 3               ; 		.word xt_asm_ldx_y, z_asm_ldx_y
003E06r 3               ; 		.byte "ldx.y"
003E06r 3               
003E06r 3               ; nt_asm_ldx_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_ldx_zy
003E06r 3               ; 		.word xt_asm_ldx_z, z_asm_ldx_z
003E06r 3               ; 		.byte "ldx.z"
003E06r 3               
003E06r 3               ; nt_asm_ldx_zy:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_ldy
003E06r 3               ; 		.word xt_asm_ldx_zy, z_asm_ldx_zy
003E06r 3               ; 		.byte "ldx.zy"
003E06r 3               
003E06r 3               ; nt_asm_ldy:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_ldy_h
003E06r 3               ; 		.word xt_asm_ldy, z_asm_ldy
003E06r 3               ; 		.byte "ldy"
003E06r 3               
003E06r 3               ; nt_asm_ldy_h:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_ldy_x
003E06r 3               ; 		.word xt_asm_ldy_h, z_asm_ldy_h
003E06r 3               ; 		.byte "ldy.#"
003E06r 3               
003E06r 3               ; nt_asm_ldy_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_ldy_z
003E06r 3               ; 		.word xt_asm_ldy_x, z_asm_ldy_x
003E06r 3               ; 		.byte "ldy.x"
003E06r 3               
003E06r 3               ; nt_asm_ldy_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_ldy_zx
003E06r 3               ; 		.word xt_asm_ldy_z, z_asm_ldy_z
003E06r 3               ; 		.byte "ldy.z"
003E06r 3               
003E06r 3               ; nt_asm_ldy_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_lsr
003E06r 3               ; 		.word xt_asm_ldy_zx, z_asm_ldy_zx
003E06r 3               ; 		.byte "ldy.zx"
003E06r 3               
003E06r 3               ; nt_asm_lsr:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_lsr_a
003E06r 3               ; 		.word xt_asm_lsr, z_asm_lsr
003E06r 3               ; 		.byte "lsr"
003E06r 3               
003E06r 3               ; nt_asm_lsr_a:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_lsr_x
003E06r 3               ; 		.word xt_asm_lsr_a, z_asm_lsr_a
003E06r 3               ; 		.byte "lsr.a"
003E06r 3               
003E06r 3               ; nt_asm_lsr_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_lsr_z
003E06r 3               ; 		.word xt_asm_lsr_x, z_asm_lsr_x
003E06r 3               ; 		.byte "lsr.x"
003E06r 3               
003E06r 3               ; nt_asm_lsr_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_lsr_zx
003E06r 3               ; 		.word xt_asm_lsr_z, z_asm_lsr_z
003E06r 3               ; 		.byte "lsr.z"
003E06r 3               
003E06r 3               ; nt_asm_lsr_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_nop
003E06r 3               ; 		.word xt_asm_lsr_zx, z_asm_lsr_zx
003E06r 3               ; 		.byte "lsr.zx"
003E06r 3               
003E06r 3               ; nt_asm_nop:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_ora
003E06r 3               ; 		.word xt_asm_nop, z_asm_nop
003E06r 3               ; 		.byte "nop"
003E06r 3               
003E06r 3               ; nt_asm_ora:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_ora_h
003E06r 3               ; 		.word xt_asm_ora, z_asm_ora
003E06r 3               ; 		.byte "ora"
003E06r 3               
003E06r 3               ; nt_asm_ora_h:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_ora_x
003E06r 3               ; 		.word xt_asm_ora_h, z_asm_ora_h
003E06r 3               ; 		.byte "ora.#"
003E06r 3               
003E06r 3               ; nt_asm_ora_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_ora_y
003E06r 3               ; 		.word xt_asm_ora_x, z_asm_ora_x
003E06r 3               ; 		.byte "ora.x"
003E06r 3               
003E06r 3               ; nt_asm_ora_y:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_ora_z
003E06r 3               ; 		.word xt_asm_ora_y, z_asm_ora_y
003E06r 3               ; 		.byte "ora.y"
003E06r 3               
003E06r 3               ; nt_asm_ora_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_ora_zi
003E06r 3               ; 		.word xt_asm_ora_z, z_asm_ora_z
003E06r 3               ; 		.byte "ora.z"
003E06r 3               
003E06r 3               ; nt_asm_ora_zi:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_ora_ziy
003E06r 3               ; 		.word xt_asm_ora_zi, z_asm_ora_zi
003E06r 3               ; 		.byte "ora.zi"
003E06r 3               
003E06r 3               ; nt_asm_ora_ziy:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_ora_zx
003E06r 3               ; 		.word xt_asm_ora_ziy, z_asm_ora_ziy
003E06r 3               ; 		.byte "ora.ziy"
003E06r 3               
003E06r 3               ; nt_asm_ora_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_ora_zxi
003E06r 3               ; 		.word xt_asm_ora_zx, z_asm_ora_zx
003E06r 3               ; 		.byte "ora.zx"
003E06r 3               
003E06r 3               ; nt_asm_ora_zxi:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_pha
003E06r 3               ; 		.word xt_asm_ora_zxi, z_asm_ora_zxi
003E06r 3               ; 		.byte "ora.zxi"
003E06r 3               
003E06r 3               ; nt_asm_pha:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_php
003E06r 3               ; 		.word xt_asm_pha, z_asm_pha
003E06r 3               ; 		.byte "pha"
003E06r 3               
003E06r 3               ; nt_asm_php:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_phx
003E06r 3               ; 		.word xt_asm_php, z_asm_php
003E06r 3               ; 		.byte "php"
003E06r 3               
003E06r 3               ; nt_asm_phx:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_phy
003E06r 3               ; 		.word xt_asm_phx, z_asm_phx
003E06r 3               ; 		.byte "phx"
003E06r 3               
003E06r 3               ; nt_asm_phy:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_pla
003E06r 3               ; 		.word xt_asm_phy, z_asm_phy
003E06r 3               ; 		.byte "phy"
003E06r 3               
003E06r 3               ; nt_asm_pla:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_plp
003E06r 3               ; 		.word xt_asm_pla, z_asm_pla
003E06r 3               ; 		.byte "pla"
003E06r 3               
003E06r 3               ; nt_asm_plp:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_plx
003E06r 3               ; 		.word xt_asm_plp, z_asm_plp
003E06r 3               ; 		.byte "plp"
003E06r 3               
003E06r 3               ; nt_asm_plx:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_ply
003E06r 3               ; 		.word xt_asm_plx, z_asm_plx
003E06r 3               ; 		.byte "plx"
003E06r 3               
003E06r 3               ; nt_asm_ply:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_rol
003E06r 3               ; 		.word xt_asm_ply, z_asm_ply
003E06r 3               ; 		.byte "ply"
003E06r 3               
003E06r 3               ; nt_asm_rol:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_rol_a
003E06r 3               ; 		.word xt_asm_rol, z_asm_rol
003E06r 3               ; 		.byte "rol"
003E06r 3               
003E06r 3               ; nt_asm_rol_a:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_rol_x
003E06r 3               ; 		.word xt_asm_rol_a, z_asm_rol_a
003E06r 3               ; 		.byte "rol.a"
003E06r 3               
003E06r 3               ; nt_asm_rol_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_rol_z
003E06r 3               ; 		.word xt_asm_rol_x, z_asm_rol_x
003E06r 3               ; 		.byte "rol.x"
003E06r 3               
003E06r 3               ; nt_asm_rol_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_rol_zx
003E06r 3               ; 		.word xt_asm_rol_z, z_asm_rol_z
003E06r 3               ; 		.byte "rol.z"
003E06r 3               
003E06r 3               ; nt_asm_rol_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_ror
003E06r 3               ; 		.word xt_asm_rol_zx, z_asm_rol_zx
003E06r 3               ; 		.byte "rol.zx"
003E06r 3               
003E06r 3               ; nt_asm_ror:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_ror_a
003E06r 3               ; 		.word xt_asm_ror, z_asm_ror
003E06r 3               ; 		.byte "ror"
003E06r 3               
003E06r 3               ; nt_asm_ror_a:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_ror_x
003E06r 3               ; 		.word xt_asm_ror_a, z_asm_ror_a
003E06r 3               ; 		.byte "ror.a"
003E06r 3               
003E06r 3               ; nt_asm_ror_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_ror_z
003E06r 3               ; 		.word xt_asm_ror_x, z_asm_ror_x
003E06r 3               ; 		.byte "ror.x"
003E06r 3               
003E06r 3               ; nt_asm_ror_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_ror_zx
003E06r 3               ; 		.word xt_asm_ror_z, z_asm_ror_z
003E06r 3               ; 		.byte "ror.z"
003E06r 3               
003E06r 3               ; nt_asm_ror_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_rti
003E06r 3               ; 		.word xt_asm_ror_zx, z_asm_ror_zx
003E06r 3               ; 		.byte "ror.zx"
003E06r 3               
003E06r 3               ; nt_asm_rti:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_rts
003E06r 3               ; 		.word xt_asm_rti, z_asm_rti
003E06r 3               ; 		.byte "rti"
003E06r 3               
003E06r 3               ; nt_asm_rts:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_sbc
003E06r 3               ; 		.word xt_asm_rts, z_asm_rts
003E06r 3               ; 		.byte "rts"
003E06r 3               
003E06r 3               ; nt_asm_sbc:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_sbc_h
003E06r 3               ; 		.word xt_asm_sbc, z_asm_sbc
003E06r 3               ; 		.byte "sbc"
003E06r 3               
003E06r 3               ; nt_asm_sbc_h:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_sbc_x
003E06r 3               ; 		.word xt_asm_sbc_h, z_asm_sbc_h
003E06r 3               ; 		.byte "sbc.#"
003E06r 3               
003E06r 3               ; nt_asm_sbc_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_sbc_y
003E06r 3               ; 		.word xt_asm_sbc_x, z_asm_sbc_x
003E06r 3               ; 		.byte "sbc.x"
003E06r 3               
003E06r 3               ; nt_asm_sbc_y:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_sbc_z
003E06r 3               ; 		.word xt_asm_sbc_y, z_asm_sbc_y
003E06r 3               ; 		.byte "sbc.y"
003E06r 3               
003E06r 3               ; nt_asm_sbc_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_sbc_zi
003E06r 3               ; 		.word xt_asm_sbc_z, z_asm_sbc_z
003E06r 3               ; 		.byte "sbc.z"
003E06r 3               
003E06r 3               ; nt_asm_sbc_zi:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_sbc_ziy
003E06r 3               ; 		.word xt_asm_sbc_zi, z_asm_sbc_zi
003E06r 3               ; 		.byte "sbc.zi"
003E06r 3               
003E06r 3               ; nt_asm_sbc_ziy:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_sbc_zx
003E06r 3               ; 		.word xt_asm_sbc_ziy, z_asm_sbc_ziy
003E06r 3               ; 		.byte "sbc.ziy"
003E06r 3               
003E06r 3               ; nt_asm_sbc_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_sbc_zxi
003E06r 3               ; 		.word xt_asm_sbc_zx, z_asm_sbc_zx
003E06r 3               ; 		.byte "sbc.zx"
003E06r 3               
003E06r 3               ; nt_asm_sbc_zxi:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_sec
003E06r 3               ; 		.word xt_asm_sbc_zxi, z_asm_sbc_zxi
003E06r 3               ; 		.byte "sbc.zxi"
003E06r 3               
003E06r 3               ; nt_asm_sec:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_sed
003E06r 3               ; 		.word xt_asm_sec, z_asm_sec
003E06r 3               ; 		.byte "sec"
003E06r 3               
003E06r 3               ; nt_asm_sed:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_sei
003E06r 3               ; 		.word xt_asm_sed, z_asm_sed
003E06r 3               ; 		.byte "sed"
003E06r 3               
003E06r 3               ; nt_asm_sei:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_sta
003E06r 3               ; 		.word xt_asm_sei, z_asm_sei
003E06r 3               ; 		.byte "sei"
003E06r 3               
003E06r 3               ; nt_asm_sta:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_sta_x
003E06r 3               ; 		.word xt_asm_sta, z_asm_sta
003E06r 3               ; 		.byte "sta"
003E06r 3               
003E06r 3               ; nt_asm_sta_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_sta_y
003E06r 3               ; 		.word xt_asm_sta_x, z_asm_sta_x
003E06r 3               ; 		.byte "sta.x"
003E06r 3               
003E06r 3               ; nt_asm_sta_y:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_sta_z
003E06r 3               ; 		.word xt_asm_sta_y, z_asm_sta_y
003E06r 3               ; 		.byte "sta.y"
003E06r 3               
003E06r 3               ; nt_asm_sta_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_sta_zi
003E06r 3               ; 		.word xt_asm_sta_z, z_asm_sta_z
003E06r 3               ; 		.byte "sta.z"
003E06r 3               
003E06r 3               ; nt_asm_sta_zi:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_sta_ziy
003E06r 3               ; 		.word xt_asm_sta_zi, z_asm_sta_zi
003E06r 3               ; 		.byte "sta.zi"
003E06r 3               
003E06r 3               ; nt_asm_sta_ziy:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_sta_zx
003E06r 3               ; 		.word xt_asm_sta_ziy, z_asm_sta_ziy
003E06r 3               ; 		.byte "sta.ziy"
003E06r 3               
003E06r 3               ; nt_asm_sta_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_sta_zxi
003E06r 3               ; 		.word xt_asm_sta_zx, z_asm_sta_zx
003E06r 3               ; 		.byte "sta.zx"
003E06r 3               
003E06r 3               ; nt_asm_sta_zxi:
003E06r 3               ; 		.byte 7, IM
003E06r 3               ;                 .word nt_asm_stx
003E06r 3               ; 		.word xt_asm_sta_zxi, z_asm_sta_zxi
003E06r 3               ; 		.byte "sta.zxi"
003E06r 3               
003E06r 3               ; nt_asm_stx:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_stx_z
003E06r 3               ; 		.word xt_asm_stx, z_asm_stx
003E06r 3               ; 		.byte "stx"
003E06r 3               
003E06r 3               ; nt_asm_stx_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_stx_zy
003E06r 3               ; 		.word xt_asm_stx_z, z_asm_stx_z
003E06r 3               ; 		.byte "stx.z"
003E06r 3               
003E06r 3               ; nt_asm_stx_zy:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_sty
003E06r 3               ; 		.word xt_asm_stx_zy, z_asm_stx_zy
003E06r 3               ; 		.byte "stx.zy"
003E06r 3               
003E06r 3               ; nt_asm_sty:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_sty_z
003E06r 3               ; 		.word xt_asm_sty, z_asm_sty
003E06r 3               ; 		.byte "sty"
003E06r 3               
003E06r 3               ; nt_asm_sty_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_sty_zx
003E06r 3               ; 		.word xt_asm_sty_z, z_asm_sty_z
003E06r 3               ; 		.byte "sty.z"
003E06r 3               
003E06r 3               ; nt_asm_sty_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_stz
003E06r 3               ; 		.word xt_asm_sty_zx, z_asm_sty_zx
003E06r 3               ; 		.byte "sty.zx"
003E06r 3               
003E06r 3               ; nt_asm_stz:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_stz_x
003E06r 3               ; 		.word xt_asm_stz, z_asm_stz
003E06r 3               ; 		.byte "stz"
003E06r 3               
003E06r 3               ; nt_asm_stz_x:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_stz_z
003E06r 3               ; 		.word xt_asm_stz_x, z_asm_stz_x
003E06r 3               ; 		.byte "stz.x"
003E06r 3               
003E06r 3               ; nt_asm_stz_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_stz_zx
003E06r 3               ; 		.word xt_asm_stz_z, z_asm_stz_z
003E06r 3               ; 		.byte "stz.z"
003E06r 3               
003E06r 3               ; nt_asm_stz_zx:
003E06r 3               ; 		.byte 6, IM
003E06r 3               ;                 .word nt_asm_tax
003E06r 3               ; 		.word xt_asm_stz_zx, z_asm_stz_zx
003E06r 3               ; 		.byte "stz.zx"
003E06r 3               
003E06r 3               ; nt_asm_tax:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_tay
003E06r 3               ; 		.word xt_asm_tax, z_asm_tax
003E06r 3               ; 		.byte "tax"
003E06r 3               
003E06r 3               ; nt_asm_tay:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_trb
003E06r 3               ; 		.word xt_asm_tay, z_asm_tay
003E06r 3               ; 		.byte "tay"
003E06r 3               
003E06r 3               ; nt_asm_trb:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_trb_z
003E06r 3               ; 		.word xt_asm_trb, z_asm_trb
003E06r 3               ; 		.byte "trb"
003E06r 3               
003E06r 3               ; nt_asm_trb_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_tsb
003E06r 3               ; 		.word xt_asm_trb_z, z_asm_trb_z
003E06r 3               ; 		.byte "trb.z"
003E06r 3               
003E06r 3               ; nt_asm_tsb:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_tsb_z
003E06r 3               ; 		.word xt_asm_tsb, z_asm_tsb
003E06r 3               ; 		.byte "tsb"
003E06r 3               
003E06r 3               ; nt_asm_tsb_z:
003E06r 3               ; 		.byte 5, IM
003E06r 3               ;                 .word nt_asm_tsx
003E06r 3               ; 		.word xt_asm_tsb_z, z_asm_tsb_z
003E06r 3               ; 		.byte "tsb.z"
003E06r 3               
003E06r 3               ; nt_asm_tsx:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_txa
003E06r 3               ; 		.word xt_asm_tsx, z_asm_tsx
003E06r 3               ; 		.byte "tsx"
003E06r 3               
003E06r 3               ; nt_asm_txa:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_txs
003E06r 3               ; 		.word xt_asm_txa, z_asm_txa
003E06r 3               ; 		.byte "txa"
003E06r 3               
003E06r 3               ; nt_asm_txs:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_tya
003E06r 3               ; 		.word xt_asm_txs, z_asm_txs
003E06r 3               ; 		.byte "txs"
003E06r 3               
003E06r 3               ; nt_asm_tya:
003E06r 3               ; 		.byte 3, IM
003E06r 3               ;                 .word nt_asm_arrow
003E06r 3               ; 		.word xt_asm_tya, z_asm_tya
003E06r 3               ; 		.byte "tya"
003E06r 3               
003E06r 3               ; ; Assembler pseudo-instructions, directives and macros
003E06r 3               
003E06r 3               ; nt_asm_arrow:   ; uses same code as HERE, but immediate
003E06r 3               ;                 .byte 3, IM
003E06r 3               ;                 .word nt_asm_back_jump
003E06r 3               ;                 .word xt_asm_arrow, z_asm_arrow
003E06r 3               ;                 .byte "-->"
003E06r 3               
003E06r 3               
003E06r 3               ; nt_asm_back_jump:  ; syntactic sugar, does nothing
003E06r 3               ;                 .byte 2, IM
003E06r 3               ;                 .word nt_asm_back_branch
003E06r 3               ;                 .word xt_asm_back_jump, z_asm_back_jump
003E06r 3               ;                 .byte "<j"
003E06r 3               
003E06r 3               ; nt_asm_back_branch:
003E06r 3               ;                 .byte 2, IM
003E06r 3               ;                 .word nt_asm_push_a
003E06r 3               ;                 .word xt_asm_back_branch, z_asm_back_branch
003E06r 3               ;                 .byte "<b"
003E06r 3               
003E06r 3               ; nt_asm_push_a:
003E06r 3               ;                 .byte 6, IM
003E06r 3               ;                 .word 0000
003E06r 3               ;                 .word xt_asm_push_a, z_asm_push_a
003E06r 3               ;                 .byte "push-a"
003E06r 3               
003E06r 3               
003E06r 3               
003E06r 3               ; END of ASSEMBLER-WORDLIST
003E06r 3               
003E06r 3               ; END
003E06r 3               
003E06r 2                   .include "strings.s"          ; Headers of native words
003E06r 3               ; List of Strings for Tali Forth 2
003E06r 3               ; Scot W. Stevenson <scot.stevenson@gmail.com>
003E06r 3               ; First version: 01. Apr 2016 (for Liara Forth)
003E06r 3               ; This version: 28. Dec 2018
003E06r 3               
003E06r 3               ; This file is included by taliforth.asm
003E06r 3               
003E06r 3               ; ## GENERAL STRINGS
003E06r 3               
003E06r 3               ; All general strings must be zero-terminated, names start with "s_",
003E06r 3               ; aliases with "str_"
003E06r 3               
003E06r 3               str_ok =              0
003E06r 3               str_compile =         1
003E06r 3               str_redefined =       2
003E06r 3               str_wid_forth =       3
003E06r 3               str_abc_lower =       4
003E06r 3               str_abc_upper =       5
003E06r 3               str_wid_editor =      6
003E06r 3               str_wid_assembler =   7
003E06r 3               str_wid_root =        8
003E06r 3               str_see_flags =       9
003E06r 3               str_see_nt =         10
003E06r 3               str_see_xt =         11
003E06r 3               str_see_size =       12
003E06r 3               
003E06r 3               ; Since we can't fit a 16-bit address in a register, we use indexes as offsets
003E06r 3               ; to tables as error and string numbers.
003E06r 3               string_table:
003E06r 3  rr rr rr rr          .word s_ok, s_compiled, s_redefined, s_wid_forth, s_abc_lower ; 0-4
003E0Ar 3  rr rr rr rr  
003E0Er 3  rr rr        
003E10r 3  rr rr rr rr          .word s_abc_upper, s_wid_editor, s_wid_asm, s_wid_root        ; 5-8
003E14r 3  rr rr rr rr  
003E18r 3  rr rr rr rr          .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 9-12
003E1Cr 3  rr rr rr rr  
003E20r 3               
003E20r 3  20 6F 6B 00  s_ok:         .byte " ok", 0         ; note space at beginning
003E24r 3  20 63 6F 6D  s_compiled:   .byte " compiled", 0   ; note space at beginning
003E28r 3  70 69 6C 65  
003E2Cr 3  64 00        
003E2Er 3  72 65 64 65  s_redefined:  .byte "redefined ", 0  ; note space at end
003E32r 3  66 69 6E 65  
003E36r 3  64 20 00     
003E39r 3               
003E39r 3  30 31 32 33  s_abc_lower:  .byte "0123456789abcdefghijklmnopqrstuvwxyz"
003E3Dr 3  34 35 36 37  
003E41r 3  38 39 61 62  
003E5Dr 3  30 31 32 33  s_abc_upper:  .byte "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
003E61r 3  34 35 36 37  
003E65r 3  38 39 41 42  
003E81r 3               
003E81r 3  41 73 73 65  s_wid_asm:    .byte "Assembler ", 0  ; Wordlist ID 2, note space at end
003E85r 3  6D 62 6C 65  
003E89r 3  72 20 00     
003E8Cr 3  45 64 69 74  s_wid_editor: .byte "Editor ", 0     ; Wordlist ID 1, note space at end
003E90r 3  6F 72 20 00  
003E94r 3  46 6F 72 74  s_wid_forth:  .byte "Forth ", 0      ; Wordlist ID 0, note space at end
003E98r 3  68 20 00     
003E9Br 3  52 6F 6F 74  s_wid_root:   .byte "Root ", 0       ; Wordlist ID 3, note space at end
003E9Fr 3  20 00        
003EA1r 3               
003EA1r 3  66 6C 61 67  s_see_flags:  .byte "flags (CO AN IM NN UF HC): ", 0
003EA5r 3  73 20 28 43  
003EA9r 3  4F 20 41 4E  
003EBDr 3  6E 74 3A 20  s_see_nt:     .byte "nt: ", 0
003EC1r 3  00           
003EC2r 3  78 74 3A 20  s_see_xt:     .byte "xt: ", 0
003EC6r 3  00           
003EC7r 3  73 69 7A 65  s_see_size:   .byte "size (decimal): ", 0
003ECBr 3  20 28 64 65  
003ECFr 3  63 69 6D 61  
003ED8r 3               
003ED8r 3               
003ED8r 3               ; ## ERROR STRINGS
003ED8r 3               
003ED8r 3               ; All error strings must be zero-terminated, all names start with "es_",
003ED8r 3               ; aliases with "err_". If the string texts are changed, the test suite must be
003ED8r 3               ; as well
003ED8r 3               
003ED8r 3               err_allot =        0
003ED8r 3               err_badsource =    1
003ED8r 3               err_compileonly =  2
003ED8r 3               err_defer =        3
003ED8r 3               err_divzero =      4
003ED8r 3               err_noname =       5
003ED8r 3               err_refill =       6
003ED8r 3               err_state =        7
003ED8r 3               err_syntax =       8
003ED8r 3               err_underflow =    9
003ED8r 3               err_negallot =     10
003ED8r 3               err_wordlist =     11
003ED8r 3               err_blockwords =   12
003ED8r 3               
003ED8r 3               error_table:
003ED8r 3  rr rr rr rr          .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
003EDCr 3  rr rr rr rr  
003EE0r 3  rr rr rr rr          .word es_divzero, es_noname, es_refill, es_state        ;  4-7
003EE4r 3  rr rr rr rr  
003EE8r 3  rr rr rr rr          .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
003EECr 3  rr rr rr rr  
003EF0r 3  rr rr                .word es_blockwords                                    ; 12
003EF2r 3               
003EF2r 3  41 4C 4C 4F  es_allot:       .byte "ALLOT using all available memory", 0
003EF6r 3  54 20 75 73  
003EFAr 3  69 6E 67 20  
003F13r 3  49 6C 6C 65  es_badsource:   .byte "Illegal SOURCE-ID during REFILL", 0
003F17r 3  67 61 6C 20  
003F1Br 3  53 4F 55 52  
003F33r 3  49 6E 74 65  es_compileonly: .byte "Interpreting a compile-only word", 0
003F37r 3  72 70 72 65  
003F3Br 3  74 69 6E 67  
003F54r 3  44 45 46 45  es_defer:       .byte "DEFERed word not defined yet", 0
003F58r 3  52 65 64 20  
003F5Cr 3  77 6F 72 64  
003F71r 3  44 69 76 69  es_divzero:     .byte "Division by zero", 0
003F75r 3  73 69 6F 6E  
003F79r 3  20 62 79 20  
003F82r 3  50 61 72 73  es_noname:      .byte "Parsing failure", 0
003F86r 3  69 6E 67 20  
003F8Ar 3  66 61 69 6C  
003F92r 3  51 55 49 54  es_refill:      .byte "QUIT could not get input (REFILL returned -1)", 0
003F96r 3  20 63 6F 75  
003F9Ar 3  6C 64 20 6E  
003FC0r 3  41 6C 72 65  es_state:       .byte "Already in compile mode", 0
003FC4r 3  61 64 79 20  
003FC8r 3  69 6E 20 63  
003FD8r 3  55 6E 64 65  es_syntax:      .byte "Undefined word", 0
003FDCr 3  66 69 6E 65  
003FE0r 3  64 20 77 6F  
003FE7r 3  53 74 61 63  es_underflow:   .byte "Stack underflow", 0
003FEBr 3  6B 20 75 6E  
003FEFr 3  64 65 72 66  
003FF7r 3  4D 61 78 20  es_negallot:    .byte "Max memory freed with ALLOT", 0
003FFBr 3  6D 65 6D 6F  
003FFFr 3  72 79 20 66  
004013r 3  4E 6F 20 77  es_wordlist:    .byte "No wordlists available", 0
004017r 3  6F 72 64 6C  
00401Br 3  69 73 74 73  
00402Ar 3  50 6C 65 61  es_blockwords:  .byte "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
00402Er 3  73 65 20 61  
004032r 3  73 73 69 67  
004069r 3               
004069r 3               ; ## ENVIRONMENT STRINGS
004069r 3               
004069r 3               ; These are used by the ENVIRONMENT? word and stored in the old string format:
004069r 3               ; Length byte first, then the string itself that is not rpt. not
004069r 3               ; zero-terminated. Note these are uppercase by ANS defintion. All start with
004069r 3               ; "envs_".
004069r 3               
004069r 3               ; These return a single-cell number
004069r 3  0F 2F 43 4F  envs_cs:        .byte 15, "/COUNTED-STRING"
00406Dr 3  55 4E 54 45  
004071r 3  44 2D 53 54  
004079r 3  05 2F 48 4F  envs_hold:      .byte 5, "/HOLD"
00407Dr 3  4C 44        
00407Fr 3  04 2F 50 41  envs_pad:       .byte 4, "/PAD"
004083r 3  44           
004084r 3  11 41 44 44  envs_aub:       .byte 17, "ADDRESS-UNIT-BITS"
004088r 3  52 45 53 53  
00408Cr 3  2D 55 4E 49  
004096r 3  07 46 4C 4F  envs_floored:   .byte 7, "FLOORED"
00409Ar 3  4F 52 45 44  
00409Er 3  08 4D 41 58  envs_max_char:  .byte 8, "MAX-CHAR"
0040A2r 3  2D 43 48 41  
0040A6r 3  52           
0040A7r 3  05 4D 41 58  envs_max_n:     .byte 5, "MAX-N"
0040ABr 3  2D 4E        
0040ADr 3  05 4D 41 58  envs_max_u:     .byte 5, "MAX-U"
0040B1r 3  2D 55        
0040B3r 3  12 52 45 54  envs_rsc:       .byte 18, "RETURN-STACK-CELLS"
0040B7r 3  55 52 4E 2D  
0040BBr 3  53 54 41 43  
0040C6r 3  0B 53 54 41  envs_sc:        .byte 11, "STACK-CELLS"
0040CAr 3  43 4B 2D 43  
0040CEr 3  45 4C 4C 53  
0040D2r 3  09 57 4F 52  envs_wl:        .byte 9, "WORDLISTS"
0040D6r 3  44 4C 49 53  
0040DAr 3  54 53        
0040DCr 3               
0040DCr 3               ; These return a double-cell number
0040DCr 3  05 4D 41 58  envs_max_d:     .byte 5, "MAX-D"
0040E0r 3  2D 44        
0040E2r 3  06 4D 41 58  envs_max_ud:    .byte 6, "MAX-UD"
0040E6r 3  2D 55 44     
0040E9r 3               
0040E9r 3               ; END
0040E9r 3               
0040E9r 2               
0040E9r 2               ; High-level Forth words, see forth_code/README.md
0040E9r 2               forth_words_start:
0040E9r 2  20 63 72 20  .incbin "forth_code/forth_words.asc"
0040EDr 2  2E 28 20 52  
0040F1r 2  65 61 64 79  
0040FBr 2               forth_words_end:
0040FBr 2               
0040FBr 2               ; User-defined Forth words, see forth_code/README.md
0040FBr 2               user_words_start:
0040FBr 2  20 32 30 20  .incbin "forth_code/user_words.asc"
0040FFr 2  63 6F 6E 73  
004103r 2  74 61 6E 74  
0047BDr 2               user_words_end:
0047BDr 2               
0047BDr 2               
0047BDr 2               ; =====================================================================
0047BDr 2               ; COMPILE WORDS, JUMPS and SUBROUTINE JUMPS INTO CODE
0047BDr 2               
0047BDr 2               ; These three routines compile instructions such as "jsr xt_words" into a word
0047BDr 2               ; at compile time so they are available at run time. Words that use this
0047BDr 2               ; routine may not be natively compiled. We use "cmpl" as not to confuse these
0047BDr 2               ; routines with the COMPILE, word. Always call this with a subroutine jump.
0047BDr 2               ; This means combining JSR/RTS to JMP in those cases is not going to work. To
0047BDr 2               ; use, load the LSB of the address in A and the MSB in Y. You can remember
0047BDr 2               ; which comes first by thinking of the song "Young Americans" ("YA") by David
0047BDr 2               ; Bowie.
0047BDr 2               
0047BDr 2               ;               ldy #>addr      ; MSB   ; "Young"
0047BDr 2               ;               lda #<addr      ; LSB   ; "Americans"
0047BDr 2               ;               jsr cmpl_subroutine
0047BDr 2               
0047BDr 2               ; Also, we keep a routine here to compile a single byte passed through A.
0047BDr 2               
0047BDr 2               cmpl_subroutine:
0047BDr 2                   ; This is the entry point to compile JSR <ADDR>
0047BDr 2  48               pha             ; save LSB of address
0047BEr 2  A9 20            lda #$20        ; load opcode for JSR
0047C0r 2  80 03            bra cmpl_common
0047C2r 2               cmpl_jump:
0047C2r 2                   ; This is the entry point to compile JMP <ADDR>
0047C2r 2  48               pha             ; save LSB of address
0047C3r 2  A9 4C            lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
0047C5r 2               cmpl_common:
0047C5r 2                   ; At this point, A contains the opcode to be compiled,
0047C5r 2                   ; the LSB of the address is on the 65c02 stack, and the MSB of
0047C5r 2                   ; the address is in Y
0047C5r 2  20 rr rr         jsr cmpl_a      ; compile opcode
0047C8r 2  68               pla             ; retrieve address LSB; fall thru to cmpl_word
0047C9r 2               cmpl_word:
0047C9r 2                   ; This is the entry point to compile a word (little-endian)
0047C9r 2  20 rr rr         jsr cmpl_a      ; compile LSB of address
0047CCr 2  98               tya             ; fall thru for MSB
0047CDr 2               cmpl_a:
0047CDr 2                   ; This is the entry point to compile a single byte which
0047CDr 2                   ; is passed in A. The built-in assembler assumes that this
0047CDr 2                   ; routine does not modify Y.
0047CDr 2  92 rr            sta (cp)
0047CFr 2  E6 rr            inc cp
0047D1r 2  D0 02            bne _done
0047D3r 2  E6 rr            inc cp+1
0047D5r 2               _done:
0047D5r 2  60               rts
0047D6r 2               
0047D6r 2               
0047D6r 2               
0047D6r 2               ; =====================================================================
0047D6r 2               ; CODE FIELD ROUTINES
0047D6r 2               
0047D6r 2               doconst:
0047D6r 2               ; """Execute a CONSTANT: Push the data in the first two bytes of
0047D6r 2               ; the Data Field onto the Data Stack
0047D6r 2               ; """
0047D6r 2  CA               dex             ; make room for constant
0047D7r 2  CA               dex
0047D8r 2               
0047D8r 2                   ; The value we need is stored in the two bytes after the
0047D8r 2                   ; JSR return address, which in turn is what is on top of
0047D8r 2                   ; the Return Stack
0047D8r 2  68               pla             ; LSB of return address
0047D9r 2  85 rr            sta tmp1
0047DBr 2  68               pla             ; MSB of return address
0047DCr 2  85 rr            sta tmp1+1
0047DEr 2               
0047DEr 2                   ; Start LDY with 1 instead of 0 because of how JSR stores
0047DEr 2                   ; the return address on the 65c02
0047DEr 2  A0 01            ldy #1
0047E0r 2  B1 rr            lda (tmp1),y
0047E2r 2  95 00            sta 0,x
0047E4r 2  C8               iny
0047E5r 2  B1 rr            lda (tmp1),y
0047E7r 2  95 01            sta 1,x
0047E9r 2               
0047E9r 2                   ; This takes us back to the original caller, not the
0047E9r 2                   ; DOCONST caller
0047E9r 2  60               rts
0047EAr 2               
0047EAr 2               
0047EAr 2               dodefer:
0047EAr 2               ; """Execute a DEFER statement at runtime: Execute the address we
0047EAr 2               ; find after the caller in the Data Field
0047EAr 2               ; """
0047EAr 2                   ; The xt we need is stored in the two bytes after the JSR
0047EAr 2                   ; return address, which is what is on top of the Return
0047EAr 2                   ; Stack. So all we have to do is replace our return jump
0047EAr 2                   ; with what we find there
0047EAr 2  68               pla             ; LSB
0047EBr 2  85 rr            sta tmp1
0047EDr 2  68               pla             ; MSB
0047EEr 2  85 rr            sta tmp1+1
0047F0r 2               
0047F0r 2  A0 01            ldy #1
0047F2r 2  B1 rr            lda (tmp1),y
0047F4r 2  85 rr            sta tmp2
0047F6r 2  C8               iny
0047F7r 2  B1 rr            lda (tmp1),y
0047F9r 2  85 rr            sta tmp2+1
0047FBr 2               
0047FBr 2  6C rr rr         jmp (tmp2)      ; This is actually a jump to the new target
0047FEr 2               
0047FEr 2               defer_error:
0047FEr 2                   ; """Error routine for undefined DEFER: Complain and abort"""
0047FEr 2  A9 03            lda #err_defer
004800r 2  4C rr rr         jmp error
004803r 2               
004803r 2               dodoes:
004803r 2               ; """Execute the runtime portion of DOES>. See DOES> and
004803r 2               ; docs/create-does.txt for details and
004803r 2               ; http://www.bradrodriguez.com/papers/moving3.htm
004803r 2               ; """
004803r 2                   ; Assumes the address of the CFA of the original defining word
004803r 2                   ; (say, CONSTANT) is on the top of the Return Stack. Save it
004803r 2                   ; for a later jump, adding one byte because of the way the
004803r 2                   ; 6502 works
004803r 2  7A               ply             ; LSB
004804r 2  68               pla             ; MSB
004805r 2  C8               iny
004806r 2  D0 01            bne @1
004808r 2  1A               inc
004809r 2               @1:
004809r 2  84 rr            sty tmp2
00480Br 2  85 rr            sta tmp2+1
00480Dr 2               
00480Dr 2                   ; Next on the Return Stack should be the address of the PFA of
00480Dr 2                   ; the calling defined word (say, the name of whatever constant we
00480Dr 2                   ; just defined). Move this to the Data Stack, again adding one.
00480Dr 2  CA               dex
00480Er 2  CA               dex
00480Fr 2               
00480Fr 2  7A               ply
004810r 2  68               pla
004811r 2  C8               iny
004812r 2  D0 01            bne @2
004814r 2  1A               inc
004815r 2               @2:
004815r 2  94 00            sty 0,x         ; LSB
004817r 2  95 01            sta 1,x         ; MSB
004819r 2               
004819r 2                   ; This leaves the return address from the original main routine
004819r 2                   ; on top of the Return Stack. We leave that untouched and jump
004819r 2                   ; to the special code of the defining word. It's RTS instruction
004819r 2                   ; will take us back to the main routine
004819r 2  6C rr rr         jmp (tmp2)
00481Cr 2               
00481Cr 2               
00481Cr 2               dovar:
00481Cr 2               ; """Execute a variable: Push the address of the first bytes of
00481Cr 2               ; the Data Field onto the stack. This is called with JSR so we
00481Cr 2               ; can pick up the address of the calling variable off the 65c02's
00481Cr 2               ; stack. The final RTS takes us to the original caller of the
00481Cr 2               ; routine that itself called DOVAR. This is the default
00481Cr 2               ; routine installed with CREATE.
00481Cr 2               ; """
00481Cr 2                   ; Pull the return address off the machine's stack, adding
00481Cr 2                   ; one because of the way the 65c02 handles subroutines
00481Cr 2  7A               ply             ; LSB
00481Dr 2  68               pla             ; MSB
00481Er 2  C8               iny
00481Fr 2  D0 01            bne @1
004821r 2  1A               inc
004822r 2               @1:
004822r 2  CA               dex
004823r 2  CA               dex
004824r 2               
004824r 2  95 01            sta 1,x
004826r 2  98               tya
004827r 2  95 00            sta 0,x
004829r 2               
004829r 2  60               rts
00482Ar 2               
00482Ar 2               ; =====================================================================
00482Ar 2               ; LOW LEVEL HELPER FUNCTIONS
00482Ar 2               
00482Ar 2               byte_to_ascii:
00482Ar 2               ; """Convert byte in A to two ASCII hex digits and EMIT them"""
00482Ar 2               .scope
00482Ar 2  48               pha
00482Br 2  4A               lsr             ; convert high nibble first
00482Cr 2  4A               lsr
00482Dr 2  4A               lsr
00482Er 2  4A               lsr
00482Fr 2  20 rr rr         jsr _nibble_to_ascii
004832r 2  68               pla
004833r 2               
004833r 2                   ; fall through to _nibble_to_ascii
004833r 2               
004833r 2               _nibble_to_ascii:
004833r 2               ; """Private helper function for byte_to_ascii: Print lower nibble
004833r 2               ; of A and and EMIT it. This does the actual work.
004833r 2               ; """
004833r 2  29 0F            and #$0F
004835r 2  09 30            ora #'0'
004837r 2  C9 3A            cmp #$3A        ; '9+1
004839r 2  90 02            bcc @1
00483Br 2  69 06            adc #$06
00483Dr 2               
00483Dr 2  4C rr rr     @1:               jmp emit_a
004840r 2               
004840r 2  60               rts
004841r 2               .endscope
004841r 2               
004841r 2               compare_16bit:
004841r 2               ; """Compare TOS/NOS and return results in form of the 65c02 flags
004841r 2               ; Adapted from Leventhal "6502 Assembly Language Subroutines", see
004841r 2               ; also http://www.6502.org/tutorials/compare_beyond.html
004841r 2               ; For signed numbers, Z signals equality and N which number is larger:
004841r 2               ;       if TOS = NOS: Z=1 and N=0
004841r 2               ;       if TOS > NOS: Z=0 and N=0
004841r 2               ;       if TOS < NOS: Z=0 and N=1
004841r 2               ; For unsigned numbers, Z signals equality and C which number is larger:
004841r 2               ;       if TOS = NOS: Z=1 and N=0
004841r 2               ;       if TOS > NOS: Z=0 and C=1
004841r 2               ;       if TOS < NOS: Z=0 and C=0
004841r 2               ; Compared to the book routine, WORD1 (MINUED) is TOS
004841r 2               ;                               WORD2 (SUBTRAHEND) is NOS
004841r 2               ; """
004841r 2               .scope
004841r 2                   ; Compare LSB first to set the carry flag
004841r 2  B5 00            lda 0,x                 ; LSB of TOS
004843r 2  D5 02            cmp 2,x                 ; LSB of NOS
004845r 2  F0 0A            beq _equal
004847r 2               
004847r 2                   ; LSBs are not equal, compare MSB
004847r 2  B5 01            lda 1,x                 ; MSB of TOS
004849r 2  F5 03            sbc 3,x                 ; MSB of NOS
00484Br 2  09 01            ora #1                  ; Make zero flag 0 because not equal
00484Dr 2  70 08            bvs _overflow
00484Fr 2  80 08            bra _not_equal
004851r 2               _equal:
004851r 2                   ; Low bytes are equal, so we compare high bytes
004851r 2  B5 01            lda 1,x                 ; MSB of TOS
004853r 2  F5 03            sbc 3,x                 ; MSB of NOS
004855r 2  50 04            bvc _done
004857r 2               _overflow:
004857r 2                   ; Handle overflow because we use signed numbers
004857r 2  49 80            eor #$80                ; complement negative flag
004859r 2               _not_equal:
004859r 2  09 01            ora #1                  ; if overflow, we can't be eqal
00485Br 2               _done:
00485Br 2  60               rts
00485Cr 2               .endscope
00485Cr 2               
00485Cr 2               current_to_dp:
00485Cr 2               ; """Look up the current (compilation) dictionary pointer
00485Cr 2               ; in the wordlist set and put it into the dp zero-page
00485Cr 2               ; variable. Uses A and Y.
00485Cr 2               ; """
00485Cr 2                   ; Determine which wordlist is current
00485Cr 2  A0 04            ldy #current_offset
00485Er 2  B1 rr            lda (up),y      ; current is a byte variable
004860r 2  0A               asl             ; turn it into an offset (in cells)
004861r 2               
004861r 2                   ; Get the dictionary pointer for that wordlist.
004861r 2  18               clc
004862r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
004864r 2  A8               tay
004865r 2  B1 rr            lda (up),y              ; get the dp for that wordlist.
004867r 2  85 rr            sta dp
004869r 2  C8               iny
00486Ar 2  B1 rr            lda (up),y
00486Cr 2  85 rr            sta dp+1
00486Er 2               
00486Er 2  60               rts
00486Fr 2               
00486Fr 2               
00486Fr 2               dp_to_current:
00486Fr 2               ; """Look up which wordlist is current and update its pointer
00486Fr 2               ; with the value in dp. Uses A and Y.
00486Fr 2               ; """
00486Fr 2                   ; Determine which wordlist is current
00486Fr 2  A0 04            ldy #current_offset
004871r 2  B1 rr            lda (up),y      ; current is a byte variable
004873r 2  0A               asl             ; turn it into an offset (in cells)
004874r 2               
004874r 2                   ; Get the dictionary pointer for that wordlist.
004874r 2  18               clc
004875r 2  69 06            adc #wordlists_offset   ; add offset to wordlists base.
004877r 2  A8               tay
004878r 2  A5 rr            lda dp
00487Ar 2  91 rr            sta (up),y              ; get the dp for that wordlist.
00487Cr 2  C8               iny
00487Dr 2  A5 rr            lda dp+1
00487Fr 2  91 rr            sta (up),y
004881r 2               
004881r 2  60               rts
004882r 2               
004882r 2               interpret:
004882r 2               .scope
004882r 2               ; """Core routine for the interpreter called by EVALUATE and QUIT.
004882r 2               ; Process one line only. Assumes that the address of name is in
004882r 2               ; cib and the length of the whole input line string is in ciblen
004882r 2               ; """
004882r 2                   ; Normally we would use PARSE here with the SPACE character as
004882r 2                   ; a parameter (PARSE replaces WORD in modern Forths). However,
004882r 2                   ; Gforth's PARSE-NAME makes more sense as it uses spaces as
004882r 2                   ; delimiters per default and skips any leading spaces, which
004882r 2                   ; PARSE doesn't
004882r 2               _loop:
004882r 2  20 rr rr         jsr xt_parse_name       ; ( "string" -- addr u )
004885r 2               
004885r 2                   ; If PARSE-NAME returns 0 (empty line), no characters were left
004885r 2                   ; in the line and we need to go get a new line
004885r 2  B5 00            lda 0,x
004887r 2  15 01            ora 1,x
004889r 2  F0 70            beq _line_done
00488Br 2               
00488Br 2                   ; Go to FIND-NAME to see if this is a word we know. We have to
00488Br 2                   ; make a copy of the address in case it isn't a word we know and
00488Br 2                   ; we have to go see if it is a number
00488Br 2  20 rr rr         jsr xt_two_dup          ; ( addr u -- addr u addr u )
00488Er 2  20 rr rr         jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
004891r 2               
004891r 2                   ; A zero signals that we didn't find a word in the Dictionary
004891r 2  B5 00            lda 0,x
004893r 2  15 01            ora 1,x
004895r 2  D0 28            bne _got_name_token
004897r 2               
004897r 2                   ; We didn't get any nt we know of, so let's see if this is
004897r 2                   ; a number.
004897r 2  E8               inx                     ; ( addr u 0 -- addr u )
004898r 2  E8               inx
004899r 2               
004899r 2                   ; If the number conversion doesn't work, NUMBER will do the
004899r 2                   ; complaining for us
004899r 2  20 rr rr         jsr xt_number           ; ( addr u -- u|d )
00489Cr 2               
00489Cr 2                   ; Otherweise, if we're interpreting, we're done
00489Cr 2  A5 rr            lda state
00489Er 2  F0 E2            beq _loop
0048A0r 2               
0048A0r 2                   ; We're compiling, so there is a bit more work.  Check
0048A0r 2                   ; status bit 5 to see if it's a single or double-cell
0048A0r 2                   ; number.
0048A0r 2  A9 20            lda #$20
0048A2r 2  24 rr            bit status
0048A4r 2  F0 0D            beq _single_number
0048A6r 2               
0048A6r 2                   ; It's a double cell number.  If we swap the
0048A6r 2                   ; upper and lower half, we can use the literal_runtime twice
0048A6r 2                   ; to compile it into the dictionary.
0048A6r 2  20 rr rr         jsr xt_swap
0048A9r 2  A0 rr            ldy #>literal_runtime
0048ABr 2  A9 rr            lda #<literal_runtime
0048ADr 2  20 rr rr         jsr cmpl_subroutine
0048B0r 2               
0048B0r 2                   ; compile our number
0048B0r 2  20 rr rr         jsr xt_comma
0048B3r 2               
0048B3r 2                   ; Fall into _single_number to process the other half.
0048B3r 2               _single_number:
0048B3r 2  A0 rr            ldy #>literal_runtime
0048B5r 2  A9 rr            lda #<literal_runtime
0048B7r 2  20 rr rr         jsr cmpl_subroutine
0048BAr 2               
0048BAr 2                   ; compile our number
0048BAr 2  20 rr rr         jsr xt_comma
0048BDr 2               
0048BDr 2                   ; That was so much fun, let's do it again!
0048BDr 2  80 C3            bra _loop
0048BFr 2               
0048BFr 2               _got_name_token:
0048BFr 2                   ; We have a known word's nt TOS. We're going to need its xt
0048BFr 2                   ; though, which is four bytes father down.
0048BFr 2               
0048BFr 2                   ; We arrive here with ( addr u nt ), so we NIP twice
0048BFr 2  B5 00            lda 0,x
0048C1r 2  95 04            sta 4,x
0048C3r 2  B5 01            lda 1,x
0048C5r 2  95 05            sta 5,x
0048C7r 2               
0048C7r 2  E8               inx
0048C8r 2  E8               inx
0048C9r 2  E8               inx
0048CAr 2  E8               inx                     ; ( nt )
0048CBr 2               
0048CBr 2                   ; Save a version of nt for error handling and compilation stuff
0048CBr 2  B5 00            lda 0,x
0048CDr 2  85 rr            sta tmpbranch
0048CFr 2  B5 01            lda 1,x
0048D1r 2  85 rr            sta tmpbranch+1
0048D3r 2               
0048D3r 2  20 rr rr         jsr xt_name_to_int      ; ( nt - xt )
0048D6r 2               
0048D6r 2                   ; See if we are in interpret or compile mode, 0 is interpret
0048D6r 2  A5 rr            lda state
0048D8r 2  D0 13            bne _compile
0048DAr 2               
0048DAr 2                   ; We are interpreting, so EXECUTE the xt that is TOS. First,
0048DAr 2                   ; though, see if this isn't a compile-only word, which would be
0048DAr 2                   ; illegal. The status byte is the second one of the header.
0048DAr 2  A0 01            ldy #1
0048DCr 2  B1 rr            lda (tmpbranch),y
0048DEr 2  29 01            and #CO                 ; mask everything but Compile Only bit
0048E0r 2  F0 05            beq _interpret
0048E2r 2               
0048E2r 2  A9 02            lda #err_compileonly
0048E4r 2  4C rr rr         jmp error
0048E7r 2               
0048E7r 2               _interpret:
0048E7r 2                   ; We JSR to EXECUTE instead of calling the xt directly because
0048E7r 2                   ; the RTS of the word we're executing will bring us back here,
0048E7r 2                   ; skipping EXECUTE completely during RTS. If we were to execute
0048E7r 2                   ; xt directly, we have to fool around with the Return Stack
0048E7r 2                   ; instead, which is actually slightly slower
0048E7r 2  20 rr rr         jsr xt_execute
0048EAr 2               
0048EAr 2                   ; That's quite enough for this word, let's get the next one
0048EAr 2  4C rr rr         jmp _loop
0048EDr 2               
0048EDr 2               _compile:
0048EDr 2                   ; We're compiling! However, we need to see if this is an
0048EDr 2                   ; IMMEDIATE word, which would mean we execute it right now even
0048EDr 2                   ; during compilation mode. Fortunately, we saved the nt so life
0048EDr 2                   ; is easier. The flags are in the second byte of the header
0048EDr 2  A0 01            ldy #1
0048EFr 2  B1 rr            lda (tmpbranch),y
0048F1r 2  29 04            and #IM                 ; Mask all but IM bit
0048F3r 2  D0 F2            bne _interpret          ; IMMEDIATE word, execute right now
0048F5r 2               
0048F5r 2                   ; Compile the xt into the Dictionary with COMPILE,
0048F5r 2  20 rr rr         jsr xt_compile_comma
0048F8r 2  4C rr rr         jmp _loop
0048FBr 2               
0048FBr 2               _line_done:
0048FBr 2                   ; drop stuff from PARSE_NAME
0048FBr 2  E8               inx
0048FCr 2  E8               inx
0048FDr 2  E8               inx
0048FEr 2  E8               inx
0048FFr 2               
0048FFr 2  60               rts
004900r 2               .endscope
004900r 2               
004900r 2               
004900r 2               is_printable:
004900r 2               .scope
004900r 2               ; """Given a character in A, check if it is a printable ASCII
004900r 2               ; character in the range from $20 to $7E inclusive. Returns the
004900r 2               ; result in the Carry Flag: 0 (clear) is not printable, 1 (set)
004900r 2               ; is printable. Keeps A. See
004900r 2               ; http://www.obelisk.me.uk/6502/algorithms.html for a
004900r 2               ; discussion of various ways to do this
004900r 2  C9 20            cmp #AscSP              ; $20
004902r 2  90 08            bcc _done
004904r 2  C9 7F            cmp #'~' + 1             ; $7E
004906r 2  B0 03            bcs _failed
004908r 2               
004908r 2  38               sec
004909r 2  80 01            bra _done
00490Br 2               _failed:
00490Br 2  18               clc
00490Cr 2               _done:
00490Cr 2  60               rts
00490Dr 2               .endscope
00490Dr 2               
00490Dr 2               
00490Dr 2               is_whitespace:
00490Dr 2               .scope
00490Dr 2               ; """Given a character in A, check if it is a whitespace
00490Dr 2               ; character, that is, an ASCII value from 0 to 32 (where
00490Dr 2               ; 32 is SPACE). Returns the result in the Carry Flag:
00490Dr 2               ; 0 (clear) is no, it isn't whitespace, while 1 (set) means
00490Dr 2               ; that it is whitespace. See PARSE and PARSE-NAME for
00490Dr 2               ; a discussion of the uses. Does not change A or Y.
00490Dr 2  C9 00            cmp #00         ; explicit comparison to leave Y untouched
00490Fr 2  90 08            bcc _done
004911r 2               
004911r 2  C9 21            cmp #AscSP+1
004913r 2  B0 03            bcs _failed
004915r 2               
004915r 2  38               sec
004916r 2  80 01            bra _done
004918r 2               _failed:
004918r 2  18               clc
004919r 2               _done:
004919r 2  60               rts
00491Ar 2               .endscope
00491Ar 2               
00491Ar 2               
00491Ar 2               ; Underflow tests. We jump to the label with the number of cells (not: bytes)
00491Ar 2               ; required for the word. This routine flows into the generic error handling
00491Ar 2               ; code
00491Ar 2               underflow_1:
00491Ar 2               ; """Make sure we have at least one cell on the Data Stack"""
00491Ar 2  E0 FE            cpx #dsp0-1
00491Cr 2  10 10            bpl underflow_error
00491Er 2  60               rts
00491Fr 2               underflow_2:
00491Fr 2               ; """Make sure we have at least two cells on the Data Stack"""
00491Fr 2  E0 FC            cpx #dsp0-3
004921r 2  10 0B            bpl underflow_error
004923r 2  60               rts
004924r 2               underflow_3:
004924r 2               ; """Make sure we have at least three cells on the Data Stack"""
004924r 2  E0 FA            cpx #dsp0-5
004926r 2  10 06            bpl underflow_error
004928r 2  60               rts
004929r 2               underflow_4:
004929r 2               ; """Make sure we have at least four cells on the Data Stack"""
004929r 2  E0 F8            cpx #dsp0-7
00492Br 2  10 01            bpl underflow_error
00492Dr 2  60               rts
00492Er 2               
00492Er 2               underflow_error:
00492Er 2                   ; Entry for COLD/ABORT/QUIT
00492Er 2  A9 09            lda #err_underflow      ; fall through to error
004930r 2               
004930r 2               error:
004930r 2               ; """Given the error number in a, print the associated error string and
004930r 2               ; call abort. Uses tmp3.
004930r 2               ; """
004930r 2  0A               asl
004931r 2  A8               tay
004932r 2  B9 rr rr         lda error_table,y
004935r 2  85 rr            sta tmp3                ; LSB
004937r 2  C8               iny
004938r 2  B9 rr rr         lda error_table,y
00493Br 2  85 rr            sta tmp3+1              ; MSB
00493Dr 2               
00493Dr 2  20 rr rr         jsr print_common
004940r 2  20 rr rr         jsr xt_cr
004943r 2  4C rr rr         jmp xt_abort            ; no jsr, as we clobber return stack
004946r 2               
004946r 2               
004946r 2               ; =====================================================================
004946r 2               ; PRINTING ROUTINES
004946r 2               
004946r 2               ; We distinguish two types of print calls, both of which take the string number
004946r 2               ; (see strings.asm) in A:
004946r 2               
004946r 2               ;       print_string       - with a line feed
004946r 2               ;       print_string_no_lf - without a line feed
004946r 2               
004946r 2               ; In addition, print_common provides a lower-level alternative for error
004946r 2               ; handling and anything else that provides the address of the
004946r 2               ; zero-terminated string directly in tmp3. All of those routines assume that
004946r 2               ; printing should be more concerned with size than speed, because anything to
004946r 2               ; do with humans reading text is going to be slow.
004946r 2               
004946r 2               print_string_no_lf:
004946r 2               ; """Given the number of a zero-terminated string in A, print it to the
004946r 2               ; current output without adding a LF. Uses Y and tmp3 by falling
004946r 2               ; through to print_common
004946r 2               ; """
004946r 2                   ; Get the entry from the string table
004946r 2  0A               asl
004947r 2  A8               tay
004948r 2  B9 rr rr         lda string_table,y
00494Br 2  85 rr            sta tmp3                ; LSB
00494Dr 2  C8               iny
00494Er 2  B9 rr rr         lda string_table,y
004951r 2  85 rr            sta tmp3+1              ; MSB
004953r 2               
004953r 2                   ; fall through to print_common
004953r 2               print_common:
004953r 2               ; """Common print routine used by both the print functions and
004953r 2               ; the error printing routine. Assumes string address is in tmp3. Uses
004953r 2               ; Y.
004953r 2               ; """
004953r 2               .scope
004953r 2  A0 00            ldy #0
004955r 2               _loop:
004955r 2  B1 rr            lda (tmp3),y
004957r 2  F0 06            beq _done               ; strings are zero-terminated
004959r 2               
004959r 2  20 rr rr         jsr emit_a              ; allows vectoring via output
00495Cr 2  C8               iny
00495Dr 2  80 F6            bra _loop
00495Fr 2               _done:
00495Fr 2  60               rts
004960r 2               .endscope
004960r 2               
004960r 2               print_string:
004960r 2               ; """Print a zero-terminated string to the console/screen, adding a LF.
004960r 2               ; We do not check to see if the index is out of range. Uses tmp3.
004960r 2               ; """
004960r 2  20 rr rr         jsr print_string_no_lf
004963r 2  4C rr rr         jmp xt_cr               ; JSR/RTS because never compiled
004966r 2               
004966r 2               
004966r 2               print_u:
004966r 2               ; """basic printing routine used by higher-level constructs,
004966r 2               ; the equivalent of the forth word  0 <# #s #> type  which is
004966r 2               ; basically u. without the space at the end. used for various
004966r 2               ; outputs
004966r 2               ; """
004966r 2  20 rr rr         jsr xt_zero                     ; 0
004969r 2  20 rr rr         jsr xt_less_number_sign         ; <#
00496Cr 2  20 rr rr         jsr xt_number_sign_s            ; #S
00496Fr 2  20 rr rr         jsr xt_number_sign_greater      ; #>
004972r 2  4C rr rr         jmp xt_type                     ; JSR/RTS because never compiled
004975r 2               
004975r 2               ; END
004975r 2               
004975r 1               ; .include "../../ed.s"
004975r 1               
004975r 1               
004975r 1               .segment "DATA"
004975r 1               
004975r 1               platform_bye:
004975r 1               kernel_init:
004975r 1               v_nmi:
004975r 1  A9 FF            lda #$FF
004977r 1  8D 82 FF         sta DDRB
00497Ar 1  8D 83 FF         sta DDRA
00497Dr 1  9C 81 FF         stz PORTA
004980r 1  9C 80 FF         stz PORTB
004983r 1               .ifdef video_init
004983r 1                   jsr video_init
004983r 1               .endif
004983r 1               .ifdef ps2_init
004983r 1  20 rr rr         jsr ps2_init
004986r 1               .endif
004986r 1               .ifdef timer_init
004986r 1  20 rr rr         jsr timer_init
004989r 1               .endif
004989r 1  20 rr rr         jsr acia_init
00498Cr 1               .ifdef lcd_init
00498Cr 1                   jsr lcd_init
00498Cr 1               .endif
00498Cr 1               .ifdef spi_init
00498Cr 1                   jsr spi_init
00498Cr 1               .endif
00498Cr 1               .ifdef kb_init
00498Cr 1                   jsr kb_init
00498Cr 1               .endif
00498Cr 1               
00498Cr 1               
00498Cr 1               
00498Cr 1  A2 00 BD rr      printascii welcome_message
004990r 1  rr F0 06 20  
004994r 1  rr rr E8 80  
004999r 1               
004999r 1  4C rr rr         jmp forth
00499Cr 1               
00499Cr 1               
00499Cr 1               kernel_putc:
00499Cr 1                   ; """Print a single character to the console. """
00499Cr 1                   ;; Send_Char - send character in A out serial port.
00499Cr 1                   ;; Uses: A (original value restored)
00499Cr 1               send_char:
00499Cr 1  48               pha
00499Dr 1                   .ifdef char_out
00499Dr 1                   jsr char_out
00499Dr 1                   .endif
00499Dr 1                   .ifdef acia_out
00499Dr 1  20 rr rr         jsr acia_out
0049A0r 1                   .endif
0049A0r 1               send_char_exit:
0049A0r 1               .ifdef lcd_print
0049A0r 1                   ; jsr lcd_print
0049A0r 1               .endif
0049A0r 1  68               pla
0049A1r 1  60               rts
0049A2r 1               
0049A2r 1               
0049A2r 1                       ;; Get_Char - get a character from the serial port into A.
0049A2r 1                       ;; Set the carry flag if char is valid.
0049A2r 1                       ;; Return immediately with carry flag clear if no char available.
0049A2r 1                       ;; Uses: A (return value)
0049A2r 1               
0049A2r 1               Get_Char:
0049A2r 1  20 rr rr         jsr acia_getc
0049A5r 1  90 05            bcc get_ps2_char                ; check keyboard buffer if nothing from ACIA
0049A7r 1  20 rr rr         jsr check_ctrl_c
0049AAr 1  38               sec                             ; Set Carry to show we got a character
0049ABr 1  60               rts                             ; Return
0049ACr 1               
0049ACr 1               get_ps2_char:                       ; no ACIA char available, try to get from KB buffer
0049ACr 1               .ifdef ps2_get_char
0049ACr 1  20 rr rr         jsr ps2_get_char
0049AFr 1               .endif
0049AFr 1  90 02            bcc get_kb_char
0049B1r 1  38               sec
0049B2r 1               
0049B2r 1  60               rts
0049B3r 1               get_kb_char:
0049B3r 1                   .ifdef kb_get_char
0049B3r 1               
0049B3r 1                   ; ldy #5
0049B3r 1                   ; jsr delay_short
0049B3r 1                   ; ply
0049B3r 1                       jsr kb_get_char
0049B3r 1               
0049B3r 1                   .endif
0049B3r 1               exit:                         ; Indicate no char available.
0049B3r 1  60               rts                             ; return
0049B4r 1               
0049B4r 1               kernel_getc:
0049B4r 1                   ; """Get a single character from the keyboard (waits for key).
0049B4r 1                   ; """
0049B4r 1                   ;; Get_Char_Wait - same as Get_Char only blocking.
0049B4r 1                   ;; Uses: A (return value)
0049B4r 1               Get_Char_Wait:
0049B4r 1  20 rr rr         jsr Get_Char
0049B7r 1  90 FB            bcc Get_Char_Wait
0049B9r 1  60               rts
0049BAr 1               
0049BAr 1               check_ctrl_c:
0049BAr 1                   ;; Check if we have ctrl-C character, if so jump to nmi
0049BAr 1  C9 03            cmp #$03
0049BCr 1  D0 10            bne exit_ctrl_c
0049BEr 1  A2 00 BD rr      printascii abort_message
0049C2r 1  rr F0 06 20  
0049C6r 1  rr rr E8 80  
0049CBr 1  4C rr rr         jmp xt_abort
0049CEr 1               
0049CEr 1               exit_ctrl_c:
0049CEr 1  60               rts
0049CFr 1               
0049CFr 1               
0049CFr 1               
0049CFr 1               v_irq:                          ; IRQ handler
0049CFr 1  48                   pha
0049D0r 1  5A                   phy
0049D1r 1                       ; check if bit 7 of IFR is set
0049D1r 1  AD 8D FF             lda IFR
0049D4r 1  10 0B                bpl v_kb_irq  ; Interrupt not from VIA, exit
0049D6r 1               
0049D6r 1  29 08                and #$08        ; ps2 has priority
0049D8r 1  D0 12                bne v_irq_ps2
0049DAr 1  AD 8D FF             lda IFR
0049DDr 1  29 40                and #$40
0049DFr 1  D0 20                bne v_irq_timer
0049E1r 1               v_kb_irq:
0049E1r 1  AD 9D FF             lda KB_IFR
0049E4r 1  10 26                bpl v_irq_exit
0049E6r 1  29 40                and #$40
0049E8r 1  D0 22                bne v_kb_irq_timer
0049EAr 1  80 20                bra v_irq_exit
0049ECr 1               
0049ECr 1               
0049ECr 1               v_irq_ps2:
0049ECr 1                   .ifdef ps2_irq
0049ECr 1  A5 rr                lda time
0049EEr 1  85 rr                sta last_ps2_time
0049F0r 1  A5 rr                lda time+1
0049F2r 1  85 rr                sta last_ps2_time+1
0049F4r 1  A5 rr                lda time+2
0049F6r 1  85 rr                sta last_ps2_time+2
0049F8r 1  A5 rr                lda time+3
0049FAr 1  85 rr                sta last_ps2_time+3
0049FCr 1                       ; this delay is here to ensure we prevent desynchronization
0049FCr 1                       ;ldy #$04         ; correct delay seems to be #$20 at 10Mhz
0049FCr 1                       ; jsr delay_short
0049FCr 1               
0049FCr 1               
0049FCr 1  20 rr rr             jsr ps2_irq
0049FFr 1               
0049FFr 1                       ; ldy #$04         ; correct delay seems to be #$20 at 10Mhz
0049FFr 1                       ; jsr delay_short
0049FFr 1                   .endif
0049FFr 1  80 0B                bra v_irq_exit
004A01r 1               
004A01r 1               v_irq_timer:
004A01r 1  AD 84 FF             lda T1CL
004A04r 1                       ; clear timer interrupt
004A04r 1                   .ifdef timer_irq
004A04r 1  20 rr rr             jsr timer_irq
004A07r 1                   .endif
004A07r 1  20 rr rr             jsr Get_Char ; Check if a char is waiting to be able to break on CTRL-C
004A0Ar 1                       ; check if there is a char waiting to be printed to the lcd
004A0Ar 1                       ; lda lcd_char
004A0Ar 1                       ; beq v_exit
004A0Ar 1                       ; jsr lcd_print
004A0Ar 1                       ; stz lcd_char
004A0Ar 1               
004A0Ar 1               
004A0Ar 1  80 00                bra v_irq_exit
004A0Cr 1               v_kb_irq_timer:
004A0Cr 1               .ifdef kb_time
004A0Cr 1                   lda KB_T1CL ; clear timer interrupt
004A0Cr 1                   inc kb_time
004A0Cr 1                   bne v_irq_exit
004A0Cr 1               .endif
004A0Cr 1                   ;jsr kb_scan
004A0Cr 1               v_irq_exit:
004A0Cr 1  7A               ply
004A0Dr 1  68               pla
004A0Er 1  40               rti
004A0Fr 1               
004A0Fr 1               .segment "RODATA"
0000FFr 1               
0000FFr 1  57 65 6C 63  welcome_message: .byte "Welcome to Planck 6502", $0D, "Type 'words' for available words", 0
000103r 1  6F 6D 65 20  
000107r 1  74 6F 20 50  
000137r 1  0D 0A 00     abort_message: .byte AscCR, AscLF, 0
00013Ar 1               
00013Ar 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        .word v_nmi
000002r 1  rr rr        .word v_reset
000004r 1  rr rr        .word v_irq
000004r 1               
